<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-06-19T12:40:08.827Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>どうしてHTML5が廃止されたのか</title>
    <link href="https://future-architect.github.io/articles/20210621a/"/>
    <id>https://future-architect.github.io/articles/20210621a/</id>
    <published>2021-06-20T15:00:00.000Z</published>
    <updated>2021-06-19T12:40:08.827Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210621a/html5_tombstone.png" alt="854" width="480" height=""><p>HTML5が2021年の1月に廃止されました。</p><p>Webエンジニアとしてバリバリ活躍されてる方やエグゼクティブテックリードのような肩書きを持つ方にとっては「何をいまさら」という話題かと思います。<br>しかしながら、今年も新人さん入ってきてくださったので、プログラミングを学習中にHTML5という文字列に悩まされないように、そもそもHTML5とは何かや、廃止された経緯をまとめてみます。</p><h1 id="HTML5とは"><a href="#HTML5とは" class="headerlink" title="HTML5とは"></a>HTML5とは</h1><p>Webサイトを作るときに必ず書くことになるHTML。Webサイトのコンテンツ、つまり中身や構造を作るために使うマークアップ言語です。</p><p>そして、その最近版として10年ほど前に登場したHTML5。当時は Webニュースなどで盛んに特集が組まれていましたが、このHTML5がついこないだ、2021年1月28日に廃止されました。</p><h2 id="広義のHTML5-狭義のHTML5"><a href="#広義のHTML5-狭義のHTML5" class="headerlink" title="広義のHTML5 / 狭義のHTML5"></a>広義のHTML5 / 狭義のHTML5</h2><p>HTML5と一言で言っても話す人によって、指すものが異なることがあったりします。</p><p>広義のHTML5は、「Webで何でもできるぞ」みたいな技術の総称。つまりバズワードですね。10年前に「HTML5で広がる未来」といったような特集がブログ記事や技術雑誌でよく組まれていました。さすがにそういった特集はここ数年見なくなりましたが、ときたまTwitterに流れてくる「HTML5でゲームつくってみた」や「HTML5のかっこいいサイト」は広義のHTML5に当てはまります。</p><p>そして、狭義のHTML5はW3Cという機関が定めたHTMLの勧告になります。今回話す廃止されたHTML5というのは狭義のHTML5の話。</p><h2 id="W3CとHTML5"><a href="#W3CとHTML5" class="headerlink" title="W3CとHTML5"></a>W3CとHTML5</h2><p>W3C。正式名称は World Wide Web Consortium<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。名前の通りWorld Wide Webの標準を策定している国際的な機関で、ティム・バーナーズ＝リーという初めてWebサイトを作った人が設立した組織です。このW3CがHTMLだけでなく、HTTPやCSS、DOMといったWebサイトに関わるものの仕様を決めています。つまり、「Webサイトとは何か」を決めている組織ということですね。</p><p>そして、このW3CがHTML5を10年ほど前に発表しました。1本目のドラフトを2008年に出し、最終ドラフトになったのが2011年。この時期に「HTML5を使えば Webブラウザで何でもできるぞ」という特集がたくさん組まれました。</p><p>そして、2014年10月に正式勧告<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。そのあと、HTML 5.1, HTML 5.2, HTML 5.3と勧告やドラフトが発表され、2021年1月28日にすべて廃止になりました。HTML6をW3Cが発表したという話では無く、W3Cが勧告したHTMLの規格が全部廃止になったという話です。</p><h1 id="HTML5廃止の経緯"><a href="#HTML5廃止の経緯" class="headerlink" title="HTML5廃止の経緯"></a>HTML5廃止の経緯</h1><p>なぜ廃止されたか、このあとのHTMLはどうなるのかという話をするために、まずWHATWGというグループの話をしましょう。</p><h2 id="WHATWGとHTML5の誕生"><a href="#WHATWGとHTML5の誕生" class="headerlink" title="WHATWGとHTML5の誕生"></a>WHATWGとHTML5の誕生</h2><p>2004年にApple・Mozilla・Operaの3社によって設立されたWHATWG。<br>読み方はワットウィージー or ワットウィグ or ワットダブリュージーなど<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p><p>この組織は「W3Cは現場のこと全然わかってない。HTMLを改善する気配が全然ない上に、XHTMLとかいうよくわからない規格をつくろうとしてる。現場のことわかってるワシらで新しいHTMLをつくるぞ」<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> というW3CのHTMLに対する関心の低さへの懸念やWeb開発者の要望を無視しているのではという不満を解消することを目的に設立されました。</p><p>実はこのWHATWGがW3Cに「HTMLの改善をしろ」と圧力を掛け生まれたのが、HTML5。<br>Webで力を付けた企業が集まって、独自の機能を自分たちが作っているブラウザに組み込んで外堀を埋めつつ、新しいHTMLをW3Cに認めさせてHTML5が生まれました。</p><p>もちろんW3C側も無条件で認めたわけではありません。Webの標準となるようなHTMLにするため、W3Cの標準化プロセスに従いつつWHATWGとのすり合わせを行い、ようやくHTML5としてまとまってドラフトとして発表されました。そしてこのHTML5が生まれたことで、それまでのWebでよく使われていた Adobe Flash、Java Applet、Microsoft Silverlight は廃れていきました。</p><h2 id="方向性の違い"><a href="#方向性の違い" class="headerlink" title="方向性の違い"></a>方向性の違い</h2><p>HTML5ができてW3CとWHATWGは仲良くできるかなと思いきや、方向性の違いによって2012年にまたHTMLが分裂します<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。</p><p>勧告としてドキュメントをきちんと整備してから発行したいW3Cと、継続して順次アップデートを行い続けたいWHATWG。それぞれが別々にHTMLを策定することになりました。WHATWGのHTMLのスナップショットがW3Cという構造になってくれればWebの開発者としてはわかりやすかったのですが、時が流れるにつれW3CがWHATWGのHTMLをベースにしつつも独自の要素を付け足すなどして、それぞれのHTMLが徐々に乖離していきました。</p><p>つまり、「W3CのHTML5」と「WHATWGのHTML」の2つがHTMLの標準として併存する時代。HTMLの仕様書が2つあってそれぞれの中身が細かいところで微妙に食い違っているわけです。開発を行う上で非常に厄介ですね。当時はブラウザごとに参照する仕様が異なり、Internet ExplorerはW3Cの仕様を元に、Chrome、Firefox、SafariはWHATWGの仕様に沿って開発されていました。</p><h2 id="停戦協定、HTML-Living-Standardが標準に"><a href="#停戦協定、HTML-Living-Standardが標準に" class="headerlink" title="停戦協定、HTML Living Standardが標準に"></a>停戦協定、HTML Living Standardが標準に</h2><p>しばらくそんな厄介な時代がしばらく続きましたが、2019年5月に停戦協定が結ばれました<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>。停戦協定の内容としては「W3CとWHATWGが協力して、WHATWGの作ってきたHTML、HTML Living StandardをHTMLとDOMの唯一の標準にする」というもの。</p><p>そして、2021年1月29日。WHATWGのサイト上にあるHTML Living Standard<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup> が正式に W3C Recommendation（勧告）として発表されました<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>。</p><p>それと同時に、W3Cが決めてきたHTMLの規格は全部廃止。W3CにあったHTML5のドキュメント<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>には「最新版のHTML規格はこっちだよ」と、W3CからWHATWGのサイトへのリンクが貼られています。</p><h2 id="時系列まとめ"><a href="#時系列まとめ" class="headerlink" title="時系列まとめ"></a>時系列まとめ</h2><p>ここまでの流れを図にまとめるとこんな感じになります。くっついて離れてくっついて。</p><p>これからこのまま仲良しでいられることを切に祈ります。</p><img src="/images/20210621a/timeline.png" alt="W3CとWHATWGを時系列で整理した図" width="1200" height="214" loading="lazy"><h1 id="HTML5-と-HTML-Living-Standardの違い"><a href="#HTML5-と-HTML-Living-Standardの違い" class="headerlink" title="HTML5 と HTML Living Standardの違い"></a>HTML5 と HTML Living Standardの違い</h1><p>ここまでの経緯を聞いて、Web開発をしてる方や勉強中の方が一番知りたいのは「HTML Living StandardはHTML5と何が違うの？」ということだと思いますが、基本的なHTMLを書く上では大きな違いはありません。HTMLファイルはこれまで通り <code>&lt;!DOCTYPE html&gt;</code> で始まりますし、<code>&lt;img&gt;</code>や<code>&lt;video&gt;</code>でマルチメディアも扱えます。</p><p>しかしながら、HTML Living Standardで新たに追加されたり変更になった点は多々あります。<br>例をいくつか挙げると</p><ul><li><code>&lt;a href=&quot;&quot;&gt;</code> をクリックしたときに、hrefのページに遷移しつつ、別URLにpingを送信する<code>ping</code>属性の追加<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup></li><li><code>&lt;img&gt;</code> の遅延読み込みを行う <code>loading</code> の追加<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup></li><li> <code>autofocus</code> が <code>&lt;button&gt;</code>や<code>&lt;input&gt;</code>以外の、全てのフォーカス可能な要素にも適用可能に<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup></li><li> <code>&lt;h1&gt;</code>は複数使用可能<sup id="fnref:13"><a href="#fn:13" rel="footnote">13</a></sup>（ただし <code>&lt;section&gt;</code>も併用すること）</li></ul><p>などなど。HTML Living Standardは日々更新されるのであくまで現時点では、ですが。</p><p>HTML Living Standardの仕様はかなり読みやすくレイアウトされてますので、ぜひ一度どんな感じか見てみてください。</p><p><a href="https://html.spec.whatwg.org/">https://html.spec.whatwg.org/</a></p><p>また有志の方が日本語訳も進めてくださっています。本当にありがたい。</p><p><a href="https://momdo.github.io/html/">https://momdo.github.io/html/</a></p><h2 id="余談：CSS3はどうなってるの？"><a href="#余談：CSS3はどうなってるの？" class="headerlink" title="余談：CSS3はどうなってるの？"></a>余談：CSS3はどうなってるの？</h2><p>HTML5と共に語られがちなCSS3についてですが、こちらに関しては変わらずW3Cの管轄になっています。実装と勧告のスピード違いがHTML5ほど問題にならなかったのは、CSSはHTMLと違い機能単位でアップデートしようという方針に切り替わったためでしょうか（fontについて、borderについて、backgroundについて、と策定されている）。</p><p>現在のCSS3についての最新情報はW3C内の 「CSS current work &amp; how to participate」というページにまとまっているので、こんなページがあるんだなぁと覗いてみてください。</p><p><a href="https://www.w3.org/Style/CSS/current-work">https://www.w3.org/Style/CSS/current-work</a></p><p>とはいえ、私もCSSの仕様はあまり読み込んでなくて、MozillaのMDN Web Docs<sup id="fnref:14"><a href="#fn:14" rel="footnote">14</a></sup>を参照する場合のほうが多いのですが。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>HTMLの規格策定はW3Cでなく、WHATWGがつくることになりました。それに伴って、HTML5は廃止され、HTML Living Standardがこれからの主流になったという話でした。</p><p>HTMLを書いてるときにわからないことがあったとき、HTML Living Standardの仕様書を読むと確実、ということを認識してもらえれば幸い。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.w3.org/">https://www.w3.org/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://www.w3.org/2014/10/html5-rec.html.ja">https://www.w3.org/2014/10/html5-rec.html.ja</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://whatwg.org/faq#spell-and-pronounce">https://whatwg.org/faq#spell-and-pronounce</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><a href="https://whatwg.org/faq#what-is-the-whatwg">https://whatwg.org/faq#what-is-the-whatwg</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://html5experts.jp/momdo/21119/">https://html5experts.jp/momdo/21119/</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;"><a href="https://www.w3.org/blog/news/archives/7753">https://www.w3.org/blog/news/archives/7753</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;"><a href="https://html.spec.whatwg.org/">https://html.spec.whatwg.org/</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;"><a href="https://www.w3.org/blog/news/archives/8909">https://www.w3.org/blog/news/archives/8909</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="vertical-align: top; padding-right: 10px;">9.</span><span style="vertical-align: top;"><a href="https://www.w3.org/TR/2021/SPSD-html52-20210128/">https://www.w3.org/TR/2021/SPSD-html52-20210128/</a></span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="vertical-align: top; padding-right: 10px;">10.</span><span style="vertical-align: top;"><a href="https://html.spec.whatwg.org/#hyperlink-auditing">https://html.spec.whatwg.org/#hyperlink-auditing</a></span><a href="#fnref:10" rev="footnote"> ↩</a></li><li id="fn:11"><span style="vertical-align: top; padding-right: 10px;">11.</span><span style="vertical-align: top;"><a href="https://html.spec.whatwg.org/#lazy-loading-attributes">https://html.spec.whatwg.org/#lazy-loading-attributes</a></span><a href="#fnref:11" rev="footnote"> ↩</a></li><li id="fn:12"><span style="vertical-align: top; padding-right: 10px;">12.</span><span style="vertical-align: top;"><a href="https://html.spec.whatwg.org/#the-autofocus-attribute">https://html.spec.whatwg.org/#the-autofocus-attribute</a></span><a href="#fnref:12" rev="footnote"> ↩</a></li><li id="fn:13"><span style="vertical-align: top; padding-right: 10px;">13.</span><span style="vertical-align: top;"><a href="https://html.spec.whatwg.org/#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements">https://html.spec.whatwg.org/#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements</a></span><a href="#fnref:13" rev="footnote"> ↩</a></li><li id="fn:14"><span style="vertical-align: top; padding-right: 10px;">14.</span><span style="vertical-align: top;"><a href="https://developer.mozilla.org/ja/docs/Web/CSS">https://developer.mozilla.org/ja/docs/Web/CSS</a></span><a href="#fnref:14" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210621a/html5_tombstone.png&quot; alt=&quot;854&quot; width=&quot;480&quot; height=&quot;&quot;&gt;

&lt;p&gt;HTML5が2021年の1月に廃止されました。&lt;/p&gt;
&lt;p&gt;Webエンジニアとしてバリバリ活躍されてる方や</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="HTML" scheme="https://future-architect.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>AWS内の通信がインターネットを経由しない今、VPC Endpointを利用する意味はあるのか？</title>
    <link href="https://future-architect.github.io/articles/20210618a/"/>
    <id>https://future-architect.github.io/articles/20210618a/</id>
    <published>2021-06-17T15:00:00.000Z</published>
    <updated>2021-06-18T01:40:24.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG村瀬です。</p><p>タイトルの通りですがAWS内の通信においてインターネットを経由しないことが最近になって公式ドキュメントに明記されたことを受け、改めてVPC Endpointの必要性について調べてみました。</p><blockquote><p>Q:2 つのインスタンスがパブリック IP アドレスを使用して通信する場合、またはインスタンスが AWS のサービスのパブリックエンドポイントと通信する場合、トラフィックはインターネットを経由しますか?</p><p>いいえ。パブリックアドレススペースを使用する場合、AWS でホストされているインスタンスとサービス間のすべての通信は AWS のプライベートネットワークを使用します。<br>AWS ネットワークから発信され、AWS ネットワーク上の送信先を持つパケットは、AWS 中国リージョンとの間のトラフィックを除いて、AWS グローバルネットワークにとどまります。</p><p><a href="https://aws.amazon.com/jp/vpc/faqs/">https://aws.amazon.com/jp/vpc/faqs/</a>　より引用</p></blockquote><p>ちなみにこちらのツイートきっかけで知りました。ありがとうございます！</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">これがプライベートネットワークの通信と明示された意味は大きい<br><br>『Q:2つのインスタンスがパブリック IP アドレスを使用して通信する場合、またはインスタンスが AWS のサービスのパブリックエンドポイントと通信する場合、トラフィックはインターネットを経由しますか?』<a href="https://t.co/uy26KyCZKn">https://t.co/uy26KyCZKn</a></p>&mdash; Takuro SASAKI (@dkfj) <a href="https://twitter.com/dkfj/status/1385182566160891909?ref_src=twsrc%5Etfw">April 22, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h1 id="VPC-Endpointとは"><a href="#VPC-Endpointとは" class="headerlink" title="VPC Endpointとは"></a>VPC Endpointとは</h1><p>こちらもAWSの公式サイトから抜粋</p><blockquote><p>PrivateLink を使用してサポートされている AWS のサービスや VPC エンドポイントサービスに VPC をプライベートに接続できます。<br>インターネットゲートウェイ、NAT デバイス、VPN 接続、または AWS Direct Connect 接続は必要ありません。<br>VPC のインスタンスは、サービスのリソースと通信するためにパブリック IP アドレスを必要としません。<br>VPC と他のサービス間のトラフィックは、Amazon ネットワークを離れません。詳細については、「AWS PrivateLink および VPC エンドポイント」を参照してください。</p><p><a href="https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/what-is-amazon-vpc.html">https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/what-is-amazon-vpc.html</a>　より引用</p></blockquote><p>多少語弊があるかもしれませんが、一言で言うならばVPC内からVPC外に存在するAWSサービスにインターネットを経由せずに接続できる仕組みです。</p><h1 id="疑問"><a href="#疑問" class="headerlink" title="疑問"></a>疑問</h1><p>以前はセキュリティを考慮しインターネットを経由しないようにするにはVPC Endpointが必須でしたが、今はVPC Endpointを利用しなくともインターネットを経由しない通信が可能です。 </p><p>はたして今でもVPC Endpointを利用するメリットはあるのでしょうか？ケース別に確認してみます。</p><h1 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h1><h2 id="ケース1-NAT-Gatewayが存在せずprivate-subnetからAWSのサービスに接続する場合"><a href="#ケース1-NAT-Gatewayが存在せずprivate-subnetからAWSのサービスに接続する場合" class="headerlink" title="ケース1 NAT Gatewayが存在せずprivate subnetからAWSのサービスに接続する場合"></a>ケース1 NAT Gatewayが存在せずprivate subnetからAWSのサービスに接続する場合</h2><p>この場合は明らかでNAT Gatewayを用意せずともprivate subnetからAWSのサービスに接続するためにVPC Endpointは必要ですね。 (NAT Gatewayが存在しないケースはあまりないと思いますが)</p><h2 id="ケース2-NAT-Gatewayが存在する場合"><a href="#ケース2-NAT-Gatewayが存在する場合" class="headerlink" title="ケース2 NAT Gatewayが存在する場合"></a>ケース2 NAT Gatewayが存在する場合</h2><p>この場合のメリットは何なのでしょうか？すぐにわからなかったのでコストの面で確認してみます。  </p><div class="scroll"><table><thead><tr><th>サービス</th><th>コスト種別</th><th align="right">コスト($/h)</th></tr></thead><tbody><tr><td>NAT Gateway</td><td>NAT Gatewayあたりの料金</td><td align="right">0.062</td></tr><tr><td>NAT Gateway</td><td>処理データ1GBあたりの料金</td><td align="right">0.062</td></tr><tr><td>VPC Endpoint(ゲートウェイ型)</td><td>-</td><td align="right">0.0</td></tr><tr><td>VPC Endpoint(インターフェイス型)</td><td>VPC エンドポイント1つあたりの料金</td><td align="right">0.014</td></tr><tr><td>VPC Endpoint(インターフェイス型)</td><td>処理データ1GBあたりの料金</td><td align="right">0.0035</td></tr></tbody></table></div><p>※Tokyoリージョンにおけるコスト</p><p>コストを明確にしたことで理解できました。NAT Gatewayの処理データと比較するとVPC Endpointの処理データコストの方が桁違いに安いです。 </p><p>VPC Endpoint(ゲートウェイ型)に関しては、なんと無料！</p><p>マルチAZで2つのAZを利用し、1GB,100GB,1TB,10TB/月の通信をする場合の試算をしてみます。</p><div class="scroll"><table><thead><tr><th>サービス</th><th>計算式</th><th align="right">1GBコスト($/month)</th><th align="right">100GBコスト($/month)</th><th align="right">1TBコスト($/month)</th><th align="right">10TBコスト($/month)</th></tr></thead><tbody><tr><td>NAT Gatewayのみ</td><td>0.062 * 24 * 31 * 2 + 0.062 * n</td><td align="right">92.32</td><td align="right">98.46</td><td align="right">154.26</td><td align="right">712.26</td></tr><tr><td>NAT Gateway + VPC Endpoint(インターフェイス型)</td><td>0.062 * 24 * 31 * 2 + 0.014 * 24 * 31 * 2 + 0.0035 * n</td><td align="right">113.09</td><td align="right">113.44</td><td align="right">116.59</td><td align="right">148.09</td></tr><tr><td>NAT Gateway + VPC Endpoint(ゲートウェイ型)</td><td>0.062 * 24 * 31 * 2 + 0 * n</td><td align="right">92.26</td><td align="right">92.26</td><td align="right">92.26</td><td align="right">92.26</td></tr></tbody></table></div><p><img src="/images/20210618a/vpcendpoint.png"></p><p>通信量が少ないとインターフェイス自体の料金が掛かる分、メリットが無いですが通信量が増えれば増えるほどVPC Endpointのありがたみが実感できますね！</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>VPC Endpointを利用せずともAWSサービスとのインターネットを経由しない通信は可能です。 </p><p>VPC Endpoint(ゲートウェイ型)については導入の手間を考慮しなければコストは掛からないのでデータ量によらず導入した方がお得です。</p><p>少量の通信であればVPC Endpoint(インターフェイス型)を利用してもコスト面においてメリットはありません(むしろ割高)が通信量が多いシステムであればあるほどコストメリットを感じられます。  </p><p>万能なアーキテクチャは存在しないのでデータ量に応じてVPC Endpointの導入を検討すると良いかと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG村瀬です。&lt;/p&gt;
&lt;p&gt;タイトルの通りですがAWS内の通信においてインターネットを経由しないことが最近に</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>ES2021／ES2022を知ろう</title>
    <link href="https://future-architect.github.io/articles/20210617a/"/>
    <id>https://future-architect.github.io/articles/20210617a/</id>
    <published>2021-06-16T15:00:00.000Z</published>
    <updated>2021-06-21T08:37:50.025Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、2017年入社の柏木です。この記事は<a href="/articles/20210614a/">フロントエンド連載</a>の4記事目です。</p><p>少し前にES2021にて変更される新機能が発表されました。</p><p>JavaScriptを扱う上では知っとくべき！と意気込んだもののECMAScriptが何者なのかすら曖昧な理解だったので、この機会に学んだことをまとめてみようと思います。</p><h1 id="この記事のゴール"><a href="#この記事のゴール" class="headerlink" title="この記事のゴール"></a>この記事のゴール</h1><ul><li>ECMAScriptがJavaScriptにとってどのような役割を持つのかを知る</li><li>ここ最近のECMAScriptの動向を知る</li></ul><h1 id="記事の想定読者"><a href="#記事の想定読者" class="headerlink" title="記事の想定読者"></a>記事の想定読者</h1><ul><li>JavaScriptは触ったことがあるけど、記法のことは詳しく知らない人</li></ul><h1 id="ES2021-ES2022とは"><a href="#ES2021-ES2022とは" class="headerlink" title="ES2021/ES2022とは"></a>ES2021/ES2022とは</h1><img src="/images/20210617a/eyecatch.png" alt="" width="1200" height="726" loading="lazy"><p>ESは <strong>ECMAScript</strong>（エクマスクリプト）の略称で、JavaScriptの標準規格のことです。2021や2022というのはその規格がリリースされる年度のことで、たとえばES2021は今年リリース、ES2022は来年にリリース予定の規格ということになります。</p><p>公開年にあわせた表記（例:ES2021）とEdition表記（例:ES11）がありますが、どちらも同じものを指しています。</p><p>ここでは分かりやすいように年度に合わせた表記とします。</p><h2 id="なぜECMAScriptが必要なのか"><a href="#なぜECMAScriptが必要なのか" class="headerlink" title="なぜECMAScriptが必要なのか"></a>なぜECMAScriptが必要なのか</h2><p>JavaScriptはすでに広く知れ渡っていて枯れた技術と言えそうですが、なぜ今も標準規格（ECMAScript）の改良が必要なのでしょうか。</p><p>その答えはJavaScriptそのものの歴史と深く関連しています。</p><p>JavaScriptはもともと、ネットスケープコミュニケーションズという会社によって開発されました。（Googleから生まれたGo言語のようですね）この会社はウェブブラウザを作っており、JavaScriptも自分たちのウェブブラウザで動くよう設計されたものでした。</p><p>その後マイクロソフトがInternet ExplorerでもJavaScriptを使用できるようにしたことでJavaScriptが急速に普及していきましたが、前述の通りJavaScriptは特定のウェブブラウザに対応するように実装されていたためブラウザごとに言語仕様が異なっていました。</p><p>この状況を打破するため、Ecma Internationalという団体が言語仕様の標準化を行いました。ECMAScriptの誕生です。</p><p>Ecma Internationalとはスイスのジュネーブに設立されたNPO法人団体で、JavaScriptに限らず情報通信システムの分野でさまざまな言語の標準化を行っています。特定のメーカーで使用することを想定した言語を他でも使えるようにしたり、複数のメーカーが同じような仕組みを作るという無駄を防ぐため、1960年の創設から現在に至るまでより良い標準規格を目指して検討、改良が行われています。</p><p>プログラマーが使用する媒体の互換性をそこまで気にせずに開発ができるのも、こういった団体の努力によるおかげなんですね。感謝の一言に尽きます。</p><p>このようにブラウザを気にすることなく、またより快適にJavaScriptを実行することが、ECMAScriptの記法に則る目的です。</p><h2 id="NOTE-ECMAScriptはブラウザ用のJavaScriptの規格である"><a href="#NOTE-ECMAScriptはブラウザ用のJavaScriptの規格である" class="headerlink" title="NOTE: ECMAScriptはブラウザ用のJavaScriptの規格である"></a>NOTE: ECMAScriptはブラウザ用のJavaScriptの規格である</h2><p>ここでJavaScriptを実行する環境を「ブラウザ」と限定しているのは、前述の通りJavaScriptはブラウザのための言語として作られているためです。</p><p>JavaScriptが広まった当時、ブラウザ以外の環境でもJavaScriptを動かそうという動きが生まれましたが、そのような整備がなされていませんでした。</p><p>そこで生まれたのがCommonJSです。サーバーサイドJavaScriptとして知られるNode.jsもCommonJSの仕様に則っています。</p><p>ECMAScript/CommonJSのほかにもJavaScriptのモジュール化のしくみはあって、それぞれ動いているようですが、現時点で統一されるという話は特にないようです。</p><p>Node.jsがECMAScriptの新しい記法をどこまでサポートしているかは、こちらのサイト(<a href="https://node.green/#ES2022">node.green</a>)で確認することができます。</p><p>Node.jsとECMAScriptの関係については、こちらに丁寧な説明がありましたのでぜひご覧ください。<br>→<a href="https://zenn.dev/naoki_mochizuki/articles/46928ccb420ee733f78f">JavaScriptが辿った変遷</a></p><h1 id="ここ最近のECMAScriptの変遷"><a href="#ここ最近のECMAScriptの変遷" class="headerlink" title="ここ最近のECMAScriptの変遷"></a>ここ最近のECMAScriptの変遷</h1><h2 id="ECMAScriptの策定プロセス"><a href="#ECMAScriptの策定プロセス" class="headerlink" title="ECMAScriptの策定プロセス"></a>ECMAScriptの策定プロセス</h2><p>JavaScriptをいろんなブラウザで便利に使えるようにしましょう、という目的で様々な新記法が登場しているECMAScriptですが、仕様の変更はどのように決められているのでしょうか。</p><p>ES2015までは、変更しようとしている全ての仕様について合意が取れるまでコミュニティ内で議論が行われていました。</p><p>しかしそれにより、ES4のリリースの際、多くの変更を入れようとしてコミュニティ内で議論が別れてしまい、最終的に合意が取れず提案破棄となってしまいました。</p><p>この時に数年のリソースが無駄になってしまった反省から、ES2015以降では安定したリリースを目指して提案の策定プロセスが変更されました。</p><p>個別の変更内容が<a href="https://tc39.es/process-document/">5段階のStage</a>に分けられ、リリース時期（毎年6月ごろ）までにStage4まで進んでいるものが、次期のECMAScriptのリリース対象となります。</p><div class="scroll"><table><thead><tr><th>Stage</th><th>Name</th><th>説明</th></tr></thead><tbody><tr><td>0</td><td>Strawperson</td><td>アイディアレベルのもの。</td></tr><tr><td>1</td><td>Proposal</td><td>変更内容の根拠の説明、解決方法の概要、潜在的な変更点の特定を行う。</td></tr><tr><td>2</td><td>Draft</td><td>文法やそれが表す意味を正確に説明する。初期のテストも行う。</td></tr><tr><td>3</td><td>Candidate</td><td>ほぼ仕様書。ここの突破には実装とフィードバックを必要とする。</td></tr><tr><td>4</td><td>Finished</td><td>策定完了の内容。</td></tr></tbody></table></div><h2 id="ES2021-ES2022から読み解くECMAScriptの方針"><a href="#ES2021-ES2022から読み解くECMAScriptの方針" class="headerlink" title="ES2021/ES2022から読み解くECMAScriptの方針"></a>ES2021/ES2022から読み解くECMAScriptの方針</h2><p>策定プロセスを考えると必要度の高い変更から検討・実装が行われリリースに至っているようですね。<br>逆に言えば、ここで取り入れられたそれぞれの変更内容がこれからJavaScriptが目指そうとしている方向を示しているのではないでしょうか！？</p><p><a href="https://github.com/tc39/proposals/blob/master/finished-proposals.md">直近2、3年の新機能</a>からJavaScriptの動向を私なりに解釈してみました。</p><p>以下、ES2021、ES2022の新機能についてざっくりと説明します。コードは主に<a href="https://github.com/tc39/proposals">ECMAScriptの公式Github</a>を参考にさせていただいています。</p><p>また、昨今TypeScriptの人気が根強く、読者の皆様の中にはTypeScriptの実装を行ってらっしゃる方も多いのではないかと思います。</p><p>TypeScriptはJavaScriptのスーパーセットであるという考え方に則っており、ECMAScriptの新しい変更もどんどん使えるようになっているので、TypeScriptで使用可能なバージョンもあわせて記載します。</p><h3 id="ES2021にリリースされた変更点"><a href="#ES2021にリリースされた変更点" class="headerlink" title="ES2021にリリースされた変更点"></a>ES2021にリリースされた変更点</h3><p>ES2021でリリースされた変更点は下記のとおりです。</p><h4 id="String-prototype-replaceAll"><a href="#String-prototype-replaceAll" class="headerlink" title="String.prototype.replaceAll"></a>String.prototype.replaceAll</h4><ul><li>当てはまるすべての部分に対して文字列置換を行います</li><li>既存の<code>replace()</code>メソッドは置換対象となる最初の1部分に対してのみ有効であるため、全てを置換したい場合は正規表現を用いる必要がありました</li><li>このメソッドであれば正規表現ミスによる置換漏れを防ぐことができますし、やりたいことも一目で分かりやすいです</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;I like programming. I like my job.&quot;</span></span><br><span class="line">str.replaceAll(<span class="string">&quot;like&quot;</span>, <span class="string">&quot;love&quot;</span>) <span class="comment">//   出力結果：&quot;I love programming. I love my job.&quot;</span></span><br></pre></td></tr></table></figure><ul><li>TypeScriptではデフォルトではまだサポートされていませんが、<code>tsconfig.json</code>の設定を下記のように変更することで使えるようになります。（ES2021のその他の変更も使用できるようになります）</li></ul><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;ES2021&quot;</span>],</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any"></a>Promise.any</h4><ul><li>同時に実行されているプロミスのうち、どれか一つでも処理が<code>resolved</code>になった時点でそのプロミスを返却します</li><li>すべてのプロミスが<code>reject</code>となる場合は、<code>AggregateError</code>（1つの処理で複数のエラーを返す必要がある場合の型）が返却されます</li><li>処理が成功したことは知りたいけどどれかを知る必要がない場合はanyを使うと便利そうです。</li><li>TypeScriptではこちらもまだデフォルトではサポートされていません。上記のように<code>tsconfig.json</code>の設定を変更することで利用可能です</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.any([</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(reject, <span class="number">100</span>, <span class="string">&#x27;1st&#x27;</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">200</span>, <span class="string">&#x27;2nd&#x27;</span>))</span><br><span class="line">])</span><br><span class="line">.then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`一番最初に完了した処理: <span class="subst">$&#123;value&#125;</span>`</span>))</span><br><span class="line">.catch (<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出力結果</span></span><br><span class="line"><span class="comment">// 一番最初に完了した処理: 2nd</span></span><br></pre></td></tr></table></figure><h4 id="WeakRefs"><a href="#WeakRefs" class="headerlink" title="WeakRefs"></a>WeakRefs</h4><ul><li>下記を実現可能にします。<ol><li>オブジェクトへの「弱い参照」の作成</li><li>オブジェクトがガーベッジコレクションされた後のユーザー定義のファイナライザー実行</li></ol></li><li>「弱い参照」とは、ガーベッジコレクションの実行を妨げないオブジェクトの参照のことです。</li><li>通常、オブジェクトが生成されるとメモリに保持されますが（「強い参照」）、「弱い参照」の場合はメモリ解放が必要なときはガーベッジコレクションの回収対象になります。</li><li>この二つを上手く使えば、削除されたオブジェクトなどすでに参照されることがないデータのメモリリークを防ぐことができます。</li><li>しかし、ガーベッジコレクションの機能は複雑なので（ガベージコレクションがいつ、どのように発生するかは、使用している JavaScript エンジンの実装に依存するため）、<a href="https://github.com/tc39/proposal-weakrefs#a-note-of-caution">正しく使用するには慎重に検討する必要があり、可能であれば使用は避けた方が良い</a>と公式でも注意書きが残されています。</li><li>TypeScriptの公式ドキュメントには記載がありませんでしたが、<a href="https://github.com/microsoft/TypeScript/issues/32393#issuecomment-754941225">こちらのIssue</a>によるとバージョン4.1以降で利用可能だそうです。<ul><li>試しにPlayGroundで下記コードを実行してみましたが、確かに4.1以降のバージョンでコンパイルできるようになっていました。</li></ul></li></ul><figure class="highlight ts"><figcaption><span>typeScript.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> WeakRef(obj);</span><br><span class="line"><span class="comment">// 出力結果</span></span><br><span class="line"><span class="comment">// v4.0.5</span></span><br><span class="line"><span class="comment">// Cannot find name &#x27;WeakRef&#x27;.</span></span><br><span class="line"><span class="comment">// v4.1.5</span></span><br><span class="line"><span class="comment">// なし</span></span><br></pre></td></tr></table></figure><h4 id="Logical-Assignment-Operators"><a href="#Logical-Assignment-Operators" class="headerlink" title="Logical Assignment Operators"></a>Logical Assignment Operators</h4><ul><li>下記のような書き方ができるようになります</li><li>初期値を入れるときに余計な分岐が不要になり、実装がスッキリします</li><li>TypeScriptでは<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#short-circuiting-assignment-operators">バージョン4.0</a>から利用可能です</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a || (a = b);</span></span><br><span class="line">a ||= b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a &amp;&amp; (a = b);</span></span><br><span class="line">a &amp;&amp;= b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a ?? (a = b);</span></span><br><span class="line">a ??= b;</span><br></pre></td></tr></table></figure><h4 id="Numeric-separators"><a href="#Numeric-separators" class="headerlink" title="Numeric separators"></a>Numeric separators</h4><ul><li><code>_</code> を数値の間に入れることができます。（入れても数値として認識されます）</li><li>10進数だけでなく全ての数値リテラルで可能です。これにより数値が読みやすくなります</li><li>TypeScriptでは<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#numeric-separators">バージョン2.7</a>から利用可能です</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1_000_000_000</span>           <span class="comment">// 10億</span></span><br><span class="line"><span class="number">101_475_938.38</span>          <span class="comment">// 101万、小数点も合わせて使用可能</span></span><br></pre></td></tr></table></figure><h3 id="ES2022にリリース予定の変更点"><a href="#ES2022にリリース予定の変更点" class="headerlink" title="ES2022にリリース予定の変更点"></a>ES2022にリリース予定の変更点</h3><p>現時点でFinished Proposalに追加されている変更点を紹介します。</p><h4 id="Class-Fields"><a href="#Class-Fields" class="headerlink" title="Class Fields"></a>Class Fields</h4><ul><li>これらの変更はTypeScriptでは<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#ecmascript-private-fields">バージョン3.8</a>から利用可能です</li><li>Private instance methods and accessors<ul><li>プライベートメソッドとアクセッサ（getter/setter）が追加されます</li><li>メソッド名の先頭に<code>#</code>をつけることでプライベートメソッドになります</li><li>クラスのStateや振る舞いをプライベートに保つことで、呼び出し側での意図しない変更を防ぐことができます</li></ul></li><li>Class Public Instance Fields &amp; Private Instance Fields<ul><li>プライベートなフィールドを定義できるようになります</li><li>外部からの参照や書き込みが可能なパブリックフィールドとは対照に、フィールドを定義しているクラスのみがそのフィールドにアクセスできるようになっています</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">  <span class="comment">// プライベートフィールド</span></span><br><span class="line">  #foo;</span><br><span class="line">  <span class="function"><span class="title">method</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.#foo)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testObj = <span class="keyword">new</span> X();</span><br><span class="line">testObj.method()</span><br><span class="line"><span class="comment">// 出力結果：undefined</span></span><br><span class="line">testObj.#foo</span><br><span class="line"><span class="comment">// 出力結果：</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Private field &#x27;#foo&#x27; must be declared in an enclosing class</span></span><br></pre></td></tr></table></figure><ul><li>Static class fields and private static methods<ul><li>JavaScriptでも静的メソッドや静的プロパティが定義できるようになります。</li><li>これらは生成したインスタンスではなくクラスから直接呼び出されます。</li><li>異なるクラスで同じ名称の変数やメソッドを定義できるので、グローバル変数のように競合を気にすることなくネーミングできます。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomDate</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">static</span> epoch = <span class="keyword">new</span> CustomDate(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RegExp-Match-Indices"><a href="#RegExp-Match-Indices" class="headerlink" title="RegExp Match Indices"></a>RegExp Match Indices</h4><ul><li>部分文字列の配列に対し、<code>indices</code>プロパティが追加されます</li><li>これまでも文字列抽出の操作で、マッチした文字列の情報を含む配列やマッチした文字列のインデックス情報などを返却していましたが、より高度なシナリオではこれだけでは十分ではないとのこと</li><li>正規表現にマッチしたそれぞれの部分の配列の開始・終了のインデックスのペアを含むインデックス配列を返却します</li><li>パフォーマンス上の理由から、<code>d</code>フラグが設定されている時のみ有効になるそうです</li><li>TypeScriptではこちらの記法はまだサポートされていないようでした</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> re1 = <span class="regexp">/a+(?&lt;Z&gt;z)?/</span>d;</span><br><span class="line"><span class="comment">// indicesは入力文字列の先頭からの相対値を表します</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="string">&quot;xaaaz&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> m1 = re1.exec(s1);</span><br><span class="line">m1.indices[<span class="number">0</span>][<span class="number">0</span>] === <span class="number">1</span>;</span><br><span class="line">m1.indices[<span class="number">0</span>][<span class="number">1</span>] === <span class="number">5</span>;</span><br><span class="line">s1.slice(...m1.indices[<span class="number">0</span>]) === <span class="string">&quot;aaaz&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="Top-level-await"><a href="#Top-level-await" class="headerlink" title="Top-level await"></a>Top-level <code>await</code></h4><ul><li>モジュール単位で非同期関数と見なすことができるようになります</li><li>これまではasync/awaitを定義できるのはあるモジュールの関数単位でした。このままだと、非同期の関数が書かれているモジュールの読み込みが、関数呼び出しが実行されるタイミングより遅かった場合、<code>undefined</code>で返却されてしまいます</li><li>モジュール全体を非同期関数として動作させることによって、関数実行がモジュール読み込みより先に行われることを防ぐことができます</li><li>TypeScriptでは<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#top-level-await">バージョン3.8</a>から利用可能です</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//実行する環境によって依存関係を決定したり</span></span><br><span class="line"><span class="keyword">const</span> strings = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`/i18n/<span class="subst">$&#123;navigator.language&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// モジュールがリソースを表現したりすることができます</span></span><br><span class="line"><span class="keyword">const</span> connection = <span class="keyword">await</span> dbConnector();</span><br></pre></td></tr></table></figure><h3 id="まとめと今後追加される変更点の予想"><a href="#まとめと今後追加される変更点の予想" class="headerlink" title="まとめと今後追加される変更点の予想"></a>まとめと今後追加される変更点の予想</h3><p>ES2021、ES2022の変更内容を改めて振り返ると、以下の特徴があるように感じました：</p><ol><li><strong>他の言語の仕様を取り入れている</strong><ul><li>他の言語ではよく見るPrivateの概念が標準規格として導入されたり、Rubyにインスパイアされたオペレータの記法が取り入れられたりしていることから、他の言語でできることはどんどんJavaScriptでもできるようにしようという流れがあると感じました</li><li>これにより、特に他言語の経験があってJavaScriptを初めて触るという人にとって、とっつきにくさが軽減するのではないかと考えられます</li></ul></li><li><strong>より一目でわかりやすい表記が実現されている</strong><ul><li>数値セパレータの導入やreplaceAll()の導入など、「なくても同じことはできるがあるとより初見で分かりやすい機能」が多く取り入れられていると感じます</li><li>初見でわかりやすいということは開発をする上でのストレス軽減に繋がるので、JavaScriptのファン増加にいい影響をもたらしそうです</li></ul></li></ol><p>ES2022のリリースに向けて、いまもいくつかの機能がStage 3の査定へと進んでいます。</p><p>上記のような所感を踏まえ、今後ES2022のリリースまでにStage 4へと進みそうな新機能を<a href="https://github.com/tc39/proposals#stage-3">現在検討中のActive proposals（Stage 3）</a>の中から <del>勝手に</del> 私なりにピックアップしてみました！<br>来年のリリースを楽しみにウォッチしようと思います。</p><h4 id="at"><a href="#at" class="headerlink" title=".at()"></a>.at()</h4><ul><li>配列の「負の添字」を可能にするという提案です。arr.at(-1)と実装したときに、負の数が最後の要素から逆にカウントされるようにします</li><li>これまでに多くの開発者から切望されていたとのこと。Pythonでもできるそうなので、こういったシンプルかつ使いやすい機能は必要度も高いのではないでしょうか</li></ul><h4 id="Accessible-Object-prototype-hasOwnProperty"><a href="#Accessible-Object-prototype-hasOwnProperty" class="headerlink" title="Accessible Object.prototype.hasOwnProperty()"></a>Accessible Object.prototype.hasOwnProperty()</h4><ul><li>Objectの<code>Object.prototype.hasOwnProperty</code>をより使いやすくするという提案です。下記のように実装できます</li><li>prototypeを駆使して実装するのは敷居が高かったので、Objectの組み込みメソッドとして用いることができるのは個人的にはアツいと感じました</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwn(object, <span class="string">&quot;foo&quot;</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;has property foo&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他にも社内では、数年前からプロポーザルに上がっているTemporalという日時を扱える新しい機能がいよいよStage 3に進んでおり盛り上がっていました。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>ES2021とJavaScriptの発展は深い関連があることが分かり、技術も資本主義社会の中で発展しているんだということを実感しました。</p><p>JavaScriptのようにすでに広く使用されている言語でも絶えず標準規格のアップデートが続けられていることに驚きましたが、「これまでの苦労を後の世代の人が二度と味わわないように」といった先人のパッションがあるからこそなんだろうなと思いました。</p><p>それぞれの特徴を活かした開発や技術選定を行うためには、日々新しくなる技術がどういう思想でアップデートされているのか想像することも必要だと感じました。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://auth0.com/blog/javascript-whats-new-es2020/">JavaScript: What’s New in ECMAScript 2020 (auth0)</a></li><li><a href="https://qiita.com/ryoya41/items/a80efb6fbb9edc4861d4">ES2020の仕様には、こんなのが追加されました！</a></li><li><a href="https://jsprimer.net/basic/ecmascript/">ECMAScript (JavaScript Primer)</a></li><li><a href="https://azu.github.io/slide-what-is-ecmascript/slide/11.html">ECMAScriptとは何か？ -5段階のStage</a></li><li><a href="https://tc39.es/ecma262/">ECMAScript® 2022 Language Specification</a></li><li><a href="https://deliciousinsights.github.io/confoo-es2022/#/mainTitle">So, what’s new in ES2022?</a></li><li><a href="https://tc39.es/ecma262/multipage/">ECMAScript® 2022 Language Specification</a></li><li><a href="https://backbencher.dev/javascript/es2021-new-features">ES2021 / ES12 New Features</a></li><li><a href="https://dev.to/brayanarrieta/new-javascript-features-ecmascript-2021-with-examples-3hfm">New JavaScript Features ECMAScript 2021 (with examples)</a></li><li><a href="https://deliciousinsights.github.io/confoo-es2022/#/es2020-dynamic-import">Slide Share</a></li><li><a href="https://zenn.dev/akfm/articles/003ebe7f74d96a">Ecmascript proposal report 2021春</a></li><li><a href="https://ichi.pro/ecmascript-2021-ni-tojosuru-4-tsu-no-atarashii-ekisaithinguna-kino-122742758488475">ECMAScript2021に登場する4つの新しいエキサイティングな機能</a></li><li><a href="https://codeburst.io/exciting-features-of-javascript-es2021-es12-1de8adf6550b">JavaScript ES2021 Exciting Features</a></li><li><a href="https://2020.stateofjs.com/en-US/technologies/javascript-flavors/">JavaScript Flavors</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは、2017年入社の柏木です。この記事は&lt;a href=&quot;/articles/20210614a/&quot;&gt;フロントエンド連載&lt;/a&gt;の4記事目です。&lt;/p&gt;
&lt;p&gt;少し前にES2021にて変更される新機能が発表されました。&lt;/p&gt;
&lt;p&gt;JavaScriptを扱う上では</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Vue CLIのデフォルト設定からESLintのベストプラクティスを検討する</title>
    <link href="https://future-architect.github.io/articles/20210616a/"/>
    <id>https://future-architect.github.io/articles/20210616a/</id>
    <published>2021-06-15T15:00:00.000Z</published>
    <updated>2021-06-18T03:04:45.689Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>この記事は<a href="/articles/20210614a/">フロントエンド連載</a>の3記事目です。</p><p>今回は愛用しているVue CLIを利用して、フロントエンドアプリケーションの詳細な設定について調査してみました。</p><img src="/images/20210616a/image.png" alt="Vue.jsアイコン" width="400" height="400" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>プログラムを実装する上で、コードの書き方は絶対的な正解のないトピックとして存在します。</p><p>例えば、コードのインデントはタブなのか、半角スペースなのか、文字列リテラルを囲う記号は””なのか’’なのか、といった細かいルールです。これらのルールは、究極的には好みの問題で、正解のあるものではありません。</p><p>正解がない以上、コードを実装する際にどのようなフォーマットが正しいかを判断することは難しいです。言語によってはコード規約をプロジェクト、チーム、または会社単位で明記、時には社外に公開する事でこれらルールの混乱を防ぐ試みも存在します。</p><p>ちなみにフューチャーでは<a href="https://future-architect.github.io/coding-standards/">JavaとSQLのコード規約</a>を公開しています。</p><p>しかし、コード規約を明示しても、その全てを把握してルールを守ってコードを書くこと、ルールが守られている事を人が判断することは難しいです。そこで、Linterを採用することでコードの一貫性を自動で維持することが可能になります。</p><p>(上記のJavaコード規約の著者である<a href="https://github.com/ota-meshi">Otaさん</a>は奇しくも<a href="https://github.com/vuejs/eslint-plugin-vue">eslint-plugin-vue</a>のメインコミッターです、凄い。</p><p>憧れのあの人と一緒に働いてみたい、そんな転職の応募はいつでもお待ちしていますよ…!)</p><h1 id="Linterとは"><a href="#Linterとは" class="headerlink" title="Linterとは"></a>Linterとは</h1><p>Linterとは、ソースコードを静的解析し、問題点を指摘、または自動でフォーマットするツールのことです。各種言語、プラットフォームで公式、ないしサードパーティー製のLinterが存在します。</p><p>開発を行う上で、敢えてLinterを利用しない選択をする事は少ないのではないでしょうか。</p><p>Vue.js、Reactなど、node.jsを用いたアプリケーションの開発では、<a href="https://eslint.org/">ESLint</a>が利用できます。</p><h1 id="Linterの設定"><a href="#Linterの設定" class="headerlink" title="Linterの設定"></a>Linterの設定</h1><p>Linterを導入すると、ルールに違反しているコードを検知することが可能になります。</p><p>前述の通り、プログラムの書き方には絶対的な正解を決めることのできないルールが存在する為、設定をカスタマイズする事が可能になっています。ちなみにGoの場合は<a href="https://golang.org/cmd/gofmt/">gofmt</a>がデフォルトで利用できる機能として存在します、設定が存在しないシンプルなツールであるため迷う事はありません。</p><p>より細かく、厳しく規約を設定したい場合は<a href="https://staticcheck.io/">staticcheck</a>などを導入する事も可能ですが、言語仕様レベルで素朴でシンプルである事を目指すカルチャーがある故の特徴ですね、個人的には好きです。</p><p>絶対的な良し悪しとして比較はできませんが、ESLintは基本的な仕組みとしては別途インストールして、設定ファイルを用意する必要があります。</p><p>それら設定の煩雑さを解消するために、ESLintはフレームワークやツールの初期設定でビルトインする事が可能だったり、デフォルト設定がインストール可能なnpmモジュールとして公開されていたりします。</p><p>本記事ではVue.jsのアプリケーションを高速で開発できる<a href="https://cli.vuejs.org/">Vue CLI</a>が生成するデフォルト状態を比較する事で、詳細なLinterの設定がどのように行われているのかを比較検証してみます。</p><h1 id="Vue-CLIとは"><a href="#Vue-CLIとは" class="headerlink" title="Vue CLIとは"></a>Vue CLIとは</h1><p>連載初日の記事<a href="https://future-architect.github.io/articles/20210614b/">Jest + TypeScript + Vue 3環境で Vue Testing Library(@testing-library／vue) を動かす</a>でも紹介がありましたね。</p><p><a href="https://cli.vuejs.org/">Vue CLI</a>とは<code>Vue.js</code>のアプリケーションを開発するためのツールです。インストールすることで、アプリケーションの骨組みを自動生成したり、プラグインを追加、削除できるようになります。</p><p>このツールを利用することで、<code>Vue CLI</code>のインストールからアプリケーションの生成、起動までを僅かなコマンドを入力するだけで行えます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>最近バンドルに依存しない軽量なビルドツールとして<a href="https://vitejs.dev/guide/">Vite</a>が台頭するなど動きがありましたが、私はまだまだVue CLIを愛用しています。</p><h1 id="Vue-CLIのアプリケーション生成結果を、Linterの設定別に比較してみた"><a href="#Vue-CLIのアプリケーション生成結果を、Linterの設定別に比較してみた" class="headerlink" title="Vue CLIのアプリケーション生成結果を、Linterの設定別に比較してみた"></a>Vue CLIのアプリケーション生成結果を、Linterの設定別に比較してみた</h1><p>前置きが長くなりましたが、Vue CLIでアプリケーションを自動生成する際に、詳細な設定を対話的に選択する事が可能です。</p><p>下記画像は<code>vue create &#123;app-name&#125;</code>コマンドを実行した際に表示される選択肢です。</p><img src="/images/20210616a/image_2.png" alt="vue create {app-name}コマンドを実行した際に表示される選択肢" width="588" height="523" loading="lazy"><p>その際、Vue.jsのバージョンの他、Linter/Formatterの有無等の詳細な設定を選択する事が可能です。</p><p>今回は、TypeScriptを利用した状態で、Linter/Formatterを利用しない設定と、利用した状態の差分を比較する事で、Linterを有効にするにあたって必要な、また推奨される設定、準備を確認します。</p><img src="/images/20210616a/image_3.png" alt="Linter設定" width="642" height="529" loading="lazy"><h2 id="ESLint-with-errpr-prevention-only"><a href="#ESLint-with-errpr-prevention-only" class="headerlink" title="ESLint with errpr prevention only"></a>ESLint with errpr prevention only</h2><img src="/images/20210616a/image_4.png" alt="VueCLIではESLint設定" width="1200" height="506" loading="lazy"><p>VueCLIではESLintを最低限有効に設定した状態を設定できます。</p><p>速度優先でラフに書きたい時や、ここから詳細に好みの設定を作っていきたい時は有効です。</p><p>Linter/Formatter無しの状態とpackage.jsonを比較してみます。</p><img src="/images/20210616a/image_5.png" alt="package.jsonの比較" width="709" height="844" loading="lazy"><p><code>scripts</code>の設定にに<code>lint</code>コマンドが追加されています。</p><p>これにより<code>npm run lint</code>コマンドでLinterの指摘事項を確認する事ができます。<br><code>npm run lint --fix</code>コマンドで、ある程度自動フォーマットすることも可能です。</p><p>またeslintの各種プラグインがインストールされています。</p><p>生成したフロントエンドのプロジェクト直下に<code>.eslintrc.js</code>が追記されます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;extends&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/typescript/recommended&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: <span class="number">2020</span></span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このファイルによって、ESLintの設定が記述されています。</p><h2 id="ESLint-Prettier"><a href="#ESLint-Prettier" class="headerlink" title="ESLint + Prettier"></a>ESLint + Prettier</h2><img src="/images/20210616a/image_6.png" alt="" width="" height="" loading="lazy"><p>ESLintに加え、<a href="https://prettier.io/">Prettier</a>も有効にした状態を確認してみます。</p><p><a href="https://prettier.io/">Prettier</a>とは、HTMLやVue.js等各種ファイル、フレームワークの記法に対応したフォーマットルールが適用可能なプラグインです。</p><p>ESLintは、Prettierと比較するとJavascriptの言語としてのコーディングのみにフォーカスしたLinterであると言えます。  Prettierも有効にすることで、HTMLテンプレート部分のコードなどもフォーマット可能になります。</p><p>このオプションを有効にすると、package.jsonにPrettierも追加されている事が確認できます。</p><img src="/images/20210616a/image_7.png" alt="" width="" height="" loading="lazy"><p><code>.eslintrc.js</code>にもPrettier向けの設定が追記されています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">extends</span>: [</span><br><span class="line">    <span class="string">&quot;plugin:vue/essential&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@vue/typescript/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@vue/prettier&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@vue/prettier/@typescript-eslint&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: <span class="number">2020</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">&quot;no-console&quot;</span>: process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;warn&quot;</span> : <span class="string">&quot;off&quot;</span>,</span><br><span class="line">    <span class="string">&quot;no-debugger&quot;</span>: process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;warn&quot;</span> : <span class="string">&quot;off&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>このオプションを有効にすると、Vue.jsのHTMLテンプレート部分も成形されている事が確認できます。</p><img src="/images/20210616a/image_8.png" alt="Vue.jsのHTMLテンプレート生成" width="1200" height="399" loading="lazy"><p>デフォルトの設定では1行に収めることができる文字数が80文字であるため、個人的には若干過剰に改行される傾向があるなと感じます。</p><h2 id="ESLint-Airbnb-config"><a href="#ESLint-Airbnb-config" class="headerlink" title="ESLint + Airbnb config"></a>ESLint + Airbnb config</h2><img src="/images/20210616a/image_9.png" alt="Airbnb Config" width="1200" height="399" loading="lazy"><p>Airbnb Configも見てみます、バケーションレンタルで有名なあの<a href="https://www.airbnb.jp/">Airbnb</a>ですね。</p><p>Airbnbは<a href="https://github.com/airbnb/javascript">Javascriptのコーディング規約</a>もホストしています。</p><p>Airbnbのテック企業としての立ち位置について私は詳しくないのですが、メインコミッターの一人である<a href="https://github.com/ljharb">Jordan Harband氏</a>はTwitter社にも在籍経験があり、<a href="https://tc39.es/">ECMAScriptへのコントリビュート</a>において、<a href="https://ja.wikipedia.org/wiki/ECMAScript">ECMAScriptのwikipedia</a>に名を残す程の実力者のようです。</p><p><a href="https://github.com/readme/jordan-harband">The ReadME Project</a>のインタビューでも存在を確認でき、結婚式や子供が生まれた日にすらOSSコントリビュートを行ったという超人的な活躍ぶりが書かれています、輝いていますね。</p><p>そんなAirbnbスタイルがVue CLIの公式オプションとして選択できるようになっているわけですが、ひとまず<code>package.json</code>の差分を見てみましょう。</p><img src="/images/20210616a/image_10.png" alt="" width="" height="" loading="lazy"><p><code>eslint-config-airbnb</code>がインポートされています。</p><p><code>.eslintrc.js</code>は下記の内容です。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/airbnb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/typescript/recommended&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: <span class="number">2020</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Airbnb configでは、上記の差分に加え、<code>.editorconfig</code>というファイルが生成されます。<br>他の方法でも設定可能なオプション項目も含まれていますが、ここでインデントのスタイルや一行の長さの限界などが設定できます。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[*.&#123;js,jsx,ts,tsx,vue&#125;]</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">end_of_line</span> = lf</span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">max_line_length</span> = <span class="number">100</span></span><br></pre></td></tr></table></figure><p>このオプションではPrettierがインストールされないため、Vue.jsコンポーネントのHTML部分のインデントを崩したりしてもフォーマットされませんでした。</p><p>eslintそのもののオプションは<code>eslint:recommended</code>と比較すると厳しめです。</p><h1 id="既存のプロジェクトにESLint、Prettierを追加する"><a href="#既存のプロジェクトにESLint、Prettierを追加する" class="headerlink" title="既存のプロジェクトにESLint、Prettierを追加する"></a>既存のプロジェクトにESLint、Prettierを追加する</h1><p>上記の設定変更で確認できた差分は、Vue CLIでアプリケーションを作り直さなくても追加可能です。<br>またESLint、PrettierはVue.js以外のフレームワークを利用したプロジェクトでも利用可能です。</p><p><code>Vue CLI</code>で作成したアプリケーションの場合は<code>vue add</code>コマンドを利用できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add @vue/cli-plugin-eslint</span><br></pre></td></tr></table></figure><p><code>package.json</code>へのlintコマンドの追加など、詳細な変更漏れが無いよう気を付ける必要がありますが、各パッケージを個別にインストールし、手動で<code>.eslintrc.js</code>等を追加することで同様の状態を再現できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;app-name&#125;</span><br><span class="line">npm install eslint</span><br><span class="line">npm install eslint-plugin-vue</span><br><span class="line">npm install @vue/cli-plugin-eslint</span><br><span class="line">npm install @vue/eslint-config-typescript</span><br><span class="line">npm install @typescript-eslint/parser</span><br><span class="line">npm install @typescript-eslint/eslint-plugin</span><br></pre></td></tr></table></figure><p>ちなみにESLintとPrettierを組み合わせる手法は、2020年に<a href="https://prettier.io/docs/en/integrating-with-linters.html">公式での推奨方法</a>に変更がありました。<br>古くなってしまった情報が検索結果に出てくる可能性がありますのでお気を付けください。<br>具体的には<a href="https://github.com/prettier/eslint-plugin-prettier">eslint-plugin-prettier</a>が非推奨となっています。</p><h1 id="個人的なお勧め"><a href="#個人的なお勧め" class="headerlink" title="個人的なお勧め"></a>個人的なお勧め</h1><p>HTML、CSSの細かいインデント修正等はツールが行ってくれるに越したことはないので、<code>ESLint + Prettier</code>を軸に、<code>.editorconfig</code>を適宜追加して好みの状態に持っていくのが良いかなと個人的には考えています。</p><p><code>.editorconfig</code>ではなく<code>.prettierrc</code>を設置する事でもPrettierの設定は可能です。</p><p><code>.prettierrc</code>で設定できる項目とデフォルト値は下記の通りです。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;useTabs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;quoteProps&quot;</span>: <span class="string">&quot;as-needed&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jsxSingleQuote&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bracketSpacing&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;jsxBracketSameLine&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;rangeStart&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;rangeEnd&quot;</span>: Infinity,</span><br><span class="line">  <span class="attr">&quot;parser&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;filepath&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;requirePragma&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;insertPragma&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;proseWrap&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;htmlWhitespaceSensitivity&quot;</span>: <span class="string">&quot;css&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vueIndentScriptAndStyle&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;endOfLine&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;embeddedLanguageFormatting&quot;</span>: <span class="string">&quot;auto&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前述しましたが、個人的には<code>printWidth</code>(1行に書くことができる文字数)は150文字くらいあっても良いかなと感じます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>JavaScript、TypeScriptはESLintでフォーマットできる。HTML、CSSはPrettierでフォーマットできる。</p><p>Vue CLIであれば適宜推奨設定をインストールしつつアプリケーションを構築できる。</p><p>手動で行う場合は各種ライブラリをnpm installし、<code>.eslintrc.js</code>等設定ファイルを設置することでLinterを設定できる。</p><p>この手の作業はアプリケーションがある程度出来上がってから行うと、自動修正できない大量の警告に苦しむ可能性があります。</p><p>構築の初期段階にしっかり行っておきたいですね。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a href=&quot;/articles/20210614a/&quot;&gt;フロントエンド連載&lt;/a&gt;の3記事目です。&lt;/p&gt;
&lt;p&gt;今回は愛用しているVue CLIを利用して、フロントエンドアプリケーションの詳細な設定について調査してみま</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
    <category term="Node.js" scheme="https://future-architect.github.io/tags/Node-js/"/>
    
    <category term="ESLint" scheme="https://future-architect.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>「リアクティブコントローラ」導入がもたらすかもしれないウェブフロントエンド設計の変化</title>
    <link href="https://future-architect.github.io/articles/20210615a/"/>
    <id>https://future-architect.github.io/articles/20210615a/</id>
    <published>2021-06-14T15:00:00.000Z</published>
    <updated>2021-06-15T03:31:09.012Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210614a/">フロントエンド連載</a>2日目のエントリーです。</p><p>あまり話題になっていないような気がしますが、Web Componentsを実装するためのフレームワークのLit-Element v3がバージョンアップして、ついでにリブランディングしてLit v2.0となりました。ロゴも変わり、<a href="https://lit.dev/">ウェブサイトも新しく</a>なりました。</p><img src="/images/20210615a/スクリーンショット_2021-06-12_9.19.45.png" alt="Lit-Elementトップページ" width="1200" height="801"><ul><li><a href="https://zenn.dev/takanorip/articles/640f9fe9c6c8ca">Introducing “Lit” for Web Components</a></li></ul><p>本当はこのLitの紹介をこの連載でしようとしたのですが、上記のウェブサイトがすごく詳しいので、単に紹介するだけの記事だとあまり価値がないので、この中のコントローラ機能のみをとりあげようと思いますが、まずはWeb Componentsとは、というところを説明します。</p><h1 id="n回目のWeb-Components元年"><a href="#n回目のWeb-Components元年" class="headerlink" title="n回目のWeb Components元年"></a>n回目のWeb Components元年</h1><p>以前次のような記事を書きました。最初のPolymerというフレームワークが推進していたころよりも、ブラウザ対応も進み、ReactやVueといった人気のフレームワークとも気軽に組み合わせられるようになり、使えるところがぐん、と増えました。</p><ul><li><a href="https://qiita.com/shibukawa/items/5a36147ec103d35c1b5e">2019年はWebComponents元年(2回目)！WebComponentsをReact/Angular/Vueと一緒に使う</a></li></ul><p>jxckさんの発表で、3回目の元年な話もあります。主にWebPackingなどのAPIの進化がこれからWeb Componentsの普及に一役買うのでは、という内容のようです。</p><ul><li><a href="https://speakerdeck.com/jxck/web-components-first-year-v3">Web Components 元年 v3 / Web Components first year v3</a></li></ul><p><a href="https://headlessui.dev/">Headless UI</a>がもしWeb Components版を出してくれたら、世のWeb/CSSデザイナーの人たちのポートフォリオに載せやすいものとなって作ろう、という人は増えるのでは？という気はするのですが、それがなかったとしても、2021年は本当の元年になってくれそうな気がすごいしています。</p><p>Web Componentsが普及したあかつきには、多種多様なコンポーネント集が手に入り、ReactでもVueでもSvelteでもなんでもフロントエンド開発のときに各フロントエンド専用のUI部品集だけでなく「Web Components製の部品も利用の選択肢に入る」状態になると思います。そのためにはWeb Componentsで作られた部品集がたくさん世の中に作られることが大事だと思っていましたが、リニューアルされたLitのウェブサイトのフッター付近にたくさん部品集のリンクがあります。</p><ul><li><a href="https://opensource.adobe.com/spectrum-web-components/">Adobe: Spectrum Web Components</a></li><li><a href="https://auro.alaskaair.com/philosophy">Alaska Airlines: Auro Design System</a></li><li><a href="https://github.com/momentum-design/momentum-ui/tree/master/web-components">Cisco Systems: Momentum UI</a></li><li><a href="https://github.com/home-assistant/frontend">Home Assistant: Frontend UI</a></li><li><a href="https://github.com/carbon-design-system/carbon-web-components">IBM: Carbon Web Components</a></li><li><a href="https://lion-web.netlify.app/">ING Bank: Lion Web Components</a></li><li><a href="https://github.com/pwa-builder/pwa-starter">Microsoft: PWA Starter</a></li><li><a href="https://github.com/1-Platform">Red Hat: One Platform Components</a></li><li><a href="https://github.com/SAP/ui5-webcomponents/blob/master/docs/dev/Developing%20Web%20Components.md">SAP: UI5 Web Components</a></li><li><a href="https://shoelace.style/">Shoelace Components</a></li><li><a href="https://vaadin.com/docs/latest/fusion/overview">Vaadin Ltd: Fusion Framework</a></li><li><a href="https://clarity.design/storybook/core/">VMWare: Clarity Core</a></li><li><a href="https://github.com/rough-stuff/wired-elements">Wired Elements</a></li></ul><p>注目はアラスカエアラインのフライト情報コンポーネントですね。こういうのがWeb Componentsっぽい。このサイトの、コンポーネントの背景を斜めストライプにすることでコンポーネントのビジュアルと背景の区別がつきやすくなっているの、めちゃ良いですね。Storybookとかでコンポーネント集作る人はみんなやっても良さそう。</p><img src="/images/20210615a/スクリーンショット_2021-06-12_12.39.29.png" alt="アラスカエアラインのコンポーネント一覧" width="1200" height="801"><p>それらのコンポーネント集以上の起爆剤となりそうと思っているのが、Google I/O 2021で発表されたAndroidの新UIコンセプトのMaterial Youです。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">✨ Announcing Material You, a transformation in design at Google ✨<br> <br>Be a co-creator of your digital experiences. Coming first to Pixel with <a href="https://twitter.com/hashtag/Android12?src=hash&amp;ref_src=twsrc%5Etfw">#Android12</a><br> <br>Learn more about the <a href="https://twitter.com/hashtag/MaterialDesign?src=hash&amp;ref_src=twsrc%5Etfw">#MaterialDesign</a> vision 👉<a href="https://t.co/Otb86qTQRR">https://t.co/Otb86qTQRR</a> <a href="https://t.co/04ARxOTbVa">pic.twitter.com/04ARxOTbVa</a></p>&mdash; Material Design (@materialdesign) <a href="https://twitter.com/materialdesign/status/1394718542562430977?ref_src=twsrc%5Etfw">May 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>Material Designが発表されたときも、モバイルからウェブまで全部をカバーするUIコンセプトということで、CSSも提供され、<a href="https://getmdl.io/">material-design-lite</a>というライブラリが出たり、それらを元にしたBootstrapのテーマが出たりしつつ、React向けには<a href="https://material-ui.com/">Material UI</a>、Vue.jsには<a href="https://vuetifyjs.com/en/">Vuetify</a>、Angularでは<a href="https://material.angular.io/">Angular Material</a>がそれぞれ開発されています。ですが、「とりあえずこれ使っておこう」となるまでには年単位の時間がかかっていました。</p><p>一方で、細々と<a href="https://github.com/material-components/material-components-web-components">Material DesignのUI部品のLit Element実装も行われている</a>な、と思っていたら、Material Design本家のチュートリアルもいつのまにか<a href="https://material.io/develop/web/getting-started">Web Components前提</a>となっていますし、なにより、Material YouはLitで実装する==Web Componentsになるよ、と中の人からレスポンスが！！</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Material You for web will be <a href="https://twitter.com/hashtag/builtWithLit?src=hash&amp;ref_src=twsrc%5Etfw">#builtWithLit</a></p>&mdash; Elliott (@techytacos) <a href="https://twitter.com/techytacos/status/1395564894456406016?ref_src=twsrc%5Etfw">May 21, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>Material UIやVuetifyやAngular MaterialがMaterial Youに対応するか、別のそういうバージョンが実装されるよりも、Web Components版を使った方が圧倒的に早い、ということになりそうです。やったね！！</p><h1 id="Litの新機能のリアクティブコントローラとは何者か"><a href="#Litの新機能のリアクティブコントローラとは何者か" class="headerlink" title="Litの新機能のリアクティブコントローラとは何者か"></a>Litの新機能のリアクティブコントローラとは何者か</h1><p>Lit Elementからの変化は<a href="https://zenn.dev/takanorip/articles/640f9fe9c6c8ca">こちら</a>をみていただくのが確実ですが軽くリストアップします。</p><ul><li>ビルド結果のサイズはより小さく(minify時で30%)、より高速に(初期表示が5-20%、更新が7-15%)</li><li>リアクティブコントローラというコンセプトが入った</li><li>experimental: Reactコンポーネントを作るアダプターが導入</li><li>experimental: サーバーサイドレンダリングができるようになる</li></ul><p>ここでとりあげるのはコントローラです。ライフサイクルイベントのハンドラーをどこにどう実装するのか、というのはいろいろ試行錯誤があり、クラスのメソッドだったり、Hooksが導入されたり、といろいろ変わってきました。Hooksもライフサイクルイベントのハンドラーの再利用がしやすくなる仕組みでしたが、コントローラはこのハンドラーのセットをオブジェクトして切り出しておける機能となります。Javaとかのオブジェクト指向をやっていた人にはわかりやすいものかと思います。</p><p>コントローラという概念自体はモバイルな開発では以前から使われているアイディアで、<a href="https://developer.apple.com/tutorials/app-dev-training/setting-up-a-table-view">iOSの開発でも見かける</a>し、<a href="https://medium.com/@ntaoo/widget%E3%81%8B%E3%82%89controller%E3%82%92%E5%88%86%E9%9B%A2%E3%81%99%E3%82%8B-cf2f0c646e78">Flutterにもあります</a>ね。Jetpack Composeはユーザーがロジックを定義する対象ではないのかな？<a href="https://developer.android.com/jetpack/compose/navigation">ナビゲーション周りぐらいでしかコントローラという言葉が出てこなく</a>て、UIを持たない提供ロジックの置き場っぽい使われ方っぽいですね。一般名詞なのでフレームワークごとに用法が違ってきがちですが、iOS的なコントローラに近そうです。</p><p>Litのドキュメント中はたんにコントローラと書かれているところもありますが、ページや段落の初出時には「Reactive Controller」と書かれているので正式名称はこちらっぽいです。APIのインタフェース名もこれになっています。一般名詞を特定用法で振り回すのはあんまり好きじゃない（用語を大切にするはずのDDDがリポジトリとかサービスとかといった名前でよく混乱を引き起こしている）ので、この記事でもリアクティブコントローラと書くようにします。</p><p>Litのリアクティブコントローラの設計は単にLitに閉じるものではなく、他のフレームワークからも使えるようなアダプターが提供されようとしています。</p><p><a href="https://github.com/lit/lit/issues/1682">https://github.com/lit/lit/issues/1682</a></p><img src="/images/20210615a/スクリーンショット_2021-06-12_9.55.02.png" alt="litのIssue1682" width="1200" height="1154"><h1 id="リアクティブコントローラのAPI"><a href="#リアクティブコントローラのAPI" class="headerlink" title="リアクティブコントローラのAPI"></a>リアクティブコントローラのAPI</h1><p>リアクティブコントローラを実装するにはReactiveController interfaceを実装したクラスを作ります。コンストラクタの中で呼び出している<code>addConttoller()</code>で、ホストとなるコンポーネントと接続されます。リアクティブコントローラからはホストの<code>requestUpdate()</code>メソッドを呼び出すことで変更を通知します。</p><p>次のサンプルはLit.devにあったタイマーのコントローラです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ReactiveController, ReactiveControllerHost&#125; <span class="keyword">from</span> <span class="string">&#x27;lit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockController</span> <span class="title">implements</span> <span class="title">ReactiveController</span> </span>&#123;</span><br><span class="line">  host: ReactiveControllerHost;</span><br><span class="line"></span><br><span class="line">  value = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  timeout: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> _timerID?: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">host: ReactiveControllerHost, timeout = <span class="number">1000</span></span>)</span> &#123;</span><br><span class="line">    (<span class="built_in">this</span>.host = host).addController(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.timeout = timeout;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">hostConnected</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Start a timer when the host is connected</span></span><br><span class="line">    <span class="built_in">this</span>._timerID = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.value = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="comment">// Update the host with new value</span></span><br><span class="line">      <span class="built_in">this</span>.host.requestUpdate();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">hostDisconnected</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Clear the timer when the host is disconnected</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="built_in">this</span>._timerID);</span><br><span class="line">    <span class="built_in">this</span>._timerID = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この手のやつが欲しくなるのって、Cheetah-GridとかagGridとかのテーブルコンポーネント系や、ツリービューとかですよね。プロパティに値を入れたらその通りにステートレスで仮想DOMやらなんやらで表示される、というのが今時のウェブ開発の目指すところですが、テーブル部品が入ると途端にその構造が大きく変更されがちです。</p><p>そもそも、外から与えるのは初期データで、更新後のデータは内部だけ、とかの設計になっている部品なら良いのですが（ReactのuseState的な)、全部のデータを上流に戻す前提とか、更新のトリガーは中と外のどちらが担当するか、など、まあたいてい再利用できないし、そこだけ大きく重力場が歪む感じがあります。ライフサイクルメソッドを駆使する形になるし、　ReduxとかVuex的なストアとの共存もまた厳しいものがあります。</p><p>この手のデータは、データを取得してくるキーは少なく、実態のデータが多くなりがちです。例えば、キーとなる入力はページ番号とソートキーの2つだけど、持っているデータは1ページ分の100行のデータ、といった具合です。ReactとかVueのプログラミングモデルとちょっと相性が悪いのはこの部分かな、と思います。</p><p>テーブルコンポーネントの場合、固定のデータをとってくるのか、無限スクロール的にデータを取ってくるのか、ページングなのか、いくつか選択肢があります。そのあたり、ユーザーが自分の使いたいユースケースに合わせて選択できると夢が広がります。</p><h1 id="コントローラを外から設定する"><a href="#コントローラを外から設定する" class="headerlink" title="コントローラを外から設定する"></a>コントローラを外から設定する</h1><p>ドキュメントを隅から隅まで読んでも、コントローラをコンポーネントの外から渡すというのはサンプルはありませんでしたが、イベントとして処理すれば良さそうです。こんな感じで書けばconnectedと表示されました。これでテーブルデータの更新をお任せすることが可能な気がします。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LitElement, html, css &#125; <span class="keyword">from</span> <span class="string">&#x27;lit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; customElement, property &#125; <span class="keyword">from</span> <span class="string">&#x27;lit/decorators.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@customElement</span>(<span class="string">&#x27;my-component&#x27;</span>)</span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">LitElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> controller?: ReactiveController;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> html`<span class="xml">&lt;div`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">firstUpdated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> myEvent = <span class="keyword">new</span> CustomEvent(<span class="string">&#x27;oninit&#x27;</span>, &#123;</span><br><span class="line">            detail: &#123; <span class="attr">message</span>: <span class="string">&#x27;onInit happened.&#x27;</span> &#125;,</span><br><span class="line">            bubbles: <span class="literal">true</span>,</span><br><span class="line">            composed: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.dispatchEvent(myEvent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">setController</span>(<span class="params">controller: ReactiveController</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.controller = controller;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">oninit</span>=<span class="string">&quot;console.log&quot;</span> <span class="attr">id</span>=<span class="string">&quot;host&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">constructor</span>(<span class="params">host</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.host = host;</span></span><br><span class="line"><span class="javascript">                host.addController(<span class="built_in">this</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">hostConnected</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;connected&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;host&#x27;</span>).addEventListener(<span class="string">&#x27;oninit&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            e.target.setController(<span class="string">&#x27;test&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;, &#123; <span class="attr">once</span>: <span class="literal">true</span>&#125;);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>これは生DOM APIを読んでいるので冗長な感じですが、Vueとかならイベントハンドラはタグ宣言の中で行えますし、そこまで大変ではないかなと思います。まあ、将来的にReactラッパーみたいな感じで、各コンポーネント向けのラッパーが簡単に作れるようになれば・・・</p><h1 id="テーブルのデータ取得用のコントローラを作ってみる"><a href="#テーブルのデータ取得用のコントローラを作ってみる" class="headerlink" title="テーブルのデータ取得用のコントローラを作ってみる"></a>テーブルのデータ取得用のコントローラを作ってみる</h1><p>みんな大好き<a href="https://future-architect.github.io/cheetah-grid/#/">Cheetah-Grid</a>のデータを取ってくるコントローラを作ってみます。ただ、サンプルとして作っているので、そこまで実用的ではないです。たいていのこの手のコンポーネントは、データ元を表すオブジェクトが提供されており、それをコンポーネントに渡せばだいたいやりたいことはできてしまいます。Cheetah-Gridも例に漏れず、<a href="https://future-architect.github.io/cheetah-grid/documents/api/js/grid_data/#using-array-object">DataSource</a>で無限スクロールな用途での内部のキャッシュやら描画やらはいい感じにやってくれます。</p><p>ですが、ちょっとダサいページングなUIを要望された、という想定で、ページングのデータ取得のリアクティブコントローラを実装してみます。</p><p>本当は<a href="https://devlog.grapecity.co.jp/wijmo-webcomponents/">GrapeCityのWijmo</a>のサンプルみたいにカラム定義もタグで書きたかったけど、まあ今回はリアクティブコントローラのサンプルなのでそこは省略しておきます。</p><p>データソースはどこかのウェブサイトかもしれないし、固定テーブルかもしれないし、計算で作るかもしれません。テーブルのユーザーは次のインタフェースを実装し、その中でデータ取得を行うものとします。</p><figure class="highlight ts"><figcaption><span>DataSourceController.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ReactiveController &#125; <span class="keyword">from</span> <span class="string">&#x27;lit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DataSourceController <span class="keyword">extends</span> ReactiveController &#123;</span><br><span class="line">    setPage(page: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>setPage()</code>が呼ばれたら中でデータを取得。中でホストの<code>setData()</code>を呼ぶ。</li><li>サーバー側で更新がかかったらそれを検知できるように、変更検知時にはホストの<code>setData()</code>を呼んでもいいものとする</li></ul><p>データをどこから取ってくるかを利用者が定義できるようになりますね。<code>ReactiveController</code>インタフェースを<code>extends</code>していますが、これにも対応することで、コンポーネントが表示されているかどうかが検知できるのでサーバー接続を開始したり終了したりといったこともコントローラ実装者が制御できるようになりますね。</p><p>とりあえず、何も考えず、数値と、それを7で割った余りの数値をリストアップするという実用的じゃないサンプルを作ってみます。本当はかっこいいCheetah-Gridをとりあえず固定長テーブル表示で使うWeb Componentsはこんな感じでできます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LitElement, html, css, ReactiveController &#125; <span class="keyword">from</span> <span class="string">&#x27;lit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; customElement &#125; <span class="keyword">from</span> <span class="string">&#x27;lit/decorators.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, Ref, createRef &#125; <span class="keyword">from</span> <span class="string">&#x27;lit/directives/ref.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ListGrid &#125; <span class="keyword">from</span> <span class="string">&#x27;cheetah-grid&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DataSourceController <span class="keyword">extends</span> ReactiveController &#123;</span><br><span class="line">    setPage(page: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@customElement</span>(<span class="string">&#x27;page-grid&#x27;</span>)</span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageGrid</span> <span class="keyword">extends</span> <span class="title">LitElement</span> </span>&#123;</span><br><span class="line">    tagRef: Ref&lt;HTMLDivElement&gt; = createRef();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> controller?: DataSourceController&lt;&#123; <span class="attr">num</span>: <span class="built_in">number</span>; rem: <span class="built_in">number</span> &#125;&gt;;</span><br><span class="line"></span><br><span class="line">    listGrid?: ListGrid&lt;&#123; <span class="attr">num</span>: <span class="built_in">number</span>; rem: <span class="built_in">number</span> &#125;&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> styles = css`</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.grid</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span>: 600<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-tag">solid</span> 1<span class="selector-tag">px</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    `</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> html`<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span> </span></span><span class="subst">$&#123;ref(<span class="built_in">this</span>.tagRef)&#125;</span><span class="xml"><span class="tag"> /&gt;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">firstUpdated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;firstUpdated&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> tag = <span class="built_in">this</span>.tagRef.value;</span><br><span class="line">        <span class="built_in">this</span>.listGrid = <span class="keyword">new</span> ListGrid(&#123;</span><br><span class="line">            parentElement: tag,</span><br><span class="line">            header: [</span><br><span class="line">                &#123; <span class="attr">field</span>: <span class="string">&#x27;num&#x27;</span>, <span class="attr">caption</span>: <span class="string">&#x27;num&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">field</span>: <span class="string">&#x27;rem&#x27;</span>, <span class="attr">caption</span>: <span class="string">&#x27;rem 7&#x27;</span> &#125;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> myEvent = <span class="keyword">new</span> CustomEvent(<span class="string">&#x27;oninit&#x27;</span>, &#123;</span><br><span class="line">            detail: &#123; <span class="attr">message</span>: <span class="string">&#x27;onInit happened.&#x27;</span> &#125;,</span><br><span class="line">            bubbles: <span class="literal">true</span>,</span><br><span class="line">            composed: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.dispatchEvent(myEvent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setController(</span><br><span class="line">        controller: DataSourceController&lt;&#123; <span class="attr">num</span>: <span class="built_in">number</span>; rem: <span class="built_in">number</span> &#125;&gt;</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="built_in">this</span>.controller = controller;</span><br><span class="line">        <span class="built_in">this</span>.addController(controller);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">setData</span>(<span class="params">data: &#123; num: <span class="built_in">number</span>; rem: <span class="built_in">number</span> &#125;[]</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.listGrid) &#123;</span><br><span class="line">            <span class="built_in">this</span>.listGrid.records = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用側はこんな感じで、コントローラを作成し、初期化のコールバックでコントローラを設定します。ページング機構を作るのがめんどくさかったので、一秒間に1ページ進むようにしています。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page-grid</span> <span class="attr">oninit</span>=<span class="string">&quot;console.log&quot;</span> <span class="attr">id</span>=<span class="string">&quot;grid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">page-grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">constructor</span>(<span class="params">host</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.host = host;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">setPage</span>(<span class="params">page</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> data = [];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span></span><br><span class="line">                    data.push(&#123; num: i + page * 10, rem: (i + page * 10) % 7 &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.host.setData(data);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;grid&#x27;</span>).addEventListener(<span class="string">&#x27;oninit&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> controller = <span class="keyword">new</span> MyController(e.target);</span></span><br><span class="line">            e.target.setController(controller);</span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> page = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">                controller.setPage(++page);</span><br><span class="line">            &#125;, 1000);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ユーザーがデータ取得をリアクティブコントローラでカスタマイズ可能なWebComponentsのテーブルコンポーネントが簡単にできました。</p><img src="/images/20210615a/スクリーンショット_2021-06-12_12.25.43.png" alt="テーブルコンポーネント" width="436" height="728"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>データソースをリアクティブコントローラとして分離する実装について解説しました。まあコントローラを外部から与えるという方法は公式ドキュメントにないので、本当にこれでいいのかは不明ですが、今まで悩みの種だった、ちょっと大きめなデータを扱うコンポーネント、テーブルとかツリービューを実装するときの光明になりそうです。仮想DOMではなく、Cheetah-GridのようにCanvas描画で超高速みたいにうたう高性能な部品に、大きめのデータをフレームワークの中でどう渡すかというところで、フレームワークとステート管理機構で、データ取得のキーだけ管理して、実体の生データはリアクティブコントローラが保持して、高性能な部品に渡す、ということになれば、ライブラリとの接合部分がスパゲティになりがちなところが簡潔になるんじゃないかと思います。</p><p>この機構はLitだけではなく、他のコンポーネントでも活用できそうなところもいいですね。うちの会社だと技術選定はお客さんの要望次第なところもあってここ三年でReactもVueもAngularも全部さわりました。Web ComponentsでUI部品も共通化されるといいな、といつも思っていましたが、ちょっとしたロジック、たとえばページを開いたタイミングでサーバーからデータ取得とかそういうのも再利用したり、結合が疎になってテストしやすくなるとさらに良いですね。</p><p>あとはMaterial YouのリリースでLit製コンポーネントをみんなが使うようになるのが楽しみですね。2021年がWeb Componentsの3回目の元年だとして、4回目と言わなくても済むぐらい広まって欲しいですね。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210614a/&quot;&gt;フロントエンド連載&lt;/a&gt;2日目のエントリーです。&lt;/p&gt;
&lt;p&gt;あまり話題になっていないような気がしますが、Web Componentsを実装するためのフレームワークのLit-Element v3がバージョンア</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="WebComponents" scheme="https://future-architect.github.io/tags/WebComponents/"/>
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Jest + TypeScript + Vue 3環境で Vue Testing Library(@testing-library／vue) を動かす</title>
    <link href="https://future-architect.github.io/articles/20210614b/"/>
    <id>https://future-architect.github.io/articles/20210614b/</id>
    <published>2021-06-13T15:00:01.000Z</published>
    <updated>2021-06-18T15:09:32.461Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210614a/">フロントエンド連載</a>の1記事目です。</p><p>TIG DXユニットの中川旭です。新卒で2020年10月に入社しました。初記事です。</p><p>作業が詰まったときや実際に作業するのが面倒なときのために、この記事を最後まで作業をした後のコードを下のリポジトリに置きます。</p><ul><li><a href="https://github.com/modockey/Init-VueTestingLibrary">https://github.com/modockey/Init-VueTestingLibrary</a></li></ul><h2 id="Vue-Testing-Libraryのいいところ"><a href="#Vue-Testing-Libraryのいいところ" class="headerlink" title="Vue Testing Libraryのいいところ"></a>Vue Testing Libraryのいいところ</h2><p>Vue Testing LibraryはVue.js公式のライブラリであるvue-test-utilをベースとする、DOM Testing LibraryのVue.js用拡張です。</p><p>Vue Testing Libraryを用いると、Vue.js公式ライブラリであるvue-test-utilと比較して内部構造を意識せずにテストを作成できます。</p><p>この記事では環境構築までとし、詳細な機能や具体的なメリットやテストの書き方の紹介はまたの機会に。</p><h2 id="Vue-jsプロジェクトの開始-JestでTypeScript部分のテストを動かすまで"><a href="#Vue-jsプロジェクトの開始-JestでTypeScript部分のテストを動かすまで" class="headerlink" title="Vue.jsプロジェクトの開始 ~ JestでTypeScript部分のテストを動かすまで"></a>Vue.jsプロジェクトの開始 ~ JestでTypeScript部分のテストを動かすまで</h2><h3 id="使用するものの紹介"><a href="#使用するものの紹介" class="headerlink" title="使用するものの紹介"></a>使用するものの紹介</h3><ul><li><a href="https://cli.vuejs.org/">Vue CLI</a></li><li><a href="https://jestjs.io/ja/docs/getting-started">Jest</a></li></ul><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>Windows上で Node.js v14.17.0 (npm v6.14.13) を使用しています。</p><p>この環境の準備に関しては、Microsoftのページにとても丁寧な説明があります。</p><ul><li><a href="https://docs.microsoft.com/ja-jp/windows/dev-environment/javascript/nodejs-on-windows">Windows での NodeJS のインストール</a></li></ul><h3 id="Vue-CLI-のインストール"><a href="#Vue-CLI-のインストール" class="headerlink" title="Vue CLI のインストール"></a>Vue CLI のインストール</h3><p>Vue.js開発ツールとして、Vue CLIが提供されています。まずはこれをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h3 id="Vueプロジェクトの作成"><a href="#Vueプロジェクトの作成" class="headerlink" title="Vueプロジェクトの作成"></a>Vueプロジェクトの作成</h3><p>適当な場所で”sample”という名前のVueプロジェクトを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vue create sample</span><br></pre></td></tr></table></figure><p>以下のような画面から基本設定をすることができます。今回はせっかくなので”Manually select features”を選択してみます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v4.5.13</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">  Default ([Vue 2] babel, eslint)</span><br><span class="line">  Default (Vue 3) ([Vue 3] babel, eslint)</span><br><span class="line">❯  Manually select features</span><br></pre></td></tr></table></figure><p>するとさらに詳細な設定画面が表示されます。<br>今回は下のように、<code>Babel</code> <code>TypeScript</code> を選択します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v4.5.13</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project:</span><br><span class="line"> (*) Choose Vue version</span><br><span class="line"> (*) Babel</span><br><span class="line">&gt;(*) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> ( ) Router</span><br><span class="line"> ( ) Vuex</span><br><span class="line"> ( ) CSS Pre-processors</span><br><span class="line"> ( ) Linter &#x2F; Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br></pre></td></tr></table></figure><p>Enterキーを押すとVue.jsのバージョン選択画面に。今回は3.xを選択します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v4.5.13</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Choose Vue version, Babel, TS, Linter, Unit, E2E</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span><br><span class="line"> 2.x</span><br><span class="line">❯  3.x</span><br></pre></td></tr></table></figure><p>その後、いくつか設定ありますが、好みで設定しましょう。(“?”のあとが今回選択したものです)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v4.5.13</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Choose Vue version, Babel, TS, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Use class-style component syntax? No</span><br><span class="line">? Use Babel alongside TypeScript (required for modern mode, auto-detected polyfills, transpiling JSX)? No</span><br><span class="line">? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset for future projects? (y&#x2F;N) No</span><br></pre></td></tr></table></figure><p>このあとEnterキーを押し、しばらくするとこのように表示されます。この指示に従いコマンドを実行すると、無事にサーバーが立って、ブラウザからVue.jsのサンプルページを開くことができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">🎉  Successfully created project sample.</span><br><span class="line">👉  Get started with the following commands:</span><br><span class="line"></span><br><span class="line"> $ cd sample</span><br><span class="line"> $ npm run serve</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> DONE  Compiled successfully in 3230ms                                                                                                                                                                                               23:54:10</span><br><span class="line"></span><br><span class="line">  App running at:</span><br><span class="line">  - Local:   http:&#x2F;&#x2F;localhost:8080&#x2F;</span><br><span class="line">  - Network: http:&#x2F;&#x2F;192.168.1.10:8080&#x2F;</span><br><span class="line"></span><br><span class="line">  Note that the development build is not optimized.</span><br><span class="line">  To create a production build, run npm run build.</span><br><span class="line"></span><br><span class="line">Issues checking in progress...</span><br><span class="line">No issues found.</span><br></pre></td></tr></table></figure><p>ブラウザで <code>http://localhost:8080/</code> を開くと以下のページが表示されます。</p><img src="/images/20210614b/image.png" alt="Vue起動画面" height="1200" width="993" loading="lazy"> <h3 id="Jestの単体テストを動かす"><a href="#Jestの単体テストを動かす" class="headerlink" title="Jestの単体テストを動かす"></a>Jestの単体テストを動かす</h3><p>まずはJest関連のパッケージをインストールしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/sample</span><br><span class="line">npm install --save-dev jest ts-jest @types/jest</span><br></pre></td></tr></table></figure><h4 id="jest-config-js配置"><a href="#jest-config-js配置" class="headerlink" title="jest.config.js配置"></a>jest.config.js配置</h4><p><a href="https://typescript-jp.gitbook.io/deep-dive/intro-1/jest">Jest</a>のページにあるテンプレートをコピーしてプロジェクトルートに配置します。</p><figure class="highlight js"><figcaption><span>jest.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">&quot;roots&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;&lt;rootDir&gt;/src&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;testMatch&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;**/__tests__/**/*.+(ts|tsx|js)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;**/?(*.)+(spec|test).+(ts|tsx|js)&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;transform&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;^.+\\.(ts|tsx)$&quot;</span>: <span class="string">&quot;ts-jest&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tsconfig-json-に”jest”を追記"><a href="#tsconfig-json-に”jest”を追記" class="headerlink" title="tsconfig.json に”jest”を追記"></a>tsconfig.json に”jest”を追記</h4><p>“compilerOptions”-&gt;”types”に<code>jest</code>を追加します。</p><figure class="highlight"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;types&quot;: [&quot;webpack-env&quot;, &quot;jest&quot;],</span><br></pre></td></tr></table></figure><h4 id="テスト用ファイル配置"><a href="#テスト用ファイル配置" class="headerlink" title="テスト用ファイル配置"></a>テスト用ファイル配置</h4><figure class="highlight ts"><figcaption><span>src/service/calc.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/service/__tests__/calc.test.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; plus &#125; <span class="keyword">from</span> <span class="string">&quot;../calc&quot;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;plus test&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  test(<span class="string">&quot;1 + 1&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(plus(<span class="number">1</span>, <span class="number">1</span>)).toEqual(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="npm-script追記"><a href="#npm-script追記" class="headerlink" title="npm script追記"></a>npm script追記</h4><p>テスト用にnpm scriptを追記します。<br>package.jsonの”scripts”に<code>&quot;test&quot;: &quot;jest&quot;</code>を追加しました。これで<code>npm run test</code>でテストを起動できます。</p><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;vue-cli-service build&quot;,</span><br><span class="line">  &quot;lint&quot;: &quot;vue-cli-service lint&quot;,</span><br><span class="line">  &quot;test&quot;: &quot;jest&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="単体テスト実行"><a href="#単体テスト実行" class="headerlink" title="単体テスト実行"></a>単体テスト実行</h4><p>テストを実行してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>以下のようにテスト結果が表示されます。テスト成功です！<br><img src="/images/20210614b/image_2.png" alt="テスト成功ログ" width="722" height="316" loading="lazy"></p><h2 id="Vue-Testing-Libraryを動かす"><a href="#Vue-Testing-Libraryを動かす" class="headerlink" title="Vue Testing Libraryを動かす"></a>Vue Testing Libraryを動かす</h2><p><a href="https://testing-library.com/docs/vue-testing-library/examples">公式ページ</a>にある例を使用します。<br>今回は上のページの例をここまでの設定で生成されたスタイルに合わせて少し改変して使用します。</p><h4 id="テスト用パッケージのインストール"><a href="#テスト用パッケージのインストール" class="headerlink" title="テスト用パッケージのインストール"></a>テスト用パッケージのインストール</h4><p>vue-jestと記事の主役である<code>@testing-library/vue@next</code>をインストールします。</p><p><code>@testing-library/vue@next</code>がVue 3用のパッケージです。<code>@testing-library/vue</code>はVue 3では動作しません。</p><p><code>@testing-library/vue</code>で動かそうとするとvue-template-compilerのバージョンが合わない、とエラーが出ます。Vue 3 では同機能は<code>@vue/compiler-sfc</code>に移行しているようです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/sample</span><br><span class="line">npm install --save-dev vue-jest@next</span><br><span class="line">npm install --save-dev @testing-library/vue@next</span><br></pre></td></tr></table></figure><h4 id="テスト用コンポーネント-amp-テストコード配置"><a href="#テスト用コンポーネント-amp-テストコード配置" class="headerlink" title="テスト用コンポーネント&amp;テストコード配置"></a>テスト用コンポーネント&amp;テストコード配置</h4><figure class="highlight html"><figcaption><span>src/components/Counter.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Times clicked: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&quot;Counter&quot;</span>,</span></span><br><span class="line"><span class="javascript">  data: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line">    count: 0,</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.count++;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/tests/counter.test.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; render, fireEvent &#125; <span class="keyword">from</span> <span class="string">&quot;@testing-library/vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">&quot;../components/Counter.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;increments value on click&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// The render method returns a collection of utilities to query your component.</span></span><br><span class="line">  <span class="keyword">const</span> &#123; getByText &#125; = render(Counter);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getByText returns the first matching node for the provided text, and</span></span><br><span class="line">  <span class="comment">// throws an error if no elements match or if more than one match is found.</span></span><br><span class="line">  getByText(<span class="string">&quot;Times clicked: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> button = getByText(<span class="string">&quot;increment&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Dispatch a native click event to our button element.</span></span><br><span class="line">  <span class="keyword">await</span> fireEvent.click(button);</span><br><span class="line">  <span class="keyword">await</span> fireEvent.click(button);</span><br><span class="line"></span><br><span class="line">  getByText(<span class="string">&quot;Times clicked: 2&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="jest-config-js-の”transform”に追記"><a href="#jest-config-js-の”transform”に追記" class="headerlink" title="jest.config.js の”transform”に追記"></a>jest.config.js の”transform”に追記</h4><p>“transform”には以下のように、vueファイルに対してvue-jestを使うよう指示します。</p><figure class="highlight js"><figcaption><span>jest.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;transform&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;^.+\\.(ts|tsx)$&quot;</span>: <span class="string">&quot;ts-jest&quot;</span>,</span><br><span class="line">  <span class="string">&quot;^.+\\.vue$&quot;</span>: <span class="string">&quot;vue-jest&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="jestのバージョンに気を付けよう"><a href="#jestのバージョンに気を付けよう" class="headerlink" title="jestのバージョンに気を付けよう"></a>jestのバージョンに気を付けよう</h4><p>ここまでの設定を追えて<code>npm run test</code>を実行すると、以下のようにエラーが発生します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FAIL  src&#x2F;tests&#x2F;counter.test.ts</span><br><span class="line"> ● Test suite failed to run</span><br><span class="line"></span><br><span class="line">   TypeError: Cannot destructure property &#39;config&#39; of &#39;undefined&#39; as it is undefined.</span><br><span class="line"></span><br><span class="line">     at Object.getCacheKey (node_modules&#x2F;vue-jest&#x2F;lib&#x2F;index.js:10:7)</span><br><span class="line">     at ScriptTransformer._getCacheKey (node_modules&#x2F;@jest&#x2F;transform&#x2F;build&#x2F;ScriptTransformer.js:280:41)</span><br><span class="line">     at ScriptTransformer._getFileCachePath (node_modules&#x2F;@jest&#x2F;transform&#x2F;build&#x2F;ScriptTransformer.js:351:27)</span><br><span class="line">     at ScriptTransformer.transformSource (node_modules&#x2F;@jest&#x2F;transform&#x2F;build&#x2F;ScriptTransformer.js:588:32)</span><br><span class="line">     at ScriptTransformer._transformAndBuildScript (node_modules&#x2F;@jest&#x2F;transform&#x2F;build&#x2F;ScriptTransformer.js:758:40)</span><br><span class="line">     at ScriptTransformer.transform (node_modules&#x2F;@jest&#x2F;transform&#x2F;build&#x2F;ScriptTransformer.js:815:19)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kulshekhar/ts-jest/issues/2612">https://github.com/kulshekhar/ts-jest/issues/2612</a> のように、<br>jest, ts-jestの27系でバグがあるようです。jestとts-jestは26系にします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jest@26 ts-jest@26</span><br></pre></td></tr></table></figure><h4 id="babalの設定をする"><a href="#babalの設定をする" class="headerlink" title="babalの設定をする"></a>babalの設定をする</h4><p>これでもまだ<code>npm run test</code>を実行すると、以下のようにエラーが発生します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">● Test suite failed to run</span><br><span class="line"></span><br><span class="line">   Jest encountered an unexpected token</span><br><span class="line"></span><br><span class="line">   This usually means that you are trying to import a file which Jest cannot parse, e.g. it&#39;s not plain JavaScript.</span><br><span class="line"></span><br><span class="line">   By default, if Jest sees a Babel config, it will use that to transform your files, ignoring &quot;node_modules&quot;.</span><br><span class="line"></span><br><span class="line">   Here&#39;s what you can do:</span><br><span class="line">    • If you are trying to use ECMAScript Modules, see https:&#x2F;&#x2F;jestjs.io&#x2F;docs&#x2F;en&#x2F;ecmascript-modules for how to enable it.</span><br><span class="line">    • To have some of your &quot;node_modules&quot; files transformed, you can specify a custom &quot;transformIgnorePatterns&quot; in your config.</span><br><span class="line">    • If you need a custom transformation specify a &quot;transform&quot; option in your config.</span><br><span class="line">    • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the &quot;moduleNameMapper&quot; config option.</span><br><span class="line"></span><br><span class="line">   You&#39;ll find more details and examples of these config options in the docs:</span><br><span class="line">   https:&#x2F;&#x2F;jestjs.io&#x2F;docs&#x2F;en&#x2F;configuration.html</span><br><span class="line"></span><br><span class="line">   Details:</span><br><span class="line"></span><br><span class="line">   C:\Users\&#123;UserName&#125;\sample\src\components\Counter.vue:1</span><br><span class="line">   (&#123;&quot;Object.&lt;anonymous&gt;&quot;:function(module,exports,require,__dirname,__filename,global,jest)&#123;import &#123; defineComponent &#125; from &quot;vue&quot;;</span><br><span class="line">                                                                                            ^^^^^^</span><br><span class="line"></span><br><span class="line">   SyntaxError: Cannot use import statement outside a module</span><br><span class="line"></span><br><span class="line">     1 | import &#123; render, fireEvent &#125; from &quot;@testing-library&#x2F;vue&quot;;</span><br><span class="line">   &gt; 2 | import Counter from &quot;..&#x2F;components&#x2F;Counter.vue&quot;;</span><br><span class="line">       | ^</span><br><span class="line">     3 |</span><br><span class="line">     4 | test(&quot;increments value on click&quot;, async () &#x3D;&gt; &#123;</span><br><span class="line">     5 |   &#x2F;&#x2F; The render method returns a collection of utilities to query your component.</span><br><span class="line"></span><br><span class="line">     at Runtime.createScriptFromCode (node_modules&#x2F;jest-runtime&#x2F;build&#x2F;index.js:1350:14)</span><br><span class="line">     at Object.&lt;anonymous&gt; (src&#x2F;tests&#x2F;counter.test.ts:2:1)</span><br></pre></td></tr></table></figure><p>babelの設定が足りないようです。<br>今回は環境に合わせた設定をしてくれる<a href="https://babeljs.io/docs/en/babel-preset-env">@babel/preset-env</a>を使用します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/preset-env</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        targets: &#123;</span><br><span class="line">          node: <span class="string">&quot;current&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="テスト実行"><a href="#テスト実行" class="headerlink" title="テスト実行"></a>テスト実行</h3><p><code>npm run test</code>を実行します。</p><img src="/images/20210614b/image_3.png" alt="Vue Testing Libraryのテスト実行結果で成功した様子" width="699" height="285" loading="lazy"><p>やっと動きました！</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>改めて書くと当然のことばかりですが、この記事の要点は以下の3点です。</p><ul><li>パッケージを使うときは、Vue 3に対応しているか確認する</li><li>ts.config.js, jest.config.js にコンパイラ設定をちゃんと書く</li><li>通常の手順に沿ってもエラーが出る場合、パッケージのバージョンを確認して調べる</li></ul><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>この記事の存在で環境構築でハマる人が一人でも減れば幸いです。<br>今回は環境構築だけの内容になってしまいましたが、冒頭にも書いた通りVue Testing Libraryの詳細な記事を今後書きます。お楽しみに。</p><p>これまでWeb記事を書いたことがなかったので、自分にとってはフューチャー技術ブログのみならず人生初となる記事でした。<br>記事を書くことで自分が理解している領域と理解していない領域の境界が明確になることと、記事を書くために調べることで理解している領域が少しだけ広がることを感じました。</p><p>新卒研修後すぐの2021年1月から技術ブログ運営をしている真野さん(<a href="/authors/%E7%9C%9F%E9%87%8E%E9%9A%BC%E8%A8%98/">記事</a>)のいるプロジェクトにアサインされ、さらにフューチャー技術ブログのエースである澁川さん(<a href="/authors/%E6%BE%81%E5%B7%9D%E5%96%9C%E8%A6%8F">記事</a>)にOJTを見て頂くという恵まれた環境に置かれたことへの感謝を今後の自身の成長と記事の執筆につなげていきたいと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210614a/&quot;&gt;フロントエンド連載&lt;/a&gt;の1記事目です。&lt;/p&gt;
&lt;p&gt;TIG DXユニットの中川旭です。新卒で2020年10月に入社しました。初記事です。&lt;/p&gt;
&lt;p&gt;作業が詰まったときや実際に作業するのが面倒なときのため</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="テスト" scheme="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>フロントエンド連載2021</title>
    <link href="https://future-architect.github.io/articles/20210614a/"/>
    <id>https://future-architect.github.io/articles/20210614a/</id>
    <published>2021-06-13T15:00:00.000Z</published>
    <updated>2021-06-17T02:02:32.130Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210614a/digital-1985681_640.jpg" alt="" title="Diego VelázquezによるPixabayからの画像" width="640" height="457"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。2021の06.14～6.24にかけてフロントエンド技術をテーマにしたブログ連載を始めます。</p><p>ES2021/TS/Node/Vue/Reactなどなど、ざっくりとフロントエンド界隈で話されるような技術をテーマにします。</p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><div class="scroll"><table><thead><tr><th>日付</th><th>名前</th><th>タイトル</th></tr></thead><tbody><tr><td>6/14</td><td>中川旭</td><td><a href="/articles/20210614b/">Jest + TypeScript + Vue 3環境で Vue Testing Library(@testing-library/vue) を動かす</a></td></tr><tr><td>6/15</td><td>澁川喜規</td><td><a href="/articles/20210615a/">リアクティブコントローラ」導入がもたらすかもしれないウェブフロントエンド設計の変化</a></td></tr><tr><td>6/16</td><td>伊藤真彦</td><td><a href="/articles/20210616a/">Vue CLIのデフォルト設定からESLintのベストプラクティスを検討する</a></td></tr><tr><td>6/17</td><td>柏木祥子</td><td><a href="/articles/20210617a/">ES2021/ES2022を知ろう</a></td></tr><tr><td>6/18</td><td>棚井龍之介</td><td></td></tr><tr><td>6/21</td><td>枇榔晃裕</td><td>どうしてHTML5が廃止されたのか</td></tr><tr><td>6/22</td><td>太田洋介</td><td>Svelteに入門した</td></tr><tr><td>6/23</td><td>真野隼記</td><td>コレクション操作</td></tr><tr><td>6/24</td><td>久保勇暉</td><td></td></tr></tbody></table></div><h2 id="フューチャーとフロントエンド技術の関わり"><a href="#フューチャーとフロントエンド技術の関わり" class="headerlink" title="フューチャーとフロントエンド技術の関わり"></a>フューチャーとフロントエンド技術の関わり</h2><p><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a> から引用します。</p><blockquote><p>フューチャーのようなB2Bな会社であっても、最近はフロントエンドの比重が高まっているところから出発しています。僕もフューチャーに転職後からReactでがっつり1年以上の案件をやったり、半年ぐらいのAngular案件をやったりしています。会社としてはVue.jsを推しています。グループ会社の東京カレンダーはReactを使っていたりもします。要件に合わせていろいろですね。B2B2Cな案件も多いですし、お客様の求めるUX体験の良さを実現するにはフロントエンド側での頑張りが必要です。</p></blockquote><p>この記事は2019年の記事ですが、2021年の現在も大体同じような状態です。今も採用技術は案件やチームで最適なものを選択しており、各技術要素で社内に様々な知見が溜まっているように感じます。</p><p>ここ最近はFlutter案件も出てきているようなので、そのうちFlutter Webな案件が出てくるかもしれませんね。</p><h2 id="今まで公開された主なフロントエンド記事"><a href="#今まで公開された主なフロントエンド記事" class="headerlink" title="今まで公開された主なフロントエンド記事"></a>今まで公開された主なフロントエンド記事</h2><p>フューチャーのフロントエンド技術といえば、社内向けのTypeScript教育コンテンツの一般公開や…</p><ul><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li></ul><p>チート級に早いと噂のOSSテーブルライブラリ、CheetahGridなどが有名かと思います。</p><ul><li><a href="/articles/20200901/">Vue.jsで最速に始めるCheetah Grid</a></li><li><a href="/articles/20200924/">CheetahGrid+Vue.jsをエンプラで使ってみた</a></li></ul><p>記事としては、Vue.js、Reactなど様々な人気記事がに公開されています。</p><ul><li><a href="o/articles/20201013/">2020年秋にVue.jsのアプリケーションを作るなら、押さえておきたい5つのポイント</a></li><li><a href="/articles/20200401/">Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた</a></li><li><a href="/articles/20200501/">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話</a></li><li><a href="/articles/20200429/">Reduxを分かりやすく解説してみた</a></li></ul><p>E2Eテスト（打鍵テスト）に自動化ツール、Cypressについては記事に加えて<a href="https://future.connpass.com/">Future Tech Night</a>で勉強会も開催しました。</p><ul><li><a href="/articles/20210428a/">Cypress入門～初心者でも簡単にE2Eテストが作れる～</a></li><li><a href="/articles/20210428d/">Cypress - 書きやすいテストの秘密と独自コマンドの実装</a></li></ul><p>これらの活動を、今回のブログ連載により強化・加速できれば良いなと考えています。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p><a href="/articles/20210112/">2021年初に立てた計画</a>に沿って様々な連載を開催しています。フロントエンド連載をはじめ様々な取り組みでフューチャーの知見を公開しようとしています。</p><p>連載についてフィードバックがあれば、お気軽にTwitterアカウントまでフィードバックしていただければです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210614a/digital-1985681_640.jpg&quot; alt=&quot;&quot; title=&quot;Diego VelázquezによるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;457&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>サーバーアプリ開発環境(Python／FastAPI)</title>
    <link href="https://future-architect.github.io/articles/20210611a/"/>
    <id>https://future-architect.github.io/articles/20210611a/</id>
    <published>2021-06-10T15:00:00.000Z</published>
    <updated>2021-06-11T05:43:37.422Z</updated>
    
    <content type="html"><![CDATA[<p>Pythonでお仕事する前提で、現在のところで自分が最適と考えるチーム開発のための環境整備についてまとめてみました。今までももろもろ散発的に記事に書いたりしていたのですが、Poetryで環境を作ってみたのと、過去のもろもろの情報がまとまったものが個人的にも欲しかったのでまとめました。前提としては次の通りです。</p><ul><li>パッケージ管理や開発環境整備でPoetryを使う</li><li>今時はコードフォーマッター、静的チェックは当たり前ですよね？</li><li>コマンドでテスト実行、コードチェックとか実行とかができる（CI/CD等を考えて）</li><li>VSCodeでもコマンドで実行しているのと同じコードチェックが可能(ここコンフリクトすると困る）</li><li>デプロイはDockerイメージ</li><li>コンテナのデプロイ環境でコンテナに割り当てられたCPU能力を比較的引き出せて、スケールさせたら線形にパフォーマンスアップできるようなasyncioを前提とした環境構築</li></ul><p>Pythonのasyncio周りで<a href="https://twitter.com/aodag">@aodag</a>と<a href="https://twitter.com/moriyoshit">@moriyoshit</a>にアドバイスをいただきました。</p><h1 id="Poetryのインストール（1回で良い）"><a href="#Poetryのインストール（1回で良い）" class="headerlink" title="Poetryのインストール（1回で良い）"></a>Poetryのインストール（1回で良い）</h1><p><a href="https://python-poetry.org/docs/">https://python-poetry.org/docs/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> https://raw.githubusercontent.com/python<span class="literal">-poetry</span>/poetry/master/<span class="built_in">get-poetry</span>.py <span class="literal">-UseBasicParsing</span>).Content | python -</span><br></pre></td></tr></table></figure><p>ホームの.poetry/bin以下にコマンドが作成される。ここにパスを通すか、どうせpoetryコマンドだけなのでこれのシンボリックリンクをパスの通っているところに作る。</p><h1 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h1><p>プロジェクトフォルダはコマンドで一緒に作られるので、フォルダをおきたい親フォルダでコマンドを実行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry new sample-server</span><br></pre></td></tr></table></figure><p>これでsample-serverフォルダが作られて、その中に設定ファイル一式がつくられる。</p><p>ここで必要なライブラリのインストールとかしてもいいがその前にやっておくと良いことがある。venv環境をプロジェクトの中に作ると、VSCodeとかで仮想環境を上手く扱ってくれるのでこの設定をやっておくと良い。プロジェクトファイル内にpoetry.tomlというファイルが作られる。これをコミットしておけば、プロジェクト全員が同じフォルダ構成になるため、プロジェクトの平準化がしやすい。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> sample-server</span><br><span class="line">$ poetry config virtualenvs.path <span class="string">&quot;.venv&quot;</span> --<span class="built_in">local</span></span><br><span class="line">$ poetry config virtualenvs.in-project <span class="literal">true</span> --<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>ここで仮想環境を有効にして、必要なライブラリをインストール。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry install</span><br></pre></td></tr></table></figure><p>デフォルトでpytestが入っており、これでテストができる。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry run pytest</span><br></pre></td></tr></table></figure><h1 id="ツールのインストール"><a href="#ツールのインストール" class="headerlink" title="ツールのインストール"></a>ツールのインストール</h1><p>Poetryの標準テンプレートでpytest入りますが、linter (flake8, mypy)とフォーマッター (black)を入れていきます。</p><p>これからぼちぼち設定をいじったりもするので、最初にVSCodeの設定をします。poetry installで作られた.venv環境を参照するようにします。</p><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;python.pythonPath&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/.venv/bin/python&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでエディタを開いて、Pythonバージョンに(‘.venv’ :venv)とかかれていれば成功です。</p><p>フォーマッターはblack、linterはflake8とmypyを入れます。またVSCodeのターミナルを起動すると自動で.venv環境に入ってくれるようになります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry add --dev mypy black flake8</span><br></pre></td></tr></table></figure><p>ツールの実行はまとめて行いたい、みたいなことがありますが、poetryにはツールランチャーの機能はないので、taskipyを入れます。</p><p><a href="https://tech.515hikaru.net/post/2020-02-25-poetry-scripts/">https://tech.515hikaru.net/post/2020-02-25-poetry-scripts/</a></p><p>次のように定義することで、コマンド名とかを覚えなくても良いようにします。</p><figure class="highlight toml"><figcaption><span>pyproject.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.taskipy.tasks]</span></span><br><span class="line"><span class="attr">test</span> = &#123; cmd = <span class="string">&quot;pytest tests&quot;</span>, help = <span class="string">&quot;runs all unit tests&quot;</span> &#125;</span><br><span class="line"><span class="attr">pr_test</span> = <span class="string">&quot;task lint&quot;</span></span><br><span class="line"><span class="attr">fmt</span> = &#123; cmd = <span class="string">&quot;black tests example_server&quot;</span>, help = <span class="string">&quot;format code&quot;</span> &#125;</span><br><span class="line"><span class="attr">lint</span> = &#123; cmd = <span class="string">&quot;task lint_black &amp;&amp; task lint_flake8 &amp;&amp; task lint_mypy&quot;</span>, help = <span class="string">&quot;exec lint&quot;</span> &#125;</span><br><span class="line"><span class="attr">lint_flake8</span> = <span class="string">&quot;flake8 --max-line-length=88 tests example_server&quot;</span></span><br><span class="line"><span class="attr">lint_mypy</span> = <span class="string">&quot;mypy tests example_server&quot;</span></span><br><span class="line"><span class="attr">lint_black</span> = <span class="string">&quot;black --check tests example_server&quot;</span></span><br></pre></td></tr></table></figure><p>次の名前で開発タスクが行えるようになります。</p><ul><li><code>poetry run task test</code>: テストの実行(lintも行う)</li><li><code>poetry run task fmt</code>: スタイルの修正</li><li><code>poetry run task lint</code>: lintの実行(flake8, mypy, blackの差分チェック)</li><li><code>poetry run task --list</code>: タスク一覧表示</li></ul><p>VSCodeの方も、これらの設定に合わせます。</p><p>linterはコード入力の中でリアルタイムで適用してチェックされるようになるし、保存時にblackでフォーマットされるようになります。テストはテスト関数の関数定義の行の前に出てくるRun Testボタンでもできますし、コマンドパレットでRun All Testでも実行できるようになります。</p><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;python.pythonPath&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/.venv/bin/python&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;python.formatting.provider&quot;</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;python.linting.flake8Enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;python.linting.flake8Args&quot;</span>: [<span class="string">&quot;--max-line-length&quot;</span>, <span class="string">&quot;88&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;python.linting.mypyEnabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;python.testing.pytestEnabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;python.testing.pytestArgs&quot;</span>: [<span class="string">&quot;tests&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;python.testing.unittestEnabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;python.testing.nosetestsEnabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>無視するファイルも登録しておきます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__pycache__</span><br><span class="line">.venv</span><br><span class="line">.pytest_cache</span><br><span class="line">.mypy_cache</span><br></pre></td></tr></table></figure><p>これで一通り設定完了です。.vscode/settings.jsonを含めて各種ファイルを全部リポジトリに入れておけば、チェックアウトしたユーザーは<code>poetry install</code>を実行すれば環境が整います。</p><h1 id="サーバーの開発"><a href="#サーバーの開発" class="headerlink" title="サーバーの開発"></a>サーバーの開発</h1><p>必要なライブラリをインストールします。今回はasyncio対応ということで<a href="https://fastapi.tiangolo.com/">FastAPI</a>を選びました。<a href="https://www.starlette.io/">Starlette</a>でもいいと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry add fastapi uvicorn gunicorn</span><br></pre></td></tr></table></figure><p>Poetryが作ったコード用のフォルダの中にmain.pyファイルを作り、FastAPIのサンプルコードを貼り付けます。</p><figure class="highlight py"><figcaption><span>example_server/main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: Optional[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure><p>テストサーバー起動をpoetryコマンドから行えるように、タスク定義を追加しておきます。</p><figure class="highlight toml"><figcaption><span>pyproject.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.taskipy.tasks]</span></span><br><span class="line"><span class="attr">start</span> = &#123; cmd = <span class="string">&quot;uvicorn example_server.main:app --reload&quot;</span>, help = <span class="string">&quot;launch test server&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>これで次のコマンドで8000ポートで開発サーバーが起動するようになります。ファイルを変更すると自動リロードします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ poetry run task start</span><br><span class="line">INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)</span><br><span class="line">INFO:     Started reloader process [49000] using statreload</span><br><span class="line">INFO:     Started server process [49003]</span><br><span class="line">INFO:     Waiting <span class="keyword">for</span> application startup.</span><br><span class="line">INFO:     Application startup complete.```</span><br></pre></td></tr></table></figure><p>これでどんどんコードを書いてブラウザで動かして・・・というのはできるのですが、デバッグもしたいですよね？VSCodeの設定ファイルを作っておいておきます。</p><figure class="highlight json"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Python: FastAPI&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;uvicorn&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;example_server.main:app&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;jinja&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを作っておくと、Run and DebugアイコンをクリックしたときにRUNのところに表示されますので、▷ボタンを押すとデバッガーでアプリが起動します。あとはブレークポイントを置いたりステップ実行したり、変数をみたり、自由自在です。</p><p><img src="/images/20210611a/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-06-11_12.35.24.png"></p><h1 id="サーバーのDocker化"><a href="#サーバーのDocker化" class="headerlink" title="サーバーのDocker化"></a>サーバーのDocker化</h1><p>Dockerのイメージにするところまで作っておきましょう。まずはビルド時に不要なファイルを設定する.dockerignoreファイルを作ります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__pycache__</span><br><span class="line">.venv</span><br><span class="line">.pytest_cache</span><br><span class="line">.mypy_cache</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure><p>次にDockerfileです。ウェブサーバーはデータベースのライブラリが必要になったりすることを考えてDebianベースで作っています。Distrolessだとバイナリパッケージ追加がちょっと厳しいかもというのと、Pythonバージョンが3.7とちょっと古いので・・・バイナリパッケージの問題や型チェックで新しい書き方を使わなくても構わない場合はDistrolessが良いと思います。</p><p>Gunicornの起動ではアクセスログをコンソールに流すようにしています。ログドライバーが取得して収集しやすくなるので、ローカルファイルに置くのではなくて、出力するのがコンテナ時代やり方ですね。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ここはビルド用のコンテナ</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim-buster as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install poetry</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> poetry.lock pyproject.toml poetry.toml ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> poetry install --no-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ここからは実行用コンテナの準備</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim-buster as runner</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd -r -s /bin/<span class="literal">false</span> uvicornuser</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /opt/app/.venv /opt/app/.venv</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> example_server ./example_server</span></span><br><span class="line"><span class="keyword">USER</span> uvicornuser</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/opt/app/.venv/bin/gunicorn&quot;</span>, <span class="string">&quot;-w&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;-k&quot;</span>, <span class="string">&quot;uvicorn.workers.UvicornWorker&quot;</span>, <span class="string">&quot;--capture-output&quot;</span>, <span class="string">&quot;--log-level&quot;</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;--access-logfile&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;--bind&quot;</span>, <span class="string">&quot;:8000&quot;</span>, <span class="string">&quot;example_server.main:app&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>各DB接続ライブラリのasyncioサポートと必要なパッケージの組み合わせは次の通りです。</p><ul><li><a href="https://docs.sqlalchemy.org/en/14/orm/extensions/asyncio.html">SQLAlchemy</a><ul><li>PostgreSQL: <a href="https://pypi.org/project/asyncpg/">asyncpg</a></li></ul></li><li><a href="https://pypi.org/project/databases/">databases</a><ul><li>PostgreSQL: <a href="https://pypi.org/project/asyncpg/">asyncpg</a></li><li>MySQL: <a href="https://pypi.org/project/aiomysql/">aiomysql</a></li><li>SQLite: <a href="https://pypi.org/project/aiosqlite/">https://pypi.org/project/aiosqlite/</a></li></ul></li></ul><p>上記のライブラリ群を使う限り、ビルドイメージはslimで大丈夫ですし、追加のパッケージインストールも不要です。asyncpgはCythonで作られていますが、manylinux1なバイナリが提供されているのでDebian系のイメージを使う限りはCコンパイラは不要（slimなイメージのままで大丈夫）です。また、同期接続な<a href="https://pypi.org/project/PyMySQL/">PyMySQL</a>もpure pythonなのでそのままで大丈夫です。型チェックの書き方さえPython3.7でよければDistroless化も簡単です。</p><p>PostgreSQLで、同期接続の<a href="https://pypi.org/project/psycopg2/">psycopg2</a>を使う場合にlibpq5（とlibxml2)が必要となりますし、Cコンパイラも必要になるので、ビルドイメージをslimじゃないものにして、次のコードを実行イメージのFROMのところに入れておきます。ビルドイメージのslimじゃないbusterイメージには最初からlibpq5-devとかも入っているので追加インストールは実行イメージ側だけで大丈夫です。</p><figure class="highlight docker"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ここはビルド用のコンテナ</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-buster as builder</span><br><span class="line">:</span><br><span class="line"></span><br><span class="line"><span class="comment"># ここからは実行用コンテナの準備</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim-buster as runner</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apt-get install -y libpq5 libxml2 \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apt-get clean \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line">:</span><br></pre></td></tr></table></figure><p>実行はいつもの通りです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t sample-server .</span><br><span class="line">$ docker run --rm -it -p 8000:8000 sample-server .</span><br></pre></td></tr></table></figure><h1 id="Pythonネタで過去に書いた記事です"><a href="#Pythonネタで過去に書いた記事です" class="headerlink" title="Pythonネタで過去に書いた記事です"></a>Pythonネタで過去に書いた記事です</h1><ul><li><a href="/articles/20201223/">2021年版Pythonの型ヒントの書き方 (for Python 3.9)</a></li><li><a href="/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</a></li><li><a href="/articles/20200514/">仕事でPythonコンテナをデプロイする人向けのDockerfile (2): distroless編</a></li><li><a href="/articles/20200910/">「2020年代のコンテナ時代のPythonアーキテクチャ&amp;デプロイ」というテーマでPyCon.jp 2020で発表してきました</a></li><li><a href="https://qiita.com/shibukawa/items/1650724daf117fad6ccd">Python 3.7とVisual Studio Codeで型チェックが捗る内作Pythonアプリケーション開発環境の構築</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Pythonでお仕事する前提で、現在のところで自分が最適と考えるチーム開発のための環境整備についてまとめてみました。今までももろもろ散発的に記事に書いたりしていたのですが、Poetryで環境を作ってみたのと、過去のもろもろの情報がまとまったものが個人的にも欲しかったのでまと</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>AWS APIGateway Custom Authorizer入門</title>
    <link href="https://future-architect.github.io/articles/20210610a/"/>
    <id>https://future-architect.github.io/articles/20210610a/</id>
    <published>2021-06-09T15:00:00.000Z</published>
    <updated>2021-06-10T03:03:58.522Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIG/DXユニットのLEEです。フューチャーではここ数年、主に認証認可関係の設計や開発などを担当しております。</p><p>今回は流行りの認証プロトコルであるOpenID ConnectとOAuth2.0におけるAuthorizerについて話そうと思います。</p><h1 id="Authorizerとは"><a href="#Authorizerとは" class="headerlink" title="Authorizerとは"></a>Authorizerとは</h1><p><img src="/images/20210610a/custom-auth-workflow.png" alt="&quot;カスタムオーソライザの動作フロー&quot;"></p><p><a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Authorizer</a>とはAWS APIGatewayにある機能の一つで、外からAPIサーバに送られてくるリクエストを検証することにより、アクセスを制御する機能です。OAuth2.0のプロトコルにおいては、AuthorizerはJWTなどTokenを検証することで、APIサーバ、つまり <code>ResourceServer</code> を保護する役割を持っています。</p><p>OSSのAPIGatewayであるKongを触ったことがある方ならば、<a href="https://docs.konghq.com/hub/kong-inc/jwt/">JWT Plugin</a>とほぼ同じ立ち位置のものと思って構いません。</p><h1 id="なぜ使うのか"><a href="#なぜ使うのか" class="headerlink" title="なぜ使うのか"></a>なぜ使うのか</h1><p>SinglePageApplicationやモバイルアプリなど、ClientになるFront-endがサーバと分離されたシステム構成の場合、<code>Client (RelyingParty)</code> と <code>APIサーバ (ResourceServer)</code> を両方セキュアにする必要があります。</p><p><code>RelyingParty</code> の場合、KeycloakやAuth0など認証基盤が提供するライブラリや、OIDCに準拠したライブラリを使えば割と簡単にセキュアにすることが可能です。</p><p>一方、<code>ResourceServer</code> にはAuthorizerを実装する必要があります。Authorizerはサーバの内部のMiddleware層などに実装することも可能ですが、複数のAPIサーバが存在してて、一つのAPIGatewayでEndpointを集中管理する場合にAuthorizerをLambdaとして一本実装することにより、開発やデプロイなどにメリットをもたらすことができます。</p><p>この度はそのAuthorizerを実装するにあたって、いくつか考慮すべきポイントについて触れて行こうと思います。</p><h1 id="Authorizer設定"><a href="#Authorizer設定" class="headerlink" title="Authorizer設定"></a>Authorizer設定</h1><h2 id="タイプ"><a href="#タイプ" class="headerlink" title="タイプ"></a>タイプ</h2><p>今回はCognitoではなく、KeycloakやAuth0など外部の認証基盤を想定しています。<br>AuthorizerをLambda関数で実装することにより、認証認可制御をもっと自由にカスタムすることができます。</p><h2 id="Lambdaイベントペイロード"><a href="#Lambdaイベントペイロード" class="headerlink" title="Lambdaイベントペイロード"></a>Lambdaイベントペイロード</h2><p>Lambda関数の引数となるEventの入力値には2パターン存在します。</p><ul><li><strong>Tokenタイプ</strong>は簡単にTokenとmethodArnのみが取得可能で、Tokenを検証しその(JWTならば)PayloadとmethodArnのパスを対照するなどで認可を制御することが可能になります。</li><li><strong>Requestタイプ</strong>はAPIGatewayのプロキシ統合のリクエストと同じものを引数として受けられます。TokenとmethodArnはもちろん、他のHeaderやQueryString、Bodyなどすべてのリクエストの中身が取得できるため、もう少し自由な認可要件が必要なときに使うこともできます。</li></ul><h2 id="トークンの検証"><a href="#トークンの検証" class="headerlink" title="トークンの検証"></a>トークンの検証</h2><p>Tokenの中身を検証する前に正規表現により簡単にチェックすることができます。一般的にTokenとしてJWTを使う場合は<code>^Bearer [-_0-9a-zA-Z.]+$</code>のように設定します。<br>この正規表現にマッチしない場合、AuthorizerはLambdaまでリクエストを送らず401を返します。</p><h2 id="認可のキャッシュ"><a href="#認可のキャッシュ" class="headerlink" title="認可のキャッシュ"></a>認可のキャッシュ</h2><p>AuthorizerはAPIリクエストが送られるとき毎回必ずTokenを検証するので、その負荷を減らすためにキャッシングも可能です。<br>しかし、この機能には大きな問題があり、キャシングの単位がTokenそのものではなく、Tokenのソースであるヘッダー名(<code>Authorization</code>など)になっています。あるユーザが一度認可したあとならば、他のユーザがそのキャッシュを使い回すことができてしまうため、基本無効にするしかないと思います。</p><h1 id="Lambdaの実装"><a href="#Lambdaの実装" class="headerlink" title="Lambdaの実装"></a>Lambdaの実装</h1><p>Lambda実装の流れは大きく分けて</p><ol><li>まず、Tokenを検証し<strong>認証</strong>する</li><li>検証したTokenのPayloadとアクセスしようとするリソースの情報(methodArnなど)を対照し<strong>認可</strong>する</li></ol><p>の2つの段階になるかと思います。</p><h2 id="入出力"><a href="#入出力" class="headerlink" title="入出力"></a>入出力</h2><p>Goで実装する場合メインハンドラー関数は以下のような形になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handle</span><span class="params">(e events.APIGatewayCustomAuthorizerRequest)</span> <span class="params">(*events.APIGatewayCustomAuthorizerResponse, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Tokenタイプイベントペイロード</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handle</span><span class="params">(e events.APIGatewayCustomAuthorizerRequestTypeRequest)</span> <span class="params">(*events.APIGatewayCustomAuthorizerResponse, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Requestタイプイベントペイロード</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/aws/aws-lambda-go">aws-lambda-go</a>には、すでにCustomAuthorizerのための入出力構造体が用意されているため大変便利です。<br>出力の戻り値としてはAWS IAMのようなAWSPolicyDocumentを使い返します(詳細後述)。</p><h3 id="出力パターン"><a href="#出力パターン" class="headerlink" title="出力パターン"></a>出力パターン</h3><p>Lambda関数の出力(戻り値)により、以下のようにAPIに送られてきたリクエストを制御することができます。</p><div class="scroll"><table><thead><tr><th>出力パターン</th><th>動作</th><th>HTTP Status</th><th>Response Body</th></tr></thead><tbody><tr><td>Policy：Allow</td><td>アクセス許可</td><td>後続のAPIレスポンスによる</td><td>後続のAPIレスポンスによる</td></tr><tr><td>Policy：Deny</td><td>認可失敗</td><td>403 Forbidden</td><td><code>&#123;&quot;message&quot;: &quot;User is not authorized to access this resource with an explicit deny&quot;&#125;</code></td></tr><tr><td>Error：Unauthorized</td><td>認証失敗</td><td>401 Unauthorized</td><td><code>&#123;&quot;message&quot;: &quot;Unauthorized&quot;&#125;</code></td></tr><tr><td>その他のError</td><td>エラー</td><td>500 Internal Server Error</td><td><code>&#123;&quot;message&quot;: &quot;Internal Server Error&quot;&#125;</code></td></tr></tbody></table></div><p><em>特記事項として、エラーを返すにしてもエラーメッセージを<code>Unauthorized</code> (大文字<code>U</code>に注意)にすることにより401を返すことができます。</em></p><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p>認可制御のために前提として、まずは認証が必要になります。一般的にはJWTを検証することになり、JWTのライブラリを使えば簡単ですが、検証のための<strong>公開鍵取得方法</strong>には2パターンがあるかと思われます。</p><h3 id="静的に公開鍵を保持する"><a href="#静的に公開鍵を保持する" class="headerlink" title="静的に公開鍵を保持する"></a>静的に公開鍵を保持する</h3><p>公開鍵をLambdaの環境変数やDynamoDB、S3などを使い静的に保持する方法です。<br>実装は簡単で構造もシンプルですが、鍵のローテションをどうするか考える必要が将来的に出てきます。</p><h3 id="公開鍵を動的に取得する"><a href="#公開鍵を動的に取得する" class="headerlink" title="公開鍵を動的に取得する"></a>公開鍵を動的に取得する</h3><p>認証基盤が公開している公開鍵エンドポイントから鍵を取得する方法です。<br>公開鍵エンドポイントは一般的に認証基盤側が<a href="https://openid-foundation-japan.github.io/rfc7517.ja.html">JSON Web Key(JWK)</a>により定義し、以下のような形で公開しています。</p><ul><li><a href="https://keycloak-documentation.openstandia.jp/master/ja_JP/securing_apps/index.html#_certificate_endpoint">Keycloak証明書エンドポイント</a></li><li><a href="https://auth0.com/docs/tokens/json-web-tokens/json-web-key-sets">Auth0 JSON Web Key Sets</a></li></ul><p>この方法は鍵のローテションを気にせずに済みますが、APIリクエストのたびに認証基盤への外部リクエストが発生するので、遅延・負荷を軽減するための効率的なキャッシング戦略を立てる必要があります。</p><h2 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h2><p>APIリクエストのToken検証が完了し認証ができたら、次はそのユーザーがリクエストしたエンドポイントにアクセス可能かをチェックする認可処理が必要になります。</p><p>認可、アクセスコントロールはJWTのClaimsの値に入っているユーザの属性やロールとAPIエンドポイントのパスなどを対照することにより制御することが可能です。</p><p>ロジックについては認証基盤の設定やそのシステムの固有の考え方などによりRole-BasedAccessControl、Attribute-BasedAccessControlなど、様々なやり方があります。こういったロジックは自由度の高い領域なのでここでは参考程度にKeycloakやAuth0などで想定しているアクセスコントロールについてのリンクだけを貼っておきます。</p><ul><li><a href="https://keycloak-documentation.openstandia.jp/master/ja_JP/authorization_services/">Keycloak Authorization Services Guide</a></li><li><a href="https://auth0.com/docs/authorization">Auth0 Authorization</a></li></ul><h3 id="認可の出力"><a href="#認可の出力" class="headerlink" title="認可の出力"></a>認可の出力</h3><p>認可ロジックによりユーザのアクセス可否が決まったら、Authorizerは以下のようなJSONで認可処理が完了したことをAPIGatewayに返します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;principalId&quot;</span>: <span class="string">&quot;yyyyyyyy&quot;</span>, <span class="comment">// The principal user identification associated with the token sent by the client.</span></span><br><span class="line">  <span class="attr">&quot;policyDocument&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;Action&quot;</span>: <span class="string">&quot;execute-api:Invoke&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow|Deny&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:execute-api:&#123;regionId&#125;:&#123;accountId&#125;:&#123;apiId&#125;/&#123;stage&#125;/&#123;httpVerb&#125;/[&#123;resource&#125;/[&#123;child-resources&#125;]]&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;context&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;stringKey&quot;</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;numberKey&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;booleanKey&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;usageIdentifierKey&quot;</span>: <span class="string">&quot;&#123;api-key&#125;&quot;</span> <span class="comment">// Optional</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Policy-Document"><a href="#Policy-Document" class="headerlink" title="Policy Document"></a>Policy Document</h4><p>IAMのものと同じ形式で、アクセスを許可するか拒否するかを明示的に表現します。</p><p>AuthorizerはAPIGateway上で動くものなので<code>&quot;Action&quot;: &quot;execute-api:Invoke&quot;</code>は固定になります。<br><code>Resource</code>はLambda関数の引数で受けた<code>methodArn</code>をそのまま返すで問題ありません。</p><h4 id="Principal-ID"><a href="#Principal-ID" class="headerlink" title="Principal ID"></a>Principal ID</h4><p>APIリクエストしたユーザが誰なのかを表現します。リクエストしたユーザを一意に識別するための値であり、実際のAPIロジックを決める後続のLambda関数などに渡すことができ、ユーザによるレスポンスの出し分けなどを可能にします。</p><p>一般的にはJWTの<a href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2"><code>sub</code> (Subject) Claim</a>をそのまま使うことになります。</p><h4 id="Authorizer-Context"><a href="#Authorizer-Context" class="headerlink" title="Authorizer Context"></a>Authorizer Context</h4><p>Principal IDと同じように後続のLambda関数などに渡すことができる任意の値です(Principal IDもContextの一部)。APIのレスポンスを出し分けするために必要な任意の情報をKey-Value形式でセットすることが可能です。一見Mapオブジェクトにも見えますが、ValueとしてはNumber・String・BooleanのみでObjectやArrayなどの入れ子構造は使えません。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>Authorizerの実装、最初はわからないことだらけで難しく感じるかもしれませんが、単機能の関数であるため、一度実装してしまったらテンプレートのように様々なAPIに使い回すことも可能かと思います。</p><p>以下は自分が実装の際に一番参考になったサンプルコードのリンクを置いて締めたいと思います。</p><ul><li><a href="https://github.com/awslabs/aws-apigateway-lambda-authorizer-blueprints">Amazon API Gateway - Custom Authorizer Blueprints for AWS Lambda</a></li><li><a href="https://github.com/aws/aws-lambda-go/blob/master/events/README_ApiGatewayCustomAuthorizer.md">AWS Lambda for Go - Authorizer Sample Function</a></li><li><a href="https://auth0.com/docs/quickstart/backend/golang/01-authorization">Auth0 Backend/API Go: Authorization</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIG/DXユニットのLEEです。フューチャーではここ数年、主に認証認可関係の設計や開発などを担当しております。&lt;/p&gt;
&lt;p&gt;今回は流行りの認証プロトコルであるOpenID ConnectとOAuth2.0におけるAuthorizerについて話そうと思います。</summary>
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Vuls開発中に出会ったGORMあれこれ</title>
    <link href="https://future-architect.github.io/articles/20210609a/"/>
    <id>https://future-architect.github.io/articles/20210609a/</id>
    <published>2021-06-08T15:00:00.000Z</published>
    <updated>2021-06-09T03:29:47.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuls開発中に出会ったGORMあれこれ"><a href="#Vuls開発中に出会ったGORMあれこれ" class="headerlink" title="Vuls開発中に出会ったGORMあれこれ"></a>Vuls開発中に出会ったGORMあれこれ</h1><p>はじめまして、中岡(<a href="https://twitter.com/MaineK00n">@MaineK00n</a>)と申します。</p><p>2021年6月の現在はフューチャー発OSSの<a href="https://github.com/future-architect/vuls">Vuls</a>開発をメインに、CSIG<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>でアルバイトをしています。</p><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><ul><li>ORM(Object-relational mapping)を触るときは発行されるクエリが意図したものか確認する</li><li>推測するな、計測せよ</li></ul><h1 id="GORMを触る、Vuls-1202"><a href="#GORMを触る、Vuls-1202" class="headerlink" title="GORMを触る、Vuls#1202"></a>GORMを触る、Vuls#1202</h1><p>本題に入る前に、Vulsのスキャンについて簡単に説明します。</p><p>Vulsでは、以下のようにsqlite3などの形式で保存されたVulnerability DBからCVE情報を集めて、スキャン先の脆弱性を解析しています。</p><p>FYI: Vulsのスキャンアーキテクチャは<a href="https://vuls.io/docs/en/architecture-fast-deep.html">こちら</a>に詳しく書かれています。</p><p><img src="/images/20210609a/vuls-arch.png"></p><p>Reference: <a href="https://github.com/future-architect/vuls">future-architect/vuls</a></p><p>さて，GORMを触るきっかけは、このPR(<a href="https://github.com/future-architect/Vuls/pull/1202">Vuls#1202</a>)です。このPRは、VulsでDebianをスキャンしたとき、CVE情報のベースをOVALからDebian Security Trackerへ変更しようというものです。実装してみると、変更前はスキャン時間の90%ileが3.37sだったのですが、変更後は11.15sまで増加してしまいました。</p><p>原因を調査すると、Vulsと連携してDebian Security Trackerの情報を取り扱うgost(<a href="https://github.com/knqyf263/gost">knqyf263/gost</a>)にあることが分かりました。詳しくは、追加された機能(<a href="https://github.com/knqyf263/gost/pull/47">gost#47</a>)によってDBに保存したDebianに関するCVE情報を取得する部分が増加したことでした。</p><p>パフォーマンスを改善しなければ、この機能は導入できないということになりました。そのため、EXPLAINしてINDEXを確認したりなどをして、解決策を色々探していました</p><p>その中で、2020年8月にGORM 2.0がリリースされていることを思い出しました。Release Noteによると、GORM v2はフルスクラッチされており、パフォーマンスが改善されているそうなのです。</p><p>まず、私はGORM v2をサポートして、どれくらい改善するかを検証することにしました(<a href="https://github.com/knqyf263/gost/pull/60">gost#60</a>)。</p><h2 id="期待のGORM-v2、そのパフォーマンス"><a href="#期待のGORM-v2、そのパフォーマンス" class="headerlink" title="期待のGORM v2、そのパフォーマンス"></a>期待のGORM v2、そのパフォーマンス</h2><p>GORMをv1からv2にしたところ、発行されるクエリは大きく変わっていませんでした。<br>それでは、簡易なパフォーマンス測定をやってみることにします。</p><h3 id="検証-Package-expat"><a href="#検証-Package-expat" class="headerlink" title="検証(Package: expat)"></a>検証(Package: expat)</h3><p>Debian busterのPackage: expatに関するunfixed/fixedなCVE情報を検索することを100回繰り返して、レスポンスにかかる時間の90%ileを取ってみました。</p><ul><li>unfixed cves</li></ul><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">発行クエリ数</th><th align="center">90%ile</th></tr></thead><tbody><tr><td align="center">GORM v1</td><td align="center">4</td><td align="center">0.006682</td></tr><tr><td align="center">GORM v2</td><td align="center">4</td><td align="center">0.010948</td></tr></tbody></table></div><ul><li>fixed cves</li></ul><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">発行クエリ数</th><th align="center">90%ile</th></tr></thead><tbody><tr><td align="center">GORM v1</td><td align="center">46</td><td align="center">0.023047</td></tr><tr><td align="center">GORM v2</td><td align="center">46</td><td align="center">0.015868</td></tr></tbody></table></div><h3 id="検証-Package-linux"><a href="#検証-Package-linux" class="headerlink" title="検証(Package: linux)"></a>検証(Package: linux)</h3><p>もしかして発行されるクエリ数が少なすぎるかなと思って、Package: linuxに関するunfixed/fixedなCVE情報でも検証してみました。</p><p>すると、この場合はGORM v2にすることによるはっきりとしたパフォーマンスの向上が確認できました。</p><ul><li>unfixed cves</li></ul><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">発行クエリ数</th><th align="center">90%ile</th></tr></thead><tbody><tr><td align="center">GORM v1</td><td align="center">298</td><td align="center">0.035935</td></tr><tr><td align="center">GORM v2</td><td align="center">307</td><td align="center">0.027996</td></tr></tbody></table></div><ul><li>fixed cves</li></ul><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">発行クエリ数</th><th align="center">90%ile</th></tr></thead><tbody><tr><td align="center">GORM v1</td><td align="center">4930</td><td align="center">0.43754</td></tr><tr><td align="center">GORM v2</td><td align="center">4945</td><td align="center">0.298629</td></tr></tbody></table></div><p>ちなみに、GORM v2をサポートした状態でのVulsによるスキャン時間は11.5sから9.17sになりました。<br>まだまだ高速化が必要です😢</p><h2 id="さらなる高速化に向けて"><a href="#さらなる高速化に向けて" class="headerlink" title="さらなる高速化に向けて"></a>さらなる高速化に向けて</h2><p>発行されるクエリのうち、ボトルネックになっていたのはJOIN句が入ったこのクエリです。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    debian_cve_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`debian_releases`</span></span><br><span class="line">    <span class="keyword">join</span></span><br><span class="line">        debian_packages</span><br><span class="line">    <span class="keyword">on</span>  debian_releases.debian_package_id = debian_packages.id</span><br><span class="line">    <span class="keyword">AND</span> debian_packages.package_name = <span class="string">&quot;expat&quot;</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="string">`debian_releases`</span>.<span class="string">`product_name`</span> = <span class="string">&quot;buster&quot;</span></span><br><span class="line"><span class="keyword">AND</span> <span class="string">`debian_releases`</span>.<span class="string">`status`</span> = <span class="string">&quot;open&quot;</span>;</span><br></pre></td></tr></table></figure><p>JOIN句を使わずに同様の検索が出来ないかを考え、クエリをチューニングしました(<a href="https://github.com/knqyf263/gost/pull/61">gost#61</a>)。<br>クエリチューニング版では、以下のように、JOIN句をやめ、シンプルに<code>debian_packages</code>から<code>debian_cve_id</code> を求め、軽いクエリを多く実行することにしました。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    debian_cve_id</span><br><span class="line"><span class="deletion">- FROM</span></span><br><span class="line"><span class="deletion">-     `debian_releases`</span></span><br><span class="line"><span class="deletion">-     join</span></span><br><span class="line"><span class="deletion">-         debian_packages</span></span><br><span class="line"><span class="deletion">-     on  debian_releases.debian_package_id = debian_packages.id</span></span><br><span class="line"><span class="deletion">-     AND debian_packages.package_name = &quot;expat&quot;</span></span><br><span class="line"><span class="deletion">- WHERE</span></span><br><span class="line"><span class="deletion">-     `debian_releases`.`product_name` = &quot;buster&quot;</span></span><br><span class="line"><span class="deletion">- AND `debian_releases`.`status` = &quot;open&quot;;</span></span><br><span class="line"><span class="addition">+ FROM</span></span><br><span class="line"><span class="addition">+     `debian_packages`</span></span><br><span class="line"><span class="addition">+ WHERE</span></span><br><span class="line"><span class="addition">+     package_name = &quot;expat&quot;;</span></span><br></pre></td></tr></table></figure><h3 id="検証-クエリチューニング"><a href="#検証-クエリチューニング" class="headerlink" title="検証(クエリチューニング)"></a>検証(クエリチューニング)</h3><p>先程と同様に、Debian busterにあるPackage: expat、linuxに関するunfixed/fixedなCVE情報を検索することを100回繰り返して、レスポンスにかかる時間の90%ileでクエリチューニングの効果を評価したいと思います。</p><ul><li>expat unfixes cves</li></ul><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">発行クエリ数</th><th align="center">90%ile</th></tr></thead><tbody><tr><td align="center">GORM v1</td><td align="center">4</td><td align="center">0.006682</td></tr><tr><td align="center">GORM v2</td><td align="center">4</td><td align="center">0.010948</td></tr><tr><td align="center">GORM v2 + query tuning</td><td align="center">49</td><td align="center">0.003467</td></tr></tbody></table></div><ul><li>expat fixes cves</li></ul><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">発行クエリ数</th><th align="center">90%ile</th></tr></thead><tbody><tr><td align="center">GORM v1</td><td align="center">46</td><td align="center">0.023047</td></tr><tr><td align="center">GORM v2</td><td align="center">46</td><td align="center">0.015868</td></tr><tr><td align="center">GORM v2 + query tuning</td><td align="center">49</td><td align="center">0.003759</td></tr></tbody></table></div><ul><li>linux unfixes cves</li></ul><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">発行クエリ数</th><th align="center">90%ile</th></tr></thead><tbody><tr><td align="center">GORM v1</td><td align="center">298</td><td align="center">0.035935</td></tr><tr><td align="center">GORM v2</td><td align="center">307</td><td align="center">0.027996</td></tr><tr><td align="center">GORM v2 + query tuning</td><td align="center">5287</td><td align="center">0.267383</td></tr></tbody></table></div><ul><li>linux fixes cves</li></ul><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">発行クエリ数</th><th align="center">90%ile</th></tr></thead><tbody><tr><td align="center">GORM v1</td><td align="center">4930</td><td align="center">0.43754</td></tr><tr><td align="center">GORM v2</td><td align="center">4945</td><td align="center">0.298629</td></tr><tr><td align="center">GORM v2 + query tuning</td><td align="center">5287</td><td align="center">0.280019</td></tr></tbody></table></div><p>結果としては、クエリチューニングをすることで、発行されるクエリ数は増えていますが、linux unfixed cvesの場合以外、高速化できているように見えます。</p><p>執筆時(2021/05/27)では、gostにおいて、CVE情報を検索可能なDebianのパッケージは3059件あり、それらのパッケージに対してfixed/unfixesなCVE情報を検索したとき、発行されるクエリ数はどのように分布するのかを調べてみました。<br>すると、ほとんどの検索の場合、0-499個のクエリしか発行しないことが分かりました。<br>つまり、linux unfixes cvesの場合のように、<code>GORM v2 + query tuning</code>のクエリ数だけがとても増加して、検索にかかる時間が大きくなる事象によるロスより、それ以外の場合による高速化が大きく現れやすいということです。</p><p><img src="/images/20210609a/query_count.png"></p><p>これが、Vulsのスキャン時間にどれくらいの影響を与えるかを、スキャン時間の90%ileで見てみます。<br>スキャン先のDebianにはパッケージが218個インストールされています。<br>参考に、追加機能が導入されてないVuls v0.15.10も追加しました。<br>結果より、GORM v1, GORM v2の時点では、機能を導入に対するトレードオフとしては見合わなかったのですが、クエリチューニングをすることによって、追加機能がないものより高速にスキャンできるようになりました🎉</p><div class="scroll"><table><thead><tr><th align="center">baseline(Vuls v0.15.10)</th><th align="center">GORM v1</th><th align="center">GORM v2</th><th align="center">GORM v2 + query tuning</th></tr></thead><tbody><tr><td align="center">3.37</td><td align="center">11.5</td><td align="center">9.17</td><td align="center">2.49</td></tr></tbody></table></div><h1 id="Gost、Ubuntuサポートをする"><a href="#Gost、Ubuntuサポートをする" class="headerlink" title="Gost、Ubuntuサポートをする"></a>Gost、Ubuntuサポートをする</h1><p>gostはUbuntuをサポートしていなかったので(TODOにはあった)、ついでと思ってUbuntuのサポートをしました(<a href="https://github.com/knqyf263/gost/pull/62">gost#62</a>)。</p><p>これをもとにして、VulsでUbuntuをスキャンするときにgostからのCVE情報が追加される予定です(<a href="https://github.com/future-architect/Vuls/pull/1243">Vuls#1243</a>)。</p><p>執筆時点（2021/05/27）では、gostでGORM v2をサポートするPRはまだMergeされてませんので、最初はDebianでのクエリチューニングを基にして、GORM v1で対応しました。gostの対応はサクッと終わったので、続いてVulsとの連携を実装しました。</p><p>さて、Vulsとの連携も実装できたので、Vulsのスキャン先を用意します。スキャン先として用意したUbuntu環境にインストールされているパッケージは2662個です。</p><p>この環境に対してVulsでスキャンをすると、スキャン時間が5m38sと遅い……(機能導入前であれば2sぐらい)</p><p>そこで、他のPRでGORM v2をサポートするので、Ubuntuサポート版もGORM v2に対応しました。</p><p>さて、GORM v2にしたときのVulsのスキャン速度は……？</p><p><strong>7s</strong></p><p>約48倍も速くなりました！！！一応、実際に発行されるクエリを見てみましたが、発行されるクエリに差分は、ほぼありませんでした。</p><p>約48倍も速くなった要因は、スキャン先にインストールされているパッケージ数がDebianの場合よりも多く、GORM v2にアップデートすることによるパフォーマンスの向上が顕著に現れたと考えています。</p><h2 id="GORM-v1とGORM-v2におけるPreloadの挙動"><a href="#GORM-v1とGORM-v2におけるPreloadの挙動" class="headerlink" title="GORM v1とGORM v2におけるPreloadの挙動"></a>GORM v1とGORM v2におけるPreloadの挙動</h2><p>さて、GORM v1で実装していて、テストをしていると、Debianの場合はRDBとRedisでレスポンスを比較して、差分は出ないのですが、UbuntuではあるパッケージにGETリクエストを投げたときのレスポンスがRDBとRedisで異なることに気が付きました。</p><p>とりあえず、Preloadの順番を変更すると、レスポンスが正しく返ってきました。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    err := r.conn.</span><br><span class="line"><span class="deletion">-           Preload(&quot;Patches.ReleasePatches&quot;, &quot;release_name = ? AND status IN (?)&quot;, codeName, fixStatus).</span></span><br><span class="line">        Preload(&quot;Patches&quot;, &quot;package_name = ?&quot;, pkgName).</span><br><span class="line"><span class="addition">+        Preload(&quot;Patches.ReleasePatches&quot;, &quot;release_name = ? AND status IN (?)&quot;, codeName, fixStatus).</span></span><br><span class="line">        Where(&amp;models.UbuntuCVE&#123;ID: res.UbuntuCveID&#125;).</span><br><span class="line">        First(&amp;cve).Error</span><br></pre></td></tr></table></figure><p>そして、GORM v2にアップデートした後、GORM v1のときに変更したPreloadの順番ってGORM v2でも同様の挙動をするのかが気になりました🤔</p><p>Preloadを調整したcommitをrevertして、レスポンスをチェックすると、アレレ？ちゃんと正しいレスポンスが返ってきていました……</p><p>しかし、どうして正しいレスポンスが返ってくるようになったのでしょうか。</p><p>私、気になります！</p><p>そこで、Preload調整前のGORM v1とPreload調整後のGORM v1、Preload調整後のGORM v2、Preload調整をrevertしたGORM v2の4つが発行するクエリの一部を比較しました。</p><p>結果としては、今回の場合、GORM v1においては、Preloadの順を変更すると、<code>WHERE IN</code>に影響を及ぼすようです。GORM v2になると、Preloadの順番に左右されない挙動をしていました。</p><ul><li>GORM v1, Preload調整前</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="string">&quot;ubuntu_release_patches&quot;</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    (<span class="string">&quot;ubuntu_patch_id&quot;</span> <span class="keyword">IN</span>(<span class="number">133652</span>, <span class="number">133653</span>)) <span class="comment">-- Preloadの順番がここに影響する</span></span><br><span class="line"><span class="keyword">AND</span> (</span><br><span class="line">        release_name = <span class="string">&#x27;focal&#x27;</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">status</span> <span class="keyword">IN</span>(<span class="string">&#x27;needed&#x27;</span>, <span class="string">&#x27;pending&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    <span class="string">&quot;ubuntu_release_patches&quot;</span>.<span class="string">&quot;id&quot;</span> <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><ul><li>GORM v1, Preload調整後</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="string">&quot;ubuntu_release_patches&quot;</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    (<span class="string">&quot;ubuntu_patch_id&quot;</span> <span class="keyword">IN</span>(<span class="number">133653</span>))</span><br><span class="line"><span class="keyword">AND</span> (</span><br><span class="line">        release_name = <span class="string">&#x27;focal&#x27;</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">status</span> <span class="keyword">IN</span>(<span class="string">&#x27;needed&#x27;</span>, <span class="string">&#x27;pending&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    <span class="string">&quot;ubuntu_release_patches&quot;</span>.<span class="string">&quot;id&quot;</span> <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><ul><li>GORM v2, Preload調整後</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`ubuntu_release_patches`</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="string">`ubuntu_release_patches`</span>.<span class="string">`ubuntu_patch_id`</span> = <span class="number">133653</span></span><br><span class="line"><span class="keyword">AND</span> (</span><br><span class="line">        release_name = <span class="string">&quot;focal&quot;</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">status</span> <span class="keyword">IN</span>(<span class="string">&quot;needed&quot;</span>, <span class="string">&quot;pending&quot;</span>)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><ul><li>GORM v2, revert Preload調整</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`ubuntu_release_patches`</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="string">`ubuntu_release_patches`</span>.<span class="string">`ubuntu_patch_id`</span> = <span class="number">133653</span></span><br><span class="line"><span class="keyword">AND</span> (</span><br><span class="line">        release_name = <span class="string">&quot;focal&quot;</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">status</span> <span class="keyword">IN</span>(<span class="string">&quot;needed&quot;</span>, <span class="string">&quot;pending&quot;</span>)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>自戒の念を込めて。</p><p>ORMを使うのはいいですが、ちゃんと意図したクエリ、レスポンスになっているかはちゃんと確認したほうが良いです。</p><p>そして、パフォーマンスの改善をするときは、ちゃんとボトルネックを色々な角度から測定して、トータルで改善することを確認してから実行すると良いでしょう。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">CSIG(CyberSecurityInnovationGroup)は、セキュリティ関連のコンサルティングや実装などを行っています</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vuls開発中に出会ったGORMあれこれ&quot;&gt;&lt;a href=&quot;#Vuls開発中に出会ったGORMあれこれ&quot; class=&quot;headerlink&quot; title=&quot;Vuls開発中に出会ったGORMあれこれ&quot;&gt;&lt;/a&gt;Vuls開発中に出会ったGORMあれこれ&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Vuls" scheme="https://future-architect.github.io/tags/Vuls/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night #9「オンコール通知も全自動で! AWS + Datadog + PagerDuty で作る運用監視基盤」</title>
    <link href="https://future-architect.github.io/articles/20210608a/"/>
    <id>https://future-architect.github.io/articles/20210608a/</id>
    <published>2021-06-07T15:00:00.000Z</published>
    <updated>2021-06-08T01:16:35.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの木村です。先日2021/4/21(水)に <a href="https://future.connpass.com/event/209778/">Future Tech Night #9 ～運用で後悔しないためのAWS設計術～</a> を開催しました。</p><p>私は <strong>「オンコール通知も全自動で! AWS + Datadog + PagerDuty で作る運用監視基盤」</strong> というテーマでお話しました。</p><p>同イベントにて発表された村瀬さんの <a href="/articles/20210527a/">レポートはこちら</a> になります。</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>監視 に関連するOSSやSaaSが乱立する昨今、Futureではとある案件で DatadogとPagerDutyをフル活用した運用監視基盤を一から構築しました。運用監視基盤に求められた要件とその設計、システム(AWS)からDatadog/PagerDutyへの具体的な連携アーキテクチャ、運用してみての嬉しみ/辛み等を惜しみなくお話しました。</p><p>その中から発表内容を一部抜粋して紹介いたします。</p><h2 id="監視基盤要件と設計"><a href="#監視基盤要件と設計" class="headerlink" title="監視基盤要件と設計"></a>監視基盤要件と設計</h2><img src="/images/20210608a/image.png" alt="運用監視基盤要件" width="1200" height="402" loading="lazy"><img src="/images/20210608a/image_2.png" alt="Why Datadog" width="1200" height="565" loading="lazy"><img src="/images/20210608a/image_3.png" alt="Why PagerDurty" width="1200" height="586" loading="lazy"><h2 id="システム構成"><a href="#システム構成" class="headerlink" title="システム構成"></a>システム構成</h2><img src="/images/20210608a/image_4.png" alt="Metrics -> Datadog" width="1200" height="639" loading="lazy"><img src="/images/20210608a/image_5.png" alt="Log -> Datadog" width="1200" height="477" loading="lazy"><img src="/images/20210608a/image_6.png" alt="Datadog -> 通知先サービス" width="1200" height="491" loading="lazy"><h2 id="ここが素敵-辛い-Datadog-PagerDuty"><a href="#ここが素敵-辛い-Datadog-PagerDuty" class="headerlink" title="ここが素敵/辛い Datadog/PagerDuty"></a>ここが素敵/辛い Datadog/PagerDuty</h2><img src="/images/20210608a/image_7.png" alt="Datadog" width="1200" height="492" loading="lazy"><img src="/images/20210608a/image_8.png" alt="PagerDuty" width="120" height="285" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ご参加いただいた方々、ありがとうございました。</p><p>本編ではもう少しDatadog, PagerDutyでできること/できないことを厚めに紹介できればよかったかな、と反省はありますが、少しでもお役に立てたなら幸いです。</p><p>FutureではFuture Tech Nightの他にも様々なイベントを開催しております。今後も皆様のご参加をお待ちしております。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの木村です。先日2021/4/21(水)に &lt;a href=&quot;https://future.connpas</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="保守運用" scheme="https://future-architect.github.io/tags/%E4%BF%9D%E5%AE%88%E9%81%8B%E7%94%A8/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
  <entry>
    <title>AWS Certified Solutions Architect - Professional合格体験記</title>
    <link href="https://future-architect.github.io/articles/20210607a/"/>
    <id>https://future-architect.github.io/articles/20210607a/</id>
    <published>2021-06-06T15:00:00.000Z</published>
    <updated>2021-06-07T01:33:48.633Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>先日AWS Certified Solutions Architect - Professionalを受験し合格できました。</p><p>合格までの学習方法を共有します。</p><img src="/images/20210607a/image.png" alt="aws certified solutions architect icon" width="600" height="600"><h1 id="AWS-Certified-Solutions-Architect-Professionalとは"><a href="#AWS-Certified-Solutions-Architect-Professionalとは" class="headerlink" title="AWS Certified Solutions Architect - Professionalとは"></a>AWS Certified Solutions Architect - Professionalとは</h1><p>AWSには資格試験が11種類存在します(AWS 認定 Alexa スキルビルダー – 専門知識が2021年3月をもって終了したため11種類になりました)</p><p>その中でもシステムのアーキテクチャ選定、ベストプラクティスの設計に関わる試験がソリューションアーキテクトです。</p><p>ソリューションアーキテクトにはアソシエイト資格とプロフェッショナル資格があり、プロフェッショナルは上位の資格にあたります。</p><p>公式ページは<a href="https://aws.amazon.com/jp/certification/certified-solutions-architect-professional/">こちら</a>です。</p><p>上位資格だけあって、問題文の意味を理解する事すら苦労するようなレベルの問題が多く集まっています。</p><h1 id="合格までの道筋"><a href="#合格までの道筋" class="headerlink" title="合格までの道筋"></a>合格までの道筋</h1><p><a href="https://d1.awsstatic.com/ja_JP/training-and-certification/docs-sa-pro/AWS-Certified-Solutions-Architect-Professional_Exam-Guide.pdf">試験ガイド</a>に従いホワイトペーパーを読み進めていくのが正攻法ですが、私は有料コンテンツをひたすら購入して消化していく方針で勉強しました。</p><p>残念ながら試験には一度落ちてしまいました、心が折れかけましたが、どうにか信用できる教材を捜索し、再チャレンジする自信を取り戻すことができました。</p><p>以降はコンテンツのレビューになります。</p><h1 id="書籍AWS認定ソリューションアーキテクト‐プロフェッショナル"><a href="#書籍AWS認定ソリューションアーキテクト‐プロフェッショナル" class="headerlink" title="書籍AWS認定ソリューションアーキテクト‐プロフェッショナル"></a>書籍AWS認定ソリューションアーキテクト‐プロフェッショナル</h1><p>リックテレコムから<a href="https://books.google.co.jp/books/about/AWS%E8%AA%8D%E5%AE%9A%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD.html?id=gqOWzQEACAAJ&source=kp_book_description&redir_esc=y">書籍</a>が出ています。</p><p>プロフェッショナル資格では執筆時点での唯一の書籍での教材です。</p><p>教材の内容は、2020年発売で最新の情報もしっかりカバーされています。本の内容は素晴らしいものでした。</p><p>しかし、試験の難易度が圧倒的に高く、また出題範囲が広いため、後述のUdemyの教材と巻末の問題集だけを丸暗記して臨んだ結果落ちてしまいました。</p><p>今思えば各章の内容を隅々まで丸暗記すればこれ一冊で合格できたかもしれません。</p><h1 id="Udemy教材"><a href="#Udemy教材" class="headerlink" title="Udemy教材"></a>Udemy教材</h1><p>資格試験の問題集を学習サイトのUdemyで購入することが可能です。</p><p><a href="https://www.udemy.com/course/aws-solutions-architect-professional-practice-exams-amazon/">こちらの問題集</a>が最も高評価です。</p><p>英語版ですがブラウザで翻訳しながら利用すれば英語が読めない方でも概ね差し支えなく利用できます。</p><p>こちらも問題の質は決して悪くないのですが、全てを90%以上解けるようになるまで覚えても落ちました。</p><p>問題の難易度が高いため、大まかなキーワードだけ丸暗記するようなレベル感では合格できません。</p><p>細かい言い回しが変わっても根拠をもって正解を選べるようしっかりインプットすることが重要です。</p><h1 id="学習サイト-aws-koiwaclub-com"><a href="#学習サイト-aws-koiwaclub-com" class="headerlink" title="学習サイト aws.koiwaclub.com"></a>学習サイト aws.koiwaclub.com</h1><p><a href="https://aws.koiwaclub.com/">AWS WEB問題集で学習しよう</a>というタイトルのページです。</p><p>前述の通り試験に落ちた私は藁にも縋る思いでこのサイトの有料会員になりました。</p><p>問題のコンテンツはとても質の高いものでした、7問ずつ繰り返して覚えていくスタイルの勉強法で覚えていく形になります。</p><p>最終的に正答率がユーザーランキング30位くらいになるまで繰り返しました。</p><p>元々750点のボーダーラインに対し680点までは取れていたのですが、詰めの甘い部分をこのサイトで補う事で合格できました。最終的なスコアは840点でした。</p><h1 id="3つの教材比較"><a href="#3つの教材比較" class="headerlink" title="3つの教材比較"></a>3つの教材比較</h1><p>いずれの教材も質が高く、とにかく圧倒的な試験の難易度に敗北する印象でした。</p><p>3つの教材にそれぞれほぼ完全に一致している問題がいくつか載っていて、そのまま本番に出る程度には信頼できる品質です。</p><p>本当に100%頭に詰めることができればいずれか一つのコンテンツで合格することができると思います。</p><p>合格した今振り返ると書籍とaws.koiwaclub.comだけで良かったかなと感じています。</p><h1 id="今なら落ちても安心"><a href="#今なら落ちても安心" class="headerlink" title="今なら落ちても安心"></a>今なら落ちても安心</h1><p>2021年5月1日から2021年7月31日まで、オンラインでの受験で、一回落ちても無料で再受験できるキャンペーンが実施されています。</p><p>詳しくは<a href="https://pages.awscloud.com/Global_TrainCert_Japan_Online_Proctoringja.html">公式ページ</a>をご確認ください。</p><p>まず本を買って受験してみて、落ちたらaws.koiwaclub.comに登録してリベンジするといった流れで安心して受験できます。この機会にぜひチャレンジしてみてはいかがでしょうか。</p><p>なおオンライン受験では不正対策のため、カメラで部屋の様子を一通り試験監督の方に確認していただく必要があります、動かしやすい外付けのWebカメラがある状態での受験をお勧めします。</p><p>あと部屋を綺麗にしてから受験しましょう(自戒)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;先日AWS Certified Solutions Architect - Professionalを受験し合格できました。&lt;/p&gt;
&lt;p&gt;合格までの学習方法を共有します。&lt;/p&gt;
&lt;img src=&quot;/images/20210607a</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>続・サーバーレス検索エンジン：巨大な静的ファイルを扱うケースについて考える</title>
    <link href="https://future-architect.github.io/articles/20210604a/"/>
    <id>https://future-architect.github.io/articles/20210604a/</id>
    <published>2021-06-03T15:00:00.000Z</published>
    <updated>2021-06-04T05:08:13.450Z</updated>
    
    <content type="html"><![CDATA[<p>TIGのDXユニットの渋川です。<a href="https://future-architect.github.io/articles/20210531a/">Serverless連載2021</a>の最後の記事になります。sam周りとかLambdaの挙動については<a href="https://twitter.com/r_rudi">@r_rudi</a>さんに色々教えていただきました。ありがとうございます。</p><p>巨大な学習済みの機械学習モデルとか、検索用インデックスをデプロイする場合に、どうやってデプロイするか、というのは色々選択肢があります。以前、ちょびっとだけ「どうやってデプロイしましょうかね」というのを悩んだ時期があったのですが、今回、こんな方式が考えられるんじゃないか、というのを改めて調べてリストアップしてみました。</p><p>それぞれの容量は2021年6月現在の数値ですので、最新情報は各々リンク先を確認してみてください。AzureとかAlibaba Cloudとかは仕事柄扱うチャンスが今のところないので調べてないですが、もし調べた方はぜひ教えてください。</p><div class="scroll"><table><thead><tr><th align="center">クラウドベンダー</th><th align="center">サーバーレス方式</th><th align="center">ストレージ</th><th align="center">容量</th><th align="center">バンドル</th><th align="center">ファイルアクセス</th><th align="center">その他</th></tr></thead><tbody><tr><td align="center">GCP</td><td align="center">Cloud Run</td><td align="center">コンテナイメージにバンドル</td><td align="center">5TB(<a href="https://cloud.google.com/storage/quotas">Cloud Storage</a>に準ずる)</td><td align="center">YES</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">GCP</td><td align="center">GKE Knative</td><td align="center">Cloud Storage</td><td align="center">5TB(<a href="https://cloud.google.com/storage/quotas">Cloud Storage</a>参照)</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">GCP</td><td align="center">GKE Knative</td><td align="center">Persistent Volume</td><td align="center">16TB-60TB(<a href="https://cloud.google.com/filestore/docs/limits">File Store</a>), 16TB(<a href="https://cloud.google.com/architecture/partners/netapp-cloud-volumes/resource-limits-quotas">Cloud Volumes</a>)</td><td align="center"></td><td align="center">YES</td><td align="center">Auto Pilotでは使えず</td></tr><tr><td align="center">AWS</td><td align="center">Lambda</td><td align="center">標準ランタイム(レイヤー)</td><td align="center">展開後250MB</td><td align="center">YES(レイヤーは後付け可)</td><td align="center"></td><td align="center">専用実装が必要</td></tr><tr><td align="center">AWS</td><td align="center">Lambda</td><td align="center">コンテナイメージにバンドル</td><td align="center">10GB</td><td align="center">YES</td><td align="center"></td><td align="center">専用実装が必要</td></tr><tr><td align="center">AWS</td><td align="center">Lambda</td><td align="center">EFS</td><td align="center">48TB(<a href="https://docs.aws.amazon.com/ja_jp/efs/latest/ug/limits.html">EFS</a>)</td><td align="center"></td><td align="center">YES</td><td align="center"></td></tr><tr><td align="center">AWS</td><td align="center">App Runner</td><td align="center">コンテナ</td><td align="center"><a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">ECR</a>次第？</td><td align="center"></td><td align="center"></td><td align="center">実行時間制限など情報なし</td></tr><tr><td align="center">AWS</td><td align="center">Lambda/App Runner</td><td align="center">S3</td><td align="center"><a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#limits_s3">5TB</a></td><td align="center"></td><td align="center"></td><td align="center">5GB以上は分割アップロードでめんどい</td></tr></tbody></table></div><p>大きくは外部ストレージサービス利用と、アプリケーションにバンドルしてしまう方式と2つにわかれます。バンドルはデータだけ更新ができないデメリットはありますが、お手軽です。Lambdaはレイヤーを使えば実行プログラムに対して後から追加とかできますが、容量制限が厳しめです。</p><p>オブジェクトストレージは比較的お手軽ですが、読み込みしたいライブラリがローカルのファイルシステム前提の場合は使えません。サーバーレスの方式によっては、一度ローカルのファイルシステムに書き出してから利用とかも可能ではありますが、Cloud Runでは8GB（ただし、おそらくtmpfsで書けば書くほどメモリを消費)、Lambdaでは500MBと容量に制限があります。</p><p>より巨大な学習済みデータを扱う場合はマネージドNFSサービス系のものを使うのが最終形でしょう。ファイルのサイズ制限もほぼ限界値ですし、ローカルファイルになるのでどんなランタイムでもファイルが利用できます。Cloud Run大好きなのでGKEのKnative + Persistent Volumeを試そうかと思ったのですが、期待の簡易起動のAutopilotではCloud Run相当（Knative)が使えず、いろいろ面倒そう。がんばって試しても良かったのですが、こんな面倒なのはそのうち簡略化されると期待して、強い意志を持ってスルーすることにしました。Dockerのボリュームなみに簡単になって欲しい。</p><p>とりあえず手元のケースでは10GBを超えるようなものはいまのところなかったので、　Lambdaコンテナの10GB制限で十分そうです。ということで、本エントリーではお手軽なLambdaのコンテナランタイムを試してみようと思います。</p><h1 id="Lambda-コンテナ"><a href="#Lambda-コンテナ" class="headerlink" title="Lambda + コンテナ"></a>Lambda + コンテナ</h1><p>2020/12/1にLambdaがコンテナをサポートしました。今までは特定の言語ランタイムのみが便利に利用可能（いちおうカスタムランタイムもできる)でした。Lambdaのコンテナも特定のベースイメージもしくはランタイムをインストールしたイメージを作って利用なので、自由度という点では今までとそこまで変わるわけではありませんが、10GBまで可能になればできることは大きく増えます。楽しみですね。</p><div class="scroll"><table><thead><tr><th align="center">言語</th><th align="center">イメージ</th></tr></thead><tbody><tr><td align="center">Node.js</td><td align="center"><a href="https://gallery.ecr.aws/lambda/nodejs">ECR</a>, <a href="https://hub.docker.com/r/amazon/aws-lambda-nodejs">DockerHub</a></td></tr><tr><td align="center">Python</td><td align="center"><a href="https://gallery.ecr.aws/lambda/python">ECR</a>, <a href="https://hub.docker.com/r/amazon/aws-lambda-python">DockerHub</a></td></tr><tr><td align="center">Java</td><td align="center"><a href="https://gallery.ecr.aws/lambda/java">ECR</a>, <a href="https://hub.docker.com/r/amazon/aws-lambda-java">DockerHub</a></td></tr><tr><td align="center">Go</td><td align="center"><a href="https://gallery.ecr.aws/lambda/go">ECR</a>, <a href="https://hub.docker.com/r/amazon/aws-lambda-go">DockerHub</a></td></tr><tr><td align="center">.Net</td><td align="center"><a href="https://gallery.ecr.aws/lambda/dotnet">ECR</a>, <a href="https://hub.docker.com/r/amazon/aws-lambda-dotnet">DockerHub</a></td></tr><tr><td align="center">Ruby</td><td align="center"><a href="https://gallery.ecr.aws/lambda/ruby">ECR</a>, <a href="https://hub.docker.com/r/amazon/aws-lambda-ruby">DockerHub</a></td></tr></tbody></table></div><p>コンテナになったとはいえ、コードはLambdaの流儀で作る必要があります。GCP Cloud RunやAWS AppRunnerのようにポータブルなどこでも動かせるウェブアプリケーションを実装するのを期待する人がいるかもしれませんが（僕です！）、残念ながらそうではなく、Lambda用のハンドラを定義してあげる必要があります。こんな形です。詳しくは当ブログの<a href="https://future-architect.github.io/articles/20200326/#Lambda%E3%81%AE%E9%96%A2%E6%95%B0%E3%82%BF%E3%82%A4%E3%83%97">Serverless連載2: AWS Lambda×Goの開発TipsのLambdaの関数タイプ</a>を参照ください。</p><p>ミニマムなのはこんな形です。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/events&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(request events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line">log.Println(request.Path, request.PathParameters, request.Headers, request.HTTPMethod)</span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;Body: <span class="string">`&#123;&quot;hello&quot;: &quot;world&quot;&#125;`</span>, StatusCode: <span class="number">200</span>&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(Handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをDockerfileでビルドします。マルチステージビルドしています。あんまり明示的に書くことはないかもですが、M1 Macでビルドすることを考えてGOARCH=amd64を明示しています。最終的なpublic.ecr.aws/lambda/goはlinux/amd64しかないのですが、マルチステージビルドのGoイメージは複数アーキテクチャ対応なのでamd64バイナリができるようにしなければなりません。新しく入ったBuildKitの機能である<a href="https://docs.docker.com/buildx/working-with-buildx/">buildx</a>を利用して、docker buildx –platform=linux/amd64でビルドしてもいいのですが、buildxでamd64にするよりも、↓を使った方がちょっと大きいアプリケーションで10倍ぐらい高速（200秒超と20秒)だったので、こちらの方が良いでしょう。</p><p>あとは、最終的なアプリケーションを<code>LAMBDA_TASK_ROOT</code>という環境変数の場所に置くのがポイントですね。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.16</span>-buster as builder</span><br><span class="line"><span class="keyword">ENV</span> GOPATH=</span><br><span class="line"><span class="keyword">ENV</span> CGO_ENABLED=<span class="number">0</span></span><br><span class="line"><span class="keyword">ENV</span> GOOS=linux</span><br><span class="line"><span class="keyword">ENV</span> GOARCH=amd64</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /work</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> go.mod go.sum ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod download</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -trimpath -o main</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> public.ecr.aws/lambda/go</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /work/main <span class="variable">$&#123;LAMBDA_TASK_ROOT&#125;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;main&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XGET http://localhost:9000</span><br></pre></td></tr></table></figure><p>このDockerイメージはLambda専用なので、いくつか決まり事があります。</p><p>Lambda用のエージェントがイメージのエントリーポイントにいて、そいつが8080ポートで動作していますので、次のようにポートをマッピングして起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t lambda-test .</span><br><span class="line">$ docker run -p 9000:8080 --rm -it lambda-test</span><br></pre></td></tr></table></figure><p>起動すると、<code>/2015-03-31/functions/function/invocations</code>というパスにトリガーとなるエンドポイントが用意されます。2015年3月31日ってなんやねん、と思われるかもしれませんが、このパス決めうちなので仕方がないのです。追加のパスを投げることもできません。諦めてください。次のコマンドで起動します。<code>-d &#39;&#123;&#125;&#39;</code>は必須です。外すとエラーになります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XGET http://localhost:9000/2015-03-31/<span class="built_in">functions</span>/<span class="keyword">function</span>/invocations -d <span class="string">&#x27;&#123;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;statusCode&quot;</span>:200,<span class="string">&quot;headers&quot;</span>:null,<span class="string">&quot;multiValueHeaders&quot;</span>:null,<span class="string">&quot;body&quot;</span>:<span class="string">&quot;&#123;\&quot;hello\&quot;: \&quot;world\&quot;&#125;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>これでテストできますよーとドキュメントにはありますが、半分本当で半分嘘です。というのも、実際にウェブサービスとして起動するには　API Gatewayをトリガーに設定して起動します。これがHTTPリクエストをJSONに変換してからlambdaに渡します。このDockerイメージは変換後のJSONを期待しています。本番で次のようにボディとしてJSONを渡したいとします。</p><p>パスが固定という説明をしましたが、ローカルではクエリーパラメータを付与してもダメでした。AWS上のLambdaは大丈夫です。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://example.com -d &#x27;&#123;&quot;hello&quot;: &quot;world&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>ローカルでテストするときは、ボディを文字列化し、それをbodyキーに入れたJSONを作って投げる必要があります。このあたりを自動でやってくれるプロキシがあると良さそう。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://example.com -XGET http://localhost:9000/2015-03-31/functions/function/invocations &#x27;&#123;body: &quot;&#123;\&quot;hello\&quot;: \&quot;world\&quot;&#125;&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>samコマンドを使えば、このAPI Gatewayが生成するJSONをローカルで作ってくれるのでテストに使えます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sam <span class="built_in">local</span> generate-event apigateway aws-proxy --path hoo/ --body hooo</span><br></pre></td></tr></table></figure><h1 id="検索エンジンをLambdaコンテナにする"><a href="#検索エンジンをLambdaコンテナにする" class="headerlink" title="検索エンジンをLambdaコンテナにする"></a>検索エンジンをLambdaコンテナにする</h1><img src="/images/20210604a/watertower.jpg" alt="wartertower" width="640" height="427" loading="lazy"><p>ちょっと実践的なサンプルを作ってみました。以前作った<a href="https://future-architect.github.io/articles/20200327/">サーバーレス用の検索エンジンwatertower</a>を改造して、ローカルのインデックスファイルの読み書きに対応しました。今回使ったサンプルは66kB程度の小さいデータファイルですが、心の中でこれが1万倍の大きさだったと想定してお読みいただければと思います。</p><p><a href="https://github.com/future-architect/watertower">https://github.com/future-architect/watertower</a></p><p>サーバーレス用ということで、<a href="https://gocloud.dev/">GoCloud.dev</a>のdocstoreをストレージに使い、DynamoDBなどのサーバーレス用途で便利なバックエンドを利用する実装にしていました。このdocstoreのバックエンドのうち、memdocstoreはオプションを設定するとローカルファイルに読み書きします。しかし、終了時に強制書き出ししてしまうので、将来的にNFSで共有するときに不便になる気がして、別に実装しました。思ったより大掛かりになってしまったので、今にして思えばdocstoreのローカルファイル拡張として実装した方がよかったように思いました。また、時間があればFlatbuffersにしたかったですね。巨大インデックスでもパースする箇所を最小にできれば起動時間は短くなりますからね。ここは本題ではないのでまあ軽く。</p><p>まあ、ローカルに持ったインデックスでの検索なら<a href="https://github.com/tantivy-search/tantivy">tantivy</a>使うのも良いと思います。Rust製で高速らしいです。日中韓のトークナイザも付属。</p><p>今回は静的なインデックスを作るCLIツールも用意しました。ソースは特定のスキーマで書かれたJSONファイル群です。それがフォルダにまとめて格納されているという想定でそのフォルダをスキャンしてインデックスを作っていきます。ちょうど、サンプルコードの中にHTTPのステータスコードの解説ドキュメントがいたのでこれをインデックス化して利用します。</p><p><a href="https://github.com/future-architect/watertower/tree/master/samples/httpstatus/documents">https://github.com/future-architect/watertower/tree/master/samples/httpstatus/documents</a></p><p>Dockerfileの中では、検索用のプログラムのビルドと、インデックス作成用のCLIツールをビルドし、後者の方ではインデックスファイルの作成まで行っています。最後のデプロイ用のイメージは検索プログラムとインデックスファイルを同一のフォルダに置いて完成です。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile.aws-lambda</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.16</span>-buster as builder</span><br><span class="line"><span class="keyword">ENV</span> GOPATH=</span><br><span class="line"><span class="keyword">ENV</span> CGO_ENABLED=<span class="number">0</span></span><br><span class="line"><span class="keyword">ENV</span> GOOS=linux</span><br><span class="line"><span class="keyword">ENV</span> GOARCH=amd64</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /work</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> go.mod go.sum ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod download</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> cmd/watertower-aws-lambda ./cmd/watertower-aws-lambda</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> *.go .</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nlp nlp</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> webapi webapi</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> cmd/watertower-aws-lambda &amp;&amp; go build -trimpath</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.16</span>-buster as indexer</span><br><span class="line"><span class="keyword">ENV</span> GOPATH=</span><br><span class="line"><span class="keyword">ENV</span> CGO_ENABLED=<span class="number">0</span></span><br><span class="line"><span class="keyword">ENV</span> GOOS=linux</span><br><span class="line"><span class="keyword">ENV</span> GOARCH=amd64</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /work</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> go.mod go.sum ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod download</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> cmd/watertower-cli ./cmd/watertower-cli</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> *.go .</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nlp nlp</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> cmd/watertower-cli &amp;&amp; go build -trimpath</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> samples/httpstatus/documents samples/httpstatus/documents</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cmd/watertower-cli/watertower-cli create-index samples/httpstatus/documents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> amazon/aws-lambda-go</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /work/cmd/watertower-aws-lambda/watertower-aws-lambda <span class="variable">$&#123;LAMBDA_TASK_ROOT&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=indexer /work/watertower.idx <span class="variable">$&#123;LAMBDA_TASK_ROOT&#125;</span></span></span><br><span class="line"><span class="keyword">ENV</span> DEFAULT_LANGUAGE=en</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;watertower-aws-lambda&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>検索用プログラムは前述のサンプルを膨らませたぐらいで、冗長なので省略します。以下のところでコードは見られます。</p><p><a href="https://github.com/future-architect/watertower/tree/master/cmd/watertower-aws-lambda">https://github.com/future-architect/watertower/tree/master/cmd/watertower-aws-lambda</a></p><p>ローカルでビルド＆実行し（前述のコマンドと一緒です）、試してみます。bodyというキーにリクエストを入れないといけないところは要注意。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XGET http://localhost:9000/2015-03-31/<span class="built_in">functions</span>/<span class="keyword">function</span>/invocations -d <span class="string">&#x27;&#123;&quot;body&quot;: &quot;&#123;\&quot;query\&quot;: \&quot;body\&quot;&#125;&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;statusCode&quot;</span>:200,</span><br><span class="line">    <span class="string">&quot;headers&quot;</span>:null,</span><br><span class="line">    <span class="string">&quot;multiValueHeaders&quot;</span>:null,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: <span class="string">&quot;&#123;\&quot;count\&quot;:1,\&quot;result\&quot;:[&#123;\&quot;unique_key\&quot;:\&quot;200\&quot;,\&quot;lang\&quot;:\&quot;en\&quot;,\&quot;title\&quot;:\&quot;200 OK\&quot;,...</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="AWSで動作させてみる"><a href="#AWSで動作させてみる" class="headerlink" title="AWSで動作させてみる"></a>AWSで動作させてみる</h1><p>まずはECRのリポジトリを作ります。lambda-testというリポジトリを作りました。右上に「プッシュコマンドを表示」という便利機能があります。イメージのアップロードはこのコマンドをそのままコピペして実行すればおしまいです。簡単ですね。aws configureで認証だけはしておく必要があります。</p><img src="/images/20210604a/スクリーンショット_2021-06-03_11.17.jpg" alt="プッシュコマンド" width="1200" height="1010" loading="lazy"><p>次にLambdaを作成します。最初の作成オプションで「コンテナイメージ」を選択し、その後、コンテナイメージURIでは先ほどアップロードしたイメージを選択します。現在は別のアカウントのイメージの選択はできないそうです。ステージングと本番でアカウントを分けている場合には両方にイメージをアップロードする必要があるとのことです。</p><img src="/images/20210604a/スクリーンショット_2021-06-04_1.17.jpg" alt="Lambda作成" width="1200" height="830" loading="lazy"><p>次にトリガーとしてAPI Gatewayを追加します。</p><img src="/images/20210604a/スクリーンショット_2021-06-03_23.27.jpg" alt="API Gateway追加" width="1200" height="801" loading="lazy"><p>API GatewayのところにURLが書かれているので、ここにアクセスします。本番環境用にクエリーパラメータを受け取って検索キーとして使う様に実装したので、クエリーを付与します。無事一件ドキュメントがマッチして帰ってきました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XGET <span class="string">&quot;https://xxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/default/docker-test?query=body&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;count&quot;</span>:1,</span><br><span class="line">  <span class="string">&quot;result&quot;</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;unique_key&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;lang&quot;</span>:<span class="string">&quot;en&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;200 OK&quot;</span>,<span class="string">&quot;updated_at&quot;</span>:<span class="string">&quot;0001-01-01T00:00:00Z&quot;</span>,<span class="string">&quot;tags&quot;</span>:[<span class="string">&quot;200&quot;</span>],</span><br><span class="line">      <span class="string">&quot;content&quot;</span>:<span class="string">&quot;The request has succeeded. The meaning of the success depends...</span></span><br></pre></td></tr></table></figure><h1 id="App-Runnerはどうか？"><a href="#App-Runnerはどうか？" class="headerlink" title="App Runnerはどうか？"></a>App Runnerはどうか？</h1><p>Cloud RunのAWS版という感じをひしひしと感じるのがApp Runnerです。Google I/O直前という発表タイミングも含めて、王者にのみ許されるミート戦略（ランチェスター戦略）そのものですね。PORT環境変数を渡すからこのポートを開いてね、というところまでそっくりです。ただし、まだ公開された直後で、実行時間制限やSLAなどは情報が掲載されていません。</p><p>Lambdaコンテナを今回作ってみて、やはりハンドラを専用に作らなければならないとか、ローカルと本番のAWSで動作が違うのでその吸収とか、やたら面倒でした。App Runnerがそれを解決して、ローカルでもクラウドでも同じように動いてくれるのが実現されたら良いな、と思います。</p><p>今後どうなっていくかはまだわかりませんがロードマップがありますので、欲しい機能とかはぼちぼち書いてみると良いようです。「Lambdaとか名乗っているのにcommon-lispとかのサポート薄いのが許せない」というのも、中の人的には「要望があれば・・・」という噂を聞きました。どしどし要望を上げると良いかと思います。</p><p><a href="https://github.com/aws/apprunner-roadmap/issues">https://github.com/aws/apprunner-roadmap/issues</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>サーバーレスで巨大ファイルを扱う方法について考察しました。実際にストレージを検討するときは、データの容量だけではなく、読み込みのスループットの速度、スループット向上のための追加課金、ストレージの場所（リージョンやゾーンごとにファイルを用意する/リージョン間転送料金発生の有無）など、さまざまな要件を検討しなければなりません。また、アプリケーションによってはモデルの更新がリアルタイムに頻繁に行われるかどうか、というのもあります。</p><p>今回のケースは、インデックス更新の頻度が少なく、容量が比較的小さいテキストの学習モデル（というか検索インデックス）という条件においては最適だとは思いますが、インデックスを動的に追加していくような場合は向きません。アプリケーションの特性によって最適解は変わってきます。アーキテクトとしての腕の見せ所でしょう。</p><p>NFS利用のケースは、もっともっと簡単になって欲しいですね。Dockerのボリュームマウントぐらいの気軽さで、読み込み専用と読み書き両用が気軽に選べて・・・となったら素敵だなと思います。</p><p>なお、ローカルのテストがしにくい点は要注意です。最初はswaggerを用意してあった実装済みのサーバー版を動かせばいいや、と思っていたのですが、実際にテストしたら動かず、最終的にLambdaコンテナ用に別にアプリケーションを作りました。クエリーとかボディはなんとかなりそうですが、パスを変更できないのはかなり厳しい。このブログの記事、さっさと仕上げようと思ったのですが、検索エンジン自体の改造に1週間、Lambdaのローカルとの互換性の調査だけで3日ぐらい溶けた気がします。</p><p>コンテナ化に対応したことで、利用できるファイルサイズが250MBから10GBと、Lambdaができることは増えました。ですが、今後、App Runnerの改善や、コンテナのファイルシステムサポートが充実したらさらにいいな、というのが感想ですね。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://future-architect.github.io/articles/20200327/">Goでサーバーレス用の検索エンジンwatertowerを作ってみました</a></li><li><a href="https://future-architect.github.io/articles/20210318/">GKE Autopilotを触ってみた</a></li><li><a href="https://qiita.com/shibukawa/items/878c5fe8ec09935fccd2">最速という噂のFlatbuffersの速度のヒミツと、導入方法の紹介(Go)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIGのDXユニットの渋川です。&lt;a href=&quot;https://future-architect.github.io/articles/20210531a/&quot;&gt;Serverless連載2021&lt;/a&gt;の最後の記事になります。sam周りとかLambdaの挙動については&lt;a </summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
    <category term="MLOps" scheme="https://future-architect.github.io/tags/MLOps/"/>
    
  </entry>
  
  <entry>
    <title>静的解析によるInvalidなAWS Lambda関数シグネチャの検知</title>
    <link href="https://future-architect.github.io/articles/20210603a/"/>
    <id>https://future-architect.github.io/articles/20210603a/</id>
    <published>2021-06-02T15:00:00.000Z</published>
    <updated>2021-06-03T02:02:47.567Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210603a/business-4576778_640.jpg" alt="640" width="412" height=""><p>TIGの辻 (<a href="https://twitter.com/d_tutuz">@d_tutuz</a>)です。</p><p>本記事では<a href="https://aws.amazon.com/jp/lambda/">AWS Lambda</a>の関数シグネチャを静的解析することで、より安全にAWS Lambdaを実装する方法を紹介します。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>早速ですがAWS LambdaのアプリケーションをGoの<a href="https://github.com/aws/aws-lambda-go/tree/v1.23.0">SDK</a>を用いて開発するときに、関数のハンドラは以下のシグネチャでなくてはなりません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">()</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(TIn)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">()</span> <span class="params">(TOut, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(context.Context)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(context.Context, TIn)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(context.Context)</span> <span class="params">(TOut, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(context.Context, TIn)</span> <span class="params">(TOut, error)</span></span></span><br></pre></td></tr></table></figure><p>関数を実行するときは <a href="https://pkg.go.dev/github.com/aws/aws-lambda-go@v1.23.0/lambda#Start"><code>lambda.Start</code></a> や <a href="https://pkg.go.dev/github.com/aws/aws-lambda-go@v1.23.0/lambda#StartHandlerWithContext"><code>lambda.StartWithContext</code></a> の引数として関数ハンドラを渡すことで、開発者が実装した関数ハンドラが実行されます。</p><p>以下はAWS LambdaをGoで実装するときの <code>main</code> パッケージの実装例です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(Handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handle</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// アプリケーションのロジックなど</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="interface-型であるハンドラ"><a href="#interface-型であるハンドラ" class="headerlink" title="interface{} 型であるハンドラ"></a><code>interface&#123;&#125;</code> 型であるハンドラ</h3><p>ところで <code>lambda.Start</code> 関数の引数であるハンドラは <code>interface&#123;&#125;</code> 型 <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Start</span><span class="params">(handler <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br></pre></td></tr></table></figure><p><code>interface&#123;&#125;</code> 型として扱うため、以下の <code>HandleInvalid</code> のようにハンドラの関数シグネチャが、うっかり有効でないシグネチャになっていたとしてもビルド自体は成功します。有効でない関数シグネチャを引数に渡して実行するとどうなるのでしょうか？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(HandleInvalid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⚠️戻り値が int であるのは無効なシグネチャ⚠️</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleInvalid</span><span class="params">(ctx context.Context)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答えは “実行時エラー” になります。AWSのコンソールから実行すると以下のようなエラーメッセージが出力されます。</p><p><img src="/images/20210603a/image.png"></p><h2 id="静的解析による関数シグネチャチェック"><a href="#静的解析による関数シグネチャチェック" class="headerlink" title="静的解析による関数シグネチャチェック"></a>静的解析による関数シグネチャチェック</h2><p>できることなら、有効でない関数シグネチャを早い段階で検知して、実行時エラーを防止したいですよね。</p><p>「静的解析」とはプログラムを実行せずにソースコードを解析することです。Goは静的解析のエコシステムが充実しており、静的解析でコードを検査して、不具合につながりそうなソースコードを検知することは一般的です。Go言語自体に備わっている <code>go vet</code> コマンドがありますし <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、サードパーティによるツールですとGoの典型的なエラー処理のミスを検知する <a href="https://github.com/kisielk/errcheck"><code>errcheck</code></a> や静的解析のツールセットである <a href="https://staticcheck.io/"><code>staticcheck</code></a> などがあります。</p><h3 id="unmarshal-モジュールによる静的解析"><a href="#unmarshal-モジュールによる静的解析" class="headerlink" title="unmarshal モジュールによる静的解析"></a><code>unmarshal</code> モジュールによる静的解析</h3><p>静的解析の例として <code>go vet</code> コマンドを用いてJSONをGoの型にマッピングするときの実装ミスを静的解析でチェックしてみましょう。Go公式のツールである <code>go vet</code> コマンドを実行したときに呼び出される <code>unmarshal</code> モジュールを使って検知できます。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> GoでJSONを型にマッピングするときは <code>json.Unmarshal</code> (あるいは <code>(Decoder).Decode</code>)を使います。<code>json.Unmarshal</code> に渡す第2引数はポインタである必要がありますが、ポインタになっていない場合に <code>go vet</code> コマンドを使うと、ポインタになっていないことを検知できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsonStr = <span class="string">`&#123;&quot;name&quot;:&quot;gopher&quot;&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> u User</span><br><span class="line"><span class="comment">// u はポインタ型 &amp;u として渡す必要がある！</span></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal([]<span class="keyword">byte</span>(jsonStr), u); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このとき <code>$ go vet ./...</code> とすると以下のように出力されます。第2引数がポインタではないことを教えてくれます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\main.go:17:26: call of Unmarshal passes non-pointer as second argument</span><br></pre></td></tr></table></figure><p>このように静的解析を行うことで、コードを実行せずに不具合につながるコードを早期に検知でき、品質向上に寄与します。</p><h3 id="自作ツールでAWS-Lambdaの関数シグネチャを静的解析"><a href="#自作ツールでAWS-Lambdaの関数シグネチャを静的解析" class="headerlink" title="自作ツールでAWS Lambdaの関数シグネチャを静的解析"></a>自作ツールでAWS Lambdaの関数シグネチャを静的解析</h3><p>JSONのマッピングの実装ミスを静的解析で検知した要領で、AWS Lambdaにおけるハンドラの関数シグネチャも静的解析を行い、有効でない関数シグネチャを検知することを試みます。筆者が調べたところ、既存のツールとして公開されているものはなかったため自作しました。</p><ul><li>静的解析ツールの自作</li></ul><p><a href="https://github.com/gostaticanalysis/skeleton"><code>gostaticanalysis/skeleton</code></a> を使うことで静的解析の雛形を生成でき、便利に静的解析ツールを作り始めることができます。また <a href="https://pkg.go.dev/golang.org/x/tools/go/analysis"><code>golang.org/x/tools/go/analysis</code></a> モジュールなどを用いて、構文解析の解析結果である抽象構文木やソースコードの型の情報など、静的解析に必要な情報を扱うことができ、静的解析したい独自のロジックを実装できます。</p><p>自作したAWS Lambdaの関数シグネチャを静的解析ツールは以下です。</p><a href="https://github.com/d-tsuji/awslambdahandler"><img src="https://github-link-card.s3.ap-northeast-1.amazonaws.com/d-tsuji/awslambdahandler.png" width="460px"></a><p><code>d-tsuji/awslambdahandler</code> を使うと <code>Start</code> や <code>StartWithContext</code> の引数に渡す関数のシグネチャが正しくないコードを発見してくれます。</p><p>冒頭に紹介した、AWS Lambdaが実行時エラーになる以下のコードに対して、<code>awslambdahandler</code> で静的解析をしてみます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(HandleInvalid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⚠️戻り値が int であるのは無効なシグネチャ⚠️</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleInvalid</span><span class="params">(ctx context.Context)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静的解析の実施</li></ul><p><code>awslambdahandler</code> を実行すると、以下のように有効でない関数シグネチャとして検知できます。AWS Lambdaにデプロイして実行せずとも、実行時にエラーになる関数シグネチャを静的解析で検知できました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go vet -vettool=`<span class="built_in">which</span> awslambdahandler` main.go</span><br><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">./main.go:10:14: lambda handler of <span class="string">&quot;HandleInvalid&quot;</span> is invalid lambda signature, see https://pkg.go.dev/github.com/aws/aws-lambda-go/lambda<span class="comment">#Start</span></span><br></pre></td></tr></table></figure><ul><li><code>awslambdahandler</code> のインストール</li></ul><p>インストールは</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/d-tsuji/awslambdahandler/cmd/awslambdahandler@latest</span><br></pre></td></tr></table></figure><p>などとして簡単にできます。CI環境に組み込めば、日々のチーム開発でより安全にAWS Lambdaを実装できます。ぜひ使ってみてください。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>静的解析を実施することでバグにつながるコードを早い段階で検知できます。<a href="https://github.com/gostaticanalysis/skeleton"><code>gostaticanalysis/skeleton</code></a> や <a href="https://pkg.go.dev/golang.org/x/tools/go/analysis"><code>golang.org/x/tools/go/analysis</code></a> を用いることで便利に静的解析ツールを自作できます。<code>awslambdahandler</code> を用いることでAWS Lambdaの関数シグネチャを静的解析でき、より安全にAWS Lambdaを実装できるようになりました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><code>go vet</code> コマンドを知らなかったという方も、実は <code>go test</code> のときに <code>go vet</code> に含まれる一部の静的解析が実行されています。<a href="https://golang.org/pkg/cmd/go/internal/test/">https://golang.org/pkg/cmd/go/internal/test/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://golang.org/cmd/vet/">https://golang.org/cmd/vet/</a> に含まれている <code>unmarshal</code> です。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">Go1.18から導入予定の<a href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md">型パラメータを使ったジェネリクス</a>が浸透すれば、今後引数の型の扱いは変わっていく可能性はあるでしょう。</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210603a/business-4576778_640.jpg&quot; alt=&quot;640&quot; width=&quot;412&quot; height=&quot;&quot;&gt;

&lt;p&gt;TIGの辻 (&lt;a href=&quot;https://twitter.com/d_tutuz&quot;&gt;@d_t</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
    <category term="Linter" scheme="https://future-architect.github.io/tags/Linter/"/>
    
  </entry>
  
  <entry>
    <title>AWS LambdaにおけるGo Contextの取り扱い</title>
    <link href="https://future-architect.github.io/articles/20210602a/"/>
    <id>https://future-architect.github.io/articles/20210602a/</id>
    <published>2021-06-01T15:00:00.000Z</published>
    <updated>2021-06-04T01:12:06.351Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210531a/">サーバーレス連載</a>の3記事目です</p><p>TIGの伊藤真彦です。</p><p>GoでLambdaにデプロイするコードを書くにあたり、<a href="https://github.com/aws/aws-lambda-go">aws-lambda-go</a>を利用できます。<br>その際のtips紹介記事です。</p><h1 id="AWS-LambdaにおけるGo-Contextの取り扱い"><a href="#AWS-LambdaにおけるGo-Contextの取り扱い" class="headerlink" title="AWS LambdaにおけるGo Contextの取り扱い"></a>AWS LambdaにおけるGo Contextの取り扱い</h1><img src="/images/20210602a/lambda-39473.png" alt="" width="300" height="310" loading="lazy"><p><a href="https://pixabay.com/ja/users/clker-free-vector-images-3736/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=39473">Clker-Free-Vector-Images</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=39473">Pixabay</a>からの画像</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello ƛ!&quot;</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Make the handler available for Remote Procedure Call by AWS Lambda</span></span><br><span class="line">lambda.Start(hello)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/aws/aws-lambda-go">aws-lambda-go</a>ライブラリのREADMEに記載の通り、importして利用可能になった<code>aws-lambda-go/lambda</code>の<code>Start</code>関数の引数に、アプリケーションコードを記載した関数を渡す形で、<br>実行するための土台としてのアレコレを抽象化して、アプリケーションコードに注力することが可能になっています。</p><p><code>lambda.Start(func)</code>に渡せる引数<code>func</code>は<code>interface</code>型になっており、下記の複数種類の形式の関数を渡すことが可能になっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">()</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(TIn)</span>, <span class="title">error</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">()</span> <span class="params">(TOut, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(context.Context)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(context.Context, TIn)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(context.Context)</span> <span class="params">(TOut, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(context.Context, TIn)</span> <span class="params">(TOut, error)</span></span></span><br></pre></td></tr></table></figure><p>引数として<code>context.Context</code>型を受け取るシグネチャの関数を用いることで、後続処理でcontextを受け取ることが可能です。</p><h2 id="LambdaContext型を利用する"><a href="#LambdaContext型を利用する" class="headerlink" title="LambdaContext型を利用する"></a>LambdaContext型を利用する</h2><p>contextというと後続のライブラリに受け渡すか、自前の実装によってタイムアウト等を管理するような用途が想定されます。<br>公式ドキュメントのサンプル実装は<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-context.html">こちら</a>です。<br>「context の呼び出し情報へのアクセス」の章に記載があるように、<code>lambda.Start(func)</code>で実装した関数が受け取る<code>context.Context</code>には、あらかじめいくつかの値が入っています。<br>これらの値をやり取りするために、aws-lambda-goには<a href="https://github.com/aws/aws-lambda-go/blob/master/lambdacontext/context.go">lambdacontextパッケージ</a>が用意されています。<br>これにより、<code>LambdaContext</code>構造体を用いることが可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LambdaContext is the set of metadata that is passed for every Invoke.</span></span><br><span class="line"><span class="keyword">type</span> LambdaContext <span class="keyword">struct</span> &#123;</span><br><span class="line">AwsRequestID       <span class="keyword">string</span></span><br><span class="line">InvokedFunctionArn <span class="keyword">string</span></span><br><span class="line">Identity           CognitoIdentity</span><br><span class="line">ClientContext      ClientContext</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この構造体は、フィールド名の通り<code>AwsLambda</code>が実行された際の情報を持たせることが可能です。</p><h2 id="context-ContextからLambdaContext構造体を復元する"><a href="#context-ContextからLambdaContext構造体を復元する" class="headerlink" title="context.ContextからLambdaContext構造体を復元する"></a>context.ContextからLambdaContext構造体を復元する</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FromContext returns the LambdaContext value stored in ctx, if any.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FromContext</span><span class="params">(ctx context.Context)</span> <span class="params">(*LambdaContext, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">lc, ok := ctx.Value(contextKey).(*LambdaContext)</span><br><span class="line"><span class="keyword">return</span> lc, ok</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LambdaContext</code>構造体は、<code>context.Context</code>を引数に取り、<code>LambdaContext</code>構造体を返す関数<code>FromContext</code>でデータを生成できます。<br><code>FromContext</code>を用いたサンプルコードを書いてみました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambdacontext&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloWithContext</span><span class="params">(ctx context.Context)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">lc, ok := lambdacontext.FromContext(ctx)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;aws_request_id: %v&quot;</span>, lc.AwsRequestID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello ƛ!&quot;</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Make the handler available for Remote Procedure Call by AWS Lambda</span></span><br><span class="line">lambda.Start(helloWithContext)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このような方法で、受け取ったcontextからライブラリがcontextに含めた情報を取得することが可能です。<br>実際の運用としては、ログ出力の際にprefixに<code>AwsRequestID</code>を出力するように開発しておき、<code>Amazon CloudWatch Logs</code>に送信されたログから、同一リクエストにおける一連のログ出力を抽出する際に役立てたりしています。</p><p>lambdaで開発したAPIの認証認可に<code>Amazon Cognito</code>を利用している場合は、<code>LambdaContext</code>構造体から<code>CognitoIdentityID</code>、<code>CognitoIdentityPoolID</code>を取得することができるようになっています。<br>新しい<code>context</code>に<code>LambdaContext</code>構造体の情報を詰める<code>func NewContext(parent context.Context, lc *LambdaContext)</code>も用意されています。<br>このような公式から提供されているユーティリティを見落とさず使いこなしていきたいですね。</p><p>なお、Goの実装でLambdaを起動する際に<code>context</code>に任意の値を保持して、リクエストのペイロードとして活用するような使い方はできません。<br>詳しくは過去記事<a href="https://future-architect.github.io/articles/20201112/">GoでLambdaからLambdaを呼び出すときに気をつけたいポイント6選</a>をご確認ください。<br>このようなGoでの実装経験、ハマりどころは<a href="https://future-architect.github.io/articles/20200326/">Serverless連載2: AWS Lambda×Goの開発Tips</a>など、<a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">昨年の連載</a>でも様々な記事が執筆されています。</p><p>この機会に合わせてお読みいただければ幸いです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>AWS lambdaをgoで実装する際にcontext.Contextを受け取るコードを実装できる</li><li>contextにはリクエストID等の情報が含まれている</li><li>contextの情報を扱うためのパッケージが用意されている</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210531a/&quot;&gt;サーバーレス連載&lt;/a&gt;の3記事目です&lt;/p&gt;
&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;GoでLambdaにデプロイするコードを書くにあたり、&lt;a href=&quot;https://github.com/aws/a</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>15分の壁を超えて。Lambda分散実行術</title>
    <link href="https://future-architect.github.io/articles/20210601a/"/>
    <id>https://future-architect.github.io/articles/20210601a/</id>
    <published>2021-05-31T15:00:00.000Z</published>
    <updated>2021-06-02T02:24:58.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の真野です。<a href="/articles/20210531a/">Serverless連載2021</a>の2日目です。</p><p>AWSで一度Lambdaを利用すると、その利便性から徐々に利用範囲が広がっていくことがよく観測されます。一度だけならと一度手を出すと、いつの間にかLambda以外で動かすことによるイベント連携の手間や、キャパシティプランニング、CI/CDパイプライン構築と運用監視の手間など、フルマネージド及び周辺システムのエコシステムの恩恵を得られなくてイライラする事も、身体に耐性がついてつい利用量が増えていくこともしばしばです。（例のサイクルの画像は割愛）。</p><p>本記事ではAWS Lambdaでのバッチ処理について検討します。</p><h1 id="AWS-Lambdaとバッチ処理との相性"><a href="#AWS-Lambdaとバッチ処理との相性" class="headerlink" title="AWS Lambdaとバッチ処理との相性"></a>AWS Lambdaとバッチ処理との相性</h1><p>そんなAWS Lambdaですが2021.06.01時点では実行時間に制約があり<a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html">15分</a>です。過去、<a href="https://aws.amazon.com/jp/blogs/news/aws-lambda-timeout-15min/">5分から15分にアップデート</a>された経緯がありますが、今後も何かしらの制約は残るでしょう。</p><p>そのため、AWS Lambdaのサービス単体でバッチ処理を行うのは難しく、他のサービスあるいは、他のサービスと組み合わせてバッチ処理を実現することが多いです。</p><p>よく見るのは以下3つでしょうか。</p><ol><li>ECSで処理</li><li>AWS Batchで処理</li><li>Step FunctionsとLambdaを組み合わせ</li></ol><p>3つ目のStep Functionsは<a href="/articles/20200515/">過去にまとめた</a>ことがあります。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200515/index.html" data-iframely-url="//cdn.iframe.ly/Wg0IM8H?card=small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>今回はLambda中毒者らしく、1のECSや2のAWS Batchに頼らず、3のStep Functionsでもなく、LambdaとKinesisでバッチ処理を実現しようと思います。</p><h1 id="Scatter-Fanout-パターン"><a href="#Scatter-Fanout-パターン" class="headerlink" title="Scatter(Fanout)パターン"></a>Scatter(Fanout)パターン</h1><p>Enterprise Integration Patternで分散・集約するパターンをScatter-Gatherパターンと呼びますが、今回はこちらの分散する部分のみを利用します。GatherなしのScatterパターンとはあまり聞かないので、Fanoutパターンが正しいのかもです。タイトルでは15分の壁を超えてとありますが、個別のLambdaでその壁は超えられないので、複数のLambdaを並列で実行させることで、それら処理時間の合計で仮想的に超えることにします。</p><img src="/images/20210601a/BroadcastAggregate.gif" alt="Scatter Gatherパターン" width="377" height="226" loading="lazy"><p><a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/BroadcastAggregate.html">https://www.enterpriseintegrationpatterns.com/patterns/messaging/BroadcastAggregate.html</a></p><p>何かしらの入力ソースを元に、Lambdaで分散数だけKinesisにジョブを示すメッセージを送信。後続のLambdaで処理を行う構成にします。最初のLambdaがScatterと呼ばれる分散の開始部分です。</p><img src="/images/20210601a/scatter.png" alt="LambdaでKinesisにPutする図" width="801" height="377" loading="lazy"><p>Gatherについては、DynamoDBのIncrement an Atomic Counterなどを利用しつつ実装するのかなと思います。同じ設計で実装するのであれば下記のような構成になるかなと思います。</p><img src="/images/20210601a/gather.png" alt="DynamoDBを管理テーブルに利用する図" width="1200" height="576" loading="lazy"><p>ただ、現実的にはスクラッチでGatherの作り込みを行うのではなく、Step FunctionsやManaged Workflows for Apache Airflowを利用することが大半だと思いますので、本記事では細かい設計・実装について触れていきません。</p><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p>バッチ処理対象のデータはDynamoDBにあることにします。あるテーブルをフルスキャンしてそのデータを駆動にして何かしら処理を加えると仮定します。</p><p>コードは<a href="https://github.com/ma91n/servlerless-batch-example/tree/master/scatterkinesis">こちら</a>にあげていますので、適時参照ください。</p><h2 id="Kinesis-Data-Streamに連携するペイロード"><a href="#Kinesis-Data-Streamに連携するペイロード" class="headerlink" title="Kinesis Data Streamに連携するペイロード"></a>Kinesis Data Streamに連携するペイロード</h2><p>Jobという名前のStructの形式で連携します。Totalに分散トータル数、Segに今の分散番号を指定する仕様にします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Job <span class="keyword">struct</span> &#123;</span><br><span class="line">Total <span class="keyword">int64</span> <span class="string">`json:&quot;total&quot;`</span></span><br><span class="line">Seg   <span class="keyword">int64</span> <span class="string">`json:&quot;seg&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、処理対象のDynamoDBには7000件弱のデータと登録しました。</p><h2 id="Scatter"><a href="#Scatter" class="headerlink" title="Scatter"></a>Scatter</h2><p>最初に処理対象のDynamoDBテーブルの件数を取得し、一定のしきい値単位になるように分散数を計算します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = dynamodb.New(session.Must(session.NewSession()))</span><br><span class="line"><span class="keyword">var</span> kc = kinesis.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(Handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handle</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">resp, err := db.ScanWithContext(ctx, &amp;dynamodb.ScanInput&#123;</span><br><span class="line">Select:    aws.String(dynamodb.SelectCount),</span><br><span class="line">TableName: aws.String(<span class="string">&quot;TestTable&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">total := <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">int</span>(*resp.Count) &gt; <span class="number">1000</span> &#123;</span><br><span class="line">total = <span class="keyword">int</span>(*resp.Count) / <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; total; i++ &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;i=%d\n&quot;</span>, i)</span><br><span class="line">job := Job&#123;</span><br><span class="line">Total: <span class="keyword">int64</span>(total),</span><br><span class="line">Seg:   <span class="keyword">int64</span>(i),</span><br><span class="line">&#125;</span><br><span class="line">b, err := json.Marshal(job)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = kc.PutRecordWithContext(ctx, &amp;kinesis.PutRecordInput&#123;</span><br><span class="line">StreamName:   aws.String(<span class="string">&quot;scatter&quot;</span>),</span><br><span class="line">PartitionKey: aws.String(fmt.Sprintf(<span class="string">&quot;partitionKey-%d&quot;</span>, i)),</span><br><span class="line">Data:         b,</span><br><span class="line">&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>db.ScanWithContext</code> でテーブル件数を取得し、今回はしきい値を1000で分散トータル数を導出しています。<br>あとは、その数だけKinesis Data StreamにJobを送信します。</p><p>動かしてみると、以下のような結果がでると、無事KinesisにメッセージをPutできています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">START RequestId: 9469393a-eba9-4a21-9e98-8a3fc7f2a3f5 Version: $LATEST</span><br><span class="line">2021&#x2F;06&#x2F;01 03:45:44 i&#x3D;0</span><br><span class="line">2021&#x2F;06&#x2F;01 03:45:44 i&#x3D;1</span><br><span class="line">2021&#x2F;06&#x2F;01 03:45:44 i&#x3D;2</span><br><span class="line">2021&#x2F;06&#x2F;01 03:45:44 i&#x3D;3</span><br><span class="line">2021&#x2F;06&#x2F;01 03:45:44 i&#x3D;4</span><br><span class="line">2021&#x2F;06&#x2F;01 03:45:44 i&#x3D;5</span><br><span class="line">2021&#x2F;06&#x2F;01 03:45:44 i&#x3D;6</span><br><span class="line">2021&#x2F;06&#x2F;01 03:45:44 done</span><br><span class="line">END RequestId: 9469393a-eba9-4a21-9e98-8a3fc7f2a3f5</span><br><span class="line">REPORT RequestId: 9469393a-eba9-4a21-9e98-8a3fc7f2a3f5Duration: 299.30 msBilled Duration: 300 msMemory Size: 512 MBMax Memory Used: 45 MBInit Duration: 118.30 ms</span><br></pre></td></tr></table></figure><h2 id="並列処理部分"><a href="#並列処理部分" class="headerlink" title="並列処理部分"></a>並列処理部分</h2><p>次は、Kinesisのメッセージトリガーで起動するLambdaです。分散処理で行うメインの処理を実装する部分です。<br>今回は、 <code>executeBizLogic</code> の中身では単純に指定された件数のカウントを取る内容にしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(Handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handle</span><span class="params">(ctx context.Context, e events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> e.Records &#123;</span><br><span class="line"><span class="keyword">var</span> job Job</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(r.Kinesis.Data, &amp;job); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count, err := executeBizLogic(ctx, job.Total, job.Seg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;count: %v&quot;</span>, count)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db = dynamodb.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">executeBizLogic</span><span class="params">(ctx context.Context, total, seg <span class="keyword">int64</span>)</span> <span class="params">(<span class="keyword">int64</span>, error)</span></span> &#123;</span><br><span class="line">out, err := db.ScanWithContext(ctx, &amp;dynamodb.ScanInput&#123;</span><br><span class="line">TableName:     aws.String(<span class="string">&quot;TestTable&quot;</span>),</span><br><span class="line">TotalSegments: aws.Int64(total),</span><br><span class="line">Segment:       aws.Int64(seg),</span><br><span class="line">Select:        aws.String(dynamodb.SelectCount),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">&quot;db.ScanWithContext: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *out.Count, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>動かしてみると以下のようなログが出る想定です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2021-06-01T12:45:46.143+09:00START RequestId: d44ecc4c-433c-481b-9051-435280c81900 Version: $LATEST</span><br><span class="line">2021-06-01T12:45:46.338+09:002021&#x2F;06&#x2F;01 03:45:46 count: 1016</span><br><span class="line">2021-06-01T12:45:46.339+09:00END RequestId: d44ecc4c-433c-481b-9051-435280c81900</span><br><span class="line">2021-06-01T12:45:46.339+09:00REPORT RequestId: d44ecc4c-433c-481b-9051-435280c81900 Duration: 195.60 ms Billed Duration: 196 ms Memory Size: 512 MB Max Memory Used: 44 MB Init Duration: 107.35 ms</span><br><span class="line">2021-06-01T12:45:46.391+09:00START RequestId: bd6839aa-bdb0-40f5-9455-a9a445035b4d Version: $LATEST</span><br><span class="line">2021-06-01T12:45:46.406+09:002021&#x2F;06&#x2F;01 03:45:46 count: 1085</span><br><span class="line">2021-06-01T12:45:46.406+09:00END RequestId: bd6839aa-bdb0-40f5-9455-a9a445035b4d</span><br><span class="line">2021-06-01T12:45:46.406+09:00REPORT RequestId: bd6839aa-bdb0-40f5-9455-a9a445035b4d Duration: 10.36 ms Billed Duration: 11 ms Memory Size: 512 MB Max Memory Used: 45 MB</span><br><span class="line">aa4f-30057e967514 Duration: 7.72 ms Billed Duration: 8 ms Memory Size: 512 MB Max Memory Used: 45 MB</span><br><span class="line">中略</span><br><span class="line">2021-06-01T12:45:46.611+09:00START RequestId: 5f9cec98-2434-4872-8de9-df605b3e339c Version: $LATEST</span><br><span class="line">2021-06-01T12:45:46.624+09:002021&#x2F;06&#x2F;01 03:45:46 count: 1072</span><br><span class="line">2021-06-01T12:45:46.625+09:00END RequestId: 5f9cec98-2434-4872-8de9-df605b3e339c</span><br><span class="line">2021-06-01T12:45:46.625+09:00REPORT RequestId: 5f9cec98-2434-4872-8de9-df605b3e339c Duration: 8.59 ms Billed Duration: 9 ms Memory Size: 512 MB Max M</span><br></pre></td></tr></table></figure><p>最初のLambdaでKinesisに呼び出した分だけ、後続のLambdaが起動していることがわかると思います。</p><h1 id="この実装の使い所"><a href="#この実装の使い所" class="headerlink" title="この実装の使い所"></a>この実装の使い所</h1><p>ジョブの依存関係が多くない場合で、かつECSやAWS Batchを導入せずカジュアルに分散実行したい時に試せるかと思います。</p><p>また、今回の例としては分散トータル数＋分散番号の処理モデルですが、処理対象のデータモデル次第では、ユーザIDの範囲をしていしたり、良い感じのカーディナリティになる業務コードを指定しても良いかなと思います。支社CDとか営業エリアCDとかです。</p><h1 id="リランについて"><a href="#リランについて" class="headerlink" title="リランについて"></a>リランについて</h1><p>後続のLambdaのある分散番号だけ障害が発生し、リカバリが必要になった場合の対応について説明します。</p><p>今回の実装では作り込んでいないんですが、例えばエラージョブキューを格納するDead Letter Queueを用意するのが一手です。ちょっとツールで利用する用途であれば、連携された連携情報を awscli で直接Kinesisにputするのも一手だと思います</p><h1 id="処理データの一貫性"><a href="#処理データの一貫性" class="headerlink" title="処理データの一貫性"></a>処理データの一貫性</h1><p>実行するLambdaが分割される関係上、利用するのがPostgreSQLのようなRDBであっても、バッチ処理全体の処理結果の一貫性を保つことはできません。そのため分散処理単位で登録してよいかが利用する上での大前提だと思います。</p><h1 id="実用上の話"><a href="#実用上の話" class="headerlink" title="実用上の話"></a>実用上の話</h1><p>この手の分散処理を1日に複数回実行し、かつある分散処理番号のみ失敗する場合を考慮すると、システム運用上の負荷が高まります。</p><p>そのため、実用に耐えうるためにはScatterのLambdaの起動のたびに一意な実行IDを取得し、それをキーに管理テーブルを用意することが多いと思います。それぞれが成功・失敗・処理中などのステータスを持つと役立つことが多いです。それぞれの処理件数や処理時間を格納すると嬉しいこともおおいでしょう。</p><p>一方でそこまでやるのであれば、Managed Workflows for Apache Airflowといったワークフローエンジンの導入も検討したほうが良いかもしれません。</p><p>また、分散しなくてもAWS BatchやECSで15分の制約を持たないサービスを選定したほうが良い場面は多分にあるので、程々に利用しましょう。</p><h1 id="インフラ上の注意"><a href="#インフラ上の注意" class="headerlink" title="インフラ上の注意"></a>インフラ上の注意</h1><p>並列処理Lambdaですが、Kinesisトリガーのバッチサイズは <code>1</code> が推奨です。これが10などにすると今回だとタイミングによっては1つのLambdaですべてメッセージを処理してしまう可能性があるからです。</p><p>また、 <code>シャードあたりの同時バッチ</code> で1シャードあたりの同時起動数を制御できます。デフォルトはおそらく1です。現状は1シャードあたり最大10までです。Kinesis Data Streamをジョブキューとして利用すると、だいたいシャードは1なので通常は同時起動数の制約がここで決まります。</p><p><a href="https://aws.amazon.com/jp/about-aws/whats-new/2019/11/aws-lambda-supports-parallelization-factor-for-kinesis-and-dynamodb-event-sources/">https://aws.amazon.com/jp/about-aws/whats-new/2019/11/aws-lambda-supports-parallelization-factor-for-kinesis-and-dynamodb-event-sources/</a></p><p>通常は10並列で十分かと思いますが、もし上げたい場合はシャードを増やす対応です。多少費用が増えますが通常は誤差の範囲かと思います。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>AWS Lambda実行時間15分の壁は、当然ハードリミットなのでそれ単体では超えられないですが、Kinesis Data Streamsと組み合わせて、仮想的にコンピューティング時間の合計で15分を越えようという記事でした。</p><p>実用上はいくつか壁があるので、用法用量を守り正しく参考にしていただければ幸いです。</p><p>次は伊藤真彦さんの<a href="/articles/20210602a/">AWS LambdaにおけるGo Contextの取り扱い</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Technology Innovation Group（TIG）は、「最先端、且つ先進的なテクノロジーのプロフェッショナル集団」、「プロジェクト品質と生産性の向上」、「自社サービス事業の立ち上げ」を主なミッションとする、技術部隊です。DXユニットとはデジタルトランスフォーメーションを推進するチームで、IoTやらMaaSなどのテクノロジーカットでビジネス転換を行います。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
    <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
    <category term="バッチ処理" scheme="https://future-architect.github.io/tags/%E3%83%90%E3%83%83%E3%83%81%E5%87%A6%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Kinesis+Lambda構成での、処理遅延を監視する</title>
    <link href="https://future-architect.github.io/articles/20210531b/"/>
    <id>https://future-architect.github.io/articles/20210531b/</id>
    <published>2021-05-30T15:00:01.000Z</published>
    <updated>2021-05-31T01:56:39.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャー棚井龍之介です。</p><p>本ブログでは、<a href="/articles/20210531a/">サーバレス連載</a>の第1日目として、「Kinesis+Lambda構成」でのメトリクス監視について取り上げます。</p><p><strong>データ流入量が徐々に増加する見込み</strong>のとき、各リソースのどのメトリクスを重点チェックすべきか。また、メトリクスがリソースの制限にぶつかった場合やアラート検知された場合にどのような対応アクションを取るべきか。KinesisやLambdaのリソース監視設定から得た知見を、本ブログに整理しました。</p><p>そもそもの「サーバレスって、何が便利なんだっけ？」から整理したい方は、<a href="https://aws.amazon.com/jp/builders-flash/202003/awsgeek-serverless/?awsf.filter-name=*all">AWS公式のグラレコ解説記事</a>をご覧ください。</p><h1 id="今回のサーバレス構成"><a href="#今回のサーバレス構成" class="headerlink" title="今回のサーバレス構成"></a>今回のサーバレス構成</h1><p>「Amazon Kinesis Data Streamでデータを受け、AWS Lambdaがコンシュームする構成」を本ブログで想定する環境とします。</p><p>AWS本家の<a href="https://aws.amazon.com/jp/serverless/patterns/serverless-pattern/">形で考えるサーバレス設計</a>でも「流入データの連続処理」として取り上げられおり、サーバレスという用語に馴染みのないエンジニアにもよく知られたデータフロー構成ではないでしょうか。</p><img src="/images/20210531b/Pattern-Streaming.7b2876deed217d21f4e4e326fe1535be25cb9603.png" alt="Kinesisで受けてLambdaからS3へ書き込む図" width="832" height="218" loading="lazy"><p>大量データの受信にはKinesisを使い、受信データのコンピュートはLambdaでやりくりする。この構成はシンプルで分かりやすく、かつ、各リソースをスケールしやすいため、データ連携やデータ保存などのあらゆるケースに応用が効く、ベーシックなインフラ構成だと思います。</p><p>どちらもフルマネージドサービスなため、管理運用コストはほとんとかからないのですが、こと「データ流入量がどんどん増える場合」にはその限りではありません。後続で説明するCloudWatchのメトリクス監視を設定し、通知やアラートを受けた場合にはリソースの拡張・スケーリング対応が必要となります。</p><h1 id="リソース監視の基本"><a href="#リソース監視の基本" class="headerlink" title="リソース監視の基本"></a>リソース監視の基本</h1><p>AWSリソースの監視には、<a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/cloudwatch_architecture.html">CloudWatch</a>を活用します。</p><p>Amazon CloudWatchを利用することにより、AWSリソースサービスの利用状況や、各サービスの出力する情報を<a href="https://wa3.i-3-i.info/word17778.html">モニタリング</a>できます。</p><p>各リソースの出力する情報は「メトリクス(Metrics)」としてAWSサービス内に集約されています。CloudWatchに追加設定を入れることで「このメトリクスが急上昇した場合には、社員にメールで通知して」や「あのメトリクスが80%を上回ったら、自動でリソースを増強して」などを登録し、緊急時のシステム対応に備えることができます。</p><img src="/images/20210531b/CW-Overview.png" alt="CloudWatchサービスの概念図" width="604" height="385" loading="lazy"><p>EC2やRDSの運用経験があれば、メトリクス監視は「当たり前に実施すべき」と言われても違和感は無いと思います。<br>しかし、システムの運用経験が「エンジニアになってこのかた、サーバレスのみ」だと、「フルマネージドサービスなのだから、メトリクスの監視設定はいらないよね。エラー監視は当然だとしても、リソース増強は全て自動でしょ」と勘違いしてしまうケースが見受けられます。</p><p>サーバレス構成だとしてもメトリクス監視は必須であり、それを怠ってしまうと「知らないうちに、システムの動きがおかしくなっている」状況になります。</p><p>筆者自身の経験では、Lambdaの代表的なメトリクス <strong>IteratorAge</strong> の監視が漏れたことにより「リアルタイム処理と謳っているが、実際のデータ連携には〇〇時間要する」というケースがありました。サービスの非機能要件を担保するためにも、メトリクス監視は徹底すべきです。</p><h1 id="監視メトリクス"><a href="#監視メトリクス" class="headerlink" title="監視メトリクス"></a>監視メトリクス</h1><p>Kinesis+Lambda構成の場合、<a href="https://docs.aws.amazon.com/ja_jp/wellarchitected/latest/serverless-applications-lens/welcome.html">最低でも以下のメトリクス</a>には監視・アラート通知設定を入れましょう。</p><div class="scroll"><table><thead><tr><th>#</th><th>AWSサービス名</th><th>メトリクス名</th><th>説明</th></tr></thead><tbody><tr><td>1</td><td>AWS Lambda</td><td>Errors</td><td>関数エラーが発生した呼び出しの数</td></tr><tr><td>2</td><td>AWS Lambda</td><td>Throttling</td><td>スロットリングされた呼び出しのリクエスト数</td></tr><tr><td>3</td><td>AWS Lambda</td><td>Duration</td><td>関数コードがイベントの処理に費やす時間</td></tr><tr><td>4</td><td>AWS Lambda</td><td>ConcurrentExecutions</td><td>イベントを処理している関数インスタンスの数</td></tr><tr><td>5</td><td>AWS Lambda</td><td>IteratorAge</td><td>あるデータをKinesisが受信してから、そのデータをLambdaに送信するまでの時間</td></tr><tr><td>6</td><td>Amazon Kinesis Date Stream</td><td>ReadProvisionedThroughputExceeded</td><td>データ取得要求が、Kinesisのスループット上限に達して調整が行われた</td></tr><tr><td>7</td><td>Amazon Kinesis Date Stream</td><td>WriteProvisionedThroughputExceeded</td><td>データ書き込みが、Kinesisのスループット上限に達して失敗した</td></tr><tr><td>8</td><td>Amazon Kinesis Date Stream</td><td>GetRecords.IteratorAgeMilliseconds</td><td>Kinesisにレコードが滞在した時間</td></tr><tr><td>9</td><td>Amazon Kinesis Date Stream</td><td>GetRecords.Success</td><td>Kinesisから正しく取得されたレコードの数</td></tr></tbody></table></div><p>これらのメトリクス監視を入れることで、Kinesis, Lambdaサーバレスリソースの「フルマネージドではない部分」までにも目が行き届くようになります。</p><h2 id="アラート通知が届いたら"><a href="#アラート通知が届いたら" class="headerlink" title="アラート通知が届いたら"></a>アラート通知が届いたら</h2><p>メトリクス監視を入れることで、リソースの負荷上昇をアラートで検知できるようになります。<br>基本的には「ボトルネックの特定 → 解決/緩和アクションの実施 → 継続監視 → アラートの未再発を確認し対応クローズ or 原因の再調査」の対応フローとなります。</p><p>エラーが発生した場合や、データが全く届かないケースであれば、原因の切り分けは容易だと思います。<br>しかし、「処理遅延」のような処理時間が徐々に長くなっているケースでは、関数内部ロジックの修正やリソースの増強が必要になります。</p><p>代表的なアクションとしては</p><ul><li>Lambda<ul><li>アプリケーションの内部ロジックを見直す<ul><li>別リソースとの接続時間を調べる</li><li>詳細調査のためにログ出力を追加する</li></ul></li><li>メモリを増強する</li><li>同時実行数の上限緩和を申請する</li><li>並列化系数を増やす</li></ul></li><li>Kinesis<ul><li>シャード数を増やす</li><li>データ保存期間を延長する</li></ul></li></ul><p>などが考えられます。</p><p>いずれにしても「<strong>ボトルネックの特定</strong>」が最優先であり、原因に対してピンポイントで対処すべきです。<br>アラート通知時に慌てないためにも、CloudWatchのコンソール画面に日頃から慣れておくことも大事です。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>サーバレス構成でのメトリクス監視について、入門的な内容として、Kinesis+Lambda構成にフォーカスして説明しました。フルマネージドサービスは基本的に「ほったらかし」でも大きな問題は発生しませんが、徐々に負荷が高まるケースでは「気づいたら、大変なことになっていた」という笑えない状況が発生しがちです。</p><p>面倒な作業はAWS側に任せられるとしても、最終的なサービス稼働監視は「利用者側の責務」と意識して、メトリクスの監視設定は必ず入れるようにしましょう。</p><p><a href="/articles/20210531a/">サーバレス連載</a>の第1日目でした。次は真野さんの「15分の壁を超えるLambda分散実行術」です</p><h2 id="参照記事"><a href="#参照記事" class="headerlink" title="参照記事"></a>参照記事</h2><ul><li><a href="https://aws.amazon.com/jp/builders-flash/202003/awsgeek-serverless/?awsf.filter-name=*all">サーバーレスって何が便利なの ? AWS でサーバーレスを構築するためのサービスをグラレコで解説</a></li><li><a href="https://aws.amazon.com/jp/serverless/patterns/serverless-pattern/">形で考えるサーバーレス設計</a></li><li><a href="https://wa3.i-3-i.info/word17778.html">モニタリング (monitoring)</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/cloudwatch_architecture.html">Amazon CloudWatch の仕組み</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/wellarchitected/latest/serverless-applications-lens/wellarchitected-serverless-applications-lens.pdf">サーバーレスアプリケーションレンズ - AWS Well-Architected フレームワーク</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/monitoring-metrics.html">AWS Lambda 関数メトリクスの使用</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/streams/latest/dev/monitoring-with-cloudwatch.html">Amazon CloudWatch を使用した Amazon Kinesis Data Streams サービスのモニタリング</a></li><li><a href="https://kashionki38.hatenablog.com/entry/2020/04/19/010009">Kinesis, Lambdaのボトルネック解析時の考慮点</a></li><li><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/kinesis-data-streams-iteratorage-metric/">Kinesis Data Streams で IteratorAgeMilliseconds の値が増え続けるのはなぜですか?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;フューチャー棚井龍之介です。&lt;/p&gt;
&lt;p&gt;本ブログでは、&lt;a href=&quot;/articles/20210531a/&quot;&gt;サー</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="保守運用" scheme="https://future-architect.github.io/tags/%E4%BF%9D%E5%AE%88%E9%81%8B%E7%94%A8/"/>
    
    <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
    <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
    <category term="Kinesis" scheme="https://future-architect.github.io/tags/Kinesis/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載2021を始めます</title>
    <link href="https://future-architect.github.io/articles/20210531a/"/>
    <id>https://future-architect.github.io/articles/20210531a/</id>
    <published>2021-05-30T15:00:00.000Z</published>
    <updated>2021-06-14T01:31:03.828Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤太斉</a>です。</p><p>2021年もServerless連載を開催します！</p><h2 id="サーバーレスについて"><a href="#サーバーレスについて" class="headerlink" title="サーバーレスについて"></a>サーバーレスについて</h2><img src="/images/20210531a/lightning-bolt-1203953_640.png" alt="" width="640" height="360" loading="lazy"><p>サーバーレスは、「サーバーが存在しない」ではなく「サーバーの管理を不要、もしくは極小化する」ことを主眼においた考え方です。</p><p>パブリッククラウドには必ずと言っていいほどFaaS（Function as a Service）が存在し、それらを一般的にサーバーレスサービスとして扱っています。代表的にはAWSのLambda、GCPのCloud Functionsなどが該当し、どんなシステムを構築する際にも目にするようになりました。</p><p>クラウドリフトにおいては従来Cronなどをジョブで回していたものをクラウドのレイヤに切り出して管理しやすくしたり、新規サービスを構築する場合では従来のようにIaaS中心の構成ではなく、サーバーレスアーキテクチャを検討、利用することも増えています。</p><p>フューチャーでも先日サーバーレスアーキテクチャを主とした案件の<a href="https://prtimes.jp/main/html/rd/p/000000465.000004374.html">プレスリリース</a>を展開しており、社内でも関心が高まり、浸潤しています。</p><p>そんなより盛り上がりを見せているサーバーレスについて連載として2021年も取り上げます。</p><h2 id="連載計画"><a href="#連載計画" class="headerlink" title="連載計画"></a>連載計画</h2><p>2021年の連載順は以下になっています！</p><p>掲載順や日付が変わることがありますが、ご了承ください。</p><div class="scroll"><table><thead><tr><th>日付</th><th>名前</th><th>タイトル</th></tr></thead><tbody><tr><td>5/31</td><td>棚井龍之介</td><td><a href="/articles/20210531b/">Kinesis+Lambda構成での、処理遅延を監視する</a></td></tr><tr><td>6/1</td><td>真野隼記</td><td><a href="/articles/20210601a/">15分の壁を超えて。Lambda分散実行術</a></td></tr><tr><td>6/2</td><td>伊藤真彦</td><td><a href="/articles/20210602a/">LambdaにおけるGo Contextの取り扱い</a></td></tr><tr><td>6/3</td><td>辻大志郎</td><td>静的解析によるInvalidなAWS Lambda関数シグネチャの検知</td></tr><tr><td>6/4</td><td>澁川喜規</td><td>続・サーバーレス検索エンジン</td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今やクラウドを使う時に必ずどこかで利用するといっても過言ではないサーバーレスのサービスですが、サーバーのことをある程度気にしない（=マネージドに寄せる）など管理を楽にするためにも今度もどんどん使っていきたいですね！</p><p>2020年の連載もぜひ見てください！</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200322/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200322%2F&key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIGの&lt;a href=&quot;https://twitter.com/kaedemalu&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;2021年もServerless連載を開催します！&lt;/p&gt;
&lt;h2 id=&quot;サーバーレスについて&quot;&gt;&lt;a href=&quot;#サーバーレスにつ</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
  </entry>
  
  <entry>
    <title>Airflow Breeze を利用してローカルで Airflow を起動する</title>
    <link href="https://future-architect.github.io/articles/20210528a/"/>
    <id>https://future-architect.github.io/articles/20210528a/</id>
    <published>2021-05-27T15:00:00.000Z</published>
    <updated>2021-05-27T15:51:37.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>TIG の多賀です。</p><p>OSS として Airflow へ貢献するにあたり、ローカルでの実行やテストの環境整備が必要になります。また、 Airflow を利用するにあたってもローカルでの動作確認をしたいケースは多いかと思います。</p><p>Airflow では、 <code>Airflow Breeze</code> と呼ばれる環境が整備され、公式より提供されています。当記事では、 <code>Airflow Breeze</code> について概要を記載し、 Airflow への OSS 貢献の入り口となれば良いと考えています。</p><h2 id="Airflow-Breeze-とは"><a href="#Airflow-Breeze-とは" class="headerlink" title="Airflow Breeze とは"></a>Airflow Breeze とは</h2><p>Airflow Breeze とは、ローカルで Airflow を簡単に実行できるように整備された環境を指します。実態はコンテナベースで構築され、Docker Compose が利用されています。</p><img src="/images/20210528a/AirflowBreeze_logo.png" alt="Airflow Breezeロゴ" loading="lazy"><p><a href="https://github.com/apache/airflow/blob/master/images/AirflowBreeze_logo.png">airflow/AirflowBreeze_logo.png at master · apache/airflow</a></p><p>Airflow Breeze の環境を整備することで、Airflow が依存する外部コンポーネント(MySQL, Redis, etc..) を完全に含んだ環境を作成できます。<br>一方、リソースを結構使うため注意が必要です。</p><p>詳細はドキュメントととしてまとまっています。当記事ではピックアップした情報を記載します。<br><a href="https://github.com/apache/airflow/blob/master/BREEZE.rst">airflow/BREEZE.rst at master · apache/airflow</a></p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>以下環境で整備します。</p><ul><li>macOS Mojave 10.14.6</li><li>Docker version 20.10.6, build 370c289</li><li>docker-compose version 1.29.1, build c34c88b2</li><li>Airflow master branch (commit hash: 180df03482b07c18a57d20235ccdd1c3a12d9173)</li></ul><h3 id="Breeze-Install"><a href="#Breeze-Install" class="headerlink" title="Breeze Install"></a>Breeze Install</h3><p><code>getopt</code> と <code>gstat</code> が必要なため、インストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gnu-getopt coreutils</span><br></pre></td></tr></table></figure><p><code>getopt</code> 向けに PATH を通します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/opt/gnu-getopt/bin:<span class="variable">$PATH</span></span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">❯ getopt --version</span><br><span class="line">getopt from util-linux 2.36.2</span><br><span class="line"></span><br><span class="line">❯ gstat --version</span><br><span class="line"><span class="built_in">stat</span> (GNU coreutils) 8.32</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Written by Michael Meskes.</span><br></pre></td></tr></table></figure><p>つづいて、Airflow のリポジトリを clone します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/airflow.git</span><br></pre></td></tr></table></figure><p>clone した Airflow リポジトリへ移動して、Breeze をインストールして Airflow を 起動します。<br>( <code>./breeze</code> 内部は 長大な Shell Script になっています。)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./breeze start-airflow</span><br></pre></td></tr></table></figure><p>ここから完了まで 10分程度待ちます。</p><p>完了すると、Airflow コンテナ内にログインした状態になります。</p><p>自動で tmux のセッションが開始され、以下のような画面が出てきます。</p><img src="/images/20210528a/スクリーンショット_2021-05-20_10.45.22.png" alt="tmuxの画面" loading="lazy"><p>各 Pane ごとに整理すると以下のようになります。</p><div class="scroll"><table><thead><tr><th>Pane 位置</th><th></th><th>実行コマンド</th></tr></thead><tbody><tr><td>左上</td><td>airflow コンテナシェルログイン</td><td>-</td></tr><tr><td>右上</td><td>airflow ui</td><td><code>cd /opt/airflow/airflow/www/; yarn install --frozen-lockfile; yarn dev</code></td></tr><tr><td>左下</td><td>airflow scheduler 実行</td><td><code>airflow scheduler</code></td></tr><tr><td>右下</td><td>airflow webserver 実行</td><td><code>airflow webserver</code></td></tr></tbody></table></div><p>Airflow の実行と tmux を終了したい場合は、 <code>airflow_stop</code> コマンドをコンテナ内で実行することで終了できます。<br>ブラウザで  <code>http://127.0.0.1:28080</code> へリクエストすると Airflow UI へアクセスできます。(ログインは ユーザー/パスワード 共に <code>admin</code> です。)</p><img src="/images/20210528a/スクリーンショット_2021-05-20_10.35.21.png" alt="Airflow管理画面" loading="lazy"><h3 id="Breeze-環境"><a href="#Breeze-環境" class="headerlink" title="Breeze 環境"></a>Breeze 環境</h3><p>環境変数 <code>AIRFLOW_HOME</code> は、 <code>/root/airflow</code> になっています。<br>ログイン後には、 環境変数 <code>AIRFLOW_SOURCE</code> である <code>/opt/airflow</code> 配下におり、こちらはローカル端末の Airflow ソースコードがコピーされています。(対象は <code>.dockerignore</code> で絞り込まれているので全ソースコードではないです。)</p><p>動作確認用に DAG ファイルを配置したい場合、ローカル端末の airflow 直下 <code>./files/dags</code> 以下に配置することで反映されます。コンテナ内の <code>AIRFLOW__CORE__DAGS_FOLDER</code> 環境変数がコンテナ内 <code>/files/dags</code>  を指しており、コンテナ内 <code>/files/dags</code> はローカル端末上の <code>./files/dags</code> をマウントしているためです。</p><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#dags-folder">AIRFLOW__CORE__DAGS_FOLDER — Airflow Documentation</a></p><p>ファイルを配置してから Airflow UI への反映は5分程度ラグがあります。</p><img src="/images/20210528a/スクリーンショット_2021-05-20_11.13.08.png" alt="Airflow UI" loading="lazy"><p><strong>※ 補足</strong><br>UI 反映のラグを短くしたい場合は、 コンテナ内 <code>/root/airflow/airflow.cfg</code> の以下設定値を修正の上、airflow webserver/scheduler を再起動することで反映できます。<br>(※ ディレクトリの読み込み頻度を上げるほど、サーバー負荷は上がります。)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># デフォルトで 5分設定のためより短い秒数を指定</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># How often (in seconds) to scan the DAGs directory for new files. Default to 5 minutes.</span></span><br><span class="line">dag_dir_list_interval = 300</span><br></pre></td></tr></table></figure><h3 id="breeze-コマンド"><a href="#breeze-コマンド" class="headerlink" title="breeze コマンド"></a>breeze コマンド</h3><p>breeze コマンドにはいくつかのサブコマンドが用意されています。</p><p><code>コンテナ内シェルログイン</code><br>(※ airflow webserver/scheduler は起動しない)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./breeze (shell)</span><br></pre></td></tr></table></figure><p><code>再起動</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./breeze restart</span><br></pre></td></tr></table></figure><p><code>開始/停止</code><br>(※ airflow webserver/scheduler を起動する)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./breeze start-airflow/stop</span><br></pre></td></tr></table></figure><p><code>イメージの削除</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./breeze cleanup-image</span><br></pre></td></tr></table></figure><p>その他いろいろ用意されています。<br><a href="https://github.com/apache/airflow/blob/master/BREEZE.rst#airflow-breeze-syntax">airflow/BREEZE.rst at master · apache/airflow</a></p><h3 id="テスト実行"><a href="#テスト実行" class="headerlink" title="テスト実行"></a>テスト実行</h3><p>CI の環境としても利用されていることもあり、テストを実行することができます。</p><p>Airflow ではテストの種類としては以下3種類が定義されています。 (<a href="https://github.com/apache/airflow/blob/master/TESTING.rst#airflow-test-infrastructure">airflow/TESTING.rst at master · apache/airflow</a> より)</p><ul><li>Unit Tests<ul><li>単体テスト。追加の Integration は不要であり、Airflow 実行環境内で完結する。</li><li>ローカル仮想環境 or Breeze 環境下で実施</li></ul></li><li>Integration Tests<ul><li>結合テスト。外部 Integration を用意しテストを行う。Integration は実際のサービスを起動して実施する。(コンテナ利用)</li><li>Breeze 環境下で実施</li></ul></li><li>System Tests<ul><li>システムテスト。外部システムと連携して行うテスト</li><li>システム実行環境下(クラウド環境等) で実際に動かすテストを指す</li></ul></li></ul><p>ここでは、 Unit Tests と Integration Tests について詳細を記載します。</p><h4 id="Unit-Tests"><a href="#Unit-Tests" class="headerlink" title="Unit Tests"></a>Unit Tests</h4><p>Breeze 環境へログインして、 <code>pytest</code> を実行することでテスト可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Breeze 環境へログイン</span></span><br><span class="line">❯ ./breeze shell</span><br><span class="line"></span><br><span class="line">root@b12df7904cd7:/opt/airflow<span class="comment"># pytest tests/core/test_core.py::TestCore::test_check_operators</span></span><br><span class="line">============================================================================== <span class="built_in">test</span> session starts ===============================================================================</span><br><span class="line">platform linux -- Python 3.6.13, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/<span class="built_in">local</span>/bin/python</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">rootdir: /opt/airflow, configfile: pytest.ini</span><br><span class="line">plugins: forked-1.3.0, rerunfailures-9.1.1, xdist-2.2.1, flaky-3.7.0, celery-4.4.7, timeouts-1.2.1, cov-2.11.1, httpx-0.12.0, instafail-0.4.2, requests-mock-1.9.2</span><br><span class="line">setup timeout: 0.0s, execution timeout: 0.0s, teardown timeout: 0.0s</span><br><span class="line">collected 1 item</span><br><span class="line"></span><br><span class="line">tests/core/test_core.py::TestCore::test_check_operators PASSED                                                                                                             [100%]</span><br><span class="line">========================================================================= 1 passed, 7 warnings <span class="keyword">in</span> 8.43s ==========================================================================</span><br></pre></td></tr></table></figure><h4 id="Integration-Test"><a href="#Integration-Test" class="headerlink" title="Integration Test"></a>Integration Test</h4><p>Breeze 環境はデフォルトでは、 Integration コンポーネントを起動しない設定になっており、該当の Integration Test もスキップされます。<br>Integration Test を実施したい場合は、Breeze 起動時にフラグを指定します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis 利用テスト準備</span></span><br><span class="line">./breeze --integration redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis コンテナも起動される</span></span><br><span class="line">❯ docker ps</span><br><span class="line">CONTAINER ID   IMAGE                                COMMAND                  CREATED          STATUS                    PORTS                                                                                      NAMES</span><br><span class="line">f9687f175fb7   apache/airflow:master-python3.6-ci   <span class="string">&quot;/usr/bin/dumb-init …&quot;</span>   30 seconds ago   Up 21 seconds             0.0.0.0:25555-&gt;5555/tcp, :::25555-&gt;5555/tcp, 0.0.0.0:28080-&gt;8080/tcp, :::28080-&gt;8080/tcp   docker-compose_airflow_run_748d17ffd2bd</span><br><span class="line">c3fe4b732d64   redis:5.0.1                          <span class="string">&quot;docker-entrypoint.s…&quot;</span>   41 seconds ago   Up 37 seconds (healthy)   0.0.0.0:26379-&gt;6379/tcp, :::26379-&gt;6379/tcp                                                docker-compose_redis_1</span><br></pre></td></tr></table></figure><p>テスト実行は、 <code>pytest</code> が利用されています。起動したコンテナ内で実行します。<br>Integration テスト実行のためには、 <code>--integration</code> パラメータで利用する Integration を指定します。内部的には <code>@pytest.mark.integration</code> アノテーションで制御されており、パラメータ指定した Integration テストを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Breeze 環境へログイン</span></span><br><span class="line">❯ ./breeze shell</span><br><span class="line"></span><br><span class="line">root@319e81b37959:/opt/airflow<span class="comment"># pytest --tb=no --integration redis tests/providers/redis/hooks/</span></span><br><span class="line">__init__.py    test_redis.py</span><br><span class="line">root@319e81b37959:/opt/airflow<span class="comment"># pytest --tb=no --integration redis tests/providers/redis/hooks/test_redis.py::TestRedisHook::test_real_get_and_set</span></span><br><span class="line">============================================================================== <span class="built_in">test</span> session starts ===============================================================================</span><br><span class="line">platform linux -- Python 3.6.13, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/<span class="built_in">local</span>/bin/python</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">rootdir: /opt/airflow, configfile: pytest.ini</span><br><span class="line">plugins: forked-1.3.0, rerunfailures-9.1.1, xdist-2.2.1, flaky-3.7.0, celery-4.4.7, timeouts-1.2.1, cov-2.11.1, httpx-0.12.0, instafail-0.4.2, requests-mock-1.9.2</span><br><span class="line">setup timeout: 0.0s, execution timeout: 0.0s, teardown timeout: 0.0s</span><br><span class="line">collected 1 item</span><br><span class="line"></span><br><span class="line">tests/providers/redis/hooks/test_redis.py::TestRedisHook::test_real_get_and_set PASSED                                                                                     [100%]</span><br><span class="line"></span><br><span class="line">=============================================================================== 1 passed <span class="keyword">in</span> 1.34s ================================================================================</span><br></pre></td></tr></table></figure><h4 id="Kubernetes-Tests"><a href="#Kubernetes-Tests" class="headerlink" title="Kubernetes Tests"></a>Kubernetes Tests</h4><p>Integration Tests の一種である、Kubernetes 上での実行のテストも Breeze 上で実行することができます。(標準で整備されていることからも Kubernetes 上での実行が当たり前な世界が垣間見えますね。)<br>Kubernetes Cluster は <a href="https://kind.sigs.k8s.io/">Kind</a> を利用してローカル環境上に起動します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./breeze kind-cluster start</span><br></pre></td></tr></table></figure><p>Cluster が起動したら、Airflow を Kubernetes へデプロイします。(少し待ちます)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./breeze kind-cluster deploy</span><br></pre></td></tr></table></figure><p>デプロイが完了すると Airflow が Kubernetes 上で起動してます。<br><code>http://127.0.0.1:8080</code> へアクセスすると Airflow UI が確認できます。(※ ポートが Breeze と違うので注意してください。ユーザー/パスは <code>admin</code> です。)</p><img src="/images/20210528a/Pasted_image_20210520175955.png" alt="Airflow UI" loading="lazy"><p>テストを実行してみます。テストはローカル端末上で以下コマンドで実行できます。<br>(ローカル端末上に仮想環境が作成されます。コマンド内で <code>./scripts/ci/kubernetes/ci_run_kubernetes_tests.sh</code> (<a href="https://github.com/apache/airflow/blob/master/scripts/ci/kubernetes/ci_run_kubernetes_tests.sh">参照</a>)を実行しています。)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">❯ ./breeze kind-cluster <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">============================================================================== <span class="built_in">test</span> session starts ===============================================================================</span><br><span class="line">platform darwin -- Python 3.6.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /Users/taga3041/.ghq/github.com/apache/airflow/.build/.kubernetes_venv/airflow-python-3.6-v1.20.2_host_python_3.6/bin/python3</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">rootdir: /Users/taga3041/.ghq/github.com/apache/airflow, configfile: pytest.ini</span><br><span class="line">plugins: cov-2.11.1</span><br><span class="line">collected 53 items</span><br><span class="line"></span><br><span class="line">kubernetes_tests/test_kubernetes_executor.py::TestKubernetesExecutor::test_integration_run_dag PASSED                                                                      [  1%]</span><br><span class="line">kubernetes_tests/test_kubernetes_executor.py::TestKubernetesExecutor::test_integration_run_dag_with_scheduler_failure PASSED                                               [  3%]</span><br><span class="line">kubernetes_tests/test_kubernetes_pod_operator.py::TestKubernetesPodOperatorSystem::test_config_path_move PASSED                                                            [  5%]</span><br><span class="line">...</span><br><span class="line">kubernetes_tests/test_other_executors.py::TestCeleryAndLocalExecutor::test_integration_run_dag SKIPPED (Does not run on KubernetesExecutor)                                [ 98%]</span><br><span class="line">kubernetes_tests/test_other_executors.py::TestCeleryAndLocalExecutor::test_integration_run_dag_with_scheduler_failure SKIPPED (Does not run on KubernetesExecutor)         [100%]</span><br><span class="line"></span><br><span class="line">============================================================= 51 passed, 2 skipped, 4 warnings <span class="keyword">in</span> 404.65s (0:06:44) ==============================================================</span><br><span class="line">Exported logs <span class="keyword">for</span> cluster <span class="string">&quot;airflow-python-3.6-v1.20.2&quot;</span> to:</span><br><span class="line">/tmp/kind_logs_2021-05-20_0_0</span><br></pre></td></tr></table></figure><p>最後に Cluster を停止します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./breeze kind-cluster stop</span><br></pre></td></tr></table></figure><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>Airflow にて提供されている、ローカル環境/テスト環境向けの Airflow Breeze について紹介しました。<code>./breeze</code> コマンドで諸々整備されていて便利ですが、様々なコンポーネントが関与しているため、動かすのに少し苦労しました(プロキシ周りがほとんどですが)。</p><p>それだけ複雑なテストケースが想定されていて、OSS でここまで管理されているのは改めてすごいなと思いました。</p><p>Airflow はクセが強いですが 最近(2020/12) バージョン 2.0 にアップデートされたりして、積極的に改善されており今後も注目な OSS だと思います。次は何かしらコントリビュートしたいです。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/apache/airflow/blob/master/BREEZE.rst#running-kubernetes-tests">airflow/BREEZE.rst at master · apache/airflow</a></li><li><a href="https://github.com/apache/airflow/blob/master/TESTING.rst#running-tests-with-kubernetes">airflow/TESTING.rst at master · apache/airflow</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;TIG の多賀です。&lt;/p&gt;
&lt;p&gt;OSS として Airflow へ貢献するにあたり、ローカルでの実行やテストの環境整備が必要になります。</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="Airflow" scheme="https://future-architect.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night #9 ～運用で後悔しないためのAWS設計術～　を開催しました。</title>
    <link href="https://future-architect.github.io/articles/20210527a/"/>
    <id>https://future-architect.github.io/articles/20210527a/</id>
    <published>2021-05-26T15:00:00.000Z</published>
    <updated>2021-05-27T01:16:44.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG村瀬です。</p><p>2021/4/21(水)に<a href="https://future.connpass.com/event/209778/">Future Tech Night #9 ～運用で後悔しないためのAWS設計術～</a>を開催しました。<br>私は、運用まで考慮したクラウドアーキテクチャ設計できていますか？というタイトルでお話させていただきました。</p><script async class="speakerdeck-embed" data-id="104031a6a5794ecaa26d0e160e660617" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h1 id="発表内容"><a href="#発表内容" class="headerlink" title="発表内容"></a>発表内容</h1><p>設計と異なり運用はサービスが終了するまでずっと続きます。</p><p>アーキテクトの中には設計フェーズまでしか関わらず、運用担当者の苦労を知らない人もいるのでは？と思い、運用にフォーカスした設計の話をしました。<br>目次は以下の通りです。</p><ul><li>会社紹介</li><li>システムが増加していっても耐えられる設計をしよう</li><li>インシデント発生から早期復旧のために</li><li>踏み台について</li><li>設定一つで自動的に削除しよう</li><li>まとめ</li></ul><p>視聴者に一つでも新発見があれば良いなと思い、AWSアカウント設計、監視ポイント、踏み台の取り扱いと大小様々なポイントを説明させていただきました。</p><h2 id="内容をチラ見せ"><a href="#内容をチラ見せ" class="headerlink" title="内容をチラ見せ"></a>内容をチラ見せ</h2><img src="/images/20210527a/p1.png" alt="AWSインフラの問題" width="956" height="536" loading="lazy"><img src="/images/20210527a/p2.png" alt="監視対象の図。LB,EC2,DB" width="959" height="539" loading="lazy"><p>気になるものがありましたら<a href="https://future.connpass.com/event/209778/presentation/">発表資料</a>も見てみてください。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>フューチャーでは大規模案件を取り扱うことが大半なのでアーキテクチャ設計をしっかり行わないと非機能要件が満たせずプロジェクトが破綻してしまいます。</p><p>未来を見通すのはなかなか難しいですが後になって大幅な設計見直しをしないで済むよう最初からハマりどころを押さえた上で設計をしましょう。また運用担当者に喜ばれるような設計を心掛けましょう。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG村瀬です。&lt;/p&gt;
&lt;p&gt;2021/4/21(水)に&lt;a href=&quot;https://future.con</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="保守運用" scheme="https://future-architect.github.io/tags/%E4%BF%9D%E5%AE%88%E9%81%8B%E7%94%A8/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
</feed>
