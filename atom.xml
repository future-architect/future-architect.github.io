<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Future Tech Blog - フューチャーアーキテクト</title>
  
  <subtitle>フューチャー開発者ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-01-23T02:32:10.004Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する</title>
    <link href="https://future-architect.github.io/articles/20200123/"/>
    <id>https://future-architect.github.io/articles/20200123/</id>
    <published>2020-01-23T02:02:12.000Z</published>
    <updated>2020-01-23T02:32:10.004Z</updated>
    
    <content type="html"><![CDATA[<p>Auth0のパスワードレス認証を説明します。該当の機能を使うことで、ユーザがパスワードの入力をスキップして認証を行うことができます。イメージとしてはSlackのMagic Linkのような振る舞いです。</p><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>Auth0が提供するVue.jsのサンプル実装をベースに説明します。手元で動作確認をする場合は、下記を事前にcloneしてください。このリポジトリにある<code>01-Login</code>のディレクトリにあるアプリケーションを使います。</p><p><a href="https://github.com/auth0-samples/auth0-vue-samples" target="_blank" rel="noopener">https://github.com/auth0-samples/auth0-vue-samples</a></p><p>事前準備に関しては、以前の<a href="https://future-architect.github.io/articles/20200122/">弊社 山田の記事</a>で詳しく解説しておりますので、省略して記載を行います。</p><h2 id="Applicationの作成"><a href="#Applicationの作成" class="headerlink" title="Applicationの作成"></a>Applicationの作成</h2><p><code>CREATE APPLICATION</code>をクリックし、<code>Single Page Web Applications</code>を選択して作成をします。今回は検証用にApplication NameをPasswordlessSPAにしました。ここはどんな名前でもOKですし、日本語でも構いません。</p><p>また、書きのパラメータは全て<code>http://localhost:3000</code>を設定してください。</p><ul><li>Allowed Callback URLs</li><li>Allowed Web Origins</li><li>Allowed Logout URLs</li></ul><p>特に忘れがちなのが<code>Allowed Web Origins</code>で、これが空白だとサンプルアプリケーションが<a href="https://auth0.com/docs/api-auth/tutorials/silent-authentication" target="_blank" rel="noopener">Silent Authentication</a>に失敗します。これに関しては補足として後述をします。</p><img src="/images/20200123/photo_20200123_01.png" style="border:solid 1px #000000"><h2 id="サンプルアプリケーションにパラメータを設定"><a href="#サンプルアプリケーションにパラメータを設定" class="headerlink" title="サンプルアプリケーションにパラメータを設定"></a>サンプルアプリケーションにパラメータを設定</h2><p><code>auth_config.json.example</code>をコピーして、同フォルダに<code>auth_config.json</code>を作成します。<code>domain</code>と<code>clientId</code>は上記で作成したアプリケーションの値を設定してください。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"domain"</span>: <span class="string">"my-tenant-name.au.auth0.com"</span>,</span><br><span class="line">  <span class="attr">"clientId"</span>: <span class="string">"abcdefg"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ローカルでサンプルアプリケーションを起動し、ブラウザで<code>localhost:3000</code>へアクセスします。右上に表示されるLoginをクリックし、Auth0のログイン画面が出ればOKです。</p><img src="/images/20200123/s1.png" class="img-small-size"><h1 id="パスワードレス認証の設定-Email編"><a href="#パスワードレス認証の設定-Email編" class="headerlink" title="パスワードレス認証の設定 - Email編"></a>パスワードレス認証の設定 - Email編</h1><p>ここからが本題です。パスワードレス認証の設定を行います。<br>Auth0のダッシュボードを開き、Connections→Passwordlessを選択します。</p><p>SMSとEmailの両方が提供されています。後ほどSMSも解説しますので、まずはEmailの方をアクティブにしてみてください。</p><img src="/images/20200123/photo_20200123_02.png" style="border:solid 1px #000000"><p>ポップアップが開くので<code>SAVE</code>をクリックします。</p><img src="/images/20200123/photo_20200123_03.png"><p>EmailのPasswordless認証が有効になったので、PasswordlessSPAのアプリケーション設定からConnectionsタブを選択し、有効化を実施します。</p><img src="/images/20200123/photo_20200123_04.png" style="border:solid 1px #000000"><p>Universal Loginを変更します。</p><ul><li>Universal Loign → Loginタブ</li><li>Customize Login PageをONにする</li><li>プルダウンからLock(passwordless)を選択する</li></ul><img src="/images/20200123/s2.png" style="border:solid 1px #000000"><p>今回はリンクをクリックすれば認証可能にしたいため、テンプレートを修正します。といっても1行だけ追加でOKです。<code>Auth0LockPasswordless</code>を初期化している処理の引数に1行を追加します。これで準備OKです。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      assetsUrl:  config.assetsUrl,</span><br><span class="line">      allowedConnections: connection ? [connection] : null,</span><br><span class="line"><span class="addition">+     passwordlessMethod: 'link',</span></span><br><span class="line">      rememberLastLogin: !prompt,</span><br></pre></td></tr></table></figure><h1 id="Passwordless認証を動かしてみる"><a href="#Passwordless認証を動かしてみる" class="headerlink" title="Passwordless認証を動かしてみる"></a>Passwordless認証を動かしてみる</h1><p><code>localhost:3000</code>にアクセスしてログインをクリックしてみます。Auth0がホスティングしているログイン画面へ遷移します。</p><img src="/images/20200123/s3.png" class="img-small-size" style="border:solid 1px #000000"><p>リンク付きEmailが送信されるか確認してみます。メールアドレスを入力してSUBMITをクリックします。</p><img src="/images/20200123/s4.png" class="img-small-size"><p>メールが届いていました。リンクをクリックします。デフォルト設定の場合、URLの有効期限が180秒を経過すると切れるので注意です。</p><img src="/images/20200123/s5.png" class="img-small-size"><p>サンプルアプリケーションで初回ログインの場合は、同意画面(Consent Dialog)が表示されます。localhostで起動するアプリケーションの場合は、初回ログイン時に必ず表示がされます。これはAuth0の仕様です。Acceptをクリックして進めます。</p><img src="/images/20200123/s6.png" class="img-small-size"><p><code>localhost:3000</code>へリダイレクトされ、ログイン済みであることが確認できます。私のアカウントがgravatorを設定していないのでわかりにくいですが、ログインしてEmailを取得できています。</p><img src="/images/20200123/photo_20200123_05.png" class="img-middle-size" style="border:solid 1px #000000"><h1 id="パスワードレス認証の設定-SMS編"><a href="#パスワードレス認証の設定-SMS編" class="headerlink" title="パスワードレス認証の設定 - SMS編"></a>パスワードレス認証の設定 - SMS編</h1><p>SMSのパスワードレス認証を動かしてみます。SMSの場合はリンクのログインが使えないため、残念がらMagic Linkの振る舞いは実現できません。代わりに検証コードをSMSでスマホへ送信するタイプの認証を設定します。</p><p>SMSはTwilioを使う必要があるため、事前にTwilioへ登録を済ませておき、以下パラメータを取得しておきます。</p><ul><li>Account SID</li><li>Auth Token</li><li>電話番号<ul><li>Twilioは無料プランで使うため、Trial Numberを使います</li></ul></li></ul><img src="/images/20200123/photo_20200123_06.png" style="border:solid 1px #000000"><p>Auth0 Dashboarへ戻ります。Emailと同様にConnections→Passwordlessを選択して、SMSをONにします。</p><img src="/images/20200123/photo_20200123_07.png" style="border:solid 1px #000000"><p>Twilioのパラメータを入力する項目があるので設定します。入力後にSAVEをクリックします。</p><img src="/images/20200123/photo_20200123_08.png" class="img-middle-size" style="border:solid 1px #000000"><p>PasswordlessSPAの設定画面へ戻り、ConnectionsからPasswordless SMSをONにします。</p><img src="/images/20200123/photo_20200123_09.png" class="img-middle-size" style="border:solid 1px #000000"><p>Universal Loginのテンプレートを修正します。allowedConnectionsとpasswordlessMethodのパラメータを修正します。これでSMS認証ができるようになりました。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      assetsUrl:  config.assetsUrl,</span><br><span class="line"><span class="deletion">-     allowedConnections: connection ? [connection] : null,</span></span><br><span class="line"><span class="deletion">-     passwordlessMethod: 'link',</span></span><br><span class="line"><span class="addition">+     allowedConnections: ['sms'],</span></span><br><span class="line"><span class="addition">+     passwordlessMethod: 'code',</span></span><br><span class="line">      rememberLastLogin: !prompt,</span><br></pre></td></tr></table></figure><p>localhost:3000にアクセスしてログインをクリックします。ログイン状態の場合は一度ログアウトしてから、同じ操作をしてください。</p><p>無事に電話番号入力の画面が表示されていれば成功です。試しに携帯電話番号を入力してSUBMITを実行してください。</p><img src="/images/20200123/photo_20200123_10.png" class="img-small-size"><p>検証コード入力画面が表示されました。検証コードはSMSでスマホへ届きます。試しに自身のスマホに送信をしましたが、上手く届きました。</p><img src="/images/20200123/photo_20200123_11.png" class="img-small-size"><img src="/images/20200123/photo_20200123_12.jpg" class="img-small-size"><p>この6桁の検証コードを入力するとログインができます。初回ログインとなるため、電話番号でユーザアカウントが作成されます。</p><img src="/images/20200123/photo_20200123_13.png" style="border:solid 1px #000000"><h1 id="補足-Silent-Authentication"><a href="#補足-Silent-Authentication" class="headerlink" title="補足 - Silent Authentication"></a>補足 - Silent Authentication</h1><p>ログインした後、同じブラウザで再び<code>localhost:3000</code>へアクセスをすると、自動的にログイン状態になるのがわかると思います。これはサンプルプロジェクトがVueの実行時に、Silent Authenticationというアクセスを行って実現しています。</p><p>Auth0がホスティングする認証画面はセッション機能があります。同じブラウザで同一テナント認証画面へアクセスする場合、セッションが残っていれば認証をスキップします。（セッションの有効期間は変更することも可能）</p><p>サンプルアプリケーションは実行と同時に、Auth0側のセッションが残っているか確認を実施します。テナントへのアクセスはSilent Authenticationという方法を利用して実施します。</p><p>興味のある方はドキュメントへのリンクを書いておきますので、読んでみてください。丁寧に書かれていてわかりやすいです。</p><ul><li><a href="https://auth0.com/docs/sessions/concepts/session-lifetime" target="_blank" rel="noopener">Session Lifetime</a></li><li><a href="https://auth0.com/docs/api-auth/tutorials/silent-authentication" target="_blank" rel="noopener">Set Up Silent Authentication</a></li></ul><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>Auth0のパスワードレス認証を実際に試してみました。Auth0を使えば容易にMagic Linkのような振る舞いを実装することが可能です。Linkでなくても、エンドユーザのスマホにSMSないしEmailで検証コードを送信して、それでアプリケーションに認証することも可能です。</p><p>例えばエンタープライズの分野では、人がよく入れ替わる領域の認証をシンプルにしたいという要望があります。Auth0の提供するパスワードレス認証は、そういったクライアントのユースケースへとても合う機能だと思います。</p><p>関連記事：</p><ul><li><a href="/articles/20200122/">Auth0 導入編</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Auth0のパスワードレス認証を説明します。該当の機能を使うことで、ユーザがパスワードの入力をスキップして認証を行うことができます。イメージとしてはSlackのMagic Linkのような振る舞いです。&lt;/p&gt;
&lt;h1 id=&quot;事前準備&quot;&gt;&lt;a href=&quot;#事前準備&quot; c
      
    
    </summary>
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Auth0 導入編</title>
    <link href="https://future-architect.github.io/articles/20200122/"/>
    <id>https://future-architect.github.io/articles/20200122/</id>
    <published>2020-01-22T01:31:27.000Z</published>
    <updated>2020-01-23T02:13:35.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="始めに"><a href="#始めに" class="headerlink" title="始めに"></a>始めに</h1><p>様々なシステムを構築する中で必ず発生する要素<br><strong>ログイン</strong></p><p>そのログインを支える技術要素<br><strong>認証・認可</strong></p><p>しかし、認証認可の壁は無駄に高く、調べ始めるとまずは数々の専門用語に阻まれ<br><strong>BASIC認証・OAtuh・OpenID・Jwt・Jwk・Jwe…</strong></p><p>次に、認証Flowに阻まれます。<br><strong>Implicit Flow、Client Credentials Flow…etc</strong></p><p>これらを比較的容易に実装する、Auth0を紹介していきます。</p><h1 id="なぜ今回の連載がAuth0なのか？"><a href="#なぜ今回の連載がAuth0なのか？" class="headerlink" title="なぜ今回の連載がAuth0なのか？"></a>なぜ今回の連載がAuth0なのか？</h1><p>社内で以下の要件を持つ案件が複数あり、結果としてそれぞれでAuth0を採用・知見が溜まったため、連載という形をとることにしました。</p><ul><li>OIDC(OpenIdConnect)準拠の要件</li><li>Google/Facebookなどのソーシャル連携の要件</li><li>開発の期間が短い</li><li>メンテナンス費用は抑えたい</li></ul><h1 id="認証認可の実現方式とAuth0の立ち位置"><a href="#認証認可の実現方式とAuth0の立ち位置" class="headerlink" title="認証認可の実現方式とAuth0の立ち位置"></a>認証認可の実現方式とAuth0の立ち位置</h1><p>実現方法は大きく・フルスクラッチ、OSS、SaaSがあると思いますが、Auth0はSaaSのプロダクトとなります。<br>図中には代表的なプロダクトを掲載しています。<br>個別のプロダクトの詳細は今回割愛いたします。</p><ul><li>方式の特徴</li></ul><table><thead><tr><th align="center">特徴</th><th align="center">スクラッチ</th><th align="center">OSS</th><th align="center">SaaS</th></tr></thead><tbody><tr><td align="center">機能</td><td align="center">すべて自分で設計可能</td><td align="center">OSS依存</td><td align="center">SaaS依存</td></tr><tr><td align="center">データ</td><td align="center">自環境内に保持可能</td><td align="center">→</td><td align="center">SaaS基盤に一部からすべてのデータを保存する可能性がある</td></tr><tr><td align="center">非機能</td><td align="center">すべての要件に応じることが可能</td><td align="center">→</td><td align="center">SaaS基盤に依存(※)</td></tr><tr><td align="center">運用・保守</td><td align="center">障害・セキュリティ対応を自チームで対応する必要がある</td><td align="center">→</td><td align="center">SaaSの保証範囲内であれば、障害対応・セキュリティ対応が自動で行われる</td></tr><tr><td align="center">※SaaSによっては個別環境を建てることが可能な場合もあり、この場合はすべての要件に応じることが可能</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><img src="/images/20200122/1.png" style="border:solid 1px #000000"><h1 id="Auth0で実現できる事（機能目次レベル"><a href="#Auth0で実現できる事（機能目次レベル" class="headerlink" title="Auth0で実現できる事（機能目次レベル"></a>Auth0で実現できる事（機能目次レベル</h1><h2 id="機能要約"><a href="#機能要約" class="headerlink" title="機能要約"></a>機能要約</h2><p>詳細は、以下のとおりですが、要約するとこんな形になります。</p><ul><li>OIDC/OAuth2を利用した認証・認可が可能</li><li>画面はAuth0側で自由に作り込みが可能（アプリ内に画面を自分で作り込んで持つことも可能）</li><li>ソーシャル連携が可能（ボタンをオン・オフすると、標準画面にソーシャルログインボタンが出現します）</li><li>MFAが可能</li><li>パイプライン・HOOK機能で、サインアップ・サインイン等、特定のアクションにlambda的なロジックの挟み込むことが出来る</li></ul><h2 id="作り込みが発生する要素"><a href="#作り込みが発生する要素" class="headerlink" title="作り込みが発生する要素"></a>作り込みが発生する要素</h2><p>Auth0は認証情報（メールアドレス・パスワード）以外の情報をAuth0内部に持つことを推奨していないため、個人情報の管理は自分で持つ（構築する）必要があります。<br>おそらくこれが、Auth0を利用する上での最も大きい作り込み要素となります。</p><h2 id="Auth0のメニュー"><a href="#Auth0のメニュー" class="headerlink" title="Auth0のメニュー"></a>Auth0のメニュー</h2><p>※すいません、以前自分でQiitaにまとめたものを転載しています。</p><table><thead><tr><th>機能名</th><th>概要</th></tr></thead><tbody><tr><td>tenant</td><td>auth0上で複数のサービスを展開したい場合に利用する機能<br>UserDB/Rule/Hooksなどの機能全般を分離して扱うことが可能になる</td></tr><tr><td>applications</td><td>認証につなぐアプリケーション単位にアプリケーションを定義する機能<br>認証後のコールバック画面などを個別に定義可能となる</td></tr><tr><td>APIs</td><td>認証後に認可させるAPIの定義機能</td></tr><tr><td>SSO</td><td>アプリケーション間でログインを共有する機能</td></tr><tr><td>Connections-Database</td><td>認証情報・ユーザ情報を管理</td></tr><tr><td>Connections-Social</td><td>ソーシャル連携機能<br>トグルボタンのオンオフでログイン画面に連携ボタンが出てくる</td></tr><tr><td>Connections-Enterprise</td><td>LDAP/AD/SAMLなどのエンタープライズ認証連携機能</td></tr><tr><td>Connections-Passwordless</td><td>SMSログイン、メールログインなどのパスワードレス接続を設定する機能</td></tr><tr><td>Universal Login</td><td>Auth0の組み込み画面（ログイン/パスワードリセット..etc）のデザインを変更できる機能</td></tr><tr><td>Rules</td><td>認証のパイプラインファンクションを追加できる機能<br>ログイン後にユーザ属性追加するなど、認証後のカスタマイズできる</td></tr><tr><td>Hooks(BETA)</td><td>認証・ユーザ登録・ユーザ登録前にフック処理を追加できる機能</td></tr><tr><td>Multi-factor Authentication</td><td>多要素認証を追加できる機能<br>プッシュ/ワンタイムパスワード/SMS/メールなどで実現可能</td></tr><tr><td>Emails</td><td>Auth0の組み込まれているメール文章の変更機能<br>ウェルカムメール、パスワードリセット、アカウント検証メールなどの文章を変更できる</td></tr><tr><td>Logs</td><td>loggingの定義機能</td></tr><tr><td>Anomaly Detection</td><td>不正登録・アクセスからの保護機能<br>Brute-force Protection/Breached-password Detection</td></tr><tr><td>Extensions</td><td>サードパーティー制のアドオンを追加できる機能<br>github・ユーザのインポート/エクスポート等との連携ができる<br>つなげるサービスとの契約は個別に必要</td></tr><tr><td>custom domein</td><td>独自のドメインを設定できる機能<br>ドメインの契約は自分でやる必要がある</td></tr></tbody></table><h1 id="Exampleを動かすまでのhow-to"><a href="#Exampleを動かすまでのhow-to" class="headerlink" title="Exampleを動かすまでのhow-to"></a>Exampleを動かすまでのhow-to</h1><p>なにはともあれ、ハンズオンして動かしてみます。<br>いわゆる<code>やってみた</code>ってやつですね。</p><h2 id="0-前提"><a href="#0-前提" class="headerlink" title="0. 前提"></a>0. 前提</h2><p>サインアップ済みであること</p><h2 id="1-ダッシュボードから初期設定を実行します。"><a href="#1-ダッシュボードから初期設定を実行します。" class="headerlink" title="1. ダッシュボードから初期設定を実行します。"></a>1. ダッシュボードから初期設定を実行します。</h2><img src="/images/20200122/photo_20200122_01.png"><h2 id="２-サンプルアプリケーションを動かし、Auth0と繋ぎます。"><a href="#２-サンプルアプリケーションを動かし、Auth0と繋ぎます。" class="headerlink" title="２. サンプルアプリケーションを動かし、Auth0と繋ぎます。"></a>２. サンプルアプリケーションを動かし、Auth0と繋ぎます。</h2><img src="/images/20200122/photo_20200122_02.png"><p>ここまででサンプルアプリケーションが、Auth0を認証局として利用し、認証・認可を実装出来た形になります。</p><h1 id="ソースコードを見てみる"><a href="#ソースコードを見てみる" class="headerlink" title="ソースコードを見てみる"></a>ソースコードを見てみる</h1><p>詳細は次回以降になりますが、ログイン処理の実装を見てみます。</p><p>まず実装しているコンポーネントはNavBarであることが分かります。<br><img src="/images/20200122/photo_20200122_03.png" style="border:solid 1px #000000"></p><h2 id="1-ログイン状態を確認"><a href="#1-ログイン状態を確認" class="headerlink" title="1. ログイン状態を確認"></a>1. ログイン状態を確認</h2><p>25行目付近<br><code>$auth.isAuthenticated</code> を確認し、ログインしていなければ、ログインボタンを表示します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">"!$auth.isAuthenticated &amp;&amp; !$auth.loading"</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"qsLoginBtn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"btn btn-primary btn-margin"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click.prevent</span>=<span class="string">"login"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-on-clickでlogin実行"><a href="#2-on-clickでlogin実行" class="headerlink" title="2. on clickでlogin実行"></a>2. on clickでlogin実行</h2><p>99行目付近<br><code>this.$auth.loginWithRedirect()</code> によって、ログイン処理（モーダル呼び出し）が行われ、ログイン後はcallbackURLにリダイレクトされます。</p><p>callback先は、アプリケーション設定画面に合ったこちらです。<br><img src="/images/20200122/photo_20200122_04.png" style="border:solid 1px #000000"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  login() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$auth.loginWithRedirect();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ログイン処理を実装するだけであればこれだけです。</p><h1 id="この処理で実装した認証Flow"><a href="#この処理で実装した認証Flow" class="headerlink" title="この処理で実装した認証Flow"></a>この処理で実装した認証Flow</h1><p>詳細は以下のものとなりますが、SPAの場合は今回の数行の実装で <code>Authorization Code Flow</code> を踏むことが出来たことになります。<br>※ てっきり<code>Implicit Flow</code>だと思っていたんですが、この記事を書いているときに<code>Authorization Code Flow</code>だって指摘されました。<br>※ <code>ライブラリのコード読まないとだめだよね</code>って言われて悔しかったです。<br><a href="https://auth0.com/docs/flows" target="_blank" rel="noopener">https://auth0.com/docs/flows</a></p><img src="/images/20200122/photo_20200122_05.png" style="border:solid 1px #000000"><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>何度か認証・認可の仕組みを作る機会があった中で、Auth0を触ったのですが、globalで使わているプロダクトの凄みを感じました。<br>今後も、余程の要件がない限り（データを持ち出せない場合、どうしてもSaaSでは機能が実装できない場合など）SaaSを中心に選定していくことになると思います。<br>何より、認証・認可は本来のビジネスの中心ではないため、可能な限り省力化して実装したい場合が多いのではないでしょうか？</p><p>このブログ記事ではAuth0の導入までを紹介しましたが、次回以降はより実践的な利用法について触れていきたいと思います。</p><hr><p>関連記事：</p><ul><li><a href="/articles/202001223/">Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;始めに&quot;&gt;&lt;a href=&quot;#始めに&quot; class=&quot;headerlink&quot; title=&quot;始めに&quot;&gt;&lt;/a&gt;始めに&lt;/h1&gt;&lt;p&gt;様々なシステムを構築する中で必ず発生する要素&lt;br&gt;&lt;strong&gt;ログイン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;そのログインを支える技
      
    
    </summary>
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>スロットリングとの付き合い方</title>
    <link href="https://future-architect.github.io/articles/20200121/"/>
    <id>https://future-architect.github.io/articles/20200121/</id>
    <published>2020-01-20T23:52:16.000Z</published>
    <updated>2020-01-21T00:13:04.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>Googleで「スロットリング」で検索するとパチスロのリングが沢山ヒットするんですね。<br>今回はその「SLOT リング」ではなく「throttling」関して記載します。</p><h1 id="スロットリングとは"><a href="#スロットリングとは" class="headerlink" title="スロットリングとは"></a>スロットリングとは</h1><p>一定時間内に受信可能なリクエスト数を制限し、制限を上回るリクエストがなされた際には受信を拒否しエラーコードを返却すること。時間経過により再び受信可能となる仕組みです。</p><p>リクエスト数を制限することでシステムにかかる負荷を抑えたり、スパムメールの送信を防止するのに利用されます。</p><p>SaaSであれば有限のコンピューティングをみんなでシェアするのでより多くの人が快適に利用できるよう、一部のユーザからの大量リクエストを制限するのに利用されます。もし無制限にリクエストを受け入れたとするとシステムに負荷がかかり、クライアントへのレスポンスに時間を要したり待たされた挙句にタイムアウトしてしまいます。</p><img src="/images/20200121/1.png" style="border:solid 1px #000000"><p>これは大人気の遊園地が入場制限することで、入場済みの来場者に快適に過ごしてもらうことに似ています。入場前の来場者にとっては好ましくありませんが。。。</p><h1 id="受信拒否時の対応方法"><a href="#受信拒否時の対応方法" class="headerlink" title="受信拒否時の対応方法"></a>受信拒否時の対応方法</h1><p>リクエストする側としては受信拒否されないに越したことはありませんが、拒否された際には以下の対応をするとお行儀が良いです。<br>・少し待ってからリトライする。<br>・ユーザに対してしばらく経ってから再度アクセスするようにアナウンスする。</p><p>遊園地で入場制限がかかるとその日の入園は絶望的で遠方から訪れていると大変がっかりしますが、コンピュータの世界では極短時間です。システムにもよりますが数秒待ってからリトライしてみましょう。一定回数リトライしてみてダメならユーザにしばらく経ってから再度アクセスするようにアナウンスしましょう。</p><h1 id="リトライに一手間加えてスループットを向上させよう"><a href="#リトライに一手間加えてスループットを向上させよう" class="headerlink" title="リトライに一手間加えてスループットを向上させよう"></a>リトライに一手間加えてスループットを向上させよう</h1><p>一定時間待ってからリトライしようとすると同一タイミングで受信拒否されたアクセス数分一斉にアクセスすることになり再度受信拒否されてしまう可能性が高いです。<br>ここは工夫が必要です。<br>方法はいくつもあると思いますがExponential Backoff And Jitterのテクニックが効果的です。<br>詳細は<a href="https://aws.typepad.com/sajp/2015/03/backoff.html" target="_blank" rel="noopener">AWS Solutions Architect ブログ</a>にまとめられているのでそちらをご覧ください。</p><p>少しだけ説明します。</p><h2 id="Exponential-Backoff"><a href="#Exponential-Backoff" class="headerlink" title="Exponential Backoff"></a>Exponential Backoff</h2><p>リトライの間隔を倍々に増加させてく手法<br>例えばリトライの度に1秒,2秒,4秒,8秒と待ち時間を増やしていく。<br>※あくまで例示ですので適切な時間を経過したらエラーであることをユーザにアナウンスしたほうがユーザーフレンドリーです。</p><h2 id="Jitter"><a href="#Jitter" class="headerlink" title="Jitter"></a>Jitter</h2><p>リトライの間隔にばらつきを持たせる手法<br>クライアント毎にランダムな秒数待ってからリトライする。</p><h2 id="Exponential-Backoff-And-Jitter"><a href="#Exponential-Backoff-And-Jitter" class="headerlink" title="Exponential Backoff And Jitter"></a>Exponential Backoff And Jitter</h2><p>リトライの間隔を倍々に増加させた上でばらつかせる</p><img src="/images/20200121/photo_20200121_01.png" class="img-middle-size" style="border:solid 1px #000000">上図は[AWS Solutions Architect ブログ](https://aws.typepad.com/sajp/2015/03/backoff.html)より引用<p>これらのリトライ手法により単位時間あたりのアクセス数が低減でき、スロットリングの受信拒否が起きにくくなります。</p><h1 id="受信拒否の回避方法"><a href="#受信拒否の回避方法" class="headerlink" title="受信拒否の回避方法"></a>受信拒否の回避方法</h1><p>システムにより状況は異なると思われますが概ね以下のような対応が必要です。<br>・受信拒否される要因を分散させる。<br>　送信元のメールアドレスやIPアドレス、APIキーが要因となりえます。<br>・適切にキューイングやWAITを入れ単位時間あたりのリクエスト数を制限する。</p><h1 id="スロットリングを実装する場合"><a href="#スロットリングを実装する場合" class="headerlink" title="スロットリングを実装する場合"></a>スロットリングを実装する場合</h1><p>これまでスロットリングされているサービスを利用する側の視点で説明してきましたが、反対に自分のサービスにスロットリングを実装することを考えてみましょう。</p><p>単位時間あたりのリクエスト数を正確に計測しようとするとRDBMSを利用してリクエストの度にINSERTし、単位時間あたりのリクエスト数を確認する為にSELECTするなどが必要になります。スロットリング処理の割合が高くなり、本来行うべき処理に支障をきたすのでゆるい制御をすることをおすすめします。</p><p>簡易的に行うのであればリクエスト毎の同期処理で閾値判定処理をするのではなく非同期処理で閾値判定し超えていたら一定時間受信を拒否する仕組みが良いと思います。</p><h2 id="簡易的なスロットリングの仕組み"><a href="#簡易的なスロットリングの仕組み" class="headerlink" title="簡易的なスロットリングの仕組み"></a>簡易的なスロットリングの仕組み</h2><p>APIキーを用いてスロットリングされるものとして説明します。</p><img src="/images/20200121/2.png" style="border:solid 1px #000000"><p><strong>サービスプロセス</strong><br>1.クライアントからサービスへAPIキーを付与してアクセスする<br>2.APIキーを含めたアクセスログを出力する<br>3.受信拒否するかどうかAPIキーに対応するロック状態を取得する<br>4.ロック状態により正常なレスポンスか受信拒否のレスポンスを返却する</p><p><strong>スロットリング制御プロセス</strong><br>1.定期的にアクセスログを取得する<br>2.直近の単位時間あたりのアクセス数をAPIキー毎にカウントし、閾値を超えている場合はロック、超えていない場合は非ロックの状態に変更する</p><p>これらにより重い処理はスロットリング制御プロセスが担い、サービスプロセスに負荷をかけずにスロットリング処理が実現できます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>一部の利用者のせいでその他の利用者が不快な思いをしないようにする仕組みであるスロットリング。この仕組みのおかげで大多数の利用者が快適にサービスを利用できます。サービスを利用する場合でもサービスを提供する場合でも他の利用者のことを考慮し適切な対応を心掛けましょう。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20191206">AWS Glueの単体テスト環境の構築手順</a></li><li><a href="/articles/20191101/">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="/articles/20190902/">AWS IAMロールの信頼関係の気になる動作</a></li><li><a href="/articles/20180828">5TB/日 のデータをAWS Glueでさばくためにやったこと（概要編）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;Googleで「スロットリング」で検索するとパチスロのリングが沢山
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>工場をハックするための基本知識　後編</title>
    <link href="https://future-architect.github.io/articles/20200120/"/>
    <id>https://future-architect.github.io/articles/20200120/</id>
    <published>2020-01-20T00:59:49.000Z</published>
    <updated>2020-01-20T23:48:35.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、DXチームの栗田です。前回は<a href="/articles/20191023/">工場をハックするための基礎知識　前編</a>として、制御系システムがどのような構成になっていて、ハードウェア的に何を気にしなければならないかについて述べました。後編では、制御系としてどのような機器がどのような仕組みで動いているか、それらの機器とどのようなやり取りをする必要があるか、さらにどのようなことに気を付けて実装していかなければならないかについて述べます。</p><p>ただし、本記事で「実装する」とはソフトウェア的な作業を指し、ハードウェア的な作業を指しません。つまり、以下で「実装する」という言葉はプログラムコーディング等の行為を指し、電力線を埋設したりカメラを設置したりといった工事等の行為は指さないことにします。</p><h1 id="制御系システムの各機器について"><a href="#制御系システムの各機器について" class="headerlink" title="制御系システムの各機器について"></a>制御系システムの各機器について</h1><p>前編ではPLCやDCSといった名称だけをあげましたが、それらが具体的にどのような仕組みを持っているのか、どうしてそのようなシステムができてきたのかを理解することは非常に大切です。技術が生まれてきた背景を正しく知ることで、その技術をどのように扱うべきかを理解することができます。最初に、制御系システムの特性によって、2種類の分け方を紹介します。前者はそもそもの制御手法の分類として、後者はプラントにおける制御系システムの役割の分類としてです。</p><p>一般的に制御系システム（あるいは制御系）とは、他の機器やシステムを管理し制御するためのシステムを指します。制御系システムは論理制御（逐次制御）とフィードバック制御（線型制御）の２つに大まかに分類されます。細かく分類するとオン／オフ制御やファジ論理制御、さらにはPID制御や比例制御などがありますが、それらの詳細については触れません。</p><p>続いて、制御の特性として、電気系制御システムと計装系制御システムに分類されます。プラントにおいて必要な信号を送る動力源の役割を担うものを電気系制御システムといい、一方で各部の状態を検知し統括して制御する中枢の役割を担うのが計装制御系システムといいます。</p><p>以降では前者の具体的な制御手法の仕組みの話はせず、後者の各制御系システムについてどのようなものがあるかを紹介していきます。</p><h2 id="電気系制御システム"><a href="#電気系制御システム" class="headerlink" title="電気系制御システム"></a>電気系制御システム</h2><p>工場内の電気系システムというと、</p><ol><li>エネルギーとしての電気を受電・変圧し、各設備に供給し</li><li>更にON/OFF信号によって電動機を動かす</li></ol><p>を行います。前者について、工場内の電源供給は各設備取り付けを担う部隊が担当したり、適切な物理接点を設けて電源のやり取りしたり様々なケースがあります。電源供給については今回は触れず<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、後者のON/OFF信号を生成する仕組みについて触れていきます。</p><h3 id="リレー"><a href="#リレー" class="headerlink" title="リレー"></a>リレー</h3><p>リレー（継電器, relay）は、外部から電気信号を受け取り、電気回路のオン/オフや切り替えを行う部品およびその総称です。部品内部に物理的な接点を持つかでスイッチのような有接点リレー（メカニカルリレー）と無接点リレー（MOS FETリレーなど）に分けられますが、後者は半導体や電子部品で構成されます。工場では主に前者のメカニカルリレーが使われ、後者は電子機器等で用いられます。</p><p>メカニカルリレーの場合、物理的な接点があるためわかりやすいです。<br><img src="/images/20200120/photo_20200120_01.png"><br>メカニカルリレーにも複数の種類があり、例えば灯りを点けるスイッチもリレーの一種です。他にはマグネットコンダクタ（電磁継電器, Magnet Conductor; MC）などがあり、MCは内部にコイルと鉄心が入った構成になります。外部から電流が流れることにより内部のコイルが電磁石化し、鉄心が動いて電気回路の接点が開く or 閉まる動作を取ります。<br><img src="/images/20200120/photo_20200120_02.png"><br>メカニカルリレーは、物理的接点を持つため稼働時に音が鳴ります。工場の電気室など、カチャカチャ動作音が鳴っており、初めて入られた際は驚くかもしれません。なお、リレーはタイマー機能を持つものもあり、いくらか遅延時間を設けることもできます。</p><h3 id="PLC"><a href="#PLC" class="headerlink" title="PLC"></a>PLC</h3><p>リレーは簡単に制御回路を組める一方で、動作の変更にはハードウェアの変更が伴います。その点、ソフトウェア的に動作の変更を行えるのがPLCです。PLCはProgrammable Logic Controllerのことで、リレー装置の代替として開発された制御装置です。一般的にシーケンサ<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>とも呼ばれ、工場の機器の制御などに使われる他、身近な設備の制御にも使われています。PLCはソフトウェア的な制御をしますが、IT技術者の領域ではなく、電気技術者の領域に属する制御装置です。いわゆる一般的なPCのように、CPUや電源やI/Oモジュールの組み合わせによって成り立ち、各種拡張モジュールを追加し、様々な機能を付与することができます。なお、IT技術者が最も気になるだろうことを最初に書きますが、PLCにはLANケーブル用のモジュールがあり<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>、TCP/IP通信を行うことができます<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。</p><p>PLCの入出力は基本デジタルであり、各種機器と通信を行います。リミットスイッチ（Limit Switch; LS）<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>のような1 or 0で表現されるものはわかりやすいですが、レベル計<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>などの数値情報は、例えば必要bit分のI/Oを確保して演算します。電流あるいは電圧入出力を行い、特定の閾値でON/OFFが判定されます<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>。また、PLCがアナログ入出力を扱う方法もあります。その際は、ADC/DAC<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>機能を持ったI/Oモジュールを使用します。</p><p>PLC自体は、ラダー言語というリレー回路を模した言語で実装します。ラダー言語はリレー回路を記号化した表記で実装でき、Xで示される入力とYで示される出力、そしてMで表現される内部リレーによって構築される論理回路です。ラダー言語の特徴は、<b>スキャン</b>という概念です。ラダー言語は記述された内容を反復的に実行しますが、「ラダーは記述した順にしか処理をしない」というような特徴があります。つまり、C言語などの多くのプログラム言語で見られれる「先に関数を定義してあとからその関数をコールする」という処理ができず、上から順番に処理を実行する<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>しかありません。そして上から順番に処理を実行するという特性上、ラダー言語の記述量や処理が重くなると、スキャンタイム<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>は大きくなるという特徴があります。</p><img src="/images/20200120/photo_20200120_03.png"><p>IT技術者からするとクセが強く見えるかも知れないラダー言語ですが、前述のようにリレー回路を図式化されており、かつ記述された順番でしか処理が実行されないというシーケンシャルな特徴があります。いくらか慣れが必要ですが、紙面上に印刷することによって比較的処理を追いやすいこともあります。</p><h3 id="なぜPLCやリレー回路がなくならないか"><a href="#なぜPLCやリレー回路がなくならないか" class="headerlink" title="なぜPLCやリレー回路がなくならないか"></a>なぜPLCやリレー回路がなくならないか</h3><p>物理的なIN/OUTを受け入れるだとか、ソフトウェア的な操作が可能化などの観点で使い分けることができます。以下に、大まかな特性をまとめます。</p><table><thead><tr><th align="left"></th><th align="left">制御方法</th><th align="left">長所</th><th align="left">弱点</th><th align="left">特徴</th></tr></thead><tbody><tr><td align="left">リレー</td><td align="left">スイッチ(MCなど)やタイマー</td><td align="left">・規模が小さければ安価に構築可<br>・テスターで保守メンテ可<br>・物理的に電流を遮断可</td><td align="left">・物理接点があるため開閉回数に寿命がある<br>・動作の変更にハード変更が伴い大変</td><td align="left">ブレーカあるいはモーターの制御など大きな電流が流れるような回路を操作するときに使える</td></tr><tr><td align="left">PLC</td><td align="left">ラダー言語</td><td align="left">・無接点なので接点による寿命がない<br>・メモリ上に実装される内部リレーをつかうため入出力点数が増えない<br>・タイミング管理が比較的簡易</td><td align="left">・メンテナンスに専用ツールやソフトが必要<br>・大規模あるいは高度なアルゴリズムの実装には不向き</td><td align="left">現場制御機器のON/OFFなどリアルタイム制御が求められる場面で使える</td></tr><tr><td align="left">PC</td><td align="left">ソフトウェア</td><td align="left">・OSと各種ライブラリによって複雑な制御が可能<br>・安価に高性能なハードを調達可能</td><td align="left">・割り込みがありリアルタイム制御に難<br>・I/FがPLCほど豊富ではない</td><td align="left">実績管理や制御指令を行い人間が直接操作をするような場所に使える</td></tr></tbody></table><p>昨今のPCは非常に強力な演算能力と豊富な拡張モジュールを要していますが、特にリレーといったハードウェア的に制御が可能な機器が根絶されることは難しいと考えます。その際たる理由として、2つ挙げます。一つは、ソフトウェア的な処理は電気的なノイズに弱いことです。例えば、地球には宇宙から飛来した荷電粒子が大気圏に突入した際に生じるミューオンなどの荷電粒子が地上に降り注いでいますが、<b>電荷を持った粒子がメモリなどの素子を通過するとそこにエネルギーを落とす</b>ことで、メモリを反転させるなど素子の状態に影響を与えます<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>。これが例えば発電所の主電源のON/OFF制御などで発生してしまうと、大変な事故に繋がります。なので、重要な設備などには極力シンプルなハードウェアが好まれます。もう一つは、重要な設備に対しては機械的な制御が不可欠なことです。例えば、工場内のモーターに大電力を供給するケーブルが短絡（ショート）したとすると、そこに大電流が流れ込みます。工場に引き込んでいる電力は決まっているので、突然一箇所で大量の電力が消費されてしまった場合、他の機器を動かす電力が足りなくなります。こういったときに確実かつ即座に短絡（ショート）した部分のブレーカーを操作して、切り離す必要があります。これも確実にハードウェアを動かす必要があります。</p><p>PLCについても、リアルタイム性や拡張性を考えるとPCに勝る部分は多くあります。そのため、これらの機器は今後も互いの領分を侵食するのではなく、補い合う形で制御系を支えていく必要があります。</p><h2 id="計装系制御システム"><a href="#計装系制御システム" class="headerlink" title="計装系制御システム"></a>計装系制御システム</h2><p>計装とは「計測器を装備すること」を指します。工場の中では多くの機械が稼働しており、これらの機械が安全に動作しているかを確認するために各種計測器（センサ）を設置する必要があります。それらセンサから情報を取得し、監視あるいは適切な制御を行うことが計装制御の役割です。</p><p>工場における計装制御は、1970年頃までは監視盤にシングルループコントローラ<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup>が並んだパネル計装制御が主でした。一方、1970年中頃から、計装メーカの開発したDCS(後述)が採用されるようになっていきました。。</p><h3 id="DCS"><a href="#DCS" class="headerlink" title="DCS"></a>DCS</h3><p>DCS(Distributed Control System)は、監視・フィードバック制御・シーケンス制御などの機能を持つ計測制御用のシステムです。従来は個別のシングルループコントローラが横に並んだ構成だったのに対し、DCSはモニタによる監視と機能ごとに演算処理（CPU）を分割されました。つまり、DCSは何らかの特徴を持った機器を指すのではなく、計装制御という目的を達成するために複数の機器が組み合わさってできたシステムの総称を指します。</p><h1 id="制御系開発と工場のIT化"><a href="#制御系開発と工場のIT化" class="headerlink" title="制御系開発と工場のIT化"></a>制御系開発と工場のIT化</h1><p>Web系や基幹系あるいは情報系の開発をしてきた方だと、例えばエッジにあった制御機構をクラウドに移管し、遠隔であらゆる操作ができるようにしたいと考えるかも知れません。確かに、技術的には可能ではありますが、それ以外の理由で実施すべきではないケースがあります。ここでは、工場にIT化をする上で気にすべき要素をいくつか述べていきます。</p><h2 id="機械安全"><a href="#機械安全" class="headerlink" title="機械安全"></a>機械安全</h2><p>機械設備による労働災害は依然として存在し、特に製造業における死傷災害全体の約4割<sup id="fnref:13"><a href="#fn:13" rel="footnote">13</a></sup>とされます。これは機械のエネルギーが非常に大きいことから、挟まれ・巻き込まれなどによって身体の欠損や死亡災害が至りやすいためです。製造業用の機械であればその使用状況は予め想定可能なので、設計段階でリスクアセスメント<sup id="fnref:14"><a href="#fn:14" rel="footnote">14</a></sup>を実施し、使用者が極力安全に仕事ができるような取り組みを行うことができます。</p><h3 id="機械安全の3原則"><a href="#機械安全の3原則" class="headerlink" title="機械安全の3原則"></a>機械安全の3原則</h3><p>機械の安全化をすすめる上での大前提は、以下の3つです。</p><ol><li>人はミスをする</li><li>機械は故障する</li><li>絶対安全は存在しない</li></ol><p>この文言自体はIT技術者にも納得行くものだと考えますが、これと合わせて、機械災害を確実に防止するために、<b>機械安全の原則</b>があります。</p><ol><li>本質安全の原則：　危険要素（危険源）を除去、あるいは人に危害を与えない程度にします。角を丸くしたり、機械のパワーを小さくしたりします。</li><li>隔離の原則： 人が機械の危険源に接触できないようにします。例えば、（人の指も通らないような網目の）柵でガードを設ける方法などがあります。</li><li>停止の原則：　機械が止まっていれば危険ではなくなるので、「隔離の原則」で隔離された機械の動作範囲に入る場合は、インターロックなどで機械を停止させてから入場を許可するようにします。このとき、ブレーカーに修理札<sup id="fnref:15"><a href="#fn:15" rel="footnote">15</a></sup>をかけるなどして動力源自体を確実に切るようにしますが、油圧を使っている設備の場合は注意が必要です。油圧の場合、動力源（実際は電力を供給するブレーカー）を落としたとしても、ゆっくりと油圧によって設備が動作することがあります。そのため、停止させたと思った設備が気づいたら迫っていて挟まれる、などということがあるため、注意が必要です。</li></ol><img src="/images/20200120/photo_20200120_04.png"><p>上記の前提があるため、工場の制御系システムの開発者は、想定外の操作に対しては必ず安全な結果をもたらす（ex.インターロックにかかって動かない、など）システムを構築しようとします。こういったシステムを、新たにクラウドから操作することを考えます。</p><p>なお、余談ではありますが、運転中あるいは停止中を意味するランプの色ですが、これ一つとっても工場によっては意味が異なります。ある工場では「赤は<b>危険を意味する</b>色だから運転中、緑は<b>安全を意味する</b>色だから停止中」で使われますが、別の工場では「緑は<b>安定動作を意味する</b>色だから運転中、赤は<b>異常を意味する</b>色だから停止中」で使われていることもあるので注意が必要です。</p><h2 id="セキュリティ"><a href="#セキュリティ" class="headerlink" title="セキュリティ"></a>セキュリティ</h2><p>これまで何度か述べたように、従来の工場の制御系はセキュリティ的に非常に弱いケースがあります。特にNWを独立させることを前提にリアルタイム制御を目的としてウイルス対策ソフトやファイアウォールを犠牲にしていることもありますので、一度攻撃を受けると非常に弱い場合があります。そのため、工場IoTの名のもとに制御系のPCを他のNWと接続する場合、接続点に別途ファイアウォールを設けて特定の通信のみを許容するようにしたり、極端なことを言うと必要のないUSBポートをすべて埋めたりなどの対応が必要になります<sup id="fnref:16"><a href="#fn:16" rel="footnote">16</a></sup>。仮に制御系PCにウイルス対策ソフトを入れたとしても、今度は制御システムがアクセスしたいファイルが、ファイルスキャンによってロックされたままになりリアルタイム制御に影響が出るなどがあります。使用する目的と状況に応じて、ソフトウェア・ハードウェアの両面で対策をする必要があります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ここまで読んで頂いた皆様の中には、IT分野において豊富な知識と熟練のスキルを併せ持った方もいるかと思います。そんな方こそ、工場制御系にはこれまで相手にしてきたのとは異なるシステムが導入されており、それが電気系技術者たちによってどのように構築されてきたのかを知っていただきたいです。両者が融合することで、真の工場のIT化が行えると考えます。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.nipponsteel.com/tech/report/nssmc/pdf/411-04.pdf" target="_blank" rel="noopener">製鉄プロセス制御への汎用システム適用技術の開発</a></li><li><a href="https://www.ipc-ihi.co.jp/business/project/electrical/index.html" target="_blank" rel="noopener">株式会社IHIプラント電気系総設計</a></li><li><a href="https://www.jemima.or.jp/tech/1-04-02.html" target="_blank" rel="noopener">分散制御システム：DCS（ディジタル計装制御システム）</a></li><li><a href="https://www.kobelco-eco.co.jp/development/docs/017_05.pdf" target="_blank" rel="noopener">新型DCSの中規模プラントへの適用</a></li><li><a href="https://www.jisha.or.jp/oshms/machinery/about01.html" target="_blank" rel="noopener">JISHA 機械安全</a></li><li><a href="http://www-vlsi.es.kit.ac.jp/thesis/papers/pdfs/201701_KASOKUKI_kobayashi.pdf" target="_blank" rel="noopener">半導体の耐性試験-加速器によるシングルイベント耐性の実測評価-</a></li></ul><hr><p>関連記事：</p><ul><li><a href="/articles/20191018/">第1回社内ロボコン開催記-ライントレーサー編-</a></li><li><a href="/articles/20190826/">ソフトとハードの垣根を越えろ - IoTハードウェアの開発をソフト屋視点で解説します</a></li><li><a href="/articles/20190723/">Future IoTのstackshareを公開しました</a></li><li><a href="/articles/20170127/">3Dプリンタを使ってサービス開発やってみた</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">電源供給について詳細に記述すると、トランス（変圧器）の仕組みから、保護継電器（※後述）や遮断器、はたまた高電圧における送電ロスについて述べることができますが、ここでは触れません。ちなみに、保護継電器についてですが、電気系統上同じ電源を持つ設備のうち、一つが暴走あるいは地絡（ショート）などした場合、爆発的に電力が流れ込むことがあります。すると、本来他の電気設備に供給すべき電力まで吸い込んでしまい、結果として健全な設備を電気不足で止めてしまうことになります。これを避けるため、保護継電器という特殊な回路を使って、事故が置きた場所を適切に切り離します。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">シーケンサというと三菱電機の製品名ですが、登録商標ではありません。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">機器によります。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">機器によります。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">リミットスイッチは移動する機器などの位置を検出するセンサです。小さなスイッチを内部に持ち、機械操作を受けてオン/オフ情報を出力します。例えばラインの終端にボタンを置いておき、商品が流れてきたときにボタンを押すことで信号を出すような目的で使います。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">レベル計は液面等の残量を測るための装置で、具体的には特定の位置から液面までの距離を測るなどの機能を有するセンサです。様々な方式があり、超音波を利用するタイプや、釣りで使われるような&quot;浮き(フロート)&quot;を利用するタイプもあります。</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;">閾値でON/OFFといっても、例えば24VDC（※後述）の入出力を持つPLCの場合、きれいに12VDCでON/OFFが変化されるわけではありません。回路には当然ノイズが生じうるため、それでバタバタON/OFFが切り替わっては大変です。そのため、22VDC以上でON、2VDC以下でOFFとなるようなヒステリシス制御をするなどします。なお、VDCとは直流電圧のことで、工場内で動かすモータなどは三相交流電源などがあり、太い電源が3本まとまって引かれていることもままあります。</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;">ADC = Analog Digital Converterは、アナログ信号をデジタル信号に変換する素子です。DAC = Digital Analog Converterは、デジタル信号をアナログ信号に変換する素子です。</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">プログラムの例であげると、mainループ内にすべての処理が書いてある形式です。</span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">10.</span><span style="display: inline-block; vertical-align: top;">ラダー言語が一周するのに要する時間です。</span><a href="#fnref:10" rev="footnote"> ↩</a></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">11.</span><span style="display: inline-block; vertical-align: top;">回路によって不具合モードが異なり、それによって呼称が異なります。例えば高エネルギー粒子によりメモリやフリップフロップなどの記憶素子の記憶内容が反転すると「Single Event Upset(SEL)」と呼び、LSIに寄生するサイリスタが ON 状態となって大電流が流れ動作不良を起こすと「Single Event Latch up(SEL)」と呼びます。なお、SELとSEUを総称して、Single Event Effect(SEE)と呼ぶこともあります。ちなみに、アップセットとは、記憶あるいは伝達に使用する電荷を反転させることを指します。</span><a href="#fnref:11" rev="footnote"> ↩</a></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">12.</span><span style="display: inline-block; vertical-align: top;">工場をはじめ様々な産業施設で利用される、センサーからの測定値を取り込み、その値が指定した範囲内に維持するように制御信号を行うコントローラです。</span><a href="#fnref:12" rev="footnote"> ↩</a></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">13.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.jisha.or.jp/oshms/machinery/about01.html" target="_blank" rel="noopener">JISHA機械安全</a>に関するページより引用。</span><a href="#fnref:13" rev="footnote"> ↩</a></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">14.</span><span style="display: inline-block; vertical-align: top;">リスクアセスメントは、作業場所にある危険性や有害性を特定し、リスクを見積もり、優先度に応じてリスクの低減措置を行う一連の手順のことを指します。事業者はリスクアセスメントの結果に応じて、適切な労働災害防止対策を施す必要があります。</span><a href="#fnref:14" rev="footnote"> ↩</a></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">15.</span><span style="display: inline-block; vertical-align: top;">機械に立ち入る担当者が切断した動力源にかける札です。これは「今〇〇（名前あるいはチーム）が稼働エリアに立ち入って作業をしている」ことを示す札で、この札はかけた本人（あるいは運用次第ではそのチームの責任者）のみが外すことができ、この札が一枚でも動力源にかかっていたら、その動力源を投入してはいけません。</span><a href="#fnref:15" rev="footnote"> ↩</a></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">16.</span><span style="display: inline-block; vertical-align: top;">すでにPCが多くの会社で一般的に利用されていて、USBメモリを勝手に指すなどしていけないことは工場で働く方が熟知していたとしても、意外にされがちなのが「スマホを給電するためにパソコンのUSBポートに接続した」というケースです。本人は電源をとっているだけのつもりであっても、精密機械同士が接続されていることに変わりはありません。</span><a href="#fnref:16" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、DXチームの栗田です。前回は&lt;a href=&quot;/articles/20191023/&quot;&gt;工場をハックするための基
      
    
    </summary>
    
      <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
      <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
      <category term="Factory" scheme="https://future-architect.github.io/tags/Factory/"/>
    
  </entry>
  
  <entry>
    <title>実践Drawio</title>
    <link href="https://future-architect.github.io/articles/20200116/"/>
    <id>https://future-architect.github.io/articles/20200116/</id>
    <published>2020-01-16T02:07:03.000Z</published>
    <updated>2020-01-16T03:13:01.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>もともとはMicrosof Visioなどを使って作成していた図形（ネットワーク図、各種シーケンス、ERD..etc）ですが、ファイルストレージがクラウド（GoogleDrive）に移ることで、 <strong>そのまま編集したい</strong> 欲求が世の中で増しているように思います。</p><p>その場合の有効なツールとして<a href="https://www.draw.io/" target="_blank" rel="noopener">draw.io</a>を利用するケースが増えてきたと感じます。そこで当社で蓄積したナレッジを文章化します。</p><h1 id="Draw-io-Tips"><a href="#Draw-io-Tips" class="headerlink" title="Draw.io Tips"></a>Draw.io Tips</h1><h2 id="1-ショートカット"><a href="#1-ショートカット" class="headerlink" title="1.ショートカット"></a>1.ショートカット</h2><h3 id="1-1-公式ショートカット"><a href="#1-1-公式ショートカット" class="headerlink" title="1.1. 公式ショートカット"></a>1.1. 公式ショートカット</h3><p>まずはここから始めましょう。<br>ショートカットはプロダクトの基本操作が詰まっています。<br><a href="https://about.draw.io/wp-content/uploads/2016/11/draw.io_shortcuts_basic_win_EN.pdf" target="_blank" rel="noopener">https://about.draw.io/wp-content/uploads/2016/11/draw.io_shortcuts_basic_win_EN.pdf</a></p><h2 id="2-設定"><a href="#2-設定" class="headerlink" title="2. 設定"></a>2. 設定</h2><h3 id="2-1-日本語化"><a href="#2-1-日本語化" class="headerlink" title="2.1. 日本語化"></a>2.1. 日本語化</h3><ol><li>画面右上の🌏マークから選択します</li><li>メニューが開くので、”日本語”を選択します</li></ol><h2 id="3-オブジェクト"><a href="#3-オブジェクト" class="headerlink" title="3. オブジェクト"></a>3. オブジェクト</h2><h3 id="3-1-オブジェクト内の文字が小さくなってくれないときの対応"><a href="#3-1-オブジェクト内の文字が小さくなってくれないときの対応" class="headerlink" title="3.1. オブジェクト内の文字が小さくなってくれないときの対応"></a>3.1. オブジェクト内の文字が小さくなってくれないときの対応</h3><ol><li>普通にやると一定のポイントから文字が小さくなりません<ul><li><img src="/images/20200116/1.png" class="img-small-size" style="border:solid 1px #000000">–→<img src="/images/20200116/2.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li><strong>ワードラップ</strong>、<strong>フォーマットされたテキスト</strong>のチェックを <strong>両方</strong> 外します。これで文字がどこまでも小さくなります<ul><li><img src="/images/20200116/3.png" class="img-small-size" style="border:solid 1px #000000">–→<img src="/images/20200116/4.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ol><h3 id="3-2-Lineジャンプ"><a href="#3-2-Lineジャンプ" class="headerlink" title="3.2. Lineジャンプ"></a>3.2. Lineジャンプ</h3><ul><li>「スタイル」から「Line jumps」を選択します。<ul><li><img src="/images/20200116/5.png" class="img-small-size" style="border:solid 1px #000000">–→<img src="/images/20200116/6.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ul><h3 id="3-3-Lineジャンプを一部だけ回避する方法"><a href="#3-3-Lineジャンプを一部だけ回避する方法" class="headerlink" title="3.3. Lineジャンプを一部だけ回避する方法"></a>3.3. Lineジャンプを一部だけ回避する方法</h3><ul><li>ラインjumpを設定したオブジェクトよりも前面のオブジェクトはジャンプしません<ul><li><img src="/images/20200116/7.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ul><h3 id="3-4-アイコンの使い方・検索方法"><a href="#3-4-アイコンの使い方・検索方法" class="headerlink" title="3.4. アイコンの使い方・検索方法"></a>3.4. アイコンの使い方・検索方法</h3><ol><li>AWSのアイコンを追加します。左下の「その他の図形」からアイコンセットを選択します</li><li>以下のような画面が表示されます<ul><li><img src="/images/20200116/3-4-1.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li><li>icon setにないiconを追加は検索すると色々でてくるので、概ねこれで間に合うと思います<ul><li><img src="/images/20200116/3-4-2.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>もちろん初めから見えているiconも検索できます。目で探すより早いので、名称がわかっている場合はこちらがお勧めです<ul><li><img src="/images/20200116/3-4-3.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ol><h3 id="3-5-Lineが乱れたときのリセット方法"><a href="#3-5-Lineが乱れたときのリセット方法" class="headerlink" title="3.5. Lineが乱れたときのリセット方法"></a>3.5. Lineが乱れたときのリセット方法</h3><p>色々やって線がグダった場合の対応方法です</p><h4 id="スタイルの変更で対応する方法"><a href="#スタイルの変更で対応する方法" class="headerlink" title="スタイルの変更で対応する方法"></a><strong>スタイルの変更で対応する方法</strong></h4><ol><li>初期状態<ul><li><img src="/images/20200116/3-5-1.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li><li>スタイルで「／」直線を選択します<br><ul><li><img src="/images/20200116/3-5-2.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>スッキリします<ul><li><img src="/images/20200116/3-5-3.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><h4 id="途中点をクリアする方法"><a href="#途中点をクリアする方法" class="headerlink" title="途中点をクリアする方法"></a><strong>途中点をクリアする方法</strong></h4><ol><li>初期状態<ul><li><img src="/images/20200116/3-5-4.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li><li>配置で<code>途中点をクリア</code>を選択します<ul><li><img src="/images/20200116/photo_20200116_02.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>スッキリします<ul><li><img src="/images/20200116/3-5-6.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><h3 id="3-6-オブジェクトに線を重ねると勝手にオブジェクトがくっ付くのをやめたい"><a href="#3-6-オブジェクトに線を重ねると勝手にオブジェクトがくっ付くのをやめたい" class="headerlink" title="3.6. オブジェクトに線を重ねると勝手にオブジェクトがくっ付くのをやめたい"></a>3.6. オブジェクトに線を重ねると勝手にオブジェクトがくっ付くのをやめたい<br></h3><ul><li>オブジェクトプロパティのConnectableオプションを外すと、先にオブジェクトを重ねても接続されなくなります。イライラする事が多い動作なので便利です<ul><li><img src="/images/20200116/3-6.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ul><h2 id="4-レイヤ"><a href="#4-レイヤ" class="headerlink" title="4. レイヤ"></a>4. レイヤ</h2><h3 id="4-1-レイア使い方"><a href="#4-1-レイア使い方" class="headerlink" title="4.1. レイア使い方"></a>4.1. レイア使い方</h3><ol><li>レイヤーウィンドウの表示は、表示→「レイヤー」で小窓が開きます<ul><li><img src="/images/20200116/4-1-1.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li><code>+</code> マークからレイヤを追加&lt;<ul><li><img src="/images/20200116/4-1-3.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>レイヤ名ダブルクリックで名称変更<ul><li><img src="/images/20200116/4-1-4.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ol><h3 id="4-2-default-レイヤの罠"><a href="#4-2-default-レイヤの罠" class="headerlink" title="4.2. default レイヤの罠"></a>4.2. default レイヤの罠</h3><ul><li>複数のレイヤを使うと「背景」の上に「メインコンテンツ」となるレイヤを重ねて使うケースが増えてきます</li><li>しかし、編集開始直後は最後のレイヤは記憶されず、最も下位のレイヤがdefaultとして選択されるため、変更しないと想定外のレイヤに想定外のオブジェクトが追加されてしまいます<ul><li><img src="/images/20200116/4-2.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ul><h3 id="4-3-バックグラウンドに書くべきもの"><a href="#4-3-バックグラウンドに書くべきもの" class="headerlink" title="4.3. バックグラウンドに書くべきもの"></a>4.3. バックグラウンドに書くべきもの<br></h3><ol><li>こういった構成図を作成してあるとして<ul><li><img src="/images/20200116/4-3-1.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>オブジェクトの位置によって動的にページが増えます（右側に余白が追加されます）<ul><li><img src="/images/20200116/4-3-2.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>あらかじめバックグラウンドに枠を作っておくと便利です<ul><li><img src="/images/20200116/4-3-3.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ol><p>ちなみに、ページ設定はメインメニューの<code>ファイル</code>から選択します。</p><p>こちらもdefaultは<code>A4</code>になっているため必要に応じて変更が必要です。感覚的に、こういった図形は<code>A3</code>以上のケースが多い気がします。</p><ul><li><img src="/images/20200116/photo_20200116_03.png" class="img-small-size" style="border:solid 1px #000000"></li><li><img src="/images/20200116/photo_20200116_04.png" class="img-small-size" style="border:solid 1px #000000"></li></ul><h3 id="4-4-オブジェクトを-To-Front-Backするときに気をつけること"><a href="#4-4-オブジェクトを-To-Front-Backするときに気をつけること" class="headerlink" title="4.4. オブジェクトを To Front/Backするときに気をつけること"></a>4.4. オブジェクトを To Front/Backするときに気をつけること</h3><ul><li>前述の通り、default表示は最下位のレイヤなので、レイヤを切り替えてあげないと<code>あれ？上にいかないぞ？</code>が本当によくハマるケールです<ul><li><img src="/images/20200116/4-4.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ul><h3 id="4-5-レイヤを跨いだオブジェクトのコピー"><a href="#4-5-レイヤを跨いだオブジェクトのコピー" class="headerlink" title="4.5. レイヤを跨いだオブジェクトのコピー"></a>4.5. レイヤを跨いだオブジェクトのコピー<br></h3><p><code>背景</code>レイヤのみで編集を開始し、<code>背景</code>と上位の<code>コンテンツ</code>に分けたい場合、一括でコピーしたくなります。<br><img src="/images/20200116/photo_20200116_05.png" class="img-small-size" style="border:solid 1px #000000"><br>↓レイヤを足します。<br><img src="/images/20200116/photo_20200116_06.png" class="img-small-size" style="border:solid 1px #000000"><br>↓コピーしたいオブジェクトを<code>カット</code>します。<br><img src="/images/20200116/photo_20200116_07.png" class="img-small-size" style="border:solid 1px #000000"><br>↓上位レイヤ選択状態で<code>ペーストします</code><br><img src="/images/20200116/photo_20200116_08.png" class="img-small-size" style="border:solid 1px #000000"><br>↓見た目は変わりませんが、<code>ペーストしたオブジェクト</code>は移動します。<br><img src="/images/20200116/photo_20200116_09.png" class="img-small-size" style="border:solid 1px #000000"></p><h2 id="5-保存の方法"><a href="#5-保存の方法" class="headerlink" title="5. 保存の方法"></a>5. 保存の方法</h2><h3 id="5-1-画像にメタ法情報を含めて編集できるようにする"><a href="#5-1-画像にメタ法情報を含めて編集できるようにする" class="headerlink" title="5.1. 画像にメタ法情報を含めて編集できるようにする"></a>5.1. 画像にメタ法情報を含めて編集できるようにする<br></h3><p>メニューからエクスポートで、<strong>PNG</strong> or <strong>SVG</strong> を選びます<br><img src="/images/20200116/photo_20200116_10.png" class="img-small-size" style="border:solid 1px #000000"><br>↓この2種類のみ、<code>ダイアグラムをコピーに含める</code>が表示されます。<br>これをチェックすると、エクスポートしたpng or svgをDraw.ioで開くと、<strong>編集可能な画像</strong>が出来上がります。<br><img src="/images/20200116/photo_20200116_11.png" class="img-small-size" style="border:solid 1px #000000"></p><h3 id="5-2-githubのファイルとDrawioを紐付ける"><a href="#5-2-githubのファイルとDrawioを紐付ける" class="headerlink" title="5.2. githubのファイルとDrawioを紐付ける"></a>5.2. githubのファイルとDrawioを紐付ける<br></h3><p>公式にある手順の通りで連携可能となります。<br><br><a href="https://about.draw.io/github-support/" target="_blank" rel="noopener">https://about.draw.io/github-support/</a><br>開くでGithubを選択し、認証をすることで編集可能になります。<br><img src="/images/20200116/photo_20200116_12.png" class="img-middle-size" style="border:solid 1px #000000"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>draw.ioを上手く使えば、VisioやExcelに頼ることなくシステム的な構成図を生産性高く扱えるようになると思います。一方で、VisioやExcelに慣れた人にとっては、操作性に癖があり色々ハマるところも多いと思い今回のような”まとめ”を作成しました。</p><p>他にもこんなテクニックがあるよ、という方がいましたらぜひTwitterやはてぶなどでフィードバックいただければと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;もともとはMicrosof Visioなどを使って作成していた図形（ネットワーク図、各種シーケンス、ERD..etc）ですが
      
    
    </summary>
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="draw.io" scheme="https://future-architect.github.io/tags/draw-io/"/>
    
  </entry>
  
  <entry>
    <title>打鍵テストをCIで回す：Cypress on GitHub Actions</title>
    <link href="https://future-architect.github.io/articles/20200115/"/>
    <id>https://future-architect.github.io/articles/20200115/</id>
    <published>2020-01-15T00:25:42.000Z</published>
    <updated>2020-01-15T02:11:55.895Z</updated>
    
    <content type="html"><![CDATA[<p>つらい打鍵テストをCIで回して、テスト結果をWebダッシュボードでチーム内に共有しようというお話です。</p><hr><p>はじめまして。枇榔（びろう）です。サーバ内の脆弱性を検出して管理するWebサービス、FutureVuls( <a href="https://vuls.biz/" target="_blank" rel="noopener">https://vuls.biz/</a> )の開発をしています。</p><p>100台から数千台といった大規模なサーバ運用をしている方向けの、サーバ内の脆弱性情報管理を楽にするWebサービスです。OSSの脆弱性スキャナ<a href="https://github.com/future-architect/vuls" target="_blank" rel="noopener">Vuls</a>に、チーム運用向けの機能（タスク管理・自動トリアージ・他チームへ情報共有・脆弱性情報のリスト管理など）を追加したものになります。</p><p><a href="https://vuls.biz/" target="_blank" rel="noopener">https://vuls.biz/</a> の右上から新規登録ですぐに使えるので、ぜひお試しください。</p><h2 id="マイクロサービスのテストが打鍵になりがち問題"><a href="#マイクロサービスのテストが打鍵になりがち問題" class="headerlink" title="マイクロサービスのテストが打鍵になりがち問題"></a>マイクロサービスのテストが打鍵になりがち問題</h2><p>さて、そんなFutureVuls。画面側はReact、裏側はいくつものコンテナという構成で動いています。</p><p>AWS 上でコンテナを立ち上げてマイクロサービスを提供するみたいなこと、増えてきましたよね。マイクロサービスアーキテクチャだとスケール・冗長化が簡単で、障害が置きたときの対応や保守が行いやすいといったメリットもたくさんあります。</p><p>しかしながら、導入する上で厄介なのがテスト。各コンテナの中で単体テストがしっかり書かれていても、それぞれのコンテナがきちんと繋がっているかどうか、意図した処理が行われているかどうか確認するため、クライアント端末からのリクエストをもとにしたテストが必要になります。</p><p>コンテナの中はmasterにマージする際にテストを回しているけれども、最終的にデプロイを行う際にはExcelのテストケースを見ながら、Web画面をポチポチ叩いての打鍵テストになってしまっている。そんなプロジェクトも多いのではないでしょうか。</p><p>Excelのテストケースを見ながらポチポチ叩いて、都度スクリーンショットを撮ってまとめる。そんなテストを何度か行いましたが、それだと気軽にテストとはいかず、リリースを行う際にもテスト工数がかなり必要になりますし、使用しているパッケージのアップデートも行いづらいのでセキュリティ的にも問題が出てきます。</p><h2 id="打鍵テストを自動化するOSS-Cypress"><a href="#打鍵テストを自動化するOSS-Cypress" class="headerlink" title="打鍵テストを自動化するOSS Cypress"></a>打鍵テストを自動化するOSS Cypress</h2><p>打鍵テスト自動化したいですよね</p><p>できればコーディングに不慣れな人でもテストコードが書けて、動作中の様子をスクリーンショットなどで保存してくれるとエビデンスで使えるので嬉しい。そんな要望に応えてくれるOSSがCypressです</p><img src="/images/20200118/photo_20200118_01.png" class="img-middle-size"><p><a href="https://www.cypress.io/" target="_blank" rel="noopener">https://www.cypress.io/</a></p><p>Cypressはブラウザテストツールで、フロントエンドのテストをかなりシンプルに行える仕組みを提供してくれています。フロントエンドの部分だけを単体テストするためにも使えるのですが、統合テストやEnd to End テストにも使える便利な子です。</p><p>似たようなツールにSeleniumがあります。両方とも画面のテストに用いられていて、GitHub Actionsにも組み込める同じような使い方ができるツールなのですが少し差異があります。</p><p>Seleniumはネットワーク越しにブラウザを自動操作するツールで、スクレイピングとか操作の自動化といったマクロのような使い方をしてテストを行います。</p><p>対してCypressはWeb画面のテスト目的に特化したツールです。動的な画面の書き換え完了するまで待ったり、ボタンがdisable設定で表示されているか確認したり、非同期なリクエストが終わるまで待ったりといったことまで行えます。さらに処置は手元で行われるので動作もきびきびとしており、トライ＆エラーも行いやすく実行時間も短縮できます。</p><p>また、スクリーンショットが欲しいタイミングで <code>cy.screenshot</code> と入れておくとspecごとに分かれたフォルダにスクリーンショットを保存してくれます。さらにはテスト開始から完了まで実行の様子をmp4形式の動画にしてくれたりもします。</p><p>個人的な話ですがたまに疲れたとき、池の鯉を見るような感覚でCypressのテスト実行の様子を眺めていたりします。割と癒やされます。</p><h2 id="今回説明すること"><a href="#今回説明すること" class="headerlink" title="今回説明すること"></a>今回説明すること</h2><img src="/images/20200118/photo_20200118_02.png">まずは手元のPCでCypressを動かしたのち、GitHub Actionsに乗せてCI内で実行する方法を紹介します。次に実行結果をWeb上に保存できるCypressDashboardの紹介、最後にCIをつなげるところまで行ってみます。<h2 id="導入方法"><a href="#導入方法" class="headerlink" title="導入方法"></a>導入方法</h2><p>nodejsの入っている端末でE2E用のレポジトリを作って、</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npx cypress open</span></span><br></pre></td></tr></table></figure><p>で、終わり。簡単。<br>しばらくダウンロードなどの処理が走ったあと、Cypressのダイアログが表示されます。<br><img src="/images/20200118/photo_20200118_03.png"></p><p>試しに <code>actions.spec.js</code> をクリックすると、テストコードのサンプルとして <code>https://example.cypress.io/commands/actions</code> へのテストが実行されます。</p><p>実行したディレクトリの中には <code>cypress.json</code> という設定ファイルと <code>cypress</code> というフォルダができてます。<code>cypress.json</code> はコンフィグファイルです。タイムアウトまでの時間やスクリーンショットの出力先フォルダを変えたいときはここを変更しましょう。<br><a href="https://docs.cypress.io/guides/references/configuration.html" target="_blank" rel="noopener">https://docs.cypress.io/guides/references/configuration.html</a></p><p><code>cypress</code> フォルダにはテストコードやプラグインが含まれます。<br><code>cypress\integration\examples\</code> 内のspec.jsファイルがテストケースのサンプルになっているので、参考に書き換えていきましょう。</p><h1 id="Cypressの書き方"><a href="#Cypressの書き方" class="headerlink" title="Cypressの書き方"></a>Cypressの書き方</h1><p>Cypressのドキュメント( <a href="https://docs.cypress.io/" target="_blank" rel="noopener">https://docs.cypress.io/</a> )を見ると非常に様々なコマンドやテスト方法があるのが分かります。<br>たくさんあって物怖じしてしまいますが、まずは <code>cy.contain()</code> <code>cy.get()</code> <code>cy.click()</code>の3つを覚えれば簡単な Web ページのテストができるようになります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">context(<span class="string">'Actions'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'https://future-architect.github.io/'</span>) <span class="comment">//テストを行う対象のページを入力</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'contain() get() click() のサンプル'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ページ内に `フューチャー開発者ブログ` が表示されているか確認</span></span><br><span class="line">    cy.contains(<span class="string">'フューチャー開発者ブログ'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ページ内に `logo-img`をクラスに持つimgタグが表示されているか確認</span></span><br><span class="line">    cy.get(<span class="string">'img.logo-img'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `.blog-sidebar`(サイドバーのクラス)から `Culture`を探してクリック</span></span><br><span class="line">    cy.get(<span class="string">'.blog-sidebar'</span>).contains(<span class="string">'Culture'</span>).click()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上を実行すると、こうなります。</p><img src="/images/20200118/photo_20200118_04.jpg"><p>左側にテストの内容、右側にテスト実行の様子が表示されます。</p><img src="/images/20200118/photo_20200118_05.png"><p>テストがすべて完了したあとに実行中の様子を確認することができます。<br>行をクリックすると、どの要素が抽出されて、どこをクリックしたのがまでわかるようになっています。</p><img src="/images/20200118/photo_20200118_06.jpg"><p><code>blog-sidebar</code>クラス内の <code>Culture</code> をクリックしているのがわかりますね。</p><p><code>cy.contains</code> で画面に表示される日本語を選んで click までならコーディングに不慣れな新人さんにも書いてもらえますし、CSSセレクタを理解している人ならgetも使ってもらえます。<br>ベテランな皆さんには <code>cy.spy()</code> や <code>cy.stub()</code> といったものも用意されていますのでご安心を。</p><p>また <code>cy.viewport(&#39;iphone-6+&#39;)</code> でviewportの動的切替えや、<code>cy.screenshot(&#39;top-page-01&#39;)</code> でスクリーンショットの保存などもできます。</p><p>#GitHub Actionsにつなげる</p><p>さて、ブラウザ上で実行結果を確認しつつテストを行えるCypressですが、CUIでも実行できます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npx cypress run</span></span><br></pre></td></tr></table></figure><p>こちらの場合は、テストの結果だけ返してくれます。<br><img src="/images/20200118/photo_20200118_07.png"></p><p>実行中の様子をあとから確認したい場合は、<code>\cypress\videos\examples\test.spec.js.mp4</code> として保存される動画ファイルを確認ください。</p><p>CUIで実行できるとなればCIに組み込みたいですよね。<br>では、2019年から使えるようになったGitHub Actionsで動かしてみましょう。</p><p>作成したレポジトリ内で以下を実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npm init</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>package.json  package-lock.jsonの2ファイルが作成されたのを確認したら、GitHubにプッシュし、GitHubのレポジトリページのタブにある「Actions」&gt; Node.js の「Set up this workflow」のボタンをクリック</p><p>そして、左側に出てくるエディタに以下を入力します。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node</span> <span class="string">CI</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  cypress-run:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">cypress-io/github-action@v1</span></span><br></pre></td></tr></table></figure><p>これで、レポジトリにpushされたタイミングでCIが動くようになりました。</p><p>実行結果は以下のように表示されます。</p><img src="/images/20200118/photo_20200118_08.png"><p>いい感じですね</p><p>pushされたタイミングではなく定期的に実行したい場合は</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br></pre></td></tr></table></figure><p>を</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  schedule:</span></span><br><span class="line"><span class="attr">    - cron:</span>  <span class="string">'0 0 * * *'</span></span><br></pre></td></tr></table></figure><p>のようなcron式に書き換えると定期的にテストが走ります。</p><h1 id="Cypress-Dashboard-につなげる"><a href="#Cypress-Dashboard-につなげる" class="headerlink" title="Cypress Dashboard につなげる"></a>Cypress Dashboard につなげる</h1><p>CypressのテストがGitHub Actions上で定期的に実行されて良かったよかった、で終わりたいのですが問題が一つだけ。</p><p>実行中の様子をあとから確認できない。</p><p>Cypress実行中の様子は <code>\cypress\videos\*.spec.js.mp4</code> に動画ファイルが保存されているはずですが、CI環境上に保存してしまうので、テスト完了後には環境ごと消されてしまっていて見れなくなってしまいます。</p><p>自分でS3あたりにファイルを投げるスクリプトを書かないといけないのか・・・と思っていましたが、Cypressがそのあたりも簡単にする解決策を用意してくれていました。すごい。</p><p>Cypress Dashboard というサービスで、Cypress実行中の様子や結果などを見やすくまとめてくれるWebサービスです。<br><a href="https://docs.cypress.io/guides/dashboard/introduction.html" target="_blank" rel="noopener">https://docs.cypress.io/guides/dashboard/introduction.html</a></p><img src="/images/20200118/photo_20200118_09.png"><p>それではセットアップ方法を見ていきましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npx cypress open</span></span><br></pre></td></tr></table></figure><p>として、Cypressのダイアログを表示させましょう。</p><img src="/images/20200118/photo_20200118_10.png">「Runs」をクリックして右上の「Log In」からCypress Dashboardにユーザ登録してください。Google認証とGitHub認証でユーザ登録ができます。<p>ユーザ登録が終えたら、「Set up project to recoed」の青いボタンを押して設定を完了させます。</p><img src="/images/20200118/photo_20200118_11.png"><p>すると画面が切り替わり、Project ID と Record key が生成されます。<br><code>cypress.json</code> には自動で <code>projectId</code> が入力されてると思いますので、Record keyと一緒に <code>cypress run</code> してみましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npx cypress run --record --key &#123;Record key&#125;</span></span><br></pre></td></tr></table></figure><p>すると「Runs」の画面が変化します。</p><img src="/images/20200118/photo_20200118_12.png"><p>この #1 の行をクリックするとダッシュボードのページに移動して実行結果が確認できます。</p><img src="/images/20200118/photo_20200118_13.png"><p>1spec1行で並べられて、各行にOutput・Screenshots・Videoのボタンが用意されています。<br>OutputにはCUIのログ、Screenshotsにはエラー時のスクリーンショットと <code>cy.screenshot()</code> の実行結果、Videoにはテスト実行中の様子が動画で保存されます。<br>Web上に結果が保存されるのでチーム間で共有しやすくもなります。</p><p>Dashboardに実行結果が保存されるのを確認したら、GitHub Actionsにも同じようにRecord keyを設定していきましょう。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test-cy/.github/workflows/nodejs.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Node</span> <span class="string">CI</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  cypress-run:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">cypress-io/github-action@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          record:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          CYPRESS_RECORD_KEY:</span> <span class="number">2899</span><span class="string">ea68-054f-4abc-8fd3-ebff0c3e7bc0</span></span><br></pre></td></tr></table></figure><p>書き換えてGitHubにpushすると、GitHubActionsからCypressDashboardに実行結果が送信されます。</p><img src="/images/20200118/photo_20200118_14.png"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>打鍵テストをCI化するのが、それほど苦労なくできることが伝われば幸いです。</p><p>もちろんテストコードを書く必要はありますが、Excelのテストケースに書かれた <code>申し込みボタンをクリックする</code> を <code>cy.contains(&#39;申し込み&#39;).click()</code> に変えるだけで何百回と使えるコードになるのでコストはペイするはずです。</p><p>今回は導入の部分だけを書きましたが、FutureVulsのテストを行う際には</p><ul><li>グループ内の脆弱性情報・タスク情報をDBからクリアする</li><li>スキャン結果をs3にアップロードしてタスクが表示されるか確認する</li><li>脆弱性のスコアが更新された場合に脆弱性情報が書き換わり、タスクのコメントにログが反映されるか見る</li></ul><p>といったこともしています。<br>これらもCypress（といくつかのプラグイン）で実現できます。すごい。</p><p>さくっとテストできる環境を作って、パッケージのアップデートを気楽に行える環境を作っていきましょう。</p><p>それでは、よいテストライフを！</p><hr><p>関連記事：</p><ul><li><a href="/articles/201912010/">SORACOM USBドングルの自動接続</a></li><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;つらい打鍵テストをCIで回して、テスト結果をWebダッシュボードでチーム内に共有しようというお話です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;はじめまして。枇榔（びろう）です。サーバ内の脆弱性を検出して管理するWebサービス、FutureVuls( &lt;a href=&quot;https://vu
      
    
    </summary>
    
      <category term="CI/CD" scheme="https://future-architect.github.io/categories/CI-CD/"/>
    
    
      <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
  </entry>
  
  <entry>
    <title> NeurIPS 2019 論文紹介</title>
    <link href="https://future-architect.github.io/articles/20191227/"/>
    <id>https://future-architect.github.io/articles/20191227/</id>
    <published>2019-12-27T07:22:02.000Z</published>
    <updated>2019-12-27T10:32:07.659Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、Strategic AI Group(SAIG)の田中、上野です。<br>少し前に<a href="https://future-architect.github.io/articles/20191210/">NeurIPSという学会に参加して来たことをご報告</a>しましたが、今回はNeurIPSで気になった論文をいくつか紹介したいと思います。</p><h1 id="画像認識・生成"><a href="#画像認識・生成" class="headerlink" title="画像認識・生成"></a>画像認識・生成</h1><p>まずは、上野からは画像認識・生成に関する下記2つの研究を取り上げます。</p><h2 id="This-Looks-Like-That-Deep-Learning-for-Interpretable-Image-Recognition"><a href="#This-Looks-Like-That-Deep-Learning-for-Interpretable-Image-Recognition" class="headerlink" title="This Looks Like That: Deep Learning for Interpretable Image Recognition"></a>This Looks Like That: Deep Learning for Interpretable Image Recognition</h2><ul><li><a href="https://papers.nips.cc/paper/9095-this-looks-like-that-deep-learning-for-interpretable-image-recognition" target="_blank" rel="noopener">https://papers.nips.cc/paper/9095-this-looks-like-that-deep-learning-for-interpretable-image-recognition</a></li></ul><p>Chaofan Chen(※1), Oscar Li(※1), Daniel Tao(※1), Alina Barnett(※1), Cynthia Rudin(※1), Jonathan K. Su(※2)</p><p>※1: Duku University<br>※2: MIT Lincoln Laboratory</p><h2 id="HYPE-A-Benchmark-for-Human-eYe-Perceptual-Evaluation-of-Generative-Models"><a href="#HYPE-A-Benchmark-for-Human-eYe-Perceptual-Evaluation-of-Generative-Models" class="headerlink" title="HYPE: A Benchmark for Human eYe Perceptual Evaluation of Generative Models"></a>HYPE: A Benchmark for Human eYe Perceptual Evaluation of Generative Models</h2><ul><li><a href="https://papers.nips.cc/paper/8605-hype-a-benchmark-for-human-eye-perceptual-evaluation-of-generative-models" target="_blank" rel="noopener">https://papers.nips.cc/paper/8605-hype-a-benchmark-for-human-eye-perceptual-evaluation-of-generative-models</a></li></ul><p>Sharon Zhou(※1), Mitchell Gordon(※1), Ranjay Krishna(※1), Austin Narcomey(※1), Li F. Fei-Fei(※1), Michael Bernstein(※1)</p><p>※1: Stanford University</p><p>一つ目はCNNの解釈性に関する研究で、二つ目は生成モデルの評価方法に関する研究です。<br>それぞれ、関連する研究を取り上げながら紹介します。</p><h2 id="CNNの解釈性に関する研究"><a href="#CNNの解釈性に関する研究" class="headerlink" title="CNNの解釈性に関する研究"></a>CNNの解釈性に関する研究</h2><p>Deep Learningの威力を世に知らしめた出来事の一つは、2012年のILSVRCという画像認識に関するコンペティションでした。2012年以降、画像認識の精度がどんどん向上し、ついには人間のレベルに匹敵するまでになりました。</p><p>画像認識では、Convolutional Neural Network(CNN)と呼ばれる技術が用いられますが、非線形な演算を何層にも渡って繰り返すため、CNNが画像のどこに着目して分類をしているかといった解釈が非常に難しくなってしまいます。</p><p>CNNの着目領域を可視化した初期の研究が、Class Activation Mapping(CAM) [1]です。</p><p>CAMでは、下図のようにGlobal Average Poolingをする直前のfeature mapに分類層の結合重みを使った線形和によって、CNNの判断根拠を可視化します。</p><img src="/images/20191227/CAM.png"><p>[1]のFigure2より引用</p><p>CAMは、conv feature maps → global average pooling → softmax layer という構成である必要がありましたが、Grad-CAM [2]では、勾配を用いてfeature mapの重み付けをすることで、ネットワーク構成の制約がなくなりました。</p><p>また、Attention Branch Network [3]では、Activation mapをAttentionに使う方法が提案されています。<br>Attention Branch Networkは、中部大学の研究グループが提案したこともあり、今夏に参加した日本の学会MIRUではよく見かけました。</p><p>NeurIPSでは、porototypical part network(ProtoPNet) [4]という手法が提案されました。ProtoPNetでは、Prototype layerによって、入力画像中のどの領域が、学習データのどの部分と類似しているかまでを判断することができます。</p><p>その結果、単に着目領域が可視化されるだけではなく、画像の部分ごとの判断根拠を組み合わせた、より詳細な推論の解釈を可能にします。</p><img src="/images/20191227/ProtoPNet.png"><p>[4]のFigure2より引用</p><p>NeurIPS最終日に行われたMedical Imaging meets NeurIPSというワークショップでは、CAMを医療画像へ適用した事例がポスター発表でありました。</p><p>HR-CAM [5]では、最後のfeature mapだけではなく、中間層のfeature mapも用いることで、より鮮明に判断根拠を可視化します。</p><img src="/images/20191227/HR-CAM.png">[5]のFigure5より引用<p>また、初日のEXPOでは、Googleが”Interpretability - Now What?”というタイトルで解釈性に関する発表をしていました。<br>そこでは、Testing with Concept Activation Vectors(TCAV) [6]という手法が紹介されました。<br>TCAVは上記までの手法の流れとは少し異なり、概念的な重要度を抽出する方法を取っています。<br>画像認識の分野に限らず、解釈性に関する研究は近年、注目を高めている分野の一つです。</p><ul><li>[1] B.Zhou, et al., Learning Deep Features for Discriminative Localization, 2016.</li><li>[2] R.R.Selvaraju, et al., Grad-CAM: Visual Explanations from Deep Networks via Gradient-based Localization, 2017.</li><li>[3] H.Fukui, et al., Attention Branch Network: Learning of Attention Mechanism for Visual Explanation, 2018.</li><li>[4] C.Chen, et al., This Looks Like That: Deep Learning for Interpretable Image Recognition, 2019.</li><li>[5] S.Shinde, et al., HR-CAM: Precise Localization of pathology using multi-level learning in CNNs, 2019.</li><li>[6] B.Kim, et al., Interpretability Beyond Feature Attribution: Quantitative Testing with Concept Activation Vectors (TCAV), 2018.</li></ul><h2 id="生成モデルの評価方法に関する研究"><a href="#生成モデルの評価方法に関する研究" class="headerlink" title="生成モデルの評価方法に関する研究"></a>生成モデルの評価方法に関する研究</h2><p>近年、Generative Adversarial Network(GAN)をはじめとした深層生成モデルは目覚ましい発展を遂げ、本物と見間違える程きれいな画像を生成できるようになってきました。<br>しかし、生成された画像のクオリティを適切に評価することは、それほど簡単なことではありません。<br>よく使われる指標は、Inception Score [7]とFréchet Inception Distance [8] です。</p><p>Inception Scoreは、次式で計算されます。<br>p(y|x)は、ImageNetで学習済みのInception Modelで生成された画像を予測したときのラベルの分布、p(y)は予測ラベルの周辺分布であり、それらの分布間の距離をKullback–Leibler divergenceで測っています。</p><p>生成される画像が、識別が容易で、かつ、バリエーションが豊富であるほど、スコアが高くなるように設計されています。</p><img src="/images/20191227/IS.png" class="img-middle-size"><p>もう一つのFréchet Inception Distanceでは、実画像と生成画像でのInception Modelから得られる特徴ベクトルの距離を次式で測ります。</p><p>m_w, C_wは実画像から得られる特徴ベクトルの平均と共分散行列、m, Cは生成画像から得られる特徴ベクトルの平均と共分散行列であり、それぞれ多変量正規分布に従うと仮定し、Fréchet距離で分布間の距離を測ります。</p><img src="/images/20191227/FID.png" class="img-middle-size"><p>どちらの手法も、画像の「本物らしさ」をどのようにスコアするかや、ImageNetでの学習済みモデルに依存してしまっていることなどが課題としてあげられます。</p><p>NeurIPSでは、HYPE [9]というクラウドソーシングを利用して人の目で評価する手法が提案されました。<br>Amazon Mechanical Turkを利用したクラウドソーシングにより、実画像と生成画像の分類を人の目で行います。</p><p>論文では、心理物理学に基づいて評価者への画像の提示時間を制御する方法と、コストを抑えるために時間の制限を設けない方法の2つの手法が提案されています。</p><p>次図のように、HYPEのスコアによってモデルの善し悪しが判断できるような結果が得られています。</p><img src="/images/20191227/HYPE.png"><p>[9]のFigure1,Figure2より引用</p><p>HYPEを試すためには、<a href="https://hype.stanford.edu/" target="_blank" rel="noopener">https://hype.stanford.edu/</a> からAWSのS3の情報を送ると、<code>$60 ~ $100</code> 程度の値段でスコアが得られるようです。<br>NeurIPSは理論よりの研究が多いなかで、少し変わり種の発表に感じました。</p><ul><li>[7] T.salimans, et al., Improved Techniques for Training GANs, 2016.</li><li>[8] M.Heusel, et al., GANs Trained by a Two Time-Scale Update Rule Converge to a Local Nash Equilibrium, 2017.</li><li>[9] S.Zhou, et al., HYPE: A Benchmark for Human eYe Perceptual Evaluation of Generative Models, 2019.</li></ul><h1 id="言語・認知理解"><a href="#言語・認知理解" class="headerlink" title="言語・認知理解"></a>言語・認知理解</h1><p>続いて田中から言語理解や認知機能に関する研究を紹介します。</p><h2 id="SuperGLUE-A-Stickier-Benchmark-for-General-Purpose-Language-Understanding-Systems"><a href="#SuperGLUE-A-Stickier-Benchmark-for-General-Purpose-Language-Understanding-Systems" class="headerlink" title="SuperGLUE: A Stickier Benchmark for General-Purpose Language Understanding Systems"></a>SuperGLUE: A Stickier Benchmark for General-Purpose Language Understanding Systems</h2><ul><li><a href="https://papers.nips.cc/paper/8589-superglue-a-stickier-benchmark-for-general-purpose-language-understanding-systems" target="_blank" rel="noopener">https://papers.nips.cc/paper/8589-superglue-a-stickier-benchmark-for-general-purpose-language-understanding-systems</a></li></ul><p>Alex Wang(※1), Yada Pruksachatkun(※1), Nikita Nangia(※1), Amanpreet Singh(※2), Julian Michael(※3), Felix Hill(※4), Omer Levy(※2), Samuel R. Bowman(※1)</p><p>※1: New York University<br>※2: Facebook AI Research<br>※3: University of Washington<br>※4: DeepMind</p><p>GLUEを置き換える、言語理解タスク・転移学習のベンチマークに関する研究です。<br>GLUEベンチマークでは、システムの評価結果がヒトの評価結果を超えましたが、依然としてシステムの評価を行うために頑健な、単一の評価基準が必要です。<br>そこで、多くの学習データ/ジャンル/難易度をカバーした8つの言語理解タスク用ベンチマーク、SuperGLUEを提案しました。<br>新たな評価タスクとして、coreference resolutionとQAを追加し、トレーニングデータが比較的少ないタスクに重点を置いた設計になっています。リーダーボードや、詳細な分析を行うためのデータセットはGLUE同様に提供されています。</p><p>SuperGLUEは<a href="https://papers.nips.cc/paper/8589-superglue-a-stickier-benchmark-for-general-purpose-language-understanding-systems" target="_blank" rel="noopener">こちら</a>のリンクから使用できます。</p><h2 id="From-voxels-to-pixels-and-back-Self-supervision-in-natural-image-reconstruction-from-fMRI"><a href="#From-voxels-to-pixels-and-back-Self-supervision-in-natural-image-reconstruction-from-fMRI" class="headerlink" title="From voxels to pixels and back: Self-supervision in natural-image reconstruction from fMRI"></a>From voxels to pixels and back: Self-supervision in natural-image reconstruction from fMRI</h2><ul><li><a href="http://papers.nips.cc/paper/8879-from-voxels-to-pixels-and-back-self-supervision-in-natural-image-reconstruction-from-fmri" target="_blank" rel="noopener">http://papers.nips.cc/paper/8879-from-voxels-to-pixels-and-back-self-supervision-in-natural-image-reconstruction-from-fmri</a></li></ul><p>Roman Beliy(※1), Guy Gaziv(※1), Assaf Hoogi(※1), Francesca Strappini(※1), Tal Golan(※2), Michal Irani(※1)</p><p>※1: The Weizmann Institute of Science<br>※2: Columbia University</p><p>fMRIからのNatural Image Reconstructionタスク(ヒトが何かしらの画像を思い浮かべている/見ている際にMRIで脳の活動を記録、脳のMRIデータから、思い浮かべていた/見ていた画像を再構築するタスク)において、fMRIデータと正解の画像ペアのデータ数が少なく、学習が十分にできない問題があり、単純に教師あり学習を行っても十分な精度がでない課題があります。<br>そこで、コーパス外の50000件の画像データと、正解ラベルの付いていないテスト用fMRIデータをそれぞれ用いて、事前にencoder-decoderを学習する方法を提案しました。結果として、state-of-the-art、もしくはそれに匹敵する精度を達成しました。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>NeurIPSは、EXPOからWorkshopまで入れると1週間ほどありました。<br>そこでは、多くの研究発表があり、ここでは取り上げきれないほど、おもしろい研究がたくさんありました。</p><p>みなさんもぜひ、興味のある分野を調べてみてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、Strategic AI Group(SAIG)の田中、上野です。&lt;br&gt;少し前に&lt;a href=&quot;https://future-architect.github.io/articles/20191210/&quot;&gt;NeurIPSという学会に参加して来たことをご報告&lt;
      
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>golang.tokyoで発表してきました</title>
    <link href="https://future-architect.github.io/articles/20191211/"/>
    <id>https://future-architect.github.io/articles/20191211/</id>
    <published>2019-12-11T04:10:53.000Z</published>
    <updated>2019-12-12T02:35:32.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG の辻です。先日開催された <a href="https://golangtokyo.connpass.com/event/156678/" target="_blank" rel="noopener">golang.tokyo #28</a> に当社から2名、登壇しましたのでそのレポートをします。</p><p>LT 景品で頂いた CNCF のキャラクターです。かわいいです。</p><img src="/images/20191212/1.jpg" class="img-small-size"><p><a href="https://www.cncf.io/phippy/" target="_blank" rel="noopener">https://www.cncf.io/phippy/</a></p><h1 id="インライン展開の話-by-辻"><a href="#インライン展開の話-by-辻" class="headerlink" title="インライン展開の話 by 辻"></a>インライン展開の話 by 辻</h1><p>コンパイラがどのような最適化を実施しているか、気にしたことはありますか？コンパイラは定数の畳み込みやデッドコードの削除、インライン展開、他にもいろいろなコードの最適化を実施します。といっても私も正直あまり気にしたことがありませんした。そんなときに Go は積極的にインライン展開をしない言語だ、という噂を聞き、あれ、そもそも Go でインライン展開ってどのような挙動をするんだっけ？という疑問から今回の登壇のネタが生まれました。</p><p>当時調べた内容は Qiita の記事 <a href="https://qiita.com/tutuz/items/caa5d85544c398a2da9a" target="_blank" rel="noopener">Go Compilerのインライン展開についてまとめた</a> にまとまっています。</p><p>私にとって非常に興味深い内容でした。インライン展開がアセンブリを見て、どのように展開されているのか確認したのはもちろん、Go の標準ツールで逆アセンブリしてアセンブリを見ることができます。Go は標準ツールが充実しているとよく言われますが、低レイヤーの内容もシンプルに調べられる点は嬉しいです。</p><p>明日から開発業務で使える内容！ではないと思いますが、多くの Gopher にきっと役に立つだろう！と思い、どこかでお話したいなぁ…と思っていました。そんなときに年末に Go の LT 大会が実施されるという話を聞きました。これは登壇するしかない！と思い、申し込むに至りました。</p><p>LT の資料は以下です。</p><script async class="speakerdeck-embed" data-id="e2a29b8f2b3c43c1b1f10a73f1e0d343" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><img src="/images/20191212/2.jpg" class="img-middle-size"><p>いろいろな反応をいただきました！聞いていただき、ありがとうございます！</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">objdump知らなかった<a href="https://twitter.com/hashtag/golangtokyo?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#golangtokyo</a></p>&mdash; ゴリラ@自宅警備隊 (@gorilla0513) <a href="https://twitter.com/gorilla0513/status/1202179090658164738?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 4, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">objdumpで逆アセンブリ可能<a href="https://twitter.com/hashtag/golangtokyo?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#golangtokyo</a></p>&mdash; ｴﾝｼﾞﾆｱのﾎｹﾞさん（hon-D） 🌔 (@yyh_gl) <a href="https://twitter.com/yyh_gl/status/1202179227790917632?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 4, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">objdump xxx.exe <a href="https://twitter.com/hashtag/golangtokyo?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#golangtokyo</a> <br>インライン展開呼び出しコスト<br>5倍程度</p>&mdash; it engineer (@itengineer18) <a href="https://twitter.com/itengineer18/status/1202179602979807233?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 4, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>年末大 LT 大会ということで総勢 16 名の方が LT を実施しました。いろいろな Gopher の話を聞くことができ、とても有意義でした。当社からは私の他にも澁川が登壇しました。</p><hr><h1 id="あなたはContextの挙動を説明できますか？-by-澁川"><a href="#あなたはContextの挙動を説明できますか？-by-澁川" class="headerlink" title="あなたはContextの挙動を説明できますか？ by 澁川"></a>あなたはContextの挙動を説明できますか？ by 澁川</h1><p>渋川は「あなたはContextの挙動を説明できますか？」というお題で発表してきました。</p><script async class="speakerdeck-embed" data-id="9db3caf5b84a42ee80561f9d9def0a67" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p><code>Context</code>にはタイムアウトやらデッドラインの指定やらができますが、時間というものを外部からいじることができない以上、これらのテストにはその時間分かかってしまいかねません。モックを作ってみようと思ったものの、<code>Context</code>の正確な挙動ってそういえばよくわからないなと思い、調べてみたのがきっかけです。</p><p>怖がらせる意図はなかったのですが、途中のクイズが意地悪すぎて、<code>Context</code>が怖くなった、<code>Context</code>何もわかっていなかった、というようなコメントも見かけましたが、使う側の人はここまで知らなくてもいいと思います。最初の方で紹介しているベストプラクティスだけ知れば十分かと。ここまで知ると嬉しい人は、モックを作りたい人、あるいはキャンセルとタイムアウトを区別したテストを正確に書きたい人・・・とかですかね。</p><h1 id="GoのContextはなぜこのような設計なのか？"><a href="#GoのContextはなぜこのような設計なのか？" class="headerlink" title="GoのContextはなぜこのような設計なのか？"></a>GoのContextはなぜこのような設計なのか？</h1><p>時間が間に合わなそうだったのでバッサリカットしましたが、当初は、<code>Context</code>ってなんでこのような設計になっているのか、というエッセーを入れていました。解説ではなくてエッセーなのは、設計ドキュメントがあれば読みたかったのですが、見当たらなかったので推測だからです。僕が知っている各種設計とは似ても似つかなかったのでどのようにここに至ったのか、というのが気になっていました。</p><p>上記のスライドのコメントにも書かれていましたが、おそらくはC#の<a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken?view=netframework-4.8" target="_blank" rel="noopener">CancellationToken</a>あたりからの着想なのかな、と思っています。非同期処理のときにトークンをわたしておき、呼び出し元からキャンセルの意志を伝える、というものです。</p><p>Goは例外がない、というのはよく言われてきましたが、旧来の例外処理機構（スタックトレースを巻き戻しながら、マッチするcatch節を探し続け、途中のリソースを開放していく）は最近のプログラミングモデルとは多少合わないところがあります。それは非同期と並列処理です。</p><p>非同期の場合、スタックを巻き戻しても本来の呼び出し元にたどり着くとは限りません。JavaScriptのコールバックがネストされた中で、メソッド名の<code>destroy()</code>を<code>destory()</code>にタイポして涙をのみ続けた人には首の骨が折れるぐらい同意して頷いてくれると思います。JavaScriptは<code>Promise</code>の機構の中で例外オブジェクトを持ち回る機能を入れ、<code>async</code>関数の中の<code>try</code>節がこれを特別扱いして<code>catch</code>節に渡すというアクロバティックなことをして非同期でも例外処理を今までどおり書けるようにしています。</p><p>Goはgoroutineの起動が早いため、非同期よりも並列処理を良く使います。並列処理もスタックを巻き戻しても分岐したところには戻れないということもありますが、複数のgoroutineにファンアウトして処理を投げている場合に、1つのgoroutineで問題が発生したときに、他のgoroutineもまとめて終了させる必要が出てきます。そこでCancellationToken的なものが役に立ってきます。それがContextの原型になったのでは、と考えています。</p><p>もう一つ、Goのgoroutineは「IDを持たず区別がない」とよく言われます。実際にはpanic時にIDが表示されるので内部にはあるはずですが、そこにアクセスして、そのIDをもとにしたプログラミングの手法は提供されていません。スレッドローカルストレージがなくてもIDさえあれば、それをキーにグローバル変数に定義しておいたmapから情報取得とかもできたかもしれませんが、Goはそこでスレッドローカルストレージの代わりに、ストレージっぽいオブジェクトを持ち回ることで、解決するという方法を選んだのでは、と思います。これにより、リクエストを受けたgoroutineがさらにファンアウトしても、その子供goroutineに共通でデータを見せることができるようになります。</p><p>まとめると僕のContextの設計の予想は</p><ul><li>Goにない例外処理を、並列処理でも扱いやすい形で入れた</li><li>Goにはないスレッドローカルストレージを、並列処理でも扱いやすい形で入れた</li></ul><p>という感じです。オブジェクト指向の設計だと、1つのクラスに責務は1つ、というのがよく言われることですが、<code>Context</code>は2つの役割を持っています。<code>Context</code>という名前の通り、メインのドメインというか利用されるコードとは世界が違う「環境」を表すものであり、なるべく空気のような薄い存在でいたい、という理由からまとめたのかなぁ、と想像されます。本当のことは聞いてみないとわからないですが。</p><p><code>Context</code>の<code>Err()</code>の伝搬やら、Valueの伝搬は親方向に行かない、というのは不思議に思えますが、ファンアウトした中からさらにファンアウトした場合に、予想外のところのエラーやら値を拾ってしまうと不具合の発見が極めて困難になるのは容易に想像できるため、このような挙動になっているのではないかと思います。</p><p>↑というのはすべて妄想なので、もし何かContextの設計に関する知見をお持ちの方、こっそり教えて下さい！</p><hr><p>関連記事：</p><ul><li><a href="/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li><li><a href="/articles/20191030/">GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG の辻です。先日開催された &lt;a href=&quot;https://golangtokyo.connpass.c
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title> NeurIPS 2019 参加報告</title>
    <link href="https://future-architect.github.io/articles/20191210/"/>
    <id>https://future-architect.github.io/articles/20191210/</id>
    <published>2019-12-10T07:22:02.000Z</published>
    <updated>2019-12-27T08:26:18.810Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、Strategic AI Group(SAIG)の田中、上野です。<br>私たちは現在、NeurIPSという学会に参加するためにカナダに来ています。</p><h2 id="NeurIPSとは"><a href="#NeurIPSとは" class="headerlink" title="NeurIPSとは"></a>NeurIPSとは</h2><p>NeurIPS(Conference on Neural Information Processing Systems)は、機械学習分野のトップカンファレンスで、今年が33回目の開催となります。<br>昨年は参加登録の開始からたった10分ちょっとでチケットが売り切れてしまうほど、チケットの競争率が高くなっています。<br>今年は抽選となり、運よくチケットを引き当てた田中と上野が参加しています。</p><p>それでも参加者が多く、入場の際には長蛇の列ができており、近年の機械学習分野への熱の凄さを体感しました。</p><img src="/images/20191210/registration.jpg"><p>この会場に入るまでにも長い列があり、ここからこのフロアを一周して、やっと受付です(^^;</p><h2 id="会場の様子"><a href="#会場の様子" class="headerlink" title="会場の様子"></a>会場の様子</h2><p>今年のNeurIPSはカナダのバンクーバーで開かれています。<br>最近、急に冬らしくなってきましたが、バンクーバーはもっと寒いです。<br>会場が海沿いのこともあり、しっかりと防寒対策をして臨んでいます。</p><img src="/images/20191210/outside.jpg"><p>一方で、会場内は熱気にあふれ、皆さん発表に熱い視線を送っています。</p><img src="/images/20191210/inside.jpg"><h2 id="チュートリアル講演"><a href="#チュートリアル講演" class="headerlink" title="チュートリアル講演"></a>チュートリアル講演</h2><p>NeurIPS１日目は、主にチュートリアル講演が行われました。<br>以下のようなタイトルのチュートリアルが開催されました。</p><ul><li>Tutorials Session 1<ul><li>Imitation Learning and its Application to Natural Language Generation</li><li>Deep Learning with Bayesian Principle</li><li>Human Behavior Modeling with Machine Learning: Opportunities and Challenges</li></ul></li><li>Tutorials Session 2<ul><li>Interpretable Comparison of Distributions and Models</li><li>Machine Learning for Computational Biology and Health</li><li>Efficient Processing of Deep Neural Network: from Algorithms to Hardware Architectures</li></ul></li><li>Tutorials Session 3<ul><li>Reinforcement Learning: Past, Present, and Future Perspectives</li><li>Representation Learning and Fairness</li><li>Synthetic Control</li></ul></li></ul><p><strong>Bayesian</strong>, <strong>Health</strong> や、<strong>Reinforcement Learning</strong>, <strong>Representation Learning</strong> といった、聞いてワクワクするようなキーワードが並んでいました。</p><img src="/images/20191210/tutorial.jpg"><h2 id="インターン生のポスター発表"><a href="#インターン生のポスター発表" class="headerlink" title="インターン生のポスター発表"></a>インターン生のポスター発表</h2><p><a href="https://wimlworkshop.org/2019/program/" target="_blank" rel="noopener">Women in Machine Learning (WiML) Affinity Workshop</a>というセッションでは、フューチャーのインターン生であるBelonaさんがポスター発表をしていました。</p><p>現在、SAIGではルワンダにある African Institute for Mathematical Scineces(AIMS) という大学からインターン生を受けいれています。<br>AIMSは、African Masters Of Machine IntelligenceというAI人材を育成するためのコースを2018年に新設しました。<br>FacebookやGoogleがサポートしており、世界の名だたる教授が教鞭をとり、アフリカで最高レベルのAI教育を提供しています。<br>優秀な学生たちはFacebookやGoogleなどでインターンを経験し、そのまま就職する場合もあります。<br>Belonaさんは、AIMSでヘルスケア分野における機械学習を専門に学んでいます。<br>(実は、上野は2週間前にルワンダの現地調査に行ってきました。)</p><p>今回、Belonaさんは下記のタイトルで発表しています。<br>時系列データに対して、複数のモデルをアンサンブルすることで、非線形で分散の大きいデータに対する予測精度を向上する取り組みを紹介してくれました。</p><p>「AdaBoost-Models Ensemble Learning to forecast Time series with high variance and nonlinear Trend,<br>Belona Mary SONNA MOMO (AIMS)」</p><img src="/images/20191210/WiML.jpg" class="img-middle-size"><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>明日からは論文の発表が本格的に始まります。<br>バンクーバーを満喫しながら、最新の研究を肌で感じてきたいと思います！</p><img src="/images/20191210/mug.jpg" class="img-small-size">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、Strategic AI Group(SAIG)の田中、上野です。&lt;br&gt;私たちは現在、NeurIPSという学会に参加するためにカナダに来ています。&lt;/p&gt;
&lt;h2 id=&quot;NeurIPSとは&quot;&gt;&lt;a href=&quot;#NeurIPSとは&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>AWS Glueの単体テスト環境の構築手順</title>
    <link href="https://future-architect.github.io/articles/20191206/"/>
    <id>https://future-architect.github.io/articles/20191206/</id>
    <published>2019-12-05T15:22:02.000Z</published>
    <updated>2020-01-21T00:05:43.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p><a href="https://qiita.com/advent-calendar/2019/future" target="_blank" rel="noopener">フューチャーアドベントカレンダー</a>の6日目のエントリーです。<br>昨日は<a href="https://qiita.com/yut0n" target="_blank" rel="noopener">yut0n</a>さんによる「<a href="https://qiita.com/yut0n/items/02a632c90fc076a21046" target="_blank" rel="noopener">GoogleカレンダーのイベントをHangouts Chatに通知するbotを作った話</a>」でした。</p><p>当記事では、AWS Glue をローカル環境で単体テストするための環境構築方法についてまとめました。</p><h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><ol><li>環境構築</li><li>pytest の環境構築</li><li>conftest.py の設定</li><li>テスト対象の作成</li><li>テスト実行</li></ol><h1 id="実行環境"><a href="#実行環境" class="headerlink" title="実行環境"></a>実行環境</h1><ul><li>Amazon Linux 2 AMI 2.0.20190618 x86_64 HVM gp2</li><li>Docker 18.06.1-ce</li><li>docker-compose version 1.24.0</li></ul><h2 id="1-環境構築"><a href="#1-環境構築" class="headerlink" title="1. 環境構築"></a>1. 環境構築</h2><p>docker compose を利用します。<br>GlueのDockerfileは、 こちらの記事(<a href="https://future-architect.github.io/articles/20191101/">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました | Future Tech Blog - フューチャーアーキテクト</a>) にて、紹介されているDockerfileをベースに利用します。<br>少々イメージサイズが大きかったので、小さくする対応をしていますが基本は同じです。</p><p>ディレクトリ構成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── Dockerfile</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── src                 <span class="comment"># ETLスクリプト</span></span><br><span class="line">└── tests               <span class="comment"># テストファイル</span></span><br></pre></td></tr></table></figure><details><summary>Dockerfile</summary><div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://omohikane.com/centos7_docker_python36/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum update -y \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum install -y gcc gcc-c++ make openssl-devel readline-devel zlib-devel wget curl unzip vim epel-release git \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum install -y vim-enhanced bash-completion net-tools <span class="built_in">bind</span>-utils \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum install -y https://centos7.iuscommunity.org/ius-release.rpm \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum install -y python36u python36u-libs python36u-devel python36u-pip \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum install -y java java-1.8.0-openjdk-devel \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm -rf /var/cache/yum/* \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum clean all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> localedef -f UTF-8 -i ja_JP ja_JP.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG ja_JP.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LC_CTYPE <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_NUMERIC <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_TIME <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_COLLATE <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_MONETARY <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_MESSAGES <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_PAPER <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_NAME <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ADDRESS <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_TELEPHONE <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_MEASUREMENT <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_IDENTIFICATION <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL ja_JP.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maven</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -OL https://archive.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; tar -xzvf apache-maven-3.6.2-bin.tar.gz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; mv apache-maven-3.6.2 /opt/ \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /opt/apache-maven-3.6.2 /opt/apache-maven \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm apache-maven-3.6.2-bin.tar.gz</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/lib/jvm/java-<span class="number">1.8</span>.<span class="number">0</span>-openjdk/jre/</span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/opt/apache-maven/bin</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mvn -version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spark</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -OL https://aws-glue-etl-artifacts.s3.amazonaws.com/glue-1.0/spark-2.4.3-bin-hadoop2.8.tgz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; tar -xzvf spark-2.4.3-bin-hadoop2.8.tgz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; mv spark-2.4.3-bin-spark-2.4.3-bin-hadoop2.8 /opt/ \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /opt/spark-2.4.3-bin-spark-2.4.3-bin-hadoop2.8 /opt/spark \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm ./spark-2.4.3-bin-hadoop2.8.tgz</span></span><br><span class="line"><span class="keyword">ENV</span> SPARK_HOME /opt/spark</span><br><span class="line"></span><br><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unlink /bin/python \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /bin/python3 /bin/python \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /bin/pip3.6 /bin/pip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Glueライブラリ取得</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> git config --global http.sslVerify <span class="literal">false</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; git <span class="built_in">clone</span> -b glue-1.0 --depth 1  https://github.com/awslabs/aws-glue-libs \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s <span class="variable">$&#123;SPARK_HOME&#125;</span>/jars /aws-glue-libs/jarsv1 \</span></span><br><span class="line"><span class="bash">  &amp;&amp; sed -i -e <span class="string">'s/mvn/mvn -T 4/'</span> /aws-glue-libs/bin/glue-setup.sh \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ./aws-glue-libs/bin/gluepyspark</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/aws-glue-libs/bin/</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"while :; do sleep 10; done"</span>]</span></span><br></pre></td></tr></table></figure></div></details><p>S3の環境が必要だったため、 <a href="https://github.com/localstack/localstack" target="_blank" rel="noopener">LocalStack</a> を利用しています。</p><p>docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="string">glue.local:</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">./</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">gluelocal</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./src:/opt/src/src</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./tests:/opt/src/tests</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line">      <span class="comment"># dummy configure</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_DEFAULT_OUTPUT=json</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_ACCESS_KEY_ID=xxx</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_SECRET_ACCESS_KEY=xxx</span></span><br><span class="line">  <span class="string">aws.local:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">localstack/localstack</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICES=s3</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line">      <span class="comment"># dummy configure</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_DEFAULT_OUTPUT=json</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_ACCESS_KEY_ID=xxx</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_SECRET_ACCESS_KEY=xxx</span></span><br></pre></td></tr></table></figure><p>コンテナ起動</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><h2 id="2-pytestの環境構築"><a href="#2-pytestの環境構築" class="headerlink" title="2. pytestの環境構築"></a>2. pytestの環境構築</h2><p>必要なパッケージのインストールをします。<br><a href="https://docs.aws.amazon.com/ja_jp/glue/latest/dg/add-job.html" target="_blank" rel="noopener">Glueバージョン 1.0</a> を想定して、pysparkは2.4.3を明示的にインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gluelocal pip install pyspark==2.4.3 boto3 pytest</span><br></pre></td></tr></table></figure><h2 id="3-conftest-py-の設定"><a href="#3-conftest-py-の設定" class="headerlink" title="3. conftest.py の設定"></a>3. conftest.py の設定</h2><p>pytestではテストの前後処理を <code>tests/conftest.py</code> 内に実装する慣習があるためそれにならいます。<br>Test実行時に1回だけ実行したい処理をまとめています。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyspark.context <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(scope="session", autouse=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope_session</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># テスト内で使い回せるようにS3のURLを環境変数に設定</span></span><br><span class="line">    os.environ[<span class="string">"TEST_S3_ENDPOINT_URL"</span>] = <span class="string">"http://aws.local:4572"</span></span><br><span class="line">    sc = SparkContext()</span><br><span class="line">    <span class="comment"># S3のエンドポイントをLocalStackへ差し替える</span></span><br><span class="line">    sc._jsc.hadoopConfiguration().set(<span class="string">"fs.s3a.endpoint"</span>, <span class="string">"http://aws.local:4572"</span>)</span><br><span class="line">    sc._jsc.hadoopConfiguration().set(<span class="string">"fs.s3a.path.style.access"</span>, <span class="string">"true"</span>)</span><br><span class="line">    sc._jsc.hadoopConfiguration().set(<span class="string">"fs.s3a.signing-algorithm"</span>, <span class="string">"S3SignerType"</span>)</span><br><span class="line">    pytest.sc = sc</span><br><span class="line">    pytest.glueContext = GlueContext(pytest.sc)</span><br><span class="line">    pytest.spark = pytest.glueContext.spark_session</span><br></pre></td></tr></table></figure><h2 id="4-テスト対象の作成"><a href="#4-テスト対象の作成" class="headerlink" title="4. テスト対象の作成"></a>4. テスト対象の作成</h2><p>サンプル程度に、S3上のcsvファイルからDynamicFrameを生成する関数をテストします。</p><p>Glueスクリプト: <code>src/etl.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> awsglue.dynamicframe <span class="keyword">import</span> DynamicFrame</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_dynamic_frame_from_csv</span><span class="params">(glueContext: GlueContext, spark, bucket: str, path: str)</span> -&gt; DynamicFrame:</span></span><br><span class="line">    p = <span class="string">"s3://&#123;&#125;/&#123;&#125;"</span>.format(bucket, path)</span><br><span class="line">    <span class="keyword">return</span> glueContext.create_dynamic_frame_from_options(</span><br><span class="line">        connection_type=<span class="string">"s3"</span>,</span><br><span class="line">        connection_options=&#123;<span class="string">"paths"</span>: [p]&#125;,</span><br><span class="line">        format=<span class="string">"csv"</span>,</span><br><span class="line">        format_options=&#123;<span class="string">"withHeader"</span>: <span class="literal">True</span>, <span class="string">"separator"</span>: <span class="string">","</span>&#125;,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>テストコード: <code>tests/test_etl.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> src.etl <span class="keyword">import</span> load_dynamic_frame_from_csv</span><br><span class="line"><span class="keyword">from</span> botocore.client <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_load_dynamic_frame_from_csv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># setup</span></span><br><span class="line">    inputs = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"xxx@example.co.jp"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"yyy"</span>,</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"yyy@example.co.jp"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    input_str = io.StringIO()</span><br><span class="line">    w = csv.DictWriter(input_str, fieldnames=inputs[<span class="number">0</span>].keys())</span><br><span class="line">    w.writeheader()</span><br><span class="line">    <span class="keyword">for</span> input <span class="keyword">in</span> inputs:</span><br><span class="line">      w.writerow(input)</span><br><span class="line">    s3 = boto3.resource(</span><br><span class="line">        <span class="string">"s3"</span>,</span><br><span class="line">        endpoint_url=os.environ[<span class="string">"TEST_S3_ENDPOINT_URL"</span>],</span><br><span class="line">        region_name=<span class="string">"ap-northeast-1"</span>,</span><br><span class="line">        use_ssl=<span class="literal">False</span>,</span><br><span class="line">        config=Config(s3=&#123;<span class="string">"addressing_style"</span>: <span class="string">"path"</span>&#125;),</span><br><span class="line">    )</span><br><span class="line">    bucket_name = <span class="string">"test-csv-bucket"</span></span><br><span class="line">    bucket = s3.Bucket(bucket_name)</span><br><span class="line">    bucket.create(ACL=<span class="string">"public-read-write"</span>)</span><br><span class="line">    body = input_str.getvalue()</span><br><span class="line">    key = <span class="string">"user/2019/12/06/users.csv"</span></span><br><span class="line">    bucket.put_object(Key=key, Body=body, ACL=<span class="string">"public-read-write"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># exec</span></span><br><span class="line">    res_df = load_dynamic_frame_from_csv(pytest.glueContext, pytest.spark, bucket_name, key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># assert</span></span><br><span class="line">    <span class="keyword">assert</span> res_df.count() == len(inputs)</span><br><span class="line">    res_df_json = res_df.toDF().toJSON().take(len(inputs))</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_df_json:</span><br><span class="line">      r = json.loads(res)</span><br><span class="line">      <span class="keyword">assert</span> r <span class="keyword">in</span> inputs</span><br></pre></td></tr></table></figure><h2 id="5-テスト実行"><a href="#5-テスト実行" class="headerlink" title="5. テスト実行"></a>5. テスト実行</h2><p>Glue環境を構築して pytest を実行する <code>gluepytest</code> コマンドが用意されているため、そちらを利用します。<br>PATHを通してあるので、下記で実行できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gluelocal gluepytest</span><br></pre></td></tr></table></figure><p>結果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  adding: awsglue/ (stored 0%)</span><br><span class="line">  adding: awsglue/README.md (deflated 57%)</span><br><span class="line">  adding: awsglue/__init__.py (deflated 37%)</span><br><span class="line">  adding: awsglue/context.py (deflated 78%)</span><br><span class="line">  adding: awsglue/data_sink.py (deflated 60%)</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">================================== <span class="built_in">test</span> session starts ==================================</span><br><span class="line">platform linux -- Python 3.6.8, pytest-5.3.1, py-1.8.0, pluggy-0.13.1</span><br><span class="line">rootdir: /opt/src</span><br><span class="line">collected 1 item</span><br><span class="line"></span><br><span class="line">tests/test_etl.py .                                                               [100%]</span><br><span class="line"></span><br><span class="line">=================================== 1 passed <span class="keyword">in</span> 9.79s ===================================</span><br></pre></td></tr></table></figure><h1 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h1><p>Glueをローカル環境にて、単体テストを実施する環境を整備してみました。<br>Glueの動作確認は、開発エンドポイントを利用して確認することが多く、<br>少々面倒かつ再現性がなかったため、テスト環境を構築してテストを実行することで安定して開発を進めていきたいです。<br>Dockerで作成しているため、CI/CD等にも組み込んでいけたらと考えています。<br>(Dockerfileが1GB程度とまだまだ大きいため、もう少しスリムにしたいなとは思っています。)</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://future-architect.github.io/articles/20191101/">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました | Future Tech Blog - フューチャーアーキテクト</a></li><li><a href="https://dev.classmethod.jp/cloud/aws/aws-glue-local/" target="_blank" rel="noopener">AWS Glueをローカル環境で実行してみた ｜ Developers.IO</a></li></ul><hr><p>関連記事：</p><ul><li><a href="/articles/20180828">5TB/日 のデータをAWS Glueでさばくためにやったこと（概要編）</a></li><li><a href="/articles/20181205/">5TB/日 のデータをAWS Glueでさばくためにやったこと（性能編）</a></li><li><a href="/articles/20190902/">AWS IAMロールの信頼関係の気になる動作</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2019/future&quot; target=&quot;_blank
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Glue" scheme="https://future-architect.github.io/tags/Glue/"/>
    
  </entry>
  
  <entry>
    <title>Go Conferenceの📛を作る</title>
    <link href="https://future-architect.github.io/articles/20191203/"/>
    <id>https://future-architect.github.io/articles/20191203/</id>
    <published>2019-12-03T01:31:11.000Z</published>
    <updated>2019-12-02T15:05:51.275Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20191202/photo_20191202_02.jpeg"><p><a href="https://qiita.com/advent-calendar/2019/future" target="_blank" rel="noopener">フューチャーアドベントカレンダー</a>の3日目のエントリーです。昨日は<a href="https://qiita.com/rkyymmt@github/items/87b13b11dd1c9001592b" target="_blank" rel="noopener">rkyymmt@githubさんによる私のコンピュータ遍歴</a>でした。</p><p>Go Conference 2019 Autumnでは、弊社フューチャーがTofu On Fireスポンサーを努めさせていただきました。Go Conference Fukuokaが参加者に名札を配っており（トップ写真左側）、それが羨ましく、東京のイベントでも配布したい！と思ったので、名札提供に手をあげさせていただきました。どうせ配るなら、外国の人が喜びそうなGenuine Tofu on Fireの実物をお土産にしてもらえばいいかな、ということで、このようになりました。また、個人の名前と、Connpassのアバター画像（≒Twitterのアイコン）が入っているオフ会にはぴったりな名札なので、ぜひとも他のイベントでも身につけていただければと思っています。</p><p>この名札の中身ですが、Goを使って作っていますので、その技術解説その他です。なお、コードはこちらになります。</p><p><a href="https://github.com/shibukawa/tofuonfire" target="_blank" rel="noopener">https://github.com/shibukawa/tofuonfire</a></p><h1 id="tofuonfireコマンドの使い方"><a href="#tofuonfireコマンドの使い方" class="headerlink" title="tofuonfireコマンドの使い方"></a>tofuonfireコマンドの使い方</h1><h2 id="上司にお伺いをたてる"><a href="#上司にお伺いをたてる" class="headerlink" title="上司にお伺いをたてる"></a>上司にお伺いをたてる</h2><p>このプログラムを実行する前に、まずはスポンサーしますというのを宣言します。フューチャーもイベント協賛はいろいろやっていますし、特にうちのユニットはGo案件の割合も多いので、OKはもらいやすくて助かります。今回は参加者、スピーカー、スポンサーあわせて240人とかで、なおかつ1つ120円ということが分かったので、コスト的にはイベントスポンサーと考えると費用対効果は高いです。</p><p>OKをもらったら、イベントのスポンサーページにフューチャーの会社のロゴを載せてもらいます。Tofu On Fireと最初からネタバラシしていましたが、それに気づいたツイートは１件だけでした。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Tofu On Fireの提供パートナーって…<br><br>名札か！！📛🤣<a href="https://twitter.com/hashtag/gocon?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#gocon</a> <a href="https://t.co/VAXncc3Lua" target="_blank" rel="noopener">pic.twitter.com/VAXncc3Lua</a></p>&mdash; к ё м е (@KeME_S) <a href="https://twitter.com/KeME_S/status/1181835890793959425?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 9, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="名札を買う"><a href="#名札を買う" class="headerlink" title="名札を買う"></a>名札を買う</h2><img src="/images/20191202/photo_20191202_03.png"><p>今回は学研モールの、<a href="https://gakken-mall.jp/ec/mirai/cmShopTopPage2.html" target="_blank" rel="noopener">学研の保育用品</a>というサイトから購入しました。1つの商品は10セットまで、という制約があったので、一般参加者の分は2回に分けて購入しました。色は、よくスピーカーに配っているGopherぬいぐるみの色に合わせて、水色（一般参加者）、紫（スタッフ）、ピンク（スポンサー）などをチョイスしました。スピーカーは絵文字📛と同じ、一番格式の高い赤にしました。スカラーシップは緑。遠方枠の名札を買い忘れて他の色のあまりから補填したのは失敗。</p><p>中に入れる紙のサイズは購入するまではわからなかったのですが、スクリーンショットの名札で35mm四方でした。</p><h2 id="コマンドの実行"><a href="#コマンドの実行" class="headerlink" title="コマンドの実行"></a>コマンドの実行</h2><p>このイベントのために突貫で作り、あまり再利用性とか考えていないので、もし利用したい場合はフォークして改変して利用ということになると思いますが、プログラムの概要の紹介を兼ねて使い方を紹介します。</p><p>このプログラムはconnpassのイベント情報からユーザー情報を取得して、PDFファイルを作成するところまで行います。Go ConferenceのconnpassのURLは <a href="https://gocon.connpass.com/event/148602/" target="_blank" rel="noopener">https://gocon.connpass.com/event/148602/</a> です。この数値をコマンドライン引数に設定します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go get github.com/shibukawa/tofuonfire</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./tofuonfire 148602</span></span><br></pre></td></tr></table></figure><p>これでoutputフォルダにPDFがばらばらっと生成されます。これを印刷したらOKです。簡単ですね。</p><p>実際には弊社のロゴのPNG画像をローカルに置かないといけない（＆その画像はApacheライセンスではないので同梱していない）ので、これだけだとエラーになるのですが、そのままは使わないと思いますので、動作確認が取れているコード片として利用していただければ、と思います。</p><p>あとフォントは<a href="http://jikasei.me/font/genshin/" target="_blank" rel="noopener">源真ゴシック</a>を使っていますが、これもライセンスが違うので同梱はしていません。NotoフォントだとOpenTypeですが、Go系のツールはたいていTrueTypeしか対応していない（PureGoの準標準ライブラリがある）ので、NotoフォントのTrueType実装ともいうべきこのフォントを利用させていただきました。これもダウンロードして実行フォルダに置きます。</p><h2 id="PDFの印刷と名札の制作"><a href="#PDFの印刷と名札の制作" class="headerlink" title="PDFの印刷と名札の制作"></a>PDFの印刷と名札の制作</h2><img src="/images/20191202/photo_20191202_04.jpeg"><p>あとはプリンターでA4でカラーで印刷して、カッターとカッティングボードを用意して手作業で入れていきます。中の厚紙（園児の名前、血液型とかを書く欄があるやつ）を引き出して、上に重ねて一緒に差し込むと比較的かんたんにきれいに入れることができました。</p><p>当日はお客さんに探してもらいやすいように、おおまかに先頭のアルファベットごとにグルーピングして会場に持っていきました。</p><p>一週間ぐらい前から作り始めましたが、キャンセルで繰り上がり（有料イベントは待ち行列はなくて空いた瞬間申し込みなので正確には繰り上がりではないのですが）がちょこちょこあって、それの対応が少し面倒でした。今回は金曜日の夕方で名簿を最終確定ということになっていたので、そのタイミングで繰り上がった人の分のPDFを印刷して月曜日のイベントに備えました。あとはスポンサーやスピーカーの人の分の情報収集とかですね。このあたりはスタッフの渉外担当のbudougumiさんやらymotongpooさんにこまめに情報を教えてもらってなんとかしました。Tofu on Fireスポンサーはスタッフ兼務じゃないとなかなか厳しいタスクだな、という感想を持ちました。</p><h1 id="実装の解説"><a href="#実装の解説" class="headerlink" title="実装の解説"></a>実装の解説</h1><h2 id="スクレイピング"><a href="#スクレイピング" class="headerlink" title="スクレイピング"></a>スクレイピング</h2><p>Connpassにはイベントそのもののリストを取得するAPIがあり、イベントカレンダーを作るユースケースとしては十分なのですが、個別のイベントの詳細情報の取得のAPIは用意されていません。そのため、イベント情報のHTMLをパースする必要があります。</p><p>まず、Connpassのサイトに迷惑をかけないように、一度だけHTMLをダウンロードし、その後はローカルのキャッシュから読むようにします。HTMLファイルをキャッシュするのではなくて、読み込んで取り出したユーザー名と画像ファイルのリストのJSONを出力するようにしました。このJSONが存在したら読み込みをそこから行う感じです。</p><p>スクレイピングには定番の<a href="https://godoc.org/github.com/PuerkitoBio/goquery" target="_blank" rel="noopener">“github.com/PuerkitoBio/goquery”</a>を使いました。CSSセレクタっぽい感じで情報の取得ができます。Connpassのイベント参加者ページ（<code>https://connpass.com/event/イベント番号/participation/</code>）を見ると、参加者の種別ごとに<code>participants_table</code>クラスのついた<code>&lt;table&gt;</code>タグがあるので、それをとってきて調べれば簡単そうです。</p><p>テーブルごとに登録されているユーザーのリストを取得するには次のように書けば良いです。テーブルごとのループと、テーブルの中の行ごとのループですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> pages [][]Card</span><br><span class="line">doc.Find(<span class="string">"table.participants_table"</span>).Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, s <span class="keyword">var</span> *goquery.Selection)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> cards []Card</span><br><span class="line">title := spaces.ReplaceAllString(s.Find(<span class="string">"thead tr th"</span>).Text(), <span class="string">" "</span>)</span><br><span class="line">log.Println(title)</span><br><span class="line">page := Page&#123;</span><br><span class="line">Category: title,</span><br><span class="line">&#125;</span><br><span class="line">s.Find(<span class="string">".display_name &gt; a"</span>).Each(<span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">href, _ := s.Attr(<span class="string">"href"</span>)</span><br><span class="line">fragments := strings.Split(href, <span class="string">"/"</span>)</span><br><span class="line">name := fragments[<span class="built_in">len</span>(fragments)<span class="number">-2</span>]</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"open"</span> &#123;</span><br><span class="line">name = fragments[<span class="built_in">len</span>(fragments)<span class="number">-3</span>]</span><br><span class="line">&#125;</span><br><span class="line">log.Println(s.Text() + <span class="string">" ("</span> + href + <span class="string">")"</span>)</span><br><span class="line">card := Card&#123;</span><br><span class="line">Name:      s.Text(),</span><br><span class="line">ImagePath: imagepath,</span><br><span class="line">&#125;</span><br><span class="line">cards = <span class="built_in">append</span>(cards, card)</span><br><span class="line">&#125;)</span><br><span class="line">pages = <span class="built_in">append</span>(pages, cards)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>なお、画像は参加者一覧のページでは解像度が低かったので、個別のユーザーページに飛んでプロフィール画像を取得するようにしています。最終的な画像はS3なので特にアクセス絞らなくてはいいと思いますがプロフィールページは<code>&quot;golang.org/x/time/rate&quot;</code>パッケージを利用して1秒に1ページのみ取得するようにしました。もちろん、この画像も、一度ダウンロード済みの場合はページアクセスをしないようにして、試行錯誤しやすくしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1秒に1回</span></span><br><span class="line">limiter := rate.NewLimiter(rate.Every(time.Second), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ページ取得に合間にこれを挟む</span></span><br><span class="line">limiter.Wait(context.Background())</span><br></pre></td></tr></table></figure><p>はい、これでうまくとれました。</p><h2 id="というわけにはいかなかった"><a href="#というわけにはいかなかった" class="headerlink" title="というわけにはいかなかった"></a>というわけにはいかなかった</h2><p>最初これでうまくいったと思ったのですが、実は1つのカテゴリに100人以上いると、ページングされるということがあとからわかりました。名札を作ってみたら思ったよりも余る。不思議！と思ったら一般参加者130人のうち、後ろ30人が出力されてませんでした。</p><p>これも、goqueryを駆使してなんとか取得しています。moreのリンクがあったらそれをたどり、下のページングのリンクの2ページ目から最終ページの手前までのページにアクセスして追加で取得するようにしています（1ページ目は取得済みなので飛ばし）。ページングのリストが最大10ページまで表示だとすると、1000人までは対応できます。それ以上になるともうちょっとコードが必要かと。</p><img src="/images/20191202/photo_20191202_05.png" style="border:solid 1px #000000"><h2 id="PDFにする"><a href="#PDFにする" class="headerlink" title="PDFにする"></a>PDFにする</h2><p>PDFは<code>&quot;github.com/signintech/gopdf&quot;</code>パッケージを使いました。<br>このパッケージはREADMEから参照されている<a href="https://github.com/oneplus1000/gopdfsample" target="_blank" rel="noopener">サンプル集</a>が充実していたのは良かったです。</p><p>gopdfの座標の単位はポイント数です。A4の紙は約595ptx841pt。一枚の名札は35mm四方なので99pt。余白を入れてA4一枚で5x8で40枚詰め込んだPDFを作成します。</p><p><a href="https://github.com/shibukawa/tofuonfire/blob/master/template.go" target="_blank" rel="noopener">こちらのコード</a>を見ていただくのが早いと思いますが、ページを作って、個々人の名札のオフセットを計算し、それをもとに、枠線とか、画像とか、文字とか細々と位置とか大きさを調整して配置して保存するとPDFができあがります。なるべくアイコンが大きくなるようにしています。文字列は事前にサイズ計算しておいて、センタリングするとかもしています。手間暇かかるけど一番楽しい部分ですね。</p><h2 id="Connpass以外のユーザー情報も取り込む"><a href="#Connpass以外のユーザー情報も取り込む" class="headerlink" title="Connpass以外のユーザー情報も取り込む"></a>Connpass以外のユーザー情報も取り込む</h2><p>今回は一般参加者と当日スタッフ、レギュラースタッフはConnpassから情報が取れましたが、スピーカーとスポンサーは別の管理になっていました。これらの情報は手作業でJSONにまとめておいて、追加で読み込むようにしました。次回やるならここを自動化したい。</p><h1 id="反省"><a href="#反省" class="headerlink" title="反省"></a>反省</h1><p>スポンサーとスピーカーの情報収集が手動というのはすでに説明しましたが、他にも反省が一つあります。</p><p>今回は名札を各自受け取ってから受付という流れでしたが、受付のときに懇親会参加者は別途受付を行い、お酒が飲めるかどうかを確認してシールを貼る、という手順になっていました。参加者名簿と懇親会名簿を集約し、なおかつ事前アンケートでお酒が飲めるかどうかの情報を収集していたら、受付作業をもっとシンプルに簡略化しつつ、名札に🍶アイコンも印刷できたのになぁ、というのは次回やりたいですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>GoでのPDF作成は思いの外かんたんでした。印刷後のサイズもぴったりでした。ちょっとした領収証とかを生成するタスクが来てもgopdfでばっちりそうですね。</p><p>あと、今回は狙ったとおりに、参加者の人が喜んでくれると同時に、<a href="https://twitter.com/search?q=%23gocon%20tofu&src=typed_query&f=live" target="_blank" rel="noopener">フューチャーの社名入りの写真や投稿をガンガンTwitterに投稿してくれて</a>、会社のPR効果としてはとても高かったと思います。GoConに参加していない人からも「うらやましい」という声も聞くことができました。エンジニアと園児をかけたネタだ、というツッコミはありましたが、それは意図してませんでした。なるほど。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Tofu on fire、園児とエンジニアがかかってるんだよ！ <a href="https://twitter.com/hashtag/gocon?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#gocon</a></p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/status/1188844991214305281?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>どうしても採用目的のチラシは置いても売り残りがちですし、本当はGoやりたい！とフューチャーに応募してくれる人が増えるとうれしいものの、イベントのPR作戦としては名前だけを売る、という方向にしました。</p><p>今回のGoConからは平日開催の2000円の有料イベントになって、仕事とかのどうしても仕方がない理由をのぞいたキャンセルもほとんどなくなり、90秒で枠が埋まることもなくなり、運営としては狙ったとおりの効果が得られました。その一方で、DeNAの玉田さんが当日朝の準備のときに懸念されていましたが、有料イベントだと<a href="https://www.caa.go.jp/policies/policy/representation/fair_labeling/premium_regulation/" target="_blank" rel="noopener">景品表示法</a>が関係してきます。今回は2000円なので全員配布のノベルティは総付景品にあたり、400円を超えるとNGになります。全員分はなかったので問題はなかったと思いますが、今回はモバイルバッテリーを持ち込んだスポンサーさんもいて、そろそろ配布物にかかっている１人あたりお金をスポンサー各社に確認・・・みたいなのが必要なのかなぁ、という気がしています。</p><p>名札はイベント運営に直結した消耗品なので、おそらくこの規制からは外れるのではないか、と考えています。あとは、前回のGoConでDeNAさんが配布していた、DeNA社員による発表内容紹介のチラシなんかも良いですね。この路線で、全スピーカーの発表内容＆スケジュールが入ったパンフレットのスポンサーというのはありな気がします。あとはWantedlyさんの同人誌はうらやましいな、と思っています。</p><p>大小の勉強会は今後もさらに増加傾向になると思いますし、コンプライアンスは維持しつつ、各社がイベントの協賛として個性を出していく、みたいな方向性でアイディアを競っていきたいですね。</p><p>明日はTakaakiOtomoさんによるPub/Subと業務利用についての予定「Pub/Subと業務利用についての予定」です。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20191202/photo_20191202_02.jpeg&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2019/future&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>SORACOM USBドングルの自動接続</title>
    <link href="https://future-architect.github.io/articles/20191201/"/>
    <id>https://future-architect.github.io/articles/20191201/</id>
    <published>2019-12-01T03:02:03.000Z</published>
    <updated>2020-01-15T00:46:35.614Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://qiita.com/advent-calendar/2019/future2" target="_blank" rel="noopener">フューチャー2 Advent Calendar 2019</a> の1日目の記事です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>自動化できる業務ならば極力自動化したいというのは万国共通だとは思います。例えば対象がWebページであれば Selenium によるUI操作自動化が可能ですが、PCにインストールされたGUIアプリに対しては、Webページの「idタグ」に相当するものがなく、UIの自動化は簡単にはできないと考えている方が多いのではないでしょうか。</p><p>このWindowsにインストールされたGUIアプリを「マウスで手動クリック」から「コードで自動操作」に切り替える仕事が業務でありましたので、その手法について紹介します。</p><h2 id="無人化要求"><a href="#無人化要求" class="headerlink" title="無人化要求"></a>無人化要求</h2><p>技術的な可否に関わらず、ニュース等で最新のテクノロジー知識を仕入れた人ならば、「無人化したい/自動化したい」という要求が当然出てきます。それらの試みは技術的に面白いものが多く、エンジニア的には「解決しがいのある課題」だと感じます。</p><p>ただし、「無人化したい/自動化したい」案件では、「無人化/自動化を行うプログラムのメンテナンスを行うという、新しい業務が生まれてしまう」ことがあります。<br>開発側から見れば「全体から見ると総作業量は効率化されるのだから、この新しい作業にはお客様側で担当者をアサインしてほしい」となりますが、お客様側から見ると「既存の業務プロセスに新しい業務を追加することは難しい。可能な限り自動化してほしい」という回答となります。</p><p>この場合、エンジニアは…</p><ol><li>「申し訳ありません。不可能です。」と頭を下げる。</li><li>なんとか解決策を見つけて「課題は解決しました。本件はクローズします。」と報告する。</li></ol><p>…のどちらかだと思います。<br>幸いにも、私が担当したタスクでは「2」で対応できましたので、その際の試みを紹介します。</p><h2 id="工場とクラウドを接続したい。"><a href="#工場とクラウドを接続したい。" class="headerlink" title="工場とクラウドを接続したい。"></a>工場とクラウドを接続したい。</h2><p>あらゆる現場、例えば工場などではIoT化の波があり、あらゆる機器をクラウドとつなげたいニーズがあります。そのようなケースでは、「どのように工場とクラウドをつなぐのか」が鍵となります。というわけで、今回は工場を例にとって紹介します。</p><h3 id="工場とクラウドを阻む最大の壁"><a href="#工場とクラウドを阻む最大の壁" class="headerlink" title="工場とクラウドを阻む最大の壁"></a>工場とクラウドを阻む最大の壁</h3><p>工場現場の機器とインターネットを直接繋ぐのはセキュリティ上よろしくないので、例えば「工場→踏み台PC→クラウド」という構成が考えられます。また、新たに物理的なケーブルを用意するのも大変なので、踏み台PC→クラウドは SORACOM社の提供する USB wi-fi Network Adapter 「NCXX UX302NC-R」という製品を利用してみました。</p><p>NCXX UX302NC-Rとは？</p><blockquote><p>LTE/3G/GSM 対応 USB スティック型データ通信端末です。<br>デバイスへセットすることで、SORACOM の提供する通信環境を利用した無線通信が可能となります。<br><a href="https://soracom.jp/products/module/ux302nc-r/" target="_blank" rel="noopener">参照サイト</a></p></blockquote><p>工場とクラウドを繋ぐ「接続の窓口」として SORACOM USBドングル（NCXX UX302NC-R）を設置したのですが、そのアプリが接続における壁となってしまいました。</p><p>SORACOM USBドングルは、デバイスにセットした段階ではインターネットに接続されず、専用のGUIアプリを立ち上げて「<strong>マウスで接続ボタンをクリックする</strong>」ことでネットに繋がる仕様でした。</p><p>CLI経由による操作は見当たらず、カスタマーセンターに電話で問い合わせても…<br>「<strong>コマンド等による操作は想定しておりません。</strong>Connection Manager（SORACOM USBドングル専用のGUIアプリ）を立ち上げ、接続ボタンをクリックしていただけると幸いです。」<br>…という丁寧な忠告をいただきました。</p><p>つまり、このままでは停電対応などでPCを再起動させるたびに、マウスを手動でクリックするという業務をお客様にお願いする必要がありました。「絶対にその業務はお客様に忘れられるのではないか？むしろ忘れられる自信がある！」ということで、自動化を試みるモチベーションが生まれました。</p><h2 id="マウスによるクリックを自動化する"><a href="#マウスによるクリックを自動化する" class="headerlink" title="マウスによるクリックを自動化する"></a>マウスによるクリックを自動化する</h2><p>WindowsのGUIアプリの操作自動化と言っても大げさなものではなく、</p><ol><li>アプリを立ち上げる</li><li>任意の文字列を入力する</li><li>任意のボタンをクリックする</li></ol><p>…といった程度です。</p><h3 id="作業環境-利用ツール"><a href="#作業環境-利用ツール" class="headerlink" title="作業環境/利用ツール"></a>作業環境/利用ツール</h3><ul><li>Windows 10</li><li>Ruby 2.5.x</li><li>selenium-webdriver 3.142.6</li><li>appium_lib 10.4.1</li><li>WinAppDriver 1.2</li><li>Inspect.exe</li></ul><h3 id="Ruby側の準備"><a href="#Ruby側の準備" class="headerlink" title="Ruby側の準備"></a>Ruby側の準備</h3><p>Gemによるパッケージのインストールと、Ruby設定ファイルの一部を編集をしてください。</p><p>Gemによるインストールコマンド</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem install selenium-webdriver -v 3.142.6</span><br><span class="line">gem install appium_lib -v 10.4.1</span><br></pre></td></tr></table></figure><p>Ruby設定ファイルの編集:</p><p>eventmachine.rbを開き、以下の1文を追加してください。<br>（筆者の環境では以下のパスにありました。）<br><code>C:¥Ruby25-x64¥lib¥ruby¥gems¥2.5.0gems¥eventmachine-1.2.7-x64-mingw32¥lib¥eventmachine.rb</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require &apos;em/pure_ruby&apos;</span><br></pre></td></tr></table></figure><h3 id="Windows側の準備"><a href="#Windows側の準備" class="headerlink" title="Windows側の準備"></a>Windows側の準備</h3><p>WinAppDriverというドライバと、Inspect.exe というアプリをインストールしてください。</p><ul><li>WinAppDriver (<a href="https://github.com/microsoft/WinAppDriver" target="_blank" rel="noopener">Microsoftの公式リリース</a>)</li><li>Inspect.exe (<a href="https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">Microsoftの公式リリース</a>) ※Windows 10 SDK に Inspect.exe が含まれています</li></ul><p>また、WinAppDriver を起動するために、PCを「開発者モード」に変更してください。</p><p>以上により、Ruby・Windowsの事前準備が完了です。<br>ここまで長かったですが、これからGUI操作を自動化するコーディングを開始します。</p><h3 id="自動操作の環境整備"><a href="#自動操作の環境整備" class="headerlink" title="自動操作の環境整備"></a>自動操作の環境整備</h3><p>まずは、自動化したいアプリへの絶対パスを取得しましょう。<br>今回は「SORACOM USBドングル」を自動操作するので、そのGUIアプリまでの絶対パスを記載します。<br>（自動操作したいアプリに合わせて、適宜パスを書き換えてください）</p><figure class="highlight ruby"><figcaption><span>connect.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_path = <span class="string">'C:/Program Files (x86)/UX302NC Data Connection Manager/Main/USB Modem.exe'</span></span><br></pre></td></tr></table></figure><p>また、自動操作は WinAppDriver が担当するので、その起動スクリプトも書いてしまいましょう。</p><figure class="highlight ruby"><figcaption><span>connect.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start_driver_cmd = <span class="string">'start "" "C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe" 127.0.0.1 4723/wd/hub'</span></span><br><span class="line">system(start_driver_cmd)</span><br></pre></td></tr></table></figure><p>次は「ボタンをクリックする」を自動化するために、GUIアプリの「ボタンの要素」を取得します。Webページならば「デベロッパーツール」を使えば ページ内要素のidタグが取得できますが、Windows GUIアプリでは「Inspect.exe」を使います。</p><p>自動操作したいGUIアプリと Inspect.exe を立ち上げ、カーソルをボタン等の上にホバーすれば、その要素名が取得できます。</p><p>ex) SORACOM USBドングルの「接続」ボタンの場合<br>接続ボタンの名前は「接続」だとわかります。それ以外にも IsEnabled（ボタンが押せるか）が true になっていることもわかります。<br><img src="/images/20191201/photo_20191201_01.png"></p><h3 id="実装コード"><a href="#実装コード" class="headerlink" title="実装コード"></a>実装コード</h3><p>以上の作業により</p><ul><li>ドライバの起動コマンド</li><li>GUIアプリへのパス</li><li>GUIアプリ内要素の名前</li></ul><p>が準備できたので、GUI操作を自動化するコードを書きます。</p><figure class="highlight ruby"><figcaption><span>connect.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'selenium-webdriver'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'appium_lib'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'rubygems'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ドライバの起動コマンド</span></span><br><span class="line">start_driver_cmd = <span class="string">'start "" "C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe" 127.0.0.1 4723/wd/hub'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GUIアプリへの絶対パス</span></span><br><span class="line">app_path = <span class="string">'C:/Program Files (x86)/UX302NC Data Connection Manager/Main/USB Modem.exe'</span></span><br><span class="line"></span><br><span class="line">$ConnectorSession</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line">    opts =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="symbol">caps:</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="symbol">platformName:</span> <span class="string">"WINDOWS"</span>,</span><br><span class="line">            <span class="symbol">platform:</span> <span class="string">"WINDOWS"</span>,</span><br><span class="line">            <span class="symbol">deviceName:</span> <span class="string">"WindowsPC"</span>,</span><br><span class="line">            <span class="symbol">app:</span> app_path</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ConnectorSession = Appium::Driver.new(opts, <span class="literal">false</span>).start_driver     <span class="comment"># GUIアプリを起動する</span></span><br><span class="line">    wait = Selenium::WebDriver::Wait.new <span class="symbol">:timeout</span> =&gt; <span class="number">120</span>                 <span class="comment"># GUIアプリからの応答を120秒まで待つ</span></span><br><span class="line"></span><br><span class="line">    wait.<span class="keyword">until</span>&#123; $ConnectorSession.find_element(<span class="symbol">:name</span>, <span class="string">"接続"</span>).enabled? &#125;  <span class="comment"># "接続"ボタンの IsEnabled が true になるまで待つ</span></span><br><span class="line">    $ConnectorSession.find_element(<span class="symbol">:name</span>, <span class="string">"接続"</span>).click()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ドライバを起動する</span></span><br><span class="line">system(start_driver_cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># GUIアプリを立ち上げ、自動操作を開始する</span></span><br><span class="line">start()</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回の実装コードでは</p><ol><li>アプリを立ち上げる</li><li>ボタンが押せるようになるのを待つ</li><li>ボタンを押す<br>という簡単な操作を自動化しました。</li></ol><p>これまでは「UI操作の自動化はWebアプリでのみ可能」と思っていましたが、WinAppDriverとAppiumを使うことで「GUIアプリ操作の自動化も可能」だとわかりました。これにより私自身の「自動化スキルの裾野が広がったこと」は、今後増えるであろう「無人化したい/自動化したい」案件に向けても良い兆候だと感じています。</p><p>以上、長文にお付き合いいただき、ありがとうございました。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2019/future2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;フューチャー2 Advent Calendar 2019&lt;/a&gt; の1日目の記事です。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Ruby" scheme="https://future-architect.github.io/tags/Ruby/"/>
    
      <category term="Selenium" scheme="https://future-architect.github.io/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>GDG DevFest in 信州2019に登壇しました</title>
    <link href="https://future-architect.github.io/articles/20191129/"/>
    <id>https://future-architect.github.io/articles/20191129/</id>
    <published>2019-11-29T04:58:44.000Z</published>
    <updated>2019-11-29T05:06:23.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXユニットの伊藤です。普段はGCPの開発支援を行なっているインフラエンジニアです。今回は私の地元である長野で開催された<a href="https://gdg-shinshu.connpass.com/event/151084/" target="_blank" rel="noopener">GDG Devfest 信州</a>に参加しました。今回でこちらの勉強会の参加は2回目になるのですが、登壇する機会をいただいたのでその時のことを書いていきます。</p><img src="/images/20191129/photo_20191129_01.jpeg" class="img-small-size"><h2 id="GDG信州について"><a href="#GDG信州について" class="headerlink" title="GDG信州について"></a>GDG信州について</h2><p>本題に入る前に、この勉強会のコミュニティについて少し説明します。Google Developers Groupを略してGDGと呼び、GDG信州は国内10チャプターあるうちの1つになります。他のチャプターは<a href="https://sites.google.com/site/gdgjapan/" target="_blank" rel="noopener">こちら</a>を見てみてください。</p><p>現在はGDG Cloud信州(旧 GCPUG 信州)とオーガナイザーが同じのため、同時開催されていることが多いようです。首都圏ではGCPUGも細分化されている中、ここでは1回の勉強会で幅広い内容が発表されるため、登壇することはもちろん、参加者側としても楽しみでした。</p><h2 id="登壇を決めたモチベーション"><a href="#登壇を決めたモチベーション" class="headerlink" title="登壇を決めたモチベーション"></a>登壇を決めたモチベーション</h2><p>Terraformを当社に入社して以来3ヶ月弱触ってきて、せっかくならTerraformの触りだけでも紹介したい、また人に教える、話すことを通して知識の再確認や新しいことのインプットをしたいと思って登壇を決めました。また、実家に帰るきっかけにしたり、地元のITも盛り上げたい思いがあり、前回は聴く側でしたが今回は登壇することを決めました。</p><h1 id="当日のセッションについて"><a href="#当日のセッションについて" class="headerlink" title="当日のセッションについて"></a>当日のセッションについて</h1><h2 id="登壇内容"><a href="#登壇内容" class="headerlink" title="登壇内容"></a>登壇内容</h2><p>今回は登壇にあたってのモチベーションにも書きましたが、Terraformについての発表をしました。今回はLTで、かつ幅広い方(ネイティブアプリやハード)が参加されることなんとなく考えていました。そのため、まずはGCPを触るきっかけとして、さらにTerraformを使きっかけになるように資料を作りました。以下がその時の資料になります。</p><script async class="speakerdeck-embed" data-id="fea7b09893e0479cb2f4d5a969c43e70" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script><p>内容を要約すると</p><ul><li>Terraformについての説明</li><li>Terraformを使ってGCEインスタンスを立てる<ul><li>設定を変えても冪等性を保てることを確認してもらう</li></ul></li><li>使ってみて便利だった機能<ul><li><code>terraform fmt</code> を使ったコードの整形</li><li>Workspaceを使ってリソース名を変更</li></ul></li></ul><p>になります。そしてこちらが実際の反応です。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">terraform 便利そう。インフラ担当に教えてあげよう　<a href="https://twitter.com/hashtag/GDG%E4%BF%A1%E5%B7%9E?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#GDG信州</a> <a href="https://twitter.com/hashtag/devfest19?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#devfest19</a></p>&mdash; GRTN (@GRTN_NXST) <a href="https://twitter.com/GRTN_NXST/status/1198118758948061185?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 23, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/devfest19?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#devfest19</a> <a href="https://twitter.com/hashtag/GDG%E4%BF%A1%E5%B7%9E?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#GDG信州</a><br>LT3番目がトップバッターになったterraformの話をkaedemaluさんから <a href="https://t.co/k4KHBPEdZC" target="_blank" rel="noopener">pic.twitter.com/k4KHBPEdZC</a></p>&mdash; GDG信州 (@GDGShinshu) <a href="https://twitter.com/GDGShinshu/status/1198118731253043200?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 23, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>会社に持って帰って共有する、など参加した方からさらに広めていただけるのはとても嬉しいですね。</p><h2 id="その他の勉強会内容"><a href="#その他の勉強会内容" class="headerlink" title="その他の勉強会内容"></a>その他の勉強会内容</h2><p>私が参加した午後からの内容をざっくり紹介します。</p><h3 id="セッション"><a href="#セッション" class="headerlink" title="セッション"></a>セッション</h3><ul><li><a href="https://speakerdeck.com/koda/devfest-in-shinshu-2019-abount-devops-in-gcp" target="_blank" rel="noopener">DevOps環境のの紹介</a><ul><li>言葉としては浸透してきているDevOpsを改めて考える機会になりました。インフラで実際に使える例も示していただいたのでとてもわかりやすかったです。</li></ul></li><li>デバイス＋グーグル：グーグルの技術とDIYのデバイスの繋ぎ方<ul><li>こちらは午前のハンズオンと内容がリンクしたセッションでした。簡単ではありますが、マイコンを使った機械学習の中身等も解説していただきました。</li></ul></li></ul><h3 id="ガジェット品評会"><a href="#ガジェット品評会" class="headerlink" title="ガジェット品評会"></a>ガジェット品評会</h3><p>参加者が持ち寄ったガジェットの品評会を行いました。人によっては昔のガジェットを出展したり、また自作キーボードの数々を並べている方もいました。私も自作キーボードで有名なErgoDoxを時々使うのですが、こういったガジェットを見ると改めて自作も楽しそうだなと思いました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">いつものレトロPC vs モダンキーボードの構図<a href="https://twitter.com/hashtag/GDG%E4%BF%A1%E5%B7%9E?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#GDG信州</a> <a href="https://twitter.com/hashtag/DebFest19?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#DebFest19</a> <a href="https://t.co/5m2GFPQrCQ" target="_blank" rel="noopener">pic.twitter.com/5m2GFPQrCQ</a></p>&mdash; 魔王 (@swan_match) <a href="https://twitter.com/swan_match/status/1198085871397826560?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 23, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/devfest19?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#devfest19</a> <a href="https://twitter.com/hashtag/GDG%E4%BF%A1%E5%B7%9E?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#GDG信州</a><br>信州名物のガジェット品評会始まりました！ <a href="https://t.co/MT0qxwvqDP" target="_blank" rel="noopener">pic.twitter.com/MT0qxwvqDP</a></p>&mdash; GDG信州 (@GDGShinshu) <a href="https://twitter.com/GDGShinshu/status/1198112181981593600?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 23, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h3 id="パネルトーク-災害とIT"><a href="#パネルトーク-災害とIT" class="headerlink" title="パネルトーク 災害とIT"></a>パネルトーク <del>災害とIT</del></h3><p>こちらのセッションでは、まだ皆さんの記憶にも新しい10月の台風の被害から考える、ITをどう災害に用いていくか、また今回の台風では実際に何が役に立ったのかなどを共有していきました。<br>パネルトーク中で話題になったツールは</p><ul><li><a href="https://www.google.org/crisismap/japan?hl=ja&gl=jp" target="_blank" rel="noopener">Google 災害情報マップ</a></li><li><a href="https://maps.gsi.go.jp/#13/36.680751/138.285317/&base=std&ls=std%7C20191012typhoon19_chikumagawa_1016do_sokuho&blend=0&disp=11&lcd=seamlessphoto&vs=c0j0h0k0l0u0t0z0r0s1m0f0&vs2=f0&sync=1&base2=ort&ls2=ort%7Cexperimental_anno&disp2=11&lcd2=experimental_jhj" target="_blank" rel="noopener">国土地理院</a></li><li><a href="https://www.waze.com/ja" target="_blank" rel="noopener">waze</a></li></ul><p>でした。国土地理院のサイトは、今回の台風による浸水地域を現在の地図にオーバーレイ表示させることができます。また過去の水害情報も見ることが可能なので、「歴史に学ぶ」と言う部分において、現在の居住地域に対しての理解が深まりそうでした。<br>Googlerの<a href="https://twitter.com/proppy" target="_blank" rel="noopener">Proppy</a>がアメリカに住んでいた頃はwazeというアプリを使って、使えなくなってしまった道の共有をしていたと話していました。今回の台風で、地元の人からは実際に通れなくなった橋もいくつかあったという話もありました。参加者からはTwitterが交通情報や被害状況を確認するためによく見ていたという声が多かったです。<br>一方で、災害用ツールは必要か、といった議論はありましたが、</p><ul><li>災害時にのみ使うものは浸透しない</li><li>スタンバイしている時のコストがそこそこ高い</li></ul><p>といった意見が多く、一方で普段から使い慣れているツールを災害時にも使えるようにしたいといった声が多かったです。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>私自身、LTでの登壇は2回目になるのですが、改めて発表することを通して自分の知識が整理されたり、人に説明するにあたって正確さが必要であることを改めて認識しました。5分でTerraformの導入や魅力はまだまだ伝えきれていないと思うので、今度はもう少し知識をつけてハンズオンなども行っていきたいです。</p><p>今回参加した勉強会の趣向もありますが、1日でハードからクラウドまで本当に幅広い情報に触れることが出来ました。今まで首都圏の勉強会には積極的に参加してきましたが、自らターゲッティングしており、周辺知識まで同時に入れることはあまりなかったように思います。今回参加して、より自分が興味を持つことができる範囲が広がったと思いました。</p><p>最後になりますが、本記事を読んでくださった方も、足を伸ばして遠くの勉強会へ行ってみてはいかがでしょうか？</p><h2 id="当日のまとめサイト"><a href="#当日のまとめサイト" class="headerlink" title="当日のまとめサイト"></a>当日のまとめサイト</h2><p><a href="https://sites.google.com/site/gdgshinshu/home/archive/devfest19" target="_blank" rel="noopener">DevFest in 信州2019</a></p><hr><p>関連記事：</p><ul><li><a href="/articles/20190820/">初めてのGCPで環境構築してハマったこと</a></li><li><a href="/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a></li><li><a href="/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="/articles/20190827/">GKEのPodから異なるプロジェクトのIPアドレスへ接続できずハマった話</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG/DXユニットの伊藤です。普段はGCPの開発支援を行なっているインフラエンジニアです。今回は私の地元である
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる</title>
    <link href="https://future-architect.github.io/articles/20191128/"/>
    <id>https://future-architect.github.io/articles/20191128/</id>
    <published>2019-11-28T04:08:47.000Z</published>
    <updated>2019-11-28T04:15:59.331Z</updated>
    
    <content type="html"><![CDATA[<p>Go Cloudはいろいろなドライバーが整備されているものの当然のことながら、この世のすべてのバックエンドに対応しているわけではありません。AWSやGCPやAzureが提供されているサービス以外にも、自前で運用しているミドルウェアにも対応したくなったりするはずです。Go Cloudの中を覗き見るついでに、自分でドライバーを実装してみました。</p><p>Go CloudにはPubSubを扱うパッケージ群があります。GCPのPubSub、AWSのSNS/SQS、Azure Service Busというクラウドベンダーのサービス以外に、RabbitMQ、NATS、Kafkaといったオンプレでも使えるミドルウェア（KafkaはAWSのサービスもありますが）もあります。</p><p>アプリケーションのログの収集というと、最近はOpenTelemetryとかNew Relic APMのようなパフォーマンスモニタリングや大規模なマイクロサービスのサポートを目的とした分散トレースなどもありますが、ここで対応されているKafka以外にもFluentdをオンプレやクラウドなどで動かしているお客様も多いので、PubSubのバックエンドとして、Fluentdのpublisherを実装してみます。受け側（Subscription）はなく、サーバーへの送信（Publish）だけなので、fluentdpubという名前でApacheライセンスで公開しました。もとからあるKafkaも合わせれば、ログ収集基盤への送信にもGo Cloudが利用できるようになります。</p><ul><li><a href="https://github.com/future-architect/fluentdpub" target="_blank" rel="noopener">github.com/future-architect/fluentdpub</a></li></ul><p>実装は次の3ステップに分けて実装します。</p><ul><li>Fluentd特化の<code>fluentdpub.OpenTopic()</code>を実装する</li><li><code>fluentdpub.URLOpener</code>を実装する</li><li>Resolverに登録し、<code>pubsub.OpenTopic()</code>で使えるようにする</li></ul><h1 id="Fluentd特化のfluentdpub-OpenTopic-を実装してみる"><a href="#Fluentd特化のfluentdpub-OpenTopic-を実装してみる" class="headerlink" title="Fluentd特化のfluentdpub.OpenTopic()を実装してみる"></a>Fluentd特化の<code>fluentdpub.OpenTopic()</code>を実装してみる</h1><p>Fluentdに実際に接続するのは、公式の<code>&quot;github.com/fluent/fluent-logger-golang/fluent&quot;</code>パッケージを利用します。</p><p>まず、Fluentd特化の<code>OpenTopic()</code>を実装しますが、まず、<code>fluent</code>パッケージのコネクション情報のインスタンスをそのまま受け取るようにします。このようにすることで、<code>fluent</code>パッケージの機能をすべて利用する、という使い方をかんたんにユーザーに提供できます。すべての機能をラップするのは大変ですので。</p><p>Go Cloudのお作法として、インタフェースをあまり使わないというものがあります。PubSubに関しては次のようなコードになります。</p><ul><li><code>gocloud.dev/pubsub/driver</code>パッケージの<code>Topic</code>インタフェースを満たす構造体を作る。これが最終的にFluentdへのアクセスを担うことになる。</li><li><code>Topic</code>インタフェースを満たす構造体のポインタを<code>gocloud.dev/pubsub</code>パッケージの<code>NewTopic()</code>に渡しし、ユーザーに<code>*pubsub.Topic</code>のポインタを返す</li></ul><p>利用者は<code>gocloud.dev/pubsub</code>パッケージだけを知っていればいいが、実装者はそれに加えて<code>gocloud.dev/pubsub/driver</code>パッケージを実装するという区分けになっています。</p><p>それでは実装していきます。PubSubのAPIとFluentdを比べると、Fluentdにはタグがあり、PubSubにはBodyがあるという違いがあります。 <code>OpenTopic()</code> にはこの違いを吸収するオプションを追加します。Bodyで設定されたコンテンツは<code>message</code>の値に設定し、逆に <code>tag</code> で設定された値は<code>tagPrefix</code>と組み合わせてタグとなる（<code>tagPrefix.tag</code>が最終的なタグになる）、というルールにします。このあたりのルールの違いを吸収する方法はここで検討が必要になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TopicOptions <span class="keyword">struct</span> &#123;</span><br><span class="line">BodyKey <span class="keyword">string</span></span><br><span class="line">TagKey  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenTopic</span><span class="params">(f *fluent.Fluent, tagPrefix <span class="keyword">string</span>, opt TopicOptions)</span> <span class="params">(*pubsub.Topic, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> f == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"fluentdpub: fluent.Fluent is required"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> opt.BodyKey == <span class="string">""</span> &#123;</span><br><span class="line">opt.BodyKey = <span class="string">"message"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> opt.TagKey == <span class="string">""</span> &#123;</span><br><span class="line">opt.TagKey = <span class="string">"tag"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pubsub.NewTopic(&amp;topic&#123;</span><br><span class="line">f:         f,</span><br><span class="line">tagPrefix: tagPrefix,</span><br><span class="line">bodyKey:   opt.BodyKey,</span><br><span class="line">tagKey:    opt.TagKey,</span><br><span class="line">&#125;, <span class="literal">nil</span>), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全メソッドの実装の紹介はしませんが、一番のコアとなる<code>SendBatch()</code>メソッドだけ紹介します。メッセージの配列が来るので、自分のモジュールが対象としているエクスポート先（ここではFluentd）に情報を流します。</p><p>メタタグの一部をタグとして取り出して、構造体のフィールドのtagPrefixなどと組み合わせて、出力先のタグ名を決定します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t topic)</span> <span class="title">SendBatch</span><span class="params">(ctx context.Context, ms []*driver.Message)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, msg := <span class="keyword">range</span> ms &#123;</span><br><span class="line"><span class="keyword">var</span> fullTag <span class="keyword">string</span></span><br><span class="line">tag, ok := msg.Metadata[t.tagKey]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="built_in">delete</span>(msg.Metadata, t.tagKey)</span><br><span class="line"><span class="keyword">if</span> t.tagPrefix != <span class="string">""</span> &#123;</span><br><span class="line">fullTag = t.tagPrefix + <span class="string">"."</span> + tag</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fullTag = tag</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fullTag = t.tagPrefix</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> fullTag == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Message %v doesn't have tag"</span>, msg.AckID)</span><br><span class="line">&#125;</span><br><span class="line">msg.Metadata[t.bodyKey] = <span class="keyword">string</span>(msg.Body)</span><br><span class="line">err := t.f.Post(fullTag, msg.Metadata)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この<code>OpenTopic</code>も、他のPubSub APIでは公開APIとなっていますし、かんたんですが、これだけでもすでに使えるようになっているはずです。これで、<code>fluentdpub</code>の背骨が出来上がりました。</p><h1 id="fluentdpub-URLOpenerを実装する"><a href="#fluentdpub-URLOpenerを実装する" class="headerlink" title="fluentdpub.URLOpenerを実装する"></a><code>fluentdpub.URLOpener</code>を実装する</h1><p>次に、URLなどの文字列をパースしてFluentdに接続する部分を実装していきます。これはNATS向けのPubSubでも公開構造体・メソッドとして実装されていますが、ドキュメントには書かれていません。</p><p><code>pubsub</code>パッケージの共通初期化関数の場合、対象のサービスを選択する方法はURLしかありません。先ほどの関数は挙動を変えるオプションは<code>TopicOptions</code>構造体を利用していましたが、この追加のオプションも渡せないので、すべてURLの中に情報をもたせる必要があります。</p><p>なお、NATS向けの実装では、オペレーターが気にするNATSサーバーの接続先は<code>NATS_SERVER_URL</code>で指定し、ソースコード中に登場しうるURLにはトピック名などの開発者向けの情報のみという使い分けがされています。これも、Go Cloudの設計思想に従った役割分担と言えます。<code>fluentdpub</code>も、<code>FLUENTD_UPSTREAM_URL</code>という環境変数に接続情報（プロトコル、ホスト、ポート）は任せて、URLはタグ名のみとします。それ以外の情報をここでは扱います。</p><p>TagPrefixというのはFluentd全体でタグを先頭につけたい場合に使うものとします。というのも、PubとSubが対応した他のPubSubのコードの識別子と比べると、Fluentdの方が分析の方は分析に任せるものとして、なるべく詳細な情報をタグに載せようとする分、識別子は長くなります。prodとかdevみたいな文字列をオペレータ視点で入れたくなるかもしれませんので、これを追加できるようにしておきます。</p><p>実装としては以下の通りです。先ほど作った<code>topic</code>構造体に対して<code>、TopicOptions</code>ではなく、URLをキーとして扱えるようにする機能がこれで実現されました。もう少しです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> URLOpener <span class="keyword">struct</span> &#123;</span><br><span class="line">Connection *fluent.Fluent</span><br><span class="line">TagPrefix <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *URLOpener)</span> <span class="title">OpenTopicURL</span><span class="params">(ctx context.Context, u *url.URL)</span> <span class="params">(*pubsub.Topic, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> opt TopicOptions</span><br><span class="line">key := u.Query().Get(<span class="string">"bodykey"</span>)</span><br><span class="line"><span class="keyword">if</span> key != <span class="string">""</span> &#123;</span><br><span class="line">opt.BodyKey = key</span><br><span class="line">u.Query().Del(<span class="string">"bodykey"</span>)</span><br><span class="line">&#125;</span><br><span class="line">tagkey := u.Query().Get(<span class="string">"tagkey"</span>)</span><br><span class="line"><span class="keyword">if</span> tagkey != <span class="string">""</span> &#123;</span><br><span class="line">opt.TagKey = tagkey</span><br><span class="line">u.Query().Del(<span class="string">"tagkey"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> param := <span class="keyword">range</span> u.Query() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"open topic %v: invalid query parameter %s"</span>, u, param)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> subject <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> o.TagPrefix != <span class="string">""</span> &amp;&amp; u.Hostname() != <span class="string">""</span> &#123;</span><br><span class="line">subject = o.TagPrefix + <span class="string">"."</span> + u.Hostname()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">subject = o.TagPrefix + u.Hostname()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OpenTopic(o.Connection, subject, opt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="リゾルバーに登録"><a href="#リゾルバーに登録" class="headerlink" title="リゾルバーに登録"></a>リゾルバーに登録</h1><p>それでは最終段階に入ります。URLスキーマを登録することで、共通APIの<code>pubsub.OpenTopic()</code>などの関数からも使えるようになり、マルチクラウドに一歩近づきます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Scheme = <span class="string">"fluentd"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">o := <span class="built_in">new</span>(defaultDialer)</span><br><span class="line">pubsub.DefaultURLMux().RegisterTopic(Scheme, o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> defaultDialer <span class="keyword">struct</span> &#123;</span><br><span class="line">opener *URLOpener</span><br><span class="line">err    error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d defaultDialer)</span> <span class="title">OpenTopicURL</span><span class="params">(ctx context.Context, u *url.URL)</span> <span class="params">(*pubsub.Topic, error)</span></span> &#123;</span><br><span class="line">c, tag, err := parseEnvVar(os.Getenv(<span class="string">"FLUENTD_UPSTREAM_URL"</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">conn, err := fluent.New(*c)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">o := URLOpener&#123;</span><br><span class="line">Connection: conn,</span><br><span class="line">TagPrefix:  tag,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> o.OpenTopicURL(ctx, u)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最終的にはこの内部の先ほど実装した<code>URLOpener.OpenTopicURL()</code>メソッドを呼んでいます。一点異なるのは、環境変数のパース部分でしょう。URL形式で渡されたものを<a href="https://github.com/future-architect/fluentdpub/blob/master/init.go#L81" target="_blank" rel="noopener">パースしています</a>。</p><h1 id="実装したものの整理"><a href="#実装したものの整理" class="headerlink" title="実装したものの整理"></a>実装したものの整理</h1><p>この記事ではストレートに一発でできたかのように書いていますが、実際作成中は何が何をするものか整理ができておらず、結構混乱して手戻りしつつ実装しました。整理をしてみると、コードが少ない薄い機能を先に実装し、徐々にロジックが多い文字列からの初期化に手を出していっていることがわかります。</p><table><thead><tr><th align="center"></th><th align="center">実装したもの</th><th align="center">接続情報</th><th align="center">タグ設定</th><th align="center">最後に何をする？</th></tr></thead><tbody><tr><td align="center">ステップ1</td><td align="center"><code>OpenTopic()</code></td><td align="center">*fluent.Fluent</td><td align="center"><code>TopicOptions</code></td><td align="center"><code>pubsub.NewTopic()</code>呼び出し</td></tr><tr><td align="center">ステップ2</td><td align="center"><code>URLOpener</code></td><td align="center">*fluent.Fluent</td><td align="center"><code>URL</code>をパース</td><td align="center">ステップ1で作ったものを呼び出し</td></tr><tr><td align="center">ステップ3</td><td align="center"><code>defaultDialer</code></td><td align="center">環境変数をパース</td><td align="center"><code>URL</code>をパース</td><td align="center">ステップ2で作ったものを呼び出し</td></tr></tbody></table><h1 id="使い方とまとめ"><a href="#使い方とまとめ" class="headerlink" title="使い方とまとめ"></a>使い方とまとめ</h1><p>テスト用にDockerを起動します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --rm -v <span class="variable">$&#123;PWD&#125;</span>/tmp/fluentd:/fluentd/<span class="built_in">log</span> --name fluentd -p 24224:24224 fluent/fluentd:latest</span></span><br></pre></td></tr></table></figure><p>よく使うと思われるステップ3は、環境変数を設定し、URLとして接続情報を渡す必要があります。ここでは、すべてのタグのプリフィックスとして、<code>first</code>を設定しています(省略可能)。タグ名にピリオドを差し込むことで2段階、3段階でも深いタグを設定できます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> FLUENTD_UPSTREAM_URL=tcp://localhost:24224/first</span></span><br></pre></td></tr></table></figure><p><code>pubsub.OpenTopic</code>にはURLを設定します。プリフィックスの次に設定されるタグも指定します（省略可能）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topic, err := pubsub.OpenTopic(context.Background(), <span class="string">"fluentd://second"</span>)</span><br></pre></td></tr></table></figure><p>あとは送信だけですね。ここでもタグを設定しています（省略可能）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">topic.Send(context.Background(), &amp;pubsub.Message&#123;</span><br><span class="line">Body: []<span class="keyword">byte</span>(<span class="string">"Hello, World!\n"</span>),</span><br><span class="line">Metadata: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"tag"</span>:        <span class="string">"third"</span>,</span><br><span class="line"><span class="string">"language"</span>:   <span class="string">"en"</span>,</span><br><span class="line"><span class="string">"importance"</span>: <span class="string">"high"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3か所でそれぞれタグを設定していますが、それらは結合されて、<code>first.second.third</code>というタグになるという実装にしています。実行してみると、Dockerで起動したFluentdのフォルダにファイルが生成されてログが出力されていることが確認できるでしょう。</p><p>まだ全部のコードを読んだわけではないですが、だいたいはこのような階層構造になっているようです。テストもしやすいですし、もし、何かを実装したくなった場合もこのような手順で実装していくとスムーズでしょう。</p><h1 id="Go-Cloud集中連載の結びの言葉"><a href="#Go-Cloud集中連載の結びの言葉" class="headerlink" title="Go Cloud集中連載の結びの言葉"></a>Go Cloud集中連載の結びの言葉</h1><p>10月ごろに、社内チャットのGoチャンネルにGo Cloudをみんなで集まって技術ブログに集中連載してみませんか？と軽く声をかけたところ、何人かから声があがり、5人で7本の記事が集まりました（1人はPCトラブルで復旧中）。Go Cloudは幅広いライブラリですし、学ぼうとしても、個人の興味のあるところ以外はどうしても手薄になりがちです。いろいろな興味・仕事のメンバーを集めたことで、それぞれの興味がオーバーラップして、紹介記事としてのカバレッジをあげることができました。</p><p>内容としては主要な機能の説明は網羅できたと思いますし、ウェブで情報を見たことがないローカルでのAWS/GCPのエミュレーションと組み合わせたGo Cloudのテスト環境構築、ドライバーの実装と幅も深さも1人では書けない記事をお届けできたと思います。中には、実現のための苦労が滲み出る記事もありましたが、今後も、仕事を通じてGo Cloudのノウハウが溜まったら、不定期で記事を公開していこうと思っています。</p><hr><ul><li><a href="/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a></li><li><a href="/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a></li><li><a href="/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li><li><a href="/articles/20191115/">Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する</a></li><li><a href="/articles/20191119/">Go Cloud#6 GCPのローカルエミュレータを活用する</a></li><li>Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる（この記事です）</li></ul><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Go Cloudはいろいろなドライバーが整備されているものの当然のことながら、この世のすべてのバックエンドに対応しているわけではありません。AWSやGCPやAzureが提供されているサービス以外にも、自前で運用しているミドルウェアにも対応したくなったりするはずです。Go C
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>「脱Oracle」の背景にある、Oracle Databaseの価値を改めて考える</title>
    <link href="https://future-architect.github.io/articles/20191121/"/>
    <id>https://future-architect.github.io/articles/20191121/</id>
    <published>2019-11-21T00:20:12.000Z</published>
    <updated>2019-11-21T01:52:57.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2019年10月15日、<a href="https://jp.techcrunch.com/2019/10/16/2019-10-15-amazon-migrates-more-than-100-consumer-services-from-oracle-to-aws-databases/" target="_blank" rel="noopener">Amazonは自社サービスにおける実質的な”脱Oracle”を発表</a>しました。75PBに及ぶデータを、傘下のAWSが提供するDatabase Service（AuroraやDynamoDB、Redshiftなど）へと移行したとの事。</p><p>この一報は、Amazonというグローバル規模のECの巨人、クラウド・プラットフォーマーのリーダーの一角が、大規模基幹システム領域におけるRDBMSのデファクト・スタンダードと決別したという点で、業界関係者に対して非常に大きなインパクトを残したものかと思います。<br>大人の色々な側面が垣間見えるものの、非常に難易度の移行PJであった事はを想像に難くありません。</p><p>“Oracleもいよいよ賞味期限を迎える”</p><p>果たしてそうなのか。ここで今一度、<strong>“脱Oracle”とは何を脱する事なのか</strong>、を考えてみます。</p><h2 id="“脱Oracle”とは？"><a href="#“脱Oracle”とは？" class="headerlink" title="“脱Oracle”とは？"></a>“脱Oracle”とは？</h2><p>第1は高コスト &amp; ベンダー・ロックインからの脱却です。Oracle Databaseの価格が競合のプロダクトと比較して高額である中で、価格改定や廉価版プロダクトの提供停止、自社クラウド・プラットフォームへの見る人によってはやや露骨に見える誘導といった流れに対してのアレルギー反応から生まれた潮流と見ます。</p><p>第2はHWと代替プロダクト(主にPostgreSQL)の進化です。HWに関しては、DBの性能面でボトルネックとなりやすい物理I/Oの領域におけるフラッシュストレージの普及が大きいと考えます。</p><p>PostgreSQLは近年、メジャーバージョンのリリース毎に目覚ましい機能追加を続けています。特に注目すべきはパーティショニング機能で、Oracleの専売特許と言って過言でなかった機能レベルに近づきつつあります。</p><p>また、PostgreSQLはBSDライセンスの体系を採用している事から、後述のAurora(RDS)、RedshiftといったAWSのマネージド・サービス、EnetrpriseDB、Vertica、Greenplumなどの商用プロダクトのベースとして採用され、名を変え機能拡張された形で世出しています。</p><p>具体的な採用領域としては、Oracle EEの代替・SEの移行先としてAurora(RDS)やEnterpriseDB、Exadataの代替(DHW系ワークロードの場合)としてRedshiftやVertica、Greenplumといったマッピングになるかと思います。</p><p><strong>「デザインしたアーキテクチャに対して、必要な機能とコストを鑑みてプロダクト選定した結果、それはOracle Databaseでなかった」</strong></p><p>私はこれを”脱Oracle”と定義します。</p><h2 id="Oracleの進化"><a href="#Oracleの進化" class="headerlink" title="Oracleの進化"></a>Oracleの進化</h2><p>Oracle Databseは時代のニーズに応え続ける事により、DBMSのリーディング・プロダクトという地位を築きました。</p><p>以降では、改めてOracle Databaseの歴史を辿ってみたいと思います。</p><h3 id="Oracle-V2"><a href="#Oracle-V2" class="headerlink" title="Oracle V2"></a>Oracle V2</h3><ul><li>Oracle Databaseはイメージ戦略(枯れているプロダクトと印象付けたい)からV2銘と打たれ、<strong>世界初の商用RDBMS</strong>としてリリースされました。</li></ul><h3 id="Oracle-8"><a href="#Oracle-8" class="headerlink" title="Oracle 8"></a>Oracle 8</h3><ul><li><strong>パーティショニング機能</strong>が実装され、テーブルをパーティション・キーに応じて物理分割する事が可能となりました。これにより、ストレージ(HDD)ネックの時代において、I/O極小化の観点での新たなチューニング・アプローチをもたらしました。</li><li><strong>ORDBMSの機能(関数や型の独自定義)</strong>が実装され、より柔軟なデータ管理が可能となりました。<br>※ORDBMSの実装自体はOracleが他プロダクトに先行しているものではありません</li></ul><h3 id="Oracle-9i"><a href="#Oracle-9i" class="headerlink" title="Oracle 9i"></a>Oracle 9i</h3><ul><li>9iで実装された<strong><a href="https://docs.oracle.com/cd/E15817_01/rac.111/e05738/admcon.htm" target="_blank" rel="noopener">Real Application Clusters</a>(RAC)</strong>は業界屈指の革新的な発明だと私は解釈しています。クラスタ構成ノードのメモリ間でデータを転送・共有させる事で、トランザクションを担保しながらDBのスケールアウトを可能としました。このアーキテクチャのボトルネックは物理ストレージの性能に依存しますが、ストレージが性能限界でない限りはHWリソースの追加により処理性能がスケールすします(機能特性に応じたのチューニングは必要です)。</li><li>9iの登場は、ベンダー・ロックイン状態の企業における<strong>“脱メインフレーム”</strong>にあたっての強力な武器となりました。</li></ul><h3 id="Oracle-10g"><a href="#Oracle-10g" class="headerlink" title="Oracle 10g"></a>Oracle 10g</h3><ul><li>10gにおいて実装された<strong>Grid Infrastructure</strong>、とりわけ<strong><a href="http://otndnld.oracle.co.jp/document/products/oracle11g/111/doc_dvd/server.111/E05783-04/asmcon.htm" target="_blank" rel="noopener">Automatic Storage Management</a>(ASM)</strong>の機能は、ストレージの仮想化を実現しました。Oracle Databaseから見えるデバイスをASM DiskGroupという形で抽象化させる事で、I/Oを複数の物理デバイスに分散可能となります。これにより、Oracleは可用性の向上とともに、前述のRACの性能面での懸念を補完しました。</li><li>当該バージョン以降からは、DB運用の自動化(機械化)を目指した機能が追加されています。</li></ul><h3 id="Oracle-Exadata-Database-Machine"><a href="#Oracle-Exadata-Database-Machine" class="headerlink" title="Oracle Exadata Database Machine"></a>Oracle Exadata Database Machine</h3><ul><li>現在のオンプレミス・シーンにおいて、最高峰のRDBMS環境です。Oracle社のSun Microsystems買収により、SunのHW技術を土台としてOracle Databaseの稼働に特化したHW/MW一体のプロダクトが登場しました。</li><li>Oracle社は、<strong><a href="http://otndnld.oracle.co.jp/ondemand/technight/20180117%20TechNigiht%20Exadata_1.pdf" target="_blank" rel="noopener">“Exadataに移行するだけで性能が向上する”</a></strong>という謳い文句とともに売り込みを行い、2010年代に多くの導入事例が生まれました。このコンセプトは、<strong>自PJメンバーのスキル不足や、アーキテクチャの多少の考慮不足をプロダクトがカバーしてくれる</strong>という点で、システムの導入側にとっては非常に魅力的です。それゆえに、アーキテクチャ・デザインで勝負したい人達(私たちもそうですが)にとっては、最終手段的位置付けなのではないでしょうか。</li></ul><h3 id="Oracle-19c-12cR2"><a href="#Oracle-19c-12cR2" class="headerlink" title="Oracle 19c(12cR2)"></a>Oracle 19c(12cR2)</h3><ul><li>11g以降も、Oracleは機能アップグレードを継続的に行ってきました。現時点での最新バージョンは19cで、これは旧バージョン体系(Oracle社が2018年リリースよりポリシー変更)では12cR2に相当します。</li><li>近年ではクラウド・プラットフォームでの稼働を意識した機能追加がされていますが、プロダクトのライセンス体系(廉価版エディションの廃止、稼働筐体の物理CPUコア数に対する課金など)がOracle Cloudを前提としているため、前述のアレルギー反応を生む結果となっています。</li></ul><h2 id="Amazonの事例から見る-推察する-”脱Oracle”"><a href="#Amazonの事例から見る-推察する-”脱Oracle”" class="headerlink" title="Amazonの事例から見る(推察する)”脱Oracle”"></a>Amazonの事例から見る(推察する)”脱Oracle”</h2><p>先に取り上げたAmazonにおけるDBのAWS移行に関して、どういった機能マッピングで”脱Oracle”したのか、私なりにAWSのマネージド・サービスとのマッピングして読み解いてみたいと思います。</p><p>※あくまでも私個人の推察であり、関係者へのヒアリング等に基づいたものではありません</p><h3 id="Aurora-RDS"><a href="#Aurora-RDS" class="headerlink" title="Aurora(RDS)"></a>Aurora(RDS)</h3><p><a href="https://aws.amazon.com/jp/rds/aurora/" target="_blank" rel="noopener">https://aws.amazon.com/jp/rds/aurora/</a></p><p>ハイトランザクションのOLTP系のDBがここに移行されたと推察します。ECのコア領域の大半の移行先がここなのではないでしょうか。<br>ワークロード特性によって、PostgreSQLのMySQLで使い分けをしているかもしれません。</p><h3 id="Redshift"><a href="#Redshift" class="headerlink" title="Redshift"></a>Redshift</h3><p><a href="https://aws.amazon.com/jp/redshift/" target="_blank" rel="noopener">https://aws.amazon.com/jp/redshift/</a></p><p>RedshiftのようなMPPアーキテクチャの分散RDBMSが活きるのは、構造化された大量データを扱うバッチ処理や、BIのようなアドホックなクエリが発行される(いわゆる事由分析)といった領域です。<br>ECのイメージでは、多角的なメトリクスでの売上等の集計であったり、顧客の行動分析など、主に(やはり)BI領域で適用されているのではと推察します。</p><h3 id="DyanmoDB"><a href="#DyanmoDB" class="headerlink" title="DyanmoDB"></a>DyanmoDB</h3><p><a href="https://aws.amazon.com/jp/dynamodb/" target="_blank" rel="noopener">https://aws.amazon.com/jp/dynamodb/</a></p><p>RDBMSよりもNoSQL(KVS)で管理する方が適しているデータを管理するようなアプリケーションで利用していると推察します。<br>昨年にトランザクション機能がリリースされるなど、採用可能領域を拡げてる印象です。トランザクション機能はユーザーの需要に応えたというのは当然あるでしょうが、もしかしたらAmazonのDB移行PJを見据えた側面もあるかもしれません。</p><h3 id="Neptune"><a href="#Neptune" class="headerlink" title="Neptune"></a>Neptune</h3><p><a href="https://aws.amazon.com/jp/neptune/" target="_blank" rel="noopener">https://aws.amazon.com/jp/neptune/</a></p><p>リコメンド機能など、消費者と商品の関連性の分析といった領域で利用していると推察します。<br>機能実装の初期段階からグラフDBを利用している事も考えられ、当該領域に関しては”脱Oracle”のスコープ外かもしれません。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p><a href="https://aws.amazon.com/jp/elasticache/" target="_blank" rel="noopener">ElasticCache</a>、<a href="https://aws.amazon.com/jp/documentdb/" target="_blank" rel="noopener">DocumentDB(MongoDB)</a>、<a href="https://aws.amazon.com/jp/timestream/" target="_blank" rel="noopener">Timestream</a>、<a href="https://aws.amazon.com/jp/qldb/" target="_blank" rel="noopener">QLDB</a> 等のマネージド・サービスも適宜利用しているでしょうし、非/未公開のDBも利用しているかもしれません。</p><h2 id="Oracleの現在地"><a href="#Oracleの現在地" class="headerlink" title="Oracleの現在地"></a>Oracleの現在地</h2><p>ここまで述べてきたように、Oracle Databaseは現在においても最も洗練されたRDBMSの一つでしょう。しかしながら、市場におけるシェアは減っていくものと考えます。DBMSはOracle一択といっても過言ではなかった時代から、数多の選択肢が存在する群雄割拠の時代に突入しています。</p><p>ここ数年、私自身が顧客や業界関係者と会話する中でも、”脱Oracleがよしとされる風潮”を感じる場面に多く遭遇します。Oracle Databaseの旗色は悪く、今後ドラスティックな方向転換(価格など含めたライセンス体系の見直し)がない限りは劇的に良くなる事もないでしょう。</p><p>“脱Oracle”は大いに結構な事だと思います。</p><p>しかしながら、そこには敬意があるべきと考えます。Oracle DatabaseはRDBMSの歴史を作り、未だDBMSのリーディング・プロダクトです。その存在あったからこそ、追随せんとするプロダクト/サービスが生まれているのもまた事実です。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>RDBMSは世の中を変えました。</p><p>Edger F. Coddが提唱したリレーショナル・モデル、IBMのSystem R、Michael Stonebreakerが実装に落としたIngress(→ Postgres → PostgreSQL → MPPアーキテクチャの分散RDBMS)、Larry Ellisonが商用化を成功させたOracle Database、この系譜は、然るべき人が然るべく時代の流れを読み、”世界を変える”仕事をしたものだと思います。</p><p>彼らの功績により、私たちはコンピューター・リソースを用いてデータを構造的に管理する事が可能になりました。企業は業務の自動化を行い、生産性を飛躍的に向上させました。</p><p>定量的な多角的分析によって、新たなサービスが創出され、企業のみならず私たち個人も日常の発見・改善の恩恵を受けてきました。</p><p>全体を通して、Oracle Databaseの良い面にフォーカスを当てた内容となっていますが、決して肩入れするといった意図はありません。昨今の潮流・批判(やや的を外したもの)を少し不憫に感じ、この記事を執筆するに至りました。</p><p>私も自分の仕事として、自らの定義に従い、”脱Oracle”をします。</p><p><strong>「デザインしたアーキテクチャに対して、必要な機能とコストを鑑みてプロダクト選定した結果、それはOracle Databaseでなかった」</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;2019年10月15日、&lt;a href=&quot;https://jp.techcrunch.com/2019/10/16/2019
      
    
    </summary>
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="Oracle" scheme="https://future-architect.github.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Go Conference 2019 Autumn に登壇しました</title>
    <link href="https://future-architect.github.io/articles/20191120/"/>
    <id>https://future-architect.github.io/articles/20191120/</id>
    <published>2019-11-20T00:05:17.000Z</published>
    <updated>2019-11-20T00:13:01.560Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIG DXチーム<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>の辻です。<br>先日開催された Go Conference 2019 Autumn に参加/登壇したので、その内容をレポートします。</p><img src="/images/20191120/gopher-kun.jpg" class="img-small-size"><h2 id="きっかけ"><a href="#きっかけ" class="headerlink" title="きっかけ"></a>きっかけ</h2><p>マネージャーとの面談で、勉強会やカンファレンスで登壇して貢献していきたいと話していたところ <a href="https://www.papercall.io/gocon-tokyo-2019-autumn" target="_blank" rel="noopener">Go Conference 2019 Autumn</a> の CfP を募集を見かけたので応募しました。</p><h3 id="アイデアの種"><a href="#アイデアの種" class="headerlink" title="アイデアの種"></a>アイデアの種</h3><p>Go の goroutine や channel を用いることで並行処理をシンプルに書くことができます。基本的な計算をマルチスレッドで高速化する試みは、私が Qiita に書いた <a href="https://qiita.com/tutuz/items/057452fbbe9a5ae26d37" target="_blank" rel="noopener">Golangを用いた様々な計算の高速化</a> の記事が詳しいです。<br>もちろん同じアルゴリズムを用いて Go 以外の言語でも実装できるのですが、Go でシンプルに実装でき、効率的に実行されることが確認できました。Qiita で 100 いいね程度の反響があり Go の並行処理をベースにしたネタで Go Conference に登壇したら面白いのではないか、と考えました。</p><p>私が競技プログラミング部にも所属していたのもあり <a href="https://atcoder.jp/contests/future-contest-2020-qual" target="_blank" rel="noopener">HTTF</a> といったマラソン形式のコンテストでよくもちいられる「焼きなまし法」を並行化したら面白いのではないかと考え、どのような並行化手法が存在するかサーベイしました。</p><p>サーベイする中で興味深かった論文が『<a href="https://ipsj.ixsq.nii.ac.jp/ej/?action=repository_uri&item_id=13940&file_id=1&file_no=1" target="_blank" rel="noopener">温度並列シミュレーテッド・アニーリング法とその評価</a>』<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>です。従来のシミュレーテッドアニーリングは 1 プロセスで温度を少しずつ冷却して、良い結果を探索するアプローチです。本論文では、一定の温度を持つ複数のプロセスが並行してシミュレーテッドアニーリングをします。隣接する温度のプロセス間で、解を一定の条件で交換して最適な解を探索するアプローチです。基本的なアイデアはシンプルながら、最適化能力は劣化せず、並行化することができ、処理時間の短縮に寄与します。</p><p>Go は並行処理が書きやすく、上記の研究のような並行化アプローチをシンプルに実装することができます。Qiita に書いたような基本的な計算処理だけでなく、論文で示されているアルゴリズムを Go で実装して、なんなら Go のパッケージを用いて計算過程を可視化したら面白いと考えました。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="アイデアのブラッシュアップ"><a href="#アイデアのブラッシュアップ" class="headerlink" title="アイデアのブラッシュアップ"></a>アイデアのブラッシュアップ</h3><p>当社では TIG Friday というイベントが隔週で実施されています。当社の澁川のアイデアから生まれたイベントです。以下のようなコンセプトで運営されています。</p><blockquote><p>外部の発表が怖い人の練習台とかになれるように。完璧な資料じゃなくて、発表のタネから目が出たぐらいの状態で書き出した箇条書きの資料とかベースで10分x2+質疑ぐらいでわいわいやりたい。準備を頑張らないのがコンセプト。</p></blockquote><p>TIG Friday でどうですか？と声をかけていただき、社内で練習する機会をいただきました。準備を頑張らない、というコンセプトのイベントでしたが Go Conference の CfP に出すアイデアだったのでがっつり準備しました😋<br>アイデアを共有し、有識者からフィードバックをいただき、改善することができるので、非常によい機会だと感謝しています。</p><h3 id="CfP"><a href="#CfP" class="headerlink" title="CfP"></a>CfP</h3><p>登壇のネタは決まったものの、 CfP は出したことがなかったので Go Conference への道は CfP の書き方を知ることからでした。</p><p>以下のサイトが特に参考になりました。</p><ul><li><a href="https://www.papercall.io/gocon-tokyo-2019-autumn" target="_blank" rel="noopener">Go Conference Tokyo 2019 Autumn</a></li><li><a href="https://blog.monochromegane.com/blog/2019/08/11/toward_the_oversea_conference/" target="_blank" rel="noopener">初めて海外カンファレンス登壇するためにやったこと</a></li><li><a href="https://ymotongpoo.hatenablog.com/entry/2019/04/25/001319" target="_blank" rel="noopener">Go Conference 2019 SpringのPaperCallを初めて使ってみた感想＋α</a></li><li><a href="https://www.clear-code.com/blog/2017/6/6.html" target="_blank" rel="noopener">RubyKaigiのCFPへの応募例 #rubykaigi</a></li></ul><h3 id="発表準備"><a href="#発表準備" class="headerlink" title="発表準備"></a>発表準備</h3><p>しばらくして CfP が採択されたことをメールで確認しました。Go Conference 2019 Autumn への登壇が決まりました。初めての登壇でしたので、持てる力を十分に発揮できるよう、登壇の素振りは数回は実施しました。伝える内容がクリアになっているかどうかや、発表時間に気をつけていました。</p><h2 id="発表"><a href="#発表" class="headerlink" title="発表"></a>発表</h2><p>当日の発表は <a href="https://github.com/future-architect/vuls" target="_blank" rel="noopener">Vuls</a> にコントリビュートしている有名な方の裏番組だったので、人が集まるか心配していましたが、杞憂でした。来ていただいた方、ありがとうございます。</p><img src="/images/20191120/photo_20191120_01.jpeg"><p>資料は Speaker Deck に公開されています。</p><script async class="speakerdeck-embed" data-id="01855be763dc46f18bfba1cf8d60f147" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>発表後の質問タイムでは、「実際に業務でシミュレーテッドアニーリングが使われる機会があるのか？」といった質問がありました。私は業務で実装したことはないですが、先進的 AI プロジェクトをリードしている当社の Strategic AI Group というチームでは実際の業務で使われています。</p><p>その他にも参加者や登壇者の方から面白かったなどのコメントをいただき、貢献できてよかったです。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">めちゃくちゃ面白いのでZehi! <a href="https://t.co/7urPamheSZ" target="_blank" rel="noopener">https://t.co/7urPamheSZ</a></p>&mdash; Shogo Tomioka (@tomiokasyogo) <a href="https://twitter.com/tomiokasyogo/status/1188716537110093824?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">シミュレーテッドアニーリングで経路探索、ニューラルネットワークの実装など、GoでアルゴリズムやMLの話の多さがいいね。<br>サーバー言語というイメージから脱却、データサイエンスにも適した言語のイメージが強まる<br> <a href="https://twitter.com/hashtag/gocon?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#gocon</a></p>&mdash; zreactor/yuriemon (@z_reactor) <a href="https://twitter.com/z_reactor/status/1188703466656387072?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">rand.Randがglobal lock取るのはたしかにそりゃそうだなぁ <a href="https://twitter.com/hashtag/gocon?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#gocon</a> <a href="https://twitter.com/hashtag/gocon_b?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#gocon_b</a></p>&mdash; かるぱねるら (@karupanerura) <a href="https://twitter.com/karupanerura/status/1188702910529462272?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">goの並列処理簡単にできる特徴は色んなところに応用できるんだな <a href="https://twitter.com/hashtag/GoCon?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#GoCon</a></p>&mdash; tomoko.h (@_tomoko523) <a href="https://twitter.com/_tomoko523/status/1188700567821905920?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote><p>Golangで並行シミュレーテッドアニーリング</p><p>中で何をやっているかは何やらなのですが、自分が全くわかっていない領域の話を聞けるのは楽しいですね。巡回セールスマン問題が実際に画面に表示されながら解かれて行くのは面白かったです！完全に解を出せなくても、最適解に近づけていくというアプローチがあるのですね。<br><a href="http://gsagawa.hatenablog.com/entry/2019/10/29/092018" target="_blank" rel="noopener">http://gsagawa.hatenablog.com/entry/2019/10/29/092018</a></p></blockquote><h2 id="緊急登壇"><a href="#緊急登壇" class="headerlink" title="緊急登壇"></a>緊急登壇</h2><p>ところで、当社から急遽、澁川も登壇しています。急遽というのは、登壇者が現れなかったというハプニングがあり、その代打登壇です。もともとのセッションは <a href="https://gocon.jp/sessions/multi-cloud_portability_for_go_applications/" target="_blank" rel="noopener">Multi-cloud portability for Go applications</a> というテーマでした。澁川は <a href="https://gocloud.dev/" target="_blank" rel="noopener">Go Cloud</a> について解説されていました。後日澁川から聞いた話では</p><blockquote><p>セッションの PaperCall では Go Cloud を紹介します、となっていたので、当日発表されるであったであろう内容をエスパーしてエミュレーションしました</p></blockquote><p>ということでした😁</p><img src="/images/20191120/photo_20191120_02.jpeg"><p>Go Cloud はクラウドポーダブルなアプリケーションを開発する上で非常に興味深いプロダクトです。Go Cloud は本ブログで連載中です。こちらも是非見ていただければと思います。</p><ul><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a></li><li><a href="https://future-architect.github.io/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a></li><li><a href="https://future-architect.github.io/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li><li><a href="https://future-architect.github.io/articles/20191115/">Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する</a></li><li><a href="https://future-architect.github.io/articles/20191119/">Go Cloud#6 GCPのローカルエミュレータを活用する</a></li><li>To be continued …</li></ul><h2 id="参加してみて"><a href="#参加してみて" class="headerlink" title="参加してみて"></a>参加してみて</h2><p>はじめてのカンファレンス登壇でしたが、社内メンバの手厚いサポートもあり、充実した機会になりました。</p><p>運営のみなさまには、このような貴重なカンファレンスを主催していただいたことに感謝しております。当社も <a href="https://gocon.jp/partners/nameplate/future/" target="_blank" rel="noopener">Tofu on Fire</a>（名札）枠としてサポートさせていただきました📛</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">フューチャー株式会社でTofu on Fire（名札）スポンサーしてます。 <a href="https://twitter.com/hashtag/gocon?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#gocon</a> <a href="https://t.co/vv5XoBEBQP" target="_blank" rel="noopener">pic.twitter.com/vv5XoBEBQP</a></p>&mdash; 渋川よしき (@shibu_jp) <a href="https://twitter.com/shibu_jp/status/1188601238826303488?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 27, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>Gopher のみなさんからの応募もお待ちしております！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">小西健三、瀧和男、木村宏一：温度並列シミュレーテッド・アニーリング法とその評価、情報処理学会論文誌、Vol.36 No.4 (1995)</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Group の略で、フューチャーの中でも特に IT 技術に特化した部隊です。その中でも DX チームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。TIG DXチーム&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;の辻です。&lt;br&gt;先日開催された Go Conference 2019 Autumn に参加/登壇したので、その内容をレポー
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go Cloud#6 GCPのローカルエミュレータを活用する</title>
    <link href="https://future-architect.github.io/articles/20191119/"/>
    <id>https://future-architect.github.io/articles/20191119/</id>
    <published>2019-11-19T05:39:21.000Z</published>
    <updated>2019-11-28T04:13:12.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXチームの真野です。Go Cloud記事の第6弾です。</p><ul><li><a href="/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a></li><li><a href="/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a></li><li><a href="/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li><li><a href="/articles/20191115/">Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する</a></li><li>Go Cloud#6 GCPのローカルエミュレータを活用する（この記事です）</li></ul><hr><p>本記事では、Go CloudでGCPのエミュレータに接続してみます。同様の企画である<a href="/articles/20191115/">AWS LocalStack版は第5弾</a>でまとめていますので、詳細はそちらを確認ください</p><h1 id="GCPのローカルエミュレータとは"><a href="#GCPのローカルエミュレータとは" class="headerlink" title="GCPのローカルエミュレータとは"></a>GCPのローカルエミュレータとは</h1><p>GCPのリソースを管理するためのコマンドラインインターフェースとして <a href="https://cloud.google.com/sdk/gcloud/" target="_blank" rel="noopener">gcloud</a> があり、このgcloudコマンド経由で各種エミュレータを実行することができます。</p><p>gcloudはAWSでいうAWS CLIに相当しますが、AWS CLIにはもちろんそのような仕組みは備わっていません。代わりにLocalStackというツールを利用することが多いです。それとは異なりGCPは標準コマンドに組み込まれているということで、思想の違いのようなものを感じられ興味深いですね。</p><h1 id="エミューレータ種類について"><a href="#エミューレータ種類について" class="headerlink" title="エミューレータ種類について"></a>エミューレータ種類について</h1><p><code>gcloud alpha emulators --help</code> で確認すると、2019年11月時点でエミュレートできるサービスは4つです。</p><ol><li>bigtable</li><li>pubsub</li><li>datastore</li><li>firestore</li></ol><p>現時点ではGo CloudのBlobに相当するCloud Storageのエミュレータは存在しないようです<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p>存在しない理由は注釈1のStackOverflowの回答にもありますが、各Cloud StorageのSDKに、ローカルストレージに書き込むオプションが存在するため、エミュレータレベルでは存在しないのでは？と推測します。純製ではないですが <a href="https://github.com/fsouza/fake-gcs-server" target="_blank" rel="noopener">fsouza/fake-gcs-server</a>というツールもあるので、こちらを利用することも検討に値するかもしれません。</p><p>本記事では、gcloud emulator で実行できる、 pubsubとfirestoreに対してGo Cloudでアクセスしていきます。</p><h1 id="Cloud-Pub-Sub"><a href="#Cloud-Pub-Sub" class="headerlink" title="Cloud Pub/Sub"></a>Cloud Pub/Sub</h1><p>Cloud Pub/Sub は送信者と受信者を切り離す多対多の非同期メッセージングを提供することによって、別々に開発されたアプリケーションの間で安全かつ高可用な通信を実現するGCPのプロダクトです。送信側がPublisher、受信側がSubscriberと呼ばれ、1:Nのメッセージのやり取りを行えます。<br><a href="https://cloud.google.com/pubsub/docs/overview" target="_blank" rel="noopener">https://cloud.google.com/pubsub/docs/overview</a></p><p><a href="https://cloud.google.com/pubsub/docs/emulator" target="_blank" rel="noopener">ドキュメント</a>に従いgcloud pubsubエミュレータをインストールします。</p><figure class="highlight sh"><figcaption><span>Install</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud components install pubsub-emulator</span><br></pre></td></tr></table></figure><p>インストールが終わったら、以下のコマンドでエミュレータを起動します。</p><figure class="highlight sh"><figcaption><span>pubsubエミュレータの起動</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud beta emulators pubsub start --project=dummy</span><br></pre></td></tr></table></figure><p><code>--project</code> で指定するPJは実際に存在しないダミー値でOKです。ポートはデフォルト <code>8085</code> で起動します。 <code>--port</code> オプションで変更も可能です。</p><p>アプリケーションにエミュレータを認識させるためには、<code>PUBSUB_EMULATOR_HOST</code> と <code>PUBSUB_PROJECT_ID</code> という2つの環境変数を設定する必要があるので設定します。</p><figure class="highlight sh"><figcaption><span>環境変数の設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PUBSUB_EMULATOR_HOST=localhost:8085</span><br><span class="line"><span class="built_in">export</span> PUBSUB_PROJECT_ID=dummy</span><br></pre></td></tr></table></figure><p>このまま、gcloudコマンドで起動したpub/subのエミュレータに対してトピックを作成します。…と言いたいところですが、 <strong>実はgcloudはエミュレータに非対応です。</strong></p><blockquote><p>The emulator does not support GCP Console or gcloud pubsub commands.<br>（エミュレータはGCPコンソールやgcloud pubsubコマンドに対応していません）<br><a href="https://cloud.google.com/pubsub/docs/emulator#using_the_emulator" target="_blank" rel="noopener">https://cloud.google.com/pubsub/docs/emulator#using_the_emulator</a></p></blockquote><p>え、どうやってトピック作るの？って疑問に思いましたが、GCPのSDK経由であれば操作できるようです（そうでないと意味無いので当然ですが）。ドキュメントにPython製のツールがいくつかおいてあるので、そちらをgcloudコマンドの代わりに利用してトピックを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ツールの取得</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/GoogleCloudPlatform/python-docs-samples.git</span><br><span class="line">$ <span class="built_in">cd</span> python-docs-samples/pubsub/cloud-client</span><br><span class="line"></span><br><span class="line"><span class="comment"># インストール</span></span><br><span class="line">$ pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># トピックの作成</span></span><br><span class="line">$ python publisher.py dummy create future-example</span><br></pre></td></tr></table></figure><p><code>Topic created: name: &quot;projects/dummy/topics/future-example&quot;</code> といったメッセージが出力されれば成功です。</p><p>ではGo Cloudでさきほど作成した <code>future-example</code> というトピックに対してPublishしてみます。</p><figure class="highlight go"><figcaption><span>サンプルPublish(実はNGケース)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"gocloud.dev/pubsub"</span></span><br><span class="line">_ <span class="string">"gocloud.dev/pubsub/gcppubsub"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">topic, err := pubsub.OpenTopic(ctx, <span class="string">"gcppubsub://projects/myproject/topics/mytopic"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> topic.Shutdown(ctx)</span><br><span class="line"></span><br><span class="line">err = topic.Send(ctx, &amp;pubsub.Message&#123;Body: []<span class="keyword">byte</span>(<span class="string">"Hello, World!"</span>)&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実は上記のコードは2019/11時点のGo CDK 0.1.0では上手く動かないようです。理由は、<code>PUBSUB_EMULATOR_HOST</code> の<a href="https://github.com/google/go-cloud/blob/master/pubsub/gcppubsub/gcppubsub.go#L134" target="_blank" rel="noopener">環境変数は読んでくれているようです</a> が、gRPCのトランスポートがCredentialsがついたたままで、 <a href="https://github.com/google/go-cloud/blob/master/pubsub/gcppubsub/gcppubsub.go#L233" target="_blank" rel="noopener">Insecureオプションへの切り替えが無い</a>からだと思います。PullRequstチャンスだと思いますが、現時点のコードベースだと、gcppubsubパッケージでガンバってInsecureオプションを付ける処理を入れる必要がある気がします。</p><p>ということで、例えば以下のようなコードでWithInsecureで切り替えが必要すれば一応動かすことができます。ちょっと長いですがGCPのCredentailsを環境変数ではなく <a href="https://gocloud.dev/howto/pubsub/publish/#gcp-ctor" target="_blank" rel="noopener">自前で設定する場合のコード</a> に、エミュレータの切り替えを追加しただけです。</p><figure class="highlight go"><figcaption><span>無理やり通すパターン</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> endPoint = <span class="string">"pubsub.googleapis.com:443"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">conn, err := dial(ctx) <span class="comment">// ★エミュレータ対応</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalf(<span class="string">"dial error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">pubClient, err := gcppubsub.PublisherClient(ctx, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"publisher client error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> pubClient.Close()</span><br><span class="line"></span><br><span class="line">topic, err := gcppubsub.OpenTopicByPath(pubClient, <span class="string">"projects/dummy/topics/future-example"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"open topic error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> topic.Shutdown(ctx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = topic.Send(ctx, &amp;pubsub.Message&#123;Body: []<span class="keyword">byte</span>(<span class="string">"Hello, World!"</span>)&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"publish error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"done"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ★エミュレータ対応して関数切り出し</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dial</span><span class="params">(ctx context.Context)</span> <span class="params">(*grpc.ClientConn, error)</span></span> &#123;</span><br><span class="line">emulatorEndPoint := os.Getenv(<span class="string">"PUBSUB_EMULATOR_HOST"</span>)</span><br><span class="line"><span class="keyword">if</span> emulatorEndPoint != <span class="string">""</span> &#123;</span><br><span class="line">endPoint = emulatorEndPoint</span><br><span class="line"><span class="keyword">return</span> grpc.DialContext(ctx, endPoint,</span><br><span class="line">grpc.WithInsecure(), <span class="comment">// ★追加</span></span><br><span class="line">grpc.WithUserAgent(fmt.Sprintf(<span class="string">"%s/%s/%s"</span>, <span class="string">"pubsub"</span>, <span class="string">"go-cdk"</span>, <span class="string">"0.1.0"</span>)),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">creds, err := gcp.DefaultCredentials(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> grpc.DialContext(ctx, endPoint,</span><br><span class="line">grpc.WithTransportCredentials(credentials.NewClientTLSFromCert(<span class="literal">nil</span>, <span class="string">""</span>)),</span><br><span class="line">grpc.WithPerRPCCredentials(oauth.TokenSource&#123;TokenSource: creds.TokenSource&#125;),</span><br><span class="line">grpc.WithUserAgent(fmt.Sprintf(<span class="string">"%s/%s/%s"</span>, <span class="string">"pubsub"</span>, <span class="string">"go-cloud"</span>, <span class="string">"0.1.0"</span>)),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いて、Subscribeです。先程のPython製ツールでSubscriptionのエンドポイントを作成します。ProjectID, トピック名を指定し、<code>gocdk-example1</code> としたエンドポイントを指定しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python subscriber.py dummy create future-example gocdk-example1</span><br></pre></td></tr></table></figure><p>この <code>gocdk-example1</code> に対してGo Cloudでアクセスします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">conn, err := dial(ctx) <span class="comment">// ★先程のエミュレータ対応した関数</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalf(<span class="string">"dial error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">subClient, err := gcppubsub.SubscriberClient(ctx, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"subscriber client error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> subClient.Close()</span><br><span class="line"></span><br><span class="line">sub, err := gcppubsub.OpenSubscriptionByPath(subClient, <span class="string">"projects/dummy/subscriptions/gocdk-example1"</span>, <span class="literal">nil</span>) <span class="comment">// ★さきほど取得したエンドポイントを指定する</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"subscription error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> sub.Shutdown(ctx)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">msg, err := sub.Receive(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"Receiving message: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Got message: %q\n"</span>, msg.Body)</span><br><span class="line">msg.Ack()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Subscribeのテストをしたい場合は、先程のPythonライブラリにサンプルでPublishするツールも付いているのでそちらで検証すると良いと思います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python publisher.py dummy publish future-example</span><br></pre></td></tr></table></figure><p>上記は、1から10までpublishする簡単なツールですが、検証用途ととしてはお手軽なのでオススメです。実行すると、Subscription側に標準出力されることが確認できると思います。</p><h1 id="Cloud-Firestore"><a href="#Cloud-Firestore" class="headerlink" title="Cloud Firestore"></a>Cloud Firestore</h1><p>Cloud Firestore は、高速でサーバーレスなフルマネージドのクラウド ネイティブ NoSQL ドキュメント データベースです。<br><a href="https://cloud.google.com/firestore/" target="_blank" rel="noopener">https://cloud.google.com/firestore/</a></p><p>エミュレータのインストールは<a href="https://firebase.google.com/docs/firestore/security/test-rules-emulator" target="_blank" rel="noopener">こちら</a> を参考にできますが、今回はgcloudコマンドを直接叩いて起動させます。</p><figure class="highlight sh"><figcaption><span>Install</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud components install cloud-firestore-emulator</span><br></pre></td></tr></table></figure><p>インストールが終わったら、以下のコマンドでエミュレータを起動します。オプションは<a href="https://cloud.google.com/sdk/gcloud/reference/beta/emulators/firestore/" target="_blank" rel="noopener">こちら</a> を参考ください。</p><figure class="highlight sh"><figcaption><span>pubsubエミュレータの起動</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud beta emulators firestore start --project dummy --host-port=localhost:8080</span><br></pre></td></tr></table></figure><p><code>--host-port</code> オプションでポートを固定できます(指定しないと起動のたびに違うポートが用いられました)。<code>localhost:8080</code> でアクセスすると <code>Ok</code> が返ってくれば起動成功です。</p><p>これをGo Cloudでアクセスします。その前にCloud Pub/Subの場合と同様に、エミュレータの環境変数を設定します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FIRESTORE_EMULATOR_HOST=localhost:8080</span><br><span class="line"><span class="built_in">export</span> FIRESTORE_PROJECT_ID=dummy</span><br></pre></td></tr></table></figure><p>続いてコードはこちらです。FirestoreもPub/Subと同様に、エミュレータ対応する関数を用意してスイッチさせています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Record <span class="keyword">struct</span> &#123;</span><br><span class="line">ID   <span class="keyword">string</span> <span class="string">`docstore:"id"`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`docstore:"name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> endPoint = <span class="string">"firesotore.googleapis.com:443"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">client, err := dial(ctx) <span class="comment">// ★エミュレータ対応のため関数切り出し</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"dial error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resourceID := gcpfirestore.CollectionResourceID(<span class="string">"dummy"</span>, <span class="string">"example-collection"</span>)</span><br><span class="line">coll, err := gcpfirestore.OpenCollection(client, resourceID, <span class="string">"id"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"open collection error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> coll.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 書き込み</span></span><br><span class="line">row := Record&#123;</span><br><span class="line">ID:   <span class="string">"1"</span>,</span><br><span class="line">Name: <span class="string">"hoge"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Create(ctx, &amp;row); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"create error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 読み込み</span></span><br><span class="line">rowToRead := Record&#123;</span><br><span class="line">ID: <span class="string">"1"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Get(ctx, &amp;rowToRead); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"get error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"get: %+v\n"</span>, rowToRead)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0.1.0時点でエミュレータで動かすため自前で切り替え</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dial</span><span class="params">(ctx context.Context)</span> <span class="params">(*vkit.Client, error)</span></span> &#123;</span><br><span class="line">emulatorEndPoint := os.Getenv(<span class="string">"FIRESTORE_EMULATOR_HOST"</span>)</span><br><span class="line"><span class="keyword">if</span> emulatorEndPoint != <span class="string">""</span> &#123;</span><br><span class="line">endPoint = emulatorEndPoint</span><br><span class="line"></span><br><span class="line">conn, err := grpc.DialContext(ctx, endPoint, grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vkit.NewClient(ctx,</span><br><span class="line">option.WithEndpoint(endPoint),</span><br><span class="line">option.WithGRPCConn(conn),</span><br><span class="line">option.WithUserAgent(fmt.Sprintf(<span class="string">"%s/%s/%s"</span>, <span class="string">"firestore"</span>, <span class="string">"go-cloud"</span>, <span class="string">"0.1.0"</span>)),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">creds, err := gcp.DefaultCredentials(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client, _, err := gcpfirestore.Dial(ctx, creds.TokenSource)</span><br><span class="line"><span class="keyword">return</span> client, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コードの中でCreate（登録）とGet（取得）ができました。後はエミュレータを意識すること無く操作することができます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>GCPのローカルエミュレータのFirestore, PubSubに対して多少前処理が必要ですがGo Cloudから十分アクセスができます。同時にまだ実装が枯れきっていないので色々PullRequestチャンスだと思います。</p><p>エミュレータを使っていてよかったなと思うポイントは、gcloudこそ利用できませんでしたが、PubSubで登場したPythonツールのように、既存のエコシステムを活用出来る点で、コードの動作確認ではとてもお世話になると思います。</p><p>Go Cloud自体の <code>file</code> や <code>mem</code> のような機能と合わせてエミュレータも上手く使い分けて、より生産性と品質を高められるようにしていきたいですね。</p><hr><ul><li><a href="/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a></li><li><a href="/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a></li><li><a href="/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li><li><a href="/articles/20191115/">Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する</a></li><li>Go Cloud#6 GCPのローカルエミュレータを活用する（この記事です）</li><li><a href="/articles/20191128/">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる</a></li></ul><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li><li><a href="/articles/20191030/">GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://stackoverflow.com/questions/37542530/is-there-google-cloud-storage-emulator/46692017#46692017</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXチームの真野です。Go Cloud記事の第6弾です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する</title>
    <link href="https://future-architect.github.io/articles/20191115/"/>
    <id>https://future-architect.github.io/articles/20191115/</id>
    <published>2019-11-15T03:10:54.000Z</published>
    <updated>2019-11-28T04:13:41.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXチームの真野です。Go Cloud記事の第5弾です。</p><ul><li><a href="/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a></li><li><a href="/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a></li><li><a href="/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li><li>Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する（この記事です）</li><li><a href="/articles/20191119/">Go Cloud#6 GCPのローカルエミュレータを活用する</a></li><li><a href="/articles/20191128/">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる</a></li></ul><hr><p>本記事ではGo Cloud経由でAWSのローカルモック環境である<a href="https://github.com/localstack/localstack" target="_blank" rel="noopener">LocalStack</a>に接続してみたいと思います。</p><p>LocalStackはモックとして活用することが多いと思いますが、Go Cloudそのものにも Blob、Docstore、Pub/Subなどを利用する際に <code>mem</code>や <code>file</code> スキーマベースを指定することで動作検証が可能です。そのためGo Cloudを利用する場合のローカル開発や、CIでの自動テスト時はこちらを活用する場面も多いかなと思います。</p><p>一方で、プロセスのライフサイクルとは別に、データを永続化をさせておいて、次回起動時にも再利用したいといった場合に不便な場面もあると思います。あるいは、既存のGUIツールを用いて実行結果を確認したいといったこともあり得ると思います。こういった要求に備え、Localstackへの接続手法も抑えていきます。</p><h1 id="LocalStackとは"><a href="#LocalStackとは" class="headerlink" title="LocalStackとは"></a>LocalStackとは</h1><blockquote><p>💻 A fully functional local AWS cloud stack. Develop and test your cloud &amp; Serverless apps offline! <a href="https://localstack.cloud" target="_blank" rel="noopener">https://localstack.cloud</a></p></blockquote><p>オフラインでAWSの開発やテストができるスタックです。</p><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>LocalStackを起動しておきます。Dockerで起動する場合は以下のようにportを開けておきます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 4567-4584:4567-4584 -p 8080:8080 localstack/localstack:0.10.5</span><br></pre></td></tr></table></figure><p><a href="https://github.com/localstack/localstack#using-docker-compose" target="_blank" rel="noopener">公式のドキュメント</a>にも記載されていますが、4567-4584ポートがエミュレートするAWS相当のリソースが利用し(AWSサービス増加に従いだんだん増えていきますので詳細は公式ドキュメントを確認ください)、8080ポートはWeb UIが利用します。</p><p>Versionは2019/11/15時点で最新の <code>0.10.5</code> を利用していますが <code>latest</code> でも良いかと思います。</p><h1 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h1><p>まず<a href="https://aws.amazon.com/jp/cli/" target="_blank" rel="noopener">AWS CLI</a>を用いてLocalStackにS3バケットを作成します。 <code>--endpoint-url</code> オプションで向き先をLocalStackに切り替えるのが特徴です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint-url=http://localhost:4572 s3api create-bucket --bucket future-example</span><br></pre></td></tr></table></figure><p>作成した <code>future-example</code> バケットにオブジェクトを書き込んでみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"gocloud.dev/blob"</span></span><br><span class="line"><span class="string">"gocloud.dev/blob/s3blob"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">w, err := writer(<span class="string">"future-example"</span>, <span class="string">"test.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> w.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err := w.Write([]<span class="keyword">byte</span>(<span class="string">"1234567890"</span>)); err != <span class="literal">nil</span> &#123; <span class="comment">// 適当な値</span></span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writer</span><span class="params">(bucketURL, key <span class="keyword">string</span>)</span> <span class="params">(io.WriteCloser, error)</span></span> &#123;</span><br><span class="line">sess := session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Endpoint:         aws.String(<span class="string">"http://localhost:4572"</span>), <span class="comment">// ★必要</span></span><br><span class="line">S3ForcePathStyle: aws.Bool(<span class="literal">true</span>), <span class="comment">// ★必要</span></span><br><span class="line">&#125;))</span><br><span class="line">bucket, err := s3blob.OpenBucket(context.Background(), sess, bucketURL, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bucket.NewWriter(context.Background(), key, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LocalStackへのアクセスの場合は、driver のAWS実装側にEndpointなどを指定する必要があります。</p><figure class="highlight go"><figcaption><span>LocalStack固有の設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sess := session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Endpoint:         aws.String(<span class="string">"http://localhost:4572"</span>),</span><br><span class="line">S3ForcePathStyle: aws.Bool(<span class="literal">true</span>),</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>さらに、BucketのURLも <code>S3ForcePathStyle</code> を指定してしまう関係で、 <code>s3://future-example</code> ではなく <code>future-example</code> とする必要があります。このあたりはまだ実装がこなれていないだけで今後改善される可能性があるので、Go Cloud側のアップデートの都度確認したほうが良いと思います。</p><p>さて、呼び出し側でURLスキーマ <code>s3://</code> の有無を意識することはあまりしたくないと思います。<br>そのため、より業務に近いコードにするには、以下のようにEndpointが環境変数で指定されている場合には、s3スキーマを外す処理を入れると良くなると思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openBucket</span><span class="params">(bucketURL <span class="keyword">string</span>)</span> <span class="params">(*blob.Bucket, error)</span></span> &#123;</span><br><span class="line">endpoint := os.Getenv(<span class="string">"ENDPOINT_URL"</span>) <span class="comment">// ★環境変数化する</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(endpoint) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> blob.OpenBucket(context.Background(), bucketURL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalStackアクセス用の処理</span></span><br><span class="line">u, err := url.Parse(bucketURL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sess := session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Endpoint:         aws.String(endpoint),</span><br><span class="line">S3ForcePathStyle: aws.Bool(<span class="literal">true</span>),</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">return</span> s3blob.OpenBucket(context.Background(), sess, u.Host, <span class="literal">nil</span>) <span class="comment">// ★u.Hostで、s3://を切り捨てる処理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例としてはput-objectの実装を上げましたが、get-objectやdelete-objectに関しても、同様に session を指定することで、後はLocalStackを意識せず扱えることができます。</p><h1 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h1><p>事前に、AWS CLI経由でqueueを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint-url=http://localhost:4576 sqs create-queue --queue-name <span class="built_in">test</span>-queue</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"QueueUrl"</span>: <span class="string">"http://localhost:4576/queue/test-queue"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このQueueUrlを用いてGo Cloud経由でSQSにアクセスします。LocalStackのSQSのポートは <code>4576</code> なので設定間違いには注意していきます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"gocloud.dev/pubsub"</span></span><br><span class="line"><span class="string">"gocloud.dev/pubsub/awssnssqs"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">sess, err := session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Endpoint: aws.String(<span class="string">"http://localhost:4576"</span>), <span class="comment">// ★</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">topic := awssnssqs.OpenSQSTopic(ctx, sess, <span class="string">"http://localhost:4576/queue/test-queue"</span>, <span class="literal">nil</span>) <span class="comment">// ★</span></span><br><span class="line"><span class="keyword">defer</span> topic.Shutdown(ctx)</span><br><span class="line"></span><br><span class="line">err = topic.Send(ctx, &amp;pubsub.Message&#123;</span><br><span class="line">Body:     []<span class="keyword">byte</span>(<span class="string">"Hello, World!\n"</span>),</span><br><span class="line">Metadata: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"Env"</span>: <span class="string">"test"</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Blobとは微妙に driver の設定が異なり、今度は <code>Endpoint</code> だけで接続ができました。<br>その代わりに、QueueのURLを <code>OpenSQSTopic</code> 時に指定する必要があります。</p><p>EndpointとQueueURLに重複した設定がなされておりどちらかを省略できそうですが、現時点では両方とも設定する必要がありました。</p><p>Subscribe側も同様のdriverの設定で、後はLocalStackを意識すること無くアクセスが可能です。</p><h1 id="DocStore"><a href="#DocStore" class="headerlink" title="DocStore"></a>DocStore</h1><p>最後にDocStoreでLocalStackのDynamoDB(エミュレータ)にアクセスしてみます。</p><p>最初にAWS CLI経由でテーブルを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint-url=http://localhost:4569 dynamodb create-table \</span><br><span class="line">  --table-name <span class="built_in">test</span> \</span><br><span class="line">  --attribute-definitions AttributeName=ID,AttributeType=S \</span><br><span class="line">  --key-schema AttributeName=ID,KeyType=HASH \</span><br><span class="line">  --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1</span><br></pre></td></tr></table></figure><p>このテーブルに対してGo Cloudを利用してアクセスします。</p><p>DocStoreの場合はdriver側に <code>Endpoint</code> を指定するだけでアクセスできます。<br>LocalStackのDyanmoDBのポートは <code>4569</code> なので設定間違いには注意していきます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"gocloud.dev/docstore/awsdynamodb"</span></span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Entity <span class="keyword">struct</span> &#123;</span><br><span class="line">ID   <span class="keyword">string</span> <span class="string">`docstore:"ID"`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`docstore:"NAME"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sess := session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Endpoint:         aws.String(<span class="string">"http://localhost:4569"</span>), <span class="comment">// ★</span></span><br><span class="line">&#125;))</span><br><span class="line">coll, err := awsdynamodb.OpenCollection(dynamodb.New(sess), <span class="string">"test"</span>, <span class="string">"ID"</span>, <span class="string">""</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> coll.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 書き込み</span></span><br><span class="line">row := Entity&#123;</span><br><span class="line">ID:   <span class="string">"1"</span>,</span><br><span class="line">Name: <span class="string">"hoge"</span>,</span><br><span class="line">&#125;</span><br><span class="line">coll.Create(context.Background(), &amp;row)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 読み込み</span></span><br><span class="line">rowToRead := Entity&#123;</span><br><span class="line">ID: <span class="string">"1"</span>,</span><br><span class="line">&#125;</span><br><span class="line">coll.Get(context.Background(), &amp;rowToRead)</span><br><span class="line">fmt.Printf(<span class="string">"get: %+v\n"</span>, rowToRead)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらも、いったんOpenCollectionをした後は、LocalStackであることを意識せずに操作できました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Go Cloudはまだまだ発展途上とはいえ、現時点でも十分にLocalStackを用いてアクセスができます。<br>処理レイテンシや消費するリソースは <code>mem</code> や <code>file</code> に比べLocalStackのプロセス群を立ち上げるだけオーバーヘッドがありますが、作成したリソースをGUIツールなどで確認可能なため、利用したい場面もあり得ると思います。</p><p>LocalStackのアクセスのためには、基本的には AWS CLIでは <code>--endpoint-url</code> でローカルのURLを指定しますが、Go Cloudの場合は現時点ではリソースによっては追加のオプションを指定したり、前処理をして上げる必要があります。このあたりはGo CloudのAWS driver側に自らコミットしていくか、ライブラリを被せるか判断してうまく付き合っていきたいですね。</p><hr><ul><li><a href="/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a></li><li><a href="/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a></li><li><a href="/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li><li>Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する（この記事です）</li><li><a href="/articles/20191119/">Go Cloud#6 GCPのローカルエミュレータを活用する</a></li><li><a href="/articles/20191128/">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる</a></li></ul><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li><li><a href="/articles/20191030/">GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXチームの真野です。Go Cloud記事の第5弾です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go Cloud#4 URLを編集するパッケージ</title>
    <link href="https://future-architect.github.io/articles/20191114/"/>
    <id>https://future-architect.github.io/articles/20191114/</id>
    <published>2019-11-14T02:19:44.000Z</published>
    <updated>2019-11-28T04:13:59.114Z</updated>
    
    <content type="html"><![CDATA[<p>昨日に引き続きTIG DX Unitの渋川です。</p><ul><li><a href="/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a></li><li><a href="/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a></li><li>Go Cloud#4 URLを編集するパッケージ（この記事です）</li><li><a href="/articles/20191115/">Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する</a></li><li><a href="/articles/20191119/">Go Cloud#6 GCPのローカルエミュレータを活用する</a></li><li><a href="/articles/20191128/">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる</a></li></ul><hr><p>これまで、基本的な機能を一通り紹介してきました。</p><p>Go Cloudでは何かとURL扱います。特にポータブルなAPIを使うと、<code>mem://my-pub-sub</code> やら <code>s3://my-bucket</code>やらで、URLでリソースの種類とその実態を指定しますし、場合によっては <code>?filename=collection.db</code>のようなクエリーで属性を設定したりします。</p><p>一方で、設定ファイルやらで正確なURLをすべてきちんと入れるのは大変です。</p><p>DocStoreでテーブルを10個使うアプリケーションがあり、データベース名までは同じだけど、コレクション名（≒RDBのテーブル）だけ置き換えたいみたいなケースでは、データベース名のところまでの1つだけを設定値として持ち、各テーブルのURLはプログラマブルに作りたいですよね？しかし、どこを書き換えればコレクション名が変わるかなど、細かいルールがバックエンドのドライバーごとに解釈が違うという難点があります。</p><p>ということでGo Cloud用のURL正規化パッケージを作りました。</p><ul><li><a href="https://github.com/future-architect/gocloudurls" target="_blank" rel="noopener">github.com/future-architect/gocloudurls</a></li></ul><p>このパッケージには、ちょっと省略形で書いたURLをGo Cloudで解釈できるURLに補完したり、一部書き換えたりといった関数が含まれています。なお、どの関数も、正規表現やテンプレートのパッケージと同じく、<code>Must</code>が接頭辞についた関数も提供しております。</p><h1 id="BlobのURLの正規化"><a href="#BlobのURLの正規化" class="headerlink" title="BlobのURLの正規化"></a>BlobのURLの正規化</h1><p><code>NormalizeBlobURL(srcUrl string) (string, error)</code>がBlobのURLの正規化の関数です。コマンドラインツールでユーザーが入力するフォルダ名を<code>file://folder</code>形式にするといったちょっとした修正をします。Go Cloud、Cloudだけで使うのはもったいなので、CLIでも使おうと思って追加しました。リージョン名は<code>AWS_REGION</code>という環境変数があればそこから補完します。</p><ul><li><code>mem</code> → <code>mem://</code></li><li><code>folder</code> → <code>file://folder</code></li><li><code>s3://my-bucket</code> → <code>s3://my-bucket?region=us-west-1</code></li></ul><h1 id="DocStoreの正規化"><a href="#DocStoreの正規化" class="headerlink" title="DocStoreの正規化"></a>DocStoreの正規化</h1><p><code>NormalizeDocStoreURL(srcUrl string, opt Option) (string, error)</code>という関数を提供しています。</p><p>DocStoreの場合、パスの階層構造やら主キーの設定の方法がバックエンドによって異なったりします。コレクション名は書き換えたいが、主キーはこのカラム名にしたい、みたいなのはこの関数を使えば一元化されます。</p><p>オプションは次の形式になっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Option <span class="keyword">struct</span> &#123;</span><br><span class="line">KeyName      <span class="keyword">string</span> <span class="comment">// 主キー名(デフォルトは_id)</span></span><br><span class="line">PartitionKey <span class="keyword">string</span> <span class="comment">// DynamoDBのパーティションキー（後述）</span></span><br><span class="line">Collection   <span class="keyword">string</span> <span class="comment">// コレクション名を上書きしたい場合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例えば、memdocstoreバックエンドの場合は次のようなURLが生成されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">goclodurls.NormalizeDocStoreURL(<span class="string">"mem://"</span>, goclodurls.Option&#123;</span><br><span class="line">    Collection: <span class="string">"addresses"</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// "mem://addresses/_id"</span></span><br></pre></td></tr></table></figure><p>FireStoreの場合は、プロジェクト名/コレクションといった短い名前や、プロジェクト名/ドキュメント名/コレクション名といった短い名前を渡しても、Go Cloudが期待する名前（projectsやdatabasesやdocumentsというパスを挿入、データベース名のデフォルトは<code>(default)</code>を利用する）に書き換えます。最初からvalidな本来のURLを入れることも可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">goclodurls.NormalizeDocStoreURL(<span class="string">"firestore://my-project"</span>, goclodurls.Option&#123;</span><br><span class="line">    Collection: <span class="string">"addresses"</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// "firestore://projects/my-project/databases/(default)/documents/addresses?name_field=_id"</span></span><br><span class="line">goclodurls.NormalizeDocStoreURL(<span class="string">"firestore://my-project/my-documents/addresses"</span>, goclodurls.Option&#123;&#125;)</span><br><span class="line"><span class="comment">// "firestore://projects/my-project/databases/my-documents/documents/addresses?name_field=_id"</span></span><br></pre></td></tr></table></figure><p>DynamoDBはパーティションキーだけの場合はパーティションキーが主キーになり、パーティションキーとソートキーがあると複合主キーのようになるという特性があります。本ライブラリでは、PartitionKeyが空文字列なら前者のモード(KeyName=パーティションキー)に、PartitionKeyが入っていれば後者のモード(KeyName=ソートキー、PartitionKey=パーティションキー)になるようにしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">goclodurls.NormalizeDocStoreURL(<span class="string">"dynamodb://"</span>, goclodurls.Option&#123;</span><br><span class="line">    Collection: <span class="string">"tasks"</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// "dynamodb://tasks?partition_key=_id"</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goclodurls.NormalizeDocStoreURL(<span class="string">"dynamodb://"</span>, goclodurls.Option&#123;</span><br><span class="line">    Collection:   <span class="string">"tasks"</span>,</span><br><span class="line">    PartitionKey: <span class="string">"job_id"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// "dynamodb://tasks?partition_key=job_id&amp;sort_key=_id"</span></span><br></pre></td></tr></table></figure><h1 id="PubSubの正規化"><a href="#PubSubの正規化" class="headerlink" title="PubSubの正規化"></a>PubSubの正規化</h1><p><code>NormalizePubSubURL(srcUrl string) (string, error)</code>という関数を提供しています。これも今までのものとほぼ同じです。SNSはARNで書いても補完するし、SQSもhttpsのURLを書いても補完します。GCP PubSubはFirestoreと同様に固定のprojects/topicsを省略しても補完します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gocloudurls.NormalizePubSubURL(<span class="string">"arn:aws:sns:us-east-2:123456789012:mytopic"</span>)</span><br><span class="line"><span class="comment">// "awssns:///arn:aws:sns:us-east-2:123456789012:mytopic?region=us-east-2"</span></span><br><span class="line"></span><br><span class="line">gocloudurls.NormalizePubSubURL(<span class="string">"https://sqs.us-east-2.amazonaws.com/123456789012/myqueue"</span>)</span><br><span class="line"><span class="comment">// "awssqs://https://sqs.us-east-2.amazonaws.com/123456789012/myqueue?region=us-east-2"</span></span><br><span class="line"></span><br><span class="line">gocloudurls.NormalizePubSubURL(<span class="string">"gcppubsub://myproject/mytopic"</span>)</span><br><span class="line"><span class="comment">// "gcppubsub://projects/myproject/topics/mytopic"</span></span><br></pre></td></tr></table></figure><h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">   Name <span class="keyword">string</span> <span class="string">`docstore:"name"`</span></span><br><span class="line">   Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このようなdocstoreをマッピングする構造体があったとすると次の関数で、テーブル定義のコマンドライン引数を生成します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ds, err := gocloudurls.NewDynamoDBSchema(&amp;Person&#123;&#125;, </span><br><span class="line">    gocloudurls.MustMustNormalizeDocStoreURL(<span class="string">"dynamodb://persons"</span>))</span><br><span class="line"></span><br><span class="line">ds.CreateTableCommand()</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws dynamodb create-table --table-name persons \</span><br><span class="line">  --attribute-definitions AttributeName=name,AttributeType=S \</span><br><span class="line">  --key-schema AttributeName=name,KeyType=HASH \</span><br><span class="line">  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5</span><br></pre></td></tr></table></figure><p>そのうち、Terraformのコードも生成したり、awscliを実行をしたり、というのも追加したいな、と思っています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>最初のエントリーで紹介したように、クレデンシャルの問題以外を除けばマルチクラウドの利点を生かしたい場合はポータブル版のURLで扱うのがお手軽なことが多いです。しかし、特にDocStoreにおいて、URLのルールがバックエンドごとに違いすぎて、ポータブル版のAPIを扱うのが難しいというのを感じましたので、URLの操作もマルチクラウドにするためのユーティリティを実装しました。これでよりマルチクラウドが行いやすくなったと思います。</p><hr><ul><li><a href="/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a></li><li><a href="/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a></li><li>Go Cloud#4 URLを編集するパッケージ（この記事です）</li><li><a href="/articles/20191115/">Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する</a></li><li><a href="/articles/20191119/">Go Cloud#6 GCPのローカルエミュレータを活用する</a></li><li><a href="/articles/20191128/">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる</a></li></ul><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li><li><a href="/articles/20191030/">GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨日に引き続きTIG DX Unitの渋川です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/20191111/&quot;&gt;Go Cloud#1 概要とBlobへの活用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/20191112/&quot;&gt;G
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go Cloud#3 Go CloudのDocStoreを使う</title>
    <link href="https://future-architect.github.io/articles/20191113/"/>
    <id>https://future-architect.github.io/articles/20191113/</id>
    <published>2019-11-13T01:04:49.000Z</published>
    <updated>2019-11-28T04:14:23.595Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DX Unitの渋川です。今回はGo Cloudの紹介の連載の第3弾です。</p><ul><li><a href="/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a></li><li>Go Cloud#3 Go CloudのDocStoreを使う（この記事です）</li><li><a href="/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li><li><a href="/articles/20191115/">Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する</a></li><li><a href="/articles/20191119/">Go Cloud#6 GCPのローカルエミュレータを活用する</a></li><li><a href="/articles/20191128/">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる</a></li></ul><hr><p>Go Cloudにはいろいろ便利な機能がありますが、ほとんどの機能は既存のAPIへの薄いラッパーだったりします。そんな中、よくぞ実装したな、と思われるのがDocStoreです。</p><p>DocStoreはFireStoreやDynamoDB、MongoDBへの透過的なアクセスを提供するパッケージ群です。NoSQLをどのように使うのか、RDBの代わりになるのかどうかみたいなのは定期的に炎上するネタですが、これらが対象としているドキュメントストア(NoSQLの一部の分野)の場合、ちょっと高度なクエリー言語やら少し高度なアトミックな操作をサポートしていたりすることがあります。DocStoreもこのようなクエリーやアトミックに行える操作などをいくつか提供しています。</p><ul><li>アップデート: 数値をインクリメントするなどが一発で実行できる</li><li>アクションリスト: 取得、追加、更新、削除などの複数の操作をまとめて実行。RedisでいいうところのMULTI。読み込んだ値を元に加工して更新、まではできないが、追加と削除を同時に行うぐらいはできる。トランザクションのようでトランザクションではない、ちょびっとトランザクションな機能。</li><li>クエリー: SQLのように、Where/Limit/Offsetなどの条件式を使ってカラムを取得してくる</li></ul><p>オンメモリ版のmemdocstoreでもこのような高度な機能が利用できますし、バックエンドでサポートしていない機能はGo Cloud上でエミュレーションしていたりするらしいです。</p><h1 id="基本的な使い方"><a href="#基本的な使い方" class="headerlink" title="基本的な使い方"></a>基本的な使い方</h1><p>DocStoreは、ORマッパー内臓のストレージAPIのように使えます。Goの構造体に直接マッピングして読み書きできますので、ORマッパーを別途用意する必要はありません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">// 使いたいバックエンドをこのようにimportしておく</span></span><br><span class="line">_ <span class="string">"gocloud.dev/docstore/memdocstore"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CounterEntity <span class="keyword">struct</span> &#123;</span><br><span class="line">ID    <span class="keyword">string</span> <span class="string">`docstore:"id"`</span></span><br><span class="line">Count <span class="keyword">int</span>    <span class="string">`docstore:"count"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">coll, err := docstore.OpenCollection(context.Background(), <span class="string">"mem://counter/id"</span>)</span><br><span class="line"><span class="comment">// これでレコードの作成</span></span><br><span class="line">row := CounterEntity&#123;</span><br><span class="line">ID:    <span class="string">"1"</span>,</span><br><span class="line">Count: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">coll.Create(context.Background(), &amp;row)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 読み込みたい時もエンティティの読み書きのオブジェクトを作り、主キーだけ設定しておく</span></span><br><span class="line">rowToRead := CounterEntity&#123;</span><br><span class="line">ID:    <span class="string">"1"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主キー以外の要素（ここではCount）に値が設定される</span></span><br><span class="line">coll.Get(context.Background(), &amp;rowToRead)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>簡単ですね。ここではオンメモリで動作するmemdocstoreを使いましたが、awsdynamodb、gcpfirestore、mongodbdocstoreがあります。テーブルを作成する機能はないので、memdocstore以外はawscliやgcloudコマンドなどを利用するなどして事前にテーブルは作っておく必要はあります。</p><p>メソッドとしては次の6つがあります。基本的なCRUD + UPSERT + 更新用の特別なメソッドになります。使い方で迷うことはあまりないでしょう。</p><ul><li>Create: 新しいレコードを追加する（すでに存在するとエラー）</li><li>Replace: 既存のレコードを置換する(存在していなければエラー)</li><li>Put: 既存のレコードがあれば置換し、なければ新規で作成</li><li>Get: レコードの取得(なければエラー)</li><li>Delete: レコードの削除</li><li>Update: 特定のカラムだけ更新（後述）</li></ul><h1 id="上級な使い方"><a href="#上級な使い方" class="headerlink" title="上級な使い方"></a>上級な使い方</h1><p>単なる読み書き以外にさまざまな機能が提供されています。</p><h2 id="アップデート"><a href="#アップデート" class="headerlink" title="アップデート"></a>アップデート</h2><p>RDBの強力なトランザクションがない代わりに、トランザクションが実現していたユースケースの<strong>ごく一部</strong>（レコードを取ってきて、変更してセーブ）をカバーするのがこのアップデート機能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coll.Update(ctx, &amp;record, docstore.Mods&#123;<span class="string">"count"</span>: docstore.Increment(<span class="number">1</span>)&#125;)</span><br></pre></td></tr></table></figure><p>Modsはmapのエイリアスになっており、特定のフィールドにのみ変更を加えることができます。Modsの値によって結果が変わりますが、現状サポートされている操作は次の3つです。</p><ul><li>nil: フィールドを削除する</li><li>docstore.Increment: 値をインクリメントする</li><li>その他の値: フィールドの値を変更する</li></ul><h2 id="クエリー"><a href="#クエリー" class="headerlink" title="クエリー"></a>クエリー</h2><p>docstoreの中で個人的に一番便利で、クラウドに乗らないサービスでもmemdocstoreを使ってしまおうと思う動機づけになっているのがこのクエリー機能です。公式ドキュメントのサンプルが一通りイテレータの使い方・エラー処理も含めて触れているため、これが一番参考になるかと思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"gocloud.dev/docstore"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ask for all players with scores at least 20.</span></span><br><span class="line">iter := coll.Query().Where(<span class="string">"Score"</span>, <span class="string">"&gt;="</span>, <span class="number">20</span>).OrderBy(<span class="string">"Score"</span>, docstore.Descending).Get(ctx)</span><br><span class="line"><span class="keyword">defer</span> iter.Stop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query.Get returns an iterator. Call Next on it until io.EOF.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> p Player</span><br><span class="line">err := iter.Next(ctx, &amp;p)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s: %d\n"</span>, p.Name, p.Score)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Query()の返り値に対して、fluentインタフェースで情報を付与し、最後にGet()を呼び出します。次のメソッドがあります。どれもSQLでおなじみですね。</p><ul><li>Where()</li><li>OrderBy()</li><li>Limit()</li></ul><p>Whereの演算子としては”=”, “&gt;”, “&lt;”, “&gt;=”, “&lt;=”の5種類が使えます。notはありません。</p><p>Goの場合はスライス（と配列）、mapのシンプルなデータ構造でプログラムを構成していく必要があります。当然、インデックスやキーでのアクセス以外に範囲アクセスなどをしようとすると、自分でいろいろ作り込む必要があります。オンメモリのデータでもこのクエリー機能を使うと、少しリッチな検索機能が得られます（もちろん、処理コストが極めて重要な場合には使えませんが）。</p><p>もちろん、この機能を使うためにはバックエンドのテーブル作成時にインデックスを設定しておくなどをしないとバックエンドによってはフルスキャンになって嬉しくはないでしょう。</p><h2 id="アクションリスト"><a href="#アクションリスト" class="headerlink" title="アクションリスト"></a>アクションリスト</h2><p>複数のオペレーションをまとめて実行するのがアクションリストです。ほとんどのストレージAPIはバルクでまとめて処理を渡すことで効率よく処理することが可能だったりしますが、このアクションリストはそれを活用するためのAPIになっています。</p><p>Actions()で帰ってきた<code>docstore.ActionList</code>に対してfluentインタフェースでメソッドを複数呼び、最後にDoを呼び出すことでまとめて実行されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err := coll.Actions().</span><br><span class="line">    Update(&amp;row, docstore.Mods&#123;<span class="string">"count"</span>: docstore.Increment(<span class="number">1</span>)&#125;).</span><br><span class="line">    Delete(&amp;rowToDelete).</span><br><span class="line">    Do(ctx)</span><br></pre></td></tr></table></figure><p>ここで返されるerrorの実体は<a href="https://github.com/google/go-cloud/blob/master/docstore/docstore.go#L281" target="_blank" rel="noopener">docstore.ActionListError</a>です。これは、エラー情報の配列になっており、ActionListErrorにタイプアサーションでダウンキャストすることで、各アクションのエラー情報が個別に取れるようになっています。</p><h2 id="楽観ロック"><a href="#楽観ロック" class="headerlink" title="楽観ロック"></a>楽観ロック</h2><p>docstoreのドキュメントにはリビジョンフィールドが設定できます。デフォルトの名前はDocstoreRevisionですが、コレクションを開くときのオプションで設定できます。Replaceなどの更新メソッド呼び出し時にこのフィールドを設定しておくと、自分よりも先に誰かが書き込んだ時に楽観ロックによりエラーを検知できます。リビジョンフィールドが存在しない or リビジョン情報を渡さなければこの機構は動作しません。</p><h2 id="ローカルファイルに保存-memdocstore"><a href="#ローカルファイルに保存-memdocstore" class="headerlink" title="ローカルファイルに保存(memdocstore)"></a>ローカルファイルに保存(memdocstore)</h2><p>memdocstoreには、ローカルファイルとの読み書きの機能があります。これを使うとオープン時にファイルがあればそれを読み込んで復元しますし、クローズ時に保存します。ユニットテストでちょっとしたマスターデータをロードするには便利でしょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// memdocstoreのドライバ側のAPIを使ってオープン時にオプションでファイル指定</span></span><br><span class="line">coll, err := memdocstore.OpenCollection(<span class="string">"id"</span>, &amp;memdocstore.Filename&#123;</span><br><span class="line">    Filename: <span class="string">"collection.db"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ポータブル版のAPIでURLのクエリーでファイル名指定</span></span><br><span class="line">coll, err := docstore.OpenCollection(context.Background(), <span class="string">"mem://counters?filename=counter.db"</span>)</span><br></pre></td></tr></table></figure><h1 id="DocStoreの注意点"><a href="#DocStoreの注意点" class="headerlink" title="DocStoreの注意点"></a>DocStoreの注意点</h1><p>便利なDocStoreですが、いくつか注意点があります。</p><h2 id="gobのエラー-memdocstore"><a href="#gobのエラー-memdocstore" class="headerlink" title="gobのエラー(memdocstore)"></a>gobのエラー(memdocstore)</h2><p>memdocstoreではファイルの保存ができることを紹介しましたが、保存時にエラーが発生することがあります。そして、エラーが発生すると、次回オープンするときに<code>EOFエラー</code>が出てきます。</p><p>保存というのは<code>Close()</code> 時に行われるので、<code>Close()</code>を忘れると保存されませんし、次のように雑に書いているとエラーに気づけません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ダメなコード</span></span><br><span class="line"><span class="keyword">defer</span> coll.Close()</span><br></pre></td></tr></table></figure><p><code>Close()</code>を明示的にロジックの一部で書いても良いですが、<code>defer</code>を使いたいところでもあります。<code>defer</code>を使う場合は<code>Close()</code>のエラーをきちんとハンドリングする必要があります。返り値に名前をつけておけば、<code>defer</code>の中のエラーを正しく呼び出し元に返すことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 名前付きの返り値を使って、Close()のエラーを忘れずに上流に流す。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">anyFunc</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">coll, err := docstore.OpenCollection(context.Background(), <span class="string">"mem://counters?filename=counter.db"</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// すでにエラーがあったときは上書きしないように</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">err = coll.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 読み書き</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>クローズ時のエラーの原因は、おそらく、保存時に使っている<code>encoding/gob</code>周りだと思います。errさえきちんと把握できればそのあとの対応は難しくはないでしょう。必要な型の保存ができるようにコレクションの読み込み前には<code>gob.Register</code>で型の登録を済ませておきましょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    gob.Register(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="スレッドセーフではない-memdocstore"><a href="#スレッドセーフではない-memdocstore" class="headerlink" title="スレッドセーフではない(memdocstore)"></a>スレッドセーフではない(memdocstore)</h2><p>memdocstoreは<a href="https://github.com/google/go-cloud/blob/master/docstore/memdocstore/mem.go#L78" target="_blank" rel="noopener">ソースコード中のコメント</a>にこっそり、「スレッドセーフに修正する」と書かれています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO(jba): make this package thread-safe.</span></span><br></pre></td></tr></table></figure><p>コレクションそのものは内部にsync.Mutexを持っており、コレクションに対する操作は複数のgoroutineで実行しても問題はないと思います。また、ドライバAPI側の<code>OpenCollection()</code>も、新規のコレクションを作成して返すので問題はありません。</p><p>問題はポータブル版のAPIのコレクション作成です。GoのユニットテストはデフォルトでGOMAXPROCSの数だけ平行に実行されます。同じホストを持つURLを渡すと、同じコレクションのインスタンスを返すため、ユニットテストがお互いに影響を与え合うことになります。</p><p>解決法としてはドライバ版のAPIを使うか、コレクション名にユニークな識別子を付与して衝突しないようにする、といった対策が必要です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/rs/xid"</span></span><br><span class="line"><span class="string">"github.com/stretchr/testify/assert"</span></span><br><span class="line"><span class="string">"gocloud.dev/docstore"</span></span><br><span class="line">_ <span class="string">"gocloud.dev/docstore/memdocstore"</span></span><br><span class="line"><span class="string">"golang.org/x/sync/errgroup"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestIncrement</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">coll, err := docstore.OpenCollection(context.Background(), <span class="string">"mem://counter"</span>+xid.New().String()+<span class="string">"/id"</span>)</span><br><span class="line"><span class="comment">// 以下テストコード</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2つのコンテキスト"><a href="#2つのコンテキスト" class="headerlink" title="2つのコンテキスト"></a>2つのコンテキスト</h2><p>DocStoreはコレクションを開くときにコンテキストを要求します。また、個別の操作のときにもコンテキストが必要です。</p><p>memdocstoreの場合、最初のオープン時のコンテキストがキャンセルされると、データが全てリセットされます。ここは議論を呼んだところですが、この実装から推測できるのは、リクエストのたびにコレクションを開いて操作してクローズするというのではなく、コレクションはプロセスの寿命と同じだけ起動しっぱなしにすることを想定して設計されているということです。</p><p>つまり2種類は独立したコンテキストとなります。1つめはコレクションとの接続（≒アプリケーションのプロセスの生存期間）のためのもので、2つめは1つの読み書きのアクションに対応するコンテキストです。例えばサーバーアプリケーションであれば、サーバーが起動したときに作成され、サーバーの寿命と同じコンテキストと、フロントエンドからのリクエストを受けてそれを返すまでの寿命しかないコンテキストです。</p><h2 id="パーティションキー、ソートキー、Read-Writeキャパシティ-awsdynamodb"><a href="#パーティションキー、ソートキー、Read-Writeキャパシティ-awsdynamodb" class="headerlink" title="パーティションキー、ソートキー、Read/Writeキャパシティ(awsdynamodb)"></a>パーティションキー、ソートキー、Read/Writeキャパシティ(awsdynamodb)</h2><p>DynamoDBのデータベースがどのようにデータを保持しており、どのようにアクセスすると効率よくデータの取得ができるかについては<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/HowItWorks.Partitions.html" target="_blank" rel="noopener">ドキュメントに詳しく書かれています</a>。</p><p>DynamoDBでは他のデータベースなどのストレージとくらべて維持費が安くなっています。一方で、送受信に備えて、テーブルごとにキャパシティユニットを設定しておく必要があり、これの維持費がかかるという設計になっています。そのため、主キーで呼び分けが確実にできるのであればテーブルをまとめておくことでキャパシティを効率よくわけことも可能かもしれません。</p><p>このように、バックエンドのDBの特性がなくなるわけではなく、それをわかった上で利用する必要があります。docstoreがエミュレーションしてくれるおかげで、なんとなく動作してしまうことも多いと思いますが、実行/コスト効率をあげるには、裏の仕組みの理解は欠かせません。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これまで紹介してきたBlob、PubSubと、このDocStore、そしてGCP/AWS/Azure向けに提供されているMySQL/PostgreSQL用のアダプタが、現状Go Cloudでアプリケーションを組み立てるための部品として提供されています（あとは設定ファイル用アダプタと、もろもろ設定済みのウェブサーバー）。もっとも、SQLの方は使い方は普段のものと変わらないので、大きな機能は今回の本連載の中で一通り説明できたと思います。</p><p>明日はDocStoreなどを少し便利にするユーティリティについて説明します。</p><hr><ul><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a></li><li>Go Cloud#3 Go CloudのDocStoreを使う（この記事です）</li><li><a href="/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li><li><a href="/articles/20191115/">Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する</a></li><li><a href="/articles/20191119/">Go Cloud#6 GCPのローカルエミュレータを活用する</a></li><li><a href="/articles/20191128/">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる</a></li></ul><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li><li><a href="/articles/20191030/">GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIG DX Unitの渋川です。今回はGo Cloudの紹介の連載の第3弾です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/20191111/&quot;&gt;Go Cloud#1 概要とBlobへの活用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/arti
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
</feed>
