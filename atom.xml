<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-08-19T00:56:59.058Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Firebaseでお手軽！データ管理画面をつくる</title>
    <link href="https://future-architect.github.io/articles/20200819/"/>
    <id>https://future-architect.github.io/articles/20200819/</id>
    <published>2020-08-18T15:00:00.000Z</published>
    <updated>2020-08-19T00:56:59.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！2017年9月入社の柏木です。<a href="https://future-architect.github.io/articles/20200726/">夏休み自由研究連載</a>13日目の記事です！🏖️</p><p>昨日は<a href="https://future-architect.github.io/articles/20200818/">【入門】私を苦しめたDynamoDB</a>という読み応えたっぷりの記事でした。<br>今回は、Firebaseを使って画面を開発してみようと思います。</p><h1 id="本記事のゴール"><a href="#本記事のゴール" class="headerlink" title="本記事のゴール"></a>本記事のゴール</h1><p>下記を最短経路で作ってみます。<br>システムアドミンの人が使うようなマスタデータ管理画面を想定して、限られたユーザーにアクセスを制限すべく、認証機能も入れました。</p><ul><li>Typescript×Reactのアプリを立ち上げる</li><li>Firebaseのデータベース（Firestore）にデータを用意する</li><li>Firebase Hostingを用いてデプロイする</li><li>Firestoreに格納されているデータを画面に表示する</li><li>Firebase Authenticationで認証する</li></ul><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul><li>macOS Catalina (v10.15.6)</li><li>Node.js (v14.8.0)</li></ul><h1 id="実践"><a href="#実践" class="headerlink" title="実践"></a>実践</h1><h3 id="Typescript×Reactのアプリを立ち上げる"><a href="#Typescript×Reactのアプリを立ち上げる" class="headerlink" title="Typescript×Reactのアプリを立ち上げる"></a>Typescript×Reactのアプリを立ち上げる</h3><p>環境構築の手間を劇的に削減できる<code>creat-react-app</code>を利用します。今回はtypescriptで実装したいので、オプションをつけてインストールしました。<code>npm start</code>で画面が立ち上がります。</p><figure class="highlight plain"><figcaption><span>~</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app summer-vacation --typescript</span><br><span class="line">$ cd summer-vacation</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p><img src="/images/20200819/image.png" alt=""></p><h3 id="Firebaseのデータベース（Firestore）にデータを用意する"><a href="#Firebaseのデータベース（Firestore）にデータを用意する" class="headerlink" title="Firebaseのデータベース（Firestore）にデータを用意する"></a>Firebaseのデータベース（Firestore）にデータを用意する</h3><p>続いてデータを作成します。<br>まず、Firebase上に自身のプロジェクトを作成します。Googleのアカウントがあれば、誰でもFirebaseを始めることができます。<a href="https://console.firebase.google.com/u/0/?hl=ja" target="_blank" rel="noopener">Firebaseコンソール</a>にアクセスし、「プロジェクトを追加」から指示に沿って設定を行うと、プロジェクトの作成完了です。</p><p>次に、画面に表示したいデータを作成します。<br>FirebaseにはFirestoreとRealtime Database、２つのデータベース機能が用意されています。違いは<a href="https://techblog.kayac.com/rtdb-vs-firestore" target="_blank" rel="noopener">こちらの記事</a>にわかりやすく書いてありました。今回は簡易なデータ構造なのでどちらでも問題ないですが、名前がかっこいいので前者を用います。</p><p>ブラウザ上でぽこぽこデータを投入し、準備完了です！<br><img src="/images/20200819/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-18_23.31.40.png" alt=""></p><h3 id="Firebase-Hostingを用いてデプロイする"><a href="#Firebase-Hostingを用いてデプロイする" class="headerlink" title="Firebase Hostingを用いてデプロイする"></a>Firebase Hostingを用いてデプロイする</h3><p>ホスティングが簡単にできると話題のFirebase Hostingを用いて、下記手順でアプリのデプロイを行います。</p><h4 id="1-Firebaseに自分のアプリを登録する"><a href="#1-Firebaseに自分のアプリを登録する" class="headerlink" title="1. Firebaseに自分のアプリを登録する"></a>1. Firebaseに自分のアプリを登録する</h4><p>まずは、Firebaseからアプリが利用するプロジェクトの情報を取得できるようにします。<br>歯車アイコンから設定画面に遷移し、「アプリを追加」の作業を行います。今回はweb画面なので、プラットフォームにwebを選択し、summer-vacationのアプリ名で追加します。設定が完了するとこのように、アプリで使用するconfig情報が取得できるようになりました！<br><img src="/images/20200819/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-18_23.29.57.png" alt=""></p><h4 id="2-アプリにFirebaseの設定を組み込む"><a href="#2-アプリにFirebaseの設定を組み込む" class="headerlink" title="2. アプリにFirebaseの設定を組み込む"></a>2. アプリにFirebaseの設定を組み込む</h4><p>2で取得した情報を作成したReactのアプリに紐付けます。ただこの情報は公開したくないので、環境変数として渡すようにします。<br>create-react-appにはdotenvの機能も組み込まれているので、<code>.env</code>ファイルをレポジトリ直下に作成し、先ほどの情報を環境変数として定義します。create-react-appのルールで、変数のプレフィックスに<code>REACT_APP_</code>を使用しないと認識してくれないので注意が必要です。設定を行った後は、<code>npm start</code> を再実行し、コンパイルし直します。</p><p>続いて、firebaseのライブラリをインストールします。</p><figure class="highlight plain"><figcaption><span>~/summer-vacation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install firebase --save</span><br></pre></td></tr></table></figure><p>最後にFirebaseとの紐付けを行います。ここで設定した環境変数を埋め込みます。</p><figure class="highlight js"><figcaption><span>firebase/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> firebase <span class="keyword">from</span> <span class="string">'firebase'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> env = process.env;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> firebaseConfig = &#123;</span><br><span class="line">    apiKey: env.REACT_APP_API_KEY,</span><br><span class="line">    authDomain: env.REACT_APP_AUTH_DOMAIN,</span><br><span class="line">    databaseURL: env.REACT_APP_DATABASE_URL,</span><br><span class="line">    projectId: env.REACT_APP_PROJECT_ID,</span><br><span class="line">    storageBucket: env.REACT_APP_STORAGE_BUCKET,</span><br><span class="line">    messagingSenderId: env.REACT_APP_MESSAGING_SENDER_ID,</span><br><span class="line">    appId: env.REACT_APP_APP_ID,</span><br><span class="line">    measurementId: env.REACT_APP_MEASUREMENT_ID,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Firebaseを紐付け、初期化</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> firebaseApp = firebase.initializeApp(firebaseConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Firestoreのインスタンス作成</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> firebaseStore = firebaseApp.firestore();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> firebase;</span><br></pre></td></tr></table></figure><h4 id="3-デプロイコマンドを実行できるようにする"><a href="#3-デプロイコマンドを実行できるようにする" class="headerlink" title="3. デプロイコマンドを実行できるようにする"></a>3. デプロイコマンドを実行できるようにする</h4><p>最後に、ローカル環境からデプロイできるようにします。<br><a href="https://firebase.google.com/docs/cli?hl=ja#mac-linux-npm" target="_blank" rel="noopener">公式ドキュメント</a>の手順に沿ってfirebaseコマンドラインツールをローカル環境にインストールします。<br>ログインし、自身のGoogleアカウントと紐づけてプロジェクト一覧を確認すると、先ほど作成したプロジェクトが表示されました！</p><figure class="highlight plain"><figcaption><span>~/summer-vacation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g firebase-tools</span><br><span class="line">$ firebase login</span><br><span class="line">$ firebase projects:list</span><br><span class="line">✔ Preparing the list of your Firebase projects</span><br><span class="line">┌──────────────────────┬───────────────────────┬────────────────┬──────────────────────┐</span><br><span class="line">│ Project Display Name │ Project ID            │ Project Number │ Resource Location ID │</span><br><span class="line">├──────────────────────┼───────────────────────┼────────────────┼──────────────────────┤</span><br><span class="line">│ summer-vacation      │ summer-vacation-xxxxx │ xxxxxxxxxxxx   │ asia-northeast1      │</span><br><span class="line">└──────────────────────┴───────────────────────┴────────────────┴──────────────────────┘</span><br></pre></td></tr></table></figure><p>firebaseコマンドで初期化のコマンドを実行すると対話式で諸々の設定を行えます。</p><figure class="highlight plain"><figcaption><span>~/summer-vacation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ firebase init</span><br><span class="line">...</span><br><span class="line">✔  Firebase initialization complete!</span><br></pre></td></tr></table></figure><p>今回カスタマイズしたのは下記項目です。<br>ビルド実行時にreact-scriptsコマンドがモジュールを出力するのが<code>build</code>ディレクトリなので、public directoryは<code>build</code>配下を指定します。</p><ul><li>summer-vactionのプロジェクトを利用</li><li>Hostingのサービス、Cloud Firestoreを利用</li><li>public directoryに <code>build</code>を指定</li><li>SPAとして利用</li></ul><p>この状態でビルドし、デプロイします。<br>コマンドに表示されたURLにアクセスすると、画面が表示されました！</p><figure class="highlight plain"><figcaption><span>~/summer-vacation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line">$ firebase deploy</span><br><span class="line">...</span><br><span class="line">✔  Deploy complete!</span><br><span class="line">Hosting URL: https:&#x2F;&#x2F;example.web.app</span><br></pre></td></tr></table></figure><p><img src="/images/20200819/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-18_23.19.09.png" alt=""></p><h3 id="Firestoreに格納されているデータを画面に表示する"><a href="#Firestoreに格納されているデータを画面に表示する" class="headerlink" title="Firestoreに格納されているデータを画面に表示する"></a>Firestoreに格納されているデータを画面に表示する</h3><p>いよいよFirestoreにアクセスしてみましょう！<br>先ほどインストールしたfirebaseのライブラリを使用して、Firestoreに格納したユーザーの名称を表示します。<br>React Hooksの<code>useEffect</code>を使って、初期描画後にデータ取得するメソッドを実行します。</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [users, setUsers] = useState&lt;firebase.firestore.DocumentData[]&gt;([]);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> searchUsers = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">      <span class="comment">// Firestoreのコレクションを指定してデータ取得。今回は全量を検索</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> fireStore.collection(<span class="string">'users'</span>).get();</span><br><span class="line">      <span class="keyword">if</span> (res.empty) <span class="keyword">return</span> [];</span><br><span class="line">      <span class="keyword">const</span> userList: firebase.firestore.DocumentData[] = [];</span><br><span class="line">      <span class="comment">// DocumentData型にはmapメソッドが定義されていないため、forEachのループでデータを加工</span></span><br><span class="line">      res.forEach(<span class="function"><span class="params">doc</span> =&gt;</span> &#123;</span><br><span class="line">          userList.push(doc.data());</span><br><span class="line">      &#125;)</span><br><span class="line">      setUsers(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    searchUsers();</span><br><span class="line">    setLoading(<span class="literal">false</span>);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>なんとライブラリ組み込みのメソッドを使用するだけで、簡単にFirestoreとの疎通、データ取得が実現できてしまいました。とってもお手軽ですね！</p><p><img src="/images/20200819/image_2.png" alt=""></p><h3 id="Firebase-Authenticationで認証する"><a href="#Firebase-Authenticationで認証する" class="headerlink" title="Firebase Authenticationで認証する"></a>Firebase Authenticationで認証する</h3><p>最後に、自身以外のアクセスをコントロールする仕組みも追加しておきます。<br>Firebaseの認証機能を簡単にクライアントに実装できる<code>react-firebaseui</code>を利用します。</p><h3 id="1-Firebase-Authenticationで認証方法を登録する"><a href="#1-Firebase-Authenticationで認証方法を登録する" class="headerlink" title="1. Firebase Authenticationで認証方法を登録する"></a>1. Firebase Authenticationで認証方法を登録する</h3><p>コンソールの設定画面から、「ログイン方法を設定」します。<br><img src="/images/20200819/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-18_23.20.20.png" alt=""></p><p>私はGoogleアカウントの認証を使用することにしました。<br><img src="/images/20200819/image_3.png" alt=""></p><h3 id="２-アクセスを制御する仕組みを実装する"><a href="#２-アクセスを制御する仕組みを実装する" class="headerlink" title="２. アクセスを制御する仕組みを実装する"></a>２. アクセスを制御する仕組みを実装する</h3><p>最初に、ホワイトリストとなるメールアドレスを環境変数に追加します。</p><figure class="highlight plain"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_VALID_MAIL_ADDRESSES&#x3D;firebaseapp@example.com</span><br></pre></td></tr></table></figure><p>次に画面にログイン機能を実装します。認証画面を用意してくれるライブラリを使い、手間を省きます。</p><figure class="highlight plain"><figcaption><span>~/summer-vacation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save react-firebaseui</span><br></pre></td></tr></table></figure><p>先ほどと同じApp.tsxに実装を組み込みます。</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [myAccount, setMyAccount] = useState&lt;firebase.User&gt;();</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> searchUsers = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    firebase.auth().onAuthStateChanged(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (!user) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> (user.email !== process.env.REACT_APP_VALID_MAIL_ADDRESSES) <span class="keyword">return</span>;</span><br><span class="line">      setMyAccount(user);</span><br><span class="line">      searchUsers();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p><code>npm start</code> で起動すると、アカウント認証画面が表示されました！<br><img src="/images/20200819/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-18_23.22.08.png" alt=""></p><p>これで、Googleアカウントのメールアドレスが<code>.env</code>に定義したものと異なる場合、アクセスを弾くことができます。</p><p>コードの全量はこちらです。</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// firebase functions</span></span><br><span class="line"><span class="keyword">import</span> firebase <span class="keyword">from</span> <span class="string">'firebase'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;fireStore&#125; <span class="keyword">from</span> <span class="string">'./firebase/index'</span></span><br><span class="line"><span class="keyword">import</span> StyledFirebaseAuth <span class="keyword">from</span> <span class="string">'react-firebaseui/StyledFirebaseAuth'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [users, setUsers] = useState&lt;firebase.firestore.DocumentData[]&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> [myAccount, setMyAccount] = useState&lt;firebase.User&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> uiConfig = &#123;</span><br><span class="line">    signInFlow: <span class="string">'popup'</span>,</span><br><span class="line">    signInSuccessUrl: <span class="string">'/'</span>,</span><br><span class="line">    signInOptions: [</span><br><span class="line">        firebase.auth.GoogleAuthProvider.PROVIDER_ID,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> searchUsers = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">      <span class="comment">// Firestoreのコレクションを指定してデータ取得</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> fireStore.collection(<span class="string">'users'</span>).get();</span><br><span class="line">      <span class="keyword">if</span> (res.empty) <span class="keyword">return</span> [];</span><br><span class="line">      <span class="keyword">const</span> userList: firebase.firestore.DocumentData[] = [];</span><br><span class="line">      <span class="comment">// DocumentData型にはmapメソッドが定義されていないため、forEachのループでデータを加工</span></span><br><span class="line">      res.forEach(<span class="function"><span class="params">doc</span> =&gt;</span> &#123;</span><br><span class="line">          userList.push(doc.data());</span><br><span class="line">      &#125;)</span><br><span class="line">      setUsers(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    firebase.auth().onAuthStateChanged(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (!user) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> (user.email !== process.env.REACT_APP_VALID_MAIL_ADDRESSES) <span class="keyword">return</span>;</span><br><span class="line">      setMyAccount(user);</span><br><span class="line">      searchUsers();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">        &#123;loading ? (</span><br><span class="line">                  &lt;p&gt;</span><br><span class="line">                  LOADING.....</span><br><span class="line">                &lt;<span class="regexp">/p&gt; </span></span><br><span class="line"><span class="regexp">        ) : !myAccount ? (</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;</span></span><br><span class="line"><span class="regexp">            ログインが必要です</span></span><br><span class="line"><span class="regexp">          &lt;StyledFirebaseAuth uiConfig=&#123;uiConfig&#125; firebaseAuth=&#123;firebase.auth()&#125; /</span>&gt;</span><br><span class="line">          &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        ) : </span></span><br><span class="line"><span class="regexp">          users.map((user, index) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            return &lt;p key=&#123;index&#125;&gt; &#123;user.name&#125;&lt;/</span>p&gt;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>認証機能を含めた画面の開発がいとも簡単にできてしまいました。（環境構築のコマンドは確認含めたったの11行！）<br>Firebaseは本当に偉大でした。<br>アプリ作るってなんだか大変そう…と思ってる方の印象が少しでも変われば幸いです。<br>使いこなせばもっといろんなことができそうなので、引き続き触ってみたいと思います！<br>以上です。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://firebase.google.com/docs/web/setup#node.js-%E3%82%A2%E3%83%97%E3%83%AA" target="_blank" rel="noopener">https://firebase.google.com/docs/web/setup#node.js-%E3%82%A2%E3%83%97%E3%83%AA</a></li><li><a href="https://qiita.com/kazushikawamura/items/58ea222b3cc289882d79" target="_blank" rel="noopener">https://qiita.com/kazushikawamura/items/58ea222b3cc289882d79</a></li><li><a href="https://qiita.com/cola119/items/99350f2c34c51378777e" target="_blank" rel="noopener">https://qiita.com/cola119/items/99350f2c34c51378777e</a></li><li><a href="https://dev.to/adriantwarog/deno-react-using-create-react-app-with-deno-5fpj" target="_blank" rel="noopener">https://dev.to/adriantwarog/deno-react-using-create-react-app-with-deno-5fpj</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは！2017年9月入社の柏木です。&lt;a href=&quot;https://future-architect.github.
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
      <category term="Firebase" scheme="https://future-architect.github.io/tags/Firebase/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>【入門】私を苦しめたDynamoDB</title>
    <link href="https://future-architect.github.io/articles/20200818/"/>
    <id>https://future-architect.github.io/articles/20200818/</id>
    <published>2020-08-17T15:00:00.000Z</published>
    <updated>2020-08-18T13:11:29.700Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200818/top.png" class="img-middle-size"><p><a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休み自由研究連載</a>12本目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。TIG DXユニットの富山です。2020年4月新卒入社です。</p><p>夏休み自由研究連載の11本目の記事で公開された<a href="https://future-architect.github.io/articles/20200817/">Slack×GASの日報テンプレBOTを実務に導入してみた</a>の執筆者である仁木さんと同期です。</p><p>私が参画しているプロジェクトでは、データベースにDynamoDBを採用しています。私は、RDBMSしか使用した経験がなかったので、NoSQLであるDynamoDBの理解にとても苦しみました。そこで今回の夏休み自由研究では理解した内容をまとめてみたいと思います！</p><h1 id="つまったポイントサマリ―"><a href="#つまったポイントサマリ―" class="headerlink" title="つまったポイントサマリ―"></a>つまったポイントサマリ―</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- DB &#x3D; RDBMSという固定概念を取り除くこと</span><br><span class="line">- KVS(NoSQL)の概念の理解</span><br><span class="line">- CRUD操作（特にR）</span><br></pre></td></tr></table></figure><p>これらが理解できるような記事を目指します。</p><h1 id="DynamoDBとは"><a href="#DynamoDBとは" class="headerlink" title="DynamoDBとは"></a>DynamoDBとは</h1><p><a href="https://aws.amazon.com/jp/dynamodb/" target="_blank" rel="noopener">公式ドキュメント</a>によると、</p><blockquote><p>Amazon DynamoDB は、規模に関係なく数ミリ秒台のパフォーマンスを実現する、key-value およびドキュメントデータベースです。完全マネージド型マルチリージョン、マルチマスターで耐久性があるデータベースで、セキュリティ、バックアップおよび復元と、インターネット規模のアプリケーション用のメモリ内キャッシュが組み込まれています。DynamoDB は、1 日に 10 兆件以上のリクエストを処理することができ、毎秒 2,000 万件を超えるリクエストをサポートします。</p></blockquote><p>とのことです。とりあえずすごいと言うことはわかりました。<br>ざっくりと、AWSが提供するkey-value型のハイパフォーマンスNoSQLフルマネージドサービスです。</p><h1 id="NoSQLとは"><a href="#NoSQLとは" class="headerlink" title="NoSQLとは"></a>NoSQLとは</h1><p>そもそもNoSQLとは何者でしょうか。次世代的な響きがしてカッコいいですよね。<br>わたしはDynamoDBを触り始める以前、Yes/NoのNoSQLだと思っていましたが、 <code>Not Only SQL</code> の略称です。NoSQLについてWikipediaから冒頭の説明文を引用してみましょう。</p><blockquote><p>NoSQL（一般に “Not only SQL” と解釈される）とは、関係データベース管理システム (RDBMS) 以外のデータベース管理システムを指すおおまかな分類語である。関係データベースを杓子定規に適用してきた長い歴史を打破し、それ以外の構造のデータベースの利用・発展を促進させようとする運動の標語としての意味合いを持つ。</p></blockquote><p>つまり、RDBMS以外のDBシステムを指す大まかな定義の単語のようです。<br>一口にNoSQLといってもデータ形式の格納方式の違いで様々なタイプのNoSQLが存在します。大きくは下記3つに分類されます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. KVS (Key-Value-Store)</span><br><span class="line">2. ドキュメントDB</span><br><span class="line">3. グラフDB</span><br></pre></td></tr></table></figure><p>DynamoDBは<code>KVS</code>のNoSQLに該当します。</p><h1 id="RDBMSとの志向の違い"><a href="#RDBMSとの志向の違い" class="headerlink" title="RDBMSとの志向の違い"></a>RDBMSとの志向の違い</h1><p>RDBMSとNoSQLは異なる志向を持ちます。RDBMSはACID（Atomicity、Consistency、Isolation、Durability）という特性で語られます。ざっくりと、トランザクションにおいて持つべき4つの特性（原子性/一貫性/独立性/永続性）を表現したものです。</p><p>それに対して、NoSQLはBASE（Basically Available、Soft-State、Eventual Consistency）特性という特徴で語られます。<br>ざっくりと、<strong>「基本的には常に利用可能で、常に整合性を保っている必要はなく、一時的に一貫性のない状態を許容して、結果的には整合性が取れている状態に至る」</strong> というものです。ACIDとは対照的に、可用性や性能を重視した分散システムの特性です。</p><p>ということは、「DynamoDBでトランザクション制御はできないの？」とお考えの方もいらっしゃると思います。後述します。</p><p>余談ですが、ACID(酸）に対して、BASE(塩基）とはめちゃくちゃイケてるネーミングですね。</p><h1 id="DynamoDBの特徴"><a href="#DynamoDBの特徴" class="headerlink" title="DynamoDBの特徴"></a>DynamoDBの特徴</h1><h3 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h3><p>DynamoDBでは高可用性を重視しています。具体的には3つのAZ(Availability Zone)でレプリケーションを持っています。そのためAZに問題が起きても、他のAZが機能するため耐久性・信頼性が担保されています。</p><h3 id="フルマネージド"><a href="#フルマネージド" class="headerlink" title="フルマネージド"></a>フルマネージド</h3><p>データ容量の増加に応じたディスクやノードの増設作業をはじめ、メンテナンスが不要です。テーブルを自動的にスケールアップ/ダウンして容量を調整し、パフォーマンスを維持してくれます。</p><h3 id="SQLクエリを直接はサポートしていない"><a href="#SQLクエリを直接はサポートしていない" class="headerlink" title="SQLクエリを直接はサポートしていない"></a>SQLクエリを直接はサポートしていない</h3><p>NoSQLとだけあってSQLを直接サポートされていません。そのためテーブルの結合も行えません。（<a href="https://qiita.com/hieki/items/8899378dd76f97697100" target="_blank" rel="noopener">DQLなど、SQLライクに書けるラッパー</a>は存在します。）<br>シンプルなCRUDに対しては非常に有効ですが、複雑なものが不得意なのかもしれません。</p><h1 id="DynamoDBを触る上で抑えておくべきポイント"><a href="#DynamoDBを触る上で抑えておくべきポイント" class="headerlink" title="DynamoDBを触る上で抑えておくべきポイント"></a>DynamoDBを触る上で抑えておくべきポイント</h1><p>下記のテーブル構造を例に説明していきます。ペットショップのペット管理用DBです。（笑）<br><img src="/images/20200818/Screen_Shot_2020-08-17_at_0.30.30.png" alt=""></p><h2 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h2><p>DynamoDBには、いくつかの独自概念が登場します。<br>イメージ的に、RDBMSの既存概念と似ているものがあるので表にしてみました。</p><table><thead><tr><th>DynamoDB</th><th>RDBMS</th></tr></thead><tbody><tr><td>Table</td><td>Table</td></tr><tr><td>Item</td><td>Row</td></tr><tr><td>Attributes</td><td>Column</td></tr><tr><td>Partition Key</td><td>Primary Key</td></tr><tr><td>Sort Key</td><td>指定する場合はPrimary Keyを構成する一部になる</td></tr></tbody></table><p>今回の例だと、このようになります。<br><img src="/images/20200818/Screen_Shot_2020-08-17_at_1.45.33.png" alt=""><br>ポイントとして、Itemは正規化の必要が無い点です。つまり異なるItemで同名のAttributeを持つ必要はありません。また、 <code>detail</code> のようにAttributeにネストしたデータ構造を持たせることも可能です。</p><p>Table、Item、Attributeに関してはある程度理解が出来ると思います。</p><h3 id="パーティションキーとソートキー"><a href="#パーティションキーとソートキー" class="headerlink" title="パーティションキーとソートキー"></a>パーティションキーとソートキー</h3><p>DynamoDBを触る上で絶対に抑えて置かなければならない概念に、パーティションキー（別称：ハッシュキー）とソートキー（別称：レンジキー）が挙げられます。<br>パーティションーキー、もしくはパーティションキーとソートキーによってユニークなItemを表現します。<br>DynamoDBでは、Itemを内部的にパーティションごとに分散して保持しています。パーティションキーは内部的にハッシュ関数が実行され、ハッシュ文字列が生成されます。生成されたハッシュ文字列をもとに、Itemの格納場所が決まります。そのためパーティションキーは必須です。<br>ソートキーでは範囲指定やソートが可能です。（ <code>shop_id</code> をソートキーにするべきかは見逃してください）そのため、ソートキー以外のAttributeでのOrder byは不可能です。ソートキーの設定は必須ではありません。</p><h3 id="Secondary-Index"><a href="#Secondary-Index" class="headerlink" title="Secondary Index"></a>Secondary Index</h3><p>先程パーティションキーとソートキーについて説明をしましたが、Secondary Indexはプライマリキー以外の属性を使用する際に登場する概念です。<br>Secondary Indexには、<code>LSI</code>と<code>GSI</code>という2つの概念が存在します。</p><h4 id="LSI"><a href="#LSI" class="headerlink" title="LSI"></a>LSI</h4><p><code>Local Secondary Index</code> の頭文字を取っています。LSIは、ソートキー以外での絞り込みを行うキーを設定できるものです。<br>例でいうと、<code>birth</code> をLSIに設定した場合、 <code>pet_id</code> + <code>birth</code> のような検索ができるようになります。<br>注意点として、LSIは既存のテーブルに追加・削除はできません。テーブル作成時に定義するようにしましょう。</p><h4 id="GSI"><a href="#GSI" class="headerlink" title="GSI"></a>GSI</h4><p><code>Grobal Secondary Index</code> の頭文字を取っています。GSIは、パーティションキーを別途設定できるものです。<br>例でいうと、<code>kind</code>でdogのItemを取得したい際に、 <code>kind</code>をGSIに設定することで検索が容易にできるようになります。<br>LSIと異なり、既存のテーブルに追加・削除できます。<br>しかし、GSIを1つ定義すると、テーブルが1つ増えるのと同等のコスト増しになります。</p><h2 id="DynamoDBでトランザクション制御は可能なのか"><a href="#DynamoDBでトランザクション制御は可能なのか" class="headerlink" title="DynamoDBでトランザクション制御は可能なのか"></a>DynamoDBでトランザクション制御は可能なのか</h2><p>可能です。詳細については<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/transaction-apis.html" target="_blank" rel="noopener">公式Docs</a>をご参照ください。<br>単一のAWSアカウントおよび領域内の複数のテーブルにわたって、ACIDを提供しています。<br>ここではDynamoDBにおけるトランザクション制御の特徴を挙げます。</p><h4 id="DynamoDBにおけるトランザクション制御についての特徴"><a href="#DynamoDBにおけるトランザクション制御についての特徴" class="headerlink" title="DynamoDBにおけるトランザクション制御についての特徴"></a>DynamoDBにおけるトランザクション制御についての特徴</h4><ul><li>複数テーブルに対して制御できる</li><li>トランザクションに含められるのは25件まで(記事執筆時点(2020/08/17))</li><li>テーブルのロックはされない<ul><li>もし、トランザクション中に他操作が入った場合、トランザクションは中止されて例外が返ってきます。</li></ul></li><li>同一Itemに対して操作はできない</li><li>全ての商用リージョンで利用可能</li></ul><h2 id="プログラムからどのように触るのか"><a href="#プログラムからどのように触るのか" class="headerlink" title="プログラムからどのように触るのか"></a>プログラムからどのように触るのか</h2><p><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/CodeSamples.html" target="_blank" rel="noopener">aws-sdk</a>が公開されています。主要なサーバサイドの言語はサポートされているのではないでしょうか。</p><p>FutureのDXユニットではGoを積極的に使う文化があります。私もGopherの仲間入りを果たしました。<br>もちろん<a href="https://aws.amazon.com/jp/sdk-for-go/" target="_blank" rel="noopener">Goのsdk</a>も公開されています。また、ラッパーされたライブラリもいくつかあります。<br>詳しくは私の先輩方の最高に分かりやすい記事をご覧いただければと思います。CRUD操作のサンプルコードが書かれており、大変参考になります。<br><a href="https://future-architect.github.io/articles/20200225/">DynamoDB×Go連載#1 GoでDynamoDBでおなじみのguregu/dynamoを利用する</a><br><a href="https://future-architect.github.io/articles/20200227/">DynamoDB×Go連載#2 AWS SDKによるDynamoDBの基本操作</a></p><h2 id="よく触るItem操作まとめ"><a href="#よく触るItem操作まとめ" class="headerlink" title="よく触るItem操作まとめ"></a>よく触るItem操作まとめ</h2><p>私的によく触るItemの操作APIをまとめます。<br>様々な操作APIが存在するので、どのAPIを使用すると何が出来るのかを把握するのに苦戦しました。</p><h4 id="読み込み"><a href="#読み込み" class="headerlink" title="読み込み"></a>読み込み</h4><table><thead><tr><th>API</th><th>できること</th></tr></thead><tbody><tr><td>GetItem</td><td>ユニークキーを指定してデータが１つ取得</td></tr><tr><td>TransactGetItems</td><td>トランザクションにて最大25件取得</td></tr><tr><td>BatchGetItem</td><td>最大100アイテム (ただし、16MBを超えないアイテム数) を並列で取得</td></tr><tr><td>Query</td><td>特定のパーティションキーがあるすべての項目を取得</td></tr><tr><td>Scan</td><td>すべての項目(1度の操作で最大1MB。それを超えたらLastEvaluatedKeyを指定して再読み取りが必要)のデータを取得。（<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Scan.html" target="_blank" rel="noopener">filter式あり</a>）</td></tr></tbody></table><h4 id="書き込み"><a href="#書き込み" class="headerlink" title="書き込み"></a>書き込み</h4><table><thead><tr><th>API</th><th>できること</th></tr></thead><tbody><tr><td>PutItem</td><td>Itemの登録</td></tr><tr><td>Update</td><td>Itemの更新</td></tr><tr><td>TransactWriteItems</td><td>トランザクションにてCreate, Update, Delete制御</td></tr><tr><td>BatchWriteItem</td><td>最大25件のバッチ処理(入力/削除)。(最大1MB)</td></tr><tr><td>Delete</td><td>Itemの削除</td></tr></tbody></table><h2 id="DynamoDBを触るうえでの注意点"><a href="#DynamoDBを触るうえでの注意点" class="headerlink" title="DynamoDBを触るうえでの注意点"></a>DynamoDBを触るうえでの注意点</h2><p>最後に、実際に触ってみて「独特だなぁ」と感じた部分について記載します。</p><ul><li>パーティションキーやソートキーに空文字は入れられない</li><li>タイムスタンプの概念が存在しないので、文字列での登録が必要（日付型自体はサポートされています。ソートキーとして定義した場合、日付のソート等は可能です。詳しいデータ型に関しては<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/DynamoDBMapper.DataTypes.html" target="_blank" rel="noopener">こちら</a>をご参照ください。）</li><li>テーブルの結合ができない</li><li>基本的にAPI経由で触る</li><li>AWSのクレデンシャル情報で認証</li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は自由研究ということで、DynamoDB未経験だった私が詰まったポイントを踏まえ入門編としてまとめてみました。<br>個人的な感想として、DynamoDBはキー設計がとても重要だと感じました。今後、もっと踏み込んだ記事も執筆していけたらと思います！</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://aws.amazon.com/jp/dynamodb/" target="_blank" rel="noopener">AWS DynamoDB公式Docs</a><br><a href="https://www.youtube.com/watch?v=16RYHfe89WY" target="_blank" rel="noopener">Amazon DynamoDB Deep Dive | AWS Summit Tokyo 2019</a><br><a href="https://www.slideshare.net/AmazonWebServicesJapan/20150805-aws-blackbeltdynamodb?next_slideshow=1" target="_blank" rel="noopener">AWS Black Belt Tech シリーズ 2015 - Amazon DynamoDB</a><br><a href="https://masawan-guitar.hatenablog.com/entry/2016/08/14/163447" target="_blank" rel="noopener">「RDBMS」と「NoSQL」の比較</a><br><a href="https://ja.wikipedia.org/wiki/NoSQL" target="_blank" rel="noopener">NoSQL wikipedia</a><br><a href="https://dev.classmethod.jp/articles/amazon-dynamodb-comparison-with-rds/" target="_blank" rel="noopener">コンセプトから学ぶAmazon DynamoDB【Amazon RDSとの比較篇】</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200818/top.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;フューチャー夏休み自由
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="DataModel" scheme="https://future-architect.github.io/tags/DataModel/"/>
    
      <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Slack×GASの日報テンプレBOTを実務に導入してみた</title>
    <link href="https://future-architect.github.io/articles/20200817/"/>
    <id>https://future-architect.github.io/articles/20200817/</id>
    <published>2020-08-16T15:00:00.000Z</published>
    <updated>2020-08-17T01:53:06.435Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休み自由研究連載</a>11本目の記事です</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGメディアユニットの仁木です。Slackに投稿するための日報をBOT化・自動化したので自由研究企画に混ぜてもらい記事にすることにしました。毎日共通で書かなければいけないタイトルなどの固定項目やスケジュールの記載を自動化することで、作成時間を短縮し、重要な部分に時間を割けるようになりました。<br><img src="/images/20200817/%E3%81%AF%E3%81%97%E3%82%99%E3%82%81_%E3%82%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%99%E3%83%BC%E3%83%88%E3%82%99_1.png" alt=""></p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Googleスプレットシート及びGoogleカレンダーの情報を利用して、日報として整形するスクリプトをスプレットシートのスクリプト機能を利用して書いた後、SlackのIncoming WebhookのURLにリクエストを送信します。<br><img src="/images/20200817/%E6%A6%82%E8%A6%81_%E3%82%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%99%E3%83%BC%E3%83%88%E3%82%99_1.png" alt=""></p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><p>今回利用するサービスについて説明します。</p><h2 id="Slackのアプリ-「Incoming-Webhook」"><a href="#Slackのアプリ-「Incoming-Webhook」" class="headerlink" title="Slackのアプリ　「Incoming Webhook」"></a>Slackのアプリ　「Incoming Webhook」</h2><p>SlackのIncoming Webhookというアプリを利用しました。<br><img src="/images/20200817/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-14_12.43.50.png" alt=""><br>どのチャンネルやダイレクトメールにBOTを利用するかを決定すると、Webhook URLが発行されるので、このURLに対してPOSTリクエストを送ります。URLが発行されるページに例が詳しく載っているので何かしらの形でPOSTリクエストを送ったことがある人なら簡単に使えると思います！</p><h2 id="Googleスプレットシート"><a href="#Googleスプレットシート" class="headerlink" title="Googleスプレットシート"></a>Googleスプレットシート</h2><p>スプシと略して呼んでいたら上司が「スプシって略すのか..」と関心していました。Googleアカウントがあれば誰でも無料で使える表計算シートです。今回はスクリプトエディタ機能でスプレットシートに書いた情報を利用してSlackのWebhookURLへPOSTリクエストを送ります。<br><img src="/images/20200817/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-14_12.59.15.png" alt=""></p><h2 id="Google-Apps-Script-（GAS）"><a href="#Google-Apps-Script-（GAS）" class="headerlink" title="Google Apps Script （GAS）"></a>Google Apps Script （GAS）</h2><p>Googleスプレットシートのスクリプトエディタ機能を利用して、スクリプトを書いていきます。書いたスクリプトはボタンひとつで簡単に実行でき、さらにトリガーで実行時間を指定する機能も備わっており、設定するだけで決まった時間にPOSTリクエストが実行できます。<br><img src="/images/20200817/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-14_13.59.09.png" alt=""></p><h1 id="スクリプトの作成"><a href="#スクリプトの作成" class="headerlink" title="スクリプトの作成"></a>スクリプトの作成</h1><p>今回は特に、固定項目追加・スケジュールの追加について解説します。細かく見ると休日判定もしていますが、シンプルにまとめているページが他にいくつかあったので、今回は省略しています。</p><h2 id="固定項目の自動追加"><a href="#固定項目の自動追加" class="headerlink" title="固定項目の自動追加"></a>固定項目の自動追加</h2><p>まずは、Googleスプレットシートにタイトルなど毎日の日報で固定化されている情報をあらかじめ記載しておき、その情報を使ってテンプレを作成していきます。ここまででも、項目を打ち込むルーティーンをなくすことができ、作成時間を多少減らすことができそうです。作成したスプレットシートとコードを以下に記載します。<br><img src="/images/20200817/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-14_17.25.02.png" alt=""><br>スプレットシートの情報をスクリプトで抽出します。（全体のコードは後述）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// スプレットシートを取得</span></span><br><span class="line"><span class="keyword">let</span> sheet = SpreadsheetApp.getActiveSheet();</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">"日報 \n"</span>;</span><br><span class="line"><span class="comment">// ２行目から順番に行ごとのデータを取得し、messageに追加していく</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i&lt;= sheet.getLastRow(); i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> subtitle = sheet.getRange(i, <span class="number">1</span>).getValue(); </span><br><span class="line">  <span class="keyword">let</span> defmessage = sheet.getRange(i, <span class="number">2</span>).getValue(); </span><br><span class="line">  <span class="keyword">let</span> option = sheet.getRange(i, <span class="number">3</span>).getValue();</span><br><span class="line">  <span class="comment">// １列目の項目名をmessageに追加</span></span><br><span class="line">  message += <span class="string">"■"</span>+subtitle+<span class="string">"\n"</span>;</span><br><span class="line">  <span class="comment">// 2列目にデフォルト値が設定されている場合、messageにデフォルト値を追加</span></span><br><span class="line">  <span class="keyword">if</span>(defmessage!==<span class="string">""</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> msgs = defmessage.split(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> msg <span class="keyword">of</span> msgs) &#123;</span><br><span class="line">      <span class="keyword">if</span>(cnt===<span class="number">0</span>) message += INDENT+msg+<span class="string">"\n"</span>;</span><br><span class="line">      <span class="keyword">else</span> message += SECOND_INDENT+msg+<span class="string">"\n"</span>;</span><br><span class="line">      cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3列目に関数名が設定されている場合、関数を実行</span></span><br><span class="line">  <span class="keyword">if</span>(option!==<span class="string">""</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(option===OPTION_GET_TODAY_CAL) message += addTodayCal();</span><br><span class="line">    <span class="keyword">else</span> message += addTomorrowCal();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="スケジュールの自動追加"><a href="#スケジュールの自動追加" class="headerlink" title="スケジュールの自動追加"></a>スケジュールの自動追加</h2><p>さらに作成時間を減らしたいので、今日明日のスケジュールをカレンダーから抽出して固定項目の中を埋めていきます。以下の関数を利用してスケジュールを取得します。予定のステータスを確認して、自分が主宰の予定及び、参加・未定と回答した予定のみを取得しています。（全体のコードは後述）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必要なカレンダーID</span></span><br><span class="line"><span class="comment">// 日本の祝日カレンダーID</span></span><br><span class="line"><span class="keyword">const</span> JAP_HOLIDAY_CAL_ID = <span class="string">'ja.japanese#holiday@group.v.calendar.google.com'</span>;</span><br><span class="line"><span class="comment">// 自分のカレンダーID</span></span><br><span class="line"><span class="keyword">const</span> MY_CAL_ID = <span class="string">'piyopiyoPPP@example.com'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作成した関数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 今日の予定(参加・主催・未定のみ表示)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> </span>予定の文字列 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodayCal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> todayCal = CalendarApp.getCalendarById(MY_CAL_ID);</span><br><span class="line">  <span class="keyword">let</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> events = todayCal.getEventsForDay(today);</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> event <span class="keyword">of</span> events) &#123;</span><br><span class="line">    <span class="comment">// 自分が参加する予定のみを取得する</span></span><br><span class="line">    <span class="keyword">if</span>(event.getMyStatus()===<span class="string">"YES"</span> ||event.getMyStatus()===<span class="string">"OWNER"</span> || event.getMyStatus()===<span class="string">"MAYBE"</span>) &#123;</span><br><span class="line">      message += INDENT+event.getTitle()+<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 明日の予定(参加・主催・未定のみ表示)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> </span>予定の文字列 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTomorrowCal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tomorrowCal = CalendarApp.getCalendarById(MY_CAL_ID);</span><br><span class="line">  <span class="keyword">let</span> tomorrow = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  tomorrow.setDate(tomorrow.getDate()+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> events = tomorrowCal.getEventsForDay(tomorrow);</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> event <span class="keyword">of</span> events) &#123;</span><br><span class="line">    <span class="comment">// 自分が参加する予定のみを取得する</span></span><br><span class="line">    <span class="keyword">if</span>(event.getMyStatus()===<span class="string">"YES"</span> ||event.getMyStatus()===<span class="string">"OWNER"</span> || event.getMyStatus()===<span class="string">"MAYBE"</span>) &#123;</span><br><span class="line">      message += INDENT+event.getTitle()+<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BOT化"><a href="#BOT化" class="headerlink" title="BOT化"></a>BOT化</h1><p><img src="/images/20200817/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-14_17.42.42.png" alt=""></p><h1 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h1><p>全体のコードです。スプレットシートを作った後、ツールからスクリプトエディタを開いてコードをコピーし、【STEP 1】,【STEP 2】を設定すると動くようにしています。気になった方はぜひ動かしてみてください！</p><details><summary>コードを見る</summary><div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日報をSlackに送信する</span></span><br><span class="line"><span class="comment"> * 時計マークから、トリガーをセットして使用する</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//【STEP 1】 自分のWEBHOOKを設定</span></span><br><span class="line"><span class="keyword">const</span> SLACK_WEBHOOK = <span class="string">'https://piyopiyo'</span>;</span><br><span class="line"><span class="comment">// 日本の祝日カレンダーID</span></span><br><span class="line"><span class="keyword">const</span> JAP_HOLIDAY_CAL_ID = <span class="string">'ja.japanese#holiday@group.v.calendar.google.com'</span>;</span><br><span class="line"><span class="comment">//【STEP 2】 自分のカレンダーIDに変更</span></span><br><span class="line"><span class="keyword">const</span> MY_CAL_ID = <span class="string">'piyopiyoPPP@example.com'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> OPTION_GET_TODAY_CAL = <span class="string">'get_today_cal'</span>;</span><br><span class="line"><span class="keyword">const</span> OPTION_GET_TOMORROW_CAL = <span class="string">'get_tomorrow_cal'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> INDENT = <span class="string">'    ・'</span>;</span><br><span class="line"><span class="keyword">const</span> SECOND_INDENT = <span class="string">'      '</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日報テンプレをSlackに送信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNippo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();  </span><br><span class="line">  <span class="keyword">if</span>(isHoliday(today)) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> url = SLACK_WEBHOOK;</span><br><span class="line">  <span class="comment">// スプレットシートを取得</span></span><br><span class="line">  <span class="keyword">let</span> sheet = SpreadsheetApp.getActiveSheet();</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">"日報 \n"</span>;</span><br><span class="line">  <span class="comment">// ２行目から順番に行ごとのデータを取得し、messageに追加していく</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i&lt;= sheet.getLastRow(); i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> subtitle = sheet.getRange(i, <span class="number">1</span>).getValue(); </span><br><span class="line">    <span class="keyword">let</span> defmessage = sheet.getRange(i, <span class="number">2</span>).getValue(); </span><br><span class="line">    <span class="keyword">let</span> option = sheet.getRange(i, <span class="number">3</span>).getValue();</span><br><span class="line">    <span class="comment">// １列目の項目名をmessageに追加</span></span><br><span class="line">    message += <span class="string">"■"</span>+subtitle+<span class="string">"\n"</span>;</span><br><span class="line">    <span class="comment">// 2列目にデフォルト値が設定されている場合、messageにデフォルト値を追加</span></span><br><span class="line">    <span class="keyword">if</span>(defmessage!==<span class="string">""</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> msgs = defmessage.split(<span class="string">"\n"</span>);</span><br><span class="line">      <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">const</span> msg <span class="keyword">of</span> msgs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt===<span class="number">0</span>) message += INDENT+msg+<span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">else</span> message += SECOND_INDENT+msg+<span class="string">"\n"</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3列目に関数名が設定されている場合、関数を実行</span></span><br><span class="line">    <span class="keyword">if</span>(option!==<span class="string">""</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(option===OPTION_GET_TODAY_CAL) message += addTodayCal();</span><br><span class="line">      <span class="keyword">else</span> message += addTomorrowCal();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//logを出したい時に利用</span></span><br><span class="line">  Logger.log(message);</span><br><span class="line">  <span class="keyword">let</span> options = createOptions(today, message);</span><br><span class="line">  UrlFetchApp.fetch(url,options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 土日祝日判定</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;date&#125;</span> </span>日付オブジェクト</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;bool&#125;</span> </span>休日かどうか</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHoliday</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 土日</span></span><br><span class="line">  <span class="keyword">if</span>(date.getDay()===<span class="number">0</span> || date.getDay()===<span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 祝日</span></span><br><span class="line">  <span class="keyword">let</span> holidayCal = CalendarApp.getCalendarById(JAP_HOLIDAY_CAL_ID);</span><br><span class="line">  <span class="keyword">return</span> (holidayCal.getEventsForDay(date).length&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Slackへ送るペイロード作成</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;date&#125;</span> </span>日付オブジェクト</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>Slackに送る本文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;bool&#125;</span> </span>休日かどうか</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createOptions</span>(<span class="params">date, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> date_format = <span class="string">'yyyy/MM/dd'</span></span><br><span class="line">  <span class="keyword">let</span> fdate = Utilities.formatDate(date, <span class="string">'Asia/Tokyo'</span>, date_format);</span><br><span class="line">  <span class="keyword">let</span> json_data =&#123;<span class="string">"username"</span>:<span class="string">"日報"</span>+fdate,</span><br><span class="line">    <span class="string">"text"</span>: message,</span><br><span class="line">    <span class="string">"icon_emoji"</span>: <span class="string">":slack:"</span>&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> payload = <span class="built_in">JSON</span>.stringify(json_data);</span><br><span class="line">  <span class="keyword">let</span> options = &#123;</span><br><span class="line">    <span class="string">"method"</span>: <span class="string">"post"</span>,</span><br><span class="line">    <span class="string">"contentType"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"payload"</span> : payload</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 今日の予定(参加・主催・未定のみ表示)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> </span>予定の文字列 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodayCal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> todayCal = CalendarApp.getCalendarById(MY_CAL_ID);</span><br><span class="line">  <span class="keyword">let</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> events = todayCal.getEventsForDay(today);</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> event <span class="keyword">of</span> events) &#123;</span><br><span class="line">    <span class="comment">// 自分が参加する予定のみを取得する</span></span><br><span class="line">    <span class="keyword">if</span>(event.getMyStatus()===<span class="string">"YES"</span> ||event.getMyStatus()===<span class="string">"OWNER"</span> || event.getMyStatus()===<span class="string">"MAYBE"</span>) &#123;</span><br><span class="line">      message += INDENT+event.getTitle()+<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 明日の予定(参加・主催・未定のみ表示)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> </span>予定の文字列 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTomorrowCal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tomorrowCal = CalendarApp.getCalendarById(MY_CAL_ID);</span><br><span class="line">  <span class="keyword">let</span> tomorrow = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  tomorrow.setDate(tomorrow.getDate()+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> events = tomorrowCal.getEventsForDay(tomorrow);</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> event <span class="keyword">of</span> events) &#123;</span><br><span class="line">    <span class="comment">// 自分が参加する予定のみを取得する</span></span><br><span class="line">    <span class="keyword">if</span>(event.getMyStatus()===<span class="string">"YES"</span> ||event.getMyStatus()===<span class="string">"OWNER"</span> || event.getMyStatus()===<span class="string">"MAYBE"</span>) &#123;</span><br><span class="line">      message += INDENT+event.getTitle()+<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Slack×GASを利用した日報テンプレートBOTを作成しました。日々のタスクの自動化・整理の参考になれば嬉しいです。</p><p>余談ですが、Slackは投稿するときにアイコンがスタンプから選べるのが可愛いです。Google ChatのBOTを作った時は、アイコン画像のurlを作るのに苦労したので気軽に可愛いアイコンが付けられるのはそれだけでテンションが上がりました！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;フューチャー夏休み自由研究連載&lt;/a&gt;11本目の記事です&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Slack" scheme="https://future-architect.github.io/tags/Slack/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="BOT" scheme="https://future-architect.github.io/tags/BOT/"/>
    
      <category term="GAS" scheme="https://future-architect.github.io/tags/GAS/"/>
    
  </entry>
  
  <entry>
    <title>ぼくのなつやすみ5 -Knativeを知ろう-</title>
    <link href="https://future-architect.github.io/articles/20200814/"/>
    <id>https://future-architect.github.io/articles/20200814/</id>
    <published>2020-08-13T15:00:00.000Z</published>
    <updated>2020-08-18T07:24:55.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG所属の<a href="https://twitter.com/famipapamart" target="_blank" rel="noopener">村田</a>です。</p><p><a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休み自由研究連載</a>10本目の記事です。今回は夏休みの自由研究企画ということで、Cloud RunのベースであるKnativeを触ってみたいと思います！</p><h1 id="実際に触ってみる"><a href="#実際に触ってみる" class="headerlink" title="実際に触ってみる"></a>実際に触ってみる</h1><h2 id="今回利用した各コンポーネントのバージョン"><a href="#今回利用した各コンポーネントのバージョン" class="headerlink" title="今回利用した各コンポーネントのバージョン"></a>今回利用した各コンポーネントのバージョン</h2><p>利用したコンポーネントとバージョンは以下です。記事投稿時点（2020.08.14）での最新バージョンを利用しています。</p><table><thead><tr><th align="left">コンポーネント</th><th align="left">バージョン</th></tr></thead><tbody><tr><td align="left">Kubernetes (GKE)</td><td align="left">1.17.8-gke.17</td></tr><tr><td align="left">Knative (Serving)</td><td align="left">v0.16.0</td></tr><tr><td align="left">kn</td><td align="left">v0.16.0</td></tr><tr><td align="left">Istio</td><td align="left">v1.6.8</td></tr></tbody></table><h2 id="Kubernetes-Clusterの構築"><a href="#Kubernetes-Clusterの構築" class="headerlink" title="Kubernetes Clusterの構築"></a>Kubernetes Clusterの構築</h2><p>今回はKnativeが主役なのでクラスタはGKEを使ってさくっと構築してしまいます。</p><p>なるべく最新に近いバージョンを使いたいのでRelease ChannelをRapid Channelに設定。<br><img src="/images/20200814/image.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>課金を抑えるためにPreemptibleインスタンスに設定。<br><img src="/images/20200814/image_2.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>Istioは自前インストールしたいので <code>Enable Istio</code> のオプションにはチェックを入れないように。<br><img src="/images/20200814/image_3.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>上記以外の設定はデフォルトのままでクラスタを構築します。（名称は <code>my-summer</code> としました）<br>また、以降の手順にて <code>kubectl</code> コマンドを使うため、手元の端末で設定しておきます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud container clusters get-credentials my-summer --zone &lt;YOUR_ZONE&gt; --project &lt;YOUR_PROJECT_ID&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Knativeのインストール"><a href="#Knativeのインストール" class="headerlink" title="Knativeのインストール"></a>Knativeのインストール</h2><p>次にKnativeのインストールを進めます。</p><blockquote><p>Knative v0.16.0 requires a Kubernetes cluster v1.16 or newer</p></blockquote><p><a href="https://knative.dev/docs/install/any-kubernetes-cluster/" target="_blank" rel="noopener">https://knative.dev/docs/install/any-kubernetes-cluster/</a><br>とありますが、今回利用するGKEバージョンは <code>1.17.8-gke.17</code> なので問題なさそうです。</p><p>以下のコマンドでCRDとcore-componentをインストールします。個々のコンポーネントがどのような役割をしているかまでは追えてないですが、Autoscalingなどベースとなる挙動を支えるコンポーネント群がインストールされます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply --filename https://github.com/knative/serving/releases/download/v0.16.0/serving-crds.yaml</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply --filename https://github.com/knative/serving/releases/download/v0.16.0/serving-core.yaml</span></span><br></pre></td></tr></table></figure><h2 id="Istioのインストール"><a href="#Istioのインストール" class="headerlink" title="Istioのインストール"></a>Istioのインストール</h2><p>次にネットワークレイヤの設定をします。筆者はてっきりIstioが必須かと思ってのですが、執筆時点で <code>Ambassador</code> <code>Contour</code> <code>Gloo</code> <code>Kong</code> <code>Kourier</code> も選択肢にありました。</p><p>筆者はIstioが好きなので今回はIstioを選びました。記事投稿時点(2020.08.14)での最新バージョンである <code>1.6.8</code> をダウンロードします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://istio.io/downloadIstio | sh -</span><br><span class="line">Downloading istio-1.6.8 from https://github.com/istio/istio/releases/download/1.6.8/istio-1.6.8-osx.tar.gz ...</span><br><span class="line">Istio 1.6.8 Download Complete!</span><br><span class="line"></span><br><span class="line">Istio has been successfully downloaded into the istio-1.6.8 folder on your system.</span><br><span class="line"></span><br><span class="line">Next Steps:</span><br><span class="line">See https://istio.io/docs/setup/kubernetes/install/ to add Istio to your Kubernetes cluster.</span><br><span class="line"></span><br><span class="line">To configure the istioctl client tool <span class="keyword">for</span> your workstation,</span><br><span class="line">add the /Users/y-murata/Downloads/istio-1.6.8/bin directory to your environment path variable with:</span><br><span class="line">         <span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/Users/xxx/istio-1.6.8/bin"</span></span><br><span class="line"></span><br><span class="line">Begin the Istio pre-installation verification check by running:</span><br><span class="line">         istioctl verify-install </span><br><span class="line"></span><br><span class="line">Need more information? Visit https://istio.io/docs/setup/kubernetes/install/</span><br></pre></td></tr></table></figure><p>実行バイナリにPATHを通しておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> istio-1.6.8</span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PWD</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>Istioをインストールします。インストール先は <code>~/.kube/config</code> で <code>current-context</code> に設定されているクラスタです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ istioctl install</span><br></pre></td></tr></table></figure><p>ちゃんとIstioのインストールができてそうですね。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE         NAME                                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">istio-system      istio-ingressgateway-6c77d7f498-62dr9                      1/1     Running   0          91s</span><br><span class="line">istio-system      istiod-58f84ffddc-c7mmf                                    1/1     Running   0          110s</span><br><span class="line">istio-system      prometheus-5db67458fb-m8qq6                                2/2     Running   0          90s</span><br><span class="line">knative-serving   activator-76984478f7-9h48r                                 1/1     Running   0          47h</span><br><span class="line">knative-serving   autoscaler-598d974c99-hsblm                                1/1     Running   0          41h</span><br><span class="line">knative-serving   controller-9b998cd47-fx8bk                                 1/1     Running   0          47h</span><br><span class="line">knative-serving   webhook-658874f97-wcr5k                                    1/1     Running   0          41h</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Knativeの設定"><a href="#Knativeの設定" class="headerlink" title="Knativeの設定"></a>Knativeの設定</h2><p>さて、次にKnative Istio Controllerをインストールします。これによりKnativeとIstioが連携可能になります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply --filename https://github.com/knative/net-istio/releases/download/v0.16.0/release.yaml</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/knative-serving-istio created</span><br><span class="line">gateway.networking.istio.io/knative-ingress-gateway created</span><br><span class="line">gateway.networking.istio.io/cluster-local-gateway created</span><br><span class="line">mutatingwebhookconfiguration.admissionregistration.k8s.io/webhook.istio.networking.internal.knative.dev created</span><br><span class="line">validatingwebhookconfiguration.admissionregistration.k8s.io/config.webhook.istio.networking.internal.knative.dev created</span><br><span class="line">secret/istio-webhook-certs created</span><br><span class="line">configmap/config-istio created</span><br><span class="line">deployment.apps/networking-istio created</span><br><span class="line">deployment.apps/istio-webhook created</span><br><span class="line">service/istio-webhook created</span><br></pre></td></tr></table></figure><p>次にDNSの設定をします。本来はしっかりとDNSの設定をするのですが、今回は<a href="http://xip.io/" target="_blank" rel="noopener">xip.io</a>を使用して名前解決を行います。以下のKubernetes Jobで <code>xip.io</code> がDNSのsuffixとして利用されるように設定されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply --filename https://github.com/knative/serving/releases/download/v0.16.0/serving-default-domain.yaml</span><br></pre></td></tr></table></figure><p>少しだけxip.ioについて補足しておくと、例えば <code>10.0.0.1.xip.io</code> というドメインは <code>10.0.0.1</code> と名前解決されることになります。今回はこの仕組みを利用します。</p><p>ここまででServing Componentのインストールは完了です。</p><h2 id="Knative-Servingの動作確認"><a href="#Knative-Servingの動作確認" class="headerlink" title="Knative Servingの動作確認"></a>Knative Servingの動作確認</h2><p>Go製のサンプルアプリがGCRから取得可能なので動作を確認してみます。アプリはKnative CLIの <code>kn</code> から行うのが一番簡単とのことで、筆者のMac端末へはHomebrew経由でインストールしました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew tap knative/client</span><br><span class="line">$ brew install kn</span><br></pre></td></tr></table></figure><p>アプリをデプロイします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kn service create helloworld-go --image gcr.io/knative-samples/helloworld-go --env TARGET=<span class="string">"Go Sample v1"</span></span><br></pre></td></tr></table></figure><p>しっかりPodがデプロイされていることを確認できました！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get po</span><br><span class="line">NAME                                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">helloworld-go-txzsq-1-deployment-758cc788c-46nqt   2/2     Running   0          48s</span><br></pre></td></tr></table></figure><p>立ち上がったアプリへリクエストをなげてみます。まずはエンドポイントの確認から実施するのですが、確認は <code>kn</code> 経由と <code>kubectl</code> 経由の2種類の方法があるようです。</p><p><code>kn</code> 経由の場合は以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ kn service describe helloworld-go</span><br><span class="line"></span><br><span class="line">Name:       helloworld-go</span><br><span class="line">Namespace:  default</span><br><span class="line">Age:        4m</span><br><span class="line">URL:        http://helloworld-go.default.xx.xx.xx.xx.xip.io</span><br><span class="line"></span><br><span class="line">Revisions:  </span><br><span class="line">  100%  @latest (helloworld-go-txzsq-1) [1] (4m)</span><br><span class="line">        Image:  gcr.io/knative-samples/helloworld-go (pinned to 5ea96b)</span><br><span class="line"></span><br><span class="line">Conditions:  </span><br><span class="line">  OK TYPE                   AGE REASON</span><br><span class="line">  ++ Ready                   3m </span><br><span class="line">  ++ ConfigurationsReady     3m </span><br><span class="line">  ++ RoutesReady             3m</span><br></pre></td></tr></table></figure><p><code>kubectl</code> の場合は以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get ksvc helloworld-go</span><br><span class="line">NAME            URL                                                LATESTCREATED           LATESTREADY             READY   REASON</span><br><span class="line">helloworld-go   http://helloworld-go.default.xx.xx.xx.xx.xip.io   helloworld-go-txzsq-1   helloworld-go-txzsq-1   True</span><br></pre></td></tr></table></figure><p>当然ですが <code>kn</code> 経由のほうがアプリのリビジョンなど参照可能な情報がたくさんあります。これによってエンドポイントが分かりました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://helloworld-go.default.xx.xx.xx.xx.xip.io</span><br></pre></td></tr></table></figure><p>リクエストを投げてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://helloworld-go.default.xx.xx.xx.xx.xip.io</span><br><span class="line">Hello Go Sample v1!</span><br></pre></td></tr></table></figure><p>このサンプルアプリは <code>TARGET</code> という環境変数に渡した値を利用して <code>Hello World: ${TARGET}!</code> と返してくるらしいので、期待通りに動作していることが確認できました。</p><p>また、ちゃんとscale-to-zeroの挙動も確認できました。リクエストが途切れてから90秒ほどでPodがTerminatingの状態になり、最終的にPodがKillされることを確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get po</span><br><span class="line">NAME                                               READY   STATUS        RESTARTS   AGE</span><br><span class="line">helloworld-go-txzsq-1-deployment-758cc788c-8b89j   2/2     Terminating   0          94s</span><br><span class="line"></span><br><span class="line">$ kubectl get po</span><br><span class="line">No resources found <span class="keyword">in</span> default namespace.</span><br></pre></td></tr></table></figure><p>もう一度リクエストを投げてみると、レスポンスに少し時間がかかっていた（体感ですが2秒ほど）のでPod起動のリードタイムがかかっていると考えられます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://helloworld-go.default.xx.xx.xx.xx.xip.io</span><br><span class="line">Hello Go Sample v1!</span><br><span class="line"></span><br><span class="line">$ kubectl get po</span><br><span class="line">NAME                                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">helloworld-go-txzsq-1-deployment-758cc788c-ndrdq   1/2     Running   0          6s</span><br></pre></td></tr></table></figure><p>ちなみにPodのREADYは <code>1/2</code> の状態でもレスポンスを返しているみたいだったのでPodの中身をもう少し見てみます。（リクエストから90秒以内に確認コマンドを打つ必要があるので注意してください）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod helloworld-go-txzsq-1-deployment-758cc788c-lg8w4</span><br><span class="line">...</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From                                               Message</span><br><span class="line">  ----    ------     ----  ----                                               -------</span><br><span class="line">  Normal  Scheduled  17s   default-scheduler                                  Successfully assigned default&#x2F;helloworld-go-txzsq-1-deployment-758cc788c-lg8w4 to gke-my-summer-default-pool-e721bfa1-gpd8</span><br><span class="line">  Normal  Pulled     16s   kubelet, gke-my-summer-default-pool-e721bfa1-gpd8  Container image &quot;gcr.io&#x2F;knative-samples&#x2F;helloworld-go@sha256:5ea96ba4b872685ff4ddb5cd8d1a97ec18c18fae79ee8df0d29f446c5efe5f50&quot; already present on machine</span><br><span class="line">  Normal  Created    16s   kubelet, gke-my-summer-default-pool-e721bfa1-gpd8  Created container user-container</span><br><span class="line">  Normal  Started    16s   kubelet, gke-my-summer-default-pool-e721bfa1-gpd8  Started container user-container</span><br><span class="line">  Normal  Pulled     16s   kubelet, gke-my-summer-default-pool-e721bfa1-gpd8  Container image &quot;gcr.io&#x2F;knative-releases&#x2F;knative.dev&#x2F;serving&#x2F;cmd&#x2F;queue@sha256:ab38418f2e13dfc21d48c64af0589f4eae5c40fc34a5e02f48b24b7156391d22&quot; already present on machine</span><br><span class="line">  Normal  Created    16s   kubelet, gke-my-summer-default-pool-e721bfa1-gpd8  Created container queue-proxy</span><br><span class="line">  Normal  Started    15s   kubelet, gke-my-summer-default-pool-e721bfa1-gpd8  Started container queue-proxy</span><br></pre></td></tr></table></figure><p>Pod内には <code>user-container</code> と <code>queue-proxy</code> の2つのContainerが起動しますが、 <code>user-container</code> が起動した時点でレスポンスの返却はできてるみたいですね。</p><p>調べてみたところ <code>queue-proxy</code> は <code>user-container</code> のサイドカーコンテナとしてデプロイされるもので、プロキシとしてアプリケーションへのトラフィック量を監視する役割を担うようです。</p><blockquote><p>The queue-proxy’s main purpose is to measure and limit concurrency to the user’s application.</p></blockquote><p><a href="https://github.com/knative/serving/blob/d7bea3390c9fca2713c05b3bbd83690d430c7cfc/docs/scaling/SYSTEM.md" target="_blank" rel="noopener">https://github.com/knative/serving/blob/d7bea3390c9fca2713c05b3bbd83690d430c7cfc/docs/scaling/SYSTEM.md</a></p><p><code>queue-proxy</code> の情報は <code>autoscaler</code> というコンポーネントが収集し、Podのスケールサイズ決定に利用されています。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get service -n knative-serving</span></span><br><span class="line">NAME                     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                           AGE</span><br><span class="line">activator-service        ClusterIP   10.20.8.213    &lt;none&gt;        9090/TCP,8008/TCP,80/TCP,81/TCP   4d6h</span><br><span class="line">autoscaler               ClusterIP   10.20.14.196   &lt;none&gt;        9090/TCP,8008/TCP,8080/TCP        4d6h</span><br><span class="line">controller               ClusterIP   10.20.10.247   &lt;none&gt;        9090/TCP,8008/TCP                 4d6h</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はKnativeに触ってみましたが、「Cloud RunはKnativeベースである」というふわっとした理解だった部分について、より具体的なイメージが湧きました。「Cloud RunはきっとKnativeをいい感じにラップしてるんだろうな」と思っていましたが、触ってみた感じだとあまりラップ層は分厚くなく割と素に近い状態で使われているのではと感じました。</p><p>また、個人的に一番学びだったのは「KnativeにとってIstioは必須ではない」という部分です。勝手にKnativeはIstioベースのサービスメッシュ機構に依存するものだと思っていたのですがそれは違いました。</p><p>最近はクラウドベンダーからマネージドサービスとして提供されるOSSも多いですが、あえて自前での構築を試してみると意外な発見があって面白いですね！！</p><p>さて、次回のエントリーは新人の仁木さんが担当されます！仁木さんは研修中に競プロのバーチャルコンテストを企画しちゃったスーパーな新人さんです。ぜひご期待ください！</p><p><a href="https://note.future.co.jp/n/nda51c959f75a" target="_blank" rel="noopener">入社１か月の新人が競技プログラミングのバーチャルコンテストを企画するまで</a></p><p>また、本記事で触れたCloud Run・Istioについては以下のような記事もあがっているので読んでみてください。</p><ul><li><a href="https://future-architect.github.io/articles/20200207/">GCP連載#3 Goでサーバーレスな管理画面アプリを作る</a></li><li><a href="https://future-architect.github.io/articles/20200206/">GCP連載#2 Istio on GKEではじめるサービスメッシュ</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG所属の&lt;a href=&quot;https://twitter.com/famipapamart&quot; target=
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
      <category term="Istio" scheme="https://future-architect.github.io/tags/Istio/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="Knative" scheme="https://future-architect.github.io/tags/Knative/"/>
    
  </entry>
  
  <entry>
    <title>GCPのRegion間レイテンシからサービスのRegion集約を考察する</title>
    <link href="https://future-architect.github.io/articles/20200813/"/>
    <id>https://future-architect.github.io/articles/20200813/</id>
    <published>2020-08-12T15:00:00.000Z</published>
    <updated>2020-08-18T07:24:55.099Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休み自由研究連載</a>の9回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニットの西田と申します。</p><p>業務では <code>GCP</code> のインフラの設計/構築/運用を担当しております。私は前職でネットワーク領域のキャリアが長かった事もあり、現職では <code>GCP</code> の中でも特にネットワークに関する部分を見ています。今回の自由研究もそれに関連する考察をしていきます。</p><h1 id="記事について"><a href="#記事について" class="headerlink" title="記事について"></a>記事について</h1><p>クラウド上で、ワールドワイドのサービスを作るとき、<strong>『どれくらいの密度でどの Region にサーバを立てればよいのか？』</strong>って、悩みませんか？インターネット向けのWebサービスだったら <code>CDN</code> で対処すれば基本的にはOKですが、イントラネットだけからアクセスさせたい社内サービス、Backend 系のサービス、Webサービスではないアプリケーションなどはインスタンスを用意する必要が出てきますよね。<br>選択肢としては以下です。</p><ul><li>全リージョンにサーバを構築する<ul><li>日本の場合、東京、大阪にそれぞれ構築する</li></ul></li><li>近傍の国を1つのリージョンにまとめる<ul><li>日本の場合、東京だけに集約する</li></ul></li></ul><p>今回は、自由研究という事で、日頃業務で使っている <code>GCP</code> を題材にして、ネットワークの観点から考察してみようと思います。先に申し上げておきますと、一観点からの考察なので、実際のサービスが提供しているSLAにマッチするかどうかは別問題なので、そこはご容赦ください🙇‍♂️</p><h1 id="自由研究で考察する観点"><a href="#自由研究で考察する観点" class="headerlink" title="自由研究で考察する観点"></a>自由研究で考察する観点</h1><p>ネットワークの観点と言っても、いくつかありますよね。</p><ul><li>スループット：<code>〇Gbps</code> などの帯域の話。『ギガがなくなった』とかのギガとは少し違います。</li><li>レイテンシ：パケットの往復の時間</li><li>ジッター：上記の時間の揺らぎ。早いときと遅いときのばらつき度合い</li></ul><p>今回は、この中でレイテンシだけに注目して考察します。<br>（データ量がそこそこあるサービスの場合はスループットも気にするべきですが、本記事ではレイテンシのみに注目）</p><h1 id="GCP-のリージョンとは？"><a href="#GCP-のリージョンとは？" class="headerlink" title="GCP のリージョンとは？"></a>GCP のリージョンとは？</h1><p>こちらに世界地図とネットワークケーブルの概要が掲載されております。<br><a href="https://cloud.google.com/about/locations?hl=ja#network" target="_blank" rel="noopener">https://cloud.google.com/about/locations?hl=ja#network</a><br>この線を通ってパケットがやり取りされるわけですが、近いところは早く応答が返ってくるし、遠いところは応答が遅いという事です。<br>では、サービス目線で言うと、どれくらい集約できるんでしょうかね？</p><h1 id="集約する基準"><a href="#集約する基準" class="headerlink" title="集約する基準"></a>集約する基準</h1><p>まず、集約する基準を決めておきます。<br>かなり感覚論ですし、サービスの種類や作りにも当然依存しますが、大体私の経験上はこれくらいです。</p><table><thead><tr><th align="left">レイテンシ</th><th align="left">日常使用で同程度なモノ</th><th align="left">体感</th></tr></thead><tbody><tr><td align="left">20ms 以下</td><td align="left">固定の光回線</td><td align="left">とても速い。さくさく</td></tr><tr><td align="left">60ms 以下</td><td align="left">スマホ4Gくらい</td><td align="left">まぁこれくらいは我慢出来る</td></tr><tr><td align="left">それ以上</td><td align="left">4Gで遅い時/3G利用など</td><td align="left">これは遅い…使いたくない</td></tr></tbody></table><p>なので、<strong><code>60ms</code> までは集約可能</strong>と判断する事にします。<br>※重ねてになりますが、提供するサービスの種類/作りにこの基準は大きく依存します。音声系・映像系だと遅いと致命的な影響を受けますが、ファイルサーバの様なサービスだともう少し基準を下げられる、などはあり得ます。</p><h1 id="GCP-の全-Region-間のレイテンシを計測する"><a href="#GCP-の全-Region-間のレイテンシを計測する" class="headerlink" title="GCP の全 Region 間のレイテンシを計測する"></a>GCP の全 Region 間のレイテンシを計測する</h1><h3 id="計測対象"><a href="#計測対象" class="headerlink" title="計測対象"></a>計測対象</h3><p>こちらの <a href="https://cloud.google.com/compute/docs/regions-zones?hl=ja" target="_blank" rel="noopener">Compute Engine リージョンとゾーン</a> に記載の全Region を対象にします。<br>※すいません、ムンバイだけ、QuotaがデフォルトでCPUS:0となっており、上げるリクエストを出したんですが、拒否されてしまいました。その関係で、ムンバイだけ計測が出来ませんでした🙇‍♂️<br><img src="/images/20200813/2020-08-02_233921.png" alt=""></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li>フルメッシュで計測</li><li>Ping を 100ms 毎に 100 回打って、その返答の平均値</li></ul><p>※インスタンス構築のための <code>Terraform</code> コード、計測のためのスクリプトはAppendixに載せておきます。<br>　スクリプトは並列処理をするべきでした。そこはちょっと作り足りない感があります。</p><h3 id="計測結果"><a href="#計測結果" class="headerlink" title="計測結果"></a>計測結果</h3><p>計測結果は以下です。</p><ul><li>青：20ms。サクサク</li><li>黄：60ms。ギリギリ我慢できるレベル</li><li>赤：それ以上。これはサービスとしてはよろしくない<br><img src="/images/20200813/2020-08-02_231622.jpg" alt=""></li></ul><h1 id="考察"><a href="#考察" class="headerlink" title="考察"></a>考察</h1><p>考察に当たっては、少しを前提を置きます。</p><ul><li>対象となる企業は、グローバル展開している日本企業（<code>Japanese Multinational Corporations</code>）であり、Japan に Global Headquarters(<code>GHQ</code>) が存在する。<ul><li>人数的には、Japan が最も従業員/顧客が多い。</li></ul></li><li>各国の支社/支部がイントラネットを通じて社内向けのサービスにアクセスする。</li></ul><p>割と現実的な前提ですよね。その前提を元に、考えると、以下の様になります。</p><ul><li>東京：日本/韓国/台湾/香港を集約（台湾/香港は、香港に別だしでも良い秒数）<ul><li>GHQがあるので、まずはココを起点に考えます。</li></ul></li><li>シンガポール：東南アジア地域をカバー</li><li>オーストラリア：オセアニア地域。シンガポールまで結構遠いんですね。</li><li>ドイツ：ヨーロッパ地域。（北欧だけは別だしでも良い秒数）</li><li>米国アイオワ：北アメリカ地域。（東西で分けても良い秒数）</li><li>ブラジル</li></ul><p>まぁ、なんていうか。。。『まぁそうだよね』感のある考察になりますね。。。<br>実際、これくらいをベースにリージョンを集約している事が多いんじゃないかと思います。そこに対して、レイテンシという観点での一つの裏付けにはなったかなと思います。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>今回は『自由研究』という事で、日頃使っているツールに関して、少し深掘ってみました。<br>他にもルーティングに関する考察や、Peering, HA VPN の使い分けに関する考察も自分の中ではあるので、どこかで深堀りしていければと思います。</p><h1 id="ついでに-GCPのスループットについて"><a href="#ついでに-GCPのスループットについて" class="headerlink" title="ついでに(GCPのスループットについて)"></a>ついでに(GCPのスループットについて)</h1><p>理論値というか、UDPベースではこの様になります。</p><ul><li>インスタンス間のスループットは、<code>2Gbps/CPU</code> となる。上限は 8CPU の <code>16Gbps</code><ul><li>n1-standard-1 : <code>2 Gbps</code></li><li>n1-standard-4 : <code>8 Gbps</code></li><li>n1-standard-8 : <code>16 Gbps</code>（以降、CPUを増やしてもスループットは増えない）</li></ul></li></ul><p>※TCP ベースだと、TCPのフロー制御の関係で上記ほどの数値を出すためにはOSのパラメータの調整が必要になります。</p><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="Terraform-コード"><a href="#Terraform-コード" class="headerlink" title="Terraform コード"></a>Terraform コード</h2><figure class="highlight sh"><figcaption><span>gce.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"GCE_instances"</span> &#123;</span><br><span class="line">  count        = length(local.gce_instances_list)</span><br><span class="line">  name         = local.gce_instances_list[count.index].name</span><br><span class="line">  machine_type = <span class="string">"f1-micro"</span></span><br><span class="line">  zone         = local.gce_instances_list[count.index].zone</span><br><span class="line">  project      = local.project.id</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    auto_delete = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">source</span>      = google_compute_disk.GCE_disks[count.index].self_link</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    network = google_compute_network.test_network.name</span><br><span class="line">    access_config &#123;</span><br><span class="line">      // Ephemeral IP</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  service_account &#123;</span><br><span class="line">    email  = google_service_account.nw_tester.email</span><br><span class="line">    scopes = [<span class="string">"cloud-platform"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  metadata = &#123;</span><br><span class="line">    <span class="built_in">enable</span>-oslogin = <span class="string">"true"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_disk"</span> <span class="string">"GCE_disks"</span> &#123;</span><br><span class="line">  count   = length(local.gce_instances_list)</span><br><span class="line">  name    = <span class="string">"<span class="variable">$&#123;local.gce_instances_list[count.index].name&#125;</span>-disk"</span></span><br><span class="line">  project = local.project.id</span><br><span class="line">  zone    = local.gce_instances_list[count.index].zone</span><br><span class="line">  <span class="built_in">type</span>    = <span class="string">"pd-standard"</span></span><br><span class="line">  size    = 20</span><br><span class="line">  image   = <span class="string">"centos-cloud/centos-8"</span></span><br><span class="line"></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    ignore_changes = [labels]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>network.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_network"</span> <span class="string">"test_network"</span> &#123;</span><br><span class="line">  project                 = local.project.id</span><br><span class="line">  name                    = <span class="string">"test-network"</span></span><br><span class="line">  auto_create_subnetworks = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_firewall"</span> <span class="string">"ingress_test_network_iap"</span> &#123;</span><br><span class="line">  project = local.project.id</span><br><span class="line">  name    = <span class="string">"ingress-test-network-iap"</span></span><br><span class="line">  network = google_compute_network.test_network.self_link</span><br><span class="line"></span><br><span class="line">  direction = <span class="string">"INGRESS"</span></span><br><span class="line">  priority  = 1000</span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">"tcp"</span></span><br><span class="line">    ports    = [<span class="string">"22"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  source_ranges = [<span class="string">"35.235.240.0/20"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_firewall"</span> <span class="string">"ingress_test_network_internal"</span> &#123;</span><br><span class="line">  project = local.project.id</span><br><span class="line">  name    = <span class="string">"ingress-test-network-internal"</span></span><br><span class="line">  network = google_compute_network.test_network.self_link</span><br><span class="line"></span><br><span class="line">  direction = <span class="string">"INGRESS"</span></span><br><span class="line">  priority  = 1000</span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">"all"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  source_ranges = [<span class="string">"10.0.0.0/8"</span>, <span class="string">"172.16.0.0/12"</span>, <span class="string">"192.168.0.0/16"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>service_account.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_service_account"</span> <span class="string">"nw_tester"</span> &#123;</span><br><span class="line">  project      = local.project.id</span><br><span class="line">  account_id   = <span class="string">"nw-tester"</span></span><br><span class="line">  display_name = <span class="string">"nw-tester"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_project_iam_member"</span> <span class="string">"nw_tester"</span> &#123;</span><br><span class="line">  project = local.project.id</span><br><span class="line">  member  = <span class="string">"serviceAccount:<span class="variable">$&#123;google_service_account.nw_tester.email&#125;</span>"</span></span><br><span class="line">  role    = <span class="string">"roles/compute.viewer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>veriable.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  project = &#123;</span><br><span class="line">    id = <span class="string">"project_id"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // GCE Instances</span><br><span class="line">  gce_instance_name = <span class="string">"instance-test-nsd"</span></span><br><span class="line">  gce_instances_list = [</span><br><span class="line">    &#123; region = <span class="string">"asia-northeast1"</span>, zone = <span class="string">"asia-northeast1-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-asia-northeast1-a"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"asia-northeast1"</span>, zone = <span class="string">"asia-northeast1-b"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-asia-northeast1-b"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"asia-northeast1"</span>, zone = <span class="string">"asia-northeast1-c"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-asia-northeast1-c"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"asia-northeast2"</span>, zone = <span class="string">"asia-northeast2-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-asia-northeast2-a"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"asia-northeast3"</span>, zone = <span class="string">"asia-northeast3-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-asia-northeast3-a"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"asia-east1"</span>, zone = <span class="string">"asia-east1-b"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-asia-east1-b"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"asia-east2"</span>, zone = <span class="string">"asia-east2-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-asia-east2-a"</span> &#125;,</span><br><span class="line">//    &#123; region = <span class="string">"asia-south1"</span>, zone = <span class="string">"asia-south1-c"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-asia-south1-c"</span> &#125;, </span><br><span class="line">    &#123; region = <span class="string">"asia-southeast1"</span>, zone = <span class="string">"asia-southeast1-b"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-asia-southeast1-b"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"asia-southeast2"</span>, zone = <span class="string">"asia-southeast2-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-asia-southeast2-a"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"australia-southeast1"</span>, zone = <span class="string">"australia-southeast1-b"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-australia-southeast1-b"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"europe-north1"</span>, zone = <span class="string">"europe-north1-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-europe-north1-a"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"europe-west1"</span>, zone = <span class="string">"europe-west1-b"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-europe-west1-b"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"europe-west2"</span>, zone = <span class="string">"europe-west2-c"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-europe-west2-c"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"europe-west3"</span>, zone = <span class="string">"europe-west3-c"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-europe-west3-c"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"europe-west4"</span>, zone = <span class="string">"europe-west4-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-europe-west4-a"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"europe-west6"</span>, zone = <span class="string">"europe-west6-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-europe-west6-a"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"northamerica-northeast1"</span>, zone = <span class="string">"northamerica-northeast1-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-northamerica-northeast1-a"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"southamerica-east1"</span>, zone = <span class="string">"southamerica-east1-b"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-southamerica-east1-b"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"us-central1"</span>, zone = <span class="string">"us-central1-c"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-us-central1-c"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"us-east1"</span>, zone = <span class="string">"us-east1-b"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-us-east1-b"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"us-east4"</span>, zone = <span class="string">"us-east4-c"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-us-east4-c"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"us-west1"</span>, zone = <span class="string">"us-west1-b"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-us-west1-b"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"us-west2"</span>, zone = <span class="string">"us-west2-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-us-west2-a"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"us-west3"</span>, zone = <span class="string">"us-west3-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-us-west3-a"</span> &#125;,</span><br><span class="line">    &#123; region = <span class="string">"us-west4"</span>, zone = <span class="string">"us-west4-a"</span>, name = <span class="string">"<span class="variable">$&#123;local.gce_instance_name&#125;</span>-us-west4-a"</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>versions.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_version = <span class="string">"&gt;= 0.12"</span></span><br><span class="line">&#125;</span><br><span class="line">provider <span class="string">"google"</span> &#123;</span><br><span class="line">  version = <span class="string">"~&gt; 3.30.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="各種script"><a href="#各種script" class="headerlink" title="各種script"></a>各種script</h2><figure class="highlight sh"><figcaption><span>ping-all-instances-in-VPC.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">project_name=<span class="string">""</span></span><br><span class="line">vpc_name=<span class="string">"test-network"</span></span><br><span class="line">ping_count=100</span><br><span class="line">src_host=`hostname`</span><br><span class="line">src_zone=`gcloud compute instances list --filter <span class="string">"NAME=<span class="variable">$&#123;src_host&#125;</span>"</span> --format=<span class="string">"csv(ZONE)"</span> | sed <span class="string">'1d'</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;src_host&#125;</span> at `date +<span class="string">"%Y-%m-%d %H:%M:%S.%3N"</span>`</span><br><span class="line"></span><br><span class="line">gce_list=`gcloud compute instances list --filter <span class="string">"networkInterfaces[].network:<span class="variable">$&#123;vpc_name&#125;</span>"</span> --format=<span class="string">"csv(NAME,ZONE,INTERNAL_IP)"</span> | sed <span class="string">'1d'</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> gce <span class="keyword">in</span> <span class="variable">$&#123;gce_list&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  dst_host=`<span class="built_in">echo</span> <span class="variable">$&#123;gce&#125;</span> | cut -d <span class="string">','</span> -f 1` </span><br><span class="line">  dst_zone=`<span class="built_in">echo</span> <span class="variable">$&#123;gce&#125;</span> | cut -d <span class="string">','</span> -f 2`</span><br><span class="line">  dest_ip=`<span class="built_in">echo</span> <span class="variable">$&#123;gce&#125;</span> | cut -d <span class="string">','</span> -f 3`</span><br><span class="line">  rs_ping=`sudo ping -i0.1 <span class="variable">$&#123;dest_ip&#125;</span> -c <span class="variable">$&#123;ping_count&#125;</span> -q`</span><br><span class="line">  avg=`<span class="built_in">echo</span> <span class="variable">$&#123;rs_ping&#125;</span> | sed -r <span class="string">'s/.*rtt min\/avg\/max\/mdev = (.+?)\/(.+?)\/(.+?)\/(.+?)$/\2/'</span>`</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;src_host&#125;</span>,<span class="variable">$&#123;src_zone&#125;</span>,<span class="variable">$&#123;dst_host&#125;</span>,<span class="variable">$&#123;dst_zone&#125;</span>,<span class="variable">$&#123;dest_ip&#125;</span>,<span class="variable">$&#123;avg&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>sh-exec.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Started at `date +<span class="string">"%Y-%m-%d %H:%M:%S.%3N"</span>`</span><br><span class="line"></span><br><span class="line">project_name=<span class="string">""</span></span><br><span class="line">vpc_name=<span class="string">"test-network"</span></span><br><span class="line">shell_file=<span class="string">"ping-all-instances-in-VPC.sh"</span></span><br><span class="line"></span><br><span class="line">format=<span class="string">"csv(NAME,ZONE,INTERNAL_IP)"</span></span><br><span class="line">gce_list=`gcloud compute instances list --filter <span class="string">"networkInterfaces[].network:<span class="variable">$&#123;vpc_name&#125;</span>"</span> --format=<span class="string">"csv(NAME,ZONE)"</span> | sed <span class="string">'1d'</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> gce <span class="keyword">in</span> <span class="variable">$&#123;gce_list&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  host=`<span class="built_in">echo</span> <span class="variable">$&#123;gce&#125;</span> | cut -d <span class="string">','</span> -f 1` </span><br><span class="line">  zone=`<span class="built_in">echo</span> <span class="variable">$&#123;gce&#125;</span> | cut -d <span class="string">','</span> -f 2`</span><br><span class="line"></span><br><span class="line">  gcloud compute scp <span class="variable">$&#123;shell_file&#125;</span> <span class="variable">$&#123;host&#125;</span>:~/<span class="variable">$&#123;shell_file&#125;</span> --zone <span class="variable">$&#123;zone&#125;</span> --tunnel-through-iap</span><br><span class="line">  <span class="built_in">wait</span></span><br><span class="line">  gcloud compute ssh <span class="variable">$&#123;host&#125;</span> --<span class="built_in">command</span>=<span class="string">"sh ~/<span class="variable">$&#123;shell_file&#125;</span>"</span> --zone <span class="variable">$&#123;zone&#125;</span> --tunnel-through-iap</span><br><span class="line">  <span class="built_in">wait</span></span><br><span class="line">  gcloud compute ssh <span class="variable">$&#123;host&#125;</span> --<span class="built_in">command</span>=<span class="string">"rm ~/<span class="variable">$&#123;shell_file&#125;</span>"</span> --zone <span class="variable">$&#123;zone&#125;</span> --tunnel-through-iap</span><br><span class="line">  <span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> Finished at `date +<span class="string">"%Y-%m-%d %H:%M:%S.%3N"</span>`</span><br></pre></td></tr></table></figure><h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh sh-exec.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;フューチャー夏休み自由研究連載&lt;/a&gt;の9回目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Marpで会社のスライドテンプレを作ってみる</title>
    <link href="https://future-architect.github.io/articles/20200812/"/>
    <id>https://future-architect.github.io/articles/20200812/</id>
    <published>2020-08-11T15:00:00.000Z</published>
    <updated>2020-08-13T03:47:35.687Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200812/marp.png" alt=""></p><p><a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休み自由研究連載</a>の8回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。加藤周平です。</p><p>みなさん、Marpはご存じでしょうか？</p><p>Marpとは、Markdown記述形式でスライドを作成するができるツールです。VSCodeにインストールすることで、VSCode上でスライドの作成を行うことができるようになります。まさにあったらいいなが具現化したようなツールです。もちろん、Marpから作成されたスライドはパワポでの再編集も可能で、骨子づくりはMarp、仕上げはパワポ、なんて合わせ技も行えます。</p><p>今回はそんな<a href="https://marp.app/" target="_blank" rel="noopener">Marp</a>を業務でも平常利用できる状態に持っていくべく、スライドのテンプレートの仕込みをやってみたいと思います。</p><p>※基本的なMarpの理解や利用方法は以下の記事を参考にしました。<br><a href="https://qiita.com/tomo_makes/items/aafae4021986553ae1d8" target="_blank" rel="noopener">【VS Code + Marp】Markdownから爆速・自由自在なデザインで、プレゼンスライドを作る</a></p><h2 id="目指すところ"><a href="#目指すところ" class="headerlink" title="目指すところ"></a>目指すところ</h2><p>こんなのをMarp上でも再現できないか、というのを試してみます。<br>※実際にフューチャーで利用されているスライドとは異なります。</p><p><img src="/images/20200812/template.png" alt=""></p><h2 id="MarpをVSCodeにインストール"><a href="#MarpをVSCodeにインストール" class="headerlink" title="MarpをVSCodeにインストール"></a>MarpをVSCodeにインストール</h2><p>VSCodeを開いて拡張機能から「Marp for VSCode」をインストールします。<br><img src="/images/20200812/vscode.png" alt=""></p><h2 id="themeの作成"><a href="#themeの作成" class="headerlink" title="themeの作成"></a>themeの作成</h2><h3 id="CSSファイルの作成"><a href="#CSSファイルの作成" class="headerlink" title="CSSファイルの作成"></a>CSSファイルの作成</h3><p>今回は「future.css」をローカルのデスクトップ上に作成しました。</p><h3 id="パスを通す"><a href="#パスを通す" class="headerlink" title="パスを通す"></a>パスを通す</h3><p><code>Ctrl + ,</code>で設定を開き、<code>Markdown: Styles</code>に作成したCSSファイルのパスを記載します。<br><img src="/images/20200812/path.png" alt=""></p><p>続いて<code>Markdown&gt; Marp:Themes</code>にCSSのファイル名を記載します。<br><img src="/images/20200812/add_css_file.png" alt=""></p><p><code>template.md</code>の<code>front-matter</code>に以下を記載します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">marp:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">future</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>これでCSSファイルとの紐づけが完了です。</p><h3 id="テンプレ作り"><a href="#テンプレ作り" class="headerlink" title="テンプレ作り"></a>テンプレ作り</h3><p>あとはひたすらCSSを書いていくだけです。<br>結果はこうなりました。</p><p><img src="/images/20200812/image.png" alt=""></p><p>う～ん。。。ぽい、けど遠い。。</p><p>コードはこんな感じです。</p><p><code>template.md</code>は以下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">marp:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">future</span></span><br><span class="line"><span class="attr">header:</span> <span class="string">future</span></span><br><span class="line"><span class="attr">footer:</span> <span class="string">Footer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># こんな感じになりました</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p><code>future.css</code>は以下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @theme future */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">'default'</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1920px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">1080px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(./logo.png);</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-position</span>: right top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">color</span>: palevioletred;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, palevioletred, white);</span><br><span class="line"><span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background-color</span>: silver;</span><br><span class="line"><span class="attribute">color</span>: black;</span><br><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">font-style</span>: oblique;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">90px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#09c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="もやっとしたこと-次回への知見"><a href="#もやっとしたこと-次回への知見" class="headerlink" title="もやっとしたこと/次回への知見"></a>もやっとしたこと/次回への知見</h3><ul><li>headerは文字列不要だったのですが、mdの<code>front-matter</code>にて空文字でheaderを宣言することができず、しかたなく<code>future</code>文字列を記載＆backgroundの色に合わせて隠しています</li><li>footerやheaderクラスを複数宣言する方法が分からず、フッターのページ番号の実装までできませんでした（本当はfooterを複数重ねて表現したかった）</li><li>今回はCSSの方で<code>@import default</code>を宣言し、Marpから提供されているスライドのテンプレの上にFutureスライドのテンプレを作っていく、というような作業を行いました。実際にテンプレを作成＆社内配布することを考えた時にはimportせずに1から作っていく方が綺麗かなと思いました</li></ul><h3 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h3><p>大した量を書いてませんがCSSを触るのは新人研修ぶりだったので勉強になりました。</p><p>Markdownで記載したものがすぐスライドに反映される挙動は軽快で、操作していてかなり気持ちが良かったです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200812/marp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;フューチャー夏休み自由研究連載&lt;/a&gt;の8
      
    
    </summary>
    
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="Marp" scheme="https://future-architect.github.io/tags/Marp/"/>
    
      <category term="CSS" scheme="https://future-architect.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>ダイエット食のブレイクスルー！低温調理器を自作して鶏むね肉を美味しく食べる</title>
    <link href="https://future-architect.github.io/articles/20200811/"/>
    <id>https://future-architect.github.io/articles/20200811/</id>
    <published>2020-08-10T15:00:00.000Z</published>
    <updated>2020-08-11T02:24:26.907Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休みの自由研究連載</a>の7回目です。</p><p>こんにちは。筒井です。</p><p>「コロナ太り」という単語をよく目にする今日この頃ですが、皆さんのお腹の具合はいかがでしょうか。</p><p>これからダイエットに取り組もうという方は、おそらく鶏むね肉さんのお世話になるかと思います。鶏むね肉は高たんぱく質で、皮を剥いでしまえば脂質も低い食材です。しかし、調理方法に一工夫加えないとぱさついた食感になってしまうデメリットがありました。</p><p>しかしここ数年、低温調理、あるいはSous videと呼ばれる調理法が登場し、鶏むね肉がとても美味しく食べられるようになりました。</p><p>市場にはAnovaやBONIQといった専用の製品がありますが、せっかくなので自作することにしました。</p><h2 id="設計と部品選定"><a href="#設計と部品選定" class="headerlink" title="設計と部品選定"></a>設計と部品選定</h2><p>低温調理に必要な機能はシンプルで、40℃～70℃程度の水温をキープするだけです。</p><p>システム全体の構成は以下のようになります。目標温度と測定した水温の差がゼロになるようにヒータの出力を制御します。</p><p><img src="/images/20200811/block_diagram.png" alt=""></p><p>まずヒータには、熱帯魚の水槽用のものを使用しました。温度計は自分でこしらえるので、サーモスタット付きのものは使えません。<br><a href="https://www.yodobashi.com/product/100000001003655227/" target="_blank" rel="noopener">https://www.yodobashi.com/product/100000001003655227/</a><br>（買ったのが結構前なので、販売終了してしまっています。すみません。）</p><p>次に温度計ですが、DS18B20という温度センサを防水加工したものを使用しました。<br><a href="https://www.aliexpress.com/item/32862371307.html" target="_blank" rel="noopener">https://www.aliexpress.com/item/32862371307.html</a></p><p>コントローラにはESP32を使用しました。ゆくゆくはスマホから操作を行うことを見越しての選定です。<br><a href="http://akizukidenshi.com/catalog/g/gM-11819/" target="_blank" rel="noopener">http://akizukidenshi.com/catalog/g/gM-11819/</a> </p><p>コントローラからヒータを制御するには、AC100Vをオン/オフする必要があります。これにはソリッドステートリレーを使用しました。<br><a href="http://akizukidenshi.com/catalog/g/gK-00203/" target="_blank" rel="noopener">http://akizukidenshi.com/catalog/g/gK-00203/</a></p><h2 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h2><p>これらを組み立てたのが以下の写真です。ケースはダイソーで購入した容器です。</p><p><img src="/images/20200811/overview.jpg" alt=""></p><p>SSRは基板付きのキットを購入しましたが、かさばるのでユニバーサル基板に実装してしまいました。実装時の注意点として、絶縁のためにAC100Vの配線はユニバーサル基板上で1コマずつ空けて配線し、ランドを削り取っておくのが良いでしょう。</p><p>また設計のところでは解説しませんでしたが、温度を表示するためのディスプレイを追加しています。</p><p>ざっくりとした接続図は以下のようになります。</p><p><img src="/images/20200811/schematics.png" alt=""></p><p>さらにポンプという新キャラが出てきましたが、これは水を撹拌するためのものです。<br><a href="https://www.amazon.co.jp/dp/B07D29YT2C/" target="_blank" rel="noopener">https://www.amazon.co.jp/dp/B07D29YT2C/</a></p><p>最初は自然対流のみで水温が均一になるかと思ったのですが、思いの外鍋の中で温度差が生じてしまったためポンプを追加しました。</p><h2 id="ソフトウェアの実装"><a href="#ソフトウェアの実装" class="headerlink" title="ソフトウェアの実装"></a>ソフトウェアの実装</h2><p>実装したソフトウェアの一部を抜粋します。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">control</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// DS18B20から温度を取得する</span></span><br><span class="line">  <span class="keyword">uint32_t</span> convTime = ds18b20.requestTemperature();</span><br><span class="line">  <span class="built_in">delay</span>(convTime);</span><br><span class="line">  <span class="keyword">float</span> temperature;</span><br><span class="line">  <span class="keyword">if</span> (ds18b20.getTemperatureC(&amp;temperature) != OK)</span><br><span class="line">  &#123;</span><br><span class="line">    log_e(<span class="string">"Failed to measure temperature."</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  log_i(<span class="string">"Temp = %.4f deg-C"</span>, temperature, temperature);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ディスプレイに温度を表示する</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">16</span>];</span><br><span class="line">  <span class="built_in">sprintf</span>(buf, <span class="string">"%2.1f %lcC"</span>, temperature, <span class="number">0xb0</span>);</span><br><span class="line">  displayTask.displayMessage(buf);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ヒーター制御</span></span><br><span class="line">  <span class="keyword">if</span> (temperature &lt; (target_temp - <span class="number">1</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    acSwitch.turnOn();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (temperature &gt; (target_temp + <span class="number">1</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    acSwitch.turnOff();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ヒーターの制御は、ヒステリシスを持たせたオンオフ制御としています。例えば目標温度を60度とした場合、測定した水温が61度を上回ったときにヒーターをオフに、59度を下回ったときにオンにします。</p><h2 id="調理"><a href="#調理" class="headerlink" title="調理"></a>調理</h2><p><img src="/images/20200811/cooking.jpg" alt=""></p><p>調理中の様子です。乱雑なキッチンですみません。</p><p>バケツに10Lほどの水を張り、そこにジップロックにいれた鶏むね肉と、ヒータ、温度計、ポンプを放り込みます。</p><p>今は10Lのバケツに8Lほどの水で使用していますが、温度を保つ分には200Wのヒータで十分です。しかし、20度ほどの水を60度まで温めるのは不可能と思ったほうがいいかもしれません。我が家は幸い給湯器から60度のお湯が出せるので、それを使用しています。</p><h2 id="実食"><a href="#実食" class="headerlink" title="実食"></a>実食</h2><p>お待ちかねの実食です！</p><p><img src="/images/20200811/chicken.jpg" alt=""></p><p>鶏むね肉の下ごしらえは何もしませんでしたが、とってもやわらかーく仕上がっています。加熱は62度で1時間行い、引き上げ後にジップロック内に軽く塩をして、10分ほど休ませました。</p><p>ソースはねぎ塩にんにくだれです。長ねぎとにんにくをみじん切りにして、ごま油と塩で和えただけの簡単たれですが、病みつきになる美味しさです。にんにくパワーで夏を乗り切りましょう。</p><p>鶏むね肉を丸々1枚（約300g）使ったのでかなりの食べごたえです。それなのに、これ全部食べてもおよそ400kcal！ダイエットにピッタリの高たんぱく食です。<br>（鶏むね肉の皮は剥ぎ取っています。余った皮はまとめて冷凍しておいて、ある程度溜まったら鶏油を作るのがおすすめです。）</p><p><img src="/images/20200811/pork.jpg" alt=""></p><p>こちらは同様に豚バラ肉を65度で3時間加熱したものです。</p><p>脂身がほとんど溶け出しておらず、非常に罪深い食感です。こちらは八角を効かせた東坡肉風のソースに、白髪ねぎと辛子を添えて頂きました。</p><p>脂質が多いのでダイエットには向いていませんが、とても美味しかったです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>自作の低温調理器で、鶏むね肉をとても美味しく食べられました。ダイエット食のブレイクスルーです。</p><p>課題としては、ヒータ出力の200Wが少し力不足なこと、ケーブルの取り回しが煩雑なことがあります。調理に支障はありませんが、使い勝手があまり良くありません。</p><p>今回の製作にかかった費用は以下の通りです。</p><table><thead><tr><th>品目</th><th>金額</th></tr></thead><tbody><tr><td>ヒータ</td><td>\2,200</td></tr><tr><td>温度計</td><td>\150</td></tr><tr><td>ポンプ</td><td>\1,100</td></tr><tr><td>ESP32</td><td>\1,500</td></tr><tr><td>ソリッドステートリレー</td><td>\250</td></tr><tr><td>その他配線材、ケースなど</td><td>\1,000</td></tr></tbody></table><p>合計で<strong>6,200円</strong>でした。</p><p>一方市販品を調べてみると、アイリスオーヤマの低温調理器が1万円を切る価格で売られていました。<br><a href="https://www.amazon.co.jp/dp/B07Z5482Y6" target="_blank" rel="noopener">https://www.amazon.co.jp/dp/B07Z5482Y6</a></p><p>賢明な皆様は、市販品を買ったほうが良いと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;フューチャー夏休みの自由研究連載&lt;/a&gt;の7回目です。&lt;/p&gt;
&lt;p&gt;こんにちは。筒井です。&lt;/p&gt;
&lt;p&gt;「コロナ太り」という単語をよく目にする
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="電子工作" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="Future電子工作部" scheme="https://future-architect.github.io/tags/Future%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C%E9%83%A8/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="ESP32" scheme="https://future-architect.github.io/tags/ESP32/"/>
    
  </entry>
  
  <entry>
    <title>自動売買ツールを自作してみよう</title>
    <link href="https://future-architect.github.io/articles/20200810/"/>
    <id>https://future-architect.github.io/articles/20200810/</id>
    <published>2020-08-09T15:00:00.000Z</published>
    <updated>2020-08-11T07:14:43.627Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休みの自由研究連載</a>の6回目です。</p><h2 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h2><ul><li>所属：テクノロジーイノベーショングループ</li><li>社会人歴： 5年目のITコンサルタント</li><li>好きな言語：Python、Go</li><li>苦手な言語：日本語</li><li>趣味：<ul><li>特定な問題を解くため、技術要素を組み合わせて応用すること<ul><li>例えば、ボードゲームやルービックキューブのようなパズルをモデリングしてプログラミングで解くこと</li></ul></li><li>時間かかる定形作業を自動化すること</li></ul></li></ul><p>夏自由の研究では、<strong>大人たちが大好きな刺激的な「おカネ」の話</strong>をしようと思います。個人プロジェクトとして、IT技術、数学と金融の知識を融合し、FX<a href="https://ja.wikipedia.org/wiki/%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%BC%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3" target="_blank" rel="noopener">バイナリオプション</a>の自動売買ツールを作ります。</p><p><strong>🚧どんなに技術を使っても、ハイリスクであることは相変わらず、損する可能性も十分にあります。本記事への利用についてご注意ください🚧</strong></p><p>本文にもFXバイナリオプションのルールを簡単に説明しますが、どうしてもやってみないとイメージつかない方は、<a href="https://fx-navi.tokyo/category/bo" target="_blank" rel="noopener">こちらの記事</a> も参考ください。証券会社が提供している無料のデモ取引をやってみるのもオススメです。</p><h2 id="自動売買ツールを自作する経緯"><a href="#自動売買ツールを自作する経緯" class="headerlink" title="自動売買ツールを自作する経緯"></a>自動売買ツールを自作する経緯</h2><h3 id="趣味優先"><a href="#趣味優先" class="headerlink" title="趣味優先"></a>趣味優先</h3><p>私はデータを操ることが大好きです。自然からのデータも人間活動におけるデータも収集&amp;分析し、知られていない隠れた知識を解明することが、何よりも楽しいことだと思います。</p><p>学生時代から少しずつ株や投信やFXを試してきましたが、あまり良い資産運用の成績にならず、自分には才能も金運も無いことを自覚しました。時間とお金の無駄にならないように資金管理や投資を自動化し、時間のコストの削減と成績向上に繋げたら良いなと思い始めました。</p><h3 id="失敗談"><a href="#失敗談" class="headerlink" title="失敗談"></a>失敗談</h3><p>今年5月頃、私はFXバイナリオプションをトレードした実履歴です。入金した<strong>15万円</strong>は、1週間でほぼ全損し大失敗でした。<br><img src="/images/20200810/chart.png" alt=""></p><p>後から振り返ると、様々な誤りや感情的な動きを発見しました。</p><p>例えば、22日14:00の操作は、画面上の「買」と「売」ボタンを間違えて逆操作してしまいました。この1ポチったミスだけで、3万円以上の損失が1秒以内に発生。投資は本当に色々な意味のハイリスクですね。</p><p>ちなみに、FXバイナリオプションは判定時刻（普通は数時間以内）のFX通貨ペアの値段は、あるターゲット値段以上になるか、以下になるかを当ててみるゲームです。もちろん、当たりなら賞金が出て、はずれなら当初の参加費を没収されます。</p><p><strong>FXバイナリオプションのルール</strong>を簡単に説明すると、</p><ul><li>1枚の「HIGH」チケットを買うと、特定な時刻にターゲットFX通貨ペア（例えばUSD/JPY）が、もし約束の値段以上なら1000円もらえる、もし逆な場合は0円をもらえ、チケットの購入料を全額損する</li><li>同じように、1枚の「LOW」チケットを買うと、特定な時刻にターゲットFX通貨ペアが、もし特定な値段よりより低いなら1000円もらえる、もし逆な場合は0円をもらえ、チケットの購入料を全額損する</li><li>判定時間までにいつでもチケットを買えますが、それに必要な料金（数円〜1000円）が、ターゲット通貨ペアの値動きなどに影響され、時間と共に変動していく</li></ul><p>上の表に結果欄にある「SETTLED」は、予測があっていた意味で、チケット枚数かける1000円のペイアウトがもらえます。「OUT_THE_MONEY」は、予測が外れ、チケット購入料を全損。値動きの途中で、損切りや利確でも行えます「SELL_BACK」。</p><p>売買の間にFXのスプレッドスプレッドのような値段差は手数料として代価になります。</p><p>上の1週間のトレードに対して、初期損益はゼロからスタートとすると、損益の変化は以下のようなグラフになります。<br><img src="/images/20200810/manual_oper.png" alt=""></p><p>前半、5万円弱儲かる時期もありますが、後半は調子に乗って大額の取引を始め、一気に転落。2、3回ぐらい反発がありましたが裏返すことは無理でした。</p><h3 id="人間性の弱点"><a href="#人間性の弱点" class="headerlink" title="人間性の弱点"></a>人間性の弱点</h3><p>客観的に反省したら、これはまさに人間性の弱点を映っている鏡ではないでしょうか。</p><ul><li>人間は感情に左右される、非理性的な行動を取ること多々でしょう<ul><li>利益を得られる状況では、安定を求めてリスクを回避する。少しだけ評価益になった時、すぐに利確で逃げてしまう</li><li>損失を被る状況では、リスクを負ってでも損失を回避し、その結果、逆に損失拡大してしまう</li><li>よって、いつも益が小さく、損が大きい、それを繰り返している</li></ul></li><li>人間は反応が遅くて冷静に計算したら時間がかかる。少し躊躇したら、利益のチャンスや損切りのタイミングなどすぐに見逃してしまう</li><li>人間はどんなに慎重に操作しても、疲れや不注意でミスで誤操作を避けるのはがどうしても難しいでしょう</li></ul><p><strong>こんな弱い人間、武器を何も持っていないままで戦場に立つのは、勇気ではない、ただの犠牲です！</strong></p><p>武器となる機械で実現した自動売買を使うメリットが明らかですね。</p><ul><li>機械が休まずに、僕が寝ている間でも働いてくれる</li><li>機械が理性的で、我々人間のように感情的に左右されることがない</li><li>同時に複数のパラメータやデータを見ることができ、短時間に反応できる</li></ul><h2 id="チャンスは本当にあるのか"><a href="#チャンスは本当にあるのか" class="headerlink" title="チャンスは本当にあるのか"></a>チャンスは本当にあるのか</h2><h3 id="大数の法則"><a href="#大数の法則" class="headerlink" title="大数の法則"></a>大数の法則</h3><p><strong>機械を使って代行トレードすれば、勝つでしょうと思ったら？ちょっと待ってと！</strong></p><p>敵は人間性だけではないのです。儲けるかどうかは期待値や確率の問題です。カジノでギャンブルのゲームたちは、勝つ確率が明確に計算されて、リターン対リスクの期待値がそもそもマイナスですね。</p><p>「マーチンゲール」という負けたら倍に賭ける方法、「パーレー法」という勝ったら倍に賭ける方法などなど、いろいろストラテジーが存在しますが、みんなカジノに負けてしまいます。</p><p>そもそも期待値がマイナスの不利な儲けは、個別に勝つ確率が確かに0ではないが、ただし長期的に繰り返すほど勝てる希望がなくなります。最終的に大数の法則につかまるわけです。</p><p>売買のスプレッドが存在する時点で、期待値が不利なわけです。言い換えると、ランダムにトレードするなら、売り手と買う手がバランス良い場合、証券会社はカジノの親のように安定な収入が入ってくるわけです。</p><p>敵は数学ですので、武器も数学にあります。</p><p>チケットの値段は判定時刻になるまでずっと変化しているので、勝つ確率とペーアウトの比率も常に変動しているんです。例えば、勝率は90%の標的は、チケット値段が950円、勝つ可能性が高いけれど、勝ったらただプラス50円益、万が一負けたら、マイナス950円損です。実は利益の期待値がマイナスなので、不利な取引です。また、仮に勝率は25%、チケット値段が200円の場合、4分の3の可能性でその200円を損しますが、勝ったら800円を得ます。それは有利なトレードです。チャンスがあれば繰り返し続けるべきです。</p><p>いつも各チケットの予想勝率と今の値段が有利か不利かをリアタイムで計算して、有利の場合しかトレードしないことは、勝ちパターンですね。</p><p>問題の根本は、やっているゲームに（例えばバイナリオプション）、スプレッドに勝てる有利なトレードのチャンスが本当にありますか、それとも、ギャンブルのように、いつもマイナス期待値の罠っだらけですか。</p><p>検証してみないとわからないですね。</p><h3 id="予め習った有用な概念"><a href="#予め習った有用な概念" class="headerlink" title="予め習った有用な概念"></a>予め習った有用な概念</h3><ul><li>分散の長期記憶性に基づいた予測の<a href="https://ja.wikipedia.org/wiki/ARCH%E3%83%A2%E3%83%87%E3%83%AB#GARCH(p,q)%E3%83%A2%E3%83%87%E3%83%AB" target="_blank" rel="noopener">GARCH</a><br>モデルを使って判定時の値段帯に落ちる確率を計算する<ul><li>金融時系列データに対して、値動きの方向より、値動きの分散（ボラティリティ）の予測の精度が高いらしい</li><li>Pythonはさすがデータサイエンティストの大好物、GARCH及び拡張モデルの実装ライブラリまで提供している → <a href="https://pypi.org/project/arch/" target="_blank" rel="noopener">arch</a></li></ul></li><li><a href="https://en.wikipedia.org/wiki/Kelly_criterion" target="_blank" rel="noopener">ケリー基準</a>を使ってトレードは有利なのか不利なのか、有利ならトレードの量を何割にするかを決める<ul><li><code>kelly = win_rate - (1-win_rate) * premium / (1-premium)</code></li><li><code>kelly</code>値は、1回のトレードで手元にある投資用の総資金の割合の基準。それは、損失のリスクを考えた上で、論理上資金を一番効率的に増やす投資の比率である</li><li><code>kelly</code>値は<code>win_rate</code>(勝つ確率)と<code>premium</code>（チケットの料金は950円、ペーアウトは1000円の場合は<code>premium = 950/1000 = 0.95</code>）によって計算された</li><li><code>win_rate</code>&lt;=<code>premium</code>の場合、<code>kelly</code>&lt;=0、それは不利な取引を意味して、手を出さないほうが良い</li><li><code>win_rate</code>が1ではない時、オールインしてはいけない。それは論理上全損のリスクを避けられて、いつまでも裏返す可能性を放棄しない</li></ul></li></ul><p>改めて、その悔しい1週間の手動の取引を振り返って見たらどうかと思い、取引発生時点<strong>以前</strong>の値動き情報をGARCHモデルに投入し、判定時の勝つ確率(<code>win rate</code>)を評価し、理性的な投資比率(<code>kelly</code>)を出してみました。</p><img src="/images/20200810/kelly.png" class="img-middle-size"><p>どうやら汗が出るほどびっくりしました。手動で取引したのは、半分以上が不利な(kelly&lt;0)取引だったことが分かりました。そして、有利な取引に対しても、もっと「正確な」比率で資金を出せば、もっと良い結果になったはずです。悔しくてたまりません。</p><h2 id="自動売買ツールを自作する流れ"><a href="#自動売買ツールを自作する流れ" class="headerlink" title="自動売買ツールを自作する流れ"></a>自動売買ツールを自作する流れ</h2><h3 id="市販より自作"><a href="#市販より自作" class="headerlink" title="市販より自作"></a>市販より自作</h3><p>「自動売買」をグーグルで検索したら、つないで出てくるキーワードは、「比較」、「おすすめ」とかはもちろん出てきますが、なんと「詐欺」、「稼げない」のも出るので、危ない感を楽しめるリスク屋さん向けの雰囲気が湧いています。</p><p>私も市販の自動売買をあまり信用しない派です。なぜなら、みんなが掘りに行く金鉱には、もう金が無いと思うからです。売買シグナルやインジケータは最初はよく効くかもしれませんが、広く知られたら、真似られて利益も山分けになって利益が小さくなるのです。</p><p>自作の良い点をあげます。</p><ul><li>手数料がかからないので、手数料が利益に勝てない心配なし</li><li>中身がすべて把握できて安心</li><li>自作なのでカストマイズしやすく、随時に進化できる</li></ul><h3 id="ターゲットをバイナリオプションに設定"><a href="#ターゲットをバイナリオプションに設定" class="headerlink" title="ターゲットをバイナリオプションに設定"></a>ターゲットをバイナリオプションに設定</h3><p>主流のFXや株の戦場を避けて、ちょっと亜流系のバイナリオプションを対象にしています。<br>理由は下記のようにリストアップします。</p><ul><li>売買や勝負のルールは簡単</li><li>ルールによって、バイナリオプションはハイリスクだが、利益と損失の限界が取引の前にも読める</li><li>ターゲットはFXデータなので、公開性がある</li><li>比較的に値動きの方向より、値動きの分散（ボラティリティ）の予測の精度が高いらしく、バイナリオプションは、値動きの分散の大小の予測でトレード可能（後述のストラドル法）</li><li>リスクとリターンの最大値が操作する前にも読める。比較的に単純なルールなので、自動化しやすいところがある</li><li>自動売買に委ねるが、高頻度の売買操作が不要（1シリアルは例えば2時間で1回の操作のみ）のため、不正操作の理由でアカウントがフリーズされるリスクが減った（ただしゼロリスクではない）</li></ul><h3 id="具体的に実践した流れはこんな感じ"><a href="#具体的に実践した流れはこんな感じ" class="headerlink" title="具体的に実践した流れはこんな感じ"></a>具体的に実践した流れはこんな感じ</h3><ul><li>アカウント開き、やり方やルールを慣れていく（2、3年前から）<br>↓</li><li>データ収集を自動化（今年4~5月から、コロナのGWの暇つぶしでスタート）<br>↓</li><li>画面上の手動操作の代わりに、売買操作の機械化、自動化（5~6月）<br>↓</li><li>予測モデルを導入し、直近の歴史データを使ってシミュレーションを実施（←直近まで）<br>↓</li><li>パラメータ調整しつつ、実運用を試みる（←今ここ）<br>↓</li><li>経済指標などの外部要素の影響を分析し、もう一層モデルの予測精度を向上（将来プラン）</li></ul><p>この自動売買システムが本当に儲けられるか？実績はどうだったの？を報告したかったんですが、まだそのステップに進行していなくて、ちょっと残念です。今回はシミュレーション結果だけ出します。<br>本運用開始してから継続的に報告しようと思います。</p><h3 id="システムの構成はこんな感じ"><a href="#システムの構成はこんな感じ" class="headerlink" title="システムの構成はこんな感じ"></a>システムの構成はこんな感じ</h3><p><img src="/images/20200810/constructure.png" alt=""></p><h4 id="①ポーリングクライアント"><a href="#①ポーリングクライアント" class="headerlink" title="①ポーリングクライアント"></a>①ポーリングクライアント</h4><p>PythonのrequestパッケージのSessionを使って、ログイン後のクッキー情報を保持しながら継続的にAPIを本物クライアントの発信頻度でデータをポーリングするクライアントです。将来的にデータを分析にするため、Elasticsearchを使って溜め込んでいます。</p><p>Kibanaですぐに可視化できるのが便利ですね。</p><p><img src="/images/20200810/polling_client.png" alt=""></p><h4 id="②取引に関するAPIクライアント"><a href="#②取引に関するAPIクライアント" class="headerlink" title="②取引に関するAPIクライアント"></a>②取引に関するAPIクライアント</h4><p>取引命令を出すコンポーネントです。ポーリングのクライアントとほぼ同じ作りですが、管理上の利便さと開発時の誤操作を防ぐため、別コンポネントに分けています。</p><h4 id="③予測モデル"><a href="#③予測モデル" class="headerlink" title="③予測モデル"></a>③予測モデル</h4><p>前述のGARCHライブラリを使って、2〜4時間の履歴データを使って、近い将来の確率をイメージとして、このような情報を出す感じです。</p><p>「次の判定時刻20:20に、USD/JPYはターゲット値段106.6より高い確率は32%、106.6以下の確率は68%」</p><h4 id="④意思決定"><a href="#④意思決定" class="headerlink" title="④意思決定"></a>④意思決定</h4><p>1ターンの中に、資金数や保有できるチケット数の数の上限がありますので、kelly値がプラスになったらすぐに動作するのではなく、全体的なベストを求めたいのです。</p><p>早い段階に決断したら、後からもっと良いチャンスを失うかもしれませんが、ずっと躊躇して決めないままで、過去に戻れないし、最良の停止タイミングを探す<a href="https://ja.wikipedia.org/wiki/%E7%A7%98%E6%9B%B8%E5%95%8F%E9%A1%8C" target="_blank" rel="noopener">秘書問題</a>が参考になるかと思います。<br>そして、いろんなストラテジーやパラメータをシミュレーションして継続的に調整するのです。</p><h4 id="⑤シミュレーション"><a href="#⑤シミュレーション" class="headerlink" title="⑤シミュレーション"></a>⑤シミュレーション</h4><p>Elasticsearchに溜めた過去データは学習の材料になって、どういうストラテジーやパラメータを適用したら儲かるか、そして、過学習にならないように、今回使っているデータだけにフィットするじゃなくて、モデルのパラメータをなるべく減らします。</p><p>GARCHモデルの<a href="https://ja.wikipedia.org/wiki/%E3%83%99%E3%82%A4%E3%82%BA%E6%83%85%E5%A0%B1%E9%87%8F%E8%A6%8F%E6%BA%96" target="_blank" rel="noopener">ベイズ情報量規準 BIC</a>（モデルのパラメータの数が多いほどモデル精度の評価に罰を与える評価基準）を参考しながら、一定の水準以下のものだけ採用する形になります。</p><p>以下はいい加減なパラメータを使ったシミュレーションです。初期10000円の資本金とその後の変化の結果です。</p><p>6月1ヶ月間の実データを使っています。私手動で1週間全損より、1ヶ月間でほぼ全損でしたね。</p><p><img src="/images/20200810/simulation1.png" alt=""></p><p>パラメータを適度に調整して、少し改善された例ですが、まだ右肩下がりのトレンドですね。</p><p><img src="/images/20200810/simulation2.png" alt=""></p><p>以下は、<em>ストラドル戦略</em>と普通の売買のミックスを使ったシミュレーションの資本金の変化の結果です。<br>月末に月初の2.5倍になりました。</p><p><img src="/images/20200810/simulation3.png" alt=""></p><p><em>ストラドル戦略</em>とは、前述の値動きの方向を予測しなくて、値動きの変動（分散やボラティリティ）の量を予測できたら儲かる方法です。</p><h3 id="【補足】ストラドル戦略"><a href="#【補足】ストラドル戦略" class="headerlink" title="【補足】ストラドル戦略"></a>【補足】ストラドル戦略</h3><p>オプション取引の戦略の一つです。</p><p>例えば、<code>USD/JPY 108.7 HIGH</code>と<code>USD/JPY 108.6 LOW</code>の同枚数を購入し、相場が108.6〜108.7の範囲で動くと損失、相場がその範囲外に大きく動いた場合は利益です。</p><p>このストラテジーは、ある程度リスクのヘッジが可能です。もっと大きい意味は、予測モデルを使って、値段の動き方向の精度とは関係なく、値段の分散（ボラティリティ）の予測は、ある程度の精度が出るなら問題ありません。</p><h2 id="注意書き"><a href="#注意書き" class="headerlink" title="注意書き"></a>注意書き</h2><p>バイナリオプションは1アカウントつき買えるロット数は上限がある（ギャンブルとかも一緒）、複利として回せません。つまり、他の金融投資みたいに、儲かったお金を用いて、比率的に拡大していくことは不可能なので、長期的な運用には向いていません。一定規模の資金になったら、配当のように徐々に出金していくのが賢明的ですね。</p><p><strong>どんなに技術を使っても、ハイリスクであることは相変わらず、損する可能性も十分にあります。</strong></p><p>その理由は以下です。</p><ul><li>予測モデルのインプットがあくまで過去のデータだけ、未来に対する予測の精度が有限である</li><li>有利なトレードでも、個別に損することが十分ありうる。続けてやらないと、大数の法則の威力が発揮できない</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>今回自動売買ツールを自作する理由<ul><li>トレーディングは人間性違反で、私もそれに才能がない</li><li>信用しない市販系ツールにお金をかけたくない</li><li>IT技術なら持っており、数学・金融の知識なら勉強できる</li><li>本当に行けるかどうかを探求したい好奇心駆使、何よりも趣味が大事</li></ul></li><li>今回自動売買ツールを必要な知識、技術<ul><li>FXバイナリオプションの概念とルール</li><li>GARCHモデル：分散の長期記憶性に基づいた予測のGARCHモデル</li><li>ベイズ情報量規準：過剰適合を防止のため、モデルの精度をあげる同時にパラメータの数を最小化する用の指標</li><li>Kelly基準：勝率とペーアウトが分かれば、取引が有利か不利かを判別でき、有利な取引に対して何割を賭けたほうが効率的なのが分かる</li><li>ストラドル戦略：値動きの方向の予測を諦め、分散の予測で儲かる手法（経済指標などの開示前に使うのが有効かもしれない　←将来にこの要素を自動取引に取り込むと思います）</li><li>自動化データ収集、変形、分析に必要なIT技術</li><li>丁寧なパラメータ調整、長く続く忍耐</li></ul></li><li>今回自動売買ツールを作った結果<ul><li>手動トレーディングはダメダメでしたが、自動化によって、リターンの期待値がマイナスの不利なトレードを避けられた</li><li>ストラドル戦略などリスクヘッジの手法を併用して、いい結果を得られるシミュレーションをした</li><li>システムの改善をしつつあるが、手動トレードをやめて、完全に自動化するのはこれから。</li></ul></li></ul><p>寝ている間もチャリンチャリンが聞こえるかもしれません。（笑）</p><p><img src="/images/20200810/image.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;フューチャー夏休みの自由研究連載&lt;/a&gt;の6回目です。&lt;/p&gt;
&lt;h2 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Elastic-Stack" scheme="https://future-architect.github.io/tags/Elastic-Stack/"/>
    
      <category term="Kibana" scheme="https://future-architect.github.io/tags/Kibana/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="FinTech" scheme="https://future-architect.github.io/tags/FinTech/"/>
    
      <category term="ElasticSearch" scheme="https://future-architect.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>API Meetup Online #3で限定公開URL（Capability URLs）について話をしてきました。</title>
    <link href="https://future-architect.github.io/articles/20200809/"/>
    <id>https://future-architect.github.io/articles/20200809/</id>
    <published>2020-08-08T15:00:00.000Z</published>
    <updated>2020-08-11T15:23:23.762Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200809/93281_normal.png" class="img-middle-size"><p><a href="https://api-meetup.doorkeeper.jp/events/109648" target="_blank" rel="noopener">API Meetup Online #3</a>での登壇をお誘いをいただいたので、以前から調査していたものの、発表の機会のなかった限定公開URLについて調べていた内容を発表しました。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRLdRFqBXd35VgVUCvrXsn3kN4rUu7HDzIoy0Kibs_ThTD3mnWpagkGkpNY1a7J8uWijf0lX8SdRBo3/embed?start=false&loop=false&delayms=3000" frameborder="0"  width="100%" height="569px" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>Real World HTTPの第3版が出るとしたら（具体的な計画とかはないですが）入れるかも、なネタでした。どちらかというとコンシューマー向けな機能な気がしますが、hipchatは以前、共有したファイルがこのCapability URLsだったという噂も聞きますし、サービスによってはエンプラでも使っているものもあるかもしれません。自分で実装するにしても、利用する側だったりといろんな立場でこの機能に関わる場合に、その安全性を評価する物差しは持っておきたいな、ということで調べました。</p><p>セキュリティ的には、「特定の誰かのファイルを見つける」でも、「誰でもいいからコンテンツを見つける」でも、かなり見つけるのは難しいんじゃないか、というのが所感です。ただ、「誰がいつアクセスしたのか」という証跡が必要な場合には合わないかもね、というのもありますし、ユーザー情報などをやりとりしないで「知っている」という条件だけで他のシステムとの連携が簡単に行えたりもするので、使えるかどうかはシステムごとの要件次第ですね。その要件と照らし合わせて使えるかどうか判断するためにもまとまった資料として価値があるんじゃないかと思います。</p><p>当日質問された、キーの衝突に関してですが、生成したキーはDBに登録しておく必要があります。これは本番のコンテンツを参照するのにも必要ですし、誰が生成したものか、リソースオーナーとの紐付けのためにも必要です。あとからオーナーが共有を解除したりとかもありますからね。そのため、DBに保存しておいて、それとの重複チェックは可能です。参考のGo実装を貼っておきます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"io"</span></span><br><span class="line">   <span class="string">"crypto/rand"</span></span><br><span class="line">   <span class="string">"encoding/base64"</span></span><br><span class="line">   <span class="string">"image"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//本当はDBとかを使う</span></span><br><span class="line"><span class="keyword">var</span> existingImages := <span class="keyword">map</span>[<span class="keyword">string</span>]image.Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genPublicKey</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    baseCode := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">30</span>)</span><br><span class="line">    <span class="comment">// 重複した公開URLを生成しないように、ループしてぶつからないキーが確実に生成されるようにする</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        io.ReadFull(rand, baseCode)</span><br><span class="line">        publicKey := base64.StdEncoding.EncodeToString(baseCode)</span><br><span class="line">        <span class="keyword">if</span> _, ok := existingImages[publicKey]; !ok &#123;</span><br><span class="line">            <span class="keyword">return</span> publicKey;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerImage</span><span class="params">(img image.Image)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    key := genPublicKey()</span><br><span class="line">    existingImages[key] = img</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"https://example.com/images/"</span> + key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このサンプルは雑にbase64にしていますが、記号が入らないエンコードとしてbase62があります。UUID v4なんだけどbase64でなるべく文字列長を短くするGoライブラリも昔作ってみました。このあたり、どれだけ短くするか、利便性とセキュリティや空間の広さをどうするかはエンジニアリング的にチャレンジが楽しい分野かと思います。どういったID生成ロジックを使ってはいけないか、とかも資料では触れています。</p><p><a href="https://github.com/shibukawa/uuid62" target="_blank" rel="noopener">https://github.com/shibukawa/uuid62</a></p><p>他には、Google CloudのAI系のAPIの発表がありました。仕事や趣味で使うチャンスもあるので知らない内容はなかったのですが、「アンパンマン」を含む音声をリアルタイムにテキスト化し、さらに英語翻訳するというクラウドエースの藏持さんの発表のデモは面白かったです。ウェザーニューズ（ズは濁点）の井原さんの発表も、データ量とかもろもろでその分野での圧倒的な感じがあって良かったです。チャンスがあれば使ってみたい。</p><p>API Meetupの運営のみなさま、発表の機会をいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200809/93281_normal.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://api-meetup.doorkeeper.jp/events/109648&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
      <category term="HTTP" scheme="https://future-architect.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>GoとSuffixArray</title>
    <link href="https://future-architect.github.io/articles/20200807/"/>
    <id>https://future-architect.github.io/articles/20200807/</id>
    <published>2020-08-06T15:00:00.000Z</published>
    <updated>2020-08-11T02:24:20.940Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200807/suffixarray.png" class="img-small-size"><p><a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休みの自由研究連載</a>の5回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG の辻です。</p><p>Go は標準ライブラリが充実しているとよく言われます。標準ライブラリだけで、HTTP サーバを作れたり、暗号化処理や、JSON や CSV といったデータ形式を扱うことができます。<code>go list std | grep -v vendor | wc -l</code> としてパッケージ数を見てみると、約 200 ものパッケージが存在することがわかります。本記事では、その多くの Go の標準ライブラリの中でも、個人的に面白いなと思ったライブラリを紹介したいと思います。<a href="https://golang.org/pkg/index/suffixarray/" target="_blank" rel="noopener">suffixarray</a> パッケージです。</p><p><code>suffixarray</code> パッケージは Suffix Array を扱うライブラリです。<code>suffixarray</code> パッケージの魅力を感じるには、まず Suffix Array とは何か？を知る必要があるでしょう。</p><h2 id="Suffix-Arrayとは"><a href="#Suffix-Arrayとは" class="headerlink" title="Suffix Arrayとは"></a>Suffix Arrayとは</h2><p>Suffix Array はデータ構造の 1 つです。1990 年に Udi Manber, Gene Myers によって考案されました。Suffix Array を用いると、検索したい任意の文字列から、漏れなく高速に文字列を検索できます。全文検索やデータ圧縮といった応用があります。</p><p>Suffix Array は文字列のすべての suffix を辞書順でソートし、それぞれの suffix の元の文字列における開始位置を保持する配列です。長さが n である文字列 T の suffix とは 1 ≦ i ≦ n なる i について T の i 文字目から n 文字目までの部分文字列のことを指します。具体的に <code>banana</code> という文字列で考えてみます。<code>banana</code> のおける suffix は以下の 6 つです。</p><ul><li>banana</li><li>anana</li><li>nana</li><li>ana</li><li>na</li><li>a</li></ul><p>各 suffix の開始位置をあわせて記載すると以下のようになります。</p><table><thead><tr><th align="left">開始位置</th><th>suffix</th></tr></thead><tbody><tr><td align="left">1</td><td>banana</td></tr><tr><td align="left">2</td><td>anana</td></tr><tr><td align="left">3</td><td>nana</td></tr><tr><td align="left">4</td><td>ana</td></tr><tr><td align="left">5</td><td>na</td></tr><tr><td align="left">6</td><td>a</td></tr></tbody></table><p>これらの suffix を辞書順でソートすると以下のようになります。</p><table><thead><tr><th align="left">開始位置</th><th>suffix</th></tr></thead><tbody><tr><td align="left">6</td><td>a</td></tr><tr><td align="left">4</td><td>ana</td></tr><tr><td align="left">2</td><td>anana</td></tr><tr><td align="left">1</td><td>banana</td></tr><tr><td align="left">5</td><td>na</td></tr><tr><td align="left">3</td><td>nana</td></tr></tbody></table><p>よって、<code>banana</code> の文字列における Suffix Array とは [6, 4, 2, 1, 5, 3] という配列になります。suffix の開始位置があれば元の suffix を構成することができ、開始位置から n 文字目までの部分文字列になります。<code>banana</code> における suffix の開始位置が 3 であれば元の suffix は 3 文字目から 6 文字目までの部分文字列であるため、<code>nana</code> という suffix であることがわかります。</p><h3 id="文字列のパターンマッチング"><a href="#文字列のパターンマッチング" class="headerlink" title="文字列のパターンマッチング"></a>文字列のパターンマッチング</h3><p>Suffix Array がどのようなデータ構造であるか分かりました。次に Suffix Array を用いて、文字列をパターンマッチングすることを考えてみます。<code>banana</code> という文字列から <code>an</code> という文字列をパターンマッチングすることを考えてみます。b<font color="Red">an</font><font color="Blue">an</font>a ですから、赤文字である 2 文字目から 3 文字目の <code>an</code> と、青文字である 4 文字目から 5 文字目の <code>an</code> の 2 箇所でマッチします。文字列 T の任意の部分文字列は、その出現位置を開始位置とする T の suffix の prefix です。つまり <code>an</code> であれば suffix <code>ana</code> の prefix である <code>an</code> と suffix  <code>anana</code> の prefix である <code>an</code> です。このように文字列 P を prefix としてもつような、T の suffix を探索することによって、文字列のパターンマッチングができます。Suffix Array は文字列の suffix が辞書順でソートされた suffix の開始位置を保持しているため、二分探索を用いて、高速にパターンマッチングできます。</p><p><code>banana</code> の Suffix Array が求められているとして、Go で探索する実装例を示します。実装上の Suffix Array は 0-indexed とします。</p><ul><li>Suffix Array を二分探索して、一致するすべての suffix を検索する実装例</li></ul><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := <span class="string">"banana"</span></span><br><span class="line">p := <span class="string">"an"</span> <span class="comment">// マッチングしたい文字列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// banana の Suffix Array (0-indexed)</span></span><br><span class="line">sa := []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// strings.Compare の戻り値が 0 よりも大きいうちの最小の index を探索</span></span><br><span class="line">left := sort.Search(<span class="built_in">len</span>(sa), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Compare(t[sa[i]:min(sa[i]+<span class="built_in">len</span>(p), <span class="built_in">len</span>(t))], p) &gt;= <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// strings.Compare の戻り値が 1 である最小の index を探索</span></span><br><span class="line">right := sort.Search(<span class="built_in">len</span>(sa), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Compare(t[sa[i]:min(sa[i]+<span class="built_in">len</span>(p), <span class="built_in">len</span>(t))], p) == <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := left; i &lt; right; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"suffix: %s, match: %s\n"</span>, t[sa[i]:], t[sa[i]:sa[i]+<span class="built_in">len</span>(p)])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">suffix: ana, match: an</span><br><span class="line">suffix: anana, match: an</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/JFNugaoB26N" target="_blank" rel="noopener">https://play.golang.org/p/JFNugaoB26N</a></p><p>このパターンマッチングは元の文字列 T の長さを $n$ として、マッチングしたい文字列 P の長さを $m$ とすると $O(m \log n)$ 時間でマッチングできます。Go の <a href="https://golang.org/pkg/sort/#Search" target="_blank" rel="noopener">sort.Search</a> 関数はソートされた配列やスライスに対して条件を満たす最小の index を二分探索することができます。上記の実装では、suffix における prefix の先頭 <code>len(p)</code> 文字目までの部分文字列とマッチングしたい文字列 <code>p</code> を <a href="https://golang.org/pkg/strings/#Compare" target="_blank" rel="noopener">strings.Compare</a> で比較し、結果が 0 以上と 1 となる最小の index <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>を探索しています。Suffix Array に対して二分探索を行うことによって、パターンマッチングするときは、元の文字列の長さに対して、対数時間でおさえることができます。</p><h2 id="Suffix-Array-の構築"><a href="#Suffix-Array-の構築" class="headerlink" title="Suffix Array の構築"></a>Suffix Array の構築</h2><p>Suffix Array を構築することを考えてみます。ナイーブに考えると、長さ $O(n)$ の文字列 $n$ つをソートすることになります。クイックソートの 1 回あたりの平均計算量 $O(n \log n)$ とあわせて $O(n^2 \log n)$ 時間になります。いかにして効率よく Suffix Array を構築できるかどうかがアルゴリズムのポイントになります。</p><ul><li>ナイーブにソートして構築する実装例</li></ul><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">text := <span class="string">"banana"</span></span><br><span class="line"></span><br><span class="line">d := <span class="built_in">make</span>([]data, <span class="number">0</span>, <span class="built_in">len</span>(text))</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(text); i++ &#123;</span><br><span class="line">d = <span class="built_in">append</span>(d, data&#123;</span><br><span class="line">Index:  i,</span><br><span class="line">Suffix: text[i:],</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort.Slice(d, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">ret := strings.Compare(d[i].Suffix, d[j].Suffix)</span><br><span class="line"><span class="keyword">if</span> ret &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> d &#123;</span><br><span class="line">fmt.Printf(<span class="string">"index: %d, suffix: %s\n"</span>, v.Index, v.Suffix)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> &#123;</span><br><span class="line">Index  <span class="keyword">int</span></span><br><span class="line">Suffix <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">index: 5, suffix: a</span><br><span class="line">index: 3, suffix: ana</span><br><span class="line">index: 1, suffix: anana</span><br><span class="line">index: 0, suffix: banana</span><br><span class="line">index: 4, suffix: na</span><br><span class="line">index: 2, suffix: nana</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/J97GtkfWBZp" target="_blank" rel="noopener">https://play.golang.org/p/J97GtkfWBZp</a></p><p>しかし、構築に $O(n^2 \log n)$ 時間かかるのでは、例えば 10 万文字程度の文字列の Suffix Array を構築するのにとても時間がかかるため、実用的ではありません。</p><ul><li>ManberとMyersのアルゴリズム</li></ul><p>そこで次は Manber と Myers によって示されたアルゴリズムを用いて構築することを考えてみます。基本的な着想はダブリングによるものです。つまり n 文字をソートするときに、まず 1 文字の部分文字列のみをソート、続いて 1 文字の部分文字列でソートした結果を用いて 2 文字の部分文字列をソート、、、と 2k 文字の部分文字列をソートするのに、k 文字の部分文字列でソートした結果を用います。詳しくは蟻本 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> を参照ください。蟻本が手もとにない場合は <a href="https://www.geeksforgeeks.org/suffix-array-set-2-a-nlognlogn-algorithm/" target="_blank" rel="noopener">Suffix Array | Set 2 (nLogn Algorithm)</a> などのページでアルゴリズムを確認ください。本記事では Go による実装のみを示します。ダブリングにより比較回数は $O(\log n)$ 回で 1 回あたりのソートの平均計算量が $O(n \log n)$ ですから、全体では $O(n (\log n)^2)$ 時間のアルゴリズムです。</p><ul><li>蟻本ベースの Go による Suffix Array を構築する実装</li></ul><figure class="highlight go"><figcaption><span>suffixarray.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> suffixarray</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> suffixArray <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// length of input string</span></span><br><span class="line">N <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// input text (ASCII only)</span></span><br><span class="line">Text <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Suffix Array</span></span><br><span class="line">Index []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(text <span class="keyword">string</span>)</span> *<span class="title">suffixArray</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> k <span class="keyword">int</span></span><br><span class="line">n := <span class="built_in">len</span>(text)</span><br><span class="line">rank := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line">sa := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line">tmp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">sa[i] = i</span><br><span class="line"><span class="keyword">if</span> i &lt; n &#123;</span><br><span class="line">rank[i] = <span class="keyword">int</span>(text[i])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rank[i] = <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmp := <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> rank[sa[i]] != rank[sa[j]] &#123;</span><br><span class="line"><span class="keyword">return</span> rank[sa[i]] &lt; rank[sa[j]]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ri, rj := <span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> sa[i]+k &lt;= n &#123;</span><br><span class="line">ri = rank[sa[i]+k]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> sa[j]+k &lt;= n &#123;</span><br><span class="line">rj = rank[sa[j]+k]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ri &lt; rj</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// k 文字についてソートされているところから、2k 文字をソートする</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>; k &lt;= n; k *= <span class="number">2</span> &#123;</span><br><span class="line">sort.Slice(sa, cmp)</span><br><span class="line">tmp[sa[<span class="number">0</span>]] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">tmp[sa[i]] = tmp[sa[i<span class="number">-1</span>]]</span><br><span class="line"><span class="keyword">if</span> cmp(i<span class="number">-1</span>, i) &#123;</span><br><span class="line">tmp[sa[i]]++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">rank[i] = tmp[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;suffixArray&#123;</span><br><span class="line">N:     n,</span><br><span class="line">Text:  text,</span><br><span class="line">Index: sa,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>banana</code> の文字列で試しにテストしてみましょう。</p><figure class="highlight go"><figcaption><span>suffixarray_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> suffixarray</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/google/go-cmp/cmp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNew</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">text <span class="keyword">string</span></span><br><span class="line">want *suffixArray</span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"normal"</span>,</span><br><span class="line">text: <span class="string">"banana"</span>,</span><br><span class="line">want: &amp;suffixArray&#123;</span><br><span class="line">N:     <span class="number">6</span>,</span><br><span class="line">Text:  <span class="string">"banana"</span>,</span><br><span class="line">Index: []<span class="keyword">int</span>&#123;<span class="number">6</span> <span class="comment">/* contain empty string */</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got := New(tt.text)</span><br><span class="line"><span class="keyword">if</span> diff := cmp.Diff(got, tt.want); diff != <span class="string">""</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"New() differs: (-got +want)\n%s"</span>, diff)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>テスト結果</li></ul><p>テストが Pass することを確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=== RUN   TestNew</span><br><span class="line">=== RUN   TestNew/normal</span><br><span class="line">--- PASS: TestNew (0.00s)</span><br><span class="line">    --- PASS: TestNew/normal (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>また Go で実装したライブラリは、国内のオンラインジャッジシステムの 1 つである <a href="http://judge.u-aizu.ac.jp/onlinejudge/" target="_blank" rel="noopener">Aizu Online Judge</a> の <a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_14_D" target="_blank" rel="noopener">Multiple String Matching</a> という問題を用いて検証しました。<del><a href="https://judgedat.u-aizu.ac.jp/testcases/ALDS1_14_D/17/in" target="_blank" rel="noopener">05_maximum_00.in</a> (1 MB程度あるので注意)のテストケースでタイムリミット超過(TLE)していましたが…</del></p><h3 id="suffixarray-パッケージによる-Suffix-Array-の構築"><a href="#suffixarray-パッケージによる-Suffix-Array-の構築" class="headerlink" title="suffixarray パッケージによる Suffix Array の構築"></a><code>suffixarray</code> パッケージによる Suffix Array の構築</h3><p>さて、メインである本家の <code>suffixarray</code> パッケージを見てみましょう。Suffix Array の構築は <a href="https://golang.org/pkg/index/suffixarray/#New" target="_blank" rel="noopener">New</a> 関数を用いることができます。</p><p><code>New</code> 関数で Suffix Array を構築し、<a href="https://golang.org/pkg/index/suffixarray/#Index.Lookup" target="_blank" rel="noopener">Lookup</a> メソッドや <a href="https://golang.org/pkg/index/suffixarray/#Index.FindAllIndex" target="_blank" rel="noopener">FindAllIndex</a> メソッドなどを用いて Suffix Array から文字列のマッチングができます。<code>banana</code> の例であれば、以下のように結果を得ることができます。</p><figure class="highlight go"><figcaption><span>main_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"index/suffixarray"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Example</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := <span class="string">"banana"</span></span><br><span class="line">p := <span class="string">"an"</span> <span class="comment">// マッチングしたい文字列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Suffix Array の構築</span></span><br><span class="line">sa := suffixarray.New([]<span class="keyword">byte</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="comment">// -1 でマッチングするすべての位置を取得。取得する index の順番はランダム</span></span><br><span class="line">indexes := sa.Lookup([]<span class="keyword">byte</span>(p), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> indexes &#123;</span><br><span class="line">fmt.Printf(<span class="string">"suffix: %s, match: %s\n"</span>, t[i:], t[i:i+<span class="built_in">len</span>(p)])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unordered Output:</span></span><br><span class="line"><span class="comment">// suffix: ana, match: an</span></span><br><span class="line"><span class="comment">// suffix: anana, match: an</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ベンチマーク"><a href="#ベンチマーク" class="headerlink" title="ベンチマーク"></a>ベンチマーク</h3><p><code>suffixarray</code> パッケージの使い方が分かったところで蟻本ベースの  Manber と Myers のアルゴリズムを用いて Suffix Array を構築する実装と、標準ライブラリを用いて構築する 2 つの方法でベンチマークを取得してみましょう。(なおベンチマークの結果はローカルの環境に依存します)</p><p>Suffix Array を構築する対象のデータは <a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_14_D" target="_blank" rel="noopener">Multiple String Matching</a> における <a href="https://judgedat.u-aizu.ac.jp/testcases/ALDS1_14_D/17/in" target="_blank" rel="noopener">05_maximum_00.in</a> のデータを用いました。100万文字あります。input データを読み込む時間はベンチマークからは除きます。</p><ul><li>ベンチマークテスト</li></ul><figure class="highlight go"><figcaption><span>suffixarray_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkLookupAll_my</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(<span class="string">"testdata/05_maximum_01.in.data"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">b.Fatalf(<span class="string">"read test data: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"></span><br><span class="line">New(<span class="keyword">string</span>(data))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkLookupAll_std</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(<span class="string">"testdata/05_maximum_01.in.data"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">b.Fatalf(<span class="string">"read test data: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"></span><br><span class="line">suffixarray.New(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ベンチマーク結果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -bench . -benchtime=1000000000x</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github.com/d-tsuji/go-sandbox</span><br><span class="line">BenchmarkLookupAll_my-8         1000000000               4.54 ns/op</span><br><span class="line">BenchmarkLookupAll_std-8        1000000000               0.0510 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/go-sandbox      9.362s</span><br></pre></td></tr></table></figure><p>ローカル環境でのベンチマークテストの結果によると、標準ライブラリは、私が実装した Manber と Myers のアルゴリズムに比べて、約 100 倍程度高速であることが分かります。</p><p>実は標準ライブラリの Suffix Array の構築アルゴリズムは SAIS<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> という Ge Nong、Sen Zhang、Wai Hong Chen によって提案された高速なアルゴリズムを用いています。SAIS の計算量は $O(n)$ です。さらにいくつかのチューニングを施しており、詳しくは <a href="https://golang.org/src/index/suffixarray/sais.go" target="_blank" rel="noopener">index/suffixarray/sais.go</a> のドキュメントを確認ください。</p><p>ベンチマークでは約 100 倍程度の処理時間の違いがありましたが、上記の Manber と Myers のアルゴリズムの計算量が $O(n (\log n)^2)$ で SAIS の計算量が $O(n)$ ですから、100 倍程度の差は自然です。SAIS を実装している Go の標準ライブラリが優秀であることが分かります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Go の標準ライブラリで私が面白いと思った <code>suffixarray</code> パッケージを紹介しました。<code>suffixarray</code> パッケージの構築アルゴリズムの計算量は $O(n)$ で非常に高速です。その他に Manber と Myers による計算量 $O(n (\log n)^2)$ の構築アルゴリズムを用いた Go による実装を紹介しました。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>岡野原大輔 (2012) 『高速文字列解析の世界』岩波書店</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">秋葉拓哉、岩田陽一、北川宜稔 (2012) 『プログラミングコンテストチャレンジブック [第2版]』 マイナビ出版</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">Two Efficient Algorithms for Linear Time Suffix Array Construction (https://ieeexplore.ieee.org/document/5582081)</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">文字 a と b を <code>strings.Compare(a, b)</code> で辞書順で比較したときに a &lt; b であれば -1、a = b であれば 0、a &gt; b であれば +1 で返り値として取得できます。返り値が 0 以上の index を探索しているため a ≧ b である最小の index が取得できます。</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200807/suffixarray.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;フューチ
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="データ構造" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>初めてのOSSコミュニティ活動〜ドキュメント翻訳やってみた。カンファレンススタッフもやってみた。〜</title>
    <link href="https://future-architect.github.io/articles/20200806/"/>
    <id>https://future-architect.github.io/articles/20200806/</id>
    <published>2020-08-05T15:00:00.000Z</published>
    <updated>2020-08-11T07:12:34.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>本記事は<a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休みの自由研究連載</a>の4回目です。</p><p>2017年新卒入社の永井です。小売流通系のPJに所属しており、前回はVue.jsに関する記事を書きました。</p><ul><li>前回書いた記事<a href="https://future-architect.github.io/articles/20200428/">「Vue.jsのslotの機能を初心者にわかるように解説してみた」</a></li></ul><p>2020年はコロナ禍ということもあり、夏休みを取っても予定がないという人も多いのではないでしょうか。そんな時間があるときには、普段仕事や趣味でお世話になっているOSSやOSSコミュニティへの貢献をするといった過ごし方はいかがでしょうか。</p><p>でもいざGitHubを開いて、イシューを覗いてみると、どうも自分には出来なさそうな難しいものばかりに見えてなかなかハードル高いですよね。今回は「初めてのOSSコミュニティ活動」として、ハードルの低いOSS貢献を下記２つ紹介したいと思います。</p><ol><li>ドキュメント翻訳</li><li>カンファレンスのスタッフ</li></ol><h1 id="1-ドキュメントの翻訳"><a href="#1-ドキュメントの翻訳" class="headerlink" title="1. ドキュメントの翻訳"></a>1. ドキュメントの翻訳</h1><p>ドキュメントの翻訳は、<a href="https://www.transifex.com/" target="_blank" rel="noopener">transifex</a>というドキュメント翻訳プラットフォームを利用するのがハードルの低い方法です。このプラットフォームには多くのオープンソースが参加しており、自分の興味のあるものに参加することができます。下記の参考ページをもとに登録してみてください。</p><p>参考：transifexを翻訳に利用しているDjangoの翻訳プロジェクトの説明<br><a href="https://djangoproject.jp/howtojoin-transifex/" target="_blank" rel="noopener">https://djangoproject.jp/howtojoin-transifex/</a></p><h2 id="実際にやってみた"><a href="#実際にやってみた" class="headerlink" title="実際にやってみた"></a>実際にやってみた</h2><p>私は日本で生まれ育った日本語ネイティブで英語は中学1年生から学校で習ったという一般的な日本人ですので、英語から日本語への翻訳にチャレンジしてみます。（大学の第二外国語のドイツ語はさっぱり忘れました。）</p><p>transifexでは下記のように各英文ごとに対応する日本語を翻訳することになります。<br>（英単語帳のように対訳を当てていくようなイメージです。）</p><img src="/images/20200806/スクリーンショット 2020-08-05 20.48.15.png"><p>なので、無理のない範囲で少しずつ行うことができます。１文だけでもOKです。簡単ですね。</p><h1 id="2-カンファレンスのスタッフ活動"><a href="#2-カンファレンスのスタッフ活動" class="headerlink" title="2.カンファレンスのスタッフ活動"></a>2.カンファレンスのスタッフ活動</h1><p>昨年<a href="https://pycon.jp/2019/" target="_blank" rel="noopener">PyConJP2019</a>の当日スタッフとして活動しました。</p><ul><li>PyConJP2019に登壇された栗田さんの記事は<a href="https://future-architect.github.io/articles/20200422/">こちら</a><br>（余談に「他のフューチャーの社員も参加しており、最初の画像はスタッフをされていた方から頂戴しました」とありますが、「スタッフをされていた方」が私です。）</li></ul><h2 id="きっかけ"><a href="#きっかけ" class="headerlink" title="きっかけ"></a>きっかけ</h2><p>昨年PyConJP2019のコアスタッフをしていた友人に誘われて、当日スタッフとして活動しました。Pythonは独学で勉強したくらいだったのですが、「カンファレンスのスタッフって、なんだか楽しそうだなー」という気軽な気持ちで参加しました。</p><h2 id="当日スタッフの仕事内容"><a href="#当日スタッフの仕事内容" class="headerlink" title="当日スタッフの仕事内容"></a>当日スタッフの仕事内容</h2><h3 id="担当した仕事"><a href="#担当した仕事" class="headerlink" title="担当した仕事"></a>担当した仕事</h3><ul><li>前日設営</li><li>当日運営のサポート<ul><li>参加者の受付・ノベルティグッズやTシャツの配布</li><li>参加者をセッションの会場を誘導</li><li>道案内（セッションの会場やお手洗いなど）</li><li>セッションの中継機材の操作</li></ul></li><li>Partyへの参加（これはコアスタッフも含めて実費）</li><li>片付け</li></ul><h3 id="担当しなかった仕事"><a href="#担当しなかった仕事" class="headerlink" title="担当しなかった仕事"></a>担当しなかった仕事</h3><ul><li>セッションの司会</li><li>託児室の案内</li></ul><h2 id="得られたもの"><a href="#得られたもの" class="headerlink" title="得られたもの"></a>得られたもの</h2><p>スタッフの仕事や仕事の合間のコミュニケーションを通じてPythonを愛する多くの人と知り合うことが出来ました。それも国際カンファレンスなので、多様な顔ぶれ・・・！<br>特に<a href="https://www.amazon.co.jp/dp/4822292274" target="_blank" rel="noopener">『独学プログラマー』</a>の著者コーリー・アルソフさん（KeyNote登壇者）とお話できたことは光栄でした。</p><p>翻訳者の清水川さんと一緒にサインもいただいちゃいました。<br><img src="/images/20200806/IMG_20200805_203949.jpg" alt=""></p><p>ちなみに自己紹介する際に、「Futureで働いています」というと、多くの方が「澁川さんの会社」って反応されていたのが印象的でした。</p><p>*ほんのたまに「tsukammoさんの会社」と反応する競プロerもいました。</p><h2 id="当日スタッフやりましょう！・・・と言いたいところですが"><a href="#当日スタッフやりましょう！・・・と言いたいところですが" class="headerlink" title="当日スタッフやりましょう！・・・と言いたいところですが"></a>当日スタッフやりましょう！<del>・・・と言いたいところですが</del></h2><p><del>今年はコロナ禍でオンライン開催となるため、PyConJP2020では当日スタッフは募集してなさそうです。</del></p><p><del>来年以降当日スタッフ、もしくはコアスタッフにチャレンジしてみてはいかがでしょうか。</del></p><p><strong>(2020/08/08 追記)</strong> 8/28-30に行われるPyConJP2020当日スタッフ絶賛募集中だそうです。<br>是非<a href="https://pyconjp.blogspot.com/2020/08/support-staff.html" target="_blank" rel="noopener">こちら</a>からご登録ください。<strong>私も申し込みました。</strong></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回OSSへの貢献、コミュニティ活動なんて私には無理なんじゃないかと思っている人にもハードル低めな２つを紹介しました。是非皆さんも取り組んでみてください。</p><h1 id="余談：もっとハードルの低いものはないの？"><a href="#余談：もっとハードルの低いものはないの？" class="headerlink" title="余談：もっとハードルの低いものはないの？"></a>余談：もっとハードルの低いものはないの？</h1><p><a href="https://jp.vuejs.org/support-vuejs/" target="_blank" rel="noopener">Vue.js公式の支援のページ</a>には以下のような記載があります。</p><blockquote><p>もしあなたが個人の開発者で、Vue を使って生産性を楽しんでいるのなら、寄付をご検討ください。例えば、時々私にコーヒーをおごる、とか。:)</p></blockquote><p>というわけで、お近くのOSS開発者・貢献者・コミッターにコーヒーを奢ってみてはいかがでしょうか。ちなみにFutureにはVulsの発明者やVue.jsのコアメンバー他、OSSの貢献者がたくさん所属しています。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;本記事は&lt;a href=&quot;https://future-architect.github.io/articles/20200
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
  </entry>
  
  <entry>
    <title>Terraformで楽をしたい</title>
    <link href="https://future-architect.github.io/articles/20200805/"/>
    <id>https://future-architect.github.io/articles/20200805/</id>
    <published>2020-08-04T15:00:00.000Z</published>
    <updated>2020-08-05T14:17:55.873Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200805/%E3%81%B2%E3%81%BE%E3%82%8F%E3%82%8A.jpg" alt=""></p><p>本記事は<a href="/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/">夏休み自由研究記事</a>の第3弾です。</p><p>こんにちは。TIG/DX所属のインフラエンジニア兼カメラマンの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。今回のアイキャッチは私が昨年撮ったひまわり畑にしました。</p><h2 id="ツールをまとめたい"><a href="#ツールをまとめたい" class="headerlink" title="ツールをまとめたい"></a>ツールをまとめたい</h2><p>Infrastructure as Code(IaC)という考え方に属するツールはたくさんあります。例えばサーバーのミドルウェアを設定するためにAnsible、インスタンスのゴールデンイメージを作っておくならPacker、コンテナオーケストレーションならKubernetesと言った感じで、どんどん追えないくらいに増えています。我々エンジニアとしては、新しいツールを使うことが楽しくてしょうがない人も多いかと思います。かくいう私もその一人です。しかし、新しくインフラを始める人にとってもツールの多い時代ですし、少ない学習コスト(人によっては負担)でキャッチアップやインフラのリリースができることに越したことはありません。</p><p>この記事では、Terraformの数多くの機能を使って他のIaCツールと可能な限り代用したり、Terraformの世界でリソース作成を完結させるために使い方を改めて突き詰めた内容になります。私の記事なので、使うクラウドは例にもれずGCPを利用します。</p><h2 id="PackerじゃなくてTerraform"><a href="#PackerじゃなくてTerraform" class="headerlink" title="PackerじゃなくてTerraform"></a>PackerじゃなくてTerraform</h2><p>Packerは、Linuxなど各種OSなどに必要なパッケージをインストールしたあと、インスタンス自体は削除され、ゴールデンイメージを残します。このイメージをベースとして、設定済みのインスタンスを展開することができます。ミドルウェアの設定という意味ではAnsibleと似ていますが、Ansibleは設定したインスタンスはそのまま生きています。</p><h3 id="remote-execを利用する"><a href="#remote-execを利用する" class="headerlink" title="remote-execを利用する"></a><code>remote-exec</code>を利用する</h3><p>TerraformにはProvisionerというものがありますが、<code>remote-exec</code>はそのうちの一つです。<code>remote</code>なので、実行場所は構築しているインスタンスになります。ディレクトリ構成は以下を考えます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hoge-project</span><br><span class="line"> |- compute_instance.tf</span><br><span class="line"> |- sshkey</span><br><span class="line">     |- id_rsa</span><br><span class="line">     |- id_rsa.pub</span><br></pre></td></tr></table></figure><p>インスタンスをコードしている<code>compute_instance.tf</code>、あとは埋める鍵を置いています。<code>compute_instance.tf</code>の中身は以下になります。</p><figure class="highlight sh"><figcaption><span>compute_instance.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"instance"</span> &#123;</span><br><span class="line">  name         = <span class="string">"sample-instance"</span></span><br><span class="line">  machine_type = <span class="string">"n1-standard-1"</span></span><br><span class="line">  zone         = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  tags         = []</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    initialize_params &#123;</span><br><span class="line">      image = <span class="string">"debian-cloud/debian-9"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    network = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">"remote-exec"</span> &#123;</span><br><span class="line">    connection = &#123;</span><br><span class="line">      <span class="built_in">type</span>        = <span class="string">"ssh"</span></span><br><span class="line">      user        = <span class="string">"provisoner"</span></span><br><span class="line">      private_key = file(<span class="string">"./sshkey/id_rsa.pub"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inline = [</span><br><span class="line">      <span class="string">"sudo apt-get install nginx"</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここではインスタンスを立てて、nginxを入れるところまでをゴールとするコードにしました。通常であれば、Terraformでインスタンスを立てて、その後、gcloudコマンドなりで作成したインスタンスにsshしてミドルウェアをインストールするはずですが、それを<code>remote-exec</code>で置き換えています。</p><h3 id="メリット・デメリット"><a href="#メリット・デメリット" class="headerlink" title="メリット・デメリット"></a>メリット・デメリット</h3><ul><li>メリット<ul><li>PackerでbuildしてからイメージをTerraformで再度指定しなくても良い</li><li>Terraformのコマンド、世界で完結する</li></ul></li><li>デメリット<ul><li>ゴールデンイメージを利用するインスタンスが多い場合はコードが汚くなる</li></ul></li></ul><p>Packerを代用しようとする場合は、踏み台や、特定のサーバー種に向けてであれば効果的かと思いますが、利用するインスタンスが多くなった場合にはわずかながらコードが読みにくくなる可能性もあるので、そのときはPackerの導入を考えないといけないのかもしれません。</p><h2 id="Ansibleコマンドを実行したくない"><a href="#Ansibleコマンドを実行したくない" class="headerlink" title="Ansibleコマンドを実行したくない"></a>Ansibleコマンドを実行したくない</h2><p>インフラの管理方法として、Terraform + Ansibleは王道すぎるくらい王道なやり方だと思っていますし、コード管理している方はだいたいその2つをメインとして利用しているのではないでしょうか？なので、手順としては</p><ul><li>Terraformでリソースを作成</li><li>Ansibleでミドルウェアの設定を行う</li></ul><p>で行うと思います。なので、各々コマンドを実行しますが、個人的には2回コマンドを実行したくない、できれば1発で出来上がって欲しいという気持ちがずっとありました。その気持ち、ここで昇華させます。</p><h3 id="local-execを利用する"><a href="#local-execを利用する" class="headerlink" title="local-execを利用する"></a><code>local-exec</code>を利用する</h3><p>先ほどはProvisionerで<code>remote-exec</code>を利用しましたが、今回は<code>local-exec</code>を使います。実行場所が<code>local</code>、つまりTerraformの実行端末上で行うコマンドです。Ansibleは実行するときは各インスタンス上ではなく、ローカルや踏み台サーバーから実行するかと思いますので、<code>local-exec</code>を今回は使います。（構築したサーバー上でlocalhostでAnsibleは実行できますがお掃除も大変ですね…。）<br>今回はケースとして、以下をディレクトリ構成で考えます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hoge-project</span><br><span class="line"> |- compute_instance.tf</span><br><span class="line"> |- ansible</span><br><span class="line">     |- ansible.cfg</span><br><span class="line">     |- inventory</span><br><span class="line">     |- nginx.yaml</span><br><span class="line">     |- sshkey</span><br><span class="line">         |- id_rsa</span><br><span class="line">         |- id_rsa.pub</span><br><span class="line">     |- roles</span><br><span class="line">         |- nginx</span><br><span class="line">             |- tasks</span><br><span class="line">                 |- main.yaml</span><br></pre></td></tr></table></figure><p>このディレクトリ構成もおそらくTerraform + Ansibleの組み合わせの時にはオーソドックスではないでしょうか？ここで、<code>compute_instance.tf</code>は</p><figure class="highlight sh"><figcaption><span>compute_instance.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"instance"</span> &#123;</span><br><span class="line">  name         = <span class="string">"sample-instance"</span></span><br><span class="line">  machine_type = <span class="string">"n1-standard-1"</span></span><br><span class="line">  zone         = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  tags         = []</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    initialize_params &#123;</span><br><span class="line">      image = <span class="string">"debian-cloud/debian-9"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    network = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  metadata = &#123;</span><br><span class="line">    ssh-keys = <span class="string">"ansible:<span class="variable">$&#123;file("./ansible/sshkey/id_rsa.pub")&#125;</span>"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  service_account &#123;</span><br><span class="line">    scopes = [<span class="string">"cloud-platform"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">"local-exec"</span> &#123;</span><br><span class="line">    working_dir = <span class="string">"./ansible/"</span></span><br><span class="line">    <span class="built_in">command</span>     = <span class="string">"ansible-playbook -i inventory nginx.yaml"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>と書きました。<code>metadata</code>でインスタンスに埋め込む公開鍵を設定しています。そして最終段にある</p><figure class="highlight sh"><figcaption><span>tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">provisioner <span class="string">"local-exec"</span> &#123;</span><br><span class="line">  working_dir = <span class="string">"./ansible/"</span></span><br><span class="line">  <span class="built_in">command</span>     = <span class="string">"ansible-playbook -i inventory nginx.yaml"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>が今回のミソの部分です。ローカルで動かすディレクトリの指定と、そのディレクトリで実行するコマンドを書いています。コマンド自体は人が実行するものと基本的に同じにすればあとはAnsibleの世界なので、taskが終わるのを待ちましょう。</p><h3 id="メリット・デメリット-1"><a href="#メリット・デメリット-1" class="headerlink" title="メリット・デメリット"></a>メリット・デメリット</h3><p>今回、Ansibleの実行をTerraformにもたせましたが、こちらもメリット、デメリットどちらもあるかと思います。</p><ul><li>メリット<ul><li>コマンド実行回数が減る（手順が減る）</li><li>Ansibleが異常終了した場合は<code>taint</code>フラグが付くので、コードに書かれていることはしっかり実行される</li></ul></li><li>デメリット<ul><li>Ansibleの世界とTerraformの世界の境界がなくなるのでそれぞれの責任を分けにくくなる</li></ul></li></ul><p>メリットは実行回数が減ることはもちろんですが、<code>taint</code>フラグをつけてくれることが嬉しいところではないでしょうか？<code>taint</code>フラグは、「Terraformのリソースとしては作成が済んでいるが、リソースが指定通りにできなかった」時につくので、Ansibleの世界で失敗してもTerraformの失敗になります。<br>一方デメリット自体は、私自身は大きくないと思いますが、それぞれにもたせる役割、責任をはっきり分けておきたい場合にはデメリットかなと思います（見た目の問題ではありますが）。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では出来るだけTerraformでまかなってみましたが、とはいえ私自身AnsibleやPackerなどももちろん使います。また、使い方もチームそれぞれなのでこのやり方が100%フィットするとことはないと思っています。ただ、Terraformの世界を広げることで、管理コストや実装コストが下がることがわかりました。IaCの背景は手順書を極力減らしたり、インフラにもCI/CDを取り入れる余地をもたせることだと思うので、こういった取り組みは必要かなと思います。ここでいう、「楽をしたい」はどちらかというと人為的なミスを減らす、というところに落ち着きます。</p><p>これからさらに夏休み記事は出てきますので、今後の記事もぜひ読んでください！</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/">夏休み連載</a></li><li><a href="/tags/Terraform/">Terraform</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200805/%E3%81%B2%E3%81%BE%E3%82%8F%E3%82%8A.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本記事は&lt;a href=&quot;/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>GoPlus自由研究</title>
    <link href="https://future-architect.github.io/articles/20200804/"/>
    <id>https://future-architect.github.io/articles/20200804/</id>
    <published>2020-08-03T15:00:00.000Z</published>
    <updated>2020-08-05T04:14:16.606Z</updated>
    
    <content type="html"><![CDATA[<p>フューチャー<a href="https://future-architect.github.io/articles/20200726/">夏休みの自由研究</a>連載の2回目です。</p><p>TIG DXユニットの伊藤真彦です。</p><p>夏休みの自由研究として、GoPlusの調査を行いました。</p><p>この記事ではGoPlusの紹介、および簡単な内部構造の調査を行います。</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>はじめに</li><li>GoPlusとは</li><li>GoPlusの記述例</li><li>GoPlusのインストール</li><li>GoPlusをGoにインポート</li><li>GoPlusのハックを研究</li><li>GoPlusのこれから</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>私は現在Goを書いていますが、前職ではRubyでのWeb開発がメインでした。</p><p>Rubyは型定義を書く必要がありません、端的に言うと書きやすさに重きを置いています。</p><p><a href="https://ja.wikipedia.org/wiki/Ruby#%E8%A8%AD%E8%A8%88%E6%80%9D%E6%83%B3" target="_blank" rel="noopener">Wikipedia</a>にも</p><blockquote><p>開発者のまつもとゆきひろは、「Rubyの言語仕様策定において最も重視しているのはストレスなくプログラミングを楽しむことである (enjoy programming)」と述べている。</p></blockquote><p>と書いてあることからも、その設計思想が伺えます。</p><p>一方Goはコンパイル言語としての高速実行と書きやすさの絶妙なバランスを攻めている印象です。</p><p>C#を書いた経験もあるので、型があるのが自然という感覚も理解できますが、Rubyに慣れ親しんだ身からすると型定義や配列の取り扱いが少々面倒に感じます。<br>そもそも大抵の言語はRubyよりお堅いのではないでしょうか。<br>(どちらの言語が優れている、という主張は勿論ありません。)</p><p>そんなRuby愛を引きずっている私にとって衝撃的なニュースがありました。<br><a href="https://github.com/qiniu/goplus" target="_blank" rel="noopener">GoPlus</a>の存在です。</p><h1 id="GoPlusとは"><a href="#GoPlusとは" class="headerlink" title="GoPlusとは"></a>GoPlusとは</h1><p>Goのスーパーセットにあたるライブラリです。</p><blockquote><ul><li>静的型付言語である</li></ul></blockquote><ul><li>Goと完全な互換性を持ってる</li><li>スクリプト言語のようなスタイルで、データサイエンスにおいてGoより高い可読性を実現している</li></ul><p>と、<a href="https://github.com/qiniu/goplus/blob/master/README.md" target="_blank" rel="noopener">README</a>に書いてあります。<br>Cに対するC++のようなノリで命名されているようですね。</p><h1 id="GoPlusの記述例"><a href="#GoPlusの記述例" class="headerlink" title="GoPlusの記述例"></a>GoPlusの記述例</h1><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><figure class="highlight go"><figcaption><span>hello.gop</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println</span>(<span class="string">"Hello, world!"</span>)</span><br></pre></td></tr></table></figure><p>拡張子は<code>.gop</code>です。<br>この1行だけで動きます、つまりpackageの定義やmain関数の記述が不要です。<br>素晴らしいですね。</p><h3 id="配列、マップの取り扱い"><a href="#配列、マップの取り扱い" class="headerlink" title="配列、マップの取り扱い"></a>配列、マップの取り扱い</h3><figure class="highlight go"><figcaption><span>maplit.gop</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l := [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">m := &#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">println</span>(l)</span><br><span class="line"><span class="built_in">println</span>(m)</span><br><span class="line"></span><br><span class="line"># [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]、<span class="keyword">map</span>[a:<span class="number">1</span> b:<span class="number">2</span>]が出力される</span><br></pre></td></tr></table></figure><p>特にスライス(可変長の配列型)の宣言の感じがRuby時代を思い出します。<br>同じことをGoでやると、このような感じでしょうか</p><figure class="highlight go"><figcaption><span>maplit.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  l := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">  m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>&#125;</span><br><span class="line">  fmt.Println(l)</span><br><span class="line">  fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>余談ですが、サンプルコードの<code>println</code>関数も<code>GoPlus</code>で新たに定義されています。<br>本家GoのPrint系の関数より柔軟で、型を意識せずに使えるように拡張されています。</p><p>他にも多倍長整数型・多倍長浮動小数点数型のサポート、配列操作の拡張、エラーハンドリングの簡易的な記法の実装など便利な機能が多数用意されています。</p><h1 id="GoPlusのインストール"><a href="#GoPlusのインストール" class="headerlink" title="GoPlusのインストール"></a>GoPlusのインストール</h1><p>GoPlusを実際に使用する方法を紹介します。<br><code>go get</code>コマンドで<code>GOPATH</code>配下にライブラリをインポートします</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/qiniu/goplus</span><br><span class="line">go get github.com/qiniu/goplus@v0.6.50 #バージョン指定する場合</span><br></pre></td></tr></table></figure><p><code>GOPATH</code>配下に<code>goplus</code>ディレクトリが生成されるので移動します。<br><code>go install</code>コマンドでパッケージをインストールします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/qiniu/goplus</span><br><span class="line">go install -v ./...</span><br></pre></td></tr></table></figure><img src="/images/20200804/gop.jpg" class="img-middle-size"><p>インストールすると<code>gop</code>コマンドが利用できるようになります。<br>※執筆時点ではα版であるため、代わりに4種類のコマンドがインストールされます。</p><blockquote><ul><li>qrun: Similar to gop run</li><li>qfmt: Similar to gop fmt</li><li>qexp: Similar to gop export</li><li>qgo: Similar to gop go</li></ul></blockquote><p>試しに<code>qrun</code>コマンドを使用します。<br><code>qrun</code>は<code>gop run</code>、つまりGoの<code>go run</code>に相当するファイル実行コマンドです。<br>拡張子が<code>gop</code>のファイルを実行できます。<br>実際に<code>println(&quot;Hello, world!&quot;)</code>1行だけが書かれたファイルを実行できました。</p><img src="/images/20200804/run.jpg" class="img-middle-size"><h1 id="GoPlusをGoにインポート"><a href="#GoPlusをGoにインポート" class="headerlink" title="GoPlusをGoにインポート"></a>GoPlusをGoにインポート</h1><p>GoPlusの拡張機能をGoのライブラリとしてインポートするような使い方も可能です。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/qiniu/goplus/tutorial/14-Using-goplus-in-Go/foo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rmap := foo.ReverseMap(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"Hi"</span>: <span class="number">1</span>, <span class="string">"Hello"</span>: <span class="number">2</span>&#125;)</span><br><span class="line">fmt.Println(rmap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GoPlusのハックを研究"><a href="#GoPlusのハックを研究" class="headerlink" title="GoPlusのハックを研究"></a>GoPlusのハックを研究</h1><p>仕事で使うかはともかくGoPlusは面白いライブラリだと感じました。<br>今回はGoPlusがどのような手法でGoを柔軟な言語に拡張しているのか調査します。<br>ようやく自由研究の始まりです。</p><h3 id="qrunコマンドでファイルが実行できる仕組み"><a href="#qrunコマンドでファイルが実行できる仕組み" class="headerlink" title="qrunコマンドでファイルが実行できる仕組み"></a>qrunコマンドでファイルが実行できる仕組み</h3><p><code>go run</code>に相当する<code>qrun</code>コマンドを見てみましょう。<br>コマンドの実装は<a href="https://github.com/qiniu/goplus/blob/master/cmd/qrun/qrun.go" target="_blank" rel="noopener">こちら</a>です。</p><p>いたって普通のGoのスクリプトです。<br>つまり、<code>go install</code>コマンドでインストールしたGoの実装が各種コマンドの正体です。</p><p><code>qrun</code>のmain関数内部で、拡張子<code>gop</code>のファイルを解析、実行することで、<code>gop</code>ファイル本体にはmain関数や諸々のおまじないが不要になっていたんですね。</p><p>GoPlusは既に5年に渡り開発が行われています(initial commitが2015年でした)。<br>そのため複雑な実装が組みあがっていますが、頑張って要点だけでも解析してみます。</p><figure class="highlight go"><figcaption><span>qrun.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> flag.NArg() &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">"Usage: qrun [-asm -quiet -debug -prof] &lt;gopSrcDir|gopSrcFile&gt;\n"</span>)</span><br><span class="line">flag.PrintDefaults()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>まずは標準ライブラリの<code>flag</code>を用いて、コマンドライン引数を格納しています。<br>つまり<code>flag.Arg(0)</code>で引数で渡した<code>ファイル名.gop</code>が取得できます。<br>試しに何もファイル名を指定せず<code>qrun</code>コマンドのみを実行すると<code>flag.NArg() &lt; 1</code>が<code>true</code>になり、実装の通りのエラーメッセージが出力されます。</p><img src="/images/20200804/qrun.jpg" class="img-middle-size"><figure class="highlight go"><figcaption><span>qrun.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">target, _ := filepath.Abs(flag.Arg(<span class="number">0</span>))</span><br><span class="line">isDir, err := IsDir(target)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">"input arg check failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">pkgs, err := parser.ParseGopFiles(fset, target, isDir, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">"ParseGopFiles failed:"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ファイル名にパスを組み合わせた<code>target</code>が<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/parser/parse.go#L67" target="_blank" rel="noopener">parser.ParseGopFiles()</a>に渡されます。<br>ここで<code>gopファイル</code>としての解析が始まるようです。</p><figure class="highlight go"><figcaption><span>qrun.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cl.CallBuiltinOp = exec.CallBuiltinOp</span><br><span class="line"></span><br><span class="line">b := exec.NewBuilder(<span class="literal">nil</span>)</span><br><span class="line">_, err = cl.NewPackage(b.Interface(), pkgs[<span class="string">"main"</span>], fset, cl.PkgActClMain)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">"cl.NewPackage failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">code := b.Resolve()</span><br><span class="line"><span class="keyword">if</span> *flagAsm &#123;</span><br><span class="line">code.Dump(os.Stdout)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx := exec.NewContext(code)</span><br><span class="line">ctx.Exec(<span class="number">0</span>, code.Len())</span><br><span class="line"><span class="keyword">if</span> *flagProf &#123;</span><br><span class="line">exec.ProfileReport()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析した結果の実行は<code>NewBuilder</code>、<code>NewPackage</code>などの関数内部で行われています。<br>全てを解析しようとすると終わりが見えません、5年分の重みを感じます。</p><h3 id="構文解析の仕組み"><a href="#構文解析の仕組み" class="headerlink" title="構文解析の仕組み"></a>構文解析の仕組み</h3><p>GoPlusスクリプトの構文解析は<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/compile.go#L474" target="_blank" rel="noopener">cl.NewPackage()</a>で行われるようです。</p><figure class="highlight go"><figcaption><span>compile.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPackage</span><span class="params">(out exec.Builder, pkg *ast.Package, fset *token.FileSet, act PkgAct)</span> <span class="params">(p *Package, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> pkg == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrNotFound</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> CallBuiltinOp == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(<span class="string">"NewPackage failed: variable CallBuiltinOp is uninitialized"</span>)</span><br><span class="line">&#125;</span><br><span class="line">p = &amp;Package&#123;&#125;</span><br><span class="line">ctxPkg := newPkgCtx(out, pkg, fset)</span><br><span class="line">ctx := newGblBlockCtx(ctxPkg)</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> pkg.Files &#123;</span><br><span class="line">loadFile(ctx, f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> act &#123;</span><br><span class="line"><span class="keyword">case</span> PkgActClAll:</span><br><span class="line"><span class="keyword">for</span> _, sym := <span class="keyword">range</span> ctx.syms &#123;</span><br><span class="line"><span class="keyword">if</span> f, ok := sym.(*funcDecl); ok &amp;&amp; f.fi != <span class="literal">nil</span> &#123;</span><br><span class="line">ctxPkg.use(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pkg.Name != <span class="string">"main"</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> PkgActClMain:</span><br><span class="line"><span class="keyword">if</span> pkg.Name != <span class="string">"main"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrNotAMainPackage</span><br><span class="line">&#125;</span><br><span class="line">entry, err := ctx.findFunc(<span class="string">"main"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == ErrNotFound &#123;</span><br><span class="line">err = ErrMainFuncNotFound</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> entry.ctx.noExecCtx &#123;</span><br><span class="line">ctx.file = entry.ctx.file</span><br><span class="line">compileBlockStmtWithout(ctx, entry.body)</span><br><span class="line">ctx.checkLabels()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">out.CallFunc(entry.Get(), <span class="number">0</span>)</span><br><span class="line">ctxPkg.use(entry)</span><br><span class="line">&#125;</span><br><span class="line">out.Return(<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">ctxPkg.resolveFuncs()</span><br><span class="line">p.syms = ctx.syms</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように複雑な分岐を経由しますが、各経路での前処理を終えたら<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/stmt.go#L47" target="_blank" rel="noopener">compileStmt()</a>で実際に構文解析が行われます。<br>その先頭の<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/stmt.go#L378" target="_blank" rel="noopener">compileExprStmt()</a>内部の<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/expr.go#L54" target="_blank" rel="noopener">compileExpr()</a>までトークンを解析して送り込みます。</p><figure class="highlight go"><figcaption><span>expr.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compileExpr</span><span class="params">(ctx *blockCtx, expr ast.Expr)</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> v := expr.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *ast.Ident:</span><br><span class="line"><span class="keyword">return</span> compileIdent(ctx, v.Name)</span><br><span class="line"><span class="keyword">case</span> *ast.BasicLit:</span><br><span class="line"><span class="keyword">return</span> compileBasicLit(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.CallExpr:</span><br><span class="line"><span class="keyword">return</span> compileCallExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.BinaryExpr:</span><br><span class="line"><span class="keyword">return</span> compileBinaryExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.UnaryExpr:</span><br><span class="line"><span class="keyword">return</span> compileUnaryExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.SelectorExpr:</span><br><span class="line"><span class="keyword">return</span> compileSelectorExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.ErrWrapExpr:</span><br><span class="line"><span class="keyword">return</span> compileErrWrapExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.IndexExpr:</span><br><span class="line"><span class="keyword">return</span> compileIndexExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.SliceExpr:</span><br><span class="line"><span class="keyword">return</span> compileSliceExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.CompositeLit:</span><br><span class="line"><span class="keyword">return</span> compileCompositeLit(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.SliceLit:</span><br><span class="line"><span class="keyword">return</span> compileSliceLit(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.FuncLit:</span><br><span class="line"><span class="keyword">return</span> compileFuncLit(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.ParenExpr:</span><br><span class="line"><span class="keyword">return</span> compileExpr(ctx, v.X)</span><br><span class="line"><span class="keyword">case</span> *ast.ListComprehensionExpr:</span><br><span class="line"><span class="keyword">return</span> compileListComprehensionExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.MapComprehensionExpr:</span><br><span class="line"><span class="keyword">return</span> compileMapComprehensionExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.ArrayType:</span><br><span class="line"><span class="keyword">return</span> compileArrayType(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.Ellipsis:</span><br><span class="line"><span class="keyword">return</span> compileEllipsis(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.KeyValueExpr:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"compileExpr: ast.KeyValueExpr unexpected"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">log.Panicln(<span class="string">"compileExpr failed: unknown -"</span>, reflect.TypeOf(v))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらのswitch文まで辿り着いたら、解析結果に応じたコンパイルが走ります。<br>興味があればqrunから構文解析までの処理の流れを詳しく探索してみてください、私はそろそろ限界です。</p><p>試しに解析結果が<code>*ast.SliceExpr</code>だった場合の動き、<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/expr.go#L729" target="_blank" rel="noopener">compileSliceExpr()</a>を見てみます。</p><figure class="highlight go"><figcaption><span>expr.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compileSliceExpr</span><span class="params">(ctx *blockCtx, v *ast.SliceExpr)</span> <span class="title">func</span><span class="params">()</span></span> &#123; <span class="comment">// x[i:j:k]</span></span><br><span class="line"><span class="keyword">var</span> kind reflect.Kind</span><br><span class="line">exprX := compileExpr(ctx, v.X)</span><br><span class="line">x := ctx.infer.Get(<span class="number">-1</span>)</span><br><span class="line">typ := x.(iValue).Type()</span><br><span class="line"><span class="keyword">if</span> kind = typ.Kind(); kind == reflect.Ptr &#123;</span><br><span class="line">typ = typ.Elem()</span><br><span class="line"><span class="keyword">if</span> kind = typ.Kind(); kind != reflect.Array &#123;</span><br><span class="line">logPanic(ctx, v, <span class="string">`cannot slice a (type *%v)`</span>, typ)</span><br><span class="line">&#125;</span><br><span class="line">typ = reflect.SliceOf(typ.Elem())</span><br><span class="line">ctx.infer.Ret(<span class="number">1</span>, &amp;goValue&#123;typ&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">exprX()</span><br><span class="line">i, j, k := exec.SliceDefaultIndex, exec.SliceDefaultIndex, exec.SliceDefaultIndex</span><br><span class="line"><span class="keyword">if</span> v.Low != <span class="literal">nil</span> &#123;</span><br><span class="line">i = compileIdx(ctx, v.Low, exec.SliceConstIndexLast, kind)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> v.High != <span class="literal">nil</span> &#123;</span><br><span class="line">j = compileIdx(ctx, v.High, exec.SliceConstIndexLast, kind)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> v.Max != <span class="literal">nil</span> &#123;</span><br><span class="line">k = compileIdx(ctx, v.Max, exec.SliceConstIndexLast, kind)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> v.Slice3 &#123;</span><br><span class="line">ctx.out.Slice3(i, j, k)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ctx.out.Slice(i, j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>独自の実装が山盛りですね…再帰的に<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/expr.go#L54" target="_blank" rel="noopener">compileExpr()</a>が呼び出されるところも迷宮ポイントを高めています。<br>キリがないので今回はこの辺りで調査を終了したいと思います。</p><h1 id="GoPlusのこれから"><a href="#GoPlusのこれから" class="headerlink" title="GoPlusのこれから"></a>GoPlusのこれから</h1><p>GoPlusは執筆時点では月間90件に近いプルリクエストがマージされ、絶賛開発中の状態です。<br><img src="/images/20200804/project.png" alt=""><br>α版を乗り越え<code>gop</code>コマンドが動き出す日は来るのか、乞うご期待です。</p><h1 id="追記"><a href="#追記" class="headerlink" title="追記"></a>追記</h1><p>記事の公開前日に確認したところ、バージョン0.7.1よりgopコマンドが採用されていました！<br>おめでとうGoPlus。<br><img src="/images/20200804/gop.png" alt=""></p><p>私は偉いので記事公開の1か月前に概ね書き終わっていたのですが、その間にもGoPlusは大きく進化していました。<br>追記執筆時点での最新の実装(v0.7.4)ではREPL(対話型インタプリタ)の実行機能が追加されたようです。</p><p><img src="/images/20200804/repl.png" alt=""></p><p>さらには<a href="https://github.com/goplus/vscode-goplus" target="_blank" rel="noopener">vscode用プラグイン</a>の開発もスタートしました。<br><img src="/images/20200804/vscode.png" alt=""></p><p>今後の成長がますます楽しみになりました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;フューチャー&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;夏休みの自由研究&lt;/a&gt;連載の2回目です。&lt;/p&gt;
&lt;p&gt;TIG DXユニットの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;夏休みの自由研究として、
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>産業用機器向けフィールドネットワークModbusで温湿度センシング</title>
    <link href="https://future-architect.github.io/articles/20200803/"/>
    <id>https://future-architect.github.io/articles/20200803/</id>
    <published>2020-08-02T15:00:00.000Z</published>
    <updated>2020-08-11T01:50:03.215Z</updated>
    
    <content type="html"><![CDATA[<p>フューチャー<a href="https://future-architect.github.io/articles/20200726/">夏休みの自由研究</a>連載の1回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。三菱系のPLCと通信する<a href="http://fa-dic.mitsubishielectric.co.jp/faq/show/15797?category_id=865" target="_blank" rel="noopener">MCプロトコル</a>はちょっと飛び道具的な<a href="https://speakerdeck.com/laqiiz/go-plc" target="_blank" rel="noopener">持ちネタ</a>の1つですが、同様にメジャーな規格であるModbusについて自由研究という名の調査をしました。</p><p>工場、倉庫、プラントなどのIoT化を行うと、Web周りに無い技術も触れて楽しいなって最近思ってます。</p><h1 id="Modbusとは"><a href="#Modbusとは" class="headerlink" title="Modbusとは"></a>Modbusとは</h1><blockquote><p>ModbusはModicon社が1979年、同社のプログラマブルロジックコントローラ (PLC) 向けに策定したシリアル通信プロトコルである。産業界におけるデ・ファクト標準の通信プロトコルとなり、現在では産業用電子機器を接続する最も一般的手段となっている。<br><a href="https://ja.wikipedia.org/wiki/Modbus" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/Modbus</a> - WikipediaのModbusページ</p></blockquote><p>Wikipediaの説明が分かりやすいので引用しました。</p><p>書いてあるようにModbus（モドバス）とは通信プロトコルです。由来はModicon社から来ているのでしょう。通信プロトコルとあるように、WebでいうHTTPのようなものです。サーバ・クライアントモデルで、Modbusでセンサーモジュールにリクエストを投げると、温度・湿度がレスポンスで取得できるようなものです（後述します）。</p><p><a href="https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%96%E3%83%AB%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9" target="_blank" rel="noopener">PLC</a>というのは工場の生産設備で用いる機器のことです。製造現場のFA（ファクトリーオートメーション）に使われる<a href="https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E5%88%B6%E5%BE%A1" target="_blank" rel="noopener">シーケンス制御</a>を行う装置です。</p><p>シリアル接続はWeb系のエンジニアには馴染みが薄い気がします。簡単に言う１本だけの通信線を使い、1/0の電圧レベルを連続的(=シリアル)に変化させて、意味のあるデータを送信/受信する通信方式です。USBとか、自作PCをする人にとってはシリアルATAが有名でしょうか。工場系の人にとっては、RS-232CとかRS485が有名な気がします。</p><h1 id="Modbusの使い所"><a href="#Modbusの使い所" class="headerlink" title="Modbusの使い所"></a>Modbusの使い所</h1><p>利用用途がPLC接続だけだとすると「オレには関係無いな」ってなりそうですが、Modbusはもう少し広く利用されています。掲題の温湿度センサーや、カメラモジュール、産業用ロボットの制御などでも利用されています。</p><p>いやいや、今どきはラズベリーパイなどのシングルボードで完結させることが増えているよってIoT界隈のエンジニアに言われそうですが、倉庫や工場などで導入すると、高い可用性が求められる（5年10年は故障しないとか）ため、こういった産業用の機器の選定を行うこともあると思います。そうすると必然、Modbusのような通信規格を抑える必要がでてきます。ラズパイにセンサーモジュール接続で完結できるならそっちが良いと僕もそう思います。</p><p>MCプロトコルの違いですが、MCプロトコルも<a href="https://www.cc-link.org/ja/cclink/slmp/index.html" target="_blank" rel="noopener">SLMP (Seamless Message Protocol)</a>という形で標準化されているのですが、Modbusはそれより古くからあり、仕様もシンプルなため、センサーやカメラやロボットなどのセンサー・アクチュエータにも搭載されていることが一つの差かなと思います。</p><p>（最近だとOPC-UAですかね。まだ私は触ったことがないです。個人ユースで1万円以下で手に入るOPC-UA機器がありましたらどなたか教えて下さい）</p><h1 id="Modbusプロトコル"><a href="#Modbusプロトコル" class="headerlink" title="Modbusプロトコル"></a>Modbusプロトコル</h1><p>Modbusはサーバ・クライアントモデルです。</p><p>そのためクライアント側がセンサー値の取得やアクチュエータの操作を行います。クライアントが処理の管理役なため、クライアント側をModbusのマスター、サーバ側をModbusのスレーブとも呼びます。Modbusの親玉に複数の子機をぶら下げて一連の制御をするイメージがよく出てくる気がします。この記事ではマスターをマネージャ、スレーブをワーカと呼び替えて記載します。</p><img src="/images/20200803/modbus-worker-manager.png" class="img-middle-size"><p>Modbusには大きく分けて3つの通信方式があります。先ほどシリアル接続のプロトコルだよって言いましたが、TCP/IP対応しているバージョンもあります。</p><ol><li><strong>Modbus RTU</strong>: シリアル接続で、バイナリ表現</li><li><strong>Modbus ASCII</strong>: シリアル接続で、ASCIIフォーマット。RTUに比べてデータサイズが増えるが、人間に読みやすい</li><li><strong>Modbus/TCP</strong>: TCP/IPを用いる</li></ol><p>状況次第かと思いますが、Modbusワーカーそのものを開発している方はともかく、対応機器を利用する分にはシリアル接続の場合は性能上の理由から ModbusRTUを選ぶことが多いと思います。</p><h1 id="メッセージフレーム"><a href="#メッセージフレーム" class="headerlink" title="メッセージフレーム"></a>メッセージフレーム</h1><p>Modbus ASCIIのメッセージフレーム（HTTPでいうと、HTTPリクエストのペイロード）は以下のような属性を持ちます。Modbus RTUはバイナリフレームのため詳細はここでは割愛しますが、ブロックの構造は同じです。</p><p><img src="/images/20200803/ascc_message_frame.png" alt=""><br>※PI–MBUS–300 Rev. Jより</p><p>START移行の、利用可能な文字は 0-9, A-Fからの文字列のみです。最後はCRLFで終わります。</p><ul><li><strong>START</strong>: 1文字で<code>:（0x3A）</code></li><li><strong>ADDRESS</strong>: 2文字。マネージャが要求するワーカーアドレス（1~247）。0 はブロードキャスト。</li><li><strong>FUNCTION</strong>: 2文字。要求の種類を示します。下記に示します。1~255が設定可能。どのファンクションコードがが有効化はワーカデバイスに依存</li><li><strong>DATA</strong>: N文字で可変。ファンクションごとにデータフォーマットが決まります。</li><li><strong>LRC CHECK</strong>: 2文字。水平パリティチェック（Longitudinal Redundancy ChecK）のこと。転送時にノイズによるビットが反転していないかを受信側がチェックできるようにするもの</li><li><strong>改行</strong>: CRLF</li></ul><h2 id="ファンクションコード"><a href="#ファンクションコード" class="headerlink" title="ファンクションコード"></a>ファンクションコード</h2><p><code>PI–MBUS–300 Rev. J</code>に記載されていたコードは全部で24つありました。コードを上から3つ抜粋します。</p><table><thead><tr><th align="left">CODE</th><th align="left">NAME</th><th align="center">Note</th></tr></thead><tbody><tr><td align="left">01</td><td align="left">Read Coil Status</td><td align="center">ワーカのDO（Discrete Output）のON/OFFステータス読み取り</td></tr><tr><td align="left">02</td><td align="left">Read Input Status</td><td align="center">ワーカのDI（Discrete Input）のON/OFFステータス読み取り</td></tr><tr><td align="left">03</td><td align="left">Read Holding Registers</td><td align="center">ワーカの保持レジスタの内容を読み取り</td></tr><tr><td align="left">以下省略。</td><td align="left"></td><td align="center"></td></tr></tbody></table><p>DATA部について03の例で説明します。</p><p><code>Read Holding Registers</code> の<code>DATA</code> は保持レジスタの開始アドレスと保持レジスタの数を指定します。</p><ul><li>START: 1文字</li><li>FUNCTION: 2文字。<code>Read Holding Registers</code> は <code>03</code>になる</li><li><strong>DATA</strong>: 03の場合は以下4つを指定<ul><li><strong>開始アドレス（Hi）</strong>:  Hi+Loなので、201を指す場合は Hiに00、LoにC8を指定。開始アドレスは1少ない</li><li><strong>開始アドレス（Lo）</strong>: 省略</li><li><strong>取得数（Hi）</strong>: Hi+Loなので、3点取得する場合は、Hiを00, Loに03を指定</li><li><strong>取得数（Lo）</strong>: 省略</li></ul></li><li>LRC CHECK: 2文字</li><li>改行</li></ul><p>まとめると、Modbusワーカ番号1にRead Holding Registersで、レジスタ201から3点取得する場合は、<br><code>:0300C8003</code>とLRCチェックとCRLFで1要求になります。</p><p>応答もほぼ似たような形式で、以下の用に指定されたレジスタ値が取得できます。</p><ul><li>START: 1文字</li><li>FUNCTION: 2文字。<code>Read Holding Registers</code> は <code>03</code>になる</li><li><strong>Byte Count</strong>: バイト数</li><li><strong>DATA1</strong>: 取得データ1</li><li><strong>DATA2</strong>: 取得データ2</li><li><strong>DATA3</strong>: 取得データ3</li><li>LRC CHECK: 2文字</li><li>改行</li></ul><h1 id="実機を触ってみる"><a href="#実機を触ってみる" class="headerlink" title="実機を触ってみる"></a>実機を触ってみる</h1><p>Amazonで探した中で一番安く買えたModbus-RTUセンサー <code>KKmoonRS485温度湿度 トランスミッタ</code> です。商品名がModbus-TRUってなっていますがtypoなので安心ください。先ほどまではModbus-Asciiで説明していましたが、ここからはModbus-RTUでバイナリ表現になります。</p><p><a href="https://www.amazon.co.jp/dp/B07KS3WJRM" target="_blank" rel="noopener">https://www.amazon.co.jp/dp/B07KS3WJRM</a></p><p>この真ん中で光っているのがセンサーです。</p><p><img src="/images/20200803/IMG_20200803_011731.jpg" alt=""></p><p>今回はシリアル接続にチャレンジしたかったので、RS485からUSBに変換する<a href="https://www.amazon.co.jp/dp/B00GWEGZOI/" target="_blank" rel="noopener">このあたりの変換アダプタ</a>を追加で購入して、Win機からUSBでこのセンサーに接続しています。</p><p>あと、電源ですが範囲がDC8V〜48Vということで、USBからだと給電できないので<a href="http://akizukidenshi.com/catalog/g/gM-06642/" target="_blank" rel="noopener">ACアダプター</a>と<a href="http://akizukidenshi.com/catalog/g/gK-05148/" target="_blank" rel="noopener">DCジャックのDIP化キット</a> を買って、キットの方をハンダ付けして、ブレッドボードで通電させています。ブレッドボード以外はジャンパー線とドライバーがあれば後はどうにかなるともいます。（抵抗とか不要）。この辺の機材調達は弊社の電子工作部の方に色々教えてもらいました。</p><p>KKmoonRS485センサーの接続情報ですが仕様書などが入っていなく、<a href="https://www.amazon.co.jp/gp/customer-reviews/R36LHIYIFV23QG" target="_blank" rel="noopener">こちらのレビュー</a>が正直一番参考になりました。</p><p>まずは既存のツールを使ってセンサー値を取得してみましょう。</p><p>色々な種類があるようですが、以下のツールが一番使い勝手が良かったです。<br><a href="https://www.fa.hdl.co.jp/jp/html/app/Modbus_Tool/index.html" target="_blank" rel="noopener">https://www.fa.hdl.co.jp/jp/html/app/Modbus_Tool/index.html</a></p><p>レビューコメント通りに設定していきます。</p><ul><li>伝送モード: RTU</li><li>通信速度 9600bps</li><li>送信クエリ: <code>01 03 00 00 00 02</code> になります<ul><li>MobusワーカID=1（ケース内のスイッチで切り替えられるらしい）</li><li><code>Read Holding Registers(0x03)</code></li><li>開始アドレス: 0x0000</li><li>データサイズ: 0x0002</li></ul></li></ul><p>「接続設定」でLANかUSBを選択できるので、ポート選択でUSBのCOMポート割当を確認しましょう。通電できていればプルダウンで選択肢にセンサーモジュールが出てくるとお見ます。（私の環境ではCOM3に割り当てられていました）</p><p>リクエストのTx（要求）を送信して、結果が成功するとRx（応答）の緑の行が表示されます。</p><p><img src="/images/20200803/ModbusToolForDebus.png" alt=""></p><p>Modbusはワーカのシミュレータがいくつかありますが、やはり実機から値が取得できると気持ち良いです。シミュレータを最初に利用しても訳が分からないと思いますので、このセンサーの購入は本当にオススメです。</p><h1 id="応答について"><a href="#応答について" class="headerlink" title="応答について"></a>応答について</h1><p><code>01 03 04 00 FA 03 28 DA EC</code> が応答でした。</p><p>それぞれの意味です。</p><ul><li><code>01</code>: ModbusワーカID（送信したのと同じ）</li><li><code>03</code>: ファンクションコード（送ったのと同じ）</li><li><code>04</code>: データ部のByte数</li><li><code>00FA</code>: 湿度のデータ</li><li><code>0328</code>: 温度のデータ</li><li><code>DAFC</code>: LRCチェックの値</li></ul><p><code>00FA</code>も<code>0328</code>も、どこの国の温湿度ですか？って言いたくなりますが、符号付き整数（16進数）でかつ10倍した値（温度も湿度も小数点以下まで取れるようにということだと思われます）ということです。お手軽に値を見るには、<a href="https://note.cman.jp/convert/bit/" target="_blank" rel="noopener">このあたり</a>のWebツールを利用して変換すると、00FAは10進数で<code>250</code>、0328は<code>808</code>でした。前者は湿度25%でいいとして、後者は80.8℃？この部屋、サウナかな？って思いましたが、どうも華氏表記（°F）のようです。</p><p><code>華氏 摂氏</code> でググると、Googleで変換できるんですね。室温が27℃だということがわかりました。（エアコンの設定は25℃なのに解せぬという知見が得られました。）</p><p><img src="/images/20200803/image.png" alt=""></p><h1 id="Goからアクセスする"><a href="#Goからアクセスする" class="headerlink" title="Goからアクセスする"></a>Goからアクセスする</h1><p>Modbusで温湿度センサーにアクセスして値を取得することはできました。これをGo言語で行ってみます。Modbusは流石に広く使われているだけあって、Goでもライブラリ実装があります。</p><ul><li><a href="https://github.com/goburrow/modbus" target="_blank" rel="noopener">goburrow/modbus</a></li></ul><p>Modbusでリクエストを出しレスポンスを受け取るところまで、ほぼサンプル通りで実行できるため特に難しくありません。</p><p>コードの全文は<a href="https://github.com/laqiiz/modbus-learning" target="_blank" rel="noopener">こちら</a>にあげておきました。</p><figure class="highlight go"><figcaption><span>GoでKKmoonRS485温度湿度センサにアクセスするサンプル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/hex"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/goburrow/modbus"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">h := modbus.NewRTUClientHandler(<span class="string">"COM3"</span>) <span class="comment">// RTU, COM3ポート</span></span><br><span class="line">h.BaudRate = <span class="number">9600</span>                       <span class="comment">// Bit/秒</span></span><br><span class="line">h.DataBits = <span class="number">8</span>                          <span class="comment">// データビット</span></span><br><span class="line">h.Parity = <span class="string">"N"</span>                          <span class="comment">// パリティ</span></span><br><span class="line">h.StopBits = <span class="number">1</span>                          <span class="comment">// トップビット</span></span><br><span class="line">h.SlaveId = <span class="number">1</span>                           <span class="comment">// スレーブID</span></span><br><span class="line">h.Timeout = <span class="number">5</span> * time.Second</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := h.Connect(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// ポートの指定間違いや、他のプロセスがポートを開いている場合</span></span><br><span class="line">log.Fatal(<span class="string">"connect: "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> h.Close()</span><br><span class="line"></span><br><span class="line">mc := modbus.NewClient(h)</span><br><span class="line">results, err := mc.ReadHoldingRegisters(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// アドレス0x00、データサイズ2</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"mc.ReadHoldingRegisters"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">humidity := results[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">temperature := results[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(hex.EncodeToString(humidity), hex.EncodeToString(temperature))</span><br><span class="line"></span><br><span class="line">humidityNum := <span class="keyword">float32</span>(<span class="keyword">int16</span>(binary.BigEndian.Uint16(humidity))) * <span class="number">1</span> / <span class="number">10</span></span><br><span class="line">temperatureFNum := <span class="keyword">float32</span>(<span class="keyword">int16</span>(binary.BigEndian.Uint16(temperature))) * <span class="number">1</span> / <span class="number">10</span></span><br><span class="line">temperatureCNum := (temperatureFNum - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span></span><br><span class="line"></span><br><span class="line">fmt.Println(humidityNum, temperatureCNum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>さきほどのModbusToolで行ったのと同じ要領で設定していきます。関数が<code>ReadHoldingRegisters</code>などそのままの名前で準備されているため、Modbusで何を行いたいかがわかれば、利用することは難しくないと思います。</p><p>1点実行前の注意として、先ほどのModbusToolでコネクションをOPENにしたままにしておくと、上記コード実行時に <code>connect: Access is denied.</code> が発生してしまいます。Modbus RTUでは同時接続はできませんのでご注意ください。</p><p>また、データを取得してからは多少厄介です。 <code>binary.BigEndian.Uint16(humidity)</code> とあるように、2byte(16bit)をBigEndian形式（数値の上位桁がメモリーの下位にある）でUnit16で読み取って、float32に変換しています。</p><p>ここからはセンサーの仕様で、値を1/10にし、温度のみ華氏→摂氏変換を行っています。</p><p>実行すると以下のように出力されます。（暑かったのでエアコンの温度を下げたら急に冷えました）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">湿度 温度</span><br><span class="line">00fb 02e2</span><br><span class="line">25.1 23.222223</span><br></pre></td></tr></table></figure><p>後はこの情報を定期間隔で実行し、データをクラウドに上げておけば可視化も自由自在だと思います。</p><h1 id="エラー時の挙動"><a href="#エラー時の挙動" class="headerlink" title="エラー時の挙動"></a>エラー時の挙動</h1><p>いくつか設定を間違ってみてアクセスして見て結果を確認します。</p><ul><li>SlaveIDを異なる値（例えば2にした場合）<ul><li>結果: * <code>mc.ReadHoldingRegistersserial: timeout</code></li></ul></li><li>ReadHoldingRegistersserialの代わりにReadCoilsを利用<ul><li>結果: * <code>mc.ReadHoldingRegistersserial: timeout</code></li></ul></li><li>ReadHoldingRegistersのAddressを仕様上にない値（例えば1）に変更<ul><li>結果: * <code>mc.ReadHoldingRegistersserial: timeout</code></li></ul></li><li>ReadHoldingRegistersのデータサイズを仕様上にない値（例えば5）に変更<ul><li>結果: * <code>mc.ReadHoldingRegistersserial: timeout</code></li></ul></li></ul><p>全て結果は <code>timeout</code> でした。これでわかるのは、Modbus RTUの仕様にはエラーレスポンスということは存在しないということです。<br>そのため、機器が正常か異常かといった判定は、定期的に値を確認し想定通り内の応答が返ってくるかどうかといったことでのチェックになると思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>「Modbusでシリアル接続」を最初見た時は馴染みがないだけに、凄く難しいことではないか？と思いましたが、Web系の技術に比べ情報が少ないのはありそうですが、データを取得することだけでだとそこまで難しくもありません。</p><p>実際の工場で、ライン制御を直接Goなどから行うことはほぼないと思います。しかしセンサー類から情報をもらい、何かしらのアルゴリズムや機械学習の推論結果を、フィールド制御側にフィードバックすることは今後のFA/IoT化の流れから増えてくると思います。</p><p>その場合の通信プロトコルがModbusであれば上記の知識と、<code>goburrow/modbus</code>のようなライブラリを活用すれば、データ連携を行うこと自体はそこまで大きな障壁ではないと思います。</p><p>また、Modbusを学ぶ上で特にワーカーの扱いに関しては、シミュレータだけで行うのではなく実機を用いるととてもイメージが湧きます。もし、なるべくお安く済ませたい場合は、AliExpressでの購入もおすすめです。リードタイムが30日ほどかかることもありますが、格安で手に入ること間違いないです。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://web.eecs.umich.edu/~modbus/documents/PI_MBUS_300.pdf" target="_blank" rel="noopener">Modicon Modbus ProtocolReference Guide PI–MBUS–300 Rev. J</a><ul><li>プロトコル仕様書</li></ul></li><li><a href="https://www.m-system.co.jp/mssjapanese/kaisetsu/nmmodbus.pdf" target="_blank" rel="noopener">Modbus プロトコル概説書 - M-System</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;フューチャー&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;夏休みの自由研究&lt;/a&gt;連載の1回目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="電子工作" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="PLC" scheme="https://future-architect.github.io/tags/PLC/"/>
    
      <category term="Future電子工作部" scheme="https://future-architect.github.io/tags/Future%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C%E9%83%A8/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="Modbus" scheme="https://future-architect.github.io/tags/Modbus/"/>
    
  </entry>
  
  <entry>
    <title>Kaggleにワクチン開発用のデータを公開しました &amp; コード解説</title>
    <link href="https://future-architect.github.io/articles/20200801/"/>
    <id>https://future-architect.github.io/articles/20200801/</id>
    <published>2020-07-31T15:00:00.000Z</published>
    <updated>2020-07-31T03:56:09.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。SAIG所属の農見と申します。<br>この度、研究で用いた<a href="https://www.kaggle.com/futurecorporation/epitope-prediction" target="_blank" rel="noopener">B細胞エピトープ予測用データセット</a>と<a href="https://www.kaggle.com/futurecorporation/covid-19-sars-b-cells-basic-predictions-and-eda" target="_blank" rel="noopener">サンプルコード</a>を公開したので、その解説をしようと思います。(これの<a href="https://prtimes.jp/main/html/rd/p/000000406.000004374.html" target="_blank" rel="noopener">プレスリリース</a>)</p><h1 id="データセットについて"><a href="#データセットについて" class="headerlink" title="データセットについて"></a>データセットについて</h1><p>簡単に言うと、B細胞エピトープが分かればワクチン作成の大きな助けになる、だからCOVID-19の原因ウイルスであるSARS-CoV-2が持つタンパク質のB細胞エピトープを予測して、ワクチン開発の役に立てようぜというデータセットです。</p><p>B細胞エピトープについてもう少し詳しく知りたい方は<a href="https://www.biorxiv.org/content/10.1101/2020.07.27.224121v1" target="_blank" rel="noopener">我々の論文</a>を読むか免疫学の本を読んでみるといいと思います。</p><h1 id="サンプルコードについて"><a href="#サンプルコードについて" class="headerlink" title="サンプルコードについて"></a>サンプルコードについて</h1><p>では本題のサンプルコードの解説をしていきます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INPUT_DIR = <span class="string">'../input/epitope-prediction'</span></span><br><span class="line">bcell = pd.read_csv(<span class="string">f'<span class="subst">&#123;INPUT_DIR&#125;</span>/input_bcell.csv'</span>)</span><br><span class="line">sars = pd.read_csv(<span class="string">f'<span class="subst">&#123;INPUT_DIR&#125;</span>/input_sars.csv'</span>)</span><br><span class="line">covid = pd.read_csv(<span class="string">f'<span class="subst">&#123;INPUT_DIR&#125;</span>/input_covid.csv'</span>)</span><br><span class="line">bcell_sars = pd.concat([bcell, sars], axis=<span class="number">0</span>, ignore_index=<span class="literal">True</span>)</span><br><span class="line">bcell_sars.head()</span><br></pre></td></tr></table></figure><img src="/images/20200801/Screenshot from 2020-07-31 05-55-30.png"><p>最初の部分でデータがどんなものなのかということを見ています。基本中の基本ですね、データがどんなものなのかということが分からないと方針の立てようがないです。</p><p>各カラムは</p><ul><li><code>parent_protein_id</code> : タンパク質の<a href="https://www.uniprot.org/" target="_blank" rel="noopener">UniProt ID</a></li><li><code>protein_seq</code> : タンパク質の配列</li><li><code>start_position</code> : エピトープの開始位置</li><li><code>end_position</code> : エピトープの終了位置</li><li><code>peptide_seq</code> : エピトープ配列 </li><li><code>chou_fasman</code> : エピトープ特徴量, $\beta$ ターン</li><li><code>emini</code> : エピトープ特徴量, relative surface accessibility</li><li><code>kolaskar_tongaonkar</code> : エピトープ特徴量, 抗原性</li><li><code>parker</code> : エピトープ特徴量, 疎水性</li><li><code>isoelectric_point</code> : タンパク質特徴量,等電点</li><li><code>aromacity</code>: タンパク質特徴量,芳香族アミノ酸の割合</li><li><code>hydrophobicity</code> : タンパク質特徴量,疎水性</li><li><code>stability</code> : タンパク質特徴量,安定性</li><li><code>target</code> : 抗体価</li></ul><p>となっています。予測したいものはtarget(抗体価)でこれは0と1のbinaryの値を取ることが分かります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(bcell_sars.isnull())</span><br></pre></td></tr></table></figure><p>また、欠損値があるかどうかのチェックもしました。幸いこのデータには欠損値はないので、そのままデータを使うことが出来ます。ということで早速B-cellのデータを利用してCOVID-19に近いとされるSARSのBcellエピトープ予測を行いました。</p><h3 id="Task1-SARS予測"><a href="#Task1-SARS予測" class="headerlink" title="Task1 : SARS予測"></a>Task1 : SARS予測</h3><p>Bcellデータセットのみを使用してSARSデータセットの抗体価を予測するタスク。<br>SARS-CoVとSARS-CoV-2は配列に類似性があるためTask1ではSARSの予測を行っている。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create length columns</span></span><br><span class="line"><span class="keyword">for</span> df <span class="keyword">in</span> [bcell, sars, covid, bcell_sars]:</span><br><span class="line">    df[<span class="string">"length"</span>] = df[<span class="string">"end_position"</span>] - df[<span class="string">"start_position"</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">kf = GroupKFold(n_splits = <span class="number">5</span>)</span><br><span class="line">oof = np.zeros(len(bcell))</span><br><span class="line">preds = np.zeros(len(sars))</span><br><span class="line">feature_importance = pd.DataFrame()</span><br><span class="line">feature_columns = [<span class="string">"chou_fasman"</span>,<span class="string">"emini"</span>,<span class="string">"kolaskar_tongaonkar"</span>,<span class="string">"parker"</span>,<span class="string">"length"</span>,<span class="string">"isoelectric_point"</span>,<span class="string">"aromaticity"</span>,<span class="string">"hydrophobicity"</span>,<span class="string">"stability"</span>]</span><br><span class="line">target = <span class="string">"target"</span></span><br><span class="line"><span class="keyword">for</span> i,(train_index,valid_index) <span class="keyword">in</span> enumerate(kf.split(bcell[feature_columns],bcell[<span class="string">"target"</span>],bcell[<span class="string">"parent_protein_id"</span>])):</span><br><span class="line">    train_x = bcell.loc[train_index][feature_columns].values</span><br><span class="line">    train_y = bcell.loc[train_index][target].values</span><br><span class="line">    valid_x = bcell.loc[valid_index][feature_columns].values</span><br><span class="line">    valid_y = bcell.loc[valid_index][target].values</span><br><span class="line">    train_data = lgb.Dataset(train_x, label = train_y)</span><br><span class="line">    valid_data = lgb.Dataset(valid_x, label = valid_y)</span><br><span class="line">    model = lgb.train(params, train_data, valid_sets = [valid_data], verbose_eval=<span class="number">20</span>,num_boost_round=<span class="number">500</span>,early_stopping_rounds=<span class="number">50</span>) </span><br><span class="line">    oof[valid_index] = model.predict(valid_x)</span><br><span class="line">    preds += model.predict(sars[feature_columns].values)/kf.n_splits</span><br><span class="line">    feature_importance[<span class="string">"feature"</span>] = feature_columns</span><br><span class="line">    feature_importance[<span class="string">"importance"</span>+str(i)] = model.feature_importance()</span><br><span class="line">roc_auc_score(bcell[<span class="string">"target"</span>],oof)</span><br></pre></td></tr></table></figure><p>lengthという特徴量を作成して、普通に5-fold cross validationしているだけですが、注目すべき部分は<strong>GroupKFold</strong>を使っている点です。ただ、GroupKFoldを知らない人もいると思うので先にGroupKFoldの説明をします。</p><p><a href="https://scikit-learn.org/stable/auto_examples/model_selection/plot_cv_indices.html#sphx-glr-auto-examples-model-selection-plot-cv-indices-py" target="_blank" rel="noopener">https://scikit-learn.org/stable/auto_examples/model_selection/plot_cv_indices.html#sphx-glr-auto-examples-model-selection-plot-cv-indices-py</a>から引用。</p><img src="/images/20200801/Screenshot from 2020-07-31 06-20-49.png"><p>これを見てみるとGroupKFoldはKFoldと異なりGroupをまたぐことのない分け方をしていることが分かります。<br>で、今回何故parent_protein_idをgroupとしてGroupKFoldをしているかというとタンパク質ごとに分けないと不当に精度が高くなる恐れがあるためです。これは単純な理由でtargetに1しかないタンパク質や0しかないタンパク質というものが存在します。これをtrainとvalidationに混在させてしまうとより精度が高くなるというのは想像に難くないと思います。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select = [i != <span class="string">"feature"</span> <span class="keyword">for</span> i <span class="keyword">in</span> feature_importance.columns]</span><br><span class="line">select = feature_importance.columns[select]</span><br><span class="line">feature_importance[select] = feature_importance[select]/feature_importance[select].sum()</span><br><span class="line">feature_importance[<span class="string">"importance"</span>] = feature_importance.select_dtypes(include=[np.number]).mean(axis=<span class="number">1</span>)</span><br><span class="line">sns.barplot(x=<span class="string">"importance"</span>, y=<span class="string">"feature"</span>, data=feature_importance.sort_values(by=<span class="string">"importance"</span>, ascending=<span class="literal">False</span>));</span><br><span class="line">plt.title(<span class="string">'GBDT Features (avg over folds)'</span>);</span><br></pre></td></tr></table></figure><img src="/images/20200801/Screenshot from 2020-07-31 06-56-08.png"><p>LightGBMではFeature importanceという指標で、どの特徴量がより予測に寄与したのかを見ることが出来ます。<br>今回の例で見ると予測に一番重要だったのはhydrophobicity(タンパク質の疎水性)であることが分かります。</p><p>またSARSは正解データがあるので予測がどれだけあたっていたかも見てみましょう。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, classification_report</span><br><span class="line">print(<span class="string">"Accuracy:"</span>, accuracy_score(sars[<span class="string">"target"</span>].values, np.int32(preds &gt;= <span class="number">0.5</span>)))</span><br><span class="line">print(classification_report(sars[<span class="string">"target"</span>].values, np.int32(preds &gt;= <span class="number">0.5</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Accuracy: 0.7403846153846154</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           0       0.74      0.99      0.85       380</span><br><span class="line">           1       0.78      0.05      0.09       140</span><br><span class="line"></span><br><span class="line">    accuracy                           0.74       520</span><br><span class="line">   macro avg       0.76      0.52      0.47       520</span><br><span class="line">weighted avg       0.75      0.74      0.65       520</span><br></pre></td></tr></table></figure><p>これを見ると1に対するrecallがとても低く改善の余地があることが分かります。</p><h3 id="Task2-SARS-CoV-2-COVID-19-予測"><a href="#Task2-SARS-CoV-2-COVID-19-予測" class="headerlink" title="Task2 : SARS-CoV-2 (COVID-19) 予測"></a>Task2 : SARS-CoV-2 (COVID-19) 予測</h3><p>BcellとSARSのデータセットを利用して、SARS-CoV-2の抗体価を予測するタスク。<br>SARS-CoV-2には抗体価データがないところが難しいポイントです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">kf = GroupKFold(n_splits = <span class="number">5</span>)</span><br><span class="line">oof = np.zeros(len(bcell_sars))</span><br><span class="line">preds = np.zeros(len(covid))</span><br><span class="line">feature_importance = pd.DataFrame()</span><br><span class="line">feature_columns = [<span class="string">"chou_fasman"</span>,<span class="string">"emini"</span>,<span class="string">"kolaskar_tongaonkar"</span>,<span class="string">"parker"</span>,<span class="string">"length"</span>,<span class="string">"isoelectric_point"</span>,<span class="string">"aromaticity"</span>,<span class="string">"hydrophobicity"</span>,<span class="string">"stability"</span>]</span><br><span class="line">target = <span class="string">"target"</span></span><br><span class="line"><span class="keyword">for</span> i,(train_index,valid_index) <span class="keyword">in</span> enumerate(kf.split(bcell_sars[feature_columns],bcell_sars[<span class="string">"target"</span>],bcell_sars[<span class="string">"parent_protein_id"</span>])):</span><br><span class="line">    train_x = bcell_sars.loc[train_index][feature_columns].values</span><br><span class="line">    train_y = bcell_sars.loc[train_index][target].values</span><br><span class="line">    valid_x = bcell_sars.loc[valid_index][feature_columns].values</span><br><span class="line">    valid_y = bcell_sars.loc[valid_index][target].values</span><br><span class="line">    train_data = lgb.Dataset(train_x, label = train_y)</span><br><span class="line">    valid_data = lgb.Dataset(valid_x, label = valid_y)</span><br><span class="line">    model = lgb.train(params, train_data, valid_sets = [valid_data], verbose_eval=<span class="number">20</span>,num_boost_round=<span class="number">500</span>,early_stopping_rounds=<span class="number">50</span>) </span><br><span class="line">    oof[valid_index] = model.predict(valid_x)</span><br><span class="line">    preds += model.predict(covid[feature_columns].values)/kf.n_splits</span><br><span class="line">    feature_importance[<span class="string">"feature"</span>] = feature_columns</span><br><span class="line">    feature_importance[<span class="string">"importance"</span>+str(i)] = model.feature_importance()</span><br><span class="line">roc_auc_score(bcell_sars[<span class="string">"target"</span>],oof)</span><br><span class="line"></span><br><span class="line">covid[<span class="string">"target"</span>] = preds</span><br><span class="line">covid.to_csv(<span class="string">"sub.csv"</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>SARS-CoV-2への予測も同様にして予測結果を出力しますが、正解データがないので良し悪しの判断は難しいです。この部分は今後の生体内での実験で得られるB細胞エピトープの情報を踏まえた上で判断することになると思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回のデータセット、ソースコード、論文の公開により、医学の知見を持たないAI研究者でも容易にワクチン開発用データで実験することが出来るようになりました。このデータセットを使用して得られた知見をKaggle notebook等で公開していただけると幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。SAIG所属の農見と申します。&lt;br&gt;この度、研究で用いた&lt;a href=&quot;https://www.kaggle
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Kaggle" scheme="https://future-architect.github.io/tags/Kaggle/"/>
    
  </entry>
  
  <entry>
    <title>コード選考の問題選定を現場社員がやるわけ</title>
    <link href="https://future-architect.github.io/articles/20200731/"/>
    <id>https://future-architect.github.io/articles/20200731/</id>
    <published>2020-07-30T15:00:00.000Z</published>
    <updated>2020-08-11T07:15:39.544Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200731/laptop-2298286_1280.png"><p><a href="https://pixabay.com/ja/users/Sara_Torda-888816/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2298286" target="_blank" rel="noopener">Sara Torda</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2298286" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>SAIG(Strategic AI Group)の塚本です。AIと言えば Deep Learning 等の機械学習分野が中心ですが、それらが適さないと判断された問題全般(数理最適や複雑なデータ処理)を担当しています。</p><p>また、競技プログラムを中心とした全社的な活動に関わっており、フューチャーが2018年より実施している、新卒採用の<strong>コード選考</strong>についてご紹介します。</p><h1 id="コード選考をはじめた経緯"><a href="#コード選考をはじめた経緯" class="headerlink" title="コード選考をはじめた経緯"></a>コード選考をはじめた経緯</h1><p>全社員がプログラミングスキルを求められるフューチャーにとって、採用時におけるその能力の定量評価は長年の課題であり、昨今の採用サービスの充実を機に取り組みをはじめました。</p><p>より詳細な経緯は下記記事をご参照ください。</p><p><a href="https://tracks.run/interview/future-architect/" target="_blank" rel="noopener">高いプログラミングスキルを持つ人材を引きつける「コード選考」 全社員がプログラミングを熟知したテクノロジー企業の採用フローを公開！</a></p><p>サービスを活用することが決まったものの、採用フローの意図に沿ったデザインを行う必要があり、採用チームのメンバーだけでは対応が難しい部分がありました。そこで、社内の部活動として競技プログラミング部を立ち上げ・運営していた私に相談が来ました。</p><h1 id="コード選考の位置付けとデザイン"><a href="#コード選考の位置付けとデザイン" class="headerlink" title="コード選考の位置付けとデザイン"></a>コード選考の位置付けとデザイン</h1><p>まず、フューチャー社員の多くはITコンサルタントという1職種に属しており、期待される役割はこれまでの実績や本人希望に応じて流動的に定められます。コード選考でも、プログラミングに特化した人材のみを選出するのではなく、ITコンサルタントとして基礎的なプログラミングの素養を持っているか確認することを目的としました。<br>一方、高いプログラミングスキルを有した人材を評価すべく、スキルに応じて点数の差が開くよう問題選択を行うことも求められます。さらに、合格者が次の選考に進む際や内定承諾時の判断基準として、各選考内容はシビアに見られます。</p><p>これらの観点から、コード選考に求められる要素を下記のように定めました。</p><ul><li>基礎的なプログラミングの素養を有しているか確認すること<sup id="fnref:0"><a href="#fn:0" rel="footnote">0</a></sup></li><li>プログラミングスキルの高さに応じて点数差が生まれること<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>特定の知識やテクニックが不要なこと</li><li>問題文の理解が容易なこと</li><li>解法を考えるのが楽しいこと</li></ul><p>これらを加味し、以下のようなコード選考の実現を目指します。<br>「プログラミング言語に依らず解け、段階的に難易度が上がるパズルチックな問題を複数<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>出題する。」</p><h1 id="問題選定"><a href="#問題選定" class="headerlink" title="問題選定"></a>問題選定</h1><p>活用したサービスでは、予め用意された数百問の問題から自由に組み合わせて試験を作ることができます。<br>各問題には、難易度や所要時間の目安が併記されているのですが、あまり納得のできない値であったり、当社の狙いにそぐわない問題も多く見受けられました。そこで、目指すコード選考の実現のため、全ての問題を現場社員で見直すことにしました。</p><ol><li>スクリーニングとして、私が全問題文を確認、候補として20問以内に絞り込みます。</li><li>競技プログラミング部のメンバーを中心に、協力してくれる社員に問題候補を共有します。</li><li>実際に問題を解いてもらって、難易度の目安や感想をフィードバックしてもらいます。</li><li>難易度が綺麗な階段状になるよう組み合わせを考え、出題する問題を選定します。</li></ol><p>問題選定の実施にあたり、解く問題にノルマや担当等を定めず、部活動の延長として興味の向くままに取り組んでもらえることを大事にしています。解き終わった問題に対し担当したメンバー間で議論が盛り上がることも多く、一種のお祭りのようになっているかも知れません。</p><h1 id="結果の活用"><a href="#結果の活用" class="headerlink" title="結果の活用"></a>結果の活用</h1><p>コード選考の結果の活用方法については、特に面接など、他の選考フローと絡めて試行錯誤を行っています。年々変化するため確定的なことは言い難いのですが、自社の狙いに沿った観点で定量化されていることにより、形骸化せず、選考基準として活用できることにメリットを感じています。</p><h1 id="効果"><a href="#効果" class="headerlink" title="効果"></a>効果</h1><p>コード選考は当初想定を超える成果に繋がっています。</p><p>まず、コード選考を実施することにより、ITコンサルティング業界を就活候補としていない学生からも応募が来るようになりました。また、面接官の評価以外に、客観的な数値基準が加わったことにより、柔軟な選考が可能になりました。そして、面接時のネタや内定承諾時の理由として、コード選考内容に対する好印象を上げる応募者が少なくない人数生まれました。</p><p>上記の結果、新卒採用者の内、すでにコード選考経由の人数は十分な割合を占めるようになりました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>フューチャーのコード選考の取り組みについてご紹介しました。<br>IT人材の枯渇が叫ばれる中、各社プログラミングスキルを測る施策を検討・採用する企業も多いと思います。コード選考といっても、企業毎に求める狙いや評価基準は様々であり、それに合わせて必要な選考をどう実現すればよいのか、本取り組みが何かの参考になれば幸いです。</p><p>(個人的には、コード選考を通じて多くのアルゴリズマーに入社頂いたので、より良い問題を揃えるため、そろそろ社内での自作を実現したいと考えています。)</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:0"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">0.</span><span style="display: inline-block; vertical-align: top;">AtCoder緑コーダーの方の多くが通過するレベルを想定しました。</span><a href="#fnref:0" rev="footnote"> ↩</a></li><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">AtCoder黄コーダーの方であれば満点が取れるレベルを想定しました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">所要時間の兼ね合いから5問程度を目安にしています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200731/laptop-2298286_1280.png&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/Sara_Torda-888816/?utm_source=link-attributio
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="採用" scheme="https://future-architect.github.io/tags/%E6%8E%A1%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redux-Toolkitに学ぶ、TypeScriptの型推論とこれからのAPIデザイン</title>
    <link href="https://future-architect.github.io/articles/20200730/"/>
    <id>https://future-architect.github.io/articles/20200730/</id>
    <published>2020-07-29T15:00:00.000Z</published>
    <updated>2020-08-05T14:18:41.658Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200730/top.png"><p>TypeScriptは、JavaScriptのさまざまなフリーダムな書き方を受け入れ、漸進的な型付けを行えるようにするという<del>狂った</del>高難易度な目的のために作成されているのですが、そろそろ、TypeScriptファーストで、利用者にとって使いやすいAPIみたいな方向性で使われることも増えるのでは、という思いを強く持ちました。「既存のJSプロジェクトをTypeScript化して〜」みたいな紹介のされ方はもはや過去のものになったのではないかと。</p><p>すでに<a href="https://2019.stateofjs.com/javascript-flavors/typescript/" target="_blank" rel="noopener">State of JavaScript 2019</a>では2/3のユーザーがすでにTypeScriptを利用したことがある（使っている）と答え、残りの1/3も学びたい、と答えている状況です。この勢いだと、2年後には80%を超えそうです。僕自身も、TypeScriptファーストな世界がくることを想像して<a href="https://github.com/future-architect/typescript-guide/" target="_blank" rel="noopener">説明に使える教科書</a>を書き始めたわけですが、思ったよりもその世界が来るのは早そうです。</p><p>このエントリーでは、TypeScriptユーザーのTypeScriptユーザーによるTypeScriptユーザーのためのAPI設計について考えをまとめてみたいと思います。想定読者は、フレームワークを作るような人ですので、既存のライブラリを組み合わせてアプリケーションを作る人は想定外です。</p><p>ちなみに、相互運用の話などはオライリージャパンから出版されている<a href="https://www.oreilly.co.jp/books/9784873119045/" target="_blank" rel="noopener">プログラミングTypeScript</a>の11章などで詳しく説明されているので、そちらをみると良いと思います。JSから移行については話はしません。</p><h1 id="3行まとめ"><a href="#3行まとめ" class="headerlink" title="3行まとめ"></a>3行まとめ</h1><ul><li>TypeScriptの型推論は制約があって、他の関数型言語で提供されているものよりは弱い</li><li>うまく推論を活用して、コード補完とか型チェックが利きやすいAPIを作ろう</li><li>JavaScript時代とはAPIの形が変わるかもよ/変えて行こう</li></ul><h1 id="前回のおさらい"><a href="#前回のおさらい" class="headerlink" title="前回のおさらい"></a>前回のおさらい</h1><p>TechBlogで以前、Redux Toolkitの紹介を書きました。今回のエントリーはその続きです。</p><ul><li><a href="https://future-architect.github.io/articles/20200501/">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話</a></li></ul><blockquote><p>最近、僕が意識しているのはリーダブルなコードです。これはオライリーの本のReadableではなくて、コードが人を導いてくれる（Leadable）という意味です。一方で、ReduxとTypeScriptで感じていたのは、処理系を通すためにコードを書かされているという感覚ですね。オーダブル(Orderable)と呼んでいるけど、もっといい名前があったら教えてください。Redux Toolkitはだいぶ余計なことに頭を使わなくて済むので、とても良いです。<br>(略)<br>Redux toolkitと生のReduxを使って見て思うのは、ライブラリの設計の難易度が3倍ぐらいになったなぁ、という感じですね。TypeScriptで型推論が入ったのはあるのですが、その型推論が効きやすい、ライブラリユーザーが実装しなきゃいけない型情報を減らすための設計というのが、この後の主戦場になりそうだなぁ、ということです。今まではデータを加工する、というロジックだけを設計すれば良かったのですが、データの伝搬だけじゃなくて、型情報の伝搬というのも考慮しなければならないと。ある意味、C++プログラマーのテンプレート経験が生きるのかも、なぁ、という。まだあまり言語化できないのですが。Haskellな人とか得意だったりするんですかね？</p></blockquote><h1 id="型の伝搬"><a href="#型の伝搬" class="headerlink" title="型の伝搬"></a>型の伝搬</h1><p>使いやすいAPIというのは、その今入力しようとしている箇所の情報が十分に得られるということです。それは型です。しかし、型を全部覚えていて間違いなく宣言しなければならないとすると、入力の補助にはなりませんし、タイプ数も増えます。わざわざ入力しなくてもきちんと情報が得られるようになるのが型推論です。型推論はその場の環境から型を決定していきます。</p><p>前回のエントリーの最後に書いたのが型の伝搬です。型推論(type inference)ではあるのですが、TypeScriptの場合はより強力な型推論を持つ言語と比べると、推論する方向が限定されているのであえて伝搬と呼びましたが、型推論です。</p><p>方向が決まっていて機能が弱いのは欠点でもありますが、長所でもあります。処理系の挙動はわかりやすく、エラーメッセージもシンプルですし、コンパイルも早いです。</p><h2 id="代入"><a href="#代入" class="headerlink" title="代入"></a>代入</h2><p>一番基本的な推論は、代入ですね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">"hello world"</span>;</span><br></pre></td></tr></table></figure><p>丁寧に書くなら次のように型情報を入れることになりますが、右辺から明らかなので、左側の代入部分では型を省略できますね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i: <span class="built_in">string</span> = <span class="string">"hello world"</span>;</span><br></pre></td></tr></table></figure><p>逆方向には推論はできません。当たり前に思えるかもしれませんがそうではありません。逆方向に推論ができるとしたら、左辺から右辺の関数の返り値の型を推定して、そこから、引数<code>i</code>の型も決まって「testの呼び出し時の引数の型が違う」となりますが、TypeScriptの場合は一方通行なので、右辺の型が全部解決してから左辺を処理するため、「数字は文字列の変数に代入できない」というエラーになります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> i: <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span>&gt;(<span class="params">i: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'number' is not assignable to type 'string'.</span></span><br><span class="line">s = test(i);</span><br></pre></td></tr></table></figure><p>型変数を持つクラスを型を指定しないでインスタンス作成した場合は、<code>unknown</code>が指定されたものとしてインスタンスが作成されます。最初の<code>append()</code>の引数をみて、T=numberと推論してくれることはTypeScriptではありません。そのため、次の文字列の<code>append()</code>も成功してしまいます。エラーになってくれません。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    append(i: T) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> l = <span class="keyword">new</span> List();</span><br><span class="line">l.append(<span class="number">10</span>);</span><br><span class="line">l.append(<span class="string">"string"</span>);</span><br></pre></td></tr></table></figure><p><code>unknown</code>のまま動いちゃうと、TypeScriptからJavaScriptの世界に逆戻りをしますが、まあそれでも動いてくれるのはTypeScriptらしいところではあります。<a href="https://go2goplay.golang.org/" target="_blank" rel="noopener">Goのジェネリクスだとエラーになる</a>のでインスタンス作成時に明示的な型変数指定が必要になります。</p><h2 id="関数、メソッドの引数"><a href="#関数、メソッドの引数" class="headerlink" title="関数、メソッドの引数"></a>関数、メソッドの引数</h2><p>引数から、それが属する関数の型変数への伝搬は可能です。というよりも、関数の型変数に推論で型を自動設定する方法は引数経由が唯一の方法です。</p><p>単なる<code>T</code>でなくても、<code>T[]</code>のような配列でも、<code>(input: T) =&gt; void</code>みたいな引数であっても、きちんと解決してくれます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>&lt;<span class="title">T</span>&gt;(<span class="params">a: T</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引数同士の伝搬も見逃せない要素です。Redux-Toolkitの<code>createSlice()</code>をシンプルに書くと次のようになります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSlice</span>&lt;<span class="title">S</span>&gt;(<span class="params">state: S, reducers: &#123;[key: <span class="built_in">string</span>]: (s: S) =&gt; S&#125;</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これの良い点は、最初の引数のinitialStateから型情報が伝搬し、2つ目のオブジェクトの型の定義が完成する点にあります。このreducersの関数をユーザーが作成する場合は、sはState型と分かっているのでコード補完が聞きますし、returnの方が間違えば即座に赤線が引かれます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> State = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: State = &#123;</span><br><span class="line">    name: <span class="string">"shibukawa"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">createSlice(initialState, &#123;</span><br><span class="line">    greeting: <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;s.name&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="関数の返り値"><a href="#関数の返り値" class="headerlink" title="関数の返り値"></a>関数の返り値</h2><p>関数の返り値の推論が賢いのはTypeScriptのうれしいところです。引数と違って返り値は内部のロジックで決まるので省略可能ですが、ESLintの推奨設定で<code>explicit-function-return-type</code>がデフォルトでONになっており、明示的に書かないといけません。僕はこの設定はオフにしてしまいますし、仮に宣言を省略しても.d.tsには型情報としては現れるし、コード補完は聞くし、型宣言をソースコードをgrepして目で見れない以外のデメリットはないです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> <span class="keyword">as</span> <span class="built_in">number</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span> <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これは次のように推論されます。なお、as number、as stringを外すと、 <code>10 | &quot;test&quot;</code>になります。</p><figure class="highlight ts"><figcaption><span>.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>): <span class="title">string</span> | <span class="title">number</span></span>;</span><br></pre></td></tr></table></figure><p>オブジェクトを返す場合は挙動がちょっと違います。Reduxのaction creatorでよく見るような次ような関数ですね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">"ADD_TODO"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: ADD_TODO,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これはこうなります。</p><figure class="highlight ts"><figcaption><span>.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>): </span>&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">    text: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>レスポンスを文字列型ではなくて、特定の文字列<code>ADD_TODO</code>固定としたい場合は、<code>as const</code>をつけます。↑の例のconstの変数を参照したままas constをつけるとエラーが出ますので、文字列リテラルにしています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ADD_TODO"</span> <span class="keyword">as</span> <span class="keyword">const</span>,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>): </span>&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ADD_TODO"</span>;</span><br><span class="line">    text: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>関数の返り値から、型ユーティリティの<code>ReturnType</code>を使うと、型を取り出すことが可能です。↑の<code>as const</code>はこの型を使う場合に大切になります。Reduxのreducerのactionの型指定で、すべてのAction Creatorの返り値の型の合併型を作るときに、”ADD_TODO”の部分が残っていると嬉しいからです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AddTodoAction = ReturnType&lt;<span class="keyword">typeof</span> addTodo&gt;;</span><br><span class="line"><span class="keyword">type</span> DoneTodoAction = ReturnType&lt;<span class="keyword">typeof</span> doneTodo&gt;;</span><br><span class="line"><span class="keyword">type</span> Actions = AddTodoAction | DoneTodoAction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  todos: [] <span class="keyword">as</span> Todo[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">&#123;todos&#125; = initialState, action: Actions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ADD_TODO"</span>: <span class="comment">// ここで各アクションの関数がreturnしてない文字列を書くとエラーが検知される</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;todos&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最初の例はADD_TODOをconst変数にしていました。変数の有無であればTypeScriptでなくてもJSでもエラーチェックが利くためにReduxで「アクションの識別子はconst変数にする」がベストプラクティスになったと思いますが、そもそもTypeScriptでは文字列のままでもチェックが利くので、変数宣言が省略できるようになりました。</p><p>このオブジェクトを返す場合の型定義は、ほとんどがnullableでない場合はこのように関数に直接書いてもいいですが、nullableだったり型指定のある配列だったりする場合は型アノテーションをたくさんつけなければならず、タイプ数が多くなってきてしまいますし、見通しも悪くなります。また複数箇所で利用する場合などは外部に型定義を書く方が良いですね。</p><p>なお、TypeScriptでは返り値を受け取る変数の型から、返り値の方を推論して決めることはできません。これはまあ返り値を受ける=代入なので、代入の右辺への推論が効かない以上、当然ですね。</p><h2 id="クラスとメンバー"><a href="#クラスとメンバー" class="headerlink" title="クラスとメンバー"></a>クラスとメンバー</h2><p>クラス側に型変数を定義すると、メンバーでも使えます。まあ当然ですね。メンバー変数と、メンバーメソッドの引数や返り値で利用可能です。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    append(i: T) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆に、メンバーで定義された型変数は他のメソッドやクラス側で使えません。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    append&lt;U&gt;(i: T, e: U) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(i);</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただし、コンストラクタを除きます。コンストラクタの引数を元に、型変数を決定することはできます。この特性は大切で、クラスの型変数に型を伝搬させるには、クラスの型変数にはコンストラクタを使う方法以外はありません。そうでなければ明示的に型を渡して初期化（<code>new List&lt;number&gt;()</code>しなければなりません。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">a: T</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解決できないのが<code>Promise</code>の引数のような<code>(asyncTask: (resolve: (i: T)=&gt;void) =&gt; void</code>といった、コンストラクタの引数が関数で、その関数の入力値で型を決めるようなケースです。このようなケースでは型が決定できず、<code>Promiseの型変数</code>は<code>unknown</code>のままです。この場合だけは<code>new Promise&lt;number&gt;</code>と明示的に書いてあげる必要があります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">10</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h2><p>ここがTypeScriptの型推論の秘孔かな、と思います。まず、Javaのthrows宣言がない（何が飛んでくるか事前にわからない）、<code>Promise</code>で<code>reject</code>に渡される例外の型定義がないからです。受け取り側に型として伝わる物が何もありません。</p><p>そもそも、TypeScriptは例外を扱うのが元のJavaScriptの特性もあって苦手です。</p><ul><li><a href="https://qiita.com/shibukawa/items/ffe7264ecff78f55b296" target="_blank" rel="noopener">JavaScript/TypeScriptの例外ハンドリング戦略を考える</a></li></ul><p>型の補完も効いて、タイプ数も少なくて済み、関数やメソッドの外で別の要素を定義しなくても良い方法は、Goスタイルで返り値の一部として返す方法なんじゃないかと思っています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcAge</span>(<span class="params">birthDay: <span class="built_in">Date</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> error = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> tNum = today.getFullYear() * <span class="number">10000</span> + (today.getMonth() + <span class="number">1</span>) * <span class="number">100</span> + today.getDate();</span><br><span class="line">    <span class="keyword">const</span> bNum = birthDay.getFullYear() * <span class="number">10000</span> + (birthDay.getMonth() + <span class="number">1</span> ) * <span class="number">100</span> + birthDay.getDate();</span><br><span class="line">    <span class="keyword">if</span> (bNum &gt; tNum) &#123;</span><br><span class="line">        error = <span class="string">"birthday is future"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        age = <span class="built_in">Math</span>.floor((tNum - bNum) / <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">120</span>) &#123;</span><br><span class="line">            error = <span class="string">"too old"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        age,</span><br><span class="line">        error,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これであれば補完も利くし、<code>if (res.error)</code>みたいに条件分岐も簡単です。</p><p>オライリーのTypeScript本では、正常系のレスポンスと、Errorの合併型を返し、受け取り側でinstanceofを使って条件わけをしていました。オブジェクトのほうが利用コード側のタイプ数は少ないので個人的には好きかな、と思いました。思いっきりGo風に寄せるためにタプルを使うこともできますが、それよりはオブジェクトの方がもろもろ良い気がします（受け手が分割代入で変数名を自分でつけなければならない、エラーを返す時にundefinedを入れる必要があるetc）。</p><h1 id="型推論の途中での型演算"><a href="#型推論の途中での型演算" class="headerlink" title="型推論の途中での型演算"></a>型推論の途中での型演算</h1><p>推論中に型の演算を行いたい、例えば、入力されたオブジェクトと同一のキーを持つが、シグネチャが全く別の関数を持つオブジェクトを定義して、それを返り値に使いたいとします。ちょうど、Redux <code>createSlice</code> が、<code>reducers</code>で渡されたreducerが格納されたオブジェクトを引数にとって、同じキーのアクションが入ったオブジェクトを作って、返り値の<code>actions</code>に入れて返しています。</p><p>型推論の流れとしては、引数→返り値のよくある推論なのですが、同じ型<code>T</code>を使うのではなくて、ちょっとした演算が必要です。この場合は、引数→関数の型変数→返り値と、関数の型変数をワンクッション置けば良いようです。</p><p>ジェネリックな型定義を、型を引数に持つ関数と見立てて作成します。まずはReducersと、Actionsを作ります。模擬コードなのでアクションの引数はなし、とします。</p><p>Reducersは関数の引数で渡されるオブジェクトで、Actionsは返り値で使うオブジェクトです。引数側はシンプルです。ステートの型を引数にとったら、それを引数にとって、返り値として返す関数を持つオブジェクトです。Actionsの方は、引数のR(reducer)を引数ニトリ、それと同じ属性を持つオブジェクトで、オブジェクトの値の型は、オブジェクトを返す関数です。<code>{[P in keyof R]: 値の型}</code>で、同じキーを持つ値の型違いのオブジェクトを作り出しています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reducers&lt;S&gt; =  &#123;[key: <span class="built_in">string</span>]: <span class="function">(<span class="params">s: S</span>) =&gt;</span> S&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Actions&lt;R&gt; = &#123;[P <span class="keyword">in</span> keyof R]: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;&#125;;</span><br></pre></td></tr></table></figure><p>次にcreateStateを定義します。Sはオブジェクトです。先ほど定義したActionsとReducersを使って関数定義を組み立ててみます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createState</span>&lt;<span class="title">S</span> <span class="title">extends</span> </span>&#123;&#125;&gt;(state: S, reducers: Reducers&lt;S&gt;): &#123; actions: Actions&lt;Reducers&lt;S&gt;&gt; &#125; &#123;</span><br><span class="line">    <span class="keyword">const</span> actions = &#123;&#125; <span class="keyword">as</span> &#123;[key: <span class="built_in">string</span>]: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key of <span class="built_in">Object</span>.keys(reducers)) &#123;</span><br><span class="line">        actions[key] = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">return</span> &#123;&#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        actions: actions <span class="keyword">as</span> Actions&lt;Reducers&lt;S&gt;&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで完成でしょうか？実は違います。<code>Reducers</code>は「任意のキーを持つオブジェクト」です。reducersと、actionsで、それぞれ<code>Reducers</code>を使っていますが、それぞれが「任意のキーを持つオブジェクト」であり、この2つが同じキーを持つという保証はこの型定義では行われていません。そのため、actionsのどのキーをアクセスしてみても、エラーは検出されません。</p><p>2つの<code>Reducers&lt;S&gt;</code>を1つにします。ここで、関数の型パラメータに1つ型変数を追加します。<code>extends</code>は型における「=」みたいなものです。関数の型変数を一時的な型置き場に使っています。それを入力側と、返り値と同じ型パラメータを渡すことで、「この2つが同じオブジェクト」であることが表現できます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createState</span>&lt;<span class="title">S</span> <span class="title">extends</span> </span>&#123;&#125;, ReducersType <span class="keyword">extends</span> Reducers&lt;S&gt;&gt;(state: S, reducers: ReducersType): &#123; actions: Actions&lt;ReducersType&gt; &#125; &#123;</span><br><span class="line">    <span class="keyword">const</span> actions = &#123;&#125; <span class="keyword">as</span> &#123;[key: <span class="built_in">string</span>]: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key of <span class="built_in">Object</span>.keys(reducers)) &#123;</span><br><span class="line">        actions[key] = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">return</span> &#123;&#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        actions: actions <span class="keyword">as</span> Actions&lt;ReducersType&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、期待通りの、「同じキーを持つ別の型」をレスポンスの型に設定できました。</p><h1 id="これからのAPI設計"><a href="#これからのAPI設計" class="headerlink" title="これからのAPI設計"></a>これからのAPI設計</h1><p>Redux-ToolkitのAPI設計を見ると、コードを書くタイミングで、そのコードの環境（型推論用語です）がコーディングの手伝いをしてくれるようなAPIデザインになっています。</p><ul><li>コード補完がぱちっと決まる</li><li>推論が決まる(型変数を明示的に設定しなくてもいい)</li><li>エラーが即座に分かる</li><li>余計な型定義や定数定義などをしなくても済む、必要であっても、使う場所と定義位置がとても近い。</li></ul><p>一言で言えば、「記憶力をあまり必要としない」でコーディングができます。おそらく、同じアウトプットを産み出すための脳の酸素使用量が少ない、みたいな感じで「わかりやすいコード」は定量的に計測は可能な気がします。まあ試したことはないですが。</p><p>コード補完がばちっと決まって推論が決まるのは、anyやunknownになりにくい設計ですね。いろいろな型推論を紹介してきましたが、大きな流れとしては大きく2つですね。推論の起点となるのは、関数の引数とクラスコンストラクタの引数の2箇所です。基本的にはこの流れにうまく乗る、ということになります。</p><ul><li>引数→関数の型変数、返り値</li><li>コンストラクタの引数→クラスの型変数→メンバーメソッドの引数や返り値</li></ul><p>ReduxやRedux Toolkitを使うにあたって、ユーザーはStateは定義する必要があります。まあこれはReduxを使うユーザーの関心ごとそのものなので、これは良いでしょう。これを一度設計したらこれを最大限に活用できる、というのが目指す世界です。シンプルな入出力だけのライブラリであれば引数から推論をきちんとしましょう、で完結ですが、Redux-Toolkitとかのように、ユーザーが指定したデータ型を入力か出力に使うreducerのような（別の例だと、オブジェクト指向用語でいうところのテンプレートメソッドのホットスポット、あるいはGUIのイベントのハンドラ）コードを実装しなければならない場面が、そこそこ複雑なケースです。</p><p>Redux-Toolkitはオブジェクトを受け取る関数という形態でした。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> State = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: State = &#123;</span><br><span class="line">    name: <span class="string">"shibukawa"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">createSlice(initialState, &#123;</span><br><span class="line">    greeting: <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;s.name&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>人によっては「クラスを使ってイベントハンドラも定義したい」と思う方もいると思いますが、よくよく考えると、Redux-Toolkitスタイル以外は難しいことがわかります。</p><p>「関数の入ったオブジェクト」というのは、クラスがなかった時代にみんながオレオレクラス作っていたときによく見かけた悪い慣習ですが、TypeScript的には扱いやすいのです。関数のシグネチャを同一にそろえることが簡単です。型ユーティリティを使えば、オブジェクトのキー一覧が取得できます。ユーザーが定義したreducerのリストを使って、型補完を利用しながらactionsを作り出すこともできました。</p><p>クラスも一応、キーの一覧の取得までは可能です。ただ、取得はできても、ユーザーが任意の名前で定義する新しいメソッドに対して、特定のシグネチャを要求して、それ以外が作成されたら編集中にエラーを出す、というのはできないんじゃないですかね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">    methodA(a :State) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    methodB(a :State) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> keys = keyof A; <span class="comment">// "methodA" | "methodB"</span></span><br></pre></td></tr></table></figure><p>デスクトップGUI時代によく用いられていたテンプレートメソッドのように、固定の名前だけを許す場合にはクラスでも可能です。ReactやVue.jsのクラス方式のコンポーネントのライフサイクルメソッドはそれですね。しかし、各メソッドのシグニチャを強制することまではできません。reducersのように、任意のキーで定義を増やせるようなものは「関数を値に持つオブジェクト」にせざるをえないかな、と思います。</p><p>なお、JavaScriptユーザーを完全に無視するなら、別の方法もあります。AngularがDIを実現するのにつかっている（と思う）のが、tsconfigの<code>emitDecoratorMetadata</code>というオプションです。このオプションの裏では<a href="https://www.npmjs.com/package/reflect-metadata" target="_blank" rel="noopener">reflect-metadata</a>というパッケージが使われていて、型情報を動的に取得してさまざまなことを実現します。ただし、このメタデータを使った動的なロジックはエディタの補完やコーディング時のチェックはしてくれないので、型情報と推論を使った方がユーザービリティは高い気がします。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>TypeScriptの型というと、エラーチェック、ミスの削減、みたいな論調で語られることが99%ですが、使う人にとって使いやすいAPIというのを新しく作り出せるのではないか、ということで思考実験してみました。</p><p>JavaScript時代は型がなかったので、次のような設計もよく作られていました。あとはjQueryとかですね。その手の設計はJavaScript時代にはよかったかもしれませんが、TypeScript時代にはまた別の設計が必要と思っています。もちろん、↓のような型定義もできて、文字列の名前によってイベントハンドラの引数のEventの型が変わったり、返り値の型が変わったり（<code>createElement</code>のように）とか、その手の厳しい要件にも適合するようにTypeScriptでは機能を持っていたりもしますが（オライリーのプログラミングTypeScriptのP65あたり）、それはあくまでも過去と現在をつなげるためのものであって、未来に使う文法ではないと思うのですよね。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.on(<span class="string">"イベント名"</span>, イベントハンドラ)</span><br></pre></td></tr></table></figure><p>Vue.js 3も、今までのオブジェクトをダイレクトでコンポーネンントとしていた方向から、defineComponent関数の引数のオブジェクトで定義となりました。ベータ版のvue-cliだと、もともとTSとの相性が悪くなかったクラスの方がデフォルトになっており（選択肢がクラスベースのフォーマットを使うか(Y/n)となっており、エンター連打だとこちらではなく、クラスの方になる)、こちらがどれだけ普及するかは分からないですが、これもTypeScriptによりそった設計変更なんじゃないですかね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defineComponent(&#123;</span><br><span class="line">   <span class="comment">// ここなら補完やチェックがきく！</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JavaScript===TypeScriptが吐き出す物、フロントエンド開発者はTypeScriptしか書かないという時代にあわせたAPIデザインについて、一緒に考えていきましょう。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200730/top.png&quot;&gt;


&lt;p&gt;TypeScriptは、JavaScriptのさまざまなフリーダムな書き方を受け入れ、漸進的な型付けを行えるようにするという&lt;del&gt;狂った&lt;/del&gt;高難易度な目的のために作成されているのですが
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>AWS認定 Machine learning specialty 合格記</title>
    <link href="https://future-architect.github.io/articles/20200729/"/>
    <id>https://future-architect.github.io/articles/20200729/</id>
    <published>2020-07-28T15:00:00.000Z</published>
    <updated>2020-07-31T04:56:13.051Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>先日もう一人の伊藤さんが<a href="https://future-architect.github.io/articles/20200629/">Terraform Associate合格記</a>を書いてくれました。この記事に続いて資格の記事を書いてみようと思います。余談ですがこちらの伊藤さんとの区別がつくように自己紹介はフルネームで書いています。</p><p>私はAWSの資格を4つほど持っているのですが、今回は<a href="https://aws.amazon.com/jp/certification/certified-machine-learning-specialty/" target="_blank" rel="noopener">AWS認定 機械学習 - 専門知識</a>について紹介します。ちなみに機械学習の資格は実務経験0から2カ月ほど学習して合格しました。</p><p>前提知識0の人も対象になるような記事を目指して記載します。</p><img src="/images/20200729/badge.png" class="img-small-size"><h1 id="この記事の目的"><a href="#この記事の目的" class="headerlink" title="この記事の目的"></a>この記事の目的</h1><p>AWS認定試験で要求される知識、学習法についてまとめます。<br>大まかな概要、各分野の具体的な内容を記載していきます。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ol><li>AWS 認定 機械学習 – 専門知識とは</li><li>要求される知識</li><li>学習方法について</li><li>まとめ</li></ol><p><a id="anchor1"></a></p><h1 id="AWS-認定-機械学習-–-専門知識とは"><a href="#AWS-認定-機械学習-–-専門知識とは" class="headerlink" title="AWS 認定 機械学習 – 専門知識とは"></a>AWS 認定 機械学習 – 専門知識とは</h1><p>その名の通り、AI開発、データサイエンスを業務で行う人向けの資格試験です。<br>AWSの認定試験の中では珍しく、AWSのサービスに特化した試験ではなく機械学習の基礎知識も要求される点が特徴です。<br><a id="anchor2"></a></p><h1 id="要求される知識"><a href="#要求される知識" class="headerlink" title="要求される知識"></a>要求される知識</h1><p><a href="https://aws.amazon.com/jp/certification/certified-machine-learning-specialty/" target="_blank" rel="noopener">AWS認定の公式サイト</a>には下記のように書いてあります。</p><blockquote><p>認定によって検証される能力</p><ul><li>与えられたビジネスの問題に対し、適切な ML アプローチを選び、その理由を説明できる</li></ul></blockquote><ul><li>ML ソリューションの実装に適した AWS のサービスを選択する</li><li>スケーラビリティ、コスト効率、信頼性、安全性に優れた ML ソリューションを設計し、実装する</li></ul><blockquote><p>推奨される知識と経験</p><ul><li>AWS クラウドでの ML/深層学習ワークロードの開発、設計、実行における、1～2 年の経験</li></ul></blockquote><ul><li>基本的な ML アルゴリズムの基となる考えを表現する能力</li><li>基本的なハイパーパラメータ最適化の実践経験</li><li>ML および深層学習フレームワークの使用経験</li><li>モデルトレーニングのベストプラクティスを実行する能力</li><li>デプロイと運用のベストプラクティスを実行する能力</li></ul><p>自分の受験経験から要求される知識を下記のカテゴリに分類しました。</p><ul><li>目的に対し最適な機械学習アルゴリズムを選定するための知識</li><li>作成した機械学習モデルの性能を判定するための知識</li><li>データエンジニアリングに関する知識</li><li>分散処理システムの構築などインフラ寄りの知識</li><li>機械学習のAWSマネージドサービスに対する知識</li><li>サービスの構築、運用に関する知識</li></ul><h2 id="目的に対し最適な機械学習アルゴリズムを選定するための知識"><a href="#目的に対し最適な機械学習アルゴリズムを選定するための知識" class="headerlink" title="目的に対し最適な機械学習アルゴリズムを選定するための知識"></a>目的に対し最適な機械学習アルゴリズムを選定するための知識</h2><p>機械学習モデルにはさまざまな学習アルゴリズムが存在します。<br>機械学習を用いて課題を解決するために、目的に対し最適なアルゴリズムの選択を行う知識が要求されます。</p><p>例えば画像分類にはCNN(畳み込みニューラルネットワーク)が、時系列データの取り扱いにはRNN(再帰型ニューラルネットワーク)を選定できるような知識です。</p><p>言語処理に特化したアルゴリズム、音声処理における最適解など、目的から手段を導き出すためにはこれらのアルゴリズムがどのような分野を得意とするかを学ぶ必要があります。線形学習やロジスティック回帰など基礎的なアルゴリズムや、CNN、RNNの特徴、tf-idfなどの一般的な知識を理解できている事が要求されます。特に、<a href="https://aws.amazon.com/jp/sagemaker/" target="_blank" rel="noopener">Amazon SageMaker</a>で提供される組み込みアルゴリズムの概要を理解して、各アルゴリズムの特徴を理解する必要があります。</p><p>アルゴリズムの種類、概要は<a href="https://docs.aws.amazon.com/ja_jp/sagemaker/latest/dg/algos.html" target="_blank" rel="noopener">Amazon SageMakerのドキュメント</a>に記載されています。</p><p>例えば、ニュースの記事と要約のデータセットを学習させ、ニュース記事から要約を自動生成したい、というユースケースが出題され、4択程度のSageMaker組み込みアルゴリズムが選択肢として用意されます。<br>その中からSequence to Sequenceなどを選べるようになることが目的です。<br>例題</p><blockquote><p>カスタマーサポートのシステム構築を行っています。<br>お問い合わせの内容の類似性に基づいて、重複する質問を特定したいと考えています。<br>この問題の解決にどのSageMakerアルゴリズムが利用できますか。<br>A: BlazingText<br>B: Object2Vec<br>C: K-means<br>D: DeepAR</p></blockquote><blockquote><p>正解: B</p></blockquote><h2 id="作成した機械学習モデルの性能を判定するための知識"><a href="#作成した機械学習モデルの性能を判定するための知識" class="headerlink" title="作成した機械学習モデルの性能を判定するための知識"></a>作成した機械学習モデルの性能を判定するための知識</h2><p>機械学習モデルの性能を示す指標として、正確度（accuracy）、精度（precision）、再現率（recall）といった概念が存在します。少し高度なものではAUC、ROCなどの指標があります。</p><p>これらの指標や、指標の測定で用いるパラメータであるTP、FP、TN、FN(真陽性、偽陽性、真陰性、偽陰性)について理解することが求められます。TP、FP、TN、FNがテーブル形式でまとめられた表から精度を計算するような問題も出題されることがあります。（数字としてはその場で電卓を使わずに計算できるようなものです。）</p><p>また、構築したいソリューションにおいてどの指標が重要視されるのかを理解する必要があります。例えばスパムメールを検知する機械学習モデルにおいて最も重要視される指標は正確度、精度、再現率のうちどれかを答えるような問題が出題されます。</p><p>例題</p><blockquote><p>サブスクリプションサービスを提供するA社では、顧客の解約を防ぐため、顧客が解約する可能性があるかどうかを予測するモデルを2つ構築しました。<br>モデルAは、100の偽陰性（FN）と40の偽陽性（FP）で92％の精度です。<br>モデルBは、40のFNと100のFPで92％の精度でした。<br>2つのモデルのどちらがA社にとってコスト効果が高いでしょうか。</p><p>正解: モデルB</p></blockquote><h2 id="機械学習モデルの性能向上に関する知識"><a href="#機械学習モデルの性能向上に関する知識" class="headerlink" title="機械学習モデルの性能向上に関する知識"></a>機械学習モデルの性能向上に関する知識</h2><p>機械学習モデルの構築では、期待した性能のモデルを構築できない場合にその原因を推測する必要があります。</p><ul><li>機械学習モデルが過学習の状態に陥った際にデータにどのような前処理を施すか。</li><li>充分な数の学習データが集まっていない場合にどのような手段で性能の高い機械学習モデルを構築するか</li></ul><p>といったトピックに対する問題が出題されます。</p><p>正規化、正則化、データの水増し、箱ひげ図の読み取り方、学習率などハイパーパラメータの調整といった機械学習の知識が求められます。</p><p>例題</p><blockquote><p>作成した機械学習モデルが、トレーニングデータでは高精度であるが、テストデータに対して低精度であることに気付きました。<br>この問題の解決が見込める手法はどれでしょうか。<br>A: データの正則化処理を削除する<br>B: 使用するトレーニングデータを少なくする<br>C: データから利用する特徴量を減らす</p></blockquote><blockquote><p>正解: C</p></blockquote><h2 id="分散処理システムの構築などインフラ寄りの知識"><a href="#分散処理システムの構築などインフラ寄りの知識" class="headerlink" title="分散処理システムの構築などインフラ寄りの知識"></a>分散処理システムの構築などインフラ寄りの知識</h2><p>機械学習での分散処理システムに関する知識とは、<code>Apache</code>の<code>Hadoop</code>,<code>Hive</code>, <code>Spark</code>といった分散処理フレームワークに対する理解と換言する事ができます。</p><p>AWSのマネージドサービスとしては<code>Amazon EMR</code>、<code>AWS Glue</code>について理解していることが要求されます。またそれらのサービスと連携する<code>Amazon Athena</code>、<code>Amazon Kinesis</code>についての知識や、データウェアハウスとして<code>Amazon Redshift</code>、機械学習における<code>Amazon S3</code>の使用例が出題範囲に含まれます。</p><p>これらのサービスは実体験無しで各サービスの違いや挙動を理解するのがとても難しい分野ですが、出題されたユースケースに対し、どのようなサービスの組み合わせが最適か考えるような問題が出題されます。</p><p>例題:</p><blockquote><p>ソーシャルゲームの運用で、JSON形式の利用分析データを取り込むシステムの構築を行います。基盤となるインフラストラクチャを管理することを望んでおらず、データをすぐに利用できるようにしたいと考えています。ソリューションはコスト効率が高く、スケーラブルでなければなりません。どのようなソリューションが推奨されますか。</p></blockquote><blockquote><p>A:<br>Kinesis Data Streamsを使用してデータを取り込み、Lambda関数を使用してストリームをS3に保存します。<br>15分ごとにGlue ETLジョブを起動して、データをJSONからParquet形式に変換します。<br>AWS Glueクローラーを使用して、データをAthenaテーブルに読み込みます。</p></blockquote><blockquote><p>B:<br>S3への書き込み中にデータをParquet形式に変換する設定でKinesis Firehoseを使用してデータを取り込みます。<br>AWS Glueクローラーを使用して、データをAthenaテーブルに読み込みます。</p></blockquote><blockquote><p>正解: B</p></blockquote><h2 id="機械学習のAWSマネージドサービスに対する知識"><a href="#機械学習のAWSマネージドサービスに対する知識" class="headerlink" title="機械学習のAWSマネージドサービスに対する知識"></a>機械学習のAWSマネージドサービスに対する知識</h2><p><code>Amazon Sage Maker</code>、<code>Amazon EMR</code>などのマネージドサービスの詳細な利用方法について出題されることもあります。また、機械学習のノウハウがほとんど無い状態からでも機械学習サービスが提供可能になるような、マネージドな側面が極めて高いサービスに関する問題も出題されます。</p><p>テキスト分析に用いる<code>AMAZON COMPREHEND</code>、音声を文字起こしできる<code>AMAZON TRANSCRIBE</code>、時系列データの予測を行う<code>AMAZON FORECAST</code>…といった類のサービスです。<a href="https://aws.amazon.com/jp/machine-learning/" target="_blank" rel="noopener">aws公式サイト「AWS での機械学習」</a>のAI サービス一覧で紹介されています。<br>各サービスの概要、ユースケースを把握し、適切に選択できるように、また存在しないサービスがブラフとして選択肢に出現しても騙されないようしっかりと理解しておく必要があります。</p><p>概要レベルではなく、例えば<code>Amazon Transcribe</code>が対応している言語を把握しておき、非対応の言語の場合<code>Amazon Translate</code>で翻訳してから<code>Amazon Transcribe</code>にデータを受け渡すようなサービス構築が正解となるような深い理解が要求される問題も出題されます。<br>これらのサービスは日々新しいものが増え、既存のサービスも機能が追加されます、入念なキャッチアップが必要なジャンルです。</p><p>例題:</p><blockquote><p>顔写真から有名人を検出できるアプリを作成したいと考えています。<br>最小限の労力でこれをセットアップするのに役立つAWSサービスはどれですか。<br>A: Amazon Predict<br>B: Amazon Rekognition<br>C: Amazon Polly<br>D: Amazon Comprehend</p></blockquote><blockquote><p>正解: B</p></blockquote><h2 id="サービスの構築、運用に関する知識"><a href="#サービスの構築、運用に関する知識" class="headerlink" title="サービスの構築、運用に関する知識"></a>サービスの構築、運用に関する知識</h2><p>機械学習に直結する知識ではありませんが、ビジネスレベルでアプリケーションの構築を行う上でのAWSサービスの知識も問われることがあります。</p><p>具体的にはIAMの設定など、運用面で設定する必要のある項目について出題されます。</p><p>例題</p><blockquote><p>デフォルトのIAMロールを使用してSageMakerノートブックインスタンスを作成しました。S3のデータへのアクセスはどのように管理されますか？<br>A: デフォルトで使用可能なバケットはありません<br>B: 名前に「sagemaker」が含まれるバケットは、デフォルトの役割でアクセスできます<br>C: パブリックアクセスが有効なバケットは、デフォルトの役割でアクセスできます</p></blockquote><blockquote><p>正解: B</p></blockquote><p><a id="anchor3"></a></p><h1 id="学習方法について"><a href="#学習方法について" class="headerlink" title="学習方法について"></a>学習方法について</h1><p>ざっくりと内容を説明しましたが、合格への筋道は見えてきましたでしょうか。<br><code>ソリューションアーキテクト-アソシエイト</code>や<code>クラウドプラクティショナー</code>など、AWSの資格を持っていない方が最初に受ける傾向が高い試験は1冊読んでおけば合格できるような質の高い書籍が存在します。</p><p>しかし機械学習-専門知識は知識が広範かつAWSに特化した内容ではない部分も多く、まだ必要な知識を体系的にまとめた書籍が存在しません。<br>そういった意味でも厳しい試験ですが、参考までに自分が学習に利用した書籍、サービスを紹介します。</p><h2 id="そもそもAIに対する知識が無い人向け"><a href="#そもそもAIに対する知識が無い人向け" class="headerlink" title="そもそもAIに対する知識が無い人向け"></a>そもそもAIに対する知識が無い人向け</h2><p>AIに興味はあるものの実際にAIに触れたことがない、という方もいると思います。その状態から試験問題に特化した知識を詰め込み教育的手法で学ぶのは限界があります。急がば回れ、ということでまずは機械学習の概要から学んでいくと良いと思います。</p><p>AWSの試験に合格するには、Pythonの各種フレームワークを用いたコーディングレベルの知識や、具体的なアルゴリズムの数式についての知識は必要なく、概念的な部分を押さえておけばOKです。回帰、分類、線形分離といった概念から各種アルゴリズムを概念的に大まかに把握しておく程度の学習で、試験に必要な知識を学ぶ上で役に立つと思います。</p><p>前提知識を学ぶために機械学習初心者向けの本を１冊読んでおく事をお勧めします。<br>私は好奇心から<a href="https://www.amazon.co.jp/Python-%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E9%81%94%E4%BA%BA%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%82%B9%E3%83%88%E3%81%AB%E3%82%88%E3%82%8B%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%B7%B5-impress-gear/dp/4295003379/ref=asc_df_4295003379/?tag=jpgo-22&linkCode=df0&hvadid=295678107984&hvpos=&hvnetw=g&hvrand=17590793615228539759&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1009243&hvtargid=pla-524387980046&psc=1&language=ja_JP&th=1&psc=1" target="_blank" rel="noopener">Python 機械学習プログラミング 達人データサイエンティストによる理論と実践</a>という書籍を購入しました。</p><p>試験に対しては過剰なほど詳細に機械学習の概要が書いてあります、正直読むだけで一苦労でした。</p><h2 id="AWSに関する知識を学ぶ方法"><a href="#AWSに関する知識を学ぶ方法" class="headerlink" title="AWSに関する知識を学ぶ方法"></a>AWSに関する知識を学ぶ方法</h2><p>現状機械学習関連のサービスが書籍の形式でまとまっているものはありません。正攻法の手段としては下記のような流れで学習を進めていきます。</p><ul><li><a href="https://docs.aws.amazon.com/index.html" target="_blank" rel="noopener">公式ドキュメント</a>の機械学習のジャンルを読破する</li><li><a href="https://aws.amazon.com/jp/training/learning-paths/machine-learning/exam-preparation/" target="_blank" rel="noopener">機械学習: 試験準備</a>のページに従って学習を進めていく</li></ul><p>愚直に学習する時間の捻出が難しい場合、合格する自信が持てず副教材が必要な場合はudemyなどの学習サイトでカリキュラムや試験問題を購入することをお勧めします。</p><p><a id="anchor4"></a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>この記事が試験勉強の補助となれば、また試験を受けてみようと思っていただけるきっかけになれば幸いです。<br>学習のハードルは高めなので、ソリューションアーキテクトのように１冊の本にまとまる日が来てほしいですね。<br>関連記事としてフューチャー技術ブログの<a href="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</a>、<a href="https://future-architect.github.io/tags/MachineLearning/">Machine Learning</a>タグの記事も是非ご覧ください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;先日もう一人の伊藤さんが&lt;a href=&quot;https://future-architect.github.io/articles/20200629/&quot;&gt;Terraform Associate合格記&lt;/a&gt;を書いてくれました。この記事に続
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>DBスキーマを駆動にした開発のためのライブラリ調査</title>
    <link href="https://future-architect.github.io/articles/20200728/"/>
    <id>https://future-architect.github.io/articles/20200728/</id>
    <published>2020-07-27T15:00:00.000Z</published>
    <updated>2020-07-27T14:48:28.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Goでデータベースを扱う場合、<a href="https://github.com/go-gorm/gorm" target="_blank" rel="noopener">Gorm</a>, <a href="https://github.com/go-gorp/gorp" target="_blank" rel="noopener">Gorp</a>, <a href="https://github.com/jmoiron/sqlx" target="_blank" rel="noopener">sqlx</a> といった ORM がよく使われます。多くの場合は構造体のフィールドとデータベースのカラム名のマッピングをするタグ付きの構造体を実装します。例えば <code>Gorm</code> を用いて <code>users</code> テーブルにアクセスする場合、以下のような構造体が一例として考えられます。</p><figure class="highlight go"><figcaption><span>model_user.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">UserID    <span class="keyword">string</span>       <span class="string">`gorm:"column:user_id;primary_key"`</span></span><br><span class="line">UserName  <span class="keyword">string</span>       <span class="string">`gorm:"column:user_name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"users"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Gorm</code> や <code>Xorm</code> といった ORM を用いる場合、スキーマから構造体を生成できず、構造体の生成が面倒という問題があります。複数人で開発していたり、テーブルのカラム数が多かったり、テーブルの数が多い場合、スキーマから構造体を自動生成できるとよいな、と考えることでしょう。 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>また、当社のメンバと開発するとき SQL が書け適切に index を貼ったり、実行計画からチューニングできるメンバが多いです。素の SQL を書く or 書きたいケースが多く、メソッドチェーンでクエリを生成する <code>Gorm</code> などの ORM と相性が悪いと感じていました。</p><ul><li><strong>スキーマからテーブルのカラムとマッピングできる構造体を自動生成したい</strong></li><li><strong>任意のクエリから結果セットのカラムとマッピングできる構造体を自動生成したい</strong></li></ul><p>上記を満たすようなライブラリを探しつつ、今回は既に存在するデータベースのスキーマやクエリから構造体を生成することができる <code>xo</code> と <code>gen</code> を調査してみました。</p><ul><li><a href="https://github.com/xo/xo" target="_blank" rel="noopener">xo/xo</a></li><li><a href="https://github.com/smallnest/gen" target="_blank" rel="noopener">gen</a></li></ul><p><a href="https://github.com/volatiletech/sqlboiler" target="_blank" rel="noopener">SQLBoiler</a> や <a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">Xorm</a> は ORM として使われることが多いので対象から外しました。<code>SQLBoiler</code> や <code>Xorm</code> の所感は <a href="https://future-architect.github.io/articles/20190926/">Go言語のDBレイヤーライブラリの評価</a> の記事に記載しておりますので、あわせてご確認ください。</p><h2 id="概要サマリ"><a href="#概要サマリ" class="headerlink" title="概要サマリ"></a>概要サマリ</h2><p>今回調査するライブラリの2020/07/12時点のデータをもとにした概要サマリです。どちらのライブラリも継続的にメンテナンスされています。</p><table><thead><tr><th>Project Name</th><th>Stars</th><th>Forks</th><th>Open Issues</th><th>Description</th><th>Last Update</th></tr></thead><tbody><tr><td><a href="https://github.com/xo/xo" target="_blank" rel="noopener">xo</a></td><td>2503</td><td>224</td><td>91</td><td>Command line tool to generate idiomatic Go code for SQL databases supporting PostgreSQL, MySQL, SQLite, Oracle, and Microsoft SQL Server</td><td>2020-07-10 11:12:42</td></tr><tr><td><a href="https://github.com/smallnest/gen" target="_blank" rel="noopener">gen</a></td><td>565</td><td>105</td><td>3</td><td>Converts a database into gorm structs and RESTful api</td><td>2020-07-10 14:19:19</td></tr></tbody></table><ul><li>バージョン</li></ul><p>今回調査したバージョン情報は以下になります。<code>xo</code> はセマンティクスバージョニングされていなかったため、コミット ID を記載しています。</p><table><thead><tr><th>ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td><code>xo</code></td><td><code>7818603ff52bc0b96122715f9c7df7559aeef82d</code></td></tr><tr><td><code>gen</code></td><td><code>v0.9.24</code></td></tr></tbody></table><h2 id="サンプルプロジェクト"><a href="#サンプルプロジェクト" class="headerlink" title="サンプルプロジェクト"></a>サンプルプロジェクト</h2><p>本記事では <code>xo</code> のライブラリにサンプルとして記載されている <code>booktest</code> をサンプルのプロジェクトとして考えてみます。データベースは PostgreSQL を採用することとし、Docker を用いて以下のようにローカルに起動させておきます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --name my-postgres -e POSTGRES_USER&#x3D;booktest -e POSTGRES_PASSWORD&#x3D;pass -e POSTGRES_DB&#x3D;testdb -d -p 15432:5432 postgres</span><br></pre></td></tr></table></figure><p>データベースの ER 図は以下のようになります。</p><p><img src="/images/20200728/erd.png" alt=""></p><p>スキーマを作成する SQL は以下になります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- The MIT License (MIT)</span></span><br><span class="line"><span class="comment">-- </span></span><br><span class="line"><span class="comment">-- Copyright (c) 2015-2016 Kenneth Shaw</span></span><br><span class="line"><span class="comment">-- </span></span><br><span class="line"><span class="comment">-- https://github.com/xo/xo/blob/master/LICENSE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> booktest <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> books <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TYPE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> book_type <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">authors</span> <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> say_hello(<span class="built_in">text</span>) <span class="keyword">CASCADE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> booktest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">authors</span> (</span><br><span class="line">  author_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> authors_name_idx <span class="keyword">ON</span> <span class="keyword">authors</span>(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> book_type <span class="keyword">AS</span> ENUM (</span><br><span class="line">  <span class="string">'FICTION'</span>,</span><br><span class="line">  <span class="string">'NONFICTION'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books (</span><br><span class="line">  book_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  author_id <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">REFERENCES</span> <span class="keyword">authors</span>(author_id),</span><br><span class="line">  isbn <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  booktype book_type <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'FICTION'</span>,</span><br><span class="line">  title <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="keyword">year</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">2000</span>,</span><br><span class="line">  available <span class="built_in">timestamp</span> <span class="keyword">with</span> <span class="built_in">time</span> zone <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'NOW()'</span>,</span><br><span class="line">  tags <span class="built_in">varchar</span>[] <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'&#123;&#125;'</span>,</span><br><span class="line">  memo <span class="built_in">text</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> books_title_idx <span class="keyword">ON</span> books(title, <span class="keyword">year</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> say_hello(<span class="built_in">text</span>) <span class="keyword">RETURNS</span> <span class="built_in">text</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">RETURN</span> <span class="keyword">CONCAT</span>(<span class="string">'hello '</span>, $<span class="number">1</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> books_title_lower_idx <span class="keyword">ON</span> books(title);</span><br></pre></td></tr></table></figure><h2 id="xo"><a href="#xo" class="headerlink" title="xo"></a>xo</h2><p><code>xo</code> はデータベースのスキーマや任意の SQL からデータベースにアクセスする Go のコードを生成するライブラリです。生成するコードはテンプレートファイルを使って柔軟にカスタマイズできます。ORM を目指したライブラリではなく、静的に型付けされた Go らしいコードを生成することを目的の 1 つとしています。</p><p>まずは <code>xo</code> を試してみます。ディレクトリ構成は以下です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.mod</span><br><span class="line">├── main.go</span><br><span class="line">└── generated</span><br></pre></td></tr></table></figure><p>さっそく <code>xo</code> をインストールします。2020/07/13現在、セマンティクスバージョニングはされていないため、master ブランチの最新のコミット(<code>7818603ff52bc0b96122715f9c7df7559aeef82d</code>) を用います。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com&#x2F;xo&#x2F;xo</span><br></pre></td></tr></table></figure><p>生成先のディレクトリ名は <code>generated</code> とします。<code>xo</code> コマンドを用いて、構造体を生成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xo pgsql:&#x2F;&#x2F;booktest:pass@localhost:15432&#x2F;testdb?sslmode&#x3D;disable --schema booktest --out generated</span><br></pre></td></tr></table></figure><p><code>generated</code> ディレクトリ配下にいくつかファイルが生成されました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── generated</span><br><span class="line">│   ├── author.xo.go</span><br><span class="line">│   ├── book.xo.go</span><br><span class="line">│   ├── booktype.xo.go</span><br><span class="line">│   ├── sp_sayhello.xo.go</span><br><span class="line">│   └── xo_db.xo.go</span><br><span class="line">├── go.mod</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p>生成されたファイル <code>author.xo.go</code> を確認します。ファイルの構成は、大きく SELECT を扱うクエリ用の関数と、それ以外の INSERT, UPDATE, DELETE といったクエリを扱うメソッドと 2 種類に大別できます。</p><h3 id="SELECT系"><a href="#SELECT系" class="headerlink" title="SELECT系"></a>SELECT系</h3><p>SELECT を扱うクエリでは以下の 2 つの関数が生成されています。</p><ul><li><code>AuthorsByName(db XODB, name string) ([]*Author, error)</code> </li><li><code>AuthorByAuthorID(db XODB, authorID int) (*Author, error)</code></li></ul><p>それぞれ関数のドキュメントからデータベースに貼られた index をもとに生成されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AuthorsByName retrieves a row from 'booktest.authors' as a Author.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from index 'authors_name_idx'.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorsByName</span><span class="params">(db XODB, name <span class="keyword">string</span>)</span> <span class="params">([]*Author, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AuthorByAuthorID retrieves a row from 'booktest.authors' as a Author.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from index 'authors_pkey'.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorByAuthorID</span><span class="params">(db XODB, authorID <span class="keyword">int</span>)</span> <span class="params">(*Author, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>関数内に SQL が明示的に記述されていて安心感があります。また index から生成されているので、概ねクエリは高速に動作するでしょう。ただし関数のシグネチャや、データベースアクセスするメソッドのシグネチャから分かるように <code>Context</code> を引数に受け取ることができません。多くのケースでは <code>Context</code> を引き回すケースが一般的ですので、Context 対応はテンプレートなどを用いて拡張する必要がありそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AuthorByAuthorID retrieves a row from 'booktest.authors' as a Author.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from index 'authors_pkey'.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorByAuthorID</span><span class="params">(db XODB, authorID <span class="keyword">int</span>)</span> <span class="params">(*Author, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql query</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`SELECT `</span> +</span><br><span class="line"><span class="string">`author_id, name `</span> +</span><br><span class="line"><span class="string">`FROM booktest.authors `</span> +</span><br><span class="line"><span class="string">`WHERE author_id = $1`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run query</span></span><br><span class="line">XOLog(sqlstr, authorID)</span><br><span class="line">a := Author&#123;</span><br><span class="line">_exists: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = db.QueryRow(sqlstr, authorID).Scan(&amp;a.AuthorID, &amp;a.Name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;a, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="INSERT-UPDATE-DELETE系"><a href="#INSERT-UPDATE-DELETE系" class="headerlink" title="INSERT/UPDATE/DELETE系"></a>INSERT/UPDATE/DELETE系</h3><p>INSERT のクエリも SELECT と同様に、INSERT するメソッドが生成されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Author represents a row from 'booktest.authors'.</span></span><br><span class="line"><span class="keyword">type</span> Author <span class="keyword">struct</span> &#123;</span><br><span class="line">AuthorID <span class="keyword">int</span>    <span class="string">`json:"author_id"`</span> <span class="comment">// author_id</span></span><br><span class="line">Name     <span class="keyword">string</span> <span class="string">`json:"name"`</span>      <span class="comment">// name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// xo fields</span></span><br><span class="line">_exists, _deleted <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert inserts the Author to the database.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Author)</span> <span class="title">Insert</span><span class="params">(db XODB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// if already exist, bail</span></span><br><span class="line"><span class="keyword">if</span> a._exists &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"insert failed: already exists"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql insert query, primary key provided by sequence</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`INSERT INTO booktest.authors (`</span> +</span><br><span class="line"><span class="string">`name`</span> +</span><br><span class="line"><span class="string">`) VALUES (`</span> +</span><br><span class="line"><span class="string">`$1`</span> +</span><br><span class="line"><span class="string">`) RETURNING author_id`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run query</span></span><br><span class="line">XOLog(sqlstr, a.Name)</span><br><span class="line">err = db.QueryRow(sqlstr, a.Name).Scan(&amp;a.AuthorID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set existence</span></span><br><span class="line">a._exists = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UPDATE, UPSERT, DELETE 用のメソッドも生成されます。本記事では割愛します。</p><h3 id="その他特徴"><a href="#その他特徴" class="headerlink" title="その他特徴"></a>その他特徴</h3><p><code>xo</code> で特徴的な機能は、任意のクエリをもとに構造体を生成できる点です。<code>books</code> テーブルと <code>authors</code> テーブルを JOIN して <code>books</code> の <code>title</code> で文字列検索するクエリの例を考えてみます。以下は <code>xo</code> のコマンド例です。SQL を記述して構造体を生成できます。オプションの詳細は <a href="https://github.com/xo/xo/blob/master/README.md#command-line-options" target="_blank" rel="noopener">README.md</a> を参照ください。 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xo pgsql://booktest:pass@localhost:15432/testdb?sslmode=<span class="built_in">disable</span> -N -M -B -T AuthorBookResult --query-type-comment=<span class="string">'AuthorBookResult is the result of a search.'</span> -o generated &lt;&lt; ENDSQL</span><br><span class="line">SELECT</span><br><span class="line">  a.author_id AS author_id,</span><br><span class="line">  a.name AS author_name,</span><br><span class="line">  b.book_id AS book_id,</span><br><span class="line">  b.isbn AS book_isbn,</span><br><span class="line">  b.title AS book_title,</span><br><span class="line">  b.tags AS book_tags,</span><br><span class="line">  b.memo AS book_memo</span><br><span class="line">FROM books b</span><br><span class="line">JOIN authors a ON a.author_id = b.author_id</span><br><span class="line">WHERE b.title LIKE %%title string%%</span><br><span class="line">ENDSQL</span><br></pre></td></tr></table></figure><p>コマンドを実装すると <code>authorbookresult.xo.go</code> というファイルが生成されます。以下のようにコマンドに記述したクエリとデータベースから取得するカラムのレコードを保持する構造体が生成されます。SQL にパラメータとして渡す変数の型は、<code>xo</code> のコマンドに記述する SQL の内に <code>int</code>, <code>string</code> などとして明示的に記述する必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package generated contains the types for schema 'public'.</span></span><br><span class="line"><span class="keyword">package</span> generated</span><br><span class="line"></span><br><span class="line"><span class="comment">// Code generated by xo. DO NOT EDIT.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AuthorBookResult is the result of a search.</span></span><br><span class="line"><span class="keyword">type</span> AuthorBookResult <span class="keyword">struct</span> &#123;</span><br><span class="line">AuthorID   <span class="keyword">int</span>         <span class="comment">// author_id</span></span><br><span class="line">AuthorName <span class="keyword">string</span>      <span class="comment">// author_name</span></span><br><span class="line">BookID     <span class="keyword">int</span>         <span class="comment">// book_id</span></span><br><span class="line">BookIsbn   <span class="keyword">string</span>      <span class="comment">// book_isbn</span></span><br><span class="line">BookTitle  <span class="keyword">string</span>      <span class="comment">// book_title</span></span><br><span class="line">BookTags   StringSlice <span class="comment">// book_tags</span></span><br><span class="line">BookMemo   <span class="keyword">string</span>      <span class="comment">// book_memo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AuthorBookResultsByTitle runs a custom query, returning results as AuthorBookResult.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorBookResultsByTitle</span><span class="params">(db XODB, title <span class="keyword">string</span>)</span> <span class="params">([]*AuthorBookResult, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql query</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`SELECT `</span> +</span><br><span class="line"><span class="string">`a.author_id AS author_id, `</span> +</span><br><span class="line"><span class="string">`a.name AS author_name, `</span> +</span><br><span class="line"><span class="string">`b.book_id AS book_id, `</span> +</span><br><span class="line"><span class="string">`b.isbn AS book_isbn, `</span> +</span><br><span class="line"><span class="string">`b.title AS book_title, `</span> +</span><br><span class="line"><span class="string">`b.tags AS book_tags, `</span> +</span><br><span class="line"><span class="string">`b.memo AS book_memo `</span> +</span><br><span class="line"><span class="string">`FROM books b `</span> +</span><br><span class="line"><span class="string">`JOIN authors a ON a.author_id = b.author_id `</span> +</span><br><span class="line"><span class="string">`WHERE b.title LIKE $1`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run query</span></span><br><span class="line">XOLog(sqlstr, title)</span><br><span class="line">q, err := db.Query(sqlstr, title)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> q.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// load results</span></span><br><span class="line">res := []*AuthorBookResult&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> q.Next() &#123;</span><br><span class="line">abr := AuthorBookResult&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// scan</span></span><br><span class="line">err = q.Scan(&amp;abr.AuthorID, &amp;abr.AuthorName, &amp;abr.BookID, &amp;abr.BookIsbn, &amp;abr.BookTitle, &amp;abr.BookTags, &amp;abr.BookMemo)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">append</span>(res, &amp;abr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>余談ですが、カスタム SQL から構造体を生成する場合、<code>-- hogehoge</code> というコメントの記述はできません。生成される SQL が壊れます。以下のように、実行時のログを以下のようにして出力すると明らかです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generated.XOLog = log.Printf</span><br></pre></td></tr></table></figure><ul><li>実行結果例</li></ul><p>文字列結合した SQL ですが、<code>--</code> によって意図しない範囲の記述までコメントアウトされてしまいます。<code>/* hogehoge */</code> とコメントを記述すれば OK です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020/07/14 21:59:00 SELECT a.author_id AS author_id, a.name AS author_name, b.book_id AS book_id, b.isbn AS book_isbn, b.title AS book_title, b.tags AS book_tags, -- memo is memo b.memo AS book_memo FROM books b JOIN authors a ON a.author_id = b.author_id WHERE</span><br><span class="line"> b.title LIKE <span class="variable">$1</span>%!(EXTRA string=hoge)</span><br></pre></td></tr></table></figure><h3 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h3><ul><li>Good<ul><li>SQL が文字列として明示されていて、どのようなクエリが発行されるか分かる</li><li>クエリを扱う関数やメソッドが扱う型を明示していて扱いやすい</li></ul></li><li>Bad<ul><li>デフォルトで生成されたクエリは Context を扱うことができず、<code>Context</code> を使う場合、テンプレートの実装が必要</li><li>生成されたクエリを <code>psql</code> などで接続してコンソールから直接実行したい場合、文字列結合されたクエリを連結させる必要があり手間</li><li>カスタムクエリでパラメータを使う場合、独自の記述方法が必要。またパラメータ内に Go の型を埋め込む必要があり、煩雑</li><li>カスタムクエリを使う場合、SQL にコメント <code>-- hogehoge</code> が記載されていると、生成されるクエリが壊れる</li></ul></li></ul><h2 id="gen"><a href="#gen" class="headerlink" title="gen"></a>gen</h2><p>続いて <code>gen</code> です。<code>gen</code> はデータベースのスキーマメタデータをもとにしてデータベース(特に <code>Gorm</code>)とマッピング可能な構造体のコードを生成できます。</p><p><code>gen</code> をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/smallnest/gen@v0.9.24</span><br></pre></td></tr></table></figure><p>プロジェクト構成は <code>xo</code> を試したときと同様に以下のようにしておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.mod</span><br><span class="line">├── main.go</span><br><span class="line">└── generated</span><br></pre></td></tr></table></figure><p><code>gen</code> コマンドで構造体を生成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gen --connstr=<span class="string">"host=localhost port=15432 user=booktest password=pass dbname=testdb sslmode=disable"</span> --out generated --sqltype postgres --database testdb --no-json --overwrite</span><br><span class="line">table: books unable to generate struct field: tags <span class="built_in">type</span>: _VARCHAR error: unknown sql <span class="built_in">type</span>: _varchar</span><br><span class="line">Generating code <span class="keyword">for</span> the following tables (2)</span><br><span class="line">[0] authors</span><br><span class="line">[1] books</span><br></pre></td></tr></table></figure><p><code>generated</code> ディレクトリ配下に <code>model</code> というディレクトリが生成され、ディレクトリの中に <code>authors.go</code>、<code>books.go</code> と <code>model_base.go</code> という 3 つのファイルが生成されました。<code>books</code> テーブルの <code>tags</code> カラムのデータ型は <code>varchar[]</code> 型でしたが、<code>gen</code> で生成するとエラーになり、生成された構造体にはフィールドが存在しませんでした。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── generated</span><br><span class="line">│   └── model</span><br><span class="line">│       ├── authors.go</span><br><span class="line">│       ├── books.go</span><br><span class="line">│       └── model_base.go</span><br><span class="line">├── go.mod</span><br><span class="line">└── go.sum</span><br></pre></td></tr></table></figure><p><code>gen</code> ではデータベースのデータ型と構造体の型をマッピングする json ファイルを用意し、コマンド実行時にパラメータ <code>--mapping=</code> でファイルを指定することで任意の型のマッピングが可能になります。お手軽かつ柔軟にカスタマイズできる点は非常に良いと感じています。カラムが NULL を許容するかどうかで NULL を扱える型が生成できる点も嬉しいポイントです。ただし <a href="https://github.com/smallnest/gen/blob/v0.9.24/template/mapping.json" target="_blank" rel="noopener">mapping.json</a> をローカルにダウンロードし、以下のマッピング情報を追加して <code>gen</code> コマンドを実行時にファイルを指定しても</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sql_type"</span>: <span class="string">"varchar[]"</span>,</span><br><span class="line">  <span class="attr">"go_type"</span>: <span class="string">"[]string"</span>,</span><br><span class="line">  <span class="attr">"json_type"</span>: <span class="string">"Text"</span>,</span><br><span class="line">  <span class="attr">"protobuf_type"</span>: <span class="string">"[]string"</span>,</span><br><span class="line">  <span class="attr">"guregu_type"</span>: <span class="string">"null.String"</span>,</span><br><span class="line">  <span class="attr">"go_nullable_type"</span>: <span class="string">"[]sql.NullString"</span>,</span><br><span class="line">  <span class="attr">"swagger_type"</span>: <span class="string">"string"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>table: books unable to generate struct field: tags type: _VARCHAR error: unknown sql type: _varchar</code> というエラーは出力されてしまい、フィールドは生成されませんでした。謎のハックですが、エラーメッセージを確認し、以下のように <code>_varchar</code> 型とするとうまく生成できます。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line"><span class="deletion">-     "sql_type": "varchar[]",</span></span><br><span class="line"><span class="addition">+     "sql_type": "_varchar",</span></span><br><span class="line">      "go_type": "[]string",</span><br><span class="line">      "json_type": "Text",</span><br><span class="line">      "protobuf_type": "[]string",</span><br><span class="line">      "guregu_type": "null.String",</span><br><span class="line">      "go_nullable_type": "[]sql.NullString",</span><br><span class="line">      "swagger_type": "string"</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>さて <code>books.go</code> は以下のようなファイルです。デフォルトだと <code>guregu/null</code> や <code>satori/go.uuid</code> といったモジュールを要求されます。テンプレートで拡張の余地がありそうです。</p><figure class="highlight go"><figcaption><span>books.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/guregu/null"</span></span><br><span class="line"><span class="string">"github.com/satori/go.uuid"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">_ = time.Second</span><br><span class="line">_ = sql.LevelDefault</span><br><span class="line">_ = null.Bool&#123;&#125;</span><br><span class="line">_ = uuid.UUID&#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">DB Table Details</span></span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Table: books</span></span><br><span class="line"><span class="comment">[ 0] book_id                                        INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line"><span class="comment">[ 1] author_id                                      INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line"><span class="comment">[ 2] isbn                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line"><span class="comment">[ 3] booktype                                       USER_DEFINED         null: false  primary: false  isArray: false  auto: false  col: USER_DEFINED    len: -1      default: ['FICTION']</span></span><br><span class="line"><span class="comment">[ 4] title                                          TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line"><span class="comment">[ 5] year                                           INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: [2000]</span></span><br><span class="line"><span class="comment">[ 6] available                                      TIMESTAMPTZ          null: false  primary: false  isArray: false  auto: false  col: TIMESTAMPTZ     len: -1      default: ['2020-07-14 00:11:49.494152+00']</span></span><br><span class="line"><span class="comment">[ 7] tags                                           _VARCHAR             null: false  primary: false  isArray: false  auto: false  col: _VARCHAR        len: -1      default: ['&#123;&#125;']</span></span><br><span class="line"><span class="comment">[ 8] memo                                           TEXT                 null: true   primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: []</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JSON Sample</span></span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line"><span class="comment">&#123;    "booktype": 46,    "title": "EBVYCwqfRlayFOFOmrVgcynTE",    "year": 11,    "available": "2272-12-29T02:27:30.083660182+09:00",    "tags": "VHTlEZoMqhtKpSMUrcdhBiUxj",    "book_id": 14,    "author_id": 44,    "isbn": "gxvRbsFhNSFstWgOZBWVeGWvX"&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Books struct is a row record of the books table in the testdb database</span></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//[ 0] book_id                                        INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">BookID <span class="keyword">int32</span></span><br><span class="line"><span class="comment">//[ 1] author_id                                      INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">AuthorID <span class="keyword">int32</span></span><br><span class="line"><span class="comment">//[ 2] isbn                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Isbn <span class="keyword">string</span></span><br><span class="line"><span class="comment">//[ 3] booktype                                       USER_DEFINED         null: false  primary: false  isArray: false  auto: false  col: USER_DEFINED    len: -1      default: ['FICTION']</span></span><br><span class="line">Booktype <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//[ 4] title                                          TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Title <span class="keyword">string</span></span><br><span class="line"><span class="comment">//[ 5] year                                           INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: [2000]</span></span><br><span class="line">Year <span class="keyword">int32</span></span><br><span class="line"><span class="comment">//[ 6] available                                      TIMESTAMPTZ          null: false  primary: false  isArray: false  auto: false  col: TIMESTAMPTZ     len: -1      default: ['2020-07-14 00:11:49.494152+00']</span></span><br><span class="line">Available time.Time</span><br><span class="line"><span class="comment">//[ 8] memo                                           TEXT                 null: true   primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: []</span></span><br><span class="line">Memo sql.NullString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> booksTableInfo = &amp;TableInfo&#123;</span><br><span class="line">Name: <span class="string">"books"</span>,</span><br><span class="line">Columns: []*ColumnInfo&#123;</span><br><span class="line"></span><br><span class="line">&amp;ColumnInfo&#123;</span><br><span class="line">Index:              <span class="number">0</span>,</span><br><span class="line">Name:               <span class="string">"book_id"</span>,</span><br><span class="line">Comment:            <span class="string">``</span>,</span><br><span class="line">Notes:              <span class="string">``</span>,</span><br><span class="line">Nullable:           <span class="literal">false</span>,</span><br><span class="line">DatabaseTypeName:   <span class="string">"INT4"</span>,</span><br><span class="line">DatabaseTypePretty: <span class="string">"INT4"</span>,</span><br><span class="line">IsPrimaryKey:       <span class="literal">true</span>,</span><br><span class="line">IsAutoIncrement:    <span class="literal">false</span>,</span><br><span class="line">IsArray:            <span class="literal">false</span>,</span><br><span class="line">ColumnType:         <span class="string">"INT4"</span>,</span><br><span class="line">ColumnLength:       <span class="number">-1</span>,</span><br><span class="line">GoFieldName:        <span class="string">"BookID"</span>,</span><br><span class="line">GoFieldType:        <span class="string">"int32"</span>,</span><br><span class="line">JSONFieldName:      <span class="string">"book_id"</span>,</span><br><span class="line">ProtobufFieldName:  <span class="string">"book_id"</span>,</span><br><span class="line">ProtobufType:       <span class="string">"int32"</span>,</span><br><span class="line">ProtobufPos:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line">&amp;ColumnInfo&#123;</span><br><span class="line">Index:              <span class="number">8</span>,</span><br><span class="line">Name:               <span class="string">"memo"</span>,</span><br><span class="line">Comment:            <span class="string">``</span>,</span><br><span class="line">Notes:              <span class="string">``</span>,</span><br><span class="line">Nullable:           <span class="literal">true</span>,</span><br><span class="line">DatabaseTypeName:   <span class="string">"TEXT"</span>,</span><br><span class="line">DatabaseTypePretty: <span class="string">"TEXT"</span>,</span><br><span class="line">IsPrimaryKey:       <span class="literal">false</span>,</span><br><span class="line">IsAutoIncrement:    <span class="literal">false</span>,</span><br><span class="line">IsArray:            <span class="literal">false</span>,</span><br><span class="line">ColumnType:         <span class="string">"TEXT"</span>,</span><br><span class="line">ColumnLength:       <span class="number">-1</span>,</span><br><span class="line">GoFieldName:        <span class="string">"Memo"</span>,</span><br><span class="line">GoFieldType:        <span class="string">"sql.NullString"</span>,</span><br><span class="line">JSONFieldName:      <span class="string">"memo"</span>,</span><br><span class="line">ProtobufFieldName:  <span class="string">"memo"</span>,</span><br><span class="line">ProtobufType:       <span class="string">"string"</span>,</span><br><span class="line">ProtobufPos:        <span class="number">9</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TableName sets the insert table name for this struct type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"books"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeforeSave invoked before saving, return an error if field is not populated.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">BeforeSave</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare invoked before saving, can be used to populate fields etc.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">Prepare</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate invoked before performing action, return an error if field is not populated.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">Validate</span><span class="params">(action Action)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TableInfo return table meta data</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">TableInfo</span><span class="params">()</span> *<span class="title">TableInfo</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> booksTableInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Gorm</code> を意識したライブラリになっており、<code>gen</code> コマンドに <code>--gorm</code> というパラメータを付与すると生成する構造体に <code>Gorm</code> のタグが付与されます。<code>authors.go</code> ファイルに付与されたタグは以下のようなものです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Authors struct is a row record of the authors table in the testdb database</span></span><br><span class="line"><span class="keyword">type</span> Authors <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//[ 0] author_id                                      INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">AuthorID <span class="keyword">int32</span> <span class="string">`gorm:"primary_key;column:author_id;type:INT4;"`</span></span><br><span class="line"><span class="comment">//[ 1] name                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`gorm:"column:name;type:TEXT;default:'';"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gorm:&quot;primary_key;column:author_id;type:INT4;&quot;</code> といったタグが付与されています。構造体のメソッドとして付与されている <code>TableName()</code> メソッドもおそらく <code>Gorm</code> を意識したものでしょう。以下のような <code>TableName()</code> メソッドを実装すると <code>Gorm</code> のテーブル名として <code>string</code> の文字列が使用されます。以下の場合テーブル名は <code>authors</code> です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TableName sets the insert table name for this struct type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Authors)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"authors"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに <code>Gorm</code> の構造体として生成されるタグですが、外部キーは付与されませんでした。<code>books</code> テーブルにおける <code>author_id</code> は <code>authors</code> の外部キーですが、<code>Gorm</code> の構造体を見ると、外部キーであるタグは付与されていません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Books struct is a row record of the books table in the testdb database</span></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//[ 0] book_id                                        INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">BookID <span class="keyword">int32</span> <span class="string">`gorm:"primary_key;column:book_id;type:INT4;"`</span></span><br><span class="line"><span class="comment">//[ 1] author_id                                      INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">AuthorID <span class="keyword">int32</span> <span class="string">`gorm:"column:author_id;type:INT4;"`</span></span><br><span class="line"><span class="comment">//[ 2] isbn                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Isbn <span class="keyword">string</span> <span class="string">`gorm:"column:isbn;type:TEXT;default:'';"`</span></span><br><span class="line"><span class="comment">//[ 3] booktype                                       USER_DEFINED         null: false  primary: false  isArray: false  auto: false  col: USER_DEFINED    len: -1      default: ['FICTION']</span></span><br><span class="line">Booktype <span class="keyword">interface</span>&#123;&#125; <span class="string">`gorm:"column:booktype;"`</span></span><br><span class="line"><span class="comment">//[ 4] title                                          TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Title <span class="keyword">string</span> <span class="string">`gorm:"column:title;type:TEXT;default:'';"`</span></span><br><span class="line"><span class="comment">//[ 5] year                                           INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: [2000]</span></span><br><span class="line">Year <span class="keyword">int32</span> <span class="string">`gorm:"column:year;type:INT4;default:2000;"`</span></span><br><span class="line"><span class="comment">//[ 6] available                                      TIMESTAMPTZ          null: false  primary: false  isArray: false  auto: false  col: TIMESTAMPTZ     len: -1      default: ['2020-07-14 00:11:49.494152+00']</span></span><br><span class="line">Available time.Time <span class="string">`gorm:"column:available;type:TIMESTAMPTZ;default:'2020-07-14 00:11:49.494152+00';"`</span></span><br><span class="line"><span class="comment">//[ 8] memo                                           TEXT                 null: true   primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: []</span></span><br><span class="line">Memo sql.NullString <span class="string">`gorm:"column:memo;type:TEXT;"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所感-1"><a href="#所感-1" class="headerlink" title="所感"></a>所感</h3><ul><li>Good<ul><li><code>Gorm</code> や <code>db</code> といった ORM と連携できるタグが付与された構造体を生成できる</li><li>拡張できる点が多く、柔軟にカスタマイズできる</li></ul></li><li>Bad<ul><li>デフォルトだと生成される構造体がやや重厚</li><li><code>varchar[]</code> 型があるテーブルから構造体を生成した場合にエラーが発生するなど、デフォルトでは扱えないデータ型がある</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>スキーマからクエリを扱う関数やメソッド、構造体を生成するライブラリを調査しました</p><p><code>xo</code> は <code>SQLBoiler</code> と同じような系統で、スキーマや SQL をからデータベースアクセス可能な関数やメソッドを生成します。<code>gen</code> はスキーマから構造体を生成するライブラリです。<code>Gorm</code> や <code>sqlx</code> といった ORM などと一緒に使う必要があるでしょう。</p><p>いずれにしてもスキーマから構造体を生成できる点は開発体験として良いと感じています。<code>xo</code> も <code>gen</code> も特徴的で、興味深いライブラリです。ただし、プロジェクトの開発に組み込んでいくにはテンプレートの拡張などいくつか工夫は必要だと感じました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">スキーマを変更した場合、構造体の生成だけでなくマイグレーション管理が必要ですが、本記事ではマイグレーションの話は割愛します。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Goでデータベースを扱う場合、&lt;a href=&quot;https://github.com/go-gorm/gorm&quot; targe
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>GoからAWS KinesisのAggregationFormatを利用する</title>
    <link href="https://future-architect.github.io/articles/20200727/"/>
    <id>https://future-architect.github.io/articles/20200727/</id>
    <published>2020-07-26T15:00:00.000Z</published>
    <updated>2020-07-27T00:25:08.109Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載企画</a>の8回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。ここ数年は産業向けのIoT（例えば工場IoTやモビリティIoT）を行っています。<a href="https://future-architect.github.io/articles/20191023/">工場をハックするための基本知識</a>や<a href="https://future-architect.github.io/articles/20200422/">PyConJP 2019に登壇しました</a> の記事を書いた栗田さんや、<a href="https://future-architect.github.io/articles/20191201/">SORACOM USBドングルの自動接続</a> の記事を書いた棚井さんと同じチームに所属しています。</p><p><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載企画</a> の第8弾目として、Serverlessの代表格であるAWS LambdaでGoを用いてKinesisに対するKPL/KCL相当の処理についてまとめていきます。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某IoTをテーマとした案件で、Kinesisを用いたストリーミングETLなパイプラインを構築するにあたって、下図のようにKinesisの後段はGoとLambdaを採用しました。Kinesisが多段になっているのは、Rawデータと加工済みデータを別システムで利用したかったためです。</p><p><img src="/images/20200727/abstract.png" alt=""></p><p>最初にKinesisにPublishするECSはJavaのKPL（Kinesis Producer Library）を用いており、当然Aggregation Format(後述します)を利用していますが、後続のGoアプリでレコードを <strong>DeAggregation</strong> する処理と、後続のKinesisへの再度レコードを <strong>Aggregation</strong> する方法があまり見当たらなかったので、実装例を残します。</p><p>このエントリーで記載しているコードは以下のリポジトリに記載しています。</p><p><a href="https://github.com/laqiiz/go-kinesis-aggr-example" target="_blank" rel="noopener">https://github.com/laqiiz/go-kinesis-aggr-example</a></p><h1 id="Kineis-Data-Streamとは"><a href="#Kineis-Data-Streamとは" class="headerlink" title="Kineis Data Streamとは"></a>Kineis Data Streamとは</h1><blockquote><p>Amazon Kinesis Data Streams (KDS) は、大規模にスケーラブルで持続的なリアルタイムのデータストリーミングサービスです。(中略) 収集データはミリ秒で入手でき、リアルタイム分析をリアルタイムダッシュボードやリアルタイム異常検知、ダイナミックな価格設定などの事例に利用可能です。<br><a href="https://aws.amazon.com/jp/kinesis/data-streams/" target="_blank" rel="noopener">https://aws.amazon.com/jp/kinesis/data-streams/</a></p></blockquote><p>簡単に言うとAWS上でPub-Subメッセージングを行えるサービスです。Kinesisの文脈ではデータを送信するPublish側をProducer、データを受信するSubscribe側をConsumerと呼びます。SQSとはメッセージを非同期に連携する部分は同じですが、Consumer側をN個配置できるところなどが異なります。</p><h1 id="Kinesis-Record-Aggregation-amp-Deaggregation"><a href="#Kinesis-Record-Aggregation-amp-Deaggregation" class="headerlink" title="Kinesis Record Aggregation &amp; Deaggregation"></a>Kinesis Record Aggregation &amp; Deaggregation</h1><p>KinesisにはRecord Aggregation（レコードの集約）といった考え方があります。</p><p>背景としてKDSへメッセージをProduceするときの課金単位は、<a href="https://aws.amazon.com/jp/kinesis/data-streams/faqs/" target="_blank" rel="noopener">25KBをしきい値とした書き込み数で課金</a>されます。25KBより小さくても同じ料金が課金されるため、レコードのサイズが小さい場合はメッセージを集約することが有効です。同時に、小さくて細かいメッセージを1つのメッセージに集約することで、HTTP リクエスト分のオーバーヘッドが無くせるのでスループットを上げる効果も期待できます。</p><figure class="highlight plain"><figcaption><span>集約イメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">record 0 --|</span><br><span class="line">record 1   |        [ Aggregation ]</span><br><span class="line">    ...    |--&gt; Amazon Kinesis record --&gt;  PutRecords Request</span><br><span class="line">    ...    |                              </span><br><span class="line">record A --|</span><br></pre></td></tr></table></figure><p>AWSでこの25KB以下のメッセージを集約するフォーマットは、<strong>KPL Aggregated Record Format</strong>と呼ぶそうです。仕様は以下に記載されていました。</p><p><a href="https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md" target="_blank" rel="noopener">https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md</a></p><p>概要だけまとめると以下のフォーマットです。</p><ul><li>先頭に4バイトのマジックナンバーは<code>0xF3 0x89 0x9A 0xC2</code> がつく</li><li>プロトコルバッファ（proto2）を利用したバイナリフォーマット</li><li>最後に16バイトのMD5チェックサム</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0               4                  N          N+15</span><br><span class="line">+---+---+---+---+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+---+...+---+</span><br><span class="line">|  MAGIC NUMBER | PROTOBUF MESSAGE |    MD5    |</span><br><span class="line">+---+---+---+---+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+---+...+---+</span><br></pre></td></tr></table></figure><p><code>PROTOBUF MESSAGE</code> 部分は以下の定義です。Proto を知らない人に補足すると <code>repeated</code> はJSONでいう配列を示す宣言です。<code>AggregatedRecord</code> でKinesisのパーティションキーを複数宣言するのが特徴的ですね。もし、複数のレコードが同じパーティションキーを指定するとすると、効率よくシリアライズができそうです。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">AggregatedRecord</span> </span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> partition_key_table     = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> explicit_hash_key_table = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Record records                 = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SubMessage</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Tag</span> </span>&#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">string</span> key   = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">string</span> value = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">uint64</span> partition_key_index     = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">uint64</span> explicit_hash_key_index = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">bytes</span>  data                    = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Tag    tags                    = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>細かく説明しましたが、KPL Aggregated Record Formatの構造を知らなくても既存のライブラリを活用すれば利用可能ですのでご安心ください。</p><h2 id="Record-Aggregation-と-PutRecordsの区別"><a href="#Record-Aggregation-と-PutRecordsの区別" class="headerlink" title="Record Aggregation と PutRecordsの区別"></a>Record Aggregation と PutRecordsの区別</h2><p>ちょっとややこしいのが、 Kinesisには複数RECORDを一度のリクエストで登録する<a href="https://aws.amazon.com/jp/blogs/aws/kinesis-update-putrecords-api/" target="_blank" rel="noopener">PutRecords</a>というAPIがありますが、 Record Aggregationはそれとは異なります（別の概念なので共存できます）。PutRecordsはあくまで複数のRECORDを1度のリクエストに束ねるものであって、Aggregated Formatは複数メッセージを1メッセージに集約する点が違いです。PutRecordsはHTTP Requestの発行を抑えられる分スループットの向上が期待できる点は、Aggregated Formatと同じですが、メッセージ数は変化ないので料金は同じです。当然別物なのでAggregated FormatのメッセージをPutRecordsもできます。</p><h1 id="実施方法"><a href="#実施方法" class="headerlink" title="実施方法"></a>実施方法</h1><p><a href="https://aws.amazon.com/jp/sdk-for-go/" target="_blank" rel="noopener">AWS SDK for Go</a> でKinesisに対するProduce/Consumeはできますが、標準ではAggregation/DeAggregationはできません。そのため以下のライブラリを利用します。</p><ul><li><strong>Aggregation</strong>:  <a href="https://github.com/a8m/kinesis-producer" target="_blank" rel="noopener">a8m/kinesis-producer</a> </li><li><strong>DeAggregation</strong>: <a href="https://github.com/awslabs/kinesis-aggregation" target="_blank" rel="noopener">awslabs/kinesis-aggregation</a></li></ul><p>DeAggregationに関してはAWSLabのリポジトリを利用できるのでちょっと安心できますね。利用方法は簡単かと言われると？でしたのでここに利用方法を残していきます。</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><p>それぞれのライブラリの利用手順を説明していきます。このエントリーで記載しているコードは以下のリポジトリに記載しています。</p><p><a href="https://github.com/laqiiz/go-kinesis-aggr-example" target="_blank" rel="noopener">https://github.com/laqiiz/go-kinesis-aggr-example</a></p><h2 id="Aggregate（a8m-kinesis-producer）"><a href="#Aggregate（a8m-kinesis-producer）" class="headerlink" title="Aggregate（a8m/kinesis-producer）"></a>Aggregate（a8m/kinesis-producer）</h2><p>最初にコードのサンプルを載せます。</p><figure class="highlight go"><figcaption><span>集約側の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"github.com/a8m/kinesis-producer"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/kinesis"</span></span><br><span class="line"><span class="string">"golang.org/x/sync/errgroup"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kc = kinesis.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(e events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"【Start Aggregation Lambda】"</span>, <span class="built_in">len</span>(e.Records))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pr = producer.New(&amp;producer.Config&#123;</span><br><span class="line">StreamName: os.Getenv(<span class="string">"KINESIS_STREAM"</span>),</span><br><span class="line">Client:     kc,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">eg := errgroup.Group&#123;&#125;</span><br><span class="line"></span><br><span class="line">pr.Start() <span class="comment">// Producer用のgoroutine起動</span></span><br><span class="line">eg.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> pr.NotifyFailures() &#123;</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> e.Records &#123;</span><br><span class="line"><span class="comment">// TODO 取得したレコードに対する何かしらの処理。ここでは単純に集約して終わり</span></span><br><span class="line"><span class="keyword">if</span> err := pr.Put(r.Kinesis.Data, r.Kinesis.PartitionKey); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pr.Stop() <span class="comment">// 送信中のレコードのflushと、Producer goroutineの停止</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> eg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フィールドで初期化しているのが、Kinesis Producerのクライアントです。<code>handle</code>関数内部がややこしいですが、最初にRecord Aggregation用のProducerを生成し、<code>pr.Start()</code> で内部で用いるgoroutineを起動、その後にProducerが出すかも知れないerrorを検知するための <code>goroutine</code> を <code>errgroup</code> を利用して起動させます。ちょっとややこしいですが、これを最初に行わないと、エラーを取りこぼす可能性があります。ProducerはStopしたあとにStartしてもchannelを内部でcloseしていたりするので上手く動きませんでした。</p><p><code>Producer</code> に対するPut処理ですが、今回はLambdaだということと、他のデータストアへの書き込みもしないこともあり同期的に行っています。</p><p>最後に <code>pr.Stop()</code> を呼びgoroutineを停止させて、同時に処理中レコードをflushさせます。これを呼び忘れるとFlushされる間隔より前にLambda関数が停止してしまい、エラーは発生しないけどKinesisに送信されていないことが発生する恐れがあります。<code>pr.Stop</code> は <strong>errgroupの待受より前に</strong> 呼び出したいので、<code>defer</code> は利用していません。</p><p>これをGoでLambdaを利用するときのお作法通りにmain関数から呼び出せば完了です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでGoでLambdaでもKinesisへRecord Aggregationが行えます。</p><h2 id="DeAggregate-awslabs-kinesis-aggregation"><a href="#DeAggregate-awslabs-kinesis-aggregation" class="headerlink" title="DeAggregate(awslabs/kinesis-aggregation])"></a>DeAggregate(awslabs/kinesis-aggregation])</h2><p>awslabs/kinesis-aggregationを利用します。この時、Lambdaの引数として渡される <code>events.KinesisEvent</code> の型と、deaggregatorが求める方が異なるため、自分で型の詰め替え作業が必要です（最初のループ分の部分）。そこが最大の山場で、それさえできてしまえば<code>deagg.DeaggregateRecords</code>を呼び出して、レコードの集約解除が行われます。</p><figure class="highlight go"><figcaption><span>集約解除側の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/kinesis"</span></span><br><span class="line">deagg <span class="string">"github.com/awslabs/kinesis-aggregation/go/deaggregator"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(e events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"【Start DeAggregation Lambda】"</span>, <span class="built_in">len</span>(e.Records))</span><br><span class="line"></span><br><span class="line">krs := <span class="built_in">make</span>([]*kinesis.Record, <span class="number">0</span>, <span class="built_in">len</span>(e.Records))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> e.Records &#123;</span><br><span class="line">krs = <span class="built_in">append</span>(krs, &amp;kinesis.Record&#123;</span><br><span class="line">ApproximateArrivalTimestamp: aws.Time(r.Kinesis.ApproximateArrivalTimestamp.UTC()),</span><br><span class="line">Data:                        r.Kinesis.Data,</span><br><span class="line">EncryptionType:              &amp;r.Kinesis.EncryptionType,</span><br><span class="line">PartitionKey:                &amp;r.Kinesis.EncryptionType,</span><br><span class="line">SequenceNumber:              &amp;r.Kinesis.SequenceNumber,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dars, err := deagg.DeaggregateRecords(krs)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> dars &#123;</span><br><span class="line"><span class="comment">// TODO de-aggregation後レコードに対する処理</span></span><br><span class="line">fmt.Println(<span class="string">"input"</span>, <span class="keyword">string</span>(r.Data))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをGoでLambdaを利用するときのお作法通りにmain関数から呼び出せば完了です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>レコード集約の解除処理は、ことKinesisトリガーのLambdaに対しては常に実装しておいても良い気がします。<br>理由ですが、<code>deagg.DeaggregateRecords</code> が集約済み<strong>ではない</strong> レコードに対して実行してもerrorが発生しないためと、最初は集約レコードじゃない入力だったとしても、途中で集約レコードに切り替わったときに急に動かなくなることを防ぐことも出来るからです。（疎通の1件は通ったけど、結合テストで複数レコードを連携しだすと急に落ちた、みたいなことも回避できます）。特にJavaクライアントがKPLを利用している場合は、集約あり/集約無しはあまり意識しないことが多く、事前のすり合わせでは集約しないと行っていたものの、いざ結合テストをする場合に、集約済みメッセージを連携してきたこともありました。</p><h1 id="動作検証"><a href="#動作検証" class="headerlink" title="動作検証"></a>動作検証</h1><p>下図のような環境を構築して動かしてみます。デプロイ方法はリポジトリのREADMEを参考ください。</p><p>![](/images/20200727/1 (2).png)</p><p>最初のKinesisにはawscli経由で3件データを投入します。</p><figure class="highlight bash"><figcaption><span>テストデータ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws kinesis --profile my_profile put-record --stream-name aggregate --partition-key 123 --data MTIzNDU2Nzg5MA==</span><br><span class="line">aws kinesis --profile my_profile put-record --stream-name aggregate --partition-key 124 --data MTIzNDU2Nzg5MA==</span><br><span class="line">aws kinesis --profile my_profile put-record --stream-name aggregate --partition-key 125 --data MTIzNDU2Nzg5MA==</span><br></pre></td></tr></table></figure><p>そうすると、1つ目のLambdaが起動されます。3つのレコードを受け取り、<code>flushing records reason=drain, records=%!s(int=1)</code> にある通り、3件が1レコードに集約されて次のKinesisにProduceされました。タイミングによっては1件だったり2件だったりしますが、2件以上であれば動作確認はできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-05-16T16:59:25.659+09:00 START RequestId: da2b6674-a147-4804-9e6c-5d78f633e426 Version: $LATEST</span><br><span class="line">2020-05-16T16:59:25.664+09:00 【Start Aggregation Lambda】 3</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 starting producer stream&#x3D;aggregate-test</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 stopping producer backlog&#x3D;%!s(int&#x3D;0)</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 backlog drained</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 flushing records reason&#x3D;drain, records&#x3D;%!s(int&#x3D;1)</span><br><span class="line">2020-05-16T16:59:25.690+09:00 2020&#x2F;05&#x2F;16 07:59:25 stopped producer</span><br><span class="line">2020-05-16T16:59:25.690+09:00 END RequestId: da2b6674-a147-4804-9e6c-5d78f633e426</span><br></pre></td></tr></table></figure><p>2つ目のLambdaは、集約されたレコードを1件受け取り、集約解除した結果3つのメッセージを標準出力しています。ダミーで送信したデータの中身は全て同じなので3行同じ内容が表示されています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-05-16T17:01:36.865+09:00 START RequestId: 5f7eb56c-a83c-42c3-927d-0e2703528c6b Version: $LATEST</span><br><span class="line">2020-05-16T17:01:36.870+09:00 【Start DeAggregation Lambda】 1</span><br><span class="line">2020-05-16T17:01:36.870+09:00 input 1234567890</span><br><span class="line">2020-05-16T17:01:36.870+09:00 input 1234567890</span><br><span class="line">2020-05-16T17:01:36.870+09:00 input 1234567890</span><br><span class="line">2020-05-16T17:01:36.870+09:00 END RequestId: 5f7eb56c-a83c-42c3-927d-0e2703528c6b</span><br></pre></td></tr></table></figure><p>簡単ではありますがAggregation/DeAggregationの動作確認が取れました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>KPL Aggregated Record Formatを利用することで、Kinesisの利用料金を下げることができる</li><li>GoでLambdaでも、KPL/KCL相当の集約・集約解除は実装できる</li><li>特にDeAggregateする処理は、後々の予期せぬ連携に備えて防御的に実装しておくと良い</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>A deep-dive into lessons learned using Amazon Kinesis Streams at scale<ul><li><a href="https://read.acloud.guru/deep-dive-into-aws-kinesis-at-scale-2e131ffcfa08" target="_blank" rel="noopener">https://read.acloud.guru/deep-dive-into-aws-kinesis-at-scale-2e131ffcfa08</a></li></ul></li><li>KPL の主要なコンセプト<ul><li><a href="https://docs.aws.amazon.com/ja_jp/streams/latest/dev/kinesis-kpl-concepts.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/streams/latest/dev/kinesis-kpl-concepts.html</a></li></ul></li><li>KPL Aggregated Record Format<ul><li><a href="https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md" target="_blank" rel="noopener">https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/&quot;&gt;サーバレス連載企画&lt;/a&gt;の8回目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; cl
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
  </entry>
  
</feed>
