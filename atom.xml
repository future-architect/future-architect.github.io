<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-03-30T14:11:50.452Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>今さらながらfindパイセンについてまとめてみた</title>
    <link href="https://future-architect.github.io/articles/20210331/"/>
    <id>https://future-architect.github.io/articles/20210331/</id>
    <published>2021-03-30T15:00:00.000Z</published>
    <updated>2021-03-30T14:11:50.452Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210331/agence-olloweb-d9ILr-dbEdg-unsplash.jpg"></p><p>Photo by <a href="https://unsplash.com/@olloweb?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Agence Olloweb</a> on <a href="https://unsplash.com/s/photos/find?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、中本です。<a href="/articles/20210321/">シェルスクリプト連載</a>の3日目です。</p><p>本記事ではShell Script作成において切っても切れない <code>find</code>コマンド について利用頻度高めのオプションをまとめます。</p><p>最後には今回紹介したオプションを全て盛り込んだシェルスクリプトを作成します。</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ol><li><a href="#find%E3%81%A8%E3%81%AF">findとは</a></li><li><a href="#%E6%A7%98%E3%80%85%E3%81%AAfind%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">様々なfindオプション</a><ol><li><a href="#type%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">-typeオプション：検索対象のファイル種別を指定</a><ul><li><a href="#%E2%80%90name%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">-nameオプション：任意の検索文字列を指定</a></li><li><a href="#depth%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">-depthオプション：検索の最大階層/最小階層を指定</a></li><li><a href="#mtime-mmin%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">-mtime/-mminオプション：任意の検索対象期間を指定</a></li><li><a href="#%E2%80%90exec%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">-execオプション：検索実行結果を引数として次の処理に引き渡す</a></li><li><a href="#while-read-line">＜補足：while read line＞：検索結果を一行ずつ処理する</a></li></ul></li></ol></li><li><a href="#%E3%81%8A%E3%81%BE%E3%81%91">おまけ</a></li><li><a href="#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB">おわりに</a></li></ol><h1 id="findとは"><a href="#findとは" class="headerlink" title="findとは"></a><code>find</code>とは</h1><p>「<code>find</code>」は、場所を指定してファイルやディレクトリを検索するコマンドです。</p><p>「ファイル名/ディレクトリ名」、「更新日時」、「種別」など様々な条件を指定してファイルを検索することができます。</p><h1 id="様々なfindオプション"><a href="#様々なfindオプション" class="headerlink" title="様々なfindオプション"></a>様々な<code>find</code>オプション</h1><h3 id="typeオプション"><a href="#typeオプション" class="headerlink" title="-typeオプション"></a><code>-type</code>オプション</h3><p>検索する対象のファイル種別を指定するオプション</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#検索対象種別「ファイル」</span></span><br><span class="line">$ find ［検索パス］-<span class="built_in">type</span> f　</span><br><span class="line">　</span><br><span class="line"><span class="comment">#検索対象種別「ディレクトリ」</span></span><br><span class="line">$ find ［検索パス］-<span class="built_in">type</span> d</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 0</span><br><span class="line">drwxrwxr-x 2 finduser finduser 6 Mar 29 09:00 dir1</span><br><span class="line">drwxrwxr-x 2 finduser finduser 6 Mar 29 09:00 dir2</span><br><span class="line">drwxrwxr-x 2 finduser finduser 6 Mar 29 09:00 dir3</span><br><span class="line">-rwxrwxr-x 1 finduser finduser 0 Mar 29 09:00 file01.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser 0 Mar 29 09:00 file02.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser 0 Mar 29 09:00 file03.tmp</span><br><span class="line"></span><br><span class="line">$ find ./</span><br><span class="line">./</span><br><span class="line">./dir1</span><br><span class="line">./dir2</span><br><span class="line">./dir3</span><br><span class="line">./file01.tmp</span><br><span class="line">./file02.tmp</span><br><span class="line">./file03.tmp</span><br><span class="line"></span><br><span class="line">$ find ./ -<span class="built_in">type</span> f</span><br><span class="line">./file01.tmp</span><br><span class="line">./file02.tmp</span><br><span class="line">./file03.tmp</span><br><span class="line"></span><br><span class="line">$ find ./ -<span class="built_in">type</span> d</span><br><span class="line">./</span><br><span class="line">./dir1</span><br><span class="line">./dir2</span><br><span class="line">./dir3</span><br></pre></td></tr></table></figure><h3 id="‐nameオプション"><a href="#‐nameオプション" class="headerlink" title="‐nameオプション"></a><code>‐name</code>オプション</h3><p>検索する対象の検索文字列を指定するオプション<br>ワイルドカードを使用することで、部分一致のファイルやディレクトリの検索が可能となります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#検索対象種別「ファイル」</span></span><br><span class="line">$ find ［検索パス］-name <span class="string">&quot;［検索文字列］&quot;</span>　</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ワイルドカード無しだと完全一致検索</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;file01&quot;</span></span><br><span class="line">$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">./file01.tmp</span><br><span class="line">./file02.tmp</span><br><span class="line">./file03.tmp</span><br></pre></td></tr></table></figure><p>なお、「<code>-path</code>」も同様に検索文字列を指定するオプション<br>「<code>-name</code>」と異なり、「/」を含む文字列検索が可能です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l ./dir1/</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 29 02:24 file01.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#「-name」だと「/」を含むと怒られる</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;*dir1/file01.tmp&quot;</span></span><br><span class="line"><span class="string">&quot;find: warning: Unix filenames usually don&#x27;t contain slashes (though pathnames do).  That means that &#x27;-name ‘*dir1/file01.tmp’&#x27; will probably evaluate to false all the time on this system.  You might find the &#x27;-wholename&#x27; test more useful, or perhaps &#x27;-samefile&#x27;.  Alternatively, if you are using GNU grep, you could use &#x27;find ... -print0 | grep -FzZ ‘*dir1/file01.tmp’&#x27;.&quot;</span></span><br><span class="line"></span><br><span class="line">$ find . -<span class="built_in">type</span> f -path <span class="string">&quot;*dir1/file01.tmp&quot;</span></span><br><span class="line">./dir1/file01.tmp</span><br></pre></td></tr></table></figure><h3 id="mtime-mminオプション"><a href="#mtime-mminオプション" class="headerlink" title="-mtime/-mminオプション"></a><code>-mtime</code>/<code>-mmin</code>オプション</h3><p>ファイルやディレクトリのタイムスタンプから判定して、検索対象期間を指定するオプション</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#検索対象日に更新されたファイルディレクトリ</span></span><br><span class="line">$ find ［検索パス］ -mtime 日数</span><br><span class="line"></span><br><span class="line"><span class="comment">#現在～検索対象日の期間にに更新されたファイル、ディレクトリ</span></span><br><span class="line">$ find ［検索パス］ -mtime -日数</span><br><span class="line"></span><br><span class="line"><span class="comment">#検索対象日以前に更新されたファイル、ディレクトリ</span></span><br><span class="line">$ find ［検索パス］ -mtime +日数</span><br></pre></td></tr></table></figure><p>上記のように「＋」や「‐」を付与することで検索対象期間をより特定期間に絞ることが可能となります。（※対象期間については後述）<br>日数は今日が「0」で、昨日が「1」と換算します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l ./</span><br><span class="line">-rw-r--r-- 1 finduser finduser    0 Mar 25 01:00 test01.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser    0 Mar 26 01:00 test02.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser    0 Mar 27 01:00 test03.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser    0 Mar 28 01:00 test04.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser    0 Mar 29 01:00 test05.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ find . -mtime +1</span><br><span class="line">./test01.txt</span><br><span class="line">./test02.txt</span><br><span class="line">./test03.txt</span><br><span class="line"></span><br><span class="line">$ find . -mtime 1</span><br><span class="line">./test04.txt</span><br><span class="line"></span><br><span class="line">$ find . -mtime -1</span><br><span class="line">./test05.txt</span><br></pre></td></tr></table></figure><p>また、オプション無しの状態ではコマンド実行時点を起点として、日数計算を行いますが、「<code>-daystart</code>」オプションを付与することで当日24:00を起点として日数計算を行います。<br>(ジョブ処理等で、コマンド実行時間によって処理にばらつきを生じさせたくない際などに利用推奨)</p><p>他にも、「<code>-mtime</code>」ではなく、「<code>‐mmin</code>」も存在し、分単位で指定することも可能です。</p><p>「<code>-mtime</code>」、「<code>-mmin</code>」は<code>find</code>を利用する上で高頻度で利用されるオプションですが、対象となる期間がややこしいので、以下のように整理してみました。</p><p><img src="/images/20210331/find_term.png"></p><p>注意点としては、「<code>-daystart</code>」オプションは日の始まりである0:00ではなく、日の終わりの24:00を起点としていること注意が必要です。<br>そのため「<code>-mtime -0</code>」は必ず未来日検索となるため、基本的にファイル検索結果は存在しません。</p><h3 id="depthオプション"><a href="#depthオプション" class="headerlink" title="-depthオプション"></a><code>-depth</code>オプション</h3><p>検索対象ディレクトリの階層を指定するオプション</p><p>本オプションを指定しない場合、子ディレクトリ全てに対して検索を実行します。</p><p>ファイル数が膨大にあり、検索対象のディレクトリ階層を絞りたい時などに有効です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#検索する最大深度の階層</span></span><br><span class="line">$ find ［検索パス］-maxdepth ［階層］　</span><br><span class="line"></span><br><span class="line"><span class="comment">#検索する最小深度の階層</span></span><br><span class="line">$ find ［検索パス］-mindepth ［階層］　</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ tree ./find_test1</span><br><span class="line">./find_test1/</span><br><span class="line">｜ 20210328.tmp</span><br><span class="line">∟ find_test2</span><br><span class="line">    ｜ 20210328.tmp</span><br><span class="line">    ∟ find_test3</span><br><span class="line">        ∟ 20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#階層指定なし（すべての子ディレクトリ含む）</span></span><br><span class="line">$ find /work/find_test1-type f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/find_test3/20210328.tmp</span><br><span class="line">/work/find_test1/find_test2/20210328.tmp</span><br><span class="line">/work/find_test1/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大1階層</span></span><br><span class="line">$ find /work/find_test1 -maxdepth 1 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大2階層</span></span><br><span class="line">$ find /work/find_test1 -maxdepth 2 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/20210328.tmp</span><br><span class="line">/work/find_test1/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大3階層</span></span><br><span class="line">$ find /work/find_test1 -maxdepth 3 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/find_test3/20210328.tmp</span><br><span class="line">/work/find_test1/find_test2/20210328.tmp</span><br><span class="line">/work/find_test1/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最小1階層（1階層目は検索しない）</span></span><br><span class="line">$ find /work/find_test1 -mindepth 1 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/find_test3/20210328.tmp</span><br><span class="line">/work/find_test1/find_test2/20210328.tmp</span><br><span class="line">/work/find_test1/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最小2階層（1階層、2階層目は検索しない）</span></span><br><span class="line">$ find /work/find_test1 -mindepth 2 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/find_test3/20210328.tmp</span><br><span class="line">/work/find_test1/find_test2/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最小2階層（1階層～3階層目は検索しない）</span></span><br><span class="line">$ find /work/find_test1 -mindepth 3 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/find_test3/20210328.tmp</span><br></pre></td></tr></table></figure><h3 id="‐execオプション"><a href="#‐execオプション" class="headerlink" title="‐execオプション"></a><code>‐exec</code>オプション</h3><p>コマンド実行結果を引数として次の処理に引き渡す場合などに利用されます。<br>同様の動きを持つコマンドとして「<code>xargs</code>」があります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># findで検索した結果のみをlsに引き渡す</span></span><br><span class="line"><span class="comment"># 「&#123;&#125;」は引数の位置、行末には「\;」が必須</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.txt&quot;</span> -<span class="built_in">exec</span> ls -l &#123;&#125; \;</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 25 01:00 ./test01.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 26 01:00 ./test02.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 27 01:00 ./test03.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 28 01:00 ./test04.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 29 01:00 ./test05.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 「xargs」をパイプで繋ぐことで検索結果を引き渡すことが可能</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.txt&quot;</span> |xargs ls -l</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 25 01:00 ./test01.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 26 01:00 ./test02.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 27 01:00 ./test03.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 28 01:00 ./test04.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 29 01:00 ./test05.txt</span><br></pre></td></tr></table></figure><p>一見すると、<code>xargs</code>も<code>-exec</code>も同様の処理結果を返すように見えるのですが、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ find . -type f -name &quot;*.txt&quot; -exec echo &quot;ファイル名: &#123;&#125;&quot; \;</span><br><span class="line">ファイル名: .&#x2F;test01.txt</span><br><span class="line">ファイル名: .&#x2F;test02.txt</span><br><span class="line">ファイル名: .&#x2F;test03.txt</span><br><span class="line">ファイル名: .&#x2F;test04.txt</span><br><span class="line">ファイル名: .&#x2F;test05.txt</span><br><span class="line"></span><br><span class="line">$ find . -type f -name &quot;*.txt&quot; |xargs echo &quot;ファイル名: &quot;</span><br><span class="line">ファイル名:  .&#x2F;test01.txt .&#x2F;test02.txt .&#x2F;test03.txt .&#x2F;test04.txt .&#x2F;test05.txt</span><br></pre></td></tr></table></figure><p>上記の挙動で分かるように、以下のように処理に違いがあります。</p><table><thead><tr><th align="left">処理</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">-execオプション</td><td align="left">実行結果を<strong>1行ずつ</strong>引き渡して処理する</td></tr><tr><td align="left">xargsコマンド</td><td align="left">実行結果を<strong>まとめて</strong>引き渡して処理する</td></tr></tbody></table><p>したがって、検索したファイルを1ファイル単位で圧縮するなどの処理の場合は、<br><code>-exec</code>オプションを利用が推奨されます。</p><h3 id="while-read-line"><a href="#while-read-line" class="headerlink" title="while read line"></a><code>while read line</code></h3><p><code>while read line</code>に関しては、<code>find</code>のオプションではありませんが、<code>find</code>コマンドと相性の良いループ処理です。<br>検索結果を一行ずつ読み込んで、任意の処理を実行することができます。</p><figure class="highlight bash"><figcaption><span>while_read_line.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!//bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;FIND_DIR&#125;</span>=<span class="string">&quot;[検索パス]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># パイプで繋いで、「line」という変数に一行ずつ格納する</span></span><br><span class="line"><span class="comment"># 変数は「line」ではなく、任意名でも可</span></span><br><span class="line">find <span class="variable">$&#123;FIND_DIR&#125;</span> -<span class="built_in">type</span> f -name <span class="string">&quot;*.txt&quot;</span> |<span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ファイル名： <span class="variable">$line</span>&quot;</span></span><br><span class="line">  ls -l <span class="variable">$line</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ bash ./while_read_line.sh</span><br><span class="line">ファイル名： ./test01.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 25 01:00 ./test01.txt</span><br><span class="line">ファイル名： ./test02.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 26 01:00 ./test02.txt</span><br><span class="line">ファイル名： ./test03.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 27 01:00 ./test03.txt</span><br><span class="line">ファイル名： ./test04.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 28 01:00 ./test04.txt</span><br><span class="line">ファイル名： ./test05.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 29 01:00 ./test05.txt</span><br></pre></td></tr></table></figure><p><code>while read line</code> はもちろん<code>find</code>のみではなく、</p><p><code>cat ｛ファイル名｝ |while read line</code><br><code>echo &#123;変数&#125; |while read line</code></p><p>といった形でも利用可能です。</p><h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><p>先で紹介したオプションを盛り込んで、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【-mtime】前日以前に更新されたファイル</span><br><span class="line">【-name】ファイル名に「ccc」を含む</span><br><span class="line">【-type】検索種別は「ファイル」</span><br><span class="line">【-maxdepth】検索対象ディレクトリは第2階層目まで</span><br><span class="line">【while read line】各ファイルごとに圧縮する</span><br></pre></td></tr></table></figure><p>処理を行うシェルスクリプトを作成してみます。</p><figure class="highlight bash"><figcaption><span>find.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!//bin/bash</span></span><br><span class="line"></span><br><span class="line">FIND_DIR=<span class="string">&quot;/work/find_test1/test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 検索対象は2階層目まで</span></span><br><span class="line"><span class="comment"># 検索種別はファイル</span></span><br><span class="line"><span class="comment"># 「ccc」の文字列を含むファイル</span></span><br><span class="line"><span class="comment"># 1日以前のファイル</span></span><br><span class="line"><span class="comment"># 「while read line」をパイプで引き渡す</span></span><br><span class="line">find /work/find_test1/ -maxdepth 2 -<span class="built_in">type</span> f -name <span class="string">&quot;*ccc*.tmp&quot;</span> -mtime +1 |<span class="keyword">while</span> <span class="built_in">read</span> FILE_PATH</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ファイルディレクトリとファイル名をそれぞれ取得</span></span><br><span class="line">  FILE_DIR=`dirname <span class="variable">$&#123;FILE_PATH&#125;</span>`</span><br><span class="line">  FILE_NAME=`basename <span class="variable">$&#123;FILE_PATH&#125;</span>`</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 各ファイルの「bbb」という文字列の直後に任意文字列を挿入</span></span><br><span class="line">  <span class="comment"># UNIXは同一ファイルにリダイレクトできないため、tmpファイルにリダイレクト</span></span><br><span class="line">  sed -e <span class="string">&quot;/^bbb$/a find.shにより特定行を挿入&quot;</span> <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span> &gt; <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span>.tmp</span><br><span class="line">  mv <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span>.tmp <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line"></span><br><span class="line">  chmod 775 <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line">  chown finduser:finduser <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 検索されたファイルを圧縮</span></span><br><span class="line">  <span class="comment"># フルパスでの圧縮を避けるために「-C」オプションを付与</span></span><br><span class="line">  tar -C <span class="variable">$&#123;FILE_DIR&#125;</span> -cvzf <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span>.tar.gz <span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 圧縮処理に問題がなければファイル削除</span></span><br><span class="line">  RET_CD=$?</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$&#123;RET_CD&#125;</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">     rm -f <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">#</th><th align="left">処理概要</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">検索対象種別は「ファイル」を対象として検索する</td></tr><tr><td align="left">2</td><td align="left">「bbb」という文字列を含むファイルのみ対象として検索する</td></tr><tr><td align="left">3</td><td align="left">前日以前のファイルを対象として検索する</td></tr><tr><td align="left">4</td><td align="left">指定ディレクトリから子ディレクトリ2階層までを対象として検索する</td></tr><tr><td align="left">5</td><td align="left">各ファイル内容の「bbb」という特定文字列の直後に任意行を挿入する</td></tr><tr><td align="left">6</td><td align="left">ファイル単位で元ファイルと同ディレクトリ内に圧縮ファイルを作成する</td></tr><tr><td align="left">7</td><td align="left">圧縮が成功していれば、ファイルは削除する</td></tr></tbody></table><blockquote><p>処理イメージ<br><img src="/images/20210331/shell.png"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># スクリプト実行前</span></span><br><span class="line"><span class="comment"># 3階層分同じファイルをコピー</span></span><br><span class="line">$ tree find_test1</span><br><span class="line">find_test1</span><br><span class="line">| aaa_20210320.tmp</span><br><span class="line">| aaa_20210321.tmp</span><br><span class="line">| aaa_20210322.tmp</span><br><span class="line">| bbb_20210323.tmp</span><br><span class="line">| bbb_20210324.tmp</span><br><span class="line">| bbb_20210325.tmp</span><br><span class="line">| ccc_20210326.tmp</span><br><span class="line">| ccc_20210327.tmp</span><br><span class="line">| ccc_20210328.tmp</span><br><span class="line">∟ find_test2</span><br><span class="line">    | aaa_20210320.tmp</span><br><span class="line">    | aaa_20210321.tmp</span><br><span class="line">    | aaa_20210322.tmp</span><br><span class="line">    | bbb_20210323.tmp</span><br><span class="line">    | bbb_20210324.tmp</span><br><span class="line">    | bbb_20210325.tmp</span><br><span class="line">    | ccc_20210326.tmp</span><br><span class="line">    | ccc_20210327.tmp</span><br><span class="line">    | ccc_20210328.tmp</span><br><span class="line">    ∟ find_test3</span><br><span class="line">        | aaa_20210320.tmp</span><br><span class="line">        | aaa_20210321.tmp</span><br><span class="line">        | aaa_20210322.tmp</span><br><span class="line">        | bbb_20210323.tmp</span><br><span class="line">        | bbb_20210324.tmp</span><br><span class="line">        | bbb_20210325.tmp</span><br><span class="line">        | ccc_20210326.tmp</span><br><span class="line">        | ccc_20210327.tmp</span><br><span class="line">        ∟ ccc_20210328.tmp</span><br><span class="line"></span><br><span class="line">$ ls -l ./find_test1</span><br><span class="line">total 36</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 20 10:00 aaa_20210320.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 21 10:00 aaa_20210321.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 22 10:00 aaa_20210322.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 23 10:00 bbb_20210323.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 24 10:00 bbb_20210324.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 25 10:00 bbb_20210325.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser 197 Mar 26 10:00 ccc_20210326.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser 197 Mar 27 10:00 ccc_20210327.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 28 10:00 ccc_20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># ファイル中身確認</span></span><br><span class="line">$ cat ./find_test1/ccc_20210326.tmp</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">ddd</span><br><span class="line">eee</span><br><span class="line"></span><br><span class="line"><span class="comment">#シェルスクリプトを実行</span></span><br><span class="line">$ bash ./find.sh</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line"><span class="comment">#ファイル階層を再確認</span></span><br><span class="line"><span class="comment">#第1階層～第2階層に圧縮ファイルが作られていることを確認</span></span><br><span class="line">$ tree find_test1</span><br><span class="line">find_test1</span><br><span class="line">| aaa_20210320.tmp</span><br><span class="line">| aaa_20210321.tmp</span><br><span class="line">| aaa_20210322.tmp</span><br><span class="line">| bbb_20210323.tmp</span><br><span class="line">| bbb_20210324.tmp</span><br><span class="line">| bbb_20210325.tmp</span><br><span class="line">| ccc_20210326.tmp.tar.gz</span><br><span class="line">| ccc_20210327.tmp.tar.gz</span><br><span class="line">| ccc_20210328.tmp</span><br><span class="line">∟ find_test2</span><br><span class="line">    | aaa_20210320.tmp</span><br><span class="line">    | aaa_20210321.tmp</span><br><span class="line">    | aaa_20210322.tmp</span><br><span class="line">    | bbb_20210323.tmp</span><br><span class="line">    | bbb_20210324.tmp</span><br><span class="line">    | bbb_20210325.tmp</span><br><span class="line">    | ccc_20210326.tmp.tar.gz</span><br><span class="line">    | ccc_20210327.tmp.tar.gz</span><br><span class="line">    | ccc_20210328.tmp</span><br><span class="line">    ∟ find_test3</span><br><span class="line">        | aaa_20210320.tmp</span><br><span class="line">        | aaa_20210321.tmp</span><br><span class="line">        | aaa_20210322.tmp</span><br><span class="line">        | bbb_20210323.tmp</span><br><span class="line">        | bbb_20210324.tmp</span><br><span class="line">        | bbb_20210325.tmp</span><br><span class="line">        | ccc_20210326.tmp</span><br><span class="line">        | ccc_20210327.tmp</span><br><span class="line">        ∟ ccc_20210328.tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ls -l ./find_test1</span><br><span class="line">total 36</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 20 10:00 aaa_20210320.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 21 10:00 aaa_20210321.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 22 10:00 aaa_20210322.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 23 10:00 bbb_20210323.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 24 10:00 bbb_20210324.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 25 10:00 bbb_20210325.tmp</span><br><span class="line">-rw-rw-r-- 1 finduser finduser 197 Mar 29 12:27 ccc_20210326.tmp.tar.gz</span><br><span class="line">-rw-rw-r-- 1 finduser finduser 197 Mar 29 12:27 ccc_20210327.tmp.tar.gz</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 28 10:00 ccc_20210328.tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 圧縮ファイルを展開して内容を確認</span></span><br><span class="line">$ sudo tar xvzf ./find_test1/ccc_20210326.tmp.tar.gz</span><br><span class="line">ccc_20210326.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特定文字列を「bbb」の直後に挿入されていること確認</span></span><br><span class="line">$ cat ./ccc_20210326.tmp</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">find.shにより特定行を挿入</span><br><span class="line">ccc</span><br><span class="line">ddd</span><br><span class="line">eee</span><br></pre></td></tr></table></figure><p>想定通りの挙動をするシェルスクリプトになりました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>findは利用頻度は非常に高いのですが、<code>-mtime</code>/<code>-mmin</code>といった対象期間を限定する起点や終点についてよく迷ってしまうので、そんなときに本記事がお役に立てれば幸いかと思います。</p><p>また、今回紹介しきれませんでしたが、<code>-atime</code>/<code>-ctime</code>/<code>-newer</code>など他にも様々な<code>find</code>オプションがありますので、もっともっとオプションを使いこなして素敵な<code>find</code>ライフを送りましょう。</p><p>明日は市川諒さんのdeclareで配列と連想配列です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210331/agence-olloweb-d9ILr-dbEdg-unsplash.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@olloweb?utm_source=un</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="Linux" scheme="https://future-architect.github.io/tags/Linux/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
    <category term="Bash" scheme="https://future-architect.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>CSVと親しくなるAWK術</title>
    <link href="https://future-architect.github.io/articles/20210330/"/>
    <id>https://future-architect.github.io/articles/20210330/</id>
    <published>2021-03-29T15:00:00.000Z</published>
    <updated>2021-03-30T13:58:58.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG真野です。<a href="/articles/20210321/">シェルスクリプト連載</a>の2日目です。</p><p>シェルスクリプトなのにAWKってちょっと違うんじゃない？って思われる方も多いと思いますが、この連載におけるレギュレーションではsed, AWKもOKという優しいルール故、見逃しください。</p><p>この記事ではCSVデータをAWKで処理する例をいくつか紹介します。</p><h1 id="awkとは"><a href="#awkとは" class="headerlink" title="awkとは"></a>awkとは</h1><p><img src="/images/20210330/penguine-4120917_1280.jpg"></p><blockquote><p><a href="https://pixabay.com/ja/users/smartphonecreations2021-11994227/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4120917">SmartphoneCreations2021</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4120917">Pixabay</a>からの画像</p></blockquote><p>AWKとはやカンマなどで区切られたテキストデータの処理が得意なスクリプト言語です。awkコマンドはよくawsコマンドとtypoしますが最後はkです。こちらの方が25年くらい歴史があります。</p><p>由来はアルフレッド・エイホ、ピーター・ワインバーガー、ブライアン・カーニハンの3人の苗字の頭文で、日本だとオークと呼びます。なんというか由来がレジェンドですね。個人的にはカーニハン先生は<a href="https://asciidwango.jp/post/155982762075/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E4%BD%9C%E6%B3%95">プログラミング作法</a>で学んだ過去から、先生の敬称必須です。</p><p>awkの基本的な構文はパターンとアクションです。<br><code>pattern &#123; action &#125;</code> といった形で、patternが条件、actionが加工処理や表示項目の選択といった指定を行います。</p><h1 id="バージョン"><a href="#バージョン" class="headerlink" title="バージョン"></a>バージョン</h1><p>本記事ではGNU Awkの以下のバージョンで動作させました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk -V</span><br><span class="line">GNU Awk 5.0.1, API: 2.0 (GNU MPFR 4.0.2, GNU MP 6.2.0)</span><br></pre></td></tr></table></figure><h1 id="使い方例"><a href="#使い方例" class="headerlink" title="使い方例"></a>使い方例</h1><p>では早速AWKでCSVデータを処理していきましょう。</p><p>処理対象はフューチャー技術ブログから生成したCSVをサンプルに用います。</p><figure class="highlight plain"><figcaption><span>posts.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title,categories,tags,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">LT大会（前編）,Culture,LT,2016-02-17 09:09:12,9914</span><br><span class="line">LT大会（後編）,Culture,LT|登壇資料,2016-02-18 11:31:15,13214</span><br><span class="line">Startup_Geeks#1,Culture,Conference|開催レポート,2016-03-23 13:49:26,9404</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>データの全量は折りたたみで置いておきます。</p><details><summary>posts.csv全量</summary><div><figure class="highlight plain"><figcaption><span>posts.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br></pre></td><td class="code"><pre><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">LT大会（前編）,Culture,LT,2016-02-17 09:09:12,9914</span><br><span class="line">LT大会（後編）,Culture,LT|登壇資料,2016-02-18 11:31:15,13214</span><br><span class="line">Startup_Geeks#1,Culture,Conference|開催レポート,2016-03-23 13:49:26,9404</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br><span class="line">ハッカソン道中記#2～世界はチャンスであふれてる～,IoT,IoT|DesignThinking|Hackathon,2016-04-20 21:25:28,9474</span><br><span class="line">ハッカソン道中記#3～社会人2年目のリケジョがハッカソンに出てみました～,VR,DesignThinking|Unity|Hackathon,2016-05-11 15:07:34,8047</span><br><span class="line">Space Apps Challenge 2016への投票方法,VR,Hackathon,2016-05-12 09:05:59,2753</span><br><span class="line">第三回LT大会～grepおじさんは夢を見るか～,Culture,LT|登壇資料,2016-05-27 20:09:16,19198</span><br><span class="line">ハッカソン道中記#4～リケジョ、ITと外遊びしてみた～,IoT,Hackathon|DesignThinking,2016-05-30 08:40:24,9963</span><br><span class="line">第四回LT大会～あひると住宅ローンとまたもやキーボード～,Culture,LT|登壇資料,2016&#x2F;07&#x2F;18 18:14:46,12044</span><br><span class="line">JANOG38にてVulsの発表を行いました,Security,Vuls|Conference,2016&#x2F;07&#x2F;19 17:50:41,12641</span><br><span class="line">これさえあればシステム構成図がだいたい描けるアイコンセットを公開します！,Design,icon|UI&#x2F;UX,2016&#x2F;07&#x2F;21 17:44:04,2730</span><br><span class="line">システム屋さんがうれしいJava8対応のコーディング規約を公開します！！,Programming,Java|コーディング規約|エンタープライズ,2016&#x2F;09&#x2F;02 13:00:00,7204</span><br><span class="line">マネージャーがうれしいRedmineデータのグラフ表示方法を公開します！！,Management,Elastic-Stack|Kibana|Redmine|マネジメント,2016&#x2F;09&#x2F;20 18:00:00,9407</span><br><span class="line">「基幹業務もHadoopで!!」のその後　〜性能編〜,Infrastructure,Hadoop|AWS|Conference,2016&#x2F;10&#x2F;05 13:34:31,23623</span><br><span class="line">第五回社内LT大会～頑張る人は光るらしい,Culture,LT|登壇資料,2016&#x2F;10&#x2F;13 11:06:05,10070</span><br><span class="line">SQL実行時のブルームフィルタ(Bloom Filter)アルゴリズム,DB,DB|SQL|DataModel|Algorithm,2016-10-31 12:21:10,40542</span><br><span class="line">ビッグデータ対談でニコ生登壇しました,Infrastructure,Conference|Hadoop|インタビュー,2016&#x2F;11&#x2F;09 14:14:24,8563</span><br><span class="line">たくさんあって混乱しがちなIoT関連の団体とOSSをまとめました,IoT,IoT|OSS,2016&#x2F;12&#x2F;9 10:56:44,16280</span><br><span class="line">インフラ入門vol.1,Infrastructure,Infrastructure|インフラ入門|入門,2017-01-09 11:01:06,12850</span><br><span class="line">マネージャーがうれしいRedmineデータのEVM表示方法を公開します！！,Management,Elastic-Stack|Kibana|Redmine,2017&#x2F;01&#x2F;19 18:00:00,12650</span><br><span class="line">3Dプリンタを使ってサービス開発やってみた,IoT,3Dプリンタ|IoT,2017&#x2F;01&#x2F;27 12:25:15,13093</span><br><span class="line">会社に届いたHoloLensを使ってみた,VR,HoloLens,2017-02-10 13:00:00,6227</span><br><span class="line">第六回社内LT大会～コンサルタントはハイキックがお好き,Culture,LT|登壇資料,2017&#x2F;02&#x2F;16 10:30:00,11416</span><br><span class="line">SQL開発者を幸せにする！？ Sublime Text 3でも使える uroboroSQL Formatter を公開しました,DB,SQL|uroboroSQL|コーディング規約,2017-02-28 12:00:00,15881</span><br><span class="line">世論調査の内閣支持率を統計学的に解釈すると…?,DataScience,統計,2017-03-14 14:00:00,13400</span><br><span class="line">スタンフォード大学で食べたピーナッツサラダは、格別だった♥,Culture,Elastic-Stack|DesignThinking|Conference,2017&#x2F;03&#x2F;21 12:00:00,8152</span><br><span class="line">ぶらりシリコンバレー巡礼,Culture,Elastic-Stack|Conference,2017&#x2F;03&#x2F;22 12:00:00,5505</span><br><span class="line">ヒカ☆ラボ初参戦！AWS x IoTで若手エンジニアが登壇してきました,Infrastructure,AWS|IoT|Conference,2017&#x2F;03&#x2F;23 12:00:00,4280</span><br><span class="line">オープンソースカンファレンス2017 Tokyo&#x2F;Spring登壇＆ブース出展レポート,Culture,Vuls|uroboroSQL|Conference|SQL|UI&#x2F;UX|OSS|登壇レポート,2017&#x2F;03&#x2F;27 12:00:00,9324</span><br><span class="line">Elastic&#123;ON&#125;-2017 レポート ~概要編~,Culture,Elastic-Stack,2017&#x2F;03&#x2F;31 10:57:43,9199</span><br><span class="line">Elastic&#123;ON&#125;-2017 レポート ~セッション編~,Culture,Elastic-Stack,2017&#x2F;04&#x2F;03 12:00:00,13373</span><br><span class="line">HoloLensの空間共有サービスを使ってみよう,VR,HoloLens|Unity,2017&#x2F;04&#x2F;05 12:00:00,11297</span><br><span class="line">Elixir Conf Japan 2017 参加レポート,Programming,Elixir|参加レポート,2017&#x2F;04&#x2F;14 12:00:00,23049</span><br><span class="line">Unity未経験者がHoloLensアプリの開発をしてみた,VR,Unity|HoloLens,2017&#x2F;04&#x2F;21 12:00:00,14815</span><br><span class="line">マネージャーがうれしいRedmineデータのダッシュボード表示方法を公開します！！,Management,Elastic-Stack|Redmine|Kibana|Elasticsearch,2017&#x2F;05&#x2F;10 18:00:00,13176</span><br><span class="line">AIを使って顔画像から「常連さん」を判定しよう！,DataScience,Python|MachineLearning|DeepLearning|データ分析,2017&#x2F;05&#x2F;26 16:15:31,17786</span><br><span class="line">ES2015 Web componentsと国産Web componentsフレームワークUrushi,Programming,JavaScript|Web component,2017&#x2F;06&#x2F;05 12:00:00,11413</span><br><span class="line">インフラ入門vol.2(ネットワーク),Infrastructure,Network|Infrastructure|インフラ入門|入門,2017&#x2F;07&#x2F;04 15:04:04,15369</span><br><span class="line">古典的ゲームAIを用いたAlphaGo解説,DataScience,MachineLearning,2017&#x2F;08&#x2F;04 10:00:00,5111</span><br><span class="line">uroboroSQL x Spring BootによるWebアプリケーション開発,Programming,uroboroSQL|Java|SQL|SpringBoot,2017&#x2F;08&#x2F;28 12:00:00,13524</span><br><span class="line">第12回NLP若手の会シンポジウム　参加報告,DataScience,MachineLearning|NLP,2017&#x2F;09&#x2F;22 16:20:00,10242</span><br><span class="line">社内ヘルプデスクをＡＩで！,DataScience,MachineLearning|Redmine|データ分析,2017&#x2F;10&#x2F;05 18:24:22,11340</span><br><span class="line">最新で最強、AlphaGo Zero の解説,DataScience,MachineLearning|Algorithm,2017&#x2F;10&#x2F;30 13:35:51,5036</span><br><span class="line">最新テクノロジーでスポーツアイデアソンをやって中高生に教わった大事なこと,VR,DesignThinking|CoSpaces,2017&#x2F;11&#x2F;13 13:08:13,7541</span><br><span class="line">Future IoT デバイス,IoT,IoT,2017&#x2F;12&#x2F;07 13:00:00,5553</span><br><span class="line">第1回Future開発合宿,Culture,開発合宿|LT,2017&#x2F;12&#x2F;17 14:28:42,6441</span><br><span class="line">エンプラ&amp;オンプレでもAnsible導入成功したのでユーザー会で発表してきた,Infrastructure,Ansible|Infrastructure|登壇資料|登壇レポート,2018&#x2F;02&#x2F;09 11:12:14,19476</span><br><span class="line">NIPS2017 LT報告,DataScience,MachineLearning|Conference,2018&#x2F;02&#x2F;22 10:18:28,9310</span><br><span class="line">Future AI EXPO 開催！,Culture,Conference|MachineLearning,2018&#x2F;03&#x2F;01 12:01:22,2564</span><br><span class="line">ICLR2018 LT大会,DataScience,MachineLearning,2018&#x2F;04&#x2F;13 01:17:13,13848</span><br><span class="line">IoT&#x2F;M2M展（音声認識サービス）の展示,DataScience,IoT|Conference|MachineLearning,2018&#x2F;05&#x2F;22 14:20:58,7064</span><br><span class="line">データベースマイグレーション ～OracleからPostgreSQLへ～　ー第１回ー,DB,PostgreSQL|Oracle|DB移行,2018&#x2F;05&#x2F;29 11:06:05,26368</span><br><span class="line">人工知能学会（JSAI2018）参加報告,DataScience,MachineLearning,2018&#x2F;07&#x2F;23 13:56:36,10639</span><br><span class="line">データベースマイグレーション ～OracleからPostgreSQLへ～　−第２回ー,DB,PostgreSQL|Oracle|DB移行,2018&#x2F;08&#x2F;09 15:00:36,24652</span><br><span class="line">5TB&#x2F;日 のデータをAWS Glueでさばくためにやったこと（概要編,Infrastructure,AWS|データレイク,2018&#x2F;08&#x2F;28 13:27:14,28959</span><br><span class="line">NLP若手の会 (YANS) 第13回シンポジウム 参加レポート,DataScience,NLP|MachineLearning|参加レポート,2018&#x2F;09&#x2F;12 17:49:16,8110</span><br><span class="line">PostgreSQLパーティションプルーニングの動作を確認する,DB,DB|PostgreSQL,2018&#x2F;10&#x2F;19 16:00:00,26507</span><br><span class="line">その問い合わせ、AIが解決します！～Redmineチケットレコメンドシステムのご紹介～,DataScience,MachineLearning|Redmine|Algorithm|BOT,2018&#x2F;10&#x2F;31 09:54:57,32023</span><br><span class="line">AmazonConnect BootCampセッションでハンズオン受けてきた話,Infrastructure,AWS,2018&#x2F;12&#x2F;02 14:21:59,31846</span><br><span class="line">5TB&#x2F;日 のデータをAWS Glueでさばくためにやったこと（性能編）,Infrastructure,AWS|Spark|Glue,2018&#x2F;12&#x2F;05 23:18:17,10683</span><br><span class="line">第2回Future開発合宿,Culture,開発合宿,2019&#x2F;01&#x2F;02 13:50:16,5993</span><br><span class="line">Real World HTTPミニ版リリース記念勉強会の実施報告,Culture,Network|新人研修|Web|HTTP|出版|書籍,2019&#x2F;04&#x2F;10 11:00:00,6731</span><br><span class="line">LT Free Style Battle（VS リクルートテクノロジーズ）を開催しました,Culture,LT|競技プログラミング|登壇資料,2019&#x2F;04&#x2F;22 10:12:28,8558</span><br><span class="line">Qiita Jobsを始めました,Culture,Qiita,2019&#x2F;04&#x2F;25 13:43:19,4949</span><br><span class="line">IoT&#x2F;M2M展へ「Future IoT」出展してきました！,Culture,Conference|IoT,2019&#x2F;05&#x2F;09 10:00:00,4974</span><br><span class="line">第1回PG Battle参戦記,Programming,競技プログラミング,2019&#x2F;05&#x2F;13 10:33:39,9169</span><br><span class="line">AI EXPO2019に参加しました！,DataScience,MachineLearning|Conference|データ分析,2019&#x2F;05&#x2F;15 09:53:25,6291</span><br><span class="line">「スマートグラスを使った革新的なビジネスを考えるアイデアソン」の実施報告,VR,HoloLens,2019&#x2F;05&#x2F;27 09:00:00,11927</span><br><span class="line">【合格記】GCP Professional Cloud Architect認定資格を振り返る,Infrastructure,GCP|合格記,2019&#x2F;05&#x2F;30 12:00:15,9658</span><br><span class="line">OpenCensus(OpenTelemetry)とは,Infrastructure,Monitoring|Go|OpenCensus,2019&#x2F;06&#x2F;04 09:00:51,12337</span><br><span class="line">デブサミ2019に登壇しました,Management,登壇資料|Conference,2019&#x2F;06&#x2F;07 09:00:00,8841</span><br><span class="line">ソースコードを綺麗にするためにまず心がけたい３点,Programming,コーディング規約,2019&#x2F;06&#x2F;10 09:20:47,16646</span><br><span class="line">TypeScript教育用コンテンツ公開のお知らせ,Programming,TypeScript|出版|Frontend|書籍,2019&#x2F;06&#x2F;12 15:04:53,6247</span><br><span class="line">ICLR2019 参加報告ブログ,DataScience,MachineLearning,2019&#x2F;06&#x2F;17 09:00:00,3980</span><br><span class="line">RedmineからGoogle Hangouts Chat へ連携するプラグインを作成しました！,Programming,Redmine|ChatOps|BOT,2019&#x2F;06&#x2F;20 09:15:06,6930</span><br><span class="line">Amazon Redshiftの仕様を調べてみた,Infrastructure,AWS,2019&#x2F;06&#x2F;25 09:00:00,66162</span><br><span class="line">人工知能学会（JSAI2019） 参加報告,DataScience,MachineLearning,2019&#x2F;06&#x2F;27 08:13:03,16153</span><br><span class="line">AWS Datalake Hands-on(2019 May)メモ,Infrastructure,AWS|データレイク,2019&#x2F;07&#x2F;02 09:00:00,10246</span><br><span class="line">マネージャーがうれしいRedmineデータのグラフ表示方法を公開します！！（Metabase編） ,Management,Metabase|Redmine,2019&#x2F;07&#x2F;03 09:00:00,9686</span><br><span class="line">GCPのIAMポリシー周りでドハマりした話,Infrastructure,GCP,2019&#x2F;07&#x2F;08 08:33:22,15674</span><br><span class="line">アルバイト生から見たフューチャーのTIG DXユニット,Culture,アルバイト|Go|Terraform,2019&#x2F;07&#x2F;12 09:00:00,10804</span><br><span class="line">Goを学ぶときにつまずきやすいポイントFAQ,Programming,Go|コードレビュー|入門,2019&#x2F;07&#x2F;13 10:00,75169</span><br><span class="line">GCPインスタンスを自動で停止させるツールの公開,Infrastructure,GCP|Kubernetes,2019&#x2F;07&#x2F;16 09:12:58,6268</span><br><span class="line">— 脱RDB脳 — Cassandraのデータモデルについて考えてみる,DB,DB|DataModel|KVS|Cassandra,2019&#x2F;07&#x2F;18 09:11:12,26828</span><br><span class="line">Future IoTのstackshareを公開しました,IoT,IoT|技術選定,2019&#x2F;07&#x2F;23 08:35:13,5841</span><br><span class="line">社内技術書輪読会とSite Reliability Engineering,Culture,Infrastructure|SRE,2019&#x2F;07&#x2F;29 08:08:56,10647</span><br><span class="line">俺のインフラデザインパターン　～過去の失敗に学ぶニッチなインフラの話～,Infrastructure,Infrastructure|要件定義,2019&#x2F;07&#x2F;31 09:47:37,9491</span><br><span class="line">Google Cloud Next ’19 in Tokyo Day2 セッションレポート,Infrastructure,GCP,2019&#x2F;08&#x2F;04 09:00:00,35490</span><br><span class="line">Google Cloud Next &#39;19 in Tokyo Day3 セッションレポート,Infrastructure,GCP,2019&#x2F;08&#x2F;09 08:29:54,23197</span><br><span class="line">WAFとして go-swagger を選択してみた,Programming,Go|Swagger|OpenAPI|go-swagger,2019&#x2F;08&#x2F;14 10:30:07,12420</span><br><span class="line">はじめてのTerraform 0.12 ～環境構築～,Infrastructure,AWS|Terraform,2019&#x2F;08&#x2F;16 12:43:21,11549</span><br><span class="line">はじめてのTerraform 0.12 ～実践編～,Infrastructure,AWS|Terraform,2019&#x2F;08&#x2F;19 07:32:16,24813</span><br><span class="line">初めてのGCPで環境構築してハマったこと,Infrastructure,GCP|Network|DB|Kubernetes,2019&#x2F;08&#x2F;20 09:19:49,16267</span><br><span class="line">システム開発で得たRedis利用ノウハウ,DB,Redis|KVS,2019&#x2F;08&#x2F;21 08:53:57,18635</span><br><span class="line">ソフトとハードの垣根を越えろ - IoTハードウェアの開発をソフト屋視点で解説します,IoT,IoT|CAD|電子工作,2019&#x2F;08&#x2F;26 08:30:52,22649</span><br><span class="line">GKEのPodから異なるプロジェクトのIPアドレスへ接続できずハマった話,Infrastructure,GCP|Network,2019&#x2F;08&#x2F;27 23:39:01,9895</span><br><span class="line">AWS IAMロールの信頼関係の気になる動作,Infrastructure,AWS,2019&#x2F;09&#x2F;02 08:17:51,6787</span><br><span class="line">Terraformのベストなプラクティスってなんだろうか,Infrastructure,Terraform,2019&#x2F;09&#x2F;03 15:20:52,10993</span><br><span class="line">Let&#39;s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～,Infrastructure,GCP|Docker|CloudRun|コンテナデプロイ|LetsTryGCP,2019&#x2F;09&#x2F;09 09:30:42,10840</span><br><span class="line">Google Cloud Kubernetes Day セッションレポート,Infrastructure,GCP|Kubernetes|GitOps|Anthos|参加レポート,2019&#x2F;09&#x2F;10 09:13:03,11903</span><br><span class="line">サステナブルなエンジニア組織デザイン（前編） ～よくある設計とジレンマ～,Management,組織論,2019&#x2F;09&#x2F;17 11:00:42,19210</span><br><span class="line">サステナブルなエンジニア組織デザイン（後編） ～デザインパターンと10のリファクタリング～,Management,組織論|マネジメント,2019&#x2F;09&#x2F;18 08:37:42,21541</span><br><span class="line">Oculus Questで作る入院中の子どもたちに向けたパラスポーツ体験,VR,Unity,2019&#x2F;09&#x2F;25 10:49:43,6756</span><br><span class="line">Go言語のDBレイヤーライブラリの評価,Programming,Go|DB|ORM|SQL|技術選定,2019&#x2F;09&#x2F;26 10:00,20298</span><br><span class="line">Let&#39;s Try GCP #2 ～Cloud FunctionsをVPC connectorと一緒に使ってみる～,Infrastructure,GCP|CloudFunctions|LetsTryGCP,2019&#x2F;09&#x2F;27 09:34:14,10939</span><br><span class="line">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った,Programming,JSON|jsonschema|Go,2019&#x2F;10&#x2F;01 09:31:51,12010</span><br><span class="line">CUEを試して見る,Programming,CUE|Linter,2019&#x2F;10&#x2F;02 08:30:09,17622</span><br><span class="line">&quot; 本当に使ってよかったOpenAPI (Swagger) ツール&quot;,Programming,OpenAPI|Swagger|コーディング規約,2019&#x2F;10&#x2F;08 08:48:06,18771</span><br><span class="line">AWS Session Managerでセッションを切断されにくくする方法,Infrastructure,AWS|Session-Manager,2019&#x2F;10&#x2F;09 08:56:31,8384</span><br><span class="line">Software Design 後記,DataScience,MachineLearning|Algorithm|出版,2019&#x2F;10&#x2F;16 08:56:31,8460</span><br><span class="line">GKEクラスタに割り当てるCIDRを設計する,Infrastructure,GCP|Network|Kubernetes,2019&#x2F;10&#x2F;17 08:02:12,16817</span><br><span class="line">第1回社内ロボコン開催記-ライントレーサー編-,IoT,Robot|IoT|Future電子工作部|電子工作,2019&#x2F;10&#x2F;18 09:44:58,11172</span><br><span class="line">工場をハックするための基本知識　前編,IoT,Network|工場|IoT|PLC,2019&#x2F;10&#x2F;23 09:04:03,14351</span><br><span class="line">テキストアナリティクスシンポジウム開催報告&amp;ACL2019参加報告,DataScience,MachineLearning,2019&#x2F;10&#x2F;24 10:36:57,13151</span><br><span class="line">Anthosについて改めて知る(GCPUG Anthos day 参加レポ),Infrastructure,Anthos|Kubernetes,2019&#x2F;10&#x2F;25 12:38:13,8931</span><br><span class="line">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ,Programming,React|Redux|Frontend,2019&#x2F;10&#x2F;29 22:40:26,13124</span><br><span class="line">GoでCUEのバリデーション機能を利用しつつ、.cue&#x2F;.json&#x2F;.yaml形式の設定ファイルを読み込む,Programming,CUE|Go|JSON,2019&#x2F;10&#x2F;30 11:01:41,14410</span><br><span class="line">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました,Infrastructure,AWS|Glue,2019&#x2F;11&#x2F;01 13:37:19,9653</span><br><span class="line">インフラ入門vol.3(ネットワーク冗長化構成),Infrastructure,Network|インフラ入門|入門,2019&#x2F;11&#x2F;07 11:01:01,31552</span><br><span class="line">Go Cloud#1 概要とBlobへの活用方法,Programming,Go|GoCDK|Storage,2019&#x2F;11&#x2F;11 11:15:01,19825</span><br><span class="line">Go Cloud#2 Pub&#x2F;Subの概要紹介,Programming,Go|GoCDK,2019&#x2F;11&#x2F;12 10:46:59,12064</span><br><span class="line">Go Cloud#3 Go CloudのDocStoreを使う,Programming,Go|GoCDK|DynamoDB|KVS,2019&#x2F;11&#x2F;13 10:04:49,17278</span><br><span class="line">Go Cloud#4 URLを編集するパッケージ,Programming,Go|GoCDK|SQS,2019&#x2F;11&#x2F;14 11:19:44,8760</span><br><span class="line">Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する,Programming,Go|GoCDK|AWS|LocalStack,2019&#x2F;11&#x2F;15 12:10:54,10715</span><br><span class="line">Go Cloud#6 GCPのローカルエミュレータを活用する,Programming,Go|GCP|GoCDK,2019&#x2F;11&#x2F;19 14:39:21,15140</span><br><span class="line">Go Conference 2019 Autumn に登壇しました,Programming,Go|登壇資料|Algorithm|Conference,2019&#x2F;11&#x2F;20 09:05:17,12119</span><br><span class="line">「脱Oracle」の背景にある、Oracle Databaseの価値を改めて考える,DB,Oracle|DB|DB移行|技術選定|要件定義,2019&#x2F;11&#x2F;21 09:20:12,12278</span><br><span class="line">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる,Programming,Go|GoCDK|fluentd,2019&#x2F;11&#x2F;28 13:08:47,14342</span><br><span class="line">GDG DevFest in 信州2019に登壇しました,Infrastructure,GCP|登壇資料,2019&#x2F;11&#x2F;29 13:58:44,10221</span><br><span class="line">SORACOM USBドングルの自動接続,Programming,Ruby|Selenium|SORACOM,2019&#x2F;12&#x2F;01 12:02:03,10352</span><br><span class="line">Go Conferenceの📛を作る,Programming,Go,2019&#x2F;12&#x2F;03 10:31:11,16719</span><br><span class="line">AWS Glueの単体テスト環境の構築手順,Infrastructure,AWS|Glue|Spark|Python|Docker|LocalStack,2019&#x2F;12&#x2F;06 00:22:02,10313</span><br><span class="line">NeurIPS 2019 参加報告,DataScience,MachineLearning,2019&#x2F;12&#x2F;10 16:22:02,4248</span><br><span class="line">golang.tokyoで発表してきました,Programming,Go|登壇資料|勉強会,2019&#x2F;12&#x2F;11 13:10:53,10877</span><br><span class="line">NeurIPS 2019 論文紹介,DataScience,MachineLearning,2019&#x2F;12&#x2F;27 16:22:02,11141</span><br><span class="line">打鍵テストをCIで回す：Cypress on GitHub Actions,CI&#x2F;CD,Cypress|CI&#x2F;CD|テスト|E2Eテスト,2020&#x2F;01&#x2F;15 09:25:42,15016</span><br><span class="line">実践Drawio,Design,draw.io|Document,2020&#x2F;01&#x2F;16 11:07:03,9604</span><br><span class="line">工場をハックするための基本知識　後編,IoT,Network|工場|IoT|PLC,2020&#x2F;01&#x2F;20 09:59:49,24308</span><br><span class="line">スロットリングとの付き合い方,Infrastructure,AWS|GCP|リトライ,2020&#x2F;01&#x2F;21 08:52:16,7191</span><br><span class="line">Auth0 導入編,認証認可,Auth0|Vue.js|入門,2020&#x2F;01&#x2F;22 10:31:27,9140</span><br><span class="line">Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する,認証認可,Vue.js|Auth0,2020&#x2F;01&#x2F;23 11:02:12,10454</span><br><span class="line">Umeda.go 2020 Winterに3名で登壇しました,Programming,Go|登壇資料|勉強会,2020&#x2F;01&#x2F;27 09:39:35,8153</span><br><span class="line">Auth0のRulesを使って認証認可を自在にカスタマイズする,認証認可,Auth0|JavaScript,2020&#x2F;01&#x2F;28 09:24:18,12635</span><br><span class="line">リモートワークを促進させるDaily Stand-up Meeting,Management,会議|マネジメント,2020&#x2F;01&#x2F;29 10:02:04,8558</span><br><span class="line">AirflowのTips 11選,Infrastructure,Python|Airflow,2020&#x2F;01&#x2F;31 11:28:46,12975</span><br><span class="line">チームで機能設計するためのPlantUML標準化,Design,PlantUML|UML|コーディング規約|チーム開発,2020&#x2F;02&#x2F;03 09:16:35,15979</span><br><span class="line">これさえあればサービス構成図がだいたい描けるアイコンセットを公開します！,Design,icon,2020&#x2F;02&#x2F;04 08:12:14,2370</span><br><span class="line">GCP連載#1 Stackdriver Loggingへ良い感じのログ出力方法を考える,Infrastructure,GCP|OpenCensus|Go|Monitoring|GCP連載|CloudOperations,2020&#x2F;02&#x2F;05 09:23:10,16142</span><br><span class="line">GCP連載#2 Istio on GKEではじめるサービスメッシュ,Infrastructure,GCP|Istio|Kubernetes|GCP連載|ServiceMesh,2020&#x2F;02&#x2F;06 11:43:53,17017</span><br><span class="line">GCP連載#3 Goでサーバーレスな管理画面アプリを作る,Programming,Go|GCP|Serverless|GCP連載|CloudRun,2020&#x2F;02&#x2F;07 10:54:41,24108</span><br><span class="line">golang.tokyo #29に4名で登壇しました,Programming,Go|登壇資料|勉強会,2020&#x2F;02&#x2F;09 20:01:05,8893</span><br><span class="line">GCP連載#4 Cloud Life Sciencesを見てみた,Infrastructure,GCP|GCP連載|ヘルスケア|BigQuery,2020&#x2F;02&#x2F;10 11:53:19,11825</span><br><span class="line">GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる,Infrastructure,GCP連載|GCP|Python|Go,2020&#x2F;02&#x2F;12 09:14:36,12958</span><br><span class="line">GCP連載#6 Terraform Validatorを使って、GCPのセキュリティポリシーの自動チェックを行う,Infrastructure,GCP|GCP連載|Terraform,2020&#x2F;02&#x2F;13 10:26:28,11780</span><br><span class="line">GCP連載#7 GCPのData Transfer Serviceを使って簡単にS3からBigQueryにデータ転送をしてみる,Infrastructure,GCP|GCP連載|BigQuery,2020&#x2F;02&#x2F;14 09:39:28,9109</span><br><span class="line">GCP連載#8 gcloud compute sshじゃなくてsshコマンドを使いたいあなたへ,Infrastructure,GCP連載|GCP,2020&#x2F;02&#x2F;17 10:56:29,5415</span><br><span class="line">GCP連載#9 初めてのGCP 画像AI(Vision API)をさわってみた,Infrastructure,GCP|GCP連載,2020&#x2F;02&#x2F;18 10:16:55,9649</span><br><span class="line">GCP連載#10 Terraform ではなくCloud Deployment Manager を使ってみよう,Infrastructure,GCP|GCP連載,2020&#x2F;02&#x2F;19 10:05:30,18747</span><br><span class="line">DynamoDB×Go連載#1 GoでDynamoDBでおなじみのguregu&#x2F;dynamoを利用する,Programming,Go|AWS|DynamoDB×Go|KVS|DynamoDB,2020&#x2F;02&#x2F;25 10:32:43,10169</span><br><span class="line">DynamoDB×Go連載#2 AWS SDKによるDynamoDBの基本操作,Programming,Go|AWS|DynamoDB×Go|KVS|DynamoDB,2020&#x2F;02&#x2F;27 08:25:12,9529</span><br><span class="line">DynamoDB×Go#3 Go CDKでどこまでいける？機能を調べてみた,Programming,Go|AWS|DynamoDB×Go|KVS|DynamoDB|GoCDK,2020&#x2F;02&#x2F;28 10:13:26,16804</span><br><span class="line">アイコンセット公開！その裏側を聞いてみた,Culture,icon|インタビュー,2020&#x2F;03&#x2F;09 10:13:26,12707</span><br><span class="line">Goの標準ライブラリのコードリーディングのすすめ,Programming,Go|CodeReading,2020&#x2F;03&#x2F;10 08:55:28,14918</span><br><span class="line">JavaプログラマーのためのGo言語入門,Programming,Go|Java|翻訳|入門,2020&#x2F;03&#x2F;11 09:39:47,45562</span><br><span class="line">公開鍵暗号(非対称鍵暗号)の仕組みをわかりやすく解説してみる,Infrastructure,暗号,2020&#x2F;03&#x2F;12 10:34:17,6063</span><br><span class="line">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～,Programming,Frontend|Vue.js|フロントエンド記事集中投稿,2020&#x2F;03&#x2F;16 11:49:57,8556</span><br><span class="line">SPA + Tableau Online + Auth0 SSO,Programming,Frontend|JavaScript|Auth0|Tableau|SSO,2020&#x2F;03&#x2F;17 10:59:27,7563</span><br><span class="line">【Figma】を使ってチームでUI&#x2F;UX設計するといいこと,Design,UI&#x2F;UX|Frontend|Figma,2020&#x2F;03&#x2F;18 12:33:18,10288</span><br><span class="line">今あえてTypeScriptのビルド＆バンドルツールを探してみる,Programming,TypeScript|JavaScript|Frontend|webpack|Node.js,2020&#x2F;03&#x2F;19 10:12:40,17133</span><br><span class="line">Serverless連載1: SAMを使ったローカルテスト（Go編）,Programming,Go|AWS|Serverless|Serverless連載|DynamoDB|Lambda,2020&#x2F;03&#x2F;23 09:56:50,16676</span><br><span class="line">Go1.14のRelease Partyに登壇しました🎉,Programming,Go|登壇資料,2020&#x2F;03&#x2F;25 14:44:32,4126</span><br><span class="line">Serverless連載2: AWS Lambda×Goの開発Tips,Programming,Go|AWS|Serverless|Serverless連載|Lambda,2020&#x2F;03&#x2F;26 14:24:00,12824</span><br><span class="line">Serverless連載3: Goでサーバーレス用の検索エンジンwatertowerを作ってみました,Programming,Go|Serverless|AWS|GoCDK|Serverless連載|DynamoDB,2020&#x2F;03&#x2F;27 09:51:22,16861</span><br><span class="line">Serverless連載4: Firebase CrashlyticsでAndroidアプリのエラーログをさくっと収集する,Programming,Serverless|Serverless連載|GCP|Firebase|Android|アプリ,2020&#x2F;03&#x2F;30 09:45:42,11329</span><br><span class="line">Serverless連載5: CloudEventsのGo版SDKをいじってみる,Programming,Serverless|Serverless連載|Go|GCP,2020&#x2F;03&#x2F;31 09:39:23,20711</span><br><span class="line">&quot;Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた&quot;,Programming,Vue.js|Frontend|フロントエンド記事集中投稿|初心者向け,2020&#x2F;04&#x2F;01 10:30:55,19082</span><br><span class="line">スキーマファースト開発のためのOpenAPI（Swagger）設計規約,Programming,OpenAPI|Swagger|Go|TypeScript|設計|チーム開発,2020&#x2F;04&#x2F;09 10:38:04,14822</span><br><span class="line">インフラ入門vol.4（ストレージ）,Infrastructure,Storage|インフラ入門|入門,2020&#x2F;04&#x2F;14 11:07:29,13039</span><br><span class="line">【小ネタ】AWS S3 署名付きURLってマネジメントコンソールからでも作れたのね,Infrastructure,AWS,2020&#x2F;04&#x2F;15 09:46:43,3886</span><br><span class="line">ServiceNow+Terraform(+Go) によるインフラ構築自動化,Infrastructure,ServiceNow|Terraform|Go|Workflow,2020&#x2F;04&#x2F;16 21:30:49,24762</span><br><span class="line">Real World HTTP 第2版はなぜ1.5倍になったのか,Culture,出版|Web|HTTP|書籍,2020&#x2F;04&#x2F;21 09:55:14,14419</span><br><span class="line">PyConJP 2019に登壇しました,Programming,Python|登壇資料|Conference,2020&#x2F;04&#x2F;22 22:19:57,11192</span><br><span class="line">Session Manager と踏み台サーバの共存構成,Infrastructure,AWS|Session-Manager|踏み台,2020&#x2F;04&#x2F;23 10:23:54,10716</span><br><span class="line">社内勉強会で発表したGCP資料を公開します,Infrastructure,GCP|初心者向け|登壇資料|BigQuery|Kubernetes,2020&#x2F;04&#x2F;24 10:23:37,10465</span><br><span class="line">Goならわかるシステムプログラミングが増刷されて初版4刷になりました,Programming,Go|出版|書籍,2020&#x2F;04&#x2F;27 10:03:55,6984</span><br><span class="line">Vue.jsのslotの機能を初心者にわかるように解説してみた,Programming,Vue.js|Frontend|初心者向け|フロントエンド記事集中投稿,2020&#x2F;04&#x2F;28 18:42:56,10034</span><br><span class="line">Reduxを分かりやすく解説してみた,Programming,React|Redux|Frontend|フロントエンド記事集中投稿|初心者向け,2020&#x2F;04&#x2F;29 17:05:22,5931</span><br><span class="line">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話,Programming,React|Redux|Frontend|フロントエンド記事集中投稿,2020&#x2F;05&#x2F;01 10:19:34,25689</span><br><span class="line">PJでUIデザインにAtomic Designを導入したらどうだったのか,Design,UI&#x2F;UX|Frontend|AtomicDesign|Figma|フロントエンド記事集中投稿,2020&#x2F;05&#x2F;11 08:43:07,13199</span><br><span class="line">日本製HeadlessCMSのmicroCMSを触ってみた,Programming,Vue.js|HeadlessCMS|Frontend|フロントエンド記事集中投稿,2020&#x2F;05&#x2F;12 09:48:20,18206</span><br><span class="line">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編,Infrastructure,Docker|Python,2020&#x2F;05&#x2F;13 08:56:40,11240</span><br><span class="line">仕事でPythonコンテナをデプロイする人向けのDockerfile (2): distroless編,Infrastructure,Python|Docker,2020&#x2F;05&#x2F;14 08:51:53,12173</span><br><span class="line">Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する,Programming,Serverless|AWS|Serverless連載|DynamoDB|StepFunctions,2020&#x2F;05&#x2F;15 22:25:58,29877</span><br><span class="line">Go Tips連載1: ホワイトリストProxy申請するときのGo依存ライブラリURLドメインの調べ方,Programming,Go|GoTips連載|プロキシ,2020&#x2F;05&#x2F;18 09:55:52,2160</span><br><span class="line">Go Tips連載2: Golandで環境変数をさっと貼る方法 ,Programming,Go|Goland|GoTips連載,2020&#x2F;05&#x2F;19 21:52:54,3724</span><br><span class="line">Go Tips連載3: ファイルを扱うちょっとしたスクリプトをGoで書くときのTips5選,Programming,Go|GoTips連載,2020&#x2F;05&#x2F;20 09:43:46,17319</span><br><span class="line">Go Tips連載4: GoDocの読み方,Programming,Go|Document|GoTips連載,2020&#x2F;05&#x2F;21 22:23:40,18155</span><br><span class="line">Go Tips 連載5: エラーコードベースの例外ハンドリングの実装＋morikuni&#x2F;failureサンプル,Programming,Go|GoTips連載,2020&#x2F;05&#x2F;22 00:14:52,9380</span><br><span class="line">Go Tips連載6: Error wrappingされた各クラウドSDKの独自型エラーを扱う,Programming,Go|GoTips連載,2020&#x2F;05&#x2F;23 11:12:30,9639</span><br><span class="line">Go Tips 連載7:【golangci-lint】lint issueを新たに作り出さないためのTips,Programming,Go|GoTips連載|Linter,2020&#x2F;05&#x2F;25 09:30:35,2775</span><br><span class="line">Go Tips連載8: logパッケージでログ出力している場所の情報を出す,Programming,Go|GoTips連載,2020&#x2F;05&#x2F;27 10:36:36,4799</span><br><span class="line">あなたのGoアプリ&#x2F;ライブラリのパッケージ構成もっとシンプルでよくない？,Programming,設計|Go,2020&#x2F;05&#x2F;28 09:49:19,22722</span><br><span class="line">春の入門祭り🌸連載を始めます,Culture,TechBlog|入門,2020&#x2F;05&#x2F;29 11:56:30,5331</span><br><span class="line">フューチャー技術ブログの運営で心がけていること,Culture,TechBlog|運営,2020&#x2F;05&#x2F;30 13:28:08,37169</span><br><span class="line">春の入門祭り 🌸 #01 Goのテストに入門してみよう！,Programming,Go|初心者向け|テスト,2020&#x2F;06&#x2F;01 09:41:23,56000</span><br><span class="line">春の入門祭り 🌸 #02 Google Cloud Platform 101,Infrastructure,GCP|初心者向け,2020&#x2F;06&#x2F;02 09:54:02,11772</span><br><span class="line">春の入門祭り🌸#03 ゼロから始めるFlutter生活,Programming,Flutter|Dart|アプリ|初心者向け|クロスプラットフォーム,2020&#x2F;06&#x2F;03 11:09:41,18328</span><br><span class="line">春の入門祭り 🌸 #04 NW入門,Infrastructure,Network|初心者向け,2020&#x2F;06&#x2F;04 09:06:07,19505</span><br><span class="line">春の入門祭り 🌸 #05　データベース　テーブル設計入門,DB,DB|初心者向け|DataModel|入門,2020&#x2F;06&#x2F;05 21:46:58,10688</span><br><span class="line">フューチャー夏のインターン2020。リモート開催予定です,Culture,インターン,2020&#x2F;06&#x2F;06 14:32:59,16078</span><br><span class="line">春の入門祭り🌸 #6 とあるマイコンのクロスコンパイラ,Programming,clang|Compiler,2020&#x2F;06&#x2F;08 10:37:41,15366</span><br><span class="line">春の入門祭り🌸 #7 作って学ぶGraphQL。gqlgenを用いて鉄道データ検索API開発入門,Programming,GraphQL|Go|PostgreSQL,2020&#x2F;06&#x2F;09 11:16:57,35172</span><br><span class="line">春の入門祭り🌸 #8 人生を豊かにする文字列diff入門,Programming,Go|Algorithm,2020&#x2F;06&#x2F;10 11:31:40,14110</span><br><span class="line">&quot;春の入門祭り🌸 #9 Grep, Git grepの便利オプション&quot;,Programming,Shellscript,2020&#x2F;06&#x2F;11 09:53:08,20803</span><br><span class="line">春の入門祭り🌸 #10 denoに触れてみよう,Programming,deno|Frontend|JavaScript|Node.js,2020&#x2F;06&#x2F;12 12:06:07,7132</span><br><span class="line">フューチャーの新人研修後の配属先にかける新人の思いを歌ってみた,Culture,応援歌|新人研修,2020&#x2F;06&#x2F;13 14:20:17,5241</span><br><span class="line">春の入門祭り🌸 #11 Kaggle入門,DataScience,Kaggle|競技プログラミング|初心者向け|入門,2020&#x2F;06&#x2F;15 10:48:52,6515</span><br><span class="line">春の入門祭り 🌸#12 レシートで学ぶデータモデリング入門,DB,DB|DataModel|初心者向け|入門,2020&#x2F;06&#x2F;16 10:22:22,10646</span><br><span class="line">春の入門祭り 🌸 #13 Swift Compositional Layouts入門：複雑なCollectionViewをシンプルに実装する,Programming,Swift|アプリ,2020&#x2F;06&#x2F;17 10:20:21,11538</span><br><span class="line">春の入門祭り 🌸 #14 暗号通信入門 ,Infrastructure,暗号|Wireshark|初心者向け,2020&#x2F;06&#x2F;18 09:33:37,14002</span><br><span class="line">webpack入門,Programming,webpack|Frontend|JavaScript|Node.js|初心者向け,2020&#x2F;06&#x2F;19 10:19:09,9885</span><br><span class="line">春の入門祭り 🌸 #16 「その仕事、Slackで。」してみた事例を紹介,Infrastructure,Slack|ChatOps|初心者向け,2020&#x2F;06&#x2F;22 13:08:22,8630</span><br><span class="line">春の入門祭り🌸 #17 Elasticsearch入門,Infrastructure,Elasticsearch|Elastic-Stack|初心者向け,2020&#x2F;06&#x2F;23 10:14:50,17665</span><br><span class="line">春の入門祭り🌸 #18 Terraform 101,Infrastructure,Terraform|Ansible|初心者向け|GCP,2020&#x2F;06&#x2F;24 11:44:35,26865</span><br><span class="line">春の入門祭り🌸 #19 Chromeの拡張機能作ってみた！,Programming,JavaScript|JSON|ChromeExtension,2020&#x2F;06&#x2F;25 10:34:33,9023</span><br><span class="line">MLflowで実験管理入門,DataScience,MLOps|MLflow|MachineLearning|Python|入門|実験管理,2020&#x2F;06&#x2F;26 10:08:23,11978</span><br><span class="line">Terraform Associate合格記,Infrastructure,Terraform|合格記,2020&#x2F;06&#x2F;29 10:03:42,8670</span><br><span class="line">go-swaggerを用いたWebアプリケーション開発Tips19選,Programming,OpenAPI|Swagger|Go|Lambda|go-swagger,2020&#x2F;06&#x2F;30 10:06:15,41688</span><br><span class="line">Go の Open API 3.0 のジェネレータ oapi-codegen を試してみた,Programming,Go|OpenAPI|Swagger|go-swagger,2020&#x2F;07&#x2F;01 09:40:40,12496</span><br><span class="line">Auth0の設定をバージョン管理し、Auth0 Deploy CLIを利用してデプロイ環境を整える,CI&#x2F;CD,Auth0|AWS|GitLab,2020&#x2F;07&#x2F;02 09:48:34,11284</span><br><span class="line">スケーラブルデータベース ～クラウドにおける後悔しないデータベース選定～,DB,RDB|DB|KVS|技術選定|要件定義,2020&#x2F;07&#x2F;03 10:34:11,27292</span><br><span class="line">Zuora連載１：Zuora Central Platform概要,Infrastructure,Zuora|SaaS|サブスクリプション,2020&#x2F;07&#x2F;06 09:01:37,8951</span><br><span class="line">VSCode の Go extension でよく利用するコマンド 7選,Programming,Go|VSCode,2020&#x2F;07&#x2F;07 10:15:05,5295</span><br><span class="line">Zuora連載2：Zuora REST API 利用と開発環境構築,Programming,Zuora|SaaS|サブスクリプション|Go,2020&#x2F;07&#x2F;08 09:56:30,19317</span><br><span class="line">GoでWebアプリ開発時にあるあるだったレビューコメント,Programming,Go|コードレビュー,2020&#x2F;07&#x2F;09 11:09:27,38967</span><br><span class="line">HashiTalks: Japanに登壇しました,Infrastructure,登壇資料|Terraform|勉強会|GCP,2020&#x2F;07&#x2F;10 10:19:54,6859</span><br><span class="line">新人研修有志が初心者向けにバーチャルコンテストを実施しました &amp; Tips,Culture,競技プログラミング|新人研修,2020&#x2F;07&#x2F;15 10:51:27,9351</span><br><span class="line">Zuora連載 Vol.3 Notification及びEventTriggerの話,Infrastructure,Zuora|SaaS|サブスクリプション,2020&#x2F;07&#x2F;16 10:49:27,12160</span><br><span class="line">CORSのプリフライトリクエスト（OPTIONメソッド）はAPI Keyの認証なしでOKにしておかないと失敗する話,Infrastructure,CORS|Go|Web|HTTP,2020&#x2F;07&#x2F;17 00:00:00,11686</span><br><span class="line">Zuora連載 Vol.4 Workflowの話,Infrastructure,Zuora|Workflow|SaaS|サブスクリプション,2020&#x2F;07&#x2F;20 00:00:00,15766</span><br><span class="line">PythonユーザーのためのGraalVM,Programming,GraalVM|Python|Java,2020&#x2F;07&#x2F;21 00:00:00,16397</span><br><span class="line">AWSサービストリガによるLambda起動,Infrastructure,AWS|Serverless|LocalStack|Serverless連載|Lambda|DynamoDB|Go,2020&#x2F;07&#x2F;22 00:00:00,16624</span><br><span class="line">夏休み自由研究ブログ連載を始めます,Culture,TechBlog|夏休み自由研究,2020&#x2F;07&#x2F;26 00:00:00,5677</span><br><span class="line">GoからAWS KinesisのAggregationFormatを利用する,Programming,AWS|Go|Serverless|Serverless連載|Lambda|IoT,2020&#x2F;07&#x2F;27 00:00:00,15806</span><br><span class="line">DBスキーマを駆動にした開発のためのライブラリ調査,Programming,Go|DB|ORM|技術選定,2020&#x2F;07&#x2F;28 00:00:00,29396</span><br><span class="line">AWS認定 Machine learning specialty 合格記,DataScience,AWS|MachineLearning,2020&#x2F;07&#x2F;29 00:00:00,16687</span><br><span class="line">Redux-Toolkitに学ぶ、TypeScriptの型推論とこれからのAPIデザイン,Programming,TypeScript,2020&#x2F;07&#x2F;30 00:00:00,26993</span><br><span class="line">コード選考の問題選定を現場社員がやるわけ,Programming,採用|競技プログラミング,2020&#x2F;07&#x2F;31 00:00:00,6784</span><br><span class="line">Kaggleにワクチン開発用のデータを公開しました &amp; コード解説,DataScience,Python|Kaggle|ワクチン|ヘルスケア,2020&#x2F;08&#x2F;01 00:00:00,9652</span><br><span class="line">産業用機器向けフィールドネットワークModbusで温湿度センシング,IoT,Go|Modbus|PLC|夏休み自由研究|Future電子工作部|電子工作,2020&#x2F;08&#x2F;03 00:00:00,18790</span><br><span class="line">GoPlus自由研究,Programming,Go|夏休み自由研究,2020&#x2F;08&#x2F;04 00:00:00,13820</span><br><span class="line">Terraformで楽をしたい,Infrastructure,Terraform|GCP|夏休み自由研究,2020&#x2F;08&#x2F;05 00:00:00,9457</span><br><span class="line">初めてのOSSコミュニティ活動〜ドキュメント翻訳やってみた。カンファレンススタッフもやってみた。〜,Culture,Python|OSS|夏休み自由研究,2020&#x2F;08&#x2F;06 00:00:00,6228</span><br><span class="line">GoとSuffixArray,Programming,データ構造|Go|夏休み自由研究,2020&#x2F;08&#x2F;07 00:00:00,16217</span><br><span class="line">API Meetup Online #3で限定公開URL（Capability URLs）について話をしてきました。,Programming,HTTP|Web|登壇資料,2020&#x2F;08&#x2F;09 00:00:00,4645</span><br><span class="line">自動売買ツールを自作してみよう,Infrastructure,FinTech|Elastic-Stack|Elasticsearch|Kibana|夏休み自由研究,2020&#x2F;08&#x2F;10 00:00:00,21329</span><br><span class="line">ダイエット食のブレイクスルー！低温調理器を自作して鶏むね肉を美味しく食べる,Programming,ESP32|電子工作|Future電子工作部|夏休み自由研究|料理,2020&#x2F;08&#x2F;11 00:00:00,7433</span><br><span class="line">Marpで会社のスライドテンプレを作ってみる,Design,Marp|CSS|VSCode|夏休み自由研究,2020&#x2F;08&#x2F;12 00:00:00,4260</span><br><span class="line">GCPのRegion間レイテンシからサービスのRegion集約を考察する,Infrastructure,GCP|Network|夏休み自由研究|Terraform,2020&#x2F;08&#x2F;13 00:00:00,14457</span><br><span class="line">ぼくのなつやすみ5 -Knativeを知ろう-,Infrastructure,Kubernetes|Istio|Knative|GCP|夏休み自由研究,2020&#x2F;08&#x2F;14 00:00:00,15128</span><br><span class="line">Slack×GASの日報テンプレBOTを実務に導入してみた,Infrastructure,夏休み自由研究|Slack|JavaScript|BOT|GAS,2020&#x2F;08&#x2F;17 00:00:00,11380</span><br><span class="line">【入門】私を苦しめたDynamoDB,Programming,AWS|DynamoDB|DataModel|夏休み自由研究|入門,2020&#x2F;08&#x2F;18 00:00:00,13571</span><br><span class="line">Firebaseでお手軽！データ管理画面をつくる,Infrastructure,React|TypeScript|Firebase|Frontend|夏休み自由研究|入門,2020&#x2F;08&#x2F;19 00:00:00,13478</span><br><span class="line">Pythonによるパッケージ開発,Programming,Python|pytest|tox|pip|夏休み自由研究,2020&#x2F;08&#x2F;20 00:00:00,30029</span><br><span class="line">エンジニアが最低限理解しておくべきOSSライセンスの基礎知識,Infrastructure,OSS|license|夏休み自由研究,2020&#x2F;08&#x2F;21 00:00:00,19335</span><br><span class="line">go-swaggerでhello world,Programming,Go|go-swagger|入門,2020&#x2F;08&#x2F;24 00:00:00,12318</span><br><span class="line">Airflow の SLA設定方法,Infrastructure,Airflow|Python,2020&#x2F;08&#x2F;27 00:00:00,5449</span><br><span class="line">チームで推奨するVSCode拡張機能を共有するtips,Programming,VSCode|チーム開発,2020&#x2F;08&#x2F;28 00:00:00,3828</span><br><span class="line">Vue.jsで最速に始めるCheetah Grid,Infrastructure,JavaScript|Vue.js|CheetahGrid,2020&#x2F;09&#x2F;01 00:00:00,17291</span><br><span class="line">GCP Professional Cloud Network Engineer に合格しました,Infrastructure,GCP|合格記|Network,2020&#x2F;09&#x2F;02 00:00:00,6803</span><br><span class="line">ANTLRを業務で活用した話,Infrastructure,ANTLR4|Java|Vue.js|構文解析,2020&#x2F;09&#x2F;03 00:00:00,22355</span><br><span class="line">親子でプログラミング学習　Alexaスキルを作ろう,Programming,Alexa|プログラミング教育|JavaScript|VUI,2020&#x2F;09&#x2F;07 00:00:00,13630</span><br><span class="line">フューチャー技術ブログで行っている連載企画が良いよって話,Culture,TechBlog|運営,2020&#x2F;09&#x2F;08 00:00:00,20788</span><br><span class="line">キーボードを組み立ててみた話,Infrastructure,自作キーボード|電子工作,2020&#x2F;09&#x2F;09 00:00:00,20907</span><br><span class="line">「2020年代のコンテナ時代のPythonアーキテクチャ&amp;デプロイ」というテーマでPyCon.jp 2020で発表してきました,Programming,Python|Docker|登壇資料|コンテナデプロイ,2020&#x2F;09&#x2F;10 00:00:00,22134</span><br><span class="line">いぶし銀なインフラ機能「テープバックアップ／リストア」を語る,Infrastructure,バックアップ|リストア|テープ装置|NetBackup|Veritas,2020&#x2F;09&#x2F;11 00:00:00,15405</span><br><span class="line">フューチャーの2020 夏季インターンに参加してみた,Culture,インターン|採用,2020&#x2F;09&#x2F;13 00:00:00,12772</span><br><span class="line">GlyphFeeds連載を始めます！,Culture,GlyphFeeds|CMS|AWS|基幹システム|エンタープライズ,2020&#x2F;09&#x2F;14 00:00:00,3581</span><br><span class="line">メディア向けCMSサービスのインフラ構成のポイント,Infrastructure,AWS|CMS|GlyphFeeds|基幹システム|要件定義,2020&#x2F;09&#x2F;15 00:00:00,14476</span><br><span class="line">素材受信インターフェースにSQSを活用してみた ～標準キュー vs FIFOキュー～,Infrastructure,AWS|SQS|GlyphFeeds,2020&#x2F;09&#x2F;16 00:00:00,6986</span><br><span class="line">デスクトップWebアプリのモバイル化における考え方・Tips,,モバイルアプリ|設計|UI|GlyphFeeds,2020&#x2F;09&#x2F;17 00:00:00,7897</span><br><span class="line">SpringBootでDIを駆使したルールエンジン開発,Programming,ルールエンジン|SpringBoot|Java|Spring|DI|GlyphFeeds,2020&#x2F;09&#x2F;18 00:00:00,12420</span><br><span class="line">Engineer CampでSQLフォーマッタを開発しました,Programming,SQL|インターン|Antlr|構文解析|VSCode,2020&#x2F;09&#x2F;19 00:00:00,8078</span><br><span class="line">Future Engineer Camp 2020 参加記,Programming,Go|インターン|工場,2020&#x2F;09&#x2F;20 00:00:00,8047</span><br><span class="line">フューチャーのインターンEngineer Campに参加した話,Infrastructure,インターン|採用,2020&#x2F;09&#x2F;21 00:00:00,10331</span><br><span class="line">久しぶりに社内LT大会を開催しました。2020 Summer,Culture,LT|登壇資料,2020&#x2F;09&#x2F;23 00:00:00,7467</span><br><span class="line">CheetahGrid+Vue.jsをエンプラで使ってみた,Infrastructure,CheetahGrid|Vue.js|エンタープライズ,2020&#x2F;09&#x2F;24 00:00:00,24274</span><br><span class="line">Future Tech Night(第4弾：Go x AWS スマート工場編)を開催しました。,Programming,工場|Go|AWS|勉強会|TechNight|開催レポート|TechNight,2020&#x2F;09&#x2F;25 00:00:00,7521</span><br><span class="line">LambdaとGoを使ったサーバーレスWebAPI開発実践入門,Programming,Go|AWS|Serverless|go-swagger|Terraform,2020&#x2F;09&#x2F;27 00:00:00,36930</span><br><span class="line">CNCF連載始めます,Infrastructure,CNCF|OSS,2020&#x2F;09&#x2F;28 00:00:00,3960</span><br><span class="line">k3sを知る、動かす、感じる,Infrastructure,k3s|CNCF|CloudNative|Kubernetes,2020&#x2F;09&#x2F;29 00:00:00,8416</span><br><span class="line">Policy as Code を実現する Open Policy Agent に憧れて。ポリシーコードでAPI仕様をLintする,Programming,CNCF|CloudNative|OpenPolicyAgent|Swagger|OpenAPI|Go,2020&#x2F;09&#x2F;30 00:00:00,18852</span><br><span class="line">Linkerdで始めるサービスメッシュ,Infrastructure,Linkerd|Kubernetes|CNCF|ServiceMesh|CloudNative,2020&#x2F;10&#x2F;01 00:00:00,12512</span><br><span class="line">Buildpacksのビルダーをスクラッチから作ってみる,Infrastructure,CNCF|Buildpacks|Docker|Python|CloudNative|コンテナデプロイ,2020&#x2F;10&#x2F;02 00:00:00,25580</span><br><span class="line">TiKVに触れる,Programming,CloudNative|CNCF,2020&#x2F;10&#x2F;05 00:00:00,9066</span><br><span class="line">「Go on DockerスタイルでのバックエンドAPI構築」というテーマでGo Conference’20 in Autumn SENDAIに登壇しました,Programming,Go|Docker|登壇資料,2020&#x2F;10&#x2F;10 00:00:00,4799</span><br><span class="line">GoCon仙台で発表してきました,Programming,Go|登壇資料,2020&#x2F;10&#x2F;11 00:00:00,6332</span><br><span class="line">2020年秋にVue.jsのアプリケーションを作るなら、押さえておきたい5つのポイント,Programming,Vue.js|JavaScript|Frontend,2020&#x2F;10&#x2F;13 00:00:00,9129</span><br><span class="line">CEATEC 2020 ONLINE に参加します !!,Infrastructure,Conference|MachineLearning,2020&#x2F;10&#x2F;15 00:00:00,3342</span><br><span class="line">ProxyとDockerと新人社員と時々わたし,Infrastructure,プロキシ|Firewall|Docker|NW|DockerCompose,2020&#x2F;10&#x2F;20 00:00:00,25613</span><br><span class="line">CloudEndure Migration - 導入編,Infrastructure,AWS|移行ツール|CloudEndure|クラウドマイグレーション|クラウドリフト,2020&#x2F;10&#x2F;21 00:00:00,18803</span><br><span class="line">GoとAWS LambdaのためのMakefile,Programming,Go|AWS|Lambda|Makefile,2020&#x2F;10&#x2F;22 00:00:00,3946</span><br><span class="line">秋のブログ週間連載をはじめます,Programming,秋ブログ週間,2020&#x2F;10&#x2F;26 00:00:00,4478</span><br><span class="line">Vulsの歴史,Security,Vuls|秋ブログ週間,2020&#x2F;10&#x2F;27 00:00:00,16275</span><br><span class="line">読書の秋に読みたい、オライリー謎書籍10選,Culture,書籍|秋ブログ週間,2020&#x2F;10&#x2F;28 00:00:00,8143</span><br><span class="line">フューチャーにアルバイトで参画して一年半が経ったので一度振りかえる。,Culture,アルバイト|秋ブログ週間,2020&#x2F;10&#x2F;30 00:00:00,15213</span><br><span class="line">フューチャーでjobsバイト、競プロ入社を経験して,Culture,アルバイト|競技プログラミング|秋ブログ週間,2020&#x2F;11&#x2F;02 00:00:00,7760</span><br><span class="line">人工知能と神経科学,DataScience,人工知能|神経科学|深層学習|強化学習|秋ブログ週間,2020&#x2F;11&#x2F;04 00:00:00,13713</span><br><span class="line">イノベーションの捉え方,DataScience,イノベーション|統計|政府統計|秋ブログ週間,2020&#x2F;11&#x2F;05 00:00:00,19608</span><br><span class="line">OSSコミュニティへのフィードバック ,Programming,OSS|Java|秋ブログ週間|Tomcat,2020&#x2F;11&#x2F;06 00:00:00,11768</span><br><span class="line">フューチャーOSS推進タスクフォース始めます,Culture,OSS|TechBlog,2020&#x2F;11&#x2F;07 00:00:00,21232</span><br><span class="line">GoのWebアプリ開発でフラットパッケージにした話,Programming,秋ブログ週間|Go|設計,2020&#x2F;11&#x2F;09 00:00:00,19628</span><br><span class="line">Parcel 2.0 beta.1を試す,Programming,Parcel|TypeScript|Frontend,2020&#x2F;11&#x2F;11 00:00:00,8811</span><br><span class="line">GoでLambdaからLambdaを呼び出すときに気をつけたいポイント6選,Programming,AWS|Go|Lambda,2020&#x2F;11&#x2F;12 00:00:00,22990</span><br><span class="line">LocalStackに向けてTerraformを実行する,Infrastructure,LocalStack|AWS|Terraform|Docker|Go|DockerCompose,2020&#x2F;11&#x2F;13 00:00:00,15836</span><br><span class="line">Future Tech Cast をはじめました,Culture,TechBlog|TechCast,2020&#x2F;11&#x2F;16 00:00:00,10862</span><br><span class="line">Goのデバッグ環境 on VSCode,Programming,Go|デバッグ|VSCode,2020&#x2F;11&#x2F;17 00:00:00,8159</span><br><span class="line">AWS S3をIP制限付きのファイルダウンロードリンクにする,Infrastructure,AWS|S3,2020&#x2F;11&#x2F;18 00:00:00,6984</span><br><span class="line">PythonistaがGo言語に入門してみた,Programming,Python|Go|入門,2020&#x2F;11&#x2F;19 00:00:00,9587</span><br><span class="line">CloudEndure Migration - 実践編,Infrastructure,AWS|CloudEndure|移行ツール|クラウドマイグレーション|クラウドリフト,2020&#x2F;11&#x2F;20 00:00:00,27273</span><br><span class="line">Auth0の出版記念に行ってきました！,Programming,Auth0,2020&#x2F;11&#x2F;24 00:00:00,3174</span><br><span class="line">Qiita Advent Calendar 2020 に参加します,Culture,Qiita|AdventCalendar|AdventCalendar2020|TechBlog,2020&#x2F;11&#x2F;25 00:00:00,7236</span><br><span class="line">塗り絵の魚がすいすい泳ぐ？ ～子ども向けアトラクションを作ってみた～,IoT,RealSense|Processing,2020&#x2F;11&#x2F;26 00:00:00,6682</span><br><span class="line">数字で振り返るフューチャー技術ブログ（2020）,Culture,TechBlog,2020&#x2F;11&#x2F;27 00:00:00,16020</span><br><span class="line">DynamoDBのページング,Programming,DynamoDB|Go|AWS|ページング,2020&#x2F;11&#x2F;30 00:00:00,8065</span><br><span class="line">GoがApple Siliconにネイティブ対応したのでベンチマークをとってみました,Programming,Go,2020&#x2F;12&#x2F;03 00:00:00,8792</span><br><span class="line">AWSマネージドAirflow(MWAA)についてのFAQ,Programming,Airflow|AWS|Python|ジョブ設計,2020&#x2F;12&#x2F;06 00:00:00,9642</span><br><span class="line">バイオ情報学研究発表会で発表してきました,DataScience,機械学習|ワクチン|ヘルスケア|NLP|登壇資料,2020&#x2F;12&#x2F;08 00:00:00,2514</span><br><span class="line">Goでio.Readerをラップしてio.ReadSeekerを作る関数を作った &amp; プロパティベーステストで徹底的にテスト,Programming,Go|PICT|PBT,2020&#x2F;12&#x2F;11 00:00:00,14673</span><br><span class="line">2021年版Pythonの型ヒントの書き方 (for Python 3.9),Programming,Python,2020&#x2F;12&#x2F;23 00:00:00,17871</span><br><span class="line">Future Tech Night(第5弾：AWS＆DataPlatform MaaSビジネス編)を開催しました。,Programming,AWS|データレイク|勉強会|登壇レポート|開催レポート|TechNight,2020&#x2F;12&#x2F;28 00:00:00,6519</span><br><span class="line">Electronの使い方 Web開発の技術でデスクトップアプリを作ろう,Programming,Vue.js|Electron|クロスプラットフォーム,2021&#x2F;01&#x2F;07 00:00:00,26181</span><br><span class="line">自分の分身(3Dアバター)と自作ワールドを作ってみた,VR,Unity3D|VRoid|Unity|VR,2021&#x2F;01&#x2F;08 00:00:00,8218</span><br><span class="line">技術ブログの年間連載予定を発表します,Culture,TechBlog|インデックス,2021&#x2F;01&#x2F;12 00:00:00,6436</span><br><span class="line">コミュニティ運営をして思っていること,Culture,秋ブログ週間|OSS,2021&#x2F;01&#x2F;14 00:00:00,7204</span><br><span class="line">MLOpsことはじめ ～実験管理導入と学習基盤の構築～,DataScience,Kubernetes|MLOps|実験管理,2021&#x2F;01&#x2F;15 00:00:00,23002</span><br><span class="line">リモートワーク環境連載を始めます,Culture,リモートワーク|インデックス,2021&#x2F;01&#x2F;18 00:00:00,4548</span><br><span class="line">プラントエンジニアのオレオレリモートワーク環境,Culture,リモートワーク,2021&#x2F;01&#x2F;19 00:00:00,21531</span><br><span class="line">Androidのビルドバリアントをイチから理解する,Programming,Android|Gradle|BuildVariant,2021&#x2F;01&#x2F;20 00:00:00,28800</span><br><span class="line">DockerでRUNをまとめた方が良いとは限らない,Programming,Docker,2021&#x2F;01&#x2F;21 00:00:00,6501</span><br><span class="line">オレのDynamoDB Streamsが再着火しないわけがない,Programming,AWS|DynamoDB|DynamoDBStream|Go|トラブルシュート,2021&#x2F;01&#x2F;22 00:00:00,9263</span><br><span class="line">July Tech Festa 2021 winterで発表しました,Programming,AWS|Electron|登壇資料|Vue.js,2021&#x2F;01&#x2F;25 00:00:00,3262</span><br><span class="line">不調PCを介抱しつつWMIに思いを馳せる,Infrastructure,Windows|トラブルシュート,2021&#x2F;01&#x2F;27 00:00:00,24961</span><br><span class="line">Future Tech Night(第3弾：船舶IoT Platform編)を開催しました。,Culture,AWS|登壇資料|勉強会|開催レポート|登壇レポート|TechNight,2021&#x2F;01&#x2F;28 00:00:00,3865</span><br><span class="line">Azure Event Hubs の EventProcessorClientを利用した Consumer 実装,Programming,Azure|Java,2021&#x2F;01&#x2F;29 00:00:00,11417</span><br><span class="line">自宅仕事環境構築：指向性マイクの勧め,Programming,リモートワーク|指向性マイク,2021&#x2F;02&#x2F;01 00:00:00,16228</span><br><span class="line">システム障害対応の心構えと対応,Infrastructure,障害対応|初心者向け|入門,2021&#x2F;02&#x2F;02 00:00:00,10063</span><br><span class="line">WEB+DB PRESS Vol.120 最新Vue.js3入門を読んで,Programming,Vue.js|書評|書籍,2021&#x2F;02&#x2F;03 00:00:00,8684</span><br><span class="line">JP1ジョブ設計のポイント（初級）,Infrastructure,JP1|ジョブ設計|入門,2021&#x2F;02&#x2F;04 00:00:00,11543</span><br><span class="line">Good First Issue から OSS へコントリビュートしてみた,Programming,OSS|go-swagger,2021&#x2F;02&#x2F;05 00:00:00,11638</span><br><span class="line">Go 1.16連載が始まります,Programming,Go|Go1.16|インデックス,2021&#x2F;02&#x2F;07 00:00:00,11232</span><br><span class="line">Go 1.16からリリースされたgo:embedとは,Programming,Go|Go1.16,2021&#x2F;02&#x2F;08 00:00:00,12176</span><br><span class="line">Go 1.16のgo installについて,Programming,Go|Go1.16|Makefile,2021&#x2F;02&#x2F;09 00:00:00,10679</span><br><span class="line">Go1.16からのio&#x2F;ioutilパッケージ,Programming,Go|Go1.16,2021&#x2F;02&#x2F;10 00:00:00,13129</span><br><span class="line">Go 1.16のsignal.NotifyContext(),Programming,Go|Go1.16,2021&#x2F;02&#x2F;12 00:00:00,5807</span><br><span class="line">登が教えるSQL基礎,DB,SQL|SQL入門|入門,2021&#x2F;02&#x2F;15 00:00:00,7141</span><br><span class="line">Service Worker開発で起きた不具合を振り返る,Programming,JavaScript|Frontend|ServiceWorker,2021&#x2F;02&#x2F;16 00:00:00,6257</span><br><span class="line">プログラミング英会話 基礎,Infrastructure,英語|英会話|Java|入門,2021&#x2F;02&#x2F;17 00:00:00,13084</span><br><span class="line">AWS SDK for Goのリトライアルゴリズムを差し替える方法,Programming,Go|リトライ|AWS,2021&#x2F;02&#x2F;18 00:00:00,8898</span><br><span class="line">リモートネイティブ世代が考えるリモートワーク設備,Programming,リモートワーク,2021&#x2F;02&#x2F;19 00:00:00,9682</span><br><span class="line">Auth0で認証成功後に任意のWebページを表示させたい,認証認可,Auth0,2021&#x2F;02&#x2F;22 00:00:00,13715</span><br><span class="line">GCPで構築するサーバーレスデータレイク①,Infrastructure,GCP|データレイク|要件定義|設計,2021&#x2F;02&#x2F;24 00:00:00,17676</span><br><span class="line">DynamoDBから効率的に大量のデータを取得する方法,Infrastructure,AWS|DynamoDB|データ分析,2021&#x2F;02&#x2F;25 00:00:00,8050</span><br><span class="line">アクセシビリティ情報を使った壊れにくいE2Eテスト,Infrastructure,HTML|accessibility|Cypress|E2Eテスト|登壇資料,2021&#x2F;02&#x2F;26 00:00:00,18012</span><br><span class="line">【登壇しました】アレクサアプリを開発してみたら中々大変だった話,Programming,Node.js|Alexa|VUI,2021&#x2F;03&#x2F;01 00:00:00,2878</span><br><span class="line">Auth0でADをユーザDBにし、SalesforceとのSSOを確認する,認証認可,Auth0|Salesforce|SSO|ActiveDirectory,2021&#x2F;03&#x2F;02 00:00:00,8390</span><br><span class="line">Vis Networkで階層グラフを可視化する,Programming,vis.js|可視化|JavaScript,2021&#x2F;03&#x2F;03 00:00:00,13664</span><br><span class="line">mxGraphで階層グラフを可視化する,Programming,JavaScript|可視化|mxGraph,2021&#x2F;03&#x2F;04 00:00:00,21165</span><br><span class="line">インフラ入門ーインフラ要件定義編ー,Infrastructure,infrastructure|入門|要件定義,2021&#x2F;03&#x2F;05 00:00:00,20443</span><br><span class="line">Future Tech Night(第6弾：GCP x インフラ構築編)を開催しました,Infrastructure,GCP|勉強会|登壇レポート|TechNight|開催レポート,2021&#x2F;03&#x2F;06 00:00:00,4847</span><br><span class="line">GCP連載2021を始めます,Infrastructure,GCP|GCP連載|インデックス,2021&#x2F;03&#x2F;07 00:00:00,3722</span><br><span class="line">Auth0 Rulesのユニットテストを書きたい,認証認可,Auth0|JavaScript|ユニットテスト,2021&#x2F;03&#x2F;08 00:00:00,15160</span><br><span class="line">PubSubのメッセージスキーマを試してみる,Infrastructure,GCP|PubSub|スキーマ|Avro|Go|GCP連載,2021&#x2F;03&#x2F;09 00:00:00,15215</span><br><span class="line">本番データが急に欲しくなったアナタに贈る、CloudSQLのサーバレスエクスポートを試してみた,Infrastructure,GCP|GCP連載|CloudSQL|SQL,2021&#x2F;03&#x2F;10 00:00:00,8946</span><br><span class="line">PythonでCloud Operationsの機能を使ってみる,Programming,GCP|Python|OpenCensus|Monitoring|CloudOperations|GCP連載|CloudRun,2021&#x2F;03&#x2F;11 00:00:00,11162</span><br><span class="line">Text-to-Speechを試してみる,Infrastructure,GCP|GCP連載|TextToSpeech,2021&#x2F;03&#x2F;12 00:00:00,27046</span><br><span class="line">CloudNative Days Spring 2021 ONLINEに登壇しました,Infrastructure,登壇資料|OpenPolicyAgent|CNCF|CloudNative,2021&#x2F;03&#x2F;13 00:00:00,9282</span><br><span class="line">テックイベント2021＠フューチャーのご紹介,Infrastructure,勉強会|TechNight|インデックス,2021&#x2F;03&#x2F;14 00:00:00,7805</span><br><span class="line">Cloud Build を知ってみよう,CI&#x2F;CD,GCP|GCP連載|CloudBuild|GitOps|CI&#x2F;CD,2021&#x2F;03&#x2F;15 00:00:00,8571</span><br><span class="line">Firebaseで取得したログをBigQueryに連携してユーザー操作をトラッキングする,Infrastructure,GCP|GCP連載|Java|Firebase|GoogleAnalytics|BigQuery|Android,2021&#x2F;03&#x2F;16 00:00:00,14882</span><br><span class="line">Google Cloud BuildpacksとCloud Runで簡単コンテナアプリ開発,Programming,GCP|GCP連載|Buildpacks|CloudRun|Docker|コンテナデプロイ,2021&#x2F;03&#x2F;17 00:00:00,8189</span><br><span class="line">GKE Autopilotを触ってみた,Programming,Kubernetes|GKE|GCP|GCP連載,2021&#x2F;03&#x2F;18 00:00:00,18550</span><br><span class="line">Anthosの話についていくための最低限の知識をまとめてみた,Infrastructure,Anthos|Kubernetes|Istio|GCP|GCP連載,2021&#x2F;03&#x2F;19 00:00:00,10543</span><br><span class="line">CKA合格記,Programming,Kubernetes|CKA|合格記,2021&#x2F;03&#x2F;20 00:00:00,5068</span><br><span class="line">Migrate for Anthos を基礎から学ぶ,Infrastructure,GCP|GCP連載|クラウドマイグレーション|Anthos|コンテナ,2021&#x2F;03&#x2F;22 00:00:00,21236</span><br><span class="line">Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる,Infrastructure,Spanner|GCP|GCP連載|DockerCompose,2021&#x2F;03&#x2F;23 00:00:00,11768</span><br><span class="line">k6の使い方 シンプル&amp;軽快な負荷試験ツールを試す,Programming,JavaScript|k6|負荷試験ツール,2021&#x2F;03&#x2F;24 00:00:00,19945</span><br><span class="line">Transformerを用いた表現学習・推薦の実装,DataScience,TensorFlow|MachineLearning|Word2Vec|Transformer|riiid|推薦,2021&#x2F;03&#x2F;25 00:00:00,10553</span><br><span class="line">Terraform + Auth0 を調査してみる,Infrastructure,Auth0|Terraform,2021&#x2F;03&#x2F;26 00:00:00,25805</span><br></pre></td></tr></table></figure></div></details><ol><li><a href="#%E9%A0%85%E7%9B%AE%E3%81%AE%E6%8A%BD%E5%87%BA">項目の抽出</a></li><li><a href="#%E6%9C%80%E5%88%9D%E3%81%AE%E8%A1%8C%EF%BC%88CSV%E3%83%98%E3%83%83%E3%83%80%E8%A1%8C%EF%BC%89%E3%82%92%E6%8E%92%E9%99%A4">最初の行（CSVヘッダ行）を排除</a></li><li><a href="#%E3%81%82%E3%82%8B%E6%9D%A1%E4%BB%B6%E3%81%AE%E8%A1%8C%E3%81%A0%E3%81%91%E6%8A%BD%E5%87%BA">ある条件の行だけ抽出</a></li><li><a href="#%E8%A4%87%E6%95%B0%E3%81%AECSV%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%921%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%B5%90%E5%90%88%E3%81%99%E3%82%8B">複数のCSVファイルを1ファイル結合する</a></li><li><a href="#%E7%A9%BA%E8%A1%8C%E3%82%92%E9%99%A4%E3%81%8F">空行を除く</a></li><li><a href="#CSV%E9%A0%85%E7%9B%AE%E3%81%AE%E4%B8%AD%E3%81%AB%E5%8C%BA%E5%88%87%E3%82%8A%E6%96%87%E5%AD%97%E3%81%8C%E5%85%A5%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E5%A0%B4%E5%90%88">CSV項目の中に区切り文字が入っている場合</a></li><li><a href="#%E6%94%B9%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%90%AB%E3%82%80%E5%A0%B4%E5%90%88">改行コードを含む場合</a></li><li><a href="#0%E5%9F%8B%E3%82%81">0埋め</a></li></ol><h2 id="項目の抽出"><a href="#項目の抽出" class="headerlink" title="項目の抽出"></a>項目の抽出</h2><p>最初にCSVの1つ目と2つ目の項目を取得します。</p><figure class="highlight bash"><figcaption><span>項目の抽出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $1,$2&#125;&#x27;</span> posts.csv | head -n 3</span><br><span class="line">title category</span><br><span class="line">ごあいさつ Culture</span><br><span class="line">LT大会（前編） Culture</span><br></pre></td></tr></table></figure><p><code>-F</code>で区切り文字を指定、’{print $1,$2}’ の$1, $2は列番号の指定です。出力時の区切り文字ですが、何も指定しない場合は半角スペースで出力されます。出力後の区切り文字を指定したい場合は、OFS（Output Record Separator）というawk組み込みの変数で指定します。試しに出力区切りを<code>&lt;-------&gt;</code>にします。半角スペースから変わることが確認できます。<code>&lt;-------&gt;</code>を<code>,</code>にすれば出力もCSVにすることができます。</p><figure class="highlight sh"><figcaption><span>OFS指定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;OFS=&quot;&lt;-------&gt;&quot; &#123;print $1,$2&#125;&#x27;</span> posts.csv | head -n 3</span><br><span class="line">title&lt;-------&gt;category</span><br><span class="line">ごあいさつ&lt;-------&gt;Culture</span><br><span class="line">LT大会（前編）&lt;-------&gt;Culture</span><br></pre></td></tr></table></figure><p>出力項目に <code>$0</code> を指定した場合は全項目をの指定となります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> posts.csv | head -n 3</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">LT大会（前編）,Culture,LT,2016-02-17 09:09:12,9914</span><br></pre></td></tr></table></figure><p>項目の抽出ルールは大体抑えられたと思います。</p><h2 id="最初の行（CSVヘッダ行）を排除"><a href="#最初の行（CSVヘッダ行）を排除" class="headerlink" title="最初の行（CSVヘッダ行）を排除"></a>最初の行（CSVヘッダ行）を排除</h2><p>CSVを扱うと、最初のヘッダ行を無視して処理したい場合はがあります。その場合はNR（Number of Records）変数で条件指定します。<br><code>NR != 1</code> で1行目以外を出力する条件を追加となります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;NR!=1 &#123;print $0&#125;&#x27;</span> posts.csv | head -n 3</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">LT大会（前編）,Culture,LT,2016-02-17 09:09:12,9914</span><br><span class="line">LT大会（後編）,Culture,LT|登壇資料,2016-02-18 11:31:15,13214</span><br></pre></td></tr></table></figure><p>無事CSVヘッダ行を飛ばすことができました。</p><h2 id="ある条件の行だけ抽出"><a href="#ある条件の行だけ抽出" class="headerlink" title="ある条件の行だけ抽出"></a>ある条件の行だけ抽出</h2><p>入力CSVの<code>char_count</code>は記事の文字数です。50,000 文字以上の記事数を抽出します。<br>この場合は <code>$5&gt;50000</code> という条件を先頭に追加します。CSVヘッダを排除する <code>NR != 1</code> と <code>&amp;&amp;</code> で組み合わせると良いでしょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;NR!=1 &amp;&amp; $5&gt;50000 &#123;print $0&#125;&#x27;</span> posts.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">Amazon Redshiftの仕様を調べてみた,Infrastructure,AWS,2019/06/25 09:00:00,66162</span><br><span class="line">Goを学ぶときにつまずきやすいポイントFAQ,Programming,Go|コードレビュー|入門,2019/07/13 10:00,75169</span><br><span class="line">春の入門祭り 🌸 <span class="comment">#01 Goのテストに入門してみよう！,Programming,Go|初心者向け|テスト,2020/06/01 09:41:23,56000</span></span><br></pre></td></tr></table></figure><p>フューチャー技術ブログで、5万文字以上の記事が3つもあったことに驚きました。</p><h2 id="重複した行を抽出"><a href="#重複した行を抽出" class="headerlink" title="重複した行を抽出"></a>重複した行を抽出</h2><p>CSVである項目が重複していないかチェックしたいとします。</p><p>こういった重複行を含んだCSVファイルを作成します。</p><figure class="highlight plain"><figcaption><span>duplicated.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,Dummy,Dummy,2016-04-07 15:00:00,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>重複した行を抽出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;seen[$1]++&#x27;</span> duplicated.csv</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,Dummy,Dummy,2016-04-07 15:00:00,9050</span><br></pre></td></tr></table></figure><p>マジック感がありますが、<code>&#39;seen[$1]++&#39;</code>で重複された行（2つ目）が出力されました。</p><ul><li>seenは今回定義した連想配列（Map）で、そこに重複をチェックしたい項目を指定します。awkでは変数を初期化する必要が無いです</li><li>重複検査対象を、行全体とするのであれば<code>$0</code>です。タイトル項目をチェックするのであれば<code>$1</code>を指定します</li><li><code>++</code>はインクリメント演算子で、実行する度に<code>+1</code>されます。操作は変数アクセスされた後に行われます</li><li>awkでは、ゼロ以外の数値または空でない文字列値はtrueなので、2回目以降に登場した場合にのみtrueになり、重複行が出力されます。</li><li><code>&#123;print $0&#125;</code>部分はまるごと省略も可能。<code>awk -F&#39;,&#39; &#39;seen[$1]++ &#123;print $0&#125;&#39; duplicated.csv</code> と同義</li></ul><p>逆に重複行を排除（2つ目を削除）したい場合は、 <code>!</code>演算子を追加します。</p><figure class="highlight sh"><figcaption><span>重複行を削除</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;!seen[$1]++&#x27;</span> duplicated.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><p><code>sort</code> と <code>uniq</code> コマンドでも同様の操作は可能ですが、CSVのある項目細かに、条件を組み合わせてを指定する場合はawkも有効だと思います。（もちろん、ファイルをまず <code>sort</code>しなくても済むというメリットもあります）</p><h2 id="複数のCSVファイルを1ファイル結合する"><a href="#複数のCSVファイルを1ファイル結合する" class="headerlink" title="複数のCSVファイルを1ファイル結合する"></a>複数のCSVファイルを1ファイル結合する</h2><p>ファイルを単純に結合するのであれば、cat（もとの意味は連結するを意味するconcatenate）を利用することが多いと思いますが、各ファイルにCSVヘッダーがあると、2ファイル名以降のヘッダ行を削除する必要があり厄介です。</p><figure class="highlight sh"><figcaption><span>入力データ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat divide1.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line"></span><br><span class="line">$ cat divide2.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line"></span><br><span class="line">$ cat divide3.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><p>これもawkであればシンプルに処理できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;NR==1 || FNR!=1&#x27;</span> divide*.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><p>こちらも一見マジック感がありますが、内実は簡単です。 <code>NR</code>は Number of Recordsのことで、全体を通しての連番です。FNRはFile単位の連番です。<br><code>NR==1</code> が全体を通して1行目であるCSVヘッダ行のこと、<code>FNR=!1</code>が <strong>各ファイルの1行目であるCSVヘッダ以外</strong> であることを示します。<br><code>NR==1 || FNR!=1</code> のOR条件で、最初のCSVヘッダ1行目であるか、各ファイルの1行目でないの場合に出力するという条件になります。</p><p>複数ファイルをawkで扱うと、<code>FNR</code> は割と便利なので存在を覚えておくと便利かもしれません。</p><h1 id="空行を除く"><a href="#空行を除く" class="headerlink" title="空行を除く"></a>空行を除く</h1><p><code>grep -v &#39;^$&#39;</code> で瞬殺な気がしますが、awkでも空行を除外したい場合があります。理由は他の抽出処理と組み合わせる時に必要になることもあるためです。</p><p>こういった空行を含むデータを用意します。</p><figure class="highlight sh"><figcaption><span>emptyline.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat emptyline.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line"></span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;NF&#x27;</span> emptyline.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><p><code>&#39;NF&#39;</code>だけで空行を排除できました</p><ul><li><code>NF</code>は今回初めて登場しましたが、Number of Fieldsの略です</li><li>空行の場合は、フィールド数が0なこと。またawkでは0の判定結果がfalseになります。</li><li><code>&#123;print $0&#125;</code> は省略可能なためです</li></ul><p>一応同じ意味のコマンドもあげておきます。</p><figure class="highlight sh"><figcaption><span>同義なコマンド</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;NF!=0&#x27;</span> emptyline.csv</span><br><span class="line">$ awk <span class="string">&#x27;NF!=0&#123;print $0&#125;&#x27;</span> emptyline.csv</span><br><span class="line">$ awk <span class="string">&#x27;$0!=&quot;&quot;&#x27;</span> emptyline.csv</span><br></pre></td></tr></table></figure><h1 id="CSV項目の中に区切り文字が入っている場合"><a href="#CSV項目の中に区切り文字が入っている場合" class="headerlink" title="CSV項目の中に区切り文字が入っている場合"></a>CSV項目の中に区切り文字が入っている場合</h1><p>CSVは項目の中に区切り文字を含んでいる（区切り文字がカンマの場合、項目中にカンマがある）場合、囲い文字（クォート）でラップするのがRFC 4180などで定義されています。awkでこういった項目中に区切り文字を含んでいる場合はどうすればよいでしょうか？</p><p>例えば、<a href="https://future-architect.github.io/articles/20200401/">Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた</a> という記事は、以下のようにタイトルの中身で分割されてしまいます。</p><figure class="highlight sh"><figcaption><span>カンマをタイトルに持つ行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> posts.csv | grep Vue.js最初の</span><br><span class="line"><span class="string">&quot;Vue.js最初の難関、「props down</span></span><br></pre></td></tr></table></figure><p>コレを回避するには組み込み変数のFPAT（Fields PATtern）を使います。</p><figure class="highlight sh"><figcaption><span>FPAT導入例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v FPAT=<span class="string">&#x27;([^,]+)|(\&quot;[^\&quot;]+\&quot;)&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> posts.csv | grep Vue.js最初の難</span><br><span class="line"><span class="string">&quot;Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>-v</code>はawkへの変数受け渡しようのオプションです。今回はFPATの変数を渡します</li><li><code>FPAT</code> はawk組み込み関数なので <code>-v</code> で書き換えると、項目分割に影響を与えることができます</li><li><code>([^,]+)|(\&quot;[^\&quot;]+\&quot;)</code>は正規表現で、 <code>[^,]+</code>でカンマを除くという意味。<code>(\&quot;[^\&quot;]+\&quot;)</code>でダブルクォートで囲まれていて内部にダブルクォートを含まないという意味です。 <code>|</code> でOR条件になります</li><li><code>FPAT</code>を渡す場合は、<code>-F</code> の区切り文字指定は不要です</li></ul><p>これで、項目中のカンマに対応することができました。ちなみに、RFC4180の仕様では、クォートで囲まれた場合で、項目の中身にクォートがある場合、二重クォートでエスケープ（<code>&quot;&quot;</code>）するというルールがあります。この場合はうまく動きません。</p><figure class="highlight sh"><figcaption><span>FPATでもうまく動かないケース</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat quote.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line"><span class="string">&quot;テキスト処理 &quot;</span><span class="string">&quot;sed&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;awk&quot;</span><span class="string">&quot; の入門&quot;</span>,Test,Test,2021-03-28 09:02:14,691</span><br><span class="line"></span><br><span class="line">$ awk -v FPAT=<span class="string">&#x27;([^,]+)|(\&quot;[^\&quot;]+\&quot;)&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> quote.csv</span><br><span class="line">title</span><br><span class="line"><span class="string">&quot;テキスト処理 &quot;</span><span class="string">&quot;sed&quot;</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>正規表現でガンバることも可能かもしれませんが、この場合は次で説明するcsvkitなどの活用を考えたほうが良いかもしれません。</p><h1 id="改行コードを含む場合"><a href="#改行コードを含む場合" class="headerlink" title="改行コードを含む場合"></a>改行コードを含む場合</h1><p>先程説明した、FPATでも改行コードを含んでいる場合はうまく処理ができません。もし対応する必要がある場合は<a href="https://csvkit.readthedocs.io/en/latest/">csvkit</a>のようなコマンドをインストールするか、各言語のCSVパーサーを利用することを推奨します。</p><p>例えばGo言語だと標準でRFC 4180に対応したパッケージを用意してくれているので簡単に対応できます。</p><h1 id="0埋め"><a href="#0埋め" class="headerlink" title="0埋め"></a>0埋め</h1><p>awkでは、フォーマット付きの<code>printf</code>が利用できます。例えば3桁までの0埋めの場合は<code>%03d</code>を利用します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v FPAT=<span class="string">&#x27;([^,]+)|(\&quot;[^\&quot;]+\&quot;)&#x27;</span> <span class="string">&#x27;&#123;printf(&quot;%03d %s\n&quot;, NR, $1)&#125;&#x27;</span> posts.csv | head -n 3</span><br><span class="line">001 title</span><br><span class="line">002 ごあいさつ</span><br><span class="line">003 LT大会前編</span><br></pre></td></tr></table></figure><p>GNU AWKのフォーマット記述は<a href="https://www.gnu.org/software/gawk/manual/html_node/Format-Modifiers.html">こちら</a>を参考ください。</p><h1 id="csvqで良いのでは？"><a href="#csvqで良いのでは？" class="headerlink" title="csvqで良いのでは？"></a>csvqで良いのでは？</h1><p>CSVファイルに対しての高度な抽出条件や、集計処理に関してはCSVファイルに対してSQLを実行できる <code>csvq</code> を使うのも有効だと思います。</p><blockquote><p><a href="https://github.com/mithrandie/csvq">https://github.com/mithrandie/csvq</a></p></blockquote><p>例えば、文字数50,000を超える記事は以下のようにSQLに慣れた人なら一瞬で理解できる構文で取得可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ csvq <span class="string">&#x27;select title from posts where char_count &gt; 50000&#x27;</span></span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">|                       title                       |</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">| Amazon Redshiftの仕様を調べてみた                 |</span><br><span class="line">| Goを学ぶときにつまずきやすいポイントFAQ           |</span><br><span class="line">| 春の入門祭り 🌸 <span class="comment">#01 Goのテストに入門してみよう！  |</span></span><br><span class="line">+---------------------------------------------------+</span><br></pre></td></tr></table></figure><p>一方で、空行を含んだCSVファイルには脆弱な部分があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ csvq <span class="string">&#x27;select title from emptyline where char_count &gt; 50000&#x27;</span></span><br><span class="line">Empty RecordSet</span><br></pre></td></tr></table></figure><p>そのため、データ分析の前処理などにawkを活用すると良い使い分けになると思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>いざという時に覚えておくと便利なawkのTipsでした。awscliのawsコマンドと間違えちゃう人も安心です。</p><ul><li>awkは簡単な記述によって強力な結果を生み出すことができる</li><li>sedやgrepなどと合わせてawkを使えるようになると、あまり行儀が良くないCSVに対するデータクレンジングに便利</li><li>集計などの分析は必要に応じて<code>csvq</code>などと使い、awkは前処理に用いるなど使い分けが大事</li></ul><p>明日は中本光さんの<a href="/articles/20210331/">今さらながらfindパイセンについてまとめてみた</a>についてです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><p>同じようなテキスト処理であるgrepや、git grep について懇切丁寧に説明した記事です、すごいです。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200611/index.html" data-iframely-url="//cdn.iframe.ly/kvSOFUK?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG真野です。&lt;a href=&quot;/articles/20210321/&quot;&gt;シェルスクリプト連載&lt;/a&gt;の2日目</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
    <category term="CSV" scheme="https://future-architect.github.io/tags/CSV/"/>
    
    <category term="AWK" scheme="https://future-architect.github.io/tags/AWK/"/>
    
  </entry>
  
  <entry>
    <title>ShellCheckでシェルスクリプトの品質を高めよう</title>
    <link href="https://future-architect.github.io/articles/20210329/"/>
    <id>https://future-architect.github.io/articles/20210329/</id>
    <published>2021-03-28T15:00:00.000Z</published>
    <updated>2021-03-30T01:39:08.392Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210329/eye-catch.webp" alt="eye-catch-shell"></p><blockquote><p><a href="https://pixabay.com/ja/users/hans-2/">Hans</a>による<a href="https://pixabay.com/ja/">Pixabay</a>からの画像</p></blockquote><p><a href="/articles/20210321/">シェルスクリプト連載</a>の第一弾です。</p><p>シェルスクリプトは強力かつ便利で、いろいろなところで使われています。ただ、自由度が高い一方で、ちょっとしたミスを犯しやすく、かつミスに気づきにくい、ということも多いです。また、ミスに気づいたときには大きな影響が及んでいる、ということもあるでしょう。</p><p>本記事では、シェルスクリプトの品質を高めるために <a href="https://github.com/koalaman/shellcheck">ShellCheck</a> というツールを使って、シェルスクリプトの品質や安全性を高めよう、という趣旨の記事です。</p><p><a href="https://github.com/koalaman/shellcheck"><img src="https://gh-card.dev/repos/koalaman/shellcheck.svg" alt="koalaman/shellcheck - GitHub"></a></p><h2 id="ShellCheck-を使うと何がうれしいの？"><a href="#ShellCheck-を使うと何がうれしいの？" class="headerlink" title="ShellCheck を使うと何がうれしいの？"></a><code>ShellCheck</code> を使うと何がうれしいの？</h2><p><code>ShellCheck</code> はシェルスクリプトのための静的解析ツールです。<code>ShellCheck</code> は以下を目標として作成されています。</p><ul><li>シェルスクリプト初心者が書いた、ハマりやすい構文上の問題を指摘する</li><li>シェルスクリプト中級者が書いた、直感に反する挙動を指摘する</li><li>シェルスクリプト上級者が書いた、将来的に問題になる可能性がある細かい点を指摘する</li></ul><p>ツールを実行すると、シェルスクリプトの実装を静的解析して、よくあるミスや不具合になる可能性がある点を指摘してくれます。 <code>ShellCheck</code> が指摘した点を予め修正することで、プルリクエストなどでの人によるレビューは、実現したい機能やロジックといった内容に焦点をあてることができるでしょう。なぜこのコードだとまずいのか？という根拠が <a href="https://github.com/koalaman/shellcheck/wiki">Wiki</a> に記載されている点も嬉しいポイントです。</p><p>シェルスクリプトを開発する上で、品質向上や生産性向上が見込めます。</p><h2 id="ShellCheck-の検知サンプル例"><a href="#ShellCheck-の検知サンプル例" class="headerlink" title="ShellCheck の検知サンプル例"></a><code>ShellCheck</code> の検知サンプル例</h2><p><code>ShellCheck</code> が検知するごく一部のサンプルを紹介します。</p><h3 id="クォートしていない変数"><a href="#クォートしていない変数" class="headerlink" title="クォートしていない変数"></a>クォートしていない変数</h3><p>例えばクォートしていない変数を検知して、指摘してくれます。</p><figure class="highlight sh"><figcaption><span>a.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ shellcheck a.sh</span><br><span class="line"></span><br><span class="line">In a.sh line 3:</span><br><span class="line">echo $1</span><br><span class="line">     ^-- SC2086: Double quote to prevent globbing and word splitting.</span><br></pre></td></tr></table></figure><p>正しい実装は以下のようにクォートすることです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="cd-の結果を確認しない"><a href="#cd-の結果を確認しない" class="headerlink" title="cd の結果を確認しない"></a><code>cd</code> の結果を確認しない</h3><p><code>cd</code> の戻り値をチェックせずに、後続のコマンドを実行する実装は意図しない挙動になる可能性があります。</p><p>例えば以下で、<code>work</code> ディレクトリが存在しない場合に <code>cd work</code> し、<code>rm -f *.txt</code> をするとしましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── b.sh</span><br><span class="line">└── important.txt</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>b.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> work</span><br><span class="line">rm -r ./*.txt</span><br></pre></td></tr></table></figure><p><code>b.sh</code> を実行したときに <code>work</code> ディレクトリへの <code>cd</code> が失敗したときに意図しないファイル(<code>important.txt</code>)が削除されてしまいます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;b.sh</span><br><span class="line">b.sh: 3: cd: can&#39;t cd to work</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">└── b.sh</span><br></pre></td></tr></table></figure><p><code>ShellCheck</code> は上記のような実装を指摘してくれます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ shellcheck b.sh</span><br><span class="line"></span><br><span class="line">In b.sh line 3:</span><br><span class="line">cd work</span><br><span class="line">^-- SC2164: Use &#39;cd ... || exit&#39; or &#39;cd ... || return&#39; in case cd fails.</span><br></pre></td></tr></table></figure><p>安全な実装は、<code>cd</code> コマンドの戻り値をチェックして、エラーがあった場合(<code>exit 0</code> 以外がリターンされた場合)は <code>exit</code> するなどといった方法や</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> work || <span class="built_in">exit</span></span><br><span class="line">rm -r ./*.txt</span><br></pre></td></tr></table></figure><p><code>set</code> オプションの <code>-e</code> を用いて、エラーが有った場合に終了して、後続の処理が実行されないようにする、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set -e</span><br><span class="line"></span><br><span class="line">cd work</span><br><span class="line">rm -r .&#x2F;*.txt</span><br></pre></td></tr></table></figure><p>などといった方法があります。</p><h3 id="空文字判定のミス"><a href="#空文字判定のミス" class="headerlink" title="空文字判定のミス"></a>空文字判定のミス</h3><p>変数の文字列が空文字ではないことを判定する場合に <code>test</code> コマンドの <code>-n</code> オプションを用いることができます。</p><p>ただし以下のスクリプトには実装ミスがあります、変数の文字列の内容に関わらず常に <code>true</code> になります。</p><figure class="highlight sh"><figcaption><span>c.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">foo=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="string">&quot;&#123;<span class="variable">$foo</span>&#125;&quot;</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;not zero length&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上記のようなよくある実装ミスも <code>ShellChell</code> で検知できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ shellcheck c.sh</span><br><span class="line"></span><br><span class="line">In c.sh line 5:</span><br><span class="line">if [[ -n &quot;&#123;$foo&#125;&quot; ]]</span><br><span class="line">          ^-- SC2157: Argument to -n is always true due to literal strings.</span><br></pre></td></tr></table></figure><p>正しくは</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">foo=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="string">&quot;<span class="variable">$&#123;foo&#125;</span>&quot;</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;not zero length&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>となります。</p><h2 id="ShellCheck-を使ってみよう"><a href="#ShellCheck-を使ってみよう" class="headerlink" title="ShellCheck を使ってみよう"></a><code>ShellCheck</code> を使ってみよう</h2><p><code>ShellCheck</code> は強力なシェルスクリプトの静的解析ツールです。2021/03/29現在、400以上ものパターンが登録されています。どのようなパターンがあるかは <a href="https://github.com/koalaman/shellcheck/wiki">Wiki</a> を見てみてください。よくあるミスを指摘し、どのように対応すればいいか出力されるコードから調べることができます。まだ <code>ShellCheck</code> を使ったことがない、という方はこれを機に一度導入してみてはいかがでしょうか。</p><p>明日は真野さんの<a href="/articles/20210329/">CSVと親しくなるAWK</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210329/eye-catch.webp&quot; alt=&quot;eye-catch-shell&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/hans-2/&quot;&gt;Hans</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Linter" scheme="https://future-architect.github.io/tags/Linter/"/>
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>手軽な顔認証デバイスを使ってみよう</title>
    <link href="https://future-architect.github.io/articles/20210328/"/>
    <id>https://future-architect.github.io/articles/20210328/</id>
    <published>2021-03-27T15:00:00.000Z</published>
    <updated>2021-03-30T06:55:04.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>SAIGの山本です。社内では、Edge AIやIoT関連のR&amp;Dや案件に関わっています。</p><p>そのRealSenseに、今月、顔認証専用デバイスが新たに追加されましたのでそちらの紹介をしたいと思います。</p><h1 id="Intel-RealSense"><a href="#Intel-RealSense" class="headerlink" title="Intel RealSense"></a>Intel RealSense</h1><p>まずは簡単にIntel RealSenseについて説明しておきます。</p><p>これはIntel社が販売している深度センサの総称になります。（<a href="https://www.intel.co.jp/content/www/jp/ja/architecture-and-technology/realsense-overview.html">公式サイトはこちら</a>）</p><p>ちなみに、社内イベントやお客様案件でも以前より検証・利用しているものになります。<br>（事例：<a href="https://future-architect.github.io/articles/20201126/">塗り絵の魚がすいすい泳ぐ？ ～子ども向けアトラクションを作ってみた～</a>🐟）</p><p>ステレオ深度カメラ方式(T200,SR300,D400)とLiDAR方式(L500シリーズ)という２つの深度計測の方式の製品ファミリーに分かれます。また、旧モデルシリーズとしてSR300があり、こちらは現在は販売されていません。T200シリーズはトラッキング用途,D400シリーズは深度カメラ用途です。</p><p><strong>RealSense LiDAR カメラ L515</strong><br><img src="/images/20210328/realsense_lidar_camera_l515.jpg"></p><p><strong>RealSense 深度カメラ D435</strong></p><p><img src="/images/20210328/realsense_shindo_camera_d435.jpg"></p><p>SDKもLinux,Windows,macOS,Android向けのものが<a href="https://github.com/IntelRealSense/librealsense/releases">Intelから配布されており</a>、現在はver.2.0系となります。ver.1.0系は全く異なるSDK(深度センサに直接関連する部分以外のAI的な内容も含まれていた)となるので、インターネット上の情報を参照する際には注意してください。</p><h1 id="Intel-RealSense-ID-Solution-F400-シリーズ"><a href="#Intel-RealSense-ID-Solution-F400-シリーズ" class="headerlink" title="Intel RealSense ID Solution F400 シリーズ"></a>Intel RealSense ID Solution F400 シリーズ</h1><p>顔認証に特化した製品になります。（<a href="https://www.intelrealsense.com/facial-authentication/">公式サイトはこちら</a>）<br>F455がそのままホスト機とUSBで接続できる開発者向け製品、F450が様々な機器に組み込むことができるモジュール製品です。<br>今回はF455を使用した内容となっています。ちなみに、価格は99USD(1万円台)です。</p><p>センサー部分は、</p><ul><li>カメラ(赤外線)</li><li>赤外線照射器</li><li>赤外線ドット投影器</li></ul><p>とその周辺回路で構成されており、<a href="https://time-space.kddi.com/ict-keywords/20180912/2436">iPhone/iPad Proの深度センサであるTrueDepthカメラ</a>と似たような構造となっております。</p><p>公式ページでは次の特徴があると説明されています。</p><ul><li>認識時間は1秒未満(他人受入率1/100万, 本人受入率99.76%, なりすまし受入率&lt;0.1%, 暗号化:AES-256)</li><li>すべての肌の色と色合いを確実に認証</li><li>暗闇から強い日光まで、屋内でも屋外でも機能</li><li>時間の経過に伴う変化に適応</li><li>カメラの高さ方向の有効範囲が大きく、様々なユーザ（子供から大人まで）をサポート</li></ul><p><strong>Intel RealSense ID Solution F455のパッケージ</strong><br><img src="/images/20210328/Intel_RealSense_ID_F455.jpg"></p><p><strong>Intel RealSense ID Solution F455 本体</strong><br><img src="/images/20210328/Intel_RealSense_ID_F455_2.jpg"></p><p><strong>他のRealSenseとのサイズ比較</strong><br><img src="/images/20210328/RealSense.jpg"></p><h1 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h1><p>RealSense ID Solutionは他のRealSense向けのSDKとは<a href="https://github.com/IntelRealSense/RealSenseID/releases">別にSDKが提供</a>されています。</p><p>なお、記事の内容は本記事執筆時点で最新版であるv0.13.0を用いた場合の内容です。</p><p>サポートされているOS・言語は次の通りです。</p><p>サポートOS</p><ul><li>Linux</li><li>Windows</li><li>ANdroid</li></ul><p>サポート言語</p><ul><li>C#(.NET)</li><li>C++</li><li>C</li><li>Java(Android)</li></ul><h1 id="主な機能"><a href="#主な機能" class="headerlink" title="主な機能"></a>主な機能</h1><p>このSDKでは主に次の機能が提供されます。</p><ul><li>顔情報の取得<ul><li>センサから得られた値から顔の特徴情報を取得します</li></ul></li><li>顔情報の管理<ul><li>顔の特徴情報の登録・削除・照合を行います</li></ul></li><li>プレビューの取得<ul><li>カメラで撮影された画像を取得します</li></ul></li></ul><p>なお、ユースケースに合わせて２つの動作モードが用意されています。</p><ul><li>デバイスモード<ul><li>顔情報やデバイスでの照合などをデバイスで行うモード</li><li>ネットワークに繋がらない、もしくは繋げたくない場合などに使用</li></ul></li><li>ホストモード<ul><li>顔情報をホストまたはサーバー上で管理するモード</li><li>複数のデバイスで同じ顔情報を利用したい場合などに使用</li></ul></li></ul><h1 id="サンプルアプリを使った認証テスト"><a href="#サンプルアプリを使った認証テスト" class="headerlink" title="サンプルアプリを使った認証テスト"></a>サンプルアプリを使った認証テスト</h1><p>実際にデバイスとサンプルアプリを使って顔認証のテストを試してみました。</p><p>結果は次の通りです。</p><ul><li>部屋を真っ暗にした場合<ul><li>部屋が明るい場合と同じように、認証されました</li><li>赤外線が照射されているため、他の光源は必要ないようです</li></ul></li><li>マスクを被った場合<ul><li>鼻まで被った状態だと、認証されませんでした</li><li>鼻を出した状態だと、認証されました<ul><li>口周辺は認証には使われていないが、鼻周辺は使われているようです</li><li>これは深度センサを内蔵しているiPhone/iPad Proと似たような挙動でした</li></ul></li></ul></li><li>帽子を被った場合<ul><li>目がカメラから隠れなければ、認証されました</li></ul></li><li>サングラスを被った場合<ul><li>黒い色によって目がカメラから隠れてしまったからか、認証されませんでした</li></ul></li><li>メガネを被った場合<ul><li>サングラスのように色が入っていないからなのか、認証されました</li></ul></li><li>自分の顔写真をスマホで表示した場合<ul><li>認証されませんでした</li></ul></li></ul><p>また、今回は検証できていませんが、３Dプリンタで印刷した顔面でも認識できないとのことです。<br>眼球での赤外線反射を生体認識として利用しているようです。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>精度もある程度担保され、比較的コストも低めで、（組込系を含む）ホスト機からの制御もシンプルに行えるので、<br>顔認証機能が必要となるシステムで利用してみてはいかがでしょうか？</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://www.intel.co.jp/content/www/jp/ja/architecture-and-technology/realsense-overview.html">Intel RealSense 公式サイト</a></li><li><a href="https://www.intelrealsense.com/facial-authentication/">Intel RealSense ID 公式ページ</a></li><li><a href="https://www.itmedia.co.jp/news/articles/2101/07/news141.html">2021年01月07日 ITmedia: Intel、エッジ処理の顔認証技術　深度センサー「RealSense」をベースに深層学習で高速処理</a></li><li><a href="https://time-space.kddi.com/ict-keywords/20180912/2436">2018/09/12 TIME&amp;SPACE: iPhone顔認証を実現する『TrueDepthカメラ』の仕組みと未来とは？</a></li></ul><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>本記事の内容は執筆者個人または所属会社が、紹介した製品の精度などを保証するものではなく、あくまでも個人的な感想となります</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;SAIGの山本です。社内では、Edge AIやIoT関連のR&amp;amp;Dや案件に関わっています。&lt;/p&gt;
&lt;p&gt;そのReal</summary>
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="RealSense" scheme="https://future-architect.github.io/tags/RealSense/"/>
    
    <category term="EdgeAI" scheme="https://future-architect.github.io/tags/EdgeAI/"/>
    
    <category term="顔認証" scheme="https://future-architect.github.io/tags/%E9%A1%94%E8%AA%8D%E8%A8%BC/"/>
    
  </entry>
  
  <entry>
    <title>議事録をサッと準備する</title>
    <link href="https://future-architect.github.io/articles/20210327/"/>
    <id>https://future-architect.github.io/articles/20210327/</id>
    <published>2021-03-26T15:00:00.000Z</published>
    <updated>2021-03-30T01:02:52.714Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210327/Screen_Shot_2021-03-14_at_12.49.00.png"></p><h1 id="この記事の内容"><a href="#この記事の内容" class="headerlink" title="この記事の内容"></a>この記事の内容</h1><ul><li>GASにWebサーバを立て、エンドポイントを公開する</li><li>ユーザのform入力を受け取る</li><li>議事録を自動作成してSlackに投稿する</li></ul><h2 id="完成版コードはこちら"><a href="#完成版コードはこちら" class="headerlink" title="完成版コードはこちら"></a>完成版コードはこちら</h2><p><a href="https://github.com/r-ryu/gas2slack-memo">https://github.com/r-ryu/gas2slack-memo</a></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャーTIGグループのDXユニットの棚井龍之介です。</p><p>ミーティング（以下MTG）の度に議事録を準備するのが大変だったので、作業を簡易化するWebサービスをGASで作成しました。</p><p>WebサイトにアクセスしてMTG名を入力すれば、議事録の準備が完了します。</p><p><img src="/images/20210327/Screen_Shot_2020-11-08_at_19.02.46.png"><br>ページにアクセスして、MTG名を入力すると…</p><p>⬇️</p><p><img src="/images/20210327/Screen_Shot_2020-11-08_at_19.02.00.png"><br>SlackにGoogleドライブとGoogleドキュメント(議事録)のURLが投稿されます。</p><h2 id="議事録の準備"><a href="#議事録の準備" class="headerlink" title="議事録の準備"></a>議事録の準備</h2><p>リモートワークで出社しないのが当たり前となり、お客様とのMTGもオンラインが基本となりました。<br>オンラインで済む分、MTG開催のコストが大幅に低下して、MTGの数は増加したような気がします。</p><p>それにともない、議事録を準備する機会も増えました。</p><p>この準備作業、単純ですが割と面倒です。</p><p>私の所属するチームでは、おおよそ以下の作業をMTG前後に実施しています。</p><ul><li>資料を格納するGoogleドライブを新規作成</li><li>MTGに向けた議事録(Googleドキュメント)を新規作成</li><li>ドライブとドキュメントのURLを他メンバーに共有</li><li>ドキュメントにMTG名、日付、参加メンバーを記入</li><li>ヘッダー、フッターにページ番号やCopyrightを記入</li></ul><h3 id="面倒な定常作業-→-自動化"><a href="#面倒な定常作業-→-自動化" class="headerlink" title="面倒な定常作業 → 自動化"></a>面倒な定常作業 → 自動化</h3><p>これらの作業は面倒+予め決まっているので、GASで自動スクリプトを作成しました。</p><p>また、議事録の準備は私以外のPJメンバーも実施するため、「非エンジニアを含めて、誰にでもサッと使っていただける」ことを目指して設計しました。</p><p>本記事に沿ってGASを設定することにより、以下2つの操作のみで「MTG用ドライブの準備、必要事項が記載された議事録の準備、各URLをSlackで共有する」が完了します。</p><ol><li>議事録生成ページにアクセス</li><li>FormにMTG名を入力して作成ボタンをクリック</li></ol><p>また、本記事はwebフォーム入力という手動操作が含まれますが、トリガーも含めて完全自動化したい場合は以下記事をご参照ください。GoogleカレンダードリブンでGASを起動する方法が掲載されています。</p><ul><li><a href="https://qiita.com/RuyPKG/items/abf72dde739e52364bcf">新人でも、楽がしたい！ ～議事録の準備～</a></li></ul><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>GASコードを書き始める前に、以下の準備をお願いします</p><ul><li>議事録のテンプレート本体とそのid</li><li>アップロード先ドライブのid</li><li>Slackの Incoming WebHooks</li></ul><h3 id="議事録のテンプレート本体とid"><a href="#議事録のテンプレート本体とid" class="headerlink" title="議事録のテンプレート本体とid"></a>議事録のテンプレート本体とid</h3><p>本記事でGASがSlackに投稿する議事録は、予め用意した「テンプレートのドキュメント」をコピーしたものです。<br>まず初めに議事録テンプレートの作成をお願いします。</p><p>議事録にはお作法的に毎回記入される項目があると思いますので、テンプレートの充実度が、実運用での負荷軽減に直結します。</p><p>例えば、私が作成したテンプレートには以下項目を記入しています。</p><ul><li>会議名</li><li>日時</li><li>場所</li><li>社内外の関係者名全て</li><li>ヘッダーにConfidentialマーク</li><li>フッターにCopyrightとページ番号</li></ul><p>テンプレートのサンプル</p><img src="/images/20210327/memo.png" style="border:solid 1px #000000"><p>テンプレートにMTG関係者の名前全てを記入しておけば、実際に議事をとる場面では「いない人を削除する」だけで済みます。</p><p>こういった少しづつの工夫が生産性向上に繋がるため、まずはテンプレートを充実させて、いらない項目は議事を取りながら削除する方法がオススメです。</p><p>また、ドキュメントの <code>id(document)</code> はページURLの document/d と /edit の間にある文字列が対応します。<br>後の作業で利用するため、必要に応じてご確認お願いします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google documentのURLサンプル</span></span><br><span class="line">https://docs.google.com/document/d/9************Z/edit</span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">9************Z</span><br></pre></td></tr></table></figure><h3 id="アップロード先ドライブのid"><a href="#アップロード先ドライブのid" class="headerlink" title="アップロード先ドライブのid"></a>アップロード先ドライブのid</h3><p>議事録だけでなく、それを格納するドライブも自動生成します。</p><p>本記事では以下のGoogle Drive構成を想定しています。<br>月単位でフォルダを分け、その配下に日時+MTG名単位でフォルダを生成+議事録を格納します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┣ 2020年08月</span><br><span class="line">┣ 2020年09月</span><br><span class="line">┣ 2020年10月</span><br><span class="line">┃   ┣ 20201005_月次定例 ━ 20201005_月次定例_議事</span><br><span class="line">┃   ┗ 20201020_運用保守 ━ 20201020_運用保守_議事</span><br><span class="line">┗ 2020年11月</span><br><span class="line">    ┗ 20201105_月次定例 ━ 20201105_月次定例_議事</span><br></pre></td></tr></table></figure><p>このとき、月単位のフォルダが表示されている画面での、URLの folders/ 以下にある文字列が、アップロード先ドライブの <code>id(drive)</code> です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google driveのURLサンプル</span></span><br><span class="line">https://drive.google.com/drive/folders/6************Q</span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">6************Q</span><br></pre></td></tr></table></figure><h3 id="Slackの-Incoming-WebHooks"><a href="#Slackの-Incoming-WebHooks" class="headerlink" title="Slackの Incoming WebHooks"></a>Slackの Incoming WebHooks</h3><p>Slackに外部システムからメッセージを投稿するため、<code>Incoming WebHooks</code> を用意します。<br>トークンは <a href="https://api.slack.com/">Slack API の Your Apps</a> から作成可能です。</p><h2 id="Webサーバの実装"><a href="#Webサーバの実装" class="headerlink" title="Webサーバの実装"></a>Webサーバの実装</h2><p>サーバ側スクリプトを実装します</p><ol><li>環境変数の設定</li><li>GET,POSTのハンドリング</li><li>HTMLテンプレートの作成</li><li>handlerの実装</li><li>Webサーバの公開</li></ol><h3 id="1-環境変数の設定"><a href="#1-環境変数の設定" class="headerlink" title="1.環境変数の設定"></a>1.環境変数の設定</h3><p>サーバのコードを実装します。</p><p>まずはGoogle App Scriptを新規に生成して、環境変数を設定しましょう。</p><p>環境変数は<br>File → Project Properties → Script Properties<br>で登録可能です。</p><table><thead><tr><th>Property</th><th>Value</th></tr></thead><tbody><tr><td>FOLDERID</td><td>“id(document)”</td></tr><tr><td>FILEID</td><td>“id(drive)”</td></tr><tr><td>POSTURL</td><td>“Incoming WebHooks”</td></tr></tbody></table><p>同時に、環境変数を取得する処理を追加します。</p><figure class="highlight js"><figcaption><span>Code.gs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> FOLDERID = PropertiesService.getScriptProperties().getProperty(<span class="string">&quot;FOLDERID&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> FILEID = PropertiesService.getScriptProperties().getProperty(<span class="string">&quot;FILEID&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> POSTURL = PropertiesService.getScriptProperties().getProperty(<span class="string">&quot;POSTURL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-GET-POSTのハンドリング"><a href="#2-GET-POSTのハンドリング" class="headerlink" title="2.GET,POSTのハンドリング"></a>2.GET,POSTのハンドリング</h3><p>GASのWebサーバは、GETリクエストの場合はdoGet(), POSTリクエストの場合はdoPost()が呼び出されます。</p><p>本記事では</p><ol><li>URLを踏んで(GETリクエストで)Webサーバにアクセス</li><li>Webサーバからformを取得</li><li>formをsubmitし、POSTリクエストでWebサーバにアクセス</li></ol><p>というフローのため、doGetとdoPostの両方を追記します。<br>一部、<code>Index</code> や <code>e.parameter.name</code> といった初出の部分は記事の後半で説明しますので、今の段階ではdoGetとdoPostでハンドリングできるんだな〜という感覚で問題ありません。</p><figure class="highlight js"><figcaption><span>Code.gs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doGet</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> HtmlService.createHtmlOutputFromFile(<span class="string">&quot;Index&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doPost</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = e.parameter.name;</span><br><span class="line">  <span class="keyword">var</span> mtg = handler(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&quot;完了ページ\n&quot;</span> + <span class="string">&quot;作成した議事録:&quot;</span> + mtg;</span><br><span class="line">  <span class="keyword">return</span> ContentService.createTextOutput(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-HTMLテンプレートの作成"><a href="#3-HTMLテンプレートの作成" class="headerlink" title="3.HTMLテンプレートの作成"></a>3.HTMLテンプレートの作成</h3><p>GASの画面から、HTMLテンプレートを作成します。</p><p>File → New → HTML file → “Index”を入力してOK<br>により、新たに <code>Index.html</code> が作成されます。</p><p>Index.htmlには、以下のhtml文を入力します。</p><figure class="highlight html"><figcaption><span>Index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ja&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_top&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>議事録生成フォーム<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>議事録作成フォーム<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return double()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>会議名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;例:月次定例&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;作成&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;リセット&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-handlerの実装"><a href="#4-handlerの実装" class="headerlink" title="4.handlerの実装"></a>4.handlerの実装</h3><p>formでPOSTリクエストを受けた後のハンドリングを実装します。<br>各処理の詳細は、コード内のコメント箇所を参照お願いします。</p><figure class="highlight js"><figcaption><span>Code.gs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 議事録テンプレートとフォルダ情報を取得する</span></span><br><span class="line">  <span class="keyword">var</span> topFolderPath = DriveApp.getFolderById(FOLDERID);</span><br><span class="line">  <span class="keyword">var</span> formatFilePath = DriveApp.getFileById(FILEID);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 現在時刻からファイル名を生成</span></span><br><span class="line">  date = nowDate();</span><br><span class="line">  <span class="keyword">var</span> yyyymmdd = date.year + date.month + date.day;</span><br><span class="line">  <span class="keyword">var</span> mtgname = yyyymmdd + <span class="string">&#x27;_&#x27;</span> + name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 「yyyy年mm月」フォルダを確認</span></span><br><span class="line">  <span class="keyword">var</span> monthFolder = prepareMonthFolder(topFolderPath, date.year, date.month);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 「yyyyddmm_(会議名)」 フォルダを新規作成する</span></span><br><span class="line">  <span class="keyword">var</span> dayFolder = monthFolder.createFolder(mtgname);</span><br><span class="line">  <span class="keyword">var</span> dayFolderUrl = dayFolder.getUrl();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 議事録テンプレートをコピーして、適切なフォルダに移動する</span></span><br><span class="line">  <span class="keyword">var</span> newFile = formatFilePath.makeCopy(mtgname, dayFolder);</span><br><span class="line">  <span class="keyword">var</span> newFileUrl = newFile.getUrl();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Slackに投稿</span></span><br><span class="line">  post2slack(mtgname, newFileUrl, dayFolderUrl);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mtgname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handler関数の複雑化を避けるために、3つの関数を作成しています。</p><ul><li>nowDate()</li><li>prepareMonthFolder(path, year, month)</li><li>post2slack(name, fileUrl, folderUrl)</li></ul><figure class="highlight js"><figcaption><span>Code.gs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nowDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> year = today.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> month = <span class="string">&#x27;&#x27;</span> + (today.getMonth() + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> day = <span class="string">&#x27;&#x27;</span> + today.getDate();</span><br><span class="line">  <span class="keyword">if</span> (month.length &lt; <span class="number">2</span>)</span><br><span class="line">    month = <span class="string">&#x27;0&#x27;</span> + month;</span><br><span class="line">  <span class="keyword">if</span> (day.length &lt; <span class="number">2</span>)</span><br><span class="line">    day = <span class="string">&#x27;0&#x27;</span> + day;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    year:year,</span><br><span class="line">    month:month,</span><br><span class="line">    day:day,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareMonthFolder</span>(<span class="params">path, year, month</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> yyyymm = year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> folders = DriveApp.getFolders();</span><br><span class="line">  <span class="keyword">var</span> monthFolderExist = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> monthFolder;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 「yyyy年mm月」のフォルダが存在しない場合は新規作成</span></span><br><span class="line">  <span class="keyword">while</span> (folders.hasNext()) &#123;</span><br><span class="line">    <span class="keyword">var</span> folder = folders.next();</span><br><span class="line">    <span class="keyword">if</span> (folder.getName() == yyyymm) &#123;</span><br><span class="line">      monthFolderExist = <span class="literal">true</span>;</span><br><span class="line">      monthFolder = folder;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!monthFolderExist) &#123;</span><br><span class="line">    monthFolder = path.createFolder(yyyymm);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> monthFolder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post2slack</span>(<span class="params">name, fileUrl, folderUrl</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Slackに投稿されるメッセージ文</span></span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&#x27;議事録を準備しました\n\n&#x27;</span> + <span class="string">&#x27;会議名:&#x27;</span> + name + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;議事:&#x27;</span> + fileUrl + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;フォルダ:&quot;</span> + folderUrl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> jsonData = &#123;</span><br><span class="line">    <span class="string">&#x27;text&#x27;</span>:message</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> payload = <span class="built_in">JSON</span>.stringify(jsonData);</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;contentType&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;payload&#x27;</span>:payload</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  UrlFetchApp.fetch(POSTURL, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上により、POSTリクエストのハンドリングは完了です。</p><h3 id="5-Webサーバの公開"><a href="#5-Webサーバの公開" class="headerlink" title="5.Webサーバの公開"></a>5.Webサーバの公開</h3><p>サーバ側コードの実装が完了したので、Webサーバのエンドポイントを公開します。</p><p>Publish → Deploy as web app… を入力し、以下項目の入力後 “Deploy” を選択します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Project version: new</span><br><span class="line">Execute the app as: me</span><br><span class="line">Who has access to the app: anyone with <span class="string">&quot;組織名&quot;</span> (会社内部のみでの利用を想定するため、anyone, even anonymous には設定しない)</span><br></pre></td></tr></table></figure><p>初回Deploy時には認証画面が表示されます。<br>その承認が完了すると、<code>Current web app URL</code> が表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Current web app URL:</span><br><span class="line">https://script.google.com/*****/macros/T**********U/<span class="built_in">exec</span></span><br></pre></td></tr></table></figure><p>このURLがWebサーバのエンドポイントです。<br>データを受け渡しするために、Index.htmlのformへ追加します。</p><figure class="highlight html"><figcaption><span>Index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">↓</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://script.google.com/*****/macros/T**********U/exec&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上で、Webサーバの公開は完了です。</p><p>エンドポイントのURLをブラウザに打ち込むことで、議事録準備のフォーム画面が表示されます。<br>MTG名を入力すれば、GASが裏で動いて、Slackに議事が投稿されます。</p><h2 id="より使いやすくするために"><a href="#より使いやすくするために" class="headerlink" title="より使いやすくするために"></a>より使いやすくするために</h2><p>本システムはURLへのアクセスをトリガーとして処理が開始されます。<br>「早く議事を用意したいのに、議事準備のURLってなんだっけ？」となっては自動化した旨味がありません。</p><p>Slackの <a href="https://my.slack.com/customize/slackbot">ワークスペースのカスタマイズ</a> で、指定のURLを返してくれるように Slackbot を設定すればサッとURLを取得できます</p><p>（<code>(PJ名)+memo</code> の文字列に反応して、SlackbotがURLを投稿してくれるように設定）<br><img src="/images/20210327/Screen_Shot_2020-10-31_at_19.40.55.png"></p><p>これで</p><ul><li>必要になったらパッとURLを取得して</li><li>会議名を入力して</li><li>GASが頑張っているのを待つ</li></ul><p>だけで、議事録の用意が完了します。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、GASでWebサーバを公開して、議事録の準備をほぼ自動化する方法をご紹介しました。<br>普段の業務を自動化することにより、作業忘れや作業ミスを減らしつつ、別の業務に集中する時間が得られます。</p><p>また、Webサービスとして公開することで自分以外のPJメンバーも利用できるため、初期構築に若干の手間がかかるとしても、結果的にはPJ全体の作業効率向上につながると思います。</p><p>「定常業務の自動化・簡易化」で得られる恩恵はかなり大きいので、議事録を毎回手動作成している方がいられたら、ぜひとも本記事の手法を利用してみてください。</p><p>完成版のコード全文はこちらです。<br><a href="https://github.com/r-ryu/gas2slack-memo">https://github.com/r-ryu/gas2slack-memo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210327/Screen_Shot_2021-03-14_at_12.49.00.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;この記事の内容&quot;&gt;&lt;a href=&quot;#この記事の内容&quot; class=&quot;headerlink&quot; title=&quot;この記</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Slack" scheme="https://future-architect.github.io/tags/Slack/"/>
    
    <category term="GAS" scheme="https://future-architect.github.io/tags/GAS/"/>
    
    <category term="HTML5" scheme="https://future-architect.github.io/tags/HTML5/"/>
    
    <category term="議事録" scheme="https://future-architect.github.io/tags/%E8%AD%B0%E4%BA%8B%E9%8C%B2/"/>
    
    <category term="ChatBot" scheme="https://future-architect.github.io/tags/ChatBot/"/>
    
  </entry>
  
  <entry>
    <title>Terraform + Auth0 を調査してみる</title>
    <link href="https://future-architect.github.io/articles/20210326/"/>
    <id>https://future-architect.github.io/articles/20210326/</id>
    <published>2021-03-25T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.866Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> アルバイトの小林です。</p><p>案件で認証プラットフォームである<a href="https://auth0.com/jp/">Auth0</a>を利用しています。</p><p>Auth0がHashiCorpとのパートナーシップを結び、TerraformでAuth0リソースの管理が可能となりました。</p><p><a href="https://auth0.com/blog/partners-with-hashicorp-terraform/">https://auth0.com/blog/partners-with-hashicorp-terraform/</a></p><p>今回はTerraformで既存のAuth0リソースを移行するという観点で調査を行いました。</p><h2 id="Auth0とは"><a href="#Auth0とは" class="headerlink" title="Auth0とは"></a>Auth0とは</h2><p><img src="/images/20210326/image.png"></p><p>Auth0の概要については<a href="https://future-architect.github.io/articles/20200122/">Auth0導入編</a>をご参照ください。他にも技術ブログには<a href="https://future-architect.github.io/tags/Auth0/">Auth0関連の記事</a>が沢山あります。</p><h2 id="Terraformとは"><a href="#Terraformとは" class="headerlink" title="Terraformとは"></a>Terraformとは</h2><p><img src="/images/20210326/image_2.png"></p><p>TerraformとはHashiCorpによって開発されたオープンソースのクラウド管理ツールです。</p><p>クラウド環境のインフラの構成をコードに落とし込むことで、Git管理が可能になり、さらに状態を定義することが可能になるため、状態との差分からクラウド環境のリソース変更部分の表示が可能になるため、設定ミスのリスクを低減が見込めます。</p><p>技術ブログでは<a href="https://future-architect.github.io/tags/Terraform/">Terrafom関連の記事</a>が沢山あるためそちらも合わせてご参照ください。</p><p>また、Terraform以外でAuth0のクラウドリソースをコードに落とし込むツールには<code>auth0-deploy-cli</code>が上げられます。</p><h2 id="Auth0-Deploy-CLI"><a href="#Auth0-Deploy-CLI" class="headerlink" title="Auth0 Deploy CLI"></a>Auth0 Deploy CLI</h2><p><a href="https://github.com/auth0/auth0-deploy-cli">https://github.com/auth0/auth0-deploy-cli</a></p><p>Auth0が出しているツールで、テナント構成をyamlに落とし込んだり、yamlに書かれたテナント構成を反映するなど、CI/CDを可能にします。</p><p>Auth0 Deploy CLIについては、TIG市川さんの<a href="https://future-architect.github.io/articles/20200702/">Auth0の設定をバージョン管理し、Auth0 Deploy CLIを利用してデプロイ環境を整える</a>をご参照ください。</p><p>Auth0 Deploy CLIには、<code>dry-run</code>がサポートされておらず<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>、<strong>実際に実行してみるまでテナント構成がどうなるのか分からない</strong>、さらに<strong>意図していない変更を検出出来ない</strong>といった課題があります。</p><h2 id="Auth0-Deploy-CLI-vs-Terraform"><a href="#Auth0-Deploy-CLI-vs-Terraform" class="headerlink" title="Auth0 Deploy CLI vs Terraform"></a>Auth0 Deploy CLI vs Terraform</h2><p>Auth0環境の構成をAuth0 Deploy CLIで行う場合とTerraformで行う場合について、それぞれの強みと弱みについて調査しました。</p><h4 id="Auth0-Deploy-CLIの強み"><a href="#Auth0-Deploy-CLIの強み" class="headerlink" title="Auth0 Deploy CLIの強み"></a>Auth0 Deploy CLIの強み</h4><ul><li>テナントの構成をまるっとエクスポートすることが出来ます。<ul><li>rules,hooksもディレクトリに区切ってファイルを作成してくれるなど、親切です。</li></ul></li><li>mappingが公式サポートされています。<ul><li><a href="https://github.com/auth0/auth0-deploy-cli/blob/master/examples/yaml/README.md#environment-variables-and-auth0_keyword_replace_mappings">auth0-deploy-cli/README.md:AUTH0_KEYWORD_REPLACE_MAPPINGS· auth0/auth0-deploy-cli</a></li><li>そのため単一のyamlファイルを複数の環境に転用させて、検証環境と本番環境の設定の同一化が比較的容易に実現出来ます。</li></ul></li></ul><h4 id="Auth0-Deploy-CLIの弱み"><a href="#Auth0-Deploy-CLIの弱み" class="headerlink" title="Auth0 Deploy CLIの弱み"></a>Auth0 Deploy CLIの弱み</h4><ul><li>Auth0専用のツールなのでこのツールの操作方法を独自で覚える必要があります。</li><li><code>dry-run</code>機能が無いため<strong>意図していない設定変更が生じうる</strong>可能性があります<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>。</li></ul><h4 id="Terraformの強み"><a href="#Terraformの強み" class="headerlink" title="Terraformの強み"></a>Terraformの強み</h4><ul><li>独自ツール無しでTerraformだけで済むため、いままでAWSなどでTerraformを使っている場合、学習コストほぼ0で利用出来ます。</li><li>Terraformには<code>plan</code>と呼ばれる現在の状態と変更後の状態の差分を表示させる、<code>dry-run</code>に該当する機能があります。</li><li>Terraform workspaceを利用することで同一のリソースブロックを複数環境で利用することが可能になります。これにより検証環境と本番環境の設定の同一化が比較的容易に実現出来ます。</li></ul><h4 id="Terraformの弱み"><a href="#Terraformの弱み" class="headerlink" title="Terraformの弱み"></a>Terraformの弱み</h4><ul><li>一括で全リソースをインポートする手段が無いためテナント設定が膨大の場合、Terraformで管理出来る状態に持っていくまでが大変です。<ul><li>terraformのimportをAuth0プロパイダで利用する際、IDの特定方法が複雑(<a href="#%E6%97%A2%E5%AD%98%E3%81%AEauth0%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92terraform%E3%81%AB%E7%A7%BB%E8%A1%8C%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E6%B5%81%E3%82%8C"><strong>後述</strong></a>)です。</li></ul></li></ul><p>今回、私の所属しているプロジェクトでは、<strong>他のクラウドリソースをTerraformで管理している</strong>こと、<br>Auth0の構成が複雑になっていることから、<code>plan</code>が非常に強力であり、<strong>作業ミスのリスクを大幅に減少出来る見込み</strong>のため、Terraformを採用することにしました。</p><h2 id="Terraformで管理すると"><a href="#Terraformで管理すると" class="headerlink" title="Terraformで管理すると"></a>Terraformで管理すると</h2><p>Terraformで管理出来る様になると以下の点で便利になります。</p><ul><li>環境毎の設定差異の検出が簡単に出来る。</li><li>Auth0のリソース更新時にdry-runが可能になり、意図していないリソースの変更や、リソースの更新忘れのリスクを軽減できる。</li><li>環境全体がコードに落ちるためGitなどのバージョン管理ツールで管理が出来る様になる。</li></ul><p>この記事では以下の2点について扱います。</p><ul><li>terraform importを利用して既存のAuth0リソースをTerraformに移行できるか</li><li>複数環境で設定を統一化出来るか</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>terraformのバージョンはv0.14.6を利用します。</li><li>プロパイダは<a href="https://github.com/alexkappa/terraform-provider-auth0">alexkappa/auth0</a>を利用します。<ul><li>バージョンはv0.17.1です。</li></ul></li><li>事前にAuth0のテナントのダッシュボードから、Management APIが利用可能なM2Mのアプリケーションを作成しておき、ClientIDとClientSecretを取得しておく必要があります。</li></ul><h3 id="準備手順"><a href="#準備手順" class="headerlink" title="準備手順"></a>準備手順</h3><p>作業ディレクトリにmain.tfを作成して以下の様に記載します。</p><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    auth0 = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;alexkappa/auth0&quot;</span></span><br><span class="line">      version = <span class="string">&quot;0.17.1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;auth0&quot;</span> &#123;</span><br><span class="line">  domain        = <span class="string">&quot;Auth0テナントのドメイン&quot;</span></span><br><span class="line">  client_id     = <span class="string">&quot;事前に作成したM2MアプリケーションのClientID&quot;</span></span><br><span class="line">  client_secret = <span class="string">&quot;事前に作成したM2MアプリケーションのClientSecret&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>その後、<code>terraform init</code>をします。</p><p>以上で準備完了です。</p><h2 id="terraform-importを利用して既存のAuth0リソースをTerraformに移行できるか"><a href="#terraform-importを利用して既存のAuth0リソースをTerraformに移行できるか" class="headerlink" title="terraform importを利用して既存のAuth0リソースをTerraformに移行できるか"></a>terraform importを利用して既存のAuth0リソースをTerraformに移行できるか</h2><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p>一つだけtfstateを弄る必要があるが、<strong>可能</strong>です。</p><h3 id="既存のAuth0リソースをTerraformに移行する際の流れ"><a href="#既存のAuth0リソースをTerraformに移行する際の流れ" class="headerlink" title="既存のAuth0リソースをTerraformに移行する際の流れ"></a>既存のAuth0リソースをTerraformに移行する際の流れ</h3><p>まずは移行手順の全体像について記載します。</p><ul><li>空のリソース定義を作成する。</li><li>terraform import で既存のリソースをstateに取り込む</li><li><code>terraform state show</code>でstateに取り込んだ既存リソースのパラメータを確認し、先程作成した空のリソース定義に追加していく。</li><li><code>terraform plan</code>して差分が無くなればそのリソースの移行完了</li></ul><p>この手順を<strong>Auth0で管理出来る全リソースについて実行します</strong>。</p><p>Terraformで管理出来るリソースの一覧(リソースタイプ)は↓で定義されています。</p><p><a href="https://registry.terraform.io/providers/alexkappa/auth0/latest/docs">Docs overview | alexkappa/auth0 | Terraform Registry</a></p><p>かなりの作業量になるため何らかのツールがあるだろうと探してみたのですが、見つけられませんでした。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>加えてこの手順でAuth0のリソースをインポートするに当たって、ある事象でハマってしまいました。</p><h3 id="ハマったポイント-IDが無いリソースタイプがいくつかある。"><a href="#ハマったポイント-IDが無いリソースタイプがいくつかある。" class="headerlink" title="ハマったポイント: IDが無いリソースタイプがいくつかある。"></a>ハマったポイント: IDが無いリソースタイプがいくつかある。</h3><p>Terraformで定義されているimportコマンドの書式はこのようになっています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform import [options] ADDRESS ID</span><br></pre></td></tr></table></figure><details><summary>ADDRESSとは▼</summary><div><p><code>ADDRESS</code> はリソースアドレスの事であり、<code>&lt;given type&gt;.&lt;local name&gt;</code> の形式で表します。</p><p>例えば、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;auth0_custom_domain&quot;</span> <span class="string">&quot;main_domain&quot;</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>の様なリソースブロックにおいて、</p><p><code>ADDRESS</code>は<code>auth0_custom_domain.main_domain</code>です。</p></div></details><br><p><code>ID</code>はそのリソースをインポートするための識別子です。例えば、Auth0 Custom Dmainのドメイン設定は<code>cd_&lt;random string&gt;</code>の形で割り振られています。</p><p>この<code>ID</code>ですが、<strong>リソースタイプによっては存在しません</strong>。例えば、テナント設定である、<a href="https://registry.terraform.io/providers/alexkappa/auth0/latest/docs/resources/tenant">auth0_tenant</a>にはIDが存在しません。この場合、どうすれば設定のインポートが出来るのか、悩んでいました。</p><p>結論としては、<strong>IDを適当に自分で決めればインポート出来ました</strong>。</p><h3 id="なぜ適当なIDで通るのか"><a href="#なぜ適当なIDで通るのか" class="headerlink" title="なぜ適当なIDで通るのか"></a>なぜ適当なIDで通るのか</h3><p><code>ID</code>は識別子です。Auth0 のテナント設定に着目すると、<strong>IDが無くとも設定が判別できます</strong>。</p><p>IDが振られているリソースタイプである、<code>auth0_role</code>のプロパイダのソースコード<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>とTerraform公式のimportの説明<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>を読むと、CLIから受け取ったIDが<code>d.ID()</code>に入っている事が分かります。</p><p>同様にIDが不明なリソースタイプである、<code>auth_tenant</code>のプロパイダのソースコード<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>を読むと、<code>auth0_role</code>では使われていた、<code>d.ID()</code>が使われていない事が分かります。そのため、こちらで適当なIDを入れても問題無いことが分かります。</p><h3 id="リソースタイプとIDの対応表"><a href="#リソースタイプとIDの対応表" class="headerlink" title="リソースタイプとIDの対応表"></a>リソースタイプとIDの対応表</h3><p>執筆当時プロパイダのドキュメントに、<strong>どのパラメータを使えばimportが出来るかの情報がほとんど載っていません</strong>。issueにはちらちら書かれていますが、テナント設定のimport方法について書いている人は見つけられませんでした。</p><p>そのためリソースタイプとID対応関係について表にまとめてみたので参考にお使い下さい。執筆当時で、この中の全リソースタイプについてimportが出来ている事を確認しています。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><p>また、<code>ID</code>の確認が必要なリソースタイプについては、IDが確認しやすい様にManagement APIのAPI Explorerの該当APIのURLを載せています。</p><p>IDの欄に<code>&quot;id&quot;</code>と書かれていた場合は<strong>APIを叩いた時のJSONレスポンスのキーが”id”の値</strong>を指します。<br><strong>自由</strong>と書かれていた場合は先述の理由により、自由に設定出来ます。</p><table><thead><tr><th>Resource Type</th><th>ID</th><th>URL</th><th>備考</th></tr></thead><tbody><tr><td>auth0_client</td><td>“client_id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Clients/get_clients">https://auth0.com/docs/api/management/v2#!/Clients/get_clients</a></td><td></td></tr><tr><td>auth0_client_grant</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Client_Grants/get_client_grants">https://auth0.com/docs/api/management/v2#!/Client_Grants/get_client_grants</a></td><td></td></tr><tr><td>auth0_connection</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Connections/get_connections">https://auth0.com/docs/api/management/v2#!/Connections/get_connections</a></td><td></td></tr><tr><td>auth0_custom_domain</td><td>“custom_domain_id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Custom_Domains/get_custom_domains">https://auth0.com/docs/api/management/v2#!/Custom_Domains/get_custom_domains</a></td><td>tfstateの修正が必要<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></td></tr><tr><td>auth0_email</td><td>自由</td><td></td><td></td></tr><tr><td>auth0_email_template</td><td>[verify_email,<br>verify_email_by_code,<br>reset_email,<br>welcome_email,<br>blocked_account,<br>stolen_credentials,<br>enrollment_email,<br>mfa_oob_code,<br>user_invitation] のどれか一つ</td><td></td><td>IDによって、インポートされる項目が異なる、<br>例えば`verify_email`ならば認証メールがインポートされる。</td></tr><tr><td>auth0_hook</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Hooks/get_hooks">https://auth0.com/docs/api/management/v2#!/Hooks/get_hooks</a></td><td></td></tr><tr><td>auth0_prompt</td><td>自由</td><td></td><td></td></tr><tr><td>auth0_resource_server</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Resource_Servers/get_resource_servers">https://auth0.com/docs/api/management/v2#!/Resource_Servers/get_resource_servers</a></td><td></td></tr><tr><td>auth0_role</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Roles/get_roles">https://auth0.com/docs/api/management/v2#!/Roles/get_roles</a></td><td></td></tr><tr><td>auth0_rule</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Rules/get_rules">https://auth0.com/docs/api/management/v2#!/Rules/get_rules</a></td><td></td></tr><tr><td>auth0_rule_config</td><td>“key”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Rules_Configs/get_rules_configs">https://auth0.com/docs/api/management/v2#!/Rules_Configs/get_rules_configs</a></td><td></td></tr><tr><td>auth0_tenant</td><td>自由</td><td></td><td></td></tr><tr><td>auth0_user</td><td>“user_id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Users/get_users">https://auth0.com/docs/api/management/v2#!/Users/get_users</a></td><td></td></tr></tbody></table><h2 id="複数環境で設定を統一化出来るか"><a href="#複数環境で設定を統一化出来るか" class="headerlink" title="複数環境で設定を統一化出来るか"></a>複数環境で設定を統一化出来るか</h2><p>複数テナントが推奨されているAuth0において、テナントの設定を統一化したいケースがあると思います。<br>その際は<code>terraform workspace</code>と呼ばれる機能を用いて一つのリソースブロックを複数の環境で共有することが可能になります。</p><p>dev環境とtest環境があったとして、この二つの環境で同一の設定にさせたい場合について考えます。</p><p>先程のmain.tfと同階層にvariables.tfを置きます。</p><figure class="highlight sh"><figcaption><span>variables.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  environments = &#123;</span><br><span class="line">    dev = &#123;</span><br><span class="line">      auth0_domain        = <span class="string">&quot;dev-example.auth0.com&quot;</span>,</span><br><span class="line">      auth0_client_id     = <span class="string">&quot;dev環境のM2MアプリケーションのClientID&quot;</span>,</span><br><span class="line">      auth0_client_secret = <span class="string">&quot;dev環境のM2MアプリケーションのClientSecret&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">test</span> = &#123;</span><br><span class="line">      auth0_domain        = <span class="string">&quot;test-example.auth0.com&quot;</span>,</span><br><span class="line">      auth0_client_id     = <span class="string">&quot;test環境のM2MアプリケーションのClientID&quot;</span>,</span><br><span class="line">      auth0_client_secret = <span class="string">&quot;test環境のM2MアプリケーションのClientSecret&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.tfのプロパイダ設定を以下の様に変えます。</p><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">&quot;auth0&quot;</span> &#123;</span><br><span class="line">  domain        = local.environments[terraform.workspace][<span class="string">&quot;auth0_domain&quot;</span>]</span><br><span class="line">  client_id     = local.environments[terraform.workspace][<span class="string">&quot;auth0_client_id&quot;</span>]</span><br><span class="line">  client_secret = local.environments[terraform.workspace][<span class="string">&quot;auth0_client_secret&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraformのworkspaceを追加しましょう。main.tfで以下のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace new dev</span><br><span class="line">$ terraform workspace new <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>以下の様に表示されます(現在いるworkspaceに*が付きます。)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace list</span><br><span class="line">  default</span><br><span class="line">  dev</span><br><span class="line">* <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>今自分が入っているworkspaceは<code>terraform workspace list</code>で確認します。</p><p>移動したい場合は<code>terraform workspace [移動先のworkspace名]</code>です。</p><p>dev環境を正としたい場合は先程のリソースのimport手順をworkspaceがdevの状態で進めます。その後、workspaceをtestに変更してからリソースブロックを変更せずに<code>terraform import</code>を全リソースに対して行います。</p><p>最後に、<code>terraform plan</code>でdev環境とtest環境の設定の差分が表示されます。</p><h3 id="一部だけ設定を変えたい"><a href="#一部だけ設定を変えたい" class="headerlink" title="一部だけ設定を変えたい"></a>一部だけ設定を変えたい</h3><p>test環境の時だけ空のルールである<code>empty-rule.js</code>、その他の環境の時は<code>some-rule.js</code>を動かしたいケースについて考えてみます。</p><p>HCLの組み込み関数<code>file</code>と三項演算子により実現出来ます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;auth0_rule&quot;</span> <span class="string">&quot;some_rule&quot;</span> &#123;</span><br><span class="line">  name   = <span class="string">&quot;some_rule&quot;</span></span><br><span class="line">  script = terraform.workspace == <span class="string">&quot;test&quot;</span> ? file(<span class="string">&quot;./empty-rule.js&quot;</span>) : file(<span class="string">&quot;./some-rule.js&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraformの組み込み関数<code>replace</code>を使えば、同一のファイルを参照しつつ振る舞いを返る事が可能になります。</p><p>テナント環境毎に挙動が変わるRuleをTerraformで管理してみます。</p><p>初めに以下の様なスクリプトを保存し、</p><figure class="highlight js"><figcaption><span>set-env.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setEnv</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;http://example.com/env&quot;</span>] = <span class="string">&quot;###AUTH0_TENANT###&quot;</span>;</span><br><span class="line"></span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下の様にリソース定義を行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;auth0_rule&quot;</span> <span class="string">&quot;set_env&quot;</span> &#123;</span><br><span class="line">  name   = <span class="string">&quot;set_env&quot;</span></span><br><span class="line">  script = replace(file(<span class="string">&quot;./set-env.js&quot;</span>),<span class="string">&quot;###AUTH0_TENANT###&quot;</span>,terraform.workspace)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように書く事でdev環境では</p><figure class="highlight js"><figcaption><span>set-env.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setEnv</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;http://example.com/env&quot;</span>] = <span class="string">&quot;dev&quot;</span>;</span><br><span class="line"></span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>として、test環境では</p><figure class="highlight js"><figcaption><span>set-env.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setEnv</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;http://example.com/env&quot;</span>] = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>として環境毎に振る舞いを変える事が出来ました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はTerraform + Auth0の環境構築について、既存のAuth0環境の移行を観点として調査を行いました。</p><p>調査結果をまとめると、</p><ul><li>importの手順に一癖あるが、一応全リソースを移行出来る。</li><li>workspaceを用いて複数のテナントで環境を同一にしつつ、一部だけ環境毎に振る舞いを変えることが出来る。</li></ul><p>ことが分かりました。</p><p>既存のAuth0環境をTerraformに移行したい場合の考慮材料にして頂ければ幸いです。</p><p>ここまで読んで頂きありがとうございました。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>私事で恐縮ですが、2019年の2月からアルバイトとして働いてきたFutureを今日で退職します。</p><p>この2年を通してFutureで沢山の技術を学び、自身のスキルを大幅に向上させることが出来ました。</p><p>2年間本当にお世話になりました。ありがとうございました！</p><p><img src="/images/20210326/kobayashi.jpg"></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIG: Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。DXユニット: TIGの中にありデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">執筆中に<a href="https://github.com/GoogleCloudPlatform/terraformer">terraformer</a>と呼ばれる既存のインフラリソースをリソース定義(.tf)や状態(.tfstate)に落とし込むCLIツールは見つけたのですが、執筆当時はまだ対応リストに記載されていません。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">https://github.com/alexkappa/terraform-provider-auth0/blob/master/auth0/resource_auth0_role.go#L86</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">https://github.com/alexkappa/terraform-provider-auth0/blob/master/auth0/resource_auth0_tenant.go#L256</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">あくまで全リソースタイプについて確認しているため、リソースタイプのauth0_email_templateのIDは<code>verify_email</code>と<code>reset_email</code>のみ確認済みです。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">このリソースタイプはどうリソースブロックを編集しても<code>terraform plan</code>で差分を無くす事が出来ません。<code>verification_method</code>がManagement APIの仕様上importされないため、tfstate側がnullと設定されてしまうからです。スキーマ定義を見ると、<code>Required</code>と<code>ForceNew</code>が付いているためこのままではリソースの再生成が走ってしまいます。そのため、<code>.tfstate</code>,<code>.tf</code>の両方について<code>verification_method = &quot;txt&quot;</code>に強制的に変更することで<code>terraform plan</code>で差分を表示させない様に設定出来ます。この問題はプロパイダのリポジトリのissueでも言及されていました。 <a href="https://github.com/alexkappa/terraform-provider-auth0/issues/294">Importing auth0_custom_domain resource forces recreation · Issue #294 · alexkappa/terraform-provider-auth0</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.terraform.io/docs/extend/resources/import.html#importer-state-function">Resources - Import - Terraform by HashiCorp</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/auth0/auth0-deploy-cli/issues/70">Support Test Mode · Issue #70 · auth0/auth0-deploy-cli</a>issue自体は記載されています。</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">一応Auth0 Deploy CLIでは、意図していないリソースの破壊を防ぐために<code>AUTH0_ALLOW_DELETE</code>フラグが設定可能です。https://github.com/auth0/auth0-deploy-cli/blob/master/examples/yaml/README.md#config</span><a href="#fnref:9" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; アルバイトの小林です。&lt;/p&gt;
&lt;p&gt;案件で認証プラットフォームである&lt;a href=&quot;https://auth0.com/jp/&quot;</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
  </entry>
  
  <entry>
    <title>Transformerを用いた表現学習・推薦の実装</title>
    <link href="https://future-architect.github.io/articles/20210325/"/>
    <id>https://future-architect.github.io/articles/20210325/</id>
    <published>2021-03-24T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.840Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！SAIGの金子です。</p><p>普段はフューチャーのAIグループで開発を行っている他、<a href="https://www.kaggle.com/nadare">nadare</a>というハンドルネームでデータ分析コンペティションに参加しています。</p><p>自然言語処理でよく使われるWord2VecやTransformerをログデータやテーブルデータの予測・分析に活用するためのオレオレベースラインを紹介します。</p><h1 id="対象読者"><a href="#対象読者" class="headerlink" title="対象読者"></a>対象読者</h1><ul><li>既にWord2VecやTransformerについて知識があり、その上自身で改造を行いたい人</li><li>レコメンド・検索技術に興味のある人</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>昨今、ECサイトの閲覧・購入履歴の分析や<a href="/articles/20201208/">ワクチンの開発</a>といった自然言語以外の分野でも、それぞれの商品やアミノ酸を単語とみなして埋め込み表現を獲得するWord2VecやBERTのような自然言語処理由来の技術が活用されています。</p><p>これらの分析には<a href="https://radimrehurek.com/gensim/">gensim</a>のようなよく整備されたライブラリが活用されますが、それらは自然言語処理を対象に作られているため以下のようにデータの特徴をつかみきれないことがあります。</p><ul><li>各トークンのidしか与えられないため、トークンに結びついた情報を考慮できない<ul><li>例: 商品の購入・閲覧履歴について、商品のカテゴリ情報や購入時のセール情報、レビューや閲覧時間のようなユーザーからのフィードバックを入れられない</li></ul></li><li>BERTを用いようとした場合、自然言語と異なりトークン間の双方向の順序情報を考慮する必要のないケースがある<ul><li>例: 実店舗のレシートを分析する際、商品の順番は店員のスキャンした順番以上の情報を持たない</li></ul></li><li>Word2Vecを用いようとした場合、各トークン同士の相互作用を考慮できない。</li></ul><p>そこで、テーブルデータの為にWord2VecとBERTの中間くらいの拡張性の高いベースラインを作成しました。コードはTensorFlowで実装していて、Kaggleのriiidコンペのデータをもとにnotebookで用意しているため、誰でも簡単に追実験が可能です。</p><h1 id="riiidコンペについて"><a href="#riiidコンペについて" class="headerlink" title="riiidコンペについて"></a>riiidコンペについて</h1><p>riiidコンペはTOEICの問題集のアプリを使うユーザーが過去に解いた問題から、次に解く問題についての正解率を予測するコンペです。問題は13000問、ユーザーは40万人分のデータがあり、それぞれ問題とユーザーについて適切に特徴量を作成する必要がありました。このコンペではWord2VecやTransformerを用いてそれぞれのIDについての埋め込み表現を学習する解法が多く存在しました。</p><p>今回のコードは<a href="https://www.kaggle.com/nadare/32nd-transformer-dcn-v2-model">その時の私のモデル</a>をブラッシュアップしたものになります。</p><h1 id="事前学習タスクについて"><a href="#事前学習タスクについて" class="headerlink" title="事前学習タスクについて"></a>事前学習タスクについて</h1><p>今回はこのriiidコンペのデータから教師無しでユーザーや問題の特徴を作成するために次のようなタスクを設定しました。</p><ul><li>ユーザーが過去に解いたN問の情報から、次に解く問題のidを予測する。</li></ul><p>これはレコメンドのタスクであるため、過去にアドベントカレンダーで紹介した<a href="https://qiita.com/nadare/items/aeb242da85352ba7dee3">TensorFlow Recommenders</a>の実装を参考にしてモデルを構築しました。</p><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p><a href="https://www.kaggle.com/nadare/recommender-with-transformer-for-embedding">recommender with transformer for embedding</a></p><h1 id="コード解説"><a href="#コード解説" class="headerlink" title="コード解説"></a>コード解説</h1><h2 id="モデル概要"><a href="#モデル概要" class="headerlink" title="モデル概要"></a>モデル概要</h2><p>TensorFlow Recommendersのretrievalタスクを参考に、ユーザーの履歴から作成したクエリベクトル(X)と問題の情報から作成したアイテムベクトル(y)の内積によって両者の親和性を表現するモデルを作成しました。</p><p>訓練時はバッチサイズNに対してNxNの対角行列の正解ラベルを作成し、同じレコードから作成されたクエリとアイテムの組み合わせを1、それ以外を0としてcategorical crossentropyを最小化します。(正例:負例=1:N-1になるようネガティブサンプリングをしているという見方もできます。)予測時は推薦対象のアイテムベクトルを全て事前計算しておき、クエリベクトルとアイテムベクトルの内積を全計算して推薦対象のアイテムをリランキングします。</p><h2 id="前処理"><a href="#前処理" class="headerlink" title="前処理"></a>前処理</h2><p>ユーザーがどの問題を解いてどの回答をしたかを配列で管理するための処理をしています。</p><p>content_idが問題番号に対応していて、それぞれ最大で4つの選択肢を持つため、<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="41.772ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 18463.4 776" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-2-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path><path id="MJX-2-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-2-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-2-TEX-N-5F" d="M0 -62V-25H499V-62H0Z"></path><path id="MJX-2-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-2-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-2-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-2-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-2-TEX-I-1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-2-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-2-TEX-I-1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g><g data-mml-node="mi" transform="translate(433, 0)"><use xlink:href="#MJX-2-TEX-I-210E"></use></g><g data-mml-node="mi" transform="translate(1009, 0)"><use xlink:href="#MJX-2-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1494, 0)"><use xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(1839, 0)"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g><g data-mml-node="mi" transform="translate(2272, 0)"><use xlink:href="#MJX-2-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(2738, 0)"><use xlink:href="#MJX-2-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(3238, 0)"><use xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(3583, 0)"><use xlink:href="#MJX-2-TEX-I-1D451"></use></g><g data-mml-node="mo" transform="translate(4380.8, 0)"><use xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(5436.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g><g data-mml-node="mi" transform="translate(5869.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(6354.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(6954.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(7315.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(7781.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(8381.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(8742.6, 0)"><use xlink:href="#MJX-2-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(9242.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(9587.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D451"></use></g><g data-mml-node="mo" transform="translate(10329.8, 0)"><use xlink:href="#MJX-2-TEX-N-2217"></use></g><g data-mml-node="mn" transform="translate(11052, 0)"><use xlink:href="#MJX-2-TEX-N-34"></use></g><g data-mml-node="mo" transform="translate(11774.2, 0)"><use xlink:href="#MJX-2-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(12774.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D462"></use></g><g data-mml-node="mi" transform="translate(13346.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(13815.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(14281.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D45F"></use></g><g data-mml-node="mi" transform="translate(14732.4, 0)"><use xlink:href="#MJX-2-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(15232.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(15761.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(16361.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(16830.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D464"></use></g><g data-mml-node="mi" transform="translate(17546.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(18012.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D45F"></use></g></g></g></svg></mjx-container>でユーザーの回答履歴を保存しています。なお、今回のコードではユーザーがどの選択肢を選んだかの情報は考慮しません。</p><h2 id="Sampler"><a href="#Sampler" class="headerlink" title="Sampler"></a>Sampler</h2><p>訓練データを作成するクラスです。</p><p>今回はユーザーの履歴からランダムでこれまでに解いた問題(X)と次に解く問題(y)を返します。データはユーザーによってtrainとtestに分割し、trainではユーザーごとの履歴の長さに応じた比率で、testではすべてのユーザーから1回ずつサンプリングして学習・評価を行います。</p><h2 id="Tokenizer"><a href="#Tokenizer" class="headerlink" title="Tokenizer"></a>Tokenizer</h2><p>受け取ったchoice_idを指定の次元のembeddingに変換するクラスです。</p><p>今回の例では問題のidしか入れていませんが、このTokenizerの部分を作りこむことで様々なコンテキストを入れることができます。</p><h2 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h2><p>self-attentionを行うクラスです。</p><p>入力に対しlstmとself-attentionを交互に繰り返します。このself-attentionを計算する際に、自身と過去の情報を参照しないようにmaskを作っています。また、今回はqueryはノルムで正規化、keyとvalueは恒等関数で変換しています。</p><h2 id="TopModel"><a href="#TopModel" class="headerlink" title="TopModel"></a>TopModel</h2><p>今回の次に解く問題を予測するタスクの為のクラスです。</p><p>この部分を分離しておくことで、今回学習させた重みをTopModelの部分を挿げ替えることで転移学習・フ.0ァインチューニングに用いることができます。</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>上記のtokenizer, Encoder, TopModelをまとめるためのクラスです。</p><p>ここにまとめておくことで、学習時にapply_gradientが楽にできるようになります。また、今回はbatch sizeをN倍すると予測の出力が<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="3.045ex" height="2ex" role="img" focusable="false" viewBox="0 -883.9 1345.8 883.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-2-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D441"></use></g><g data-mml-node="mn" transform="translate(942.3, 413) scale(0.707)"><use xlink:href="#MJX-2-TEX-N-32"></use></g></g></g></g></svg></mjx-container>倍になってしまうことに対応するため、n_splitという変数を設定しています。</p><h1 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h1><h2 id="事前学習"><a href="#事前学習" class="headerlink" title="事前学習"></a>事前学習</h2><p>データをユーザーのIDによって訓練:テスト=9:1に分けて学習した際のcategorical crossentropyが以下の通りです。<br>Tesla T4インスタンスで128epochの学習に1hかかりました。</p><p><img src="/images/20210325/results___22_1.png"></p><p>次に解く問題について予測しその問題が何番目に出現したかについて計測したところ、64epoch目では訓練中に存在しないユーザーに対し13000問の問題からおおよそ700番目くらいの精度で推薦することができました。</p><p><img src="/images/20210325/results___23_1.png"></p><p>得られたembeddingの可視化です。まずは問題のベクトルの可視化ですが、umapで次元圧縮し可視化したところTOEICのpartごとに綺麗に分離していることが分かります。</p><p>notebookには適当に問題番号を選び、その問題を解くときのユーザーのembeddingをその問題に正解したかの二色で色付けしてplotしています。ただ、あまりうまく分離はできていないようです。</p><p>得られたembeddingの図については<a href="https://www.kaggle.com/nadare/recommender-with-transformer-for-embedding">notebook</a>を参考にしてください。</p><h2 id="ファインチューニング"><a href="#ファインチューニング" class="headerlink" title="ファインチューニング"></a>ファインチューニング</h2><p>得られたembeddingやmodelのweightを固定化した上で、実際にriiidコンペのタスクである次に与えられた問題に対して正解できたかを予測するタスクの学習を行いました。Word2Vecとの比較を行ったところ、今回のモデルではWord2Vecの方が事前学習した重みとしては良い結果を出しました。</p><h1 id="応用例"><a href="#応用例" class="headerlink" title="応用例"></a>応用例</h1><p>今回はユーザーの問題を解いた履歴という入手しやすいimplicitなデータを用いて推薦/事前学習を行いました。</p><p>今回のモデルではuser_idに関する情報を変数に用いていないため、訓練データに存在しないユーザーについても予測が可能です。また、今回は問題のidのみを考慮しましたが、カテゴリ、自然言語、画像情報などのデータの拡張を意識しているため、作りこめば更なる精度が見込めると思います。これらは推薦タスクにおけるユーザー/アイテムのコールドスタート問題に効果的に対応できます。</p><p>得られたembeddingやTransformerの重みは他のモデルの学習にファインチューニングして活用することができます。特に、Encoderの出力の平均をとったものはユーザーの履歴間の時系列や相互作用を考慮しているため、個々のembeddingの平均をとるよりも効果的になると予想できます。(今回はWord2Vecに負けてしまいましたが…)</p><p>今回のモデルは時系列情報を考慮した上でlstmやmaskを作成していましたが、順序情報が不要な場合はSamplerやEncoderを改造して余分な計算を省くことができます。実際に今回のベースラインをatmaCup#10のようなコンペで無理やり使った際は、コードの実装は二時間くらいで容易にできました。</p><ul><li><a href="https://www.guruguru.science/competitions/16/discussions/847ee743-9036-4c39-983b-2348ab20f39e/">principal_makerを埋め込みたい</a></li><li><a href="https://www.guruguru.science/competitions/16/discussions/1a472eb4-0f77-4857-8448-f7e38d072010/">pallete transformer</a></li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回のベースライン作成にはデータ分析コンペでの戦いやライバルの皆さんとの議論の経験が活きました。これからもデータ分析コンペなどを通じて技術を磨き、還元していければと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは！SAIGの金子です。&lt;/p&gt;
&lt;p&gt;普段はフューチャーのAIグループで開発を行っている他、&lt;a href=&quot;https://www.kaggle.com/nadare&quot;&gt;nadare&lt;/a&gt;というハンドルネームでデータ分析コンペティションに参加しています。&lt;/p</summary>
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
    <category term="TensorFlow" scheme="https://future-architect.github.io/tags/TensorFlow/"/>
    
    <category term="Transformer" scheme="https://future-architect.github.io/tags/Transformer/"/>
    
    <category term="riiid" scheme="https://future-architect.github.io/tags/riiid/"/>
    
    <category term="Word2Vec" scheme="https://future-architect.github.io/tags/Word2Vec/"/>
    
    <category term="推薦" scheme="https://future-architect.github.io/tags/%E6%8E%A8%E8%96%A6/"/>
    
  </entry>
  
  <entry>
    <title>k6の使い方 シンプル&amp;軽快な負荷試験ツールを試す</title>
    <link href="https://future-architect.github.io/articles/20210324/"/>
    <id>https://future-architect.github.io/articles/20210324/</id>
    <published>2021-03-23T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210324/crocodile-4918820_1920.jpg"></p><blockquote><p><a href="https://pixabay.com/ja/users/engin_akyurt-3656355/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4918820">Engin Akyurt</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4918820">Pixabay</a>からの画像</p></blockquote><p>TIGの伊藤真彦です。<br>業務で行っている開発がいよいよリリースを視野に入れたフェーズに入り、E2Eテストや各種性能試験を行いました。</p><h1 id="負荷試験とは"><a href="#負荷試験とは" class="headerlink" title="負荷試験とは"></a>負荷試験とは</h1><p>リリース前に行いたい試験の一つに負荷試験があります。</p><p>なるべく実際の運用に近い環境、データベースの状態を整え、実際に利用されるであろうユーザー数、もしくはそれ以上の同時接続にシステムが耐えられるかを試験します。特にソーシャルゲームの世界では想定を超えたアクセスによりリリース直後にサーバーがダウンしてしまう悲劇が発生しがちです。IT業界の外にいる人々にとっても覚えのある経験かもしれません。</p><p>そんな負荷試験ですが、実際に数百人、数万人規模の同時アクセスを人力で再現するには膨大な予算が必要です。そのため、一台のコンピュータで複数人からの同時アクセスを再現する負荷試験ツールが数多く存在します。</p><p>負荷試験ツールの定番と言えば<a href="https://jmeter.apache.org/">Apache Jmeter</a>があります。改めて確認してみたところ2021年をもって生誕20周年を記念する老舗プロダクトでした、おめでとうございます。祝った上で使わない、酷い記事になってしまいました…</p><p>Jmeterの使用は勿論検討したのですが、モダンな技術が大好きな性分であり、我らが<a href="/authors/%E6%BE%81%E5%B7%9D%E5%96%9C%E8%A6%8F/">渋川さん</a>もおススメしているため<a href="https://k6.io/">k6</a>を試してみました。<br><img src="/images/20210324/image.png"></p><h2 id="k6とは"><a href="#k6とは" class="headerlink" title="k6とは"></a>k6とは</h2><p>2016年頃から開発がスタートした負荷試験ツールです。<br>ワニのキャラクターが印象的です、かわいいですね。</p><p><img src="/images/20210324/image_2.png"></p><p>OSSとして公開されている事が特徴です、リポジトリは<a href="https://github.com/loadimpact/k6">こちら</a>です。</p><p>k6はGoで開発されています、これだけでも今時な印象を受けますね。<br><img src="/images/20210324/image_3.png"></p><p><a href="https://k6.io/about">公式サイトの説明</a>にある通り。<br>DevOpsの概念の成熟、現在のあり方に対応し、継続的な性能試験を行えるものである事を意識して設計されています。</p><blockquote><p>In tandem with the growth of DevOps, we started to notice gaps emerging in the market that we knew we could address. Users were no longer testing things one-off. APIs were becoming more prevalent in usage and required testing. Users wanted to test continuously. For many companies, testing was moving into the responsibility of developers.</p></blockquote><h2 id="k6のインストール"><a href="#k6のインストール" class="headerlink" title="k6のインストール"></a>k6のインストール</h2><p>k6のインストールはどのプラットフォームであっても簡単です。<br><a href="https://k6.io/docs/getting-started/installation">installation</a>に記載があります、書いてあるコマンドをコピペするだけで問題なく導入できました。</p><p>Windows向けにはインストーラが用意されています。<br><img src="/images/20210324/image_4.png"></p><p><code>brew</code>, <code>apt-get</code>, <code>yum</code>, <code>dokcer</code>での配布がサポートされています、バイナリ形式でダウンロードすることも可能です、インストールに苦戦することはほぼ無いと言っても良いと思います。</p><p>docker形式の配布形態を利用し、CIで性能試験を行い、既定の性能を下回ったら警告するような使い方もできるかもしれません。</p><h2 id="k6の使い方"><a href="#k6の使い方" class="headerlink" title="k6の使い方"></a>k6の使い方</h2><h4 id="基本的な利用方法"><a href="#基本的な利用方法" class="headerlink" title="基本的な利用方法"></a>基本的な利用方法</h4><p>k6は基本的に負荷試験のシナリオをJavaScriptで記載し、CLIで実行する利用形態で負荷試験を行います。</p><figure class="highlight js"><figcaption><span>k6_test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  http.get(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各種ユーティリティをimportし、負荷試験のシナリオを記載します。<br>特定のエンドポイント1か所にGETでアクセスするだけなら、上記のような4行程度の記載でテストを行うことが可能です。</p><p>今回は下記のシンプルなWebサーバーをローカル環境に立てて上記<code>k6_test.js</code>の動作を検証します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello k6&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>k6 run ファイル名</code> で実行することが可能です。<br>アスキーアートと試験結果が出力されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">k6 run .\k6_test.js</span><br><span class="line"></span><br><span class="line">          /\      |‾‾| /‾‾/   /‾‾/</span><br><span class="line">     /\  /  \     |  |/  /   /  /</span><br><span class="line">    /  \/    \    |     (   /   ‾‾\</span><br><span class="line">   /          \   |  |\  \ |  (‾)  |</span><br><span class="line">  / __________ \  |__| \__\ \_____/ .io</span><br><span class="line"></span><br><span class="line">  execution: <span class="built_in">local</span></span><br><span class="line">     script: .\k6_test.js</span><br><span class="line">     output: -</span><br><span class="line"></span><br><span class="line">  scenarios: (100.00%) 1 scenario, 1 max VUs, 10m30s max duration (incl. graceful stop):</span><br><span class="line">           * default: 1 iterations <span class="keyword">for</span> each of 1 VUs (maxDuration: 10m0s, gracefulStop: 30s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">running (00m00.0s), 0/1 VUs, 1 complete and 0 interrupted iterations</span><br><span class="line">default ✓ [======================================] 1 VUs  00m00.0s/10m0s  1/1 iters, 1 per VU</span><br><span class="line"></span><br><span class="line">     data_received..............: 124 B 7.8 kB/s</span><br><span class="line">     data_sent..................: 80 B  5.0 kB/s</span><br><span class="line">     http_req_blocked...........: avg=403.9µs min=403.9µs med=403.9µs max=403.9µs p(90)=403.9µs p(95)=403.9µs</span><br><span class="line">     http_req_connecting........: avg=403.9µs min=403.9µs med=403.9µs max=403.9µs p(90)=403.9µs p(95)=403.9µs</span><br><span class="line">     http_req_duration..........: avg=0s      min=0s      med=0s      max=0s      p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_receiving.........: avg=0s      min=0s      med=0s      max=0s      p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_sending...........: avg=0s      min=0s      med=0s      max=0s      p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_tls_handshaking...: avg=0s      min=0s      med=0s      max=0s      p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_waiting...........: avg=0s      min=0s      med=0s      max=0s      p(90)=0s      p(95)=0s</span><br><span class="line">     http_reqs..................: 1     63.019517/s</span><br><span class="line">     iteration_duration.........: avg=1.9ms   min=1.9ms   med=1.9ms   max=1.9ms   p(90)=1.9ms   p(95)=1.9ms</span><br><span class="line">     iterations.................: 1     63.019517/s</span><br></pre></td></tr></table></figure><h4 id="負荷を変更する"><a href="#負荷を変更する" class="headerlink" title="負荷を変更する"></a>負荷を変更する</h4><p><code>--vus</code>オプション<code>--duration</code>等のオプションで負荷の重さを変えることが可能です。<br>詳しくは<a href="https://k6.io/docs/using-k6/options">公式ドキュメント</a>を参照してください。</p><p>主に使うものは、下記のオプションです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--vus: 同時接続数</span><br><span class="line">--duration: 試験の実行時間</span><br><span class="line">--iteration: シナリオを繰り返す回数</span><br></pre></td></tr></table></figure><p><code>--vus</code>オプションだけではエラーが発生します、試験時間、もしくはシナリオの実行回数を指定する必要があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> k6 run .\k6_test.js --vus 10</span><br><span class="line"></span><br><span class="line">          /\      |‾‾| /‾‾/   /‾‾/</span><br><span class="line">     /\  /  \     |  |/  /   /  /</span><br><span class="line">    /  \/    \    |     (   /   ‾‾\</span><br><span class="line">   /          \   |  |\  \ |  (‾)  |</span><br><span class="line">  / __________ \  |__| \__\ \_____/ .io</span><br><span class="line"></span><br><span class="line">time=<span class="string">&quot;2021-03-07T16:33:00+09:00&quot;</span> level=warning msg=<span class="string">&quot;the `vus=10` option will be ignored, it only works in conjunction with `iterations`, `duration`, or `stages`&quot;</span></span><br><span class="line">  execution: <span class="built_in">local</span></span><br><span class="line">     script: .\k6_test.js</span><br><span class="line">     output: -</span><br><span class="line"></span><br><span class="line">  scenarios: (100.00%) 1 scenario, 1 max VUs, 10m30s max duration (incl. graceful stop):</span><br><span class="line">           * default: 1 iterations <span class="keyword">for</span> each of 1 VUs (maxDuration: 10m0s, gracefulStop: 30s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同時接続数10人で10秒間負荷をかけてみます。<br>既定の時間を超えるまでシナリオを繰り返します、レポートのiterationsを見ると999039回繰り返されたことがわかります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> k6 run .\k6_test.js --vus 10 --duration 10s</span><br><span class="line"></span><br><span class="line">          &#x2F;\      |‾‾| &#x2F;‾‾&#x2F;   &#x2F;‾‾&#x2F;</span><br><span class="line">     &#x2F;\  &#x2F;  \     |  |&#x2F;  &#x2F;   &#x2F;  &#x2F;</span><br><span class="line">    &#x2F;  \&#x2F;    \    |     (   &#x2F;   ‾‾\</span><br><span class="line">   &#x2F;          \   |  |\  \ |  (‾)  |</span><br><span class="line">  &#x2F; __________ \  |__| \__\ \_____&#x2F; .io</span><br><span class="line"></span><br><span class="line">  execution: local</span><br><span class="line">     script: .\k6_test.js</span><br><span class="line">     output: -</span><br><span class="line"></span><br><span class="line">  scenarios: (100.00%) 1 scenario, 10 max VUs, 40s max duration (incl. graceful stop):</span><br><span class="line">           * default: 10 looping VUs for 10s (gracefulStop: 30s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">running (10.0s), 00&#x2F;10 VUs, 999039 complete and 0 interrupted iterations</span><br><span class="line">default ✓ [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 10 VUs  10s0</span><br><span class="line"></span><br><span class="line">     data_received..............: 124 MB 12 MB&#x2F;s</span><br><span class="line">     data_sent..................: 80 MB  8.0 MB&#x2F;s</span><br><span class="line">     http_req_blocked...........: avg&#x3D;1.19µs  min&#x3D;0s med&#x3D;0s max&#x3D;1.49ms  p(90)&#x3D;0s      p(95)&#x3D;0s</span><br><span class="line">     http_req_connecting........: avg&#x3D;0s      min&#x3D;0s med&#x3D;0s max&#x3D;0s      p(90)&#x3D;0s      p(95)&#x3D;0s</span><br><span class="line">     http_req_duration..........: avg&#x3D;67.92µs min&#x3D;0s med&#x3D;0s max&#x3D;5.53ms  p(90)&#x3D;0s      p(95)&#x3D;513.9µs</span><br><span class="line">     http_req_receiving.........: avg&#x3D;14.58µs min&#x3D;0s med&#x3D;0s max&#x3D;1.99ms  p(90)&#x3D;0s      p(95)&#x3D;0s</span><br><span class="line">     http_req_sending...........: avg&#x3D;6.07µs  min&#x3D;0s med&#x3D;0s max&#x3D;1.49ms  p(90)&#x3D;0s      p(95)&#x3D;0s</span><br><span class="line">     http_req_tls_handshaking...: avg&#x3D;0s      min&#x3D;0s med&#x3D;0s max&#x3D;0s      p(90)&#x3D;0s      p(95)&#x3D;0s</span><br><span class="line">     http_req_waiting...........: avg&#x3D;47.26µs min&#x3D;0s med&#x3D;0s max&#x3D;5.49ms  p(90)&#x3D;0s      p(95)&#x3D;510.2µs</span><br><span class="line">     http_reqs..................: 999039 99705.733857&#x2F;s</span><br><span class="line">     iteration_duration.........: avg&#x3D;96.83µs min&#x3D;0s med&#x3D;0s max&#x3D;17.46ms p(90)&#x3D;511.3µs p(95)&#x3D;996.7µs</span><br><span class="line">     iterations.................: 999039 99705.733857&#x2F;s</span><br><span class="line">     vus........................: 10     min&#x3D;10 max&#x3D;10</span><br><span class="line">     vus_max....................: 10     min&#x3D;10 max&#x3D;10</span><br></pre></td></tr></table></figure><p>同時接続数100人で100回シナリオを繰り返す例です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">k6 run .\k6_test.js --vus 100 --iterations 100</span><br><span class="line"></span><br><span class="line">          /\      |‾‾| /‾‾/   /‾‾/</span><br><span class="line">     /\  /  \     |  |/  /   /  /</span><br><span class="line">    /  \/    \    |     (   /   ‾‾\</span><br><span class="line">   /          \   |  |\  \ |  (‾)  |</span><br><span class="line">  / __________ \  |__| \__\ \_____/ .io</span><br><span class="line"></span><br><span class="line">  execution: <span class="built_in">local</span></span><br><span class="line">     script: .\k6_test.js</span><br><span class="line">     output: -</span><br><span class="line"></span><br><span class="line">  scenarios: (100.00%) 1 scenario, 100 max VUs, 10m30s max duration (incl. graceful stop):</span><br><span class="line">           * default: 100 iterations shared among 100 VUs (maxDuration: 10m0s, gracefulStop: 30s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">running (00m00.0s), 000/100 VUs, 100 complete and 0 interrupted iterations</span><br><span class="line">default ✓ [======================================] 100 VUs  00m00.0s/10m0s  100/100 shared iters</span><br><span class="line"></span><br><span class="line">     data_received..............: 12 kB  623 kB/s</span><br><span class="line">     data_sent..................: 8.0 kB 402 kB/s</span><br><span class="line">     http_req_blocked...........: avg=1ms      min=0s      med=775.9µs max=2.35ms   p(90)=2.35ms  p(95)=2.35ms</span><br><span class="line">     http_req_connecting........: avg=525.37µs min=0s      med=579.2µs max=1.35ms   p(90)=775.9µs p(95)=775.9µs</span><br><span class="line">     http_req_duration..........: avg=2.52ms   min=1.09ms  med=2.54ms  max=3.57ms   p(90)=3.56ms  p(95)=3.57ms</span><br><span class="line">     http_req_receiving.........: avg=5.23µs   min=0s      med=0s      max=505.49µs p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_sending...........: avg=103.27µs min=0s      med=0s      max=775.9µs  p(90)=775.9µs p(95)=775.9µs</span><br><span class="line">     http_req_tls_handshaking...: avg=0s       min=0s      med=0s      max=0s       p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_waiting...........: avg=2.41ms   min=579.2µs med=2.54ms  max=3.57ms   p(90)=3.17ms  p(95)=3.57ms</span><br><span class="line">     http_reqs..................: 100    5020.634809/s</span><br><span class="line">     iteration_duration.........: avg=4.07ms   min=1.35ms  med=4.14ms  max=5.92ms   p(90)=5.92ms  p(95)=5.92ms</span><br><span class="line">     iterations.................: 100    5020.634809/s</span><br></pre></td></tr></table></figure><p>これらの負荷設定はJavaScriptに記載することも可能です。</p><figure class="highlight js"><figcaption><span>k6_test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">  vus: <span class="number">10</span>,</span><br><span class="line">  iterations: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  http.get(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stages</code>という書き方で段階的に負荷を変更することも可能です。<br>この場合<code>vus</code>ではなく<code>target</code>が同時接続数です。<br>下記の書き方の場合、同時接続数10人で1秒負荷をかけた後に20人、30人と接続数を増やしていく試験になります。<br><code>--stages</code>のようにCLIオプションとして渡すことはできません。</p><figure class="highlight js"><figcaption><span>k6_test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">  stages: [</span><br><span class="line">    &#123; <span class="attr">target</span>: <span class="number">10</span>, <span class="attr">duration</span>: <span class="string">&#x27;1s&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">target</span>: <span class="number">20</span>, <span class="attr">duration</span>: <span class="string">&#x27;1s&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">target</span>: <span class="number">30</span>, <span class="attr">duration</span>: <span class="string">&#x27;1s&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  http.get(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GETリクエスト以外を検証する。"><a href="#GETリクエスト以外を検証する。" class="headerlink" title="GETリクエスト以外を検証する。"></a>GETリクエスト以外を検証する。</h4><p>動作確認ではGETリクエストの確認を行いましたが、k6のhttpライブラリはGETリクエスト以外も検証可能です、GET, POSTなどは勿論OPTIONSなどのリクエストも対応しています。<br>詳しくは<a href="https://k6.io/docs/javascript-api/k6-http">公式ドキュメント</a>を確認してください。</p><p>よく使うであろうPOST, PUT, DELETEについて簡単なスニペットを用意しました。</p><figure class="highlight js"><figcaption><span>k6_post.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> body = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;;</span><br><span class="line">  http.post(<span class="string">&#x27;http://localhost:8080/&#x27;</span>, <span class="built_in">JSON</span>.stringify(body), headers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>k6_put.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> body = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;;</span><br><span class="line">  http.put(<span class="string">&#x27;http://localhost:8080/&#x27;</span>, <span class="built_in">JSON</span>.stringify(body), headers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>k6_delete.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> body = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> params = &#123; <span class="attr">headers</span>: &#123; <span class="string">&#x27;X-MyHeader&#x27;</span>: <span class="string">&#x27;k6test&#x27;</span> &#125; &#125;;</span><br><span class="line">  http.del(<span class="string">&#x27;http://localhost:8080/&#x27;</span>, <span class="built_in">JSON</span>.stringify(body), params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETEリクエストの場合、リクエストボディにパラメータを含めることはあまり一般的ではありませんが、技術的には可能であったりといった側面に対応できるようになっています。<br>(k6公式ドキュメントにもDELETEリクエストのリクエストボディはセマンティクスが定まっていないため非推奨と記載があります)</p><h4 id="リクエストの応答を検証する"><a href="#リクエストの応答を検証する" class="headerlink" title="リクエストの応答を検証する"></a>リクエストの応答を検証する</h4><p>サーバーが負荷に耐えきれず正常な応答を返せない割合を<code>check</code>ライブラリで検証することが可能です。</p><figure class="highlight js"><figcaption><span>k6_test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; check &#125; <span class="keyword">from</span> <span class="string">&#x27;k6&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = http.get(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">  check(res, &#123;</span><br><span class="line">    <span class="string">&#x27;response code was 200&#x27;</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> res.status == <span class="number">200</span>,</span><br><span class="line">    <span class="string">&#x27;body size was 8 bytes&#x27;</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> res.body.length == <span class="number">8</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記コードで同時接続2万人分のリクエストの1割を捌くことに失敗することをレポートすることができました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">k6 run k6_test.js --vus 20000 --iterations 20000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /\      |‾‾| /‾‾/   /‾‾/</span><br><span class="line">     /\  /  \     |  |/  /   /  /</span><br><span class="line">    /  \/    \    |     (   /   ‾‾\</span><br><span class="line">   /          \   |  |\  \ |  (‾)  |</span><br><span class="line">  / __________ \  |__| \__\ \_____/ .io</span><br><span class="line"></span><br><span class="line">// サーバーエラー発生時にログが出力される為中略</span><br><span class="line"></span><br><span class="line">running (01m31.8s), 00000/20000 VUs, 20000 complete and 0 interrupted iterations</span><br><span class="line">default ✓ [======================================] 20000 VUs  01m31.7s/10m0s  20000/20000 shared iters</span><br><span class="line"></span><br><span class="line">     ✗ response code was 200</span><br><span class="line">      ↳  90% — ✓ 18054 / ✗ 1946</span><br><span class="line">     ✗ body size was 8 bytes</span><br><span class="line">      ↳  90% — ✓ 18054 / ✗ 1946</span><br><span class="line"></span><br><span class="line">     checks.....................: 90.27% ✓ 36108   ✗ 3892</span><br><span class="line">     data_received..............: 2.2 MB 24 kB/s</span><br><span class="line">     data_sent..................: 1.4 MB 16 kB/s</span><br><span class="line">     http_req_blocked...........: avg=11.47s   min=0s med=16.54s   max=19.94s p(90)=19.46s p(95)=19.78s</span><br><span class="line">     http_req_connecting........: avg=10.94s   min=0s med=15.84s   max=19.94s p(90)=19.45s p(95)=19.78s</span><br><span class="line">     http_req_duration..........: avg=3.55s    min=0s med=944.07ms max=19.34s p(90)=11.12s p(95)=13.1s</span><br><span class="line">     http_req_receiving.........: avg=66.54ms  min=0s med=0s       max=11.01s p(90)=0s     p(95)=997.5µs</span><br><span class="line">     http_req_sending...........: avg=976.15ms min=0s med=27.92ms  max=16.22s p(90)=3.12s  p(95)=5.93s</span><br><span class="line">     http_req_tls_handshaking...: avg=0s       min=0s med=0s       max=0s     p(90)=0s     p(95)=0s</span><br><span class="line">     http_req_waiting...........: avg=2.5s     min=0s med=602.44ms max=18.21s p(90)=8.91s  p(95)=10.96s</span><br><span class="line">     http_reqs..................: 20000  217.879289/s</span><br><span class="line">     iteration_duration.........: avg=18.18s   min=0s med=19.68s   max=1m5s   p(90)=20s    p(95)=25.89s</span><br><span class="line">     iterations.................: 20000  217.879289/s</span><br><span class="line">     vus........................: 38     min=38    max=16944</span><br><span class="line">     vus_max....................: 20000  min=20000 max=20000</span><br></pre></td></tr></table></figure><p>ちなみに26000人～29000人分のアクセスを再現するあたりで64GBのメモリを使い切り動かなくなりました。<br>要求スペック的には1000人オーダーであれば8～16GBのメモリのマシンであっても耐えられそうです。<br>メモリに余裕のない環境ではマシンスペックの限界を超えたときにGoのランタイムエラーが出力され、Go製ツールであることを感じることができます。</p><p><img src="/images/20210324/image_5.png"></p><p><code>check</code>関数はそのまま真偽値として扱う事が可能です。<br>試験の失敗をログ出力する<code>fail</code>ライブラリと組み合わせることが可能です。</p><figure class="highlight js"><figcaption><span>k6_fail.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; check, fail &#125; <span class="keyword">from</span> <span class="string">&#x27;k6&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = http.get(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    !check(res, &#123;</span><br><span class="line">      <span class="string">&#x27;status code MUST be 200&#x27;</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> res.status == <span class="number">200</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ) &#123;</span><br><span class="line">    fail(<span class="string">&#x27;status code was *not* 200&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>その他テストシナリオの品質を高めるためのユーティリティ等が沢山用意されています、詳しくは<a href="https://k6.io/docs/javascript-api">公式ドキュメントのjavascript-apiの章</a>を確認してください。<br>JavaScriptで再利用性の高い高品質なテストシナリオをどのように書いていくかが、腕の見せ所ですね。</p><h2 id="負荷試験のアウトプットについて"><a href="#負荷試験のアウトプットについて" class="headerlink" title="負荷試験のアウトプットについて"></a>負荷試験のアウトプットについて</h2><p>試験レポートは標準出力で確認できるものを手作業で纏めるだけでも充分ではありますが、<code>--out</code>オプションで出力先、形式を変更することが可能です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k6 run .\k6_test.js --out json&#x3D;out.json</span><br></pre></td></tr></table></figure><p><a href="https://k6.io/docs/getting-started/results-output">公式ドキュメント</a>では下記のような形式が想定されています。</p><table><thead><tr><th>plugin</th><th>usage</th></tr></thead><tbody><tr><td>Amazon CloudWatch</td><td>k6 run –out statsd</td></tr><tr><td>Apache Kafka</td><td>k6 run –out kafka</td></tr><tr><td>Cloud</td><td>k6 run –out cloud</td></tr><tr><td>CSV</td><td>k6 run –out csv</td></tr><tr><td>Datadog</td><td>k6 run –out datadog</td></tr><tr><td>InfluxDB</td><td>k6 run –out influxdb</td></tr><tr><td>JSON</td><td>k6 run –out json</td></tr><tr><td>New Relic</td><td>k6 run –out statsd</td></tr><tr><td>StatsD</td><td>k6 run –out statsd</td></tr></tbody></table><p>公式のダッシュボードである<a href="https://k6.io/cloud">k6 Cloud</a>も提供されています。<br>試験結果の可視化、前回との差分の比較を様々な手段で行う事や、CloudWatchのメトリクスとして定期的なパフォーマンスチェックを行う監視システムの構築等が想像できます。<br>これらの機能の存在からも現在のDevOpsの成長に追従した継続的な性能試験という設計思想を感じることができます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>k6はGoで開発されたモダンな負荷試験ツールです。</li><li>軽快なフットワークでインストールが可能です。</li><li>JavaScriptで書いたシナリオを実行する形で利用します。</li><li>試験結果は様々な外部システムと組み合わせることが可能です。</li></ul><p>負荷試験を検討の際はぜひ選択肢の一つとして検討してみてください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210324/crocodile-4918820_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/engin_akyurt-3656355/?u</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="k6" scheme="https://future-architect.github.io/tags/k6/"/>
    
    <category term="負荷試験ツール" scheme="https://future-architect.github.io/tags/%E8%B2%A0%E8%8D%B7%E8%A9%A6%E9%A8%93%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる</title>
    <link href="https://future-architect.github.io/articles/20210323/"/>
    <id>https://future-architect.github.io/articles/20210323/</id>
    <published>2021-03-22T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの齋場です。<a href="/articles/20210307/">GCP連載2021</a>の第11弾です。</p><p>本記事では、Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる手順を紹介します。Cloud Spannerを用いた開発を行う方、また興味あるから少し触ってみたいという方にもおすすめです。</p><h1 id="Cloud-Spannerとは"><a href="#Cloud-Spannerとは" class="headerlink" title="Cloud Spannerとは"></a>Cloud Spannerとは</h1><p>簡単にCloud Spanner (以下「Spanner」と記載)について紹介させていただきます。</p><p>Spannerは、Google Cloudが提供する”強力な一貫性と水平方向の拡張性を兼ね備えた唯一のリレーショナルデータベースサービス” です。</p><p>以下公式ドキュメントの抜粋です。</p><blockquote><p>・無制限のスケーリングによって、リレーショナル セマンティクスと SQL のすべてのメリットを享受<br>・任意のサイズで開始し、ニーズの拡大に応じて制限なしでスケーリング<br>・計画的ダウンタイムのない、オンラインでのスキーマ変更で高可用性を実現<br>・リージョンや大陸全体にわたる強整合性で高性能のトランザクションを提供<br>・自動シャーディングなどの機能により手動のタスクを排除し、イノベーションに注力</p></blockquote><p>夢のようなデータベースサービスですね。でも、となるとやっぱりお高そう..料金は以下ような感じです。</p><h4 id="１ノードあたりの料金（すべてのレプリケーションを含む）"><a href="#１ノードあたりの料金（すべてのレプリケーションを含む）" class="headerlink" title="１ノードあたりの料金（すべてのレプリケーションを含む）"></a>１ノードあたりの料金（すべてのレプリケーションを含む）</h4><table><thead><tr><th>構成</th><th>リージョン</th><th>$/時間</th><th>$/月 (100%稼働)</th></tr></thead><tbody><tr><td>リージョン</td><td>asia-northeast1 (東京)</td><td>1.17</td><td>842.4</td></tr><tr><td>マルチリージョン</td><td>asia1 (東京+大阪)</td><td>3.9</td><td>2808</td></tr></tbody></table><p>最小構成のリージョン+1ノード構成でも、なかなかのコストが掛かりますね。</p><h1 id="開発環境どうするか"><a href="#開発環境どうするか" class="headerlink" title="開発環境どうするか"></a>開発環境どうするか</h1><p>コストが高いので、開発環境用に気軽にインスタンスを立ち上げるのは難しそうです。<br>ということで、本記事ではGCPが公式で提供してくれている <a href="https://cloud.google.com/spanner/docs/emulator?hl=ja">Spanner エミュレータ</a> を使って開発環境を立ち上げます！(エミューレータあってよかったありがとう!)</p><p>gcloud CLIとdockerイメージでの提供がありますが、今回はdocker-composeで利用する例を紹介します。<br>サンプルコードはこちら: <a href="https://github.com/tarosaiba/compose-spanner"><strong>tarosaiba/compose-spanner</strong></a></p><p>以下2点工夫したポイントです。</p><ul><li>通常、Spannerエミュレータ起動後にインスタンスの作成手順(<code>gcloud spanner instances create</code>)が必要になりますが、docker-compose立ち上げ時に自動でインスタンス作成されるようにしています</li><li>DBの初期化処理(テーブル作成&amp;データ投入)のために、事前に用意したDDL/DMLをdocker-compose立ち上げ時に自動で実行されるようにしています</li></ul><p>ということで早速手順を紹介します。</p><h1 id="要件"><a href="#要件" class="headerlink" title="要件"></a>要件</h1><ul><li>docker &gt;= 19.03.0+</li><li>docker-compose &gt;= 1.27.0+</li></ul><h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><h2 id="クイックスタート"><a href="#クイックスタート" class="headerlink" title="クイックスタート"></a>クイックスタート</h2><ul><li>リポジトリをクローン <a href="https://github.com/tarosaiba/compose-spanner">https://github.com/tarosaiba/compose-spanner</a></li><li>ディレクトリに移動  <code>cd compoose-spanner</code></li><li>docker-compose起動 <code>docker-compose up -d</code></li></ul><p>手順は以上です!</p><h2 id="spanner-cliによるSpanner接続方法"><a href="#spanner-cliによるSpanner接続方法" class="headerlink" title="spanner-cliによるSpanner接続方法"></a>spanner-cliによるSpanner接続方法</h2><p>さっそくcliで接続してみましょう。<br>※ インスタンス、データベースが作成されるまで十数秒待つ必要があります</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose exec spanner-cli spanner-cli -p test-project -i test-instance -d test-database</span><br><span class="line">Connected.</span><br><span class="line">spanner&gt;</span><br></pre></td></tr></table></figure><p>接続できました！では、テーブルを確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spanner&gt; show tables;</span><br><span class="line">+-------------------------+</span><br><span class="line">| Tables_in_test-database |</span><br><span class="line">+-------------------------+</span><br><span class="line">| Singers                 |</span><br><span class="line">| Albums                  |</span><br><span class="line">+-------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">spanner&gt; select * from Singers;</span><br><span class="line">+----------+------------+----------+------------+</span><br><span class="line">| SingerId | FirstName  | LastName | SingerInfo |</span><br><span class="line">+----------+------------+----------+------------+</span><br><span class="line">| 13       | Russell    | Morales  | NULL       |</span><br><span class="line">| 15       | Dylan      | Shaw     | NULL       |</span><br><span class="line">| 12       | Melissa    | Garcia   | NULL       |</span><br><span class="line">| 14       | Jacqueline | Long     | NULL       |</span><br><span class="line">+----------+------------+----------+------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (800.4us)</span><br></pre></td></tr></table></figure><p>テーブルとデータも確認することができました。</p><h2 id="アプリケーションからの接続方法"><a href="#アプリケーションからの接続方法" class="headerlink" title="アプリケーションからの接続方法"></a>アプリケーションからの接続方法</h2><p>開発するアプリケーションで <code>SPANNER_EMULATOR_HOST=localhost:9010</code> 設定すればOKです。各クライアントライブラリごとのサンプルは<a href="https://cloud.google.com/spanner/docs/emulator">こちらの公式ドキュメント</a>を参照してください。</p><h2 id="エミュレータの制限事項と相違点"><a href="#エミュレータの制限事項と相違点" class="headerlink" title="エミュレータの制限事項と相違点"></a>エミュレータの制限事項と相違点</h2><p>ここで注意点ですが、<a href="https://cloud.google.com/spanner/docs/emulator?hl=ja#limitations_and_differences">公式ドキュメント</a>にある通りエミュレータは以下のような制限事項および、相違点があります。以下を理解して利用しましょう。</p><h4 id="制限事項"><a href="#制限事項" class="headerlink" title="制限事項"></a>制限事項</h4><blockquote><ul><li>TLS/HTTPS、認証、IAM、権限、ロール。</li><li>PLAN または PROFILE クエリモード。 NORMAL のみがサポートされます。</li><li>監査ログとモニタリング ツール。</li></ul></blockquote><h4 id="相違点"><a href="#相違点" class="headerlink" title="相違点"></a>相違点</h4><blockquote><ul><li>エミュレータのパフォーマンスとスケーラビリティは、本番環境サービスと同等ではありません。</li><li>読み取り/書き込みトランザクションとスキーマ変更は、完了するまでデータベース全体を排他的にのみアクセスできるようにロックします。</li><li>パーティション化 DML とパーティション クエリはサポートされていますが、エミュレータはステートメントが分割可能かどうかは確認しません。つまり、パーティション化 DML またはパーティション クエリ ステートメントがエミュレータで実行される場合でも、本番環境ではパーティション化できないステートメント エラーにより失敗する可能性があります。</li></ul></blockquote><h1 id="解説"><a href="#解説" class="headerlink" title="解説"></a>解説</h1><p>ざっくりサンプルコードの解説をさせていただきます</p><h3 id="ファイル構成"><a href="#ファイル構成" class="headerlink" title="ファイル構成"></a>ファイル構成</h3><p><img src="/images/20210323/image.png"></p><ul><li><strong>docker-compose.yaml</strong> : docker-composeファイルです。これを立ち上げます</li><li><strong>migrations</strong> : DB初期化時に適用するDDL&amp;DMLを配置します</li></ul><h3 id="利用しているDockerイメージ"><a href="#利用しているDockerイメージ" class="headerlink" title="利用しているDockerイメージ"></a>利用しているDockerイメージ</h3><table><thead><tr><th>Docker Image</th><th>説明</th><th>用途</th></tr></thead><tbody><tr><td>gcr.io/cloud-spanner-emulator/emulator</td><td>GCP提供のSpannerエミュレータ<a href="https://cloud.google.com/spanner/docs/emulator">公式ドキュメント</a></td><td>・Spannerエミュレータ本体</td></tr><tr><td>gcr.io/google.com/cloudsdktool/cloud-sdk:slim</td><td>GCP利用のためのツールとライブラリ<a href="https://cloud.google.com/sdk/docs/downloads-docker">公式ドキュメント</a></td><td>・インスタンスの作成</td></tr><tr><td>mercari/wrench</td><td>SpannerのSchemaマネジメントツール <a href="https://github.com/cloudspannerecosystem/wrench">Github</a></td><td>・テーブル作成 ・データ投入</td></tr><tr><td>sjdaws/spanner-cli</td><td>SpannerのCLIツール <a href="https://github.com/cloudspannerecosystem/spanner-cli">Github</a></td><td>・CLIアクセス</td></tr></tbody></table><p>※<code>wrench</code> および、<code>spanner-cli</code> は <a href="https://github.com/cloudspannerecosystem">Cloud Spanner Ecosystem</a>で公開されています<br>※MercariさんはSpannerのツールや知見を惜しみなく公開してくれており、非常に感謝です..!!</p><h3 id="コンテナ構成のイメージとdocker-compose-yamlの内容"><a href="#コンテナ構成のイメージとdocker-compose-yamlの内容" class="headerlink" title="コンテナ構成のイメージとdocker-compose.yamlの内容"></a>コンテナ構成のイメージとdocker-compose.yamlの内容</h3><p><img src="/images/20210323/image_2.png"></p><p>Spannerエミュレータ本体<code>spanner</code>とCLIアクセス用の<code>spanner-cli</code>は常駐プロセスとして起動し続け、それ以外のコンテナはコマンド実行後に正常終了します</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Spanner</span></span><br><span class="line">    <span class="attr">spanner:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">gcr.io/cloud-spanner-emulator/emulator</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">&quot;9010:9010&quot;</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">&quot;9020:9020&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Init (Create Instance)</span></span><br><span class="line">    <span class="attr">gcloud-spanner-init:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">gcr.io/google.com/cloudsdktool/cloud-sdk:slim</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line">       <span class="string">bash</span> <span class="string">-c</span> <span class="string">&#x27;gcloud config configurations create emulator &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set auth/disable_credentials true &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set project $$&#123;PROJECT_ID&#125; &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set api_endpoint_overrides/spanner $$&#123;SPANNER_EMULATOR_URL&#125; &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set auth/disable_credentials true &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud spanner instances create $$&#123;INSTANCE_NAME&#125; --config=emulator-config --description=Emulator --nodes=1&#x27;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">PROJECT_ID:</span> <span class="string">&quot;test-project&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_URL:</span> <span class="string">&quot;http://spanner:9020/&quot;</span></span><br><span class="line">        <span class="attr">INSTANCE_NAME:</span> <span class="string">&quot;test-instance&quot;</span></span><br><span class="line">        <span class="attr">DATABASE_NAME:</span> <span class="string">&quot;test-database&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># DB Migration (Create Table)</span></span><br><span class="line">    <span class="attr">wrench-crearte:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mercari/wrench</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&quot;create --directory /ddl&quot;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SPANNER_PROJECT_ID:</span> <span class="string">&quot;test-project&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_INSTANCE_ID:</span> <span class="string">&quot;test-instance&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_DATABASE_ID:</span> <span class="string">&quot;test-database&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_HOST:</span> <span class="string">&quot;spanner:9010&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_URL:</span> <span class="string">&quot;http://spanner:9020/&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./migrations/ddl:/ddl</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># DB Migration (Insert data)</span></span><br><span class="line">    <span class="attr">wrench-apply:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mercari/wrench</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&quot;apply --dml /dml/dml.sql&quot;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SPANNER_PROJECT_ID:</span> <span class="string">&quot;test-project&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_INSTANCE_ID:</span> <span class="string">&quot;test-instance&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_DATABASE_ID:</span> <span class="string">&quot;test-database&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_HOST:</span> <span class="string">&quot;spanner:9010&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_URL:</span> <span class="string">&quot;http://spanner:9020/&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./migrations/dml:/dml</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># CLI</span></span><br><span class="line">    <span class="attr">spanner-cli:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">sjdaws/spanner-cli:latest</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_HOST:</span> <span class="string">&quot;spanner:9010&quot;</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo this container keep running &amp;&amp; tail -f /dev/null&#x27;</span>]</span><br></pre></td></tr></table></figure><p>以下、補足になります</p><ul><li>wrenchコンテナは<code>restart: on-failure</code>と設定しています<ul><li>wrenchはSpannerインスタンス作成後に実行したいのですが、docker-composeの起動制御が複雑になるので、失敗→再起動→再実行 するようになっています</li></ul></li><li>spanner-cliコンテナは、<code>tail -f /dev/null</code> でコンテナ起動状態を保つようにしています<ul><li><code>docker-exec</code>でコマンドを実行するためです</li><li>※spanner-cliは、go getでもローカルPCにインストール可能 (筆者はローカルにインストールするのが面倒だった)</li></ul></li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>SpannerはNewSQLと称されるだけあり MySQLやPostgresと比較すると情報も乏しいですが、日本でも採用事例は増えてきていて今後増々期待できるデータベースサービスかと思います！</p><p>今回は、Spannerのローカル開発環境を立ち上げる方法を紹介させていただきました。宣言的に定義することで、立ち上げの手順もシンプルにできていると思います。興味のある方はぜひ立ち上げて触ってみてください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの齋場です。&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載2021&lt;/a&gt;の第11</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="DockerCompose" scheme="https://future-architect.github.io/tags/DockerCompose/"/>
    
    <category term="Spanner" scheme="https://future-architect.github.io/tags/Spanner/"/>
    
  </entry>
  
  <entry>
    <title>Migrate for Anthos を基礎から学ぶ</title>
    <link href="https://future-architect.github.io/articles/20210322/"/>
    <id>https://future-architect.github.io/articles/20210322/</id>
    <published>2021-03-21T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの<a href="https://twitter.com/famipapamart">村田</a>です。</p><p><a href="https://future-architect.github.io/articles/20210307/">GCP連載2021</a>の第10弾です。<a href="https://future-architect.github.io/articles/20210319/">前回</a>は越島さんによる分かりやすい Anthos 概要紹介記事でしたが、今回も前回に続いての Anthos ネタです。</p><p>※本記事の情報は 2021.03.21 時点での情報であり、サービスの対応状況などは更新される可能性があります。</p><h1 id="前説"><a href="#前説" class="headerlink" title="前説"></a>前説</h1><p>さて、昨今 DX だとかなんだとか飛び交う単語は色々ありますが、個人的に思う今求められるポイントはズバリ「変更容易性」なんじゃないかなと日々思いながら仕事をしています。（もちろん他にも大切な要素はたくさんありますし、文脈によって優先すべきポイントが変わるのというのは前提で）</p><p>それこそいま世界で走っている様々なプロジェクトはこの変更容易性を意識した設計・実装になっている、あるいはそうなるように推進されているかなと思います。新規実装であればそれでよいです。でも既存システムの場合はどうでしょう？既存システムは必ずしも変更が容易な形で作られているとは限りません。でも2025年の崖なんて言葉もそろそろ浸透しつつある中、なんとかこのタイミングで将来を見据えたシステムにアップグレードしたいと思っている企業はたくさんあります。例えば既存システムをコンテナ基盤に移行したいという要望もその一つです。しかし先に述べたように既存システムをコンテナ基盤に移行したいと言っても簡単にはいかなかったりします。</p><p>そんな悩みを解決してくれそうなサービスが最近私の視界の端っこでチラチラとサイドステップしているので、今回は皆さんに紹介したいと思います。</p><h1 id="Migrate-for-Anthosとは"><a href="#Migrate-for-Anthosとは" class="headerlink" title="Migrate for Anthosとは"></a>Migrate for Anthosとは</h1><p>Migrate for Anthos とは Google Cloud が提供するサービスのひとつで、端的に言えば <strong>仮想マシン上で動くアプリケーションをまるごとコンテナ化</strong> してくれます。</p><p>より詳細に言えば、 VMware オンプレミス・AWS・Azure のいずれか、または GCP 上の Compute Engine に存在するワークロードを、 Google Kubernetes Engine（GKE）または Anthos 上で動作するコンテナに変換することができます。</p><h1 id="Migrate-for-Anthos-の機能"><a href="#Migrate-for-Anthos-の機能" class="headerlink" title="Migrate for Anthos の機能"></a>Migrate for Anthos の機能</h1><h2 id="Migrate-できるものとできないもの"><a href="#Migrate-できるものとできないもの" class="headerlink" title="Migrate できるものとできないもの"></a>Migrate できるものとできないもの</h2><p>まずは<a href="https://cloud.google.com/migrate/anthos/docs/compatible-os-versions">互換性のある VM オペレーティングシステム</a>を公式サイトにて確認しておきましょう。Linux、Windows それぞれ対応している OS およびそのバージョンが記載されています。</p><p>Linux については GCP・AWS・Azure 上の VM インスタンスもしくは VMWare インスタンスが対象となっているのに対し、 Windows は GCE のみの対応でオンプレミスなどからの移行には現状対応していません。</p><h2 id="Migrate-に必要なもの"><a href="#Migrate-に必要なもの" class="headerlink" title="Migrate に必要なもの"></a>Migrate に必要なもの</h2><p>Migrate for Anthos のコンポーネントを実行するためには GKE あるいは Anthos クラスタが必要です。</p><blockquote><p>You can use a Google Kubernetes Engine (GKE) or Anthos processing cluster <strong>located in the Google Cloud or on-prem.</strong></p></blockquote><p><a href="https://cloud.google.com/migrate/anthos/docs/setting-up-overview">公式Doc</a>では上記のように記載がありますが、 <a href="https://cloud.google.com/migrate/anthos/docs/migration-prerequisites-aws">Anthos clusters on AWS への移行</a>もプレビュー状態ですが公開されているので、 Anthos clusters on ◯◯ に順次対応していくだろうと予測しています。</p><p>前項で対応している VM ソースプラットフォームについて言及しましたが、おそらくこの仕様に引っ張られる形で対応するプラットフォームが決まってるのではと思います。つまり、 Anthos clusters の展開に合わせて対応する移行元プラットフォームが増えていくと期待され、 昨年GAとなった Anthos clusters on bare metal まで対応が進んでいけば Migrate 対象の自由度は今後もっと上がっていくのではないかと妄想しています。</p><h2 id="Migrate-の概要"><a href="#Migrate-の概要" class="headerlink" title="Migrate の概要"></a>Migrate の概要</h2><p>Migrate プロセスは大きく分けて3つのプロセスに分かれます。</p><ul><li>移行元の特定</li><li>移行処理クラスタの作成</li><li>移行したワークロードのデプロイ</li></ul><p>各々について次項以降でそれぞれ説明していきます。</p><h1 id="Migrate-に向けた準備の具体的なステップ"><a href="#Migrate-に向けた準備の具体的なステップ" class="headerlink" title="Migrate に向けた準備の具体的なステップ"></a>Migrate に向けた準備の具体的なステップ</h1><h2 id="移行元の特定"><a href="#移行元の特定" class="headerlink" title="移行元の特定"></a>移行元の特定</h2><p>ワークロードの移行元プラットフォームに応じて必要なものが変わってくるので、まずは移行元を確認することから始めます。</p><table><thead><tr><th align="center">移行対象OS</th><th align="center">移行元</th><th align="center">移行先</th><th align="center">必要なもの</th></tr></thead><tbody><tr><td align="center">Linux / Windows</td><td align="center">GCE</td><td align="center">GKE / Anthos on Google Cloud</td><td align="center">Migrate for Anthos</td></tr><tr><td align="center">Linux</td><td align="center">VMware / AWS/ Azure</td><td align="center">GKE / Anthos on Google Cloud</td><td align="center">Migrate for Compute Engine と Migrate for Anthos</td></tr><tr><td align="center">Linux</td><td align="center">VMware</td><td align="center">Anthos clusters on VMware</td><td align="center">Migrate for Anthos</td></tr><tr><td align="center">Linux</td><td align="center">AWS</td><td align="center">Anthos clusters on AWS</td><td align="center">Migrate for Anthos</td></tr><tr><td align="center">Windows</td><td align="center">GCE以外</td><td align="center">GKE / Anthos on ◯◯</td><td align="center">Migrate for Compute Engineを使って一旦GCE化</td></tr></tbody></table><h2 id="ワークロードの-Migrate-適正診断"><a href="#ワークロードの-Migrate-適正診断" class="headerlink" title="ワークロードの Migrate 適正診断"></a>ワークロードの Migrate 適正診断</h2><p>Migrate のために必須というわけでは無いのですが、事前にワークロードのコンテナ移行に対する適合性をセルフ診断できるツールが提供されています。ツールは Linux 向けと Windows 向けでそれぞれ用意されていますが、現状はそれぞれの動作が微妙に異なるようです。</p><h3 id="Linux-向け診断ツール"><a href="#Linux-向け診断ツール" class="headerlink" title="Linux 向け診断ツール"></a>Linux 向け診断ツール</h3><p>Linux 向け診断ツールは以下の2フェーズに分かれています。</p><ul><li>収集フェーズ</li><li>分析フェーズ</li></ul><p>収集フェーズでは移行対象の VM に関する情報を収集し、分析フェーズでは収集した情報をもとに 0~10 の適合性スコアと詳細なレポートを出力してくれます。移行対象の VM がたくさんある場合は、収集ツールを各 VM で実行の上、すべての収集データを一括で分析することができます。</p><p>詳細なスコアの見方は<a href="https://cloud.google.com/migrate/anthos/docs/linux-assessment-tool">このページ</a>に記載がありますが、例えばスコアが 0 の場合は Migrate には適合してないことになり、逆に 10 の場合は適合度が高いです。</p><p>※ちなみに、公式ドキュメントでは例えばスコアが 7~8 の場合に <code>手動での作業が若干必要になります</code> との記載がありましたが、これが移行前準備における手動作業を指すのか移行後の作業を指すのかが紐解ききれませんでした…分かる方いたらコメントくださいmm</p><h3 id="Windows-向け診断ツール"><a href="#Windows-向け診断ツール" class="headerlink" title="Windows 向け診断ツール"></a>Windows 向け診断ツール</h3><p>Windows 向けの診断ツールは Linux 向けに比べて簡素に結果を判定してくれます。診断後は、その VM が移行に適しているかどうかを示す zip ファイルが出力されるのですが、不適合な VM の場合はファイル名に <code>NOFIT</code> と表記され、適正のある VM の場合にはその文字列はありません。</p><h2 id="移行処理クラスタの作成"><a href="#移行処理クラスタの作成" class="headerlink" title="移行処理クラスタの作成"></a>移行処理クラスタの作成</h2><p>Migrate for Anthos の実処理を行う GKE あるいは Anthos クラスタの設定を進めていきます。<br><img src="/images/20210322/setting-up-workflow.png"></p><p>※図は<a href="https://cloud.google.com/migrate/anthos/docs/setting-up-overview">こちらの公式Doc</a>から拝借しました</p><p>基本は1本道ですが、1箇所だけフローに分岐があります。 Migrate for Compute Engine のセットアップをするかどうかです。</p><blockquote><p>VMware、AWS または Azure から移行する場合は、Migrate for Compute Engine コンポーネントを設定します</p></blockquote><p><a href="https://cloud.google.com/migrate/anthos/docs/setting-up-overview">公式Doc</a>では上記のような記載があり、GCP以外の環境から移行したい場合には Migrate for Compute Engine のセットアップが必要だと分かります。ただ、これは文字通りワークロードを GCE へ Migrate したい場合に使うものであり、Migrate が各プラットフォームの Anthos clusters 内で完結する場合には設定不要です。</p><h3 id="移行環境ごとの前提条件確認"><a href="#移行環境ごとの前提条件確認" class="headerlink" title="移行環境ごとの前提条件確認"></a>移行環境ごとの前提条件確認</h3><p>OS および VM ソースプラットフォームがサポートされているものかどうか確認し、必要に応じて Migrate for Compute Engine を設定します。</p><p>また、 GCP 以外のプラットフォームにて処理クラスタを構築する場合（Anthos clusters for ◯◯ を使う場合）はクラスタの構成に関していくつかの条件があるので要確認です。 Anthos clusters と Google Cloud を繋ぐ <a href="https://cloud.google.com/anthos/multicluster-management/connect/overview">Connect</a> のインストールは必須ではないですが、インストールしておけば移行時に Cloud Console のロギングおよびモニタリング機能を使うことができます。</p><h3 id="データリポジトリの準備"><a href="#データリポジトリの準備" class="headerlink" title="データリポジトリの準備"></a>データリポジトリの準備</h3><p>Migrate for Anthos は、移行に際して以下2種のデータリポジトリに対してデータ書き込みが発生します。</p><ul><li>Docker イメージファイルレジストリ</li><li>移行アーティファクトリポジトリ</li></ul><p>Docker イメージファイルレジストリには、移行された Linux VM の情報が Docker イメージファイルとして Docker レジストリに書き込まれます。これは Windows VM のワークロードを移行する際には必要ありません。また、移行アーティファクトリポジトリには、移行されたワークロードをデプロイするための YAML ファイルなどが配置されます。</p><p>これらのデータリポジトリは、処理クラスタの作成プラットフォームに応じて変化します。</p><table><thead><tr><th align="center">プラットフォーム</th><th align="center">Docker イメージファイルレジストリ</th><th align="center">移行アーティファクトリポジトリ</th></tr></thead><tbody><tr><td align="center">GKE/ Anthos on Google Cloud</td><td align="center">デフォルトは GCR</td><td align="center">デフォルトは GCS</td></tr><tr><td align="center">Anthos clusters on VMware</td><td align="center">GCR または任意の Docker レジストリを指定する</td><td align="center">GCS または S3 を指定する</td></tr><tr><td align="center">Anthos clusters on AWS</td><td align="center">ECRを指定する</td><td align="center">GCS または S3 を指定する</td></tr></tbody></table><p>各データリポジトリの実体の作成は後述の migctl コマンド経由で行うので、この段階では何を使うかのみ決めておけばOKです。</p><h3 id="Google-サービス-API-の有効化とサービスアカウントの設定"><a href="#Google-サービス-API-の有効化とサービスアカウントの設定" class="headerlink" title="Google サービス API の有効化とサービスアカウントの設定"></a>Google サービス API の有効化とサービスアカウントの設定</h3><p>Google Cloud のリソースへのアクセスが発生するパターンでの Migrate を実施する際には、 Google サービス API の有効化およびサービスアカウントの設定が必要です。</p><p>Google Cloud への Migrate を行う場合に有効化する Google サービス API は以下です。</p><ul><li>Service Management API</li><li>Service Control API</li><li>Cloud Resource Manager API</li><li>Compute Engine API</li><li>Kubernetes Engine API</li><li>Google Container Registry API</li><li>Cloud Build API</li></ul><p>また、以下の場合には該当するサービスアカウントの作成も必要になります。</p><ul><li>データリポジトリにGCRあるいはGCSを利用する場合<ul><li>Container Registry と Cloud Storage へのアクセスで使用するサービスアカウント</li></ul></li><li>移行元ソースとしてGCEを利用する場合<ul><li>Compute Engine へのアクセスで使用するサービスアカウント</li></ul></li></ul><h3 id="Migrate-for-Compute-Engineの設定"><a href="#Migrate-for-Compute-Engineの設定" class="headerlink" title="Migrate for Compute Engineの設定"></a>Migrate for Compute Engineの設定</h3><p>先述の通りですが、Google Cloud 以外のプラットフォームから Google Cloud への Migrate を実施したい場合には、この Migrate for Compute Engine の設定が必要になります。このパートでは細かい設定手順は割愛しますが、<a href="https://cloud.google.com/migrate/compute-engine/docs/4.11/getting-started">公式Doc</a>に従って Migrate for Compute Engine Manager のインストールを完了させます。</p><h3 id="処理クラスタの作成"><a href="#処理クラスタの作成" class="headerlink" title="処理クラスタの作成"></a>処理クラスタの作成</h3><p>利用するプラットフォームごとに必要な設定が異なるので、移行要件に沿って適切な手順を選択します。どの手順を選んだとしても、必要な設定を組み込んだ GKE クラスタあるいは Anthos クラスタを作成する流れとなります。</p><h4 id="Linux-VM-を移行する場合"><a href="#Linux-VM-を移行する場合" class="headerlink" title="Linux VM を移行する場合"></a>Linux VM を移行する場合</h4><ul><li><a href="https://cloud.google.com/migrate/anthos/docs/configuring-a-cluster">処理クラスタとして <strong>GKE または Anthos on Google Cloud</strong> を使用する場合</a></li><li><a href="https://cloud.google.com/migrate/anthos/docs/configuring-onprem-cluster">処理クラスタとして <strong>Anthos clusters on VMware</strong> を使用する場合</a></li><li><a href="https://cloud.google.com/migrate/anthos/docs/configuring-aws-cluster">処理クラスタとして <strong>Anthos clusters on AWS</strong> を使用する場合</a></li></ul><h4 id="Windows-VM-を移行する場合"><a href="#Windows-VM-を移行する場合" class="headerlink" title="Windows VM を移行する場合"></a>Windows VM を移行する場合</h4><ul><li><a href="https://cloud.google.com/migrate/anthos/docs/configuring-win-cluster">処理クラスタとして GKE クラスタを使用する場合</a></li></ul><h3 id="Migrate-for-Anthos-のインストール"><a href="#Migrate-for-Anthos-のインストール" class="headerlink" title="Migrate for Anthos のインストール"></a>Migrate for Anthos のインストール</h3><p>migctl コマンドを使用して、作成済みの処理クラスタへ Migrate for Anthos コンポーネントをインストールします。</p><table><thead><tr><th align="center">プラットフォーム</th><th align="center">migctl の実行方法</th></tr></thead><tbody><tr><td align="center">GKE/ Anthos on Google Cloud</td><td align="center">Cloud Shell で実行可能</td></tr><tr><td align="center">Anthos clusters on VMware</td><td align="center">管理ワークステーションにコマンドをインストールする</td></tr><tr><td align="center">Anthos clusters on AWS</td><td align="center">管理ワークステーションにコマンドをインストールする</td></tr></tbody></table><h4 id="migctl-とは"><a href="#migctl-とは" class="headerlink" title="migctl とは"></a>migctl とは</h4><p>migctl は Migrate for Anthos 移行環境の設定と管理を行うコマンドラインツールで、例えば以下のようなオペレーションを実行できます。</p><table><thead><tr><th align="center">コマンド</th><th align="center">説明</th></tr></thead><tbody><tr><td align="center">artifacts-repo</td><td align="center">アーティファクト リポジトリを構成する</td></tr><tr><td align="center">docker-registry</td><td align="center">Docker レジストリを構成する</td></tr><tr><td align="center">doctor</td><td align="center">Migrate for Anthos のデプロイ ステータスと関連する構成の確認</td></tr><tr><td align="center">migration</td><td align="center">移行オペレーション</td></tr><tr><td align="center">setup</td><td align="center">Migrate for Anthos のインストール / アンインストール</td></tr></tbody></table><h4 id="migctl-のインストール"><a href="#migctl-のインストール" class="headerlink" title="migctl のインストール"></a>migctl のインストール</h4><p>GCP 外の環境の場合にはまず以下コマンドで管理ワークステーションに migctl コマンドをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://anthos-migrate-release.storage.googleapis.com/v1.6.2/linux/amd64/migctl</span><br><span class="line">$ sudo cp migctl /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/migctl</span><br><span class="line">$ . &lt;(migctl completion bash)</span><br></pre></td></tr></table></figure><p>GCP 環境では Cloud Shell にて migctl コマンドを実行可能なためこの手順はスキップできます。</p><h4 id="Migrate-fot-Anthos-コンポーネントのインストール"><a href="#Migrate-fot-Anthos-コンポーネントのインストール" class="headerlink" title="Migrate fot Anthos コンポーネントのインストール"></a>Migrate fot Anthos コンポーネントのインストール</h4><p>次に以下コマンドで処理クラスタにコンポーネントの実体をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ migctl setup install --&lt;Your Target Platform&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;Your Target Platform&gt;</code> の部分は例えば AWS の場合は <code>gke-on-aws</code> となります。</p><p>インストール後には <code>doctor</code> コマンドでインストールの進捗状況を確認することができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ migctl doctor</span><br><span class="line">  [✓] Deployment</span><br><span class="line">  [!] Docker registry</span><br><span class="line">  [!] Artifacts repo</span><br><span class="line">  [!] Source Status</span><br></pre></td></tr></table></figure><p><strong>データリポジトリの準備</strong> の章で記載しましたが、処理クラスタに応じてデータリポジトリを定義する必要があり、<a href="https://cloud.google.com/migrate/anthos/docs/data-repos">手順</a>に沿ってデータリポジトリを migctl コマンド経由で作成していきます。</p><p>データリポジトリ設定後に期待される <code>doctor</code> コマンドの応答は以下です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ migctl doctor</span><br><span class="line">  [✓] Deployment</span><br><span class="line">  [✓] Docker registry</span><br><span class="line">  [✓] Artifacts repo</span><br><span class="line">  [!] Source Status</span><br></pre></td></tr></table></figure><h1 id="ワークロードの-Migration-とデプロイ"><a href="#ワークロードの-Migration-とデプロイ" class="headerlink" title="ワークロードの Migration とデプロイ"></a>ワークロードの Migration とデプロイ</h1><p>※本章では Linux VM の移行を前提として記載を進めます。</p><h2 id="ワークロードの-Migration"><a href="#ワークロードの-Migration" class="headerlink" title="ワークロードの Migration"></a>ワークロードの Migration</h2><p><img src="/images/20210322/image.png"></p><p>※図は<a href="https://cloud.google.com/migrate/anthos/docs/migrating-linux-vm-overview">こちらの公式Doc</a>から拝借しました</p><p>移行作業自体は migctl を順繰りに叩いていくことになりますが、大きくは上図に記載された5つのステップに分割されます。</p><ul><li>移行元を追加する（Add a migration source）</li><li>移行を作成する（Create a migration）</li><li>移行計画をカスタマイズする（Customize the migration plan）</li><li>移行を実行する（Execute the migration）</li><li>移行をモニタリングする（Monitor the migration）</li></ul><p>移行作業のゴールは、移行元から抽出したアプリケーションを元にアーティファクトを作成することです。具体的には以下の2つが実行されます。</p><ul><li>抽出したワークロードから Docker イメージを作成し、 Docker イメージファイルレジストリ（ex.GCR）へコピーする</li><li>デプロイする際に使用する構成ファイル（YAML ファイル）を作成し、移行アーティファクトリポジトリ（ex.GCS）へコピーする</li></ul><p>一連の作業はひとつの <code>migration</code> プロセスとして管理され、 <code>migctl migration create</code> コマンドで作成されます。このコマンドの引数では例えばステートレスやステートフルなどの「移行対象のVMの性質」を指定することができ、それにより後に作成される構成ファイル（Kubernetes manifest）にてアプリを Deployment として定義するか Statefulset として定義するかが決定されることになります。</p><p>最終的に以下のようにアーティファクト生成の完了が確認できれば成功です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ migctl migration status my-migration</span><br><span class="line"></span><br><span class="line">NAME            CURRENT-OPERATION       PROGRESS        STEP            STATUS    AGE</span><br><span class="line">my-migration    GenerateArtifacts       [1/1]           ExtractImage    Completed 14m23s</span><br></pre></td></tr></table></figure><p>作成されたアーティファクトは以下コマンドでダウンロードできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ migctl migration get-artifacts my-migration</span><br></pre></td></tr></table></figure><p>ダウンロードすると3種のファイルを取得できます。</p><ul><li>deployment_spec.yaml</li><li>Dockerfile</li><li>migration.yaml</li></ul><p>migration.yaml は migctl 上で管理される <code>migration</code> の設定が保存されており、このファイルを見ることでどのような <code>migration</code> を作成したか確認することができます。 Dockerfile はイメージビルドに使用されたものです。 deployment_spec.yaml はデプロイ時に使用する manifest ファイルで、 <code>migration</code> の設定が反映された構成になっています。</p><h2 id="ワークロードのデプロイ"><a href="#ワークロードのデプロイ" class="headerlink" title="ワークロードのデプロイ"></a>ワークロードのデプロイ</h2><p>ここまで来ればデプロイまではあと一歩です。</p><p>デプロイ先のクラスタが Docker イメージファイルレジストリへの読み取りアクセス権を有していることを確認したら、以下コマンドでデプロイを実施します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f deployment_spec.yaml</span><br></pre></td></tr></table></figure><p>ワークロードのデプロイ先は GKE もしくは Anthos なので、以降は通常の Kubernetes クラスタ上のアプリケーションと同様に kubectl コマンドを用いて操作・確認が可能となります。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>さて、ここまで Migrate for Anthos を基礎から学んで来ましたが、おそらく皆さんもお気づきの通り後はもう実際にやってみるに尽きます。理論上どのようなプロセスで実施可能かは分かりましたが、移行元および移行先のプラットフォームごとに勝手が異なり、また、移行対象が Linux か Windows かでも手順および使用するツールが変わってきます。</p><p>公式に <a href="https://cloud.google.com/migrate/anthos/docs/quickstart">クイックスタート</a> や <a href="https://google.qwiklabs.com/focuses/10268?parent=catalog">Qwiklabs</a> が準備されているためまずはこれにチャレンジしてみようと思いますが、どちらも見た感じ GCE をソースとして GKE を処理クラスタとして使う構成のようです。この構成は数種類ある Migrate for Anthos の方式の中でも一番シンプルで簡単なものであり、例えば処理クラスタとして Anthos clusters on VMware を使用し、自前で Docker イメージファイルレジストリを登録するパターンなどはもっと複雑で、ネットワーク周りの問題など様々な躓きポイントがあるであろうことが容易に想像できます。。。ワクワクしますね！！</p><p>この記事が Migrate for Anthos に初めて触れる方のガイドラインになれば幸いです。</p><p>明日はついにGCP連載2021のラスト、齋場さんによる <a href="/articles/20210323/">Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる</a> 記事です。お楽しみに！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの&lt;a href=&quot;https://twitter.com/famipapamart&quot;&gt;村田&lt;/a&gt;です。</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Anthos" scheme="https://future-architect.github.io/tags/Anthos/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="クラウドマイグレーション" scheme="https://future-architect.github.io/tags/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
    <category term="コンテナ" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A/"/>
    
  </entry>
  
  <entry>
    <title>シェルスクリプトとLinuxコマンド連載を初めます</title>
    <link href="https://future-architect.github.io/articles/20210321/"/>
    <id>https://future-architect.github.io/articles/20210321/</id>
    <published>2021-03-20T15:00:00.000Z</published>
    <updated>2021-03-30T13:59:16.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG真野です。</p><p>タイトル通り、シェルスクリプトとLinuxコマンドをテーマにした連載を初めます。</p><h1 id="シェルスクリプトとLinuxコマンド連載の指す範囲"><a href="#シェルスクリプトとLinuxコマンド連載の指す範囲" class="headerlink" title="シェルスクリプトとLinuxコマンド連載の指す範囲"></a>シェルスクリプトとLinuxコマンド連載の指す範囲</h1><p><img src="/images/20210321/king-penguin-1703294_1280.jpg"></p><blockquote><p><a href="https://pixabay.com/ja/users/pixel-mixer-1197643/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1703294">Marcel Langthim</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1703294">Pixabay</a>からの画像</p></blockquote><p>シェルスクリプトとは、オペレーティングシステムのシェルまたはコマンドラインインタプリタ向けに書かれたスクリプト言語です。詳しくは<a href="https://ja.wikipedia.org/wiki/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88">https://ja.wikipedia.org/wiki/シェルスクリプト</a>などを参考ください。</p><p>シェルとは、CLI（Command Line Interface）で利用するためのソフトウェアです。シェル上でlsやcdなどのコマンドを通してOSを操作することができます。シェルにはBash（Bourne-Again Shell）やzsh, kshなどさまざまな種類があります。こちらも詳しくは<a href="https://ja.wikipedia.org/wiki/%E3%82%B7%E3%82%A7%E3%83%AB">https://ja.wikipedia.org/wiki/シェル</a>などを参考ください。</p><p>今回のブログ連載ははシェルスクリプトと、Linuxコマンドをテーマとします。<a href="https://ja.wikipedia.org/wiki/Sed_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF)">sed</a>、<a href="https://ja.wikipedia.org/wiki/AWK">awk</a>も含めます。sed、awkは別のスクリプト言語だし、これを入れるとPerlでもPytnonでも何でもありなんじゃない？って思われそうですが、広くネタを募るという意味でOKにしています。人が集まればsedやawkだけをスピンアウトした連載を開催したいとも思っていますので、ご期待ください。</p><h1 id="連載スケジュール"><a href="#連載スケジュール" class="headerlink" title="連載スケジュール"></a>連載スケジュール</h1><p>申し込み順で、テーマは寄稿者それぞれの興味がある内容です。</p><table><thead><tr><th>日程</th><th>メンバー</th><th>内容</th></tr></thead><tbody><tr><td>3/29</td><td>辻大志郎</td><td><a href="/articles/20210329/">ShellCheckでシェルスクリプトの品質を高めよう</a></td></tr><tr><td>3/30</td><td>真野隼記</td><td><a href="/articles/20210330/">CSVと親しくなるAWK術</a></td></tr><tr><td>3/31</td><td>中本光</td><td><a href="/articles/20210331/">今さらながらfindパイセンについてまとめてみた</a></td></tr><tr><td>4/01</td><td>市川諒</td><td>declareで配列と連想配列</td></tr><tr><td>4/02</td><td>澁川さん</td><td>シェルスクリプトでもGUI</td></tr><tr><td>4/05</td><td>尾崎さん</td><td>シェルスクリプトで2次元配列を使いたくなった時</td></tr><tr><td>4/06</td><td>岸本さん</td><td>Bashのシェル展開</td></tr></tbody></table><p>※記事の順が前後したり、取り扱う内容が変わることがありますが、ご了承ください。</p><p>どちらかと言うと基礎に分類されるな内容から、飛び道具的なネタまで様々です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>シェルスクリプト（といってもLinuxコマンドやsed, awkなど含みます）の連載を初めます。</p><p>ちょっとしたデータ処理やアプリケーションのランチャーとして利用されている方も多いと思います。そういった場面で少しでもお役に立てればと思っています。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><p>2021年は様々な技術テーマで連載を行っています。GCP、Go、Auth0、Zuora、サーバレス、CNCF、リモートワークなどドンドン記事が増えていますので、後で読み返したい人にもオススメです。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210112/index.html" data-iframely-url="//cdn.iframe.ly/P7BPs3C?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>今回の趣旨に若干反していますが、Goをスクリプト言語ぽく使おうという記事です。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200520/index.html" data-iframely-url="//cdn.iframe.ly/uIglCVI?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>人気のgrep術についてはこちらをどうぞ。<div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200611/index.html" data-iframely-url="//cdn.iframe.ly/kvSOFUK?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG真野です。&lt;/p&gt;
&lt;p&gt;タイトル通り、シェルスクリプトとLinuxコマンドをテーマにした連載を初めます。</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="Linux" scheme="https://future-architect.github.io/tags/Linux/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>CKA合格記</title>
    <link href="https://future-architect.github.io/articles/20210320/"/>
    <id>https://future-architect.github.io/articles/20210320/</id>
    <published>2021-03-19T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>今回、 <code>Certified Kubernetes Administrator</code> に合格したので、その際の体験を記載しておきます。</p><p><img src="/images/20210320/takuya-iwamoto-.jpg"></p><table>    <tr>        <td>受験場所</td>        <td>自宅</td>    </tr>    <tr>        <td>受験時期</td>        <td>2021年2月</td>    </tr>    <tr>        <td>費用</td>        <td>$300</td>    </tr>    <tr>        <td>試験時間</td>        <td>2時間</td>    </tr>    <tr>        <td>問題数</td>        <td>17問</td>    </tr>    <tr>        <td>合格ライン</td>        <td>66%</td>    </tr></table><h1 id="CKAとは"><a href="#CKAとは" class="headerlink" title="CKAとは"></a>CKAとは</h1><p>CKAとはCertified Kubernetes Administratorの略で、Kubernetes管理者の責任を遂行するスキル、知識、および能力をCKAが備えていることを保証する資格です。</p><blockquote><p><a href="https://training.linuxfoundation.org/ja/certification/certified-kubernetes-administrator-cka/">https://training.linuxfoundation.org/ja/certification/certified-kubernetes-administrator-cka/</a></p></blockquote><h2 id="勉強記録"><a href="#勉強記録" class="headerlink" title="勉強記録"></a>勉強記録</h2><h3 id="CKA対策前の状態"><a href="#CKA対策前の状態" class="headerlink" title="CKA対策前の状態"></a>CKA対策前の状態</h3><ul><li>Kubernetesは業務で少々運用経験あり。💪<ul><li>前職ではマネージドではなくkubeadmを使って手動構築したものとかを使っていました。</li><li>現職ではGKEを使っています。</li></ul></li></ul><h3 id="CKAに向けた勉強内容"><a href="#CKAに向けた勉強内容" class="headerlink" title="CKAに向けた勉強内容"></a>CKAに向けた勉強内容</h3><ul><li>Udemyの<a href="https://www.udemy.com/course/certified-kubernetes-administrator-with-practice-tests/">CKA対策コース</a>に含まれている模擬試験（3パターン）を2周しました。</li></ul><h2 id="試験を終えて"><a href="#試験を終えて" class="headerlink" title="試験を終えて"></a>試験を終えて</h2><h3 id="事前に準備していたこと・準備しておいたほうがいいと思うこと"><a href="#事前に準備していたこと・準備しておいたほうがいいと思うこと" class="headerlink" title="事前に準備していたこと・準備しておいたほうがいいと思うこと"></a>事前に準備していたこと・準備しておいたほうがいいと思うこと</h3><p>試験対策はされると思うので、それ以外のことを書きます。</p><h4 id="自室の片付け（自宅で受験する場合）"><a href="#自室の片付け（自宅で受験する場合）" class="headerlink" title="自室の片付け（自宅で受験する場合）"></a>自室の片付け（自宅で受験する場合）</h4><p>試験前にWebカメラで部屋の色々なところを見せるよう指示されます。机の下まで見られます。<br>机の上におけるものはPCと飲み物だけ、机の周辺には不正行為につながる物は置けないので、自室で受験される場合は片付けておかないと当日が辛いです。</p><h4 id="ブラウザの用意"><a href="#ブラウザの用意" class="headerlink" title="ブラウザの用意"></a>ブラウザの用意</h4><p>Google Chromeを使いますが、普段使いのブックマークや履歴が邪魔なのでCKA受験用の別プロファイルを作っていました。<br>試験中でもkubernetes.ioは見ることができるので、ブックマークバーに置いておくとすぐに開けます。その他、便利なブックマーク集も見かけたので置いておきましたが、正直なところ検索したほうが早かったのでこちらはあまり役に立ちませんでした。😥</p><h4 id="4Kモニタ-or-デュアルモニタ"><a href="#4Kモニタ-or-デュアルモニタ" class="headerlink" title="4Kモニタ or デュアルモニタ"></a>4Kモニタ or デュアルモニタ</h4><p>公式の説明にもある通り試験問題が表示されているタブとkubernetes.ioのタブを開けますが、ちゃんと別ウインドウとして置いておけます。それぞれのタブを横に並べて置いて受験すると捗ります。👍</p><h4 id="しっかり寝る"><a href="#しっかり寝る" class="headerlink" title="しっかり寝る"></a>しっかり寝る</h4><p>問題毎に頻繁にcontextを切り替えます。注意力が落ちた状態でcontextの切り替えを間違えて取り返しのつかない操作をしてしまうと悲しいことになるので一夜漬けは避けたほうがいいです。</p><h3 id="試験自体について"><a href="#試験自体について" class="headerlink" title="試験自体について"></a>試験自体について</h3><p>Udemyの模擬試験をスムーズに正解できれば問題なく合格できると思います。後の問題に進むほど難易度が下がっていったので、少し考えてわからない場合は早めに後回しにして先に進んだほうがいいのではないでしょうか。</p><p>時間配分的には、90分で全部解いて、10分使って見直し、20分余るくらいでした。（時間は正確な残り時間が表示されるのではなく、プログレスバーのみが表示されていたので大雑把なものです。）</p><h3 id="合格通知"><a href="#合格通知" class="headerlink" title="合格通知"></a>合格通知</h3><p>試験終了から36時間以内に通知が来ます。私の場合は34時間経過した頃にメールが来ました。</p><h2 id="学べたこと"><a href="#学べたこと" class="headerlink" title="学べたこと"></a>学べたこと</h2><ul><li>Kubernets運用に関する基本的な知識👨‍🎓</li><li>kubectlの使い倒し方💁‍♂️</li></ul><h2 id="良かったこと"><a href="#良かったこと" class="headerlink" title="良かったこと"></a>良かったこと</h2><ul><li>Kubernetesに関して自身の力を対外的に証明できるものができた。💪</li><li>CKSを受験できるようになった。👊</li></ul><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>難易度はそれほど高くないというのが正直な感想でした。<br>1度不合格になっても無料でもう1度受験できるので、気になったら腕試しに受験するのもいいかと思います。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200902/index.html" data-iframely-url="//cdn.iframe.ly/jlODoXh?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20190530/index.html" data-iframely-url="//cdn.iframe.ly/akGNr81"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;今回、 &lt;code&gt;Certified Kubernetes Administrator&lt;/code&gt; に合格したので、その</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="CKA" scheme="https://future-architect.github.io/tags/CKA/"/>
    
  </entry>
  
  <entry>
    <title>Anthosの話についていくための最低限の知識をまとめてみた</title>
    <link href="https://future-architect.github.io/articles/20210319/"/>
    <id>https://future-architect.github.io/articles/20210319/</id>
    <published>2021-03-18T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの越島と申します。</p><p><a href="/articles/20210307">GCP連載2021</a>第9弾です。今回技術ブログに初参加させていただきます。テーマはAnthosです。</p><p>Anthosは2019年にGoogleが発表した、「ハイブリッドクラウド・マルチクラウド環境に対応したアプリケーション管理プラットフォーム」です。発表から2年ほど経って、エンタープライズ向けのシステム構成を検討する際に名前が挙がることも増えてきている実感があります。そんなAnthosですが、構成要素が多くて中々全体像が掴みきれない人も多いのではないかと思います。</p><p>今回は、「Anthosって何だかよく分からん」という人が、Anthosの話題についていくための最低限の知識をまとめてみようと思います。この記事を読んだ方が、次どこかでAnthosの話題が出たときに、「あ〜はいはいAnthosね」とある程度自信を持って言えるようになることを目指しています。</p><h1 id="企業向けシステムとクラウドを取り巻く事情"><a href="#企業向けシステムとクラウドを取り巻く事情" class="headerlink" title="企業向けシステムとクラウドを取り巻く事情"></a>企業向けシステムとクラウドを取り巻く事情</h1><p>Anthosが徐々に注目を集めている理由と、Googleが注力している理由を知るために、まずは昨今の企業の情報システムとクラウドを取り巻く事情について見てみましょう。</p><p>Googleによって行われた調査によると、調査対象の73%の組織がクラウドを何らかの形で利用しているのに対して、実際にシステムの処理をクラウドに移しているのは10%にしか満たないとのことです。また、80%の組織がクラウドにシステムの処理を移した後、運用コスト等を理由にそれをオンプレ環境に移し戻しているとのことです。AWS、GCP、Azureなどのクラウドサービスの成長が著しいので、クラウド全盛の時代！という感じでクラウドへの移行がどんどん進んでいるイメージを持っている人も多いと思いますが、実態としてはオンプレへの需要も根強いというところでしょうか。</p><p>こういった事情から、ここ数年特に注目されているのが、クラウドとオンプレを上手く組み合わせる、「ハイブリッドクラウド」です。データの機密性に応じてオンプレ環境とクラウド環境を使い分けたり、高負荷になったときだけクラウド側に負荷分散をさせて定常的なコストを抑えながらシステムが落ちるリスクも減らしたり等、適材適所でシステムを組むことで得られるメリットは大きいです。また、複数のクラウドサービスを用いる「マルチクラウド」という考え方も、一つのサービスに依存する危険性を減らすという意味で注目されています。</p><p>しかし、ハイブリッドクラウドやマルチクラウドはシステム構成や運用が複雑になりがちという課題もあります。ハイブリッドクラウド・マルチクラウド構成のそのような課題を解決し、柔軟なシステム構成と統合的な管理を実現するためのGoogle流のソリューションがAnthosです。</p><h1 id="Anthosの構成要素"><a href="#Anthosの構成要素" class="headerlink" title="Anthosの構成要素"></a>Anthosの構成要素</h1><p><img src="/images/20210319/Anthos_Diagram_(3).png"></p><p>Anthosはいくつかの技術要素を組み合わせて、ハイブリッド/マルチクラウドを一元管理するためのプラットフォームを提供しています。ここでは、Anthosの構成要素・提供機能の中でも特に重要な以下の3つについて説明します。</p><ol><li>クラスタ管理（Anthos Clusters）</li><li>サービス管理（Anthos Service Mesh）</li><li>ポリシー管理（Anthos Config Management）</li></ol><h2 id="クラスタ管理-Anthos-Clusters"><a href="#クラスタ管理-Anthos-Clusters" class="headerlink" title="クラスタ管理 (Anthos Clusters)"></a>クラスタ管理 (Anthos Clusters)</h2><p>Anthosでは、オンプレ・クラウドを統合してクラスタ管理を行うための機能が提供されています。</p><h3 id="KubernetesとGKEのおさらい"><a href="#KubernetesとGKEのおさらい" class="headerlink" title="KubernetesとGKEのおさらい"></a>KubernetesとGKEのおさらい</h3><p>（KubernetesとGKEのおさらいは、関さんのGKE Autopilotを触ってみた記事でも行われていますが、この記事でも手短に説明します。）</p><p>Kubernetesはコンテナオーケストレーションのためのツールで、数百〜数千といった膨大な数のコンテナを管理、協調させるために使われます。コンテナは環境差異の影響を最小限にできたり、高速なアプリケーション配信・デプロイが可能な点が利点ですが、運用管理の観点からは様々な課題が存在しています。本番運用に耐えうる冗長性の確保や負荷分散、オートスケーリングなどを実現する管理レイヤを提供するのがコンテナオーケストレーションで、そのデファクトスタンダードとなっているのがKubernetesです。</p><p>Kubernetesのコンポーネントは、コンテナの実行ホストを提供する「ワーカーノード」と、それを管理する「マスターノード（コントロールプレーン）」の2つに分かれます。</p><p>GKE（Google Kubernetes Engine）は、GoogleがGCPのプロダクトの一つとして提供しているKubernetesのマネージドサービスです。GKEはユーザーが自前で構築、運用するのが特に難しい部分である「マスターノード」をGoogleが管理してくれたり、Kubernetesのアップデートがしやすい等のメリットがあります。</p><h3 id="Anthosが提供するもの（Anthos-Clusters）"><a href="#Anthosが提供するもの（Anthos-Clusters）" class="headerlink" title="Anthosが提供するもの（Anthos Clusters）"></a>Anthosが提供するもの（Anthos Clusters）</h3><p><img src="/images/20210319/Anthos_Diagram_(4).png"></p><p>Anthosでは、前述したGKEに加えて、GCP以外の環境で動くGKEベースのKubernetesサービスを提供することで、環境によらずにオンプレ・クラウドで統一的にコンテナを管理する仕組みを作っています。<br>GCP以外の環境で動くGKEベースのKubernetesサービスは、現在は、オンプレ環境用の<strong>Anthos Clusters for VMware(GKE On-Prem)<strong>、</strong>Anthos Clusters on bare metal</strong>と、AWS上で動く**Anthos Clusters for AWS(GKE on AWS)**が提供されています。これらを導入すると、全ての環境のKubernetesがGCPコンソール上から一元的に管理・操作できたり、他のGCPサービス（Cloud Build、Container Registry、Audit Loggingなど）との連携がしやすくなります。</p><p>※余談ですが、Anthosはまだ発展中の部分が多いため、サービスや機能の呼び名がちらほら変わることがあります。以前、<strong>GKE On-Prem</strong>が<strong>Anthos GKE</strong>という名前に変わったことがありましたが、今は<strong>Anthos Clusters for VMWare</strong>、<strong>Anthos Clusters on bare metal</strong>といった呼び方に変わっているようです。</p><h2 id="サービス管理（Anthos-Service-Mesh）"><a href="#サービス管理（Anthos-Service-Mesh）" class="headerlink" title="サービス管理（Anthos Service Mesh）"></a>サービス管理（Anthos Service Mesh）</h2><p>Anthosが提供する2つ目の機能がサービス管理です。</p><h3 id="サービスメッシュのおさらい"><a href="#サービスメッシュのおさらい" class="headerlink" title="サービスメッシュのおさらい"></a>サービスメッシュのおさらい</h3><p>サービスメッシュはマイクロサービスが抱える問題解決のための1つのアプローチです。<br>そもそも、マイクロサービスが抱える課題とは何でしょうか？</p><p><img src="/images/20210319/Anthos_Diagram-Page-2.png"></p><p>それぞれの機能が密結合している「モノリシック・アーキテクチャ」に比べて、アプリケーションが独立した複数のコンポーネントとして構築される「マイクロサービス・アーキテクチャ」では、各モジュールが疎結合になるため、スケール・冗長化が容易だったり改修の際に他機能におよぼす影響を低減できるメリットがあります。その反面、疎結合にした各モジュール間のやりとりで考慮すべきことが増えるという側面もあります。</p><p><img src="/images/20210319/Anthos_Diagram-Copy_of_Page-2_(3).png"></p><p>サービスメッシュは、こうしたマイクロサービス・アーキテクチャになることで必要となるネットワーク機能とビジネスロジックを分解して、アプリケーション開発者がビジネスロジックの開発に専念できるようにするのが狙いです。Kubernetesでは、主となるコンテナと共にそれを補助する役割を果たすコンテナを持つ構成（サイドカーパターン）を作ることでこれを実現するのが一般的になっています。サイドカープロキシを経由し、すべてのサービスがメッシュ状に接続されることから、「サービスメッシュ」と呼ばれています。</p><p><img src="/images/20210319/Anthos_Diagram-Copy_of_Copy_of_Page-2_(2).png"></p><h3 id="Anthosが提供するもの（Anthos-Service-Mesh）"><a href="#Anthosが提供するもの（Anthos-Service-Mesh）" class="headerlink" title="Anthosが提供するもの（Anthos Service Mesh）"></a>Anthosが提供するもの（Anthos Service Mesh）</h3><p><img src="/images/20210319/Anthos_Diagram-Copy_of_Page-1.png"></p><p>前述したサービスメッシュを実現するソフトウェアはいくつかありますが、最も有名かつAnthosで採用されているのがIstioです。Istioは、大きく分けて、サイドカーコンテナとして対象のPodに入るEnvoyプロキシから成るデータプレーンと、それらを管理するコントロールプレーンの2つに分類できます。Anthos Service Meshは、マネージド版のIstioで、コントロールプレーンがGoogle管理となります。</p><h2 id="ポリシー管理（Anthos-Config-Management）"><a href="#ポリシー管理（Anthos-Config-Management）" class="headerlink" title="ポリシー管理（Anthos Config Management）"></a>ポリシー管理（Anthos Config Management）</h2><p><img src="/images/20210319/Anthos_Diagram-Copy_of_Copy_of_Page-1.png"></p><p>最後に説明するAnthos Config Managementは、Kubernetesの構成やポリシー等を一箇所でまとめて管理し、オンプレ・クラウドにまたがる複数環境に適用するためのGitOpsスタイルのツールです。こういった管理面でも一つの場所で一言管理できる仕組みを提供することで、ハイブリッド/マルチクラウドの運用を簡易化するのが狙いです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Anthosの話についていくための最低限の知識をまとめてみました。これまでAnthosの前提知識が全くなかった方でも、「Anthos…?」という状態からは抜け出せたのではないでしょうか。</p><p>それぞれの技術要素の詳細や、Anthosの他の提供機能など、この記事ではカバーしきれなかった内容は勿論たくさんありますが、この記事を読んだ方が今後公式ドキュメントなどを見たときに「なんかスッと入ってくるぞ！」と思ってもらえたら嬉しいです。</p><p>次回は村田さんの <a href="/articles/20210322/">Migrate for Anthos を基礎から学ぶ</a> です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの越島と申します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20210307&quot;&gt;GCP連載20</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="Anthos" scheme="https://future-architect.github.io/tags/Anthos/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="Istio" scheme="https://future-architect.github.io/tags/Istio/"/>
    
  </entry>
  
  <entry>
    <title>GKE Autopilotを触ってみた</title>
    <link href="https://future-architect.github.io/articles/20210318/"/>
    <id>https://future-architect.github.io/articles/20210318/</id>
    <published>2021-03-17T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの関と申します。<a href="/articles/20210307">GCP連載2021</a>第8弾です。</p><p>今回技術ブログに初参加させていただきます。テーマは、2021年2月24日に公開されたGKE Autopilotです。<br>この記事は、Kubernetesに触ったことがない方でもわかるように、最も簡単な構成で試してみました。<br>Kubernetesを触ったことがない方にもみていただけるとありがたく思います。</p><h1 id="KubernetesとGKEのおさらい"><a href="#KubernetesとGKEのおさらい" class="headerlink" title="KubernetesとGKEのおさらい"></a>KubernetesとGKEのおさらい</h1><p>まずは、GKEとKubernetesについて簡単に導入をしたいと思います。</p><h2 id="Kubernetesとは？"><a href="#Kubernetesとは？" class="headerlink" title="Kubernetesとは？"></a>Kubernetesとは？</h2><p>Kubernetesはコンテナオーケストレーションのためのツールで、数百〜数千といった膨大な数のコンテナを管理、協調させることができます。</p><p>一つ以上のマシンを組み合わせたクラスタを構成し、それを単位とした分散システムとして動作します。論理的には”コントロールプレーン”と”ワーカーノード”という2つの構成要素からなります。</p><p>デプロイされたコンテナが動作するのはワーカーノード上です。そして、ワーカーノードは複数のマシンで構成することができます。このため、ノードの構成を工夫すれば、比較的簡単にコンテナが動作しているマシンを分散させることができ、サービスとしての信頼性や実行効率を上げることができます。<br>地理的に分散させれば、データセンターレベル障害に対しても耐性を持たせることも可能です。</p><p>Kubernetesへのデプロイは、一つ以上のコンテナをひとまとめにしたPodと呼ばれる単位で行われます。<br>なので、「複数のコンテナで一つのサービスとして動作させたい」といったニーズにも答えることができます。<br>基本的に、Kubernetesにのせるサービスの開発者は、Podの構成は自分たちで考えることになります。</p><h2 id="GKEとは？"><a href="#GKEとは？" class="headerlink" title="GKEとは？"></a>GKEとは？</h2><p>GKE(Google Kubernetes Engine)とは、GoogleがGCPのプロダクトの一つとして提供しているKubernetesのマネージドサービスです。</p><p>これまでのGKEは上記で説明したコントロールプレーンについて、Googleが管理してくれていました。<br>利用者は、ワーカノードの構成を考えてクラスタを作成することで、コントロールプレーンの管理をすることなくKubernetesを利用することができます。</p><h1 id="GKE-Autopilot"><a href="#GKE-Autopilot" class="headerlink" title="GKE Autopilot"></a>GKE Autopilot</h1><img src="/images/20210318/aircraft.jpg"><blockquote><p><a href="https://pixabay.com/ja/users/fotosforyou_rk-2368449/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1327820">Ralph Klein</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1327820">Pixabay</a>からの画像</p></blockquote><p>さて、ここからが本題です。</p><h2 id="GKE-Autopilotとは？"><a href="#GKE-Autopilotとは？" class="headerlink" title="GKE Autopilotとは？"></a>GKE Autopilotとは？</h2><p>GKE AutopilotはGKEの新しい運用モードです。</p><p>これまでのGKEとの大きな違いは、Googleがワーカーノードの基本的な管理を担ってくれるということです。</p><p>これまでは、ワーカーノードの管理は基本的に利用者側で行う必要がありました。ワーカーノードの管理では次に示すような様々なことを考える必要があります。それなり運用コストがあり、Kubernetesの利点を最大限に得るには構成を十分に練る必要がありました。</p><ul><li>用意するインスタンスのグレードは？</li><li>どれくらいの数のインスタンスを用意するか？</li><li>どのPodをどのノードにのせて、どのノードにのせるべきではないのか？</li><li>インスタンスの利用効率を上げるための最適な構成は？</li><li>利用者が複数のチームに分かれている場合の利用ルールは？</li></ul><p>Autopilotを使うことで、Googleがワーカーノードの管理、最適化を行ってくれるためこれらの考慮が不要になります。</p><p>利用者はインフラであるノードの構成をほとんど意識せずに「Podをどのように構成するか」という、より高レイヤーの問題に集中できるようになります。アプリ開発者としては嬉しいですね。</p><p>デプロイされたPodに割り当てるリソースは、Podの仕様と負荷をに基づきAutopilotが自動でプロビジョニング、スケーリングしてくれます。また、料金計算、SLAはPod単位で行われます。</p><p>その他の詳細情報については、公式ドキュメントが詳しいのでそちらを参照してください。</p><ul><li><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview?hl=ja">Autopilotの概要</a></li><li><a href="https://cloud.google.com/blog/ja/products/containers-kubernetes/introducing-gke-autopilot">GKE Autopilot のご紹介: マネージド Kubernetes における革命</a></li></ul><h1 id="GKE-Autopilotを触ってみる"><a href="#GKE-Autopilotを触ってみる" class="headerlink" title="GKE Autopilotを触ってみる"></a>GKE Autopilotを触ってみる</h1><p>公式でもチュートリアルがありますが、今回は初心者向けにもう少し簡単な構成を試してみようと思います。<br>Kuberntesを触ったことがない方でも、なんとなく雰囲気は掴めるはずです。</p><h2 id="クラスタの作成"><a href="#クラスタの作成" class="headerlink" title="クラスタの作成"></a>クラスタの作成</h2><p>クラスタを作りましょう。Autopilotの設定はクラスタを作る際に行えます。<br>新機能ですし、ここではGUIでどのように設定できるのかをみていきましょう。</p><p><img src="/images/20210318/image.png"><br>作成を押します。<br>ポップアップが出て、モードを選択できるようになっていました。<br>もちろん、Autopilotを選択します。<br><img src="/images/20210318/image_2.png"></p><p>ネットワーキングオプションなど、選択項目もありますが、今回はひとまず触るのが目的なため、デフォルトのまま変更しないことにします。<br>画面下方の”コマンドライン”のリンクを押すとgcloudコマンドを表示可能です。記録を残したりするのに使えそう。<br><img src="/images/20210318/image_3.png"></p><p>作成を押します。クラスタの作成が始まります。<br>5min以上待つ必要があります。<br><img src="/images/20210318/image_4.png"></p><h2 id="gcloudコマンドを導入する"><a href="#gcloudコマンドを導入する" class="headerlink" title="gcloudコマンドを導入する"></a>gcloudコマンドを導入する</h2><p><a href="https://cloud.google.com/sdk/docs/quickstart-macos?hl=ja">公式ドキュメント</a>に沿って導入しましょう。<br>この記事ではクラスタの情報を取得することだけに使うため、出番少なめです。</p><h2 id="kubectlコマンドを導入する"><a href="#kubectlコマンドを導入する" class="headerlink" title="kubectlコマンドを導入する"></a>kubectlコマンドを導入する</h2><p>macでHomebrewを使っているならコマンド一発です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectl</span><br></pre></td></tr></table></figure><p>Kubernetes公式のインストール方法は<a href="https://kubernetes.io/ja/docs/tasks/tools/install-kubectl/">こちら</a></p><h2 id="kubectlにクラスタの情報を読み込ませる"><a href="#kubectlにクラスタの情報を読み込ませる" class="headerlink" title="kubectlにクラスタの情報を読み込ませる"></a>kubectlにクラスタの情報を読み込ませる</h2><p>Kubernetesの操作はkubectlコマンドで行います。<br>そのためには、kubectlコマンドにどのクラスタを対象にするのか教えてあげる必要があります。</p><p>まずは、gcloudコマンドでログインします。<br><code>gcloud auth login</code>だとエラーが出たので、その表示に従い下記のコマンドを実行。<br>画面の指示に従いログイン完了まで行います。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud auth login --no-launch-browser</span><br></pre></td></tr></table></figure><p>GCPのコンソール に戻ります。<br>こちらの”接続”を選択します。<br><img src="/images/20210318/image_5.png"></p><p>コマンドが表示されるので、それをターミナルに貼り付けて実行します。<br><img src="/images/20210318/image_6.png"></p><p>今回の場合、こんな感じ。実行すると、kubectlコマンドの対象クラスタがこのクラスタに切り替わってくれます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud container clusters get-credentials autopilot-cluster-1 --region us-central1 --project high-tribute-307823</span><br></pre></td></tr></table></figure><h2 id="クラスタの情報をみてみる"><a href="#クラスタの情報をみてみる" class="headerlink" title="クラスタの情報をみてみる"></a>クラスタの情報をみてみる</h2><p>ひとまず、nodeの情報でもみてみましょう。<br>node1つが1つのVMであり、これまでのGKEだとGCEインスタンスを作成してノードとして利用していました。<br>nodeの情報をみるには<code>kubectl get node</code>コマンドを使います。<code>-o wide</code>すると詳細情報含めて表示してくれます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node -o wide</span><br></pre></td></tr></table></figure><p>実行結果<br>Autopilotでは利用者側で管理することはないですが、nodeの情報を取得するのは通常通りできるようです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME                                                 STATUS   ROLES    AGE   VERSION             INTERNAL-IP   EXTERNAL-IP    OS-IMAGE                             KERNEL-VERSION   CONTAINER-RUNTIME</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-80d33c8f-xbzz   Ready    &lt;none&gt;   44m   v1.18.12-gke.1210   10.128.0.4    34.71.253.60   Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-da3faeda-70qd   Ready    &lt;none&gt;   44m   v1.18.12-gke.1210   10.128.0.5    34.66.97.220   Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br></pre></td></tr></table></figure><h2 id="Depoloymentを作成してみる"><a href="#Depoloymentを作成してみる" class="headerlink" title="Depoloymentを作成してみる"></a>Depoloymentを作成してみる</h2><p>さて、ようやくですが、Pod(コンテナ)をデプロイしてみましょう。</p><p>今回はnginxを用いたPodをデプロイしてみます。</p><p>Kubernetesを実運用する際には、マニフェストファイルと呼ばれるファイルにリソースの情報を書き、それをもとにkubectlコマンドでクラスタにリソースを作成する流れになります。実運用に沿った形で、マニフェストを作成して、それを適用していきましょう。</p><p>まずはマニフェストファイルの作成です。自身の内部にデータを保持しないステートレスアプリケーションの場合、Deploymentリソースを使います。<br>下記のファイルを作成し、<code>deployment.yaml</code>というファイル名で保存します。</p><p>こちらは<a href="https://kubernetes.io/ja/docs/concepts/workloads/controllers/deployment/#creating-a-deployment">Kubernetesの公式</a>から拝借しています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.14.2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>軽く説明をしておきます。<br><code>.spec.template.spec</code>に書かれているのがPodの仕様です。nginxのコンテナが一つだけの構成ですね。80番ポートでlistenしています。<code>containers</code>と書かれているのは、一つのPodに複数のコンテナを含めることができるからです。同一Podのコンテナはlocalhost内で通信できます。今回は特に使わないですがPod内で通信する時に必要なマメ知識です。</p><p><code>.spec.replicas</code>の”3”は、「Podを3つデプロイする」という意味です。Podの冗長性を持たせるために通常は複数個にします。負荷分散や対障害性を持たせることができます。</p><p>次に、マニフェストファイルをもとに、Kubernetesリソースを作成します。<br><code>kubectl apply</code>コマンドを使います。<code>kubectl create</code>コマンドもありますが、マニフェストを更新した時などで想定外の挙動をすることがあるのでこちらが推奨です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -f &#123;path&#125;　で対象のマニフェストを指定する。</span><br><span class="line">kubectl apply -f deployment.yaml</span><br></pre></td></tr></table></figure><p>さて、Podが起動していることを確認しましょう。<br>GCPコンソールで、サイドメニューのワークロードを選択するとみれます。<br>エラーになっていますね、、、<br>あれこれ試しているうちに、ワーカーノードのリソースが小さくなってしまったのかもしれません。<br><img src="/images/20210318/image_7.png"><br>しばらく待ってみましょう。</p><p>しばらくして、「nodeどうなっているんだろう？」という疑問が湧いてきました。<br>おもむろに<code>kubectl get node</code>します。なんと、nodeが増えていました。<br>自動でリソースを拡充してくれているようです。これは期待できる。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NAME                                                 STATUS   ROLES    AGE     VERSION             INTERNAL-IP   EXTERNAL-IP     OS-IMAGE                             KERNEL-VERSION   CONTAINER-RUNTIME</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-80d33c8f-03kr   Ready    &lt;none&gt;   3m53s   v1.18.12-gke.1210   10.128.0.8    35.224.63.159   Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-80d33c8f-xbzz   Ready    &lt;none&gt;   69m     v1.18.12-gke.1210   10.128.0.4    34.71.253.60    Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-da3faeda-70qd   Ready    &lt;none&gt;   68m     v1.18.12-gke.1210   10.128.0.5    34.66.97.220    Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-da3faeda-7hlr   Ready    &lt;none&gt;   3m53s   v1.18.12-gke.1210   10.128.0.6    34.122.151.81   Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-da3faeda-ndl1   Ready    &lt;none&gt;   3m49s   v1.18.12-gke.1210   10.128.0.7    35.223.252.22   Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br></pre></td></tr></table></figure><p>少し待ったところ、、、<br><img src="/images/20210318/image_8.png"></p><p>できました！！！リソース作成成功です！！！</p><p>ちなみに、<code>kubectl get pod</code>コマンドでもPodの情報をみることができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><p>実行結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-69c549b4bb-4r8hs   1&#x2F;1     Running   0          26m</span><br><span class="line">nginx-deployment-69c549b4bb-68lww   1&#x2F;1     Running   0          26m</span><br><span class="line">nginx-deployment-69c549b4bb-fv7bx   1&#x2F;1     Running   0          26m</span><br></pre></td></tr></table></figure><h2 id="LoadBalancer-Serviceを作成してみる。"><a href="#LoadBalancer-Serviceを作成してみる。" class="headerlink" title="LoadBalancer Serviceを作成してみる。"></a>LoadBalancer Serviceを作成してみる。</h2><p>Podを作っただけだといまいち実感が沸かないという方のために、外部からアクセスできるようにしてみます。<br>LoadBalancer Serviceリソースを作ることで、GCPのロードバランサーを構成し、それ経由で外部からのアクセスを受け付けることができます。</p><p>まずはマニフェストファイルを作成します。<code>service.yaml</code>という名前で保存します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: sample-lb</span><br><span class="line">spec:</span><br><span class="line">  type: LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">    - name: &#39;http-port&#39;</span><br><span class="line">      protocol: &#39;TCP&#39;</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br></pre></td></tr></table></figure><p>こちらも軽く説明しておきます。<br><code>.spec.ports</code>でポートの設定をします。<code>targetPort</code>がコンテナがlistenしているポート番号、<code>port</code>はロードバランサがlistenするポート番号です。<code>.spec.selector</code>でどのPodに対してルーティングするかを指定します。<code>deployment.yaml</code>で指定したlabelの<code>app: nginx</code>を指定しています。</p><p>次に、マニフェストファイルをもとに、kubectlコマンドでリソースを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure><p>作成されたサービスの情報をみてみましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service</span><br></pre></td></tr></table></figure><p>実行結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME         TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP      10.8.128.1     &lt;none&gt;        443&#x2F;TCP        109m</span><br><span class="line">sample-lb    LoadBalancer   10.8.130.152   34.70.67.75   80:31465&#x2F;TCP   88s</span><br></pre></td></tr></table></figure><p>EXTERNAL-IPと書かれているのが、LoadBalancerのIPです。</p><p>LoadBalancer Serviceを作成すると、コントロールプレーンでそれを認識し、GCPのロードバランサを自動で作成してくれます。これはAutopilot限定の機能ではなく、これまでも可能だった機能です。</p><p>ロードバランサができていることをGCPコンソールで確認してみましょう。<br><img src="/images/20210318/image_9.png"></p><p>いかにも自動生成な名前でロードバランサが作成されているのがわかります。</p><p>さて、先ほどのEXTERNAL-IPにブラウザからアクセスしてみましょう。<br>もちろん、インターネットオーバーでのアクセスです。</p><p><img src="/images/20210318/image_10.png"></p><p>できました！！！</p><h2 id="リソースの削除"><a href="#リソースの削除" class="headerlink" title="リソースの削除"></a>リソースの削除</h2><p>ここからはお片付けです。</p><p>次のようにして、<code>kubectl delete</code>コマンドで削除できます。特に、LoadBalancer Serviceの削除をサボると自動生成されたLoadBalancerが削除されないままになるので注意が必要です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f deployment.yaml</span><br><span class="line">kubectl delete -f service.yaml</span><br></pre></td></tr></table></figure><h2 id="クラスタを破棄します"><a href="#クラスタを破棄します" class="headerlink" title="クラスタを破棄します"></a>クラスタを破棄します</h2><p>クラスタの再構成がなされるので、完了まで待ちましょう。<br>次のように、削除を選択し、しばらく待てばクラスタが削除できます。<br><img src="/images/20210318/image_11.png"></p><h2 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h2><p>これ以外にも、作成するPodの数を増やしてみたり、公式チュートリアルをやったり、いろいろ触ってみました。<br>リソースが足りなくなると、新しくNodeを確保して、ちょっと待つとPodがスケジューリングされる様子をみることができ、まさしく”Autopilot”という名にふさわしい挙動でした。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>公式の説明通り、ノードの設定を特にせずとも使え、一度作ったあとの使い方には大きな差がなく普通に使いやすいと感じました。</p><p>シンプルに、ワーカーノードのことを一切考えなくて良くなるのは魅力です。<br>インフラの最適化を自動でやってくれるので、リソースとしてのノードの過不足を気にせずにマニフェストに集中できるので、ワーカーノードの運用の難しさやそれに伴う導入障壁を感じているのであれば、恩恵を受けられると思います。</p><p>さて、明日は越島さんの<a href="/articles/20210319/">Anthosの話についていくための最低限の知識をまとめてみた</a>です。お楽しみに！</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20191025/index.html" data-iframely-url="//cdn.iframe.ly/GSevbOV?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの関と申します。&lt;a href=&quot;/articles/20210307&quot;&gt;GCP連載2021&lt;/a&gt;第8弾</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="GKE" scheme="https://future-architect.github.io/tags/GKE/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud BuildpacksとCloud Runで簡単コンテナアプリ開発</title>
    <link href="https://future-architect.github.io/articles/20210317/"/>
    <id>https://future-architect.github.io/articles/20210317/</id>
    <published>2021-03-16T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.661Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤太斉</a>です。<br><a href="/articles/20210307">GCP連載2021</a>第7弾です。</p><img src="/images/20210317/GCP_Containers_Kubernetes.png"><blockquote><p><a href="https://cloud.google.com/blog/ja/products/containers-kubernetes/google-cloud-now-supports-buildpacks">https://cloud.google.com/blog/ja/products/containers-kubernetes/google-cloud-now-supports-buildpacks</a> より</p></blockquote><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>みなさん、コンテナを利用してアプリケーション開発していますか？最近は新規開発するとなったら大体アーキテクチャを検討する段階で「アプリケーションをコンテナ化するか」と話題になっているのではないでしょうか？単純にコンテナをデプロイして利用するだけならまだしも、Kubernetesをベースとしてアプリケーションを動かすとなると、</p><ul><li>Kubernetesへの理解が追いつかない</li><li>運用まで乗せることが大変</li><li>そもそもDockerfile書くのもしんどい</li><li>etc…</li></ul><p>といった感じで採用までに立ちはだかる壁は大きく分厚いものかと思います。</p><p>また、既存のアプリをできるだけコストを抑えつつコンテナ化したい、なんていう声もありますよね？今はVMで稼働させているけど、とりあえずモダンなことしてみたい、などと言われることもあります。そんな方々への福音になるのがCloud Native Buildpacks（CN Buildpacks）です。</p><p>今回は、さらにGoogleでホストしているGoogle Cloud Buildpacks（GC Buildpacks）を利用しながらCloud Runへのデプロイを行って、簡単にアプリのコンテナ化をしていこうと思います。</p><p>CN Buildpacksについて実際に検証を行っている記事もありますので、こちらもご覧ください。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201002/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20201002%2F&key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="環境について"><a href="#環境について" class="headerlink" title="環境について"></a>環境について</h2><ul><li>Dockerがインストールされていること</li><li>CN Buildpacksがインストールされていること<ul><li>インストール方法は<a href="https://buildpacks.io/docs/tools/pack/">こちら</a>を参照</li></ul></li><li>Google Cloud SDKをインストールして、設定済みであること<ul><li>本記事執筆時点では <code>331.0.0</code>を利用しています</li></ul></li></ul><h2 id="Google-Cloud-Buildpacksについて"><a href="#Google-Cloud-Buildpacksについて" class="headerlink" title="Google Cloud Buildpacksについて"></a>Google Cloud Buildpacksについて</h2><p>冒頭でも触れていますが、今回、CNCFがホストしているCN BuildpacksとGoogleでホストしているGC Buildpacksがあります。GC BuildpacksはV3をベースとしています。今現在はCloud FunctionsやApp Engineの裏側のビルドに用いられるようになっている、GCPの中でサービスではないものの重要な部分を担っているものの一つです。</p><p>ベースのイメージにはUbuntu 18.04が採用されており、定期的にパッチを当てていたり脆弱性に対しても積極的にフォローしています。</p><p>Buildpacksにはアプリケーションの言語を検知する機能を有しており、言語ごと合わせてコンテナ化されていきます。現在GC Buildpacksでサポートしている言語は、</p><ul><li>Go</li><li>Java</li><li>Node.js</li><li>Python</li><li>.NET</li></ul><p>が利用できます。Cloud Run自体はRubyアプリなども乗せることはできますが、ここはGC Buildpacksの今後の発展に期待ですね。</p><h2 id="Cloud-Native-Buildpacksを使ってみる"><a href="#Cloud-Native-Buildpacksを使ってみる" class="headerlink" title="Cloud Native Buildpacksを使ってみる"></a>Cloud Native Buildpacksを使ってみる</h2><p>ここからは<a href="https://github.com/GoogleCloudPlatform/buildpack-samples">Google Cloud公式のチュートリアル</a>を使いながら実際にCloud Runを利用するところまで実行してみます。今回はnodeのアプリケーションを利用します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/GoogleCloudPlatform/buildpack-samples.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> buildpack-samples/sample-node</span></span><br></pre></td></tr></table></figure><p>Cloneまでできたらまずはローカルで動かしましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure><p><a href="http://localhost:3000/">http://localhost:3000</a> にアクセスして<code>hello, world</code>が表示されることを確認しましょう。まずはコンテナになる前に動くことがわかったので次はBuildpacksを使ってコンテナ化して動かしましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pack build --builder=gcr.io/buildpacks/builder node</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -ePORT=8080 -p8080:8080 node</span></span><br></pre></td></tr></table></figure><p>こちらでも同じように<code>hello, world</code>が表示されたかと思います。コンテナ化しても同じ動きを確認したので、次は実際にCloud Runを使って確認してみましょう。<br>Cloud Runにデプロイする時はContainer Registryからデプロイを行いますが、ローカル環境からのデプロイ方法として2種類あります。</p><ol><li>Cloud BuildでコンテナをビルドしてContainer Registryへ保存する</li><li>ローカルでビルドしてContainer Registryへpushする。</li></ol><p><img src="/images/20210317/builcpack.png"></p><p>１の方がローカルを汚さずに済んだり、ローカルPCの能力に依存せずにビルドできるので、今回は前者で進めます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud alpha builds submit --pack image=gcr.io/[project-id]/node</span></span><br></pre></td></tr></table></figure><p>この１行で自動的にビルドから保存まで実行してくれます。この時、引数に<code>--pack</code>をつけることでBuildpacksを使うことを指定しています。ここまでくればあとはデプロイコマンドを１行実行するだけです。</p><h3 id="Cloud-Runへのデプロイを行う"><a href="#Cloud-Runへのデプロイを行う" class="headerlink" title="Cloud Runへのデプロイを行う"></a>Cloud Runへのデプロイを行う</h3><p>ここでCloud Runにデプロイを行います。とはいえ、コマンド1行で実行完了するので、あっという間です。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud run deploy --image=gcr.io/[project-id]/node --platform managed</span></span><br></pre></td></tr></table></figure><p>このコマンドを実行すると、</p><ul><li>サービス名</li><li>リージョン</li><li>認証されていないものを許可するか</li></ul><p>と選択肢に出てくるので各々お好みのものを選択しましょう。<br>これでデプロイが終わればコンソールからCloud Runの画面に遷移して、URLをクリックすると、ローカルで見ていた画面と同じく<code>hello, world</code>が出力されているかと思います。<br>これで、ローカル、コンテナアプリ、Cloud Runの３つの状態で同じアプリを利用できました。</p><p><img src="/images/20210317/image.png"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Cloud Runが発表された2019年のGoogle Cloud Nextはかなり盛り上がったことを今でも覚えていて、その時はなんとかして知ろう、早く使おう、みたいな気持ちがあったことを思い出しました。それから2年が経とうとしていますが、IaaS畑が中心だった私はコンテナをガッツリ触ることなくここまで来ました。</p><p>クラウドリフト＆シフトという言葉がよく使われるようになってきて、今後もその流れは続くと思います。そのときに、ただオンプレミス環境からIaaSレベルであげるのではなく、コンテナ化するという選択肢が取れるだけで、アプリケーションのリフトする選択肢が大きく増えるのではないでしょうか？</p><p>基本的にどんなアプリでもコンテナにしてくれるBuildpacks、そして簡単にコンテナを実行してくれるCloud Runから、「<strong>考えるな、感じろ！！</strong>」な精神を垣間見た気がしました。使って楽しかったプロダクトたちなのでもっと広めて行こうと思います。</p><p>明日は、関さんの<a href="/articles/20210318/">GKE Autopilotを触ってみた</a>です。何がくるかお楽しみに！！</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210307/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20210307%2F&key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIGの&lt;a href=&quot;https://twitter.com/kaedemalu&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;br&gt;&lt;a href=&quot;/articles/20210307&quot;&gt;GCP連載2021&lt;/a&gt;第7弾です。&lt;/p&gt;
&lt;img src=&quot;/images/2</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="CloudRun" scheme="https://future-architect.github.io/tags/CloudRun/"/>
    
    <category term="コンテナデプロイ" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="Buildpacks" scheme="https://future-architect.github.io/tags/Buildpacks/"/>
    
  </entry>
  
  <entry>
    <title>Firebaseで取得したログをBigQueryに連携してユーザー操作をトラッキングする</title>
    <link href="https://future-architect.github.io/articles/20210316/"/>
    <id>https://future-architect.github.io/articles/20210316/</id>
    <published>2021-03-15T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20210307/">GCP連載2021</a>も折り返しの6本目です！</p><p>陽光麗らかなある春の日、ITコンサルタントのあなたの元に、ユーザーからの問い合わせが入りました。</p><p>「すみません、モバイルアプリの調子が悪いので確認してもらえませんか。」<br>「承知しました。起きている問題と、何時頃どのような操作をされたか教えていただけますか。」<br>「問題は~~で、いつもと同じ操作をしていたのですが…。」<br>「なるほど…。」</p><p>こんな時、特定ユーザーのアプリ操作をトラッキングできれば…と思うかもしれません。</p><p>今回は、そんな悩みをFirebaseとBigQueryの合わせ技で解決していきます。</p><h1 id="Firebaseとは"><a href="#Firebaseとは" class="headerlink" title="Firebaseとは"></a>Firebaseとは</h1><p><strong>mBaaS (mobile Backend as a Service)</strong> を提供するGCPサービスのひとつです。<br>より一般的なBaaSのモバイルアプリ向けのイメージで、開発者はログ送信やDBアクセスなどのインフラ設定を気にする必要なく、アプリのコアな機能の開発に専念できます。</p><p>一口にFirebaseと言っても様々な機能の集合体で構成されており、NoSQL DBを提供するCloud Firestore、クライアントアプリへのメッセージ送信機能であるFirebase Cloud Messagingなどプロダクトの数は18に及んでいます(2021.03.12現在)。<br>本ブログでもFirebaseのサービスの一つであるCrashlyticsを紹介していました。</p><ul><li><a href="https://future-architect.github.io/articles/20200330/">Serverless連載4: Firebase CrashlyticsでAndroidアプリのエラーログをさくっと収集する</a></li></ul><p>各機能はFirebase Consoleを介してGUIで閲覧、操作することが可能です。<br>今回はその中の<code>Google Analytics for Firebase</code>を用いてAndroidアプリの操作ログを取得していきます。</p><h1 id="Google-Analytics-for-Firebaseとは"><a href="#Google-Analytics-for-Firebaseとは" class="headerlink" title="Google Analytics for Firebaseとは"></a>Google Analytics for Firebaseとは</h1><p><img src="/images/20210316/image.png"></p><p>実態はGoogleのサービス<code>Google Analytics</code> (GA)をFirebaseで利用できるようにしたものです。<br><a href="https://firebase.google.com/docs/analytics/get-started?hl=ja&platform=android">公式ドキュメント</a>では以下のように紹介されています。</p><blockquote><p>Google アナリティクスは、ウェブ、iOS アプリ、Android アプリがどのように使用されているかを把握するのに役立ちます。<br>この SDK は主に次の 2 種類の情報を記録します。</p></blockquote><ul><li>イベント: ユーザーの操作、システム イベント、エラーなど、アプリで起こっていること。</li><li>ユーザー プロパティ: 言語や地域など、ユーザー層を示す属性。自由に定義できます。</li></ul><p>任意の情報をカスタム設定して取得できますが、<strong>一部の値は特にコードの記述なく<a href="https://support.google.com/firebase/answer/9234069">自動的に収集されます。</a></strong><br>位置情報やアプリを使用しているデバイス情報などサクッと取れるのは非常に便利です。</p><p>取得した情報はログとしてFirebase Console上で閲覧できます。<br>その際、ユーザー操作のトラッキングの観点で以下の課題が生じます。</p><ul><li>取得したログが<strong>サマリーされて</strong>表示されてしまう。</li><li>時系列のトラッキング機能も過去<strong>1時間分ほどしかない、かつ抜粋された状態</strong>で表示される。</li></ul><p>これらが課題となるのは、今回がメジャーな利用方法からややずれる使い方のためかもしれません。<br>王道のマーケティング利用する場合はおそらくFirebase Consoleで抜群の使いやすさを発揮してくれるのだと思います。<br>サマリー前の全てのログはFirebaseが持っているため、今回はそのデータをBigQueryへ連携させて、<strong>抜け漏れなくログを追いかける</strong>ことを目指します。</p><p>BigQueryの他にも、Crashlytics, FCM, Firebase Remote ConfigなどとGAを連携させることができます。<br>ちなみに、BigQueryへのデータ連携は昨年のGCP連載でも話題になっていましたね。</p><ul><li><a href="https://future-architect.github.io/articles/20200210/">GCP連載#4 Cloud Life Sciencesを見てみた</a></li><li><a href="https://future-architect.github.io/articles/20200214/">GCP連載#7 GCPのData Transfer Serviceを使って簡単にS3からBigQueryにデータ転送をしてみる</a></li></ul><h1 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h1><p>以下の手順を踏んで実際に手を動かしながら、Androidアプリにおけるユーザー操作のトラッキングを実現していきます。</p><ol><li>Firebaseでログを取得する</li><li>BigQueryへログを連携する</li><li>BigQueryでクエリを実行する</li></ol><p>※そもそもの、アプリへのFirebaseの追加は<a href="https://firebase.google.com/docs/android/setup?hl=en">公式ドキュメント</a>を参照いただければと思います。</p><h2 id="1-Firebaseでログを取得する"><a href="#1-Firebaseでログを取得する" class="headerlink" title="1. Firebaseでログを取得する"></a>1. Firebaseでログを取得する</h2><p>Androidアプリのソースに必要なコードを追記していきます。<br>まず、Activityごとの下準備は以下の2点です。</p><ul><li><code>FirebaseAnalytics</code>のオブジェクトを宣言</li><li><code>onCreate</code>メソッド内で初期化</li></ul><figure class="highlight java"><figcaption><span>test_activity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...(省略)...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.firebase.analytics.FirebaseAnalytics;  <span class="comment">// 1. まずFirebaseAnalyticsクラスをimport</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...(省略)...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> FirebaseAnalytics mFirebaseAnalytics;   <span class="comment">// 1. FirebaseAnalyticsのオブジェクトを宣言</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...(省略)...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...(省略)...</span></span><br><span class="line"></span><br><span class="line">        mFirebaseAnalytics = FirebaseAnalytics.getInstance(<span class="keyword">this</span>);  <span class="comment">// 2. onCreateメソッド内で初期化</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ここまでで、Firebaseが自動的に収集するログはすでに取得できるようになっています。<br>続いて、以下の記述を入れることで、ソースコード上の任意の位置でのログを取得できるようになります。</p><figure class="highlight java"><figcaption><span>test_activity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ログを取得したい任意の箇所で</span></span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putString(param1, value1);</span><br><span class="line">bundle.putString(param2, value2);</span><br><span class="line">mFirebaseAnalytics.logEvent(event_name, bundle);</span><br></pre></td></tr></table></figure><p><code>bundle</code> で送りたいログの型を作り、Firebaseの<code>logEvent</code>メソッドでログを送信しています。<br>Firebaseで扱うログはオブジェクト形式をしており、上記ログを送信すると以下のようなイメージのJSONが送られます。</p><figure class="highlight json"><figcaption><span>送信されるログのイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;event_name&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;param1&quot;</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;param2&quot;</span>: <span class="string">&quot;value2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※実際にはデフォルトのパラメータも含まれるため、paramの数はもっと多いです。またevent_nameと並列で、timestampなど諸々の値もデフォルトで送信されます。</p><p>paramやevent_nameは任意に指定することもできますし、Firebaseが用意している定数クラスを用いることもできます。</p><ul><li><a href="https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Param?hl=ja">Paramの一覧</a></li><li><a href="https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Event?hl=ja">Eventの一覧</a></li></ul><p>また、bundleに対しても <code>putXxx</code>のメソッドを利用することで、String型以外にも様々な型のvalueを指定可能です。<br>非常に自由度高くログの送信ができるとわかりましたが、**使用できるeventの数や値の長さには<a href="https://support.google.com/firebase/answer/9237506?hl=en">上限がある</a>**ため、注意が必要です。</p><p>ここまでで、アプリのログはFirebase Console上で閲覧できるようになっています。<br>サマリー情報で十分な場合はこれで十分強さを発揮するでしょう。。<br>今回のようにFirebaseログの生データにアクセスしたい場合はさらにBigQueryとの連携を進めます。</p><p>以下は、Firebase Consoleの一例です。使用状況をグラフ化して確認できたり(上)、event_nameごとの発生回数がサマリ表示されていたりします(下)。<br><img src="/images/20210316/image_2.png"><br><img src="/images/20210316/image_3.png"></p><h2 id="2-BigQueryへログを連携する"><a href="#2-BigQueryへログを連携する" class="headerlink" title="2. BigQueryへログを連携する"></a>2. BigQueryへログを連携する</h2><p><a href="https://support.google.com/firebase/answer/6318765?hl=en">こちらのドキュメント</a>を参照しつつ、設定します。<br>全てFirebase Consoleからの操作で可能です。</p><p>Firebase Consoleの設定画面から、<code>Integrations</code>タブを選択します。<br>そこで表示される、各種連携可能なカードから、<code>BigQuery</code>を選択します。<br>※参考画像ではすでに連携済みのため「Manage」となっていますが、初回設定の場合は「Link」と表示されます。<br><img src="/images/20210316/image_4.png"></p><p>Linkが開始されると、「どのサービスのデータをBigQueryに連携するか」を選択できるようになります。<br>今回は<code>Google Analytics</code>にチェックを入れます。<br>他にも、CrashlyticsやCloud Messagingなどのデータも連携できるようです。<br><img src="/images/20210316/image_5.png"></p><p>ここまでの設定で、BigQueryへFirebaseのデータが連携されます。<br>GCP Consoleから確認してみると、プロジェクトフォルダの配下に、<code>analytics_XXXX</code>というフォルダ名でFirebaseからのデータが連携されています。(XXXXはGAのProperty ID です)<br>当日のデータは<code>events_intraday_YYYYMMDD</code>というテーブル名称で格納されています。翌日になると <code>events_YYYYMMDD</code>の名称に変化します。<br><img src="/images/20210316/image_6.png"></p><p>「プレビュー」タブを参照すると、1つの<code>event_name</code>に紐付く<code>params</code>のkey/valueペアの形でデータが格納されていることが確認できます。<br>ただしこのままではFirebaseデフォルトのログと入り混じって見にくい、かつ複数のユーザーのログが混じっている、のでクエリを作成して可読性を上げます。</p><h2 id="3-BigQueryでクエリを実行する"><a href="#3-BigQueryでクエリを実行する" class="headerlink" title="3. BigQueryでクエリを実行する"></a>3. BigQueryでクエリを実行する</h2><p>可読性を向上させてトラッキングを実現するため、クエリを作成します。</p><p>純粋なRDBではないBigQueryでは、ネストされたparamsをそのままWHERE句に指定することができません。</p><p>そこで、<code>UNNEST</code>でネスト構造を解除してWHERE句でフィルタリングしたのちに<code>ARRAY</code>で再びネスト構造に戻す、という手順を踏んでいます。この処理は全てSELECT句の中で実施しています。<br>今回は、ネストされた<code>event_params.key</code>と<code>event_params.value</code>、<code>user_properties</code>に対して、不要なパラメータを除外しています。</p><p>また、WHERE句にトラッキングしたいユーザーIDを設定して、特定ユーザーの操作のみ出力させます。<br><code>event_name: user_engagement</code> はFirebaseデフォルトのevent_nameで、今回は不要のため除外しています。</p><p>以下に作成したクエリを記載しています。<br>※洗練されたクエリではないですが、ユーザー操作のトラッキングが目的のため、ご容赦いただきたいです。</p><figure class="highlight sql"><figcaption><span>実行するクエリ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> tracking_operation <span class="keyword">AS</span> (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">            event_timestamp,</span><br><span class="line">            FORMAT_TIMESTAMP(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, TIMESTAMP_SECONDS(<span class="keyword">cast</span>(<span class="keyword">floor</span>(event_timestamp/<span class="number">1000000</span>) <span class="keyword">as</span> int64)), <span class="string">&#x27;Asia/Tokyo&#x27;</span>) <span class="keyword">as</span> event_date,</span><br><span class="line">            event_name,</span><br><span class="line">            <span class="built_in">ARRAY</span>(</span><br><span class="line">                  <span class="keyword">SELECT</span></span><br><span class="line">                        ep.key <span class="keyword">as</span> <span class="keyword">key</span></span><br><span class="line">                  <span class="keyword">FROM</span></span><br><span class="line">                        <span class="keyword">UNNEST</span>(event_params) <span class="keyword">as</span> ep</span><br><span class="line">                  <span class="keyword">WHERE</span></span><br><span class="line">                        ep.key <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;ga_session_id&#x27;</span>, <span class="string">&#x27;ga_session_number&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;firebase_event_origin&#x27;</span>, <span class="string">&#x27;session_engaged&#x27;</span>,<span class="string">&#x27;engaged_session_event&#x27;</span>, <span class="string">&#x27;firebase_screen_id&#x27;</span>, <span class="string">&#x27;firebase_previous_id&#x27;</span>, <span class="string">&#x27;entrances&#x27;</span>, <span class="string">&#x27;engaged_session_event&#x27;</span>, <span class="string">&#x27;engagement_time_msec&#x27;</span>)</span><br><span class="line">            ) <span class="keyword">as</span> event_params_key,</span><br><span class="line">            <span class="built_in">ARRAY</span>(</span><br><span class="line">                  <span class="keyword">SELECT</span></span><br><span class="line">                        ep.value.string_value <span class="keyword">as</span> <span class="keyword">value</span></span><br><span class="line">                  <span class="keyword">FROM</span></span><br><span class="line">                        <span class="keyword">UNNEST</span>(event_params) <span class="keyword">as</span> ep</span><br><span class="line">                  <span class="keyword">WHERE</span></span><br><span class="line">                        ep.key <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;ga_session_id&#x27;</span>, <span class="string">&#x27;ga_session_number&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;firebase_event_origin&#x27;</span>, <span class="string">&#x27;session_engaged&#x27;</span>,<span class="string">&#x27;engaged_session_event&#x27;</span>, <span class="string">&#x27;firebase_screen_id&#x27;</span>, <span class="string">&#x27;firebase_previous_id&#x27;</span>, <span class="string">&#x27;entrances&#x27;</span>, <span class="string">&#x27;engaged_session_event&#x27;</span>, <span class="string">&#x27;engagement_time_msec&#x27;</span>) <span class="keyword">and</span> ep.value.string_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">            ) <span class="keyword">as</span> event_params_value,</span><br><span class="line">            (</span><br><span class="line">                  <span class="keyword">SELECT</span></span><br><span class="line">                        up.value.string_value <span class="keyword">as</span> user_id</span><br><span class="line">                  <span class="keyword">FROM</span></span><br><span class="line">                        <span class="keyword">UNNEST</span>(user_properties) <span class="keyword">as</span> up</span><br><span class="line">                  <span class="keyword">WHERE</span> up.key = <span class="string">&#x27;user_id&#x27;</span></span><br><span class="line">            ) <span class="keyword">as</span> user_id,</span><br><span class="line">            device.mobile_os_hardware_model <span class="keyword">as</span> mobile_os_hardware_model,</span><br><span class="line">            device.operating_system <span class="keyword">as</span> operating_system,</span><br><span class="line">            device.operating_system_version <span class="keyword">as</span> operating_system_version,</span><br><span class="line">            geo.country <span class="keyword">as</span> country,</span><br><span class="line">            geo.region <span class="keyword">as</span> region,</span><br><span class="line">            geo.city <span class="keyword">as</span> city,</span><br><span class="line">            app_info.version <span class="keyword">as</span> app_version</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">            <span class="string">`analytics_XXXX.events_202004*`</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">      *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">      tracking_operation</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">      event_name != <span class="string">&#x27;user_engagement&#x27;</span> <span class="keyword">and</span> user_id = <span class="string">&#x27;トラッキングしたいユーザーIDを入力&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">      event_timestamp</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>このクエリを実行すると、特定のuser_idをもつユーザーの2020年4月の操作ログを時系列で確認できます．</p><p>その結果が以下の写真です。不要なeventやparamsを除外したので、可読性もだいぶ向上しました。WHERE句にevent_timestampの条件を加えることで、さらに細かく時刻で絞り込むことも可能です。</p><p>ちなみに、<code>screen_view</code>は自動的に取得されるevent_nameで、その他は1.の手順でカスタムで設定しています。</p><p>この<code>screen_view</code>は自動で遷移前後の画面名を取得してくれるので、非常に便利です。</p><p>端末の戻るボタンが押されて遷移した場合も検知してくれます。<br><img src="/images/20210316/image_7.png"></p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>FirebaseとBigQueryの合わせ技で、モバイルアプリのユーザー操作のトラッキングを実現しました。<br>これで障害やユーザー問い合わせにも安心して対応できます。<br>もちろん、トラッキング対象を別のパラメータ(例えば特定の商品データなど)に変えて応用もできるかと思います。</p><p>最終的に<a href="https://datastudio.google.com/overview">DataStudio</a>など連携させればGUIで綺麗に表示させることができそうです。<br>複数のサービスを組み合わせれば痒いところにも手が届く、それがGCPの魅力のひとつかもしれません。</p><p>明日はTechBlogの編集もされている伊藤さんの<a href="/articles/20210317/">Google Cloud BuildpacksとCloud Runで簡単コンテナアプリ開発</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載2021&lt;/a&gt;も折り返しの6本目です！&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="BigQuery" scheme="https://future-architect.github.io/tags/BigQuery/"/>
    
    <category term="Firebase" scheme="https://future-architect.github.io/tags/Firebase/"/>
    
    <category term="Android" scheme="https://future-architect.github.io/tags/Android/"/>
    
    <category term="GoogleAnalytics" scheme="https://future-architect.github.io/tags/GoogleAnalytics/"/>
    
  </entry>
  
  <entry>
    <title>Cloud Build を知ってみよう</title>
    <link href="https://future-architect.github.io/articles/20210315/"/>
    <id>https://future-architect.github.io/articles/20210315/</id>
    <published>2021-03-14T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、ゆるふわエンジニアの前原です。</p><p><a href="/articles/20210307/">GCP連載2021</a>です！</p><p>本記事では、ビルド周りをよしなにやってくれるCloud Build について紹介したいと思います。</p><h1 id="CI-CD-ツールの選択"><a href="#CI-CD-ツールの選択" class="headerlink" title="CI/CD ツールの選択"></a>CI/CD ツールの選択</h1><p>CI/CD 環境作るときに何を使うか迷う時があると思うんですよね（これに限らずですが）</p><p>世の中には、たくさんのツールが溢れてます。</p><p>例えば、以下のようなものがあります。</p><ul><li>自前で用意する系<ul><li>GitLab（クラウド版もある）</li><li>Jenkins</li></ul></li><li>クラウド系<ul><li>Cloud Build</li><li>CircleCI</li><li>Travis CI</li><li>Code Build</li><li>GitHub</li></ul></li></ul><p>要件や取り巻く環境によって選択は変わってくるかと思います。</p><p>とはいえ、GCP やAWS を利用している場合は、それらのサービスを利用した方が楽な面が多いです。</p><p>例えば、GCP を利用していてCircleCI などの他サービスを利用する場合は、サービスアカウントの発行や、キーの管理などが必要となります。個人的には、ノックアウト要件がない限りは、クラウドサービスに寄せて良いと思っています。</p><h2 id="Cloud-Build-とは"><a href="#Cloud-Build-とは" class="headerlink" title="Cloud Build とは"></a>Cloud Build とは</h2><p>Cloud Build は、GCP が提供するビルドを行うサービスです。</p><p>様々なサービスからソースコードを取得し、ビルドを行い、アーティファクトを生成します。</p><h1 id="構成について"><a href="#構成について" class="headerlink" title="構成について"></a>構成について</h1><p>以下の図のようにCloud Build は、ソース、ビルド、デプロイから構成されています。<br>ソースやデプロイは、例として記載しています。</p><p><img src="/images/20210315/image.png"></p><h2 id="ソース"><a href="#ソース" class="headerlink" title="ソース"></a>ソース</h2><p>例えば、ソースは、以下から選択することが可能です。</p><p>基本的にGitHub 連携が良いと思います。また、Cloud Source Repositories をメインのソース管理として利用することも可能ですが、機能面で劣るので利用ケースは少ないと思っています。</p><ul><li>GitHub（プルリクやPush をトリガに起動可能）</li><li>Bitbucket + Cloud Source Repositories</li><li>GitHub + Cloud Source Repositories</li></ul><h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><p>ビルドは、ユーザが自由にビルドステップを作成して実行することも可能ですし、Cloud Build やコミュニティが提供するビルドステップを利用することができます。</p><ul><li><a href="https://github.com/GoogleCloudPlatform/cloud-builders">Cloud Build が提供するビルドステップ</a></li><li><a href="https://github.com/GoogleCloudPlatform/cloud-builders-community">コミュニティが提供するビルドステップ</a></li></ul><p>ビルドの構成ファイルは、YAML またはJSON で記述することができます。</p><h3 id="ビルドステップ"><a href="#ビルドステップ" class="headerlink" title="ビルドステップ"></a>ビルドステップ</h3><p>ビルドステップは、Cloud Build に実行させたいアクションを定義します。<br>構成ファイル名は、デフォルト<code>cloudbuild.yaml</code>ですが、ビルドコマンド実行時にオプション<code>-config</code>で任意のファイル名を指定することも可能です。<br>以下にサンプルを記載します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;gcr.io/cloud-builders/kubectl&#x27;</span></span><br><span class="line">  <span class="attr">args:</span> [<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="string">&#x27;deployment/mydepl&#x27;</span>, <span class="string">&#x27;my-image=gcr.io/my-project/myimage&#x27;</span>]</span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;CLOUDSDK_COMPUTE_ZONE=us-east4-b&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;CLOUDSDK_CONTAINER_CLUSTER=my-cluster&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;gcr.io/cloud-builders/docker&#x27;</span></span><br><span class="line">  <span class="attr">args:</span> [<span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;gcr.io/my-project-id/myimage&#x27;</span>, <span class="string">&#x27;.&#x27;</span>]</span><br></pre></td></tr></table></figure><p>ざっくりですが、解説します。</p><ul><li>steps: ビルドステップの定義</li><li>name: クラウドビルダーの指定（Docker..etc）</li><li>args: ビルダーに渡す引数を指定</li><li>env: 環境変数の指定</li></ul><p>他のフィールドを知りたい場合は、<a href="https://cloud.google.com/build/docs/build-config?hl=ja#structure_of_a_build_config_file">ビルド構成ファイルの構造</a>を参照してください。</p><h3 id="高速ビルドの実現"><a href="#高速ビルドの実現" class="headerlink" title="高速ビルドの実現"></a>高速ビルドの実現</h3><p>Cloud Build は、キャッシュ機能を備えています。<br>ちなみに、AWS のCode Build にもローカルキャッシュ、S3 キャッシュがありますね。</p><p>Cloud Build は、高速にビルドするためにKaniko キャッシュの機能を備えています。<br>Kaniko を利用することで、2回目以降のビルドを高速に行うことができます。<br><a href="https://github.com/GoogleContainerTools/kaniko">Kaniko</a> は、コンテナイメージをビルドするGoogle のOSS です。</p><p>以下のようにビルド構成ファイルにKaniko を組み込むことができます。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;gcr.io/kaniko-project/executor:latest&#x27;</span></span><br><span class="line">  <span class="attr">args:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">--destination=gcr.io/$PROJECT_ID/image</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">--cache=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">--cache-ttl=XXh</span></span><br></pre></td></tr></table></figure><ul><li>–cache=true: Kaniko キャッシュの有効化</li><li>–cache-ttl=XXh: キャッシュの有効期間の設定</li></ul><h3 id="Docker-Hub-のRate-Limit-の回避"><a href="#Docker-Hub-のRate-Limit-の回避" class="headerlink" title="Docker Hub のRate Limit の回避"></a>Docker Hub のRate Limit の回避</h3><p>ビルドする際に、Docker Hub のRate Limit に引っかかったことはありますか？</p><p>私は、AWS のCode Build を利用していた時に引っかかっていました。理由は、無料アカウントで利用していたため、IP アドレスに基づいて制限されていました。<br>Code Build が利用しているIP = 不特定多数の人が利用している結果、Rate Limit が発生していました。</p><p>結局、Code Build を<a href="https://docs.aws.amazon.com/ja_jp/codebuild/latest/userguide/vpc-support.html">VPC 接続</a>させ、NAT Gateway 経由でアクセスすることで回避しました。他にも有料 Docker Hub アカウントにする方法やECR を利用する方法もあります。</p><p>脱線してしまいましたが、Cloud Build は、VPC 接続させることはできないため、以下の２つが対応策となります。</p><ul><li>有料のDocker Hub にアップグレード</li><li>Container Registry への切り替え</li></ul><h4 id="有料のDocker-Hub-にアップグレード"><a href="#有料のDocker-Hub-にアップグレード" class="headerlink" title="有料のDocker Hub にアップグレード"></a>有料のDocker Hub にアップグレード</h4><p>主なやることをザックリ記載すると以下です。</p><ul><li>Docker Hub アカウントのアップグレード対応</li><li>Docker Hub にログインするための認証情報をSecret Manger に保存</li><li>ビルド構成ファイルにDocker Hub へのログインステップを記述</li></ul><h4 id="Container-Registry-への切り替え"><a href="#Container-Registry-への切り替え" class="headerlink" title="Container Registry への切り替え"></a>Container Registry への切り替え</h4><p>以下を参考にDocker Hub からContainer Registry に移行する必要があります。<br>個人的には、移行コストなどや運用コストを考えるとDocker Hub のアップグレードが良いと思ってます。</p><ul><li><a href="https://cloud.google.com/container-registry/docs/migrate-external-containers">サードパーティ レジストリからのコンテナの移行</a></li></ul><p>Rate Limit に困っている場合は、どちらがベストな対応かを検討し、導入してみてはいかがでしょうか。</p><h2 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h2><p>Cloud Build は、以下のサービスに対してデプロイを行うことができます。</p><ul><li><a href="https://cloud.google.com/build/docs/deploying-builds/deploy-gke?hl=ja">GKE</a></li><li><a href="https://cloud.google.com/build/docs/deploying-builds/deploy-cloud-run?hl=ja">Cloud Run</a></li><li><a href="https://cloud.google.com/build/docs/deploying-builds/deploy-appengine?hl=ja">App Engin</a></li><li><a href="https://cloud.google.com/build/docs/deploying-builds/deploy-functions?hl=ja">Cloud Functions</a></li><li><a href="https://cloud.google.com/build/docs/deploying-builds/deploy-firebase?hl=ja">Firebase</a></li></ul><h2 id="構成パターン"><a href="#構成パターン" class="headerlink" title="構成パターン"></a>構成パターン</h2><p>ここではGKE へのデプロイをベースに以下の２つのパターンを例に紹介します。</p><ul><li>CIOps パターン</li><li>GitOpsパターン</li></ul><h3 id="CIOps-パターン"><a href="#CIOps-パターン" class="headerlink" title="CIOps パターン"></a>CIOps パターン</h3><p>Cloud Build のトリガは、GitHub トリガによる自動実行で行われます。</p><p>Cloud Build は、GitHub からソースを取得し、ビルドを実行し、コンテナイメージをContainer Registry にPush します。GKE をデプロイする際は、Cloud Build からkubectl でデプロイします。</p><p><img src="/images/20210315/image_2.png"></p><h3 id="GitOps-パターン"><a href="#GitOps-パターン" class="headerlink" title="GitOps パターン"></a>GitOps パターン</h3><p>CIOps と同様にビルドを実行し、Container Registry にコンテナイメージにPush するところは同様の流れです。アプリのリポジトリの変更を検知して、マニフェストリポジトリにプルリクを行います。</p><p>Argo CD は、ポーリングもしくはWebhook により、反映を行います。</p><p><img src="/images/20210315/image_3.png"></p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>いかがでしたでしょうか？</p><p>Cloud Build を用いてどういった構成をとれるのかをイメージすることができたら幸いです。</p><p>明日は、松井さんによる <a href="/articles/20210316/">Firebaseで取得したログをBigQueryに連携してユーザー操作をトラッキングする</a> です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、ゆるふわエンジニアの前原です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP</summary>
      
    
    
    
    <category term="CI/CD" scheme="https://future-architect.github.io/categories/CI-CD/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GitOps" scheme="https://future-architect.github.io/tags/GitOps/"/>
    
    <category term="CI/CD" scheme="https://future-architect.github.io/tags/CI-CD/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="CloudBuild" scheme="https://future-architect.github.io/tags/CloudBuild/"/>
    
  </entry>
  
  <entry>
    <title>テックイベント2021＠フューチャーのご紹介</title>
    <link href="https://future-architect.github.io/articles/20210314/"/>
    <id>https://future-architect.github.io/articles/20210314/</id>
    <published>2021-03-13T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。この記事ではフューチャーのIT技術系の勉強会についてご紹介します。</p><h2 id="2021年の計画"><a href="#2021年の計画" class="headerlink" title="2021年の計画"></a>2021年の計画</h2><p><img src="/images/20210314/space-1951858_1280.png"></p><blockquote><p><a href="https://pixabay.com/ja/users/onuromeryavuz-4180408/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1951858">Onur Ömer Yavuz</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1951858">Pixabay</a>からの画像</p></blockquote><p>2021年に<strong>Future Tech Night</strong>という勉強会を15回開催する予定です。2021/03/16時点だと#6回開催しました。</p><p>大体2週間前に各イベントは<a href="https://future.connpass.com/">connpass</a>経由で募集します。気になる方はグループメンバーになって頂けると嬉しいです。</p><table><thead><tr><th>No</th><th>日付</th><th>テーマ</th><th>登壇者(確定分)</th></tr></thead><tbody><tr><td>#06</td><td>01/29(金)</td><td><a href="https://future.connpass.com/event/201478/">GCP×インフラ構築編</a></td><td>西田、村田</td></tr><tr><td>#07</td><td>03/19(金)</td><td><a href="https://future.connpass.com/event/206387/">Go勉強会1</a></td><td>澁川、多賀、真野</td></tr><tr><td>#08</td><td>04/09(金)</td><td>E2Eテスト/cypress勉強会</td><td>木戸、澁川、枇榔</td></tr><tr><td>#09</td><td>04/16(金)</td><td>AWS勉強会1</td><td>木村、久保</td></tr><tr><td>#10</td><td>05/14(金)</td><td>Java勉強会</td><td>藤野、菅原</td></tr><tr><td>#11</td><td>05/28(金)</td><td>AI勉強会1</td><td>貞光、玉木</td></tr><tr><td>#12</td><td>06/11(金)</td><td>Vue.js勉強会</td><td></td></tr><tr><td>#13</td><td>06/25(金)</td><td>（調整中）</td><td></td></tr><tr><td>#14</td><td>07/16(金)</td><td>Auth0勉強会</td><td>先山、亀井</td></tr><tr><td>#15</td><td>08/20(金)</td><td>GCP勉強会</td><td></td></tr><tr><td>#16</td><td>08/27(金)</td><td>データベース勉強会</td><td>杉江</td></tr><tr><td>#17</td><td>09/17(金)</td><td>開発プロセス勉強会</td><td></td></tr><tr><td>#18</td><td>10/15(金)</td><td>AWS勉強会2</td><td></td></tr><tr><td>#19</td><td>10/29(金)</td><td>AI勉強会2</td><td></td></tr><tr><td>#20</td><td>11/19(金)</td><td>Go勉強会2</td><td></td></tr></tbody></table><blockquote><p>※実際の勉強会名はもっと楽しげなものに変わると思います！基本的に日程は変えないですが何かしらの都合で突然変更になる場合もゼロではないです。その場合はご了承ください。</p></blockquote><p>2021年以降はFUTURE LIVEなどの会社説明会よりのイベントはconnpassでの募集はしない方向になり、ほぼIT技術系のイベント告知専門という運用になったので、ノイズが気になる方も安心してご参加できると思います。（まだ試行錯誤しているので一部新卒採用イベントなどを入る可能性もあるかもです。）</p><h2 id="Future-Tech-Nightについて"><a href="#Future-Tech-Nightについて" class="headerlink" title="Future Tech Nightについて"></a>Future Tech Nightについて</h2><p>当社はフューチャーという会社名ですので、何かに付けてイベントの先頭にFutureをつける文化があります。例えば社内で月次に開かれる全社朝会はFuture Morning Sessionで、略してFMS（エフエムエス）って呼ばれています。外部の勉強会も Future Tech Night と自然に名付けられました。</p><p>Future Tech Night の運営ポリシーですが、フューチャーが業務を通して得た技術的な知見やナレッジを包み隠さず共有する、ということをテーマにしています。フューチャーは特定の技術に特化しているわけではなく、中立の立場から様々なプロダクトを広く利用しています。そういった知見を公開していこうという趣旨です。</p><p>今のところはWeb技術寄りが多いですが、Strategic AI Group（SAIG）というデータサイエンスな部隊も2回の開催予定です。Vulsが有名なセキュリティ部隊もいますし、インダストリーに特化した事業部もあります。他にもマネジメントノウハウに絡めた勉強会ができないかといった、有益で面白そうなテーマを常に社内でディスカッションしています。</p><h2 id="過去に開催された様子"><a href="#過去に開催された様子" class="headerlink" title="過去に開催された様子"></a>過去に開催された様子</h2><p>いくつか技術ブログでも開催レポートを公開しています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210128/index.html" data-iframely-url="//cdn.iframe.ly/Bk93w9x?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200925/index.html" data-iframely-url="//cdn.iframe.ly/YpB7olh?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201228/index.html" data-iframely-url="//cdn.iframe.ly/RWuBJfe?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210306/index.html" data-iframely-url="//cdn.iframe.ly/eMzQMKM?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>今後も開催レポートを通して、当日の様子や頂いた質問をシェアしていきますので、残念ながら都合が付かない場合も安心できるように運営していきます。笑　（公開コンテンツは表現が丸められていたり非公開にする場合もあるので、参加がおすすめではありますす！）</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>フューチャーは技術ブログやOSS活動以外にも、勉強会を開催して少しでも役立てる情報を発信したいと考えています。</p><p>他にもコーディング規約（記事ではJava8ですが、Java11まである。SQL版もあります）も公開しています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20160902/index.html" data-iframely-url="//cdn.iframe.ly/BeHBTMM"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>たまに社内外から、無料で公開してよいの！？って驚かれる「仕事で使えるTypeScript」という教育コンテンツも公開しています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20190612/index.html" data-iframely-url="//cdn.iframe.ly/gC0UEQX?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>SNSなどで反応頂けるとメンテナンスしているメンバーの励みになりますので、利用報告は歓迎しています。</p><p>それでは良い勉強会ライフを！</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><p>ブログ連載の年間計画も公開されています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210112/index.html" data-iframely-url="//cdn.iframe.ly/P7BPs3C?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG真野です。この記事ではフューチャーのIT技術系の勉強会についてご紹介します。&lt;/p&gt;
&lt;h2 id=&quot;2021年の計画</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>CloudNative Days Spring 2021 ONLINEに登壇しました</title>
    <link href="https://future-architect.github.io/articles/20210313/"/>
    <id>https://future-architect.github.io/articles/20210313/</id>
    <published>2021-03-12T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.560Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの伊藤太斉です。<br>今回は先日開催されました、<a href="https://event.cloudnativedays.jp/cndo2021">CloudNative Days Spring 2021 ONLINE</a>に登壇しましたので、その内容について書いていきます。</p><p><img src="/images/20210313/CNDO2021@2x.png"></p><h2 id="CloudNative-Daysについて"><a href="#CloudNative-Daysについて" class="headerlink" title="CloudNative Daysについて"></a>CloudNative Daysについて</h2><p>はじめにイベントの概要について簡単に説明します。<br><a href="https://event.cloudnativedays.jp/cndt2020">前回の公式</a>から引用すると、</p><blockquote><p>CloudNative Days はコミュニティ、企業、技術者が一堂に会し、クラウドネイティブムーブメントを牽引することを目的としたテックカンファレンスです。<br>最新の活用事例や先進的なアーキテクチャを学べるのはもちろん、ナレッジの共有やディスカッションの場を通じて登壇者と参加者、参加者同士の繋がりを深め、初心者から熟練者までが共に成長できる機会を提供します。</p></blockquote><p>とあるように、モダンアーキテクチャを学ぶ場であったり、これからインフラのモダナイゼーションを行う方にとってディスカッションの場として提供するテックカンファレンスです。<br>前回は登壇者は自宅、配信会場どちらかを選んで登壇しましたが、今回は全員事前に動画を提出し、配信会場にはオペレーションを行う一部の人のみとしています。またプラットフォームも独自で開発しているものであり、オンラインカンファレンスとしては初の試みの多い内容になっています。<br>今回は、前回に引き続き私は運営として参加しております。</p><h2 id="登壇内容について"><a href="#登壇内容について" class="headerlink" title="登壇内容について"></a>登壇内容について</h2><p>登壇資料はこちらになります。</p><script async class="speakerdeck-embed" data-id="f9d34e658df049bd992ba11c212a7a5f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>今回は、CNCFのプロジェクトの中から<a href="https://www.openpolicyagent.org/">Open Policy Agent</a>（以下、OPA）について話しました。OPAは、CNCFのプロジェクトの中で一番最近Graduatedプロジェクトになりました。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">[NEWS] Cloud Native Computing Foundation Announces Open Policy Agent Graduation 🤗<a href="https://t.co/36yiIhCYvc">https://t.co/36yiIhCYvc</a> <a href="https://t.co/EquYZUqBbu">pic.twitter.com/EquYZUqBbu</a></p>&mdash; CNCF (@CloudNativeFdn) <a href="https://twitter.com/CloudNativeFdn/status/1357373603633848322?ref_src=twsrc%5Etfw">February 4, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>そんな勢いのあるOPAを、今回はTerraformのコード規約として使えないかということで検証という意味でも使ってみた話です。</p><h3 id="Open-Policy-Agentについて"><a href="#Open-Policy-Agentについて" class="headerlink" title="Open Policy Agentについて"></a>Open Policy Agentについて</h3><p>簡単にOPAについて説明します。<br>OPAはPolicy as Code（PaC）を実現するツールです。CNCFでホストされているのでKubernetesにしか利用できない、というわけではなく、JSON、YAMLなど様々なデータを扱ってポリシーで管理することができます。<br>記述する際にはRegoという独自言語で実装します。サンプルなどは後述します。</p><h3 id="Infrastructure-as-Codeの横展開で起こりうる話"><a href="#Infrastructure-as-Codeの横展開で起こりうる話" class="headerlink" title="Infrastructure as Codeの横展開で起こりうる話"></a>Infrastructure as Codeの横展開で起こりうる話</h3><p>Infrastructure as Code（以下、IaC）を実践することで以下のメリットがあるかと思います。</p><ul><li>パラメーターシートとして利用できる</li><li>Gitなどで管理されることで常に最新の状態が分かる</li><li>可搬性があるので、プロジェクトを跨いで同じコードを利用できる</li><li>HCLも含めて比較的読みやすい言語で書かれているため入門しやすい</li></ul><p>特に可搬性については大きなメリットであり、新しく社内でプロジェクトが立ち上がったときにはコードの共有を行うことで、開発の高速化も望めます。</p><p><img src="/images/20210313/CNDO_1.png"></p><p>このようにメリットの大きいIaCですが、浸透が進むにあたり、デメリットも生じます。</p><ul><li>コードの流派が異なる</li><li>コードの規約が異なる</li></ul><p>といったように上記の２つは少ないようにみえて、エンジニアの負荷を大きくあげる原因になりかねないデメリットです。将来的に普及が進んだ後にこれらを統制することはかなり大変になるのでないかと懸念されました。そのため、社内で共通の言語としての規約、が必要だと感じました。そのためのPaCのツールとしてOPAを利用することを検討しました。</p><h3 id="OPAを実際に利用してみる"><a href="#OPAを実際に利用してみる" class="headerlink" title="OPAを実際に利用してみる"></a>OPAを実際に利用してみる</h3><p>今回はTerraformのリソース名を<code>-</code>区切りではなく<code>_</code>区切りで書くことを強制したいと思います。<br>利用するTerraformとRegoは以下になります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region &#x3D; &quot;us-west-1&quot;</span><br><span class="line">&#125;</span><br><span class="line">resource &quot;aws_instance&quot; &quot;web_instance&quot; &#123;</span><br><span class="line">  instance_type &#x3D; &quot;t2.micro&quot;</span><br><span class="line">  ami &#x3D; &quot;ami-09b4b74c&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_instance&quot; &quot;mail-instance&quot; &#123;</span><br><span class="line">  instance_type &#x3D; &quot;t2.micro&quot;</span><br><span class="line">  ami &#x3D; &quot;ami-09b4b74c&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line">lint[msg] &#123;</span><br><span class="line">    resource := input.resource_changes[index]</span><br><span class="line">    resource.<span class="keyword">type</span> == <span class="string">&quot;aws_instance&quot;</span></span><br><span class="line"></span><br><span class="line">    result := count(split(resource.name, <span class="string">&quot;-&quot;</span>)) == <span class="number">1</span></span><br><span class="line">    msg := sprintf(<span class="string">&quot;Test result of %v.%v is %v&quot;</span>, [resource.<span class="keyword">type</span>, resource.name, result])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraformの中身は単純なインスタンスを2台作成するもの、Regoの中身は、<code>-</code>が含まれる場合にはsplitして、その総計を数えるようにしています。総計が1（分かれていない状態）であればtrue、総計が2以上であればfalseを返します。<br>ここからは実際にコマンドを実行しながら確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Plan結果をバイナリに吐き出す</span></span><br><span class="line">$ tf plan -out tfplan.binary</span><br><span class="line"><span class="comment"># バイナリをJSONに吐き出して、jqコマンドで整形する</span></span><br><span class="line">$ tf show -json tfplan.binary | jq . &gt; tfplan.json</span><br><span class="line"><span class="comment"># Regoを使ってJSONを評価する</span></span><br><span class="line">$ opa <span class="built_in">eval</span> --format json --data test.rego --input tfplan.json <span class="string">&quot;data.test.lint&quot;</span></span><br></pre></td></tr></table></figure><p>最後のコマンドの実行結果は以下になります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;result&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;expressions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;Test result of aws_instance.mail-instance is false&quot;</span>, # ハイフン区切りは<span class="literal">false</span>になる</span><br><span class="line">            <span class="string">&quot;Test result of aws_instance.web_instance is true&quot;</span> # アンダースコア区切りは<span class="literal">true</span>になる</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;data.test.lint&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;location&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;row&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;col&quot;</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想定通り、mailインスタンスについてはfalsem、webインスタンスについてはtrueになりました。</p><h3 id="実際に触ってみた感触とこれから"><a href="#実際に触ってみた感触とこれから" class="headerlink" title="実際に触ってみた感触とこれから"></a>実際に触ってみた感触とこれから</h3><p>今回、OPAを触ってみて、得意なところ、できないところがなんとなくですが見えてきました。</p><h4 id="出来ること"><a href="#出来ること" class="headerlink" title="出来ること"></a>出来ること</h4><p>JSONで出力できる範囲ならかなり強力に押さえ込むことができることを感じました。例えば、</p><ul><li>インスタンスに対しては特定のタグを必須とする</li><li>リージョンは東京リージョンのみに制限する</li><li>インスタンスタイプは<code>t3.medium</code>のみに制限する</li></ul><p>などの制限は可能なので、プロジェクトごと制約をかけたい場合に有用です。</p><h4 id="出来ないこと"><a href="#出来ないこと" class="headerlink" title="出来ないこと"></a>出来ないこと</h4><p>一方出来ないことも見えてきました。</p><ul><li>Terraformのソースコードチェック<ul><li>countの配置箇所</li><li>Linterのような動かし方</li></ul></li></ul><p>結局JSONなどのデータを扱うため、元のTerraformのソースコード自体をみることはありません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>OPAはリソースを使用する範囲を決めるという文脈ではかなり強力に制限してくれることを感じました。一方、Terraformそのままのコードを制限するためにはLinterなどの別のツールが必要だと思いました。単一のツールではなくて、複合的に利用していくことで、出来上がるリソース、記述するコードの両方を整えられると考えました。<br>社内のIaCの平和を守るために、まだ考え始めた段階ですが、規約は作って浸透させるまでが仕事だと思うので、まだまだ先は長いです。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200930/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200930&amp;key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200928/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200928&amp;key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIGの伊藤太斉です。&lt;br&gt;今回は先日開催されました、&lt;a href=&quot;https://event.cloudnativedays.jp/cndo2021&quot;&gt;CloudNative Days Spring 2021 ONLINE&lt;/a&gt;に登壇しましたので、その</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
    <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
    <category term="CloudNative" scheme="https://future-architect.github.io/tags/CloudNative/"/>
    
    <category term="OpenPolicyAgent" scheme="https://future-architect.github.io/tags/OpenPolicyAgent/"/>
    
  </entry>
  
  <entry>
    <title>Text-to-Speechを試してみる</title>
    <link href="https://future-architect.github.io/articles/20210312/"/>
    <id>https://future-architect.github.io/articles/20210312/</id>
    <published>2021-03-11T15:00:00.000Z</published>
    <updated>2021-03-27T08:18:44.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの村瀬です。</p><p><a href="/articles/20200218/">昨年</a>に続き<a href="/articles/20210307/">GCP連載</a>企画の参加です。私個人としてはGCPはほとんど利用したことがないので、せっかくだから面白そうなことを試してみようと思い、今回はText-to-Speechについて試してみることにしました。</p><h1 id="Text-to-Speechとは"><a href="#Text-to-Speechとは" class="headerlink" title="Text-to-Speechとは"></a>Text-to-Speechとは</h1><img src="/images/20210312/Cloud_Text-to-Speech.png"><blockquote><p><a href="https://cloud.google.com/blog/ja/products/ai-machine-learning/cloud-text-to-speech-expands-its-number-of-voices-now-covering-33-languages-and-variants">https://cloud.google.com/blog/ja/products/ai-machine-learning/cloud-text-to-speech-expands-its-number-of-voices-now-covering-33-languages-and-variants</a> より</p></blockquote><p>読んで字のごとくですがテキストを自然な音声に変換するサービスで、40以上の言語と方言で220種類以上の音声から選択できます。話す速度や声の高さも変更することができます。</p><p>本記事ではAPIを利用して音声ファイルを作成するところまでを紹介しますが、APIを利用せずどんなものか確認するのであれば<a href="https://cloud.google.com/text-to-speech/?hl=ja#section-2">このページ</a>の <strong>Text-to-Speech を試してみましょう</strong>  のところで確認できます。あなたがロボットでなければ。</p><h1 id="料金"><a href="#料金" class="headerlink" title="料金"></a>料金</h1><p>無料枠があり、最初の400万文字/月は無料。それを越した場合でも100万文字あたり$4.00でお安いですね。<br>詳細は<a href="https://cloud.google.com/text-to-speech/pricing?hl=ja">公式ページ</a>を参照ください。</p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><p><a href="https://cloud.google.com/text-to-speech/docs/quickstart-protocol?hl=ja">クイックスタート: コマンドラインの使用のページ</a>を参考に準備をします。</p><h2 id="1-新しいプロジェクトの作成"><a href="#1-新しいプロジェクトの作成" class="headerlink" title="1.新しいプロジェクトの作成"></a>1.新しいプロジェクトの作成</h2><img src="/images/20210312/00create_prj.png" class="img-middle-size" style="border:solid 1px #000000"><p>適当にプロジェクト名を入力して作成します。</p><h2 id="2-Cloud-Text-to-Speech-APIの有効化"><a href="#2-Cloud-Text-to-Speech-APIの有効化" class="headerlink" title="2.Cloud Text-to-Speech APIの有効化"></a>2.Cloud Text-to-Speech APIの有効化</h2><p><a href="https://cloud.google.com/text-to-speech/docs/quickstart-protocol?hl=ja">クイックスタート ページ内</a>のAPIを有効にするボタン]をクリックして有効にします。</p><img src="/images/20210312/01pre.png" class="img-middle-size" style="border:solid 1px #000000"><h2 id="3-認証の設定"><a href="#3-認証の設定" class="headerlink" title="3.認証の設定"></a>3.認証の設定</h2><p>必要なロールはありませんということなのでロールを選択せず作成します。</p><img src="/images/20210312/02pre.png" class="img-large-size" style="border:solid 1px #000000"><img src="/images/20210312/03pre.png" class="img-large-size" style="border:solid 1px #000000"><img src="/images/20210312/04pre.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/05pre.png" class="img-middle-size" style="border:solid 1px #000000"><p>JSONファイルがダウンロードされるので適切な場所に保存します。のちにこのJSONファイルのパスを環境変数に設定することになります。</p><h2 id="4-Cloud-SDK-をインストールして初期化します。"><a href="#4-Cloud-SDK-をインストールして初期化します。" class="headerlink" title="4.Cloud SDK をインストールして初期化します。"></a>4.Cloud SDK をインストールして初期化します。</h2><p><a href="https://cloud.google.com/sdk/docs/install?hl=ja">このページ</a>に則りインストールします。</p><img src="/images/20210312/05sdk.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/06sdk.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/07sdk.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/08sdk.png" class="img-middle-size" style="border:solid 1px #000000"><p>環境にもよると思いますが割と時間かかります。コーヒーでも飲んで待ちましょう。</p><p><img src="/images/20210312/09sdk.png"></p><p>コマンドプロンプトが起動するのでYを入力します。</p><p><img src="/images/20210312/13sdk.png"></p><p><img src="/images/20210312/14sdk.png"></p><p>ブラウザが起動するのでアクセスを許可します。</p><img src="/images/20210312/15sdk.png" style="border:solid 1px #000000"><p>無事に完了しました。</p><h2 id="5-環境変数の設定"><a href="#5-環境変数の設定" class="headerlink" title="5.環境変数の設定"></a>5.環境変数の設定</h2><p>他のブログをみるとLinux,macOSの記事が多かったので今回はあえてWindowsのPowerShellでやってみます。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:GOOGLE_APPLICATION_CREDENTIALS</span>=<span class="string">&quot;C:\xxx\Text-to-Speech-123456789012.json&quot;</span></span><br></pre></td></tr></table></figure><h1 id="テキストから音声へ変換"><a href="#テキストから音声へ変換" class="headerlink" title="テキストから音声へ変換"></a>テキストから音声へ変換</h1><h2 id="ファイルの用意"><a href="#ファイルの用意" class="headerlink" title="ファイルの用意"></a>ファイルの用意</h2><p>音声に変換したい文字列や必要となる情報を記載したJSONファイルを用意します。ここではクイックスタートに習ってrequest.jsonとします。日本語の音声を確認したかったので以下の様にしました。</p><figure class="highlight json"><figcaption><span>request.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;input&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>:<span class="string">&quot;経営とITをデザインするフューチャーアーキテクト&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;voice&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;languageCode&quot;</span>:<span class="string">&quot;ja-JP&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;ja-JP-Standard-C&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ssmlGender&quot;</span>:<span class="string">&quot;MALE&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;audioConfig&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;audioEncoding&quot;</span>:<span class="string">&quot;MP3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設定可能な言語、音声は<a href="https://cloud.google.com/text-to-speech/docs/voices?hl=ja">こちら</a>を参照</p><h2 id="APIの実行"><a href="#APIの実行" class="headerlink" title="APIの実行"></a>APIの実行</h2><p>クイックスタートに載ってるコマンドを実行します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cred</span> = gcloud auth application<span class="literal">-default</span> print<span class="literal">-access</span><span class="literal">-token</span></span><br><span class="line"><span class="variable">$headers</span> = <span class="selector-tag">@</span>&#123; <span class="string">&quot;Authorization&quot;</span> = <span class="string">&quot;Bearer <span class="variable">$cred</span>&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> `</span><br><span class="line">  <span class="literal">-Method</span> POST `</span><br><span class="line">  <span class="literal">-Headers</span> <span class="variable">$headers</span> `</span><br><span class="line">  <span class="literal">-ContentType</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span> `</span><br><span class="line">  <span class="literal">-InFile</span> request.json `</span><br><span class="line">  <span class="literal">-Uri</span> <span class="string">&quot;https://texttospeech.googleapis.com/v1/text:synthesize&quot;</span> | <span class="built_in">Select-Object</span> <span class="literal">-Expand</span> Content</span><br></pre></td></tr></table></figure><p>実行すると以下のエラーが発生しました。</p><p><img src="/images/20210312/16err.png"></p><p><a href="https://qiita.com/ponsuke0531/items/4629626a3e84bcd9398f">このページ</a>を参考にしてエラーを解消します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned <span class="literal">-Scope</span> <span class="keyword">Process</span></span><br></pre></td></tr></table></figure><p>再度実行すると無事mp3が返却…されません。<br>代わりにmp3を生成する基となるbase64を含むJSONが返却されます。</p><p>mp3が返却されないのはAPIの応答は全てJSONに統一されているからでしょうか？<br>なお、返却されたJSONの中のbase64の文字列をのちに利用するので応答をファイル出力しておくと便利です。</p><h2 id="base64からmp3への変換"><a href="#base64からmp3への変換" class="headerlink" title="base64からmp3への変換"></a>base64からmp3への変換</h2><p>JSONからaudioContentの値を抜き出してファイル(base64.txt)に保存します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;NExAAQyMGEAEpMTESE+SE5ANiIShEJiQnQNsNoEC9RqUkR48hbOz0pScWztOrVZkyAwcbMmAtFg2aBypBqg0A+b1hwy79PSYfpNP&#x2F;9BsyqPp4vaY45jkmOOY5Jjhlm&#x2F;&#x2F;NExA8SWKoMAMvQTMu2EYFwLghioqxp9DzQNBDEMAUBoDQPBQ93&#x2F;d3REIMQIBkPsKAgD4XB8P&#x2F;XW+QL4w4c&#x2F;&#x2F;7&#x2F;&#x2F;&#x2F;+r&#x2F;8MVPM7NMRAzURAQgDK4ecpYZTFUqxVirtYi&#x2F;&#x2F;NExBgYKNIUAVoYAdZcl&#x2F;Y1LrWX4cs0oZmOdytbJSVYzCoGnGcd2p&#x2F;lrqbpXfFQAPdsY3HYb4&#x2F;Pmbp9fzlX7Yvr++78FtaQ&#x2F;p3d+5BHa8vdpytb5er8feb8LGqKfxqF&#x2F;&#x2F;NExAoVEdqsAYZAAF+kDatk&#x2F;smJhOv44cjW+76m3ilDwYeJyYHEgsNDxO7&#x2F;EpZSQ8IHR+MDqP&#x2F;&#x2F;x3acPoWM7ohDv7laILJpKi&#x2F;+keRUOJCCFmlzJkAGal08aA4w54zG&#x2F;&#x2F;NExAgTuXaoAc9AANzJCY4EXGL71T2+bf+YfWem&#x2F;4v4l+miWQ7NfUcowoLQpgijRh3VNDVxU9Q2OGSNsKCgyi4YTFYJDQmdf&#x2F;6I7ZNe+nbdsLPRtWaEXqhVDST5MuCZ&#x2F;&#x2F;NExAwUiYKsAMFSlHLETDim3bO7gHuzxBlhxpDtECUPnYjAG3qNAuNhUTxwVttPJBc4FxW2usetNHOcmM7GtrIOkggQL0h1RAUCBM4j&#x2F;&#x2F;&#x2F;1fRSq7uCgrIwTcyUMz2nK&#x2F;&#x2F;NExAwToYa0AMoYlQWm8+EpC74gD+RU&#x2F;KLTzKxYzgv86pJGnknBLPx5AYnuSi2sOT1UoZEIsXWpoqmLH15&#x2F;qrfYZgZulWS82d1Zpf21Xar&#x2F;47w9DehG5ak9E0Bik8No&#x2F;&#x2F;NExBAT4Yq8AMGYlY&#x2F;0FIfikM5t9i72njDWjDTI0UDr3x6IY7geEVBiMSyb8VTQSC4Xm0hwUocbhyFuFqrcDNoGnY2o40Tqy&#x2F;RMObr9XYgUhpNs+MJ16ZMCLNMk4wPP&#x2F;&#x2F;NExBMUGYq8AMIYlTJIpXYm32SlGVsNhIcxIoTih7EbBIIgdEgplcunBXTjiQBwSHxyccrS0s5BfOt9MdcT9EsS1Voa7F7MfVMV5YCxdOkQUCcHky6HsjvoEk4iegkb&#x2F;&#x2F;NExBUR8YrEAJFSlJT0M+pTuZx7FVYEbaYZHRPNQ+gMko0IBAW1k&#x2F;Jqc6qMN3bvxjuTXhBN749hJrHf&#x2F;&#x2F;&#x2F;&#x2F;rf&#x2F;U2FgqjwzjYVi5+GVCyYtAojofKJfKZqlToeoUQ&#x2F;bx&#x2F;&#x2F;NExCASkYbAAMCYlOgTP4FxkXz&#x2F;Gi6kRtRnKtlbE8&#x2F;s1gp3ZSKrsGv2XJllrRrV4Okv&#x2F;&#x2F;&#x2F;&#x2F;5hXPXKyMhMfUfpS7BQPH7qVITviK+hLoX6kOpnKHtj1MsKQMEwycmNzI&#x2F;&#x2F;NExCgSUZK8AMHWlFiSDRMWseSQyq3M+1vh5ziDCX5UQ7GQ1I5aj&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;5BW5a7eC4EZI3KZOgCDX1rVVRwBlqJBo40RdqsztRm1etxQ64TAooXgVFRcmhCQ98HRD&#x2F;&#x2F;NExDERyYq8AMFQlD1Qp&#x2F;&#x2F;5ruVkYidjBLJKxVEub&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;Wq6xQ4OrJVQroLuoqDuCj4TbjW4h4h43xO+iJRtFgOB+dNCJDpSIQhvYNi9+nX6v8pN9UvJ0OaUW6XnH2f&#x2F;&#x2F;NExDwRWZK8AJlWlP&#x2F;&#x2F;TXk84tv&#x2F;RXXoho4UlIjUwKED+NUkBPQcfEl+a&#x2F;Obu3M8g6iWyGsBGYlRfKXAi3cRaanc8m7CishEykwUOexUl0f&#x2F;&#x2F;9W6rO0f9Kr&#x2F;&#x2F;EhNJgcq&#x2F;&#x2F;NExEkQSZa8AJKUlFh8RUIXWcsWlhC9B4TcgfkPj3yfyfSTC4lIBjjTH64aSQY&#x2F;KxBfyt+n&#x2F;qHfyWW1VHzv2at&#x2F;Tr&#x2F;&#x2F;&#x2F;68hKPo&#x2F;XhmV7&#x2F;3Sqq&#x2F;vZRPiOhWC3hmh6JZm&#x2F;&#x2F;NExFoSAaa4AMqWlAu8b9R7xl8r5UvyeUbIBdBgUmUOE+yawk5KoLjAalGrazTnC61jMoryTIK8oEsuG&#x2F;&#x2F;&#x2F;&#x2F;lzsfvUS&#x2F;1YJVf&#x2F;V0kiuPcEUzflJKPGsvAE2qHvjx9SH&#x2F;&#x2F;NExGUTSZK4AMnalMediXx4l5kBPWhpEkj67s+4t9J8r5r4bFnfxJn&#x2F;1m3mRui78qZhQuuVLGr259GcIv&#x2F;&#x2F;&#x2F;37yybP+PpX&#x2F;5XGDSZexaeAwdRY2tZqDpAo+MAJfuG&#x2F;3&#x2F;&#x2F;NExGoUIZK4AMKelA+vyC68gf+MD3hD0ZfKuCEF5xlSIBa3k&#x2F;xUJa+4aXmxrLlj4gMtfhga63yp3lI9G1Rb0xuap37x9f&#x2F;&#x2F;&#x2F;QeaAlGTwIA7&#x2F;jUkjr1Kp+7gowCEDqL3&#x2F;&#x2F;NExGwYmaKwAMoelNQeSlfP8VULcmZc4R76ZSzwK59sa3f0Uv1CG5wedNWprHcgqu6k+qz9jOFQUjPWKPuJd9j43X4zal8S43AispfmZjpDVMHYFFG&#x2F;&#x2F;&#x2F;+SYJakzxP&#x2F;&#x2F;&#x2F;NExFwX6Y6wAMpelIq0BU27zccALFWZ1VHzjF7q3UlnFmIK2e4nt9x39RtcFf9F87SIBgiRiUNggKqREj0LlgMEQLC6BPy1Be+55W&#x2F;a2NMVK0hOuxJBK4Lr6w5&#x2F;&#x2F;&#x2F;&#x2F;Q&#x2F;&#x2F;NExE8UaZa0AMLSlJa4YssfbmDfowfmiYS4k+FhRpPJ1ZFWryT&#x2F;l1eoQ1eYsqGEm6NAwBHOU8Poa9wH4jxVghNWzwer+D1&#x2F;Nfz&#x2F;nq9hUfpihDU1VReW&#x2F;&#x2F;&#x2F;+ScrTLf+l&#x2F;&#x2F;NExFAUGZawAMLWlDW+7NIFipWggLHUqjLQDNhiLTTWosKqK2vlHdTrTMLX5V&#x2F;NMUHRoPBEAlVh1YK2cSGQVr8b&#x2F;&#x2F;&#x2F;+HekxHYBGWCh67&#x2F;&#x2F;&#x2F;89+Jf7CyOAOjFQkCjRKO&#x2F;&#x2F;NExFISKYKYAMIGlJgYGYaOEw+kSxYCkhaxHbFFBgRq5i+qCa0sjzJgw4CGDl4IScgq688Sxh7+d0J76rf9d6W9tBH&#x2F;&#x2F;3+mPYw0VGNAZcMJjSlz&#x2F;rlfqU8cBXChyhx&#x2F;&#x2F;&#x2F;NExFwQ8Lo0ANvGTENQ8kVDQFCbAeNCqHsE1D3bsX2qusyjDJuHZiGaB7Xm&#x2F;jEBqGmXGn2kX61CnUbqveXDSvR0BDv+1Lw6ifH&#x2F;csQ3Kv3B8A4VAaAL&#x2F;gwCs8G5ABgt&#x2F;&#x2F;NExGsRkDIgAVkYAD&#x2F;56EB5QNQ5FhYG3&#x2F;4NBwuaCsIxZhosLB1&#x2F;&#x2F;h4KGQkmDmVh8CD&#x2F;&#x2F;+HYfiI+HYf2iqo0OWGiQn&#x2F;&#x2F;&#x2F;+nMpzK9Kg0rYaHQNjmxb&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;xSgaB5iibv&#x2F;&#x2F;NExHcgYyqcAZhAAL3+UzElLKCsjfFq3jjKiBRh7uxV6wZUZxbaRaVF5IJpeXFbH5&#x2F;dM7kipTYig0DlAnONEf2V&#x2F;&#x2F;9f8ffV10aNdbFn1Wg10MWtyKaSzm0cEJc0VAr&#x2F;&#x2F;&#x2F;NExEgS6Wq0AdlYAP&#x2F;&#x2F;&#x2F;1Xn5xAdsYJK3gf45XB4SRUjRRLqXW7RKAMOlJsBFB7xstIZ8XCa5ebdNur361dBLUdW1ZQJHR9SLWFzOcJQORqRU401kVsw8027f&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;NExE8VwoKsAMyOufo6mlTopYUnw&#x2F;KUgYtPG&#x2F;ci5vRtB+agQBwEFYphZwLqqRBAmgEaJIkAGIyqirqZ9SP&#x2F;5&#x2F;lv5ZuWFV5Bub7kC15YPB7RYvUBh0TiJ5X&#x2F;&#x2F;&#x2F;&#x2F;rLA+A&#x2F;&#x2F;NExEsTUVqwAM0QlIXFVefy0ZyM&#x2F;htN0MuhWNkvcegOsk9B&#x2F;dSrBggQdMqE2ktDqdmuVSUPrz9XP&#x2F;8O&#x2F;++f&#x2F;uv4v&#x2F;&#x2F;9+0zBhp22xsux5S7IAZid2VVoCwPhZ7v&#x2F;&#x2F;&#x2F;9y&#x2F;&#x2F;NExFAU+W6sAM4MlNJo01Ln&#x2F;dNNC&#x2F;&#x2F;s&#x2F;JjsdXABet2m6MaIrZ5x5IuGq&#x2F;Qt4IzzUrBM1X803Cn7+5&#x2F;v&#x2F;d5&#x2F;qZyc7IBxpggD7iQ2ggF4nPQa8ZgqONQWTcqO6Etf&#x2F;&#x2F;&#x2F;u&#x2F;&#x2F;NExE8VKY6sAM4UlKIheo6ozWzAAcUMOuIcyiHgZgV5gDUguM0Z8LKk0ygCcG7rJsJEMWcFCBz3mZtqJjoMcarigtRQXn0EDcf44X4z2JNPBLmPy9H&#x2F;&#x2F;&#x2F;vW2mL1KuoB&#x2F;&#x2F;NExE0SiY64AJSOlKXDyjfZZgC9KnqN8VWtpEjqfKrNf7gk5xnMYdV95UG6as5&#x2F;5v4hO+MLvcDD39fyn8p7+Pyj75FJnKJwbs&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;T6YAwS3UH9DQ60wRrPeGGKL7W&#x2F;&#x2F;NExFUQuXrAAIvQlOCnpvl6ov8Lp3&#x2F;pw+9MRlXrl4j6XAPJ0Gpeh4NPUeCUPa4z1fncr45ZBSmgmaTlnf&#x2F;&#x2F;&#x2F;76a1f&#x2F;cwFWQJn6HManfqW4xTo5QNqAo7QV4k&#x2F;fzNUBh&#x2F;&#x2F;NExGUR0Ya8AJvOlHXVLV3ZBAnwxUyJZ&#x2F;IIOoVJ0&#x2F;N7mMlsMptPfzT3qlr77Op2Gmrd&#x2F;&#x2F;&#x2F;&#x2F;6u&#x2F;qShf7a5V0QQ12f43LXK2wno&#x2F;R+X26P&#x2F;q2+ZcDKnFERU2syKWejiBK&#x2F;&#x2F;NExHARwY68AMFWlFbak3KZsaxdR6dYTSbgrUsethAl&#x2F;&#x2F;&#x2F;9PXePZ&#x2F;yoBevL8VVzNRLuzD680gqXuHPzffPz9fyX6n9lKNFjZIaTMBn30KZLSKSHEj6Brq6RPVZsl6WC&#x2F;&#x2F;NExHwSAZK0AMCSlBPeSgayLP&#x2F;&#x2F;&#x2F;&#x2F;Ete+WAq&#x2F;ra4UIkVY8y5wzGjOxlWxtoiXVd91btL&#x2F;8wyF&#x2F;&#x2F;&#x2F;&#x2F;jMzH9lgpYCNfCkeuupMfV8ybaOvtYBQVt+s7&#x2F;&#x2F;5Z55sO4asEro&#x2F;&#x2F;NExIcSEZakAMBSlJZYOjrkkx8CLpmNJoCsEHw4Ng9xYJdXBwyIFKmZ3mNX7vUqlt+ZRJTBZJUZFh8Y08dKu6ZauxC6NxX1Nqb522tyYmU19HtQyjXVOEiGQBERexFG&#x2F;&#x2F;NExJEQOZZ8AMhGlFEPxKxTy+&#x2F;nXFC4ZONyaShU9tU4++gTEB7dcjPIqWwY9yVkvT03oOIu0BmpzXp6KUWLu6ki982qPMOe4G4ITcribiMzA0IOR3EbGHHmQSiPvheB&#x2F;&#x2F;NExKMRiNYoANiEcIQlBzk8vG5V83TRL5uXSVQHYMF+PQuGiCELaPUJ6GJxNv5femnQHuXSTIRENC&#x2F;&#x2F;0GTTepk1rc0nymUh9&#x2F;&#x2F;Tsn2My+blwyKMYhkSaCKYnhwe&#x2F;&#x2F;&#x2F;l&#x2F;&#x2F;NExK8QCDocAVoAAMZNNy4gz0zRuTTFZsXx4HURqHgMiRhM6jUzMBrg0QB0IL0rDrFwFQ3dabq7dBn7f&#x2F;uP&#x2F;+f2qIshDn1Edi7MF4KaWZBwCgQfANDOZD8fCFg3LGTB&#x2F;&#x2F;NExMEhUyqIAZFoAMUuNF&#x2F;4r&#x2F;&#x2F;+9rpWbhmlZ&#x2F;&#x2F;&#x2F;9tf&#x2F;2fiJ+Z+7umih0Yu82WZwLzEt36ZqyxrN1MnUSdmq8YMUaiy+7W5PCdC8hepvNnes628tzXyQTnz8Qx2u2vaM&#x2F;&#x2F;NExI4Y4qKkAdNAAU5voJq0MzEMyWsLKll8&#x2F;OzNYdEgRByEFQeRH5rIXDjv&#x2F;&#x2F;+oICAkcjDgJGBMHla1IYEwyAhCKJrRJoDwUiZ5MhwIulV6Pv0bQ7o&#x2F;Z+nX20OGpEwR&#x2F;&#x2F;NExH0YIYqoAMiYlASQXCUOAHiQXjgVAUExIeByNh4HAcEx7igHojA+EQWg+G5w4DgJjBwsTGpZ0t&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;7M7ZmyuzoxzNt0stUno6rKyFth1gH6JJFIPgDjUt+fr&#x2F;&#x2F;NExG8YQvawAJnOuTFy&#x2F;&#x2F;&#x2F;efwlfs1iRAJAKVMIMWWgJA04gMCaJOTkiJygkE0ycnPAkB5GWnCl0jRn&#x2F;&#x2F;&#x2F;40i3abaFyrF9McWCaUqst1l8hJJbleCoNf9TvzfD1&#x2F;r&#x2F;5f&#x2F;&#x2F;NExGETMYq0AJhSlP7&#x2F;aUvaJnowEGWcUEZKggadNGFzytkYVZYgDCK1wckowgaWSUVf&#x2F;&#x2F;&#x2F;9Tb7YloN&#x2F;zI4RiibTDFgF2lRMdADRSuuW+Dly9dcv&#x2F;nJmcrOYa1xILKW&#x2F;&#x2F;&#x2F;NExGcR8Y60AMBSlC1oTZ3cOV36yffhUMVtC4TTl1OUYt17p9x&#x2F;&#x2F;&#x2F;&#x2F;0u+dc7+aWaUZq&#x2F;V0quYDc28QYuza3LOfH69G16e39ubzMtX&#x2F;Cu39Cea0mB&#x2F;4BNW31IUX&#x2F;4tRz&#x2F;&#x2F;NExHIREZK0AJhYlAHa99gzXvsFi3Sy2HwUd&#x2F;&#x2F;&#x2F;9jjz8KRLb0ZRBhKq&#x2F;7gooeF2ShUYc6loHIx&#x2F;Max8qBXIul8yGO767fNIFwXpNsqDIUYjK9OiWdzS3dVyG4anp2GU&#x2F;&#x2F;NExIASYYKwAMCYlFBfaTk8&#x2F;&#x2F;&#x2F;&#x2F;+v+t3&#x2F;DpQrX91AapxLcdMRJyUrYaDLN2L9vlKi07WJaEQBc+Bx7nGn2Ki0OQuZiRNGl1JTEJBOUt3x3fVVGGQnN656pW4BkQOdFT&#x2F;&#x2F;NExIkRWYK4AMBSlH&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;+tXmUdEK7a9uAEWisrDi8&#x2F;MF8PPlI&#x2F;a4PqlS3wZR9nE+Up7H3a0Hfx9&#x2F;GP+uhdBbEjWDM+jd8Q1FDVDzyCzrDpQ9&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;oX+WhpLU7DC&#x2F;&#x2F;NExJYSUWa4AMISlNDlT3RnYmbOqxckZcFxH1B&#x2F;BgrIcCsPGRRJFnMDbQ7&#x2F;q06dS5CqJmnEnnMaMUggBc7UFBZxIFAj&#x2F;&#x2F;&#x2F;&#x2F;+giq&#x2F;tIZYUlZwRdNRwiko8axXKAmqhcK&#x2F;&#x2F;NExJ8RIW60AMvKlGiZBUyAdB4ABmPBMCbhz05bs1b9tfx&#x2F;4&#x2F;evz5y0NcmjLp7yiMuKyhBH4Z+eVMEJS7&#x2F;&#x2F;&#x2F;&#x2F;okqsaNVQ2EVeI8KNg4lQwRFHS4mzSUMOxYTbGzAUXi&#x2F;&#x2F;NExK0RCWq0AMRKlIrxYjtM8mo3l8&#x2F;p5ZGb3r&#x2F;mv9t9q&#x2F;&#x2F;&#x2F;9P22CKtnP23vOaaj3JVTkYcFyqeNNyqMBcZmg4ULBwxGTzaK2pQ4omLRs7KLQCCqOtpxWSxuUYwzLKGK&#x2F;&#x2F;NExLsSkXawAMNMlETYbDDITikHMS40zc2sxreq67rzJb3CwIm7bv&#x2F;1jrFYRJLM+3Iw+fOiVTRHc0s2AwciIHDTxGKAEVIkwFCcqqSv22ihstjBbi5yXGYKRFzGkZu4&#x2F;&#x2F;NExMMSkYaoAMvMlBxODYLEfhylf3xzBwA3PEfkTV&#x2F;84OQRAZsi5P&#x2F;&#x2F;5gTBUIuRcrkM&#x2F;&#x2F;&#x2F;GYNBmCcQIoeNyf&#x2F;&#x2F;&#x2F;&#x2F;Jsrm70GTJ8hhEDP&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;IubpmZuOYOYaEERTHMI&#x2F;&#x2F;NExMsScJJgAVx4ASFSHCAUGIngLGQTCkLoF0xGWZYZi1iCSLS1Gt3F1u&#x2F;AVyefODG3szyNEjsrKzyJdNsCUZEPS+ITxDBKRy4R0MBhAIAhkBOOD&#x2F;V8EkOck6yz0A1A&#x2F;&#x2F;NExNQgsypoAZuYAMQ&#x2F;lJM321fT&#x2F;ceOwOCkUFVA6lTaw&#x2F;S6ovX&#x2F;&#x2F;NMOr6z&#x2F;&#x2F;&#x2F;Oc1s1BX&#x2F;94qsVGjWam&#x2F;pp9kjjFrA5ioCaxcX6T2NsBcYGjDqn21e1Z19uMiquRlp8v&#x2F;&#x2F;NExKQgYcakAZl4AIMgWy8fc3&#x2F;s3Xu+bfnj0VcX8Zc4SfCgKbpzKny7qWVMxlEaMjgpDXIVRtOcs9A7dJTIH0nsIpD1aLboZVPROctNbl1xYR&#x2F;qziWpI2teOt9bnJd2&#x2F;&#x2F;NExHUf6YqYAdrAAMgyeFv&#x2F;&#x2F;&#x2F;1NdQldypQqTKBseEk63HiAzt+HrA4qnjzN7JJV9jiYV+4THtttVhc5Vaq21ziQjTcz+JW0hGhGyCkyT8Mu0WQtxxqcXiLBgk8ISICh&#x2F;&#x2F;NExEgauYqkANPelG3NKsbn8jFDjPZIrLOyuKvUr9cMTCzwZo7W&#x2F;VzNMqp5LLuQ1XIHvbMGAMVW2yCkUdc1HktKSw3Oj3O2wnlxESM7Hl0e1lSkFTa16YD72l1m3uEo&#x2F;&#x2F;NExDATMPqwAMGYcPniS7c6BVnUYaKmQ0JVBUFRY9V&#x2F;&#x2F;&#x2F;&#x2F;+v&#x2F;5Mufie8YVB9nwA1PyQnDsvqpxbX&#x2F;Q5GrU5Zz1MLKNgHC7OXteY1c1UOr&#x2F;&#x2F;&#x2F;&#x2F;9P&#x2F;&#x2F;&#x2F;+lX0&#x2F;&#x2F;&#x2F;p7+09q&#x2F;&#x2F;NExDYS4xqkAHnKvL7nJPlPFBEPi5oqKDWICYiw11QeMorLUH0n1WiFQb7PAZIc9X+83VmY6K5DcjAinAAAAIRf6Xk+tF9eT7f&#x2F;6v&#x2F;1&#x2F;&#x2F;&#x2F;dk&#x2F;&#x2F;7&#x2F;9evPU5GSWV7orUs&#x2F;&#x2F;NExD0R+wawAHiEucUiMcYzmFMHLVUx&#x2F;HIKBVrwlZaypMO8BkTN+BAJv1EgmYnP17ZwWFdzhZKkG4lujoJcJw2fvxsP39E659D9xBoB7xCKv9P5&#x2F;KaaEHAAjBA+S&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;NExEgSiWq4AMMGlP&#x2F;1Kv7A7Bt6kQs8IEA62S7cIzMk5Hlh95wCziWYSqJSzVqdv4yh35RATXoTL+TFe3y5jfnfWXdHwoicDl1bRNQ+azPj9&#x2F;mNmn&#x2F;4hUtWqv+LsC&#x2F;t&#x2F;&#x2F;NExFASkXrEAH4MlZeh4tdxBWalNgOGfnqUk&#x2F;bjLmxVI&#x2F;wlNrEquaNMRzGXi+IsexSeuaYt5AkMkiTdEln83&#x2F;7&#x2F;eG8tDbm8qCCUeF&#x2F;69f&#x2F;GLlKr+a+GI5XxgCttjamA&#x2F;&#x2F;NExFgRmW7EAHvMlWJ3mCrrfB+xfhrr+1RreBG371rrC8hUbA8UWRIdRZRug0OpFBQRoc8dvdcU9fdfB3kCNw6W7FLpVf&#x2F;ajpGrdxDtFKlwVJNW+Aee0Qm44SzC+nXr&#x2F;&#x2F;NExGQSUZK8AMPQldDtkWxohFOyBGKUCZpdAJtnpmCAgqEIbs55s9zIZuwx+z1mIusW&#x2F;&#x2F;&#x2F;&#x2F;6GIYn&#x2F;oopcsZUYEDXrMNll5NqAlE4O7NiRyAObGGeNMYjap&#x2F;&#x2F;&#x2F;n75mzB&#x2F;&#x2F;NExG0ScYq4AMHSlMHJApsD0btAKcgcTF0RXWNeqqM1BouGczAktMl&#x2F;&#x2F;&#x2F;&#x2F;95B&#x2F;+ipLlKv7SGTVNdQ5qZT9YRAMmzwkOEAbO1RZ6Fqj77f&#x2F;&#x2F;&#x2F;yebRguAqIwRoysHIaEU&#x2F;&#x2F;NExHYSSZKwAMFMlFbFzhU0mN0cmaHucxKrblZxhf&#x2F;&#x2F;&#x2F;2X1ZYUb&#x2F;maDFe&#x2F;mYSDjUKpceEY4jQqQdjlmoOzqjONMwMtN7b&#x2F;&#x2F;+qIwqeEADiRgmPcUCW6ECWLklGZSGaSs&#x2F;&#x2F;NExH8SWY6sAMlQlDU2PmmSk&#x2F;&#x2F;&#x2F;&#x2F;6Pw&#x2F;en&#x2F;K3uWzqNHNn5s8dBuKBt52BqGd1EuQmCRACPEKIDlRjUVjnaptU3vY7q5qQKi4MOmBKPKCll72dv&#x2F;+3x2r3W7nmiKJr&#x2F;&#x2F;&#x2F;&#x2F;NExIgReY6kANHOlP&#x2F;aqmTFVPR&#x2F;WsOjKrMjCgYdAVlACxI0AVUKoCqHCQDTxxXtmsvGWxCYp9JHtxLjwkPfqpedlChwaPtHqrbFnsWz1TLoD3sinOr2V5C&#x2F;&#x2F;0f3MZjG&#x2F;&#x2F;NExJUTUY6gAMlMlLlEo&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;7JRiUQwIxwbB05&#x2F;GnSR4SiUBcJSFox1xsWbmdMs3zlum6tuD73YYYNosGXcVPXgaXLLyiRKKkEEC+NrNfs59qNNTnG5ZXl&#x2F;f&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;NExJoYepKQANsEuP&#x2F;fI3p9m+S76NO6NISr6f+&#x2F;37sQzsjWzst1Di0ZT0A0kIwc6qdCFOBjFZuGDXgHujqjS9pbQ2pV3LL61q4KiI4qRFWctmZA8AwdOK3ut0Z9m2Sv&#x2F;&#x2F;NExIsYUxKQANJEuav+yNb8P&#x2F;WVe7nzay&#x2F;fr+GVm1co7uR8clltxyfvJ3v8PuXsN1K6v2tk00k1nNxRtPSJA+bNRIGSUjJB9cfIGRgUDAsnSM28PoLTQ0AhISI14JhK&#x2F;&#x2F;NExHweeyKUAMFSvF&#x2F;&#x2F;5WuiAcxESZyl&#x2F;6TkD9THr&#x2F;&#x2F;27&#x2F;7f9elb+vtR2shu7OY557oeh08cHHWUcxyxNSpBRgbFBIceEdSY+UFCiWggcZEUSCw0EzjqETqv+D&#x2F;9ZR7G&#x2F;&#x2F;NExFUTcx6kAAhOvGhv+ZnXnyC7831&#x2F;&#x2F;7f&#x2F;&#x2F;X8nvrPdndb3rZRczXUrVKNEkM51YkYLCUOnh8Ph844pnIUhosHw4NOMYWKBAUwYUQMJvdMl1U4tt0JTJVP3EKgIMIRm&#x2F;&#x2F;NExFoSKx6wAAhKvCldqO7T3fp6f&#x2F;&#x2F;&#x2F;3&#x2F;&#x2F;&#x2F;3rmNqyydNlndj1sUxWVUtotSOmNqhyIaKdUcIyGBFKYpApnYcKQWCQEyruYBfGsyBJADBQgEFDDSz36eETNu&#x2F;d60dkx5&#x2F;&#x2F;NExGQSKx60ABFEvEUDpiQIIMLaCAEBA7&#x2F;4tUND4RPlDn8s9qioKnf&#x2F;0aavoUPOwMJemvm0bwrqB1VzHAia4AwY8JdXcOSKnyq6xnufTzmGJzC+wjPzomrRIBcSgySL&#x2F;&#x2F;NExG4QYKK0AHoMTNLA7Lq&#x2F;oG3rKDhoqn6lM+9r1P3q69nMfa0V4ULakxGuRqWWVv6xtYFqKkScFairebwhmBLpphUY4QAgZNJAmwg6aSqZJBbhQ6806I6D0h3GTjkk&#x2F;&#x2F;NExH8VMX6oAVhgAXmA5hUEKABQDwtjkigCZFhGWIgcD1hYjEkQvkyLonjpmWyqbizSqMcQEc0nUUexPnJ5JAoi5SYGNFklUu2o9A6bldk7JLRRUl&#x2F;9bv7epJaKKkjJ&#x2F;&#x2F;NExH0h8np8AZuAAB&#x2F;&#x2F;&#x2F;&#x2F;NUSPaDX&#x2F;+iQQAZYKIDPDBhMENGLF6wM2bY5K42QR83UdR&#x2F;CIBSRl4oZqSyWPJuFNhlT&#x2F;43H4TpHhPZQq+KI2LjgUTkMviz&#x2F;wO1JZj+v5CV&#x2F;&#x2F;NExEghUXacAZrAAEq14fp5mtXWpJqGk&#x2F;FrUQgCjiEcnZfDDvQ6&#x2F;e4AdCIOXK69Jk&#x2F;kUceN09gLBUDkAm1eb6XX&#x2F;&#x2F;5ejAfnKEqquOESsIKsNIUTlCTCBKZzMoUrCOLS&#x2F;&#x2F;NExBUXiXaoAdl4Ac3FtV7eNemy1OU1AxWwyPlIfr5eHIj1KnHzA9fPnj549fOSFxC9G07PpKxsMep4sasvntFs14fw3F3IhL5TqKVvxHzFnvGqHP3V5UJaMUjREVEq&#x2F;&#x2F;NExAkTqW6sAMMSlCBkvCWdoxYXZR7B7rcU4tokjbVnqc6Xk8aA+CggmqJ7LtPOWYtaiMcoUB2aA&#x2F;ScKp+3vTi6NyKq4Hzp4gKPYdRlmDwbn0rUZBxZMK4ZtqPPbOsa&#x2F;&#x2F;NExA0UaXKkAMvSlSIhLpLz4ztG+I&#x2F;i5fxdP5nkR+n3Wi7lorE0ySOUmn1qxtWpiJaIqEy4lPEPpdWEpX+neRlOlk5ImSIyToUGqqWVZoZmxcoMPH4qVWgcKhojInmn&#x2F;&#x2F;NExA4ScU6cAMJKlKsOjc1IsCKSLs1NRqkSTKJURGgSBUCRKsTfPl+5eqqwiClDor9C19DSsxpjGEg8FR4KgIq0kO&#x2F;&#x2F;&#x2F;&#x2F;+qTbyyjaB+pFGcXZf2GqbL97Zs7N7Ys82L&#x2F;&#x2F;NExBcPsNKcAMGQcDAUiCoXMIYyt0vn&#x2F;HFhYCvHHzCtcmtb&#x2F;metG131&#x2F;&#x2F;&#x2F;OIfV+UlKVvk0QaEwkztUJajmNt7meYKDogAwmxuLNgzOk7CJN&#x2F;LLTlTzKZ5GL0gcq4cMS&#x2F;&#x2F;NExCsRaS6YADFGcJCC0rQs21SFffv&#x2F;VlkDumww4gXEB9S1D658wgOrwsrEQAfH42N2BSBXd3fFgzBTIAgWxIDF0OKid4QcGZ9Z4qACJc+laq3e85vavcnl0OpGMf67&#x2F;&#x2F;NExDgQUO6gABhGcNJiRqiQShBthSoMKd13sRf&#x2F;MpN993z71HPR5gdGzUlARMxH2kTL0sulbmu8Piw2wmLpSLhtLZ8XSTpWP&#x2F;+mtbK+cc5zyEnsvFGlzxU4WEdIQGJE&#x2F;&#x2F;NExEkROS6kABBMcIdBMn1HO&#x2F;&#x2F;pT6Ts7+jBhVaiQRA5j66EMkAfA0rMyIF4TEWLSkn4&#x2F;+Oz+5kceqcA78NOtcrX6P6fj91kjyNvWZLKhhRQGTW2ycIZHgYZ&#x2F;m&#x2F;jGVJl&#x2F;&#x2F;NExFcRGU6gAEiSlN1&#x2F;Pw&#x2F;8&#x2F;yw17Pvj4+5iIpi1lY5D+Mi1MuNzAyHQPI+j2sZPVPycYw4xZ6Z96WmetRysencKUAQrMeKCjQGyzHRVCVbjWpFdhV0nW8mcZyuU1Jdp&#x2F;&#x2F;NExGUReVqcAVhYAfXbdWl1Ylcvq0nasoqym9S09trZbstnjEW0LgsEpYZdIEFIBC0H5YkqSHKZPpEpAE48afZTFO5q7&#x2F;O9PMAchqM&#x2F;AD8QuLtKeLGW3bE0sM0WF16K&#x2F;&#x2F;NExHIg2aKIAZrAAFOsP&#x2F;&#x2F;&#x2F;&#x2F;s7OZUQ&#x2F;&#x2F;&#x2F;&#x2F;6NDfyqqowNMp+y31dH1vhVCQcNWKtjmtd+5z+Y91n35v7e3e+v6rCxe+8Vg9uPT4loCIfS+OyEWWVnx2a3e17IbXrWNM6&#x2F;&#x2F;NExEER0VKcAdhgAZaOue8XLurGyTiw4KMpBqZA6OHx0CQQRHbe8Tg3OrhiCKWxQM+5CMeKAwTEBNAuqVm5dUrAbDxMJQaWRwRxTzp+8uHS9wxaCzoo4EmAIx+qrraM&#x2F;&#x2F;NExEwSIU6cAMpSlb6jbBAAHB1E6LcVEmuSGkZJ0JXqARyJKmG8TjB1TBXSlLecygQx8XhTi5Jod4NYOuEWjcvSqR4r5JHS6UiJmTg91M2jQkeMmIiU1LbVXmsMFawn&#x2F;&#x2F;NExFYcEX6MANPelBinwsTGch8BJqOM1&#x2F;D&#x2F;OYktxU&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;7FMCKap+qOhDpuUz1zDJ43JswoAAFyK4X7orS6IhDUvZ2ZrRDArl25Nzihx+RdFeSZjFOO9QKdGQV1HbF&#x2F;&#x2F;NExDggGpKYANPUuIeqxOQoLmiFE2KQsKw2k&#x2F;rCNx0x4cMVOFg4gFQ0sMR8bHBDjgUAIwLycfiEEISB4IggKjcmUgMPt&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;V+YyHvJDy7&#x2F;&#x2F;VWrK4segojOwvA7&#x2F;&#x2F;NExAoTuVaoAMJMlMmtzwyAWNzUqX9ot8rjyFmNoWeVM3QVBm9LG3KoZ+rk0jlTKjtaqpq3e+Z&#x2F;+8zhxKWJBQdEqRUQgqIv&#x2F;&#x2F;&#x2F;&#x2F;USCrFu&#x2F;&#x2F;0lVnHRIMtghY0Fixe1lD&#x2F;&#x2F;NExA4R8LJ4AVgYAMjXp+M4ZZb5rL9d&#x2F;&#x2F;9j&#x2F;KNqGHAQTjMTCRrYloFYe&#x2F;+BRIDoiErB+EqkICj1gJSf&#x2F;zz4wC&#x2F;QyAk57loDGlixs&#x2F;aZcUk2Zv7p1yZxjAuAn5jHqD4B&#x2F;&#x2F;NExBkYAyqIAYw4ACKCPz56MccPDYRfyCnn2HweiMXGw7&#x2F;Rt7kjSArOcp&#x2F;9s+xlhgqPFhkfH&#x2F;&#x2F;7v9uaUJlCAlkiw6NHL&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;58myCQQJlFQbk3f+eb&#x2F;yN6unff6Nqr&#x2F;&#x2F;NExAwVQo68AcEoAf76M5F8jc7XU9ziEhFcQEAQUdlOcPoUgEYw5XhwIB05xcUAc7iYfMxLOzs7lc5zlnRFE853dchS5EU9RTK849Kf9Xl5B5nAOBqFUQElKEAYNqO5&#x2F;&#x2F;NExAoRmcbEAEiElAEjZ9T&#x2F;Vf&#x2F;Qk9Rmd2Zbv3o9zk7fzdryPMY5HAjM5qGVmlRjHEsFAIGQmCoa7l4iz3arfKlQ0o9qPOuQSRX&#x2F;23QujFbM2nWptGp9YMmW0FtH2POP&#x2F;&#x2F;NExBYSgYbEAMPMlGxDatsajgVvm1cv7Zu&#x2F;fwH6fUbA&#x2F;hUgxd3lx6N1MouxhZ3zWPfHhn37btmXy3T0xUaVhmj&#x2F;IgwtdumRGNxWsHw5xWIGojpWsaB4fBdTX11Ylvzv&#x2F;&#x2F;NExB8SiZbAAHvQlK30mSutgz2q+Nu97kQG4JS7MO4CcuLFB7Y1r6H3unyUzOKFcCxtZDQ1DlUq2HKCrdZGB6rpoB+LJwADZwxMFWUvwbhH&#x2F;nog&#x2F;g9S8eY2TK3iClf&#x2F;&#x2F;&#x2F;NExCcRcYLAAIvKlDb87YwdjA2g0CWODcFNs+dtR2MPcgLuPitX&#x2F;&#x2F;&#x2F;tkaLYUOC6dh9B40XI8MLH46ADySKh9AH01nQ2Yg1g&#x2F;xtKYWXjtRYNHMWUWOZpc2c9mva5NvUE&#x2F;&#x2F;NExDQSWXK8AIxSlSzRAJdyZaVdbfa+epx9IH+0b&#x2F;HdhPXgxgvbg&#x2F;LiHLlYlQaXMRjgeaSjQN5UsYwN9QQFrFeTcYwNVH6COx7QFeMeQUzgZ5wC0EWxFpBA1Xeolxp1&#x2F;&#x2F;NExD0RMWbAAGyKlHED1P&#x2F;&#x2F;&#x2F;&#x2F;+hbCBFdo4BbLTFXPkB8HFtqAXCTeUL9U4ahnzWSA4VTE3BGjGxbmCLUH3RapbTNqi4XTVAuJJJm5qs8UOlBKC5kQAI0aS7&#x2F;&#x2F;&#x2F;&#x2F;+hX5&#x2F;&#x2F;NExEsSUSLEAGvacG4cBDqqcV53DU57RqEgLewJwO5FvUkSkTJqPkkzM1NpOoSROMdCiVC+nnK8m8+ltk6k8UnzNIRsHWFsV5zLs9V8xRRID&#x2F;&#x2F;&#x2F;&#x2F;qrV1KegYyjurUi2&#x2F;&#x2F;NExFQSkWq8AHvGlF9m+nllGGEWxD2Yg8cKwYTG0KFqRbAdkZWK0CggGAsTFKM5Q12dn192aYtWICAkRYK9oickHmf&#x2F;&#x2F;&#x2F;&#x2F;0qseQENElgEt1prSnkMwfsRuD&#x2F;WWtfDVk&#x2F;&#x2F;NExFwRCQq8AHvOcJYavMbEx+J2ImA2B7lEoif0psunZTOyC1UmdaFSRuZDZYP3XLl3Jos&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;TNX4yATuO10NvdSZuO14s4k74UTXBAeHzid5NodxJ3sYsjJVj4Ks&#x2F;&#x2F;NExGoRKQLEAHvacP6Nlyx6uX8f8OHLYMROS0NGx4YTsIt&#x2F;0+meIp0wNp&#x2F;&#x2F;&#x2F;&#x2F;ZDdy3&#x2F;ANy2rkfvCNtrYzrQwk6u2OwIK0YQLdNDJo&#x2F;oEIVT5eCwptT5zeTfh&#x2F;5tv4r8&#x2F;&#x2F;NExHgScW68AHvGlM+fevzDi5ltu8eqHl3CUAAJAFU0hd&#x2F;&#x2F;&#x2F;&#x2F;9CvmQNPUioPK9EK+HA4oDelEoyizGWn2ouUCo7wsTVQw5GIxOC8juOGB9zp5qtbaK6+ijWfdI4pdLx&#x2F;&#x2F;NExIER6SLAAHvecBPjHljwlu&#x2F;&#x2F;&#x2F;&#x2F;7q+SpRseUh1bOk6mamu1dOpiDeP62NRRZQhCqVOgkAp26zNi5JZ4UiXsL7OvfgSBHPCBIGpWvOIQKZteq2rWWMspqlarcltuvj&#x2F;&#x2F;NExIwRYRLAAU9oAMx7f3hUpZicnpunocIBrxbDvMcuXre8M9Xr2dq&#x2F;co4&#x2F;rvN&#x2F;&#x2F;&#x2F;&#x2F;4d1&#x2F;&#x2F;&#x2F;&#x2F;V4GjX4w55X6&#x2F;8qQf9A2ruLkFPIddBALFbyi0uiSOjZ3wFBMZg4LhBp&#x2F;&#x2F;NExJkfoca4AZjAABXysYGM3FkafSmJmI0HMb0YA6U5ihawgw4zqvdsj5iYnj4nno5z3m1em3cBmaGuIwQ4DVaSXUudX9t1gzPXs1fAzFi5mMhAaSF+j&#x2F;&#x2F;7gwp4mGiF&#x2F;&#x2F;NExG0boX6sAdh4AGFa7ockJ5qDBECdp0EzbDCG1pklCEvgtCeQ0w08py&#x2F;mqu1ePUhVxcjGP8OINI6wxQyTQRsRQQWWakbbO0rkEntUik4iJjSEMtxQrRQx9XkJ5mbK&#x2F;&#x2F;NExFEbsYqkAMPSlKUpSWiyVtlO2Q+DAfY8wj&#x2F;&#x2F;4kaERUEw0BQEFBJOJqOWAoyJrCC0y9oKSGikNtdxaSy1hKTeKyNaSTEmnIirjonPrTl1aSWykBIG3lo1VNTC7Ks1&#x2F;&#x2F;NExDUUoaKYAMMGlNSqrQoxN8Mof&#x2F;wy&#x2F;&#x2F;VfjcY4KPJoGHHv&#x2F;&#x2F;8rcHXCWjOMEAYSKEFF6kTWKwEw6pGr9s3hxEk0nB&#x2F;WKoMlaERE50tUOXSJPwmwkpsHWS3adZaWq9wF&#x2F;&#x2F;NExDUSmNZMAMpecB7oLMDt3&#x2F;0hoKtehl&#x2F;&#x2F;&#x2F;&#x2F;rSMatMWTU5E84x0GCjKlIAiL81YzQ&#x2F;dxy3lWjXMN6v8LG3XpfESCI+5dhprIwRLM4ikdkmwRIS5p2uStZZBKkTETKj&#x2F;&#x2F;NExD0SYGIkAVoYAHQSmmml91BhXbZFFpWtXDae4oNG+iHf7DQ4Yqjz&#x2F;m5PPkwniE4k&#x2F;+aHCefekSNpN&#x2F;&#x2F;l+gaHCUH4QSJCjp&#x2F;&#x2F;x3jvJ4eA8EwEcKiQIjBAgljn&#x2F;&#x2F;8d&#x2F;&#x2F;NExEYgOyqYAYhYAGTx0EgsJ5ufJgiDscCAO8+CYO02&#x2F;&#x2F;&#x2F;&#x2F;NGPf&#x2F;s+yhhNa2t7JSS&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;4p77Yxj3v&#x2F;84sg+ykzWgpcub2Fr75Kf9qqRrd6a&#x2F;2+j06omqFeqHQDuUE&#x2F;&#x2F;NExBgRgdawAcIQAA3cjMs4Rx2dgpimu7ux3NeRbDIQDIsXDIQFnbFeyihKFsmx7lhdEiLzRRhSDJMag6InabVb&#x2F;hMOYfyCvll4mUhbfwm5SonY6Xtn+1WM7UBEMuq&#x2F;&#x2F;&#x2F;NExCUSEfKkADhGmRrKv7GpXp&#x2F;swr&#x2F;Cn&#x2F;1VibEqK6KjRZRXeTPynYG3Oaf&#x2F;&#x2F;&#x2F;HiqgDogNzxcBBi4QZI2T0fV1&#x2F;V6t&#x2F;7lW&#x2F;T+2ZPdU0X6qlOaVFR9k6VuVet&#x2F;LKiwqnM&#x2F;&#x2F;NExC8Qgf5QAVQQAFYseUesWWcEiUJkSISrwkLka+vnVh3zHIHZH9dxz1CFgP92JyUPt+OhEnjvVJ3+BGDteyQSjEz&#x2F;+SeAYTR1pk43AADH&#x2F;8QBvZLL2GBqCCNBQbf&#x2F;&#x2F;&#x2F;NExEAiGyqQAZhYAO4485L96ROOQUof&#x2F;&#x2F;oEwvimJn1Ss1Ye4Osr&#x2F;&#x2F;&#x2F;83uCQTLk+mb2O8k1pNzripcpv&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;L2E9A4fe+r7QOeTEbsbUHJ3B8lGxtX8wClgssRTg5kC&#x2F;&#x2F;NExAoR+VasAdhIAZSwgxCbnE5FYvX952MN71veU9hVwq9i34TtSMWYIx0sAU0uxEYVXNMCgjLiUXRqdOUIQhP1flmwpNd0dohUuTIRSFrwQibhAcPF2nMp2dX5Uksj&#x2F;&#x2F;NExBUSaWqkAMGSlRuOjJWs3r7Ltr5NNU6ixMJIQWBIGwZEIhwdNIEZYQoTZKhhKUY5ny6lK&#x2F;ubGNSkmFkRiWvtXRnooDEQosyaoUJKO0fAQYGGcxgJH0dDat&#x2F;7+b&#x2F;H&#x2F;&#x2F;NExB4QgQp4AHiScCNfiI1QqOoBVFmRCgNOFRVNhosWVIzp2RTCrjpZ8FSX&#x2F;&#x2F;&#x2F;&#x2F;lThnsVPDGwIUAwcGJhJrP9L2U3K&#x2F;01W9+Pe5ZZZd1l2bt+1ubP&#x2F;ZZFKRQVbUkEwU&#x2F;&#x2F;NExC8Q0NYsAVswALw0n7Hdd+R21ehu7&#x2F;usf0fuc79KFZqLDIEjJf&#x2F;EShbQHz+h7mMAl3GmK0HYGAgcDAsR8TQUuOYJQAWSgEJAMebA0Yf5FRxkHLxUBtqGNiYELCn&#x2F;&#x2F;&#x2F;NExD4g6yp4AY+gAJOIppuxuMqShOk0Tf9Tb5SLJcJkvE+Uv+huyHPEQE4CtC6cKqlf&#x2F;&#x2F;77IVWmiRscPGn&#x2F;&#x2F;rdNC2&#x2F;8xLxgM2ThqpygZlw0RPoFYBxZP8Wg0w0ZNy&#x2F;X&#x2F;&#x2F;NExA0SAZaoAchQANM54qRlB6FMgFQBoLJQGwVRDzEk6TF7O35&#x2F;X&#x2F;&#x2F;++je56KsujHgNBQMO9WrSpxz1oNa6nRzq48TqJrKrDZDoIsgl70WSeo&#x2F;9V9qsDAQMSBAxgKAT&#x2F;&#x2F;NExBgREYagAGjElKrtrqJLUrf+Urf+hn&#x2F;8pnKVgwEBQLJcqGrYiK8qd7WQ1g1UebrBWzh3LBqHajqJUyEUBIAzVCJFVqkRl3ZTGaX+U1Nvtn8st&#x2F;38GJUgzAUk97n4&#x2F;&#x2F;NExCYQwIo4AVsYAJe6p&#x2F;9nspf6&#x2F;blnq55giEoaTW4GXViLuDfdZsrqGwmKgsQoBl27gHoB+fiZjMd7gZ0yBlyYEhfvwOGxAknDVABwv&#x2F;yDkTAOEB5QtP&#x2F;&#x2F;AOKBi8LT&#x2F;&#x2F;NExDYgIypYAZKgAMLFBQ4gH&#x2F;&#x2F;kAFyFocwcwnB3f&#x2F;&#x2F;iChIG6jQQXFjIoGJ&#x2F;&#x2F;&#x2F;&#x2F;xjhAAXIQQqFIQEGQC5gkIlD&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;FwHhQAhQdgfIJQIgI8NDQi5eJyjjWy4hIhdEn&#x2F;&#x2F;NExAgUWeqwAY9QAHeJ0W1Tj0WhCBqwvjIYgXRKNgbBgCwBQGAgnQShZc4Bt557EJpjap8ekqGmponzz+3KOzuYps88xtd7Hf&#x2F;&#x2F;5QjwK0n&#x2F;+6dFyiE1TjT6EAU8CoBc&#x2F;&#x2F;NExAkUCWacAZiAATLy1TKlZtIYB1m7GsbBEAi1CCibg+4eiBSErC5sN&#x2F;EyI4omMipVMpEGoW6Xb9ajpqYrZIpFMuUGSVpHEKVEpGaLH0lmZ8ARqkwy9SzQMMzZzUvk&#x2F;&#x2F;NExAsVCWqQAZmAAch2RQXFMEKEp8gcdDR9VjhkEMiClgFoMujDEpCaldIyNpEiq6RN6d9JdS1fqSOkBIapaBwpm3UmYqJocpFkXKxUJ8unzSZpGUVVMInNIhAxaHd3&#x2F;&#x2F;NExAkTyU5sAZqgAAxAEsFYbRfzpSP4ZdcHLY1QS4DWMwM6QDYwCRAbUWloojHDnFZX+oyRZX&#x2F;ooyiLNFDdSy7+WBSQpcc43LqNIxR+d&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;UqFJMtWzODE37mleP0&#x2F;&#x2F;NExAwP6MIEAc8YACVqasV+&#x2F;kg5hV3vBlcGwlyoa7CHjWBRUqVVYKh26MFVXLNVCxA1Qb&#x2F;r76mzqm&#x2F;1Jd&#x2F;&#x2F;&#x2F;NUFkJYtqhgIdHTsxFGAEBhIoKBTxpI8ackaiaqqsiUu&#x2F;&#x2F;NExB8SoK3YAHmMTF8OtE5IFSUrYWJKApK9p4KwkBQK67IhIGQKp&#x2F;uf4u7URJM+WLEmdMsn6fj1TEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMu&#x2F;&#x2F;NExCcAAANIAAAAADEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVKUNWMgWg&#x2F;&#x2F;NExHoAAANIAAAAACHliEMM0k5K0caDKo4TELJC5sQGQuiDCokLvQZPahTC7ZAyjSYUyZ8IOwGCEBxwBXj5dNCdXhOaZ&#x2F;xKYQhFDEf&#x2F;YsjSYT2&#x2F;uEeQeWd&#x2F;6HkSyP&#x2F;&#x2F;&#x2F;&#x2F;NExKwAAANIAAAAAIgRwJ7O&#x2F;85ZCzP&#x2F;9yKdJtUR0ngxhgmoLcf5LTuBkAxOGUmo+NoVjQKgAixpFRJ8&#x2F;a6dE5ZGEiwLkgoFQEDpFlQFBERBo87JEQmEgL2hUBAYkzUV&#x2F;&#x2F;NExKwAAANIAAAAACJI8&#x2F;tPBIf61liTPSROv+MGIQhwio7C3oYf6IP8&#x2F;GB&#x2F;APQWRJCSzCaC0SQkUKFkE1JCQwUKCdDlj&#x2F;+TWTzJla2ORqyggVBMy7&#x2F;WyaBkVFg8aCoo&#x2F;&#x2F;NExP8aEXHAAHpGld&#x2F;9QsKzISF2dnWz8VFFTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMu&#x2F;&#x2F;NExOkVMLXgAHpMTDEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMu&#x2F;&#x2F;NExOcToSlIAHmGcDEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVOz6bk8c3&#x2F;&#x2F;NExKwAAANIAAAAAOA9Vlrz3nL8PiYT4+EUiz2Sd6PDul84zL7jCNqeNZJ184S0WDkeIDOVMMk5RC7Dj3S3ODRkg2YXHzIZXlMW08gzUh&#x2F;zPRDQM+oEQz5RNTPAIQM1&#x2F;&#x2F;NExKwAAANIAAAAAJLvMk42YweTFDHKIpMpEUQyzgjzLfAtMtoOgyuRvTI+LGMNM10yOjfTNJK2M&#x2F;ocs0PQ3DRSBONEsVk0IiUDOrNTMnI+BVVzCk0jW+uRYjOFMEHC&#x2F;&#x2F;NExKwAAANIAAAAAOOmG48&#x2F;U5E3&#x2F;i82KYUhBBCBDCED1i3ibi5lzUb9+r1BE9HjI8pr+Gr0PQ9D1fH1Dfq9Xq9&#x2F;uj9+&#x2F;fv3fR3064s65zd&#x2F;0QQiIiO4cDeJ&#x2F;ET9z&#x2F;6+&#x2F;&#x2F;NExP8nYLQMAPe8TInxERERz&#x2F;ruf&#x2F;T90RERET9z4XoW7u7uiIiIW6BABQYsFVTKRyRlMQ0zVKkAypWIxWah63yVS5uNJRK45lUboR0HKPUTogw9RCjqhq2ZOmioXr1h&#x2F;&#x2F;NExLQfov3oAMPGuXurQWFWva4hPnz17WvtCjbtbea11a2rPo1t&#x2F;FlgqgIDAIUpfxjVgYCJ6qxS&#x2F;1AVYCFGuzfxj43PjMwEBF681X&#x2F;Zj+qX&#x2F;6hQFS&#x2F;9S4zMf7M2oVkG&#x2F;&#x2F;NExIghsx3oAMPGvNBaROBXx+FeXk6k6FQeA8QEZARlC50ougDhJISKFCQIsw8w8wosRhkBC4qK7f&#x2F;FRUUFjQ8VlgWFhcVDLuFRUUFjT+oWFxVMQU1FMy4xMDBVVVVV&#x2F;&#x2F;NExFQRwJkwAHpMTFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV</span><br></pre></td></tr></table></figure><p>今回はしませんが繰り返し利用するのであればスクリプト組んでおくと便利ですね。</p><p>そしてbase64をmp3に変換します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil <span class="literal">-decode</span> base64.txt future.mp3</span><br></pre></td></tr></table></figure><p>テキストから生成した音声はこちらになります。</p><p><br><br></p><audio controls>  <source src="/images/20210312/future.mp3"></audio><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>慣れないツールを利用したせいかところどころ躓きましたが無事テキストから音声を生成することができました。<br>難しい設定も不要でお手軽に自然な音声が生成できるのは素晴らしいですね。音声を生成する時間も早いと感じました。Webページにデモもありどんなものか試せる点も良いですね。</p><p>高音域まで聞こえるスピーカーで聞くと若干ノイズが気になりますが、電話を通じた音声に利用したりするには十分かと思います。</p><p>公式によるユースケースは<a href="https://cloud.google.com/text-to-speech?hl=ja#section-6">こちら</a>を参照</p><p>今回作成したプロジェクトを削除して終わりです。</p><p>明日は前原さんの<a href="/articles/20210315/">Cloud Build を知ってみよう</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGの村瀬です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20200218/&quot;&gt;昨年&lt;/a&gt;に続き</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="TextToSpeech" scheme="https://future-architect.github.io/tags/TextToSpeech/"/>
    
  </entry>
  
</feed>
