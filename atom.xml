<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-04-12T01:43:57.632Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KVSと二年間向き合って得たナレッジを還元する時がきた</title>
    <link href="https://future-architect.github.io/articles/20210412a/"/>
    <id>https://future-architect.github.io/articles/20210412a/</id>
    <published>2021-04-11T15:00:00.000Z</published>
    <updated>2021-04-12T01:43:57.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、Technology Innovation Group所属 DBチームの岩崎です。</p><p>テックブログにて記事を書くのは1年半ぶりです。(反省)あれからずっと設計～開発まで推進し、無事アプリリリースが完了しました。</p><ul><li><a href="/articles/20190718/">— 脱RDB脳 — Cassandraのデータモデルについて考えてみる</a></li></ul><p>このタイミングで改めてKVS関連のナレッジを還元できたらと思い筆を執りました。</p><h2 id="1-データモデル設計の勘所"><a href="#1-データモデル設計の勘所" class="headerlink" title="1. データモデル設計の勘所"></a>1. データモデル設計の勘所</h2><p>前回の記事でも書かせていただきましたが、KVSを採用するにあたって一番ポイントになるのがデータモデル設計です。</p><p>ここを外すと、開発で大いに苦しみます。場合によっては要件を満たせず再設計ORノックアウトなんてことにも繋がりかねません。</p><h3 id="1-1-更新要件を中心に設計するのがベター"><a href="#1-1-更新要件を中心に設計するのがベター" class="headerlink" title="1-1. 更新要件を中心に設計するのがベター"></a>1-1. 更新要件を中心に設計するのがベター</h3><p>KVSはキーアクセスしかできないので<strong>データ参照にフォーカスしたモデルを設計しがち</strong>です。</p><p>もちろんこのアプローチは全然悪くないのですが、どのようにデータを取得するかに意識が偏り実は<strong>更新要件が満たせていない・・・</strong>なんてことにならないように気を付ける必要があります。</p><p>KVSは分散処理でハイパフォーマンスを実現する代わりにトランザクション管理を犠牲にしています。そのため、データの整合性を担保した更新は苦手なためデータモデルを工夫する必要があります。</p><h3 id="1-2-その更新は”部分更新”なのか？”全体更新”なのか？"><a href="#1-2-その更新は”部分更新”なのか？”全体更新”なのか？" class="headerlink" title="1-2. その更新は”部分更新”なのか？”全体更新”なのか？"></a>1-2. その更新は”部分更新”なのか？”全体更新”なのか？</h3><p>アプリケーションからKVSに対してReadだけでなくWriteも発生する際は対象データの更新範囲を意識する必要があります。例えば、ログデータのように一度書き込んで以後更新が発生しないようなデータ特性であればKVSは適しており、データ整合性の保証も容易で扱いやすいです。</p><p>ただし、トランザクションデータで更新が発生する際は、<strong>データ整合性をどこまで保証するか？</strong>というのがデータモデルを考える上で非常に重要なポイントとなります。</p><p>Cassandraではデータをスキーマ定義してテーブル管理しているため、データ更新時はレコード全体ではなく特定のカラムに対して、UPDATE(部分更新)をかけることができます。</p><p>そのため、複数ユーザーがそれぞれ別のカラムに対して部分更新をかけるのであれば、更新対象が分離しているため、同時更新時もデータ整合性は担保できます。またRDBのように行単位でロックを取得しないため、同一キーに対する更新であってもロック待ちが発生せず高速に書き込み処理を行うことができます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新対象が分離していれば同時更新もOK。行ロックも取得されない。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Aの更新処理</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span> <span class="keyword">SET</span> title = <span class="string">&#x27;a-title&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="comment">-- Bの更新処理</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span> <span class="keyword">SET</span> <span class="keyword">body</span> = <span class="string">&#x27;b-body&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新対象が重複していればあと勝ちになる</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Aの更新処理</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span> <span class="keyword">SET</span> title = <span class="string">&#x27;a-title&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="comment">-- Bの更新処理</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span> <span class="keyword">SET</span> title = <span class="string">&#x27;b-title&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span></span><br></pre></td></tr></table></figure><p>このように複数ユーザーから同時更新がかかる要件がある場合は、<strong>更新対象が分離できるか？</strong><br>また、<strong>更新対象が重複時はあと勝ちが許容できるか？</strong>というのを明確にする必要があります。</p><p>ただし、<strong>データモデルのネストが深くなるとUPDATE可能な範囲に制約が発生する</strong>点に注意です。<br>この制約を見落とした設計を行うと、部分更新できずに更新要件を満たせない！なんてことになります。</p><p>例えば、結合ができないという観点から親子関係を持ったデータモデルで考えてみます。<br>更新要件は同一カラムに対しての更新はあと勝ちで良いが、別カラムの更新は整合性を担保するとします。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ユーザー定義型(UDT)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="keyword">child</span>(</span><br><span class="line">    child_col_1      <span class="built_in">text</span></span><br><span class="line">    child_col_2      <span class="built_in">text</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- テーブル定義</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">parent</span>(</span><br><span class="line">    <span class="keyword">id</span>                <span class="built_in">text</span></span><br><span class="line">  , parent_col_1      <span class="built_in">text</span></span><br><span class="line">  , parent_col_2      <span class="built_in">text</span></span><br><span class="line">  , children      <span class="keyword">map</span>&lt;<span class="built_in">text</span>, frozen&lt;<span class="keyword">child</span>&gt;&gt; <span class="comment">-- valueの型に上記のUDTを利用</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Cassandraではネストが深くなると(第三階層移行)frozenを使用しないと定義できません。<br>親のカラム「parent_XXX」はfrozenされていないので、部分更新をかけることが可能です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- frozenされていないカラムの部分更新は可能</span></span><br><span class="line"><span class="comment">-- Aの更新処理</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">parent</span> <span class="keyword">SET</span> parent_col_1 = <span class="string">&#x27;a&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="comment">-- Bの更新処理</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">parent</span> <span class="keyword">SET</span> parent_col_2 = <span class="string">&#x27;b&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span></span><br></pre></td></tr></table></figure><p>親のカラム「children」の更新はMapのValueにあたるchild型がfrozenされているため、子のカラム「child_XXX」は部分更新ができず、子のモデル全体で更新を行う必要があります。<br>frozenされたカラムの部分更新をしようとすると、他の項目がnullになってしまいます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- frozenされたカラムの更新は全体更新になる</span></span><br><span class="line"><span class="comment">-- Aの更新処理</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">parent</span> <span class="keyword">SET</span> children[<span class="number">01</span>] = &#123;<span class="string">&#x27;child_col_1&#x27;</span>: <span class="string">&#x27;a-1&#x27;</span>, <span class="string">&#x27;child_col_2&#x27;</span>: <span class="string">&#x27;a-2&#x27;</span>&#125; <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span>;</span><br><span class="line"><span class="comment">-- Bの更新処理</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">parent</span> <span class="keyword">SET</span> children[<span class="number">01</span>] = &#123;<span class="string">&#x27;child_col_1&#x27;</span>: <span class="string">&#x27;b-1&#x27;</span>, <span class="string">&#x27;child_col_2&#x27;</span>: <span class="string">&#x27;b-2&#x27;</span>&#125; <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- frozenされたカラムの部分更新をしようとすると、他の項目がnullになってしまうので注意</span></span><br><span class="line"><span class="comment">-- Aの更新処理</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">parent</span> <span class="keyword">SET</span> children[<span class="number">01</span>] = &#123;<span class="string">&#x27;child_col_1&#x27;</span>: <span class="string">&#x27;a-1&#x27;</span>&#125; <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span>;</span><br><span class="line"><span class="comment">-- child_col_2の値はnullになる</span></span><br></pre></td></tr></table></figure><p>このように本来child_col_1だけ更新したいはずなのにchild_col_2のデータも含めた全体更新にせざるを得ないため、ネストの深い項目に対する同時更新時のデータ整合性を保証できずに更新要件が満たせなくて詰んでしまう・・・なんてことになりかねません。</p><p>そのため、更新要件次第ではあえて<strong>テーブルを分離させてfrozenを避ける</strong>というのも案の一つです。<br>もちろん子テーブル参照時は親からキーを手繰る必要があるので参照性にはデメリットもあります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">child</span>(</span><br><span class="line">    <span class="keyword">id</span></span><br><span class="line">  , child_col_1      <span class="built_in">text</span></span><br><span class="line">  , child_col_2      <span class="built_in">text</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">parent</span>(</span><br><span class="line">    <span class="keyword">id</span>                <span class="built_in">text</span></span><br><span class="line">  , parent_col_1      <span class="built_in">text</span></span><br><span class="line">  , parent_col_2      <span class="built_in">text</span></span><br><span class="line">  , parent_col_3      <span class="built_in">text</span></span><br><span class="line">  , children_rel      <span class="keyword">set</span>&lt;<span class="built_in">text</span>&gt;</span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1-3-パーティション検索も念頭に入れておく"><a href="#1-3-パーティション検索も念頭に入れておく" class="headerlink" title="1-3. パーティション検索も念頭に入れておく"></a>1-3. パーティション検索も念頭に入れておく</h3><p>一般的にKVSは単一キーによるプライマリーキーアクセスしかできないと思われがちです。</p><p>Cassandraではテーブル定義時にパーティションキーと呼ばれるデータの物理配置を管理するキーを定義します。このパーティションキー単位でデータをクラスタ化して管理しておりCQLではWHERE句にパーティションキーを指定してクラスタ単位でデータ操作を行うことができます。</p><p>例えば下記のように、パーティションキーを日付にしたテーブルを作成します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PTキーがdateのテーブル</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span>(</span><br><span class="line">    <span class="built_in">date</span>             <span class="built_in">text</span></span><br><span class="line">  , <span class="keyword">id</span>               <span class="built_in">text</span></span><br><span class="line">  , <span class="keyword">body</span>             <span class="built_in">text</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>((<span class="built_in">date</span>), <span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>このテーブルにデータを格納した時のイメージは下記になります。</p><table><thead><tr><th>date</th><th>id</th><th>body</th></tr></thead><tbody><tr><td>2021-03-20</td><td>01</td><td>01-hoge</td></tr><tr><td></td><td>02</td><td>02-hoge</td></tr><tr><td></td><td>03</td><td>03-hoge</td></tr><tr><td>2021-03-21</td><td>04</td><td>04-hoge</td></tr><tr><td></td><td>05</td><td>05-hoge</td></tr></tbody></table><p>このように日付をパーティションキーにすることで1クエリで日付単位のデータアクセスが可能になるため、キーアクセスの連射が不要になります。</p><p>また、日単位でデータ削除なども可能になるのでパーテイション設計は重要になります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="built_in">date</span> = <span class="string">&#x27;2021-03-20&#x27;</span> ;</span><br><span class="line"><span class="comment">-- &#x27;2021-03-20&#x27;の範囲のデータ3件を取得することができる</span></span><br></pre></td></tr></table></figure><p>先述の親子関係のテーブルを分離する際も子テーブルに親IDをパーティションキーに設定することで、親ID指定するだけでキーアクセスの連射することなく取得できるようになります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- parent_idをパーティションキーに設定</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">child</span>(</span><br><span class="line">    parent_id        <span class="built_in">text</span></span><br><span class="line">  , child_id         <span class="built_in">text</span></span><br><span class="line">  , child_col_1      <span class="built_in">text</span></span><br><span class="line">  , child_col_2      <span class="built_in">text</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>((parent_id), child_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">parent</span>(</span><br><span class="line">    parent_id         <span class="built_in">text</span></span><br><span class="line">  , parent_col_1      <span class="built_in">text</span></span><br><span class="line">  , parent_col_2      <span class="built_in">text</span></span><br><span class="line">  , parent_col_3      <span class="built_in">text</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>(parent_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>この時childは下記のようなイメージでデータが格納されます。</p><table><thead><tr><th>parent_id</th><th>child_id</th><th>child_col_1</th><th>child_col_2</th></tr></thead><tbody><tr><td>p-01</td><td>c-01</td><td>aaa</td><td>aaa</td></tr><tr><td></td><td>c-02</td><td>bbb</td><td>bbb</td></tr><tr><td></td><td>c-03</td><td>ccc</td><td>ccc</td></tr><tr><td>p-02</td><td>c-01</td><td>ddd</td><td>ddd</td></tr><tr><td></td><td>c-02</td><td>eee</td><td>eee</td></tr></tbody></table><p>親IDを指定するだけで子要素が一括で取得できるのでパーティションキーを適切に設計することで効率的なアクセスが可能になります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">child</span> <span class="keyword">WHERE</span> parent_id = <span class="string">&#x27;p_02&#x27;</span> ;</span><br><span class="line"><span class="comment">-- &#x27;p_02&#x27;の範囲のデータ2件を取得することができる</span></span><br></pre></td></tr></table></figure><p>ただし、パーティションキーを設計する際に気を付けるべき点があります。</p><p>理由は運用設計の勘所にて詳細説明しますが、<strong>1パーティションサイズが100MB以上にならないようにする</strong>というのが重要になります。<br>トランテーブルに対して年や月など粒度の大きな単位でパーティションキーを設計すると1パーテイションに大量のデータがクラスタ化されて100MBを超えてしまうということに陥りやすいので注意が必要です。</p><h3 id="1-4-クラスタリングキーを利用してデータ格納時のソート順を制御する"><a href="#1-4-クラスタリングキーを利用してデータ格納時のソート順を制御する" class="headerlink" title="1-4. クラスタリングキーを利用してデータ格納時のソート順を制御する"></a>1-4. クラスタリングキーを利用してデータ格納時のソート順を制御する</h3><p>先ほどパーテイションキー単位でクラスタ化するという話をしましたが、<strong>データ格納時にクラスタ化されたデータのソート順(ASC/DESC)を指定すること</strong>ができます。</p><p>通常、カラムはアルファベットの昇順でソートされますが例えばチャットのデータなどを一覧表示する際に最新日付順に表示したいなどソート条件が決まっている場合は、クラスタリングキーでソート順を指定することでデータ格納時に制御することができます。</p><p>こうすることで、アプリケーション上でCassandraから取得したデータをソートしなおすなどの無駄なフェーズを省くことができるため非常に重要な設計になります。</p><p>クラスタリングキーのソート順はあとから変更できないので注意です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> chat(</span><br><span class="line">    chatroom_id      <span class="built_in">text</span></span><br><span class="line">  , chat_post_date   <span class="built_in">text</span></span><br><span class="line">  , chat_id          <span class="built_in">text</span></span><br><span class="line">  , chat_body        <span class="built_in">text</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>((chatroom_id), chat_post_date, chat_id)</span><br><span class="line">) <span class="keyword">WITH</span> <span class="keyword">CLUSTERING</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> (chat_post_date <span class="keyword">DESC</span>);</span><br></pre></td></tr></table></figure><h3 id="1-5-staticを利用したテーブル集約"><a href="#1-5-staticを利用したテーブル集約" class="headerlink" title="1-5. staticを利用したテーブル集約"></a>1-5. staticを利用したテーブル集約</h3><p>staticカラムを利用してテーブル集約ができるケースがあります。</p><p>これに関しては前回の記事で詳細を説明しているので下記ご参考ください。<br><a href="https://future-architect.github.io/articles/20190718/">https://future-architect.github.io/articles/20190718/</a></p><h2 id="2-トランザクション管理の勘所"><a href="#2-トランザクション管理の勘所" class="headerlink" title="2. トランザクション管理の勘所"></a>2. トランザクション管理の勘所</h2><p>一般的にKVSはトランザクション管理ができないと理解されていますが、Cassandraでは単一行に対しては<strong>Compare and Set（CAS）</strong>と呼ばれる軽量トランザクションを利用することでトランザクション管理を実現することができます。</p><h3 id="2-1-単一行に対してはトランザクション管理可能"><a href="#2-1-単一行に対してはトランザクション管理可能" class="headerlink" title="2-1. 単一行に対してはトランザクション管理可能"></a>2-1. 単一行に対してはトランザクション管理可能</h3><p>単一行に対してINSERT及びUPDATEクエリにIF句を利用することで、軽量トランザクションによる一意のデータ挿入や楽観ロック的な更新が可能になりデータ整合性を守るのに役立ちます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span>(<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;01&#x27;</span>) <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span> <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">&#x27;iwasaki&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span> <span class="keyword">IF</span> lock_flg = <span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure><p>データ整合性を保証できるのでつい軽量トランザクションを多用したくなりますが、軽量トランザクションはPAXOS合意と呼ばれるアルゴリズムで下記の4フェーズで実装されておりCASコーディネーター間で往復が発生し、非軽量トランザクションに比べて操作のレイテンシーが4倍に増加するとドキュメントで明文されてます。</p><p><a href="https://docs.datastax.com/ja/dse/5.1/cql/cql/cql_using/useInsertLWT.html">https://docs.datastax.com/ja/dse/5.1/cql/cql/cql_using/useInsertLWT.html</a></p><blockquote><p>1.準備/約束<br>2.読み取り/結果<br>3.提案/受諾<br>4.コミット/確認</p></blockquote><p>また、行ロックを取得するということは同時更新時のパフォーマンスが著しく低下する可能性が高くなるので全ての処理を軽量トランザクションに寄せるのではなく、データ整合性を厳格に管理する必要がある処理に絞って利用するのがベターです。</p><p>ただし、私のプロジェクトでもID採番処理などでCASを採用するケースはあり、性能テストでは1CASあたり約50~100ms前後の処理時間をマークしていました。</p><p>アプリケーション特性にもよりますが、100ms台であれば許容される場面は多いと思うので多少の性能劣化はあれど、CASの利用を踏まえたモデル設計もありだと個人的には考えています。</p><h3 id="2-2-同一PTキーの更新であればバッチ処理時に原子性が保証される"><a href="#2-2-同一PTキーの更新であればバッチ処理時に原子性が保証される" class="headerlink" title="2-2. 同一PTキーの更新であればバッチ処理時に原子性が保証される"></a>2-2. 同一PTキーの更新であればバッチ処理時に原子性が保証される</h3><p>Cassandraでは複数のDML文(SELECTを除く)を組み合わせてバッチ処理でリクエストを集約できます。</p><p>バッチ処理を利用することでクライアント-サーバー間のトラフィックを削減できるというメリットがありますが、<strong>1つのパーティションをターゲットとするバッチ処理であればアトミック性(原子性)を担保することができる</strong>というメリットもあり非常に便利です。</p><p>また、同一パーティションであれば先述した軽量トランザクションも利用可能です。</p><p>ただし、<strong>実行の順序性は保証されない</strong>という点には注意が必要です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 同一パーティションキーに対する更新であれば原子性が保証される</span></span><br><span class="line"><span class="keyword">BEGIN</span> BATCH</span><br><span class="line">  <span class="keyword">UPDATE</span> <span class="keyword">test</span> <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">&#x27;iwasaki&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span>;</span><br><span class="line">  <span class="keyword">UPDATE</span> <span class="keyword">test</span> <span class="keyword">SET</span> title = <span class="string">&#x27;hoge&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">&#x27;01&#x27;</span>;</span><br><span class="line">APPLY BATCH;</span><br></pre></td></tr></table></figure><p>このバッチ処理で便利な点は同一パーティションキーという点にあります。</p><p>実は同一テーブルという制約はなく、<strong>同一パーティションキー(キーの中身が同じ)であれば、別テーブルであってもバッチ処理で原子性を担保した更新処理を実行することができます。</strong></p><p>例えば最新断面のみを管理する記事テーブルと記事の全リビジョンを管理する記事リビジョンテーブルを用意し、両者のテーブル構造は同じでパーティションキーも揃えておきます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> art(</span><br><span class="line">    <span class="keyword">id</span>            <span class="built_in">text</span></span><br><span class="line">  , title         <span class="built_in">text</span></span><br><span class="line">  , <span class="keyword">body</span>          <span class="built_in">text</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> art_revision(</span><br><span class="line">    <span class="keyword">id</span>            <span class="built_in">text</span></span><br><span class="line">  , revision      <span class="built_in">int</span></span><br><span class="line">  , title         <span class="built_in">text</span></span><br><span class="line">  , <span class="keyword">body</span>          <span class="built_in">text</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>((<span class="keyword">id</span>), revision)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>通常KVSでテーブル分離すると更新時のトランザクションが分かれるためエラー時に片方だけ更新されなかった、などのデータ不整合が発生する可能性が高くなります。</p><p>が、先述した同一パーティションキーに対するバッチ処理で更新を行えばテーブル分離しても両者のテーブルの原子性を担保した更新が可能になります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> BATCH</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(<span class="keyword">id</span>, <span class="keyword">body</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;test&#x27;</span>) <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>;</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_revision(<span class="keyword">id</span>, revision, <span class="keyword">body</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;01&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">APPLY BATCH;</span><br></pre></td></tr></table></figure><p>このようにリビジョンテーブルと分離ができると、アプリケーションからのデータアクセスが容易になる上にデータ整合性も担保しやすくなるので非常におすすめです。</p><p>また、バッチ処理の中に軽量トランザクション(CAS)を含めることもできます。</p><p>ただし、下記のように注意点もあります。</p><blockquote><ol><li>バッチ処理内に複数パーティションに対する更新が含まれる際は原子性は保証されない(リクエストの集約にはなり、実行エラーにはならない)</li><li>バッチ処理内のDMLの実行順序は保証されない(更新順序に依存させない。順不同で冪等にする必要がある)</li><li>バッチ処理内で軽量トランザクションを利用する際は単一パーテイションのみ可能(複数パーテイション更新になる場合は実行エラー発生)</li></ol></blockquote><p>基本的にはメリットが多く、バッチ処理をうまく利用することでデータ整合性を保証しつつ性能面の向上も見込めるためおすすめです。</p><h2 id="3-アプリケーション開発の勘所"><a href="#3-アプリケーション開発の勘所" class="headerlink" title="3. アプリケーション開発の勘所"></a>3. アプリケーション開発の勘所</h2><p>私のPJではデータストアとして業務データを管理するdatastax(KVS)、全文検索機能としてElasticsearch、オンプレ構成だったのでアーカイブ用にDynamoDBを採用しており、複数のデータストアが混在していました。</p><p>アプリ開発者にデータストア層を意識させるのは非常に困難かつ、データ整合性を担保できないと考え、<strong>業務ロジックを実装するHandlerとデータの整合性を保証したCRUD機能を提供するPersister層</strong>に分離しました。</p><p><img src="/images/20210412/datastore_api.png.jpg"></p><p>APIコールすると紐づくHandler(業務ロジック)が呼び出され、Handler内で発生するデータストアへのCRUDは全てPersisterクラスの共通メソッドを呼び出すことでデータストア層を隠蔽化しています。</p><h3 id="3-1-gRPCモデルを利用したCRUD機能を提供"><a href="#3-1-gRPCモデルを利用したCRUD機能を提供" class="headerlink" title="3-1. gRPCモデルを利用したCRUD機能を提供"></a>3-1. gRPCモデルを利用したCRUD機能を提供</h3><p>]<br>クライアント/サーバー間のAPI連携にはgRPCを採用しました。datastaxはCassandraベースの製品でデータアクセスはCassandraと同じCQLを利用します。</p><p>CQLはSQLライクで、従来のRDBアプリ開発者にも直感的に記述できるインターフェースです。とはいえ、コレクション型(Map,Set)の更新や軽量トランザクション(CAS)やバッチクエリなどCassandra特有のクエリもあり、少なからず学習コストがあります。</p><p>アプリ開発者がCQLを意識せずに実装できるようにするためPersisterレイヤーにCRUD及びCASなどの機能を持ったメソッドを共通実装して提供し、<strong>引数に対象エンティティに合わせたgRPCのモデルを渡せばモデルクラスから動的にCQLを組み立ててクエリ実行できる</strong>よう処理を隠蔽化しました。</p><p>Elasticserch、DynamoDBへのCRUDも同様にPersisterレイヤーで隠蔽化しています。私のqiitaでgRPCを用いた設計開発のノウハウを公開していますので是非参考頂けたらと思います。</p><p><a href="https://qiita.com/yatarou/items/5f49b91ebb5229e2f0c1">https://qiita.com/yatarou/items/5f49b91ebb5229e2f0c1</a></p><h3 id="3-2-処理ごとにCONSISTENCY-LEVELを意識する"><a href="#3-2-処理ごとにCONSISTENCY-LEVELを意識する" class="headerlink" title="3-2. 処理ごとにCONSISTENCY LEVELを意識する"></a>3-2. 処理ごとにCONSISTENCY LEVELを意識する</h3><p>CONSISTENCY LEVELとはCQLクエリ発行時の非軽量トランザクションを適切に処理するために</p><p>応答する必要があるレプリカ内のノードの数を決定します。</p><p>下記によく利用するCONSISTENCY LEVELとユースケースを整理してみました。</p><table><thead><tr><th>Level</th><th>範囲</th><th>ユースケース</th></tr></thead><tbody><tr><td>ALL</td><td>すべてのレプリカに問い合わせ、書き込みの完了をもって成功とする</td><td>CONCISTENCYレベルONEで読み取りを行ってもデータの整合性を担保したいとき。ALLは処理性能・可用性を犠牲にするため基本は推奨しない。</td></tr><tr><td>QUORUM</td><td>全てのデータセンターの全ノードの過半数の完了をもって成功とする。</td><td>過半数の成功で良いためALLに対して可用性は高い。が、「全てのデータセンター」の過半数なのでマルチセンターで両アクティブ構成でなければやりすぎ。</td></tr><tr><td>LOCAL_QUORUM</td><td>コーディネーター(処理要求を出すノード)と同じデータセンター内の過半数の完了を待って成功とする。</td><td>QUORUMに対してデータセンター間のレイテンシーを避けることができる。また、過半数の書き込みが整合性を保証するため、読み取り時も同一レベルを設定することで読み取り整合性も保証できる。基本的にはこのレベルで処理を行うことを推奨する。</td></tr><tr><td>ONE</td><td>コーディネータ－から最も近いノードに処理が成功した時点で完了とする。</td><td>1ノードにしか処理を行わないのでONEで書き込まれたデータを参照するときはデータ整合性が保証されない可能性があるため、データ登録後にUPDATEをかけないようなデータに向いている。また、レイテンシーが最も低いのでハイトランザクションのread/writeには強いため性能を最重視する際は検討しても良い。書き込まれたデータはノード間で非同期でレプリカコピーが行われる。(ALL以外はコピー実施される)</td></tr></tbody></table><h3 id="3-3-KVS-Elasticsearch間のデータ同期の考え方"><a href="#3-3-KVS-Elasticsearch間のデータ同期の考え方" class="headerlink" title="3-3. KVS-Elasticsearch間のデータ同期の考え方"></a>3-3. KVS-Elasticsearch間のデータ同期の考え方</h3><p>KVSだけでは満たせない全文検索などの機能を利用するためにElasticsearchを採用しました。Persisterの重要な役割の一つにdatastax(KVS)とElasticsearchのデータ同期がありました。</p><p>まず、<strong>Elasticsearchの検索インデックスはKVSのテーブルと1対1の関係</strong>にしました。これはKVSが結合できないため複合インデックスにするとデータ保証しきれないためです。</p><p>次にポイントとなるのがデータ連携のタイミングです。</p><p>Elasticsearch上のデータは主管データではなく、あくまで検索補完の位置づけなので更新フローは<strong>「KVS-&gt;Elasticsearch」として必ずKVS側から更新する</strong>ようにしました。KVSを更新せずにインデックスのみ更新するフローも原則禁止としています。更新順序に依存関係を持たせることでKVSの更新エラー時に検索インデックスだけ更新されてKVSにはデータがないのに検索はヒットするといった不整合を防ぐことができます。</p><p>また、KVSは1レコードサイズが肥大化しがちなので<strong>KVS更新時に検索項目が含まれている時のみElasticsearchへのインデックス同期すること</strong>を推奨します。こうすることでインデックスサイズの削減、同期不要時の処理性能向上が見込めます。更新順序制御や更新時のインデックス同期判定を業務ロジック上で判断させるのは困難なためPersisterのKVS更新メソッドの引数に渡すgRPCモデルのフィールドオプションにインデックス化する項目に対してカスタムオプション定義をしておき更新制御を行いました。</p><p>KVSからElasticsearchのデータ連携は基本的に同期処理で行っているのですが、Elasticsearchはインデクシングまでは同期処理で、連携されたデータを即時に検索できるようにするか、非同期で準リアルタイム(といっても数百msの世界)で検索できるようにするかをrefreshと呼ばれるオプションで制御することができます。</p><p><img src="/images/20210412/001_refresh_flush.png"></p><p>検索可能なSegment領域へのrefreshは基本的に非同期(false)を推奨します。</p><p><strong>refreshを同期的(true)に行うと、KVSへの連射更新時やSegmentのmerge処理が走るとパフォーマンスに大きな影響を与えかねません。</strong></p><p>Elasticsearchの公式ドキュメントでもrefresh同期は性能影響を与えると言及しています。refresh_intervalと呼ばれるパラメータでrefreshが定期実行されるのでそれに任せます。ただし、業務ロジック上でインデックス更新直後に即座に検索クエリを投げて対象の更新データを取得して後続処理を行うようなケースがある場合はrefresh_intervalで検索可能なインデックスへの書き出しが間に合わず検索にヒットしない、というケースが稀にあります。<br>そのため、refresh同期反映が必要な場合はPersisterから更新時にrefreshオプションを渡せるようにも工夫しました。</p><p>ちなみに更新時ではなくインデックスを指定して強制的にリフレッシュを実行するrefreshAPIがElasticsearchは提供していますが、このAPIはインデックス全体を対象としたrefresh処理を行うので性能影響があります。更新時のrefreshオプションなら対象レコードのみrefresh対象としてくれるのでこちらを利用することを強く勧めます。</p><h3 id="3-4-更新管理テーブルを用いたBCP同期"><a href="#3-4-更新管理テーブルを用いたBCP同期" class="headerlink" title="3-4. 更新管理テーブルを用いたBCP同期"></a>3-4. 更新管理テーブルを用いたBCP同期</h3><p>KVSはマルチデータセンターでクラスタ構成を容易にとることができるためKVSを採用する背景にBCP（事業継続計画：Business Continuity Plan）要件が含まれることが多々あると思われます。<br>しかし、Elasticsearchはマルチデータセンターでクラスタを組むことができず、KVSとのデータ整合性を担保したBCPデータ同期の仕組みを考える必要がありました。</p><p>現在では有償サブスクリプション(プラチナ)でクロスクラスタレプリケーション機能を提供しているそうですが、当時はベータ版の機能だったので採用を見送りました。<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.7/ccr-getting-started.html">https://www.elastic.co/guide/en/elasticsearch/reference/6.7/ccr-getting-started.html</a></p><p>BCP要件上アクティブスタンバイ構成でリアルタイム同期の必要はなかったため、<strong>KVS側に更新管理テーブルを作成してスタンバイ側からPULL型の定期実行で同期対象の特定および対象レコードを抽出してElasticsearchに連携する仕組み</strong>を作りました。</p><p>更新管理テーブルはKVSにデータ登録・更新時に業務テーブルに書き込む前に対象レコードのPK、更新日付、BCP同期ステータスなどをまず更新管理テーブルに記録します。更新管理テーブルへの更新が完了したら、業務テーブル更新とインデックス同期を行います。</p><p>KVS上のデータはDRサイト側にもデータベースの機能で同期が図られているのでDRサイト側で定期的に更新管理テーブルをチェックしてBCP同期対象のPKを取得します。</p><p>更新管理テーブルはあくまでPKだけ管理しているので、仮にKVS側で更新管理テーブルの書き込みは成功して、業務テーブルへの書き込みが失敗していたとしても常に業務テーブルの最新データを取得してインデックスに連携するためデータ不整合は発生しません。<br><img src="/images/20210412/bcp.png.jpg"></p><h3 id="3-5-エラーハンドリング"><a href="#3-5-エラーハンドリング" class="headerlink" title="3-5. エラーハンドリング"></a>3-5. エラーハンドリング</h3><p>基本的にエラー時はアプリケーション上でリトライさせず、ユーザー画面にエラー通知を返して画面操作のリトライを促しました。</p><p>一部、軽量トランザクションを利用したロック制御を実装しており、ロックフラグをみてステータス更新をかけるような排他制御がありました。</p><p>この処理はロック取得の軽量トランザクションで更新がかけられない時はwaitを挟み、アプリケーション上でリトライをかけるように制御しました。また、DatastaxのDriver上でリトライポリシーを設定することが可能なためReadTimeoutException、WriteTimeoutExceptionに関してはリトライポリシーに従ってリトライをかけていました。リトライポリシー設定例は下記参照ください。</p><p><a href="https://docs.datastax.com/en/developer/java-driver/3.7/manual/retries/">https://docs.datastax.com/en/developer/java-driver/3.7/manual/retries/</a></p><h2 id="4-性能テスト-運用監視の勘所"><a href="#4-性能テスト-運用監視の勘所" class="headerlink" title="4. 性能テスト/運用監視の勘所"></a>4. 性能テスト/運用監視の勘所</h2><h3 id="4-1-Gatlingを利用した性能テスト"><a href="#4-1-Gatlingを利用した性能テスト" class="headerlink" title="4-1. Gatlingを利用した性能テスト"></a>4-1. Gatlingを利用した性能テスト</h3><p>性能テストは負荷テストツールのGatlingを利用しました。<br><a href="https://gatling.io/">https://gatling.io/</a><br>テストシナリオはscala言語で記述し、Gatlingテストレポートはhtml形式で出力されます<br>例えば下記のようなシナリオを想定したサンプルコードは下記になります。(環境構築は割愛)</p><blockquote><ol><li>100TPS相当の負荷をかける</li><li>負荷は一定時間同等量をかけ続ける</li><li>実行するAPIのURLは動的に変化させる</li></ol></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> perf_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.concurrent.duration._</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.gatling.core.Predef._</span><br><span class="line"><span class="keyword">import</span> io.gatling.http.Predef._</span><br><span class="line"><span class="keyword">import</span> io.gatling.jdbc.Predef._</span><br><span class="line"></span><br><span class="line">class getitemrandomtest extends Simulation &#123;</span><br><span class="line"></span><br><span class="line">    val httpProtocol = http</span><br><span class="line">        .baseUrl(<span class="string">&quot;http://localhost:1323&quot;</span>)</span><br><span class="line">        .inferHtmlResources()</span><br><span class="line">        .acceptHeader(<span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>)</span><br><span class="line">        .acceptEncodingHeader(<span class="string">&quot;gzip, deflate&quot;</span>)</span><br><span class="line">        .acceptLanguageHeader(<span class="string">&quot;ja,en-US;q=0.9,en;q=0.8&quot;</span>)</span><br><span class="line">        .upgradeInsecureRequestsHeader(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        .userAgentHeader(<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&quot;</span>)</span><br><span class="line"></span><br><span class="line">    val headers_0 = Map(<span class="string">&quot;Proxy-Connection&quot;</span> -&gt; <span class="string">&quot;keep-alive&quot;</span>)</span><br><span class="line"></span><br><span class="line">    val feeder = csv(<span class="string">&quot;article_id.csv&quot;</span>).random -- 動的パラメータをファイルに切り出しておきます</span><br><span class="line"></span><br><span class="line">    val scn = scenario(<span class="string">&quot;getitemrandomtest&quot;</span>)</span><br><span class="line">        .feed(feeder)</span><br><span class="line">        .exec(http(<span class="string">&quot;request_0&quot;</span>)</span><br><span class="line">            .get(<span class="string">&quot;/test/$&#123;id&#125;&quot;</span>)</span><br><span class="line">            .headers(headers_0))</span><br><span class="line"></span><br><span class="line">    setUp(scn.inject(constantUsersPerSec(<span class="number">100</span>) during(<span class="number">60</span> seconds))).protocols(httpProtocol)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>constantUsersPerSecは指定時間・ユーザ数でリクエストを投げ続けてくれます。</p><p>他にも便利な機能があるので公式ドキュメントを参考にしながら実装してみてください。</p><h3 id="4-2-nodetoolコマンドでクラスタの性能を監視する"><a href="#4-2-nodetoolコマンドでクラスタの性能を監視する" class="headerlink" title="4-2. nodetoolコマンドでクラスタの性能を監視する"></a>4-2. nodetoolコマンドでクラスタの性能を監視する</h3><p>Cassandraではnodetoolユーティリティと呼ばれる、クラスタ操作/監視や性能レポート出力など運用機能を提供するコマンドラインがあります。<br><a href="https://docs.datastax.com/ja/dse/5.1/dse-admin/datastax_enterprise/tools/nodetool/toolsAboutNodetool.html">https://docs.datastax.com/ja/dse/5.1/dse-admin/datastax_enterprise/tools/nodetool/toolsAboutNodetool.html</a><br>色んな機能がありますが、運用でよく使うコマンドを中心に紹介していきます。</p><h4 id="GC監視"><a href="#GC監視" class="headerlink" title="GC監視"></a>GC監視</h4><p>gcstatsコマンドは、ガーベージ・コレクション統計を出力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nodetool -u monitorRole gcstats</span><br><span class="line"></span><br><span class="line">       Interval (ms) Max GC Elapsed (ms)Total GC Elapsed (ms)Stdev GC Elapsed (ms)   GC Reclaimed (MB)         Collections      Direct Memory Bytes</span><br><span class="line">             1791392                  45                 296                   7               56561                   9                424631153</span><br></pre></td></tr></table></figure><p>Cassandraの性能劣化の原因でまず疑われるのがGCなので、上記コマンドの統計結果だけでなくjstatコマンドを利用して毎秒ファイル出力しログ監視を行うなどの仕組みも作って重点的に監視を行っていました。</p><h4 id="性能監視"><a href="#性能監視" class="headerlink" title="性能監視"></a>性能監視</h4><p>tablehistogramsコマンドで対象テーブルの過去15分間に発生したRead/Writeのレイテンシーに関する現在のパフォーマンス統計を表示します。<br>時間はマイクロ秒表記なので注意です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">nodetool -u monitorRole tablehistograms [キースペース] [テーブル名]</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>/test_table histograms</span><br><span class="line">Percentile  SSTables     Write Latency      Read Latency    Partition Size        Cell Count</span><br><span class="line">                              (micros)          (micros)           (bytes)</span><br><span class="line">50%             0.00             57.34             57.34              1916                17</span><br><span class="line">75%             0.00             57.34             98.30              1916                17</span><br><span class="line">95%             0.00             65.54            163.84              1916                17</span><br><span class="line">98%             0.00             65.54            327.68              1916                17</span><br><span class="line">99%             0.00             65.54            458.75              1916                17</span><br><span class="line">Min             0.00              0.00              0.00              1598                15</span><br><span class="line">Max             1.00            163.84           5242.88              1916                17</span><br></pre></td></tr></table></figure><p>また、proxyhistogramsコマンドでノード単位のレイテンシーを出力することができます。<br>ノード間通信の読み取りと書き込みのレイテンシー値のパーセンタイル・ランクが含まれており、<br>このコマンドを使用して、処理の遅いノードに要求が届いているかどうかを確認します。<br><strong>CAS Read/Write Latencyで軽量トランザクションのパフォーマンスもみることができます。</strong><br>軽量トランザクションを利用する際に性能懸念がある際は確認することを推奨します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nodetool -u monitorRole proxyhistograms</span><br><span class="line"></span><br><span class="line">Percentile       Read Latency      Write Latency      Range Latency   CAS Read Latency  CAS Write Latency View Write Latency</span><br><span class="line">                     (micros)           (micros)           (micros)           (micros)           (micros)           (micros)</span><br><span class="line">50%                   1310.72             163.84           41943.04               0.00               0.00               0.00</span><br><span class="line">75%                  20971.52             393.22           58720.26               0.00               0.00               0.00</span><br><span class="line">95%                  67108.86           20971.52          100663.30               0.00               0.00               0.00</span><br><span class="line">98%                  67108.86           41943.04          100663.30               0.00               0.00               0.00</span><br><span class="line">99%                  83886.08           41943.04          100663.30               0.00               0.00               0.00</span><br><span class="line">Min                    114.69              49.15           20971.52               0.00               0.00               0.00</span><br><span class="line">Max                 100663.30           50331.65          117440.51               0.00               0.00               0.00</span><br></pre></td></tr></table></figure><h3 id="4-3-kibanaを利用して処理全体の性能監視の仕組みを作る"><a href="#4-3-kibanaを利用して処理全体の性能監視の仕組みを作る" class="headerlink" title="4-3. kibanaを利用して処理全体の性能監視の仕組みを作る"></a>4-3. kibanaを利用して処理全体の性能監視の仕組みを作る</h3><p>nodetoolコマンドなどでKVSレイヤーの統計情報を取得することができますが、KVSではRDBのように複雑なSQLが実行されるようなことがないため単一クエリの性能は基本的に問題ないというケースが多いです。</p><p>そのためKVSレイヤーのみに絞って性能監視してもボトルネックが掴めない場合が多いです。アプリ全体でどこがボトルネックになっているかを追えるようなロギングが重要になります。</p><p>私のPJではフロントでグローバルトランザクションIDを払い出してそれを取りまわしていたのでグローバルトランザクションID起点で性能監視が追えるように各レイヤーでロギングしました。各レイヤーのアプリログをElasticsearchに取り込み、kibanaでグローバルトランザクションIDで横断検索しボトルネック箇所を特定できるダッシュボードを作成してチューニングを実施しました。</p><p><img src="/images/20210412/gid.png.jpg"></p><p>業務ロジック上で時間がかかっているのか、データストアへのCRUDで時間がかかっているのかを切り分けることで、チューニング対象の特定がグッとしやすくなります。</p><h3 id="4-4-1パーティションサイズが100MB以上にならないようにする"><a href="#4-4-1パーティションサイズが100MB以上にならないようにする" class="headerlink" title="4-4. 1パーティションサイズが100MB以上にならないようにする"></a>4-4. 1パーティションサイズが100MB以上にならないようにする</h3><p>Cassandraはデータ書き込み時にCONCISTENCY LEVELに応じてノードの書き込み完了を保証します。</p><p>CONCISTENCY LEVELがALLでなければクラスタ内のノードがすべて書き込みが成功しているという保証ができないため、定期的にクラスタ内のノード間でデータの整合性を合わせるためにバリデーションとデータ同期が行われています。この仕組みを”nodetool repair”と呼びます。nodetool repairによる同期が完了しないと全ノードが同じデータを持つことが保証されませんがLOCAL_QUORUMで読み書きを行っていれば、仮に3ノード中1ノードが古いデータを持っていたとしてもデータ不整合は発生しないのでアプリケーション側に影響はありません。</p><p>しかし、<strong>削除データに関してはこの同期が完了していないと問題になるケースが存在します。</strong></p><p>Cassandraでは削除データに対し、”tombstone”とよばれる論理削除フラグで管理を行っておりnodetool repair実行時にこのtombstoneも併せて同期を取ります。実際に物理削除されるタイミングはコンパクションと呼ばれるタイミングで行われるのですが仮<strong>にコンパクション実行時にtombstoneが連携されていないノードがあった場合、そのノードでは本来削除するべきデータがゾンビとして残ってしまう</strong>可能性があります。</p><p>ゾンビ状態でnodetool repairでデータ同期が行われると、削除したはずのデータが再度他のノードにデータ同期されて復活するという事象が発生してしまいます。この事象を避けるためにtombstone削除の猶予期間として各テーブルごとに”gc_grace_seconds”と呼ばれるパラメータでデフォルト864000秒（10日間）経過したデータを対象に削除を行います。つまり<strong>10日以内にnodetool repairでデータ同期を終わらせる必要がある</strong>ということになります。</p><p>Datastaxではgc_grace_secondsで設定した値の期間内に同期が完了するようにrepaireタスクをスケジューリングして自動実行してくれる”nodesync”とよばれるサービスが動いています。</p><p>運用ではnodesyncによって10日以内にデータ同期が完了しているかを監視することが大切です。nodesyncによる同期状況はDatastaxが提供する専用のダッシュボードがあるのでそれを利用します。このnodesyncは自動でスケジュールしてくれるので非常に便利な機能ですが、データを積んでテストしていく中である日突然CPUが一定間隔で高騰し続ける事象が発生しました。その原因がパーティションサイズに大きく関係していたのです。</p><p>nodesyncの実行単位は200MBのセグメントと呼ばれる領域にパーティションデータを乗せてバリデーションを行うのですが<strong>1パーティションが1GBなど200MBを超えている場合はパーティション内のデータを分割できず、1GBそのままセグメント領域に展開してしまう</strong>ため1コアあたりの占有時間が顕著に長くなり、1GBを超えるような巨大パーティションが複数存在するとCPUリソースを全体を食いつぶすというのが原因でした。</p><p><img src="/images/20210412/nodesync_partition.png"></p><p>そのためパーティションサイズが1GBを超えるテーブルは100MBに収まるよう設計を見直しました。サイズが肥大化しがちなパーテイションの主は日付をキーにしている場合が多いです。定常業務の更新量では1GBを超えなくても、移行などでイレギュラー要素で想定以上の更新量が発生する可能性もあるため、月や日などの単位ではなく日時分などでパーティションの粒度を細かくするもしくは、日付＋分散キーにしてコンポジット化するなど検討しました。</p><p><strong>テーブル作成後のパーティションキー変更は出来ないのでデータモデル設計時には1パーティションサイズが100MBを越さないようなキー設計になっているかを意識してください。</strong>また、運用開始後もパーティションが想定外に肥大化していないかなどを監視すると事前に事故を防げる可能性が高くなるので重要です。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>KVSと二年間設計から開発まで携わる中で一番苦労したのは「情報収集」でした。</p><p>Cassandraをエンタープライズ領域で採用した事例は、日本ではまだ少なく参考文献やネット上の情報も少ないため設計の勘所や運用ノウハウがなくトライ＆エラーの連続でした。</p><p>私は「同じ山を同じ苦労で登る必要は絶対にない」という考えでナレッジは隠さずオープンにしていくべきと考え本稿の執筆に至りました。</p><p>伝えたいことを長々と書いてしまい、まとまりのない記事になってしまったかもですが、本稿がKVSを採用したいと思っている方に少しでも役立てば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、Technology Innovation Group所属 DBチームの岩崎です。&lt;/p&gt;
&lt;p&gt;テックブログに</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="KVS" scheme="https://future-architect.github.io/tags/KVS/"/>
    
    <category term="Cassandra" scheme="https://future-architect.github.io/tags/Cassandra/"/>
    
    <category term="nosql" scheme="https://future-architect.github.io/tags/nosql/"/>
    
    <category term="Database" scheme="https://future-architect.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>OpenAPIからモックサーバを建てられるPrismを実際のプロジェクトに導入してみた</title>
    <link href="https://future-architect.github.io/articles/20210410/"/>
    <id>https://future-architect.github.io/articles/20210410/</id>
    <published>2021-04-09T15:00:00.000Z</published>
    <updated>2021-04-12T01:43:54.391Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！フューチャー22卒内定者の大岩と申します。現在は、TIG DXユニットでアルバイトとして従事しています。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>私が参加しているプロジェクトで、<strong>OpenAPI定義ファイルからモックサーバを建てることができるOSSツール「Prism」</strong>を導入することになりました。この記事では、Prism導入の手順や、躓いた点などを紹介します。</p><h2 id="導入の背景"><a href="#導入の背景" class="headerlink" title="導入の背景"></a>導入の背景</h2><p>現プロジェクトでは、フロントエンドにVue.jsを採用し、バックエンドはGo言語で書かれたAPIサーバ2台で構成されています。これまでフロントエンドの開発を行う際には、ローカルでAPIサーバとDBを立ち上げる必要があり、フロントエンドを少しだけ変更したいという場合でもかなりの手間が掛かっていました。そこで<strong>モックサーバを構築し、画面の開発の際にはそこからデータを取得出来れば、フロントエンドの作業が格段に楽になる</strong>と考えました。</p><p>バックエンドのAPIドキュメントは、OpenAPI(Swagger)形式で整備されています。そこで、このOpenAPI形式のファイルからモックサーバを建てることができる、Stoplight社のOSSツール「Prism」を採用しました。</p><h2 id="OpenAPI-Swagger-について"><a href="#OpenAPI-Swagger-について" class="headerlink" title="OpenAPI(Swagger)について"></a>OpenAPI(Swagger)について</h2><p><strong>OpenAPI</strong>とは、API構造を記述する<strong>インターフェース記述言語</strong>です。yamlもしくはjsonで記述することで、綺麗なAPIドキュメントを作成することができたり、この記事で紹介するようにモックサーバを建てることができます。</p><p>OpenAPIは、もともとはSwaggerという名前で開発が進められていました。2015年に、もともとの開発元であったSmartBear Softwareから、OpenAPI Initiativeへ移されると同時に <code>Swagger Specification</code> から <code>OpenAPI Specification</code> (以下OASと記載) という名前に変わりました。なお、現在でも「Swagger UI」や「Swagger Editor」などのOpenAPIドキュメントを整備するツール群は <code>Swagger</code> の名前が使われています。</p><p>このFuture Tech Blogでも、OpenAPIに関する記事が多く公開されています。詳細は<a href="https://future-architect.github.io/tags/Swagger/">こちら</a>をご覧ください。</p><h3 id="Prismについて"><a href="#Prismについて" class="headerlink" title="Prismについて"></a>Prismについて</h3><p>Prismとは、API設計関係のツールを提供するStoplight社によって開発されている、<strong>OSSのHTTPモックツール</strong>です。OAS2.0およびOAS3.0に準拠したドキュメントから、自動的にモックサーバを構築することができます。</p><p>今回使用したバージョンは、v4.1.2です。</p><p><a href="https://github.com/stoplightio/prism">https://github.com/stoplightio/prism</a></p><h2 id="実際に導入してみる"><a href="#実際に導入してみる" class="headerlink" title="実際に導入してみる"></a>実際に導入してみる</h2><h3 id="インストール方法"><a href="#インストール方法" class="headerlink" title="インストール方法"></a>インストール方法</h3><p>まずはPrismのパッケージをnpm経由で、プロジェクトの <code>devDependencies</code> に追加します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D prism</span><br></pre></td></tr></table></figure><p>あとは、<code>npx</code> で起動してみて、モックサーバが起動できていたら完了です。以下の例は、カレントディレクトリ内にある <code>swagger.yaml</code> ファイルを指定して、8080番ポートで起動する例です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx prism mock ./swagger.yaml -p 8080</span><br></pre></td></tr></table></figure><p>これを実行すると、<strong>OpenAPIファイルに記載されている全てのエンドポイントのURLが一覧で表示</strong>されます。（ここでは、 <a href="https://petstore.swagger.io/">Swagger Petstore</a> を実行した結果を掲載しています）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ npx prism mock ./swagger.yaml -p 8080</span><br><span class="line">[14:30:40] › [CLI] …  awaiting  Starting Prism…</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      POST       http://127.0.0.1:8080/pet</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      PUT        http://127.0.0.1:8080/pet</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      GET        http://127.0.0.1:8080/pet/findByStatus?status=sold,sold,sold,available,pending,pending,pending,pending,available,available,available,pending,pending,sold,available,available,pending,sold,available,pending</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      GET        http://127.0.0.1:8080/pet/findByTags?tags=quis,aperiam,velit,repudiandae,et,rem,accusantium,omnis,ut,eius,dolor,enim,nam,et,ipsam,velit,est,veritatis,nesciunt,possimus</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      GET        http://127.0.0.1:8080/pet/127</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      POST       http://127.0.0.1:8080/pet/128</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      DELETE     http://127.0.0.1:8080/pet/483</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      POST       http://127.0.0.1:8080/pet/641/uploadImage</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      GET        http://127.0.0.1:8080/store/inventory</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      POST       http://127.0.0.1:8080/store/order</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      GET        http://127.0.0.1:8080/store/order/10</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      DELETE     http://127.0.0.1:8080/store/order/963</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      POST       http://127.0.0.1:8080/user</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      POST       http://127.0.0.1:8080/user/createWithArray</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      POST       http://127.0.0.1:8080/user/createWithList</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      GET        http://127.0.0.1:8080/user/login?username=itaque&amp;password=exercitationem</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      GET        http://127.0.0.1:8080/user/<span class="built_in">logout</span></span><br><span class="line">[14:30:40] › [CLI] ℹ  info      GET        http://127.0.0.1:8080/user/quo</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      PUT        http://127.0.0.1:8080/user/fugiat</span><br><span class="line">[14:30:40] › [CLI] ℹ  info      DELETE     http://127.0.0.1:8080/user/minima</span><br><span class="line">[14:30:40] › [CLI] ▶  start     Prism is listening on http://127.0.0.1:8080</span><br></pre></td></tr></table></figure><p>確かにこの表示されたURLにアクセスしてみると、モックデータが返却されるようです。</p><p>例として、 <code>GET /pet/&#123;petId&#125;</code> を見てみましょう。<a href="https://petstore.swagger.io/">Swagger Petstore</a> のOpenAPI定義ファイルでは、以下のように記述されています。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">/pet/&#123;petId&#125;:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;pet&quot;</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;Find pet by ID&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;Returns a single pet&quot;</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">&quot;getPetById&quot;</span></span><br><span class="line">      <span class="attr">produces:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;application/xml&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;petId&quot;</span></span><br><span class="line">        <span class="attr">in:</span> <span class="string">&quot;path&quot;</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;ID of pet to return&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">&quot;int64&quot;</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&quot;200&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;successful operation&quot;</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&quot;#/definitions/Pet&quot;</span></span><br><span class="line">        <span class="attr">&quot;400&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Invalid ID supplied&quot;</span></span><br><span class="line">        <span class="attr">&quot;404&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Pet not found&quot;</span></span><br><span class="line">      <span class="attr">security:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">api_key:</span> []</span><br><span class="line"><span class="string">(中略)</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">Pet:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;object&quot;</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;name&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;photoUrls&quot;</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">&quot;int64&quot;</span></span><br><span class="line">      <span class="attr">category:</span></span><br><span class="line">        <span class="string">$ref:</span> <span class="string">&quot;#/definitions/Category&quot;</span></span><br><span class="line">      <span class="attr">name:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">        <span class="attr">example:</span> <span class="string">&quot;doggie&quot;</span></span><br><span class="line">      <span class="attr">photoUrls:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;array&quot;</span></span><br><span class="line">        <span class="attr">xml:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">&quot;photoUrl&quot;</span></span><br><span class="line">          <span class="attr">wrapped:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;array&quot;</span></span><br><span class="line">        <span class="attr">xml:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">&quot;tag&quot;</span></span><br><span class="line">          <span class="attr">wrapped:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">&quot;#/definitions/Tag&quot;</span></span><br><span class="line">      <span class="attr">status:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;pet status in the store&quot;</span></span><br><span class="line">        <span class="attr">enum:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;available&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;pending&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;sold&quot;</span></span><br><span class="line">    <span class="attr">xml:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&quot;Pet&quot;</span></span><br></pre></td></tr></table></figure><p>ここでは、 <code>name</code> というプロパティに <code>example</code> として <code>Doggie</code> という値が指定されています。では、モックサーバから返却される値を見てみます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;id&quot;</span>:<span class="number">0</span>,</span><br><span class="line">   <span class="attr">&quot;category&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;string&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;doggie&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;photoUrls&quot;</span>:[</span><br><span class="line">      <span class="string">&quot;string&quot;</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">&quot;tags&quot;</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;id&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;string&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;available&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちゃんとexampleで指定した値が返ってきていることがわかります。exampleを指定していない部分は、 <code>0</code> や　<code>&quot;string&quot;</code> に固定されてしまうものの、正しい型で返ってきています。なお、モックサーバの起動時に <code>-d</code> オプションをつけることで、値をランダムに変更することができます。</p><h3 id="basePath-が反映されない"><a href="#basePath-が反映されない" class="headerlink" title="basePath が反映されない"></a><code>basePath</code> が反映されない</h3><p>ここが詰まったポイントです。今回Prismを導入したプロジェクトではOAS2.0を使用しており、現行最新版のOAS3.0と比べると、仕様が異なる点があります。</p><p>OAS2.0では、エンドポイントのパスを以下のように設定します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">host:</span> <span class="string">&quot;petstore.swagger.io&quot;</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">&quot;/v2&quot;</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;https&quot;</span></span><br></pre></td></tr></table></figure><p>OAS3.0では <code>basePath</code> が削除され、以下のように記述します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://petstore.swagger.io/v2</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">server</span> <span class="string">description</span></span><br></pre></td></tr></table></figure><p><code>schemes</code>、 <code>host</code>、 <code>basePath</code> が <code>servers</code> という一つのプロパティにまとまったおかげで見やすくなりました。</p><p>Prismはv3からOAS3.0での書き方に準拠するようになり、 <strong>OAS2.0のファイルを読み込ませると、<code>basePath</code>を読み取ってくれず、エンドポイントのパスに反映されません</strong> 。つまり、 <code>https://petstore.swagger.io/v2/pets</code> というエンドポイントを定義していたとしても、Prismでは <code>https://petstore.swagger.io/pets</code> として認識してしまいます。</p><p>これではモックサーバとしての意味を為さないため、<strong>エンドポイントのパスを変更する必要</strong>があります。</p><h4 id="Vue-CLIのプロキシ機能で解決する"><a href="#Vue-CLIのプロキシ機能で解決する" class="headerlink" title="Vue CLIのプロキシ機能で解決する"></a>Vue CLIのプロキシ機能で解決する</h4><p>今回のフロントエンドで利用しているVue.jsは、Vue CLIを用いて環境構築されています。Vue CLIには、webpackの <code>DevServer</code> の機能が内包されており、ホットリロードなどを実現しています。この機能の一つに、 <strong>APIサーバなど外部のサーバをプロキシして接続する機能</strong>があります。</p><p>このプロキシ機能で、 <code>pathRewrite</code> というオプションを指定すると、<strong>パスを上書き</strong>することができます。</p><p>実際に設定してみましょう。例えば、フロントエンドから <code>http://localhost:3000/api1/v1/</code> にリクエストを飛ばすと、 <code>http://localhost:8080/api1/v1/</code> に繋がるようになっている環境であるとします。</p><figure class="highlight javascript"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;^/api1/&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;http://localhost:8080/&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;^/api2/&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;http://localhost:8081/&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/images/20210410/image.png"></p><p>このAPIサーバ <code>api1</code> と <code>api2</code> をモックサーバに置き換えたいとします。しかし、前述の通りPrismでは <code>/api1/v1</code> の部分を無視してしまうため、そのままではアクセスすることができません。そこで使うのが、 <code>pathRewrite</code> オプションです。</p><p>例えば以下の例では、 <code>NODE_ENV</code> に <code>design</code> という値が設定されている場合のみ、 <code>http://localhost:3000/api1/v1/</code> が <code>http://localhost:8080/</code> にプロキシされるように設定しています。</p><figure class="highlight javascript"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;^/api1/&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;http://localhost:8080/&#x27;</span>,</span><br><span class="line">        pathRewrite:</span><br><span class="line">          process.env.NODE_ENV === <span class="string">&#x27;design&#x27;</span> ? &#123; <span class="string">&#x27;^/api1/v1/&#x27;</span>: <span class="string">&#x27;/&#x27;</span> &#125; : <span class="literal">null</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;^/api2/&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;http://localhost:8081/&#x27;</span>,</span><br><span class="line">        pathRewrite:</span><br><span class="line">          process.env.NODE_ENV === <span class="string">&#x27;design&#x27;</span> ? &#123; <span class="string">&#x27;^/api2/v1/&#x27;</span>: <span class="string">&#x27;/&#x27;</span> &#125; : <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/images/20210410/image_2.png"></p><p>これで、実際に先ほどの手順でモックサーバを起動してみて、 <code>http://localhost:3000/api/v1/</code> にアクセスしレスポンスが返ってきたらOKです。</p><h3 id="npm-scriptでコマンド一つで起動できるようにする"><a href="#npm-scriptでコマンド一つで起動できるようにする" class="headerlink" title="npm scriptでコマンド一つで起動できるようにする"></a>npm scriptでコマンド一つで起動できるようにする</h3><p>せっかくなので<strong>コマンド一つで起動できるようにして、楽に開発がスタートできるように</strong>しておきたいです。まずは、以下のパッケージをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D cross-env concurrently</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/cross-env">cross-env</a> は、Windows環境下で <code>NODE_ENV</code> を指定すると正常にコマンドを実行できない問題があるため、<strong>環境差異を解消</strong>すべく導入しています。</p><p><a href="https://www.npmjs.com/package/concurrently">concurrently</a> は、<strong>同時に複数のコマンドを実行できる</strong>ようにします。今回はPrismによるモックサーバを2つ、vue-cliの開発サーバを1つ、合計3つのコマンドを同時実行させます。</p><p>インストールできたら、 <code>package.json</code> の <code>scripts</code> に追記します。ここでは、モックサーバの起動スクリプトを別に分けて、モックサーバを個別で起動できるようにもしています。</p><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  scripts: &#123;</span><br><span class="line">    &quot;design&quot;: &quot;cross-env NODE_ENV=design concurrently \&quot;npm run mock-1\&quot; \&quot;npm run mock-2\&quot; \&quot;vue-cli-service serve --mode design --open\&quot;&quot;,</span><br><span class="line">    &quot;mock-1&quot;: &quot;npx prism mock ./swagger1.yaml -p 8080&quot;,</span><br><span class="line">    &quot;mock-2&quot;: &quot;npx prism mock ./swagger2.yaml -p 8081&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あとは、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run design</span><br></pre></td></tr></table></figure><p>を実行すれば、モックサーバが2つとVue CLIの開発サーバが立ち上がり、 <code>http://localhost:3000</code> で確認できるようになります。これで、簡単にフロントエンドを開発できるようになりました！🎉</p><h2 id="補足-nginxを使ってプロキシする方法"><a href="#補足-nginxを使ってプロキシする方法" class="headerlink" title="補足: nginxを使ってプロキシする方法"></a>補足: nginxを使ってプロキシする方法</h2><p>今回のプロジェクトでは、Vue CLIを使っていたため、簡単にプロキシすることができました。しかし、中にはプロキシ機能をもたないものを利用しているケースもあると思います。</p><p>そこで、 <code>docker-compose</code> を用いて <code>nginx</code> と <code>prism</code> のコンテナを立てて、<code>nginx</code>にプロキシさせる方法を紹介します。</p><h3 id="docker-composeファイル"><a href="#docker-composeファイル" class="headerlink" title="docker-composeファイル"></a>docker-composeファイル</h3><p>まず、<code>nginx</code> のコンテナに <code>nginx:alpine</code> のイメージを選択し、8080番ポートと8081番ポートを開け、volumesに設定ファイルを指定します。次に、それぞれのモックサーバのコンテナに <code>stoplight/prism:3</code> のイメージを選択し、volumesにOpenAPIファイルを指定します。</p><figure class="highlight yaml"><figcaption><span>docker-compose.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19-alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./default.conf:/etc/nginx/conf.d/default.conf</span></span><br><span class="line">  <span class="attr">api1-mock:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">stoplight/prism:4</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mock</span> <span class="string">-h</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="string">/swagger.yaml</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./swagger1.yaml:/swagger.yaml</span></span><br><span class="line">  <span class="attr">api2-mock:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">stoplight/prism:4</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mock</span> <span class="string">-h</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="string">/swagger.yaml</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./swagger2.yaml:/swagger.yaml</span></span><br></pre></td></tr></table></figure><h3 id="nginx設定ファイル"><a href="#nginx設定ファイル" class="headerlink" title="nginx設定ファイル"></a>nginx設定ファイル</h3><p>nginx設定ファイルは、 <code>location</code> の部分にパスを書き、プロキシの設定を書くことで、<strong>そのパス以降に来たリクエストをリバースプロキシすることができる</strong>ようになります。この例では、 <code>0.0.0.0:8080/api1/v1</code> に来たアクセスを、 <code>api1-mock</code> コンテナの4010番ポートにプロキシするように設定しています。</p><figure class="highlight plain"><figcaption><span>default.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8080;</span><br><span class="line">    server_name  0.0.0.0:8080;</span><br><span class="line">    location &#x2F;api1&#x2F;v1&#x2F; &#123;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;api1-mock:4010&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8081;</span><br><span class="line">    server_name  0.0.0.0:8081;</span><br><span class="line">    location &#x2F;api2&#x2F;v1&#x2F; &#123;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;api2-mock:4010&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あとは、docker-compose.yamlファイルがある場所で、以下のコマンドを実行すると、2つのモックサーバを同時に立ち上げることができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -p (任意の名前) up -d</span><br></pre></td></tr></table></figure><p>立ち上げた後に、 <code>http://localhost:8080/api1/v1/</code> にアクセスして、レスポンスが返ってきたらOKです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Prismを使うことで、OpenAPIファイルさえ記述していれば簡単にモックサーバとして機能し、開発に効果的に組み込むことができます。ローカルにバックエンドサーバを立ち上げる手間が省けて、<strong>開発体験を格段に向上</strong>させることができました。</p><p>ぜひ皆さんも快適な開発環境構築のために、導入を検討してみてはいかがでしょうか。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは！フューチャー22卒内定者の大岩と申します。現在は、TIG DXユニットでアルバイトとして従事しています。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
    <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
    <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
    <category term="Prism" scheme="https://future-architect.github.io/tags/Prism/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.16のgo:embedとNext.jsの相性が悪い問題と戦う</title>
    <link href="https://future-architect.github.io/articles/20210409/"/>
    <id>https://future-architect.github.io/articles/20210409/</id>
    <published>2021-04-08T15:00:00.000Z</published>
    <updated>2021-04-11T08:23:22.297Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210409/nextjs_and_go_icon.svg" class="img-middle-size"><p>前エントリーの<a href="/articles/20210408/">Go 1.16のembedとchiとSingle Page Application</a>では、Vue.jsで生成したファイルをバンドルしました。Vue.jsや、Parcel V2でビルドしたコンテンツを配信するにはこれで問題ありません。しかし、React（Next.js）は要注意です。</p><p>フロントエンドの環境整備をどうやって行うかはいつも悩みの種ですが、そんな中、僕が3年ほど前から他の人にお勧めしていたのがNext.jsでした。ほとんどの最低限必要なツール群は整備済みで、最近のバージョンであればTypeScriptを使うのも簡単。Linter(npm exec eslint –init)とFormatter(npm install prettierと環境整備)ぐらいでコードを書き始められます。</p><p>しかし、環境構築が簡単なNext.js製のウェブアプリケーションのビルド済みのフロントエンドのファイル群をGoアプリにバンドルしようとしたらうまく動かず、それの追試をしました。</p><h1 id="試した環境"><a href="#試した環境" class="headerlink" title="試した環境"></a>試した環境</h1><p>go:embedはフォルダ指定するときは現在地よりも親のフォルダは指定できません。ディレクトリトラバーサルの脆弱性を生み出さないための制約かと思われます。こんな感じのフォルダ構成にしてました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── cmd</span><br><span class="line">│   └── single-go-web</span><br><span class="line">│       └── main.go</span><br><span class="line">├── embed.go              : go:embedディレクティブコメントを書いたファイル</span><br><span class="line">├── frontend              : npm exec create-next-appで生成</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── next-env.d.ts</span><br><span class="line">│   ├── out&#x2F;              : npm exec next exportが生成する成果物のフォルダ</span><br><span class="line">│   ├── package-lock.json</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── pages&#x2F;</span><br><span class="line">│   └── tsconfig.json</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── handler.go</span><br><span class="line">└── notfound.go</span><br></pre></td></tr></table></figure><p>embed.goはこんな感じです。</p><figure class="highlight go"><figcaption><span>embed.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> goweb</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;embed&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed frontend/out/*</span></span><br><span class="line"><span class="keyword">var</span> assets embed.FS</span><br></pre></td></tr></table></figure><h1 id="何が起きたのか"><a href="#何が起きたのか" class="headerlink" title="何が起きたのか"></a>何が起きたのか</h1><p>作ったNext.jsのファイルを取り込んでウェブサーバーとして起動するコードを書いたのですが、トップページの静的なタグは表示されるものの、具体的にはファイルがいくつか取得できないようでうまく動きませんでした。こんな感じです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2021&#x2F;03&#x2F;17 08:52:23 not found &#x2F;_next&#x2F;static&#x2F;chunks&#x2F;pages&#x2F;_app-e86e439f5882a1d9aed3.js</span><br><span class="line">2021&#x2F;03&#x2F;17 08:52:23 not found &#x2F;_next&#x2F;static&#x2F;ZBndKz8ZARrIJBK8V3vpd&#x2F;_buildManifest.js</span><br><span class="line">2021&#x2F;03&#x2F;17 08:52:23 not found &#x2F;_next&#x2F;static&#x2F;ZBndKz8ZARrIJBK8V3vpd&#x2F;_ssgManifest.js</span><br></pre></td></tr></table></figure><p>エラーになったファイル以外のindex.htmlとか他のファイルは読み込めていました。go embedの説明によると、ディレクトリを自動で探索する場合にアンダースコアとピリオドスタートのファイルは無視されるとのこと。ただし、明示的に指定すれば良いみたいです。</p><blockquote><p>If a pattern names a directory, all files in the subtree rooted at that directory are embedded (recursively), except that files with names beginning with ‘.’ or ‘_’ are excluded. So the variable in the above example is almost equivalent to:</p></blockquote><p>実験してみました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── _test</span><br><span class="line">│   ├── a.txt</span><br><span class="line">│   ├── _b.txt</span><br><span class="line">│   └── dir</span><br><span class="line">│       ├── c.txt</span><br><span class="line">│       └── _d.txt</span><br><span class="line">├── embed-test</span><br><span class="line">├── go.mod</span><br><span class="line">├── main.go</span><br><span class="line">└── test</span><br><span class="line">    ├── _f.txt</span><br><span class="line">    └── e.txt</span><br></pre></td></tr></table></figure><p>それぞれ、go:embedディレクティブに書いたセレクターと選択されるファイルの相関は次の通りです。</p><table><thead><tr><th align="center">ファイル</th><th align="center"><code>_test</code>, <code>test</code></th><th align="center"><code>_test/*</code>, <code>test/*</code></th><th align="center"><code>_test/*</code>, <code>_test/*/*</code>, <code>test/*</code></th></tr></thead><tbody><tr><td align="center"><code>_test/a.txt</code></td><td align="center">✔︎</td><td align="center">✔︎</td><td align="center">✔︎</td></tr><tr><td align="center"><code>_test/_b.txt</code></td><td align="center"></td><td align="center">✔︎</td><td align="center">✔︎</td></tr><tr><td align="center"><code>_test/dir/c.txt</code></td><td align="center">✔︎</td><td align="center">✔︎</td><td align="center">✔︎</td></tr><tr><td align="center"><code>_test/dir/_d.txt</code></td><td align="center"></td><td align="center"></td><td align="center">✔︎</td></tr><tr><td align="center"><code>test/e.txt</code></td><td align="center">✔︎</td><td align="center">✔︎</td><td align="center">✔︎</td></tr><tr><td align="center"><code>text/_f.txt</code></td><td align="center"></td><td align="center">✔︎</td><td align="center">✔︎</td></tr></tbody></table><p>深いフォルダでもアスタリスクを駆使すればなんとかなりそうです。 ということで、改めてNext.jsのファイルのバンドルに挑戦。</p><h1 id="新たな敵、空フォルダ"><a href="#新たな敵、空フォルダ" class="headerlink" title="新たな敵、空フォルダ"></a>新たな敵、空フォルダ</h1><p>というわけでバシバシ追加していったのですが、次のようなエラーがビルド時に出るようになりました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go build</span><br><span class="line">../../embed.go:8:12: pattern frontend/out/*/*: cannot embed directory frontend/out/_next/qi68kQOpQjkJ0HbA6IoFl: contains no embeddable files</span><br></pre></td></tr></table></figure><p>Next.jsがビルド時にこのフォルダを作るのですが、ファイルが一個もなく、それを処理できないようです。選択可能なファイルがない場合にエラーになるので、.keepみたいなファイルをおいてもダメです（選択がアスタリスクとアンダーバーは無視されるので）。一番簡単なのはこういうフォルダを削除しておくことです。空フォルダが絶対必要です、というシステムがあるとダメなので、その場合は別の方法が必要ですね。</p><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>最終的にアセットをバンドルするディレクティブコメントはこのようになりました。これで無事、実行に必要なファイルを全てバンドルできました。きちんとGo製のサーバーも動きました。</p><p>少なくともNext.js 10.0.9ではこれで動きそうです。まあとてもシンプルな画面しか作っていないのでもっといろんな要素を入れていったり、Next.jsのバージョンが上がると動かなくなる可能性もありますが・・・</p><figure class="highlight go"><figcaption><span>asset.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed frontend/out/*</span></span><br><span class="line"><span class="comment">//go:embed frontend/out/_next/static/*/*</span></span><br><span class="line"><span class="comment">//go:embed frontend/out/_next/static/chunks/pages/*.js</span></span><br><span class="line"><span class="comment">//go:embed frontend/out/_next/static/chunks/pages/next/dist/pages/*</span></span><br><span class="line"><span class="keyword">var</span> assets embed.FS</span><br></pre></td></tr></table></figure><p>前回とちょっと違うところが1つあります。Next.jsの静的サイト生成の場合、<code>pages/page2.tsx</code>ファイルは<code>page2.html</code>ファイルとなります。しかし、他のページから遷移すると<code>/page2</code>というパスがアドレスバーに表示されます。ここでリロードしたりすると、最初に<code>/page2</code>という拡張子なしのファイルを読み込もうとしますが、それではうまく動作しません。<code>index.html</code>にフォールバックしてもダメでした。</p><p>この場合は、<code>/page2</code>にリクエストがきたら、<code>/page2.html</code>を返してあげれば良いので、失敗時のフォールバックをもう一つ増やして、拡張子つきで再リトライしてみるようにしてあげる必要があります。</p><figure class="highlight go"><figcaption><span>notfound.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NotFoundHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// まずはリクエストされた通りにファイルを探索</span></span><br><span class="line">err := tryRead(assets, <span class="string">&quot;frontend/out&quot;</span>, r.URL.Path, w)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SSGでは.htmlファイルが生成されるが、リクエストされるページは拡張子なし</span></span><br><span class="line"><span class="comment">// かもしれない</span></span><br><span class="line">err = tryRead(assets, <span class="string">&quot;frontend/out&quot;</span>, r.URL.Path+<span class="string">&quot;.html&quot;</span>, w)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 見つからなければindex.htmlを返す</span></span><br><span class="line">err = tryRead(assets, <span class="string">&quot;frontend/out&quot;</span>, <span class="string">&quot;index.html&quot;</span>, w)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでNext.jsで作った静的サイトも、Go 1.16にバンドルできるようになります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210409/nextjs_and_go_icon.svg&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;前エントリーの&lt;a href=&quot;/articles/20210408/&quot;&gt;Go 1.16のembedとchiとSingl</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
    <category term="Next.js" scheme="https://future-architect.github.io/tags/Next-js/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.16のembedとchiとSingle Page Application</title>
    <link href="https://future-architect.github.io/articles/20210408/"/>
    <id>https://future-architect.github.io/articles/20210408/</id>
    <published>2021-04-07T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.892Z</updated>
    
    <content type="html"><![CDATA[<p>シングルページアプリケーションは、一つのHTMLファイルであらゆるページを表現します。history APIを使ってそのようなページが実際にあるかのように振る舞います。</p><p>一方で、画面がリロードされたとき、メールでSNSでシェアされたときにその該当ページをきちんと再現するためには、サーバー側でハンドリングを行う必要があります。具体的には、存在しないページがリクエストされたら、アプリケーションのルートとなるHTMLファイルの内容をそのURLから配信するというものです。</p><p><a href="https://angular.jp/guide/deployment#server-configuration">https://angular.jp/guide/deployment#server-configuration</a></p><p>それにより、どのURLでもJavaScriptが動作し、そのURLで表示すべきコンテンツが表示されます。もし想定していないパスの場合は、ウェブサーバーではなく、JavaScriptがエラーを出します。</p><p>Goでウェブサーバーを作る時もSingle Page Applicationをホストする場合、同じような動作をさせる必要があります。以前、ファイルをバンドルするパッケージを作った時は、そのようなライブラリもセットで実装しました。今回は<code>go:embed</code>で同じことをやってみます。</p><p><a href="https://pkg.go.dev/go.pyspa.org/brbundle">https://pkg.go.dev/go.pyspa.org/brbundle</a></p><h1 id="ファイルの配信のハンドラー"><a href="#ファイルの配信のハンドラー" class="headerlink" title="ファイルの配信のハンドラー"></a>ファイルの配信のハンドラー</h1><p>やることは単純で、まず<code>go:embed</code>からファイルを探し、見つからなかったら、指定のファイル（index.html)を返します。拡張子からmimeタイプを決定してヘッダーフィルドに設定しています。</p><figure class="highlight go"><figcaption><span>notfound.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;mime&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;path&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ErrDir = errors.New(<span class="string">&quot;path is dir&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryRead</span><span class="params">(fs embed.FS, prefix, requestedPath <span class="keyword">string</span>, w http.ResponseWriter)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">f, err := fs.Open(path.Join(prefix, requestedPath))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Goのfs.Openはディレクトリを読みこもとうしてもエラーにはならないがここでは邪魔なのでエラー扱いにする</span></span><br><span class="line">stat, _ := f.Stat()</span><br><span class="line"><span class="keyword">if</span> stat.IsDir() &#123;</span><br><span class="line"><span class="keyword">return</span> ErrDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contentType := mime.TypeByExtension(filepath.Ext(requestedPath))</span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, contentType)</span><br><span class="line">_, err = io.Copy(w, f)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NotFoundHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// まずはリクエストされた通りにファイルを探索</span></span><br><span class="line">err := tryRead(assets, <span class="string">&quot;frontend/dist&quot;</span>, r.URL.Path, w)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 見つからなければindex.htmlを返す</span></span><br><span class="line">err = tryRead(assets, <span class="string">&quot;frontend/dist&quot;</span>, <span class="string">&quot;index.html&quot;</span>, w)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このハンドラを起動するコードは以下のような感じです。環境変数からポート番号を決定するためにサードパーティパッケージを使っています。</p><p>chiにはマッチしなかったときに呼び出されるNotFoundハンドラがあるので、それに先に作ったハンドラを設定します。サーバーAPIがある場合は、同じrouter上に定義しておけばアセットの配布とAPIが共存できます。同じオリジンなので、CORSとかは考えなくてもOK。</p><p>きちんとシグナルを受けてgraceful shutdownもするように、<a href="https://future-architect.github.io/articles/20210212/">Go 1.16で追加されたsignal.NotifyContext()</a>を利用してシグナルに応答するようにしておきます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/go-chi/chi/v5&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/kelseyhightower/envconfig&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 環境変数からポート番号を取得するための構造体</span></span><br><span class="line"><span class="keyword">type</span> Env <span class="keyword">struct</span> &#123;</span><br><span class="line">Port <span class="keyword">uint16</span> <span class="string">`envconfig:&quot;PORT&quot; default:&quot;8000&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ハンドラの実装</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newHandler</span><span class="params">()</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">router := chi.NewRouter()</span><br><span class="line"></span><br><span class="line">router.Route(<span class="string">&quot;/api&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(r chi.Router)</span></span> &#123;</span><br><span class="line"><span class="comment">// 何かAPIを足したい場合はここに足す</span></span><br><span class="line">r.Get(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// シングルページアプリケーションを配布するハンドラをNotFoundに設定</span></span><br><span class="line">router.NotFound(NotFoundHandler)</span><br><span class="line"><span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> env Env</span><br><span class="line">err := envconfig.Process(<span class="string">&quot;&quot;</span>, &amp;env)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Can&#x27;t parse environment variables: %s\n&quot;</span>, err.Error())</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt, os.Kill)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">server := &amp;http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:&quot;</span> + strconv.FormatUint(<span class="keyword">uint64</span>(env.Port), <span class="number">10</span>),</span><br><span class="line">Handler: newHandler(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">&lt;-ctx.Done()</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">server.Shutdown(ctx)</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;start receiving at :%d\n&quot;</span>, env.Port)</span><br><span class="line">fmt.Fprintln(os.Stderr, server.ListenAndServe())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでウェブサービスを1つのバイナリで提供できるようになります。GCP Cloud Runでも、AWS LambdaやGCP Functionsでも好きなようにデプロイできますね。</p><h1 id="フロントエンドのコードも作ってみる"><a href="#フロントエンドのコードも作ってみる" class="headerlink" title="フロントエンドのコードも作ってみる"></a>フロントエンドのコードも作ってみる</h1><p>複数のページがあるSPAのページを作ってみます。vue-cliでVue 3+TypeScript+Routerな感じで作りました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">% npx -p @vue/cli vue create frontend</span><br><span class="line"></span><br><span class="line">Vue CLI v4.5.12</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Choose Vue version, Babel, TS, Router, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x (Preview)</span><br><span class="line">? Use class-style component syntax? No</span><br><span class="line">? Use Babel alongside TypeScript (required <span class="keyword">for</span> modern mode, auto-detected polyfills, transpiling JSX)? Yes</span><br><span class="line">? Use <span class="built_in">history</span> mode <span class="keyword">for</span> router? (Requires proper server setup <span class="keyword">for</span> index fallback <span class="keyword">in</span> production) Yes</span><br><span class="line">? Pick a linter / formatter config: Prettier</span><br><span class="line">? Pick additional lint features: Lint on save</span><br><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset <span class="keyword">for</span> future projects? No</span><br></pre></td></tr></table></figure><p>これで複数ページを持ったSPAなWebページができあがるので、ビルドして静的HTMLとJSなどにします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"></span><br><span class="line"> DONE  Build complete. The dist directory is ready to be deployed.</span><br><span class="line"> INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html</span><br></pre></td></tr></table></figure><p>これをバイナリにバンドルするためのファイルを定義します。</p><figure class="highlight go"><figcaption><span>asset.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;embed&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed frontend/dist/*</span></span><br><span class="line"><span class="keyword">var</span> assets embed.FS</span><br></pre></td></tr></table></figure><p>あとは先ほどのmain.goとnotfound.goも一緒に置いて、ビルドして実行したら完成です。トップのページだけではなく、<code>/about</code>のページで画面をリロードして（最初の読み込みがファイル上存在しない<code>/about</code>）も、正しく表示されればOKです。</p><p><img src="/images/20210408/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-18_21.53.16.png"></p><p>コードは以下のところに置いてあります。</p><p><a href="https://github.com/shibukawa/spa-go-1.16">https://github.com/shibukawa/spa-go-1.16</a></p><h2 id="2021-04-09追記"><a href="#2021-04-09追記" class="headerlink" title="2021/04/09追記"></a>2021/04/09追記</h2><p>続編の<a href="/articles/20210408/">Go 1.16のgoembedとNext.jsの相性が悪い問題と戦う</a> が公開されました。合わせてどうぞ。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;シングルページアプリケーションは、一つのHTMLファイルであらゆるページを表現します。history APIを使ってそのようなページが実際にあるかのように振る舞います。&lt;/p&gt;
&lt;p&gt;一方で、画面がリロードされたとき、メールでSNSでシェアされたときにその該当ページをきちん</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
    <category term="SPA" scheme="https://future-architect.github.io/tags/SPA/"/>
    
    <category term="chi" scheme="https://future-architect.github.io/tags/chi/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeへのコントリビュートのすすめ</title>
    <link href="https://future-architect.github.io/articles/20210407/"/>
    <id>https://future-architect.github.io/articles/20210407/</id>
    <published>2021-04-06T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIGの須田です。</p><p>毎日1問、<a href="https://leetcode.com/">LeetCode</a>の問題を解くことを日課にしています。特にアルゴリズムとデータベースのセクションに取り組んでいるのですが、先日無事データベースセクションの課題を全て解き終えました。そこで次は自分でも問題を提供する側になりたいと思い、初めて問題を投稿し無事採用されたのでその過程についてまとめてみました。</p><h1 id="LeetCodeとは"><a href="#LeetCodeとは" class="headerlink" title="LeetCodeとは"></a>LeetCodeとは</h1><p>様々なアルゴリズムの問題だけでなく、SQLやシェルスクリプトなどの問題が解けるサービスです。</p><p>また有名な企業の採用面接時に出題されるコーディングテストの問題なども解くことができます。</p><p>これらの問題はユーザーがコントリビュートできます。投稿した問題はLeetCode側で内容の確認が行われ、その後無事採用されれば正式に問題としてサイト上に公開されます。</p><h1 id="問題を作成するステップ"><a href="#問題を作成するステップ" class="headerlink" title="問題を作成するステップ"></a>問題を作成するステップ</h1><p>問題投稿までのステップをみてみましょう。キャプチャにある文章は私が実際に投稿した際のものです。</p><p>問題のコントリビュートは<a href="https://leetcode.com/contribute/">こちら</a>のリンクからできます。</p><p>まずこの問題をなぜ投稿しようと思ったのかといった背景を記載します。</p><p>私は自分が考えた問題を通して具体的に何を学ぶことができるのか、そしてそれがどう役に立つのかを明記しました。<br>LeetCode側で推奨の記述が表示されているので、それに従って答えを記述していきました。<br><img src="/images/20210407/image.png"></p><p>次に投稿する先のカテゴリと問題のタイトル、実際の問題文を入力します。</p><p>問題文を作成する際は、LeetCodeで評価が高い問題なんかを参考に文章を書いていきました。よく使われる言い回しなどがあるので、それらを参考にして文章を書いていきました。解く人が何を求められているのかを明確に理解できるように、求める回答は具体的に記載するように心がけました。<br><img src="/images/20210407/image_2.png"></p><p>そして、次に回答となるソースコードやSQLを記載します。（答えのネタばれ回避のためここだけ実際投稿した内容とは異なる回答を記載しています笑）<br><img src="/images/20210407/image_3.png"></p><p>最後にテストケースを入力します。LeetCodeでは、書いたコードをブラウザ上で実行しながら問題を解くことができます。その際に、問題ごとにテストケース（インプットと答えとなる正解データ）が用意されており、これらをクリアする必要があります。問題を投稿する際には、こうしたテストケースをあわせて用意する必要があります。テストケースの書き方は作る問題のタイプによって異なってくるため、他の問題を参考にしながら用意しました。<br><img src="/images/20210407/image_4.png"></p><p>最後にSubmitして完了です。</p><p>私の場合ですと1か月ほどで問題が公開されました。</p><h1 id="問題文を英語で書くの大変じゃない？"><a href="#問題文を英語で書くの大変じゃない？" class="headerlink" title="問題文を英語で書くの大変じゃない？"></a>問題文を英語で書くの大変じゃない？</h1><p>LeetCodeの問題はとても簡潔に書かれているものが多く見受けられます。</p><p>問題文は簡潔でわかりやすいものほど、解答者もなにを求められているのかがわかりやすくコーディングに専念しやすくなるのかなと想像しています。そのため、英語での長文や難しい表現をする必要はなく、むしろ簡単で具体的に表現を心がけることが大事かなと思いました。</p><p>またLeetCode側で問題文をチェックし、文章などを適宜補ってくれますので安心してください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>問題作成ではどんなにシンプルな問題であっても、この問題はどういった意図で出題するのか、何を解答者に期待するのかを深く考えさせられます。</p><p>この過程で既に知っている知識であっても新しい気づきが得られたり、これまで解いてきた問題もきっと作者はこういう意図があったのかなと別の観点で考えられるようになりました。</p><p>みなさまの出題された問題を今後解けることをとても楽しみにしています！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIGの須田です。&lt;/p&gt;
&lt;p&gt;毎日1問、&lt;a href=&quot;https://leetcode.com/&quot;&gt;LeetCode</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="LeetCode" scheme="https://future-architect.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Bashのシェル展開</title>
    <link href="https://future-architect.github.io/articles/20210406/"/>
    <id>https://future-architect.github.io/articles/20210406/</id>
    <published>2021-04-05T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.859Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210406/fotis-fotopoulos-DuHKoV44prg-unsplash.jpg"><br>Photo by <a href="https://unsplash.com/@ffstop?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Fotis Fotopoulos</a> on <a href="https://unsplash.com/s/photos/programming?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの岸本卓也です。 <a href="https://future-architect.github.io/articles/20210321/">シェルスクリプト連載</a> の7日目です。</p><p>シェルスクリプトで前提とするシェルは、大抵のコンピューターにインストールされていることが多いbashを選択することが多いと思います。当記事ではそのbashを対象に、意外と色々あるシェルの展開処理の概要をまとめました。シェルスクリプトに限らず普段のコマンド操作でも展開処理が便利なシーンは多々あると思いますので、皆さんの時間の節約に役立てば幸いです。</p><p>以降では、処理される順番に展開処理を紹介します。また、説明している動作と具体例はGNU bash version 5.1.4で確認しました。</p><p>なお、Windowsでは初期状態ではbashがありませんが、インストールする方法はいくつかあります。gitを使うためにインストールするGit for WindowsのGit Bashは名前の通りシェルにbashが使われているので、Windowsユーザーの方はお試しください。</p><h1 id="ブレース展開-Brace-Expansion"><a href="#ブレース展開-Brace-Expansion" class="headerlink" title="ブレース展開 (Brace Expansion)"></a>ブレース展開 (Brace Expansion)</h1><p>ブレース (<code>&#123;&#125;</code>) の間にパターンを記述すると、文字列に展開されます。パターンの記述方法は2種類あります。</p><ul><li>カンマ区切りで文字列を列挙すると、列挙した文字列が列挙した順に当てはめられた文字列に展開されます。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> a&#123;d,c,b&#125;e</span><br><span class="line">ade ace abe</span><br><span class="line"></span><br><span class="line"><span class="comment"># ファイル名の変更に使う例</span></span><br><span class="line">$ ls</span><br><span class="line">test.txt</span><br><span class="line"></span><br><span class="line">$ mv test.txt&#123;,.orig&#125;</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">test.txt.orig</span><br><span class="line"></span><br><span class="line"><span class="comment"># ブレース展開はネスト可能</span></span><br><span class="line">$ <span class="built_in">echo</span> test_&#123;a_&#123;1,2&#125;,b_&#123;3,4&#125;&#125;</span><br><span class="line">test_a_1 test_a_2 test_b_3 test_b_4</span><br><span class="line"></span><br><span class="line"><span class="comment"># クォートで囲むと展開されない</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;a&#123;d,c,b&#125;e&quot;</span></span><br><span class="line">a&#123;d,c,b&#125;e</span><br></pre></td></tr></table></figure></li><li>2重ドット区切りで数字またはアルファベットを指定すると、指定した数字またはアルファベットの間の連続値に展開されます。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> test_&#123;1..5&#125;</span><br><span class="line">test_1 test_2 test_3 test_4 test_5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2重ドット区切りで3個目の数字を指定すると、展開される連続値の増減量を変更できる。</span></span><br><span class="line">$ <span class="built_in">echo</span> test_&#123;1..5..2&#125;</span><br><span class="line">test_1 test_3 test_5</span><br><span class="line"></span><br><span class="line"><span class="comment"># アルファベットの連続値や逆順での展開も可能</span></span><br><span class="line">$ <span class="built_in">echo</span> test_&#123;e..a&#125;</span><br><span class="line">test_e test_d test_c test_b test_a</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> test_&#123;e..a..2&#125;</span><br><span class="line">test_e test_c test_a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字の連続値なら、複数桁やゼロパディングも可能</span></span><br><span class="line">$ <span class="built_in">echo</span> test_&#123;01..15..2&#125;</span><br><span class="line">test_01 test_03 test_05 test_07 test_09 test_11 test_13 test_15</span><br></pre></td></tr></table></figure></li></ul><h1 id="チルダ展開-Tilde-Expansion"><a href="#チルダ展開-Tilde-Expansion" class="headerlink" title="チルダ展開 (Tilde Expansion)"></a>チルダ展開 (Tilde Expansion)</h1><p>単語がチルダ (<code>~</code>) から始まる場合、次のスラッシュ (<code>/</code>) までの文字列はチルダプレフィックスと呼ばれ、ディレクトリに展開されます。ここでは便利なチルダプレフィックスを紹介します。</p><p>チルダのみを指定すると、現在のユーザーのホームディレクトリに展開されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> ~</span><br><span class="line">/home/kishimoto</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> ~/foo</span><br><span class="line">/home/kishimoto/foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># クォートで囲むと展開されない</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;~&quot;</span></span><br><span class="line">~</span><br></pre></td></tr></table></figure><p>チルダに続けてログイン名を指定すると、そのログイン名のホームディレクトリに展開されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> ~future/foo</span><br><span class="line">/home/future/foo</span><br></pre></td></tr></table></figure><p><code>~-</code> というチルダプレフィックスは、変数 <code>OLDPWD</code> (1個前のカレントディレクトリが保持されている) が保持する値に展開されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp/</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> ~-</span><br><span class="line">/tmp</span><br></pre></td></tr></table></figure><p>その他のチルダプレフィックスはマニュアルの <a href="https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html#Tilde-Expansion">Tilde Expansion</a> を参照してください。</p><h1 id="パラメーター展開-Shell-Parameter-Expansion"><a href="#パラメーター展開-Shell-Parameter-Expansion" class="headerlink" title="パラメーター展開 (Shell Parameter Expansion)"></a>パラメーター展開 (Shell Parameter Expansion)</h1><p>ドル記号に続けて <code>$&#123;parameter&#125;</code>, <code>$parameter</code> のように変数名を記述すると、変数 <code>parameter</code> が保持する値に展開されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ foo=<span class="string">&quot;hoge hoge&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo&#125;</span></span><br><span class="line">hoge hoge</span><br></pre></td></tr></table></figure><p>パラメーター展開は単に変数の値に展開するだけではなく、多様な処理をして展開させることができます。ここではよく使いそうな展開処理を紹介します。</p><ul><li><code>$&#123;!parameter&#125;</code> : 変数の間接展開  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ foo=HOME</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;!foo&#125;</span></span><br><span class="line">/home/kishimoto</span><br></pre></td></tr></table></figure></li><li><code>$&#123;parameter:-word&#125;</code> : 変数が未定義またはnullなら、 <code>word</code> に展開する。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">unset</span> foo</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo:-hoge&#125;</span></span><br><span class="line">hoge</span><br><span class="line"></span><br><span class="line"><span class="comment"># `:-` の代わりにコロンなしの `-` を使うと、変数が未定義の場合のみ `word` に展開する。</span></span><br><span class="line">$ foo=</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo-hoge&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo:-hoge&#125;</span></span><br><span class="line">hoge</span><br></pre></td></tr></table></figure></li><li><code>$&#123;parameter:=word&#125;</code> : 変数が未定義またはnullなら、変数に <code>word</code> を設定してから展開する。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">unset</span> foo</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo:=hoge&#125;</span></span><br><span class="line">hoge</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">declare</span> -p foo</span><br><span class="line"><span class="built_in">declare</span> -- foo=<span class="string">&quot;hoge&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 変数が未定義の場合のみに限定したいなら、 `:=` の代わりにコロンなしの `=` を使う。</span></span><br><span class="line">$ foo=</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo=hoge&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">declare</span> -p foo</span><br><span class="line"><span class="built_in">declare</span> -- foo=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><code>$&#123;parameter:?word&#125;</code> : 変数が未定義またはnullなら、標準エラー出力に <code>word</code> を出力する。非インタラクティブモードのシェルなら終了する。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ MSG_EMPTY_PARAMETER=<span class="string">&quot;Please specify the parameter.&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">unset</span> foo</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo:?<span class="variable">$&#123;MSG_EMPTY_PARAMETER&#125;</span>&#125;</span></span><br><span class="line">bash: foo: Please specify the parameter.</span><br><span class="line"></span><br><span class="line"><span class="comment"># `word` を指定しない場合、標準のエラーメッセージが出力される。</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo:?&#125;</span></span><br><span class="line">bash: foo: parameter null or not <span class="built_in">set</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 変数が未定義の場合のみに限定したいなら、 `:?` の代わりにコロンなしの `?` を使う。</span></span><br><span class="line">$ foo=</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo?&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><code>$&#123;parameter:+word&#125;</code> : 変数が未定義またはnullなら何も展開しない。値が設定されているなら <code>word</code> に展開する。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ foo=hoge</span><br><span class="line"></span><br><span class="line">$ bar=()</span><br><span class="line"></span><br><span class="line"><span class="comment"># `foo` に値が設定されているため、 `--foo &quot;hoge&quot;` に展開される。</span></span><br><span class="line">$ bar+=(<span class="variable">$&#123;foo:+--foo &quot;<span class="variable">$&#123;foo&#125;</span>&quot;&#125;</span>)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">declare</span> -p bar</span><br><span class="line"><span class="built_in">declare</span> -a bar=([0]=<span class="string">&quot;--foo&quot;</span> [1]=<span class="string">&quot;hoge&quot;</span>)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">unset</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># `foo` は未定義のため、何も展開されない。</span></span><br><span class="line">$ bar+=(<span class="variable">$&#123;foo:+--foo &quot;<span class="variable">$&#123;foo&#125;</span>&quot;&#125;</span>)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">declare</span> -p bar</span><br><span class="line"><span class="built_in">declare</span> -a bar=([0]=<span class="string">&quot;--foo&quot;</span> [1]=<span class="string">&quot;hoge&quot;</span>)</span><br><span class="line"></span><br><span class="line">$ foo=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 変数が未定義の場合のみに限定したいなら、 `:+` の代わりにコロンなしの `+` を使う。</span></span><br><span class="line"><span class="comment"># `foo` は定義されているがnullのため、 `--foo &quot;&quot;` に展開される。</span></span><br><span class="line">$ bar+=(<span class="variable">$&#123;foo+--foo &quot;<span class="variable">$&#123;foo&#125;</span>&quot;&#125;</span>)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">declare</span> -p bar</span><br><span class="line"><span class="built_in">declare</span> -a bar=([0]=<span class="string">&quot;--foo&quot;</span> [1]=<span class="string">&quot;hoge&quot;</span> [2]=<span class="string">&quot;--foo&quot;</span> [3]=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><code>$&#123;parameter:offset:length&#125;</code> : 変数 <code>parameter</code> が保持する値の <code>offset</code> 文字目から長さ <code>length</code> 文字の部分文字列に展開する。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ foo=01234</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo:1:2&#125;</span></span><br><span class="line">12</span><br><span class="line"></span><br><span class="line"><span class="comment"># `length` を省略すると、末尾までの部分文字列に展開される。</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo:1&#125;</span></span><br><span class="line">1234</span><br><span class="line"></span><br><span class="line"><span class="comment"># 負値の `offset` を指定すると、末尾からの `offset` として処理される。 `:-` による展開と区別するため、 `:` の後にスペースが必要な点に注意。</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo: -3&#125;</span></span><br><span class="line">234</span><br><span class="line"></span><br><span class="line"><span class="comment"># 負値の `length` を指定すると、長さではなく末尾からのオフセット指定として処理される。</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo: -3:-2&#125;</span></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配列に対して適用し、部分配列に展開可能。 `offset`, `length` はだいたい上記と同様に処理される。</span></span><br><span class="line">$ foo_array=(hoge fuga piyo)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo_array[@]:1&#125;</span></span><br><span class="line">fuga piyo</span><br></pre></td></tr></table></figure></li><li><code>$&#123;parameter#word&#125;</code> : 変数 <code>parameter</code> が保持する値の、先頭から <code>word</code> のパターンに一致する部分が削除された文字列に展開する。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ foo=/hoge/fuga/piyo</span><br><span class="line"></span><br><span class="line"><span class="comment"># `#` なら最短一致で削除</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo#*/&#125;</span></span><br><span class="line">hoge/fuga/piyo</span><br><span class="line"></span><br><span class="line"><span class="comment"># `##` なら最長一致で削除</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo##*/&#125;</span></span><br><span class="line">piyo</span><br></pre></td></tr></table></figure></li><li><code>$&#123;parameter%word&#125;</code> : 変数 <code>parameter</code> が保持する値の、末尾から <code>word</code> のパターンに一致する部分が削除された文字列に展開する。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ foo=abc1234</span><br><span class="line"></span><br><span class="line"><span class="comment"># `%%` なら最長一致で削除。パターン `*([0-9])` は正規表現の `[0-9]*` と同じ。</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo%%*([0-9])&#125;</span></span><br><span class="line">abc</span><br></pre></td></tr></table></figure></li><li><code>$&#123;parameter/pattern/string&#125;</code> : 変数 <code>parameter</code> が保持する値の <code>pattern</code> のパターンに一致する部分が <code>string</code> に置換された文字列に展開する。パターンマッチの詳細はマニュアルの <a href="https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html">Pattern Matching</a> を参照。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ foo=hoge1234</span><br><span class="line"></span><br><span class="line"><span class="comment"># パターンに一致する部分が最長一致で置換される。パターン `+([a-z])` は正規表現の `[a-z]+` と同じ。</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo/+([a-z])/fuga&#125;</span></span><br><span class="line">fuga1234</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配列に対して適用し、配列の各要素が置換された配列に展開可能</span></span><br><span class="line">$ foo_array=(hoge1 hoge2 hoge3)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo_array[@]/+([a-z])/fuga&#125;</span></span><br><span class="line">fuga1 fuga2 fuga3</span><br></pre></td></tr></table></figure></li><li><code>$&#123;parameter@operator&#125;</code> : 変数 <code>parameter</code> が保持する値を、 <code>operator</code> で指定した変換処理によって変換した文字列に展開する。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ foo=<span class="string">&quot;aBc123dEf xYz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小文字アルファベットをすべて大文字に変換</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo@U&#125;</span></span><br><span class="line">ABC123DEF XYZ</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先頭の小文字アルファベットを大文字に変換。 `x` は小文字のままである点に注意。</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo@u&#125;</span></span><br><span class="line">ABc123dEf xYz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大文字アルファベットをすべて小文字に変換</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo@L&#125;</span></span><br><span class="line">abc123def xyz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配列にも適用可能</span></span><br><span class="line">$ foo_array=(hOge Fuga piYo)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo_array[@]@U&#125;</span></span><br><span class="line">HOGE FUGA PIYO</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo_array[@]@u&#125;</span></span><br><span class="line">HOge Fuga PiYo</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo_array[@]@L&#125;</span></span><br><span class="line">hoge fuga piyo</span><br></pre></td></tr></table></figure></li></ul><p><code>:-</code> と <code>-</code> のようなコロンの有無による違いは、 <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02">Parameter Expansion</a> の表に分かりやすくまとめられています。</p><p>ここで紹介したのはパラメーター展開の一部ですが、 <a href="https://qiita.com/t_nakayama0714/items/80b4c94de43643f4be51">【シェル芸人への道】Bashの変数展開と真摯に向き合う</a> という記事にはマニュアル記載のないパラメーター展開も含めてほぼ全量が分かりやすく解説されています。</p><h1 id="算術式展開-Arithmetic-Expansion"><a href="#算術式展開-Arithmetic-Expansion" class="headerlink" title="算術式展開 (Arithmetic Expansion)"></a>算術式展開 (Arithmetic Expansion)</h1><p>ドル記号に続く2重の丸括弧の間に算術式を記述する (<code>$(( expression ))</code>) と、算術式展開されます。</p><p>算術式では変数はドル記号 <code>$</code> が無くても参照でき、算術演算や比較、論理演算などを記述することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ foo=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四則演算</span></span><br><span class="line">$ <span class="built_in">echo</span> $(( foo ** <span class="number">2</span> + <span class="number">1</span>))</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比較</span></span><br><span class="line">$ <span class="built_in">echo</span> $(( foo &gt;= <span class="number">2</span> ))</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> $(( foo &gt; <span class="number">2</span> ))</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> $(( foo != <span class="number">1</span> ))</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前置インクリメント</span></span><br><span class="line">$ <span class="built_in">echo</span> $(( ++foo ))</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo&#125;</span></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 後置デクリメント</span></span><br><span class="line">$ <span class="built_in">echo</span> $(( foo-- ))</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo&#125;</span></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">unset</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># パラメーター展開やコマンド置換も可能</span></span><br><span class="line">$ <span class="built_in">echo</span> $(( <span class="variable">$&#123;foo:-2&#125;</span> ** <span class="number">2</span> ))</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h1 id="コマンド置換-Command-Substitution"><a href="#コマンド置換-Command-Substitution" class="headerlink" title="コマンド置換 (Command Substitution)"></a>コマンド置換 (Command Substitution)</h1><p>ドル記号に続く1重の丸括弧の間にコマンドを記述する (<code>$(command)</code>) と、その部分がコマンドの実行結果で置き換えられます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ touch <span class="string">&quot;test_<span class="subst">$(date +&#x27;%Y-%m-%d&#x27;)</span>.log&quot;</span></span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">some-list.txt  test_2021-04-05.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># `git grep` で検索対象のブランチ指定に使う例</span></span><br><span class="line">$ git grep <span class="string">&#x27;Future&#x27;</span> $(git for-each-ref --format=<span class="string">&quot;%(refname)&quot;</span> refs/remotes/origin) -- <span class="string">&#x27;*.vue&#x27;</span> <span class="string">&#x27;:^*.log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `$(cat some-list.txt)` と同じ処理だが、より早い書き方</span></span><br><span class="line">$ <span class="built_in">echo</span> $(&lt; some-list.txt)</span><br><span class="line">foo bar baz</span><br><span class="line"></span><br><span class="line">$ cat some-list.txt</span><br><span class="line">foo</span><br><span class="line">bar</span><br><span class="line">baz</span><br></pre></td></tr></table></figure><p>なお、バッククォートの間にコマンドを書く <code>`command`</code> という形式でもコマンド置換できますが、ネストしたコマンド置換が書きやすく、バックスラッシュの扱いに特別気を付ける必要もない <code>$(command)</code> の方が使いやすいです。</p><h1 id="ファイル名展開-Filename-Expansion"><a href="#ファイル名展開-Filename-Expansion" class="headerlink" title="ファイル名展開 (Filename Expansion)"></a>ファイル名展開 (Filename Expansion)</h1><p>文字列に <code>*</code>, <code>?</code>, <code>[</code> の文字が含まれているとパターンとみなされ、パターンにマッチするファイル名のリストに展開されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">test1.txt  test11.txt  test2.txt  test3.txt</span><br><span class="line"></span><br><span class="line">$ foo=<span class="built_in">test</span>*.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">declare</span> -p foo</span><br><span class="line"><span class="built_in">declare</span> -- foo=<span class="string">&quot;test*.txt&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo&#125;</span></span><br><span class="line">test1.txt test11.txt test2.txt test3.txt</span><br><span class="line"></span><br><span class="line">$ bar=<span class="built_in">test</span>[1-2].txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">declare</span> -p bar</span><br><span class="line"><span class="built_in">declare</span> -- bar=<span class="string">&quot;test[1-2].txt&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo&#125;</span> <span class="variable">$&#123;bar&#125;</span></span><br><span class="line">test1.txt test11.txt test2.txt test3.txt test1.txt test2.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># クォートで囲むと展開されない</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;foo&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;bar&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">test</span>*.txt <span class="built_in">test</span>[1-2].txt</span><br></pre></td></tr></table></figure><h1 id="プロセス置換-Process-Substitution"><a href="#プロセス置換-Process-Substitution" class="headerlink" title="プロセス置換 (Process Substitution)"></a>プロセス置換 (Process Substitution)</h1><p>プロセス置換はプロセスへの入出力をファイルで参照できるようにします。</p><p><code>&lt;(process-list)</code> 形式の場合、 <code>process-list</code> の実行結果を別のコマンドの入力として使うことができます。パイプと似たような機能ですが、パイプが1個しか使えずパイプ先が固定であるのに対して、プロセス置換は複数のプロセス置換が使え、ファイルを指定する箇所で使うことができます。</p><p>例えば、ある <code>grep</code> の結果を別の <code>grep</code> の検索パターンとして使う場合、プロセス置換を使わないなら中間ファイルが必要になります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 検索パターンを生成するgrep。検索結果は中間ファイルに出力する。</span></span><br><span class="line">$ grep -oE <span class="string">&#x27;^[0-9]+&#x27;</span> config.txt &gt; patterns.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中間ファイルに出力された検索パターンを使ってgrepする。</span></span><br><span class="line">$ grep -rf patterns.txt some-directory/</span><br></pre></td></tr></table></figure><p>2個めの <code>grep</code> の <code>patterns.txt</code> 部分にプロセス置換を使って1個めの <code>grep</code> 処理を記述すると、中間ファイルを無くせます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -rf &lt;(grep -oE <span class="string">&#x27;^[0-9]+&#x27;</span> config.txt) some-directory/</span><br></pre></td></tr></table></figure><p>プロセス置換は複数使えるため、diffを取るファイルに前処理をかけてから差分を取るといったことも簡潔に実行できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ diff -u &lt;(iconv -f SJIS hoge.txt) &lt;(iconv -f SJIS fuga.txt)</span><br></pre></td></tr></table></figure><p>同様に <code>&gt;(process-list)</code> 形式の場合、別のコマンドのファイルへの出力を <code>process-list</code> の入力として使うことができます。次の例では標準エラー出力のリダイレクト先 <code>2&gt;</code> にプロセス置換を使用しています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 標準エラー出力のみ、標準エラー (画面) に出力しつつログファイルにも出力する例</span></span><br><span class="line">$ perl -le <span class="string">&#x27;print &quot;info message.&quot;; print STDERR &quot;error message.&quot;&#x27;</span> 2&gt; &gt;(tee error.log &gt;&amp;2)</span><br><span class="line">info message.</span><br><span class="line">error message.</span><br><span class="line"></span><br><span class="line">$ cat error.log</span><br><span class="line">error message.</span><br></pre></td></tr></table></figure><p>なお、プロセス置換を最後に紹介しましたが、プロセス置換は最後に展開されるというわけではありません。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>当記事ではbashのシェル展開を紹介しました。この中で私が好きなのはプロセス置換です。中間ファイルは作成してから削除までの管理が地味に面倒なため、その中間ファイルを無くせるメリットが大きいと感じています。また、パラメーター展開の種類の豊富さには驚きました。コマンドを繋げてやっている処理をパラメーター展開に集約できるケースも多いのではないでしょうか。</p><p>当記事で <a href="https://future-architect.github.io/articles/20210321/">シェルスクリプト連載</a> は一区切りとなります。シェルスクリプトというテーマの中で様々なジャンルの記事が公開されました。未読の記事があればぜひ過去記事も参照してください。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://www.gnu.org/software/bash/manual/">GNU Bashのマニュアル</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210406/fotis-fotopoulos-DuHKoV44prg-unsplash.jpg&quot;&gt;&lt;br&gt;Photo by &lt;a href=&quot;https://unsplash.com/@ffstop?utm_source=unspl</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
    <category term="Bash" scheme="https://future-architect.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>オプション付きのオリジナルコマンドを作成しよう</title>
    <link href="https://future-architect.github.io/articles/20210405/"/>
    <id>https://future-architect.github.io/articles/20210405/</id>
    <published>2021-04-04T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210405/penguin-2108955_1280.jpg"></p><blockquote><p><a href="https://pixabay.com/ja/users/pixel-mixer-1197643/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1703294">Marcel Langthim</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1703294">Pixabay</a>からの画像</p></blockquote><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの尾崎です。<a href="https://future-architect.github.io/articles/20210321/">シェルスクリプト連載</a>の6日目です。<br>突然ですが、みなさんは「あんなコマンドあったらいいのにな」と思ったことはありませんか。<br>めったにないと思いますが、せっかくなので本日はオリジナルコマンドの作成方法を記したいと思います。<br>それではいきましょう。</p><h1 id="オプションなしのコマンドを作成"><a href="#オプションなしのコマンドを作成" class="headerlink" title="オプションなしのコマンドを作成"></a>オプションなしのコマンドを作成</h1><p>手始めに以下のようなシンプルなオプションなしのコマンドを作成します。</p><ul><li>引数を標準出力させる</li><li>引数がない場合、もしくは引数が複数の場合はエラーを出力させる</li></ul><p>シェルスクリプト<code>testcommand</code>を作成します。<br>作成するディレクトリはどこでも良いです。<br>ちなみにファイル名がそのままコマンド名になります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim <span class="variable">$HOME</span>/<span class="built_in">command</span>/testcommand</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">if [[ $1 &#x3D; &quot;&quot; ]]; then # 引数がない場合</span><br><span class="line">  echo &quot;Error : Requires an argument&quot; 1&gt;&amp;2</span><br><span class="line">  exit 2</span><br><span class="line">elif [[ $# -gt 1 ]]; then # 引数が複数の場合</span><br><span class="line">  echo &quot;Error : Too many arguments&quot; 1&gt;&amp;2</span><br><span class="line">  exit 2</span><br><span class="line">else</span><br><span class="line">  echo $1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>このままではコマンドを実行できないので、<code>$HOME/command</code>にPATHを通します。<br><code>.bash_profile</code>に以下を記述します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;$HOME&#x2F;command:$PATH</span><br></pre></td></tr></table></figure><p>続いて、以下を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>PATHが通ったので、作成したコマンド<code>testcommand</code>を以下の3パターンで実行します。</p><ol><li>引数なし</li><li>引数が複数</li><li>引数が1つ</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 引数なし</span></span><br><span class="line">$ testcommand</span><br><span class="line">Error : Requires an argument</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 引数が複数</span></span><br><span class="line">$ testcommand test1 test2</span><br><span class="line">Error : Too many arguments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 引数が1つ</span></span><br><span class="line">$ testcommand <span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>期待通りの結果が得られました。<br>が、これは以下を実行しているのと特に変わりないですね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sh testcommand</span><br><span class="line">$ sh testcommand test1 test2</span><br><span class="line">$ sh testcommand <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>次はオプション付きのコマンドを作成します。</p><h1 id="オプション付きのコマンドを作成"><a href="#オプション付きのコマンドを作成" class="headerlink" title="オプション付きのコマンドを作成"></a>オプション付きのコマンドを作成</h1><p>続いて以下のようなシンプルなオプション付きのコマンドを作成します。</p><ul><li>コマンド名を標準出力させる</li><li><code>-a</code>の場合は<code>date</code>コマンドを実行する</li><li><code>-b</code>の場合は引数を標準出力させる</li><li><code>-h</code>、もしくは存在しないオプションの場合はコマンドの使用方法を標準出力させる</li></ul><p>先ほどの<code>testcommand</code>を以下のように書き換え、オプションを処理できるようにします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim <span class="variable">$HOME</span>/<span class="built_in">command</span>/testcommand</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>testcommand</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> usage &#123;</span><br><span class="line">  cat &lt;&lt;<span class="string">EOM</span></span><br><span class="line"><span class="string"># コマンドの使用方法を記述する</span></span><br><span class="line"><span class="string">Usage: $(basename &quot;$0&quot;) [OPTION]...</span></span><br><span class="line"><span class="string">  -h          Display help</span></span><br><span class="line"><span class="string">  -a          Display date</span></span><br><span class="line"><span class="string">  -b VALUE    Display argument</span></span><br><span class="line"><span class="string">EOM</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span> 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">function_a</span></span>() &#123;</span><br><span class="line">  date</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">function_b</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;OPTARG&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 各オプションに応じた実行内容を記述する</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">&quot;:ab:h&quot;</span> optKey; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$optKey</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    a)</span><br><span class="line">      <span class="comment"># -aの場合の実行内容</span></span><br><span class="line">      function_a</span><br><span class="line">      ;;</span><br><span class="line">    b)</span><br><span class="line">      <span class="comment"># -bの場合の実行内容</span></span><br><span class="line">      function_b</span><br><span class="line">      ;;</span><br><span class="line">    <span class="string">&#x27;-h&#x27;</span>|<span class="string">&#x27;--help&#x27;</span>|* )</span><br><span class="line">      <span class="comment"># -h、--helpの場合、もしくは-a、-b以外の場合の実行内容</span></span><br><span class="line">      usage</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># オプションの有無にかかわらず以下が実行される</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;this command is <span class="subst">$(basename $&#123;0&#125;)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>getoptsコマンドの引数、<code>&quot;:ab:h&quot;</code>の部分について補足します。</p><p>用意したオプションについて、引数が必要なものはうしろに<code>:</code>をつけてすべてのオプションを並べます。<br>先頭の<code>:</code>は、存在しないオプションが実行された際のエラーメッセージを非表示にすることができます。</p><p>では、作成したコマンドを以下の6パターンで実行します。</p><ol><li>オプションなし</li><li>オプション<code>-a</code>のみ</li><li>オプション<code>-b</code>のみ</li><li>オプション<code>-a</code>と<code>-b</code></li><li>オプション<code>-h</code></li><li>オプション<code>-c</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. オプションなし</span></span><br><span class="line">$ testcommand</span><br><span class="line">this <span class="built_in">command</span> is testcommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. オプション-aのみ</span></span><br><span class="line">$ testcommand -a</span><br><span class="line">Mon Apr  5 01:26:38     2021</span><br><span class="line">this <span class="built_in">command</span> is testcommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. オプション-bのみ</span></span><br><span class="line">$ testcommand -b argument_b</span><br><span class="line">argument_b</span><br><span class="line">this <span class="built_in">command</span> is testcommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. オプション-aと-b</span></span><br><span class="line">$ testcommand -a -b argument_b</span><br><span class="line">Mon Apr  5 01:26:51     2021</span><br><span class="line">argument_b</span><br><span class="line">this <span class="built_in">command</span> is testcommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. オプション-h</span></span><br><span class="line">$ testcommand -h</span><br><span class="line">Usage: testcommand [OPTION]...</span><br><span class="line">  -h          Display <span class="built_in">help</span></span><br><span class="line">  -a          Display date</span><br><span class="line">  -b VALUE    Display argument</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. オプション-c</span></span><br><span class="line">$ testcommand -c</span><br><span class="line">Usage: testcommand [OPTION]...</span><br><span class="line">  -h          Display <span class="built_in">help</span></span><br><span class="line">  -a          Display date</span><br><span class="line">  -b VALUE    Display argument</span><br></pre></td></tr></table></figure><p>オプション付きコマンドの場合も期待通りの結果が得られました。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回作成したコマンドはまったく実用性がありませんが、便利なコマンドを思いついた方はぜひ作成してみてはいかがでしょうか。</p><p>明日は岸本卓也さんの<a href="/articles/20210406/">Bashのシェル展開</a>についてです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210405/penguin-2108955_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/pixel-mixer-1197643/?utm_</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="Linux" scheme="https://future-architect.github.io/tags/Linux/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
    <category term="Bash" scheme="https://future-architect.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>MONETマーケットプレイスAPIを使ってみた #1 ～概要説明と購入編～</title>
    <link href="https://future-architect.github.io/articles/20210404/"/>
    <id>https://future-architect.github.io/articles/20210404/</id>
    <published>2021-04-03T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXチームの大西翔太です。</p><p>2020年9月に、MaaSの実現に必要な機能が簡単に使える<a href="https://developer.monet-technologies.co.jp/">MONETマーケットプレイス</a>プラットフォームが公開されたのを皆様はご存じでしょうか？</p><p>この記事では、MaaS実現のためのプラットフォーム「MONETマーケットプレイス」のシンプルさや可能性を伝えるべく、まずは導入としてプラットフォームの概要や、APIを購入するまでの手順について書いてみようと思います！</p><h1 id="MONETマーケットプレイスとは何か"><a href="#MONETマーケットプレイスとは何か" class="headerlink" title="MONETマーケットプレイスとは何か"></a>MONETマーケットプレイスとは何か</h1><p><img src="/images/20210404/top_page_20210316.png"></p><p>MaaSは近年世界中で盛り上がりを見せており、海外だとドイツのmoovelやフィンランドのWhim、日本だと小田急電鉄の「EMot」などが良く知られているサービスなように思います。</p><p>様々なMaaS関連のサービスが立ち上がる中で、<a href="https://developer.monet-technologies.co.jp/">MONETマーケットプレイス</a>は、オンデマンドバスの配車システムをはじめ、多様な業界・業種の企業から提供されるデータやシステムのAPIを購入して、新たなサービスの開発に活用することができるという特徴を持ったサービスです。</p><p>MONETマーケットプレイスの大きな特徴はいろいろな会社が提供しているAPIを、MONET社が提供するAPI Keyのみで使用することができることであり、この特徴を生かして複数サービスを組み合わせた独自サービスの提供が容易に実現できるようです。</p><p>実際にアカウントを作成してメニューを触ってみたので、ここからはMONETマーケットプレイスにどのような機能があるかについて説明していきます。</p><h1 id="ログインメニューの説明"><a href="#ログインメニューの説明" class="headerlink" title="ログインメニューの説明"></a>ログインメニューの説明</h1><p><a href="https://developer.monet-technologies.co.jp/">TOPページ</a>右上にあるログインボタンからMONETマーケットプレイスにログインすると、下図のような6つのメニューが表示されます。この章では、ログインメニューから使える各種機能について説明していきます。<br><img src="/images/20210404/my_page.png"></p><h3 id="契約中サービスの確認"><a href="#契約中サービスの確認" class="headerlink" title="契約中サービスの確認"></a>契約中サービスの確認</h3><p><img src="/images/20210404/%E5%A5%91%E7%B4%84%E4%B8%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9_20210317.png"></p><p>まず、ログインメニューの上段左側にある「契約中サービス」メニューについて説明します。<br>この画面では、現在契約しているサービスの一覧を確認することができます。<br>また、契約中のサービスの解約もこのページから行うことができます。</p><h3 id="APIキーの管理"><a href="#APIキーの管理" class="headerlink" title="APIキーの管理"></a>APIキーの管理</h3><img src="/images/20210404/APIキー管理_20210311.png" style="border:solid 1px #000000"><p>マイページ上段の真ん中にある「APIキー管理」ページでは、APIキーの確認と編集・削除を行うことができます。<br>また、「統計」からAPIキーの使用状況についても確認することができます。<br><img src="/images/20210404/%E5%88%A9%E7%94%A8%E7%8A%B6%E6%B3%81_20210331.png"></p><h3 id="利用料金の確認"><a href="#利用料金の確認" class="headerlink" title="利用料金の確認"></a>利用料金の確認</h3><img src="/images/20210404/利用料金_20210331.png" style="border:solid 1px #000000"><p>マイページ上段右側の「利用状況」メニューからはAPIごとの利用料金の推移と明細を確認することができます。</p><h3 id="支払い履歴の確認"><a href="#支払い履歴の確認" class="headerlink" title="支払い履歴の確認"></a>支払い履歴の確認</h3><img src="/images/20210404/お支払い履歴.png" style="border:solid 1px #000000"><p>マイページ下段左側の「お支払い履歴」メニューからは月ごとの支払金額の推移を確認することができます。</p><h3 id="支払い方法の変更"><a href="#支払い方法の変更" class="headerlink" title="支払い方法の変更"></a>支払い方法の変更</h3><img src="/images/20210404/image.png" style="border:solid 1px #000000"><p>マイページ下段中央の「お支払い方法」メニューからは、支払方法を変更することができます。<br>また、2021年3月現在選択可能な支払方法は「請求書払い」のみとなっています。</p><h3 id="アカウントの確認-追加"><a href="#アカウントの確認-追加" class="headerlink" title="アカウントの確認/追加"></a>アカウントの確認/追加</h3><img src="/images/20210404/アカウント管理_coverd.png" style="border:solid 1px #000000"><p>マイページ下段右側の「アカウント」メニューからは自身のアカウント情報の確認/編集とグループ化機能 （※1）の利用を行うことができます。<br>マイページログイン用のパスワードの変更もこちらのメニューから行うことができます。</p><p><strong>(※1) グループ化機能について</strong><br>MONETマーケットプレイスには、「グループ化」という機能があり、複数のメールアドレスでアカウント共有ができるようです。</p><p>グループ化機能を利用する場合、こちらのアカウントメニューで新規アカウントの追加や利用停止等の管理ができます。</p><h1 id="APIキーの説明"><a href="#APIキーの説明" class="headerlink" title="APIキーの説明"></a>APIキーの説明</h1><p>この章ではMONETマーケットプレイスのAPIを使うために必要なAPIキーの扱いについて説明します。</p><h3 id="キーの取得"><a href="#キーの取得" class="headerlink" title="キーの取得"></a>キーの取得</h3><p>APIキーの取得は、マイページにある「APIキー管理」メニューで行います。<br>APIキー管理メニューの右上にある「新規作成」ボタンを押下し、表示されたポップアップ内の「APIキー」欄にキーの名前を、「概要」欄にキーの概要を記入し、ポップアップ右下の「登録」ボタンを押下するとキーを作成することができます。<br><img src="/images/20210404/API%E3%82%AD%E3%83%BC%E5%8F%96%E5%BE%97.png"></p><img src="/images/20210404/APIキー取得_after.png" style="border:solid 1px #000000"><h3 id="キーの参照"><a href="#キーの参照" class="headerlink" title="キーの参照"></a>キーの参照</h3><p>作成したAPIキーは、「APIキー管理」メニューから作成した該当キーの「APIキー」列を押下することで参照できます。</p><img src="/images/20210404/APIキー参照_before_covered.png" style="border:solid 1px #000000"><p><img src="/images/20210404/API%E3%82%AD%E3%83%BC%E5%8F%82%E7%85%A7_after.png"></p><h3 id="キーのリセット"><a href="#キーのリセット" class="headerlink" title="キーのリセット"></a>キーのリセット</h3><p>APIキーの削除は「APIキー管理」メニューから該当キーの「削除」列を押下することで行うことができます。</p><img src="/images/20210404/APIキー削除_before.png" style="border:solid 1px #000000"><p><img src="/images/20210404/API%E3%82%AD%E3%83%BC%E5%89%8A%E9%99%A4_%E3%83%9D%E3%83%83%E3%83%97%E3%82%A2%E3%83%83%E3%83%97.png"><br><img src="/images/20210404/API%E3%82%AD%E3%83%BC%E5%89%8A%E9%99%A4_after.png"></p><h1 id="実際にAPIを購入してみた"><a href="#実際にAPIを購入してみた" class="headerlink" title="実際にAPIを購入してみた"></a>実際にAPIを購入してみた</h1><p>この章では、MONETマーケットプレイスAPIを購入する手順について説明します。</p><p><a href="https://developer.monet-technologies.co.jp/">TOPページ</a>から使用したいAPIを選択し、「料金」タブから購入を選択して出てきたポップアップ内の利用規約を読んだ上で、ポップアップ下部にある「利用規約に同意して購入する」ボタンを押下することでAPIを購入することができます。<br><img src="/images/20210404/API_before.png"><br><img src="/images/20210404/API_popup.png"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>本記事ではMONETマーケットプレイスに関してログインメニューの説明とAPI購入手順について書きました。</p><p>実際にAPI購入まで行った感想として、ドキュメントも読みやすく、手順もシンプルであるためとても簡単に使用できると感じました。</p><p>次回はいよいよAPIを実際に使用してみた感想について記事にしてみようと思います！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG/DXチームの大西翔太です。&lt;/p&gt;
&lt;p&gt;2020年9月に、MaaSの実現に必要な機能が簡単に使える&lt;a</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="SaaS" scheme="https://future-architect.github.io/tags/SaaS/"/>
    
    <category term="API" scheme="https://future-architect.github.io/tags/API/"/>
    
    <category term="MaaS" scheme="https://future-architect.github.io/tags/MaaS/"/>
    
    <category term="MONETマーケットプレイス" scheme="https://future-architect.github.io/tags/MONET%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E3%83%97%E3%83%AC%E3%82%A4%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDBをS3へExportして、Glue+AthenaでSQLを実行する</title>
    <link href="https://future-architect.github.io/articles/20210403/"/>
    <id>https://future-architect.github.io/articles/20210403/</id>
    <published>2021-04-02T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.803Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210403/Screen_Shot_2021-03-14_at_1.09.08.png"></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャーの棚井龍之介です。</p><p>業務ではDynamoDBを利用しており、連日DynamoDBコンソール画面と睨めっこをしています。DynamoDBのコンソール画面は特定のデータをピンポイントで探すには優秀ですが、データ集計には全く向いていません。</p><p>そのため、統計調査や障害調査などによりデータ分析が必要になった場合、毎度awscliコマンドとbashコマンドのコラボレーションで試行錯誤しながら集計することになります。</p><p>DynamoDBでのデータ検索は原則「スキャンとクエリ」のみです。SQLのWHERE句に似たfilterという機能はありますが、テーブル同士のJOINや複雑な条件絞り込みは難しいため「SQLが打てれば一瞬で解決できるのに、どうしてこんな面倒なんだ。これが低レイテンシの代償なのか」と考えていました。</p><p>何度もデータ集計をして、「aws dynamodb xx yy zz ~~」の職人芸を繰り出すことや、一度きりの集計でしか使えないスクリプトを量産しているうちに、もっと楽で正確で作業コストの低い方法はないか？と思う機会が増えてきました。</p><h2 id="AWS-News-Blog-からの福音"><a href="#AWS-News-Blog-からの福音" class="headerlink" title="AWS News Blog からの福音"></a>AWS News Blog からの福音</h2><p><a href="https://aws.amazon.com/jp/blogs/aws/new-export-amazon-dynamodb-table-data-to-data-lake-amazon-s3/">New – Export Amazon DynamoDB Table Data to Your Data Lake in Amazon S3, No Code Writing Required</a></p><p>なんと、DynamoDBのテーブルデータを、追加コードなしでパッとS3に出力できるようになりました！<br>PipelineやGlueを利用したS3出力ならば以前から可能でしたが、より低コストでDynamoDB → S3へのデータ出力が可能となりました。</p><p>「S3にExportできる →　GlueのデータカタログとAthenaのクエリ機能により、サーバレス環境でSQLを実行できる」の連想ゲームなので、動作検証も兼ねて早速試してみました。</p><h1 id="本記事の流れ"><a href="#本記事の流れ" class="headerlink" title="本記事の流れ"></a>本記事の流れ</h1><p>DynamoDBのデータにSQLを実行するため、本記事では以下の流れで説明します。</p><ol><li><a href="#1dynamodb%E3%82%92%E6%BA%96%E5%82%99">DynamoDBを準備</a></li><li><a href="#2export%E5%85%88%E3%81%AEs3%E3%82%92%E6%BA%96%E5%82%99">Export先のS3を準備</a></li><li><a href="#3export%E3%82%92%E5%AE%9F%E8%A1%8C">Exportを実行</a></li><li><a href="#4glue%E3%81%AEcrawler%E3%82%92%E5%AE%9F%E8%A1%8C">GlueのCrawlerを実行</a></li><li><a href="#5athena%E3%81%A7sql%E3%82%92%E5%AE%9F%E8%A1%8C">AthenaでSQLを実行</a></li></ol><h2 id="1-DynamoDBを準備"><a href="#1-DynamoDBを準備" class="headerlink" title="1.DynamoDBを準備"></a>1.DynamoDBを準備</h2><p>Export S3の機能は新しいコンソール画面上でのみ可能なので、古いUIを利用している場合は「新しいコンソールを試す」を選択してください。<br><img src="/images/20210403/1.png"></p><p>今回の動作検証用に、以下の設定でDynamoDBテーブルを作成します。</p><ul><li>テーブル名: test-s3export-and-query</li><li>パーティションキー: id(String)<br><img src="/images/20210403/3.png"></li></ul><p>動作検証用に、サンプルデータを15件投入します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00001&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;20&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;windows&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;android&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00002&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;25&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;windows&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;android&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00003&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;30&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;windows&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;android&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00004&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;35&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;windows&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;android&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00005&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;40&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;windows&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;android&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00006&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;45&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;windows&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;android&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00007&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;20&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;windows&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;ios&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00008&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;25&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;windows&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;ios&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00009&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;30&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;windows&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;ios&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00010&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;20&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;mac&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;ios&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00011&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;25&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;mac&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;ios&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00012&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;30&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;mac&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;ios&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00013&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;35&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;mac&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;ios&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00014&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;40&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;mac&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;android&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;00015&quot;</span>&#125;,<span class="attr">&quot;age&quot;</span>:&#123;<span class="attr">&quot;N&quot;</span>:<span class="string">&quot;45&quot;</span>&#125;,<span class="attr">&quot;pc&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;mac&quot;</span>&#125;,<span class="attr">&quot;mobile&quot;</span>:&#123;<span class="attr">&quot;S&quot;</span>:<span class="string">&quot;android&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>投入結果をコンソール画面で確認します。<br>15件とも正しく格納されています。</p><p><img src="/images/20210403/4.png"></p><h2 id="2-Export先のS3を準備"><a href="#2-Export先のS3を準備" class="headerlink" title="2.Export先のS3を準備"></a>2.Export先のS3を準備</h2><p>データ出力先のS3を作成します。<br>今回は test-dynamodb-export-20210315 のバケット名で作成しました。<br><img src="/images/20210403/5.png"></p><h2 id="3-Exportを実行"><a href="#3-Exportを実行" class="headerlink" title="3.Exportを実行"></a>3.Exportを実行</h2><p>テーブルのExportでは、DynamoDBの読み込みキャパシティーユニットが消費されません。よってDBのパフォーマンスには影響を与えずにデータを出力できます。ただし、Export実行のタイミングとトランザクションのタイミングが重なった場合、出力項目が最新のテーブルとはズレが生じる可能性があります。本機能は「DynamoDBの特定の断面をS3にExportすることが目的」なため、リアルタイムなデータ分析には適していない点にご注意ください。</p><p>DynamoDBのコンソール画面上から、Export S3を実行します。<br>「ストリームとエクスポート」から「S3へのエクスポート」を選択<br><img src="/images/20210403/6.png"></p><p>Export S3の実行には Point-in-Time Recovery の設定が必要なため、画面の指示に従い有効化します。<br>出力先のS3を選択したら、「エクスポート」を実行します。<br><img src="/images/20210403/6-2.png"></p><p>コンソール画面上でExportの進行状況が見れます。<br>データ数にもよりますが、出力は5分程度で完了します。<br><img src="/images/20210403/7.png"></p><p>Export完了後に出力先S3を確認すると、DyanmoDBデータ本体以外にも複数ファイルが確認できます。<br>各ファイルの意味はこちらです</p><table><thead><tr><th>オブジェクト</th><th>説明</th></tr></thead><tbody><tr><td>_started</td><td>ターゲットs3パスへの疎通確認に利用されたもの。削除して問題ない</td></tr><tr><td>data/</td><td>出力したデータ本体。テーブル項目がgz形式に圧縮されて出力される</td></tr><tr><td>manifest-files.json</td><td>Exportされたファイルの情報が記載される</td></tr><tr><td>manifest-files.md5</td><td>manifest-files.jsonのチェックサムファイル</td></tr><tr><td>manifest-summary.json</td><td>Exportジョブの概要情報が記載される</td></tr><tr><td>manifest-summary.md5</td><td>manifest-summary.jsonのチェックサムファイル</td></tr></tbody></table><p><img src="/images/20210403/8.png"></p><p>dataパス配下に、ExportしたDynamoDBテーブルデータがgz形式で格納されています。</p><p><img src="/images/20210403/9.png"></p><p>以上で、DynamoDBのExport S3は完了しました。</p><p>コンソール画面をいくつか操作するだけで、DynamoDB→S3へのデータ出力が完了です。</p><h2 id="4-GlueのCrawlerを実行"><a href="#4-GlueのCrawlerを実行" class="headerlink" title="4.GlueのCrawlerを実行"></a>4.GlueのCrawlerを実行</h2><p>Athenaでのクエリ実行には、事前のテーブル定義が必要です。<br>各項目ごとに手動追加することも可能ですが、作業簡略化のために今回はGlueのCrawler機能をを利用します。</p><p>まずは、Glueデータカタログの「データベース」→「データベースの追加」を選択し、Crawler結果を格納するデータベースを追加してください。</p><p>今回は test_dynamodb_export の名前でデータベースを追加しました。</p><p><img src="/images/20210403/10.png"></p><p>続いて、「テーブル」→「テーブルの追加」→「クローラを使用してテーブルを追加」を選択します。</p><p><img src="/images/20210403/11.png"></p><p>今回のクローラでは、以下の設定とします。</p><ul><li>名前: test-dynamodb-export</li><li>インクルードパス: s3パス(DynamoDBデータのExport先のパス, ~/data/ までを指定する)</li><li>スケジュール: オンデマンド</li><li>データベース: test_dynamodb_export</li><li>テーブルに追加されたプレフィックス: users_ (“プレフィックスでの指定文字列+data”が、テーブル名となる)</li></ul><p><img src="/images/20210403/12.png"></p><p>クローラの実行をオンデマンドに設定したため、「クローラ」→「test-dynamodb-export(今回追加したクローラ名)」→「クローラの実行」により、テーブル定義を追加します。</p><p><img src="/images/20210403/13.png"></p><p>1,2分程度でクローラ実行が完了します。<br>以上により、DynamoDBのデータをS3に格納して「クエリが実行できる状態」になりました。</p><h2 id="5-AthenaでSQLを実行"><a href="#5-AthenaでSQLを実行" class="headerlink" title="5.AthenaでSQLを実行"></a>5.AthenaでSQLを実行</h2><p>Athenコンソール画面での「データベース」で「test_dynamodb_export(今回追加したデータベース)」を選択し、テーブルに「users_data」が表示されることを確認します。</p><p>Glue Crawlerにより項目定義は完了しているため、あとはSQLを実行するのみです。</p><p><img src="/images/20210403/15.png"></p><p>まずは SELECT してみましょう。<br>DynamoDBの出力項目をGlue Crawlerでテーブル定義した場合、各項目は「**Item.(項目名).(データ型)**」で指定できます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Item.id.S <span class="keyword">AS</span> <span class="keyword">id</span>,</span><br><span class="line">         Item.age.N <span class="keyword">AS</span> age,</span><br><span class="line">         Item.mobile.S <span class="keyword">AS</span> mobile,</span><br><span class="line">         Item.pc.S <span class="keyword">AS</span> pc</span><br><span class="line"><span class="keyword">FROM</span> test_dynamodb_export.users_data</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>  Item.id.S</span><br></pre></td></tr></table></figure><p><img src="/images/20210403/17.png"></p><p>DynamoDBをSELECTできましたね。<br>SQLっぽく、いくつか条件を追加してみます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Item.id.S <span class="keyword">AS</span> <span class="string">&quot;35歳以下のiOSユーザ&quot;</span>,</span><br><span class="line">         Item.age.N <span class="keyword">AS</span> <span class="string">&quot;年齢&quot;</span></span><br><span class="line"><span class="keyword">FROM</span> test_dynamodb_export.users_data</span><br><span class="line"><span class="keyword">WHERE</span> Item.age.N &lt;= <span class="string">&#x27;30&#x27;</span></span><br><span class="line">        <span class="keyword">AND</span> Item.mobile.S = <span class="string">&#x27;ios&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>  Item.age.N, Item.id.S</span><br></pre></td></tr></table></figure><p><img src="/images/20210403/18.png"></p><p>テーブルのJOINも、もちろんできます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> <span class="string">&quot;15×15=225&quot;</span></span><br><span class="line"><span class="keyword">FROM</span> test_dynamodb_export.users_data, test_dynamodb_export.users_data</span><br></pre></td></tr></table></figure><p><img src="/images/20210403/19.png"></p><p>今回の記事では1テーブルしか作成していませんが、各テーブルごとに <strong>Export S3 + Glue Crawler</strong> を実施すれば、DynamoDBテーブル同士のJOINが可能となります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>DynamoDBのS3 Export機能が搭載されたことにより、データ集計コストが下がりました。既存のGlueとAthenaを利用することで、「SQL分析に手間がかかる」というDynamoDBの弱点が一部解消されたと考えています。今回の構成ではリアルタイムなデータ分析は不可能ですが、過去データを特定の断面で集計するには十分です。</p><p>みなさんもDynamoDB集計に疲弊されていたら、是非とも <code>DynamoDB Export S3</code> を使ってみてください！</p><h2 id="参照サイト"><a href="#参照サイト" class="headerlink" title="参照サイト"></a>参照サイト</h2><ul><li><a href="https://aws.amazon.com/jp/blogs/aws/new-export-amazon-dynamodb-table-data-to-data-lake-amazon-s3/">New – Export Amazon DynamoDB Table Data to Your Data Lake in Amazon S3, No Code Writing Required</a></li><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataExport.html">Exporting DynamoDB table data to Amazon S3</a></li><li><a href="https://dev.classmethod.jp/articles/dynamodb-table-export-service/">【新機能】Amazon DynamoDB Table を S3 に Export して Amazon Athena でクエリを実行する</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210403/Screen_Shot_2021-03-14_at_1.09.08.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Glue" scheme="https://future-architect.github.io/tags/Glue/"/>
    
    <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
    <category term="S3" scheme="https://future-architect.github.io/tags/S3/"/>
    
    <category term="Athena" scheme="https://future-architect.github.io/tags/Athena/"/>
    
  </entry>
  
  <entry>
    <title>シェルスクリプトでもGUI</title>
    <link href="https://future-architect.github.io/articles/20210402/"/>
    <id>https://future-architect.github.io/articles/20210402/</id>
    <published>2021-04-01T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.786Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210321/">シェルスクリプト連載</a>の5日目です。</p><p>僕が大学に入ったときに買ったパソコンは、Celeron 300AMHzというやつで、300MHzのパッケージ違いの2モデル目みたいな今見ると変なモデル名のやつでした。ちょっといじると450MHzで動くいいやつでした。BeOS 4.0が付属しているショップブランドの自作PCでした。</p><p>BeOSはPOSIX対応のOSではあるものの、カーネルからGUIから大部分がオリジナルで楽しいOSでした。いくつか独自コマンドがインストールされていて、その中にダイアログを出すコマンドがありました。BeOSの魂の後継としてOSSで開発されているhaikuでもそのあたりのコマンドがあります。次のスクリーンショットはhaikuをQEMUで動かして撮ってみたものです。</p><p>提供されているのは情報の通知(notify, プログレスバーを作れたり、クリック時のintentも設定可能)、最大3択までのボタンが押せるメッセージパネル(alert)、ファイルのダイアログ(filepanel)です。ボタン選択やファイルのダイアログの場合はエラーコードで選択されたボタンが、標準出力に選択されたボタンのラベルやファイルのパスが出力されます。</p><p><img src="/images/20210402/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-26_10.44.41.png"></p><p><img src="/images/20210402/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-26_10.52.38.png"></p><p><img src="/images/20210402/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-26_10.56.18.png"></p><p>これらのコマンドをシェルスクリプトでつなぎ合わせるだけでもちょっとした対話型のプログラムができます。</p><p>BeOS以外にはそういうのないのかな、と思っていたのですが、<a href="https://twitter.com/aodag">@aodag</a>氏に<a href="https://help.gnome.org/users/zenity/">Zenity</a>というのがあると教えてもらったので試してみました。ZenityはLinuxでもmacOSでも動きますし、<a href="https://github.com/kvaps/zenity-windows">Windows版のインストーラ</a>もあります。クレジット見ると2003年ということでBeOSの方が古いですね。BeOSにインスパイアして作られたんですかね。</p><h1 id="Zenityを試す"><a href="#Zenityを試す" class="headerlink" title="Zenityを試す"></a>Zenityを試す</h1><p>Windowsは上記のインストーラで入ります。macOSはbrew install zenityです。<a href="https://ports.macports.org/port/zenity/summary">MacPortsはBig Surではまだビルドが成功しません</a>ね。Linuxとしては、Ubuntuはデスクトップの最小インストールでも入っていましたので、何もしなくても使えるようです。</p><p>BeOS/Haikuは3つのコマンドでしたがZenityは1コマンドでオプション違いで14種類のダイアログ(–formsは他の要素の集合)が利用できます。これらも、選択したものがエラーコードや標準出力で帰ってきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--calendar         カレンダーダイアログを表示する</span><br><span class="line">--entry            テキスト入力ダイアログを表示する</span><br><span class="line">--error            エラーダイアログを表示する</span><br><span class="line">--info             情報ダイアログを表示する</span><br><span class="line">--file-selection   ファイル選択ダイアログを表示する</span><br><span class="line">--list             一覧ダイアログを表示する</span><br><span class="line">--progress         進捗表示ダイアログを表示する</span><br><span class="line">--question         質問ダイアログを表示する</span><br><span class="line">--warning          警告ダイアログを表示する</span><br><span class="line">--scale            スケールダイアログを表示する</span><br><span class="line">--text-info        テキスト情報ダイアログを表示する</span><br><span class="line">--color-selection  色選択ダイアログを表示する</span><br><span class="line">--password         パスワードダイアログを表示する</span><br><span class="line">--forms            フォームダイアログを表示する</span><br></pre></td></tr></table></figure><p>Ubuntuで実行してみました。</p><p><img src="/images/20210402/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-27_10.15.17.png"></p><p>プログレスバーは、標準入力で流し込まれるテキストを使ってバーを更新したりラベルを更新できます。</p><figure class="highlight sh"><figcaption><span>progress.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10&quot;</span>; sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# やる気が少したまってきました&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;20&quot;</span> ; sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;30&quot;</span> ; sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;40&quot;</span> ; sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# やる気がそこそこたまってきました&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;50&quot;</span> ; sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;60&quot;</span> ; sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;70&quot;</span> ; sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# やる気がだいぶ溜まってきました&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;80&quot;</span> ; sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;90&quot;</span> ; sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;100&quot;</span> ; sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# やる気Maxです！&quot;</span></span><br></pre></td></tr></table></figure><p>macで実行させた結果はこちらです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./progress.sh | zenity --progress --title=<span class="string">&quot;やる気&quot;</span> --text=<span class="string">&quot;やる気をためています...&quot;</span> --percentage=0</span><br></pre></td></tr></table></figure><p><img src="/images/20210402/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-27_8.24.21.png"></p><p>これらを駆使すると、ちょっとした変換プログラムをPythonでもNode.jsでも作って、入力ファイルや出力先のファイルをGUIから入力してもらうといったことが可能になります。ターミナルの画面が怖いという非プログラマーなユーザーにも使ってもらえるツールが簡単に作れますね。以前は、マスターの更新とか、ちょっとしたことをするのにGUIとしてJenkinsを立ててそこを使ってもらったりしましたが、これで単独で各パソコンで利用してもらえますね。</p><h1 id="ZenityのGo移植"><a href="#ZenityのGo移植" class="headerlink" title="ZenityのGo移植"></a>ZenityのGo移植</h1><p>macOS版はいちおうHomebrewでもMacPorts(10.15なら)でもインストールはできるものの、かなり大量の依存を呼び込んで大量にビルドやらインストールやらが走ります。いろいろ調べてみたら、Go移植版がありました。</p><p><a href="https://github.com/ncruces/zenity">https://github.com/ncruces/zenity</a></p><p>WindowsとmacはOS標準機能を使うので外部ライブラリ非依存、Linux/FreeBSDなどのOSも、zenityがインストールされていなくてもqarma、matedialogといった類似のコマンドにフォールバックすることでポータビリティをあげています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/ncruces/zenity/...</span><br></pre></td></tr></table></figure><p>使える機能は4種類です。BeOSと比べると、プログレスバーがない代わりに色選択が入ったという感じですね。</p><ul><li>message (error, info, question, warning)</li><li>file selection</li><li>color selection</li><li>notification</li></ul><p>cgo非依存で外部ライブラリに依存しないため、ビルドすればシングルバイナリになるので配布も簡単です。またライブラリとしても利用可能です。オプション体系はzenityとは違うので、そのまま置き換えとは行きませんが、便利です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ zenity -question -text シェルスクリプト連載の原稿書けた？ \</span><br><span class="line">    -ok-label ばっちり -cancel-label まだ -extra-button 見直しをする</span><br></pre></td></tr></table></figure><p><img src="/images/20210402/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-27_20.43.08.png"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>シェルスクリプトをGUI化するZenityを紹介しました。標準入力、標準出力、エラーコードといったUNIXのお作法に従ってGUIが作れるのは面白いですね。</p><p>次の月曜日は尾崎さんの<a href="/articles/20210405/">オプション付きのオリジナルコマンドを作成しよう</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210321/&quot;&gt;シェルスクリプト連載&lt;/a&gt;の5日目です。&lt;/p&gt;
&lt;p&gt;僕が大学に入ったときに買ったパソコンは、Celeron 300AMHzというやつで、300MHzのパッケージ違いの2モデル目みたいな今見ると変なモデル名のや</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
    <category term="zenity" scheme="https://future-architect.github.io/tags/zenity/"/>
    
    <category term="GUI" scheme="https://future-architect.github.io/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>declare使ってBashで配列と連想配列</title>
    <link href="https://future-architect.github.io/articles/20210401/"/>
    <id>https://future-architect.github.io/articles/20210401/</id>
    <published>2021-03-31T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.760Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210401/%E3%82%A2%E3%82%A4%E3%82%AD%E3%83%A3%E3%83%83%E3%83%81.webp"></p><blockquote><p><a href="https://pixabay.com/ja/users/pixel-mixer-1197643/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1703294">Marcel Langthim</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1703294">Pixabay</a>からの画像</p></blockquote><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIGの市川です。<a href="https://future-architect.github.io/articles/20210321/">シェルスクリプト連載</a>の4日目です。</p><p>過去Shell Scriptでゴリゴリスクリプトを書いたりしていましたが（環境が許せば）Pythonで書くことが個人的に増えてきました。いざShell Scriptに戻ってきたときに配列と連想配列について調べ直すコトがままあったので、ここに記したいと思います。</p><h2 id="declareとは"><a href="#declareとは" class="headerlink" title="declareとは"></a>declareとは</h2><p>昨今Declarative programmingやらDeclarative APIやら、IT界隈でも形容詞で登場する単語ですが、Linuxのコマンドでdeclareというと変数を宣言する為のコマンドになります。</p><p>Shell Scriptではご存じの通り特に変数を宣言せずとも利用可能ですが、このコマンドとともに宣言すると色々な恩恵を受けることができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># オプションなしだと普通の変数と同じように使える</span></span><br><span class="line">A=<span class="string">&quot;variable&quot;</span></span><br><span class="line"><span class="built_in">declare</span> B=<span class="string">&quot;variable&quot;</span></span><br><span class="line"><span class="built_in">echo</span> non_declarative: <span class="variable">$&#123;A&#125;</span></span><br><span class="line"><span class="built_in">echo</span> declarative: <span class="variable">$&#123;B&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [出力]</span></span><br><span class="line">non_declarative: variable</span><br><span class="line">declarative: variable</span><br></pre></td></tr></table></figure><h3 id="declareのオプション"><a href="#declareのオプション" class="headerlink" title="declareのオプション"></a>declareのオプション</h3><table><thead><tr><th>オプション</th><th>説明</th></tr></thead><tbody><tr><td>-a</td><td>変数を配列として定義する</td></tr><tr><td>-A</td><td>変数を連想配列として定義する</td></tr><tr><td>-i</td><td>変数を数値用に定義する（文字列などは代入不可になる）</td></tr><tr><td>-l</td><td>変数から取得される値を常に小文字にする</td></tr><tr><td>-u</td><td>変数から取得される値を常に大文字にする</td></tr><tr><td>-n</td><td>変数を名前参照として定義する（シンボリックリンクのようなもの）</td></tr><tr><td>-r</td><td>変数を定数として定義する（readonlyな変数となり、定義時に値を格納する）</td></tr><tr><td>-x</td><td>変数を環境変数として定義する（定義したタイミングでexportされる）</td></tr></tbody></table><p>語り出してしまうとボリュームがそこそこになってしまうので、オプションの中の配列と連想配列について以降触れていきたいと思います。</p><h2 id="Shell-Scriptで配列"><a href="#Shell-Scriptで配列" class="headerlink" title="Shell Scriptで配列"></a>Shell Scriptで配列</h2><p>「declareで」といいながら実は配列はdeclareで宣言せずとも使えたりします。<br>ですが、せっかくなので宣言して使います。</p><ul><li>コード</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># データをSplitして配列を作る</span></span><br><span class="line">data=<span class="string">&quot;a b c 1 2 3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># declareする（初期値は後からでも格納可能）</span></span><br><span class="line"><span class="built_in">declare</span> -a list_declarative=(<span class="variable">$&#123;data// / &#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;================== Output ==================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# すべての値の出力&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list_declarative[@]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list_declarative[*]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 要素指定して出力&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list_declarative[0]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 要素を削除&quot;</span></span><br><span class="line"><span class="built_in">unset</span> list_declarative[0]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list_declarative[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 要素を追加（prepend, append）&quot;</span></span><br><span class="line">list_declarative=(<span class="string">&quot;a&quot;</span> <span class="string">&quot;<span class="variable">$&#123;list_declarative[@]&#125;</span>&quot;</span>)</span><br><span class="line">list_declarative=(<span class="string">&quot;<span class="variable">$&#123;list_declarative[@]&#125;</span>&quot;</span> <span class="string">&quot;4&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list_declarative[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 要素を上書き&quot;</span></span><br><span class="line">list_declarative[2]=<span class="string">&quot;hoge&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list_declarative[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 要素数を確認&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#list_declarative[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 値が存在するINDEXの一覧を確認&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!list_declarative[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 添字の@と*の違い（ダブルクオートで囲ったときの動作が異なる）&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 添字が@の場合は各要素が個別に出力される&quot;</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;list_declarative[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$v</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;添字が*の場合は各要素がIFSの最初の1文字で結合されて出力される&quot;</span></span><br><span class="line">IFS=,</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;list_declarative[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$v</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>出力</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Output &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># すべての値の出力</span><br><span class="line">a b c 1 2 3</span><br><span class="line">a b c 1 2 3</span><br><span class="line"># 要素指定して出力</span><br><span class="line">a</span><br><span class="line"># 要素を削除</span><br><span class="line">b c 1 2 3</span><br><span class="line"># 要素を追加（prepend, append）</span><br><span class="line">a b c 1 2 3 4</span><br><span class="line"># 要素を上書き</span><br><span class="line">a b hoge 1 2 3 4</span><br><span class="line"># 要素数を確認</span><br><span class="line">7</span><br><span class="line"># 値が存在するINDEXの一覧を確認</span><br><span class="line">0 1 2 3 4 5 6</span><br><span class="line"># 添字の@と*の違い（ダブルクオートで囲ったときの動作が異なる）</span><br><span class="line"># 添字が@の場合は各要素が個別に出力される</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">hoge</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">添字が*の場合は各要素がIFSの最初の1文字で結合されて出力される</span><br><span class="line">a,b,hoge,1,2,3,4</span><br></pre></td></tr></table></figure><h2 id="Shell-Scriptで連想配列"><a href="#Shell-Scriptで連想配列" class="headerlink" title="Shell Scriptで連想配列"></a>Shell Scriptで連想配列</h2><p>連想配列を使う場合はdeclareが必須となっています。また、Bashであればversion4以降で利用可能です。</p><p>Pythonでいう辞書などと同様に、格納した順番は担保されません。</p><ul><li>コード</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># declareする（初期値は後からでも格納可能）</span></span><br><span class="line"><span class="built_in">declare</span> -A dict_declarative=([item_name]=<span class="string">&quot;Orange&quot;</span> [price]=100)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;================== Output ==================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# すべての値の出力&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;dict_declarative[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;dict_declarative[*]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 要素指定して出力&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;key = <span class="variable">$&#123;dict_declarative[item_name]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val = <span class="variable">$&#123;dict_declarative[price]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 要素を削除&quot;</span></span><br><span class="line"><span class="built_in">unset</span> dict_declarative[item_name]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;dict_declarative[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 要素を追加（新規）&quot;</span></span><br><span class="line">dict_declarative[item_name]=Apple</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;dict_declarative[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 要素を追加（上書き）&quot;</span></span><br><span class="line">dict_declarative[price]=120</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;dict_declarative[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 要素数を確認&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#dict_declarative[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# キーの一覧を確認&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!dict_declarative[@]&#125;</span></span><br></pre></td></tr></table></figure><ul><li>出力</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Output &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># すべての値の出力</span><br><span class="line">Orange 100</span><br><span class="line">Orange,100</span><br><span class="line"># 要素指定して出力</span><br><span class="line">key &#x3D; Orange</span><br><span class="line">val &#x3D; 100</span><br><span class="line"># 要素を削除</span><br><span class="line">100</span><br><span class="line"># 要素を追加</span><br><span class="line">Apple 100</span><br><span class="line"># 要素を上書き</span><br><span class="line">Apple 120</span><br><span class="line"># 要素数を確認</span><br><span class="line">2</span><br><span class="line"># キーの一覧を確認</span><br><span class="line">item_name price</span><br></pre></td></tr></table></figure><h2 id="bashの辞書で多次元配列"><a href="#bashの辞書で多次元配列" class="headerlink" title="bashの辞書で多次元配列"></a>bashの辞書で多次元配列</h2><p>さて、ここで少々（個人的に）致命的な問題があるのですが、bashの配列・連想配列は1次元しか扱えないという点です。<br>他言語だとしれっと使えてしまうので、「えっ、なんで！？」となりがちですが、多次元配列「的な」ものを作ることでそれっぽい処理は可能です。</p><blockquote><p>例えばPythonだとさらっと配列に辞書を含めるとかやりがち</p></blockquote><ul><li>コード</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pythonでの配列内に連想配列がある場合の例</span></span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">names = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Mike&#x27;</span>]</span><br><span class="line">positions = [<span class="string">&quot;Engineer&quot;</span>, <span class="string">&quot;Manager&quot;</span>, <span class="string">&quot;Developper&quot;</span>]</span><br><span class="line"></span><br><span class="line">people = [ &#123;<span class="string">&quot;name&quot;</span>: name, <span class="string">&quot;position&quot;</span>: position&#125; <span class="keyword">for</span> name, position <span class="keyword">in</span> <span class="built_in">zip</span>(names, positions) ]</span><br><span class="line"></span><br><span class="line">pprint(people)</span><br></pre></td></tr></table></figure><ul><li>出力</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;,</span><br><span class="line">   &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: <span class="string">&#x27;Manager&#x27;</span>&#125;,</span><br><span class="line">   &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;position&#x27;</span>: <span class="string">&#x27;Developper&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>bashの場合、多次元配列や配列内に連想配列を含められないため、KeyにIndexを持たせてしまうというハックがあります。</p><p>試しにCSVを読み込んで連想配列としつつ、一部ロジックを組み込んだ例を挙げます。従業員の今年度評定を基に翌年度の新給与を決めるロジック（的な）ものを処理します。</p><ul><li>テスト用CSV（氏名, 年齢, 役職, 今年度評定）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Angela,29,Engineer,1800,A</span><br><span class="line">Ivory,35,Manager,3000,A</span><br><span class="line">Raeann,31,SeniorEngineer,2000,AA</span><br><span class="line">Violante,21,Assistant,1600,AAA</span><br></pre></td></tr></table></figure><ul><li>コード</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">FILEPATH=<span class="string">&quot;test.csv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">declare</span> -A USER_DICT</span><br><span class="line"></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> IFS=, <span class="built_in">read</span> name age position salary evaluation; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># keyにIndexを付与することで擬似的に多次元の配列に入れたような扱いとする</span></span><br><span class="line">    USER_DICT[<span class="variable">$&#123;i&#125;</span>,name]=<span class="variable">$&#123;name&#125;</span></span><br><span class="line">    USER_DICT[<span class="variable">$&#123;i&#125;</span>,age]=<span class="variable">$&#123;age&#125;</span></span><br><span class="line">    USER_DICT[<span class="variable">$&#123;i&#125;</span>,position]=<span class="variable">$&#123;position&#125;</span></span><br><span class="line">    <span class="comment"># 評定に応じて給与を1.x倍する</span></span><br><span class="line">    <span class="comment"># bashは少数の四則演算に対応していないためawkを使って演算する</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$&#123;evaluation&#125;</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        <span class="string">&quot;A&quot;</span>)</span><br><span class="line">            USER_DICT[<span class="variable">$&#123;i&#125;</span>,salary]=$(<span class="built_in">echo</span> <span class="variable">$&#123;salary&#125;</span> | awk <span class="string">&#x27;&#123;printf &quot;%4.0f&quot;, $1*1.0&#125;&#x27;</span>);;</span><br><span class="line">        <span class="string">&quot;AA&quot;</span>)</span><br><span class="line">            USER_DICT[<span class="variable">$&#123;i&#125;</span>,salary]=$(<span class="built_in">echo</span> <span class="variable">$&#123;salary&#125;</span> | awk <span class="string">&#x27;&#123;printf &quot;%4.0f&quot;, $1*1.1&#125;&#x27;</span>);;</span><br><span class="line">        <span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">            USER_DICT[<span class="variable">$&#123;i&#125;</span>,salary]=$(<span class="built_in">echo</span> <span class="variable">$&#123;salary&#125;</span> | awk <span class="string">&#x27;&#123;printf &quot;%4.0f&quot;, $1*1.3&#125;&#x27;</span>);;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">let</span> i++</span><br><span class="line"><span class="keyword">done</span> &lt; <span class="variable">$&#123;FILEPATH&#125;</span></span><br><span class="line"></span><br><span class="line">idx=$((<span class="variable">$&#123;i&#125;</span>-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 <span class="variable">$&#123;idx&#125;</span>); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;USER_DICT[<span class="variable">$&#123;i&#125;</span>,name]&#125;</span> <span class="variable">$&#123;USER_DICT[<span class="variable">$&#123;i&#125;</span>,salary]&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>出力</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Angela 1800</span><br><span class="line">Ivory 3000</span><br><span class="line">Raeann 2200</span><br><span class="line">Violante 2080</span><br></pre></td></tr></table></figure><p>連想配列使うまでもないのですが、読み込んだ値からその後様々な処理をすることを考えると、連想配列は非常に扱いやすいため、覚えておいて損はないと思っています。<br>もし、Key, Value形式で値を持ちたい、使い回したいのであればオススメの実装です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ということで今更ながらではありますが、bashの配列と連想配列についておさらいをしました。</p><p>個人的には文字列操作でなんとかなる領域を超えたら可読性や拡張性からPythonやGoなどを使うべし、と考えています。<br>ただし、現状もPython2.x系がデフォルトのOSがあったり、Goとか新規言語をインストールできない！などの制約があったり、bashでどうしても書かねばならないときにそっと頭の片隅においていただけると幸いです。</p><p>明日は澁川さんの<a href="/articles/20210402/">シェルスクリプトでもGUI</a>です！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210401/%E3%82%A2%E3%82%A4%E3%82%AD%E3%83%A3%E3%83%83%E3%83%81.webp&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
    <category term="Bash" scheme="https://future-architect.github.io/tags/Bash/"/>
    
    <category term="連想配列" scheme="https://future-architect.github.io/tags/%E9%80%A3%E6%83%B3%E9%85%8D%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>今さらながらfindパイセンについてまとめてみた</title>
    <link href="https://future-architect.github.io/articles/20210331/"/>
    <id>https://future-architect.github.io/articles/20210331/</id>
    <published>2021-03-30T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.742Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210331/agence-olloweb-d9ILr-dbEdg-unsplash.jpg"></p><p>Photo by <a href="https://unsplash.com/@olloweb?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Agence Olloweb</a> on <a href="https://unsplash.com/s/photos/find?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、中本です。<a href="/articles/20210321/">シェルスクリプト連載</a>の3日目です。</p><p>本記事ではShell Script作成において切っても切れない <code>find</code>コマンド について利用頻度高めのオプションをまとめます。</p><p>最後には今回紹介したオプションを全て盛り込んだシェルスクリプトを作成します。</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ol><li><a href="#find%E3%81%A8%E3%81%AF">findとは</a></li><li><a href="#%E6%A7%98%E3%80%85%E3%81%AAfind%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">様々なfindオプション</a><ol><li><a href="#type%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">-typeオプション：検索対象のファイル種別を指定</a><ul><li><a href="#%E2%80%90name%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">-nameオプション：任意の検索文字列を指定</a></li><li><a href="#depth%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">-depthオプション：検索の最大階層/最小階層を指定</a></li><li><a href="#mtime-mmin%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">-mtime/-mminオプション：任意の検索対象期間を指定</a></li><li><a href="#%E2%80%90exec%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3">-execオプション：検索実行結果を引数として次の処理に引き渡す</a></li><li><a href="#while-read-line">＜補足：while read line＞：検索結果を一行ずつ処理する</a></li></ul></li></ol></li><li><a href="#%E3%81%8A%E3%81%BE%E3%81%91">おまけ</a></li><li><a href="#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB">おわりに</a></li></ol><h1 id="findとは"><a href="#findとは" class="headerlink" title="findとは"></a><code>find</code>とは</h1><p>「<code>find</code>」は、場所を指定してファイルやディレクトリを検索するコマンドです。</p><p>「ファイル名/ディレクトリ名」、「更新日時」、「種別」など様々な条件を指定してファイルを検索することができます。</p><h1 id="様々なfindオプション"><a href="#様々なfindオプション" class="headerlink" title="様々なfindオプション"></a>様々な<code>find</code>オプション</h1><h3 id="typeオプション"><a href="#typeオプション" class="headerlink" title="-typeオプション"></a><code>-type</code>オプション</h3><p>検索する対象のファイル種別を指定するオプション</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#検索対象種別「ファイル」</span></span><br><span class="line">$ find ［検索パス］-<span class="built_in">type</span> f　</span><br><span class="line">　</span><br><span class="line"><span class="comment">#検索対象種別「ディレクトリ」</span></span><br><span class="line">$ find ［検索パス］-<span class="built_in">type</span> d</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 0</span><br><span class="line">drwxrwxr-x 2 finduser finduser 6 Mar 29 09:00 dir1</span><br><span class="line">drwxrwxr-x 2 finduser finduser 6 Mar 29 09:00 dir2</span><br><span class="line">drwxrwxr-x 2 finduser finduser 6 Mar 29 09:00 dir3</span><br><span class="line">-rwxrwxr-x 1 finduser finduser 0 Mar 29 09:00 file01.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser 0 Mar 29 09:00 file02.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser 0 Mar 29 09:00 file03.tmp</span><br><span class="line"></span><br><span class="line">$ find ./</span><br><span class="line">./</span><br><span class="line">./dir1</span><br><span class="line">./dir2</span><br><span class="line">./dir3</span><br><span class="line">./file01.tmp</span><br><span class="line">./file02.tmp</span><br><span class="line">./file03.tmp</span><br><span class="line"></span><br><span class="line">$ find ./ -<span class="built_in">type</span> f</span><br><span class="line">./file01.tmp</span><br><span class="line">./file02.tmp</span><br><span class="line">./file03.tmp</span><br><span class="line"></span><br><span class="line">$ find ./ -<span class="built_in">type</span> d</span><br><span class="line">./</span><br><span class="line">./dir1</span><br><span class="line">./dir2</span><br><span class="line">./dir3</span><br></pre></td></tr></table></figure><h3 id="‐nameオプション"><a href="#‐nameオプション" class="headerlink" title="‐nameオプション"></a><code>‐name</code>オプション</h3><p>検索する対象の検索文字列を指定するオプション<br>ワイルドカードを使用することで、部分一致のファイルやディレクトリの検索が可能となります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#検索対象種別「ファイル」</span></span><br><span class="line">$ find ［検索パス］-name <span class="string">&quot;［検索文字列］&quot;</span>　</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ワイルドカード無しだと完全一致検索</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;file01&quot;</span></span><br><span class="line">$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">./file01.tmp</span><br><span class="line">./file02.tmp</span><br><span class="line">./file03.tmp</span><br></pre></td></tr></table></figure><p>なお、「<code>-path</code>」も同様に検索文字列を指定するオプション<br>「<code>-name</code>」と異なり、「/」を含む文字列検索が可能です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l ./dir1/</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 29 02:24 file01.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#「-name」だと「/」を含むと怒られる</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;*dir1/file01.tmp&quot;</span></span><br><span class="line"><span class="string">&quot;find: warning: Unix filenames usually don&#x27;t contain slashes (though pathnames do).  That means that &#x27;-name ‘*dir1/file01.tmp’&#x27; will probably evaluate to false all the time on this system.  You might find the &#x27;-wholename&#x27; test more useful, or perhaps &#x27;-samefile&#x27;.  Alternatively, if you are using GNU grep, you could use &#x27;find ... -print0 | grep -FzZ ‘*dir1/file01.tmp’&#x27;.&quot;</span></span><br><span class="line"></span><br><span class="line">$ find . -<span class="built_in">type</span> f -path <span class="string">&quot;*dir1/file01.tmp&quot;</span></span><br><span class="line">./dir1/file01.tmp</span><br></pre></td></tr></table></figure><h3 id="mtime-mminオプション"><a href="#mtime-mminオプション" class="headerlink" title="-mtime/-mminオプション"></a><code>-mtime</code>/<code>-mmin</code>オプション</h3><p>ファイルやディレクトリのタイムスタンプから判定して、検索対象期間を指定するオプション</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#検索対象日に更新されたファイルディレクトリ</span></span><br><span class="line">$ find ［検索パス］ -mtime 日数</span><br><span class="line"></span><br><span class="line"><span class="comment">#現在～検索対象日の期間にに更新されたファイル、ディレクトリ</span></span><br><span class="line">$ find ［検索パス］ -mtime -日数</span><br><span class="line"></span><br><span class="line"><span class="comment">#検索対象日以前に更新されたファイル、ディレクトリ</span></span><br><span class="line">$ find ［検索パス］ -mtime +日数</span><br></pre></td></tr></table></figure><p>上記のように「＋」や「‐」を付与することで検索対象期間をより特定期間に絞ることが可能となります。（※対象期間については後述）<br>日数は今日が「0」で、昨日が「1」と換算します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l ./</span><br><span class="line">-rw-r--r-- 1 finduser finduser    0 Mar 25 01:00 test01.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser    0 Mar 26 01:00 test02.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser    0 Mar 27 01:00 test03.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser    0 Mar 28 01:00 test04.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser    0 Mar 29 01:00 test05.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ find . -mtime +1</span><br><span class="line">./test01.txt</span><br><span class="line">./test02.txt</span><br><span class="line">./test03.txt</span><br><span class="line"></span><br><span class="line">$ find . -mtime 1</span><br><span class="line">./test04.txt</span><br><span class="line"></span><br><span class="line">$ find . -mtime -1</span><br><span class="line">./test05.txt</span><br></pre></td></tr></table></figure><p>また、オプション無しの状態ではコマンド実行時点を起点として、日数計算を行いますが、「<code>-daystart</code>」オプションを付与することで当日24:00を起点として日数計算を行います。<br>(ジョブ処理等で、コマンド実行時間によって処理にばらつきを生じさせたくない際などに利用推奨)</p><p>他にも、「<code>-mtime</code>」ではなく、「<code>‐mmin</code>」も存在し、分単位で指定することも可能です。</p><p>「<code>-mtime</code>」、「<code>-mmin</code>」は<code>find</code>を利用する上で高頻度で利用されるオプションですが、対象となる期間がややこしいので、以下のように整理してみました。</p><p><img src="/images/20210331/find_term.png"></p><p>注意点としては、「<code>-daystart</code>」オプションは日の始まりである0:00ではなく、日の終わりの24:00を起点としていること注意が必要です。<br>そのため「<code>-mtime -0</code>」は必ず未来日検索となるため、基本的にファイル検索結果は存在しません。</p><h3 id="depthオプション"><a href="#depthオプション" class="headerlink" title="-depthオプション"></a><code>-depth</code>オプション</h3><p>検索対象ディレクトリの階層を指定するオプション</p><p>本オプションを指定しない場合、子ディレクトリ全てに対して検索を実行します。</p><p>ファイル数が膨大にあり、検索対象のディレクトリ階層を絞りたい時などに有効です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#検索する最大深度の階層</span></span><br><span class="line">$ find ［検索パス］-maxdepth ［階層］　</span><br><span class="line"></span><br><span class="line"><span class="comment">#検索する最小深度の階層</span></span><br><span class="line">$ find ［検索パス］-mindepth ［階層］　</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ tree ./find_test1</span><br><span class="line">./find_test1/</span><br><span class="line">｜ 20210328.tmp</span><br><span class="line">∟ find_test2</span><br><span class="line">    ｜ 20210328.tmp</span><br><span class="line">    ∟ find_test3</span><br><span class="line">        ∟ 20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#階層指定なし（すべての子ディレクトリ含む）</span></span><br><span class="line">$ find /work/find_test1-type f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/find_test3/20210328.tmp</span><br><span class="line">/work/find_test1/find_test2/20210328.tmp</span><br><span class="line">/work/find_test1/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大1階層</span></span><br><span class="line">$ find /work/find_test1 -maxdepth 1 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大2階層</span></span><br><span class="line">$ find /work/find_test1 -maxdepth 2 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/20210328.tmp</span><br><span class="line">/work/find_test1/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大3階層</span></span><br><span class="line">$ find /work/find_test1 -maxdepth 3 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/find_test3/20210328.tmp</span><br><span class="line">/work/find_test1/find_test2/20210328.tmp</span><br><span class="line">/work/find_test1/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最小1階層（1階層目は検索しない）</span></span><br><span class="line">$ find /work/find_test1 -mindepth 1 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/find_test3/20210328.tmp</span><br><span class="line">/work/find_test1/find_test2/20210328.tmp</span><br><span class="line">/work/find_test1/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最小2階層（1階層、2階層目は検索しない）</span></span><br><span class="line">$ find /work/find_test1 -mindepth 2 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/find_test3/20210328.tmp</span><br><span class="line">/work/find_test1/find_test2/20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#最小2階層（1階層～3階層目は検索しない）</span></span><br><span class="line">$ find /work/find_test1 -mindepth 3 -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span></span><br><span class="line">/work/find_test1/find_test2/find_test3/20210328.tmp</span><br></pre></td></tr></table></figure><h3 id="‐execオプション"><a href="#‐execオプション" class="headerlink" title="‐execオプション"></a><code>‐exec</code>オプション</h3><p>コマンド実行結果を引数として次の処理に引き渡す場合などに利用されます。<br>同様の動きを持つコマンドとして「<code>xargs</code>」があります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># findで検索した結果のみをlsに引き渡す</span></span><br><span class="line"><span class="comment"># 「&#123;&#125;」は引数の位置、行末には「\;」が必須</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.txt&quot;</span> -<span class="built_in">exec</span> ls -l &#123;&#125; \;</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 25 01:00 ./test01.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 26 01:00 ./test02.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 27 01:00 ./test03.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 28 01:00 ./test04.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 29 01:00 ./test05.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 「xargs」をパイプで繋ぐことで検索結果を引き渡すことが可能</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.txt&quot;</span> |xargs ls -l</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 25 01:00 ./test01.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 26 01:00 ./test02.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 27 01:00 ./test03.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 28 01:00 ./test04.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 29 01:00 ./test05.txt</span><br></pre></td></tr></table></figure><p>一見すると、<code>xargs</code>も<code>-exec</code>も同様の処理結果を返すように見えるのですが、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ find . -type f -name &quot;*.txt&quot; -exec echo &quot;ファイル名: &#123;&#125;&quot; \;</span><br><span class="line">ファイル名: .&#x2F;test01.txt</span><br><span class="line">ファイル名: .&#x2F;test02.txt</span><br><span class="line">ファイル名: .&#x2F;test03.txt</span><br><span class="line">ファイル名: .&#x2F;test04.txt</span><br><span class="line">ファイル名: .&#x2F;test05.txt</span><br><span class="line"></span><br><span class="line">$ find . -type f -name &quot;*.txt&quot; |xargs echo &quot;ファイル名: &quot;</span><br><span class="line">ファイル名:  .&#x2F;test01.txt .&#x2F;test02.txt .&#x2F;test03.txt .&#x2F;test04.txt .&#x2F;test05.txt</span><br></pre></td></tr></table></figure><p>上記の挙動で分かるように、以下のように処理に違いがあります。</p><table><thead><tr><th align="left">処理</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">-execオプション</td><td align="left">実行結果を<strong>1行ずつ</strong>引き渡して処理する</td></tr><tr><td align="left">xargsコマンド</td><td align="left">実行結果を<strong>まとめて</strong>引き渡して処理する</td></tr></tbody></table><p>したがって、検索したファイルを1ファイル単位で圧縮するなどの処理の場合は、<br><code>-exec</code>オプションを利用が推奨されます。</p><h3 id="while-read-line"><a href="#while-read-line" class="headerlink" title="while read line"></a><code>while read line</code></h3><p><code>while read line</code>に関しては、<code>find</code>のオプションではありませんが、<code>find</code>コマンドと相性の良いループ処理です。<br>検索結果を一行ずつ読み込んで、任意の処理を実行することができます。</p><figure class="highlight bash"><figcaption><span>while_read_line.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!//bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;FIND_DIR&#125;</span>=<span class="string">&quot;[検索パス]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># パイプで繋いで、「line」という変数に一行ずつ格納する</span></span><br><span class="line"><span class="comment"># 変数は「line」ではなく、任意名でも可</span></span><br><span class="line">find <span class="variable">$&#123;FIND_DIR&#125;</span> -<span class="built_in">type</span> f -name <span class="string">&quot;*.txt&quot;</span> |<span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ファイル名： <span class="variable">$line</span>&quot;</span></span><br><span class="line">  ls -l <span class="variable">$line</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ bash ./while_read_line.sh</span><br><span class="line">ファイル名： ./test01.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 25 01:00 ./test01.txt</span><br><span class="line">ファイル名： ./test02.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 26 01:00 ./test02.txt</span><br><span class="line">ファイル名： ./test03.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 27 01:00 ./test03.txt</span><br><span class="line">ファイル名： ./test04.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 28 01:00 ./test04.txt</span><br><span class="line">ファイル名： ./test05.txt</span><br><span class="line">-rw-r--r-- 1 finduser finduser 0 Mar 29 01:00 ./test05.txt</span><br></pre></td></tr></table></figure><p><code>while read line</code> はもちろん<code>find</code>のみではなく、</p><p><code>cat ｛ファイル名｝ |while read line</code><br><code>echo &#123;変数&#125; |while read line</code></p><p>といった形でも利用可能です。</p><h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><p>先で紹介したオプションを盛り込んで、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【-mtime】前日以前に更新されたファイル</span><br><span class="line">【-name】ファイル名に「ccc」を含む</span><br><span class="line">【-type】検索種別は「ファイル」</span><br><span class="line">【-maxdepth】検索対象ディレクトリは第2階層目まで</span><br><span class="line">【while read line】各ファイルごとに圧縮する</span><br></pre></td></tr></table></figure><p>処理を行うシェルスクリプトを作成してみます。</p><figure class="highlight bash"><figcaption><span>find.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!//bin/bash</span></span><br><span class="line"></span><br><span class="line">FIND_DIR=<span class="string">&quot;/work/find_test1/test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 検索対象は2階層目まで</span></span><br><span class="line"><span class="comment"># 検索種別はファイル</span></span><br><span class="line"><span class="comment"># 「ccc」の文字列を含むファイル</span></span><br><span class="line"><span class="comment"># 1日以前のファイル</span></span><br><span class="line"><span class="comment"># 「while read line」をパイプで引き渡す</span></span><br><span class="line">find /work/find_test1/ -maxdepth 2 -<span class="built_in">type</span> f -name <span class="string">&quot;*ccc*.tmp&quot;</span> -mtime +1 |<span class="keyword">while</span> <span class="built_in">read</span> FILE_PATH</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ファイルディレクトリとファイル名をそれぞれ取得</span></span><br><span class="line">  FILE_DIR=`dirname <span class="variable">$&#123;FILE_PATH&#125;</span>`</span><br><span class="line">  FILE_NAME=`basename <span class="variable">$&#123;FILE_PATH&#125;</span>`</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 各ファイルの「bbb」という文字列の直後に任意文字列を挿入</span></span><br><span class="line">  <span class="comment"># UNIXは同一ファイルにリダイレクトできないため、tmpファイルにリダイレクト</span></span><br><span class="line">  sed -e <span class="string">&quot;/^bbb$/a find.shにより特定行を挿入&quot;</span> <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span> &gt; <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span>.tmp</span><br><span class="line">  mv <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span>.tmp <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line"></span><br><span class="line">  chmod 775 <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line">  chown finduser:finduser <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 検索されたファイルを圧縮</span></span><br><span class="line">  <span class="comment"># フルパスでの圧縮を避けるために「-C」オプションを付与</span></span><br><span class="line">  tar -C <span class="variable">$&#123;FILE_DIR&#125;</span> -cvzf <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span>.tar.gz <span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 圧縮処理に問題がなければファイル削除</span></span><br><span class="line">  RET_CD=$?</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$&#123;RET_CD&#125;</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">     rm -f <span class="variable">$&#123;FILE_DIR&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">#</th><th align="left">処理概要</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">検索対象種別は「ファイル」を対象として検索する</td></tr><tr><td align="left">2</td><td align="left">「bbb」という文字列を含むファイルのみ対象として検索する</td></tr><tr><td align="left">3</td><td align="left">前日以前のファイルを対象として検索する</td></tr><tr><td align="left">4</td><td align="left">指定ディレクトリから子ディレクトリ2階層までを対象として検索する</td></tr><tr><td align="left">5</td><td align="left">各ファイル内容の「bbb」という特定文字列の直後に任意行を挿入する</td></tr><tr><td align="left">6</td><td align="left">ファイル単位で元ファイルと同ディレクトリ内に圧縮ファイルを作成する</td></tr><tr><td align="left">7</td><td align="left">圧縮が成功していれば、ファイルは削除する</td></tr></tbody></table><blockquote><p>処理イメージ<br><img src="/images/20210331/shell.png"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># スクリプト実行前</span></span><br><span class="line"><span class="comment"># 3階層分同じファイルをコピー</span></span><br><span class="line">$ tree find_test1</span><br><span class="line">find_test1</span><br><span class="line">| aaa_20210320.tmp</span><br><span class="line">| aaa_20210321.tmp</span><br><span class="line">| aaa_20210322.tmp</span><br><span class="line">| bbb_20210323.tmp</span><br><span class="line">| bbb_20210324.tmp</span><br><span class="line">| bbb_20210325.tmp</span><br><span class="line">| ccc_20210326.tmp</span><br><span class="line">| ccc_20210327.tmp</span><br><span class="line">| ccc_20210328.tmp</span><br><span class="line">∟ find_test2</span><br><span class="line">    | aaa_20210320.tmp</span><br><span class="line">    | aaa_20210321.tmp</span><br><span class="line">    | aaa_20210322.tmp</span><br><span class="line">    | bbb_20210323.tmp</span><br><span class="line">    | bbb_20210324.tmp</span><br><span class="line">    | bbb_20210325.tmp</span><br><span class="line">    | ccc_20210326.tmp</span><br><span class="line">    | ccc_20210327.tmp</span><br><span class="line">    | ccc_20210328.tmp</span><br><span class="line">    ∟ find_test3</span><br><span class="line">        | aaa_20210320.tmp</span><br><span class="line">        | aaa_20210321.tmp</span><br><span class="line">        | aaa_20210322.tmp</span><br><span class="line">        | bbb_20210323.tmp</span><br><span class="line">        | bbb_20210324.tmp</span><br><span class="line">        | bbb_20210325.tmp</span><br><span class="line">        | ccc_20210326.tmp</span><br><span class="line">        | ccc_20210327.tmp</span><br><span class="line">        ∟ ccc_20210328.tmp</span><br><span class="line"></span><br><span class="line">$ ls -l ./find_test1</span><br><span class="line">total 36</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 20 10:00 aaa_20210320.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 21 10:00 aaa_20210321.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 22 10:00 aaa_20210322.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 23 10:00 bbb_20210323.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 24 10:00 bbb_20210324.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 25 10:00 bbb_20210325.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser 197 Mar 26 10:00 ccc_20210326.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser 197 Mar 27 10:00 ccc_20210327.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 28 10:00 ccc_20210328.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># ファイル中身確認</span></span><br><span class="line">$ cat ./find_test1/ccc_20210326.tmp</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">ddd</span><br><span class="line">eee</span><br><span class="line"></span><br><span class="line"><span class="comment">#シェルスクリプトを実行</span></span><br><span class="line">$ bash ./find.sh</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line"><span class="comment">#ファイル階層を再確認</span></span><br><span class="line"><span class="comment">#第1階層～第2階層に圧縮ファイルが作られていることを確認</span></span><br><span class="line">$ tree find_test1</span><br><span class="line">find_test1</span><br><span class="line">| aaa_20210320.tmp</span><br><span class="line">| aaa_20210321.tmp</span><br><span class="line">| aaa_20210322.tmp</span><br><span class="line">| bbb_20210323.tmp</span><br><span class="line">| bbb_20210324.tmp</span><br><span class="line">| bbb_20210325.tmp</span><br><span class="line">| ccc_20210326.tmp.tar.gz</span><br><span class="line">| ccc_20210327.tmp.tar.gz</span><br><span class="line">| ccc_20210328.tmp</span><br><span class="line">∟ find_test2</span><br><span class="line">    | aaa_20210320.tmp</span><br><span class="line">    | aaa_20210321.tmp</span><br><span class="line">    | aaa_20210322.tmp</span><br><span class="line">    | bbb_20210323.tmp</span><br><span class="line">    | bbb_20210324.tmp</span><br><span class="line">    | bbb_20210325.tmp</span><br><span class="line">    | ccc_20210326.tmp.tar.gz</span><br><span class="line">    | ccc_20210327.tmp.tar.gz</span><br><span class="line">    | ccc_20210328.tmp</span><br><span class="line">    ∟ find_test3</span><br><span class="line">        | aaa_20210320.tmp</span><br><span class="line">        | aaa_20210321.tmp</span><br><span class="line">        | aaa_20210322.tmp</span><br><span class="line">        | bbb_20210323.tmp</span><br><span class="line">        | bbb_20210324.tmp</span><br><span class="line">        | bbb_20210325.tmp</span><br><span class="line">        | ccc_20210326.tmp</span><br><span class="line">        | ccc_20210327.tmp</span><br><span class="line">        ∟ ccc_20210328.tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ls -l ./find_test1</span><br><span class="line">total 36</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 20 10:00 aaa_20210320.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 21 10:00 aaa_20210321.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 22 10:00 aaa_20210322.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 23 10:00 bbb_20210323.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 24 10:00 bbb_20210324.tmp</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 25 10:00 bbb_20210325.tmp</span><br><span class="line">-rw-rw-r-- 1 finduser finduser 197 Mar 29 12:27 ccc_20210326.tmp.tar.gz</span><br><span class="line">-rw-rw-r-- 1 finduser finduser 197 Mar 29 12:27 ccc_20210327.tmp.tar.gz</span><br><span class="line">-rwxrwxr-x 1 finduser finduser  20 Mar 28 10:00 ccc_20210328.tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 圧縮ファイルを展開して内容を確認</span></span><br><span class="line">$ sudo tar xvzf ./find_test1/ccc_20210326.tmp.tar.gz</span><br><span class="line">ccc_20210326.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特定文字列を「bbb」の直後に挿入されていること確認</span></span><br><span class="line">$ cat ./ccc_20210326.tmp</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">find.shにより特定行を挿入</span><br><span class="line">ccc</span><br><span class="line">ddd</span><br><span class="line">eee</span><br></pre></td></tr></table></figure><p>想定通りの挙動をするシェルスクリプトになりました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>findは利用頻度は非常に高いのですが、<code>-mtime</code>/<code>-mmin</code>といった対象期間を限定する起点や終点についてよく迷ってしまうので、そんなときに本記事がお役に立てれば幸いかと思います。</p><p>また、今回紹介しきれませんでしたが、<code>-atime</code>/<code>-ctime</code>/<code>-newer</code>など他にも様々な<code>find</code>オプションがありますので、もっともっとオプションを使いこなして素敵な<code>find</code>ライフを送りましょう。</p><p>明日は市川諒さんの<a href="/articles/20210401/">declare使ってBashで配列と連想配列</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210331/agence-olloweb-d9ILr-dbEdg-unsplash.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@olloweb?utm_source=un</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="Linux" scheme="https://future-architect.github.io/tags/Linux/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
    <category term="Bash" scheme="https://future-architect.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>CSVと親しくなるAWK術</title>
    <link href="https://future-architect.github.io/articles/20210330/"/>
    <id>https://future-architect.github.io/articles/20210330/</id>
    <published>2021-03-29T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG真野です。<a href="/articles/20210321/">シェルスクリプト連載</a>の2日目です。</p><p>シェルスクリプトなのにAWKってちょっと違うんじゃない？って思われる方も多いと思いますが、この連載におけるレギュレーションではsed, AWKもOKという優しいルール故、見逃しください。</p><p>この記事ではCSVデータをAWKで処理する例をいくつか紹介します。</p><h1 id="awkとは"><a href="#awkとは" class="headerlink" title="awkとは"></a>awkとは</h1><p><img src="/images/20210330/penguine-4120917_1280.jpg"></p><blockquote><p><a href="https://pixabay.com/ja/users/smartphonecreations2021-11994227/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4120917">SmartphoneCreations2021</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4120917">Pixabay</a>からの画像</p></blockquote><p>AWKとはやカンマなどで区切られたテキストデータの処理が得意なスクリプト言語です。awkコマンドはよくawsコマンドとtypoしますが最後はkです。こちらの方が25年くらい歴史があります。</p><p>由来はアルフレッド・エイホ、ピーター・ワインバーガー、ブライアン・カーニハンの3人の苗字の頭文で、日本だとオークと呼びます。なんというか由来がレジェンドですね。個人的にはカーニハン先生は<a href="https://asciidwango.jp/post/155982762075/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E4%BD%9C%E6%B3%95">プログラミング作法</a>で学んだ過去から、先生の敬称必須です。</p><p>awkの基本的な構文はパターンとアクションです。<br><code>pattern &#123; action &#125;</code> といった形で、patternが条件、actionが加工処理や表示項目の選択といった指定を行います。</p><h1 id="バージョン"><a href="#バージョン" class="headerlink" title="バージョン"></a>バージョン</h1><p>本記事ではGNU Awkの以下のバージョンで動作させました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk -V</span><br><span class="line">GNU Awk 5.0.1, API: 2.0 (GNU MPFR 4.0.2, GNU MP 6.2.0)</span><br></pre></td></tr></table></figure><h1 id="使い方例"><a href="#使い方例" class="headerlink" title="使い方例"></a>使い方例</h1><p>では早速AWKでCSVデータを処理していきましょう。</p><p>処理対象はフューチャー技術ブログから生成したCSVをサンプルに用います。</p><figure class="highlight plain"><figcaption><span>posts.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title,categories,tags,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">LT大会（前編）,Culture,LT,2016-02-17 09:09:12,9914</span><br><span class="line">LT大会（後編）,Culture,LT|登壇資料,2016-02-18 11:31:15,13214</span><br><span class="line">Startup_Geeks#1,Culture,Conference|開催レポート,2016-03-23 13:49:26,9404</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>データの全量は折りたたみで置いておきます。</p><details><summary>posts.csv全量</summary><div><figure class="highlight plain"><figcaption><span>posts.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br></pre></td><td class="code"><pre><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">LT大会（前編）,Culture,LT,2016-02-17 09:09:12,9914</span><br><span class="line">LT大会（後編）,Culture,LT|登壇資料,2016-02-18 11:31:15,13214</span><br><span class="line">Startup_Geeks#1,Culture,Conference|開催レポート,2016-03-23 13:49:26,9404</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br><span class="line">ハッカソン道中記#2～世界はチャンスであふれてる～,IoT,IoT|DesignThinking|Hackathon,2016-04-20 21:25:28,9474</span><br><span class="line">ハッカソン道中記#3～社会人2年目のリケジョがハッカソンに出てみました～,VR,DesignThinking|Unity|Hackathon,2016-05-11 15:07:34,8047</span><br><span class="line">Space Apps Challenge 2016への投票方法,VR,Hackathon,2016-05-12 09:05:59,2753</span><br><span class="line">第三回LT大会～grepおじさんは夢を見るか～,Culture,LT|登壇資料,2016-05-27 20:09:16,19198</span><br><span class="line">ハッカソン道中記#4～リケジョ、ITと外遊びしてみた～,IoT,Hackathon|DesignThinking,2016-05-30 08:40:24,9963</span><br><span class="line">第四回LT大会～あひると住宅ローンとまたもやキーボード～,Culture,LT|登壇資料,2016&#x2F;07&#x2F;18 18:14:46,12044</span><br><span class="line">JANOG38にてVulsの発表を行いました,Security,Vuls|Conference,2016&#x2F;07&#x2F;19 17:50:41,12641</span><br><span class="line">これさえあればシステム構成図がだいたい描けるアイコンセットを公開します！,Design,icon|UI&#x2F;UX,2016&#x2F;07&#x2F;21 17:44:04,2730</span><br><span class="line">システム屋さんがうれしいJava8対応のコーディング規約を公開します！！,Programming,Java|コーディング規約|エンタープライズ,2016&#x2F;09&#x2F;02 13:00:00,7204</span><br><span class="line">マネージャーがうれしいRedmineデータのグラフ表示方法を公開します！！,Management,Elastic-Stack|Kibana|Redmine|マネジメント,2016&#x2F;09&#x2F;20 18:00:00,9407</span><br><span class="line">「基幹業務もHadoopで!!」のその後　〜性能編〜,Infrastructure,Hadoop|AWS|Conference,2016&#x2F;10&#x2F;05 13:34:31,23623</span><br><span class="line">第五回社内LT大会～頑張る人は光るらしい,Culture,LT|登壇資料,2016&#x2F;10&#x2F;13 11:06:05,10070</span><br><span class="line">SQL実行時のブルームフィルタ(Bloom Filter)アルゴリズム,DB,DB|SQL|DataModel|Algorithm,2016-10-31 12:21:10,40542</span><br><span class="line">ビッグデータ対談でニコ生登壇しました,Infrastructure,Conference|Hadoop|インタビュー,2016&#x2F;11&#x2F;09 14:14:24,8563</span><br><span class="line">たくさんあって混乱しがちなIoT関連の団体とOSSをまとめました,IoT,IoT|OSS,2016&#x2F;12&#x2F;9 10:56:44,16280</span><br><span class="line">インフラ入門vol.1,Infrastructure,Infrastructure|インフラ入門|入門,2017-01-09 11:01:06,12850</span><br><span class="line">マネージャーがうれしいRedmineデータのEVM表示方法を公開します！！,Management,Elastic-Stack|Kibana|Redmine,2017&#x2F;01&#x2F;19 18:00:00,12650</span><br><span class="line">3Dプリンタを使ってサービス開発やってみた,IoT,3Dプリンタ|IoT,2017&#x2F;01&#x2F;27 12:25:15,13093</span><br><span class="line">会社に届いたHoloLensを使ってみた,VR,HoloLens,2017-02-10 13:00:00,6227</span><br><span class="line">第六回社内LT大会～コンサルタントはハイキックがお好き,Culture,LT|登壇資料,2017&#x2F;02&#x2F;16 10:30:00,11416</span><br><span class="line">SQL開発者を幸せにする！？ Sublime Text 3でも使える uroboroSQL Formatter を公開しました,DB,SQL|uroboroSQL|コーディング規約,2017-02-28 12:00:00,15881</span><br><span class="line">世論調査の内閣支持率を統計学的に解釈すると…?,DataScience,統計,2017-03-14 14:00:00,13400</span><br><span class="line">スタンフォード大学で食べたピーナッツサラダは、格別だった♥,Culture,Elastic-Stack|DesignThinking|Conference,2017&#x2F;03&#x2F;21 12:00:00,8152</span><br><span class="line">ぶらりシリコンバレー巡礼,Culture,Elastic-Stack|Conference,2017&#x2F;03&#x2F;22 12:00:00,5505</span><br><span class="line">ヒカ☆ラボ初参戦！AWS x IoTで若手エンジニアが登壇してきました,Infrastructure,AWS|IoT|Conference,2017&#x2F;03&#x2F;23 12:00:00,4280</span><br><span class="line">オープンソースカンファレンス2017 Tokyo&#x2F;Spring登壇＆ブース出展レポート,Culture,Vuls|uroboroSQL|Conference|SQL|UI&#x2F;UX|OSS|登壇レポート,2017&#x2F;03&#x2F;27 12:00:00,9324</span><br><span class="line">Elastic&#123;ON&#125;-2017 レポート ~概要編~,Culture,Elastic-Stack,2017&#x2F;03&#x2F;31 10:57:43,9199</span><br><span class="line">Elastic&#123;ON&#125;-2017 レポート ~セッション編~,Culture,Elastic-Stack,2017&#x2F;04&#x2F;03 12:00:00,13373</span><br><span class="line">HoloLensの空間共有サービスを使ってみよう,VR,HoloLens|Unity,2017&#x2F;04&#x2F;05 12:00:00,11297</span><br><span class="line">Elixir Conf Japan 2017 参加レポート,Programming,Elixir|参加レポート,2017&#x2F;04&#x2F;14 12:00:00,23049</span><br><span class="line">Unity未経験者がHoloLensアプリの開発をしてみた,VR,Unity|HoloLens,2017&#x2F;04&#x2F;21 12:00:00,14815</span><br><span class="line">マネージャーがうれしいRedmineデータのダッシュボード表示方法を公開します！！,Management,Elastic-Stack|Redmine|Kibana|Elasticsearch,2017&#x2F;05&#x2F;10 18:00:00,13176</span><br><span class="line">AIを使って顔画像から「常連さん」を判定しよう！,DataScience,Python|MachineLearning|DeepLearning|データ分析,2017&#x2F;05&#x2F;26 16:15:31,17786</span><br><span class="line">ES2015 Web componentsと国産Web componentsフレームワークUrushi,Programming,JavaScript|Web component,2017&#x2F;06&#x2F;05 12:00:00,11413</span><br><span class="line">インフラ入門vol.2(ネットワーク),Infrastructure,Network|Infrastructure|インフラ入門|入門,2017&#x2F;07&#x2F;04 15:04:04,15369</span><br><span class="line">古典的ゲームAIを用いたAlphaGo解説,DataScience,MachineLearning,2017&#x2F;08&#x2F;04 10:00:00,5111</span><br><span class="line">uroboroSQL x Spring BootによるWebアプリケーション開発,Programming,uroboroSQL|Java|SQL|SpringBoot,2017&#x2F;08&#x2F;28 12:00:00,13524</span><br><span class="line">第12回NLP若手の会シンポジウム　参加報告,DataScience,MachineLearning|NLP,2017&#x2F;09&#x2F;22 16:20:00,10242</span><br><span class="line">社内ヘルプデスクをＡＩで！,DataScience,MachineLearning|Redmine|データ分析,2017&#x2F;10&#x2F;05 18:24:22,11340</span><br><span class="line">最新で最強、AlphaGo Zero の解説,DataScience,MachineLearning|Algorithm,2017&#x2F;10&#x2F;30 13:35:51,5036</span><br><span class="line">最新テクノロジーでスポーツアイデアソンをやって中高生に教わった大事なこと,VR,DesignThinking|CoSpaces,2017&#x2F;11&#x2F;13 13:08:13,7541</span><br><span class="line">Future IoT デバイス,IoT,IoT,2017&#x2F;12&#x2F;07 13:00:00,5553</span><br><span class="line">第1回Future開発合宿,Culture,開発合宿|LT,2017&#x2F;12&#x2F;17 14:28:42,6441</span><br><span class="line">エンプラ&amp;オンプレでもAnsible導入成功したのでユーザー会で発表してきた,Infrastructure,Ansible|Infrastructure|登壇資料|登壇レポート,2018&#x2F;02&#x2F;09 11:12:14,19476</span><br><span class="line">NIPS2017 LT報告,DataScience,MachineLearning|Conference,2018&#x2F;02&#x2F;22 10:18:28,9310</span><br><span class="line">Future AI EXPO 開催！,Culture,Conference|MachineLearning,2018&#x2F;03&#x2F;01 12:01:22,2564</span><br><span class="line">ICLR2018 LT大会,DataScience,MachineLearning,2018&#x2F;04&#x2F;13 01:17:13,13848</span><br><span class="line">IoT&#x2F;M2M展（音声認識サービス）の展示,DataScience,IoT|Conference|MachineLearning,2018&#x2F;05&#x2F;22 14:20:58,7064</span><br><span class="line">データベースマイグレーション ～OracleからPostgreSQLへ～　ー第１回ー,DB,PostgreSQL|Oracle|DB移行,2018&#x2F;05&#x2F;29 11:06:05,26368</span><br><span class="line">人工知能学会（JSAI2018）参加報告,DataScience,MachineLearning,2018&#x2F;07&#x2F;23 13:56:36,10639</span><br><span class="line">データベースマイグレーション ～OracleからPostgreSQLへ～　−第２回ー,DB,PostgreSQL|Oracle|DB移行,2018&#x2F;08&#x2F;09 15:00:36,24652</span><br><span class="line">5TB&#x2F;日 のデータをAWS Glueでさばくためにやったこと（概要編,Infrastructure,AWS|データレイク,2018&#x2F;08&#x2F;28 13:27:14,28959</span><br><span class="line">NLP若手の会 (YANS) 第13回シンポジウム 参加レポート,DataScience,NLP|MachineLearning|参加レポート,2018&#x2F;09&#x2F;12 17:49:16,8110</span><br><span class="line">PostgreSQLパーティションプルーニングの動作を確認する,DB,DB|PostgreSQL,2018&#x2F;10&#x2F;19 16:00:00,26507</span><br><span class="line">その問い合わせ、AIが解決します！～Redmineチケットレコメンドシステムのご紹介～,DataScience,MachineLearning|Redmine|Algorithm|BOT,2018&#x2F;10&#x2F;31 09:54:57,32023</span><br><span class="line">AmazonConnect BootCampセッションでハンズオン受けてきた話,Infrastructure,AWS,2018&#x2F;12&#x2F;02 14:21:59,31846</span><br><span class="line">5TB&#x2F;日 のデータをAWS Glueでさばくためにやったこと（性能編）,Infrastructure,AWS|Spark|Glue,2018&#x2F;12&#x2F;05 23:18:17,10683</span><br><span class="line">第2回Future開発合宿,Culture,開発合宿,2019&#x2F;01&#x2F;02 13:50:16,5993</span><br><span class="line">Real World HTTPミニ版リリース記念勉強会の実施報告,Culture,Network|新人研修|Web|HTTP|出版|書籍,2019&#x2F;04&#x2F;10 11:00:00,6731</span><br><span class="line">LT Free Style Battle（VS リクルートテクノロジーズ）を開催しました,Culture,LT|競技プログラミング|登壇資料,2019&#x2F;04&#x2F;22 10:12:28,8558</span><br><span class="line">Qiita Jobsを始めました,Culture,Qiita,2019&#x2F;04&#x2F;25 13:43:19,4949</span><br><span class="line">IoT&#x2F;M2M展へ「Future IoT」出展してきました！,Culture,Conference|IoT,2019&#x2F;05&#x2F;09 10:00:00,4974</span><br><span class="line">第1回PG Battle参戦記,Programming,競技プログラミング,2019&#x2F;05&#x2F;13 10:33:39,9169</span><br><span class="line">AI EXPO2019に参加しました！,DataScience,MachineLearning|Conference|データ分析,2019&#x2F;05&#x2F;15 09:53:25,6291</span><br><span class="line">「スマートグラスを使った革新的なビジネスを考えるアイデアソン」の実施報告,VR,HoloLens,2019&#x2F;05&#x2F;27 09:00:00,11927</span><br><span class="line">【合格記】GCP Professional Cloud Architect認定資格を振り返る,Infrastructure,GCP|合格記,2019&#x2F;05&#x2F;30 12:00:15,9658</span><br><span class="line">OpenCensus(OpenTelemetry)とは,Infrastructure,Monitoring|Go|OpenCensus,2019&#x2F;06&#x2F;04 09:00:51,12337</span><br><span class="line">デブサミ2019に登壇しました,Management,登壇資料|Conference,2019&#x2F;06&#x2F;07 09:00:00,8841</span><br><span class="line">ソースコードを綺麗にするためにまず心がけたい３点,Programming,コーディング規約,2019&#x2F;06&#x2F;10 09:20:47,16646</span><br><span class="line">TypeScript教育用コンテンツ公開のお知らせ,Programming,TypeScript|出版|Frontend|書籍,2019&#x2F;06&#x2F;12 15:04:53,6247</span><br><span class="line">ICLR2019 参加報告ブログ,DataScience,MachineLearning,2019&#x2F;06&#x2F;17 09:00:00,3980</span><br><span class="line">RedmineからGoogle Hangouts Chat へ連携するプラグインを作成しました！,Programming,Redmine|ChatOps|BOT,2019&#x2F;06&#x2F;20 09:15:06,6930</span><br><span class="line">Amazon Redshiftの仕様を調べてみた,Infrastructure,AWS,2019&#x2F;06&#x2F;25 09:00:00,66162</span><br><span class="line">人工知能学会（JSAI2019） 参加報告,DataScience,MachineLearning,2019&#x2F;06&#x2F;27 08:13:03,16153</span><br><span class="line">AWS Datalake Hands-on(2019 May)メモ,Infrastructure,AWS|データレイク,2019&#x2F;07&#x2F;02 09:00:00,10246</span><br><span class="line">マネージャーがうれしいRedmineデータのグラフ表示方法を公開します！！（Metabase編） ,Management,Metabase|Redmine,2019&#x2F;07&#x2F;03 09:00:00,9686</span><br><span class="line">GCPのIAMポリシー周りでドハマりした話,Infrastructure,GCP,2019&#x2F;07&#x2F;08 08:33:22,15674</span><br><span class="line">アルバイト生から見たフューチャーのTIG DXユニット,Culture,アルバイト|Go|Terraform,2019&#x2F;07&#x2F;12 09:00:00,10804</span><br><span class="line">Goを学ぶときにつまずきやすいポイントFAQ,Programming,Go|コードレビュー|入門,2019&#x2F;07&#x2F;13 10:00,75169</span><br><span class="line">GCPインスタンスを自動で停止させるツールの公開,Infrastructure,GCP|Kubernetes,2019&#x2F;07&#x2F;16 09:12:58,6268</span><br><span class="line">— 脱RDB脳 — Cassandraのデータモデルについて考えてみる,DB,DB|DataModel|KVS|Cassandra,2019&#x2F;07&#x2F;18 09:11:12,26828</span><br><span class="line">Future IoTのstackshareを公開しました,IoT,IoT|技術選定,2019&#x2F;07&#x2F;23 08:35:13,5841</span><br><span class="line">社内技術書輪読会とSite Reliability Engineering,Culture,Infrastructure|SRE,2019&#x2F;07&#x2F;29 08:08:56,10647</span><br><span class="line">俺のインフラデザインパターン　～過去の失敗に学ぶニッチなインフラの話～,Infrastructure,Infrastructure|要件定義,2019&#x2F;07&#x2F;31 09:47:37,9491</span><br><span class="line">Google Cloud Next ’19 in Tokyo Day2 セッションレポート,Infrastructure,GCP,2019&#x2F;08&#x2F;04 09:00:00,35490</span><br><span class="line">Google Cloud Next &#39;19 in Tokyo Day3 セッションレポート,Infrastructure,GCP,2019&#x2F;08&#x2F;09 08:29:54,23197</span><br><span class="line">WAFとして go-swagger を選択してみた,Programming,Go|Swagger|OpenAPI|go-swagger,2019&#x2F;08&#x2F;14 10:30:07,12420</span><br><span class="line">はじめてのTerraform 0.12 ～環境構築～,Infrastructure,AWS|Terraform,2019&#x2F;08&#x2F;16 12:43:21,11549</span><br><span class="line">はじめてのTerraform 0.12 ～実践編～,Infrastructure,AWS|Terraform,2019&#x2F;08&#x2F;19 07:32:16,24813</span><br><span class="line">初めてのGCPで環境構築してハマったこと,Infrastructure,GCP|Network|DB|Kubernetes,2019&#x2F;08&#x2F;20 09:19:49,16267</span><br><span class="line">システム開発で得たRedis利用ノウハウ,DB,Redis|KVS,2019&#x2F;08&#x2F;21 08:53:57,18635</span><br><span class="line">ソフトとハードの垣根を越えろ - IoTハードウェアの開発をソフト屋視点で解説します,IoT,IoT|CAD|電子工作,2019&#x2F;08&#x2F;26 08:30:52,22649</span><br><span class="line">GKEのPodから異なるプロジェクトのIPアドレスへ接続できずハマった話,Infrastructure,GCP|Network,2019&#x2F;08&#x2F;27 23:39:01,9895</span><br><span class="line">AWS IAMロールの信頼関係の気になる動作,Infrastructure,AWS,2019&#x2F;09&#x2F;02 08:17:51,6787</span><br><span class="line">Terraformのベストなプラクティスってなんだろうか,Infrastructure,Terraform,2019&#x2F;09&#x2F;03 15:20:52,10993</span><br><span class="line">Let&#39;s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～,Infrastructure,GCP|Docker|CloudRun|コンテナデプロイ|LetsTryGCP,2019&#x2F;09&#x2F;09 09:30:42,10840</span><br><span class="line">Google Cloud Kubernetes Day セッションレポート,Infrastructure,GCP|Kubernetes|GitOps|Anthos|参加レポート,2019&#x2F;09&#x2F;10 09:13:03,11903</span><br><span class="line">サステナブルなエンジニア組織デザイン（前編） ～よくある設計とジレンマ～,Management,組織論,2019&#x2F;09&#x2F;17 11:00:42,19210</span><br><span class="line">サステナブルなエンジニア組織デザイン（後編） ～デザインパターンと10のリファクタリング～,Management,組織論|マネジメント,2019&#x2F;09&#x2F;18 08:37:42,21541</span><br><span class="line">Oculus Questで作る入院中の子どもたちに向けたパラスポーツ体験,VR,Unity,2019&#x2F;09&#x2F;25 10:49:43,6756</span><br><span class="line">Go言語のDBレイヤーライブラリの評価,Programming,Go|DB|ORM|SQL|技術選定,2019&#x2F;09&#x2F;26 10:00,20298</span><br><span class="line">Let&#39;s Try GCP #2 ～Cloud FunctionsをVPC connectorと一緒に使ってみる～,Infrastructure,GCP|CloudFunctions|LetsTryGCP,2019&#x2F;09&#x2F;27 09:34:14,10939</span><br><span class="line">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った,Programming,JSON|jsonschema|Go,2019&#x2F;10&#x2F;01 09:31:51,12010</span><br><span class="line">CUEを試して見る,Programming,CUE|Linter,2019&#x2F;10&#x2F;02 08:30:09,17622</span><br><span class="line">&quot; 本当に使ってよかったOpenAPI (Swagger) ツール&quot;,Programming,OpenAPI|Swagger|コーディング規約,2019&#x2F;10&#x2F;08 08:48:06,18771</span><br><span class="line">AWS Session Managerでセッションを切断されにくくする方法,Infrastructure,AWS|Session-Manager,2019&#x2F;10&#x2F;09 08:56:31,8384</span><br><span class="line">Software Design 後記,DataScience,MachineLearning|Algorithm|出版,2019&#x2F;10&#x2F;16 08:56:31,8460</span><br><span class="line">GKEクラスタに割り当てるCIDRを設計する,Infrastructure,GCP|Network|Kubernetes,2019&#x2F;10&#x2F;17 08:02:12,16817</span><br><span class="line">第1回社内ロボコン開催記-ライントレーサー編-,IoT,Robot|IoT|Future電子工作部|電子工作,2019&#x2F;10&#x2F;18 09:44:58,11172</span><br><span class="line">工場をハックするための基本知識　前編,IoT,Network|工場|IoT|PLC,2019&#x2F;10&#x2F;23 09:04:03,14351</span><br><span class="line">テキストアナリティクスシンポジウム開催報告&amp;ACL2019参加報告,DataScience,MachineLearning,2019&#x2F;10&#x2F;24 10:36:57,13151</span><br><span class="line">Anthosについて改めて知る(GCPUG Anthos day 参加レポ),Infrastructure,Anthos|Kubernetes,2019&#x2F;10&#x2F;25 12:38:13,8931</span><br><span class="line">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ,Programming,React|Redux|Frontend,2019&#x2F;10&#x2F;29 22:40:26,13124</span><br><span class="line">GoでCUEのバリデーション機能を利用しつつ、.cue&#x2F;.json&#x2F;.yaml形式の設定ファイルを読み込む,Programming,CUE|Go|JSON,2019&#x2F;10&#x2F;30 11:01:41,14410</span><br><span class="line">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました,Infrastructure,AWS|Glue,2019&#x2F;11&#x2F;01 13:37:19,9653</span><br><span class="line">インフラ入門vol.3(ネットワーク冗長化構成),Infrastructure,Network|インフラ入門|入門,2019&#x2F;11&#x2F;07 11:01:01,31552</span><br><span class="line">Go Cloud#1 概要とBlobへの活用方法,Programming,Go|GoCDK|Storage,2019&#x2F;11&#x2F;11 11:15:01,19825</span><br><span class="line">Go Cloud#2 Pub&#x2F;Subの概要紹介,Programming,Go|GoCDK,2019&#x2F;11&#x2F;12 10:46:59,12064</span><br><span class="line">Go Cloud#3 Go CloudのDocStoreを使う,Programming,Go|GoCDK|DynamoDB|KVS,2019&#x2F;11&#x2F;13 10:04:49,17278</span><br><span class="line">Go Cloud#4 URLを編集するパッケージ,Programming,Go|GoCDK|SQS,2019&#x2F;11&#x2F;14 11:19:44,8760</span><br><span class="line">Go Cloud#5 AWSのローカルモック環境であるLocalStackを活用する,Programming,Go|GoCDK|AWS|LocalStack,2019&#x2F;11&#x2F;15 12:10:54,10715</span><br><span class="line">Go Cloud#6 GCPのローカルエミュレータを活用する,Programming,Go|GCP|GoCDK,2019&#x2F;11&#x2F;19 14:39:21,15140</span><br><span class="line">Go Conference 2019 Autumn に登壇しました,Programming,Go|登壇資料|Algorithm|Conference,2019&#x2F;11&#x2F;20 09:05:17,12119</span><br><span class="line">「脱Oracle」の背景にある、Oracle Databaseの価値を改めて考える,DB,Oracle|DB|DB移行|技術選定|要件定義,2019&#x2F;11&#x2F;21 09:20:12,12278</span><br><span class="line">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる,Programming,Go|GoCDK|fluentd,2019&#x2F;11&#x2F;28 13:08:47,14342</span><br><span class="line">GDG DevFest in 信州2019に登壇しました,Infrastructure,GCP|登壇資料,2019&#x2F;11&#x2F;29 13:58:44,10221</span><br><span class="line">SORACOM USBドングルの自動接続,Programming,Ruby|Selenium|SORACOM,2019&#x2F;12&#x2F;01 12:02:03,10352</span><br><span class="line">Go Conferenceの📛を作る,Programming,Go,2019&#x2F;12&#x2F;03 10:31:11,16719</span><br><span class="line">AWS Glueの単体テスト環境の構築手順,Infrastructure,AWS|Glue|Spark|Python|Docker|LocalStack,2019&#x2F;12&#x2F;06 00:22:02,10313</span><br><span class="line">NeurIPS 2019 参加報告,DataScience,MachineLearning,2019&#x2F;12&#x2F;10 16:22:02,4248</span><br><span class="line">golang.tokyoで発表してきました,Programming,Go|登壇資料|勉強会,2019&#x2F;12&#x2F;11 13:10:53,10877</span><br><span class="line">NeurIPS 2019 論文紹介,DataScience,MachineLearning,2019&#x2F;12&#x2F;27 16:22:02,11141</span><br><span class="line">打鍵テストをCIで回す：Cypress on GitHub Actions,CI&#x2F;CD,Cypress|CI&#x2F;CD|テスト|E2Eテスト,2020&#x2F;01&#x2F;15 09:25:42,15016</span><br><span class="line">実践Drawio,Design,draw.io|Document,2020&#x2F;01&#x2F;16 11:07:03,9604</span><br><span class="line">工場をハックするための基本知識　後編,IoT,Network|工場|IoT|PLC,2020&#x2F;01&#x2F;20 09:59:49,24308</span><br><span class="line">スロットリングとの付き合い方,Infrastructure,AWS|GCP|リトライ,2020&#x2F;01&#x2F;21 08:52:16,7191</span><br><span class="line">Auth0 導入編,認証認可,Auth0|Vue.js|入門,2020&#x2F;01&#x2F;22 10:31:27,9140</span><br><span class="line">Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する,認証認可,Vue.js|Auth0,2020&#x2F;01&#x2F;23 11:02:12,10454</span><br><span class="line">Umeda.go 2020 Winterに3名で登壇しました,Programming,Go|登壇資料|勉強会,2020&#x2F;01&#x2F;27 09:39:35,8153</span><br><span class="line">Auth0のRulesを使って認証認可を自在にカスタマイズする,認証認可,Auth0|JavaScript,2020&#x2F;01&#x2F;28 09:24:18,12635</span><br><span class="line">リモートワークを促進させるDaily Stand-up Meeting,Management,会議|マネジメント,2020&#x2F;01&#x2F;29 10:02:04,8558</span><br><span class="line">AirflowのTips 11選,Infrastructure,Python|Airflow,2020&#x2F;01&#x2F;31 11:28:46,12975</span><br><span class="line">チームで機能設計するためのPlantUML標準化,Design,PlantUML|UML|コーディング規約|チーム開発,2020&#x2F;02&#x2F;03 09:16:35,15979</span><br><span class="line">これさえあればサービス構成図がだいたい描けるアイコンセットを公開します！,Design,icon,2020&#x2F;02&#x2F;04 08:12:14,2370</span><br><span class="line">GCP連載#1 Stackdriver Loggingへ良い感じのログ出力方法を考える,Infrastructure,GCP|OpenCensus|Go|Monitoring|GCP連載|CloudOperations,2020&#x2F;02&#x2F;05 09:23:10,16142</span><br><span class="line">GCP連載#2 Istio on GKEではじめるサービスメッシュ,Infrastructure,GCP|Istio|Kubernetes|GCP連載|ServiceMesh,2020&#x2F;02&#x2F;06 11:43:53,17017</span><br><span class="line">GCP連載#3 Goでサーバーレスな管理画面アプリを作る,Programming,Go|GCP|Serverless|GCP連載|CloudRun,2020&#x2F;02&#x2F;07 10:54:41,24108</span><br><span class="line">golang.tokyo #29に4名で登壇しました,Programming,Go|登壇資料|勉強会,2020&#x2F;02&#x2F;09 20:01:05,8893</span><br><span class="line">GCP連載#4 Cloud Life Sciencesを見てみた,Infrastructure,GCP|GCP連載|ヘルスケア|BigQuery,2020&#x2F;02&#x2F;10 11:53:19,11825</span><br><span class="line">GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる,Infrastructure,GCP連載|GCP|Python|Go,2020&#x2F;02&#x2F;12 09:14:36,12958</span><br><span class="line">GCP連載#6 Terraform Validatorを使って、GCPのセキュリティポリシーの自動チェックを行う,Infrastructure,GCP|GCP連載|Terraform,2020&#x2F;02&#x2F;13 10:26:28,11780</span><br><span class="line">GCP連載#7 GCPのData Transfer Serviceを使って簡単にS3からBigQueryにデータ転送をしてみる,Infrastructure,GCP|GCP連載|BigQuery,2020&#x2F;02&#x2F;14 09:39:28,9109</span><br><span class="line">GCP連載#8 gcloud compute sshじゃなくてsshコマンドを使いたいあなたへ,Infrastructure,GCP連載|GCP,2020&#x2F;02&#x2F;17 10:56:29,5415</span><br><span class="line">GCP連載#9 初めてのGCP 画像AI(Vision API)をさわってみた,Infrastructure,GCP|GCP連載,2020&#x2F;02&#x2F;18 10:16:55,9649</span><br><span class="line">GCP連載#10 Terraform ではなくCloud Deployment Manager を使ってみよう,Infrastructure,GCP|GCP連載,2020&#x2F;02&#x2F;19 10:05:30,18747</span><br><span class="line">DynamoDB×Go連載#1 GoでDynamoDBでおなじみのguregu&#x2F;dynamoを利用する,Programming,Go|AWS|DynamoDB×Go|KVS|DynamoDB,2020&#x2F;02&#x2F;25 10:32:43,10169</span><br><span class="line">DynamoDB×Go連載#2 AWS SDKによるDynamoDBの基本操作,Programming,Go|AWS|DynamoDB×Go|KVS|DynamoDB,2020&#x2F;02&#x2F;27 08:25:12,9529</span><br><span class="line">DynamoDB×Go#3 Go CDKでどこまでいける？機能を調べてみた,Programming,Go|AWS|DynamoDB×Go|KVS|DynamoDB|GoCDK,2020&#x2F;02&#x2F;28 10:13:26,16804</span><br><span class="line">アイコンセット公開！その裏側を聞いてみた,Culture,icon|インタビュー,2020&#x2F;03&#x2F;09 10:13:26,12707</span><br><span class="line">Goの標準ライブラリのコードリーディングのすすめ,Programming,Go|CodeReading,2020&#x2F;03&#x2F;10 08:55:28,14918</span><br><span class="line">JavaプログラマーのためのGo言語入門,Programming,Go|Java|翻訳|入門,2020&#x2F;03&#x2F;11 09:39:47,45562</span><br><span class="line">公開鍵暗号(非対称鍵暗号)の仕組みをわかりやすく解説してみる,Infrastructure,暗号,2020&#x2F;03&#x2F;12 10:34:17,6063</span><br><span class="line">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～,Programming,Frontend|Vue.js|フロントエンド記事集中投稿,2020&#x2F;03&#x2F;16 11:49:57,8556</span><br><span class="line">SPA + Tableau Online + Auth0 SSO,Programming,Frontend|JavaScript|Auth0|Tableau|SSO,2020&#x2F;03&#x2F;17 10:59:27,7563</span><br><span class="line">【Figma】を使ってチームでUI&#x2F;UX設計するといいこと,Design,UI&#x2F;UX|Frontend|Figma,2020&#x2F;03&#x2F;18 12:33:18,10288</span><br><span class="line">今あえてTypeScriptのビルド＆バンドルツールを探してみる,Programming,TypeScript|JavaScript|Frontend|webpack|Node.js,2020&#x2F;03&#x2F;19 10:12:40,17133</span><br><span class="line">Serverless連載1: SAMを使ったローカルテスト（Go編）,Programming,Go|AWS|Serverless|Serverless連載|DynamoDB|Lambda,2020&#x2F;03&#x2F;23 09:56:50,16676</span><br><span class="line">Go1.14のRelease Partyに登壇しました🎉,Programming,Go|登壇資料,2020&#x2F;03&#x2F;25 14:44:32,4126</span><br><span class="line">Serverless連載2: AWS Lambda×Goの開発Tips,Programming,Go|AWS|Serverless|Serverless連載|Lambda,2020&#x2F;03&#x2F;26 14:24:00,12824</span><br><span class="line">Serverless連載3: Goでサーバーレス用の検索エンジンwatertowerを作ってみました,Programming,Go|Serverless|AWS|GoCDK|Serverless連載|DynamoDB,2020&#x2F;03&#x2F;27 09:51:22,16861</span><br><span class="line">Serverless連載4: Firebase CrashlyticsでAndroidアプリのエラーログをさくっと収集する,Programming,Serverless|Serverless連載|GCP|Firebase|Android|アプリ,2020&#x2F;03&#x2F;30 09:45:42,11329</span><br><span class="line">Serverless連載5: CloudEventsのGo版SDKをいじってみる,Programming,Serverless|Serverless連載|Go|GCP,2020&#x2F;03&#x2F;31 09:39:23,20711</span><br><span class="line">&quot;Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた&quot;,Programming,Vue.js|Frontend|フロントエンド記事集中投稿|初心者向け,2020&#x2F;04&#x2F;01 10:30:55,19082</span><br><span class="line">スキーマファースト開発のためのOpenAPI（Swagger）設計規約,Programming,OpenAPI|Swagger|Go|TypeScript|設計|チーム開発,2020&#x2F;04&#x2F;09 10:38:04,14822</span><br><span class="line">インフラ入門vol.4（ストレージ）,Infrastructure,Storage|インフラ入門|入門,2020&#x2F;04&#x2F;14 11:07:29,13039</span><br><span class="line">【小ネタ】AWS S3 署名付きURLってマネジメントコンソールからでも作れたのね,Infrastructure,AWS,2020&#x2F;04&#x2F;15 09:46:43,3886</span><br><span class="line">ServiceNow+Terraform(+Go) によるインフラ構築自動化,Infrastructure,ServiceNow|Terraform|Go|Workflow,2020&#x2F;04&#x2F;16 21:30:49,24762</span><br><span class="line">Real World HTTP 第2版はなぜ1.5倍になったのか,Culture,出版|Web|HTTP|書籍,2020&#x2F;04&#x2F;21 09:55:14,14419</span><br><span class="line">PyConJP 2019に登壇しました,Programming,Python|登壇資料|Conference,2020&#x2F;04&#x2F;22 22:19:57,11192</span><br><span class="line">Session Manager と踏み台サーバの共存構成,Infrastructure,AWS|Session-Manager|踏み台,2020&#x2F;04&#x2F;23 10:23:54,10716</span><br><span class="line">社内勉強会で発表したGCP資料を公開します,Infrastructure,GCP|初心者向け|登壇資料|BigQuery|Kubernetes,2020&#x2F;04&#x2F;24 10:23:37,10465</span><br><span class="line">Goならわかるシステムプログラミングが増刷されて初版4刷になりました,Programming,Go|出版|書籍,2020&#x2F;04&#x2F;27 10:03:55,6984</span><br><span class="line">Vue.jsのslotの機能を初心者にわかるように解説してみた,Programming,Vue.js|Frontend|初心者向け|フロントエンド記事集中投稿,2020&#x2F;04&#x2F;28 18:42:56,10034</span><br><span class="line">Reduxを分かりやすく解説してみた,Programming,React|Redux|Frontend|フロントエンド記事集中投稿|初心者向け,2020&#x2F;04&#x2F;29 17:05:22,5931</span><br><span class="line">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話,Programming,React|Redux|Frontend|フロントエンド記事集中投稿,2020&#x2F;05&#x2F;01 10:19:34,25689</span><br><span class="line">PJでUIデザインにAtomic Designを導入したらどうだったのか,Design,UI&#x2F;UX|Frontend|AtomicDesign|Figma|フロントエンド記事集中投稿,2020&#x2F;05&#x2F;11 08:43:07,13199</span><br><span class="line">日本製HeadlessCMSのmicroCMSを触ってみた,Programming,Vue.js|HeadlessCMS|Frontend|フロントエンド記事集中投稿,2020&#x2F;05&#x2F;12 09:48:20,18206</span><br><span class="line">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編,Infrastructure,Docker|Python,2020&#x2F;05&#x2F;13 08:56:40,11240</span><br><span class="line">仕事でPythonコンテナをデプロイする人向けのDockerfile (2): distroless編,Infrastructure,Python|Docker,2020&#x2F;05&#x2F;14 08:51:53,12173</span><br><span class="line">Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する,Programming,Serverless|AWS|Serverless連載|DynamoDB|StepFunctions,2020&#x2F;05&#x2F;15 22:25:58,29877</span><br><span class="line">Go Tips連載1: ホワイトリストProxy申請するときのGo依存ライブラリURLドメインの調べ方,Programming,Go|GoTips連載|プロキシ,2020&#x2F;05&#x2F;18 09:55:52,2160</span><br><span class="line">Go Tips連載2: Golandで環境変数をさっと貼る方法 ,Programming,Go|Goland|GoTips連載,2020&#x2F;05&#x2F;19 21:52:54,3724</span><br><span class="line">Go Tips連載3: ファイルを扱うちょっとしたスクリプトをGoで書くときのTips5選,Programming,Go|GoTips連載,2020&#x2F;05&#x2F;20 09:43:46,17319</span><br><span class="line">Go Tips連載4: GoDocの読み方,Programming,Go|Document|GoTips連載,2020&#x2F;05&#x2F;21 22:23:40,18155</span><br><span class="line">Go Tips 連載5: エラーコードベースの例外ハンドリングの実装＋morikuni&#x2F;failureサンプル,Programming,Go|GoTips連載,2020&#x2F;05&#x2F;22 00:14:52,9380</span><br><span class="line">Go Tips連載6: Error wrappingされた各クラウドSDKの独自型エラーを扱う,Programming,Go|GoTips連載,2020&#x2F;05&#x2F;23 11:12:30,9639</span><br><span class="line">Go Tips 連載7:【golangci-lint】lint issueを新たに作り出さないためのTips,Programming,Go|GoTips連載|Linter,2020&#x2F;05&#x2F;25 09:30:35,2775</span><br><span class="line">Go Tips連載8: logパッケージでログ出力している場所の情報を出す,Programming,Go|GoTips連載,2020&#x2F;05&#x2F;27 10:36:36,4799</span><br><span class="line">あなたのGoアプリ&#x2F;ライブラリのパッケージ構成もっとシンプルでよくない？,Programming,設計|Go,2020&#x2F;05&#x2F;28 09:49:19,22722</span><br><span class="line">春の入門祭り🌸連載を始めます,Culture,TechBlog|入門,2020&#x2F;05&#x2F;29 11:56:30,5331</span><br><span class="line">フューチャー技術ブログの運営で心がけていること,Culture,TechBlog|運営,2020&#x2F;05&#x2F;30 13:28:08,37169</span><br><span class="line">春の入門祭り 🌸 #01 Goのテストに入門してみよう！,Programming,Go|初心者向け|テスト,2020&#x2F;06&#x2F;01 09:41:23,56000</span><br><span class="line">春の入門祭り 🌸 #02 Google Cloud Platform 101,Infrastructure,GCP|初心者向け,2020&#x2F;06&#x2F;02 09:54:02,11772</span><br><span class="line">春の入門祭り🌸#03 ゼロから始めるFlutter生活,Programming,Flutter|Dart|アプリ|初心者向け|クロスプラットフォーム,2020&#x2F;06&#x2F;03 11:09:41,18328</span><br><span class="line">春の入門祭り 🌸 #04 NW入門,Infrastructure,Network|初心者向け,2020&#x2F;06&#x2F;04 09:06:07,19505</span><br><span class="line">春の入門祭り 🌸 #05　データベース　テーブル設計入門,DB,DB|初心者向け|DataModel|入門,2020&#x2F;06&#x2F;05 21:46:58,10688</span><br><span class="line">フューチャー夏のインターン2020。リモート開催予定です,Culture,インターン,2020&#x2F;06&#x2F;06 14:32:59,16078</span><br><span class="line">春の入門祭り🌸 #6 とあるマイコンのクロスコンパイラ,Programming,clang|Compiler,2020&#x2F;06&#x2F;08 10:37:41,15366</span><br><span class="line">春の入門祭り🌸 #7 作って学ぶGraphQL。gqlgenを用いて鉄道データ検索API開発入門,Programming,GraphQL|Go|PostgreSQL,2020&#x2F;06&#x2F;09 11:16:57,35172</span><br><span class="line">春の入門祭り🌸 #8 人生を豊かにする文字列diff入門,Programming,Go|Algorithm,2020&#x2F;06&#x2F;10 11:31:40,14110</span><br><span class="line">&quot;春の入門祭り🌸 #9 Grep, Git grepの便利オプション&quot;,Programming,Shellscript,2020&#x2F;06&#x2F;11 09:53:08,20803</span><br><span class="line">春の入門祭り🌸 #10 denoに触れてみよう,Programming,deno|Frontend|JavaScript|Node.js,2020&#x2F;06&#x2F;12 12:06:07,7132</span><br><span class="line">フューチャーの新人研修後の配属先にかける新人の思いを歌ってみた,Culture,応援歌|新人研修,2020&#x2F;06&#x2F;13 14:20:17,5241</span><br><span class="line">春の入門祭り🌸 #11 Kaggle入門,DataScience,Kaggle|競技プログラミング|初心者向け|入門,2020&#x2F;06&#x2F;15 10:48:52,6515</span><br><span class="line">春の入門祭り 🌸#12 レシートで学ぶデータモデリング入門,DB,DB|DataModel|初心者向け|入門,2020&#x2F;06&#x2F;16 10:22:22,10646</span><br><span class="line">春の入門祭り 🌸 #13 Swift Compositional Layouts入門：複雑なCollectionViewをシンプルに実装する,Programming,Swift|アプリ,2020&#x2F;06&#x2F;17 10:20:21,11538</span><br><span class="line">春の入門祭り 🌸 #14 暗号通信入門 ,Infrastructure,暗号|Wireshark|初心者向け,2020&#x2F;06&#x2F;18 09:33:37,14002</span><br><span class="line">webpack入門,Programming,webpack|Frontend|JavaScript|Node.js|初心者向け,2020&#x2F;06&#x2F;19 10:19:09,9885</span><br><span class="line">春の入門祭り 🌸 #16 「その仕事、Slackで。」してみた事例を紹介,Infrastructure,Slack|ChatOps|初心者向け,2020&#x2F;06&#x2F;22 13:08:22,8630</span><br><span class="line">春の入門祭り🌸 #17 Elasticsearch入門,Infrastructure,Elasticsearch|Elastic-Stack|初心者向け,2020&#x2F;06&#x2F;23 10:14:50,17665</span><br><span class="line">春の入門祭り🌸 #18 Terraform 101,Infrastructure,Terraform|Ansible|初心者向け|GCP,2020&#x2F;06&#x2F;24 11:44:35,26865</span><br><span class="line">春の入門祭り🌸 #19 Chromeの拡張機能作ってみた！,Programming,JavaScript|JSON|ChromeExtension,2020&#x2F;06&#x2F;25 10:34:33,9023</span><br><span class="line">MLflowで実験管理入門,DataScience,MLOps|MLflow|MachineLearning|Python|入門|実験管理,2020&#x2F;06&#x2F;26 10:08:23,11978</span><br><span class="line">Terraform Associate合格記,Infrastructure,Terraform|合格記,2020&#x2F;06&#x2F;29 10:03:42,8670</span><br><span class="line">go-swaggerを用いたWebアプリケーション開発Tips19選,Programming,OpenAPI|Swagger|Go|Lambda|go-swagger,2020&#x2F;06&#x2F;30 10:06:15,41688</span><br><span class="line">Go の Open API 3.0 のジェネレータ oapi-codegen を試してみた,Programming,Go|OpenAPI|Swagger|go-swagger,2020&#x2F;07&#x2F;01 09:40:40,12496</span><br><span class="line">Auth0の設定をバージョン管理し、Auth0 Deploy CLIを利用してデプロイ環境を整える,CI&#x2F;CD,Auth0|AWS|GitLab,2020&#x2F;07&#x2F;02 09:48:34,11284</span><br><span class="line">スケーラブルデータベース ～クラウドにおける後悔しないデータベース選定～,DB,RDB|DB|KVS|技術選定|要件定義,2020&#x2F;07&#x2F;03 10:34:11,27292</span><br><span class="line">Zuora連載１：Zuora Central Platform概要,Infrastructure,Zuora|SaaS|サブスクリプション,2020&#x2F;07&#x2F;06 09:01:37,8951</span><br><span class="line">VSCode の Go extension でよく利用するコマンド 7選,Programming,Go|VSCode,2020&#x2F;07&#x2F;07 10:15:05,5295</span><br><span class="line">Zuora連載2：Zuora REST API 利用と開発環境構築,Programming,Zuora|SaaS|サブスクリプション|Go,2020&#x2F;07&#x2F;08 09:56:30,19317</span><br><span class="line">GoでWebアプリ開発時にあるあるだったレビューコメント,Programming,Go|コードレビュー,2020&#x2F;07&#x2F;09 11:09:27,38967</span><br><span class="line">HashiTalks: Japanに登壇しました,Infrastructure,登壇資料|Terraform|勉強会|GCP,2020&#x2F;07&#x2F;10 10:19:54,6859</span><br><span class="line">新人研修有志が初心者向けにバーチャルコンテストを実施しました &amp; Tips,Culture,競技プログラミング|新人研修,2020&#x2F;07&#x2F;15 10:51:27,9351</span><br><span class="line">Zuora連載 Vol.3 Notification及びEventTriggerの話,Infrastructure,Zuora|SaaS|サブスクリプション,2020&#x2F;07&#x2F;16 10:49:27,12160</span><br><span class="line">CORSのプリフライトリクエスト（OPTIONメソッド）はAPI Keyの認証なしでOKにしておかないと失敗する話,Infrastructure,CORS|Go|Web|HTTP,2020&#x2F;07&#x2F;17 00:00:00,11686</span><br><span class="line">Zuora連載 Vol.4 Workflowの話,Infrastructure,Zuora|Workflow|SaaS|サブスクリプション,2020&#x2F;07&#x2F;20 00:00:00,15766</span><br><span class="line">PythonユーザーのためのGraalVM,Programming,GraalVM|Python|Java,2020&#x2F;07&#x2F;21 00:00:00,16397</span><br><span class="line">AWSサービストリガによるLambda起動,Infrastructure,AWS|Serverless|LocalStack|Serverless連載|Lambda|DynamoDB|Go,2020&#x2F;07&#x2F;22 00:00:00,16624</span><br><span class="line">夏休み自由研究ブログ連載を始めます,Culture,TechBlog|夏休み自由研究,2020&#x2F;07&#x2F;26 00:00:00,5677</span><br><span class="line">GoからAWS KinesisのAggregationFormatを利用する,Programming,AWS|Go|Serverless|Serverless連載|Lambda|IoT,2020&#x2F;07&#x2F;27 00:00:00,15806</span><br><span class="line">DBスキーマを駆動にした開発のためのライブラリ調査,Programming,Go|DB|ORM|技術選定,2020&#x2F;07&#x2F;28 00:00:00,29396</span><br><span class="line">AWS認定 Machine learning specialty 合格記,DataScience,AWS|MachineLearning,2020&#x2F;07&#x2F;29 00:00:00,16687</span><br><span class="line">Redux-Toolkitに学ぶ、TypeScriptの型推論とこれからのAPIデザイン,Programming,TypeScript,2020&#x2F;07&#x2F;30 00:00:00,26993</span><br><span class="line">コード選考の問題選定を現場社員がやるわけ,Programming,採用|競技プログラミング,2020&#x2F;07&#x2F;31 00:00:00,6784</span><br><span class="line">Kaggleにワクチン開発用のデータを公開しました &amp; コード解説,DataScience,Python|Kaggle|ワクチン|ヘルスケア,2020&#x2F;08&#x2F;01 00:00:00,9652</span><br><span class="line">産業用機器向けフィールドネットワークModbusで温湿度センシング,IoT,Go|Modbus|PLC|夏休み自由研究|Future電子工作部|電子工作,2020&#x2F;08&#x2F;03 00:00:00,18790</span><br><span class="line">GoPlus自由研究,Programming,Go|夏休み自由研究,2020&#x2F;08&#x2F;04 00:00:00,13820</span><br><span class="line">Terraformで楽をしたい,Infrastructure,Terraform|GCP|夏休み自由研究,2020&#x2F;08&#x2F;05 00:00:00,9457</span><br><span class="line">初めてのOSSコミュニティ活動〜ドキュメント翻訳やってみた。カンファレンススタッフもやってみた。〜,Culture,Python|OSS|夏休み自由研究,2020&#x2F;08&#x2F;06 00:00:00,6228</span><br><span class="line">GoとSuffixArray,Programming,データ構造|Go|夏休み自由研究,2020&#x2F;08&#x2F;07 00:00:00,16217</span><br><span class="line">API Meetup Online #3で限定公開URL（Capability URLs）について話をしてきました。,Programming,HTTP|Web|登壇資料,2020&#x2F;08&#x2F;09 00:00:00,4645</span><br><span class="line">自動売買ツールを自作してみよう,Infrastructure,FinTech|Elastic-Stack|Elasticsearch|Kibana|夏休み自由研究,2020&#x2F;08&#x2F;10 00:00:00,21329</span><br><span class="line">ダイエット食のブレイクスルー！低温調理器を自作して鶏むね肉を美味しく食べる,Programming,ESP32|電子工作|Future電子工作部|夏休み自由研究|料理,2020&#x2F;08&#x2F;11 00:00:00,7433</span><br><span class="line">Marpで会社のスライドテンプレを作ってみる,Design,Marp|CSS|VSCode|夏休み自由研究,2020&#x2F;08&#x2F;12 00:00:00,4260</span><br><span class="line">GCPのRegion間レイテンシからサービスのRegion集約を考察する,Infrastructure,GCP|Network|夏休み自由研究|Terraform,2020&#x2F;08&#x2F;13 00:00:00,14457</span><br><span class="line">ぼくのなつやすみ5 -Knativeを知ろう-,Infrastructure,Kubernetes|Istio|Knative|GCP|夏休み自由研究,2020&#x2F;08&#x2F;14 00:00:00,15128</span><br><span class="line">Slack×GASの日報テンプレBOTを実務に導入してみた,Infrastructure,夏休み自由研究|Slack|JavaScript|BOT|GAS,2020&#x2F;08&#x2F;17 00:00:00,11380</span><br><span class="line">【入門】私を苦しめたDynamoDB,Programming,AWS|DynamoDB|DataModel|夏休み自由研究|入門,2020&#x2F;08&#x2F;18 00:00:00,13571</span><br><span class="line">Firebaseでお手軽！データ管理画面をつくる,Infrastructure,React|TypeScript|Firebase|Frontend|夏休み自由研究|入門,2020&#x2F;08&#x2F;19 00:00:00,13478</span><br><span class="line">Pythonによるパッケージ開発,Programming,Python|pytest|tox|pip|夏休み自由研究,2020&#x2F;08&#x2F;20 00:00:00,30029</span><br><span class="line">エンジニアが最低限理解しておくべきOSSライセンスの基礎知識,Infrastructure,OSS|license|夏休み自由研究,2020&#x2F;08&#x2F;21 00:00:00,19335</span><br><span class="line">go-swaggerでhello world,Programming,Go|go-swagger|入門,2020&#x2F;08&#x2F;24 00:00:00,12318</span><br><span class="line">Airflow の SLA設定方法,Infrastructure,Airflow|Python,2020&#x2F;08&#x2F;27 00:00:00,5449</span><br><span class="line">チームで推奨するVSCode拡張機能を共有するtips,Programming,VSCode|チーム開発,2020&#x2F;08&#x2F;28 00:00:00,3828</span><br><span class="line">Vue.jsで最速に始めるCheetah Grid,Infrastructure,JavaScript|Vue.js|CheetahGrid,2020&#x2F;09&#x2F;01 00:00:00,17291</span><br><span class="line">GCP Professional Cloud Network Engineer に合格しました,Infrastructure,GCP|合格記|Network,2020&#x2F;09&#x2F;02 00:00:00,6803</span><br><span class="line">ANTLRを業務で活用した話,Infrastructure,ANTLR4|Java|Vue.js|構文解析,2020&#x2F;09&#x2F;03 00:00:00,22355</span><br><span class="line">親子でプログラミング学習　Alexaスキルを作ろう,Programming,Alexa|プログラミング教育|JavaScript|VUI,2020&#x2F;09&#x2F;07 00:00:00,13630</span><br><span class="line">フューチャー技術ブログで行っている連載企画が良いよって話,Culture,TechBlog|運営,2020&#x2F;09&#x2F;08 00:00:00,20788</span><br><span class="line">キーボードを組み立ててみた話,Infrastructure,自作キーボード|電子工作,2020&#x2F;09&#x2F;09 00:00:00,20907</span><br><span class="line">「2020年代のコンテナ時代のPythonアーキテクチャ&amp;デプロイ」というテーマでPyCon.jp 2020で発表してきました,Programming,Python|Docker|登壇資料|コンテナデプロイ,2020&#x2F;09&#x2F;10 00:00:00,22134</span><br><span class="line">いぶし銀なインフラ機能「テープバックアップ／リストア」を語る,Infrastructure,バックアップ|リストア|テープ装置|NetBackup|Veritas,2020&#x2F;09&#x2F;11 00:00:00,15405</span><br><span class="line">フューチャーの2020 夏季インターンに参加してみた,Culture,インターン|採用,2020&#x2F;09&#x2F;13 00:00:00,12772</span><br><span class="line">GlyphFeeds連載を始めます！,Culture,GlyphFeeds|CMS|AWS|基幹システム|エンタープライズ,2020&#x2F;09&#x2F;14 00:00:00,3581</span><br><span class="line">メディア向けCMSサービスのインフラ構成のポイント,Infrastructure,AWS|CMS|GlyphFeeds|基幹システム|要件定義,2020&#x2F;09&#x2F;15 00:00:00,14476</span><br><span class="line">素材受信インターフェースにSQSを活用してみた ～標準キュー vs FIFOキュー～,Infrastructure,AWS|SQS|GlyphFeeds,2020&#x2F;09&#x2F;16 00:00:00,6986</span><br><span class="line">デスクトップWebアプリのモバイル化における考え方・Tips,,モバイルアプリ|設計|UI|GlyphFeeds,2020&#x2F;09&#x2F;17 00:00:00,7897</span><br><span class="line">SpringBootでDIを駆使したルールエンジン開発,Programming,ルールエンジン|SpringBoot|Java|Spring|DI|GlyphFeeds,2020&#x2F;09&#x2F;18 00:00:00,12420</span><br><span class="line">Engineer CampでSQLフォーマッタを開発しました,Programming,SQL|インターン|Antlr|構文解析|VSCode,2020&#x2F;09&#x2F;19 00:00:00,8078</span><br><span class="line">Future Engineer Camp 2020 参加記,Programming,Go|インターン|工場,2020&#x2F;09&#x2F;20 00:00:00,8047</span><br><span class="line">フューチャーのインターンEngineer Campに参加した話,Infrastructure,インターン|採用,2020&#x2F;09&#x2F;21 00:00:00,10331</span><br><span class="line">久しぶりに社内LT大会を開催しました。2020 Summer,Culture,LT|登壇資料,2020&#x2F;09&#x2F;23 00:00:00,7467</span><br><span class="line">CheetahGrid+Vue.jsをエンプラで使ってみた,Infrastructure,CheetahGrid|Vue.js|エンタープライズ,2020&#x2F;09&#x2F;24 00:00:00,24274</span><br><span class="line">Future Tech Night(第4弾：Go x AWS スマート工場編)を開催しました。,Programming,工場|Go|AWS|勉強会|TechNight|開催レポート|TechNight,2020&#x2F;09&#x2F;25 00:00:00,7521</span><br><span class="line">LambdaとGoを使ったサーバーレスWebAPI開発実践入門,Programming,Go|AWS|Serverless|go-swagger|Terraform,2020&#x2F;09&#x2F;27 00:00:00,36930</span><br><span class="line">CNCF連載始めます,Infrastructure,CNCF|OSS,2020&#x2F;09&#x2F;28 00:00:00,3960</span><br><span class="line">k3sを知る、動かす、感じる,Infrastructure,k3s|CNCF|CloudNative|Kubernetes,2020&#x2F;09&#x2F;29 00:00:00,8416</span><br><span class="line">Policy as Code を実現する Open Policy Agent に憧れて。ポリシーコードでAPI仕様をLintする,Programming,CNCF|CloudNative|OpenPolicyAgent|Swagger|OpenAPI|Go,2020&#x2F;09&#x2F;30 00:00:00,18852</span><br><span class="line">Linkerdで始めるサービスメッシュ,Infrastructure,Linkerd|Kubernetes|CNCF|ServiceMesh|CloudNative,2020&#x2F;10&#x2F;01 00:00:00,12512</span><br><span class="line">Buildpacksのビルダーをスクラッチから作ってみる,Infrastructure,CNCF|Buildpacks|Docker|Python|CloudNative|コンテナデプロイ,2020&#x2F;10&#x2F;02 00:00:00,25580</span><br><span class="line">TiKVに触れる,Programming,CloudNative|CNCF,2020&#x2F;10&#x2F;05 00:00:00,9066</span><br><span class="line">「Go on DockerスタイルでのバックエンドAPI構築」というテーマでGo Conference’20 in Autumn SENDAIに登壇しました,Programming,Go|Docker|登壇資料,2020&#x2F;10&#x2F;10 00:00:00,4799</span><br><span class="line">GoCon仙台で発表してきました,Programming,Go|登壇資料,2020&#x2F;10&#x2F;11 00:00:00,6332</span><br><span class="line">2020年秋にVue.jsのアプリケーションを作るなら、押さえておきたい5つのポイント,Programming,Vue.js|JavaScript|Frontend,2020&#x2F;10&#x2F;13 00:00:00,9129</span><br><span class="line">CEATEC 2020 ONLINE に参加します !!,Infrastructure,Conference|MachineLearning,2020&#x2F;10&#x2F;15 00:00:00,3342</span><br><span class="line">ProxyとDockerと新人社員と時々わたし,Infrastructure,プロキシ|Firewall|Docker|NW|DockerCompose,2020&#x2F;10&#x2F;20 00:00:00,25613</span><br><span class="line">CloudEndure Migration - 導入編,Infrastructure,AWS|移行ツール|CloudEndure|クラウドマイグレーション|クラウドリフト,2020&#x2F;10&#x2F;21 00:00:00,18803</span><br><span class="line">GoとAWS LambdaのためのMakefile,Programming,Go|AWS|Lambda|Makefile,2020&#x2F;10&#x2F;22 00:00:00,3946</span><br><span class="line">秋のブログ週間連載をはじめます,Programming,秋ブログ週間,2020&#x2F;10&#x2F;26 00:00:00,4478</span><br><span class="line">Vulsの歴史,Security,Vuls|秋ブログ週間,2020&#x2F;10&#x2F;27 00:00:00,16275</span><br><span class="line">読書の秋に読みたい、オライリー謎書籍10選,Culture,書籍|秋ブログ週間,2020&#x2F;10&#x2F;28 00:00:00,8143</span><br><span class="line">フューチャーにアルバイトで参画して一年半が経ったので一度振りかえる。,Culture,アルバイト|秋ブログ週間,2020&#x2F;10&#x2F;30 00:00:00,15213</span><br><span class="line">フューチャーでjobsバイト、競プロ入社を経験して,Culture,アルバイト|競技プログラミング|秋ブログ週間,2020&#x2F;11&#x2F;02 00:00:00,7760</span><br><span class="line">人工知能と神経科学,DataScience,人工知能|神経科学|深層学習|強化学習|秋ブログ週間,2020&#x2F;11&#x2F;04 00:00:00,13713</span><br><span class="line">イノベーションの捉え方,DataScience,イノベーション|統計|政府統計|秋ブログ週間,2020&#x2F;11&#x2F;05 00:00:00,19608</span><br><span class="line">OSSコミュニティへのフィードバック ,Programming,OSS|Java|秋ブログ週間|Tomcat,2020&#x2F;11&#x2F;06 00:00:00,11768</span><br><span class="line">フューチャーOSS推進タスクフォース始めます,Culture,OSS|TechBlog,2020&#x2F;11&#x2F;07 00:00:00,21232</span><br><span class="line">GoのWebアプリ開発でフラットパッケージにした話,Programming,秋ブログ週間|Go|設計,2020&#x2F;11&#x2F;09 00:00:00,19628</span><br><span class="line">Parcel 2.0 beta.1を試す,Programming,Parcel|TypeScript|Frontend,2020&#x2F;11&#x2F;11 00:00:00,8811</span><br><span class="line">GoでLambdaからLambdaを呼び出すときに気をつけたいポイント6選,Programming,AWS|Go|Lambda,2020&#x2F;11&#x2F;12 00:00:00,22990</span><br><span class="line">LocalStackに向けてTerraformを実行する,Infrastructure,LocalStack|AWS|Terraform|Docker|Go|DockerCompose,2020&#x2F;11&#x2F;13 00:00:00,15836</span><br><span class="line">Future Tech Cast をはじめました,Culture,TechBlog|TechCast,2020&#x2F;11&#x2F;16 00:00:00,10862</span><br><span class="line">Goのデバッグ環境 on VSCode,Programming,Go|デバッグ|VSCode,2020&#x2F;11&#x2F;17 00:00:00,8159</span><br><span class="line">AWS S3をIP制限付きのファイルダウンロードリンクにする,Infrastructure,AWS|S3,2020&#x2F;11&#x2F;18 00:00:00,6984</span><br><span class="line">PythonistaがGo言語に入門してみた,Programming,Python|Go|入門,2020&#x2F;11&#x2F;19 00:00:00,9587</span><br><span class="line">CloudEndure Migration - 実践編,Infrastructure,AWS|CloudEndure|移行ツール|クラウドマイグレーション|クラウドリフト,2020&#x2F;11&#x2F;20 00:00:00,27273</span><br><span class="line">Auth0の出版記念に行ってきました！,Programming,Auth0,2020&#x2F;11&#x2F;24 00:00:00,3174</span><br><span class="line">Qiita Advent Calendar 2020 に参加します,Culture,Qiita|AdventCalendar|AdventCalendar2020|TechBlog,2020&#x2F;11&#x2F;25 00:00:00,7236</span><br><span class="line">塗り絵の魚がすいすい泳ぐ？ ～子ども向けアトラクションを作ってみた～,IoT,RealSense|Processing,2020&#x2F;11&#x2F;26 00:00:00,6682</span><br><span class="line">数字で振り返るフューチャー技術ブログ（2020）,Culture,TechBlog,2020&#x2F;11&#x2F;27 00:00:00,16020</span><br><span class="line">DynamoDBのページング,Programming,DynamoDB|Go|AWS|ページング,2020&#x2F;11&#x2F;30 00:00:00,8065</span><br><span class="line">GoがApple Siliconにネイティブ対応したのでベンチマークをとってみました,Programming,Go,2020&#x2F;12&#x2F;03 00:00:00,8792</span><br><span class="line">AWSマネージドAirflow(MWAA)についてのFAQ,Programming,Airflow|AWS|Python|ジョブ設計,2020&#x2F;12&#x2F;06 00:00:00,9642</span><br><span class="line">バイオ情報学研究発表会で発表してきました,DataScience,機械学習|ワクチン|ヘルスケア|NLP|登壇資料,2020&#x2F;12&#x2F;08 00:00:00,2514</span><br><span class="line">Goでio.Readerをラップしてio.ReadSeekerを作る関数を作った &amp; プロパティベーステストで徹底的にテスト,Programming,Go|PICT|PBT,2020&#x2F;12&#x2F;11 00:00:00,14673</span><br><span class="line">2021年版Pythonの型ヒントの書き方 (for Python 3.9),Programming,Python,2020&#x2F;12&#x2F;23 00:00:00,17871</span><br><span class="line">Future Tech Night(第5弾：AWS＆DataPlatform MaaSビジネス編)を開催しました。,Programming,AWS|データレイク|勉強会|登壇レポート|開催レポート|TechNight,2020&#x2F;12&#x2F;28 00:00:00,6519</span><br><span class="line">Electronの使い方 Web開発の技術でデスクトップアプリを作ろう,Programming,Vue.js|Electron|クロスプラットフォーム,2021&#x2F;01&#x2F;07 00:00:00,26181</span><br><span class="line">自分の分身(3Dアバター)と自作ワールドを作ってみた,VR,Unity3D|VRoid|Unity|VR,2021&#x2F;01&#x2F;08 00:00:00,8218</span><br><span class="line">技術ブログの年間連載予定を発表します,Culture,TechBlog|インデックス,2021&#x2F;01&#x2F;12 00:00:00,6436</span><br><span class="line">コミュニティ運営をして思っていること,Culture,秋ブログ週間|OSS,2021&#x2F;01&#x2F;14 00:00:00,7204</span><br><span class="line">MLOpsことはじめ ～実験管理導入と学習基盤の構築～,DataScience,Kubernetes|MLOps|実験管理,2021&#x2F;01&#x2F;15 00:00:00,23002</span><br><span class="line">リモートワーク環境連載を始めます,Culture,リモートワーク|インデックス,2021&#x2F;01&#x2F;18 00:00:00,4548</span><br><span class="line">プラントエンジニアのオレオレリモートワーク環境,Culture,リモートワーク,2021&#x2F;01&#x2F;19 00:00:00,21531</span><br><span class="line">Androidのビルドバリアントをイチから理解する,Programming,Android|Gradle|BuildVariant,2021&#x2F;01&#x2F;20 00:00:00,28800</span><br><span class="line">DockerでRUNをまとめた方が良いとは限らない,Programming,Docker,2021&#x2F;01&#x2F;21 00:00:00,6501</span><br><span class="line">オレのDynamoDB Streamsが再着火しないわけがない,Programming,AWS|DynamoDB|DynamoDBStream|Go|トラブルシュート,2021&#x2F;01&#x2F;22 00:00:00,9263</span><br><span class="line">July Tech Festa 2021 winterで発表しました,Programming,AWS|Electron|登壇資料|Vue.js,2021&#x2F;01&#x2F;25 00:00:00,3262</span><br><span class="line">不調PCを介抱しつつWMIに思いを馳せる,Infrastructure,Windows|トラブルシュート,2021&#x2F;01&#x2F;27 00:00:00,24961</span><br><span class="line">Future Tech Night(第3弾：船舶IoT Platform編)を開催しました。,Culture,AWS|登壇資料|勉強会|開催レポート|登壇レポート|TechNight,2021&#x2F;01&#x2F;28 00:00:00,3865</span><br><span class="line">Azure Event Hubs の EventProcessorClientを利用した Consumer 実装,Programming,Azure|Java,2021&#x2F;01&#x2F;29 00:00:00,11417</span><br><span class="line">自宅仕事環境構築：指向性マイクの勧め,Programming,リモートワーク|指向性マイク,2021&#x2F;02&#x2F;01 00:00:00,16228</span><br><span class="line">システム障害対応の心構えと対応,Infrastructure,障害対応|初心者向け|入門,2021&#x2F;02&#x2F;02 00:00:00,10063</span><br><span class="line">WEB+DB PRESS Vol.120 最新Vue.js3入門を読んで,Programming,Vue.js|書評|書籍,2021&#x2F;02&#x2F;03 00:00:00,8684</span><br><span class="line">JP1ジョブ設計のポイント（初級）,Infrastructure,JP1|ジョブ設計|入門,2021&#x2F;02&#x2F;04 00:00:00,11543</span><br><span class="line">Good First Issue から OSS へコントリビュートしてみた,Programming,OSS|go-swagger,2021&#x2F;02&#x2F;05 00:00:00,11638</span><br><span class="line">Go 1.16連載が始まります,Programming,Go|Go1.16|インデックス,2021&#x2F;02&#x2F;07 00:00:00,11232</span><br><span class="line">Go 1.16からリリースされたgo:embedとは,Programming,Go|Go1.16,2021&#x2F;02&#x2F;08 00:00:00,12176</span><br><span class="line">Go 1.16のgo installについて,Programming,Go|Go1.16|Makefile,2021&#x2F;02&#x2F;09 00:00:00,10679</span><br><span class="line">Go1.16からのio&#x2F;ioutilパッケージ,Programming,Go|Go1.16,2021&#x2F;02&#x2F;10 00:00:00,13129</span><br><span class="line">Go 1.16のsignal.NotifyContext(),Programming,Go|Go1.16,2021&#x2F;02&#x2F;12 00:00:00,5807</span><br><span class="line">登が教えるSQL基礎,DB,SQL|SQL入門|入門,2021&#x2F;02&#x2F;15 00:00:00,7141</span><br><span class="line">Service Worker開発で起きた不具合を振り返る,Programming,JavaScript|Frontend|ServiceWorker,2021&#x2F;02&#x2F;16 00:00:00,6257</span><br><span class="line">プログラミング英会話 基礎,Infrastructure,英語|英会話|Java|入門,2021&#x2F;02&#x2F;17 00:00:00,13084</span><br><span class="line">AWS SDK for Goのリトライアルゴリズムを差し替える方法,Programming,Go|リトライ|AWS,2021&#x2F;02&#x2F;18 00:00:00,8898</span><br><span class="line">リモートネイティブ世代が考えるリモートワーク設備,Programming,リモートワーク,2021&#x2F;02&#x2F;19 00:00:00,9682</span><br><span class="line">Auth0で認証成功後に任意のWebページを表示させたい,認証認可,Auth0,2021&#x2F;02&#x2F;22 00:00:00,13715</span><br><span class="line">GCPで構築するサーバーレスデータレイク①,Infrastructure,GCP|データレイク|要件定義|設計,2021&#x2F;02&#x2F;24 00:00:00,17676</span><br><span class="line">DynamoDBから効率的に大量のデータを取得する方法,Infrastructure,AWS|DynamoDB|データ分析,2021&#x2F;02&#x2F;25 00:00:00,8050</span><br><span class="line">アクセシビリティ情報を使った壊れにくいE2Eテスト,Infrastructure,HTML|accessibility|Cypress|E2Eテスト|登壇資料,2021&#x2F;02&#x2F;26 00:00:00,18012</span><br><span class="line">【登壇しました】アレクサアプリを開発してみたら中々大変だった話,Programming,Node.js|Alexa|VUI,2021&#x2F;03&#x2F;01 00:00:00,2878</span><br><span class="line">Auth0でADをユーザDBにし、SalesforceとのSSOを確認する,認証認可,Auth0|Salesforce|SSO|ActiveDirectory,2021&#x2F;03&#x2F;02 00:00:00,8390</span><br><span class="line">Vis Networkで階層グラフを可視化する,Programming,vis.js|可視化|JavaScript,2021&#x2F;03&#x2F;03 00:00:00,13664</span><br><span class="line">mxGraphで階層グラフを可視化する,Programming,JavaScript|可視化|mxGraph,2021&#x2F;03&#x2F;04 00:00:00,21165</span><br><span class="line">インフラ入門ーインフラ要件定義編ー,Infrastructure,infrastructure|入門|要件定義,2021&#x2F;03&#x2F;05 00:00:00,20443</span><br><span class="line">Future Tech Night(第6弾：GCP x インフラ構築編)を開催しました,Infrastructure,GCP|勉強会|登壇レポート|TechNight|開催レポート,2021&#x2F;03&#x2F;06 00:00:00,4847</span><br><span class="line">GCP連載2021を始めます,Infrastructure,GCP|GCP連載|インデックス,2021&#x2F;03&#x2F;07 00:00:00,3722</span><br><span class="line">Auth0 Rulesのユニットテストを書きたい,認証認可,Auth0|JavaScript|ユニットテスト,2021&#x2F;03&#x2F;08 00:00:00,15160</span><br><span class="line">PubSubのメッセージスキーマを試してみる,Infrastructure,GCP|PubSub|スキーマ|Avro|Go|GCP連載,2021&#x2F;03&#x2F;09 00:00:00,15215</span><br><span class="line">本番データが急に欲しくなったアナタに贈る、CloudSQLのサーバレスエクスポートを試してみた,Infrastructure,GCP|GCP連載|CloudSQL|SQL,2021&#x2F;03&#x2F;10 00:00:00,8946</span><br><span class="line">PythonでCloud Operationsの機能を使ってみる,Programming,GCP|Python|OpenCensus|Monitoring|CloudOperations|GCP連載|CloudRun,2021&#x2F;03&#x2F;11 00:00:00,11162</span><br><span class="line">Text-to-Speechを試してみる,Infrastructure,GCP|GCP連載|TextToSpeech,2021&#x2F;03&#x2F;12 00:00:00,27046</span><br><span class="line">CloudNative Days Spring 2021 ONLINEに登壇しました,Infrastructure,登壇資料|OpenPolicyAgent|CNCF|CloudNative,2021&#x2F;03&#x2F;13 00:00:00,9282</span><br><span class="line">テックイベント2021＠フューチャーのご紹介,Infrastructure,勉強会|TechNight|インデックス,2021&#x2F;03&#x2F;14 00:00:00,7805</span><br><span class="line">Cloud Build を知ってみよう,CI&#x2F;CD,GCP|GCP連載|CloudBuild|GitOps|CI&#x2F;CD,2021&#x2F;03&#x2F;15 00:00:00,8571</span><br><span class="line">Firebaseで取得したログをBigQueryに連携してユーザー操作をトラッキングする,Infrastructure,GCP|GCP連載|Java|Firebase|GoogleAnalytics|BigQuery|Android,2021&#x2F;03&#x2F;16 00:00:00,14882</span><br><span class="line">Google Cloud BuildpacksとCloud Runで簡単コンテナアプリ開発,Programming,GCP|GCP連載|Buildpacks|CloudRun|Docker|コンテナデプロイ,2021&#x2F;03&#x2F;17 00:00:00,8189</span><br><span class="line">GKE Autopilotを触ってみた,Programming,Kubernetes|GKE|GCP|GCP連載,2021&#x2F;03&#x2F;18 00:00:00,18550</span><br><span class="line">Anthosの話についていくための最低限の知識をまとめてみた,Infrastructure,Anthos|Kubernetes|Istio|GCP|GCP連載,2021&#x2F;03&#x2F;19 00:00:00,10543</span><br><span class="line">CKA合格記,Programming,Kubernetes|CKA|合格記,2021&#x2F;03&#x2F;20 00:00:00,5068</span><br><span class="line">Migrate for Anthos を基礎から学ぶ,Infrastructure,GCP|GCP連載|クラウドマイグレーション|Anthos|コンテナ,2021&#x2F;03&#x2F;22 00:00:00,21236</span><br><span class="line">Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる,Infrastructure,Spanner|GCP|GCP連載|DockerCompose,2021&#x2F;03&#x2F;23 00:00:00,11768</span><br><span class="line">k6の使い方 シンプル&amp;軽快な負荷試験ツールを試す,Programming,JavaScript|k6|負荷試験ツール,2021&#x2F;03&#x2F;24 00:00:00,19945</span><br><span class="line">Transformerを用いた表現学習・推薦の実装,DataScience,TensorFlow|MachineLearning|Word2Vec|Transformer|riiid|推薦,2021&#x2F;03&#x2F;25 00:00:00,10553</span><br><span class="line">Terraform + Auth0 を調査してみる,Infrastructure,Auth0|Terraform,2021&#x2F;03&#x2F;26 00:00:00,25805</span><br></pre></td></tr></table></figure></div></details><ol><li><a href="#%E9%A0%85%E7%9B%AE%E3%81%AE%E6%8A%BD%E5%87%BA">項目の抽出</a></li><li><a href="#%E6%9C%80%E5%88%9D%E3%81%AE%E8%A1%8C%EF%BC%88CSV%E3%83%98%E3%83%83%E3%83%80%E8%A1%8C%EF%BC%89%E3%82%92%E6%8E%92%E9%99%A4">最初の行（CSVヘッダ行）を排除</a></li><li><a href="#%E3%81%82%E3%82%8B%E6%9D%A1%E4%BB%B6%E3%81%AE%E8%A1%8C%E3%81%A0%E3%81%91%E6%8A%BD%E5%87%BA">ある条件の行だけ抽出</a></li><li><a href="#%E8%A4%87%E6%95%B0%E3%81%AECSV%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%921%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%B5%90%E5%90%88%E3%81%99%E3%82%8B">複数のCSVファイルを1ファイル結合する</a></li><li><a href="#%E7%A9%BA%E8%A1%8C%E3%82%92%E9%99%A4%E3%81%8F">空行を除く</a></li><li><a href="#CSV%E9%A0%85%E7%9B%AE%E3%81%AE%E4%B8%AD%E3%81%AB%E5%8C%BA%E5%88%87%E3%82%8A%E6%96%87%E5%AD%97%E3%81%8C%E5%85%A5%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E5%A0%B4%E5%90%88">CSV項目の中に区切り文字が入っている場合</a></li><li><a href="#%E6%94%B9%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%90%AB%E3%82%80%E5%A0%B4%E5%90%88">改行コードを含む場合</a></li><li><a href="#0%E5%9F%8B%E3%82%81">0埋め</a></li></ol><h2 id="項目の抽出"><a href="#項目の抽出" class="headerlink" title="項目の抽出"></a>項目の抽出</h2><p>最初にCSVの1つ目と2つ目の項目を取得します。</p><figure class="highlight bash"><figcaption><span>項目の抽出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $1,$2&#125;&#x27;</span> posts.csv | head -n 3</span><br><span class="line">title category</span><br><span class="line">ごあいさつ Culture</span><br><span class="line">LT大会（前編） Culture</span><br></pre></td></tr></table></figure><p><code>-F</code>で区切り文字を指定、’{print $1,$2}’ の$1, $2は列番号の指定です。出力時の区切り文字ですが、何も指定しない場合は半角スペースで出力されます。出力後の区切り文字を指定したい場合は、OFS（Output Record Separator）というawk組み込みの変数で指定します。試しに出力区切りを<code>&lt;-------&gt;</code>にします。半角スペースから変わることが確認できます。<code>&lt;-------&gt;</code>を<code>,</code>にすれば出力もCSVにすることができます。</p><figure class="highlight sh"><figcaption><span>OFS指定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;OFS=&quot;&lt;-------&gt;&quot; &#123;print $1,$2&#125;&#x27;</span> posts.csv | head -n 3</span><br><span class="line">title&lt;-------&gt;category</span><br><span class="line">ごあいさつ&lt;-------&gt;Culture</span><br><span class="line">LT大会（前編）&lt;-------&gt;Culture</span><br></pre></td></tr></table></figure><p>出力項目に <code>$0</code> を指定した場合は全項目をの指定となります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> posts.csv | head -n 3</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">LT大会（前編）,Culture,LT,2016-02-17 09:09:12,9914</span><br></pre></td></tr></table></figure><p>項目の抽出ルールは大体抑えられたと思います。</p><h2 id="最初の行（CSVヘッダ行）を排除"><a href="#最初の行（CSVヘッダ行）を排除" class="headerlink" title="最初の行（CSVヘッダ行）を排除"></a>最初の行（CSVヘッダ行）を排除</h2><p>CSVを扱うと、最初のヘッダ行を無視して処理したい場合はがあります。その場合はNR（Number of Records）変数で条件指定します。<br><code>NR != 1</code> で1行目以外を出力する条件を追加となります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;NR!=1 &#123;print $0&#125;&#x27;</span> posts.csv | head -n 3</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">LT大会（前編）,Culture,LT,2016-02-17 09:09:12,9914</span><br><span class="line">LT大会（後編）,Culture,LT|登壇資料,2016-02-18 11:31:15,13214</span><br></pre></td></tr></table></figure><p>無事CSVヘッダ行を飛ばすことができました。</p><h2 id="ある条件の行だけ抽出"><a href="#ある条件の行だけ抽出" class="headerlink" title="ある条件の行だけ抽出"></a>ある条件の行だけ抽出</h2><p>入力CSVの<code>char_count</code>は記事の文字数です。50,000 文字以上の記事数を抽出します。<br>この場合は <code>$5&gt;50000</code> という条件を先頭に追加します。CSVヘッダを排除する <code>NR != 1</code> と <code>&amp;&amp;</code> で組み合わせると良いでしょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;NR!=1 &amp;&amp; $5&gt;50000 &#123;print $0&#125;&#x27;</span> posts.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">Amazon Redshiftの仕様を調べてみた,Infrastructure,AWS,2019/06/25 09:00:00,66162</span><br><span class="line">Goを学ぶときにつまずきやすいポイントFAQ,Programming,Go|コードレビュー|入門,2019/07/13 10:00,75169</span><br><span class="line">春の入門祭り 🌸 <span class="comment">#01 Goのテストに入門してみよう！,Programming,Go|初心者向け|テスト,2020/06/01 09:41:23,56000</span></span><br></pre></td></tr></table></figure><p>フューチャー技術ブログで、5万文字以上の記事が3つもあったことに驚きました。</p><h2 id="重複した行を抽出"><a href="#重複した行を抽出" class="headerlink" title="重複した行を抽出"></a>重複した行を抽出</h2><p>CSVである項目が重複していないかチェックしたいとします。</p><p>こういった重複行を含んだCSVファイルを作成します。</p><figure class="highlight plain"><figcaption><span>duplicated.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,Dummy,Dummy,2016-04-07 15:00:00,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>重複した行を抽出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;seen[$1]++&#x27;</span> duplicated.csv</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,Dummy,Dummy,2016-04-07 15:00:00,9050</span><br></pre></td></tr></table></figure><p>マジック感がありますが、<code>&#39;seen[$1]++&#39;</code>で重複された行（2つ目）が出力されました。</p><ul><li>seenは今回定義した連想配列（Map）で、そこに重複をチェックしたい項目を指定します。awkでは変数を初期化する必要が無いです</li><li>重複検査対象を、行全体とするのであれば<code>$0</code>です。タイトル項目をチェックするのであれば<code>$1</code>を指定します</li><li><code>++</code>はインクリメント演算子で、実行する度に<code>+1</code>されます。操作は変数アクセスされた後に行われます</li><li>awkでは、ゼロ以外の数値または空でない文字列値はtrueなので、2回目以降に登場した場合にのみtrueになり、重複行が出力されます。</li><li><code>&#123;print $0&#125;</code>部分はまるごと省略も可能。<code>awk -F&#39;,&#39; &#39;seen[$1]++ &#123;print $0&#125;&#39; duplicated.csv</code> と同義</li></ul><p>逆に重複行を排除（2つ目を削除）したい場合は、 <code>!</code>演算子を追加します。</p><figure class="highlight sh"><figcaption><span>重複行を削除</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;!seen[$1]++&#x27;</span> duplicated.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><p><code>sort</code> と <code>uniq</code> コマンドでも同様の操作は可能ですが、CSVのある項目細かに、条件を組み合わせてを指定する場合はawkも有効だと思います。（もちろん、ファイルをまず <code>sort</code>しなくても済むというメリットもあります）</p><h2 id="複数のCSVファイルを1ファイル結合する"><a href="#複数のCSVファイルを1ファイル結合する" class="headerlink" title="複数のCSVファイルを1ファイル結合する"></a>複数のCSVファイルを1ファイル結合する</h2><p>ファイルを単純に結合するのであれば、cat（もとの意味は連結するを意味するconcatenate）を利用することが多いと思いますが、各ファイルにCSVヘッダーがあると、2ファイル名以降のヘッダ行を削除する必要があり厄介です。</p><figure class="highlight sh"><figcaption><span>入力データ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat divide1.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line"></span><br><span class="line">$ cat divide2.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line"></span><br><span class="line">$ cat divide3.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><p>これもawkであればシンプルに処理できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;NR==1 || FNR!=1&#x27;</span> divide*.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><p>こちらも一見マジック感がありますが、内実は簡単です。 <code>NR</code>は Number of Recordsのことで、全体を通しての連番です。FNRはFile単位の連番です。<br><code>NR==1</code> が全体を通して1行目であるCSVヘッダ行のこと、<code>FNR=!1</code>が <strong>各ファイルの1行目であるCSVヘッダ以外</strong> であることを示します。<br><code>NR==1 || FNR!=1</code> のOR条件で、最初のCSVヘッダ1行目であるか、各ファイルの1行目でないの場合に出力するという条件になります。</p><p>複数ファイルをawkで扱うと、<code>FNR</code> は割と便利なので存在を覚えておくと便利かもしれません。</p><h1 id="空行を除く"><a href="#空行を除く" class="headerlink" title="空行を除く"></a>空行を除く</h1><p><code>grep -v &#39;^$&#39;</code> で瞬殺な気がしますが、awkでも空行を除外したい場合があります。理由は他の抽出処理と組み合わせる時に必要になることもあるためです。</p><p>こういった空行を含むデータを用意します。</p><figure class="highlight sh"><figcaption><span>emptyline.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat emptyline.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line"></span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;NF&#x27;</span> emptyline.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line">ごあいさつ,Culture,TechBlog,2016-02-16 09:02:14,691</span><br><span class="line">ハッカソン道中記~あの日入った温泉の効果を僕はまだ知らない~,IoT,IoT|DesignThinking|Hackathon,2016-04-06 14:37:37,9050</span><br><span class="line">第二回LT大会の報告,Culture,LT|登壇資料,2016-04-13 14:37:37,12247</span><br></pre></td></tr></table></figure><p><code>&#39;NF&#39;</code>だけで空行を排除できました</p><ul><li><code>NF</code>は今回初めて登場しましたが、Number of Fieldsの略です</li><li>空行の場合は、フィールド数が0なこと。またawkでは0の判定結果がfalseになります。</li><li><code>&#123;print $0&#125;</code> は省略可能なためです</li></ul><p>一応同じ意味のコマンドもあげておきます。</p><figure class="highlight sh"><figcaption><span>同義なコマンド</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;NF!=0&#x27;</span> emptyline.csv</span><br><span class="line">$ awk <span class="string">&#x27;NF!=0&#123;print $0&#125;&#x27;</span> emptyline.csv</span><br><span class="line">$ awk <span class="string">&#x27;$0!=&quot;&quot;&#x27;</span> emptyline.csv</span><br></pre></td></tr></table></figure><h1 id="CSV項目の中に区切り文字が入っている場合"><a href="#CSV項目の中に区切り文字が入っている場合" class="headerlink" title="CSV項目の中に区切り文字が入っている場合"></a>CSV項目の中に区切り文字が入っている場合</h1><p>CSVは項目の中に区切り文字を含んでいる（区切り文字がカンマの場合、項目中にカンマがある）場合、囲い文字（クォート）でラップするのがRFC 4180などで定義されています。awkでこういった項目中に区切り文字を含んでいる場合はどうすればよいでしょうか？</p><p>例えば、<a href="https://future-architect.github.io/articles/20200401/">Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた</a> という記事は、以下のようにタイトルの中身で分割されてしまいます。</p><figure class="highlight sh"><figcaption><span>カンマをタイトルに持つ行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> posts.csv | grep Vue.js最初の</span><br><span class="line"><span class="string">&quot;Vue.js最初の難関、「props down</span></span><br></pre></td></tr></table></figure><p>コレを回避するには組み込み変数のFPAT（Fields PATtern）を使います。</p><figure class="highlight sh"><figcaption><span>FPAT導入例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v FPAT=<span class="string">&#x27;([^,]+)|(\&quot;[^\&quot;]+\&quot;)&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> posts.csv | grep Vue.js最初の難</span><br><span class="line"><span class="string">&quot;Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>-v</code>はawkへの変数受け渡しようのオプションです。今回はFPATの変数を渡します</li><li><code>FPAT</code> はawk組み込み関数なので <code>-v</code> で書き換えると、項目分割に影響を与えることができます</li><li><code>([^,]+)|(\&quot;[^\&quot;]+\&quot;)</code>は正規表現で、 <code>[^,]+</code>でカンマを除くという意味。<code>(\&quot;[^\&quot;]+\&quot;)</code>でダブルクォートで囲まれていて内部にダブルクォートを含まないという意味です。 <code>|</code> でOR条件になります</li><li><code>FPAT</code>を渡す場合は、<code>-F</code> の区切り文字指定は不要です</li></ul><p>これで、項目中のカンマに対応することができました。ちなみに、RFC4180の仕様では、クォートで囲まれた場合で、項目の中身にクォートがある場合、二重クォートでエスケープ（<code>&quot;&quot;</code>）するというルールがあります。この場合はうまく動きません。</p><figure class="highlight sh"><figcaption><span>FPATでもうまく動かないケース</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat quote.csv</span><br><span class="line">title,category,tag,date,char_count</span><br><span class="line"><span class="string">&quot;テキスト処理 &quot;</span><span class="string">&quot;sed&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;awk&quot;</span><span class="string">&quot; の入門&quot;</span>,Test,Test,2021-03-28 09:02:14,691</span><br><span class="line"></span><br><span class="line">$ awk -v FPAT=<span class="string">&#x27;([^,]+)|(\&quot;[^\&quot;]+\&quot;)&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> quote.csv</span><br><span class="line">title</span><br><span class="line"><span class="string">&quot;テキスト処理 &quot;</span><span class="string">&quot;sed&quot;</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>正規表現でガンバることも可能かもしれませんが、この場合は次で説明するcsvkitなどの活用を考えたほうが良いかもしれません。</p><h1 id="改行コードを含む場合"><a href="#改行コードを含む場合" class="headerlink" title="改行コードを含む場合"></a>改行コードを含む場合</h1><p>先程説明した、FPATでも改行コードを含んでいる場合はうまく処理ができません。もし対応する必要がある場合は<a href="https://csvkit.readthedocs.io/en/latest/">csvkit</a>のようなコマンドをインストールするか、各言語のCSVパーサーを利用することを推奨します。</p><p>例えばGo言語だと標準でRFC 4180に対応したパッケージを用意してくれているので簡単に対応できます。</p><h1 id="0埋め"><a href="#0埋め" class="headerlink" title="0埋め"></a>0埋め</h1><p>awkでは、フォーマット付きの<code>printf</code>が利用できます。例えば3桁までの0埋めの場合は<code>%03d</code>を利用します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v FPAT=<span class="string">&#x27;([^,]+)|(\&quot;[^\&quot;]+\&quot;)&#x27;</span> <span class="string">&#x27;&#123;printf(&quot;%03d %s\n&quot;, NR, $1)&#125;&#x27;</span> posts.csv | head -n 3</span><br><span class="line">001 title</span><br><span class="line">002 ごあいさつ</span><br><span class="line">003 LT大会前編</span><br></pre></td></tr></table></figure><p>GNU AWKのフォーマット記述は<a href="https://www.gnu.org/software/gawk/manual/html_node/Format-Modifiers.html">こちら</a>を参考ください。</p><h1 id="csvqで良いのでは？"><a href="#csvqで良いのでは？" class="headerlink" title="csvqで良いのでは？"></a>csvqで良いのでは？</h1><p>CSVファイルに対しての高度な抽出条件や、集計処理に関してはCSVファイルに対してSQLを実行できる <code>csvq</code> を使うのも有効だと思います。</p><blockquote><p><a href="https://github.com/mithrandie/csvq">https://github.com/mithrandie/csvq</a></p></blockquote><p>例えば、文字数50,000を超える記事は以下のようにSQLに慣れた人なら一瞬で理解できる構文で取得可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ csvq <span class="string">&#x27;select title from posts where char_count &gt; 50000&#x27;</span></span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">|                       title                       |</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">| Amazon Redshiftの仕様を調べてみた                 |</span><br><span class="line">| Goを学ぶときにつまずきやすいポイントFAQ           |</span><br><span class="line">| 春の入門祭り 🌸 <span class="comment">#01 Goのテストに入門してみよう！  |</span></span><br><span class="line">+---------------------------------------------------+</span><br></pre></td></tr></table></figure><p>一方で、空行を含んだCSVファイルには脆弱な部分があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ csvq <span class="string">&#x27;select title from emptyline where char_count &gt; 50000&#x27;</span></span><br><span class="line">Empty RecordSet</span><br></pre></td></tr></table></figure><p>そのため、データ分析の前処理などにawkを活用すると良い使い分けになると思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>いざという時に覚えておくと便利なawkのTipsでした。awscliのawsコマンドと間違えちゃう人も安心です。</p><ul><li>awkは簡単な記述によって強力な結果を生み出すことができる</li><li>sedやgrepなどと合わせてawkを使えるようになると、あまり行儀が良くないCSVに対するデータクレンジングに便利</li><li>集計などの分析は必要に応じて<code>csvq</code>などと使い、awkは前処理に用いるなど使い分けが大事</li></ul><p>明日は中本光さんの<a href="/articles/20210331/">今さらながらfindパイセンについてまとめてみた</a>についてです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><p>同じようなテキスト処理であるgrepや、git grep について懇切丁寧に説明した記事です、すごいです。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200611/index.html" data-iframely-url="//cdn.iframe.ly/kvSOFUK?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG真野です。&lt;a href=&quot;/articles/20210321/&quot;&gt;シェルスクリプト連載&lt;/a&gt;の2日目</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
    <category term="CSV" scheme="https://future-architect.github.io/tags/CSV/"/>
    
    <category term="AWK" scheme="https://future-architect.github.io/tags/AWK/"/>
    
  </entry>
  
  <entry>
    <title>ShellCheckでシェルスクリプトの品質を高めよう</title>
    <link href="https://future-architect.github.io/articles/20210329/"/>
    <id>https://future-architect.github.io/articles/20210329/</id>
    <published>2021-03-28T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210329/eye-catch.webp" alt="eye-catch-shell"></p><blockquote><p><a href="https://pixabay.com/ja/users/hans-2/">Hans</a>による<a href="https://pixabay.com/ja/">Pixabay</a>からの画像</p></blockquote><p><a href="/articles/20210321/">シェルスクリプト連載</a>の第一弾です。</p><p>シェルスクリプトは強力かつ便利で、いろいろなところで使われています。ただ、自由度が高い一方で、ちょっとしたミスを犯しやすく、かつミスに気づきにくい、ということも多いです。また、ミスに気づいたときには大きな影響が及んでいる、ということもあるでしょう。</p><p>本記事では、シェルスクリプトの品質を高めるために <a href="https://github.com/koalaman/shellcheck">ShellCheck</a> というツールを使って、シェルスクリプトの品質や安全性を高めよう、という趣旨の記事です。</p><p><a href="https://github.com/koalaman/shellcheck"><img src="https://gh-card.dev/repos/koalaman/shellcheck.svg" alt="koalaman/shellcheck - GitHub"></a></p><h2 id="ShellCheck-を使うと何がうれしいの？"><a href="#ShellCheck-を使うと何がうれしいの？" class="headerlink" title="ShellCheck を使うと何がうれしいの？"></a><code>ShellCheck</code> を使うと何がうれしいの？</h2><p><code>ShellCheck</code> はシェルスクリプトのための静的解析ツールです。<code>ShellCheck</code> は以下を目標として作成されています。</p><ul><li>シェルスクリプト初心者が書いた、ハマりやすい構文上の問題を指摘する</li><li>シェルスクリプト中級者が書いた、直感に反する挙動を指摘する</li><li>シェルスクリプト上級者が書いた、将来的に問題になる可能性がある細かい点を指摘する</li></ul><p>ツールを実行すると、シェルスクリプトの実装を静的解析して、よくあるミスや不具合になる可能性がある点を指摘してくれます。 <code>ShellCheck</code> が指摘した点を予め修正することで、プルリクエストなどでの人によるレビューは、実現したい機能やロジックといった内容に焦点をあてることができるでしょう。なぜこのコードだとまずいのか？という根拠が <a href="https://github.com/koalaman/shellcheck/wiki">Wiki</a> に記載されている点も嬉しいポイントです。</p><p>シェルスクリプトを開発する上で、品質向上や生産性向上が見込めます。</p><h2 id="ShellCheck-の検知サンプル例"><a href="#ShellCheck-の検知サンプル例" class="headerlink" title="ShellCheck の検知サンプル例"></a><code>ShellCheck</code> の検知サンプル例</h2><p><code>ShellCheck</code> が検知するごく一部のサンプルを紹介します。</p><h3 id="クォートしていない変数"><a href="#クォートしていない変数" class="headerlink" title="クォートしていない変数"></a>クォートしていない変数</h3><p>例えばクォートしていない変数を検知して、指摘してくれます。</p><figure class="highlight sh"><figcaption><span>a.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ shellcheck a.sh</span><br><span class="line"></span><br><span class="line">In a.sh line 3:</span><br><span class="line">echo $1</span><br><span class="line">     ^-- SC2086: Double quote to prevent globbing and word splitting.</span><br></pre></td></tr></table></figure><p>正しい実装は以下のようにクォートすることです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="cd-の結果を確認しない"><a href="#cd-の結果を確認しない" class="headerlink" title="cd の結果を確認しない"></a><code>cd</code> の結果を確認しない</h3><p><code>cd</code> の戻り値をチェックせずに、後続のコマンドを実行する実装は意図しない挙動になる可能性があります。</p><p>例えば以下で、<code>work</code> ディレクトリが存在しない場合に <code>cd work</code> し、<code>rm -f *.txt</code> をするとしましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── b.sh</span><br><span class="line">└── important.txt</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>b.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> work</span><br><span class="line">rm -r ./*.txt</span><br></pre></td></tr></table></figure><p><code>b.sh</code> を実行したときに <code>work</code> ディレクトリへの <code>cd</code> が失敗したときに意図しないファイル(<code>important.txt</code>)が削除されてしまいます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;b.sh</span><br><span class="line">b.sh: 3: cd: can&#39;t cd to work</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">└── b.sh</span><br></pre></td></tr></table></figure><p><code>ShellCheck</code> は上記のような実装を指摘してくれます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ shellcheck b.sh</span><br><span class="line"></span><br><span class="line">In b.sh line 3:</span><br><span class="line">cd work</span><br><span class="line">^-- SC2164: Use &#39;cd ... || exit&#39; or &#39;cd ... || return&#39; in case cd fails.</span><br></pre></td></tr></table></figure><p>安全な実装は、<code>cd</code> コマンドの戻り値をチェックして、エラーがあった場合(<code>exit 0</code> 以外がリターンされた場合)は <code>exit</code> するなどといった方法や</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> work || <span class="built_in">exit</span></span><br><span class="line">rm -r ./*.txt</span><br></pre></td></tr></table></figure><p><code>set</code> オプションの <code>-e</code> を用いて、エラーが有った場合に終了して、後続の処理が実行されないようにする、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set -e</span><br><span class="line"></span><br><span class="line">cd work</span><br><span class="line">rm -r .&#x2F;*.txt</span><br></pre></td></tr></table></figure><p>などといった方法があります。</p><h3 id="空文字判定のミス"><a href="#空文字判定のミス" class="headerlink" title="空文字判定のミス"></a>空文字判定のミス</h3><p>変数の文字列が空文字ではないことを判定する場合に <code>test</code> コマンドの <code>-n</code> オプションを用いることができます。</p><p>ただし以下のスクリプトには実装ミスがあります、変数の文字列の内容に関わらず常に <code>true</code> になります。</p><figure class="highlight sh"><figcaption><span>c.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">foo=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="string">&quot;&#123;<span class="variable">$foo</span>&#125;&quot;</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;not zero length&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上記のようなよくある実装ミスも <code>ShellChell</code> で検知できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ shellcheck c.sh</span><br><span class="line"></span><br><span class="line">In c.sh line 5:</span><br><span class="line">if [[ -n &quot;&#123;$foo&#125;&quot; ]]</span><br><span class="line">          ^-- SC2157: Argument to -n is always true due to literal strings.</span><br></pre></td></tr></table></figure><p>正しくは</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">foo=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="string">&quot;<span class="variable">$&#123;foo&#125;</span>&quot;</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;not zero length&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>となります。</p><h2 id="ShellCheck-を使ってみよう"><a href="#ShellCheck-を使ってみよう" class="headerlink" title="ShellCheck を使ってみよう"></a><code>ShellCheck</code> を使ってみよう</h2><p><code>ShellCheck</code> は強力なシェルスクリプトの静的解析ツールです。2021/03/29現在、400以上ものパターンが登録されています。どのようなパターンがあるかは <a href="https://github.com/koalaman/shellcheck/wiki">Wiki</a> を見てみてください。よくあるミスを指摘し、どのように対応すればいいか出力されるコードから調べることができます。まだ <code>ShellCheck</code> を使ったことがない、という方はこれを機に一度導入してみてはいかがでしょうか。</p><p>明日は真野さんの<a href="/articles/20210329/">CSVと親しくなるAWK</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210329/eye-catch.webp&quot; alt=&quot;eye-catch-shell&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/hans-2/&quot;&gt;Hans</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Linter" scheme="https://future-architect.github.io/tags/Linter/"/>
    
    <category term="ShellScript" scheme="https://future-architect.github.io/tags/ShellScript/"/>
    
    <category term="シェルスクリプト連載" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>手軽な顔認証デバイスを使ってみよう</title>
    <link href="https://future-architect.github.io/articles/20210328/"/>
    <id>https://future-architect.github.io/articles/20210328/</id>
    <published>2021-03-27T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>SAIGの山本です。社内では、Edge AIやIoT関連のR&amp;Dや案件に関わっています。</p><p>そのRealSenseに、今月、顔認証専用デバイスが新たに追加されましたのでそちらの紹介をしたいと思います。</p><h1 id="Intel-RealSense"><a href="#Intel-RealSense" class="headerlink" title="Intel RealSense"></a>Intel RealSense</h1><p>まずは簡単にIntel RealSenseについて説明しておきます。</p><p>これはIntel社が販売している深度センサの総称になります。（<a href="https://www.intel.co.jp/content/www/jp/ja/architecture-and-technology/realsense-overview.html">公式サイトはこちら</a>）</p><p>ちなみに、社内イベントやお客様案件でも以前より検証・利用しているものになります。<br>（事例：<a href="https://future-architect.github.io/articles/20201126/">塗り絵の魚がすいすい泳ぐ？ ～子ども向けアトラクションを作ってみた～</a>🐟）</p><p>ステレオ深度カメラ方式(T200,SR300,D400)とLiDAR方式(L500シリーズ)という２つの深度計測の方式の製品ファミリーに分かれます。また、旧モデルシリーズとしてSR300があり、こちらは現在は販売されていません。T200シリーズはトラッキング用途,D400シリーズは深度カメラ用途です。</p><p><strong>RealSense LiDAR カメラ L515</strong><br><img src="/images/20210328/realsense_lidar_camera_l515.jpg"></p><p><strong>RealSense 深度カメラ D435</strong></p><p><img src="/images/20210328/realsense_shindo_camera_d435.jpg"></p><p>SDKもLinux,Windows,macOS,Android向けのものが<a href="https://github.com/IntelRealSense/librealsense/releases">Intelから配布されており</a>、現在はver.2.0系となります。ver.1.0系は全く異なるSDK(深度センサに直接関連する部分以外のAI的な内容も含まれていた)となるので、インターネット上の情報を参照する際には注意してください。</p><h1 id="Intel-RealSense-ID-Solution-F400-シリーズ"><a href="#Intel-RealSense-ID-Solution-F400-シリーズ" class="headerlink" title="Intel RealSense ID Solution F400 シリーズ"></a>Intel RealSense ID Solution F400 シリーズ</h1><p>顔認証に特化した製品になります。（<a href="https://www.intelrealsense.com/facial-authentication/">公式サイトはこちら</a>）<br>F455がそのままホスト機とUSBで接続できる開発者向け製品、F450が様々な機器に組み込むことができるモジュール製品です。<br>今回はF455を使用した内容となっています。ちなみに、価格は99USD(1万円台)です。</p><p>センサー部分は、</p><ul><li>カメラ(赤外線)</li><li>赤外線照射器</li><li>赤外線ドット投影器</li></ul><p>とその周辺回路で構成されており、<a href="https://time-space.kddi.com/ict-keywords/20180912/2436">iPhone/iPad Proの深度センサであるTrueDepthカメラ</a>と似たような構造となっております。</p><p>公式ページでは次の特徴があると説明されています。</p><ul><li>認識時間は1秒未満(他人受入率1/100万, 本人受入率99.76%, なりすまし受入率&lt;0.1%, 暗号化:AES-256)</li><li>すべての肌の色と色合いを確実に認証</li><li>暗闇から強い日光まで、屋内でも屋外でも機能</li><li>時間の経過に伴う変化に適応</li><li>カメラの高さ方向の有効範囲が大きく、様々なユーザ（子供から大人まで）をサポート</li></ul><p><strong>Intel RealSense ID Solution F455のパッケージ</strong><br><img src="/images/20210328/Intel_RealSense_ID_F455.jpg"></p><p><strong>Intel RealSense ID Solution F455 本体</strong><br><img src="/images/20210328/Intel_RealSense_ID_F455_2.jpg"></p><p><strong>他のRealSenseとのサイズ比較</strong><br><img src="/images/20210328/RealSense.jpg"></p><h1 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h1><p>RealSense ID Solutionは他のRealSense向けのSDKとは<a href="https://github.com/IntelRealSense/RealSenseID/releases">別にSDKが提供</a>されています。</p><p>なお、記事の内容は本記事執筆時点で最新版であるv0.13.0を用いた場合の内容です。</p><p>サポートされているOS・言語は次の通りです。</p><p>サポートOS</p><ul><li>Linux</li><li>Windows</li><li>ANdroid</li></ul><p>サポート言語</p><ul><li>C#(.NET)</li><li>C++</li><li>C</li><li>Java(Android)</li></ul><h1 id="主な機能"><a href="#主な機能" class="headerlink" title="主な機能"></a>主な機能</h1><p>このSDKでは主に次の機能が提供されます。</p><ul><li>顔情報の取得<ul><li>センサから得られた値から顔の特徴情報を取得します</li></ul></li><li>顔情報の管理<ul><li>顔の特徴情報の登録・削除・照合を行います</li></ul></li><li>プレビューの取得<ul><li>カメラで撮影された画像を取得します</li></ul></li></ul><p>なお、ユースケースに合わせて２つの動作モードが用意されています。</p><ul><li>デバイスモード<ul><li>顔情報やデバイスでの照合などをデバイスで行うモード</li><li>ネットワークに繋がらない、もしくは繋げたくない場合などに使用</li></ul></li><li>ホストモード<ul><li>顔情報をホストまたはサーバー上で管理するモード</li><li>複数のデバイスで同じ顔情報を利用したい場合などに使用</li></ul></li></ul><h1 id="サンプルアプリを使った認証テスト"><a href="#サンプルアプリを使った認証テスト" class="headerlink" title="サンプルアプリを使った認証テスト"></a>サンプルアプリを使った認証テスト</h1><p>実際にデバイスとサンプルアプリを使って顔認証のテストを試してみました。</p><p>結果は次の通りです。</p><ul><li>部屋を真っ暗にした場合<ul><li>部屋が明るい場合と同じように、認証されました</li><li>赤外線が照射されているため、他の光源は必要ないようです</li></ul></li><li>マスクを被った場合<ul><li>鼻まで被った状態だと、認証されませんでした</li><li>鼻を出した状態だと、認証されました<ul><li>口周辺は認証には使われていないが、鼻周辺は使われているようです</li><li>これは深度センサを内蔵しているiPhone/iPad Proと似たような挙動でした</li></ul></li></ul></li><li>帽子を被った場合<ul><li>目がカメラから隠れなければ、認証されました</li></ul></li><li>サングラスを被った場合<ul><li>黒い色によって目がカメラから隠れてしまったからか、認証されませんでした</li></ul></li><li>メガネを被った場合<ul><li>サングラスのように色が入っていないからなのか、認証されました</li></ul></li><li>自分の顔写真をスマホで表示した場合<ul><li>認証されませんでした</li></ul></li></ul><p>また、今回は検証できていませんが、３Dプリンタで印刷した顔面でも認識できないとのことです。<br>眼球での赤外線反射を生体認識として利用しているようです。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>精度もある程度担保され、比較的コストも低めで、（組込系を含む）ホスト機からの制御もシンプルに行えるので、<br>顔認証機能が必要となるシステムで利用してみてはいかがでしょうか？</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://www.intel.co.jp/content/www/jp/ja/architecture-and-technology/realsense-overview.html">Intel RealSense 公式サイト</a></li><li><a href="https://www.intelrealsense.com/facial-authentication/">Intel RealSense ID 公式ページ</a></li><li><a href="https://www.itmedia.co.jp/news/articles/2101/07/news141.html">2021年01月07日 ITmedia: Intel、エッジ処理の顔認証技術　深度センサー「RealSense」をベースに深層学習で高速処理</a></li><li><a href="https://time-space.kddi.com/ict-keywords/20180912/2436">2018/09/12 TIME&amp;SPACE: iPhone顔認証を実現する『TrueDepthカメラ』の仕組みと未来とは？</a></li></ul><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>本記事の内容は執筆者個人または所属会社が、紹介した製品の精度などを保証するものではなく、あくまでも個人的な感想となります</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;SAIGの山本です。社内では、Edge AIやIoT関連のR&amp;amp;Dや案件に関わっています。&lt;/p&gt;
&lt;p&gt;そのReal</summary>
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="RealSense" scheme="https://future-architect.github.io/tags/RealSense/"/>
    
    <category term="顔認証" scheme="https://future-architect.github.io/tags/%E9%A1%94%E8%AA%8D%E8%A8%BC/"/>
    
    <category term="EdgeAI" scheme="https://future-architect.github.io/tags/EdgeAI/"/>
    
  </entry>
  
  <entry>
    <title>議事録をサッと準備する</title>
    <link href="https://future-architect.github.io/articles/20210327/"/>
    <id>https://future-architect.github.io/articles/20210327/</id>
    <published>2021-03-26T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.664Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210327/Screen_Shot_2021-03-14_at_12.49.00.png"></p><h1 id="この記事の内容"><a href="#この記事の内容" class="headerlink" title="この記事の内容"></a>この記事の内容</h1><ul><li>GASにWebサーバを立て、エンドポイントを公開する</li><li>ユーザのform入力を受け取る</li><li>議事録を自動作成してSlackに投稿する</li></ul><h2 id="完成版コードはこちら"><a href="#完成版コードはこちら" class="headerlink" title="完成版コードはこちら"></a>完成版コードはこちら</h2><p><a href="https://github.com/r-ryu/gas2slack-memo">https://github.com/r-ryu/gas2slack-memo</a></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャーTIGグループのDXユニットの棚井龍之介です。</p><p>ミーティング（以下MTG）の度に議事録を準備するのが大変だったので、作業を簡易化するWebサービスをGASで作成しました。</p><p>WebサイトにアクセスしてMTG名を入力すれば、議事録の準備が完了します。</p><p><img src="/images/20210327/Screen_Shot_2020-11-08_at_19.02.46.png"><br>ページにアクセスして、MTG名を入力すると…</p><p>⬇️</p><p><img src="/images/20210327/Screen_Shot_2020-11-08_at_19.02.00.png"><br>SlackにGoogleドライブとGoogleドキュメント(議事録)のURLが投稿されます。</p><h2 id="議事録の準備"><a href="#議事録の準備" class="headerlink" title="議事録の準備"></a>議事録の準備</h2><p>リモートワークで出社しないのが当たり前となり、お客様とのMTGもオンラインが基本となりました。<br>オンラインで済む分、MTG開催のコストが大幅に低下して、MTGの数は増加したような気がします。</p><p>それにともない、議事録を準備する機会も増えました。</p><p>この準備作業、単純ですが割と面倒です。</p><p>私の所属するチームでは、おおよそ以下の作業をMTG前後に実施しています。</p><ul><li>資料を格納するGoogleドライブを新規作成</li><li>MTGに向けた議事録(Googleドキュメント)を新規作成</li><li>ドライブとドキュメントのURLを他メンバーに共有</li><li>ドキュメントにMTG名、日付、参加メンバーを記入</li><li>ヘッダー、フッターにページ番号やCopyrightを記入</li></ul><h3 id="面倒な定常作業-→-自動化"><a href="#面倒な定常作業-→-自動化" class="headerlink" title="面倒な定常作業 → 自動化"></a>面倒な定常作業 → 自動化</h3><p>これらの作業は面倒+予め決まっているので、GASで自動スクリプトを作成しました。</p><p>また、議事録の準備は私以外のPJメンバーも実施するため、「非エンジニアを含めて、誰にでもサッと使っていただける」ことを目指して設計しました。</p><p>本記事に沿ってGASを設定することにより、以下2つの操作のみで「MTG用ドライブの準備、必要事項が記載された議事録の準備、各URLをSlackで共有する」が完了します。</p><ol><li>議事録生成ページにアクセス</li><li>FormにMTG名を入力して作成ボタンをクリック</li></ol><p>また、本記事はwebフォーム入力という手動操作が含まれますが、トリガーも含めて完全自動化したい場合は以下記事をご参照ください。GoogleカレンダードリブンでGASを起動する方法が掲載されています。</p><ul><li><a href="https://qiita.com/RuyPKG/items/abf72dde739e52364bcf">新人でも、楽がしたい！ ～議事録の準備～</a></li></ul><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>GASコードを書き始める前に、以下の準備をお願いします</p><ul><li>議事録のテンプレート本体とそのid</li><li>アップロード先ドライブのid</li><li>Slackの Incoming WebHooks</li></ul><h3 id="議事録のテンプレート本体とid"><a href="#議事録のテンプレート本体とid" class="headerlink" title="議事録のテンプレート本体とid"></a>議事録のテンプレート本体とid</h3><p>本記事でGASがSlackに投稿する議事録は、予め用意した「テンプレートのドキュメント」をコピーしたものです。<br>まず初めに議事録テンプレートの作成をお願いします。</p><p>議事録にはお作法的に毎回記入される項目があると思いますので、テンプレートの充実度が、実運用での負荷軽減に直結します。</p><p>例えば、私が作成したテンプレートには以下項目を記入しています。</p><ul><li>会議名</li><li>日時</li><li>場所</li><li>社内外の関係者名全て</li><li>ヘッダーにConfidentialマーク</li><li>フッターにCopyrightとページ番号</li></ul><p>テンプレートのサンプル</p><img src="/images/20210327/memo.png" style="border:solid 1px #000000"><p>テンプレートにMTG関係者の名前全てを記入しておけば、実際に議事をとる場面では「いない人を削除する」だけで済みます。</p><p>こういった少しづつの工夫が生産性向上に繋がるため、まずはテンプレートを充実させて、いらない項目は議事を取りながら削除する方法がオススメです。</p><p>また、ドキュメントの <code>id(document)</code> はページURLの document/d と /edit の間にある文字列が対応します。<br>後の作業で利用するため、必要に応じてご確認お願いします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google documentのURLサンプル</span></span><br><span class="line">https://docs.google.com/document/d/9************Z/edit</span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">9************Z</span><br></pre></td></tr></table></figure><h3 id="アップロード先ドライブのid"><a href="#アップロード先ドライブのid" class="headerlink" title="アップロード先ドライブのid"></a>アップロード先ドライブのid</h3><p>議事録だけでなく、それを格納するドライブも自動生成します。</p><p>本記事では以下のGoogle Drive構成を想定しています。<br>月単位でフォルダを分け、その配下に日時+MTG名単位でフォルダを生成+議事録を格納します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┣ 2020年08月</span><br><span class="line">┣ 2020年09月</span><br><span class="line">┣ 2020年10月</span><br><span class="line">┃   ┣ 20201005_月次定例 ━ 20201005_月次定例_議事</span><br><span class="line">┃   ┗ 20201020_運用保守 ━ 20201020_運用保守_議事</span><br><span class="line">┗ 2020年11月</span><br><span class="line">    ┗ 20201105_月次定例 ━ 20201105_月次定例_議事</span><br></pre></td></tr></table></figure><p>このとき、月単位のフォルダが表示されている画面での、URLの folders/ 以下にある文字列が、アップロード先ドライブの <code>id(drive)</code> です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google driveのURLサンプル</span></span><br><span class="line">https://drive.google.com/drive/folders/6************Q</span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line">6************Q</span><br></pre></td></tr></table></figure><h3 id="Slackの-Incoming-WebHooks"><a href="#Slackの-Incoming-WebHooks" class="headerlink" title="Slackの Incoming WebHooks"></a>Slackの Incoming WebHooks</h3><p>Slackに外部システムからメッセージを投稿するため、<code>Incoming WebHooks</code> を用意します。<br>トークンは <a href="https://api.slack.com/">Slack API の Your Apps</a> から作成可能です。</p><h2 id="Webサーバの実装"><a href="#Webサーバの実装" class="headerlink" title="Webサーバの実装"></a>Webサーバの実装</h2><p>サーバ側スクリプトを実装します</p><ol><li>環境変数の設定</li><li>GET,POSTのハンドリング</li><li>HTMLテンプレートの作成</li><li>handlerの実装</li><li>Webサーバの公開</li></ol><h3 id="1-環境変数の設定"><a href="#1-環境変数の設定" class="headerlink" title="1.環境変数の設定"></a>1.環境変数の設定</h3><p>サーバのコードを実装します。</p><p>まずはGoogle App Scriptを新規に生成して、環境変数を設定しましょう。</p><p>環境変数は<br>File → Project Properties → Script Properties<br>で登録可能です。</p><table><thead><tr><th>Property</th><th>Value</th></tr></thead><tbody><tr><td>FOLDERID</td><td>“id(document)”</td></tr><tr><td>FILEID</td><td>“id(drive)”</td></tr><tr><td>POSTURL</td><td>“Incoming WebHooks”</td></tr></tbody></table><p>同時に、環境変数を取得する処理を追加します。</p><figure class="highlight js"><figcaption><span>Code.gs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> FOLDERID = PropertiesService.getScriptProperties().getProperty(<span class="string">&quot;FOLDERID&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> FILEID = PropertiesService.getScriptProperties().getProperty(<span class="string">&quot;FILEID&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> POSTURL = PropertiesService.getScriptProperties().getProperty(<span class="string">&quot;POSTURL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-GET-POSTのハンドリング"><a href="#2-GET-POSTのハンドリング" class="headerlink" title="2.GET,POSTのハンドリング"></a>2.GET,POSTのハンドリング</h3><p>GASのWebサーバは、GETリクエストの場合はdoGet(), POSTリクエストの場合はdoPost()が呼び出されます。</p><p>本記事では</p><ol><li>URLを踏んで(GETリクエストで)Webサーバにアクセス</li><li>Webサーバからformを取得</li><li>formをsubmitし、POSTリクエストでWebサーバにアクセス</li></ol><p>というフローのため、doGetとdoPostの両方を追記します。<br>一部、<code>Index</code> や <code>e.parameter.name</code> といった初出の部分は記事の後半で説明しますので、今の段階ではdoGetとdoPostでハンドリングできるんだな〜という感覚で問題ありません。</p><figure class="highlight js"><figcaption><span>Code.gs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doGet</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> HtmlService.createHtmlOutputFromFile(<span class="string">&quot;Index&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doPost</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = e.parameter.name;</span><br><span class="line">  <span class="keyword">var</span> mtg = handler(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&quot;完了ページ\n&quot;</span> + <span class="string">&quot;作成した議事録:&quot;</span> + mtg;</span><br><span class="line">  <span class="keyword">return</span> ContentService.createTextOutput(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-HTMLテンプレートの作成"><a href="#3-HTMLテンプレートの作成" class="headerlink" title="3.HTMLテンプレートの作成"></a>3.HTMLテンプレートの作成</h3><p>GASの画面から、HTMLテンプレートを作成します。</p><p>File → New → HTML file → “Index”を入力してOK<br>により、新たに <code>Index.html</code> が作成されます。</p><p>Index.htmlには、以下のhtml文を入力します。</p><figure class="highlight html"><figcaption><span>Index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ja&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_top&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>議事録生成フォーム<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>議事録作成フォーム<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return double()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>会議名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;例:月次定例&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;作成&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;リセット&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-handlerの実装"><a href="#4-handlerの実装" class="headerlink" title="4.handlerの実装"></a>4.handlerの実装</h3><p>formでPOSTリクエストを受けた後のハンドリングを実装します。<br>各処理の詳細は、コード内のコメント箇所を参照お願いします。</p><figure class="highlight js"><figcaption><span>Code.gs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 議事録テンプレートとフォルダ情報を取得する</span></span><br><span class="line">  <span class="keyword">var</span> topFolderPath = DriveApp.getFolderById(FOLDERID);</span><br><span class="line">  <span class="keyword">var</span> formatFilePath = DriveApp.getFileById(FILEID);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 現在時刻からファイル名を生成</span></span><br><span class="line">  date = nowDate();</span><br><span class="line">  <span class="keyword">var</span> yyyymmdd = date.year + date.month + date.day;</span><br><span class="line">  <span class="keyword">var</span> mtgname = yyyymmdd + <span class="string">&#x27;_&#x27;</span> + name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 「yyyy年mm月」フォルダを確認</span></span><br><span class="line">  <span class="keyword">var</span> monthFolder = prepareMonthFolder(topFolderPath, date.year, date.month);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 「yyyyddmm_(会議名)」 フォルダを新規作成する</span></span><br><span class="line">  <span class="keyword">var</span> dayFolder = monthFolder.createFolder(mtgname);</span><br><span class="line">  <span class="keyword">var</span> dayFolderUrl = dayFolder.getUrl();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 議事録テンプレートをコピーして、適切なフォルダに移動する</span></span><br><span class="line">  <span class="keyword">var</span> newFile = formatFilePath.makeCopy(mtgname, dayFolder);</span><br><span class="line">  <span class="keyword">var</span> newFileUrl = newFile.getUrl();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Slackに投稿</span></span><br><span class="line">  post2slack(mtgname, newFileUrl, dayFolderUrl);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mtgname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handler関数の複雑化を避けるために、3つの関数を作成しています。</p><ul><li>nowDate()</li><li>prepareMonthFolder(path, year, month)</li><li>post2slack(name, fileUrl, folderUrl)</li></ul><figure class="highlight js"><figcaption><span>Code.gs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nowDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> year = today.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> month = <span class="string">&#x27;&#x27;</span> + (today.getMonth() + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> day = <span class="string">&#x27;&#x27;</span> + today.getDate();</span><br><span class="line">  <span class="keyword">if</span> (month.length &lt; <span class="number">2</span>)</span><br><span class="line">    month = <span class="string">&#x27;0&#x27;</span> + month;</span><br><span class="line">  <span class="keyword">if</span> (day.length &lt; <span class="number">2</span>)</span><br><span class="line">    day = <span class="string">&#x27;0&#x27;</span> + day;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    year:year,</span><br><span class="line">    month:month,</span><br><span class="line">    day:day,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareMonthFolder</span>(<span class="params">path, year, month</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> yyyymm = year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> folders = DriveApp.getFolders();</span><br><span class="line">  <span class="keyword">var</span> monthFolderExist = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> monthFolder;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 「yyyy年mm月」のフォルダが存在しない場合は新規作成</span></span><br><span class="line">  <span class="keyword">while</span> (folders.hasNext()) &#123;</span><br><span class="line">    <span class="keyword">var</span> folder = folders.next();</span><br><span class="line">    <span class="keyword">if</span> (folder.getName() == yyyymm) &#123;</span><br><span class="line">      monthFolderExist = <span class="literal">true</span>;</span><br><span class="line">      monthFolder = folder;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!monthFolderExist) &#123;</span><br><span class="line">    monthFolder = path.createFolder(yyyymm);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> monthFolder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post2slack</span>(<span class="params">name, fileUrl, folderUrl</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Slackに投稿されるメッセージ文</span></span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&#x27;議事録を準備しました\n\n&#x27;</span> + <span class="string">&#x27;会議名:&#x27;</span> + name + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;議事:&#x27;</span> + fileUrl + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;フォルダ:&quot;</span> + folderUrl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> jsonData = &#123;</span><br><span class="line">    <span class="string">&#x27;text&#x27;</span>:message</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> payload = <span class="built_in">JSON</span>.stringify(jsonData);</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;contentType&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;payload&#x27;</span>:payload</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  UrlFetchApp.fetch(POSTURL, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上により、POSTリクエストのハンドリングは完了です。</p><h3 id="5-Webサーバの公開"><a href="#5-Webサーバの公開" class="headerlink" title="5.Webサーバの公開"></a>5.Webサーバの公開</h3><p>サーバ側コードの実装が完了したので、Webサーバのエンドポイントを公開します。</p><p>Publish → Deploy as web app… を入力し、以下項目の入力後 “Deploy” を選択します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Project version: new</span><br><span class="line">Execute the app as: me</span><br><span class="line">Who has access to the app: anyone with <span class="string">&quot;組織名&quot;</span> (会社内部のみでの利用を想定するため、anyone, even anonymous には設定しない)</span><br></pre></td></tr></table></figure><p>初回Deploy時には認証画面が表示されます。<br>その承認が完了すると、<code>Current web app URL</code> が表示されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Current web app URL:</span><br><span class="line">https://script.google.com/*****/macros/T**********U/<span class="built_in">exec</span></span><br></pre></td></tr></table></figure><p>このURLがWebサーバのエンドポイントです。<br>データを受け渡しするために、Index.htmlのformへ追加します。</p><figure class="highlight html"><figcaption><span>Index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">↓</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://script.google.com/*****/macros/T**********U/exec&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上で、Webサーバの公開は完了です。</p><p>エンドポイントのURLをブラウザに打ち込むことで、議事録準備のフォーム画面が表示されます。<br>MTG名を入力すれば、GASが裏で動いて、Slackに議事が投稿されます。</p><h2 id="より使いやすくするために"><a href="#より使いやすくするために" class="headerlink" title="より使いやすくするために"></a>より使いやすくするために</h2><p>本システムはURLへのアクセスをトリガーとして処理が開始されます。<br>「早く議事を用意したいのに、議事準備のURLってなんだっけ？」となっては自動化した旨味がありません。</p><p>Slackの <a href="https://my.slack.com/customize/slackbot">ワークスペースのカスタマイズ</a> で、指定のURLを返してくれるように Slackbot を設定すればサッとURLを取得できます</p><p>（<code>(PJ名)+memo</code> の文字列に反応して、SlackbotがURLを投稿してくれるように設定）<br><img src="/images/20210327/Screen_Shot_2020-10-31_at_19.40.55.png"></p><p>これで</p><ul><li>必要になったらパッとURLを取得して</li><li>会議名を入力して</li><li>GASが頑張っているのを待つ</li></ul><p>だけで、議事録の用意が完了します。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、GASでWebサーバを公開して、議事録の準備をほぼ自動化する方法をご紹介しました。<br>普段の業務を自動化することにより、作業忘れや作業ミスを減らしつつ、別の業務に集中する時間が得られます。</p><p>また、Webサービスとして公開することで自分以外のPJメンバーも利用できるため、初期構築に若干の手間がかかるとしても、結果的にはPJ全体の作業効率向上につながると思います。</p><p>「定常業務の自動化・簡易化」で得られる恩恵はかなり大きいので、議事録を毎回手動作成している方がいられたら、ぜひとも本記事の手法を利用してみてください。</p><p>完成版のコード全文はこちらです。<br><a href="https://github.com/r-ryu/gas2slack-memo">https://github.com/r-ryu/gas2slack-memo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210327/Screen_Shot_2021-03-14_at_12.49.00.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;この記事の内容&quot;&gt;&lt;a href=&quot;#この記事の内容&quot; class=&quot;headerlink&quot; title=&quot;この記</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Slack" scheme="https://future-architect.github.io/tags/Slack/"/>
    
    <category term="GAS" scheme="https://future-architect.github.io/tags/GAS/"/>
    
    <category term="HTML5" scheme="https://future-architect.github.io/tags/HTML5/"/>
    
    <category term="議事録" scheme="https://future-architect.github.io/tags/%E8%AD%B0%E4%BA%8B%E9%8C%B2/"/>
    
    <category term="ChatBot" scheme="https://future-architect.github.io/tags/ChatBot/"/>
    
  </entry>
  
  <entry>
    <title>Terraform + Auth0 を調査してみる</title>
    <link href="https://future-architect.github.io/articles/20210326/"/>
    <id>https://future-architect.github.io/articles/20210326/</id>
    <published>2021-03-25T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.647Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> アルバイトの小林です。</p><p>案件で認証プラットフォームである<a href="https://auth0.com/jp/">Auth0</a>を利用しています。</p><p>Auth0がHashiCorpとのパートナーシップを結び、TerraformでAuth0リソースの管理が可能となりました。</p><p><a href="https://auth0.com/blog/partners-with-hashicorp-terraform/">https://auth0.com/blog/partners-with-hashicorp-terraform/</a></p><p>今回はTerraformで既存のAuth0リソースを移行するという観点で調査を行いました。</p><h2 id="Auth0とは"><a href="#Auth0とは" class="headerlink" title="Auth0とは"></a>Auth0とは</h2><p><img src="/images/20210326/image.png"></p><p>Auth0の概要については<a href="https://future-architect.github.io/articles/20200122/">Auth0導入編</a>をご参照ください。他にも技術ブログには<a href="https://future-architect.github.io/tags/Auth0/">Auth0関連の記事</a>が沢山あります。</p><h2 id="Terraformとは"><a href="#Terraformとは" class="headerlink" title="Terraformとは"></a>Terraformとは</h2><p><img src="/images/20210326/image_2.png"></p><p>TerraformとはHashiCorpによって開発されたオープンソースのクラウド管理ツールです。</p><p>クラウド環境のインフラの構成をコードに落とし込むことで、Git管理が可能になり、さらに状態を定義することが可能になるため、状態との差分からクラウド環境のリソース変更部分の表示が可能になるため、設定ミスのリスクを低減が見込めます。</p><p>技術ブログでは<a href="https://future-architect.github.io/tags/Terraform/">Terrafom関連の記事</a>が沢山あるためそちらも合わせてご参照ください。</p><p>また、Terraform以外でAuth0のクラウドリソースをコードに落とし込むツールには<code>auth0-deploy-cli</code>が上げられます。</p><h2 id="Auth0-Deploy-CLI"><a href="#Auth0-Deploy-CLI" class="headerlink" title="Auth0 Deploy CLI"></a>Auth0 Deploy CLI</h2><p><a href="https://github.com/auth0/auth0-deploy-cli">https://github.com/auth0/auth0-deploy-cli</a></p><p>Auth0が出しているツールで、テナント構成をyamlに落とし込んだり、yamlに書かれたテナント構成を反映するなど、CI/CDを可能にします。</p><p>Auth0 Deploy CLIについては、TIG市川さんの<a href="https://future-architect.github.io/articles/20200702/">Auth0の設定をバージョン管理し、Auth0 Deploy CLIを利用してデプロイ環境を整える</a>をご参照ください。</p><p>Auth0 Deploy CLIには、<code>dry-run</code>がサポートされておらず<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>、<strong>実際に実行してみるまでテナント構成がどうなるのか分からない</strong>、さらに<strong>意図していない変更を検出出来ない</strong>といった課題があります。</p><h2 id="Auth0-Deploy-CLI-vs-Terraform"><a href="#Auth0-Deploy-CLI-vs-Terraform" class="headerlink" title="Auth0 Deploy CLI vs Terraform"></a>Auth0 Deploy CLI vs Terraform</h2><p>Auth0環境の構成をAuth0 Deploy CLIで行う場合とTerraformで行う場合について、それぞれの強みと弱みについて調査しました。</p><h4 id="Auth0-Deploy-CLIの強み"><a href="#Auth0-Deploy-CLIの強み" class="headerlink" title="Auth0 Deploy CLIの強み"></a>Auth0 Deploy CLIの強み</h4><ul><li>テナントの構成をまるっとエクスポートすることが出来ます。<ul><li>rules,hooksもディレクトリに区切ってファイルを作成してくれるなど、親切です。</li></ul></li><li>mappingが公式サポートされています。<ul><li><a href="https://github.com/auth0/auth0-deploy-cli/blob/master/examples/yaml/README.md#environment-variables-and-auth0_keyword_replace_mappings">auth0-deploy-cli/README.md:AUTH0_KEYWORD_REPLACE_MAPPINGS· auth0/auth0-deploy-cli</a></li><li>そのため単一のyamlファイルを複数の環境に転用させて、検証環境と本番環境の設定の同一化が比較的容易に実現出来ます。</li></ul></li></ul><h4 id="Auth0-Deploy-CLIの弱み"><a href="#Auth0-Deploy-CLIの弱み" class="headerlink" title="Auth0 Deploy CLIの弱み"></a>Auth0 Deploy CLIの弱み</h4><ul><li>Auth0専用のツールなのでこのツールの操作方法を独自で覚える必要があります。</li><li><code>dry-run</code>機能が無いため<strong>意図していない設定変更が生じうる</strong>可能性があります<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>。</li></ul><h4 id="Terraformの強み"><a href="#Terraformの強み" class="headerlink" title="Terraformの強み"></a>Terraformの強み</h4><ul><li>独自ツール無しでTerraformだけで済むため、いままでAWSなどでTerraformを使っている場合、学習コストほぼ0で利用出来ます。</li><li>Terraformには<code>plan</code>と呼ばれる現在の状態と変更後の状態の差分を表示させる、<code>dry-run</code>に該当する機能があります。</li><li>Terraform workspaceを利用することで同一のリソースブロックを複数環境で利用することが可能になります。これにより検証環境と本番環境の設定の同一化が比較的容易に実現出来ます。</li></ul><h4 id="Terraformの弱み"><a href="#Terraformの弱み" class="headerlink" title="Terraformの弱み"></a>Terraformの弱み</h4><ul><li>一括で全リソースをインポートする手段が無いためテナント設定が膨大の場合、Terraformで管理出来る状態に持っていくまでが大変です。<ul><li>terraformのimportをAuth0プロパイダで利用する際、IDの特定方法が複雑(<a href="#%E6%97%A2%E5%AD%98%E3%81%AEauth0%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92terraform%E3%81%AB%E7%A7%BB%E8%A1%8C%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E6%B5%81%E3%82%8C"><strong>後述</strong></a>)です。</li></ul></li></ul><p>今回、私の所属しているプロジェクトでは、<strong>他のクラウドリソースをTerraformで管理している</strong>こと、<br>Auth0の構成が複雑になっていることから、<code>plan</code>が非常に強力であり、<strong>作業ミスのリスクを大幅に減少出来る見込み</strong>のため、Terraformを採用することにしました。</p><h2 id="Terraformで管理すると"><a href="#Terraformで管理すると" class="headerlink" title="Terraformで管理すると"></a>Terraformで管理すると</h2><p>Terraformで管理出来る様になると以下の点で便利になります。</p><ul><li>環境毎の設定差異の検出が簡単に出来る。</li><li>Auth0のリソース更新時にdry-runが可能になり、意図していないリソースの変更や、リソースの更新忘れのリスクを軽減できる。</li><li>環境全体がコードに落ちるためGitなどのバージョン管理ツールで管理が出来る様になる。</li></ul><p>この記事では以下の2点について扱います。</p><ul><li>terraform importを利用して既存のAuth0リソースをTerraformに移行できるか</li><li>複数環境で設定を統一化出来るか</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>terraformのバージョンはv0.14.6を利用します。</li><li>プロパイダは<a href="https://github.com/alexkappa/terraform-provider-auth0">alexkappa/auth0</a>を利用します。<ul><li>バージョンはv0.17.1です。</li></ul></li><li>事前にAuth0のテナントのダッシュボードから、Management APIが利用可能なM2Mのアプリケーションを作成しておき、ClientIDとClientSecretを取得しておく必要があります。</li></ul><h3 id="準備手順"><a href="#準備手順" class="headerlink" title="準備手順"></a>準備手順</h3><p>作業ディレクトリにmain.tfを作成して以下の様に記載します。</p><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    auth0 = &#123;</span><br><span class="line">      <span class="built_in">source</span>  = <span class="string">&quot;alexkappa/auth0&quot;</span></span><br><span class="line">      version = <span class="string">&quot;0.17.1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">provider <span class="string">&quot;auth0&quot;</span> &#123;</span><br><span class="line">  domain        = <span class="string">&quot;Auth0テナントのドメイン&quot;</span></span><br><span class="line">  client_id     = <span class="string">&quot;事前に作成したM2MアプリケーションのClientID&quot;</span></span><br><span class="line">  client_secret = <span class="string">&quot;事前に作成したM2MアプリケーションのClientSecret&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>その後、<code>terraform init</code>をします。</p><p>以上で準備完了です。</p><h2 id="terraform-importを利用して既存のAuth0リソースをTerraformに移行できるか"><a href="#terraform-importを利用して既存のAuth0リソースをTerraformに移行できるか" class="headerlink" title="terraform importを利用して既存のAuth0リソースをTerraformに移行できるか"></a>terraform importを利用して既存のAuth0リソースをTerraformに移行できるか</h2><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p>一つだけtfstateを弄る必要があるが、<strong>可能</strong>です。</p><h3 id="既存のAuth0リソースをTerraformに移行する際の流れ"><a href="#既存のAuth0リソースをTerraformに移行する際の流れ" class="headerlink" title="既存のAuth0リソースをTerraformに移行する際の流れ"></a>既存のAuth0リソースをTerraformに移行する際の流れ</h3><p>まずは移行手順の全体像について記載します。</p><ul><li>空のリソース定義を作成する。</li><li>terraform import で既存のリソースをstateに取り込む</li><li><code>terraform state show</code>でstateに取り込んだ既存リソースのパラメータを確認し、先程作成した空のリソース定義に追加していく。</li><li><code>terraform plan</code>して差分が無くなればそのリソースの移行完了</li></ul><p>この手順を<strong>Auth0で管理出来る全リソースについて実行します</strong>。</p><p>Terraformで管理出来るリソースの一覧(リソースタイプ)は↓で定義されています。</p><p><a href="https://registry.terraform.io/providers/alexkappa/auth0/latest/docs">Docs overview | alexkappa/auth0 | Terraform Registry</a></p><p>かなりの作業量になるため何らかのツールがあるだろうと探してみたのですが、見つけられませんでした。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>加えてこの手順でAuth0のリソースをインポートするに当たって、ある事象でハマってしまいました。</p><h3 id="ハマったポイント-IDが無いリソースタイプがいくつかある。"><a href="#ハマったポイント-IDが無いリソースタイプがいくつかある。" class="headerlink" title="ハマったポイント: IDが無いリソースタイプがいくつかある。"></a>ハマったポイント: IDが無いリソースタイプがいくつかある。</h3><p>Terraformで定義されているimportコマンドの書式はこのようになっています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform import [options] ADDRESS ID</span><br></pre></td></tr></table></figure><details><summary>ADDRESSとは▼</summary><div><p><code>ADDRESS</code> はリソースアドレスの事であり、<code>&lt;given type&gt;.&lt;local name&gt;</code> の形式で表します。</p><p>例えば、</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;auth0_custom_domain&quot;</span> <span class="string">&quot;main_domain&quot;</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>の様なリソースブロックにおいて、</p><p><code>ADDRESS</code>は<code>auth0_custom_domain.main_domain</code>です。</p></div></details><br><p><code>ID</code>はそのリソースをインポートするための識別子です。例えば、Auth0 Custom Dmainのドメイン設定は<code>cd_&lt;random string&gt;</code>の形で割り振られています。</p><p>この<code>ID</code>ですが、<strong>リソースタイプによっては存在しません</strong>。例えば、テナント設定である、<a href="https://registry.terraform.io/providers/alexkappa/auth0/latest/docs/resources/tenant">auth0_tenant</a>にはIDが存在しません。この場合、どうすれば設定のインポートが出来るのか、悩んでいました。</p><p>結論としては、<strong>IDを適当に自分で決めればインポート出来ました</strong>。</p><h3 id="なぜ適当なIDで通るのか"><a href="#なぜ適当なIDで通るのか" class="headerlink" title="なぜ適当なIDで通るのか"></a>なぜ適当なIDで通るのか</h3><p><code>ID</code>は識別子です。Auth0 のテナント設定に着目すると、<strong>IDが無くとも設定が判別できます</strong>。</p><p>IDが振られているリソースタイプである、<code>auth0_role</code>のプロパイダのソースコード<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>とTerraform公式のimportの説明<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>を読むと、CLIから受け取ったIDが<code>d.ID()</code>に入っている事が分かります。</p><p>同様にIDが不明なリソースタイプである、<code>auth_tenant</code>のプロパイダのソースコード<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>を読むと、<code>auth0_role</code>では使われていた、<code>d.ID()</code>が使われていない事が分かります。そのため、こちらで適当なIDを入れても問題無いことが分かります。</p><h3 id="リソースタイプとIDの対応表"><a href="#リソースタイプとIDの対応表" class="headerlink" title="リソースタイプとIDの対応表"></a>リソースタイプとIDの対応表</h3><p>執筆当時プロパイダのドキュメントに、<strong>どのパラメータを使えばimportが出来るかの情報がほとんど載っていません</strong>。issueにはちらちら書かれていますが、テナント設定のimport方法について書いている人は見つけられませんでした。</p><p>そのためリソースタイプとID対応関係について表にまとめてみたので参考にお使い下さい。執筆当時で、この中の全リソースタイプについてimportが出来ている事を確認しています。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><p>また、<code>ID</code>の確認が必要なリソースタイプについては、IDが確認しやすい様にManagement APIのAPI Explorerの該当APIのURLを載せています。</p><p>IDの欄に<code>&quot;id&quot;</code>と書かれていた場合は<strong>APIを叩いた時のJSONレスポンスのキーが”id”の値</strong>を指します。<br><strong>自由</strong>と書かれていた場合は先述の理由により、自由に設定出来ます。</p><table><thead><tr><th>Resource Type</th><th>ID</th><th>URL</th><th>備考</th></tr></thead><tbody><tr><td>auth0_client</td><td>“client_id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Clients/get_clients">https://auth0.com/docs/api/management/v2#!/Clients/get_clients</a></td><td></td></tr><tr><td>auth0_client_grant</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Client_Grants/get_client_grants">https://auth0.com/docs/api/management/v2#!/Client_Grants/get_client_grants</a></td><td></td></tr><tr><td>auth0_connection</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Connections/get_connections">https://auth0.com/docs/api/management/v2#!/Connections/get_connections</a></td><td></td></tr><tr><td>auth0_custom_domain</td><td>“custom_domain_id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Custom_Domains/get_custom_domains">https://auth0.com/docs/api/management/v2#!/Custom_Domains/get_custom_domains</a></td><td>tfstateの修正が必要<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></td></tr><tr><td>auth0_email</td><td>自由</td><td></td><td></td></tr><tr><td>auth0_email_template</td><td>[verify_email,<br>verify_email_by_code,<br>reset_email,<br>welcome_email,<br>blocked_account,<br>stolen_credentials,<br>enrollment_email,<br>mfa_oob_code,<br>user_invitation] のどれか一つ</td><td></td><td>IDによって、インポートされる項目が異なる、<br>例えば`verify_email`ならば認証メールがインポートされる。</td></tr><tr><td>auth0_hook</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Hooks/get_hooks">https://auth0.com/docs/api/management/v2#!/Hooks/get_hooks</a></td><td></td></tr><tr><td>auth0_prompt</td><td>自由</td><td></td><td></td></tr><tr><td>auth0_resource_server</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Resource_Servers/get_resource_servers">https://auth0.com/docs/api/management/v2#!/Resource_Servers/get_resource_servers</a></td><td></td></tr><tr><td>auth0_role</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Roles/get_roles">https://auth0.com/docs/api/management/v2#!/Roles/get_roles</a></td><td></td></tr><tr><td>auth0_rule</td><td>“id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Rules/get_rules">https://auth0.com/docs/api/management/v2#!/Rules/get_rules</a></td><td></td></tr><tr><td>auth0_rule_config</td><td>“key”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Rules_Configs/get_rules_configs">https://auth0.com/docs/api/management/v2#!/Rules_Configs/get_rules_configs</a></td><td></td></tr><tr><td>auth0_tenant</td><td>自由</td><td></td><td></td></tr><tr><td>auth0_user</td><td>“user_id”</td><td><a href="https://auth0.com/docs/api/management/v2#!/Users/get_users">https://auth0.com/docs/api/management/v2#!/Users/get_users</a></td><td></td></tr></tbody></table><h2 id="複数環境で設定を統一化出来るか"><a href="#複数環境で設定を統一化出来るか" class="headerlink" title="複数環境で設定を統一化出来るか"></a>複数環境で設定を統一化出来るか</h2><p>複数テナントが推奨されているAuth0において、テナントの設定を統一化したいケースがあると思います。<br>その際は<code>terraform workspace</code>と呼ばれる機能を用いて一つのリソースブロックを複数の環境で共有することが可能になります。</p><p>dev環境とtest環境があったとして、この二つの環境で同一の設定にさせたい場合について考えます。</p><p>先程のmain.tfと同階層にvariables.tfを置きます。</p><figure class="highlight sh"><figcaption><span>variables.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  environments = &#123;</span><br><span class="line">    dev = &#123;</span><br><span class="line">      auth0_domain        = <span class="string">&quot;dev-example.auth0.com&quot;</span>,</span><br><span class="line">      auth0_client_id     = <span class="string">&quot;dev環境のM2MアプリケーションのClientID&quot;</span>,</span><br><span class="line">      auth0_client_secret = <span class="string">&quot;dev環境のM2MアプリケーションのClientSecret&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">test</span> = &#123;</span><br><span class="line">      auth0_domain        = <span class="string">&quot;test-example.auth0.com&quot;</span>,</span><br><span class="line">      auth0_client_id     = <span class="string">&quot;test環境のM2MアプリケーションのClientID&quot;</span>,</span><br><span class="line">      auth0_client_secret = <span class="string">&quot;test環境のM2MアプリケーションのClientSecret&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.tfのプロパイダ設定を以下の様に変えます。</p><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">&quot;auth0&quot;</span> &#123;</span><br><span class="line">  domain        = local.environments[terraform.workspace][<span class="string">&quot;auth0_domain&quot;</span>]</span><br><span class="line">  client_id     = local.environments[terraform.workspace][<span class="string">&quot;auth0_client_id&quot;</span>]</span><br><span class="line">  client_secret = local.environments[terraform.workspace][<span class="string">&quot;auth0_client_secret&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraformのworkspaceを追加しましょう。main.tfで以下のコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace new dev</span><br><span class="line">$ terraform workspace new <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>以下の様に表示されます(現在いるworkspaceに*が付きます。)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace list</span><br><span class="line">  default</span><br><span class="line">  dev</span><br><span class="line">* <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>今自分が入っているworkspaceは<code>terraform workspace list</code>で確認します。</p><p>移動したい場合は<code>terraform workspace [移動先のworkspace名]</code>です。</p><p>dev環境を正としたい場合は先程のリソースのimport手順をworkspaceがdevの状態で進めます。その後、workspaceをtestに変更してからリソースブロックを変更せずに<code>terraform import</code>を全リソースに対して行います。</p><p>最後に、<code>terraform plan</code>でdev環境とtest環境の設定の差分が表示されます。</p><h3 id="一部だけ設定を変えたい"><a href="#一部だけ設定を変えたい" class="headerlink" title="一部だけ設定を変えたい"></a>一部だけ設定を変えたい</h3><p>test環境の時だけ空のルールである<code>empty-rule.js</code>、その他の環境の時は<code>some-rule.js</code>を動かしたいケースについて考えてみます。</p><p>HCLの組み込み関数<code>file</code>と三項演算子により実現出来ます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;auth0_rule&quot;</span> <span class="string">&quot;some_rule&quot;</span> &#123;</span><br><span class="line">  name   = <span class="string">&quot;some_rule&quot;</span></span><br><span class="line">  script = terraform.workspace == <span class="string">&quot;test&quot;</span> ? file(<span class="string">&quot;./empty-rule.js&quot;</span>) : file(<span class="string">&quot;./some-rule.js&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraformの組み込み関数<code>replace</code>を使えば、同一のファイルを参照しつつ振る舞いを返る事が可能になります。</p><p>テナント環境毎に挙動が変わるRuleをTerraformで管理してみます。</p><p>初めに以下の様なスクリプトを保存し、</p><figure class="highlight js"><figcaption><span>set-env.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setEnv</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;http://example.com/env&quot;</span>] = <span class="string">&quot;###AUTH0_TENANT###&quot;</span>;</span><br><span class="line"></span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下の様にリソース定義を行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;auth0_rule&quot;</span> <span class="string">&quot;set_env&quot;</span> &#123;</span><br><span class="line">  name   = <span class="string">&quot;set_env&quot;</span></span><br><span class="line">  script = replace(file(<span class="string">&quot;./set-env.js&quot;</span>),<span class="string">&quot;###AUTH0_TENANT###&quot;</span>,terraform.workspace)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように書く事でdev環境では</p><figure class="highlight js"><figcaption><span>set-env.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setEnv</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;http://example.com/env&quot;</span>] = <span class="string">&quot;dev&quot;</span>;</span><br><span class="line"></span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>として、test環境では</p><figure class="highlight js"><figcaption><span>set-env.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setEnv</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;http://example.com/env&quot;</span>] = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>として環境毎に振る舞いを変える事が出来ました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はTerraform + Auth0の環境構築について、既存のAuth0環境の移行を観点として調査を行いました。</p><p>調査結果をまとめると、</p><ul><li>importの手順に一癖あるが、一応全リソースを移行出来る。</li><li>workspaceを用いて複数のテナントで環境を同一にしつつ、一部だけ環境毎に振る舞いを変えることが出来る。</li></ul><p>ことが分かりました。</p><p>既存のAuth0環境をTerraformに移行したい場合の考慮材料にして頂ければ幸いです。</p><p>ここまで読んで頂きありがとうございました。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>私事で恐縮ですが、2019年の2月からアルバイトとして働いてきたFutureを今日で退職します。</p><p>この2年を通してFutureで沢山の技術を学び、自身のスキルを大幅に向上させることが出来ました。</p><p>2年間本当にお世話になりました。ありがとうございました！</p><p><img src="/images/20210326/kobayashi.jpg"></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIG: Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。DXユニット: TIGの中にありデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">執筆中に<a href="https://github.com/GoogleCloudPlatform/terraformer">terraformer</a>と呼ばれる既存のインフラリソースをリソース定義(.tf)や状態(.tfstate)に落とし込むCLIツールは見つけたのですが、執筆当時はまだ対応リストに記載されていません。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">https://github.com/alexkappa/terraform-provider-auth0/blob/master/auth0/resource_auth0_role.go#L86</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">https://github.com/alexkappa/terraform-provider-auth0/blob/master/auth0/resource_auth0_tenant.go#L256</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">あくまで全リソースタイプについて確認しているため、リソースタイプのauth0_email_templateのIDは<code>verify_email</code>と<code>reset_email</code>のみ確認済みです。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">このリソースタイプはどうリソースブロックを編集しても<code>terraform plan</code>で差分を無くす事が出来ません。<code>verification_method</code>がManagement APIの仕様上importされないため、tfstate側がnullと設定されてしまうからです。スキーマ定義を見ると、<code>Required</code>と<code>ForceNew</code>が付いているためこのままではリソースの再生成が走ってしまいます。そのため、<code>.tfstate</code>,<code>.tf</code>の両方について<code>verification_method = &quot;txt&quot;</code>に強制的に変更することで<code>terraform plan</code>で差分を表示させない様に設定出来ます。この問題はプロパイダのリポジトリのissueでも言及されていました。 <a href="https://github.com/alexkappa/terraform-provider-auth0/issues/294">Importing auth0_custom_domain resource forces recreation · Issue #294 · alexkappa/terraform-provider-auth0</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.terraform.io/docs/extend/resources/import.html#importer-state-function">Resources - Import - Terraform by HashiCorp</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/auth0/auth0-deploy-cli/issues/70">Support Test Mode · Issue #70 · auth0/auth0-deploy-cli</a>issue自体は記載されています。</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">一応Auth0 Deploy CLIでは、意図していないリソースの破壊を防ぐために<code>AUTH0_ALLOW_DELETE</code>フラグが設定可能です。https://github.com/auth0/auth0-deploy-cli/blob/master/examples/yaml/README.md#config</span><a href="#fnref:9" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; アルバイトの小林です。&lt;/p&gt;
&lt;p&gt;案件で認証プラットフォームである&lt;a href=&quot;https://auth0.com/jp/&quot;</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
  </entry>
  
  <entry>
    <title>Transformerを用いた表現学習・推薦の実装</title>
    <link href="https://future-architect.github.io/articles/20210325/"/>
    <id>https://future-architect.github.io/articles/20210325/</id>
    <published>2021-03-24T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.627Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！SAIGの金子です。</p><p>普段はフューチャーのAIグループで開発を行っている他、<a href="https://www.kaggle.com/nadare">nadare</a>というハンドルネームでデータ分析コンペティションに参加しています。</p><p>自然言語処理でよく使われるWord2VecやTransformerをログデータやテーブルデータの予測・分析に活用するためのオレオレベースラインを紹介します。</p><h1 id="対象読者"><a href="#対象読者" class="headerlink" title="対象読者"></a>対象読者</h1><ul><li>既にWord2VecやTransformerについて知識があり、その上自身で改造を行いたい人</li><li>レコメンド・検索技術に興味のある人</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>昨今、ECサイトの閲覧・購入履歴の分析や<a href="/articles/20201208/">ワクチンの開発</a>といった自然言語以外の分野でも、それぞれの商品やアミノ酸を単語とみなして埋め込み表現を獲得するWord2VecやBERTのような自然言語処理由来の技術が活用されています。</p><p>これらの分析には<a href="https://radimrehurek.com/gensim/">gensim</a>のようなよく整備されたライブラリが活用されますが、それらは自然言語処理を対象に作られているため以下のようにデータの特徴をつかみきれないことがあります。</p><ul><li>各トークンのidしか与えられないため、トークンに結びついた情報を考慮できない<ul><li>例: 商品の購入・閲覧履歴について、商品のカテゴリ情報や購入時のセール情報、レビューや閲覧時間のようなユーザーからのフィードバックを入れられない</li></ul></li><li>BERTを用いようとした場合、自然言語と異なりトークン間の双方向の順序情報を考慮する必要のないケースがある<ul><li>例: 実店舗のレシートを分析する際、商品の順番は店員のスキャンした順番以上の情報を持たない</li></ul></li><li>Word2Vecを用いようとした場合、各トークン同士の相互作用を考慮できない。</li></ul><p>そこで、テーブルデータの為にWord2VecとBERTの中間くらいの拡張性の高いベースラインを作成しました。コードはTensorFlowで実装していて、Kaggleのriiidコンペのデータをもとにnotebookで用意しているため、誰でも簡単に追実験が可能です。</p><h1 id="riiidコンペについて"><a href="#riiidコンペについて" class="headerlink" title="riiidコンペについて"></a>riiidコンペについて</h1><p>riiidコンペはTOEICの問題集のアプリを使うユーザーが過去に解いた問題から、次に解く問題についての正解率を予測するコンペです。問題は13000問、ユーザーは40万人分のデータがあり、それぞれ問題とユーザーについて適切に特徴量を作成する必要がありました。このコンペではWord2VecやTransformerを用いてそれぞれのIDについての埋め込み表現を学習する解法が多く存在しました。</p><p>今回のコードは<a href="https://www.kaggle.com/nadare/32nd-transformer-dcn-v2-model">その時の私のモデル</a>をブラッシュアップしたものになります。</p><h1 id="事前学習タスクについて"><a href="#事前学習タスクについて" class="headerlink" title="事前学習タスクについて"></a>事前学習タスクについて</h1><p>今回はこのriiidコンペのデータから教師無しでユーザーや問題の特徴を作成するために次のようなタスクを設定しました。</p><ul><li>ユーザーが過去に解いたN問の情報から、次に解く問題のidを予測する。</li></ul><p>これはレコメンドのタスクであるため、過去にアドベントカレンダーで紹介した<a href="https://qiita.com/nadare/items/aeb242da85352ba7dee3">TensorFlow Recommenders</a>の実装を参考にしてモデルを構築しました。</p><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p><a href="https://www.kaggle.com/nadare/recommender-with-transformer-for-embedding">recommender with transformer for embedding</a></p><h1 id="コード解説"><a href="#コード解説" class="headerlink" title="コード解説"></a>コード解説</h1><h2 id="モデル概要"><a href="#モデル概要" class="headerlink" title="モデル概要"></a>モデル概要</h2><p>TensorFlow Recommendersのretrievalタスクを参考に、ユーザーの履歴から作成したクエリベクトル(X)と問題の情報から作成したアイテムベクトル(y)の内積によって両者の親和性を表現するモデルを作成しました。</p><p>訓練時はバッチサイズNに対してNxNの対角行列の正解ラベルを作成し、同じレコードから作成されたクエリとアイテムの組み合わせを1、それ以外を0としてcategorical crossentropyを最小化します。(正例:負例=1:N-1になるようネガティブサンプリングをしているという見方もできます。)予測時は推薦対象のアイテムベクトルを全て事前計算しておき、クエリベクトルとアイテムベクトルの内積を全計算して推薦対象のアイテムをリランキングします。</p><h2 id="前処理"><a href="#前処理" class="headerlink" title="前処理"></a>前処理</h2><p>ユーザーがどの問題を解いてどの回答をしたかを配列で管理するための処理をしています。</p><p>content_idが問題番号に対応していて、それぞれ最大で4つの選択肢を持つため、<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="41.772ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 18463.4 776" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-2-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path><path id="MJX-2-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-2-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-2-TEX-N-5F" d="M0 -62V-25H499V-62H0Z"></path><path id="MJX-2-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-2-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-2-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-2-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-2-TEX-I-1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-2-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-2-TEX-I-1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g><g data-mml-node="mi" transform="translate(433, 0)"><use xlink:href="#MJX-2-TEX-I-210E"></use></g><g data-mml-node="mi" transform="translate(1009, 0)"><use xlink:href="#MJX-2-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1494, 0)"><use xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(1839, 0)"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g><g data-mml-node="mi" transform="translate(2272, 0)"><use xlink:href="#MJX-2-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(2738, 0)"><use xlink:href="#MJX-2-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(3238, 0)"><use xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(3583, 0)"><use xlink:href="#MJX-2-TEX-I-1D451"></use></g><g data-mml-node="mo" transform="translate(4380.8, 0)"><use xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(5436.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g><g data-mml-node="mi" transform="translate(5869.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(6354.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(6954.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(7315.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(7781.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(8381.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(8742.6, 0)"><use xlink:href="#MJX-2-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(9242.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(9587.6, 0)"><use xlink:href="#MJX-2-TEX-I-1D451"></use></g><g data-mml-node="mo" transform="translate(10329.8, 0)"><use xlink:href="#MJX-2-TEX-N-2217"></use></g><g data-mml-node="mn" transform="translate(11052, 0)"><use xlink:href="#MJX-2-TEX-N-34"></use></g><g data-mml-node="mo" transform="translate(11774.2, 0)"><use xlink:href="#MJX-2-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(12774.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D462"></use></g><g data-mml-node="mi" transform="translate(13346.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(13815.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(14281.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D45F"></use></g><g data-mml-node="mi" transform="translate(14732.4, 0)"><use xlink:href="#MJX-2-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(15232.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(15761.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(16361.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(16830.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D464"></use></g><g data-mml-node="mi" transform="translate(17546.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(18012.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D45F"></use></g></g></g></svg></mjx-container>でユーザーの回答履歴を保存しています。なお、今回のコードではユーザーがどの選択肢を選んだかの情報は考慮しません。</p><h2 id="Sampler"><a href="#Sampler" class="headerlink" title="Sampler"></a>Sampler</h2><p>訓練データを作成するクラスです。</p><p>今回はユーザーの履歴からランダムでこれまでに解いた問題(X)と次に解く問題(y)を返します。データはユーザーによってtrainとtestに分割し、trainではユーザーごとの履歴の長さに応じた比率で、testではすべてのユーザーから1回ずつサンプリングして学習・評価を行います。</p><h2 id="Tokenizer"><a href="#Tokenizer" class="headerlink" title="Tokenizer"></a>Tokenizer</h2><p>受け取ったchoice_idを指定の次元のembeddingに変換するクラスです。</p><p>今回の例では問題のidしか入れていませんが、このTokenizerの部分を作りこむことで様々なコンテキストを入れることができます。</p><h2 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h2><p>self-attentionを行うクラスです。</p><p>入力に対しlstmとself-attentionを交互に繰り返します。このself-attentionを計算する際に、自身と過去の情報を参照しないようにmaskを作っています。また、今回はqueryはノルムで正規化、keyとvalueは恒等関数で変換しています。</p><h2 id="TopModel"><a href="#TopModel" class="headerlink" title="TopModel"></a>TopModel</h2><p>今回の次に解く問題を予測するタスクの為のクラスです。</p><p>この部分を分離しておくことで、今回学習させた重みをTopModelの部分を挿げ替えることで転移学習・フ.0ァインチューニングに用いることができます。</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>上記のtokenizer, Encoder, TopModelをまとめるためのクラスです。</p><p>ここにまとめておくことで、学習時にapply_gradientが楽にできるようになります。また、今回はbatch sizeをN倍すると予測の出力が<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="3.045ex" height="2ex" role="img" focusable="false" viewBox="0 -883.9 1345.8 883.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-2-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D441"></use></g><g data-mml-node="mn" transform="translate(942.3, 413) scale(0.707)"><use xlink:href="#MJX-2-TEX-N-32"></use></g></g></g></g></svg></mjx-container>倍になってしまうことに対応するため、n_splitという変数を設定しています。</p><h1 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h1><h2 id="事前学習"><a href="#事前学習" class="headerlink" title="事前学習"></a>事前学習</h2><p>データをユーザーのIDによって訓練:テスト=9:1に分けて学習した際のcategorical crossentropyが以下の通りです。<br>Tesla T4インスタンスで128epochの学習に1hかかりました。</p><p><img src="/images/20210325/results___22_1.png"></p><p>次に解く問題について予測しその問題が何番目に出現したかについて計測したところ、64epoch目では訓練中に存在しないユーザーに対し13000問の問題からおおよそ700番目くらいの精度で推薦することができました。</p><p><img src="/images/20210325/results___23_1.png"></p><p>得られたembeddingの可視化です。まずは問題のベクトルの可視化ですが、umapで次元圧縮し可視化したところTOEICのpartごとに綺麗に分離していることが分かります。</p><p>notebookには適当に問題番号を選び、その問題を解くときのユーザーのembeddingをその問題に正解したかの二色で色付けしてplotしています。ただ、あまりうまく分離はできていないようです。</p><p>得られたembeddingの図については<a href="https://www.kaggle.com/nadare/recommender-with-transformer-for-embedding">notebook</a>を参考にしてください。</p><h2 id="ファインチューニング"><a href="#ファインチューニング" class="headerlink" title="ファインチューニング"></a>ファインチューニング</h2><p>得られたembeddingやmodelのweightを固定化した上で、実際にriiidコンペのタスクである次に与えられた問題に対して正解できたかを予測するタスクの学習を行いました。Word2Vecとの比較を行ったところ、今回のモデルではWord2Vecの方が事前学習した重みとしては良い結果を出しました。</p><h1 id="応用例"><a href="#応用例" class="headerlink" title="応用例"></a>応用例</h1><p>今回はユーザーの問題を解いた履歴という入手しやすいimplicitなデータを用いて推薦/事前学習を行いました。</p><p>今回のモデルではuser_idに関する情報を変数に用いていないため、訓練データに存在しないユーザーについても予測が可能です。また、今回は問題のidのみを考慮しましたが、カテゴリ、自然言語、画像情報などのデータの拡張を意識しているため、作りこめば更なる精度が見込めると思います。これらは推薦タスクにおけるユーザー/アイテムのコールドスタート問題に効果的に対応できます。</p><p>得られたembeddingやTransformerの重みは他のモデルの学習にファインチューニングして活用することができます。特に、Encoderの出力の平均をとったものはユーザーの履歴間の時系列や相互作用を考慮しているため、個々のembeddingの平均をとるよりも効果的になると予想できます。(今回はWord2Vecに負けてしまいましたが…)</p><p>今回のモデルは時系列情報を考慮した上でlstmやmaskを作成していましたが、順序情報が不要な場合はSamplerやEncoderを改造して余分な計算を省くことができます。実際に今回のベースラインをatmaCup#10のようなコンペで無理やり使った際は、コードの実装は二時間くらいで容易にできました。</p><ul><li><a href="https://www.guruguru.science/competitions/16/discussions/847ee743-9036-4c39-983b-2348ab20f39e/">principal_makerを埋め込みたい</a></li><li><a href="https://www.guruguru.science/competitions/16/discussions/1a472eb4-0f77-4857-8448-f7e38d072010/">pallete transformer</a></li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回のベースライン作成にはデータ分析コンペでの戦いやライバルの皆さんとの議論の経験が活きました。これからもデータ分析コンペなどを通じて技術を磨き、還元していければと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは！SAIGの金子です。&lt;/p&gt;
&lt;p&gt;普段はフューチャーのAIグループで開発を行っている他、&lt;a href=&quot;https://www.kaggle.com/nadare&quot;&gt;nadare&lt;/a&gt;というハンドルネームでデータ分析コンペティションに参加しています。&lt;/p</summary>
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
    <category term="TensorFlow" scheme="https://future-architect.github.io/tags/TensorFlow/"/>
    
    <category term="Word2Vec" scheme="https://future-architect.github.io/tags/Word2Vec/"/>
    
    <category term="Transformer" scheme="https://future-architect.github.io/tags/Transformer/"/>
    
    <category term="riiid" scheme="https://future-architect.github.io/tags/riiid/"/>
    
    <category term="推薦" scheme="https://future-architect.github.io/tags/%E6%8E%A8%E8%96%A6/"/>
    
  </entry>
  
  <entry>
    <title>k6の使い方 シンプル&amp;軽快な負荷試験ツールを試す</title>
    <link href="https://future-architect.github.io/articles/20210324/"/>
    <id>https://future-architect.github.io/articles/20210324/</id>
    <published>2021-03-23T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.611Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210324/crocodile-4918820_1920.jpg"></p><blockquote><p><a href="https://pixabay.com/ja/users/engin_akyurt-3656355/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4918820">Engin Akyurt</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4918820">Pixabay</a>からの画像</p></blockquote><p>TIGの伊藤真彦です。<br>業務で行っている開発がいよいよリリースを視野に入れたフェーズに入り、E2Eテストや各種性能試験を行いました。</p><h1 id="負荷試験とは"><a href="#負荷試験とは" class="headerlink" title="負荷試験とは"></a>負荷試験とは</h1><p>リリース前に行いたい試験の一つに負荷試験があります。</p><p>なるべく実際の運用に近い環境、データベースの状態を整え、実際に利用されるであろうユーザー数、もしくはそれ以上の同時接続にシステムが耐えられるかを試験します。特にソーシャルゲームの世界では想定を超えたアクセスによりリリース直後にサーバーがダウンしてしまう悲劇が発生しがちです。IT業界の外にいる人々にとっても覚えのある経験かもしれません。</p><p>そんな負荷試験ですが、実際に数百人、数万人規模の同時アクセスを人力で再現するには膨大な予算が必要です。そのため、一台のコンピュータで複数人からの同時アクセスを再現する負荷試験ツールが数多く存在します。</p><p>負荷試験ツールの定番と言えば<a href="https://jmeter.apache.org/">Apache Jmeter</a>があります。改めて確認してみたところ2021年をもって生誕20周年を記念する老舗プロダクトでした、おめでとうございます。祝った上で使わない、酷い記事になってしまいました…</p><p>Jmeterの使用は勿論検討したのですが、モダンな技術が大好きな性分であり、我らが<a href="/authors/%E6%BE%81%E5%B7%9D%E5%96%9C%E8%A6%8F/">渋川さん</a>もおススメしているため<a href="https://k6.io/">k6</a>を試してみました。<br><img src="/images/20210324/image.png"></p><h2 id="k6とは"><a href="#k6とは" class="headerlink" title="k6とは"></a>k6とは</h2><p>2016年頃から開発がスタートした負荷試験ツールです。<br>ワニのキャラクターが印象的です、かわいいですね。</p><p><img src="/images/20210324/image_2.png"></p><p>OSSとして公開されている事が特徴です、リポジトリは<a href="https://github.com/loadimpact/k6">こちら</a>です。</p><p>k6はGoで開発されています、これだけでも今時な印象を受けますね。<br><img src="/images/20210324/image_3.png"></p><p><a href="https://k6.io/about">公式サイトの説明</a>にある通り。<br>DevOpsの概念の成熟、現在のあり方に対応し、継続的な性能試験を行えるものである事を意識して設計されています。</p><blockquote><p>In tandem with the growth of DevOps, we started to notice gaps emerging in the market that we knew we could address. Users were no longer testing things one-off. APIs were becoming more prevalent in usage and required testing. Users wanted to test continuously. For many companies, testing was moving into the responsibility of developers.</p></blockquote><h2 id="k6のインストール"><a href="#k6のインストール" class="headerlink" title="k6のインストール"></a>k6のインストール</h2><p>k6のインストールはどのプラットフォームであっても簡単です。<br><a href="https://k6.io/docs/getting-started/installation">installation</a>に記載があります、書いてあるコマンドをコピペするだけで問題なく導入できました。</p><p>Windows向けにはインストーラが用意されています。<br><img src="/images/20210324/image_4.png"></p><p><code>brew</code>, <code>apt-get</code>, <code>yum</code>, <code>dokcer</code>での配布がサポートされています、バイナリ形式でダウンロードすることも可能です、インストールに苦戦することはほぼ無いと言っても良いと思います。</p><p>docker形式の配布形態を利用し、CIで性能試験を行い、既定の性能を下回ったら警告するような使い方もできるかもしれません。</p><h2 id="k6の使い方"><a href="#k6の使い方" class="headerlink" title="k6の使い方"></a>k6の使い方</h2><h4 id="基本的な利用方法"><a href="#基本的な利用方法" class="headerlink" title="基本的な利用方法"></a>基本的な利用方法</h4><p>k6は基本的に負荷試験のシナリオをJavaScriptで記載し、CLIで実行する利用形態で負荷試験を行います。</p><figure class="highlight js"><figcaption><span>k6_test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  http.get(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各種ユーティリティをimportし、負荷試験のシナリオを記載します。<br>特定のエンドポイント1か所にGETでアクセスするだけなら、上記のような4行程度の記載でテストを行うことが可能です。</p><p>今回は下記のシンプルなWebサーバーをローカル環境に立てて上記<code>k6_test.js</code>の動作を検証します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello k6&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>k6 run ファイル名</code> で実行することが可能です。<br>アスキーアートと試験結果が出力されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">k6 run .\k6_test.js</span><br><span class="line"></span><br><span class="line">          /\      |‾‾| /‾‾/   /‾‾/</span><br><span class="line">     /\  /  \     |  |/  /   /  /</span><br><span class="line">    /  \/    \    |     (   /   ‾‾\</span><br><span class="line">   /          \   |  |\  \ |  (‾)  |</span><br><span class="line">  / __________ \  |__| \__\ \_____/ .io</span><br><span class="line"></span><br><span class="line">  execution: <span class="built_in">local</span></span><br><span class="line">     script: .\k6_test.js</span><br><span class="line">     output: -</span><br><span class="line"></span><br><span class="line">  scenarios: (100.00%) 1 scenario, 1 max VUs, 10m30s max duration (incl. graceful stop):</span><br><span class="line">           * default: 1 iterations <span class="keyword">for</span> each of 1 VUs (maxDuration: 10m0s, gracefulStop: 30s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">running (00m00.0s), 0/1 VUs, 1 complete and 0 interrupted iterations</span><br><span class="line">default ✓ [======================================] 1 VUs  00m00.0s/10m0s  1/1 iters, 1 per VU</span><br><span class="line"></span><br><span class="line">     data_received..............: 124 B 7.8 kB/s</span><br><span class="line">     data_sent..................: 80 B  5.0 kB/s</span><br><span class="line">     http_req_blocked...........: avg=403.9µs min=403.9µs med=403.9µs max=403.9µs p(90)=403.9µs p(95)=403.9µs</span><br><span class="line">     http_req_connecting........: avg=403.9µs min=403.9µs med=403.9µs max=403.9µs p(90)=403.9µs p(95)=403.9µs</span><br><span class="line">     http_req_duration..........: avg=0s      min=0s      med=0s      max=0s      p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_receiving.........: avg=0s      min=0s      med=0s      max=0s      p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_sending...........: avg=0s      min=0s      med=0s      max=0s      p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_tls_handshaking...: avg=0s      min=0s      med=0s      max=0s      p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_waiting...........: avg=0s      min=0s      med=0s      max=0s      p(90)=0s      p(95)=0s</span><br><span class="line">     http_reqs..................: 1     63.019517/s</span><br><span class="line">     iteration_duration.........: avg=1.9ms   min=1.9ms   med=1.9ms   max=1.9ms   p(90)=1.9ms   p(95)=1.9ms</span><br><span class="line">     iterations.................: 1     63.019517/s</span><br></pre></td></tr></table></figure><h4 id="負荷を変更する"><a href="#負荷を変更する" class="headerlink" title="負荷を変更する"></a>負荷を変更する</h4><p><code>--vus</code>オプション<code>--duration</code>等のオプションで負荷の重さを変えることが可能です。<br>詳しくは<a href="https://k6.io/docs/using-k6/options">公式ドキュメント</a>を参照してください。</p><p>主に使うものは、下記のオプションです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--vus: 同時接続数</span><br><span class="line">--duration: 試験の実行時間</span><br><span class="line">--iteration: シナリオを繰り返す回数</span><br></pre></td></tr></table></figure><p><code>--vus</code>オプションだけではエラーが発生します、試験時間、もしくはシナリオの実行回数を指定する必要があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> k6 run .\k6_test.js --vus 10</span><br><span class="line"></span><br><span class="line">          /\      |‾‾| /‾‾/   /‾‾/</span><br><span class="line">     /\  /  \     |  |/  /   /  /</span><br><span class="line">    /  \/    \    |     (   /   ‾‾\</span><br><span class="line">   /          \   |  |\  \ |  (‾)  |</span><br><span class="line">  / __________ \  |__| \__\ \_____/ .io</span><br><span class="line"></span><br><span class="line">time=<span class="string">&quot;2021-03-07T16:33:00+09:00&quot;</span> level=warning msg=<span class="string">&quot;the `vus=10` option will be ignored, it only works in conjunction with `iterations`, `duration`, or `stages`&quot;</span></span><br><span class="line">  execution: <span class="built_in">local</span></span><br><span class="line">     script: .\k6_test.js</span><br><span class="line">     output: -</span><br><span class="line"></span><br><span class="line">  scenarios: (100.00%) 1 scenario, 1 max VUs, 10m30s max duration (incl. graceful stop):</span><br><span class="line">           * default: 1 iterations <span class="keyword">for</span> each of 1 VUs (maxDuration: 10m0s, gracefulStop: 30s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同時接続数10人で10秒間負荷をかけてみます。<br>既定の時間を超えるまでシナリオを繰り返します、レポートのiterationsを見ると999039回繰り返されたことがわかります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> k6 run .\k6_test.js --vus 10 --duration 10s</span><br><span class="line"></span><br><span class="line">          &#x2F;\      |‾‾| &#x2F;‾‾&#x2F;   &#x2F;‾‾&#x2F;</span><br><span class="line">     &#x2F;\  &#x2F;  \     |  |&#x2F;  &#x2F;   &#x2F;  &#x2F;</span><br><span class="line">    &#x2F;  \&#x2F;    \    |     (   &#x2F;   ‾‾\</span><br><span class="line">   &#x2F;          \   |  |\  \ |  (‾)  |</span><br><span class="line">  &#x2F; __________ \  |__| \__\ \_____&#x2F; .io</span><br><span class="line"></span><br><span class="line">  execution: local</span><br><span class="line">     script: .\k6_test.js</span><br><span class="line">     output: -</span><br><span class="line"></span><br><span class="line">  scenarios: (100.00%) 1 scenario, 10 max VUs, 40s max duration (incl. graceful stop):</span><br><span class="line">           * default: 10 looping VUs for 10s (gracefulStop: 30s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">running (10.0s), 00&#x2F;10 VUs, 999039 complete and 0 interrupted iterations</span><br><span class="line">default ✓ [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 10 VUs  10s0</span><br><span class="line"></span><br><span class="line">     data_received..............: 124 MB 12 MB&#x2F;s</span><br><span class="line">     data_sent..................: 80 MB  8.0 MB&#x2F;s</span><br><span class="line">     http_req_blocked...........: avg&#x3D;1.19µs  min&#x3D;0s med&#x3D;0s max&#x3D;1.49ms  p(90)&#x3D;0s      p(95)&#x3D;0s</span><br><span class="line">     http_req_connecting........: avg&#x3D;0s      min&#x3D;0s med&#x3D;0s max&#x3D;0s      p(90)&#x3D;0s      p(95)&#x3D;0s</span><br><span class="line">     http_req_duration..........: avg&#x3D;67.92µs min&#x3D;0s med&#x3D;0s max&#x3D;5.53ms  p(90)&#x3D;0s      p(95)&#x3D;513.9µs</span><br><span class="line">     http_req_receiving.........: avg&#x3D;14.58µs min&#x3D;0s med&#x3D;0s max&#x3D;1.99ms  p(90)&#x3D;0s      p(95)&#x3D;0s</span><br><span class="line">     http_req_sending...........: avg&#x3D;6.07µs  min&#x3D;0s med&#x3D;0s max&#x3D;1.49ms  p(90)&#x3D;0s      p(95)&#x3D;0s</span><br><span class="line">     http_req_tls_handshaking...: avg&#x3D;0s      min&#x3D;0s med&#x3D;0s max&#x3D;0s      p(90)&#x3D;0s      p(95)&#x3D;0s</span><br><span class="line">     http_req_waiting...........: avg&#x3D;47.26µs min&#x3D;0s med&#x3D;0s max&#x3D;5.49ms  p(90)&#x3D;0s      p(95)&#x3D;510.2µs</span><br><span class="line">     http_reqs..................: 999039 99705.733857&#x2F;s</span><br><span class="line">     iteration_duration.........: avg&#x3D;96.83µs min&#x3D;0s med&#x3D;0s max&#x3D;17.46ms p(90)&#x3D;511.3µs p(95)&#x3D;996.7µs</span><br><span class="line">     iterations.................: 999039 99705.733857&#x2F;s</span><br><span class="line">     vus........................: 10     min&#x3D;10 max&#x3D;10</span><br><span class="line">     vus_max....................: 10     min&#x3D;10 max&#x3D;10</span><br></pre></td></tr></table></figure><p>同時接続数100人で100回シナリオを繰り返す例です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">k6 run .\k6_test.js --vus 100 --iterations 100</span><br><span class="line"></span><br><span class="line">          /\      |‾‾| /‾‾/   /‾‾/</span><br><span class="line">     /\  /  \     |  |/  /   /  /</span><br><span class="line">    /  \/    \    |     (   /   ‾‾\</span><br><span class="line">   /          \   |  |\  \ |  (‾)  |</span><br><span class="line">  / __________ \  |__| \__\ \_____/ .io</span><br><span class="line"></span><br><span class="line">  execution: <span class="built_in">local</span></span><br><span class="line">     script: .\k6_test.js</span><br><span class="line">     output: -</span><br><span class="line"></span><br><span class="line">  scenarios: (100.00%) 1 scenario, 100 max VUs, 10m30s max duration (incl. graceful stop):</span><br><span class="line">           * default: 100 iterations shared among 100 VUs (maxDuration: 10m0s, gracefulStop: 30s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">running (00m00.0s), 000/100 VUs, 100 complete and 0 interrupted iterations</span><br><span class="line">default ✓ [======================================] 100 VUs  00m00.0s/10m0s  100/100 shared iters</span><br><span class="line"></span><br><span class="line">     data_received..............: 12 kB  623 kB/s</span><br><span class="line">     data_sent..................: 8.0 kB 402 kB/s</span><br><span class="line">     http_req_blocked...........: avg=1ms      min=0s      med=775.9µs max=2.35ms   p(90)=2.35ms  p(95)=2.35ms</span><br><span class="line">     http_req_connecting........: avg=525.37µs min=0s      med=579.2µs max=1.35ms   p(90)=775.9µs p(95)=775.9µs</span><br><span class="line">     http_req_duration..........: avg=2.52ms   min=1.09ms  med=2.54ms  max=3.57ms   p(90)=3.56ms  p(95)=3.57ms</span><br><span class="line">     http_req_receiving.........: avg=5.23µs   min=0s      med=0s      max=505.49µs p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_sending...........: avg=103.27µs min=0s      med=0s      max=775.9µs  p(90)=775.9µs p(95)=775.9µs</span><br><span class="line">     http_req_tls_handshaking...: avg=0s       min=0s      med=0s      max=0s       p(90)=0s      p(95)=0s</span><br><span class="line">     http_req_waiting...........: avg=2.41ms   min=579.2µs med=2.54ms  max=3.57ms   p(90)=3.17ms  p(95)=3.57ms</span><br><span class="line">     http_reqs..................: 100    5020.634809/s</span><br><span class="line">     iteration_duration.........: avg=4.07ms   min=1.35ms  med=4.14ms  max=5.92ms   p(90)=5.92ms  p(95)=5.92ms</span><br><span class="line">     iterations.................: 100    5020.634809/s</span><br></pre></td></tr></table></figure><p>これらの負荷設定はJavaScriptに記載することも可能です。</p><figure class="highlight js"><figcaption><span>k6_test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">  vus: <span class="number">10</span>,</span><br><span class="line">  iterations: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  http.get(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stages</code>という書き方で段階的に負荷を変更することも可能です。<br>この場合<code>vus</code>ではなく<code>target</code>が同時接続数です。<br>下記の書き方の場合、同時接続数10人で1秒負荷をかけた後に20人、30人と接続数を増やしていく試験になります。<br><code>--stages</code>のようにCLIオプションとして渡すことはできません。</p><figure class="highlight js"><figcaption><span>k6_test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">  stages: [</span><br><span class="line">    &#123; <span class="attr">target</span>: <span class="number">10</span>, <span class="attr">duration</span>: <span class="string">&#x27;1s&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">target</span>: <span class="number">20</span>, <span class="attr">duration</span>: <span class="string">&#x27;1s&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">target</span>: <span class="number">30</span>, <span class="attr">duration</span>: <span class="string">&#x27;1s&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  http.get(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GETリクエスト以外を検証する。"><a href="#GETリクエスト以外を検証する。" class="headerlink" title="GETリクエスト以外を検証する。"></a>GETリクエスト以外を検証する。</h4><p>動作確認ではGETリクエストの確認を行いましたが、k6のhttpライブラリはGETリクエスト以外も検証可能です、GET, POSTなどは勿論OPTIONSなどのリクエストも対応しています。<br>詳しくは<a href="https://k6.io/docs/javascript-api/k6-http">公式ドキュメント</a>を確認してください。</p><p>よく使うであろうPOST, PUT, DELETEについて簡単なスニペットを用意しました。</p><figure class="highlight js"><figcaption><span>k6_post.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> body = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;;</span><br><span class="line">  http.post(<span class="string">&#x27;http://localhost:8080/&#x27;</span>, <span class="built_in">JSON</span>.stringify(body), headers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>k6_put.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> body = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;;</span><br><span class="line">  http.put(<span class="string">&#x27;http://localhost:8080/&#x27;</span>, <span class="built_in">JSON</span>.stringify(body), headers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>k6_delete.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> body = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> params = &#123; <span class="attr">headers</span>: &#123; <span class="string">&#x27;X-MyHeader&#x27;</span>: <span class="string">&#x27;k6test&#x27;</span> &#125; &#125;;</span><br><span class="line">  http.del(<span class="string">&#x27;http://localhost:8080/&#x27;</span>, <span class="built_in">JSON</span>.stringify(body), params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETEリクエストの場合、リクエストボディにパラメータを含めることはあまり一般的ではありませんが、技術的には可能であったりといった側面に対応できるようになっています。<br>(k6公式ドキュメントにもDELETEリクエストのリクエストボディはセマンティクスが定まっていないため非推奨と記載があります)</p><h4 id="リクエストの応答を検証する"><a href="#リクエストの応答を検証する" class="headerlink" title="リクエストの応答を検証する"></a>リクエストの応答を検証する</h4><p>サーバーが負荷に耐えきれず正常な応答を返せない割合を<code>check</code>ライブラリで検証することが可能です。</p><figure class="highlight js"><figcaption><span>k6_test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; check &#125; <span class="keyword">from</span> <span class="string">&#x27;k6&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = http.get(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">  check(res, &#123;</span><br><span class="line">    <span class="string">&#x27;response code was 200&#x27;</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> res.status == <span class="number">200</span>,</span><br><span class="line">    <span class="string">&#x27;body size was 8 bytes&#x27;</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> res.body.length == <span class="number">8</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記コードで同時接続2万人分のリクエストの1割を捌くことに失敗することをレポートすることができました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">k6 run k6_test.js --vus 20000 --iterations 20000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /\      |‾‾| /‾‾/   /‾‾/</span><br><span class="line">     /\  /  \     |  |/  /   /  /</span><br><span class="line">    /  \/    \    |     (   /   ‾‾\</span><br><span class="line">   /          \   |  |\  \ |  (‾)  |</span><br><span class="line">  / __________ \  |__| \__\ \_____/ .io</span><br><span class="line"></span><br><span class="line">// サーバーエラー発生時にログが出力される為中略</span><br><span class="line"></span><br><span class="line">running (01m31.8s), 00000/20000 VUs, 20000 complete and 0 interrupted iterations</span><br><span class="line">default ✓ [======================================] 20000 VUs  01m31.7s/10m0s  20000/20000 shared iters</span><br><span class="line"></span><br><span class="line">     ✗ response code was 200</span><br><span class="line">      ↳  90% — ✓ 18054 / ✗ 1946</span><br><span class="line">     ✗ body size was 8 bytes</span><br><span class="line">      ↳  90% — ✓ 18054 / ✗ 1946</span><br><span class="line"></span><br><span class="line">     checks.....................: 90.27% ✓ 36108   ✗ 3892</span><br><span class="line">     data_received..............: 2.2 MB 24 kB/s</span><br><span class="line">     data_sent..................: 1.4 MB 16 kB/s</span><br><span class="line">     http_req_blocked...........: avg=11.47s   min=0s med=16.54s   max=19.94s p(90)=19.46s p(95)=19.78s</span><br><span class="line">     http_req_connecting........: avg=10.94s   min=0s med=15.84s   max=19.94s p(90)=19.45s p(95)=19.78s</span><br><span class="line">     http_req_duration..........: avg=3.55s    min=0s med=944.07ms max=19.34s p(90)=11.12s p(95)=13.1s</span><br><span class="line">     http_req_receiving.........: avg=66.54ms  min=0s med=0s       max=11.01s p(90)=0s     p(95)=997.5µs</span><br><span class="line">     http_req_sending...........: avg=976.15ms min=0s med=27.92ms  max=16.22s p(90)=3.12s  p(95)=5.93s</span><br><span class="line">     http_req_tls_handshaking...: avg=0s       min=0s med=0s       max=0s     p(90)=0s     p(95)=0s</span><br><span class="line">     http_req_waiting...........: avg=2.5s     min=0s med=602.44ms max=18.21s p(90)=8.91s  p(95)=10.96s</span><br><span class="line">     http_reqs..................: 20000  217.879289/s</span><br><span class="line">     iteration_duration.........: avg=18.18s   min=0s med=19.68s   max=1m5s   p(90)=20s    p(95)=25.89s</span><br><span class="line">     iterations.................: 20000  217.879289/s</span><br><span class="line">     vus........................: 38     min=38    max=16944</span><br><span class="line">     vus_max....................: 20000  min=20000 max=20000</span><br></pre></td></tr></table></figure><p>ちなみに26000人～29000人分のアクセスを再現するあたりで64GBのメモリを使い切り動かなくなりました。<br>要求スペック的には1000人オーダーであれば8～16GBのメモリのマシンであっても耐えられそうです。<br>メモリに余裕のない環境ではマシンスペックの限界を超えたときにGoのランタイムエラーが出力され、Go製ツールであることを感じることができます。</p><p><img src="/images/20210324/image_5.png"></p><p><code>check</code>関数はそのまま真偽値として扱う事が可能です。<br>試験の失敗をログ出力する<code>fail</code>ライブラリと組み合わせることが可能です。</p><figure class="highlight js"><figcaption><span>k6_fail.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; check, fail &#125; <span class="keyword">from</span> <span class="string">&#x27;k6&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = http.get(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    !check(res, &#123;</span><br><span class="line">      <span class="string">&#x27;status code MUST be 200&#x27;</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> res.status == <span class="number">200</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ) &#123;</span><br><span class="line">    fail(<span class="string">&#x27;status code was *not* 200&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>その他テストシナリオの品質を高めるためのユーティリティ等が沢山用意されています、詳しくは<a href="https://k6.io/docs/javascript-api">公式ドキュメントのjavascript-apiの章</a>を確認してください。<br>JavaScriptで再利用性の高い高品質なテストシナリオをどのように書いていくかが、腕の見せ所ですね。</p><h2 id="負荷試験のアウトプットについて"><a href="#負荷試験のアウトプットについて" class="headerlink" title="負荷試験のアウトプットについて"></a>負荷試験のアウトプットについて</h2><p>試験レポートは標準出力で確認できるものを手作業で纏めるだけでも充分ではありますが、<code>--out</code>オプションで出力先、形式を変更することが可能です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k6 run .\k6_test.js --out json&#x3D;out.json</span><br></pre></td></tr></table></figure><p><a href="https://k6.io/docs/getting-started/results-output">公式ドキュメント</a>では下記のような形式が想定されています。</p><table><thead><tr><th>plugin</th><th>usage</th></tr></thead><tbody><tr><td>Amazon CloudWatch</td><td>k6 run –out statsd</td></tr><tr><td>Apache Kafka</td><td>k6 run –out kafka</td></tr><tr><td>Cloud</td><td>k6 run –out cloud</td></tr><tr><td>CSV</td><td>k6 run –out csv</td></tr><tr><td>Datadog</td><td>k6 run –out datadog</td></tr><tr><td>InfluxDB</td><td>k6 run –out influxdb</td></tr><tr><td>JSON</td><td>k6 run –out json</td></tr><tr><td>New Relic</td><td>k6 run –out statsd</td></tr><tr><td>StatsD</td><td>k6 run –out statsd</td></tr></tbody></table><p>公式のダッシュボードである<a href="https://k6.io/cloud">k6 Cloud</a>も提供されています。<br>試験結果の可視化、前回との差分の比較を様々な手段で行う事や、CloudWatchのメトリクスとして定期的なパフォーマンスチェックを行う監視システムの構築等が想像できます。<br>これらの機能の存在からも現在のDevOpsの成長に追従した継続的な性能試験という設計思想を感じることができます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>k6はGoで開発されたモダンな負荷試験ツールです。</li><li>軽快なフットワークでインストールが可能です。</li><li>JavaScriptで書いたシナリオを実行する形で利用します。</li><li>試験結果は様々な外部システムと組み合わせることが可能です。</li></ul><p>負荷試験を検討の際はぜひ選択肢の一つとして検討してみてください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210324/crocodile-4918820_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/engin_akyurt-3656355/?u</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="k6" scheme="https://future-architect.github.io/tags/k6/"/>
    
    <category term="負荷試験ツール" scheme="https://future-architect.github.io/tags/%E8%B2%A0%E8%8D%B7%E8%A9%A6%E9%A8%93%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる</title>
    <link href="https://future-architect.github.io/articles/20210323/"/>
    <id>https://future-architect.github.io/articles/20210323/</id>
    <published>2021-03-22T15:00:00.000Z</published>
    <updated>2021-04-11T08:20:25.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの齋場です。<a href="/articles/20210307/">GCP連載2021</a>の第11弾です。</p><p>本記事では、Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる手順を紹介します。Cloud Spannerを用いた開発を行う方、また興味あるから少し触ってみたいという方にもおすすめです。</p><h1 id="Cloud-Spannerとは"><a href="#Cloud-Spannerとは" class="headerlink" title="Cloud Spannerとは"></a>Cloud Spannerとは</h1><p>簡単にCloud Spanner (以下「Spanner」と記載)について紹介させていただきます。</p><p>Spannerは、Google Cloudが提供する”強力な一貫性と水平方向の拡張性を兼ね備えた唯一のリレーショナルデータベースサービス” です。</p><p>以下公式ドキュメントの抜粋です。</p><blockquote><p>・無制限のスケーリングによって、リレーショナル セマンティクスと SQL のすべてのメリットを享受<br>・任意のサイズで開始し、ニーズの拡大に応じて制限なしでスケーリング<br>・計画的ダウンタイムのない、オンラインでのスキーマ変更で高可用性を実現<br>・リージョンや大陸全体にわたる強整合性で高性能のトランザクションを提供<br>・自動シャーディングなどの機能により手動のタスクを排除し、イノベーションに注力</p></blockquote><p>夢のようなデータベースサービスですね。でも、となるとやっぱりお高そう..料金は以下ような感じです。</p><h4 id="１ノードあたりの料金（すべてのレプリケーションを含む）"><a href="#１ノードあたりの料金（すべてのレプリケーションを含む）" class="headerlink" title="１ノードあたりの料金（すべてのレプリケーションを含む）"></a>１ノードあたりの料金（すべてのレプリケーションを含む）</h4><table><thead><tr><th>構成</th><th>リージョン</th><th>$/時間</th><th>$/月 (100%稼働)</th></tr></thead><tbody><tr><td>リージョン</td><td>asia-northeast1 (東京)</td><td>1.17</td><td>842.4</td></tr><tr><td>マルチリージョン</td><td>asia1 (東京+大阪)</td><td>3.9</td><td>2808</td></tr></tbody></table><p>最小構成のリージョン+1ノード構成でも、なかなかのコストが掛かりますね。</p><h1 id="開発環境どうするか"><a href="#開発環境どうするか" class="headerlink" title="開発環境どうするか"></a>開発環境どうするか</h1><p>コストが高いので、開発環境用に気軽にインスタンスを立ち上げるのは難しそうです。<br>ということで、本記事ではGCPが公式で提供してくれている <a href="https://cloud.google.com/spanner/docs/emulator?hl=ja">Spanner エミュレータ</a> を使って開発環境を立ち上げます！(エミューレータあってよかったありがとう!)</p><p>gcloud CLIとdockerイメージでの提供がありますが、今回はdocker-composeで利用する例を紹介します。<br>サンプルコードはこちら: <a href="https://github.com/tarosaiba/compose-spanner"><strong>tarosaiba/compose-spanner</strong></a></p><p>以下2点工夫したポイントです。</p><ul><li>通常、Spannerエミュレータ起動後にインスタンスの作成手順(<code>gcloud spanner instances create</code>)が必要になりますが、docker-compose立ち上げ時に自動でインスタンス作成されるようにしています</li><li>DBの初期化処理(テーブル作成&amp;データ投入)のために、事前に用意したDDL/DMLをdocker-compose立ち上げ時に自動で実行されるようにしています</li></ul><p>ということで早速手順を紹介します。</p><h1 id="要件"><a href="#要件" class="headerlink" title="要件"></a>要件</h1><ul><li>docker &gt;= 19.03.0+</li><li>docker-compose &gt;= 1.27.0+</li></ul><h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><h2 id="クイックスタート"><a href="#クイックスタート" class="headerlink" title="クイックスタート"></a>クイックスタート</h2><ul><li>リポジトリをクローン <a href="https://github.com/tarosaiba/compose-spanner">https://github.com/tarosaiba/compose-spanner</a></li><li>ディレクトリに移動  <code>cd compoose-spanner</code></li><li>docker-compose起動 <code>docker-compose up -d</code></li></ul><p>手順は以上です!</p><h2 id="spanner-cliによるSpanner接続方法"><a href="#spanner-cliによるSpanner接続方法" class="headerlink" title="spanner-cliによるSpanner接続方法"></a>spanner-cliによるSpanner接続方法</h2><p>さっそくcliで接続してみましょう。<br>※ インスタンス、データベースが作成されるまで十数秒待つ必要があります</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose exec spanner-cli spanner-cli -p test-project -i test-instance -d test-database</span><br><span class="line">Connected.</span><br><span class="line">spanner&gt;</span><br></pre></td></tr></table></figure><p>接続できました！では、テーブルを確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spanner&gt; show tables;</span><br><span class="line">+-------------------------+</span><br><span class="line">| Tables_in_test-database |</span><br><span class="line">+-------------------------+</span><br><span class="line">| Singers                 |</span><br><span class="line">| Albums                  |</span><br><span class="line">+-------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">spanner&gt; select * from Singers;</span><br><span class="line">+----------+------------+----------+------------+</span><br><span class="line">| SingerId | FirstName  | LastName | SingerInfo |</span><br><span class="line">+----------+------------+----------+------------+</span><br><span class="line">| 13       | Russell    | Morales  | NULL       |</span><br><span class="line">| 15       | Dylan      | Shaw     | NULL       |</span><br><span class="line">| 12       | Melissa    | Garcia   | NULL       |</span><br><span class="line">| 14       | Jacqueline | Long     | NULL       |</span><br><span class="line">+----------+------------+----------+------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (800.4us)</span><br></pre></td></tr></table></figure><p>テーブルとデータも確認することができました。</p><h2 id="アプリケーションからの接続方法"><a href="#アプリケーションからの接続方法" class="headerlink" title="アプリケーションからの接続方法"></a>アプリケーションからの接続方法</h2><p>開発するアプリケーションで <code>SPANNER_EMULATOR_HOST=localhost:9010</code> 設定すればOKです。各クライアントライブラリごとのサンプルは<a href="https://cloud.google.com/spanner/docs/emulator">こちらの公式ドキュメント</a>を参照してください。</p><h2 id="エミュレータの制限事項と相違点"><a href="#エミュレータの制限事項と相違点" class="headerlink" title="エミュレータの制限事項と相違点"></a>エミュレータの制限事項と相違点</h2><p>ここで注意点ですが、<a href="https://cloud.google.com/spanner/docs/emulator?hl=ja#limitations_and_differences">公式ドキュメント</a>にある通りエミュレータは以下のような制限事項および、相違点があります。以下を理解して利用しましょう。</p><h4 id="制限事項"><a href="#制限事項" class="headerlink" title="制限事項"></a>制限事項</h4><blockquote><ul><li>TLS/HTTPS、認証、IAM、権限、ロール。</li><li>PLAN または PROFILE クエリモード。 NORMAL のみがサポートされます。</li><li>監査ログとモニタリング ツール。</li></ul></blockquote><h4 id="相違点"><a href="#相違点" class="headerlink" title="相違点"></a>相違点</h4><blockquote><ul><li>エミュレータのパフォーマンスとスケーラビリティは、本番環境サービスと同等ではありません。</li><li>読み取り/書き込みトランザクションとスキーマ変更は、完了するまでデータベース全体を排他的にのみアクセスできるようにロックします。</li><li>パーティション化 DML とパーティション クエリはサポートされていますが、エミュレータはステートメントが分割可能かどうかは確認しません。つまり、パーティション化 DML またはパーティション クエリ ステートメントがエミュレータで実行される場合でも、本番環境ではパーティション化できないステートメント エラーにより失敗する可能性があります。</li></ul></blockquote><h1 id="解説"><a href="#解説" class="headerlink" title="解説"></a>解説</h1><p>ざっくりサンプルコードの解説をさせていただきます</p><h3 id="ファイル構成"><a href="#ファイル構成" class="headerlink" title="ファイル構成"></a>ファイル構成</h3><p><img src="/images/20210323/image.png"></p><ul><li><strong>docker-compose.yaml</strong> : docker-composeファイルです。これを立ち上げます</li><li><strong>migrations</strong> : DB初期化時に適用するDDL&amp;DMLを配置します</li></ul><h3 id="利用しているDockerイメージ"><a href="#利用しているDockerイメージ" class="headerlink" title="利用しているDockerイメージ"></a>利用しているDockerイメージ</h3><table><thead><tr><th>Docker Image</th><th>説明</th><th>用途</th></tr></thead><tbody><tr><td>gcr.io/cloud-spanner-emulator/emulator</td><td>GCP提供のSpannerエミュレータ<a href="https://cloud.google.com/spanner/docs/emulator">公式ドキュメント</a></td><td>・Spannerエミュレータ本体</td></tr><tr><td>gcr.io/google.com/cloudsdktool/cloud-sdk:slim</td><td>GCP利用のためのツールとライブラリ<a href="https://cloud.google.com/sdk/docs/downloads-docker">公式ドキュメント</a></td><td>・インスタンスの作成</td></tr><tr><td>mercari/wrench</td><td>SpannerのSchemaマネジメントツール <a href="https://github.com/cloudspannerecosystem/wrench">Github</a></td><td>・テーブル作成 ・データ投入</td></tr><tr><td>sjdaws/spanner-cli</td><td>SpannerのCLIツール <a href="https://github.com/cloudspannerecosystem/spanner-cli">Github</a></td><td>・CLIアクセス</td></tr></tbody></table><p>※<code>wrench</code> および、<code>spanner-cli</code> は <a href="https://github.com/cloudspannerecosystem">Cloud Spanner Ecosystem</a>で公開されています<br>※MercariさんはSpannerのツールや知見を惜しみなく公開してくれており、非常に感謝です..!!</p><h3 id="コンテナ構成のイメージとdocker-compose-yamlの内容"><a href="#コンテナ構成のイメージとdocker-compose-yamlの内容" class="headerlink" title="コンテナ構成のイメージとdocker-compose.yamlの内容"></a>コンテナ構成のイメージとdocker-compose.yamlの内容</h3><p><img src="/images/20210323/image_2.png"></p><p>Spannerエミュレータ本体<code>spanner</code>とCLIアクセス用の<code>spanner-cli</code>は常駐プロセスとして起動し続け、それ以外のコンテナはコマンド実行後に正常終了します</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Spanner</span></span><br><span class="line">    <span class="attr">spanner:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">gcr.io/cloud-spanner-emulator/emulator</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">&quot;9010:9010&quot;</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">&quot;9020:9020&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Init (Create Instance)</span></span><br><span class="line">    <span class="attr">gcloud-spanner-init:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">gcr.io/google.com/cloudsdktool/cloud-sdk:slim</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line">       <span class="string">bash</span> <span class="string">-c</span> <span class="string">&#x27;gcloud config configurations create emulator &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set auth/disable_credentials true &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set project $$&#123;PROJECT_ID&#125; &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set api_endpoint_overrides/spanner $$&#123;SPANNER_EMULATOR_URL&#125; &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set auth/disable_credentials true &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud spanner instances create $$&#123;INSTANCE_NAME&#125; --config=emulator-config --description=Emulator --nodes=1&#x27;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">PROJECT_ID:</span> <span class="string">&quot;test-project&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_URL:</span> <span class="string">&quot;http://spanner:9020/&quot;</span></span><br><span class="line">        <span class="attr">INSTANCE_NAME:</span> <span class="string">&quot;test-instance&quot;</span></span><br><span class="line">        <span class="attr">DATABASE_NAME:</span> <span class="string">&quot;test-database&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># DB Migration (Create Table)</span></span><br><span class="line">    <span class="attr">wrench-crearte:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mercari/wrench</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&quot;create --directory /ddl&quot;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SPANNER_PROJECT_ID:</span> <span class="string">&quot;test-project&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_INSTANCE_ID:</span> <span class="string">&quot;test-instance&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_DATABASE_ID:</span> <span class="string">&quot;test-database&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_HOST:</span> <span class="string">&quot;spanner:9010&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_URL:</span> <span class="string">&quot;http://spanner:9020/&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./migrations/ddl:/ddl</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># DB Migration (Insert data)</span></span><br><span class="line">    <span class="attr">wrench-apply:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mercari/wrench</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&quot;apply --dml /dml/dml.sql&quot;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SPANNER_PROJECT_ID:</span> <span class="string">&quot;test-project&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_INSTANCE_ID:</span> <span class="string">&quot;test-instance&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_DATABASE_ID:</span> <span class="string">&quot;test-database&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_HOST:</span> <span class="string">&quot;spanner:9010&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_URL:</span> <span class="string">&quot;http://spanner:9020/&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./migrations/dml:/dml</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># CLI</span></span><br><span class="line">    <span class="attr">spanner-cli:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">sjdaws/spanner-cli:latest</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_HOST:</span> <span class="string">&quot;spanner:9010&quot;</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo this container keep running &amp;&amp; tail -f /dev/null&#x27;</span>]</span><br></pre></td></tr></table></figure><p>以下、補足になります</p><ul><li>wrenchコンテナは<code>restart: on-failure</code>と設定しています<ul><li>wrenchはSpannerインスタンス作成後に実行したいのですが、docker-composeの起動制御が複雑になるので、失敗→再起動→再実行 するようになっています</li></ul></li><li>spanner-cliコンテナは、<code>tail -f /dev/null</code> でコンテナ起動状態を保つようにしています<ul><li><code>docker-exec</code>でコマンドを実行するためです</li><li>※spanner-cliは、go getでもローカルPCにインストール可能 (筆者はローカルにインストールするのが面倒だった)</li></ul></li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>SpannerはNewSQLと称されるだけあり MySQLやPostgresと比較すると情報も乏しいですが、日本でも採用事例は増えてきていて今後増々期待できるデータベースサービスかと思います！</p><p>今回は、Spannerのローカル開発環境を立ち上げる方法を紹介させていただきました。宣言的に定義することで、立ち上げの手順もシンプルにできていると思います。興味のある方はぜひ立ち上げて触ってみてください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの齋場です。&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載2021&lt;/a&gt;の第11</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="DockerCompose" scheme="https://future-architect.github.io/tags/DockerCompose/"/>
    
    <category term="Spanner" scheme="https://future-architect.github.io/tags/Spanner/"/>
    
  </entry>
  
</feed>
