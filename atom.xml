<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-07-31T02:19:13.810Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>コード選考の問題選定を現場社員がやるわけ</title>
    <link href="https://future-architect.github.io/articles/20200731/"/>
    <id>https://future-architect.github.io/articles/20200731/</id>
    <published>2020-07-30T15:00:00.000Z</published>
    <updated>2020-07-31T02:19:13.810Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200731/laptop-2298286_1280.png"><p><a href="https://pixabay.com/ja/users/Sara_Torda-888816/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2298286" target="_blank" rel="noopener">Sara Torda</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2298286" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>SAIG(Strategic AI Group)の塚本です。AIと言えば Deep Learning 等の機械学習分野が中心ですが、それらが適さないと判断された問題全般(数理最適や複雑なデータ処理)を担当しています。</p><p>また、競技プログラムを中心とした全社的な活動に関わっており、フューチャーが2018年より実施している、新卒採用の<strong>コード選考</strong>についてご紹介します。</p><h1 id="コード選考をはじめた経緯"><a href="#コード選考をはじめた経緯" class="headerlink" title="コード選考をはじめた経緯"></a>コード選考をはじめた経緯</h1><p>全社員がプログラミングスキルを求められるフューチャーにとって、採用時におけるその能力の定量評価は長年の課題であり、昨今の採用サービスの充実を機に取り組みをはじめました。</p><p>より詳細な経緯は下記記事をご参照ください。</p><p><a href="https://tracks.run/interview/future-architect/" target="_blank" rel="noopener">高いプログラミングスキルを持つ人材を引きつける「コード選考」 全社員がプログラミングを熟知したテクノロジー企業の採用フローを公開！</a></p><p>サービスを活用することが決まったものの、採用フローの意図に沿ったデザインを行う必要があり、採用チームのメンバーだけでは対応が難しい部分がありました。そこで、社内の部活動として競技プログラミング部を立ち上げ・運営していた私に相談が来ました。</p><h1 id="コード選考の位置付けとデザイン"><a href="#コード選考の位置付けとデザイン" class="headerlink" title="コード選考の位置付けとデザイン"></a>コード選考の位置付けとデザイン</h1><p>まず、フューチャー社員の多くはITコンサルタントという1職種に属しており、期待される役割はこれまでの実績や本人希望に応じて流動的に定められます。コード選考でも、プログラミングに特化した人材のみを選出するのではなく、ITコンサルタントとして基礎的なプログラミングの素養を持っているか確認することを目的としました。<br>一方、高いプログラミングスキルを有した人材を評価すべく、スキルに応じて点数の差が開くよう問題選択を行うことも求められます。さらに、合格者が次の選考に進む際や内定承諾時の判断基準として、各選考内容はシビアに見られます。</p><p>これらの観点から、コード選考に求められる要素を下記のように定めました。</p><ul><li>基礎的なプログラミングの素養を有しているか確認すること<sup id="fnref:0"><a href="#fn:0" rel="footnote">0</a></sup></li><li>プログラミングスキルの高さに応じて点数差が生まれること<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>特定の知識やテクニックが不要なこと</li><li>問題文の理解が容易なこと</li><li>解法を考えるのが楽しいこと</li></ul><p>これらを加味し、以下のようなコード選考の実現を目指します。<br>「プログラミング言語に依らず解け、段階的に難易度が上がるパズルチックな問題を複数<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>出題する。」</p><h1 id="問題選定"><a href="#問題選定" class="headerlink" title="問題選定"></a>問題選定</h1><p>活用したサービスでは、予め用意された数百問の問題から自由に組み合わせて試験を作ることができます。<br>各問題には、難易度や所要時間の目安が併記されているのですが、あまり納得のできない値であったり、当社の狙いにそぐわない問題も多く見受けられました。そこで、目指すコード選考の実現のため、全ての問題を現場社員で見直すことにしました。</p><ol><li>スクリーニングとして、私が全問題文を確認、候補として20問以内に絞り込みます。</li><li>競技プログラミング部のメンバーを中心に、協力してくれる社員に問題候補を共有します。</li><li>実際に問題を解いてもらって、難易度の目安や感想をフィードバックしてもらいます。</li><li>難易度が綺麗な階段状になるよう組み合わせを考え、出題する問題を選定します。</li></ol><p>問題選定の実施にあたり、解く問題にノルマや担当等を定めず、部活動の延長として興味の向くままに取り組んでもらえることを大事にしています。解き終わった問題に対し担当したメンバー間で議論が盛り上がることも多く、一種のお祭りのようになっているかも知れません。</p><h1 id="結果の活用"><a href="#結果の活用" class="headerlink" title="結果の活用"></a>結果の活用</h1><p>コード選考の結果の活用方法については、特に面接など、他の選考フローと絡めて試行錯誤を行っています。年々変化するため確定的なことは言い難いのですが、自社の狙いに沿った観点で定量化されていることにより、形骸化せず、選考基準として活用できることにメリットを感じています。</p><h1 id="効果"><a href="#効果" class="headerlink" title="効果"></a>効果</h1><p>コード選考は当初想定を超える成果に繋がっています。</p><p>まず、コード選考を実施することにより、ITコンサルティング業界を就活候補としていない学生からも応募が来るようになりました。また、面接官の評価以外に、客観的な数値基準が加わったことにより、柔軟な選考が可能になりました。そして、面接時のネタや内定承諾時の理由として、コード選考内容に対する好印象を上げる応募者が少なくない人数生まれました。</p><p>上記の結果、新卒採用者の内、すでにコード選考経由の人数は十分な割合を占めるようになりました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>フューチャーのコード選考の取り組みについてご紹介しました。<br>IT人材の枯渇が叫ばれる中、各社プログラミングスキルを測る施策を検討・採用する企業も多いと思います。コード選考といっても、企業毎に求める狙いや評価基準は様々であり、それに合わせて必要な選考をどう実現すればよいのか、本取り組みが何かの参考になれば幸いです。</p><p>(個人的には、コード選考を通じて多くのアルゴリズマーに入社頂いたので、より良い問題を揃えるため、そろそろ社内での自作を実現したいと考えています。)</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:0"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">0.</span><span style="display: inline-block; vertical-align: top;">AtCoder緑コーダーの方の多くが通過するレベルを想定しました。</span><a href="#fnref:0" rev="footnote"> ↩</a></li><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">AtCoder黄コーダーの方であれば満点が取れるレベルを想定しました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">所要時間の兼ね合いから5問程度を目安にしています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200731/laptop-2298286_1280.png&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/Sara_Torda-888816/?utm_source=link-attributio
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="採用" scheme="https://future-architect.github.io/tags/%E6%8E%A1%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redux-Toolkitに学ぶ、TypeScriptの型推論とこれからのAPIデザイン</title>
    <link href="https://future-architect.github.io/articles/20200730/"/>
    <id>https://future-architect.github.io/articles/20200730/</id>
    <published>2020-07-29T15:00:00.000Z</published>
    <updated>2020-07-30T01:41:36.778Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200730/top.png"><p>TypeScriptは、JavaScriptのさまざまなフリーダムな書き方を受け入れ、漸進的な型付けを行えるようにするという<del>狂った</del>高難易度な目的のために作成されているのですが、そろそろ、TypeScriptファーストで、利用者にとって使いやすいAPIみたいな方向性で使われることも増えるのでは、という思いを強く持ちました。「既存のJSプロジェクトをTypeScript化して〜」みたいな紹介のされ方はもはや過去のものになったのではないかと。</p><p>すでに<a href="https://2019.stateofjs.com/javascript-flavors/typescript/" target="_blank" rel="noopener">State of JavaScript 2019</a>では2/3のユーザーがすでにTypeScriptを利用したことがある（使っている）と答え、残りの2/3も学びたい、と答えている状況です。この勢いだと、2年後には80%を超えそうです。僕自身も、TypeScriptファーストな世界がくることを想像して<a href="https://github.com/future-architect/typescript-guide/" target="_blank" rel="noopener">説明に使える教科書</a>を書き始めたわけですが、思ったよりもその世界が来るのは早そうです。</p><p>このエントリーでは、TypeScriptユーザーのTypeScriptユーザーによるTypeScriptユーザーのためのAPI設計について考えをまとめてみたいと思います。想定読者は、フレームワークを作るような人ですので、既存のライブラリを組み合わせてアプリケーションを作る人は想定外です。</p><p>ちなみに、相互運用の話などはオライリージャパンから出版されている<a href="https://www.oreilly.co.jp/books/9784873119045/" target="_blank" rel="noopener">プログラミングTypeScript</a>の11章などで詳しく説明されているので、そちらをみると良いと思います。JSから移行については話はしません。</p><h1 id="3行まとめ"><a href="#3行まとめ" class="headerlink" title="3行まとめ"></a>3行まとめ</h1><ul><li>TypeScriptの型推論は制約があって、他の関数型言語で提供されているものよりは弱い</li><li>うまく推論を活用して、コード補完とか型チェックが利きやすいAPIを作ろう</li><li>JavaScript時代とはAPIの形が変わるかもよ/変えて行こう</li></ul><h1 id="前回のおさらい"><a href="#前回のおさらい" class="headerlink" title="前回のおさらい"></a>前回のおさらい</h1><p>TechBlogで以前、Redux Toolkitの紹介を書きました。今回のエントリーはその続きです。</p><ul><li><a href="https://future-architect.github.io/articles/20200501/">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話</a></li></ul><blockquote><p>最近、僕が意識しているのはリーダブルなコードです。これはオライリーの本のReadableではなくて、コードが人を導いてくれる（Leadable）という意味です。一方で、ReduxとTypeScriptで感じていたのは、処理系を通すためにコードを書かされているという感覚ですね。オーダブル(Orderable)と呼んでいるけど、もっといい名前があったら教えてください。Redux Toolkitはだいぶ余計なことに頭を使わなくて済むので、とても良いです。<br>(略)<br>Redux toolkitと生のReduxを使って見て思うのは、ライブラリの設計の難易度が3倍ぐらいになったなぁ、という感じですね。TypeScriptで型推論が入ったのはあるのですが、その型推論が効きやすい、ライブラリユーザーが実装しなきゃいけない型情報を減らすための設計というのが、この後の主戦場になりそうだなぁ、ということです。今まではデータを加工する、というロジックだけを設計すれば良かったのですが、データの伝搬だけじゃなくて、型情報の伝搬というのも考慮しなければならないと。ある意味、C++プログラマーのテンプレート経験が生きるのかも、なぁ、という。まだあまり言語化できないのですが。Haskellな人とか得意だったりするんですかね？</p></blockquote><h1 id="型の伝搬"><a href="#型の伝搬" class="headerlink" title="型の伝搬"></a>型の伝搬</h1><p>使いやすいAPIというのは、その今入力しようとしている箇所の情報が十分に得られるということです。それは型です。しかし、型を全部覚えていて間違いなく宣言しなければならないとすると、入力の補助にはなりませんし、タイプ数も増えます。わざわざ入力しなくてもきちんと情報が得られるようになるのが型推論です。型推論はその場の環境から型を決定していきます。</p><p>前回のエントリーの最後に書いたのが型の伝搬です。型推論(type inference)ではあるのですが、TypeScriptの場合はより強力な型推論を持つ言語と比べると、推論する方向が限定されているのであえて伝搬と呼びましたが、型推論です。</p><p>方向が決まっていて機能が弱いのは欠点でもありますが、長所でもあります。処理系の挙動はわかりやすく、エラーメッセージもシンプルですし、コンパイルも早いです。</p><h2 id="代入"><a href="#代入" class="headerlink" title="代入"></a>代入</h2><p>一番基本的な推論は、代入ですね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">"hello world"</span>;</span><br></pre></td></tr></table></figure><p>丁寧に書くなら次のように型情報を入れることになりますが、右辺から明らかなので、左側の代入部分では型を省略できますね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i: <span class="built_in">string</span> = <span class="string">"hello world"</span>;</span><br></pre></td></tr></table></figure><p>逆方向には推論はできません。当たり前に思えるかもしれませんがそうではありません。逆方向に推論ができるとしたら、左辺から右辺の関数の返り値の型を推定して、そこから、引数<code>i</code>の型も決まって「testの呼び出し時の引数の型が違う」となりますが、TypeScriptの場合は一方通行なので、右辺の型が全部解決してから左辺を処理するため、「数字は文字列の変数に代入できない」というエラーになります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> i: <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span>&gt;(<span class="params">i: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'number' is not assignable to type 'string'.</span></span><br><span class="line">s = test(i);</span><br></pre></td></tr></table></figure><p>型変数を持つクラスを型を指定しないでインスタンス作成した場合は、<code>unknown</code>が指定されたものとしてインスタンスが作成されます。最初の<code>append()</code>の引数をみて、T=numberと推論してくれることはTypeScriptではありません。そのため、次の文字列の<code>append()</code>も成功してしまいます。エラーになってくれません。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    append(i: T) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> l = <span class="keyword">new</span> List();</span><br><span class="line">l.append(<span class="number">10</span>);</span><br><span class="line">l.append(<span class="string">"string"</span>);</span><br></pre></td></tr></table></figure><p><code>unknown</code>のまま動いちゃうと、TypeScriptからJavaScriptの世界に逆戻りをしますが、まあそれでも動いてくれるのはTypeScriptらしいところではあります。<a href="https://go2goplay.golang.org/" target="_blank" rel="noopener">Goのジェネリクスだとエラーになる</a>のでインスタンス作成時に明示的な型変数指定が必要になります。</p><h2 id="関数、メソッドの引数"><a href="#関数、メソッドの引数" class="headerlink" title="関数、メソッドの引数"></a>関数、メソッドの引数</h2><p>引数から、それが属する関数の型変数への伝搬は可能です。というよりも、関数の型変数に推論で型を自動設定する方法は引数経由が唯一の方法です。</p><p>単なる<code>T</code>でなくても、<code>T[]</code>のような配列でも、<code>(input: T) =&gt; void</code>みたいな引数であっても、きちんと解決してくれます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>&lt;<span class="title">T</span>&gt;(<span class="params">a: T</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引数同士の伝搬も見逃せない要素です。Redux-Toolkitの<code>createSlice()</code>をシンプルに書くと次のようになります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSlice</span>&lt;<span class="title">S</span>&gt;(<span class="params">state: S, reducers: &#123;[key: <span class="built_in">string</span>]: (s: S) =&gt; S&#125;</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これの良い点は、最初の引数のinitialStateから型情報が伝搬し、2つ目のオブジェクトの型の定義が完成する点にあります。このreducersの関数をユーザーが作成する場合は、sはState型と分かっているのでコード補完が聞きますし、returnの方が間違えば即座に赤線が引かれます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> State = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: State = &#123;</span><br><span class="line">    name: <span class="string">"shibukawa"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">createSlice(initialState, &#123;</span><br><span class="line">    greeting: <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;s.name&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="関数の返り値"><a href="#関数の返り値" class="headerlink" title="関数の返り値"></a>関数の返り値</h2><p>関数の返り値の推論が賢いのはTypeScriptのうれしいところです。引数と違って返り値は内部のロジックで決まるので省略可能ですが、ESLintの推奨設定で<code>explicit-function-return-type</code>がデフォルトでONになっており、明示的に書かないといけません。僕はこの設定はオフにしてしまいますし、仮に宣言を省略しても.d.tsには型情報としては現れるし、コード補完は聞くし、型宣言をソースコードをgrepして目で見れない以外のデメリットはないです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> <span class="keyword">as</span> <span class="built_in">number</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span> <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これは次のように推論されます。なお、as number、as stringを外すと、 <code>10 | &quot;test&quot;</code>になります。</p><figure class="highlight ts"><figcaption><span>.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>): <span class="title">string</span> | <span class="title">number</span></span>;</span><br></pre></td></tr></table></figure><p>オブジェクトを返す場合は挙動がちょっと違います。Reduxのaction creatorでよく見るような次ような関数ですね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">"ADD_TODO"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: ADD_TODO,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これはこうなります。</p><figure class="highlight ts"><figcaption><span>.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>): </span>&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">    text: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>レスポンスを文字列型ではなくて、特定の文字列<code>ADD_TODO</code>固定としたい場合は、<code>as const</code>をつけます。↑の例のconstの変数を参照したままas constをつけるとエラーが出ますので、文字列リテラルにしています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ADD_TODO"</span> <span class="keyword">as</span> <span class="keyword">const</span>,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>): </span>&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ADD_TODO"</span>;</span><br><span class="line">    text: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>関数の返り値から、型ユーティリティの<code>ReturnType</code>を使うと、型を取り出すことが可能です。↑の<code>as const</code>はこの型を使う場合に大切になります。Reduxのreducerのactionの型指定で、すべてのAction Creatorの返り値の型の合併型を作るときに、”ADD_TODO”の部分が残っていると嬉しいからです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AddTodoAction = ReturnType&lt;<span class="keyword">typeof</span> addTodo&gt;;</span><br><span class="line"><span class="keyword">type</span> DoneTodoAction = ReturnType&lt;<span class="keyword">typeof</span> doneTodo&gt;;</span><br><span class="line"><span class="keyword">type</span> Actions = AddTodoAction | DoneTodoAction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  todos: [] <span class="keyword">as</span> Todo[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">&#123;todos&#125; = initialState, action: Actions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ADD_TODO"</span>: <span class="comment">// ここで各アクションの関数がreturnしてない文字列を書くとエラーが検知される</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;todos&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最初の例はADD_TODOをconst変数にしていました。変数の有無であればTypeScriptでなくてもJSでもエラーチェックが利くためにReduxで「アクションの識別子はconst変数にする」がベストプラクティスになったと思いますが、そもそもTypeScriptでは文字列のままでもチェックが利くので、変数宣言が省略できるようになりました。</p><p>このオブジェクトを返す場合の型定義は、ほとんどがnullableでない場合はこのように関数に直接書いてもいいですが、nullableだったり型指定のある配列だったりする場合は型アノテーションをたくさんつけなければならず、タイプ数が多くなってきてしまいますし、見通しも悪くなります。また複数箇所で利用する場合などは外部に型定義を書く方が良いですね。</p><p>なお、TypeScriptでは返り値を受け取る変数の型から、返り値の方を推論して決めることはできません。これはまあ返り値を受ける=代入なので、代入の右辺への推論が効かない以上、当然ですね。</p><h2 id="クラスとメンバー"><a href="#クラスとメンバー" class="headerlink" title="クラスとメンバー"></a>クラスとメンバー</h2><p>クラス側に型変数を定義すると、メンバーでも使えます。まあ当然ですね。メンバー変数と、メンバーメソッドの引数や返り値で利用可能です。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    append(i: T) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆に、メンバーで定義された型変数は他のメソッドやクラス側で使えません。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    append&lt;U&gt;(i: T, e: U) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(i);</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただし、コンストラクタを除きます。コンストラクタの引数を元に、型変数を決定することはできます。この特性は大切で、クラスの型変数に型を伝搬させるには、クラスの型変数にはコンストラクタを使う方法以外はありません。そうでなければ明示的に型を渡して初期化（<code>new List&lt;number&gt;()</code>しなければなりません。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">a: T</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解決できないのが<code>Promise</code>の引数のような<code>(asyncTask: (resolve: (i: T)=&gt;void) =&gt; void</code>といった、コンストラクタの引数が関数で、その関数の入力値で型を決めるようなケースです。このようなケースでは型が決定できず、<code>Promiseの型変数</code>は<code>unknown</code>のままです。この場合だけは<code>new Promise&lt;number&gt;</code>と明示的に書いてあげる必要があります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">10</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h2><p>ここがTypeScriptの型推論の秘孔かな、と思います。まず、Javaのthrows宣言がない（何が飛んでくるか事前にわからない）、<code>Promise</code>で<code>reject</code>に渡される例外の型定義がないからです。受け取り側に型として伝わる物が何もありません。</p><p>そもそも、TypeScriptは例外を扱うのが元のJavaScriptの特性もあって苦手です。</p><ul><li><a href="https://qiita.com/shibukawa/items/ffe7264ecff78f55b296" target="_blank" rel="noopener">JavaScript/TypeScriptの例外ハンドリング戦略を考える</a></li></ul><p>型の補完も効いて、タイプ数も少なくて済み、関数やメソッドの外で別の要素を定義しなくても良い方法は、Goスタイルで返り値の一部として返す方法なんじゃないかと思っています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcAge</span>(<span class="params">birthDay: <span class="built_in">Date</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> error = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> tNum = today.getFullYear() * <span class="number">10000</span> + (today.getMonth() + <span class="number">1</span>) * <span class="number">100</span> + today.getDate();</span><br><span class="line">    <span class="keyword">const</span> bNum = birthDay.getFullYear() * <span class="number">10000</span> + (birthDay.getMonth() + <span class="number">1</span> ) * <span class="number">100</span> + birthDay.getDate();</span><br><span class="line">    <span class="keyword">if</span> (bNum &gt; tNum) &#123;</span><br><span class="line">        error = <span class="string">"birthday is future"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        age = <span class="built_in">Math</span>.floor((tNum - bNum) / <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">120</span>) &#123;</span><br><span class="line">            error = <span class="string">"too old"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        age,</span><br><span class="line">        error,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これであれば補完も利くし、<code>if (res.error)</code>みたいに条件分岐も簡単です。</p><p>オライリーのTypeScript本では、正常系のレスポンスと、Errorの合併型を返し、受け取り側でinstanceofを使って条件わけをしていました。オブジェクトのほうが利用コード側のタイプ数は少ないので個人的には好きかな、と思いました。思いっきりGo風に寄せるためにタプルを使うこともできますが、それよりはオブジェクトの方がもろもろ良い気がします（受け手が分割代入で変数名を自分でつけなければならない、エラーを返す時にundefinedを入れる必要があるetc）。</p><h1 id="型推論の途中での型演算"><a href="#型推論の途中での型演算" class="headerlink" title="型推論の途中での型演算"></a>型推論の途中での型演算</h1><p>推論中に型の演算を行いたい、例えば、入力されたオブジェクトと同一のキーを持つが、シグネチャが全く別の関数を持つオブジェクトを定義して、それを返り値に使いたいとします。ちょうど、Redux <code>createSlice</code> が、<code>reducers</code>で渡されたreducerが格納されたオブジェクトを引数にとって、同じキーのアクションが入ったオブジェクトを作って、返り値の<code>actions</code>に入れて返しています。</p><p>型推論の流れとしては、引数→返り値のよくある推論なのですが、同じ型<code>T</code>を使うのではなくて、ちょっとした演算が必要です。この場合は、引数→関数の型変数→返り値と、関数の型変数をワンクッション置けば良いようです。</p><p>ジェネリックな型定義を、型を引数に持つ関数と見立てて作成します。まずはReducersと、Actionsを作ります。模擬コードなのでアクションの引数はなし、とします。</p><p>Reducersは関数の引数で渡されるオブジェクトで、Actionsは返り値で使うオブジェクトです。引数側はシンプルです。ステートの型を引数にとったら、それを引数にとって、返り値として返す関数を持つオブジェクトです。Actionsの方は、引数のR(reducer)を引数ニトリ、それと同じ属性を持つオブジェクトで、オブジェクトの値の型は、オブジェクトを返す関数です。<code>{[P in keyof R]: 値の型}</code>で、同じキーを持つ値の型違いのオブジェクトを作り出しています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reducers&lt;S&gt; =  &#123;[key: <span class="built_in">string</span>]: <span class="function">(<span class="params">s: S</span>) =&gt;</span> S&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Actions&lt;R&gt; = &#123;[P <span class="keyword">in</span> keyof R]: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;&#125;;</span><br></pre></td></tr></table></figure><p>次にcreateStateを定義します。Sはオブジェクトです。先ほど定義したActionsとReducersを使って関数定義を組み立ててみます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createState</span>&lt;<span class="title">S</span> <span class="title">extends</span> </span>&#123;&#125;&gt;(state: S, reducers: Reducers&lt;S&gt;): &#123; actions: Actions&lt;Reducers&lt;S&gt;&gt; &#125; &#123;</span><br><span class="line">    <span class="keyword">const</span> actions = &#123;&#125; <span class="keyword">as</span> &#123;[key: <span class="built_in">string</span>]: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key of <span class="built_in">Object</span>.keys(reducers)) &#123;</span><br><span class="line">        actions[key] = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">return</span> &#123;&#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        actions: actions <span class="keyword">as</span> Actions&lt;Reducers&lt;S&gt;&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで完成でしょうか？実は違います。<code>Reducers</code>は「任意のキーを持つオブジェクト」です。reducersと、actionsで、それぞれ<code>Reducers</code>を使っていますが、それぞれが「任意のキーを持つオブジェクト」であり、この2つが同じキーを持つという保証はこの型定義では行われていません。そのため、actionsのどのキーをアクセスしてみても、エラーは検出されません。</p><p>2つの<code>Reducers&lt;S&gt;</code>を1つにします。ここで、関数の型パラメータに1つ型変数を追加します。<code>extends</code>は型における「=」みたいなものです。関数の型変数を一時的な型置き場に使っています。それを入力側と、返り値と同じ型パラメータを渡すことで、「この2つが同じオブジェクト」であることが表現できます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createState</span>&lt;<span class="title">S</span> <span class="title">extends</span> </span>&#123;&#125;, ReducersType <span class="keyword">extends</span> Reducers&lt;S&gt;&gt;(state: S, reducers: ReducersType): &#123; actions: Actions&lt;ReducersType&gt; &#125; &#123;</span><br><span class="line">    <span class="keyword">const</span> actions = &#123;&#125; <span class="keyword">as</span> &#123;[key: <span class="built_in">string</span>]: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key of <span class="built_in">Object</span>.keys(reducers)) &#123;</span><br><span class="line">        actions[key] = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">return</span> &#123;&#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        actions: actions <span class="keyword">as</span> Actions&lt;ReducersType&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、期待通りの、「同じキーを持つ別の型」をレスポンスの型に設定できました。</p><h1 id="これからのAPI設計"><a href="#これからのAPI設計" class="headerlink" title="これからのAPI設計"></a>これからのAPI設計</h1><p>Redux-ToolkitのAPI設計を見ると、コードを書くタイミングで、そのコードの環境（型推論用語です）がコーディングの手伝いをしてくれるようなAPIデザインになっています。</p><ul><li>コード補完がぱちっと決まる</li><li>推論が決まる(型変数を明示的に設定しなくてもいい)</li><li>エラーが即座に分かる</li><li>余計な型定義や定数定義などをしなくても済む、必要であっても、使う場所と定義位置がとても近い。</li></ul><p>一言で言えば、「記憶力をあまり必要としない」でコーディングができます。おそらく、同じアウトプットを産み出すための脳の酸素使用量が少ない、みたいな感じで「わかりやすいコード」は定量的に計測は可能な気がします。まあ試したことはないですが。</p><p>コード補完がばちっと決まって推論が決まるのは、anyやunknownになりにくい設計ですね。いろいろな型推論を紹介してきましたが、大きな流れとしては大きく2つですね。推論の起点となるのは、関数の引数とクラスコンストラクタの引数の2箇所です。基本的にはこの流れにうまく乗る、ということになります。</p><ul><li>引数→関数の型変数、返り値</li><li>コンストラクタの引数→クラスの型変数→メンバーメソッドの引数や返り値</li></ul><p>ReduxやRedux Toolkitを使うにあたって、ユーザーはStateは定義する必要があります。まあこれはReduxを使うユーザーの関心ごとそのものなので、これは良いでしょう。これを一度設計したらこれを最大限に活用できる、というのが目指す世界です。シンプルな入出力だけのライブラリであれば引数から推論をきちんとしましょう、で完結ですが、Redux-Toolkitとかのように、ユーザーが指定したデータ型を入力か出力に使うreducerのような（別の例だと、オブジェクト指向用語でいうところのテンプレートメソッドのホットスポット、あるいはGUIのイベントのハンドラ）コードを実装しなければならない場面が、そこそこ複雑なケースです。</p><p>Redux-Toolkitはオブジェクトを受け取る関数という形態でした。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> State = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: State = &#123;</span><br><span class="line">    name: <span class="string">"shibukawa"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">createSlice(initialState, &#123;</span><br><span class="line">    greeting: <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;s.name&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>人によっては「クラスを使ってイベントハンドラも定義したい」と思う方もいると思いますが、よくよく考えると、Redux-Toolkitスタイル以外は難しいことがわかります。</p><p>「関数の入ったオブジェクト」というのは、クラスがなかった時代にみんながオレオレクラス作っていたときによく見かけた悪い慣習ですが、TypeScript的には扱いやすいのです。関数のシグネチャを同一にそろえることが簡単です。型ユーティリティを使えば、オブジェクトのキー一覧が取得できます。ユーザーが定義したreducerのリストを使って、型補完を利用しながらactionsを作り出すこともできました。</p><p>クラスも一応、キーの一覧の取得までは可能です。ただ、取得はできても、ユーザーが任意の名前で定義する新しいメソッドに対して、特定のシグネチャを要求して、それ以外が作成されたら編集中にエラーを出す、というのはできないんじゃないですかね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">    methodA(a :State) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    methodB(a :State) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> keys = keyof A; <span class="comment">// "methodA" | "methodB"</span></span><br></pre></td></tr></table></figure><p>デスクトップGUI時代によく用いられていたテンプレートメソッドのように、固定の名前だけを許す場合にはクラスでも可能です。ReactやVue.jsのクラス方式のコンポーネントのライフサイクルメソッドはそれですね。しかし、各メソッドのシグニチャを強制することまではできません。reducersのように、任意のキーで定義を増やせるようなものは「関数を値に持つオブジェクト」にせざるをえないかな、と思います。</p><p>なお、JavaScriptユーザーを完全に無視するなら、別の方法もあります。AngularがDIを実現するのにつかっている（と思う）のが、tsconfigの<code>emitDecoratorMetadata</code>というオプションです。このオプションの裏では<a href="https://www.npmjs.com/package/reflect-metadata" target="_blank" rel="noopener">reflect-metadata</a>というパッケージが使われていて、型情報を動的に取得してさまざまなことを実現します。ただし、このメタデータを使った動的なロジックはエディタの補完やコーディング時のチェックはしてくれないので、型情報と推論を使った方がユーザービリティは高い気がします。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>TypeScriptの型というと、エラーチェック、ミスの削減、みたいな論調で語られることが99%ですが、使う人にとって使いやすいAPIというのを新しく作り出せるのではないか、ということで思考実験してみました。</p><p>JavaScript時代は型がなかったので、次のような設計もよく作られていました。あとはjQueryとかですね。その手の設計はJavaScript時代にはよかったかもしれませんが、TypeScript時代にはまた別の設計が必要と思っています。もちろん、↓のような型定義もできて、文字列の名前によってイベントハンドラの引数のEventの型が変わったり、返り値の型が変わったり（<code>createElement</code>のように）とか、その手の厳しい要件にも適合するようにTypeScriptでは機能を持っていたりもしますが（オライリーのプログラミングTypeScriptのP65あたり）、それはあくまでも過去と現在をつなげるためのものであって、未来に使う文法ではないと思うのですよね。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.on(<span class="string">"イベント名"</span>, イベントハンドラ)</span><br></pre></td></tr></table></figure><p>Vue.js 3も、今までのオブジェクトをダイレクトでコンポーネンントとしていた方向から、defineComponent関数の引数のオブジェクトで定義となりました。ベータ版のvue-cliだと、もともとTSとの相性が悪くなかったクラスの方がデフォルトになっており（選択肢がクラスベースのフォーマットを使うか(Y/n)となっており、エンター連打だとこちらではなく、クラスの方になる)、こちらがどれだけ普及するかは分からないですが、これもTypeScriptによりそった設計変更なんじゃないですかね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defineComponent(&#123;</span><br><span class="line">   <span class="comment">// ここなら補完やチェックがきく！</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JavaScript===TypeScriptが吐き出す物、フロントエンド開発者はTypeScriptしか書かないという時代にあわせたAPIデザインについて、一緒に考えていきましょう。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200730/top.png&quot;&gt;


&lt;p&gt;TypeScriptは、JavaScriptのさまざまなフリーダムな書き方を受け入れ、漸進的な型付けを行えるようにするという&lt;del&gt;狂った&lt;/del&gt;高難易度な目的のために作成されているのですが
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>AWS認定 Machine learning specialty 合格記</title>
    <link href="https://future-architect.github.io/articles/20200729/"/>
    <id>https://future-architect.github.io/articles/20200729/</id>
    <published>2020-07-28T15:00:00.000Z</published>
    <updated>2020-07-29T01:19:16.953Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>先日もう一人の伊藤さんが<a href="https://future-architect.github.io/articles/20200629/">Terraform Associate合格記</a>を書いてくれました。この記事に続いて資格の記事を書いてみようと思います。余談ですがこちらの伊藤さんとの区別がつくように自己紹介はフルネームで書いています。</p><p>私はAWSの資格を4つほど持っているのですが、今回は<a href="https://aws.amazon.com/jp/certification/certified-machine-learning-specialty/" target="_blank" rel="noopener">AWS認定 機械学習 - 専門知識</a>について紹介します。ちなみに機械学習の資格は実務経験0から2カ月ほど学習して合格しました。</p><p>前提知識0の人も対象になるような記事を目指して記載します。</p><img src="/images/20200729/badge.png" class="img-small-size"><h1 id="この記事の目的"><a href="#この記事の目的" class="headerlink" title="この記事の目的"></a>この記事の目的</h1><p>AWS認定試験で要求される知識、学習法についてまとめます。<br>大まかな概要、各分野の具体的な内容を記載していきます。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ol><li>AWS 認定 機械学習 – 専門知識とは</li><li>要求される知識</li><li>学習方法について</li><li>まとめ</li></ol><p><a id="anchor1"></a></p><h1 id="AWS-認定-機械学習-–-専門知識とは"><a href="#AWS-認定-機械学習-–-専門知識とは" class="headerlink" title="AWS 認定 機械学習 – 専門知識とは"></a>AWS 認定 機械学習 – 専門知識とは</h1><p>その名の通り、AI開発、データサイエンスを業務で行う人向けの資格試験です。<br>AWSの認定試験の中では珍しく、AWSのサービスに特化した試験ではなく機械学習の基礎知識も要求される点が特徴です。<br><a id="anchor2"></a></p><h1 id="要求される知識"><a href="#要求される知識" class="headerlink" title="要求される知識"></a>要求される知識</h1><p><a href="https://aws.amazon.com/jp/certification/certified-machine-learning-specialty/" target="_blank" rel="noopener">AWS認定の公式サイト</a>には下記のように書いてあります。</p><blockquote><p>認定によって検証される能力</p><ul><li>与えられたビジネスの問題に対し、適切な ML アプローチを選び、その理由を説明できる</li></ul></blockquote><ul><li>ML ソリューションの実装に適した AWS のサービスを選択する</li><li>スケーラビリティ、コスト効率、信頼性、安全性に優れた ML ソリューションを設計し、実装する</li></ul><blockquote><p>推奨される知識と経験</p><ul><li>AWS クラウドでの ML/深層学習ワークロードの開発、設計、実行における、1～2 年の経験</li></ul></blockquote><ul><li>基本的な ML アルゴリズムの基となる考えを表現する能力</li><li>基本的なハイパーパラメータ最適化の実践経験</li><li>ML および深層学習フレームワークの使用経験</li><li>モデルトレーニングのベストプラクティスを実行する能力</li><li>デプロイと運用のベストプラクティスを実行する能力</li></ul><p>自分の受験経験から要求される知識を下記のカテゴリに分類しました。</p><ul><li>目的に対し最適な機械学習アルゴリズムを選定するための知識</li><li>作成した機械学習モデルの性能を判定するための知識</li><li>データエンジニアリングに関する知識</li><li>分散処理システムの構築などインフラ寄りの知識</li><li>機械学習のAWSマネージドサービスに対する知識</li><li>サービスの構築、運用に関する知識</li></ul><h2 id="目的に対し最適な機械学習アルゴリズムを選定するための知識"><a href="#目的に対し最適な機械学習アルゴリズムを選定するための知識" class="headerlink" title="目的に対し最適な機械学習アルゴリズムを選定するための知識"></a>目的に対し最適な機械学習アルゴリズムを選定するための知識</h2><p>機械学習モデルにはさまざまな学習アルゴリズムが存在します。<br>機械学習を用いて課題を解決するために、目的に対し最適なアルゴリズムの選択を行う知識が要求されます。</p><p>例えば画像分類にはCNN(畳み込みニューラルネットワーク)が、時系列データの取り扱いにはRNN(再帰型ニューラルネットワーク)を選定できるような知識です。</p><p>言語処理に特化したアルゴリズム、音声処理における最適解など、目的から手段を導き出すためにはこれらのアルゴリズムがどのような分野を得意とするかを学ぶ必要があります。線形学習やロジスティック回帰など基礎的なアルゴリズムや、CNN、RNNの特徴、tr-idfなどの一般的な知識を理解できている事が要求されます。特に、<a href="https://aws.amazon.com/jp/sagemaker/" target="_blank" rel="noopener">Amazon SageMaker</a>で提供される組み込みアルゴリズムの概要を理解して、各アルゴリズムの特徴を理解する必要があります。</p><p>アルゴリズムの種類、概要は<a href="https://docs.aws.amazon.com/ja_jp/sagemaker/latest/dg/algos.html" target="_blank" rel="noopener">Amazon SageMakerのドキュメント</a>に記載されています。</p><p>例えば、ニュースの記事と要約のデータセットを学習させ、ニュース記事から要約を自動生成したい、というユースケースが出題され、4択程度のSageMaker組み込みアルゴリズムが選択肢として用意されます。<br>その中からSequence to Sequenceなどを選べるようになることが目的です。<br>例題</p><blockquote><p>カスタマーサポートのシステム構築を行っています。<br>お問い合わせの内容の類似性に基づいて、重複する質問を特定したいと考えています。<br>この問題の解決にどのSageMakerアルゴリズムが利用できますか。<br>A: BlazingText<br>B: Object2Vec<br>C: K-means<br>D: DeepAR</p></blockquote><blockquote><p>正解: B</p></blockquote><h2 id="作成した機械学習モデルの性能を判定するための知識"><a href="#作成した機械学習モデルの性能を判定するための知識" class="headerlink" title="作成した機械学習モデルの性能を判定するための知識"></a>作成した機械学習モデルの性能を判定するための知識</h2><p>機械学習モデルの性能を示す指標として、正確度（accuracy）、精度（precision）、再現率（recall）といった概念が存在します。少し高度なものではAUC、ROCなどの指標があります。</p><p>これらの指標や、指標の測定で用いるパラメータであるTP、FP、TN、FN(真陽性、偽陽性、真陰性、偽陰性)について理解することが求められます。TP、FP、TN、FNがテーブル形式でまとめられた表から精度を計算するような問題も出題されることがあります。（数字としてはその場で電卓を使わずに計算できるようなものです。）</p><p>また、構築したいソリューションにおいてどの指標が重要視されるのかを理解する必要があります。例えばスパムメールを検知する機械学習モデルにおいて最も重要視される指標は正確度、精度、再現率のうちどれかを答えるような問題が出題されます。</p><p>例題</p><blockquote><p>サブスクリプションサービスを提供するA社では、顧客の解約を防ぐため、顧客が解約する可能性があるかどうかを予測するモデルを2つ構築しました。<br>モデルAは、100の偽陰性（FN）と40の偽陽性（FP）で92％の精度です。<br>モデルBは、40のFNと100のFPで92％の精度でした。<br>2つのモデルのどちらがA社にとってコスト効果が高いでしょうか。</p><p>正解: モデルB</p></blockquote><h2 id="機械学習モデルの性能向上に関する知識"><a href="#機械学習モデルの性能向上に関する知識" class="headerlink" title="機械学習モデルの性能向上に関する知識"></a>機械学習モデルの性能向上に関する知識</h2><p>機械学習モデルの構築では、期待した性能のモデルを構築できない場合にその原因を推測する必要があります。</p><ul><li>機械学習モデルが過学習の状態に陥った際にデータにどのような前処理を施すか。</li><li>充分な数の学習データが集まっていない場合にどのような手段で性能の高い機械学習モデルを構築するか</li></ul><p>といったトピックに対する問題が出題されます。</p><p>正規化、正則化、データの水増し、箱ひげ図の読み取り方、学習率などハイパーパラメータの調整といった機械学習の知識が求められます。</p><p>例題</p><blockquote><p>作成した機械学習モデルが、トレーニングデータでは高精度であるが、テストデータに対して低精度であることに気付きました。<br>この問題の解決が見込める手法はどれでしょうか。<br>A: データの正則化処理を削除する<br>B: 使用するトレーニングデータを少なくする<br>C: データから利用する特徴量を減らす</p></blockquote><blockquote><p>正解: C</p></blockquote><h2 id="分散処理システムの構築などインフラ寄りの知識"><a href="#分散処理システムの構築などインフラ寄りの知識" class="headerlink" title="分散処理システムの構築などインフラ寄りの知識"></a>分散処理システムの構築などインフラ寄りの知識</h2><p>機械学習での分散処理システムに関する知識とは、<code>Apache</code>の<code>Hadoop</code>,<code>Hive</code>, <code>Spark</code>といった分散処理フレームワークに対する理解と換言する事ができます。</p><p>AWSのマネージドサービスとしては<code>Amazon EMR</code>、<code>AWS Glue</code>について理解していることが要求されます。またそれらのサービスと連携する<code>Amazon Athena</code>、<code>Amazon Kinesis</code>についての知識や、データウェアハウスとして<code>Amazon Redshift</code>、機械学習における<code>Amazon S3</code>の使用例が出題範囲に含まれます。</p><p>これらのサービスは実体験無しで各サービスの違いや挙動を理解するのがとても難しい分野ですが、出題されたユースケースに対し、どのようなサービスの組み合わせが最適か考えるような問題が出題されます。</p><p>例題:</p><blockquote><p>ソーシャルゲームの運用で、JSON形式の利用分析データを取り込むシステムの構築を行います。基盤となるインフラストラクチャを管理することを望んでおらず、データをすぐに利用できるようにしたいと考えています。ソリューションはコスト効率が高く、スケーラブルでなければなりません。どのようなソリューションが推奨されますか。</p></blockquote><blockquote><p>A:<br>Kinesis Data Streamsを使用してデータを取り込み、Lambda関数を使用してストリームをS3に保存します。<br>15分ごとにGlue ETLジョブを起動して、データをJSONからParquet形式に変換します。<br>AWS Glueクローラーを使用して、データをAthenaテーブルに読み込みます。</p></blockquote><blockquote><p>B:<br>S3への書き込み中にデータをParquet形式に変換する設定でKinesis Firehoseを使用してデータを取り込みます。<br>AWS Glueクローラーを使用して、データをAthenaテーブルに読み込みます。</p></blockquote><blockquote><p>正解: B</p></blockquote><h2 id="機械学習のAWSマネージドサービスに対する知識"><a href="#機械学習のAWSマネージドサービスに対する知識" class="headerlink" title="機械学習のAWSマネージドサービスに対する知識"></a>機械学習のAWSマネージドサービスに対する知識</h2><p><code>Amazon Sage Maker</code>、<code>Amazon EMR</code>などのマネージドサービスの詳細な利用方法について出題されることもあります。また、機械学習のノウハウがほとんど無い状態からでも機械学習サービスが提供可能になるような、マネージドな側面が極めて高いサービスに関する問題も出題されます。</p><p>テキスト分析に用いる<code>AMAZON COMPREHEND</code>、音声を文字起こしできる<code>AMAZON TRANSCRIBE</code>、時系列データの予測を行う<code>AMAZON FORECAST</code>…といった類のサービスです。<a href="https://aws.amazon.com/jp/machine-learning/" target="_blank" rel="noopener">aws公式サイト「AWS での機械学習」</a>のAI サービス一覧で紹介されています。<br>各サービスの概要、ユースケースを把握し、適切に選択できるように、また存在しないサービスがブラフとして選択肢に出現しても騙されないようしっかりと理解しておく必要があります。</p><p>概要レベルではなく、例えば<code>Amazon Transcribe</code>が対応している言語を把握しておき、非対応の言語の場合<code>Amazon Translate</code>で翻訳してから<code>Amazon Transcribe</code>にデータを受け渡すようなサービス構築が正解となるような深い理解が要求される問題も出題されます。<br>これらのサービスは日々新しいものが増え、既存のサービスも機能が追加されます、入念なキャッチアップが必要なジャンルです。</p><p>例題:</p><blockquote><p>顔写真から有名人を検出できるアプリを作成したいと考えています。<br>最小限の労力でこれをセットアップするのに役立つAWSサービスはどれですか。<br>A: Amazon Predict<br>B: Amazon Rekognition<br>C: Amazon Polly<br>D: Amazon Comprehend</p></blockquote><blockquote><p>正解: B</p></blockquote><h2 id="サービスの構築、運用に関する知識"><a href="#サービスの構築、運用に関する知識" class="headerlink" title="サービスの構築、運用に関する知識"></a>サービスの構築、運用に関する知識</h2><p>機械学習に直結する知識ではありませんが、ビジネスレベルでアプリケーションの構築を行う上でのAWSサービスの知識も問われることがあります。</p><p>具体的にはIAMの設定など、運用面で設定する必要のある項目について出題されます。</p><p>例題</p><blockquote><p>デフォルトのIAMロールを使用してSageMakerノートブックインスタンスを作成しました。S3のデータへのアクセスはどのように管理されますか？<br>A: デフォルトで使用可能なバケットはありません<br>B: 名前に「sagemaker」が含まれるバケットは、デフォルトの役割でアクセスできます<br>C: パブリックアクセスが有効なバケットは、デフォルトの役割でアクセスできます</p></blockquote><blockquote><p>正解: B</p></blockquote><p><a id="anchor3"></a></p><h1 id="学習方法について"><a href="#学習方法について" class="headerlink" title="学習方法について"></a>学習方法について</h1><p>ざっくりと内容を説明しましたが、合格への筋道は見えてきましたでしょうか。<br><code>ソリューションアーキテクト-アソシエイト</code>や<code>クラウドプラクティショナー</code>など、AWSの資格を持っていない方が最初に受ける傾向が高い試験は1冊読んでおけば合格できるような質の高い書籍が存在します。</p><p>しかし機械学習-専門知識は知識が広範かつAWSに特化した内容ではない部分も多く、まだ必要な知識を体系的にまとめた書籍が存在しません。<br>そういった意味でも厳しい試験ですが、参考までに自分が学習に利用した書籍、サービスを紹介します。</p><h2 id="そもそもAIに対する知識が無い人向け"><a href="#そもそもAIに対する知識が無い人向け" class="headerlink" title="そもそもAIに対する知識が無い人向け"></a>そもそもAIに対する知識が無い人向け</h2><p>AIに興味はあるものの実際にAIに触れたことがない、という方もいると思います。その状態から試験問題に特化した知識を詰め込み教育的手法で学ぶのは限界があります。急がば回れ、ということでまずは機械学習の概要から学んでいくと良いと思います。</p><p>AWSの試験に合格するには、Pythonの各種フレームワークを用いたコーディングレベルの知識や、具体的なアルゴリズムの数式についての知識は必要なく、概念的な部分を押さえておけばOKです。回帰、分類、線形分離といった概念から各種アルゴリズムを概念的に大まかに把握しておく程度の学習で、試験に必要な知識を学ぶ上で役に立つと思います。</p><p>前提知識を学ぶために機械学習初心者向けの本を１冊読んでおく事をお勧めします。<br>私は好奇心から<a href="https://www.amazon.co.jp/Python-%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E9%81%94%E4%BA%BA%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%82%B9%E3%83%88%E3%81%AB%E3%82%88%E3%82%8B%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%B7%B5-impress-gear/dp/4295003379/ref=asc_df_4295003379/?tag=jpgo-22&linkCode=df0&hvadid=295678107984&hvpos=&hvnetw=g&hvrand=17590793615228539759&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1009243&hvtargid=pla-524387980046&psc=1&language=ja_JP&th=1&psc=1" target="_blank" rel="noopener">Python 機械学習プログラミング 達人データサイエンティストによる理論と実践</a>という書籍を購入しました。</p><p>試験に対しては過剰なほど詳細に機械学習の概要が書いてあります、正直読むだけで一苦労でした。</p><h2 id="AWSに関する知識を学ぶ方法"><a href="#AWSに関する知識を学ぶ方法" class="headerlink" title="AWSに関する知識を学ぶ方法"></a>AWSに関する知識を学ぶ方法</h2><p>現状機械学習関連のサービスが書籍の形式でまとまっているものはありません。正攻法の手段としては下記のような流れで学習を進めていきます。</p><ul><li><a href="https://docs.aws.amazon.com/index.html" target="_blank" rel="noopener">公式ドキュメント</a>の機械学習のジャンルを読破する</li><li><a href="https://aws.amazon.com/jp/training/learning-paths/machine-learning/exam-preparation/" target="_blank" rel="noopener">機械学習: 試験準備</a>のページに従って学習を進めていく</li></ul><p>愚直に学習する時間の捻出が難しい場合、合格する自信が持てず副教材が必要な場合はudemyなどの学習サイトでカリキュラムや試験問題を購入することをお勧めします。</p><p><a id="anchor4"></a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>この記事が試験勉強の補助となれば、また試験を受けてみようと思っていただけるきっかけになれば幸いです。<br>学習のハードルは高めなので、ソリューションアーキテクトのように１冊の本にまとまる日が来てほしいですね。<br>関連記事としてフューチャー技術ブログの<a href="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</a>、<a href="https://future-architect.github.io/tags/MachineLearning/">Machine Learning</a>タグの記事も是非ご覧ください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;先日もう一人の伊藤さんが&lt;a href=&quot;https://future-architect.github.io/articles/20200629/&quot;&gt;Terraform Associate合格記&lt;/a&gt;を書いてくれました。この記事に続
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>DBスキーマを駆動にした開発のためのライブラリ調査</title>
    <link href="https://future-architect.github.io/articles/20200728/"/>
    <id>https://future-architect.github.io/articles/20200728/</id>
    <published>2020-07-27T15:00:00.000Z</published>
    <updated>2020-07-27T14:48:28.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Goでデータベースを扱う場合、<a href="https://github.com/go-gorm/gorm" target="_blank" rel="noopener">Gorm</a>, <a href="https://github.com/go-gorp/gorp" target="_blank" rel="noopener">Gorp</a>, <a href="https://github.com/jmoiron/sqlx" target="_blank" rel="noopener">sqlx</a> といった ORM がよく使われます。多くの場合は構造体のフィールドとデータベースのカラム名のマッピングをするタグ付きの構造体を実装します。例えば <code>Gorm</code> を用いて <code>users</code> テーブルにアクセスする場合、以下のような構造体が一例として考えられます。</p><figure class="highlight go"><figcaption><span>model_user.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">UserID    <span class="keyword">string</span>       <span class="string">`gorm:"column:user_id;primary_key"`</span></span><br><span class="line">UserName  <span class="keyword">string</span>       <span class="string">`gorm:"column:user_name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"users"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Gorm</code> や <code>Xorm</code> といった ORM を用いる場合、スキーマから構造体を生成できず、構造体の生成が面倒という問題があります。複数人で開発していたり、テーブルのカラム数が多かったり、テーブルの数が多い場合、スキーマから構造体を自動生成できるとよいな、と考えることでしょう。 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>また、当社のメンバと開発するとき SQL が書け適切に index を貼ったり、実行計画からチューニングできるメンバが多いです。素の SQL を書く or 書きたいケースが多く、メソッドチェーンでクエリを生成する <code>Gorm</code> などの ORM と相性が悪いと感じていました。</p><ul><li><strong>スキーマからテーブルのカラムとマッピングできる構造体を自動生成したい</strong></li><li><strong>任意のクエリから結果セットのカラムとマッピングできる構造体を自動生成したい</strong></li></ul><p>上記を満たすようなライブラリを探しつつ、今回は既に存在するデータベースのスキーマやクエリから構造体を生成することができる <code>xo</code> と <code>gen</code> を調査してみました。</p><ul><li><a href="https://github.com/xo/xo" target="_blank" rel="noopener">xo/xo</a></li><li><a href="https://github.com/smallnest/gen" target="_blank" rel="noopener">gen</a></li></ul><p><a href="https://github.com/volatiletech/sqlboiler" target="_blank" rel="noopener">SQLBoiler</a> や <a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">Xorm</a> は ORM として使われることが多いので対象から外しました。<code>SQLBoiler</code> や <code>Xorm</code> の所感は <a href="https://future-architect.github.io/articles/20190926/">Go言語のDBレイヤーライブラリの評価</a> の記事に記載しておりますので、あわせてご確認ください。</p><h2 id="概要サマリ"><a href="#概要サマリ" class="headerlink" title="概要サマリ"></a>概要サマリ</h2><p>今回調査するライブラリの2020/07/12時点のデータをもとにした概要サマリです。どちらのライブラリも継続的にメンテナンスされています。</p><table><thead><tr><th>Project Name</th><th>Stars</th><th>Forks</th><th>Open Issues</th><th>Description</th><th>Last Update</th></tr></thead><tbody><tr><td><a href="https://github.com/xo/xo" target="_blank" rel="noopener">xo</a></td><td>2503</td><td>224</td><td>91</td><td>Command line tool to generate idiomatic Go code for SQL databases supporting PostgreSQL, MySQL, SQLite, Oracle, and Microsoft SQL Server</td><td>2020-07-10 11:12:42</td></tr><tr><td><a href="https://github.com/smallnest/gen" target="_blank" rel="noopener">gen</a></td><td>565</td><td>105</td><td>3</td><td>Converts a database into gorm structs and RESTful api</td><td>2020-07-10 14:19:19</td></tr></tbody></table><ul><li>バージョン</li></ul><p>今回調査したバージョン情報は以下になります。<code>xo</code> はセマンティクスバージョニングされていなかったため、コミット ID を記載しています。</p><table><thead><tr><th>ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td><code>xo</code></td><td><code>7818603ff52bc0b96122715f9c7df7559aeef82d</code></td></tr><tr><td><code>gen</code></td><td><code>v0.9.24</code></td></tr></tbody></table><h2 id="サンプルプロジェクト"><a href="#サンプルプロジェクト" class="headerlink" title="サンプルプロジェクト"></a>サンプルプロジェクト</h2><p>本記事では <code>xo</code> のライブラリにサンプルとして記載されている <code>booktest</code> をサンプルのプロジェクトとして考えてみます。データベースは PostgreSQL を採用することとし、Docker を用いて以下のようにローカルに起動させておきます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --name my-postgres -e POSTGRES_USER&#x3D;booktest -e POSTGRES_PASSWORD&#x3D;pass -e POSTGRES_DB&#x3D;testdb -d -p 15432:5432 postgres</span><br></pre></td></tr></table></figure><p>データベースの ER 図は以下のようになります。</p><p><img src="/images/20200728/erd.png" alt=""></p><p>スキーマを作成する SQL は以下になります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- The MIT License (MIT)</span></span><br><span class="line"><span class="comment">-- </span></span><br><span class="line"><span class="comment">-- Copyright (c) 2015-2016 Kenneth Shaw</span></span><br><span class="line"><span class="comment">-- </span></span><br><span class="line"><span class="comment">-- https://github.com/xo/xo/blob/master/LICENSE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> booktest <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> books <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TYPE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> book_type <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">authors</span> <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> say_hello(<span class="built_in">text</span>) <span class="keyword">CASCADE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> booktest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">authors</span> (</span><br><span class="line">  author_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> authors_name_idx <span class="keyword">ON</span> <span class="keyword">authors</span>(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> book_type <span class="keyword">AS</span> ENUM (</span><br><span class="line">  <span class="string">'FICTION'</span>,</span><br><span class="line">  <span class="string">'NONFICTION'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books (</span><br><span class="line">  book_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  author_id <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">REFERENCES</span> <span class="keyword">authors</span>(author_id),</span><br><span class="line">  isbn <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  booktype book_type <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'FICTION'</span>,</span><br><span class="line">  title <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="keyword">year</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">2000</span>,</span><br><span class="line">  available <span class="built_in">timestamp</span> <span class="keyword">with</span> <span class="built_in">time</span> zone <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'NOW()'</span>,</span><br><span class="line">  tags <span class="built_in">varchar</span>[] <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'&#123;&#125;'</span>,</span><br><span class="line">  memo <span class="built_in">text</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> books_title_idx <span class="keyword">ON</span> books(title, <span class="keyword">year</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> say_hello(<span class="built_in">text</span>) <span class="keyword">RETURNS</span> <span class="built_in">text</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">RETURN</span> <span class="keyword">CONCAT</span>(<span class="string">'hello '</span>, $<span class="number">1</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> books_title_lower_idx <span class="keyword">ON</span> books(title);</span><br></pre></td></tr></table></figure><h2 id="xo"><a href="#xo" class="headerlink" title="xo"></a>xo</h2><p><code>xo</code> はデータベースのスキーマや任意の SQL からデータベースにアクセスする Go のコードを生成するライブラリです。生成するコードはテンプレートファイルを使って柔軟にカスタマイズできます。ORM を目指したライブラリではなく、静的に型付けされた Go らしいコードを生成することを目的の 1 つとしています。</p><p>まずは <code>xo</code> を試してみます。ディレクトリ構成は以下です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.mod</span><br><span class="line">├── main.go</span><br><span class="line">└── generated</span><br></pre></td></tr></table></figure><p>さっそく <code>xo</code> をインストールします。2020/07/13現在、セマンティクスバージョニングはされていないため、master ブランチの最新のコミット(<code>7818603ff52bc0b96122715f9c7df7559aeef82d</code>) を用います。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com&#x2F;xo&#x2F;xo</span><br></pre></td></tr></table></figure><p>生成先のディレクトリ名は <code>generated</code> とします。<code>xo</code> コマンドを用いて、構造体を生成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xo pgsql:&#x2F;&#x2F;booktest:pass@localhost:15432&#x2F;testdb?sslmode&#x3D;disable --schema booktest --out generated</span><br></pre></td></tr></table></figure><p><code>generated</code> ディレクトリ配下にいくつかファイルが生成されました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── generated</span><br><span class="line">│   ├── author.xo.go</span><br><span class="line">│   ├── book.xo.go</span><br><span class="line">│   ├── booktype.xo.go</span><br><span class="line">│   ├── sp_sayhello.xo.go</span><br><span class="line">│   └── xo_db.xo.go</span><br><span class="line">├── go.mod</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p>生成されたファイル <code>author.xo.go</code> を確認します。ファイルの構成は、大きく SELECT を扱うクエリ用の関数と、それ以外の INSERT, UPDATE, DELETE といったクエリを扱うメソッドと 2 種類に大別できます。</p><h3 id="SELECT系"><a href="#SELECT系" class="headerlink" title="SELECT系"></a>SELECT系</h3><p>SELECT を扱うクエリでは以下の 2 つの関数が生成されています。</p><ul><li><code>AuthorsByName(db XODB, name string) ([]*Author, error)</code> </li><li><code>AuthorByAuthorID(db XODB, authorID int) (*Author, error)</code></li></ul><p>それぞれ関数のドキュメントからデータベースに貼られた index をもとに生成されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AuthorsByName retrieves a row from 'booktest.authors' as a Author.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from index 'authors_name_idx'.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorsByName</span><span class="params">(db XODB, name <span class="keyword">string</span>)</span> <span class="params">([]*Author, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AuthorByAuthorID retrieves a row from 'booktest.authors' as a Author.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from index 'authors_pkey'.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorByAuthorID</span><span class="params">(db XODB, authorID <span class="keyword">int</span>)</span> <span class="params">(*Author, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>関数内に SQL が明示的に記述されていて安心感があります。また index から生成されているので、概ねクエリは高速に動作するでしょう。ただし関数のシグネチャや、データベースアクセスするメソッドのシグネチャから分かるように <code>Context</code> を引数に受け取ることができません。多くのケースでは <code>Context</code> を引き回すケースが一般的ですので、Context 対応はテンプレートなどを用いて拡張する必要がありそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AuthorByAuthorID retrieves a row from 'booktest.authors' as a Author.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from index 'authors_pkey'.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorByAuthorID</span><span class="params">(db XODB, authorID <span class="keyword">int</span>)</span> <span class="params">(*Author, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql query</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`SELECT `</span> +</span><br><span class="line"><span class="string">`author_id, name `</span> +</span><br><span class="line"><span class="string">`FROM booktest.authors `</span> +</span><br><span class="line"><span class="string">`WHERE author_id = $1`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run query</span></span><br><span class="line">XOLog(sqlstr, authorID)</span><br><span class="line">a := Author&#123;</span><br><span class="line">_exists: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = db.QueryRow(sqlstr, authorID).Scan(&amp;a.AuthorID, &amp;a.Name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;a, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="INSERT-UPDATE-DELETE系"><a href="#INSERT-UPDATE-DELETE系" class="headerlink" title="INSERT/UPDATE/DELETE系"></a>INSERT/UPDATE/DELETE系</h3><p>INSERT のクエリも SELECT と同様に、INSERT するメソッドが生成されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Author represents a row from 'booktest.authors'.</span></span><br><span class="line"><span class="keyword">type</span> Author <span class="keyword">struct</span> &#123;</span><br><span class="line">AuthorID <span class="keyword">int</span>    <span class="string">`json:"author_id"`</span> <span class="comment">// author_id</span></span><br><span class="line">Name     <span class="keyword">string</span> <span class="string">`json:"name"`</span>      <span class="comment">// name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// xo fields</span></span><br><span class="line">_exists, _deleted <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert inserts the Author to the database.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Author)</span> <span class="title">Insert</span><span class="params">(db XODB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// if already exist, bail</span></span><br><span class="line"><span class="keyword">if</span> a._exists &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"insert failed: already exists"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql insert query, primary key provided by sequence</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`INSERT INTO booktest.authors (`</span> +</span><br><span class="line"><span class="string">`name`</span> +</span><br><span class="line"><span class="string">`) VALUES (`</span> +</span><br><span class="line"><span class="string">`$1`</span> +</span><br><span class="line"><span class="string">`) RETURNING author_id`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run query</span></span><br><span class="line">XOLog(sqlstr, a.Name)</span><br><span class="line">err = db.QueryRow(sqlstr, a.Name).Scan(&amp;a.AuthorID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set existence</span></span><br><span class="line">a._exists = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UPDATE, UPSERT, DELETE 用のメソッドも生成されます。本記事では割愛します。</p><h3 id="その他特徴"><a href="#その他特徴" class="headerlink" title="その他特徴"></a>その他特徴</h3><p><code>xo</code> で特徴的な機能は、任意のクエリをもとに構造体を生成できる点です。<code>books</code> テーブルと <code>authors</code> テーブルを JOIN して <code>books</code> の <code>title</code> で文字列検索するクエリの例を考えてみます。以下は <code>xo</code> のコマンド例です。SQL を記述して構造体を生成できます。オプションの詳細は <a href="https://github.com/xo/xo/blob/master/README.md#command-line-options" target="_blank" rel="noopener">README.md</a> を参照ください。 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xo pgsql://booktest:pass@localhost:15432/testdb?sslmode=<span class="built_in">disable</span> -N -M -B -T AuthorBookResult --query-type-comment=<span class="string">'AuthorBookResult is the result of a search.'</span> -o generated &lt;&lt; ENDSQL</span><br><span class="line">SELECT</span><br><span class="line">  a.author_id AS author_id,</span><br><span class="line">  a.name AS author_name,</span><br><span class="line">  b.book_id AS book_id,</span><br><span class="line">  b.isbn AS book_isbn,</span><br><span class="line">  b.title AS book_title,</span><br><span class="line">  b.tags AS book_tags,</span><br><span class="line">  b.memo AS book_memo</span><br><span class="line">FROM books b</span><br><span class="line">JOIN authors a ON a.author_id = b.author_id</span><br><span class="line">WHERE b.title LIKE %%title string%%</span><br><span class="line">ENDSQL</span><br></pre></td></tr></table></figure><p>コマンドを実装すると <code>authorbookresult.xo.go</code> というファイルが生成されます。以下のようにコマンドに記述したクエリとデータベースから取得するカラムのレコードを保持する構造体が生成されます。SQL にパラメータとして渡す変数の型は、<code>xo</code> のコマンドに記述する SQL の内に <code>int</code>, <code>string</code> などとして明示的に記述する必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package generated contains the types for schema 'public'.</span></span><br><span class="line"><span class="keyword">package</span> generated</span><br><span class="line"></span><br><span class="line"><span class="comment">// Code generated by xo. DO NOT EDIT.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AuthorBookResult is the result of a search.</span></span><br><span class="line"><span class="keyword">type</span> AuthorBookResult <span class="keyword">struct</span> &#123;</span><br><span class="line">AuthorID   <span class="keyword">int</span>         <span class="comment">// author_id</span></span><br><span class="line">AuthorName <span class="keyword">string</span>      <span class="comment">// author_name</span></span><br><span class="line">BookID     <span class="keyword">int</span>         <span class="comment">// book_id</span></span><br><span class="line">BookIsbn   <span class="keyword">string</span>      <span class="comment">// book_isbn</span></span><br><span class="line">BookTitle  <span class="keyword">string</span>      <span class="comment">// book_title</span></span><br><span class="line">BookTags   StringSlice <span class="comment">// book_tags</span></span><br><span class="line">BookMemo   <span class="keyword">string</span>      <span class="comment">// book_memo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AuthorBookResultsByTitle runs a custom query, returning results as AuthorBookResult.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorBookResultsByTitle</span><span class="params">(db XODB, title <span class="keyword">string</span>)</span> <span class="params">([]*AuthorBookResult, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql query</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`SELECT `</span> +</span><br><span class="line"><span class="string">`a.author_id AS author_id, `</span> +</span><br><span class="line"><span class="string">`a.name AS author_name, `</span> +</span><br><span class="line"><span class="string">`b.book_id AS book_id, `</span> +</span><br><span class="line"><span class="string">`b.isbn AS book_isbn, `</span> +</span><br><span class="line"><span class="string">`b.title AS book_title, `</span> +</span><br><span class="line"><span class="string">`b.tags AS book_tags, `</span> +</span><br><span class="line"><span class="string">`b.memo AS book_memo `</span> +</span><br><span class="line"><span class="string">`FROM books b `</span> +</span><br><span class="line"><span class="string">`JOIN authors a ON a.author_id = b.author_id `</span> +</span><br><span class="line"><span class="string">`WHERE b.title LIKE $1`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run query</span></span><br><span class="line">XOLog(sqlstr, title)</span><br><span class="line">q, err := db.Query(sqlstr, title)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> q.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// load results</span></span><br><span class="line">res := []*AuthorBookResult&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> q.Next() &#123;</span><br><span class="line">abr := AuthorBookResult&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// scan</span></span><br><span class="line">err = q.Scan(&amp;abr.AuthorID, &amp;abr.AuthorName, &amp;abr.BookID, &amp;abr.BookIsbn, &amp;abr.BookTitle, &amp;abr.BookTags, &amp;abr.BookMemo)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">append</span>(res, &amp;abr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>余談ですが、カスタム SQL から構造体を生成する場合、<code>-- hogehoge</code> というコメントの記述はできません。生成される SQL が壊れます。以下のように、実行時のログを以下のようにして出力すると明らかです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generated.XOLog = log.Printf</span><br></pre></td></tr></table></figure><ul><li>実行結果例</li></ul><p>文字列結合した SQL ですが、<code>--</code> によって意図しない範囲の記述までコメントアウトされてしまいます。<code>/* hogehoge */</code> とコメントを記述すれば OK です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020/07/14 21:59:00 SELECT a.author_id AS author_id, a.name AS author_name, b.book_id AS book_id, b.isbn AS book_isbn, b.title AS book_title, b.tags AS book_tags, -- memo is memo b.memo AS book_memo FROM books b JOIN authors a ON a.author_id = b.author_id WHERE</span><br><span class="line"> b.title LIKE <span class="variable">$1</span>%!(EXTRA string=hoge)</span><br></pre></td></tr></table></figure><h3 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h3><ul><li>Good<ul><li>SQL が文字列として明示されていて、どのようなクエリが発行されるか分かる</li><li>クエリを扱う関数やメソッドが扱う型を明示していて扱いやすい</li></ul></li><li>Bad<ul><li>デフォルトで生成されたクエリは Context を扱うことができず、<code>Context</code> を使う場合、テンプレートの実装が必要</li><li>生成されたクエリを <code>psql</code> などで接続してコンソールから直接実行したい場合、文字列結合されたクエリを連結させる必要があり手間</li><li>カスタムクエリでパラメータを使う場合、独自の記述方法が必要。またパラメータ内に Go の型を埋め込む必要があり、煩雑</li><li>カスタムクエリを使う場合、SQL にコメント <code>-- hogehoge</code> が記載されていると、生成されるクエリが壊れる</li></ul></li></ul><h2 id="gen"><a href="#gen" class="headerlink" title="gen"></a>gen</h2><p>続いて <code>gen</code> です。<code>gen</code> はデータベースのスキーマメタデータをもとにしてデータベース(特に <code>Gorm</code>)とマッピング可能な構造体のコードを生成できます。</p><p><code>gen</code> をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/smallnest/gen@v0.9.24</span><br></pre></td></tr></table></figure><p>プロジェクト構成は <code>xo</code> を試したときと同様に以下のようにしておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.mod</span><br><span class="line">├── main.go</span><br><span class="line">└── generated</span><br></pre></td></tr></table></figure><p><code>gen</code> コマンドで構造体を生成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gen --connstr=<span class="string">"host=localhost port=15432 user=booktest password=pass dbname=testdb sslmode=disable"</span> --out generated --sqltype postgres --database testdb --no-json --overwrite</span><br><span class="line">table: books unable to generate struct field: tags <span class="built_in">type</span>: _VARCHAR error: unknown sql <span class="built_in">type</span>: _varchar</span><br><span class="line">Generating code <span class="keyword">for</span> the following tables (2)</span><br><span class="line">[0] authors</span><br><span class="line">[1] books</span><br></pre></td></tr></table></figure><p><code>generated</code> ディレクトリ配下に <code>model</code> というディレクトリが生成され、ディレクトリの中に <code>authors.go</code>、<code>books.go</code> と <code>model_base.go</code> という 3 つのファイルが生成されました。<code>books</code> テーブルの <code>tags</code> カラムのデータ型は <code>varchar[]</code> 型でしたが、<code>gen</code> で生成するとエラーになり、生成された構造体にはフィールドが存在しませんでした。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── generated</span><br><span class="line">│   └── model</span><br><span class="line">│       ├── authors.go</span><br><span class="line">│       ├── books.go</span><br><span class="line">│       └── model_base.go</span><br><span class="line">├── go.mod</span><br><span class="line">└── go.sum</span><br></pre></td></tr></table></figure><p><code>gen</code> ではデータベースのデータ型と構造体の型をマッピングする json ファイルを用意し、コマンド実行時にパラメータ <code>--mapping=</code> でファイルを指定することで任意の型のマッピングが可能になります。お手軽かつ柔軟にカスタマイズできる点は非常に良いと感じています。カラムが NULL を許容するかどうかで NULL を扱える型が生成できる点も嬉しいポイントです。ただし <a href="https://github.com/smallnest/gen/blob/v0.9.24/template/mapping.json" target="_blank" rel="noopener">mapping.json</a> をローカルにダウンロードし、以下のマッピング情報を追加して <code>gen</code> コマンドを実行時にファイルを指定しても</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sql_type"</span>: <span class="string">"varchar[]"</span>,</span><br><span class="line">  <span class="attr">"go_type"</span>: <span class="string">"[]string"</span>,</span><br><span class="line">  <span class="attr">"json_type"</span>: <span class="string">"Text"</span>,</span><br><span class="line">  <span class="attr">"protobuf_type"</span>: <span class="string">"[]string"</span>,</span><br><span class="line">  <span class="attr">"guregu_type"</span>: <span class="string">"null.String"</span>,</span><br><span class="line">  <span class="attr">"go_nullable_type"</span>: <span class="string">"[]sql.NullString"</span>,</span><br><span class="line">  <span class="attr">"swagger_type"</span>: <span class="string">"string"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>table: books unable to generate struct field: tags type: _VARCHAR error: unknown sql type: _varchar</code> というエラーは出力されてしまい、フィールドは生成されませんでした。謎のハックですが、エラーメッセージを確認し、以下のように <code>_varchar</code> 型とするとうまく生成できます。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line"><span class="deletion">-     "sql_type": "varchar[]",</span></span><br><span class="line"><span class="addition">+     "sql_type": "_varchar",</span></span><br><span class="line">      "go_type": "[]string",</span><br><span class="line">      "json_type": "Text",</span><br><span class="line">      "protobuf_type": "[]string",</span><br><span class="line">      "guregu_type": "null.String",</span><br><span class="line">      "go_nullable_type": "[]sql.NullString",</span><br><span class="line">      "swagger_type": "string"</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>さて <code>books.go</code> は以下のようなファイルです。デフォルトだと <code>guregu/null</code> や <code>satori/go.uuid</code> といったモジュールを要求されます。テンプレートで拡張の余地がありそうです。</p><figure class="highlight go"><figcaption><span>books.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/guregu/null"</span></span><br><span class="line"><span class="string">"github.com/satori/go.uuid"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">_ = time.Second</span><br><span class="line">_ = sql.LevelDefault</span><br><span class="line">_ = null.Bool&#123;&#125;</span><br><span class="line">_ = uuid.UUID&#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">DB Table Details</span></span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Table: books</span></span><br><span class="line"><span class="comment">[ 0] book_id                                        INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line"><span class="comment">[ 1] author_id                                      INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line"><span class="comment">[ 2] isbn                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line"><span class="comment">[ 3] booktype                                       USER_DEFINED         null: false  primary: false  isArray: false  auto: false  col: USER_DEFINED    len: -1      default: ['FICTION']</span></span><br><span class="line"><span class="comment">[ 4] title                                          TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line"><span class="comment">[ 5] year                                           INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: [2000]</span></span><br><span class="line"><span class="comment">[ 6] available                                      TIMESTAMPTZ          null: false  primary: false  isArray: false  auto: false  col: TIMESTAMPTZ     len: -1      default: ['2020-07-14 00:11:49.494152+00']</span></span><br><span class="line"><span class="comment">[ 7] tags                                           _VARCHAR             null: false  primary: false  isArray: false  auto: false  col: _VARCHAR        len: -1      default: ['&#123;&#125;']</span></span><br><span class="line"><span class="comment">[ 8] memo                                           TEXT                 null: true   primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: []</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JSON Sample</span></span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line"><span class="comment">&#123;    "booktype": 46,    "title": "EBVYCwqfRlayFOFOmrVgcynTE",    "year": 11,    "available": "2272-12-29T02:27:30.083660182+09:00",    "tags": "VHTlEZoMqhtKpSMUrcdhBiUxj",    "book_id": 14,    "author_id": 44,    "isbn": "gxvRbsFhNSFstWgOZBWVeGWvX"&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Books struct is a row record of the books table in the testdb database</span></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//[ 0] book_id                                        INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">BookID <span class="keyword">int32</span></span><br><span class="line"><span class="comment">//[ 1] author_id                                      INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">AuthorID <span class="keyword">int32</span></span><br><span class="line"><span class="comment">//[ 2] isbn                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Isbn <span class="keyword">string</span></span><br><span class="line"><span class="comment">//[ 3] booktype                                       USER_DEFINED         null: false  primary: false  isArray: false  auto: false  col: USER_DEFINED    len: -1      default: ['FICTION']</span></span><br><span class="line">Booktype <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//[ 4] title                                          TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Title <span class="keyword">string</span></span><br><span class="line"><span class="comment">//[ 5] year                                           INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: [2000]</span></span><br><span class="line">Year <span class="keyword">int32</span></span><br><span class="line"><span class="comment">//[ 6] available                                      TIMESTAMPTZ          null: false  primary: false  isArray: false  auto: false  col: TIMESTAMPTZ     len: -1      default: ['2020-07-14 00:11:49.494152+00']</span></span><br><span class="line">Available time.Time</span><br><span class="line"><span class="comment">//[ 8] memo                                           TEXT                 null: true   primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: []</span></span><br><span class="line">Memo sql.NullString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> booksTableInfo = &amp;TableInfo&#123;</span><br><span class="line">Name: <span class="string">"books"</span>,</span><br><span class="line">Columns: []*ColumnInfo&#123;</span><br><span class="line"></span><br><span class="line">&amp;ColumnInfo&#123;</span><br><span class="line">Index:              <span class="number">0</span>,</span><br><span class="line">Name:               <span class="string">"book_id"</span>,</span><br><span class="line">Comment:            <span class="string">``</span>,</span><br><span class="line">Notes:              <span class="string">``</span>,</span><br><span class="line">Nullable:           <span class="literal">false</span>,</span><br><span class="line">DatabaseTypeName:   <span class="string">"INT4"</span>,</span><br><span class="line">DatabaseTypePretty: <span class="string">"INT4"</span>,</span><br><span class="line">IsPrimaryKey:       <span class="literal">true</span>,</span><br><span class="line">IsAutoIncrement:    <span class="literal">false</span>,</span><br><span class="line">IsArray:            <span class="literal">false</span>,</span><br><span class="line">ColumnType:         <span class="string">"INT4"</span>,</span><br><span class="line">ColumnLength:       <span class="number">-1</span>,</span><br><span class="line">GoFieldName:        <span class="string">"BookID"</span>,</span><br><span class="line">GoFieldType:        <span class="string">"int32"</span>,</span><br><span class="line">JSONFieldName:      <span class="string">"book_id"</span>,</span><br><span class="line">ProtobufFieldName:  <span class="string">"book_id"</span>,</span><br><span class="line">ProtobufType:       <span class="string">"int32"</span>,</span><br><span class="line">ProtobufPos:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line">&amp;ColumnInfo&#123;</span><br><span class="line">Index:              <span class="number">8</span>,</span><br><span class="line">Name:               <span class="string">"memo"</span>,</span><br><span class="line">Comment:            <span class="string">``</span>,</span><br><span class="line">Notes:              <span class="string">``</span>,</span><br><span class="line">Nullable:           <span class="literal">true</span>,</span><br><span class="line">DatabaseTypeName:   <span class="string">"TEXT"</span>,</span><br><span class="line">DatabaseTypePretty: <span class="string">"TEXT"</span>,</span><br><span class="line">IsPrimaryKey:       <span class="literal">false</span>,</span><br><span class="line">IsAutoIncrement:    <span class="literal">false</span>,</span><br><span class="line">IsArray:            <span class="literal">false</span>,</span><br><span class="line">ColumnType:         <span class="string">"TEXT"</span>,</span><br><span class="line">ColumnLength:       <span class="number">-1</span>,</span><br><span class="line">GoFieldName:        <span class="string">"Memo"</span>,</span><br><span class="line">GoFieldType:        <span class="string">"sql.NullString"</span>,</span><br><span class="line">JSONFieldName:      <span class="string">"memo"</span>,</span><br><span class="line">ProtobufFieldName:  <span class="string">"memo"</span>,</span><br><span class="line">ProtobufType:       <span class="string">"string"</span>,</span><br><span class="line">ProtobufPos:        <span class="number">9</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TableName sets the insert table name for this struct type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"books"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeforeSave invoked before saving, return an error if field is not populated.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">BeforeSave</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare invoked before saving, can be used to populate fields etc.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">Prepare</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate invoked before performing action, return an error if field is not populated.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">Validate</span><span class="params">(action Action)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TableInfo return table meta data</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">TableInfo</span><span class="params">()</span> *<span class="title">TableInfo</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> booksTableInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Gorm</code> を意識したライブラリになっており、<code>gen</code> コマンドに <code>--gorm</code> というパラメータを付与すると生成する構造体に <code>Gorm</code> のタグが付与されます。<code>authors.go</code> ファイルに付与されたタグは以下のようなものです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Authors struct is a row record of the authors table in the testdb database</span></span><br><span class="line"><span class="keyword">type</span> Authors <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//[ 0] author_id                                      INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">AuthorID <span class="keyword">int32</span> <span class="string">`gorm:"primary_key;column:author_id;type:INT4;"`</span></span><br><span class="line"><span class="comment">//[ 1] name                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`gorm:"column:name;type:TEXT;default:'';"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gorm:&quot;primary_key;column:author_id;type:INT4;&quot;</code> といったタグが付与されています。構造体のメソッドとして付与されている <code>TableName()</code> メソッドもおそらく <code>Gorm</code> を意識したものでしょう。以下のような <code>TableName()</code> メソッドを実装すると <code>Gorm</code> のテーブル名として <code>string</code> の文字列が使用されます。以下の場合テーブル名は <code>authors</code> です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TableName sets the insert table name for this struct type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Authors)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"authors"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに <code>Gorm</code> の構造体として生成されるタグですが、外部キーは付与されませんでした。<code>books</code> テーブルにおける <code>author_id</code> は <code>authors</code> の外部キーですが、<code>Gorm</code> の構造体を見ると、外部キーであるタグは付与されていません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Books struct is a row record of the books table in the testdb database</span></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//[ 0] book_id                                        INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">BookID <span class="keyword">int32</span> <span class="string">`gorm:"primary_key;column:book_id;type:INT4;"`</span></span><br><span class="line"><span class="comment">//[ 1] author_id                                      INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">AuthorID <span class="keyword">int32</span> <span class="string">`gorm:"column:author_id;type:INT4;"`</span></span><br><span class="line"><span class="comment">//[ 2] isbn                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Isbn <span class="keyword">string</span> <span class="string">`gorm:"column:isbn;type:TEXT;default:'';"`</span></span><br><span class="line"><span class="comment">//[ 3] booktype                                       USER_DEFINED         null: false  primary: false  isArray: false  auto: false  col: USER_DEFINED    len: -1      default: ['FICTION']</span></span><br><span class="line">Booktype <span class="keyword">interface</span>&#123;&#125; <span class="string">`gorm:"column:booktype;"`</span></span><br><span class="line"><span class="comment">//[ 4] title                                          TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Title <span class="keyword">string</span> <span class="string">`gorm:"column:title;type:TEXT;default:'';"`</span></span><br><span class="line"><span class="comment">//[ 5] year                                           INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: [2000]</span></span><br><span class="line">Year <span class="keyword">int32</span> <span class="string">`gorm:"column:year;type:INT4;default:2000;"`</span></span><br><span class="line"><span class="comment">//[ 6] available                                      TIMESTAMPTZ          null: false  primary: false  isArray: false  auto: false  col: TIMESTAMPTZ     len: -1      default: ['2020-07-14 00:11:49.494152+00']</span></span><br><span class="line">Available time.Time <span class="string">`gorm:"column:available;type:TIMESTAMPTZ;default:'2020-07-14 00:11:49.494152+00';"`</span></span><br><span class="line"><span class="comment">//[ 8] memo                                           TEXT                 null: true   primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: []</span></span><br><span class="line">Memo sql.NullString <span class="string">`gorm:"column:memo;type:TEXT;"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所感-1"><a href="#所感-1" class="headerlink" title="所感"></a>所感</h3><ul><li>Good<ul><li><code>Gorm</code> や <code>db</code> といった ORM と連携できるタグが付与された構造体を生成できる</li><li>拡張できる点が多く、柔軟にカスタマイズできる</li></ul></li><li>Bad<ul><li>デフォルトだと生成される構造体がやや重厚</li><li><code>varchar[]</code> 型があるテーブルから構造体を生成した場合にエラーが発生するなど、デフォルトでは扱えないデータ型がある</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>スキーマからクエリを扱う関数やメソッド、構造体を生成するライブラリを調査しました</p><p><code>xo</code> は <code>SQLBoiler</code> と同じような系統で、スキーマや SQL をからデータベースアクセス可能な関数やメソッドを生成します。<code>gen</code> はスキーマから構造体を生成するライブラリです。<code>Gorm</code> や <code>sqlx</code> といった ORM などと一緒に使う必要があるでしょう。</p><p>いずれにしてもスキーマから構造体を生成できる点は開発体験として良いと感じています。<code>xo</code> も <code>gen</code> も特徴的で、興味深いライブラリです。ただし、プロジェクトの開発に組み込んでいくにはテンプレートの拡張などいくつか工夫は必要だと感じました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">スキーマを変更した場合、構造体の生成だけでなくマイグレーション管理が必要ですが、本記事ではマイグレーションの話は割愛します。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Goでデータベースを扱う場合、&lt;a href=&quot;https://github.com/go-gorm/gorm&quot; targe
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>GoからAWS KinesisのAggregationFormatを利用する</title>
    <link href="https://future-architect.github.io/articles/20200727/"/>
    <id>https://future-architect.github.io/articles/20200727/</id>
    <published>2020-07-26T15:00:00.000Z</published>
    <updated>2020-07-27T00:25:08.109Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載企画</a>の8回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。ここ数年は産業向けのIoT（例えば工場IoTやモビリティIoT）を行っています。<a href="https://future-architect.github.io/articles/20191023/">工場をハックするための基本知識</a>や<a href="https://future-architect.github.io/articles/20200422/">PyConJP 2019に登壇しました</a> の記事を書いた栗田さんや、<a href="https://future-architect.github.io/articles/20191201/">SORACOM USBドングルの自動接続</a> の記事を書いた棚井さんと同じチームに所属しています。</p><p><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載企画</a> の第8弾目として、Serverlessの代表格であるAWS LambdaでGoを用いてKinesisに対するKPL/KCL相当の処理についてまとめていきます。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某IoTをテーマとした案件で、Kinesisを用いたストリーミングETLなパイプラインを構築するにあたって、下図のようにKinesisの後段はGoとLambdaを採用しました。Kinesisが多段になっているのは、Rawデータと加工済みデータを別システムで利用したかったためです。</p><p><img src="/images/20200727/abstract.png" alt=""></p><p>最初にKinesisにPublishするECSはJavaのKPL（Kinesis Producer Library）を用いており、当然Aggregation Format(後述します)を利用していますが、後続のGoアプリでレコードを <strong>DeAggregation</strong> する処理と、後続のKinesisへの再度レコードを <strong>Aggregation</strong> する方法があまり見当たらなかったので、実装例を残します。</p><p>このエントリーで記載しているコードは以下のリポジトリに記載しています。</p><p><a href="https://github.com/laqiiz/go-kinesis-aggr-example" target="_blank" rel="noopener">https://github.com/laqiiz/go-kinesis-aggr-example</a></p><h1 id="Kineis-Data-Streamとは"><a href="#Kineis-Data-Streamとは" class="headerlink" title="Kineis Data Streamとは"></a>Kineis Data Streamとは</h1><blockquote><p>Amazon Kinesis Data Streams (KDS) は、大規模にスケーラブルで持続的なリアルタイムのデータストリーミングサービスです。(中略) 収集データはミリ秒で入手でき、リアルタイム分析をリアルタイムダッシュボードやリアルタイム異常検知、ダイナミックな価格設定などの事例に利用可能です。<br><a href="https://aws.amazon.com/jp/kinesis/data-streams/" target="_blank" rel="noopener">https://aws.amazon.com/jp/kinesis/data-streams/</a></p></blockquote><p>簡単に言うとAWS上でPub-Subメッセージングを行えるサービスです。Kinesisの文脈ではデータを送信するPublish側をProducer、データを受信するSubscribe側をConsumerと呼びます。SQSとはメッセージを非同期に連携する部分は同じですが、Consumer側をN個配置できるところなどが異なります。</p><h1 id="Kinesis-Record-Aggregation-amp-Deaggregation"><a href="#Kinesis-Record-Aggregation-amp-Deaggregation" class="headerlink" title="Kinesis Record Aggregation &amp; Deaggregation"></a>Kinesis Record Aggregation &amp; Deaggregation</h1><p>KinesisにはRecord Aggregation（レコードの集約）といった考え方があります。</p><p>背景としてKDSへメッセージをProduceするときの課金単位は、<a href="https://aws.amazon.com/jp/kinesis/data-streams/faqs/" target="_blank" rel="noopener">25KBをしきい値とした書き込み数で課金</a>されます。25KBより小さくても同じ料金が課金されるため、レコードのサイズが小さい場合はメッセージを集約することが有効です。同時に、小さくて細かいメッセージを1つのメッセージに集約することで、HTTP リクエスト分のオーバーヘッドが無くせるのでスループットを上げる効果も期待できます。</p><figure class="highlight plain"><figcaption><span>集約イメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">record 0 --|</span><br><span class="line">record 1   |        [ Aggregation ]</span><br><span class="line">    ...    |--&gt; Amazon Kinesis record --&gt;  PutRecords Request</span><br><span class="line">    ...    |                              </span><br><span class="line">record A --|</span><br></pre></td></tr></table></figure><p>AWSでこの25KB以下のメッセージを集約するフォーマットは、<strong>KPL Aggregated Record Format</strong>と呼ぶそうです。仕様は以下に記載されていました。</p><p><a href="https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md" target="_blank" rel="noopener">https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md</a></p><p>概要だけまとめると以下のフォーマットです。</p><ul><li>先頭に4バイトのマジックナンバーは<code>0xF3 0x89 0x9A 0xC2</code> がつく</li><li>プロトコルバッファ（proto2）を利用したバイナリフォーマット</li><li>最後に16バイトのMD5チェックサム</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0               4                  N          N+15</span><br><span class="line">+---+---+---+---+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+---+...+---+</span><br><span class="line">|  MAGIC NUMBER | PROTOBUF MESSAGE |    MD5    |</span><br><span class="line">+---+---+---+---+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+---+...+---+</span><br></pre></td></tr></table></figure><p><code>PROTOBUF MESSAGE</code> 部分は以下の定義です。Proto を知らない人に補足すると <code>repeated</code> はJSONでいう配列を示す宣言です。<code>AggregatedRecord</code> でKinesisのパーティションキーを複数宣言するのが特徴的ですね。もし、複数のレコードが同じパーティションキーを指定するとすると、効率よくシリアライズができそうです。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">AggregatedRecord</span> </span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> partition_key_table     = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> explicit_hash_key_table = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Record records                 = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SubMessage</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Tag</span> </span>&#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">string</span> key   = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">string</span> value = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">uint64</span> partition_key_index     = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">uint64</span> explicit_hash_key_index = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">bytes</span>  data                    = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Tag    tags                    = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>細かく説明しましたが、KPL Aggregated Record Formatの構造を知らなくても既存のライブラリを活用すれば利用可能ですのでご安心ください。</p><h2 id="Record-Aggregation-と-PutRecordsの区別"><a href="#Record-Aggregation-と-PutRecordsの区別" class="headerlink" title="Record Aggregation と PutRecordsの区別"></a>Record Aggregation と PutRecordsの区別</h2><p>ちょっとややこしいのが、 Kinesisには複数RECORDを一度のリクエストで登録する<a href="https://aws.amazon.com/jp/blogs/aws/kinesis-update-putrecords-api/" target="_blank" rel="noopener">PutRecords</a>というAPIがありますが、 Record Aggregationはそれとは異なります（別の概念なので共存できます）。PutRecordsはあくまで複数のRECORDを1度のリクエストに束ねるものであって、Aggregated Formatは複数メッセージを1メッセージに集約する点が違いです。PutRecordsはHTTP Requestの発行を抑えられる分スループットの向上が期待できる点は、Aggregated Formatと同じですが、メッセージ数は変化ないので料金は同じです。当然別物なのでAggregated FormatのメッセージをPutRecordsもできます。</p><h1 id="実施方法"><a href="#実施方法" class="headerlink" title="実施方法"></a>実施方法</h1><p><a href="https://aws.amazon.com/jp/sdk-for-go/" target="_blank" rel="noopener">AWS SDK for Go</a> でKinesisに対するProduce/Consumeはできますが、標準ではAggregation/DeAggregationはできません。そのため以下のライブラリを利用します。</p><ul><li><strong>Aggregation</strong>:  <a href="https://github.com/a8m/kinesis-producer" target="_blank" rel="noopener">a8m/kinesis-producer</a> </li><li><strong>DeAggregation</strong>: <a href="https://github.com/awslabs/kinesis-aggregation" target="_blank" rel="noopener">awslabs/kinesis-aggregation</a></li></ul><p>DeAggregationに関してはAWSLabのリポジトリを利用できるのでちょっと安心できますね。利用方法は簡単かと言われると？でしたのでここに利用方法を残していきます。</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><p>それぞれのライブラリの利用手順を説明していきます。このエントリーで記載しているコードは以下のリポジトリに記載しています。</p><p><a href="https://github.com/laqiiz/go-kinesis-aggr-example" target="_blank" rel="noopener">https://github.com/laqiiz/go-kinesis-aggr-example</a></p><h2 id="Aggregate（a8m-kinesis-producer）"><a href="#Aggregate（a8m-kinesis-producer）" class="headerlink" title="Aggregate（a8m/kinesis-producer）"></a>Aggregate（a8m/kinesis-producer）</h2><p>最初にコードのサンプルを載せます。</p><figure class="highlight go"><figcaption><span>集約側の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"github.com/a8m/kinesis-producer"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/kinesis"</span></span><br><span class="line"><span class="string">"golang.org/x/sync/errgroup"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kc = kinesis.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(e events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"【Start Aggregation Lambda】"</span>, <span class="built_in">len</span>(e.Records))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pr = producer.New(&amp;producer.Config&#123;</span><br><span class="line">StreamName: os.Getenv(<span class="string">"KINESIS_STREAM"</span>),</span><br><span class="line">Client:     kc,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">eg := errgroup.Group&#123;&#125;</span><br><span class="line"></span><br><span class="line">pr.Start() <span class="comment">// Producer用のgoroutine起動</span></span><br><span class="line">eg.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> pr.NotifyFailures() &#123;</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> e.Records &#123;</span><br><span class="line"><span class="comment">// TODO 取得したレコードに対する何かしらの処理。ここでは単純に集約して終わり</span></span><br><span class="line"><span class="keyword">if</span> err := pr.Put(r.Kinesis.Data, r.Kinesis.PartitionKey); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pr.Stop() <span class="comment">// 送信中のレコードのflushと、Producer goroutineの停止</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> eg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フィールドで初期化しているのが、Kinesis Producerのクライアントです。<code>handle</code>関数内部がややこしいですが、最初にRecord Aggregation用のProducerを生成し、<code>pr.Start()</code> で内部で用いるgoroutineを起動、その後にProducerが出すかも知れないerrorを検知するための <code>goroutine</code> を <code>errgroup</code> を利用して起動させます。ちょっとややこしいですが、これを最初に行わないと、エラーを取りこぼす可能性があります。ProducerはStopしたあとにStartしてもchannelを内部でcloseしていたりするので上手く動きませんでした。</p><p><code>Producer</code> に対するPut処理ですが、今回はLambdaだということと、他のデータストアへの書き込みもしないこともあり同期的に行っています。</p><p>最後に <code>pr.Stop()</code> を呼びgoroutineを停止させて、同時に処理中レコードをflushさせます。これを呼び忘れるとFlushされる間隔より前にLambda関数が停止してしまい、エラーは発生しないけどKinesisに送信されていないことが発生する恐れがあります。<code>pr.Stop</code> は <strong>errgroupの待受より前に</strong> 呼び出したいので、<code>defer</code> は利用していません。</p><p>これをGoでLambdaを利用するときのお作法通りにmain関数から呼び出せば完了です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでGoでLambdaでもKinesisへRecord Aggregationが行えます。</p><h2 id="DeAggregate-awslabs-kinesis-aggregation"><a href="#DeAggregate-awslabs-kinesis-aggregation" class="headerlink" title="DeAggregate(awslabs/kinesis-aggregation])"></a>DeAggregate(awslabs/kinesis-aggregation])</h2><p>awslabs/kinesis-aggregationを利用します。この時、Lambdaの引数として渡される <code>events.KinesisEvent</code> の型と、deaggregatorが求める方が異なるため、自分で型の詰め替え作業が必要です（最初のループ分の部分）。そこが最大の山場で、それさえできてしまえば<code>deagg.DeaggregateRecords</code>を呼び出して、レコードの集約解除が行われます。</p><figure class="highlight go"><figcaption><span>集約解除側の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/kinesis"</span></span><br><span class="line">deagg <span class="string">"github.com/awslabs/kinesis-aggregation/go/deaggregator"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(e events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"【Start DeAggregation Lambda】"</span>, <span class="built_in">len</span>(e.Records))</span><br><span class="line"></span><br><span class="line">krs := <span class="built_in">make</span>([]*kinesis.Record, <span class="number">0</span>, <span class="built_in">len</span>(e.Records))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> e.Records &#123;</span><br><span class="line">krs = <span class="built_in">append</span>(krs, &amp;kinesis.Record&#123;</span><br><span class="line">ApproximateArrivalTimestamp: aws.Time(r.Kinesis.ApproximateArrivalTimestamp.UTC()),</span><br><span class="line">Data:                        r.Kinesis.Data,</span><br><span class="line">EncryptionType:              &amp;r.Kinesis.EncryptionType,</span><br><span class="line">PartitionKey:                &amp;r.Kinesis.EncryptionType,</span><br><span class="line">SequenceNumber:              &amp;r.Kinesis.SequenceNumber,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dars, err := deagg.DeaggregateRecords(krs)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> dars &#123;</span><br><span class="line"><span class="comment">// TODO de-aggregation後レコードに対する処理</span></span><br><span class="line">fmt.Println(<span class="string">"input"</span>, <span class="keyword">string</span>(r.Data))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをGoでLambdaを利用するときのお作法通りにmain関数から呼び出せば完了です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>レコード集約の解除処理は、ことKinesisトリガーのLambdaに対しては常に実装しておいても良い気がします。<br>理由ですが、<code>deagg.DeaggregateRecords</code> が集約済み<strong>ではない</strong> レコードに対して実行してもerrorが発生しないためと、最初は集約レコードじゃない入力だったとしても、途中で集約レコードに切り替わったときに急に動かなくなることを防ぐことも出来るからです。（疎通の1件は通ったけど、結合テストで複数レコードを連携しだすと急に落ちた、みたいなことも回避できます）。特にJavaクライアントがKPLを利用している場合は、集約あり/集約無しはあまり意識しないことが多く、事前のすり合わせでは集約しないと行っていたものの、いざ結合テストをする場合に、集約済みメッセージを連携してきたこともありました。</p><h1 id="動作検証"><a href="#動作検証" class="headerlink" title="動作検証"></a>動作検証</h1><p>下図のような環境を構築して動かしてみます。デプロイ方法はリポジトリのREADMEを参考ください。</p><p>![](/images/20200727/1 (2).png)</p><p>最初のKinesisにはawscli経由で3件データを投入します。</p><figure class="highlight bash"><figcaption><span>テストデータ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws kinesis --profile my_profile put-record --stream-name aggregate --partition-key 123 --data MTIzNDU2Nzg5MA==</span><br><span class="line">aws kinesis --profile my_profile put-record --stream-name aggregate --partition-key 124 --data MTIzNDU2Nzg5MA==</span><br><span class="line">aws kinesis --profile my_profile put-record --stream-name aggregate --partition-key 125 --data MTIzNDU2Nzg5MA==</span><br></pre></td></tr></table></figure><p>そうすると、1つ目のLambdaが起動されます。3つのレコードを受け取り、<code>flushing records reason=drain, records=%!s(int=1)</code> にある通り、3件が1レコードに集約されて次のKinesisにProduceされました。タイミングによっては1件だったり2件だったりしますが、2件以上であれば動作確認はできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-05-16T16:59:25.659+09:00 START RequestId: da2b6674-a147-4804-9e6c-5d78f633e426 Version: $LATEST</span><br><span class="line">2020-05-16T16:59:25.664+09:00 【Start Aggregation Lambda】 3</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 starting producer stream&#x3D;aggregate-test</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 stopping producer backlog&#x3D;%!s(int&#x3D;0)</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 backlog drained</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 flushing records reason&#x3D;drain, records&#x3D;%!s(int&#x3D;1)</span><br><span class="line">2020-05-16T16:59:25.690+09:00 2020&#x2F;05&#x2F;16 07:59:25 stopped producer</span><br><span class="line">2020-05-16T16:59:25.690+09:00 END RequestId: da2b6674-a147-4804-9e6c-5d78f633e426</span><br></pre></td></tr></table></figure><p>2つ目のLambdaは、集約されたレコードを1件受け取り、集約解除した結果3つのメッセージを標準出力しています。ダミーで送信したデータの中身は全て同じなので3行同じ内容が表示されています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-05-16T17:01:36.865+09:00 START RequestId: 5f7eb56c-a83c-42c3-927d-0e2703528c6b Version: $LATEST</span><br><span class="line">2020-05-16T17:01:36.870+09:00 【Start DeAggregation Lambda】 1</span><br><span class="line">2020-05-16T17:01:36.870+09:00 input 1234567890</span><br><span class="line">2020-05-16T17:01:36.870+09:00 input 1234567890</span><br><span class="line">2020-05-16T17:01:36.870+09:00 input 1234567890</span><br><span class="line">2020-05-16T17:01:36.870+09:00 END RequestId: 5f7eb56c-a83c-42c3-927d-0e2703528c6b</span><br></pre></td></tr></table></figure><p>簡単ではありますがAggregation/DeAggregationの動作確認が取れました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>KPL Aggregated Record Formatを利用することで、Kinesisの利用料金を下げることができる</li><li>GoでLambdaでも、KPL/KCL相当の集約・集約解除は実装できる</li><li>特にDeAggregateする処理は、後々の予期せぬ連携に備えて防御的に実装しておくと良い</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>A deep-dive into lessons learned using Amazon Kinesis Streams at scale<ul><li><a href="https://read.acloud.guru/deep-dive-into-aws-kinesis-at-scale-2e131ffcfa08" target="_blank" rel="noopener">https://read.acloud.guru/deep-dive-into-aws-kinesis-at-scale-2e131ffcfa08</a></li></ul></li><li>KPL の主要なコンセプト<ul><li><a href="https://docs.aws.amazon.com/ja_jp/streams/latest/dev/kinesis-kpl-concepts.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/streams/latest/dev/kinesis-kpl-concepts.html</a></li></ul></li><li>KPL Aggregated Record Format<ul><li><a href="https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md" target="_blank" rel="noopener">https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/&quot;&gt;サーバレス連載企画&lt;/a&gt;の8回目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; cl
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>夏休み自由研究ブログ連載を始めます</title>
    <link href="https://future-architect.github.io/articles/20200726/"/>
    <id>https://future-architect.github.io/articles/20200726/</id>
    <published>2020-07-25T15:00:00.000Z</published>
    <updated>2020-07-29T07:43:43.708Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200726/beach-3121393_1280.png" alt=""><br><a href="https://pixabay.com/ja/users/lethutrang101-6596164/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3121393" target="_blank" rel="noopener">Trang Le</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3121393" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、技術ブログ運営の真野です。</p><p>フューチャー技術ブログで<strong>夏休み自由研究</strong>というテーマの連載を開催します。<a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>に続く、大型の連載なのでブログ運営者としてワクワクドキドキしています。</p><ul><li><strong>自分が好きな技術や興味があるテーマ</strong> について <strong>自由に研究</strong>（執筆）する連載企画です</li><li>8/03～8/21の平日（15枠）</li><li>この4月に入社してくれたフレッシュなメンバーから、ベテラン勢まで幅広い執筆陣です</li></ul><p>この連載を通して、フューチャー社員がどういうことに興味を持って、深堀りしようとしているかの一面が伝われば良いなと思ってます。<br>また、いつもとは一風変わった有益な情報をカジュアルにアウトプットし、皆様のお役に立てればと祈っています。</p><h1 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h1><p>次の15人が投稿します。どれも夏休み感（？）がでていますね。</p><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>8/3</td><td>真野隼記</td><td>Modbusで温湿度センシング</td></tr><tr><td>8/4</td><td>伊藤太斉</td><td>M5StickCでやる文字入力</td></tr><tr><td>8/5</td><td>伊藤真彦</td><td>GoPlus自由研究</td></tr><tr><td>8/6</td><td>永井優斗</td><td>初めてのOSSコミュニティ活動</td></tr><tr><td>8/7</td><td>辻大志郎</td><td>GoとSuffixArray</td></tr><tr><td>8/8</td><td>-</td><td></td></tr><tr><td>8/9</td><td>-</td><td></td></tr><tr><td>8/10</td><td>王紹宇</td><td>自動売買は詐欺？本物を自作してみよう</td></tr><tr><td>8/11</td><td>矢野颯太</td><td>光造形の3Dプリンターでpi cameraのマウント作ってみた</td></tr><tr><td>8/12</td><td>加藤周平</td><td>marpでFutureスライドのテンプレ作ってみる</td></tr><tr><td>8/13</td><td>西田好孝</td><td>GCPのグローバルサービスのRegion集約を考える</td></tr><tr><td>8/14</td><td>村田靖拓</td><td>ぼくのなつやすみ5 -Istio、キミがくれたもの-</td></tr><tr><td>8/15</td><td>-</td><td></td></tr><tr><td>8/16</td><td>-</td><td></td></tr><tr><td>8/17</td><td>仁木美来</td><td>Slack×GASの日報テンプレBOTを実務に導入してみた</td></tr><tr><td>8/18</td><td>富山 龍之介</td><td>私を苦しめたDynamoDB</td></tr><tr><td>8/19</td><td>柏木祥子</td><td>denoとfirebaseでつくるデータ管理画面</td></tr><tr><td>8/20</td><td>栗田真</td><td>Pythonユーザーのためのモジュール開発</td></tr><tr><td>8/21</td><td>武田大輝</td><td>モバイルアプリ開発 - 優れたフォトギャラリーをハイブリッドで実現する -</td></tr></tbody></table><p>※正確なタイトルは直前で変更するかも知れませんが、ご了承ください！</p><p>また、今回は<strong>「補欠」制度</strong>を内部で導入しました。どうしても体調面・業務面で投稿が厳しくなったメンバーがいた時は、補欠メンバーの記事が補填され、タイトルと内容がガラリと変わる可能性があります。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>この企画は LINEさんの<a href="https://engineering.linecorp.com/ja/blog/line-engineering-blog-freedom-study-summer-vacation-homework/" target="_blank" rel="noopener">LINE Engineering Blog 「夏休みの自由研究 -Summer Homework-」 実施のお知らせ</a> に大いに影響を受けています。いつもブログを拝見させてもらっています。ありがとうございます。</p><p>他にも連載企画がざくざくあります。ぜひ、気になるテーマの記事をCHECK! いただけると幸いです。</p><ul><li><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a></li><li><a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a></li><li><a href="/tags/GoCDK/">Go Cloud</a></li><li><a href="/tags/Auth0/">Auth0</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200726/beach-3121393_1280.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://pixabay.com/ja/users/lethutrang101-6596164/?utm_source=lin
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>AWSサービストリガによるLambda起動</title>
    <link href="https://future-architect.github.io/articles/20200722/"/>
    <id>https://future-architect.github.io/articles/20200722/</id>
    <published>2020-07-21T15:00:00.000Z</published>
    <updated>2020-07-27T00:26:25.444Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載企画</a>の7回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGのDXチームに所属している加部です。</p><p>昨今様々なシステムで利用さているAWSのLambdaですが、サーバレスということもあり何かのイベントをトリガに関数を起動させる方法が一般的かと思います。LambdaはAWSの様々なサービスをトリガとして起動することが可能で、自分たちの利用しているAWSサービスと組み合わせて実装するることでその真価を発揮します。</p><p>AWSに少し詳しい人であればLambdaをAWSのサービストリガで起動させる事ができることは知っていると思いますが、いざ実装するとなると具体的にどういった手順で、なんの設定が必要かというところがわからないという人もいるのではないでしょうか。Lambdaには起動型がいくつかあったり、トリガとなるサービスによって起動設定も異なってきます。私自身も業務で利用するまではいわゆる知識勢でした。</p><p>この記事ではAWSのローカルモック環境であるLocalStackを用いて、皆さんのローカル環境でも試せるよう各起動型の設定方法を追っていきます。</p><h1 id="Lambdaの起動型"><a href="#Lambdaの起動型" class="headerlink" title="Lambdaの起動型"></a>Lambdaの起動型</h1><p>まずはLambdaの起動型について見ていきましょう。Lambdaの起動型には同期、非同期、ストリームベースの3つがあります。</p><ol><li><strong>同期</strong><ul><li>イベントを処理する関数を待ってクライアントにレスポンスを返す</li><li>AWS側でのリトライ処理はなく実行は1回となる</li><li>代表的なサービス<ul><li>API Gateway</li><li>Cognito</li><li>Alexa</li></ul></li></ul></li><li><strong>非同期</strong><ul><li>Lambdaは処理のためにイベントをキューに入れ、クライアントにすぐにレスポンスを返す</li><li>呼び出しに失敗した場合は自動的に2回リトライが実施される</li><li>代表的なサービス<ul><li>CloudWatch Events</li><li>Cloud Watch Logs</li><li>Code Commit</li><li>S3</li><li>SNS</li><li>Kinesis Firehose<br>etc…</li></ul></li></ul></li><li><strong>ストリームベース</strong><ul><li>Lambdaサービスが連携元のストリームサービスをポーリングし、必要に応じてLambda関数を呼び出す</li><li>BatchSizeを指定することで、1回のLambda関数起動時のレコード取得数を指定する</li><li>Lambda関数が失敗すると、対象レコードの有効期限が切れるまでエラーが発生した関数をリトライする(リトライ回数は設定で指定可能)</li><li>代表的なサービス<ul><li>Kinesis Data Stream</li><li>Dynamo DB Stream</li></ul></li></ul></li></ol><h1 id="各起動型の設定方法"><a href="#各起動型の設定方法" class="headerlink" title="各起動型の設定方法"></a>各起動型の設定方法</h1><p>基本的な流れとしてはどの起動型も下記のような同じ流れになります。</p><ol><li>Lambdaの作成</li><li>トリガとなるリソースの作成</li><li>Lambdaとトリガとなるリソースの紐付け</li></ol><p>手順3のLambdaのトリガ設定が各起動型で変わってきます。それでは各起動型の設定方法を実践していきましょう。</p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>LocalStackを<a href="https://github.com/localstack/localstack" target="_blank" rel="noopener">こちら</a>からダウンロードしてください。LocalStack起動コマンド(macOSの場合)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TMPDIR=/private<span class="variable">$TMPDIR</span> docker-compose up -d</span><br></pre></td></tr></table></figure><p>LocalStackの詳細については<a href="https://future-architect.github.io/articles/20191115/">こちらのブログ</a>で解説しているので興味のある方は読んでみてください。</p><h2 id="同期型"><a href="#同期型" class="headerlink" title="同期型"></a>同期型</h2><p>ではまず同期型の呼び出しから設定/実装方法を見ていきましょう。今回はよくあるAPI Gateway –&gt; Lambdaという構成を参考に進めていきます。</p><p><img src="/images/20200722/2020-07-17T17.05.46.png" alt=""></p><p>それでは早速構築してきましょう。まずは、APIのレスポンスを返すLambdaを作成します。</p><figure class="highlight go"><figcaption><span>テスト用コード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleRequest</span><span class="params">(ctx context.Context, request events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line">q := request.QueryStringParameters</span><br><span class="line">name := q[<span class="string">"name"</span>]</span><br><span class="line">body := <span class="string">"hello "</span> + name</span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       body,</span><br><span class="line">StatusCode: <span class="number">200</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handleRequest)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ソースをbuildして、zipで圧縮しLambdaをデプロイします</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aws lambda create-function \</span><br><span class="line">  --endpoint-url=http://localhost:4574 \</span><br><span class="line">  --<span class="keyword">function</span>-name api-gateway-test \</span><br><span class="line">  --runtime go1.x \</span><br><span class="line">  --handler main \</span><br><span class="line">  --zip-file fileb://main.zip \</span><br><span class="line">  --role r1</span><br></pre></td></tr></table></figure><p>Lambdaのデプロイが完了したらAPI GateAwayを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway create-rest-api \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --name <span class="string">'API Gateway Test'</span></span><br></pre></td></tr></table></figure><p>返ってきたidの値を後のコマンドで利用するので変数に入れておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rest_api_id=******</span><br></pre></td></tr></table></figure><p>API Gatewayを作成したらルートリソースの配下にAPIリソースを追加します<br>そのために、まずルートリソースのIDを確認しましょう。<br>rest-api-idには先のコマンドでレスポンスで返ってきたidを利用します。<br>ルートリソースのIDを確認</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway get-resources \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --rest-api-id <span class="variable">$&#123;rest_api_id&#125;</span></span><br></pre></td></tr></table></figure><p>parent-idには一つ前のコマンドで返ってきたidの値を利用します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway create-resource \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --rest-api-id <span class="variable">$&#123;rest_api_id&#125;</span> \</span><br><span class="line">  --parent-id ****** \</span><br><span class="line">  --path-part hello</span><br></pre></td></tr></table></figure><p>作成したリソースに対するメソッドを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway put-method \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --rest-api-id <span class="variable">$&#123;rest_api_id&#125;</span> \</span><br><span class="line">  --resource-id ****** \</span><br><span class="line">  --http-method GET \</span><br><span class="line">  --authorization-type <span class="string">"NONE"</span></span><br></pre></td></tr></table></figure><p>ここまで設定できたらようやくAPI GatewayとLambdaの紐付けの設定になります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway put-integration \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --rest-api-id <span class="variable">$&#123;rest_api_id&#125;</span> \</span><br><span class="line">  --resource-id ****** \</span><br><span class="line">  --http-method GET \</span><br><span class="line">  --<span class="built_in">type</span> AWS_PROXY \</span><br><span class="line">  --integration-http-method GET \</span><br><span class="line">  --uri arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/<span class="built_in">functions</span>/arn:aws:lambda:us-east-1:000000000000:<span class="keyword">function</span>:api-gateway-test \</span><br><span class="line">  --passthrough-behavior WHEN_NO_MATCH</span><br></pre></td></tr></table></figure><p>最後にAPIをデプロイして完了です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway create-deployment \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --rest-api-id <span class="variable">$&#123;rest_api_id&#125;</span> \</span><br><span class="line">  --stage-name prod</span><br></pre></td></tr></table></figure><p>curlコマンドで想定のレスポンスが返ってくるか確認しましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i http://localhost:4567/restapis/<span class="variable">$&#123;rest_api_id&#125;</span>/prod/_user_request_/hello?name=lambda</span><br><span class="line">hello lambda</span><br></pre></td></tr></table></figure><h2 id="非同期型"><a href="#非同期型" class="headerlink" title="非同期型"></a>非同期型</h2><p>続いてS3とLambdaの連携です。API Gatewayに比べるとだいぶ設定が簡単です。S3にローカルPCからオブジェクトをコピーし、Lambdaが起動できることを確認していきます。</p><p><img src="/images/20200722/2020-07-17T17.05.34.png" alt=""></p><p>先程と同じようにまずはLambda関数のデプロイから実施していきます。<br>トリガの起動が確認できればよいので、Lambdaが起動したらメッセージが出力されるようなソースを用意します。<br>テスト用ソース</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(ctx context.Context, event events.S3Event)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"S3 trigger Lambda"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テスト用ソースでLambdaを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aws lambda create-function \</span><br><span class="line">  --endpoint-url=http://localhost:4574 \</span><br><span class="line">  --<span class="keyword">function</span>-name s3-trigger-test \</span><br><span class="line">  --runtime go1.x \</span><br><span class="line">  --handler main \</span><br><span class="line">  --zip-file fileb://main.zip \</span><br><span class="line">  --role r1</span><br></pre></td></tr></table></figure><p>続いて今回のLambda起動となるS3バケットの作成です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint-url=http://localhost:4572 s3 mb s3://<span class="built_in">test</span>-bucket</span><br><span class="line">make_bucket: <span class="built_in">test</span>-bucket</span><br></pre></td></tr></table></figure><p>続いて作成したS3に対してLambda起動の権限を追加します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aws lambda add-permission \</span><br><span class="line">  --endpoint-url=http://localhost:4574 \</span><br><span class="line">  --region us-east-1 \</span><br><span class="line">  --<span class="keyword">function</span>-name s3-trigger-test \</span><br><span class="line">  --statement-id s3-put-event \</span><br><span class="line">  --principal s3.amazonaws.com \</span><br><span class="line">  --action <span class="string">"lambda:InvokeFunction"</span> \</span><br><span class="line">  --<span class="built_in">source</span>-arn arn:aws:s3:::<span class="built_in">test</span>-bucket</span><br></pre></td></tr></table></figure><p>作成したS3バケットに対する操作の通知を設定します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws s3api put-bucket-notification-configuration \</span><br><span class="line">  --endpoint-url=http://localhost:4572 \</span><br><span class="line">  --bucket <span class="built_in">test</span>-bucket \</span><br><span class="line">  --notification-configuration file://s3test-event.json</span><br></pre></td></tr></table></figure><p>設定Jsonファイル</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"LambdaFunctionConfigurations"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"LambdaFunctionArn"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"Events"</span>: [<span class="string">"s3:ObjectCreated:*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでS3バケットに対するPUT操作でLambdaが起動する設定ができました。<br>試しにテキストファイルをS3にPUTしてみましょう。<br>オブジェクトPUT</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws s3 cp sample.txt s3://<span class="built_in">test</span>-bucket \</span><br><span class="line">  --endpoint-url=http://localhost:4572 \</span><br><span class="line">  --profile localstack</span><br></pre></td></tr></table></figure><p>非同期なのでLambdaが実行されたのかどうかはオブジェクトをPUTした時点ではわかりません。<br>Lambdaの実行を確認するために、CloudWatchLogを確認してLambdaの起動を確認しましょう。<br>まずはログストリームの特定をします。log-group-nameは「/aws/lambda/&lt;Lambdaファンクション名&gt;」となります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws logs describe-log-streams \</span><br><span class="line">  --endpoint-url=http://localhost:4586 \</span><br><span class="line">  --<span class="built_in">log</span>-group-name=/aws/lambda/s3-trigger-test</span><br></pre></td></tr></table></figure><p>上記コマンドを実行すると下記のようにロググループのログストリームが表示されます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"logStreams"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"firstEventTimestamp"</span>: <span class="number">1585829767164</span>, </span><br><span class="line">            <span class="attr">"lastEventTimestamp"</span>: <span class="number">1585829767749</span>, </span><br><span class="line">            <span class="attr">"creationTime"</span>: <span class="number">1585829767942</span>, </span><br><span class="line">            <span class="attr">"uploadSequenceToken"</span>: <span class="string">"1"</span>, </span><br><span class="line">            <span class="attr">"logStreamName"</span>: <span class="string">"+52222/12/12/[$LATEST]ec3fbc60"</span>, </span><br><span class="line">            <span class="attr">"lastIngestionTime"</span>: <span class="number">1585829767947</span>, </span><br><span class="line">            <span class="attr">"arn"</span>: <span class="string">"arn:aws:logs:us-east-1:0:log-group:/aws/lambda/s3-trigger-test:log-stream:+52222/12/12/[$LATEST]ec3fbc60"</span>, </span><br><span class="line">            <span class="attr">"storedBytes"</span>: <span class="number">331</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ログストリーム名が確認できたら、ログストリームの中身を確認していきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws logs get-log-events \</span><br><span class="line">  --endpoint-url=http://localhost:4586 \</span><br><span class="line">  --<span class="built_in">log</span>-group-name=/aws/lambda/s3-trigger-test \</span><br><span class="line">  --<span class="built_in">log</span>-stream-name <span class="string">'+52222/12/12/[$LATEST]ec3fbc60'</span></span><br></pre></td></tr></table></figure><p>ログを確認するとmessageが想定通りに表示されていますね。成功です。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"nextForwardToken"</span>: <span class="string">"f/00000000000000000000000000000000000000000000000000000003"</span>, </span><br><span class="line">    <span class="attr">"events"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585829767947</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585829767164</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mSTART RequestId: 43bd5e82-0bfc-1c43-b8cf-085bc34c3d36 Version: $LATEST\u001b[0m"</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585829767947</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585829767359</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"S3 trigger Lambda"</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585829767947</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585829767554</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mEND RequestId: 43bd5e82-0bfc-1c43-b8cf-085bc34c3d36\u001b[0m"</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585829767947</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585829767749</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mREPORT RequestId: 43bd5e82-0bfc-1c43-b8cf-085bc34c3d36\tInit Duration: 103.67 ms\tDuration: 2.44 ms\tBilled Duration: 100 ms\tMemory Size: 1536 MB\tMax Memory Used: 20 MB\t\u001b[0m"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ], </span><br><span class="line">    <span class="attr">"nextBackwardToken"</span>: <span class="string">"b/00000000000000000000000000000000000000000000000000000000"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ストリームベース"><a href="#ストリームベース" class="headerlink" title="ストリームベース"></a>ストリームベース</h2><p>最後はストリームベーズのLambda起動の設定です。ローカルPCからKinesisへメッセージをPUTしてLambdaを起動させましょう。</p><p><img src="/images/20200722/2020-07-17T17.05.23.png" alt=""></p><p>例によってテスト用のLambdaを作成します。<br>今回はPUTしたメッセージの内容がログに出力されるようなソースを用意します。</p><figure class="highlight go"><figcaption><span>テスト用Lambdaコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(ctx context.Context, kinesisEvent events.KinesisEvent)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, record := <span class="keyword">range</span> kinesisEvent.Records &#123;</span><br><span class="line">kinesisRecord := record.Kinesis</span><br><span class="line">dataBytes := kinesisRecord.Data</span><br><span class="line">dataText := <span class="keyword">string</span>(dataBytes)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%s Data = %s \n"</span>, record.EventName, dataText)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3回目なのでデプロイのコマンドはは割愛します。いままでのコマンドと同じになります。Lambdaが作成できたら次はトリガ起動のもととなるKinesisStreamを作成します。</p><figure class="highlight sh"><figcaption><span>KinesisStream作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws kinesis --endpoint-url=http://localhost:4568 create-stream --stream-name lambda-test --shard-count 1</span><br></pre></td></tr></table></figure><p>必要なリソースが作成できたらKinesisとLambdaの紐付けの設定をします。</p><figure class="highlight sh"><figcaption><span>イベントトリガの設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws lambda create-event-source-mapping \</span><br><span class="line">  --endpoint-url=http://localhost:4574 \</span><br><span class="line">  --event-source-arn arn:aws:kinesis:us-east-1:000000000000:stream/lambda-test  \</span><br><span class="line">  --<span class="keyword">function</span>-name kinesis-trigger-test</span><br></pre></td></tr></table></figure><p>event source mappingの設定ではエラー時のレコード送信先をSQSに設定できたり、バッチ処理するレコードの数など色々なオプションを指定することができます。</p><p>それではKinesisにテストレコードをputしてみましょう。</p><figure class="highlight sh"><figcaption><span>メッセージPUT</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws kinesis --endpoint-url=http://localhost:4568 put-record --stream-name lambda-test --partition-key 123 --data <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>レコードをPUTした時点ではLambdaが起動したかわからないので、S3の時同様CloudWatchを確認しにいきます。</p><p>手順は先程と同じになります。<br>まずは、ログストリームの確認です。</p><figure class="highlight sh"><figcaption><span>ログストリームの確認</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws logs describe-log-streams \</span><br><span class="line">  --endpoint-url=http://localhost:4586 \</span><br><span class="line">  --<span class="built_in">log</span>-group-name=/aws/lambda/kinesis-trigger-test</span><br></pre></td></tr></table></figure><p>ログストリームの確認ができたらログを確認します。</p><figure class="highlight sh"><figcaption><span>らログを確認</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws logs get-log-events \</span><br><span class="line">  --endpoint-url=http://localhost:4586 \</span><br><span class="line">  --<span class="built_in">log</span>-group-name /aws/lambda/kinesis-trigger-test \</span><br><span class="line">  --<span class="built_in">log</span>-stream-name <span class="string">'+52222/12/21/[$LATEST]8d33a723'</span></span><br></pre></td></tr></table></figure><p>ログが確認できましたね。KinesisにPUTしたtestという文字列も返ってきています。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"nextForwardToken"</span>: <span class="string">"f/00000000000000000000000000000000000000000000000000000003"</span>, </span><br><span class="line">    <span class="attr">"events"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585830597603</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585830596901</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mSTART RequestId: 38463daf-5f85-1220-65eb-9607f3f807fe Version: $LATEST\u001b[0m"</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585830597603</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585830597075</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">" Data = test "</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585830597603</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585830597250</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mEND RequestId: 38463daf-5f85-1220-65eb-9607f3f807fe\u001b[0m"</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585830597603</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585830597425</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mREPORT RequestId: 38463daf-5f85-1220-65eb-9607f3f807fe\tInit Duration: 54.77 ms\tDuration: 3.63 ms\tBilled Duration: 100 ms\tMemory Size: 1536 MB\tMax Memory Used: 21 MB\t\u001b[0m"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ], </span><br><span class="line">    <span class="attr">"nextBackwardToken"</span>: <span class="string">"b/00000000000000000000000000000000000000000000000000000000"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>長文ご付き合いありがとうございました。今回はLambdaの各起動型の中から代表的なリソースのイベントによるLambdaの起動設定をおさらいしてきました。</p><p>このあたりの設定に関しては知っていれば難しいことはないのですが、初見だと少し苦労する部分かなと思います。本記事ではCLIによる設定をしていきましたが、もちろんCloudFormationやTerraformなどのInfrastructure as Codeでも設定すべき内容は基本的に同じになります。</p><p>一度マスターしてしまえばどうということ無いことなので、ぜひ一度Localstackを利用して試しに実装してみてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/tags/Serverless%E9%80%A3%E8%BC%89/&quot;&gt;サーバレス連載企画&lt;/a&gt;の7回目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
      <category term="LocalStack" scheme="https://future-architect.github.io/tags/LocalStack/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>PythonユーザーのためのGraalVM</title>
    <link href="https://future-architect.github.io/articles/20200721/"/>
    <id>https://future-architect.github.io/articles/20200721/</id>
    <published>2020-07-20T15:00:00.000Z</published>
    <updated>2020-07-22T01:42:56.075Z</updated>
    
    <content type="html"><![CDATA[<p>ちょうど一年ぐらい前にGraalVMが商用利用可能な安定版に達し、Enterprise版もリリースされたというニュースがあります。</p><ul><li><a href="https://www.publickey1.jp/blog/19/graalvmgraalvm_190javajavascriptgraalvm_enterprise_edition.html" target="_blank" rel="noopener">publickey: GraalVM、ついに本番利用可能なバージョン「GraalVM 19.0」登場、JavaやJavaScriptなど多言語対応ランタイム。商用版のGraalVM Enterprise Editionもリリース</a></li></ul><p>GraalVMにはPython機能もあると宣伝されているものの、詳しい説明が行われることがなく、それが何者で、どのようなステータスで、どこを目指しているのか、きちんと答えられる人は（日本どころか世界でも）ほぼいないでしょう。GraalVMそのものの説明はちょくちょく出てくるようになってきたと思いますが、そのPythonの機能についてはあまり説明されていないため、Python部分にフォーカスして紹介します。</p><h1 id="Graal-Pythonのインストール"><a href="#Graal-Pythonのインストール" class="headerlink" title="Graal.Pythonのインストール"></a>Graal.Pythonのインストール</h1><p><a href="https://www.graalvm.org/getting-started/" target="_blank" rel="noopener">GraalVMのインストール</a>をまず行い、次にGraal.Pythonをインストールします。</p><p>インストールはWindows/macOS/Linux向けにバイナリが提供されているので、それを展開してパスを通すなどするだけです。この記事の執筆時点で、20.1が最新バージョンになります。</p><p><a href="https://github.com/graalvm/graalvm-ce-builds/releases" target="_blank" rel="noopener">https://github.com/graalvm/graalvm-ce-builds/releases</a></p><p>WindowsとLinuxなら展開したフォルダ（graalvm-ce-java11-20.1.0）をJAVA_HOMEに、その下のbinフォルダをPATHに追加してあげればGraalVM完了です。</p><p>macOSはJavaに対するちょっとしたサポートがあるので、ちょっと手順が異なり、\ <code>/Library/Java/JavaVirtualMachines</code> フォルダに展開したフォルダをおきます。\ <code>/usr/libexec/java_home -V</code>\ コマンドでおいたフォルダが認識されればJAVA_HOMEの設定は不要です。ただ、この中のbinフォルダへのパスは通す必要があります。</p><p>なお、binフォルダへのパスですが、もろもろ影響が大きいので、可能ならdirenvなどを使って必要なワークフォルダ内でのみパスを通すとか、必要なときに手動でパスを設定するなどした方が良いです。</p><p>インストールが終わるとguコマンドが利用できるようになります。<code>gu available</code>で追加インストール可能なコンポーネント一覧が表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">% gu available</span><br><span class="line">Downloading: Component catalog from www.graalvm.org</span><br><span class="line">ComponentId              Version             Component name      Origin </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">llvm-toolchain           20.1.0              LLVM.org toolchain  github.com</span><br><span class="line">native-image             20.1.0              Native Image        github.com</span><br><span class="line">python                   20.1.0              Graal.Python        github.com</span><br><span class="line">R                        20.1.0              FastR               github.com</span><br><span class="line">ruby                     20.1.0              TruffleRuby         github.com</span><br><span class="line">wasm                     20.1.0              GraalWasm           github.com</span><br></pre></td></tr></table></figure><p>Pythonをインストールするので、次のようにタイプします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% gu install python</span><br></pre></td></tr></table></figure><h1 id="GraalVMとは何者か"><a href="#GraalVMとは何者か" class="headerlink" title="GraalVMとは何者か"></a>GraalVMとは何者か</h1><p>先ほどグローバルにパスを通すのはやめておいた方がよい、とお伝えしました。Python以外にnative-imageもインストールした状態ですが、/binフォルダの中は次のようになっています。　</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> % ls /Library/Java/JavaVirtualMachines/graalvm-ce-java11-20.1.0/Contents/Home/bin </span><br><span class="line">graalpythonjavacjdbjimagejmodjstackllipack200rmiregistry</span><br><span class="line">gujavadocjdeprscanjinfojpsjstatnative-imagepolyglotserialver</span><br><span class="line">jarjavapjdepsjjsjrunscriptjstatdnoderebuild-imagesunpack200</span><br><span class="line">jarsignerjcmdjfrjlinkjsjvisualvmnpmrmic</span><br><span class="line">javajconsolejhsdbjmapjshellkeytoolnpxrmid</span><br></pre></td></tr></table></figure><p>これをみるとわかるようにjavacやjar、javaといったコマンドがいるのがわかります。GraalVMは、ちょっとオルタナティブなJDKの顔をしているのがわかります。この後にも説明は出てきますが、Javaコンパイラとしても利用します。それ以外にはnode, npm, npxというコマンドも見えます。つまり、Node.jsの互換処理系も入っているのです。下手にパスを通すと、既存のJavaのプロジェクトやら、Node.jsのプロジェクトがおかしくなる可能性があります。なので、必要なフォルダでのみ有効にした方が良いです。</p><p>GraalVMですが、一つのVMの中で、JavaScriptやRといったさまざまな言語をサポートしています。Rでデータファイルを読み込んでPythonでデータ処理をして・・・など言語跨ぎで各言語の得意な部分を生かしたコーディングができるのを目指しているようです。</p><h1 id="Graal-Pythonの状況"><a href="#Graal-Pythonの状況" class="headerlink" title="Graal.Pythonの状況"></a>Graal.Pythonの状況</h1><p>Graal.Pythonの一次情報は<a href="https://www.graalvm.org/docs/reference-manual/languages/python/" target="_blank" rel="noopener">ここ</a>になります。</p><p>graalpythonを起動すると、次のようなメッセージが出ます。Python 3.8.2互換と言うことがわかります。なかなか新しいですね。公式ドキュメントとか昨年の情報をみると、19系は3.7だったようなので、順当に更新されています。なお、この起動メッセージにも入っていますが、まだearly stageで安定版ではないです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">% graalpython</span><br><span class="line">Python 3.8.2 (Fri May 15 05:42:24 PDT 2020)</span><br><span class="line">[GraalVM CE, Java 11.0.7] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">Please note: This Python implementation is <span class="keyword">in</span> the very early stages, and can run little more than basic benchmarks at this point.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/graalvm/graalpython" target="_blank" rel="noopener">README</a>によれば、scipyなどのパッケージ群をネイティブサポートしようというのが目下の目標らしいです。</p><p>venvを使った環境の分離も可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% graalpython -m venv .venv</span><br><span class="line">% <span class="built_in">source</span> .venv/bin/activate</span><br></pre></td></tr></table></figure><p>パッケージのインストールは動作確認済み？のものだけginstallモジュールを使ってインストールします。pipもvenvの中には作られるのですが、sslモジュールがインポートできないので・・・みたいな警告が出て、うまく使えませんでした。適当に思いつくパッケージをいろいろインストールしようとしたのですが、docutilsとかSphinxはダメで、pytestだけはインストールできたが、うまく動かず、みたいな感じです。既存のプロジェクトを持ってきてそのまま動かす、というのはまだ難しいです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ graalpython -m ginstall install numpy</span><br></pre></td></tr></table></figure><p>昨年の記事ですが、mocobetaさんがJanomeのインストールにトライした記事がありますが、このときと状況は変わっていません。</p><ul><li><a href="https://medium.com/@mocobeta/graalvm-graalpython-%E3%81%A7-janome-%E3%82%92%E7%84%A1%E7%90%86%E7%9F%A2%E7%90%86%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E3%83%A1%E3%83%A2-c07020f8193f" target="_blank" rel="noopener">GraalVM (graalpython) で janome を無理矢理動かしてみたメモ</a></li></ul><h2 id="polyglotサポート"><a href="#polyglotサポート" class="headerlink" title="polyglotサポート"></a>polyglotサポート</h2><p><code>--polyglot</code>オプションをつけると、いろいろな言語ランタイムにアクセスできるようになります。次のサンプルはREADMEのサンプルですが、PythonからJavaScriptの正規表現のクラスを呼び出しています。これだけでは実用性はなさそうですが・・・</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> polyglot</span><br><span class="line">re = polyglot.eval(string=<span class="string">"RegExp()"</span>, language=<span class="string">"js"</span>)</span><br><span class="line">pattern = re.compile(<span class="string">".*(?:we have (?:a )?matching strings?(?:[!\\?] )?)(.*)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pattern.exec(<span class="string">"This string does not match"</span>):</span><br><span class="line">    <span class="keyword">raise</span> SystemError(<span class="string">"that shouldn't happen"</span>)</span><br><span class="line"></span><br><span class="line">md = pattern.exec(<span class="string">"Look, we have matching strings! This string was matched by Graal.js"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> md:</span><br><span class="line">    <span class="keyword">raise</span> SystemError(<span class="string">"this should have matched"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Here is what we found: '%s'"</span> % md[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="Jython"><a href="#Jython" class="headerlink" title="Jython"></a>Jython</h2><p>Pythonの互換実装で有名なものはいくつかありますが、Javaで実装されたものがJythonです。RPAツールのSikuliXとかでもスクリプト言語として組み込まれていたりします。Jythonは2.7互換で実装されており、3系の実装は安定版が出ていません。Graal.PythonはJavaで実装された3.x系実装で、Jythonと出自は似ています。コマンドラインオプションでJythonをエミュレーションするモードも有効にできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% graalpython --jvm --experimental-options --python.EmulateJython</span><br></pre></td></tr></table></figure><p><a href="https://github.com/graalvm/graalpython/blob/master/docs/user/JYTHON.md" target="_blank" rel="noopener">ここのサンプルの通り</a>ですが、こんな感じで、AWTを使ってウインドウを表示できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> % graalpython --jvm --experimental-options --python.EmulateJython </span><br><span class="line">Python 3.8.2 (Sat Jun 13 16:19:51 JST 2020)</span><br><span class="line">[GraalVM CE, Java 11.0.7] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">Please note: This Python implementation is <span class="keyword">in</span> the very early stages, and can run little more than basic benchmarks at this point.</span><br><span class="line">&gt;&gt;&gt; import java.awt as awt</span><br><span class="line">&gt;&gt;&gt; win = awt.Frame()</span><br><span class="line">&gt;&gt;&gt; win.setSize(200, 200)</span><br><span class="line">&gt;&gt;&gt; win.setTitle(<span class="string">"Hello from Python!"</span>)</span><br><span class="line">&gt;&gt;&gt; win.getSize().toString()</span><br><span class="line"><span class="string">'java.awt.Dimension[width=200,height=200]'</span></span><br><span class="line">&gt;&gt;&gt; win.show()</span><br></pre></td></tr></table></figure><img src="/images/20200721/thumbnail.png" class="img-small-size"><p>デフォルトはnativeモードでAoTコンパイルをします。CPythonと変わらない感覚で使えます。JVMモードにするとJITコンパイルになりますが、ちょっとしたコードはこちらの方が時間がかかるようになります。ただ、Jythonのコードを実行するにはJVMモードでないとダメです。</p><p>アプリへの組み込みの場合、Jythonで提供していたクラスをそのまま提供しているわけではないため、いろいろ変更を行う必要があります。<a href="https://www.graalvm.org/docs/reference-manual/embed/#Function_Python" target="_blank" rel="noopener">そのためのドキュメント</a>も公開されています。JythonでPythonをスクリプトとして提供していたアプリからすると、変更の手間は必要なものの、Python以外にもJavaScriptやRubyも動くようになるので、乗り換えるメリットはあります。Python 2系を止めることもできますし。</p><h2 id="パフォーマンス"><a href="#パフォーマンス" class="headerlink" title="パフォーマンス"></a>パフォーマンス</h2><p>細かい計算で繰り返し回数が多くなるものはCPythonよりも早くなるとのことです。</p><ul><li><a href="https://qiita.com/kotauchisunsun/items/7b7eb1e759e3e4526e62" target="_blank" rel="noopener">Python標準実装より速い！？Oracleが作ったGraalPythonをJython・CPythonとベンチマークしてみた！！</a></li></ul><h1 id="ネイティブイメージ化"><a href="#ネイティブイメージ化" class="headerlink" title="ネイティブイメージ化"></a>ネイティブイメージ化</h1><p>GraalVMといえばネイティブな実行バイナリ（ネイティブイメージ）作成なのでPythonでもチャレンジしてみました。まずはnative-imageの処理系をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% gu install native-image</span><br></pre></td></tr></table></figure><p>基本的な使い方として紹介されているのはJavaで次のような手順で作ります。</p><ul><li>javacでコンパイル</li><li>(jarファイル作成)</li><li>.classもしくは.jarファイルをnative-imageコマンドでネイティブ化</li></ul><p>Java系以外の言語を使った事例や使い方の紹介というのが<a href="https://www.graalvm.org/docs/reference-manual/native-image/" target="_blank" rel="noopener">公式ドキュメント</a>を見てもほとんどないのですが、サンプルコードとして<a href="https://github.com/graalvm/graalvm-demos/tree/master/native-list-dir" target="_blank" rel="noopener">一つだけ</a>ありました。</p><ul><li>ListDir.java: Javaからネイティブイメージ作成</li><li>ExtListDir.java: 他の言語(JavaScript)を使ったサンプル</li></ul><p>他の言語を使ったサンプルも.javaファイルです。これは公式ドキュメントでも次のように説明されています。</p><blockquote><p>GraalVM native-image supports JVM-based languages, e.g., Java, Scala, Clojure, Kotlin. The resulting native image can, optionally, execute dynamic languages like JavaScript, Ruby, R, or Python, but it does not pre-compile their code itself.</p></blockquote><p>これを動的言語目線で再構成すると次のようになります。</p><ul><li>Pythonなどの動的言語は「実行はできる」が、それはJVMベースの言語（Java, Scala, Clojure, Kotlin）をホストにして、そこから呼び出す形</li><li>動的言語のコードは事前コンパイルされない</li></ul><p>これはつまり、動的言語の処理系はネイティブ化されるが、それによって実行されるコードはコード中の文字列のまま、ということですね。<a href="https://www.ibm.com/developerworks/jp/java/library/j-jython/index.html" target="_blank" rel="noopener">Jythonのjpythoncコマンド</a>のように、Pythonを.classにする機能でも入れば、Pythonを直接ネイティブ化という道も開けるんでしょうが、現状ではそれに対応していません。</p><p>ExtListDir.javaをPythonに書き換えたのが次のコードです。<code>Context.create()</code>とそのコンテキストの<code>eval()</code>に<code>&quot;python&quot;</code>を渡すことで、Pythonのコードが解釈されます。</p><figure class="highlight java"><figcaption><span>ExtListDir.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.graalvm.polyglot.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtListDir</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Context context = Context.create(<span class="string">"python"</span>);</span><br><span class="line">String s = <span class="string">"f'&#123;name&#125;: &#123;size&#125;'"</span>;</span><br><span class="line">      String root = <span class="string">"."</span>;</span><br><span class="line"><span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">root = args[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(args.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">s = args[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"Walking path: "</span> + Paths.get(root));</span><br><span class="line">System.out.println(<span class="string">"Python function body: "</span> + s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Value lambda = context.eval(<span class="string">"python"</span>,</span><br><span class="line">            <span class="string">"lambda name, size: "</span> + s);</span><br><span class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; paths = Files.walk(Paths.get(root))) &#123;</span><br><span class="line">paths.filter(Files::isRegularFile).forEach((Path p) -&gt; &#123;</span><br><span class="line">File f = p.toFile();</span><br><span class="line">Value v = lambda.execute(f.getName(), f.length());</span><br><span class="line">System.out.println(v);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これからネイティブバイナリを作成してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .classファイル作成</span></span><br><span class="line">% javac ExtListDir.java</span><br><span class="line"><span class="comment"># 動作確認で実行してみる</span></span><br><span class="line">% java ExtListDir</span><br><span class="line">% ネイティブイメージ作成</span><br><span class="line">% native-image --language:python ExtListDir</span><br></pre></td></tr></table></figure><p>すごく時間がかかります。MacBookAir 2020のCore i5です。13分かかってイメージサイズも240MBを超えました。インタプリタ部分をがんばってネイティブ化しているようです。</p><p>なお、pure Javaな場合の使い勝手は悪くないな、と思いました。javac&amp;javaでいつものように動作確認ができ、その後native-imageを使ってイメージ作成しても40秒かからず、サイズもJavaのランタイムが不要な6MBのバイナリになります。普段の開発はいつものようにjavacとjavaで高速にイテレーションを回し、最後にDocker化するときはnative-imageを使いつつ小さなDockerイメージを作成という流れで開発ができます。これはJavaにとってはとても良いものですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>GraalPythonを試しました。</p><ul><li>まだ実験リリース</li><li>いろんな言語を組み合わせて実行するpolyglotの処理系の一つとして実装されている</li><li>GraalVM 20系はPython 3.8ベース</li><li>機械学習に対応する部分を目指して開発されているが、Jythonモードがあったり、2.7で止まっているJythonの後継としても期待できる</li><li>まだ使えない公式ライブラリも多く、既存のライブラリも気軽に使えない</li><li>GraalVMのネイティブ化は時間もかかりバイナリもでかくなり、GraalVMの動的言語勢はメリットはない</li></ul><p>GraalVMはPythonが使える、GraalVMはネイティブイメージが使える、の二つの文章を読むと、Pythonがネイティブになりそうな印象も持ってしまいがちですが、そうではない、ということがわかりました。とはいえ、Python2.7時代のJython並に開発が進めば、用途はいろいろ広がると思います。楽しみですね。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ちょうど一年ぐらい前にGraalVMが商用利用可能な安定版に達し、Enterprise版もリリースされたというニュースがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.publickey1.jp/blog/19/graalvmgraalvm_
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="GraalVM" scheme="https://future-architect.github.io/tags/GraalVM/"/>
    
  </entry>
  
  <entry>
    <title>Zuora連載 Vol.4 Workflowの話</title>
    <link href="https://future-architect.github.io/articles/20200720/"/>
    <id>https://future-architect.github.io/articles/20200720/</id>
    <published>2020-07-19T15:00:00.000Z</published>
    <updated>2020-07-22T14:29:23.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの町田です。</p><p>Zuora Central Platform（Zuora社が提供するサブスクリプションプラットフォーム名の正式名称/以降 <strong>Zuora</strong> と記載いたします）の連載の第4回はWorkflowです。</p><p>Workflowは<a href="https://future-architect.github.io/articles/20200716/">前回の記事</a>で説明した通知機能と同じく、業務フローを設計する際に必ず理解する必要があります。また、Workflowは通知機能との組み合わせることが多いです。</p><p>他のZuora記事は<a href="https://future-architect.github.io/tags/Zuora/">こちら</a>を参照ください。</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li><a href="./#概要">概要</a></li><li><a href="./#Workflow開発方法">Workflow開発方法</a></li><li><a href="./#Workflow設定">Workflow設定</a></li><li><a href="./#Workflow実行方法">Workflow実行方法</a></li><li><a href="./#Task">Task</a></li><li><a href="./#Swimlane">Swimlane</a></li><li><a href="./#最後に">最後に</a></li><li><a href="./#関連リンク集">関連リンク集</a></li></ul><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Workflowの概要は<a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow" target="_blank" rel="noopener">Workflow - Zuora</a>から引用します。</p><blockquote><p>Zuora Workflow is a Zuora product for designing, configuring, and deploying business workflows in Zuora. With Workflow, you can automate a set of business processes that otherwise need to be performed manually and repetitively.<br>訳：Zuoraワークフローは、Zuoraでビジネスワークフローを設計、構成、および展開するためのZuora製品です。ワークフローを使用すると、手動で繰り返し実行する必要がある一連のビジネスプロセスを自動化できます。</p></blockquote><p>とあるように、Zuoraに実際の業務に合わせた制御を加えるために必須の機能です。業務プロセスの自動化や業務フローの設計には必ずWorkflowを利用することになるでしょう。</p><h1 id="Workflow開発方法"><a href="#Workflow開発方法" class="headerlink" title="Workflow開発方法"></a>Workflow開発方法</h1><ol><li>Zuoraログイン後のサイドメニューにて<code>プラットフォーム</code> &gt; <code>ワークフロー</code> を選択。  WorkflowのTOP画面である<code>OVERVIEW</code>タブに遷移する。ここではWorkflowの実行状況やサマリを確認することができる。<br><img src="/images/20200720/thumbnail.png" alt=""></li><li>WORKFLOWタブをクリックで、Workflow一覧画面に遷移する。右上の表示切替ボタンをクリックするとリスト形式の一覧にできます。編集したいWorkflowの<code>Edit</code>ボタンをクリックすることで、Workflow編集画面へと遷移する。<br><img src="/images/20200720/workflow_settings2.png" alt=""></li><li>Workflow編集画面: Workflowは<strong>Task</strong>と呼ばれる個々の機能を繋げ合わせることで完成する。<br><img src="/images/20200720/workflow_settings3.png" alt=""></li><li>▶ボタンがあるTaskが開始Taskとなっている<code>+</code>ボタンをクリックすることで後続Taskを追加することができる。<br><br><img src="/images/20200720/workflow_settings5.png" class="img-small-size"><br></li><li>開始Task移行のTask<ul><li><code>🖊</code>ボタン：Taskの設定・編集</li><li><code>x</code>ボタン：Taskの削除</li><li><code>+</code>ボタン：後続Taskを追加<br><br><img src="/images/20200720/workflow_settings6.png" class="img-small-size"><br></li></ul></li><li>Taskの追加:   各Taskの<code>+</code>をクリック後、Task成功時は<code>On Success</code>、Taskエラー時は<code>On Failure</code>を選択して追加したいTaskを選択する。各Taskの機能については<a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow" target="_blank" rel="noopener">Workflow - Zuora</a>を参照。<br><img src="/images/20200720/workflow_settings7.png" class="img-middle-size"><br></li></ol><h1 id="Workflow設定"><a href="#Workflow設定" class="headerlink" title="Workflow設定"></a>Workflow設定</h1><ol><li>Workflowの設定にはWorkflow全体の設定を、Workflowごとの設定がある<ul><li><strong>Workflow全体設定</strong>：<code>SETTINGS</code>タブをクリック: Workflowのメンテナンスをするためのユーティリティ、Workflow開発ユーザの設定、外部SMTPサーバの設定が可能。初期設定以外で触ることはほとんどないと思われる。<br><img src="/images/20200720/workflow_settings8.png" alt=""></li><li><strong>Workflowごとの設定</strong>：各Workflow編集画面で<code>SETTINGS</code>タブをクリック<br><img src="/images/20200720/workflow_settings9.png" alt=""></li><li><strong>Workflow Information:</strong> Workflow名、説明の設定</li><li><strong>Workflow Triggers:</strong> Workflowを実行する方法を選択<ul><li><strong>On Demand:</strong> チェックするとWorkflow一覧画面や編集画面から実行することができるようになる。</li><li><strong>Callout:</strong> チェックするとAPIによるWorkflowの実行ができるようになる。</li><li><strong>Scheduled:</strong> Cron形式でスケジュール実行の設定ができる。</li></ul></li><li><strong>Workflow Email Notifications:</strong> メールアドレスを設定することで、Workflow成功時、エラー時等にメールによる通知ができる。複数アドレス可。</li><li><strong>Execution Priority:</strong> Workflowの優先度を設定。同時に実行中のWorkflowがあった場合には、優先度が高いWorkflowが優先して実行される。</li><li><strong>Workflow Configuration:</strong> 設定不可</li><li><strong>Callout Config:</strong> WorkflowをコールアウトAPIで実行する場合の情報について確認できる。</li><li><strong>Mapped Input Fields and Params:</strong>  Workflow内で利用可能な変数はここで定義する。<br>コールアウトAPIによって呼ばれた際に、ここで設定したパラメータをリクエストBodyに設定することで値の受け渡しができる。</li></ul></li></ol><h1 id="Workflow実行方法"><a href="#Workflow実行方法" class="headerlink" title="Workflow実行方法"></a>Workflow実行方法</h1><p>Workflowの実行方法は以下3通りです。</p><ol><li><a href="./#①オンデマンド実行">オンデマンド実行</a></li><li><a href="./#②コールアウト実行">コールアウト実行</a></li><li><a href="./#③スケジュール実行">スケジュール実行</a></li></ol><p><a href="./#Workflow設定">Workflow設定</a>のWorkflowごとの設定の<strong>Workflow Triggers</strong>にてチェックした実行方法が有効となります。</p><h2 id="①オンデマンド実行"><a href="#①オンデマンド実行" class="headerlink" title="①オンデマンド実行"></a>①オンデマンド実行</h2><ul><li>Workflow一覧画面にて、実行したいWorkflowの<code>▶Run</code>をクリック<br><img src="/images/20200720/workflow_settings2.png" alt=""></li><li>またはWorkflow編集画面で開始Taskの▶をクリック<br><br><img src="" alt=""><img src="/images/20200720/workflow_run2.png" class="img-small-size"></li></ul><h2 id="②コールアウト実行"><a href="#②コールアウト実行" class="headerlink" title="②コールアウト実行"></a>②コールアウト実行</h2><p><a href="https://www.zuora.com/developer/api-reference/#operation/POST_Run_Workflow" target="_blank" rel="noopener">こちらのAPI</a>による実行。 <a href="./#Workflow設定">Workflow設定</a>のWorkflowごとの設定の<strong>Callout Config</strong>にてURLやRequest情報が確認できます。</p><pre><code class="sh">curl --location --request POST <span class="string">'https://workflow.apps.zuora.com/api/v1/workflows/{workflow_id}/run'</span> \--header <span class="string">'Content-Type: application/json; charset=utf-8'</span> \--header <span class="string">'API-Token: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span> \--data-raw <span class="string">'{</span><span class="string">    "{params}":"xxxxxx"</span><span class="string">}'</span></code></pre><p>Bodyに設定するパラメータは<a href="./#Workflow設定">Workflow設定</a>のWorkflowごとの設定の<strong>Mapped Input Fields and Params</strong>にて設定したパラメータを設定します。</p><img src="/images/20200720/workflow_run3.png" style="border:solid 1px #000000"><pre><code class="sh">--data-raw <span class="string">'{</span><span class="string">    "SubscriptionId":"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span><span class="string">}'</span>※Workflow内では、<span class="string">'{{ Data.Workflow.SubscriptionId }}'</span>のように取得する。</code></pre><h2 id="③スケジュール実行"><a href="#③スケジュール実行" class="headerlink" title="③スケジュール実行"></a>③スケジュール実行</h2><p><a href="./#Workflow設定">Workflow設定</a>のWorkflowごとの設定の<strong>Workflow Triggers</strong>にて<strong>Scheduled</strong>にチェックすると、<strong>Scheduled Config</strong>項目が表示されます。</p><img src="/images/20200720/workflow_run4.png" class="img-middle-size" style="border:solid 1px #000000"><p>設定は<code>Interval</code>欄にてcron形式で設定が可能だが、設定項目の各プルダウン項目を選択することでも設定が可能です。</p><h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><p>WorkflowはTaskの組み合わせて開発する。Taskについては<a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow" target="_blank" rel="noopener">Workflow - Zuora</a>に各Taskの機能説明あります。よく使うと思われるTaskを紹介します。</p><ol><li><a href="./#①Object-Query">Object Query</a></li><li><a href="./#②Data-Query">Data Query</a></li><li><a href="./#③CSVTranslator">CSVTranslator</a></li><li><a href="./#④Callout">Callout</a></li></ol><h2 id="①Object-Query"><a href="#①Object-Query" class="headerlink" title="①Object Query"></a>①Object Query</h2><p><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/AB_Query" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/AB_Query</a></p><p>Zuoraオブジェクトを選択してデータの取得を行うTaskです。</p><ul><li>選択<br><img src="/images/20200720/workflow_task4.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200720/workflow_task5.png" class="img-middle-size" style="border:solid 1px #000000"></li><li><code>FIELDS</code>タブで、選択したオブジェクトで取得したいフィールドを選択<br><img src="/images/20200720/workflow_task6.png" class="img-middle-size" style="border:solid 1px #000000"></li><li><code>CONDITIONS</code>タブで、取得条件を設定する<br><img src="/images/20200720/workflow_task7.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul><h2 id="②Data-Query"><a href="#②Data-Query" class="headerlink" title="②Data Query"></a>②Data Query</h2><p><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/AC_data_query" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/AC_data_query</a></p><p>SQL(<a href="https://knowledgecenter.zuora.com/Central_Platform/Query/ZOQL" target="_blank" rel="noopener">ZOQL</a>というらしい)によるデータのエクスポートを行うTask。Object Queryより柔軟なデータ取得ができます。</p><img src="/images/20200720/workflow_task1.png" class="img-middle-size" style="border:solid 1px #000000"><p>SQLを書くだけで、取得した結果はCSV、TSV、DSV、JSONにフォーマットして後続Taskに渡すことが可能です。</p><img src="/images/20200720/workflow_task2.png" style="border:solid 1px #000000"><p>超えることはそうそうないとは思うが、Data Queryには制限があるため注意しましょう。</p><img src="/images/20200720/workflow_task3.png" style="border:solid 1px #000000"><table><thead><tr><th align="left">LIMIT(制限)</th><th align="left">VALUE(閾値)</th></tr></thead><tbody><tr><td align="left">Max Execution Time(最大実行時間)</td><td align="left">120分</td></tr><tr><td align="left">Max Number of Input Records(入力レコード最大数)</td><td align="left">500K</td></tr><tr><td align="left">Max Number of Output Records(出力レコード最大数)</td><td align="left">100K</td></tr><tr><td align="left">Number of Concurrent Queries(同時クエリ数)</td><td align="left">5</td></tr><tr><td align="left">Max Memory per Query(1クエリ毎の最大メモリ数)</td><td align="left">2G</td></tr></tbody></table><h2 id="③CSVTranslator"><a href="#③CSVTranslator" class="headerlink" title="③CSVTranslator"></a>③CSVTranslator</h2><p>Data Queryなどで取得した結果をJSON構造やXML構造に変換するためのTaskです。</p><img src="/images/20200720/workflow_task10.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20200720/workflow_task9.png" class="img-middle-size" style="border:solid 1px #000000"><p>変換だけでなく、取得したデータをFilterしたり、Mergeができます。<br><img src="/images/20200720/workflow_task11.png" alt=""></p><p><strong><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/BG_Logic_JSON_Transform" target="_blank" rel="noopener">JSONTransform</a></strong>という、Data Queryなどで取得した結果をJSON構造に変換するためのTaskです。</p><img src="/images/20200720/workflow_task8.png" class="img-middle-size" style="border:solid 1px #000000"><p>クエリで取得した結果のデータをネストしたJSON構造などにする際にはこちらを利用する。主にJSONataという式を駆使して実装することになる。</p><img src="/images/20200720/workflow_task12.png" style="border:solid 1px #000000"><p>JSONata式による実装は若干とっつきにくいが、<a href="https://try.jsonata.org/SJZDsyHTr" target="_blank" rel="noopener">JSONata Exerciser</a>という便利ツールを利用することで、結果を確認しながら実装が可能です。</p><h2 id="④Callout"><a href="#④Callout" class="headerlink" title="④Callout"></a>④Callout</h2><p><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/IC_Notifications_Callout" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/IC_Notifications_Callout</a></p><p>Workflow内で取得・加工した結果をCalloutAPIを呼び出して連携するためのTaskです。</p><img src="/images/20200720/workflow_task14.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20200720/workflow_task13.png" style="border:solid 1px #000000"><ul><li>BODYタブでRequest.Bodyに設定する値を定義する。こちらは<a href="https://shopify.github.io/liquid/" target="_blank" rel="noopener">Liquid式</a>を利用して設定する。(<code>HELP</code>タブ参照)</li></ul><img src="/images/20200720/workflow_task15.png" style="border:solid 1px #000000"><ul><li>AUTHENTICATIONタブで、Callout呼び出し時の認証について設定する。認証方式はBasic認証、OAuth2.0やhmacなど利用可能です。</li></ul><img src="/images/20200720/workflow_task16.png" style="border:solid 1px #000000"><h1 id="Swimlane"><a href="#Swimlane" class="headerlink" title="Swimlane"></a>Swimlane</h1><p>Workflow開発時にデバッグをしたい場合に利用する機能です。詳細は<a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Using_Workflow/C_Monitor_and_Troubleshoot_a_Workflow" target="_blank" rel="noopener">こちら</a>参照ください。</p><ul><li>Workflow編集画面の<code>TASKS</code>タブを開くと、各タスクの実行履歴一覧が表示されるので、デバッグしたいTaskの行の一番左のメニューカラムをクリックして<code>Swimlane</code>をクリックする。</li><li>Swimlaneは一度でもWorkflowを実行してTask履歴が存在しないと確認できない。<br><img src="/images/20200720/workflow_swimlane2.png" alt=""></li><li>Swimlane画面では、各タスクの実行状況と、Workflow内の各パラメータ値やデバッグが行える。<br><img src="/images/20200720/workflow_swimlane3.png" alt=""></li><li>Workflow内で扱うパラメータ値。選択したTask時点のパラメータが表示される。<br><img src="/images/20200720/workflow_swimlane4.png" alt=""></li><li>エラーが発生しているTaskは赤い表示<br><br><img src="/images/20200720/workflow_swimlane5.png" class="img-small-size" style="border:solid 1px #000000"><br></li><li>エラーの内容はInfoで確認できる。<code>Workflow Task Config</code>や<code>Instance Config</code>で設定変更して<code>Rerun</code>で、そのTaskから再実行ができる。<img src="/images/20200720/workflow_swimlane6.png" style="border:solid 1px #000000"></li><li>Data QueryやCalloutによるWorkflow内でのAPI実行の結果は、<code>API Calls</code>でRequestやResponse内容が確認できる。<img src="/images/20200720/workflow_swimlane7.png" style="border:solid 1px #000000"><img src="/images/20200720/workflow_swimlane8.png" style="border:solid 1px #000000"></li></ul><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>予期せぬ動きをさせないためには、Workflow全体の動きや個々のTaskの動作をよく理解した上で使いこなす必要はありますが、WorkflowはZuoraとの連携を行ったシステム構築や、Zuoraの基本機能から外れた制御を行う場合には、必ず必要となる機能になります。</p><h1 id="関連リンク集"><a href="#関連リンク集" class="headerlink" title="関連リンク集"></a>関連リンク集</h1><p><strong>Workflow開発リンク集</strong>: </p><ul><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow" target="_blank" rel="noopener">Workflow - Zuora</a><ul><li>Workflowの概要、チュートリアル、使用例、Taskのリファレンスなどについて掲載</li></ul></li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/C_Get_Started_with_Workflow/General_steps_for_using_Workflow" target="_blank" rel="noopener">General steps for using Workflow - Zuora</a><ul><li>Workflowの開発手順について掲載</li></ul></li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Using_Workflow/A_Edit_a_Workflow" target="_blank" rel="noopener">Edit a Workflow - Zuora</a><ul><li>Workflow開発画面での編集方法について掲載</li></ul></li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/C_Get_Started_with_Workflow/C_Workflow_User_Interface" target="_blank" rel="noopener">Workflow User Interface - Zuora</a><ul><li>Workflow画面のUIについての説明が掲載</li></ul></li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Using_Workflow/C_Monitor_and_Troubleshoot_a_Workflow" target="_blank" rel="noopener">Monitor and Troubleshoot a Workflow - Zuora</a><ul><li>Workflow実行した際の履歴の確認、デバッグ方法について掲載</li></ul></li></ul><p><strong>Workflow開発に便利なリンク集</strong>: </p><ul><li><a href="https://shopify.github.io/liquid/" target="_blank" rel="noopener">Liquid template language</a><ul><li>Workflowの一部のTaskの設定ではLiquid式というテンプレート言語を利用してロジックを書くことになる</li></ul></li><li><a href="https://try.jsonata.org/SJZDsyHTr" target="_blank" rel="noopener">JSONata Exerciser</a><ul><li>Workflowの一部のTaskでJSONata式でJSONフォーマットを行うことができます。上記はJSONataのテスターとして利用可能</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGの町田です。&lt;/p&gt;
&lt;p&gt;Zuora Central Platform（Zuora社が提供するサブスクリ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Workflow" scheme="https://future-architect.github.io/tags/Workflow/"/>
    
      <category term="Zuora" scheme="https://future-architect.github.io/tags/Zuora/"/>
    
      <category term="SaaS" scheme="https://future-architect.github.io/tags/SaaS/"/>
    
      <category term="サブスクリプション" scheme="https://future-architect.github.io/tags/%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>CORSのプリフライトリクエスト（OPTIONメソッド）はAPI Keyの認証なしでOKにしておかないと失敗する話</title>
    <link href="https://future-architect.github.io/articles/20200717/"/>
    <id>https://future-architect.github.io/articles/20200717/</id>
    <published>2020-07-16T15:00:00.000Z</published>
    <updated>2020-07-22T14:31:17.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニットの真野です。この技術ブログの運営や、ここ数年は産業向けのIoT（例えば工場IoTやモビリティIoT）を行っています。本エントリーのネタを書くキッカケになったのは、<a href="https://future-architect.github.io/articles/20200214/">GCP連載#7 GCPのData Transfer Serviceを使って簡単にS3からBigQueryにデータ転送をしてみる</a>の記事を書いたり、最近は<a href="https://future-architect.github.io/articles/20200204/">アイコン作成にまで手を伸ばしている</a>多芸な加部さんと某IoTな案件のバックエンドの接続テストをしているときに気がついたネタです。</p><h1 id="記事の概要"><a href="#記事の概要" class="headerlink" title="記事の概要"></a>記事の概要</h1><p>記事の内容ですが、<a href="https://future-architect.github.io/articles/20200421/">Real World HTTP 第2版はなぜ1.5倍になったのか | Future Tech Blog</a> で触れられている、以下のCORS周りについて書いていきます。</p><blockquote><p><strong>会社のチャットで、CORSのプリフライトリクエスト（OPTIONメソッド）は認証なしでOKにしておかないとCORSのやりとりが失敗する</strong> というのを見て、なるほどぉ、と思ったりもあります。</p></blockquote><p>上記でフンフンそうだよね、って理解された方は本記事の対象レベルを超えているので、生暖かく続きを御覧ください。これだけだとちょっとどういうことがわからいよ！って人向けに説明していきます。</p><h1 id="CORSとは"><a href="#CORSとは" class="headerlink" title="CORSとは"></a>CORSとは</h1><p>CORSとは <strong>オリジン間リソース共有</strong>（Cross-Origin Resource Sharing）の略で、HTTP ヘッダーを使用して、あるオリジンで動作しているウェブアプリケーションに、異なるオリジンにある選択されたリソースへのアクセス権を与えるようブラウザーに指示するための仕組みです。</p><ul><li>(参考)<a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CORS" target="_blank" rel="noopener">https://developer.mozilla.org/ja/docs/Web/HTTP/CORS</a></li></ul><p>最近はSPAな画面をブラウザで構築することが当たり前になってきていて、バックエンドの通信はJSON形式のWebAPI経由で通信することが多いと思いますが、最初のページを取得した <strong>オリジン</strong>  (≒ドメイン＋プロトコル＋ポート番号) と、WebAPIのオリジンが異なると、適切な設定なしでは以下のようなエラーメッセージがブラウザに表示されて上手く通信できません。</p><p><code>&#39;Access-Control-Allo-Origin&#39; header is present on the requested resource.</code> といったメッセージをブラウザのデベロッパーツールのコンソールで一度は見かけた人も多いのではないでしょうか？</p><p><img src="/images/20200717/thumbnail.png" alt=""></p><h1 id="CORSのプリフライトリクエストについて"><a href="#CORSのプリフライトリクエストについて" class="headerlink" title="CORSのプリフライトリクエストについて"></a>CORSのプリフライトリクエストについて</h1><p>もし、WebAPIのリクエストに <code>x-api-key</code> のようなフィールドを用いて認証を行っている場合は、CORSの仕様では実際のHTTPリクエストを行う前に、 <strong>プリフライトリクエスト</strong> という、 <strong>OPTIONS</strong> メソッドでサーバに要求が行われます。</p><p><img src="/images/20200717/preflight_correct.png" alt=""></p><p><a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CORS#Preflighted_requests" target="_blank" rel="noopener">オリジン間リソース共有 (CORS)</a> から引用</p><p>上図ですが、OPTIONSメソッドには、<code>Origin</code>、<code>Access-Control-Request-Method</code>、<code>Access-Control-Request-Headers</code> のリクエストヘッダが含まれ（1番上の矢印）、それに対してサーバ側が<code>Access-Control-Allow-Origin</code>にリクエストされたオリジンの値、<code>Access-Control-Allow-Methods</code>に先ほどのメソッドを含めた値、<code>Access-Control-Allow-Headers</code>に先ほど要求が合ったヘッダの名称を含めてレスポンスする必要があります（2番目の矢印）。上記の条件を満たせば、ブラウザは通常のメインのリクエストをサーバに要求します。（3,4番目の矢印）</p><p>CORSに対しては、上記のmozillaの記事や、tomoyukilabsさんのQiitaにある<a href="https://qiita.com/tomoyukilabs/items/81698edd5812ff6acb34" target="_blank" rel="noopener">CORSまとめ</a>も網羅的でオススメです。CORSは必ずプリフライトリクエストが飛ぶのではなく、条件によっては「単純リクエスト」と呼ばれる簡易的な認証を行う場合もあるなど細かい仕様は学びがあります。そもそもなんでCORSという決まり事があるかというと、<a href="https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">同一オリジンポリシー</a>があって、なぜ同一オリジンポリシーが存在するかというと、ユーザーの情報を他サイトに漏れてしまわないようにといったセキュリティ上の理由が上げられます。</p><h1 id="GoでのCORS設定例"><a href="#GoでのCORS設定例" class="headerlink" title="GoでのCORS設定例"></a>GoでのCORS設定例</h1><p>GoでCORSの設定をする際は、自前で上記のリクエストヘッダに対応した、レスポンスヘッダを設定すれば良く、net/httpのミドルウェア実装できそうです。というかすでにそういったライブラリが存在します。</p><ul><li>echoだと公式ドキュメントから<a href="https://echo.labstack.com/middleware/cors" target="_blank" rel="noopener">リンク</a>があります</li><li>go-swaggerだと<a href="https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_documenting.md#how-to-use-swagger-ui-cors" target="_blank" rel="noopener">FAQ</a> に記載があり、<a href="https://github.com/rs/cors" target="_blank" rel="noopener">rs/cors</a> のライブラリを使った例が記載されてします</li></ul><figure class="highlight go"><figcaption><span>go-swaggerの実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/rs/cors"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// go-swaggerの生成先次第だが、configure_xxx.goに実装するならこんな感じ</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupGlobalMiddleware</span><span class="params">(h http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">myCORS := cors.AllowAll() <span class="comment">// 実装例として全OKにしています</span></span><br><span class="line"><span class="keyword">return</span> myCORS.Handler(h)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cors.AllowAll()</code> で、全オリジンを許可、全メソッドを許可、全ヘッダを許可、クレデンシャルはNGになります。今回は社内LAN内で利用されるシステムですが、それでもオリジン、利用するメソッドなど絞り込めるのあれば設定した方が固いとは思います。</p><p>さて、これでCORSに関してのサーバサイドの設定はオシマイ、後はフロントエンドからの接続を待つだけ。</p><p>…</p><p>…</p><p>…<strong>🔥🔥そう思っていましたが、上手く動かないという報告😱が上がりました🔥🔥🔥</strong></p><h1 id="🔥状況"><a href="#🔥状況" class="headerlink" title="🔥状況"></a>🔥状況</h1><p>ブラウザを見ると、確かに<code>&#39;Access-Control-Allo-Origin&#39; header is present on the requested resource.</code>のエラーメッセージが表示されていました。明らかにCORS周りが原因です。プリフライトリクエストに対してサーバサイドが想定したレスポンスをしていないと思われます。一方で、ローカルや開発環境でのテストでは問題なくブラウザと疎通が取れている。curlコマンドでも動いてもいました。</p><figure class="highlight bash"><figcaption><span>curlでも疎通確認した例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curlで確認した例。OriginヘッダやAccess-Control-Request-Methodヘッダ付きで想定通りか確認</span></span><br><span class="line">curl -H <span class="string">"Origin:http://example.com"</span> -H <span class="string">"Access-Control-Request-Method:GET"</span> -X OPTIONS -k --dump-header - https://&lt;dev.api.example.com&gt;/v1/health</span><br><span class="line">HTTP/1.1 200 Connection Established</span><br><span class="line">Proxy-Agent: IWSS</span><br><span class="line">Date: Wed, 12 Feb 2020 03:01:20 GMT</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 12 Feb 2020 03:01:21 GMT</span><br><span class="line">Content-Length: 0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Access-Control-Allow-Methods: GET</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Vary: Origin</span><br><span class="line">Vary: Access-Control-Request-Method</span><br><span class="line">Vary: Access-Control-Request-Headers</span><br></pre></td></tr></table></figure><h1 id="切り分け"><a href="#切り分け" class="headerlink" title="切り分け"></a>切り分け</h1><p>Chromeブラウザだけかもしれませんが、プリフライトリクエストはデベロッパーツール上からは省略されていて分かりにくいです。これは <code>chrome://flags/#out-of-blink-cors</code> で<code>Out of blink CORS</code> を Disableにすれば表示することができます。 </p><p><img src="/images/20200717/image.png" alt=""></p><p>また、脳内でブラウザの気持ちになることができるのであれば、先ほどのcurlで適切なリクエストヘッダを付与することでサーバサイドが想定通りか確認することができます。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>上記で色々切り分けていくと、原因はアプリケーションコード側ではなく、<strong>WAF</strong>(ウェブアプリケーションファイアウォール)側にありました。今回の構成は以下のように、連携先のフロントエンド側ごとにAPI Keyを発行して、それをWAFで認証する仕組みでした。私が確認したのは開発環境であり、プロダクションやステージングとは環境差異があったようです。</p><p><img src="/images/20200717/CORS%E3%81%A8WAF%E3%83%96%E3%83%AD%E3%82%B0%E7%94%A8.png" alt=""></p><p>APIキーは <code>x-api-key:aZ12kXCqGrZ9QTnqDtid1P6j2J7luB3v</code>のようなイメージでリクエストヘッダに付与するルールで、これが付与されていないとWAF側でブロックします（403 Forbiddenを返します）。</p><p><img src="/images/20200717/cors_sequence.png" alt=""></p><p>プリフライトリクエストをWAFがブロックすのは想定外で、考慮が漏れていました。分かったときは「なるほど！」とちょっと大きな声を上げました。WAFの設定はどちらかと言えばインフラ側のメンバーが設定したのでお互いの考慮が漏れやすいポイントでもあった気がします。</p><h1 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h1><p>①WAF側のルールを変えるか、②ブラウザ側でプリフライトリクエスト時にAPI Keyを渡すように設定変更するかを考えました。しかし②ですが、XMLHttpRequestでプリフライトするときに任意のリクエストヘッダが追加できるか調べたところ、以下の回答にある通り仕様として不可でした。そのため、①のWAF側のルールを変更することになります。</p><p><a href="https://stackoverflow.com/questions/58547499/is-it-possible-to-add-a-request-header-to-a-cors-preflight-request" target="_blank" rel="noopener">https://stackoverflow.com/questions/58547499/is-it-possible-to-add-a-request-header-to-a-cors-preflight-request</a></p><h2 id="WAFのルール変更"><a href="#WAFのルール変更" class="headerlink" title="WAFのルール変更"></a>WAFのルール変更</h2><p>以下のようにプリフライトリクエストに対応するため、OPTIONSメソッド<strong>も</strong>許可するようにします。</p><p>WAFの変更後のルール：</p><ol><li>Request Heaerに x-api-key が指定の文字列から開始している</li><li>OPTIONメソッドである</li><li>1または2を満たす場合に許可する</li></ol><p>今回、WAFはAWS WAFを利用していたので、2のプリフライトリクエストかどうかのチェックは <code>String and regex match conditions</code>のフィルターで、HTTP Methodを選択できるため、<code>Match type</code>を <code>Exactly matches</code>を選択し、Value to matchに <code>OPTIONS</code> を設定します。</p><p><img src="/images/20200717/image.png" alt=""></p><p>あとは、web ACLに先ほど作成したPreflight-request-checkのルールをAPI Keyのルールに追加し、<code>Default action</code>に<code>Block all requests that don&#39;t match any rules</code> を選択すれば、API Key認証を残しつつ、しかしプリフライトリクエストを受け付けることができます。</p><p>この対応で無事WebAPIをブラウザが利用することができました！</p><p><img src="/images/20200717/68747470733a2f2.png" alt=""></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>最後までお付き合いいただき、ありがとうございます。ちょっとしたネタでしたが、少しでもReal World HTTPなドタバタが伝わったら幸いです。</p><ul><li>もしCORS周りで問題が起こったら、ブラウザの設定でプリフライトリクエストも表示すると調査が捗る</li><li>リクエストヘッダを利用したAPI Key認証を行う場合、全てのHTTPメソッドを対象にするのではなく、OPTIONSは通しておく</li><li>WAFで上記の認証を行う場合は、そういった除外設定ができるか確認しておく</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXユニットの真野です。この技術ブログの運営や、ここ数年は産業向けのIoT（例えば工場IoTやモビリティ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
      <category term="CORS" scheme="https://future-architect.github.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>Zuora連載 Vol.3 Notification及びEventTriggerの話</title>
    <link href="https://future-architect.github.io/articles/20200716/"/>
    <id>https://future-architect.github.io/articles/20200716/</id>
    <published>2020-07-16T01:49:27.000Z</published>
    <updated>2020-07-18T03:13:15.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの町田です。</p><p>Zuora Central Platform（Zuora社が提供するサブスクリプションプラットフォーム名の正式名称/以降 <strong>Zuora</strong> と記載いたします）の連載の第3回は、Notification(以後、通知機能)とイベントトリガー(EventTrigger)についてのお話です。</p><p>通知機能はZuora上の様々なイベントをトリガーに、メール通知やコールアウトによる通知・連携が行えます。業務フローを設計する際には、必ず理解しておく必要がある機能になるかと思います。通知機能についての概要やできること、設定方法について解説していきます。</p><p>過去のZuora記事は<a href="https://future-architect.github.io/tags/Zuora/">こちら</a>を参照ください。</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li><a href="./#概要">概要</a></li><li><a href="./#設定方法">設定方法</a></li><li><a href="./#メールテンプレート">メールテンプレート</a></li><li><a href="./#コールアウト">コールアウト</a></li><li><a href="./#カスタムイベントトリガー">カスタムイベントトリガー</a></li><li><a href="./#最後に">最後に</a></li><li><a href="./#関連リンク集">関連リンク集</a></li></ul><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>通知機能は、<strong>イベント定義＋Notification(通知)の組み合わせ</strong>で設定します。</p><ul><li><strong>イベント定義</strong>: <a href="./#カスタムイベントトリガー">カスタムイベントトリガー</a>で後述するが、Zuora上でのオペレーションによって起こるオブジェクトなどの登録・更新・削除をトリガーとして後続の処理（通知）を行うための定義のこと</li><li><strong>Notification(通知)</strong>: イベント定義のトリガー発火を受けて、メール送信やコールアウトによるAPI呼び出しを行うための機能のこと</li></ul><img src="/images/20200716/photo_20200716_01.png" class="img-middle-size"><p>※上記シーケンス図補足</p><table><thead><tr><th>Process</th><th>Comment</th></tr></thead><tbody><tr><td>1. Operation</td><td>UserによるZuoraへのなんらかの操作(UI, API, Batchなど)が発生</td></tr><tr><td>2. Polling</td><td>特定の操作やオブジェクトに対する変更を監視</td></tr><tr><td>3. Event fire</td><td>イベント発火による通知機能の実行</td></tr><tr><td>4. Call/Send</td><td>メール通知やCalloutの呼び出し</td></tr></tbody></table><p>ロジックによる制御を挟みたい場合は、通知機能からWorkflowを呼び出すことで実現できます。</p><p>利用場面は以下のようなケースです。</p><ul><li>コールアウトAPIに設定するリクエスト形式がネストしているなど、コールアウトAPIの設計に合わせたリクエストが、通知機能からのコールアウトだけではできない場合</li><li>イベント定義からのパラメータだけではできないデータの取得・加工を行いたい場合<br></li></ul><img src="/images/20200716/photo_20200716_02.png" class="img-middle-size"><p>※上記シーケンス図補足</p><table><thead><tr><th>Process</th><th>Comment</th></tr></thead><tbody><tr><td>1. Operation</td><td>UserによるZuoraへのなんらかの操作(UI, API, Batchなど)が発生</td></tr><tr><td>2. Polling</td><td>特定の操作やオブジェクトに対する変更を監視</td></tr><tr><td>3. Event fire</td><td>イベント発火による通知機能の実行</td></tr><tr><td>4. Call Workflow</td><td>NotificationからWorkflow呼び出し～Workflowsにてロジックによる処理実行</td></tr><tr><td>5. Call/Send</td><td>Workflow内でのメール通知またはCalloutの呼び出し</td></tr></tbody></table><h1 id="設定方法"><a href="#設定方法" class="headerlink" title="設定方法"></a>設定方法</h1><ol><li>Zuoraログイン後の右上ユーザメニューを開き、<code>請求</code>を選択します<br> <img src="/images/20200716/photo_20200716_03.png" class="img-middle-size"></li><li>請求メニューで<code>プロファイル、通知、およびメールテンプレートのセットアップ</code>を選択します<br> <img src="/images/20200716/photo_20200716_04.png" class="img-middle-size" style="border:solid 1px #000000"></li><li>通知設定画面に遷移する。ここで通知の確認や追加・編集・削除を行う。新しい通知を作成する場合は、<code>新しい通知の追加</code>ボタンをクリックします<br> <img src="/images/20200716/photo_20200716_05.png" class="img-middle-size" style="border:solid 1px #000000"></li><li>新しい通知の作成モーダルが開くので、まず初めに<code>関連イベント</code>を選択します<ul><li><strong>関連イベント</strong>: 通知を発火する条件のこと。デフォルトで用意されているイベントやカスタムイベントを選択する</li><li><strong>有効</strong>: このチェックボックスにチェックしておかないと、通知機能が有効とならない<br><img src="/images/20200716/photo_20200716_06.png" class="img-middle-size"></li></ul></li><li>プルダウンで<code>関連イベント</code>を選択すると、イベントパラメータや配信オプションが設定できます<ul><li><strong>イベントパラメータ</strong>: 項目は選択した関連イベントによって異なる。イベントの細かい条件などを設定します</li><li><strong>配信オプション</strong>:  メールとコールアウトが選択可能。メールを選択した場合は、どのメールテンプレートを使用するか選択する。メールテンプレートは予め別画面にて作成しておく必要がある。 そのメールテンプレートにて設定したアドレスに対して通知が送信される。<a href="#メールテンプレート">詳細は後述</a>。コールアウトでは、イベントを受けて配信したいURLに対して、イベントに関連したパラメータを付与してリクエストが可能。<a href="#コールアウト">詳細は後述</a>。<br><img src="/images/20200716/photo_20200716_07.png"></li></ul></li></ol><h1 id="メールテンプレート"><a href="#メールテンプレート" class="headerlink" title="メールテンプレート"></a>メールテンプレート</h1><p>通知機能で使用可能なメールのテンプレートは、デフォルトで用意もされているが、新しく追加することができます。メール本文には、関連イベントから受け取ったパラメータ等の差し込みが可能です。</p><ol><li>通知設定画面にて<code>メールテンプレート</code>タブを選択します<br> <img src="/images/20200716/photo_20200716_08.png"></li><li>メールテンプレートリスト画面に遷移択します。ここではテンプレートの追加・編集・削除ができる。テンプレートを新しく追加したい場合は<code>新規メールテンプレートの追加</code>をクリック択します<br> <img src="/images/20200716/photo_20200716_09.png" style="border:solid 1px #000000"></li><li>テンプレート編集画面<ul><li><strong>基本情報:</strong>: テンプレート名・関連イベントを設定択します。ここで選択した関連イベントに関係するパラメータを差し込みフィールドとしてメール本文に利用できる</li><li><strong>メール情報</strong>: 差出人や宛先を設定可能<br><img src="/images/20200716/photo_20200716_10.png" style="border:solid 1px #000000"></li></ul></li><li>テンプレート本文<ul><li><strong>利用可能な差し込みフィールド</strong>: メール本文に差し込むフィールドのタグが確認可能です。関連イベントを選択すると、そのイベントに関連したパラメータが選択できるようになります</li><li><strong>件名</strong>: メールの件名を設定。ここでも差し込みフィールドの利用は可能です</li><li><strong>本文</strong>: フォーマットはHTMLかプレーンテキストを選択できます<br><img src="/images/20200716/photo_20200716_11.png" style="border:solid 1px #000000"></li></ul></li></ol><h1 id="コールアウト"><a href="#コールアウト" class="headerlink" title="コールアウト"></a>コールアウト</h1><p>コールアウトとは、外部WebサービスのAPIのコール、HTTP要求を送信して応答を受信することです。</p><p><strong>コールアウトの設定画面:</strong></p><ul><li>呼び出すCalloutのURLを設定。Workflowを呼び出す場合は、Workflow設定画面で確認できるURLを設定します<br><img src="/images/20200716/photo_20200716_12.png" style="border:solid 1px #000000"></li><li><strong>パラメータ</strong>: ここで選択可能なパラメータは、選択したイベントに関連したパラメータのみが選択可能。ネストしたパラメータはできない</li><li><strong>HTTPメソッド</strong>: POST,PUT,GET,DELETEが選択可能</li><li><strong>再試行</strong>: チェックした場合、コールアウトの呼び出しエラー時に再試行を行う</li><li><strong>ユーザ名/パスワード/ドメイン</strong>: Basic認証またはNTLM認証のみが選択可能。より安全な認証を利用したい場合は、WorkflowのCalloutで行うことができるため、Workflowを挟む必要がある</li><li><strong>プレビュー</strong>: プレビューボタンをクリックすると、実際に送信するリクエストやヘッダ等の確認ができる</li></ul><h1 id="カスタムイベントトリガー"><a href="#カスタムイベントトリガー" class="headerlink" title="カスタムイベントトリガー"></a>カスタムイベントトリガー</h1><ul><li>通知機能にて利用可能なイベントは、デフォルトで用意されているイベント以外に、カスタムで追加可能です<br>  <img src="/images/20200716/photo_20200716_13.png" style="border:solid 1px #000000"></li><li>イベントトリガーはZuoraAPIを利用してのみ登録・更新・削除が可能です<ul><li>イベントはZuoraのオブジェクト単位で設定が可能です</li><li>設定が可能なオブジェクトやパラメータ等の詳細は、<a href="https://www.zuora.com/developer/api-reference/#operation/POST_EventTrigger" target="_blank" rel="noopener">API Reference - Developer Center - Zuora</a>を参照してください</li><li>追加すると、通機設定画面の関連イベントのプルダウンメニューに追加されます</li></ul></li></ul><p><strong>リクエスト例</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST <span class="string">'https://rest.apisandbox.zuora.com/events/event-triggers'</span> \</span><br><span class="line">--header <span class="string">'Content-Type: application/json; charset=utf-8'</span> \</span><br><span class="line">--data-raw <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "baseObject": "Subscription",</span></span><br><span class="line"><span class="string">    "condition": "changeType == '</span>\<span class="string">''</span>INSERT<span class="string">'\'</span><span class="string">' || changeType == '</span>\<span class="string">''</span>UPDATE<span class="string">'\'</span><span class="string">'",</span></span><br><span class="line"><span class="string">    "description": "説明",</span></span><br><span class="line"><span class="string">    "eventType": &#123;</span></span><br><span class="line"><span class="string">        "name": "イベント名",</span></span><br><span class="line"><span class="string">        "displayName": "表示名",</span></span><br><span class="line"><span class="string">        "description": "説明"</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "active": true</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>パラメータ補足:</strong></p><ul><li><strong>baseObject</strong>： 監視するオブジェクトを設定<ul><li>例：Subscription</li></ul></li><li><strong>condition</strong>： baseObjectに設定したオブジェクトのトリガー条件をJEXL式で設定<ul><li>例：オブジェクト登録・更新時にイベントをトリガー:<br><code>changeType == &#39;INSERT&#39; || changeType == &#39;UPDATE&#39;</code></li><li>例：請求が1000を超えた金額で更新された場合にイベントをトリガー:<br><code>changeType == &#39;UPDATE&#39; &amp;&amp; Invoice.Status == &#39;Posted&#39; &amp;&amp; Invoice.Status_old != &#39;Posted&#39; &amp;&amp; Invoice.Amount &gt; 1000</code></li></ul></li></ul><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>通知機能はZuora上の様々なイベントを業務と繋げるためには、必ず使いこなす必要がある機能です。特にWorkflowを実行するためのトリガーとして利用することも多いでしょう。</p><p>次回はそのWorkflowについて説明します。</p><h1 id="関連リンク集"><a href="#関連リンク集" class="headerlink" title="関連リンク集"></a>関連リンク集</h1><p>通知機能をフル活用するために最低限必要な知識を付けるための関連リンクです。</p><ul><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Notifications" target="_blank" rel="noopener">Notifications - Zuora</a><br>通知機能について概要が書かれています。</li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Notifications/C_Create_Notifications" target="_blank" rel="noopener">Create and Edit Notifications - Zuora</a><br>通知の作成方法について手順が書かれています。</li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Notifications/A_Viewing_the_Supported_Event_Types" target="_blank" rel="noopener">Supported Event Types - Zuora</a><br>通知機能で利用できるイベントについて書かれています。ここに記載のイベントはZuoraでデフォルトでサポートされているイベントとなるようです。</li><li><a href="https://www.zuora.com/developer/api-reference/#operation/POST_EventTrigger" target="_blank" rel="noopener">API Reference - Developer Center - Zuora</a><br>Zuoraのオブジェクトに対してカスタムのトリガーを定義するためのAPIのリファレンスです。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGの町田です。&lt;/p&gt;
&lt;p&gt;Zuora Central Platform（Zuora社が提供するサブスクリ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Zuora" scheme="https://future-architect.github.io/tags/Zuora/"/>
    
      <category term="SaaS" scheme="https://future-architect.github.io/tags/SaaS/"/>
    
      <category term="サブスクリプション" scheme="https://future-architect.github.io/tags/%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>新人研修有志が初心者向けにバーチャルコンテストを実施しました &amp; Tips</title>
    <link href="https://future-architect.github.io/articles/20200715/"/>
    <id>https://future-architect.github.io/articles/20200715/</id>
    <published>2020-07-15T01:51:27.000Z</published>
    <updated>2020-07-22T14:38:51.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。現在 SAIG に所属しております、2020 年 4 月入社新人の佐藤と申します。現在競技プログラミング部に所属しており、<a href="https://atcoder.jp/contests/future-contest-2019-final/standings" target="_blank" rel="noopener">HTTF 2019 2 位</a> の <a href="https://atcoder.jp/users/omi" target="_blank" rel="noopener">omi</a> とも申します。</p><p>皆さんは競技プログラミングをやったことはありますか？　聞いたことがあるけれど参加したことがない……そんな人も多いのではないでしょうか。</p><p>そんな新人向けに向けて、新人研修で同期の運営チームメンバーとともに<strong>バーチャルコンテスト</strong>を開催しました！　現在（2020/07/15時点） 6 回開催して、4 月入社の新人だけにとどまらず、キャリア入社の方や 7, 10 月入社予定の同期（現在アルバイト）まで参加しています。</p><p>詳しい経緯については未来報で仁木さんが <a href="https://note.future.co.jp/n/nda51c959f75a" target="_blank" rel="noopener">記事を書いています</a> ので割愛します。<br>本記事は自分たちで未経験者を巻き込んでバーチャルコンテストを開催しようと考えている人たちや、あるいはバーチャルコンテストに参加してみたいけどどんな活動をしているのか知りたいという人に向けた内容となっています。具体的には</p><ul><li>使用しているツールと使い方の紹介</li><li>コンテスト中の運営対応</li><li>コンテスト後の解説について</li></ul><p>となっています。読んでくれた方々の参考になったり、私達の活動を知ってもらえたら幸いです。</p><h1 id="AtCoder-と-AtCoder-Problems"><a href="#AtCoder-と-AtCoder-Problems" class="headerlink" title="AtCoder と AtCoder Problems"></a>AtCoder と AtCoder Problems</h1><p><a href="https://atcoder.jp/home" target="_blank" rel="noopener">AtCoder</a> は日本の競技プログラミング運営サイトです。ほぼ毎週末に開催される ABC(AtCoder Beginner Contest) をはじめとして、多種多様なコンテストが無料で受けられます。さらにオープンなコンテストの過去問は <strong>すべて無償公開</strong> されています。</p><p><a href="https://kenkoooo.com/atcoder/#/table/" target="_blank" rel="noopener">AtCoder Problems</a> は AtCoder の過去問を集めて、ユーザごとの提出・解答状況の管理や難易度推定を行っているサードパーティーのサイトです。ここにバーチャルコンテスト開催機能があり、今回はこちらを利用しました。</p><p>バーチャルコンテスト参加にあたっては双方にアカウントを作成して AtCoder Problems 側での連携設定が必要となります。 AtCoder Problems は GitHub アカウント連携でしかアカウントを生成できず、GitHub アカウントがない人は GitHub アカウントの新規作成が必要になります。運営だけでなく、<strong>参加者も全員必要なのでアカウントを作成してもらいましょう。</strong><br>双方にログインできたら、AtCoder Problems 側で Account → Account Info に AtCoder User ID を入力して Update すれば連携設定完了です。念のため、過去のコンテストから任意の過去問に提出してしばらく待ち、結果が反映されていることを確認すると完璧です。</p><h1 id="コンテストの作成"><a href="#コンテストの作成" class="headerlink" title="コンテストの作成"></a>コンテストの作成</h1><p>AtCoder 右上の Virtual Contest からコンテストを作成できます。</p><p>部外者が、乱立するバーチャルコンテストの中からわざわざ知らない名前を選んで入ってくることは滅多にないのですが、念のため Description に何か書いておくべきかもしれません。私は「身内用」などと記載しておくことにしました。</p><p>次に、その編集画面の下半分で問題を選んでいきます。留意すべきことは大きく 3 点あります。</p><ul><li>ターゲットを明確にすること。<ul><li>第3回 PAST 直前に PAST 過去問演習回を設定して、初心者からは大変不評だった</li><li>初心者向けセットなのか、経験者向けセットなのかは事前に決定し、明確にアナウンスすべき</li></ul></li><li>difficulty に頼り過ぎないこと。<ul><li>特に ABC-B, C あたりは体感難易度のブレが大きく感じる</li><li>純粋な知識問や <a href="https://atcoder.jp/contests/abc169/tasks/abc169_b" target="_blank" rel="noopener">ABC169B</a>, <a href="https://atcoder.jp/contests/abc169/tasks/abc169_c" target="_blank" rel="noopener">ABC169C</a> のように言語仕様上の罠がある問題は不親切<ul><li>事前に解いてみて想定以上に難しくないかチェックしたほうがよい</li></ul></li></ul></li><li>初心者向けセットに水 diff (令和 ABC-E) 以上を出さないこと。<ul><li>ABC-C あたりから手も足も出なくなる人が多いため、出すならやりたい人がやる枠として隔離しておく</li></ul></li></ul><p>最後にコンテスト時間を設定します。時間設定は問題数・難易度勾配よりも大切です。<br>長すぎると座っているだけの時間を作ってしまうことになるので、はじめのうちは長くても 1 時間に留めたほうが良いでしょう。我々は終業 30 分後から 50 分間のコンテストを設定しています。</p><h1 id="コンテスト実施"><a href="#コンテスト実施" class="headerlink" title="コンテスト実施"></a>コンテスト実施</h1><p>コンテスト自体は時間になったら自動的に開始するので、その間運営としてやるべきことは <strong>質問対応</strong> です。各種チャットツールは色々なアナウンスが行われると質問が流れていきやすく、どうしても見逃してしまいます。そこで解説用のGoogle Meetのビデオ会議を早めに準備しておき、困ったらそちらで口頭で質問してもらうようにしています。</p><p>質問は設問そのものに対してよりも、提出ができない、うまく動かないという大雑把な質問が飛んできがちです。適宜ヒアリングを行い、最終的には大体の勘で対応します。</p><p>実施してみて、事前にやっておいたほうが良かったことが 2 点あります。</p><ul><li>入出力、提出のチュートリアルを事前に行うこと。<ul><li>AtCoder 側での提出が出来ることを確かめてもらう</li><li>当社新人研修では Java を用いていたため、新人向けに Java の入出力テンプレートを作成して事前に共有した<ul><li>それでも言語選択欄を見逃して提出できない人が出たのでチュートリアルは必須</li></ul></li></ul></li><li>コードテストの存在を周知すること。<ul><li>悪意のない提出デバッグをしてしまうことがある</li><li><code>WA</code> はともかく <code>CE</code> はコードテストでサンプルを実行するだけでも回避可能<ul><li><code>RE</code> , <code>TLE</code> も ABC-A,B なら大体は回避可能</li></ul></li></ul></li></ul><p>どうしても解決できない質問については、全員の提出から本人の提出コードをチェックして回答しても良いかもしれません。</p><h1 id="コンテスト終了後"><a href="#コンテスト終了後" class="headerlink" title="コンテスト終了後"></a>コンテスト終了後</h1><p>ちゃんと解説をしましょう。その際に一度問題文を読み上げて問題設定を全員に伝えると、後ろの方の問題まで手がつけられなかった人にとって親切です。</p><p>運営側で画面共有をして、 <code>AC</code> できた参加者のコードを数人分映しながら各自のコードを解説してもらうと多くの人がコミットできます。どうしても書いてあることと言っていることが食い違うケースがありますので、経験者が質問したり指摘したりして認識を合わせると全員の成長につながると思います。</p><p>解説のメモとして Google Slides の空スライドを予め用意しておき、書ける人が協力して解説中に書きこんでいます。現在は参加者が 20 名程度なのでうまくいく手法ですが、50-60 名が一斉に開いて編集を試みるとスライドがとてつもなく重くなるため、人数が増えてきたら再考の余地があります。</p><img src="/images/20200715/photo_20200715_01.png"><h1 id="コンテストを実施してみて"><a href="#コンテストを実施してみて" class="headerlink" title="コンテストを実施してみて"></a>コンテストを実施してみて</h1><p>参加した同期からは概ね良好なフィードバックを頂くことが出来ました！　新人の中にはコーディング未経験者も多い中で、入社後すぐに綺麗な、効率の良いコードを書くことはなかなか不可能です。それでも競技プログラミングの経験を通して「綺麗な、効率の良いコード」の威力、大切さを知ってもらうことが出来たと考えています。</p><p>具体的に同期の提出コードを見ていても、はじめ A 問題の $N= 10^9$ 制約に対して、全整数を for loop するコードを書いて <code>TLE</code> していた人が B, C 問題まで解けるようになるまで成長しています。毎回問題を選定していた側としても自分のことのように嬉しくなりました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>本企画は多くの運営によって支えられています。しかし運営全員が新人同期の有志であり、今もなお発展途上の企画です。是非参加したい！　という人は一緒にブラッシュアップしていきましょう。よろしくおねがいします。</p><p>当社では AtCoderJobs 経由で <a href="https://jobs.atcoder.jp/offers/list?f.CompanyScreenName=future" target="_blank" rel="noopener">競技プログラミング経験者の採用を行っています</a>。新卒・中途・アルバイトすべての求人がございますので、気になった方は一度ご覧になってください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。現在 SAIG に所属しております、2020 年 4 月入社新人の佐藤と申します。現在競技プログラミング部に所属
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="新人研修" scheme="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E7%A0%94%E4%BF%AE/"/>
    
      <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>HashiTalks: Japanに登壇しました</title>
    <link href="https://future-architect.github.io/articles/20200710/"/>
    <id>https://future-architect.github.io/articles/20200710/</id>
    <published>2020-07-10T01:19:54.000Z</published>
    <updated>2020-07-17T01:50:25.484Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200710/top.png"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXユニットの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤</a>です。最近Terraformネタが多くなってきました。さて、本記事の内容はHashiTalks: Japanに登壇したのでその時に話したことを書いていきます。大きめなイベントには初の登壇だったのでなかなかドキドキしましたが、なんとかやりきりました。</p><h2 id="HashiTalks-Japanとは"><a href="#HashiTalks-Japanとは" class="headerlink" title="HashiTalks: Japanとは"></a>HashiTalks: Japanとは</h2><p><a href="https://events.hashicorp.com/hashitalksjapan" target="_blank" rel="noopener">イベントページ</a>から言葉を拝借すると、</p><blockquote><p>HashiTalksは、HashiCorpのツールやコミュニティに焦点を当てたユニークなユースケースやデモをコミュニティメンバーから共有する機会です。</p></blockquote><p>といった感じで、コミュニティベースのイベントになっています。参加者は普段使っている時のナレッジから企業で実践している例などがあり、幅広い内容を取り扱っています。今回のタイムテーブルではTerraformがほどんどそ占めておりますが、中にはConsulとかVaultなどもありました。この辺のツールのちゃんと扱えるようにしたいですね。</p><h2 id="何を発表したか"><a href="#何を発表したか" class="headerlink" title="何を発表したか"></a>何を発表したか</h2><p>私自身は「Cloud MonitoringとTerraformの付き合い方」と題して、TerraformでCloud Monitoringのリソースを作成・管理するときのことをテーマにしました。スライドは以下になりますので、見ていただければと思います。ここからは話した内容のサマリになります。</p><script async class="speakerdeck-embed" data-id="01797d2feb8b41359be8138a65170819" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h3 id="監視設定の大変さ"><a href="#監視設定の大変さ" class="headerlink" title="監視設定の大変さ"></a>監視設定の大変さ</h3><p>Terraformは各クラウドプロバイダーのリソースをコードで管理できるInfrastructure as Code(IaC)を実現するツールとして使われています。AWSのCloudFormation、GCPのDeployment Managerではなくクラウドに依存しないツールとしてマルチクラウド戦略を行うところではTerraformを採用されているのではないでしょうか？<br>基本的にクラウド(今回ではGCP)のリソースは全てTerraformで管理されていることが望ましく、それは監視ツールであるCloud Monitoringも例外ではありません。特に私が大変だと感じているのは特定のメトリクスを抽出するためのフィルターです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_monitoring_alert_policy"</span> <span class="string">"someone_alert_policy"</span> &#123;</span><br><span class="line">  ....</span><br><span class="line">  conditions &#123;</span><br><span class="line">    condition_threshold &#123;</span><br><span class="line">      aggregations &#123;</span><br><span class="line">....</span><br><span class="line">        filter = <span class="string">"metric.type=\"agent.googleapis.com/disk/percent_used\" resource.type=\"gce_instance\" metric.label.\"state\"=\"used\" metric.label.\"device\"=\"rootfs\" metadata.user_labels.\"name\"=\"sample-instance-1\""</span></span><br><span class="line">        ....</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように複数の条件を重ねて書くことはとても大変であるので、私はコード化にTerraformerを使っています。</p><h3 id="Terraformerの使いどころ"><a href="#Terraformerの使いどころ" class="headerlink" title="Terraformerの使いどころ"></a>Terraformerの使いどころ</h3><p>TerraformerはGCPに限らず、AWSなどのメジャークラウドに存在するリソースをコマンド一つでコードに落とせる便利なツールです。とても便利ではある反面、Terraformでのリソース名はわかりにくいものになっています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_monitoring_alert_policy"</span> <span class="string">"tfer--projects--project-name--alertPolicies--17320504"</span> &#123;</span><br><span class="line">  ....</span><br><span class="line">  conditions &#123;</span><br><span class="line">    condition_threshold &#123;</span><br><span class="line">      ....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本的には<code>terraform state mv</code>コマンドを実行してリソース名を変更するかと思いますが、一通り作り切ってからこのコマンドを実行するのもそれなりに時間がかかります。私は、監視のTerraformのコードは特に再利用性が高いと思っており、それであれば雛形として最低限作成して、展開することで時間の節約になったり、コードの変更を最低限で抑えられると考えています。</p><h3 id="セキュリティに気をつけたい"><a href="#セキュリティに気をつけたい" class="headerlink" title="セキュリティに気をつけたい"></a>セキュリティに気をつけたい</h3><p>Cloud Monitoringにはアラート設定をしたときに、その通知先をメールやSlackにすることができます。しかし、SlackのTokenやメールアドレス自体をコード上にハードコードすることは避けなければいけません。Tokenなどを守る方法としては</p><ul><li>tfvarsで逃す</li><li>Vaultを使う</li><li>Secret Manager</li></ul><p>などがあるので、これらを使えばコードとして書かざるを得ない状況は回避できます。しかし、今回は「<strong>コードにはしないけど、リソースとしてはある</strong>」状態を目指してちょっと安全にTerraformでリソースを管理する方法を考えてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_monitoring_alert_policy"</span> <span class="string">"someone_alert_policy"</span> &#123;</span><br><span class="line"> ....</span><br><span class="line">  display_name = <span class="string">"use-80-percent-resource-disk"</span></span><br><span class="line"></span><br><span class="line">  enabled               = <span class="string">"true"</span></span><br><span class="line">  notification_channels = [</span><br><span class="line">    google_monitoring_notification_channel.slack_channel_1.id, <span class="comment"># チャンネルがコード化されている</span></span><br><span class="line">    <span class="string">"projects/project-name/notificationChannels/0123456789"</span>,   <span class="comment"># チャンネルがコード化されていない</span></span><br><span class="line">  ]</span><br><span class="line">  project               = <span class="string">"project-name"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上の<code>notification_channel</code>ではコード化している部分としていない部分を示しています。IDで書かれている部分では、チャンネル自体はコード化されていないが、アラートの通知先として指定しているので、「コードにはしないけど、リソースとしてはある」状態を達成できているのではないでしょうか。このようにコードにせず、クラウド側で担保することで少し安全にコードにできていると考えています。<br>しかし、これも将来的には先述した、VaultやSecret Managerを使うなどして管理することも視野に入れたいですね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回発表したことはTerraformとGCPを組み合わせて以来、ずっと直面している問題で、発表するに当たって、自分の中で一つの答えになったかなと思っています。Terraform Associateを取ったり、こういった登壇する挑戦で少しづつではありますが、自分の自信に繋がっているので、今後も発信は媒体に関係なく続けていきたいなと思います。</p><p>最後にこちらが話しているYouTubeになりますのでよければご覧ください。<br><a href="https://www.youtube.com/watch?v=SiCCwE9a1iY&list=PL81sUbsFNc5aWJJrpaclnwARJAzf1-2bV&index=14&t=0s" target="_blank" rel="noopener">Cloud MonitoringとTerraformの付き合い方 - YouTube</a></p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="/articles/20200629/">Terraform Associate合格記</a></li><li><a href="/articles/20200624/">Terraform 101</a></li><li><a href="tags/Terraform/">Tech Blog内のTerraform記事</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200710/top.png&quot;&gt;


&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG/DXユニットの&lt;a hre
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>GoでWebアプリ開発時にあるあるだったレビューコメント</title>
    <link href="https://future-architect.github.io/articles/20200709/"/>
    <id>https://future-architect.github.io/articles/20200709/</id>
    <published>2020-07-09T02:09:27.000Z</published>
    <updated>2020-07-17T01:50:25.484Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200709/photo_20200709_01.png" class="img-small-size"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/" target="_blank" rel="noopener">Renée French</a>.</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の真野です。</p><p>コードレビューについては3,4年ほど前に、<a href="https://medium.com/@laqiiz/effdcc39da52" target="_blank" rel="noopener">コードレビューにおけるレビュアー側のアンチパターン</a> って記事を書いたりもしました。当時はレビュアーの伝え方って大事だよなって話をしてました。いつしかレビュイーからレビュアーに比重が変わることが増えてきました。相互レビューは当たり前にしていますがが、比較的こうしたらもっと良くなるんじゃないかな？と提案される回数より、自分が提案する回数の方が増えてくるタイミングってありますよね？</p><p>そういうわけで、最近Goで主にバックエンドのWebAPIや、AWS Lambdaで動くETLアプリ、たまにCLIツールを開発する時に、2回以上同じ指摘したコメントをまとめてます。Go言語特有ぽいところを中心にしています。</p><h1 id="レビュイーのスキルセット"><a href="#レビュイーのスキルセット" class="headerlink" title="レビュイーのスキルセット"></a>レビュイーのスキルセット</h1><p>新人さん（専攻は情報系であれば経済学部の人もいました）や、AtCoderJobs経由のアルバイトerの方。新人さんであればJavaは研修で学んでいたのと、アルバイトerの方はPython使いが多かったです。それぞれ全員Goを業務で使ったことがない人でした。何ならJavaやPythonでも業務利用は初めてレベルの人が対象でした。人数は覚えていませんが、のべ15名以上に対して何かしら開発で関わったと思います。</p><h1 id="ベースラインとしてのインプット情報"><a href="#ベースラインとしてのインプット情報" class="headerlink" title="ベースラインとしてのインプット情報"></a>ベースラインとしてのインプット情報</h1><p>Goを初めて使うよってメンバーも多いので、インプット情報はまとめています。Go Tutorialを1日くらいやってもらった後に、環境構築をしてもらい、次の内容を適時読んでもらっています。最初のPullRequest時では必須ではなく、大体はある機能実装の2,3回目以降に読んだ方が良いかも？なタイミングでリンクを送ることが多いです。初心者にはあまりインプットに比重を寄せず、せっかくの業務でGoを書く機会なのでまずはアウトプットを出してもらいそれに対してフィードバックして育てようという考えです。</p><p>インプットは個人的なお勧め順に記載しています。Effective Goはそこそこ分量があるので、興味があるところだけザッと読むことが良いと思います。</p><ul><li><strong><a href="https://future-architect.github.io/articles/20200311/">JavaプログラマーのためのGo言語入門</a></strong><ul><li>安心のフューチャー技術ブログ。翻訳本の出版ばりのクオリティーだと評判</li><li>社内だと新人研修がJavaなので、新卒組には特に勧めています</li></ul></li><li><strong><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></strong><ul><li>安心のフューチャー技術ブログ。読み応えたっぷりです</li></ul></li><li><strong><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a></strong><ul><li>日本語訳もあるけど、ちょっと古いのでそちらは参考にする程度にしたほうが良いかも</li><li>量が多いので最初は気になるところだけ逆引き的に読んでいこう</li><li>命名に関しては、micnncimさんの <strong><a href="https://micnncim.com/post/2019/12/11/go-naming-conventions/" target="_blank" rel="noopener">Go の命名規則</a></strong> 記事に目を通しておくと間違いないです</li></ul></li><li><strong><a href="https://github.com/golang/go/wiki/CodeReviewComments" target="_blank" rel="noopener">Go Code Review Comments</a></strong><ul><li>日本語訳: <a href="https://qiita.com/knsh14/items/8b73b31822c109d4c497" target="_blank" rel="noopener">https://qiita.com/knsh14/items/8b73b31822c109d4c497</a></li></ul></li><li><strong><a href="https://qiita.com/ksato9700/items/6228d4eb6d5b282f82f6" target="_blank" rel="noopener">Go言語で幸せになれる10のテクニック - Qiita</a></strong><ul><li>(個人的にはReturn function callsが特にレビュー指摘がとても多い)</li></ul></li><li><strong><a href="https://github.com/uber-go/guide" target="_blank" rel="noopener">Uber Style Guide</a></strong><ul><li>日本語訳: <a href="https://github.com/knsh14/uber-style-guide-ja" target="_blank" rel="noopener">https://github.com/knsh14/uber-style-guide-ja</a></li></ul></li><li><strong><a href="https://github.com/google/go-cloud/blob/master/internal/docs/design.md#coding-conventions" target="_blank" rel="noopener">go-cloudのCoding Conventions</a></strong><ul><li>短いですが、GoCDKというライブラリの規約が書いてありました</li></ul></li></ul><p>もし、利用しているWebApplicationFrameworkがgo-swaggerであれば</p><ul><li><a href="https://future-architect.github.io/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a></li></ul><p>も軽く見てもらっています。</p><h1 id="コードレビューの位置づけ"><a href="#コードレビューの位置づけ" class="headerlink" title="コードレビューの位置づけ"></a>コードレビューの位置づけ</h1><p>レビューコメントですが、golangci-linterやその他Linterでカバーできる内容もあるかもしれません。静的解析で分かる範囲はなるべく自動化して、人間がやるべきところにもっとフォーカスを当てるべきだと思いますが、正直あまりここに力を割けてません。これ、Linterでデキるよってのがあれば教えて下さい。</p><p>ちなみに、golangci-lintの設定は、スピード重視で最低限にしています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">golangci-lint run --tests --disable-all \ </span><br><span class="line">  --enable&#x3D;goimports --enable&#x3D;govet --enable&#x3D;errcheck --enable&#x3D;staticcheck</span><br></pre></td></tr></table></figure><p>あまり力を割けてはいませんが、リソースのクローズ漏れなどの致命的な不具合以外の、文法よりのところはレビューで防ぐか、最悪は後でテックリードがリファクタリング修正コミットすれば良いという考えで、初心者Gopherにはユニットテストをガンバって欲しいという意図があります。とは言え、何度も同じようなレビューコメントをするのも大変なので、汎用性がありそうなのを今回まとめた次第です。Linterでいけるなら行きたいです。</p><h1 id="💬-コードレビューでコメントしたこと"><a href="#💬-コードレビューでコメントしたこと" class="headerlink" title="💬 コードレビューでコメントしたこと"></a>💬 コードレビューでコメントしたこと</h1><p>数が増えてきましたので、以下のように4つのカテゴリに分けました。</p><ul><li>📦ライブラリの使い方</li><li>☁️クラウド環境を意識した実装</li><li>⚡一般的な内容</li><li>🧪単体テスト</li></ul><h2 id="📦ライブラリの使い方"><a href="#📦ライブラリの使い方" class="headerlink" title="📦ライブラリの使い方"></a>📦ライブラリの使い方</h2><h3 id="1-なるべくXxxWithContextを使おう"><a href="#1-なるべくXxxWithContextを使おう" class="headerlink" title="1. なるべくXxxWithContextを使おう"></a>1. なるべくXxxWithContextを使おう</h3><p>特にHTTP要求やDB接続などで、利用するパッケージの関数に <code>context.Context</code> を指定できる、多分 <code>WithContext</code>がついか関数があると思います。なるべくそちらを利用するようにしましょう。キャンセル通知やTimeoutの伝播などを行えて無駄なリソースの実行を防ぐことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 これでも良いが、context.Contextを使って欲しい</span></span><br><span class="line">resp, err := http.Get(<span class="string">"http://example.com/"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 context.Contextを渡す関数へ</span></span><br><span class="line">req, err := http.NewRequestWithContext(ctx, http.MethodGet, <span class="string">"http://example.com/"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">resp, err = http.DefaultClient.Do(req)</span><br></pre></td></tr></table></figure><p>使い捨てのコードであれば最初のコードの方がシンプルなのでドンドン利用すると良いと思います。例えばnet/httpを用いてサーバサイドを実装した場合には、 <code>http.Request</code> からcontext.Contextを取得できるので、これを別の外部リソース（DBとか外部APIなど）へのアクセス時にも利用するため引き回します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// このctxを引き回して用いる。別の関数に引き渡すときもこのctxを渡せるように定義しておく</span></span><br><span class="line">ctx := r.Context()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回は外部へのHTTPリクエストでしたが、例えば<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/s3/#S3.GetObjectWithContext" target="_blank" rel="noopener">AWS S3</a>でも、<code>GetObjec</code> より <code>GetObjectWithContext</code> を使おうとなります。AWSやGCPなどクラウド系のSDKはもちろん、3rd Party製のライブラリにもWithContext付きのAPIが用意されていることが多いので、ぜひ利用しましょう。</p><p>これを守ると、自分で定義する関数もcontext.Contextを引き回す設計になると思います。</p><figure class="highlight go"><figcaption><span>DynamoDBへのcontext.Contextを引き回しての書き込み例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeToDB</span><span class="params">(ctx context.Context, v ExampleStruct)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">av, err := dynamodbattribute.MarshalMap(v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodb attribute marshalling map: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">i := &amp;dynamodb.PutItemInput&#123;</span><br><span class="line">Item:      av,</span><br><span class="line">TableName: aws.String(<span class="string">"&lt;テーブル名&gt;"</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, err = db.PutItemWithContext(ctx, i); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodb put item: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Factory関数があればそちらを優先しよう"><a href="#2-Factory関数があればそちらを優先しよう" class="headerlink" title="2. Factory関数があればそちらを優先しよう"></a>2. Factory関数があればそちらを優先しよう</h3><p><code>go-swagger</code> での生成コードでよくありましたが、ライブラリが<code>NewXxx</code>のファクトリ関数を用意している場合はそちらを利用しましょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 Structに自分で詰めても場合によっては良いが..</span></span><br><span class="line">params := &amp;UplinkSecurityParams&#123;</span><br><span class="line">Context:    ctx,</span><br><span class="line">HTTPClient: hc,</span><br><span class="line">UserID:     <span class="string">"userID"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀ファクトリー経由での生成したほうが固い</span></span><br><span class="line">params := user.NewGetUserParamsWithContext(ctx).</span><br><span class="line">WithHTTPClient(hc).</span><br><span class="line">WithXAPIKey(<span class="string">"0123456789"</span>).</span><br><span class="line">WithUserID(userID)</span><br></pre></td></tr></table></figure><p>理由は、ファクトリー内で初期値を設定していたり、将来的にそういった処理が差し込まれる可能性があるためです。用意されているのであればそちらをまず優先して使いましょう。ファクトリー関数があるかどうかは、GoDocを探すことが多いと思います。GoDocの探し方にもコツがあるので、<a href="https://future-architect.github.io/articles/20200521/">Go Tips連載4: GoDocの読み方</a> の記事をチェックしてみると勉強になります。</p><h3 id="3-利用ライブラリがチェーンスタイルを提供していれば活用しよう"><a href="#3-利用ライブラリがチェーンスタイルを提供していれば活用しよう" class="headerlink" title="3. 利用ライブラリがチェーンスタイルを提供していれば活用しよう"></a>3. 利用ライブラリがチェーンスタイルを提供していれば活用しよう</h3><p>先ほどのgo-swagger以外のライブラリでもそうですが、チェーンスタイル（関数をドット区切りでつなげていく）なAPIを提供してくれているライブラリもあります。例えばGCPのSDKなどです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 別に実装上問題ないですが..</span></span><br><span class="line">ts := compute.NewInstanceTemplatesService(s)</span><br><span class="line">tsf:= ts.List(projectID).Filter(<span class="string">"properties.labels.scheduled=true"</span>)</span><br><span class="line">listInstances, err :=tsf.Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 一時変数が無い分は可読性が高そうなので、他で流用しないならつなげて書いてもOK</span></span><br><span class="line">listInstances, err := compute.NewInstanceTemplatesService(s).</span><br><span class="line">List(projectID).</span><br><span class="line">Filter(<span class="string">"properties.labels."</span> + targetLabel + <span class="string">"=true"</span>).</span><br><span class="line">Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1行にまとめるのか、複数行にするのかは好みなのでどちらでも良い気はします。ブログではスマホでも見やすいように改行しています。</p><h3 id="4-SDKが出力するNotFoundを意味するerrorと、その他のエラーを区別してハンドリングする"><a href="#4-SDKが出力するNotFoundを意味するerrorと、その他のエラーを区別してハンドリングする" class="headerlink" title="4. SDKが出力するNotFoundを意味するerrorと、その他のエラーを区別してハンドリングする"></a>4. SDKが出力するNotFoundを意味するerrorと、その他のエラーを区別してハンドリングする</h3><p>Go入門時はどうしても、とにかく <code>if err:= fn(); err!= nil {return err}</code> するものだと教わるものかと思いますが、当然ながらerrorの値によってハンドリング内容を変更する場合もあります。例えば、あるerrorの場合はステータス404を返し、そうでない場合は500を返す場合などです。</p><p>例としてDynamoDBのUpdateItemをあげます。</p><figure class="highlight go"><figcaption><span>DynamoDBのUpdateItemの例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db dynamodb.New(session.Must(session.NewSession())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line">out, err := db.UpdateItemWithContext(ctx, &amp;dynamodb.UpdateItemInput&#123;</span><br><span class="line">TableName: aws.String(<span class="string">"&lt;exmaple-table&gt;"</span>),</span><br><span class="line">ExpressionAttributeNames: <span class="keyword">map</span>[<span class="keyword">string</span>]*<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"#TYPE"</span>:       aws.String(<span class="string">"user_type"</span>),</span><br><span class="line"><span class="string">"#REVISION"</span>:   aws.String(<span class="string">"revision"</span>),</span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeValues: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">":type"</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">"有料会員"</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">":incr"</span>: &#123;</span><br><span class="line">N: aws.String(<span class="string">"1"</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">"user_id"</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">"&lt;user-id&gt;"</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">ConditionExpression: swag.String(<span class="string">"attribute_exists(user_id)"</span>),</span><br><span class="line">UpdateExpression: aws.String(<span class="string">"SET #TYPE= :size ADD #REVISION :incr"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 💬 500 Server Internal Error をレスポンスで返す</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の<code>db.UpdateItemWithContext</code> を実行後の <code>err</code> ですが、もし一律<code>500 Server Internal Error</code> で返すと、おそらく意図と反する挙動になるかもしれません。理由は、指定したユーザIDが存在しない場合の考慮がないためです。もしユーザIDが存在しない場合に404を返す要件で合った場合はこの実装では満たせません。</p><p>もし、そういった要件の場合は、以下のような判定用のエラー関数を作成し、エラーハンドリングを修正すると良いかと思います。</p><figure class="highlight go"><figcaption><span>ヘルパー関数を使った細かいハンドリング</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsNotFoundErr</span><span class="params">(err error)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">aerr, ok := err.(awserr.Error)</span><br><span class="line"><span class="keyword">if</span> ok &amp;&amp; aerr.Code() == dynamodb.ErrCodeConditionalCheckFailedException &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 🚀 (当然だけど..)必要に応じてハンドリング</span></span><br><span class="line"><span class="keyword">if</span> IsNotFoundErr(err) &#123;</span><br><span class="line"><span class="comment">// 404 NotFound</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 500 ServerInternalError</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今利用しているSDKがどういうエラーを返すかは、<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#DynamoDB.UpdateItem" target="_blank" rel="noopener">こういったドキュメントを探す</a>か、コードを探すかになると思います。何にしろ、正常系以外のエラーパスのハンドリングはどうしても後回しになりがちですが、この辺はレビュアー視点でも抜け漏れガチなので、相互にチェックしあえると良いかなって思います。</p><h3 id="5-複数Itemを処理する場合、Batch登録APIの有無を確認しよう"><a href="#5-複数Itemを処理する場合、Batch登録APIの有無を確認しよう" class="headerlink" title="5. 複数Itemを処理する場合、Batch登録APIの有無を確認しよう"></a>5. 複数Itemを処理する場合、Batch登録APIの有無を確認しよう</h3><p>これはどの言語でも共通する内容ですが、PostgreSQLへのinsertやDynamoDBへのPutItem、あるいは複数のキーを指定したGetなどはSDKやライブラリが用意しているBatch処理用のAPIを利用しましょう。1件1件は大したことがなくても、500件ほど積み重なると思いの外レイテンシに影響がデカイです。</p><p>また、Batch処理のAPIが合ったとしても、同時に書き込む件数は絞り込む必要が特にAWSやGCPには存在します。RDBであっても同時書き込み件数は1000件くらいに絞ったほうが良いでしょう。例えばAWS Kinesisへの書き込み例ですが、複数件の書き込みなので <code>putRecords</code>を利用します。大体が同時に書き込めるデータ容量やバッチ件数があるので、ググって上限を調べます。次のコードだと実は最大 5 MBの制限チェックはしていないのですが必要に応じてそういった閾値の判定を追加します。</p><figure class="highlight go"><figcaption><span>Kinesisへのバッチ登録例(※ちょっとエラーハンドリング甘い書き方なので注意)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kc *kinesis.Kinesis</span><br><span class="line"><span class="keyword">var</span> items []ExampleStruct</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">entries := <span class="built_in">make</span>([]*kinesis.PutRecordsRequestEntry, <span class="number">0</span>, <span class="built_in">len</span>(items))</span><br><span class="line"><span class="keyword">for</span> i, v:= <span class="keyword">range</span> items &#123;</span><br><span class="line">data, _:= json.Marshal(v)</span><br><span class="line">entries = <span class="built_in">append</span>(entries, &amp;kinesis.PutRecordsRequestEntry&#123;</span><br><span class="line">Data:         data,</span><br><span class="line">PartitionKey: aws.String(<span class="string">"&lt;any partition key&gt;"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// KinesisのBatch上限件数が500なので分割する</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(entries) &gt;= <span class="number">500</span> || i == <span class="built_in">len</span>(items) <span class="number">-1</span> &#123;</span><br><span class="line">_, err := kc.PutRecordsWithContext(ctx, &amp;kinesis.PutRecordsInput&#123;</span><br><span class="line">Records:    records,</span><br><span class="line">StreamName: aws.String(<span class="string">"&lt;Kinesis Stream name&gt;"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">entries = entries[:<span class="number">0</span>] <span class="comment">// 成功したらクリア</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回は省略しましたが、この辺の最大件数が数百になるような閾値を含んだ単体テストは書きにくいので、500を <code>var kinesisPutSize = 500</code> といった形で変数に切り出すこともおそらく必要になってくると思います。この辺りはどこまでレビュー時にコメントするか、後から自分で直すかはその時の状況次第ですが、少ない件数では上手く動くけど、件数が増えるとスローダウンしたりエラーが発生するのは結構辛い事象なので、気をつけていきたい点ですね。</p><p>検索系も同様に大量件数に対する考慮が必要です。特に最大検索件数を指定し忘れることが多いので、SQLやDynamoDBにLimitの指定をし忘れないようにしましょう。特にSQLは意識しないとよく忘れるので、フレームワークレベルで横断的に設定しても良いかも知れません。</p><p>※ちなみに上記のコードは<code>putRecords</code>結果の <code>FailedRecordCount</code>が<code>0</code> であるかを確認していないので、そのままは利用しないで下さい。本当は<code>FailedRecordCount</code>が1件以上であれば、未処理だったレコードを再びputRecords対象に回す必要があります。<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/kinesis/#Kinesis.PutRecords" target="_blank" rel="noopener">参考</a>。この辺のAWSのSDK周りのハマリどころの説明は長くなるので..今回は省略します。</p><h2 id="☁️クラウド環境を意識した実装"><a href="#☁️クラウド環境を意識した実装" class="headerlink" title="☁️クラウド環境を意識した実装"></a>☁️クラウド環境を意識した実装</h2><h3 id="6-外部通信周りのリトライ"><a href="#6-外部通信周りのリトライ" class="headerlink" title="6. 外部通信周りのリトライ"></a>6. 外部通信周りのリトライ</h3><p><a href="https://dev.classmethod.jp/articles/retry-api-call-with-exponential-backoff-using-aws-sdk-go/" target="_blank" rel="noopener">AWS SDK for Goの場合は、APIコール時のリトライを意識して実装する必要は無い</a>ということです。問題になるのは、他のWebAPIサーバにリクエストを送信するときでしょう。</p><p>Goは簡単にHTTPリクエストを送信できるのでそれ自体は良いことですが、特にクラウド環境で動いているリソースに対しては瞬断も想定してリトライロジックを入れたほうが良いでしょう。リトライもそこそこナレッジが合って、<a href="https://docs.aws.amazon.com/ja_jp/general/latest/gr/api-retries.html" target="_blank" rel="noopener">エクスポネンシャルバックオフ</a>であったり、ジッターを入れるなど、自前で実装するとややこしいのでGoだと外部ライブラリに頼ることがほとんどだと思います。</p><ul><li><a href="https://github.com/hashicorp/go-retryablehttp" target="_blank" rel="noopener">hashicorp/go-retryablehttp</a></li></ul><p>などを利用すると良いかと思います。もし実行基盤がAWS Lambdaだとインフラレベルでリトライ回数を設定できるので、その場合は不要かもしれません。状況次第ですがレビュアー・レビュイーと相談して決めていました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 カジュアルなWebAPIを呼び出し</span></span><br><span class="line">resp, err := http.Get(<span class="string">"http://api.example.com/v1/users/"</span> + userID)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 リトライまで考慮したい(hashicorp/go-retryablehttpを使った例)</span></span><br><span class="line">retryClient := retryablehttp.NewClient()</span><br><span class="line">retryClient.RetryMax = <span class="number">2</span></span><br><span class="line">rc := retryClient.StandardClient()</span><br><span class="line">req, err := http.NewRequestWithContext(ctx, http.MethodGet, <span class="string">"http://example.com/"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">resp, err := rc.Do(req)</span><br></pre></td></tr></table></figure><p>1のWithContextの話と合わせて実装してみて下さい。ちなみに、もし外部API側がOpenAPI定義などを公開している場合は、そちらを利用した方が良いでしょう。もし、WebAPI定義の仕様が変わった場合に、再コード自動生成＋コンパイルで不整合を事前に検知できるかも知れないからです。</p><h3 id="7-プロパティは環境変数に切り出し起動時にチェックする"><a href="#7-プロパティは環境変数に切り出し起動時にチェックする" class="headerlink" title="7. プロパティは環境変数に切り出し起動時にチェックする"></a>7. プロパティは環境変数に切り出し起動時にチェックする</h3><p>データストアを始めとした外部リソースへのアクセス先など、多くのプロパティが業務システムの開発は出てくると思います。この時のホスト名、ポート番号、URLなどは環境変数などの外部から設定できるようにしましょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 1stコミットだから良いよね？って感じの仮実装の気持ちが伝わりますが</span></span><br><span class="line"><span class="keyword">const</span> EXTERNAL_API_URL = <span class="string">"http://localhost:8001"</span></span><br><span class="line"><span class="keyword">var</span> client = NewClient(EXTERNAL_API_URL)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 環境変数化はどのみち必要であるため早めに対応したい</span></span><br><span class="line"><span class="keyword">var</span> client external.Client</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">externalURL := os.Getenv(<span class="string">"EXTERNAL_API_URL"</span>)</span><br><span class="line"><span class="keyword">if</span> externalURL == <span class="string">""</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"EXTERNAL_API_URL is requiread environment variable"</span>)</span><br><span class="line">&#125;</span><br><span class="line">client = NewExternalClient(externalURL )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、環境変数化した場合は、その値がちゃんと設定されているか必須チェックなどは最低限行いましょう。Goだと<a href="https://github.com/kelseyhightower/envconfig" target="_blank" rel="noopener">kelseyhightower/envconfig</a> といった便利ライブラリもあるため、すでに導入済みであればそちらにフィールドを追加して、タグを設定すれば必須チェックくらいは行なえます。</p><p>環境変数を追加した場合は、READMEなどのドキュメントや、TerraformやCloudFormationなどインフラスコード側の更新も同期をとる必要があることが多いと思いますので、そういったものが存在しないかはレビュアー・レビュイーどちらも気をつけていったほうが良いと思います。</p><h2 id="⚡一般的な内容"><a href="#⚡一般的な内容" class="headerlink" title="⚡一般的な内容"></a>⚡一般的な内容</h2><h3 id="8-再利用可能なgoroutineセーフな変数はフィールドに切り出す"><a href="#8-再利用可能なgoroutineセーフな変数はフィールドに切り出す" class="headerlink" title="8. 再利用可能なgoroutineセーフな変数はフィールドに切り出す"></a>8. 再利用可能なgoroutineセーフな変数はフィールドに切り出す</h3><p><code>http.Client</code> などは<code>safe for concurrent use by multiple goroutines</code>(goroutineセーフだよ)と<a href="https://golang.org/src/net/http/client.go" target="_blank" rel="noopener">GoDoc</a> に記載されています。同じようにaws-sdk-for-goのDynamoDBのクライアントも<code>safe to use concurrently</code>だと<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#DynamoDB" target="_blank" rel="noopener">GoDoc</a>に記載されています。”Thread Safe”とか、”goroutine Safe”とか、”Concurrency Safe” とかで調べると見つけやすいと思います。この辺りをのクライアントを毎回生成せず、再利用できるものはフィールドに持たせようという指摘は比較的多いです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 毎回フィールドでDynamoDBクライアントを生成</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> db = dynamodb.New(session.Must(session.NewSession())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中略</span></span><br><span class="line">    out, err := db.UpdateItemWithContext(ctx, &amp;dynamodb.GetItemInput&#123;</span><br><span class="line">    TableName: aws.String(<span class="string">"&lt;exmaple-table&gt;"</span>),</span><br><span class="line">        Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line">            <span class="string">"user_id"</span>: &#123;</span><br><span class="line">                N: aws.String(<span class="string">"1"</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 中略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 goroutine Safeなものはフィールドに置いて再利用</span></span><br><span class="line"><span class="keyword">var</span> db = dynamodb.New(session.Must(session.NewSession())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 中略</span></span><br><span class="line">    out, err := db.UpdateItemWithContext(ctx, &amp;dynamodb.GetItemInput&#123;</span><br><span class="line">    TableName: aws.String(<span class="string">"&lt;exmaple-table&gt;"</span>),</span><br><span class="line">        Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line">            <span class="string">"user_id"</span>: &#123;</span><br><span class="line">                N: aws.String(<span class="string">"1"</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 中略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-Structの初期化処理はまとめる"><a href="#9-Structの初期化処理はまとめる" class="headerlink" title="9. Structの初期化処理はまとめる"></a>9. Structの初期化処理はまとめる</h3><p>GoのネストしたStructの作成は親子同時に行えるので、一度に宣言したほうが構造が使い見やすい分お得だと思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 ネストしたStructの方を先に宣言してから、後で親側にセット</span></span><br><span class="line">args := []command.Arg&#123;</span><br><span class="line">&#123;<span class="string">"media_type"</span>, control.MediaType&#125;,</span><br><span class="line">&#123;<span class="string">"live_streaming_enabled"</span>, fmt.Sprintf(<span class="string">"%v"</span>, control.LiveStreamingEnabled)&#125;,</span><br><span class="line">&#123;<span class="string">"device_id"</span>, deviceID&#125;,</span><br><span class="line">&#125;</span><br><span class="line">req := &amp;command.Command&#123;</span><br><span class="line">Func: control.CommandType,</span><br><span class="line">Args: args,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 これくらいであれば一度に宣言してしまう方が見やすい</span></span><br><span class="line">req := &amp;command.Command&#123;</span><br><span class="line">Func: control.CommandType,</span><br><span class="line">Args: []command.Arg&#123;</span><br><span class="line">&#123;<span class="string">"media_type"</span>, control.MediaType&#125;,</span><br><span class="line">&#123;<span class="string">"live_streaming_enabled"</span>, fmt.Sprintf(<span class="string">"%v"</span>, control.LiveStreamingEnabled)&#125;,</span><br><span class="line">&#123;<span class="string">"device_id"</span>, deviceID&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他のWebAPIでネストしたJSONをPOSTする時によくこういったコードが生まれやすい気がします。やりすぎは禁物ですがコレくらいであればargsの一時変数代入を行わずreqを作成したいですね。</p><h3 id="10-Structのフィールドを利用した判定ロジックを呼び出し元ではなくStruct側に寄せていく"><a href="#10-Structのフィールドを利用した判定ロジックを呼び出し元ではなくStruct側に寄せていく" class="headerlink" title="10. Structのフィールドを利用した判定ロジックを呼び出し元ではなくStruct側に寄せていく"></a>10. Structのフィールドを利用した判定ロジックを呼び出し元ではなくStruct側に寄せていく</h3><p>Structがデータを出し入れするだけの用途になることはよくあると思います。Structからデータを取得してif/forなどで処理をしているロジックがあれば、それはレシーバ側に寄せることを検討してみると良いかなと思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 センサーデータを表現するStructがあり、値の取得ロジックを利用側で実装しているイメージ</span></span><br><span class="line"><span class="keyword">type</span> SensorData <span class="keyword">struct</span> &#123;</span><br><span class="line">SensorType <span class="keyword">string</span></span><br><span class="line">ModelID <span class="keyword">string</span></span><br><span class="line">Value <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadValue</span><span class="params">(r SensorReading)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.ModelID == <span class="string">"P0AUK100B"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.SensorType == <span class="string">"D001"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value * <span class="number">1</span>/<span class="number">100</span> <span class="comment">// 何かしらの補正ロジック</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r.Value * <span class="number">1</span>/<span class="number">10</span> <span class="comment">// 何かしらの補正ロジック </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 レシーバに実装する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r SensorData)</span> <span class="title">ReadValue</span><span class="params">()</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.ModelID == <span class="string">"P0AUK100B"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.SensorType == <span class="string">"振動系"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value * <span class="number">1</span>/<span class="number">100</span> <span class="comment">// 何かしらの補正ロジック</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r.Value * <span class="number">1</span>/<span class="number">10</span> <span class="comment">// 何かしらの補正ロジック </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように寄せる意図は、単体テストを書きやすくなるというメリットが特にあると思います。後述するTableDrivenTestsにも繋げやすくなります。</p><figure class="highlight go"><figcaption><span>Struct側に実装するとテストがしやすい</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReadValue</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">r := SensorReading&#123;</span><br><span class="line">SensorType: <span class="string">"D001"</span>,</span><br><span class="line">ModelID:    <span class="string">"00CCK100W"</span>,</span><br><span class="line">Value:      <span class="number">12345</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.ReadValue() != <span class="number">1234.5</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">"want 123 but got "</span>, r.ReadValue())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、ロジックが呼び出し側に散らばらず、自然とデータを保持するStructが扱う業務ドメインのモデルぽく成長するメリットもあります。レシーバに寄せた後も、<code>if r.ModelID == &quot;P0AUK100B&quot;</code> ってどういう意味だろうかとか（プロトタイプの製品コードのイメージ）、なんで <code>1/100</code> するんだとかは、定数に切ったり別の説明関数を切ったりすることで、自己説明的なコードになるし、さらに細かくテストもしやすくなるし、今後プロトタイプ判定処理を拡張しようとした時に見通しを立てやすくと思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r SensorData)</span> <span class="title">IsprototypeModel</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.ModelID == <span class="string">"P0AUK100B"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r SensorData)</span> <span class="title">ReadValue</span><span class="params">()</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.IsprototypeModel() &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この話はDDDの話題とおそらく近くて好みが分かれそうなところですが、せっかくレシーバという機能がGoにあるのでドンドン使っていって、細かい粒度でテストを書いていこうよと話しています。</p><h3 id="11-panicやlog-Fatalはmain関数でのみ利用し、その他の関数はreturn-errする"><a href="#11-panicやlog-Fatalはmain関数でのみ利用し、その他の関数はreturn-errする" class="headerlink" title="11. panicやlog.Fatalはmain関数でのみ利用し、その他の関数はreturn errする"></a>11. panicやlog.Fatalはmain関数でのみ利用し、その他の関数はreturn errする</h3><p>Goのエラーハンドリングですが、よく言われるように、<strong>main関数以外</strong>で<code>panic</code>や<code>os.Exit(1)</code>や<code>log.Fatal</code>を行うのは原則禁止です。テストがしにくいといったことが理由です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬アルバイト勢がよく書いていたコード。なぜかよく指摘した</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">example</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"><span class="keyword">if</span> err := anyWork() &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀returnして最終的なハンドリングはmain関数かそれに相当する上位の関数でハンドリングする</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">example</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"><span class="keyword">if</span> err := anyWork() &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この辺りのお作法チックな指摘は、最初はしっくり来ない人が多いのか、業務でコードを書くのは初めてといった新卒さんやアルバイトerなメンバーによく指摘してる気がします。</p><h3 id="12-デバック用の標準出力はレビュー時には削除し、必要であればloggerを用いる"><a href="#12-デバック用の標準出力はレビュー時には削除し、必要であればloggerを用いる" class="headerlink" title="12. デバック用の標準出力はレビュー時には削除し、必要であればloggerを用いる"></a>12. デバック用の標準出力はレビュー時には削除し、必要であればloggerを用いる</h3><p><code>fmt.Println</code> が大量に書かれたコードのレビューをすると、試行錯誤の経緯が垣間見れるような気がして癒やされますよね。一方で、プロダクションコードにデバック用の標準出力は入れたくないので、消すかlogger経由にして欲しいと依頼するかGUIから消しちゃうことが多い気がします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬標準出力は辞めよう</span></span><br><span class="line">fmt.Println(<span class="string">"■debug確認"</span>, v.Name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀レビュー時にはキレイキレイしておくか、どうしても必要ならlogger経由で出力する</span></span><br><span class="line"><span class="keyword">import</span><span class="string">"github.com/rs/zerolog/log"</span></span><br><span class="line"></span><br><span class="line">log.Debug().Msgf(<span class="string">"UserName: %s\n"</span>, v.Name)</span><br></pre></td></tr></table></figure><h3 id="13-errのスコープを小さくする工夫"><a href="#13-errのスコープを小さくする工夫" class="headerlink" title="13. errのスコープを小さくする工夫"></a>13. errのスコープを小さくする工夫</h3><p>ある関数がerrorのみを返す時にありがちなのですが、if文の中で関数を呼ばない方式だと、err1とerr2で変数名が被るので、連番方式になりがちです。この場合はよくerr2のreturn部分をerr1にするミスをおかしがちです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 複数のerrがある場合は、連番方式になる（経験上）</span></span><br><span class="line">err1 := PostArticle(article)</span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err1</span><br><span class="line">&#125;</span><br><span class="line">err2 := UpdateIndex(article)</span><br><span class="line"><span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err2 <span class="comment">// ⚠️よくここが err1 になってしまいバグの原因に⚠️</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 errorのスコープをif文に閉じ込める</span></span><br><span class="line"><span class="keyword">if</span> err := PostArticle(article); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := UpdateIndex(article); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そのため、慣れるまで違和感が残りますが、if文の中でerrを宣言 &amp; ハンドリングするようにします。<br>複数の値を返す関数の場合でも、なるべく err1, err2といった変数を作らないようにする方が、バグ🐞を埋め込む確率を下げることに繋がると思います。</p><h3 id="14-return-errについて"><a href="#14-return-errについて" class="headerlink" title="14. return errについて"></a>14. return errについて</h3><p>非常に細かい点ですが、高確率に突っ込むことが多いネタです。コードのとおりですがnilが自明な場合は、変数ではなくnilそのものの固定値を返したほうが、レビュー時の脳内メモリを減らせて助かるので、確認しながら書き換えています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 複数のerrがある場合は、連番方式になる（経験上）</span></span><br><span class="line">resp, err := hoge()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"context info: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, err <span class="comment">// ⚠️ここのerrは必ずnilになるはず⚠️</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 errorのスコープをif文に閉じ込める</span></span><br><span class="line">resp, err := hoge()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"context info: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, <span class="literal">nil</span> <span class="comment">// 自明であればnilにする</span></span><br></pre></td></tr></table></figure><p>書き換え後のコードが前提になっている人は、最後のreturnでerrが残っているともしかしてnil以外の値が入るフローがあるのかと余計に考えてしまうそうです。</p><h3 id="15-Return-function-callsでできるものは一時変数に代入しない"><a href="#15-Return-function-callsでできるものは一時変数に代入しない" class="headerlink" title="15. Return function callsでできるものは一時変数に代入しない"></a>15. Return function callsでできるものは一時変数に代入しない</h3><p>一時変数に格納して、そのままreturnするコードもありますが、関数をreturnから始めるのを恐れなくても良いと思います。変数textが無くなる分、ワーキングメモリが減ってレビューが楽になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 一時変数への代入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countTextLength</span><span class="params">(text <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">text := utf8.RuneCountInString(text)</span><br><span class="line"><span class="keyword">return</span> text</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 returnから開始することを恐れない</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countTextLength</span><span class="params">(text <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> utf8.RuneCountInString(text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記であればreturn firstを取る人も、<code>val, error := anyFunc()</code> みたいに多値を返す関数の場合、一時変数を準備する人が多いと思います。最初に紹介した、<a href="https://qiita.com/ksato9700/items/6228d4eb6d5b282f82f6" target="_blank" rel="noopener">Go言語で幸せになれる10のテクニック - Qiita</a>の記事に書いてあるとおり、Return function callsにするとスッキリします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 errチェックをしても、結局関数barの振る舞いは同じ</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">(arg <span class="keyword">string</span>)</span> <span class="params">(*Example, error)</span></span> &#123;</span><br><span class="line">v, err := foo(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> v, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 それであれば直接returnしちゃう</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">(argstring)</span> <span class="params">(*Example, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> foo(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後の <code>return foo(arg)</code> で良いじゃないかな？って提案は年に100回くらいしている気がします。コードも減るので、errorをWrapしない場合はこちらで省略できないか、注意すると良いんじゃないかと思います。</p><h4 id="16-コードコメント"><a href="#16-コードコメント" class="headerlink" title="16. コードコメント"></a>16. コードコメント</h4><p>コードのコメントについては、至言があるので引用します。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">コードには How<br>テストコードには What<br>コミットログには Why<br>コードコメントには Why not<br><br>を書こうという話をした</p>&mdash; Takuto Wada (@t_wada) <a href="https://twitter.com/t_wada/status/904916106153828352?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 5, 2017</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>これ以上は蛇足になりそうですが、、、あとはことAWS, GCPなどのサービスを利用する場合は、処理件数などの制約があるかと思いますので、そのリファレンスURLなどをコードに貼ることは有効だと思います。また、ライブラリの利用方法も特殊なものがあれば、GoDocのExampleコードのリンクを貼るのは有効です。<a href="https://ishiotks.hatenablog.com/entry/2019/02/02/143259" target="_blank" rel="noopener">ソースコードのコメントに登場する URL の役割</a>にもある通り、<strong>無効になりにくい URL を使う</strong> といったテクニックがあるので、リンク先の記事も確認してみて下さい</p><p>コードレビュー時には、正直自分が使ったことがないプロダクトにアクセスするコードの場合は、レビューがつらすぎるので、レビュイーに参考にしたURLを教えてもらったり、制約から来ているぽい数値の諸元を確認したりしています。この時、すでにコード上に参考URLが貼ってあれば、GitHub上のPullRequestのコメントで余計なやり取りが減らせるので、スピード感が増してお互い幸せかなと思っています。</p><h2 id="🧪単体テスト"><a href="#🧪単体テスト" class="headerlink" title="🧪単体テスト"></a>🧪単体テスト</h2><h3 id="17-単体テストの変数名"><a href="#17-単体テストの変数名" class="headerlink" title="17. 単体テストの変数名"></a>17. 単体テストの変数名</h3><p>出身や育った環境の違い？で期待値と実際値を、<code>input/actual/expected</code>と呼んだり、<code>in/want/got</code>と呼んだりいくつかの文化圏があるようです。Goは <code>in/want/got</code>を採用することが多いようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 正直、好みの世界だが..</span></span><br><span class="line">cases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">input        <span class="keyword">string</span></span><br><span class="line">expected     <span class="keyword">string</span></span><br><span class="line">expectedCode <span class="keyword">int</span></span><br><span class="line">&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 want。複数ある場合はwantCodeなどで区別する</span></span><br><span class="line">cases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">in       <span class="keyword">string</span></span><br><span class="line">want     <span class="keyword">string</span></span><br><span class="line">wantCode <span class="keyword">int</span></span><br><span class="line">&#125;&#123;&#125;</span><br></pre></td></tr></table></figure><p>他にも入力値は <code>in</code> とすることが多そうです。次のTable Driven Testsではcaseと汎化されて、使う機会は少ないかも知れません。</p><h3 id="18-Table-Driven-Tests"><a href="#18-Table-Driven-Tests" class="headerlink" title="18. Table Driven Tests"></a>18. Table Driven Tests</h3><p>GoだとTable Driven Testsという、データを駆動にテストすることが推奨されています。</p><ul><li><a href="https://github.com/golang/go/wiki/TableDrivenTests" target="_blank" rel="noopener">https://github.com/golang/go/wiki/TableDrivenTests</a></li></ul><p>このパターンになっていなくて、このパターンが導入できそうな場合、そっとTable Driven Testsっていうのがあってね、と声をかけることにしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"%d"</span>, i), <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got := TestFunction(tt.in)</span><br><span class="line"><span class="keyword">if</span> got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"failed for %v: got %v, want %v"</span>, tt.in, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>たとえ、テストパターンが1件でもTable Driven Testsで作成しておけば、後でケースを追加したいときも容易なので、基本的にこのスタイルでのテストを推奨しています。テスト駆動開発は自分たちのチームでは全員が取り組んでいないので、最初のPullRequestレビューではテストがない（！）事が多く、テストを書いてねってコメントすることも多いのも実はあります。（最終的には全て書くのですが）</p><p>テストに関してはbudougumi0617さんの<a href="https://budougumi0617.github.io/2018/08/19/go-testing2018/#table-driven-test" target="_blank" rel="noopener">Goのtestを理解する in 2018 #go</a>の記事にいつもお世話になっています。ありがとうございます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>独断と偏見による、コードレビューでよく指摘したことのまとめ記事でした。Goに入ればGoに従えっていうのはかなり浸透している気がしますが、ことライブラリの使い方や、AWSなどのクラウド上でアプリを動かす時といった観点での、こういったレビュー記事は観測した限りは比較的少なかったのでまとめました。</p><p>また、今回は省略した内容でよく指摘したのは、</p><ul><li>「変数名や関数名やレシーバ名を短くしよう」</li><li>「Sliceのマージは<code>...</code>を使って<code>append</code>すると良いよ」</li><li>「関数の引数で同じ型が並んでいると省略できるよ」</li><li>「引数の並び順はcontext.Contextとか固い順にしようよ」</li><li>「引数の種類が多い場合はStructを作らない？」</li><li>「ファイルI/Oなどで一度に全部メモリに抱えず、1000件単位などでページングしながら処理しよう」</li></ul><p>とか色々ありましたが、このへんは別の記事でもよく上げられていたので省略しました。</p><p>他にもライブラリの使い方や、クラウドで動かすアプリ開発で汎用的なネタが集まりましたら、ここに追記予定です。</p><p>Go案件も色々増えてきていますので、興味がある方はお気軽にリモート飲み会（お茶会）しましょう☕🍻。興味がある方はフューチャーぽいメンバーにDMください。</p><p>ここまで読んでいただいてありがとうございました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIG(Technology Innovation Group)というフューチャーグループのIT技術を良い感じに推進する部署と、その中にあるDXユニットという、デジタルトランスフォーメーションに関わる仕事を主に推進していくチームのことです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200709/photo_20200709_01.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot designed by &lt;a 
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Zuora連載2：Zuora REST API 利用と開発環境構築</title>
    <link href="https://future-architect.github.io/articles/20200708/"/>
    <id>https://future-architect.github.io/articles/20200708/</id>
    <published>2020-07-08T00:56:30.000Z</published>
    <updated>2020-07-18T03:13:19.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Zuora Central Platform には様々なリソースがありますが、それらは API 越しに扱うことができます。<br>この記事では、Zuora REST API の簡単な利用方法と Swagger を利用したモックを作成して、開発環境を整備することを扱います。</p><h2 id="Zuora-Central-Platformとは？"><a href="#Zuora-Central-Platformとは？" class="headerlink" title="Zuora Central Platformとは？"></a>Zuora Central Platformとは？</h2><ul><li><a href="https://future-architect.github.io/articles/20200706/">Zuora連載１：Zuora Central Platform概要</a></li></ul><h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><ul><li>Zuora REST API<ul><li>version: 2020-04-08</li></ul></li><li>go-swagger<ul><li>v0.23.0</li></ul></li></ul><h2 id="Zuora-REST-API-Reference"><a href="#Zuora-REST-API-Reference" class="headerlink" title="Zuora REST API Reference"></a>Zuora REST API Reference</h2><p>Zuora Central Platform の API 仕様は下記で参照することができます。<br><a href="https://www.zuora.com/developer/api-reference/#" target="_blank" rel="noopener">https://www.zuora.com/developer/api-reference/#</a></p><h3 id="Zuora-Object-Model"><a href="#Zuora-Object-Model" class="headerlink" title="Zuora Object Model"></a>Zuora Object Model</h3><p>Zuora Central Platform の API を扱う上で、リソース同士の関係性が知りたいケースはよくあります。<br>リソースの関係性は図として公開されています。</p><p><a href="https://www.zuora.com/developer/api-reference/#section/Zuora-Object-Model" target="_blank" rel="noopener">https://www.zuora.com/developer/api-reference/#section/Zuora-Object-Model</a><br><img src="/images/20200708/photo_20200708_01.jpeg"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>各リソースごとに、CRUD が定義されているようなイメージを持っていただければ良さそうです。<br>種類としては 2 つほどあり、<code>CRUD:</code> とプレフィクスがついている API は単純な CRUD 処理、その他は関連リソース含めて扱えるような API となっています。</p><h3 id="よく利用する-API"><a href="#よく利用する-API" class="headerlink" title="よく利用する API"></a>よく利用する API</h3><p>現在利用しているプロジェクトでは、以下の API をよく利用しています。</p><ul><li><a href="https://www.zuora.com/developer/api-reference/#operation/POST_Account" target="_blank" rel="noopener">Create Account</a><ul><li><code>POST /v1/accounts</code></li><li>サブスクリプション契約を行うアカウントを新規作成する API</li></ul></li><li><a href="https://www.zuora.com/developer/api-reference/#operation/POST_Subscription" target="_blank" rel="noopener">Create subscription</a><ul><li><code>POST /v1/subscriptions</code></li><li>サブスクリプション契約を実施する API</li></ul></li><li><a href="https://www.zuora.com/developer/api-reference/#operation/GET_SubscriptionsByAccount" target="_blank" rel="noopener">Get subscriptions by account</a><ul><li><code>GET /v1/subscriptions</code></li><li>アカウント別のサブスクリプション情報を取得する API</li></ul></li><li><a href="https://www.zuora.com/developer/api-reference/#operation/POST_Usage" target="_blank" rel="noopener">Post usage</a><ul><li><code>POST /v1/usage</code></li><li>利用量を Zuora へ連携する API</li><li>csv を HTTP Body へセットしてリクエストを実施する</li></ul></li></ul><h3 id="同時リクエスト制限"><a href="#同時リクエスト制限" class="headerlink" title="同時リクエスト制限"></a>同時リクエスト制限</h3><p>Zuora REST API は基本的には、同時リクエスト数の上限が <code>40</code> となっています。<br>実際は、APIやデータサイズ別に、リクエスト数の上限が以下に整理されてますので、システム構築の際は一度目を通しておいたほうが良いです。</p><p><a href="https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Policies/Concurrent_Request_Limits" target="_blank" rel="noopener">Concurrent Request Limits - Zuora</a></p><h3 id="Zuora-REST-API-リクエスト環境"><a href="#Zuora-REST-API-リクエスト環境" class="headerlink" title="Zuora REST API リクエスト環境"></a>Zuora REST API リクエスト環境</h3><p>下記の環境が提供されております。<br>いづれも API 利用のため、Zuora Central Platform へログインを実施し、クレデンシャルを発行する必要があります。<br>Sandbox 環境はテスト用として利用できる環境になっています。</p><p><a href="https://www.zuora.com/developer/api-reference/#section/Introduction/Access-to-the-API" target="_blank" rel="noopener">https://www.zuora.com/developer/api-reference/#section/Introduction/Access-to-the-API</a><br><img src="/images/20200708/1.png" style="border:solid 1px #000000"></p><h4 id="リクエスト方法"><a href="#リクエスト方法" class="headerlink" title="リクエスト方法"></a>リクエスト方法</h4><p>ここで、Postman を利用したリクエスト方法について記載します。</p><p>認証は OAuth2.0 を利用して行われています。 設定手順も、ドキュメントにまとまっています。<br><a href="https://www.zuora.com/developer/api-reference/#section/Authentication/OAuth-v2.0" target="_blank" rel="noopener">https://www.zuora.com/developer/api-reference/#section/Authentication/OAuth-v2.0</a></p><ol><li><strong>クレデンシャルを発行</strong>: Zuora Central Platform 管理ページよりクレデンシャルを作成します。<ul><li>1.1. メニューより、「管理者」を選択<br><img src="/images/20200708/2.png" class="img-small-size" style="border:solid 1px #000000"><br></li><li>1.2. 「ユーザーの管理」を選択<img src="/images/20200708/3.png" style="border:solid 1px #000000"></li><li>1.3. 「OAuth クライアント」から新規クライアントを作成し、 <code>client_id</code> と <code>client_secret</code> を保存します。<img src="/images/20200708/4.png"></li></ul></li><li>OAuth API をリクエストして Bearer トークンを取得  <ul><li>2.1. Postman で新規リクエスト作成から、「Authorization」を選択</li><li>Type を 「OAuth 2.0」へ設定し、「Get New Access Token」を押下します。<img src="/images/20200708/Get_New_Access Token.png"></li><li>2.2. 「Access Token URL」を下記 <a href="https://www.zuora.com/developer/api-reference/#operation/createToken" target="_blank" rel="noopener">Generate an OAuth token</a> URL に設定し、 <code>client_id</code>と<code>client_secret</code> も合わせてセットし、「Request Token」を押下します。<br><a href="https://rest.apisandbox.zuora.com/oauth/token" target="_blank" rel="noopener">https://rest.apisandbox.zuora.com/oauth/token</a></li><li><img src="/images/20200708/request_token.png"></li><li>2.3. アクセストークンが作成されます。<img src="/images/20200708/access_token.png"></li></ul></li><li>Bearer トークンを Authorization ヘッダーに付与してリクエスト<br><a href="https://www.zuora.com/developer/api-reference/#operation/POST_Account" target="_blank" rel="noopener">Create Account</a> へリクエストしてみます。<br><a href="https://rest.apisandbox.zuora.com/v1/accounts" target="_blank" rel="noopener">https://rest.apisandbox.zuora.com/v1/accounts</a><ul><li>3.1. 先ほど作成したトークンを指定します。<img src="/images/20200708/select_token.png"></li><li>3.2. URL とサンプルの Body をセットし、リクエストを実行します。<img src="/images/20200708/sample_request.png"></li><li>3.3. 以下のように返却されると成功です。<img src="/images/20200708/response_success.png"></li></ul></li></ol><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>Zuora REST API 定義は Swagger ファイルとしても、公開されています。<br>下記リンクよりダウンロードが可能です。</p><p>Swagger 2.0<br><a href="https://assets.zuora.com/zuora-documentation/swagger.yaml" target="_blank" rel="noopener">https://assets.zuora.com/zuora-documentation/swagger.yaml</a></p><p>Open API(Swagger) 3.0<br><a href="https://assets.zuora.com/zuora-documentation/swagger3.yaml" target="_blank" rel="noopener">https://assets.zuora.com/zuora-documentation/swagger3.yaml</a></p><p>今回は、この Swagger ファイルを利用してモックサーバーとクライアントを作成して開発ができるような環境を作ります。</p><h3 id="モックサーバーの作成"><a href="#モックサーバーの作成" class="headerlink" title="モックサーバーの作成"></a>モックサーバーの作成</h3><p>モックサーバーは <a href="https://github.com/stoplightio/prism" target="_blank" rel="noopener">Prism</a> を利用します。<br>詳細は、下記記事に記載があります。とても便利です。</p><ul><li><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかった OpenAPI (Swagger) ツール | Future Tech Blog - フューチャーアーキテクト</a></li></ul><p>node の環境が整っている方はこちら</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">npm install -g @stoplight/prism-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># モック起動</span></span><br><span class="line">prism mock -p 4010 ./swagger.yaml</span><br></pre></td></tr></table></figure><p>docker から利用したい場合はこちら</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># モック起動</span></span><br><span class="line">docker run --init --rm -it -p 4010:4010 -v $(<span class="built_in">pwd</span>):/tmp -P stoplight/prism:3 mock -h 0.0.0.0 <span class="string">"/tmp/swagger.yaml"</span></span><br></pre></td></tr></table></figure><p>ここで試しにリクエストしてみます。<br>Prism はバリデーション等もしてくれるので、Swagger 定義に沿ったリクエストをする必要があります。</p><p>例: アカウント登録リクエストサンプル</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">% curl -X POST <span class="string">"http://localhost:4010/v1/accounts"</span> -H <span class="string">"Content-Type: application/json"</span> -d <span class="string">'&#123;"name": "test", "currency": "JPY", "billToContact": &#123;"lastName": "Taro", "firstName":"Tanaka" &#125;&#125;'</span> | jq .</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"accountId"</span>: <span class="string">"402892c74c9193cd014c96bbe7c101f9"</span>,</span><br><span class="line">  <span class="string">"accountNumber"</span>: <span class="string">"A00000004"</span>,</span><br><span class="line">  <span class="string">"billToContactId"</span>: <span class="string">"2c92c8fb68a28d180168a7ccedba1c4c"</span>,</span><br><span class="line">  <span class="string">"soldToContactId"</span>: <span class="string">"2c92c8fb68a28d180168a7ccedc61c4e"</span>,</span><br><span class="line">  <span class="string">"paymentMethodId"</span>: <span class="string">"402892c74c9193cd014c96bbe7d901fd"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Get-リクエスト時のエラー解消方法"><a href="#Get-リクエスト時のエラー解消方法" class="headerlink" title="Get リクエスト時のエラー解消方法"></a>Get リクエスト時のエラー解消方法</h4><p>ここで少々本筋とはずれますが、Get リクエストをした際に下記エラーに遭遇するかもしれないです。パスパラメータに、パラメータを渡しているにもかかわらず未定義であるかのようなエラーです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># アカウント取得API</span></span><br><span class="line"><span class="comment"># /v1/accounts/&#123;account-key&#125;</span></span><br><span class="line">% curl -s -X GET <span class="string">"http://localhost:4010/v1/accounts/xxxxx"</span> | jq .</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"https://stoplight.io/prism/errors#UNPROCESSABLE_ENTITY"</span>,</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Invalid request body payload"</span>,</span><br><span class="line">  <span class="string">"status"</span>: 422,</span><br><span class="line">  <span class="string">"detail"</span>: <span class="string">"Your request is not valid and no HTTP validation response was found in the spec, so Prism is generating this error for you."</span>,</span><br><span class="line">  <span class="string">"validation"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"location"</span>: [</span><br><span class="line">        <span class="string">"path"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"severity"</span>: <span class="string">"Error"</span>,</span><br><span class="line">      <span class="string">"code"</span>: <span class="string">"required"</span>,</span><br><span class="line">      <span class="string">"message"</span>: <span class="string">"should have required property 'account-key'"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらは、Prism 側の問題で、パスパラメータの <code>-</code> を取り除くことで解消します。<br>具体的には、パラメータキーの <code>account-key</code> を <code>accountKey</code> へ修正します。</p><p><code>swagger.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># before</span></span><br><span class="line"><span class="string">/v1/accounts/&#123;account-key&#125;:</span></span><br><span class="line"><span class="comment"># after</span></span><br><span class="line"><span class="string">/v1/accounts/&#123;accountKey&#125;:</span></span><br><span class="line">  <span class="attr">get:</span></span><br><span class="line">    <span class="attr">parameters:</span></span><br><span class="line">      <span class="comment"># before</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">account-key</span></span><br><span class="line">      <span class="comment"># after</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">accountKey</span></span><br><span class="line">        <span class="attr">in:</span> <span class="string">path</span></span><br></pre></td></tr></table></figure><p>修正後はリクエストが成功するようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">% curl -s -X GET <span class="string">"http://localhost:4010/v1/accounts/xxxxx"</span> | jq .</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"basicInfo"</span>: &#123;</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"billingAndPayment"</span>: &#123;</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"metrics"</span>: &#123;</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"billToContact"</span>: &#123;</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"soldToContact"</span>: &#123;</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"success"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="クライアントの作成"><a href="#クライアントの作成" class="headerlink" title="クライアントの作成"></a>クライアントの作成</h3><h4 id="コード生成"><a href="#コード生成" class="headerlink" title="コード生成"></a>コード生成</h4><p>Zuora REST API へのリクエストですが、フロントエンドから直接というケースより、バックエンド内で呼び出すケースが多いのではないでしょうか。<br>(実際、私が利用しているケースも同様で、バックエンド内で利用しています。)<br>そのため、クライアントは バックエンドで利用される Go で作成します。</p><p>Swagger のクライアント生成は、 <a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a> を利用します。<br>115552 行 ( ※ <code>version: 2020-04-08</code> ) ほど Swagger ファイルがあり 3 分程度生成に時間がかかりました。<br>validation を実行すると、エラーで引っかかってしまうため、仕方なくスキップしています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./zuoraClient ディレクトリ以下に生成</span></span><br><span class="line">swagger generate client -q \</span><br><span class="line">  -f ./swagger.yaml \</span><br><span class="line">  --skip-validation \</span><br><span class="line">  -t ./zuoraClient</span><br></pre></td></tr></table></figure><h4 id="補足-エラー修正"><a href="#補足-エラー修正" class="headerlink" title="補足: エラー修正"></a>補足: エラー修正</h4><p>上記コマンド実行にあたり、下記エラーが発生しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed rendering template data <span class="keyword">for</span> definition: template execution failed <span class="keyword">for</span> template definition: template: schemavalidator:491:65: executing <span class="string">"schemavalidator"</span> at &lt;.&gt;: wrong <span class="built_in">type</span> <span class="keyword">for</span> value; expected string; got bool</span><br></pre></td></tr></table></figure><p>template を展開する際に、型エラーになっているようです。<br>これだけだとよくわからなかったので、 go-swagger 側のソースコードを読み、エラーの箇所を突き止めました。<br><a href="https://github.com/go-swagger/go-swagger/blob/v0.23.0/generator/templates/schemavalidator.gotmpl#L491" target="_blank" rel="noopener">https://github.com/go-swagger/go-swagger/blob/v0.23.0/generator/templates/schemavalidator.gotmpl#L491</a></p><p>前後のコードとエラーログから、 <code>Enum</code> 定義で <code>type: string</code> を期待しているが <code>bool</code> 型の値が定義されていると読み取れました。<br>そこで、swagger.yml 内を grep して検索したところ、下記の定義が見つかりました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">linkage_type:</span></span><br><span class="line">  <span class="attr">enum:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Start</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Success</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Failure</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Iterate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Approve</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Reject</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><p>こちらを、以下のように定義し直すことでエラーが回避できました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">linkage_type:</span></span><br><span class="line">  <span class="attr">enum:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Start</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Success</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Failure</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Iterate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"true"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"false"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Approve</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Reject</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><h4 id="クライアントの利用"><a href="#クライアントの利用" class="headerlink" title="クライアントの利用"></a>クライアントの利用</h4><p>クライアントコードは以下のように利用できます。<br>ここでは、 <a href="https://www.zuora.com/developer/api-reference/#operation/GET_SubscriptionsByAccount" target="_blank" rel="noopener">Get subscriptions by account</a> をリクエストしています。<br>注意点として、処理の成功がステータスコードではなく <code>success</code> プロパティで表現されるケースがあるので、エラーハンドリングを入れています。</p><p><code>main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/taga_sandbox/zuora_api_sandbox/zuoraClient/client"</span></span><br><span class="line"><span class="string">"github.com/taga_sandbox/zuora_api_sandbox/zuoraClient/client/subscriptions"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// モックサーバーへ接続するクライアント作成</span></span><br><span class="line">subscriptionClient := client.NewHTTPClientWithConfig(<span class="literal">nil</span>, &amp;client.TransportConfig&#123;</span><br><span class="line">Host:     <span class="string">"localhost:4010"</span>,</span><br><span class="line">BasePath: <span class="string">"/"</span>,</span><br><span class="line">Schemes:  []<span class="keyword">string</span>&#123;<span class="string">"http"</span>&#125;,</span><br><span class="line">&#125;).Subscriptions</span><br><span class="line"></span><br><span class="line">params := subscriptions.NewGETSubscriptionsByAccountParams()</span><br><span class="line">params.SetAccountKey(<span class="string">"dummy-account-key"</span>)</span><br><span class="line"></span><br><span class="line">res, err := subscriptionClient.GETSubscriptionsByAccount(params)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 処理が成功したかどうかは success プロパティで判定する</span></span><br><span class="line"><span class="keyword">if</span> !res.GetPayload().Success &#123;</span><br><span class="line">log.Fatalln(<span class="string">"falied"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ go run main.go</span><br><span class="line">[GET /v1/subscriptions/accounts/&#123;accountKey&#125;][200] gETSubscriptionsByAccountOK  &amp;&#123;NextPage: Subscriptions:[0xc0005ce2c0] Success:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>これで、モックサーバーを立ち上げ、かつクライアントからのリクエストを実行することができました。<br>このセットが用意されていると、ローカルでの開発がとても楽になります。</p><h5 id="補足-エラーと解消方法"><a href="#補足-エラーと解消方法" class="headerlink" title="補足: エラーと解消方法"></a>補足: エラーと解消方法</h5><p><code>go-swagger</code> で生成したコードをそのまま利用すると、エラーになってハマるケースがありましたので、解消法を記載します。<br>このあたりは、もうちょっと楽にできたらいいなぁと思います。</p><ol><li><code>cannot convert XXX (type float64) to type string</code> エラー</li></ol><p><code>go-swagger</code> で生成されたコード自体に問題があるケースです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ go run main.go</span><br><span class="line"><span class="comment"># github.com/taga_sandbox/zuora_api_sandbox/zuoraClient/models</span></span><br><span class="line">zuoraClient/models/proxy_create_payment.go:567:55: cannot convert m.Amount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_create_payment.go:571:55: cannot convert m.Amount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_create_payment.go:584:75: cannot convert m.AppliedCreditBalanceAmount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_create_payment.go:588:75: cannot convert m.AppliedCreditBalanceAmount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_create_payment.go:601:69: cannot convert m.AppliedInvoiceAmount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_create_payment.go:605:69: cannot convert m.AppliedInvoiceAmount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_modify_payment.go:315:55: cannot convert m.Amount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_modify_payment.go:319:55: cannot convert m.Amount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br></pre></td></tr></table></figure><p>生成コードのエラー該当行</p><p><code>zuoraClient/models/proxy_create_payment.go</code> 561 行目</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *ProxyCreatePayment)</span> <span class="title">validateAmount</span><span class="params">(formats strfmt.Registry)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> swag.IsZero(m.Amount) &#123; <span class="comment">// not required</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// この行がエラー</span></span><br><span class="line"><span class="keyword">if</span> err := validate.MinLength(<span class="string">"Amount"</span>, <span class="string">"body"</span>, <span class="keyword">string</span>(m.Amount), <span class="number">0</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// この行がエラー</span></span><br><span class="line"><span class="keyword">if</span> err := validate.MaxLength(<span class="string">"Amount"</span>, <span class="string">"body"</span>, <span class="keyword">string</span>(m.Amount), <span class="number">16</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>swagger.yml での該当行は下記<br><code>type: number</code> に対して <code>minLength</code> , <code>maxLength</code> を定義していることが原因のようです。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ProxyCreatePayment:</span></span><br><span class="line">  <span class="attr">allOf:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">properties:</span></span><br><span class="line">        <span class="comment"># 省略</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">Amount:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">"The amount of the payment.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            "</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">double</span></span><br><span class="line">          <span class="attr">maxLength:</span> <span class="number">16</span></span><br><span class="line">          <span class="attr">minLength:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br></pre></td></tr></table></figure><p>ここは迷ったのですが、生成コード側に手を入れることにしました。<br>この後の利用でも生成コードと、Zuora REST API のレスポンスで型が不整合とのエラーが一定数起きたので、生成コードの修正は可としています。</p><p>修正後</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(m *ProxyCreatePayment)</span> <span class="title">validateAmount</span><span class="params">(formats strfmt.Registry)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> swag.IsZero(m.Amount) &#123; <span class="comment">// not required</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := validate.MinLength(<span class="string">"Amount"</span>, <span class="string">"body"</span>, fmt.Sprint(m.Amount), <span class="number">0</span>); err != <span class="literal">nil</span> &#123; <span class="comment">//この行がエラー</span></span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := validate.MaxLength(<span class="string">"Amount"</span>, <span class="string">"body"</span>, fmt.Sprint(m.Amount), <span class="number">16</span>); err != <span class="literal">nil</span> &#123; <span class="comment">//この行がエラー</span></span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>none of producers</code> エラー</li></ol><p>クライアントコードからリクエストを実行すると、下記エラーが発生します。<br>こちらも、 <code>go-swagger</code> 側の問題で <code>Content-Type</code> の <code>charset</code> に対応していないことが原因です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ go run main.go</span><br><span class="line">2020/04/21 15:00:00 none of producers: map[application/json:0x13e1270 application/octet-stream:0x13dfeb0 application/xml:0x13e2040 text/csv:0x13e0c40 text/html:0x13e18f0 text/plain:0x13e18f0] registered. try application/json; charset=utf-8</span><br><span class="line"><span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>swagger.yml で以下のように定義されているため修正して、再度 client を生成します。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># before</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">application/json;</span> <span class="string">charset=utf-8</span></span><br><span class="line"><span class="attr">consumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">application/json;</span> <span class="string">charset=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># after</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">application/json</span></span><br><span class="line"><span class="attr">consumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">application/json</span></span><br></pre></td></tr></table></figure><p>client だけ 再生成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">swagger generate client -q \</span><br><span class="line">  -f ./swagger.yaml \</span><br><span class="line">  --skip-validation \</span><br><span class="line">  --skip-models \</span><br><span class="line">  -t ./zuoraClient</span><br></pre></td></tr></table></figure><ol start="3"><li><code>cannot unmarshal number into Go struct</code> エラー</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ go run main.go</span><br><span class="line">2020/04/21 15:00:00 json: cannot unmarshal number into Go struct field GETSubscriptionWrapper.subscriptions of <span class="built_in">type</span> string</span><br><span class="line"><span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>Zuora REST API モックサーバーからの JSON レスポンスを Go の Struct へパースしようとしたところ、型エラーが発生してました。<br>このエラーは結構、対象を見つけ出すのが大変です。<br>モックサーバーのレスポンスと 生成 Struct の型定義を見比べて、原因を調査します。<br>(※ 実際の開発の際は、モックサーバーではなく Zuora REST API からのレスポンスと比較してください。)</p><p>今回は、 以下 2 点が原因でした<br>型を変更すると付随でコンパイルエラーになるため、合わせて修正します。</p><ul><li><code>string型</code> に対して <code>bool値</code> の <code>true/false</code> が返却</li><li><code>string型</code> に対して <code>number</code> が返却</li></ul><p><code>./zuoraClient/models/g_e_t_subscription_type.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GETSubscriptionType <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// before</span></span><br><span class="line">  InvoiceSeparately <span class="keyword">string</span> <span class="string">`json:"invoiceSeparately,omitempty"`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// after</span></span><br><span class="line">  InvoiceSeparately <span class="keyword">bool</span> <span class="string">`json:"invoiceSeparately,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>zuoraClient/models/g_e_t_subscription_rate_plan_charges_type.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GETSubscriptionRatePlanChargesType <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// before</span></span><br><span class="line">  Dmrc <span class="keyword">string</span> <span class="string">`json:"dmrc,omitempty"`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// after</span></span><br><span class="line">  Dmrc <span class="keyword">float64</span> <span class="string">`json:"dmrc,omitempty"`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Dtcv, Mrr, Tcvh も同様</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>Zuora REST API のリクエスト方法と、開発環境整備のためのモックサーバーとクライアントコードの生成方法について記載しました。<br>若干ハマりどころはありますが、整備すると開発とテストが格段にやりやすくなります。</p><p>こちらを参考に、Zuora REST API を利用した開発効率が上がれば良いなと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;Zuora Central Platform には様々なリソースがありますが、それらは API 越しに扱うことができます。&lt;br&gt;この記事で
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Zuora" scheme="https://future-architect.github.io/tags/Zuora/"/>
    
      <category term="SaaS" scheme="https://future-architect.github.io/tags/SaaS/"/>
    
      <category term="サブスクリプション" scheme="https://future-architect.github.io/tags/%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>VSCode の Go extension でよく利用するコマンド 7選</title>
    <link href="https://future-architect.github.io/articles/20200707/"/>
    <id>https://future-architect.github.io/articles/20200707/</id>
    <published>2020-07-07T01:15:05.000Z</published>
    <updated>2020-07-17T01:50:25.484Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DX チーム所属の多賀です。また Go についての記事を書きます。</p><p>最近 Go 開発本体への加入が発表されるなど、盛り上がっている VSCode の Go extension ですが、私も基本は VSCode + Go extension を利用して開発しています。<br>開発する際によく利用するコマンドがいくつかありますので、まとめました。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>VSCode: 1.45.1</li><li>Go extension: 0.14.4</li></ul><p>補完やその他機能を利用するために Go の Language Server Protocol の実装である <code>gopls</code> を利用しています。<br><a href="https://github.com/golang/tools/tree/master/gopls" target="_blank" rel="noopener">https://github.com/golang/tools/tree/master/gopls</a></p><p>Go extension 設定の <code>go.useLanguageServer</code> を <code>true</code> にしています。<br>その他の設定は以下の公式設定を利用しています。<br><a href="https://github.com/golang/tools/blob/master/gopls/doc/vscode.md" target="_blank" rel="noopener">https://github.com/golang/tools/blob/master/gopls/doc/vscode.md</a></p><h2 id="コマンドの出し方"><a href="#コマンドの出し方" class="headerlink" title="コマンドの出し方"></a>コマンドの出し方</h2><p>そもそもコマンドはどうやって出すかですが、<br>VSCode を開いて以下ショートカットキーで出てきます。</p><ul><li>Windows: Ctrl + Shift + P</li><li>Mac: Command + Shift + P</li></ul><p>あとは利用したいコマンドを検索して Enter を押せば実行できます。<br>(各コマンドに対してショートカットキーを割り振ることも可能です。)</p><h2 id="利用するコマンド"><a href="#利用するコマンド" class="headerlink" title="利用するコマンド"></a>利用するコマンド</h2><h3 id="1-Go-Restart-Language-Server"><a href="#1-Go-Restart-Language-Server" class="headerlink" title="1. Go: Restart Language Server"></a>1. Go: Restart Language Server</h3><img src="/images/20200707/photo_20200707_01.png"><p>gopls を再起動するコマンドです。<br>コードを実装していて、何かしらうまく動かない (おかしなエラーが出る、補完が効かなくなる、etc) 場合に即座に試します。 <strong>大体治ります</strong> 。</p><h3 id="2-Go-Generate-Unit-Tests-For-Function"><a href="#2-Go-Generate-Unit-Tests-For-Function" class="headerlink" title="2. Go: Generate Unit Tests For Function"></a>2. Go: Generate Unit Tests For Function</h3><img src="/images/20200707/photo_20200707_02.png"><p>カーソル直下の関数のテストコードを自動生成してくれます。<br>デフォルトで Table Driven Test の形で生成してくれるため、生成後はテストケースを追加するだけで Unit Test が書けてしまいます。</p><p>例えば以下の関数のテストを書きたいとなった場合に、コマンドを実行すると、</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このようなコードが生成されます。 TODO 以下にケースを随時追加すれば動作します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="keyword">int</span></span><br><span class="line">b <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">args args</span><br><span class="line">want <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add test cases.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> got := Add(tt.args.a, tt.args.b); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"Add() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Go-Generate-Interface-Stubs"><a href="#3-Go-Generate-Interface-Stubs" class="headerlink" title="3. Go: Generate Interface Stubs"></a>3. Go: Generate Interface Stubs</h3><img src="/images/20200707/photo_20200707_03.png"><p>特定の interface を実装するためのメソッドを自動生成してくれます。</p><p>例: <code>XXXReader</code> struct に io.Reader を実装したい</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> XXXReader <span class="keyword">struct</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>コマンドを入力すると、入力ダイアログが出てくるので以下を入力</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $&#123;レシーバの変数名&#125; $&#123;struct名&#125; $&#123;interface&#125;</span></span><br><span class="line">x XXXReader io.Reader</span><br></pre></td></tr></table></figure><p>すると以下のコードが生成されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> XXXReader <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x XXXReader)</span> <span class="title">Read</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"not implemented"</span>) <span class="comment">// <span class="doctag">TODO:</span> Implement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大量のメソッドを実装する必要があるケースでとても便利に使えます。</p><h3 id="4-Go-Fill-Struct"><a href="#4-Go-Fill-Struct" class="headerlink" title="4. Go: Fill Struct"></a>4. Go: Fill Struct</h3><img src="/images/20200707/photo_20200707_04.png"><p>カーソル下の struct を field を初期値で穴埋めする形で自動生成してくれます。</p><p>このような struct 定義がある場合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Hoge <span class="keyword">struct</span> &#123;</span><br><span class="line">A <span class="keyword">string</span></span><br><span class="line">B <span class="keyword">int</span></span><br><span class="line">C <span class="keyword">float64</span></span><br><span class="line">D *<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のように生成されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h := Hoge&#123;</span><br><span class="line">A: <span class="string">""</span>,</span><br><span class="line">B: <span class="number">0</span>,</span><br><span class="line">C: <span class="number">0.0</span>,</span><br><span class="line">D: <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>field 定義がたくさんあり、どれが必要かわからなくなった際に、<br>とりあえず全部生成して必要な field だけ残すことがよくあります。</p><h3 id="5-Go-Add-Tags-To-Struct-Fields"><a href="#5-Go-Add-Tags-To-Struct-Fields" class="headerlink" title="5. Go: Add Tags To Struct Fields"></a>5. Go: Add Tags To Struct Fields</h3><img src="/images/20200707/photo_20200707_05.png"><p>カーソル下の struct にタグを付与します。<br>struct 内にカーソル当てておく必要があります。<br>初期設定は、 json かつ omitempty で生成されます。 (設定で他のタグにできます。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Hoge <span class="keyword">struct</span> &#123;</span><br><span class="line">A <span class="keyword">string</span>  <span class="string">`json:"a,omitempty"`</span>  <span class="comment">// カッコ内にカーソルを当てる</span></span><br><span class="line">B <span class="keyword">int</span>     <span class="string">`json:"b,omitempty"`</span></span><br><span class="line">C <span class="keyword">float64</span> <span class="string">`json:"c,omitempty"`</span></span><br><span class="line">D *<span class="keyword">string</span> <span class="string">`json:"d,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Go-Test-Function-At-Cursor"><a href="#6-Go-Test-Function-At-Cursor" class="headerlink" title="6. Go: Test Function At Cursor"></a>6. Go: Test Function At Cursor</h3><img src="/images/20200707/photo_20200707_06.png"><p>カーソル下のテスト関数のみのテストを実行してくれます。<br>テストコードを修正して、すぐに試したいといったときに便利です。</p><h3 id="7-Go-Install-Update-Tools"><a href="#7-Go-Install-Update-Tools" class="headerlink" title="7. Go: Install/Update Tools"></a>7. Go: Install/Update Tools</h3><img src="/images/20200707/photo_20200707_07.png"><p>Go extension で利用している コマンドを install/update します。<br>extension をいれたタイミングで install は自動でされるため、 update したいときに使います。</p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>個人的にはとりあえず <code>1. Go: Restart Language Server</code> だけでも覚えればだいぶ開発体験上がると思います。<br>ぜひ利用して、開発効率を向上させてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIG DX チーム所属の多賀です。また Go についての記事を書きます。&lt;/p&gt;
&lt;p&gt;最近 Go 開発本体への加入が発表されるなど、盛り上がっている VSCode の Go extension ですが、私も基本は VSCode + Go extension を利用して開
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Zuora連載１：Zuora Central Platform概要</title>
    <link href="https://future-architect.github.io/articles/20200706/"/>
    <id>https://future-architect.github.io/articles/20200706/</id>
    <published>2020-07-06T00:01:37.000Z</published>
    <updated>2020-07-18T03:13:11.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Zuora Central Platform（Zuora社が提供するサブスクリプションプラットフォーム名。以降 <strong>Zuora</strong> と記載）を利用する機会があったため、ナレッジをまとめます。</p><p>サブスクリプションのプラン設計・プライシング設計などの販売戦略的な話は今回触れませんのでご了承ください。</p><p>続編が公開されました:</p><ul><li><a href="https://future-architect.github.io/articles/20200708/">Zuora連載2：Zuora REST API 利用と開発環境構築</a></li></ul><h1 id="サブスクリプションとは？"><a href="#サブスクリプションとは？" class="headerlink" title="サブスクリプションとは？"></a>サブスクリプションとは？</h1><p>サブスクリプション（略してサブスク）。様々なところで聞く言葉だと思います。直訳すると「購読」。ITの分野では「定期購読」として説明されることが多いです。</p><p>簡単に言うと「ある商品（モノ・コト・サービスなど）を、定期的に利用する契約を結んで提供する仕組み」です。今までと異なる売り方やサービスができ、バラ色の世界が待っているよという謳い文句もよく聞きます。しかしいざ自分たちでやろうとすると、何らかの専門的なプラットフォームサービスを利用することが必要な事が多いでしょう。</p><p>その中でも世界的にも有名な「Zuora」というサブスクプラットフォームをガッツリ使い倒す機会がありました。サブスクのプラットフォームとはどういうものか、利用者視点で解説します。</p><h1 id="Zuora-Central-Platformとは？"><a href="#Zuora-Central-Platformとは？" class="headerlink" title="Zuora Central Platformとは？"></a>Zuora Central Platformとは？</h1><p>Zuoraの<a href="https://jp.zuora.com/products/" target="_blank" rel="noopener">公式ページ</a>を見ると、 <strong>サブスクリプションのプラットフォーム</strong> と記載されています。</p><p>様々なガイドがありますが、私は当初、以下の3点を理解するまでイニシャルコストを掛けたので、この点を中心にまとめます。</p><ol><li>何ができるのか<ul><li>1-1. オブジェクトモデル</li><li>1-2. 画面</li></ul></li><li>Zuoraを利用したシステム構築では、何を行えばよいのか？</li><li>システムが受ける制約事項</li></ol><h1 id="1-1-何ができるか（オブジェクトモデル）"><a href="#1-1-何ができるか（オブジェクトモデル）" class="headerlink" title="1-1. 何ができるか（オブジェクトモデル）"></a>1-1. 何ができるか（オブジェクトモデル）</h1><ul><li>サブスクリプションで扱う商品を管理できます</li><li>サブスクリプションで扱う商品のプラン・価格を管理できます</li><li>サブスクリプションを買う人を管理できます</li><li>サブスクリプションの購入方法（銀行払い・クレジット払いなど）を管理できます</li><li>サブスクリプションの請求・消込管理ができます</li></ul><p>システムを考える場合、オブジェクトモデルをみると機能の見当が付きやすいように思うので、以下にポイントをまとめます。<br><a href="https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Zuora_Business_Objects_Relationship" target="_blank" rel="noopener">zuora business object model（公式より転載）</a></p><img src="/images/20200706/zuora_erd.png"><h3 id="商品-Product"><a href="#商品-Product" class="headerlink" title="商品(Product)"></a>商品(Product)</h3><p>商品(Product)が複数のプラン(Product Rate Plan)を持ち、プラン(Product Rate Plan)が複数の料金(Product Rate Plan Charge)を持つことができます（例えば、プランに初期費用を持つ場合、料金が別れます）。<br>一番下のTier(Product Rate Plan Charge Tier)は料金が階段状のTireになる場合に利用されます。</p><img src="/images/20200706/product.png" class="img-small-size"><h3 id="顧客（Account）"><a href="#顧客（Account）" class="headerlink" title="顧客（Account）"></a>顧客（Account）</h3><p>顧客(Account)は複数の契約（subscription）を持つことができます。顧客(Account)は複数の請求方法（Payment method）を管理することができます。請求（invoice）は顧客(Account)に紐づきます。</p><img src="/images/20200706/account.png"><h3 id="契約-Subscription"><a href="#契約-Subscription" class="headerlink" title="契約(Subscription)"></a>契約(Subscription)</h3><p>契約(Subscription)は商品(Product)が持つプラン(Product Rate Plan)をコピーして作られます。したがって、商品(Product)を変更しても契約済みのサブスクリプションは影響を受けません。</p><img src="/images/20200706/subscription.png"><h1 id="1-2-何ができるか？（画面）"><a href="#1-2-何ができるか？（画面）" class="headerlink" title="1-2. 何ができるか？（画面）"></a>1-2. 何ができるか？（画面）</h1><p>オブジェクトと合わせてみるとわかりやすいのではないでしょうか？<br>※画面は正式に契約したときに見えるものと異なる場合があります。</p><img src="/images/20200706/photo_20200706_01.png"><h3 id="顧客"><a href="#顧客" class="headerlink" title="顧客"></a>顧客</h3><p>サブスクリプションを契約する顧客、顧客の請求先住所、請求方法を管理できます。また、顧客が契約するサブスクリプションもここから作成します。</p><h3 id="プロダクト"><a href="#プロダクト" class="headerlink" title="プロダクト"></a>プロダクト</h3><p>サブスクリプションで購入可能なプロダクトを定義します。ここでデータモデルのプロダクト・プラン・チャージ（ティア）の定義を作成します。</p><h3 id="請求"><a href="#請求" class="headerlink" title="請求"></a>請求</h3><p>請求情報（明細含む）の作成と請求情報作制の実行タイミングを制御可能です。従量など、使用量が金額に反映されるプランを用意している場合、「使用量（※）」のメニューから確認できます。</p><p>※使用量はAPI・FileなどでZuoraに登録する必要があります。</p><h3 id="回収"><a href="#回収" class="headerlink" title="回収"></a>回収</h3><p>請求に対しての回収業務になります。クレジット会社・銀行との接続も含めて請求の消込まで可能（※）です。</p><p>※全てのパターンは網羅できていないので、利用時はZuoraさんに確認してください。</p><h3 id="ファイナンス-レポート"><a href="#ファイナンス-レポート" class="headerlink" title="ファイナンス/レポート"></a>ファイナンス/レポート</h3><p>冒頭に記載しましたとおり、ここは今回あまり深く触れることができていない部分になります。<br>詳細は公式ページを御覧ください。</p><ul><li><a href="https://jp.zuora.com/products/finance/" target="_blank" rel="noopener">https://jp.zuora.com/products/finance/</a></li><li><a href="https://knowledgecenter.zuora.com/Billing/Reporting_and_Analytics" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Billing/Reporting_and_Analytics</a></li></ul><h3 id="マーケットプレイス"><a href="#マーケットプレイス" class="headerlink" title="マーケットプレイス"></a>マーケットプレイス</h3><p>Salesforceとの接続機能（顧客情報はSaleforceとも連携可能です）や、インテグレーション用の機能（Workflow）など、Zuoraに機能を追加する場合に利用します。</p><h3 id="プラットフォーム"><a href="#プラットフォーム" class="headerlink" title="プラットフォーム"></a>プラットフォーム</h3><p>インテグレーション用の機能が提供されています。<br>次章参照ください</p><h1 id="②Zuoraを利用したシステム構築では、何を行えばよいのか？"><a href="#②Zuoraを利用したシステム構築では、何を行えばよいのか？" class="headerlink" title="②Zuoraを利用したシステム構築では、何を行えばよいのか？"></a>②Zuoraを利用したシステム構築では、何を行えばよいのか？</h1><p>Zuoraを利用する場合、サブスクリプションの情報をZuoraと通信することになります。この通信部分を実装する場合、以下の機能に触れる必要があります。おそらく、これらの機能を抑えることで、構築されるシステムとのつなぎ込みを実現できるでしょう。</p><ul><li><strong>Data Model</strong>: Zuoraが持つオブジェクトを拡張できまず（新しいオブジェクトを作ることも、Fieldを追加することも両方可能です/制約あり）  <ul><li><a href="https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Zuora_Business_Objects_Relationship" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Zuora_Business_Objects_Relationship</a>  </li></ul></li><li><strong>Events</strong>: Zuora上のオブジェクト変更をEventとして管理できます。直下の通知機能と合わせて使います  </li><li><strong>Notifications</strong>: EventをTriggerに外部APIのコール・Workflowのコール・メール通知行うことができます。</li><li><strong>Workflow</strong>: Zuoraのリソース変更に合わせて各種処理が実行できるで、Zuoraと接続したシステムを構築する場合、必ず触る機能です。タスクの定義と、それを繋げたフローを作ることで、基本機能が持たない作り込みを可能とします。<ul><li><a href="https://jp.zuora.com/products/developer-platform/workflow/" target="_blank" rel="noopener">https://jp.zuora.com/products/developer-platform/workflow/</a>  </li></ul></li><li><strong>Data Query</strong>: Zuoraのオブジェクトに対してQuery（API可能）でデータを参照する機能です  <ul><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Query/Data_Query" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Central_Platform/Query/Data_Query</a>  </li></ul></li><li><strong>Settings API</strong>: データの登録参照を実行するためAPI群です  <ul><li><a href="https://knowledgecenter.zuora.com/Central_Platform/API" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Central_Platform/API</a></li></ul></li></ul><h1 id="③システムが受ける制約事項"><a href="#③システムが受ける制約事項" class="headerlink" title="③システムが受ける制約事項"></a>③システムが受ける制約事項</h1><p>Zuoraを含むシステム構築を実施しましたが、以下がシステム制約になると感想を持ちました。</p><ul><li>サブスクリプション商材のマスタをZuoraに持つ必要がある</li><li>サブスクリプション情報をZuoraに持つ必要がある（当然ですね…）</li><li>顧客情報をZuoraに持つ必要がある</li><li>請求・消込まで行う場合、Zuoraでこれらの管理を行う必要があり</li><li>Zuoraが標準で用意する入力チェック・機能制約は少々ゆるいため、業務 or システムで吸収する必要がある</li></ul><p>仮に、契約日に業務上の制約を付ける場合以下の対応が必要になります。 </p><ul><li><strong>Zuoraが持つ標準画面で入力</strong>: 手動入力の運用で回避する  </li><li><strong>外部システムで入力チェックを実現する</strong>: 要件に応じた入力チェックを外部システムで実現する  </li></ul><img src="/images/20200706/photo_20200706_02.png"><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>少しでもZuoraの使用感が伝われば幸いです</p><p>より構築の目線で、API・Workflowなどの紹介は次回以降にバトンを渡します。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;Zuora Central Platform（Zuora社が提供するサブスクリプションプラットフォーム名。以降 &lt;stron
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Zuora" scheme="https://future-architect.github.io/tags/Zuora/"/>
    
      <category term="SaaS" scheme="https://future-architect.github.io/tags/SaaS/"/>
    
      <category term="サブスクリプション" scheme="https://future-architect.github.io/tags/%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>スケーラブルデータベース ～クラウドにおける後悔しないデータベース選定～</title>
    <link href="https://future-architect.github.io/articles/20200703/"/>
    <id>https://future-architect.github.io/articles/20200703/</id>
    <published>2020-07-03T01:34:11.000Z</published>
    <updated>2020-07-17T01:50:25.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>エンタープライズでのミッションクリティカル領域においてもクラウド利用が普通になってきています。</p><p>その過程において今までできないことを指向する試みも行われてきています。その代表的なものがクラウドの備えるリソースの高い拡張性と弾力性を利用したシステム展開です。例えば「より多くのデータを扱う」「同業他社に向けたサービス展開をする（マルチテナンシー）」といったものがあります。その際のアーキテクチャ選定では将来の利用を想定した選択を行う必要がありますが、データベースのスケールというのは非常に難しく簡単ではありません。</p><p>各種の要件に応じてデータベースを選定するということは多く行われていますが、その中で一番考え方が難しい<strong>スケーラビリティにどう立ち向かうか</strong>について記載していきます。データベースについては全ての要件を満たせる「万能」なアーキテクチャが存在しないのが実情です。そのためスケーラビリティを確保するための工夫とアーキテクチャを決定するロジックが必要となります。</p><p>大事なのは、データベースのアーキテクチャだけではなく、データ特性（データモデル）の2つの目線で考えるということです。どちらかだけに偏ると、システム要件は実現できたとしてもTCOの増大を招くことになりその選択を後悔することになります。</p><h1 id="データベースとしてのスケーラビリティ"><a href="#データベースとしてのスケーラビリティ" class="headerlink" title="データベースとしてのスケーラビリティ"></a>データベースとしてのスケーラビリティ</h1><p>データ―ベースに求められる要件は当然利用方法により異なりますが、大きく分けて２種類ありそれぞれ重視されるポイントが異なります。</p><table><thead><tr><th align="left">#</th><th align="left">用途</th><th align="left">特徴</th><th align="left">重視されるポイント</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">トランザクション型</td><td align="left">オペレーション用途に利用されてデータの記録と作成が行われる</td><td align="left">応答性能(レスポンス）重視</td></tr><tr><td align="left">2</td><td align="left">アナリティック型</td><td align="left">データ分析用途に利用されてデータの参照に利用される</td><td align="left">単位時間処理(スループット)重視</td></tr></tbody></table><p>この2つのタイプは重視されるポイントが異なることからスケーラビリティの確保の考え方が異なっています。</p><p>(2)アナリティック型についてはスケーラビリティの考え方は非常にシンプルで、「分散処理をする」という一択です。すなわちデータを細かい単位に分割してそれぞれの分割単位で処理を並列に実行するという考え方です。その実現にはRDBをベースとしたものとHDFS(Hadoop)をベースとしたものがあり、クラウドサービスで考えたときには代表的なものとして以下があげられます。</p><table><thead><tr><th align="left">#</th><th align="left">クラウドサービス</th><th align="left">RDB型プロダクト</th><th align="left">HDFS型プロダクト</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AWS</td><td align="left">Redshift</td><td align="left">Amazon EMR</td></tr><tr><td align="left">2</td><td align="left">Azure</td><td align="left">SQL Datawarehouse</td><td align="left">HDInsight</td></tr><tr><td align="left">3</td><td align="left">GCP</td><td align="left">BigQuery</td><td align="left">Google Cloud Dataproc</td></tr><tr><td align="left">4</td><td align="left">AWS/Azure/GCP</td><td align="left">Snowflake</td><td align="left">-</td></tr></tbody></table><p>こちらについてもテーマとしては面白いのですが、スケーラビリティという点では大きな違いはないため、別の機会に譲ります。</p><p>今回のテーマとしたいのが「トランザクション型データベース」におけるスケーラビリティです。<br>これについて検討する上で、「トランザクションとは」という点の正しい理解が必要となります。</p><h1 id="トランザクションとスケーラビリティ"><a href="#トランザクションとスケーラビリティ" class="headerlink" title="トランザクションとスケーラビリティ"></a>トランザクションとスケーラビリティ</h1><p>トランザクション(transaction)は文字通り「trans + action」であり、複数のデータの読み書きを論理的な単位でまとめて扱うことがその定義となります。ここであらためてトランザクションを扱うシステムのもつ概念(ACID特性)について記載します。</p><table><thead><tr><th align="left">ACID</th><th align="left">説明</th><th align="left">実現するための機能</th></tr></thead><tbody><tr><td align="left">Atomicity 原子性</td><td align="left">トランザクションは完全に実行されるか、実行されないかのどちらかであること</td><td align="left">コミット機能</td></tr><tr><td align="left">Consistency 一貫性</td><td align="left">あらかじめ定められた整合性を満たすことを保証すること</td><td align="left">アプリケーションで実現</td></tr><tr><td align="left">Isolation 独立性</td><td align="left">トランザクションを同時に実行しても他のトランザクションには影響を受けない（受けないことを保証する）こと</td><td align="left">排他制御/トランザクション分離レベル</td></tr><tr><td align="left">Durability 耐久性</td><td align="left">トランザクションの結果は永続化されること</td><td align="left">トランザクションログ</td></tr></tbody></table><p>一貫性(Consisteny)は、データが矛盾なく記録されていることを意味しますので「データベース」として実現するものではなく、「データベースを利用するシステム」により実現することとなります。つまりアプリケーションにて実現するものとなります。</p><p>独立性(Isolation)は非常に重要な概念ではあるのですが、一般的には以下のように考えられています。</p><ul><li>どのレベルで実現するかというものを<a href="https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E5%88%86%E9%9B%A2%E3%83%AC%E3%83%99%E3%83%AB" target="_blank" rel="noopener">トランザクション分離レベル</a>として4段階で定義されており、独立性と性能とトレードオフになることからシステム要件に合わせて使い分けることをおこなう。</li><li>広く使われる分離レベル（Read committed)は、低い独立性レベルであり、ファントムリード・非再現リードというデータ一矛盾が発生する可能性があるが性能面の影響は比較的少なく、アプリケーションの実装手段の工夫により回避することや許容可能である。</li><li>実装手段の工夫とは、トランザクションでの排他ロックの利用、更新する際に他トランザクションでの更新があったかの値チェック(compare and set操作、楽観的ロックとも言う)などがある。</li></ul><p>このことから、データベースのスケーラビリティを考えるうえでの本質的な要素は原子性(Atomicity)と耐久性(Durability)であると言えます。（あくまでもスケーラビリティを考えるうえでの話です！）さらに、原子性と耐久性は「トランザクションログ」により確保されるのが一般的です。</p><p>正しく理解するために<a href="https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%AD%E3%82%B0" target="_blank" rel="noopener">トランザクションログ</a>の説明をwikiより転記すると以下です。</p><blockquote><p>計算機科学のデータベースの分野において、トランザクションログ（英: transaction log）（または データベースログ, バイナリログ とも呼ばれる）とは、クラッシュやハードウェア故障があったとしてもデータベース管理システムのACID特性を保障するための操作履歴を指す。ログは電源が途絶えてもデータを保持できる補助記憶装置上のファイルに出力される場合が多い。</p><p>データベースが起動後に、整合性の無い状態であるか、正常に終了されていないことを検知すると、<br>データベース管理システムはトランザクションログを読み取り、以下の操作を行う。どちらも原子性と永続性を保障するために必要である。</p><p>完了していない または ロールバックされたトランザクションが行った操作を取り消す。<br>コミットしているが、データベースには反映されていない操作を再実行する。</p></blockquote><p>トランザクションログとは、耐久性を確保するための仕組みだがデータベースに障害が発生した場合には原子性の確保するために利用されるものであることになります。データベースは正常時には揮発性メモリ（キャシュ）内で行われるが、操作履歴となるトラクションログが必ず不揮発性領域に（通常はファイル）保存されることになります。裏を返すとトランザクションログが作成されないとデータの更新はできないことになります。</p><p>そのため、トランザクションログの保存がデータベースのスケーラビリティを決定する決定的な要素となります。</p><p>トランザクションログは製品ごとに名称は異なりますが概念としては同一のものとなります。</p><table><thead><tr><th align="left">タイプ</th><th align="left">プロダクト</th><th align="left">ログ名称</th></tr></thead><tbody><tr><td align="left">RDB</td><td align="left">Oracle</td><td align="left">REDOログ</td></tr><tr><td align="left">RDB</td><td align="left">PostgreSQL</td><td align="left">WALログ</td></tr><tr><td align="left">RDB</td><td align="left">MySQL</td><td align="left">Binログ</td></tr><tr><td align="left">RDB</td><td align="left">SQL Server</td><td align="left">トランザクションログ</td></tr><tr><td align="left">KVS</td><td align="left">Cassandra</td><td align="left">コミットログ</td></tr><tr><td align="left">KVS</td><td align="left">HBase</td><td align="left">WALログ</td></tr><tr><td align="left">KVS</td><td align="left">クラウドサービスKVS(Dynamo DB@AWS/Cosmos DB@Azure/Big table@GCP)</td><td align="left">？</td></tr></tbody></table><p>クラウドサービスKVSについては明確な説明がないため？としています。Dynamo DBではかつてはトランザクションのサポートはされておらず、「データの更新は一つのキー単位に限定したうえで、レプリケーションとクオラムの概念により耐久性を保証するが、すべてのレプリカにデータが必ず保存されるとは限らない」という結果整合性が提供されていました。（参考：<a href="https://gist.github.com/matope/2657692" target="_blank" rel="noopener">Dynamo: Amazonの高可用性Key-value Store[和訳]</a>）つまり複数データの原子性(Atomicity)は提供されてません（クライアント側で対応（冪等性実装）を行う必要がある）。そのためトランザクションログという概念もなかったはずです。</p><p>2019年にトランザクションサポートが提供されました。（参考：<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/transaction-apis.html" target="_blank" rel="noopener">Amazon DynamoDB トランザクション: 仕組み</a>）これは非常にインパクトのある機能向上でした。この機能の利用にあたってはトランザクションログの概念が組み込まれたと推測されますが、トランザクションログの実装がパフォーマンスに与える影響を極小化するために最大25項目以内であるという制約が設定されています。トランザクションログがスケーラビリティ決定する要素であることには変わりありません。</p><h1 id="トランザクション型データベースのアーキテクチャ"><a href="#トランザクション型データベースのアーキテクチャ" class="headerlink" title="トランザクション型データベースのアーキテクチャ"></a>トランザクション型データベースのアーキテクチャ</h1><p>ここでエンタープライズ用途という条件における、クラウド環境でのトランザクション型データベースアーキテクチャとスケーラブル構成について一度整理しておきます。網羅感は乏しくいろいろ指摘を受けそうですが「実質的」な意味ではこの選択肢に限定されるはずです。</p><table><thead><tr><th align="left">#</th><th align="left">データ構造</th><th align="left">スケーラブル構成</th><th align="left">クラウドサービス</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Key-Value型</td><td align="left">可能</td><td align="left">DynamoDB(AWS), CosmosDB(Azure), BigTable/Cloud Spanner(GCP) ※1</td></tr><tr><td align="left">2</td><td align="left">Relational型</td><td align="left">制限的で可能</td><td align="left">Relational Database Service(AWS/Azure/GCP/Oracle Cloud)</td></tr><tr><td align="left">3</td><td align="left">Relational型</td><td align="left">可能</td><td align="left">Oracle-RAC (Oracle Cloud)</td></tr></tbody></table><p>(※1)SpannerはRelation型が自然かと思いますが、本記事ではコアアーキテクチャに注目するためKVSと分類しました</p><p>今回のテーマのスケーラブルデータベースですが、冒頭「全ての要件を満たせる「万能」なアーキテクチャが存在しない」ということを書きましたが、Oracle RACは例外といってもいいかもしれません。しかしながら、</p><ul><li>コスト削減圧力は依然として高く、ソフトウェアのライセンス費用はできるだけ抑えたい。</li><li>機能的に不足している部分はアプリケーションの工夫で対応するほうがリーズナブル。</li><li>クラウド環境を固定化するのは避けたい（いざとなれば他へ移すことも容易であるという選択をしたい）</li></ul><p>ということもあり、今回は(1)(2)に特化して議論を進めます。</p><p>今回の内容はあくまでも「手段」の話をしています。決して「目的」としてはいけないというのは言うまでもありません。</p><h2 id="Key-Value型とRelational型の選択"><a href="#Key-Value型とRelational型の選択" class="headerlink" title="Key Value型とRelational型の選択"></a>Key Value型とRelational型の選択</h2><p>このテーマは深みのあるテーマではあるのですが、「できる・できない」という技術や手法ではなく、扱うデータモデル（データ種）のデータ管理面で考察してみます。</p><p>「データモデル」とは物理的なテーブルではなく、情報のまとまり（エンティティ）を抽出したもので以下の原則に従います。</p><ul><li>データの整合性を保つために正規化（通常は第三正規化）設計を行うのが原則です</li><li>物理設計（いわゆるテーブル設計）に落とし込む際に、あえてそれを崩す非正規化の手法を行う場合があります</li></ul><p>次の表の中で非正規化とあるのは、あえて正規化を崩していることを意味していますので、データの整合性を保つための施策を実装時におこなう必要があることを意味しています。なおこの表はパフォーマンスという点の評価はしていません。</p><img src="/images/20200703/photo_20200703_01.png"><p>ここで言えるのは、<strong>Key-Value型は扱うデータモデルを選び、実装面の工夫が必要であるのに対して、Relational型はデータモデルとしての制約はない</strong>ということです。このことから以下のことが言えます。</p><p>(1) この表でFitするデータ種を主体に扱う場合にKey-Value型を選択する。<br>(2) エンタープライズ領域では、データ種や業務オペレーションは多種多様なことから一般的にはRelational型が選ばれることが多い。<br>(3) 特にスケーラビリティが求められる場合に、Relational型を基本としたうえで何らかの施策が必要。</p><p>ここで、(1)の選択はデータベースの特徴を踏まえて選択することから容易です。難しいのは(2)と(3)の判断となります。(2)で実装するのであればシンプルでもあり実装コストも非常に読みやすいのですが、(3)を選択した場合には実装コストにも大きく影響します。すなわち実現しようとしているシステムにおいて(2)でどこまでの範囲を実現できるのかがポイントになるのです。さらに、(2)では実現できない場合に(3)の選択をとる必要があるがどのようなアーキテクチャにすればよいのか。</p><h2 id="データモデルの観点からシステムの特徴をつかむ"><a href="#データモデルの観点からシステムの特徴をつかむ" class="headerlink" title="データモデルの観点からシステムの特徴をつかむ"></a>データモデルの観点からシステムの特徴をつかむ</h2><p>まず自分たちが取り組もうとしているシステムについての特徴をつかむ必要があります。今行わなくてはいけないのはデータベースのスケーラビリティの判断ですが、やみくもに性能指標値(TPS:秒間トランザクション数、QPS:秒間クエリー実行件数）を求めるのではなく、データモデルを中心として考える必要があります。</p><p>下の図では「小売業での在庫管理」を示す例となります（まったくの架空のデータです）。ECも展開していることからEC受注処理も入っています。主なオペレーションがどのエンティティにアクセスするのかのCRUD情報を示しています。アーキテクチャを検討する際に具体的なアプリケーションの設計は完了していないのが普通ですが、その企業の業務規模は見えているのが普通ですがからこの程度の情報は収集することは可能でしょう。</p><p>もちろんシステムにはこのほかにも多様な業務処理が存在し、エンティティも無数に存在しますが、主要なエンティティという視点で見渡すと意外にシンプルな形になります。データを中心に業務が動いているということを改めて感じるはずです。</p><img src="/images/20200703/photo_20200703_02.png"><img src="/images/20200703/photo_20200703_03.png"><p>この例では次のことが言えます。</p><ul><li>参照は主に在庫データについて行われており、約200QPSである。</li><li>更新は主に在庫データについて行われており、約100TPSである。</li></ul><p>経験上、この例のように「在庫エンティティ」といった<strong>高頻度に更新されるリソース系エンティティが存在する場合、データベースのスケーラビリティに悩むことが多い</strong>と感じます。</p><p>次に、データ参照とデータ更新についてそれぞれ確認していきます。</p><h2 id="データ参照のスケーラビリティ"><a href="#データ参照のスケーラビリティ" class="headerlink" title="データ参照のスケーラビリティ"></a>データ参照のスケーラビリティ</h2><p>これについては従来から対応方法は明確にあります。DBのレプリケーション技術を用いて別のインスタンスからデータを参照するという方法でMySQLやPostgreSQLでサポートされています。クラウドベンダの提供するRelational Database Serviceでは比較的容易に実現可能です。</p><ol><li>MySQLによReadonly用レプリケーション構成例<br><a href="https://dev.mysql.com/doc/refman/5.7/en/replication-solutions-scaleout.html" target="_blank" rel="noopener">Using Replication for Scale-Out</a><img src="/images/20200703/photo_20200703_04.png"></li></ol><p>2.Amazon AuroraでのReadonly用レプリケーション構成例<br><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/Aurora.Overview.html" target="_blank" rel="noopener">Amazon Aurora DB クラスター</a><br><img src="/images/20200703/photo_20200703_05.png"></p><p>ここで紹介したように、<strong>データ参照(ReadOnly)についてのスケーラビリティという点については解決策があり、アーキテクチャとしての課題はないと考えてもよいでしょう。</strong>もちろん実装にあたっては十分な検討が必要です。</p><h2 id="データ更新のスケーラビリティの判断"><a href="#データ更新のスケーラビリティの判断" class="headerlink" title="データ更新のスケーラビリティの判断"></a>データ更新のスケーラビリティの判断</h2><p>ここが本記事の一番のポイントになるところです。レプリケーションによりデータ参照のスケーラビリティの確保は可能ですが、あくまでもデータ更新可能なデータベースインスタンスは一つです。そのため、そもそもそのデータベースでどのぐらいのトランザクション処理が可能なのかを把握しないことには次の検討ができません。</p><p>これについてはやってみるしかない。という答えになってしまうのですが、それでは、何をやれば把握できるのでしょうか。</p><p>これまでに、<strong>トランザクションログの保存がデータベースのスケーラビリティを決定する決定的な要素となる</strong>ということをすでに述べています。そうであるのであればこのトランザクションログに依存する性能が何によって決定するのかということを考えると決定できます。すなわち以下となります。</p><ul><li>トランザクションログの書き込まれるタイミングはcommitタイミングである。</li><li>ランザクションログの 書き込まれる量は更新データのサイズに依存する。</li></ul><p>これを先ほどの在庫管理システムに当てはめて考えてると以下のようになります。</p><img src="/images/20200703/photo_20200703_06.png"><p>約100TPS発生して、データ更新(insert/update)が約1500レコード発生しています。</p><p>このほか多数の業務が実施されているわけですし厳密に求めることは意味がありません。あくまでも傾向分析をしたいのでこの程度の情報で十分です。</p><p>この要件を実現できるかを実際にサンプルプログラムを作成して試してみます。その際に１レコード当たりのレコードサイズも重要な要素となるためこの値は現実的な数値で代表させるのが良いでしょう。また、updateとinsertではトランザクションログの発生量も変化するためにより負荷の高まるupdateに統一して試してもよいでしょう。このあたりは柔軟に考えればよいでしょう。ここでは100TPS発生してその際に15レコード更新されると仮定してみます。</p><p>得られたテスト結果が以下です。「records」はトランザクションあたりの更新レコード数を示します。（このテスト結果はテストシナリオにおけるあくまでもサンプルです）</p><img src="/images/20200703/photo_20200703_07.png"><img src="/images/20200703/photo_20200703_08.png"><p>この結果から、AWS Aurora (PostgreSQL)で今回の要件を実現する場合には、r4.8xlargeを利用した場合において実現性はありそうということが推測できます。</p><p>ただ、テストは単純化していますので実際のアプリケーション実装時の余裕率や将来のビジネスの伸びを考えるとやや心もとない感じがします。またさらに上のインスタンスクラスのr4.16xlargeでテストすることでTPSは向上する可能性はありますが、コストも２倍となることから費用面から積極的に選択することが難しそうです。</p><p>そのためこのような要件がある場合は、１つのデータベースインスタンスでの実現はリスクがあると判断し、よりスケールするための施策を模索することに舵を切ることことになります。反対にこの調査を行った結果、十分に余裕があるということであればスケーラビリティは十分確保されているということが言い切れます。</p><h2 id="Relational型データベースのスケーラブル構成"><a href="#Relational型データベースのスケーラブル構成" class="headerlink" title="Relational型データベースのスケーラブル構成"></a>Relational型データベースのスケーラブル構成</h2><p>一つのデータベースで扱うトランザクションに限界があるということですから、データベースを増やせばよいということになります。すなわちスケーラブルな構成とは扱うデータを分割して管理することになります。</p><p>その方法は以下の３つです。<br>(1)業務分割パターン<br>(2)論理分割パターン<br>(3)データ分割パターン</p><img src="/images/20200703/photo_20200703_09.png"><p>どのパターンを選択すべきかは、要件によって変わるため答えは一つではありません。</p><p>経験上ですが、</p><ul><li>エンティティをまたがるオペレーションが多く、トランザクション管理を実装するコストを考えると実現が厳しい</li><li>業務的はある一定の論理単位（例えば店舗）で行われることが多い</li></ul><p>という観点で(2)を選択する場面が多いような気がします。（この時、十分に議論をしたうえで決定するのが重要です）</p><p>また、業務規模が大きくエンティティも複雑で、保守性をより強固に持ちたい場合には、マイクロサービス指向に合致している(1)が選択されるでしょう。</p><h2 id="Relational型データベースのデータ保持"><a href="#Relational型データベースのデータ保持" class="headerlink" title="Relational型データベースのデータ保持"></a>Relational型データベースのデータ保持</h2><p>スケーラブルな構成とするためには実際のデータをどのように保持するのかについても検討する必要があります。データ保持形態によってスケーラビリティに制約が出ると本末転倒となるのでここまでの検討は事前に行う必要があります。</p><p>先ほどの例の「論理分割パターン」において、店舗(=店コード)で分割した場合を考えます。同一データベースにある各店舗のデータをどのようにテーブル保持するのかがポイントです。</p><p>この部分の検討は、データベースソフトウェアに深く依存することになりますので、事前の調査はしておく必要があります。以下の図はPostgreSQLをベースとした検討例です。</p><img src="/images/20200703/photo_20200703_10.png"><p>PostgreSQLのパーティションの特性についてここで詳細は記載しませんが制約事項について理解する必要があります。理屈上は正しいが、実装してみると正しくスケールしないということもあるため確認したほうが良いでしょう。以下に参考リンクを載せておきます。</p><ul><li><a href="https://future-architect.github.io/articles/20181019/">PostgreSQLパーティションプルーニングの動作を確認する</a></li><li><a href="http://www.intellilink.co.jp/article/column/oss-postgres11_02.html" target="_blank" rel="noopener">PostgreSQL11でのテーブル・パーティショニング機能の改善</a></li><li><a href="https://www.2ndquadrant.com/en/blog/postgresql-12-partitioning/" target="_blank" rel="noopener">PostgreSQL 12: Partitioning is now faster</a></li></ul><p>(3)のスキーマ分割はデータの論理分割パターンにおける究極の形です。テーブル管理が手間が非常となりますが、わかりやすさと運用での安定性から意外と悪くない方法だと考えています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>だいぶ長くなりましたので、最後にこれまに検討してきた内容をまとめてみます。</p><ul><li>データベースのスケーラビリティにはトランザクションログが決定的な影響を与えることについて解説しました。</li><li>実現にあたって、Key-Value型とRelational型の選択の考え方について解説をしています。実際の場面としてRelational型を基本として検討することが多いが、実現にあたっては通常の方法でできるのか、特別な施策が必要なのかという範囲の見極めについて議論しました</li><li>スケーラビリティの検討にあたっては、まずはデータモデルという視点で検討を行い、スケーラブル構成をとるべき判断ポイントについての例をあげました。</li><li>Relational型のデータベースの構成例とテーブル実装方法について検討しました。</li></ul><p>ここまでの流れを一通り理解することにより<strong>「何となく決める」ではなく「根拠をもって決める」ということが可能になるはずです。</strong>後悔しない（←これ大事です。つまり無理をした実装はTCOの増大を招くことになります）スケーラブルデータベース構成を自信をもって決定することができるでしょう。</p><p>今回はトランザクション型データベースということで触れなかったアナリティック型データベースについての考察はいずれまた記載してみます。</p><p>おわり。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事:"></a>関連記事:</h1><ul><li><a href="https://future-architect.github.io/articles/20161031/">SQL実行時のブルームフィルタ(Bloom Filter)アルゴリズム</a></li><li><a href="https://future-architect.github.io/articles/20190718/">― 脱RDB脳 ― Cassandraのデータモデルについて考えてみる</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;エンタープライズでのミッションクリティカル領域においてもクラウド利用が普通になってきています。&lt;/p&gt;
&lt;p&gt;その過程におい
      
    
    </summary>
    
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
      <category term="KVS" scheme="https://future-architect.github.io/tags/KVS/"/>
    
      <category term="RDB" scheme="https://future-architect.github.io/tags/RDB/"/>
    
  </entry>
  
  <entry>
    <title>Auth0の設定をバージョン管理し、Auth0 Deploy CLIを利用してデプロイ環境を整える</title>
    <link href="https://future-architect.github.io/articles/20200702/"/>
    <id>https://future-architect.github.io/articles/20200702/</id>
    <published>2020-07-02T00:48:34.000Z</published>
    <updated>2020-07-17T01:50:25.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニットの市川です。</p><p>私が所属しているプロジェクトでは認証認可基盤としてAuth0を使用しています。検証段階や初期構築段階では各種設定をダッシュボードから操作することが多いと思いますが、実際に本番運用を行っていると、Auth0の設定やRulesのスクリプトをGit管理し、変更履歴を追えるようにしたいというケースが出てくるかと思います。</p><p>今回は、Auth0から提供されている<a href="https://auth0.com/docs/extensions/deploy-cli" target="_blank" rel="noopener">Auth0 Deploy CLI</a>という拡張機能を利用して、Auth0テナントの設定をエクスポートする方法と私のプロジェクトで実際に行っているAuth0テナントへのデプロイの方法をお伝えします。</p><p>最終的なイメージは下記の通りです。</p><img src="/images/20200702/photo_20200702_01.png"><h1 id="1-実行環境"><a href="#1-実行環境" class="headerlink" title="1. 実行環境"></a>1. 実行環境</h1><p>今回の記事の作成で使用した実行環境は以下の通りです。</p><p><a href="https://www.npmjs.com/package/npm" target="_blank" rel="noopener">npm</a>：6.14.5<br><a href="https://www.npmjs.com/package/auth0-deploy-cli" target="_blank" rel="noopener">auth0-deploy-cli</a>：5.0.0</p><h1 id="2-Auth0-Deploy-CLIとは"><a href="#2-Auth0-Deploy-CLIとは" class="headerlink" title="2. Auth0 Deploy CLIとは"></a>2. Auth0 Deploy CLIとは</h1><p>Auth0 Deploy CLIとはAuth0で提供されている拡張機能です。<br>これを利用するとAuth0テナントの設定情報をエクスポートできることに加え、テナントの設定情報を記載したファイルを、各Auth0テナントへ反映できます。<br>よって、この拡張機能をCI/CDに組み込み、そこからデプロイを行うことも可能です。</p><h1 id="3-既存環境のエクスポート"><a href="#3-既存環境のエクスポート" class="headerlink" title="3. 既存環境のエクスポート"></a>3. 既存環境のエクスポート</h1><p>では早速既存環境のエクスポートから行っていきます。</p><h2 id="3-1-Auth0-Deploy-CLIで使用するアプリケーションを各テナントに作成する"><a href="#3-1-Auth0-Deploy-CLIで使用するアプリケーションを各テナントに作成する" class="headerlink" title="3-1. Auth0 Deploy CLIで使用するアプリケーションを各テナントに作成する"></a>3-1. Auth0 Deploy CLIで使用するアプリケーションを各テナントに作成する</h2><p>Auth0テナントにAuth0 Deploy CLIで使用するアプリケーションを作成します。<br>（各環境ごとにAuth0テナントを作成している場合は、それぞれのテナントごとにApplicationを作成する必要があります）</p><p>Application Type はM2M(Machine to Machine Applications)を指定します。</p><img src="/images/20200702/photo_20200702_02.png"><p>使用するAPIはAuth0 Management APIを選択し、auth0-deploy-cliを使用するに当たり必要となるSCOPEを設定します。</p><p>必要となるSCOPEは下記をご確認ください。</p><p><a href="https://auth0.com/docs/extensions/deploy-cli/guides/create-deploy-cli-application-manually#required-scopes" target="_blank" rel="noopener">Required Scopes - Create and Configure the Deploy CLI Application Manually</a></p><p>SCOPE設定後、ポップアップ下部のAUTHORIZEを押下します。</p><img src="/images/20200702/photo_20200702_03.png"><h2 id="3-2-ローカル環境にAuth0-Deploy-CLIの拡張機能をインストールする。"><a href="#3-2-ローカル環境にAuth0-Deploy-CLIの拡張機能をインストールする。" class="headerlink" title="3-2. ローカル環境にAuth0 Deploy CLIの拡張機能をインストールする。"></a>3-2. ローカル環境にAuth0 Deploy CLIの拡張機能をインストールする。</h2><p>npmを使用して、auth0-deploy-cliをローカル環境にインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g auth0-deploy-cli</span><br></pre></td></tr></table></figure><h2 id="3-3-エクスポート先のディレクトリの作成"><a href="#3-3-エクスポート先のディレクトリの作成" class="headerlink" title="3-3. エクスポート先のディレクトリの作成"></a>3-3. エクスポート先のディレクトリの作成</h2><p>まずエクスポートする設定の置き場所となる任意のディレクトリを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir auth0-deploy</span><br><span class="line">$ <span class="built_in">cd</span> auth0-deploy</span><br></pre></td></tr></table></figure><h2 id="3-4-設定ファイルのconfig-jsonを作成"><a href="#3-4-設定ファイルのconfig-jsonを作成" class="headerlink" title="3-4 設定ファイルのconfig.jsonを作成"></a>3-4 設定ファイルのconfig.jsonを作成</h2><p>次にエクスポートを行う際に使用するconfig.jsonを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch config.json</span><br></pre></td></tr></table></figure><p>作成したconfig.jsonに、先程作成したアプリケーションのdomainやclient id、client secrtetの情報を下記のフォーマットで記載します。</p><figure class="highlight json"><figcaption><span>auth0-deploy/config.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"AUTH0_DOMAIN"</span>: <span class="string">"YOUR_DOMAIN"</span>,</span><br><span class="line">  <span class="attr">"AUTH0_CLIENT_ID"</span>: <span class="string">"YOUR_CLIENT_ID"</span>,</span><br><span class="line">  <span class="attr">"AUTH0_CLIENT_SECRET"</span>: <span class="string">"YOUR_CLIENT_SECRET"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client id等の情報はAuth0のダッシュボードから確認することができます。</p><img src="/images/20200702/photo_20200702_04.png"><h2 id="3-5-exportコマンドでエクスポートする"><a href="#3-5-exportコマンドでエクスポートする" class="headerlink" title="3-5. exportコマンドでエクスポートする"></a>3-5. exportコマンドでエクスポートする</h2><p>これでテナントの設定をエクスポートする準備が整いました。<br>下記コマンドを実行して、Auth0テナントの設定をエクスポートします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ a0deploy <span class="built_in">export</span> -c config.json -f yaml -o ./</span><br></pre></td></tr></table></figure><p>-cはconfigファイル、-fはフォーマット、-oはエクスポート先のディレクトリを指定します。<br>プロキシ経由の場合はプロキシのオプション（-p）を設定します。</p><p>詳細は<a href="https://auth0.com/docs/extensions/deploy-cli/references/deploy-cli-options#options" target="_blank" rel="noopener">こちら</a>をご確認ください。</p><p>コマンドを実行し、ログの最後に<code>Export Successful</code>が出力されれば、エクスポートは成功です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Loading Auth0 Tenant Data</span><br><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Retrieving rules data from Auth0</span><br><span class="line">...</span><br><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Exporting guardianFactorTemplates</span><br><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Exporting roles</span><br><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Writing tenant.yaml</span><br><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Export Successful</span><br></pre></td></tr></table></figure><h2 id="3-6-ディレクトリ構成"><a href="#3-6-ディレクトリ構成" class="headerlink" title="3-6. ディレクトリ構成"></a>3-6. ディレクトリ構成</h2><p>各環境が設定している内容により異なることはありますが、私が使用しているテナントは下記のようなディレクトリ構成となりました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">|   <span class="comment"># 新規登録時やアカウントブロック時に送信されるemailテンプレート</span></span><br><span class="line">├── emailTemplates</span><br><span class="line">│   ├── blocked_account.html</span><br><span class="line">│   ├── reset_email.html</span><br><span class="line">│   └── verify_email.html</span><br><span class="line">|</span><br><span class="line">|   <span class="comment"># Universal Loginで使用するログイン画面やパスワード再発行ページ</span></span><br><span class="line">├── pages　　　　　　　　　　　　</span><br><span class="line">|   ├── error_page.html</span><br><span class="line">|   ├── login.html</span><br><span class="line">|   └── password_reset.html</span><br><span class="line">|</span><br><span class="line">|   <span class="comment"># テナントにされている各Rulesのスクリプト</span></span><br><span class="line">├── rules</span><br><span class="line">|   ├── hoge.js</span><br><span class="line">|   └── fuga.js</span><br><span class="line">|</span><br><span class="line">|   <span class="comment"># テナントの設定が記載されているyamlファイル</span></span><br><span class="line">└── tenant.yaml</span><br></pre></td></tr></table></figure><h2 id="3-7-各環境ごとのデプロイに対応したディレクトリ構成に変更する"><a href="#3-7-各環境ごとのデプロイに対応したディレクトリ構成に変更する" class="headerlink" title="3-7. 各環境ごとのデプロイに対応したディレクトリ構成に変更する"></a>3-7. 各環境ごとのデプロイに対応したディレクトリ構成に変更する</h2><p>私が所属しているプロジェクトでは3つの環境を使用しているため、Auth0テナントも3つ使用しています。<br>各環境ごとに設定内容が同一ではない項目もあるため、テナントの設定が記載されているyamlファイルを環境ごとに作成しています。<br>よって下記のようなディレクトリ構成となります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">|   <span class="comment"># 新規登録時やアカウントブロック時に送信されるemailテンプレート</span></span><br><span class="line">├── emailTemplates</span><br><span class="line">│   ├── blocked_account.html</span><br><span class="line">│   ├── reset_email.html</span><br><span class="line">│   └── verify_email.html</span><br><span class="line">|</span><br><span class="line">|   <span class="comment"># Universal Loginで使用するログイン画面やパスワード再発行ページ</span></span><br><span class="line">├── pages　　　　　　　　　　　　</span><br><span class="line">|   ├── error_page.html</span><br><span class="line">|   ├── login.html</span><br><span class="line">|   └── password_reset.html</span><br><span class="line">|</span><br><span class="line">|   <span class="comment"># テナントにされている各Rulesのスクリプト</span></span><br><span class="line">├── rules</span><br><span class="line">|   ├── hoge.js</span><br><span class="line">|   └── fuga.js</span><br><span class="line">|</span><br><span class="line">|   テナントの設定が記載されているyamlファイル</span><br><span class="line">└── tenant-dev.yaml</span><br><span class="line">└── tenant-stg.yaml</span><br><span class="line">└── tenant-prd.yaml</span><br></pre></td></tr></table></figure><h1 id="4-環境ごとに差異がある値を環境変数に定義する"><a href="#4-環境ごとに差異がある値を環境変数に定義する" class="headerlink" title="4. 環境ごとに差異がある値を環境変数に定義する"></a>4. 環境ごとに差異がある値を環境変数に定義する</h1><p>テナントの設定をエクスポートした時点ではドメイン等、環境によって変えたい変数がハードコーディングされている状態になっています。<br>もしrulesやemailTemplate配下のファイルで環境ごとにセットしたい値が異なる場合は、環境変数を用いて正しい値がセットされるようにします。</p><p>Auth0 Deploy CLIでは、デプロイ時に指定するconfigファイルに<code>AUTH0_KEYWORD_REPLACE_MAPPINGS</code> を指定して環境変数のセットを行うと、configファイルから値を読み取って環境変数がセットされます。</p><figure class="highlight json"><figcaption><span>auth0-deploy/config.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"AUTH0_DOMAIN"</span>: <span class="string">"YOUR_DOMAIN"</span>,</span><br><span class="line">  <span class="attr">"AUTH0_CLIENT_ID"</span>: <span class="string">"YOUR_CLIENT_ID"</span>,</span><br><span class="line">  <span class="attr">"AUTH0_CLIENT_SECRET"</span>: <span class="string">"YOUR_CLIENT_SECRET"</span>,</span><br><span class="line">   <span class="attr">"AUTH0_KEYWORD_REPLACE_MAPPINGS"</span>: &#123;</span><br><span class="line">        <span class="attr">"DOMAIN"</span>: <span class="string">"https://www.example.com"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下記に例を記載します。</p><p>login.htmlが下記の様になっていた場合、</p><figure class="highlight html"><figcaption><span>auth0-source/pages/login.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##DOMAIN##/sample"</span>&gt;</span>サンプルリンク<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>デプロイ時にはconfig.jsonファイルから環境変数が適用され、環境ごとに値を変えることができます。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.example.com/sample"</span>&gt;</span>サンプルリンク<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-デプロイ環境の整備"><a href="#5-デプロイ環境の整備" class="headerlink" title="5. デプロイ環境の整備"></a>5. デプロイ環境の整備</h1><p>私のプロジェクトではソースコードの管理をGitlabで行っており、上記作業完了後、リモートリポジトリにpushします。</p><p>その後、Gitlab CI/CDを起動して上記テナントのディレクトリをS3へアップロードしたことをトリガーにCodePipelineが起動し、CodeBuild上でAuth0テナントのデプロイを行っています。</p><p>実際に使用しているbuildspec.ymlは下記の通りです。<br>client idやclient secretを指定するconfigファイルはAWSのParameter Storeから読みとった値をCodeBuild上でセットしています。</p><figure class="highlight yml"><figcaption><span>buildspec.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.2</span></span><br><span class="line"><span class="attr">phases:</span></span><br><span class="line">  <span class="attr">pre_build:</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">auth0-deploy-cli@5.0.0</span></span><br><span class="line">  <span class="attr">post_build:</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">creating</span> <span class="string">config</span> <span class="string">file</span> <span class="string">started</span></span><br><span class="line">      <span class="comment"># ↓リポジトリ上ではclient id等をハードコーディングしたconfig.jsonファイルは保持せず、config.jsonのテンプレートファイルのみ保持し、Parameter Storeの値をもとにファイルを新規作成しています。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">envsubst</span> <span class="string">&lt;</span> <span class="string">config-template.json</span> <span class="string">&gt;</span> <span class="string">config.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">finished</span> <span class="string">creating</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cat</span> <span class="string">config.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">auth0-deploy-cli</span> <span class="string">version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">a0deploy</span> <span class="string">--version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">Auth0</span> <span class="string">Deploy</span> <span class="string">started</span></span><br><span class="line">      <span class="comment"># ↓ENVは環境変数から読み取っています</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">a0deploy</span> <span class="string">import</span> <span class="string">-c</span> <span class="string">config.json</span> <span class="string">-i</span> <span class="string">tenant-$&#123;ENV&#125;.yaml</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">Auth0</span> <span class="string">Deploy</span> <span class="string">completed</span></span><br></pre></td></tr></table></figure><p>これでデプロイ環境を整備することができました。</p><p>基本的には初期構築時のExportファイルを正として管理を行っていますが、Auth0上で大きな設定変更が生じた際は念の為テナント設定のExportを行い、正管理ファイルに誤りがないかどうか、必要に応じて確認を行っています。</p><h1 id="6-最後に"><a href="#6-最後に" class="headerlink" title="6. 最後に"></a>6. 最後に</h1><p>Auth0 Deploy CLIを利用して既存テナントの設定をエクスポートするところから、実際にCI/CDに組み込んでデプロイを行う部分までをご紹介してきました。<br>ただ、Auth0の設定管理は今回扱ったAuth0 Deploy CLIだけでなく、Teraformで管理することも可能です。（<a href="https://www.terraform.io/docs/providers/auth0/index.html）" target="_blank" rel="noopener">https://www.terraform.io/docs/providers/auth0/index.html）</a></p><p>そのため、自身が所属しているプロジェクトの状況に応じて適切なものを選択・利用していくのが良いかと思います。</p><h1 id="7-関連リンク"><a href="#7-関連リンク" class="headerlink" title="7. 関連リンク"></a>7. 関連リンク</h1><p><a href="https://www.npmjs.com/package/auth0-deploy-cli" target="_blank" rel="noopener">Auth0 Deploy CLI Tool</a><br><a href="https://future-architect.github.io/articles/20200122/">Auth0 導入編</a><br><a href="https://future-architect.github.io/articles/20200123/">Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する</a><br><a href="https://future-architect.github.io/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG/DXユニットの市川です。&lt;/p&gt;
&lt;p&gt;私が所属しているプロジェクトでは認証認可基盤としてAuth0を使
      
    
    </summary>
    
    
      <category term="CI/CD" scheme="https://future-architect.github.io/categories/CI-CD/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
      <category term="GitLab" scheme="https://future-architect.github.io/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>Go の Open API 3.0 のジェネレータ oapi-codegen を試してみた</title>
    <link href="https://future-architect.github.io/articles/20200701/"/>
    <id>https://future-architect.github.io/articles/20200701/</id>
    <published>2020-07-01T00:40:40.000Z</published>
    <updated>2020-07-17T01:50:25.468Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200701/top.png" class="img-middle-size"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/" target="_blank" rel="noopener">Renée French</a>.</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>TIG DXチーム所属の多賀です。最近はフロントのコードを書いたりすることも増えましたが、引き続き Go も触っています。<br>Go で OpenAPI(Swagger) からコード生成する際には、 go-swagger をよく利用しています。<br>go-swagger については他記事でもまとめられています。</p><ul><li><a href="https://future-architect.github.io/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a></li><li><a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a></li></ul><p>ただ、 go-swagger は Swagger 2.0 にのみ対応しており、OpenAPI 3.0 系が使えない問題がありました。最新に追従していく上でも Open API 3.0 系に寄せていきたいと考えていたので、なにか使えるツールはないか探したところ、以下を見つけました。</p><p><a href="https://github.com/deepmap/oapi-codegen" target="_blank" rel="noopener">https://github.com/deepmap/oapi-codegen</a></p><p>使えるかどうか実際に動かして試してみます。</p><p>ざっと見た感じは、以下の模様です。</p><ul><li>Open API 3.0 の定義から Go のソースコードを生成できる</li><li>echo, chi の形式でServerソースが出力できる</li><li>Go の interface で Open API の仕様が定義され interfaceを満たすように実装していく</li></ul><h2 id="調査"><a href="#調査" class="headerlink" title="調査"></a>調査</h2><p>実際に OpenAPI 定義からコードを出力してみます。</p><p>ライブラリ側で OpenAPI定義のサンプルが用意されていたためそのまま利用してみます。<br><a href="https://github.com/deepmap/oapi-codegen/blob/master/examples/petstore-expanded/petstore-expanded.yaml" target="_blank" rel="noopener">https://github.com/deepmap/oapi-codegen/blob/master/examples/petstore-expanded/petstore-expanded.yaml</a></p><p>ざっくり以下のAPI が定義されています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;pets</span><br><span class="line">POST &#x2F;pets</span><br><span class="line">GET &#x2F;pets&#x2F;&#123;id&#125;</span><br><span class="line">DELETE &#x2F;pets&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure><p>上記を <code>openapi.yml</code> としてダウンロードしました。</p><p>とりあえず、コード生成を実行してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンドインストール</span></span><br><span class="line">go get github.com/deepmap/oapi-codegen/cmd/oapi-codegen@v1.3.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go コード生成</span></span><br><span class="line">oapi-codegen openapi.yml &gt; openapi.gen.go</span><br></pre></td></tr></table></figure><p>こちらで Goのコードが1ファイルに生成されました。<br>生成項目としては以下4点です。</p><ul><li>型定義</li><li>http client</li><li>http server</li><li>OpenAPI spec</li></ul><p>実際に利用する際は、必要な分だけ生成・管理したいかなと思います。<br>生成コードとはいえ、1ファイルにまとまっていると少々読みづらかったりもします。<br>コマンドのパラメータで制御できるようでしたので、それぞれ別にコード生成し中身を確認していきます。<br>(生成コードは長くなるため一部抜粋しています。)</p><h4 id="型定義"><a href="#型定義" class="headerlink" title="型定義"></a>型定義</h4><ul><li>OpenAPI の <code>components</code> から struct を生成</li><li>リクエスト Bodyの定義も同様に生成</li></ul><p><code>コマンド</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oapi-codegen -generate <span class="string">"types"</span> -package openapi openapi.yml &gt; ./openapi/types.gen.go</span><br></pre></td></tr></table></figure><p><code>生成コード</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewPet defines model for NewPet.</span></span><br><span class="line"><span class="keyword">type</span> NewPet <span class="keyword">struct</span> &#123;</span><br><span class="line">Age  *<span class="keyword">int</span>    <span class="string">`json:"age,omitempty"`</span></span><br><span class="line">Kind *<span class="keyword">string</span> <span class="string">`json:"kind,omitempty"`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Name of the pet</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Type of the pet</span></span><br><span class="line">Tag *<span class="keyword">string</span> <span class="string">`json:"tag,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="http-client"><a href="#http-client" class="headerlink" title="http client"></a>http client</h4><ul><li>API仕様が interface として出力</li><li>2種類の interface が定義<ul><li>ClientInterface<ul><li>API実行の結果 http.Response が返却される</li></ul></li><li>ClientWithResponsesInterface<ul><li>API実行の結果の Response Body を parse して struct へ詰めてくれる<ul><li>Body を []byte 形式で保持するためメモリ効率はいまいち</li></ul></li></ul></li></ul></li><li>上記 interface を実装した struct も合わせて生成済<ul><li>生成された Client を利用するだけで良い</li></ul></li></ul><p><code>コマンド</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oapi-codegen -generate <span class="string">"client"</span> -package openapi openapi.yml &gt; ./openapi/client.gen.go</span><br></pre></td></tr></table></figure><p><code>生成コード</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The interface specification for the client above.</span></span><br><span class="line"><span class="keyword">type</span> ClientInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// FindPets request</span></span><br><span class="line">FindPets(ctx context.Context, params *FindPetsParams) (*http.Response, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddPet request  with any body</span></span><br><span class="line">AddPetWithBody(ctx context.Context, contentType <span class="keyword">string</span>, body io.Reader) (*http.Response, error)</span><br><span class="line"></span><br><span class="line">AddPet(ctx context.Context, body AddPetJSONRequestBody) (*http.Response, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeletePet request</span></span><br><span class="line">DeletePet(ctx context.Context, id <span class="keyword">int64</span>) (*http.Response, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// FindPetById request</span></span><br><span class="line">FindPetById(ctx context.Context, id <span class="keyword">int64</span>) (*http.Response, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Client which conforms to the OpenAPI3 specification for this service.</span></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// The endpoint of the server conforming to this interface, with scheme,</span></span><br><span class="line"><span class="comment">// https://api.deepmap.com for example.</span></span><br><span class="line">Server <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Doer for performing requests, typically a *http.Client with any</span></span><br><span class="line"><span class="comment">// customized settings, such as certificate chains.</span></span><br><span class="line">Client HttpRequestDoer</span><br><span class="line"></span><br><span class="line"><span class="comment">// A callback for modifying requests which are generated before sending over</span></span><br><span class="line"><span class="comment">// the network.</span></span><br><span class="line">RequestEditor RequestEditorFn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">FindPets</span><span class="params">(ctx context.Context, params *FindPetsParams)</span> <span class="params">(*http.Response, error)</span></span> &#123;</span><br><span class="line">req, err := NewFindPetsRequest(c.Server, params)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">req = req.WithContext(ctx)</span><br><span class="line"><span class="keyword">if</span> c.RequestEditor != <span class="literal">nil</span> &#123;</span><br><span class="line">err = c.RequestEditor(ctx, req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.Client.Do(req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用コード</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c := openapi.NewClient(<span class="string">"http://localhost:8888"</span>)</span><br><span class="line">params := openapi.FindPetsParams&#123;Tags: []<span class="keyword">string</span>&#123;<span class="string">"dog"</span>&#125;&#125;</span><br><span class="line"><span class="comment">// http.Response として返却</span></span><br><span class="line">res, err := c.FindPets(context.Background(),  params)</span><br></pre></td></tr></table></figure><h4 id="http-server"><a href="#http-server" class="headerlink" title="http server"></a>http server</h4><ul><li>API仕様が interface として定義</li><li>interface を実装する形で Server側のコードを実装していく</li></ul><p><code>コマンド</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oapi-codegen -generate <span class="string">"server"</span> -package openapi openapi.yml &gt; ./openapi/server.gen.go</span><br></pre></td></tr></table></figure><p><code>生成コード</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ServerInterface represents all server handlers.</span></span><br><span class="line"><span class="keyword">type</span> ServerInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Returns all pets</span></span><br><span class="line"><span class="comment">// (GET /pets)</span></span><br><span class="line">FindPets(ctx echo.Context, params FindPetsParams) error</span><br><span class="line"><span class="comment">// Creates a new pet</span></span><br><span class="line"><span class="comment">// (POST /pets)</span></span><br><span class="line">AddPet(ctx echo.Context) error</span><br><span class="line"><span class="comment">// Deletes a pet by ID</span></span><br><span class="line"><span class="comment">// (DELETE /pets/&#123;id&#125;)</span></span><br><span class="line">DeletePet(ctx echo.Context, id <span class="keyword">int64</span>) error</span><br><span class="line"><span class="comment">// Returns a pet by ID</span></span><br><span class="line"><span class="comment">// (GET /pets/&#123;id&#125;)</span></span><br><span class="line">FindPetById(ctx echo.Context, id <span class="keyword">int64</span>) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServerInterfaceWrapper converts echo contexts to parameters.</span></span><br><span class="line"><span class="keyword">type</span> ServerInterfaceWrapper <span class="keyword">struct</span> &#123;</span><br><span class="line">Handler ServerInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FindPets converts echo context to params.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *ServerInterfaceWrapper)</span> <span class="title">FindPets</span><span class="params">(ctx echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parameter object where we will unmarshal all parameters from the context</span></span><br><span class="line"><span class="keyword">var</span> params FindPetsParams</span><br><span class="line"><span class="comment">// ------------- Required query parameter "tags" -------------</span></span><br><span class="line"></span><br><span class="line">err = runtime.BindQueryParameter(<span class="string">"form"</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="string">"tags"</span>, ctx.QueryParams(), &amp;params.Tags)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf(<span class="string">"Invalid format for parameter tags: %s"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------- Optional query parameter "limit" -------------</span></span><br><span class="line"></span><br><span class="line">err = runtime.BindQueryParameter(<span class="string">"form"</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"limit"</span>, ctx.QueryParams(), &amp;params.Limit)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf(<span class="string">"Invalid format for parameter limit: %s"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke the callback with all the unmarshalled arguments</span></span><br><span class="line">err = w.Handler.FindPets(ctx, params)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>利用コード</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ServerInterface を実装するような struct を定義</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> petHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(si petHandler)</span> <span class="title">FindPets</span><span class="params">(ctx echo.Context, params FindPetsParams)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// GET /pets の処理記載</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(si petHandler)</span> <span class="title">AddPet</span><span class="params">(ctx echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">b := NewPet&#123;&#125;</span><br><span class="line"><span class="comment">// リクエスト Body は echo の APIを利用</span></span><br><span class="line">ctx.Bind(&amp;b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST /pets の処理記載</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(si petHandler)</span> <span class="title">DeletePet</span><span class="params">(ctx echo.Context, id <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// DELETE /pets/&#123;id&#125; の処理記載</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(si petHandler)</span> <span class="title">FindPetById</span><span class="params">(ctx echo.Context, id <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// GET /pets/&#123;id&#125; の処理記載</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">handler := petHandler&#123;&#125;</span><br><span class="line"><span class="comment">// 定義した struct を登録</span></span><br><span class="line">openapi.RegisterHandlers(e, handler)</span><br><span class="line">e.Logger.Fatal(e.Start(fmt.Sprintf(<span class="string">"0.0.0.0:%d"</span>, *port)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/go-chi/chi" target="_blank" rel="noopener">chi</a> 形式でも出力できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># server (chi)</span></span><br><span class="line">oapi-codegen -generate <span class="string">"chi-server"</span> openapi.yml &gt; openapi_chi_server.gen.go</span><br></pre></td></tr></table></figure><h4 id="OpenAPI-spec"><a href="#OpenAPI-spec" class="headerlink" title="OpenAPI spec"></a>OpenAPI spec</h4><ul><li>base64形式で <code>openapi.yaml</code> を保持</li></ul><p><code>コマンド</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oapi-codegen -generate <span class="string">"spec"</span> -package openapi openapi.yml &gt; ./openapi/spec.gen.go</span><br></pre></td></tr></table></figure><p><code>生成コード</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Base64 encoded, gzipped, json marshaled Swagger object</span></span><br><span class="line"><span class="keyword">var</span> swaggerSpec = []<span class="keyword">string</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="string">"H4sIAAAAAAAC/+RWTW/jNhD9K8S0R1XSJosedGp2nQIGiiRotqfAB0YcyWzFj5CjOEKg/16QlJ3Y0iZY"</span>,</span><br><span class="line"><span class="string">"tCha9GST4pBv3nsz5DPURlmjUZOH6hl8vUXF499L54wLf6wzFh1JjNO1ERh+BfraSUvSaKjSYha/ZdAY"</span>,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="レビュー"><a href="#レビュー" class="headerlink" title="レビュー"></a>レビュー</h2><p>良さそうな点と気になる点をまとめました。</p><h3 id="良さそうなところ"><a href="#良さそうなところ" class="headerlink" title="良さそうなところ"></a>良さそうなところ</h3><ul><li>生成コードが薄めで良い<ul><li>go-swagger は生成コードが重厚かつintefaceで分離されて実装が追いづらい点が気になっていた</li><li>echo/chi の APIが直接触れる</li></ul></li><li>echoやchi などの選択も結構好み</li><li>tag指定して出力すると依存のある定義のみが出力される<ul><li><code>oapi-codegen -include-tags pet -generate &quot;server&quot; openapi.yml</code></li></ul></li><li>クエリパラメータが struct へ Bindされる</li><li>パラメータのバリデーションに対応<ul><li>デフォルトだとリクエストボディはバリデーションされない (読まれないため)</li><li>Echo だと middleware をいれれば Body のバリデーションエラーも見れる<ul><li><code>middleware.OapiRequestValidator(swagger)</code></li><li>OpenAPI の spec が必要</li></ul></li></ul></li></ul><h3 id="気になるところ"><a href="#気になるところ" class="headerlink" title="気になるところ"></a>気になるところ</h3><ul><li>拡張タグは動かなそう<ul><li><code>x-XXX</code> 系は動作しない</li></ul></li><li>生成 struct の型定義に違和感<ul><li>required が 基本型 で optional が pointer 型</li><li>Go のコードでよく見る定義と逆なので注意が必要</li></ul></li><li><strong>レスポンス定義は Bind されない</strong><ul><li>実装者がレスポンスの struct を間違えないようにする必要がある</li><li>(個人的には一番いまいちかなと感じた点です。生成コード上仕方なさそうでしたが..)</li></ul></li><li>1 interface で Open API の定義が出力される<ul><li>include-tags を利用してタグ別に出力はうまく動作しない<ul><li>Server interface の実装が1つでないといけないため (echo/chiに登録できない)</li></ul></li><li>特定の tag のみ実装するケースでの利用可能</li></ul></li><li>同一 package に押し込める必要あり<ul><li>server, client コードは types に依存している</li></ul></li><li>echo と chi だと若干 echo 側のほうがリクエストの Bind が良い<ul><li>echo だと生成 Handler の引数にリクエストパラメータの struct が定義される</li><li>chi だと context から取得する必要あり<ul><li>生成コードで ctx から取り出すヘルパー関数あり</li></ul></li></ul></li></ul><h3 id="利用するとしたら"><a href="#利用するとしたら" class="headerlink" title="利用するとしたら..?"></a>利用するとしたら..?</h3><ul><li>echoでの出力を選択<ul><li>リクエストパラメータのバインドがしっかりされるため</li><li>middleware 利用だがリクエストボディのバリデーションチェックもできて良い</li></ul></li><li>出力は同一パッケージでファイルを分けて管理<ul><li>サーバー<ul><li>server, types, spec</li></ul></li><li>クライアント<ul><li>client, types</li></ul></li></ul></li><li>生成コード用の パッケージ (ディレクトリ) を切る<ul><li>各生成コードに依存があるため</li></ul></li><li>各API のレスポンス定義の命名を統一する<ul><li>レスポンス Body の Bindがされないため</li><li><code>${operationId}Res</code> or <code>${operationId}Response</code></li></ul></li></ul><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>ざっとコード生成を試して、コード側の確認をしてみました。<br>結構利用できそうだなというのが全体的な感想で、OpenAPI3.0系の制約がある場合は、oapi-codegen を実際に利用してみたいです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a></li><li><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a></li><li><a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="https://future-architect.github.io/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200701/top.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot designed by &lt;a href=&quot;http://
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
      <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
  </entry>
  
</feed>
