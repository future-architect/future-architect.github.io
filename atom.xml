<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-08-11T01:26:48.366Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go1.17のencoding/csv</title>
    <link href="https://future-architect.github.io/articles/20210811a/"/>
    <id>https://future-architect.github.io/articles/20210811a/</id>
    <published>2021-08-10T15:00:00.000Z</published>
    <updated>2021-08-11T01:26:48.366Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210811a/csv.png" alt="" title="CSV" width="841" height="403" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Go1.17連載の2つ目です。</p><p>TIG DXユニット真野です。前回Go1.16連載の時も2つ目で<a href="/articles/20210209/">Go 1.16のgo installについて</a>について触れました。今回は <code>encoding/csv</code> のマイナーチェンジ（APIが1個だけ追加した）という小ネタです。</p><h2 id="Minor-changes-to-the-library-in-encoding-csv"><a href="#Minor-changes-to-the-library-in-encoding-csv" class="headerlink" title="Minor changes to the library in encoding/csv"></a>Minor changes to the library in encoding/csv</h2><p><a href="https://tip.golang.org/doc/go1.17#encoding/binary">Go 1.17 Release Notes</a>でencoding/xml, encoding/binaryとともに、encoding/csvも微修正がありました。</p><blockquote><p>The new Reader.FieldPos method returns the line and column corresponding to the start of a given field in the record most recently returned by Read.<br>csv.ReaderにFieldPostメソッドが追加され、最後に読んだ列を返す</p></blockquote><p>これについて紹介します。選んだ理由は個人的にCSVとかJSONとかApache Parquetといったデータレイアウトが好きだからです。</p><p>Issueは<a href="https://github.com/golang/go/issues/44221">encoding/csv: add the ability to get the line number of a record #44221</a>です。2021.2.21に起票され同年5.21にクローズされているので3ヶ月くらいの期間での出来事でしょうか。</p><h2 id="どういう関数か"><a href="#どういう関数か" class="headerlink" title="どういう関数か"></a>どういう関数か</h2><p>追加されたのはcsv.Readerの以下の関数です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reader)</span> <span class="title">FieldPos</span><span class="params">(field <span class="keyword">int</span>)</span> <span class="params">(line, column <span class="keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure><p>csv.Readerは<code>Read</code>関数でCSVデータを1レコードずつ処理しますが（1行と呼ばない理由ですがCSVは項目中の改行が許容されているからです）、現在処理しているファイルの行や列を取得します。行と列は1始まり。列はルーンではなくバイト単位でカウントされるようです。</p><p>早速使っていきましょう。</p><figure class="highlight go"><figcaption><span>FieldPosをつかったサンプル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/csv&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">r := csv.NewReader(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">record, err := r.Read()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, item := <span class="keyword">range</span> record &#123;</span><br><span class="line">lineNo, column := r.FieldPos(i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;lineNo:%d column:%d pos:%d record:%s\n&quot;</span>, lineNo, i, column, item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FilePosを利用したコードでした。対象データとしてはGoDocに書いてあったCSVを利用します。</p><figure class="highlight plaintext"><figcaption><span>name.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_name,last_name,username</span><br><span class="line">&quot;Rob&quot;,&quot;Pike&quot;,rob</span><br><span class="line">Ken,Thompson,ken</span><br><span class="line">&quot;Robert&quot;,&quot;Griesemer&quot;,&quot;gri&quot;</span><br></pre></td></tr></table></figure><p>これを実行すると次の実行結果になりました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; go run main.go name.csv</span><br><span class="line">lineNo:1 column:0 pos:1 record:first_name</span><br><span class="line">lineNo:1 column:1 pos:12 record:last_name</span><br><span class="line">lineNo:1 column:2 pos:22 record:username</span><br><span class="line">lineNo:2 column:0 pos:1 record:Rob</span><br><span class="line">lineNo:2 column:1 pos:7 record:Pike</span><br><span class="line">lineNo:2 column:2 pos:14 record:rob</span><br><span class="line">lineNo:3 column:0 pos:1 record:Ken</span><br><span class="line">lineNo:3 column:1 pos:5 record:Thompson</span><br><span class="line">lineNo:3 column:2 pos:14 record:ken</span><br><span class="line">lineNo:4 column:0 pos:1 record:Robert</span><br><span class="line">lineNo:4 column:1 pos:10 record:Griesemer</span><br><span class="line">lineNo:4 column:2 pos:22 record:gri</span><br></pre></td></tr></table></figure><p>lineNoが対象ファイルの行番号です（1行目から4行目まで出ていますね）。次のcoulmnはカラムインデックス、posがCSV各カラムの出現位置です（[1 12 22]だと1文字目、12文字目、22文字目からそのカラムが始待っているよという意味です）。シンプルですね。言ってしまえばそれだけです。</p><h2 id="なぜ追加されたか"><a href="#なぜ追加されたか" class="headerlink" title="なぜ追加されたか"></a>なぜ追加されたか</h2><p>FieldPosというAPI経由しなくても少なくても、ループ変数を用いればファイル番号は取得できるような気がします。Goの思想的に反して余計なAPIを追加したのか？と思われる人も多いのではないでしょうか？</p><p>理由としてはおそらく、先程触れたとおりCSVファイルの項目中の改行が許容される（実質標準な<a href="http://www.kasai.fm/wiki/rfc4180jp">RFC4180</a>でも規定）のが理由の1つになると思います。</p><p>例えば、以下のようなCSVも許容されます。</p><figure class="highlight plaintext"><figcaption><span>lf.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;aaa&quot;,&quot;b</span><br><span class="line"></span><br><span class="line">bb&quot;,&quot;ccc&quot;</span><br><span class="line">zzz,yyy,xxx</span><br></pre></td></tr></table></figure><p>上記のlf.csvは4行ですが、CSVとしては2レコードです。項目中の改行もダブルクォートで囲めば許容されるということです。lf.csvのようなケースにおいては空行すら許容されます。</p><p>この仕様を理解すると行番号≠CSVレコード番号が分かると思います。どうようにカラム位置も項目中の改行を考慮すると、APIとして利用した方が使い側としては助かるというのがイメージが湧くでしょう。</p><p>このlf.csvを先程のサンプルコードで動かすと以下の結果です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">go run main.go lf.csv</span><br><span class="line">&gt; go run main.go lf.csv</span><br><span class="line">lineNo:1 column:0 pos:1 record:aaa</span><br><span class="line">lineNo:1 column:1 pos:7 record:b</span><br><span class="line"></span><br><span class="line">bb</span><br><span class="line">lineNo:3 column:2 pos:5 record:ccc</span><br><span class="line">lineNo:4 column:0 pos:1 record:zzz</span><br><span class="line">lineNo:4 column:1 pos:5 record:yyy</span><br><span class="line">lineNo:4 column:2 pos:9 record:xxx</span><br></pre></td></tr></table></figure><p>結果を見ると、CSV1レコード目のcccのカラムの行番号が3であるのがわかります。少し面白いですね。そしてFilePosの面白いところは、FieldPosの引数にカラムのインデックスを指定できるため、同一レコードの処理中に置いてlineNoが変わることが、すなわち項目中の改行が含まれている判明するという点です。</p><p>一見、ちょっと面倒そうな関数ですが中々考えられていますね。</p><p>今回は項目中の改行を例に上げましたが、他にも何かしらCSVの処理中に想定されていないデータが含まれていた場合（例えば予期せぬ区切り文字の混入やダブルクォートのエスケープがされていないなど）に、FieldPosによってトレースがしやすくなるのが大きいです（Issueのニュアンスだとこっちの方が強いかもです）。CSVのパースをしくじって数値項目なのに隣の文字列項目が設定されてエラーにった経験はみなさん何度も何度も経験してきたと思います。それが数百万、数千行のデータともなればトレースが大変。こういったデバック用のAPIが増えるのは本当に好ましいです。</p><p>encoding/csvパッケージを生で使う人は直接恩恵を受けられますし、これらのラッパーライブラリも性能改善などでメリットがある良い改修だと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>Go1.17ではencoding/CSVのReaderにFieldPosというCSV処理中の行番号やカラム開始位置を返す関数が追加された</li><li>項目中の改行の考慮であったり、違反データのトレーサビリティ（デバッグ）としても有効なAPIで、従来の回避手法に比べて性能が良いとのことです</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210811a/csv.png&quot; alt=&quot;&quot; title=&quot;CSV&quot; width=&quot;841&quot; height=&quot;403&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>CypressでAPIの実行、異常系のテストを行う</title>
    <link href="https://future-architect.github.io/articles/20210810b/"/>
    <id>https://future-architect.github.io/articles/20210810b/</id>
    <published>2021-08-09T15:00:01.000Z</published>
    <updated>2021-08-10T03:37:43.140Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210810b/landscape-2022147_640.jpg" alt="" title="Artturi MäntysaariによるPixabayからの画像" width="640" height="360" loading="lazy"><p>TIGの伊藤真彦です。</p><p>フューチャー技術ブログでも何度か取り上げているCypressですが、私も最近触り始めました。</p><p>過去記事は<a href="https://future-architect.github.io/tags/Cypress/">Cypressタグの記事</a>を参照してください。</p><p>今回取り上げたいテーマは、フロントエンドアプリケーションで、特定の画面に表示する情報をサーバーから取得する機能や、ボタンを押すとバックエンドサーバーなどにHTTPリクエストを送信するような機能が実装されている場合の話です。</p><p>期待通りのリクエストパラメータでAPIが実行されていること、サーバーサイドでエラーがあった場合の異常系の挙動などをテストしたくなった時に調べたことをまとめます。</p><p>なお正しいレスポンスが返ってくることもテストできますが、そこはバックエンドでテストできている、するべき部分なのでフロントエンドのテストとしては私は実装していません。</p><h1 id="CypressでAPIの実行を検証する"><a href="#CypressでAPIの実行を検証する" class="headerlink" title="CypressでAPIの実行を検証する"></a>CypressでAPIの実行を検証する</h1><p>ボタンを押した時にAPIが実行されていることを検証するテストコードを書く際に便利な機能として、<code>cy.intercept</code>が用意されていました。</p><p>下記のコードのように利用できます。</p><figure class="highlight js"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;API実行ボタンが動作すること&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/api&#x27;</span>).as(<span class="string">&#x27;post_req&#x27;</span>)</span><br><span class="line">  cy.findByText(<span class="string">&#x27;submit&#x27;</span>).click()</span><br><span class="line">  cy.wait(<span class="string">&#x27;@post_req&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://docs.cypress.io/api/commands/intercept#Syntax">ドキュメント</a>に記載の通り、<code>cy.intercept</code>は様々な形式の引数に対し柔軟に対応できます、いろいろ試して下記の形式に落ち着きました。</p><figure class="highlight js"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.intercept(<span class="string">&#x27;HTTPメソッド&#x27;</span>, <span class="string">&#x27;URL&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>cy.wait</code>を利用することで、ボタンを押してもAPIが実行されなかった場合、<code>cy.intercept</code>で指定したURL以外にリクエストが送信された場合はテストが失敗します。</p><h1 id="APIのリクエスト、レスポンスの内容を検証する"><a href="#APIのリクエスト、レスポンスの内容を検証する" class="headerlink" title="APIのリクエスト、レスポンスの内容を検証する"></a>APIのリクエスト、レスポンスの内容を検証する</h1><figure class="highlight js"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;API実行ボタンが動作すること&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/api&#x27;</span>).as(<span class="string">&#x27;post_req&#x27;</span>)</span><br><span class="line">  cy.findByText(<span class="string">&#x27;submit&#x27;</span>).click()</span><br><span class="line">  cy.wait(<span class="string">&#x27;@post_req&#x27;</span>).should(<span class="function"><span class="params">xhr</span> =&gt;</span> &#123;</span><br><span class="line">    expect(xhr.response.statusCode).to.eq(<span class="number">201</span>)</span><br><span class="line">    expect(xhr.request.body).to.eq(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;cypress&quot;,&quot;id&quot;:&quot;01&quot;&#125;&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>cy.wait</code>の戻り値からHTTPリクエスト、レスポンスを上記のように詳細にテストすることができます。</p><figure class="highlight js"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> assert_req_body <span class="keyword">from</span> <span class="string">&#x27;../../fixtures/request/post_api1.json&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;API実行ボタンが動作すること&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/api&#x27;</span>).as(<span class="string">&#x27;post_req&#x27;</span>)</span><br><span class="line">  cy.findByText(<span class="string">&#x27;submit&#x27;</span>).click()</span><br><span class="line">  cy.wait(<span class="string">&#x27;@post_req&#x27;</span>).should(<span class="function"><span class="params">xhr</span> =&gt;</span> &#123;</span><br><span class="line">    expect(xhr.response.statusCode).to.eq(<span class="number">201</span>)</span><br><span class="line">    expect(xhr.request.body).to.eq(<span class="built_in">JSON</span>.stringify(assert_req_body))</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>リクエストボディの量によってはJSONファイルとして切り出すことで見通しの良い状態を保つことができます。</p><p>JSONとしてのシンタックスハイライトや構文エラーの検知が働くことで凡ミスを回避できる側面もあります。</p><h1 id="APIのレスポンスをスタブする"><a href="#APIのレスポンスをスタブする" class="headerlink" title="APIのレスポンスをスタブする"></a>APIのレスポンスをスタブする</h1><figure class="highlight js"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> assert_req_body <span class="keyword">from</span> <span class="string">&#x27;../../fixtures/request/post_api1.json&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;API実行が失敗した場合アラートが表示されること&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://localhost:3005/api&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">statusCode</span>: <span class="number">500</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="string">&#x27;&#123;&quot;error&quot;: &quot;internal error&quot;&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ).as(<span class="string">&#x27;post_req&#x27;</span>)</span><br><span class="line">  cy.findByText(<span class="string">&#x27;submit&#x27;</span>).click()</span><br><span class="line">  cy.wait(<span class="string">&#x27;@post_req&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;失敗&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>cy.intercept</code>は第三引数を利用することでレスポンスをスタブすることができます。全てのAPI実行をスタブすればバックエンドサーバーが存在しない状態でもテストできます。</p><figure class="highlight js"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.intercept(<span class="string">&#x27;HTTPメソッド&#x27;</span>, <span class="string">&#x27;URL&#x27;</span>, &#123;期待するレスポンス&#125;)</span><br></pre></td></tr></table></figure><p><code>body</code>ではなく<code>fixture</code>というキーを使用することで、fixtureフォルダに配置したJSONファイルを参照することも可能です。</p><figure class="highlight js"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> assert_req_body <span class="keyword">from</span> <span class="string">&#x27;../../fixtures/request/post_api1.json&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;API実行が失敗した場合アラートが表示されること&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://localhost:3005/api&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">statusCode</span>: <span class="number">500</span>,</span><br><span class="line">      <span class="attr">fixture</span>: <span class="string">&#x27;response/post_error1.json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ).as(<span class="string">&#x27;post_req&#x27;</span>)</span><br><span class="line">  cy.findByText(<span class="string">&#x27;submit&#x27;</span>).click()</span><br><span class="line">  cy.wait(<span class="string">&#x27;@post_req&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;失敗&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>異常応答だけでなく、データの内容が画面に影響する場合に全パターンのテストを行う事もこのような方法で行うことができます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Cypressでは…</p><ul><li><code>cy.intercept</code>を利用してHTTPリクエストの実行を検証できる</li><li>リクエスト、レスポンスの内容を細かくテストできる</li><li>レスポンスをスタブすることもできる</li></ul><p>テストはただただ動かすだけでなく、異常系をいかに網羅するかが品質を左右します、リリース前にバグを見抜ける仕組みを整えていきましょう。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210810b/landscape-2022147_640.jpg&quot; alt=&quot;&quot; title=&quot;Artturi MäntysaariによるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;360&quot; loading=&quot;la</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
    <category term="E2Eテスト" scheme="https://future-architect.github.io/tags/E2E%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="Node.js" scheme="https://future-architect.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.17連載が始まります: コンパイラとgo mod</title>
    <link href="https://future-architect.github.io/articles/20210810a/"/>
    <id>https://future-architect.github.io/articles/20210810a/</id>
    <published>2021-08-09T15:00:00.000Z</published>
    <updated>2021-08-11T01:28:19.166Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210810a/evraiki-2514544_640.jpg" alt="" title="Наталья КоллеговаによるPixabayからの画像" width="640" height="480" loading="lazy"><p>前回のフューチャー技術ブログで行った<a href="https://future-architect.github.io/articles/20210207/">Go 1.16連載</a>に引き続き、今回もGo 1.17の集中連載を行います。</p><p>Go 1.17のリリースの足音が聞こえてきました。1.16のgo:embedのような「うぉっ」と声が出るような大きな新機能はなく、APIが変わらずに勝手に改善されるようなものと、小粒なAPIの追加が多い感じです。<a href="https://blog.golang.org/generics-next-step#TOC_4.">ジェネリクスは何も変更がなければ最短で1.17</a>という話もありましたが、今回は入っていません。</p><p>今回の連載ではこれらの変更をリレー形式で紹介していきます。</p><div class="scroll"><table><thead><tr><th align="center">公開日</th><th align="center">寄稿者</th><th align="left">記事</th></tr></thead><tbody><tr><td align="center">8月10日</td><td align="center">澁川喜規</td><td align="left">コンパイラとgo mod(この記事)</td></tr><tr><td align="center">8月11日</td><td align="center">真野隼記</td><td align="left"><a href="/articles/20210811a/">encoding/csv</a></td></tr><tr><td align="center">8月12日</td><td align="center">伊藤真彦</td><td align="left">testingの新機能</td></tr><tr><td align="center">8月17日</td><td align="center">玉木竜二</td><td align="left">rune</td></tr><tr><td align="center">8月18日</td><td align="center">辻大志郎</td><td align="left">go get</td></tr><tr><td align="center">8月19日</td><td align="center">宮崎将太</td><td align="left">New warnings for Is, As and Unwrap methods</td></tr><tr><td align="center">8月20日</td><td align="center">市川燿</td><td align="left">sync/atomic</td></tr></tbody></table></div><p>また毎回恒例の<a href="https://gocon.connpass.com/event/216361/">Go 1.17リリースパーティ</a>も開催予定です。ぜひご参加ください。</p><h1 id="コンパイラ"><a href="#コンパイラ" class="headerlink" title="コンパイラ"></a>コンパイラ</h1><h2 id="関数呼び出しが5-高速化"><a href="#関数呼び出しが5-高速化" class="headerlink" title="関数呼び出しが5%高速化"></a>関数呼び出しが5%高速化</h2><p>1.16の時に予告されていたレジスタベースの関数呼び出しが入りました。呼び出し速度が5%、バイナリサイズが2%改善されました。特にコードの変更なく恩恵に授かれます。</p><p>あとはpanic時のスタックトレースの表示が改善され、今まで16進数で表示されていたのが改善されたらしいのですが、よくわかりませんでした。16進数は出なくなりましたが、試したが、…となるだけでした。</p><p>クロージャを含む関数がインライン展開されるようにもなりました。これもコード修正必要なく、パフォーマンスアップにつながる可能性があります。</p><p>なお、unsafeで怪しく引数を触ったりするとトラブルが発生する可能性がありますが、通常のGoの使用方法では問題になることはなさそうです。</p><h2 id="build-constraintのコメントが変更"><a href="#build-constraintのコメントが変更" class="headerlink" title="build constraintのコメントが変更"></a>build constraintのコメントが変更</h2><p>以前は次のようなコメント形式でした。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build windows</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure><p>これが次のようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//go:build windows</span><br><span class="line">// +build windows</span><br><span class="line"></span><br><span class="line">package main</span><br></pre></td></tr></table></figure><p>今は新旧併存ですが、1.1８が出て1.16サポートが切れたら新コメントのみ対応になると思われます。</p><p><code>//go:generate</code>とか<code>//go:noinline</code>と見た目が揃いますね。旧コメントは後ろに空行がないといけない（しかし、他のgodocなどは空行があってはダメ）など、いろいろ気難しい感じでしたが、新コメントはここは緩和されています。</p><p>go fmtでは互換性を考えて新・旧のコメントを生成したり、go vetでは新・旧のコメントの内容が違っていたら警告を出すなど、周辺エコシステムもこれを受けて変更されています。</p><h2 id="新しいターゲットの追加と削除"><a href="#新しいターゲットの追加と削除" class="headerlink" title="新しいターゲットの追加と削除"></a>新しいターゲットの追加と削除</h2><p>macOSのサポートが10.13 High Sierra以降のみになる、WindowsのARM64がサポートされる、64bit MIPS on OpenBSDがサポート、すべてのARM64環境でスタックフレームポインタが維持されるようになった（Linux/macOS/iOSは元々維持されていたのが全展開になった)、loong64がGOARCHの予約語に追加（サポートはまだ）、という感じでした。</p><p>WindowsのARM64は今後広がっていくんですかね。ARM64機よりも、M1 mac上でQEMUで動かす方が台数が増えそうな気がしないでもないですが・・・Surface Pro Xは少しお高かったので、安い機種が出てきたら興味はあります。</p><p>loong64とは何かよくわからなかったのですが、中国製CPUの龍芯ですね。MIPS64のカスタム版みたいなやつのようです。面白そう。</p><ul><li><a href="https://pc.watch.impress.co.jp/docs/topic/feature/1048911.html">PC Watch: MIPSなのにx86とARMアプリを高速に実行できる中国製CPU「龍芯」のカラクリ</a></li></ul><h1 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h1><p>今回一番変更が多かったのがgo mod周りですね。</p><h2 id="Module-Graph-Pruning-Lazy-Module-Loading"><a href="#Module-Graph-Pruning-Lazy-Module-Loading" class="headerlink" title="Module Graph Pruning (Lazy Module Loading)"></a>Module Graph Pruning (Lazy Module Loading)</h2><p>github.com/rs/xidとgithub.com/fatih/colorをgo getしてみたコードです。</p><figure class="highlight go"><figcaption><span>go.mod(1.16)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module go116sample</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.16</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">        github.com/fatih/color v1<span class="number">.12</span><span class="number">.0</span></span><br><span class="line">        github.com/rs/xid v1<span class="number">.3</span><span class="number">.0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>go.mod(1.17)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module go117sample</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.17</span></span><br><span class="line"></span><br><span class="line">require github.com/fatih/color v1<span class="number">.12</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">github.com/mattn/<span class="keyword">go</span>-colorable v0<span class="number">.1</span><span class="number">.8</span> <span class="comment">// indirect</span></span><br><span class="line">github.com/mattn/<span class="keyword">go</span>-isatty v0<span class="number">.0</span><span class="number">.12</span> <span class="comment">// indirect</span></span><br><span class="line">golang.org/x/sys v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20200223170610</span>-d5e6a3e2c0ae <span class="comment">// indirect</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Go 1.17の方は間接的に呼び出されているパッケージの情報まで含まれています。Go 1.16の場合は全モジュールグラフを取得する場合はどんどん子供を辿っていって完成させる必要がありますが、Go 1.17は必要な依存関係がすべて含まれているため、go.modを調べる必要性が減っています。</p><p>詳しくはこちらの<a href="https://tip.golang.org/ref/mod#graph-pruning">Go Modの説明</a>か、この<a href="https://go.googlesource.com/proposal/+/master/design/36460-lazy-module-loading.md">Module Graph PruningのDesign Document</a>参照と書かれています。</p><p>一見、pruningという言葉を言葉を見ると、刈り込みとか削除という意味なので1.16の動作の方が新しい挙動っぽくも感じたのですが、必要なサブパッケージの情報まで読み込みをしてflatten化して整理する、みたいなニュアンスなのかもしれません。英語難しい。</p><p>Design Documentの説明によると背景としてはこんな感じっぽいです</p><ul><li>今まではモジュールグラフを見ないと必要なライブラリとバージョンが決定できなかった</li><li>go.modを提供していないライブラリがあると、実行するたびに条件が変わりがちだし、必要なパッケージのバージョンが引き上げられたりする可能性もあるし、参照先がなくなってキャッシュされていない場合にビルドできなくなったりする</li><li>選択されたバージョンだけではなく、indirectな依存バージョンも登場するため、replaceディレクティブを使うのば難しかった</li><li>大量のgo.modを取得しなければならないことを避けたい</li></ul><p>必要になるまでgo.modの読み込みを遅延させる、go.modの読み込みの必要性を下げることが「Lazy Module Lodaing」という感じのようですね。</p><p>少ないgo.modの読み込みで完了するということですかね。ビルドが早くなったりしそうな気がしますが、とくにそういう効果は書かれてませんね。まあ条件が難しいから数値化もしにくそう。</p><h2 id="go-modコマンドでGoバージョンの更新や上書きが可能"><a href="#go-modコマンドでGoバージョンの更新や上書きが可能" class="headerlink" title="go modコマンドでGoバージョンの更新や上書きが可能"></a>go modコマンドでGoバージョンの更新や上書きが可能</h2><p>go mod周りは前述の変更などバージョンによって挙動が変わったりします。そのため、go.modの<code>go</code>ディレクティブのバージョン指定が大切になってきます。なお、今回からgo directivesがない時は、現在のバージョンではなく、go 1.11とみなすことになりました（1.12からはgo mod initをすれば勝手に<code>go</code>ディレクティブが入る）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go 1.17</span><br></pre></td></tr></table></figure><p>そのためにgo mod tidyコマンドのオプションが増えています。<code>-go</code>を設定すると、go.modをそのバージョンの方式で上書きして更新します。<code>-compat</code>はgo.modの変更はしません。指定のバージョンで実行したものとして実行する感じですかね？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go mod tidy -go=1.17     # 更新</span><br><span class="line">$ go mod tidy -compat=1.17 # 旧バージョンサポートを上書きして実行</span><br></pre></td></tr></table></figure><h2 id="非推奨-deprecated-宣言"><a href="#非推奨-deprecated-宣言" class="headerlink" title="非推奨(deprecated)宣言"></a>非推奨(deprecated)宣言</h2><p>もうこのバージョンは古いよ、とかこのパッケージはメンテを停止したよ、ということをパッケージ開発者が情報を付与できるようになりました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Deprecated: use example.com/mod/v2 instead.</span></span><br><span class="line">module example.com/mod</span><br></pre></td></tr></table></figure><p>goコマンドでビルドしたりパッケージ取得する場合は警告が出るようになりますし、次のコマンドで表示できるとのこと。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go list -m -u</span><br></pre></td></tr></table></figure><h2 id="go-getの認証とかもろもろ"><a href="#go-getの認証とかもろもろ" class="headerlink" title="go getの認証とかもろもろ"></a>go getの認証とかもろもろ</h2><p><code>-insecure</code>で安全なHTTPS接続でなくても接続できるオプション（ついでにチェックサムのチェックなどを無視する）がありましたが、それがなくなるようです。<code>GOINSECURE</code>環境変数を使えとのこと。</p><p>あと、sshの認証が必要な場合に認証ダイアログが出るようになります。</p><h2 id="go-mod-downloadの挙動の変化"><a href="#go-mod-downloadの挙動の変化" class="headerlink" title="go mod downloadの挙動の変化"></a>go mod downloadの挙動の変化</h2><p><code>go mod download all</code>の<code>all</code>がない限りは、go.sumを更新することはなくなりました。1.15の挙動に戻るとのこと。</p><h2 id="go-mod-vendorでバージョン情報が付与"><a href="#go-mod-vendorでバージョン情報が付与" class="headerlink" title="go mod vendorでバージョン情報が付与"></a>go mod vendorでバージョン情報が付与</h2><p>go mod vendorしたときに生成されるvendor/modules.txtファイル。次のように、ちょびっとだけexplictの後ろにバージョンが付与されるという違いあります。それぞれのパッケージのgo.modに書かれていたバージョンが抽出されるようです。それぞれのパッケージはこのバージョンでビルドされる、go.modは無視されると書かれていますが、それぞれのバージョンのコンパイラがあるわけではないし、よくわからないですね。</p><figure class="highlight plaintext"><figcaption><span>go1.17</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># github.com/fatih/color v1.12.0</span><br><span class="line">## explicit; go 1.13</span><br><span class="line">github.com/fatih/color</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>go1.16</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># github.com/fatih/color v1.12.0</span><br><span class="line">## explicit</span><br><span class="line">github.com/fatih/color</span><br></pre></td></tr></table></figure><h2 id="go-runで外部パッケージを直接実行"><a href="#go-runで外部パッケージを直接実行" class="headerlink" title="go runで外部パッケージを直接実行"></a>go runで外部パッケージを直接実行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># バージョンを付けないとエラー</span></span><br><span class="line"></span><br><span class="line">% go run github.com/Songmu/gocredits/cmd/gocredits</span><br><span class="line">no required module provides package github.com/Songmu/gocredits/cmd/gocredits; to add it:</span><br><span class="line">go get github.com/Songmu/gocredits/cmd/gocredits</span><br><span class="line"></span><br><span class="line"><span class="comment"># 付けるとOK</span></span><br><span class="line">% go run github.com/Songmu/gocredits/cmd/gocredits@latest</span><br></pre></td></tr></table></figure><p>go generateでもダウンロードせずに直接実行できました。go modには追加されないため、ライブラリ作者だけが必要なツールはこちらの書き方にしておけば、ライブラリユーザーがそのツールをダウンロードする必要はなくなりそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:generate go run github.com/Songmu/gocredits/cmd/gocredits@latest -w</span></span><br></pre></td></tr></table></figure><p>1.16では@latestをつけてもエラーになり、build constraintでビルド対象にならないtools.goファイルを作ってgo getしてgo.modにも記録してあげるのがバッドノウハウとなっていました。あまり直感的とは言えない動作だったので、1.17の方式はありがたいですね。1.15ではできていましたが。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// go 1.16までのやり方</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> mypackage</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;github.com/Songmu/gocredits/cmd/gocredits&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210810a/evraiki-2514544_640.jpg&quot; alt=&quot;&quot; title=&quot;Наталья КоллеговаによるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;480&quot; loading=&quot;lazy&quot;</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>BacklogとSlackを連携するツールをGoで作りました</title>
    <link href="https://future-architect.github.io/articles/20210806b/"/>
    <id>https://future-architect.github.io/articles/20210806b/</id>
    <published>2021-08-05T15:00:01.000Z</published>
    <updated>2021-08-06T02:41:16.782Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>私のチームではタスク管理でバックログを使っています。</p><p>タスクのカテゴリ、マイルストーンやそれらを組み合わせた検索機能が充実している事や、タスクを入力するとバーンダウンチャートが自動で出来上がるところなど素晴らしいツールだと思っています。</p><p>チケット消化に貢献すると褒めてくれるのも良いですね。<br><img src="/images/20210806b/image.png" alt="Backlogのチャート" width="1200" height="558" loading="lazy"></p><p>さてチケット管理を行うとチケットを監視する仕事が産まれますが、それをある程度自動化するためのツールを作成しました。</p><h1 id="backlogslackify"><a href="#backlogslackify" class="headerlink" title="backlogslackify"></a>backlogslackify</h1><p>リポジトリはこちらです。</p><p><a href="https://github.com/future-architect/backlogslackify">https://github.com/future-architect/backlogslackify</a></p><p>未完了のBacklogチケットの存在をSlackに通知するツールです。</p><p>Slackと連携するものをslackifyと呼ぶのはRuby On Rails開発者時代にお世話になった<a href="https://github.com/onthebeach/capistrano-slackify">capistrano-slackify</a>を真似ています。</p><p>READMEに記載していますが、未完了のBacklogチケットのURL、リンク、担当者を画像のようにSlackに投稿してくれます。</p><img src="/images/20210806b/image_2.png" alt="ツールイメージ" width="946" height="322" loading="lazy"><p>GoでBacklogチケットを取り扱うロジックは<a href="https://developer.nulab.com/ja/docs/backlog/libraries/#">公式ドキュメント</a>にも紹介されている事から、<a href="https://github.com/kenzo0107/backlog">kenzo0107さんのライブラリ</a>を安心して利用することができ、仕事の片手間にササっと作ることができました、ありがとうございます。</p><h1 id="設定方法"><a href="#設定方法" class="headerlink" title="設定方法"></a>設定方法</h1><p>詳細な使用方法はREADMEに記載されていますので、補足資料として必要な情報を記載します。</p><h3 id="Configについて"><a href="#Configについて" class="headerlink" title="Configについて"></a>Configについて</h3><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ClientOption is input options to build client</span></span><br><span class="line"><span class="comment">// BacklogDueDate is &quot;weekend&quot; or &quot;end_of_month&quot; or relative days number like &quot;3&quot;</span></span><br><span class="line"><span class="comment">// required parameter is below</span></span><br><span class="line"><span class="comment">// BacklogApiKey</span></span><br><span class="line"><span class="comment">// BacklogBaseUrl</span></span><br><span class="line"><span class="comment">// SlackWebhookUrl</span></span><br><span class="line"><span class="comment">// SlackChannel</span></span><br><span class="line"><span class="comment">// SearchConditions</span></span><br><span class="line"><span class="keyword">type</span> ClientOption <span class="keyword">struct</span> &#123;</span><br><span class="line">BacklogApiKey    <span class="keyword">string</span>            <span class="string">`json:&quot;backlog_api_key&quot;`</span></span><br><span class="line">BacklogBaseUrl   <span class="keyword">string</span>            <span class="string">`json:&quot;backlog_base_url&quot;`</span></span><br><span class="line">BacklogDueDate   <span class="keyword">string</span>            <span class="string">`json:&quot;backlog_due_date&quot;`</span></span><br><span class="line">SlackWebhookUrl  <span class="keyword">string</span>            <span class="string">`json:&quot;slack_webhool_url&quot;`</span></span><br><span class="line">SlackChannel     <span class="keyword">string</span>            <span class="string">`json:&quot;slack_channel&quot;`</span></span><br><span class="line">SlackAccountName <span class="keyword">string</span>            <span class="string">`json:&quot;slack_account_name&quot;`</span></span><br><span class="line">SlackIconEmoji   <span class="keyword">string</span>            <span class="string">`json:&quot;slack_icon_emoji&quot;`</span></span><br><span class="line">SlackIconUrl     <span class="keyword">string</span>            <span class="string">`json:&quot;slack_icon_url&quot;`</span></span><br><span class="line">IsSinglePost     <span class="keyword">bool</span>              <span class="string">`json:&quot;is_single_post&quot;`</span></span><br><span class="line">DryRun           <span class="keyword">bool</span>              <span class="string">`json:&quot;dry_run&quot;`</span></span><br><span class="line">SearchConditions []SearchCondition <span class="string">`json:&quot;search_conditions&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SearchCondition is conditions to search backlog ticket</span></span><br><span class="line"><span class="comment">// it depends on github.com/kenzo0107/backlog</span></span><br><span class="line"><span class="keyword">type</span> SearchCondition <span class="keyword">struct</span> &#123;</span><br><span class="line">Name      <span class="keyword">string</span>                    <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Condition *backlog.GetIssuesOptions <span class="string">`json:&quot;condition&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コードに書いている通りですが、BacklogのAPIを実行するための各種設定、Slackに投稿するための各種設定、検索するチケットの設定を行います。チケットの検索条件にヒットしたもののうち、期限日が<code>BacklogDueDate</code>で設定した日数、または<code>weekend</code>にした場合週末を超過した場合、そのチケットが通知対象に追加されます。</p><p>きちんと期限日を設定しないとどれだけ放置されても検知できませんのでご注意ください。設定の内容を整備したら、適宜手動で実行するか、任意のアーキテクチャで定時バッチとして実行する使い方を想定しています。</p><h3 id="BacklogのAPIキーの取得方法"><a href="#BacklogのAPIキーの取得方法" class="headerlink" title="BacklogのAPIキーの取得方法"></a>BacklogのAPIキーの取得方法</h3><p><a href="https://support-ja.backlog.com/hc/ja/articles/360035641754-API%E3%81%AE%E8%A8%AD%E5%AE%9A">公式のリファレンス</a>を参照してください</p><h3 id="Slackの連携URL"><a href="#Slackの連携URL" class="headerlink" title="Slackの連携URL"></a>Slackの連携URL</h3><p>Slackとの連携にはIncoming Webhooksを利用しています。公式ドキュメントは<a href="https://api.slack.com/messaging/webhooks">こちら</a>です。</p><h3 id="チケットの検索条件について"><a href="#チケットの検索条件について" class="headerlink" title="チケットの検索条件について"></a>チケットの検索条件について</h3><p>Backlogの課題取得APIを実行しています。</p><p>APIリファレンスは<a href="https://developer.nulab.com/ja/docs/backlog/api/2/get-issue-list/#">こちら</a>です。<br><code>ProjectIDs</code>、<code>CategoryIDs</code>あたりがあれば実用充分だとは思いますが、APIで使えるものは何でも絞り込みに利用できます。絞り込みたい<code>CategoryIDs</code>を知りたい場合は、実際にBacklogでチケットを検索するとブラウザのアドレスバーに表示されています。</p><h2 id="実際に使ってみての感想"><a href="#実際に使ってみての感想" class="headerlink" title="実際に使ってみての感想"></a>実際に使ってみての感想</h2><p>毎朝9時にbotを動かすようにしました。</p><p>Slackに投稿されると何が嬉しいかというと、画像のようなノリで楽に終わってないチケットにツッコミを入れることができます。</p><img src="/images/20210806b/image_3.png" alt="" width="759" height="585" loading=""><p>未完了のチケットを調べて、誰の担当になっているかを確認して、適宜終わっているか確認するのは単純に手間がかかるだけでなく、急かしているような印象を与えないための配慮など、人対人のコミュニケーションには時間とスタミナを奪われがちです。</p><p>こういったものはなるべく自動化していきたいですね。</p><p>OSSにしたことでどこかで利用いただければ嬉しいです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;私のチームではタスク管理でバックログを使っています。&lt;/p&gt;
&lt;p&gt;タスクのカテゴリ、マイルストーンやそれらを組み合わせた検索機能が充実している事や、タスクを入力するとバーンダウンチャートが自動で出来上がるところなど素晴らしいツールだと</summary>
      
    
    
    
    <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Slack" scheme="https://future-architect.github.io/tags/Slack/"/>
    
    <category term="Backlog" scheme="https://future-architect.github.io/tags/Backlog/"/>
    
  </entry>
  
  <entry>
    <title>Cypressでテスト可能なドラッグアンドドロップ実装</title>
    <link href="https://future-architect.github.io/articles/20210806a/"/>
    <id>https://future-architect.github.io/articles/20210806a/</id>
    <published>2021-08-05T15:00:00.000Z</published>
    <updated>2021-08-06T02:39:34.019Z</updated>
    
    <content type="html"><![CDATA[<p>お仕事コードで、「Cypressで頑張ったけどドラッグアンドドロップのテストができない」という相談を受けました。僕も試行錯誤してみたのですが、どうもうまくいかず・・・</p><h1 id="なぜうまくいかないのか"><a href="#なぜうまくいかないのか" class="headerlink" title="なぜうまくいかないのか"></a>なぜうまくいかないのか</h1><p>CypressとかのE2Eテストは、完全なユーザーの入力をエミュレーションするわけではなくて、ユーザーが入力したときに発生するであろうイベントを擬似的に作って投げているにすぎません。実際に発生するイベントよりも少ないです。例えば、マウスが移動すると、マウスのしたの要素のmouseover/mouseleaveイベントが発生しまくると思いますが、テストではそういうことはせず、必要な要素のクリックとか、inputへのテキスト入力とか必要なイベントのみを発行します。</p><p>お仕事コードで使っていたのはこのライブラリです。さまざまなマウスジェスチャーを実現してくれる便利そうなライブラリですね。</p><p><a href="https://use-gesture.netlify.app/">https://use-gesture.netlify.app/</a></p><p>ドラッグアンドドロップのサンプルは<a href="https://codesandbox.io/s/fh8r8?file=/src/index.js">こちら</a>にあります。</p><p>これを見ると、マウスの座標をとって、現在位置を取得しています。そして、それをアニメーションライブラリに投げ込んでいるようですね。ドラッグ中に連続的に順番を入れ替えています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bind = useDrag(<span class="function">(<span class="params">&#123; args: [originalIndex], active, movement: [, y] &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> curIndex = order.current.indexOf(originalIndex)</span><br><span class="line">  <span class="keyword">const</span> curRow = clamp(<span class="built_in">Math</span>.round((curIndex * <span class="number">100</span> + y) / <span class="number">100</span>), <span class="number">0</span>, items.length - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> newOrder = swap(order.current, curIndex, curRow)</span><br><span class="line">  <span class="comment">// Feed springs new style data, they&#x27;ll animate the view without causing a single render</span></span><br><span class="line">  setSprings(fn(newOrder, active, originalIndex, curIndex, y))</span><br><span class="line">  <span class="keyword">if</span> (!active) order.current = newOrder</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>こういうのはE2Eテストではやりにくいですね。</p><h1 id="E2Eテストしやすいドラッグアンドドロップ"><a href="#E2Eテストしやすいドラッグアンドドロップ" class="headerlink" title="E2Eテストしやすいドラッグアンドドロップ"></a>E2Eテストしやすいドラッグアンドドロップ</h1><p>実装してみたサンプルがこれです。3つの要素のリストを並べ替えします。</p><img src="/images/20210806a/スクリーンショット_2021-07-29_18.38.23.png" alt="ドラッグでリスト並び替え画面" width="1200" height="611" loading="lazy"><p>E2Eテストも通っています。これの実現方法を紹介します。</p><img src="/images/20210806a/スクリーンショット_2021-07-29_18.39.50.png" alt="ドラッグでリスト並び替え画面" width="1200" height="717" loading="lazy"><p>まずテストコード側から。テストしやすいドラッグアンドドロップは、「ドラッグする要素」と、「それを落とした要素」が明確であるケースです。この場合、data-item属性のついた要素がドラッグする赤い四角、data-targetはドロップ先で、各要素の間と、リストの先頭、末尾に4つあります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&quot;drag and drop&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&quot;http://localhost:3000/&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;can drag and drop items&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&quot;[data-item=&#x27;B&#x27;]&quot;</span>).trigger(<span class="string">&quot;dragstart&quot;</span>).trigger(<span class="string">&quot;dragleave&quot;</span>);</span><br><span class="line">    cy.get(<span class="string">&quot;[data-target=&#x27;0&#x27;]&quot;</span>)</span><br><span class="line">      .trigger(<span class="string">&quot;dragenter&quot;</span>)</span><br><span class="line">      .trigger(<span class="string">&quot;dragover&quot;</span>)</span><br><span class="line">      .trigger(<span class="string">&quot;drop&quot;</span>)</span><br><span class="line">      .trigger(<span class="string">&quot;dragend&quot;</span>);</span><br><span class="line">    cy.get(<span class="string">&quot;.item:first&quot;</span>).contains(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>create-react-appで、TypeScriptのプロジェクトを作ります。その後、Tailwind CSSを設定した状態からスタートします。説明は公式ページを参照してください。ちょっと長くなるので本エントリーでは省略します。</p><ul><li><a href="https://create-react-app.dev/docs/adding-typescript/">Create React App: Adding TypeScript</a></li><li><a href="https://tailwindcss.com/docs/guides/create-react-app">Install Tailwind CSS with Create React App</a></li></ul><p>いきなり完成形だと長すぎるので、まずはイベントハンドラを実装する前の状態をお見せします。Listが親の要素、Elemがドラッグする要素、Targetがドロップ先の要素で、Listの中では<code>&lt;Target&gt;&lt;Elem&gt;&lt;Target&gt;...&lt;Elem&gt;&lt;Target&gt;</code>と互い違いに出力されます。</p><figure class="highlight js"><figcaption><span>index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Elem</span>(<span class="params">props: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  label: string;</span></span></span><br><span class="line"><span class="params"><span class="function">  index: number;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">data-item</span>=<span class="string">&#123;props.label&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">item</span> <span class="attr">flex-initial</span> <span class="attr">border-4</span> <span class="attr">border-red-400</span> <span class="attr">p-4</span> <span class="attr">rounded</span> <span class="attr">cursor-move</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;props.label&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Target</span>(<span class="params">props: &#123; index: number &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">target</span> <span class="attr">flex-initial</span> <span class="attr">p-2</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">data-target</span>=<span class="string">&#123;props.index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">List</span>(<span class="params">props: &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [items, setItems] = useState([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> tags = [<span class="xml"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">index</span>=<span class="string">&#123;0&#125;</span> <span class="attr">onDrop</span>=<span class="string">&#123;onDrop&#125;</span> /&gt;</span></span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [i, item] <span class="keyword">of</span> items.entries()) &#123;</span><br><span class="line">    tags.push(</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Elem</span> <span class="attr">label</span>=<span class="string">&#123;item&#125;</span> <span class="attr">index</span>=<span class="string">&#123;i&#125;</span> <span class="attr">onDrag</span>=<span class="string">&#123;onDrag&#125;</span> /&gt;</span></span>,</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">index</span>=<span class="string">&#123;i</span> + <span class="attr">1</span>&#125; <span class="attr">onDrop</span>=<span class="string">&#123;onDrop&#125;</span> /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex border-2 border-blue-400 p-4 rounded&quot;</span>&gt;</span>&#123;tags&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">List</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>一つずつ完成させていきましょう。まず、ドラッグ可能な要素は、onDragStart/onDragEndのイベントを実装します。onDragStartで、自分がドラッグされているよ、ということを親に伝えます。それ以外は見た目の透明度を変えるぐらいですね。ここでは半透明にしていますが、完全に透明にしてしまって幅もゼロにしてしまうと、react-use-gestureのサンプルみたいな、リアルタイムにリストが書き変わって動いているような感じにできると思います。</p><figure class="highlight js"><figcaption><span>index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Elem</span>(<span class="params">props: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  label: string;</span></span></span><br><span class="line"><span class="params"><span class="function">  index: number;</span></span></span><br><span class="line"><span class="params"><span class="function">  onDrag: (index: number) =&gt; <span class="keyword">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [dragging, setDragging] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> dragStart = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setDragging(<span class="literal">true</span>);</span><br><span class="line">    props.onDrag(props.index);</span><br><span class="line">  &#125;, [props]);</span><br><span class="line">  <span class="keyword">const</span> dragEnd = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setDragging(<span class="literal">false</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">data-item</span>=<span class="string">&#123;props.label&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">item</span> <span class="attr">flex-initial</span> <span class="attr">border-4</span> <span class="attr">border-red-400</span> <span class="attr">p-4</span> <span class="attr">rounded</span> <span class="attr">cursor-move</span> $&#123;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">dragging</span> ? &quot;<span class="attr">opacity-40</span>&quot; <span class="attr">:</span> &quot;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onDragStart</span>=<span class="string">&#123;dragStart&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onDragEnd</span>=<span class="string">&#123;dragEnd&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;props.label&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次はドロップ先です。onDragOver/onDragEnter/onDragLeave/onDropを実装します。これもonDropで親のリストに自分にドロップされたことを伝えます。このサンプルではTailwind CSSのパディング属性（p-2, p-6)で雑に空間を広げていますが、元の要素のサイズ＋要素間の隙間x2の幅にきちんと計算して表示してあげると、きれいな見た目になると思います。ついでにアニメーションでその幅に変わるようにしてあげるともっと良さそう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Target</span>(<span class="params">props: &#123; index: number; onDrop: (index: number) =&gt; <span class="keyword">void</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [over, setOver] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> dragOver = useCallback(<span class="function">(<span class="params">e: DragEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">const</span> dragEnter = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setOver(<span class="literal">true</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">const</span> dragLeave = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setOver(<span class="literal">false</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">const</span> drop = useCallback(</span><br><span class="line">    <span class="function">(<span class="params">e: DragEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      setOver(<span class="literal">false</span>);</span><br><span class="line">      props.onDrop(props.index);</span><br><span class="line">    &#125;,</span><br><span class="line">    [props]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onDragOver</span>=<span class="string">&#123;dragOver&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onDragEnter</span>=<span class="string">&#123;dragEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onDragLeave</span>=<span class="string">&#123;dragLeave&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onDrop</span>=<span class="string">&#123;drop&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">target</span> <span class="attr">flex-initial</span> $&#123;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">over</span> ? &quot; <span class="attr">border-2</span> <span class="attr">border-dotted</span> <span class="attr">border-red-200</span> <span class="attr">p-6</span>&quot; <span class="attr">:</span> &quot;<span class="attr">p-2</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">data-target</span>=<span class="string">&#123;props.index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後が親のリストです。子供の「ドラッグされたよ」「ドロップされたよ」情報を受け取り、useEffectで並び替えを実行します。</p><figure class="highlight js"><figcaption><span>index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">List</span>(<span class="params">props: &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [items, setItems] = useState([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]);</span><br><span class="line">  <span class="keyword">let</span> [src, setSrc] = useState(-<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> [target, setTarget] = useState(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onDrag = useCallback(<span class="function">(<span class="params">index: number</span>) =&gt;</span> &#123;</span><br><span class="line">    setSrc(index);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`🥚 onDrag <span class="subst">$&#123;index&#125;</span>`</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onDrop = useCallback(<span class="function">(<span class="params">index: number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`🐣 onDrop <span class="subst">$&#123;index&#125;</span>`</span>);</span><br><span class="line">    setTarget(index);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (src !== -<span class="number">1</span> &amp;&amp; target !== -<span class="number">1</span>) &#123;</span><br><span class="line">      setItems(swap(items, src, target));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [src, target]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> tags = [<span class="xml"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">index</span>=<span class="string">&#123;0&#125;</span> <span class="attr">onDrop</span>=<span class="string">&#123;onDrop&#125;</span> /&gt;</span></span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [i, item] <span class="keyword">of</span> items.entries()) &#123;</span><br><span class="line">    tags.push(</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Elem</span> <span class="attr">label</span>=<span class="string">&#123;item&#125;</span> <span class="attr">index</span>=<span class="string">&#123;i&#125;</span> <span class="attr">onDrag</span>=<span class="string">&#123;onDrag&#125;</span> /&gt;</span></span>,</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">index</span>=<span class="string">&#123;i</span> + <span class="attr">1</span>&#125; <span class="attr">onDrop</span>=<span class="string">&#123;onDrop&#125;</span> /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex border-2 border-blue-400 p-4 rounded&quot;</span>&gt;</span>&#123;tags&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>並び替えはもっと効率がいい実装はありますが、とりあえず雑に。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">items: readonly string[], src: number, dest: number</span>): <span class="title">string</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (src &lt; dest) &#123;</span><br><span class="line">    dest--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> srcItem = items[src];</span><br><span class="line">  <span class="keyword">const</span> tmp = [...items.slice(<span class="number">0</span>, src), ...items.slice(src + <span class="number">1</span>)];</span><br><span class="line">  <span class="keyword">switch</span> (dest) &#123;</span><br><span class="line">    <span class="keyword">case</span> tmp.length:</span><br><span class="line">      tmp.push(srcItem);</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> [srcItem, ...tmp];</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> [...tmp.slice(<span class="number">0</span>, dest), srcItem, ...tmp.slice(dest)];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>滑らかなアニメーションはもうちょっとCSSを頑張る必要がありそうですが、ひとまずこんな感じでCypressでテスト可能なドラッグアンドドロップ処理が実装できました。</p><p>実際にこのまま利用するとドラッグアンドドロップなロジックがべったりなので、必要なイベントハンドラの錬成とかをカスタムフックでまとめるとか、あるいはここのListとTarget相当をライブラリ化して、子供の要素をprops.childrenか何かでもらったのをソートして結果をコールバックするようなSortableListみたいなコンポーネントにするか、そんな感じになるかと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;お仕事コードで、「Cypressで頑張ったけどドラッグアンドドロップのテストができない」という相談を受けました。僕も試行錯誤してみたのですが、どうもうまくいかず・・・&lt;/p&gt;
&lt;h1 id=&quot;なぜうまくいかないのか&quot;&gt;&lt;a href=&quot;#なぜうまくいかないのか&quot; class</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
    <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night #13「アジャイルと品質保証を考える勉強会」</title>
    <link href="https://future-architect.github.io/articles/20210804b/"/>
    <id>https://future-architect.github.io/articles/20210804b/</id>
    <published>2021-08-03T15:00:01.000Z</published>
    <updated>2021-08-04T02:20:15.518Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210804b/sea-985545_640.jpg" alt="" title="MerioによるPixabayからの画像" width="640" height="573" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャーアーキテクトの岡部です<br>2021/7/9（金）に<a href="https://future.connpass.com/event/217290/">Future Tech Night #13～アジャイルと品質保証を考える勉強会～</a>を開催しました。</p><p>私は新卒でフューチャーアーキテクトに入社して、現在は品質管理部門で、全社横断で設計開発の品質向上プロセスの策定・実行を担っています。</p><p>品質管理部門として、アジャイル開発を採用しているプロジェクトに関わることがあり、縁があって今回の勉強会に登壇することになりました。</p><p>今までのFuture Tech Nightでは、プレゼンによる事例紹介がメインでしたが、今回は事例紹介に加えて、パネルディスカッション形式を取り入れて、開催を試みました。当ブログ記事にて、当日のコンテンツ紹介いたします！</p><h1 id="事例紹介"><a href="#事例紹介" class="headerlink" title="事例紹介"></a>事例紹介</h1><p>当社のコンサルタントの宮崎より、アジャイル開発の基本的な考え方と推進する上での苦労話や実際の工夫・心掛けているポイントを現場の実体験を添えて、紹介してもらいました。</p><p>詳細は、以下の資料をご覧ください。</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/EBBSFVs939AcyO" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/shotamiyazaki6/future-tech-night-agile-20210709" title=" Future Tech Night Agile勉強会 20210709" target="_blank"> Future Tech Night Agile勉強会 20210709</a> </strong> from <strong><a href="https://www.slideshare.net/shotamiyazaki6" target="_blank">shotamiyazaki6</a></strong> </div><p>余談ですが、宮崎とは新卒同期で数年前に同じプロジェクトで仕事をしていたこともありました。私自身はアジャイルでの開発経験はないのですが、現場がイメージできる内容のプレゼンでした。</p><h1 id="パネルディスカッション"><a href="#パネルディスカッション" class="headerlink" title="パネルディスカッション"></a>パネルディスカッション</h1><p>パネラーには事例紹介を行った宮崎に、当社のコンサルタントの<a href="/authors/%E6%BE%81%E5%B7%9D%E5%96%9C%E8%A6%8F/">澁川</a>を加えて、私がモデレーターを務めて、パネルディスカッションを行いました。<br>ディスカッションテーマは下記の2つ用意して、参加者からQAを交えながら、進めていきました。</p><p><strong>①アジャイルならでは勘所とは</strong><br>キーワード：ベロシティ、スクラムマスター、見積もり、etc</p><p><strong>②アジャイル開発での品質保証</strong><br>キーワード：非機能要件、仕様書作成、テスト手法、etc</p><p>私からはウォータフォール開発(以下WF開発)とアジャイル開発の比較という切り口で質問をして、ディスカッションを深めていきました。事例紹介で上がっていた「ベロシティが上がらない」、「品質が維持しにくい。」、について対するディスカッションを一部抜粋して紹介します。</p><h2 id="ベロシティが上がらない"><a href="#ベロシティが上がらない" class="headerlink" title="ベロシティが上がらない"></a>ベロシティが上がらない</h2><p><strong>岡部</strong>「アジャイル開発において、ベロシティが上がらないことは、WF開発における遅延にならないか。アジャイル開発ならでは難しさはあるか？」<br><strong>宮崎</strong>「アジャイル開発とWF開発の大きな価値観の違いとして、アジャイル開発はベストエフォートで進めるという価値観があり、ときには進捗が上がらないことを許容できる状況でないアジャイルはやりにくい、納期や機能数が決まっている状況では、WF開発を選択した方がいい。」<br><strong>澁川</strong>「ベストエフォートと違う言い方をすると、バッファを積むか積まないかの違いだと思う。WF開発は見積もりにバッファを入れることが通例であるが、アジャイル開発はバッファを積まず、予定より早く終わったら、次の機能開発に着手するという考え方があり、バッファを積まない。その代わりにベロシティが上がらない場合は目標調整を行うことがある。」</p><h2 id="品質が維持しにくい。"><a href="#品質が維持しにくい。" class="headerlink" title="品質が維持しにくい。"></a>品質が維持しにくい。</h2><p><strong>岡部</strong>「アジャイル開発での品質保証するために実践していることは？」<br><strong>宮崎</strong>「顧客と相談は必要であるが、一定のスプリントを経たら、地盤固めするためのスプリントを設けることがあります。一定のスプリントで機能追加した内容を振り返り、ドキュメントの整備や非機能要件のテストを行えるのとよい。」<br><strong>澁川</strong>「機能開発を優先したい顧客が納得いただくのは難しい場面もあるが、ひとつのスプリントを地盤固めに専念できる環境が作れると品質保証に専念できてよい。」</p><h1 id="登壇した感想"><a href="#登壇した感想" class="headerlink" title="登壇した感想"></a>登壇した感想</h1><p>ディスカッションする中で、WF開発とアジャイル開発を比較することで、各々の開発手法の向き・不向きを再認識できてよかったです。</p><p>プロジェクト特性を鑑みた上でより効果的な開発手法を選定する、言われたものを作るだけシステム開発するだけではなく、顧客を巻き込みよりよいシステムを作るというスタンスがITコンサルタントの醍醐味のひとつだと改めて感じました。パネルディスカッションも初めての試みながら、アンケート結果は概ね良好でした。今後のFuture Tech Nightの採用を考えてみたいと思います。</p><p>改めてご参加いただい方はありがとうございました。なにか学びを得る機会になっていれば幸いです。</p><p>次回のイベント情報は<a href="https://future.connpass.com/">connpass</a>で確認できます。<br>ぜひ遊びに来てください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210804b/sea-985545_640.jpg&quot; alt=&quot;&quot; title=&quot;MerioによるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;573&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
    <category term="アジャイル" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>SQLファイルから型安全なコードを生成するsqlc</title>
    <link href="https://future-architect.github.io/articles/20210804a/"/>
    <id>https://future-architect.github.io/articles/20210804a/</id>
    <published>2021-08-03T15:00:00.000Z</published>
    <updated>2021-08-04T01:16:23.354Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの辻です。<a href="https://future-architect.github.io/articles/20210726a/">GoのORマッパー連載</a>8日目です。本記事では <code>sqlc</code> を紹介します。早速ですが、結論から行きましょう。</p><h2 id="sqlc-まとめ"><a href="#sqlc-まとめ" class="headerlink" title="sqlc まとめ"></a><code>sqlc</code> まとめ</h2><ul><li>SQLファイルからデータベースにアクセスできる型安全なGoのコードを生成するライブラリ<ul><li>構造体のモデルの手書き実装不要</li><li>複数テーブルをJOINしたときのマッパー実装不要</li><li>生成されるコードは不要なリフレクションなし</li></ul></li></ul><p>SQLをがんがん書きたい、でも面倒なマッパー構造体は書きたくない、という開発者にとっては大きな味方になります。</p><h2 id="sqlc-の紹介"><a href="#sqlc-の紹介" class="headerlink" title="sqlc の紹介"></a><code>sqlc</code> の紹介</h2><img src="/images/20210804a/sqlc.png" alt="" width="600" height="345" loading="lazy"><p><code>sqlc</code> はSQLファイルからGoのアプリケーションコードを生成するライブラリです。2020/2に <a href="https://github.com/kyleconroy/sqlc/releases/tag/v1.0.0"><code>v1.0.0</code></a> をリリースし、着々とスターを伸ばしています。2021/08現在は <a href="https://github.com/kyleconroy/sqlc/releases/tag/v1.8.0"><code>v1.8.0</code></a> をリリースしています。本資料で生成しているコードも <code>v1.8.0</code> を用いています。</p><img src="/images/20210804a/e70cd691-4302-0845-34f9-7a7434236a16.png" alt="" width="941" height="625" loading="lazy"><p><a href="https://star-history.t9t.io/#kyleconroy/sqlc">https://star-history.t9t.io/#kyleconroy/sqlc</a></p><p>2021/08現在ではMySQLとPostgreSQLの2つのデータベースを<a href="https://docs.sqlc.dev/en/v1.8.0/reference/language-support.html">サポート</a>しています。</p><p>データベースのパーサを適用してクエリを解析している点が設計上の大きな特徴です。解析エンジンがPostgreSQLの場合、実際のPostgreSQLサーバーのソースを <code>cgo</code> を経由して、Goから呼び出せるようになっています。PostgreSQLのクエリ解析エンジン本体は <a href="https://github.com/pganalyze/pg_query_go"><code>pganalyze/pg_query_go</code></a> が提供しています。</p><p>ひとたび以下のようなSQLを実装すれば、<code>sqlc generate</code> コマンドを実行することで、型安全なGoのアプリケーションコードが生成できます。SQLファイルは複数に分割することもできます。ユースケースごとにSQLファイルを分ける、といった使い方ができるでしょう。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetAuthor :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> author</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name: ListAuthors :many</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> author</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name: CreateAuthor :one</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> author (id, name) <span class="keyword">VALUES</span> ($<span class="number">1</span>, $<span class="number">2</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name: DeleteAuthor :exec</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> author</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name: ListBookOverPrice :many</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">        b.title</span><br><span class="line">     ,a.name</span><br><span class="line">     ,b.price</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    book b</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    author a</span><br><span class="line">    <span class="keyword">ON</span><span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">AND</span> b.author_id <span class="operator">=</span> a.id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    price <span class="operator">&gt;</span> $<span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    b.title</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>※データベースのスキーマ例</p><p>本記事ではデータベースはPostgreSQLとします。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">integer</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">99</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    created_at <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> now()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book</span><br><span class="line">(</span><br><span class="line">    id        <span class="type">integer</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    title     <span class="type">varchar</span>(<span class="number">99</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    price     <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    author_id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    created_at <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> now()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> <span class="keyword">foreign</span> key (author_id) <span class="keyword">references</span> author (id);</span><br></pre></td></tr></table></figure><p><code>sqlc</code> の作者が書いている記事 <a href="https://conroy.org/introducing-sqlc">Introducing sqlc - Compile SQL queries to type-safe Go</a> の中にある <code>How to use sqlc in 3 steps</code> という謳い文句に嘘はないです。とてもシンプル。</p><ul><li>SQLのクエリを書く</li><li><code>sqlc</code> コマンドを実行して、クエリに対する型安全性の高いインターフェースを提供するGoのコードを生成する</li><li><code>sqlc</code> で生成したメソッドを呼び出すアプリケーションコードを書く</li></ul><p>実際に上のSQLファイルに対して <code>sqlc generate</code> コマンドを実行すると以下のようなGoのコードが生成されます。</p><h3 id="生成されたSQLファイル"><a href="#生成されたSQLファイル" class="headerlink" title="生成されたSQLファイル"></a>生成されたSQLファイル</h3><ul><li>db.go</li><li>models.go</li><li>query.sql.go</li></ul><figure class="highlight go"><figcaption><span>db.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code generated by sqlc. DO NOT EDIT.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DBTX <span class="keyword">interface</span> &#123;</span><br><span class="line">ExecContext(context.Context, <span class="keyword">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) (sql.Result, error)</span><br><span class="line">PrepareContext(context.Context, <span class="keyword">string</span>) (*sql.Stmt, error)</span><br><span class="line">QueryContext(context.Context, <span class="keyword">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) (*sql.Rows, error)</span><br><span class="line">QueryRowContext(context.Context, <span class="keyword">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) *sql.Row</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(db DBTX)</span> *<span class="title">Queries</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Queries&#123;db: db&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Queries <span class="keyword">struct</span> &#123;</span><br><span class="line">db DBTX</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span> <span class="title">WithTx</span><span class="params">(tx *sql.Tx)</span> *<span class="title">Queries</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Queries&#123;</span><br><span class="line">db: tx,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>models.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code generated by sqlc. DO NOT EDIT.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Author <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        <span class="keyword">int32</span></span><br><span class="line">Name      <span class="keyword">string</span></span><br><span class="line">CreatedAt time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        <span class="keyword">int32</span></span><br><span class="line">Title     <span class="keyword">string</span></span><br><span class="line">Price     <span class="keyword">int32</span></span><br><span class="line">AuthorID  <span class="keyword">int32</span></span><br><span class="line">CreatedAt time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>query.sql.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code generated by sqlc. DO NOT EDIT.</span></span><br><span class="line"><span class="comment">// source: query.sql</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createAuthor = <span class="string">`-- name: CreateAuthor :one</span></span><br><span class="line"><span class="string">    INSERT INTO author (id, name) VALUES ($1, $2) RETURNING id, name, created_at</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreateAuthorParams <span class="keyword">struct</span> &#123;</span><br><span class="line">ID   <span class="keyword">int32</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span> <span class="title">CreateAuthor</span><span class="params">(ctx context.Context, arg CreateAuthorParams)</span> <span class="params">(Author, error)</span></span> &#123;</span><br><span class="line">row := q.db.QueryRowContext(ctx, createAuthor, arg.ID, arg.Name)</span><br><span class="line"><span class="keyword">var</span> i Author</span><br><span class="line">err := row.Scan(&amp;i.ID, &amp;i.Name, &amp;i.CreatedAt)</span><br><span class="line"><span class="keyword">return</span> i, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deleteAuthor = <span class="string">`-- name: DeleteAuthor :exec</span></span><br><span class="line"><span class="string">    DELETE FROM author</span></span><br><span class="line"><span class="string">    WHERE id = $1</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span> <span class="title">DeleteAuthor</span><span class="params">(ctx context.Context, id <span class="keyword">int32</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">_, err := q.db.ExecContext(ctx, deleteAuthor, id)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getAuthor = <span class="string">`-- name: GetAuthor :one</span></span><br><span class="line"><span class="string">    SELECT id, name, created_at FROM author</span></span><br><span class="line"><span class="string">    WHERE id = $1 LIMIT 1</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span> <span class="title">GetAuthor</span><span class="params">(ctx context.Context, id <span class="keyword">int32</span>)</span> <span class="params">(Author, error)</span></span> &#123;</span><br><span class="line">row := q.db.QueryRowContext(ctx, getAuthor, id)</span><br><span class="line"><span class="keyword">var</span> i Author</span><br><span class="line">err := row.Scan(&amp;i.ID, &amp;i.Name, &amp;i.CreatedAt)</span><br><span class="line"><span class="keyword">return</span> i, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listAuthors = <span class="string">`-- name: ListAuthors :many</span></span><br><span class="line"><span class="string">    SELECT id, name, created_at FROM author</span></span><br><span class="line"><span class="string">    ORDER BY id</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span> <span class="title">ListAuthors</span><span class="params">(ctx context.Context)</span> <span class="params">([]Author, error)</span></span> &#123;</span><br><span class="line">rows, err := q.db.QueryContext(ctx, listAuthors)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">var</span> items []Author</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> i Author</span><br><span class="line"><span class="keyword">if</span> err := rows.Scan(&amp;i.ID, &amp;i.Name, &amp;i.CreatedAt); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">items = <span class="built_in">append</span>(items, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := rows.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := rows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> items, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listBookOverPrice = <span class="string">`-- name: ListBookOverPrice :many</span></span><br><span class="line"><span class="string">    SELECT</span></span><br><span class="line"><span class="string">            b.title</span></span><br><span class="line"><span class="string">         ,a.name</span></span><br><span class="line"><span class="string">         ,b.price</span></span><br><span class="line"><span class="string">    FROM</span></span><br><span class="line"><span class="string">        book b</span></span><br><span class="line"><span class="string">            LEFT JOIN</span></span><br><span class="line"><span class="string">        author a</span></span><br><span class="line"><span class="string">        ON1 = 1</span></span><br><span class="line"><span class="string">            AND b.author_id = a.id</span></span><br><span class="line"><span class="string">    WHERE</span></span><br><span class="line"><span class="string">        price &gt; $1</span></span><br><span class="line"><span class="string">    ORDER BY</span></span><br><span class="line"><span class="string">        b.title</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListBookOverPriceRow <span class="keyword">struct</span> &#123;</span><br><span class="line">Title <span class="keyword">string</span></span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Price <span class="keyword">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span> <span class="title">ListBookOverPrice</span><span class="params">(ctx context.Context, price <span class="keyword">int32</span>)</span> <span class="params">([]ListBookOverPriceRow, error)</span></span> &#123;</span><br><span class="line">rows, err := q.db.QueryContext(ctx, listBookOverPrice, price)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">var</span> items []ListBookOverPriceRow</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> i ListBookOverPriceRow</span><br><span class="line"><span class="keyword">if</span> err := rows.Scan(&amp;i.Title, &amp;i.Name, &amp;i.Price); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">items = <span class="built_in">append</span>(items, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := rows.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := rows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> items, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記では <code>db</code> パッケージとして生成されました。パッケージ名は <code>sqlc</code> の<a href="https://docs.sqlc.dev/en/latest/reference/config.html">設定ファイル</a>で調整できます。</p><h3 id="アプリケーション実装例"><a href="#アプリケーション実装例" class="headerlink" title="アプリケーション実装例"></a>アプリケーション実装例</h3><p><code>sqlc</code> が生成したコードを使うアプリケーションの実装例は以下のような感じです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/d-tsuji/go-sandbox/sqlc/db&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/jackc/pgx/v4/stdlib&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pgx, err := sql.Open(<span class="string">&quot;pgx&quot;</span>, <span class="string">&quot;postgres://booktest:pass@localhost:15432/testdb?sslmode=disable&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">q := db.New(pgx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------------------------------</span></span><br><span class="line"><span class="comment">// create user</span></span><br><span class="line">param := db.CreateAuthorParams&#123;</span><br><span class="line">ID:   <span class="number">104</span>,</span><br><span class="line">Name: <span class="string">&quot;Daishiro Tsuji&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">u, err := q.CreateAuthor(ctx, param)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(u)</span><br><span class="line"><span class="comment">// &#123;104 Daishiro Tsuji 2021-08-02 08:53:51.40108 +0000 UTC&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get user</span></span><br><span class="line">u, err = q.GetAuthor(ctx, <span class="number">101</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(u)</span><br><span class="line"><span class="comment">// &#123;101 Mat Ryer 2021-08-02 08:53:44.580572 +0000 UTC&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// delete user</span></span><br><span class="line"><span class="keyword">if</span> err := q.DeleteAuthor(ctx, <span class="number">104</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list user</span></span><br><span class="line">ls, err := q.ListBookOverPrice(ctx, <span class="number">3500</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, l := <span class="keyword">range</span> ls &#123;</span><br><span class="line">fmt.Println(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;Go言語でつくるインタプリタ Thorsten Ball 3740&#125;</span></span><br><span class="line"><span class="comment">// &#123;Go言語によるWebアプリケーション開発 Mat Ryer 3520&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="個人的に特に嬉しいポイント"><a href="#個人的に特に嬉しいポイント" class="headerlink" title="個人的に特に嬉しいポイント"></a>個人的に特に嬉しいポイント</h2><ul><li>クエリベースでコード生成可能</li></ul><p>データベースに対して発行するSQLのSELECT文は、経験上、複数のテーブルをJOINすることが多く、また、複雑になりがちです。またデータベースクライアントでデータベースに接続し、実際にクエリを発行し、実行計画を確認しながらクエリの性能をチェックすることが多いです。</p><p>SQLを書いてしまうことが多く、記述したSQLをもとに型安全なGoのアプリケーションコードを生成できるのはかなり嬉しいポイントです。</p><ul><li>自作のマッパー構造体不要</li></ul><p>また、他のORMを使った場合、モデルのコードがテーブルベースであることが多く、生のSQLをORMに実装したとしても、結果を取得するマッパーのモデルはクエリ個別に作ることが必要になることもあります。こうしたSELECT文におけるマッパーが不要な点も <code>sqlc</code> を使う嬉しいポイントと言えます。</p><ul><li>ORMライブラリ不要</li></ul><p>生成されたコードを用いることで直接クエリの結果を取得できます。すなわち、<code>database/sql</code> パッケージを直接用いることでORMライブラリは不要となります。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/kyleconroy/sqlc">https://github.com/kyleconroy/sqlc</a></li><li><a href="https://conroy.org/introducing-sqlc">https://conroy.org/introducing-sqlc</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIGの辻です。&lt;a href=&quot;https://future-architect.github.io/articles/20210726a/&quot;&gt;GoのORマッパー連載&lt;/a&gt;8日目です。本記事では &lt;code&gt;sqlc&lt;/code&gt; を紹介します。早速ですが、結論から行き</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
    <category term="コード生成" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Go言語で2WaySQL</title>
    <link href="https://future-architect.github.io/articles/20210803a/"/>
    <id>https://future-architect.github.io/articles/20210803a/</id>
    <published>2021-08-02T15:00:00.000Z</published>
    <updated>2021-08-04T01:21:43.471Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210803a/blue-2137333_1280.jpg" alt="" width="1280" height="670" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>この記事は<a href="/articles/20210726b/">ORMとクエリビルダー連載</a>の7記事目です。</p><p>こんにちは。2021年4月入社の本田です。私が当社でアルバイトをしていたときに作成した<a href="https://gitlab.com/osaki-lab/twowaysql">twowaysql</a>というツールについて紹介します。</p><p>Javaでは<a href="https://future-architect.github.io/uroborosql-doc/">uroboroSQL</a>や<a href="https://doma.readthedocs.io/en/2.45.0/">DOMA</a>など広く使われている2WaySQLライブラリが存在しますが、Goでこれがデファクトスタンダートというものは現在のところ存在しません。</p><p>そのためGo言語でtwowaysqlという2WaySQLライブラリを実装することにしました。</p><h1 id="2WaySQLとは"><a href="#2WaySQLとは" class="headerlink" title="2WaySQLとは"></a>2WaySQLとは</h1><p>2WaySQLとは二つの実行方法を持つSQL文のことです。コメントとして<code>/* IF */</code>, <code>/* ELIF */</code>, <code>/* ELSE */</code>, <code>/* END */</code>という制御構造や、<code>/* value */</code>のようにバインドしたい変数を記述します。</p><p>2WaySQLはtwowaysqlで処理してから実行することもできますし、そのままSQLクライアントツールで実行することもできます。</p><h1 id="使用例"><a href="#使用例" class="headerlink" title="使用例"></a>使用例</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jmoiron/sqlx&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line"><span class="string">&quot;gitlab.com/osaki-lab/twowaysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">EmpNo     <span class="keyword">int</span>    <span class="string">`db:&quot;employee_no&quot;`</span></span><br><span class="line">DeptNo    <span class="keyword">int</span>    <span class="string">`db:&quot;dept_no&quot;`</span></span><br><span class="line">FirstName <span class="keyword">string</span> <span class="string">`db:&quot;first_name&quot;`</span></span><br><span class="line">LastName  <span class="keyword">string</span> <span class="string">`db:&quot;last_name&quot;`</span></span><br><span class="line">Email     <span class="keyword">string</span> <span class="string">`db:&quot;email&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Params <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="keyword">string</span> <span class="string">`twowaysql:&quot;name&quot;`</span></span><br><span class="line">EmpNo    <span class="keyword">int</span>    <span class="string">`twowaysql:&quot;EmpNo&quot;`</span></span><br><span class="line">MaxEmpNo <span class="keyword">int</span>    <span class="string">`twowaysql:&quot;maxEmpNo&quot;`</span></span><br><span class="line">DeptNo   <span class="keyword">int</span>    <span class="string">`twowaysql:&quot;deptNo&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">db, err := sqlx.Open(<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;user=postgres password=postgres dbname=postgres sslmode=disable&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">tw := twowaysql.New(db)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> people []Person</span><br><span class="line"><span class="keyword">var</span> params = Params&#123;</span><br><span class="line">MaxEmpNo: <span class="number">2000</span>,</span><br><span class="line">DeptNo:   <span class="number">15</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = tw.Select(ctx, &amp;people, <span class="string">`SELECT * FROM persons WHERE employee_no &lt; /*maxEmpNo*/1000 /* IF deptNo */ AND dept_no &lt; /*deptNo*/1 /* END */`</span>, &amp;params)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;select failed: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n%#v\n%#v&quot;</span>, people[<span class="number">0</span>], people[<span class="number">1</span>], people[<span class="number">2</span>])</span><br><span class="line"><span class="comment">//Person&#123;EmpNo:1, DeptNo:10, FirstName:&quot;Evan&quot;, LastName:&quot;MacMans&quot;, Email:&quot;evanmacmans@example.com&quot;&#125;</span></span><br><span class="line"><span class="comment">//Person&#123;EmpNo:3, DeptNo:12, FirstName:&quot;Jimmie&quot;, LastName:&quot;Bruce&quot;, Email:&quot;jimmiebruce@example.com&quot;&#125;</span></span><br><span class="line"><span class="comment">//Person&#123;EmpNo:2, DeptNo:11, FirstName:&quot;Malvina&quot;, LastName:&quot;FitzSimons&quot;, Email:&quot;malvinafitzsimons@example.com&quot;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="twowaysqlの現在の公開関数"><a href="#twowaysqlの現在の公開関数" class="headerlink" title="twowaysqlの現在の公開関数"></a>twowaysqlの現在の公開関数</h1><h2 id="Eval"><a href="#Eval" class="headerlink" title="Eval"></a>Eval</h2><p>Evalは2WaySQLクエリとパラメータを受け取ってプリペアードステートメントとして実行できるクエリとパラメータの組を返します。</p><p>Evalのシグネチャは以下のようになっています。inputParamsにはタグ付き構造体を渡します。<code>twowaysql:&quot;tag_name&quot;</code>という形式でなくてはいけません。タグがついていない場合はプロパティの名前がキーとして使われます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Eval</span><span class="params">(inputQuery <span class="keyword">string</span>, inputParams <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(<span class="keyword">string</span>, []<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用例-1"><a href="#使用例-1" class="headerlink" title="使用例"></a>使用例</h3><h4 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Params &#123;</span><br><span class="line">Name       <span class="keyword">string</span>      <span class="string">`twowaysql:&quot;name&quot;`</span></span><br><span class="line">MaxEmpNo   <span class="keyword">int</span>         <span class="string">`twowaysql:&quot;maxEmpNo&quot;`</span></span><br><span class="line">DeptNo     <span class="keyword">int</span>         <span class="string">`twowaysql:&quot;deptNo&quot;`</span></span><br><span class="line">GenderList []<span class="keyword">string</span>    <span class="string">`twowaysql:&quot;gender_list&quot;`</span></span><br><span class="line">IntList    []<span class="keyword">int</span>       <span class="string">`twowaysql:&quot;int_list&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = <span class="string">`SELECT * FROM person WHERE employee_no = /*maxEmpNo*/1000 AND /* IF int_list !== null */  person.gender in /*int_list*/(3,5,7) /* END */`</span></span><br><span class="line"><span class="keyword">var</span> params = Params&#123;</span><br><span class="line">                Name: <span class="string">&quot;Jeff&quot;</span>,</span><br><span class="line">                MaxEmpNo: <span class="number">3</span>,</span><br><span class="line">                DeptNo: <span class="number">12</span>,</span><br><span class="line">                GenderList: []<span class="keyword">string</span>&#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;F&quot;</span>&#125;,</span><br><span class="line">                IntList: []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">             &#125;</span><br><span class="line">resultQuery, resultParams, err := Eval(query, params)</span><br></pre></td></tr></table></figure><h4 id="期待出力"><a href="#期待出力" class="headerlink" title="期待出力"></a>期待出力</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resultQuery: <span class="string">`SELECT * FROM person WHERE employee_no = ?/*maxEmpNo*/ AND person.gender in (?, ?, ?)/*int_list*/`</span></span><br><span class="line">resultParams: []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Exec"><a href="#Exec" class="headerlink" title="Exec"></a>Exec</h2><p>Execは<a href="https://golang.org/pkg/database/sql/">sql</a>パッケージのExecContext関数の薄いラッパーです。</p><p>検索結果を取得しない場合(INSERT, UPDATE, DELETE等)に使われます。関数内部で、Evalの呼び出し、適切なプレースホルダーへの変換を行い、sqlパッケージのExecにクエリとパラメータを渡しています。</p><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><p>Selectは<a href="https://github.com/jmoiron/sqlx">sqlx</a>パッケージのSelectContext関数の薄いラッパーです。検索結果を取得する場合(SELECT)に使われます。</p><h1 id="twowaysqlの機能"><a href="#twowaysqlの機能" class="headerlink" title="twowaysqlの機能"></a>twowaysqlの機能</h1><h2 id="バインドパラメータ"><a href="#バインドパラメータ" class="headerlink" title="バインドパラメータ"></a>バインドパラメータ</h2><p>SQLにバインドするパラメータを<code>/* parameter name */</code>の形式で使用することができます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> person <span class="keyword">where</span> dept_no <span class="operator">=</span> <span class="comment">/* deptNo */</span><span class="number">10</span> <span class="keyword">AND</span> first_name <span class="operator">=</span> <span class="comment">/* firstName */</span>&quot;Jeff&quot;</span><br></pre></td></tr></table></figure><p>上の例では<code>/* deptNo */</code>、<code>/* firstName */</code>がバインドパラメータです。Generate関数にかけられると、後ろに続く10、”Jeff”が削除され、?が追加されます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> person <span class="keyword">where</span> dept_no <span class="operator">=</span> ?<span class="comment">/* deptNo */</span> <span class="keyword">AND</span> first_name <span class="operator">=</span> ?<span class="comment">/* firstName */</span></span><br></pre></td></tr></table></figure><h2 id="IN句"><a href="#IN句" class="headerlink" title="IN句"></a>IN句</h2><p>スライス型の値をIN句にバインドパラメータとして指定することができます。現在対応しているの型は[]stringと[]intです。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person <span class="comment">/* IF gender_list !== null */</span> <span class="keyword">where</span> person.gender <span class="keyword">in</span> <span class="comment">/*gender_list*/</span>(&quot;M&quot;) <span class="comment">/* END */</span></span><br></pre></td></tr></table></figure><p>gender_listとして(“M”, “F”)を指定すると以下のように変換されます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person <span class="keyword">where</span> person.gender <span class="keyword">in</span> (?, ?)<span class="comment">/*gender_list*/</span></span><br></pre></td></tr></table></figure><h2 id="条件分岐-IF-ELIF-ELSE-END"><a href="#条件分岐-IF-ELIF-ELSE-END" class="headerlink" title="条件分岐(/* IF */, /* ELIF */, /* ELSE */, /* END */)"></a>条件分岐(/* IF */, /* ELIF */, /* ELSE */, /* END */)</h2><p><code>/* IF */</code>, <code>/* ELIF */</code>, <code>/* ELSE */</code>, <code>/* END */</code>を使ってSQLを動的に制御することができます。</p><p>記述方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*IF [評価式]*/</span></span><br><span class="line"><span class="comment">-- IFの評価式が真の場合に適用されるSQL</span></span><br><span class="line"><span class="comment">/*ELIF [評価式]*/</span></span><br><span class="line"><span class="comment">-- ELIFの評価式が真の場合に適用されるSQL</span></span><br><span class="line"><span class="comment">/*ELSE*/</span></span><br><span class="line"><span class="comment">-- IF,ELIFの評価式が偽の場合に適用されるSQL</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br></pre></td></tr></table></figure><p>IF、ELIFの条件はGo言語で実装されたJavaScriptインタプリタである<a href="https://github.com/robertkrimen/otto">otto</a>に渡されて評価されます。したがって、条件部にはJavaScriptの式を記述することが可能です。</p><h1 id="書いてみた所感"><a href="#書いてみた所感" class="headerlink" title="書いてみた所感"></a>書いてみた所感</h1><p>Go言語で最低限のコア機能を持った2WaySQL処理ツールを実装してみました。</p><p>初めに2WaySQL処理ツールを実装してほしいと言われたときは、ソースコードが一行もない状態で、Goの経験と言えば<a href="https://go-tour-jp.appspot.com/welcome/1">A Tour Of Go</a>をやったことがある程度の自分が書けるのだろうかと不安だったのですが、先輩方の手厚いコードレビューや、<a href="https://www.sigbus.info/compilerbook">低レイヤを知りたい人のためのCコンパイラ作成入門</a>を途中まで読んでいて、字句解析や構文解析の知識が少しだけあったという幸運もあり、何とか形にすることができました。</p><p>開発の経験を積んでみたい学生の方は、当社でアルバイトをすると、つよつよな技術部隊の方にコードレビューをしてもらって開発ができ、かつ給料ももらえる(私の時は時給1500円でした)ので、とてもおススメです！</p><p>次は辻さんの<a href="/articles/20210804a/">SQLファイルから型安全なコードを生成するsqlc</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210803a/blue-2137333_1280.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; height=&quot;670&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>SQLビルダーgoquの使い方</title>
    <link href="https://future-architect.github.io/articles/20210802a/"/>
    <id>https://future-architect.github.io/articles/20210802a/</id>
    <published>2021-08-01T15:00:00.000Z</published>
    <updated>2021-08-03T03:43:13.261Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は<a href="/articles/20210726b/">ORMとクエリビルダー連載</a>の6記事目です。</p><p>TIGの伊藤真彦です。業務では専らDynamoDBに触れており、１年以上RDBMSの世界から離れていたのですが、連載のために帰ってきました。というわけで無からネタを考え、goqu体験記を書くことにしました。</p><h1 id="goquとは"><a href="#goquとは" class="headerlink" title="goquとは"></a>goquとは</h1><img src="/images/20210802a/goqu.png" alt="" width="800" height="329" loading="lazy"><p>リポジトリは<a href="https://github.com/doug-martin/goqu">こちら</a>です。</p><blockquote><p><code>goqu</code> is an expressive SQL builder and executor<br><code>goqu</code>は、表現力豊かなSQLビルダーおよびエグゼキューターです。</p></blockquote><p>との説明の通り、SQLビルダーとして単独に機能しつつ、SQLの実行も可能なライブラリです。</p><p>どちらかというとSQLビルダーとしての役割に注力しており、アソシエーションやフックを利用したORマッパーとしての機能を求めている場合は<a href="https://github.com/jinzhu/gorm">gorm</a>や<a href="https://github.com/eaigner/hood">hood</a>の使用がREADMEでも推奨されています。</p><blockquote><p>While goqu may support the scanning of rows into structs it is not intended to be used as an ORM if you are looking for common ORM features like associations, or hooks I would recommend looking at some of the great ORM libraries such as:</p><ul><li><p>gorm</p></li><li><p>hood</p></li></ul><p>goquは行の構造体へのスキャンをサポートしている場合がありますが、関連付けやフックなどの一般的なORM機能を探している場合は、ORMとして使用することを意図していません。次のような優れたORMライブラリのいくつかを調べることをお勧めします。</p></blockquote><p>その上でgoquを開発した意図もREADMEに書いてあります。</p><blockquote><p>We tried a few other sql builders but each was a thin wrapper around sql fragments that we found error prone. goqu was built with the following goals in mind:</p><p>Make the generation of SQL easy and enjoyable<br>Create an expressive DSL that would find common errors with SQL at compile time.<br>Provide a DSL that accounts for the common SQL expressions, NOT every nuance for each database.<br>Provide developers the ability to:<br>Use SQL when desired<br>Easily scan results into primitive values and structs<br>Use the native sql.Db methods when desired</p></blockquote><blockquote><p>他のいくつかのSQLビルダーを試しましたが、それぞれがエラーが発生しやすいSQLフラグメントの薄いラッパーでした。goqu次の目標を念頭に置いて構築されました。</p><p>SQLの生成を簡単で楽しいものにします<br>コンパイル時にSQLで一般的なエラーを見つける表現力豊かなDSLを作成します。<br>各データベースのすべてのニュアンスではなく、一般的なSQL式を説明するDSLを提供します。<br>開発者に次の機能を提供します。<br>必要に応じてSQLを使用する<br>結果を簡単にスキャンしてプリミティブ値と構造体にする<br>必要に応じて、ネイティブのsql.Dbメソッドを使用します</p></blockquote><p>私は残念ながら仕事でgormなどGo製ORマッパーをゴリゴリ使い込むようなことをしていないため、作者のdoug-martin氏への共感を持てる経験は持っていないのですが、好評な意見は各所で聞いています。</p><p>動作確認ついでに<a href="https://github.com/doug-martin/goqu/pull/286">ちょっとしたコメント修正のPR</a>を送ってみましたが、次の日にはマージされました、活発にメンテナンスされているようです。</p><h2 id="触ってみた"><a href="#触ってみた" class="headerlink" title="触ってみた"></a>触ってみた</h2><h3 id="SQLを発行する"><a href="#SQLを発行する" class="headerlink" title="SQLを発行する"></a>SQLを発行する</h3><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/doug-martin/goqu/v9&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sql, _, err := goqu.From(<span class="string">&quot;test&quot;</span>).ToSQL()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sql) <span class="comment">// -&gt; SELECT * FROM &quot;test&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>importしてサッと使うだけでSQLが文字列として取得できます。</p><p>Goには”database/sql”パッケージがあるので、素朴にそれと組み合わせるか、ORマッパーの痒いところに手が届かない部分をgoquで補うような使い方ができます。</p><p>上記で使っていないToSQLの戻り値は<a href="https://github.com/doug-martin/goqu/blob/2eb18c0814fe39f64a7c7a325bb7c9d508c49342/exec/query_executor.go#L33">実装</a>を見ると[]interface{}型の変数argsが帰ってきています。</p><p>これはSQLの表現の方法を変えたいときに利用できます。</p><p>READMEで<code>Parameter interpolation</code>として説明されている機能ですね。</p><p>テストコードに良いサンプルがあります。<code>.Prepared(true)</code>を付与することでパラメータ部分をargsに分離して使う前提のSQLが発行されます。</p><figure class="highlight go"><figcaption><span>test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleDialect_datasetMysql</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// import _ &quot;github.com/doug-martin/goqu/v9/adapters/mysql&quot;</span></span><br><span class="line"></span><br><span class="line">d := goqu.Dialect(<span class="string">&quot;mysql&quot;</span>)</span><br><span class="line">ds := d.From(<span class="string">&quot;test&quot;</span>).Where(goqu.Ex&#123;</span><br><span class="line"><span class="string">&quot;foo&quot;</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line"><span class="string">&quot;baz&quot;</span>: []<span class="keyword">int64</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#125;).Limit(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">sql, args, _ := ds.ToSQL()</span><br><span class="line">fmt.Println(sql, args)</span><br><span class="line"></span><br><span class="line">sql, args, _ = ds.Prepared(<span class="literal">true</span>).ToSQL()</span><br><span class="line">fmt.Println(sql, args)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// SELECT * FROM `test` WHERE ((`baz` IN (1, 2, 3)) AND (`foo` = &#x27;bar&#x27;)) LIMIT 10 []</span></span><br><span class="line"><span class="comment">// SELECT * FROM `test` WHERE ((`baz` IN (?, ?, ?)) AND (`foo` = ?)) LIMIT ? [1 2 3 bar 10]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Where句の利用やInsert文の場合など、細かい利用方法はREADMEに記載がありますので割愛します。</p><h2 id="特定のDBに適したSQLを発行する"><a href="#特定のDBに適したSQLを発行する" class="headerlink" title="特定のDBに適したSQLを発行する"></a>特定のDBに適したSQLを発行する</h2><p>goquでは<code>Dialect</code>と称して、DB毎の細かな違いをドライバを切り替えるような機能が存在します。</p><p>PostgreSQLの場合を見てみます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/doug-martin/goqu/v9&quot;</span></span><br><span class="line">  <span class="comment">// import the dialect</span></span><br><span class="line">  _ <span class="string">&quot;github.com/doug-martin/goqu/v9/dialect/postgres&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// look up the dialect</span></span><br><span class="line">dialect := goqu.Dialect(<span class="string">&quot;postgres&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// use dialect.From to get a dataset to build your SQL</span></span><br><span class="line">ds := dialect.From(<span class="string">&quot;test&quot;</span>).Where(goqu.Ex&#123;<span class="string">&quot;id&quot;</span>: <span class="number">10</span>&#125;)</span><br><span class="line">sql, args, err := ds.ToSQL()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;An error occurred while generating the SQL&quot;</span>, err.Error())</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  fmt.Println(sql, args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> &quot;test&quot; <span class="keyword">WHERE</span> &quot;id&quot; <span class="operator">=</span> <span class="number">10</span> []</span><br></pre></td></tr></table></figure><p>続いてMySQLの場合です。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/doug-martin/goqu/v9&quot;</span></span><br><span class="line">  <span class="comment">// import the dialect</span></span><br><span class="line">  _ <span class="string">&quot;github.com/doug-martin/goqu/v9/dialect/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// look up the dialect</span></span><br><span class="line">dialect := goqu.Dialect(<span class="string">&quot;mysql&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// use dialect.From to get a dataset to build your SQL</span></span><br><span class="line">ds := dialect.From(<span class="string">&quot;test&quot;</span>).Where(goqu.Ex&#123;<span class="string">&quot;id&quot;</span>: <span class="number">10</span>&#125;)</span><br><span class="line">sql, args, err := ds.ToSQL()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;An error occurred while generating the SQL&quot;</span>, err.Error())</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  fmt.Println(sql, args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SQLの内容が変わりました。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test` <span class="keyword">WHERE</span> `id` <span class="operator">=</span> <span class="number">10</span> []</span><br></pre></td></tr></table></figure><p>詳しくは<a href="https://github.com/doug-martin/goqu/blob/master/docs/dialect.md">ドキュメント</a>に記載があります。</p><h3 id="SQLを実行する"><a href="#SQLを実行する" class="headerlink" title="SQLを実行する"></a>SQLを実行する</h3><p>ORマッパー的な使い方が推奨されていない手前もあるのか、トップページのREADMEではあまり触れられていませんが、”database/sql”を利用したDBクライアントを組み込んで、goquのメソッドチェーンでSQLを実行したり、取得した結果を構造体にマッピングすることも可能です。<br>下記のコードがテーブルに書込みを行い、読み取り結果を構造体にマッピングするコードです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/doug-martin/goqu/v9&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/doug-martin/goqu/v9/dialect/postgres&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Record <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   []<span class="keyword">uint8</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sqlDb, err := sql.Open(<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;user=postgres dbname=goqutest sslmode=disable &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">db := goqu.New(<span class="string">&quot;postgres&quot;</span>, sqlDb)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write</span></span><br><span class="line">insert:= db.Insert(<span class="string">&quot;test&quot;</span>).Rows(</span><br><span class="line">goqu.Record&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span>&#125;,</span><br><span class="line"><span class="comment">// Record&#123;Id: []uint8&#123;49, 32, 32, 32&#125;, Name: &quot;test&quot;&#125;,でも可</span></span><br><span class="line">).Executor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = insert.Exec(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read</span></span><br><span class="line"><span class="keyword">var</span> records []Record</span><br><span class="line">err = db.From(<span class="string">&quot;test&quot;</span>).ScanStructs(&amp;records)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, records) <span class="comment">// -&gt; [&#123;[49 32 32 32] test&#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実際に試してみたい方のために動作をサクッと確認するための手順も説明します。</p><p>手軽に試すためにdockerでPostgreSQLを起動します。<br>MySQLにしなかったのは発掘したサンプルコードがたまたまPostgreSQLだったからです、どちらも好きです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    -p 5432:5432 \</span><br><span class="line">    -v postgres-tmp:/var/lib/postgresql/data \</span><br><span class="line">    -e POSTGRES_HOST_AUTH_METHOD=trust \</span><br><span class="line">    postgres:12-alpine</span><br></pre></td></tr></table></figure><p>PostgreSQLのクライアントで起動したDBにログインします</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h localhost -p 5432 -U postgres</span><br></pre></td></tr></table></figure><p>psqlコマンドが実行できない場合はPostgreSQLのインストールが必要です</p><p>ログインできたらテストで使うDB、テーブルを用意します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">データベース作成</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE goqutest;</span><br><span class="line"></span><br><span class="line">作成したデータベースに切り替え</span><br><span class="line">\c goqutest</span><br><span class="line"></span><br><span class="line">テーブル作成</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test</span><br><span class="line">(id <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">name text <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(id));</span><br><span class="line"></span><br><span class="line">テーブル確認</span><br><span class="line">\d</span><br></pre></td></tr></table></figure><p>この状態でサンプルコードを実行すれば動くはずです。[]uint8になると思っていなかったのでテストのためのDBでidをchar(4)にしたのは失敗でした。</p><p>ScanStructsなどのマッピング系の機能はドキュメントの<a href="https://github.com/doug-martin/goqu/blob/master/docs/selecting.md">Selecting</a>に、Insert機能の詳しい使い方は<a href="https://github.com/doug-martin/goqu/blob/master/docs/inserting.md">Inserting</a>に記載があります。</p><p>これらのRead, WriteはContextとの組み合わせにも対応しています</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/doug-martin/goqu/v9&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/doug-martin/goqu/v9/dialect/postgres&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Record <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   []<span class="keyword">uint8</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sqlDb, err := sql.Open(<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;user=postgres dbname=goqutest sslmode=disable &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">db := goqu.New(<span class="string">&quot;postgres&quot;</span>, sqlDb)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write</span></span><br><span class="line">insert := db.Insert(<span class="string">&quot;test&quot;</span>).Rows(</span><br><span class="line">goqu.Record&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span>&#125;,</span><br><span class="line"><span class="comment">// Record&#123;Id: []uint8&#123;49, 32, 32, 32&#125;, Name: &quot;test&quot;&#125;,でも可</span></span><br><span class="line">).Executor()</span><br><span class="line"></span><br><span class="line">ctx := context.TODO()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = insert.ExecContext(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read</span></span><br><span class="line"><span class="keyword">var</span> records []Record</span><br><span class="line">err = db.From(<span class="string">&quot;test&quot;</span>).ScanStructsContext(ctx, &amp;records)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, records) <span class="comment">// -&gt; [&#123;[49 32 32 32] test&#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ToSQLの戻り値を使わなくても、メソッドチェーンの流れでExecutorを利用すればそのままSQLの実行までできるため、わざわざ使うかというと微妙ですが、Parameter interpolationをこのように利用してデータを読み取ることもできます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql, args, _ := db.From(<span class="string">&quot;test&quot;</span>).Prepared(<span class="literal">true</span>).Where(goqu.Ex&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span>&#125;).ToSQL()</span><br><span class="line">db.ScanStructs(&amp;records, sql, args...)</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>goquはSQLビルダーとしての役割に軸足を置いたライブラリである。汎用的なものから特定のDBに特化したものまでSQLを発行できる。ORマッパーとしての利用を推奨していないながらも単体で動作することが可能になっている。</p><p>どのライブラリが好みに合うかは人それぞれですが、触ってみた感触としては多機能ながらも学習障壁の高さを感じる部分は少なかったです。</p><p>とはいえ軽く触った程度ではまだまだ紹介するべき本領を発揮できていないんじゃないかと感じる程度には機能が豊富でした。</p><p>一部の機能が刺さるユースケースには勿論ですが、ひとまずこれを使ってみるという用途としても充分オススメできると感じました。</p><p>明日は本田さんの<a href="/articles/20210803a/">Go言語で2WaySQL</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;この記事は&lt;a href=&quot;/articles/20210726b/&quot;&gt;ORMとクエリビルダー連載&lt;/a&gt;の6記事目です。&lt;/p&gt;
&lt;p&gt;TIGの伊藤真彦です。業務では専らDynamoDBに触れており、１年以上RDBMSの世界から離れていたのですが、連載のために帰ってきまし</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>SQLBoiler（とoapi-codegen）でつくるREST APIサーバ</title>
    <link href="https://future-architect.github.io/articles/20210730a/"/>
    <id>https://future-architect.github.io/articles/20210730a/</id>
    <published>2021-07-29T15:00:00.000Z</published>
    <updated>2021-08-04T01:04:04.997Z</updated>
    
    <content type="html"><![CDATA[<p>ライブリッツの筒井です。</p><p><a href="/articles/20210726a/">GoのORマッパー連載</a>、折り返して5日目です。</p><p>SQLBoilerを使用したDBスキーマ駆動なREST APIサーバの開発ワークフローを紹介します。</p><h2 id="なぜSQLBoilerを選ぶのか"><a href="#なぜSQLBoilerを選ぶのか" class="headerlink" title="なぜSQLBoilerを選ぶのか?"></a>なぜSQLBoilerを選ぶのか?</h2><p>自分たちのチームでは、REST APIサーバを開発する際にはまずデータベースのテーブル設計から始めることが多いです。その次にAPI定義の設計へ入るのですが、既にテーブル定義は出来上がっているため、<strong>なんとなくSQL文が頭に思い浮かんだ状態</strong>でAPIのRequest / Responseを考えることになります。</p><p>ゆえにORMに一番に求めるのは、「<strong>いかにストレスなく思い描いていたSQL文を実行し、Goの文脈に持ち込めるか</strong>」ということです。</p><p>この基準を元に、次のような観点からSQLBoilerを選定しています。</p><h3 id="複雑なSELECT文でDSLに苦悩したくない"><a href="#複雑なSELECT文でDSLに苦悩したくない" class="headerlink" title="複雑なSELECT文でDSLに苦悩したくない"></a>複雑なSELECT文でDSLに苦悩したくない</h3><p>前述の通り、我々の頭の中にはなんとなくのSELECT文が既に浮かんでいます。このSELECT文を組み立てるために、ORM特有のDSLに悪戦苦闘することは避けたいものです。</p><p>SQLBoilerのクエリビルダはSQLの基本的な構文と大きく違わないため、直感的に使用することができました。またGoのコードが生成されているため、カラム名、テーブル名を指定する際にコード補完が効くのも嬉しいポイントです。</p><p>相関サブクエリを使った集計などはクエリ相当複雑になってしまいますが、Raw SQLの実行、StructへのBindも容易なので、「複雑なクエリはSQLをそのまま実行」というアプローチが取れます。</p><p>（これについては <a href="http://jmoiron.github.io/sqlx/">jmoiron/sqlx</a> も同様です）</p><h3 id="INSERT-UPDATE-DELETEはSQLを書きたくない"><a href="#INSERT-UPDATE-DELETEはSQLを書きたくない" class="headerlink" title="INSERT, UPDATE, DELETEはSQLを書きたくない"></a>INSERT, UPDATE, DELETEはSQLを書きたくない</h3><p>SELECT文が複雑になることは多々ありますが、INSERT, UPDATE, DELETEはそうでもありません。</p><p>これらのDMLはORMに乗っかり、Type Safeに書きたいところです。</p><p>SQLBoilerでは、INSERT, UPDATE, DELETEはStructのメソッドとしてコードが生成されます。JSONからUnmarshalしてInsertといった処理が簡単に書けます。</p><h3 id="Schema-Migrationはいらない"><a href="#Schema-Migrationはいらない" class="headerlink" title="Schema Migrationはいらない"></a>Schema Migrationはいらない</h3><p>これには「データベースの寿命 &gt; アプリケーションの寿命」という前提があります。</p><p>Migration機能も含め、データベースをアプリケーションからは独立した1サービスとして扱う、という考え方をとっています。</p><p>一方「データベースの寿命 == アプリケーションの寿命」とできる場合は、ActiveRecordのようにデータベースをアプリケーションの1機能として扱えたほうが開発効率は上がるでしょう。</p><p>SQLBoilerにはSchema Migration機能は含まれておらず、既存のデータベースからコードを生成するアプローチを取っています。</p><p>別ツール  (<a href="https://flywaydb.org/">Flyway</a>を使うことが多いです) でSchemaを管理している自分たちにはピッタリでした。</p><h2 id="SQLBoilerの使い方"><a href="#SQLBoilerの使い方" class="headerlink" title="SQLBoilerの使い方"></a>SQLBoilerの使い方</h2><p>プロジェクトのセットアップについては<a href="https://github.com/volatiletech/sqlboiler">公式ドキュメント</a>に詳しいため割愛します。</p><h3 id="テーブル定義"><a href="#テーブル定義" class="headerlink" title="テーブル定義"></a>テーブル定義</h3><p>今回使用するテーブル定義です。<br>ユーザ、イベント、イベント参加ユーザの3テーブルで、イベント・ユーザ間は <code>1 : 0...N</code> の関係です。</p><img src="/images/20210730a/image.png" alt="テーブル定義" width="403" height="283" loading="lazy"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> &quot;user&quot; (</span><br><span class="line">    &quot;id&quot; uuid <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> gen_random_uuid()</span><br><span class="line">    , &quot;name&quot; <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">    , &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> now()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> &quot;user&quot; <span class="keyword">add</span> <span class="keyword">primary</span> key (&quot;id&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> &quot;event&quot; (</span><br><span class="line">    &quot;id&quot; uuid <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> gen_random_uuid()</span><br><span class="line">    , &quot;name&quot; <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">    , &quot;date&quot; <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">    , &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> now()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> &quot;event&quot; <span class="keyword">add</span> <span class="keyword">primary</span> key (&quot;id&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> &quot;event_user&quot; (</span><br><span class="line">    &quot;event_id&quot; uuid <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">    , &quot;user_id&quot; uuid <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">    , &quot;registered_at&quot; <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> now()</span><br><span class="line">    , &quot;created_at&quot; <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> now()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> &quot;event_user&quot; <span class="keyword">add</span> <span class="keyword">primary</span> key (&quot;event_id&quot;, &quot;user_id&quot;);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> &quot;event_user&quot; <span class="keyword">add</span> <span class="keyword">foreign</span> key (&quot;event_id&quot;) <span class="keyword">references</span> &quot;event&quot; (&quot;id&quot;);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> &quot;event_user&quot; <span class="keyword">add</span> <span class="keyword">foreign</span> key (&quot;user_id&quot;) <span class="keyword">references</span> &quot;user&quot; (&quot;id&quot;);</span><br></pre></td></tr></table></figure><h3 id="シンプルなINSERT-SELECT"><a href="#シンプルなINSERT-SELECT" class="headerlink" title="シンプルなINSERT, SELECT"></a>シンプルなINSERT, SELECT</h3><p>まずはユーザ作成処理を考えます。<br>先にコードを掲載します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateUser</span><span class="params">(ctx context.Context, b []<span class="keyword">byte</span>)</span> <span class="params">(*boiler.User, error)</span></span> &#123;</span><br><span class="line">u := &amp;boiler.User&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(b, u); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">err := u.Insert(ctx, db, boil.Infer())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>boiler.User</code> は、SQLBoilerによって生成された <code>user</code> テーブルに対応するStructです。<br>カラムに設定したコメントが反映されているのが地味に便利なポイントです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User is an object representing the database table.</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">ID <span class="keyword">string</span> <span class="string">`boil:&quot;id&quot; json:&quot;id&quot; toml:&quot;id&quot; yaml:&quot;id&quot;`</span></span><br><span class="line"><span class="comment">// 所属する組織ID</span></span><br><span class="line">OrganizationID <span class="keyword">string</span> <span class="string">`boil:&quot;organization_id&quot; json:&quot;organizationID&quot; toml:&quot;organizationID&quot; yaml:&quot;organizationID&quot;`</span></span><br><span class="line"><span class="comment">// ユーザ名</span></span><br><span class="line">Name      <span class="keyword">string</span>    <span class="string">`boil:&quot;name&quot; json:&quot;name&quot; toml:&quot;name&quot; yaml:&quot;name&quot;`</span></span><br><span class="line">CreatedAt time.Time <span class="string">`boil:&quot;created_at&quot; json:&quot;-&quot; toml:&quot;-&quot; yaml:&quot;-&quot;`</span></span><br><span class="line"></span><br><span class="line">R *userR <span class="string">`boil:&quot;-&quot; json:&quot;-&quot; toml:&quot;-&quot; yaml:&quot;-&quot;`</span></span><br><span class="line">L userL  <span class="string">`boil:&quot;-&quot; json:&quot;-&quot; toml:&quot;-&quot; yaml:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果は次の通りです。<br>DB側で採番されたIDがStructにセットされています。便利ですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// DB接続Helper</span></span><br><span class="line">testConfigureDatabase(t)</span><br><span class="line">d := <span class="string">`&#123;&quot;organizationID&quot;:&quot;00000001-0000-0000-0000-000000000000&quot;,&quot;name&quot;:&quot;Emmett Brown&quot;&#125;`</span></span><br><span class="line">got, err := CreateUser(context.TODO(), []<span class="keyword">byte</span>(d))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;CreateUser() error = %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JSONでログ出力するHelper</span></span><br><span class="line">logJson(t, got)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;54629dbd-2c32-4e71-8592-be66be0a5385&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;organizationID&quot;</span>: <span class="string">&quot;00000001-0000-0000-0000-000000000000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Emmett Brown&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次にユーザ一覧を取得する処理を考えます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> organization_id <span class="operator">=</span> $<span class="number">1</span></span><br></pre></td></tr></table></figure><p>Goのコードは次の通りです。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var db <span class="operator">*</span>sql.DB</span><br><span class="line"></span><br><span class="line">func ListUsers(ctx context.Context, orgID string) ([]<span class="operator">*</span>boiler.User, error) &#123;</span><br><span class="line">users, err :<span class="operator">=</span> boiler.Users(</span><br><span class="line">qm.Where(&quot;organization_id = ?&quot;, orgID),</span><br><span class="line">).<span class="keyword">All</span>(ctx, db)</span><br><span class="line">if err <span class="operator">!=</span> nil &#123;</span><br><span class="line"><span class="keyword">return</span> nil, err</span><br><span class="line">&#125;</span><br><span class="line">if users <span class="operator">=</span><span class="operator">=</span> nil &#123;</span><br><span class="line">users <span class="operator">=</span> []<span class="operator">*</span>boiler.User&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> users, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この程度のシンプルなクエリであれば自動生成コードで簡単に実装可能です。</p><p>実行結果は次のようになります。<code>json</code> タグもSQLBoilerが付けてくれているので、サクッとSerializeが可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestListUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// DB接続するHelper</span></span><br><span class="line">    testConfigureDatabase(t)</span><br><span class="line">orgID := <span class="string">&quot;00000001-0000-0000-0000-000000000000&quot;</span></span><br><span class="line">got, err := ListUsers(context.TODO(), orgID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;ListUsers() error = %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// JSON形式でログ出力するHelper</span></span><br><span class="line">logJson(t, got)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00000001-0001-0000-0000-000000000000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;organizationID&quot;</span>: <span class="string">&quot;00000001-0000-0000-0000-000000000000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ユーザ01&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00000001-0002-0000-0000-000000000000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;organizationID&quot;</span>: <span class="string">&quot;00000001-0000-0000-0000-000000000000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ユーザ02&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="中間テーブルのJOINを含むSELECT"><a href="#中間テーブルのJOINを含むSELECT" class="headerlink" title="中間テーブルのJOINを含むSELECT"></a>中間テーブルのJOINを含むSELECT</h3><p>イベントとその主催者ユーザ、参加者ユーザ一覧を取得する処理を考えます。</p><p>SQLで書くならば次のようになるでしょう。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;event&quot;.<span class="operator">*</span>, &quot;participant&quot;.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> &quot;event&quot;</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> &quot;event_user&quot; r1 <span class="keyword">on</span> r1.event_id <span class="operator">=</span> event.id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> &quot;user&quot; participant <span class="keyword">on</span> participant.id <span class="operator">=</span> r1.user_id</span><br></pre></td></tr></table></figure><p>SQLBoilerで実装する場合、Eager Loadingによって結合先テーブルを読み込む形になります。Eager Loadingのコードも、SQLBoilerが外部キー制約を読み取って自動生成してくれています。</p><p>クエリ時に <code>qm.Load()</code> で結合先テーブルを読み込んでおけば、<code>FromTable.R.JoinTable</code> の形式でGoからアクセス可能です。</p><p>JoinのJoinも、ドット区切りで結合先テーブルを記述すると読み込み可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Event <span class="keyword">struct</span> &#123;</span><br><span class="line">*boiler.Event</span><br><span class="line"><span class="comment">// イベント参加者</span></span><br><span class="line">ParticipantUsers []*boiler.User <span class="string">`json:&quot;participantUsers&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListEvents</span><span class="params">(ctx context.Context)</span> <span class="params">([]*Event, error)</span></span> &#123;</span><br><span class="line">es, err := boiler.Events(</span><br><span class="line">qm.OrderBy(boiler.EventColumns.Date+<span class="string">&quot; desc&quot;</span>),</span><br><span class="line">qm.Load(fmt.Sprintf(<span class="string">&quot;%s.%s&quot;</span>, boiler.EventRels.EventUsers, boiler.EventUserRels.User)),</span><br><span class="line">).All(ctx, db)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">res := <span class="built_in">make</span>([]*Event, <span class="built_in">len</span>(es))</span><br><span class="line"><span class="keyword">for</span> i, e := <span class="keyword">range</span> es &#123;</span><br><span class="line">ps := <span class="built_in">make</span>([]*boiler.User, <span class="built_in">len</span>(e.R.EventUsers))</span><br><span class="line"><span class="keyword">for</span> j, u := <span class="keyword">range</span> e.R.EventUsers &#123;</span><br><span class="line">ps[j] = u.R.User</span><br><span class="line">&#125;</span><br><span class="line">res[i] = &amp;Event&#123;</span><br><span class="line">Event:            e,</span><br><span class="line">ParticipantUsers: ps,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果は次の通りです。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00000000-0000-0000-0000-000000000001&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;イベント01&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2015-10-21T00:00:00Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;participants&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00000001-0002-0000-0000-000000000000&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;organizationID&quot;</span>: <span class="string">&quot;00000001-0000-0000-0000-000000000000&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ユーザ02&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00000001-0003-0000-0000-000000000000&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;organizationID&quot;</span>: <span class="string">&quot;00000001-0000-0000-0000-000000000000&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ユーザ03&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>実行されたSQLは次の3つでした。Eager Loadingがきちんと効いていますね。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> event <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span> <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> event_user <span class="keyword">WHERE</span> (event_user.event_id <span class="keyword">IN</span> ($<span class="number">1</span>));</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> (user.id <span class="keyword">IN</span> ($<span class="number">1</span>,$<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h3 id="集計を含むSELECT"><a href="#集計を含むSELECT" class="headerlink" title="集計を含むSELECT"></a>集計を含むSELECT</h3><p>参加者数の多いイベントを取得する処理を考えます。</p><p>SQLは次の通りです。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> event.<span class="operator">*</span>, <span class="built_in">coalesce</span>(r1.participants, <span class="number">0</span>) <span class="keyword">as</span> participants</span><br><span class="line"><span class="keyword">from</span> event</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line">    <span class="keyword">select</span> event_id <span class="keyword">as</span> id, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> participants</span><br><span class="line">    <span class="keyword">from</span> event_user</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> event_id</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> participants <span class="keyword">desc</span></span><br><span class="line">    limit <span class="number">10</span></span><br><span class="line">) r1 <span class="keyword">on</span> event.id <span class="operator">=</span> r1.id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> participants <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>ここまで来るとクエリビルダに頭を悩ませるのも大変なので、SQLをそのまま実行させます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EventPopularity <span class="keyword">struct</span> &#123;</span><br><span class="line">boiler.Event <span class="string">`boil:&quot;,bind&quot;`</span></span><br><span class="line">Participants <span class="keyword">int</span> <span class="string">`boil:&quot;participants&quot; json:&quot;participants&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListPopularEvents</span><span class="params">(ctx context.Context)</span> <span class="params">([]*EventPopularity, error)</span></span> &#123;</span><br><span class="line">r := []*EventPopularity&#123;&#125;</span><br><span class="line">queries.Raw(<span class="string">`</span></span><br><span class="line"><span class="string">select event.*, coalesce(r1.participants, 0) as participants</span></span><br><span class="line"><span class="string">from event</span></span><br><span class="line"><span class="string">left join (</span></span><br><span class="line"><span class="string">select event_id as id, count(*) as participants</span></span><br><span class="line"><span class="string">from event_user</span></span><br><span class="line"><span class="string">group by event_id</span></span><br><span class="line"><span class="string">order by participants desc</span></span><br><span class="line"><span class="string">limit 10</span></span><br><span class="line"><span class="string">) r1 on event.id = r1.id</span></span><br><span class="line"><span class="string">order by participants desc</span></span><br><span class="line"><span class="string">`</span>).Bind(ctx, db, &amp;r)</span><br><span class="line"><span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果は次の通りです。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00000000-0000-0000-0000-000000000001&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;イベント01&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2015-10-21T00:00:00Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;participants&quot;</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="SQLBoilerのつらいところ"><a href="#SQLBoilerのつらいところ" class="headerlink" title="SQLBoilerのつらいところ"></a>SQLBoilerのつらいところ</h2><h3 id="Bulk-Insertが出来ない"><a href="#Bulk-Insertが出来ない" class="headerlink" title="Bulk Insertが出来ない"></a>Bulk Insertが出来ない</h3><p>SQLBoilerで生成されたコードにBulk InsertのAPIは含まれていません。複数件のInsertを行うためにはfor文を使う、などの対応となります。</p><p>ただ、テンプレートを追加することでBulk Insertのコードを生成している方もいるようです。<br>参考: <a href="https://qiita.com/touyu/items/4b25fbf12804f12778b7">https://qiita.com/touyu/items/4b25fbf12804f12778b7</a></p><h3 id="テーブル設計に若干の制約が生じる"><a href="#テーブル設計に若干の制約が生じる" class="headerlink" title="テーブル設計に若干の制約が生じる"></a>テーブル設計に若干の制約が生じる</h3><p>主な制約は以下の2つです。</p><ul><li>関連するテーブルには外部キー制約を設定する必要がある</li><li>中間テーブルには結合先2テーブルの主キーを使った複合主キーを設定する必要がある<ul><li>上記例の <code>event_user</code> テーブルでは、複合主キー <code>(event_id, user_id)</code> を設定することが<strong>必須</strong>です。</li></ul></li></ul><p>これらの制約は主にEager Loadingのためのもので、クリアできない場合には各テーブルを手動でJoinする必要が出てきます。</p><p>プロジェクトによっては「外部キー制約は使わない」という設計ポリシーを取っていることもあるかと思いますので要注意ポイントです。</p><h3 id="そもそもデータベースが無いと開発が進まない"><a href="#そもそもデータベースが無いと開発が進まない" class="headerlink" title="そもそもデータベースが無いと開発が進まない"></a>そもそもデータベースが無いと開発が進まない</h3><p>これはSQLBoilerが悪いわけではありません。</p><p>ただ「データベースを元にコードを生成する」というアプローチ上、<br>開発初期で頻繁にテーブル設計を変更するようなシーンで煩わしさを覚えてしまうのは致し方ありません。</p><p>このようなシーンが頻発するのであれば、Migration機能を持つGORMなどのほうが適任かもしれません。</p><h2 id="SQLBoilerとoapi-codegenによるREST-APIサーバ開発"><a href="#SQLBoilerとoapi-codegenによるREST-APIサーバ開発" class="headerlink" title="SQLBoilerとoapi-codegenによるREST APIサーバ開発"></a>SQLBoilerとoapi-codegenによるREST APIサーバ開発</h2><p>タイトル回収です。SQLBoilerと<a href="https://github.com/deepmap/oapi-codegen">oapi-codegen</a>によるコード生成を活用したREST APIの開発フローを紹介します。</p><p>oapi-codegenの詳細はここでは割愛します。以下記事を御覧ください。<br>c.f. <a href="https://future-architect.github.io/articles/20200701/">Go の Open API 3.0 のジェネレータ oapi-codegen を試してみた</a></p><p>まず、設計書としてデータベースのDDL、API定義のopenapi.ymlが用意されている前提です。<br>これを元に、DBアクセスを担うパッケージ <code>boiler</code> と、ルーティング他を担う <code>restapi</code> を生成します。</p><p>我々が開発するのは、上記2パッケージのグルーコード、ビジネスロジックを担う <code>app.go</code> です。</p><img src="/images/20210730a/sqlboiler.png" alt="ddlとopenapi.ymlを駆動としたコード生成とアプリ開発のフロー図" width="800" height="320" loading="lazy"><h3 id="開発例"><a href="#開発例" class="headerlink" title="開発例"></a>開発例</h3><p>今回は例として次のようなOpenAPI定義を用意しました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="number">3.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/user:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">Returns</span> <span class="string">an</span> <span class="string">array</span> <span class="string">of</span> <span class="string">User</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">listUsers</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">                <span class="attr">items:</span></span><br><span class="line">                  <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/User&#x27;</span></span><br><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">schemas:</span></span><br><span class="line">    <span class="attr">User:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">required:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">id</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">name</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">id:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">uuid</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">example:</span> <span class="string">&quot;Emmett Brown&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>この定義を元にoapi-codegenを実行すると、次のようなStructが出来ます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="comment">// User defines model for User.</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">        Id   <span class="keyword">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">        Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このStructに、<a href="https://github.com/fatih/gomodifytags">gomodifytags</a> によって <code>boil</code> タグを追加します。<br><code>openapi.yml</code> の <code>x-oapi-codegen-extra-tags</code> を利用すると任意のタグを付与することも可能ですが、ひとつひとつのフィールドに追加するのは漏れが出そうだったので、gomodifytagsを使っています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="comment">// User defines model for User.</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="keyword">string</span> <span class="string">`json:&quot;id&quot; boil:&quot;id&quot;`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot; boil:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あとはSQLの実行結果をこのStructにBindすれば完成です。</p><p>この例ではAPI定義の <code>User</code> のフィールドはすべてテーブル定義の <code>User</code> に含まれているため、SQLBoilerで生成されたSelect文から直接Bindが可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListUser</span><span class="params">(ctx context.Context)</span> <span class="params">([]*model.User, error)</span></span> &#123;</span><br><span class="line">res := []*model.User&#123;&#125;</span><br><span class="line">err := boiler.Users().Bind(ctx, db, &amp;res)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考までに、コード生成のためのMakefileを掲載します。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: generate</span></span><br><span class="line"><span class="section">generate: boiler restapi/types.go</span></span><br><span class="line"><span class="section">boiler:</span></span><br><span class="line">sqlboiler psql</span><br><span class="line"><span class="section">restapi:</span></span><br><span class="line">mkdir -p <span class="variable">$@</span></span><br><span class="line"><span class="section">restapi/types.go: openapi.yml restapi</span></span><br><span class="line">oapi-codegen -generate types -package restapi -o <span class="variable">$@</span>.tmp <span class="variable">$&lt;</span></span><br><span class="line">gomodifytags -all -add-tags boil -transform snakecase -all -file <span class="variable">$@</span>.tmp &gt; <span class="variable">$@</span></span><br><span class="line">rm -f <span class="variable">$@</span>.tmp</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>SQLBoilerの使い方と、これを使ったREST APIサーバの開発フローを紹介させていただきました。</p><p>私は過去約3年ほど、数プロジェクトでSQLBoilerを採用しています。</p><p>この間Goは1.10から1.16となり、SQLBoilerはv2からv4に（主にGo modules対応で破壊的変更はありませんでした）進化しています。</p><p>その性質上うまくハマらないプロジェクトもあるかと思いますが、うまくハマればとても使いやすいライブラリと感じています。</p><p>なお、今回利用したコード、プロジェクトは<a href="https://github.com/uhey22e/sqlboiler-restapi-example">こちらのリポジトリ</a>にまとめてあります。</p><p>次は伊藤真彦さんの<a href="/articles/20210802a/">SQLビルダーgoquの使い方</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ライブリッツの筒井です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20210726a/&quot;&gt;GoのORマッパー連載&lt;/a&gt;、折り返して5日目です。&lt;/p&gt;
&lt;p&gt;SQLBoilerを使用したDBスキーマ駆動なREST APIサーバの開発ワークフローを紹介します。&lt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
    <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
    <category term="コード生成" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>GORM v1 と v2 のソースコードリーディングしてみた</title>
    <link href="https://future-architect.github.io/articles/20210729a/"/>
    <id>https://future-architect.github.io/articles/20210729a/</id>
    <published>2021-07-28T15:00:00.000Z</published>
    <updated>2021-07-30T01:40:23.004Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210729a/image.png"><br><a href="https://gorm.io/">GORM v2 doc</a> より</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>TIG DXユニット 多賀です。<a href="/articles/20210726a/">GoのORマッパー連載</a>の4日目の記事です。</p><p>GORM の v1 と v2 の実装を比較して、何が変わっているのかを調査してみました。<br>v1 -&gt; v2 への移行や、詳細な変更点については別の記事を見ていただいたほうが良いかと思います。</p><ul><li><a href="https://gorm.io/docs/v2_release_note.html">GORM 2.0 Release Note | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></li><li><a href="https://tech.techtouch.jp/entry/gorm-v2">GORM v2 触ってみた Major Features 編 - Techtouch Developers Blog</a></li><li><a href="https://tech.techtouch.jp/entry/gorm-v2-breaking-changes">GORM v2 触ってみた Breaking Changes 編 - Techtouch Developers Blog</a></li></ul><p>当記事では、ソースコードの差分を眺めてみてなにか学びがないかを調べてみた記事になっています。<br>完全にスクラッチで書き直しているとのことで、エッセンスが吸収できると良いなと思っています。</p><p>調査バージョン</p><div class="scroll"><table><thead><tr><th>バージョン</th><th>リポジトリ</th><th>タグ</th></tr></thead><tbody><tr><td>v1</td><td><a href="https://github.com/jinzhu/gorm/tree/v1.9.16">jinzhu/gorm</a></td><td>v1.9.16</td></tr><tr><td>v2</td><td><a href="https://github.com/go-gorm/gorm/tree/v1.21.11">go-gorm/gorm</a></td><td>v1.21.11</td></tr></tbody></table></div><h3 id="ディレクトリ構造"><a href="#ディレクトリ構造" class="headerlink" title="ディレクトリ構造"></a>ディレクトリ構造</h3><p>まずはディレクトリ構造の差分を比較してみます。</p><figure class="highlight sh"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">❯ tree -L 1 --dirsfirst</span><br><span class="line">.</span><br><span class="line">├── dialects</span><br><span class="line">├── License</span><br><span class="line">├── README.md</span><br><span class="line">├── association.go</span><br><span class="line">├── association_test.go</span><br><span class="line">├── callback.go</span><br><span class="line">├── callback_create.go</span><br><span class="line">├── callback_delete.go</span><br><span class="line">├── callback_query.go</span><br><span class="line">├── callback_query_preload.go</span><br><span class="line">├── callback_row_query.go</span><br><span class="line">├── callback_save.go</span><br><span class="line">├── callback_system_test.go</span><br><span class="line">├── callback_update.go</span><br><span class="line">├── callbacks_test.go</span><br><span class="line">├── create_test.go</span><br><span class="line">├── customize_column_test.go</span><br><span class="line">├── delete_test.go</span><br><span class="line">├── dialect.go</span><br><span class="line">├── dialect_common.go</span><br><span class="line">├── dialect_mysql.go</span><br><span class="line">├── dialect_postgres.go</span><br><span class="line">├── dialect_sqlite3.go</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── embedded_struct_test.go</span><br><span class="line">├── errors.go</span><br><span class="line">├── errors_test.go</span><br><span class="line">├── field.go</span><br><span class="line">├── field_test.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── interface.go</span><br><span class="line">├── join_table_handler.go</span><br><span class="line">├── join_table_test.go</span><br><span class="line">├── logger.go</span><br><span class="line">├── main.go</span><br><span class="line">├── main_test.go</span><br><span class="line">├── migration_test.go</span><br><span class="line">├── model.go</span><br><span class="line">├── model_struct.go</span><br><span class="line">├── model_struct_test.go</span><br><span class="line">├── multi_primary_keys_test.go</span><br><span class="line">├── naming.go</span><br><span class="line">├── naming_test.go</span><br><span class="line">├── pointer_test.go</span><br><span class="line">├── polymorphic_test.go</span><br><span class="line">├── preload_test.go</span><br><span class="line">├── query_test.go</span><br><span class="line">├── scaner_test.go</span><br><span class="line">├── scope.go</span><br><span class="line">├── scope_test.go</span><br><span class="line">├── search.go</span><br><span class="line">├── search_test.go</span><br><span class="line">├── test_all.sh</span><br><span class="line">├── update_test.go</span><br><span class="line">├── utils.go</span><br><span class="line">└── wercker.yml</span><br><span class="line"></span><br><span class="line">1 directory, 56 files</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">❯ tree -L 1 --dirsfirst</span><br><span class="line">.</span><br><span class="line">├── callbacks</span><br><span class="line">├── clause</span><br><span class="line">├── logger</span><br><span class="line">├── migrator</span><br><span class="line">├── schema</span><br><span class="line">├── tests</span><br><span class="line">├── utils</span><br><span class="line">├── License</span><br><span class="line">├── README.md</span><br><span class="line">├── association.go</span><br><span class="line">├── callbacks.go</span><br><span class="line">├── chainable_api.go</span><br><span class="line">├── errors.go</span><br><span class="line">├── finisher_api.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── gorm.go</span><br><span class="line">├── interfaces.go</span><br><span class="line">├── migrator.go</span><br><span class="line">├── model.go</span><br><span class="line">├── prepare_stmt.go</span><br><span class="line">├── scan.go</span><br><span class="line">├── soft_delete.go</span><br><span class="line">├── statement.go</span><br><span class="line">└── statement_test.go</span><br><span class="line"></span><br><span class="line">7 directories, 18 files</span><br></pre></td></tr></table></figure><p>v1 ではパッケージが切られていない設計に対して、v2 ではパッケージを分けた設計に変更されています。<br><code>callbacks_xxx.go</code> が <code>callbacks</code> パッケージにまとめられていそうですが、その他の実装がどのように変更されたかはディレクトリ構造を見るだけではわからないですね。</p><h3 id="gorm-Open"><a href="#gorm-Open" class="headerlink" title="gorm.Open"></a>gorm.Open</h3><p>GORM 利用時は、 <code>gorm.Open</code> 関数を利用して <code>database/sql</code> パッケージの <code>sql.DB</code> をラップした GORM 向けの <code>gorm.DB</code> オブジェクトを取得します。取得のインターフェイス含めて何が変わっているのでしょうか？</p><p>API を見てみると、インターフェイス自体がまず変わっていて、第一引数の dialect を文字列ではなく <code>gorm.Dialector</code> で受けるようになっています。なので、 <code>&quot;postgres&quot;</code> や <code>&quot;mysql&quot;</code> の文字列指定ができなくなっていますね。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(dialect <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(db *DB, err error)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(dialector Dialector, opts ...Option)</span> <span class="params">(db *DB, err error)</span></span></span><br></pre></td></tr></table></figure><p><code>gorm.Dialector</code> を見てみると、 interface が定義されています。</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://pkg.go.dev/gorm.io/gorm#Dialector</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dialector GORM database dialector</span></span><br><span class="line"><span class="keyword">type</span> Dialector <span class="keyword">interface</span> &#123;</span><br><span class="line">Name() <span class="keyword">string</span></span><br><span class="line">Initialize(*DB) error</span><br><span class="line">Migrator(db *DB) Migrator</span><br><span class="line">DataTypeOf(*schema.Field) <span class="keyword">string</span></span><br><span class="line">DefaultValueOf(*schema.Field) clause.Expression</span><br><span class="line">BindVarTo(writer clause.Writer, stmt *Statement, v <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">QuoteTo(clause.Writer, <span class="keyword">string</span>)</span><br><span class="line">Explain(sql <span class="keyword">string</span>, vars ...<span class="keyword">interface</span>&#123;&#125;) <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dialector interface の実装ですが、<a href="https://gorm.io/docs/v2_release_note.html#How-To-Upgrade">ドキュメント</a>を見てみると別リポジトリでされていることがわかりました。各 DB driver 毎に <code>dialector</code> が実装されています。</p><ul><li><a href="https://github.com/go-gorm/postgres">https://github.com/go-gorm/postgres</a></li><li><a href="https://github.com/go-gorm/mysql">https://github.com/go-gorm/mysql</a></li><li><a href="https://github.com/go-gorm/sqlite">https://github.com/go-gorm/sqlite</a></li><li><a href="https://github.com/go-gorm/sqlserver">https://github.com/go-gorm/sqlserver</a></li><li><a href="https://github.com/go-gorm/clickhouse">https://github.com/go-gorm/clickhouse</a></li><li><a href="https://github.com/go-gorm/bigquery">https://github.com/go-gorm/bigquery</a></li></ul><p>(BigQuery 向けの <code>dialector</code> が実装されているのが意外でした。)<br>使い方としては、 各パッケージにて <code>Open</code> 関数が定義されているようでそちらを呼び出して、各 DB ごとの <code>dialector</code> を取得します。 (※ module 名がリポジトリ URL と異なるので注意が必要です。)</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sqlite</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">  <span class="string">&quot;gorm.io/driver/sqlite&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dialector := sqlite.Open(<span class="string">&quot;gorm.db&quot;</span>)</span><br><span class="line">db, err := gorm.Open(dialector, &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><p>v1 と異なり、利用者側で driver を blank import しなくて良くなりました。 GORM が提供する dialector の実装内で既に定義されているためです。それぞれの dialector の実装を見たところ、 Postgres の driver が <a href="https://github.com/jackc/pgx">jackc/pgx</a> になっていた点が意外でした ( <a href="https://github.com/lib/pq">lib/pq</a> をよく使っていました )。<br>driver を変更したい場合は、 <code>gorm.Dialector</code> interface を実装する必要があり、少し選択の自由度が下がってますね。</p><hr><p><code>余談</code><br><a href="https://github.com/jackc/pgx">jackc/pgx</a> は <code>database/sql</code> と 独自のインターフェイスのどちらも対応している点が <a href="https://github.com/lib/pq">lib/pq</a> と異なり、独自のインターフェイスではより Postgres の特徴を利用できる模様です。</p><ul><li><a href="https://github.com/jackc/pgx#comparison-with-alternatives">GitHub - jackc/pgx: PostgreSQL driver and toolkit for Go</a></li><li><a href="https://github.com/jackc/pgx/issues/73">[QUESTION] Comparison with lib/pq · Issue #73 · jackc/pgx · GitHub</a></li></ul><hr><p>第2引数以降の指定も変更されています。 Functional options パターンが使われるようになっていますね。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(dialect <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(db *DB, err error)</span></span></span><br><span class="line">                          ↑ この部分</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(dialector Dialector, opts ...Option)</span> <span class="params">(db *DB, err error)</span></span></span><br><span class="line">                               ↑ この部分</span><br></pre></td></tr></table></figure><p><code>Option</code> は interface になっています。 <code>Apply(*Config) error</code> が適用される option です。</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Option <span class="keyword">interface</span> &#123;</span><br><span class="line">Apply(*Config) error</span><br><span class="line">AfterInitialize(*DB) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gorm.Open</code> のAPI 変更は、全体的に型付けを厳格化して Open の実装ミスをコンパイル時にある程度検知できるように、設計変更されていると感じました。</p><p>ソースコードの面でも、インターフェイスの変更に伴い、更新が入っています。</p><details><summary>[v1 gorm.Open](https://github.com/jinzhu/gorm/blob/v1.9.16/main.go#L58)</summary><div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(dialect <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(db *DB, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> &#123;</span><br><span class="line">err = errors.New(<span class="string">&quot;invalid database source&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> source <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> dbSQL SQLCommon</span><br><span class="line"><span class="keyword">var</span> ownDbSQL <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> value := args[<span class="number">0</span>].(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line"><span class="keyword">var</span> driver = dialect</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">1</span> &#123;</span><br><span class="line">source = value</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(args) &gt;= <span class="number">2</span> &#123;</span><br><span class="line">driver = value</span><br><span class="line">source = args[<span class="number">1</span>].(<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line">dbSQL, err = sql.Open(driver, source)</span><br><span class="line">ownDbSQL = <span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span> SQLCommon:</span><br><span class="line">dbSQL = value</span><br><span class="line">ownDbSQL = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;invalid database source: %v is not a valid type&quot;</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db = &amp;DB&#123;</span><br><span class="line">db:        dbSQL,</span><br><span class="line">logger:    defaultLogger,</span><br><span class="line">callbacks: DefaultCallback,</span><br><span class="line">dialect:   newDialect(dialect, dbSQL),</span><br><span class="line">&#125;</span><br><span class="line">db.parent = db</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Send a ping to make sure the database connection is alive.</span></span><br><span class="line"><span class="keyword">if</span> d, ok := dbSQL.(*sql.DB); ok &#123;</span><br><span class="line"><span class="keyword">if</span> err = d.Ping(); err != <span class="literal">nil</span> &amp;&amp; ownDbSQL &#123;</span><br><span class="line">d.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details><summary>[v2 gorm.Open](https://github.com/go-gorm/gorm/blob/v1.21.11/gorm.go#L112)</summary><div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(dialector Dialector, opts ...Option)</span> <span class="params">(db *DB, err error)</span></span> &#123;</span><br><span class="line">config := &amp;Config&#123;&#125;</span><br><span class="line"></span><br><span class="line">sort.Slice(opts, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">_, isConfig := opts[i].(*Config)</span><br><span class="line">_, isConfig2 := opts[j].(*Config)</span><br><span class="line"><span class="keyword">return</span> isConfig &amp;&amp; !isConfig2</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, opt := <span class="keyword">range</span> opts &#123;</span><br><span class="line"><span class="keyword">if</span> opt != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := opt.Apply(config); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(opt Option)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> errr := opt.AfterInitialize(db); errr != <span class="literal">nil</span> &#123;</span><br><span class="line">err = errr</span><br><span class="line">&#125;</span><br><span class="line">&#125;(opt)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> d, ok := dialector.(<span class="keyword">interface</span>&#123; Apply(*Config) error &#125;); ok &#123;</span><br><span class="line"><span class="keyword">if</span> err = d.Apply(config); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.NamingStrategy == <span class="literal">nil</span> &#123;</span><br><span class="line">config.NamingStrategy = schema.NamingStrategy&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.Logger == <span class="literal">nil</span> &#123;</span><br><span class="line">config.Logger = logger.Default</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.NowFunc == <span class="literal">nil</span> &#123;</span><br><span class="line">config.NowFunc = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123; <span class="keyword">return</span> time.Now().Local() &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> dialector != <span class="literal">nil</span> &#123;</span><br><span class="line">config.Dialector = dialector</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.Plugins == <span class="literal">nil</span> &#123;</span><br><span class="line">config.Plugins = <span class="keyword">map</span>[<span class="keyword">string</span>]Plugin&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.cacheStore == <span class="literal">nil</span> &#123;</span><br><span class="line">config.cacheStore = &amp;sync.Map&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db = &amp;DB&#123;Config: config, clone: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">db.callbacks = initializeCallbacks(db)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.ClauseBuilders == <span class="literal">nil</span> &#123;</span><br><span class="line">config.ClauseBuilders = <span class="keyword">map</span>[<span class="keyword">string</span>]clause.ClauseBuilder&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.Dialector != <span class="literal">nil</span> &#123;</span><br><span class="line">err = config.Dialector.Initialize(db)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preparedStmt := &amp;PreparedStmtDB&#123;</span><br><span class="line">ConnPool:    db.ConnPool,</span><br><span class="line">Stmts:       <span class="keyword">map</span>[<span class="keyword">string</span>]Stmt&#123;&#125;,</span><br><span class="line">Mux:         &amp;sync.RWMutex&#123;&#125;,</span><br><span class="line">PreparedSQL: <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="number">100</span>),</span><br><span class="line">&#125;</span><br><span class="line">db.cacheStore.Store(preparedStmtDBKey, preparedStmt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.PrepareStmt &#123;</span><br><span class="line">db.ConnPool = preparedStmt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Statement = &amp;Statement&#123;</span><br><span class="line">DB:       db,</span><br><span class="line">ConnPool: db.ConnPool,</span><br><span class="line">Context:  context.Background(),</span><br><span class="line">Clauses:  <span class="keyword">map</span>[<span class="keyword">string</span>]clause.Clause&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; !config.DisableAutomaticPing &#123;</span><br><span class="line"><span class="keyword">if</span> pinger, ok := db.ConnPool.(<span class="keyword">interface</span>&#123; Ping() error &#125;); ok &#123;</span><br><span class="line">err = pinger.Ping()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">config.Logger.Error(context.Background(), <span class="string">&quot;failed to initialize database, got error %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>第一に、Open の返却値である DB struct のフィールド構成が大きく変更されています。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DB <span class="keyword">struct</span> &#123;</span><br><span class="line">sync.RWMutex</span><br><span class="line">Value        <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Error        error</span><br><span class="line">RowsAffected <span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// single db</span></span><br><span class="line">db                SQLCommon</span><br><span class="line">blockGlobalUpdate <span class="keyword">bool</span></span><br><span class="line">logMode           logModeValue</span><br><span class="line">logger            logger</span><br><span class="line">search            *search</span><br><span class="line">values            sync.Map</span><br><span class="line"></span><br><span class="line"><span class="comment">// global db</span></span><br><span class="line">parent        *DB</span><br><span class="line">callbacks     *Callback</span><br><span class="line">dialect       Dialect</span><br><span class="line">singularTable <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function to be used to override the creating of a new timestamp</span></span><br><span class="line">nowFuncOverride <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DB <span class="keyword">struct</span> &#123;</span><br><span class="line">*Config</span><br><span class="line">Error        error</span><br><span class="line">RowsAffected <span class="keyword">int64</span></span><br><span class="line">Statement    *Statement</span><br><span class="line">clone        <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v2 では 設定値が <code>Config</code> struct の埋め込みで表現されていて、設定値のフィールド項目がわかりやすくなっています。また先程の、 <code>Option</code> interface を <code>Config</code> struct が満たしているため、設定値をまとめて渡すことができるようになっています。</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db, err := gorm.Open(dialector, &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure><p>v1, v2 とも <code>sql.DB</code> をラップしているのですが、 struct をぱっと見ただけではどこに持っているのかわからないです。実態はこちらです。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DB <span class="keyword">struct</span> &#123;</span><br><span class="line">db SQLCommon <span class="comment">// *sql.DB</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">ConnPool ConnPool <span class="comment">// *sql.DB</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>どちらも、 <code>sql.DB</code> を満たす interface が定義されているのですが、interface 定義も少し改良が加えられています。 v2 では Context 対応のメソッドを利用するように変更されていて、 Context に正式に対応していることがわかります。 <code>database/sql</code> のインターフェイスは以下の 4メソッドだけしか利用されていないのも少々驚きました。(正確には、Transaction 系のメソッドも利用されています。 別で <code>TxBeginner</code> <code>TxCommitter</code> interface が GORM 内で定義されており、型変換により <code>dabase/sql</code> の各 Transaction 系のメソッドを呼び出していました。)</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SQLCommon <span class="keyword">interface</span> &#123;</span><br><span class="line">Exec(query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) (sql.Result, error)</span><br><span class="line">Prepare(query <span class="keyword">string</span>) (*sql.Stmt, error)</span><br><span class="line">Query(query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) (*sql.Rows, error)</span><br><span class="line">QueryRow(query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) *sql.Row</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ConnPool <span class="keyword">interface</span> &#123;</span><br><span class="line">PrepareContext(ctx context.Context, query <span class="keyword">string</span>) (*sql.Stmt, error)</span><br><span class="line">ExecContext(ctx context.Context, query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) (sql.Result, error)</span><br><span class="line">QueryContext(ctx context.Context, query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) (*sql.Rows, error)</span><br><span class="line">QueryRowContext(ctx context.Context, query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) *sql.Row</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに、sql.DB の生成については、 v1 は直接 <code>sql.Open</code> を呼び出しているのですが、 v2 では <code>gorm.Dialector.Initialize()</code> を経由して、 GORM が提供している driver 内で sql.Open を呼び出しています。</p><p>参考: <a href="https://github.com/go-gorm/sqlite/blob/master/sqlite.go#L47">https://github.com/go-gorm/sqlite/blob/master/sqlite.go#L47</a></p><p><code>エッセンス</code></p><ul><li>interface を利用して型付けを厳格にして実行時エラーを防御</li><li>任意の項目は Functional options パターンで設定できるようにすると良い</li><li>config 値は、struct として定義して埋め込みで定義することで、設定値と struct で利用するフィールドを分離</li><li>標準API から必要なメソッドのみを、抜き出して interface 定義することで、利用するメソッドを絞り込む</li></ul><h4 id="おまけ-Prepared-Statement"><a href="#おまけ-Prepared-Statement" class="headerlink" title="(おまけ) Prepared Statement"></a>(おまけ) Prepared Statement</h4><p>v2 では Prepared Statement モードに対応しています。 <code>gorm.Open</code> 内で実装箇所がありましたので、併せて調べてみます。<br>ちなみに、 v1 の <code>SQLCommon</code> 上は <code>Prepare()</code> の呼び出しに対応していますが、検索したところ実装上は呼ばれていなかったので Prepared Statement は使えなかった状態と考えられます。<br>v2 では、 <code>gorm.Open()</code> の呼び出し時の <code>opts</code> に <code>gorm.Config&#123;PrepareStmt: true&#125;</code> と指定することで利用できます。</p><p>実装としては、 <code>gorm.PreparedStmtDB</code> structをキャッシュで持ち、 <code>ConnPool</code> (= <code>sql.DB</code>) と差し替えを実施しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(dialector Dialector, opts ...Option)</span> <span class="params">(db *DB, err error)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">preparedStmt := &amp;PreparedStmtDB&#123;</span><br><span class="line">ConnPool:    db.ConnPool,</span><br><span class="line">Stmts:       <span class="keyword">map</span>[<span class="keyword">string</span>]Stmt&#123;&#125;,</span><br><span class="line">Mux:         &amp;sync.RWMutex&#123;&#125;,</span><br><span class="line">PreparedSQL: <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="number">100</span>),</span><br><span class="line">&#125;</span><br><span class="line">db.cacheStore.Store(preparedStmtDBKey, preparedStmt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.PrepareStmt &#123;</span><br><span class="line"><span class="comment">// db.ConnPool を prepared statement 対応版へ差し替え</span></span><br><span class="line">db.ConnPool = preparedStmt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Statement = &amp;Statement&#123;</span><br><span class="line">DB:       db,</span><br><span class="line">ConnPool: db.ConnPool,</span><br><span class="line">Context:  context.Background(),</span><br><span class="line">Clauses:  <span class="keyword">map</span>[<span class="keyword">string</span>]clause.Clause&#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PreparedStmtDB</code> struct にて prepare された Stmt を管理して、クエリ実行時に prepare されているかキャッシュ ( <code>Stmts</code> フィールド) を検索して利用しています。</p><p><a href="https://github.com/go-gorm/gorm/blob/v1.21.11/prepare_stmt.go#L14">gorm/prepare_stmt.go at v1.21.11 · go-gorm/gorm</a></p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PreparedStmtDB <span class="keyword">struct</span> &#123;</span><br><span class="line">Stmts       <span class="keyword">map</span>[<span class="keyword">string</span>]Stmt <span class="comment">// Stmt キャッシュ</span></span><br><span class="line">PreparedSQL []<span class="keyword">string</span></span><br><span class="line">Mux         *sync.RWMutex</span><br><span class="line">ConnPool</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stmt <span class="keyword">struct</span> &#123;</span><br><span class="line">*sql.Stmt <span class="comment">// database/sql 標準を利用</span></span><br><span class="line">Transaction <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query の場合</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *PreparedStmtDB)</span> <span class="title">QueryContext</span><span class="params">(ctx context.Context, query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(rows *sql.Rows, err error)</span></span> &#123;</span><br><span class="line">stmt, err := db.prepare(ctx, db.ConnPool, <span class="literal">false</span>, query) <span class="comment">// ここで Stmt キャッシュを検索</span></span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">rows, err = stmt.QueryContext(ctx, args...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">db.Mux.Lock()</span><br><span class="line">stmt.Close()</span><br><span class="line"><span class="built_in">delete</span>(db.Stmts, query)</span><br><span class="line">db.Mux.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rows, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="クエリ発行"><a href="#クエリ発行" class="headerlink" title="クエリ発行"></a>クエリ発行</h3><p>クエリ発行の比較として、先頭一行を SELECT する <code>First()</code> 関数の実装を読んでみます。</p><p><a href="https://github.com/jinzhu/gorm/blob/v1.9.16/main.go#L329">v1: gorm/main.go#First</a></p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span> <span class="title">First</span><span class="params">(out <span class="keyword">interface</span>&#123;&#125;, where ...<span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">DB</span></span> &#123;</span><br><span class="line">newScope := s.NewScope(out)</span><br><span class="line">newScope.Search.Limit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newScope.Set(<span class="string">&quot;gorm:order_by_primary_key&quot;</span>, <span class="string">&quot;ASC&quot;</span>).</span><br><span class="line">inlineCondition(where...).callCallbacks(s.parent.callbacks.queries).db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/go-gorm/gorm/blob/v1.21.11/finisher_api.go#L114">v2: gorm/finisher_api.go#First</a></p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">First</span><span class="params">(dest <span class="keyword">interface</span>&#123;&#125;, conds ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(tx *DB)</span></span> &#123;</span><br><span class="line">tx = db.Limit(<span class="number">1</span>).Order(clause.OrderByColumn&#123;</span><br><span class="line">Column: clause.Column&#123;Table: clause.CurrentTable, Name: clause.PrimaryKey&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(conds) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> exprs := tx.Statement.BuildCondition(conds[<span class="number">0</span>], conds[<span class="number">1</span>:]...); <span class="built_in">len</span>(exprs) &gt; <span class="number">0</span> &#123;</span><br><span class="line">tx.Statement.AddClause(clause.Where&#123;Exprs: exprs&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tx.Statement.RaiseErrorOnNotFound = <span class="literal">true</span></span><br><span class="line">tx.Statement.Dest = dest</span><br><span class="line"><span class="keyword">return</span> tx.callbacks.Query().Execute(tx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API のインターフェイスは変わっていないですが、引数の命名が変更されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sql の結果の出力先は destination と名付けられている模様です</span></span><br><span class="line">out -&gt; dest</span><br><span class="line"></span><br><span class="line"><span class="comment">// condition へ命名を統一している模様です</span></span><br><span class="line"><span class="comment">// v1 から inlineCondition 等で condition を使っているため</span></span><br><span class="line">where -&gt; conds</span><br></pre></td></tr></table></figure><p>実装を読むと、v1 は <code>Scope</code> struct を利用して SQL を実行していたのに対して、v2 では特に <code>Scope</code> struct は利用せず <code>gorm.DB</code> を tx 変数へ格納の上で、そのまま利用しています。<br>そもそも v1 の <code>Scope</code> はどういった利用用途であったかを調べてみると、 <code>Scope</code> のコメントにあるように実行する特定のクエリ操作の状態のみを含むオブジェクト、を指している模様です。 <code>First()</code> で呼び出している <code>db.NewScope()</code> メソッドを見ると、 <code>gorm.DB</code> を clone して <code>Scope</code> へ渡しておりクエリ発行毎に <code>Scope</code> を生成していることがわかります。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scope contain current operation&#x27;s information when you perform any operation on the database</span></span><br><span class="line"><span class="keyword">type</span> Scope <span class="keyword">struct</span> &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewScope create a scope for current operation</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span> <span class="title">NewScope</span><span class="params">(value <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">Scope</span></span> &#123;</span><br><span class="line">dbClone := s.clone()</span><br><span class="line">dbClone.Value = value</span><br><span class="line">scope := &amp;Scope&#123;db: dbClone, Value: value&#125;</span><br><span class="line"><span class="keyword">if</span> s.search != <span class="literal">nil</span> &#123;</span><br><span class="line">scope.Search = s.search.clone()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">scope.Search = &amp;search&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> scope</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v2 では、 <code>First()</code> 内で直接呼び出してはないですが、 <code>First()</code> で呼び出している <code>Limit()</code> や <code>Order()</code> 内の <code>gorm.DB.getInstance()</code> メソッドで同様の処理をしています。<br>v2 では <code>gorm.DB</code> をそのままコピーして利用しつつ、<code>Statement</code> をクエリ発行毎に 発行 or clone しています。</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">Limit</span><span class="params">(limit <span class="keyword">int</span>)</span> <span class="params">(tx *DB)</span></span> &#123;</span><br><span class="line">tx = db.getInstance() <span class="comment">// この部分</span></span><br><span class="line">tx.Statement.AddClause(clause.Limit&#123;Limit: limit&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">getInstance</span><span class="params">()</span> *<span class="title">DB</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> db.clone &gt; <span class="number">0</span> &#123;</span><br><span class="line">tx := &amp;DB&#123;Config: db.Config, Error: db.Error&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> db.clone == <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">// clone with new statement</span></span><br><span class="line">tx.Statement = &amp;Statement&#123;</span><br><span class="line">DB:       tx,</span><br><span class="line">ConnPool: db.Statement.ConnPool,</span><br><span class="line">Context:  db.Statement.Context,</span><br><span class="line">Clauses:  <span class="keyword">map</span>[<span class="keyword">string</span>]clause.Clause&#123;&#125;,</span><br><span class="line">Vars:     <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>, <span class="number">8</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// with clone statement</span></span><br><span class="line">tx.Statement = db.Statement.clone()</span><br><span class="line">tx.Statement.DB = tx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Statement</code> の定義は以下です。 <code>scopes</code> はフィールドで持つ構造になっています。</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Statement <span class="keyword">struct</span> &#123;</span><br><span class="line">*DB</span><br><span class="line">TableExpr            *clause.Expr</span><br><span class="line">Table                <span class="keyword">string</span></span><br><span class="line">Model                <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Unscoped             <span class="keyword">bool</span></span><br><span class="line">Dest                 <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">ReflectValue         reflect.Value</span><br><span class="line">Clauses              <span class="keyword">map</span>[<span class="keyword">string</span>]clause.Clause</span><br><span class="line">BuildClauses         []<span class="keyword">string</span></span><br><span class="line">Distinct             <span class="keyword">bool</span></span><br><span class="line">Selects              []<span class="keyword">string</span> <span class="comment">// selected columns</span></span><br><span class="line">Omits                []<span class="keyword">string</span> <span class="comment">// omit columns</span></span><br><span class="line">Joins                []join</span><br><span class="line">Preloads             <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Settings             sync.Map</span><br><span class="line">ConnPool             ConnPool</span><br><span class="line">Schema               *schema.Schema</span><br><span class="line">Context              context.Context</span><br><span class="line">RaiseErrorOnNotFound <span class="keyword">bool</span></span><br><span class="line">SkipHooks            <span class="keyword">bool</span></span><br><span class="line">SQL                  strings.Builder</span><br><span class="line">Vars                 []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">CurDestIndex         <span class="keyword">int</span></span><br><span class="line">attrs                []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">assigns              []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">scopes               []<span class="function"><span class="keyword">func</span><span class="params">(*DB)</span> *<span class="title">DB</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scope を生成しているところから、Statement へ変更されていますが、実態としては大きな変更は入っていない印象でした。<br>(データモデルやインターフェイスは変わっていますが、やっていることはあまり変わっていないため。)</p><p>続いて実際のクエリ発行と、model への適用はどこでやっているのでしょうか。<br>v1, v2 ともにレコード取得は以下のメソッド呼び出しで完結しています。</p><figure class="highlight go"><figcaption><span>v1&v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v1 と v2 どちらも同様</span></span><br><span class="line">db.First(&amp;product, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>v1 から見てみると、<code>First</code> メソッド内のどこかしらでクエリ発行が行われているはずですが、実装を見ても正直良くわからないです。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v1 First()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span> <span class="title">First</span><span class="params">(out <span class="keyword">interface</span>&#123;&#125;, where ...<span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">DB</span></span> &#123;</span><br><span class="line">newScope := s.NewScope(out)</span><br><span class="line">newScope.Search.Limit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newScope.Set(<span class="string">&quot;gorm:order_by_primary_key&quot;</span>, <span class="string">&quot;ASC&quot;</span>).</span><br><span class="line">inlineCondition(where...).callCallbacks(s.parent.callbacks.queries).db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>おそらく、 <code>callCallbacks</code> にて実行されていると推測しましたが、実装をみると引数で渡された関数を呼び出しているのみでした。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(scope *Scope)</span> <span class="title">callCallbacks</span><span class="params">(funcs []*<span class="keyword">func</span>(s *Scope)</span>) *<span class="title">Scope</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> db, ok := scope.db.db.(sqlTx); ok &#123;</span><br><span class="line">db.Rollback()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> funcs &#123;</span><br><span class="line">(*f)(scope)</span><br><span class="line"><span class="keyword">if</span> scope.skipLeft &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> scope</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>callCallbacks</code> の引数である、<code>s.parent.callbacks.queries</code> にクエリを実行する関数が渡っていそうなので、どこで定義しているか調べてみると、 <code>gorm.Open</code> にて <code>DefaultCallback</code> を渡していました。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(dialect <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(db *DB, err error)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">db = &amp;DB&#123;</span><br><span class="line">db:        dbSQL,</span><br><span class="line">logger:    defaultLogger,</span><br><span class="line">callbacks: DefaultCallback,</span><br><span class="line">dialect:   newDialect(dialect, dbSQL),</span><br><span class="line">&#125;</span><br><span class="line">db.parent = db</span><br></pre></td></tr></table></figure><p>さらに、 <code>DefaultCallback</code> をみると、 <code>Callback</code> struct が格納されているだけで、 <code>queries</code> フィールドが初期化されていません。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// callback.go</span></span><br><span class="line"><span class="keyword">var</span> DefaultCallback = &amp;Callback&#123;logger: nopLogger&#123;&#125;&#125; <span class="comment">// 初期化されていない..?</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>どこかで初期化しているところはないか、調べてみると <code>init()</code> が利用されてました。 <code>init()</code> が利用されていると、ソースコードが追いづらくて、読みづらかったです。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// callback_query.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">DefaultCallback.Query().Register(<span class="string">&quot;gorm:query&quot;</span>, queryCallback)</span><br><span class="line">DefaultCallback.Query().Register(<span class="string">&quot;gorm:preload&quot;</span>, preloadCallback)</span><br><span class="line">DefaultCallback.Query().Register(<span class="string">&quot;gorm:after_query&quot;</span>, afterQueryCallback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>クエリ発行の実態は、 <code>Register()</code> で渡されている <code>queryCallback</code> 関数でした。</p><details><summary>[v1 gorm.queryCallback](https://github.com/jinzhu/gorm/blob/v1.9.16/callback_query.go#L17)</summary><div><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryCallback</span><span class="params">(scope *Scope)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> _, skip := scope.InstanceGet(<span class="string">&quot;gorm:skip_query_callback&quot;</span>); skip &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//we are only preloading relations, dont touch base model</span></span><br><span class="line"><span class="keyword">if</span> _, skip := scope.InstanceGet(<span class="string">&quot;gorm:only_preload&quot;</span>); skip &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> scope.trace(NowFunc())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">isSlice, isPtr <span class="keyword">bool</span></span><br><span class="line">resultType     reflect.Type</span><br><span class="line">results        = scope.IndirectValue()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> orderBy, ok := scope.Get(<span class="string">&quot;gorm:order_by_primary_key&quot;</span>); ok &#123;</span><br><span class="line"><span class="keyword">if</span> primaryField := scope.PrimaryField(); primaryField != <span class="literal">nil</span> &#123;</span><br><span class="line">scope.Search.Order(fmt.Sprintf(<span class="string">&quot;%v.%v %v&quot;</span>, scope.QuotedTableName(), scope.Quote(primaryField.DBName), orderBy))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value, ok := scope.Get(<span class="string">&quot;gorm:query_destination&quot;</span>); ok &#123;</span><br><span class="line">results = indirect(reflect.ValueOf(value))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> kind := results.Kind(); kind == reflect.Slice &#123;</span><br><span class="line">isSlice = <span class="literal">true</span></span><br><span class="line">resultType = results.Type().Elem()</span><br><span class="line">results.Set(reflect.MakeSlice(results.Type(), <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resultType.Kind() == reflect.Ptr &#123;</span><br><span class="line">isPtr = <span class="literal">true</span></span><br><span class="line">resultType = resultType.Elem()</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> kind != reflect.Struct &#123;</span><br><span class="line">scope.Err(errors.New(<span class="string">&quot;unsupported destination, should be slice or struct&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scope.prepareQuerySQL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !scope.HasError() &#123;</span><br><span class="line">scope.db.RowsAffected = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> str, ok := scope.Get(<span class="string">&quot;gorm:query_hint&quot;</span>); ok &#123;</span><br><span class="line">scope.SQL = fmt.Sprint(str) + scope.SQL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> str, ok := scope.Get(<span class="string">&quot;gorm:query_option&quot;</span>); ok &#123;</span><br><span class="line">scope.SQL += addExtraSpaceIfExist(fmt.Sprint(str))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rows, err := scope.SQLDB().Query(scope.SQL, scope.SQLVars...); scope.Err(err) == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">columns, _ := rows.Columns()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">scope.db.RowsAffected++</span><br><span class="line"></span><br><span class="line">elem := results</span><br><span class="line"><span class="keyword">if</span> isSlice &#123;</span><br><span class="line">elem = reflect.New(resultType).Elem()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scope.scan(rows, columns, scope.New(elem.Addr().Interface()).Fields())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isSlice &#123;</span><br><span class="line"><span class="keyword">if</span> isPtr &#123;</span><br><span class="line">results.Set(reflect.Append(results, elem.Addr()))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">results.Set(reflect.Append(results, elem))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := rows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">scope.Err(err)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> scope.db.RowsAffected == <span class="number">0</span> &amp;&amp; !isSlice &#123;</span><br><span class="line">scope.Err(ErrRecordNotFound)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>scope を利用して、いくつか処理を挟んでいますが、クエリの実行と model への代入は以下の部分です。<br><a href="https://github.com/jinzhu/gorm/blob/v1.9.16/scope.go#L476">scope.scan()</a> の実装を読むと、 <code>interface&#123;&#125;</code> で model を渡していることもあり、 reflection が多用されていました。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryCallback</span><span class="params">(scope *Scope)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// SQLDB() で gorm.SQLCommon を取得</span></span><br><span class="line"><span class="comment">// gorm.SQLCommon = *sql.DB であり、標準の Query を呼び出している</span></span><br><span class="line"><span class="keyword">if</span> rows, err := scope.SQLDB().Query(scope.SQL, scope.SQLVars...); scope.Err(err) == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">columns, _ := rows.Columns()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">scope.db.RowsAffected++</span><br><span class="line"></span><br><span class="line">elem := results</span><br><span class="line"><span class="keyword">if</span> isSlice &#123;</span><br><span class="line">elem = reflect.New(resultType).Elem()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第3 引数 の []*Fields を更新してレコードの値を代入</span></span><br><span class="line">scope.scan(rows, columns, scope.New(elem.Addr().Interface()).Fields())</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>v1 での実装はここまでにして、 v2 の <code>First()</code> はどうなっているかを紐解いていきます。<br>実装を読む限り、 <code>tx.callbacks.Query().Execute(tx)</code> でクエリが実行されていそうなことがわかり、読みやすくなっています。</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v2 First()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">First</span><span class="params">(dest <span class="keyword">interface</span>&#123;&#125;, conds ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(tx *DB)</span></span> &#123;</span><br><span class="line">tx = db.Limit(<span class="number">1</span>).Order(clause.OrderByColumn&#123;</span><br><span class="line">Column: clause.Column&#123;Table: clause.CurrentTable, Name: clause.PrimaryKey&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(conds) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> exprs := tx.Statement.BuildCondition(conds[<span class="number">0</span>], conds[<span class="number">1</span>:]...); <span class="built_in">len</span>(exprs) &gt; <span class="number">0</span> &#123;</span><br><span class="line">tx.Statement.AddClause(clause.Where&#123;Exprs: exprs&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tx.Statement.RaiseErrorOnNotFound = <span class="literal">true</span></span><br><span class="line">tx.Statement.Dest = dest</span><br><span class="line"><span class="keyword">return</span> tx.callbacks.Query().Execute(tx) <span class="comment">// おそらくここ</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>まず、 <code>tx.callbacks.Query()</code> の実装を見ると、 mapに格納された query 向けの processor を取得しています。</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *callbacks)</span> <span class="title">Query</span><span class="params">()</span> *<span class="title">processor</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> cs.processors[<span class="string">&quot;query&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v1 と同様に、processors が初期化されている実装を探してみると、 <code>initializeCallbacks()</code> が定義されており、 <code>gorm.Open</code> から呼ばれていました。 <code>init()</code> ではないので、ソースコードが追いやすく明示的に初期化できるようになっており、とても良い設計変更だと思いました。</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initializeCallbacks</span><span class="params">(db *DB)</span> *<span class="title">callbacks</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;callbacks&#123;</span><br><span class="line">processors: <span class="keyword">map</span>[<span class="keyword">string</span>]*processor&#123;</span><br><span class="line"><span class="string">&quot;create&quot;</span>: &#123;db: db&#125;,</span><br><span class="line"><span class="string">&quot;query&quot;</span>:  &#123;db: db&#125;,</span><br><span class="line"><span class="string">&quot;update&quot;</span>: &#123;db: db&#125;,</span><br><span class="line"><span class="string">&quot;delete&quot;</span>: &#123;db: db&#125;,</span><br><span class="line"><span class="string">&quot;row&quot;</span>:    &#123;db: db&#125;,</span><br><span class="line"><span class="string">&quot;raw&quot;</span>:    &#123;db: db&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gorm.Open で呼び出されている</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(dialector Dialector, opts ...Option)</span> <span class="params">(db *DB, err error)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">db.callbacks = initializeCallbacks(db)</span><br></pre></td></tr></table></figure><p><code>initializeCallbacks()</code> の実装をよくみると、各 processor に <code>gorm.DB</code> を渡しているのみであることがわかります。要するに、 <code>create</code> と <code>query</code> に渡している processor に違いがない状態です。違いがない状態で、どのように発行するクエリを切り替えているのでしょうか。<br>(v1 では、processor ごとに異なる関数を渡すことで実装を切り替えてました。)</p><p><code>First()</code> に戻ると、 <code>tx.callbacks.Query().Execute(tx)</code> が実行されているので、processor の <code>Execute()</code> メソッドが呼ばれていることがわかります。</p><details><summary>[v2 processor.Execute()](https://github.com/go-gorm/gorm/blob/v1.21.11/callbacks.go#L75)</summary><div><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *processor)</span> <span class="title">Execute</span><span class="params">(db *DB)</span> *<span class="title">DB</span></span> &#123;</span><br><span class="line"><span class="comment">// call scopes</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(db.Statement.scopes) &gt; <span class="number">0</span> &#123;</span><br><span class="line">scopes := db.Statement.scopes</span><br><span class="line">db.Statement.scopes = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">for</span> _, scope := <span class="keyword">range</span> scopes &#123;</span><br><span class="line">db = scope(db)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">curTime           = time.Now()</span><br><span class="line">stmt              = db.Statement</span><br><span class="line">resetBuildClauses <span class="keyword">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(stmt.BuildClauses) == <span class="number">0</span> &#123;</span><br><span class="line">stmt.BuildClauses = p.Clauses</span><br><span class="line">resetBuildClauses = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// assign model values</span></span><br><span class="line"><span class="keyword">if</span> stmt.Model == <span class="literal">nil</span> &#123;</span><br><span class="line">stmt.Model = stmt.Dest</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> stmt.Dest == <span class="literal">nil</span> &#123;</span><br><span class="line">stmt.Dest = stmt.Model</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse model values</span></span><br><span class="line"><span class="keyword">if</span> stmt.Model != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := stmt.Parse(stmt.Model); err != <span class="literal">nil</span> &amp;&amp; (!errors.Is(err, schema.ErrUnsupportedDataType) || (stmt.Table == <span class="string">&quot;&quot;</span> &amp;&amp; stmt.SQL.Len() == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, schema.ErrUnsupportedDataType) &amp;&amp; stmt.Table == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">db.AddError(fmt.Errorf(<span class="string">&quot;%w: Table not set, please set it like: db.Model(&amp;user) or db.Table(\&quot;users\&quot;)&quot;</span>, err))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">db.AddError(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// assign stmt.ReflectValue</span></span><br><span class="line"><span class="keyword">if</span> stmt.Dest != <span class="literal">nil</span> &#123;</span><br><span class="line">stmt.ReflectValue = reflect.ValueOf(stmt.Dest)</span><br><span class="line"><span class="keyword">for</span> stmt.ReflectValue.Kind() == reflect.Ptr &#123;</span><br><span class="line"><span class="keyword">if</span> stmt.ReflectValue.IsNil() &amp;&amp; stmt.ReflectValue.CanAddr() &#123;</span><br><span class="line">stmt.ReflectValue.Set(reflect.New(stmt.ReflectValue.Type().Elem()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stmt.ReflectValue = stmt.ReflectValue.Elem()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !stmt.ReflectValue.IsValid() &#123;</span><br><span class="line">db.AddError(ErrInvalidValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> p.fns &#123;</span><br><span class="line">f(db)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Logger.Trace(stmt.Context, curTime, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int64</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> db.Dialector.Explain(stmt.SQL.String(), stmt.Vars...), db.RowsAffected</span><br><span class="line">&#125;, db.Error)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !stmt.DB.DryRun &#123;</span><br><span class="line">stmt.SQL.Reset()</span><br><span class="line">stmt.Vars = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resetBuildClauses &#123;</span><br><span class="line">stmt.BuildClauses = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>(<code>Execute()</code> を読んでみても、どこで SQL が実行されているかよくわからないですね..。)<br>よくわからなかったので、v2 の <code>First()</code> を呼ぶ簡易な実装をして、デバッグ実行してみたところ、 <code>processor.fns</code> にクエリを実行する関数がセットされていることがわかりました。</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *processor)</span> <span class="title">Execute</span><span class="params">(db *DB)</span> *<span class="title">DB</span></span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// クエリ発行はこの部分</span></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> p.fns &#123;</span><br><span class="line">f(db)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// セットされていた関数</span></span><br><span class="line"><span class="comment">// ./callbacks/query.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Query</span><span class="params">(db *gorm.DB)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> db.Error == <span class="literal">nil</span> &#123;</span><br><span class="line">BuildQuerySQL(db)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !db.DryRun &amp;&amp; db.Error == <span class="literal">nil</span> &#123;</span><br><span class="line">rows, err := db.Statement.ConnPool.QueryContext(db.Statement.Context, db.Statement.SQL.String(), db.Statement.Vars...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">db.AddError(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">gorm.Scan(rows, db, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gorm.Open</code> で呼び出している <code>initializeCallbacks()</code> の実装を読む限りは、特に <code>processor.fns</code> がセットされていません。どこでセットしているか調べてみたところ、<code>dialector</code> の実装にて定義されていました。(つまり別パッケージで定義されていました。。)</p><p><a href="https://github.com/go-gorm/sqlite/blob/master/sqlite.go#L40">go-gorm/sqlite/blob/master/sqlite.go#L40</a></p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dialector Dialector)</span> <span class="title">Initialize</span><span class="params">(db *gorm.DB)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> dialector.DriverName == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">dialector.DriverName = DriverName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓ こちら</span></span><br><span class="line">callbacks.RegisterDefaultCallbacks(db, &amp;callbacks.Config&#123;</span><br><span class="line">LastInsertIDReversed: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>GORM にて定義されている、<code>callbacks.RegisterDefaultCallbacks</code> 関数内にて、 <code>Query</code> 関数を <code>Register</code> 関数を通して、 <code>processor.fns</code> へセットしています。</p><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterDefaultCallbacks</span><span class="params">(db *gorm.DB, config *Config)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">queryCallback := db.Callback().Query()</span><br><span class="line">queryCallback.Register(<span class="string">&quot;gorm:query&quot;</span>, Query) <span class="comment">// Query 関数をセット</span></span><br></pre></td></tr></table></figure><p>この実装を読み解くのに、一番苦労しました。 <code>callback</code> の登録である、 <code>RegisterDefaultCallbacks</code> 関数の呼び出しは、 <code>dialector</code> 側に委ねずに、 <code>gorm.Open</code> の <code>gorm.DB</code> 生成時に実行すればよいのではと思いました。 <code>dialector</code> を新たに実装する際に抜け漏れる可能性もありますし、そもそもデフォルト値の設定なので別パッケージ側での呼び出しを期待するのは少々違和感があるなと感じました。(何よりも読みづらかったです。)</p><p>GORM のクエリ発行は、v1 と v2 どちらも <code>callback</code> を中心に設計されていました。 特定のクエリ操作(<code>Create</code>, <code>Query</code>, …) に対して複数の <code>callback</code>  が定義され、<code>callback</code> 関数を順序を意識してセットしています。実際のクエリ呼び出しでは、セットされた <code>callback</code> 関数を呼び出すことだけをしています。これにより、 <code>callback</code> 関数を追加・削除することで柔軟にクエリ発行をアレンジすることができるようになっています。ここは v1 と v2 で変わっていない部分だと読み取れました。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// callback_query.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">DefaultCallback.Query().Register(<span class="string">&quot;gorm:query&quot;</span>, queryCallback)</span><br><span class="line">DefaultCallback.Query().Register(<span class="string">&quot;gorm:preload&quot;</span>, preloadCallback)</span><br><span class="line">DefaultCallback.Query().Register(<span class="string">&quot;gorm:after_query&quot;</span>, afterQueryCallback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// callbacks/query.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterDefaultCallbacks</span><span class="params">(db *gorm.DB, config *Config)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">queryCallback := db.Callback().Query()</span><br><span class="line">queryCallback.Register(<span class="string">&quot;gorm:query&quot;</span>, Query)</span><br><span class="line">queryCallback.Register(<span class="string">&quot;gorm:preload&quot;</span>, Preload)</span><br><span class="line">queryCallback.Register(<span class="string">&quot;gorm:after_query&quot;</span>, AfterQuery)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>エッセンス</code></p><ul><li>クエリ発行のような外部リソース呼び出しを行う関数は、呼び出しを実行していることがわかるような名前付けをすると良い</li><li>init() 関数はコードを追いかける範囲外での定義のためコードが読みづらい。代わりに initialize 関数を定義して明示的に呼び出すと良い</li><li>デフォルト値設定の呼び出しをパッケージ外にて期待するような実装はコードが読みづらい</li></ul><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>v2 からは返却値の <code>gorm.DB</code> に対して、副作用なく debug モードが定義できるようになりました。v2 では元の <code>gorm.DB</code> を更新する実装でしたが、 v2 からは元の <code>gorm.DB</code> は更新せず新たに debug モードの <code>gorm.DB</code> が生成されていました。一部の処理だけ debug モードにしたいといった用途に対応できるようになっています。</p><figure class="highlight go"><figcaption><span>v1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.LogMode(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>v2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db, err := gorm.Open(sqlite.Open(<span class="string">&quot;v2_test.db&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">Logger: logger.Default.LogMode(logger.Info),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// やっていることは上の実装のラッパー</span></span><br><span class="line">db = db.Debug()</span><br></pre></td></tr></table></figure><p><code>エッセンス</code></p><ul><li>副作用のない実装をすることで、影響範囲を狭めることができる</li></ul><h3 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h3><p>GORM v1 と v2 のソースコード比較をしてみました。元々は、 v1 と v2 の機能比較も考えていたのですが、すでに記事もいくつかあり新たにまとめなくてもよいかと思い、ちょっと別の切り口にしてみました。インターフェイスを大きく崩すことなく、スクラッチで再実装したいケースの参考と慣れば良いなと思います。<br>v2 は読みづらい部分もありましたが、全体的にはきれいに再設計されていて、v1 と比較してより良くなっていると感じました。 データモデルの部分が若干わかっていないところがありまとめきれていないですが、モデル設計から再設計されている印象を受けました(DB, Statement, Scope 等)。<br>最後に、記載したエッセンスの一覧を載せておきます。</p><h3 id="エッセンスまとめ"><a href="#エッセンスまとめ" class="headerlink" title="エッセンスまとめ"></a>エッセンスまとめ</h3><ul><li>interface を利用して型付けを厳格にして実行時エラーを防御</li><li>任意の項目は Functional options パターンで設定できるようにすると良い</li><li>config 値は、struct として定義して埋め込みで定義することで、設定値と struct で利用するフィールドを分離</li><li>標準API から必要なメソッドのみを、抜き出して interface 定義することで、利用するメソッドを絞り込む</li><li>クエリ発行のような外部リソース呼び出しを行う関数は、呼び出しを実行していることがわかるような名前付けをする</li><li>init() 関数はコードを追いかける範囲外での定義のためコードが読みづらい。代わりに initialize 関数を定義して明示的に呼び出すと良い</li><li>デフォルト値設定の呼び出しをパッケージ外にて期待するような実装はコードが読みづらい</li><li>副作用のない実装をすることで、影響範囲を狭めることができる</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://v1.gorm.io/docs/index.html">GORM Guides (v1) | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></li><li><a href="https://github.com/jinzhu/gorm/tree/v1.9.16">jinzhu/gorm at v1.9.16</a></li><li><a href="https://gorm.io/docs/index.html">GORM Guides (v2) | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></li><li><a href="https://github.com/go-gorm/gorm/tree/v1.21.11">go-gorm/gorm at v1.21.11</a></li><li><a href="https://future-architect.github.io/articles/20201117/">Goのデバッグ環境 on VSCode | フューチャー技術ブログ</a></li></ul><p>次は筒井さんの<a href="/articles/20210730a/">SQLBoiler（とoapi-codegen）でつくるREST APIサーバ</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210729a/image.png&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://gorm.io/&quot;&gt;GORM v2 doc&lt;/a&gt; より&lt;/p&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
    <category term="GORM" scheme="https://future-architect.github.io/tags/GORM/"/>
    
  </entry>
  
  <entry>
    <title>100%型安全なgolangORM「ent」を使ってみた</title>
    <link href="https://future-architect.github.io/articles/20210728a/"/>
    <id>https://future-architect.github.io/articles/20210728a/</id>
    <published>2021-07-27T15:00:00.000Z</published>
    <updated>2021-07-29T01:30:54.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20210726a/">golang ORM連載</a>の2記事目となります。TIGの宮崎将太です。</p><p>突然ですがみなさん、ORMは何を使用していますか？</p><p>golangだとGORMがデファクトスタンダードの位置を勝ち取りつつあり、当社でも特に理由がない限りはGORMを使用するケースが多い印象です。</p><p>今回は新たな可能性としてFacebook社謹製の<a href="https://github.com/ent/ent">ent/ent</a>を検証します。個人的なORM経験としてはRuby on RailsのActiveRecordから始まり、当社謹製の<a href="https://future-architect.github.io/uroborosql-doc/">UroboroSQL</a>というORMからGORMまで割と多めに触れているので、大体どのORMでも気になる機能を中心に作りながら検証します。</p><h1 id="entとは"><a href="#entとは" class="headerlink" title="entとは"></a>entとは</h1><img src="/images/20210728a/ent_doc_top.png" alt="entドキュメントトップページ" width="1200" height="583" loading="lazy"><p>公式から引用してくると以下の通りとのこと。</p><ul><li>データベーススキーマをグラフ構造として簡単にモデル化</li><li>スキーマをプログラムのGoコードとして定義</li><li>コード生成に基づく静的型付け</li><li>データベースクエリおよびグラフトラバーサルの記述が容易</li><li>Goテンプレートを使用することで拡張やカスタマイズが容易</li></ul><p>ジェネリクスの無いgolangの構造上、GORMは<code>interface&#123;&#125;</code>で無理やり頑張ることが多く、しばしば挙動がわかりにくく感じますが、entの場合はコード生成をして100%型安全になるよう設計されているのが特徴なよう。</p><p>この辺りの考え方はswaggerの自動生成とも似ていますね。仕様を知らなくて重大なバグを引き起こしがちなGORMから解放される選択肢としてはとても良さそうです。</p><h1 id="作りながら検証してみる"><a href="#作りながら検証してみる" class="headerlink" title="作りながら検証してみる"></a>作りながら検証してみる</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>以下環境にて準備を始めます。</p><ul><li>OS: Mac Catalina</li><li>golang: version 1.16.6</li><li>PostgreSQL: 12.4</li></ul><p>PostgreSQLはDocker containerをローカルに立てています。</p><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><p>適当にworkspaceを作ります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ent-sample</span><br><span class="line"><span class="built_in">cd</span> ent-sample</span><br><span class="line">go mod init  ent-sample</span><br></pre></td></tr></table></figure><h3 id="CLIインストール"><a href="#CLIインストール" class="headerlink" title="CLIインストール"></a>CLIインストール</h3><p>前述した通り、entはコード生成ツールを備え付けているので、まずはCLIツールをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get entgo.io/ent/cmd/ent</span><br></pre></td></tr></table></figure><p>※過去の記事を見ていると<code>entc</code>をインストールしているものもありますが、2021年7月の<a href="https://entgo.io/ja/docs/getting-started">公式チュートリアル</a>を見ると<code>ent</code>と記載があるので名称が変更されたようです。</p><h2 id="DB接続"><a href="#DB接続" class="headerlink" title="DB接続"></a>DB接続</h2><p>何はともあれDB接続からです。main関数を実装します。<br>※PostgreSQLドライバをインストールしていない場合は<code>go get github.com/lib/pq</code>で導入してください。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;entgo.io/ent/examples/start/ent&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client, err := ent.Open(<span class="string">&quot;postgres&quot;</span>, fmt.Sprintf(<span class="string">&quot;host=%s port=%s user=%s dbname=%s password=%s sslmode=disable&quot;</span>,</span><br><span class="line"><span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;5432&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;pass&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed opening connection to postgres: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line">log.Print(<span class="string">&quot;ent sample done.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>実行してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">2021/07/27 09:47:21 ent sample <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>ここまでは特殊な記法はありませんね。<br>PostgreSQL以外のDB接続は<a href="https://entgo.io/ja/docs/crud/#%E6%96%B0%E3%81%97%E3%81%84%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B">こちら</a>を参考にしてください。</p><h2 id="DBテーブル-amp-モデル定義"><a href="#DBテーブル-amp-モデル定義" class="headerlink" title="DBテーブル&amp;モデル定義"></a>DBテーブル&amp;モデル定義</h2><p>ここからがGORMにはないent独特な操作。<br>スキーマをDSLで定義します。Ruby on Railでいうところのmigrationファイルですね。<br>開発フローはざっと↓みたいな感じになります。</p><ol><li>スキーマ定義雛形生成</li><li>スキーマ定義記述</li><li><code>go generate</code>で物理定義とモデルを作成</li><li>DB反映やアプリ実装</li></ol><p>今回はオーソドックスに会社と会社に属するユーザを定義してみます。</p><h3 id="スキーマ定義雛形生成"><a href="#スキーマ定義雛形生成" class="headerlink" title="スキーマ定義雛形生成"></a>スキーマ定義雛形生成</h3><p>以下コマンドでスキーマ定義の雛形を生成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run entgo.io/ent/cmd/ent init User Company</span><br></pre></td></tr></table></figure><p>上記コマンドを実行すると以下の通り<code>ent</code>配下にディレクトリとファイルが自動生成されます。<br>schema配下のファイルを実装していくことでスキーマ定義を完成させていきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ent</span><br><span class="line">│   ├── generate.go    <span class="comment"># この段階ではほぼ空ファイル</span></span><br><span class="line">│   └── schema</span><br><span class="line">│       ├── company.go <span class="comment"># スキーマ定義の雛形</span></span><br><span class="line">│       └── user.go    <span class="comment"># スキーマ定義の雛形</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><h3 id="スキーマ定義記述"><a href="#スキーマ定義記述" class="headerlink" title="スキーマ定義記述"></a>スキーマ定義記述</h3><p><code>ent/schema</code>配下のファイルを記述していきます。</p><p>生成された雛形に<code>Fields</code>と<code>Edges</code>というメソッドが定義されており、これを拡張することでスキーマ定義が可能です。</p><p><code>Fields</code>と<code>Edges</code>の他にもIndex、Hook、Mixin(共通スキーマ定義)、Annotation(スキーマのカスタム定義)、Policy(リソースアクセス定義)を記述することができ、ORMで欲しくなる機能は一通り揃えているようです。<br>※Configという定義もありますが、Annotationに置き換えられる予定のようで、2021年7月時点でdeprecatedになっています。</p><ul><li>Fields<ul><li>テーブルカラムを定義します。</li><li><code>ent.Field</code>型としてカラムを宣言し、その配列を返却することでカラム定義としています。</li><li>型桁, <code>not null</code>, <code>default</code>, <code>unique</code>など、カラム属性は全て此処で定義します。</li><li>entではデフォルトでサロゲートキー構造を前提としており、何もしないと<code>ID</code>カラムがPKとして定義されます。カスタマイズの方法は<a href="https://entgo.io/ja/docs/schema-fields#id%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89">こちら</a>です。</li><li>ちょっと特殊ですが、各カラムはデフォルトで<code>not null</code>です。<code>nullable</code>として定義する場合は明示的に定義する必要があります。（<code>nullbale</code>に意味を持たせるべきという思想らしい。正しいと思いますがパッと見わかりにくい。。）</li><li>DBに反映した結果どんな型桁になるかは何もしないとentデフォルト定義に従います。もちろんカスタマイズは可能で、ちょっと触ってみた感じは感覚値とだいぶズレがあったので明示的に定義することをお勧めします。<a href="https://entgo.io/ja/docs/schema-fields#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E5%9E%8B">こちら</a>を参照してください。</li></ul></li><li>Edges<ul><li>あまり一般的な用語ではなくわかりにくいですが、つまりはリレーションの定義です。</li><li><code>ent.Edge</code>型としてリレーションを宣言し、その配列を返却することでリレーション定義としています。</li></ul></li></ul><p>今回は以下のような構造を作ってみます。</p><ul><li>会社テーブル<ul><li>id: bigint auto increment pk</li><li>名称: varchar(30) not null</li></ul></li><li>ユーザテーブル<ul><li>id: bigint auto increment pk</li><li>性:  varchar(30) not null<ul><li>無駄にindexを貼ってみます</li></ul></li><li>名:  varchar(30) not null</li><li>歳:  int nullable</li><li>メルアド: varchar(30) nullable</li><li>会社id: bigint not null<ul><li>会社との関連カラムです。データ投入が面倒なので外部参照キー制約は貼らないようにしてみます。</li></ul></li></ul></li></ul><p>調整してみた結果のスキーマ定義が以下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// schema/comapny.go</span></span><br><span class="line"><span class="keyword">package</span> schema</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;entgo.io/ent&quot;</span></span><br><span class="line"><span class="string">&quot;entgo.io/ent/dialect&quot;</span></span><br><span class="line"><span class="string">&quot;entgo.io/ent/schema/field&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Company holds the schema definition for the Company entity.</span></span><br><span class="line"><span class="keyword">type</span> Company <span class="keyword">struct</span> &#123;</span><br><span class="line">ent.Schema</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fields of the Company.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Company)</span> <span class="title">Fields</span><span class="params">()</span> []<span class="title">ent</span>.<span class="title">Field</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []ent.Field&#123;</span><br><span class="line">field.String(<span class="string">&quot;name&quot;</span>).</span><br><span class="line">SchemaType(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">dialect.Postgres: <span class="string">&quot;varchar(30)&quot;</span>,</span><br><span class="line">&#125;),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Edges of the Company.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Company)</span> <span class="title">Edges</span><span class="params">()</span> []<span class="title">ent</span>.<span class="title">Edge</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// schema/user.go</span></span><br><span class="line"><span class="keyword">package</span> schema</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;entgo.io/ent&quot;</span></span><br><span class="line"><span class="string">&quot;entgo.io/ent/dialect&quot;</span></span><br><span class="line"><span class="string">&quot;entgo.io/ent/schema/edge&quot;</span></span><br><span class="line"><span class="string">&quot;entgo.io/ent/schema/field&quot;</span></span><br><span class="line"><span class="string">&quot;entgo.io/ent/schema/index&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// User holds the schema definition for the User entity.</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">ent.Schema</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fields of the User.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User)</span> <span class="title">Fields</span><span class="params">()</span> []<span class="title">ent</span>.<span class="title">Field</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []ent.Field&#123;</span><br><span class="line">field.String(<span class="string">&quot;first_name&quot;</span>).</span><br><span class="line">SchemaType(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">dialect.Postgres: <span class="string">&quot;varchar(30)&quot;</span>,</span><br><span class="line">&#125;),</span><br><span class="line">field.String(<span class="string">&quot;last_name&quot;</span>).</span><br><span class="line">SchemaType(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">dialect.Postgres: <span class="string">&quot;varchar(30)&quot;</span>,</span><br><span class="line">&#125;),</span><br><span class="line">field.String(<span class="string">&quot;email&quot;</span>).</span><br><span class="line">SchemaType(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">dialect.Postgres: <span class="string">&quot;varchar(30)&quot;</span>,</span><br><span class="line">&#125;).</span><br><span class="line">Optional(),</span><br><span class="line">field.Int(<span class="string">&quot;age&quot;</span>).</span><br><span class="line">SchemaType(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">dialect.Postgres: <span class="string">&quot;int&quot;</span>,</span><br><span class="line">&#125;).</span><br><span class="line">Optional(),</span><br><span class="line">field.Int(<span class="string">&quot;company_id&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Edges of the User.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User)</span> <span class="title">Edges</span><span class="params">()</span> []<span class="title">ent</span>.<span class="title">Edge</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []ent.Edge&#123;</span><br><span class="line">edge.To(<span class="string">&quot;company&quot;</span>, Company.Type).</span><br><span class="line">Unique().</span><br><span class="line">Field(<span class="string">&quot;company_id&quot;</span>).</span><br><span class="line">Required(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User)</span> <span class="title">Indexes</span><span class="params">()</span> []<span class="title">ent</span>.<span class="title">Index</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []ent.Index&#123;</span><br><span class="line">index.Fields(<span class="string">&quot;first_name&quot;</span>, <span class="string">&quot;last_name&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>克服できなかった点含め、苦戦したのが以下です。</p><ul><li>DB型桁の定義<br>  見ての通りですがほぼ全てのカラムに対して<code>SchemaType</code>を呼び出しています。<br>  というのも、デフォルトのDB型マッピングだと、桁を全く意識してくれない（string定義すると<code>varchar(n)</code>ではなく<code>varchar</code>になってしまう。）ので、自分で<code>varchar(n)</code>を定義するしかありませんでした。<br>  ここら辺はentにプロジェクトルールを合わせてしまった方が楽なのかもしれない。</li><li>Edgeの定義<br>  手厚く<a href="https://entgo.io/ja/docs/schema-edges">ドキュメント</a>が用意されているものの、個人的には理解しにくい部分が多々..<br>  ただの<code>hasMany</code>構造を定義したいだけなのですが、カラム名や<code>not null</code>定義の調整にかなり時間を食いました。<br>  後述しますが、<a href="https://entgo.io/ja/docs/schema-edges#required">ガイド</a>の通りにしているものの、外部参照カラムが<code>not null</code>になってくれていません。</li></ul><p>とはいえ99%くらいは意図した通りに定義ができたので、コード生成をやってみます。</p><h3 id="go-generateで物理定義とモデルを作成"><a href="#go-generateで物理定義とモデルを作成" class="headerlink" title="go generateで物理定義とモデルを作成"></a><code>go generate</code>で物理定義とモデルを作成</h3><p>下記コマンドを実行してコード生成をしてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go generate ./ent</span><br></pre></td></tr></table></figure><p>するとent配下に大量にコードが生成されているはずです。<br>後述するCRUD操作関連のコードやmigration関連コードまで含まれるので、自動生成ファイル総数が多くなるようですね。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ tree ./ent</span><br><span class="line">./ent</span><br><span class="line">├── client.go</span><br><span class="line">├── company</span><br><span class="line">│   ├── company.go</span><br><span class="line">│   └── where.go</span><br><span class="line">├── company.go</span><br><span class="line">├── company_create.go</span><br><span class="line">├── company_delete.go</span><br><span class="line">├── company_query.go</span><br><span class="line">├── company_update.go</span><br><span class="line">├── config.go</span><br><span class="line">├── context.go</span><br><span class="line">├── ent.go</span><br><span class="line">├── enttest</span><br><span class="line">│   └── enttest.go</span><br><span class="line">├── generate.go</span><br><span class="line">├── hook</span><br><span class="line">│   └── hook.go</span><br><span class="line">├── migrate</span><br><span class="line">│   ├── migrate.go</span><br><span class="line">│   └── schema.go</span><br><span class="line">├── mutation.go</span><br><span class="line">├── predicate</span><br><span class="line">│   └── predicate.go</span><br><span class="line">├── runtime</span><br><span class="line">│   └── runtime.go</span><br><span class="line">├── runtime.go</span><br><span class="line">├── schema</span><br><span class="line">│   ├── company.go</span><br><span class="line">│   └── user.go</span><br><span class="line">├── tx.go</span><br><span class="line">├── user</span><br><span class="line">│   ├── user.go</span><br><span class="line">│   └── where.go</span><br><span class="line">├── user.go</span><br><span class="line">├── user_create.go</span><br><span class="line">├── user_delete.go</span><br><span class="line">├── user_query.go</span><br><span class="line">└── user_update.go</span><br></pre></td></tr></table></figure><p>特段エラーが起きていないので、テーブル定義を出力してみたいと思います。</p><h3 id="migration"><a href="#migration" class="headerlink" title="migration"></a>migration</h3><p>entでは自動migrationの他、ddl出力もサポートしています。</p><p>今回は初のmigrationなので、まずはddl出力をさせて、DB定義を確認したいと思います。</p><p>main.goを以下の通り変更します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;ent-sample/ent&quot;</span></span><br><span class="line"><span class="string">&quot;ent-sample/ent/migrate&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client, err := ent.Open(<span class="string">&quot;postgres&quot;</span>, fmt.Sprintf(<span class="string">&quot;host=%s port=%s user=%s dbname=%s password=%s sslmode=disable&quot;</span>,</span><br><span class="line"><span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;5432&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;pass&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed opening connection to postgres: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line">ctx := context.Background()</span><br><span class="line"><span class="comment">// Dump migration changes to stdout.</span></span><br><span class="line"><span class="keyword">if</span> err := client.Schema.WriteTo(ctx, os.Stdout, migrate.WithForeignKeys(<span class="literal">false</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed printing schema changes: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Print(<span class="string">&quot;ent sample done.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>migrate.Schema</code>に対して<code>WriteTo</code>メソッドを呼び出していますが、この部分がddl出力命令です。</p><p>簡素化のために標準出力していますが、ファイル指定することも可能です。<br>また、外部参照キー制約はテストには不便なので、<code>WriteTo</code>メソッドのオプションに<code>migrate.WithForeignKeys(false)</code>を渡すことで出力offしています。</p><p>実行してddl出力してみます。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">BEGIN;</span><br><span class="line">CREATE TABLE IF NOT EXISTS <span class="string">&quot;companies&quot;</span>(<span class="string">&quot;id&quot;</span> bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL, <span class="string">&quot;name&quot;</span> varchar(30) NOT NULL, PRIMARY KEY(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">CREATE TABLE IF NOT EXISTS <span class="string">&quot;users&quot;</span>(<span class="string">&quot;id&quot;</span> bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL, <span class="string">&quot;first_name&quot;</span> varchar(30) NOT NULL, <span class="string">&quot;last_name&quot;</span> varchar(30) NOT NULL, <span class="string">&quot;email&quot;</span> varchar(30) NULL, <span class="string">&quot;age&quot;</span> int NULL, <span class="string">&quot;company_id&quot;</span> bigint NULL, PRIMARY KEY(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">CREATE INDEX <span class="string">&quot;user_first_name_last_name&quot;</span> ON <span class="string">&quot;users&quot;</span>(<span class="string">&quot;first_name&quot;</span>, <span class="string">&quot;last_name&quot;</span>);</span><br><span class="line">COMMIT;</span><br><span class="line">2021/07/27 22:20:09 ent sample <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>前述した外部参照カラムの<code>nullable</code>設定を除くとだいたい意図した通りのテーブル定義になっていますね。無駄に設定したindexも想定通り出力されています。</p><p>出力されたddlをそのまま実行しても良いですが、せっかくなのでDBへの直接反映をさせてみます。</p><p>main.goを変更して同じように実行してみます。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;ent-sample/ent&quot;</span></span><br><span class="line"><span class="string">&quot;ent-sample/ent/migrate&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client, err := ent.Open(<span class="string">&quot;postgres&quot;</span>, fmt.Sprintf(<span class="string">&quot;host=%s port=%s user=%s dbname=%s password=%s sslmode=disable&quot;</span>,</span><br><span class="line"><span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;5432&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;pass&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed opening connection to postgres: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line">ctx := context.Background()</span><br><span class="line"><span class="keyword">if</span> err := client.Schema.Create(ctx, migrate.WithForeignKeys(<span class="literal">false</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed printing schema changes: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Print(<span class="string">&quot;ent sample done.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">2021/07/27 23:17:22 ent sample <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>無事テーブル定義反映までできました。</p><p>migrationはフックも作成することができるので、実行タイミングで共通りソースを作ったり、定義の微修正をしたりと細かな調整はできそうです。<br>ドキュメントは<a href="https://entgo.io/ja/docs/migrate#%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%95%E3%83%83%E3%82%AF">こちら</a>です。</p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>DB定義とモデルの生成までできたのでCRUD操作を試してみます。</p><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p>CRUD全般通して、DB操作実行はCRUDビルダーの構築を介して実施します。<br>以下は単純に会社と会社に属するユーザを作成するコードです。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;ent-sample/ent&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client, err := ent.Open(<span class="string">&quot;postgres&quot;</span>, fmt.Sprintf(<span class="string">&quot;host=%s port=%s user=%s dbname=%s password=%s sslmode=disable&quot;</span>,</span><br><span class="line"><span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;5432&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;12081208Kl&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed opening connection to postgres: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line">ctx := context.Background()</span><br><span class="line">cmp, err := client.Debug().Company.</span><br><span class="line">Create().</span><br><span class="line">SetName(<span class="string">&quot;companyA&quot;</span>).</span><br><span class="line">Save(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed create company: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;cmp: %+v&quot;</span>, cmp)</span><br><span class="line">usr, err := client.Debug().User.</span><br><span class="line">Create().</span><br><span class="line">SetFirstName(<span class="string">&quot;first name&quot;</span>).</span><br><span class="line">SetLastName(<span class="string">&quot;last name&quot;</span>).</span><br><span class="line">SetAge(<span class="number">20</span>).</span><br><span class="line">SetEmail(<span class="string">&quot;example@example.co.jp&quot;</span>).</span><br><span class="line">SetCompany(cmp).</span><br><span class="line">Save(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed create user: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;user: %+v&quot;</span>, usr)</span><br><span class="line"></span><br><span class="line">log.Print(<span class="string">&quot;ent sample done.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ go run crud/main.go</span><br><span class="line">2021/07/28 08:42:07 driver.Tx(20461e97-29a3-4362-a077-1debb7aa7c96): started</span><br><span class="line">2021/07/28 08:42:07 Tx(20461e97-29a3-4362-a077-1debb7aa7c96).Query: query=INSERT INTO &quot;companies&quot; (&quot;name&quot;) VALUES ($1) RETURNING &quot;id&quot; args=[companyA]</span><br><span class="line">2021/07/28 08:42:07 Tx(20461e97-29a3-4362-a077-1debb7aa7c96): committed</span><br><span class="line">2021/07/28 08:42:07 cmp: Company(id=1, name=companyA)</span><br><span class="line">2021/07/28 08:42:07 driver.Tx(2eac4d6e-ad32-4a71-ab73-dcc8e0a5121e): started</span><br><span class="line">2021/07/28 08:42:07 Tx(2eac4d6e-ad32-4a71-ab73-dcc8e0a5121e).Query: query=INSERT INTO &quot;users&quot; (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;, &quot;age&quot;, &quot;company_id&quot;) VALUES ($1, $2, $3, $4, $5) RETURNING &quot;id&quot; args=[first name last name example@example.co.jp 20 3]</span><br><span class="line">2021/07/28 08:42:07 Tx(2eac4d6e-ad32-4a71-ab73-dcc8e0a5121e): committed</span><br><span class="line">2021/07/28 08:42:07 user: User(id=1, first_name=first name, last_name=last name, email=example@example.co.jp, age=20, company_id=1)</span><br></pre></td></tr></table></figure><p>正常に登録ができました。<code>client.Debug()</code>でデバッグモードのentクライアントを取得することができ、そのクライアントを使用することで実行されたSQLが全てロギングされます。今回は明示的にトランザクションを張っていないので2回commitがされていますが、当然<a href="https://entgo.io/ja/docs/transactions">1トランザクションでの実行</a>も可能です。</p><p>また、DB反映メソッドは<code>Save</code>となっていますが、これとは別に<code>SaveX</code>というAPIも存在し、こちらは実行エラーの場合に<code>panic</code>を起こすようです。</p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>Updateの例は以下です。</p><p>以降、共通的なコードは割愛します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cmp, err := client.Debug().Company.</span><br><span class="line">Update().</span><br><span class="line">SetName(<span class="string">&quot;companyB&quot;</span>).</span><br><span class="line">Where(company.Name(<span class="string">&quot;companyA&quot;</span>)).</span><br><span class="line">Save(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed create company: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;cmp: %+v&quot;</span>, cmp)</span><br><span class="line">usr, err := client.Debug().User.</span><br><span class="line">Update().</span><br><span class="line">SetAge(<span class="number">10</span>).</span><br><span class="line">Where(user.Age(<span class="number">20</span>)).</span><br><span class="line">Save(ctx)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go run crud/main.go</span><br><span class="line">2021/07/28 08:48:12 driver.Tx(cb434071-2b63-4cdc-9fa6-93947c08daa3): started</span><br><span class="line">2021/07/28 08:48:12 Tx(cb434071-2b63-4cdc-9fa6-93947c08daa3).Exec: query=UPDATE <span class="string">&quot;companies&quot;</span> SET <span class="string">&quot;name&quot;</span> = <span class="variable">$1</span> WHERE <span class="string">&quot;companies&quot;</span>.<span class="string">&quot;name&quot;</span> = <span class="variable">$2</span> args=[companyB companyA]</span><br><span class="line">2021/07/28 08:48:12 Tx(cb434071-2b63-4cdc-9fa6-93947c08daa3): committed</span><br><span class="line">2021/07/28 08:48:12 cmp: 1</span><br><span class="line">2021/07/28 08:48:12 driver.Tx(2fabd7e4-54cf-4491-b285-716084262d7f): started</span><br><span class="line">2021/07/28 08:48:12 Tx(2fabd7e4-54cf-4491-b285-716084262d7f).Exec: query=UPDATE <span class="string">&quot;users&quot;</span> SET <span class="string">&quot;age&quot;</span> = <span class="variable">$1</span> WHERE <span class="string">&quot;users&quot;</span>.<span class="string">&quot;age&quot;</span> = <span class="variable">$2</span> args=[10 20]</span><br><span class="line">2021/07/28 08:48:12 Tx(2fabd7e4-54cf-4491-b285-716084262d7f): committed</span><br><span class="line">2021/07/28 08:48:12 user: 1</span><br><span class="line">2021/07/28 08:48:12 ent sample <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>条件句に相当する構造体まで生成されており、流れるようにコーディングすることができます。<br>他にも<code>Or</code>やモデルを指定した条件指定も可能です。</p><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p>以下、条件句を指定したQueryの例です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usr, err := client.Debug().User.</span><br><span class="line">Query().</span><br><span class="line">Where(user.Age(<span class="number">20</span>)).</span><br><span class="line">All(ctx)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go run crud/main.go</span><br><span class="line">2021/07/28 08:54:39 driver.Query: query=SELECT DISTINCT <span class="string">&quot;users&quot;</span>.<span class="string">&quot;id&quot;</span>, <span class="string">&quot;users&quot;</span>.<span class="string">&quot;first_name&quot;</span>, <span class="string">&quot;users&quot;</span>.<span class="string">&quot;last_name&quot;</span>, <span class="string">&quot;users&quot;</span>.<span class="string">&quot;email&quot;</span>, <span class="string">&quot;users&quot;</span>.<span class="string">&quot;age&quot;</span>, <span class="string">&quot;users&quot;</span>.<span class="string">&quot;company_id&quot;</span> FROM <span class="string">&quot;users&quot;</span> WHERE <span class="string">&quot;users&quot;</span>.<span class="string">&quot;age&quot;</span> = <span class="variable">$1</span> args=[10]</span><br><span class="line">2021/07/28 08:54:39 user: [User(id=1, first_name=first name, last_name=last name, email=example@example.co.jp, age=10, company_id=2)]</span><br><span class="line">2021/07/28 08:54:39 ent sample <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>他にもリレーションを持つデータを全てselectしたり、特定のフィールドのみのselect、別構造体へのscanなど、一般的な機能は全て備わっています。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>deleteは以下の通りです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usr, err := client.Debug().User.</span><br><span class="line">Delete().</span><br><span class="line">Where(user.Age(<span class="number">10</span>)).</span><br><span class="line">Exec(ctx)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ go run crud/main.go</span><br><span class="line">2021/07/28 09:01:31 driver.Tx(b01c2345-9243-4012-9ebf-d913c360560a): started</span><br><span class="line">2021/07/28 09:01:31 Tx(b01c2345-9243-4012-9ebf-d913c360560a).Exec: query=DELETE FROM <span class="string">&quot;users&quot;</span> WHERE <span class="string">&quot;users&quot;</span>.<span class="string">&quot;age&quot;</span> = <span class="variable">$1</span> args=[10]</span><br><span class="line">2021/07/28 09:01:31 Tx(b01c2345-9243-4012-9ebf-d913c360560a): committed</span><br><span class="line">2021/07/28 09:01:31 user: 1</span><br><span class="line">2021/07/28 09:01:31 ent sample <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>Updateと同じように条件指定可能です。</p><h1 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h1><p>一通り読み書きしてみて、慣れれば特に他のORMに劣るということはなさそうでした。（トランザクション、型カスタマイズ、ロギング、登録・更新フック、システムカラム等）</p><p>GORMを使っても結局DSLに近いモデル定義をすることになるので、比較して煩雑ということもなく、むしろ必然的にテーブル定義と整合性が取れるので、モデル定義が間違っているのではないかという不安からは解放されるように感じました。</p><p>ただし、リレーションの書き方は他のORMと同様で独特の難しさがあり、この辺はケースごとに検証が必要そうです。</p><p>また、生成templateカスタマイズができるみたいだけど、どこまでできるか？生成されるSQLあたりまで調整ができるものなのか、別の機会にそこだけ切り取って検証記事をあげられたらと思います。</p><p>明日は多賀さんの<a href="/articles/20210729a/">GORM v1 と v2 のソースコードリーディングしてみた</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;/articles/20210726a/&quot;&gt;golang ORM連載&lt;/a&gt;の2記事目となります。TIGの</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>GoとPoatgreSQLでCOPY</title>
    <link href="https://future-architect.github.io/articles/20210727a/"/>
    <id>https://future-architect.github.io/articles/20210727a/</id>
    <published>2021-07-26T15:00:00.000Z</published>
    <updated>2021-07-28T01:28:38.566Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210726a/">GoのORマッパー連載</a>の2日目の記事です。</p><p>データベースでパフォーマンスが大きな問題になりがちなのが、バッチでのデータのインサートと、複雑なクエリーです。が、今回は後者は置いといて、前者のデータの取り込みについて扱います。データの挿入の高速化は最近、ちょびっと大事かなと思うところがあります。というのも、バッチ処理をクラウド上で実行するといろいろな制約が襲ってくるからです。</p><h1 id="クラウドサービスとバッチの時間制限"><a href="#クラウドサービスとバッチの時間制限" class="headerlink" title="クラウドサービスとバッチの時間制限"></a>クラウドサービスとバッチの時間制限</h1><p>AWSのLambdaは15分（900秒）です。GCPのCloud Functionsは9分（540秒）。この時間で済むならスケジューラサービスと繋げて定時実行でLambdaとかで処理できれば運用はとても簡単です。もうちょっと厳しい制限だと、AWSのAPI Gatewayは30秒制限です。この時間内であれば、サーバーレスな管理画面からアップロードしてデータをバルクインサートみたいなことが簡単にできます。</p><p>他のサービスだとちょびっと長いのですが、GCPのCloud Runだと1時間、AWSのApp Runnerはまだそのような制限は発表されてませんが、同じぐらいになるかと思われます。なお、EC2とかを使えば時間制限はなくなりますが、ALBとか経由で実行するとドキュメントにはないが90分で切られるとかなんとか。</p><p>時間が厳しければ、通信時間を節約するためにあらかじめsigned URLを発行してS3にアップロードしてからそれを処理するみたいな方法もありますし、行ごとにqueueに入れてLambdaでファンアウトで処理するとかもありますが、登場人物が少なければデバッグも楽ですし、トラブルシュートもやりやすくなります。まあなんにせよ、制限はいたるところにあって、高速化すればよりシンプルな仕組みが選択できるようになり、運用は楽になりますし、コストまで安くなります。高速化は正義です。</p><h1 id="COPY-FROM？"><a href="#COPY-FROM？" class="headerlink" title="COPY FROM？"></a>COPY FROM？</h1><p>PostgreSQLには高速にファイルの読み込みを行うCOPY FROMがあると聞きました。知らなかったので調べてみました。</p><ul><li><code>COPY</code>と<code>\COPY</code>がある。</li><li><code>COPY</code>はDBサーバーのローカルファイルとのやりとり（<code>COPY FROM</code>でテーブルへのローカルファイルからの読み込み、<code>COPY TO</code>でテーブルからのローカルファイルへの書き込み）ができる</li><li>pg_dumpは内部で<code>COPY FROM/TO</code>を使っているらしい。<code>COPY FROM STDIN</code>とか<code>COPY TO STDOUT</code>を使ってローカルにファイルを転送している？</li><li><code>\COPY</code>はクライアント・サーバー間でも利用可能。INSERTを並べたSQLよりも11倍高速。INSERTをまとめて1つのトランザクションで処理するのと比べても3倍以上高速（<a href="https://www.citusdata.com/blog/2017/11/08/faster-bulk-loading-in-postgresql-with-copy/">この記事</a>参照)</li></ul><p>2種類あるけど特に使い分けとか考える必要はなさそうです。</p><h1 id="GoとCOPY"><a href="#GoとCOPY" class="headerlink" title="GoとCOPY"></a>GoとCOPY</h1><img src="/images/20210727a/top.png" alt="" width="800" height="425" loading="lazy"><p>by <a href="http://reneefrench.blogspot.com/">Renée French</a></p><p>GoのPostgreSQLドライバには2種類あります。</p><ul><li><a href="https://pkg.go.dev/github.com/lib/pq">github.com/lib/pq</a></li><li><a href="https://pkg.go.dev/github.com/jackc/pgx/v4">github.com/jackc/pgx</a></li></ul><p>lib/pqとpgxは<a href="https://devandchill.com/posts/2020/05/go-lib/pq-or-pgx-which-performs-better/">pgxの方がパフォーマンスが良い</a>ようですね。スター数はlib/pqの方が多いですが、pgxも少なくないです。</p><p><a href="https://pkg.go.dev/github.com/lib/pq#hdr-Bulk_imports">lib/pq</a>にもCopyを使ったバルクインポート機能がありますし、<a href="https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Copy_Protocol">pgxにもCOPYプロトコルサポート</a>がありました。</p><p>実現方法はちょっと違っていて、pgxは<code>database/sql</code>の<code>Conn</code>を拡張した独自<code>Conn</code>型を持っており（<code>database/sql</code>のインタフェースの上位互換になっている）、その<code>Conn</code>に<a href="https://pkg.go.dev/github.com/jackc/pgx/v4#Conn.CopyFrom">CopyFrom()メソッド</a>が生えています。lib/pqはPrepare/Execの<a href="https://pkg.go.dev/github.com/lib/pq#hdr-Bulk_imports">標準インタフェースを活用する実装</a>になっていました。</p><p>ORマッパーの中にはConnを完全にラップして、裏のConnを見せないようなライブラリもあったりする（gormとか？）のでその場合はlib/pqを使うとか、状況によって使い分けできそうですね。まあ、そもそもバッチでデータ一括で入れるなら本番コードとアーキテクチャを合わせたりORマッパー使わなくてもいいと思うのでpgxをダイレクトに使う・・・とかでも良さそう。</p><h1 id="試してみる（準備"><a href="#試してみる（準備" class="headerlink" title="試してみる（準備)"></a>試してみる（準備)</h1><p><a href="https://www.torikizoku.co.jp/anshin/shouhin">鳥貴族のページのアレルギーの情報</a>のPDFをダウンロードしました。PythonとPoetryはインストール済みの前提で書きます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ poetry new conv-toriki</span><br><span class="line">$ <span class="built_in">cd</span> conv-toriki</span><br><span class="line">$ poetry add tabula-py</span><br></pre></td></tr></table></figure><p>スクリプトはこんな感じ</p><figure class="highlight py"><figcaption><span>convert.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tabula</span><br><span class="line"></span><br><span class="line">tabula.convert_into(<span class="string">&quot;toriki_allergie_21su.pdf&quot;</span>, <span class="string">&quot;output.csv&quot;</span>, output_format=<span class="string">&quot;csv&quot;</span>, pages=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>実行します。CSVファイルができるのでヘッダー行とかは手で除去します（自動化できるのかもしれませんが）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry run python convert.py</span><br></pre></td></tr></table></figure><p>ついでにPostgreSQLもDockerで入れて、起動しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull postgres:13.3</span><br><span class="line">$ docker run -d --rm --name db -e POSTGRES_USER=pg -e POSTGRES_PASSWORD=pw -e POSTGRES_DB=toriki -p 5432:5432 postgres:13.3</span><br></pre></td></tr></table></figure><p>このコンテナのpsqlコマンドを起動してテーブルを作っておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it db psql -U pg -d toriki</span><br><span class="line">psql (13.3 (Debian 13.3-1.pgdg100+1))</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">toriki=<span class="comment"># create table allergies (</span></span><br><span class="line">toriki(<span class="comment">#   id serial PRIMARY KEY,</span></span><br><span class="line">toriki(<span class="comment">#   category varchar(50) not null,</span></span><br><span class="line">toriki(<span class="comment">#   menu varchar(50) not null,</span></span><br><span class="line">toriki(<span class="comment">#   shrimp boolean,</span></span><br><span class="line">toriki(<span class="comment">#   crab boolean,</span></span><br><span class="line">toriki(<span class="comment">#   wheat boolean,</span></span><br><span class="line">toriki(<span class="comment">#   soba boolean,</span></span><br><span class="line">toriki(<span class="comment">#   eggs boolean,</span></span><br><span class="line">toriki(<span class="comment">#   milk boolean,</span></span><br><span class="line">toriki(<span class="comment">#   peanuts boolean,</span></span><br><span class="line">toriki(<span class="comment">#   walnuts boolean</span></span><br><span class="line">toriki(<span class="comment"># );</span></span><br><span class="line">CREATE TABLE</span><br></pre></td></tr></table></figure><h1 id="lib-pqでの利用例"><a href="#lib-pqでの利用例" class="headerlink" title="lib/pqでの利用例"></a>lib/pqでの利用例</h1><p>CSVを読み込んでCopyで流し込むサンプルです。<code>CopyIn()</code>の引数は、1つめがテーブル名、2つ目以降がカラム名です。絵文字はエラー箇所がわかる目印で入れています（<a href="https://future-architect.github.io/articles/20200527/">log.SetFlag</a>使うとサンプルがちょい長くなるので）。</p><p><code>stmt.ExecContext()</code>で各行の内容をどんどん追加してあげて、最後に<code>stmt.Close()</code>で1つのリクエストで全行挿入ができました。内部実装追いかけてないですが、全部の内容がオンメモリにのっかるなら、数1000行ずつとかわけて実行した方が良いですかね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/csv&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)</span><br><span class="line"><span class="keyword">defer</span> stop()</span><br><span class="line"></span><br><span class="line">f, err := os.Open(<span class="string">&quot;../../output.csv&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐙&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">r := csv.NewReader(f)</span><br><span class="line">r.FieldsPerRecord = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">connStr := <span class="string">&quot;host=localhost port=5432 user=pg password=pw dbname=toriki sslmode=disable&quot;</span></span><br><span class="line">db, err := sql.Open(<span class="string">&quot;postgres&quot;</span>, connStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🦑&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txn, err := db.Begin()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐣&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">stmt, err := txn.Prepare(pq.CopyIn(<span class="string">&quot;allergies&quot;</span>,</span><br><span class="line">  <span class="string">&quot;category&quot;</span>, <span class="string">&quot;menu&quot;</span>,</span><br><span class="line">  <span class="string">&quot;shrimp&quot;</span>, <span class="string">&quot;crab&quot;</span>, <span class="string">&quot;wheat&quot;</span>, <span class="string">&quot;soba&quot;</span>, <span class="string">&quot;eggs&quot;</span>, <span class="string">&quot;milk&quot;</span>, <span class="string">&quot;peanuts&quot;</span>, <span class="string">&quot;walnuts&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐵&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">record, err := r.Read()</span><br><span class="line">log.Println(record, err)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐍&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = stmt.ExecContext(ctx,</span><br><span class="line">record[<span class="number">0</span>], record[<span class="number">1</span>], record[<span class="number">2</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">3</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">4</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">5</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">6</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">7</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">8</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">9</span>] != <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = stmt.ExecContext(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐸&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">err = stmt.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐶&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">err = txn.Commit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐱&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="pgxでの利用例"><a href="#pgxでの利用例" class="headerlink" title="pgxでの利用例"></a>pgxでの利用例</h1><p>pgxは<code>pgx.CopyFromSource</code>インタフェースをアプリ側で用意する必要があります。スライスなどからこのインタフェースを生成する便利関数もありますが、あらかじめ<a href="https://pkg.go.dev/github.com/jackc/pgx/v4#CopyFromRows">全部メモリに載っける</a>か、<a href="https://pkg.go.dev/github.com/jackc/pgx/v4#CopyFromSlice">行数がわかっているか</a>でないと使えないので、超大規模なデータ投入には向かない気がしました。なので、今回はcsv.Readerをラップしたインタフェースを自作してみました。内部的にもバイナリプロトコルで逐次で流していそうなので、全部がメモリに載せないで処理できそうな気がします(要追加検証)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/csv&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> copyFromSource <span class="keyword">struct</span> &#123;</span><br><span class="line">r *csv.Reader</span><br><span class="line">nextRow []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *copyFromSource)</span> <span class="title">Next</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">s.nextRow = <span class="literal">nil</span></span><br><span class="line">s.err = <span class="literal">nil</span></span><br><span class="line">record, err := s.r.Read()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">s.err = err</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.nextRow = []<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">record[<span class="number">0</span>], record[<span class="number">1</span>],</span><br><span class="line">record[<span class="number">2</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">3</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">4</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">5</span>] != <span class="string">&quot;&quot;</span>,</span><br><span class="line">record[<span class="number">6</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">7</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">8</span>] != <span class="string">&quot;&quot;</span>, record[<span class="number">9</span>] != <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s copyFromSource)</span> <span class="title">Values</span><span class="params">()</span> <span class="params">([]<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> s.err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, s.err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.nextRow, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s copyFromSource)</span> <span class="title">Err</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ pgx.CopyFromSource = &amp;copyFromSource&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)</span><br><span class="line"><span class="keyword">defer</span> stop()</span><br><span class="line"></span><br><span class="line">f, err := os.Open(<span class="string">&quot;../../output.csv&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐙&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">r := csv.NewReader(f)</span><br><span class="line">r.FieldsPerRecord = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">conn, err := pgx.Connect(context.Background(), <span class="string">&quot;postgres://pg:pw@localhost:5432/toriki&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🦑&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txn, err := conn.Begin(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐣&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">_, err = txn.CopyFrom(ctx, pgx.Identifier&#123;<span class="string">&quot;allergies&quot;</span>&#125;, []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;category&quot;</span>, <span class="string">&quot;menu&quot;</span>,</span><br><span class="line"><span class="string">&quot;shrimp&quot;</span>, <span class="string">&quot;crab&quot;</span>, <span class="string">&quot;wheat&quot;</span>, <span class="string">&quot;soba&quot;</span>, <span class="string">&quot;eggs&quot;</span>, <span class="string">&quot;milk&quot;</span>, <span class="string">&quot;peanuts&quot;</span>, <span class="string">&quot;walnuts&quot;</span>,</span><br><span class="line">  &#125;, &amp;copyFromSource&#123;r: r&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐬&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = txn.Commit(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;🐱&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ふだんはRDBをあまり使わない（なんかNoSQLが多い）ので、ちょっとウォームアップがてら調べてコードを書きました。DB特有機能ですが、DB乗り換えるとしてもINSERTに戻すのも苦ではないし、効果が高いし、バッチ処理でバルクでデータを入れる用途ならありなんじゃないかなと思います。lib/pqでもpgxでもどちらでも使えるのでアプリケーションで選択しるライブラリの種類のよらず恩恵はありそうです。</p><p>これで、特定アレルゲンが入っている食品とか、入ってない食品が簡単に検索できるようになりました。メガ金麦マジかよ・・・</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># select menu from allergies where wheat=true;</span></span><br><span class="line">             menu</span><br><span class="line">------------------------------</span><br><span class="line"> もも貴族焼 たれ</span><br><span class="line"> むね貴族焼 たれ</span><br><span class="line"> つくね塩</span><br><span class="line"> つくねたれ</span><br><span class="line"> :</span><br><span class="line"> ニラ玉鉄板焼</span><br><span class="line"> ピリ辛こんにゃくの竜田揚</span><br><span class="line"> メガ金麦(ビール系飲料)</span><br><span class="line">(49 rows)</span><br></pre></td></tr></table></figure><p>それはそうと、鳥貴族、アレルギー表が日本語だけじゃなくて英語版も用意されててすごいですね。あと、めちゃくちゃ良いのが小麦アレルギーの項目ごとの注釈。小麦がアレルギーだとしても発酵した醤油はOKな人はいるのですが、単に小麦だけ書かれると良いのか悪いのか迷うことがあります。で、厳しくNGにするとほとんどなにも外食できなくなってしまう。何度かアレルギーの持ちの人と一緒に外食するために店探しをしたりしましたが、これはかなり助かる情報です。他の外食業界の会社さんも真似して欲しい！</p><p>次は、宮崎さんの<a href="/articles/20210728a/">100%型安全なgolangORM「ent」を使ってみた</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210726a/&quot;&gt;GoのORマッパー連載&lt;/a&gt;の2日目の記事です。&lt;/p&gt;
&lt;p&gt;データベースでパフォーマンスが大きな問題になりがちなのが、バッチでのデータのインサートと、複雑なクエリーです。が、今回は後者は置いといて、前者のデ</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="PostgreSQL" scheme="https://future-architect.github.io/tags/PostgreSQL/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>GoのモダンDBアクセスレイヤーRELを触って</title>
    <link href="https://future-architect.github.io/articles/20210726b/"/>
    <id>https://future-architect.github.io/articles/20210726b/</id>
    <published>2021-07-25T15:00:01.000Z</published>
    <updated>2021-07-27T02:39:23.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。<a href="/articles/20210726a/">GoのORマッパー連載</a> の1本目です。</p><p>テーマはorm-ishなデータベースアクセスレイヤーライブラリである<a href="https://github.com/go-rel/rel">REL(go-rel/rel)</a>です。他のメジャーなORMライブラリに比べるとまだまだGitHub Stars数は少なくマイナーかもしれませんが、いくつか興味深い点があったので最後までお付き合いいただければです。</p><p>LICENSEは<a href="https://github.com/go-rel/rel/blob/master/LICENSE">MIT</a>、2021.07.23で<a href="https://github.com/go-rel/rel/releases/tag/v0.17.0">v0.17.0</a>までリリースされています。この記事はv0.17.0時点で記事を書いています。</p><h2 id="REL概要"><a href="#REL概要" class="headerlink" title="REL概要"></a>REL概要</h2><p>ドキュメントサイトも用意されていて<a href="https://go-rel.github.io/">こちら</a>です。</p><img src="/images/20210726b/image.png" alt="relトップページ" width="1200" height="546" loading="lazy"><p>RELの特徴はエレガントなAPI（チェーンでSQLクエリを組み立てるDSL）を提供しながら、テスタビリティを追求しているところが最大のポイントかと思います。他にも豊富な機能が謳われています。</p><ul><li>Eager loading</li><li>ネストしたトランザクション</li><li>複合PK</li><li>ページネーション</li><li>スキーマ移行</li><li>他にも様々</li></ul><p>さて、トップページに書いている通り、<strong>テスタブル</strong> ということがかなり強調されています。reltestという組み込みパッケージを用いることでテストが可能という点です。このあたりは <a href="https://go-rel.github.io/introduction/#why-rel">Why rel</a>に書かれてている通りなんですが、重要なのでここでも強調します。</p><h3 id="Why-relについて"><a href="#Why-relについて" class="headerlink" title="Why relについて"></a>Why relについて</h3><p>GoにおいてORMライブラリの多くは次のようなチェーンAPIで提供します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// チェーンAPIの例</span></span><br><span class="line">db.Where(<span class="string">&quot;id = ?&quot;</span>, <span class="number">1</span>).First(&amp;user)</span><br></pre></td></tr></table></figure><p>チェーンAPI自体の表現力・開発生産性・安全性について疑う余地はないと思うのですが、単体テストのときには一工夫を要することが多いと思います。例えば、GoのWebAPIなどのリポジトリでよくある構成が、DBアクセス部分をRepositoryパターンで提供することだと思います。これによってハンドラー（MVCでいうController）の単体テストを、モックで行うということです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// インターフェース作って、ハンドラー側はインターフェースでアクセスする</span></span><br><span class="line"><span class="keyword">type</span> UserRepository <span class="keyword">interface</span> &#123;</span><br><span class="line">    Find(user *User, id <span class="keyword">int</span>) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// モッククラス</span></span><br><span class="line"><span class="keyword">type</span> mockUserRepository <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ur mockUserRepository )</span> <span class="title">Find</span><span class="params">(user *User, id <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user &#123;ID:id, Name:<span class="string">&quot;リムル様&quot;</span>&#125; <span class="comment">// 固定値など</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 実体クラス</span></span><br><span class="line"><span class="keyword">type</span> userRepository <span class="keyword">struct</span> &#123;</span><br><span class="line">    db *DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ur userRepository)</span> <span class="title">Find</span><span class="params">(user *User, id <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.Where(<span class="string">&quot;id = ?&quot;</span>, <span class="number">1</span>).First(&amp;user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こういったラッパーを作成せずにテスト可能にすることをRELは設計ポリシーに持っています。 reltest パッケージの使い方が気になってきましたね。次章以降で実際に使っていきます。</p><p>なおこの記事で使っているコードは、次のリポジトリに配備します。</p><p><a href="https://github.com/ma91n/gorel-example">https://github.com/ma91n/gorel-example</a></p><h2 id="今回利用するスキーマ"><a href="#今回利用するスキーマ" class="headerlink" title="今回利用するスキーマ"></a>今回利用するスキーマ</h2><p>authorとbookの2テーブルを用います。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">integer</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">99</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book</span><br><span class="line">(</span><br><span class="line">    id        <span class="type">integer</span>,</span><br><span class="line">    title     <span class="type">varchar</span>(<span class="number">99</span>),</span><br><span class="line">    price     <span class="type">integer</span>,</span><br><span class="line">    author_id <span class="type">integer</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>データは次のようなデータを登録します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author</span></span><br><span class="line">101,Mat Ryer</span><br><span class="line">102,Katherine Cox-Buday</span><br><span class="line">103,Thorsten Ball</span><br><span class="line"></span><br><span class="line"><span class="comment"># book</span></span><br><span class="line">301,Go言語によるWebアプリケーション開発,3520,101</span><br><span class="line">302,Go言語による並行処理,3080,102</span><br><span class="line">303,Go言語でつくるインタプリタ,3740,103</span><br></pre></td></tr></table></figure><p>さきほどのリポジトリを <code>git clone</code> して、 <code>docker compose up -d</code>するとデータ登録済みのテーブルが存在すると思います。</p><p>psqlで接続する際は以下のコマンドです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="built_in">set</span> PGPASSWORD=postgres123</span><br><span class="line">psql -h localhost -p 5432 -U postgres -d postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac, Linux</span></span><br><span class="line">PGPASSWORD=postgres123 psql -h localhost -p 5432 -U postgres -d postgres</span><br></pre></td></tr></table></figure><h2 id="RELのAPIの使い方"><a href="#RELのAPIの使い方" class="headerlink" title="RELのAPIの使い方"></a>RELのAPIの使い方</h2><p>まずはアプリケーション側のコードです。カラム名を変更するときは <code>db</code>タグを利用します。テーブル名を変更するときは、レシーバに <code>Table()</code> を定義します。</p><figure class="highlight go"><figcaption><span>モデル部分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Not Found</span></span><br><span class="line"><span class="keyword">var</span> NotFoundErr = errors.New(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Author <span class="keyword">struct</span> &#123;</span><br><span class="line">ID   <span class="keyword">int</span>    <span class="string">`db:&quot;id&quot;`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`db:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Author )</span> <span class="title">Table</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;author&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">ID       <span class="keyword">int</span>    <span class="string">`db:&quot;id&quot;`</span></span><br><span class="line">Title    <span class="keyword">string</span> <span class="string">`db:&quot;title&quot;`</span></span><br><span class="line">Price    <span class="keyword">int</span>    <span class="string">`db:&quot;price&quot;`</span></span><br><span class="line">AuthorID <span class="keyword">int</span>    <span class="string">`db:&quot;author_id&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Book)</span> <span class="title">Table</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;book&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>データを1件検索してみます。PostgreSQLを利用しています。</p><figure class="highlight go"><figcaption><span>データ1件検索するサンプルコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/go-rel/rel&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-rel/rel/adapter/postgres&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-rel/rel/where&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">adapter, err := postgres.Open(<span class="string">&quot;postgres://postgres:postgres123@localhost/rel_test?sslmode=disable&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> adapter.Close()</span><br><span class="line"></span><br><span class="line">repo := rel.New(adapter)</span><br><span class="line"></span><br><span class="line">book, err := FindBook(context.Background(), repo, <span class="number">301</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(book)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindBook</span><span class="params">(ctx context.Context, r rel.Repository, id <span class="keyword">int</span>)</span> <span class="params">(Book, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b Book</span><br><span class="line"><span class="keyword">if</span> err := r.Find(ctx, &amp;b, where.Eq(<span class="string">&quot;id&quot;</span>, id)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, rel.NotFoundError&#123;&#125;) &#123;</span><br><span class="line"><span class="keyword">return</span> Book&#123;&#125;, NotFoundErr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Book&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DBアクセスですが、 <code>rel/adaptor</code> パッケージのpostgresを利用します。現状だとMSSQL, MySQL, PostgreSQL, SQLite3が利用可能です。</p><p><a href="https://go-rel.github.io/adapters/">https://go-rel.github.io/adapters/</a></p><p>DB接続情報を引数にした <code>adapor</code> を生成して <code>rel.New</code> でrelでメインのDBアクセスAPIを提供するリポジトリ（rel.Repository）を生成します。あとはrelのDSLに沿ってデータ操作します。</p><p>このコードを実行すると、レコードが1件取得できたことが分かります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">2021/07/26 12:45:29 [duration: 38.6956ms op: adapter-query] SELECT * FROM &quot;book&quot; WHERE &quot;id&quot;=$1 LIMIT 1;</span><br><span class="line">&#123;301 Go言語によるWebアプリケーション開発 3520 101&#125;</span><br></pre></td></tr></table></figure><h2 id="テストコード"><a href="#テストコード" class="headerlink" title="テストコード"></a>テストコード</h2><p>さきほどのmainパッケージの <code>FindBook</code> をテストしてみましょう。（実際はもう少しビジネスロジックが入ったユースケース相当の関数をテストした方が良いと思います）</p><p>お待ちかねの <code>reltest</code> パッケージを利用します。</p><p>ポイントは以下です。</p><ul><li><code>reltest.New</code> でリポジトリを作成する</li><li>そのリポジトリに対して、 <code>ExpectedFind</code> などで動かしたい挙動になるようにデータを登録する<ul><li><code>r.ExpectFind(where.Eq(&quot;id&quot;, 301)).Result(book)</code> などがそれにあたる</li><li>データが存在しない場合も指定する必要がある<ul><li><code>r.ExpectFind(where.Eq(&quot;id&quot;, 401)).NotFound()</code></li></ul></li></ul></li><li>設定済みのリポジトリをテストしたい関数に渡したり、初期化に用いて動作を検証する</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-rel/rel&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-rel/rel/reltest&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-rel/rel/where&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFindBook</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// create a mocked repository.</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">r    = reltest.New()</span><br><span class="line">book = Book&#123;</span><br><span class="line">ID:       <span class="number">301</span>,</span><br><span class="line">Title:    <span class="string">&quot;Go言語によるWebアプリケーション開発&quot;</span>,</span><br><span class="line">Price:    <span class="number">3520</span>,</span><br><span class="line">AuthorID: <span class="number">101</span>,</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">r.ExpectFind(where.Eq(<span class="string">&quot;id&quot;</span>, <span class="number">301</span>)).Result(book)</span><br><span class="line">r.ExpectFind(where.Eq(<span class="string">&quot;id&quot;</span>, <span class="number">401</span>)).NotFound()</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">r  rel.Repository</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name    <span class="keyword">string</span></span><br><span class="line">args    args</span><br><span class="line">want    Book</span><br><span class="line">wantErr error</span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;1件検索&quot;</span>,</span><br><span class="line">args: args&#123;</span><br><span class="line">r:  r,</span><br><span class="line">id: <span class="number">301</span>,</span><br><span class="line">&#125;,</span><br><span class="line">want: Book&#123;</span><br><span class="line">ID:       <span class="number">301</span>,</span><br><span class="line">Title:    <span class="string">&quot;Go言語によるWebアプリケーション開発&quot;</span>,</span><br><span class="line">Price:    <span class="number">3520</span>,</span><br><span class="line">AuthorID: <span class="number">101</span>,</span><br><span class="line">&#125;,</span><br><span class="line">wantErr: <span class="literal">nil</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;存在しないキーを指定&quot;</span>,</span><br><span class="line">args: args&#123;</span><br><span class="line">r:  r,</span><br><span class="line">id: <span class="number">401</span>,</span><br><span class="line">&#125;,</span><br><span class="line">want:    Book&#123;&#125;,</span><br><span class="line">wantErr: NotFoundErr,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got, err := FindBook(context.Background(), tt.args.r, tt.args.id)</span><br><span class="line"><span class="keyword">if</span> err != tt.wantErr &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;FindBook() error = %v, wantErr %v&quot;</span>, err, tt.wantErr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !reflect.DeepEqual(got, tt.want) &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;FindBook() got = %v, want %v&quot;</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reltest</code> パッケージ側でモックの機能が存在するため、自前でラップしなくても良いというのは面白いアプローチですね。</p><p>注意としては、NotFoundの場合もExpectFindでリポジトリを指定しないと、rel側でpanicが発生することです。何も指定しないと<code>rel.NotFoundError</code>が返ってくるのかなと思いましたが、そんなことは無いです。おそらくテーブルが存在するかどうか判断つかないので、一律指定する必要があるのだと思います。</p><h2 id="テーブル結合"><a href="#テーブル結合" class="headerlink" title="テーブル結合"></a>テーブル結合</h2><p>relでのテーブル結合も試してみます。</p><figure class="highlight go"><figcaption><span>結合後の構造体</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AuthorBook <span class="keyword">struct</span> &#123;</span><br><span class="line">ID         <span class="keyword">int</span>    <span class="string">`db:&quot;id&quot;`</span></span><br><span class="line">Title      <span class="keyword">string</span> <span class="string">`db:&quot;title&quot;`</span></span><br><span class="line">Price      <span class="keyword">int</span>    <span class="string">`db:&quot;price&quot;`</span></span><br><span class="line">AuthorName <span class="keyword">string</span> <span class="string">`db:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b AuthorBook)</span> <span class="title">Table</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;book&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いて本体です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/go-rel/rel&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-rel/rel/adapter/postgres&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">adapter, _ := postgres.Open(<span class="string">&quot;postgres://postgres:postgres123@localhost/rel_test?sslmode=disable&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> adapter.Close()</span><br><span class="line">repo := rel.New(adapter)</span><br><span class="line"></span><br><span class="line">book, err := FindBook(context.Background(), repo, <span class="number">102</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(book)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindBook</span><span class="params">(ctx context.Context, r rel.Repository, id <span class="keyword">int</span>)</span> <span class="params">([]AuthorBook, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b []AuthorBook</span><br><span class="line"><span class="keyword">if</span> err := r.FindAll(ctx, &amp;b, rel.Eq(<span class="string">&quot;author.id&quot;</span>, id), rel.JoinOn(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;author.id&quot;</span>, <span class="string">&quot;book.author_id&quot;</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テーブル結合はいくつか手法がありますが、 <code>rel.JoinOn</code> などで結合キーとなるカラムを指定します。Join句とWhere句はカンマ区切りで引数に渡せばOKです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go run main.go</span><br><span class="line">2021/07/26 13:43:49 [duration: 38.2732ms op: adapter-query] SELECT * FROM <span class="string">&quot;book&quot;</span> JOIN <span class="string">&quot;author&quot;</span> ON <span class="string">&quot;author&quot;</span>.<span class="string">&quot;id&quot;</span>=<span class="string">&quot;book&quot;</span>.<span class="string">&quot;author_id&quot;</span> WHERE <span class="string">&quot;author&quot;</span>.<span class="string">&quot;id&quot;</span>=<span class="variable">$1</span>;</span><br><span class="line">[&#123;102 Go言語による並行処理 3080 Katherine Cox-Buday&#125;]</span><br></pre></td></tr></table></figure><p>慣れれば大丈夫かと思いますが、SQLであれば一瞬で書けるのにrel経由だとどう書くんだろう、という部分に結構悩みがあるかなと思います。チームでよく使いそうなクエリは、relでもどう書くのかショーケース化しておくと良いかなと思いました。</p><h2 id="テーブル結合のテスト"><a href="#テーブル結合のテスト" class="headerlink" title="テーブル結合のテスト"></a>テーブル結合のテスト</h2><p>テーブル結合のテストですが、やることは先程のPK検索と変わりません。relリポジトリを作成し、今度は <code>ExpectedFindAll</code> に対して振る舞いを設定します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFindBook</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// create a mocked repository.</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">r     = reltest.New()</span><br><span class="line">books = []AuthorBook&#123;</span><br><span class="line">&#123;</span><br><span class="line">ID:         <span class="number">301</span>,</span><br><span class="line">Title:      <span class="string">&quot;Go言語によるWebアプリケーション開発&quot;</span>,</span><br><span class="line">Price:      <span class="number">3520</span>,</span><br><span class="line">AuthorName: <span class="string">&quot;Katherine Cox-Buday&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">r.ExpectFindAll(rel.JoinOn(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;author.id&quot;</span>, <span class="string">&quot;book.author_id&quot;</span>), rel.Eq(<span class="string">&quot;author.id&quot;</span>, <span class="number">102</span>)).Result(books)</span><br><span class="line">r.ExpectFindAll(rel.JoinOn(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;author.id&quot;</span>, <span class="string">&quot;book.author_id&quot;</span>), rel.Eq(<span class="string">&quot;author.id&quot;</span>, <span class="number">999</span>)).Result([]AuthorBook&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">r  rel.Repository</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name    <span class="keyword">string</span></span><br><span class="line">args    args</span><br><span class="line">want    []AuthorBook</span><br><span class="line">wantErr <span class="keyword">bool</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;1件検索&quot;</span>,</span><br><span class="line">args: args&#123;</span><br><span class="line">r:  r,</span><br><span class="line">id: <span class="number">102</span>,</span><br><span class="line">&#125;,</span><br><span class="line">want: []AuthorBook&#123;</span><br><span class="line">&#123;</span><br><span class="line">ID:         <span class="number">301</span>,</span><br><span class="line">Title:      <span class="string">&quot;Go言語によるWebアプリケーション開発&quot;</span>,</span><br><span class="line">Price:      <span class="number">3520</span>,</span><br><span class="line">AuthorName: <span class="string">&quot;Katherine Cox-Buday&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">wantErr: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;存在しないキーを指定&quot;</span>,</span><br><span class="line">args: args&#123;</span><br><span class="line">r:  r,</span><br><span class="line">id: <span class="number">999</span>,</span><br><span class="line">&#125;,</span><br><span class="line">want: []AuthorBook&#123;&#125;,</span><br><span class="line">wantErr: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got, err := FindBook(context.Background(), tt.args.r, tt.args.id)</span><br><span class="line"><span class="keyword">if</span> (err != <span class="literal">nil</span>) != tt.wantErr &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;FindBook() error = %v, wantErr %v&quot;</span>, err, tt.wantErr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !reflect.DeepEqual(got, tt.want) &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;FindBook() got = %v, want %v&quot;</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これもテストで利用するキー全てに対して、<code>ExpectedFindAll</code> で指定しないとreltest側でpanicになるのでご注意ください。</p><h2 id="やってみた所感"><a href="#やってみた所感" class="headerlink" title="やってみた所感"></a>やってみた所感</h2><p>いくつか動かしてみた所感ですが、データアクセスしかロジックが入っていない関数のテストはあまり意味がなく、データアクセスを用いて何かしらビジネスロジックを行う部分で用いることが肝要だなと思いました。（まさしく、リポジトリのモック化の意図・意味を理解しないとダメですね）</p><p>これをちゃんと意識しないと、工数をかけた割に自作自演テストになって品質向上につながらないと思うので、注意しようと思いました。</p><p>relおよびreltestの仕様ですが、慣れるまでの学習コストは比較的少ない方だなと感じました。一方で何か reltest側でエラーになった時に、何が原因なのか分からずトラブルシュートに少し時間がかかりました。例えば私は <code>ExpectedFind</code> に今回のテストで指定する値を設定していなかったことが原因でかなり悩みました。この当たりはチームで導入する時に全員が間違いなく陥ると思うので、注意喚起はした方がベターだなと思います。</p><p>個人的には今後自分でモックのラッパーを作らずRELに任せるかは…、まだ様子見としたいと感じました。理由は導入コストと、自前のラッパー層を作らずに済むというバランスの兼ね合いで、薄いラッパーを無くすためにはちょっと大変だなと言う印象を得たからです。こういった技術選定については他の連載記事を見て改めて考えたいと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>RELの概要をまとめた記事です</li><li>RELは単体テスト目的でORMを利用者がラップするのではなく、モックパッケージを提供してくれます</li><li>reltestの使い方は、<code>ExpectFind</code> や <code>ExpectFindAll</code> でテストで想定する振る舞いを設定しモック化します</li><li>ちょっと癖があるので、導入前はトラブルシュートやよくハマるミスはチームで共有したほうが良さげ</li></ul><p>次は澁川さんの<a href="/articles/20210727a/">GoとPoatgreSQLでCOPY</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット真野です。&lt;a href=&quot;/articles/20210726a/&quot;&gt;GoのORマッパー連載&lt;/a&gt; </summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>GoのORマッパー連載を始めます</title>
    <link href="https://future-architect.github.io/articles/20210726a/"/>
    <id>https://future-architect.github.io/articles/20210726a/</id>
    <published>2021-07-25T15:00:00.000Z</published>
    <updated>2021-08-04T01:21:30.973Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210726a/puzzle-1713170_640.jpg" alt="" width="630" height="337"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。7/26（月）～8/3（水）の平日にかけて、GoでRDBに対してアクセスライブラリ（ORMとクエリビルダー）をテーマにした連載を始めます。</p><p>フューチャー技術ブログではAWS DynamoDBの記事がなぜか多いですが、会社としてはデータストア層にRDB（PostgreSQL、MySQL、Oracle）を採用するのが主流です。</p><p>GoのDBアクセスライブラリは過去記事でもいくつか取り上げられており、技術選定およびプロダクション利用レベルのナレッジは貯まりつつあります。</p><ul><li><a href="https://future-architect.github.io/articles/20210609a/">Vuls開発中に出会ったGORMあれこれ</a></li><li><a href="https://future-architect.github.io/articles/20200728/">DBスキーマを駆動にした開発のためのライブラリ調査</a></li><li><a href="https://future-architect.github.io/articles/20190926/">Go言語のDBレイヤーライブラリの評価</a></li></ul><p>それとは別に触ってみたことなはないものの（GORM v2は実際に触っているかもしれませんが）、メンバーそれぞれでrel、ent、goquなど気になるライブラリがいくつか持っていることもわかってきました。せっかくの機会です。これをテーマに連載する運びになりました。</p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><div class="scroll"><table><thead><tr><th></th><th>テーマ</th><th>担当者</th></tr></thead><tbody><tr><td>7月26日</td><td><a href="/articles/20210726b/">GoのモダンDBアクセスレイヤーRELを触って</a></td><td>真野隼記</td></tr><tr><td>7月27日</td><td><a href="/articles/20210727a/">GoとPoatgreSQLでCOPY</a></td><td>澁川喜規</td></tr><tr><td>7月28日</td><td><a href="/articles/20210728a/">100%型安全なgolangORM「ent」を使ってみた</a></td><td>宮崎将太</td></tr><tr><td>7月29日</td><td><a href="/articles/20210729a/">GORM v1 と v2 のソースコードリーディングしてみた</a></td><td>多賀聡一朗</td></tr><tr><td>7月30日</td><td><a href="/articles/20210730a/">SQLBoiler（とoapi-codegen）でつくるREST APIサーバ</a></td><td>筒井悠平</td></tr><tr><td>8月2日</td><td><a href="/articles/20210802a/">SQLビルダーgoquの使い方</a></td><td>伊藤真彦</td></tr><tr><td>8月3日</td><td><a href="/articles/20210803a/">Go言語で2WaySQL</a></td><td>本田紘規</td></tr><tr><td>8月4日</td><td><a href="/articles/20210804a/">SQLファイルから型安全なコードを生成するsqlc</a></td><td>辻大志郎</td></tr></tbody></table></div><h2 id="ORMとクエリビルダー"><a href="#ORMとクエリビルダー" class="headerlink" title="ORMとクエリビルダー"></a>ORMとクエリビルダー</h2><p>ORMは Object Relational Mapperの略で、通常はGoの構造体とRDBのレコードを紐付ける処理のことを指します。O/Rマッパーと呼ぶことが多いですが、略してORMとも呼びます。名前から見るとSQL検索結果を構造体にマッピングすること（Goだとsqlx相当の処理）かなと思いますが、実際はSQLを組み立てるDSLを提供するライブラリが多いです。</p><p>クエリビルダーは、広い意味のORM機能のうち、SQLクエリを組み立てるライブラリのことです。調べると <a href="http://doug-martin.github.io/goqu/">goqu</a>とかがまさにそれにあたります。</p><p>細かくはgoquを連載テーマにした伊藤真彦さんに譲るとして、簡単ではありますがここでサンプルコードも出しちゃいます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ds := goqu.Insert(<span class="string">&quot;user&quot;</span>).</span><br><span class="line">Cols(<span class="string">&quot;first_name&quot;</span>, <span class="string">&quot;last_name&quot;</span>).</span><br><span class="line">Vals(</span><br><span class="line">goqu.Vals&#123;<span class="string">&quot;Greg&quot;</span>, <span class="string">&quot;Farley&quot;</span>&#125;,</span><br><span class="line">goqu.Vals&#123;<span class="string">&quot;Jimmy&quot;</span>, <span class="string">&quot;Stewart&quot;</span>&#125;,</span><br><span class="line">goqu.Vals&#123;<span class="string">&quot;Jeff&quot;</span>, <span class="string">&quot;Jeffers&quot;</span>&#125;,</span><br><span class="line">)</span><br><span class="line">insertSQL, args, _ := ds.ToSQL()</span><br><span class="line">fmt.Println(insertSQL, args)</span><br></pre></td></tr></table></figure><p>上記のDSLを実行すると次のSQLが生成されるという形式です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;user&quot; (&quot;first_name&quot;, &quot;last_name&quot;) <span class="keyword">VALUES</span> (<span class="string">&#x27;Greg&#x27;</span>, <span class="string">&#x27;Farley&#x27;</span>), (<span class="string">&#x27;Jimmy&#x27;</span>, <span class="string">&#x27;Stewart&#x27;</span>), (<span class="string">&#x27;Jeff&#x27;</span>, <span class="string">&#x27;Jeffers&#x27;</span>) []</span><br></pre></td></tr></table></figure><p>実際にRDBアクセスするためには、<code>database/sql</code> パッケージかそのラッパーのライブラリで生成されたSQLを実行して動かすと言った形式です。</p><p>生SQLを書かずgoquのDSLに乗っかるメリットですが、コンパイル時にエラーに気がつけるなど、ある一定の品質を保てることがメリットだと思います。ORM一つとってもそれぞれのライブラリがどの領域の何を解決しようとしているかに着目すると楽しいですよね。</p><h2 id="フューチャー内の現状の採用状況"><a href="#フューチャー内の現状の採用状況" class="headerlink" title="フューチャー内の現状の採用状況"></a>フューチャー内の現状の採用状況</h2><p>ちゃんと調べたわけではないですが、なんとなく社内の観測範囲では、GORM派とSQLBoiler派が多い気がします。</p><p>他には、<code>smallnest/gen</code> とか <code>xo/xo</code> をどっぷり使っているチームもあります。フューチャーは伝統的にスキーマ駆動開発を好む文化がある（と思っている）ので良く分かります。</p><p>どれを採用しても、良かった（ライブラリはよくできている）という声しか聞かないので、たまにPull Requestを出したよとかは聞きましたが、どれも良いツールなんだと思います。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p><a href="/articles/20210112/">2021年初に立てた計画</a>に沿って様々な連載を開催しています。この連載は当初は2020年の<a href="/articles/20191111/">GoCDK連載</a>の続きとして考えていましたが、GoCDKだと人数分ネタが厳しそうということで急遽方向転換しました。</p><p>急なピボットでしたが、結果的にはより興味が引く（業務に役立ちやすい）テーマになったのではないでしょうか。</p><p>私自身も寄稿しますが、他の人の記事が楽しみです。</p><p>連載についてフィードバックがあれば、お気軽にTwitterアカウントまでフィードバックしていただければです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210726a/puzzle-1713170_640.jpg&quot; alt=&quot;&quot; width=&quot;630&quot; height=&quot;337&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>FlutterアプリをDeployGateで公開するためのいろいろ</title>
    <link href="https://future-architect.github.io/articles/20210720b/"/>
    <id>https://future-architect.github.io/articles/20210720b/</id>
    <published>2021-07-19T15:00:02.000Z</published>
    <updated>2021-07-28T08:30:45.375Z</updated>
    
    <content type="html"><![CDATA[<p>Flutterで環境を一度作ってしまえば、Android StudiからAndroidエミュレータ でもiOSシミュレータでもどんどん起動できるので、デバッグはとてもやりやすいです。ですが、Flutterで作るということはスマートフォン向けのアプリなので実機テストもしたいですよね？ 今回はDeployGateを使うことになったのですが、FlutterとDeployGateそのものずばりな情報が見つからなかったので、その情報をまとめます。</p><p>出発点はこちらです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter create dgsample</span><br></pre></td></tr></table></figure><h1 id="まずはアプリの設定を修正"><a href="#まずはアプリの設定を修正" class="headerlink" title="まずはアプリの設定を修正"></a>まずはアプリの設定を修正</h1><p>createで作成すると、Androidアプリのパッケージ名や、iOSアプリのバンドルIDが<code>com.example.dgsample</code>の形式でそこら中に埋め込まれます。ここでは所属する組織のドメイン名の入った重複しない名前にします。とりあえず、Find in Pathでデフォルトのパッケージ名が書かれているところを見つけ、新しい名前（ここでは<code>io.github.future_architect.dgsample</code>）に置き換えていきます。</p><p>表示するアプリ名はAndroidは<code>android/app/src/main/AndroidManifest.xml</code>を開き、application要素の属性を修正します。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;io.github.future_architect.dgsample&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">&quot;DGサンプル&quot;</span>&gt;</span></span><br><span class="line">   :</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>iOSは<code>ios/Runner/Info.plist</code>に次のタグのペアを書きます。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleDisplayName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>DGサンプル<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ついでに簡単にできるお化粧ということで、アイコンとスプラッシュスクリーンを変えます。</p><ul><li><a href="https://zenn.dev/kyo9bo/articles/196e949cc9dd3a">flutterでアプリアイコンをデフォルトから変更する方法</a></li><li><a href="https://yaba-blog.com/flutter-splash-screen/">【Flutter】スプラッシュ画面(Splash Screen)を一瞬で実装する</a></li></ul><p>適当に絵を描きました</p><p><img src="/images/20210721b/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-07-19_19.28.14.png"></p><p>pngファイルをエクスポートして、assetsフォルダ以下におき、アイコンとスプラッシュのそれぞれで同じ画像を参照するようにします。</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter_icons:</span></span><br><span class="line">  <span class="attr">android:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ios:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">image_path:</span> <span class="string">&quot;assets/icon.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">flutter_native_splash:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">&quot;assets/icon.png&quot;</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;fff8f0&quot;</span></span><br></pre></td></tr></table></figure><p>それぞれ、flutter-native-splashを使うのですが、同時に入れると依存ライブラリのバージョンがコンフリクトするので一つずつ行います。まずはアイコン生成で使うツールをdev_dependenciesに入れてコマンド実行。</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">flutter_test:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">flutter_launcher_icons:</span> <span class="string">^0.9.0</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter pub run flutter_launcher_icons:main</span><br></pre></td></tr></table></figure><p>次にスプラッシュ生成で使うツールをdev_dependenciesに入れてコマンド実行。</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">flutter_test:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">flutter_native_splash:</span> <span class="string">^1.2.0</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutte pub run flutter_native_splash:create</span><br></pre></td></tr></table></figure><p>Android Studio上で実行すると、Androidエミュレータ上にインストールされるアイコンが変わりますし、起動画面も変わりました。</p><p><img src="/images/20210721b/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-07-19_19.22.27.png"><br><img src="/images/20210721b/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-07-19_19.24.19.png"></p><h1 id="DeployGate用のSDKの追加"><a href="#DeployGate用のSDKの追加" class="headerlink" title="DeployGate用のSDKの追加"></a>DeployGate用のSDKの追加</h1><p>DeployGate用のSDKを入れると、ログやら何やらが見れるようになるとのことですので入れてみます。</p><p>ドキュメントは<a href="https://docs.deploygate.com/docs/android-sdk">こちら</a>ですが、Flutter用になっていないので少し追加の解説を行います。依存を追加するbuild.gradleはandroid/app以下にあります。</p><figure class="highlight gradle"><figcaption><span>android/app/build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.deploygate:sdk:4.1.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iOSのドキュメントは<a href="https://docs.deploygate.com/docs/ios-sdk">こちら</a>です。</p><p>flutter build iosすると<code>ios/Podfile</code>が生成されるので、次の行を末尾に追加し、pod installコマンドを実行します。</p><figure class="highlight ruby"><figcaption><span>ios/Podfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">&quot;DeployGateSDK&quot;</span></span><br></pre></td></tr></table></figure><p>ソースコードを2箇所書き換えます。</p><figure class="highlight swift"><figcaption><span>ios/Runner/Runner-Bridging-Header.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &quot;GeneratedPluginRegistrant.h&quot;</span><br><span class="line"><span class="comment">// ↓この行</span></span><br><span class="line">#<span class="keyword">import</span> &lt;DeployGateSDK/DeployGateSDK.h&gt;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><figcaption><span>ios/Runner/AppDelegate.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Flutter</span><br><span class="line"></span><br><span class="line"><span class="keyword">@UIApplicationMain</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">FlutterAppDelegate</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">application</span>(</span></span><br><span class="line"><span class="function">    <span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>,</span></span><br><span class="line"><span class="function">    <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="type">UIApplication</span>.<span class="params">LaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span></span></span><br><span class="line"><span class="function">  )</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="comment">// ここから</span></span><br><span class="line">    <span class="type">DeployGateSDK</span></span><br><span class="line">      .sharedInstance()</span><br><span class="line">      .launchApplication(withAuthor: <span class="string">&quot;my-group&quot;</span>, key: <span class="string">&quot;01234567890123456789&quot;</span>)</span><br><span class="line">    <span class="comment">// ここまで</span></span><br><span class="line">    <span class="type">GeneratedPluginRegistrant</span>.register(with: <span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.application(application, didFinishLaunchingWithOptions: launchOptions)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらで完了です。</p><h1 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h1><p>ビルドはAndroidは一発なのですが、iOSの方はDeployGateが必要とするipaファイルをflutterコマンドだけでは作れません。一度ビルドした後に、xcodebuildコマンドを使って生成します。</p><p>お仕事用のは、pubspec.yamlのファイルをパースしつつ、もうちょっと細かいバリエーション違いをバージョンを変えてビルドしたり（flutterコマンドに<code>--build-number</code>オプションと<code>--build-name</code>オプションを使ってバージョンをそとから書き換える）、追加のファイルを環境ごとに入れ替えたりしたりちょっと複雑なことをしていたのでPythonで書いてましたが、今となってはシェルスクリプトでもmakeでもなんでもいい気はします。</p><p>iOSのビルドにはもろもろ署名とかが必要です。developer.apple.comでもろもろの登録作業を行ったり、<code>ios.Runner.xcworkspace</code>のSigning &amp; Capabilitiesタブでユーザーや組織を選択したりしてください。</p><p>また、DeployGateのiOSにアプリの配布はAd Hocモードでの配布になるため、デバイスのUDIDを開発者サイトに登録しProvisioning ProfileにそのUDIDを登録したりします。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_android</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;building android...&quot;</span>)</span><br><span class="line">    subprocess.run([<span class="string">&quot;flutter&quot;</span>, <span class="string">&quot;build&quot;</span>, <span class="string">&quot;apk&quot;</span>, <span class="string">&quot;--release&quot;</span>], check=<span class="literal">True</span>)</span><br><span class="line">    shutil.move(<span class="string">&quot;build/app/outputs/flutter-apk/app-release.apk&quot;</span>, <span class="string">f&quot;android/dgsample.apk&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\a&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_ios</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;building ios...&quot;</span>)</span><br><span class="line">    subprocess.run([<span class="string">&quot;flutter&quot;</span>, <span class="string">&quot;build&quot;</span>, <span class="string">&quot;ios&quot;</span>, <span class="string">&quot;--release&quot;</span>], check=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;generating .xcarchive...&quot;</span>)</span><br><span class="line">    subprocess.run(<span class="string">&quot;xcodebuild -workspace Runner.xcworkspace -scheme Runner -sdk iphoneos -configuration Release archive -archivePath $PWD/build/Runner.xcarchive&quot;</span>,</span><br><span class="line">        shell=<span class="literal">True</span>, cwd=os.path.join(os.getcwd(), <span class="string">&quot;ios&quot;</span>), check=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;generating .ipa...&quot;</span>)</span><br><span class="line">    subprocess.run(<span class="string">&quot;xcodebuild -allowProvisioningUpdates -exportArchive -archivePath $PWD/build/Runner.xcarchive -exportOptionsPlist exportOptions.plist -exportPath dgsample&quot;</span>,</span><br><span class="line">        shell=<span class="literal">True</span>, cwd=os.path.join(os.getcwd(), <span class="string">&quot;ios&quot;</span>), check=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\a&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    build_android()</span><br><span class="line">    build_ios()</span><br></pre></td></tr></table></figure><p>あとはこれらのビルド結果をDeployGateにあげれば大丈夫なはず！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Flutterで環境を一度作ってしまえば、Android StudiからAndroidエミュレータ でもiOSシミュレータでもどんどん起動できるので、デバッグはとてもやりやすいです。ですが、Flutterで作るということはスマートフォン向けのアプリなので実機テストもしたいで</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="DeployGate" scheme="https://future-architect.github.io/tags/DeployGate/"/>
    
  </entry>
  
  <entry>
    <title>反転数について、隣接互換との関係、分割統治法による数え上げ</title>
    <link href="https://future-architect.github.io/articles/20210720a/"/>
    <id>https://future-architect.github.io/articles/20210720a/</id>
    <published>2021-07-19T15:00:01.000Z</published>
    <updated>2021-07-28T08:30:25.423Z</updated>
    
    <content type="html"><![CDATA[<p>SAIGの小橋です。<a href="/articles/20210628a/">アルゴリズムとデータ構造連載</a>の5日目です。</p><p>この間、反転数が関係する問題がうまく解けなくて悔しい思いをしたので、技術ブログでアルゴリズム連載企画ができたのを機に、反転数について考えてみたいと思います。</p><h1 id="反転数の定義"><a href="#反転数の定義" class="headerlink" title="反転数の定義"></a>反転数の定義</h1><blockquote><p>数列<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.199ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1856 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1356,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>に対して、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex" xmlns="http://www.w3.org/2000/svg" width="4.73ex" height="1.957ex" role="img" focusable="false" viewBox="0 -661 2090.6 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1678.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></svg></mjx-container> かつ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="6.997ex" height="1.887ex" role="img" focusable="false" viewBox="0 -540 3092.8 834.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1133.7,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="msub" transform="translate(2189.5,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container> を満たす組(i, j)の個数を、この数列の反転数(inversion number)という。</p></blockquote><p>例えば、数列2, 4, 1, 3, 5の反転数を考えましょう。<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex" xmlns="http://www.w3.org/2000/svg" width="11.015ex" height="1.968ex" role="img" focusable="false" viewBox="0 -666 4868.8 870"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1678.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2178.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2623.2,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(3313,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4368.8,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container> とすると <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="5.28ex" height="1.597ex" role="img" focusable="false" viewBox="0 -666 2333.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(1833.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container> かつ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="15.683ex" height="1.881ex" role="img" focusable="false" viewBox="0 -666 6931.8 831.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1243.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2299.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(3076.9,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="msub" transform="translate(4132.7,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(5376,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6431.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> なので（数列のインデックスは<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewBox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> から始まるものとします）、これは条件を満たす組の1つです。<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.594ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10870.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1178.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1590.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2257.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3313.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3702.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4202.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(4646.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(5146.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5535.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5980.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6369.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(6869.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7314.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(7814.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8203.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(8647.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(9036.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(9536.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9981.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(10481.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>が条件を満たすので、反転数は3です。</p><p>感覚的には、「数列がソートされている状態にどれくらい近いか・遠いか」を表す指標と言えるでしょう。</p><p>なお、反転数は転倒数という名前で呼ばれることもあります。</p><h1 id="反転数と隣接互換の関係"><a href="#反転数と隣接互換の関係" class="headerlink" title="反転数と隣接互換の関係"></a>反転数と隣接互換の関係</h1><p>今回知りたいのは、反転数と隣接互換によるソート回数の関係です。</p><p>先の2, 4, 1, 3, 5 という数列に対して、隣同士の要素の交換を繰り返してソートすると、2, 4, 1, 3, 5 → 2, 1, 4, 3, 5 → 2, 1, 3, 4, 5 → 1, 2, 3, 4, 5 と3回の交換でソートすることができます。この必要な交換回数は、実は反転数に等しい値です。分かってしまえばそれほど難しくないのですが、それほど自明でもないので少し難しいですね。今回証明を考えてみました。</p><blockquote><p>補題：数列の反転数は、その数列をバブルソートでソートするときの交換回数に等しい。</p></blockquote><p>証明：数列の反転数を<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.595ex" height="1.57ex" role="img" focusable="false" viewBox="0 -683 1589 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1104,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container>とおく。バブルソートによる要素の交換は、逆順のものを正しい順に直す操作である。またこの交換は隣接要素間で行われるので、操作の前後の反転数を考えると、交換された要素 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex" xmlns="http://www.w3.org/2000/svg" width="6.924ex" height="1.468ex" role="img" focusable="false" viewBox="0 -441 3060.3 649"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(856,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1300.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container> だけが影響を受ける。したがって、操作によって反転数は必ず1だけ減少する。また定義より、ソートされた数列の反転数は0である。したがって、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.311ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10745.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1104,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(1811.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2811.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3533.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(4533.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4922.9,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">交</text></g><g data-mml-node="mi" transform="translate(5822.9,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">換</text></g><g data-mml-node="mi" transform="translate(6722.9,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">回</text></g><g data-mml-node="mi" transform="translate(7622.9,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">数</text></g><g data-mml-node="mo" transform="translate(8522.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9189.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(10245.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>なので、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.595ex" height="1.57ex" role="img" focusable="false" viewBox="0 -683 1589 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1104,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container>は交換回数に等しい。</p><p>バブルソートのアルゴリズムについては<a href="https://judge.u-aizu.ac.jp/onlinejudge/commentary.jsp?id=ALDS1_2_A&pattern=post&type=general&filter=Algorithm">AIZU ONLINE JUDGEのページ</a>などをご参照ください<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p><blockquote><p>命題：数列の反転数は、その数列を隣接要素を交換することによってソートするときの最小の交換回数に等しい。</p></blockquote><p>証明：1回の隣接要素の交換によって、反転数は高々1しか減少しない。したがって、最初の反転数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.595ex" height="1.57ex" role="img" focusable="false" viewBox="0 -683 1589 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1104,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container>からソート済みの状態（反転数が0）にするには、最小でも<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.595ex" height="1.57ex" role="img" focusable="false" viewBox="0 -683 1589 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1104,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container>回の交換が必要である。そして補題より、バブルソートを実行すると<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.595ex" height="1.57ex" role="img" focusable="false" viewBox="0 -683 1589 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1104,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container>回の交換でソートすることができる。以上より、最小の交換回数は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.595ex" height="1.57ex" role="img" focusable="false" viewBox="0 -683 1589 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1104,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container>回である。</p><p>なお、最小回数を達成するために、必ずしもバブルソートを使う必要はありません。例えば、「一番小さい要素を探して、一つずつ前と交換していって一番前に移動させる。次に、残りの要素の中で一番小さい要素を探して、一つずつ前と交換していって前から二番目に移動させる……」という方式でも大丈夫です。</p><h1 id="分割統治法による反転数の求め方"><a href="#分割統治法による反転数の求め方" class="headerlink" title="分割統治法による反転数の求め方"></a>分割統治法による反転数の求め方</h1><p>さて、反転数を求める方法について考えてみましょう。</p><p>もっとも単純な方法は、全てのペアについて1つずつチェックする方法で、計算量は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>となります。</p><p>これよりも高速な解法として、Binary Indexed Tree（BIT）を用いた解法があります。「プログラミングコンテストチャレンジブック [第2版]」p.162に載っているほか、<a href="https://ikatakos.com/pot/programming_algorithm/dynamic_programming/inversion">転倒数[いかたこのたこつぼ]</a> が詳しいです。計算量は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="11.15ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4928.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(2206.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(3484.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(3651.3,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(4539.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>です。</p><p>しかし実は、アルゴリズム関連の他の本に載っている「反転数の求め方」は、BITによるものではありません。</p><p>アルゴリズム本の大著である「アルゴリズムデザイン」で反転数の求め方があるのは、「分割統治法」の章の中です。</p><p>分割統治法……! アルゴリズムの授業では必ず習うけど、実際にはなかなか使わないやつ……!</p><p>私自身の競技プログラミングの経験を振り返っても、分割統治法を組んだ覚えはありません。この機会に書いてみましょう。（分割統治法とは何か、という話は割愛します。分割統治法を使うアルゴリズムとしてはマージソートが有名なので、適宜調べてみて下さい。）</p><p>分割された小問題を統合する部分が重要ですので、この部分だけを取り出して書き直してみましょう。</p><blockquote><p>数列AとBがある。AとBはソートされた長さN/2の数列である。これに対し、「AとBをつなげた数列をソートした数列Cを求めたい。同時に、a <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewBox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g></g></g></svg></mjx-container> A, b <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewBox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g></g></g></svg></mjx-container> B, かつ a &gt; bとなる 組の個数も求めたい。</p></blockquote><p>反転数を求める上で数列を同時にソートすることは必須ではないので、上記の問題中にソートの話が出てくるのはやや不思議です。直観的には「バラバラな順番だったら高速に求めづらいから、余計な計算量をかけずにソートできるなら同時にソートしておいた方が後でやりやすいだろう」というところでしょうか。</p><p>さて、上記の問題に対する<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.495ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2429 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> の解法を考えます。</p><p>数列AとBのそれぞれの先頭にポインターを置き、それを右にずらしながら小さい方の数字を数列Cに加えていくことで、ソート済みの数列を得ることができます（マージソートのときと同じです）。</p><p>あとは反転数を求めれば問題は解決です。これは、Bの要素を数列Cに加えるときに、残っているAの要素数を足し上げていけば良いです（下図を参照ください）。これにより、一つずつ数えることなく、反転数を短い計算時間で求めることが可能になります。</p><p><img src="/images/20210720a/20210701_%E5%8F%8D%E8%BB%A2%E6%95%B0.png"></p><p>以上を踏まえてソースコード（Python）を書いてみましょう<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_and_count</span>(<span class="params">list_a, list_b</span>):</span></span><br><span class="line">    len_a = <span class="built_in">len</span>(list_a)</span><br><span class="line">    len_b = <span class="built_in">len</span>(list_b)</span><br><span class="line">    idx_a = <span class="number">0</span></span><br><span class="line">    idx_b = <span class="number">0</span></span><br><span class="line">    count_inversion = <span class="number">0</span></span><br><span class="line">    merged = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># リストの両方が空でないとき</span></span><br><span class="line">    <span class="keyword">while</span> idx_a &lt; len_a <span class="keyword">and</span> idx_b &lt; len_b:</span><br><span class="line">        <span class="keyword">if</span> list_a[idx_a] &lt; list_b[idx_b]:</span><br><span class="line">            merged.append(list_a[idx_a])</span><br><span class="line">            idx_a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merged.append(list_b[idx_b])</span><br><span class="line">            idx_b += <span class="number">1</span></span><br><span class="line">            <span class="comment"># count_inversionを、Aの残っている要素数の分だけ増やす</span></span><br><span class="line">            count_inversion += len_a - idx_a</span><br><span class="line"></span><br><span class="line">    <span class="comment"># リストの一方が空になったら、他方のリストの残りを全て出力リストに加える</span></span><br><span class="line">    <span class="keyword">if</span> idx_a &lt; len_a:</span><br><span class="line">        merged += list_a[idx_a:]</span><br><span class="line">    <span class="keyword">if</span> idx_b &lt; len_b:</span><br><span class="line">        merged += list_b[idx_b:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count_inversion, merged</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_and_count</span>(<span class="params">lis</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lis) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, lis</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lis) == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> lis[<span class="number">0</span>] &lt; lis[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, lis</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>, [lis[<span class="number">1</span>], lis[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># リストをほぼ2等分する</span></span><br><span class="line">        half = <span class="built_in">len</span>(lis) // <span class="number">2</span></span><br><span class="line">        list_first = lis[:half]</span><br><span class="line">        list_second = lis[half:]</span><br><span class="line">        inversion_first, sorted_first = sort_and_count(list_first)</span><br><span class="line">        inversion_second, sorted_second = sort_and_count(list_second)</span><br><span class="line">        inversion_while_merging, sorted_full = merge_and_count(sorted_first, sorted_second)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inversion_first + inversion_second + inversion_while_merging, sorted_full</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例</span></span><br><span class="line"><span class="built_in">print</span>(sort_and_count([<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">11</span>]))</span><br><span class="line"><span class="comment"># -&gt; (4, [2, 3, 5, 7, 11, 13])</span></span><br></pre></td></tr></table></figure><p>計算量はBITの場合と同じく、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="11.15ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4928.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(2206.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(3484.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(3651.3,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(4539.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>です。</p><p>なお、AとBの要素について全探索を行って組の個数を求めると計算量は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> となり、反転数を求める全体の計算量も<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> となってしまいます<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p>分割統治法による反転数計算の特徴は、以下のようになります。</p><ul><li>メリット：BITで計算するためには1～Nの数列の並び替えでなければならないが、分割統治法ではそのような制約は無く、任意の要素の数列で使える</li><li>デメリット：計算量としてはBITと変わらないが、再帰による関数呼び出しが発生するため、実際にかかる計算時間はBITよりも長くなる</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.amazon.co.jp/dp/4320122178">アルゴリズムデザイン | Jon Kleinberg, Eva Tardos</a></p><p><a href="https://www.amazon.co.jp/dp/4839941068/">プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～ | 秋葉拓哉, 岩田陽一, 北川宜稔</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">計算量の厳密な解析は「アルゴリズムデザイン」p.196にあります。直観的には、「AとBに対して全部探索するのなら、結局もとの数列の全ての対を（分割統治法のどこかの段階で）一度ずつ見て判定しているから、計算量は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>」と言えます。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">「アルゴリズムデザイン」中では「要素が1ならば分割せずに返し、2以上ならば分割する」としていますが、このコードでは2の場合でもわざわざ1個と1個に分割せずに値を直接計算しています。再帰呼び出しによる計算量増加が怖いので。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">余談ですが、バブルソートを正確に理解しているか気になって調べましたが、「アルゴリズムデザイン」にも「アルゴリズムイントロダクション」にも索引で項目が立っていませんでした。「プログラミングコンテストチャレンジブック [第2版]」では一言説明があるのみでした。……バブルソートの扱い、不遇すぎませんか?</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SAIGの小橋です。&lt;a href=&quot;/articles/20210628a/&quot;&gt;アルゴリズムとデータ構造連載&lt;/a&gt;の5日目です。&lt;/p&gt;
&lt;p&gt;この間、反転数が関係する問題がうまく解けなくて悔しい思いをしたので、技術ブログでアルゴリズム連載企画ができたのを機に、反転数に</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="アルゴリズム" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night #11「機械学習勉強会」</title>
    <link href="https://future-architect.github.io/articles/20210719a/"/>
    <id>https://future-architect.github.io/articles/20210719a/</id>
    <published>2021-07-18T15:00:00.000Z</published>
    <updated>2021-07-28T08:30:42.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの玉木です。6月18日に<a href="https://future.connpass.com/event/215117/">Future Tech Night #11 ～機械学習勉強会～</a>を開催しました。</p><p>私は「ワクチン推定精度世界一へ！異分野技術で世界に貢献」というタイトルで、貞光が「複雑・巨大なITシステムをグラフベースの深層学習で自動解析」というタイトルでそれぞれお話させていただきました。</p><h2 id="発表内容"><a href="#発表内容" class="headerlink" title="発表内容"></a>発表内容</h2><p>発表当日の資料は公開できないのですが、一部重複した内容を書いた記事があるためその記事へのリンクと簡単な紹介をします。</p><h3 id="ワクチン推定精度世界一へ！異分野技術で世界に貢献"><a href="#ワクチン推定精度世界一へ！異分野技術で世界に貢献" class="headerlink" title="ワクチン推定精度世界一へ！異分野技術で世界に貢献"></a>ワクチン推定精度世界一へ！異分野技術で世界に貢献</h3><p>以前の<a href="https://future-architect.github.io/articles/20201208/">バイオ情報学研究会での発表記事</a>で紹介した内容を中心に、そのときからのアップデートや、<a href="https://future-architect.github.io/articles/20200801/">Kaggleにワクチン開発用のデータセットを公開</a>した内容を紹介しました。詳細はリンク先のブログを参照してください。バイオ情報学研究会からのアップデートに、「MHCⅡ分子に結合するペプチド予測」に用いたBERTのアテンションを可視化する、というものがあります。</p><p><img src="/images/20210719a/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-07-12_21.11.09.png"></p><p>上図中央の赤い細い紐のようなものがペプチド、緑のリボンのようなものがMHCⅡ分子α鎖、青のリボンのようなものがMHCⅡ分子β鎖になります。間の点線がBERTのアテンションを可視化したものになります。構造生物学的には、ペプチドからMHCⅡ分子α鎖、β鎖をそれぞれ注目していないと「MHCⅡ分子に結合するペプチド予測」は解けないはずなのですが、可視化の結果、BERTはそのように注目し、学習していることがわかりました。この件について、先日のJSAIでも発表させていただきました。</p><h3 id="複雑・巨大なITシステムをグラフベースの深層学習で自動解析"><a href="#複雑・巨大なITシステムをグラフベースの深層学習で自動解析" class="headerlink" title="複雑・巨大なITシステムをグラフベースの深層学習で自動解析"></a>複雑・巨大なITシステムをグラフベースの深層学習で自動解析</h3><p>以前の<a href="/articles/20180723/">人工知能学会（JSAI2018）参加報告記事</a>で紹介した、「半教師有りグラフニューラルネットワークを用いたCRUD関係に基づくシステム移行単位の最適化」の話をこの勉強会ではさせていただきました。詳細はリンク先のブログを参照してください。</p><h2 id="登壇した感想"><a href="#登壇した感想" class="headerlink" title="登壇した感想"></a>登壇した感想</h2><p>ご参加いただいた方、ありがとうございました。</p><p>たくさんご質問いただいて時間があっという間に過ぎてしまったのですが、勉強会で話した内容が少しでも参考になれば幸いです。また今回は学会、研究会に発表した内容が中心になりましたが、次回このような機械学習勉強会の機会があれば、また違った機械学習技術の紹介ができればと思います。今後も皆様のご参加をお待ちしております。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの玉木です。6月18日に&lt;a href=&quot;https://future.connpass.com/even</summary>
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
  <entry>
    <title>Go x AWSでつくる サービス運用ツール実例集</title>
    <link href="https://future-architect.github.io/articles/20210716a/"/>
    <id>https://future-architect.github.io/articles/20210716a/</id>
    <published>2021-07-15T15:00:00.000Z</published>
    <updated>2021-07-28T08:30:39.434Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210716a/lightning-bolt-1203953_640.png" alt="" width="640" height="360"><p>筒井です。</p><p>先日、<a href="https://future.connpass.com/event/216081/">Future Tech Night #12 〜Goで始めるサーバレスファーストという選択肢〜</a>というイベントを開催しました。<br>私は『Go x AWSでつくる サービス運用ツール実例集』というタイトルで発表させていただきました。</p><h2 id="発表の概要と補足"><a href="#発表の概要と補足" class="headerlink" title="発表の概要と補足"></a>発表の概要と補足</h2><p>詳細はスライドを御覧ください。</p><script async class="speakerdeck-embed" data-id="6e1c493ebf4d4f7ea8cdbd5fe7e8c6fd" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script><h3 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h3><ol><li>前おき<ul><li>サーバレスのメリット・デメリット</li><li>Serverless Framework について</li></ul></li><li>実例集<ul><li>休日・夜間に開発環境を停止する</li><li>サービスダッシュボードをつくる</li><li>本番DBを検証環境へクローンする</li></ul></li><li>Tips<ul><li>Step Functionsをつかう理由</li><li>main.goのダイエット</li><li>Makefileの書き方</li></ul></li></ol><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Webサービスの運営・運用をしていると、「この作業自動化したいな…」と思うことは多々あるかと思います。</p><p>しかし、こうした要望から開発したツール類は塩漬けになりがちで、数か月後に書き捨てのつもりだった難読シェルスクリプトと向き合った経験をお持ちの方も多いのではないでしょうか。<br>この発表ではそういった”ちょっとしたツール”を、GoとAWSの組み合わせで開発した実例を紹介しました。</p><h3 id="Go-x-AWS-Lambda-Step-Functions-で運用ツールをつくるメリット・デメリット"><a href="#Go-x-AWS-Lambda-Step-Functions-で運用ツールをつくるメリット・デメリット" class="headerlink" title="Go x AWS (Lambda, Step Functions) で運用ツールをつくるメリット・デメリット"></a>Go x AWS (Lambda, Step Functions) で運用ツールをつくるメリット・デメリット</h3><p>運用ツール（無くてもいいがあると嬉しいもの）をGo x AWSで実現すると嬉しいことについて説明しました。<br>「cron用のサーバを用意するほどでもないが、都度ローカルで実行するのは地味にめんどくさい」タスクにピッタリです。</p><h3 id="Serverless-Frameworkについて"><a href="#Serverless-Frameworkについて" class="headerlink" title="Serverless Frameworkについて"></a>Serverless Frameworkについて</h3><p>Serverless FrameworkはIaCツールの一種で、<br>Lambda Functionのデプロイと関連するリソース（LambdaにあてるIAM Roleや、通知用のSNS Topicなど）の構築を一度に行うことが可能です。</p><p><strong>Q&amp;Aより: Terraformとどちらがいいの？</strong><br>作るものの規模と開発チームの体制によりけりかと思います。<br>Serverlessの場合は、Lambdaの環境変数から関連リソースまで1ファイルにまとめることが出来るため（もちろん分割もできますが）、<br>小さなツールを1人でガーッと作りきってしまうようなシチュエーションでは良い選択肢だと思っています。</p><h3 id="実例1-休日・夜間に開発環境を停止する"><a href="#実例1-休日・夜間に開発環境を停止する" class="headerlink" title="実例1. 休日・夜間に開発環境を停止する"></a>実例1. 休日・夜間に開発環境を停止する</h3><p>GUI付きのcronサーバと化していたJenkinsを廃止するために生まれたものです。<br>LambdaからAWS SDKを通してEC2、ECS、RDSなどを停止しています。</p><p><code>serverless.yml</code> の設定例を記載しておきます。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">functions:</span></span><br><span class="line">  <span class="attr">rds:</span></span><br><span class="line">    <span class="attr">handler:</span> <span class="string">dist/rds</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stepFunctions:</span></span><br><span class="line">  <span class="attr">validate:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">stateMachines:</span></span><br><span class="line">    <span class="attr">suspend:</span></span><br><span class="line">      <span class="attr">events:</span></span><br><span class="line">        <span class="comment"># 平日21時(JST)に停止</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">schedule:</span></span><br><span class="line">            <span class="attr">rate:</span> <span class="string">&quot;cron(0 12 ? * MON-FRI *)&quot;</span></span><br><span class="line">            <span class="attr">input:</span></span><br><span class="line">              <span class="attr">dbClusterIdentifiers:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">your-database-identifier</span></span><br><span class="line">      <span class="attr">definition:</span></span><br><span class="line">        <span class="attr">StartAt:</span> <span class="string">SuspendRDS</span></span><br><span class="line">        <span class="attr">States:</span></span><br><span class="line">          <span class="attr">SuspendRDS:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">Task</span></span><br><span class="line">            <span class="attr">Resource:</span> <span class="type">!GetAtt</span> <span class="string">rds.Arn</span></span><br><span class="line">            <span class="attr">Parameters:</span></span><br><span class="line">              <span class="attr">action:</span> <span class="string">suspend</span></span><br><span class="line">              <span class="string">dbClusterIdentifiers.$:</span> <span class="string">$.dbClusterIdentifiers</span></span><br><span class="line">            <span class="attr">ResultPath:</span> <span class="literal">null</span></span><br><span class="line">            <span class="attr">Next:</span> <span class="string">Succeeded</span></span><br><span class="line">          <span class="attr">Succeeded:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">Pass</span></span><br><span class="line">            <span class="attr">End:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Lambda Functionの入力は以下のように定義しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handlers/rds/main.go</span></span><br><span class="line"><span class="comment">// Event is a concrete representation of input values of lambda function</span></span><br><span class="line"><span class="keyword">type</span> Event <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Action accepts values [suspend, start]</span></span><br><span class="line">Action               <span class="keyword">string</span>   <span class="string">`json:&quot;action&quot;`</span></span><br><span class="line">DBClusterIdentifiers []<span class="keyword">string</span> <span class="string">`json:&quot;dbClusterIdentifiers&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="実例2-サービスダッシュボードをつくる"><a href="#実例2-サービスダッシュボードをつくる" class="headerlink" title="実例2. サービスダッシュボードをつくる"></a>実例2. サービスダッシュボードをつくる</h3><p>アプリケーションDB (RDS) からサービスのKPIをクエリし、<a href="https://datastudio.google.com/">Google Data Studio</a>を使ってダッシュボードをつくるサンプルです。<br>以前は<a href="https://redash.io/">redash</a>を使ってクエリを実行しCSVを取得、Excelにまとめていたのですが、これを自動化するために生まれました。</p><p>使用するLambda Functionは以下2つです。</p><ol><li>DBから取得したデータを、CSV形式でS3に保存</li><li>S3からCSVを読み出し、BigQueryにインサートする</li></ol><p>1と2のLambda Functionを分けているのは以下の理由からです。</p><ul><li>1のLambda FunctionはVPC内に配置しているため、インターネットアクセスができない (S3はVPC Endpointからアクセス可能)</li><li>アーカイブとしてデータを残しておきたい</li></ul><p>Goの経験が浅くてもSQLがかければメンテ出来るように、というのがこのツールの工夫ポイントです。<br>まず次のようなInterfaceと、このInterfaceを満たすStructのSQL実行を行う共通コードを用意しておきます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Model is an abstract implementation of each models (queries).</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Name .</span></span><br><span class="line">Name() <span class="keyword">string</span></span><br><span class="line"><span class="comment">// Query returns SQL query</span></span><br><span class="line">Query() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>すると、次のようなStructおよびMethodを追加すると、簡単にKPI項目を増やせるようになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyKPI <span class="keyword">struct</span> &#123;</span><br><span class="line">Timestamp time.Time <span class="string">`db:&quot;timestamp&quot; csv:&quot;timestamp&quot;`</span></span><br><span class="line">Sales     <span class="keyword">int64</span>     <span class="string">`db:&quot;sales&quot; csv:&quot;sales&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *MyKPI)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;monthly_sales&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *MyKPI)</span> <span class="title">Query</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;select timestamp, sales from ...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コードにトリッキーな部分がないのもGoのメリットかと思います（個人的な感想ですが）。</p><h3 id="実例3-本番DBを検証環境にクローンする"><a href="#実例3-本番DBを検証環境にクローンする" class="headerlink" title="実例3. 本番DBを検証環境にクローンする"></a>実例3. 本番DBを検証環境にクローンする</h3><p>本番データに起因するバグが発生した際などに、検証環境で安全かつスムーズに調査を行うために生まれたものです。</p><p>本番DBのスナップショットをリストア、データマスキングを行った後再度スナップショット化。<br>RDSのスナップショットは指定したアカウントにシェアすることが可能なので、これを検証環境にリストアすることで本番データを検証環境にクローンしています。</p><p>また、Auroraのスナップショットリストアでは新たにクラスタが立ち上がるためエンドポイントも変わってしまうのですが、Route53のVPCローカルDNSを間に挟むことでアプリケーション側の設定変更を不要にしています。</p><h3 id="Tips-Lambda-FunctionがひとつでもStep-Functionsをつかう"><a href="#Tips-Lambda-FunctionがひとつでもStep-Functionsをつかう" class="headerlink" title="Tips. Lambda FunctionがひとつでもStep Functionsをつかう"></a>Tips. Lambda FunctionがひとつでもStep Functionsをつかう</h3><p>状態管理が不要な場合でも、Step Functionsを使うメリットはあります。<br>実行履歴がマネジメントコンソールから確認でき、前回と同じパラメータで手動実行、といった操作が容易になります。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>私がGo x AWSで構築したサービス運用ツールは今日も元気に稼働してくれています。</p><p>GoはPythonなどスクリプト言語と比べると記述が冗長になってしまいますが、冗長さ故の処理の追いやすさはきっと数カ月後のあなたを助けるはずです。<br>また、不要になったらCloudFormationのStackを削除すればOKという身軽さも嬉しいポイントです。</p><p>この発表があなたの業務を楽にする一助になれたなら幸いです。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>発表内で言及した記事のリンクです。</p><ul><li><a href="https://future-architect.github.io/articles/20201022/">GoとAWS LambdaのためのMakefile</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210716a/lightning-bolt-1203953_640.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot;&gt;

&lt;p&gt;筒井です。&lt;/p&gt;
&lt;p&gt;先日、&lt;a href=&quot;https://future.con</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
  <entry>
    <title>Proxy下でのFlutter環境構築(for Mac)</title>
    <link href="https://future-architect.github.io/articles/20210715a/"/>
    <id>https://future-architect.github.io/articles/20210715a/</id>
    <published>2021-07-14T15:00:00.000Z</published>
    <updated>2021-07-15T02:02:54.381Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DXユニットでアルバイトをしている齋藤です。</p><p>以前、当ブログで<a href="/articles/20210510a/">連載</a>が行われたFlutterですが、先日業務のためにFlutterの環境構築をしようとしたところ、いくつかの障壁がありました。</p><p>当記事ではProxyがある環境下でMac上にFlutterの環境構築について、ダウンロードから仮想デバイス上での公式デモアプリ（Android）実行まで紹介いたします。iOSアプリに関しては今回は説明いたしません。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>マシン: MacBook Pro (2020, Intel CPU)</li><li>ネットワーク: 社外への通信はHTTP Proxyの経由が必要</li></ul><p>※ Apple Siliconを搭載したMacでは、<a href="https://github.com/flutter/flutter/wiki/Developing-with-Flutter-on-Apple-Silicon">Developing with Flutter on Apple Silicon</a> を参考にする必要があるようです。</p><h2 id="Flutterのインストール、flutter-doctor"><a href="#Flutterのインストール、flutter-doctor" class="headerlink" title="Flutterのインストール、flutter doctor"></a>Flutterのインストール、flutter doctor</h2><p>基本的にはFlutter公式の<a href="https://flutter.dev/docs/get-started/install">Install</a>に沿ってインストールを進めていきます。</p><p>予め、<code>flutter pub get</code>で必要になるProxyに関する設定を行います。.zshrc等に設定を追記します。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 認証なしの場合</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://proxy.example.com:8000</span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="variable">$http_proxy</span></span><br><span class="line"><span class="built_in">export</span> HTTP_PROXY=<span class="variable">$http_proxy</span></span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=<span class="variable">$http_proxy</span></span><br><span class="line"><span class="built_in">export</span> NO_PROXY=localhost,127.0.0.1</span><br><span class="line"><span class="built_in">export</span> no_proxy=<span class="variable">$NO_PROXY</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 認証付きの場合</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://username:password@proxy.example.com:8000</span><br><span class="line"><span class="comment"># 以下同じ</span></span><br></pre></td></tr></table></figure><p>続いてFlutter公式から<code>flutter_macos_&lt;version_name&gt;-stable.zip</code>をダウンロードします。<br>そして、次のコマンドを実行していきます。Flutterのインストール先は<code>~/develop</code>として説明します。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/development</span><br><span class="line">unzip ~/Downloads/flutter_macos_&lt;version_name&gt;-stable.zip</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:`pwd`/flutter/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Flutter doctor実行。Android StudioやXCode以外がパスしていればOK</span></span><br><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>ちなみに、Flutterの一部のコマンドでは<code>flutter doctor -v</code>のように<code>-v</code>オプションを付けることで、詳細なログが表示されます。上手くいかないときは<code>-v</code>オプションをつけると、失敗の原因が見つかりやすくなります。</p><h2 id="Android-Studioのインストール"><a href="#Android-Studioのインストール" class="headerlink" title="Android Studioのインストール"></a>Android Studioのインストール</h2><p>IDEのAndroid Studioの設定を行います。Android Studioが未インストールならば、<a href="https://developer.android.com/studio/install?hl=ja">Android Studio のインストール</a> に沿ってインストールします。</p><p>続いて起動画面で「Configure」→「Plugins」を選択して開き、Flutterを検索し、Flutter Pluginをインストールします。同時にDart Pluginもインストールされます。</p><p>次にJavaのSDKをAndroid SDKが対応しているJDK 1.8.0に変更します。最新のJDKを使おうとすると、<code>flutter doctor --android-licenses</code>のときに実行時エラーになると思います。</p><p>JDK 1.8.0がなければインストールします。そして、次の設定を.zshrc等に追加します。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=`/usr/libexec/java_home -v 1.8`</span><br></pre></td></tr></table></figure><p>再度、<code>flutter doctor</code>を実行します。すると、android licenseの認証が求められるため、<code>flutter doctor --android-licenses</code>を実行します。</p><p>何回か同意を求められるので<code>y</code>を入力し、同意します。</p><p>最後に再度<code>flutter doctor</code>を実行し、XCode以外は正常であることを確認します。iOSアプリを開発しない場合、XCodeは不要です。</p><h2 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h2><p>Flutterのプロジェクトを作成します。このとき、Android Studioの<code>New Project</code>から作成しようとすると、Android StudioでProxyの設定をしていても上手くいきません。そのため、terminalでプロジェクトを作成したいディレクトリに移動し、<code>flutter create &lt;project_name&gt;</code>を実行してプロジェクトを作成します。</p><p>続いてターミナルでプロジェクトのディレクトリまで移動し、<code>flutter pub get</code>を実行します（Android Studioからは上手く動作しない）。これで必要なパッケージが導入されます。</p><p>次にAndroidアプリを実行する仮想デバイスを起動します。画面上部の<code>&lt;no device selected&gt;</code>からプルダウンして<code>Open Android Emulator: Pixel 3A API 30 x86</code>などを選択します。最初からAndroid Emulatorが一つはインストールされていると思います。選択すると仮想デバイスが起動されます。</p><p>続いて、仮想デバイス選択の右の欄でエントリーポイントが<code>main.dart</code>になっていることを確認します。最後にさらに右にある再生ボタンの形をした「Run」をクリックします。</p><p>このとき、以下のようなProxy関連のエラーが発生することがあります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.io.IOException: Unable to tunnel through proxy. Proxy returns <span class="string">&quot;HTTP/1.1 407 Proxy Authentication Required&quot;</span></span><br></pre></td></tr></table></figure><p>これは途中<code>gradlew assembleDebug</code>を実行するときのエラーなので、gradleでのProxy設定を行います。<code>~/.gradle/gradle.properties</code>において</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemProp.http.proxyHost=http:<span class="comment">//proxy.example.com</span></span><br><span class="line">systemProp.http.proxyPort=<span class="number">8000</span></span><br><span class="line">systemProp.http.proxyUser=username</span><br><span class="line">systemProp.http.proxyPassword=password</span><br><span class="line">systemProp.https.proxyHost=http:<span class="comment">//proxy.example.com</span></span><br><span class="line">systemProp.https.proxyPort=<span class="number">8000</span></span><br><span class="line">systemProp.https.proxyUser=username</span><br><span class="line">systemProp.https.proxyPassword=password</span><br></pre></td></tr></table></figure><p>を記述します。記号はURLエンコードなどをせず、そのまま入力します(<code>?</code>などはそのまま入力してOK)。</p><p>加えて、証明書エラーが出ることもあります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A problem occurred configuring root project <span class="string">&#x27;android&#x27;</span>.</span><br><span class="line">&gt; Could not resolve all artifacts <span class="keyword">for</span> configuration <span class="string">&#x27;:classpath&#x27;</span>.</span><br><span class="line">   &gt; Could not resolve com.android.tools.build:gradle:4.1.0.</span><br><span class="line">     Required by:</span><br><span class="line">         project :</span><br><span class="line">      &gt; Could not resolve com.android.tools.build:gradle:4.1.0.</span><br><span class="line">         &gt; Could not get resource <span class="string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/4.1.0/gradle-4.1.0.pom&#x27;</span>.</span><br><span class="line">            &gt; Could not GET <span class="string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/4.1.0/gradle-4.1.0.pom&#x27;</span>.</span><br><span class="line">               &gt; PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br></pre></td></tr></table></figure><p>この場合はJavaのルート証明書一覧にdl.google.comの証明書を追加することで解決できます。</p><ul><li>まず <a href="https://dl.google.com/dl/android/">https://dl.google.com/dl/android/</a> に移動します。404が表示されますが問題ありません。</li><li>続いて、以下の手順で証明書を入手します。ブラウザにGoogle Chromeを使用する場合で説明します。<ul><li>URL横の鍵マークをクリックし、「証明書」をクリックします。</li><li>一番上の証明書をクリックし、表示された証明書アイコンをデスクトップにドラッグ&amp;ドロップします。<ul><li><code>~/Desktop/Digital\ Arts\ Inc.\ CA.cer</code>が作成される。</li></ul></li></ul></li><li>keytoolを用いて、証明書を追加します。<ul><li>例：<code>keytool -import -alias certificationdisitalartsinc -keystore ~/Library/Application\ Support/Google/AndroidStudio4.2/ssl/caerts -file ~/Desktop/Digital\ Arts\ Inc.\ CA.cer</code></li></ul></li></ul><p>以上の問題が解決され、正常に動作すれば環境構築完了です。以下のようにカウントアップアプリが起動し、操作できると思います。</p><img alt="flutter_demo_launch" src="/images/20210715a/flutter_demo_launch.png" width="500" height="894" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Proxyがある環境下でMac上にFlutterの環境構築について紹介いたしました。Proxy環境下での環境構築は厄介なことになりがちですが、適切な設定を行い、素敵な開発ライフを送っていただければと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIG DXユニットでアルバイトをしている齋藤です。&lt;/p&gt;
&lt;p&gt;以前、当ブログで&lt;a href=&quot;/articles/20210510a/&quot;&gt;連載&lt;/a&gt;が行われたFlutterですが、先日業務のためにFlutterの環境構築をしようとしたところ、いくつかの障壁がありま</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="proxy" scheme="https://future-architect.github.io/tags/proxy/"/>
    
  </entry>
  
</feed>
