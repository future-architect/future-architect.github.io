<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-10-13T12:37:06.926Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020年秋にVue.jsのアプリケーションを作るなら、押さえておきたい5つのポイント</title>
    <link href="https://future-architect.github.io/articles/20201013/"/>
    <id>https://future-architect.github.io/articles/20201013/</id>
    <published>2020-10-12T15:00:00.000Z</published>
    <updated>2020-10-13T12:37:06.926Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201013/top.png"><p>TIGの伊藤真彦です。</p><p>ここ最近はVue.jsでのフロントエンド開発を行っています。<br>ほぼ何もない状態からのスタート段階から始めたのですが、その際調査したことが学びになったので共有します。</p><p>※この記事は <strong>2020/10/13</strong> に執筆されました。<strong>調査日は2020/08/17～2020/09/01</strong> のため、バージョンなど当時と状況が異なるものがあります。この1ヶ月の間でも、alphaからbetaに変わったり、betaが取れたりと進化が速いです。</p><p>公式ライブラリのステータスはこちらもご参考ください。<br><a href="https://v3.vuejs.org/guide/migration/introduction.html#supporting-libraries" target="_blank" rel="noopener">https://v3.vuejs.org/guide/migration/introduction.html#supporting-libraries</a></p><h2 id="前提として押さえておきたい2点のポイント"><a href="#前提として押さえておきたい2点のポイント" class="headerlink" title="前提として押さえておきたい2点のポイント"></a>前提として押さえておきたい2点のポイント</h2><h3 id="環境構築はVue-CLI"><a href="#環境構築はVue-CLI" class="headerlink" title="環境構築はVue CLI"></a>環境構築はVue CLI</h3><p>フューチャーでは<a href="https://future-architect.github.io/typescript-guide/">仕事ですぐに使えるTypeScript</a>と題しまして、TypeScriptの概要から詳細な使い方までをドキュメントとしてまとめています。</p><p>基本的な使い方からテクニック、また各種アプリケーションの環境構築までこちらにまとめています。</p><p>上記<a href="https://future-architect.github.io/typescript-guide/">仕事ですぐに使えるTypeScript</a>に記載の通り、<br>Vue.jsのアプリケーションはVue CLIを使って構築する前提でこの記事を書いています。</p><h3 id="linterを導入する"><a href="#linterを導入する" class="headerlink" title="linterを導入する"></a>linterを導入する</h3><p>コード規約はeslintの設定として反映させています。逆に言うと各種規約はeslintの推奨設定に従っています、コード規約に迷う必要が無くなるのもメリットです。</p><p>eslintだけでなく、htmlテンプレート部分も指摘してくれる<a href="https://prettier.io/" target="_blank" rel="noopener">Prettier</a>も導入しています。コミット前に<code>npm run lint --fix</code>コマンドで書いた内容の成型を行う、もしくはVisual Studio Codeの拡張などにPrettierを組み込むことを推奨します。</p><h2 id="Vue-jsを使う上での検討ポイント3点"><a href="#Vue-jsを使う上での検討ポイント3点" class="headerlink" title="Vue.jsを使う上での検討ポイント3点"></a>Vue.jsを使う上での検討ポイント3点</h2><p>さてVue.jsでアプリケーションを作りましょう、となった際に検討するべきポイントがいくつかあります。</p><p>具体的には下記のようなポイントです。</p><ul><li>JavaScript or TypeScript</li><li>Vue2 or Vue3</li><li>コンポーネントのスタイル</li></ul><h2 id="JavaScript-or-TypeScript"><a href="#JavaScript-or-TypeScript" class="headerlink" title="JavaScript or TypeScript"></a>JavaScript or TypeScript</h2><p>TypeScriptを採用するメリットは<a href="https://future-architect.github.io/typescript-guide/preface.html#id3">TypeScriptを選んで開発すべき理由</a>の章に記載があります。JavaScriptへの習熟度が高く、一方TypeScriptの経験が無い、なおかつスケジュールが極端に厳しいなどの条件でない限りTypeScriptで良いかなと考えます。</p><p>現在はVue CLIコマンドを使ってアプリケーションを新規作成する際に、TypeScript前提の設定でアプリケーションを構築する選択が可能です。</p><p>逆に言うと少しでもJavaScriptで構築してしまうと移植作業が発生してしまうので、TypeScriptを使用する決断はなるべく初期に下すほうが良いでしょう。</p><h2 id="Vue2-or-Vue3"><a href="#Vue2-or-Vue3" class="headerlink" title="Vue2 or Vue3"></a>Vue2 or Vue3</h2><p>気持ちとしてはVue3にアップデートして最新構成で臨みたかったのですが、今回は断念しました。</p><p>アップデート自体は試しました。</p><p>Vue CLIを使っている場合、<code>vue add vue-next</code>コマンドでVue3の導入が可能です。徐々にVue3を動かすためのパッチ的プラグインが不要になってくるライブラリが増えてきており、<code>vue-cli-plugin-vue-next</code>のアンインストールを推奨されるようになっていました。<br><img src="/images/20201013/image.png" alt=""></p><p>断念した最大の理由は、メジャーなライブラリのバージョンがalpha版である事です。</p><p><img src="/images/20201013/image_2.png" alt=""></p><p>上記の状況からVue3はまだまだアーリーアダプトすぎる<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>印象です、コントリビュートするチャンスとも考えられますが…Vuetyfyレベルの有名かつ大規模なライブラリのVue3本格対応などが良い分水嶺になるかなと考えております。</p><p><a href="https://vuetifyjs.com/en/introduction/roadmap/" target="_blank" rel="noopener">Vuetifyのロードマップ</a>で目安となる時期が確認できます。</p><h2 id="コンポーネントのスタイル"><a href="#コンポーネントのスタイル" class="headerlink" title="コンポーネントのスタイル"></a>コンポーネントのスタイル</h2><p>この記事のメイントピックはここです、手がかりがない場合かなり迷うところです。</p><p>Vue.jsでの実装方法は、Vue.jsの登場当初のものより洗練された手法があります。裏を返すと同じことをする為の手法が複数あり、手法を探す際に迷う原因となる他、なんらかのサンプルコードを自分が採用したスタイルに翻訳するような手間が発生してしまいます。</p><p>またビギナーがその辺りの作法の違いを把握するのは難しく、古い情報を基にそのまま古い書き方で実装したり、TypeScriptで頑張りたいところをJavaScriptで仕上げてしまうような事件が実際に発生してしまいました。</p><p><img src="/images/20201013/%E7%84%A1%E9%A1%8C.png" alt=""></p><p>今回私のチームでは<a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a>を採用しました。<br><a href="https://class-component.vuejs.org/" target="_blank" rel="noopener">ドキュメント</a>にもある通り、<code>export default</code>の記述部分にクラス名を記載するようなスタイルです。</p><figure class="highlight html"><figcaption><span>sample.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"decrement"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Define the component in class-style</span></span></span><br><span class="line">@Component</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// Class properties will be component data</span></span></span><br><span class="line">  count = 0</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// Methods will be component methods</span></span></span><br><span class="line">  increment() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.count++</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.count--</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同じ事を素のVue.jsで書くとこのようなイメージです。<br>若干記述量が増えます、「,」などの記号の付け忘れに混乱する頻度も増えると思います。</p><figure class="highlight html"><figcaption><span>sample2.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"decrement"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"Counter"</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      count: 0,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++</span></span><br><span class="line">    &#125;,</span><br><span class="line">    decrement() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count--</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>そんな<a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a>ですが<br><a href="https://github.com/vuejs/rfcs/pull/17" target="_blank" rel="noopener">Vue3のRFCとしてはリジェクトされてしまいました</a></p><p>Vue3では<a href="https://github.com/vuejs/composition-api" target="_blank" rel="noopener">composition-api</a>がRFCとして扱われています。<br><a href="https://composition-api.vuejs.org/#summary" target="_blank" rel="noopener">ドキュメント</a>に記載のサンプルコードは以下のようなスタイルです。</p><figure class="highlight html"><figcaption><span>sample3.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span></span><br><span class="line">    Count is: &#123;&#123; state.count &#125;&#125;, double is: &#123;&#123; state.double &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive, computed &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  setup() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line">      count: 0,</span><br><span class="line"><span class="javascript">      double: computed(<span class="function"><span class="params">()</span> =&gt;</span> state.count * <span class="number">2</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使ってみたい気持ちはありますが、情報の充実度等も含め、今すぐ飛びつくにはVue3の導入と同じく早すぎる印象を受け採用を見送りました。</p><p>RFCからはリジェクトされてしまいましたが、<a href="https://github.com/vuejs/vue-class-component/issues/402" target="_blank" rel="noopener">vue-class-componentのVue3サポート</a>は間違いなく行われます。vue-class-componentを採用したが故にVue3へのアップデート時に大幅なリプレイスが必要となる事は恐らくないと思われます。</p><p>つまり結論としては<strong>vue-class-component or composition-api</strong>で好きなほうを使うと良いという話になります。個人的な趣味としては<a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a>の方が学習障壁は低めで分かりやすい印象を受けました。</p><p>この辺りの具体的な書き方も<a href="https://future-architect.github.io/typescript-guide/">仕事ですぐに使えるTypeScript</a>に盛り込んでいければと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>2020秋と題したのはそれだけ移り変わりが激しいという事ですが、少なくとも今は</p><ul><li>環境構築はVue CLI</li><li>linterを導入する</li></ul><p>の2点は当然として、</p><ul><li>TypeScript使おう</li><li>Vue3はまだ早い</li><li>細かい書き方は<a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a></li></ul><p>という構成で臨むことになりました。</p><p>冬～2021年前半戦辺りにはVue3を使ってみたいですね。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">記事の公開タイミングと調査日がズレていますが、2020/10/13時点ではvuesはbetaではないですし、routerもalphaではないです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201013/top.png&quot;&gt;

&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;ここ最近はVue.jsでのフロントエンド開発を行っています。&lt;br&gt;ほぼ何もない状態からのスタート段階から始めたのですが、その際調査したことが学びになったので共
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>GoCon仙台で発表してきました</title>
    <link href="https://future-architect.github.io/articles/20201011/"/>
    <id>https://future-architect.github.io/articles/20201011/</id>
    <published>2020-10-10T15:00:00.000Z</published>
    <updated>2020-10-12T00:19:21.437Z</updated>
    
    <content type="html"><![CDATA[<p>あいにくの天気でしたが、GoCon仙台で発表してきました。当初は2月予定だったのが状況が厳しいということで7月にずらして公開したが、それでも状況は好転しなかったので10月に延期、とスタッフの方々はいろいろ気を揉んで大変だったと思います。</p><p><img src="/images/20201011/IMG_20201010_075727_048.jpg" alt=""><br>初はやぶさ！</p><p><img src="/images/20201011/IMG_20201010_072858.jpg" alt=""><br>子供と見ていたシンカリオンに出てきて気になっていたチキン弁当！</p><p>福島までは行ったことがあったのですが、初の仙台です。この日は幼稚園の運動会が予定されており、子供の出場の合間にリモートで発表という可能性もあったのですが、天気のおかげで現地に行くことができました。また行きたいです。</p><p>GoCon仙台はある意味、新しい時代の礎となる勉強会だな、と感じました。このイベントそのものもそうですが、現在は大規模勉強会がなかなか開催できなくなっています。そんな中開催されたGoCon仙台は、オンラインとオフラインのハイブリッドイベントになりました。世間でオンラインのイベントも増えてきて、今後新型コロナウイルスの影響がない世の中になったとしても、今までのスタイルに戻るのではなく、このGoCon仙台スタイルになっていくと思います。僕の周りも家庭の用事やら、生まれたばかりの子供がいるとかで、参加が難しかった人たちも参加できました。一方で、オフラインでの交流も捨てがたいものがありますし。</p><p>ここ半年ぐらいで、オンライン勉強会はいろいろなツールが出てきて、レベルが上がってきています。ハイブリッド勉強会も、今後はいろいろなアイディアが加わって面白くなっていくんじゃないですかね？例えば、たんなるリモート勉強会とは違って、演台から客席を写して、客席の様子をスピーカーに見せたりしてもいいんじゃないかと思いました。オンライン発表者✖️オフライン受講者、オフライン発表者✖️オンライン受講者の相互なやりとりなど、まだまだ工夫の予知がありそうですし。</p><h1 id="Goでローコードプログラミング"><a href="#Goでローコードプログラミング" class="headerlink" title="Goでローコードプログラミング"></a>Goでローコードプログラミング</h1><p>発表資料はこちら。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQq5mZIeyvOn7jUJo_nLqidjXZfMI027xVMrpdrxJ5MTLBpX1uTINoLvb8dslmqlhmw9unwrRzmJ3LS/embed?start=false&loop=false&delayms=3000" frameborder="0" width="100%" height="569px"　allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>発表は、あまり誰もやったことないことをやろう、ということと、今までGoでみていたのとは全く違う世界を紹介したら良いのではないかということで、Go + Visual Programmingをとりあげようとしました。きっとtenntennさんがオーソドックスなGoの実用的な話をしてくれるんじゃないかと思いましたが、tenntennさんの内容も結構エッジが利いていたので、なかなか攻めたラインナップの発表になってしまいました。</p><p>なお、裏番組の伊藤さんの方が実用的な感じの内容でしたので、そことはバランスが取れていたと思います。現地会場でもオフライン部屋とオンライン視聴部屋は半々ぐらいだったんじゃないかな？</p><p>発表準備はなかなかトラブル続きで、最初に見つけたライブラリがメンテされてなくて動かず、途方にくれていたら、新しい別のライブラリがあるのに気づいて、なんとか今週、動作させるところまでいけました。本当はオブジェクトを作るだけではなくオリジナルノード作成までやりたかったのですが、それはどうもGodotではサポートされていないらしくできませんでしたが。</p><p>先週の<a href="https://future-architect.github.io/articles/20201002/">CNCF連載のBuildpacks</a>も前日までうまく動作せずにぎりぎりまで粘ってなんとかやりたかったゴールにたどり着きましたが、こちらも修羅場続きでした。仕事が多少余裕があったおかげで助かりました。</p><p>駄目だった場合は、<a href="https://developers.google.com/blockly" target="_blank" rel="noopener">Blocky</a>か<a href="https://github.com/retejs/rete" target="_blank" rel="noopener">rete.js</a>あたりで操作する何かを作ることも想定していたのですが、なんとかそこまではやらずに済みました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">うぉーそっちが気になります！</p>&mdash; tenntennʕ ◔ϖ◔ʔ ==Go (@tenntenn) <a href="https://twitter.com/tenntenn/status/1314763190694109187?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 10, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>Ebitenも2.0がそろそろ出るので、そうしたら上から下までGoで作ってみたさはあります。</p><h2 id="Goでビジュアルプログラミングは実用になるのか？"><a href="#Goでビジュアルプログラミングは実用になるのか？" class="headerlink" title="Goでビジュアルプログラミングは実用になるのか？"></a>Goでビジュアルプログラミングは実用になるのか？</h2><p>GodotそのものもHTTPやらWebSocketやらWebRTCには対応していたので、このSlack通信そのものはGodotでやった方が効率は良いとは思いますが、例えば、CRUDでSQLに変換して書き込むだけのシンプルなウェブAPIなんかは、結構この手のシステムいけるんじゃないかと思っていたりします。</p><p>あとはビルドスクリプトとかバッチ処理ですね。Aが終わったらB、Bが終わったらCみたいなタスクは意外と行ける気がします。紹介しなかったのですが、Godotにはオンラインゲームのサーバー用のヘッドレスGodotというものもあり、サーバーとかバッチで扱うのもできたりもします。結構、ぽこぽこノードを作っていけば案外実用になる気がします。ビルド時間もそこそこ短いですし。CSVとかParquetのファイルをDBに突っ込むとか、集計のSQL実行とか、そんなノードがあればさらに用途が広がりそうな気がします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;あいにくの天気でしたが、GoCon仙台で発表してきました。当初は2月予定だったのが状況が厳しいということで7月にずらして公開したが、それでも状況は好転しなかったので10月に延期、とスタッフの方々はいろいろ気を揉んで大変だったと思います。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>「Go on DockerスタイルでのバックエンドAPI構築」というテーマでGo Conference’20 in Autumn SENDAIに登壇しました</title>
    <link href="https://future-architect.github.io/articles/20201010/"/>
    <id>https://future-architect.github.io/articles/20201010/</id>
    <published>2020-10-09T15:00:00.000Z</published>
    <updated>2020-10-12T00:11:50.899Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です</p><p>先日<a href="https://sendai.gocon.jp/" target="_blank" rel="noopener">Go Conference’20 in Autumn SENDAI</a>に登壇させていただきました、リモート登壇の為残念ながら現地には行きませんでした。</p><p><img src="/images/20201010/image.png" alt=""></p><p>発表資料はこちらです。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vR3m62c-Q6szPVIml4qpn-t79ZW-NNw90LuhseLrRgYEBKyCo4JkCNALodajt9kJPEtX4Tk8XP2R5RI/embed?start=false&loop=false&delayms=10000" frameborder="0" width="100%" height="569px" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p><a href="https://www.youtube.com/watch?v=rHontd51R3A" target="_blank" rel="noopener">Youtubeのアーカイブ</a>としても確認いただけます</p><h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p>発表で紹介したコードを詳しく確認できるようにまとめます。</p><h3 id="goqueryについて"><a href="#goqueryについて" class="headerlink" title="goqueryについて"></a>goqueryについて</h3><p><img src="/images/20201010/image_2.png" alt=""></p><p>goqueryはjqueryを意識した命名から想像できる通り、Find等のメソッドチェーンを繋いで直感的にスクレイピングを行う事ができます。</p><p>ページURLを与えて読み取るだけでなく、別途htmlや文字列からスクレイピングを行う事も可能です。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrapeYahoo</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  items := []Item&#123;&#125;</span><br><span class="line">  doc, err := goquery.NewDocument(url)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">""</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  selection := doc.Find(<span class="string">"ul.Products__items"</span>).Find(<span class="string">"li.Product"</span>)</span><br><span class="line">  selection.Each(<span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">    url := s.Find(<span class="string">"div.Product__image"</span>).Find(<span class="string">"a"</span>).AttrOr(<span class="string">"href"</span>, <span class="string">""</span>)</span><br><span class="line">    name := s.Find(<span class="string">"h3.Product__title"</span>).Text()</span><br><span class="line">    price := s.Find(<span class="string">"span.Product__priceValue"</span>).First().Text()</span><br><span class="line">    image := s.Find(<span class="string">"div.Product__image"</span>).Find(<span class="string">"img"</span>).AttrOr(<span class="string">"src"</span>, <span class="string">""</span>)</span><br><span class="line">    item := Item&#123; Url: url, Name: name, Price: price, Image: image &#125;</span><br><span class="line">    items = <span class="built_in">append</span>(items, item)</span><br><span class="line">  &#125;)</span><br><span class="line">  json, _ := json.Marshal(items)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">string</span>(json)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="agoutiについて"><a href="#agoutiについて" class="headerlink" title="agoutiについて"></a>agoutiについて</h3><p><img src="/images/20201010/image_3.png" alt=""></p><p>agoutiはスクレイピングを行うための補助として用いましたが、–headlessオプションを使わなければ普段お使いのウェブブラウザが自動で動く様を実際に目で確認できます。</p><p>ブラウザでのルーチンワークの自動化など夢が広がりますね。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrapeReverb</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  items := []Item&#123;&#125;</span><br><span class="line">  driver := agouti.ChromeDriver(</span><br><span class="line">    agouti.ChromeOptions(<span class="string">"args"</span>, []<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">"--headless"</span>,</span><br><span class="line">        <span class="string">"--window-size=30,120"</span>,</span><br><span class="line">        <span class="string">"--disable-gpu"</span>,                        <span class="comment">// ref: https://developers.google.com/web/updates/2017/04/headless-chrome#cli</span></span><br><span class="line">        <span class="string">"no-sandbox"</span>,                           <span class="comment">// ref: https://github.com/theintern/intern/issues/878</span></span><br><span class="line">        <span class="string">"disable-dev-shm-usage"</span>,                <span class="comment">// ref: https://qiita.com/yoshi10321/items/8b7e6ed2c2c15c3344c6</span></span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  driver.Start()</span><br><span class="line">  <span class="keyword">defer</span> driver.Stop()</span><br><span class="line">  page, _ := driver.NewPage(agouti.Browser(<span class="string">"chrome"</span>))</span><br><span class="line">  page.Navigate(url)</span><br><span class="line">  <span class="comment">// 描画の完了を待機</span></span><br><span class="line">  time.Sleep(<span class="number">7</span> * time.Second)</span><br><span class="line">  content, _ := page.HTML()</span><br><span class="line">  reader := strings.NewReader(content)</span><br><span class="line">  doc, _ := goquery.NewDocumentFromReader(reader)</span><br><span class="line">  selection := doc.Find(<span class="string">"ul.tiles.tiles--four-wide-max"</span>).Find(<span class="string">"li.tiles__tile"</span>)</span><br><span class="line">  selection.Each(<span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">    url := s.Find(<span class="string">"a"</span>).AttrOr(<span class="string">"href"</span>, <span class="string">""</span>)</span><br><span class="line">    name := s.Find(<span class="string">"h4.grid-card__title, h3.csp-square-card__title"</span>).Text()</span><br><span class="line">    price := s.Find(<span class="string">"span.price-display, div.csp-square-card__details__price"</span>).Text()</span><br><span class="line">    image := s.Find(<span class="string">"img"</span>).AttrOr(<span class="string">"src"</span>, <span class="string">""</span>)</span><br><span class="line">    item := Item&#123; Url: url, Name: name, Price: price, Image: image &#125;</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">""</span> &#123;</span><br><span class="line">      items = <span class="built_in">append</span>(items, item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  json, _ := json.Marshal(items)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">string</span>(json)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dockerファイルについて"><a href="#Dockerファイルについて" class="headerlink" title="Dockerファイルについて"></a>Dockerファイルについて</h3><p>一人で作ったのと趣味なので動けばよしの精神があり、スライドでも書いた通り更に攻める余地があると認識しています。<br>マルチステージビルドの活用などのノウハウ共有が好意的な感想を頂けたので一安心です。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.12</span>-alpine as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache git</span></span><br><span class="line"><span class="keyword">ENV</span> GOBIN=/go/bin</span><br><span class="line"><span class="keyword">ENV</span> GO111MODULE=on</span><br><span class="line"><span class="keyword">ENV</span> GOPATH=</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./go.mod ./go.sum ./main.go ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod download</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> env GOOS=linux GOARCH=amd64 GIN_MODE=release go build -o /go-api</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.7</span>.<span class="number">0</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /myapp</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /go-api .</span></span><br><span class="line"><span class="comment"># install choromedriver</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --update \</span></span><br><span class="line"><span class="bash">    wget \</span></span><br><span class="line"><span class="bash">    udev \</span></span><br><span class="line"><span class="bash">    ttf-freefont \</span></span><br><span class="line"><span class="bash">    chromium \</span></span><br><span class="line"><span class="bash">    chromium-chromedriver \</span></span><br></pre></td></tr></table></figure><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>株式会社Fusic清家史郎様、株式会社Gunosy平田智子様にもフューチャー技術ブログの存在について触れて頂けました。</p><p>我らが渋川さん及び社員一同大喜びでした、ありがとうございます。</p><img src="/images/20201010/image_4.png" class="img-middle-size">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;https://sendai.gocon.jp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go Conference’20 in Autumn SENDAI&lt;/a&gt;に登壇させていただきました、
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>TiKVに触れる</title>
    <link href="https://future-architect.github.io/articles/20201005/"/>
    <id>https://future-architect.github.io/articles/20201005/</id>
    <published>2020-10-04T15:00:00.000Z</published>
    <updated>2020-10-05T01:34:08.029Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DXグループの伊藤真彦です。<br><a href="https://future-architect.github.io/articles/20200928/">CNCF連載</a>最終回として、TiKVについて調査してみました。</p><h2 id="TiKVとは"><a href="#TiKVとは" class="headerlink" title="TiKVとは"></a>TiKVとは</h2><img src="/images/20201005/image.png" class="img-small-size"><p>TiKVは分散型、トランザクション型Key-Valueデータベースです。最近Graduatedになったので他の記事と比べると有名どころを触っているかもしれません。</p><p>Tiは金属元素のチタンを意味します、KVはそのままKey-Valueですね。チタンのように強固なKey-Valueストアといったところでしょうか。</p><p>TiKVはGoogle SpannerとApache HBaseの影響を受けて開発されています、特に外部整合性のある分散トランザクションという意味での影響を受けています。</p><h2 id="TiKVの立ち位置"><a href="#TiKVの立ち位置" class="headerlink" title="TiKVの立ち位置"></a>TiKVの立ち位置</h2><p>TiKVはあくまでもKey-Valueストアであり、NewSQLなデータベース層として使われるものではありません。<br>そのような用途はTiDBが相当します。TiDBはTiKVをストレージレイヤーとして用いて、MySQLの互換性等の機能を備えたインターフェース層を搭載した分散DBです。</p><p>しかし、TiKV単体でもトランザクションや楽観的ロックをサポートしており、TiKVで実現可能なユースケースの範囲は広いです。歴史的な背景としては、元々TiDBのコンポーネントとして開発されていたものがTiKVです。別プロダクトとして切り出されるだけあって、競合するNewSQLにカテゴライズされるプロダクトと比較すると、TiDB、TiKV間の疎結合性が極めて高いところが特徴です。</p><p>TiKV自体はアーキテクチャ的にはFoundationDB等と、ユースケース的な観点でRedis等のプロダクトと比較対象にされることがあります。また、etcdがKubernetesの内部Key-Valueストアコンポーネントとして採用されている事を考慮に入れた上で何故TiKVを採用するのか、という側面でも説明ができます。</p><p>etcdは少量のメタデータストレージとして適したプロダクトである一方、TiKV は、ペタバイト規模の展開を視野に入れ他のCNCFプロダクトを補完するような存在として開発されています。</p><h2 id="TiKVのユースケース"><a href="#TiKVのユースケース" class="headerlink" title="TiKVのユースケース"></a>TiKVのユースケース</h2><p>TiKVはビッグデータの分散処理など大掛かりなシステムの他、ユーザーからのアップロードデータを保管するバケットや、キャッシュ、アプリケーションのメタデータの保存といったユースケースで採用されているようです。</p><p>残念ながらフューチャーでの採用事例は執筆時点ではありませんでした、触ってみたいですね。</p><h2 id="TiKVのインストール"><a href="#TiKVのインストール" class="headerlink" title="TiKVのインストール"></a>TiKVのインストール</h2><p>TiKVをkubernetesクラスタとして展開するためには<a href="https://tikv.org/docs/3.0/tasks/try/tikv-operator/" target="_blank" rel="noopener">Getting Started with TiKV Operator</a>が参考になります。</p><p>サーバー、コンテナへの直接のインストールは<a href="https://tikv.org/docs/4.0/tasks/deploy/binary/" target="_blank" rel="noopener">Binary Deployment</a>を参照してください。<br>また<a href="https://tikv.org/docs/4.0/tasks/deploy/docker/" target="_blank" rel="noopener">公式dockerイメージの使用</a>、<a href="https://tikv.org/docs/4.0/tasks/deploy/ansible/" target="_blank" rel="noopener">Ansibleでの構成管理</a>も可能です。</p><p>なおTiKV公式はAnsibleでの構築を強く推奨しています。触ってみた印象としては、Ansible以外の手段はドキュメントの充実度にも大きな差がありました。安定動作や何かあった時の原因追及の難易度を考えると、Ansibleでのインストールを行ったほうが良いでしょう。</p><h2 id="TiKVの使用方法"><a href="#TiKVの使用方法" class="headerlink" title="TiKVの使用方法"></a>TiKVの使用方法</h2><p>TiKVへのアクセスはAPIを通じて行われます。実態として各種言語でのクライアントライブラリを用いて使用することになるでしょう。</p><p><a href="https://github.com/tikv/client-go" target="_blank" rel="noopener">Go</a>や<a href="https://github.com/tikv/client-rust" target="_blank" rel="noopener">Rust</a>のクライアントが提供されているあたりがモダンな印象を強めますが、<a href="https://github.com/tikv/client-java" target="_blank" rel="noopener">Java</a>や<a href="https://github.com/tikv/client-c" target="_blank" rel="noopener">C</a>のクライアントも用意されています。一番コミットが活発なのはRustでしょうか…フロンティア精神を感じます。</p><p>Goのclientで動かしてみましたが、contextからの値の取得等でgrpcとの組み合わせを前提としたような挙動が見受けられ、フルスクラッチな独自アーキテクチャへの導入よりは、マイクロサービスのお作法に従って組み込むようなユースケースに向いている印象を受けました。元々TiDBのコンポーネントとして開発された背景からそのような作りになっていると思われます。</p><h2 id="実際に触ってみた"><a href="#実際に触ってみた" class="headerlink" title="実際に触ってみた"></a>実際に触ってみた</h2><p>今回は<a href="https://tikv.org/docs/4.0/tasks/try/docker-stack/" target="_blank" rel="noopener">ドキュメント</a>を基にdocker stackを構築します。</p><p>以下の環境で検証しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OS: ubuntu18.04</span><br><span class="line">Docker: 19.03.13</span><br></pre></td></tr></table></figure><p>Docker imageはlatestですが執筆時点では下記が最新のイメージでした。</p><p><a href="https://hub.docker.com/layers/pingcap/pd/latest/images/sha256-f2c79ee1a034aab77351ee2efee99d053868a6423684d8a3f37269b7d9a03d13?context=explore" target="_blank" rel="noopener">pingcap/pd: f2c79ee1a034aab77351ee2efee99d053868a6423684d8a3f37269b7d9a03d13</a><br><a href="https://hub.docker.com/layers/pingcap/tikv/latest/images/sha256-40f2484b613e17c2bfc61fd4fe7996a82e96eb7437a930f859761756788ceea5?context=explore" target="_blank" rel="noopener">pingcap/tikv: 40f2484b613e17c2bfc61fd4fe7996a82e96eb7437a930f859761756788ceea5</a></p><p>まずは必要なファイル3種を用意します。</p><figure class="highlight yml"><figcaption><span>stack.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.7"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">x-defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line">    <span class="attr">init:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./entrypoints:/entrypoints</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SLOT:</span> <span class="string">"<span class="template-variable">&#123;&#123;.Task.Slot&#125;&#125;</span>"</span></span><br><span class="line">        <span class="attr">NAME:</span> <span class="string">"<span class="template-variable">&#123;&#123;.Task.Name&#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">        <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">restart_policy:</span></span><br><span class="line">            <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">            <span class="attr">delay:</span> <span class="string">5s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">pd:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">pingcap/pd</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">"<span class="template-variable">&#123;&#123;.Task.Name&#125;&#125;</span>.tikv"</span></span><br><span class="line">        <span class="attr">init:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="attr">tikv:</span></span><br><span class="line">                <span class="attr">aliases:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">pd.tikv</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2379:2379"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2380:2380"</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">/entrypoints/pd.sh</span></span><br><span class="line">    <span class="attr">tikv:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">pingcap/tikv</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">"<span class="template-variable">&#123;&#123;.Task.Name&#125;&#125;</span>.tikv"</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="attr">tikv:</span></span><br><span class="line">                <span class="attr">aliases:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">tikv.tikv</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"20160:20160"</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">/entrypoints/tikv.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">tikv:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"tikv"</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">"overlay"</span></span><br><span class="line">        <span class="attr">attachable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>entrypoints/pd.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$SLOT</span> = 1 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">exec</span> ./pd-server \</span><br><span class="line">        --name <span class="variable">$NAME</span> \</span><br><span class="line">        --client-urls http://0.0.0.0:2379 \</span><br><span class="line">        --peer-urls http://0.0.0.0:2380 \</span><br><span class="line">        --advertise-client-urls http://`cat /etc/hostname`:2379 \</span><br><span class="line">        --advertise-peer-urls http://`cat /etc/hostname`:2380</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exec</span> ./pd-server \</span><br><span class="line">        --name <span class="variable">$NAME</span> \</span><br><span class="line">        --client-urls http://0.0.0.0:2379 \</span><br><span class="line">        --peer-urls http://0.0.0.0:2380 \</span><br><span class="line">        --advertise-client-urls http://`cat /etc/hostname`:2379 \</span><br><span class="line">        --advertise-peer-urls http://`cat /etc/hostname`:2380 \</span><br><span class="line">        --join http://pd.tikv:2379</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>entrypoints/tikv.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> ./tikv-server \</span><br><span class="line">    --addr 0.0.0.0:20160 \</span><br><span class="line">    --status-addr 0.0.0.0:20180 \</span><br><span class="line">    --advertise-addr `cat /etc/hostname`:20160 \</span><br><span class="line">    --pd-endpoints pd.tikv:2379</span><br></pre></td></tr></table></figure><p>ファイルを設置したら構築コマンド、起動コマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy --compose-file stack.yml tikv</span><br><span class="line">docker service scale tikv_pd=1 tikv_tikv=1</span><br></pre></td></tr></table></figure><p>curlで挙動を確認すると、立ち上がっていることが確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:2379/pd/api/v1/stores</span><br></pre></td></tr></table></figure><p><img src="/images/20201005/image_2.png" alt=""></p><p>dockerコマンドで簡単にスケーリングすることが可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale tikv_pd=3 tikv_tikv=3</span><br></pre></td></tr></table></figure><p>上記コマンドを実行するとコンテナがビルドされ、apiで確認できるインスタンスの数(count)が3になりました。</p><p><img src="/images/20201005/image_3.png" alt=""></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>TiKVの選定の参考となる資料、基本的なユースケース、導入方法をまとめてみました。</p><p>強いて欠点を上げると非常に低いレイテンシでの読み書きへの対応ができていない点が公式FAQにも書いてありますが、アーキテクチャがクリーンである点、完成度の高さでGraduatedに昇格するだけの魅力を持っているのかなと感じられました。</p><p>しかしながら公式ドキュメントやその他情報の充実度などの都合で使用難易度は高めな印象でした、この辺りはGuraduatedから日が浅い事を考えると仕方がないかなと感じる所です、個人的には今後ハウツー系記事が増えていくなど盛り上がっていくことを期待しています。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIG DXグループの伊藤真彦です。&lt;br&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200928/&quot;&gt;CNCF連載&lt;/a&gt;最終回として、TiKVについて調査してみました。&lt;/p&gt;
&lt;h2 id=&quot;TiKV
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="CloudNative" scheme="https://future-architect.github.io/tags/CloudNative/"/>
    
  </entry>
  
  <entry>
    <title>Buildpacksのビルダーをスクラッチから作ってみる</title>
    <link href="https://future-architect.github.io/articles/20201002/"/>
    <id>https://future-architect.github.io/articles/20201002/</id>
    <published>2020-10-01T15:00:00.000Z</published>
    <updated>2020-10-02T02:31:43.389Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201002/buildpacks-horizontal-color.png" alt=""></p><p>TIGの渋川です。</p><p><a href="https://future-architect.github.io/articles/20200928/">CNCF連載</a>の第4回は、CNCFのSandboxプロジェクトのBuildpacksについて紹介します。</p><ul><li><a href="https://buildpacks.io" target="_blank" rel="noopener">https://buildpacks.io</a></li></ul><h1 id="Buildpacksとは"><a href="#Buildpacksとは" class="headerlink" title="Buildpacksとは"></a>Buildpacksとは</h1><p>Herokuがオリジナルで作ったビルドツールです。HerokuのオリジナルはHerokuのプラットフォーム用のビルドツールだったと思いますが（使ったことはない）、CNCF版はコンテナイメージを作成します。オリジナル版とはいろいろ違いがあり、区別をつけるためにCloud Native Buildpacks（略してCNB）と呼称されているようです。</p><p>ツールの方針としては、ビルド設定ファイルのようなものを作らなくても（実行情報のみを書いたファイル、project.tomlは書ける）ソースコードを与えるだけで、Dockerfileなどを使わずにDockerimageが作れます。</p><p>使い方は簡単で、作業フォルダで次のコマンドでDockerイメージができてしまうのです。デフォルトで利用するビルダーはあらかじめ設定できるので、そうなるともっと短くコマンドを回せます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pack build [イメージ名] --builder [ビルダーイメージ名]</span><br></pre></td></tr></table></figure><p>BuildpacksはGCPのGoogle App Engine、Cloud Functions、Cloud Runのビルドでも使われているようです。</p><ul><li><a href="https://github.com/GoogleCloudPlatform/buildpacks" target="_blank" rel="noopener">https://github.com/GoogleCloudPlatform/buildpacks</a></li></ul><p>Cloud Functionsなどはランタイムの種類はオプションで設定しますが、本来はそういうことをしなくても、ソースコードを見てマッチするビルド方法を自分で探し出してイメージを作成できるポテンシャルはあります。</p><p>デフォルトで提供されているビルダーを使ってイメージを作るだけでは大した説明にならないので、いっそのこと自分のビルダーを作ってみようと思います。</p><h2 id="Buildpacksの構造"><a href="#Buildpacksの構造" class="headerlink" title="Buildpacksの構造"></a>Buildpacksの構造</h2><p>ユーザーがイメージ作成時に指定するのは「ビルダー」です。ビルダーにはBuildpackがいくつか含まれます。</p><p>Buildpackは、現在のワークフォルダが自分のタスクと関係あるのかを確認し(detect)、関係がある場合のみビルドを実行します。</p><p>その作業の土台になるのが「Stack」です。「Stack」は実行用のDockerイメージと、ビルド用のDockerイメージのペアです。普通に公開されているものではなく、少し手を加える必要があります。Dockerfileで作ってもいいです。GoogleはBazelを使っているようです。</p><p><img src="/images/20201002/Screen_Shot_2020-10-02_at_9.11.57.png" alt=""></p><p>ビルダーを作るにはこれらの構成要素を1つずつ作っていくことになります。</p><h2 id="物理配置"><a href="#物理配置" class="headerlink" title="物理配置"></a>物理配置</h2><p>なお、これは論理的な構成要素であって、実際はどれもDockerイメージです。Buildpackはファイルにしてビルダーイメージに含めることもできますが、それぞれのBuildpackをDockerイメージにしてもいけます（今回の作例は全部ファイル化しています）。最低限、Stackのイメージ2つとビルダーのイメージの3つのDockerイメージとなります。</p><p>ビルダーとStackは1:1ですが、BuildpackはどのStackに対しての適用するか、と設定ファイルに書きますが、複数のStackを指定できるので、ビルダーとBuildpackは1:Nではなく、N:Mとなり、distroless用、debian-slim用、debian用、alpine用などの複数のビルダーで共有できます。</p><p>ビルダーの設定ファイル内でのStackやBuildpackの指定時や、ビルド時のビルダーの指定はローカルのDockerにインストール済みのイメージでも良いですし、Docker HubやGCR、ECRなどのコンテナレジストリでもいけます。チーム内で共有するときはチームで共有するレジストリに入れてあげてもいいし、チームメンバーが各ローカルでビルドしても良いです。Dockerfileを配るか、アップロードしたイメージを使ってもらうか、というのと同じです。今回はすべてローカルでビルドして使っているのでコンテナレジストリにはpushしていません。</p><h2 id="実行イメージの構造"><a href="#実行イメージの構造" class="headerlink" title="実行イメージの構造"></a>実行イメージの構造</h2><p>Buildpacksを使って作った実行イメージですが、</p><ul><li><code>/workspace</code>というフォルダにアプリケーションのファイル一式（packコマンドを実行したときのカレントフォルダの内容）が格納される。</li><li><code>/layers/(Buildpack名)/</code>なフォルダにレイヤーが保存される。各Buildpackは自由にレイヤーを増やすことができる</li></ul><p>複数のBuildpackが検知して実行すると、複数のレイヤーが保存されると思われます。また、1つのBuildpackの中に複数の成果物（実行ファイル==タイプ）を含めることが可能ですが、実行できるコマンドは1つだけです。</p><p>これは、例えばフロントエンドをビルドしたファイルを入れて、PythonとかGoでAPIサーバーを起動して配信する、みたいなことが簡単にできますし、複数のバッチのプログラムが含まれるイメージを1つ作ってデプロイし、ECS Run Taskのオプションで起動するバッチを切り替える、みたいなことが簡単にできそうです。</p><h1 id="まずは空のビルダーを作る"><a href="#まずは空のビルダーを作る" class="headerlink" title="まずは空のビルダーを作る"></a>まずは空のビルダーを作る</h1><p>それではまずは空のビルダーを作ってみましょう。</p><h2 id="準備：Stackを決めてフォルダを作成"><a href="#準備：Stackを決めてフォルダを作成" class="headerlink" title="準備：Stackを決めてフォルダを作成"></a>準備：Stackを決めてフォルダを作成</h2><p>まずは実行とビルドのイメージを決定します。PythonのDebian系のイメージを使ってビルドをしてdistrolessを作成したいとします。</p><ul><li>実行: <code>gcr.io/distroless/python3</code></li><li>ビルド: <code>python:3.7-slim-buster</code></li></ul><p>設定ファイルにこの情報を書き込むのはビルダー作成時の前ですが、これを決めておかないとBuildpackも作成できないので、これを決めるのが最初になるでしょう。もう一つ、stackのIDを決めます。Javaのパッケージ名のような感じで、ユニーク性が担保できればなんでも良いのですが、ここでは次のようにしようと思います。</p><ul><li>ID: <code>io.github.future-architect.samples.debian</code> (なんでも良い)</li></ul><p>作業フォルダも作っておきます。正解は分からないですが、とりあえず次のようになる予定です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ buildpacks</span><br><span class="line">|  + (buildpackごとのフォルダ)</span><br><span class="line">|  |  + bin</span><br><span class="line">|  |  |  + build</span><br><span class="line">|  |  |  + detect</span><br><span class="line">|  |  + buildpack.toml</span><br><span class="line">|  + empty-package.toml</span><br><span class="line">+ images&#x2F;</span><br><span class="line">|  + Dockerfile.build</span><br><span class="line">|  + Dockerfile.run</span><br><span class="line">+ builder.toml</span><br></pre></td></tr></table></figure><h2 id="空のBuildpack"><a href="#空のBuildpack" class="headerlink" title="空のBuildpack"></a>空のBuildpack</h2><p>順番的にはまずはBuildpackです。既存のBuilderに対してオリジナルのBuildpackを適用することもできそうですが(stackを既存のものを指定して、pack build時に–buildpackで個別に読み込み)、理解のためにゼロから作ります。</p><p>buildpackの構成要素は4つ。bin/buildスクリプトと、bin/detectスクリプト、そしてtoml形式の設定ファイル（ファイル名は任意だが、ここではbuildpack.tomlとする）と、パッケージ化のためのtomlファイル（これもファイル名は任意だが、empty-package.tomlとする）。</p><p>detectとbuildはそれぞれ、bashスクリプトで作りました。実行イメージがDebianなんで、Pythonで書いても良いかもしれません。</p><figure class="highlight bash"><figcaption><span>buildpacks/empty/bin/detect</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Detecting Empty Buildpack"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>buildpacks/empty/bin/build</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Building Empty Buildpack"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Done"</span></span><br></pre></td></tr></table></figure><p>設定ファイルは次の通り。</p><figure class="highlight toml"><figcaption><span>buildpacks/empty/buildpack.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Buildpack API version</span></span><br><span class="line"><span class="attr">api</span> = <span class="string">"0.2"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[buildpack]</span></span><br><span class="line"><span class="attr">id</span> = <span class="string">"buildpacks/empty"</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">"0.0.1"</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"Empty Buildpack"</span></span><br><span class="line"><span class="attr">homepage</span> = <span class="string">"https://github.com/future-architect/"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[stacks]]</span></span><br><span class="line"><span class="attr">id</span> = <span class="string">"io.github.future-architect.samples.debian"</span></span><br></pre></td></tr></table></figure><p>パッケージのURLというのは、URLでもフォルダでも良いです。いまはローカルフォルダで作業しているので相対パスを書きます。</p><figure class="highlight toml"><figcaption><span>buildpacks/empty-package.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[buildpack]</span></span><br><span class="line"><span class="attr">uri</span> = <span class="string">"empty/"</span></span><br></pre></td></tr></table></figure><p>buildpackのパッケージ、.cnbファイルを作成します。ここではファイルに書き出していますが、DockerイメージにしてBuilderから利用させることもできるようです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pushd</span> buildpacks</span><br><span class="line">$ pack package-buildpack empty.cnb --config ./empty-package.toml --format file</span><br><span class="line">$ <span class="built_in">popd</span></span><br></pre></td></tr></table></figure><h2 id="イメージの作成"><a href="#イメージの作成" class="headerlink" title="イメージの作成"></a>イメージの作成</h2><p>Buildpackのstackは既存のDockerhubのイメージそのままではダメで、Stackの印をつける必要があります。<a href="https://buildpacks.io/docs/concepts/components/stack/" target="_blank" rel="noopener">ここ</a>に書かれているように、実行用イメージはラベルでstackのIDを、ビルド用のイメージは環境変数でstackのIDとユーザーとグループのIDを指定します。rootユーザーではエラーになるのでユーザーを作る必要があります。</p><figure class="highlight dockerfile"><figcaption><span>images/Dockerfile.run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> gcr.io/distroless/python3-debian10</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> io.buildpacks.stack.id=<span class="string">"io.github.future-architect.samples.debian"</span></span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><figcaption><span>images/Dockerfile.build</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim-buster</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> io.buildpacks.stack.id=<span class="string">"io.github.future-architect.samples.debian"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> addgroup --gid 1000 builder</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd -ms /bin/bash -u 1000 -g 1000 builder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home/builder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> CNB_STACK_ID=<span class="string">"io.github.future-architect.samples.debian"</span></span><br><span class="line"><span class="keyword">ENV</span> CNB_USER_ID=<span class="string">"1000"</span></span><br><span class="line"><span class="keyword">ENV</span> CNB_GROUP_ID=<span class="string">"1000"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pushd</span> images</span><br><span class="line">$ docker build -t distroless:python -f ./Dockerfile.run .</span><br><span class="line">$ docker build -t distroless:python-builder -f ./Dockerfile.build .</span><br><span class="line">$ <span class="built_in">popd</span></span><br></pre></td></tr></table></figure><h2 id="ビルダーの作成"><a href="#ビルダーの作成" class="headerlink" title="ビルダーの作成"></a>ビルダーの作成</h2><p>ようやくここまできました。といっても何もしないビルダーですが。builderはdockerイメージとして作成されて、dockerのイメージリストに格納されます。一度ビルダーを作成すれば、どのフォルダからも自由に利用できます。</p><figure class="highlight toml"><figcaption><span>builder.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Buildpacks to include in builder</span></span><br><span class="line"><span class="section">[[buildpacks]]</span></span><br><span class="line"><span class="attr">uri</span> = <span class="string">"buildpacks/empty.cnb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Order used for detection</span></span><br><span class="line"><span class="section">[[order]]</span></span><br><span class="line">  <span class="section">[[order.group]]</span></span><br><span class="line">  id = "buildpacks/empty"</span><br><span class="line">  version = "0.0.1"</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stack that will be used by the builder</span></span><br><span class="line"><span class="section">[stack]</span></span><br><span class="line"><span class="attr">id</span> = <span class="string">"io.github.future-architect.samples.debian"</span></span><br><span class="line"><span class="attr">run-image</span> = <span class="string">"distroless:python"</span></span><br><span class="line"><span class="attr">build-image</span> = <span class="string">"distroless:python-builder"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pack create-builder python:distroless --config ./builder.toml</span><br><span class="line">Downloading from https://github.com/buildpacks/lifecycle/releases/download/v0.9.1/lifecycle-v0.9.1+linux.x86-64.tgz</span><br><span class="line">5.2 MB/5.2 MB </span><br><span class="line">Successfully created builder image python:distroless</span><br><span class="line">Tip: Run pack build &lt;image-name&gt; --builder python:distroless to use this builder</span><br></pre></td></tr></table></figure><p>設定した名前のイメージができていることを確認します。日付はなぜか40年前。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">python                 distroless          b0ed12f6c423        40 years ago        125MB</span><br></pre></td></tr></table></figure><h2 id="試しに実行してみる"><a href="#試しに実行してみる" class="headerlink" title="試しに実行してみる"></a>試しに実行してみる</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">% pack build empty-sample --builder python:distroless</span><br><span class="line">0.9.1: Pulling from buildpacksio/lifecycle</span><br><span class="line">Digest: sha256:53bf0e18a734e0c4071aa39b950ed8841f82936e53fb2a0df56c6aa07f9c5023</span><br><span class="line">Status: Image is up to date <span class="keyword">for</span> buildpacksio/lifecycle:0.9.1</span><br><span class="line">===&gt; DETECTING</span><br><span class="line">[detector] buildpacks/empty  0.0.1</span><br><span class="line">===&gt; ANALYZING</span><br><span class="line">[analyzer] Previous image with name <span class="string">"index.docker.io/library/empty-sample:latest"</span> not found</span><br><span class="line">===&gt; RESTORING</span><br><span class="line">===&gt; BUILDING</span><br><span class="line">[builder] ---&gt; Building Empty Buildpack</span><br><span class="line">[builder] ---&gt; Done</span><br><span class="line">===&gt; EXPORTING</span><br><span class="line">[exporter] Adding 1/1 app layer(s)</span><br><span class="line">[exporter] Adding layer <span class="string">'launcher'</span></span><br><span class="line">[exporter] Adding layer <span class="string">'config'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.lifecycle.metadata'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.build.metadata'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.project.metadata'</span></span><br><span class="line">[exporter] Warning: default process <span class="built_in">type</span> <span class="string">'web'</span> not present <span class="keyword">in</span> list []</span><br><span class="line">[exporter] *** Images (dfe5b21636ef):</span><br><span class="line">[exporter]       index.docker.io/library/empty-sample:latest</span><br><span class="line">Successfully built image empty-sample</span><br></pre></td></tr></table></figure><p>dockerコマンドでビルド結果をみてみましょう。日付はいつも40年前です。中は空なのでほぼgcr.io/distroless/python3-debian10と同じはずですが、2.4MBほど大きくなっています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">empty-sample           latest              dfe5b21636ef        40 years ago        54.6MB</span><br></pre></td></tr></table></figure><h1 id="実用的なPythonのウェブアプリ用のbuildpackを作成する"><a href="#実用的なPythonのウェブアプリ用のbuildpackを作成する" class="headerlink" title="実用的なPythonのウェブアプリ用のbuildpackを作成する"></a>実用的なPythonのウェブアプリ用のbuildpackを作成する</h1><p>一通り骨格はできたので、次に中身を作っていきます。</p><p>buildpackに最初からついているpaketo-buildpacksですが、かなり細かくビルドのステップをbuildpackに分割しています。これから作るのは習作なので、とりあえず1つのbuildpackで全部やるようにします。</p><p><a href="https://github.com/paketo-buildpacks/go/blob/main/buildpack.toml" target="_blank" rel="noopener">https://github.com/paketo-buildpacks/go/blob/main/buildpack.toml</a></p><p>知っておくべき情報は、detect/buildに渡される引数です。それぞれ、パスです。レイヤーはbuildにしかありません。</p><ul><li>レイヤー: Dockerと似ている。ファイルのセット</li><li>プラットフォーム: 環境変数などのプラットフォーム</li><li>ビルド計画: detectとbuild間の情報伝達手段</li></ul><p>レイヤーが大切で、フォルダを作成してそこに結果を書き込みます。</p><p>レイヤーはフォルダで、buildpackごとに作られます。このPythonのものだとビルド用のbuster-slimなPythonのイメージの中でビルドされますが、それの中の<code>/layers/buildpacks_python</code>というフォルダがbuildスクリプトの最初の引数で渡ってきます。これがそのbuildpackが使うレイヤーの親です。この中にフォルダーを自由に作り、レイヤーとします。</p><p>Dockerは行志向のプログラムになっていて、その行のコンテキスト（ファイル）と、Dockerのコマンドが等しければキャッシュします。Buildpackは自分でキャッシュのチェックのロジックを組む必要があります。詳細は調べきれなかったので今回はキャッシュはしていません。</p><h2 id="Buildpack作成のイテレーション"><a href="#Buildpack作成のイテレーション" class="headerlink" title="Buildpack作成のイテレーション"></a>Buildpack作成のイテレーション</h2><p>最初に空のビルダーを作りましたが、これは実は大切なことです。emptyというbuildpackでなくても、最初から作りたいbuildpackを作ってやっても良いのですが、ベースとなるビルダーが構築済みだと、アプリケーションのビルド時にbuildpackを独自にうわがいて使うことができます。いちいちビルダーをビルドし直さなくてもすばやくアプリケーションコードとビルダーの両方の調整が行えます。やたらとレイヤー化だので、ステップをわけているせいで、何度もビルドを回すのが面倒なツールが世の中増えていますが、この開発を高速に回せる使い勝手はとても良いです。ビルドツールはたいてい面倒なことが多いので・・・</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% pack build webapp --builder python:distroless --buildpack ../buildpack/python</span><br></pre></td></tr></table></figure><h2 id="Python検知コード"><a href="#Python検知コード" class="headerlink" title="Python検知コード"></a>Python検知コード</h2><p>まずは検知コード。いつものrequirements.txtがあればPythonプロジェクトとみなします。検知した結果をビルドレイヤーに渡す場合は最後の引数にファイルを書き出すことによって実現できます。このサンプルはシンプルなまにしておきます。</p><figure class="highlight bash"><figcaption><span>buildpacks/python/bin/detect</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Detecting Python Buildpack"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -f requirements.txt ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Python Buildpack"</span></span><br></pre></td></tr></table></figure><h2 id="Pythonビルドコード"><a href="#Pythonビルドコード" class="headerlink" title="Pythonビルドコード"></a>Pythonビルドコード</h2><p>ビルドの方はやや複雑です。</p><p>今回はvenvで環境を作って、それをレイヤーとしました。</p><figure class="highlight bash"><figcaption><span>buildpacks/python/bin/build</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Building by Python Buildpack"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 入力引数</span></span><br><span class="line">env_dir=<span class="variable">$2</span>/env</span><br><span class="line">layers_dir=<span class="variable">$1</span></span><br><span class="line">plan_path=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$layers_dir</span></span><br><span class="line"></span><br><span class="line">venv_layer=<span class="string">"<span class="variable">$layers_dir</span>/venv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># venvレイヤー作成</span></span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">$layers_dir</span></span><br><span class="line">python -m venv venv</span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br><span class="line"><span class="built_in">popd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># インストールして出力先に指定</span></span><br><span class="line">pip install -r requirements.txt --<span class="built_in">disable</span>-pip-version-check</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"launch = true"</span> &gt; <span class="string">"<span class="variable">$venv_layer</span>.toml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行コマンド登録</span></span><br><span class="line">cat &gt;&gt; <span class="string">"<span class="variable">$&#123;layers_dir&#125;</span>/launch.toml"</span> &lt;&lt;EOL</span><br><span class="line">[[processes]]</span><br><span class="line"><span class="built_in">type</span> = <span class="string">"web"</span></span><br><span class="line"><span class="built_in">command</span> = <span class="string">"python"</span></span><br><span class="line">args = [<span class="string">"main.py"</span>, <span class="string">"<span class="variable">$&#123;venv_layer&#125;</span>"</span>]</span><br><span class="line">direct = <span class="literal">true</span></span><br><span class="line">EOL</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Done"</span></span><br></pre></td></tr></table></figure><ul><li>まず、venvのレイヤー（自分のレイヤーのフォルダの下に作る）を作り、pip installしています</li><li>フォルダ名.tomlというファイルを作ってlaunch = trueにすると、成果物のフォルダに含まれるようになります。pip installしたファイルをイメージに入れるために作成しています。</li><li>ここでは<code>main.py</code>というファイルがあるものとして、それを実行するようにしています。実行ファイルの場所とレイヤーの場所は別のフォルダなので、引数でレイヤーのvenvのフォルダを教えるようにしました。</li></ul><p>buildpackごとにlaunch.tomlファイルを作ると、実行時のエントリーポイントとなります。typeをwebにするとデフォルトで実行されるコマンドになります。なお、distrolessは<a href="https://future-architect.github.io/articles/20200514/">シェルも何も入っていないストイックなイメージ</a>でしたね。その場合はdirect=trueにするとシェルを経由しなくなるのでdistrolessでもエラーにならなくなります。</p><p>ここではコマンドを決め打ちにしていますが、たとえばカレントフォルダにENTRYPOINTというテキストファイルを置いて、それの中を実行コマンドにする、みたいなことも自由にできます。</p><h2 id="アプリケーションコードの作成"><a href="#アプリケーションコードの作成" class="headerlink" title="アプリケーションコードの作成"></a>アプリケーションコードの作成</h2><p>それでは作ったビルダーを使ってStarletteアプリをビルドしてみます。作業フォルダを作り、まず検知に必要なrequirements.txtを作成します。作業フォルダはビルダーのフォルダとまったく別のフォルダで大丈夫です。</p><figure class="highlight plain"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">click&#x3D;&#x3D;7.1.2</span><br><span class="line">h11&#x3D;&#x3D;0.10.0</span><br><span class="line">starlette&#x3D;&#x3D;0.13.8</span><br><span class="line">uvicorn&#x3D;&#x3D;0.12.1</span><br></pre></td></tr></table></figure><p>次にアプリケーションコードです。</p><p>distrolessは<a href="https://future-architect.github.io/articles/20200514/">ライブラリの読み込み元が厳しく制約されているイメージ</a>でしたね。</p><p>Buildpacksは決まったフォルダにしかファイルを保存できません。レイヤーというフォルダを用意するのはできても、実行イメージのどこに置くかは介入できず、Buildpackが自分のルールで配置します。/rootのsite-packagesにどうしてもおきたい！というのは実現不可能です。</p><p>その後に検証したところ、siteパッケージの<code>site.addsitedir()</code>メソッドでフォルダを登録してあげれば、任意の場所からライブラリが読み込めることがわかりました。また、venvで作ったライブラリのフォルダも、別にvenvの環境に入る（activateする）ことなく、単にこの<code>addsitedir()</code>で利用できることがわかりましたので、これを使います。</p><p>最終的にできたのがこの実行ファイルです。</p><figure class="highlight py"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> site</span><br><span class="line"></span><br><span class="line">sp = os.path.join(sys.argv[<span class="number">1</span>], <span class="string">"lib"</span>, <span class="string">f"python<span class="subst">&#123;sys.version_info.major&#125;</span>.<span class="subst">&#123;sys.version_info.minor&#125;</span>"</span>, <span class="string">"site-packages"</span>)</span><br><span class="line">site.addsitedir(sp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> starlette.applications <span class="keyword">import</span> Starlette</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> PlainTextResponse</span><br><span class="line"><span class="keyword">from</span> starlette.routing <span class="keyword">import</span> Route</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">homepage</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> PlainTextResponse(<span class="string">"Homepage"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> PlainTextResponse(<span class="string">"About"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">routes = [</span><br><span class="line">    Route(<span class="string">"/"</span>, endpoint=homepage),</span><br><span class="line">    Route(<span class="string">"/about"</span>, endpoint=about),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app = Starlette(routes=routes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    uvicorn.run(<span class="string">"main:app"</span>, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8000</span>, log_level=<span class="string">"info"</span>)</span><br></pre></td></tr></table></figure><p>実用的には、uvicornworker.pyというファイル名だったら、これらの<code>site.addsitedir()</code>を呼び出す、みたいな環境差異吸収のところまでBuildpackを作り込んだ方がBuildpackの思想的には良い気がしました。</p><h2 id="アプリケーションをビルドしてみる"><a href="#アプリケーションをビルドしてみる" class="headerlink" title="アプリケーションをビルドしてみる"></a>アプリケーションをビルドしてみる</h2><p>emptyなBuildpackはもういらないので削除してしまっても良いでしょう。あとはこれでpackingして、再度ビルダーを構築します。</p><figure class="highlight toml"><figcaption><span>builder.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Buildpacks to include in builder</span></span><br><span class="line"><span class="section">[[buildpacks]]</span></span><br><span class="line"><span class="attr">uri</span> = <span class="string">"buildpacks/python.cnb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Order used for detection</span></span><br><span class="line"><span class="section">[[order]]</span></span><br><span class="line">  <span class="section">[[order.group]]</span></span><br><span class="line">  id = "buildpacks/python"</span><br><span class="line">  version = "0.0.1"</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stack that will be used by the builder</span></span><br><span class="line"><span class="section">[stack]</span></span><br><span class="line"><span class="attr">id</span> = <span class="string">"io.github.future-architect.samples.debian"</span></span><br><span class="line"><span class="attr">run-image</span> = <span class="string">"distroless:python"</span></span><br><span class="line"><span class="attr">build-image</span> = <span class="string">"distroless:python-builder"</span></span><br></pre></td></tr></table></figure><p>ビルダーの再作成が完了したらイメージを作成してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ pack build webapp --builder python:distroless</span><br><span class="line">0.9.1: Pulling from buildpacksio/lifecycle</span><br><span class="line">Digest: sha256:53bf0e18a734e0c4071aa39b950ed8841f82936e53fb2a0df56c6aa07f9c5023</span><br><span class="line">Status: Image is up to date <span class="keyword">for</span> buildpacksio/lifecycle:0.9.1</span><br><span class="line">===&gt; DETECTING</span><br><span class="line">[detector] buildpacks/python 0.0.1</span><br><span class="line">===&gt; ANALYZING</span><br><span class="line">[analyzer] Restoring metadata <span class="keyword">for</span> <span class="string">"buildpacks/python:venv"</span> from app image</span><br><span class="line">===&gt; RESTORING</span><br><span class="line">===&gt; BUILDING</span><br><span class="line">[builder] creating venv: /layers/buildpacks_python/venv</span><br><span class="line">[builder] /layers/buildpacks_python /workspace</span><br><span class="line">[builder] /workspace</span><br><span class="line">[builder] running pip install</span><br><span class="line">[builder] Collecting click==7.1.2</span><br><span class="line">[builder]   Downloading click-7.1.2-py2.py3-none-any.whl (82 kB)</span><br><span class="line">[builder] Collecting h11==0.10.0</span><br><span class="line">[builder]   Downloading h11-0.10.0-py2.py3-none-any.whl (53 kB)</span><br><span class="line">[builder] Collecting starlette==0.13.8</span><br><span class="line">[builder]   Downloading starlette-0.13.8-py3-none-any.whl (60 kB)</span><br><span class="line">[builder] Collecting uvicorn==0.12.1</span><br><span class="line">[builder]   Downloading uvicorn-0.12.1-py3-none-any.whl (44 kB)</span><br><span class="line">[builder] Collecting typing-extensions; python_version &lt; <span class="string">"3.8"</span></span><br><span class="line">[builder]   Downloading typing_extensions-3.7.4.3-py3-none-any.whl (22 kB)</span><br><span class="line">[builder] Installing collected packages: click, h11, starlette, typing-extensions, uvicorn</span><br><span class="line">[builder] Successfully installed click-7.1.2 h11-0.10.0 starlette-0.13.8 typing-extensions-3.7.4.3 uvicorn-0.12.1</span><br><span class="line">[builder] ---&gt; Python Buildpack Done</span><br><span class="line">===&gt; EXPORTING</span><br><span class="line">[exporter] Adding layer <span class="string">'buildpacks/python:venv'</span></span><br><span class="line">[exporter] Reusing 1/1 app layer(s)</span><br><span class="line">[exporter] Reusing layer <span class="string">'launcher'</span></span><br><span class="line">[exporter] Adding layer <span class="string">'config'</span></span><br><span class="line">[exporter] Reusing layer <span class="string">'process-types'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.lifecycle.metadata'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.build.metadata'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.project.metadata'</span></span><br><span class="line">[exporter] Setting default process <span class="built_in">type</span> <span class="string">'web'</span></span><br><span class="line">[exporter] *** Images (6cd718011277):</span><br><span class="line">[exporter]       index.docker.io/library/webapp:latest</span><br><span class="line">Successfully built image webapp</span><br></pre></td></tr></table></figure><p>きちんと実行もできました。めでたしめでたし。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it -p <span class="string">"8000:8000"</span> webapp                                     </span><br><span class="line">INFO:     Started server process [1]</span><br><span class="line">INFO:     Waiting <span class="keyword">for</span> application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br><span class="line">INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>デフォルトのdistroless向けのPythonのビルダーないじゃん、からはじまってBuildpackのビルダーを一通り作ってみました。</p><p>ドキュメントだと、既存のbuilderにbuildpackを足す、みたいな説明になっていました。builderはbuildpackの集合体、と見せつつ、buildpackをパッケージ化するにはビルダーが必要で、じゃあ新しい出力先Dockerイメージを指定したい場合、相互参照じゃん、と思いましたが、必要なのはIDだけだったので、ここで書いた通りの順番に取り組めばまったく新しいイメージファイルを使ったイメージが作りやすくなったかな、と思います。</p><p>ちなみに、これを書いた後に気づいたのですが、公式のチュートリアル、Pythonのbuildpackの作成だったんですね。</p><p><a href="https://buildpacks.io/docs/reference/spec/buildpack-api/" target="_blank" rel="noopener">https://buildpacks.io/docs/reference/spec/buildpack-api/</a></p><p>まあ、スタックのイメージの作成とかも含めて、まるっとビルダーを作る説明は公式を読んでも情報がたりず、ソースコードを解析しながら試したりもしました。現時点で世界で一番詳しいガイドになっているんじゃないかと思います。</p><p>今回はシェルスクリプトを使いましたが、公式のbuildpackはGoで書かれたものもあります。後から、せっかくならPythonあたりで書いてもよかったな、と思いました。いろいろ大掛かりで複雑に見えますが、引数で渡されたフォルダの中に成果物を置いて、設定ファイルを書き出すだけなので、ビルド用イメージで使える言語であれば問題なく利用できるはず。</p><p>アドバンスな使い方というと、キャッシュ周り、または公式のbuildpackのように、複数のbuildpackが連携してアーティファクトを作る、みたいな多段構成あたりですね。そのうち書くかもしれません。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201002/buildpacks-horizontal-color.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;TIGの渋川です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/a
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
      <category term="Buildpacks" scheme="https://future-architect.github.io/tags/Buildpacks/"/>
    
  </entry>
  
  <entry>
    <title>Linkerdで始めるサービスメッシュ</title>
    <link href="https://future-architect.github.io/articles/20201001/"/>
    <id>https://future-architect.github.io/articles/20201001/</id>
    <published>2020-09-30T15:00:00.000Z</published>
    <updated>2020-10-01T00:43:09.888Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201001/linkerd.png" alt=""></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの<a href="https://twitter.com/famipapamart" target="_blank" rel="noopener">村田</a>です。<a href="https://future-architect.github.io/articles/20200928/">CNCF連載</a>の第3回はLinkerdについて書いていきます。</p><h1 id="Linkerdとは"><a href="#Linkerdとは" class="headerlink" title="Linkerdとは"></a>Linkerdとは</h1><p>LinkerdはCNCFのIncubating projectsに所属しているサービスメッシュプロダクトです。Twitter社における大規模なマイクロサービス運用の知見をもとに作られたという誕生エピソードが以下のブログで語られています。</p><p><a href="https://linkerd.io/2016/02/18/linkerd-twitter-style-operability-for-microservices/" target="_blank" rel="noopener">Linkerd: Twitter-style Operability for Microservices</a></p><p>超軽量であることが特徴で、Podにinjectされるsidecar proxyはRustで実装されています。また、zero configでアプリのソースコードを全くいじることなく簡単に動作させることが可能です。</p><h1 id="Linkerdを使ってみる"><a href="#Linkerdを使ってみる" class="headerlink" title="Linkerdを使ってみる"></a>Linkerdを使ってみる</h1><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl version --short</span><br><span class="line">Client Version: v1.16.6-beta.0</span><br><span class="line">Server Version: v1.15.12-gke.20</span><br></pre></td></tr></table></figure><p>今回はGKEを使います。</p><blockquote><p>we need to ensure you have access to a Kubernetes cluster running 1.13 or later</p></blockquote><p>Linkerdを使う際にはKubernetesは1.13以上である必要があるとのことですが問題なさそうですね。</p><h2 id="Linkerd-CLIのインストール"><a href="#Linkerd-CLIのインストール" class="headerlink" title="Linkerd CLIのインストール"></a>Linkerd CLIのインストール</h2><p>Mac(macOS Mojave バージョン10.14.6)を利用しているので、 <code>brew</code> でインストールしました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew install linkerd</span><br><span class="line">$ linkerd version</span><br><span class="line">Client version: stable-2.8.1</span><br><span class="line">Server version: unavailable</span><br></pre></td></tr></table></figure><h2 id="クラスタの事前チェック"><a href="#クラスタの事前チェック" class="headerlink" title="クラスタの事前チェック"></a>クラスタの事前チェック</h2><blockquote><p>To ensure that the control plane will install correctly, the Linkerd CLI can check and validate that everything is configured correctly.</p></blockquote><p>Linkerd CLIを利用して事前にインストールの準備が完了しているか確認することができるようです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ linkerd check --pre</span><br><span class="line">kubernetes-api</span><br><span class="line">--------------</span><br><span class="line">√ can initialize the client</span><br><span class="line">√ can query the Kubernetes API</span><br><span class="line"></span><br><span class="line">kubernetes-version</span><br><span class="line">------------------</span><br><span class="line">√ is running the minimum Kubernetes API version</span><br><span class="line">√ is running the minimum kubectl version</span><br><span class="line"></span><br><span class="line">pre-kubernetes-setup</span><br><span class="line">--------------------</span><br><span class="line">√ control plane namespace does not already exist</span><br><span class="line">√ can create non-namespaced resources</span><br><span class="line">√ can create ServiceAccounts</span><br><span class="line">√ can create Services</span><br><span class="line">√ can create Deployments</span><br><span class="line">√ can create CronJobs</span><br><span class="line">√ can create ConfigMaps</span><br><span class="line">√ can create Secrets</span><br><span class="line">√ can <span class="built_in">read</span> Secrets</span><br><span class="line">√ can <span class="built_in">read</span> extension-apiserver-authentication configmap</span><br><span class="line">√ no clock skew detected</span><br><span class="line"></span><br><span class="line">pre-kubernetes-capability</span><br><span class="line">-------------------------</span><br><span class="line">√ has NET_ADMIN capability</span><br><span class="line">√ has NET_RAW capability</span><br><span class="line"></span><br><span class="line">linkerd-version</span><br><span class="line">---------------</span><br><span class="line">√ can determine the latest version</span><br><span class="line">√ cli is up-to-date</span><br><span class="line"></span><br><span class="line">Status check results are √</span><br></pre></td></tr></table></figure><p>結構丁寧にチェックされている印象です。前述した互換性のあるKubernetesバージョン等についてもこのコマンドでチェックできるので、インストール時は常に実施しておくのが良いでしょう。</p><h2 id="LinkerdをKubernetesクラスタへインストール"><a href="#LinkerdをKubernetesクラスタへインストール" class="headerlink" title="LinkerdをKubernetesクラスタへインストール"></a>LinkerdをKubernetesクラスタへインストール</h2><p>Linkerdインストール時に利用されるmanifestは以下のコマンドで作成されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ linkerd install</span><br><span class="line">---</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### Linkerd Namespace</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line">---</span><br><span class="line">kind: Namespace</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: linkerd</span><br><span class="line">  annotations:</span><br><span class="line">    linkerd.io/inject: disabled</span><br><span class="line">  labels:</span><br><span class="line">    linkerd.io/is-control-plane: <span class="string">"true"</span></span><br><span class="line">    config.linkerd.io/admission-webhooks: disabled</span><br><span class="line">    linkerd.io/control-plane-ns: linkerd</span><br><span class="line">...</span><br><span class="line">(中略)</span><br><span class="line">...</span><br><span class="line">      - configMap:</span><br><span class="line">          items:</span><br><span class="line">          - key: grafana.ini</span><br><span class="line">            path: grafana.ini</span><br><span class="line">          - key: datasources.yaml</span><br><span class="line">            path: provisioning/datasources/datasources.yaml</span><br><span class="line">          - key: dashboards.yaml</span><br><span class="line">            path: provisioning/dashboards/dashboards.yaml</span><br><span class="line">          name: linkerd-grafana-config</span><br><span class="line">        name: grafana-config</span><br><span class="line">      - emptyDir:</span><br><span class="line">          medium: Memory</span><br><span class="line">        name: linkerd-identity-end-entity</span><br></pre></td></tr></table></figure><p>筆者の手元では3,160行のmanifestが出力されました。これをapplyしていきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ linkerd install | kubectl apply -f -</span><br></pre></td></tr></table></figure><p>Linkerdのインストール状況をチェックできるコマンドが以下です。インストールコンポーネントが多いので、こういったステータスチェック用のコマンドが用意されているのはありがたい＆安心感があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$ linkerd check                                                                                                                                                      </span><br><span class="line">kubernetes-api                                                                                                                                                                    </span><br><span class="line">--------------                              </span><br><span class="line">√ can initialize the client            </span><br><span class="line">√ can query the Kubernetes API                                                                                                                                                    </span><br><span class="line">                                                                                         </span><br><span class="line">kubernetes-version                                                                       </span><br><span class="line">------------------                                                                       </span><br><span class="line">√ is running the minimum Kubernetes API version                                          </span><br><span class="line">√ is running the minimum kubectl version    </span><br><span class="line">                                                                                         </span><br><span class="line">linkerd-existence                                                                        </span><br><span class="line">-----------------                                                                        </span><br><span class="line">√ <span class="string">'linkerd-config'</span> config map exists                                                     </span><br><span class="line">√ heartbeat ServiceAccount exist                                                         </span><br><span class="line">√ control plane replica sets are ready                                                   </span><br><span class="line">√ no unschedulable pods                                                                  </span><br><span class="line">√ controller pod is running                                                              </span><br><span class="line">√ can initialize the client              </span><br><span class="line">√ can query the control plane API                                                        </span><br><span class="line">                                                                                         </span><br><span class="line">linkerd-config                            </span><br><span class="line">--------------                                                                           </span><br><span class="line">√ control plane Namespace exists                                                         </span><br><span class="line">√ control plane ClusterRoles exist      </span><br><span class="line">√ control plane ClusterRoleBindings exist                                                </span><br><span class="line">√ control plane ServiceAccounts exist                                                    </span><br><span class="line">√ control plane CustomResourceDefinitions exist                                          </span><br><span class="line">√ control plane MutatingWebhookConfigurations exist                                      </span><br><span class="line">√ control plane ValidatingWebhookConfigurations exist                                    </span><br><span class="line">√ control plane PodSecurityPolicies exist      </span><br><span class="line">√ control plane PodSecurityPolicies exist</span><br><span class="line"></span><br><span class="line">linkerd-identity</span><br><span class="line">----------------</span><br><span class="line">√ certificate config is valid</span><br><span class="line">√ trust anchors are using supported crypto algorithm</span><br><span class="line">√ trust anchors are within their validity period</span><br><span class="line">√ trust anchors are valid <span class="keyword">for</span> at least 60 days</span><br><span class="line">√ issuer cert is using supported crypto algorithm</span><br><span class="line">√ issuer cert is within its validity period</span><br><span class="line">√ issuer cert is valid <span class="keyword">for</span> at least 60 days</span><br><span class="line">√ issuer cert is issued by the trust anchor</span><br><span class="line"></span><br><span class="line">linkerd-api</span><br><span class="line">-----------</span><br><span class="line">√ control plane pods are ready</span><br><span class="line">√ control plane self-check</span><br><span class="line">√ [kubernetes] control plane can talk to Kubernetes</span><br><span class="line">√ [prometheus] control plane can talk to Prometheus</span><br><span class="line">√ tap api service is running</span><br><span class="line"></span><br><span class="line">linkerd-version</span><br><span class="line">---------------</span><br><span class="line">√ can determine the latest version</span><br><span class="line">√ cli is up-to-date</span><br><span class="line"></span><br><span class="line">control-plane-version</span><br><span class="line">---------------------</span><br><span class="line">√ control plane is up-to-date</span><br><span class="line">√ control plane and cli versions match</span><br><span class="line"></span><br><span class="line">linkerd-addons</span><br><span class="line">--------------</span><br><span class="line">√ <span class="string">'linkerd-config-addons'</span> config map exists</span><br><span class="line"></span><br><span class="line">linkerd-grafana</span><br><span class="line">---------------</span><br><span class="line">√ grafana add-on service account exists</span><br><span class="line">√ grafana add-on config map exists</span><br><span class="line">√ grafana pod is running</span><br><span class="line"></span><br><span class="line">Status check results are √</span><br></pre></td></tr></table></figure><h2 id="Linkerdダッシュボードの確認"><a href="#Linkerdダッシュボードの確認" class="headerlink" title="Linkerdダッシュボードの確認"></a>Linkerdダッシュボードの確認</h2><p><code>check</code> コマンドが通ったのでダッシュボードを見てみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ linkerd dashboard &amp;</span><br><span class="line">http://localhost:50750</span><br><span class="line">Grafana dashboard available at:</span><br><span class="line">http://localhost:50750/grafana</span><br><span class="line">Opening Linkerd dashboard <span class="keyword">in</span> the default browser</span><br></pre></td></tr></table></figure><p>画面までサクッとたどり着くことができました。 <code>Installs in seconds with zero config</code> と謳っているだけあって非常にスムーズです。</p><p><img src="/images/20201001/image.png" alt=""></p><h2 id="デモアプリを使ってLinkerdを見る"><a href="#デモアプリを使ってLinkerdを見る" class="headerlink" title="デモアプリを使ってLinkerdを見る"></a>デモアプリを使ってLinkerdを見る</h2><p>Linkerdのデモアプリとして <code>emojivoto</code> をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://run.linkerd.io/emojivoto.yml | kubectl apply -f -</span><br></pre></td></tr></table></figure><p>emojivotoのnamespaceにPodがデプロイされていることが確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get po -n emojivoto</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">emoji-58d98d997c-vmfkq     1/1     Running   0          3m14s</span><br><span class="line">vote-bot-54d5ff884-55xpf   1/1     Running   0          3m13s</span><br><span class="line">voting-7d5c4f77d-rzqg4     1/1     Running   0          3m11s</span><br><span class="line">web-7bd5fcb58b-85z9g       1/1     Running   0          3m10s</span><br></pre></td></tr></table></figure><p>実際にアプリにもアクセスしてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n emojivoto port-forward svc/web-svc 8080:80</span><br></pre></td></tr></table></figure><p><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> を開いた結果が下の画面。<br><img src="/images/20201001/image_2.png" alt=""></p><p>気に入った絵文字を選んで投票すると、リーダーボートの順位に反映されるアプリのようです。</p><p><img src="/images/20201001/image_3.png" alt=""></p><p>ちなみにドーナツの絵文字を選ぶと404エラーが返ってくるようにあえて仕込まれているようです。このあたりはさすがサービスメッシュ向けデモアプリといったところでしょうか。</p><p><img src="/images/20201001/image_4.png" alt=""></p><h2 id="Linkerdのinjection"><a href="#Linkerdのinjection" class="headerlink" title="Linkerdのinjection"></a>Linkerdのinjection</h2><p>ちなみにこのタイミングでLinkerdのダッシュボードを見ても、 <code>emojivoto</code> に関してのトラフィック情報は表示されません。Linkerdのinjectionが必要であり、 <code>Meshed</code> というカラムを見るとそれが分かります。</p><p><img src="/images/20201001/image_5.png" alt=""></p><p>以下コマンドでlinkerdのinjectionを行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get -n emojivoto deploy -o yaml \</span><br><span class="line">  | linkerd inject - \</span><br><span class="line">  | kubectl apply -f -</span><br></pre></td></tr></table></figure><p>先程 <code>emojivoto</code> のPod群を参照したときは各Podでは1つのコンテナが稼働していましたが、sidecar injectionによりPodごとに2つのコンテナが稼働していることが確認できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get po -n emojivoto</span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">emoji-64784ff78d-dcmhz      2/2     Running   0          3m10s</span><br><span class="line">vote-bot-779769dcfc-5krf6   2/2     Running   0          3m9s</span><br><span class="line">voting-784769cf6f-4sd77     2/2     Running   0          3m9s</span><br><span class="line">web-86cbd9db6c-b2sr8        2/2     Running   0          3m8s</span><br></pre></td></tr></table></figure><p>Linkerdのダッシュボードも見てみます。 <code>Meshed</code> のカラムが <code>1/1</code> となっていることが確認でき、各種メトリクスの値も連携されています。</p><p><img src="/images/20201001/image_6.png" alt=""></p><p>本当はGrafanaの画面にてPrometheus経由で取得されたメトリクスも参照したかったのですが、 いくつか試してみても見られず。。悔しいのでここは改めてリベンジします。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>サービスメッシュのプロダクトであるということで気になって触ってみましたが、とても簡単に始めることができました。</p><p>サービスメッシュと言えばCNCFのGraduated projectsであるEnvoyをベースとしたIstioの名前をよく聞きますが、Linkerdのほうがより軽量で簡単に導入できる印象を受けました。ただ、機能としてはIstioのほうが充実していそうで、実際に利用する際はしっかりとした比較検証が必要だなと感じました。</p><p>さて、明日はCNCF連載の第4回目です！ぜひお楽しみに。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20200206/">GCP連載#2 Istio on GKEではじめるサービスメッシュ</a></li><li><a href="https://future-architect.github.io/articles/20200814/">ぼくのなつやすみ5 -Knativeを知ろう-</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201001/linkerd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。T
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
      <category term="Linkerd" scheme="https://future-architect.github.io/tags/Linkerd/"/>
    
      <category term="kubernetes" scheme="https://future-architect.github.io/tags/kubernetes/"/>
    
      <category term="ServiceMesh" scheme="https://future-architect.github.io/tags/ServiceMesh/"/>
    
  </entry>
  
  <entry>
    <title>Policy as Code を実現する Open Policy Agent に憧れて。ポリシーコードでAPI仕様をLintする</title>
    <link href="https://future-architect.github.io/articles/20200930/"/>
    <id>https://future-architect.github.io/articles/20200930/</id>
    <published>2020-09-29T15:00:00.000Z</published>
    <updated>2020-10-02T07:42:57.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200930/opa-horizontal-color.png" alt=""></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニット真野です。</p><p><a href="https://future-architect.github.io/articles/20200928/">CNCF連載</a>2回目はOpen Policy Agent がテーマです。前回は伊藤さんによる、<a href="https://future-architect.github.io/articles/20200929/">k3sを知る、動かす、感じる</a>でした。</p><ul><li><a href="https://www.openpolicyagent.org/" target="_blank" rel="noopener">https://www.openpolicyagent.org/</a></li></ul><h1 id="Open-Policy-Agentとは"><a href="#Open-Policy-Agentとは" class="headerlink" title="Open Policy Agentとは"></a>Open Policy Agentとは</h1><p>Open Policy Agent（OPA）は汎用的なポリシーエンジンで、<a href="https://www.openpolicyagent.org/docs/latest/policy-language/" target="_blank" rel="noopener">Rego</a> と呼ばれるポリシー言語で定義されたルールに従って、入力がポリシーに沿っているか否かの判定を移譲させることができます。Regoで宣言的にポリシーを実装し、Policy as Code を実現できます。</p><p><img src="/images/20200930/opa.png" alt=""></p><p>OPAは汎用的というだけあって、Kubernetes上でしか動かせないと言った制約は無いです。Go言語で書かれていることもあって、普通の外部パッケージと同様に関数呼び出しができます。また、公式ドキュメントにも適用ドメインを選ばないと書かかれており、いくつかの活用例も挙げられています。</p><ul><li>どのユーザーがどのリソースにアクセスできるか</li><li>どのサブネットの出力トラフィックが許可されているか</li><li>コンテナが実行できるOS機能</li><li>システムにアクセスできる時間帯</li></ul><p>ポリシーエンジンと聞くと、なんとなくOK/NGだけ返すだけなのねと思いがちですが、OPAのAPIはクエリに対してレスポンスを返すような設計になっていて、JSONのような構造データを入出力することもできます。</p><p>2020/09/27時点で CNCF projectsの <code>Incubating</code>、バージョンは <code>v0.23.2</code>が最新でした。</p><h1 id="Policy-as-Code"><a href="#Policy-as-Code" class="headerlink" title="Policy as Code"></a>Policy as Code</h1><p>Policy as Codeの先駆けは自分が知る限り HashiCorp の <a href="https://www.hashicorp.com/sentinel" target="_blank" rel="noopener">Sentinel</a>だと認識しています。Terraformは Infrastructure as Codeを実現しますが、Sentinelのような Policy as Codeなツールと組み合わせ、インフラ構成全体のアクセスポリシーを設定することで、より安全にインフラ作成を自動化したり、不用意な破壊を防ぐことできるとされています。古いイメージを使わないといったセキュリティの観点や、あまり高すぎるインスタンスを立ち上げすぎないと言ったクラウド破産を防ぐといった使い方もよく聞きますよね。</p><ul><li><a href="https://www.publickey1.jp/blog/17/hashicorpsentinelpolicy_as_codehashiconf17.html" target="_blank" rel="noopener">HashiCorp、インフラ変更全体にまたがるアクセス権を設定する「Sentinel」発表「Policy as Code」を実現するフレームワーク。HashiConf’17 - Publickey</a></li></ul><p>Sentinelは非常に気になっていて、最近<a href="https://docs.hashicorp.com/sentinel/downloads/" target="_blank" rel="noopener">バイナリがダウンロード</a>できるぞ！と、伊藤さんに教えてもらいましたが、利用ライセンスがよく分からないため触れずでした。（ご存知の方は教えて下さい）</p><p>Sentinelと同様にOpen Policy AgentはPolicy as Codeを掲げています。個人的にはチーム開発において大小様々なポリシーが明示的にも暗黙的にも存在するため、これをポリシーコード化することで、良い成果を生み出せるのではと期待しています。</p><p>今回は後で記載している通り、コーディング規約も一種のポリシーとみなして、Open API Spec（Swagger）をLinter的にチェックするツールを題材に、OPAを用いて開発してみたいと思います。</p><h1 id="Rego概要"><a href="#Rego概要" class="headerlink" title="Rego概要"></a>Rego概要</h1><p>RegoはDatalogというクエリ言語にインスパイアされて開発された言語です。Datalogは聞き慣れないですが、Prologの流れを組む言語です。RegoはDatalogを拡張してJSONのような構造化モデルに対応させたようです。</p><p>基本的な文法は<a href="https://www.openpolicyagent.org/docs/latest/policy-language/" target="_blank" rel="noopener">こちら</a>にまとめられています。</p><p><a href="https://play.openpolicyagent.org/" target="_blank" rel="noopener">Rego Playground</a>というサイトがあり、簡単に動作検証できます。何はともあれ色々触ってみるのが良いと思います。</p><p>見たまんまですが、画像の左側がRegoエディタ、右枠のINPUTが入力、DATAがRegoで参照する外部データ、OUTPUTがEvaluateボタンを押した後の実行結果です。<br>ご覧のように入力も出力も構造化データ（JSON）なのがよく分かります。</p><p><img src="/images/20200930/image.png" alt=""></p><p>公式ドキュメントでは以下3つの例が載っていました。</p><ul><li><a href="https://play.openpolicyagent.org/p/ikesWCFIH8" target="_blank" rel="noopener">https://play.openpolicyagent.org/p/ikesWCFIH8</a></li><li><a href="https://play.openpolicyagent.org/p/DqXNKeLm20" target="_blank" rel="noopener">https://play.openpolicyagent.org/p/DqXNKeLm20</a></li><li><a href="https://play.openpolicyagent.org/p/qUkvgJRpIU" target="_blank" rel="noopener">https://play.openpolicyagent.org/p/qUkvgJRpIU</a></li></ul><p>PlaygroudのExamplesをクリックすると、他にも色々な例が載っています。</p><p><img src="/images/20200930/image_2.png" alt=""></p><h1 id="Regoの文法さわり"><a href="#Regoの文法さわり" class="headerlink" title="Regoの文法さわり"></a>Regoの文法さわり</h1><p>Prologをやってれば当たり前かもしれませんが、JavaやGoやJSくらいしか書いたことが無い私から見て、特徴的だなと思った<a href="https://www.openpolicyagent.org/docs/latest/policy-language/" target="_blank" rel="noopener">Regoの文法</a>のつかみを紹介します。かなり異次元だなと思いました。</p><p>まずは 変数 pi に 3.14159を代入したコードです。<code>:=</code> ですでに変数宣言済みかどうかチェックしてくれます。 <code>{&quot;pi&quot;:3.14159}</code> というJSONが実行結果です。まぁそういうものかと納得できます。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line">pi := <span class="number">3.14159</span></span><br><span class="line"></span><br><span class="line"># 実行結果</span><br><span class="line"># &#123;</span><br><span class="line">#    <span class="string">"pi"</span>: <span class="number">3.14159</span></span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>次は式が入りました。 x &gt; y が最初にきて、 x,yの代入がその後になっていて実行時エラーになりそうですが、問題なく判定できます。公式ドキュメントに <code>The order of expressions in a rule does not affect the document’s content.</code> と書かれている通り、書いた順番は影響ないようです。なるほど。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line">s &#123;</span><br><span class="line">    x &gt; y</span><br><span class="line">    y = <span class="number">41</span></span><br><span class="line">    x = <span class="number">42</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 実行結果</span><br><span class="line"># &#123;</span><br><span class="line">#    <span class="string">"s"</span>: true</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>次は <code>sites</code> というネストしたデータを使ってルール<code>r1</code>, <code>r2</code>, <code>r3</code>, <code>r4</code>, <code>r5</code>を作りました。site[_]でループを回すような処理になり、<code>r1</code> は <code>prod</code> が存在するので <code>true</code>です。<code>r2</code> は <code>false</code> となってほしいところですが、出力されません。一度も true と評価されなかったのでドキュメントが生成されないようです。<code>r3</code>のようにルールを作って、<code>r4</code>から利用すると言った事もできます。<code>r4</code> は <code>true</code> ですが <code>r5</code> は一度も <code>true</code> にならなかったので出力されません。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line">sites := [&#123;<span class="string">"name"</span>: <span class="string">"prod"</span>&#125;, &#123;<span class="string">"name"</span>: <span class="string">"smoke1"</span>&#125;, &#123;<span class="string">"name"</span>: <span class="string">"dev"</span>&#125;]</span><br><span class="line"></span><br><span class="line">r1 &#123; sites[<span class="symbol">_</span>].name == <span class="string">"prod"</span> &#125;</span><br><span class="line">r2 &#123; sites[<span class="symbol">_</span>].name == <span class="string">"uat"</span> &#125; # 存在しないキーを指定</span><br><span class="line"></span><br><span class="line">r3[name] &#123; name := sites[<span class="symbol">_</span>].name &#125;</span><br><span class="line">r4 &#123; r2[<span class="string">"prod"</span>] &#125;</span><br><span class="line">r5 &#123; r2[<span class="string">"local"</span>] &#125;  # 存在しないキーを指定</span><br><span class="line"></span><br><span class="line"># 実行結果(sitesは省略）</span><br><span class="line"># &#123;</span><br><span class="line">#     <span class="string">"r1"</span>: true,</span><br><span class="line">#     <span class="string">"r3"</span>: [</span><br><span class="line">#         <span class="string">"prod"</span>,</span><br><span class="line">#         <span class="string">"smoke1"</span>,</span><br><span class="line">#         <span class="string">"dev"</span></span><br><span class="line">#     ],</span><br><span class="line">#     <span class="string">"r4"</span>: true</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>次は予約語のdefaultを利用して、allowの初期値をfalseにします。</p><p>allowの宣言が2箇所にありますが、ブロック同士はOR条件になります。allowのBody内はAND条件になります。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line"># よくあるdefaultの使い方で、初期値をfalseで設定する</span><br><span class="line">default allow = false</span><br><span class="line"></span><br><span class="line"># allowのブロック同士は<span class="symbol">OR</span>条件になる</span><br><span class="line">allow &#123;</span><br><span class="line">input.attributes.request.http.method == <span class="string">"GET"</span> # 同じ<span class="symbol">Body</span>内は<span class="symbol">AND</span>条件になる</span><br><span class="line">input.attributes.request.http.path == <span class="string">"/"</span>     # 同じ<span class="symbol">Body</span>内は<span class="symbol">AND</span>条件になる</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># allowのブロック同士は<span class="symbol">OR</span>条件になる</span><br><span class="line">allow &#123;</span><br><span class="line">input.attributes.request.http.headers.authorization == <span class="string">"Basic charlie"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のルールに、以下の入力1.jsonで評価すると、<code>{&quot;allow&quot;: true}</code> になります。１つ目のallowが <code>true</code> になるためです。</p><figure class="highlight json"><figcaption><span>入力1.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"attributes"</span>: &#123;</span><br><span class="line">        <span class="attr">"request"</span>: &#123;</span><br><span class="line">            <span class="attr">"http"</span>: &#123;</span><br><span class="line">                <span class="attr">"headers"</span>: &#123;</span><br><span class="line">                    <span class="attr">":authority"</span>: <span class="string">"example-app"</span>,</span><br><span class="line">                    <span class="attr">":method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">                    <span class="attr">":path"</span>: <span class="string">"/"</span>,</span><br><span class="line">                    <span class="attr">"accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">                    <span class="attr">"authorization"</span>: <span class="string">"Basic ZXZlOnBhc3N3b3Jk"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">                <span class="attr">"path"</span>: <span class="string">"/"</span>,</span><br><span class="line">                <span class="attr">"protocol"</span>: <span class="string">"HTTP/1.1"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>予約後は他にも <code>some</code>、<code>with</code>、<code>else</code> があります。使いこなせばSQLの自己結合みたいな表現もできるようですが、慣れないうちは道のりがとてつもなく長く感じます。パズルみたいで楽しいと思えた人は才能だなと思います。</p><h1 id="GoからOPAを呼ぶ"><a href="#GoからOPAを呼ぶ" class="headerlink" title="GoからOPAを呼ぶ"></a>GoからOPAを呼ぶ</h1><p>OPAは<code>github.com/open-policy-agent/opa/rego</code>パッケージを利用することで、Goから組み込みライブラリ形式で呼び出せます。</p><ul><li>参考: <a href="https://www.openpolicyagent.org/docs/latest/integration/#integrating-with-the-go-api" target="_blank" rel="noopener">https://www.openpolicyagent.org/docs/latest/integration/#integrating-with-the-go-api</a></li></ul><p>ドキュメントそのままですが、転載します。いわゆるルールは module 変数に代入しています。<code>rego.New</code>で <code>rego.Rego</code> を作成してから、<code>PrepareForEval</code> で <code>PreparedEvalQuery</code> を作成すると、<code>Eval</code> で評価できます。OPAからするとRegoはモジュールと呼ばれているので、ここの表現は慣れかなと思います。</p><p>Regoモジュールの内容は、HTTP Requestが指定のパスか、Adminだったら評価するというものです。リクエストが1つ目の条件を満たしているので、評価結果は <code>x:true</code> を取得できています。（最後のコメント部分）</p><p>全文は<a href="https://github.com/laqiiz/openpolicyagent-example/blob/master/exmaple/example.go" target="_blank" rel="noopener">こちら</a>に載せています。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/open-policy-agent/opa/rego"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">module := <span class="string">`&lt;Regoコード&gt;`</span></span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">query, err := rego.New(</span><br><span class="line">rego.Query(<span class="string">"x = data.example.authz.allow"</span>),</span><br><span class="line">rego.Module(<span class="string">"example.rego"</span>, module),</span><br><span class="line">).PrepareForEval(ctx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line"><span class="string">"path"</span>:   []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"salary"</span>, <span class="string">"bob"</span>&#125;,</span><br><span class="line"><span class="string">"subject"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"user"</span>:   <span class="string">"bob"</span>,</span><br><span class="line"><span class="string">"groups"</span>: []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"sales"</span>, <span class="string">"marketing"</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eval, err := query.Eval(ctx, rego.EvalInput(input))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, result := <span class="keyword">range</span> eval &#123;</span><br><span class="line">fmt.Printf(<span class="string">"eval: %+v\n"</span>, result) <span class="comment">// eval: &#123;Expressions:[true] Bindings:map[x:true]&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この構成を利用すれば、他の領域にも展開できそうです。</p><h1 id="Open-API-Spec（Swagger）にポリシーを適用してみる"><a href="#Open-API-Spec（Swagger）にポリシーを適用してみる" class="headerlink" title="Open API Spec（Swagger）にポリシーを適用してみる"></a>Open API Spec（Swagger）にポリシーを適用してみる</h1><p>Open API Specを用いてチームで開発する際、API定義の設定方法で揺れることは無いでしょうか？　以下のようなブログ記事が出るくらい、フューチャーでは設計の揺れを無くす努力をしています。</p><ul><li><a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a></li></ul><p>一方でこの手の規約は生み出してしまえば、チェックするのはLinterにやらせたいものです。上記の設計規約の一部をOPAで実装してみたいと思います。Open API SpecはYAML or JSONで記載するので入力としてはOPAにフィットすると思います。</p><p>とりあえずルールは上から2つにしぼり、tagsとoperationIdについてのルールを書きます。</p><ul><li>paths/tags<ul><li>1URIで１つのタグのみ定義する</li></ul></li><li>paths/operationId<ul><li>{HTTPメソッド}{機能物理名}を記載する</li><li>キャメルケース</li></ul></li></ul><h2 id="Rego設計"><a href="#Rego設計" class="headerlink" title="Rego設計"></a>Rego設計</h2><p>tagsの数=1を実現するためには<a href="https://www.openpolicyagent.org/docs/latest/policy-reference/#built-in-functions" target="_blank" rel="noopener">ビルトイン関数</a>である <code>count</code> を利用します。</p><figure class="highlight prolog"><figcaption><span>tagsの数チェック</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line">deny_tags_multiple[msg] &#123;</span><br><span class="line">    some path, method</span><br><span class="line">    count(input.paths[path][method].tags) != <span class="number">1</span>               # タグが複数設定</span><br><span class="line">    msg := sprintf(<span class="string">"path(%v) method(%v) tags must keep only one"</span>, [path, method])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deny_tags_none[msg] &#123;</span><br><span class="line">    some path, method</span><br><span class="line">    object.get(input.paths[path][method], <span class="string">"tags"</span>, <span class="string">"none"</span>) == <span class="string">"none"</span> # タグが存在しない場合</span><br><span class="line">    msg := sprintf(<span class="string">"path(%v) method(%v) tags must keep only one"</span>, [path, method])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>operationIdのcamelCaseのチェック方法は、あまり良い手じゃないですが、snake_caseでないことと、最初の1文字が小文字であることだけチェックします（単語の区切りがムズカシイので）。他にも、<code>split</code>、<code>object.get</code> など多数の組み込み関数を利用しています。</p><figure class="highlight prolog"><figcaption><span>operationIdのチェック      </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line"># アンダースコアが含まれないことをチェック                                 </span><br><span class="line">deny_opeId_snake_case[msg] &#123;</span><br><span class="line">    some path, method</span><br><span class="line">    opeId := input.paths[path][method].operationId</span><br><span class="line">    </span><br><span class="line">    count(split(opeId, <span class="string">"_"</span>)) != <span class="number">1</span>                           # snake_caseじゃないこと</span><br><span class="line">    msg := sprintf(<span class="string">"path(%v) method(%v) operationId must be camelCase: %v"</span>, [path, method, opeId])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 最初の<span class="number">1</span>文字が小文字である</span><br><span class="line">deny_opeId_not_camel_case[msg] &#123;</span><br><span class="line">    some path, method</span><br><span class="line">    opeId := input.paths[path][method].operationId</span><br><span class="line">    </span><br><span class="line">    substring(opeId, <span class="number">0</span>, <span class="number">1</span>) != lower(substring(opeId, <span class="number">0</span>, <span class="number">1</span>)) # 最初の<span class="number">1</span>文字が小文字</span><br><span class="line">    msg := sprintf(<span class="string">"path(%v) method(%v) operationId must be camelCase: %v"</span>, [path, method, opeId])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="symbol">HTTP</span>メソッドから始まっていることチェック</span><br><span class="line">deny_opeId_startwith_http_method[msg] &#123;</span><br><span class="line">    some path, method</span><br><span class="line">    opeId := input.paths[path][method].operationId</span><br><span class="line"></span><br><span class="line">    indexof(opeId, method) != <span class="number">0</span>  # <span class="symbol">HTTP</span>メソッドから始まっていない</span><br><span class="line">    msg := sprintf(<span class="string">"path(%v) method(%v) operationId must be startwith http method: %v"</span>, [path, method, opeId])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これらを1つのファイルとしてまとめて、<code>policy.rego</code> に保存しておきます。</p><h2 id="入力とする-Open-API-Spec"><a href="#入力とする-Open-API-Spec" class="headerlink" title="入力とする Open API Spec"></a>入力とする Open API Spec</h2><p>OAIのexamplesを参考に入力となる違反した定義を作成します。</p><p><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v3.0/api-with-examples.yaml" target="_blank" rel="noopener">https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v3.0/api-with-examples.yaml</a></p><figure class="highlight yml"><figcaption><span>swagger.yml(抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="string">"3.0.0"</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Simple</span> <span class="string">API</span> <span class="string">overview</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">tags:</span>                             <span class="comment"># 🔥tagsが複数</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">list_Versions_v2</span>     <span class="comment"># 🔥OperationIdがsnake_case、getから始まっていない</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">List</span> <span class="string">API</span> <span class="string">versions</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">'200':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">|-</span></span><br><span class="line">            <span class="number">200</span> <span class="string">response</span></span><br><span class="line">  <span class="string">/v2:</span></span><br><span class="line">    <span class="attr">get:</span>                                 <span class="comment"># 🔥tagsが未設定</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">GetVersionDetailsv2</span>   <span class="comment"># 🔥大文字始まり</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Show</span> <span class="string">API</span> <span class="string">version</span> <span class="string">details</span></span><br><span class="line">    <span class="attr">put:</span>                                 <span class="comment"># 🔥tagsが未設定</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">saveVersionDetailsv2</span>  <span class="comment"># 🔥putから始まっていない</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Show</span> <span class="string">API</span> <span class="string">version</span> <span class="string">details</span></span><br></pre></td></tr></table></figure><p>これを <code>input.yml</code> に保存しておきます。</p><p>これを先ほどのRegoモジュールを利用したOPA評価をGoから行います。</p><h2 id="Go実装"><a href="#Go実装" class="headerlink" title="Go実装"></a>Go実装</h2><p>先ほど定義したregoとYAMLは外部ファイルから読み込めるようにしておく。今回は雑にハードコードしています。</p><p>ほとんど公式ドキュメントに合ったコードと同じで動かせました。</p><figure class="highlight go"><figcaption><span>linter.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/goccy/go-yaml"</span></span><br><span class="line"><span class="string">"github.com/open-policy-agent/opa/rego"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is POC code</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">module, err := readFile(<span class="string">"policy.rego"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query, err := rego.New(</span><br><span class="line">rego.Query(<span class="string">"x = data"</span>),</span><br><span class="line">rego.Module(<span class="string">"policy.rego"</span>, <span class="keyword">string</span>(module)),</span><br><span class="line">).PrepareForEval(ctx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">yml, err := readFile(<span class="string">"input.yml"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := yaml.Unmarshal(yml, &amp;input); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eval, err := query.Eval(ctx, rego.EvalInput(input))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, result := <span class="keyword">range</span> eval &#123;</span><br><span class="line"><span class="keyword">for</span> _, binding := <span class="keyword">range</span> result.Bindings &#123;</span><br><span class="line">body, err := json.MarshalIndent(binding, <span class="string">""</span>, <span class="string">"  "</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">file, err := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ioutil.ReadAll(file)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全文はこちらにコミットしておきました。参考までに。<br><a href="https://github.com/laqiiz/openpolicyagent-example" target="_blank" rel="noopener">https://github.com/laqiiz/openpolicyagent-example</a></p><h2 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h2><p>さきほどのGoのプログラムを動かすと以下のJSONが出力されます！</p><p>メッセージは各ルールごとに、コメントが出せています。行番号は出力できていませんが、どのパスでどの関数なのかは指定できるようにしています。</p><p>出力結果を見ると、tagsはtagsでまとめて表示するなど、Regoのルールを束ねるなど工夫をすると、もっと扱いやすい結果が作れそうです。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test"</span>: &#123;</span><br><span class="line">    <span class="attr">"deny_opeId_not_camel_case"</span>: [</span><br><span class="line">      <span class="string">"path(/v2) method(get) operationId must be camelCase: GetVersionDetailsv2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"deny_opeId_snake_case"</span>: [</span><br><span class="line">      <span class="string">"path(/) method(get) operationId must be camelCase: list_Versions_v2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"deny_opeId_startwith_http_method"</span>: [</span><br><span class="line">      <span class="string">"path(/v2) method(get) operationId must be startwith http method: GetVersionDetailsv2"</span>,</span><br><span class="line">      <span class="string">"path(/v2) method(put) operationId must be startwith http method: saveVersionDetailsv2"</span>,</span><br><span class="line">      <span class="string">"path(/) method(get) operationId must be startwith http method: list_Versions_v2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"deny_tags_multiple"</span>: [</span><br><span class="line">      <span class="string">"path(/) method(get) tags must keep only one"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"deny_tags_none"</span>: [</span><br><span class="line">      <span class="string">"path(/v2) method(get) tags must keep only one"</span>,</span><br><span class="line">      <span class="string">"path(/v2) method(put) tags must keep only one"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><p>利用したのと同じRegoと入力を、PlaygroundでもPublishしておきました。お手軽に触ってみたい人はどうぞ。</p><p><a href="https://play.openpolicyagent.org/p/1ZhZasqT22" target="_blank" rel="noopener">https://play.openpolicyagent.org/p/1ZhZasqT22</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Open Policy Agent（OPA）は汎用的なポリシーエンジンで、Policy as Codeの実現を手伝ってくれる</li><li>OPAが利用するRego言語の文法は特徴的（だと大半の人は思うと思う）</li><li>OPAはGoから組み込みライブラリとして呼び出せるので、これを活用したLinterを開発可能</li></ul><p>長い記事を最後まで読んでいただき、ありがとうございました！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200930/opa-horizontal-color.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
      <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
      <category term="OpenPolicyAgent" scheme="https://future-architect.github.io/tags/OpenPolicyAgent/"/>
    
  </entry>
  
  <entry>
    <title>k3sを知る、動かす、感じる</title>
    <link href="https://future-architect.github.io/articles/20200929/"/>
    <id>https://future-architect.github.io/articles/20200929/</id>
    <published>2020-09-28T15:00:00.000Z</published>
    <updated>2020-10-01T01:30:28.508Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200929/k3s.png" alt=""></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXチームの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。本記事は<a href="/articles/20200928/">CNCF連載</a>の第1弾になります。</p><p>アプリケーションをコンテナ化することが主流になった昨今、エッジコンピューティングでもコンテナを利用する機会が出てきました。そのため、サーバー上でKubernetesを利用して、コンテナをオーケストレーションをするのと同じようにエッジデバイスでもコンテナを管理する機能が求められるようになってきました。</p><p>ここで、本記事では2020年の8月にCNCF入りを果たしたk3sについて触れていきます。</p><h2 id="k3sとは"><a href="#k3sとは" class="headerlink" title="k3sとは"></a>k3sとは</h2><p>k3sは元々<a href="https://rancher.com/" target="_blank" rel="noopener">Rancher Labs</a>(本社：アメリカ フロリダ州クパチーノ)で開発されていたOSSで2019年の2月に発表されました。発表当初はKubernetesの公式ディストリビューションであること、バイナリが40MB以下であることから話題にもなりました。エンタープライズでKubernetesを利用している企業が、エッジデバイスでもコンテナを利用できるようにし、さらに拡張したKubernetes as a Service(KaaS)基盤の運用・監視などを一元化することが可能になります。そのため、最適な用途としては以下が挙げられています。</p><ul><li>エッジコンピューティング</li><li>CI</li><li>ARM環境</li><li>IoT</li><li>開発環境</li><li>組み込みKubernetes</li></ul><h3 id="k3sの5つの変更"><a href="#k3sの5つの変更" class="headerlink" title="k3sの5つの変更"></a>k3sの5つの変更</h3><p>k3sの名前の由来はKubernetes(k8s)から5つの変更が入っていることに由来します。<br><img src="/images/20200929/k3s_architecture.png" alt=""><br>(引用: <a href="https://k3s.io/" target="_blank" rel="noopener">https://k3s.io/</a>)</p><h4 id="1-データストアの変更"><a href="#1-データストアの変更" class="headerlink" title="1. データストアの変更"></a>1. データストアの変更</h4><p>Kubernetesのマスターにあるデータストアはデフォルトではetcdですが、k3sではSQLiteに置き換えられています。ただ、もちろん固定ではなく、MySQL、PostgreSQL、etcdなどのデータストアも利用可能です。</p><h4 id="2-コンポーネントのシングルバイナリ化"><a href="#2-コンポーネントのシングルバイナリ化" class="headerlink" title="2. コンポーネントのシングルバイナリ化"></a>2. コンポーネントのシングルバイナリ化</h4><p>Kubernetesのコントロールプレーンが動くために必要なコンポーネントが１つのバイナリ、プロセスにまとまっています。その分、煩雑なクラスター操作(証明書の配布など)を自動化できるメリットがあります。</p><h4 id="3-外部との依存を最小化"><a href="#3-外部との依存を最小化" class="headerlink" title="3. 外部との依存を最小化"></a>3. 外部との依存を最小化</h4><p>k3sに必要な以下のパッケージをのぞいて、全て外部との依存を最小限に抑えています。</p><ul><li>containerd</li><li>Flannel</li><li>CoreDNS</li><li>ホストユーティリティ</li></ul><h4 id="4-機能の組み込み"><a href="#4-機能の組み込み" class="headerlink" title="4. 機能の組み込み"></a>4. 機能の組み込み</h4><p>k3sのベースの機能としてHelmコントローラー、Traefikイングレスコントローラーなど、k3s単体で利用できるようになっています。</p><h4 id="5-プラグインの削除"><a href="#5-プラグインの削除" class="headerlink" title="5. プラグインの削除"></a>5. プラグインの削除</h4><p>Kubernetesにはストレージや各クラウドプロバイダーへのプラグインが存在していましたが、k3sではこれらが取り除かれています。</p><p>Kubernetesからの変更点をみてみると、改めて比較的コンピューティングリソースが少ない環境でも利用できるようにしていることがわかります。</p><h2 id="いざ実際に動かしてみる"><a href="#いざ実際に動かしてみる" class="headerlink" title="いざ実際に動かしてみる"></a>いざ実際に動かしてみる</h2><p>前提の知識を得ることも大事ですが、実際に触ってみることも大事ですよね。ということで、大好きなGCPでk3sを動かしてみたいと思います。今回はk3sが動く最低限として、</p><ul><li>RAM:最小512MB</li><li>CPU:最低1CPU</li></ul><p>とされているので、Server側をn1-standard-1（vCPU x 1、メモリ 3.75 GB）、Agent側をf1-micro（vCPU x 1、メモリ 0.6 GB）で動かしてみることにします。またOSはUbuntu18.04としています。</p><h3 id="ファイアウォール"><a href="#ファイアウォール" class="headerlink" title="ファイアウォール"></a>ファイアウォール</h3><p>Serverへ外部からアクセスができるように</p><ul><li>Inbound: 0.0.0.0/0</li><li>tcp:6443</li></ul><p>で開けましょう</p><h3 id="Serverのインストール"><a href="#Serverのインストール" class="headerlink" title="Serverのインストール"></a>Serverのインストール</h3><p>インスタンス名を<code>k3s-server</code>としています。はじめにServer側のインストールを行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=<span class="string">"--disable-agent"</span> K3S_KUBECONFIG_MODE=<span class="string">"644"</span> sh -</span><br></pre></td></tr></table></figure><p>今回、agentは別のサーバーに入れるので<code>INSTALL_K3S_EXEC=&quot;--disable-agent&quot;</code>を追加、またkubeconfigを読めるようにするために<code>K3S_KUBECONFIG_MODE=&quot;644&quot;</code>を追加しています。</p><p>インストールまで済んだらagentに登録するトークンを出力しましょう</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /var/lib/rancher/k3s/server/node-token</span><br></pre></td></tr></table></figure><h3 id="Agentのインストール"><a href="#Agentのインストール" class="headerlink" title="Agentのインストール"></a>Agentのインストール</h3><p>インスタンス名を<code>k3s-agent-x</code>として立てています。Agent側は以下でインストールを行います。事前にcatしたトークン、Serverの外部IPを使うので準備してください</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sfL https://get.k3s.io | K3S_TOKEN=[server_token] K3S_URL=https://[server_external_ip]:6443 sh -</span><br></pre></td></tr></table></figure><p>ここまで来ればnode(Agent)の確認ができると思うので、Server側で確認してみましょう</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ k3s kubectl get nodes</span><br></pre></td></tr></table></figure><p>また、<code>/etc/rancher/k3s/k3s.yaml</code>配下のファイルを手元のPCに持ってくるとローカルからもnodeの確認ができます</p><figure class="highlight yaml"><figcaption><span>/etc/rancher/k3s/k3s.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">secret</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://[server_external_ip]:6443</span> <span class="comment"># ここをServerの外部IPに書き換え</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxxxxxxxxxx</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><h3 id="サンプルを動かす"><a href="#サンプルを動かす" class="headerlink" title="サンプルを動かす"></a>サンプルを動かす</h3><p>k3sクラスターを立てることができたので、簡単なサンプルを利用して、動くかみてみたいと思います。<br>今回使うサンプルは公式の<a href="https://rancher.com/learning-paths/how-to-deploy-your-application-to-kubernetes/" target="_blank" rel="noopener">Kubernetes Deployment: How to Run a Containerized Workload on a Cluster</a>から借りています。<br>はじめに、以下をapplyします。</p><figure class="highlight yaml"><figcaption><span>testdeploy.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysite</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysite</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysite</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysite</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysite</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kellygriffin/hello:v1</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>applyが完了したら、podの起動を確認して、以下のコマンドでcurlしましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it [container_name] curl localhost</span><br></pre></td></tr></table></figure><p>実行すると以下が返ってくるかと思います。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World This is Version 1 of our Application<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>次にスケールさせるためにReplicaを4にしてみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale --replicas=4 deploy/mysite</span><br></pre></td></tr></table></figure><p>スケールしていることを確認しましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">mysite-5bc4c5898d-8s448   1/1     Running   0          11m</span><br><span class="line">mysite-5bc4c5898d-5d68q   1/1     Running   0          2m11s</span><br><span class="line">mysite-5bc4c5898d-2zcpp   1/1     Running   0          3s</span><br><span class="line">mysite-5bc4c5898d-nc6pc   1/1     Running   0          3s</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>実利用がかなり浸透してきているKubernetesですが、k3sはさらに舞台を広げてくれるものだなと改めて思いました。</p><p>動かしている途中で感じたことですが、KubernetesではMasterとNodeでしたが、k3sはServerとAgentという風に呼び方を変えています。ここについては、Serverは本当にコントロールプレーンとしてサーバー上において、Agentはエッジデバイスに置くといった感じで、クラウドのみではなく、環境が異なってもクラスター管理できるのかなと感じました。別パターンとして、組み込みKubernetesであればクラスタ毎埋めることもできたりしそうですね(Agentを合わせる、別にするというオプションが取れるので)。</p><p>ここまで書いてきたk3sですが、試すのもお手軽なので、是非一度試して簡単さを実感してみてください。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://rancher.com/docs/k3s/latest/en/" target="_blank" rel="noopener">英語の公式ドキュメント</a></li><li><a href="https://www.rancher.co.jp/pdfs/K3s-eBook4Styles0507.pdf" target="_blank" rel="noopener">日本語ドキュメント</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200929/k3s.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG/D
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
      <category term="k3s" scheme="https://future-architect.github.io/tags/k3s/"/>
    
  </entry>
  
  <entry>
    <title>CNCF連載始めます</title>
    <link href="https://future-architect.github.io/articles/20200928/"/>
    <id>https://future-architect.github.io/articles/20200928/</id>
    <published>2020-09-27T15:00:00.000Z</published>
    <updated>2020-10-05T01:32:35.073Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200928/cncf-color.png" alt=""></p><p>こんにちは。技術ブログ運営の<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。</p><p>今回は、<a href="https://www.cncf.io/" target="_blank" rel="noopener">CloudNative Computing Foundation(CNCF)</a>がホストしているOSSを取り扱った連載を全6回で行います。この記事では連載のイントロとCNCFのプロジェクトについて軽く触れます。</p><h2 id="CNCFとは"><a href="#CNCFとは" class="headerlink" title="CNCFとは"></a>CNCFとは</h2><p>Cloud Native Computing Foundationの略であり、Linux Foundationのプロジェクトの1つでもあります。代表のOSSとしては、今やコンテナオーケストレーションツールのデファクトスタンダードになっているKubernetesがあり、その辺りのOSSが数多くホストされています。指針はコンテナ技術の発展としており、現在もホストするプロジェクトが増えています。</p><h2 id="プロジェクトについて"><a href="#プロジェクトについて" class="headerlink" title="プロジェクトについて"></a>プロジェクトについて</h2><p>CNCFでは大きくプロジェクトを成熟度レベル別に3つ分類しています。</p><ul><li><strong>Graduated</strong><ul><li>「成熟した」プロジェクトとして認められたものについてはGraduatedになります。ここ最近だとTiKVやHarborといったプロジェクトがGraduatedにあがりました。</li></ul></li><li><strong>Incubating</strong><ul><li>Sandboxから利用数などが増加するとIncubatingになります。よく使われているIncubatingプロジェクトではArgo CDやgRPCなどが挙げられます。</li></ul></li><li><strong>Sandbox</strong><ul><li>CNCFのプロジェクトとしては「early stage」として位置付けられています。2020/08のKubeCon EUでは、k3sが新たに入ったことが話題になりました。</li></ul></li></ul><p><img src="/images/20200928/image.png" alt=""><br><a href="https://www.cncf.io/projects/" target="_blank" rel="noopener">https://www.cncf.io/projects/</a></p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>今回は、CNCFでホストしているOSSの中から特にIncubating、Sandboxプロジェクトについて取り扱います。一部Graduatedがありますが、企画段階ではIncubatingでした。</p><p>連載は以下のメンバーで行いますので、気になる記事がありましたらぜひ読んでみてください。</p><table><thead><tr><th>日付</th><th>執筆者</th><th>取り扱うプロジェクト</th></tr></thead><tbody><tr><td>9/28</td><td>伊藤太斉</td><td>このページ</td></tr><tr><td>9/29</td><td>伊藤太斉</td><td><a href="/articles/20200929/">k3sを知る、動かす、感じる</a></td></tr><tr><td>9/30</td><td>真野隼記</td><td><a href="/articles/20200930/">Policy as Code を実現する Open Policy Agent に憧れて。ポリシーコードでAPI仕様をLintする</a></td></tr><tr><td>10/1</td><td>村田靖拓</td><td><a href="/articles/20201001/">Linkerdで始めるサービスメッシュ</a></td></tr><tr><td>10/2</td><td>澁川喜規</td><td><a href="/articles/20201002/">Buildpacksのビルダーをスクラッチから作ってみる</a></td></tr><tr><td>10/5</td><td>伊藤真彦</td><td><a href="/articles/20201005/">TiKVに触れる</a></td></tr></tbody></table><p>※正確な取り扱うプロジェクト、掲載順はそのときにより前後しますが、ご了承ください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回は社内でも取り扱いの少ない部分の連載で、触ってみた系が今回は圧倒的に多いですが、第2弾を行うときはTipsや本番運用した知見などを出せればと思いますので是非ご期待ください！</p><p>他にも<a href="https://future-architect.github.io/articles/20200908/">連載企画</a>がざくざくあります。ぜひ、気になるテーマの記事をCHECK! いただけると幸いです。</p><ul><li><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a></li><li><a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a></li><li><a href="/tags/GoCDK/">Go Cloud</a></li><li><a href="/tags/Auth0/">Auth0</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/夏休み自由研究/">夏休み自由研究</a></li><li><a href="/tags/GlyphFeeds/">GlyphFeeds連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200928/cncf-color.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;こんにちは。技術ブログ運営の&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
  </entry>
  
  <entry>
    <title>LambdaとGoを使ったサーバーレスWebAPI開発実践入門</title>
    <link href="https://future-architect.github.io/articles/20200927/"/>
    <id>https://future-architect.github.io/articles/20200927/</id>
    <published>2020-09-26T15:00:00.000Z</published>
    <updated>2020-09-28T04:23:11.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの辻です。</p><p>業務アプリケーションのビジネスロジックをサーバーレスで実装することも増えてきました。<a href="https://future-architect.github.io/articles/20200722/">AWSサービストリガによるLambda関数起動</a>の記事にもあるようにAPI GatewayとLambda関数を組み合わせてHTTPサーバを提供することも容易にできます。バックエンドのWebAPIをLambda関数で動かすユースケースがよくあるパターンです。Lambda関数とアプリケーションロジックの実装は密結合になりやすいですが、HTTPサーバで動作するように実装して、Lambda関数として組み込むと、従来のHTTPサーバを実装するノウハウを活かしつつ、サーバレスで動作するバックエンドのWebAPIを構築できます。</p><p>本記事ではGoを用いてサーバレスなWebAPIサーバをAWS上に1から構築するチュートリアルです。</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>AWS上に構築するインフラはこんな感じです。シンプル。</p><p><img src="/images/20200927/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%B9Go.png" alt=""></p><p>最初に本チュートリアルで使用しているバージョンを記載します。以下のとおりです。</p><ul><li>各種ソフトウェアバージョン</li></ul><table><thead><tr><th>#</th><th>ソフトウェア/ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td>1</td><td>AWS CLI</td><td>2.0.48</td></tr><tr><td>2</td><td>LocalStack</td><td>0.11.5</td></tr><tr><td>3</td><td>Terraform</td><td>0.13.2</td></tr></tbody></table><ul><li>Goの主要ライブラリのバージョン</li></ul><table><thead><tr><th>#</th><th>ソフトウェア/ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td>1</td><td>go-swagger/go-swagger</td><td>0.25.0</td></tr><tr><td>2</td><td>guregu/dynamo</td><td>1.19.1</td></tr></tbody></table><ul><li>LocalStackの起動</li></ul><p>ローカル開発にはDockerを使ってLocalStackを動かしていきます。LocalStackはバージョン <code>0.11.0</code> からすべてのサービスに <code>4566</code> ポートを使います。<code>0.10.x</code> 以下のバージョンと使用するポートが異なるため、古いバージョンを利用している方は注意してください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -p 4566:4566 -e SERVICES&#x3D;dynamodb -e DEFAULT_REGION&#x3D;ap-northeast-1 localstack&#x2F;localstack:0.11.5</span><br></pre></td></tr></table></figure><ul><li>AWS CLIのインストール、設定</li></ul><p>また、Lambda関数のデプロイなどに <code>aws</code> コマンドを使いますので、<a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2.html" target="_blank" rel="noopener">AWS CLI バージョン 2 のインストール</a>を参考にAWS CLIをインストールしましょう。使っているOSのインストール手順に従ってインストールしてください。</p><p>以下のように出力されれば成功です。(以下はWindowsの例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws --version</span><br><span class="line">aws-cli&#x2F;2.0.48 Python&#x2F;3.7.7 Windows&#x2F;10 exe&#x2F;AMD64</span><br></pre></td></tr></table></figure><p>CLIでAWSのリソースにアクセスできるように設定しておきましょう。デフォルトのプロファイルとして設定しています。必要に応じてプロファイル名を指定することができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws configure</span><br><span class="line">AWS Access Key ID [None]: access-key-ID</span><br><span class="line">AWS Secret Access Key [None]: secret-access-key</span><br><span class="line">Default region name [None]: ap-notrheast-1</span><br><span class="line">Default output format [None]: json</span><br></pre></td></tr></table></figure><p>テスト用にダミー用の <code>local</code> プロファイルも設定しておきましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws configure --profile local</span><br><span class="line">AWS Access Key ID [None]: dummy</span><br><span class="line">AWS Secret Access Key [None]: dummy</span><br><span class="line">Default region name [None]: ap-notrheast-1</span><br><span class="line">Default output format [None]: json</span><br></pre></td></tr></table></figure><h1 id="インフラ構築"><a href="#インフラ構築" class="headerlink" title="インフラ構築"></a>インフラ構築</h1><p>AWS上に構築するインフラはTerraformで使います。一時的な動作確認で使うリソースの場合GUIでポチポチリソースを作成しても問題ないですが、業務でインフラを構築する場合はAWS CloudFormationやTerraformを使うことが一般的です。GUIでポチポチする際に暗黙的に作成されるリソースもしっかり把握していきましょう。</p><p>Terraformに関しては</p><ul><li><a href="https://future-architect.github.io/articles/20190816/">はじめてのTerraform 0.12 ～環境構築～</a></li><li><a href="https://future-architect.github.io/articles/20190816/">はじめてのTerraform 0.12 ～実践編～</a></li></ul><p>の記事もあわせて見てみてください。その他にも技術ブログに<a href="https://future-architect.github.io/tags/Terraform/">Terraform</a>に関する記事がたくさんあります。</p><p>またHashiCorp Learnのドキュメントも参考になります。</p><ul><li><a href="https://learn.hashicorp.com/tutorials/terraform/lambda-api-gateway" target="_blank" rel="noopener">Serverless Applications with AWS Lambda and API Gateway</a></li></ul><p>Terraformは<a href="https://learn.hashicorp.com/tutorials/terraform/install-cli" target="_blank" rel="noopener">Install Terraform</a>を参考に2020年9月にリリースしたv0.13.2をインストールしておきます。v0.12.xでも問題ないです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform -v</span><br><span class="line">Terraform v0.13.2</span><br></pre></td></tr></table></figure><p>今回はローカルPCから <code>terraform</code> コマンドを実行してAWSにリソースを作っていきます。</p><p>最終的なファイル構成は以下のようになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── api_gateway_deployment.tf</span><br><span class="line">├── api_gateway_integration.tf</span><br><span class="line">├── api_gateway_method.tf</span><br><span class="line">├── api_gateway_resource.tf</span><br><span class="line">├── api_gateway_rest_api.tf</span><br><span class="line">├── assume_role</span><br><span class="line">│   └── Lambda.json</span><br><span class="line">├── dummy_function.zip</span><br><span class="line">├── dynamodb_table.tf</span><br><span class="line">├── iam_policy.tf</span><br><span class="line">├── iam_policy_document.tf</span><br><span class="line">├── iam_role.tf</span><br><span class="line">├── iam_role_policy_attachment.tf</span><br><span class="line">├── Lambda_function.tf</span><br><span class="line">├── Lambda_permission.tf</span><br><span class="line">└── provider.tf</span><br></pre></td></tr></table></figure><p>まずはプロバイダの設定をしておきます。</p><ul><li>provider.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">"aws"</span> &#123;</span><br><span class="line">  region = <span class="string">"ap-northeast-1"</span></span><br><span class="line">  <span class="built_in">alias</span> = <span class="string">"ap-northeast-1"</span></span><br><span class="line">  version = <span class="string">"&gt;= 3.7.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>provider.tf</code> を記述したら <code>terraform init</code> をしましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ terraform init</span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Finding hashicorp&#x2F;aws versions matching &quot;&gt;&#x3D; 3.7.0&quot;...</span><br><span class="line">- Installing hashicorp&#x2F;aws v3.7.0...</span><br><span class="line">- Installed hashicorp&#x2F;aws v3.7.0 (signed by HashiCorp)</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">You may now begin working with Terraform. Try running &quot;terraform plan&quot; to see</span><br><span class="line">any changes that are required for your infrastructure. All Terraform commands</span><br><span class="line">should now work.</span><br><span class="line"></span><br><span class="line">If you ever set or change modules or backend configuration for Terraform,</span><br><span class="line">rerun this command to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to do so if necessary.</span><br></pre></td></tr></table></figure><p>続いてAPI GatewayとLambda関数を実装します。まずはLambda関数とAPI Gatewayで必要なIAMを記述します。API GatewayはLambda関数を呼び出す操作、Lambda関数ではCloudWatch Logsにログを書き込む操作、DynamoDBを操作するIAMを定義します。</p><ul><li>iam_policy_document.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">data <span class="string">"aws_iam_policy_document"</span> <span class="string">"example_api_policy"</span> &#123;</span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = <span class="string">"Allow"</span></span><br><span class="line">    principals &#123;</span><br><span class="line">      <span class="built_in">type</span> = <span class="string">"*"</span></span><br><span class="line">      identifiers = [</span><br><span class="line">      <span class="string">"*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    actions = [</span><br><span class="line">      <span class="string">"execute-api:Invoke"</span></span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">"arn:aws:execute-api:ap-northeast-1:*:*/*/*"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">"aws_iam_policy_document"</span> <span class="string">"example_lambda"</span> &#123;</span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = <span class="string">"Allow"</span></span><br><span class="line">    actions = [</span><br><span class="line">      <span class="string">"logs:CreateLogGroup"</span>,</span><br><span class="line">      <span class="string">"logs:CreateLogStream"</span>,</span><br><span class="line">      <span class="string">"logs:PutLogEvents"</span></span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">    <span class="string">"arn:aws:logs:*:*:*"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のポリシードキュメントをIAMポリシーとして定義します。</p><ul><li>iam_policy.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_iam_policy"</span> <span class="string">"example_lambda"</span> &#123;</span><br><span class="line">  name   = <span class="string">"example-lambda"</span></span><br><span class="line">  policy = data.aws_iam_policy_document.example_lambda.json</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IAMロールを定義します。</p><ul><li>iam_role.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_iam_role"</span> <span class="string">"example_lambda"</span> &#123;</span><br><span class="line">  name               = <span class="string">"example-lambda"</span></span><br><span class="line">  assume_role_policy = file(<span class="string">"assume_role/lambda.json"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>信頼ポリシーは以下のようになります。</p><ul><li>assume_role/lambda.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">  <span class="attr">"Statement"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Action"</span>: <span class="string">"sts:AssumeRole"</span>,</span><br><span class="line">      <span class="attr">"Principal"</span>: &#123;</span><br><span class="line">        <span class="attr">"Service"</span>: <span class="string">"lambda.amazonaws.com"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">      <span class="attr">"Sid"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先程記述したIAMロールにIAMポリシーをアタッチします。</p><ul><li>iam_role_policy_attachment.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_iam_role_policy_attachment"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  role       = aws_iam_role.example_lambda.name</span><br><span class="line">  policy_arn = aws_iam_policy.example_lambda.arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IAMの設定は以上で完了です。</p><p>続いてAPI GatewayのRESTのリソースを作っていきましょう。先程作成したIAMポリシードキュメントを使います。</p><ul><li>api_gateway_rest_api.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_rest_api"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  name        = <span class="string">"example-api"</span></span><br><span class="line">  description = <span class="string">"example serverless api"</span></span><br><span class="line">  policy      = data.aws_iam_policy_document.example_api_policy.json</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>api_gateway_resource.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_resource"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  rest_api_id = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  parent_id   = aws_api_gateway_rest_api.example_api.root_resource_id</span><br><span class="line">  path_part   = <span class="string">"&#123;proxy+&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>APIリクエストに対する認可はなしにします。必要な場合は <code>authorization</code> パラメータを用いて設定します。</p><ul><li>api_gateway_method.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_method"</span> <span class="string">"example_api_get"</span> &#123;</span><br><span class="line">  authorization = <span class="string">"NONE"</span></span><br><span class="line">  http_method   = <span class="string">"GET"</span></span><br><span class="line">  resource_id   = aws_api_gateway_resource.example_api.id</span><br><span class="line">  rest_api_id   = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_api_gateway_method"</span> <span class="string">"example_api_post"</span> &#123;</span><br><span class="line">  authorization = <span class="string">"NONE"</span></span><br><span class="line">  http_method   = <span class="string">"POST"</span></span><br><span class="line">  resource_id   = aws_api_gateway_resource.example_api.id</span><br><span class="line">  rest_api_id   = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambdaプロキシ統合のGETリクエストを実装する場合においても <code>integration_http_method</code> パラメータは <code>POST</code> と設定する必要があります。</p><ul><li>api_gateway_integration.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_integration"</span> <span class="string">"example_api_get"</span> &#123;</span><br><span class="line">  rest_api_id             = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  resource_id             = aws_api_gateway_method.example_api_get.resource_id</span><br><span class="line">  http_method             = aws_api_gateway_method.example_api_get.http_method</span><br><span class="line">  <span class="comment"># "GET"ではなく"POST"にする必要がある</span></span><br><span class="line">  integration_http_method = <span class="string">"POST"</span></span><br><span class="line">  <span class="built_in">type</span>                    = <span class="string">"AWS_PROXY"</span></span><br><span class="line">  uri                     = aws_lambda_function.example_api.invoke_arn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_api_gateway_integration"</span> <span class="string">"example_api_post"</span> &#123;</span><br><span class="line">  rest_api_id             = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  resource_id             = aws_api_gateway_method.example_api_post.resource_id</span><br><span class="line">  http_method             = aws_api_gateway_method.example_api_post.http_method</span><br><span class="line">  integration_http_method = <span class="string">"POST"</span></span><br><span class="line">  <span class="built_in">type</span>                    = <span class="string">"AWS_PROXY"</span></span><br><span class="line">  uri                     = aws_lambda_function.example_api.invoke_arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>api_gateway_deployment.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_deployment"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_api_gateway_integration.example_api_get,</span><br><span class="line">    aws_api_gateway_integration.example_api_post,</span><br><span class="line">  ]</span><br><span class="line">  rest_api_id       = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  stage_name        = <span class="string">"test"</span></span><br><span class="line">  stage_description = <span class="string">"test stage"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GETリクエストやPOSTリクエストを呼び出したときに起動するLambda関数のリソースを定義していないため、上記のtfファイルはエラーになります。Lambda関数のリソースを作ります。</p><p>Lambda関数はアプリケーション側からデプロイできるようにTerraform側ではLambda関数の初期構築時のみ使用するダミーのzipファイルを使って構築するのがおすすめです。</p><p>Lambdaの <code>handler</code> パラメータは、ビルドして生成した実行可能なファイル名と同じである必要があります。</p><ul><li>lambda_function.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_lambda_function"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  filename      = <span class="string">"dummy_function.zip"</span></span><br><span class="line">  function_name = <span class="string">"example-api"</span></span><br><span class="line">  role          = aws_iam_role.example_lambda.arn</span><br><span class="line">  handler       = <span class="string">"lambda"</span></span><br><span class="line">  runtime       = <span class="string">"go1.x"</span></span><br><span class="line"></span><br><span class="line">  memory_size = 128</span><br><span class="line">  timeout     = 900</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda関数をAPI Gatewayから呼び出せるように明示的に許可します。</p><ul><li>lambda_permission.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_lambda_permission"</span> <span class="string">"example_apigateway_lambda"</span> &#123;</span><br><span class="line">  action        = <span class="string">"lambda:InvokeFunction"</span></span><br><span class="line">  function_name = aws_lambda_function.example_api.function_name</span><br><span class="line">  principal     = <span class="string">"apigateway.amazonaws.com"</span></span><br><span class="line"></span><br><span class="line">  source_arn = <span class="string">"<span class="variable">$&#123;aws_api_gateway_rest_api.example_api.execution_arn&#125;</span>/*/*/*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dummy_function.zip</code> はビルド可能な適当な <code>main.go</code> を <code>dummy_function</code> に格納してzip化しておきます。ファイルが存在しないとエラーになります。</p><ul><li>dummy_function/main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API GatewayとLambda関数のリソースを作成する準備が整いました。<code>terraform plan</code> <code>terraform apply</code> をしてリソースを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply</span><br><span class="line">...</span><br><span class="line">(省略)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="Goのアプリケーション開発"><a href="#Goのアプリケーション開発" class="headerlink" title="Goのアプリケーション開発"></a>Goのアプリケーション開発</h1><p>WebAPI開発です。今回はサンプルアプリケーションなのでGETとPOSTだけ対応している以下の2つのパスを用意します。</p><table><thead><tr><th>メソッド</th><th>パス</th><th>説明</th></tr></thead><tbody><tr><td>GET</td><td><code>/v1/users</code></td><td>登録されているユーザ一覧を返却します</td></tr><tr><td>POST</td><td><code>/v1/users</code></td><td>ユーザを登録します</td></tr></tbody></table><p>それでは <code>go mod init</code> として開発を始めていきましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go mod init example</span><br></pre></td></tr></table></figure><h2 id="API定義"><a href="#API定義" class="headerlink" title="API定義"></a>API定義</h2><p>GoのWebアプリケーションフレームワークはEchoやGinやchiやgo-swaggerなどいろいろありますが、今回はgo-swaggerを用いることにします。どのWebアプリケーションフレームワークを使うかはGopherの間でも意見が分かれるところなので、使い慣れたWebアプリケーションフレームがあれば、それを使うのもよしです。上記のメソッドとパスをSwaggerで記述していきます。<code>swagger.yaml</code> にすると以下のようになります。ちなみにSwaggerの書き方・規約は<a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a> の記事がオススメです。</p><details><summary>swagger.yaml</summary><div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">"2.0"</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">"1.0.0"</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">"Example app"</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">"A Example app for serverless api"</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">"localhost:18888"</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">"/v1"</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"http"</span></span><br><span class="line"><span class="attr">consumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"application/json"</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"application/json"</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">ユーザAPI</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">ユーザ一覧取得</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">getUsers</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">'200':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Success</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/users'</span></span><br><span class="line">        <span class="attr">'400':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line">        <span class="attr">'500':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">ユーザ登録</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">postUsers</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">in:</span> <span class="string">body</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">postUsers</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/user'</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">登録するユーザ情報</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">'200':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Success</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/user'</span></span><br><span class="line">        <span class="attr">'400':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line">        <span class="attr">'500':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">users:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">users</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">ユーザ一覧</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">'#/definitions/user'</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">User</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">ユーザ</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">user_id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">x-omitempty:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">ユーザID</span></span><br><span class="line">      <span class="attr">name:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">x-omitempty:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">ユーザ名</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">user_id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">name</span></span><br><span class="line">  <span class="attr">Error:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">Error</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">エラー</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">message:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">エラーメッセージ</span></span><br></pre></td></tr></table></figure></div></details><p><code>go-swagger</code> は<a href="https://goswagger.io/install.html" target="_blank" rel="noopener">Installing</a>を参考にインストールします。今回は2020/09/23現在の最新バージョンである <code>0.25.0</code> をインストールします。以下のように出力されていればOKです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ swagger version</span><br><span class="line">version: v0.25.0</span><br><span class="line">commit: f032690aab0634d97e2861a708d8fd9365ba77d2</span><br></pre></td></tr></table></figure><h2 id="データストア"><a href="#データストア" class="headerlink" title="データストア"></a>データストア</h2><p>ユーザの情報を格納するDynamoDBのテーブル名は <code>users</code> としておきます。スキーマは以下です。</p><table><thead><tr><th>論理名</th><th>物理名</th><th align="center">キー</th></tr></thead><tbody><tr><td>ユーザID</td><td>user_id</td><td align="center">ハッシュキー</td></tr><tr><td>ユーザ名</td><td>user_name</td><td align="center">-</td></tr></tbody></table><p>ついでにTerraformを用いてAWS上にリソースを作成しましょう。キャパシティはオンデマンドモードにしておきます。</p><ul><li>dynamodb_table.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_dynamodb_table"</span> <span class="string">"example_users"</span> &#123;</span><br><span class="line">  name         = <span class="string">"example-users"</span></span><br><span class="line">  billing_mode = <span class="string">"PAY_PER_REQUEST"</span></span><br><span class="line"></span><br><span class="line">  hash_key = <span class="string">"user_id"</span></span><br><span class="line"></span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">"user_id"</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">"S"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda関数の環境変数からDynamoDBのテーブル名を取得できるようにLambda関数の環境変数に追加しておきます。環境変数でDynamoDBのテーブル名を設定できるようにしておくと、ローカルでのテストする際にAWS上に構築するテーブル名と別の名前を指定でき、便利です。</p><ul><li>lambda_function.tf</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resource "aws_lambda_function" "example_api" &#123;</span><br><span class="line">  filename      = "dummy_function.zip"</span><br><span class="line">  function_name = "example-api"</span><br><span class="line">  role          = aws_iam_role.example_lambda.arn</span><br><span class="line">  handler       = "lambda"</span><br><span class="line">  runtime       = "go1.x"</span><br><span class="line"></span><br><span class="line">  memory_size = 128</span><br><span class="line">  timeout     = 900</span><br><span class="line"></span><br><span class="line"><span class="addition">+  environment &#123;</span></span><br><span class="line"><span class="addition">+    variables = &#123;</span></span><br><span class="line"><span class="addition">+      DYNAMO_TABLE_USERS: aws_dynamodb_table.example_users.name</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data "aws_iam_policy_document" "example_lambda_policy" &#123;</span><br><span class="line"><span class="addition">+  statement &#123;</span></span><br><span class="line"><span class="addition">+    effect = "Allow"</span></span><br><span class="line"><span class="addition">+    actions = [</span></span><br><span class="line"><span class="addition">+      "dynamodb:*"</span></span><br><span class="line"><span class="addition">+    ]</span></span><br><span class="line"><span class="addition">+    resources = [</span></span><br><span class="line"><span class="addition">+      "*"]</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = "Allow"</span><br><span class="line">    actions = [</span><br><span class="line">      "logs:CreateLogGroup",</span><br><span class="line">      "logs:CreateLogStream",</span><br><span class="line">      "logs:PutLogEvents"</span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">      "arn:aws:logs:*:*:*"]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新しいリソースを定義したら <code>terraform apply</code> しておきます。</p><h2 id="パッケージ構成"><a href="#パッケージ構成" class="headerlink" title="パッケージ構成"></a>パッケージ構成</h2><p>ちょっとしたLambda関数であれば <code>main.go</code> の1ファイルで良い場合もありますが、バックエンドのWebAPIを提供するとなるとそうはいかないでしょう。Goのパッケージ構成は悩みポイントの一つです。プロジェクトの規模や開発メンバのスキルセットなどにもよると思いますが、個人的にはフラットなパッケージ構成を導入することが多い気がします。<a href="https://future-architect.github.io/articles/20200528/">あなたのGoアプリ/ライブラリのパッケージ構成もっとシンプルでよくない？</a>や<a href="https://future-architect.github.io/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a>の記事を参考にしてみてください。今回は以下のようなフラットパッケージとします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Makefile                 <span class="comment"># タスク定義</span></span><br><span class="line">├── README.md</span><br><span class="line">├── cmd/lambda/main.go       <span class="comment"># Lambda関数を起動するmainファイル</span></span><br><span class="line">├── db.go                    <span class="comment"># DynamoDBの接続</span></span><br><span class="line">├── gen                      <span class="comment"># go-swaggerで自動生成するファイル</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── swagger.yaml             <span class="comment"># swagger spec</span></span><br><span class="line">├── testdata                 <span class="comment"># テスト</span></span><br><span class="line">├── user_handler.go          <span class="comment"># ハンドラの実装</span></span><br><span class="line">├── user_handler_db.go       <span class="comment"># 永続化層へのアクセスファイル</span></span><br><span class="line">└── user_handler_test.go     <span class="comment"># ハンドラのテスト</span></span><br></pre></td></tr></table></figure><p>以下のようにディレクトリを作っておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p %GOPATH%\src\github.com\d-tsuji\example</span><br><span class="line">$ <span class="built_in">cd</span> example</span><br><span class="line">$ mkdir cmd\lambda gen testdata</span><br></pre></td></tr></table></figure><h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><p>ビルドなどのタスクはMakefileに記述しておきます。</p><ul><li>Makefile</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.PHONY: deps</span><br><span class="line">deps:</span><br><span class="line">go mod download</span><br><span class="line">go mod tidy</span><br><span class="line"></span><br><span class="line">.PHONY: build</span><br><span class="line">build: deps</span><br><span class="line">GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">"-s -w"</span> -trimpath -o bin/lambda cmd/lambda/main.go</span><br><span class="line"></span><br><span class="line">.PHONY: <span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_USERS=local_users;\</span><br><span class="line">go <span class="built_in">test</span> -race -v -count=1 ./</span><br><span class="line"></span><br><span class="line">.PHONY: generate-server</span><br><span class="line">generate-server:</span><br><span class="line">rm -rf ./gen/models ./gen/restapi/operations</span><br><span class="line">swagger generate server --exclude-main -f ./swagger.yaml -t gen</span><br><span class="line"></span><br><span class="line">.PHONY: zip</span><br><span class="line">zip: build</span><br><span class="line">zip -j bin/lambda.zip bin/lambda</span><br><span class="line"></span><br><span class="line">.PHONY: deploy</span><br><span class="line">deploy: zip</span><br><span class="line">aws lambda update-function-code --region ap-northeast-1 --<span class="keyword">function</span>-name example-api --zip-file fileb://bin/lambda.zip</span><br></pre></td></tr></table></figure><p>先程作成した <code>swagger.yml</code> のAPI定義を元に <code>make generate-server</code> で <code>go-swagger</code> でコードを生成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ make generate-server</span><br><span class="line">swagger generate server --exclude-main -f ./swagger.yaml -t gen</span><br><span class="line">2020/09/15 22:17:26 validating spec C:\Users\dramt\go\src\github.com\d-tsuji\example\swagger.yaml</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">2020/09/15 22:17:27 executed template asset:serverDoc</span><br><span class="line">2020/09/15 22:17:27 Generation completed!</span><br><span class="line"></span><br><span class="line">For this generation to compile you need to have some packages <span class="keyword">in</span> your GOPATH:</span><br><span class="line"></span><br><span class="line">        * github.com/go-openapi/runtime</span><br><span class="line">        * github.com/jessevdk/go-flags</span><br><span class="line"></span><br><span class="line">You can get these now with: go get -u -f gen/...</span><br></pre></td></tr></table></figure><p><code>go-swagger</code> で生成したファイルでビルドに必要なモジュールを <code>go.mod</code> に追加します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/go-openapi/runtime</span><br><span class="line">$ go get github.com/jessevdk/go-flags</span><br></pre></td></tr></table></figure><h2 id="ハンドラ実装"><a href="#ハンドラ実装" class="headerlink" title="ハンドラ実装"></a>ハンドラ実装</h2><p>準備が整ったので、ハンドラの実装をしていきましょう。</p><p>まずは <code>db.go</code> を実装してDynamoDBに接続します。ローカルでの開発の場合は <code>4566</code> ポートで起動しているLocalStackに接続します。DynamoDBのGoのクライアントライブラリは</p><ul><li><a href="https://github.com/aws/aws-sdk-go" target="_blank" rel="noopener"><code>aws/aws-sdk-go</code></a></li><li><a href="https://github.com/guregu/dynamo" target="_blank" rel="noopener"><code>guregu/dynamo</code></a></li><li><a href="https://github.com/google/go-cloud" target="_blank" rel="noopener"><code>google/go-cloud</code></a></li></ul><p>などがあります。個人的なおすすめは <code>guregu/dynamo</code> です。本チュートリアルでは <code>guregu/dynamo</code> を利用することにします。<code>guregu/dynamo</code> の使い方については「<a href="https://future-architect.github.io/articles/20200225/">DynamoDB×Go連載#1 GoでDynamoDBでおなじみのguregu/dynamoを利用する</a>」の記事も見てみてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/guregu/dynamo</span><br></pre></td></tr></table></figure><ul><li>db.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/guregu/dynamo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">gdb    *dynamo.DB</span><br><span class="line">region <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">usersTable <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">region = os.Getenv(<span class="string">"AWS_REGION"</span>)</span><br><span class="line"></span><br><span class="line">usersTable = os.Getenv(<span class="string">"DYNAMO_TABLE_USERS"</span>)</span><br><span class="line"><span class="keyword">if</span> usersTable == <span class="string">""</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"missing env variable: DYNAMO_TABLE_USERS"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gdb = dynamo.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Region: aws.String(region),</span><br><span class="line">&#125;)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いてハンドラの実装します。まずは以下の <code>GET</code> を扱うハンドラから実装していきます。</p><table><thead><tr><th>メソッド</th><th>パス</th><th>説明</th></tr></thead><tbody><tr><td>GET</td><td><code>/v1/users</code></td><td>登録されているユーザ一覧を返却します</td></tr></tbody></table><p>DynamoDBから登録されているすべてのユーザを取得する処理を実装します。</p><p>DynamoDBとマッピングするモデルは以下です。</p><ul><li>dynamo_model.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">UserID   <span class="keyword">string</span> <span class="string">`dynamo:"user_id,hash"`</span></span><br><span class="line">UserName <span class="keyword">string</span> <span class="string">`dynamo:"user_name"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テーブルから全アイテム取得するためにScanを行います。</p><ul><li>user_handler_db.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/guregu/dynamo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scanUsers</span><span class="params">(ctx context.Context)</span> <span class="params">([]User, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> resp []User</span><br><span class="line">table := gdb.Table(usersTable)</span><br><span class="line"><span class="keyword">if</span> err := table.Scan().AllWithContext(ctx, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 0件の場合も正常とします</span></span><br><span class="line"><span class="keyword">if</span> errors.Is(err, dynamo.ErrNotFound) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いて上記を使ったハンドラを実装します。</p><ul><li>user_handler.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/models"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi/operations"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/runtime/middleware"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUsers</span><span class="params">(p operations.GetUsersParams)</span> <span class="title">middleware</span>.<span class="title">Responder</span></span> &#123;</span><br><span class="line">ctx := p.HTTPRequest.Context()</span><br><span class="line">users, err := scanUsers(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> operations.NewGetUsersInternalServerError().WithPayload(&amp;models.Error&#123;</span><br><span class="line">Message: fmt.Sprintf(<span class="string">"scan users error: %v"</span>, err),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resp models.Users</span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> users &#123;</span><br><span class="line">u := u</span><br><span class="line">resp = <span class="built_in">append</span>(resp, &amp;models.User&#123;</span><br><span class="line">UserID: &amp;u.UserID,</span><br><span class="line">Name:   &amp;u.UserName,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> operations.NewGetUsersOK().WithPayload(resp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ハンドラのテストも実装しましょう。テスト時はDynamoDBの接続先をLocalStackに上書きして、テスト用の設定にします。パッケージ構成によっては接続先の値は関数の引数で渡す、などが必要になるでしょう。</p><p>単体テストは実装の詳細をテストしないように、粒度を粗めにしておきます。ハンドラのリクエストに対して想定するJSONのレスポンスが取得できているかどうか確認します。テストファイルは <code>want_get_users_1.json</code> <code>want_get_users_2.json</code> としておきます。</p><ul><li>user_handler_test.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/models"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi/operations"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/runtime"</span></span><br><span class="line"><span class="string">"github.com/guregu/dynamo"</span></span><br><span class="line"><span class="string">"github.com/nsf/jsondiff"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">dbEndpoint := <span class="string">"http://localhost:4566"</span></span><br><span class="line">sess := session.Must(session.NewSessionWithOptions(session.Options&#123;</span><br><span class="line">Profile:           <span class="string">"local"</span>,</span><br><span class="line">SharedConfigState: session.SharedConfigEnable,</span><br><span class="line">Config: aws.Config&#123;</span><br><span class="line">Endpoint:   aws.String(dbEndpoint),</span><br><span class="line">DisableSSL: aws.Bool(<span class="literal">true</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;))</span><br><span class="line">gdb = dynamo.New(sess)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name           <span class="keyword">string</span></span><br><span class="line">input          <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span></span><br><span class="line">wantStatusCode <span class="keyword">int</span></span><br><span class="line">want           <span class="keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"複数件のユーザの取得"</span>,</span><br><span class="line">input: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">err := gdb.CreateTable(usersTable, User&#123;&#125;).Provision(<span class="number">1</span>, <span class="number">1</span>).RunWithContext(context.TODO())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"dynamo create table %s: %v"</span>, usersTable, err)</span><br><span class="line">&#125;</span><br><span class="line">inputUsers := []User&#123;&#123;UserID: <span class="string">"001"</span>, UserName: <span class="string">"gopher"</span>&#125;, &#123;UserID: <span class="string">"002"</span>, UserName: <span class="string">"rubyist"</span>&#125;&#125;</span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> inputUsers &#123;</span><br><span class="line"><span class="keyword">if</span> err := gdb.Table(usersTable).Put(u).RunWithContext(context.TODO()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"dynamo input user %v: %v"</span>, u, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">wantStatusCode: <span class="number">200</span>,</span><br><span class="line">want:           <span class="string">"./testdata/want_get_users_1.json"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"ユーザ0件"</span>,</span><br><span class="line">input: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">err := gdb.CreateTable(usersTable, User&#123;&#125;).Provision(<span class="number">1</span>, <span class="number">1</span>).RunWithContext(context.TODO())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"dynamo create table %s: %v"</span>, usersTable, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">wantStatusCode: <span class="number">200</span>,</span><br><span class="line">want:           <span class="string">"./testdata/want_get_users_2.json"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tt.input(t)</span><br><span class="line">t.Cleanup(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := gdb.Table(usersTable).DeleteTable().RunWithContext(context.TODO()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"dynamo delete table %s: %v"</span>, usersTable, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p := operations.NewGetUsersParams()</span><br><span class="line">p.HTTPRequest = httptest.NewRequest(<span class="string">"GET"</span>, <span class="string">"/v1/users"</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">resp := GetUsers(p)</span><br><span class="line"></span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line">resp.WriteResponse(w, runtime.JSONProducer())</span><br><span class="line"></span><br><span class="line">want, err := ioutil.ReadFile(tt.want)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"want file read: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> w.Result().StatusCode != tt.wantStatusCode &#123;</span><br><span class="line">t.Errorf(<span class="string">"status got %v, but want %v"</span>, w.Result().StatusCode, tt.wantStatusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opt := jsondiff.DefaultConsoleOptions()</span><br><span class="line"><span class="keyword">if</span> d, s := jsondiff.Compare(w.Body.Bytes(), want, &amp;opt); d != jsondiff.FullMatch &#123;</span><br><span class="line">t.Errorf(<span class="string">"unmatch, got=%s, want=%s, diff=%s"</span>, <span class="keyword">string</span>(w.Body.Bytes()), <span class="keyword">string</span>(want), s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>testdata/want_get_users_1.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"user_id"</span>: <span class="string">"001"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"gopher"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"user_id"</span>: <span class="string">"002"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"rubyist"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>testdata/want_get_users_2.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><p>Goのテストを実行するとPASSすることがわかります。ハンドラの実装ができました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ make <span class="built_in">test</span></span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_USERS=local_users;\</span><br><span class="line">        go <span class="built_in">test</span> -race -v -count=1 ./</span><br><span class="line">=== RUN   TestGetUsers</span><br><span class="line">=== RUN   TestGetUsers/複数件のユーザの取得</span><br><span class="line">=== RUN   TestGetUsers/ユーザ0件</span><br><span class="line">--- PASS: TestGetUsers (0.39s)</span><br><span class="line">    --- PASS: TestGetUsers/複数件のユーザの取得 (0.30s)</span><br><span class="line">    --- PASS: TestGetUsers/ユーザ0件 (0.09s)</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/example      0.428s</span><br></pre></td></tr></table></figure><p>POSTのハンドラも同様に実装・テストできますが、本チュートリアルでは省略します。本チュートリアルの内容はGitHubにコミットしてあるので、そちらを参照ください。</p><p><code>go-swagger</code> はハンドラの実装とHTTPリクエストのパスのマッピングを自動生成したファイルの中に記述します。今回の場合は <code>configure_example_app.go</code> です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This file is safe to edit. Once it exists it will not be overwritten</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> restapi</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureAPI</span><span class="params">(api *operations.ExampleAppAPI)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="comment">// configure the api here</span></span><br><span class="line">api.ServeError = errors.ServeError</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set your custom logger if needed. Default one is log.Printf</span></span><br><span class="line"><span class="comment">// Expected interface func(string, ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="comment">// api.Logger = log.Printf</span></span><br><span class="line"></span><br><span class="line">api.JSONConsumer = runtime.JSONConsumer()</span><br><span class="line"></span><br><span class="line">api.JSONProducer = runtime.JSONProducer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==================================================================================</span></span><br><span class="line"><span class="comment">// userハンドラ</span></span><br><span class="line"><span class="comment">// 以下のように実装したハンドラをHTTPサーバに紐付けます。</span></span><br><span class="line">api.GetUsersHandler = operations.GetUsersHandlerFunc(example.GetUsers)</span><br><span class="line">api.PostUsersHandler = operations.PostUsersHandlerFunc(example.PostUsers)</span><br><span class="line"><span class="comment">// ==================================================================================</span></span><br><span class="line"></span><br><span class="line">api.PreServerShutdown = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">api.ServerShutdown = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> setupGlobalMiddleware(api.Serve(setupMiddlewares))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="Lambda関数インテグレーション"><a href="#Lambda関数インテグレーション" class="headerlink" title="Lambda関数インテグレーション"></a>Lambda関数インテグレーション</h2><p>go-swaggerで実装したWebアプリケーションサーバをLambda関数として動かすようにします。GoのLambda関数として有効なシグネチャは以下の通りです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- func ()</span><br><span class="line">- func () error</span><br><span class="line">- func (TIn), error</span><br><span class="line">- func () (TOut, error)</span><br><span class="line">- func (context.Context) error</span><br><span class="line">- func (context.Context, TIn) error</span><br><span class="line">- func (context.Context) (TOut, error)</span><br><span class="line">- func (context.Context, TIn) (TOut, error)</span><br></pre></td></tr></table></figure><p><code>TIn</code> や <code>TOut</code> は <code>encoding/json</code> でエンコード・デコードできる型を指定できます。</p><p>Lambda関数はAPI Gatewayのリクエストをトリガーに起動します。Lambda関数のAPI Gatewayのリクエスト <code>events.APIGatewayProxyResponse</code> をGoのHTTPサーバで扱えるような <code>*http.Request</code> に変換する必要があります。</p><ul><li><a href="https://github.com/awslabs/aws-lambda-go-api-proxy" target="_blank" rel="noopener">awslabs/aws-lambda-go-api-proxy</a></li></ul><p>を用いると簡単に変換することができます。もちろん <code>go-swagger</code> だけでなく主要なGoのWebアプリケーションフレームに対応しています。</p><ul><li>cmd/lambda/main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/awslabs/aws-lambda-go-api-proxy/httpadapter"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi/operations"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/loads"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpAdapter *httpadapter.HandlerAdapter</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handler handles API requests</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(ctx context.Context, req events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> httpAdapter == <span class="literal">nil</span> &#123;</span><br><span class="line">swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">api := operations.NewExampleAppAPI(swaggerSpec)</span><br><span class="line">server := restapi.NewServer(api)</span><br><span class="line">server.ConfigureAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment">// see https://github.com/go-swagger/go-swagger/issues/962#issuecomment-478382896</span></span><br><span class="line">httpAdapter = httpadapter.New(server.GetHandler())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> httpAdapter.ProxyWithContext(ctx, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(Handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ビルド-デプロイ"><a href="#ビルド-デプロイ" class="headerlink" title="ビルド/デプロイ"></a>ビルド/デプロイ</h1><p>準備は整いました！Goのファイルをビルドしzip化してAWS Lambda関数にデプロイしましょう。デプロイのコマンドはMakefileにタスクとして記述していました。</p><ul><li>Makefile</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">deploy: zip</span></span><br><span class="line">aws lambda update-function-code --region ap-northeast-1 --function-name example-api --zip-file fileb://bin/lambda.zip</span><br></pre></td></tr></table></figure><p>それではビルドしてデプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ make deploy</span><br><span class="line">go mod download</span><br><span class="line">go mod tidy</span><br><span class="line">GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=<span class="string">"-s -w"</span> -trimpath -o bin/lambda cmd/lambda/main.go</span><br><span class="line">zip -j bin/lambda.zip bin/lambda</span><br><span class="line">updating: lambda (deflated 67%)</span><br><span class="line">aws lambda update-function-code --region ap-northeast-1 --<span class="keyword">function</span>-name example-api --zip-file fileb://bin/lambda.zip</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"FunctionName"</span>: <span class="string">"example-api"</span>,</span><br><span class="line">    <span class="string">"FunctionArn"</span>: <span class="string">"arn:aws:lambda:ap-northeast-1:123456789012:function:example-api"</span>,</span><br><span class="line">    <span class="string">"Runtime"</span>: <span class="string">"go1.x"</span>,</span><br><span class="line">    <span class="string">"Role"</span>: <span class="string">"arn:aws:iam::123456789012:role/example-lambda"</span>,</span><br><span class="line">    <span class="string">"Handler"</span>: <span class="string">"lambda"</span>,</span><br><span class="line">    <span class="string">"CodeSize"</span>: 5517317,</span><br><span class="line">    <span class="string">"Description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"Timeout"</span>: 900,</span><br><span class="line">    <span class="string">"MemorySize"</span>: 128,</span><br><span class="line">    <span class="string">"LastModified"</span>: <span class="string">"2020-09-22T08:56:19.019+0000"</span>,</span><br><span class="line">    <span class="string">"CodeSha256"</span>: <span class="string">"bV+3mzysyD5226diZpvjfpE+Qz6o5ZHT8y35fAB3I/M="</span>,</span><br><span class="line">    <span class="string">"Version"</span>: <span class="string">"<span class="variable">$LATEST</span>"</span>,</span><br><span class="line">    <span class="string">"Environment"</span>: &#123;</span><br><span class="line">        <span class="string">"Variables"</span>: &#123;</span><br><span class="line">            <span class="string">"DYNAMO_TABLE_USERS"</span>: <span class="string">"example-users"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"TracingConfig"</span>: &#123;</span><br><span class="line">        <span class="string">"Mode"</span>: <span class="string">"PassThrough"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"RevisionId"</span>: <span class="string">"26888c1b-bfa2-4e67-960e-3fd8212e29f2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように出力されていればデプロイは完了です。継続的なデプロイを実施したい場合はdevelopブランチなどにPRがマージされたタイミングで開発環境にLambda関数をデプロイするといった内容をGitHub ActionsやCircleCIの設定に組み込むとよいでしょう。</p><p>さてCLIでDynamoDBにデータをPutして、APIのレスポンスを確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb put-item --table-name example-users --item <span class="string">'&#123;"user_id": &#123;"S": "001"&#125;, "user_name": &#123;"S": "Gopher"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>今回はお手軽にcurlでAPIにリクエストしてレスポンスを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i https://<span class="variable">$&#123;rest-api-id&#125;</span>.execute-api.ap-northeast-1.amazonaws.com/<span class="built_in">test</span>/v1/users</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 36</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Date: Mon, 21 Sep 2020 10:58:25 GMT</span><br><span class="line">x-amzn-RequestId: 89f88ada-ea48-4a60-a8ef-2b58df4309d1</span><br><span class="line">x-amz-apigw-id: TNoUxEJlNjMFdxg=</span><br><span class="line">X-Amzn-Trace-Id: Root=1-5f688751-c31c0c580cbe0f64d179578a;Sampled=0</span><br><span class="line">X-Cache: Miss from cloudfront</span><br><span class="line">Via: 1.1 48bf5adc2925386f020a8608d1c7edbe.cloudfront.net (CloudFront)</span><br><span class="line">X-Amz-Cf-Pop: NRT20-C3</span><br><span class="line">X-Amz-Cf-Id: GfDUO8SfL5POKkIVFVs5L-hJ8KkjwLCLf22xZmNWFiVkIQaHR2H4oA==</span><br><span class="line"></span><br><span class="line">[&#123;<span class="string">"name"</span>:<span class="string">"Gopher"</span>,<span class="string">"user_id"</span>:<span class="string">"001"</span>&#125;]</span><br></pre></td></tr></table></figure><p>API Gatewayから想定通りのレスポンスが返ってきました！本チュートリアルでは <code>/v1/users</code> へのGETリクエストのサンプルだけでしたが、新しいAPI定義が必要な場合 <code>swagger.yaml</code> に追加して本チュートリアルのようにすすめていけば容易に拡張することができます。</p><p>チュートリアルのすべてのサンプルはGitHubの以下のリポジトリにおいてあります。</p><table><thead><tr><th align="center">#</th><th>項目</th><th>リポジトリ</th></tr></thead><tbody><tr><td align="center">1</td><td>GoによるWebAPIの実装</td><td><a href="https://github.com/d-tsuji/serverless-api-go-tutorial" target="_blank" rel="noopener">d-tsuji/serverless-api-go-tutorial</a></td></tr><tr><td align="center">2</td><td>Terraformによるインフラ実装</td><td><a href="https://github.com/d-tsuji/serverless-api-infra-tutorial" target="_blank" rel="noopener">d-tsuji/serverless-api-infra-tutorial</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの辻です。&lt;/p&gt;
&lt;p&gt;業務アプリケーションのビジネスロジックをサーバーレスで実装することも増えてきまし
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="go-swagger" scheme="https://future-architect.github.io/tags/go-swagger/"/>
    
      <category term="サーバレス" scheme="https://future-architect.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%AC%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night(第4弾：Go x AWS スマート工場編)を開催しました。</title>
    <link href="https://future-architect.github.io/articles/20200925/"/>
    <id>https://future-architect.github.io/articles/20200925/</id>
    <published>2020-09-24T15:00:00.000Z</published>
    <updated>2020-09-29T04:44:21.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIGの栗田、伊藤、辻です。先日2020/9/25にオンラインにてFuture Tech Nightという社外勉強会を開催しました。今回は第4弾としてGoとAWSを使って工場制御する最新プロジェクトの事例を紹介しました。</p><ul><li><a href="https://future.connpass.com/event/177093/" target="_blank" rel="noopener">第1弾【On-Line】Future Tech Night ~メディア業界変革編～</a></li><li><a href="https://future.connpass.com/event/179387/" target="_blank" rel="noopener">第2弾【On-Line】Future Tech Night ～MaaS ビジネス編～</a></li><li><a href="https://future.connpass.com/event/185051/" target="_blank" rel="noopener">第3弾【On-Line】Future Tech Night ～船舶IoT Platform編～</a></li><li><a href="https://future.connpass.com/event/188742/" target="_blank" rel="noopener">第4弾【On-Line】Future Tech Night #4 〜Go x AWS スマート工場編〜</a> &lt;—– 今回はこれ</li></ul><p><img src="/images/20200925/image.png" alt=""></p><p>Gopherのアイキャッチのおかげか、Future Tech Night史上過去最高の参加人数となり大盛況で終わりました。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>勉強会は以下のような構成で行いました。</p><ul><li>FutureとTechnology Innovation Groupの紹介</li><li>工場案件の基礎知識<ul><li>工場現場のリアルな話</li><li>ラズパイじゃ解決しない。ハードにこだわってシステムを組む理由</li></ul></li><li>採用技術と考慮すべきポイント<ul><li>Goを利用した制御系通信の事例</li><li>AWSサーバレスサービス上への構築の仕方</li><li>知らないと怖い特殊な工場要件の考慮ポイント</li></ul></li></ul><p>栗田からは工場案件の基礎知識ということで、製造業の工場現場のリアルな話や、制御系システムをデザインする上で知ってくべき話をしました。いわゆるITカットでスマート工場の話をするときどうしてもアーキテクチャやソフトウェア、せいぜいNWの世界に閉じがちです。しかし今回は、工場にはどのようなハード機器や考え方があって、なぜそのような機器選定や機器選定やルール化がされていて、それを失敗するとどうなりうるのか、というかなりハードの側面によった説明に特化しました。<br>今回紹介した内容の一部は、下記当社のTech Blogにも記載していますので、御覧ください。</p><p><a href="https://future-architect.github.io/articles/20191023/">工場をHackするための基本知識　前編</a><br><a href="https://future-architect.github.io/articles/20200120/">工場をHackするための基本知識　後編</a></p><p><img src="/images/20200925/78e26c1c-e68c-0cc3-ea3d-24ec4e113889.png" alt=""></p><p>伊藤からはGoを用いて、AWSクラウドから工場のPLCと通信するためのプロトコル実装を解説しました。MCプロトコルで通信するためのGoのライブラリは <a href="https://github.com/future-architect/go-mcprotocol" target="_blank" rel="noopener">future-architect/go-mcprotocol</a> としてGitHubに公開しています。</p><p><img src="/images/20200925/4010f0c0-415f-ae07-b1d7-d825a1e1fe59.png" alt=""></p><p>辻からはクラウドから工場のデバイスを制御するためのアーキテクチャや、制御用のサーバを工場(Edge)に配備せずに、フルクラウド・サーバレスとした理由などを解説しました。また準リアルタイムにPLCと通信するためにStep Functionsを活用したポーリングの仕組みの話をしました。</p><p><img src="/images/20200925/d7e95dd3-7467-dfba-be43-681cf2f2fdae.png" alt=""></p><h2 id="登壇者からのコメント"><a href="#登壇者からのコメント" class="headerlink" title="登壇者からのコメント"></a>登壇者からのコメント</h2><p>栗田：今回1時間という限られた時間のなかで、一般論からハードとソフトの両方について触れ、さらに実装のレベルにまで到達したので、かなり駆け足になってしまいました。しかし、スマート工場というのはそれだけ奥深く、様々な機器が複雑に絡み合って構成されているのだと感じていただけたら幸いです。</p><p>伊藤：GoでMCプロトコルでの通信を行った実例を紹介しました。大変マニアックな内容で受け入れてもらえるか心配でしたが、面白かったと感想をいただけました、ありがとうございます。</p><p>辻：EdgeのPLCをサーバーレスで制御するという新しい取り組みについて紹介しました。時間の関係上、GoやDynamoDB周辺の話はあまりできなかったので、別の機会にお話しできればと思います。</p><h2 id="勉強会でいただいた質問"><a href="#勉強会でいただいた質問" class="headerlink" title="勉強会でいただいた質問"></a>勉強会でいただいた質問</h2><p>勉強会でいただいた質問をいくつか紹介します。時間の関係上、駆け足になってしまった回答もいくつかありましたので、一部補足しております。</p><p><strong>Q. EdgeとクラウドはTransit GateWayで接続しているとのことでしたが、セキュリティに関してはTransit GateWayを用いていれば問題ないでしょうか？</strong></p><p>A. 筆者の個人的な見解としてはNoです。オンプレとクラウドをつなぐ手段としてTransit Gatewayはあがりますが、必ずしもそれを使えば問題ないわけではなく、適切にNW環境を構築する必要があります。例えばTransit GatewayでつながるNW空間にウイルスが侵入してしまった場合、そのままオンプレ工場側のNW空間まで侵されてしまいます。そのため、例えばオンプレ工場側のGateway部分に侵入検知や監視ツールを仕込むなどして、適切に防御する必要があります。</p><p><strong>Q. Step Functionsで秒単位のポーリングを実現している方法について詳しく教えてほしいです。</strong></p><p>A. 下図のようにStep Functionsのタスクがループするようにステートマシンを構成しています(1つの緑背景が1つのタスクです)。図には記述していませんがStep FunctionsのWaitのタスクを用いることで秒単位の実行遅延を発生させることができます。</p><p><img src="/images/20200925/f11743b4-35da-66a0-451c-9b54c6dcb6a2.png" alt=""></p><p><strong>Q. StepFunctionsを用いてポーリングする場合、料金は大丈夫でしょうか？</strong></p><p>A. Step Functionsは1000回あたりの状態遷移で0.025ドルとなっています(以降は1状態遷移ごとに0.000025ドル)。現時点ではあくまでも机上の計算ですが、1日12時間稼働1000ミリ秒ごとに実行する前提で、またStep Functionsで稼働するLambdaの金額なども加味したうえで試算したところ、現実的な金額の範囲で収まっているため問題ない、と判断しています。</p><p><strong>Q. Go言語で開発している理由があれば教えてほしいです。</strong></p><p>A. Go言語はバージョン1の間はバージョンを更新しても、同じコードが正しくコンパイルおよび実行され続けることが保証されています。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><br>実行速度など様々な観点からも各種言語と比較しましたが、工場のために書いたソースコードは10年単位の規模での運用が視野に入るため、安心して運用できるという観点が大きな選定理由として存在します。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ご参加いただいた方々、ありがとうございました！<br>FutureではFuture Tech Nightの他にも様々なイベントを開催しております。今後も皆様のご参加をお待ちしております。</p><p>connpassのフューチャーグループイベントの<a href="https://future.connpass.com/" target="_blank" rel="noopener">メンバー登録</a>やtwitter(@future_recruit_)のフォローもお忘れなく📝</p><p><img src="/images/20200925/217f3b78-542d-dce3-e9c0-cfb79c91bd49.png" alt=""></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://golang.org/doc/go1compat</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、TIGの栗田、伊藤、辻です。先日2020/9/25にオンラインにてFuture Tech Nightという社外勉
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="工場" scheme="https://future-architect.github.io/tags/%E5%B7%A5%E5%A0%B4/"/>
    
      <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>CheetahGrid+Vue.jsをエンプラで使ってみた</title>
    <link href="https://future-architect.github.io/articles/20200924/"/>
    <id>https://future-architect.github.io/articles/20200924/</id>
    <published>2020-09-23T15:00:00.000Z</published>
    <updated>2020-09-24T05:35:54.525Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200924/top.png" class="img-small-size"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！信田です。</p><p><a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>＋<a href="https://jp.vuejs.org/index.html" target="_blank" rel="noopener">Vue.js</a>でエンプラ系システム<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>を構築した際の、採用した理由と実装のポイントのご紹介をします。<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>について存じ上げないよーとか、触ったことがないよーという方は、<a href="https://future-architect.github.io/articles/20200901/">入門編</a>も御覧ください。</p><p>初めての投稿ですが、最後までお付き合いいただければ嬉しいです。</p><h2 id="ちょっとした自己紹介"><a href="#ちょっとした自己紹介" class="headerlink" title="ちょっとした自己紹介"></a>ちょっとした自己紹介</h2><ul><li>新卒で今の会社（<a href="https://www.future.co.jp/" target="_blank" rel="noopener">Future株式会社</a>）に入社して2020年時点で9年目</li><li>物流（5年）、公共インフラ（半年）、アパレル（3年）といった業界のお客様を経験</li><li>大規模プロジェクト（ピーク時100+名）に所属することが多い</li><li>エンプラアプリの要件定義～構築～運用保守を経験。主に、バックエンド系の経験が多くJavaやSQLでの開発経験を積む</li><li>並行して、開発環境の整備やアプリ実行環境の整備・運用といったインフラ寄りのミドルウェア領域を担当</li><li>現在は社内の技術系組織（<a href="https://www.future.co.jp/recruit/new/about/tech/engineers_corps/" target="_blank" rel="noopener">TIG</a>）に所属</li><li>フロントエンドの経験を積みたくなり、今回のプロジェクトにジョイン</li></ul><h1 id="CheetahGrid-Vue-jsの採用に至るまでの経緯"><a href="#CheetahGrid-Vue-jsの採用に至るまでの経緯" class="headerlink" title="CheetahGrid+Vue.jsの採用に至るまでの経緯"></a>CheetahGrid+Vue.jsの採用に至るまでの経緯</h1><h2 id="プロジェクト概要"><a href="#プロジェクト概要" class="headerlink" title="プロジェクト概要"></a>プロジェクト概要</h2><p><a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>＋<a href="https://jp.vuejs.org/index.html" target="_blank" rel="noopener">Vue.js</a>を採用した今回のプロジェクトをさらっとご紹介します。</p><ul><li>アパレルのお客様向けソリューションのフレームワーク刷新プロジェクト</li><li>業務ロジックの変更は基本的に行わない</li><li>旧は約10年前に構築し、JSF2（Primefaces）を採用</li><li>新ではVue.jsを採用</li><li>DBなどの他のミドルウェアもOSS利用に変更</li></ul><h2 id="課題"><a href="#課題" class="headerlink" title="課題"></a>課題</h2><p>今回の刷新をする上で、課題となっていたのは以下のような点です。</p><h3 id="画面描画のパフォーマンス問題"><a href="#画面描画のパフォーマンス問題" class="headerlink" title="画面描画のパフォーマンス問題"></a>画面描画のパフォーマンス問題</h3><p>様々な業界のエンプラシステムを構築する上で、必ず一度は苦しむであろうパフォーマンスチューニング。アパレル業界のお客様でも同様でした。例えば、「配分<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>」と呼ばれるディストリビューター業務があり、一覧部の項目数は店舗✕SKU<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>でかなりの数になります。結果として、JSFベースの画面では項目分だけ部品が描画されるなどHTMLが膨れ上がり、画面がもさっとしてしまっていました。実際に毎日業務で利用する人にとってはかなりのストレスになります。</p><p>この対応策として、</p><ul><li>必須の検索条件を増やして検索結果が膨らまないようにする</li><li>表示できる検索結果件数に制限を設ける（500件以上検索された場合はエラーにしたりアラートにしたり）</li><li>ページングや遅延ロードによって一度に表示する件数を減らす</li><li>遅いことを受け入れてもらう（←　運用回避という最終手段）</li></ul><p>といったことをしていました。</p><p>パフォーマンスが出ない画面で商用ライブラリを利用したこともありますが、「開発できる人が限られ、後々の運用にコストがかかる」、「ライセンス条項を気にする必要がある」など、商用ライブラリ特有の問題が発生したりしていました。</p><h3 id="Excel中心の業務設計"><a href="#Excel中心の業務設計" class="headerlink" title="Excel中心の業務設計"></a>Excel中心の業務設計</h3><p>エンプラでシステム化する際によく遭遇するのは、システム化前に利用していた仕組みの呪縛です。その中でも、システム化前にExcelで管理している業務は多く、マクロや関数などを利用して独自の進化を遂げ、一子相伝の秘伝のタレ化している業務に出会うことが多々あります。この問題点は、属人化だけではなく、VBAのバージョンによって動かなくなってしまうといった問題も孕んでいます。</p><p>昨今のシステムWeb化の流れがある中で、Excel業務が残っていてはWebだけでは完結できずシステム外の仕組みも残ってしまい、いつまでも業務的な負債を抱えた状態が続いてしまうことになります。</p><p>これらの課題を解決すべく候補として挙がったのが、<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>でした。</p><h1 id="実装例"><a href="#実装例" class="headerlink" title="実装例"></a>実装例</h1><p>今回のプロジェクトにおける<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>を用いた実装をいくつか紹介します。</p><h2 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h2><ul><li>Node.js(v14.4.0)</li><li>npm(6.14.5)</li><li>Nuxt.js(v2.13.3)</li><li>Cheetah Grid(0.22.3)</li></ul><p>npmでCheetah Gridを使用するには、下記のコマンドを実行してください。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S cheetah-grid</span><br></pre></td></tr></table></figure><p>※開発環境については、<a href="https://future-architect.github.io/articles/20200901/">入門編の開発環境</a>に倣っています。</p><h2 id="実装した画面と全体ソース"><a href="#実装した画面と全体ソース" class="headerlink" title="実装した画面と全体ソース"></a>実装した画面と全体ソース</h2><p>今回実装した画面は以下です。<br><img src="/images/20200924/2020-09-23_20h26_14.png" alt=""><br>この画面全体のソースコードは以下です。</p><figure class="highlight html"><figcaption><span>sample.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 500px; border: solid 1px #ddd; margin: 50px;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputAllColumn1"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        カラム1</span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"inputAllColumn1"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">v-model</span>=<span class="string">"inputAllColumn1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">name</span>=<span class="string">"一括反映"</span></span></span><br><span class="line"><span class="tag">              @<span class="attr">click</span>=<span class="string">"onClickInputAllColumn1"</span>&gt;</span></span><br><span class="line">        一括反映</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">             <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        行追加ボタン（最後尾に追加）</span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">name</span>=<span class="string">"行追加"</span></span></span><br><span class="line"><span class="tag">              @<span class="attr">click</span>=<span class="string">"onClickAddRow"</span>&gt;</span></span><br><span class="line">        行追加</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-grid</span> <span class="attr">ref</span>=<span class="string">"grid"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:data</span>=<span class="string">"records"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:frozen-col-count</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:allow-range-paste</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">              @<span class="attr">changed-value</span>=<span class="string">"onChangedValueRec($event)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">field</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">width</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">          ID</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">width</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">:icon</span>=<span class="string">"getDeleteIcon"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">:action</span>=<span class="string">"onDelete"</span>&gt;</span></span><br><span class="line">          削除</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-link-column</span> <span class="attr">href</span>=<span class="string">"link"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">:icon</span>=<span class="string">"getLinkIcon"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">width</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">          詳細</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-link-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-input-column</span> <span class="attr">field</span>=<span class="string">"column1"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">width</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">:message</span>=<span class="string">"validateNumCol"</span></span></span><br><span class="line"><span class="tag">                             @<span class="attr">changed-value</span>=<span class="string">"onChangedValueRec($event)"</span>&gt;</span></span><br><span class="line">          カラム1（数値1-4桁）</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-input-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-input-column</span> <span class="attr">field</span>=<span class="string">"column2"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">width</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">          カラム2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-input-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-input-column</span> <span class="attr">field</span>=<span class="string">"column3"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">width</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">          カラム3</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-input-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">c-grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid-sample"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> * <span class="keyword">as</span> cGridAll <span class="keyword">from</span> <span class="string">'vue-cheetah-grid'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'service'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">        ...cGridAll</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.setRecord()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          inputAllColumn1: <span class="literal">null</span>,</span></span><br><span class="line">          records: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 一覧に表示するデータを作成する</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span> &#123;<span class="keyword">void</span>&#125;</span></span><br><span class="line">         */</span><br><span class="line">        setRecord () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> vm = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line">              vm.records.push(</span><br><span class="line">                &#123;</span><br><span class="line">                  id: i + 1,</span><br><span class="line"><span class="javascript">                  column1: <span class="string">`カラム1-<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">                  column2: <span class="string">`カラム2-<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">                  column3: <span class="string">`カラム3-<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>`</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 削除ボタン押下イベント</span><br><span class="line">         * @param &#123;object&#125; rec 行データ</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span> &#123;<span class="keyword">void</span>&#125;</span></span><br><span class="line">         */</span><br><span class="line">        onDelete (rec) &#123; </span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> vm = <span class="keyword">this</span></span></span><br><span class="line"><span class="actionscript">            vm.$<span class="keyword">delete</span>(vm.records, vm.records.indexOf(rec));</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 行追加ボタン押下イベント</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span> &#123;<span class="keyword">void</span>&#125;</span></span><br><span class="line">         */</span><br><span class="line">        onClickAddRow () &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">const</span> vm = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> maxId = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">          vm.records.forEach(<span class="function"><span class="params">rec</span> =&gt;</span> &#123;</span></span><br><span class="line">            if( rec.id &gt; maxId ) &#123;</span><br><span class="line">              maxId = rec.id</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          vm.records.push(</span><br><span class="line">            &#123;</span><br><span class="line">              id: maxId + 1,</span><br><span class="line"><span class="javascript">              column1: <span class="string">`カラム1-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">              column2: <span class="string">`カラム2-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">              column3: <span class="string">`カラム3-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 行変更イベント処理</span><br><span class="line">         * @param &#123;object&#125; event イベントオブジェクト</span><br><span class="line"><span class="actionscript">         * @returns &#123;<span class="keyword">void</span>&#125;</span></span><br><span class="line">         */</span><br><span class="line">        onChangedValueRec (event) &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">//          alert(`カラムの値が変わったよ：$&#123;event.value&#125;`)</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * カラム1一括反映ボタンクリックイベント</span><br><span class="line"><span class="actionscript">         * @returns &#123;<span class="keyword">void</span>&#125;</span></span><br><span class="line">         */</span><br><span class="line">        onClickInputAllColumn1 () &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">const</span> vm = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; vm.records.length ; i++ ) &#123;</span></span><br><span class="line">            vm.records[i].column1 = vm.inputAllColumn1</span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 再描画</span></span></span><br><span class="line">          vm.$refs.grid.invalidate()</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 数値カラムのバリデーションメソッド</span><br><span class="line">         * @param &#123;object&#125; rec 一行データ</span><br><span class="line"><span class="javascript">         * @returns &#123;<span class="built_in">String</span>&#125; メッセージ</span></span><br><span class="line">         */</span><br><span class="line">        validateNumCol (rec) &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> !rec.column1.match(<span class="string">'^[0-9]&#123;1,4&#125;$'</span>) ? <span class="string">'エラー：1から4桁の数値を入力してください。'</span> : <span class="string">''</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 遷移用アイコンを取得する</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span> &#123;object&#125; アイコン情報</span></span><br><span class="line">         */</span><br><span class="line">        getLinkIcon () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                className: <span class="string">'material-icons'</span>,</span></span><br><span class="line"><span class="actionscript">                content: <span class="string">'link'</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'cornflowerblue'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 削除用アイコンを取得する</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span> &#123;object&#125; アイコン情報</span></span><br><span class="line">         */</span><br><span class="line">        getDeleteIcon () &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            className: <span class="string">'material-icons'</span>,</span></span><br><span class="line"><span class="actionscript">            content: <span class="string">'delete'</span>,</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">'deepskyblue'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="範囲ペースト機能"><a href="#範囲ペースト機能" class="headerlink" title="範囲ペースト機能"></a>範囲ペースト機能</h2><p>まずは範囲ペースト機能です。クリップボードにコピーしたTSVデータを貼り付けてGrid上に反映することができます。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c-grid</span> <span class="attr">ref</span>=<span class="string">"grid"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:data</span>=<span class="string">"records"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:frozen-col-count</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:allow-range-paste</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">changed-value</span>=<span class="string">"onChangedValueRec($event)"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>範囲ペーストを有効化するには<code>c-grid</code>に<code>:allow-range-paste=&quot;true&quot;</code>を指定するだけです！</p><p>以下のようなExcel上のデータをコピーし、</p><img src="/images/20200924/2020-09-22_00h23_27.png" class="img-small-size"><p><code>Ctrl+V</code>でペーストして反映します。</p><p><img src="/images/20200924/capture-range-paste_(1).gif" alt=""></p><p>また、以下のようにExcel操作でよく使う<code>Ctrl+down</code>で全選択してコピーするような一括ペーストも<code>c-grid</code>上で可能になっています。</p><p><img src="/images/20200924/capture-copy-and-paste-row_(1).gif" alt=""></p><p>この範囲ペースト機能を利用すればWeb上でExcelライクな操作が可能となり、既存の仕組みがExcel運用だったとしても<code>c-grid</code>へ置き換えることも現実的な選択肢となりうると思います。</p><p>実際に今回のプロジェクトにおいてはExcel運用をやめ、<code>c-grid</code>を利用したWeb上での運用に置き換えを行いました。</p><h2 id="一括反映"><a href="#一括反映" class="headerlink" title="一括反映"></a>一括反映</h2><p>一括反映は<code>c-gird</code>の外から値を反映するための仕組みの一例として紹介します。</p><p>範囲ペースト機能を利用して列単位に一括して反映でも同じ効果を得られますが、こちらを利用すればすべてがWeb上のみ（クリップボードも利用しない）で完結させることが可能になります。</p><figure class="highlight html"><figcaption><span>templateタグ内</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputAllColumn1"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  カラム1</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"inputAllColumn1"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">v-model</span>=<span class="string">"inputAllColumn1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"一括反映"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"onClickInputAllColumn1"</span>&gt;</span></span><br><span class="line">  一括反映</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>scriptタグ内</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * カラム1一括反映ボタンクリックイベント</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onClickInputAllColumn1 () &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; vm.records.length ; i++ ) &#123;</span><br><span class="line">    vm.records[i].column1 = vm.inputAllColumn1</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 再描画</span></span><br><span class="line">  vm.$refs.grid.invalidate()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="/images/20200924/capture-inpute-all.gif" alt=""></p><p>仕組みは簡単で、一括反映ボタンの<code>click</code>イベントにて<code>c-grid</code>で表示しているデータセットの値を<code>c-gird</code>外の<code>inputAllColumn1</code>で置き換えています。<br>ここでミソなのが、<strong>再描画</strong>（<code>vm.$refs.grid.invalidate()</code>）です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      inputAllColumn1: null,</span><br><span class="line">      records: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>records: []</code>で定義しているため、<code>records</code>の各要素はリアクティブな変更の対象となりません。<br>そこで、JavaScriptで変更した値を<code>c-grid</code>で表示させるために<code>c-grid</code>の<a href="https://future-architect.github.io/cheetah-grid/documents/api/vue/components/CGrid.html#methods">invalidate API</a>を利用して、変更後の<code>records</code>で再描画させています。<br>※<code>vm.$refs.grid.invalidate()</code>をコメントアウトすると、一括反映ボタンを押下しても見た目には何も起こりませんが、<code>records</code>の値は変更された状態になります。</p><p><code>records</code>の値を設定する際に<code>$set</code>でリアクティブにしたりすることも可能ではあります。ただし、エンプラで利用する際にはサーバ側の検索APIを叩いてその結果が<code>records</code>に入ることになり、検索結果の件数によってはパフォーマンス悪化の要因になりえますし、返却する項目名も変わる可能性があります。そのため、今回の実装のように再描画を一度やってしまう方が全体的なパフォーマンスとしては良いものになるのではないかと思います。なんと言っても、<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>は描画がめちゃくちゃ早いので再描画でもストレスはありません😎</p><h3 id="行追加"><a href="#行追加" class="headerlink" title="行追加"></a>行追加</h3><p>エンプラでの利用シーンとしては、明細行を追加したい場合などで、アパレルでは材料メーカーへの支払明細の追加などが例として挙げられます。</p><figure class="highlight plain"><figcaption><span>templateタグ内</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;label for&#x3D;&quot;&quot;</span><br><span class="line">       type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">  行追加ボタン（最後尾に追加）</span><br><span class="line">&lt;&#x2F;label&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot;</span><br><span class="line">        name&#x3D;&quot;行追加&quot;</span><br><span class="line">        @click&#x3D;&quot;onClickAddRow&quot;&gt;</span><br><span class="line">  行追加</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>scriptタグ内</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 行追加ボタン押下イベント</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onClickAddRow () &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> maxId = <span class="number">0</span></span><br><span class="line">  vm.records.forEach(<span class="function"><span class="params">rec</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>( rec.id &gt; maxId ) &#123;</span><br><span class="line">      maxId = rec.id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  vm.records.push(</span><br><span class="line">    &#123;</span><br><span class="line">      id: maxId + <span class="number">1</span>,</span><br><span class="line">      column1: <span class="string">`カラム1-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span>,</span><br><span class="line">      column2: <span class="string">`カラム2-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span>,</span><br><span class="line">      column3: <span class="string">`カラム3-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="/images/20200924/capture-add-row_(1).gif" alt=""><br>実装としては、IDの最大値＋１を計算し、<code>records</code>へ追加しています。これだけで<code>c-grid</code>に新たな行を追加することが可能です。</p><h3 id="入力データのバリデーション"><a href="#入力データのバリデーション" class="headerlink" title="入力データのバリデーション"></a>入力データのバリデーション</h3><p>エンプラ以外でも必須の機能と言っても過言ではない画面入力値のバリデーション実装です。</p><figure class="highlight plain"><figcaption><span>templateタグの実装（c-grid内の各カラム）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;c-grid-input-column field&#x3D;&quot;column1&quot;</span><br><span class="line">                     width&#x3D;&quot;auto&quot;</span><br><span class="line">                     :message&#x3D;&quot;validateNumCol&quot;</span><br><span class="line">                     @changed-value&#x3D;&quot;onChangedValueRec($event)&quot;&gt;</span><br><span class="line">  カラム1（数値1-4桁）</span><br><span class="line">&lt;&#x2F;c-grid-input-column&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>scriptタグの実装（c-grid内の各カラム）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数値カラムのバリデーションメソッド</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span>rec 一行データ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;String&#125;</span> </span>メッセージ</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">validateNumCol (rec) &#123;</span><br><span class="line">  <span class="keyword">return</span> !rec.column1.match(<span class="string">'^[0-9]&#123;1,4&#125;$'</span>) ? <span class="string">'エラー：1から4桁の数値を入力してください。'</span> : <span class="string">''</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><img src="/images/20200924/2020-09-23_21h08_40.png" class="img-small-size"><p><code>:message=&quot;validateNumCol&quot;</code>にてバリデーション用の関数を呼び出し、エラーの場合にエラーメッセージを返却するように実装します。カラム1のいずれかに4桁以内の数字<strong>以外</strong>を入力した場合にエクスクラメーションマークが表示されることが確認できるでしょう。</p><p>引数には一行データ（rec）がバインドされるようになっているので、他のカラムとの相関バリデーションも実装することができます。</p><h3 id="イベント処理"><a href="#イベント処理" class="headerlink" title="イベント処理"></a>イベント処理</h3><p>カラムの値が変わった場合やフォーカスした場合など、何かしらのイベント処理を行う場合の実装です。<br><strong>※<code>alert(&#39;カラムの値が変わったよ&#39;)</code>のコメントアウトを外してください。</strong></p><figure class="highlight plain"><figcaption><span>templateタグの実装（c-grid内の各カラム）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;c-grid-input-column field&#x3D;&quot;column1&quot;</span><br><span class="line">                     width&#x3D;&quot;auto&quot;</span><br><span class="line">                     :message&#x3D;&quot;validateNumCol&quot;</span><br><span class="line">                     @changed-value&#x3D;&quot;onChangedValueRec($event)&quot;&gt;</span><br><span class="line">  カラム1（数値1-4桁）</span><br><span class="line">&lt;&#x2F;c-grid-input-column&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>scriptタグの実装（c-grid内の各カラム）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 行変更イベント処理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span>event イベントオブジェクト</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onChangedValueRec (event) &#123;</span><br><span class="line">  alert(<span class="string">`カラムの値が変わったよ：<span class="subst">$&#123;event.value&#125;</span>`</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><img src="/images/20200924/2020-09-23_21h14_26.png" class="img-middle-size"><p>今回は各<code>c-grid</code>コンポーネントの<code>changed-value</code>イベントの関数（<code>onChangedValueNumCol($event)</code>）内でダイアログ表示するようにしています。</p><p>カラム入力値は<code>event.value</code>、一行データは<code>event.record</code>のようにイベントオブジェクトから取得でき、関数内で利用することが可能です。</p><p>また、<code>c-grid</code>自体にもイベントのバインドが可能です。</p><figure class="highlight plain"><figcaption><span>templateタグの実装（c-grid全体）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;c-grid ref&#x3D;&quot;grid&quot;</span><br><span class="line">        :data&#x3D;&quot;records&quot;</span><br><span class="line">        :frozen-col-count&#x3D;&quot;3&quot;</span><br><span class="line">        :allow-range-paste&#x3D;&quot;true&quot;</span><br><span class="line">        @changed-value&#x3D;&quot;onChangedValueRec($event)&quot;&gt;</span><br></pre></td></tr></table></figure><p>他にもバインド可能なイベントは用意されていますが、各<code>c-grid-*</code>コンポーネントによって利用できるイベントも異なるので<a href="https://future-architect.github.io/cheetah-grid/documents/api/vue/components/">コンポーネント一覧ページ</a>より利用可能なイベントを確認して実装してみてください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><h2 id="恩恵"><a href="#恩恵" class="headerlink" title="恩恵"></a>恩恵</h2><p>今回のプロジェクトにおいては<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>を利用することで画面描画までの速度が大幅に改善しました。今回のフレームワーク刷新に伴って開発時に新旧画面を比較しつつ実装するわけですが、同じデータ量で比べた場合に旧で30秒くらい待っていたのが、新では数秒で描画できてしまうのを体感すると本当に感動します。（<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>の速度について詳しくは<a href="https://future-architect.github.io/cheetah-grid/documents/introduction/">こちら</a>）</p><p>上記のサンプルコードでも画面表示してもらえるとわかりますが、6カラムを1,000レコード描画するのにかかる時間はトータル1～2秒ほどでした。（ちなみに、6カラム✕100,000レコードでも1.5秒ほどです。）</p><p>この圧倒的な速さの恩恵を<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>を採用するだけで得られるのです。</p><p>また、Excelライクな操作について今回はコピー＆ペイストについてご紹介しましたが、「入力データのバリデーション」でご紹介したとおり各イベントのバインドが可能であり呼び出す関数内でJavaScriptを実行できることから、Excelの機能、ましてや、Excelでは実現が難しい機能でも実装できる、という業務をWeb上で完結させる可能性も垣間見れたのではないでしょうか。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>見ていただいたとおり<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>は描画は非常に早いのですが、イベント処理やバリデーションロジックの実装は開発者の腕次第です。よって、場合にによっては描画以外の部分で時間がかかり、全体として遅くなってしまいます。例えば、毎回全データのチェックが走るような書き方をしてしまうと、カラムクリックや入力のたびに画面がもっさりしてしまうので、ボタン押下時だけにチェックを寄せるなどのロジックの最適化は必要になります。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>弊社内でも<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>＋<a href="https://jp.vuejs.org/index.html" target="_blank" rel="noopener">Vue.js</a>の組み合わせで本格的に業務システムを作成した初のプロジェクトだったこともあり手探りでの開発ではありましたが、これまでのエンプラのフロントエンド開発で苦労した点がほとんど問題にならず、使ってみてホントに良いなと思いました。</p><p>ある先輩は、「お客様は我々と業務要件を詰めることはできるが、パフォーマンスはお客様にはどうしようもない。だけど、使ってみて実は一番気になるのは動作が遅かった場合だし遅いと使ってくれない。だからこそプロとしてパフォーマンスに妥協してはいけない。」のようなことを言っていて感銘を受けたものです。それもあって私自身もいくつかのプロジェクトで遅い画面というものに出会うことは少なくなく毎回考えを振り絞ってきたわけですが、<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>を利用すればそれらのいくつかの解になり得るものだと思いました。</p><p>チューニングによってパフォーマンスが改善していくのも気持ちがいいものでその機会が減ってしまうのはちょっぴり悲しさもありますが😅、最初から速いに越したことはないですよね！</p><p>パフォーマンスが遅くて困っている方、<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>ぜひ試してみてください！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">配分：各店舗の売上や在庫、納品の管理や分析を行い、どの店舗にどのような商品をどれだけ割り振るかを決める業務</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">SKU：Stock Keeping Unit。商品の管理単位。アパレルではブランド・商品番号・サイズ・カラーの組み合わせとすることが多い</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">エンタプライズ系システムのこと。 https://www.ipa.go.jp/sec/softwareengineering/std/ent.html</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200924/top.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="CheetahGrid" scheme="https://future-architect.github.io/tags/CheetahGrid/"/>
    
      <category term="エンタープライズ" scheme="https://future-architect.github.io/tags/%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%82%A4%E3%82%BA/"/>
    
  </entry>
  
  <entry>
    <title>久しぶりに社内LT大会を開催しました。2020 Summer</title>
    <link href="https://future-architect.github.io/articles/20200923/"/>
    <id>https://future-architect.github.io/articles/20200923/</id>
    <published>2020-09-22T15:00:00.000Z</published>
    <updated>2020-09-23T01:28:20.962Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200923/couple_kimodameshi.png" class="img-small-size"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2020年8月28日(金）に社内LT大会を（久しぶりに）開催しました。</p><ul><li>過去のLT大会の開催記事は<a href="https://future-architect.github.io/tags/LT/">こちら</a>に書いています。</li></ul><p>どれくらい久しぶりかと言うと、2016年は5回・2017年は4回・2018年に1回・2019年は0回という頻度で分かるように、最初に面白がって連発したものの、途中で息切れしフェードアウトしちゃったので、約1.5年ぶりの復活です。</p><p>今後は年2回というサステナビリティあふれる設計にしようと運営メンバーで決めました。名前にSummer・Winterと付けるとカッコいいよねということで季節縛りで開催して行こうと思っています。</p><p>このあたりの復活の経緯などは未来報に記事を書かれる予定です。</p><h1 id="LT大会とは"><a href="#LT大会とは" class="headerlink" title="LT大会とは"></a>LT大会とは</h1><p>LT(Lightning Talk)とは5分程度の短いプレゼンテーションと言われています。ライトニングトークの略なのですが、IT界隈ではエルティーと略す人が多いかなと思います。</p><p>何人集まったらLT”大会”になるのかは諸説あるかと思いますが、6人くらい集まれば大会なんじゃないでしょうか。</p><h1 id="LTテーマ"><a href="#LTテーマ" class="headerlink" title="LTテーマ"></a>LTテーマ</h1><p>LT 大会 Summerということで以下3つのテーマで募集しています。</p><ol><li>肝試し</li><li>夏休みの自由研究したこと</li><li>リモートワークにオススメすること、開発環境</li></ol><p>今回のLT大会は、だいたい150人以上が常に視聴してくれていたり、一度でもログインしてくれた人もいれると180名近くでした。新卒採用チームの盛岡さんが魅力的に呼びかけた結果、そのうち100名ほどが内定者の方だったのが驚きでした。（社員より多い！笑）</p><h1 id="資料"><a href="#資料" class="headerlink" title="資料"></a>資料</h1><p>公開されている資料たちです。OPトークには技術部門トップの宮原さんや、SAIG塚本さんが自由研究や肝試しのテーマで話してくれました。OPトークは10分枠とLTではなかったのですが、さすがの安定感で全員すぐ引き込まれました。</p><h2 id="Talk1-村田さん-引きこもって作ってみた！おうちKubernetes-with-ラズパイ"><a href="#Talk1-村田さん-引きこもって作ってみた！おうちKubernetes-with-ラズパイ" class="headerlink" title="Talk1 村田さん: 引きこもって作ってみた！おうちKubernetes with ラズパイ"></a>Talk1 村田さん: 引きこもって作ってみた！おうちKubernetes with ラズパイ</h2><script async class="speakerdeck-embed" data-id="2d88a8b0c5b340b4864a73dc04231452" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Talk2-平本さん-自作キーボードの紹介をする予定です。在宅だからこそ据え置きキーボードにこだわろう！"><a href="#Talk2-平本さん-自作キーボードの紹介をする予定です。在宅だからこそ据え置きキーボードにこだわろう！" class="headerlink" title="Talk2 平本さん:  自作キーボードの紹介をする予定です。在宅だからこそ据え置きキーボードにこだわろう！"></a>Talk2 平本さん:  自作キーボードの紹介をする予定です。在宅だからこそ据え置きキーボードにこだわろう！</h2><iframe src="//www.slideshare.net/slideshow/embed_code/key/3m1cPJf3QMANGH" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/KazutoshiHiramoto/handmade-keyboard-238360094" title="Handmade keyboard" target="_blank">Handmade keyboard</a> </strong> from <strong><a href="https://www.slideshare.net/KazutoshiHiramoto" target="_blank">KazutoshiHiramoto</a></strong> </div><h2 id="Talk3-伊藤さん-kaggle、競プロやりませんか、両方始めてみたので両方の魅力を比較"><a href="#Talk3-伊藤さん-kaggle、競プロやりませんか、両方始めてみたので両方の魅力を比較" class="headerlink" title="Talk3 伊藤さん: kaggle、競プロやりませんか、両方始めてみたので両方の魅力を比較"></a>Talk3 伊藤さん: kaggle、競プロやりませんか、両方始めてみたので両方の魅力を比較</h2><script async class="speakerdeck-embed" data-id="771ff91e97ea4d13a4497148b6884329" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Talk4-澁川さん-gobotでGUIアプリを作ってみる"><a href="#Talk4-澁川さん-gobotでGUIアプリを作ってみる" class="headerlink" title="Talk4 澁川さん: gobotでGUIアプリを作ってみる"></a>Talk4 澁川さん: gobotでGUIアプリを作ってみる</h2><script async class="speakerdeck-embed" data-id="341ddd45a53141b289b8f0e2f3cda4cb" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Talk6-藤さん-コスパ最強エクササイズ-1日4分でできるHIITバーピーのすすめ"><a href="#Talk6-藤さん-コスパ最強エクササイズ-1日4分でできるHIITバーピーのすすめ" class="headerlink" title="Talk6 藤さん: コスパ最強エクササイズ　1日4分でできるHIITバーピーのすすめ"></a>Talk6 藤さん: コスパ最強エクササイズ　1日4分でできるHIITバーピーのすすめ</h2><script async class="speakerdeck-embed" data-id="763ac07f4ee946ad9660361ac28bf3f3" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Talk7-仁木さん-リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話"><a href="#Talk7-仁木さん-リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話" class="headerlink" title="Talk7 仁木さん: リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話"></a>Talk7 仁木さん: リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話</h2><iframe src="//www.slideshare.net/slideshow/embed_code/key/EZaqcb8UU9PwT6" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/MiraiNiki/ss-238398972" title="リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話" target="_blank">リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話</a> </strong> from <strong><a href="https://www.slideshare.net/MiraiNiki" target="_blank">MiraiNiki</a></strong> </div><h2 id="Talk8-井上さん-本当は怖い、フリーWiFiの話"><a href="#Talk8-井上さん-本当は怖い、フリーWiFiの話" class="headerlink" title="Talk8 井上さん: 本当は怖い、フリーWiFiの話"></a>Talk8 井上さん: 本当は怖い、フリーWiFiの話</h2><iframe src="//www.slideshare.net/slideshow/embed_code/key/FSYFL3VNjHJukI" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/hogehuga/wifilt" title="本当は怖いフリーWiFi(社内怪談LT)" target="_blank">本当は怖いフリーWiFi(社内怪談LT)</a> </strong> from <strong><a href="https://www.slideshare.net/hogehuga" target="_blank">hogehuga</a></strong> </div><h1 id="復活した-Future-LT-大会はここが変わった"><a href="#復活した-Future-LT-大会はここが変わった" class="headerlink" title="復活した Future LT 大会はここが変わった"></a>復活した Future LT 大会はここが変わった</h1><p>運営の裏話的なところになりますが、仕切り直しという意味で色々運営ポリシーを変えました。</p><ul><li>フルリモート開催になりました<ul><li>Zoomをフル活用しています</li><li>フルリモートなので当然、飲食🍕🍻を出すことは無くなりました</li></ul></li><li>テーマは技術色一本で<ul><li>従来はマイホーム住宅ローンや、ハイキック（物理）の話も許容していましたが、真面目に技術テーマと混ぜると聞いていてよく分からなくなるので、基本テックネタに限ることにしました（運営から応募選考する時にあまりにも面白そうなら通すことはあります）</li></ul></li><li>景品<ul><li>豪華景品（2~3万円くらいのキーボードとか）を出していましたが、配送が大変だったり経費精算が大変すぎるので辞めました</li><li>やはり金銭的な報酬は原資に限りがあるのと、豪華な景品だからといって登壇者の量・質が上がるわけではないのと、換金性の高い景品は監査的に問題があったり（そもそも社内審査が降りない）など、運営不可も大きいので辞めました</li><li>優勝者には豪華景品として、みんなで拍手と次回LT大会での宣伝枠を与えるという、何物にも代えがたいモノを与えることにしました</li></ul></li></ul><p>よりLTに集中できるように色々余計なものを削ぎ落として改善しました（運営にも優しい！）。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>次回2021年2月にLT大会 Winterを開催予定です。</p><p>次はグループ会社の方に呼びかけてさらに盛り上げたり、縁がある社外の人も呼び込みたい構え！グループの皆さん、見ていたら住田さんに連絡してください！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200923/couple_kimodameshi.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="culture" scheme="https://future-architect.github.io/categories/culture/"/>
    
    
      <category term="LT" scheme="https://future-architect.github.io/tags/LT/"/>
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>フューチャーのインターンEngineer Campに参加した話</title>
    <link href="https://future-architect.github.io/articles/20200921/"/>
    <id>https://future-architect.github.io/articles/20200921/</id>
    <published>2020-09-20T15:00:00.000Z</published>
    <updated>2020-09-18T11:54:58.943Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200921/%E5%9B%B32.png" alt=""></p><h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>はじめまして。フューチャーのインターンEngineer Campに参加させていただいた岡部です。</p><p>今回はタイトルにもある通り、2020年エンジニアキャンプのインターンの内容、学びについてお話しさせていただきます。</p><p><a href="https://www.future.co.jp/" target="_blank" rel="noopener">フューチャー</a>は様々な業界でITコンサルティングを行っている企業であり、今回はそのITの部分を主に体験するエンジニア向けインターンEngineer Campについてのお話です。</p><h1 id="インターン参加まで"><a href="#インターン参加まで" class="headerlink" title="インターン参加まで"></a>インターン参加まで</h1><h2 id="参加動機"><a href="#参加動機" class="headerlink" title="参加動機"></a>参加動機</h2><p>このコロナ禍で家からも出にくい中、せっかくの長期休暇を有意義に使いたいな～ということで以下の基準でインターンシップを探していました。</p><ul><li>ある程度の期間しっかりと開発に取り組める</li><li>自分の技術力を高めることにつながる</li><li>実際の仕事の雰囲気を味わえる</li><li><del>お金がもらえる💰</del></li></ul><p>そんな中、このEngineer Campのインターンは自分の希望を全て満たしていると考えたため応募しました。</p><h2 id="参加前のスキル"><a href="#参加前のスキル" class="headerlink" title="参加前のスキル"></a>参加前のスキル</h2><p>今回のインターンシップ参加前は、IT系企業のアルバイトでPythonを、競技プログラミングのコンテストへの参加でC++を書いていた程度でいわゆるすごい成果物やカッコいいスキルを持っているわけではありませんでした。</p><p>とりあえずダメ元で応募したのを覚えています。</p><h2 id="インターン参加までの流れ"><a href="#インターン参加までの流れ" class="headerlink" title="インターン参加までの流れ"></a>インターン参加までの流れ</h2><p>エントリーシートの提出後、コーディングテストとオンライン面接を受けました。社内に競技プログラミング部があるということで、コーディングテストはバランスの取れた難易度でした。また面接も標準的な内容でしたが、話す際にこちらの発言に対して細かいリアクションをいただけたためとても話しやすかったのが印象的でした。</p><p>結果として合格をいただき、「⑥モビリティサービスプラットフォーム開発🚗」のプロジェクトに関わらせていただくことになりました。</p><p>今回のEngineer Campでは私が参加したもの以外にも様々なコースが用意されていました。どれも面白そうな内容なので、<a href="https://future-architect.github.io/articles/20200606/">こちら</a>のインターン募集記事や<a href="https://future-architect.github.io/articles/20200913/">別プロジェクトの方の参加記</a>もぜひご覧下さい。</p><p>また、今回のインターンは社会情勢の影響もありフルリモートでの開催となりました。私のような地方在住の人間にとっては大都会東京へ行く貴重な機会を失ってしまうこととなり非常に残念でしたが、そんな中でもストレスなく働くことが出来るよう開催前から多大なサポートをいただきました。具体的には、作業用のPCの貸与や受入先プロジェクトの方との面談を行っていただいたため、作業の空気感を掴んだ状態で開始当日を迎えることが出来ました。</p><h1 id="インターン本番"><a href="#インターン本番" class="headerlink" title="インターン本番"></a>インターン本番</h1><h2 id="インターンでしたこと"><a href="#インターンでしたこと" class="headerlink" title="インターンでしたこと"></a>インターンでしたこと</h2><p>今回のインターンでは、あるAPIを用いてVue.jsでアプリケーションを1つ立案から実装まで4週間で行うことを目標にしました。</p><p>制作するアプリケーションについて大まかなテーマは与えられていましたが、具体的な機能や構成などは社員の方々と相談して作り上げていく必要がありました。そのため、最初の1週間は市場調査や現行のサービスの良い点と改善出来る点を洗い出すことにほとんどを費やしました。自分達が作るものについてここまで真剣に議論する機会は今まで無かったため、難しさもありましたが非常に刺激的で良い経験になったと思います。</p><h2 id="インターン生の1日"><a href="#インターン生の1日" class="headerlink" title="インターン生の1日"></a>インターン生の1日</h2><p>期間中、1日の流れは以下のようになっていました。</p><p><strong>9:30～ 作業開始</strong><br>貸与PCを立ち上げて作業を開始します。<br>Slackに今日やる予定のタスクを書きだし、メールや社内チャットを確認してから業務に移ります。<br><strong>10:30～ 朝会</strong><br>プロジェクト内のメンバー同士で、自分の前日までの進捗と今日行う予定の内容を共有します。<br>プロジェクト全体の予定の調整など、仕事のリアルな空気感の一端に触れることが出来ます。もちろん自分の予定なども発言するので、困っている部分があれば共有してすぐに助けていただくことも可能でした。<br><strong>12:00～ お昼休憩</strong><br>1時間の休憩を取ります。リモートでの開催なので、ご飯を食べたり家事をしたりとかなり自由に過ごしていました。インターン生同士のランチ会も開催されており、オンラインでも他の参加者の方との親睦を深めることが出来ました。<br><strong>13:00～ 午後の作業</strong><br>休憩でリフレッシュしたら、午後の作業に取り掛かります。<br>分からないことがあればSlackで質問するとメンターの方がすぐに飛んできて一緒に解決策を考えていただけます。リモートワークで画面を見せて手元で説明できないなど難しい点もありましたが、いくつかの区切りでオンライン会議を開きアプリのデモなどを行いながら途中経過を報告する機会を作っていただけました。<br>また、インターン生に向けて各部門のトップの方が行う講義も開催されました。どの登壇者の方もそれぞれ強烈な個性があり、これからに向けて非常に大きな刺激となりました。<br><strong>18:30～ 作業終了</strong><br>その日の内容を日報に書き、社員の方に報告して1日の作業終了です。<br>日によってはこの後にオンライン飲みや競技プログラミングのバーチャルコンテストが開催され、他の参加者の方や社員の方と交流します。</p><p><img src="/images/20200921/vc.jpg" alt=""></p><h2 id="インターンでの学び"><a href="#インターンでの学び" class="headerlink" title="インターンでの学び"></a>インターンでの学び</h2><p>今回のインターンでは技術面、ビジネス面の両面で成長することが出来たように感じます。</p><h3 id="技術面"><a href="#技術面" class="headerlink" title="技術面"></a>技術面</h3><p>まず、技術面ではVue.js未経験の状態から1つアプリケーションを作り上げることが出来るところまで進歩することが出来ました。当初は「コンポーネント？？ライフサイクル？？」という状態でしたが、メンターの方のサポートなどを通じて少しずつ内容を理解することができ、インターン後半は新しい機能をサポートなしで素早く実装することが出来るようになりました。Vue CLIなどで簡単にプロジェクトを始めることができ、単一ファイルコンポーネントなどコード構成の見通しが良くなる仕組みが詰まったフレームワークなので、これからも積極的に触れていきたいと思います。</p><h3 id="ビジネス面"><a href="#ビジネス面" class="headerlink" title="ビジネス面"></a>ビジネス面</h3><p>次に、ビジネス面では市場の現状を捉えてそこからどのように新しい価値を生み出していくかについて深く知ることが出来たと感じています。既存のものをより発展させたアイデアや今まで無かった掛け合わせを取り入れたアイデアなどを現役のITコンサルティングに携わる方と議論する時間はとても楽しく、個人で開発を行っているとなかなかできない経験をさせていただきました。<br>さらに今回はMaaS(Mobility as a Service)事業に携わることで、過密、過疎地における交通などの社会問題やそれをITの力で解決する方法について考えるきっかけになりました。コロナ禍で人の移動に様々な制限が課せられる中、より良い交通システムを生み出す重要性を感じました。</p><h3 id="成果発表とフィードバック"><a href="#成果発表とフィードバック" class="headerlink" title="成果発表とフィードバック"></a>成果発表とフィードバック</h3><p><img src="/images/20200921/%E6%88%90%E6%9E%9C%E7%99%BA%E8%A1%A8.png" alt=""></p><p>また、インターン終了直前に行った最終発表では発表をするだけでなく4週間を通じてのフィードバックもいただくことが出来ます。リモートで大変な状況の中でしたが、自分のアイデアや実装内容についてポジティブな声をいただけた時は非常に嬉しかったです。</p><p>さらに全く別のプロジェクトに関わるインターン生の方の発表も聞くことになります。多岐に渡る分野の話が聞け、どれも興味深かったです。私の実力不足で内容が分からない部分もあったので今後もがんばろうという刺激になりました。</p><h2 id="感想、結び"><a href="#感想、結び" class="headerlink" title="感想、結び"></a>感想、結び</h2><p>今回のEngineer Campは、リモートながらインターンとしてのクオリティの高さや参加者同士の交流などを平常時同様にしようとしてくださる工夫を随所に感じる非常に楽しいインターンでした。</p><p>他のインターン生の方だけではなく、社員の方も忙しい中でしっかりと学習やそれらのアウトプットをされている方ばかりだったので、良い影響を受けることができこれからにつながるインターンだったと感じています。</p><p>最後になりますが、受入先のプロジェクトの皆様はもちろん、この期間を通じて私と関わってくださった皆様、ありがとうございました！</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="https://future-architect.github.io/articles/20200920/">Future Engineer Camp 2020 参加記</a></li><li><a href="https://future-architect.github.io/articles/20200919/">Engineer CampでSQLフォーマッタを開発しました</a></li><li><a href="https://future-architect.github.io/articles/20200913/">フューチャーの2020 夏季インターンに参加してみた</a></li></ul><h2 id="画像について"><a href="#画像について" class="headerlink" title="画像について"></a>画像について</h2><ul><li><a href="https://www.irasutoya.com/2017/07/blog-post_41.html" target="_blank" rel="noopener">立ち乗り二輪車に乗る人のイラスト（女性）</a>｜いらすとや </li><li><a href="https://www.irasutoya.com/2017/07/blog-post_86.html" target="_blank" rel="noopener">立ち乗り二輪車に乗る人のイラスト（男性）</a>｜いらすとや</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200921/%E5%9B%B32.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h1&gt;&lt;p&gt;はじめまして。フ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
      <category term="採用" scheme="https://future-architect.github.io/tags/%E6%8E%A1%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Future Engineer Camp 2020 参加記</title>
    <link href="https://future-architect.github.io/articles/20200920/"/>
    <id>https://future-architect.github.io/articles/20200920/</id>
    <published>2020-09-19T15:00:00.000Z</published>
    <updated>2020-09-18T10:17:48.496Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200920/factory-3550550_1280.png"><p><a href="https://pixabay.com/ja/users/ArtsyBee-462611/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3550550" target="_blank" rel="noopener">Oberholster Venita</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3550550" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。Future Engineer Camp 2020に参加しました齋藤です。<br>インターンシップやその前のできごとを書いていきます。</p><p>なお、今回隣のチームのインターン生だった中山さんの記事が既に技術ブログにあります。そちらもぜひ参考にしてください。</p><ul><li><a href="https://future-architect.github.io/articles/20200913/">フューチャーの2020 夏季インターンに参加してみた</a></li></ul><h2 id="インターンシップ参加前の技術経験"><a href="#インターンシップ参加前の技術経験" class="headerlink" title="インターンシップ参加前の技術経験"></a>インターンシップ参加前の技術経験</h2><p>インターンシップに参加する前の技術経験は次の通りです。</p><ul><li>使用言語: <ul><li>C++: 競技プログラミング、研究、授業</li><li>Python3: 趣味、授業</li><li>Go: 入門書を一通り終えた</li></ul></li><li>開発経験: 技術系アルバイト、インターン一切なし</li><li>資格: 応用情報技術者</li></ul><p>このように、開発を業務として行ったことはない状態でした。</p><h2 id="インターン前"><a href="#インターン前" class="headerlink" title="インターン前"></a>インターン前</h2><h3 id="参加するきっかけ"><a href="#参加するきっかけ" class="headerlink" title="参加するきっかけ"></a>参加するきっかけ</h3><p>私は競技プログラミング（競プロ）に取り組んでおり、競プロサイトAtCoderと就活支援サイトであるサポーターズ共催のインターン説明会イベントに参加しました。いくつかの企業の説明を受けた上で、フューチャーが</p><ul><li>ITコンサルながら、開発、実装、運用まで行っており、高い技術力を持った方が多数在籍していること</li><li>「初めてに挑戦する」「ないものはつくる」といった理念に惹かれたこと</li><li>インターンが4週間と結構長く、学びが多そうと感じたこと</li></ul><p>などの理由でフューチャーのインターンに参加したいと思いました。</p><h3 id="インターン選考"><a href="#インターン選考" class="headerlink" title="インターン選考"></a>インターン選考</h3><p>インターンの説明はこちらをご覧ください。<br><a href="https://future-architect.github.io/articles/20200606/">フューチャー夏のインターン2020。リモート開催予定です</a></p><p>技術系のインターンEngineer Campは10個のコースに分かれており、②スマート工場IoT設計開発を選択しました。理由としてはバックエンド開発に興味があり、また、研究がIoTに関係していたからです。</p><p>選考はES+コーディング試験→オンライン面接1回でした。面接は受入プロジェクトから2名が面接官で、研究や技術的な話が中心でした。また、雰囲気は終始和やかで、殺伐な雰囲気は感じませんでした。<br>コーディング試験はほぼ競プロらしい問題で、しかも、後半の問題は結構な難易度だと感じました。フューチャーが競プロの活用に積極的なのは承知していましたが、それでも意外でした。ただ、インターン中に競プロの活用理由として「既存のライブラリやツールの活用では解決できない時に、競プロの力が活きてくる」といった旨の発言を聞き、なるほどと思いました。</p><p>無事合格になり、インターンに参加することが決まりました。</p><h3 id="インターン中"><a href="#インターン中" class="headerlink" title="インターン中"></a>インターン中</h3><p>インターンシップは終始リモートで、4週間行われました。実施時間は平日に1日8時間でした。<br>社員の方々もリモートワークでした。社員さんの中には「プロジェクトの他の社員と実際に会ったことがない」という方もいらっしゃって、リモートワークに完全に対応できていると感じました。Slackやビデオ会議ツールを活用して、業務に取り組みました。</p><h4 id="開発概要"><a href="#開発概要" class="headerlink" title="開発概要"></a>開発概要</h4><p>プロジェクトは工場システムの開発で、物流の状況や製造計画情報を作業員の端にはいったアプリ上で管理・閲覧できることです。私が行ったのは工場システムのアプリのバックエンド開発で、概要は以下の通りです。</p><ul><li>Swaggerを用いたREST API定義</li><li>DynamoDBのテーブルの設計</li><li>ハンドラや、DB操作をGoで実装</li><li>テストの実装、実施　</li></ul><h4 id="使用技術"><a href="#使用技術" class="headerlink" title="使用技術"></a>使用技術</h4><p>次の技術を使用しました。</p><ul><li>Go言語</li><li>Swagger (go-swagger)</li><li>AWS<ul><li>DynamoDB</li><li>Lambda</li><li>API Gateway</li></ul></li></ul><p>また、開発環境として、次のものを使用しました。</p><ul><li>Git / GitHub</li><li>CircleCI</li></ul><h4 id="学んだこと"><a href="#学んだこと" class="headerlink" title="学んだこと"></a>学んだこと</h4><p>4週間で多くのことを、技術面、開発面のそれぞれで学べたと思います。まずは技術面から。</p><ul><li>Go言語での開発のお作法（エラーハンドリング等）<ul><li>コードレビューを受けたり、既存のコードを読んだりして、身に付けました</li></ul></li><li>Table Driven Test(TDT)の仕方<ul><li>コードが書きやすいし、読みやすい</li></ul></li><li>DynamoDBや、LambdaなどのAWS技術の理解<ul><li>DynamoDB(NoSQL）のキーの種類、特徴</li></ul></li></ul><p>綺麗なコーディングや、テストは、趣味での開発ではおろそかになりがちですが、しっかりと学べたと思います。<br>続いて、開発面です。</p><ul><li>GitHubを用いた開発手法</li><li>ドキュメント整備<ul><li>GitHubにdocs/にまとめられていて、随時更新</li></ul></li><li>Circle CIを用いたテストの設定方法</li><li>Slackでのコミュニケーション</li></ul><p>チーム開発の流れや、コミュニケーションツールの活用方法を学べましたし、今後も活用できると感じました。</p><h3 id="感想・振り返り"><a href="#感想・振り返り" class="headerlink" title="感想・振り返り"></a>感想・振り返り</h3><p>インターン全体を通して、次のことを感じました。</p><ul><li>バックエンド開発を実際に近い業務ができ、業務のイメージが掴めた</li><li>Go言語は書きやすいし、読みやすい<ul><li>今後も学んでいきたい言語</li></ul></li><li>決められた時間内に仕事を行うことの大変さ<ul><li>だらけずに時間内にパフォーマンスを発揮する重要性を感じました</li></ul></li><li>タスクの割り当てが親切で、成長を実感できた<ul><li>タスクが修正→実装→設計＋実装とステップアップしていくのが良かったです</li></ul></li><li>Future Tech Blogがとても参考になった<ul><li>開発で困って検索したときにトップに出ることがよくありました</li><li>積極的な技術発信は好印象でした</li></ul></li></ul><p>まずはバックエンド開発の主要な技術や、開発について、多数の学びがありました。社員さんからのコメントなどからの収穫も多く、インターンに参加して良かったと感じました。<br>また、コミュニケーションの重要性も感じました。ドキュメントが十分に整っていても、新たに機能を追加するときなどには社員さんとのやりとりは必要不可欠でしたし、特にわからないことを明確にすることが重要だと感じました。</p><p>今回のインターンで多方面のことで多くの学び、気づきがあったと実感しました。</p><h2 id="今後に向けて"><a href="#今後に向けて" class="headerlink" title="今後に向けて"></a>今後に向けて</h2><p>次のことを今後取り組みたいと思っています。</p><ul><li>開発でのコミュニケーション能力を磨く<ul><li>作業ログの作成等を積極的に行う（特にリモートワークで重要）</li><li>分からないこと・行ったことを明確にして伝える</li></ul></li><li>学んだ技術を個人で一から使ってみる<ul><li>swaggerの環境構築など</li><li>インフラ面の理解も深めたい</li></ul></li></ul><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>実際の開発業務の形で様々なタスクを取り組み、様々なコメントを頂いたことは大きな学びになりました。</p><p>受け入れてくれたプロジェクトのみなさま、HRのみなさま本当にありがとうござました。</p><img src="/images/20200920/発表.png"><img src="/images/20200920/集合.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200920/factory-3550550_1280.png&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/ArtsyBee-462611/?utm_source=link-attribution
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="工場" scheme="https://future-architect.github.io/tags/%E5%B7%A5%E5%A0%B4/"/>
    
      <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Engineer CampでSQLフォーマッタを開発しました</title>
    <link href="https://future-architect.github.io/articles/20200919/"/>
    <id>https://future-architect.github.io/articles/20200919/</id>
    <published>2020-09-18T15:00:00.000Z</published>
    <updated>2020-09-18T09:01:12.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。フューチャーのインターン”Engineer Camp”に参加した中村と申します。</p><p>フューチャーのインターンについては<a href="https://future-architect.github.io/articles/20200606/">こちらの記事</a>をご覧ください！</p><p>この記事では、今回のインターンで私が取り組んだ内容を紹介します。</p><h1 id="SQLフォーマッタとは"><a href="#SQLフォーマッタとは" class="headerlink" title="SQLフォーマッタとは"></a>SQLフォーマッタとは</h1><p>今回のインターンで私は、SQLフォーマッタの作成に取り組みました。<br>SQLフォーマッタとは以下のようにSQLのインデントなど整形するツールのことです。</p><img src="/images/20200919/formatter.jpg" class="img-middle-size"><p>SQLフォーマッタを用いることで、SQLの見た目を整える手間を削減したり、チームで統一感があるコーディングを実現できます。</p><h1 id="取り組んだ課題"><a href="#取り組んだ課題" class="headerlink" title="取り組んだ課題"></a>取り組んだ課題</h1><p>もともとフューチャーではuroboroSQL formatterというSQLフォーマッタが開発されていました。（このフォーマッタについては<a href="https://future-architect.github.io/articles/20170228/">こちらの記事</a>をご覧ください！）</p><p>しかし、このフォーマッタはPythonベースで書かれていたため、（現在広く使われているエディタである）VSCodeの拡張機能として動かすことが困難でした。</p><p>そこで、uroboroSQL formatterの後継として、新しいフォーマッタを作成しようと今回のプロジェクトが始まりました。</p><p>新しいフォーマッタが満たすべき条件として、次の3つがあります：</p><ul><li>VSCode上で動く</li><li>2-Way SQL<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>のフォーマットに対応している（≒式中にコメントが入ってもフォーマットが崩れない）</li><li>カラムやAS句等の縦ぞろえに対応している</li></ul><p>これらの条件を満たすフォーマッタを作成することが、今回のインターンでの課題でした。</p><h1 id="使用したOSS"><a href="#使用したOSS" class="headerlink" title="使用したOSS"></a>使用したOSS</h1><p>今回の開発では、すべてのコードを一から書くことはせず、利用できるツールは使っていく方針を取りました。具体的には、以下に示す2つのOSSを使いました。</p><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>PrettierとはVSCodeなど様々なエディタで動作する、OSSのコードフォーマッタです。Prettier単体でもHTMLやCSSといった言語をフォーマットできるのですが、プラグインを作成することで、フォーマット可能な言語をさらに増やすことができます。</p><p>今回のSQLフォーマッタは、このPrettierプラグインとして開発を行いました。このようにすることで、VSCodeからフォーマット対象のコードを取得する処理や、フォーマットしたコードをVSCode上に反映する処理などをPrettierが代わりに行ってくれるため、フォーマット処理に集中して開発を行うことができます。また、Prettierが動作する他のエディタに対しても、今回作成したフォーマッタが使えるというメリットもあります。</p><h2 id="ANTLR"><a href="#ANTLR" class="headerlink" title="ANTLR"></a>ANTLR</h2><p>ANTLRはパーサ（構文解析器）を生成するためのOSSです。パーサとは、コードの処理構造を解析し、結果をASTという表現で出力するプログラムです。（ANTLRやパーサに関する詳しい説明は<a href="https://future-architect.github.io/articles/20200903/">こちらの記事</a>をご覧ください）<br>今回のフォーマッタではパーサとプリンタという二つのプログラムを使用するのですが、そのうちの一つをANTLRで自動生成してしまおう！という作戦です。</p><h1 id="フォーマッタの構成"><a href="#フォーマッタの構成" class="headerlink" title="フォーマッタの構成"></a>フォーマッタの構成</h1><p>今回作成したフォーマッタによる、フォーマット処理の流れを下図に示します。</p><p><img src="/images/20200919/format-flow1.PNG" alt=""></p><p>フォーマット処理は2つのステップからなり、パーサとプリンタという2つのプログラムを用います。</p><p>第1ステップでは、パーサがフォーマット対象のSQLコードを受け取り、コードをASTという表現に変換します。</p><p><img src="/images/20200919/format-flow2.PNG" alt=""></p><p>第2ステップでは、プリンタがASTを受け取り、ASTの情報をもとにフォーマットされたコードを出力します。</p><p><img src="/images/20200919/format-flow3.PNG" alt=""></p><p>この2ステップを組み合わせることで、SQLを入力として受け取り、成形したものを出力するという、フォーマッタの動作が実現できます！</p><p><img src="/images/20200919/format-flow4.PNG" alt=""></p><h1 id="行った作業"><a href="#行った作業" class="headerlink" title="行った作業"></a>行った作業</h1><h2 id="プリンタの開発"><a href="#プリンタの開発" class="headerlink" title="プリンタの開発"></a>プリンタの開発</h2><p>今回のインターンで、私は主にプリンタ（受け取ったASTをもとに、コードを成型して出力するプログラム）の開発を行いました。<br>PrettierプラグインとしてSQLフォーマッタの開発を行ったので、基本的な部分は他のプラグインを参考にすることができたのですが、縦ぞろえや式中コメントへの対応といった独自の機能については、一から実装を行いました。</p><h2 id="ANTLRの高速化"><a href="#ANTLRの高速化" class="headerlink" title="ANTLRの高速化"></a>ANTLRの高速化</h2><p>開発をしていく中で、SQLのパース処理にかかる時間がありえないほど長いという問題が発生しました。<br>メンターの方と調査を行った結果、ANTLR内部の実装にミスがあることが判明し、ANTLRのリポジトリにissueが立つという一幕がありました。</p><p><img src="/images/20200919/image_(2).png" alt=""></p><p>現在は<a href="https://github.com/antlr/antlr4/pull/2905" target="_blank" rel="noopener">修正</a>されているのですが、この修正で今まで90分かけても終わらなかった処理が20秒で終わるようになり、特定の条件下において、約270倍（！）の高速化を行うことができました。</p><h1 id="フォーマット結果"><a href="#フォーマット結果" class="headerlink" title="フォーマット結果"></a>フォーマット結果</h1><p>今回作成したフォーマッタでのフォーマット結果を以下に示します。</p><p>フォーマット前のSQLコードです。とても見にくい…。</p><img src="/images/20200919/before.jpg" class="img-middle-size"><p>フォーマット後のSQLコードです。見やすい！</p><img src="/images/20200919/after.jpg" class="img-middle-size"><p>各カラムや条件式が整えられ、見やすくなっています。また、最後のWHERE句のような、式中にコメントがある場合もうまくフォーマットが行われています。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回作成したSQLフォーマッタは基本的な構文にしか対応しておらず、実際の業務で使えるレベルにはまだ達していません。<br>それでも、実際にVSCode上で動作するフォーマッタを開発できたことはとても嬉しく、今後の糧になるような経験でした。<br>今回は私が行ったタスクの話が中心になってしまいましたが、Engineer Campでは業務以外にも次のような沢山のイベントがありました:</p><ul><li>社内競技プログラミング部主催のバーチャルコンテスト</li><li>コミュ会・ランチ会（インターン生同士が集まり、ざっくばらんに話す会）</li><li>社内ベテランエンジニアの方々による講義</li><li>インターン生主催のzoom飲み会</li></ul><p>こういったイベントがあったため、リモートであっても実際にフューチャー社でインターンをしているんだという実感が持てました。</p><p>また、業務においても、ペアプログラミングや夕会（一日の終わりに集まり、今日の進捗や明日やることを共有する場）をしていただけたため、たくさんの知見を得ることができたと感じています。</p><p>総じて本当に楽しいインターンで、一か月があっという間でした。</p><p>受け入れ先プロジェクトの方々やフューチャーHRの皆さん、本当にありがとうございました！</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://prettier.io/" target="_blank" rel="noopener">https://prettier.io/</a><br><a href="https://www.antlr.org/" target="_blank" rel="noopener">https://www.antlr.org/</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">2-Way SQLの詳細については<a href="https://future-architect.github.io/uroborosql-doc/background/">こちら</a>のドキュメントをご参照ください。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして。フューチャーのインターン”Engineer Camp”に参加した中村と申します。&lt;/p&gt;
&lt;p&gt;フューチャーの
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
      <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
      <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
      <category term="構文解析" scheme="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/"/>
    
      <category term="Antlr" scheme="https://future-architect.github.io/tags/Antlr/"/>
    
  </entry>
  
  <entry>
    <title>SpringBootでDIを駆使したルールエンジン開発</title>
    <link href="https://future-architect.github.io/articles/20200918/"/>
    <id>https://future-architect.github.io/articles/20200918/</id>
    <published>2020-09-17T15:00:00.000Z</published>
    <updated>2020-09-18T01:41:53.476Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200914/">GlyphFeeds連載企画</a>第5弾の記事となります。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、2018年新卒入社の渡邉です。</p><p>第5弾はGlyphFeedsCMSにおけるSpringを駆使したルールエンジンについてです！</p><p>新聞業界の多種多様に変化する業務体系に対してどのようにシステムを構築したかご紹介致します。</p><h1 id="新聞社の業務について"><a href="#新聞社の業務について" class="headerlink" title="新聞社の業務について"></a>新聞社の業務について</h1><p>ニュース（＝コンテンツ）を世の中に配信していく過程において、新聞社には大きく次のアクターが関わります。</p><ul><li><strong>記者</strong>：取材活動を元に記事を書く、写真・動画を撮影する</li><li><strong>デスク</strong>：記者から連携された記事や写真・動画を確認し出稿する</li><li><strong>校閲</strong>：記者やデスクから連携された素材に誤りがないか（誤字脱字・事実関係）を確認する</li><li><strong>紙面制作担当</strong>：新聞制作においてレイアウトを調整する</li><li><strong>デジタル配信担当</strong>：デジタルサイト（各社ニュースサイト、スマホアプリなど）向けにコンテンツを編集・配信する</li></ul><p>記者がニュース記事となる素材(テキストや写真)を生み出し、デスクや校閲と渡って紙面制作担当まで届き、</p><p>新聞やニュースサイトに組み上げられるという大枠でのワークフローはあります。</p><p><img src="/images/20200918/%E6%8A%80%E8%A1%93%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99%E7%B4%A0%E6%9D%901.png" alt=""></p><p>ベースのワークフローをシステムで担保することは当然ですが、</p><p>新聞社では選挙やオリンピックといったイベント事に対して、専用のチーム（≒組織）が組成され、<strong>通常のフローとはことなるワークフローをまわす</strong>ことがよくあります。</p><p><img src="/images/20200918/%E6%8A%80%E8%A1%93%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99%E7%B4%A0%E6%9D%902.png" alt=""></p><p>各素材に対してアクターがどんなアクションをしたか、素材の属性情報（新聞社では1素材に対して約500程の属性がある）によって全く異なるフロー・処理を行う必要があります。ここで示したフローはごく一部であり、実際の業務では時と場合により<strong>様々な素材に対して様々なワークフローでニュース記事が作られます。</strong></p><p>つまり、まともにシステムを構築しようとすると、莫大なパターンの業務ロジックを実装しないといけない、しかもそのパターンがシステム稼動後も組織変更や業務変更によって増減してしまいます。</p><p>上記のような複雑な業務に対応するため、ビジネスロジックを部品化して自由に組み合わせることができる<strong>ルールエンジン</strong>という仕組みで実現しました。</p><h1 id="ルールエンジンの概要"><a href="#ルールエンジンの概要" class="headerlink" title="ルールエンジンの概要"></a>ルールエンジンの概要</h1><p>GlyphFeedsのルールエンジンの全体概要は以下の図のようになっています。</p><p><img src="/images/20200918/overview.png" alt=""></p><p>GlyphFeedsで管理する素材データに対し、画面などから特定のアクション（例えば保存や出稿など）が実行されると、そのアクションに対応する各条件に素材データがマッチするか判定し、マッチした条件に対応する処理グループが実行されます。</p><p>処理グループ内では、複数の定義済ルールエンジン処理を自由に組み合わせることができ、これによって自動化したい操作を実現しています。</p><h3 id="処理グループ"><a href="#処理グループ" class="headerlink" title="処理グループ"></a>処理グループ</h3><p>処理グループの部分について、実際にはさらにメイン処理グループとサブ処理グループに分かれています。</p><p>メイン処理グループは１つの条件に対して１つ、サブ処理グループは複数定義することができ、サブ処理グループには追加で判定条件を指定できます。メイン処理グループは基本的に同期で、サブ処理グループは非同期で実行されます。メイン処理グループから非同期に設定することも可能です。</p><p><img src="/images/20200918/procgroup.png" alt=""></p><h3 id="処理の定義方法"><a href="#処理の定義方法" class="headerlink" title="処理の定義方法"></a>処理の定義方法</h3><p>上述した内容はすべてRDS登録されたルールエンジン定義に従います。</p><p>各アクション別の処理条件、条件一致した際に実行される処理、各処理に渡すパラメータなどが定義されています。定義アップロード時にファイル内容を解析し、RDS上のテーブルにデータを格納しています。</p><h1 id="どう実現したか？"><a href="#どう実現したか？" class="headerlink" title="どう実現したか？"></a>どう実現したか？</h1><p>さて、ここからはこのルールエンジンが具体的にどのように実装されているのかについて掻い摘んで説明させていただきます。</p><p>以下の図で示す通り、実装上はルールエンジン実行とメイン処理実行、サブ処理実行、処理グループ実行、個別処理に分かれています。画面などで素材に対してアクションが実行されると、ルールエンジン実行のREST APIが呼び出されそこから個別処理が開始します。</p><p><img src="/images/20200918/architecture.png" alt=""></p><h3 id="ルールエンジン実行"><a href="#ルールエンジン実行" class="headerlink" title="ルールエンジン実行"></a>ルールエンジン実行</h3><p>個別処理の実行を担うREST APIです。</p><p>素材の情報と実行に必要なパラメータを受け取り、ルールエンジン定義を読み込んで条件判定を行い実行すべき処理を特定します。そこから、メイン処理実行とサブ処理実行が呼び出されます。</p><h3 id="メイン処理実行・サブ処理実行"><a href="#メイン処理実行・サブ処理実行" class="headerlink" title="メイン処理実行・サブ処理実行"></a>メイン処理実行・サブ処理実行</h3><p>メイン処理実行とサブ処理実行はSpring BootのAsyncスレッドを利用して実装されています。</p><p>長くなってしまうのでここでは詳細は割愛しますが、AsyncスレッドとJava標準のCompletableFutureを組み合わせており、非同期実行でありながらメイン処理実行部分は同期的にレスポンスを返すことができるようになっています。</p><h3 id="処理グループ実行・ルールエンジン個別処理"><a href="#処理グループ実行・ルールエンジン個別処理" class="headerlink" title="処理グループ実行・ルールエンジン個別処理"></a>処理グループ実行・ルールエンジン個別処理</h3><p>ここではSpringのDI（Dependency Injection）の仕組みを利用して、定義に従い実行時に動的に処理を切り替えます。</p><p>各処理グループ内には最大で10個までの処理を定義することができ、定義された順にSpringのDIコンテナから対応するルールエンジン個別処理のBeanを取得して処理を実行していきます。</p><p>各ルールエンジン個別処理の実装クラスは共通のインターフェースをimplementしており、コンテナ登録時のBean IDをルールエンジン定義のIDと紐づけることにより取得するBeanを特定し、定義ベースでのDIを実現しています。これにより、ソースコードに一切手を加えることなく定義のみで柔軟に実行する処理を切り替えることが可能となります。</p><p>ルールエンジン個別処理と処理グループ実行部分の依存関係が疎（動的）になっているため、新たにルールエンジン個別処理を追加するケースでも、1つルールエンジン個別処理を実装し、それをルールエンジン定義に指定するだけですぐに使えるようになりメンテナンス性が高い仕組みとなっています。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>各処理には共通のデータコンテキストが渡され、処理間のデータのやり取りはすべてコンテキストを通して行われます。</p><p>細かい部分はお見せできなくて申し訳ないのですが、少しでもイメージが沸くようにルールエンジン個別処理のインターフェース定義と個別処理、処理グループ実行処理の実装サンプル（大枠だけですが💦）を掲載します。</p><figure class="highlight java"><figcaption><span>WfInstructedProcess.java（個別処理のインターフェース） </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WfInstructedProcess</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseProcessParam</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// パラメータチェックおよび解析用のメソッド</span></span><br><span class="line"><span class="function">T <span class="title">prepareParam</span><span class="params">(WfProcessContext context, WfDefProcess process)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 処理実行用のメソッド</span></span><br><span class="line"><span class="function">WfResult <span class="title">execute</span><span class="params">(WfProcessContext context, T param)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>SampleProcess.java（個別処理の実装クラス） </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"Proc01"</span>) <span class="comment">// Bean IDにルールエンジン定義と対応する処理IDを指定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleProcess</span> <span class="keyword">implements</span> <span class="title">WfInstructedProcess</span>&lt;<span class="title">SampleParam</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SampleParam <span class="title">prepareParam</span><span class="params">(WfProcessContext context, WfDefProcess process)</span> </span>&#123;</span><br><span class="line"><span class="comment">// WfDefProcessにはルールエンジン定義の情報が格納されています</span></span><br><span class="line"><span class="comment">// ルールエンジン定義にはパラメータ1～10までの定義欄があり、その値を各処理専用のパラメータクラスに詰めなおします</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SampleParam(process.getParam1(), process.getParam2());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WfResult <span class="title">execute</span><span class="params">(WfProcessContext context, SampleParam param)</span> </span>&#123;</span><br><span class="line"><span class="comment">// paramにはprepareParamで作成したパラメータが格納されています</span></span><br><span class="line"><span class="comment">// 戻り値のWfResultは処理結果を示すenum型で、処理フローを制御します（処理グループ実行を途中で止めるetc）</span></span><br><span class="line"><span class="keyword">return</span> WfResult.NORMAL_END;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ProcessGroupExecLogic.java（処理グループ実行ロジック） </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessGroupExecLogic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定された処理グループ内に定義されている処理を順次実行する</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param パラメータ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 処理結果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProcessGroupExecResult <span class="title">execute</span><span class="params">(ProcessGroupExecParam param)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ProcessGroupExecResult groupResult = <span class="keyword">new</span> ProcessGroupExecResult();</span><br><span class="line"><span class="comment">/** 処理グループ実行処理結果の初期化など */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// コンテキストに対象素材データなどを格納</span></span><br><span class="line">WfProcessContext context = <span class="keyword">new</span> WfProcessContext();</span><br><span class="line">context.setData(param.getData());</span><br><span class="line"><span class="comment">/** （中略） */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 処理グループに定義されている処理を順次実行</span></span><br><span class="line"><span class="keyword">for</span> (WfDefProcess defProc : param.getDefProcessList()) &#123;</span><br><span class="line"><span class="comment">// コンテナから実行する個別処理のBeanを取得</span></span><br><span class="line">WfInstructedProcess&lt;BaseProcessParam&gt; instructedProcess = springContext.getBean(defProc.getProcCd(), WfInstructedProcess<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BaseProcessParam procParam;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// パラメータのチェック、解析</span></span><br><span class="line">procParam = instructedProcess.prepareParam(context, defProc);</span><br><span class="line">&#125; <span class="keyword">catch</span> (WfParamInvalidException e) &#123;</span><br><span class="line"><span class="comment">/** パラメータ不正時の処理 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** （中略） */</span></span><br><span class="line"><span class="comment">// ルールエンジン個別処理の実行</span></span><br><span class="line">WfResult result = instructedProcess.execute(context, procParam);</span><br><span class="line"><span class="keyword">if</span> (result == ERROR_END) &#123;</span><br><span class="line"><span class="comment">/** 異常終了時処理 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** （中略） */</span></span><br><span class="line"><span class="keyword">if</span> (result == NORMAL_END_STOP) &#123;</span><br><span class="line"><span class="comment">/** 処理中断 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">/** 例外発生時処理 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** （中略） */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> groupResult;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GlyphFeedsはサービスとして展開しており、ユーザ企業単位の個別カスタマイズが入ることがあります。</p><p>そういったケースでも個別処理の追加はWfInstructedProcessの実装クラス（とその処理のパラメータクラス）を作成してルールエンジン定義を変更するだけ。既存のエンジン部分などには手を加える必要がないので処理追加の要望はもう怖くありません😀</p><p>余談ですが、標準でAWS Lambda実行のルールエンジン個別処理も用意されており、簡易な処理であればそちらを利用することも可能です。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はGlyphFeedsの根幹部分を担っているといっても過言ではない、ルールエンジンについて、仕組みと実装方法の概要をご説明させていただきました。</p><p>Springの機能を活用することで、メンテナンス性の高いルールベースエンジン処理を比較的簡単に実現することができますので、少しでも参考になれば幸いです。</p><p>さて、GlyphFeedsではこれまでの4回でご紹介してきた内容以外にもさまざまな技術要素が含まれています。また機会がありましたらそれらについてもご紹介させていただきますので、次回のGlyphFeeds連載企画までお待ちください！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">実際にはルールエンジン定義の取り込み部分などでもう少し追加で実装が必要となる箇所があります。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200914/&quot;&gt;GlyphFeeds連載企画&lt;/a&gt;第5弾の記事となります。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="ルールエンジン" scheme="https://future-architect.github.io/tags/%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3/"/>
    
      <category term="SpringBoot" scheme="https://future-architect.github.io/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="https://future-architect.github.io/tags/Spring/"/>
    
      <category term="DI" scheme="https://future-architect.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>デスクトップWebアプリのモバイル化における考え方・Tips</title>
    <link href="https://future-architect.github.io/articles/20200917/"/>
    <id>https://future-architect.github.io/articles/20200917/</id>
    <published>2020-09-16T15:00:00.000Z</published>
    <updated>2020-09-17T02:46:03.548Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200914/">GlyphFeeds連載企画</a>第4弾の記事となります。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、2019年入社、TIGメディアユニット所属の中村立基です。</p><p>今回はメディア業界向けクラウドサービスGlyphFeedsCMSのモバイル化を例に、Webアプリケーションをモバイル化する際の考え方や手法について書きます。</p><p>Webアプリケーションをモバイル化する際の参考になれば幸いです。</p><h1 id="モバイル化の方針"><a href="#モバイル化の方針" class="headerlink" title="モバイル化の方針"></a>モバイル化の方針</h1><p>昨今「モバイルファースト」という言葉が広まる中、スマートフォンを始めとするモバイル端末利用の風潮は強まっています。それに伴いWebアプリケーションもモバイル端末での利用シーンが拡大しています。</p><p>しかし、ただ既存のWebアプリケーションをモバイル端末で表示するだけではアプリの機能などを十分に利用できない場合が多い為、適切にアプリケーションに手を加える必要があります。</p><p>今回GlyphFeedsCMSでは、以下の考え方の下、モバイル化を行いました。</p><p><strong>1. アプリケーションのユーザを再定義、業務フロー・要件の明確化</strong><br><strong>2. デバイスの特性を考慮した機能設計</strong><br><strong>3. シンプルで誰にでも使いやすいデザイン</strong></p><h2 id="1-アプリケーションのユーザを再定義、業務フロー・要件の明確化"><a href="#1-アプリケーションのユーザを再定義、業務フロー・要件の明確化" class="headerlink" title="1. アプリケーションのユーザを再定義、業務フロー・要件の明確化"></a>1. アプリケーションのユーザを再定義、業務フロー・要件の明確化</h2><p>GlyphFeedsCMSは元来新聞社向けの基幹システムとして開発されました。そこで今回モバイル化するにあたり、ユーザを「記者」に設定して、記者が取材し、記事を執筆、送稿するといったユーザが行う業務シナリオから検討することで、必要な要件を定義しました。その中で、</p><ul><li><strong>移動中での記事の執筆が可能になること</strong></li><li><strong>取材・インタビューしながらそのまま記事を作成できること</strong></li><li><strong>緊急時の取材への対応速度向上が見込めること</strong></li></ul><p>といったユーザが享受できるメリットも明確化することができました。<br>同じアプリケーションと言えど、<strong>デバイス毎にユーザが変わる事を想定して利用シーンや必要な機能を再検討する</strong>ことが重要です。</p><h2 id="2-デバイスの特性を考慮した機能設計"><a href="#2-デバイスの特性を考慮した機能設計" class="headerlink" title="2. デバイスの特性を考慮した機能設計"></a>2. デバイスの特性を考慮した機能設計</h2><p>既存のWebアプリケーションをモバイル化する際には幾つか問題点があります。デスクトップアプリで行っていた業務をモバイル端末で行おうとすると機能的な制約が多々発生します。</p><p>例えば、画面の大きさが極端に小さくなることや、メモリー容量・バッテリー駆動時間などを考慮した機能設計にしなければなりません。その為下記の例に挙げる様にモバイル端末の持つ特徴に合わせて機能設計しました。</p><ul><li><strong>バッテリー駆動時間</strong>：アプリケーションの標準テーマにダークモードを採用し、バッテリーの消費電力抑制</li><li><strong>メモリ容量・通信速度</strong>：デスクトップと比較して大容量のデータ通信には不向きな為、モバイル端末で不要な機能の削減</li></ul><h2 id="3-シンプルで誰にでも使いやすいデザイン"><a href="#3-シンプルで誰にでも使いやすいデザイン" class="headerlink" title="3. シンプルで誰にでも使いやすいデザイン"></a>3. シンプルで誰にでも使いやすいデザイン</h2><p>モバイル化において特に重視した点は<strong>UI/UXデザイン</strong>です。</p><p>キーボードとマウスで操作するデスクトップアプリに比べて、モバイル端末ではタッチ操作が基本となります。その為、<strong>「シンプルで誰にでも使いやすい」</strong>ことをコンセプトに、より直感的に操作できるように画面設計を行いました。<br>下記は特に考慮したポイントです。</p><ul><li>画面上に表示されるアイコンや入力項目の要素を極力削減し、<strong>ユーザが押すアイコンを間違えないような配慮</strong></li><li>マテリアル・デザインを踏襲した<strong>ユーザがより直感的に操作できる画面レイアウト</strong></li><li><strong>「ディスプレイを長時間見続けても目が疲れにくい」「利用頻度の高いオブジェクトを目立たせる」</strong>等に留意した統一感のある配色<br><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%904.png" alt=""></li></ul><h1 id="モバイル化の手法"><a href="#モバイル化の手法" class="headerlink" title="モバイル化の手法"></a>モバイル化の手法</h1><p>一口にモバイル化と言っても、その手法によって下記の様に3つのパターンが存在します。</p><p><strong>1. 動的配信</strong><br><strong>2. レスポンシブWebデザイン</strong><br><strong>3. アダプティブデザイン</strong></p><p>それぞれ特徴を簡単に説明します。</p><h2 id="1-動的配信"><a href="#1-動的配信" class="headerlink" title="1. 動的配信"></a>1. 動的配信</h2><p>サーバーサイドでPC・スマートフォン・タブレットなどのユーザエージェント情報を検出し、対応する個別のテンプレートをHTML、CSSで組み立てて配信する方法です。デバイス毎に適切なデザインのコンテンツ配信が可能ですが、エラー対応やテンプレートの調整等の開発コストが大きい側面があります。</p><p><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%901.png" alt=""></p><h2 id="2-レスポンシブWebデザイン"><a href="#2-レスポンシブWebデザイン" class="headerlink" title="2. レスポンシブWebデザイン"></a>2. レスポンシブWebデザイン</h2><p>主にCSSのメディアクエリを用いてスクリーンサイズや条件に応じて表示を最適化する方法です。<br>デバイスによる画面幅によって、要素の表示/非表示等のレイアウトを切り替えます。モバイル端末で表示する場合、デスクトップ用画面を読み込む為表示速度が遅くなる場合があります。<br><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%902.png" alt=""></p><h2 id="3-アダプティブデザイン"><a href="#3-アダプティブデザイン" class="headerlink" title="3. アダプティブデザイン"></a>3. アダプティブデザイン</h2><p>デバイスやコンテクストに応じてコンテンツを最適なデザインで提供する方法です。JavaScriptなどを利用してクライアントサイドで最適化したページを表示することが可能で、デスクトップ・モバイルそれぞれに合わせた専用要素を持つのでデバイスの特性を生かしたデザインや機能が実装できます。</p><p><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%903.png" alt=""></p><p>GlyphFeedsCMSのモバイル化にはアダプティブデザインを採用しています。<br>下記の様にモバイル画面用アプリ配下にある共通SDKを読み込むことで、モバイルに適した専用要素を切り出して実装できる構造になっています。</p><p><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%906.png" alt=""><br>この様な構造を取ることで、共通化している部分のメンテナンスコストを抑えつつ、デスクトップ・モバイルそれぞれの画面に適したデザインでアプリケーションを実装することができます。より具体的な実装方法やパターンなどに関しては、また別の機会でより深堀できればと思います。</p><p><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%908.png" alt=""></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はGlyphFeedsCMSを例にデスクトップ用Webアプリケーションをモバイル化する際の方針や手法を紹介しました。<br>デバイス毎にユーザの利用する用途やシーンが異なることを意識して、適切にリデザインすることが重要であるということを少しでも伝えることができていたら幸いです。</p><p>今後より深いテーマについて理解していければと思います。ここまで読んで頂きありがとうございました。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://webtan.impress.co.jp/e/2017/09/07/26299" target="_blank" rel="noopener">これからのスマホ対応。アダプティブデザイン、レスポンシブWebデザイン、動的配信</a><br><a href="https://material.io/design" target="_blank" rel="noopener">Design - Material Design</a></p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a><br><a href="https://future-architect.github.io/articles/20200511/">PJでUIデザインにAtomic Designを導入したらどうだったのか</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200914/&quot;&gt;GlyphFeeds連載企画&lt;/a&gt;第4弾の記事となります。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
      <category term="モバイルアプリ" scheme="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
      <category term="UI" scheme="https://future-architect.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>素材受信インターフェースにSQSを活用してみた ～標準キュー vs FIFOキュー～</title>
    <link href="https://future-architect.github.io/articles/20200916/"/>
    <id>https://future-architect.github.io/articles/20200916/</id>
    <published>2020-09-15T15:00:00.000Z</published>
    <updated>2020-09-16T02:18:13.027Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200914/">GlyphFeeds連載企画</a>3つ目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、2017年新卒入社、TIG所属の出口です。</p><p>今回は、GlyphFeedsの素材受信インターフェース構築を介してAmazon Simple Queue Service (SQS) の検証について紹介します。</p><h1 id="素材受信インターフェースとは"><a href="#素材受信インターフェースとは" class="headerlink" title="素材受信インターフェースとは"></a>素材受信インターフェースとは</h1><p>今回紹介する素材受信インターフェースについて簡易ですが説明します。</p><h2 id="役割"><a href="#役割" class="headerlink" title="役割"></a>役割</h2><p>GlyphFeedsにおいて、素材受信インターフェースは、外部システムから受信した素材をコンテンツマネジメントシステム (CMS)に連携する役割を担います。</p><p>ここで言う素材とは、主に以下の2種類です。</p><ul><li>記事素材：タイトル、本文、その他様々な情報 (Jsonファイル)</li><li>画像素材：画像、キャプション、その他様々な情報 (Jsonファイル＋画像ファイル)</li></ul><p>新聞業界、メディア業界では、日夜大量の素材が生み出されています。</p><p>そのため、受信インターフェースは分間数百件の素材を受信するような状況を想定する必要があります。</p><p>SQSを使用することで、素材を一度キューイングした後でCMSに連携する形をとることができます。</p><h2 id="構成概要"><a href="#構成概要" class="headerlink" title="構成概要"></a>構成概要</h2><p>今回構成した素材受信インターフェースの構成概要図は以下になります。<br><img src="/images/20200916/%E5%9B%B31.png" alt=""></p><p>大まかな流れとしては、</p><ol><li>外部システムからSFTP経由でS3バケットに素材が送られる</li><li>S3からSQSに連携し、素材を示すメッセージがキューに積まれる</li><li>定期実行LambdaがSQSからメッセージを取得し、CMSの素材受信用APIを叩く</li></ol><h1 id="比較検証：標準キュー-vs-FIFOキュー"><a href="#比較検証：標準キュー-vs-FIFOキュー" class="headerlink" title="比較検証：標準キュー vs FIFOキュー"></a>比較検証：標準キュー vs FIFOキュー</h1><p>SQSは標準キューとFIFOキューの2種類あります。<br>今回、素材受信インターフェースを構築するにあたり、標準キューとFIFOキューのどちらが適しているか検証を行っています。</p><h2 id="各キューの特徴"><a href="#各キューの特徴" class="headerlink" title="各キューの特徴"></a>各キューの特徴</h2><p>今回の素材受信インターフェースの実装に関連のある、各キューの特徴は以下になります。</p><table><thead><tr><th></th><th>標準キュー</th><th>FIFOキュー</th></tr></thead><tbody><tr><td>順序</td><td>順序保証なし</td><td>First In First Out</td></tr><tr><td>S3イベント連携</td><td>あり</td><td>なし</td></tr></tbody></table><p>FIFOキューは名前の通り、最初に入ったメッセージが最初に取り出されるように順序保証されます。</p><p>素材受信で更新が発生する場合を考慮すると、順序保証によって巻き戻りが起こらないので、順序においてはFIFOキューが本ケースに関しては優位です。</p><p>ただし、<a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/NotificationHowTo.html" target="_blank" rel="noopener">FIFOキューを使用する場合は、S3から直接SQSに連携できない</a>ので一工夫必要です。</p><h2 id="FIFOキューでS3～SQS連携する工夫"><a href="#FIFOキューでS3～SQS連携する工夫" class="headerlink" title="FIFOキューでS3～SQS連携する工夫"></a>FIFOキューでS3～SQS連携する工夫</h2><p>素材受信インターフェース構築当時は、S3イベント通知の送信先として、SQSの標準キューは選択できましたが、FIFOキューは選択できませんでした。そのため、FIFOキューではSQSに連携するのに一工夫いるため、標準キューかFIFOキューかによって、S3～SQS間の構成は下図のように異なります。<br><img src="/images/20200916/%E5%9B%B32.png" alt=""></p><p>FIFOキューの場合は、S3オブジェクトputをトリガーにLambdaを実行し、その処理でFIFOキューにメッセージを積んでいきます。</p><h2 id="検証概要：ロスト率の比較"><a href="#検証概要：ロスト率の比較" class="headerlink" title="検証概要：ロスト率の比較"></a>検証概要：ロスト率の比較</h2><p>PoCでは、素材が取り込まれるまでの時間や、短時間で大量に受信した場合の性能等、様々な観点でテストを行いました。</p><p>今回は標準キューとFIFOキューのどちらを採用するかの決め手となった、S3オブジェクトputされた数に対して、SQSに連携されなかった数の割合：ロスト率のテスト結果を紹介します。</p><p>テストの概要としては、</p><ul><li>S3バケットに素材をputする頻度（受信頻度）を変えて何通りか試行</li><li>各施行において、S3オブジェクトputした数、SQSに連携された数を記録</li></ul><p><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/s3-verify-event-notification/" target="_blank" rel="noopener">AWS公式情報</a>で、「ごくまれに、イベントが失われることもあります。」とあります。<br>実際にどの程度ロストするのか、S3を監視して自動リカバリする機能を用意すれば補える程度に少ないか等、確認する必要がありました。</p><h2 id="ロスト率の差異"><a href="#ロスト率の差異" class="headerlink" title="ロスト率の差異"></a>ロスト率の差異</h2><p>標準キューとFIFOキューそれぞれを使用した場合のロスト率を確認したところ、想定以上に明確な差異が見られました。</p><p><img src="/images/20200916/%E5%9B%B33.png" alt=""></p><p>(※FIFOキューでは常にロスト率0%だったのでグラフは省きます。)</p><p>今回のケースでは標準キューを使用した構成と相性が悪かったのか、受信頻度が高いとロスト率が十%を超える結果に…</p><p>一方でFIFOキューでは受信頻度が高くても、常にロスト率0%という結果になりました。</p><p>これが決め手となり、FIFOキューを採用することになりました。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>GlyphFeedsの素材受信インターフェースの構築を例にSQSの標準キュー、FIFOキューの比較検証の話を紹介させていただきました。</p><p>個人的には、”ごくまれに”が検証するとケース次第で数十%にもなることが意外でした。今回の話を通じて、実際に検証することの重要さを感じていただければと思います。</p><p>FIFOキューではS3イベント連携できないからと、標準キューのみに候補を絞らず、手の届いていない連携箇所を上手く解消してFIFOキューを候補に残したからこそ、今回の意外な結果が得られました。</p><p>サービスをただ使うのではなく、手の届かない箇所は解消方法を考えて活用することで、より適したサービスを用いた、良いシステムの実現に繋がるのではないかと思いました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200914/&quot;&gt;GlyphFeeds連載企画&lt;/a&gt;3つ目の記事です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="sqs" scheme="https://future-architect.github.io/tags/sqs/"/>
    
  </entry>
  
  <entry>
    <title>メディア向けCMSサービスのインフラ構成のポイント</title>
    <link href="https://future-architect.github.io/articles/20200915/"/>
    <id>https://future-architect.github.io/articles/20200915/</id>
    <published>2020-09-14T15:00:00.000Z</published>
    <updated>2020-09-15T00:46:23.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://future-architect.github.io/articles/20200914/">GlyphFeeds</a>連載企画第2弾の記事となります。</p><p>はじめまして、TIG中神です。</p><p>メディア向けCMSクラウドサービス（以下、GlyphFeedsサービス）のインフラを設計・構築を行いました。メディアならではの特性や構成における重要なポイントについていくつかご紹介します。</p><h2 id="メディアCMSの特性"><a href="#メディアCMSの特性" class="headerlink" title="メディアCMSの特性"></a>メディアCMSの特性</h2><p>メディアCMSサービスに求められる非機能要件の中で、特に重要なものとしては以下の3点があげられます。これらの要件はクラウドとの親和性が高いことからGlyphFeedsサービスではクラウドベースのサービスとして設計・構築を行っています。</p><ul><li><strong>①高速なコンテンツ検索ができること</strong></li><li><strong>②24時間365日稼働し、不慮のサービス停止によるダウンタイムを極力短くすること</strong></li><li><strong>③処理量のスパイクに対応できて、かつ柔軟にスケール出来ること</strong></li></ul><h2 id="①高速なコンテンツ検索"><a href="#①高速なコンテンツ検索" class="headerlink" title="①高速なコンテンツ検索"></a>①高速なコンテンツ検索</h2><p>GlyphFeedsサービスの全体像としてはこのようなになっていて、大きく下記のサービス群で構成しています。</p><ol><li>画面を提供するサービス</li><li>APIを提供するサービス</li><li>非同期処理を行うサービス</li><li>コンテンツの加工を行うサービス</li><li>コンテンツデータの蓄積、検索、ステータスの更新を行うサービス</li></ol><p>このうちコンテンツの高速検索においては上記の1、2、3、5のサービス群で実現しています。<br>これらのサービスを、<strong>EC2、ELB、Elasticsearch、DynamoDBといったマネージドサービス</strong>をベースに、なるべくディスクアクセスが入らないように設計・構築しています。<br>性能を引き出すために複数のレイヤーでチューニングを行っていますが、最後の最後までチューニングに苦労したコンピューティングの部分について記載します。</p><p><img src="/images/20200915/image.png" alt=""></p><h3 id="なぜコンテナ（ECS）ではなく仮想サーバー（EC2）を採用したか？"><a href="#なぜコンテナ（ECS）ではなく仮想サーバー（EC2）を採用したか？" class="headerlink" title="なぜコンテナ（ECS）ではなく仮想サーバー（EC2）を採用したか？"></a>なぜコンテナ（ECS）ではなく仮想サーバー（EC2）を採用したか？</h3><p>コンピューティングの部分は、当初コンテナ利用を検討していましたが、導入前の性能テストにて、コンテナよりも仮想サーバーの方がインスンスの性能を使い切れるという結果となり、最終的には仮想サーバーを採用しました。</p><p>以下に検証の概要を記載します。<br>どのような場合もこの結果になるわけではなく、構成や処理特性・ワークロードにより結果は異なってくると思います。</p><h4 id="■検証時の構成"><a href="#■検証時の構成" class="headerlink" title="■検証時の構成"></a>■検証時の構成</h4><p>EC2(Gatling) =&gt; ALB =&gt; <strong>コンピューティング①</strong> =&gt; NLB =&gt; <strong>コンピューティング②</strong> =&gt; Elasticsearch or DynamoDB</p><ul><li>Gatlingを動かすサーバーがボトルネックにならないように無理のないインスタンスタイプを選択して、念のため<a href="https://gatling.io/docs/current/general/operations/" target="_blank" rel="noopener">GatlingのOS Tuning</a>も行っておきます。</li><li><strong>コンピューティング①②</strong>は下記の構成を基準にをベースに「インスタンス数の変更、インスタンスタイプの変更、CPUユニット、メモリの割り当ての変更、JVMヒープ値の変更、コンピューティング①のみEC2構成またはその逆のパターンなど」を様々な組み合わせとなるように変動していいきます。</li></ul><p><strong>コンピューティング①の構成</strong></p><table><thead><tr><th>構成</th><th>インスタンスタイプ</th><th align="center">数量</th><th>OS</th><th>稼働アプリケーション</th></tr></thead><tbody><tr><td>ECSの場合</td><td>m4.large(2vCPU 8GiB)</td><td align="center">2</td><td>ECS-optimized AMI(Linux)</td><td>Spring Bootコンテナ<br>・FROM amazonlinux:2 <br> ・割当500CPUユニット 1500MB <br>・各インスタンスで1つずつ稼働</td></tr><tr><td>EC2の場合</td><td>m4.large(2vCPU 8GiB)</td><td align="center">2</td><td>Amazon Linux 2</td><td>Spring Bootアプリケーション <br>・各インスタンスで1つずつ稼働</td></tr></tbody></table><p><strong>コンピューティング②の構成</strong></p><table><thead><tr><th>構成</th><th>インスタンスタイプ</th><th align="center">数量</th><th>OS</th><th>稼働アプリケーション</th></tr></thead><tbody><tr><td>ECSの場合</td><td>m4.large(2vCPU 8GiB)</td><td align="center">2</td><td>ECS-optimized AMI(Linux)</td><td>gRPCコンテナ<br>・FROM alpine:3.4 <br> ・割当500CPUユニット 1500MB <br>・各インスタンスで1つずつ稼働</td></tr><tr><td>EC2の場合</td><td>m4.large(2vCPU 8GiB)</td><td align="center">2</td><td>Amazon Linux 2</td><td>gRPCアプリケーション <br>・各インスタンスで1つずつ稼働</td></tr></tbody></table><h4 id="■検証結果"><a href="#■検証結果" class="headerlink" title="■検証結果"></a>■検証結果</h4><p>下記は検証結果のグラフの線形のイメージです。当然どちらの構成でも、処理の多重度があがると処理時間も増加してきますが、同等のインスタンスのスペックで見た場合、ECS構成の方が処理多重度が増えると処理時間の劣化が大きいという結論になりました。</p><p>平常時は大きな性能差はありませんが、高負荷時に処理時間が大きく劣化する可能性があるという結論のため仮想サーバー（EC2）構成の採用に至っています。</p><p>なお、ボトルネック調査のためネットワーク・OSの性能情報や処理のトレースなど各種情報を確認しましたが、処理の多重度があがるとコンテナ上のAPIが実行されるまでのタイムラグが徐々に大きくなっているようでした。ネットワークやホストOS側では異常値などは出ていなかったのですが、状況的にはDockerエンジン部分がボトルネックになっている可能性が想定されました。</p><p><img src="/images/20200915/image_2.png" alt=""></p><p>最近だとコンテナ構成の選択肢が増えたので、どのパターンが最もインスタンス性能を使い切れるのか、性能維持やスケールしやすいのか、性能が頭打ちになった場合の挙動はどうなるのか、フットプリントの軽いベースOSに変えた場合の差など機会があれば検証してみたいですね。</p><ul><li>Docker on EC2</li><li>ECS on EC2</li><li>ECS on Fargate</li><li>EKS</li><li>Anthos GKE on AWS </li></ul><h2 id="②できる限りダウンタイムを短くする"><a href="#②できる限りダウンタイムを短くする" class="headerlink" title="②できる限りダウンタイムを短くする"></a>②できる限りダウンタイムを短くする</h2><p>GlyphFeedsサービスでは、マルチAZ構成を取り各インスタンスは必ず冗長構成を取るようにしています。<br>さらにマルチリージョン構成を採用し、単一のリージョン障害に対する可用性を高めています。<br>このように可用性を高める構成を採用していますが、冗長構成を取っても絶対に停止しないわけではないので、OS上のサービスの自動復旧やEC2のAuto Recoveryなどリソースが落ちたらすぐに復旧するような方式を採用し極力ダウンタイムを短くするアプローチとしています。</p><p>■GlyphFeedsサービスにおける主要な要素</p><table><thead><tr><th>カテゴリ</th><th>マネージドサービス</th><th>用途</th></tr></thead><tbody><tr><td>コンピューティング</td><td>EC2</td><td>WEB、API、非同期処理、コンテンツ加工、データ操作API</td></tr><tr><td>コンピューティング</td><td>Lambda</td><td>マネージドサービス間連携、時刻起動処理など</td></tr><tr><td>データベース</td><td>DynamoDB</td><td>コンテンツ（テキスト）格納</td></tr><tr><td>データベース</td><td>RDS</td><td>アプリケーションマスタ格納</td></tr><tr><td>分析</td><td>Elasticsearch Service</td><td>検索エンジン</td></tr><tr><td>ストレージ</td><td>S3</td><td>コンテンツオブジェクト格納</td></tr></tbody></table><h3 id="どのような障害まで想定するか？"><a href="#どのような障害まで想定するか？" class="headerlink" title="どのような障害まで想定するか？"></a>どのような障害まで想定するか？</h3><p>AWSだと、Well-Architectedフレームワークやベストプラクティスに沿って設計/構築するだけで比較的容易にAZ障害に対する対障害性を確保できます。また、東京リージョンを見ても複数のAZで構成されており、自然災害などの物理障害に対しては極めて高い耐性があると思います。</p><p>では、ダウンタイム最少化のためにどのような障害まで想定するか？というところですがAWSでいうと多少検索するだけで過去にどんな障害があったか検索できます。</p><p>過去にマネージドサービスが長時間停止する障害が数回発生していますね。また、それらは単一リージョンに閉じた論理障害です。<br>（センター内の物理的な障害が起因して論理障害になったパターンもあるようですが）</p><p>そのため、複数のリージョンでサービスが稼働する構成の場合は、サービスを継続できていた可能性が高いと想定されます。GlyphFeedsサービスでは単一のリージョンダウンまでは発生しうると想定し、マルチリージョン構成を取ることにより、リージョン停止レベルの大障害が発生しても別リージョンに切り替えることによりダウンタイムを最小化しています。</p><h3 id="構成のポイント"><a href="#構成のポイント" class="headerlink" title="構成のポイント"></a>構成のポイント</h3><p>上記のようにマルチリージョン構成を取ることにより可用性は向上します。</p><p>では、具体的にどのような構成にするか？というところですがDRシナリオにも複数のパターンがありGlyphFeedsサービスでは、コストと効果のバランスを取り、パイロットライトとウォームスタンバイの間くらいの可用性になるように設計し、データのリカバリポイントは5分以内、切替/切戻は60分程度というサービスレベルになっています。</p><img src="/images/20200915/image_3.png" class="img-middle-size"><p>設計やバックアップサイトへの切替についても様々な方式があるので、サービスに適した方式を採用することで切替自体は比較的容易に実現することが可能です。</p><p>どのDRシナリオにしてもポイントになってくるのは非機能要件とクラウド利用料などコストを考慮して最もバランスの良い構成をとること、とデータも含めてメインサイトへの切戻ができることがあげられます。</p><p>より高可用な構成としてマルチクラウドによる構成なども考えられますが、果たしてサービスレベルはあがるのか？意図したように切戻も出来るのか？などこちらも機会があれば検証を行ってみたいですね。</p><h2 id="③柔軟なスケール"><a href="#③柔軟なスケール" class="headerlink" title="③柔軟なスケール"></a>③柔軟なスケール</h2><p>メディアCMS特有かもしれませんが、上の方で記載した特性の中で最も要件として定義が難しく、ぶれやすいのが、処理量のスパイクやデータ量の増加をどう見るか？という点です。メディアCMSでは繁忙期・閑散期というような概念はほぼなく、開催されるイベントの大きさによって著しく処理量や連携データ量（記事、写真、音声、動画などの数量）が増加します。さらに年々の機材の進化で取り扱うデータそのもの（写真、音声、動画など）のサイズが爆発的に大きくなってきています。</p><p>このように外部要因を含めてのサイジング難易度が高いことから、柔軟に自動でスケール出来るマネージドサービスを最大限に活用します。人手を介さず自動でスケールしてくれるという点で多大なメリットがありますがいくつか注意点もあります。</p><h3 id="オートスケールの注意点"><a href="#オートスケールの注意点" class="headerlink" title="オートスケールの注意点"></a>オートスケールの注意点</h3><p>マネージドサービスの裏側ではコンテナやインスタンスが起動してくるので起動が完了するまでの待ち時間が発生します。待ち時間はマネージドサービスにより変わってくると思いますがマネージドサービスによってはスケールが完了するまで数分のタイムラグが発生します。</p><p>短い時間（数分など）に想定の何倍もの処理量が発生するような場合はスケールが追い付かなく、スロットリングが発生しその後タイムアウトや処理遅延が発生する可能性があります。<br>以下のような線形が発生し、あと数回スパイクが発生したら処理のタイムアウトが発生すると思います。<br><img src="/images/20200915/image_4.png" alt=""></p><p>システムのスパイク特性やベースの性能をどう定義するか？スケール条件の閾値をどう定義するか？オートスケールを利用する場合でも完全に任せきりではなく、事前のシミュレーションや性能検証によるチューニングが必要だということになります。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>当社の中では、自社サービスを展開しながら運用保守で上がってきた課題をダイナミックに改善していくという機会はなかなかないので貴重な経験となりました。設計してきたものが想定通り動いているのか？どの部分が乖離しやすいのか？なぜ乖離したのか？どう改善するか？などは長期的な視点が必要となるのでプロジェクトベースの仕事とは異なる知見が得られたと思いました。</p><p>また、システム特性を見極めることや、非機能要件を定義しどうコントロールしていくかというのは結局オンプレでもクラウドでも同じだなーと改めて思いました。</p><h2 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h2><ul><li><a href="https://gatling.io/docs/current/general/operations/" target="_blank" rel="noopener">Gatling OS Tuning</a></li><li><a href="https://aws.amazon.com/jp/about-aws/global-infrastructure/" target="_blank" rel="noopener">AWSグローバルインフラストラクチャ</a></li><li><a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2018-aws-wellarchitected-framework" target="_blank" rel="noopener">AWS Black Belt Online Seminar 2018 AWS Well-Architected Framework</a></li><li><a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-awsdisaster-recovery" target="_blank" rel="noopener">AWS Black Belt Online Seminar AWSで実現するDisaster Recovery</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200914/
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="GlyphFeeds" scheme="https://future-architect.github.io/tags/GlyphFeeds/"/>
    
      <category term="CMS" scheme="https://future-architect.github.io/tags/CMS/"/>
    
      <category term="基幹システム" scheme="https://future-architect.github.io/tags/%E5%9F%BA%E5%B9%B9%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/"/>
    
  </entry>
  
</feed>
