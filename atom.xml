<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-05-23T05:26:20.332Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go Tips連載6: Error wrappingされた各クラウドSDKの独自型エラーを扱う</title>
    <link href="https://future-architect.github.io/articles/20200523/"/>
    <id>https://future-architect.github.io/articles/20200523/</id>
    <published>2020-05-23T02:12:30.000Z</published>
    <updated>2020-05-23T05:26:20.332Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200523/top.png"><p><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a>の第6弾です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。先週の<a href="/articles/20200519/">この記事</a>ぶりの投稿になります。</p><p>フューチャー社内には「Go相談室」というチャットルームがあり、そこでGoに関連する疑問を投げたら、大体1日くらいで強い人が解決してくれるという神対応が行われています。そこでAWSやGCPの独自エラーをError warppingされた時にどうやってハンドリングすればよいの？と聞いた時にやり取りした内容をまとめました。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Go1.13から<code>fmt.Errorf</code> 関数に <code>%w</code>という<a href="https://blog.golang.org/go1.13-errors" target="_blank" rel="noopener">新しい構文が追加サポート</a>されたことは、ご存知の方が多いと思います。</p><p>利用方法は、<code>%w</code> (pkg/errorsの時と異なりコロンは不要だし末尾じゃなくてもOK) と一緒に <code>fmt.Errorf</code> を用いることで、コンテキストに合わせた情報をメッセージに追加できます。</p><figure class="highlight go"><figcaption><span>%wを使った例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 2009/11/10 23:00:00 main process: any func: strconv.Atoi: parsing "ABC": invalid syntax</span></span><br><span class="line">        log.Fatalf(<span class="string">"main process: %v"</span>, err) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AnyFunc</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// 何かしらの処理</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"any func: %w"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[Go Playground] <a href="https://play.golang.org/p/C__gN90iyt7" target="_blank" rel="noopener">https://play.golang.org/p/C__gN90iyt7</a></li></ul><p>また、error種別ごとに処理を分けたい場合で、Sentinel errorを判定する場合は、 errorsパッケージに追加された <code>errors.Is</code> でWrapの判定できます。逆に言うとWrapされている場合、今まで通りの <code>if err == ErrNotFound {</code> といった構文では判定できなくなるので、既存コードへの導入時は呼び出し元と合わせてリライトが必要です。</p><figure class="highlight go"><figcaption><span>SentinelErrorをWrapしたときのハンドリング</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ErrNotFound = errors.New(<span class="string">"not found"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> errors.Is(err, ErrNotFound) &#123;</span><br><span class="line">            <span class="comment">// ErrorNotFound時のエラーハンドリング</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// その他の場合のエラーハンドリング</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AnyFunc</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// 何かしらの処理</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"any func: %w"</span>, ErrNotFound) <span class="comment">// Wrap</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[Go Playground] <a href="https://play.golang.org/p/R4KzOPVd_SA" target="_blank" rel="noopener">https://play.golang.org/p/R4KzOPVd_SA</a></li></ul><p>この場合はシンプルで良いのですが、AWS SDK for GoなどのerrorをWrapした時に呼び出し側で判定をしたい時、どうすればよいのかが直接的な内容が見当たらなかったのでここにまとめておきたいと思います。</p><h1 id="Handling-Errors-in-the-AWS-SDK-for-Go"><a href="#Handling-Errors-in-the-AWS-SDK-for-Go" class="headerlink" title="Handling Errors in the AWS SDK for Go"></a>Handling Errors in the AWS SDK for Go</h1><p><a href="https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/handling-errors.html" target="_blank" rel="noopener">ドキュメント</a>を読むと例えば、AWSのErorrハンドリングは以下のように、<code>awserr.Error</code> というインターフェースで表現されており、一度errを型アサーションしてから内部的なエラーコードに応じてハンドリングすることになっています。</p><figure class="highlight go"><figcaption><span>AWS-SDKの通常版エラーハンドリング</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> aerr, ok := err.(*awserr.Error); ok &#123;</span><br><span class="line">        <span class="keyword">switch</span> aerr.Code() &#123;</span><br><span class="line">        <span class="keyword">case</span> dynamodb.ErrCodeConditionalCheckFailedException:</span><br><span class="line">            <span class="comment">// エラーハンドリング</span></span><br><span class="line">        <span class="keyword">case</span> dynamodb.ErrCodeProvisionedThroughputExceededException:</span><br><span class="line">            <span class="comment">// エラーハンドリング</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// エラーハンドリング</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// エラーハンドリング</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをWrapされたときは、呼び出し元で単純に型アサーションを行ってもうまく判定できません。</p><figure class="highlight go"><figcaption><span>NGなケース</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AnyFunc</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// 何かしらのAWS SDKを利用したコード</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"aws operation: %w"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> aErr, ok := err.(*awserr.Error); ok &#123; <span class="comment">// 🆖型アサーションでは判定できない</span></span><br><span class="line">            <span class="comment">// AWS操作エラー特有のエラーハンドリング</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// その他のエラーハンドリング</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※Go Playgroundでサンプルを載せようと思いましたが、importでTimeoutになったので諦めました</p><h1 id="対応方法"><a href="#対応方法" class="headerlink" title="対応方法"></a>対応方法</h1><p>この <code>awserr.Error</code> を満たすerrorをWrapしたときはどうすべきかというと、 <code>errors.As</code> を用います。<code>errors.As</code> を代入用の変数とともに利用するとうまくいきます。</p><figure class="highlight go"><figcaption><span>OKなコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> aErr *awserr.Error</span><br><span class="line">    <span class="keyword">if</span> ok := errors.As(err, &amp;aErr); ok &#123;</span><br><span class="line">        <span class="keyword">switch</span> aErr.Code() &#123;</span><br><span class="line">        <span class="keyword">case</span> dynamodb.ErrCodeConditionalCheckFailedException:</span><br><span class="line">            <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">        <span class="keyword">case</span> dynamodb.ErrCodeProvisionedThroughputExceededException:</span><br><span class="line">            <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// エラーハンドリング</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// その他のエラーハンドリング</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例として愚直にif分岐をすべて網羅するように書きましたが、早期returnを活用すると、よりネストが浅く見通しが良いコードにできると思います。</p><h2 id="GCP-SDKの場合"><a href="#GCP-SDKの場合" class="headerlink" title="GCP SDKの場合"></a>GCP SDKの場合</h2><p>しばしば<a href="https://godoc.org/cloud.google.com/go/bigquery#hdr-Errors" target="_blank" rel="noopener">以下のエラーを返すことが多い</a>とのことです。</p><p><a href="https://godoc.org/google.golang.org/api/googleapi#Error" target="_blank" rel="noopener">https://godoc.org/google.golang.org/api/googleapi#Error</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> e, ok := err.(*googleapi.Error); ok &#123;</span><br><span class="line">    <span class="keyword">if</span> e.Code == <span class="number">409</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もしこれらのerrorをWrapする場合は、同様に <code>errors.As</code> で判定します。（実際は後述する各サービスごとに宣言されているSentinel errorで判断することが多いと思います）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> gerr *googleapi.Error</span><br><span class="line">    <span class="keyword">if</span> ok := errors.As(err, &amp;gerr); ok &#123;</span><br><span class="line">        <span class="keyword">switch</span> gerr.Code() &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">409</span>:</span><br><span class="line">            <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// その他のエラーハンドリング</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一方で、<a href="https://godoc.org/cloud.google.com/go/storage#pkg-variables" target="_blank" rel="noopener">StorageなどはSentinel error</a>を返します。</p><figure class="highlight go"><figcaption><span>StorageのSentinelError</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    <span class="comment">// ErrBucketNotExist indicates that the bucket does not exist.</span></span><br><span class="line">    ErrBucketNotExist = errors.New(<span class="string">"storage: bucket doesn't exist"</span>)</span><br><span class="line">    <span class="comment">// ErrObjectNotExist indicates that the object does not exist.</span></span><br><span class="line">    ErrObjectNotExist = errors.New(<span class="string">"storage: object doesn't exist"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>errorを返すAPIを利用してWrapした場合は <code>errors.Is</code> で判定します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Storageに対して何かしらアクセスする処理</span></span><br><span class="line"><span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ok := errors.Is(err, storage.ErrObjectNotExist); ok &#123;</span><br><span class="line">        <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// その他のエラーハンドリング</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>どのAPIがどういったerrorを返しうるかは、各<a href="https://godoc.org/cloud.google.com/go" target="_blank" rel="noopener">GoDoc</a>に書いてありますので、個別のハンドリングが必要な場合は確認することになると思います。</p><h1 id="Stacktraceの出力について"><a href="#Stacktraceの出力について" class="headerlink" title="Stacktraceの出力について"></a>Stacktraceの出力について</h1><p><a href="https://play.golang.org/p/NAYR7XySCdW" target="_blank" rel="noopener">https://play.golang.org/p/NAYR7XySCdW</a> にサンプルコードを載せましたが、 <code>%w</code>構文を用いた<code>fmt</code>パッケージではStacktraceが出力されません。もし、Stacktraceが必要な場合は <code>fmt.Errorf</code>ではなく <code>xerrors.Errorf</code> を用いてWrapします。</p><p>シビアに性能が求められない、例えばBackendのWebAPIをGoで実装する場合は、 <a href="https://godoc.org/golang.org/x/xerrors" target="_blank" rel="noopener">xerrorsパッケージ</a>を利用した方が、2020/01/26 時点では良さそうです。</p><ul><li>xerrorsについては、そな太さんの <a href="https://qiita.com/sonatard/items/9c9faf79ac03c20f4ae1" target="_blank" rel="noopener">Goの新しいerrors パッケージ xerrors</a> の記事がとても参考になりました</li></ul><figure class="highlight go"><figcaption><span>xerrorsを使った例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang.org/x/xerrors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := Func(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"stacktrace: %+v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := FuncInternal(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> xerrors.Errorf(<span class="string">"anyFunc %w - internal failed"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FuncInternal</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> xerrors.Errorf(<span class="string">"any error"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[Go Playground] <a href="https://play.golang.org/p/4xcqP7Ukt0H" target="_blank" rel="noopener">https://play.golang.org/p/4xcqP7Ukt0H</a></li></ul><p>これを実行するとStacktraceが出力されました。</p><figure class="highlight console"><figcaption><span>Stacktrace出力例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stacktrace: anyFunc any error - internal failed:</span><br><span class="line">    main.Func</span><br><span class="line">        /tmp/sandbox921242282/prog.go:16</span><br><span class="line">  - any error:</span><br><span class="line">    main.FuncInternal</span><br><span class="line">        /tmp/sandbox921242282/prog.go:22</span><br></pre></td></tr></table></figure><p>ちなみに、xerrorsでWrapされたエラーでも、errors.Is, errors.Asで判定できました。（混在すると少し気持ち悪いですが）</p><ul><li>[Go Playground] <a href="https://play.golang.org/p/nfu_JXo6N_e" target="_blank" rel="noopener">https://play.golang.org/p/nfu_JXo6N_e</a></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Sentinel errorの場合は、<code>errors.Is</code> で、独自Error型を宣言している場合は、 <code>errors.As</code> を利用してハンドリングする</li><li>Stacktrace情報が必要な場合は、xerrorsパッケージを利用する</li><li>xerrorsでWrapしても <code>errors.Is</code>, <code>errors.As</code> で扱える</li></ul><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200523/top.png&quot;&gt;


&lt;p&gt;&lt;a href=&quot;/tags/GoTips%E9%80%A3%E8%BC%89/&quot;&gt;Go Tips連載&lt;/a&gt;の第6弾です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; c
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips 連載5: エラーコードベースの例外ハンドリングの実装＋morikuni/failureサンプル</title>
    <link href="https://future-architect.github.io/articles/20200522/"/>
    <id>https://future-architect.github.io/articles/20200522/</id>
    <published>2020-05-21T15:14:52.000Z</published>
    <updated>2020-05-23T05:17:25.456Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200522/top.png"><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>TIG DX所属の多賀です。最近は設計をしつつ Go も触れて引き続き楽しく仕事してます。</p><p>今回は、<a href="https://pkg.go.dev/errors?tab=doc" target="_blank" rel="noopener">errors</a> package を一部利用して、エラーコードベースのエラーハンドリング処理を実装しました。また、morikuni/failure を利用した実装への書き換えも試してみています。</p><h1 id="エラーコードベースの例外ハンドリングについて"><a href="#エラーコードベースの例外ハンドリングについて" class="headerlink" title="エラーコードベースの例外ハンドリングについて"></a>エラーコードベースの例外ハンドリングについて</h1><p>前提としてGoで書かれた HTTP APIサーバーに対してのエラーハンドリングについて記載します。</p><p><strong>エラーコードベースの例外ハンドリング</strong>についてですが、アプリケーションで発生するエラーを事前にラベリングしてコード化し、コードをもとにエラーハンドリングを実施することとします。発生時の運用対応や影響について、事前に一覧で整理することで、運用負荷を下げる意味があると考えています。(補足: Futureではメッセージコードと呼称することが多いですが、一般的な命名であるエラーコードで統一します)</p><p>以下のような形で整理しています。<br>実際は、エラーコード別に運用アクションも合わせて整理します。</p><p>エラーコード表 (例)</p><table><thead><tr><th align="left">エラーコード</th><th align="left">エラー名</th></tr></thead><tbody><tr><td align="left">XXX0001</td><td align="left">クライアントエラー</td></tr><tr><td align="left">XXX0002</td><td align="left">DBコネクションエラー</td></tr><tr><td align="left">XXX0003</td><td align="left">外部APIサーバーへのリクエストエラー</td></tr></tbody></table><p>エラーコードを利用した際に重要なことは、エラーコード外のエラーを発生させないことにあると考えています。エラーコード外のエラーが発生した際、何をどうしたらよいかが明文化されていないためです。エラーは、ログより発生を検知し対応するものとした際に、いかにアプリケーションから出力されるログに対して、適切にエラーコードを付与できるかが大事です。</p><h1 id="errors-package-を利用した実装例"><a href="#errors-package-を利用した実装例" class="headerlink" title="errors package を利用した実装例"></a>errors package を利用した実装例</h1><p>アプリケーション側での、コンパイルレベルでの制約は難しくコードレビューでの担保もふくまれますが、以下のようにしてエラーを出力しています。</p><p>パッケージの構造としてはシンプルな以下のイメージです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── handler    <span class="comment"># httpリクエストをハンドリングする層</span></span><br><span class="line">├── service    <span class="comment"># ビジネスロジック層 </span></span><br><span class="line">└── infra      <span class="comment"># DBや外部API等の外部リソースへアクセスする層</span></span><br></pre></td></tr></table></figure><h2 id="エラーコード別のエラーを定義"><a href="#エラーコード別のエラーを定義" class="headerlink" title="エラーコード別のエラーを定義"></a>エラーコード別のエラーを定義</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apperror</span><br><span class="line"></span><br><span class="line"><span class="comment">// AppError はエラーコードが付与されたエラーのinterface</span></span><br><span class="line"><span class="keyword">type</span> AppError <span class="keyword">interface</span> &#123;</span><br><span class="line">error</span><br><span class="line">Code() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下にエラーコード別にカスタムエラーを定義</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ClientError <span class="keyword">struct</span> &#123;</span><br><span class="line">Err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ClientError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"client error"</span> + <span class="string">": "</span> + e.Err.Error()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ClientError)</span> <span class="title">Code</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"XXX0001"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ClientError)</span> <span class="title">Unwrap</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> e.Err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="handler-層に返却される-error-を必ずエラーコード対応Error型とする"><a href="#handler-層に返却される-error-を必ずエラーコード対応Error型とする" class="headerlink" title="handler 層に返却される error を必ずエラーコード対応Error型とする"></a>handler 層に返却される error を必ずエラーコード対応Error型とする</h2><p>各層のerror を wrappingして handler 層に返却します。ここは愚直にやらないといけないところです。(静的解析ツールを作ってチェックする機構を用意するほうがより良いですね。)</p><p>関数の戻り値の第2引数自体を <code>AppError</code> 型にすることも考えられますが、標準 error インターフェイスを尊重したほうが良いとのノウハウがあるので対応しませんでした。</p><p>参考: <a href="https://www.slideshare.net/yuichi1004/golangtokyo-6-in-japanese?ref=https://golangtokyo.connpass.com/event/57168/presentation/" target="_blank" rel="noopener">初めてGolangで大規模Microservicesを作り得た教訓</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h User)</span> <span class="title">Search</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 処理...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// err を wrap してエラー情報を追加する</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, apperror.ClientError&#123;Err: fmt.Errorf(<span class="string">"invalid id = %v: %w"</span>, id, err)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="エラーログを出力する箇所を集約"><a href="#エラーログを出力する箇所を集約" class="headerlink" title="エラーログを出力する箇所を集約"></a>エラーログを出力する箇所を集約</h2><p>handler 層に集約させます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserHandleFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">app := service.User&#123;&#125;</span><br><span class="line">h, err := app.Search(<span class="string">"id1"</span>)</span><br><span class="line"><span class="comment">// err は 必ずエラーコード定義のエラー</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーから共通のログを出力する関数を呼び出す</span></span><br><span class="line">errorLog(err)</span><br><span class="line">w.WriteHeader(<span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorLog</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> e, ok := err.(apperror.AppError); ok &#123;</span><br><span class="line"><span class="comment">// エラーコードとメッセージをログに出力</span></span><br><span class="line">log.Printf(<span class="string">"[%v] %v\n"</span>, e.Code(), e.Error())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 予想外のエラー(実装ミス)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の通りに実装することで、エラーコードにエラーを集約すること自体はできました。</p><p>ただ、独自エラーを定義して Wrapするところはもっと書きやすくできないか、検討の余地がありそうだと感じました。</p><h1 id="morikuni-failure-を利用できないか"><a href="#morikuni-failure-を利用できないか" class="headerlink" title="morikuni/failure を利用できないか?"></a>morikuni/failure を利用できないか?</h1><p>morikuni/failure は morikuni さんが作成されたエラーハンドリング向けのライブラリです。errors package 存在前より開発されているライブラリです。</p><p><a href="https://github.com/morikuni/failure" target="_blank" rel="noopener">https://github.com/morikuni/failure</a></p><blockquote><p>Package failure provides an error represented as error code and extensible error interface with wrappers.</p></blockquote><p>とのことなので、エラコードベースの利用にマッチしそうです。</p><p>以前の <a href="https://speakerdeck.com/morikuni/designing-errors" target="_blank" rel="noopener">Go Conference 2019 Spring にて発表されている資料</a> にて、failure と errors (当時は xerrors) の使い分けについて明確に説明されています。とてもわかりやすくて、しっくりきたことを覚えています。</p><img src="/images/20200522/photo_20200522_01.png" style="border:solid 1px #000000"><p>参考: <a href="https://speakerdeck.com/morikuni/designing-errors?slide=33" target="_blank" rel="noopener">https://speakerdeck.com/morikuni/designing-errors?slide=33</a></p><h2 id="やってみた"><a href="#やってみた" class="headerlink" title="やってみた"></a>やってみた</h2><p>morikuni/failure を利用して上記のコードを書き換えてみました。</p><h3 id="エラーコード別のエラーを定義-1"><a href="#エラーコード別のエラーを定義-1" class="headerlink" title="エラーコード別のエラーを定義"></a>エラーコード別のエラーを定義</h3><p>とてもシンプルですね。追加も簡単になりそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apperror</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/morikuni/failure"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">ClientError       failure.StringCode = <span class="string">"XXX0001"</span></span><br><span class="line">DBConnectionError failure.StringCode = <span class="string">"XXX0002"</span></span><br><span class="line">XXAPIRequestError failure.StringCode = <span class="string">"XXX0003"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="handler-層に返却される-error-を必ずエラーコードに対応させた独自エラーとする"><a href="#handler-層に返却される-error-を必ずエラーコードに対応させた独自エラーとする" class="headerlink" title="handler 層に返却される error を必ずエラーコードに対応させた独自エラーとする"></a>handler 層に返却される error を必ずエラーコードに対応させた独自エラーとする</h3><p>morikuni/failure でも、エラーコードへの変換 ( <code>failure.Translate</code>  ) や エラーコードの Wrap ( <code>failure.Wrap</code> ) は可能です。<br>(ちなみに、failureで生成したエラーも errors package のインターフェイスを満たしています。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/xxx/failure_sample/apperror"</span></span><br><span class="line"><span class="string">"github.com/morikuni/failure"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h User)</span> <span class="title">Search</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 処理...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// err を wrap してエラー情報を追加する</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, failure.Translate(err, apperror.ClientError, failure.Messagef(<span class="string">"invalid id=%v"</span>, id))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="エラーログを出力する箇所を集約-1"><a href="#エラーログを出力する箇所を集約-1" class="headerlink" title="エラーログを出力する箇所を集約"></a>エラーログを出力する箇所を集約</h3><p>README の sample を参考にハンドリング処理を実装してみました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/xxx/failure_sample/apperror"</span></span><br><span class="line"><span class="string">"github.com/xxx/failure_sample/service"</span></span><br><span class="line"><span class="string">"github.com/morikuni/failure"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserHandleFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">app := service.User&#123;&#125;</span><br><span class="line">_, err := app.Search(<span class="string">"id1"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errorLog(err)</span><br><span class="line">w.WriteHeader(httpStatus(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorLog</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">code, ok := failure.CodeOf(err)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">log.Printf(<span class="string">"unexpected error: %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"[%v] %v\n"</span>, code, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpStatus</span><span class="params">(err error)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> c, _ := failure.CodeOf(err); c &#123;</span><br><span class="line"><span class="keyword">case</span> apperror.ClientError:</span><br><span class="line"><span class="keyword">return</span> http.StatusBadRequest</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> http.StatusInternalServerError</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>エラーコードベースの例外ハンドリングのTipsについて記載しました。</p><p>failure を利用したほうがよりシンプルに書けて良いのではないかと感じています。<br>また、他のメリットとしては以下がありそうです。</p><ul><li>failureでWrapすることでスタックトレースが残る</li><li>failureの便利関数を利用して Error のコンテキストを文字列以外の形式で作成できる</li></ul><p>failureは実戦で使えてないので、次回チャレンジしてみたいです。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.golang.org/go1.13-errors" target="_blank" rel="noopener">Working with Errors in Go 1.13 - The Go Blog</a></li><li><a href="https://pkg.go.dev/github.com/morikuni/failure?tab=doc" target="_blank" rel="noopener">failure package · go.dev</a></li><li><a href="https://speakerdeck.com/morikuni/designing-errors" target="_blank" rel="noopener">エラー設計について / Designing Errors - Speaker Deck</a></li></ul><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200522/top.png&quot;&gt;

&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;TIG DX所属の多賀です。最近は設計をしつつ Go も触れて引
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips連載4: GoDocの読み方</title>
    <link href="https://future-architect.github.io/articles/20200521/"/>
    <id>https://future-architect.github.io/articles/20200521/</id>
    <published>2020-05-21T13:23:40.000Z</published>
    <updated>2020-05-23T05:17:05.871Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/tags/GoTips連載/">Go Tips連載</a>の第4弾目です。</p><p>新しいプログラミング言語を学ぶときは、まず、情報の取得の仕方を覚えておくと学習効率が上がります。検索して、日本語で誰かが解説している二次情報を探すのもいいのですが、古くなって使えなかったり、人気のある情報に偏ってしまって、ちょっと混み入った話になると情報が見つからなくなったりしがちです。多少素っ気なく感じるかもしれませんが、一次情報を読み解く方法を知っておくと良いでしょう。本家が作ったものではなくても網羅的に、リファレンスとなる心意気で書かれたものもたまにあります。</p><table><thead><tr><th align="center">種類</th><th align="center">区分</th><th align="center">翻訳</th><th align="left">解説</th></tr></thead><tbody><tr><td align="center"><a href="https://tour.golang.org/welcome/1" target="_blank" rel="noopener">Tour of Go</a></td><td align="center">一次</td><td align="center"><a href="https://go-tour-jp.appspot.com/welcome/1" target="_blank" rel="noopener">あり</a></td><td align="left">Goの書き方チュートリアル</td></tr><tr><td align="center"><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a></td><td align="center">一次</td><td align="center">メンテされているものはなし？</td><td align="left">Goのコードはこう書くべきといった指標</td></tr><tr><td align="center"><a href="https://blog.golang.org/" target="_blank" rel="noopener">The Go Blog</a></td><td align="center">一次</td><td align="center"><a href="https://www.ymotongpoo.com/works/goblog-ja/" target="_blank" rel="noopener">あり</a></td><td align="left">新し目の機能など大きめのトピックについて設計思想とか解説が書かれることがある</td></tr><tr><td align="center"><a href="https://godoc.org/" target="_blank" rel="noopener">Go Doc</a></td><td align="center">一次</td><td align="center">ﾑﾘ</td><td align="left">標準・サードパティのライブラリのリファレンス</td></tr><tr><td align="center"><a href="https://github.com/golang/go/wiki" target="_blank" rel="noopener">Go Wiki</a></td><td align="center">一次</td><td align="center"></td><td align="left">文法の解説、コミュニティ情報などいろいろあったり</td></tr><tr><td align="center"><a href="https://golang.org/doc/devel/release.html" target="_blank" rel="noopener">Release Notes</a></td><td align="center">一次</td><td align="center">Qiita等に有志が訳したものがあがる</td><td align="left">新バージョンの差分はここ</td></tr><tr><td align="center"><a href="https://gobyexample.com/" target="_blank" rel="noopener">Go by Example</a></td><td align="center">二次</td><td align="center"><a href="https://oohira.github.io/gobyexample-jp/" target="_blank" rel="noopener">あり</a></td><td align="left">細かい書き方のサンプルコード集</td></tr><tr><td align="center"><a href="https://yourbasic.org/golang/go-java-tutorial/" target="_blank" rel="noopener">Java to Go in-depth tutorial</a></td><td align="center">二次</td><td align="center"><a href="https://future-architect.github.io/articles/20200311/">あり</a></td><td align="left">既存の言語ユーザーのためのGo入門</td></tr></tbody></table><p>今回は、GoDocについて取り上げます。</p><p>長いので3行にまとめると</p><ul><li>GoDocのリファレンスはライブラリにとっては一次情報だが、使い方などはリポジトリのREADMEに書かれることも多い</li><li>構造体やインタフェースは、リファレンスだけを見ても使い方がわからないこともあるので、分からないからといって落ち込まないでください</li><li>サンプルコードも合わせて確認して使い方を確認すると良いです</li></ul><h1 id="GoDoc"><a href="#GoDoc" class="headerlink" title="GoDoc"></a>GoDoc</h1><p>GoDocは標準ライブラリや、他のサードパティ製ライブラリのドキュメントをホストしているウェブサイトになります。チュートリアルなどは一度クリアしたら見返すこともあまりないでしょうけども、GoDocはGoで開発している限り、ずっと参照し続けることになります。GoDocの読み方を知っておくことは、Go力をあげるには必須なスキルだと思います。</p><p>GoDocのURLは以下の通りの場所</p><ul><li><a href="https://pkg.go.dev/" target="_blank" rel="noopener">https://pkg.go.dev/</a></li></ul><p>以前はこちらで、検索エンジンでドキュメントを検索するとこっちのドメインが表示されると思いますが、上のツールバーの、always use pkg.go.devをクリックすると、上記のURLにリダイレクトされます。</p><ul><li><a href="https://godoc.org/" target="_blank" rel="noopener">https://godoc.org/</a></li></ul><h1 id="書いてある内容"><a href="#書いてある内容" class="headerlink" title="書いてある内容"></a>書いてある内容</h1><p>最近人気のchiのドキュメントを表示してみました。</p><img src="/images/20200521/1.png"><p>上から、importするときの名前、パッケージ名、バージョンなどが書かれています。<br>その下は更新日時、ライセンス、モジュールのページです。</p><p>モジュールというのはサブディレクトリとかも含めた共通のルートページで、ソースコードがおいてあるリポジトリのリンクや、リポジトリのReadmeなどが書かれています。</p><p>その下のタブは、色々な情報へのハブになっています。</p><ul><li>Doc: 実際のドキュメント<ul><li>リファレンスと概要</li></ul></li><li>Overview: モジュールと同じ</li><li>Versions: 今まで公開されたバージョン一覧</li><li>Imports: どのパッケージに依存しているか？</li><li>Imported By: どのパッケージから利用されているか？人気なものほど多い</li><li>License: ライセンス</li></ul><h1 id="まず読むところ"><a href="#まず読むところ" class="headerlink" title="まず読むところ"></a>まず読むところ</h1><p>いきなりリファレンスを読みたい人もいるかもしれませんが、ふつうは概要を理解したいですよね？Goの場合は2箇所あります。</p><ul><li>DocのOverview</li><li>モジュールページのREADME</li></ul><p>Goのソースコードの中のコメントとして書いたドキュメントであれば前者に、リポジトリのREADMEに書かれた内容であれば後者に概要が書かれます。標準ライブラリの場合は前者しかないですが、サードパーティの場合、後者の方がリッチに丁寧に書かれることが多いように思います。どちらに詳しい情報が書かれるかはパッケージの実装者次第なので両方見て見ると良いでしょう。</p><h1 id="サンプルコード"><a href="#サンプルコード" class="headerlink" title="サンプルコード"></a>サンプルコード</h1><p>概要を把握したところで、どう書くのかを見て見たい人もいるでしょう。サンプルコードを探して見ましょう。DocのOverviewには3箇所、サンプルが置かれる可能性のある場所があります。</p><ol><li>DocのOverviewや各メソッドの説明: Goのコメントの流儀に従ってフォーマットされているサンプル</li><li>パッケージ全体のサンプルは、（あれば）DocのOverviewの末尾にサンプルコードが置かれる</li><li>各構造体や関数、メソッドのサンプルは、それぞれのリファレンスの中に書かれる</li></ol><p>chiはこの最初の1の形式のドキュメントが書かれていました。</p><p>2つ目と3つ目はchiにはなかったので、標準ライブラリのdatabase/sqlパッケージのドキュメントを見て見ましょう。Overviewの下に、パッケージレベルのサンプルコードが2つあることがわかります。▼をクリックすると表示されます。</p><img src="/images/20200521/2.png"><p>メソッドなどのドキュメントは、それぞれの説明のテキストの後ろにサンプルが置かれています。</p><img src="/images/20200521/3.png"><p>Goの公式ドキュメントにおけるサンプルというのは、サンプルの形を模したテストコードだったりします。もし、期待するコードがなければ、リポジトリのサンプルを見て見てもいいでしょう。<code>_example.go</code>あるいは、<code>_test.go</code>といったファイルに入っています。<code>Example</code>から始まる関数がサンプル、<code>Test</code>から始まる関数がテストです。</p><p>サードパーティのパッケージで、これらのどこにもなかった場合、モジュールページのREADMEにある可能性があります。こちらはMarkdownなので、サンプルでもなんでも自由に書けます。この中にサンプルも書かれることが多いです。</p><h1 id="ライブラリリファレンス"><a href="#ライブラリリファレンス" class="headerlink" title="ライブラリリファレンス"></a>ライブラリリファレンス</h1><p>ライブラリリファレンスはDocタブのIndexという項目以下にあります。ドキュメントのメインコンテンツです。</p><img src="/images/20200521/4.png"><p>リファレンスは以下の順番に並んでいます。</p><ul><li>Constants: 定数一覧</li><li>Variables: 変数一覧</li><li>func …の各項目: パッケージ内で定義されている関数</li><li>type …の各項目: パッケージ内で定義されている型（構造体、名前付き型、インタフェース）</li></ul><p>定数、変数は名前とか型を確認するぐらいだと思いますし、関数や型の説明の中で参照されるので、そのタイミングで読むことになると思います。関数も、読み方としては特に難しくはないと思います。ここではtypeの各項目について紹介します。</p><p>要注意ポイントとしては、GoDocはそのサービスが起動しているOS向けの要素しか表示しません。osパッケージにはWindows用の要素だったりとかもあったりしますが、pkg.go.devはLinuxで動作しており、リファレンスもLinuxで有効な項目のみが表示されます。ファイル操作のバッチのプログラムとかを作成する場合には注意してください。</p><h2 id="構造体"><a href="#構造体" class="headerlink" title="構造体"></a>構造体</h2><p>typeのうち、構造体は結構、他の言語のユーザーからすると初見殺しな気がします。たいてい、ドキュメントを見ると「あ、このメソッドを呼んであげれば、やりたいことができそうだ」というのは把握できると思います。しかし、そのメソッドをどう呼んであげればいいのか、で詰まることがあります。ベテランであっても。</p><img src="/images/20200521/5.png"><p>構造体の説明はまずはGoの定義コードほぼそのまま（privateな要素以外）が書かれています。</p><p>さて、この構造体のインスタンスを作って使うにはどうすればいいでしょうか？Goの文法的には3通りあります(newはあんまり見ないので省略)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cはインスタンス</span></span><br><span class="line"><span class="keyword">var</span> c Context</span><br><span class="line"><span class="comment">// cはインスタンス（パラメータの初期化もできる）</span></span><br><span class="line">c := Context&#123;&#125;</span><br><span class="line"><span class="comment">// cはポインタ（パラメータの初期化もできる）</span></span><br><span class="line">c := &amp;Context&#123;&#125;</span><br></pre></td></tr></table></figure><p>それ以外に、リファレンスを見ると、レシーバーがついてないメソッドが構造体のメソッド一覧の先頭にいることがわかります。コンストラクタ関数とかファクトリ関数と呼ばれているもので、必要な属性を持ったインスタンスを生成し、そのポインタや実体を返すものです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">NewRouteContext</span><span class="params">()</span> *<span class="title">Context</span></span></span><br><span class="line"><span class="function">    <span class="title">func</span> <span class="title">RouteContext</span><span class="params">(ctx context.Context)</span> *<span class="title">Context</span></span></span><br></pre></td></tr></table></figure><p>これらのインスタンスの作成方法のうち、どの手法で作ればいいのか、というのはそのライブラリによって違います。</p><ul><li>ファクトリー関数があるものであれば、ほぼそれでいいはず<ul><li>メンバー変数にprivateなものがあり、ファクトリー関数でのみ初期化という場合は確度が高い</li><li>ただし、その中にもGoの文法で作っても動作するハイブリッドなものとかもある</li></ul></li><li>自分で作らず、ライブラリの内部で作ってインスタンスだけ渡ってくるものもある。net/httpのサーバーのハンドラのRequestとか</li><li>Goの文法で作成するもののうち、コピー不能でポインタ型で取り扱わないといけないものもあり</li></ul><p>どの手法で構造体のインスタンスを作ればいいのか、というのはサンプルコードとかを見て判断することになります。</p><p>読み手の気持ちを考えると、何かしらのライブラリを作って構造体を提供するときは、ファクトリー関数を作って提供しましょう、というのがベストプラクティスになる気がします。</p><h2 id="名前付き型-named-type"><a href="#名前付き型-named-type" class="headerlink" title="名前付き型(named type)"></a>名前付き型(named type)</h2><p>Goでは、メモリ上の実態は同じだけど、別の型として振る舞わせることが可能です。例えば、画面に表示しようとするとアスタリスクに塗りつぶす文字列型、みたいなことができます（これは%vとかでダメなので簡易実装です。このまま利用はしないでください）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SecretString <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SecretString)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(s))</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">result[i] = <span class="string">'*'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これも、例えば列挙型のようなものを作ったりするには便利な方法です。しかし、リファレンスを見ても、この型をどう作るのかの説明がされることはありません。これはどうやってインスタンスを作ればいいでしょうか？作り方としては次のような感じになりますね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 型キャスト</span></span><br><span class="line">s := <span class="string">"important credential"</span> <span class="comment">// sはstring</span></span><br><span class="line">ss := SecretString(s)       <span class="comment">// ここでキャスト。ssはSecretString</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最初からその型で宣言</span></span><br><span class="line"><span class="keyword">var</span> ss SecretString = <span class="string">"secret password"</span></span><br></pre></td></tr></table></figure><p>これで、どちらもssがSecretString型になるので、リファレンスに書かれているメソッドが使えるようになります。</p><p>場合によっては、Constantsの定数として事前に定義されているもののみを使うという流儀のライブラリもあります。その場合はインスタンスを作らずに、importして利用するだけでいけます。どの方法でインスタンスを利用すればいいのかは実装次第なので、サンプルコードとかを見てみると良いでしょう。</p><h2 id="インタフェース"><a href="#インタフェース" class="headerlink" title="インタフェース"></a>インタフェース</h2><p>インタフェースも、便利なメソッドは見つけたが、どうやってインスタンスを取得すればいいのかわからない筆頭です。これはベテランでも初見では分からないこと多数です。分からないからといって落ち込まないください。みんな分からないのです。</p><p>インタフェースは、とあるインスタンスが、そのインタフェースで定義されているメソッドを持っている、というだけの情報しかありません。主に4通りあります。2番目のものはウェブサイドではなくローカルで動作する<a href="https://qiita.com/shibukawa/items/8c70fdd1972fad76a5ce#godoc%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AB%E3%82%88%E3%82%8B%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">godocコマンドの解析機能</a>を利用すると発見できます。発見できた後は、この上の節の構造体をどうする問題に遷移します。最後のものは今のところ僕が見たことがあるのはnet/httpのPusherとかだけですので無視してもいいかもしれません。</p><ul><li>自分で作る<ul><li>そのインタフェースを満たすメソッドを持った構造体をユーザーが作成してそのライブラリの他のメソッドに渡せばいいのか</li></ul></li><li>既成の構造体がこのインタフェースを満たしている<ul><li>何かしらの構造体のインスタンスを作ると、そのインタフェースを満たして、そのインタフェースの型の変数に代入したり、メソッドの引数に渡せるようになる</li></ul></li><li>ライブラリが作成してくれるもの<ul><li>net/httpのResponeWriterなど</li></ul></li><li>インタフェース間のキャスト<ul><li>特定のインタフェースを型アサーションでキャストすると、そのインタフェースが得られてメソッドが利用できるようになる</li></ul></li></ul><p>これのどれに当たるかは、リファレンスだけを見てもさっぱり見えてこないこともあります。これも素直に、サンプルコードなどを参照するようにした方が良いでしょう。</p><p>これを読んでいる上級者の方々は、もしインタフェースを実装して他の人に使ってもらおうと思っているのであれば、必ずサンプルコードを見える位置に置いてあげてください。私からの一生のお願いです。</p><h2 id="引数のinterface"><a href="#引数のinterface" class="headerlink" title="引数のinterface{}"></a>引数の<code>interface{}</code></h2><p>Goは静的型付け言語ではあるものの、リフレクションを使ってある程度動的型付け言語のような動作をさせることができます。ライブラリによっては、「ある程度どんな型でも受け付けますよ」ということがあります。Goの<code>interface{}</code>型は他の言語でいう<code>any</code>だったり<code>void *</code>だったりします。例えば、GoでJSONを扱おう、となるとこの<a href="https://golang.org/pkg/encoding/json/#Marshal" target="_blank" rel="noopener">interface{}</a>が登場します。</p><p>で、こいつをどうやって作ればいいのか、というのもリファレンスの関数の定義をいくらにらめっこしても出てきません。数字でも文字列でも受けつけますよ、ということで<code>interface{}</code>にしているかもしれませんし、上記のJSONの場合は、自作の構造体を作る必要があります。その構造体のフィールドにはタグを付与します。このタグにはDSLというかルールがあるのですが、このルールは関数の引数とかのリファレンスを穴があくほど見ても分かりません。ライブラリの作者が自然言語で解説を書く必要があります。またJSONとかもタグを書かなかった場合のデフォルト動作みたいなのもあったりします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span>         <span class="string">`json:"name"`</span></span><br><span class="line">    SessionToken <span class="keyword">string</span> <span class="string">`json:"-"`</span></span><br><span class="line">    NickName <span class="keyword">string</span>     <span class="string">`json:"nickname,omitempty"`</span></span><br><span class="line">    Age <span class="keyword">int</span>             <span class="string">`json:"num,string"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この<code>interface{}</code>は自然言語部分の説明とかサンプルコードを参照するのが良いでしょう。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>プログラミングを学ぶと、一次情報にあたれ、みたいなことはよく言われます。今回は、その中でGoDocの読み方について解説しました。むしろ、GoDoc読んでもここは難しいぞ、というのを理解してもられば、GoDocとうまく折り合いをつけてやっていけるようになると思います。</p><p>上級者になるとリファレンスを見て使い方を想像したり、生のコードを解析してなんとかできるようになりますが、初心者だと使い方を知る部分も結構難しいです。サンプルコードも探しながら、挑戦して見てください。経験を積めば、少しずつ予想ができるようになってきます。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/tags/GoTips連載/&quot;&gt;Go Tips連載&lt;/a&gt;の第4弾目です。&lt;/p&gt;
&lt;p&gt;新しいプログラミング言語を学ぶときは、まず、情報の取得の仕方を覚えておくと学習効率が上がります。検索して、日本語で誰かが解説している二次情報を探すのもいいのですが、
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
      <category term="Document" scheme="https://future-architect.github.io/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips連載3: ファイルを扱うちょっとしたスクリプトをGoで書くときのTips5選</title>
    <link href="https://future-architect.github.io/articles/20200520/"/>
    <id>https://future-architect.github.io/articles/20200520/</id>
    <published>2020-05-20T00:43:46.000Z</published>
    <updated>2020-05-23T05:17:00.727Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200518/Go-Logo_LightBlue.png" class="img-small-size"><p><a href="/tags/GoTips連載/">Go Tips連載</a>の第3弾目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG の辻です。</p><p>筆者は普段ファイルを扱って何か簡単な処理をする場合は、シェルスクリプトで実装することが多かったのですが、実は Go で書くと簡単に、かつ Testable でスクリプトちっく <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> に書くことでできて、幸せになるんじゃないか？と最近考えています。</p><p>とある業務でファイルを扱い、ちょっとだけ複雑な繰り返しを要する処理をする必要がありました。手動で作業するのはめんどくさいし、<del>(モチベーションも上がらないし)</del> ロジックもちょっと面倒だったので、Go でスクリプトを書いて処理しました。</p><p>そこで今回はファイルを扱うようなスクリプトを Go で書くときに役に立ちそうな Tips 5 選を紹介します。</p><ol><li>ファイルの読み込みにio.Readerを用いる</li><li>ファイルの書き込みにio.Writerを用いる</li><li>リストファイルから1行ずつ読み込む</li><li>os/execを使う</li><li>ファイルパスの操作にpath/filepathを使う</li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="1-ファイルの読み込みにio-Readerを用いる"><a href="#1-ファイルの読み込みにio-Readerを用いる" class="headerlink" title="1.ファイルの読み込みにio.Readerを用いる"></a>1.ファイルの読み込みにio.Readerを用いる</h3><p>ファイルを読み込む際に <a href="https://golang.org/pkg/io/#Reader" target="_blank" rel="noopener">io.Reader</a> を受け取って処理するようにすると Testable なスクリプトになって安心です。簡単な処理とはいえやはりテストは書きたいですよね。</p><p>例として、ファイルの中に「Copyright」という文字列が含まれるかどうか調べる処理を考えてみます。実装例として以下の hasCopyright のような実装が考えられます。ポイントは io.Reader のインターフェースを関数の引数として受け取ることです。</p><figure class="highlight go"><figcaption><span>io.Readerの引数がポイント</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCopyright</span><span class="params">(r io.Reader)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">b, err := ioutil.ReadAll(r)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bytes.Contains(b, []<span class="keyword">byte</span>(<span class="string">"Copyright"</span>)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呼び元の実装例です。”LICENSE” ファイルは MIT のライセンスが書かれたファイルを Open しています。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(<span class="string">"LICENSE"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">ok, err := hasCopyright(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 何らかの処理</span></span><br><span class="line">fmt.Println(ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hasCopyright 関数は io.Reader を受け取る関数でした。もちろん以下のように <a href="https://golang.org/pkg/os/#File" target="_blank" rel="noopener">*os.File</a> 構造体を受け取って処理することもできます。しかしこのようにすると、引数には *os.File 構造体を受け取る必要があり、テストケースごとにファイルを作成しないといけません。</p><figure class="highlight go"><figcaption><span>非推奨な引数のとり方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非推奨: 具象の構造体を引数に取る関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCopyright</span><span class="params">(f *os.File)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">b, err := ioutil.ReadAll(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bytes.Contains(b, []<span class="keyword">byte</span>(<span class="string">"Copyright"</span>)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インターフェースである io.Reader を受け取る関数にすることで io.Reader を満たす任意の構造体を関数に渡すことができます。つまりファイルディスクリプタを示す os.File だけでなく <a href="https://golang.org/pkg/bytes/#Buffer" target="_blank" rel="noopener">byte.Buffer</a> や <a href="https://golang.org/pkg/strings/#Reader" target="_blank" rel="noopener">strings.Reader</a> といった構造体を渡すことができます。文字列の場合は <a href="https://golang.org/pkg/strings/#NewReader" target="_blank" rel="noopener">strings.NewReader</a> を用いて string から io.Reader を生成でき便利です。以下のようにテストすることが可能になります。</p><figure class="highlight go"><figcaption><span>main_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_hasCopyright</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">reader io.Reader</span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name    <span class="keyword">string</span></span><br><span class="line">args    args</span><br><span class="line">want    <span class="keyword">bool</span></span><br><span class="line">wantErr <span class="keyword">bool</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="string">"正常"</span>, args&#123;strings.NewReader(<span class="string">`Copyright`</span>)&#125;, <span class="literal">true</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="string">"MITライセンス"</span>, args&#123;strings.NewReader(<span class="string">`MIT License</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Copyright (c) 2020, Future Corporation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="string">of this software and associated documentation files (the "Software"), to deal</span></span><br><span class="line"><span class="string">in the Software without restriction, including without limitation the rights</span></span><br><span class="line"><span class="string">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></span><br><span class="line"><span class="string">copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="string">furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The above copyright notice and this permission notice shall be included in all</span></span><br><span class="line"><span class="string">copies or substantial portions of the Software.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="string">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="string">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="string">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="string">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="string">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></span><br><span class="line"><span class="string">SOFTWARE.`</span>)&#125;, <span class="literal">true</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="string">"空文字"</span>, args&#123;strings.NewReader(<span class="string">``</span>)&#125;, <span class="literal">false</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="string">"cが小文字"</span>, args&#123;strings.NewReader(<span class="string">`copyright`</span>)&#125;, <span class="literal">false</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="string">"スペース有り"</span>, args&#123;strings.NewReader(<span class="string">`Copy right`</span>)&#125;, <span class="literal">false</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got, err := hasCopyright(tt.args.reader)</span><br><span class="line"><span class="keyword">if</span> (err != <span class="literal">nil</span>) != tt.wantErr &#123;</span><br><span class="line">t.Errorf(<span class="string">"hasCopyright() error = %v, wantErr %v"</span>, err, tt.wantErr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"hasCopyright() got = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span></span><br><span class="line">=== RUN   Test_hasCopyright</span><br><span class="line">=== RUN   Test_hasCopyright/正常</span><br><span class="line">=== RUN   Test_hasCopyright/MITライセンス</span><br><span class="line">=== RUN   Test_hasCopyright/空文字</span><br><span class="line">=== RUN   Test_hasCopyright/cが小文字</span><br><span class="line">=== RUN   Test_hasCopyright/スペース有り</span><br><span class="line">--- PASS: Test_hasCopyright (0.00s)</span><br><span class="line">    --- PASS: Test_hasCopyright/正常 (0.00s)</span><br><span class="line">    --- PASS: Test_hasCopyright/MITライセンス (0.00s)</span><br><span class="line">    --- PASS: Test_hasCopyright/空文字 (0.00s)</span><br><span class="line">    --- PASS: Test_hasCopyright/cが小文字 (0.00s)</span><br><span class="line">    --- PASS: Test_hasCopyright/スペース有り (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>テストが通ると、想定した動作をしていることがわかり、安心します。シェルスクリプトで同じような確認をしようと思うと、ちょっと手間です。</p><h3 id="2-ファイルの書き込みにio-Writerを用いる"><a href="#2-ファイルの書き込みにio-Writerを用いる" class="headerlink" title="2.ファイルの書き込みにio.Writerを用いる"></a>2.ファイルの書き込みにio.Writerを用いる</h3><p>ファイルの読み込みに io.Reader を用いる場合と同じ話です。ファイルの書き込みに <a href="https://golang.org/pkg/io/#Writer" target="_blank" rel="noopener">io.Writer</a> を用いると Testable なスクリプトになります。簡単な例として、ファイルの末尾に 「Hello World.」という文字列を追記する関数を考えてみます。</p><figure class="highlight go"><figcaption><span>io.Writerを利用する</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 末尾に Hello World. を書き込むサンプル実装</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeHello</span><span class="params">(w io.Writer)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"\nHello World."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実際のファイルに書き込まなくても io.Writer を実装している <a href="https://golang.org/pkg/bytes/#Buffer" target="_blank" rel="noopener">bytes.Buffer</a> に文字列を書き込み、比較してテストすることができます。実際にファイルを作成したい場合は <a href="https://golang.org/pkg/os/#Create" target="_blank" rel="noopener">os.Create</a> などとすれば生成することができます。</p><figure class="highlight go"><figcaption><span>main_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_writeHello</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">wantW <span class="keyword">string</span></span><br><span class="line">diff  <span class="keyword">bool</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="string">"正常"</span>, <span class="string">"\nHello World.\n"</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="string">"終端の改行がない"</span>, <span class="string">"\nHello World."</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="string">"先頭の改行がない"</span>, <span class="string">"Hello World.\n"</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">w := &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">writeHello(w)</span><br><span class="line"><span class="keyword">if</span> gotW := w.String(); gotW != tt.wantW &#123;</span><br><span class="line"><span class="keyword">if</span> !tt.diff &#123;</span><br><span class="line">t.Errorf(<span class="string">"writeHello() = %v, want %v"</span>, gotW, tt.wantW)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span></span><br><span class="line">=== RUN   Test_writeHello</span><br><span class="line">=== RUN   Test_writeHello/正常</span><br><span class="line">=== RUN   Test_writeHello/終端の改行がない</span><br><span class="line">=== RUN   Test_writeHello/先頭の改行がない</span><br><span class="line">--- PASS: Test_writeHello (0.00s)</span><br><span class="line">    --- PASS: Test_writeHello/正常 (0.00s)</span><br><span class="line">    --- PASS: Test_writeHello/終端の改行がない (0.00s)</span><br><span class="line">    --- PASS: Test_writeHello/先頭の改行がない (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>ちゃんと想定通り書き込めていることが分かります。</p><h3 id="3-リストファイルから1行ずつ読み込む"><a href="#3-リストファイルから1行ずつ読み込む" class="headerlink" title="3.リストファイルから1行ずつ読み込む"></a>3.リストファイルから1行ずつ読み込む</h3><p>ファイルに記載されている文字列を改行コードで区切って一行ずつ処理をする機会は多いと思います。シェルスクリプトだと以下のようにして各行を読み込んでなんやかんやする感じです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 何らかの処理をする</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;line&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span> &lt; list.txt</span><br></pre></td></tr></table></figure><p>文字列リストの一覧を list.txt などとしてファイルを生成しておいて、ファイルから 1 行ずつ読み込みたいときの Go の Tips です。以下のような階層になっているとします。</p><figure class="highlight bash"><figcaption><span>ディレクトリ構成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── list.txt</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p>list.txt の中身は以下のようにリポジトリ名が書いてあるファイルとします。</p><figure class="highlight bash"><figcaption><span>list.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">future-architect/vuls</span><br><span class="line">future-architect/gcp-instance-scheduler</span><br><span class="line">future-architect/cheetah-grid</span><br><span class="line">future-architect/uroborosql</span><br><span class="line">future-architect/icons</span><br></pre></td></tr></table></figure><p><a href="https://golang.org/pkg/bufio/#NewScanner" target="_blank" rel="noopener">bufio.NewScanner</a> を用いて io.Reader (ファイルや標準入出力など)から文字列を読み込むことできます。改行コードを気にせず、各行を読み込むことができるのが嬉しいポイントです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(<span class="string">"list.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">sc := bufio.NewScanner(f)</span><br><span class="line"><span class="keyword">for</span> sc.Scan() &#123;</span><br><span class="line"><span class="comment">// list.txt にかかれている行の文字列を用いて処理をする</span></span><br><span class="line">line := sc.Text()</span><br><span class="line">fmt.Println(line)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := sc.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出力結果:</span></span><br><span class="line"><span class="comment">// future-architect/vuls</span></span><br><span class="line"><span class="comment">// future-architect/gcp-instance-scheduler</span></span><br><span class="line"><span class="comment">// future-architect/cheetah-grid</span></span><br><span class="line"><span class="comment">// future-architect/uroborosql</span></span><br><span class="line"><span class="comment">// future-architect/icons</span></span><br></pre></td></tr></table></figure><p><a href="https://golang.org/pkg/bufio/#Reader" target="_blank" rel="noopener">bufio.Reader</a> を用いても bufio.NewScanner を用いたときと同様に読み込むことができますが <code>io.EOF</code> のハンドリングする必要がある分、幾分プリミティブな実装です。</p><figure class="highlight go"><figcaption><span>幾分プリミティブな実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(<span class="string">"list.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">r := bufio.NewReader(f)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// list.txt にかかれている行の文字列を用いて処理をする</span></span><br><span class="line">line, _, err := r.ReadLine()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>(line))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-os-execを使う"><a href="#4-os-execを使う" class="headerlink" title="4.os/execを使う"></a>4.os/execを使う</h3><p>ファイルを扱うスクリプトに限った話ではないですが Go では <a href="https://golang.org/pkg/os/exec/#Cmd" target="_blank" rel="noopener">exec.Cmd</a> を用いて外部コマンドを実行することができます。とても便利です。<a href="https://golang.org/pkg/os/exec/#Command" target="_blank" rel="noopener">exec.Command</a> 関数を用いて Path と Args に実行したい文字列をセットします。外部コマンドの実行結果が不要であれば <a href="https://golang.org/pkg/os/exec/#Cmd.Run" target="_blank" rel="noopener">Run()</a>, 必要であれば <a href="https://golang.org/pkg/os/exec/#Cmd.Output" target="_blank" rel="noopener">Output()</a> を用いることができます。たいていの場合この 2 つのメソッドで充足することが多いです。</p><p>外部コマンドの実行した結果、エラーが発生すれば戻り値の error に値が格納されます。<code>_</code> などとしてエラーを無視しないようにしましょう。ちゃんとエラーをチェックすれば直前のコマンドでエラーが発生していたけど、間違って次のコマンドが実行されてしまった。<code>cd</code> でエラーが発生していたけど、後続の <code>rm</code> が実行されて意図しないファイルやディレクトリが削除されてしまった。。。などということは防げます。Bash で <code>set -ue</code> しておくのと似たような雰囲気です。</p><p>その他の情報、例えば PID や終了ステータスといった実行結果を取得したい場合は Cmd 構造体に含まれる ProcessState フィールド(<a href="https://golang.org/pkg/os/#ProcessState" target="_blank" rel="noopener">*os.ProcessState</a> 型)にアクセスするといろいろな情報を取得できます。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">"git"</span>, <span class="string">"clone"</span>, <span class="string">"-b"</span>, <span class="string">"delelop"</span>, <span class="string">"https://..."</span>)</span><br><span class="line"><span class="keyword">if</span> err := cmd.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(cmd.ProcessState.Pid())</span><br><span class="line">fmt.Println(cmd.ProcessState.String())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 実行結果:</span></span><br><span class="line"><span class="comment">// 1234</span></span><br><span class="line"><span class="comment">// exit status 0</span></span><br></pre></td></tr></table></figure><p>注意しておきたいポイントとしてシェルスクリプトで <code>*</code> (ワイルドカード)を使ってコマンドを実行するときに Go の exec.Command の引数に <code>*</code> を含めても展開されません。以下のような実装はエラーが返ってきます。<code>*</code> はシェルスクリプトが展開する(glob でパターンマッチングする)ためです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b, err := exec.Command(<span class="string">"ls"</span>, <span class="string">"*.go"</span>).Output()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 実行結果:</span></span><br><span class="line"><span class="comment">// 2020/04/17 10:57:11 exit status 2</span></span><br></pre></td></tr></table></figure><p>シェルスクリプトの <code>*</code> を使いたい場合は以下のように exec.Command の引数で明示的に <code>/bin/sh -c</code> とする必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b, err := exec.Command(<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"ls"</span>, <span class="string">"*.go"</span>).Output()</span><br></pre></td></tr></table></figure><p>その他にも os.exec の <a href="https://golang.org/pkg/os/exec/#pkg-overview" target="_blank" rel="noopener">Overview</a> には、リダイレクトはされない、glob パターンの展開には <code>filepath.Glob</code> を用いることができる、などといった os.exec を扱う上での注意点が記載されています。あらためて確認してみてください。</p><h3 id="5-ファイルパスの操作にpath-filepathを使う"><a href="#5-ファイルパスの操作にpath-filepathを使う" class="headerlink" title="5.ファイルパスの操作にpath/filepathを使う"></a>5.ファイルパスの操作にpath/filepathを使う</h3><p>ファイルパスの結合に以下のように文字列で <code>/</code> を結合させて、あるディレクトリにファイルを生成することがあると思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testFilePath := tempDir + <span class="string">"/"</span> + <span class="string">"test.txt"</span></span><br></pre></td></tr></table></figure><p>ファイルパス関連で問題の一つとして Unix 系 OS と Windows でパスのセパレータが異なるという問題があります。Unix 系 OS ではセパレータが <code>/</code> であって Windows では <code>\</code> という話です。通常、この手のスクリプトを Unix 系 OS と Windows の両方で動作させることは少ないと思うので、問題になることはあまりないと思いますが、<a href="https://golang.org/pkg/path/filepath/" target="_blank" rel="noopener">path/filepath</a> パッケージを用いるとマルチプラットフォームで扱うことができスマートです。path/filepath パッケージは対象の OS で定義されているファイルパスと互換性のある方法でファイルパスを操作することができるユーティリティを提供しているパッケージです。</p><p>以下はカレントディレクトリ直下に一時的なディレクトリ tempxxxx を作成して、その一時ディレクトリにファイルを生成する実装例です。ファイルパスの結合に <a href="https://golang.org/pkg/path/filepath/#Join" target="_blank" rel="noopener">filepath.Join</a> を用いています。以下の実装では tempDir と test.txt を Join していますが、3 つ以上の文字列を Join することも可能です。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tempDir, err := ioutil.TempDir(<span class="string">"."</span>, <span class="string">"temp"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// defer os.RemoveAll(tempDir) とすればスクリプト終了時に一時ディレクトリを削除することも可能</span></span><br><span class="line"></span><br><span class="line">testFilePath := filepath.Join(tempDir, <span class="string">"test.txt"</span>)</span><br><span class="line">f, err := os.Create(testFilePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">writeHello(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ファイル扱うようなスクリプトを Go で実装する上での Tips 5 選を紹介しました。io.Reader や io.Writer といったインターフェースを受け取ることでファイルを扱うスクリプトでも簡単にテストすることができます。エラーも明示的にハンドリングすることができていい感じです。ちょっとしたファイルを扱う処理を Go で書いてみてはいかがでしょうか。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">ProcessState フィールドを参照するテクニックは <a href="https://umedago.connpass.com/event/159972/" target="_blank" rel="noopener">Umeda.go 2020 Winter</a> で渋川さんが話されていました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">スクリプトちっくとは main.go と main_test.go の 2 ファイルで簡潔に実装できる程度の処理、くらいのニュアンスで使っています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200518/Go-Logo_LightBlue.png&quot; class=&quot;img-small-size&quot;&gt;


&lt;p&gt;&lt;a href=&quot;/tags/GoTips連載/&quot;&gt;Go Tips連載&lt;/a&gt;の第3弾目です。&lt;/p&gt;
&lt;h2 id=&quot;は
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips連載2: Golandで環境変数をさっと貼る方法 </title>
    <link href="https://future-architect.github.io/articles/20200519/"/>
    <id>https://future-architect.github.io/articles/20200519/</id>
    <published>2020-05-19T12:52:54.000Z</published>
    <updated>2020-05-23T05:17:17.033Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200519/top.png"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a>の第2弾です。</p><p>こんにちは。TIG DXユニットの真野です。ここ数ヶ月は某IoT案件でGoを用いてバックエンド開発に勤しんでいました。連載第1弾の<a href="/articles/20200518/">ホワイトリストProxy申請するときのGo依存ライブラリURLドメインの調べ方</a>を書いた宮崎さんとは、Goでメッセージ管理のライブラリとか、2-Way-SQLのライブラリとかを作りたいよねといったネタを交換を良くする仲です。</p><p>今回はGoでアプリ開発するときにお世話になっている人が多い、<a href="https://www.jetbrains.com/go/" target="_blank" rel="noopener">Goland</a>のTipsを紹介します。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><a href="https://12factor.net/ja/" target="_blank" rel="noopener">The Twelve-Factor App</a>の方法論や、Dockerなどコンテナの流行に合わせて、環境変数でアプリケーションの設定を切り替えることが増えていると思います。</p><p>単純にこの言葉通りに設計すると、以下のように環境変数の種類が増えてくる場合が多いと思います。噂では30~40の環境変数を使うコンテナアプリも聞いたことがあります。</p><figure class="highlight bash"><figcaption><span>まだこれでも少ない方かもしれない環境変数が沢山ある例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_USER=local_user</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_ITEM=local_item</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_PROFILE=local_profile</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_INSTALLATION=local_installation</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_CALENDAR=local_calendar</span><br><span class="line"><span class="built_in">export</span> AUDIT_API_ENDPOINT=http://localhost:8000</span><br><span class="line"><span class="built_in">export</span> AUDIT_ID_TRACE_ENDPOINT=http://localhost:8001</span><br><span class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=dummy</span><br><span class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=dummy</span><br><span class="line"><span class="built_in">export</span> AWS_REGION=ap-northeast-1</span><br></pre></td></tr></table></figure><p>ターミナルでGoのテスト実行やアプリ起動を行う場合は、上記をそのまま動かせばよいだけですが、Goland上でDebug実行するときなどは大変です。なぜなら <code>Run Configurations</code> で心を込めてポチポチ環境変数を設定する必要があるからです。とても面倒だと思いました。</p><img src="/images/20200519/photo_20200519_01.png"><p>これは大変なタスクです。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Key=Value形式をセミコロン区切りでクリップボードにコピーすると、一括で貼り付け可能です。</p><p>今回の例だと、exportを外して改行コードの代わりにセミコロンに書き換えてCtr+C…</p><p><code>DYNAMO_TABLE_USER=local_user;DYNAMO_TABLE_ITEM=local_item;DYNAMO_TABLE_PROFILE=local_profile;DYNAMO_TABLE_INSTALLATION=local_installation;DYNAMO_TABLE_CALENDAR=local_calendar;AUDIT_API_ENDPOINT=http://localhost:8000;AUDIT_ID_TRACE_ENDPOINT=http://localhost:8001;AWS_ACCESS_KEY_ID=dummy;AWS_SECRET_ACCESS_KEY=dummy;AWS_REGION=ap-northeast-1;</code></p><p>Environment VariablesのアイコンをクリックすればOKです。</p><img src="/images/20200519/photo_20200519_02.gif"><p>CLI操作では無いのが強いていうと不満ですが、とても楽ちんです。</p><h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><p><code>envfile</code> を読み込むプラグインが存在します。<br><a href="https://plugins.jetbrains.com/plugin/7861-envfile" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/7861-envfile</a></p><p>これを用いれば、ターミナルはdirenv 、Goland上ではEnvFileに任せると一貫性があるかも知れません。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Golandはセミコロン区切りで複数の環境変数をコピペ可能</li><li>プラグインを入れればもう少し固く管理も可能</li></ul><p>皆さまの開発生産性に少しでも役立てれば幸いです。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200519/top.png&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;/tags/GoTips%E
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Goland" scheme="https://future-architect.github.io/tags/Goland/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips連載1: ホワイトリストProxy申請するときのGo依存ライブラリURLドメインの調べ方</title>
    <link href="https://future-architect.github.io/articles/20200518/"/>
    <id>https://future-architect.github.io/articles/20200518/</id>
    <published>2020-05-18T00:55:52.000Z</published>
    <updated>2020-05-23T05:17:09.716Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200518/Go-Logo_LightBlue.png" class="img-small-size"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/tags/GoTips連載/">Go Tips連載</a>の第1弾目です。</p><p>TIG DXユニットの宮崎です。これまでRuby、Java中心に仕事をしてきましたが、ここ1年は某鉄道会社のID連携基盤サーバサイドをGolangで作っています。今回はGo Tips連載の第一回として、ホワイトリストProxy申請するときのGo依存ライブラリURLドメインの調べ方を記載します。</p><p>※パッケージ管理にはGo Modulesを使用している前提です。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>社内CIサーバからのインターネットアクセスがやんごとなき事情でホワイトリスト形式で許可されており、ライブラリダウンロードでアクセスするドメインへの接続解除申請を上げようとしたのが契機。  </p><p>go.modでrequireしているドメインへのアクセスを全て許可したのにも関わらず一部のライブラリが落とせなく、(;´･ω･)? となったのでこれ以上の犠牲者を出さないためTips連載ネタにします。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><ul><li>インターネットアクセスできる環境にて<code>go mod download -v</code>でアクセス先を全て表示させる。</li><li>この時、ライブラリによってはrequireドメインではないリポジトリにリダイレクトされているので、アクセス許可ドメインとして見逃さないこと。(ハマりポイント)　  <ul><li>↓の場合だとrequire先は<code>cloud.google.com</code>だがライブラリダウンロード自体は<code>code.googlesource.com</code>から実施される。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get <span class="string">"cloud.google.com/go"</span>: found meta tag get.metaImport&#123;Prefix:<span class="string">"cloud.google.com/go"</span>, VCS:<span class="string">"git"</span>, </span><br><span class="line">RepoRoot:<span class="string">"https://code.googlesource.com/gocloud"</span>&#125; at https://cloud.google.com/go?go-get=1</span><br></pre></td></tr></table></figure><br>この記事で少しでも犠牲者が減ることを祈っています。<h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200518/Go-Logo_LightBlue.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する</title>
    <link href="https://future-architect.github.io/articles/20200515/"/>
    <id>https://future-architect.github.io/articles/20200515/</id>
    <published>2020-05-15T13:25:58.000Z</published>
    <updated>2020-05-15T01:12:46.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>AWS StepFunctionsとLambdaを活用してバッチ処理を行う記事です。<a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載企画</a>の6回目です。</p><p>2020年はServerlessアーキテクチャが当たり前のように採用される時代になってきていると実感します。フロントエンドからアクセスされるBackendのAPIはAWS環境だと、AppsyncやAPI Gateway+Lambaの利用、IoTなどイベントドリブンなメッセージに対してはAWS IoT、その後続はKinesisを使い、さらにその後続でLambdaやKinesis AnalyticsでETL処理を行い、データストアとしてDynamoDBやS3に格納するといった一連の流れ全てフルマネージドなサービスに寄せて構築することも当たり前ですし、そういった事例も珍しく無くなってきました。</p><h1 id="サーバレスのバッチ処理"><a href="#サーバレスのバッチ処理" class="headerlink" title="サーバレスのバッチ処理"></a>サーバレスのバッチ処理</h1><p>そんな中で、バッチ処理（定時起動やユーザの非同期イベントで処理を行うジョブ）に関してはLambdaではなくECSなどを採用することが多いと思います。理由としてはやはり <a href="https://aws.amazon.com/jp/blogs/news/aws-lambda-timeout-15min/" target="_blank" rel="noopener">LambdaのTimeout時間が最大で15分</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> であるためです。また、ECSも非同期タスク起動ではなく常駐にしてHTTPリクエストなどでイベントを待ち受けるタイプに関しては、<a href="https://docs.aws.amazon.com/ja_jp/elasticloadbalancing/latest/application/application-load-balancers.html#connection-idle-timeout" target="_blank" rel="noopener">ALBであれば4000秒（約66分）</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>なため、1h超えの処理時間になりうる機能は採用できないでしょう。ALBではなくNLBを採用するとこの制約からは逃げられるので、SecurityGroupなどの考えがややALBと異なりますがこちらを採用するチームもいらっしゃると思います。もしくは次の <a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/run-task.html" target="_blank" rel="noopener">ecs-run-task</a> で非同期にECSコンテナを呼び出している、という方式をとることも多いのでは無いでしょうか？ 定期実行であれば、ECS Scheduled Tasksを利用することもできるので便利ですよね。</p><h1 id="ECS-Run-Taskについて"><a href="#ECS-Run-Taskについて" class="headerlink" title="ECS Run Taskについて"></a>ECS Run Taskについて</h1><p>ecs-run-taskで非同期（または定期的）にECSを呼び出す方法を取るメリットは多く、、</p><ul><li>Timeoutなどの各種制約を無視して実行できる</li><li>実質main関数を実装すれば良いので開発時にコンテナを意識することは少ない意味で難易度は高くない</li><li>log出力も自由自在（直接ElasticSearchにログを投げつけることなど何でもできる）</li><li>Fargateを用いるとサーバインフラを意識しないで済むため、実質Serverlessとして運用できそう</li></ul><p>…と言ったことがあります。とは言えいくつかトレードオフもあります。思いつく限りだと…</p><ul><li>ECSタスクの終了を <strong>待ち受けて</strong> 次処理を行うといったことがやりにくい<ul><li>起動したECSタスクが終了したということを、通常はPolling的に監視する必要がある<ul><li>もしくは、ECSコンテナアプリの終了時に、SQSなどに実行終了したことを通知する必要がある</li></ul></li></ul></li><li>コンテナサイズに依存して起動時間のオーバーヘッドがある</li><li>ECS TaskDefinitionの管理が大変</li></ul><p>などがあると思います。<a href="https://github.com/kayac/ecspresso" target="_blank" rel="noopener">kayac/ecspresso</a> のようなECSデプロイツールや、ECS以外のサービスを採用しても学習コスト・インフラ保守コストはどうしてもかかるのでやや無理やり上げた感がありますがご容赦ください。</p><p>個人的にはジュニアなエンジニアがチームに多いのと、AWSに慣れていない新規参画者が多いという、「<strong>他アプリがLambdaで完結している場合に、ECSという別のアプリランタイムを入れたくない</strong>」 という技術スタックをなるべく増やしたくないという思いがあり、できる限りアプリ開発はLambdaでやりたいと思ってます。（Dockerfileもなるべく書かせなく無ければ、 ECRやECSなどインフラ管理対象も増やしたくないし、CI/CDのバリエーションも下げて楽したいというのがあります）</p><h1 id="Lambdaでバッチ処理をガンバル"><a href="#Lambdaでバッチ処理をガンバル" class="headerlink" title="Lambdaでバッチ処理をガンバル"></a>Lambdaでバッチ処理をガンバル</h1><p>起動時間の制約があるもののLambdaでバッチ処理をガンバル前提で進めます。</p><p>アプローチとしては色々あると思いますが、よく思いつくのは次の2つの手法です。</p><ol><li>Lambdaの実行時間をアプリ上で計測し、シンデレラタイムが近づきそうであれば自分で処理を中断、オフセットを引数にSQSに投げるか、非同期で次のLambdaをInvokeして処理を継続する(下図のLambda延命イメージ)</li><li>入力データを一定の大きさでパーティション化して、1と同じくSQSやLambdaをInvokeして後続の複数のLambdaで処理を行う（下図のLambda入力パーティションイメージ）</li></ol><img src="/images/20200515/photo_20200515_01.png"><p>入力データを上手く分割実行できないものに関しては1でシーケンシャルに行う必要がありますが、そうでない場合は2のアプローチのほうが、後々並列実行したい場合にも転用できるので便利だと思いますので、2の方針で進めます。</p><h1 id="コードについて"><a href="#コードについて" class="headerlink" title="コードについて"></a>コードについて</h1><p>次からGoのコードをまじえながら進めていきます。記載するサンプルコードはimport文などを省略しています。全文は以下のリポジトリを参照ください。</p><p><a href="https://github.com/laqiiz/servlerless-batch-example" target="_blank" rel="noopener">https://github.com/laqiiz/servlerless-batch-example</a></p><h1 id="入力がDynmaoDBの場合"><a href="#入力がDynmaoDBの場合" class="headerlink" title="入力がDynmaoDBの場合"></a>入力がDynmaoDBの場合</h1><p>DynamoDBはKVSという印象が強いですが、非常に多くの機能を持っています。いわゆるPK（HashKeyかHashKey＋SortKey）を指定せずにレコードを取得する方法には、次の1,2がありますがバッチ用途だとおそらく1を利用することが多いと思います。ちなみに、2はGSIに対しても実施できます。</p><ol><li><strong>Scan</strong>: HashKeyを指定せずフルスキャンする</li><li><strong>Query</strong>: HashKeyを指定してSortKeyに対して条件で絞る</li></ol><p>1のフルスキャンですがアプリケーション側でPartitionKeyのようなものを持たせること無く、DynamoDBの機能として下図のように <a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan" target="_blank" rel="noopener">並列スキャン</a>が可能です。</p><img src="/images/20200515/photo_20200515_02.png"><p>AWSのドキュメントから引っ張って来ましたが、 <code>TotalSegments</code> と <code>Segment</code> をリクエストに指定することで、DynamoDB側がデータを論理的にTotalSegmentsの数に分割してくれます。アプリケーション側では以下のように指定するだけでOKです。</p><p>例としてTotalSegments、Segmentを指定した場合のDynamoDB ScanのGo実装の例です。TotalSegmentsを<code>4</code>にする場合は、total=4にし、segに0,1,2,3指定した実行すれば排他的にデータを取得できます。何かしらのPartitionKeyとSortKeyを設定してGSIで上手くデータを分割すると言った考慮なしに利用できるため非常に便利だと思います。</p><p>アクセス方法を書いていきます。最初にDynamoDBを初期化しておきます。必要に応じて各種Config設定を行います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = dynamodb.New(session.Must(session.NewSession(aws.NewConfig().WithRegion(<span class="string">"ap-northeast-1"</span>))))</span><br></pre></td></tr></table></figure><p>先ほど初期化したdbに対してデータ操作を行います。<code>TotalSegments</code>, <code>Segment</code> の指定が分割のキーとなります。</p><figure class="highlight go"><figcaption><span>Segment指定の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanSegment</span><span class="params">(ctx context.Context, total, seg <span class="keyword">int64</span>, startKey <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue)</span> <span class="params">([]Resp, <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue, error)</span></span> &#123;</span><br><span class="line">out, err := db.ScanWithContext(ctx, &amp;dynamodb.ScanInput&#123;</span><br><span class="line">TableName:         aws.String(<span class="string">"&lt;DynamoDB Scan Table&gt;"</span>),</span><br><span class="line">TotalSegments:     aws.Int64(total), <span class="comment">// セグメントへの分割数</span></span><br><span class="line">Segment:           aws.Int64(seg),   <span class="comment">// 処理番号（0,1,2,3を指定）</span></span><br><span class="line">ExclusiveStartKey: startKey,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"db.ScanWithContext: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resp []Resp</span><br><span class="line"><span class="keyword">if</span> err := dynamodbattribute.UnmarshalListOfMaps(out.Items, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"dynamodbattribute.UnmarshalListOfMaps: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, out.LastEvaluatedKey, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この <code>ScanSegment</code> 関数を呼び出すと、指定されたSegment番号のレコードのみ読み取る事ができます。呼び出し方は後述します。次の<strong>ページング</strong>の考えと合わせて考慮する必要があります。</p><h2 id="DynamoDBをバッチ処理で扱うときの注意"><a href="#DynamoDBをバッチ処理で扱うときの注意" class="headerlink" title="DynamoDBをバッチ処理で扱うときの注意"></a>DynamoDBをバッチ処理で扱うときの注意</h2><p>いくつか補足して、DynamoDBで大きなデータサイズのデータを扱う場合の注意を記載します。</p><h3 id="ページングについて"><a href="#ページングについて" class="headerlink" title="ページングについて"></a>ページングについて</h3><p>DynamoDBの1度のScanでの最大サイズは1MBという制約があります。それ以上のデータを読み取りる場合は、 ExclusiveStartKeyで指定しているような <a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination" target="_blank" rel="noopener">ページング</a> を行う必要があります。上記の実装であれば <code>ExclusiveStartKey</code> がそれにあたります。</p><p><code>ScanSegment</code> の呼び出し側の実装例も記載しておきます。</p><figure class="highlight go"><figcaption><span>ScanSegmentの呼び出し側の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanWithLogic</span><span class="params">(ctx context.Context, total, seg <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> startKey <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue <span class="comment">// 初回はnilでOK</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">resp, sk, err := ScanSegment(context.Background(), total, seg startKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"ScanSegment: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO respに対して何かしらのビジネスロジック</span></span><br><span class="line"></span><br><span class="line">startKey = sk</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(startKey) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// 続きが無いということなので終了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scanの結果をページングを駆使しつつ最後まで読み取る場合は、 Scan結果の <code>LastEvaluatedKey</code> が存在しなくなるまで繰り返して呼び出すことになります。上記で segments=0 のデータをすべて読み取る事ができました。</p><h3 id="単一プロセスでの分散実行"><a href="#単一プロセスでの分散実行" class="headerlink" title="単一プロセスでの分散実行"></a>単一プロセスでの分散実行</h3><p>もし、ローカルで分散実行したい場合はGoであれば errgroupを用いると便利です。注意としてどれか1つのgoroutineが失敗した場合でも、それだけやり直すのではなく全てやり直すことになるので、アプリケーションを冪等に作って置く必要があります。</p><figure class="highlight go"><figcaption><span>ローカルでの分散実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">parallel := <span class="number">4</span></span><br><span class="line"></span><br><span class="line">eg := errgroup.Group&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; parallel; i++ &#123;</span><br><span class="line">i := i</span><br><span class="line">eg.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">err := ScanWithLogic(context.Background(), <span class="keyword">int64</span>(parallel), <span class="keyword">int64</span>(i))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := eg.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"finished"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出力先をDynamoDBにする場合のスロットリング対策"><a href="#出力先をDynamoDBにする場合のスロットリング対策" class="headerlink" title="出力先をDynamoDBにする場合のスロットリング対策"></a>出力先をDynamoDBにする場合のスロットリング対策</h3><p>今回、出力先についてはテーマではないですが、DynamoDBに対して行う場合はクセがあるため追記しておきます。</p><p>大量データをDynamoDBに書き込む場合は、BatchWriteItemを利用することが多いでしょう。このとき<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Limits.html#limits-api" target="_blank" rel="noopener">DynamoDBのAPI制限</a> として、以下の25件の制約があります。</p><blockquote><p>単一の BatchWriteItem オペレーションは、最大 25 の PutItem または DeleteItem リクエストを含むことができます。書き込むすべての項目の合計サイズは 16 MB を超えることはできません。</p></blockquote><p>こちらは超過した場合には全件登録に失敗し、errorが返ってくるのでまだ良心的な制約です。</p><p>しかし、<a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html" target="_blank" rel="noopener">BatchWriteItemの仕様</a>としてバッチの <strong>部分的な書き込み成功</strong> が発生することがありえます。テーブル名の指定など基本的なところが失敗していれば、全件失敗になるのですが、書き込みスループット超過エラーであれば <code>UnprocessedItems</code> としてレスポンスに含まれ、そのItemは書き込み失敗になります。最初はmjkと思い、いまでもmjkって思ってます。</p><p>そのため、下記の実装例のように、実行結果から <code>UnprocessedItems</code> を取り出し未処理の件数が0になるまで繰り返してBatchWrite要求を行う必要があります。</p><figure class="highlight go"><figcaption><span>BatchPut時のUnprocessedItemsを考慮した実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchPut</span><span class="params">(ctx context.Context, puts []Output)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">batchReq := <span class="built_in">make</span>([]*dynamodb.WriteRequest, <span class="number">0</span>, <span class="number">25</span>) <span class="comment">// dynamodb max batch size is 25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> puts &#123;</span><br><span class="line">av, err := dynamodbattribute.MarshalMap(v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodbattribute.MarshalMap: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">batchReq = <span class="built_in">append</span>(batchReq, &amp;dynamodb.WriteRequest&#123;</span><br><span class="line">PutRequest: &amp;dynamodb.PutRequest&#123;</span><br><span class="line">Item: av,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(batchReq) &gt;= <span class="number">25</span> || (i == <span class="built_in">len</span>(puts) <span class="number">-1</span> &amp;&amp; <span class="built_in">len</span>(batchReq) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 25件に達したか、最後のループの場合に書き込む</span></span><br><span class="line">out, err := db.BatchWriteItemWithContext(ctx, &amp;dynamodb.BatchWriteItemInput&#123;</span><br><span class="line">RequestItems: <span class="keyword">map</span>[<span class="keyword">string</span>][]*dynamodb.WriteRequest&#123;</span><br><span class="line"><span class="string">"&lt;Your Write Table&gt;"</span>: batchReq,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"db.BatchWriteItemWithContext: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">batchReq = batchReq[:<span class="number">0</span>] <span class="comment">// 成功した場合はバッチ対象を初期化</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(out.UnprocessedItems[<span class="string">"&lt;Your Write Table&gt;"</span>]) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 未処理Itemが存在した場合は再設定</span></span><br><span class="line">batchReq = <span class="built_in">append</span>(batchReq, out.UnprocessedItems[<span class="string">"&lt;Your Write Table&gt;"</span>]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちょっと大変ですが、上記によってバッチ未処理の取りこぼし無くDynamoDBにデータを登録できます。逆にUnprocessedItemsを考慮せずに実行した場合、 err が発生せず正常終了するけどデータが実は未登録だった、ということがありえるのでご注意ください。</p><h1 id="入力がS3の場合"><a href="#入力がS3の場合" class="headerlink" title="入力がS3の場合"></a>入力がS3の場合</h1><p>前提としてS3に巨大な1ファイルに対して何かしらの検証やETLなどの処理を行うこととします。もし複数ファイルであればAWS Athenaのパーティション機能を用いた方が効率的だと思います。Athenaの場合はクエリ結果が非同期で取得することになるので内部で結果をポーリングするなど少し作り込みが必要だと思いますので、その点の考慮はご注意ください。</p><p>さて、S3の1ファイルを扱う場合で行単位でパーティショニングして読み取る方法は（調査した限りは）存在しません。入力がCSVやJSON Lineの前提だと <a href="https://aws.amazon.com/jp/blogs/news/querying-data-without-servers-or-databases-using-amazon-s3-select/" target="_blank" rel="noopener">S3 Select</a> が利用できるので、こちらで対応します。</p><p>S3 SelectはS3の単一オブジェクトに対してのみ利用可能。SQLのテーブル名は <code>s3object</code> 固定になります。何かしらの数値項目に対して、 <code>SELECT * FROM s3object WHERE (item_no % 4) = 0</code> とすれば対象のデータセットのみを扱えます。</p><p>CSVの入力に対しては、S3 Selectはデフォルト文字列で型判定するようなので、数値項目が存在する場合はSQL上で<code>CAST</code>が必要なので注意です。<a href="https://aws.amazon.com/jp/blogs/developer/introducing-support-for-amazon-s3-select-in-the-aws-sdk-for-go/" target="_blank" rel="noopener">AWS Developer Blog - Introducing support for Amazon S3 Select in the AWS SDK for Go</a>では <code>io.Pipe</code> + <code>csv.NewReader</code> を使っている実装例が紹介されていますが、今回は折角なのでJSON Outputを使って実装してみます。</p><p>以下のようにS3 Select部分にSQLを記載します。</p><figure class="highlight go"><figcaption><span>S3-Selectの呼び出し例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">resp, err := svc.SelectObjectContent(&amp;s3.SelectObjectContentInput&#123;</span><br><span class="line">Bucket:         aws.String(<span class="string">"&lt;Your S3 Bucket&gt;"</span>),</span><br><span class="line">Key:            aws.String(<span class="string">"&lt;S3 Key Name&gt;.csv"</span>),</span><br><span class="line">ExpressionType: aws.String(s3.ExpressionTypeSql),</span><br><span class="line">Expression:     aws.String(<span class="string">"SELECT cast(item_no integer), item_name FROM s3object s WHERE cast(item_no integer) % 4 = 0"</span>), <span class="comment">// 4分割のうちから0~3を指定</span></span><br><span class="line">InputSerialization: &amp;s3.InputSerialization&#123;</span><br><span class="line">CompressionType: aws.String(<span class="string">"NONE"</span>),</span><br><span class="line">CSV: &amp;s3.CSVInput&#123;</span><br><span class="line">FileHeaderInfo: aws.String(s3.FileHeaderInfoUse),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">OutputSerialization: &amp;s3.OutputSerialization&#123;</span><br><span class="line">JSON: &amp;s3.JSONOutput&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"svc.SelectObjectContent: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.EventStream.Close()</span><br></pre></td></tr></table></figure><p>上記を実行すると、<code>resp.EventStream</code> から実行結果を取得できるので、次のように処理します。</p><p><code>OutputSerialization</code> で <code>JSON</code> を指定すると <strong>JSON配列ではなく</strong>、<a href="http://jsonlines.org/" target="_blank" rel="noopener">JSON Lines</a>でデータが取得できるため、1行ずつ読み込みJSONをデコードします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> event := <span class="keyword">range</span> resp.EventStream.Events() &#123;</span><br><span class="line"><span class="keyword">switch</span> v := event.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *s3.RecordsEvent:</span><br><span class="line">r := bufio.NewReader(bytes.NewReader(v.Payload))</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, _, err := r.ReadLine()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"readLine :%w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resp Resp</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(line, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO 何かしらのビジネスロジック</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := resp.EventStream.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"resp.EventStream: %w"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これにより、S3 Selectレベルで分割されたレコードに対して何かしらの処理を行うことができます。今回はJSON Outputを用いましたが、入力がCSVの場合はCSVそのままで処理したほうが性能は良いかもしれません。</p><h2 id="S3-Selectを使う上での注意"><a href="#S3-Selectを使う上での注意" class="headerlink" title="S3 Selectを使う上での注意"></a>S3 Selectを使う上での注意</h2><p>バッチ処理に限らずですが、2020/04月時点ではAthenaのようにS3 Selectは外部スキーマを参照できないようなので、Structへのマッピングで数値項目が来た場合は、SQL側でCASTするのが手間でした。真面目にプロダクションで運用することを考えると、AWS Athenaを利用するほうが Schema on READ になるもの型の恩恵を受けられ良いかもしれません。</p><h1 id="Step-Functions"><a href="#Step-Functions" class="headerlink" title="Step Functions"></a>Step Functions</h1><p><a href="https://aws.amazon.com/jp/step-functions/" target="_blank" rel="noopener">AWS Step Functions</a> はAWS の複数のサービスに対してワークフローを組むことができるサービスです。ワークフローはステートマシンとして表現することでLambdaの実行管理を任せることができます。</p><p>ワークフローをJSONベースの構造化言語である<a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html" target="_blank" rel="noopener">Amazon States Language</a>で記載するという点がツラミとして挙げられることが大きもしますが、定義したワークフローは即座にプレビューで可視化されますしそれをSVGなどでExportもできるので、JSON力を鍛えながら開発することができます。</p><img src="/images/20200515/photo_20200515_03.png"><p>※HelloWorldのStep Functionsの開発イメージ</p><h2 id="Step-Functions-×-Lambda"><a href="#Step-Functions-×-Lambda" class="headerlink" title="Step Functions × Lambda"></a>Step Functions × Lambda</h2><p>Lambdaの実行時間制約をStep Functionsで突破しようという試みです。実際には以下のようなイメージです。前提として、処理件数が事前にある程度分かっている場合においては、単純にN個にタスクを分割してStep FunctionsからLambdaを呼び出せば良いです。この分散したLambdaそれぞれでDynamoDBのあるSegmentだけを担当させるイメージです。</p><p>DynamoDBやLambdaの場合はスケールアウトさせやすいサービスのため、固定であればParallelステートを利用して並列実行することができます。</p><img src="/images/20200515/photo_20200515_04.png"><p>ただ、Parallelステートだと分散するタスク自体をJSONで定義する必要があり、同時実行数を増やすたびにStepFunctionsの定義を更新する必要があり手間です。次の動的並列の機能を今回は利用したいと思います。</p><h2 id="動的並列する場合"><a href="#動的並列する場合" class="headerlink" title="動的並列する場合"></a>動的並列する場合</h2><p>Step Functionsは <a href="https://aws.amazon.com/jp/blogs/news/new-step-functions-support-for-dynamic-parallelism/" target="_blank" rel="noopener">Amazon Web Services ブログ - 新機能 – Step Functions が動的並列処理をサポート</a> で紹介されているMap 状態を用い、ワークフローでスキャッターギャザーメッセージングパターン（分散して集約するようなパターン）を行うことができます。</p><p>今回はこちらを採用して、最初にScatterLambdaというタスクで、分散情報を動的に生成し、TaskLambdaでDynamoDBをScanし、最後にGatherLambdaで実行件数をカウントするというフローを組むことにします（下図）。</p><img src="/images/20200515/photo_20200515_05.png"><p>※水色のオブジェクトが重なっているところが並列実行されるタスクです。この各LambdaでDynamoDBのあるSegment数だけ担当させるイメージです。</p><h2 id="Lambdaの-In-Out-設計"><a href="#Lambdaの-In-Out-設計" class="headerlink" title="Lambdaの In/Out 設計"></a>Lambdaの In/Out 設計</h2><p>3つのLambdaを利用しますが、概念的にそれぞれの入力・出力を示します。</p><img src="/images/20200515/photo_20200515_06.png"><h2 id="実装について"><a href="#実装について" class="headerlink" title="実装について"></a>実装について</h2><p>上図のような状態遷移図は、下記のJSONで表現できます。<code>ProcessAllSegments</code> の <code>Type: Map</code>と <code>Iterator</code> の部分がミソで、これによって動的に <code>tasklambda</code> 並列実行できます。</p><figure class="highlight json"><figcaption><span>分散実行の状態遷移.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"StartAt"</span>: <span class="string">"ScatterLambda"</span>,</span><br><span class="line">  <span class="attr">"States"</span>: &#123;</span><br><span class="line">    <span class="attr">"ScatterLambda"</span>: &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"Task"</span>,</span><br><span class="line">      <span class="attr">"Resource"</span>: <span class="string">"arn:aws:lambda:ap-northeast-1:123456789012:function:scatterlambda"</span>,</span><br><span class="line">      <span class="attr">"Next"</span>: <span class="string">"ProcessAllSegments"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"ProcessAllSegments"</span>: &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"Map"</span>,</span><br><span class="line">      <span class="attr">"InputPath"</span>: <span class="string">"$.task_definitions"</span>,</span><br><span class="line">      <span class="attr">"ItemsPath"</span>: <span class="string">"$"</span>,</span><br><span class="line">      <span class="attr">"MaxConcurrency"</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">"Iterator"</span>: &#123;</span><br><span class="line">        <span class="attr">"StartAt"</span>: <span class="string">"TaskLambda"</span>,</span><br><span class="line">        <span class="attr">"States"</span>: &#123;</span><br><span class="line">          <span class="attr">"TaskLambda"</span>: &#123;</span><br><span class="line">            <span class="attr">"Type"</span>: <span class="string">"Task"</span>,</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"arn:aws:lambda:ap-northeast-1:123456789012:function:tasklambda"</span>,</span><br><span class="line">            <span class="attr">"End"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"ResultPath"</span>: <span class="string">"$.task_results"</span>,</span><br><span class="line">      <span class="attr">"Next"</span>: <span class="string">"GatherLambda"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"GatherLambda"</span>: &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"Task"</span>,</span><br><span class="line">      <span class="attr">"InputPath"</span>: <span class="string">"$"</span>,</span><br><span class="line">      <span class="attr">"Resource"</span>: <span class="string">"arn:aws:lambda:ap-northeast-1:123456789012:function:gatherlambda"</span>,</span><br><span class="line">      <span class="attr">"End"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scatter, Task, GatherのLambdaはそれぞれ以下のような概要です。</p><h1 id="Scatter部分"><a href="#Scatter部分" class="headerlink" title="Scatter部分"></a>Scatter部分</h1><p>Scatterは入り口のLambdaで、<code>InEvent</code> を引数に持ちます。並列数を受け取ることができこれに応じたTask定義を作成して、後続の TaskLambda に渡します。</p><figure class="highlight go"><figcaption><span>ScatterLambda</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> InEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">Total <span class="keyword">int</span> <span class="string">`json:"total"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OutEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">TaskDefinitions []TaskDefinition <span class="string">`json:"task_definitions"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TaskDefinition <span class="keyword">struct</span> &#123;</span><br><span class="line">Total <span class="keyword">int64</span> <span class="string">`json:"total"`</span></span><br><span class="line">Seg   <span class="keyword">int64</span> <span class="string">`json:"seg"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(HandleRequest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleRequest</span><span class="params">(e InEvent)</span> <span class="params">(*OutEvent, error)</span></span> &#123;</span><br><span class="line">total := <span class="number">4</span> <span class="comment">// default</span></span><br><span class="line"><span class="keyword">if</span> e.Total != <span class="number">0</span> &#123;</span><br><span class="line">total = e.Total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defs := <span class="built_in">make</span>([]TaskDefinition, <span class="number">0</span>, total)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; total; i++ &#123;</span><br><span class="line">defs = <span class="built_in">append</span>(defs, TaskDefinition&#123;</span><br><span class="line">Total: <span class="keyword">int64</span>(total),</span><br><span class="line">Seg:   <span class="keyword">int64</span>(i),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;OutEvent&#123;</span><br><span class="line">TaskDefinitions: defs,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出力のイメージは、例えば4並列であれば次のようなJSON配列になるイメージです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;task_definitions&quot;: [</span><br><span class="line">    &#123;&quot;total&quot;: 4, &quot;seg&quot;: 0&#125;,</span><br><span class="line">    &#123;&quot;total&quot;: 4, &quot;seg&quot;: 1&#125;,</span><br><span class="line">    &#123;&quot;total&quot;: 4, &quot;seg&quot;: 2&#125;,</span><br><span class="line">    &#123;&quot;total&quot;: 4, &quot;seg&quot;: 3&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このJSON配列  <code>task_definitions</code> の1要素ずつ後続のLambdaに渡します。</p><h2 id="TaskLambad"><a href="#TaskLambad" class="headerlink" title="TaskLambad"></a>TaskLambad</h2><p>TaskLambdaは実際にDynamoDBにアクセスして、バッチ処理を行うメイン処理です。今回はただScanして件数を計算するだけですが実際は、外部のAPIサーバに問い合わエンリッチしたり、集約して計算したり、他のデータストアに書き込むなどを行います。引数である <code>InEvent</code> が示す通り、ScattterのLambdaで生成されたDynamoDBのSegument情報を受け取り利用します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> InEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">Total <span class="keyword">int64</span> <span class="string">`json:"total"`</span></span><br><span class="line">Seg   <span class="keyword">int64</span> <span class="string">`json:"seg"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OutEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">Count <span class="keyword">int64</span> <span class="string">`json:"count"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resp <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Any fields</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">db    = dynamodb.New(session.Must(session.NewSession(aws.NewConfig().WithRegion(<span class="string">"ap-northeast-1"</span>))))</span><br><span class="line">table = os.Getenv(<span class="string">"DYNAMO_TABLE"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(HandleRequest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleRequest</span><span class="params">(e InEvent)</span> <span class="params">(*OutEvent, error)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"InEvent: %+v"</span>, e)</span><br><span class="line">total, seg := e.Total, e.Seg</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> startKey <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">resp, sk, err := ScanSegment(context.Background(), total, seg, startKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"scan error: %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"ScanSegment: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">count += <span class="built_in">len</span>(resp)</span><br><span class="line">log.Printf(<span class="string">"count: %v"</span>, count)</span><br><span class="line"></span><br><span class="line">startKey = sk</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(startKey) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">"total count: %v"</span>, count)</span><br><span class="line"><span class="keyword">return</span> &amp;OutEvent&#123;</span><br><span class="line">Count: <span class="keyword">int64</span>(count),</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1つ1つのLambdaの出力は以下のようなシンプルなものです。</p><figure class="highlight json"><figcaption><span>出力例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"count"</span>: <span class="number">6293</span>&#125;</span><br></pre></td></tr></table></figure><p>並列実行された全てLambdaが終わると、最後にGatherのLambdaが起動します。</p><h2 id="GatherLambda"><a href="#GatherLambda" class="headerlink" title="GatherLambda"></a>GatherLambda</h2><p>最後に集約するLambdaです。TaskLambdaではScanした件数を出力しているので、それを集約して総件数を計算だけすることにします。 引数の <code>InEvent</code>が配列になっているのは、今回Iterationで並列実行されたため複数のOutputがあるためです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">Results []TaskResult <span class="string">`json:"task_results"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TaskResult <span class="keyword">struct</span> &#123;</span><br><span class="line">Count <span class="keyword">int64</span> <span class="string">`json:"count"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OutEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">TotalCount <span class="keyword">int64</span> <span class="string">`json:"total_count"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(HandleRequest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleRequest</span><span class="params">(e InEvent)</span> <span class="params">(*OutEvent, error)</span></span> &#123;</span><br><span class="line">totalCount := <span class="keyword">int64</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> e.Results &#123;</span><br><span class="line">totalCount += v.Count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">"total: %d"</span>, totalCount)</span><br><span class="line"><span class="keyword">return</span> &amp;OutEvent&#123;</span><br><span class="line">TotalCount: totalCount,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回はGatherのLambdaで終了なのですが、何かしら戻り値を定義しておくとStepFunctionsのコンソール画面から実行結果を確認できるので便利です。もし、集約処理が不要な場合はこのLambdaをなくしてそのままEndしてしまうのも手だと思います。その場合はScatter&amp;Gatherというよりは、Fan-Outパターンと言うようです。</p><h2 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><p>それぞれ、それぞれのLambdaをデプロイして、StepFunctionsのJSONのARN部分を書き換えると実行可能です。ただし、TaskLambdaだけはDynamoDBにアクセスするためIAM RoleにDynamoDBのScan権限を付与してください。いくつかのコマンドは <a href="https://github.com/laqiiz/servlerless-batch-example" target="_blank" rel="noopener">https://github.com/laqiiz/servlerless-batch-example</a> にも記載しているので参考ください。</p><h1 id="性能検証"><a href="#性能検証" class="headerlink" title="性能検証"></a>性能検証</h1><p>作成したStepFunctionsがどれくらい処理性能がスケールするか検証しました。分散数を1, 2, 4, 8, 16 で計測しています。</p><p><strong>テストデータ</strong></p><ul><li>件数：約10万件</li><li>1ドキュメントあたりのフィールド数：15項目</li><li>1ドキュメントあたりのデータ量：JSON表現で300[KB]弱</li></ul><h2 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h2><p>処理時間と[ms]と分散数1との比率を表にしました。大体10万件のDynamoDBをScanするのに1並列だと30秒程度かかります。DynamoDBをScanするだけの処理では完全にリニアにスケールするというわけではないですが、本来はこの読み取ったレコードに対して、なにかしらの追加処理を行う時間が加算されるはずなのでほとんどのユースケースでは問題ないと思います。</p><table><thead><tr><th>分散数</th><th>処理時間[ms]</th><th>分散数1との比率[%]</th></tr></thead><tbody><tr><td>1</td><td>31077</td><td>100</td></tr><tr><td>2</td><td>15414</td><td>49.6</td></tr><tr><td>4</td><td>9035</td><td>29.1</td></tr><tr><td>8</td><td>5047</td><td>16.2</td></tr><tr><td>16</td><td>3402</td><td>10.9</td></tr></tbody></table><p>ちなみに、16並列では各実行数が6203~6577の間でScanできていたのでかなり件数は平準化できていました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>長いエントリーを最後まで読んでいただきありがとうございます。</p><ul><li>ServerlessのBatchといえばFargateがメジャーだと思うが、Lambdaも工夫次第で十分戦える</li><li>DynamoDBの並列Scanが便利で、10万件Scanが1並列で30秒ほどが目安</li><li>S3が入力だとしてもS3 Selectで入力を分割する設計で対応できる</li><li>StepFunctionsの動的並列実行を利用することでLambdaの実行時間制約に引っかからないように、事前で入力を分割しそれぞれのLambdaに渡す仕組みが作れる</li></ul><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">2020/04/26時点の話です。将来的に伸びる可能性が高いとは思っています。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;AWS StepFunctionsとLambdaを活用してバッチ処理を行う記事です。&lt;a href=&quot;https://fut
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>仕事でPythonコンテナをデプロイする人向けのDockerfile (2): distroless編</title>
    <link href="https://future-architect.github.io/articles/20200514/"/>
    <id>https://future-architect.github.io/articles/20200514/</id>
    <published>2020-05-13T23:51:53.000Z</published>
    <updated>2020-05-14T01:08:25.028Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200514/top.png"><p><a href="https://future-architect.github.io/articles/20200513/">前回のエントリー</a>では、Debianベースの堅実な仕事向けのDockerイメージ作成方法について紹介しました。</p><p>Goではそこそこ実績も増えつつある気がするdistroless。シェルが入っていないくて、ログインされることもなく安全というGoogle製のDockerイメージです。Python3はまだexperimentalですが、実は小さいと言われるalpine版よりも、イメージサイズが半分ぐらいだったりもします。distrolessでは3.7しかないので、3.7のイメージ同士の比較です。</p><table><thead><tr><th>イメージ</th><th>サイズ</th></tr></thead><tbody><tr><td>python:3.7-alpine</td><td>96MB</td></tr><tr><td>python:3.7-slim-buster</td><td>179MB</td></tr><tr><td>python:3.7-buster</td><td>919MB</td></tr><tr><td>gcr.io/distroless/python3-debian10</td><td>52MB</td></tr></tbody></table><p>なお、distrolessのイメージは2種類（3通りの名前）がありますが、Python 3.5はバグ修正はせず、セキュリティ修正のみでサポート期限が2020/9/13というステータスなので、本エントリーでは3.7の方のみを扱います。</p><ul><li>gcr.io/distroless/python3: Python 3.5.3</li><li>gcr.io/distroless/python3-debian9: Python 3.5.3(上のイメージと同一)</li><li>gcr.io/distroless/python3-debian10: Python 3.7.3</li></ul><p>一応サンプル等もありますが、どれも1ファイルで構成されたサンプルスクリプトばかりです。前回のsite-packagesにコピーする方法を軽く試したところうまく動かず、シェルもpipもensurepipもないため、ビルドイメージにすることもできません。いろいろ調べた結果、使い方がわかったので、そのやり方を紹介します。</p><p><a href="https://github.com/GoogleContainerTools/distroless/tree/master/examples/python3" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/distroless/tree/master/examples/python3</a></p><h1 id="ベースイメージの組み合わせ"><a href="#ベースイメージの組み合わせ" class="headerlink" title="ベースイメージの組み合わせ"></a>ベースイメージの組み合わせ</h1><p>多少のイメージサイズによるコスト削減幅よりも、社員がビルドで苦労しない、残業代が減らせる、という方が仕事上は圧倒的にバリューとして大切なことが多いので、Debian版を最初に紹介しましたし、そこの価値は変わりません。しかし、セキュリティ上もうれしいというのであれば使わない手はありませんが、残念ながらすべてのケースに使えるわけではなさそうです。ベースイメージの組み合わせ別の使える例を紹介します。</p><table><thead><tr><th align="center">ビルドベースイメージ</th><th align="center">実行ベースイメージ</th><th align="center">Pure Python</th><th align="center">C拡張(wheelあり)</th><th align="center">C拡張(wheelなし)</th></tr></thead><tbody><tr><td align="center">full版Debian</td><td align="center">slim版Debian</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="center">slim版Debian</td><td align="center">slim版Debian</td><td align="center">○</td><td align="center">○</td><td align="center"></td></tr><tr><td align="center">slim版Debian</td><td align="center">distroless</td><td align="center">○</td><td align="center">○</td><td align="center"></td></tr><tr><td align="center">(参考)Alpine</td><td align="center">Alpine</td><td align="center">○</td><td align="center">※1</td><td align="center">※2</td></tr></tbody></table><p>※1 manylinux1が動作せず、ソースビルドになる。apkでgcc等のインストールが必要<br>※2 apkでgcc等のインストールが必要</p><p>Pythonの場合、多くのパッケージがバイナリwheelを提供してくれています。そのため、Cコンパイラのインストールや設定が大変なWindowsであっても、昔からPythonユーザーはネイティブコードを使ったライブラリの恩恵に授かりやすく、環境構築も短時間で完了していました。「ライブラリのビルドが難しい」みたいな話は僕はPythonではほとんど聞いたことがありません。そのため、distrolessを使うチャンスはもしかしたら結構多いかもしれません。しかし、前回紹介したuwsgiはコンパイルが必要なので難しいです。</p><p>コンパイルが必要なパッケージをビルドしても、libpython3.7m.soが見つからない、みたいなエラーになってしまい、一筋縄ではいかなそうなのですよね（数日トライしたがいかなかった）。もし解決策を見つけた方はおしらせください。</p><h1 id="敵を知り己を知れば百戦殆うからず"><a href="#敵を知り己を知れば百戦殆うからず" class="headerlink" title="敵を知り己を知れば百戦殆うからず"></a>敵を知り己を知れば百戦殆うからず</h1><p>「前回のsite-packagesにコピーする方法を軽く試したところうまく動かなかった」と紹介しましたが、設定がもろもろ違うのですよね。このあたりを知っておかないと、いざdistrolessでトラブルが発生したときに解決に時間がかかると思うので（実際かかった）、どんな感じか調査結果をまとめておきます。</p><h2 id="シェルがない"><a href="#シェルがない" class="headerlink" title="シェルがない"></a>シェルがない</h2><p>まずシェルがないので、通常のDockerはENTRYPOINTがシェルで、CMDに実行されるコマンドを書く、というのが通例ですが、distrolessはCMDがpython3です。CMDにはPythonの処理系で処理できるコードを渡さなければなりません。イメージのlatest（デフォルト）ではなく、debugタグ（イメージ名の末尾に<code>:debug</code>をつける）と、busyboxのシェルが有効になりますが、あくまでもデバッグ用途ですね。</p><h2 id="PythonのパスなどがDebian版と違う"><a href="#PythonのパスなどがDebian版と違う" class="headerlink" title="PythonのパスなどがDebian版と違う"></a>PythonのパスなどがDebian版と違う</h2><p>通常、<code>sys.path</code>には<code>/usr/local/lib/python3.7/site-packages</code>といったパスがあり、pipでグローバルにインストールしたパッケージはそこに入ります。しかし、そもそもそのようなパスがなく、<code>sys.path</code>にも格納されていません。まず、Pythonの位置からして<code>/usr/local/lib</code>ではなく、<code>/usr/lib</code>でした。</p><figure class="highlight py"><figcaption><span>sys.path</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'/app'</span>, <span class="string">'/usr/lib/python37.zip'</span>, <span class="string">'/usr/lib/python3.7'</span>, <span class="string">'/usr/lib/python3.7/lib-dynload'</span>]</span><br></pre></td></tr></table></figure><p>Pythonのパッケージの置き場をsiteパッケージで確認したところ、site-packagesはDebianのシステムPython風のdist-packagesで、ユーザーは別のところですね。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> site</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(site.getsitepackages())</span><br><span class="line">[<span class="string">'/usr/local/lib/python3.7/dist-packages'</span>, <span class="string">'/usr/lib/python3/dist-packages'</span>, <span class="string">'/usr/lib/python3.7/dist-packages'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(site.getusersitepackages())</span><br><span class="line"><span class="string">'/root/.local/lib/python3.7/site-packages'</span></span><br></pre></td></tr></table></figure><p>ちなみに、python:3.7-busterだとこんな感じ。distrolessで動いているのはシステムPythonで、ユーザーランドで動かす用のPythonではなさそう。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> site</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>site.getsitepackages()</span><br><span class="line">[<span class="string">'/usr/local/lib/python3.7/site-packages'</span>]</span><br></pre></td></tr></table></figure><h2 id="aptコマンドもない"><a href="#aptコマンドもない" class="headerlink" title="aptコマンドもない"></a>aptコマンドもない</h2><p>シェルがないため、何か追加のパッケージを入れようとしても、Dockerの枠組みの中ではいろいろやるのが困難です。もともとdistrolessはDockerで作られたのではなく、Bazelで作られているイメージですし、aptでライブラリやツールを入れるなど、凝ったことをする必要がある場合はBazelでイメージをビルドする必要があります。</p><p><a href="https://github.com/GoogleContainerTools/distroless/blob/master/examples/python3/BUILD" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/distroless/blob/master/examples/python3/BUILD</a></p><p>本エントリーでは、みんなが慣れているDockerの範囲内で説明するのでひとまずご安心ください。</p><p>ここまでわかったので、駒を進めます。</p><h1 id="Pure-Pythonなアプリを動かす"><a href="#Pure-Pythonなアプリを動かす" class="headerlink" title="Pure Pythonなアプリを動かす"></a>Pure Pythonなアプリを動かす</h1><p>前回のDjangoウェブアプリを題材にして進めます。uwsgiはうまくいかなかったので、Pure Pythonでこちらも人気の高いgunicornを使います。requirements.txtは次のようになります。</p><figure class="highlight plain"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django</span><br><span class="line">gunicorn</span><br></pre></td></tr></table></figure><p><code>pip install -r requirements.txt</code>で依存ライブラリと一緒にインストールした後に、requirements.lockを作ります。前回と同じですね。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip freeze &gt; requirements.lock</span></span><br></pre></td></tr></table></figure><p>Dockerfileは次のようになりました。どうせCコンパイルが必要なC拡張は利用できないため、ベースイメージをslim版にしていますが、それ以外のビルドステージは変化ありません。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ここはビルド用のコンテナ</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim-buster as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.lock /opt/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.lock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ここからは実行用のコンテナ</span></span><br><span class="line"><span class="keyword">FROM</span> gcr.io/distroless/python3-debian10 as runner</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/lib/python3.7/site-packages /root/.<span class="built_in">local</span>/lib/python3.7/site-packages</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/bin/gunicorn /opt/app/mysite/gunicorn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> mysite /opt/app/mysite</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app/mysite</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"gunicorn"</span>, <span class="string">"--workers=5"</span>, <span class="string">"--threads=2"</span>, <span class="string">"--capture-output"</span>, <span class="string">"--bind=0.0.0.0:8000"</span>, <span class="string">"mysite.wsgi"</span>]</span></span><br></pre></td></tr></table></figure><p>実行のポイントとしては、モジュールのコピー先を<code>/root/.local/lib/python3.7/site-packages</code>にしている点です。gunicornのスクリプトもPythonプログラムとして実行するのでパスが通っている必要がないため、アプリのワークフォルダにコピーしています。gunicornの設定は大量にあるのですが、とりあえずワーカー数（コア数n * 2 + 1が良いらしい)を増やしたり、スレッドを増やしています。また、コンソールをDockerのログ出力に出すようにしています。</p><p>これでPure Pythonのパッケージも動きました。</p><h2 id="manylinux1なwheelは動作するか？"><a href="#manylinux1なwheelは動作するか？" class="headerlink" title="manylinux1なwheelは動作するか？"></a>manylinux1なwheelは動作するか？</h2><p>せっかくなのでこちらも試してみましたこれの有無でできることがかなり変わってきますので。画像処理パッケージのPillowを使ってみます。requirements.txtに一行追加して、reuirements.lockを更新します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django</span><br><span class="line">gunicorn</span><br><span class="line">Pillow</span><br></pre></td></tr></table></figure><p>Djangoのサンプルの最初まで実装したものだったので、<code>mysite/polls/views.py</code>にイベントハンドラがいると思うので、そこに画像を返すハンドラを足します。</p><figure class="highlight py"><figcaption><span>mysite/polls/views.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">future</span><span class="params">(request)</span>:</span></span><br><span class="line">    image = Image.new(<span class="string">"RGB"</span>, (<span class="number">500</span>, <span class="number">300</span>), <span class="string">"white"</span>)</span><br><span class="line">    draw = ImageDraw.Draw(image)</span><br><span class="line"></span><br><span class="line">    draw.line((<span class="number">150</span>, <span class="number">170</span>, <span class="number">450</span>, <span class="number">50</span>), fill=(<span class="number">214</span>, <span class="number">0</span>, <span class="number">75</span>), width=<span class="number">10</span>)</span><br><span class="line">    draw.line((<span class="number">50</span>, <span class="number">220</span>, <span class="number">350</span>, <span class="number">120</span>), fill=(<span class="number">214</span>, <span class="number">0</span>, <span class="number">75</span>), width=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    response = HttpResponse(content_type=<span class="string">"image/png"</span>)</span><br><span class="line">    image.save(response, <span class="string">"PNG"</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><p>ハンドラを呼べるようにurls.pyにも追加します。</p><figure class="highlight py"><figcaption><span>mysite/polls/urls.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'future'</span>, views.future, name=<span class="string">'future logo'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>再びDockerイメージをビルドして実行してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t pytest .</span><br><span class="line">$ docker run -it --rm -p <span class="string">"8000:8000"</span> pytest</span><br></pre></td></tr></table></figure><p>うまくいきました。manylinux1であれば、distrolessでも動作することが確認できました。機械学習系もそこそこいけるんじゃないでしょうか？</p><img src="/images/20200514/1.png" class="img-middle-size"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ちょっと癖があるけど、muslのような性能の劣化もなく、ビルド時間もDebian系と変わらず（一応Debian10なので）、Alpineよりも小さく、シェルがなくてセキュアなdistroless/python3を使う方法を紹介しました。</p><p>なお、このエントリーの調査過程でdistroless/python3にはmanなどの使われない（シェルもないので）ドキュメントファイルが1.6MBほど入っていることがわかり、それを<a href="https://github.com/GoogleContainerTools/distroless/issues/508" target="_blank" rel="noopener">報告</a>しつつ、PRを用意していたのですが、ビルドエラーが発生→<a href="https://github.com/GoogleContainerTools/distroless/issues/509" target="_blank" rel="noopener">Debianの配信サーバーのバグ？</a>と大事になってきています。本当はサイズをさらに小さくしました、とかっこよく報告できればよかったんですけどね。</p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</a></li><li><a href="https://future-architect.github.io/articles/20200422/">PyConJP 2019に登壇しました</a></li><li><a href="https://future-architect.github.io/articles/20200131/">AirflowのTips 11選</a></li><li><a href="https://future-architect.github.io/articles/20200212/">GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200514/top.png&quot;&gt;


&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200513/&quot;&gt;前回のエントリー&lt;/a&gt;では、Debianベースの堅実な仕事向けのD
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</title>
    <link href="https://future-architect.github.io/articles/20200513/"/>
    <id>https://future-architect.github.io/articles/20200513/</id>
    <published>2020-05-12T23:56:40.000Z</published>
    <updated>2020-05-13T23:54:22.934Z</updated>
    
    <content type="html"><![CDATA[<p>Pythonで書かれたアプリケーションをDockerイメージにする堅い方法の紹介です。イメージサイズを少しでも削ろう！とかではなくて実用性重視の方向です。今回は第一弾ということで、Debianベースのイメージを使う方法を紹介します。</p><ul><li>続編も公開されました。<ul><li><a href="https://future-architect.github.io/articles/20200514/">https://future-architect.github.io/articles/20200514/</a></li></ul></li></ul><h1 id="Pythonのベースイメージ選び"><a href="#Pythonのベースイメージ選び" class="headerlink" title="Pythonのベースイメージ選び"></a>Pythonのベースイメージ選び</h1><p>イメージ作成にはベースイメージ選びからですが、基本的には次の2つかなと思います。Pythonバージョンは機械学習だと3.7がよく使われていると思いますが、5/8にTensorflowが3.8向けのwheelとセットで新バージョンを出したので、そろそろ3.8になっていきますかね。本記事も3.8にしますが、3.7でも動作します。</p><ul><li>python:3.x-buster</li><li>python:3.x-slim-buster</li></ul><p>イメージのOSには以下のような種類があります。</p><table><thead><tr><th align="center">名前</th><th align="center">どんなもの？</th></tr></thead><tbody><tr><td align="center">buster</td><td align="center">Debian 10で処理系とかいっぱいインストール済み</td></tr><tr><td align="center">buster-slim</td><td align="center">Debian 10で処理系なしの実行環境用</td></tr><tr><td align="center">stretch</td><td align="center">Debian 9で処理系入り</td></tr><tr><td align="center">stretch-slim</td><td align="center">Debian 9で処理系なしの実行環境用</td></tr><tr><td align="center">alpine</td><td align="center">元はフロッピーで起動するファイルサイズ重視のディストリビューション</td></tr><tr><td align="center">windowsservercore</td><td align="center">Windows。LinuxやmacOS上では動作しない</td></tr></tbody></table><p>BusterとかStretchという名前が見慣れない方もいるかもしれませんが、これはLinuxディストリビューションとしてシェアの大きな<a href="https://www.debian.org/releases/index.en.html" target="_blank" rel="noopener">Debianのコードネーム</a>です。</p><p>Debianバージョンが少し古いStretchの方がちょびっとサイズが小さかったりはしますが、まあ実用的にはサポートが長い方がいいですよね。slimを使ってGCCとかのコンパイラを自前でダウンロードしている記事とかもたまに見かける気がしますが、マルチステージビルドであれば、そんなにケチケチしなくていいのと、パッケージダウンロードは逐次処理なので遅く、処理系が入ったイメージのダウンロードの方が高速です。並列で処理されるし、一度イメージをダウンロードしてしまえば、なんどもビルドして試すときに効率が良いです。また、多くのケースでネイティブのライブラリも最初から入っており、ビルドでトラブルに遭遇することはかなり減るでしょう。</p><p>Pythonユーザーは基本的にAlpineを選んではいけません。いろいろネガが大きいからです。</p><ul><li><a href="https://superuser.com/questions/1219609/why-is-the-alpine-docker-image-over-50-slower-than-the-ubuntu-image" target="_blank" rel="noopener">AlpineはUbuntuよりも50%以上遅い</a></li><li><a href="https://pythonspeed.com/articles/alpine-docker-python/" target="_blank" rel="noopener">Alpineにするとビルド時間が50倍になる</a></li></ul><p>最初の項目。なぜ遅いかというと、Alpineのアプリが使うlibc(musl)のメモリ周りアロケートの実装が、性能よりもライブラリのサイズ重視のシンプルでPythonの使い方と合わなくて速度が出ないとのこと。これはアプリケーションの実装次第なのでjemallocを使っているRubyとかの人は関係ないでしょうし、PostgreSQLとかNginxはAlpine版でも速度は変わらないようです。性能が2倍違うということは、クラウドでアプリケーションを動かすときはメモリさえ許せば一つ下のインスタンスでいいわけで、お金にも利いてきますよね。</p><p>後者の速度の問題ですが、PyPIはLinux向けにはmanylinux1という形式でバイナリを提供しており、DebianでもRedHatでも高速にインストールできます。しかし、この形式はAlpineには対応していないため、C拡張を使うライブラリを使うと、Dockerイメージのビルド時間が伸びまくってしますわけです。</p><p>それでも、どうしても、PurePythonで処理速度はどうでも良い/お金がたくさんある、あるいはC拡張を使う場合でも人生を犠牲にしてでも、イメージサイズをどうしても減らしたいみたいな選ばれし者はAlpineを使う感じでしょうかね。</p><h1 id="Pythonのマルチステージビルド"><a href="#Pythonのマルチステージビルド" class="headerlink" title="Pythonのマルチステージビルド"></a>Pythonのマルチステージビルド</h1><p>マルチステージビルドで環境を作っていきます。</p><p>アプリケーションはDjangoのチュートリアルの最初の1ステップだけ作ったものをuwsgiを使ってデプロイすることを想定します。フォルダ＆ファイル構成はこんな感じ。</p><img src="/images/20200513/1.png" class="img-middle-size"><p>依存パッケージは今回はこれだけです。ただこのファイルは開発環境を設定するときに書くぐらいですね。あまり重要ではないです。</p><figure class="highlight plain"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django</span><br><span class="line">uwsgi</span><br></pre></td></tr></table></figure><p>実際にDockerの中で使うファイルはこちら。<code>pip install -r requirements.txt</code>で依存ライブラリと一緒にインストールした後に<code>pip freeze &gt; requirements.lock</code>で作成します。あらかじめvenvで環境を分けて置くと、ノイズが混ざらないので良いです。</p><figure class="highlight plain"><figcaption><span>requirements.lock</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">asgiref==3.2.7</span><br><span class="line">Django==3.0.5</span><br><span class="line">pytz==2020.1</span><br><span class="line">sqlparse==0.3.1</span><br><span class="line">uWSGI==2.0.18</span><br></pre></td></tr></table></figure><p>uwsgi用の設定はこちら。プロセス数とかスレッド数は適当に。</p><figure class="highlight ini"><figcaption><span>deploy/uwsgi.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">http</span> = <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></span><br><span class="line"><span class="attr">chdir</span> = /opt/app/mysite</span><br><span class="line"><span class="attr">wsgi-file</span> = mysite/wsgi.py</span><br><span class="line"><span class="attr">master</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">processes</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">threads</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">stats</span> = <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9191</span></span><br><span class="line"><span class="attr">uid</span> = uwsgiusr</span><br><span class="line"><span class="attr">gid</span> = uwsgiusr</span><br></pre></td></tr></table></figure><p>Dockerfileはこうなりました。slimの方にはlibxml2などがないので追加します。PostgreSQLのライブラリのlibpq5はまあおまけです。大抵ウェブアプリケーション作るときはPostgreSQLかMySQLは使うでしょうし。もし、使うライブラリがpure python、もしくはC拡張でもwheelによるバイナリ配布をしているパッケージのみであれば、ビルド用イメージも3.8-slim-busterにできます。slimを使っていても、もしライブラリを追加した瞬間にGCCが必要になっても、イメージを3.8-busterに変えるだけなので、このマルチステージビルドの構成は崩さない方が良いでしょう。お仕事であれば問題回避の速度が大事ですからね。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ここはビルド用のコンテナ</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-buster as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.lock /opt/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.lock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ここからは実行用コンテナの準備</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim-buster as runner</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/lib/python3.8/site-packages /usr/<span class="built_in">local</span>/lib/python3.8/site-packages</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/bin/uwsgi /usr/<span class="built_in">local</span>/bin/uwsgi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apt install -y libpq5 libxml2 \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apt-get clean \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd -r -s /bin/<span class="literal">false</span> uwsgiusr</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /opt/app/src/logs/app_logs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch /opt/app/src/logs/server.log</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R uwsgiusr /opt/app/src/logs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> deploy/uwsgi.ini /opt/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> mysite /opt/app/mysite</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> uwsgiusr</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"uwsgi"</span>, <span class="string">"--ini"</span>, <span class="string">"/opt/app/uwsgi.ini"</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t pytest .</span><br><span class="line">$ docker run -it --rm -p <span class="string">"8000:8000"</span> pytest</span><br></pre></td></tr></table></figure><p>ブラウザでアクセスするとうまくいきました。</p><img src="/images/20200513/2.png" class="img-middle-size"><h2 id="Pythonでどうやってマルチステージビルドを実現するのか"><a href="#Pythonでどうやってマルチステージビルドを実現するのか" class="headerlink" title="Pythonでどうやってマルチステージビルドを実現するのか"></a>Pythonでどうやってマルチステージビルドを実現するのか</h2><p>ポイントとしては、pip installしてできたライブラリを一式コピーして実行用のコンテナに写してます。uwsgiは別の場所にインストールされるので、それも個別にコピーします。</p><figure class="highlight dockerfile"><figcaption><span>今回使ったのはこちらの方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/lib/python3.8/site-packages /usr/<span class="built_in">local</span>/lib/python3.8/site-packages</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/bin/uwsgi /usr/<span class="built_in">local</span>/bin/uwsgi</span></span><br></pre></td></tr></table></figure><p>実はこの書き方を紹介している記事等はほとんどありません。ネットでよく見るPythonのマルチステージビルドの方法は次の方法です。</p><figure class="highlight dockerfile"><figcaption><span>こっちの方がよく見る</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /root/.cache /root/.cache</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> /build/requirements.txt /opt/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br></pre></td></tr></table></figure><p>この方法であれば、uwsgiのような別の場所に入る実行ファイルも自動で処理されるのできれいにうまくいくのですが、最終的なイメージに/root/.cacheのレイヤーが残ってしまいます。RUNによるレイヤーなら&amp;&amp;を駆使して削除できるのですが、これはCOPYで作られるレイヤーなので、今のDockerだけだとこの無駄は削除できないのですよね。</p><p>機械学習ライブラリもりもりなイメージだと、これだけで200MBぐらいの容量になったり（全体も1.2GBとかになりますが）。今のところsite-packages全部コピーの方法で問題はなさそうです。</p><h1 id="実行時に必要なライブラリがないと言われたら"><a href="#実行時に必要なライブラリがないと言われたら" class="headerlink" title="実行時に必要なライブラリがないと言われたら"></a>実行時に必要なライブラリがないと言われたら</h1><p>フルセットのbusterには開発者向けのライブラリ類も含めていろいろ入っているのでビルドが成功するも、slim側にライブラリがなくて実行時エラーになる可能性があります。実行時にライブラリがロードできないというエラーが出たら、<a href="https://packages.debian.org/search?lang=ja&arch=amd64&mode=filename&searchon=contents&keywords=libxml2.so.2" target="_blank" rel="noopener">こちらのサイト</a>にライブラリ名を入れて、それをインストールするのに必要なパッケージを探し、apt installの項目に追加してください。</p><img src="/images/20200513/3.png" class="img-middle-size"><p>Pythonだと関数の中でimportできます。名前空間を汚さないので、こちらの方が良いのかな、と思って僕も以前やっていましたが、ファイルのグローバルなところだけにimportがあると、ちょっとした実行すると必要なモジュールを全部読み込んでくれて、この手のロードエラーはすぐにわかります。関数内importはなるべく避けた方が良いでしょう（先日もそれで問題を見つけきれなかった）。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Pythonを仕事で使う人のための堅いイメージ作成について紹介しました。Alpineのような性能のネガもなく、イメージの作成の実行時間も少なく、残業時間が減らせる方法を選びました。次回は条件によっては使えないかもしれないのですが、使えたら効果抜群なdistroless/python3について紹介します。</p><p><strong>公開しました(2020/05/14)</strong></p><p><a href="https://future-architect.github.io/articles/20200514/">https://future-architect.github.io/articles/20200514/</a></p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20200422/">PyConJP 2019に登壇しました</a></li><li><a href="https://future-architect.github.io/articles/20200131/">AirflowのTips 11選</a></li><li><a href="https://future-architect.github.io/articles/20200212/">GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pythonで書かれたアプリケーションをDockerイメージにする堅い方法の紹介です。イメージサイズを少しでも削ろう！とかではなくて実用性重視の方向です。今回は第一弾ということで、Debianベースのイメージを使う方法を紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;続編も公開され
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>日本製HeadlessCMSのmicroCMSを触ってみた</title>
    <link href="https://future-architect.github.io/articles/20200512/"/>
    <id>https://future-architect.github.io/articles/20200512/</id>
    <published>2020-05-12T00:48:20.000Z</published>
    <updated>2020-05-12T01:01:47.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして！TIG DXチーム　アルバイターの三村です．</p><p>普段は大学院生をしておりフューチャーには <a href="https://jobs.atcoder.jp/" target="_blank" rel="noopener">AtCoder Jobs</a> 経由でアルバイト採用していただき，5月でちょうど1年になります！ありがとう<a href="https://atcoder.jp/" target="_blank" rel="noopener">AtCoder</a>!!これまで</p><ul><li>Vue.jsでのフロントエンド画面作成</li><li>Docker上でlocalstackを用いたAWS用の技術検証</li><li>Goでメッシュ計算ツール作成</li><li>Pythonで性能検証用のダミー時系列データの生成</li></ul><p>などなどアルバイターですが幅広く様々なタスクをやらせてもらいました．<br>そして今回はHeadlessCMSを利用したタスクをやることになりました．私自身HeadlessCMSどころかCMSを聞いたことすら無かったので，初めてCMS使ってみるにあたって感じたことを共有出来たらと思い本記事を作成させていただいております．</p><h1 id="そもそもCMSって？"><a href="#そもそもCMSって？" class="headerlink" title="そもそもCMSって？"></a>そもそもCMSって？</h1><p>CMSは<strong>Content Management System</strong>の頭文字を取った略称で，文字通り「コンテンツを管理するシステム」のことです．</p><p>例えば素朴にwebコンテンツを作成しようとした場合，画面だけでもHTMLやCSS等の技術的なスキルが必要となります．一方でCMSを利用してwebコンテンツを作成すれば，技術的なスキルに依存することなくコンテンツの作成に注力することができます．<br>すなわちコンテンツ作成者は技術的なことは懸念せずにコンテンツの作成，管理にだけリソースが割くことができて嬉しいです．</p><p>具体的なCMSサービスには<a href="https://ja.wordpress.org/" target="_blank" rel="noopener">WordPress</a>が挙げられます．</p><h1 id="HeadlessCMS"><a href="#HeadlessCMS" class="headerlink" title="HeadlessCMS"></a>HeadlessCMS</h1><p>HeadlessCMSとはWikipediaに以下のようにあります．</p><blockquote><p>Whereas a traditional CMS typically combines the content and presentation layers of a website, a headless CMS is just the content component and focuses entirely on the administrative interface for content creators, the facilitation of content workflows and collaboration, and the organization of content into taxonomies. It doesn’t concern itself with presentation layers, templates, site structure, or design, but rather stores its content in pure format and provides access to other components (e.g. delivery front ends, analytics tools, etc.) through stateless or loosely coupled APIs.</p></blockquote><p><a href="https://en.wikipedia.org/wiki/Headless_content_management_system" target="_blank" rel="noopener">Wikipedia</a> より引用</p><p>要約すると以下のような感じでしょうか．</p><blockquote><p>従来のCMSがウェブサイトのコンテンツとプレゼンテーション層を組み合わせたものであるのに対し，HeadlessCMSはコンテンツの構成要素のみに焦点を当てている．プレゼンテーションレイヤー，テンプレート，サイト構造，デザインには関心がなく純粋な形式でコンテンツを保存しステートレスなAPIを通じて他のコンポーネントへのアクセスを提供する．</p></blockquote><p>すなわち，HeadlessCMSはフロントエンドとバックエンドを切り離して設計します．フロントエンドとバックエンド間はAPIを通じてコンテンツのやり取りをします．これによりフロントエンド側はデザインやレイアウトが固定されず高い自由度で開発が行えます．</p><p>これが前述のWordPressに代表されるCMSとの違いです．</p><h2 id="HeadlessCMSサービスの比較"><a href="#HeadlessCMSサービスの比較" class="headerlink" title="HeadlessCMSサービスの比較"></a>HeadlessCMSサービスの比較</h2><p>HeadlessCMSは数多くのサービスが存在しています．<br>ここでは代表的な3つのサービスの <a href="https://buttercms.com/" target="_blank" rel="noopener">butterCMS</a>， <a href="https://www.contentful.com/" target="_blank" rel="noopener">contentful</a>， <a href="https://microcms.io/" target="_blank" rel="noopener">microCMS</a> を比較してみたいと思います．</p><p>調査日: <strong>2020年5月8日時点</strong></p><table><thead><tr><th>性能/コスト</th><th>butterCMS</th><th>contentful</th><th>microCMS</th></tr></thead><tbody><tr><td>利用料金(月)</td><td>208$ Small Businessプラン</td><td>879$ Businessプラン</td><td>29,000円 Businessプラン</td></tr><tr><td>CMS管理画面からコンテンツの作成，更新，削除，参照</td><td>〇</td><td>〇</td><td>〇</td></tr><tr><td>APIによるコンテンツの取得</td><td>〇</td><td>〇</td><td>〇</td></tr><tr><td>管理権限</td><td>〇</td><td>〇</td><td>〇</td></tr><tr><td>予約公開機能</td><td>〇</td><td>〇</td><td>〇</td></tr><tr><td>サポート</td><td>海外サポート</td><td>海外サポート</td><td>国内サポート</td></tr><tr><td>ドキュメント</td><td>英語</td><td>英語</td><td>日本語</td></tr></tbody></table><p>どのサービスも基本的な機能は満たされています．microCMSは日本製HeadlessCMSですのでドキュメントからサポートまですべて日本語対応です．サービス開始が2019年8月からということもあり，現在も活発に機能の改善や追加が行われています．<br>公式で様々な<a href="https://microcms.io/blog/" target="_blank" rel="noopener">入門記事やチュートリアル</a>を書いてくれているので初めてHeadlessCMSを触ってみる場合に取り掛かりやすいと思います．</p><p>したがって今回は<a href="https://microcms.io/" target="_blank" rel="noopener">microCMS</a>を使ってみます！無料プランの機能も充実しています．</p><h1 id="microCMSを使ってみる"><a href="#microCMSを使ってみる" class="headerlink" title="microCMSを使ってみる"></a>microCMSを使ってみる</h1><p>それでは実際にmicoroCMSを使ってみます．<br>以降の例では<strong>「ブログ記事の管理」</strong> という場面を想定してmicroCMSの利用を説明していきます．<br>コンテンツの利用には会員登録を済ませたのち，</p><ol><li>サービスの作成</li><li>APIの作成</li><li>コンテンツの入力</li></ol><p>上記の3つのステップが必要です．以下で順に見ていきます！</p><h2 id="会員登録"><a href="#会員登録" class="headerlink" title="会員登録"></a>会員登録</h2><p>まずは<a href="https://microcms.io/" target="_blank" rel="noopener">ここ</a>から会員登録を完了させてください．<br>画面の手順通りに進めば簡単に会員登録できると思いますので，詳細は省略させていただきます．</p><p>料金体系は以下のようになっていますので，ご自身で利用したいプランを選択してください．<br>本記事ではFreeプランを選択しています．<br><img src="/images/20200512/photo_20200512_01.png"></p><h2 id="サービスの作成"><a href="#サービスの作成" class="headerlink" title="サービスの作成"></a>サービスの作成</h2><p>会員登録を済ませたら最初にサービスを作成します．サービスIDはコンテンツのサブドメインです．すなわち，<strong>https://[サービスID].microcms.io/</strong>となりますので半角英数字で作成します．<br>ここではサービス名を<strong>microCMS入門</strong>，サービスIDを<strong>future-blog-sample</strong>としています．<br><img src="/images/20200512/photo_20200512_02.png" style="border:solid 1px #000000"></p><p>また，サービスには識別しやすいように画像を設定することができますので，複数サービスを運用する場合には設定するといいと思います．<br><img src="/images/20200512/photo_20200512_03.png" style="border:solid 1px #000000"><br>私は既に1つサービスを作成していましたので，画面左上にうっすら既存サービスのアイコンが見えるかと思います．</p><h2 id="APIの作成"><a href="#APIの作成" class="headerlink" title="APIの作成"></a>APIの作成</h2><p>サービスの作成が完了したら先ほど作成した<strong>https://[サービスID].microcms.io/</strong>に進みAPIの作成をします．<br>今回は「ブログ記事」の配信と管理を想定しているので以下のようにAPI名とエンドポイントを作成します．<br><img src="/images/20200512/photo_20200512_04.png" style="border:solid 1px #000000"></p><p>APIで得られるデータ形式にはリスト形式かオブジェクト形式を選択することができます．<br>今回配信するコンテンツの「ブログ記事」はリスト形式で管理したいと思います．<br><img src="/images/20200512/photo_20200512_05.png" style="border:solid 1px #000000"></p><p>次にAPIスキーマを定義していきます．<br>スキーマの種類には以下の画像のように選択できます．一通り想定されるスキーマは備えられており，簡単な説明もあるため，どれを使うべきか非常にわかりやすくなっています．<br><img src="/images/20200512/photo_20200512_06.png"></p><p>今回は「ブログ記事」のコンテンツ配信を想定しているので以下のようにスキーマを作成します．スキーマは後から修正を加えることができます．<br><img src="/images/20200512/photo_20200512_07.png" style="border:solid 1px #000000"></p><h2 id="コンテンツの作成"><a href="#コンテンツの作成" class="headerlink" title="コンテンツの作成"></a>コンテンツの作成</h2><p>最後に先ほど作成したAPIにコンテンツの作成をします．画面右上の「追加」からコンテンツの作成を行います．<br><img src="/images/20200512/photo_20200512_08.png" style="border:solid 1px #000000"></p><p>コンテンツの作成ができたら早速コンテンツの公開をしましょう！右上の公開ボタンを押してコンテンツが公開されます．なおプルダウンメニューから下書きとして保存しておくこともできます．<br><img src="/images/20200512/photo_20200512_09.png" style="border:solid 1px #000000"></p><p>これでコンテンツが配信されている状態となりました．次で実際にコンテンツを取得してみたいと思います！</p><h1 id="APIの利用"><a href="#APIの利用" class="headerlink" title="APIの利用"></a>APIの利用</h1><p>コンテンツの配信準備が整ったので実際にコンテンツを取得してみます！</p><p>microCMSには簡単にAPIを試すことができる「APIプレビュー」が備わっています．まずはここからAPIを利用してみたいと思います．<br>先ほど作成したコンテンツの画面から右上の「APIプレビュー」を選択します．<br><img src="/images/20200512/photo_20200512_10.png" style="border:solid 1px #000000"></p><p>「APIプレビュー」で開かれたメニューから「取得」をクリックすると，APIリクエストが実行されてレスポンスが表示されます！また，curlコマンドも提示してくれているためご自身の環境でもすぐに試せるようになっている親切設計です．<br><img src="/images/20200512/photo_20200512_11.png" style="border:solid 1px #000000"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"https://[サービスID].io/api/v1/blog/l5cn1orii"</span> -H <span class="string">"X-API-KEY: YOUR_API_KEY"</span></span><br></pre></td></tr></table></figure><h1 id="コンテンツ参照"><a href="#コンテンツ参照" class="headerlink" title="コンテンツ参照"></a>コンテンツ参照</h1><p>先ほどの例では「ブログ作成者」をべた書きで与えていましたが，実際にブログを作成する際には作成者に対して</p><ul><li>名前</li><li>アイコン</li><li>プロフィール</li><li>各種SNSアカウントへのリンク</li></ul><p>のように，いくつかの情報を付与したいことがあると思います．このような機能は「コンテンツ参照」を利用することで実現できます！</p><h2 id="参照先コンテンツの作成"><a href="#参照先コンテンツの作成" class="headerlink" title="参照先コンテンツの作成"></a>参照先コンテンツの作成</h2><p>まずは参照先のコンテンツを作成します．今回の例では以下の画像のようなリスト形式の「ブログ作成者」というAPIを作成しました．</p><img src="/images/20200512/photo_20200512_12.png" style="border:solid 1px #000000"><p>「ブログ作成者」に以下のようなコンテンツを作成します．この未来太郎さんの各種情報ををブログ記事のコンテンツ側から取得したいと思います．<br><img src="/images/20200512/photo_20200512_13.png" style="border:solid 1px #000000"><br>参照される側のコンテンツ作成はこれで完了です．</p><h2 id="コンテンツ参照の設定"><a href="#コンテンツ参照の設定" class="headerlink" title="コンテンツ参照の設定"></a>コンテンツ参照の設定</h2><p>次にブログ記事のコンテンツ側から先ほどの「ブログ作成者」を参照できるように設定します．<br>writerの種類を<strong>テキストフィールド</strong>から<strong>コンテンツ参照</strong>に変更します．<br><img src="/images/20200512/photo_20200512_14.png" style="border:solid 1px #000000"></p><p>参照したいコンテンツには先ほどのブログ作成者を選択します．<br><img src="/images/20200512/photo_20200512_15.png"></p><p>「writer」の種類をコンテンツ参照に変更したら，コンテンツ管理から「作成者」を選択しましょう．<br>先ほど作成した未来太郎さんが選択できるはずです！<br><img src="/images/20200512/photo_20200512_16.png" style="border:solid 1px #000000"></p><p>「作成者」の選択が済んだらコンテンツを公開し，先ほどのように「APIプレビュー」からAPIリクエストをしてレスポンスの確認をしましょう！「writer」には指定した「ブログ作成者」が対応しています！<br><img src="/images/20200512/photo_20200512_17.png" style="border:solid 1px #000000"></p><h1 id="リスト形式の要素を持たせる"><a href="#リスト形式の要素を持たせる" class="headerlink" title="リスト形式の要素を持たせる"></a>リスト形式の要素を持たせる</h1><p>リスト形式で要素を与えようとした際に，どのAPIを利用して実現できるか分からず少しハマりました．<br>例えばAWS lambdaについてのブログ記事を作成したとして，</p><ul><li>AWS</li><li>lambda</li><li>golang</li><li>etc…</li></ul><p>のように複数のタグを付与させたいことがあると思います．</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"tags":["AWS","lambda","golang"]</span><br></pre></td></tr></table></figure><p>上記のようにタグをリスト形式で作成できればいいですが，現在microCMSではコンテンツに直接リストを与えることができません．<br>そこで，1つのkeyにリスト形式の要素を与えるには<strong>複数コンテンツ参照</strong>を使用します．<br>それでは実際に試してみます！</p><h2 id="参照先コンテンツの作成-1"><a href="#参照先コンテンツの作成-1" class="headerlink" title="参照先コンテンツの作成"></a>参照先コンテンツの作成</h2><p>まずはタグ一覧を管理するリスト形式の「タグ」コンテンツを作成します．作成方法は今までのコンテンツと同様です．<br><img src="/images/20200512/photo_20200512_18.png" style="border:solid 1px #000000"></p><h2 id="コンテンツ参照の設定-1"><a href="#コンテンツ参照の設定-1" class="headerlink" title="コンテンツ参照の設定"></a>コンテンツ参照の設定</h2><p>「ブログ記事」のAPIスキーマに「tag」フィールドを追加します．種類には<strong>複数コンテンツ参照</strong> -&gt; <strong>タグ</strong>を選択します．<br><img src="/images/20200512/photo_20200512_19.png" style="border:solid 1px #000000"></p><p>次にコンテンツ管理で「タグ」を付与させましょう．今までと異なり複数選択できるようになっていると思います．<br><img src="/images/20200512/photo_20200512_20.png" style="border:solid 1px #000000"></p><p>これで準備はできました！<br>実際にAPIプレビューを試してみると，リスト形式で複数タグを持っていることが分かります．<br><img src="/images/20200512/photo_20200512_21.png" style="border:solid 1px #000000"><br>これでリスト形式で複数の要素を与えることができました．</p><h1 id="Vue-jsで画面にデータを表示してみる"><a href="#Vue-jsで画面にデータを表示してみる" class="headerlink" title="Vue.jsで画面にデータを表示してみる"></a>Vue.jsで画面にデータを表示してみる</h1><p>最後は簡単にVue.jsでmicroCMSのコンテンツを画面に表示してみます．<br>今回はaxiosを利用してAPIリクエストを行います．以下のようなVue.jsコードを作成しました．</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;contents.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">      記事作成者: &#123;&#123;contents.writer.name&#125;&#125;</span><br><span class="line">      日付: &#123;&#123;contents.date&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"contents.body"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      contents: <span class="literal">null</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="keyword">async</span> created() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(<span class="string">'https://future-blog-sample.microcms.io/api/v1/blog/l5cn1orii'</span>, &#123;</span></span><br><span class="line">        headers: &#123;</span><br><span class="line"><span class="javascript">          <span class="string">'X-API-KEY'</span>: <span class="string">'YOUR_API_KEY'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.contents = res.data;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">catch</span> (err) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(err);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ブラウザで確認してみると無事表示されました！リッチエディタで作成したhtml形式の本文もちゃんと機能しています．<br>これでフロントエンドとmicroCMSの疎通ができたのでAPIで取得したコンテンツを利用して様々なページを作成することが出来るようになりました．</p><img src="/images/20200512/photo_20200512_22.png" style="border:solid 1px #000000"><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は初めてのCMS利用でmicroCMSを触ってみた！ということで本記事を書かせていただきました．<br>microCMSはすべて日本語で書かれており，チュートリアルやブログ記事も豊富にあるのですごく始めやすかったです．特にUIがシンプルで分かりやすくて素晴らしいと思いました．APIプレビューで即座に作成したコンテンツの確認ができることなど特徴的だったかと思います．<br>実際にプロジェクトでmicroCMSを利用している社員の方曰く，サポートはかなり手厚く，チャットのレスポンスもすぐ帰ってくるようです．日本語でやり取りでき，ドキュメントやUIも日本語なので，それだけでもプラスポイントではないでしょうか．</p><p>しかし，比較的新しく出てきたサービスのため，細かな機能不足があるように感じました．例えばバリデーション機能，編集履歴の表示などは現在開発中とのことです．<br><img src="/images/20200512/photo_20200512_23.png"></p><p>ですが，開発スピードがすごく早いため今後どんどん使いやすくなっていくと思います．機能更新の様子は<a href="https://microcms.io/blog/" target="_blank" rel="noopener">公式のブログ</a>で見ることができます．ですので今後も注目していきたいサービスの１つだと思います．</p><p>ありがとうございました！</p><h1 id="参考記事"><a href="#参考記事" class="headerlink" title="参考記事"></a>参考記事</h1><p><a href="https://qiita.com/to4-yanagi/items/4e431b99b78401ef65ca" target="_blank" rel="noopener">https://qiita.com/to4-yanagi/items/4e431b99b78401ef65ca</a><br><a href="https://webkikaku.co.jp/homepage/blog/hpseisaku/htmlcss/headless-cms/" target="_blank" rel="noopener">https://webkikaku.co.jp/homepage/blog/hpseisaku/htmlcss/headless-cms/</a><br><a href="https://microcms.io/blog/lets-relation/" target="_blank" rel="noopener">https://microcms.io/blog/lets-relation/</a></p><hr><p>関連記事: </p><ul><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして！TIG DXチーム　アルバイターの三村です．&lt;/p&gt;
&lt;p&gt;普段は大学院生をしておりフューチャーには &lt;a h
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
      <category term="HeadlessCMS" scheme="https://future-architect.github.io/tags/HeadlessCMS/"/>
    
  </entry>
  
  <entry>
    <title>PJでUIデザインにAtomic Designを導入したらどうだったのか</title>
    <link href="https://future-architect.github.io/articles/20200511/"/>
    <id>https://future-architect.github.io/articles/20200511/</id>
    <published>2020-05-10T23:43:07.000Z</published>
    <updated>2020-05-12T00:54:35.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今回はUIと少しUXのお話です"><a href="#今回はUIと少しUXのお話です" class="headerlink" title="今回はUIと少しUXのお話です"></a>今回はUIと少しUXのお話です</h1><p>こんにちは。フューチャーでUXの専門家をさせていただいている平川といいます。</p><p>フューチャー技術ブログでは、<a href="/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a> の記事を書いた久保さんと同じチームに所属しています。</p><p>PJでは<strong>最高の顧客業務</strong>を目標に、業務、UX、UIの設計と、アプリ開発をさせていただいています。<br>今回はPJの現場でUXとUIのデザインを通して、Atomic Designの導入はどのような結果を生んだのか、Atomic Design導入に際しての課題や取り組み方のコツなんかをお伝えできればと思います。</p><h2 id="Atomic-Design"><a href="#Atomic-Design" class="headerlink" title="Atomic Design"></a>Atomic Design</h2><p>Atomic Designは、Webページやアプリケーションを作成する際に、UIの最小要素（原子）からの組み合わせで構築していく考え方です。Atomic Designの提唱者はHTMLタグを元素周期表に見立ててそれを原子と表現しており、とてもおもしろいです。</p><p>詳しくは<a href="https://atomicdesign.bradfrost.com/" target="_blank" rel="noopener">Atomic Design本家</a>やGoogle先生が優しく教えてくれます。</p><p>それでは早速Atomic Designを導入したPJの話にうつりたいと思います。</p><h1 id="Atomic-Designは何を期待して導入したのか"><a href="#Atomic-Designは何を期待して導入したのか" class="headerlink" title="Atomic Designは何を期待して導入したのか"></a>Atomic Designは何を期待して導入したのか</h1><p>2016年に参加したチームでシステム構築のPJが立ち上がりました。</p><p>そのPJでAtomic Designは導入されたのですが、PJでは最初からAtomic Designを導入したわけではありませんでした。デザインツールさえ導入せずPowerPointでデザインをしていた開始当初から、PJは以下のように活動を進化させていきました。</p><ol><li>PJメンバー全員が使えるPowerPointで画面デザインをする</li><li>InVisionを導入しデザインコスト低下と効率を向上</li><li>Figmaに乗り換え</li><li>Figmaのcomponent機能の強力さに気づき<strong>Atomic Designを導入</strong></li><li>UIデザインポリシーのレベルアップ</li><li>社内標準に向けてFigma componentの汎化とUIデザインポリシーの汎化</li></ol><p>現在はより広く社内全体のUX改善の取り組みをすべく日々コツコツと仕事や勉強をしています。</p><h2 id="統一できないUX、UIという課題"><a href="#統一できないUX、UIという課題" class="headerlink" title="統一できないUX、UIという課題"></a>統一できないUX、UIという課題</h2><p>システム構築では多くの画面を多くのメンバーで設計し、実装していきます。</p><p>2016年から現在に至るまで、複数回、アプリケーションをアップデートしてきました。2016年の設計当初から、UIやデザインの統一性に対してなかなか満足のいく結果が残せていませんでした。</p><ul><li>UIデザインに統一性がなくユーザー負荷が増える<ul><li>レイアウトの仕方が画面によって異なる</li><li>利用するアイコンが異なったりサイズが画面毎に違う</li><li>文字色が統一できていない</li><li>同じ要素の選択があっちではラジオボタン、こっちではドロップダウン</li><li>etc…</li></ul></li><li>無秩序なUIデザインに起因するソースコードの肥大化<ul><li>不要なコンポーネント作成</li><li>Sassの変数を使わずに色やサイズを直指定</li></ul></li></ul><p>特にUIデザインの統一性の問題は大小挙げていけば暇がないくらいです。</p><p>その時に出会ったのがAtomic Designという方法論でした。</p><h2 id="Atomic-Designを知り、導入する"><a href="#Atomic-Designを知り、導入する" class="headerlink" title="Atomic Designを知り、導入する"></a>Atomic Designを知り、導入する</h2><p>Atomic Designという言葉を知り、調べ始めました。</p><p>実際に使ってみないとわかんないなぁと思い、とりあえず既存の手頃な画面を題材に方法論を適用・検証しました。検証を進めていく過程で、改めてUIの構造を分解し、再構築するのが簡単だったなぁという印象を覚えています。生体、分子、原子と分解していき、最小粒度のUI（原子）に対し、より理解を深め、そのUIが利用される理由を考える。そして、原子を選択しなおし、分子、生体を再構築してその結果をアプリケーションという形で表現しなおす。これにより原子という単位でUXは整理され、その組み合わせで構成されるUIのUXも整理され統一されるのではないか、という期待感を抱いたのです。</p><p>私は自分自身がデザインをする場合は、UIの分解と再構築は頭の中の作業としてやっていましたが、PJにてアプリケーションの画面設計をPJメンバーに行ってもらう前提だと、Atomic Designの原子、分子等の整理方法は非常に有用だと考えました。今まで自分の中でなんとなくやっていたUIの選択や構築を、PJメンバーにも的確にやってもらえるのではないかと。そして、自分の中で無秩序に転がっていたUIが整理整頓できるのではないかと。また、FigmaのComponentという機能がこのAtomic DesignによるUIデザインとUIの統一を後押しできると考え、Atomic Designを導入しました。</p><h1 id="導入してみてどうだったか"><a href="#導入してみてどうだったか" class="headerlink" title="導入してみてどうだったか"></a>導入してみてどうだったか</h1><h2 id="UIデザインの削減"><a href="#UIデザインの削減" class="headerlink" title="UIデザインの削減"></a>UIデザインの削減</h2><p>私が参加していたPJでの比較になりますが、UIデザインの無駄が削減できました。実際に作成したUIコンポーネントの数も少なくなっていると感じています。また、従来は機能と見た目という単位でコンポーネントを作成していましたが、<strong>ユーザーへ提供するUIの利用用途とユーザーが抱くデータへの印象という単位</strong>でコンポーネントを作成するようになりました。</p><p>例えば「選択する」というUIは複数存在しますが、ユーザーが対象データに対しどのような印象を持っているか、どういう選択なのかで、適用するUIが異なります。私は、原子はプリミティブなデータの利用方法の提供という印象を持っています。そして、分子は原子を組み合わせることで、より高度なデータの利用方法を提供できると考えています。そのため、UIを分解することで分子、原子という粒度になったときに自ずと適合するUIが選択され、無駄なUIコンポーネントの作成抑止につながったと考えています。</p><p>UIコンポーネントは減れば減るほど良いというものでもありませんが、小さいUXのバリエーションを減らすことによってユーザーに対してアプリケーションの利用負荷を下げる効果はあると思います。</p><img src="/images/20200511/photo_20200511_01.png"><h2 id="UIの体系的な管理"><a href="#UIの体系的な管理" class="headerlink" title="UIの体系的な管理"></a>UIの体系的な管理</h2><p>今まではUIコンポーネントという名前で一括管理していたコンポーネントに対して、原子、分子、生体という単位を与えることになりました。それにより、原子、分子は再利用性が非常に高く、ソースコードの無駄も少なくなります。</p><p>UIの機能性ではなく利用方法という単位がコンポーネント化されていることもあり、煩雑になりがちなCSSもスッキリしていくと思います。アプリケーションが成長するにつれ、言語仕様的にオブジェクト指向で管理できないCSSはどんどんメンテナンスコストが上がっていきますが、BEMとAtomic Designを組み合わせることでかなりメンテナンスコストを低減可能になりました。個人的にはCSSのメンテコスト削減が一番コストメリットを感じています。</p><img src="/images/20200511/photo_20200511_02.png"><h2 id="原子多すぎ問題の発生"><a href="#原子多すぎ問題の発生" class="headerlink" title="原子多すぎ問題の発生"></a>原子多すぎ問題の発生</h2><p>背景色の違うパネルや、表示するラベルテキストの色とフォントサイズのバリエーションでFigma componentを作っていました。これはやりすぎなので反省点です。Figmaではスタイルルールも作れるので、過度なComponent作成は辛いという学びになりました。それに、Componentを増やすとFigmaのページロード時間も長くなりますし、適度な管理が一番です。</p><h2 id="アプリケーション全体のユーザーシナリオデザインにはAtomic-Designは利用しない"><a href="#アプリケーション全体のユーザーシナリオデザインにはAtomic-Designは利用しない" class="headerlink" title="アプリケーション全体のユーザーシナリオデザインにはAtomic Designは利用しない"></a>アプリケーション全体のユーザーシナリオデザインにはAtomic Designは利用しない</h2><p>Atomic DesignはあくまでUX・UIの分解と再構築、そしてUIの体系的な管理を目的として利用しました。そのため、アプリケーションを利用するユーザーシナリオに寄与するものとしては利用していません。私はAtomic DesignはUIの静的な設計手法であると思います。UMLでは動的な設計方法としてアクティビティ図やシーケンス図等を用い、静的な設計方法としてクラス図等を用いますが、Atomic Designは静的な設計方法に該当するんじゃないかなぁという印象です。</p><h1 id="PJでAtomic-Designを導入するときのコツ"><a href="#PJでAtomic-Designを導入するときのコツ" class="headerlink" title="PJでAtomic Designを導入するときのコツ"></a>PJでAtomic Designを導入するときのコツ</h1><p>コツというよりも課題に対するケーススタディのようなものですがまとめてみました。</p><h2 id="生体、もしくはテンプレートくらいの大きさから作り始める"><a href="#生体、もしくはテンプレートくらいの大きさから作り始める" class="headerlink" title="生体、もしくはテンプレートくらいの大きさから作り始める"></a>生体、もしくはテンプレートくらいの大きさから作り始める</h2><p>作りたいUIをざっくり自由に表現してみることから始めます。そこから、構成要素として必要な生体、分子・原子を選択します。そうすると、Figma等のデザインツール上にすでに存在する同一目的のUIを選択できるようになります。該当するUIが存在しなければ原子、分子、生体を足していきます。至って普通の進め方なのですが、Atomic Designは最小粒度が原子であるため、原子を作るところから始めるケースもあるかもしれません。</p><p>しかし、いきなり原子から作りだすのは経験上、効率が悪いという印象です。</p><h2 id="UIで取り扱うデータの印象と原子の特徴を捉える"><a href="#UIで取り扱うデータの印象と原子の特徴を捉える" class="headerlink" title="UIで取り扱うデータの印象と原子の特徴を捉える"></a>UIで取り扱うデータの印象と原子の特徴を捉える</h2><p>ユーザーにUXを与える最小粒度のUIは原子として表現されています。一方、ユーザーがデータに持つ印象を捉えることでどのように操作したいのかがわかります。<br>この2つを結びつける際に、生体の粒度で生み出せるデータの結果が一致していてもUIが適しているかは別の話です。例えば、行列データに対しユーザーは一括操作したいのか、反復操作したいのか。反復操作であれば、列単位操作なのか、行単位操作なのか、いった具合です。</p><p>ユーザーは行列操作を億劫に感じている場合、それはなぜなのか。操作数が多いためなのか、操作のスピードを出せないでいるのか。データへの印象に適合するUIを原子の単位でマッチさせていくことが重要と考えています。</p><h2 id="原子か分子か生体なのかは大雑把に決める"><a href="#原子か分子か生体なのかは大雑把に決める" class="headerlink" title="原子か分子か生体なのかは大雑把に決める"></a>原子か分子か生体なのかは大雑把に決める</h2><p>Atomic Designを導入された方は直面したことがあると思います。私自身も、原子 or 分子、分子 or 生体を悩むこともありました。<br>しかし、あまり悩まなくて大丈夫だという回答に至りました。<br>例えば分子と決めていたUIが更に分解され、分解されたUIが2つ以上の分子で共通利用されるというケースに直面し、その都度原子に移動させたり、分子に移動させれば大丈夫だったからです。</p><h2 id="Component（原子、分子）の管理者を立てる"><a href="#Component（原子、分子）の管理者を立てる" class="headerlink" title="Component（原子、分子）の管理者を立てる"></a>Component（原子、分子）の管理者を立てる</h2><p>これはアプリケーション全体ではみ出しUI・UXを定義しないようにするためのルールです。新たに原子・分子が必要と判断する前に適切な原子・分子がすでに存在しないかを検討するためでもあります。</p><p>そしてこの原子・分子はFigma上でComponentとして管理しているため、物理的にComponent内部への変更を阻止することが可能です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Atomic DesignはUIの体系的な管理に非常に効果がある</li><li>Atomic DesignはFigma利用を前提としたほうが良い</li><li>UIのデザインは生体やテンプレートの単位から作成しはじめる</li><li>ユーザーのデータへの印象と原子の特徴を捉える</li><li>大雑把に原子、分子、生体を管理するよう心がける</li><li>原子、分子の管理者を立てよう</li></ul><p>Atomic DesignはUXとUIの体系的な管理で一定の成果を上げることができました。</p><p>Atomic Designをこれからも使い続けると思います。</p><p>しかし、Atomic Designだけを導入しておけばうまくいく、ということはありません。</p><p>そして、自分自身のデザインスキルを高めていくためにも、デザインが得意な人は随時募集させていただいています。一緒に切磋琢磨できる仲間が一人でも多くなることを期待しています。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;今回はUIと少しUXのお話です&quot;&gt;&lt;a href=&quot;#今回はUIと少しUXのお話です&quot; class=&quot;headerlink&quot; title=&quot;今回はUIと少しUXのお話です&quot;&gt;&lt;/a&gt;今回はUIと少しUXのお話です&lt;/h1&gt;&lt;p&gt;こんにちは。フューチャーでUXの専門
      
    
    </summary>
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="UI/UX" scheme="https://future-architect.github.io/tags/UI-UX/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Figma" scheme="https://future-architect.github.io/tags/Figma/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
      <category term="AtomicDesign" scheme="https://future-architect.github.io/tags/AtomicDesign/"/>
    
  </entry>
  
  <entry>
    <title>TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話</title>
    <link href="https://future-architect.github.io/articles/20200501/"/>
    <id>https://future-architect.github.io/articles/20200501/</id>
    <published>2020-05-01T01:19:34.000Z</published>
    <updated>2020-05-01T01:27:56.614Z</updated>
    
    <content type="html"><![CDATA[<p>フロントエンド記事集中投稿ウィークの3本目です。</p><ul><li><a href="https://future-architect.github.io/articles/20200428/">Vue.jsのslotの機能を初心者にわかるように解説してみた</a></li><li><a href="https://future-architect.github.io/articles/20200429/">Reduxを分かりやすく解説してみた</a></li></ul><p>前日の丸野さんがReduxの基本的な記事でした。Reduxはコンパクトなライブラリながらよく考えられた仕組みです。Jetpack ComposeやらFlutterやら、ReactインスパイアなGUIフレームワークも増えているので、JavaScript（TypeScriptではなく） + Reduxをやってみるのは、ウェブに限らず、今後のユーザーインタフェース関連のコードを触るための理解力向上には良いと思います。本エントリーは、実際にプロダクションコードでたくさんRedux周りにもreducerなどを実装しなくてはいけなくなったときの次のステップとして、Redux Toolkitの紹介をします。</p><p>たいてい、Reduxは導入コストが大きく、コードを複雑にしてしまうため「ある程度大きくなってから」「小さいうちは入れる必要ない」みたいに言われます。僕もそう思っていて、丸野さんが参加されているプロジェクトの最初では、最初は素のReactで、1-2ヶ月してみんなが慣れてきたらReduxを入れるという2段階で導入したりもしました。</p><p>なぜ難しいかと言われているかというと、Fluxアーキテクチャのサイクルが1周できるまでの準備時間がかかるので、どうしても最初に実装し始めてReactと繋がって動くまでは「これでいいのか？」と疑問に思いながら進まなければならないから、というのがあるのかなと思っています。なおかつ、TypeScriptで型チェックが効くようにRedux周りを実装しようとすると、その作業がさらに倍になるという・・・</p><p>しかし、最近触ってみたところ、公式の出している<a href="https://redux-toolkit.js.org/" target="_blank" rel="noopener">Redux Toolkit</a>というヘルパーライブラリがTypeScriptとの相性がよくて、「コーディングを前に進めてくれる感」が強く、手間も小さいので、もう最初からいれてしまってもいいかなぁという気持ちにすごくなっています。</p><p>かるーく触った状態なので、本格的なアプリを作ってまた何か考えることがあったら更新するかもしれません。</p><p>三行まとめ</p><ol><li>Redux ToolkitはファイルがバラバラになりがちだったReduxのコードを短くコンパクトにまとめてくれるしTypeScriptとの相性が良い</li><li>導入の手間暇が少ないので、後から追加するコストを考えると最初からいれてもいいレベル</li><li>とはいえ、既存のRedux Thunkとかと混ぜるのは大変なので、既存のコードにちょっとずつ導入は難しいかも</li></ol><h1 id="Redux-Toolkit"><a href="#Redux-Toolkit" class="headerlink" title="Redux Toolkit"></a>Redux Toolkit</h1><p>Reduxは、いくつもの部品を実装する必要がありました。まずはReducer。入力と出力にstate、中に巨大なswitch文と値を書き換えるロジックを持ちます。Reducerに食わせるためにAction Creatorというのが必要でした。さらに非同期な処理をするにはRedux Thunkとかが必要で、さらにcombineReducerで複数のReducerを一つにまとめ・・・みたいな。Redux周りでもフォルダ構造を事前に定義して、拡張性を考えて何個もファイルをフォルダに分散しておいたり・・・みたいな感じですよね？</p><p>また、TypeScriptのシェアが伸びる時期のもので型情報は一応つけられるものの、型情報をつけるための型、みたいな動くものを作るのとはちょっと違う手間暇がかかっていました。特にFluxは処理の流れが循環するというアーキテクチャなので、reducerを定義するにはアクションのキーを定義したいし、引数のactionは他のすべてのアクションの和集合として型定義したい、で非同期アクションを定義するにはstateも扱うからreducer周りの型定義を利用したい、あれ？参照が循環するぞ、またこの定義は別ファイルに書かないと、みたいなTypeScriptで使うための苦労がやたらと多い。</p><p>Redux Toolkitでは<code>createSlice()</code>という関数が提供されており、これを使うと、初期値とaction creatorとreducerが一発で作られます。巨大なswitch文を書く必要がなく、小さい処理単位で関数を定義すると、裏でswitch文相当を作ってくれます。Win32 APIとMFCみたいな感じです。</p><h1 id="Redux-TypeScriptの何が辛かったのか"><a href="#Redux-TypeScriptの何が辛かったのか" class="headerlink" title="Redux + TypeScriptの何が辛かったのか"></a>Redux + TypeScriptの何が辛かったのか</h1><p>ここのサンプルコード書いたんですが自分でも読むの疲れるわぁ、という分量になったので、<a href="http://blockdiag.com/ja/blockdiag/demo.html" target="_blank" rel="noopener">blockdiag</a>で作った図だけにしました。コードはこのエントリーの末尾にまとめています。興味のある人だけどうぞ。本当は消したいぐらいなのだけど、まぁエビデンスというやつです。</p><p>フロントエンド開発ではTypeScriptが流行っていますが、これとReduxの相性、必ずしもよくないなぁと思っていました。TypeScriptの型システムはだいぶ発展したので、Reactは相当書きやすくなっています。JavaScriptとあまり変わらない記述量できちんと推論がきいてエラーを報告してくれて、コーディングはかなり楽です。一方、ReduxのFluxという考え方が循環を持っているため、型システムで記述しようとすると結構しんどかったです。</p><h2 id="JavaScriptだけでReduxアプリを作った場合"><a href="#JavaScriptだけでReduxアプリを作った場合" class="headerlink" title="JavaScriptだけでReduxアプリを作った場合"></a>JavaScriptだけでReduxアプリを作った場合</h2><p>Reduxを使ったアプリケーションの心臓部のReducerとstoreです。巨大なswitch文があり、その中でアクションに処理に応じてステートを更新します。大きくなると、combineReducerでこのreducerをまとめることができます。ページごととかにreducerを分割して作ることができます。</p><p>これ以外に、たいていActionを作るためのAction Creatorと呼ばれる関数をよく作ります。アクションには、アクションを識別するアクションタイプの定数があります。</p><p>依存関係を図示するとこんな感じでしょう。</p><img src="/images/20200501/1.png"><p>これは処理の呼び出しの依存ですが、やっかいなのはaction creatorを実装するときのデータはreducerに流れる（reduxがやってくれる）ので、実装するときの脳みそとしてはこちらの依存も解決する必要がありますが、あくまでもコードの依存だけ取り上げています。</p><p>非同期の処理のためにRedux Thunkを使う場合は依存が追加で発生します。</p><img src="/images/20200501/2.png"><h2 id="TypeScriptを使おうとした場合"><a href="#TypeScriptを使おうとした場合" class="headerlink" title="TypeScriptを使おうとした場合"></a>TypeScriptを使おうとした場合</h2><p>TypeScriptだとactionやstateの型定義を行い、コードの中で矛盾がないか確認したいですよね？いくつか型定義を追加する必要がでてきます。入りきらないので折り返しました。blockdiagのfolded初めて使って見ました。</p><img src="/images/20200501/3.png"><p>JavaScriptは呼び出しで必要な依存しかなかったものの、Reduxが隠蔽してくれていたデータのやり取りも型情報の依存という形で間接的に繋がってしまうのですよね（action型定義）。</p><p>Redux thunkで非同期を扱うとこんな感じに。</p><img src="/images/20200501/4.png"><p>ここまでくれば、型が揃うので、reducerの中でも型チェックがききますし、action cratorの中の属性名の間違いもわかりますが・・・得られるメリットに対してコストがかかりすぎているなぁ、と思っていました。</p><p>関数で純粋だぜっていっても、型システムの都合上、依存関係が循環しそうになると、ファイル分割とかに頭を使う必要が出てきます。TypeScriptのファイルの行数もすごく増えてしまう。Redux以下を1ファイルに全部まとめちゃえば解決するといえばするのですが、そもそも大規模アプリに導入するのが前提のRedux。1000行とか2000行のファイルのメンテなんてしたくないですよね？しかも、１つのアクションを修正するのに、ファイルの上の方やら下の方やら同時に直す必要がある。</p><h2 id="Redux-Toolkit-TypeScriptの場合"><a href="#Redux-Toolkit-TypeScriptの場合" class="headerlink" title="Redux Toolkit + TypeScriptの場合"></a>Redux Toolkit + TypeScriptの場合</h2><p>Redux Toolkitは、この分散したものを集めます。APIがいろいろあるのですが、<a href="https://redux-toolkit.js.org/usage/usage-with-typescript#createslice" target="_blank" rel="noopener">createSlice</a>という便利なやつがあります。</p><p>sliceというのは、状態とそれを変更するアクションをまとめたものです。どこかで見たことがあるやつですね？そうです。オブジェクト指向です。状態とメソッドの塊をつくってくれるのです。しかも、State以外、型定義らしい型定義もありません。きちんと推論でぜんぶまるっとやってくれるのです。</p><img src="/images/20200501/5.png"><p>action種別の文字列定数、actionの型定義みたいな、本質的じゃない中間生成物を一切作らなくてもいいので、まとめてもトータルの行数はかなり短くなります。actionの引数のPayloadの型定義なんかも、createSliceの呼び出しの中でインラインで書いちゃうことができます。</p><p>storeを作る側も<a href="https://redux-toolkit.js.org/usage/usage-with-typescript#using-configurestore-with-typescript" target="_blank" rel="noopener">configureStore</a>という関数がありますが、これを使うと、combineReducerも不要です。</p><p>オブジェクト指向的といっても書く処理のreducerは副作用を外に持つ実装になっています。Erlang的なオブジェクト指向(プロセス間通信のモデルではなくて、mapsとかdictとかのAPIの方)です。スのReduxが辛くて、オブジェクト指向的なRedux Toolkitが使いやすいといっても、別にどちらが優れているとか優れていないとかはないので。型情報の伝搬という、推論ができるようになったからこそ登場するコードの設計の新しい概念がでてきて、それを元に組み上げられたのでRedux Toolkitは使いやすい、と理解しています。</p><h1 id="Redux-Toolkitでsliceを作る"><a href="#Redux-Toolkitでsliceを作る" class="headerlink" title="Redux Toolkitでsliceを作る"></a>Redux Toolkitでsliceを作る</h1><p>さて、これまでコードを出さずに概念図だけで説明してきましたが、コードはこんな感じです。slice関連は1ファイルにまとめてしまいます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice, configureStore, PayloadAction &#125; <span class="keyword">from</span> <span class="string">'@reduxjs/toolkit'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stateの型定義</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> State = &#123;</span><br><span class="line">  count: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初期状態。インラインで書いても良いですが・・・・</span></span><br><span class="line"><span class="keyword">const</span> initialState: State = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createSliceでreducerとactionを同時に定義</span></span><br><span class="line"><span class="keyword">const</span> slice = createSlice(&#123;</span><br><span class="line">    name: <span class="string">'counter'</span>,</span><br><span class="line">    initialState,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        incrementCounter: <span class="function">(<span class="params">state, action: PayloadAction&lt;<span class="built_in">number</span>&gt;</span>) =&gt;</span> (&#123;</span><br><span class="line">          ...state,</span><br><span class="line">          count: state.count + action.payload,</span><br><span class="line">        &#125;),</span><br><span class="line">        decrementCounter: <span class="function">(<span class="params">state, action: PayloadAction&lt;<span class="built_in">number</span>&gt;</span>) =&gt;</span> (&#123;</span><br><span class="line">          ...state,</span><br><span class="line">          count: state.count - action.payload,</span><br><span class="line">        &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// action creatorもこんな風に取り出して公開できて、dispatchでReactから利用できる</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; incrementCounter, decrementCounter &#125; = slice.actions;</span><br><span class="line"></span><br><span class="line"><span class="comment">// storeを作るヘルパー複数のreducerをまとめる機能もあり</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = configureStore(&#123;</span><br><span class="line">  reducer: slice.reducer,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>configureStoreのreducerにオブジェクトを渡すと、複数のreducerを結合できます。combineReducer相当も内蔵。1ファイルに全部まとめることができます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = configureStore(&#123;</span><br><span class="line">  counter: countSlice.reducer,</span><br><span class="line">  primeNumber: primeNumberSlice.reducer,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1つしか状態が発生しないのであれば、slice定義とconfigureStoreは1つにまとめてしまい、複数sliceが登場するのであれば、sliceごとにファイルを作り、configureStoreを呼ぶルートとなるスクリプトファイルを1つ作る、ぐらいのファイル分割でうまくいきそうです。Redux以外に他の場所でも使いたい型定義とか、slice間で共有したい型定義があればStateの中から取り出して単独のtypes.tsみたいなファイルにまとめるぐらいかな。</p><h2 id="Reduxを使う側も型を生かす"><a href="#Reduxを使う側も型を生かす" class="headerlink" title="Reduxを使う側も型を生かす"></a>Reduxを使う側も型を生かす</h2><p>Redux Tooolkitの機能ではないのではなく、react-redux側の機能ですが、Reduxを使う側も型が活かせます。このインプットにはRedux Toolkitを使って作ったStoreから、Stateの型を取り出すことで簡単にセットアップが可能です。これでカスタム版の<code>useSelector</code>を作ります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector <span class="keyword">as</span> rawUseSelector, TypedUseSelectorHook &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line">：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 複数のreducerをまとめた場合に、最終的なStateの型を取り出す</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> RootState = ReturnType&lt;<span class="keyword">typeof</span> store.getState&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 型情報付きのuseSelectorをここで宣言</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useSelector: TypedUseSelectorHook&lt;RootState&gt; = rawUseSelector</span><br></pre></td></tr></table></figure><p>Reactコード側では、react-reduxの<code>useSelector()</code>を直接使うのではなく、このストア定義の中で作ったuseSelectorを使うと型チェックがuseSelectorのコールバックの中でも効くようになります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">'./store.ts'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">CounterViewer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = useSelector(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: state.count,  <span class="comment">// ここでコード補完がきちんと効く</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hooksスタイルのAPIを使うだけで、connectを使った場合と比べてコードはかなり少なくなります。Reduxのためにだけに書かなきゃいけないコードが激減（mapStateToPropsみたいな）しますが、それにプラスして、このstore定義の中で作ったuseSelectorを使えばstateの情報をビューでアクセスするときにきちんと補完も効くので少ない手間でコードの開発効率があがります。</p><h1 id="非同期処理の書き方"><a href="#非同期処理の書き方" class="headerlink" title="非同期処理の書き方"></a>非同期処理の書き方</h1><p>Redux-thunkとかRedux-sagaとかありますが、この分野もRedux Toolkitにお任せしておけば大丈夫です。</p><p>Redux Thunkはasyncな関数の中で、サーバーアクセスなどをして、その結果を受け取ったら、通常のactionをdispatchを通じて実行する、というモデルでした。大抵アプリケーションから呼ばれる処理は非同期前提なのでthunkなアクションがアプリケーションとの接点になりますが、その結果を書き出すためにreducer/action creatorの両方に追加しないといけなかったので、記述量は少し多めでした。</p><p>ちなみに、Redux Sagaは辛かったのでもう記憶から抹消されました。</p><p>Redux Toolkitのasync thunkの場合は、sliceの外で<a href="https://redux-toolkit.js.org/usage/usage-with-typescript#createasyncthunk" target="_blank" rel="noopener">createAsyncThunk</a>で非同期なロジックを書きます。sliceとの結合は2種類あります。</p><p>1つ目は、async thunkの2つめの引数にはdispatchとかgetStateといったメソッドがあるので、これを使って以前のRedux Thunkのように、別のReducerを呼ぶ方法です。これでも、以前よりもシンプルになりやすいというか、async thunkから呼ばれるactionはexportしないで、ファイル内部のプライベートなactionとして記述できるため、コード全体の複雑さは以前よりも少なくなります。</p><p>2つ目は、asyncのレスポンスを直接扱う追加のアクションを定義する方法です。こちらの方を紹介します。まずは非同期処理を扱うロジックを書きます。ここはreturnTypeの推論が聞かなかった＆2箇所で利用しているため、外でtypeで定義して使っています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> fetchLastCounterReturnType = &#123;</span><br><span class="line">    count: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchLastCounter = createAsyncThunk&lt;fetchLastCounterReturnType&gt;(</span><br><span class="line">    <span class="string">'lastcount/fetch'</span>,</span><br><span class="line">    <span class="keyword">async</span> (arg, thunk): <span class="built_in">Promise</span>&lt;fetchLastCounterReturnType&gt; =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">'/api/lastcount'</span>, &#123;</span><br><span class="line">            credentials: <span class="string">'same-origin'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (res.ok) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">await</span> res.json()) <span class="keyword">as</span> fetchLastCounterReturnType;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fetch count error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>reducersとは別に、extraReducersという項目があって、そこで追加していきます。builderの最初に渡すアクションのキーは、createAsyncThunkが作ってくれる3種類あります。pendingが実行開始して、結果が帰ってくるまでの間、fulfilledが正常終了、rejectedがエラー時です。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> slice = createSlice(&#123;</span><br><span class="line">    name: <span class="string">'counter'</span>,</span><br><span class="line">    initialState,</span><br><span class="line">    reducers: &#123;...&#125;,</span><br><span class="line">    extraReducers: <span class="function">(<span class="params">builder</span>) =&gt;</span> &#123;</span><br><span class="line">        builder.addCase(fetchLastCounter.fulfilled, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                count: action.payload.count,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>非同期なコードはReduxからも独立したコードとして書けるので（上記の2つめの関数の中にはRedux関係の呼び出しが発生していない）、こちらの方が他の環境に持っていくとか、テストするのはしやすいかなと思います。</p><p>JS側のサンプルだと、extraReducersに次のように追加するコードがありますが、これだとコード補完がされないので、TypeScriptの場合はちょっとかっこ悪くてもbuilder経由で登録する必要があります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extraReducers: &#123;</span><br><span class="line">  [fetchLastCounter.fulfilled]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       ...state,</span><br><span class="line">       count: action.payload.count,</span><br><span class="line">     &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="既存のコードと混ぜるのは要注意"><a href="#既存のコードと混ぜるのは要注意" class="headerlink" title="既存のコードと混ぜるのは要注意"></a>既存のコードと混ぜるのは要注意</h1><p>slice単位で入れ替えとかもできるかしれませんが、既存のRedux Thunkを使って作った非同期なアクションをそのまま再利用しようとしたんですが、うまく型定義に混ぜる方法がわかっていません（dispatchに渡す型あたり）。型アサーションとかでコンパイラを黙らせればいけるんでしょうけど。</p><p>型推論パワーを役立てようと思ったら、少しずつ入れ替えではなくて、ごそっと入れ替えが必要な気がしています。このあたりはちょびっと試してやめてしまったので、他に挑戦した人がいたらアドバイスください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>TypeScriptのパワーを損なうことなく、短い行数でReduxが実現でき、記憶力もあまり使わなくていい、ディスプレイも小さくて済むという、今まで求めてきたものがようやく手に入りました。</p><p>2年半ほど前に大規模ウェブアプリを作ったときはJavaScript + React + Reduxでした。その後はAngularだったり、小さいものをvueやらReactでflux使わずに実装したりして、久々に再びReactをすることになったので、TypeScriptとの相性よくなったかなぁ、とググって見たら本家のRedux Toolkitが引っかかりました。本家のドキュメントも、十分に情報がありますが、createSliceとconfigureStoreのあたりから読んで、次にthunk周りを読んだ程度ですが、十分にパフォーマンスが発揮できました。</p><p>ReactもHooksが出てきて、Reduxもそれを使うように更新された一方、<a href="https://github.com/jamiebuilds/unstated" target="_blank" rel="noopener">unstated</a>のような新しいライブラリもでてきています。これもGitHubスター数も多いんですが、チームで使うには規約とかがある程度決まっている方が導入はしやすい（unstatedはどうもいろいろ自分で決める必要がありそう）です。Reduxに対する不満もだいぶなくなったので、まだまだReduxを使っていこうと思いました。</p><p>最近、僕が意識しているのはリーダブルなコードです。これはオライリーの本のReadableではなくて、コードが人を導いてくれる（Leadable）という意味です。一方で、ReduxとTypeScriptで感じていたのは、処理系を通すためにコードを書かされているという感覚ですね。オーダブル(Orderable)と呼んでいるけど、もっといい名前があったら教えてください。Redux Toolkitはだいぶ余計なことに頭を使わなくて済むので、とても良いです。</p><p>今年度40歳になるアラフォーのおっさんの衰える記憶力では、1つの処理を書くのに、4つも5つもあるファイルをつぎつぎに切り替えて書かなければならなかったのは苦痛でした。職場とか客先とか自宅とか色々なところで仕事する上で、いつも最高のモニタがあるわけではありませんので全部のファイルを開いておくこともできませんでした。型定義ファイル分割パズルも大変でした。でも、これでまだまだ現役続行できそうです。MacBookPro 16じゃなくてAirでも十分に開発できるかな。出費が半額ですみますね。保育園が閉鎖されてしまって、子供の面倒を見ながらフロントエンドのコードを書かないといけないパパ、ママにも強い味方です。</p><p>Redux toolkitと生のReduxを使って見て思うのは、ライブラリの設計の難易度が3倍ぐらいになったなぁ、という感じですね。TypeScriptで型推論が入ったのはあるのですが、その型推論が効きやすい、ライブラリユーザーが実装しなきゃいけない型情報を減らすための設計というのが、この後の主戦場になりそうだなぁ、ということです。今まではデータを加工する、というロジックだけを設計すれば良かったのですが、データの伝搬だけじゃなくて、型情報の伝搬というのも考慮しなければならないと。ある意味、C++プログラマーのテンプレート経験が生きるのかも、なぁ、という。まだあまり言語化できないのですが。Haskellな人とか得意だったりするんですかね？</p><h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><p>Redux Toolkitを使わない依存関係のサンプルコードを書いていたんですが、かえってわかりにくいので末尾にまとめました。</p><p>以下のコードは、JavaScript版のReduxを使ったアプリケーションの心臓部のReducerとstoreです。巨大なswitch文があり、その中でアクションに処理に応じてステートを更新します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; INCREMENT_COUNTER, DECREMENT_COUNTER &#125; <span class="keyword">from</span> <span class="string">'./actiontypes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123;count: <span class="number">0</span>&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> INCREMENT_COUNTER;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        counter: state.counter + action.payload.count</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> DECREMENT_COUNTER;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        counter: state.counter - action.payload.count</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = createStore(reducer);</span><br></pre></td></tr></table></figure><p>アクションを識別する定数。一番シンプルなのは文字列定数を使う方法でしょう。これを便利にするヘルパー関数もありました。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT_COUNTER = <span class="string">"INCREMENT_COUNTER"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT_COUNTER = <span class="string">"DECREMENT_COUNTER"</span>;</span><br></pre></td></tr></table></figure><p>TypeScriptを導入すると、StateとActionの型定義が入り、それを使うようにaction creatorも書き換えます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> State = &#123;</span><br><span class="line">  counter: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">incrementCounter</span>(<span class="params">count: <span class="built_in">number</span></span>): <span class="title">IncrementCounterAction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: INCREMENT_COUNTER,</span><br><span class="line">    count</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">decrement</span>(<span class="params">count: <span class="built_in">number</span></span>): <span class="title">DecrementCounterAction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: DECREMENT_COUNTER,</span><br><span class="line">    count</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> IncrementCounterAction = &#123;</span><br><span class="line">  <span class="keyword">type</span>: INCREMENT_COUNTER,</span><br><span class="line">  count: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> DecrementCounterAction = &#123;</span><br><span class="line">  <span class="keyword">type</span>: DECREMENT_COUNTER,</span><br><span class="line">  count: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アクションの型が揃うと、ようやくreducerが作成できます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IncrementCounterAction, DecrementCounterAction &#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RootAction = IncrementCounterAction | DecrementCounterAction;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state: State, action: RootAction</span>) </span>&#123;</span><br><span class="line">    :</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>どのファイルからどの順番でコードを書けばよかったんですかね？何度かトライしているものの、いつもなんかいまいちに感じていました。</p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li><li><a href="https://future-architect.github.io/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;フロントエンド記事集中投稿ウィークの3本目です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200428/&quot;&gt;Vue.jsのslotの機能を初心者にわかるように解説してみた&lt;/a&gt;
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
      <category term="redux" scheme="https://future-architect.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>Reduxを分かりやすく解説してみた</title>
    <link href="https://future-architect.github.io/articles/20200429/"/>
    <id>https://future-architect.github.io/articles/20200429/</id>
    <published>2020-04-29T08:05:22.000Z</published>
    <updated>2020-05-01T01:22:07.220Z</updated>
    
    <content type="html"><![CDATA[<p>フロントエンド記事集中投稿ウィークの2本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、2019年4月入社の丸野です。<a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a> の記事を書いた柏木さんと同じチームに所属しています。</p><p>研修修了後PJにアサインされて約4ヶ月ほどReact.jsを使って開発を行ってきましたが、Reduxの理解にとても苦しみました。そこで今回はReduxの概要を噛み砕いて説明していきます。同じ悩みを持つ人の理解の助けになればと思います。<br>(Redux公式ドキュメントは<a href="https://redux.js.org/" target="_blank" rel="noopener">こちら</a>です。)</p><h1 id="開発で使用している技術要素"><a href="#開発で使用している技術要素" class="headerlink" title="開発で使用している技術要素"></a>開発で使用している技術要素</h1><ul><li>React.js（16.4.1）</li><li>Redux（3.7.2）</li></ul><h1 id="そもそもReduxって何か"><a href="#そもそもReduxって何か" class="headerlink" title="そもそもReduxって何か"></a>そもそもReduxって何か</h1><p>Reduxとは、React.jsで使用するstateつまりアプリケーションの状態を管理するフレームワークです<br>簡単にReduxの概念の下記に図式化してみました</p><img src="/images/20200429/1.png"><p><strong>State</strong>：アプリケーションの状態<br><strong>Action</strong>：ユーザーが何押したいかという情報を持つオブジェクト<br><strong>Reducer</strong>：Actionを元にStateを更新するメソッド<br><strong>Store</strong>：Stateの情報を保持している場所</p><h1 id="Reduxのデータフロー"><a href="#Reduxのデータフロー" class="headerlink" title="Reduxのデータフロー"></a>Reduxのデータフロー</h1><p>では上記で示した概略図をもとにReduxのデータフローをそれぞれ説明していきたいと思います</p><h2 id="①ActionCreatorsによってActionを生成する"><a href="#①ActionCreatorsによってActionを生成する" class="headerlink" title="①ActionCreatorsによってActionを生成する"></a>①ActionCreatorsによってActionを生成する</h2><ul><li>ユーザーのインプットによってComponent上からAction作成依頼が飛びActionCreatorでActionが作成されます</li></ul><img src="/images/20200429/2.png" class="img-small-size"><ul><li>今回はStateの更新を目的としたActionを想定いたします</li><li>作成されるActionは下記のようなもので、type項目で他のActionと区別しています</li></ul><figure class="highlight js"><figcaption><span>Action.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Action</span></span><br><span class="line">&#123;</span><br><span class="line">    type: <span class="string">"UpdateStateA"</span>,</span><br><span class="line">    testStateA</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ActionCreatorとはActionを作成するメソッドのことをいいます</li><li>上記のActionを作成するActionCreatorのサンプルコードは下記のようになります</li></ul><figure class="highlight js"><figcaption><span>ActionCreater.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Action Creator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunctionA</span>(<span class="params">testStateA</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//Action</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">            type: <span class="string">"UpdateStateA"</span>,</span><br><span class="line">            testStateA</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>コンポーネントで上記のActionをImportすることで、Action作成を依頼できます</li></ul><figure class="highlight js"><figcaption><span>Component.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; testFunctionA &#125; <span class="keyword">from</span> <span class="string">"testActionCreator"</span>;</span><br></pre></td></tr></table></figure><h2 id="②Actionをdispatchする"><a href="#②Actionをdispatchする" class="headerlink" title="②Actionをdispatchする"></a>②Actionをdispatchする</h2><img src="/images/20200429/3.png" class="img-small-size"><ul><li>Actionを生成するだけではStore内のStateを更新することは出来ません</li><li>dispatchすることによってActionをStoreに送ることが出来ます</li></ul><figure class="highlight js"><figcaption><span>Component.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dispatch</span></span><br><span class="line">dispatch(testFunctionA());</span><br></pre></td></tr></table></figure><h2 id="③ReducerによってStore内のStateを更新する"><a href="#③ReducerによってStore内のStateを更新する" class="headerlink" title="③ReducerによってStore内のStateを更新する"></a>③ReducerによってStore内のStateを更新する</h2><ul><li>Reducerとは、Actionを元にStateを更新するメソッドのことを言います</li><li>引数のstateの更新するのではなく、新しいstateのオブジェクトを返します</li><li>各Actionのtypeごとによって処理内容を変更できます</li></ul><figure class="highlight js"><figcaption><span>Reducer.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testReducer = <span class="function">(<span class="params">&#123; testStateA = <span class="string">""</span>, testStateB = <span class="string">""</span> &#125; = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UpdateStateA"</span>:</span><br><span class="line">            testStateA = action.testStateA;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UpdateStateB"</span>:</span><br><span class="line">            testStateB = action.testStateB;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        testStateA,</span><br><span class="line">        testStateB</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="④ReactとReduxを連携しStore内のStateをComponentで参照する"><a href="#④ReactとReduxを連携しStore内のStateをComponentで参照する" class="headerlink" title="④ReactとReduxを連携しStore内のStateをComponentで参照する"></a>④ReactとReduxを連携しStore内のStateをComponentで参照する</h2><ul><li>mapStateToPropsを使用するとComponentのpropsにStateの中身を詰め込むことが出来ます</li><li>それによって、Store内にあるStateををthis.props.testStateAとして使用することが出来ます</li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>説明させていただいたReduxの概要は下記の通りです。</p><ol><li><strong>ActionCreatorsによってActionを生成する</strong></li><li><strong>Actionをdispatchする</strong></li><li><strong>ReducerによってStore内のStateを更新する</strong></li><li><strong>ReactとReduxの連携しStore内のStateをComponentで参照する</strong></li></ol><p>最後に、ご紹介したコード例全体像はこちらです。<br>(※今回はComponent、ActionCreater、Reducerをそれぞれ別ファイルで作成しています。）</p><figure class="highlight js"><figcaption><span>Test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component</span></span><br><span class="line"><span class="keyword">import</span> &#123; testFunctionA &#125; <span class="keyword">from</span> <span class="string">"testActionCreator"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    Update() &#123;</span><br><span class="line">        <span class="comment">// dispatch</span></span><br><span class="line">        dispatch(testFunctionA());</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Action Creator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunctionA</span>(<span class="params">testStateA</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//Action</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">            type: <span class="string">"UpdateStateA"</span>,</span><br><span class="line">            testStateA</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testReducer = <span class="function">(<span class="params">&#123; testStateA = <span class="string">""</span>, testStateB = <span class="string">""</span> &#125; = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UpdateStateA"</span>:</span><br><span class="line">            testStateA = action.testStateA;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UpdateStateB"</span>:</span><br><span class="line">            testStateB = action.testStateB;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        testStateA,</span><br><span class="line">        testStateB</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はReduxの基礎的な部分の解説をさせていただきました。Redux理解の足がかりにしていただければ幸いです。</p><p>また、今後もよりReactの実装に踏み込んだ内容を投稿できたらと思っております。</p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li><li><a href="https://future-architect.github.io/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;フロントエンド記事集中投稿ウィークの2本目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、2019年4月入社の丸野です。&lt;a href=
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
      <category term="Redux" scheme="https://future-architect.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Vue.jsのslotの機能を初心者にわかるように解説してみた</title>
    <link href="https://future-architect.github.io/articles/20200428/"/>
    <id>https://future-architect.github.io/articles/20200428/</id>
    <published>2020-04-28T09:42:56.000Z</published>
    <updated>2020-05-01T01:22:16.023Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200428/top.png" class="img-middle-size"><p>フロントエンド記事集中投稿ウィークの1本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。2017年入社の永井です。</p><p>東郷さんによる<a href="https://future-architect.github.io/articles/20200401/">「Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた」</a>はご覧になられましたでしょうか？おそらくVue.js最初の難関は無事乗り越えられたと思います！</p><p>今回は「Vue.js初心者にわかるように解説してみた」第二弾として、props down,event up と同様に親子関係が肝となる、「slot」について、初心者に向けて説明していきたいと思います。</p><h1 id="slotとは"><a href="#slotとは" class="headerlink" title="slotとは"></a>slotとは</h1><p>slotとは<strong>親となるコンポーネント側から、子のコンポーネントのテンプレートの一部を差し込む機能</strong> です。</p><ul><li>スロットというと「スロットマシン」が思い浮かびますが、もともとslotの「差し込み口」という意味から派生して、コインの投入口があるスロットマシンの意味をもつようになったそうです。</li></ul><p>以下では大きく3つ、デフォルトのslot、名前付きslot、スコープ付きslotについて、説明していきます。</p><p>以下ではVue Cliを利用します。インストールしたときに作られているAbout.vue上で挙動を試す、擬似ハンズオン形式で説明していきます。</p><ul><li>インストールについては、<a href="https://cli.vuejs.org/guide/installation.html" target="_blank" rel="noopener">Vue Cli公式ドキュメント</a>などを参考に進めてください。</li></ul><h1 id="デフォルトslot"><a href="#デフォルトslot" class="headerlink" title="デフォルトslot"></a>デフォルトslot</h1><h3 id="コンポーネントの復習"><a href="#コンポーネントの復習" class="headerlink" title="コンポーネントの復習"></a>コンポーネントの復習</h3><p>/src/components 配下にとても簡単なコンポーネントを作成します。</p><figure class="highlight html"><figcaption><span>myCom.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mycom"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>name: Mirai Taro<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>/src/views/About.vue 上で、作ったコンポーネントを呼び出します。<br>以下のソースでは、<code>&lt;MyCom&gt;</code> <code>&lt;/MyCom&gt;</code> のタグでコンポーネントを利用します。ここで <code>&lt;MyCom&gt;</code>タグに囲まれた部分が無視されていることを確認してください。下記ではそれを試すために、「未来太郎」と記述してみます。</p><figure class="highlight html"><figcaption><span>About.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span>未来太郎<span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyCom <span class="keyword">from</span> <span class="string">'../components/MyCom.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    MyCom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>💻画面の出力結果：</p><img src="/images/20200428/photo_20200428_01.png" class="img-small-size" style="border:solid 1px #000000"><p>About.vue上で「未来太郎」と記述した部分は出力されません。</p><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><p>コンポーネント側のテンプレートに<code>&lt;slot&gt;</code>タグを記述すると、その場所ではスロットコンテンツが埋め込まれます。</p><figure class="highlight html"><figcaption><span>myCom.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mycom"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:<span class="tag">&lt;<span class="name">slot</span>&gt;</span>Mirai Taro<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>親側でスロットコンテンツが定義されていた場合は、<code>&lt;slot&gt;</code>タグで囲まれたコンポーネント側のコンテンツは表示されず、親側のスロットコンテンツが表示されます。今回の例ではAbout.vue上の「未来太郎」が表示されていることを確認してください。</p><p>💻画面の出力結果：</p><img src="/images/20200428/photo_20200428_04.png" class="img-small-size" style="border:solid 1px #000000"><h1 id="名前付きslot"><a href="#名前付きslot" class="headerlink" title="名前付きslot"></a>名前付きslot</h1><p>複数のslotを利用したい場合には、異なる名前をつけて利用します。</p><p>Vue 2.6.0以降は、コンポーネント側では、<code>&lt;slot name = &quot;XXX&quot;&gt;</code>で名前付きslotを定義します。</p><figure class="highlight html"><figcaption><span>myCom.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mycom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"nm"</span>&gt;</span>Mirai Taro<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>address:<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"add"</span>&gt;</span>Osaki<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>親側では、<code>v-slot:XXX</code>の形で、コンポーネントのタグ内で差し込みたい名前付きslotを指定することができます。</p><figure class="highlight html"><figcaption><span>About.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span><span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:nm</span>&gt;</span>未来太郎<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:add</span>&gt;</span>渋谷<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyCom <span class="keyword">from</span> <span class="string">'../components/MyCom.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    MyCom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上記ソースでは、1行目がコンポーネント通りに出力、２行目は、氏名が親側のコンテンツに、3行目は住所が親側のコンテンツに置き換わっていることを確認してください。</p><p>💻画面の出力結果：</p><img src="/images/20200428/photo_20200428_03.png" class="img-small-size" style="border:solid 1px #000000"><h3 id="名前つきslotの省略記法"><a href="#名前つきslotの省略記法" class="headerlink" title="名前つきslotの省略記法"></a>名前つきslotの省略記法</h3><p>v-bind を 「:」、v-onを「@」で省略できるように、v-slotも「#」で省略して記述することができます。<br>上記のAbout.vueのソースは以下のように書いてもよいです。</p><figure class="highlight html"><figcaption><span>About.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span><span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">nm</span>&gt;</span>未来太郎<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">add</span>&gt;</span>渋谷<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyCom <span class="keyword">from</span> <span class="string">'../components/MyCom.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    MyCom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="スコープ付きslot"><a href="#スコープ付きslot" class="headerlink" title="スコープ付きslot"></a>スコープ付きslot</h1><p>スコープ付きslotを利用することで、子コンポーネントから親コンポーネントに対して、スロットコンテンツの定義に必要なデータを受け取ることが可能です。</p><ul><li>実務上では、子から親へデータを渡したい時はVuex使ったほうが良い場面が多いかと思いますが、今回はslotの説明の記事なので触れることとします。</li></ul><p>こちらもvue 2.6.0より推奨されている書き方が変わっています。</p><h3 id="うまくいかないパターン"><a href="#うまくいかないパターン" class="headerlink" title="うまくいかないパターン"></a>うまくいかないパターン</h3><p>以下のようにコンポーネントを準備します。</p><figure class="highlight html"><figcaption><span>MyCom.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mycom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:<span class="tag">&lt;<span class="name">slot</span>&gt;</span>&#123;&#123; userNm.enName &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'MyCom'</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      userNm: &#123;</span><br><span class="line"><span class="javascript">        enName: <span class="string">'Mirai Taro'</span>,</span></span><br><span class="line"><span class="javascript">        jpName: <span class="string">'未来太郎'</span> <span class="comment">// ←slot内で参照したいデータ</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>この時、以下のようにして、jpNameを親側から呼び出すことはできません。</p><figure class="highlight html"><figcaption><span>About.vue(アンチケース)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">      &#123;&#123; userNm.jpName &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyCom <span class="keyword">from</span> <span class="string">'../components/MyCom.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    MyCom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="スコープ付きslotの記述方法"><a href="#スコープ付きslotの記述方法" class="headerlink" title="スコープ付きslotの記述方法"></a>スコープ付きslotの記述方法</h3><p>スコープ付きslotを利用するには、子コンポーネント側では、<code>&lt;slot&gt;</code>タグに対してv-bindを行います。</p><figure class="highlight html"><figcaption><span>MyCom.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mycom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:<span class="tag">&lt;<span class="name">slot</span> <span class="attr">:userNm</span>=<span class="string">"userNm"</span>&gt;</span>&#123;&#123; useNm.enName &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'MyCom'</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      userNm: &#123;</span><br><span class="line"><span class="javascript">        enName: <span class="string">'Mirai Taro'</span>,</span></span><br><span class="line"><span class="javascript">        jpName: <span class="string">'未来太郎'</span> <span class="comment">// ←slot内で参照したいデータ</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>親側では<code>&lt;v-slot:default&gt;</code>で受け取ることで、子コンポーネントのjpNameの値をとることができます。<code>&lt;v-slot:default=&quot;slotProps&quot;&gt;</code>のslotPropsは任意ですので重複がなければ、どんな文字列でも構いません。（公式ドキュメントに合わせました。）</p><figure class="highlight html"><figcaption><span>About.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">      &#123;&#123; slotProps.userNm.jpName &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyCom <span class="keyword">from</span> <span class="string">'../components/MyCom.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    MyCom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>なお、名前付きslotを併用する場合、defaultの部分はそれぞれのslotの名前となります。</p><ul><li>slotに名前が設定されていない時のデフォルトの名前がdefaultになるということです。</li></ul><p>💻画面の出力結果：</p><img src="/images/20200428/photo_20200428_04.png" class="img-small-size" style="border:solid 1px #000000"><p>無事、子コンポーネント側のjpNameの値を画面に出力することができました！</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>slotの機能はドキュメントなどを読んでもいまいちピンとこなかったり、2.6.0以降で推奨される書き方が変わったりで、個人的には学習に苦労してしまいました。<br>もし同様に苦しんでいる方がいらっしゃいましたら、今回の擬似ハンズオンでイメージがつかめたら幸いです。</p><h1 id="雑談"><a href="#雑談" class="headerlink" title="雑談"></a>雑談</h1><ul><li>お気づきかも知れませんが、「未来太郎」さんはフューチャー社内でよく記入例に使われる名前です。</li><li>例に出てきた「Osaki（大崎）」はフューチャーの所在地です。現在、大崎アートヴィレッジやthinkparkに入居しています。<a href="https://www.future.co.jp/recruit/new/about/place/" target="_blank" rel="noopener">こんなオフィスです。</a>（フューチャーの採用ページのwork placeのページに飛びます）</li><li>例に出てきた「渋谷」は2006年ごろ（フューチャーシステムコンサルティング時代）までの所在地です。<a href="http://www.nopa.or.jp/prize/list/past/nikkei/13/suisin/index.htm#future" target="_blank" rel="noopener">こんなオフィスだったそうです。（外部リンク）</a></li></ul><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200401/">Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた</a></li><li><a href="https://future-architect.github.io/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200428/top.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;フロントエンド記事集中投稿ウィークの1本目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
  </entry>
  
  <entry>
    <title>Goならわかるシステムプログラミングが増刷されて初版4刷になりました</title>
    <link href="https://future-architect.github.io/articles/20200427/"/>
    <id>https://future-architect.github.io/articles/20200427/</id>
    <published>2020-04-27T01:03:55.000Z</published>
    <updated>2020-04-27T01:10:05.411Z</updated>
    
    <content type="html"><![CDATA[<p>Goならわかるシステムプログラミングが増刷されました。増刷される場合にはたいてい誤字が修正されたりするんですが、今回12ページほど増量しております。<a href="http://blog.shibu.jp/article/185504106.html" target="_blank" rel="noopener">前回の3刷でも16ページ増えた</a>ので、初版と比べると28ページ増です。写真は1刷〜4刷の比較です。</p><img src="/images/20200427/photo_20200427_01.jpeg" class="img-middle-size"><p>なぜか、Real World HTTP 第2版の原稿の締め切りも、レビューの締め切りも、最終的な印刷所に原稿が運ばれて行くタイミングもだだ被りで、ちょっと忙しかったのですが、無事みなさまにお届けできる運びとなりました。</p><h1 id="変わった内容"><a href="#変わった内容" class="headerlink" title="変わった内容"></a>変わった内容</h1><p>一番大きな変更はFUSEを使ったファイルシステムを作ろう、というネタを追加したことですね。もともとアスキーの連載から書籍版を作る時に、一度は足したいネタにリストアップはしていたのですが、実装や検証期間を考えるとちょっと手強そうだぞ、ということで落ちた内容です。<a href="https://future-architect.github.io/articles/20191111/">フューチャーの技術ブログでgocloud.devの紹介</a>をしましたが、せっかくなのでこれを使って、AWS S3やらGoogle Cloud Storageをマウントとして読み込み専用でアクセスするファイルシステムを簡易実装しています。</p><p>それ以外はコラムが増えるとか、段落が増えるとか注釈が増えるとかが中心です。</p><p>TeeReaderのTeeはUNIXのteeコマンドが由来というのは知っていたけど、それはアルファベットのT由来だから、みたいな小ネタ（Qiitaの記事は消えてしまっているし、Wikipediaの説明の方を参照先としています）とか。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">&gt; 区切り用のパイプの形がアルファベットのTに似ていることから<br><br>ｿｯﾁｶｰ (´・ω・`)<a href="https://t.co/GWMqZRXzFb" target="_blank" rel="noopener">https://t.co/GWMqZRXzFb</a></p>&mdash; MURAOKA Taro (@kaoriya) <a href="https://twitter.com/kaoriya/status/1052060869780156416?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 16, 2018</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>あとは、<a href="https://songmu.jp/riji/entry/2019-07-16-gocon-fukuoka.html" target="_blank" rel="noopener">Songmuさんの福岡の発表</a>がとてもシステムプログラミングだったので、シグナルの扱いとかいくつか引用させていただきました。<code>exec.CommandContext()</code>でタイムアウトとかキャンセルされるとSIGKILLが飛ぶんですよとか。シグナル周りでは、doi-t氏のブログエントリーの「<a href="http://doi-t.hatenablog.com/entry/revisit-linux-signals-in-go" target="_blank" rel="noopener">読了、Goならわかるシステムプログラミング: Linuxシグナル再訪 in Go</a>」も参照先にくわえさせていただきました。循環参照ですね。 </p><p>メモリ周りも<a href="https://superuser.com/questions/1219609/why-is-the-alpine-docker-image-over-50-slower-than-the-ubuntu-image" target="_blank" rel="noopener">AlpineのDockerイメージを使うとPythonのパフォーマンスが落ちる話</a>とか、メモリとパフォーマンスに関する説明をちょっと追記したりしました。あとは<code>sync.Pool</code>は<code>sync</code>パッケージではありますがスラブアロケータとかパフォーマンス改善の文脈で説明した方がよかろう、とメモリの章に移動しました。かの有名なLinuxコミッターの小崎さんが、メモリ管理のページテーブルで消費されるメモリを「天使のわけまえ」と呼んでいて、さすがオシャレだなぁ、と思って引用したり。</p><p>あとはさらに細かいところでは、ストレージがSSDに変わることでOS側の戦略が変わったところを紹介したり、/dev/urandom周りの話題をちょびちょび追加したり、<a href="https://future-architect.github.io/articles/20191120/">フューチャーの辻さんの発表資料</a>を引用するなど、乱数まわりも少し追記したりしています。</p><h1 id="さらなる追加の章"><a href="#さらなる追加の章" class="headerlink" title="さらなる追加の章"></a>さらなる追加の章</h1><p>今年は<a href="https://www.lambdanote.com/collections/frontpage/products/nmonthly-vol-2-no-1-2020" target="_blank" rel="noopener">n月刊ラムダノート</a>という方にも寄稿したのですが、これはもともと3刷のときに追加しようと書き始めたのですが、30ページ以上にも渡りそうで、分量が多すぎて収録を断念したコンテンツでした。本文の最初にも書いたのですが、システムプログラミングという言葉は範囲が広くて、本や説明によって多少範囲が違ったりします。OSの中、OSの外、ネイティブコードを生成するコンパイラetc。今までもOSの中についてはシステムコールの内側の実装紹介や、OSのファイルシステムやメモリの動きなどを紹介はしていましたが、主にOSのブートストラップ部分を中心に解説しています。</p><p>このn月刊ラムダノートですが、西田さんのQUICの説明はすばらしく、そのとき執筆中だったReal World HTTP第2版からも参照先としています。QUICに関する説明としては現在日本で一番詳しいと思います。</p><p>また、dRubyの記事を書かれた咳さんは、僕がホンダ時代に参加していた、とちぎRubyで一緒に勉強させていただいた、僕の方向性やら何やらにすごく影響を与えてくださったすごい人です。きちんと過去のアーキテクチャを把握して学び、それを現代の実装に生かす、しかも出来上がったものはその時の流行に左右されていないオンリーワンなもの、というdRubyのかっこよさは僕の中では未だにダントツです。今回は過去の書籍からいろいろアップデートされ、ブラウザに対してServer Sent Eventsを使った通信したり、Raspberry PiとQRコードリーダーが登場するなど、dRubyがRubyの枠を超えていてこれも必見です。</p><h1 id="どこで買える？"><a href="#どこで買える？" class="headerlink" title="どこで買える？"></a>どこで買える？</h1><p>本日から、いろいろな書店とかには並んでいるようです。確実なのは<a href="https://www.lambdanote.com/products/go" target="_blank" rel="noopener">ラムダノートのウェブサイト</a>から購入ですね。あと、すでにラムダノートの直販サイトで購入してくださった方で、ユーザー登録している方は最新版のPDFのダウンロードができるようになっています。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200421/">Real World HTTP 第2版はなぜ1.5倍になったのか</a></li><li><a href="https://future-architect.github.io/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191203/">Go Conferenceの📛を作る</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Goならわかるシステムプログラミングが増刷されました。増刷される場合にはたいてい誤字が修正されたりするんですが、今回12ページほど増量しております。&lt;a href=&quot;http://blog.shibu.jp/article/185504106.html&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="出版" scheme="https://future-architect.github.io/tags/%E5%87%BA%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>社内勉強会で発表したGCP資料を公開します</title>
    <link href="https://future-architect.github.io/articles/20200424/"/>
    <id>https://future-architect.github.io/articles/20200424/</id>
    <published>2020-04-24T01:23:37.000Z</published>
    <updated>2020-04-25T01:58:07.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXチームの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤</a>です。この技術ブログでGCPネタをよく発信していますが、今回もGCPネタです。好きです、GCP。フューチャーの社内では定期的に勉強会を開催している部門があり、全社的に登壇者を募って発表しています。今回は私自身社内にGCPを広めたいという思いがあり登壇の機会をいただきました。今回はその時のまとめや一部改善した内容になります。また、リモートでの勉強会ということもあり、個人的に気をつけた点も簡単にまとめたので、その辺も参考になればと思います。</p><h2 id="話す前の準備"><a href="#話す前の準備" class="headerlink" title="話す前の準備"></a>話す前の準備</h2><p>今回は社内で広く利用しているGoogle Meetを使ってオンラインで勉強を行いました。勉強会としても私としてもリモート開催がそもそも初めてなので、質問を受けやすいように区切りのいいとこで質問タイムを設けました。また、オンラインだと反応が見にくいというのがあり、<a href="https://www.sli.do/" target="_blank" rel="noopener">sli.do</a>で質問を募ったり、単純な感想などを随時書いてもらう形式を取りました。その場で答えられなかった質問については後日Appendixという形で展開を考えています。まだまだオンラインで開催するに当たっては改善点もたくさんあるので、広く知識等を身につけていきたいところです。</p><h2 id="話したこと"><a href="#話したこと" class="headerlink" title="話したこと"></a>話したこと</h2><p>今回話した内容はここからになります。発表時のスライドは以下になりますので、時折記事と照らし合わせながら見てもらえればと思います。一部社内向けにしていたものを社外向けにしたり、不要なスライドは削っている部分はありますが、基本的に同じ内容になります。</p><script async class="speakerdeck-embed" data-id="1a60e1e45b3a4b3d9b8137568d04a3c9" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>今回は大きく4つの内容に分けて話しました。</p><ul><li>GCPとは何か</li><li>AWSとの違い</li><li>ハイブリッド・マルチクラウドで使うときに使えるサービス</li><li>GCPならではのユースケース</li></ul><p>今回の勉強会の参加者はオンプレミスの案件であったり、AWSを使っている方が中心だったので、GCPを今の環境に導入する際によりクイックに効くものを中心に盛り込見ました。そのため、各プロダクトやGKE周りの話は今回カットしました（その文脈では最後のユースケースの部分はどちらかというとおまけに近い内容です）。以下では特に説明したかった部分についてかいつまんで書いていきます。</p><h2 id="GCPとは"><a href="#GCPとは" class="headerlink" title="GCPとは"></a>GCPとは</h2><p>クラウドの利点はおおよそどのベンダーを使っても享受できると思うので、ここでは私が考えるGCPとは、そしてGoogleのネットワークについて説明しました。私自身GCPのプロダクトを見たり使っていてこれだ！と感じているのは、</p><ul><li>Googleがこれまでに培ってきた高品質かつスケーラブルのインフラを誰でも比較的安価に使えること</li><li>Google発信のOSSをマネージドサービスとして利用できること</li></ul><p>です。GCPに乗せることでGoogleのネットワークを使えることはかなり大きなメリットではないかと思っています。Googleはネットワークで海底ケーブルなどへの投資も行なっていたり、続々とリージョンを開設しているので、今後もネットワーク周りは強化されていくでしょう。また、KubernetesはもともとGoogleの社内でBorgとして培われた技術で、現在はCNCFにホストされています。これをマネージドとしてGoogle Kubernetes Engine(GKE)として簡単に使うことができることも大きなメリットであり、「GCPだから！」というポイントであると考えています。</p><h2 id="AWSとの違い"><a href="#AWSとの違い" class="headerlink" title="AWSとの違い"></a>AWSとの違い</h2><p>前職でAWSを使っていたこともあり、AWSとGCPの思想や根本の設計がなんとなく違うことは理解していましたが、これを機会に図示や説明してみました。私がAWSとGCPで異なっていて、これは大きな違いであると感じたのは</p><ul><li>プロジェクトの管理方法</li><li>ネットワーク</li></ul><p>の2点です。ここは少し細かめに説明していきます。</p><h3 id="プロジェクトの考え方"><a href="#プロジェクトの考え方" class="headerlink" title="プロジェクトの考え方"></a>プロジェクトの考え方</h3><p>私は以前、AWSを使っていたこともあり、GCPを使い始めたときに、大きく違うと印象を受けたうちの1つがプロジェクトの考え方です。こちらはGCPの<a href="https://cloud.google.com/blog/ja/products/gcp/mapping-your-organization-with-the-google-cloud-platform-resource-hierarchy" target="_blank" rel="noopener">公式ブログ</a>から引用したものになります。</p><img src="/images/20200424/photo_20200424_01.png"><p>AWSはアカウント1つに対してプロジェクトは1つです。AWS Organizationsもリリースされましたが、基本的な考え方は変わらず同じだと思っています。プロジェクトで1つのアカウントとしている場合、開発環境や本番環境のリソースが混在するため、誤操作で本番環境のリソースを謝って削除してしまうなどもオペレーションミスなども発生しているのではないかと思いっています。私はまさにその状態で運用していたため、CLIを使うときにかなり気を揉んでいた覚えがあります。<br>一方、GCPはアカウント1つに対してプロジェクトを複数作成できます。個人的な開発目的でも単一のアカウントで環境を分離できるため、オペレーションミスの軽減に繋がるかと思います。また、プロジェクトごと削除することができるため、個人でお試しをするときは便利です。<br>次にアカウントを会社単位で管理するときについてです。最上位に当たるものはOrganization Nodeになります。企業のドメイン(当社であれば<code>future.co.jp</code>です)をOrganizationの最上位にし、その配下にはフォルダやプロジェクトを設定することができます。フォルダの使いどころとしては、サービスごとに切り分け、各フォルダごとに本番環境、検証環境、開発環境を設定する使い方や、ファイナンシャル部門が請求を見るためのフォルダとプロジェクトを設定してもいいでしょう。プロジェクトは環境ごとにリソースを分離しています。</p><h3 id="ネットワークの違い"><a href="#ネットワークの違い" class="headerlink" title="ネットワークの違い"></a>ネットワークの違い</h3><p>ここでもAWSとGCPの考え方の違いを感じました。<br><img src="/images/20200424/photo_20200424_02.png"><br>スライドの図を実際に持ってきました。まとめると以下の表になります。</p><table><thead><tr><th></th><th>VPCの考え方</th><th>VPCとNWレンジ</th><th>Subnetの切り出し方</th><th>Subnetの紐づくところ</th></tr></thead><tbody><tr><td>AWS</td><td>仮想的なNW</td><td>紐づく</td><td>VPCから切り出す</td><td>ゾーン</td></tr><tr><td>GCP</td><td>あくまで枠</td><td>紐づかない</td><td>それぞれ選べる</td><td>リージョン</td></tr></tbody></table><p>GCPを使い始めたとき、VPCの設計がリージョンもまたいで使用できる「枠」という使い方も新鮮でした。ロードバランサもグローバルリソースとして扱えることもあり、サービスを世界展開したいときにはかなり役立つのではないでしょうか？</p><h2 id="GCPならではのサービス"><a href="#GCPならではのサービス" class="headerlink" title="GCPならではのサービス"></a>GCPならではのサービス</h2><p>最後はGCPが得意とするサービスを少し紹介しました。データ分析にBigQueryを使用するためにAWSとハイブリッドにしているパターンも多いのではないでしょうか？ここではスライドの内容を複合的にまとめて、AWSで分析したいデータをためてGCPで分析できるようにする流れを見てみましょう。ストレージのページで、Transfer Serviceを説明しましたが、組み合わせると以下の図になります。</p><img src="/images/20200424/photo_20200424_03.png"><p>簡単な図ですが、ログを集積するバケットをAWSに設けて、これをTransfer ServiceでGCSに連携することでBigQueryが読み込むことが可能になります。また、Transfer Service自体はオンプレとも接続ができるため、ハイブリッドクラウド、マルチクラウドで分析基盤として利用ができます。<br>機械学習についても、Google Lensをはじめとしたサービスに多用されています。私がGoogleと機械学習で印象深い話があり、それは<a href="https://cloudplatform-jp.googleblog.com/2016/08/tensorflow_5.html" target="_blank" rel="noopener">きゅうりをAIで仕分ける話</a>です。この記事ではGCPのサービスを活用して問題解決しているわけではありませんが、Cloud TPUを活用したらより学習効率や精度の向上が見込めると考えました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回社内で勉強会に登壇する場ををもらい、私自身とても良い機会になりました。GoogleはOSSの発信以外にもエラーバジェットやSREといった、新たな考え方なども提唱しています。私が今回資料を作るにあたり、</p><ul><li>マイクロサービス</li><li>Kubernetesを使うためのネットワーク設計</li></ul><p>の2点を感じました。Organizationの設計はマイクロサービス化するためにはとてもフィットしていて、それぞれ分担して機能を担うことも可能にしているのではないかと思いました。また、Zoneをまたいでサブネットを決定できるのもKubernetesを扱う上で無駄なくIPレンジを使用できる設計ではと考えています。この辺は今回資料を作るにあたり、いい気づきになりました。<br>今回はGCPがAWSに比べていい、みたいな意見が多いと思いますが、ユースケースなど様々だとなので、どちらも良いところはあると思います。</p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20191129/">GDG DevFest in 信州2019に登壇しました</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="https://future-architect.github.io/articles/20191119/">Go Cloud#6 GCPのローカルエミュレータを活用する</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG/DXチームの&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>Session Manager と踏み台サーバの共存構成</title>
    <link href="https://future-architect.github.io/articles/20200423/"/>
    <id>https://future-architect.github.io/articles/20200423/</id>
    <published>2020-04-23T01:23:54.000Z</published>
    <updated>2020-04-23T01:34:42.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちはー<br>TIG DX Unit のゆるふわエンジニアの前原です。</p><p>突然ですが、Session Manager 使ってますか？調べるとブログがたくさん掲載されているので使っているところは多いのかな？って思っています。</p><p>また、ブログのタイトルを見ると以下のメッセージが多い印象を受けました。</p><ul><li>さよなら踏み台サーバ</li><li>もういらない踏み台サーバ</li><li>..etc</li></ul><p>なんか、可哀想になってきますね。。<br>とはいえ、こういったメッセージが多い理由としては、以下のメリットからだと考えられます。</p><ul><li>踏み台サーバ不要でAWS リソースに容易にアクセスすることが可能</li><li>SSH のキー管理も不要で、IAM User と必要な権限が付与されていればアクセスできる</li><li>Security Group を意識しなくていい</li><li>操作ログも自動でCloudWatch Logs で取得される</li><li>CloudTrail では、セッションを張った時のイベントが取得される</li></ul><p>仮に踏み台サーバを運用しようとすると上記のことを踏まえて構成、メンテナンスを行う必要があります。<br>これは、Session Manager を利用するのが必然に感じますね。</p><p>しかし、運用している踏み台サーバをSession Manager に移行するのは難しいところもあると思います。例えば、踏み台サーバに色々な役割を持たせているケースもあると思います（例えば、プロビジョニング用途など）。踏み台サーバの本来の役割的には、、と思った人もいると思いますが、現実は割とごった煮サーバになっているケースもあります。</p><p>そこで、踏み台サーバを生かしつつ、Session Manager を利用できる方法について説明したいと思います。</p><h1 id="踏み台サーバとSession-Manager-の共存構成"><a href="#踏み台サーバとSession-Manager-の共存構成" class="headerlink" title="踏み台サーバとSession Manager の共存構成"></a>踏み台サーバとSession Manager の共存構成</h1><p>ここで紹介する構成は、以下です。<br>下記の図に記載されているbastion serverは、踏み台サーバを指しています。</p><ul><li>Session Manager を通してSSH で踏み台サーバへアクセス</li></ul><img src="/images/20200423/photo_20200423_01.jpeg"><ul><li>ポートフォワードでRDS にアクセス</li></ul><img src="/images/20200423/photo_20200423_02.jpeg"><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>サーバ側の準備とクライアント側の準備が必要になります。</p><h3 id="サーバ側の準備"><a href="#サーバ側の準備" class="headerlink" title="サーバ側の準備"></a>サーバ側の準備</h3><p>Session Manager のアクセス許可を行うため、対象のEC2（ここでいう踏み台サーバ）に<a href="https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/session-manager-getting-started-instance-profile.html" target="_blank" rel="noopener">AmazonSSMManagedInstanceCore</a>ポリシを追加します。<br>もし必要なアクションのみを追加したい場合は、以下を追加します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">    <span class="attr">"Statement"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"ssmmessages:CreateControlChannel"</span>,</span><br><span class="line">                <span class="string">"ssmmessages:CreateDataChannel"</span>,</span><br><span class="line">                <span class="string">"ssmmessages:OpenControlChannel"</span>,</span><br><span class="line">                <span class="string">"ssmmessages:OpenDataChannel"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"logs:CreateLogGroup"</span>,</span><br><span class="line">                <span class="string">"logs:CreateLogStream"</span>,</span><br><span class="line">                <span class="string">"logs:PutLogEvents"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"s3:GetEncryptionConfiguration"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"kms:Decrypt"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"key-name"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>踏み台サーバのSSM エージェントが<code>2.3.672.0</code>以上である必要があります。<br>もし古い場合は、<a href="https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/sysman-manual-agent-install.html" target="_blank" rel="noopener">ここのサイト</a>を参考にしてください。<br>バージョンが古いとSession Manager を通してSSH で接続することができません。</p><h3 id="クライアント側の準備"><a href="#クライアント側の準備" class="headerlink" title="クライアント側の準備"></a>クライアント側の準備</h3><p>Session Manager plugin をインストールします。<br>前提として、<code>AWS CLI</code> が使用できることと、適切なIAM Policy がアタッチされていることを前提とします。</p><h4 id="Mac-インストール方法"><a href="#Mac-インストール方法" class="headerlink" title="Mac インストール方法"></a>Mac インストール方法</h4><p>プラグインをダウンロードします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">"https://s3.amazonaws.com/session-manager-downloads/plugin/latest/mac/sessionmanager-bundle.zip"</span> -o <span class="string">"sessionmanager-bundle.zip"</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 4680k  100 4680k    0     0   174k      0  0:00:26  0:00:26 --:--:--  120k</span><br></pre></td></tr></table></figure><p>ダウンロードしたファイルを解凍します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ unzip sessionmanager-bundle.zip</span><br><span class="line">Archive:  sessionmanager-bundle.zip</span><br><span class="line">   creating: sessionmanager-bundle/</span><br><span class="line">   creating: sessionmanager-bundle/bin/</span><br><span class="line">  inflating: sessionmanager-bundle/seelog.xml.template</span><br><span class="line">  inflating: sessionmanager-bundle/LICENSE</span><br><span class="line">  inflating: sessionmanager-bundle/VERSION</span><br><span class="line">  inflating: sessionmanager-bundle/install</span><br><span class="line">  inflating: sessionmanager-bundle/bin/session-manager-plugin</span><br></pre></td></tr></table></figure><p>プラグインのインストールをします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./sessionmanager-bundle/install -i /usr/<span class="built_in">local</span>/sessionmanagerplugin -b /usr/<span class="built_in">local</span>/bin/session-manager-plugin</span><br><span class="line">Password:</span><br><span class="line">Creating install directories: /usr/<span class="built_in">local</span>/sessionmanagerplugin/bin</span><br><span class="line">Creating Symlink from /usr/<span class="built_in">local</span>/sessionmanagerplugin/bin/session-manager-plugin to /usr/<span class="built_in">local</span>/bin/session-manager-plugin</span><br><span class="line">Installation successful!</span><br></pre></td></tr></table></figure><p>バージョンの確認をします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ session-manager-plugin --version</span><br><span class="line">1.1.54.0</span><br></pre></td></tr></table></figure><p>インストールが成功していると以下のメッセージが出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ session-manager-plugin</span><br><span class="line"></span><br><span class="line">The Session Manager plugin was installed successfully. Use the AWS CLI to start a session.</span><br></pre></td></tr></table></figure><p>SSH 設定ファイル（~/.ssh/config）に以下を追記します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSH over Session Manager</span></span><br><span class="line">host i-* mi-*</span><br><span class="line">    ProxyCommand sh -c <span class="string">"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'"</span></span><br></pre></td></tr></table></figure><h4 id="Windows-インストール方法"><a href="#Windows-インストール方法" class="headerlink" title="Windows インストール方法"></a>Windows インストール方法</h4><p>ここでは、Windows にSession Manager Plugin をインストールする方法を記載します。</p><ol><li>インストーラーを<a href="https://s3.amazonaws.com/session-manager-downloads/plugin/latest/windows/SessionManagerPluginSetup.exe" target="_blank" rel="noopener">ダウンロード</a>する</li><li>インストーラーの指示に従う</li><li>インストールの確認のため以下のコマンドでバージョンが表示されたら完了</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ session-manager-plugin --version</span><br></pre></td></tr></table></figure><ol start="5"><li>SSH 設定ファイルに以下を追記する<ul><li>ファイル: C:\Users\username.ssh\config</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSH over Session Manager</span></span><br><span class="line">host i-* mi-*</span><br><span class="line">    ProxyCommand C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe <span class="string">"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters portNumber=%p"</span></span><br></pre></td></tr></table></figure><h4 id="補足-プロキシ設定"><a href="#補足-プロキシ設定" class="headerlink" title="補足: プロキシ設定"></a>補足: プロキシ設定</h4><ul><li>Mac</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> http_proxy=http://&lt;USER_NAMEh&gt;:&lt;PASSWORD&gt;@&lt;PROXY_SERVER&gt;:&lt;PORT&gt;</span><br><span class="line">$ <span class="built_in">export</span> https_proxy=https://&lt;USER_NAMEh&gt;:&lt;PASSWORD&gt;@&lt;PROXY_SERVER&gt;:&lt;PORT&gt;</span><br></pre></td></tr></table></figure><ul><li>Windows</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span> http_proxy=http://&lt;USER_NAMEh&gt;:&lt;PASSWORD&gt;@&lt;PROXY_SERVER&gt;:&lt;PORT&gt;</span><br><span class="line">$ <span class="built_in">set</span> https_proxy=https://&lt;USER_NAMEh&gt;:&lt;PASSWORD&gt;@&lt;PROXY_SERVER&gt;:&lt;PORT&gt;</span><br></pre></td></tr></table></figure><h2 id="実際にアクセスしてみる"><a href="#実際にアクセスしてみる" class="headerlink" title="実際にアクセスしてみる"></a>実際にアクセスしてみる</h2><p>今回の二つの構成でのアクセスを行なっていきたいと思います。</p><ul><li>Session Manager を通してSSH で踏み台サーバへアクセス</li><li>ポートフォワードでRDS にアクセス</li></ul><h3 id="Session-Manager-を通してSSH-で踏み台サーバへアクセス"><a href="#Session-Manager-を通してSSH-で踏み台サーバへアクセス" class="headerlink" title="Session Manager を通してSSH で踏み台サーバへアクセス"></a>Session Manager を通してSSH で踏み台サーバへアクセス</h3><p>まずは、踏み台サーバにSession Manager を通してアクセスしたいと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i &lt;KEY_NAME&gt;.pem &lt;USER_NAME&gt;@&lt;INSTANCE_ID&gt;</span><br></pre></td></tr></table></figure><p>通常のssh でアクセスするときと違う点としては、IP アドレスではなく、Instance ID を指定する点です。<br>ポートは、デフォルトの22 を指定するかたちで問題ありません（Security Group のInbound の22 を開ける必要はありません）<br>AWS マネジメントコンソール（HTTPS）へのアクセスが可能であればアクセスできます。</p><h3 id="ポートフォワードでRDS-にアクセス"><a href="#ポートフォワードでRDS-にアクセス" class="headerlink" title="ポートフォワードでRDS にアクセス"></a>ポートフォワードでRDS にアクセス</h3><p>ポートフォワードも通常のSSH で行う場合と同一のコマンドで行えます。<br>ここでは、PostgreSQL（5432） にアクセスするケースとします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -NL 15432:&#123;DB_HOST&#125;:5432 -i &lt;KEY_NAME&gt;.pem &lt;USER_NAME&gt;@&lt;INSTANCE_ID&gt;</span><br></pre></td></tr></table></figure><h3 id="アクセスできない場合"><a href="#アクセスできない場合" class="headerlink" title="アクセスできない場合"></a>アクセスできない場合</h3><p>踏み台サーバにアクセスできず、以下のエラーが発生する場合は、SSM エージェントのサービス再起動をすると解消される可能性があります。<br>（前提としてポリシ周りの誤りがないこと）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The version of SSM Agent on the instance supports Session Manager, but the instance is not configured for use with AWS Systems Manager. Verify that the IAM instance profile attached to the instance includes the required permissions.</span><br></pre></td></tr></table></figure><p>再起動コマンド</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart amazon-ssm-agent</span><br></pre></td></tr></table></figure><h2 id="ログについて"><a href="#ログについて" class="headerlink" title="ログについて"></a>ログについて</h2><p>Session Manager を利用することで、CloudWatch Logs で操作ログの取得ができると冒頭で説明しました。<br>ただ、今回のSSH over Session Manager の構成では、CloudWatch Logs でログが出力されません。<br>したがって、Script コマンドで各ユーザの操作ログの取得が必要となります。<br>また、ポートフォワードした時は、Script コマンドにさえ残らないので、注意が必要です（これはSession Manager 云々の話ではないですが）<br>その場合は、CloudTrail のイベント（Session &amp; Terminate）とRDS のAudit ログから証跡を辿る必要があります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>いかがでしたでしょうか。<br>既存の踏み台サーバを残しつつ、Session Manager を利用する場合のケースについて書きました。<br>踏み台サーバを簡単になくすことが出来ない構成だけど、Session Manager を利用したいという人のお役に立てれば嬉しいです。<br>もし、完全に踏み台サーバを無くしたい場合は、PrivateLink などを利用した構成や、踏み台サーバに持たせている機能の移行などを検討するのも良いと思います。</p><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちはー&lt;br&gt;TIG DX Unit のゆるふわエンジニアの前原です。&lt;/p&gt;
&lt;p&gt;突然ですが、Session Ma
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Session-Manager" scheme="https://future-architect.github.io/tags/Session-Manager/"/>
    
  </entry>
  
  <entry>
    <title>PyConJP 2019に登壇しました</title>
    <link href="https://future-architect.github.io/articles/20200422/"/>
    <id>https://future-architect.github.io/articles/20200422/</id>
    <published>2020-04-22T13:19:57.000Z</published>
    <updated>2020-04-21T13:29:53.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXチームの栗田です。最近チーム内でGoが流行っていますが、私は前までPythonの人でして、実は昨年開催された<a href="https://pycon.jp/2019/" target="_blank" rel="noopener">PyConJP 2019</a>にLT登壇していました。今回は新型コロナの影響でチームの業務が100%リモートワーク化され、これまでの通勤時間が作業に充てられるようになりましたので、せっかくということで当時の様子を記載しておこうと思います。</p><img src="/images/20200422/photo_20200422_01.jpeg"><h1 id="きっかけ"><a href="#きっかけ" class="headerlink" title="きっかけ"></a>きっかけ</h1><p>私はフューチャーに中途入社したのですが、もともと大学で人工衛星開発と宇宙物理を専攻し、その後国内鉄鋼メーカに新卒入社しました。私は新卒で前職システム部門に配属されましたが、そこはコードの実装やレビューなどはせず、ベンダーコントロールを行うための部署でした。自分のコーディング力を向上させたかった私は、そこから社外の勉強会を探して参加するようになりました。学生時代から国内外の学会には参加していたのですが、社外勉強会に参加するうちに「プログラミングにもカンファレンスがあるんだ」と気付き、そのままの勢いでPyConJP 2017に初参加しました。</p><p>初参加だったPyConJP 2017は非常に楽しく、私の中で世界が大きく広がりました。「いつか自分もなにか発表してみたいな」という思いを抱えて過ごしていましたが、翌年参加したPyConJP 2018でその思いが燃え上がり、PyConJP 2019を目指すことにしました。</p><h2 id="アイデアの種"><a href="#アイデアの種" class="headerlink" title="アイデアの種"></a>アイデアの種</h2><p>それまでPythonでグラフを描いたり数値解析したりはしていましたが、そこは大人気のデータ分析分野です。そもそも当時の業務においてはPythonを書いている時間よりもExcelドキュメントを書いている時間のほうが圧倒的に長い自分にとって、プライベートだけで何かしらのネタを生み出すのは難しいと考えました。なので、流行りものに乗るよりは好きなものを作ることにしました。</p><p>そこで興味があったのが「ブラウザ」です。当時の職場はWindows7 32bit/メモリ2GBのデスクトップPCが基本セットながらも、一応申請すれば大抵のソフトウェアは許可されるような環境でした。その中で、絶対にインストールが許されないのが「ブラウザ」でした。Windows7はデフォルトでIE11のみが使用できるようにキッキングされており、「ブラウザはすでに搭載されているので」というのが理由で、Chromeのインストールはできませんでした（他にもセキュリティ的な諸々などもあるはずですが、それは割愛します）。そこで私は考えました。「Chromeがないなら作ればいいじゃないの」と。</p><p>当時ビッグデータやAIブームで一躍有名になったPythonは、そのモジュールも含めて申請が通りやすい状況でした。このPythonと組み合わせたのがPyQt5です。これはQt5のPythonバインディングですが、Chromium Web Engineが含まれます。ChromeはNGだけどChromiumがOKという言わば裏技を使うことで、開発準備が整いました。</p><p>余談ですが、PyQt5を採用した理由の一つに、依存パッケージが少ないことがあります。プロキシ指定して <code>pip</code> を使えば、必要なパッケージを揃えるのには手動でインストールする必要がありましたが、おかげでだいぶ楽をすることができました。</p><p>こうして無事武器を手に入れた私は、2017年の大晦日ハッカソンとしてオレオレブラウザ<a href="https://github.com/montblanc18/persephonep" target="_blank" rel="noopener">PersephoneP</a>の開発をはじめました。当時できた初版については、<a href="https://qiita.com/montblanc18/items/88d0b639de86b7cac613" target="_blank" rel="noopener">Qiita</a>上にまとめています。</p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><p>初めてのCfPでしたが、昨今PyConJPに提出されるCfPが増えて採択率がだいぶ低くなっていることは知っていました。私は最初からLT狙いだったのですが、短時間で内容をおもしろくかつインパクトのあるものに仕上げるため、テクニカルな部分もそうですがストーリーを意識したCfPにしました。（ちなみにCfPを提出する少し前にフューチャーに転職してきました。）</p><p>CfP提出後しばらくして採択されたことをメールで確認した私は、TIG Fridayという社内LTイベントなどで素振りにかけさせていただき、発表の1ヶ月前にはおおよその雛形は出来上がっていました。</p><h1 id="発表"><a href="#発表" class="headerlink" title="発表"></a>発表</h1><p>PyConJP 2019の査読付きLT通過は6名で、2日間の日程のうち初日に日本語で発表したのは私だけでした。裏被りのない一番広いホールで会場に数百人+ストリーミング視聴されている方もいる状態で、なかなか緊張していました。実際の発表の様子はYouTubeに公開されていますし、スライドも公開していますのでそちらを御覧ください。だいぶ早口になっていますが、少ない時間に色々盛り込んだためですので、ご容赦ください。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/7U2D5tcMZb4?start=673" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe src="//www.slideshare.net/slideshow/embed_code/key/h1IYtX98jYS2Ts" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ShinKurita/my-browser-with-python3-172131107" title="Pythonで始めるオレオレブラウザ / My browser with Python3" target="_blank">Pythonで始めるオレオレブラウザ / My browser with Python3</a> </strong> from <strong><a href="https://www.slideshare.net/ShinKurita" target="_blank">Shin Kurita</a></strong> </div><p>LTだったためその場での質疑応答はないのですが、登壇直後にエゴサーチをかけてリアルな反応を楽しみました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">「ブラウザは基本的人権」「Chromeがないなら作ればいいじゃない」「PyQt5を入れるとChromiumが入る」 <a href="https://twitter.com/hashtag/PyConJP?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#PyConJP</a></p>&mdash; YASUI Tsutomu (@yattom) <a href="https://twitter.com/yattom/status/1173509505629315073?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 16, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">&quot;環境を変えるはずが会社を変えることになった&quot;<a href="https://twitter.com/hashtag/pyconjp?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#pyconjp</a></p>&mdash; にしお (@nissy0409240) <a href="https://twitter.com/nissy0409240/status/1173509864179421184?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 16, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">フューチャーアーキテクトに転職してすべてを解決したと (naruhodo <a href="https://twitter.com/hashtag/pyconjp?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#pyconjp</a></p>&mdash; かしゅー (@kashew_nuts) <a href="https://twitter.com/kashew_nuts/status/1173510116416479233?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 16, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">おれおれブラウザのLT、これぞLTという素晴らしい内容でした。 <a href="https://twitter.com/hashtag/pyconjp?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#pyconjp</a></p>&mdash; kioto (@takaneh) <a href="https://twitter.com/takaneh/status/1173510059763961856?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 16, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>また、同日の懇親会でもいろんな方に声をかけていただきました。ちなみにその中のひとりで<a href="http://segafreder.hatenablog.com/entry/2019/09/18/234739" target="_blank" rel="noopener">「PyQt5で自分のためのIDEを作っちゃおう！」</a>という発表をされた方がいたのですが、IDEの一部機能を実装するのに、上記の<a href="https://qiita.com/montblanc18/items/88d0b639de86b7cac613" target="_blank" rel="noopener">私のQiita記事</a>や<a href="https://github.com/montblanc18/persephonep" target="_blank" rel="noopener">コード</a>を参考にしてくださったそうです。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">こちらこそ、ペルセポネにスーパーお世話になってるのでLTで開発者が来てると知り「絶対話しかけるぞ！」と思ってたので発見できてよかったです！</p>&mdash; fukatani (@fukafukatani) <a href="https://twitter.com/fukafukatani/status/1173566299403718656?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 16, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>純粋に、すごく嬉しかったです。</p><h1 id="参加してみての感想"><a href="#参加してみての感想" class="headerlink" title="参加してみての感想"></a>参加してみての感想</h1><p>初めてのカンファレンス登壇でしたが、非常に楽しめました。インプットばかりではなくアウトプットが大事なことは常日頃から認識していましたが、実際に自分も登壇者になると気持ちの良い達成感を得ることができました。あと、いろんな人と繋がれたりしました。またどこかで登壇狙いたいと思います。</p><h2 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h2><ul><li>大晦日から開発を始めた理由ですが、昔「MikuMikuDanceは大晦日から開発が始まった」というのを聞いていて、それにあやかってみました</li><li>オレオレブラウザPersephoneP、Win7 32bitメモリ2GBでも動いたのですが、結局マシンスペックがネックでIEからの生産性の向上はあまりありませんでした</li><li>他のフューチャーの社員も参加しており、最初の画像はスタッフをされていた方から頂戴しました</li><li>速攻で前職の人から「見ました」と連絡がいただきましたが、退職しても気にかけていただけているのは嬉しい限りです</li><li>ブラウザを作ってみるという「車輪の再実装」は楽しかったです</li></ul><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20170526/">AIを使って顔画像から「常連さん」を判定しよう！</a></li><li><a href="https://future-architect.github.io/articles/20200131/">AirflowのTips 11選</a></li><li><a href="https://future-architect.github.io/articles/20200212/">GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG/DXチームの栗田です。最近チーム内でGoが流行っていますが、私は前までPythonの人でして、実は昨年開
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="Conference" scheme="https://future-architect.github.io/tags/Conference/"/>
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Real World HTTP 第2版はなぜ1.5倍になったのか</title>
    <link href="https://future-architect.github.io/articles/20200421/"/>
    <id>https://future-architect.github.io/articles/20200421/</id>
    <published>2020-04-21T00:55:14.000Z</published>
    <updated>2020-04-21T01:02:01.249Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.oreilly.co.jp/books/9784873119038/" target="_blank" rel="noopener">Real World HTTP 第2版</a>が2020/04/20出版されました。第2版が出版されるというのは、初版をみなさまが買ってくださったおかげです。どうもありがとうございます。紙媒体は先行入荷する書店さんではすでに入っているようです。オライリーのウェブサイトから電子版を購入することもできます。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">4/17新刊『Real World HTTP　第2版 歴史とコードに学ぶインターネットとウェブ技術』オライリー（978-4-87311-903-8）渋川よしき 著◆「オライリー」棚にて展開中！Webテクノロジーの基礎となるHTTPの仕様を網羅的に学べる学習書が内容を充実させて改訂！ <a href="https://t.co/k86zXGaHe9" target="_blank" rel="noopener">pic.twitter.com/k86zXGaHe9</a></p>&mdash; 書泉ブックタワーコンピュータ書 (@shosen_bt_pc) <a href="https://twitter.com/shosen_bt_pc/status/1251037915582312448?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 17, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>Real World HTTPの初版の執筆時にも、ネットで見かけるHTTP絡みのネタとかをGitLabのissueにガンガン突っ込みつつ執筆も行っていました。しかしそのissueが発散するばかりで収束しないので、「もうここで手を打ちましょう」とスナップショットを取ったのが初版でした。その後もウェブのネタ(issue)はどんどん増えていきます。それを昨年のミニ版で一部反映したものの、消化しきれなかったものや、その後追加されたものを入れて出来上がったのが第2版になります。ページ数は1.5倍になったのにお値段は5%しか上がっていないというお買い得本になっています。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Real World HTTPの初版と2版の比較です。1.5倍ぐらいになっています。古い内容削ったりしたのだけど。 <a href="https://t.co/4jT4lF6PWt" target="_blank" rel="noopener">pic.twitter.com/4jT4lF6PWt</a></p>&mdash; 渋川よしき (@shibu_jp) <a href="https://twitter.com/shibu_jp/status/1251060223827046401?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 17, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h1 id="2017年から変わったこと"><a href="#2017年から変わったこと" class="headerlink" title="2017年から変わったこと"></a>2017年から変わったこと</h1><p>QUIC周りがHTTP/3として再構成された、というのが一番派手な変化でありましたが、それ以外にも細々とあります。TLS 1.3とか、もはや当たり前になりすぎてしまったものもあります。逆にsdchのようなChromeが導入したけど、削除された圧縮フォーマットとかもあります。OAuth 2.1周りとかも規格の進化が行われつつあります。あと地味どころだと、動画ストリーミングのApple発のHLSが正式にRFCが発行されたり、robots.txtもRFC化のための動きが再開されたり、というのもあります。</p><p>MDNに対してChromeなど他のブラウザベンダーもコミットしますよ、とか、HTML周りの仕様策定がWHATWGに正式に移管されるなど一次情報源の変化もありました。</p><p>EdgeがChromiumベースになってしまったのは少しショックでしたが、Windows 7などにもEdgeが配信されることで、標準がIEしかない、という状況は改善されました。本書でもセキュリティ以外のIEのみの話はかなり削りました。Let’s Encryptの大流行でAlways TLSが大幅に進行したのも初版と大きく世界が変わったところですね。</p><p>とはいえ、個人目線では追いきれないほどの変化が日々発生しています。SxSとかWebTransportなどは今回触れていません。基本的に <a href="https://caniuse.com" target="_blank" rel="noopener">https://caniuse.com</a> を見てChrome一党のみが対応しているものは除外しています。RFCもQUICみたいな確度の高いものを除いては、提案段階ではなく策定が完了し、現実世界で広く使われているものを中心に絞っています。中にはクッキーのSameSiteみたいに、RFCがないんだけど全ブラウザが何故か実装しているやつもありますが、これも取り上げています。</p><p>ただ、これらの状況の変化による追記よりは、それまでもあった内容の追加の方が多数に及びます。</p><h1 id="初版より前からあったけど追加したこと"><a href="#初版より前からあったけど追加したこと" class="headerlink" title="初版より前からあったけど追加したこと"></a>初版より前からあったけど追加したこと</h1><p>例えば、リスト型攻撃がよく話題になります。その踏み台としてよく取り沙汰される平文パスワード。それを防ぐための<a href="https://ja.wikipedia.org/wiki/Bcrypt" target="_blank" rel="noopener">bcrypt</a>等のパスワード保持のためのハッシュ関数の紹介をしたり（このWikipediaの翻訳も執筆のついでにやりました）、TOTPをはじめとする多要素認証の仕組み、あとはリスト型攻撃を受けてしまったあとに、それをユーザーに通知することで被害拡大を防ぐためのログイン通知あたりですね。初版のころにすでにどれもあったものですが、ニュースになることが多かったので追加しました。</p><p>あとは、厳密にはHTTPではないですが、UnifiedであるはずのURLやそれ以外の情報をまとめて伝搬する、もっとUnifiedな伝送手段であるところのQRコードとかも、ウェブと地続きに感じたので取り上げています。小ネタとしては、XMLHTTPRequestはなぜ「XML」が頭に付いているのか、みたいなのも入れています。</p><p>追加もそこそこ多く、章ごとの文章バランスが悪くなってしまったのでJavaScriptのみの章を切り出しました。WebSocketとかServer Sent EventsみたいなAPIの紹介から、JavaScriptだけを使ってグローバルナビゲーションを伴うGET/POST、伴わないGET/POST、ファイルのダウンロード、動的にコンテンツを作成しつつダウンロードみたいな、考えられうる通信パターンを網羅してみたり、そのついでにデータURIスキームの説明も追加しました。</p><p>ミニ版で追加したウェブアプリケーションの章も入れると同時に、クラウドサービスの章を追加しました。DNSとかCDNは初版のときから、取り上げたいなぁと思っていましたが、前者はそれだけで価値を感じてもらうのは難しそうなのでクラウドの応用例のロードバランスとか、各地域のエッジに分散させるお話につながるようにしています。CDNとかクラウドは、各ベンダーが競っていろんな新規サービスをどんどん出している状態なので最大公約数的になってしまっていますが「クラウドを使ったインフラ仕事をするにあたって基礎知識として知っておくとAWSやGCPのドキュメントを読むのが捗る」知識に絞って紹介しています。</p><h1 id="ぜひReal-World-HTTPを（部分的に）打ち倒す本が出てほしい"><a href="#ぜひReal-World-HTTPを（部分的に）打ち倒す本が出てほしい" class="headerlink" title="ぜひReal World HTTPを（部分的に）打ち倒す本が出てほしい"></a>ぜひReal World HTTPを（部分的に）打ち倒す本が出てほしい</h1><p>この本は、自分が読みたかった本がなかったので書き始めたというのが出発点です。今回の改訂で追加した内容も、仕事や趣味でコードを書くにあたって調べた内容とかをissueに記録しといて、それを元ネタにしたものが多数です。そのおかげか編集の瀧澤さんとは「またReal World HTTPに書いたネタが役立ってしまった」みたいなことをよく会話しておりました。その会話は今回、素敵な帯の文言にしていただきました。</p><img src="/images/20200421/photo_20200421_01.jpeg"><p>クラウドも、前職DeNAも今は大々的に使っているようですが、僕の在籍中はオンプレでデータセンターを安定に運用しきっていて（これはこれですごいノウハウ）、僕はAWSやらGCPに触れる機会はありませんでした。フューチャーに転職してきて、数カ月ごと（毎月？）に新規案件が立ち上がるという環境の中、クラウド環境構築がかなり身近になったので追加する気持ちになったというのもあります。</p><p>そのようなアプリケーションを作る開発者としての目線で見えている世界というのはやはり偏りはあると思っています。</p><p>頭の中にウェブの世界で出てくる技術を一通り網羅して地図を作るというコンセプトなので、ひたすら広く触れていくという本書の基本スタンスは今後も変わらないものの、狭く深い領域もいくつも出てきています。この特定技術を深めまくってページ数を増やすのは読む側も辛かろう、と思います。書くのも辛いです。</p><p>HTTP/2のフレームは後藤ゆきさん著の<a href="https://www.amazon.co.jp/dp/4865941770" target="_blank" rel="noopener">細かく紹介している本</a>がすでに出ています。QUICのフレームは、本書の原稿が固まる直前に出版された<a href="https://www.lambdanote.com/collections/n/products/nmonthly-vol-2-no-1-2020" target="_blank" rel="noopener">ｎ月刊ラムダノート</a>（僕も寄稿している）に西田佳史さんによる紹介記事があり、本書でもそちらにdelegateしています。QUICは今後いろいろな通信の土台になっていくもので、それ単独で書籍になりうるものだと思います。それ以外にもWebRTCとかも。ぜひそっちにフルコミットされているエンジニアの方々に書いてほしいです。僕も読みたいです。</p><p>さきほど書いたChromeのみでガンガン作られている、エッジなものだけを抜粋した本とかきっと面白いと思います。まあ変化が激しすぎて、Chromeのカンファレンスが一次情報、みたいな感じになってしまうんでしょけども。</p><h1 id="校了後も追加したい内容は増えていっている"><a href="#校了後も追加したい内容は増えていっている" class="headerlink" title="校了後も追加したい内容は増えていっている"></a>校了後も追加したい内容は増えていっている</h1><p>書籍の特性上、完成することはなく、古くなる部分が出てきてしまうのは仕方がない面があります。</p><p>ここ数ヶ月のプライバシーの扱い、例えば<a href="https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/" target="_blank" rel="noopener">ファーストパーティークッキーやローカルストレージなども7日で消える話</a>とかは原稿が固まったあとのお話ですので、本文に入れることはできていません。これ自体はブラウザ本体にパスワード管理が内蔵され、ブラウザにユーザー情報を持ち、プロファイルが同期されるという世界にあっては、あんまり問題にならないのかな、というのが個人的見解です。切れたとしても、ユーザーIDとパスワードがすでに埋め込まれたログインフォームが出てきて、OKボタンを押すだけであれば、守られるプライバシーと天秤にかければ十分リーズナブルだと思いますし。そうなると、ブラウザのプロファイルの同期とかパスワード管理も説明しなきゃな、と思ったりもするわけですが。</p><p>それ以外にも、X-Forwerded-Forの説明はしたけど、ユーザーのIPの取得は紹介してなかったなぁ、とか世の中の話題を見て追加したいネタもまた育っていたりしますし、会社のチャットで、CORSのプリフライトリクエスト（OPTIONメソッド）は認証なしでOKにしておかないとCORSのやりとりが失敗するというのを見て、なるほどぉ、と思ったりもあります。</p><p>このように本屋に並ぶ時点でも、新しい情報は続々と出ているわけですし、世の中でプログラミングしていて「これはすごい」という落とし穴に落ちる人も続々登場しているわけですが、本書が初版のときから目指していた「今後新しい知識が出てきた場合も、この本を読めばキャッチアップが素早くできる」という価値は変わらないと思います。</p><h1 id="今後のReal-World-HTTP"><a href="#今後のReal-World-HTTP" class="headerlink" title="今後のReal World HTTP"></a>今後のReal World HTTP</h1><p>追加した内容のところにも書いたのですが、キラキラした新しい仕様ばかりを取り上げるつもりは今までもなく、今後もReal Worldの名の通り、もっと泥臭い、みなさんがこれから落ちる予定の落とし穴を先に埋めていくような本を目指してさらに拡充して、「読んでてよかった！」を増やしていきたいと思います。HTTP/2の策定前にはQUICはすでに実践投入されていたわけですが、現在そのポジションにあたるものはないので、HTTP/4がすぐに来ることはないかなと思いますが、出なかったとしても（売れている限りは）改訂が止まることはないかと思います。</p><p>もちろん、増やすだけではなく、TRACEメソッドのように、ブラウザ側で対策されて、覚えておいても一円の利益にもならないようになったものは詳細情報はどんどん削っていく予定です。近年では、HTTPに限らず、何か情報を得ようとすると新旧入り混じった情報が大量に出てきます。現在でも考慮すべきなのかそうじゃないのか、そのフィルタリングのために知識が必要という状態です。情報の提供よりも、本当に必要なものだけに情報を絞るというのが専門家の価値かなと思います。ページ数を1.5倍にしといてなんですが、今後も削れるところは削って行こうと思います。</p><p>ついでに、ミニ版も、年内には更新したいなと思っています。</p><h2 id="関連ページ"><a href="#関連ページ" class="headerlink" title="関連ページ"></a>関連ページ</h2><ul><li><a href="https://turky-in-the.blogspot.com/2020/04/real-world-http.html" target="_blank" rel="noopener">turky in the blogger: 『Real World HTTP』が約三年ぶりに改訂されました</a>: 編集をしてくださった瀧澤さんのブログエントリーです。</li></ul><hr><p>関連ページ:</p><ul><li><a href="/articles/20190410/">Real World HTTPミニ版リリース記念勉強会の実施報告</a></li><li><a href="/articles/20170704/">インフラ入門vol.2(ネットワーク)</a></li><li><a href="/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873119038/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Real World HTTP 第2版&lt;/a&gt;が2020/04/20出版されました。第2版が出版さ
      
    
    </summary>
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="Book" scheme="https://future-architect.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>ServiceNow+Terraform(+Go) によるインフラ構築自動化</title>
    <link href="https://future-architect.github.io/articles/20200416/"/>
    <id>https://future-architect.github.io/articles/20200416/</id>
    <published>2020-04-16T12:30:49.000Z</published>
    <updated>2020-04-28T01:17:30.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGのDXユニットの西田です。前職ではServiceNowというaPaaS上でのアプリケーション開発をしておりました。現在は、GCPインフラの設計・構築をTerraform, Ansibleを利用して開発しております。GCP, ServiceNow ともに資格を持っています。</p><p>さて、皆さん、ServiceNow(以降：SNOW)というSaaSはご存知でしょうか？Salesforceと非常によく似ておりますが、米国発の SaaS, aPaaS サービスです。米国では割とポピュラーなサービスとして位置づけられていますが、日本ではまだまだです。が、伸び率は今年度は4割近くと、利用ユーザがすごい勢いで伸びています。そんな中、お客様内でSNOWを利用していて、それと関連する領域をFutureが担当するケースも増えてくるかと思いますので、今回は本ブログでSNOWについて少しだけ紹介したいと思います。SNOW とは？の説明は、言葉だけだと概念過ぎてわかりづらいので、現状、<strong>私が直面している課題の解決案ベースで解説</strong>していきたいと思います。</p><h1 id="課題設定"><a href="#課題設定" class="headerlink" title="課題設定"></a>課題設定</h1><ul><li>課題①<ul><li>昨今、会社内でのITシステムの開発体制って、以下の様なケースが多くないですか？<ul><li>事業部門がアプリケーション開発ベンダを直接雇っている。情シス部門は関知していない。</li><li>情シス部門（インフラ部門）はインフラのみ（主にサーバ）を提供する。</li><li>セキュリティ部門（or 品質保証部）が別で存在し、それらの監査・チェックを担当している。</li></ul></li><li>インフラの準備は、組織が分かれているため、<strong>組織間の仕事の受け渡しが主に打合せ &amp; エクセル &amp; メール</strong>で発生している。</li><li>現状、これらの組織間調整がとてもレガシーで非効率である事はみんな課題意識はあるが、解決方法がよくわからない。</li></ul></li><li>課題②<ul><li><strong>インフラ構築の依頼作業は単純作業が多く、6割方はコピー＆ペーストして名前を変える</strong>程度。</li><li>設計が必要なインフラ構築だけにリソースを割きたい。</li></ul></li></ul><h1 id="ソリューションの概要"><a href="#ソリューションの概要" class="headerlink" title="ソリューションの概要"></a>ソリューションの概要</h1><p>上記のすべての問題を解決出来るわけではないですが、SNOW と Terraform を使った自動化の仕組みを例に取って、PoCレベルで組んでみます。各製品/ツールの役割分担は以下です。</p><ul><li>SNOW：人の動き（リクエスト、承認フロー）を自動化する</li><li>Terraform：インフラの構築を自動化する</li><li>Go：インターフェース役</li></ul><img src="/images/20200416/photo_20200416_01.png"><h3 id="作るコンポーネント（上の図の番号と紐づいています）"><a href="#作るコンポーネント（上の図の番号と紐づいています）" class="headerlink" title="作るコンポーネント（上の図の番号と紐づいています）"></a>作るコンポーネント（上の図の番号と紐づいています）</h3><ol><li>SNOW の Service Catalog を利用し、準備するインフラをメニュー化する（簡単な＆頻繁なリクエストのみ）</li><li>Terraform の各種実行と、承認を順番に実施するワークフローを実行するFlowDesignerを作る。</li><li>Infra構築を担う Terraform は、GCP Project 単位にディレクトリを切り、inventory 書き換えだけで terraform plan, terraform apply が出来るファイル構成にする。（地味にこれが一番頭を使いました…）</li><li>FlowDesigner からの API に応対し、Terraform の inventory を作り、コマンドの実行結果を返す API-SV を Go で作る。</li></ol><p>4に関しては、<strong>SNOW の API リファレンスのサンプルコードは基本 Python</strong> なので、そっちの方がベターです。本記事では、単にGoを書きたかったので、Goを採用しています。<br>また、最初に申し上げておきますが、分量の関係で全ての実装方法を画像やコードで丁寧に記載する事が難しいです。もちろん核となる箇所は極力丁寧に記載していきます。</p><h3 id="本記事で取り上げるインフラ構築のシチュエーション"><a href="#本記事で取り上げるインフラ構築のシチュエーション" class="headerlink" title="本記事で取り上げるインフラ構築のシチュエーション"></a>本記事で取り上げるインフラ構築のシチュエーション</h3><p><strong>アプリチームからのインスタンス構築依頼を受けてGCEを用意</strong> というシチュエーションを例にします。以下が前提です。</p><ul><li>GCE のマシンタイプやリージョン・ゾーンなどは基本パターンが存在するものとする。<ul><li>n1-standard-1, asia-northeast1-a, centos-7 など</li></ul></li><li>プロジェクトはすでに存在している。</li><li>よって、プロジェクト名・インスタンス名、くらいしかユーザに指定させるパラメータがない。</li></ul><p>実装方法にそこまで興味がない方は、<a href="/articles/20200416/#%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D">動作確認</a> だけご覧になれば OK です。<br>っていうかむしろ、先に <a href="/articles/20200416/#%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D">動作確認</a> を見た方がゴールが明確化して読みやすくなるのでおススメです。</p><h1 id="1-インフラ構築のリクエストをメニュー化する-SNOW"><a href="#1-インフラ構築のリクエストをメニュー化する-SNOW" class="headerlink" title="1. インフラ構築のリクエストをメニュー化する @ SNOW"></a>1. インフラ構築のリクエストをメニュー化する @ SNOW</h1><p>本来ならこの<strong>メニュー化する対象の作業は何か？を決める</strong>のが非常に大変ですよね。今回は GCE のリクエストを例にします。</p><h2 id="SNOW-の環境準備"><a href="#SNOW-の環境準備" class="headerlink" title="SNOW の環境準備"></a>SNOW の環境準備</h2><p><a href="https://developer.servicenow.com/" target="_blank" rel="noopener">developerサイト</a> でインスタンスを準備。最新版のOrlando(出たばかり！)を使ってます。<br>払いだされたインスタンスに admin でログインしてください。<br>少しだけ宣伝交じりですが、この developer インスタンスはアカウントを作れば誰でも発行できます。6時間触らないと sleep、10日触らないと消えます（でもリストア可）。本来はライセンス費用を払わなければならないあらゆる機能が全て無料で使えるので、とてもおススメです！</p><h2 id="Service-Catalog-を作成する"><a href="#Service-Catalog-を作成する" class="headerlink" title="Service Catalog を作成する"></a>Service Catalog を作成する</h2><h3 id="Category-の作成"><a href="#Category-の作成" class="headerlink" title="Category の作成"></a>Category の作成</h3><p><code>Maintain Categories</code>をクリックし、Newを押下する。<br><img src="/images/20200416/1.png" class="img-middle-size" style="border:solid 1px #000000"></p><h3 id="item-の作成"><a href="#item-の作成" class="headerlink" title="item の作成"></a>item の作成</h3><p><code>Maintain Items</code> をクリックし、Newを押下する。<br>前述の通り、プロジェクトとインスタンス名をvariablesに設定します。この例では、Projectはカスタムテーブルを作って参照形式にしました。<br><img src="/images/20200416/2.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/3.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/4.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>ちなみに、色んなパトロールの方から『Application scopeは別で切るべきだ』と絶対に言われますが、本来なら私もそうします。今はそこは本質じゃないからGlobalのまま行きます。</p><h1 id="2-Terraform-Server-にリクエストを送り、各種承認を回すFlowDesigner-SNOW"><a href="#2-Terraform-Server-にリクエストを送り、各種承認を回すFlowDesigner-SNOW" class="headerlink" title="2. Terraform Server にリクエストを送り、各種承認を回すFlowDesigner @ SNOW"></a>2. Terraform Server にリクエストを送り、各種承認を回すFlowDesigner @ SNOW</h1><p>Flow Designer の前に、Terraform の実行結果を格納するテーブルを作っておきましょう。作ったのはこんな感じです。<br><img src="/images/20200416/4.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/5.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>それではいよいよ Flow Designer です。<code>Flow Designer</code> → <code>Designer</code> をクリック。右上のNew で新しい Flow を作ります。<br>以下の様にフローを組みます。スペースの関係で、細かいパラメータまでは取っていませんが、大枠の処理をコメントで書き込みました。<br><img src="/images/20200416/photo_20200416_02.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>Terraform Server に送るためのアクションの定義は以下です。大した事やっていません。<br><img src="/images/20200416/7.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/8.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/9.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>最後に作った Flow Designer を GCE インスタンスのメニューに紐づけます。<br><img src="/images/20200416/10.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>これで SNOW の準備は終わりです。大した事はなかったです。</p><h1 id="3-Terraform-のディレクトリとファイル構成-Terraform-Server"><a href="#3-Terraform-のディレクトリとファイル構成-Terraform-Server" class="headerlink" title="3. Terraform のディレクトリとファイル構成 @ Terraform Server"></a>3. Terraform のディレクトリとファイル構成 @ Terraform Server</h1><p>さて、地味に一番苦労した Terraform の構成です。何が難しかったかというと…</p><ul><li>自動的に構築対象のインスタンス（インベントリ）が増えるのに対して、GCE の tf ファイル自体を Go が作るのは簡単だが、それだと可読性が著しく下がり、同じプロジェクトに対して個別対応が入った際に、運用者にかなりの負担を強いる</li><li>よって、tfファイルの定義はメニューに対して1つだけ用意し、インベントリ分だけループしてインスタンスを作るファイル構成にしたい。</li><li>一方で、構築メニューは互いに依存させたくないので、GCE, GCS 毎にインベントリファイルを持たせたい。</li><li>しかし、tfvars は 1 ファイルしか許容されていないので、temporary として各メニュー毎に tfvars を作り、それをファイル結合する方法を選択した。</li></ul><p>…言葉だけじゃわからないですよね。。ディレクトリ構成は以下です。</p><figure class="highlight bash"><figcaption><span>tree</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/terraform</span><br><span class="line">├── project<span class="_">-a</span></span><br><span class="line">│   ├── compute_instance.tf         <span class="comment"># ← GCEのインスタンス定義。</span></span><br><span class="line">│   ├── storage_bucket.tf   </span><br><span class="line">│   ├── terraform.tfvars            <span class="comment"># ← 自動生成されるterraform の変数ファイル</span></span><br><span class="line">│   ├── tfplan.sh                   <span class="comment"># ← plan実行用。bashの色を付けるための特殊文字を消すsedがパイプされている</span></span><br><span class="line">│   ├── tfapply.sh                  <span class="comment"># ← 同上</span></span><br><span class="line">│   ├── variables.tf                <span class="comment"># ← メニュー化しているリストを定義。メニューが変わらない限りstatic</span></span><br><span class="line">│   ├── vars                        <span class="comment"># ← Go が使う、インベントリファイル組み立ての作業用dir</span></span><br><span class="line">│   │   ├── compute_instance.tfvars <span class="comment"># ← GCE のインベントリリスト</span></span><br><span class="line">│   │   ├── filejoin.sh             <span class="comment"># ← cat ./*.tfvars &gt; ../terraform.tfvars と書かれているだけ</span></span><br><span class="line">│   │   ├── project.tfvars          <span class="comment"># ← GCP Project の変数定義ファイル</span></span><br><span class="line">│   │   └── storage_bucket.tfvars   <span class="comment"># ← GCS のインベントリリスト</span></span><br><span class="line">│   └── version.tf</span><br><span class="line">└── project-b</span><br><span class="line">    ├── 同上</span><br></pre></td></tr></table></figure><p>コアな部分をまずは説明しますね。</p><figure class="highlight bash"><figcaption><span>compute_instance.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"GCE_instances"</span> &#123;</span><br><span class="line">  count        = length(var.gce_instances_list)</span><br><span class="line">  name         = var.gce_instances_list[count.index]</span><br><span class="line">  machine_type = <span class="string">"n1-standard-1"</span></span><br><span class="line">  zone         = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  tags         = [<span class="string">"app01"</span>]</span><br><span class="line">  project      = var.project.id</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    auto_delete = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">source</span>      = google_compute_disk.GCE_disk[count.index].self_link</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    network       = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  metadata = &#123;</span><br><span class="line">    <span class="built_in">enable</span>-oslogin = <span class="string">"true"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_disk"</span> <span class="string">"GCE_disk"</span> &#123;</span><br><span class="line">  count   = length(var.gce_instances_list)</span><br><span class="line">  name    = <span class="string">"<span class="variable">$&#123;var.gce_instances_list[count.index]&#125;</span>-disk"</span></span><br><span class="line">  project = var.project.id</span><br><span class="line">  zone    = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  <span class="built_in">type</span>    = <span class="string">"pd-standard"</span></span><br><span class="line">  size    = 30</span><br><span class="line">  image   = <span class="string">"centos-cloud/centos-7"</span></span><br><span class="line"></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    ignore_changes = [labels]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>variables.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">variable <span class="string">"project_suffix"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"project"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"gce_instances_list"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"gcs_buckets_list"</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>terraform.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gce_instances_list = [</span><br><span class="line">  <span class="string">"test-instance-11"</span></span><br><span class="line">]</span><br><span class="line">project_suffix = <span class="string">"project-a"</span></span><br><span class="line">project = &#123;</span><br><span class="line">  name = <span class="string">"project-a"</span></span><br><span class="line">  id   = <span class="string">"project-a"</span></span><br><span class="line">&#125;</span><br><span class="line">gcs_buckets_list = [</span><br><span class="line">  <span class="string">"test-bucket01"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>まず、<strong>GCE の定義はこのメニュー化された 1 つの tf ファイルだけ</strong>です。それを変数のリスト分だけ loop で回してリソースを作っています。<a href="https://future-architect.github.io/articles/20190819/">前原さんの記事</a>を参考にしています。</p><p>ただ今回は、この <strong>loopの要素を Go が自動で生成しなければならない</strong> ということなんです。<br>そして、<strong>GCE と GCS は別メニューだから、お互いに干渉したくない</strong> ということなんです。<br>Go で書き切る手段もあったんですが、<strong>実装をリーズナブルにするためにファイルを分けて bash で結合する方法を選択</strong>しました。それが vars ディレクトリ配下のお話です。</p><figure class="highlight bash"><figcaption><span>vars/compute_instance.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gce_instances_list = [</span><br><span class="line">  <span class="string">"test-instance-11"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>vars/storage_bucket.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcs_buckets_list = [</span><br><span class="line">  <span class="string">"test-bucket01"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>vars/project.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">project_suffix = <span class="string">"project-a"</span></span><br><span class="line">project = &#123;</span><br><span class="line">  name = <span class="string">"project-a"</span></span><br><span class="line">  id   = <span class="string">"project-a"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>vars/filejoin.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat *.tfvars &gt; ../terraform.tfvars</span><br></pre></td></tr></table></figure><p>よって、Go は GCE, GCS のメニュー毎に対応する vars/ 配下の tfvars ファイルにだけ要素を追加し、filejoin.sh を叩けば Terraform 系のファイルは揃うという事になります。Go でファイル操作は頑張らない（笑）</p><h1 id="4-FlowDesigner-からのリクエストを応じて-Terraform-を実行し、結果を返す-Terraform-Server"><a href="#4-FlowDesigner-からのリクエストを応じて-Terraform-を実行し、結果を返す-Terraform-Server" class="headerlink" title="4. FlowDesigner からのリクエストを応じて Terraform を実行し、結果を返す @ Terraform Server"></a>4. FlowDesigner からのリクエストを応じて Terraform を実行し、結果を返す @ Terraform Server</h1><p>さて、SNOW と Terraform の間をつなぐ API-SV の Go です。<br>処理を整理すると、以下です。</p><ol><li>SNOW(FlowDesigner)からの Rest API の受け口を作る。</li><li>SNOW から受け取るパラメータは、Project名とインスタンス名だけである。（SNOW の CMDB を本格利用すればそうでもないですが、構成管理は Terraform でコード化されているから、SNOW ではやらない。フロントエンドに徹する。）</li><li>Terraform の Project ディレクトリの GCE, GCS に対応する tfvars ファイルに受け取ったリソース名を書き込む。</li><li>vars/filejoin.sh を実行する。</li><li>terraform plan を実行し、結果を返す。</li></ol><p>始めに言い訳しておきますが、初めて Go を書いた関係で、あまりソースコードには自信がありません。<br>本質的に必要な部分だけを書いているので、エラー処理・認証・暗号化の処理も実装していないので、検証用途と割り切って見てください。</p><figure class="highlight golang"><figcaption><span>api-sv.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httputil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TF_PATH = <span class="string">"/terraform"</span></span><br><span class="line"><span class="keyword">const</span> TF_VARDIR = <span class="string">"vars"</span></span><br><span class="line"><span class="keyword">const</span> TF_GCE_TFVARS = <span class="string">"compute_instance.tfvars"</span></span><br><span class="line"><span class="keyword">const</span> TF_GCS_TFVARS = <span class="string">"storage_bucket.tfvars"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GCEInstanceRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Action      <span class="keyword">string</span> <span class="string">`json:"action"`</span></span><br><span class="line">GCEInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">GCPProjectName  <span class="keyword">string</span> <span class="string">`json:"GCP_project_name"`</span></span><br><span class="line">GCPInstanceName <span class="keyword">string</span> <span class="string">`json:"GCE_instance_name"`</span></span><br><span class="line">&#125; <span class="string">`json:"GCE_instance"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/gce_instance"</span>, handleGCEInstance)</span><br><span class="line"><span class="comment">// http.HandleFunc("/gcs_bucket", handleGCSBucket) // スペースの関係で一旦作りません…m(_ _)m</span></span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /gce_instance に POST された時に実行される関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleGCEInstance</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request body のパースと値の取得</span></span><br><span class="line">b, err := ioutil.ReadAll(r.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> r.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req GCEInstanceRequest</span><br><span class="line"><span class="keyword">if</span> err = json.Unmarshal(b, &amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Debug用</span></span><br><span class="line">fmt.Printf(<span class="string">"Request: %+v"</span>, req)</span><br><span class="line"></span><br><span class="line"><span class="comment">// plan の時だけ、gce 用の terraform の tfvars に追加する</span></span><br><span class="line"><span class="keyword">if</span> req.Action == <span class="string">"plan"</span> &#123;</span><br><span class="line">addGCETfvars(req.GCEInstance.GCPProjectName, req.GCEInstance.GCPInstanceName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strtemp := execTF(req.GCEInstance.GCPProjectName, req.Action)</span><br><span class="line">fmt.Fprintf(w, strtemp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// terraform の gce instance の tfvars にリクエストされた instance を追加する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addGCETfvars</span><span class="params">(project, gce_instance <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">tfvarpath := TF_PATH + <span class="string">"/"</span> + project + <span class="string">"/"</span> + TF_VARDIR</span><br><span class="line">tfvarsFile := TF_PATH + <span class="string">"/"</span> + project + <span class="string">"/"</span> + TF_VARDIR + <span class="string">"/"</span> + TF_GCE_TFVARS</span><br><span class="line"></span><br><span class="line">raw, err := ioutil.ReadFile(tfvarsFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラー処理</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(tfvarsFile + <span class="string">" read success"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最初の"["までの文字列を捨て、arrayに変換</span></span><br><span class="line">filetext = filetext[strings.Index(<span class="keyword">string</span>(raw), <span class="string">"["</span>):]</span><br><span class="line"><span class="keyword">var</span> strarr []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal([]<span class="keyword">byte</span>(filetext), &amp;strarr); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラー処理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// すでにインスタンスが登録されている場合のエラー処理は省略する</span></span><br><span class="line"><span class="comment">// 新しいインスタンスを登録する。</span></span><br><span class="line">strarr = <span class="built_in">append</span>(strarr, gce_instance)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output to file</span></span><br><span class="line">file, err := os.Create(tfvarsFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラー処理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// gce の tfvars を出力する。</span></span><br><span class="line">output := <span class="string">"gce_instances_list = [\n"</span></span><br><span class="line"><span class="keyword">for</span> ii := <span class="number">0</span>; ii &lt; <span class="built_in">len</span>(strarr)<span class="number">-1</span>; ii++ &#123;</span><br><span class="line">output = output + <span class="string">"  \""</span> + strarr[ii] + <span class="string">"\",\n"</span></span><br><span class="line">&#125;</span><br><span class="line">output = output + <span class="string">"  \""</span> + strarr[<span class="built_in">len</span>(strarr)<span class="number">-1</span>] + <span class="string">"\"\n]\n"</span></span><br><span class="line">file.Write(([]<span class="keyword">byte</span>)(output))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各varsファイルを連結して、terraform.tfvarsにまとめる。</span></span><br><span class="line">cmd := exec.Command(<span class="string">"sh"</span>, <span class="string">"filejoin.sh"</span>)</span><br><span class="line">cmd.Dir = tfvarpath</span><br><span class="line">out, err := cmd.Output()</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(out))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// terraform plan を実行して、stdout を戻り値で返す関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">execTF</span><span class="params">(project, action <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">tfpath := TF_PATH + <span class="string">"/"</span> + project</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellscript <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> action == <span class="string">"plan"</span> &#123;</span><br><span class="line">shellscript = <span class="string">"tfplan.sh"</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> action == <span class="string">"apply"</span> &#123;</span><br><span class="line">shellscript = <span class="string">"tfapply.sh"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmd := exec.Command(<span class="string">"sh"</span>, shellscript)</span><br><span class="line">cmd.Dir = tfpath</span><br><span class="line">out, _ := cmd.Output()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>tfplan.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform plan -no-color</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>tfapply.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply -auto-approve -no-color</span><br></pre></td></tr></table></figure><p><code>-no-color</code> オプションで terraformコマンドの出力する特殊文字を無効化して、単純な文字列にしています。</p><p>また、わざわざshを作り、それをGoで実行する様にしたのは、複数の引数指定でos/execがうまく動作しなかったからです。<a href="https://qiita.com/tng527/items/c44b943da93041a8355b" target="_blank" rel="noopener">こちらの記事</a>の最後を参考にしました。</p><h1 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h1><h3 id="ユーザの操作"><a href="#ユーザの操作" class="headerlink" title="ユーザの操作"></a>ユーザの操作</h3><p>Service Catalog のダッシュボードに、GCP infra の widget を追加すると、以下の様になります。<br><img src="/images/20200416/u1.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u2.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>画面ではGCSも追加しています。手順はGCEの時と全く同じです。<br><img src="/images/20200416/u3.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u4.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>Shoppingっぽくなっているのは、あんまり気にしないでください。SaaSで細部を気にし始めると工数が跳ね上がります。（※初期構築だけ考えるとそうでもないですが、保守や機能拡張を考えると雪だるま式に増えます。）</p><p>これだけでユーザのリクエストは完了です。本当にパラメータを2つ入れるだけ。</p><h3 id="リクエストの状態を確認"><a href="#リクエストの状態を確認" class="headerlink" title="リクエストの状態を確認"></a>リクエストの状態を確認</h3><p>リクエストされたアイテムを見ると、自分の上司で止まっているのが確認できます。<br><img src="/images/20200416/u5.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u6.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>FlowDesingnerは非常に強力な機能で、すべての実行ログを記録していますので、それで状態を確認してみます。すると、確かに1つ目のapprovalで止まっていますね。<br><img src="/images/20200416/u7.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>Terraform の実行ログを見てみましょう。この結果からすると、良さそうですね。<br><img src="/images/20200416/u8.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u9.png" class="img-middle-size" style="border:solid 1px #000000"></p><h3 id="承認を回す"><a href="#承認を回す" class="headerlink" title="承認を回す"></a>承認を回す</h3><p>それじゃあ、上司のアカウントでログインして、承認しましょう。<br><img src="/images/20200416/u10.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u11.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>1つ進みましたね。画像はつけてないですが、この画面からTerraformの実行plan結果のレコードには遷移出来るので、上司も確認できます。<br>そんな感じで、みんなに承認してもらいましょう。</p><img src="/images/20200416/u12.png" class="img-middle-size" style="border:solid 1px #000000"><p>なぜか名前に既視感がありますねぇ…不思議…</p><h3 id="apply-の結果を見てみる"><a href="#apply-の結果を見てみる" class="headerlink" title="apply の結果を見てみる"></a>apply の結果を見てみる</h3><p>これで承認が回ったので GCE がデプロイ（アプリ-Tにデリバリー）されているはずです。早速関連リストからTerraformの実行ログを見てみましょう。<br><img src="/images/20200416/u13.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u14.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u15.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>来ましたね！同時実行とか、変更・削除はどうするのかとか色々ありますが、とりあえずPoCとしては完成！</p><h1 id="結局-ServiceNow-とは何か？"><a href="#結局-ServiceNow-とは何か？" class="headerlink" title="結局 ServiceNow とは何か？"></a>結局 ServiceNow とは何か？</h1><p>ServiceNow社的には、以下をメッセージとして強く主張しています。</p><ul><li>昨今、消費者に対して提供されている顧客体験は非常に良くなっている(UX, CX)。</li><li>一方で、企業内の社内システムを含む従業員体験は全く乖離している。自動化は限定的で仕事は手渡し・対面ベース。</li><li>それを同じレベルまで簡単に持っていくのが ServiceNow である。</li></ul><p>本記事で取り上げた Service Catalog なんかはまさに当てはまりますよね。事業部門が使う備品の調達と同じ様なノリで GCP のクラウドリソースを注文できる仕組み。それがシステム化されており、承認行為と構築行為がシームレスに行われる。</p><p>通常この手の調達をしようと思ったら、インフラとしての申請＆承認行為と、セキュリティとしての申請＆承認行為、そして調達行為は分断されていて、それぞれの部門に対して申請だったり打ち合わせだったりで調整しないといけないですよね。</p><p>一方で、私が捉えているイメージは以下です。</p><p><strong>業務目線</strong></p><ul><li>複数担当者（特に別組織）間で行われる仕事の受け渡しを、簡単にワークフロー化してシステムに落とせる仕組み。<ul><li>厳密には ITOM, CMDB などそれに合致しない Plugin もあるが、ITSM, HR, ServiceCatalog など多くはこれ</li></ul></li></ul><p><strong>技術目線</strong></p><ul><li>DBのレコード変更をトリガに様々な処理を間に挟む処理を簡単に作れるプラットフォーム。最初のレコード変更がフロントエンドや API などで行われると、そこから他のテーブルへの CRUD や他の API を叩いて結果を導出するなどの仕組みを簡単に作れる。</li></ul><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回、私にとって最も実装が簡単だったのはSNOWでした。逆に一番大変だったのがGoでの実装です。ただ、こういう製品と製品の間に落ちる部分の処理って、どうしてもカスタム実装が必要になるんですよね。なので、実際のサービス連携を考えた際も同じ様な比率になるんじゃないかと考えています。<br>まだまだGithubやJenkinsなど課題は多々ありますが、まずは本質的なインフラ構築の自動化を中心に置いて実装してみました。今回利用した製品/サービスは別に他のなんでも代替は可能だと思ってますので、考え方の1つとして捕えてもらえれば幸いです。</p><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/tags/GCP%98A%8D%DA/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGのDXユニットの西田です。前職ではServiceNowというaPaaS上でのアプリケーション開発をしており
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="ServiceNow" scheme="https://future-architect.github.io/tags/ServiceNow/"/>
    
      <category term="Workflow" scheme="https://future-architect.github.io/tags/Workflow/"/>
    
  </entry>
  
</feed>
