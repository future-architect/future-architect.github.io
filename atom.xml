<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Future Tech Blog - フューチャーアーキテクト</title>
  
  <subtitle>フューチャー開発者ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-05-13T00:29:01.802Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</title>
    <link href="https://future-architect.github.io/articles/20200513/"/>
    <id>https://future-architect.github.io/articles/20200513/</id>
    <published>2020-05-12T23:56:40.000Z</published>
    <updated>2020-05-13T00:29:01.802Z</updated>
    
    <content type="html"><![CDATA[<p>Pythonで書かれたアプリケーションをDockerイメージにする堅い方法の紹介です。イメージサイズを少しでも削ろう！とかではなくて実用性重視の方向です。今回は第一弾ということで、Debianベースのイメージを使う方法を紹介します。</p><h1 id="Pythonのベースイメージ選び"><a href="#Pythonのベースイメージ選び" class="headerlink" title="Pythonのベースイメージ選び"></a>Pythonのベースイメージ選び</h1><p>イメージ作成にはベースイメージ選びからですが、基本的には次の2つかなと思います。Pythonバージョンは機械学習だと3.7がよく使われていると思いますが、5/8にTensorflowが3.8向けのwheelとセットで新バージョンを出したので、そろそろ3.8になっていきますかね。本記事も3.8にしますが、3.7でも動作します。</p><ul><li>python:3.x-buster</li><li>python:3.x-slim-buster</li></ul><p>イメージのOSには以下のような種類があります。</p><table><thead><tr><th align="center">名前</th><th align="center">どんなもの？</th></tr></thead><tbody><tr><td align="center">buster</td><td align="center">Debian 10で処理系とかいっぱいインストール済み</td></tr><tr><td align="center">buster-slim</td><td align="center">Debian 10で処理系なしの実行環境用</td></tr><tr><td align="center">stretch</td><td align="center">Debian 9で処理系入り</td></tr><tr><td align="center">stretch-slim</td><td align="center">Debian 9で処理系なしの実行環境用</td></tr><tr><td align="center">alpine</td><td align="center">元はフロッピーで起動するファイルサイズ重視のディストリビューション</td></tr><tr><td align="center">windowsservercore</td><td align="center">Windows。LinuxやmacOS上では動作しない</td></tr></tbody></table><p>BusterとかStretchという名前が見慣れない方もいるかもしれませんが、これはLinuxディストリビューションとしてシェアの大きな<a href="https://www.debian.org/releases/index.en.html" target="_blank" rel="noopener">Debianのコードネーム</a>です。</p><p>Debianバージョンが少し古いStretchの方がちょびっとサイズが小さかったりはしますが、まあ実用的にはサポートが長い方がいいですよね。slimを使ってGCCとかのコンパイラを自前でダウンロードしている記事とかもたまに見かける気がしますが、マルチステージビルドであれば、そんなにケチケチしなくていいのと、パッケージダウンロードは逐次処理なので遅く、処理系が入ったイメージのダウンロードの方が高速です。並列で処理されるし、一度イメージをダウンロードしてしまえば、なんどもビルドして試すときに効率が良いです。また、多くのケースでネイティブのライブラリも最初から入っており、ビルドでトラブルに遭遇することはかなり減るでしょう。</p><p>Pythonユーザーは基本的にAlpineを選んではいけません。いろいろネガが大きいからです。</p><ul><li><a href="https://superuser.com/questions/1219609/why-is-the-alpine-docker-image-over-50-slower-than-the-ubuntu-image" target="_blank" rel="noopener">AlpineはUbuntuよりも50%以上遅い</a></li><li><a href="https://pythonspeed.com/articles/alpine-docker-python/" target="_blank" rel="noopener">Alpineにするとビルド時間が50倍になる</a></li></ul><p>最初の項目。なぜ遅いかというと、Alpineのアプリが使うlibc(musl)のメモリ周りアロケートの実装が、性能よりもライブラリのサイズ重視のシンプルでPythonの使い方と合わなくて速度が出ないとのこと。これはアプリケーションの実装次第なのでjemallocを使っているRubyとかの人は関係ないでしょうし、PostgreSQLとかNginxはAlpine版でも速度は変わらないようです。性能が2倍違うということは、クラウドでアプリケーションを動かすときはメモリさえ許せば一つ下のインスタンスでいいわけで、お金にも利いてきますよね。</p><p>後者の速度の問題ですが、PyPIはLinux向けにはmanylinux1という形式でバイナリを提供しており、DebianでもRedHatでも高速にインストールできます。しかし、この形式はAlpineには対応していないため、C拡張を使うライブラリを使うと、Dockerイメージのビルド時間が伸びまくってしますわけです。</p><p>それでも、どうしても、PurePythonで処理速度はどうでも良い/お金がたくさんある、あるいはC拡張を使う場合でも人生を犠牲にしてでも、イメージサイズをどうしても減らしたいみたいな選ばれし者はAlpineを使う感じでしょうかね。</p><h1 id="Pythonのマルチステージビルド"><a href="#Pythonのマルチステージビルド" class="headerlink" title="Pythonのマルチステージビルド"></a>Pythonのマルチステージビルド</h1><p>マルチステージビルドで環境を作っていきます。</p><p>アプリケーションはDjangoのチュートリアルの最初の1ステップだけ作ったものをuwsgiを使ってデプロイすることを想定します。フォルダ＆ファイル構成はこんな感じ。</p><img src="/images/20200513/1.png" class="img-middle-size"><p>依存パッケージは今回はこれだけです。ただこのファイルは開発環境を設定するときに書くぐらいですね。あまり重要ではないです。</p><figure class="highlight plain"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django</span><br><span class="line">uwsgi</span><br></pre></td></tr></table></figure><p>実際にDockerの中で使うファイルはこちら。<code>pip install -r requirements.txt</code>で依存ライブラリと一緒にインストールした後に<code>pip freeze &gt; requirements.lock</code>で作成します。あらかじめvenvで環境を分けて置くと、ノイズが混ざらないので良いです。</p><figure class="highlight plain"><figcaption><span>requirements.lock</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">asgiref==3.2.7</span><br><span class="line">Django==3.0.5</span><br><span class="line">pytz==2020.1</span><br><span class="line">sqlparse==0.3.1</span><br><span class="line">uWSGI==2.0.18</span><br></pre></td></tr></table></figure><p>uwsgi用の設定はこちら。プロセス数とかスレッド数は適当に。</p><figure class="highlight ini"><figcaption><span>deploy/uwsgi.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">http</span> = <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></span><br><span class="line"><span class="attr">chdir</span> = /opt/app/mysite</span><br><span class="line"><span class="attr">wsgi-file</span> = mysite/wsgi.py</span><br><span class="line"><span class="attr">master</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">processes</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">threads</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">stats</span> = <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9191</span></span><br><span class="line"><span class="attr">uid</span> = uwsgiusr</span><br><span class="line"><span class="attr">gid</span> = uwsgiusr</span><br></pre></td></tr></table></figure><p>Dockerfileはこうなりました。slimの方にはlibxml2などがないので追加します。PostgreSQLのライブラリのlibpq5はまあおまけです。大抵ウェブアプリケーション作るときはPostgreSQLかMySQLは使うでしょうし。もし、使うライブラリがpure python、もしくはC拡張でもwheelによるバイナリ配布をしているパッケージのみであれば、ビルド用イメージも3.8-slim-busterにできます。slimを使っていても、もしライブラリを追加した瞬間にGCCが必要になっても、イメージを3.8-busterに変えるだけなので、このマルチステージビルドの構成は崩さない方が良いでしょう。お仕事であれば問題回避の速度が大事ですからね。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ここはビルド用のコンテナ</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-buster as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span> /opt/app</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span> requirements.lock /opt/app</span><br><span class="line"><span class="keyword">RUN</span> pip3 install -r requirements.lock</span><br><span class="line"></span><br><span class="line"><span class="comment"># ここからは実行用コンテナの準備</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim-buster as runner</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span> --from=builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages</span><br><span class="line"><span class="keyword">COPY</span> --from=builder /usr/local/bin/uwsgi /usr/local/bin/uwsgi</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span> apt update \</span><br><span class="line">  &amp;&amp; apt install -y libpq5 libxml2 \</span><br><span class="line">  &amp;&amp; apt-get clean \</span><br><span class="line">  &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span> useradd -r -s /bin/false uwsgiusr</span><br><span class="line"><span class="keyword">RUN</span> mkdir -p /opt/app/src/logs/app_logs</span><br><span class="line"><span class="keyword">RUN</span> touch /opt/app/src/logs/server.log</span><br><span class="line"><span class="keyword">RUN</span> chown -R uwsgiusr /opt/app/src/logs</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span> deploy/uwsgi.ini /opt/app</span><br><span class="line"><span class="keyword">COPY</span> mysite /opt/app/mysite</span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> uwsgiusr</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span> ["uwsgi", "--ini", "/opt/app/uwsgi.ini"]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t pytest .</span><br><span class="line">$ docker run -it --rm -p <span class="string">"8000:8000"</span> pytest</span><br></pre></td></tr></table></figure><p>ブラウザでアクセスするとうまくいきました。</p><img src="/images/20200513/2.png" class="img-middle-size"><h2 id="Pythonでどうやってマルチステージビルドを実現するのか"><a href="#Pythonでどうやってマルチステージビルドを実現するのか" class="headerlink" title="Pythonでどうやってマルチステージビルドを実現するのか"></a>Pythonでどうやってマルチステージビルドを実現するのか</h2><p>ポイントとしては、pip installしてできたライブラリを一式コピーして実行用のコンテナに写してます。uwsgiは別の場所にインストールされるので、それも個別にコピーします。</p><figure class="highlight dockerfile"><figcaption><span>今回使ったのはこちらの方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/lib/python3.8/site-packages /usr/<span class="built_in">local</span>/lib/python3.8/site-packages</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/bin/uwsgi /usr/<span class="built_in">local</span>/bin/uwsgi</span></span><br></pre></td></tr></table></figure><p>実はこの書き方を紹介している記事等はほとんどありません。ネットでよく見るPythonのマルチステージビルドの方法は次の方法です。</p><figure class="highlight dockerfile"><figcaption><span>こっちの方がよく見る</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /root/.cache /root/.cache</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> /build/requirements.txt /opt/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br></pre></td></tr></table></figure><p>この方法であれば、uwsgiのような別の場所に入る実行ファイルも自動で処理されるのできれいにうまくいくのですが、最終的なイメージに/root/.cacheのレイヤーが残ってしまいます。RUNによるレイヤーなら&amp;&amp;を駆使して削除できるのですが、これはCOPYで作られるレイヤーなので、今のDockerだけだとこの無駄は削除できないのですよね。</p><p>機械学習ライブラリもりもりなイメージだと、これだけで200MBぐらいの容量になったり（全体も1.2GBとかになりますが）。今のところsite-packages全部コピーの方法で問題はなさそうです。</p><h1 id="実行時に必要なライブラリがないと言われたら"><a href="#実行時に必要なライブラリがないと言われたら" class="headerlink" title="実行時に必要なライブラリがないと言われたら"></a>実行時に必要なライブラリがないと言われたら</h1><p>フルセットのbusterには開発者向けのライブラリ類も含めていろいろ入っているのでビルドが成功するも、slim側にライブラリがなくて実行時エラーになる可能性があります。実行時にライブラリがロードできないというエラーが出たら、<a href="https://packages.debian.org/search?lang=ja&arch=amd64&mode=filename&searchon=contents&keywords=libxml2.so.2" target="_blank" rel="noopener">こちらのサイト</a>にライブラリ名を入れて、それをインストールするのに必要なパッケージを探し、apt installの項目に追加してください。</p><img src="/images/20200513/3.png" class="img-middle-size"><p>Pythonだと関数の中でimportできます。名前空間を汚さないので、こちらの方が良いのかな、と思って僕も以前やっていましたが、ファイルのグローバルなところだけにimportがあると、ちょっとした実行すると必要なモジュールを全部読み込んでくれて、この手のロードエラーはすぐにわかります。関数内importはなるべく避けた方が良いでしょう（先日もそれで問題を見つけきれなかった）。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Pythonを仕事で使う人のための堅いイメージ作成について紹介しました。Alpineのような性能のネガもなく、イメージの作成の実行時間も少なく、残業時間が減らせる方法を選びました。次回は条件によっては使えないかもしれないのですが、使えたら効果抜群なdistroless/python3について紹介します。</p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20200422/">PyConJP 2019に登壇しました</a></li><li><a href="https://future-architect.github.io/articles/20200131/">AirflowのTips 11選</a></li><li><a href="https://future-architect.github.io/articles/20200212/">GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pythonで書かれたアプリケーションをDockerイメージにする堅い方法の紹介です。イメージサイズを少しでも削ろう！とかではなくて実用性重視の方向です。今回は第一弾ということで、Debianベースのイメージを使う方法を紹介します。&lt;/p&gt;
&lt;h1 id=&quot;Pythonのベ
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>日本製HeadlessCMSのmicroCMSを触ってみた</title>
    <link href="https://future-architect.github.io/articles/20200512/"/>
    <id>https://future-architect.github.io/articles/20200512/</id>
    <published>2020-05-12T00:48:20.000Z</published>
    <updated>2020-05-12T01:01:47.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして！TIG DXチーム　アルバイターの三村です．</p><p>普段は大学院生をしておりフューチャーには <a href="https://jobs.atcoder.jp/" target="_blank" rel="noopener">AtCoder Jobs</a> 経由でアルバイト採用していただき，5月でちょうど1年になります！ありがとう<a href="https://atcoder.jp/" target="_blank" rel="noopener">AtCoder</a>!!これまで</p><ul><li>Vue.jsでのフロントエンド画面作成</li><li>Docker上でlocalstackを用いたAWS用の技術検証</li><li>Goでメッシュ計算ツール作成</li><li>Pythonで性能検証用のダミー時系列データの生成</li></ul><p>などなどアルバイターですが幅広く様々なタスクをやらせてもらいました．<br>そして今回はHeadlessCMSを利用したタスクをやることになりました．私自身HeadlessCMSどころかCMSを聞いたことすら無かったので，初めてCMS使ってみるにあたって感じたことを共有出来たらと思い本記事を作成させていただいております．</p><h1 id="そもそもCMSって？"><a href="#そもそもCMSって？" class="headerlink" title="そもそもCMSって？"></a>そもそもCMSって？</h1><p>CMSは<strong>Content Management System</strong>の頭文字を取った略称で，文字通り「コンテンツを管理するシステム」のことです．</p><p>例えば素朴にwebコンテンツを作成しようとした場合，画面だけでもHTMLやCSS等の技術的なスキルが必要となります．一方でCMSを利用してwebコンテンツを作成すれば，技術的なスキルに依存することなくコンテンツの作成に注力することができます．<br>すなわちコンテンツ作成者は技術的なことは懸念せずにコンテンツの作成，管理にだけリソースが割くことができて嬉しいです．</p><p>具体的なCMSサービスには<a href="https://ja.wordpress.org/" target="_blank" rel="noopener">WordPress</a>が挙げられます．</p><h1 id="HeadlessCMS"><a href="#HeadlessCMS" class="headerlink" title="HeadlessCMS"></a>HeadlessCMS</h1><p>HeadlessCMSとはWikipediaに以下のようにあります．</p><blockquote><p>Whereas a traditional CMS typically combines the content and presentation layers of a website, a headless CMS is just the content component and focuses entirely on the administrative interface for content creators, the facilitation of content workflows and collaboration, and the organization of content into taxonomies. It doesn’t concern itself with presentation layers, templates, site structure, or design, but rather stores its content in pure format and provides access to other components (e.g. delivery front ends, analytics tools, etc.) through stateless or loosely coupled APIs.</p></blockquote><p><a href="https://en.wikipedia.org/wiki/Headless_content_management_system" target="_blank" rel="noopener">Wikipedia</a> より引用</p><p>要約すると以下のような感じでしょうか．</p><blockquote><p>従来のCMSがウェブサイトのコンテンツとプレゼンテーション層を組み合わせたものであるのに対し，HeadlessCMSはコンテンツの構成要素のみに焦点を当てている．プレゼンテーションレイヤー，テンプレート，サイト構造，デザインには関心がなく純粋な形式でコンテンツを保存しステートレスなAPIを通じて他のコンポーネントへのアクセスを提供する．</p></blockquote><p>すなわち，HeadlessCMSはフロントエンドとバックエンドを切り離して設計します．フロントエンドとバックエンド間はAPIを通じてコンテンツのやり取りをします．これによりフロントエンド側はデザインやレイアウトが固定されず高い自由度で開発が行えます．</p><p>これが前述のWordPressに代表されるCMSとの違いです．</p><h2 id="HeadlessCMSサービスの比較"><a href="#HeadlessCMSサービスの比較" class="headerlink" title="HeadlessCMSサービスの比較"></a>HeadlessCMSサービスの比較</h2><p>HeadlessCMSは数多くのサービスが存在しています．<br>ここでは代表的な3つのサービスの <a href="https://buttercms.com/" target="_blank" rel="noopener">butterCMS</a>， <a href="https://www.contentful.com/" target="_blank" rel="noopener">contentful</a>， <a href="https://microcms.io/" target="_blank" rel="noopener">microCMS</a> を比較してみたいと思います．</p><p>調査日: <strong>2020年5月8日時点</strong></p><table><thead><tr><th>性能/コスト</th><th>butterCMS</th><th>contentful</th><th>microCMS</th></tr></thead><tbody><tr><td>利用料金(月)</td><td>208$ Small Businessプラン</td><td>879$ Businessプラン</td><td>29,000円 Businessプラン</td></tr><tr><td>CMS管理画面からコンテンツの作成，更新，削除，参照</td><td>〇</td><td>〇</td><td>〇</td></tr><tr><td>APIによるコンテンツの取得</td><td>〇</td><td>〇</td><td>〇</td></tr><tr><td>管理権限</td><td>〇</td><td>〇</td><td>〇</td></tr><tr><td>予約公開機能</td><td>〇</td><td>〇</td><td>〇</td></tr><tr><td>サポート</td><td>海外サポート</td><td>海外サポート</td><td>国内サポート</td></tr><tr><td>ドキュメント</td><td>英語</td><td>英語</td><td>日本語</td></tr></tbody></table><p>どのサービスも基本的な機能は満たされています．microCMSは日本製HeadlessCMSですのでドキュメントからサポートまですべて日本語対応です．サービス開始が2019年8月からということもあり，現在も活発に機能の改善や追加が行われています．<br>公式で様々な<a href="https://microcms.io/blog/" target="_blank" rel="noopener">入門記事やチュートリアル</a>を書いてくれているので初めてHeadlessCMSを触ってみる場合に取り掛かりやすいと思います．</p><p>したがって今回は<a href="https://microcms.io/" target="_blank" rel="noopener">microCMS</a>を使ってみます！無料プランの機能も充実しています．</p><h1 id="microCMSを使ってみる"><a href="#microCMSを使ってみる" class="headerlink" title="microCMSを使ってみる"></a>microCMSを使ってみる</h1><p>それでは実際にmicoroCMSを使ってみます．<br>以降の例では<strong>「ブログ記事の管理」</strong> という場面を想定してmicroCMSの利用を説明していきます．<br>コンテンツの利用には会員登録を済ませたのち，</p><ol><li>サービスの作成</li><li>APIの作成</li><li>コンテンツの入力</li></ol><p>上記の3つのステップが必要です．以下で順に見ていきます！</p><h2 id="会員登録"><a href="#会員登録" class="headerlink" title="会員登録"></a>会員登録</h2><p>まずは<a href="https://microcms.io/" target="_blank" rel="noopener">ここ</a>から会員登録を完了させてください．<br>画面の手順通りに進めば簡単に会員登録できると思いますので，詳細は省略させていただきます．</p><p>料金体系は以下のようになっていますので，ご自身で利用したいプランを選択してください．<br>本記事ではFreeプランを選択しています．<br><img src="/images/20200512/photo_20200512_01.png"></p><h2 id="サービスの作成"><a href="#サービスの作成" class="headerlink" title="サービスの作成"></a>サービスの作成</h2><p>会員登録を済ませたら最初にサービスを作成します．サービスIDはコンテンツのサブドメインです．すなわち，<strong>https://[サービスID].microcms.io/</strong>となりますので半角英数字で作成します．<br>ここではサービス名を<strong>microCMS入門</strong>，サービスIDを<strong>future-blog-sample</strong>としています．<br><img src="/images/20200512/photo_20200512_02.png" style="border:solid 1px #000000"></p><p>また，サービスには識別しやすいように画像を設定することができますので，複数サービスを運用する場合には設定するといいと思います．<br><img src="/images/20200512/photo_20200512_03.png" style="border:solid 1px #000000"><br>私は既に1つサービスを作成していましたので，画面左上にうっすら既存サービスのアイコンが見えるかと思います．</p><h2 id="APIの作成"><a href="#APIの作成" class="headerlink" title="APIの作成"></a>APIの作成</h2><p>サービスの作成が完了したら先ほど作成した<strong>https://[サービスID].microcms.io/</strong>に進みAPIの作成をします．<br>今回は「ブログ記事」の配信と管理を想定しているので以下のようにAPI名とエンドポイントを作成します．<br><img src="/images/20200512/photo_20200512_04.png" style="border:solid 1px #000000"></p><p>APIで得られるデータ形式にはリスト形式かオブジェクト形式を選択することができます．<br>今回配信するコンテンツの「ブログ記事」はリスト形式で管理したいと思います．<br><img src="/images/20200512/photo_20200512_05.png" style="border:solid 1px #000000"></p><p>次にAPIスキーマを定義していきます．<br>スキーマの種類には以下の画像のように選択できます．一通り想定されるスキーマは備えられており，簡単な説明もあるため，どれを使うべきか非常にわかりやすくなっています．<br><img src="/images/20200512/photo_20200512_06.png"></p><p>今回は「ブログ記事」のコンテンツ配信を想定しているので以下のようにスキーマを作成します．スキーマは後から修正を加えることができます．<br><img src="/images/20200512/photo_20200512_07.png" style="border:solid 1px #000000"></p><h2 id="コンテンツの作成"><a href="#コンテンツの作成" class="headerlink" title="コンテンツの作成"></a>コンテンツの作成</h2><p>最後に先ほど作成したAPIにコンテンツの作成をします．画面右上の「追加」からコンテンツの作成を行います．<br><img src="/images/20200512/photo_20200512_08.png" style="border:solid 1px #000000"></p><p>コンテンツの作成ができたら早速コンテンツの公開をしましょう！右上の公開ボタンを押してコンテンツが公開されます．なおプルダウンメニューから下書きとして保存しておくこともできます．<br><img src="/images/20200512/photo_20200512_09.png" style="border:solid 1px #000000"></p><p>これでコンテンツが配信されている状態となりました．次で実際にコンテンツを取得してみたいと思います！</p><h1 id="APIの利用"><a href="#APIの利用" class="headerlink" title="APIの利用"></a>APIの利用</h1><p>コンテンツの配信準備が整ったので実際にコンテンツを取得してみます！</p><p>microCMSには簡単にAPIを試すことができる「APIプレビュー」が備わっています．まずはここからAPIを利用してみたいと思います．<br>先ほど作成したコンテンツの画面から右上の「APIプレビュー」を選択します．<br><img src="/images/20200512/photo_20200512_10.png" style="border:solid 1px #000000"></p><p>「APIプレビュー」で開かれたメニューから「取得」をクリックすると，APIリクエストが実行されてレスポンスが表示されます！また，curlコマンドも提示してくれているためご自身の環境でもすぐに試せるようになっている親切設計です．<br><img src="/images/20200512/photo_20200512_11.png" style="border:solid 1px #000000"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"https://[サービスID].io/api/v1/blog/l5cn1orii"</span> -H <span class="string">"X-API-KEY: YOUR_API_KEY"</span></span><br></pre></td></tr></table></figure><h1 id="コンテンツ参照"><a href="#コンテンツ参照" class="headerlink" title="コンテンツ参照"></a>コンテンツ参照</h1><p>先ほどの例では「ブログ作成者」をべた書きで与えていましたが，実際にブログを作成する際には作成者に対して</p><ul><li>名前</li><li>アイコン</li><li>プロフィール</li><li>各種SNSアカウントへのリンク</li></ul><p>のように，いくつかの情報を付与したいことがあると思います．このような機能は「コンテンツ参照」を利用することで実現できます！</p><h2 id="参照先コンテンツの作成"><a href="#参照先コンテンツの作成" class="headerlink" title="参照先コンテンツの作成"></a>参照先コンテンツの作成</h2><p>まずは参照先のコンテンツを作成します．今回の例では以下の画像のようなリスト形式の「ブログ作成者」というAPIを作成しました．</p><img src="/images/20200512/photo_20200512_12.png" style="border:solid 1px #000000"><p>「ブログ作成者」に以下のようなコンテンツを作成します．この未来太郎さんの各種情報ををブログ記事のコンテンツ側から取得したいと思います．<br><img src="/images/20200512/photo_20200512_13.png" style="border:solid 1px #000000"><br>参照される側のコンテンツ作成はこれで完了です．</p><h2 id="コンテンツ参照の設定"><a href="#コンテンツ参照の設定" class="headerlink" title="コンテンツ参照の設定"></a>コンテンツ参照の設定</h2><p>次にブログ記事のコンテンツ側から先ほどの「ブログ作成者」を参照できるように設定します．<br>writerの種類を<strong>テキストフィールド</strong>から<strong>コンテンツ参照</strong>に変更します．<br><img src="/images/20200512/photo_20200512_14.png" style="border:solid 1px #000000"></p><p>参照したいコンテンツには先ほどのブログ作成者を選択します．<br><img src="/images/20200512/photo_20200512_15.png"></p><p>「writer」の種類をコンテンツ参照に変更したら，コンテンツ管理から「作成者」を選択しましょう．<br>先ほど作成した未来太郎さんが選択できるはずです！<br><img src="/images/20200512/photo_20200512_16.png" style="border:solid 1px #000000"></p><p>「作成者」の選択が済んだらコンテンツを公開し，先ほどのように「APIプレビュー」からAPIリクエストをしてレスポンスの確認をしましょう！「writer」には指定した「ブログ作成者」が対応しています！<br><img src="/images/20200512/photo_20200512_17.png" style="border:solid 1px #000000"></p><h1 id="リスト形式の要素を持たせる"><a href="#リスト形式の要素を持たせる" class="headerlink" title="リスト形式の要素を持たせる"></a>リスト形式の要素を持たせる</h1><p>リスト形式で要素を与えようとした際に，どのAPIを利用して実現できるか分からず少しハマりました．<br>例えばAWS lambdaについてのブログ記事を作成したとして，</p><ul><li>AWS</li><li>lambda</li><li>golang</li><li>etc…</li></ul><p>のように複数のタグを付与させたいことがあると思います．</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"tags":["AWS","lambda","golang"]</span><br></pre></td></tr></table></figure><p>上記のようにタグをリスト形式で作成できればいいですが，現在microCMSではコンテンツに直接リストを与えることができません．<br>そこで，1つのkeyにリスト形式の要素を与えるには<strong>複数コンテンツ参照</strong>を使用します．<br>それでは実際に試してみます！</p><h2 id="参照先コンテンツの作成-1"><a href="#参照先コンテンツの作成-1" class="headerlink" title="参照先コンテンツの作成"></a>参照先コンテンツの作成</h2><p>まずはタグ一覧を管理するリスト形式の「タグ」コンテンツを作成します．作成方法は今までのコンテンツと同様です．<br><img src="/images/20200512/photo_20200512_18.png" style="border:solid 1px #000000"></p><h2 id="コンテンツ参照の設定-1"><a href="#コンテンツ参照の設定-1" class="headerlink" title="コンテンツ参照の設定"></a>コンテンツ参照の設定</h2><p>「ブログ記事」のAPIスキーマに「tag」フィールドを追加します．種類には<strong>複数コンテンツ参照</strong> -&gt; <strong>タグ</strong>を選択します．<br><img src="/images/20200512/photo_20200512_19.png" style="border:solid 1px #000000"></p><p>次にコンテンツ管理で「タグ」を付与させましょう．今までと異なり複数選択できるようになっていると思います．<br><img src="/images/20200512/photo_20200512_20.png" style="border:solid 1px #000000"></p><p>これで準備はできました！<br>実際にAPIプレビューを試してみると，リスト形式で複数タグを持っていることが分かります．<br><img src="/images/20200512/photo_20200512_21.png" style="border:solid 1px #000000"><br>これでリスト形式で複数の要素を与えることができました．</p><h1 id="Vue-jsで画面にデータを表示してみる"><a href="#Vue-jsで画面にデータを表示してみる" class="headerlink" title="Vue.jsで画面にデータを表示してみる"></a>Vue.jsで画面にデータを表示してみる</h1><p>最後は簡単にVue.jsでmicroCMSのコンテンツを画面に表示してみます．<br>今回はaxiosを利用してAPIリクエストを行います．以下のようなVue.jsコードを作成しました．</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;contents.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">      記事作成者: &#123;&#123;contents.writer.name&#125;&#125;</span><br><span class="line">      日付: &#123;&#123;contents.date&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"contents.body"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">import axios from "axios";</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      contents: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  async created() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      const res = await axios.get('https://future-blog-sample.microcms.io/api/v1/blog/l5cn1orii', &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          'X-API-KEY': 'YOUR_API_KEY'</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      this.contents = res.data;</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">      console.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ブラウザで確認してみると無事表示されました！リッチエディタで作成したhtml形式の本文もちゃんと機能しています．<br>これでフロントエンドとmicroCMSの疎通ができたのでAPIで取得したコンテンツを利用して様々なページを作成することが出来るようになりました．</p><img src="/images/20200512/photo_20200512_22.png" style="border:solid 1px #000000"><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は初めてのCMS利用でmicroCMSを触ってみた！ということで本記事を書かせていただきました．<br>microCMSはすべて日本語で書かれており，チュートリアルやブログ記事も豊富にあるのですごく始めやすかったです．特にUIがシンプルで分かりやすくて素晴らしいと思いました．APIプレビューで即座に作成したコンテンツの確認ができることなど特徴的だったかと思います．<br>実際にプロジェクトでmicroCMSを利用している社員の方曰く，サポートはかなり手厚く，チャットのレスポンスもすぐ帰ってくるようです．日本語でやり取りでき，ドキュメントやUIも日本語なので，それだけでもプラスポイントではないでしょうか．</p><p>しかし，比較的新しく出てきたサービスのため，細かな機能不足があるように感じました．例えばバリデーション機能，編集履歴の表示などは現在開発中とのことです．<br><img src="/images/20200512/photo_20200512_23.png"></p><p>ですが，開発スピードがすごく早いため今後どんどん使いやすくなっていくと思います．機能更新の様子は<a href="https://microcms.io/blog/" target="_blank" rel="noopener">公式のブログ</a>で見ることができます．ですので今後も注目していきたいサービスの１つだと思います．</p><p>ありがとうございました！</p><h1 id="参考記事"><a href="#参考記事" class="headerlink" title="参考記事"></a>参考記事</h1><p><a href="https://qiita.com/to4-yanagi/items/4e431b99b78401ef65ca" target="_blank" rel="noopener">https://qiita.com/to4-yanagi/items/4e431b99b78401ef65ca</a><br><a href="https://webkikaku.co.jp/homepage/blog/hpseisaku/htmlcss/headless-cms/" target="_blank" rel="noopener">https://webkikaku.co.jp/homepage/blog/hpseisaku/htmlcss/headless-cms/</a><br><a href="https://microcms.io/blog/lets-relation/" target="_blank" rel="noopener">https://microcms.io/blog/lets-relation/</a></p><hr><p>関連記事: </p><ul><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして！TIG DXチーム　アルバイターの三村です．&lt;/p&gt;
&lt;p&gt;普段は大学院生をしておりフューチャーには &lt;a h
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
      <category term="HeadlessCMS" scheme="https://future-architect.github.io/tags/HeadlessCMS/"/>
    
  </entry>
  
  <entry>
    <title>PJでUIデザインにAtomic Designを導入したらどうだったのか</title>
    <link href="https://future-architect.github.io/articles/20200511/"/>
    <id>https://future-architect.github.io/articles/20200511/</id>
    <published>2020-05-10T23:43:07.000Z</published>
    <updated>2020-05-12T00:54:35.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今回はUIと少しUXのお話です"><a href="#今回はUIと少しUXのお話です" class="headerlink" title="今回はUIと少しUXのお話です"></a>今回はUIと少しUXのお話です</h1><p>こんにちは。フューチャーでUXの専門家をさせていただいている平川といいます。</p><p>フューチャー技術ブログでは、<a href="/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a> の記事を書いた久保さんと同じチームに所属しています。</p><p>PJでは<strong>最高の顧客業務</strong>を目標に、業務、UX、UIの設計と、アプリ開発をさせていただいています。<br>今回はPJの現場でUXとUIのデザインを通して、Atomic Designの導入はどのような結果を生んだのか、Atomic Design導入に際しての課題や取り組み方のコツなんかをお伝えできればと思います。</p><h2 id="Atomic-Design"><a href="#Atomic-Design" class="headerlink" title="Atomic Design"></a>Atomic Design</h2><p>Atomic Designは、Webページやアプリケーションを作成する際に、UIの最小要素（原子）からの組み合わせで構築していく考え方です。Atomic Designの提唱者はHTMLタグを元素周期表に見立ててそれを原子と表現しており、とてもおもしろいです。</p><p>詳しくは<a href="https://atomicdesign.bradfrost.com/" target="_blank" rel="noopener">Atomic Design本家</a>やGoogle先生が優しく教えてくれます。</p><p>それでは早速Atomic Designを導入したPJの話にうつりたいと思います。</p><h1 id="Atomic-Designは何を期待して導入したのか"><a href="#Atomic-Designは何を期待して導入したのか" class="headerlink" title="Atomic Designは何を期待して導入したのか"></a>Atomic Designは何を期待して導入したのか</h1><p>2016年に参加したチームでシステム構築のPJが立ち上がりました。</p><p>そのPJでAtomic Designは導入されたのですが、PJでは最初からAtomic Designを導入したわけではありませんでした。デザインツールさえ導入せずPowerPointでデザインをしていた開始当初から、PJは以下のように活動を進化させていきました。</p><ol><li>PJメンバー全員が使えるPowerPointで画面デザインをする</li><li>InVisionを導入しデザインコスト低下と効率を向上</li><li>Figmaに乗り換え</li><li>Figmaのcomponent機能の強力さに気づき<strong>Atomic Designを導入</strong></li><li>UIデザインポリシーのレベルアップ</li><li>社内標準に向けてFigma componentの汎化とUIデザインポリシーの汎化</li></ol><p>現在はより広く社内全体のUX改善の取り組みをすべく日々コツコツと仕事や勉強をしています。</p><h2 id="統一できないUX、UIという課題"><a href="#統一できないUX、UIという課題" class="headerlink" title="統一できないUX、UIという課題"></a>統一できないUX、UIという課題</h2><p>システム構築では多くの画面を多くのメンバーで設計し、実装していきます。</p><p>2016年から現在に至るまで、複数回、アプリケーションをアップデートしてきました。2016年の設計当初から、UIやデザインの統一性に対してなかなか満足のいく結果が残せていませんでした。</p><ul><li>UIデザインに統一性がなくユーザー負荷が増える<ul><li>レイアウトの仕方が画面によって異なる</li><li>利用するアイコンが異なったりサイズが画面毎に違う</li><li>文字色が統一できていない</li><li>同じ要素の選択があっちではラジオボタン、こっちではドロップダウン</li><li>etc…</li></ul></li><li>無秩序なUIデザインに起因するソースコードの肥大化<ul><li>不要なコンポーネント作成</li><li>Sassの変数を使わずに色やサイズを直指定</li></ul></li></ul><p>特にUIデザインの統一性の問題は大小挙げていけば暇がないくらいです。</p><p>その時に出会ったのがAtomic Designという方法論でした。</p><h2 id="Atomic-Designを知り、導入する"><a href="#Atomic-Designを知り、導入する" class="headerlink" title="Atomic Designを知り、導入する"></a>Atomic Designを知り、導入する</h2><p>Atomic Designという言葉を知り、調べ始めました。</p><p>実際に使ってみないとわかんないなぁと思い、とりあえず既存の手頃な画面を題材に方法論を適用・検証しました。検証を進めていく過程で、改めてUIの構造を分解し、再構築するのが簡単だったなぁという印象を覚えています。生体、分子、原子と分解していき、最小粒度のUI（原子）に対し、より理解を深め、そのUIが利用される理由を考える。そして、原子を選択しなおし、分子、生体を再構築してその結果をアプリケーションという形で表現しなおす。これにより原子という単位でUXは整理され、その組み合わせで構成されるUIのUXも整理され統一されるのではないか、という期待感を抱いたのです。</p><p>私は自分自身がデザインをする場合は、UIの分解と再構築は頭の中の作業としてやっていましたが、PJにてアプリケーションの画面設計をPJメンバーに行ってもらう前提だと、Atomic Designの原子、分子等の整理方法は非常に有用だと考えました。今まで自分の中でなんとなくやっていたUIの選択や構築を、PJメンバーにも的確にやってもらえるのではないかと。そして、自分の中で無秩序に転がっていたUIが整理整頓できるのではないかと。また、FigmaのComponentという機能がこのAtomic DesignによるUIデザインとUIの統一を後押しできると考え、Atomic Designを導入しました。</p><h1 id="導入してみてどうだったか"><a href="#導入してみてどうだったか" class="headerlink" title="導入してみてどうだったか"></a>導入してみてどうだったか</h1><h2 id="UIデザインの削減"><a href="#UIデザインの削減" class="headerlink" title="UIデザインの削減"></a>UIデザインの削減</h2><p>私が参加していたPJでの比較になりますが、UIデザインの無駄が削減できました。実際に作成したUIコンポーネントの数も少なくなっていると感じています。また、従来は機能と見た目という単位でコンポーネントを作成していましたが、<strong>ユーザーへ提供するUIの利用用途とユーザーが抱くデータへの印象という単位</strong>でコンポーネントを作成するようになりました。</p><p>例えば「選択する」というUIは複数存在しますが、ユーザーが対象データに対しどのような印象を持っているか、どういう選択なのかで、適用するUIが異なります。私は、原子はプリミティブなデータの利用方法の提供という印象を持っています。そして、分子は原子を組み合わせることで、より高度なデータの利用方法を提供できると考えています。そのため、UIを分解することで分子、原子という粒度になったときに自ずと適合するUIが選択され、無駄なUIコンポーネントの作成抑止につながったと考えています。</p><p>UIコンポーネントは減れば減るほど良いというものでもありませんが、小さいUXのバリエーションを減らすことによってユーザーに対してアプリケーションの利用負荷を下げる効果はあると思います。</p><img src="/images/20200511/photo_20200511_01.png"><h2 id="UIの体系的な管理"><a href="#UIの体系的な管理" class="headerlink" title="UIの体系的な管理"></a>UIの体系的な管理</h2><p>今まではUIコンポーネントという名前で一括管理していたコンポーネントに対して、原子、分子、生体という単位を与えることになりました。それにより、原子、分子は再利用性が非常に高く、ソースコードの無駄も少なくなります。</p><p>UIの機能性ではなく利用方法という単位がコンポーネント化されていることもあり、煩雑になりがちなCSSもスッキリしていくと思います。アプリケーションが成長するにつれ、言語仕様的にオブジェクト指向で管理できないCSSはどんどんメンテナンスコストが上がっていきますが、BEMとAtomic Designを組み合わせることでかなりメンテナンスコストを低減可能になりました。個人的にはCSSのメンテコスト削減が一番コストメリットを感じています。</p><img src="/images/20200511/photo_20200511_02.png"><h2 id="原子多すぎ問題の発生"><a href="#原子多すぎ問題の発生" class="headerlink" title="原子多すぎ問題の発生"></a>原子多すぎ問題の発生</h2><p>背景色の違うパネルや、表示するラベルテキストの色とフォントサイズのバリエーションでFigma componentを作っていました。これはやりすぎなので反省点です。Figmaではスタイルルールも作れるので、過度なComponent作成は辛いという学びになりました。それに、Componentを増やすとFigmaのページロード時間も長くなりますし、適度な管理が一番です。</p><h2 id="アプリケーション全体のユーザーシナリオデザインにはAtomic-Designは利用しない"><a href="#アプリケーション全体のユーザーシナリオデザインにはAtomic-Designは利用しない" class="headerlink" title="アプリケーション全体のユーザーシナリオデザインにはAtomic Designは利用しない"></a>アプリケーション全体のユーザーシナリオデザインにはAtomic Designは利用しない</h2><p>Atomic DesignはあくまでUX・UIの分解と再構築、そしてUIの体系的な管理を目的として利用しました。そのため、アプリケーションを利用するユーザーシナリオに寄与するものとしては利用していません。私はAtomic DesignはUIの静的な設計手法であると思います。UMLでは動的な設計方法としてアクティビティ図やシーケンス図等を用い、静的な設計方法としてクラス図等を用いますが、Atomic Designは静的な設計方法に該当するんじゃないかなぁという印象です。</p><h1 id="PJでAtomic-Designを導入するときのコツ"><a href="#PJでAtomic-Designを導入するときのコツ" class="headerlink" title="PJでAtomic Designを導入するときのコツ"></a>PJでAtomic Designを導入するときのコツ</h1><p>コツというよりも課題に対するケーススタディのようなものですがまとめてみました。</p><h2 id="生体、もしくはテンプレートくらいの大きさから作り始める"><a href="#生体、もしくはテンプレートくらいの大きさから作り始める" class="headerlink" title="生体、もしくはテンプレートくらいの大きさから作り始める"></a>生体、もしくはテンプレートくらいの大きさから作り始める</h2><p>作りたいUIをざっくり自由に表現してみることから始めます。そこから、構成要素として必要な生体、分子・原子を選択します。そうすると、Figma等のデザインツール上にすでに存在する同一目的のUIを選択できるようになります。該当するUIが存在しなければ原子、分子、生体を足していきます。至って普通の進め方なのですが、Atomic Designは最小粒度が原子であるため、原子を作るところから始めるケースもあるかもしれません。</p><p>しかし、いきなり原子から作りだすのは経験上、効率が悪いという印象です。</p><h2 id="UIで取り扱うデータの印象と原子の特徴を捉える"><a href="#UIで取り扱うデータの印象と原子の特徴を捉える" class="headerlink" title="UIで取り扱うデータの印象と原子の特徴を捉える"></a>UIで取り扱うデータの印象と原子の特徴を捉える</h2><p>ユーザーにUXを与える最小粒度のUIは原子として表現されています。一方、ユーザーがデータに持つ印象を捉えることでどのように操作したいのかがわかります。<br>この2つを結びつける際に、生体の粒度で生み出せるデータの結果が一致していてもUIが適しているかは別の話です。例えば、行列データに対しユーザーは一括操作したいのか、反復操作したいのか。反復操作であれば、列単位操作なのか、行単位操作なのか、いった具合です。</p><p>ユーザーは行列操作を億劫に感じている場合、それはなぜなのか。操作数が多いためなのか、操作のスピードを出せないでいるのか。データへの印象に適合するUIを原子の単位でマッチさせていくことが重要と考えています。</p><h2 id="原子か分子か生体なのかは大雑把に決める"><a href="#原子か分子か生体なのかは大雑把に決める" class="headerlink" title="原子か分子か生体なのかは大雑把に決める"></a>原子か分子か生体なのかは大雑把に決める</h2><p>Atomic Designを導入された方は直面したことがあると思います。私自身も、原子 or 分子、分子 or 生体を悩むこともありました。<br>しかし、あまり悩まなくて大丈夫だという回答に至りました。<br>例えば分子と決めていたUIが更に分解され、分解されたUIが2つ以上の分子で共通利用されるというケースに直面し、その都度原子に移動させたり、分子に移動させれば大丈夫だったからです。</p><h2 id="Component（原子、分子）の管理者を立てる"><a href="#Component（原子、分子）の管理者を立てる" class="headerlink" title="Component（原子、分子）の管理者を立てる"></a>Component（原子、分子）の管理者を立てる</h2><p>これはアプリケーション全体ではみ出しUI・UXを定義しないようにするためのルールです。新たに原子・分子が必要と判断する前に適切な原子・分子がすでに存在しないかを検討するためでもあります。</p><p>そしてこの原子・分子はFigma上でComponentとして管理しているため、物理的にComponent内部への変更を阻止することが可能です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Atomic DesignはUIの体系的な管理に非常に効果がある</li><li>Atomic DesignはFigma利用を前提としたほうが良い</li><li>UIのデザインは生体やテンプレートの単位から作成しはじめる</li><li>ユーザーのデータへの印象と原子の特徴を捉える</li><li>大雑把に原子、分子、生体を管理するよう心がける</li><li>原子、分子の管理者を立てよう</li></ul><p>Atomic DesignはUXとUIの体系的な管理で一定の成果を上げることができました。</p><p>Atomic Designをこれからも使い続けると思います。</p><p>しかし、Atomic Designだけを導入しておけばうまくいく、ということはありません。</p><p>そして、自分自身のデザインスキルを高めていくためにも、デザインが得意な人は随時募集させていただいています。一緒に切磋琢磨できる仲間が一人でも多くなることを期待しています。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;今回はUIと少しUXのお話です&quot;&gt;&lt;a href=&quot;#今回はUIと少しUXのお話です&quot; class=&quot;headerlink&quot; title=&quot;今回はUIと少しUXのお話です&quot;&gt;&lt;/a&gt;今回はUIと少しUXのお話です&lt;/h1&gt;&lt;p&gt;こんにちは。フューチャーでUXの専門
      
    
    </summary>
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="UI/UX" scheme="https://future-architect.github.io/tags/UI-UX/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Figma" scheme="https://future-architect.github.io/tags/Figma/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
      <category term="AtomicDesign" scheme="https://future-architect.github.io/tags/AtomicDesign/"/>
    
  </entry>
  
  <entry>
    <title>TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話</title>
    <link href="https://future-architect.github.io/articles/20200501/"/>
    <id>https://future-architect.github.io/articles/20200501/</id>
    <published>2020-05-01T01:19:34.000Z</published>
    <updated>2020-05-01T01:27:56.614Z</updated>
    
    <content type="html"><![CDATA[<p>フロントエンド記事集中投稿ウィークの3本目です。</p><ul><li><a href="https://future-architect.github.io/articles/20200428/">Vue.jsのslotの機能を初心者にわかるように解説してみた</a></li><li><a href="https://future-architect.github.io/articles/20200429/">Reduxを分かりやすく解説してみた</a></li></ul><p>前日の丸野さんがReduxの基本的な記事でした。Reduxはコンパクトなライブラリながらよく考えられた仕組みです。Jetpack ComposeやらFlutterやら、ReactインスパイアなGUIフレームワークも増えているので、JavaScript（TypeScriptではなく） + Reduxをやってみるのは、ウェブに限らず、今後のユーザーインタフェース関連のコードを触るための理解力向上には良いと思います。本エントリーは、実際にプロダクションコードでたくさんRedux周りにもreducerなどを実装しなくてはいけなくなったときの次のステップとして、Redux Toolkitの紹介をします。</p><p>たいてい、Reduxは導入コストが大きく、コードを複雑にしてしまうため「ある程度大きくなってから」「小さいうちは入れる必要ない」みたいに言われます。僕もそう思っていて、丸野さんが参加されているプロジェクトの最初では、最初は素のReactで、1-2ヶ月してみんなが慣れてきたらReduxを入れるという2段階で導入したりもしました。</p><p>なぜ難しいかと言われているかというと、Fluxアーキテクチャのサイクルが1周できるまでの準備時間がかかるので、どうしても最初に実装し始めてReactと繋がって動くまでは「これでいいのか？」と疑問に思いながら進まなければならないから、というのがあるのかなと思っています。なおかつ、TypeScriptで型チェックが効くようにRedux周りを実装しようとすると、その作業がさらに倍になるという・・・</p><p>しかし、最近触ってみたところ、公式の出している<a href="https://redux-toolkit.js.org/" target="_blank" rel="noopener">Redux Toolkit</a>というヘルパーライブラリがTypeScriptとの相性がよくて、「コーディングを前に進めてくれる感」が強く、手間も小さいので、もう最初からいれてしまってもいいかなぁという気持ちにすごくなっています。</p><p>かるーく触った状態なので、本格的なアプリを作ってまた何か考えることがあったら更新するかもしれません。</p><p>三行まとめ</p><ol><li>Redux ToolkitはファイルがバラバラになりがちだったReduxのコードを短くコンパクトにまとめてくれるしTypeScriptとの相性が良い</li><li>導入の手間暇が少ないので、後から追加するコストを考えると最初からいれてもいいレベル</li><li>とはいえ、既存のRedux Thunkとかと混ぜるのは大変なので、既存のコードにちょっとずつ導入は難しいかも</li></ol><h1 id="Redux-Toolkit"><a href="#Redux-Toolkit" class="headerlink" title="Redux Toolkit"></a>Redux Toolkit</h1><p>Reduxは、いくつもの部品を実装する必要がありました。まずはReducer。入力と出力にstate、中に巨大なswitch文と値を書き換えるロジックを持ちます。Reducerに食わせるためにAction Creatorというのが必要でした。さらに非同期な処理をするにはRedux Thunkとかが必要で、さらにcombineReducerで複数のReducerを一つにまとめ・・・みたいな。Redux周りでもフォルダ構造を事前に定義して、拡張性を考えて何個もファイルをフォルダに分散しておいたり・・・みたいな感じですよね？</p><p>また、TypeScriptのシェアが伸びる時期のもので型情報は一応つけられるものの、型情報をつけるための型、みたいな動くものを作るのとはちょっと違う手間暇がかかっていました。特にFluxは処理の流れが循環するというアーキテクチャなので、reducerを定義するにはアクションのキーを定義したいし、引数のactionは他のすべてのアクションの和集合として型定義したい、で非同期アクションを定義するにはstateも扱うからreducer周りの型定義を利用したい、あれ？参照が循環するぞ、またこの定義は別ファイルに書かないと、みたいなTypeScriptで使うための苦労がやたらと多い。</p><p>Redux Toolkitでは<code>createSlice()</code>という関数が提供されており、これを使うと、初期値とaction creatorとreducerが一発で作られます。巨大なswitch文を書く必要がなく、小さい処理単位で関数を定義すると、裏でswitch文相当を作ってくれます。Win32 APIとMFCみたいな感じです。</p><h1 id="Redux-TypeScriptの何が辛かったのか"><a href="#Redux-TypeScriptの何が辛かったのか" class="headerlink" title="Redux + TypeScriptの何が辛かったのか"></a>Redux + TypeScriptの何が辛かったのか</h1><p>ここのサンプルコード書いたんですが自分でも読むの疲れるわぁ、という分量になったので、<a href="http://blockdiag.com/ja/blockdiag/demo.html" target="_blank" rel="noopener">blockdiag</a>で作った図だけにしました。コードはこのエントリーの末尾にまとめています。興味のある人だけどうぞ。本当は消したいぐらいなのだけど、まぁエビデンスというやつです。</p><p>フロントエンド開発ではTypeScriptが流行っていますが、これとReduxの相性、必ずしもよくないなぁと思っていました。TypeScriptの型システムはだいぶ発展したので、Reactは相当書きやすくなっています。JavaScriptとあまり変わらない記述量できちんと推論がきいてエラーを報告してくれて、コーディングはかなり楽です。一方、ReduxのFluxという考え方が循環を持っているため、型システムで記述しようとすると結構しんどかったです。</p><h2 id="JavaScriptだけでReduxアプリを作った場合"><a href="#JavaScriptだけでReduxアプリを作った場合" class="headerlink" title="JavaScriptだけでReduxアプリを作った場合"></a>JavaScriptだけでReduxアプリを作った場合</h2><p>Reduxを使ったアプリケーションの心臓部のReducerとstoreです。巨大なswitch文があり、その中でアクションに処理に応じてステートを更新します。大きくなると、combineReducerでこのreducerをまとめることができます。ページごととかにreducerを分割して作ることができます。</p><p>これ以外に、たいていActionを作るためのAction Creatorと呼ばれる関数をよく作ります。アクションには、アクションを識別するアクションタイプの定数があります。</p><p>依存関係を図示するとこんな感じでしょう。</p><img src="/images/20200501/1.png"><p>これは処理の呼び出しの依存ですが、やっかいなのはaction creatorを実装するときのデータはreducerに流れる（reduxがやってくれる）ので、実装するときの脳みそとしてはこちらの依存も解決する必要がありますが、あくまでもコードの依存だけ取り上げています。</p><p>非同期の処理のためにRedux Thunkを使う場合は依存が追加で発生します。</p><img src="/images/20200501/2.png"><h2 id="TypeScriptを使おうとした場合"><a href="#TypeScriptを使おうとした場合" class="headerlink" title="TypeScriptを使おうとした場合"></a>TypeScriptを使おうとした場合</h2><p>TypeScriptだとactionやstateの型定義を行い、コードの中で矛盾がないか確認したいですよね？いくつか型定義を追加する必要がでてきます。入りきらないので折り返しました。blockdiagのfolded初めて使って見ました。</p><img src="/images/20200501/3.png"><p>JavaScriptは呼び出しで必要な依存しかなかったものの、Reduxが隠蔽してくれていたデータのやり取りも型情報の依存という形で間接的に繋がってしまうのですよね（action型定義）。</p><p>Redux thunkで非同期を扱うとこんな感じに。</p><img src="/images/20200501/4.png"><p>ここまでくれば、型が揃うので、reducerの中でも型チェックがききますし、action cratorの中の属性名の間違いもわかりますが・・・得られるメリットに対してコストがかかりすぎているなぁ、と思っていました。</p><p>関数で純粋だぜっていっても、型システムの都合上、依存関係が循環しそうになると、ファイル分割とかに頭を使う必要が出てきます。TypeScriptのファイルの行数もすごく増えてしまう。Redux以下を1ファイルに全部まとめちゃえば解決するといえばするのですが、そもそも大規模アプリに導入するのが前提のRedux。1000行とか2000行のファイルのメンテなんてしたくないですよね？しかも、１つのアクションを修正するのに、ファイルの上の方やら下の方やら同時に直す必要がある。</p><h2 id="Redux-Toolkit-TypeScriptの場合"><a href="#Redux-Toolkit-TypeScriptの場合" class="headerlink" title="Redux Toolkit + TypeScriptの場合"></a>Redux Toolkit + TypeScriptの場合</h2><p>Redux Toolkitは、この分散したものを集めます。APIがいろいろあるのですが、<a href="https://redux-toolkit.js.org/usage/usage-with-typescript#createslice" target="_blank" rel="noopener">createSlice</a>という便利なやつがあります。</p><p>sliceというのは、状態とそれを変更するアクションをまとめたものです。どこかで見たことがあるやつですね？そうです。オブジェクト指向です。状態とメソッドの塊をつくってくれるのです。しかも、State以外、型定義らしい型定義もありません。きちんと推論でぜんぶまるっとやってくれるのです。</p><img src="/images/20200501/5.png"><p>action種別の文字列定数、actionの型定義みたいな、本質的じゃない中間生成物を一切作らなくてもいいので、まとめてもトータルの行数はかなり短くなります。actionの引数のPayloadの型定義なんかも、createSliceの呼び出しの中でインラインで書いちゃうことができます。</p><p>storeを作る側も<a href="https://redux-toolkit.js.org/usage/usage-with-typescript#using-configurestore-with-typescript" target="_blank" rel="noopener">configureStore</a>という関数がありますが、これを使うと、combineReducerも不要です。</p><p>オブジェクト指向的といっても書く処理のreducerは副作用を外に持つ実装になっています。Erlang的なオブジェクト指向(プロセス間通信のモデルではなくて、mapsとかdictとかのAPIの方)です。スのReduxが辛くて、オブジェクト指向的なRedux Toolkitが使いやすいといっても、別にどちらが優れているとか優れていないとかはないので。型情報の伝搬という、推論ができるようになったからこそ登場するコードの設計の新しい概念がでてきて、それを元に組み上げられたのでRedux Toolkitは使いやすい、と理解しています。</p><h1 id="Redux-Toolkitでsliceを作る"><a href="#Redux-Toolkitでsliceを作る" class="headerlink" title="Redux Toolkitでsliceを作る"></a>Redux Toolkitでsliceを作る</h1><p>さて、これまでコードを出さずに概念図だけで説明してきましたが、コードはこんな感じです。slice関連は1ファイルにまとめてしまいます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice, configureStore, PayloadAction &#125; <span class="keyword">from</span> <span class="string">'@reduxjs/toolkit'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stateの型定義</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> State = &#123;</span><br><span class="line">  count: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初期状態。インラインで書いても良いですが・・・・</span></span><br><span class="line"><span class="keyword">const</span> initialState: State = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createSliceでreducerとactionを同時に定義</span></span><br><span class="line"><span class="keyword">const</span> slice = createSlice(&#123;</span><br><span class="line">    name: <span class="string">'counter'</span>,</span><br><span class="line">    initialState,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        incrementCounter: <span class="function">(<span class="params">state, action: PayloadAction&lt;<span class="built_in">number</span>&gt;</span>) =&gt;</span> (&#123;</span><br><span class="line">          ...state,</span><br><span class="line">          count: state.count + action.payload,</span><br><span class="line">        &#125;),</span><br><span class="line">        decrementCounter: <span class="function">(<span class="params">state, action: PayloadAction&lt;<span class="built_in">number</span>&gt;</span>) =&gt;</span> (&#123;</span><br><span class="line">          ...state,</span><br><span class="line">          count: state.count - action.payload,</span><br><span class="line">        &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// action creatorもこんな風に取り出して公開できて、dispatchでReactから利用できる</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; incrementCounter, decrementCounter &#125; = slice.actions;</span><br><span class="line"></span><br><span class="line"><span class="comment">// storeを作るヘルパー複数のreducerをまとめる機能もあり</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = configureStore(&#123;</span><br><span class="line">  reducer: slice.reducer,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>configureStoreのreducerにオブジェクトを渡すと、複数のreducerを結合できます。combineReducer相当も内蔵。1ファイルに全部まとめることができます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = configureStore(&#123;</span><br><span class="line">  counter: countSlice.reducer,</span><br><span class="line">  primeNumber: primeNumberSlice.reducer,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1つしか状態が発生しないのであれば、slice定義とconfigureStoreは1つにまとめてしまい、複数sliceが登場するのであれば、sliceごとにファイルを作り、configureStoreを呼ぶルートとなるスクリプトファイルを1つ作る、ぐらいのファイル分割でうまくいきそうです。Redux以外に他の場所でも使いたい型定義とか、slice間で共有したい型定義があればStateの中から取り出して単独のtypes.tsみたいなファイルにまとめるぐらいかな。</p><h2 id="Reduxを使う側も型を生かす"><a href="#Reduxを使う側も型を生かす" class="headerlink" title="Reduxを使う側も型を生かす"></a>Reduxを使う側も型を生かす</h2><p>Redux Tooolkitの機能ではないのではなく、react-redux側の機能ですが、Reduxを使う側も型が活かせます。このインプットにはRedux Toolkitを使って作ったStoreから、Stateの型を取り出すことで簡単にセットアップが可能です。これでカスタム版の<code>useSelector</code>を作ります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector <span class="keyword">as</span> rawUseSelector, TypedUseSelectorHook &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line">：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 複数のreducerをまとめた場合に、最終的なStateの型を取り出す</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> RootState = ReturnType&lt;<span class="keyword">typeof</span> store.getState&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 型情報付きのuseSelectorをここで宣言</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useSelector: TypedUseSelectorHook&lt;RootState&gt; = rawUseSelector</span><br></pre></td></tr></table></figure><p>Reactコード側では、react-reduxの<code>useSelector()</code>を直接使うのではなく、このストア定義の中で作ったuseSelectorを使うと型チェックがuseSelectorのコールバックの中でも効くようになります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">'./store.ts'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">CounterViewer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = useSelector(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: state.count,  <span class="comment">// ここでコード補完がきちんと効く</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hooksスタイルのAPIを使うだけで、connectを使った場合と比べてコードはかなり少なくなります。Reduxのためにだけに書かなきゃいけないコードが激減（mapStateToPropsみたいな）しますが、それにプラスして、このstore定義の中で作ったuseSelectorを使えばstateの情報をビューでアクセスするときにきちんと補完も効くので少ない手間でコードの開発効率があがります。</p><h1 id="非同期処理の書き方"><a href="#非同期処理の書き方" class="headerlink" title="非同期処理の書き方"></a>非同期処理の書き方</h1><p>Redux-thunkとかRedux-sagaとかありますが、この分野もRedux Toolkitにお任せしておけば大丈夫です。</p><p>Redux Thunkはasyncな関数の中で、サーバーアクセスなどをして、その結果を受け取ったら、通常のactionをdispatchを通じて実行する、というモデルでした。大抵アプリケーションから呼ばれる処理は非同期前提なのでthunkなアクションがアプリケーションとの接点になりますが、その結果を書き出すためにreducer/action creatorの両方に追加しないといけなかったので、記述量は少し多めでした。</p><p>ちなみに、Redux Sagaは辛かったのでもう記憶から抹消されました。</p><p>Redux Toolkitのasync thunkの場合は、sliceの外で<a href="https://redux-toolkit.js.org/usage/usage-with-typescript#createasyncthunk" target="_blank" rel="noopener">createAsyncThunk</a>で非同期なロジックを書きます。sliceとの結合は2種類あります。</p><p>1つ目は、async thunkの2つめの引数にはdispatchとかgetStateといったメソッドがあるので、これを使って以前のRedux Thunkのように、別のReducerを呼ぶ方法です。これでも、以前よりもシンプルになりやすいというか、async thunkから呼ばれるactionはexportしないで、ファイル内部のプライベートなactionとして記述できるため、コード全体の複雑さは以前よりも少なくなります。</p><p>2つ目は、asyncのレスポンスを直接扱う追加のアクションを定義する方法です。こちらの方を紹介します。まずは非同期処理を扱うロジックを書きます。ここはreturnTypeの推論が聞かなかった＆2箇所で利用しているため、外でtypeで定義して使っています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> fetchLastCounterReturnType = &#123;</span><br><span class="line">    count: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchLastCounter = createAsyncThunk&lt;fetchLastCounterReturnType&gt;(</span><br><span class="line">    <span class="string">'lastcount/fetch'</span>,</span><br><span class="line">    <span class="keyword">async</span> (arg, thunk): <span class="built_in">Promise</span>&lt;fetchLastCounterReturnType&gt; =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">'/api/lastcount'</span>, &#123;</span><br><span class="line">            credentials: <span class="string">'same-origin'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (res.ok) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">await</span> res.json()) <span class="keyword">as</span> fetchLastCounterReturnType;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fetch count error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>reducersとは別に、extraReducersという項目があって、そこで追加していきます。builderの最初に渡すアクションのキーは、createAsyncThunkが作ってくれる3種類あります。pendingが実行開始して、結果が帰ってくるまでの間、fulfilledが正常終了、rejectedがエラー時です。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> slice = createSlice(&#123;</span><br><span class="line">    name: <span class="string">'counter'</span>,</span><br><span class="line">    initialState,</span><br><span class="line">    reducers: &#123;...&#125;,</span><br><span class="line">    extraReducers: <span class="function">(<span class="params">builder</span>) =&gt;</span> &#123;</span><br><span class="line">        builder.addCase(fetchLastCounter.fulfilled, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                count: action.payload.count,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>非同期なコードはReduxからも独立したコードとして書けるので（上記の2つめの関数の中にはRedux関係の呼び出しが発生していない）、こちらの方が他の環境に持っていくとか、テストするのはしやすいかなと思います。</p><p>JS側のサンプルだと、extraReducersに次のように追加するコードがありますが、これだとコード補完がされないので、TypeScriptの場合はちょっとかっこ悪くてもbuilder経由で登録する必要があります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extraReducers: &#123;</span><br><span class="line">  [fetchLastCounter.fulfilled]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       ...state,</span><br><span class="line">       count: action.payload.count,</span><br><span class="line">     &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="既存のコードと混ぜるのは要注意"><a href="#既存のコードと混ぜるのは要注意" class="headerlink" title="既存のコードと混ぜるのは要注意"></a>既存のコードと混ぜるのは要注意</h1><p>slice単位で入れ替えとかもできるかしれませんが、既存のRedux Thunkを使って作った非同期なアクションをそのまま再利用しようとしたんですが、うまく型定義に混ぜる方法がわかっていません（dispatchに渡す型あたり）。型アサーションとかでコンパイラを黙らせればいけるんでしょうけど。</p><p>型推論パワーを役立てようと思ったら、少しずつ入れ替えではなくて、ごそっと入れ替えが必要な気がしています。このあたりはちょびっと試してやめてしまったので、他に挑戦した人がいたらアドバイスください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>TypeScriptのパワーを損なうことなく、短い行数でReduxが実現でき、記憶力もあまり使わなくていい、ディスプレイも小さくて済むという、今まで求めてきたものがようやく手に入りました。</p><p>2年半ほど前に大規模ウェブアプリを作ったときはJavaScript + React + Reduxでした。その後はAngularだったり、小さいものをvueやらReactでflux使わずに実装したりして、久々に再びReactをすることになったので、TypeScriptとの相性よくなったかなぁ、とググって見たら本家のRedux Toolkitが引っかかりました。本家のドキュメントも、十分に情報がありますが、createSliceとconfigureStoreのあたりから読んで、次にthunk周りを読んだ程度ですが、十分にパフォーマンスが発揮できました。</p><p>ReactもHooksが出てきて、Reduxもそれを使うように更新された一方、<a href="https://github.com/jamiebuilds/unstated" target="_blank" rel="noopener">unstated</a>のような新しいライブラリもでてきています。これもGitHubスター数も多いんですが、チームで使うには規約とかがある程度決まっている方が導入はしやすい（unstatedはどうもいろいろ自分で決める必要がありそう）です。Reduxに対する不満もだいぶなくなったので、まだまだReduxを使っていこうと思いました。</p><p>最近、僕が意識しているのはリーダブルなコードです。これはオライリーの本のReadableではなくて、コードが人を導いてくれる（Leadable）という意味です。一方で、ReduxとTypeScriptで感じていたのは、処理系を通すためにコードを書かされているという感覚ですね。オーダブル(Orderable)と呼んでいるけど、もっといい名前があったら教えてください。Redux Toolkitはだいぶ余計なことに頭を使わなくて済むので、とても良いです。</p><p>今年度40歳になるアラフォーのおっさんの衰える記憶力では、1つの処理を書くのに、4つも5つもあるファイルをつぎつぎに切り替えて書かなければならなかったのは苦痛でした。職場とか客先とか自宅とか色々なところで仕事する上で、いつも最高のモニタがあるわけではありませんので全部のファイルを開いておくこともできませんでした。型定義ファイル分割パズルも大変でした。でも、これでまだまだ現役続行できそうです。MacBookPro 16じゃなくてAirでも十分に開発できるかな。出費が半額ですみますね。保育園が閉鎖されてしまって、子供の面倒を見ながらフロントエンドのコードを書かないといけないパパ、ママにも強い味方です。</p><p>Redux toolkitと生のReduxを使って見て思うのは、ライブラリの設計の難易度が3倍ぐらいになったなぁ、という感じですね。TypeScriptで型推論が入ったのはあるのですが、その型推論が効きやすい、ライブラリユーザーが実装しなきゃいけない型情報を減らすための設計というのが、この後の主戦場になりそうだなぁ、ということです。今まではデータを加工する、というロジックだけを設計すれば良かったのですが、データの伝搬だけじゃなくて、型情報の伝搬というのも考慮しなければならないと。ある意味、C++プログラマーのテンプレート経験が生きるのかも、なぁ、という。まだあまり言語化できないのですが。Haskellな人とか得意だったりするんですかね？</p><h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><p>Redux Toolkitを使わない依存関係のサンプルコードを書いていたんですが、かえってわかりにくいので末尾にまとめました。</p><p>以下のコードは、JavaScript版のReduxを使ったアプリケーションの心臓部のReducerとstoreです。巨大なswitch文があり、その中でアクションに処理に応じてステートを更新します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; INCREMENT_COUNTER, DECREMENT_COUNTER &#125; <span class="keyword">from</span> <span class="string">'./actiontypes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123;count: <span class="number">0</span>&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> INCREMENT_COUNTER;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        counter: state.counter + action.payload.count</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> DECREMENT_COUNTER;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        counter: state.counter - action.payload.count</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = createStore(reducer);</span><br></pre></td></tr></table></figure><p>アクションを識別する定数。一番シンプルなのは文字列定数を使う方法でしょう。これを便利にするヘルパー関数もありました。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT_COUNTER = <span class="string">"INCREMENT_COUNTER"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT_COUNTER = <span class="string">"DECREMENT_COUNTER"</span>;</span><br></pre></td></tr></table></figure><p>TypeScriptを導入すると、StateとActionの型定義が入り、それを使うようにaction creatorも書き換えます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> State = &#123;</span><br><span class="line">  counter: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">incrementCounter</span>(<span class="params">count: <span class="built_in">number</span></span>): <span class="title">IncrementCounterAction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: INCREMENT_COUNTER,</span><br><span class="line">    count</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">decrement</span>(<span class="params">count: <span class="built_in">number</span></span>): <span class="title">DecrementCounterAction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: DECREMENT_COUNTER,</span><br><span class="line">    count</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> IncrementCounterAction = &#123;</span><br><span class="line">  <span class="keyword">type</span>: INCREMENT_COUNTER,</span><br><span class="line">  count: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> DecrementCounterAction = &#123;</span><br><span class="line">  <span class="keyword">type</span>: DECREMENT_COUNTER,</span><br><span class="line">  count: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アクションの型が揃うと、ようやくreducerが作成できます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IncrementCounterAction, DecrementCounterAction &#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RootAction = IncrementCounterAction | DecrementCounterAction;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state: State, action: RootAction</span>) </span>&#123;</span><br><span class="line">    :</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>どのファイルからどの順番でコードを書けばよかったんですかね？何度かトライしているものの、いつもなんかいまいちに感じていました。</p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li><li><a href="https://future-architect.github.io/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;フロントエンド記事集中投稿ウィークの3本目です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200428/&quot;&gt;Vue.jsのslotの機能を初心者にわかるように解説してみた&lt;/a&gt;
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="redux" scheme="https://future-architect.github.io/tags/redux/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>Reduxを分かりやすく解説してみた</title>
    <link href="https://future-architect.github.io/articles/20200429/"/>
    <id>https://future-architect.github.io/articles/20200429/</id>
    <published>2020-04-29T08:05:22.000Z</published>
    <updated>2020-05-01T01:22:07.220Z</updated>
    
    <content type="html"><![CDATA[<p>フロントエンド記事集中投稿ウィークの2本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、2019年4月入社の丸野です。<a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a> の記事を書いた柏木さんと同じチームに所属しています。</p><p>研修修了後PJにアサインされて約4ヶ月ほどReact.jsを使って開発を行ってきましたが、Reduxの理解にとても苦しみました。そこで今回はReduxの概要を噛み砕いて説明していきます。同じ悩みを持つ人の理解の助けになればと思います。<br>(Redux公式ドキュメントは<a href="https://redux.js.org/" target="_blank" rel="noopener">こちら</a>です。)</p><h1 id="開発で使用している技術要素"><a href="#開発で使用している技術要素" class="headerlink" title="開発で使用している技術要素"></a>開発で使用している技術要素</h1><ul><li>React.js（16.4.1）</li><li>Redux（3.7.2）</li></ul><h1 id="そもそもReduxって何か"><a href="#そもそもReduxって何か" class="headerlink" title="そもそもReduxって何か"></a>そもそもReduxって何か</h1><p>Reduxとは、React.jsで使用するstateつまりアプリケーションの状態を管理するフレームワークです<br>簡単にReduxの概念の下記に図式化してみました</p><img src="/images/20200429/1.png"><p><strong>State</strong>：アプリケーションの状態<br><strong>Action</strong>：ユーザーが何押したいかという情報を持つオブジェクト<br><strong>Reducer</strong>：Actionを元にStateを更新するメソッド<br><strong>Store</strong>：Stateの情報を保持している場所</p><h1 id="Reduxのデータフロー"><a href="#Reduxのデータフロー" class="headerlink" title="Reduxのデータフロー"></a>Reduxのデータフロー</h1><p>では上記で示した概略図をもとにReduxのデータフローをそれぞれ説明していきたいと思います</p><h2 id="①ActionCreatorsによってActionを生成する"><a href="#①ActionCreatorsによってActionを生成する" class="headerlink" title="①ActionCreatorsによってActionを生成する"></a>①ActionCreatorsによってActionを生成する</h2><ul><li>ユーザーのインプットによってComponent上からAction作成依頼が飛びActionCreatorでActionが作成されます</li></ul><img src="/images/20200429/2.png" class="img-small-size"><ul><li>今回はStateの更新を目的としたActionを想定いたします</li><li>作成されるActionは下記のようなもので、type項目で他のActionと区別しています</li></ul><figure class="highlight js"><figcaption><span>Action.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Action</span></span><br><span class="line">&#123;</span><br><span class="line">    type: <span class="string">"UpdateStateA"</span>,</span><br><span class="line">    testStateA</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ActionCreatorとはActionを作成するメソッドのことをいいます</li><li>上記のActionを作成するActionCreatorのサンプルコードは下記のようになります</li></ul><figure class="highlight js"><figcaption><span>ActionCreater.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Action Creator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunctionA</span>(<span class="params">testStateA</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//Action</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">            type: <span class="string">"UpdateStateA"</span>,</span><br><span class="line">            testStateA</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>コンポーネントで上記のActionをImportすることで、Action作成を依頼できます</li></ul><figure class="highlight js"><figcaption><span>Component.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; testFunctionA &#125; <span class="keyword">from</span> <span class="string">"testActionCreator"</span>;</span><br></pre></td></tr></table></figure><h2 id="②Actionをdispatchする"><a href="#②Actionをdispatchする" class="headerlink" title="②Actionをdispatchする"></a>②Actionをdispatchする</h2><img src="/images/20200429/3.png" class="img-small-size"><ul><li>Actionを生成するだけではStore内のStateを更新することは出来ません</li><li>dispatchすることによってActionをStoreに送ることが出来ます</li></ul><figure class="highlight js"><figcaption><span>Component.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dispatch</span></span><br><span class="line">dispatch(testFunctionA());</span><br></pre></td></tr></table></figure><h2 id="③ReducerによってStore内のStateを更新する"><a href="#③ReducerによってStore内のStateを更新する" class="headerlink" title="③ReducerによってStore内のStateを更新する"></a>③ReducerによってStore内のStateを更新する</h2><ul><li>Reducerとは、Actionを元にStateを更新するメソッドのことを言います</li><li>引数のstateの更新するのではなく、新しいstateのオブジェクトを返します</li><li>各Actionのtypeごとによって処理内容を変更できます</li></ul><figure class="highlight js"><figcaption><span>Reducer.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testReducer = <span class="function">(<span class="params">&#123; testStateA = <span class="string">""</span>, testStateB = <span class="string">""</span> &#125; = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UpdateStateA"</span>:</span><br><span class="line">            testStateA = action.testStateA;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UpdateStateB"</span>:</span><br><span class="line">            testStateB = action.testStateB;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        testStateA,</span><br><span class="line">        testStateB</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="④ReactとReduxを連携しStore内のStateをComponentで参照する"><a href="#④ReactとReduxを連携しStore内のStateをComponentで参照する" class="headerlink" title="④ReactとReduxを連携しStore内のStateをComponentで参照する"></a>④ReactとReduxを連携しStore内のStateをComponentで参照する</h2><ul><li>mapStateToPropsを使用するとComponentのpropsにStateの中身を詰め込むことが出来ます</li><li>それによって、Store内にあるStateををthis.props.testStateAとして使用することが出来ます</li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>説明させていただいたReduxの概要は下記の通りです。</p><ol><li><strong>ActionCreatorsによってActionを生成する</strong></li><li><strong>Actionをdispatchする</strong></li><li><strong>ReducerによってStore内のStateを更新する</strong></li><li><strong>ReactとReduxの連携しStore内のStateをComponentで参照する</strong></li></ol><p>最後に、ご紹介したコード例全体像はこちらです。<br>(※今回はComponent、ActionCreater、Reducerをそれぞれ別ファイルで作成しています。）</p><figure class="highlight js"><figcaption><span>Test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component</span></span><br><span class="line"><span class="keyword">import</span> &#123; testFunctionA &#125; <span class="keyword">from</span> <span class="string">"testActionCreator"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    Update() &#123;</span><br><span class="line">        <span class="comment">// dispatch</span></span><br><span class="line">        dispatch(testFunctionA());</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Action Creator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunctionA</span>(<span class="params">testStateA</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//Action</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">            type: <span class="string">"UpdateStateA"</span>,</span><br><span class="line">            testStateA</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testReducer = <span class="function">(<span class="params">&#123; testStateA = <span class="string">""</span>, testStateB = <span class="string">""</span> &#125; = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UpdateStateA"</span>:</span><br><span class="line">            testStateA = action.testStateA;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UpdateStateB"</span>:</span><br><span class="line">            testStateB = action.testStateB;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        testStateA,</span><br><span class="line">        testStateB</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はReduxの基礎的な部分の解説をさせていただきました。Redux理解の足がかりにしていただければ幸いです。</p><p>また、今後もよりReactの実装に踏み込んだ内容を投稿できたらと思っております。</p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li><li><a href="https://future-architect.github.io/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;フロントエンド記事集中投稿ウィークの2本目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、2019年4月入社の丸野です。&lt;a href=
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
      <category term="Redux" scheme="https://future-architect.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Vue.jsのslotの機能を初心者にわかるように解説してみた</title>
    <link href="https://future-architect.github.io/articles/20200428/"/>
    <id>https://future-architect.github.io/articles/20200428/</id>
    <published>2020-04-28T09:42:56.000Z</published>
    <updated>2020-05-01T01:22:16.023Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200428/top.png" class="img-middle-size"><p>フロントエンド記事集中投稿ウィークの1本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。2017年入社の永井です。</p><p>東郷さんによる<a href="https://future-architect.github.io/articles/20200401/">「Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた」</a>はご覧になられましたでしょうか？おそらくVue.js最初の難関は無事乗り越えられたと思います！</p><p>今回は「Vue.js初心者にわかるように解説してみた」第二弾として、props down,event up と同様に親子関係が肝となる、「slot」について、初心者に向けて説明していきたいと思います。</p><h1 id="slotとは"><a href="#slotとは" class="headerlink" title="slotとは"></a>slotとは</h1><p>slotとは<strong>親となるコンポーネント側から、子のコンポーネントのテンプレートの一部を差し込む機能</strong> です。</p><ul><li>スロットというと「スロットマシン」が思い浮かびますが、もともとslotの「差し込み口」という意味から派生して、コインの投入口があるスロットマシンの意味をもつようになったそうです。</li></ul><p>以下では大きく3つ、デフォルトのslot、名前付きslot、スコープ付きslotについて、説明していきます。</p><p>以下ではVue Cliを利用します。インストールしたときに作られているAbout.vue上で挙動を試す、擬似ハンズオン形式で説明していきます。</p><ul><li>インストールについては、<a href="https://cli.vuejs.org/guide/installation.html" target="_blank" rel="noopener">Vue Cli公式ドキュメント</a>などを参考に進めてください。</li></ul><h1 id="デフォルトslot"><a href="#デフォルトslot" class="headerlink" title="デフォルトslot"></a>デフォルトslot</h1><h3 id="コンポーネントの復習"><a href="#コンポーネントの復習" class="headerlink" title="コンポーネントの復習"></a>コンポーネントの復習</h3><p>/src/components 配下にとても簡単なコンポーネントを作成します。</p><figure class="highlight html"><figcaption><span>myCom.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mycom"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>name: Mirai Taro<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>/src/views/About.vue 上で、作ったコンポーネントを呼び出します。<br>以下のソースでは、<code>&lt;MyCom&gt;</code> <code>&lt;/MyCom&gt;</code> のタグでコンポーネントを利用します。ここで <code>&lt;MyCom&gt;</code>タグに囲まれた部分が無視されていることを確認してください。下記ではそれを試すために、「未来太郎」と記述してみます。</p><figure class="highlight html"><figcaption><span>About.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span>未来太郎<span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">import MyCom from '../components/MyCom.vue'</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyCom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>💻画面の出力結果：</p><img src="/images/20200428/photo_20200428_01.png" class="img-small-size" style="border:solid 1px #000000"><p>About.vue上で「未来太郎」と記述した部分は出力されません。</p><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><p>コンポーネント側のテンプレートに<code>&lt;slot&gt;</code>タグを記述すると、その場所ではスロットコンテンツが埋め込まれます。</p><figure class="highlight html"><figcaption><span>myCom.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mycom"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:<span class="tag">&lt;<span class="name">slot</span>&gt;</span>Mirai Taro<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>親側でスロットコンテンツが定義されていた場合は、<code>&lt;slot&gt;</code>タグで囲まれたコンポーネント側のコンテンツは表示されず、親側のスロットコンテンツが表示されます。今回の例ではAbout.vue上の「未来太郎」が表示されていることを確認してください。</p><p>💻画面の出力結果：</p><img src="/images/20200428/photo_20200428_04.png" class="img-small-size" style="border:solid 1px #000000"><h1 id="名前付きslot"><a href="#名前付きslot" class="headerlink" title="名前付きslot"></a>名前付きslot</h1><p>複数のslotを利用したい場合には、異なる名前をつけて利用します。</p><p>Vue 2.6.0以降は、コンポーネント側では、<code>&lt;slot name = &quot;XXX&quot;&gt;</code>で名前付きslotを定義します。</p><figure class="highlight html"><figcaption><span>myCom.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mycom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"nm"</span>&gt;</span>Mirai Taro<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>address:<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"add"</span>&gt;</span>Osaki<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>親側では、<code>v-slot:XXX</code>の形で、コンポーネントのタグ内で差し込みたい名前付きslotを指定することができます。</p><figure class="highlight html"><figcaption><span>About.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span><span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:nm</span>&gt;</span>未来太郎<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:add</span>&gt;</span>渋谷<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">import MyCom from '../components/MyCom.vue'</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyCom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上記ソースでは、1行目がコンポーネント通りに出力、２行目は、氏名が親側のコンテンツに、3行目は住所が親側のコンテンツに置き換わっていることを確認してください。</p><p>💻画面の出力結果：</p><img src="/images/20200428/photo_20200428_03.png" class="img-small-size" style="border:solid 1px #000000"><h3 id="名前つきslotの省略記法"><a href="#名前つきslotの省略記法" class="headerlink" title="名前つきslotの省略記法"></a>名前つきslotの省略記法</h3><p>v-bind を 「:」、v-onを「@」で省略できるように、v-slotも「#」で省略して記述することができます。<br>上記のAbout.vueのソースは以下のように書いてもよいです。</p><figure class="highlight html"><figcaption><span>About.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span><span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">nm</span>&gt;</span>未来太郎<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">add</span>&gt;</span>渋谷<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">import MyCom from '../components/MyCom.vue'</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyCom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="スコープ付きslot"><a href="#スコープ付きslot" class="headerlink" title="スコープ付きslot"></a>スコープ付きslot</h1><p>スコープ付きslotを利用することで、子コンポーネントから親コンポーネントに対して、スロットコンテンツの定義に必要なデータを受け取ることが可能です。</p><ul><li>実務上では、子から親へデータを渡したい時はVuex使ったほうが良い場面が多いかと思いますが、今回はslotの説明の記事なので触れることとします。</li></ul><p>こちらもvue 2.6.0より推奨されている書き方が変わっています。</p><h3 id="うまくいかないパターン"><a href="#うまくいかないパターン" class="headerlink" title="うまくいかないパターン"></a>うまくいかないパターン</h3><p>以下のようにコンポーネントを準備します。</p><figure class="highlight html"><figcaption><span>MyCom.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mycom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:<span class="tag">&lt;<span class="name">slot</span>&gt;</span>&#123;&#123; userNm.enName &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">export default &#123;</span><br><span class="line">  name: 'MyCom',</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userNm: &#123;</span><br><span class="line">        enName: 'Mirai Taro',</span><br><span class="line">        jpName: '未来太郎' // ←slot内で参照したいデータ</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>この時、以下のようにして、jpNameを親側から呼び出すことはできません。</p><figure class="highlight html"><figcaption><span>About.vue(アンチケース)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">      &#123;&#123; userNm.jpName &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">import MyCom from '../components/MyCom.vue'</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyCom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="スコープ付きslotの記述方法"><a href="#スコープ付きslotの記述方法" class="headerlink" title="スコープ付きslotの記述方法"></a>スコープ付きslotの記述方法</h3><p>スコープ付きslotを利用するには、子コンポーネント側では、<code>&lt;slot&gt;</code>タグに対してv-bindを行います。</p><figure class="highlight html"><figcaption><span>MyCom.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mycom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:<span class="tag">&lt;<span class="name">slot</span> <span class="attr">:userNm</span>=<span class="string">"userNm"</span>&gt;</span>&#123;&#123; useNm.enName &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">export default &#123;</span><br><span class="line">  name: 'MyCom',</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userNm: &#123;</span><br><span class="line">        enName: 'Mirai Taro',</span><br><span class="line">        jpName: '未来太郎' // ←slot内で参照したいデータ</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>親側では<code>&lt;v-slot:default&gt;</code>で受け取ることで、子コンポーネントのjpNameの値をとることができます。<code>&lt;v-slot:default=&quot;slotProps&quot;&gt;</code>のslotPropsは任意ですので重複がなければ、どんな文字列でも構いません。（公式ドキュメントに合わせました。）</p><figure class="highlight html"><figcaption><span>About.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCom</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">      &#123;&#123; slotProps.userNm.jpName &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">import MyCom from '../components/MyCom.vue'</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyCom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>なお、名前付きslotを併用する場合、defaultの部分はそれぞれのslotの名前となります。</p><ul><li>slotに名前が設定されていない時のデフォルトの名前がdefaultになるということです。</li></ul><p>💻画面の出力結果：</p><img src="/images/20200428/photo_20200428_04.png" class="img-small-size" style="border:solid 1px #000000"><p>無事、子コンポーネント側のjpNameの値を画面に出力することができました！</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>slotの機能はドキュメントなどを読んでもいまいちピンとこなかったり、2.6.0以降で推奨される書き方が変わったりで、個人的には学習に苦労してしまいました。<br>もし同様に苦しんでいる方がいらっしゃいましたら、今回の擬似ハンズオンでイメージがつかめたら幸いです。</p><h1 id="雑談"><a href="#雑談" class="headerlink" title="雑談"></a>雑談</h1><ul><li>お気づきかも知れませんが、「未来太郎」さんはフューチャー社内でよく記入例に使われる名前です。</li><li>例に出てきた「Osaki（大崎）」はフューチャーの所在地です。現在、大崎アートヴィレッジやthinkparkに入居しています。<a href="https://www.future.co.jp/recruit/new/about/place/" target="_blank" rel="noopener">こんなオフィスです。</a>（フューチャーの採用ページのwork placeのページに飛びます）</li><li>例に出てきた「渋谷」は2006年ごろ（フューチャーシステムコンサルティング時代）までの所在地です。<a href="http://www.nopa.or.jp/prize/list/past/nikkei/13/suisin/index.htm#future" target="_blank" rel="noopener">こんなオフィスだったそうです。（外部リンク）</a></li></ul><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200401/">Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた</a></li><li><a href="https://future-architect.github.io/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200428/top.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;フロントエンド記事集中投稿ウィークの1本目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>Goならわかるシステムプログラミングが増刷されて初版4刷になりました</title>
    <link href="https://future-architect.github.io/articles/20200427/"/>
    <id>https://future-architect.github.io/articles/20200427/</id>
    <published>2020-04-27T01:03:55.000Z</published>
    <updated>2020-04-27T01:10:05.411Z</updated>
    
    <content type="html"><![CDATA[<p>Goならわかるシステムプログラミングが増刷されました。増刷される場合にはたいてい誤字が修正されたりするんですが、今回12ページほど増量しております。<a href="http://blog.shibu.jp/article/185504106.html" target="_blank" rel="noopener">前回の3刷でも16ページ増えた</a>ので、初版と比べると28ページ増です。写真は1刷〜4刷の比較です。</p><img src="/images/20200427/photo_20200427_01.jpeg" class="img-middle-size"><p>なぜか、Real World HTTP 第2版の原稿の締め切りも、レビューの締め切りも、最終的な印刷所に原稿が運ばれて行くタイミングもだだ被りで、ちょっと忙しかったのですが、無事みなさまにお届けできる運びとなりました。</p><h1 id="変わった内容"><a href="#変わった内容" class="headerlink" title="変わった内容"></a>変わった内容</h1><p>一番大きな変更はFUSEを使ったファイルシステムを作ろう、というネタを追加したことですね。もともとアスキーの連載から書籍版を作る時に、一度は足したいネタにリストアップはしていたのですが、実装や検証期間を考えるとちょっと手強そうだぞ、ということで落ちた内容です。<a href="https://future-architect.github.io/articles/20191111/">フューチャーの技術ブログでgocloud.devの紹介</a>をしましたが、せっかくなのでこれを使って、AWS S3やらGoogle Cloud Storageをマウントとして読み込み専用でアクセスするファイルシステムを簡易実装しています。</p><p>それ以外はコラムが増えるとか、段落が増えるとか注釈が増えるとかが中心です。</p><p>TeeReaderのTeeはUNIXのteeコマンドが由来というのは知っていたけど、それはアルファベットのT由来だから、みたいな小ネタ（Qiitaの記事は消えてしまっているし、Wikipediaの説明の方を参照先としています）とか。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">&gt; 区切り用のパイプの形がアルファベットのTに似ていることから<br><br>ｿｯﾁｶｰ (´・ω・`)<a href="https://t.co/GWMqZRXzFb" target="_blank" rel="noopener">https://t.co/GWMqZRXzFb</a></p>&mdash; MURAOKA Taro (@kaoriya) <a href="https://twitter.com/kaoriya/status/1052060869780156416?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 16, 2018</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>あとは、<a href="https://songmu.jp/riji/entry/2019-07-16-gocon-fukuoka.html" target="_blank" rel="noopener">Songmuさんの福岡の発表</a>がとてもシステムプログラミングだったので、シグナルの扱いとかいくつか引用させていただきました。<code>exec.CommandContext()</code>でタイムアウトとかキャンセルされるとSIGKILLが飛ぶんですよとか。シグナル周りでは、doi-t氏のブログエントリーの「<a href="http://doi-t.hatenablog.com/entry/revisit-linux-signals-in-go" target="_blank" rel="noopener">読了、Goならわかるシステムプログラミング: Linuxシグナル再訪 in Go</a>」も参照先にくわえさせていただきました。循環参照ですね。 </p><p>メモリ周りも<a href="https://superuser.com/questions/1219609/why-is-the-alpine-docker-image-over-50-slower-than-the-ubuntu-image" target="_blank" rel="noopener">AlpineのDockerイメージを使うとPythonのパフォーマンスが落ちる話</a>とか、メモリとパフォーマンスに関する説明をちょっと追記したりしました。あとは<code>sync.Pool</code>は<code>sync</code>パッケージではありますがスラブアロケータとかパフォーマンス改善の文脈で説明した方がよかろう、とメモリの章に移動しました。かの有名なLinuxコミッターの小崎さんが、メモリ管理のページテーブルで消費されるメモリを「天使のわけまえ」と呼んでいて、さすがオシャレだなぁ、と思って引用したり。</p><p>あとはさらに細かいところでは、ストレージがSSDに変わることでOS側の戦略が変わったところを紹介したり、/dev/urandom周りの話題をちょびちょび追加したり、<a href="https://future-architect.github.io/articles/20191120/">フューチャーの辻さんの発表資料</a>を引用するなど、乱数まわりも少し追記したりしています。</p><h1 id="さらなる追加の章"><a href="#さらなる追加の章" class="headerlink" title="さらなる追加の章"></a>さらなる追加の章</h1><p>今年は<a href="https://www.lambdanote.com/collections/frontpage/products/nmonthly-vol-2-no-1-2020" target="_blank" rel="noopener">n月刊ラムダノート</a>という方にも寄稿したのですが、これはもともと3刷のときに追加しようと書き始めたのですが、30ページ以上にも渡りそうで、分量が多すぎて収録を断念したコンテンツでした。本文の最初にも書いたのですが、システムプログラミングという言葉は範囲が広くて、本や説明によって多少範囲が違ったりします。OSの中、OSの外、ネイティブコードを生成するコンパイラetc。今までもOSの中についてはシステムコールの内側の実装紹介や、OSのファイルシステムやメモリの動きなどを紹介はしていましたが、主にOSのブートストラップ部分を中心に解説しています。</p><p>このn月刊ラムダノートですが、西田さんのQUICの説明はすばらしく、そのとき執筆中だったReal World HTTP第2版からも参照先としています。QUICに関する説明としては現在日本で一番詳しいと思います。</p><p>また、dRubyの記事を書かれた咳さんは、僕がホンダ時代に参加していた、とちぎRubyで一緒に勉強させていただいた、僕の方向性やら何やらにすごく影響を与えてくださったすごい人です。きちんと過去のアーキテクチャを把握して学び、それを現代の実装に生かす、しかも出来上がったものはその時の流行に左右されていないオンリーワンなもの、というdRubyのかっこよさは僕の中では未だにダントツです。今回は過去の書籍からいろいろアップデートされ、ブラウザに対してServer Sent Eventsを使った通信したり、Raspberry PiとQRコードリーダーが登場するなど、dRubyがRubyの枠を超えていてこれも必見です。</p><h1 id="どこで買える？"><a href="#どこで買える？" class="headerlink" title="どこで買える？"></a>どこで買える？</h1><p>本日から、いろいろな書店とかには並んでいるようです。確実なのは<a href="https://www.lambdanote.com/products/go" target="_blank" rel="noopener">ラムダノートのウェブサイト</a>から購入ですね。あと、すでにラムダノートの直販サイトで購入してくださった方で、ユーザー登録している方は最新版のPDFのダウンロードができるようになっています。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200421/">Real World HTTP 第2版はなぜ1.5倍になったのか</a></li><li><a href="https://future-architect.github.io/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191203/">Go Conferenceの📛を作る</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Goならわかるシステムプログラミングが増刷されました。増刷される場合にはたいてい誤字が修正されたりするんですが、今回12ページほど増量しております。&lt;a href=&quot;http://blog.shibu.jp/article/185504106.html&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="出版" scheme="https://future-architect.github.io/tags/%E5%87%BA%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>社内勉強会で発表したGCP資料を公開します</title>
    <link href="https://future-architect.github.io/articles/20200424/"/>
    <id>https://future-architect.github.io/articles/20200424/</id>
    <published>2020-04-24T01:23:37.000Z</published>
    <updated>2020-04-25T01:58:07.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXチームの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤</a>です。この技術ブログでGCPネタをよく発信していますが、今回もGCPネタです。好きです、GCP。フューチャーの社内では定期的に勉強会を開催している部門があり、全社的に登壇者を募って発表しています。今回は私自身社内にGCPを広めたいという思いがあり登壇の機会をいただきました。今回はその時のまとめや一部改善した内容になります。また、リモートでの勉強会ということもあり、個人的に気をつけた点も簡単にまとめたので、その辺も参考になればと思います。</p><h2 id="話す前の準備"><a href="#話す前の準備" class="headerlink" title="話す前の準備"></a>話す前の準備</h2><p>今回は社内で広く利用しているGoogle Meetを使ってオンラインで勉強を行いました。勉強会としても私としてもリモート開催がそもそも初めてなので、質問を受けやすいように区切りのいいとこで質問タイムを設けました。また、オンラインだと反応が見にくいというのがあり、<a href="https://www.sli.do/" target="_blank" rel="noopener">sli.do</a>で質問を募ったり、単純な感想などを随時書いてもらう形式を取りました。その場で答えられなかった質問については後日Appendixという形で展開を考えています。まだまだオンラインで開催するに当たっては改善点もたくさんあるので、広く知識等を身につけていきたいところです。</p><h2 id="話したこと"><a href="#話したこと" class="headerlink" title="話したこと"></a>話したこと</h2><p>今回話した内容はここからになります。発表時のスライドは以下になりますので、時折記事と照らし合わせながら見てもらえればと思います。一部社内向けにしていたものを社外向けにしたり、不要なスライドは削っている部分はありますが、基本的に同じ内容になります。</p><script async class="speakerdeck-embed" data-id="1a60e1e45b3a4b3d9b8137568d04a3c9" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>今回は大きく4つの内容に分けて話しました。</p><ul><li>GCPとは何か</li><li>AWSとの違い</li><li>ハイブリッド・マルチクラウドで使うときに使えるサービス</li><li>GCPならではのユースケース</li></ul><p>今回の勉強会の参加者はオンプレミスの案件であったり、AWSを使っている方が中心だったので、GCPを今の環境に導入する際によりクイックに効くものを中心に盛り込見ました。そのため、各プロダクトやGKE周りの話は今回カットしました（その文脈では最後のユースケースの部分はどちらかというとおまけに近い内容です）。以下では特に説明したかった部分についてかいつまんで書いていきます。</p><h2 id="GCPとは"><a href="#GCPとは" class="headerlink" title="GCPとは"></a>GCPとは</h2><p>クラウドの利点はおおよそどのベンダーを使っても享受できると思うので、ここでは私が考えるGCPとは、そしてGoogleのネットワークについて説明しました。私自身GCPのプロダクトを見たり使っていてこれだ！と感じているのは、</p><ul><li>Googleがこれまでに培ってきた高品質かつスケーラブルのインフラを誰でも比較的安価に使えること</li><li>Google発信のOSSをマネージドサービスとして利用できること</li></ul><p>です。GCPに乗せることでGoogleのネットワークを使えることはかなり大きなメリットではないかと思っています。Googleはネットワークで海底ケーブルなどへの投資も行なっていたり、続々とリージョンを開設しているので、今後もネットワーク周りは強化されていくでしょう。また、KubernetesはもともとGoogleの社内でBorgとして培われた技術で、現在はCNCFにホストされています。これをマネージドとしてGoogle Kubernetes Engine(GKE)として簡単に使うことができることも大きなメリットであり、「GCPだから！」というポイントであると考えています。</p><h2 id="AWSとの違い"><a href="#AWSとの違い" class="headerlink" title="AWSとの違い"></a>AWSとの違い</h2><p>前職でAWSを使っていたこともあり、AWSとGCPの思想や根本の設計がなんとなく違うことは理解していましたが、これを機会に図示や説明してみました。私がAWSとGCPで異なっていて、これは大きな違いであると感じたのは</p><ul><li>プロジェクトの管理方法</li><li>ネットワーク</li></ul><p>の2点です。ここは少し細かめに説明していきます。</p><h3 id="プロジェクトの考え方"><a href="#プロジェクトの考え方" class="headerlink" title="プロジェクトの考え方"></a>プロジェクトの考え方</h3><p>私は以前、AWSを使っていたこともあり、GCPを使い始めたときに、大きく違うと印象を受けたうちの1つがプロジェクトの考え方です。こちらはGCPの<a href="https://cloud.google.com/blog/ja/products/gcp/mapping-your-organization-with-the-google-cloud-platform-resource-hierarchy" target="_blank" rel="noopener">公式ブログ</a>から引用したものになります。</p><img src="/images/20200424/photo_20200424_01.png"><p>AWSはアカウント1つに対してプロジェクトは1つです。AWS Organizationsもリリースされましたが、基本的な考え方は変わらず同じだと思っています。プロジェクトで1つのアカウントとしている場合、開発環境や本番環境のリソースが混在するため、誤操作で本番環境のリソースを謝って削除してしまうなどもオペレーションミスなども発生しているのではないかと思いっています。私はまさにその状態で運用していたため、CLIを使うときにかなり気を揉んでいた覚えがあります。<br>一方、GCPはアカウント1つに対してプロジェクトを複数作成できます。個人的な開発目的でも単一のアカウントで環境を分離できるため、オペレーションミスの軽減に繋がるかと思います。また、プロジェクトごと削除することができるため、個人でお試しをするときは便利です。<br>次にアカウントを会社単位で管理するときについてです。最上位に当たるものはOrganization Nodeになります。企業のドメイン(当社であれば<code>future.co.jp</code>です)をOrganizationの最上位にし、その配下にはフォルダやプロジェクトを設定することができます。フォルダの使いどころとしては、サービスごとに切り分け、各フォルダごとに本番環境、検証環境、開発環境を設定する使い方や、ファイナンシャル部門が請求を見るためのフォルダとプロジェクトを設定してもいいでしょう。プロジェクトは環境ごとにリソースを分離しています。</p><h3 id="ネットワークの違い"><a href="#ネットワークの違い" class="headerlink" title="ネットワークの違い"></a>ネットワークの違い</h3><p>ここでもAWSとGCPの考え方の違いを感じました。<br><img src="/images/20200424/photo_20200424_02.png"><br>スライドの図を実際に持ってきました。まとめると以下の表になります。</p><table><thead><tr><th></th><th>VPCの考え方</th><th>VPCとNWレンジ</th><th>Subnetの切り出し方</th><th>Subnetの紐づくところ</th></tr></thead><tbody><tr><td>AWS</td><td>仮想的なNW</td><td>紐づく</td><td>VPCから切り出す</td><td>ゾーン</td></tr><tr><td>GCP</td><td>あくまで枠</td><td>紐づかない</td><td>それぞれ選べる</td><td>リージョン</td></tr></tbody></table><p>GCPを使い始めたとき、VPCの設計がリージョンもまたいで使用できる「枠」という使い方も新鮮でした。ロードバランサもグローバルリソースとして扱えることもあり、サービスを世界展開したいときにはかなり役立つのではないでしょうか？</p><h2 id="GCPならではのサービス"><a href="#GCPならではのサービス" class="headerlink" title="GCPならではのサービス"></a>GCPならではのサービス</h2><p>最後はGCPが得意とするサービスを少し紹介しました。データ分析にBigQueryを使用するためにAWSとハイブリッドにしているパターンも多いのではないでしょうか？ここではスライドの内容を複合的にまとめて、AWSで分析したいデータをためてGCPで分析できるようにする流れを見てみましょう。ストレージのページで、Transfer Serviceを説明しましたが、組み合わせると以下の図になります。</p><img src="/images/20200424/photo_20200424_03.png"><p>簡単な図ですが、ログを集積するバケットをAWSに設けて、これをTransfer ServiceでGCSに連携することでBigQueryが読み込むことが可能になります。また、Transfer Service自体はオンプレとも接続ができるため、ハイブリッドクラウド、マルチクラウドで分析基盤として利用ができます。<br>機械学習についても、Google Lensをはじめとしたサービスに多用されています。私がGoogleと機械学習で印象深い話があり、それは<a href="https://cloudplatform-jp.googleblog.com/2016/08/tensorflow_5.html" target="_blank" rel="noopener">きゅうりをAIで仕分ける話</a>です。この記事ではGCPのサービスを活用して問題解決しているわけではありませんが、Cloud TPUを活用したらより学習効率や精度の向上が見込めると考えました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回社内で勉強会に登壇する場ををもらい、私自身とても良い機会になりました。GoogleはOSSの発信以外にもエラーバジェットやSREといった、新たな考え方なども提唱しています。私が今回資料を作るにあたり、</p><ul><li>マイクロサービス</li><li>Kubernetesを使うためのネットワーク設計</li></ul><p>の2点を感じました。Organizationの設計はマイクロサービス化するためにはとてもフィットしていて、それぞれ分担して機能を担うことも可能にしているのではないかと思いました。また、Zoneをまたいでサブネットを決定できるのもKubernetesを扱う上で無駄なくIPレンジを使用できる設計ではと考えています。この辺は今回資料を作るにあたり、いい気づきになりました。<br>今回はGCPがAWSに比べていい、みたいな意見が多いと思いますが、ユースケースなど様々だとなので、どちらも良いところはあると思います。</p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20191129/">GDG DevFest in 信州2019に登壇しました</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="https://future-architect.github.io/articles/20191119/">Go Cloud#6 GCPのローカルエミュレータを活用する</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG/DXチームの&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>Session Manager と踏み台サーバの共存構成</title>
    <link href="https://future-architect.github.io/articles/20200423/"/>
    <id>https://future-architect.github.io/articles/20200423/</id>
    <published>2020-04-23T01:23:54.000Z</published>
    <updated>2020-04-23T01:34:42.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちはー<br>TIG DX Unit のゆるふわエンジニアの前原です。</p><p>突然ですが、Session Manager 使ってますか？調べるとブログがたくさん掲載されているので使っているところは多いのかな？って思っています。</p><p>また、ブログのタイトルを見ると以下のメッセージが多い印象を受けました。</p><ul><li>さよなら踏み台サーバ</li><li>もういらない踏み台サーバ</li><li>..etc</li></ul><p>なんか、可哀想になってきますね。。<br>とはいえ、こういったメッセージが多い理由としては、以下のメリットからだと考えられます。</p><ul><li>踏み台サーバ不要でAWS リソースに容易にアクセスすることが可能</li><li>SSH のキー管理も不要で、IAM User と必要な権限が付与されていればアクセスできる</li><li>Security Group を意識しなくていい</li><li>操作ログも自動でCloudWatch Logs で取得される</li><li>CloudTrail では、セッションを張った時のイベントが取得される</li></ul><p>仮に踏み台サーバを運用しようとすると上記のことを踏まえて構成、メンテナンスを行う必要があります。<br>これは、Session Manager を利用するのが必然に感じますね。</p><p>しかし、運用している踏み台サーバをSession Manager に移行するのは難しいところもあると思います。例えば、踏み台サーバに色々な役割を持たせているケースもあると思います（例えば、プロビジョニング用途など）。踏み台サーバの本来の役割的には、、と思った人もいると思いますが、現実は割とごった煮サーバになっているケースもあります。</p><p>そこで、踏み台サーバを生かしつつ、Session Manager を利用できる方法について説明したいと思います。</p><h1 id="踏み台サーバとSession-Manager-の共存構成"><a href="#踏み台サーバとSession-Manager-の共存構成" class="headerlink" title="踏み台サーバとSession Manager の共存構成"></a>踏み台サーバとSession Manager の共存構成</h1><p>ここで紹介する構成は、以下です。<br>下記の図に記載されているbastion serverは、踏み台サーバを指しています。</p><ul><li>Session Manager を通してSSH で踏み台サーバへアクセス</li></ul><img src="/images/20200423/photo_20200423_01.jpeg"><ul><li>ポートフォワードでRDS にアクセス</li></ul><img src="/images/20200423/photo_20200423_02.jpeg"><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>サーバ側の準備とクライアント側の準備が必要になります。</p><h3 id="サーバ側の準備"><a href="#サーバ側の準備" class="headerlink" title="サーバ側の準備"></a>サーバ側の準備</h3><p>Session Manager のアクセス許可を行うため、対象のEC2（ここでいう踏み台サーバ）に<a href="https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/session-manager-getting-started-instance-profile.html" target="_blank" rel="noopener">AmazonSSMManagedInstanceCore</a>ポリシを追加します。<br>もし必要なアクションのみを追加したい場合は、以下を追加します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">    <span class="attr">"Statement"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"ssmmessages:CreateControlChannel"</span>,</span><br><span class="line">                <span class="string">"ssmmessages:CreateDataChannel"</span>,</span><br><span class="line">                <span class="string">"ssmmessages:OpenControlChannel"</span>,</span><br><span class="line">                <span class="string">"ssmmessages:OpenDataChannel"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"logs:CreateLogGroup"</span>,</span><br><span class="line">                <span class="string">"logs:CreateLogStream"</span>,</span><br><span class="line">                <span class="string">"logs:PutLogEvents"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"s3:GetEncryptionConfiguration"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"kms:Decrypt"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"key-name"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>踏み台サーバのSSM エージェントが<code>2.3.672.0</code>以上である必要があります。<br>もし古い場合は、<a href="https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/sysman-manual-agent-install.html" target="_blank" rel="noopener">ここのサイト</a>を参考にしてください。<br>バージョンが古いとSession Manager を通してSSH で接続することができません。</p><h3 id="クライアント側の準備"><a href="#クライアント側の準備" class="headerlink" title="クライアント側の準備"></a>クライアント側の準備</h3><p>Session Manager plugin をインストールします。<br>前提として、<code>AWS CLI</code> が使用できることと、適切なIAM Policy がアタッチされていることを前提とします。</p><h4 id="Mac-インストール方法"><a href="#Mac-インストール方法" class="headerlink" title="Mac インストール方法"></a>Mac インストール方法</h4><p>プラグインをダウンロードします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">"https://s3.amazonaws.com/session-manager-downloads/plugin/latest/mac/sessionmanager-bundle.zip"</span> -o <span class="string">"sessionmanager-bundle.zip"</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 4680k  100 4680k    0     0   174k      0  0:00:26  0:00:26 --:--:--  120k</span><br></pre></td></tr></table></figure><p>ダウンロードしたファイルを解凍します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ unzip sessionmanager-bundle.zip</span><br><span class="line">Archive:  sessionmanager-bundle.zip</span><br><span class="line">   creating: sessionmanager-bundle/</span><br><span class="line">   creating: sessionmanager-bundle/bin/</span><br><span class="line">  inflating: sessionmanager-bundle/seelog.xml.template</span><br><span class="line">  inflating: sessionmanager-bundle/LICENSE</span><br><span class="line">  inflating: sessionmanager-bundle/VERSION</span><br><span class="line">  inflating: sessionmanager-bundle/install</span><br><span class="line">  inflating: sessionmanager-bundle/bin/session-manager-plugin</span><br></pre></td></tr></table></figure><p>プラグインのインストールをします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./sessionmanager-bundle/install -i /usr/<span class="built_in">local</span>/sessionmanagerplugin -b /usr/<span class="built_in">local</span>/bin/session-manager-plugin</span><br><span class="line">Password:</span><br><span class="line">Creating install directories: /usr/<span class="built_in">local</span>/sessionmanagerplugin/bin</span><br><span class="line">Creating Symlink from /usr/<span class="built_in">local</span>/sessionmanagerplugin/bin/session-manager-plugin to /usr/<span class="built_in">local</span>/bin/session-manager-plugin</span><br><span class="line">Installation successful!</span><br></pre></td></tr></table></figure><p>バージョンの確認をします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ session-manager-plugin --version</span><br><span class="line">1.1.54.0</span><br></pre></td></tr></table></figure><p>インストールが成功していると以下のメッセージが出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ session-manager-plugin</span><br><span class="line"></span><br><span class="line">The Session Manager plugin was installed successfully. Use the AWS CLI to start a session.</span><br></pre></td></tr></table></figure><p>SSH 設定ファイル（~/.ssh/config）に以下を追記します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSH over Session Manager</span></span><br><span class="line">host i-* mi-*</span><br><span class="line">    ProxyCommand sh -c <span class="string">"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'"</span></span><br></pre></td></tr></table></figure><h4 id="Windows-インストール方法"><a href="#Windows-インストール方法" class="headerlink" title="Windows インストール方法"></a>Windows インストール方法</h4><p>ここでは、Windows にSession Manager Plugin をインストールする方法を記載します。</p><ol><li>インストーラーを<a href="https://s3.amazonaws.com/session-manager-downloads/plugin/latest/windows/SessionManagerPluginSetup.exe" target="_blank" rel="noopener">ダウンロード</a>する</li><li>インストーラーの指示に従う</li><li>インストールの確認のため以下のコマンドでバージョンが表示されたら完了</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ session-manager-plugin --version</span><br></pre></td></tr></table></figure><ol start="5"><li>SSH 設定ファイルに以下を追記する<ul><li>ファイル: C:\Users\username.ssh\config</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSH over Session Manager</span></span><br><span class="line">host i-* mi-*</span><br><span class="line">    ProxyCommand C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe <span class="string">"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters portNumber=%p"</span></span><br></pre></td></tr></table></figure><h4 id="補足-プロキシ設定"><a href="#補足-プロキシ設定" class="headerlink" title="補足: プロキシ設定"></a>補足: プロキシ設定</h4><ul><li>Mac</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> http_proxy=http://&lt;USER_NAMEh&gt;:&lt;PASSWORD&gt;@&lt;PROXY_SERVER&gt;:&lt;PORT&gt;</span><br><span class="line">$ <span class="built_in">export</span> https_proxy=https://&lt;USER_NAMEh&gt;:&lt;PASSWORD&gt;@&lt;PROXY_SERVER&gt;:&lt;PORT&gt;</span><br></pre></td></tr></table></figure><ul><li>Windows</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span> http_proxy=http://&lt;USER_NAMEh&gt;:&lt;PASSWORD&gt;@&lt;PROXY_SERVER&gt;:&lt;PORT&gt;</span><br><span class="line">$ <span class="built_in">set</span> https_proxy=https://&lt;USER_NAMEh&gt;:&lt;PASSWORD&gt;@&lt;PROXY_SERVER&gt;:&lt;PORT&gt;</span><br></pre></td></tr></table></figure><h2 id="実際にアクセスしてみる"><a href="#実際にアクセスしてみる" class="headerlink" title="実際にアクセスしてみる"></a>実際にアクセスしてみる</h2><p>今回の二つの構成でのアクセスを行なっていきたいと思います。</p><ul><li>Session Manager を通してSSH で踏み台サーバへアクセス</li><li>ポートフォワードでRDS にアクセス</li></ul><h3 id="Session-Manager-を通してSSH-で踏み台サーバへアクセス"><a href="#Session-Manager-を通してSSH-で踏み台サーバへアクセス" class="headerlink" title="Session Manager を通してSSH で踏み台サーバへアクセス"></a>Session Manager を通してSSH で踏み台サーバへアクセス</h3><p>まずは、踏み台サーバにSession Manager を通してアクセスしたいと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i &lt;KEY_NAME&gt;.pem &lt;USER_NAME&gt;@&lt;INSTANCE_ID&gt;</span><br></pre></td></tr></table></figure><p>通常のssh でアクセスするときと違う点としては、IP アドレスではなく、Instance ID を指定する点です。<br>ポートは、デフォルトの22 を指定するかたちで問題ありません（Security Group のInbound の22 を開ける必要はありません）<br>AWS マネジメントコンソール（HTTPS）へのアクセスが可能であればアクセスできます。</p><h3 id="ポートフォワードでRDS-にアクセス"><a href="#ポートフォワードでRDS-にアクセス" class="headerlink" title="ポートフォワードでRDS にアクセス"></a>ポートフォワードでRDS にアクセス</h3><p>ポートフォワードも通常のSSH で行う場合と同一のコマンドで行えます。<br>ここでは、PostgreSQL（5432） にアクセスするケースとします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -NL 15432:&#123;DB_HOST&#125;:5432 -i &lt;KEY_NAME&gt;.pem &lt;USER_NAME&gt;@&lt;INSTANCE_ID&gt;</span><br></pre></td></tr></table></figure><h3 id="アクセスできない場合"><a href="#アクセスできない場合" class="headerlink" title="アクセスできない場合"></a>アクセスできない場合</h3><p>踏み台サーバにアクセスできず、以下のエラーが発生する場合は、SSM エージェントのサービス再起動をすると解消される可能性があります。<br>（前提としてポリシ周りの誤りがないこと）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The version of SSM Agent on the instance supports Session Manager, but the instance is not configured for use with AWS Systems Manager. Verify that the IAM instance profile attached to the instance includes the required permissions.</span><br></pre></td></tr></table></figure><p>再起動コマンド</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart amazon-ssm-agent</span><br></pre></td></tr></table></figure><h2 id="ログについて"><a href="#ログについて" class="headerlink" title="ログについて"></a>ログについて</h2><p>Session Manager を利用することで、CloudWatch Logs で操作ログの取得ができると冒頭で説明しました。<br>ただ、今回のSSH over Session Manager の構成では、CloudWatch Logs でログが出力されません。<br>したがって、Script コマンドで各ユーザの操作ログの取得が必要となります。<br>また、ポートフォワードした時は、Script コマンドにさえ残らないので、注意が必要です（これはSession Manager 云々の話ではないですが）<br>その場合は、CloudTrail のイベント（Session &amp; Terminate）とRDS のAudit ログから証跡を辿る必要があります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>いかがでしたでしょうか。<br>既存の踏み台サーバを残しつつ、Session Manager を利用する場合のケースについて書きました。<br>踏み台サーバを簡単になくすことが出来ない構成だけど、Session Manager を利用したいという人のお役に立てれば嬉しいです。<br>もし、完全に踏み台サーバを無くしたい場合は、PrivateLink などを利用した構成や、踏み台サーバに持たせている機能の移行などを検討するのも良いと思います。</p><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちはー&lt;br&gt;TIG DX Unit のゆるふわエンジニアの前原です。&lt;/p&gt;
&lt;p&gt;突然ですが、Session Ma
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Session-Manager" scheme="https://future-architect.github.io/tags/Session-Manager/"/>
    
  </entry>
  
  <entry>
    <title>PyConJP 2019に登壇しました</title>
    <link href="https://future-architect.github.io/articles/20200422/"/>
    <id>https://future-architect.github.io/articles/20200422/</id>
    <published>2020-04-22T13:19:57.000Z</published>
    <updated>2020-04-21T13:29:53.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXチームの栗田です。最近チーム内でGoが流行っていますが、私は前までPythonの人でして、実は昨年開催された<a href="https://pycon.jp/2019/" target="_blank" rel="noopener">PyConJP 2019</a>にLT登壇していました。今回は新型コロナの影響でチームの業務が100%リモートワーク化され、これまでの通勤時間が作業に充てられるようになりましたので、せっかくということで当時の様子を記載しておこうと思います。</p><img src="/images/20200422/photo_20200422_01.jpeg"><h1 id="きっかけ"><a href="#きっかけ" class="headerlink" title="きっかけ"></a>きっかけ</h1><p>私はフューチャーに中途入社したのですが、もともと大学で人工衛星開発と宇宙物理を専攻し、その後国内鉄鋼メーカに新卒入社しました。私は新卒で前職システム部門に配属されましたが、そこはコードの実装やレビューなどはせず、ベンダーコントロールを行うための部署でした。自分のコーディング力を向上させたかった私は、そこから社外の勉強会を探して参加するようになりました。学生時代から国内外の学会には参加していたのですが、社外勉強会に参加するうちに「プログラミングにもカンファレンスがあるんだ」と気付き、そのままの勢いでPyConJP 2017に初参加しました。</p><p>初参加だったPyConJP 2017は非常に楽しく、私の中で世界が大きく広がりました。「いつか自分もなにか発表してみたいな」という思いを抱えて過ごしていましたが、翌年参加したPyConJP 2018でその思いが燃え上がり、PyConJP 2019を目指すことにしました。</p><h2 id="アイデアの種"><a href="#アイデアの種" class="headerlink" title="アイデアの種"></a>アイデアの種</h2><p>それまでPythonでグラフを描いたり数値解析したりはしていましたが、そこは大人気のデータ分析分野です。そもそも当時の業務においてはPythonを書いている時間よりもExcelドキュメントを書いている時間のほうが圧倒的に長い自分にとって、プライベートだけで何かしらのネタを生み出すのは難しいと考えました。なので、流行りものに乗るよりは好きなものを作ることにしました。</p><p>そこで興味があったのが「ブラウザ」です。当時の職場はWindows7 32bit/メモリ2GBのデスクトップPCが基本セットながらも、一応申請すれば大抵のソフトウェアは許可されるような環境でした。その中で、絶対にインストールが許されないのが「ブラウザ」でした。Windows7はデフォルトでIE11のみが使用できるようにキッキングされており、「ブラウザはすでに搭載されているので」というのが理由で、Chromeのインストールはできませんでした（他にもセキュリティ的な諸々などもあるはずですが、それは割愛します）。そこで私は考えました。「Chromeがないなら作ればいいじゃないの」と。</p><p>当時ビッグデータやAIブームで一躍有名になったPythonは、そのモジュールも含めて申請が通りやすい状況でした。このPythonと組み合わせたのがPyQt5です。これはQt5のPythonバインディングですが、Chromium Web Engineが含まれます。ChromeはNGだけどChromiumがOKという言わば裏技を使うことで、開発準備が整いました。</p><p>余談ですが、PyQt5を採用した理由の一つに、依存パッケージが少ないことがあります。プロキシ指定して <code>pip</code> を使えば、必要なパッケージを揃えるのには手動でインストールする必要がありましたが、おかげでだいぶ楽をすることができました。</p><p>こうして無事武器を手に入れた私は、2017年の大晦日ハッカソンとしてオレオレブラウザ<a href="https://github.com/montblanc18/persephonep" target="_blank" rel="noopener">PersephoneP</a>の開発をはじめました。当時できた初版については、<a href="https://qiita.com/montblanc18/items/88d0b639de86b7cac613" target="_blank" rel="noopener">Qiita</a>上にまとめています。</p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><p>初めてのCfPでしたが、昨今PyConJPに提出されるCfPが増えて採択率がだいぶ低くなっていることは知っていました。私は最初からLT狙いだったのですが、短時間で内容をおもしろくかつインパクトのあるものに仕上げるため、テクニカルな部分もそうですがストーリーを意識したCfPにしました。（ちなみにCfPを提出する少し前にフューチャーに転職してきました。）</p><p>CfP提出後しばらくして採択されたことをメールで確認した私は、TIG Fridayという社内LTイベントなどで素振りにかけさせていただき、発表の1ヶ月前にはおおよその雛形は出来上がっていました。</p><h1 id="発表"><a href="#発表" class="headerlink" title="発表"></a>発表</h1><p>PyConJP 2019の査読付きLT通過は6名で、2日間の日程のうち初日に日本語で発表したのは私だけでした。裏被りのない一番広いホールで会場に数百人+ストリーミング視聴されている方もいる状態で、なかなか緊張していました。実際の発表の様子はYouTubeに公開されていますし、スライドも公開していますのでそちらを御覧ください。だいぶ早口になっていますが、少ない時間に色々盛り込んだためですので、ご容赦ください。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/7U2D5tcMZb4?start=673" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe src="//www.slideshare.net/slideshow/embed_code/key/h1IYtX98jYS2Ts" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ShinKurita/my-browser-with-python3-172131107" title="Pythonで始めるオレオレブラウザ / My browser with Python3" target="_blank">Pythonで始めるオレオレブラウザ / My browser with Python3</a> </strong> from <strong><a href="https://www.slideshare.net/ShinKurita" target="_blank">Shin Kurita</a></strong> </div><p>LTだったためその場での質疑応答はないのですが、登壇直後にエゴサーチをかけてリアルな反応を楽しみました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">「ブラウザは基本的人権」「Chromeがないなら作ればいいじゃない」「PyQt5を入れるとChromiumが入る」 <a href="https://twitter.com/hashtag/PyConJP?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#PyConJP</a></p>&mdash; YASUI Tsutomu (@yattom) <a href="https://twitter.com/yattom/status/1173509505629315073?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 16, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">&quot;環境を変えるはずが会社を変えることになった&quot;<a href="https://twitter.com/hashtag/pyconjp?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#pyconjp</a></p>&mdash; にしお (@nissy0409240) <a href="https://twitter.com/nissy0409240/status/1173509864179421184?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 16, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">フューチャーアーキテクトに転職してすべてを解決したと (naruhodo <a href="https://twitter.com/hashtag/pyconjp?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#pyconjp</a></p>&mdash; かしゅー (@kashew_nuts) <a href="https://twitter.com/kashew_nuts/status/1173510116416479233?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 16, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">おれおれブラウザのLT、これぞLTという素晴らしい内容でした。 <a href="https://twitter.com/hashtag/pyconjp?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#pyconjp</a></p>&mdash; kioto (@takaneh) <a href="https://twitter.com/takaneh/status/1173510059763961856?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 16, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>また、同日の懇親会でもいろんな方に声をかけていただきました。ちなみにその中のひとりで<a href="http://segafreder.hatenablog.com/entry/2019/09/18/234739" target="_blank" rel="noopener">「PyQt5で自分のためのIDEを作っちゃおう！」</a>という発表をされた方がいたのですが、IDEの一部機能を実装するのに、上記の<a href="https://qiita.com/montblanc18/items/88d0b639de86b7cac613" target="_blank" rel="noopener">私のQiita記事</a>や<a href="https://github.com/montblanc18/persephonep" target="_blank" rel="noopener">コード</a>を参考にしてくださったそうです。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">こちらこそ、ペルセポネにスーパーお世話になってるのでLTで開発者が来てると知り「絶対話しかけるぞ！」と思ってたので発見できてよかったです！</p>&mdash; fukatani (@fukafukatani) <a href="https://twitter.com/fukafukatani/status/1173566299403718656?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 16, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>純粋に、すごく嬉しかったです。</p><h1 id="参加してみての感想"><a href="#参加してみての感想" class="headerlink" title="参加してみての感想"></a>参加してみての感想</h1><p>初めてのカンファレンス登壇でしたが、非常に楽しめました。インプットばかりではなくアウトプットが大事なことは常日頃から認識していましたが、実際に自分も登壇者になると気持ちの良い達成感を得ることができました。あと、いろんな人と繋がれたりしました。またどこかで登壇狙いたいと思います。</p><h2 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h2><ul><li>大晦日から開発を始めた理由ですが、昔「MikuMikuDanceは大晦日から開発が始まった」というのを聞いていて、それにあやかってみました</li><li>オレオレブラウザPersephoneP、Win7 32bitメモリ2GBでも動いたのですが、結局マシンスペックがネックでIEからの生産性の向上はあまりありませんでした</li><li>他のフューチャーの社員も参加しており、最初の画像はスタッフをされていた方から頂戴しました</li><li>速攻で前職の人から「見ました」と連絡がいただきましたが、退職しても気にかけていただけているのは嬉しい限りです</li><li>ブラウザを作ってみるという「車輪の再実装」は楽しかったです</li></ul><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20170526/">AIを使って顔画像から「常連さん」を判定しよう！</a></li><li><a href="https://future-architect.github.io/articles/20200131/">AirflowのTips 11選</a></li><li><a href="https://future-architect.github.io/articles/20200212/">GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG/DXチームの栗田です。最近チーム内でGoが流行っていますが、私は前までPythonの人でして、実は昨年開
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Conference" scheme="https://future-architect.github.io/tags/Conference/"/>
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Real World HTTP 第2版はなぜ1.5倍になったのか</title>
    <link href="https://future-architect.github.io/articles/20200421/"/>
    <id>https://future-architect.github.io/articles/20200421/</id>
    <published>2020-04-21T00:55:14.000Z</published>
    <updated>2020-04-21T01:02:01.249Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.oreilly.co.jp/books/9784873119038/" target="_blank" rel="noopener">Real World HTTP 第2版</a>が2020/04/20出版されました。第2版が出版されるというのは、初版をみなさまが買ってくださったおかげです。どうもありがとうございます。紙媒体は先行入荷する書店さんではすでに入っているようです。オライリーのウェブサイトから電子版を購入することもできます。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">4/17新刊『Real World HTTP　第2版 歴史とコードに学ぶインターネットとウェブ技術』オライリー（978-4-87311-903-8）渋川よしき 著◆「オライリー」棚にて展開中！Webテクノロジーの基礎となるHTTPの仕様を網羅的に学べる学習書が内容を充実させて改訂！ <a href="https://t.co/k86zXGaHe9" target="_blank" rel="noopener">pic.twitter.com/k86zXGaHe9</a></p>&mdash; 書泉ブックタワーコンピュータ書 (@shosen_bt_pc) <a href="https://twitter.com/shosen_bt_pc/status/1251037915582312448?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 17, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>Real World HTTPの初版の執筆時にも、ネットで見かけるHTTP絡みのネタとかをGitLabのissueにガンガン突っ込みつつ執筆も行っていました。しかしそのissueが発散するばかりで収束しないので、「もうここで手を打ちましょう」とスナップショットを取ったのが初版でした。その後もウェブのネタ(issue)はどんどん増えていきます。それを昨年のミニ版で一部反映したものの、消化しきれなかったものや、その後追加されたものを入れて出来上がったのが第2版になります。ページ数は1.5倍になったのにお値段は5%しか上がっていないというお買い得本になっています。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Real World HTTPの初版と2版の比較です。1.5倍ぐらいになっています。古い内容削ったりしたのだけど。 <a href="https://t.co/4jT4lF6PWt" target="_blank" rel="noopener">pic.twitter.com/4jT4lF6PWt</a></p>&mdash; 渋川よしき (@shibu_jp) <a href="https://twitter.com/shibu_jp/status/1251060223827046401?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 17, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h1 id="2017年から変わったこと"><a href="#2017年から変わったこと" class="headerlink" title="2017年から変わったこと"></a>2017年から変わったこと</h1><p>QUIC周りがHTTP/3として再構成された、というのが一番派手な変化でありましたが、それ以外にも細々とあります。TLS 1.3とか、もはや当たり前になりすぎてしまったものもあります。逆にsdchのようなChromeが導入したけど、削除された圧縮フォーマットとかもあります。OAuth 2.1周りとかも規格の進化が行われつつあります。あと地味どころだと、動画ストリーミングのApple発のHLSが正式にRFCが発行されたり、robots.txtもRFC化のための動きが再開されたり、というのもあります。</p><p>MDNに対してChromeなど他のブラウザベンダーもコミットしますよ、とか、HTML周りの仕様策定がWHATWGに正式に移管されるなど一次情報源の変化もありました。</p><p>EdgeがChromiumベースになってしまったのは少しショックでしたが、Windows 7などにもEdgeが配信されることで、標準がIEしかない、という状況は改善されました。本書でもセキュリティ以外のIEのみの話はかなり削りました。Let’s Encryptの大流行でAlways TLSが大幅に進行したのも初版と大きく世界が変わったところですね。</p><p>とはいえ、個人目線では追いきれないほどの変化が日々発生しています。SxSとかWebTransportなどは今回触れていません。基本的に <a href="https://caniuse.com" target="_blank" rel="noopener">https://caniuse.com</a> を見てChrome一党のみが対応しているものは除外しています。RFCもQUICみたいな確度の高いものを除いては、提案段階ではなく策定が完了し、現実世界で広く使われているものを中心に絞っています。中にはクッキーのSameSiteみたいに、RFCがないんだけど全ブラウザが何故か実装しているやつもありますが、これも取り上げています。</p><p>ただ、これらの状況の変化による追記よりは、それまでもあった内容の追加の方が多数に及びます。</p><h1 id="初版より前からあったけど追加したこと"><a href="#初版より前からあったけど追加したこと" class="headerlink" title="初版より前からあったけど追加したこと"></a>初版より前からあったけど追加したこと</h1><p>例えば、リスト型攻撃がよく話題になります。その踏み台としてよく取り沙汰される平文パスワード。それを防ぐための<a href="https://ja.wikipedia.org/wiki/Bcrypt" target="_blank" rel="noopener">bcrypt</a>等のパスワード保持のためのハッシュ関数の紹介をしたり（このWikipediaの翻訳も執筆のついでにやりました）、TOTPをはじめとする多要素認証の仕組み、あとはリスト型攻撃を受けてしまったあとに、それをユーザーに通知することで被害拡大を防ぐためのログイン通知あたりですね。初版のころにすでにどれもあったものですが、ニュースになることが多かったので追加しました。</p><p>あとは、厳密にはHTTPではないですが、UnifiedであるはずのURLやそれ以外の情報をまとめて伝搬する、もっとUnifiedな伝送手段であるところのQRコードとかも、ウェブと地続きに感じたので取り上げています。小ネタとしては、XMLHTTPRequestはなぜ「XML」が頭に付いているのか、みたいなのも入れています。</p><p>追加もそこそこ多く、章ごとの文章バランスが悪くなってしまったのでJavaScriptのみの章を切り出しました。WebSocketとかServer Sent EventsみたいなAPIの紹介から、JavaScriptだけを使ってグローバルナビゲーションを伴うGET/POST、伴わないGET/POST、ファイルのダウンロード、動的にコンテンツを作成しつつダウンロードみたいな、考えられうる通信パターンを網羅してみたり、そのついでにデータURIスキームの説明も追加しました。</p><p>ミニ版で追加したウェブアプリケーションの章も入れると同時に、クラウドサービスの章を追加しました。DNSとかCDNは初版のときから、取り上げたいなぁと思っていましたが、前者はそれだけで価値を感じてもらうのは難しそうなのでクラウドの応用例のロードバランスとか、各地域のエッジに分散させるお話につながるようにしています。CDNとかクラウドは、各ベンダーが競っていろんな新規サービスをどんどん出している状態なので最大公約数的になってしまっていますが「クラウドを使ったインフラ仕事をするにあたって基礎知識として知っておくとAWSやGCPのドキュメントを読むのが捗る」知識に絞って紹介しています。</p><h1 id="ぜひReal-World-HTTPを（部分的に）打ち倒す本が出てほしい"><a href="#ぜひReal-World-HTTPを（部分的に）打ち倒す本が出てほしい" class="headerlink" title="ぜひReal World HTTPを（部分的に）打ち倒す本が出てほしい"></a>ぜひReal World HTTPを（部分的に）打ち倒す本が出てほしい</h1><p>この本は、自分が読みたかった本がなかったので書き始めたというのが出発点です。今回の改訂で追加した内容も、仕事や趣味でコードを書くにあたって調べた内容とかをissueに記録しといて、それを元ネタにしたものが多数です。そのおかげか編集の瀧澤さんとは「またReal World HTTPに書いたネタが役立ってしまった」みたいなことをよく会話しておりました。その会話は今回、素敵な帯の文言にしていただきました。</p><img src="/images/20200421/photo_20200421_01.jpeg"><p>クラウドも、前職DeNAも今は大々的に使っているようですが、僕の在籍中はオンプレでデータセンターを安定に運用しきっていて（これはこれですごいノウハウ）、僕はAWSやらGCPに触れる機会はありませんでした。フューチャーに転職してきて、数カ月ごと（毎月？）に新規案件が立ち上がるという環境の中、クラウド環境構築がかなり身近になったので追加する気持ちになったというのもあります。</p><p>そのようなアプリケーションを作る開発者としての目線で見えている世界というのはやはり偏りはあると思っています。</p><p>頭の中にウェブの世界で出てくる技術を一通り網羅して地図を作るというコンセプトなので、ひたすら広く触れていくという本書の基本スタンスは今後も変わらないものの、狭く深い領域もいくつも出てきています。この特定技術を深めまくってページ数を増やすのは読む側も辛かろう、と思います。書くのも辛いです。</p><p>HTTP/2のフレームは後藤ゆきさん著の<a href="https://www.amazon.co.jp/dp/4865941770" target="_blank" rel="noopener">細かく紹介している本</a>がすでに出ています。QUICのフレームは、本書の原稿が固まる直前に出版された<a href="https://www.lambdanote.com/collections/n/products/nmonthly-vol-2-no-1-2020" target="_blank" rel="noopener">ｎ月刊ラムダノート</a>（僕も寄稿している）に西田佳史さんによる紹介記事があり、本書でもそちらにdelegateしています。QUICは今後いろいろな通信の土台になっていくもので、それ単独で書籍になりうるものだと思います。それ以外にもWebRTCとかも。ぜひそっちにフルコミットされているエンジニアの方々に書いてほしいです。僕も読みたいです。</p><p>さきほど書いたChromeのみでガンガン作られている、エッジなものだけを抜粋した本とかきっと面白いと思います。まあ変化が激しすぎて、Chromeのカンファレンスが一次情報、みたいな感じになってしまうんでしょけども。</p><h1 id="校了後も追加したい内容は増えていっている"><a href="#校了後も追加したい内容は増えていっている" class="headerlink" title="校了後も追加したい内容は増えていっている"></a>校了後も追加したい内容は増えていっている</h1><p>書籍の特性上、完成することはなく、古くなる部分が出てきてしまうのは仕方がない面があります。</p><p>ここ数ヶ月のプライバシーの扱い、例えば<a href="https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/" target="_blank" rel="noopener">ファーストパーティークッキーやローカルストレージなども7日で消える話</a>とかは原稿が固まったあとのお話ですので、本文に入れることはできていません。これ自体はブラウザ本体にパスワード管理が内蔵され、ブラウザにユーザー情報を持ち、プロファイルが同期されるという世界にあっては、あんまり問題にならないのかな、というのが個人的見解です。切れたとしても、ユーザーIDとパスワードがすでに埋め込まれたログインフォームが出てきて、OKボタンを押すだけであれば、守られるプライバシーと天秤にかければ十分リーズナブルだと思いますし。そうなると、ブラウザのプロファイルの同期とかパスワード管理も説明しなきゃな、と思ったりもするわけですが。</p><p>それ以外にも、X-Forwerded-Forの説明はしたけど、ユーザーのIPの取得は紹介してなかったなぁ、とか世の中の話題を見て追加したいネタもまた育っていたりしますし、会社のチャットで、CORSのプリフライトリクエスト（OPTIONメソッド）は認証なしでOKにしておかないとCORSのやりとりが失敗するというのを見て、なるほどぉ、と思ったりもあります。</p><p>このように本屋に並ぶ時点でも、新しい情報は続々と出ているわけですし、世の中でプログラミングしていて「これはすごい」という落とし穴に落ちる人も続々登場しているわけですが、本書が初版のときから目指していた「今後新しい知識が出てきた場合も、この本を読めばキャッチアップが素早くできる」という価値は変わらないと思います。</p><h1 id="今後のReal-World-HTTP"><a href="#今後のReal-World-HTTP" class="headerlink" title="今後のReal World HTTP"></a>今後のReal World HTTP</h1><p>追加した内容のところにも書いたのですが、キラキラした新しい仕様ばかりを取り上げるつもりは今までもなく、今後もReal Worldの名の通り、もっと泥臭い、みなさんがこれから落ちる予定の落とし穴を先に埋めていくような本を目指してさらに拡充して、「読んでてよかった！」を増やしていきたいと思います。HTTP/2の策定前にはQUICはすでに実践投入されていたわけですが、現在そのポジションにあたるものはないので、HTTP/4がすぐに来ることはないかなと思いますが、出なかったとしても（売れている限りは）改訂が止まることはないかと思います。</p><p>もちろん、増やすだけではなく、TRACEメソッドのように、ブラウザ側で対策されて、覚えておいても一円の利益にもならないようになったものは詳細情報はどんどん削っていく予定です。近年では、HTTPに限らず、何か情報を得ようとすると新旧入り混じった情報が大量に出てきます。現在でも考慮すべきなのかそうじゃないのか、そのフィルタリングのために知識が必要という状態です。情報の提供よりも、本当に必要なものだけに情報を絞るというのが専門家の価値かなと思います。ページ数を1.5倍にしといてなんですが、今後も削れるところは削って行こうと思います。</p><p>ついでに、ミニ版も、年内には更新したいなと思っています。</p><h2 id="関連ページ"><a href="#関連ページ" class="headerlink" title="関連ページ"></a>関連ページ</h2><ul><li><a href="https://turky-in-the.blogspot.com/2020/04/real-world-http.html" target="_blank" rel="noopener">turky in the blogger: 『Real World HTTP』が約三年ぶりに改訂されました</a>: 編集をしてくださった瀧澤さんのブログエントリーです。</li></ul><hr><p>関連ページ:</p><ul><li><a href="/articles/20190410/">Real World HTTPミニ版リリース記念勉強会の実施報告</a></li><li><a href="/articles/20170704/">インフラ入門vol.2(ネットワーク)</a></li><li><a href="/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873119038/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Real World HTTP 第2版&lt;/a&gt;が2020/04/20出版されました。第2版が出版さ
      
    
    </summary>
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="Book" scheme="https://future-architect.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>ServiceNow+Terraform(+Go) によるインフラ構築自動化</title>
    <link href="https://future-architect.github.io/articles/20200416/"/>
    <id>https://future-architect.github.io/articles/20200416/</id>
    <published>2020-04-16T12:30:49.000Z</published>
    <updated>2020-04-28T01:17:30.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGのDXユニットの西田です。前職ではServiceNowというaPaaS上でのアプリケーション開発をしておりました。現在は、GCPインフラの設計・構築をTerraform, Ansibleを利用して開発しております。GCP, ServiceNow ともに資格を持っています。</p><p>さて、皆さん、ServiceNow(以降：SNOW)というSaaSはご存知でしょうか？Salesforceと非常によく似ておりますが、米国発の SaaS, aPaaS サービスです。米国では割とポピュラーなサービスとして位置づけられていますが、日本ではまだまだです。が、伸び率は今年度は4割近くと、利用ユーザがすごい勢いで伸びています。そんな中、お客様内でSNOWを利用していて、それと関連する領域をFutureが担当するケースも増えてくるかと思いますので、今回は本ブログでSNOWについて少しだけ紹介したいと思います。SNOW とは？の説明は、言葉だけだと概念過ぎてわかりづらいので、現状、<strong>私が直面している課題の解決案ベースで解説</strong>していきたいと思います。</p><h1 id="課題設定"><a href="#課題設定" class="headerlink" title="課題設定"></a>課題設定</h1><ul><li>課題①<ul><li>昨今、会社内でのITシステムの開発体制って、以下の様なケースが多くないですか？<ul><li>事業部門がアプリケーション開発ベンダを直接雇っている。情シス部門は関知していない。</li><li>情シス部門（インフラ部門）はインフラのみ（主にサーバ）を提供する。</li><li>セキュリティ部門（or 品質保証部）が別で存在し、それらの監査・チェックを担当している。</li></ul></li><li>インフラの準備は、組織が分かれているため、<strong>組織間の仕事の受け渡しが主に打合せ &amp; エクセル &amp; メール</strong>で発生している。</li><li>現状、これらの組織間調整がとてもレガシーで非効率である事はみんな課題意識はあるが、解決方法がよくわからない。</li></ul></li><li>課題②<ul><li><strong>インフラ構築の依頼作業は単純作業が多く、6割方はコピー＆ペーストして名前を変える</strong>程度。</li><li>設計が必要なインフラ構築だけにリソースを割きたい。</li></ul></li></ul><h1 id="ソリューションの概要"><a href="#ソリューションの概要" class="headerlink" title="ソリューションの概要"></a>ソリューションの概要</h1><p>上記のすべての問題を解決出来るわけではないですが、SNOW と Terraform を使った自動化の仕組みを例に取って、PoCレベルで組んでみます。各製品/ツールの役割分担は以下です。</p><ul><li>SNOW：人の動き（リクエスト、承認フロー）を自動化する</li><li>Terraform：インフラの構築を自動化する</li><li>Go：インターフェース役</li></ul><img src="/images/20200416/photo_20200416_01.png"><h3 id="作るコンポーネント（上の図の番号と紐づいています）"><a href="#作るコンポーネント（上の図の番号と紐づいています）" class="headerlink" title="作るコンポーネント（上の図の番号と紐づいています）"></a>作るコンポーネント（上の図の番号と紐づいています）</h3><ol><li>SNOW の Service Catalog を利用し、準備するインフラをメニュー化する（簡単な＆頻繁なリクエストのみ）</li><li>Terraform の各種実行と、承認を順番に実施するワークフローを実行するFlowDesignerを作る。</li><li>Infra構築を担う Terraform は、GCP Project 単位にディレクトリを切り、inventory 書き換えだけで terraform plan, terraform apply が出来るファイル構成にする。（地味にこれが一番頭を使いました…）</li><li>FlowDesigner からの API に応対し、Terraform の inventory を作り、コマンドの実行結果を返す API-SV を Go で作る。</li></ol><p>4に関しては、<strong>SNOW の API リファレンスのサンプルコードは基本 Python</strong> なので、そっちの方がベターです。本記事では、単にGoを書きたかったので、Goを採用しています。<br>また、最初に申し上げておきますが、分量の関係で全ての実装方法を画像やコードで丁寧に記載する事が難しいです。もちろん核となる箇所は極力丁寧に記載していきます。</p><h3 id="本記事で取り上げるインフラ構築のシチュエーション"><a href="#本記事で取り上げるインフラ構築のシチュエーション" class="headerlink" title="本記事で取り上げるインフラ構築のシチュエーション"></a>本記事で取り上げるインフラ構築のシチュエーション</h3><p><strong>アプリチームからのインスタンス構築依頼を受けてGCEを用意</strong> というシチュエーションを例にします。以下が前提です。</p><ul><li>GCE のマシンタイプやリージョン・ゾーンなどは基本パターンが存在するものとする。<ul><li>n1-standard-1, asia-northeast1-a, centos-7 など</li></ul></li><li>プロジェクトはすでに存在している。</li><li>よって、プロジェクト名・インスタンス名、くらいしかユーザに指定させるパラメータがない。</li></ul><p>実装方法にそこまで興味がない方は、<a href="/articles/20200416/#%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D">動作確認</a> だけご覧になれば OK です。<br>っていうかむしろ、先に <a href="/articles/20200416/#%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D">動作確認</a> を見た方がゴールが明確化して読みやすくなるのでおススメです。</p><h1 id="1-インフラ構築のリクエストをメニュー化する-SNOW"><a href="#1-インフラ構築のリクエストをメニュー化する-SNOW" class="headerlink" title="1. インフラ構築のリクエストをメニュー化する @ SNOW"></a>1. インフラ構築のリクエストをメニュー化する @ SNOW</h1><p>本来ならこの<strong>メニュー化する対象の作業は何か？を決める</strong>のが非常に大変ですよね。今回は GCE のリクエストを例にします。</p><h2 id="SNOW-の環境準備"><a href="#SNOW-の環境準備" class="headerlink" title="SNOW の環境準備"></a>SNOW の環境準備</h2><p><a href="https://developer.servicenow.com/" target="_blank" rel="noopener">developerサイト</a> でインスタンスを準備。最新版のOrlando(出たばかり！)を使ってます。<br>払いだされたインスタンスに admin でログインしてください。<br>少しだけ宣伝交じりですが、この developer インスタンスはアカウントを作れば誰でも発行できます。6時間触らないと sleep、10日触らないと消えます（でもリストア可）。本来はライセンス費用を払わなければならないあらゆる機能が全て無料で使えるので、とてもおススメです！</p><h2 id="Service-Catalog-を作成する"><a href="#Service-Catalog-を作成する" class="headerlink" title="Service Catalog を作成する"></a>Service Catalog を作成する</h2><h3 id="Category-の作成"><a href="#Category-の作成" class="headerlink" title="Category の作成"></a>Category の作成</h3><p><code>Maintain Categories</code>をクリックし、Newを押下する。<br><img src="/images/20200416/1.png" class="img-middle-size" style="border:solid 1px #000000"></p><h3 id="item-の作成"><a href="#item-の作成" class="headerlink" title="item の作成"></a>item の作成</h3><p><code>Maintain Items</code> をクリックし、Newを押下する。<br>前述の通り、プロジェクトとインスタンス名をvariablesに設定します。この例では、Projectはカスタムテーブルを作って参照形式にしました。<br><img src="/images/20200416/2.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/3.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/4.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>ちなみに、色んなパトロールの方から『Application scopeは別で切るべきだ』と絶対に言われますが、本来なら私もそうします。今はそこは本質じゃないからGlobalのまま行きます。</p><h1 id="2-Terraform-Server-にリクエストを送り、各種承認を回すFlowDesigner-SNOW"><a href="#2-Terraform-Server-にリクエストを送り、各種承認を回すFlowDesigner-SNOW" class="headerlink" title="2. Terraform Server にリクエストを送り、各種承認を回すFlowDesigner @ SNOW"></a>2. Terraform Server にリクエストを送り、各種承認を回すFlowDesigner @ SNOW</h1><p>Flow Designer の前に、Terraform の実行結果を格納するテーブルを作っておきましょう。作ったのはこんな感じです。<br><img src="/images/20200416/4.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/5.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>それではいよいよ Flow Designer です。<code>Flow Designer</code> → <code>Designer</code> をクリック。右上のNew で新しい Flow を作ります。<br>以下の様にフローを組みます。スペースの関係で、細かいパラメータまでは取っていませんが、大枠の処理をコメントで書き込みました。<br><img src="/images/20200416/photo_20200416_02.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>Terraform Server に送るためのアクションの定義は以下です。大した事やっていません。<br><img src="/images/20200416/7.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/8.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/9.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>最後に作った Flow Designer を GCE インスタンスのメニューに紐づけます。<br><img src="/images/20200416/10.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>これで SNOW の準備は終わりです。大した事はなかったです。</p><h1 id="3-Terraform-のディレクトリとファイル構成-Terraform-Server"><a href="#3-Terraform-のディレクトリとファイル構成-Terraform-Server" class="headerlink" title="3. Terraform のディレクトリとファイル構成 @ Terraform Server"></a>3. Terraform のディレクトリとファイル構成 @ Terraform Server</h1><p>さて、地味に一番苦労した Terraform の構成です。何が難しかったかというと…</p><ul><li>自動的に構築対象のインスタンス（インベントリ）が増えるのに対して、GCE の tf ファイル自体を Go が作るのは簡単だが、それだと可読性が著しく下がり、同じプロジェクトに対して個別対応が入った際に、運用者にかなりの負担を強いる</li><li>よって、tfファイルの定義はメニューに対して1つだけ用意し、インベントリ分だけループしてインスタンスを作るファイル構成にしたい。</li><li>一方で、構築メニューは互いに依存させたくないので、GCE, GCS 毎にインベントリファイルを持たせたい。</li><li>しかし、tfvars は 1 ファイルしか許容されていないので、temporary として各メニュー毎に tfvars を作り、それをファイル結合する方法を選択した。</li></ul><p>…言葉だけじゃわからないですよね。。ディレクトリ構成は以下です。</p><figure class="highlight bash"><figcaption><span>tree</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/terraform</span><br><span class="line">├── project<span class="_">-a</span></span><br><span class="line">│   ├── compute_instance.tf         <span class="comment"># ← GCEのインスタンス定義。</span></span><br><span class="line">│   ├── storage_bucket.tf   </span><br><span class="line">│   ├── terraform.tfvars            <span class="comment"># ← 自動生成されるterraform の変数ファイル</span></span><br><span class="line">│   ├── tfplan.sh                   <span class="comment"># ← plan実行用。bashの色を付けるための特殊文字を消すsedがパイプされている</span></span><br><span class="line">│   ├── tfapply.sh                  <span class="comment"># ← 同上</span></span><br><span class="line">│   ├── variables.tf                <span class="comment"># ← メニュー化しているリストを定義。メニューが変わらない限りstatic</span></span><br><span class="line">│   ├── vars                        <span class="comment"># ← Go が使う、インベントリファイル組み立ての作業用dir</span></span><br><span class="line">│   │   ├── compute_instance.tfvars <span class="comment"># ← GCE のインベントリリスト</span></span><br><span class="line">│   │   ├── filejoin.sh             <span class="comment"># ← cat ./*.tfvars &gt; ../terraform.tfvars と書かれているだけ</span></span><br><span class="line">│   │   ├── project.tfvars          <span class="comment"># ← GCP Project の変数定義ファイル</span></span><br><span class="line">│   │   └── storage_bucket.tfvars   <span class="comment"># ← GCS のインベントリリスト</span></span><br><span class="line">│   └── version.tf</span><br><span class="line">└── project-b</span><br><span class="line">    ├── 同上</span><br></pre></td></tr></table></figure><p>コアな部分をまずは説明しますね。</p><figure class="highlight bash"><figcaption><span>compute_instance.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"GCE_instances"</span> &#123;</span><br><span class="line">  count        = length(var.gce_instances_list)</span><br><span class="line">  name         = var.gce_instances_list[count.index]</span><br><span class="line">  machine_type = <span class="string">"n1-standard-1"</span></span><br><span class="line">  zone         = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  tags         = [<span class="string">"app01"</span>]</span><br><span class="line">  project      = var.project.id</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    auto_delete = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">source</span>      = google_compute_disk.GCE_disk[count.index].self_link</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    network       = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  metadata = &#123;</span><br><span class="line">    <span class="built_in">enable</span>-oslogin = <span class="string">"true"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_disk"</span> <span class="string">"GCE_disk"</span> &#123;</span><br><span class="line">  count   = length(var.gce_instances_list)</span><br><span class="line">  name    = <span class="string">"<span class="variable">$&#123;var.gce_instances_list[count.index]&#125;</span>-disk"</span></span><br><span class="line">  project = var.project.id</span><br><span class="line">  zone    = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  <span class="built_in">type</span>    = <span class="string">"pd-standard"</span></span><br><span class="line">  size    = 30</span><br><span class="line">  image   = <span class="string">"centos-cloud/centos-7"</span></span><br><span class="line"></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    ignore_changes = [labels]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>variables.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">variable <span class="string">"project_suffix"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"project"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"gce_instances_list"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"gcs_buckets_list"</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>terraform.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gce_instances_list = [</span><br><span class="line">  <span class="string">"test-instance-11"</span></span><br><span class="line">]</span><br><span class="line">project_suffix = <span class="string">"project-a"</span></span><br><span class="line">project = &#123;</span><br><span class="line">  name = <span class="string">"project-a"</span></span><br><span class="line">  id   = <span class="string">"project-a"</span></span><br><span class="line">&#125;</span><br><span class="line">gcs_buckets_list = [</span><br><span class="line">  <span class="string">"test-bucket01"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>まず、<strong>GCE の定義はこのメニュー化された 1 つの tf ファイルだけ</strong>です。それを変数のリスト分だけ loop で回してリソースを作っています。<a href="https://future-architect.github.io/articles/20190819/">前原さんの記事</a>を参考にしています。</p><p>ただ今回は、この <strong>loopの要素を Go が自動で生成しなければならない</strong> ということなんです。<br>そして、<strong>GCE と GCS は別メニューだから、お互いに干渉したくない</strong> ということなんです。<br>Go で書き切る手段もあったんですが、<strong>実装をリーズナブルにするためにファイルを分けて bash で結合する方法を選択</strong>しました。それが vars ディレクトリ配下のお話です。</p><figure class="highlight bash"><figcaption><span>vars/compute_instance.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gce_instances_list = [</span><br><span class="line">  <span class="string">"test-instance-11"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>vars/storage_bucket.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcs_buckets_list = [</span><br><span class="line">  <span class="string">"test-bucket01"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>vars/project.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">project_suffix = <span class="string">"project-a"</span></span><br><span class="line">project = &#123;</span><br><span class="line">  name = <span class="string">"project-a"</span></span><br><span class="line">  id   = <span class="string">"project-a"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>vars/filejoin.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat *.tfvars &gt; ../terraform.tfvars</span><br></pre></td></tr></table></figure><p>よって、Go は GCE, GCS のメニュー毎に対応する vars/ 配下の tfvars ファイルにだけ要素を追加し、filejoin.sh を叩けば Terraform 系のファイルは揃うという事になります。Go でファイル操作は頑張らない（笑）</p><h1 id="4-FlowDesigner-からのリクエストを応じて-Terraform-を実行し、結果を返す-Terraform-Server"><a href="#4-FlowDesigner-からのリクエストを応じて-Terraform-を実行し、結果を返す-Terraform-Server" class="headerlink" title="4. FlowDesigner からのリクエストを応じて Terraform を実行し、結果を返す @ Terraform Server"></a>4. FlowDesigner からのリクエストを応じて Terraform を実行し、結果を返す @ Terraform Server</h1><p>さて、SNOW と Terraform の間をつなぐ API-SV の Go です。<br>処理を整理すると、以下です。</p><ol><li>SNOW(FlowDesigner)からの Rest API の受け口を作る。</li><li>SNOW から受け取るパラメータは、Project名とインスタンス名だけである。（SNOW の CMDB を本格利用すればそうでもないですが、構成管理は Terraform でコード化されているから、SNOW ではやらない。フロントエンドに徹する。）</li><li>Terraform の Project ディレクトリの GCE, GCS に対応する tfvars ファイルに受け取ったリソース名を書き込む。</li><li>vars/filejoin.sh を実行する。</li><li>terraform plan を実行し、結果を返す。</li></ol><p>始めに言い訳しておきますが、初めて Go を書いた関係で、あまりソースコードには自信がありません。<br>本質的に必要な部分だけを書いているので、エラー処理・認証・暗号化の処理も実装していないので、検証用途と割り切って見てください。</p><figure class="highlight golang"><figcaption><span>api-sv.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httputil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TF_PATH = <span class="string">"/terraform"</span></span><br><span class="line"><span class="keyword">const</span> TF_VARDIR = <span class="string">"vars"</span></span><br><span class="line"><span class="keyword">const</span> TF_GCE_TFVARS = <span class="string">"compute_instance.tfvars"</span></span><br><span class="line"><span class="keyword">const</span> TF_GCS_TFVARS = <span class="string">"storage_bucket.tfvars"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GCEInstanceRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Action      <span class="keyword">string</span> <span class="string">`json:"action"`</span></span><br><span class="line">GCEInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">GCPProjectName  <span class="keyword">string</span> <span class="string">`json:"GCP_project_name"`</span></span><br><span class="line">GCPInstanceName <span class="keyword">string</span> <span class="string">`json:"GCE_instance_name"`</span></span><br><span class="line">&#125; <span class="string">`json:"GCE_instance"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/gce_instance"</span>, handleGCEInstance)</span><br><span class="line"><span class="comment">// http.HandleFunc("/gcs_bucket", handleGCSBucket) // スペースの関係で一旦作りません…m(_ _)m</span></span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /gce_instance に POST された時に実行される関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleGCEInstance</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request body のパースと値の取得</span></span><br><span class="line">b, err := ioutil.ReadAll(r.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> r.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req GCEInstanceRequest</span><br><span class="line"><span class="keyword">if</span> err = json.Unmarshal(b, &amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Debug用</span></span><br><span class="line">fmt.Printf(<span class="string">"Request: %+v"</span>, req)</span><br><span class="line"></span><br><span class="line"><span class="comment">// plan の時だけ、gce 用の terraform の tfvars に追加する</span></span><br><span class="line"><span class="keyword">if</span> req.Action == <span class="string">"plan"</span> &#123;</span><br><span class="line">addGCETfvars(req.GCEInstance.GCPProjectName, req.GCEInstance.GCPInstanceName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strtemp := execTF(req.GCEInstance.GCPProjectName, req.Action)</span><br><span class="line">fmt.Fprintf(w, strtemp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// terraform の gce instance の tfvars にリクエストされた instance を追加する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addGCETfvars</span><span class="params">(project, gce_instance <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">tfvarpath := TF_PATH + <span class="string">"/"</span> + project + <span class="string">"/"</span> + TF_VARDIR</span><br><span class="line">tfvarsFile := TF_PATH + <span class="string">"/"</span> + project + <span class="string">"/"</span> + TF_VARDIR + <span class="string">"/"</span> + TF_GCE_TFVARS</span><br><span class="line"></span><br><span class="line">raw, err := ioutil.ReadFile(tfvarsFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラー処理</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(tfvarsFile + <span class="string">" read success"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最初の"["までの文字列を捨て、arrayに変換</span></span><br><span class="line">filetext = filetext[strings.Index(<span class="keyword">string</span>(raw), <span class="string">"["</span>):]</span><br><span class="line"><span class="keyword">var</span> strarr []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal([]<span class="keyword">byte</span>(filetext), &amp;strarr); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラー処理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// すでにインスタンスが登録されている場合のエラー処理は省略する</span></span><br><span class="line"><span class="comment">// 新しいインスタンスを登録する。</span></span><br><span class="line">strarr = <span class="built_in">append</span>(strarr, gce_instance)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output to file</span></span><br><span class="line">file, err := os.Create(tfvarsFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラー処理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// gce の tfvars を出力する。</span></span><br><span class="line">output := <span class="string">"gce_instances_list = [\n"</span></span><br><span class="line"><span class="keyword">for</span> ii := <span class="number">0</span>; ii &lt; <span class="built_in">len</span>(strarr)<span class="number">-1</span>; ii++ &#123;</span><br><span class="line">output = output + <span class="string">"  \""</span> + strarr[ii] + <span class="string">"\",\n"</span></span><br><span class="line">&#125;</span><br><span class="line">output = output + <span class="string">"  \""</span> + strarr[<span class="built_in">len</span>(strarr)<span class="number">-1</span>] + <span class="string">"\"\n]\n"</span></span><br><span class="line">file.Write(([]<span class="keyword">byte</span>)(output))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各varsファイルを連結して、terraform.tfvarsにまとめる。</span></span><br><span class="line">cmd := exec.Command(<span class="string">"sh"</span>, <span class="string">"filejoin.sh"</span>)</span><br><span class="line">cmd.Dir = tfvarpath</span><br><span class="line">out, err := cmd.Output()</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(out))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// terraform plan を実行して、stdout を戻り値で返す関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">execTF</span><span class="params">(project, action <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">tfpath := TF_PATH + <span class="string">"/"</span> + project</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellscript <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> action == <span class="string">"plan"</span> &#123;</span><br><span class="line">shellscript = <span class="string">"tfplan.sh"</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> action == <span class="string">"apply"</span> &#123;</span><br><span class="line">shellscript = <span class="string">"tfapply.sh"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmd := exec.Command(<span class="string">"sh"</span>, shellscript)</span><br><span class="line">cmd.Dir = tfpath</span><br><span class="line">out, _ := cmd.Output()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>tfplan.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform plan -no-color</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>tfapply.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply -auto-approve -no-color</span><br></pre></td></tr></table></figure><p><code>-no-color</code> オプションで terraformコマンドの出力する特殊文字を無効化して、単純な文字列にしています。</p><p>また、わざわざshを作り、それをGoで実行する様にしたのは、複数の引数指定でos/execがうまく動作しなかったからです。<a href="https://qiita.com/tng527/items/c44b943da93041a8355b" target="_blank" rel="noopener">こちらの記事</a>の最後を参考にしました。</p><h1 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h1><h3 id="ユーザの操作"><a href="#ユーザの操作" class="headerlink" title="ユーザの操作"></a>ユーザの操作</h3><p>Service Catalog のダッシュボードに、GCP infra の widget を追加すると、以下の様になります。<br><img src="/images/20200416/u1.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u2.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>画面ではGCSも追加しています。手順はGCEの時と全く同じです。<br><img src="/images/20200416/u3.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u4.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>Shoppingっぽくなっているのは、あんまり気にしないでください。SaaSで細部を気にし始めると工数が跳ね上がります。（※初期構築だけ考えるとそうでもないですが、保守や機能拡張を考えると雪だるま式に増えます。）</p><p>これだけでユーザのリクエストは完了です。本当にパラメータを2つ入れるだけ。</p><h3 id="リクエストの状態を確認"><a href="#リクエストの状態を確認" class="headerlink" title="リクエストの状態を確認"></a>リクエストの状態を確認</h3><p>リクエストされたアイテムを見ると、自分の上司で止まっているのが確認できます。<br><img src="/images/20200416/u5.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u6.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>FlowDesingnerは非常に強力な機能で、すべての実行ログを記録していますので、それで状態を確認してみます。すると、確かに1つ目のapprovalで止まっていますね。<br><img src="/images/20200416/u7.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>Terraform の実行ログを見てみましょう。この結果からすると、良さそうですね。<br><img src="/images/20200416/u8.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u9.png" class="img-middle-size" style="border:solid 1px #000000"></p><h3 id="承認を回す"><a href="#承認を回す" class="headerlink" title="承認を回す"></a>承認を回す</h3><p>それじゃあ、上司のアカウントでログインして、承認しましょう。<br><img src="/images/20200416/u10.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u11.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>1つ進みましたね。画像はつけてないですが、この画面からTerraformの実行plan結果のレコードには遷移出来るので、上司も確認できます。<br>そんな感じで、みんなに承認してもらいましょう。</p><img src="/images/20200416/u12.png" class="img-middle-size" style="border:solid 1px #000000"><p>なぜか名前に既視感がありますねぇ…不思議…</p><h3 id="apply-の結果を見てみる"><a href="#apply-の結果を見てみる" class="headerlink" title="apply の結果を見てみる"></a>apply の結果を見てみる</h3><p>これで承認が回ったので GCE がデプロイ（アプリ-Tにデリバリー）されているはずです。早速関連リストからTerraformの実行ログを見てみましょう。<br><img src="/images/20200416/u13.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u14.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u15.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>来ましたね！同時実行とか、変更・削除はどうするのかとか色々ありますが、とりあえずPoCとしては完成！</p><h1 id="結局-ServiceNow-とは何か？"><a href="#結局-ServiceNow-とは何か？" class="headerlink" title="結局 ServiceNow とは何か？"></a>結局 ServiceNow とは何か？</h1><p>ServiceNow社的には、以下をメッセージとして強く主張しています。</p><ul><li>昨今、消費者に対して提供されている顧客体験は非常に良くなっている(UX, CX)。</li><li>一方で、企業内の社内システムを含む従業員体験は全く乖離している。自動化は限定的で仕事は手渡し・対面ベース。</li><li>それを同じレベルまで簡単に持っていくのが ServiceNow である。</li></ul><p>本記事で取り上げた Service Catalog なんかはまさに当てはまりますよね。事業部門が使う備品の調達と同じ様なノリで GCP のクラウドリソースを注文できる仕組み。それがシステム化されており、承認行為と構築行為がシームレスに行われる。</p><p>通常この手の調達をしようと思ったら、インフラとしての申請＆承認行為と、セキュリティとしての申請＆承認行為、そして調達行為は分断されていて、それぞれの部門に対して申請だったり打ち合わせだったりで調整しないといけないですよね。</p><p>一方で、私が捉えているイメージは以下です。</p><p><strong>業務目線</strong></p><ul><li>複数担当者（特に別組織）間で行われる仕事の受け渡しを、簡単にワークフロー化してシステムに落とせる仕組み。<ul><li>厳密には ITOM, CMDB などそれに合致しない Plugin もあるが、ITSM, HR, ServiceCatalog など多くはこれ</li></ul></li></ul><p><strong>技術目線</strong></p><ul><li>DBのレコード変更をトリガに様々な処理を間に挟む処理を簡単に作れるプラットフォーム。最初のレコード変更がフロントエンドや API などで行われると、そこから他のテーブルへの CRUD や他の API を叩いて結果を導出するなどの仕組みを簡単に作れる。</li></ul><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回、私にとって最も実装が簡単だったのはSNOWでした。逆に一番大変だったのがGoでの実装です。ただ、こういう製品と製品の間に落ちる部分の処理って、どうしてもカスタム実装が必要になるんですよね。なので、実際のサービス連携を考えた際も同じ様な比率になるんじゃないかと考えています。<br>まだまだGithubやJenkinsなど課題は多々ありますが、まずは本質的なインフラ構築の自動化を中心に置いて実装してみました。今回利用した製品/サービスは別に他のなんでも代替は可能だと思ってますので、考え方の1つとして捕えてもらえれば幸いです。</p><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/tags/GCP%98A%8D%DA/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGのDXユニットの西田です。前職ではServiceNowというaPaaS上でのアプリケーション開発をしており
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="ServiceNow" scheme="https://future-architect.github.io/tags/ServiceNow/"/>
    
      <category term="Workflow" scheme="https://future-architect.github.io/tags/Workflow/"/>
    
  </entry>
  
  <entry>
    <title>【小ネタ】AWS S3 署名付きURLってマネジメントコンソールからでも作れたのね</title>
    <link href="https://future-architect.github.io/articles/20200415/"/>
    <id>https://future-architect.github.io/articles/20200415/</id>
    <published>2020-04-15T00:46:43.000Z</published>
    <updated>2020-04-15T00:53:03.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>目新しい機能ではなくずいぶん前から存在するS3の署名付きURLについて新発見したので記載してみようと思います。</p><p>便利な署名付きURLですがインターネット上で検索する限り、URLを発行するにはAWS CLIを利用する、もしくはSDKを利用して簡単なプログラミングをするかしかないと思ってました。利用する人がITエンジニアであればそれでも良いかと思いますが、しかしながら世の中にはプログラミングが苦手だったり、操作が容易であったり様々な理由でマネジメントコンソールで操作している方も多いと思います。</p><p>今回はマネジメントコンソールで操作している方のお役に立てればと思います。</p><h1 id="S3-署名付きURLとは"><a href="#S3-署名付きURLとは" class="headerlink" title="S3 署名付きURLとは"></a>S3 署名付きURLとは</h1><p>S3のオブジェクトに対して権限によらずURLさえ知りえれば誰でもダウンロードできる機能です。<br>正確にはダウンロードとアップロードの2種類あるのですが、今回の話はダウンロードに限った話です。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="1-S3バケットを表示し、署名付きURLで公開したいファイルをクリックする"><a href="#1-S3バケットを表示し、署名付きURLで公開したいファイルをクリックする" class="headerlink" title="1. S3バケットを表示し、署名付きURLで公開したいファイルをクリックする"></a>1. S3バケットを表示し、署名付きURLで公開したいファイルをクリックする</h2><img src="/images/20200415/1.png" class="img-middle-size" style="border:solid 1px #000000"><h2 id="2-開けるボタンをクリックする"><a href="#2-開けるボタンをクリックする" class="headerlink" title="2. 開けるボタンをクリックする"></a>2. 開けるボタンをクリックする</h2><img src="/images/20200415/2.png" class="img-middle-size" style="border:solid 1px #000000"><h2 id="3-ファイルの中身が表示される"><a href="#3-ファイルの中身が表示される" class="headerlink" title="3. ファイルの中身が表示される"></a>3. ファイルの中身が表示される</h2><img src="/images/20200415/3.png" class="img-middle-size" style="border:solid 1px #000000"><h2 id="4-上記3で表示されたURLをダウンロードさせたい相手に教える"><a href="#4-上記3で表示されたURLをダウンロードさせたい相手に教える" class="headerlink" title="4. 上記3で表示されたURLをダウンロードさせたい相手に教える"></a>4. 上記3で表示されたURLをダウンロードさせたい相手に教える</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://samples3bucketname.s3.ap-northeast-1.amazonaws.com/test.txt?response-content-disposition=inline&amp;X-Amz-Security-Token=xxxxxxxxxxx&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200403T012759Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=300&amp;X-Amz-Credential=xxxxxxxxxxx&amp;X-Amz-Signature=xxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>※S3バケット名、Token等はマスクしています。</p><p>なんとこれだけで終わりです。実にお手軽！</p><h1 id="制限事項"><a href="#制限事項" class="headerlink" title="制限事項"></a>制限事項</h1><p>上記URLに含まれている通りダウンロード可能な時間は300秒(5分)です。<br>また、アップロードには対応していません。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>開けるボタンで表示した場合にはてっきりログインした状況でしか表示されないと思い込んでいたのですが、実は署名付きURLで公開されたものを閲覧していたに過ぎませんでした。</p><p>制限時間が300秒(5分)と少ないのでメールでのコミュニケーションには不向きですが、リアルタイムにチャットツールでやりとりしている際に(きっとみんなチャットツール使ってますよね？)、わざわざ自分でダウンロードしてから相手に渡さなくて済むのはお手軽で良いかと思います。</p><p>上記の通り使いどころは少ないですがマネジメントコンソールから署名付きURLが作成できることが確認できました。</p><p>また、注意点としては便利の裏返しで意図せず(短時間かつ推測困難なURLですが)全公開されているのでセキュリティを気にされる場合には開けるボタンの取り扱いにはお気を付けください。</p><p>関連する記事:</p><ul><li><a href="/articles/20191101/">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="https://future-architect.github.io/articles/20200121/">スロットリングとの付き合い方</a></li><li><a href="https://future-architect.github.io/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;目新しい機能ではなくずいぶん前から存在するS3の署名付きURLにつ
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>インフラ入門vol.4（ストレージ）</title>
    <link href="https://future-architect.github.io/articles/20200414/"/>
    <id>https://future-architect.github.io/articles/20200414/</id>
    <published>2020-04-14T02:07:29.000Z</published>
    <updated>2020-04-15T00:54:58.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG所属の川村です。<br>キャリアとしてはほぼ大半をインフラ担当として過ごし、データセンターの室温環境の中でも気にせず過ごせるという体質になったため（防寒のために脂肪を身に着けたという説もあり）、通常のオフィスが未だに暑くて難儀しています。</p><p>インフラ、興味深いですよね。今はクラウドサービスの隆盛もあり、アプリケーション分野に脚光が当たることが多いですが、これらを裏で支える素敵なインフラデザインを見るとキュンとしてしまいますね。当時のハードの仕様のため入り組んだ構成になったシステムが後年すっきりしたデザインになるのは感動的でもありますし、可用性を担保するたためにメッシュになったネットワーク構成図も幾何学的で美しいものです。</p><p>今回は連載の<a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a>の第4回目として、前2回で続いたネットワークから視点を変えて、ストレージについての説明をしようかと思います。</p><h1 id="過去記事について"><a href="#過去記事について" class="headerlink" title="過去記事について"></a>過去記事について</h1><ol><li><a href="https://future-architect.github.io/articles/20170109/">インフラ入門vol.1</a>：インフラ全般に興味を持ってもらうためのアツい記事です。</li><li><a href="https://future-architect.github.io/articles/20170704/">インフラ入門vol.2(ネットワーク)</a>：ネットワークって何さ？から仕様検討の上での入門知識が書かれた記事です。</li><li><a href="https://future-architect.github.io/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a>：冗長構成にスポットライトをあてた若干ニッチな記事です。</li><li>インフラ入門vol.4(ストレージ)：この記事。ストレージの主流となるHDDやSSDの特徴についての記事です。</li></ol><h1 id="そもそもストレージって？"><a href="#そもそもストレージって？" class="headerlink" title="そもそもストレージって？"></a>そもそもストレージって？</h1><p>当記事の対象は当然ITインフラに限ったストレージですが、それでも範囲が広いため、今回はコンピュータの構成要素における補助記憶装置、その中でも現在主流のハードディスクドライブ（HDD）、ソリッドステートドライブ（SSD）を主な対象とします。補助記憶装置、ということは主記憶装置もあるわけで、こちらはコンピュータでいうところのメインメモリとなります。</p><p>主記憶装置と補助記憶装置の単純な違いとしては以下になります。</p><ul><li><strong>主記憶装置</strong>：読み書きが速い、電源が消えると内容が消える、データサイズ単価の価格が高い</li><li><strong>補助記憶装置</strong>：読み書きが遅い、電源が消えても内容は消えない、データサイズ単価の価格が安い</li></ul><p>この特性もあり、１ユニット単位の容量もメインメモリとHDDを比較すると200倍以上の差があります。</p><p>実際の利用例としてはプログラムの入出力として使用されるファイルは普段補助記憶装置に記憶されており、プログラム実行時に主記憶装置（メインメモリ）に読みだされ、処理終了後に補助記憶装置のデータに更新の必要があれば補助記憶装置に書き戻されます。</p><h1 id="ストレージの特徴（HDD編）"><a href="#ストレージの特徴（HDD編）" class="headerlink" title="ストレージの特徴（HDD編）"></a>ストレージの特徴（HDD編）</h1><p>現在もエンタープライズシステムにおけるストレージの主流。近年SSDに押されていますがまだまだ最前線で活躍しています。その最大の特徴はデータサイズ単位の価格が低いことです。2020年4月現在、1万円程度で6TBのHDDが購入できますが、同程度の価格帯でメインメモリ、SSDと比較すると</p><ul><li>メインメモリ：16GB</li><li>SSD：500GB～1TB</li></ul><p>となり、HDDの圧倒的なコストパフォーマンスが伝わります。<br>参考ですが、テープ媒体であるLTOはLTO7（6TB：圧縮時15TB）のテープが1本1万円程度です。さすがにここまでは達していませんが、利便性を考えるとHDDでのデータ長期保管も現実味のある選択肢になってきています。LTO、決して使いやすいとは言えないし・・・</p><p>そんなHDDですが歴史は長く、初期は高級品でした。家庭のPCで利用されるようになったのは1980年代半ばから後半にかけてでしょうか。このころはそもそもPC自体がある家庭が珍しく、私の家にはたまたまありましたが30MB程度の容量でした。それでも当時のフロッピーディスクの20倍超という大容量で、当時保存するデータは文字データが中心なこともあり、なかなか使いきれないサイズ感でありました。</p><p>HDDドライブの内部構成としては<strong>プラッタ</strong>というアルミニウムやガラスに磁性体を塗布した円盤をモーターで回転させ、ヘッドで読み書きを行います。プラッタは5400rpm（round per minuts）から10000rpmを超えるものまであり、最外周部は100km/hを超えるスピードに達します。このプラッタとヘッドの距離は数nmしか離れておらず、飛行機が地上スレスレを飛んでいるような状態と例えられることがあります。また、HDDは内部にもキャッシュメモリを内蔵しており、直近でアクセスしたデータにおいてはキャッシュメモリから読み込みが行われます。</p><p>ディスクに対する書き込み、読み込みは <strong>セクタ</strong> と呼ばれる単位ごとに行われます。一般的には512B単位であり、512以下のデータはセクタ内に、512Bを超えるデータは複数セクタに記録されます。例として、513Bのデータは2セクタを使用するためディスク上は1024B使用していることになります。プラッタ上でのセクタ１周分をトラックといいます。トラック内のセクタ数は外周になるほど多くなります。</p><img src="/images/20200414/photo_20200414_01.png" class="img-middle-size"><p>また、CD-RやDVD-Rと異なり、HDDは外側からの書き込みとなります。これは、プラッタが円形であることから外側の方がセクタが多くなり、同じ一周でもプラッタの外側の方が多くのセクタにアクセスが行えます。実際HDDに対する書き込みスピードは最初と最後で差があることが分かっています。インタフェースの側に目を向けると、データ転送の規格がPC向けだとSATA（SATA3.0：600MB/s）、エンタープライズレベルでSAS（SAS3.0：2400MB/s）となっており、特にSATAは転送速度向上が近年鈍化しており、転送速度向上には時間がかかる傾向にあります。</p><p>雑学ですがレコードも外側の方が1回転で読み取れる情報量が多いため、外側に記録されている曲は音質が良くなります。カセットテープはサーボモータによりテープの送り出し速度が一定のため、どこに記録されても音質は一定となります。オーディオCDも音声ファイルの仕様により一定の音質となります。</p><p>構成部品の点数、回転するプラッタとヘッドの関係により振動に弱いという特徴もあり、信頼性はあまり高くないです。特にモバイル機器においてはHDDの故障が多く、こちらはいち早くSSDが主流になったという経緯があります。また、物理的なドライブのサイズもSSDに比べると大きく、本体の厚みにも影響を及ぼします。</p><p><strong>HDDの特徴まとめ</strong></p><ul><li>データサイズ単位の価格が安い</li><li>ドライブの最初と最後で読み書きのスピードが変わる</li><li>インタフェース規格の性能向上が鈍化しており、データ転送速度が他インタフェースに対して相対的に遅い</li><li>物理的なサイズが（SSDに比較して）大きい</li><li>駆動部品の多さから信頼性が低い</li></ul><h1 id="ストレージの特徴（SSD編）"><a href="#ストレージの特徴（SSD編）" class="headerlink" title="ストレージの特徴（SSD編）"></a>ストレージの特徴（SSD編）</h1><p>今、新規でノートPCを購入するなら大抵はSSD採用モデルになるのではないでしょうか。SSDが個人ユースに普及しだしたのは2010年頃。当然ながらデータサイズあたりの単価はHDDに比べ高価ですが、消費電力の低さ、耐衝撃性、動作音も発生しない、規格によってはHDDより小さく、薄く作れるという優位性の多さから置き換えが進んできています。</p><p>SSDを構成する部品はフラッシュメモリとキャッシュメモリ、アクセス制御用のコントロールチップなどとなります。製品の差別化に使われるのはフラッシュメモリが大半で、メモリの種別としてNAND型とNOR型（SSDは通常NAND型）、メモリセル1つに対して何bit書き込むかにより<strong>SLC型</strong>（1bit）、<strong>MLC型</strong>（2bit）、<strong>TLC</strong>型（3bit）、<strong>QLC</strong>型（4bit）に分類されます。が、仕様情報が公表されていることはあまり多くなく、価格帯でなんとなく判断をすることが多いです。また、駆動部品がないことからHDDに対して相対的に故障率が低く、HDDではよく用いられるRAIDという耐障害構成はSSDでは不要という声もあります。</p><p>フラッシュメモリ（NAND型）は読み込み・書き込みはページ単位、消去はブロック単位で行われます。上書きは行えないためデータの更新は消去を行ってから書き込むことになります。1ページは標準的なSLCでは2112バイト、1ブロックは64ページとなります。1ページを上書きする場合、以下の挙動となります。<br>　１．該当ページが所属するブロックの情報を読み込みフラッシュメモリ外部へキャッシュ<br>　２．該当のブロックを消去<br>　３．上書きするページ、キャッシュしたページの書き込み</p><img src="/images/20200414/photo_20200414_02.png" class="img-middle-size"><p>SLCにおける、1ビットを記録する単位をメモリセルと呼びます。メモリセルには書き換え回数に上限があり、それを超えると書き換えが行えなくなります。書き換えが行えなくなるセルを含んだブロックを不良ブロックと言い、領域として使用されなくなります。メモリセルの書き換え回数の上限はSLCが10万回程度、MLCで1万回程度、TLCは3000回程度、QLCは1000回程度と言われており、SSD使用中に利用できる領域は減少していく傾向にあります。書き換えを多く行うデータを置く場合はMLC型以上のSSD採用の検討を行った方がいいかと思われます。</p><p>SSDは当初HDDの置き換え用途もあり、HDD同様SATA規格での普及が進みましたが、近年はPCI Expressをインタフェースに使用したM.2型のSSDが、その性能から主流となりつつあります。PCI Expressのスロットに挿すタイプのSSDもありますが、こちらはデスクトップ向けの高性能用途として利用されます。PCI ExpressはSASを大きく上回る4000MB/s（PCI Express 3.0 x4）のデータ速度となるためコンピュータ内でボトルネックになることが多いディスクI/Oの性能向上に寄与することができます。</p><p><strong>SSDの特徴まとめ</strong></p><ul><li>高信頼性</li><li>読み書きスピードが速い</li><li>書き換え回数に上限がある</li><li>物理サイズが小型化できる</li><li>製品仕様が分かりづらい</li></ul><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>HDD、SSDのハードウェア仕様のみの説明となりましたが、他にもCD-R、DVD-Rなどの光学ディスクやLTO、DATといったテープデバイスなどの媒体、RAIDなどの仮想ドライブ、NASやSANといった利用形態、ファイバーチャネルなどを使用したインタフェースなど、ストレージの世界を構成する要素については、この連載の続きで私を含む誰かが解説してくれることを期待してます。</p><p>クラウド化が進んだ昨今、物理ストレージを意識する機会は減りつつありますが、利用しているサービスの奥底には物理ストレージがあることを記憶していただけると幸いです。</p><hr><p>関連記事:</p><ul><li><a href="/articles/20170109">インフラ入門vol.1</a></li><li><a href="/articles/20170704/">インフラ入門vol.2(ネットワーク)</a></li><li><a href="/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a></li><li><a href="/articles/20200414/">インフラ入門vol.4((ストレージ)</a></li><li><a href="/articles/20190731/">俺のインフラデザインパターン　～過去の失敗に学ぶニッチなインフラの話～</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG所属の川村です。&lt;br&gt;キャリアとしてはほぼ大半をインフラ担当として過ごし、データセンターの室温環境の中で
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="インフラ入門" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/"/>
    
      <category term="Storage" scheme="https://future-architect.github.io/tags/Storage/"/>
    
  </entry>
  
  <entry>
    <title>スキーマファースト開発のためのOpenAPI（Swagger）設計規約</title>
    <link href="https://future-architect.github.io/articles/20200409/"/>
    <id>https://future-architect.github.io/articles/20200409/</id>
    <published>2020-04-09T01:38:04.000Z</published>
    <updated>2020-04-11T06:44:35.510Z</updated>
    
    <content type="html"><![CDATA[<p>はじめまして。TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の亀井です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><img src="/images/20200409/1.png" style="border:solid 1px #000000"><p>みなさん、Swagger使ってますか？<br>Swaggerや周辺ツールについては <a href="https://future-architect.github.io/articles/20191008/">某先輩の記事</a> にて丁寧に解説されていますので、<br>本記事では実際にSwaggerのスキーマ定義を設計していく上で取り決めた規約について書いてみたいと思います。</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>私が在籍しているプロジェクトでは、REST APIは golang でフロントエンドを Vue.js + TypeScript で構築しています。<br>短期間・高品質での構築を実現するためにSwaggerを設計ドキュメントとしてだけではなく、コード自動生成やモックサーバーに活用させることで徹底したスキーマファーストな開発を行ってきました。</p><p>というわけで、今回は下記のツールを利用することを前提として規約を作成しています。</p><ul><li><a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a>: Goアプリケーションのハンドラ、リクエスト/レスポンスのドメインモデル、バリデーションフレームワーク<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li><li><a href="https://github.com/OpenAPITools/openapi-generator" target="_blank" rel="noopener">openapi-generator/typescript-axios</a>: フロントエンドのHTTPクライアント、リクエスト/レスポンスのインターフェイス</li><li><a href="https://stoplight.io/open-source/prism" target="_blank" rel="noopener">Prism</a>: フロントエンド開発時に利用するモックサーバー</li></ul><h1 id="設計規約"><a href="#設計規約" class="headerlink" title="設計規約"></a>設計規約</h1><h2 id="バージョン"><a href="#バージョン" class="headerlink" title="バージョン"></a>バージョン</h2><ul><li><a href="https://swagger.io/docs/specification/2-0/basic-structure/" target="_blank" rel="noopener">OpenAPI v2</a><ul><li>前述の<code>go-swagger</code>が3系に対応されていないため2系を利用</li></ul></li></ul><h2 id="paths"><a href="#paths" class="headerlink" title="paths"></a>paths</h2><h3 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h3><ul><li>必須</li><li>1URIで１つのタグのみ定義する</li><li>リソース名を単数形で記載する</li><li>キャメルケース</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">product</span> <span class="comment"># GoアプリケーションのhandlerやTypeScriptのclassの単位となる</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">products</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">user</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">product</span></span><br></pre></td></tr></table></figure><h3 id="operationId"><a href="#operationId" class="headerlink" title="operationId"></a>operationId</h3><ul><li>必須</li><li><code>${HTTPメソッド}${機能物理名}</code>を記載する</li><li>キャメルケース</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># GET /products</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">getProducts</span></span><br><span class="line"><span class="comment"># GET /products/:product_id</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">getProductByProductId</span></span><br><span class="line"><span class="comment"># POST /products</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">postProducts</span></span><br><span class="line"><span class="comment"># PUT /products/:product_id</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">putProduct</span></span><br><span class="line"><span class="comment"># DELETE /product/:product_id</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">deleteProduct</span></span><br></pre></td></tr></table></figure><h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><ul><li>必須</li><li><code>${機能ID} ${機能論理名}</code>で定義する</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">summary:</span> <span class="string">XXX-0001</span> <span class="string">商品参照</span></span><br></pre></td></tr></table></figure><h3 id="security"><a href="#security" class="headerlink" title="security"></a>security</h3><ul><li>必須</li><li>認証の要否で以下のように定義する</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 認証なし</span></span><br><span class="line"><span class="attr">security:</span> <span class="string">[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 認証あり</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  - isAuthorized:</span> <span class="string">[]</span></span><br></pre></td></tr></table></figure><ul><li>参考: securityDefinitions</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OAuth認証</span></span><br><span class="line"><span class="attr">securityDefinitions:</span></span><br><span class="line"><span class="attr">  isAuthorized:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">oauth2</span></span><br><span class="line"><span class="attr">    flow:</span> <span class="string">accessCode</span></span><br><span class="line"><span class="attr">    authorizationUrl:</span> <span class="string">'https://example.com/authorize'</span></span><br><span class="line"><span class="attr">    tokenUrl:</span> <span class="string">'https://example.com/.well-known/jwks.json'</span></span><br></pre></td></tr></table></figure><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><ul><li>必須</li><li>APIの機能概要を記載する。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">IDを指定して商品情報を取得する。</span></span><br></pre></td></tr></table></figure><h3 id="parameters"><a href="#parameters" class="headerlink" title="parameters"></a>parameters</h3><h4 id="GET-DELETE-API-の場合"><a href="#GET-DELETE-API-の場合" class="headerlink" title="GET/DELETE API の場合"></a>GET/DELETE API の場合</h4><ul><li>in:          PATHパラメータ<code>in: path</code>またはクエリパラメータ<code>in: query</code>のみ利用可能</li><li>description: 必須</li><li>name:        物理名を定義する<ul><li>命名規約<ul><li>スネークケース</li><li>原則略語は禁止</li><li><code>type: array</code>の場合、<code>xxx_list</code>や<code>xxx_array</code>はNGとする</li><li><code>type: boolean</code>の場合、<code>is_xxx</code>や<code>has_xxx</code>で定義し<code>xxx_flag</code>は非推奨とする<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">product_id</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">プロダクトID</span></span><br><span class="line"><span class="attr">  required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">product_types</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">プロダクト種別</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">is_defective</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">boolean</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">不良品フラグ</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">productId</span> <span class="comment"># キャメルケースはNG</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">プロダクトID</span></span><br><span class="line"><span class="attr">  required:</span> <span class="literal">false</span> <span class="comment"># 不要</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">product_type_list</span> <span class="comment"># xxx_listはNG</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">プロダクト種別</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">defective_flag</span> <span class="comment"># trueとfalseがどちらの状態を示すのか不明瞭であるため非推奨</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">boolean</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">不良品フラグ</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="POST-PUT-API-の場合"><a href="#POST-PUT-API-の場合" class="headerlink" title="POST/PUT API の場合"></a>POST/PUT API の場合</h4><ul><li>in:       リクエストボディ<code>in: body</code>のみ利用可能</li><li>name:     全て<code>name: body</code>とする</li><li>required: リクエストボディが必須でない場合を除いて<code>required: true</code>を定義する</li><li>schema:   リクエストモデルを<code>type: object</code>で定義する<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - in:</span> <span class="string">body</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">body</span></span><br><span class="line"><span class="attr">    required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">'#/definitions/postProductsRequest'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - in:</span> <span class="string">body</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">postProductsBody</span></span><br><span class="line"><span class="attr">    required:</span> <span class="literal">false</span> <span class="comment"># 不要</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span> <span class="comment"># TypeScriptのInterfaceの自動生成時に型が適切に定義されない</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        product_name:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="バリデーション"><a href="#バリデーション" class="headerlink" title="バリデーション"></a>バリデーション</h4><ul><li><p>必須</p><ul><li>required: 必須パラメータのみ<code>required: true</code>を定義する</li><li>default: 必須でないパラメータでもデフォルト値がある場合は定義する</li></ul></li><li><p>型</p><ul><li>type: 必須<ul><li>文字列：string</li><li>数値：number</li><li>整数値：integer</li><li>ブール値：boolean</li><li>配列：array</li><li>オブジェクト：object</li></ul></li><li><code>type: array</code>の場合、配列要素<code>items</code>のtypeも必須</li><li><code>type: null</code>は原則として利用しない</li><li>複数のタイプを定義しない</li></ul></li><li><p>桁</p><ul><li>文字列<ul><li>最大桁数：<code>maxLength</code></li><li>最小桁数：<code>minLength</code></li></ul></li><li>数値または整数値<ul><li>最大値（境界値を含む）：<code>maximum</code></li><li>最小値（境界値を含む）：<code>maximum</code></li><li>境界値を含まない場合のみ<code>exclusiveMinimum: true</code>または<code>exclusiveMaximum: true</code>を定義</li></ul></li><li>配列:<ul><li>最大要素数：<code>maxItems</code></li><li>最小要素数：<code>minItems</code></li><li><code>required: true</code>の場合は原則として<code>minItems: 1</code>を定義する</li></ul></li></ul></li><li><p>区分値</p><ul><li><code>enum</code>必須</li><li><code>description</code>に区分値の論理名を記載する<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex. enum</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">gender</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">enum:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'00'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'01'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'02'</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  性別</span></span><br><span class="line"><span class="string">    00: 不明</span></span><br><span class="line"><span class="string">    01: 男</span></span><br><span class="line"><span class="string">    02: 女</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>日付/日時/時刻</p><ul><li><p>日付</p><ul><li>ISO8601拡張形式（YYYY-MM-DD）とする</li><li>example: <code>2020-01-31</code></li><li>name: 接尾辞<code>_date</code></li><li>type: <code>string</code></li><li>format: <code>date</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">created_date:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    example:</span> <span class="string">'2020-01-31'</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">date</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>日時</p><ul><li><p>タイムゾーン指定子付きISO8601形式とする</p></li><li><p>秒精度（YYYY-MM-DDThh:mm:ss+TZD）の場合</p><ul><li>example: <code>2020-01-31T23:59:59+09:00</code></li><li>name: 接尾辞<code>_date_time</code></li><li>type: <code>string</code></li><li>format: <code>date-time</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">created_date_time:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    example:</span> <span class="string">'2020-01-31T23:59:59+09:00'</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">date-time</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>ミリ秒精度（YYYY-MM-DDThh:mm:ss.sss+TZD）の場合</p><ul><li>example: <code>2020-01-31T23:59:59.000+09:00</code></li><li>name: 接尾辞<code>_date_time</code></li><li>type: <code>string</code></li><li>pattern: 必須<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">created_date_time:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    example:</span> <span class="string">'2020-01-31T23:59:59.000+09:00'</span></span><br><span class="line"><span class="attr">    pattern:</span> <span class="string">'^((?:[1-9][0-9]*)?[0-9]&#123;4&#125;)-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9][0-9][0-9])[+|-]([0-9][0-9]:[0-9][0-9])$'</span><span class="string">`</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>時刻</p><ul><li>ISO8601形式（hh:mm）とする</li><li>example: <code>23:59</code></li><li>name: 接尾辞<code>_time</code></li><li>type: string</li><li>pattern: 必須<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">created_time:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    example:</span> <span class="number">23</span><span class="string">:59</span></span><br><span class="line"><span class="attr">    pattern:</span> <span class="string">'^(2[0-3]|[01][0-9]):([0-5][0-9])$'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>その他</p><ul><li>正規表現で表現できる文字列は<code>pattern</code>を利用して定義すること</li></ul></li></ul><h2 id="responses"><a href="#responses" class="headerlink" title="responses"></a>responses</h2><h3 id="GET-APIの場合"><a href="#GET-APIの場合" class="headerlink" title="GET APIの場合"></a>GET APIの場合</h3><ul><li><p>description</p><ul><li>必須</li><li>HTTPステータスコードのメッセージを記載すること</li></ul></li><li><p>schema</p><ul><li><p>HTTPステータス：200の場合</p><ul><li><code>type: object</code>でレスポンスモデルを定義する</li><li>required: 必須で返る項目を定義する</li><li>再利用可能なモデルを<code>definitions</code>配下に定義する<ul><li>複合的なモデルを定義する場合は<code>allOf</code>を利用する<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="attr">getProductsResponse:</span></span><br><span class="line"><span class="attr">  allOf:</span></span><br><span class="line"><span class="attr">    - type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        products:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">          items:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">"#/definitions/product"</span></span><br><span class="line"><span class="attr">        required:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">products</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">$ref:</span> <span class="string">"#/definitions/pagination"</span></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="attr">getProductsResponse:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span> <span class="comment"># TypeScriptのInterfaceが適切に定義されません</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    product:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          product_id:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line">            <span class="comment"># required: true を定義しないとundefined許容の変数となり不要なType Guardが必要になる</span></span><br><span class="line"><span class="attr">          product_name:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>HTTPステータスコード：400系または500系の場合</p><ul><li>共通で定義されたレスポンスモデルを利用すること</li></ul></li></ul></li><li><p>examples</p><ul><li>ステータスコード：200の場合のみ<code>application/json</code>という命名で必須</li><li>必須項目は必ず値を記載すること<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span><span class="string">:</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">  schema:</span></span><br><span class="line">    <span class="string">$ref:</span> <span class="string">'#/definitions/getProductsResponse'</span></span><br><span class="line"><span class="attr">  examples:</span></span><br><span class="line">    <span class="string">application/json:</span> <span class="comment"># Mockサーバのレスポンスになるためフロントエンド開発者も編集する</span></span><br><span class="line"><span class="attr">      products:</span></span><br><span class="line"><span class="attr">        - product_name:</span> <span class="string">Example</span> <span class="string">Product</span></span><br><span class="line"><span class="attr">          create_date:</span> <span class="string">'2020-01-01'</span></span><br><span class="line"><span class="number">400</span><span class="string">:</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line"><span class="attr">  schema:</span></span><br><span class="line">    <span class="string">$ref:</span> <span class="string">'#/definitions/ErrorResponse'</span></span><br><span class="line"><span class="number">500</span><span class="string">:</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line"><span class="attr">  schema:</span></span><br><span class="line">    <span class="string">$ref:</span> <span class="string">'#/definitions/ErrorResponse'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="POST-PUT-DELETE-APIの場合"><a href="#POST-PUT-DELETE-APIの場合" class="headerlink" title="POST/PUT/DELETE APIの場合"></a>POST/PUT/DELETE APIの場合</h3><ul><li>description<ul><li>必須</li><li>HTTPステータスコードのメッセージを記載すること</li></ul></li><li>schema<ul><li>原則不要</li><li>必要な場合は<code>type: object</code>でレスポンスモデルを定義する</li></ul></li><li>examples<ul><li>schemaを定義した場合のみ記載する</li><li>ステータスコード：200の場合のみ<code>application/json</code>という命名で必須</li><li>必須項目は必ず値を記載すること</li></ul></li></ul><h2 id="models"><a href="#models" class="headerlink" title="models"></a>models</h2><h3 id="リクエストモデル"><a href="#リクエストモデル" class="headerlink" title="リクエストモデル"></a>リクエストモデル</h3><ul><li>URI単位で1モデルを定義する</li><li>命名規約<ul><li>キャメルケース</li><li><code>postXxxxRequest</code>または<code>putXxxxRequest</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /products</span></span><br><span class="line"><span class="attr">postProductRequest:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    proeuct_name:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  required:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">product_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PUT /products/:product_id</span></span><br><span class="line"><span class="attr">putProductRequest:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    proeuct_id:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    proeuct_name:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  required:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">product_id</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="レスポンスモデル"><a href="#レスポンスモデル" class="headerlink" title="レスポンスモデル"></a>レスポンスモデル</h3><ul><li>URI単位で1モデルを定義する</li><li>リソースモデルをそのまま利用できる場合は不要</li><li>命名規約<ul><li>キャメルケース</li><li><code>getXxxxResponse</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /products</span></span><br><span class="line"><span class="attr">getProductResponse:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    proeucts:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">      items:</span></span><br><span class="line">        <span class="string">$refs:</span> <span class="string">"#/definitions/product"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GET /products/:product_id</span></span><br><span class="line"><span class="attr">responses:</span></span><br><span class="line">  <span class="number">200</span><span class="string">:</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line">        <span class="string">$ref:</span> <span class="string">"#/definitions/product"</span> <span class="comment"># リソースモデルをそのまま利用する場合は不要</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="リソースモデル"><a href="#リソースモデル" class="headerlink" title="リソースモデル"></a>リソースモデル</h3><ul><li>リソースや共通で利用するエンティティの単位で単数形で定義する</li><li>命名規約<ul><li>キャメルケース<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pagination:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    total_counts:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">    offset:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">    limit:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">  required:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">total_counts</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">offset</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">limit</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="HTTPステータス"><a href="#HTTPステータス" class="headerlink" title="HTTPステータス"></a>HTTPステータス</h2><ul><li>原則として<a href="https://tools.ietf.org/html/rfc7231#section-6" target="_blank" rel="noopener">RFC 7231</a>で定義されているレスポンスステータスコードを利用します</li><li>以下、設計者が特に意識すべきものを抜粋して記載します。</li></ul><h3 id="共通"><a href="#共通" class="headerlink" title="共通"></a>共通</h3><ul><li>バリデーションエラー：<code>400 Bad Request</code></li><li>業務エラー：<code>400 Bad Request</code></li><li>認証エラー：<code>401 Unauthorized</code></li><li>認可エラー：<code>403 Forbidden</code></li><li>システムエラー：<code>500 Internal Server Error</code></li></ul><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><ul><li>正常系：<code>200 OK</code></li><li>検索系APIで結果0件：<code>200 OK</code></li><li>キー検索系APIで対象リソースが存在しないエラー：<code>404 Not Found</code></li></ul><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><ul><li>正常系（同期）：<code>201 Created</code></li><li>正常系（非同期）：<code>202 Accepted</code></li><li>一意制約違反エラー：<code>409 Conflict</code></li><li>親リソースが存在しないエラー：<code>404 Not Found</code></li></ul><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><ul><li>正常系（同期）：<code>200 OK</code></li><li>正常系（非同期）：<code>202 Accepted</code></li><li>対象リソースが存在しないエラー：<code>404 Not Found</code></li></ul><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><ul><li>正常系：<code>204 No Content</code></li><li>対象リソースが存在しないエラー：<code>404 Not Found</code></li></ul><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はSwaggerやREST APIの設計に慣れてないメンバーを含む複数人で設計していくことを踏まえて、Swaggerに精通している方には自明な内容を含めやや細かめに規約を設定してみました。<br>結果として品質の高いスキーマ定義でコードを自動生成することでテスト工数も削減できますし、TypeScriptの恩恵をしっかり享受できました。<br>よいソースコードを書くために正しく美しいスキーマ定義を設計しましょう。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a></li><li><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a></li><li><a href="https://future-architect.github.io/articles/20200319/">今あえてTypeScriptのビルド＆バンドルツールを探してみる</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">go-swaggerについては <a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a> で詳しく紹介されています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;はじめまして。TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;の亀井です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
      <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
      <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
      <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた</title>
    <link href="https://future-architect.github.io/articles/20200401/"/>
    <id>https://future-architect.github.io/articles/20200401/</id>
    <published>2020-04-01T01:30:55.000Z</published>
    <updated>2020-05-12T00:55:32.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、とあるプロジェクトでアーキチームに所属している東郷です。</p><p>今回はVue.jsの最初の難関（だと思っている）「props down, event up」について、初心者（わたしが主に想定しているのは新卒入社の新人さんです）が読んでもわかるような資料を用意してみようと思います。</p><p>プロジェクトで独自のコンポーネントを作ったり、会社として用意しているコンポーネントの利用や改良ができるようになってもらいたいという思いから、その導入を解説しようということです。</p><p>ちなみに、私自身もアサインされて半年未満。Vue.jsを触り始めて4か月くらいです。<br>では、簡単なおさらいから始めていきます。</p><p>続編が公開されました。</p><ul><li><a href="/articles/20200428/">Vue.jsのslotの機能を初心者にわかるように解説してみた</a></li></ul><h1 id="Vue-jsとMVVM"><a href="#Vue-jsとMVVM" class="headerlink" title="Vue.jsとMVVM"></a>Vue.jsとMVVM</h1><p>props down, event upの理解のためにMVVMについて簡単に触れておきましょう。<br>下記は、Vueの<a href="https://012-jp.vuejs.org/guide/" target="_blank" rel="noopener">公式サイト(https://012-jp.vuejs.org/guide/)</a>から引用しました</p><blockquote><p>Vue.js はインタラクティブな Web インターフェイスを作るためのライブラリです。<br>技術的に、Vue.js は MVVM パターンの ViewModel レイヤに注目しています。それは two way (双方向)バインディングによって View と Model を接続します。実際の DOM 操作と出力の形式はディレクティブとフィルタによって抽象化されています。</p></blockquote><p>初心者にとってはMVVM パターンと言われてもピンとこないと思います。<br>そこで、導入として例を交えながら詳しく解説します。</p><h2 id="MVVMはModel-View-ViewModelの頭文字"><a href="#MVVMはModel-View-ViewModelの頭文字" class="headerlink" title="MVVMはModel-View-ViewModelの頭文字"></a>MVVMはModel-View-ViewModelの頭文字</h2><p>下の図はVue.jsの公式サイトから拝借しました。<br>図で見ると何となく分かった感じがしますが、何となくの理解ではなく確実に理解しましょう。<br><img src="/images/20200401/photo_20200401_01.png"></p><p><a href="https://012-jp.vuejs.org/guide/" target="_blank" rel="noopener">Vue.js 公式サイト(https://012-jp.vuejs.org/guide/)</a>より</p><table><thead><tr><th></th><th>実体</th><th>役割</th></tr></thead><tbody><tr><td>model</td><td>JavaScrptのコード</td><td>データ処理の主体</td></tr><tr><td>view</td><td>DOM(最終的なhtml)</td><td>人間に情報を伝える、操作を受け付ける末端</td></tr><tr><td>ViewModel</td><td>vue.js</td><td>modelで処理したデータをどんなふうにveiwに流し込むかの制御、viewで受けた操作をmodelに伝える</td></tr></tbody></table><p>なぜ、アルファベットで表現してまで分割して考えるのか？それは、具体例を考えれば簡単に理解できるはずです。</p><p>ユーザに何らかのデータを伝えるとき、どんな見せ方をしますか？あるいはどんな見方をしたいですか？文章、表、写真、動画、音楽の再生など、データに合わせて適切な見せ方が存在するはずです。では、適切な見せ方が決まって同じ種類のデータを扱うのなら、ある種のテンプレートにデータを流し込んで決まった見せ方にしますよね？</p><p>もし変えてしまったらユーザーは混乱しますし、そんな複雑なサイトを作るのは困難かつ望ましくありません。</p><p>上記の話の見せ方（ある種のテンプレート）の部分をview(見た目)としてDOMが担当します。viewに流しこむデータの取得・加工、viewで受けた操作の命令を受けるのはmodelとしてのJavaScriptです。（写真管理のwebサービスなんかであればダウンロード操作など）</p><h2 id="MVVMの実現のために重要なData-binding"><a href="#MVVMの実現のために重要なData-binding" class="headerlink" title="MVVMの実現のために重要なData binding"></a>MVVMの実現のために重要なData binding</h2><p>Vue.jsがMVVMを実現するために取り入れている仕組みにData bindingがあります。</p><p>Data bindingは、よく「データを流し込む目印を打ち込む」と表現されます。まさにこの言葉がすべてを表しています。本解説の肝、「props down, event up」で再度、上記の表現について触れます。Data Bindingは、その言葉が表すように <strong>“データを特定の個所に結びつけます”</strong>。</p><p>しがたって、元のデータが途中で変わっても目印を打ち込んであるので、自動で（Vue.jsが勝手に）目印を打ち込んだ箇所の値を書き換えてくれます。素敵ですね。</p><p>一方で誤解しやすいのがこのData bindingという考え方です。</p><p>ついつい、Vue.jsにおけるData bindingは、常に双方向にデータが流れ込むものだと思ってしまいます。（特にv-modelに値をバインドすれば値の変更に対応できることを知ったばかりの初心者さんはそう思ってしまう。）もちろん、Vue.jsとしては双方向にデータのやり取りは可能です。しかし、単純なData bindingだけですべての仕様を実現することはできません。</p><p>次章では、実際のコードを見ながらData bindingがどんなふうに機能しているかを見ていきましょう。</p><p>※初心者の皆さんへ：<br>ちなみに、MVVMやData bindingはVue.js専用の言葉ではありません。<br>MVVMはプロダクトの構成パターン、Data bindingは仕組みの名前であり他の言語やFrameworkでも当然登場します。</p><h1 id="props-down-event-up-が何を意味するのか"><a href="#props-down-event-up-が何を意味するのか" class="headerlink" title="props down, event up が何を意味するのか"></a>props down, event up が何を意味するのか</h1><p>ちょっと前置きが長くなりましたが、本題のprops down, event upについて、実例を交えながら解説をしていきます。</p><p>業務でVue.jsを使うとなると普通はVueCLIを用いた単一コンポーネントファイルによる開発になると思います。当社でもその形式を利用しています。</p><p>この記事の題材もそれに倣って、下記のようなファイルの構成で説明を進めます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># フォルダの階層構造</span></span><br><span class="line">src</span><br><span class="line"> └ components</span><br><span class="line">    ├ ParentLayer.vue</span><br><span class="line">    ├ ChildLayer.vue</span><br><span class="line">    └ GrandChildLayer.vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># Vue内での構造</span></span><br><span class="line">App.vue ─────────────────────────</span><br><span class="line">│ ParentLayer.vue ─────────────────────────</span><br><span class="line">│ │ ChildLayer.vue ─────────────────────────</span><br><span class="line">│ │ │ GrandChildLayer.vue ─────────────────────────</span><br><span class="line">│ │ │ │</span><br></pre></td></tr></table></figure><p>※<strong>2020/04/14追記</strong>: なお今回の題材では、3つのコンポーネントを親子孫関係にしていますが、何階層にもわたってデータを連携するのは現場ではあまりお勧めされません。データとイベントの管理が大変になりますのでemitの乱用は避けるべきです。<br>親コンポーネントがもつデータを浅い階層でやり取りするため、再利用性の高いコンポーネントの利用/作成のためと思ってご覧ください。場合によってはVuexを使ったデータ管理も有効かもしれません</p><p>実際の画面はこんな感じです。<br><img src="/images/20200401/photo_20200401_02.png" class="img-small-size"></p><p><code>components</code>配下のvueファイルのソースを下記に示します。<br><code>App.vue</code>は中身を空っぽにして<code>ParentLayer.vue</code>を表示しているだけですので割愛します。</p><figure class="highlight html"><figcaption><span>ParentLayer.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 説明のための表示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Parent:&#123;&#123; model.testData &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- THML5 標準の要素に対するデータバインディング --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"ParentInput"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">v-model</span>=<span class="string">"model.testData"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自作のコンポーネントに対するデータバインディング --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-layer</span> <span class="attr">class</span>=<span class="string">"child"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">v-model</span>=<span class="string">"model.testData"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-layer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ChildLayer <span class="keyword">from</span> <span class="string">'../components/ChildLayer'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'ParentLayer'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    ChildLayer</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    msg: <span class="built_in">String</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      model: &#123;</span><br><span class="line"><span class="javascript">        testData: <span class="literal">null</span>  <span class="comment">// 上記のtemplete部で合計3箇所にバインドされている。</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.parent &#123;</span><br><span class="line">  border: solid gray;</span><br><span class="line">  background: pink;</span><br><span class="line">  height: 300px;</span><br><span class="line">  width: 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>model.testData</code>が3か所にbindされています。</p><p>1つ目は、<code>templete</code>で直接使用するマスタッシュ構文で、<br>2つ目は、HTML5標準の<code>input</code>タグに<code>v-model</code>ディレクティブで、<br>3つ目は、今回自作した<code>children-layer</code>タグに<code>v-model</code>ディレクティブで<br>使用しています。</p><p>1つ目のマスタッシュ構文は参照だけです。何も困りませんし、<code>model.testData</code>が変更されれば勝手に変わります。<br>2つ目の<code>input</code>タグの<code>v-model</code>ディレクティブでは、テキストボックスに<code>model.testData</code>の値が勝手に入ってきますし、</p><p>上記の実装ならテキストボックスを編集すれば、<code>model.testData</code>がバインドされた箇所すべてが変更された値に変わります。勝手に値が流れ込んできてくれるし、それを編集すれば他にもその変更が伝わります。つまり、<strong>双方向に値が伝達されていっているように見えてしまいます</strong>。</p><p>ここが、Vue.jsのありがたいところであり、props down, event upの理解を困難にする部分です。入力内容が<code>model.testData</code>に自動反映される仕組みは次の<code>ChildLayer.vue</code>の説明と合わせて行います。</p><p>3つ目の<code>children-layer</code>タグに<code>v-model</code>ディレクティブで指定された値がどんなふうに<code>ChildLayer.vue</code>が受け取り、処理するかについてですが、ここからはコンポーネントの理解を深めつつ見ていく必要があります。では、<code>ChildLayer.vue</code>のソースを見ながら確認します。</p><figure class="highlight html"><figcaption><span>ChildLayer.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Child:&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"ChildInput"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:value</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">input</span>=<span class="string">"test"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"clickChildButton(value)"</span>&gt;</span>clickChildButton<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">grand-child-layer</span> <span class="attr">class</span>=<span class="string">"grand-child"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">v-model</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">grand-child-layer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> GrandChildLayer <span class="keyword">from</span> <span class="string">'../components/GrandChildLayer'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'ChildLayer'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandChildLayer</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    msg: <span class="built_in">String</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    test (e) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> vm = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">      vm.$emit(<span class="string">'input'</span>, e.target.value)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">  border: solid gray;</span><br><span class="line">  background: palegreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.grand-child &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ParentLayer.vue</code>で<code>v-model=&quot;testData&quot;</code>として流れ込んできた値は、<code>ChildLayer.vue</code>でどんなふうに受け取り、処理しているのでしょうか？</p><p>答えは、<code>ChildLayer.vue</code>の<code>props</code>の<code>value</code>プロパティです。<code>ParentLayer.vue</code>では<code>testData</code>という変数で扱われていた値は、<code>ChildLayer.vue</code>では<code>value</code>プロパティの値として扱われます。こうして、親コンポーネントから子コンポーネントへと値が流れ込んできます。<code>ChildLayer.vue</code>内では、その<code>value</code>を4箇所で使っています。</p><p>1つ目は、マスタッシュ構文で、<br>2つ目は、<code>input</code>の<code>:value</code>で、<br>3つ目は、<code>button</code>タグのクリックイベントの引数で、<br>4つ目は、さらに子コンポーネントの<code>grand-parent-layer</code>で使用しています。</p><p><code>ParentLayer.vue</code>との違いに気づきましたか？<code>button</code>タグがあることが一番目立ちますがそれ以外です。</p><p><code>ParentLayer.vue</code>では、<code>input</code>タグに対して<code>v-model</code>を使ってバインドしていたのに<code>ChildLayer.vue</code>では、<code>:value</code>にバインドしていて、<code>@input</code>なんていうイベントも追加されています。なぜ、こんな違いがあるかというと、もう一つ見逃してはいけない違いがあるからです。</p><p>それは、バインドしている値が<code>data.model</code>に属している値か、コンポーネントのプロパティかということです。</p><p>プロパティはあくまで<strong>読み取り専用</strong>であり、それを直接書き換えることはできません。なぜ直接書き換えられないかというと、プロパティは、親コンポーネントが子コンポーネントに対して付与するものです。子コンポーネントから見た親コンポーネントは絶対的な存在で逆らうことは許されていません。子コンポーネントが自らのプロパティを勝手に変えるということは、親コンポーネントでの指定と不整合が起きることを意味します。そんなことができたら、混乱することは必至です。</p><p>では、<code>ParentLayer.vue</code>や<code>ChildLayer.vue</code>のテキストボックスを変更したら、しっかりと変更が伝わったのは何故でしょうか？</p><p>答えは、<code>@input</code>が重要な役割を果たしているからです。この<code>@input</code>はそれが記載されているタグの<code>input</code>イベントが呼ばれるたびに実行され、そのたびに<code>test</code>という<del>センスのない</del>名前のメソッドを実行します。</p><figure class="highlight javascript"><figcaption><span>@input</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test (e) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">  vm.$emit(<span class="string">'input'</span>, e.target.value)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>上記の<code>test</code>というメソッドは何をしているかというと<code>$emit</code>というメソッドを実行しています。<code>&#39;input&#39;</code>というメソッドを引数<code>e.target.value</code>で実行してほしいとお願いしているメソッドです。そう、勝手にプロパティを変更してはいけないので、変更する権限を持つ親コンポーネントに変更をお願いしているのです。</p><p>ここで、<code>ParentLayer.vue</code>内の<code>input</code>タグでの双方向な値のやり取りを解説したいと思います。<code>これは、親コンポーネントに対して、input</code>タグに指定された<code>v-model</code>は、実は、下記の実装と同じです。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"ParentInput2"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">:value</span>=<span class="string">"model.testData"</span></span></span><br><span class="line"><span class="tag">       @<span class="attr">input</span>=<span class="string">"ParentInput2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  ParentInput2 (e) &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">    vm.model.testData = e.target.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この<code>input</code>タグはプロパティではなく、普通のデータを扱っているわけですし、親コンポーネントへemitする必要はないだけで、<br>裏ではVue.jsが値が双方向に反映されているように見せているのです。</p><p>先の<code>child-layer</code>タグに戻ってしまいますが、こちらも</p><figure class="highlight html"><figcaption><span>ParentLayer.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自作の要素に対するデータバインディング --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-layer</span> <span class="attr">class</span>=<span class="string">"child"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:value</span>=<span class="string">"model.testData"</span></span></span><br><span class="line"><span class="tag">             @<span class="attr">input</span>=<span class="string">"catchEmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-layer</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  catchEmit (e) &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">    vm.model.testData = e.target.value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>と記載するのと同じことになります。流れを追っていくと、</p><p>子コンポーネントの<br>　<code>templete</code>部で<strong>inputイベント</strong>によって<strong>メソッドA</strong>を起動<br>　<code>script</code>部の<strong>メソッドA</strong>によって親コンポーネントへと<strong>イベントB</strong>をemit<br>親コンポーネント<br>　<code>templete</code>部のv-on(@)ディレクティブで<strong>イベントB</strong>を受けて<strong>メソッドC</strong>を起動<br>　<code>script</code>部の<strong>メソッドC</strong>によって親コンポーネントのデータの書き換え</p><p>ということをしています。</p><p>つまり、親から子へのデータの流れはData bindingによるデータの流し込み（props down:流れは高いところから低いところへ）、子から親へのデータの流れは<code>$emit</code>によるイベントとメソッドのリレー(event up:上の立場の親が子のイベントを拾い上げる)ということで双方向バインディングを実現しています。</p><p>また、こういった複雑でわかりにくい複数の指定をひとまとめに指定することができる構文を<strong>糖衣構文</strong>といいます。つまり、<code>ParentLayer.vue</code>と<code>ChildLayer.vue</code>にある<code>input</code>タグの指定はVue.jsから見たら同じなのです。</p><p>ここで、<code>GrandChildLayer.vue</code>を見てみましょう。ソース内にもコメントで書いていますが、<code>props</code>の<code>value</code>を直接<code>v-model</code>に放り込んでいるので、テキストボックスに入力をするたびにエラーが出ます。</p><figure class="highlight html"><figcaption><span>GrandChildLayer.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grand-child"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>GrandChild:&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-modelに直接propsのvalueを指定しているため、</span></span><br><span class="line"><span class="comment">         inputタグのinputイベントが呼ばれるたびに</span></span><br><span class="line"><span class="comment">         コンソールにエラーが出て、値の更新も行われない --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"GrandChildInput"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">v-model</span>=<span class="string">"value"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'GrandChildLayer'</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    value: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">    msg: <span class="built_in">String</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.grand-child &#123;</span><br><span class="line">  border: solid gray;</span><br><span class="line">  background: paleturquoise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-model</code>が<code>:value</code>と<code>@input</code>を一つにまとめて書いていると表現しましたが、<code>value</code>プロパティじゃないほかの名前のプロパティへ値を渡したいこともあるでしょう。<code>@input</code>でないイベントを拾いたいことことも考えられます。</p><p>Vue.jsとしてそういった要望に対応できるにmodelオプションというものを用意されています。必要に応じて勉強してみてください。また<code>props</code>や<code>$emit</code>を使わない親子間データ連携もあります。特徴も違います。ぜひ使い分けてみててください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>最後に言葉でしっかりと表現して自分のものにしておきましょう。</p><ul><li>Data bindingはあくまで、データの流れ込みの目印である</li><li>双方向に見えても、それは糖衣構文で暗黙的に変換がかかっているだけである。</li><li>親コンポーネントへのデータ連携は<code>$emit</code>を使って実装しないといけない。(親でもそれを拾い上げる実装が必要) </li></ul><hr><p>関連記事：</p><ul><li><a href="/articles/20200428/">Vue.jsのslotの機能を初心者にわかるように解説してみた</a></li><li><a href="https://future-architect.github.io/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li><li><a href="https://future-architect.github.io/articles/20200319/">今あえてTypeScriptのビルド＆バンドルツールを探してみる</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、とあるプロジェクトでアーキチームに所属している東郷です。&lt;/p&gt;
&lt;p&gt;今回はVue.jsの最初の難関（だと思っ
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="フロントエンド記事集中投稿" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載5: CloudEventsのGo版SDKをいじってみる</title>
    <link href="https://future-architect.github.io/articles/20200331/"/>
    <id>https://future-architect.github.io/articles/20200331/</id>
    <published>2020-03-31T00:39:23.000Z</published>
    <updated>2020-03-31T03:44:09.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG所属の<a href="https://twitter.com/famipapamart" target="_blank" rel="noopener">村田</a>です。<br>サーバレス連載企画の第5回は<a href="https://cloudevents.io/" target="_blank" rel="noopener">CloudEvents</a>を取り上げたいと思います。</p><p>※本記事は2020.03.31時点の情報を元に執筆しています</p><h1 id="CloudEventsとは？"><a href="#CloudEventsとは？" class="headerlink" title="CloudEventsとは？"></a>CloudEventsとは？</h1><img src="/images/20200331/photo_20200331_01.png"><p><a href="https://cloudevents.io/" target="_blank" rel="noopener">CloudEvents</a>は様々存在するイベントを統一的に扱いたいとの思いから登場した統一仕様です。<br>2019.10.24に<a href="https://www.cncf.io/" target="_blank" rel="noopener">CNCF</a>のIncubatorプロジェクトに昇格したらしく、同時にv1.0のSpecificationがリリースされています。</p><p>私のチームで開催している勉強会でも取り上げたことがあり、以下はその時の資料です。<br><a href="https://speakerdeck.com/mura123yasu/cloudevents" target="_blank" rel="noopener">https://speakerdeck.com/mura123yasu/cloudevents</a></p><p>今回は実際に公開されているSDKを使って一連のイベントデータのやり取りを実現してみようと思うのですが、SDKはいくつかの言語で公開されています。</p><blockquote><p>CloudEvents provides SDKs for Go, JavaScript, Java, C#, Ruby, and Python</p></blockquote><p>GitHubを見る限りではGoのSDKが一番開発進んでいるのかなと思ったのと個人的にGo書きたい思いが強いので、今回はGoのSDKを使っていきます。</p><h1 id="環境とターゲット"><a href="#環境とターゲット" class="headerlink" title="環境とターゲット"></a>環境とターゲット</h1><table><thead><tr><th align="left">項目</th><th align="left">バージョン等</th></tr></thead><tbody><tr><td align="left">OS</td><td align="left">macOS Mojave 10.14.6</td></tr><tr><td align="left">go</td><td align="left">1.14</td></tr><tr><td align="left">Google Cloud SDK</td><td align="left">286.0.0</td></tr><tr><td align="left">CloudEvents sdk-go</td><td align="left">v1.1.2</td></tr></tbody></table><p>今回は『CloudEvents仕様のメッセージをローカル端末からCloud Pub/Sub経由でCloud Functionsに渡し、個々の値を取り出しプログラムで扱える形にすること』を目的とします。</p><p>以下のような形を目指します。</p><img src="/images/20200331/d1.png"><h3 id="SDKバージョンについての補足"><a href="#SDKバージョンについての補足" class="headerlink" title="SDKバージョンについての補足"></a>SDKバージョンについての補足</h3><p>現在v2は <code>work in progress</code> とのことで、今回は雰囲気を掴むためにLatest Releaseの <code>v1.1.2</code> のソースコードをいじってみます。</p><p>※v1のREADMEには <code>2020.03.27</code> を目処にv2リリースを目指すとの記載がありますが、いまも絶賛開発中と思われます。</p><blockquote><p>We will target ~2 months of development to release v2 of this SDK with an end date of March 27, 2020.</p></blockquote><p><a href="https://github.com/cloudevents/sdk-go/blob/master/README_v1.md" target="_blank" rel="noopener">https://github.com/cloudevents/sdk-go/blob/master/README_v1.md</a></p><h1 id="やってみる"><a href="#やってみる" class="headerlink" title="やってみる"></a>やってみる</h1><p>今回書いたソースコードはすべてGitHubにあげていますので必要に応じて参照して頂ければと思います。</p><ul><li><a href="https://github.com/mura123yasu/cloudevents-go-helloworld" target="_blank" rel="noopener">https://github.com/mura123yasu/cloudevents-go-helloworld</a></li><li><a href="https://github.com/mura123yasu/cloudevents-cloudpubsub-receiver" target="_blank" rel="noopener">https://github.com/mura123yasu/cloudevents-cloudpubsub-receiver</a></li></ul><h2 id="まずは、シンプルにローカルで繋げる"><a href="#まずは、シンプルにローカルで繋げる" class="headerlink" title="まずは、シンプルにローカルで繋げる"></a>まずは、シンプルにローカルで繋げる</h2><p>まずはローカル端末内で完結する形で実装します。</p><img src="/images/20200331/d2.png"><p><a href="https://github.com/cloudevents/sdk-go/tree/v1.1.2/cmd/samples" target="_blank" rel="noopener">公式のリポジトリ</a>にしっかりサンプル実装があるので、それを参考にしつつ進めることができました。</p><p>まずはReceiver側の実装です。</p><figure class="highlight go"><figcaption><span>Reveiver側の実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">cloudevents <span class="string">"github.com/cloudevents/sdk-go"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Receive</span><span class="params">(event cloudevents.Event)</span></span> &#123;</span><br><span class="line"><span class="comment">// do something with event.Context and event.Data (via event.DataAs(foo)</span></span><br><span class="line">fmt.Printf(<span class="string">"Event received.\n====\n%s====\n"</span>, event)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c, err := cloudevents.NewDefaultClient()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to create client, %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Fatal(c.StartReceiver(context.Background(), Receive))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実処理は <code>Receive</code> にて行われていますが、今回は受け取ったイベントを標準出力するのみです。</p><p>次にSender側の実装です。</p><figure class="highlight go"><figcaption><span>Sender側の実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"></span><br><span class="line">cloudevents <span class="string">"github.com/cloudevents/sdk-go"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">event := cloudevents.NewEvent()</span><br><span class="line">event.SetID(<span class="string">"ABC-123"</span>)</span><br><span class="line">event.SetType(<span class="string">"com.cloudevents.readme.sent"</span>)</span><br><span class="line">event.SetSource(<span class="string">"somesource"</span>)</span><br><span class="line">event.SetData(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"hello"</span>: <span class="string">"world"</span>&#125;)</span><br><span class="line"></span><br><span class="line">t, err := cloudevents.NewHTTPTransport(</span><br><span class="line">cloudevents.WithTarget(<span class="string">"http://localhost:8080/"</span>),</span><br><span class="line">cloudevents.WithEncoding(cloudevents.HTTPBinaryV1),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"failed to create transport, "</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c, err := cloudevents.NewClient(t)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"unable to create cloudevent client: "</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, _, err = c.Send(context.Background(), event)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"failed to send cloudevent: "</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>event.SetData</code> がいわゆるpayloadにあたるデータを詰め込んでいる箇所です。</p><p>Receiverを起動してSenderからメッセージを投げてみると…</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">Event received.</span><br><span class="line">====</span><br><span class="line">Validation: valid</span><br><span class="line">Context Attributes,</span><br><span class="line">  specversion: 1.0</span><br><span class="line">  <span class="built_in">type</span>: com.cloudevents.readme.sent</span><br><span class="line">  <span class="built_in">source</span>: somesource</span><br><span class="line">  id: ABC-123</span><br><span class="line">Extensions,</span><br><span class="line">  traceparent: 00-5480757570b54984891dde6df8921bba-6a759fba2b9ee0eb-00</span><br><span class="line">Data,</span><br><span class="line">  &#123;<span class="string">"hello"</span>:<span class="string">"world"</span>&#125;</span><br><span class="line">====</span><br></pre></td></tr></table></figure><p>ちゃんと届きました！簡単ですね。</p><h2 id="次に、Cloud-Pub-Sub経由の形に変えてみる"><a href="#次に、Cloud-Pub-Sub経由の形に変えてみる" class="headerlink" title="次に、Cloud Pub/Sub経由の形に変えてみる"></a>次に、Cloud Pub/Sub経由の形に変えてみる</h2><p>実際にはイベントデータの受け渡しはキューを経由するなどして非同期なやりとりになるかと思います。<br>というわけで、私が普段GCPを利用しているということもありGCPのCloud Pub/Subを経由する形で実装したいと思います。</p><img src="/images/20200331/d3.png"><p>まずはReceiverの実装です。</p><figure class="highlight go"><figcaption><span>Receiver側の実装(Pub/Sub)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">cloudevents <span class="string">"github.com/cloudevents/sdk-go"</span></span><br><span class="line"><span class="string">"github.com/cloudevents/sdk-go/pkg/cloudevents/client"</span></span><br><span class="line">cepubsub <span class="string">"github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub"</span></span><br><span class="line">pscontext <span class="string">"github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub/context"</span></span><br><span class="line"><span class="string">"github.com/kelseyhightower/envconfig"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> envConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">ProjectID <span class="keyword">string</span> <span class="string">`envconfig:"GOOGLE_CLOUD_PROJECT"`</span></span><br><span class="line"></span><br><span class="line">TopicID <span class="keyword">string</span> <span class="string">`envconfig:"PUBSUB_TOPIC" default:"demo_cloudevents" required:"true"`</span></span><br><span class="line"></span><br><span class="line">SubscriptionID <span class="keyword">string</span> <span class="string">`envconfig:"PUBSUB_SUBSCRIPTION" default:"demo_cloudevents_subscriber" required:"true"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">Sequence <span class="keyword">int</span>    <span class="string">`json:"id"`</span></span><br><span class="line">Message  <span class="keyword">string</span> <span class="string">`json:"message"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">receive</span><span class="params">(ctx context.Context, event cloudevents.Event, resp *cloudevents.EventResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Event Context: %+v\n"</span>, event.Context)</span><br><span class="line">fmt.Printf(<span class="string">"Transport Context: %+v\n"</span>, pscontext.TransportContextFrom(ctx))</span><br><span class="line"></span><br><span class="line">data := &amp;Model&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := event.DataAs(data); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Got Data Error: %s\n"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Data: %+v\n"</span>, data)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"----------------------------\n"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> env envConfig</span><br><span class="line"><span class="keyword">if</span> err := envconfig.Process(<span class="string">""</span>, &amp;env); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"[ERROR] Failed to process env var: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">"[INFO] ProjectID: %s"</span>, env.ProjectID)</span><br><span class="line">log.Printf(<span class="string">"[INFO] TopicID: %s"</span>, env.TopicID)</span><br><span class="line">log.Printf(<span class="string">"[INFO] SubscriptionID: %s"</span>, env.SubscriptionID)</span><br><span class="line">t, err := cepubsub.New(context.Background(),</span><br><span class="line">cepubsub.WithProjectID(env.ProjectID),</span><br><span class="line">cepubsub.WithSubscriptionID(env.SubscriptionID))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to create pubsub transport, %s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c, err := client.New(t)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to create client, %s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">"Created client, listening..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := c.StartReceiver(ctx, receive); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to start pubsub receiver, %s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GCPサービスへアクセスする都合上環境変数からの値の取得やその取り回しがありますが、大枠は先程の実装と同じです。<br>先程はクライアント作成時に <code>NewDefaultClient</code> を呼んでいましたが、今回はPub/Subを利用するため専用のtransportを作成してそれを引数に渡す形でクライアントを <code>New(transport)</code> しています。</p><p>ちょうど該当するソースコードは以下になります。</p><figure class="highlight go"><figcaption><span>PubSub設定する部分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t, err := cepubsub.New(context.Background(),</span><br><span class="line">cepubsub.WithProjectID(env.ProjectID),</span><br><span class="line">cepubsub.WithSubscriptionID(env.SubscriptionID))</span><br><span class="line"><span class="comment">// ---中略---</span></span><br><span class="line">c, err := client.New(t)</span><br></pre></td></tr></table></figure><p>次にSender側の実装です。</p><figure class="highlight go"><figcaption><span>Sender側の実装(Pub/Sub)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">cloudevents <span class="string">"github.com/cloudevents/sdk-go"</span></span><br><span class="line">cepubsub <span class="string">"github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub"</span></span><br><span class="line"><span class="string">"github.com/kelseyhightower/envconfig"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> envConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">ProjectID <span class="keyword">string</span> <span class="string">`envconfig:"GOOGLE_CLOUD_PROJECT" required:"true"`</span></span><br><span class="line">TopicID   <span class="keyword">string</span> <span class="string">`envconfig:"PUBSUB_TOPIC" default:"demo_cloudevents" required:"true"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Basic data struct.</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">Sequence <span class="keyword">int</span>    <span class="string">`json:"id"`</span></span><br><span class="line">Message  <span class="keyword">string</span> <span class="string">`json:"message"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> env envConfig</span><br><span class="line"><span class="keyword">if</span> err := envconfig.Process(<span class="string">""</span>, &amp;env); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"[ERROR] Failed to process env var: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t, err := cepubsub.New(context.Background(),</span><br><span class="line">cepubsub.WithProjectID(env.ProjectID),</span><br><span class="line">cepubsub.WithTopicID(env.TopicID))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to create pubsub transport, %s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">c, err := cloudevents.NewClient(t, cloudevents.WithTimeNow(), cloudevents.WithUUIDs())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to create client, %s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">event := cloudevents.NewEvent(cloudevents.VersionV1)</span><br><span class="line">event.SetType(<span class="string">"com.cloudevents.sample.sent"</span>)</span><br><span class="line">event.SetSource(<span class="string">"github.com/cloudevents/sdk-go/cmd/samples/pubsub/sender/"</span>)</span><br><span class="line">_ = event.SetData(&amp;Model&#123;</span><br><span class="line">Sequence: <span class="number">0</span>,</span><br><span class="line">Message:  <span class="string">"HELLO"</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">_, _, err = c.Send(context.Background(), event)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to send: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらも大枠は先程のパターンと変わりませんが、今回ひとつ先程のパターンと異なるのは、やりとりするデータの形式について明示的にstructを定義している点です。(念のため補足ですが、Pub/Subを利用するからそうしているというわけではありません。あくまで変化点という意味です。)</p><p>各々ファイルにそれぞれ <code>Model</code> を定義してしまっていますが、別ファイルで定義してReceiverとSenderの両方からimportする形で実装するのが望ましい形かなと思います。</p><p>では動かしてみましょう。<br>まずはCloud Pub/SubのTopicおよびSubscriptionを作成します。</p><figure class="highlight sh"><figcaption><span>TopicとSubscriptionの作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcloud pubsub topics create &lt;YOUR PUBSUB TOPIC&gt;</span><br><span class="line">gcloud pubsub subscriptions create &lt;YOUR PUBSUB SUBSCRIPTION&gt; --topic=&lt;YOUR PUBSUB TOPIC&gt;</span><br></pre></td></tr></table></figure><p>次に、アプリケーションの実行に必要な環境変数を設定します。</p><figure class="highlight sh"><figcaption><span>環境変数設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># required</span></span><br><span class="line"><span class="built_in">export</span> GOOGLE_APPLICATION_CREDENTIALS=&lt;YOUR CREDENTIAL&gt;</span><br><span class="line"><span class="built_in">export</span> GOOGLE_CLOUD_PROJECT=&lt;YOUR GCP PROJECT&gt;</span><br><span class="line"><span class="comment"># optional</span></span><br><span class="line"><span class="built_in">export</span> PUBSUB_TOPIC=&lt;YOUR PUBSUB TOPIC&gt; <span class="comment"># default is "demo_cloudevents"</span></span><br><span class="line"><span class="built_in">export</span> PUBSUB_SUBSCRIPTION=&lt;YOUR PUBSUB SUBSCRIPTION&gt; <span class="comment"># default is "demo_cloudevents_subscriber"</span></span><br></pre></td></tr></table></figure><p>アプリケーションの認証情報については詳しくは<a href="https://cloud.google.com/docs/authentication/production?hl=ja" target="_blank" rel="noopener">こちら</a>を参照してください。</p><p>準備が整ったので動かします！</p><figure class="highlight sh"><figcaption><span>実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"><span class="comment"># ---中略---</span></span><br><span class="line">Event Context: Context Attributes,</span><br><span class="line">  specversion: 1.0</span><br><span class="line">  <span class="built_in">type</span>: com.cloudevents.sample.sent</span><br><span class="line">  <span class="built_in">source</span>: github.com/cloudevents/sdk-go/cmd/samples/pubsub/sender/</span><br><span class="line">  id: 89142958-bdb1-4fc9-979a-5c45f6590207</span><br><span class="line">  time: 2020-03-30T16:25:40.473793Z</span><br><span class="line">  datacontenttype: application/json</span><br><span class="line">Extensions,</span><br><span class="line">  traceparent: 00-a31200e4a4b2a5a0d41b5710b5f350bb-a348823d4ab87c62-00</span><br><span class="line"></span><br><span class="line">Transport Context: Transport Context,</span><br><span class="line">  ID: 1085540809479288</span><br><span class="line">  PublishTime: 2020-03-30 16:25:41.358 +0000 UTC</span><br><span class="line">  Project: xxxxxxx</span><br><span class="line">  Subscription: demo_cloudevents_subscriber</span><br><span class="line">  Method: pull</span><br><span class="line"></span><br><span class="line">Data: &amp;&#123;Sequence:0 Message:HELLO&#125;</span><br><span class="line">----------------------------</span><br></pre></td></tr></table></figure><p>期待通りにメッセージを受け取ることができました。<br>GCPコンソールからもメッセージがしっかりPub/Subに届いていたことが確認できます。</p><img src="/images/20200331/photo_20200331_02.png" class="img-small-size"><p>成功です。</p><h2 id="最後に、Cloud-Pub-Subから先をCloud-Functionsに切り替える"><a href="#最後に、Cloud-Pub-Subから先をCloud-Functionsに切り替える" class="headerlink" title="最後に、Cloud Pub/Subから先をCloud Functionsに切り替える"></a>最後に、Cloud Pub/Subから先をCloud Functionsに切り替える</h2><p>さて、Pub/SubキューはCloud Functionsに渡してあげたいと思うのは私だけでしょうか？（求ム、同志）<br>というわけでラストは先程Cloud Pub/Subに到達したメッセージをCloud Functionsで受け取りたいと思います。</p><img src="/images/20200331/d4.png"><p>先程までのReceiverをCluod Functions仕様に書き換えてあげます。また、さっきまでは受け取ったメッセージの中に含まれるpayloadをプログラム上で扱える形にまでparseしきってなかったのでそこも一緒にやりたいと思います。</p><p>ということで実装がこちら。</p><figure class="highlight go"><figcaption><span>CloudFunction実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> receiver</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"cloud.google.com/go/pubsub"</span></span><br><span class="line">cepubsub <span class="string">"github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Model is published data struct.</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">Sequence <span class="keyword">int</span>    <span class="string">`json:"id"`</span></span><br><span class="line">Message  <span class="keyword">string</span> <span class="string">`json:"message"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Receiver parse payload to Model</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Receiver</span><span class="params">(ctx context.Context, msg *pubsub.Message)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] message received: %v\n"</span>, msg)</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] message.Attributes: %s\n"</span>, msg.Attributes)</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] message.Data: %s\n"</span>, msg.Data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// convert pubsub.Message to cepubsub.Message</span></span><br><span class="line"><span class="keyword">var</span> cemsg cepubsub.Message</span><br><span class="line">cemsg.Data = msg.Data</span><br><span class="line">cemsg.Attributes = msg.Attributes</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] CloudEventsVersion: %s\n"</span>, cemsg.CloudEventsVersion())</span><br><span class="line"></span><br><span class="line"><span class="comment">// get data(type Model) from cepubsub.Message</span></span><br><span class="line"><span class="keyword">var</span> data &amp;Model</span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(cemsg.Data), &amp;data)</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] Model.Sequence: %d\n"</span>, data.Sequence)</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] Model.Message: %s\n"</span>, data.Message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cloud Pub/Subの <code>Message</code> 型で受け取った電文を、CloudEventsの <code>Message</code> 型に変換し、データの中身を <code>Model</code> 型へ変換しています。これにより <code>Sequence</code> および <code>Message</code> という個々の値を扱える状態にできました。</p><h3 id="CloudEventsのメッセージの取り扱いについての考察"><a href="#CloudEventsのメッセージの取り扱いについての考察" class="headerlink" title="CloudEventsのメッセージの取り扱いについての考察"></a>CloudEventsのメッセージの取り扱いについての考察</h3><p>ReceiverとSenderで同一の <code>Model</code> を準備してデータをやりとりし合うこと自体は一般的な実装ですが、今回ひとつミソになるのは <code>pubsub.Message</code> ⇔ <code>cepubsub.Message</code> の変換だと思います。</p><p>※Cloud Pub/SubのMessageを <code>pubsub.Message</code> 、CloudEventsのMessageを <code>cepubsub.Message</code> と表現しています。(以下、同様)</p><p>CloudEventsのSDK上ではCloud Pub/Subとやりとりする際の <code>Message</code> を以下のように定義しています。</p><figure class="highlight go"><figcaption><span>CloudEventsSDKのMessage定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Data is the actual data in the message.</span></span><br><span class="line">Data []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Attributes represents the key-value pairs the current message</span></span><br><span class="line"><span class="comment">// is labelled with.</span></span><br><span class="line">Attributes <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/cloudevents/sdk-go/blob/v1.1.2/pkg/cloudevents/transport/pubsub/message.go" target="_blank" rel="noopener">https://github.com/cloudevents/sdk-go/blob/v1.1.2/pkg/cloudevents/transport/pubsub/message.go</a></p><p>つまり、CloudEventsの定義する <code>Event</code> データがCloud Pub/Subを通過する際には <code>pubsub.Message.Data</code> と <code>pubsub.Message.Attributes</code> に情報が集約されます。</p><p>実際にPub/Subから受け取った電文をそのまま標準出力したものを見てみると、以下のような形になっていました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&amp;&#123; </span><br><span class="line">    [123 34 105 100 34 58 48 44 34 109 101 115 115 97 103 101 34 58 34 72 69 76 76 79 34 125] </span><br><span class="line">    map[</span><br><span class="line">        ce-datacontenttype:application/json </span><br><span class="line">        ce-id:89142958-bdb1-4fc9-979a-5c45f6590207 </span><br><span class="line">        ce-source:github.com/cloudevents/sdk-go/cmd/samples/pubsub/sender/ </span><br><span class="line">        ce-specversion:1.0 </span><br><span class="line">        ce-time:2020-03-30T16:25:40.473793Z </span><br><span class="line">        ce-traceparent:00-a31200e4a4b2a5a0d41b5710b5f350bb-a348823d4ab87c62-00 </span><br><span class="line">        ce-type:com.cloudevents.sample.sent</span><br><span class="line">    ] </span><br><span class="line">    0001-01-01 00:00:00 +0000 UTC &#123;0 0 &lt;nil&gt;&#125; &lt;nil&gt; 0 false &lt;nil&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pubsub.Message.Attributes</code> を標準出力したログでは以下のようにMap情報が確認できました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] message.Attributes: map[ce-datacontenttype:application/json ce-id:89142958-bdb1-4fc9-979a-5c45f6590207 ce-source:github.com/cloudevents/sdk-go/cmd/samples/pubsub/sender/ ce-specversion:1.0 ce-time:2020-03-30T16:25:40.473793Z ce-traceparent:00-a31200e4a4b2a5a0d41b5710b5f350bb-a348823d4ab87c62-00 ce-type:com.cloudevents.sample.sent]</span><br></pre></td></tr></table></figure><p>また、 <code>pubsub.Message.Data</code> を標準出力したログでは以下のようにデータの中身が確認できました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] message.Data: &#123;&quot;id&quot;:0,&quot;message&quot;:&quot;HELLO&quot;&#125;</span><br></pre></td></tr></table></figure><p>私は今回Cloud Pub/Subを利用しましたが、同様な形でCloudEventsが各イベント型の情報とのIFを定義してくれて、実装者はCloudEventsとのIFだけを気にすれば良くなっていくんだろうなと思います。</p><p>現在v2は絶賛開発中ですが、たとえば <code>pubsub.Message</code> ⇔ <code>cepubsub.Message</code> の変換をやってくれるutility的なものがSDKの中に登場するとすごく便利だろうなと思いました。</p><p>また、もう一点気になったポイントは以下のように実装されている <code>CloudEventsVersion</code> の存在です。</p><figure class="highlight go"><figcaption><span>CloudEventsVersion</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">CloudEventsVersion</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// Check as Binary encoding first.</span></span><br><span class="line"><span class="keyword">if</span> m.Attributes != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Binary v0.3:</span></span><br><span class="line"><span class="keyword">if</span> s := m.Attributes[prefix+<span class="string">"specversion"</span>]; s != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now check as Structured encoding.</span></span><br><span class="line">raw := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]json.RawMessage)</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(m.Data, &amp;raw); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// structured v0.3</span></span><br><span class="line"><span class="keyword">if</span> v, ok := raw[<span class="string">"specversion"</span>]; ok &#123;</span><br><span class="line"><span class="keyword">var</span> version <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(v, &amp;version); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> version</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/cloudevents/sdk-go/blob/v1.1.2/pkg/cloudevents/transport/pubsub/message.go" target="_blank" rel="noopener">https://github.com/cloudevents/sdk-go/blob/v1.1.2/pkg/cloudevents/transport/pubsub/message.go</a></p><p>これは <code>cepubsub.Message</code> の <code>Attributes</code> の中から <code>specversion</code> を取り出しており、ちょうど以下の <code>ce-specversion:1.0</code> にあたる情報を取り出していることになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">map[</span><br><span class="line">    ce-datacontenttype:application/json </span><br><span class="line">    ce-id:89142958-bdb1-4fc9-979a-5c45f6590207 </span><br><span class="line">    ce-source:github.com/cloudevents/sdk-go/cmd/samples/pubsub/sender/ </span><br><span class="line">    ce-specversion:1.0 </span><br><span class="line">    ce-time:2020-03-30T16:25:40.473793Z </span><br><span class="line">    ce-traceparent:00-a31200e4a4b2a5a0d41b5710b5f350bb-a348823d4ab87c62-00 </span><br><span class="line">    ce-type:com.cloudevents.sample.sent</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>v1.1.2のSDKでは <code>specversion</code> のみの実装ですが、同様の形で <code>Attributes</code> からいわゆるメタデータを取り出して処理を行うかあるいは後続にイベントを伝播させるために再度なにかしらのオブジェクトに詰めるかといったことを行うことになるかなと思います。</p><h3 id="ということで動かしてみる"><a href="#ということで動かしてみる" class="headerlink" title="ということで動かしてみる"></a>ということで動かしてみる</h3><p>ちょこっと考察を挟みましたが、肝心のプログラム実行がまだでした。<br>まずはReceiver関数をCloud Functionsにデプロイします。</p><figure class="highlight sh"><figcaption><span>CloudFunctionsのデプロイ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcloud <span class="built_in">functions</span> deploy &lt;YOUR FUNCTION NAME&gt; --project &lt;YOUR GCP PROJECT&gt; \</span><br><span class="line">  --entry-point Receiver \</span><br><span class="line">  --trigger-topic &lt;YOUR PUBSUB TOPIC&gt; \</span><br><span class="line">  --runtime go113</span><br></pre></td></tr></table></figure><p>Senderは同じものを利用するだけなので新しい準備は不要です。</p><p>というわけで実行してみると…</p><img src="/images/20200331/photo_20200331_03.png">Cloud Functionsのログにてメッセージが届いていることが確認できました！<p>無事に『CloudEvents仕様のメッセージをローカル端末からCloud Pub/Sub経由でCloud Functionsに渡し、個々の値を取り出しプログラムで扱える形にすること』という目的を達成することができました。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回は主にCloud Pub/Subにフォーカスする形でCloudEventsの実装について紹介させて頂きました。SDKは絶賛開発中なステータスですが、世に蔓延る様々なイベント形式に悩まされる実装者が幸せになれる未来が待っていると思うと非常に楽しみですし、CloudEventsの動向からますます目が離せませんね。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG所属の&lt;a href=&quot;https://twitter.com/famipapamart&quot; target=
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載4: Firebase CrashlyticsでAndroidアプリのエラーログをさくっと収集する</title>
    <link href="https://future-architect.github.io/articles/20200330/"/>
    <id>https://future-architect.github.io/articles/20200330/</id>
    <published>2020-03-30T00:45:42.000Z</published>
    <updated>2020-03-30T01:04:28.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Android Developerの佐藤です。</p><p><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバーレス連載</a>の4回目を担当します！<br>モバイルアプリ品質強化の強い味方となってくれるFirebase Crashlyticsを紹介したいと思います！</p><h1 id="そもそもFirebaseとは"><a href="#そもそもFirebaseとは" class="headerlink" title="そもそもFirebaseとは"></a>そもそもFirebaseとは</h1><p>Firebaseとは、AndroidやiOSなどのモバイルアプリのバックエンド機能を提供してくれるサービスです。<br><a href="https://firebase.google.com/products?hl=ja" target="_blank" rel="noopener">提供されているサービス</a>は、利用状況の解析、クラッシュの検知、認証、通知、ホスティングなど多種多様です。<br>これらのサービスを利用する上で、サーバーの管理が不要なのはもちろん、導入する上で追加のコーディングはほぼ必要ありません。<br><code>Firebase SDK</code>をアプリのソースコードに組み込むだけで、Firebaseの機能を利用することができます。</p><p>※ Firebaseはモバイルアプリだけでなく、Webアプリにも対応しています。サービスごとに、対応しているプラットフォームが異なる点に注意が必要です。</p><h1 id="Firebase-Crashlyticsとは"><a href="#Firebase-Crashlyticsとは" class="headerlink" title="Firebase Crashlyticsとは"></a>Firebase Crashlyticsとは</h1><p>どんなに気をつけていても、予期せずアプリがクラッシュしてしまうことはあります。<br>クラッシュしないようなコーディングに努めることも重要ですが、クラッシュがあったという事実をいち早く検知し、その原因を突き止めることも同じくらい重要です。</p><p>Firebase Crashlyticsはクラッシュの検知とその原因の究明に役立つサービスです。<br>Firebase Crashlyticsを導入することで、以下の情報を簡単に知ることができます。</p><ul><li>いつクラッシュしたのか</li><li>ソースコードのどこでクラッシュしたのか</li><li>クラッシュによって影響を受けているユーザーはどれくらいいるのか</li><li>どのバージョンでクラッシュしたのか</li><li>どの機種でクラッシュしたのか</li></ul><p>以下では、実際にFirebase Crashlyticsを使って、どのようにクラッシュ情報にアクセスできるようになるのかを見ていきます。</p><h1 id="Firebase-Crashlyticsを使ってみる"><a href="#Firebase-Crashlyticsを使ってみる" class="headerlink" title="Firebase Crashlyticsを使ってみる"></a>Firebase Crashlyticsを使ってみる</h1><p>簡単なサンプルアプリを用いて、</p><ul><li>どのようにしたらクラッシュ情報をFirebaseに送ることができるのか</li><li>Firebaseコンソールでどのようなクラッシュレポートを見ることができるのか</li></ul><p>を見ていきましょう。</p><h2 id="サンプルアプリを用意する"><a href="#サンプルアプリを用意する" class="headerlink" title="サンプルアプリを用意する"></a>サンプルアプリを用意する</h2><p>Android Studioで<code>Empty Activity</code>テンプレートをベースにした新規プロジェクトを作成します。<br>ボタンを画像のように2つ追加します。</p><img src="/images/20200330/1.png" class="img-small-size"><p>それぞれのボタンに<code>OnClickListener</code>を実装します。実装例は後述しますが、それぞれのボタンをクリックしたときの振る舞いを簡単に説明すると、以下のようになります。</p><ul><li><code>FATAL</code>ボタンをクリックすると<code>RuntimeException</code>が発生し、アプリが強制終了します。</li><li><code>NON FATAL</code>ボタンをクリックすると<code>RuntimeException</code>が発生しますが、try-catchのエラーハンドリングを実装しているため、アプリが強制終了しません。</li></ul><p>意図的に例外が発生する状況を再現しています。</p><h2 id="Firebaseをセットアップする"><a href="#Firebaseをセットアップする" class="headerlink" title="Firebaseをセットアップする"></a>Firebaseをセットアップする</h2><p>Firebase公式ページを見ながらFirebaseのセットアップを行います。<br><a href="https://firebase.google.com/docs/android/setup" target="_blank" rel="noopener">https://firebase.google.com/docs/android/setup</a><br>(Firebase公式ページには日本語に訳されているページもありますが、英語ページのアップデートに追随していない箇所がいくつかあります。日本語ページを参照する場合は、英語ページも併せてご覧になることをおすすめします。)</p><p>Firebaseコンソール画面も親切にナビゲートしてくれるので安心です。</p><img src="/images/20200330/2.png"><h2 id="Firebase-Crashlyticsをセットアップする"><a href="#Firebase-Crashlyticsをセットアップする" class="headerlink" title="Firebase Crashlyticsをセットアップする"></a>Firebase Crashlyticsをセットアップする</h2><p><a href="https://firebase.google.com/docs/android/setup" target="_blank" rel="noopener">Firebaseのセットアップ</a>が完了していれば、<code>build.gradle</code>にコードを数カ所追加するだけでCrashlyticsの最小限の設定は完了です。アプリが異常終了したとき、自動的にFirebaseにクラッシュレポートが送信されます。</p><ul><li>Projectの<code>build.gradle</code></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">'https://maven.fabric.io/public'</span> <span class="comment">// 追加</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.6.1'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.google.gms:google-services:4.3.3'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'io.fabric.tools:gradle:1.31.2'</span> <span class="comment">// 追加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Moduleの<code>build.gradle</code></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply plugin: <span class="string">'com.google.gms.google-services'</span></span><br><span class="line">apply plugin: <span class="string">'io.fabric'</span> <span class="comment">// 追加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    implementation <span class="string">'com.google.firebase:firebase-analytics:17.2.3'</span></span><br><span class="line">    implementation <span class="string">'com.crashlytics.sdk.android:crashlytics:2.10.1'</span> <span class="comment">// 追加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※ 2020/3/30現在2つのCrashlytics SDKが存在します。”Fabric系譜のCrashlytics SDK”と”Firebase向けに新調されたSDK”です。後者は、2020/3/30現在beta版となっています。今回はGAになっている前者のSDKを使用しています。</p><h2 id="アプリをクラッシュさせてみる"><a href="#アプリをクラッシュさせてみる" class="headerlink" title="アプリをクラッシュさせてみる"></a>アプリをクラッシュさせてみる</h2><p><code>MainActivity</code>の実装例はこちらです。<code>FATAL</code>ボタン、<code>NON FATAL</code>ボタンに<code>OnClickListener</code>をセットしています。</p><figure class="highlight java"><figcaption><span>アプリクラッシュするMainActivity実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// どのユーザーの端末でクラッシュが発生したのかを知りたい場合、</span></span><br><span class="line">        <span class="comment">// CrashlyticsにUserIDを教えてあげる必要がある。</span></span><br><span class="line">        Crashlytics.setUserIdentifier(<span class="string">"user0001"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// FATALボタンをクリックしたときの処理</span></span><br><span class="line">        findViewById(R.id.fatal_button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// "FATAL"ボタンをクリックするとアプリが強制終了する。</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fatal"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// NON FATALボタンをクリックしたときの処理</span></span><br><span class="line">        findViewById(R.id.non_fatal_button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// "NON FATAL"ボタンをクリックするとRuntimeExceptionが発生するが、</span></span><br><span class="line">                <span class="comment">// 例外をcatchしているので、アプリが強制終了することはない。</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Non Fatal"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// logException()メソッド送信されたログは「非致命的(non-fatal)」なログとしてレポートされる。</span></span><br><span class="line">                    Crashlytics.logException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Firebase SDK</code>は、開発者が意図しない強制終了(クラッシュ)が発生したときに、自動でスタックトレースをFirebaseに送信してくれます。上のコードでいうと<code>FATAL</code>ボタンをクリックしたときにアプリが強制終了してしまいますが、裏でSDKがクラッシュレポートをFirebaseに送信してくれます。</p><p>クラッシュが起きないようにエラーハンドリングはしているけれど、開発者目線で「この例外の発生は検知したい」というような場合がよくあります。そういった場合は、<code>Crashlytics.logException()</code>メソッドを利用します。発生した例外を「非致命的(Non-fatal)」な例外としてFirebaseに通知することができます。</p><h2 id="Firebaseコンソールでクラッシュレポートを確認する"><a href="#Firebaseコンソールでクラッシュレポートを確認する" class="headerlink" title="Firebaseコンソールでクラッシュレポートを確認する"></a>Firebaseコンソールでクラッシュレポートを確認する</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>サイドナビの<code>品質</code>から<code>Crashlytics</code>を選択するとCrashlyticsの画面が開きます。<br>こちらの画面からクラッシュ状況の概要がわかります。<br><code>FATAL</code>ボタンをクリックしたときのレポートは「MainActivity.java - line 23」として通知されています。<br><code>NON FATAL</code>ボタンをクリックしたときのレポートは「MainActivity.java - line 30」として通知されています。<br>「評価」項目をみると「クラッシュレポート」なのか「非致命的な例外のレポート」なのかがひと目でわかりますね。</p><img src="/images/20200330/3.png"><h3 id="クラッシュレポート"><a href="#クラッシュレポート" class="headerlink" title="クラッシュレポート"></a>クラッシュレポート</h3><p><code>Fatal</code>ボタンをクリックすることによって発生したクラッシュレポート(MainActivity.java - line 23)を見てみましょう。</p><img src="/images/20200330/4.png"><p>以下がひと目でわかりますね。</p><ul><li>いつクラッシュしたのか</li><li>ソースコードのどこでクラッシュしたのか</li><li>クラッシュによって影響を受けているユーザーはどれくらいいるのか</li><li>どのバージョンでクラッシュしたのか</li><li>どの機種でクラッシュしたのか</li></ul><p>また「スタックトレース」タブからクラッシュしたときのスタックトレースを見ることができます。<br>なぜクラッシュしたのかが詳細にわかります。</p><img src="/images/20200330/5.png"><h3 id="ユーザーIDでの検索"><a href="#ユーザーIDでの検索" class="headerlink" title="ユーザーIDでの検索"></a>ユーザーIDでの検索</h3><p>「ユーザーIDでの検索」も行うことができます。<br>ユーザーから不具合の問い合わせがあった際に、ソースコードのどの箇所で異常があったがゆえにそのユーザーの端末で不具合が発生したのかを素早く知ることができます。<br><img src="/images/20200330/6.png"></p><p>以下のようにSDKにユーザーIDを教えてあげることで、ユーザーIDでの検索が可能になります。</p><figure class="highlight java"><figcaption><span>ユーザID検索</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Crashlytics.setUserIdentifier(<span class="string">"user0001"</span>);</span><br></pre></td></tr></table></figure><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>Firebase Crashlyticsは本当にさくっと導入することができます。<br>ユーザーの端末に埋もれてしまいがちなクラッシュ情報に簡単にアクセスできるのが嬉しいポイントですね。<br><a href="https://firebase.google.com/docs/crashlytics/customize-crash-reports?platform=android" target="_blank" rel="noopener">クラッシュレポートはカスタマイズ</a>もできるのですが、<code>build.gradle</code>にSDKを追加するだけのシンプルな実装だけでも大変役に立ちます。</p><p>ぜひお試しください！</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/articles/20160420/">ハッカソン道中記#2～世界はチャンスであふれてる～</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Android Developerの佐藤です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-a
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="Firebase" scheme="https://future-architect.github.io/tags/Firebase/"/>
    
      <category term="Android" scheme="https://future-architect.github.io/tags/Android/"/>
    
      <category term="モバイルアプリ" scheme="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載3: Goでサーバーレス用の検索エンジンwatertowerを作ってみました</title>
    <link href="https://future-architect.github.io/articles/20200327/"/>
    <id>https://future-architect.github.io/articles/20200327/</id>
    <published>2020-03-27T00:51:22.000Z</published>
    <updated>2020-03-30T00:49:29.741Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバーレス連載の3回目</a>は検索エンジンを作ってみたお話です。</p><p>クラウドサービスが充実してくるにつれて、サーバーレスではいろいろなことができるようになっています。HTTPサーバーは動きますし、RDBやNoSQLなストレージも使えますし、PubSubみたいなサービスも利用できます。これらを駆使するとそこそこ複雑な処理も記述できます。</p><p>一方で、上から下までサーバーレスにしようとするとできないものもいくつかあります。例えば、RDBも使えるといっても制約があり、LambdaやCloud FunctionsからRDSやCloudSQLを雑に使うとコネクションを張りすぎる問題があります。LambdaにはRDS Proxyが出始めています。あと、RDBそのものは基本的に常駐型なのでサーバーレスではないです。一応サーバーレスなのもありますが、起動時間が結構かかるらしい（自分ではまだ試してないです）。それ以外にもキャッシュ系のサービスがなかったします。</p><p>中でも検索エンジンがない、という話はよく聞きます。Google App Engineの1st Genにはあったのですが、2ndにはなくなりました。これの代替サービスはありません。自前で建てると言えばElasticsaerchですが、ESはオンメモリDBなので、サーバーレスではなくなってしまいます。</p><p>ずっと前に、前職の同僚の末永さんから<a href="https://amzn.to/33M6uce" target="_blank" rel="noopener">検索エンジン自作入門～手を動かしながら見渡す検索の舞台裏</a>の献本を頂いていて、本の趣旨的には、実装してから感想を書かないといかんな！と思いつつ、なかなかチャンスがなかったのですが、今回この本のロジックを参考にサーバーレス環境用の検索エンジンを作ってみました。コードは<a href="https://github.com/future-architect/watertower" target="_blank" rel="noopener">GitHub</a>にアップしています。名前はwatertowerです。サーバーレス→略してSLなので、蒸気機関車用語で良さげなのいっぱいあるんじゃないかと思って探したけど、まあ地味に給水塔です。</p><h1 id="アーキテクチャ"><a href="#アーキテクチャ" class="headerlink" title="アーキテクチャ"></a>アーキテクチャ</h1><p>検索エンジン自作入門をなぞって実装します。サーバーレスでやる以上、ストレージのサイズは小さくしたいところなので、N-Gramではなく形態要素解析を使うことにします。日本語は<a href="https://github.com/ikawaha/kagome" target="_blank" rel="noopener">kagome</a>を使います。英語は分かち書きは不要ですが、Snowball Stemmerを使ってStemmingをします。TF-IDFによるスコアリング、符号化による圧縮にもチャレンジしてみたいですね。この本ではC言語を使っていますが、Goで実装します。</p><p>RDBを使っちゃうとストレージがサーバーレスではなくなってしまうので、DynamoDBとかFirestoreを使うことにしました。<a href="https://future-architect.github.io/tags/GoCDK/">GoCloudは以前このブログで連載</a>してとりあげましたが、今回の実装もGoCloudを活用します。同一のコードでGCPでもAWSでもAzureでも柔軟にアクセスできます。</p><p>単に自然言語で検索するだけならかんたんですが、実用性を考えると、タグでフィルタリングとかも欲しいですよね。Elasticsearch的にこんな感じのマッピングがハードコーディングされている、という感じのデータ構造にしてみます。Elasticsearchの「検索がめっぽう強いドキュメントDB」みたいなのは良いな、と思ったのでちょっとしたデータを持てるようにしています。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"unique_key"</span>: <span class="string">"一位のキー"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"フレーズ検索対象となるタイトル"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"フレーズ検索対象となる本文"</span>,</span><br><span class="line">  <span class="attr">"tags"</span>: [<span class="string">"タグ"</span>, <span class="string">"の"</span>, <span class="string">"リスト"</span>],</span><br><span class="line">  <span class="attr">"lang"</span>: <span class="string">"jp"</span>,</span><br><span class="line">  <span class="attr">"metadata"</span>: &#123;<span class="attr">"検索対象"</span>: <span class="string">"じゃない追加データ"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GoCloudの<a href="https://gocloud.dev/howto/docstore/#mem" target="_blank" rel="noopener">memdocstore</a>を使うと、オンメモリで動作するので、ユニットテストが超高速ではかどります。</p><p>実装したのは主に1つの構造体なんですが、長くなったので3分割しています。</p><ul><li>watertower.go: WaterTower構造体の定義と初期化まわり</li><li>database.go: ドキュメントの登録や削除、検索などの</li><li>search.go: 検索してスコアをつけてソートして返す</li></ul><p>ユニークなドキュメントIDを振るために、<a href="https://github.com/shibukawa/cloudcounter" target="_blank" rel="noopener">シーケンシャルなカウンター</a>も実装しました。NoSQLだと秒間更新数が決まっていたりするので、10個ぐらいのエントリーに分けてランダムにインクリメントし、最新のIDを取得するにはこの10個の値を合計して返す、みたいな感じです。</p><h1 id="検索ロジック"><a href="#検索ロジック" class="headerlink" title="検索ロジック"></a>検索ロジック</h1><p>ということで、最初に実装したのは、テーブルが4つある検索エンジンです。</p><ul><li>単語→Doc IDと登場位置のリスト（ポスティングリスト）</li><li>Doc ID→ドキュメント本体</li><li>ユニークキー→Doc ID</li><li>タグ→Doc IDのリスト</li></ul><p>最初の2つが自然言語検索用です。最初のテーブルが、タイトルと本文を形態要素解析した単語をキーにして、ドキュメントと登場位置のインデックスをまとめたものです。検索ワードも同様に形態要素解析してから、このテーブルを引っ張ってきて、Doc IDの積集合を取ると、検索ワードにひっかかった文章がわかるというわけです。これでDoc IDがわかるので、本文を2つ目のテーブルで取得して返せば、検索は完了します。</p><p>このシステムをドキュメントDBだとすると、文書を一位に特定するもの、例えばURLだったりから取得できる必要があるため、3つ目のテーブルを用意しています。</p><p>最後がタグのフィルタリングです。これも、タグが含まれるDoc IDのリストが取得できるため、この積集合をさらに取れば、自然言語検索の結果を絞り込むことができます。基本的な検索のロジックはこんなところです。</p><p>さらなるフィルタリングとしては、フレーズ検索によるフィルタも入れています。３つのキーワードで文章検索したら、その3つのキーワードが登場するだけではなく、検索キーワードと同じ並びで含まれるという単語の登場位置も見ています。</p><p>最後にTF-IDFで単語の登場頻度でスコアをつけてソートします。タイトルはちょっとスコアを上げる、みたいなこともしていたかな？</p><p>samples/httpstatusに、HTTPのステータスコードを検索できるコマンドのサンプルがあります。ユニットテストで便利なmemdocstoreをそのまま使い、起動時にドキュメントを一通り登録してから検索をする、CLIツールです。</p><h1 id="ダメダメそんなんじゃダメ"><a href="#ダメダメそんなんじゃダメ" class="headerlink" title="ダメダメそんなんじゃダメ"></a>ダメダメそんなんじゃダメ</h1><p>というわけには行かないのがDynamoDB。DynamoDBは起動時間に寄らない課金体系になっていますが、キャパシティユニットというのがあります。キャパシティユニットを増やすと秒間のアクセスできる回数が増えます。しかし、キャパシティユニットはテーブルごと。無料枠もありますが、基本的にテーブルを増やせば増やすほどお金もかかります。</p><p>上記のテーブルがどれぐらいアクセスがあるかの比率なんて、使われ方によって変わってきますので、最適なチューニングを目指すのは大変です。チューニングとかしないで利用しただけ課金にしたい、という本来のサーバーレスの趣旨とは反します。</p><p>というわけで、全部のデータ構造を1つのテーブルにまとめます。ユニークキーならk、ドキュメントならd、単語ならw、タグはtと主キーにプリフィックスをつけて、1つのテーブルに統合しました。サーバーレスならテーブル一個用意すれば使えます、という手軽さがないと意味がないですからね。手間暇かけるぐらいなら、Elasticsearch使ったほうが良いですし。</p><p>というわけで、1つのテーブルで全部のデータを格納するように実装を修正しました。</p><h1 id="せっかくならウェブインタフェースも"><a href="#せっかくならウェブインタフェースも" class="headerlink" title="せっかくならウェブインタフェースも"></a>せっかくならウェブインタフェースも</h1><p>これで使える検索エンジンはできました。実際にはウェブサービスとしてHTTPサーバーの上で使われるはず。もしかしたら単体のウェブサービスとして起動できたら便利かな？と今週の月曜日にふと思って、ウェブサーバーも実装してみました。</p><p>Goの構造体を作ると、そのメソッドがそのままJSON-RPCの外部IFになってくれる<a href="https://github.com/semrush/zenrpc" target="_blank" rel="noopener">github.com/semrush/zenrpc</a>か、gRPCか、REST APIかで悩んだんですが、gRPCはウェブ上に記事がいっぱいあるのでやっても面白くないですよね。JSON-RPCはそういう意味ではレアなのでいいのですが、せっかくElasticsearchのようなフレーズ検索もタグ検索も可能な仕組みなので、Elasticsearch互換のREST APIにチャレンジしてみます。</p><p>本ブログで、多賀さんと、武田さんがいろいろ紹介してくれていますので、使ってみました。go-swaggerとStopLight Studioを使いました。結果としてはとても良い体験が得られました。</p><ul><li>多賀さん: <a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li>武田さん: <a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a></li></ul><p>Elasticsearchクローンといっても、全部はできないので、インデックスに対するドキュメントの追加、削除、IDでの取得、検索ぐらいを定義しました（PUTはswagger上では定義したけど本体側に更新のAPI作ってなかったので使えません）。</p><img src="/images/20200327/photo_20200327_01.png"><p>検索は<code>?q=unique_key:ユニークキーの値</code>で、キーでの取得もできるようにしていますが、検索エンジンっぽい検索は、次のようなクエリーだけが処理できるようになっています。今後ももっといろいろ実装したいですね。ちなみに、内部では自然言語検索ではタイトルと本文を両方検索しちゃうので、titleだけに含まれるキーワードの検索とかはできません。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"content"</span>: &#123;</span><br><span class="line">            <span class="attr">"query"</span>: <span class="string">"this is a test"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"en"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"terms"</span>: &#123;</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"white"</span>,</span><br><span class="line">            <span class="string">"red"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmd/watertower-server以下に実装があります。次のように起動します。WATERTOWER_INDEXES環境変数でカンマ切りで指定するとインデックスを増やせますが、デフォルトはindexとなります。WATERTOWER_DOCUMENT_URL環境変数で、保存先を設定します。デフォルトのmem://でオンメモリ動作します。dyanamo://とか、firestore://とか、mongo://とかも使えるはずです（localStackのDynamoしかテストしてないですが）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watertower-server --port=8888</span><br></pre></td></tr></table></figure><p>あとはcurlでいつものElasticsearchのように使えます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ドキュメントの登録</span></span><br><span class="line">$ curl -X POST <span class="string">"http://127.0.0.1:8888/index/_doc/"</span></span><br><span class="line">　　-H <span class="string">"content-type: application/json"</span></span><br><span class="line">　　-d <span class="string">'&#123; "unique_key": "id1", "title": "hello watertower", </span></span><br><span class="line"><span class="string">　　　　　"content": "watertower is a full text search engine with tag filtering", "lang": "en" &#125;'</span></span><br><span class="line">&#123;<span class="string">"_id"</span>:<span class="string">"d1"</span>,<span class="string">"_index"</span>:<span class="string">"index"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"result"</span>:<span class="string">"created"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ユニークなキーで取得</span></span><br><span class="line">$ curl -X GET <span class="string">"http://127.0.0.1:8888/index/_search?q=unique_key%3Aid1"</span></span><br><span class="line">    -H<span class="string">"content-type: application/json"</span></span><br><span class="line">&#123;<span class="string">"hits"</span>:&#123;<span class="string">"hits"</span>:[&#123;<span class="string">"_id"</span>:<span class="string">"d1"</span>,<span class="string">"_index"</span>:<span class="string">"index"</span>,<span class="string">"_source"</span>:&#123;<span class="string">"content"</span>:<span class="string">"watertower is a full text search engine with tag filtering"</span>,<span class="string">"lang"</span>:<span class="string">"en"</span>,<span class="string">"metadata"</span>:&#123;&#125;,<span class="string">"tags"</span>:null,<span class="string">"title"</span>:<span class="string">"hello watertower"</span>,<span class="string">"unique_key"</span>:<span class="string">"id1"</span>&#125;,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"sort"</span>:null&#125;],<span class="string">"total"</span>:&#123;<span class="string">"total"</span>:1&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ドキュメントのIDで取得</span></span><br><span class="line">$ curl -X GET <span class="string">"http://127.0.0.1:8888/index/_source/d1"</span></span><br><span class="line">(略)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 検索</span></span><br><span class="line">$ curl -X GET <span class="string">"http://127.0.0.1:8888/index/_search"</span> </span><br><span class="line">  -H <span class="string">"content-type: application/json"</span></span><br><span class="line">  -d <span class="string">'&#123;"query": &#123;"bool": &#123;"must": &#123;"match_phrase": &#123;"content": &#123;"query": "stay", "analyzer": "en"&#125;&#125;&#125;&#125;&#125;&#125;'</span></span><br><span class="line">(略)</span><br></pre></td></tr></table></figure><p>動きました。めでたしめでたし。Elasticsearch IFは後付けだったので、タイトルの文字列のスコアのBoostingはクエリー側で重みを設定できたりできないとかありますが、そのうちなんとかするかも。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>まだ実用的に使ってみてはないのですが、これでサーバーレスなサービスでも検索ができるようになります。今回は保存と検索を両方ともアクティブに行う前提でNoSQLなストレージを選択しました。まあ、うちの会社だとRDBを常時起動するケースがほとんどなので、RDBバックエンドも選べるようにしても良かったかもなぁ、と作ってから思いました。それ以外のケースで、更新頻度が少ないのであれば、バッチで転置インデックスを作成してS3に置いて、フロント側は読み込み専用で使う、みたいなのもあってもいいかもなぁ、と思いました。ブログみたいに誰かが更新しない限りインデックスも変更されないような場合ですね。</p><p>静的な検索だけしかしない、というユースケースを想定するなら、インデックスを検索エンジンのバイナリに書き込んでしまって、WebAssemblyにしてしまうというのも手です。なんか、今どきのCDNはWebAssemblyが動くらしいですし、CDN上で走らせても面白いんじゃないかと。Goはバイナリが大きいのでGo製のWebAssemblyバイナリはブラウザで動かすのはダウンロードのオーバーヘッドが大きくて、どこで使えばいいのか悩んでいましたが、エッジで動くならぜんぜんありですね。</p><p>互換インタフェースをつけてみたとはいえ、絶対的な検索速度の性能だけじゃなくて、台数を増やせば増やすほどスケーリングする点、マッピングの柔軟性、運用ノウハウetcな点では圧倒的にElasticsearchのほうが上です。たまーにしか使わない管理画面とかにも検索機能つけたらよくね？ぐらいな気持ちで作り始めたので、常時起動してもきちんと使われるとかであればElasticsearchを使うほうが良いです。</p><p>本を頂いてから6年越しになってしまって非常に申し訳なかったのですが、ようやく実装することができました。「サーバーレスでやる！」というコンセプトが決まってしまったら、あとはスムーズにできました。とても良い本です。実装の仕方の本ですが、Elasticsearchとかも基本的には同じ転置インデックス型のはずなので、今まで既製の検索エンジンを使うだけだった人も、より詳しくなってElasticsearchの気持ちを理解するには良い本じゃないかと思います。</p><p>今週末は都心近くの人はみんなお出かけはしないでしょうし、何か暇つぶしを探している方は、ぜひ検索エンジンを作ってみると良いと思います。</p><p>検索エンジン自作入門以外にも手を動かす系書籍の<a href="https://amzn.to/2UIpdBm" target="_blank" rel="noopener">［ゲーム＆モダン JavaScript文法で2倍楽しい］グラフィックスプログラミング入門</a>も杉本さんから献本を頂いてしまっているので、今度は一年以内には・・・</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した記事です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/tags/Serverless%E9%80%A3%E8%BC%89/&quot;&gt;サーバーレス連載の3回目&lt;/a&gt;は検索エンジンを作ってみたお話です。&lt;/p&gt;
&lt;p&gt;クラウドサービスが充実してくるにつれて、サーバーレスではいろいろなことができるようになっています。
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="GoCloud" scheme="https://future-architect.github.io/tags/GoCloud/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載2: AWS Lambda×Goの開発Tips</title>
    <link href="https://future-architect.github.io/articles/20200326/"/>
    <id>https://future-architect.github.io/articles/20200326/</id>
    <published>2020-03-26T05:24:00.000Z</published>
    <updated>2020-03-26T05:30:28.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニットの真野です。</p><p><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレスに関する連載</a>の第2弾ということで、典型的なAWSサービスであるLambdaアプリをGoで開発する中で調べた内容や、Tipsを紹介します。</p><h2 id="Lambdaの利用コア数は？"><a href="#Lambdaの利用コア数は？" class="headerlink" title="Lambdaの利用コア数は？"></a>Lambdaの利用コア数は？</h2><p>結論⇨ 全ての場合で”2”でした。</p><p>Goで開発する場合、少しでも性能を稼ぐためgoroutineを使う場面も多いと思います。特にバックエンドのデータストアがDynamoDBである場合は負荷を気にする必要がほぼ無いため、わたしはデータの書き込み部分を良く並列化することが多いです。</p><p>そういった場面で概算でどれくらい性能上がるのかな？と推測ができるよう、Lambda上で利用できるgoroutineの個数を調べました。メモリを128MB~3008MBを調整することで、裏のCPUやNW幅も増減する話も聞いたので、メモリサイズを変えて調べました。</p><p>Goで利用コア数を調べるには <a href="https://golang.org/pkg/runtime/#NumCPU" target="_blank" rel="noopener">NumCPU</a> を利用するそうです。これをLambdaのお作法に組み込みます。</p><p>Goにおける<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html" target="_blank" rel="noopener">Lambda関数の規約</a>から、最も短いシグネチャは <code>func()</code> ということで、単に標準出力するだけのものを作成します。</p><figure class="highlight go"><figcaption><span>検証コード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(runtime.NumCPU()) &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-package.html" target="_blank" rel="noopener">公式の手順を参考に</a>にデプロイします。</p><p>起動トリガーは何でも良いですが、今回はKinesis Data Streamをマッピングさせ、AWS CLIで <code>aws kinesis --profile=my_lambda_test put-record --stream-name dev-test-lambda --partition-key 123456789 --data MTIzNDU=</code> など適当なデータを投入し実行します。</p><p>例えば、メモリを1024MB与えて、実際に起動すると以下のようなログがCloudWatchLogsに出力されます。メモリなど設定を変更するたびに、LogStreamが変わるのでご注意ください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-03-26T03:10:39.194+09:00 START RequestId: 65078a85-9db0-45b0-bbf2-81a4eb19a08a Version: $LATEST</span><br><span class="line">2020-03-26T03:10:39.195+09:00 2</span><br><span class="line">2020-03-26T03:10:39.195+09:00 END RequestId: 65078a85-9db0-45b0-bbf2-81a4eb19a08a</span><br><span class="line">2020-03-26T03:10:39.195+09:00 REPORT RequestId: 65078a85-9db0-45b0-bbf2-81a4eb19a08a Duration: 0.67 ms Billed Duration: 100 ms Memory Size: 1024 MB Max Memory Used: 34 MB Init Duration: 74.46 ms</span><br></pre></td></tr></table></figure><p>実際に128MB, 512MB, 1024MB, 3008MBでLambdaを動かし、<code>runtime.NumCPU()</code> の値を取得すると以下の結果でした。</p><table><thead><tr><th>Memory[MB]</th><th>NumCPU</th></tr></thead><tbody><tr><td>128</td><td>2</td></tr><tr><td>512</td><td>2</td></tr><tr><td>1024</td><td>2</td></tr><tr><td>3008</td><td>2</td></tr></tbody></table><p>…全部2ですね。</p><p>もちろん、利用可能なCPU利用時間はメモリサイズによって変動すると思いますので、Concurrentにgoroutineを動かす場合は、メモリサイズを上げることは有効な対策になると思いますので、ユースケースに合わせてパラメータを検討しようと思います。</p><p>ちなみに、隣に座っている同僚が、つい最近メモリサイズごとの処理性能を計測していましたので大体どのくらいメモリを与えるとよいかの指標は近いうちに公開したいと思います。</p><h2 id="Lambdaの初期処理のポイント"><a href="#Lambdaの初期処理のポイント" class="headerlink" title="Lambdaの初期処理のポイント"></a>Lambdaの初期処理のポイント</h2><p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html#golang-handler-state" target="_blank" rel="noopener">ドキュメント</a> に記載している通り、Lambda関数外に変数を宣言できますし、init関数を用いる事もできます。Lambda関数は同時に1つしか動かないのでスレッドセーフを気にせずフィールドにおけるそうです。</p><p>init関数も良いですが、普通にmain関数内に初期処理を書いています。</p><figure class="highlight go"><figcaption><span>main関数内でフィールドに初期化するコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kc *kinesis.Kinesis</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(ctx context.Context, e events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// kcを使った何かしらのロジック</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">kc = kinesis.New(<span class="comment">/* 色々な初期化処理 */</span>),</span><br><span class="line">lambda.Start(handle)</span><br></pre></td></tr></table></figure><p>こうすると、Lambdaの実行時間を削減につながる≒課金額を減らせる可能性があるため、初期処理に寄せられるものはドンドン寄せたほうが良い使い方になります。</p><h2 id="Lambdaの関数タイプ"><a href="#Lambdaの関数タイプ" class="headerlink" title="Lambdaの関数タイプ"></a>Lambdaの関数タイプ</h2><p>Lambdaの関数として以下の8パターンが利用できます。<code>TIn</code>, <code>TOut</code> はencoding/json 標準ライブラリと互換性のある（≒Marshal, Unmarshalができるの意だと思います）必要があります。</p><ol><li><code>func ()</code></li><li><code>func () error</code></li><li><code>func (TIn), error</code></li><li><code>func () (TOut, error)</code></li><li><code>func (context.Context) error</code></li><li><code>func (context.Context, TIn) error</code></li><li><code>func (context.Context) (TOut, error)</code></li><li><code>func (context.Context, TIn) (TOut, error)</code></li></ol><p>このとき、ApiGatewayEventであれば <code>TIn</code>や<code>TOut</code> があるのもわかりますが、KinesisEventの場合は<code>TIn</code>は意味がわかるものの、戻り値 <code>TOut</code>は何にも使われないはずなので、使ったらどうなるのか気になりました。仮にKinesisEventで<code>TOut</code> を用いるとエラーになるのでしょうか？</p><p>結論⇨ KinesisEventでも <code>TOut</code>はあってもなくても良い。</p><p>4の形式でLambdaを作成し起動してみます。<code>TOut</code>は何でも良いということで、適当にResponseというStructを作成します。main関数では引数なし・Responseの固定値を返します。</p><figure class="highlight go"><figcaption><span>4の形式のLambda</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</span><br><span class="line">Payload <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(Response, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Response&#123;Payload: <span class="string">"future"</span>&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同じようにKinesisトリガーにし実行すると以下のようなログが出力されました。<br>特にResponseの内容は出力されませんし、エラーにもなっていませんでした。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-03-26T03:52:06.697+09:00 START RequestId: 27bc00f8-d7de-48d1-8c05-1f69c2c3ab07 Version: $LATEST</span><br><span class="line">2020-03-26T03:52:06.698+09:00 END RequestId: 27bc00f8-d7de-48d1-8c05-1f69c2c3ab07</span><br><span class="line">2020-03-26T03:52:06.698+09:00 REPORT RequestId: 27bc00f8-d7de-48d1-8c05-1f69c2c3ab07 Duration: 0.77 ms Billed Duration: 100 ms Memory Size: 3008 MB Max Memory U</span><br></pre></td></tr></table></figure><p>ということで、Lambdaの起動トリガーとなるEvent種別とマッチしないような関数シグネチャを使っても問題ないということがわかりました。Responseが後続連携のSNSなどにうまく渡せると面白いかなと思いましたが、それは未検証です（パット見、Responseをどう取得できるか分からなかったため）</p><p>個人的な考えですが、LambdaのHandler関数をテストする時に、戻り値があると色々と検証が捗るため、Kinesis Triggerであっても戻り値 <code>TOut</code>は指定するようにしています。</p><h2 id="errorとLogging"><a href="#errorとLogging" class="headerlink" title="errorとLogging"></a>errorとLogging</h2><p>これはLambdaに限らないかもですが、LambdaのHandler関数の中で、以下のようにログ出力とerror をreturnするコードがあり、重複してて嫌だなと思いつつ、気持ちを込めてダブルメンテしていました。そのまま errorをreturnするだけでLambdaサービス側でerrorの内容を出力してくれるのですが、 <code>ERROR</code> といった文字列などカスタマイズしたい場合は2度手間せざるおえなかったです。</p><p>↓の例では一箇所ですが、こういったハンドリングが複数あると見落としも怖いと思うこともありました。</p><figure class="highlight go"><figcaption><span>よくあるerrorのreturnとlog出力</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := Hoge(ctx, hogeInput); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error().Msgf(<span class="string">"put dynamoDB: %v %+v"</span>, err, models)</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"put dynamoDB: %w %+v"</span>, err, models)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これの対応としてhttpのMiddlewareのような関数を宣言すると良いかもしれません。<br><code>func (context.Context, TIn) error</code> パターンで作ってみています。</p><figure class="highlight go"><figcaption><span>Middlewareライクな関数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> lambdaHandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, ke events.KinesisEvent)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">errLog</span><span class="params">(fn lambdaHandlerFunc)</span> <span class="title">lambdaHandlerFunc</span></span>  &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, ke events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := fn(ctx, ke); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// ログなど横断的な処理を加える</span></span><br><span class="line">log.Error().Msgf(<span class="string">"lambda err: %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようなerrLogという関数を、ロジックが実装された <code>handle</code> をWrapすると事前・事後の処理をうまくWrapすることができます。</p><figure class="highlight go"><figcaption><span>呼び出す場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda.Start(errLog(handle))</span><br></pre></td></tr></table></figure><p>この辺はガンバりすぎると一種のアプリケーションフレームワークのように進化を遂げて、いろいろな功罪を生みそうですが、機能をシンプルに保てる体制の見通しがあれば導入しても良いかなと最近考えています。</p><h2 id="return-errorした場合の-errorString-null対応"><a href="#return-errorした場合の-errorString-null対応" class="headerlink" title="return errorした場合の errorString null対応"></a>return errorした場合の errorString null対応</h2><p>以下のように任意のerrorをreturnしたときのCloudWatchLogs側のログ出力ですが…</p><figure class="highlight go"><figcaption><span>エラー出力時</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"BAD REQUEST"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のように、 <code>BAD REQUEST</code> の後に <code>errorString null</code> というのが出力されます。</p><p>問題ないといえば無いですが、 <code>null</code> といわれると少し気持ち悪い気持ちがありました。</p><figure class="highlight plain"><figcaption><span>Lambdaの実行ログ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-03-26T10:02:58.888+09:00 START RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811 Version: $LATEST</span><br><span class="line">2020-03-26T10:02:58.888+09:00 BAD REQUEST: errorString null</span><br><span class="line">2020-03-26T10:02:58.889+09:00 END RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811</span><br><span class="line">2020-03-26T10:02:58.889+09:00 REPORT RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811 Duration: 1.03 ms Billed Duration: 100 ms Memory Size: 1024 MB Max Memory ...</span><br></pre></td></tr></table></figure><p>この <code>null</code> の部分ですが、ドキュメントで探せなかったですが、内部のErrorを示すStructが持つフィールドを見たところ正体はStackTraceのようです。</p><p>設定の方法は、<a href="https://github.com/aws/aws-lambda-go/blob/master/lambda/function.go#L33" target="_blank" rel="noopener">コードを読んだ限り</a>通常の error を returnする形では設定できないようで（間違えていればご指摘ください）、panicを発生させると設定されるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"BAD_REQUEST with panic"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のLambdaを実行すると、以下のようなログが出力されます</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2020-03-26T10:15:05.546+09:00 START RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811 Version: $LATEST</span><br><span class="line">2020-03-26T10:15:05.547+09:00 BAD_REQUEST with panic: string</span><br><span class="line">[</span><br><span class="line">   &#123;&quot;path&quot;: &quot;github.com/aws/aws-lambda-go@v1.15.0/lambda/function.go&quot;, &quot;line&quot;: 36, label&quot;: &quot;(*Function).Invoke.func1&quot;&#125;,</span><br><span class="line">   &#123;&quot;path&quot;: &quot;runtime/panic.go&quot;, &quot;line&quot;: 679,  &quot;label&quot;: &quot;gopanic&quot;&#125;,</span><br><span class="line">   &#123;&quot;path&quot;: &quot;MyApplication/lambda.go&quot;, &quot;line&quot;: 10, &quot;label&quot;: &quot;main.func1&quot;&#125;,</span><br><span class="line">   // 省略</span><br><span class="line">]</span><br><span class="line">2020-03-26T10:15:05.583+09:00 END RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811</span><br><span class="line">2020-03-26T10:15:05.583+09:00 REPORT RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811Duration: 36.24 msBilled Duration: 100 msMemory Size: 1024 MBMax Memory Used: 34 MBInit Duration: 66.10 ms</span><br><span class="line">2020-03-26T10:15:05.583+09:00 BAD_REQUEST with panic string</span><br></pre></td></tr></table></figure><p>panicということで予期せぬエラーの場合にはStackTraceを出してくれるのは助かりますね。</p><p>アプリケーションとしてpanicでエラーハンドリングすると、少々Lambda関数のUnitTestが難しくなりそうなので、なかなか導入する気にはなれないですが、どうしてもStackTraceを出したい場合などは検討してみても良いかもしれません。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>LambdaのGoから見た論理コア数⇨2固定</li><li>Lambdaのコードは初期処理に寄せる</li><li>関数タイプは開発/テスト観点など好きなものを使って良い</li><li>Lambda関数のパターンは決まっているのでmiddlewareを用意しても良いかも</li><li><code>errorString null</code>の<code>null</code>はStackTrace項目で、通常は <code>null</code> が入るで問題なし</li></ul><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した記事です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG/DXユニットの真野です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architec
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
</feed>
