<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-06-04T13:02:55.640Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>春の入門祭り 🌸 #05　データベース　テーブル設計入門</title>
    <link href="https://future-architect.github.io/articles/20200605/"/>
    <id>https://future-architect.github.io/articles/20200605/</id>
    <published>2020-06-05T12:46:58.000Z</published>
    <updated>2020-06-04T13:02:55.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り🌸</a> #05　データベース　テーブル設計入門です。</p><p>テーブル設計を初めて任された際にどうやって設計をすれば良いか困った経験はありませんか？ </p><p>誰かが設計済みのテーブルを見れば理解できるのだけれども、そもそもテーブル設計ってどうすれば良いの？って方に向けた記事です。</p><p>とりあえず定義したテーブルを正規化していく形であるべき姿を学んで行きます。  </p><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>DBはRDBMS(リレーショナルデータベース)を対象とします。 </p><p>論理設計を対象とします。 </p><p>処理速度よりも整合性を優先するものとします。  </p><h1 id="良いテーブル設計とは？"><a href="#良いテーブル設計とは？" class="headerlink" title="良いテーブル設計とは？"></a>良いテーブル設計とは？</h1><p>処理速度が速いに越したことはないのですが、それよりも保持するデータの冗長性を排除し、整合性を保持する設計が良しとされます。</p><p>これを行う方法が正規化として定義されており、一般的には第３正規形まで正規化することで取り扱いやすい良いテーブル設計となります。</p><p>正規形定義</p><table><thead><tr><th>名称</th><th>定義</th></tr></thead><tbody><tr><td>非正規形</td><td>リレーションRの属性の中に、単一でない値が含まれている。</td></tr><tr><td>第１正規形</td><td>リレーションRの属性が、単一値である。</td></tr><tr><td>第２正規形</td><td>リレーションRが次の二つの条件を満たす。<br>1.第１正規形であること<br>2.すべての非キー属性は、いかなる候補キーにも部分関数従属していない(完全関数従属である)こと</td></tr><tr><td>第３正規形</td><td>リレーションRが次の二つの条件を満たす。<br>1.第２正規形であること<br>2.すべての非キー属性は、いかなる候補キーにも推移的関数従属していない</td></tr></tbody></table><p>ですがこの定義の説明、専門用語と独特の言い回しが多く初見だと難しく感じたので順を追ってわかりやすく非正規形から第３正規形にしてみようと思います。</p><h1 id="STEP0-基本となるテーブル"><a href="#STEP0-基本となるテーブル" class="headerlink" title="STEP0　基本となるテーブル"></a>STEP0　基本となるテーブル</h1><p>説明の為、サンプルとなるテーブルを用意します。社員番号、社員名、部署コード、部署、趣味を持つものとします。社内向け社員検索システムの設計の一部だとでも思っていただければよいです。</p><p>仮のレコードも付け加えると以下のようになります。以後、主キーは下線にて示します。</p><p>この社員テーブルは非正規形の状態です。</p><p>社員</p><img src="/images/20200605/1.png" class="img-middle-size"><p>※1 本来であれば社員名は姓、名で分けたり、よみがなの項目を分けて持つべきですが、今回の説明の主旨から外れるので簡易的に社員名として表現しています。<br>※2 会社によっては社員が複数の部署に所属するような場合もあるかと思いますが、今回は社員は一つの部署にのみ所属することとします。</p><h1 id="STEP1-非正規形から第１正規形へ"><a href="#STEP1-非正規形から第１正規形へ" class="headerlink" title="STEP1　非正規形から第１正規形へ"></a>STEP1　非正規形から第１正規形へ</h1><p>非正規形の定義として「単一でない値が含まれている」というのがあり、それは上表で言うと趣味にあたります。<br>一人が複数の趣味を持つことがあり、検索や更新をする際に適切な形式ではありません。<br>まずは単一でない値を排除することで第１正規形にしてみましょう。</p><p>社員<br><img src="/images/20200605/2.png" class="img-middle-size"></p><p>趣味<br><img src="/images/20200605/3.png" class="img-small-size"></p><h1 id="STEP2-第１正規形から第２正規形へ"><a href="#STEP2-第１正規形から第２正規形へ" class="headerlink" title="STEP2　第１正規形から第２正規形へ"></a>STEP2　第１正規形から第２正規形へ</h1><p>用意したサンプルでは実はもう社員テーブルは第２正規形になっています。<br>正規形の定義を確認すると第２正規形の定義の一部として「1.第１正規形であること」とあるので第３正規形までであれば高次の正規形は低次の正規形を満たすことになります。<br>「2.すべての非キー属性は、いかなる候補キーにも部分関数従属していない(完全関数従属である)こと」この定義がいまいちわかりにくいので補足すると複数のキーで主キーが構成される場合に主キーの一部が他のキーの主キーとなるのを解消することです。<br>※正確に言うと主キーではなく候補キーですが説明を簡素化する為、主キーと記載しています。<br>別のテーブルで例を示すと以下のようになります。</p><p>伝票<br><img src="/images/20200605/4.png" class="img-small-size"></p><p>このテーブルでは主キーの一部である商品コードが商品名に対する主キーになる為、第１正規形ですが、それを以下のように解消することで第２正規形(第３正規形)にできます。</p><p>伝票<br><img src="/images/20200605/5.png" class="img-small-size"></p><p>商品<br><img src="/images/20200605/6.png" class="img-small-size"></p><h1 id="STEP3-第２正規形から第３正規形へ"><a href="#STEP3-第２正規形から第３正規形へ" class="headerlink" title="STEP3　第２正規形から第３正規形へ"></a>STEP3　第２正規形から第３正規形へ</h1><p>社員テーブルはまだ第２正規形ですので第３正規形にしましょう。<br>「2.すべての非キー属性は、いかなる候補キーにも推移的関数従属していない」ことが第３正規形の定義です。<br>これも言い回しが独特でとっつきにくいのですが、マスタテーブルを作成すると捉えればOKです。そのマスタテーブルって何って話ですが、何らかのIDに対して一意の名称を持ち利用されうる値全てを保持するテーブルです。例えば都道府県だったり、社員だったり取引先だったり。反対に伝票番号のように業務に伴って発生した出来事を記録するテーブルはマスタテーブルではありません。</p><p>社員(再掲)<br><img src="/images/20200605/7.png" class="img-middle-size"></p><p>部署の主キーとなるのが部署コードなので新たに部署テーブルを作成し、社員テーブルからは部署テーブルの主キーのみを示す形します。</p><p>社員<br><img src="/images/20200605/8.png" class="img-small-size"></p><p>部署<br><img src="/images/20200605/9.png" class="img-small-size"></p><h1 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h1><p>正規化の他にも気を付けるべき点があるので特に気を付けるべきと思われる点を簡単に３点だけ紹介します。</p><h2 id="多対多の関係の解消"><a href="#多対多の関係の解消" class="headerlink" title="多対多の関係の解消"></a>多対多の関係の解消</h2><p>テーブル設計を進めていくとテーブル間の関係が多対多になってしまうことがあります。<br>先ほどの例ではあえて留めましたが、趣味テーブルがマスタテーブル化されているような場合に起きえます。</p><p>社員<br><img src="/images/20200605/10.png" class="img-middle-size"></p><p>趣味マスタ<br><img src="/images/20200605/12.png" class="img-small-size"></p><p>多対多の関係の場合にどうテーブル設計をすれば良いかわからなくなってしまいがちです。<br>そうなんです。多対多の関係の場合、どう頑張っても良い設計にならないのです。<br>ですのでそもそも多対多の関係にならないような設計が必要で、その解消方法は中間テーブルを用意し、１対多の関係になるように設計することが必要です。</p><p>社員趣味紐付け(中間テーブル)※<br><img src="/images/20200605/13.png" class="img-small-size"></p><p>※代理キー(サロゲートキー)を主キーとする設計も良くあります。</p><h2 id="論理削除の可否"><a href="#論理削除の可否" class="headerlink" title="論理削除の可否"></a>論理削除の可否</h2><p>論理削除はアンチパターンの一つなのですが、割と良くある設計です。<br>レコードを消したい。でも消したくないみたいな時に削除フラグ項目を設け、レコードをDELETEするのではなく削除フラグをUPDATEして、SELECTの条件で削除フラグがTRUEなら取得しないようにするやつです。<br>頻繁に復活させたり、レコード数が少ないテーブルに設けるのであれば検討の余地はありますが、基本的には論理削除を用いないほうが良いでしょう。<br>削除フラグを設けることで検索速度が遅くなるので、削除したデータを保持しておきたいのであれば検索に利用しない削除済みデータを管理する別のテーブルを用意しそちらに移動させるか、ログから削除したデータが追えるようになっているほうが良いと考えます。</p><p>※論理削除については以下Webページで語られているので深く知りたい方はご確認ください。<br><a href="https://fukabori.fm/episode/27" target="_blank" rel="noopener">27. 論理削除とは何か？どのような解法があるのか？ w/ twada</a></p><h2 id="インデックスの作成"><a href="#インデックスの作成" class="headerlink" title="インデックスの作成"></a>インデックスの作成</h2><p>検索速度を早くしたい場合にインデックスを作成しますが、インデックスにも順序性があり、実際にSQLのwhere句で指定されるキーの順序と合致しないとそのインデックスは利用されません。<br>また、メリットだけではなくデメリットが存在し、検索速度が早くなる代わりにそれ以外のINSERT,UPDATE,DELETEは遅くなります。<br>良くインデックスは文字通り書籍の索引に例えられますが、索引があれば引くのは早く、ページに変更(INSERT,UPDATE,DELETE)があれば索引も再構築しなければならない為、遅くなります。現実世界のものに例えると理解しやすくなりますね。<br>なお、主キーには暗黙的にインデックスが作成されます。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>テーブル設計を第３正規形になるように順を追って設計し、その他に気を付けるべき点を紹介しました。<br>他にもテーブル設計の要素として外部キーやデータ型、トリガーなどがありますが、入門記事ということもありさくっと読めるように割愛しています。<br>第３正規形がいかなるときも最適かと言うとそんなことは無く、整合性よりも処理速度を優先するようなシステムの場合には第２正規形にすることもありますし、今回は入門記事のため触れませんでしたがレコード数が多い場合にはパーティショニングやシャーディングの検討が必要になることもあります。<br>型を崩すにしても基本を知っているのと知っていないのでは大違いですのでまずは基本をマスターしましょう。その上で崩すところは崩す。<br>重要なのはシステムの規模や特性にあった設計を行うことです。<br>それでは良いテーブル設計ライフを！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architect
      
    
    </summary>
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
      <category term="RDB" scheme="https://future-architect.github.io/tags/RDB/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #04 NW入門</title>
    <link href="https://future-architect.github.io/articles/20200604/"/>
    <id>https://future-architect.github.io/articles/20200604/</id>
    <published>2020-06-04T00:06:07.000Z</published>
    <updated>2020-06-04T12:50:03.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニットの西田と申します。</p><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り🌸</a>の第4弾！という事で、私はネットワークの入門編を書きます。</p><p>プログラマー視点ではあまり馴染みのない技術領域、ネットワーク。そもそもなんで馴染みがないのか？それは…<strong>独自用語あまりに多すぎ！概念も独自すぎ！</strong>という背景があります。わかります、その気持ち。私もプログラマ出身ですから。</p><p>ネットワークの設計という観点では<a href="https://future-architect.github.io/articles/20170704/">こちらの記事</a>がありますが、今回は入門という事で、<strong>身近な仕組みを実機で動作を確認</strong>しながら、解説しようと思います。通常のNW入門って、大体はOSI参照モデルから入りますが、ちょっと重いので今回はやりません。</p><h1 id="説明する事"><a href="#説明する事" class="headerlink" title="説明する事"></a>説明する事</h1><p><code>Chrome</code>や<code>Safari</code>などのブラウザで<code>https://www.future.co.jp</code>を入力すると、会社の公式ページが表示されますよね。<br>その裏側でどんな通信が行われているのかを <strong>実機で具体的に確認して理解する</strong> 事を目的にします。</p><img src="/images/20200604/photo_20200604_01.jpeg"><h1 id="DNSとは"><a href="#DNSとは" class="headerlink" title="DNSとは"></a>DNSとは</h1><p>皆さん、基本的には<code>future.co.jp</code>とか、<code>tokyo-calendar.jp</code>とかそういう名前でアクセスする先を認識していますよね？これは<code>FQDN</code>(Fully Qualified Domain Name：完全修飾ドメイン名)と呼ばれていて、（基本的には）世界中でアクセス先を1つに限定する名前になっています。</p><p>ですが、この<code>FQDN</code>だけでは、実はネットワークの世界では通信は出来ないんです。ネットワークの世界では、<code>IPアドレス</code>（ネットワーク上の住所・番地など）を用いて通信が行われています。</p><p>その対応付けがこのDNSという事ですね。例えるならこういう事です。</p><img src="/images/20200604/2.jpg"><p>この対応付けをする技術が<code>DNS</code>であり、この対応付けをしてくれる人が<code>DNSサーバ</code>という事です。</p><h2 id="DNSの仕組み"><a href="#DNSの仕組み" class="headerlink" title="DNSの仕組み"></a>DNSの仕組み</h2><p>DNSの仕組み自体は外部にいいサイトがたくさんあるので、仕組みそのものはそっちを見た方が良いです。例えば<a href="https://xn--u8j7eobcu7j2kyg7f.jp/special/dns/page_02.html" target="_blank" rel="noopener">このサイト</a>があります。</p><h2 id="動きを見る"><a href="#動きを見る" class="headerlink" title="動きを見る"></a>動きを見る</h2><p>さて、それではDNS解決を実機で見てみましょう。DNS調査のコマンドといえば、<code>dig</code>です。が、実はwindowsにはインストールされていないので、<a href="https://www.digwebinterface.com/" target="_blank" rel="noopener">こちらのサイト</a>でまずは試してみましょう。</p><h3 id="基本編"><a href="#基本編" class="headerlink" title="基本編"></a>基本編</h3><p>まずはグループ会社である<a href="https://corp.tokyo-calendar.jp/" target="_blank" rel="noopener">東京カレンダー</a>から見てみましょう。ここがとても分かりやすかったので。<br>手順は囲いました。</p><img src="/images/20200604/photo_20200604_02.jpeg" style="border:solid 1px #000000"><p>これは、以下を実行しています。</p><ul><li>右上の<code>Nameservers</code>で指定したDNSサーバ<code>1.1.1.1</code>に対して<ul><li><code>1.1.1.1</code>は世界で一番早いと言われているDNSキャッシュサーバです。私は家のPCのDNSはこれにしています。</li></ul></li><li><code>corp.tokyo-calendar.jp</code>のIPアドレスの解決を</li><li><code>Trace</code>オプション(反復問い合わせ箇所の結果を返すモード)で実行</li></ul><p>結果はこうなりますよね。参考までに、以下は私の手元のlinuxマシンで実行した結果です。</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">nishida@ubuntu:~$ <span class="title">dig</span> @1.1.1.1 <span class="title">corp.tokyo</span>-<span class="title">calendar.jp</span>. +<span class="title">trace</span> +<span class="title">nodnssec</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">; &lt;&lt;&gt;&gt; <span class="title">DiG</span> 9.11.3-1<span class="title">ubuntu1</span>.11-<span class="title">Ubuntu</span> &lt;&lt;&gt;&gt; @1.1.1.1 <span class="title">corp.tokyo</span>-<span class="title">calendar.jp</span>. +<span class="title">trace</span> +<span class="title">nodnssec</span></span></span><br><span class="line"><span class="function">; (1 <span class="title">server</span> <span class="title">found</span>)</span></span><br><span class="line"><span class="function">;; <span class="title">global</span> <span class="title">options</span>: +<span class="title">cmd</span></span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">a.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">b.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">c.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">d.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">e.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">f.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">g.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">h.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">i.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">j.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">k.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">l.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">m.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 239 <span class="title">bytes</span> <span class="title">from</span> 1.1.1.1#53(1.1.1.1) <span class="title">in</span> 55 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">a.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">b.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">c.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">d.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">e.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">f.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">g.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">h.dns.jp</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 507 <span class="title">bytes</span> <span class="title">from</span> 192.5.5.241#53(<span class="title">f.root</span>-<span class="title">servers.net</span>) <span class="title">in</span> 107 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.86400<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1512.<span class="title">awsdns</span>-61.<span class="title">org</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.86400<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-211.<span class="title">awsdns</span>-26.<span class="title">com</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.86400<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-586.<span class="title">awsdns</span>-09.<span class="title">net</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.86400<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1832.<span class="title">awsdns</span>-37.<span class="title">co.uk</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 219 <span class="title">bytes</span> <span class="title">from</span> 203.119.1.1#53(<span class="title">a.dns.jp</span>) <span class="title">in</span> 42 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">corp.tokyo</span>-<span class="title">calendar.jp</span>.60<span class="title">IN</span><span class="title">A</span>54.250.204.18</span></span><br><span class="line"><span class="function"><span class="title">corp.tokyo</span>-<span class="title">calendar.jp</span>.60<span class="title">IN</span><span class="title">A</span>52.193.252.137</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.300<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1512.<span class="title">awsdns</span>-61.<span class="title">org</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.300<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1832.<span class="title">awsdns</span>-37.<span class="title">co.uk</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.300<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-211.<span class="title">awsdns</span>-26.<span class="title">com</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.300<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-586.<span class="title">awsdns</span>-09.<span class="title">net</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 223 <span class="title">bytes</span> <span class="title">from</span> 205.251.194.74#53(<span class="title">ns</span>-586.<span class="title">awsdns</span>-09.<span class="title">net</span>) <span class="title">in</span> 160 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>順に説明していきます。</p><ul><li><code>.</code>で始まるパート<ul><li><code>.</code>(ルート)レベルのドメインを持つのは、a-mのroot-serverである。このどれかに問い合わせる、という意味です。</li></ul></li><li><code>jp.</code>で始まるパート<ul><li>一番下に<code>from 192.5.5.241#53(f.root-servers.net)</code>と書いてあります。<code>1.1.1.1</code>が、a-m の中で<code>f.root-servers.net</code>に問い合わせを行った結果が返っています。</li><li><code>f.root-servers</code>から、『jpドメインの名前を知っているのは、<code>a.dns.jp</code>-<code>h.dns.jp</code>だからそこに問い合わせてほしい』と返ってきています。</li></ul></li><li><code>tokyo-calendar.jp.</code>で始まるパート<ul><li>一番下に<code>from 203.119.1.1#53(a.dns.jp)</code>と書いてあります。<code>1.1.1.1</code>が、上記のa-h の中で<code>a.dns.jp</code>に問い合わせを行った結果が返っています。</li><li><code>a.dns.jp</code>から、『tokyo-calendar.jpドメインの名前を知っているのは、<code>ns-......</code>だからそこに問い合わせてほしい』と返ってきています。</li><li>ドメインからわかりますが、<code>aws</code>にこのwebサーバが置かれているという事がわかります。<code>route53</code>使ってるんですかね、おそらく。</li></ul></li><li><code>corp.tokyo-calendar.jp.</code>で始まるパート<ul><li>一番下に<code>from 205.251.194.74#53(ns-586.awsdns-09.net)</code>と書いてあります。<code>1.1.1.1</code>が、上記の中で<code>ns-586.awsdns-09.net</code>に問い合わせを行った結果が返っています。</li><li><code>ns-586.awsdns-09.net</code>から、<code>corp.tokyo-calendar.jp</code>は<code>54.250.204.18</code>と<code>52.193.252.137</code>の2つであると返ってきています。</li></ul></li></ul><p>これで無事、<strong><code>FQDN</code> から <code>IPアドレス</code> に <code>DNS解決</code></strong> 出来ました。<br>解決出来たアドレスで、https通信ももちろんできます。<br><a href="https://54.250.204.18/" target="_blank" rel="noopener">https://54.250.204.18/</a><br>証明書の<code>CN</code>が一致しないので警告画面は出ますが <code>詳細設定ボタン</code> を押して、下のリンクをクリックすると当然閲覧出来ます。</p><h3 id="少し応用"><a href="#少し応用" class="headerlink" title="少し応用"></a>少し応用</h3><p>それでは次は<code>www.future.co.jp</code>を見てみましょう。</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">nishida@ubuntu:~$ <span class="title">dig</span> @1.1.1.1 <span class="title">www.future.co.jp</span>. +<span class="title">trace</span> +<span class="title">nodnssec</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">～～　中略　～～</span></span><br><span class="line"><span class="function"><span class="title">www.future.co.jp</span>.60<span class="title">IN</span><span class="title">CNAME</span><span class="title">www.future.co.jp</span>-<span class="title">v1.edgesuite.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">future.co.jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1106.<span class="title">awsdns</span>-10.<span class="title">org</span>.</span></span><br><span class="line"><span class="function"><span class="title">future.co.jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-131.<span class="title">awsdns</span>-16.<span class="title">com</span>.</span></span><br><span class="line"><span class="function"><span class="title">future.co.jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1906.<span class="title">awsdns</span>-46.<span class="title">co.uk</span>.</span></span><br><span class="line"><span class="function"><span class="title">future.co.jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-746.<span class="title">awsdns</span>-29.<span class="title">net</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 229 <span class="title">bytes</span> <span class="title">from</span> 205.251.192.131#53(<span class="title">ns</span>-131.<span class="title">awsdns</span>-16.<span class="title">com</span>) <span class="title">in</span> 146 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>最後が<code>CNAME</code>で終わってますよね。これ、Akamaiという<code>CDN</code>サービスを使っているからなんです。<br><code>CDN</code>は、簡単に言うとwebのコンテンツ（例えば画像ファイルなど）をクライアントに（NW的に）近い場所にキャッシュしておくことで、webの応答を早くする＆webサーバの負荷を軽くするために使われるサービスです。<br>なので、実際のFutureのトップページのコンテンツが置かれているサーバではなく、Akamai 管理のコンテンツキャッシュサーバを案内されます。それを<code>CNAME</code>という名前の<strong>別名</strong>を設定する事で実現しています。では、この別名を今度は解決します。</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">nishida@ubuntu:~$ <span class="title">dig</span> @1.1.1.1 <span class="title">www.future.co.jp</span>-<span class="title">v1.edgesuite.net</span>. +<span class="title">trace</span> +<span class="title">nodnssec</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">～～　中略　～～</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">www.future.co.jp</span>-<span class="title">v1.edgesuite.net</span>. 21600 <span class="title">IN</span> <span class="title">CNAME</span> <span class="title">a1807.b.akamai.net</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 91 <span class="title">bytes</span> <span class="title">from</span> 23.211.133.64#53(<span class="title">a6</span>-64.<span class="title">akam.net</span>) <span class="title">in</span> 32 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>また<code>CNAME</code> 別名でしたね。ではもう1回。</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">nishida@ubuntu:~$ <span class="title">dig</span> @1.1.1.1 <span class="title">a1807.b.akamai.net</span>. +<span class="title">trace</span> +<span class="title">nodnssec</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">～～　中略　～～</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n5b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n1b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n7b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n2b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n6b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n0b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n3b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n4b.akamai.net</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 347 <span class="title">bytes</span> <span class="title">from</span> 95.101.36.192#53(<span class="title">zd.akamaitech.net</span>) <span class="title">in</span> 30 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">a1807.b.akamai.net</span>.20<span class="title">IN</span><span class="title">A</span>23.32.3.80</span></span><br><span class="line"><span class="function"><span class="title">a1807.b.akamai.net</span>.20<span class="title">IN</span><span class="title">A</span>23.32.3.66</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 79 <span class="title">bytes</span> <span class="title">from</span> 221.110.183.69#53(<span class="title">n5b.akamai.net</span>) <span class="title">in</span> 40 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>ようやく解決出来ました。<a href="https://www.digwebinterface.com/" target="_blank" rel="noopener">こちらのサイト</a>で<code>DNS解決</code>を行った場合は、最後に解決できるIPアドレスは違うと思います。先ほど説明した通り、<code>CDN</code>はクライアントに近い場所のキャッシュサーバを案内するため、接続元の場所が大きく違うと違うIPアドレスになるのが正しいです。<br>ちなみに、私が試した上記の環境は、会社支給のポケット<code>wifi</code>で試しているので、その<code>SIM</code>携帯キャリアの基地局（？）内に置かれているAkamaiのキャッシュサーバのアドレスが、上記のアドレスになっていると想定されます。</p><p>このDNSですが、調査方法を知っておく事は非常に重要です。<br>私の経験上、<strong>ネットワークがつながらない問題の5割が、DNSが解決出来ない</strong> 事です。<code>dig</code>コマンドはwindowsにもインストール出来ます。<br>実際、<a href="https://future-architect.github.io/articles/20200526/">こちらの記事</a>ではトラブルシュートの中で<code>dig</code>を使っています。また、原因も一周回って<code>DNS</code>でした。</p><h1 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h1><p>無事、IPアドレス（ネットワーク上の住所）が判明した、次はどう通信するのかに話を進めます。</p><ul><li>データはパケットという単位で分割される<ul><li>ご存知の方も多いかもしれませんが、ネットワーク上の通信は、<code>パケット</code>という単位で区切ってデータを送受信します。例えば動画などの大きなデータも、1パケットあたり（基本は）最大で1500バイトに分割して送られます、</li></ul></li><li>各パケットがそれぞれ、送信先のIPアドレスめがけて送信されます</li></ul><h2 id="Routing-の仕組み"><a href="#Routing-の仕組み" class="headerlink" title="Routing の仕組み"></a>Routing の仕組み</h2><p>Routing も仕組み自体は外部にいいサイトがたくさんあるので、そちらを見た方が良いです。これくらいの説明の粒度を合致してそうなサイトは、<a href="https://network.yamaha.com/knowledge/routing" target="_blank" rel="noopener">このサイト</a>あたりです。IPアドレス体系の説明をしていないので、まずはこれくらいの理解で良いです。</p><h2 id="動きを見る-1"><a href="#動きを見る-1" class="headerlink" title="動きを見る"></a>動きを見る</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>それでは、先程名前を解決した、<code>www.future.co.jp</code> = <code>a1807.b.akamai.net</code> = <code>23.32.3.80</code> を例にしてみましょう。</p><p><code>Routing</code> の様子を調べるには、windowsでは<code>tracert</code>というコマンドが使えます。(Macでは<code>traceroute</code>)</p><figure class="highlight dos"><figcaption><span>tracert</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; tracert <span class="number">23</span>.<span class="number">32</span>.<span class="number">3</span>.<span class="number">80</span></span><br><span class="line"></span><br><span class="line">a23-<span class="number">32</span>-<span class="number">3</span>-<span class="number">80</span>.deploy.static.akamaitechnologies.com [<span class="number">23</span>.<span class="number">32</span>.<span class="number">3</span>.<span class="number">80</span>] へのルートをトレースしています</span><br><span class="line">経由するホップ数は最大 <span class="number">30</span> です:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>     <span class="number">3</span> ms     <span class="number">1</span> ms     <span class="number">2</span> ms  <span class="number">192</span>.<span class="number">168</span>.<span class="number">128</span>.<span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">47</span> ms   <span class="number">211</span> ms    <span class="number">38</span> ms  pw126240091001.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">91</span>.<span class="number">1</span>]</span><br><span class="line"><span class="number">3</span>    <span class="number">27</span> ms    <span class="number">42</span> ms    <span class="number">37</span> ms  pw126240091002.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">91</span>.<span class="number">2</span>]</span><br><span class="line"><span class="number">4</span>    <span class="number">45</span> ms    <span class="number">39</span> ms    <span class="number">40</span> ms  pw126240088129.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">88</span>.<span class="number">129</span>]</span><br><span class="line"><span class="number">5</span>    <span class="number">54</span> ms    <span class="number">28</span> ms    <span class="number">38</span> ms  pw126240088085.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">88</span>.<span class="number">85</span>]</span><br><span class="line"><span class="number">6</span>    <span class="number">44</span> ms    <span class="number">69</span> ms    <span class="number">47</span> ms  pw126240088065.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">88</span>.<span class="number">65</span>]</span><br><span class="line"><span class="number">7</span>    <span class="number">76</span> ms    <span class="number">25</span> ms    <span class="number">41</span> ms  pw126240088033.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">88</span>.<span class="number">33</span>]</span><br><span class="line"><span class="number">8</span>    <span class="number">27</span> ms    <span class="number">36</span> ms    <span class="number">39</span> ms  <span class="number">101</span>.<span class="number">110</span>.<span class="number">16</span>.<span class="number">241</span></span><br><span class="line"><span class="number">9</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"><span class="number">10</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"><span class="number">11</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"><span class="number">12</span>    <span class="number">41</span> ms    <span class="number">35</span> ms    <span class="number">37</span> ms  a23-<span class="number">32</span>-<span class="number">3</span>-<span class="number">80</span>.deploy.static.akamaitechnologies.com [<span class="number">23</span>.<span class="number">32</span>.<span class="number">3</span>.<span class="number">80</span>]</span><br><span class="line"></span><br><span class="line">トレースを完了しました。</span><br></pre></td></tr></table></figure><p>上から順にNW的に近いルーティングデバイスです。<br><strong>全部で12ホップ</strong>である＝クライアント～サーバ間に11個のルーティングデバイス存在する事が明らかになりました。<br>応答時間が3回分返ってきています。目的地まで平均して<code>40ms</code>程度なので通信状況は良好と言えます。</p><p>少しだけ細かく説明します。</p><ul><li>1は、会社支給のポケット<code>wifi</code>のアドレス</li><li>2～8は、Softbankさん運営のNWです。NW内で（＝AS内で）、何回かルーティングされています。<ul><li>ネットワークの所有者はwhoisというサービス（コマンドもインストール可能）で調べる事が出来ます。<ul><li><a href="https://tech-unlimited.com/whois.html" target="_blank" rel="noopener">こちらのサイト</a> で <code>126.240.91.1</code> を入力すると出てきます。</li></ul></li></ul></li><li>9～11は、<code>Firewall</code> or 装置の設定などの問題で、<code>traceroute</code>の信号に応答してくれない状態になっています。</li><li>12は、<code>www.future.co.jp</code>のトップページの<code>html</code>ファイルがキャッシュされているAkamaiのサーバです。</li></ul><p>この様に、<code>traceroute</code>を使用すると、サーバまでのNWの経路と、その応答時間（レイテンシ）を測る事が出来ます。<br>何かしらの<strong>処理が遅い系のトラブルは、まず<code>traceroute</code></strong>を見るのが良いです。<br>NWの問題か、サーバの問題か、明らかになりますから。</p><h3 id="少し応用-1"><a href="#少し応用-1" class="headerlink" title="少し応用"></a>少し応用</h3><p>今度は<code>corp.tokyo-calendar.jp</code> = <code>54.250.204.18</code>を見てみましょう。</p><figure class="highlight dos"><figcaption><span>windows</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; tracert <span class="number">54</span>.<span class="number">250</span>.<span class="number">204</span>.<span class="number">18</span></span><br><span class="line"></span><br><span class="line">ec2-<span class="number">54</span>-<span class="number">250</span>-<span class="number">204</span>-<span class="number">18</span>.ap-northeast-<span class="number">1</span>.compute.amazonaws.com [<span class="number">54</span>.<span class="number">250</span>.<span class="number">204</span>.<span class="number">18</span>] へのルートをトレースしています</span><br><span class="line">経由するホップ数は最大 <span class="number">30</span> です:</span><br><span class="line"></span><br><span class="line">～～　中略　～～</span><br><span class="line"></span><br><span class="line"> <span class="number">22</span>    <span class="number">22</span> ms    <span class="number">41</span> ms    <span class="number">33</span> ms  <span class="number">52</span>.<span class="number">95</span>.<span class="number">31</span>.<span class="number">82</span></span><br><span class="line"> <span class="number">23</span>    <span class="number">48</span> ms    <span class="number">28</span> ms    <span class="number">31</span> ms  <span class="number">27</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">72</span></span><br><span class="line"> <span class="number">24</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">25</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">26</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">27</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">28</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">29</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">30</span>     *        *        *     要求がタイムアウトしました。</span><br></pre></td></tr></table></figure><p>返ってきませんね。これは明らかにターゲットとなる <code>54.250.204.18</code> の前にいるFirewall、今回はおそらくAWS の <code>Sercurity Group</code>で<code>tracert</code>で使用する<code>ICMP(Ping)</code>というパケットを許可していないため、途中から探索が出来なくなっています。</p><p>逆に言えば、webサイトの閲覧の通信（<code>https</code>）は許可されているわけなので、その通信に成りすまして trace してみましょう。<br>windowsではまたもやコマンドがないので、以下はlinuxマシンで試しています。</p><figure class="highlight dos"><figcaption><span>linux</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function">nishida@ubuntu:~$ <span class="title">sudo</span> <span class="title">traceroute</span> -<span class="title">T</span> -<span class="title">p</span> 443 54.250.204.18</span></span><br><span class="line"><span class="function"><span class="title">traceroute</span> <span class="title">to</span> 54.250.204.18 (54.250.204.18), 30 <span class="title">hops</span> <span class="title">max</span>, 60 <span class="title">byte</span> <span class="title">packets</span></span></span><br><span class="line"><span class="function"> 1  _gateway (192.168.128.1)  3.666 <span class="title">ms</span>  3.563 <span class="title">ms</span>  3.613 <span class="title">ms</span></span></span><br><span class="line"><span class="function"> 2  <span class="title">pw126240091001</span>.0.<span class="title">tss.panda</span>-<span class="title">world.ne.jp</span> (126.240.91.1)  205.578 <span class="title">ms</span>  205.551 <span class="title">ms</span>  205.487 <span class="title">ms</span></span></span><br><span class="line"><span class="function"> 3  <span class="title">pw126240091002</span>.0.<span class="title">tss.panda</span>-<span class="title">world.ne.jp</span> (126.240.91.2)  99.263 <span class="title">ms</span>  99.244 <span class="title">ms</span>  99.178 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">～～　中略　～～</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">29  * * *</span></span><br><span class="line"><span class="function">30  <span class="title">ec2</span>-54-250-204-18.<span class="title">ap</span>-<span class="title">northeast</span>-1.<span class="title">compute.amazonaws.com</span> (54.250.204.18)  46.987 <span class="title">ms</span>  37.726 <span class="title">ms</span>  37.653 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>今度は返ってきました。<br>途中で中継しているルーティングデバイスはやっぱり返答してくれませんでした。<br>全部で30ホップ。FutureのトップページよりはNW的には倍以上遠いです（というか、Futureは<code>CDN</code>を使っているから特別近いだけ）。ただ、応答時間は約<code>40ms</code>なので良好です。応答時間の大部分を占めるのは、4G回線の部分という事も明らかになっています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>説明の関係で誤解を招きそうなのでここで訂正しますが、最初の<code>DNS</code>の通信でも<code>Routing</code>は使われています。</p><ul><li>例えば、自分のPC → <code>1.1.1.1</code>に対して、DNSパケットを投げた時からすでに。</li><li>そして、<code>1.1.1.1</code> → <code>f.root-servers.net(192.5.5.241)</code> へのDNS通信でももちろん。</li></ul><p>最初から<code>IPアドレス</code>の世界から入ると、どうしても壁を感じてしまうため、本記事は名前から入ったためこの様な順序になっています。<br><strong>OSI参照モデル</strong>と呼ばれており、各層で役割が分かれています（例えば、Routingは3層、DNSは7層）。次があればこの辺りも説明します。<br>OSI参照モデルに関しては、<a href="https://future-architect.github.io/articles/20191107/">こちらの記事</a>で、冗長構成の観点から少しだけ説明しています。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>いかがでしたでしょうか？企業のシステム構成がだんだん明らかになっていくので、まるでハッキングしているみたいで面白いですよね。もちろん全部合法なので、知っているサイトを調べてみてください。特にFutureグループのWebサイトのほとんどがAWS上で作られている事がわかります。</p><p>トップページの様にそもそも公開しているサイトであれば別に構わないですが、逆にVPNサーバなど『本当は隠蔽したいけど通信のために公開しなければならないサービス』もありますよね。最近ではこれらのサービスの隠蔽のために<a href="https://www.cloudsecurityalliance.jp/site/?page_id=1167" target="_blank" rel="noopener"><code>SDP</code>という技術</a>も出始めています。ニーズがあればどこかで書きます。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXユニットの西田と申します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-archi
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
      <category term="introductory" scheme="https://future-architect.github.io/tags/introductory/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸#03 ゼロから始めるFlutter生活</title>
    <link href="https://future-architect.github.io/articles/20200603/"/>
    <id>https://future-architect.github.io/articles/20200603/</id>
    <published>2020-06-03T02:09:41.000Z</published>
    <updated>2020-06-04T12:50:05.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの<a href="https://twitter.com/famipapamart" target="_blank" rel="noopener">村田</a>です。<a href="https://future-architect.github.io/articles/20200529/">春の入門祭り🌸</a> 第3弾として、兼ねてより気になっていたFlutterに入門してみた話をお届けします。</p><p>普段はクラウドインフラ寄りな技術を触っているのですが、実は生まれと育ちはフロントエンド畑で、過去には<a href="https://github.com/future-architect/urushi" target="_blank" rel="noopener">Urushi</a>という当社製のOSS開発に携わっていました。</p><p>Urushiについては以下のブログで詳細に語られています。2017年の記事ですね。懐かしい限りです。<br><a href="https://future-architect.github.io/articles/20170605/">ES2015 Web componentsと国産Web componentsフレームワークUrushi</a></p><p>昨今の自粛生活の中で私のチーム内でもオンラインもくもく会（社内では通称「引きこもりもくもく」）が流行っているのですが、久しぶりにフロントエンドに触れようと思い立ったのが事の経緯です。</p><h1 id="Flutterとは"><a href="#Flutterとは" class="headerlink" title="Flutterとは"></a>Flutterとは</h1><blockquote><p>Flutter is Google’s UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase.</p></blockquote><p><a href="https://flutter.dev/" target="_blank" rel="noopener">https://flutter.dev/</a></p><p>FlutterはGoogle製のフレームワークです。クロスプラットフォーム対応はAndroidとiOSだけでなくWebまで行き届いていますが、これはReactNativeなど他のクロスプラットフォーム開発フレームワークでも同様ですね。</p><p>Flutterの特徴は、開発言語に<a href="https://dart.dev/" target="_blank" rel="noopener">Dart</a>という言語を採用している点です。DartはGoogle製のプログラミング言語なのですが、書き心地はJavaScriptに非常に近く、久しぶりにJSを嗜んだ私でもとっつきやすい言語でした。</p><h1 id="やりたいこと"><a href="#やりたいこと" class="headerlink" title="やりたいこと"></a>やりたいこと</h1><p>絶賛無人島生活🏝️を満喫していた私は、Flutterでもくもくするにあたって、「カブ価の推移を可視化する」というゴールを定めました。本記事ではカブ価についての詳細は割愛しますが、株価のように時系列に合わせて上下する値の推移を銘柄(島)ごとにグラフ📈化したい、というのが私のやりたかったことです。</p><p>Flutterは今回Web版を利用しています。バックエンドのDBについては、Firebaseでうまくライトにやれないかなー程度に考えていました。（最終的にCloud Firestoreを採択してますが、それについては後述します）</p><img src="/images/20200603/photo_20200603_01.png"><h1 id="実際にやってみる"><a href="#実際にやってみる" class="headerlink" title="実際にやってみる"></a>実際にやってみる</h1><h2 id="まずは環境構築"><a href="#まずは環境構築" class="headerlink" title="まずは環境構築"></a>まずは環境構築</h2><p>兎にも角にもまずは環境構築をしていきます。私の端末はMacOSなので、<a href="https://flutter.dev/docs/get-started/install/macos" target="_blank" rel="noopener">MacOS用の手順</a>に従って環境構築を進めていきます。ちなみに今回利用するのはWeb版なので、<a href="https://flutter.dev/docs/get-started/web" target="_blank" rel="noopener">Web版向けの手順</a>も合わせて実施する必要があります。</p><p>Flutterのバージョンを確認しておきましょう。Flutter Webを使うのでChannel betaを利用しています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ flutter --version</span><br><span class="line">Flutter 1.17.0 • channel beta • https://github.com/flutter/flutter.git</span><br><span class="line">Framework • revision e6b34c2b5c (4 weeks ago) • 2020-05-02 11:39:18 -0700</span><br><span class="line">Engine • revision 540786dd51</span><br><span class="line">Tools • Dart 2.8.1</span><br></pre></td></tr></table></figure><p>さて、手順にはmockアプリをインストールしそれを動作するところまで含まれていますので、やってみましょう！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ flutter create myapp</span><br><span class="line">Creating project myapp...                                          </span><br><span class="line">・</span><br><span class="line">・</span><br><span class="line">(中略)</span><br><span class="line">・</span><br><span class="line">・</span><br><span class="line">Running <span class="string">"flutter pub get"</span> <span class="keyword">in</span> myapp...                               1.9s</span><br><span class="line">Wrote 77 files.</span><br><span class="line"></span><br><span class="line">All <span class="keyword">done</span>!</span><br><span class="line">[✓] Flutter: is fully installed. (Channel beta, v1.17.0, on Mac OS X 10.14.6 18G4032, locale ja-JP)</span><br><span class="line">[!] Android toolchain - develop <span class="keyword">for</span> Android devices: is partially installed; more components are available. (Android SDK version 28.0.3)</span><br><span class="line">[✗] Xcode - develop <span class="keyword">for</span> iOS and macOS: is not installed.</span><br><span class="line">[✓] Chrome - develop <span class="keyword">for</span> the web: is fully installed.</span><br><span class="line">[!] Android Studio: is partially installed; more components are available. (version 3.4)</span><br><span class="line">[✓] VS Code: is fully installed. (version 1.45.1)</span><br><span class="line">[✓] Connected device: is fully installed. (2 available)</span><br><span class="line"></span><br><span class="line">Run <span class="string">"flutter doctor"</span> <span class="keyword">for</span> information about installing additional components.</span><br><span class="line"></span><br><span class="line">In order to run your application, <span class="built_in">type</span>:</span><br><span class="line"></span><br><span class="line">  $ <span class="built_in">cd</span> myapp</span><br><span class="line">  $ flutter run</span><br><span class="line"></span><br><span class="line">Your application code is <span class="keyword">in</span> myapp/lib/main.dart.</span><br></pre></td></tr></table></figure><p>これで必要なファイル群が <code>myapp</code> 配下に作成されます。 <code>lib/main.dart</code> が実際にimplementする対象のファイルになるのですが、一旦触らずにアプリの起動を確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myapp</span><br><span class="line">$ flutter run -d chrome</span><br></pre></td></tr></table></figure><p>以下のような画面が表示されれば成功です！画面はとてもシンプルで、右下の「+ボタン」をクリックすると画面内のカウンタがインクリメントされていきます。</p><img src="/images/20200603/photo_20200603_02.png" style="border:solid 1px #000000"><p>これでアプリの開発環境は整いました。では早速アプリの開発に移っていきましょう。</p><h2 id="ChartJSプラグインを使ってグラフ表示を行う"><a href="#ChartJSプラグインを使ってグラフ表示を行う" class="headerlink" title="ChartJSプラグインを使ってグラフ表示を行う"></a>ChartJSプラグインを使ってグラフ表示を行う</h2><p>Flutter(Dart)で利用できるプラグインは<a href="https://pub.dev/" target="_blank" rel="noopener">pub.dev</a>というページにまとまっているのですが、今回はその中から<a href="https://pub.dev/packages/flutter_web_chartjs" target="_blank" rel="noopener">flutter_web_chartjs</a>というWeb版Flutterで使えるChartJSライブラリを使うことにしました。</p><p>使いたいパッケージは <code>pubspec.yaml</code> というファイルに以下のような形で記載します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  flutter_web_chartjs:</span> <span class="string">^0.2.5</span></span><br></pre></td></tr></table></figure><p>これで準備完了です。<br><a href="https://pub.dev/packages/flutter_web_chartjs#-example-tab-" target="_blank" rel="noopener">Example</a>に従ってアプリを実装すれば以下のような画面を表示することができますが、詳細はここでは割愛します。</p><img src="/images/20200603/photo_20200603_03.png" style="border:solid 1px #000000"><p>縦軸と横軸に該当するデータセット群を用意すればグラフを表示できることが確認できました。</p><h2 id="FirebaseのDBと繋ぎたい"><a href="#FirebaseのDBと繋ぎたい" class="headerlink" title="FirebaseのDBと繋ぎたい"></a>FirebaseのDBと繋ぎたい</h2><p>DBはなるべく簡単に扱えるものにしたく、Cloud Firestoreを使うことにしました。</p><p>ちなみに、Cloud Firestoreを使うかRealtime Databaseを使うか少しだけ悩んだのですが、そのへんは<a href="https://speakerdeck.com/mura123yasu/zerokarashi-merufluttersheng-huo-prologue" target="_blank" rel="noopener">こちら</a>の資料にまとめてあります。</p><p>諸々の背景は省きますが、「おとなしくCloud FirestoreをNative Modeで使おう」というのが私の結論です。</p><h3 id="利用プラグインの追加"><a href="#利用プラグインの追加" class="headerlink" title="利用プラグインの追加"></a>利用プラグインの追加</h3><p>さて、実装に移っていきます。先程同様、まずは使いたいプラグインを <code>pubspec.yaml</code> に記載するところからです。<a href="https://pub.dev/packages/cloud_firestore" target="_blank" rel="noopener">cloud_firestore</a>を使うため、以下のように追記しました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  flutter_web_chartjs:</span> <span class="string">^0.2.5</span></span><br><span class="line"><span class="attr">  cloud_firestore:</span> <span class="string">^0.13.5</span></span><br></pre></td></tr></table></figure><h3 id="Firebase-Appの作成"><a href="#Firebase-Appの作成" class="headerlink" title="Firebase Appの作成"></a>Firebase Appの作成</h3><p>次にFirebase Appの作成です。Firebase Consoleにて「アプリを追加」から作成し、 <code>アプリID</code> を取得します。</p><p>その際、以下のような形でHTMLファイルの修正も求められます。</p><img src="/images/20200603/photo_20200603_04.png" style="border:solid 1px #000000"><p>今回は <code>web/index.html</code> が修正対象になります。この辺の経緯は<a href="https://github.com/FirebaseExtended/flutterfire/blob/master/packages/cloud_firestore/cloud_firestore_web/README.md" target="_blank" rel="noopener">GitHubページのREADME</a>にも記載があります。</p><blockquote><p>Due to this bug in dartdevc, you will need to manually add the Firebase JavaScript files to your index.html file.</p></blockquote><p>Web版のFlutterは鋭意アップデート中ということもあり、今後改善されていくポイントなんだろうなと思っています。</p><h3 id="index-html-のアップデート"><a href="#index-html-のアップデート" class="headerlink" title="index.html のアップデート"></a><code>index.html</code> のアップデート</h3><p>必要な変更を加えた <code>index.html</code> の <code>&lt;body&gt;</code> タグは以下のようになりました。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Due to this bug in dartdevc, you will need to manually add the Firebase JavaScript files to your index.html file. see: https://github.com/FirebaseExtended/flutterfire/blob/master/packages/cloud_firestore/cloud_firestore_web/README.md--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.gstatic.com/firebasejs/7.5.0/firebase-app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.gstatic.com/firebasejs/7.5.0/firebase-firestore.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- This script installs service_worker.js to provide PWA functionality to</span></span><br><span class="line"><span class="comment">       application. For more information, see:</span></span><br><span class="line"><span class="comment">       https://developers.google.com/web/fundamentals/primers/service-workers --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    if ('serviceWorker' in navigator) &#123;</span><br><span class="line">      window.addEventListener('load', function () &#123;</span><br><span class="line">        navigator.serviceWorker.register('flutter_service_worker.js');</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ADD THIS BEFORE YOUR main.dart.js SCRIPT --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    // TODO: Replace the following with your app's Firebase project configuration.</span><br><span class="line">    // See: https://support.google.com/firebase/answer/7015592</span><br><span class="line">    var firebaseConfig = &#123;</span><br><span class="line">      apiKey: "YOUR_API_KEY",</span><br><span class="line">      authDomain: "YOUR_AUTH_DOMAIN",</span><br><span class="line">      databaseURL: "YOUR_DATABASE_URL",</span><br><span class="line">      projectId: "YOUR_PROJECT_ID",</span><br><span class="line">      storageBucket: "YOUR_STORAGE_BUCKET",</span><br><span class="line">      messagingSenderId: "YOUR_MESSAGING_SENDER_ID",</span><br><span class="line">      appId: "YOUR_APP_ID",</span><br><span class="line">      measurementId: "YOUR_MEASUREMENT_ID"</span><br><span class="line">    &#125;;</span><br><span class="line">    // Initialize Firebase</span><br><span class="line">    firebase.initializeApp(firebaseConfig);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- END OF FIREBASE INIT CODE --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.dart.js"</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="main-dart-にて本実装"><a href="#main-dart-にて本実装" class="headerlink" title="main.dart にて本実装"></a><code>main.dart</code> にて本実装</h2><p>ここまでの下準備が整えば、本実装を行うのみです。<br><a href="https://pub.dev/packages/cloud_firestore#-example-tab-" target="_blank" rel="noopener">Example</a>等を参考にしつつ実装を進めたのが以下です。</p><p>まずはimport文とmain文。FirebaseAppを設定してアプリを起動します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_web_chartjs/chartjs.models.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_web_chartjs/chartjs.wrapper.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:firebase_core/firebase_core.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:cloud_firestore/cloud_firestore.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> FirebaseApp app = <span class="keyword">await</span> FirebaseApp.configure(</span><br><span class="line">    name: <span class="string">'Turniprice Visualizer'</span>,</span><br><span class="line">    options: <span class="keyword">const</span> FirebaseOptions(</span><br><span class="line">      apiKey: <span class="string">"YOUR_API_KEY"</span>,</span><br><span class="line">      projectID: <span class="string">"YOUR_PROJECT_ID"</span>,</span><br><span class="line">      googleAppID: <span class="string">"YOUR_APP_ID"</span>,</span><br><span class="line">      databaseURL: <span class="string">"YOUR_DATABASE_URL"</span>,</span><br><span class="line">      storageBucket: <span class="string">"YOUR_STORAGE_BUCKET"</span>,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">final</span> Firestore firestore = Firestore(app: app);</span><br><span class="line"></span><br><span class="line">  runApp(MyApp(firestore: firestore));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先程 <code>runApp()</code> に引数として渡された <code>MyApp</code> クラスの実体です。 <code>_getChartData()</code> が今回のキモとなる部分であり、FirestoreへのアクセスとChartJSで描画するデータセットの整形を担っています。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyApp(&#123;<span class="keyword">this</span>.firestore&#125;);</span><br><span class="line">  <span class="keyword">final</span> Firestore firestore;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> values = &#123;&#125;;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; x = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> colors = [</span><br><span class="line">    Colors.blue.withOpacity(<span class="number">0.4</span>),</span><br><span class="line">    Colors.yellow.withOpacity(<span class="number">0.4</span>),</span><br><span class="line">    Colors.red.withOpacity(<span class="number">0.4</span>),</span><br><span class="line">    Colors.green.withOpacity(<span class="number">0.4</span>)</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  Future&lt;ChartData&gt; _getChartData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Query documents</span></span><br><span class="line">    <span class="keyword">final</span> querySnapshot = <span class="keyword">await</span> firestore</span><br><span class="line">        .collection(<span class="string">"prices"</span>)</span><br><span class="line">        .orderBy(<span class="string">"date"</span>, descending: <span class="keyword">true</span>)</span><br><span class="line">        .orderBy(<span class="string">"ampm"</span>, descending: <span class="keyword">true</span>)</span><br><span class="line">        .getDocuments();</span><br><span class="line">    </span><br><span class="line">    querySnapshot.documents.forEach((doc) =&gt; format(doc));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ChartDataオブジェクトを作成</span></span><br><span class="line">    <span class="comment">// datasetsを作成</span></span><br><span class="line">    <span class="built_in">List</span>&lt;ChartDataset&gt; datasets = [];</span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">    values.forEach((key, value) &#123;</span><br><span class="line">      datasets.add(</span><br><span class="line">        ChartDataset(</span><br><span class="line">          data: value,</span><br><span class="line">          label: key,</span><br><span class="line">          backgroundColor: colors[count],</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">      count++;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> chartData = ChartData(</span><br><span class="line">      labels: x,</span><br><span class="line">      datasets: datasets,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chartData;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> format(DocumentSnapshot doc) &#123;</span><br><span class="line">    <span class="built_in">print</span>(doc[<span class="string">"date"</span>] + <span class="string">"/"</span>+ doc[<span class="string">"ampm"</span>] + <span class="string">"/"</span>+ doc[<span class="string">"label"</span>] + <span class="string">"/"</span>+ doc[<span class="string">"val"</span>].toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// "date+ampm"がxにいるかチェックし、いなければリストに追加</span></span><br><span class="line">    <span class="keyword">var</span> xVal = doc[<span class="string">"date"</span>] + doc[<span class="string">"ampm"</span>];</span><br><span class="line">    <span class="keyword">if</span> (!x.contains(xVal)) &#123;</span><br><span class="line">      x.add(xVal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// labelをキーにしたリストがvaluesにあるかチェックし、いなければリストに追加</span></span><br><span class="line">    values[doc[<span class="string">"label"</span>]] ??= [];</span><br><span class="line">    <span class="comment">// valueをリストに追加</span></span><br><span class="line">    values[doc[<span class="string">"label"</span>]].add(doc[<span class="string">"val"</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみにデータレコードは以下のような情報を持っています。</p><img src="/images/20200603/photo_20200603_05.png" style="border:solid 1px #000000"><p>最後にStateクラスです。 <code>MyApp</code> クラスは <code>StatefulWidget</code> なのでこのStateクラスにてbuild処理を実装します。実装時に気にしたポイントは後述します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">'Turniprice Visualizer'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: FutureBuilder(</span><br><span class="line">            future: widget._getChartData(),</span><br><span class="line">            builder: (BuildContext context, AsyncSnapshot&lt;ChartData&gt; snapshot) &#123;</span><br><span class="line">              <span class="comment">// 通信中</span></span><br><span class="line">              <span class="keyword">if</span> (snapshot.connectionState != ConnectionState.done) &#123;</span><br><span class="line">                <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 通信終了だがエラーあり</span></span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[USER-ERROR]"</span> + snapshot.error.toString());</span><br><span class="line">                <span class="keyword">return</span> Text(snapshot.error.toString());</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 通信正常終了</span></span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[USER-INFO]Fetching data succeeded."</span>);</span><br><span class="line">                <span class="keyword">return</span> ChartJS(</span><br><span class="line">                    id: <span class="string">'graph'</span>,</span><br><span class="line">                    config: ChartConfig(</span><br><span class="line">                        type: ChartType.line,</span><br><span class="line">                        options: ChartOptions(</span><br><span class="line">                            animationConfiguration: ChartAnimationConfiguration(</span><br><span class="line">                              duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">1200</span>),</span><br><span class="line">                              easing: ChartEasing.easeOutQuart,</span><br><span class="line">                            ),</span><br><span class="line">                            scales: ChartScales(</span><br><span class="line">                              xAxes: [</span><br><span class="line">                                ChartAxis(</span><br><span class="line">                                  type: ChartCartesianAxisType.category,</span><br><span class="line">                                )</span><br><span class="line">                              ],</span><br><span class="line">                            ),</span><br><span class="line">                            tooltip: ChartTooltip(</span><br><span class="line">                                intersect: <span class="keyword">false</span>,</span><br><span class="line">                                mode: ChartTooltipMode.isIndex,</span><br><span class="line">                                callbacks: ChartCallbacks(label: (tooltip) &#123;</span><br><span class="line">                                  <span class="keyword">return</span> <span class="string">'R\$ <span class="subst">$&#123;tooltip.value&#125;</span>'</span>;</span><br><span class="line">                                &#125;))),</span><br><span class="line">                        data: snapshot.data),</span><br><span class="line">                  );</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[USER-INFO]Fetching data failed."</span>);</span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">'No Data'</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-dart-実装時に気にしたこと"><a href="#main-dart-実装時に気にしたこと" class="headerlink" title="main.dart 実装時に気にしたこと"></a><code>main.dart</code> 実装時に気にしたこと</h2><h3 id="StatefulWidget-vs-StatelessWidget"><a href="#StatefulWidget-vs-StatelessWidget" class="headerlink" title="StatefulWidget vs StatelessWidget"></a><code>StatefulWidget</code> vs <code>StatelessWidget</code></h3><p>Widgetには <code>Stateful</code> と <code>Stateless</code> の2種類があり、<a href="https://flutter.ctrnost.com/tutorial/tutorial05/" target="_blank" rel="noopener">Flutter Doc JP</a>では以下のように説明されています。</p><img src="/images/20200603/photo_20200603_06.png" style="border:solid 1px #000000"><p>今回利用しているChartJSプラグインにおいて <code>ChartJS</code> クラスは <code>StatefulWidget</code> として定義されていたため、 <code>MyApp</code> クラスは <code>StatefulWidget</code> で実装しています。用途的には、初回通信でのみ値を取得および描画できればよかったので、 <code>StatelessWidget</code> でも良いのかなと思いましたが、プラグインの実装に従う形で <code>StatefulWidget</code> を利用しています。</p><h3 id="FutureBuilder-vs-StreamBuilder"><a href="#FutureBuilder-vs-StreamBuilder" class="headerlink" title="FutureBuilder vs StreamBuilder"></a><code>FutureBuilder</code> vs <code>StreamBuilder</code></h3><p>素のBuilderを使うと、Cloud Firestoreのデータ取得が完了する前に画面の描画処理が走ってしまいます。そのため、非同期通信を待つBuilderを使う必要がありました。</p><p>非同期Builderには <code>FutureBuilder</code> と <code>StreamBuilder</code> の2種類があります。</p><ul><li>StreamBuilder<ul><li>非同期処理の更新する変数が変化する度にウィジェットをbuildし直すBuilder</li></ul></li><li>FutureBuilder<ul><li>指定した非同期処理の完了を待つBuilder</li></ul></li></ul><p>上記の説明は<a href="https://qiita.com/sshon/items/9005cd64a4fc9f9b6a45" target="_blank" rel="noopener">こちら</a>のページから拝借しました。</p><p>今回のアプリでは初回のデータ取得のみを待てばよいので、Builderは <code>FutureBuilder</code> を利用しました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はFlutter入門記事ということで、簡単ではありますがFirebaseを利用したアプリ開発をご紹介させて頂きました。</p><p>それにしてもDartという開発言語、Future社員の私にとってFuture型の存在がなにか特別な感情をもたらしてくれました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Flutterでアプリ書いてるけど何回も&quot;Future&quot;って登場してて、知らぬ間に愛社精神が磨かれてる気がする。Dart...お前まさか...</p>&mdash; Yasuhiro Murata (@famipapamart) <a href="https://twitter.com/famipapamart/status/1254307447117737984?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 26, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>…という冗談はさておき、書いている間に楽しい気分にさせてくれる言語というのもモチベーションの一部だと思うので、この感情はこれからも大事にしていきたいと思います。</p><p>春の入門祭り🌸 はまだまだ続きます！Future技術ブログ始まって以来の超大型連載、ぜひぜひ最後までお付き合いください！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの&lt;a href=&quot;https://twitter.com/famipapamart&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="introductory" scheme="https://future-architect.github.io/tags/introductory/"/>
    
      <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
      <category term="Dart" scheme="https://future-architect.github.io/tags/Dart/"/>
    
      <category term="アプリ" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #02 Google Cloud Platform 101</title>
    <link href="https://future-architect.github.io/articles/20200602/"/>
    <id>https://future-architect.github.io/articles/20200602/</id>
    <published>2020-06-02T00:54:02.000Z</published>
    <updated>2020-06-04T12:50:09.462Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200602/top.jpg" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/dendoktoor-14802912/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4934438" target="_blank" rel="noopener">dendoktoor</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4934438" target="_blank" rel="noopener">Pixabay</a>からの画像</p><br><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り🌸</a>の第2弾です。</p><p>こんにちは、TIG/DXチームの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤</a>です。今回はGCPでWebアプリ環境を作ってみようという記事になります。今回のモチベーションとしては、</p><ul><li>GCPには特有の思想・設計があるが、まだまだ世に浸透していないと思うので、それを表現したい</li><li>世の中のシステムのほとんどがWebサービスなので、それを例に構築する</li></ul><p>というのがあります。今回は社内でGCPを広めている立場としても、入門記事を出してより多くの人にGCPを触ってもらえたらと思います。GCPの思想や設計については以前私が書いたブログがあるので以下をご覧ください。<br>「<a href="https://future-architect.github.io/articles/20200424/">社内勉強会で発表したGCP資料を公開します</a>」</p><h2 id="GCPのプロジェクトを作成する"><a href="#GCPのプロジェクトを作成する" class="headerlink" title="GCPのプロジェクトを作成する"></a>GCPのプロジェクトを作成する</h2><p>はじめにGCPのプロジェクトを作成して、片付けを簡単にしましょう。GCPは1つのアカウントに対して複数のプロジェクトを作成することができます。今回は以下の画像の様にプロジェクトを作成しました。</p><img src="/images/20200602/photo_20200602_01.png" class="img-middle-size" style="border:solid 1px #000000"><p>しばらくすると作成が完了するので、待ちましょう。</p><h2 id="Compute-Engineを使ったWebアプリ環境の構築"><a href="#Compute-Engineを使ったWebアプリ環境の構築" class="headerlink" title="Compute Engineを使ったWebアプリ環境の構築"></a>Compute Engineを使ったWebアプリ環境の構築</h2><p>ここではCompute Engine(GCE)を使ったWebアプリ環境の構築を行います。完成すると、以下のような構成になります。<br><img src="/images/20200602/photo_20200602_02.png"></p><h3 id="1-VPCとサブネットを作成する"><a href="#1-VPCとサブネットを作成する" class="headerlink" title="1.VPCとサブネットを作成する"></a>1.VPCとサブネットを作成する</h3><p>はじめに、VPCとサブネットを作成しましょう。GCPではVPCは世界中のリージョンをまたぐことができます。ハンバーガーメニューから[VPCネットワーク]&gt;[VPCネットワーク]を選びましょう。</p><img src="/images/20200602/photo_20200602_03.png" class="img-middle-size" style="border:solid 1px #000000"><p>デフォルトのVPCがすでにありますが、今回は使用せず、画面上部にある[VPCネットワークを作成]を押しましょう。<br>今回はVPCネットワークを「<strong>sample-network</strong>」とし、サブネットを2つ以下のように作成しました。</p><table><thead><tr><th>Subnet Name</th><th>Region</th><th>IP Address Range</th></tr></thead><tbody><tr><td>sample-subnet-pub</td><td>asia-northeast1</td><td>192.168.1.0/24</td></tr><tr><td>sample-subnet-prv</td><td>asia-northeast3</td><td>10.0.1.0/24</td></tr></tbody></table><p>また、動的ルーティングモードは今回リージョンとしています。これでVPCとサブネットの作成が終わったので、リソースの作成に入りましょう。</p><h3 id="2-GCEの作成"><a href="#2-GCEの作成" class="headerlink" title="2.GCEの作成"></a>2.GCEの作成</h3><p>はじめにGCEインスタンスを立ち上げていきましょう。まずはハンバーガーメニューから「Compute Engine」を選択してください。リソースが何もない状態だと以下の画面が表示されますので「作成」の青ボタンを押しましょう。<br><img src="/images/20200602/photo_20200602_04.png" class="img-middle-size"></p><p>作成画面に入ったら、いくつか選択する項目があるので、画像の下の表に倣って埋めましょう。<br><img src="/images/20200602/photo_20200602_05.png" class="img-middle-size" style="border:solid 1px #000000"></p><table><thead><tr><th></th><th>踏み台サーバー</th><th>Webサーバー</th></tr></thead><tbody><tr><td>名前</td><td>bastion</td><td>web-instance</td></tr><tr><td>リージョン</td><td>asia-northeast1</td><td>asia-northeast1-a</td></tr><tr><td>ゾーン</td><td>asia-northeast3</td><td>asia-northeast3-a</td></tr><tr><td>IDとAPIへのアクセス</td><td>全てのCloud APIに完全アクセス権を許可</td><td>全てのCloud APIに完全アクセス権を許可</td></tr><tr><td>ファイアウォール</td><td>-</td><td>HTTP トラフィックを許可する</td></tr><tr><td>ネットワークタグ</td><td>bastion</td><td>from-bastion, (http-server)</td></tr><tr><td>ネットワーク</td><td>sample-network</td><td>sample-network</td></tr><tr><td>サブネットワーク</td><td>sample-subnet-pub</td><td>sample-subnet-prv</td></tr><tr><td>外部IP</td><td>エフェメラル</td><td>なし</td></tr></tbody></table><p>他の項目についてはデフォルトで入っているもので問題ありません。ここまでくるとインスタンスが2台出来上がっていると思います。</p><p>ここでさらにインスタンスグループを作成しましょう。のちの4で使います。[Compute Engine]&gt;[インスタンスグループ]まで進みます。今回は既に作成されているインスタンスをインスタンスグループに属させるので、「新しい非マネージドインスタンス グループ」を使います。以下の画像の通りに作成を進めましょう。<br><img src="/images/20200602/photo_20200602_06.png" class="img-middle-size" style="border:solid 1px #000000"></p><h3 id="3-ファイアウォールの作成"><a href="#3-ファイアウォールの作成" class="headerlink" title="3.ファイアウォールの作成"></a>3.ファイアウォールの作成</h3><p>今回、2つGCEを作成しています。サーバーが攻撃を受けないように守りを固めましょう。[VPCネットワーク]&gt;[ファイアウォールルール]から作成できます。以下の表の2つを作成してください</p><table><thead><tr><th>名前</th><th>bastion</th><th>from-bastion</th></tr></thead><tbody><tr><td>ネットワーク</td><td>sample-network</td><td>sample-network</td></tr><tr><td>ターゲット</td><td>指定されたターゲットタグ</td><td>指定されたターゲットタグ</td></tr><tr><td>ターゲットタグ</td><td>bastion</td><td>from-bastion</td></tr><tr><td>ソースフィルタ</td><td>IP範囲</td><td>ソースタグ</td></tr><tr><td>ソースIPの範囲/ソースタグ</td><td>0.0.0.0/0</td><td>bastion</td></tr><tr><td>プロトコルとポート</td><td>すべて許可</td><td>すべて許可</td></tr></tbody></table><h3 id="4-ロードバランサの作成"><a href="#4-ロードバランサの作成" class="headerlink" title="4.ロードバランサの作成"></a>4.ロードバランサの作成</h3><p>リソース作成の最後です。<code>web-instance</code>にインターネット上からアクセスしてサービスを見れるようにロードバランサの設定をします。ハンバーガーメニューから[ネットワークサービス]&gt;[負荷分散]を選択しましょう。GCEと同様に何も作成されていなければ、画面中央にある[ロードバランサを作成]を押して作成に入ります。ここで使うのは「HTTP(S)負荷分散」です。用途としてはインターネットからVMのアクセスを受け入れるように設定します。名前を「web-lb」としてバックエンドからどんどん設定を進めていきましょう。<br>バックエンドサービスの設定について、今回はバックエンドをGCEインスタンスにするので、バックエンドサービスを選択し、作成に進みましょう。入力項目は名前を「web-backend」、インスタンスグループを「web-instance-group」と入力します。ヘルスチェックの欄がありますが、名前を「web-health」。プロトコルを「HTTP」にして、他の欄はデフォルトのままで作成に進みましょう。<br>フロントエンドの設定は「web-frontend」として入力し、完了ボタンを押しましょう。<br>これで一通り入力が終わったので、最後に確認と完了を見てみましょう。ここまでくると以下のようになっているかと思います。<br><img src="/images/20200602/photo_20200602_07.png" class="img-middle-size" style="border:solid 1px #000000"></p><h3 id="5-Cloud-Router-Cloud-NATの設定"><a href="#5-Cloud-Router-Cloud-NATの設定" class="headerlink" title="5. Cloud Router, Cloud NATの設定"></a>5. Cloud Router, Cloud NATの設定</h3><p>ミドルウェアの設定を行う前にWebサーバーから<code>apt-get</code>コマンドを実行できるようにCloud RouterとCloud NATを設定します。<br>Cloud Routerはハンバーガーメニューの[ハイブリッド接続]&gt;[クラウドルーター]を選択し、作成します。</p><ul><li>名前：seoul-router</li><li>ネットワーク：sample-network</li><li>リージョン：asia-northeast3</li></ul><p>他はデフォルトのままで大丈夫です。作成ボタンを押してしばらく待つと出来上がります。<br>次にCloud NATを作ります。ハンバーガーメニューの[ネットワークサービス]&gt;[Cloud NAT]に入り、作成します。</p><ul><li>名前：seoul-nat</li><li>VPCネットワーク：sample-network</li><li>リージョン：asia-northeast3</li><li>クラウドルーター：seoul-router</li></ul><p>こちらも他はデフォルトのまま作成すれば出来上がります。次はいよいよミドルウェアの設定をしましょう。</p><h2 id="6-ミドルウェアの設定"><a href="#6-ミドルウェアの設定" class="headerlink" title="6.ミドルウェアの設定"></a>6.ミドルウェアの設定</h2><p>ここからは<code>web-instance</code>の設定をしていきましょう。操作するとき、ローカルPCに色々設定を入れて行うのもいいのですが、GCPにはCloud Shellというものが用意されているので、使っていきましょう。コンソールのヘッダーにあるので有効化して操作できるようにしましょう。また、このCloud Shellはユーザーに紐づくので、プロジェクトを横断して使うことになります。<br><img src="/images/20200602/photo_20200602_08.png"></p><p>Cloud Shellに入って、以下のコマンドを実行して、踏み台サーバーに入りましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud compute ssh bastion --project [PROJECT_ID] --zone asia-northeast1<span class="_">-a</span></span><br></pre></td></tr></table></figure><p>途中キーペアの作成を行いますが、聞かれている内容そのまま答えていけば問題ありません。sshできたら<code>uname -a</code>コマンドで踏み台サーバーにいるか確認しましょう。<br>踏み台に入れたら次はwebサーバーへのsshのコマンドで行います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud compute ssh web-instance --project [PROJECT_ID] --zone asia-northeast3<span class="_">-a</span> --internal-ip</span><br></pre></td></tr></table></figure><p>今度は引数に<code>--internal-ip</code>と入れましたが、これは<code>web-instance</code>に内部IPしかついていないためオプションとして付けています。また、<code>uname -a</code>で踏み台に入れいているか確認ができたら、以下のコマンドでNginxをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span><br><span class="line">$ systemctl status nginx <span class="comment"># Nginxが起動しているか確認する</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> nginx <span class="comment"># インスタンス再起動後にNginxも自動起動するよう設定</span></span><br></pre></td></tr></table></figure><p>ここまでできたら、ロードバランサに付与されている外部IPをブラウザで実行してください。<br><img src="/images/20200602/lb.png" style="border:solid 1px #000000"></p><p>ブラウザからこちらのNginxの画面が見えたらここまでの操作がうまくいっています。あとは好きなアプリケーションを載せましょう！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回はGCPのIaaSであるCompute Engineを使って作成を行いました。GCPならではの強みはいくつかあり</p><ul><li>サブネットはリージョン単位で設定が可能<ul><li>ゾーンごと細かく設定しなくて良い</li></ul></li><li>ロードバランサはグローバルアクセスが可能<ul><li>バックエンドを別のリージョンのインスタンスも設定できる</li></ul></li><li>Cloud Shellを使って簡単にCUI環境を得ることができる。</li></ul><p>など、GCPを使うことのメリットはたくさんあります。<br>これを読んで試したい！という方は、是非アカウントを作成して、こちら試してみてください。お金がかかるのでは？と思う人がいると思いますが、アカウントを初回登録してから1年間有効な$300のクレジットがあるので、それを使い切るまでは課金されませんので安心してお試しください！</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200602/top.jpg&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/dendoktoor-14802912/?utm_source=link-
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="introductory" scheme="https://future-architect.github.io/tags/introductory/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #01 Goのテストに入門してみよう！</title>
    <link href="https://future-architect.github.io/articles/20200601/"/>
    <id>https://future-architect.github.io/articles/20200601/</id>
    <published>2020-06-01T00:41:23.000Z</published>
    <updated>2020-06-03T02:46:20.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG の辻です。<a href="/articles/20200529/">今回は春の入門祭り🌸</a>ということで Go のテストに入門してみよう！という記事です。</p><p>書いた背景ですが Go の標準ライブラリのコードリーディング会で <code>testing</code> パッケージにチャレンジしてみましたが、難しすぎてわからん。そもそも Go のテストって何ができるんだっけ？という話になり、基本的な内容をなるべく具体例をまじえながらまとめました。</p><p>ざっとどんなことができるんだろう、という index になれば幸いです。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>Go に組み込まれているテストの仕組みの中に、ベンチマークに関するテストと Example テストというサンプルコード用のテストも含まれているのですが、この 2 つは対象外にします。基礎的と思われる内容から順に並べてみました。</p><ul><li><a href="#はじめに">はじめに</a></li><li><a href="#tips">Tips</a><ul><li><a href="#テストがしたい">テストがしたい</a></li><li><a href="#テストをスキップしたい">テストをスキップしたい</a></li><li><a href="#テストを並列に実施したい">テストを並列に実施したい</a></li><li><a href="#テストの前処理や後処理を実施したい">テストの前処理や後処理を実施したい</a></li><li><a href="#カバレッジを取得したい">カバレッジを取得したい</a></li><li><a href="#あるディレクトリ配下のテストをすべて実施したい">あるディレクトリ配下のテストをすべて実施したい</a></li><li><a href="#一部のテストのみ実施したい">一部のテストのみ実施したい</a></li><li><a href="#テストのキャッシュを削除したい">テストのキャッシュを削除したい</a></li><li><a href="#テストコードの雛形を楽に作りたい">テストコードの雛形を楽に作りたい</a></li><li><a href="#構造体マップやスライスの比較を実施したい">構造体、マップやスライスの比較を実施したい</a></li><li><a href="#apiサーバにアクセスするテストをしたい">APIサーバにアクセスするテストをしたい</a></li><li><a href="#apiサーバのハンドラのテストをしたい">APIサーバのハンドラのテストをしたい</a></li><li><a href="#データ競合をテストで検知したい">データ競合をテストで検知したい</a></li><li><a href="#テストデータを置いておきたい">テストデータを置いておきたい</a></li><li><a href="#テストにヘルパー関数を使いたい">テストにヘルパー関数を使いたい</a></li><li><a href="#ブラックボックステストをしたい">ブラックボックステストをしたい</a></li><li><a href="#用途単体インテグレーションなどによってテストを切り替えたい">用途(単体/インテグレーションなど)によってテストを切り替えたい</a></li><li><a href="#モックを使ってテストをしたい">モックを使ってテストをしたい</a></li><li><a href="#ゴルーチンリークを検出したい">ゴルーチンリークを検出したい</a></li></ul></li><li><a href="#まとめ">まとめ</a></li><li><a href="#参考資料">参考資料</a></li></ul><h2 id="テストがしたい"><a href="#テストがしたい" class="headerlink" title="テストがしたい"></a>テストがしたい</h2><p>Goのテストは <code>go test</code> コマンドを用いてテストを実施します。テストを実施する関数の命名は以下のような形式でなければなりません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestXxx</span><span class="params">(*testing.T)</span></span></span><br></pre></td></tr></table></figure><p><code>TestXxx</code> は <code>Testxxx</code> ではダメです。<code>Test_xxx</code> という関数名であれば問題ありません。</p><p>テストファイルは <code>xxxx_test.go</code> といった命名である必要があります。このファイルはビルド時には除かれます。簡単なテストを試してみます。</p><figure class="highlight go"><figcaption><span>main_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="keyword">int</span></span><br><span class="line">b <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">args args</span><br><span class="line">want <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"normal"</span>,</span><br><span class="line">args: args&#123;a: <span class="number">1</span>, b: <span class="number">2</span>&#125;,</span><br><span class="line">want: <span class="number">3</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> got := add(tt.args.a, tt.args.b); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"add() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/XYrpmljtPrW" target="_blank" rel="noopener">https://play.golang.org/p/XYrpmljtPrW</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestAdd</span><br><span class="line">=== RUN   TestAdd/normal</span><br><span class="line">--- PASS: TestAdd (0.00s)</span><br><span class="line">    --- PASS: TestAdd/normal (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>上記のテストは TableDrivenTest とサブテストを組み合わせています。どちらも現場でよく使われます。サブテストを用いると各テストごとに結果がわかるようになります。 TableDrivenTest はさまざまな Input/Output パターンを網羅するのに便利です。上記のテストをシンプルに書き直すと以下のようになります。</p><ul><li><a href="https://github.com/golang/go/wiki/TableDrivenTests" target="_blank" rel="noopener">TableDrivenTests</a></li><li><a href="https://golang.org/pkg/testing/#T.Run" target="_blank" rel="noopener">T.Run</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> add(<span class="number">1</span>, <span class="number">2</span>) != <span class="number">3</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"add() = %v, want %v"</span>, add(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/-TQObdTOqPA" target="_blank" rel="noopener">https://play.golang.org/p/-TQObdTOqPA</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestAdd</span><br><span class="line">--- PASS: TestAdd (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><h2 id="テストをスキップしたい"><a href="#テストをスキップしたい" class="headerlink" title="テストをスキップしたい"></a>テストをスキップしたい</h2><p>時間がかかるテストなど、自動テストなどではテストをスキップしたい場合があるかもしれません。次のようなある条件の場合は処理にめちゃくちゃ時間がかかる例を考えてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">365</span> * <span class="number">24</span> * time.Hour)</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このテストをスキップしたいとします。その場合は <code>func (c *T) Skip(args ...interface{})</code> というメソッドを用いることでスキップできます。</p><p>テストコードに以下を追加します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">b: <span class="number">2</span>,</span><br><span class="line">&#125;,</span><br><span class="line">want: <span class="number">3</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 以下を追加</span></span><br><span class="line"><span class="comment">// ---------------------------------</span></span><br><span class="line"><span class="keyword">if</span> testing.Short() &#123;</span><br><span class="line">t.Skip(<span class="string">"skipping test in short mode."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------------------------------</span></span><br><span class="line"><span class="keyword">if</span> got := add(tt.args.a, tt.args.b); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"add() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ go test -v -short</span><br><span class="line">=== RUN   Test_add</span><br><span class="line">=== RUN   Test_add/normal_1</span><br><span class="line">--- PASS: Test_add (0.00s)</span><br><span class="line">    --- SKIP: Test_add/normal_1 (0.00s)</span><br><span class="line">        main_test.go:35: skipping test in short mode.</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/go-sandbox   0.339s</span><br></pre></td></tr></table></figure><p>テストがスキップされていることが分かります。さらっと <code>testing.Short()</code> という関数も用いましたが <a href="https://golang.org/pkg/testing/#Short" target="_blank" rel="noopener"><code>Short()</code></a> は <code>testing</code> パッケージに含まれている関数で、<code>-short</code> フラグがセットされていると true になります。そのためテストを実施するときに <code>-short</code> というフラグを付与したときだけテストがスキップされる、そうでないときはスキップされずテストが実施される、というように使い分けることができます。</p><p>標準パッケージでもテストのスキップが実装されているのを色々見ることができます。以下は <a href="https://github.com/golang/go/blob/master/src/io/ioutil/ioutil_test.go#L68-L71" target="_blank" rel="noopener"><code>io/ioutil/ioutil_test.go</code></a> からの抜粋です。特定の条件を満たす場合にテストをスキップするように実装されています。</p><figure class="highlight go"><figcaption><span>io/ioutil/ioutil_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReadOnlyWriteFile</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> os.Getuid() == <span class="number">0</span> &#123;</span><br><span class="line">t.Skipf(<span class="string">"Root can write to read-only files anyway, so skip the read-only test."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="テストを並列に実施したい"><a href="#テストを並列に実施したい" class="headerlink" title="テストを並列に実施したい"></a>テストを並列に実施したい</h2><p>以下のような謎に sleep する実装があるとします。テストを並列に実施したいとします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">time.Sleep(time.Duration(a+b) * time.Second)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>並列化せず、逐次サブテストを実施すると 3 + 5 + 7 = 15 から約 15 秒テスト実施に時間がかかります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_add</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="keyword">int</span></span><br><span class="line">b <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">args args</span><br><span class="line">want <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="string">"normal_1"</span>, args&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="string">"normal_2"</span>, args&#123;<span class="number">2</span>, <span class="number">3</span>&#125;, <span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="string">"normal_3"</span>, args&#123;<span class="number">3</span>, <span class="number">4</span>&#125;, <span class="number">7</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> got := add(tt.args.a, tt.args.b); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"add() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   Test_add</span><br><span class="line">=== RUN   Test_add/normal_1</span><br><span class="line">=== RUN   Test_add/normal_2</span><br><span class="line">=== RUN   Test_add/normal_3</span><br><span class="line">--- PASS: Test_add (15.01s)</span><br><span class="line">    --- PASS: Test_add/normal_1 (3.00s)</span><br><span class="line">    --- PASS: Test_add/normal_2 (5.00s)</span><br><span class="line">    --- PASS: Test_add/normal_3 (7.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/go-sandbox   15.315s</span><br></pre></td></tr></table></figure><p>並列にテストを実施するには <code>func (t *T) Parallel()</code> メソッドを用いることができます。上記のテストに <code>tt := tt</code> と <code>t.Parallel()</code> を追記します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line"><span class="comment">// 以下を追加</span></span><br><span class="line"><span class="comment">// ---------</span></span><br><span class="line">tt := tt</span><br><span class="line"><span class="comment">// ---------</span></span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 以下を追加</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="keyword">if</span> got := add(tt.args.a, tt.args.b); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"add() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の実装を用いてテストをします。するとテストが並列に実施されていることが分かります。結果としてテストにかかった時間は約 7 秒になりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   Test_add</span><br><span class="line">=== RUN   Test_add/normal_1</span><br><span class="line">=== PAUSE Test_add/normal_1</span><br><span class="line">=== RUN   Test_add/normal_2</span><br><span class="line">=== PAUSE Test_add/normal_2</span><br><span class="line">=== RUN   Test_add/normal_3</span><br><span class="line">=== PAUSE Test_add/normal_3</span><br><span class="line">=== CONT  Test_add/normal_1</span><br><span class="line">=== CONT  Test_add/normal_3</span><br><span class="line">=== CONT  Test_add/normal_2</span><br><span class="line">--- PASS: Test_add (0.00s)</span><br><span class="line">    --- PASS: Test_add/normal_1 (3.00s)</span><br><span class="line">    --- PASS: Test_add/normal_2 (5.00s)</span><br><span class="line">    --- PASS: Test_add/normal_3 (7.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/go-sandbox   7.317s</span><br></pre></td></tr></table></figure><p>ループ時に割り当てているローカル変数 <code>tt</code> を捕捉することは重要です。Go ではループで用いられる変数は同じアドレスを使います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b := []<span class="keyword">byte</span>(<span class="string">"abcde"</span>)</span><br><span class="line"><span class="keyword">for</span> i, c := <span class="keyword">range</span> b &#123;</span><br><span class="line">fmt.Printf(<span class="string">"i: %#v, c: %#v ------- &amp;i: %#v, &amp;c: %#v\n"</span>, i, <span class="keyword">string</span>(c), &amp;i, &amp;c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 変数のアドレスがすべて同じアドレスを参照している</span><br><span class="line">i: 0, c: <span class="string">"a"</span> ------- &amp;i: (*int)(0x40e020), &amp;c: (*uint8)(0x40e024)</span><br><span class="line">i: 1, c: <span class="string">"b"</span> ------- &amp;i: (*int)(0x40e020), &amp;c: (*uint8)(0x40e024)</span><br><span class="line">i: 2, c: <span class="string">"c"</span> ------- &amp;i: (*int)(0x40e020), &amp;c: (*uint8)(0x40e024)</span><br><span class="line">i: 3, c: <span class="string">"d"</span> ------- &amp;i: (*int)(0x40e020), &amp;c: (*uint8)(0x40e024)</span><br><span class="line">i: 4, c: <span class="string">"e"</span> ------- &amp;i: (*int)(0x40e020), &amp;c: (*uint8)(0x40e024)</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/_tSALjq8yZ6" target="_blank" rel="noopener">https://play.golang.org/p/_tSALjq8yZ6</a></p><p>そのため、テストを並列に実行するときは <code>tt := tt</code> などとして変数をシャドウイングし、並列で実行しているテストに影響がないようにする必要があります。</p><p>ただし、テストケース自体がそもそも並列に実行できない場合、例えばデータベース上のテーブルへの UPDATE や INSERT が発生し、テストケースで競合する場合、テストを並列に実行することはできないため、注意が必要です。</p><h2 id="テストの前処理や後処理を実施したい"><a href="#テストの前処理や後処理を実施したい" class="headerlink" title="テストの前処理や後処理を実施したい"></a>テストの前処理や後処理を実施したい</h2><p>テストをしていると、前処理や後処理をしたい場合があると思います。主な例の 1 つとしてデータベースの処理化があるでしょう。テストを実施する前処理としてあるデータを INSERT しておいて、テスト実施後に対象のテーブルのデータを削除する、といったものです。</p><p>そのような共通的な前処理や後処理を実施したい場合は </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span></span><br></pre></td></tr></table></figure><p>関数を用いることができます。</p><p>例を見てみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"なんらかの処理"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のように <code>TestMain</code> を用いてテストを制御するとテストの前後(今回の場合は <code>f()</code> の前後)に処理を実行できます。<code>m.Run()</code> の実行結果を取得して <code>os.Exit()</code> するのが慣用的です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_f</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"前処理"</span>)</span><br><span class="line">status := m.Run()</span><br><span class="line">    fmt.Println(<span class="string">"後処理"</span>)</span><br><span class="line">    </span><br><span class="line">    os.Exit(status)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span></span><br><span class="line">前処理</span><br><span class="line">なんらかの処理</span><br><span class="line">PASS</span><br><span class="line">後処理</span><br><span class="line">ok      github.com/d-tsuji/go-sandbox   0.298s</span><br></pre></td></tr></table></figure><p>参考までに <code>google/trillian</code> という OSS で <code>TestMain</code> がどのように使われているか確認してみます。以下はテスト用のデータベースを <code>openTestDBOrDie()</code> として作成し、テスト終了後に <code>done(context.Background())</code> という処理を実施しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> !testdb.PGAvailable() &#123;</span><br><span class="line">glog.Errorf(<span class="string">"PG not available, skipping all PG storage tests"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> done <span class="function"><span class="keyword">func</span><span class="params">(context.Context)</span></span></span><br><span class="line"><span class="function"><span class="title">db</span>, <span class="title">done</span> = <span class="title">openTestDBOrDie</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">status</span> := <span class="title">m</span>.<span class="title">Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">done</span><span class="params">(context.Background()</span>)</span></span><br><span class="line"><span class="function"><span class="title">os</span>.<span class="title">Exit</span><span class="params">(status)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/google/trillian/blob/master/storage/postgres/storage_test.go#L168-L181" target="_blank" rel="noopener">https://github.com/google/trillian/blob/master/storage/postgres/storage_test.go#L168-L181</a></p><ul><li><strong>後処理には <code>T.Cleanup</code> が便利</strong></li></ul><p>Go1.14 でテスト時に生成したリソースを便利に後処理できる関数が登場しました。<a href="https://golang.org/pkg/testing/#T.Cleanup" target="_blank" rel="noopener">T.Cleanup</a> です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *T)</span> <span class="title">Cleanup</span><span class="params">(f <span class="keyword">func</span>()</span>)</span></span><br></pre></td></tr></table></figure><p>リソースの後処理という意味では <code>defer</code> を用いてクリーンアップできるので、今までとあまり変わらないのでは？と思うかもしれません。<code>T.Cleanup</code> を便利に使えることが実感できるシーンの 1 つとして、テストに必要な前処理をテストとは別の関数で実施している場合があります。</p><p>簡単な例ですが、テストの前準備としてテスト用のファイルを生成する必要があったとして、テスト終了後に削除したい場合、以下のような実装が考えられます。TempFile 関数ではリソースをクローズする処理を呼び出し元に返却する必要があり、呼び出し元で後処理として teardown 関数を呼び出すことになります。</p><figure class="highlight go"><figcaption><span>testutil/file.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TempFile</span><span class="params">(t *testing.T, content []<span class="keyword">byte</span>)</span> <span class="params">(name <span class="keyword">string</span>, teardown <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">file, err := ioutil.TempFile(<span class="string">""</span>, <span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = ioutil.WriteFile(file.Name(), content, <span class="number">0644</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> file.Name(), <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">syscall.Unlink(file.Name())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呼び出し元の処理です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file, <span class="built_in">delete</span> := testutil.TempFile(t, <span class="literal">nil</span> <span class="comment">/* something */</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">delete</span>()</span><br></pre></td></tr></table></figure><p><code>T.Cleanup</code> を用いると前処理を実施する関数内でリソースの後処理が実施できるようになります。TempFile 関数の例であれば、以下のように <code>t.Cleanup</code> を用いることができます。関数から return したタイミングで呼び出される <code>defer</code> とは異なり、テストが完了したタイミングで Cleanup 処理が呼び出されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TempFile</span><span class="params">(t *testing.T, content []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">file, err := ioutil.TempFile(<span class="string">""</span>, <span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line">t.Cleanup(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; syscall.Unlink(file.Name()) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = ioutil.WriteFile(file.Name(), content, <span class="number">0644</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> file.Name()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ファイルでなくても、テスト用のデータベースや HTTP サーバの teardown など、テストに必要なリソースの teardown 処理を同じ関数内に記述することができ、テストコードが簡潔になります。</p><h2 id="カバレッジを取得したい"><a href="#カバレッジを取得したい" class="headerlink" title="カバレッジを取得したい"></a>カバレッジを取得したい</h2><p>標準パッケージのカバレッジを取得してみます。今回は <code>io</code> パッケージ( <code>ioutil</code> も含む)のテストのカバレッジを取得することにします。カバレッジは <code>go test</code> コマンドの引数として <code>-covermode=count</code> を付与すれば取得できます。 <code>-coverprofile=c.out</code> で結果をファイルに保存します。</p><p>Go のコードは <code>/Go/src</code> にあるものとします。以下のコマンドを実行してカバレッジを取得します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> io/... -covermode=count -coverprofile=c.out</span><br><span class="line">ok      io      0.620s  coverage: 95.2% of statements</span><br><span class="line">ok      io/ioutil       0.311s  coverage: 68.9% of statements</span><br></pre></td></tr></table></figure><p>以下のコマンドで上記の出力ファイルを簡単に HTML で可視化できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go tool cover -html=c.out -o coverage.html</span><br></pre></td></tr></table></figure><p>このような感じでどのパスが通っていないか確認できます。</p><img src="/images/20200601/photo_20200601_01.png"><h2 id="あるディレクトリ配下のテストをすべて実施したい"><a href="#あるディレクトリ配下のテストをすべて実施したい" class="headerlink" title="あるディレクトリ配下のテストをすべて実施したい"></a>あるディレクトリ配下のテストをすべて実施したい</h2><p>たとえば標準パッケージの例だと、<code>io</code> パッケージはテスト対象に含めるが、その他のパッケージはテスト対象に含めない…といった要領です。これはテストのコマンドというよりはパッケージのコマンドになります。以下のように <code>...</code> の文字列を用いてワイルドカードとしてテスト対象のファイルを選択できます。詳細は <code>go help packages</code> とすることで確認できます。</p><p>以下の場合は <code>io</code> パッケージに含まれるすべてのテストを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> io/...</span><br></pre></td></tr></table></figure><p>同様に <code>io</code> パッケージに含まれる <code>ioutil</code> パッケージのみテストしたい場合は以下のようになります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v io/ioutil/...</span><br><span class="line">=== RUN   TestReadFile</span><br><span class="line">--- PASS: TestReadFile (0.00s)</span><br><span class="line">=== RUN   TestWriteFile</span><br><span class="line">--- PASS: TestWriteFile (0.00s)</span><br><span class="line">=== RUN   TestReadDir</span><br><span class="line">--- PASS: TestReadDir (0.00s)</span><br><span class="line">=== RUN   TestTempFile</span><br><span class="line">--- PASS: TestTempFile (0.00s)</span><br><span class="line">=== RUN   TestTempFile_pattern</span><br><span class="line">--- PASS: TestTempFile_pattern (0.00s)</span><br><span class="line">=== RUN   TestTempDir</span><br><span class="line">--- PASS: TestTempDir (0.00s)</span><br><span class="line">=== RUN   TestTempDir_BadDir</span><br><span class="line">--- PASS: TestTempDir_BadDir (0.00s)</span><br><span class="line">=== RUN   ExampleReadAll</span><br><span class="line">--- PASS: ExampleReadAll (0.00s)</span><br><span class="line">=== RUN   ExampleReadFile</span><br><span class="line">--- PASS: ExampleReadFile (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      io/ioutil       0.342s</span><br></pre></td></tr></table></figure><h2 id="一部のテストのみ実施したい"><a href="#一部のテストのみ実施したい" class="headerlink" title="一部のテストのみ実施したい"></a>一部のテストのみ実施したい</h2><p>実行対象のテストを抽出するには <code>-run</code> フラグを用いることできます。以下のように正規表現を用いて、一致するテストのみを実行できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-run regexp</span><br></pre></td></tr></table></figure><p>例えば <code>io</code> パッケージで Pipe に関するテストのみ実行したいとしましょう。Pipe に関するテストはテスト関数に <code>Pipe</code> の文字列が含まれるものとします。以下のように実行するとテストの関数名に <code>Pipe</code> が含まれるテストのみ実行されていることが分かります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -v io/... -run Pipe</span><br><span class="line">=== RUN   TestPipe1</span><br><span class="line">--- PASS: TestPipe1 (0.00s)</span><br><span class="line">=== RUN   TestPipe2</span><br><span class="line">--- PASS: TestPipe2 (0.00s)</span><br><span class="line">=== RUN   TestPipe3</span><br><span class="line">--- PASS: TestPipe3 (0.00s)</span><br><span class="line">=== RUN   TestPipeReadClose</span><br><span class="line">--- PASS: TestPipeReadClose (0.01s)</span><br><span class="line">=== RUN   TestPipeReadClose2</span><br><span class="line">--- PASS: TestPipeReadClose2 (0.00s)</span><br><span class="line">=== RUN   TestPipeWriteClose</span><br><span class="line">--- PASS: TestPipeWriteClose (0.01s)</span><br><span class="line">=== RUN   TestPipeWriteClose2</span><br><span class="line">--- PASS: TestPipeWriteClose2 (0.00s)</span><br><span class="line">=== RUN   TestPipeCloseError</span><br><span class="line">--- PASS: TestPipeCloseError (0.00s)</span><br><span class="line">=== RUN   TestPipeConcurrent</span><br><span class="line">=== RUN   TestPipeConcurrent/Write</span><br><span class="line">=== RUN   TestPipeConcurrent/Read</span><br><span class="line">--- PASS: TestPipeConcurrent (0.00s)</span><br><span class="line">    --- PASS: TestPipeConcurrent/Write (0.00s)</span><br><span class="line">    --- PASS: TestPipeConcurrent/Read (0.00s)</span><br><span class="line">=== RUN   ExamplePipe</span><br><span class="line">--- PASS: ExamplePipe (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      io      0.345s</span><br><span class="line">testing: warning: no tests to run</span><br><span class="line">PASS</span><br><span class="line">ok      io/ioutil       0.575s [no tests to run]</span><br></pre></td></tr></table></figure><h2 id="テストのキャッシュを削除したい"><a href="#テストのキャッシュを削除したい" class="headerlink" title="テストのキャッシュを削除したい"></a>テストのキャッシュを削除したい</h2><p>Go でテストをしていると以下のように <code>cached</code> の文字列を見ることがあると思います。テストのキャッシュを削除するにはどのようにすれば良いでしょうか。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> io/... -run Pipe</span><br><span class="line">ok      io      (cached)</span><br><span class="line">ok      io/ioutil       (cached) [no tests to run]</span><br></pre></td></tr></table></figure><p>テストのキャッシュは Go1.10 から組み込まれました。テストのキャッシュの詳細は <a href="https://golang.org/doc/go1.10#test" target="_blank" rel="noopener">go1.10#test</a> が詳しいです。キャッシュ使わない場合はを明示的に <code>-count=1</code> と指定すればよいです。<code>-count=1</code> と明示的に指定するとテストはキャッシュされなくなります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> test io/... -run Pipe -count=<span class="number">1</span></span><br><span class="line">ok      io      <span class="number">0.304s</span></span><br><span class="line">ok      io/ioutil       <span class="number">0.563s</span> [no tests to run]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> test io/... -run Pipe -count=<span class="number">1</span></span><br><span class="line">ok      io      <span class="number">0.314s</span></span><br><span class="line">ok      io/ioutil       <span class="number">0.576s</span> [no tests to run]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> test io/... -run Pipe -count=<span class="number">1</span></span><br><span class="line">ok      io      <span class="number">0.321s</span></span><br><span class="line">ok      io/ioutil       <span class="number">0.575s</span> [no tests to run]</span><br></pre></td></tr></table></figure><p>また <code>go clean -cache</code> を用いてもビルドキャッシュ全体を削除することができ、テストのキャッシュも削除できます。</p><h2 id="テストコードの雛形を楽に作りたい"><a href="#テストコードの雛形を楽に作りたい" class="headerlink" title="テストコードの雛形を楽に作りたい"></a>テストコードの雛形を楽に作りたい</h2><p>Tips ですが IDE などの機能を使うと少し便利になるかもしれません。例えば GoLand の機能を用いるとデフォルトで TableDrivenTest の雛形を生成してくれます。詳細は割愛しますが VS Code を用いて開発する場合でも同様に雛形を生成できます。</p><img src="/images/20200601/photo_20200601_02.gif"><h2 id="構造体、マップやスライスの比較を実施したい"><a href="#構造体、マップやスライスの比較を実施したい" class="headerlink" title="構造体、マップやスライスの比較を実施したい"></a>構造体、マップやスライスの比較を実施したい</h2><p><code>map</code> のキーと値が一致しているかどうか確認するようなテストがしたいとしましょう。<code>map</code> や <code>slice</code> は <a href="https://golang.org/ref/pec#Comparison_operators" target="_blank" rel="noopener">spec#Comparison_operators</a> にもあるように比較演算子を用いて比較することができません。<code>map</code> に含まれるキーと値が同じものを含んでいるかどうかはループを回して確認しないといけないのでしょうか。</p><p><code>reflect</code> パッケージに含まれる <a href="https://golang.org/pkg/reflect/#DeepEqual" target="_blank" rel="noopener"><code>reflect.DeepEqual</code></a> を用いると map のような比較演算子で比較できないオブジェクトの比較ができます。</p><p><code>net/http</code> パッケージにある <code>request_test.go</code> の中でクエリパラメータなどに用いられる <code>map</code> (<code>map[string][]string</code> 型)は以下のように比較して同値かどうかテストしています。</p><figure class="highlight go"><figcaption><span>net/http/request_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wantForm := url.Values&#123;</span><br><span class="line"><span class="string">"language"</span>: []<span class="keyword">string</span>&#123;<span class="string">"Go"</span>&#125;,</span><br><span class="line"><span class="string">"name"</span>:     []<span class="keyword">string</span>&#123;<span class="string">"gopher"</span>&#125;,</span><br><span class="line"><span class="string">"skill"</span>:    []<span class="keyword">string</span>&#123;<span class="string">"go-ing"</span>&#125;,</span><br><span class="line"><span class="string">"field1"</span>:   []<span class="keyword">string</span>&#123;<span class="string">"value1"</span>&#125;,</span><br><span class="line"><span class="string">"field2"</span>:   []<span class="keyword">string</span>&#123;<span class="string">"initial-value2"</span>, <span class="string">"value2"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !reflect.DeepEqual(req.Form, wantForm) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"req.Form = %v, want %v"</span>, req.Form, wantForm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/blob/master/src/net/http/request_test.go#L210-L219" target="_blank" rel="noopener">https://github.com/golang/go/blob/master/src/net/http/request_test.go#L210-L219</a></p><p>Go は言語自体にテスティングフレームワークを提供してません。<a href="https://golang.org/doc/faq#testing_framework" target="_blank" rel="noopener">Where is my favorite helper function for testing?</a> に理由が記載されていますが、端的に言うと開発者が適切にエラーハンドリングすることと適切なエラーメッセージの出力を実装することが重要であるためです。</p><p>とはいえ薄い便利なツールを使いたくなるシチュエーションはあるのではないでしょうか。<code>reflect.DeepEqual</code> を使った同値チェックは <a href="https://github.com/google/go-cmp" target="_blank" rel="noopener">google/go-cmp</a> を使うとより便利にテストができるので、私は <code>reflect.DeepEqual</code> の代わりとして <code>google/go-cmp</code> を用いることが多いです。</p><p><code>go-cmp</code> のリポジトリにある構造体を比較するサンプルの例を見てみます。以下のような <code>net.IP</code> 型や <code>time.Time</code> 型をフィールドに持つ構造体の比較です。</p><figure class="highlight go"><figcaption><span>example_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> (</span><br><span class="line">Gateway <span class="keyword">struct</span> &#123;</span><br><span class="line">SSID      <span class="keyword">string</span></span><br><span class="line">IPAddress net.IP</span><br><span class="line">NetMask   net.IPMask</span><br><span class="line">Clients   []Client</span><br><span class="line">&#125;</span><br><span class="line">Client <span class="keyword">struct</span> &#123;</span><br><span class="line">Hostname  <span class="keyword">string</span></span><br><span class="line">IPAddress net.IP</span><br><span class="line">LastSeen  time.Time</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeGatewayInfo</span><span class="params">()</span> <span class="params">(x, y Gateway)</span></span> &#123;</span><br><span class="line">x = Gateway&#123;</span><br><span class="line">SSID:      <span class="string">"CoffeeShopWiFi"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">NetMask:   net.IPv4Mask(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">Clients: []Client&#123;&#123;</span><br><span class="line">Hostname:  <span class="string">"ristretto"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">116</span>),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"aribica"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">104</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"macchiato"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">153</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">43</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"espresso"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">121</span>),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"latte"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">219</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"americano"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">188</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">y = Gateway&#123;</span><br><span class="line">SSID:      <span class="string">"CoffeeShopWiFi"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">NetMask:   net.IPv4Mask(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">Clients: []Client&#123;&#123;</span><br><span class="line">Hostname:  <span class="string">"ristretto"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">116</span>),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"aribica"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">104</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"macchiato"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">153</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">43</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"espresso"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">121</span>),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"latte"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">221</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x, y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この構造体が同値かどうかテストしてみます。上記の実装の通り <code>MakeGatewayInfo</code> は異なる 2 つの変数 <code>x</code> と <code>y</code> を返す関数です。これを <code>go-cmp</code> と <code>reflect.DeepEqual</code> のそれぞれを用いて比較してみます。</p><figure class="highlight go"><figcaption><span>example_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMakeGatewayInfoDeepEqual</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got, want := MakeGatewayInfo()</span><br><span class="line"><span class="keyword">if</span> !reflect.DeepEqual(got, want) &#123;</span><br><span class="line">t.Errorf(<span class="string">"MakeGatewayInfo() got = %v, want %v"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMakeGatewayInfoGoCmp</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got, want := MakeGatewayInfo()</span><br><span class="line"><span class="keyword">if</span> diff := cmp.Diff(want, got); diff != <span class="string">""</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"MakeGatewayInfo() mismatch (-want +got):\n%s"</span>, diff)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると以下のような結果を得ることができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> example_test.go</span><br><span class="line">--- FAIL: TestMakeGatewayInfoDeepEqual (0.00s)</span><br><span class="line">    example_test.go:15: MakeGatewayInfo() got = &#123;CoffeeShopWiFi 192.168.0.1 ffff0000 [&#123;ristretto 192.168.0.116 0001-01-01 00:00:00 +0000 UTC&#125; &#123;aribica 192.168.0.104 2009-11-10 23:06:32 +0000 UTC&#125; &#123;macchiato 192.168.0.153 2009-11-10 23:39:43 +0000 UTC&#125; &#123;espresso 192</span><br><span class="line">.168.0.121 0001-01-01 00:00:00 +0000 UTC&#125; &#123;latte 192.168.0.219 2009-11-10 23:00:23 +0000 UTC&#125; &#123;americano 192.168.0.188 2009-11-10 23:03:05 +0000 UTC&#125;]&#125;, want &#123;CoffeeShopWiFi 192.168.0.2 ffff0000 [&#123;ristretto 192.168.0.116 0001-01-01 00:00:00 +0000 UTC&#125; &#123;aribica 192.</span><br><span class="line">168.0.104 2009-11-10 23:06:32 +0000 UTC&#125; &#123;macchiato 192.168.0.153 2009-11-10 23:39:43 +0000 UTC&#125; &#123;espresso 192.168.0.121 0001-01-01 00:00:00 +0000 UTC&#125; &#123;latte 192.168.0.221 2009-11-10 23:00:23 +0000 UTC&#125;]&#125;</span><br><span class="line">--- FAIL: TestMakeGatewayInfoGoCmp (0.00s)</span><br><span class="line">    example_test.go:22: MakeGatewayInfo() mismatch (-want +got):</span><br><span class="line">        &#123;t.Gateway&#125;.IPAddress:</span><br><span class="line">                -: s<span class="string">"192.168.0.2"</span></span><br><span class="line">                +: s<span class="string">"192.168.0.1"</span></span><br><span class="line">        &#123;t.Gateway&#125;.Clients[4].IPAddress:</span><br><span class="line">                -: s<span class="string">"192.168.0.221"</span></span><br><span class="line">                +: s<span class="string">"192.168.0.219"</span></span><br><span class="line">        &#123;t.Gateway&#125;.Clients[?-&gt;5]:</span><br><span class="line">                -: &lt;non-existent&gt;</span><br><span class="line">                +: t.Client&#123;Hostname: <span class="string">"americano"</span>, IPAddress: s<span class="string">"192.168.0.188"</span>, LastSeen: s<span class="string">"2009-11-10 23:03:05 +0000 UTC"</span>&#125;</span><br><span class="line">FAIL</span><br><span class="line">FAIL    <span class="built_in">command</span>-line-arguments  0.304s</span><br><span class="line">FAIL</span><br></pre></td></tr></table></figure><p><code>go-cmp</code> の結果は何が同値で、何が同値でなかったか、同値でなかったときは取得した値と想定する値は何か明示的にわかるのがよいです。他にもオプションで条件をカスタマイズできます。(やりすぎ注意)</p><p>社内でも <a href="https://github.com/stretchr/testify/tree/master/assert" target="_blank" rel="noopener"><code>stretchr/testify/assert</code></a> を使う勢なども見かけます。Go のテスティングフレームに関する話は好みが分かれるところだと思うので、深くは触れません。</p><h2 id="APIサーバにアクセスするテストをしたい"><a href="#APIサーバにアクセスするテストをしたい" class="headerlink" title="APIサーバにアクセスするテストをしたい"></a>APIサーバにアクセスするテストをしたい</h2><p><code>net/http/httptest</code> を用いると簡単にテスト用のモックサーバをたてることができます。リクエストに対して <code>Hello, client</code> というレスポンスを返却する API を用いた、API クライアントの視点で単体テストを実施する例を考えてみます。</p><p><code>httptest.NewServer</code> にハンドラを渡すことでハンドラの振る舞いをするローカルの HTTP サーバを提供してくれます。デフォルトだとこのテスト用の HTTP サーバは <code>127.0.0.1:0</code> で起動します。ポートが <code>0</code> にバインドされていますが、これは空いている任意ポートを割り当てます。なお、ブラウザからデバッグしたいなどの用途として <code>httptest.serve</code> フラグを渡すこともできます。<code>-httptest.serve=127.0.0.1:18888</code> などとしてフラグを指定した場合、HTTP サーバはブロックされます。</p><figure class="highlight go"><figcaption><span>x_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestX</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ts := httptest.NewServer(http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"Hello, client"</span>)</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">defer</span> ts.Close()</span><br><span class="line"></span><br><span class="line">res, err := http.Get(ts.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">got, err := ioutil.ReadAll(res.Body)</span><br><span class="line">res.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// API からのレスポンスを用いてなんならの処理をする</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"GET %s: expected status code = %d; got %d"</span>, ts.URL, <span class="number">200</span>, res.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(got) != <span class="string">"Hello, client\n"</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"expected body %v; got %v"</span>, <span class="string">"Hello, client"</span>, <span class="keyword">string</span>(got))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/i1Dz5alS4hQ" target="_blank" rel="noopener">https://play.golang.org/p/i1Dz5alS4hQ</a></p><p>実際にはテストで用いる構造体のフィールドに URL を保持できるようにして <code>httptest</code> で起動させたモックサーバの URL に切り替えるなどことが多いのではないか、と思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span> <span class="params">(client *Client, mux *http.ServeMux, serverURL <span class="keyword">string</span>, teardown <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">mux = http.NewServeMux()</span><br><span class="line"></span><br><span class="line">apiHandler := http.NewServeMux()</span><br><span class="line">apiHandler.Handle(baseURLPath+<span class="string">"/"</span>, http.StripPrefix(baseURLPath, mux))</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">server := httptest.NewServer(apiHandler)</span><br><span class="line"></span><br><span class="line">client = NewClient(<span class="literal">nil</span>)</span><br><span class="line">url, _ := url.Parse(server.URL + baseURLPath + <span class="string">"/"</span>)</span><br><span class="line">client.BaseURL = url</span><br><span class="line">client.UploadURL = url</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> client, mux, server.URL, server.Close</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/google/go-github/blob/master/github/github_test.go#L31-L64" target="_blank" rel="noopener">https://github.com/google/go-github/blob/master/github/github_test.go#L31-L64</a></p><h2 id="APIサーバのハンドラのテストをしたい"><a href="#APIサーバのハンドラのテストをしたい" class="headerlink" title="APIサーバのハンドラのテストをしたい"></a>APIサーバのハンドラのテストをしたい</h2><p>上記の「APIサーバにアクセスするテストをしたい」の項目では <code>httptest.NewServer</code> でモックサーバを立てて、API クライアントという視点でリクエストを発行してテストをしました。今度は API サーバを提供する視点から、ハンドラの単体テストを実施する場合を考えてみます。<a href="https://golang.org/pkg/net/http/httptest/#NewRequest" target="_blank" rel="noopener"><code>httptest.NewRequest</code></a> を用いると、ハンドラの単体テストを簡潔に実施できます。以下のようなハンドラを考えてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"hello world!"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このハンドラに対して GET リクエストしたときに <code>hello world!</code> というレスポンスが得られるかどうかテストします。<code>httptest.NewRequest</code> はテストのためのリクエストを生成するのに便利です。<code>httptest.NewRequest</code> で生成した <code>*http.Request</code> をハンドラに渡すことができます。また <code>httptest.NewRecorder()</code> で生成できる <code>*httptest.ResponseRecorder</code> を用いるとハンドラのレスポンスを記録できます。</p><p>これらを用いて、以下のようにハンドラから想定のレスポンスが得られるかどうかテストできます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloHandler</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">r := httptest.NewRequest(<span class="string">"GET"</span>, <span class="string">"/dummy"</span>, <span class="literal">nil</span>)</span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">helloHandler(w, r)</span><br><span class="line"></span><br><span class="line">resp := w.Result()</span><br><span class="line"></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"cannot read test response: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"got = %d, want = 200"</span>, resp.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(body) != <span class="string">"hello world!"</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"got = %s, want = hello world!"</span>, body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go test -v</span><br><span class="line">=== RUN   TestHelloHandler</span><br><span class="line">--- PASS: TestHelloHandler (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/go-sandbox/x 0.186s</span><br></pre></td></tr></table></figure><p><code>httptest.NewRequest()</code> や <code>httptest.NewRecorder()</code> を用いることで、<a href="https://echo.labstack.com/" target="_blank" rel="noopener">Echo</a> や <a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a> といった Web フレームワークを用いて構築しているハンドラも同様にテストできます。</p><p>ちなみにリクエストは <a href="https://golang.org/pkg/net/http/#NewRequestWithContext" target="_blank" rel="noopener"><code>http.NewRequestWithContext</code></a> (<a href="https://golang.org/pkg/net/http/#NewRequest" target="_blank" rel="noopener"><code>http.NewRequest</code></a>) でも生成できるのは？と思うかもしれません。何が異なるかというと、<code>httptest.NewRequest</code> は <code>http.Handler</code> に適しているリクエストを返却します。一方で <code>http.NewRequestWithContext</code> (<code>http.NewRequest</code>) は <code>Client.Do</code> や <code>Transport.RoundTrip</code> に適しているリクエストを返却します。そのため、単体テストの用途で直接ハンドラにリクエストを渡す場合は <code>httptest.NewRequest</code> を用いることになります。</p><h2 id="データ競合をテストで検知したい"><a href="#データ競合をテストで検知したい" class="headerlink" title="データ競合をテストで検知したい"></a>データ競合をテストで検知したい</h2><p>テストでレースコンディションを検知したい場合はどうすればよいでしょうか。レースコンディションが起きていないかどうか確認するのに <code>-race</code> フラグが役に立ちます。</p><p>公式の <a href="https://blog.golang.org/race-detector" target="_blank" rel="noopener">The Go Blog</a> の例を引用します。</p><figure class="highlight go"><figcaption><span>race_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFoo</span><span class="params">(te *testing.T)</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="keyword">var</span> t *time.Timer</span><br><span class="line">t = time.AfterFunc(randomDuration(), <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(time.Now().Sub(start))</span><br><span class="line">t.Reset(randomDuration())</span><br><span class="line">&#125;)</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomDuration</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Duration(rand.Int63n(<span class="number">1e9</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の実装は異なるゴルーチンから変数 <code>t</code> の読み書きをしていて、レースコンディションを引き起こします。これは <code>-race</code> をつけることで確認できます。<code>-race</code> は <code>go test</code> 以外にも以下のように使うことができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -race mypkg    // <span class="built_in">test</span> the package</span><br><span class="line">$ go run -race mysrc.go  // compile and run the program</span><br><span class="line">$ go build -race mycmd   // build the <span class="built_in">command</span></span><br><span class="line">$ go install -race mypkg // install the package</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&gt; go <span class="built_in">test</span> -v -race race_test.go</span><br><span class="line">=== RUN   TestFoo</span><br><span class="line">947.9969ms</span><br><span class="line">==================</span><br><span class="line">WARNING: DATA RACE</span><br><span class="line">Read at 0x00c00009a030 by goroutine 9:</span><br><span class="line">  <span class="built_in">command</span>-line-arguments.TestFoo.func1()</span><br><span class="line">      C:/Users/d-tsuji/go/src/github.com/d-tsuji/go-sandbox/race_test.go:15 +0x128</span><br><span class="line"></span><br><span class="line">Previous write at 0x00c00009a030 by goroutine 8:</span><br><span class="line">  <span class="built_in">command</span>-line-arguments.TestFoo()</span><br><span class="line">      C:/Users/d-tsuji/go/src/github.com/d-tsuji/go-sandbox/race_test.go:13 +0x194</span><br><span class="line">  testing.tRunner()</span><br><span class="line">      C:/Go/src/testing/testing.go:909 +0x1a0</span><br><span class="line"></span><br><span class="line">Goroutine 9 (running) created at:</span><br><span class="line">  time.goFunc()</span><br><span class="line">      C:/Go/src/time/sleep.go:168 +0x58</span><br><span class="line"></span><br><span class="line">Goroutine 8 (running) created at:</span><br><span class="line">  testing.(*T).Run()</span><br><span class="line">      C:/Go/src/testing/testing.go:960 +0x658</span><br><span class="line">  testing.runTests.func1()</span><br><span class="line">      C:/Go/src/testing/testing.go:1202 +0xad</span><br><span class="line">  testing.tRunner()</span><br><span class="line">      C:/Go/src/testing/testing.go:909 +0x1a0</span><br><span class="line">  testing.runTests()</span><br><span class="line">      C:/Go/src/testing/testing.go:1200 +0x528</span><br><span class="line">  testing.(*M).Run()</span><br><span class="line">      C:/Go/src/testing/testing.go:1117 +0x306</span><br><span class="line">  main.main()</span><br><span class="line">      _testmain.go:44 +0x22a</span><br><span class="line">==================</span><br><span class="line">1.0319969s</span><br><span class="line">1.6985715s</span><br><span class="line">1.9336667s</span><br><span class="line">2.22163s</span><br><span class="line">2.7717493s</span><br><span class="line">3.4048429s</span><br><span class="line">3.7370048s</span><br><span class="line">3.9208427s</span><br><span class="line">4.4012115s</span><br><span class="line">--- FAIL: TestFoo (5.00s)</span><br><span class="line">    testing.go:853: race detected during execution of <span class="built_in">test</span></span><br><span class="line">FAIL</span><br><span class="line">FAIL    <span class="built_in">command</span>-line-arguments  5.122s</span><br><span class="line">FAIL</span><br></pre></td></tr></table></figure><p>上記のようにレースコンディションが発生している場合は、テストが FAIL になります。</p><p><code>-race</code> をつけてテストすると多少実行に時間がかかりますが、想定しないレースコンディションが発生して、テストが FAIL になるとデバッグが大変です。テストの際にデフォルトで <code>-race</code> をつけておくのも一つの方法です。</p><h2 id="テストデータを置いておきたい"><a href="#テストデータを置いておきたい" class="headerlink" title="テストデータを置いておきたい"></a>テストデータを置いておきたい</h2><p>テストの Input や Output になるファイルを <code>testdata</code> という名前のディレクトリに置いておくことができます。<code>testdata</code> ディレクトリに含まれるファイルはテストのときのみ用いられます。標準パッケージの中でたくさん用いられていますが、<code>image</code> パッケージの例を上げると <a href="https://github.com/golang/go/tree/master/src/image/testdata" target="_blank" rel="noopener">https://github.com/golang/go/tree/master/src/image/testdata</a> といったものです。</p><h2 id="テストにヘルパー関数を使いたい"><a href="#テストにヘルパー関数を使いたい" class="headerlink" title="テストにヘルパー関数を使いたい"></a>テストにヘルパー関数を使いたい</h2><p>複数のテストで用いるような共通の関数をヘルパー関数として実装する場合があると思います。テスト用のヘルパー関数の特徴は以下です。</p><ul><li>ヘルパー関数はエラーを返さない</li><li><code>*testing.T</code> を受け取ってテストを落とす</li><li>Go 1.9 からは <code>T.Helper</code> を使って情報を補足する<ul><li><a href="https://tip.golang.org/pkg/testing/#T.Helper" target="_blank" rel="noopener">https://tip.golang.org/pkg/testing/#T.Helper</a></li></ul></li></ul><p><a href="https://www.slideshare.net/takuyaueda967/go-friday" target="_blank" rel="noopener">Go Friday 傑作選</a> より引用</p><p>テスト用のヘルパー関数は以下のように実装されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mustUrlParse</span><span class="params">(t *testing.T, s <span class="keyword">string</span>)</span> *<span class="title">url</span>.<span class="title">URL</span></span> &#123;</span><br><span class="line">t.Helper()</span><br><span class="line">u, err := url.Parse(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ヘルパー関数に <code>t.Helper()</code> を付与すると何が嬉しいのでしょうか。上記のヘルパー関数 <code>mustUrlParse</code> を用いたテストを実施してみて確認してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestX</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">str <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">args args</span><br><span class="line">want <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="string">"normal1"</span>, args&#123;<span class="string">"http://example.com/"</span>&#125;, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="string">"normal2"</span>, args&#123;<span class="string">"%zzzzz"</span> <span class="comment">/* error occured */</span>&#125;, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">url := mustUrlParse(t, tt.args.str)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 何らかの処理をしてテストする</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ヘルパー関数から <code>t.Helper()</code> を除いた場合</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestX</span><br><span class="line">=== RUN   TestX/normal1</span><br><span class="line">=== RUN   TestX/normal2</span><br><span class="line">--- FAIL: TestX (0.00s)</span><br><span class="line">    --- PASS: TestX/normal1 (0.00s)</span><br><span class="line">    --- FAIL: TestX/normal2 (0.00s)</span><br><span class="line">        x_test.go:44: parse %zzzzz: invalid URL escape <span class="string">"%zz"</span></span><br><span class="line">FAIL</span><br><span class="line"><span class="built_in">exit</span> status 1</span><br><span class="line">FAIL    github.com/d-tsuji/go-sandbox/x 0.299s</span><br></pre></td></tr></table></figure><ul><li>ヘルパー関数に <code>t.Helper()</code> がある場合</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestX</span><br><span class="line">=== RUN   TestX/normal1</span><br><span class="line">=== RUN   TestX/normal2</span><br><span class="line">--- FAIL: TestX (0.00s)</span><br><span class="line">    --- PASS: TestX/normal1 (0.00s)</span><br><span class="line">    --- FAIL: TestX/normal2 (0.00s)</span><br><span class="line">        x_test.go:34: parse %zzzzz: invalid URL escape <span class="string">"%zz"</span></span><br><span class="line">FAIL</span><br><span class="line"><span class="built_in">exit</span> status 1</span><br><span class="line">FAIL    github.com/d-tsuji/go-sandbox/x 0.296s</span><br></pre></td></tr></table></figure><p>上記の 2 通りの結果を比較すると FAIL になった行が何行目を指しているのか、が変わっています。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// t.Helper() がない場合</span><br><span class="line">x_test.go:44: parse %zzzzz: invalid URL escape "%zz"</span><br><span class="line"></span><br><span class="line">// t.Helper() がある場合</span><br><span class="line">x_test.go:34: parse %zzzzz: invalid URL escape "%zz"</span><br></pre></td></tr></table></figure><p><code>t.Helper()</code> を付けた場合は <code>t.Run()</code> 内の <code>_ = mustUrlParse(t, tt.args.str)</code> の行を指しています。付けなかった場合はヘルパー関数でエラーになった <code>t.Fatal(err)</code> の行を指しています。<code>t.Helper()</code> を付けた場合のほうが、テストケース内のどの行で失敗したか分かりやすくなり、エラーの原因を探りやすくなるのではないでしょうか。</p><h2 id="ブラックボックステストをしたい"><a href="#ブラックボックステストをしたい" class="headerlink" title="ブラックボックステストをしたい"></a>ブラックボックステストをしたい</h2><p>あるパッケージ <code>mypkg</code> があって以下のようなファイル構成になっているとします。ブラックボックステストなどを実施するときにパッケージ名を分けたい、などのニーズがあるかもしれません(そんなに多くは無いと思いますが)。Go ではディレクトリ名とパッケージ名は同じである必要があるため、異なるパッケージ名のファイルを作ることはできません。しかし例外的に <code>mypkg_test</code> という、<code>mypkg</code> に <code>_test</code> を付与したパッケージ名は用いることができます。<a href="https://tip.golang.org/cmd/go/#hdr-Test_packages" target="_blank" rel="noopener">Test packages</a> にもあるように Go では <code>_test</code> の接尾語をもつパッケージ名は別のパッケージとして扱われます。パッケージ名を <code>mypkg</code> と <code>mypkg_test</code> とで分けることでテスト実施時に <code>mypkg</code> の非公開の関数を呼び出すことはできなくなります。似たような議論を <a href="https://stackoverflow.com/questions/19998250/proper-package-naming-for-testing-with-the-go-language" target="_blank" rel="noopener">Proper package naming for testing with the Go language</a> で見ることができます。</p><p>具体的には以下のようなファイル構成になっていて <code>x.go</code> と <code>x_test.go</code> で別のパッケージ名とできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mypkg</span><br><span class="line">|--x.go</span><br><span class="line">|--x_test.go</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>x.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypkg</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>x_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mypkg ディレクトリにあるテストファイルでも _test を付けたパッケージ名を混在できる</span></span><br><span class="line"><span class="keyword">package</span> mypkg_test</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="用途-単体-インテグレーションなど-によってテストを切り替えたい"><a href="#用途-単体-インテグレーションなど-によってテストを切り替えたい" class="headerlink" title="用途(単体/インテグレーションなど)によってテストを切り替えたい"></a>用途(単体/インテグレーションなど)によってテストを切り替えたい</h2><p>テストは単体テストの他、インテグレーションテストなど用途によっていくつか存在します。用途によって実行するテストを分けるにはどのようにすれば良いでしょうか。<a href="https://golang.org/pkg/go/build/#hdr-Build_Constraints" target="_blank" rel="noopener">ビルドタグ</a> を用いる方法やディレクトリを分ける方法があります。</p><ul><li>ビルドタグを用いる方法</li></ul><p>以下のようにビルドタグ <code>// +build integration</code> を付与します。このようにすると <code>go test -tags=integration</code> とタグを付けたときのみテストが実行されるようになります。タグがない場合はテスト対象に含まれません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build integration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestX</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connecting server and some processing and so on...</span></span><br><span class="line"></span><br><span class="line">t.Log(<span class="string">"run integration test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OSS から具体例をあげると以下のようなものです。以下の例はテストのパッケージ名に <code>_test</code> をつけることでテストであることを明示的に分けています。テストで用いる関数は、テスト内でインポートしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2019 Google Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment">// This file is available under the Apache license.</span></span><br><span class="line"><span class="comment">// +build integration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> mtail_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/google/mtail/internal/mtail"</span></span><br><span class="line"><span class="string">"github.com/google/mtail/internal/testutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNewProg</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tmpDir, rmTmpDir := testutil.TestTempDir(t)</span><br><span class="line"><span class="keyword">defer</span> rmTmpDir()</span><br><span class="line"></span><br><span class="line">logDir := path.Join(tmpDir, <span class="string">"logs"</span>)</span><br><span class="line">progDir := path.Join(tmpDir, <span class="string">"progs"</span>)</span><br><span class="line">err := os.Mkdir(logDir, <span class="number">0700</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">err = os.Mkdir(progDir, <span class="number">0700</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m, stopM := mtail.TestStartServer(t, <span class="number">0</span>, <span class="literal">false</span>, mtail.ProgramPath(progDir), mtail.LogPathPatterns(logDir+<span class="string">"/*"</span>))</span><br><span class="line"><span class="keyword">defer</span> stopM()</span><br><span class="line"></span><br><span class="line">startProgLoadsTotal := mtail.TestGetMetric(t, m.Addr(), <span class="string">"prog_loads_total"</span>).(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">testutil.TestOpenFile(t, progDir+<span class="string">"/nocode.mtail"</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"></span><br><span class="line">progLoadsTotal := mtail.TestGetMetric(t, m.Addr(), <span class="string">"prog_loads_total"</span>).(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">mtail.ExpectMetricDelta(t, progLoadsTotal[<span class="string">"nocode.mtail"</span>], startProgLoadsTotal[<span class="string">"nocode.mtail"</span>], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/google/mtail/blob/master/internal/mtail/new_prog_integration_test.go#L1-L44" target="_blank" rel="noopener">https://github.com/google/mtail/blob/master/internal/mtail/new_prog_integration_test.go#L1-L44</a></p><ul><li>ディレクトリを分ける</li></ul><p>シンプルながら、インテグレーションテストは <code>integration</code> などのディレクトリに対象のテストケースを含めることが多いのではないでしょうか。その <code>integration</code> パッケージと <code>// +build integration</code> のビルドタグを組み合わせる方法も考えられます。OSS だと以下のようなイメージです。</p><ul><li>google/go-github<ul><li><a href="https://github.com/google/go-github/blob/master/test/integration" target="_blank" rel="noopener">/test/integration</a></li></ul></li></ul><h2 id="モックを使ってテストをしたい"><a href="#モックを使ってテストをしたい" class="headerlink" title="モックを使ってテストをしたい"></a>モックを使ってテストをしたい</h2><p>外部サービスに依存する実装のテストをするときに、外部サービスをモックしたい場合があります。特に外部の API を実行した結果に依存する場合、API のレートリミットやテストの結果が外部 API の仕様変更などに引きづられ、テスト結果が不安定になります。どのようにすればモック化できるでしょうか。方法はいくつかありますが、基本的な考えはインターフェースを満たす実装を、本物の実装とモックで切り替えていくことになります。</p><p>データベースアクセスする処理をモックする簡単な疑似コードを見てみます。データベースからユーザの検索と作成をします。インターフェースのメソッドは以下のようにあるとします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DataStore <span class="keyword">interface</span> &#123;</span><br><span class="line">FindUser(ctx context.Context, id <span class="keyword">int</span>) (*User, error)</span><br><span class="line">CreateUser(ctx context.Context, name <span class="keyword">string</span>) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">id   <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常の実装は以下のような感じを想定します。ポイントは DataStore のインターフェースをファクトリ関数である <code>NewDataStore</code> で返すところです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserDataStore <span class="keyword">struct</span> &#123;</span><br><span class="line">*sql.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DataStore のインターフェースを返すのがポイント</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDataStore</span><span class="params">(db *sql.DB)</span> <span class="title">DataStore</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;UserDataStore&#123;db&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserDataStore)</span> <span class="title">FindUser</span><span class="params">(ctx context.Context, id <span class="keyword">int</span>)</span> <span class="params">(*User, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> user *User</span><br><span class="line">row := u.QueryRowContext(context.Background(), <span class="string">`SELECT * FROM user WHERE userId = ?`</span>, id)</span><br><span class="line"><span class="keyword">if</span> err := row.Scan(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> user, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserDataStore)</span> <span class="title">CreateUser</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あるテストをする際に、このデータベースに依存する実装をモックする例は以下のようになります。インターフェースを満たす、モックオブジェクトに想定の結果が取得できるメソッドを実施します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MockUserDataStore <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMockDataStore</span><span class="params">()</span> <span class="title">DataStore</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;MockUserDataStore&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MockUserDataStore)</span> <span class="title">FindUser</span><span class="params">(ctx context.Context, id <span class="keyword">int</span>)</span> <span class="params">(*User, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;User&#123;</span><br><span class="line">id:   <span class="number">1</span>,</span><br><span class="line">name: <span class="string">"test user"</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MockUserDataStore)</span> <span class="title">CreateUser</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"create user. dummy"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このモックしたオブジェクトをテストで用いる場合は以下のようになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestXXX</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">storage := NewMockDataStore()</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">user, err = storage.FindUser(context.TODO(), <span class="number">1</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようにして外部依存する処理をモックできます。モックの struct やメソッドの実装が手間なので <a href="https://github.com/golang/mock" target="_blank" rel="noopener"><code>gomock</code></a> を使うこともあるかもしれません(<code>gomock</code> に関して詳細は説明を割愛します)。</p><p>インターフェースを用いたテストに関しては <a href="https://deeeet.com/writing/2016/10/25/go-interface-testing/" target="_blank" rel="noopener">Golangにおけるinterfaceをつかったテスト技法</a> が詳しいです。またインターフェースの埋め込みを用いたモックに関しては <a href="http://haya14busa.com/golang-how-to-write-mock-of-interface-for-testing/" target="_blank" rel="noopener">Golangにおけるinterfaceをつかったテストで Mock を書く技法</a> が詳しいです。</p><p>余談ですが、テストがモックに依存しすぎるとなんのためのテストをしているか分からなくなったり、リファクタリングのときに辛かったりするので、モックを使ったテストは用法用量に注意です。</p><h2 id="ゴルーチンリークを検出したい"><a href="#ゴルーチンリークを検出したい" class="headerlink" title="ゴルーチンリークを検出したい"></a>ゴルーチンリークを検出したい</h2><p>ゴルーチンがリークするような実装になっていることをテスト時に確認したいかもしれません。公式のツールチェーンには含まれていませんが、<a href="https://github.com/uber-go/goleak" target="_blank" rel="noopener"><code>goleak</code></a> はゴルーチンリークの検出に役に立ちます。このツールを用いるとテスト時にゴルーチンがリークしている場合にテストが FAIL になります。</p><p>簡単な例で確認してみます。</p><figure class="highlight go"><figcaption><span>leak.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">X</span><span class="params">(send <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// チャネルになんらかの値が書き込まれない or チャネルがクローズされない限り</span></span><br><span class="line"><span class="comment">// ブロックされて、ゴルーチンリークになる</span></span><br><span class="line"><span class="keyword">case</span> &lt;-send:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>leak_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDoLeak</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">closedchan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="built_in">close</span>(closedchan)</span><br><span class="line"></span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">ch   <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"not leak"</span>,</span><br><span class="line"><span class="comment">// クローズされているチャネルを渡す</span></span><br><span class="line">ch:   closedchan,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"leak"</span>,</span><br><span class="line">ch:   <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> goleak.VerifyNone(t)</span><br><span class="line">X(tt.ch)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果は以下のようになります。想定通り <code>leak</code> のテストが FAIL になっていることが分かります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestDoLeak</span><br><span class="line">=== RUN   TestDoLeak/not_leak</span><br><span class="line">=== RUN   TestDoLeak/leak</span><br><span class="line">--- FAIL: TestDoLeak (0.46s)</span><br><span class="line">    --- PASS: TestDoLeak/not_leak (0.00s)</span><br><span class="line">    --- FAIL: TestDoLeak/leak (0.46s)</span><br><span class="line">        leaks.go:78: found unexpected goroutines:</span><br><span class="line">            [Goroutine 11 <span class="keyword">in</span> state chan receive, with github.com/d-tsuji/go-sandbox/t.X.func1 on top of the stack:</span><br><span class="line">            goroutine 11 [chan receive]:</span><br><span class="line">            github.com/d-tsuji/go-sandbox/t.X.func1(0xc000010360)</span><br><span class="line">                C:/Users/d-tsuji/go/src/github.com/d-tsuji/go-sandbox/t/leak.go:13 +0x40</span><br><span class="line">            created by github.com/d-tsuji/go-sandbox/t.X</span><br><span class="line">                C:/Users/d-tsuji/go/src/github.com/d-tsuji/go-sandbox/t/leak.go:10 +0x46</span><br><span class="line">            ]</span><br><span class="line">FAIL</span><br><span class="line"><span class="built_in">exit</span> status 1</span><br><span class="line">FAIL    github.com/d-tsuji/go-sandbox/t 0.761s</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/wWGWe8_S0WN" target="_blank" rel="noopener">https://play.golang.org/p/wWGWe8_S0WN</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>テストに関する Go の基本的な機能のまとめてみました。なるべく使い方のイメージがわかるように具体的な例を多く載せました。参考にした素晴らしいドキュメントの URL は以下に記載しています。合わせてみてみてください。</p><h1 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h1><ul><li><a href="https://blog.golang.org/race-detector" target="_blank" rel="noopener">https://blog.golang.org/race-detector</a></li><li><a href="https://github.com/golang/go/wiki/LearnTesting" target="_blank" rel="noopener">https://github.com/golang/go/wiki/LearnTesting</a></li><li><a href="https://golang.org/cmd/cover/" target="_blank" rel="noopener">https://golang.org/cmd/cover/</a></li><li><a href="https://golang.org/doc/articles/race_detector.html" target="_blank" rel="noopener">https://golang.org/doc/articles/race_detector.html</a></li><li><a href="https://golang.org/pkg/cmd/go/internal/test/" target="_blank" rel="noopener">https://golang.org/pkg/cmd/go/internal/test/</a></li><li><a href="https://golang.org/pkg/testing" target="_blank" rel="noopener">https://golang.org/pkg/testing</a></li><li><a href="https://talks.godoc.org/github.com/tcnksm/talks/2016/12/golang-tokyo/golang-tokyo.slide" target="_blank" rel="noopener">https://talks.godoc.org/github.com/tcnksm/talks/2016/12/golang-tokyo/golang-tokyo.slide</a></li><li><a href="https://talks.golang.org/2014/testing.slide" target="_blank" rel="noopener">https://talks.golang.org/2014/testing.slide</a></li></ul><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG の辻です。&lt;a href=&quot;/articles/20200529/&quot;&gt;今回は春の入門祭り🌸&lt;/a&gt;ということで G
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="introductory" scheme="https://future-architect.github.io/tags/introductory/"/>
    
  </entry>
  
  <entry>
    <title>フューチャー技術ブログの運営で心がけていること</title>
    <link href="https://future-architect.github.io/articles/20200530/"/>
    <id>https://future-architect.github.io/articles/20200530/</id>
    <published>2020-05-30T04:28:08.000Z</published>
    <updated>2020-06-02T07:57:31.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。フューチャー技術ブログの運営の1人です。<a href="https://note.future.co.jp/" target="_blank" rel="noopener">未来報</a>を運営している岡田さんなどと一緒に、気持ちは草の根活動で外部発信に携わっています。</p><p>IT企業の技術ブログ運営は、<strong>ある一定の質をキープ</strong>しながらも、<strong>投稿頻度を高め</strong>・<strong>それを継続する</strong>ことが求められ、周囲の期待値もあるので中々気を抜けない仕事だと思います。単発ならともかく、継続することは忍耐が必要なので特に大変です。運営していてこれはナレッジだなと感じたことをまとめていきます。</p><h1 id="技術ブログの大変なところ≒記事ネタを探すところ"><a href="#技術ブログの大変なところ≒記事ネタを探すところ" class="headerlink" title="技術ブログの大変なところ≒記事ネタを探すところ"></a>技術ブログの大変なところ≒記事ネタを探すところ</h1><p>熱心な寄稿者が複数いて、運営からの声掛け無しで記事が集まるのであれば非常に楽ですが、たいていの組織やチームはそうでないと思います。また、本業は記事を書くことではなく、自社プロダクトの開発やシステム開発（当社だとITコンサルティングサービス）であるため、そちらが忙しい場合は、当然技術ブログへの優先度がどうしても下がってしまいます。また、余力があってもそれぞれのプライベートや、OSS、競技プログラミング、個人サービス開発、資格取得、執筆などなど、興味がバラバラであって必ずしも執筆に関心があるとは限りません。</p><p>そこで<strong>ブログ運営はブログ記事の種を探す</strong>ことになると思います。ブログ運営者が全エンジニアの動きを補足することは不可能なので、通常は「何かネタがあったら書いてください～」といった依頼にとどまることが限界な気がします。今回はこの辺りの声掛けも含めていくつかやって良かった工夫点がまとまってきたので説明してきます。</p><p>フューチャー技術ブログは開設して4年位経過しますが、最初は月2,3ペースだったのが、最近は週2,3ペース（多いときは週5もザラ）に上がってきています。2019年の4月くらいから体制が変わって明らかに改善したのでここの話もします。</p><h1 id="チームごとの当番制はアンチパターン"><a href="#チームごとの当番制はアンチパターン" class="headerlink" title="チームごとの当番制はアンチパターン"></a>チームごとの当番制はアンチパターン</h1><p>ブログ開設2年ほどはIT技術部署ごとにローテーションを回す制度にしていました。これの理由ですが、ブログ運営者的にはどのそれぞれのチームレベルはともかく個人レベル何をしているかサッパリ分かっていなかったということと、仮に入稿スケジュールを守らなかった人に対して、ブログ運営者が業務調整するとか、マイナス評価にするとかはできないので、それだったらそのリーダ経由にしたほうが楽なんじゃないか？っていう割とネガティブな理由からです。</p><p>これはこれで最低限上手く回ったのですが、想定していた以上の投稿頻度にはなりませんでした。また、途中で組織変更が発生したのですが、ブログ運営はそれに追随できず途中から形骸化しました。</p><p>このため、途中からはチームローテーションを無くして、ブログ運営者が直接メンバーに声を書けて記事を書きなぐるスタイルに変更しました。チームごとの当番制などという概念も消えました。</p><img src="/images/20200530/photo_20200530_01.png"><p>これはとても上手く回りました。体制変更だけが理由ではなく色々幸運が重なった結果ですが説明していきます。</p><ol><li>2年間で会社のAdvent Calendarなどを複数回こなし、記事を書くことに慣れたメンバーが増えたこと</li><li>200名ほど参加している社内チャットグループができて、情報収集がしやすくなったこと</li><li>2年ほど部署単位でローテーションを回したことである程度各人の技術を志向を理解していたので、運営者が読みたいなと思った技術テーマについて各人にダイレクトにお願いできたこと</li></ol><p>本当に読みたい記事に対してはだれかを経由せず直接熱意を伝えた方が良いなと思ってます。また、当番制はブログを書くのが<strong>つまらない仕事になってしまう</strong>のがNGポイントだなと思います。有志で何かをやる分には良いですが、義務感が生じた瞬間にやる気がなくなるアレですね。当番制でチームリーダーがブログ化を指示する強制力が自発的なブログ投稿の気持ちを抑制していたかも？と今となっては思います。</p><h1 id="フューチャーの技術ブログを取り巻く制度"><a href="#フューチャーの技術ブログを取り巻く制度" class="headerlink" title="フューチャーの技術ブログを取り巻く制度"></a>フューチャーの技術ブログを取り巻く制度</h1><p>ブログを通した外部発信自体を経営が価値を認めてくれており、また<strong>やることをやっていれば他は好きにすれば良いんじゃない？</strong>というフューチャーの価値観が前提としてあります。</p><p>コンサル業界ではお客様に直接的に貢献する活動が優先されることが常識になってますが、<strong>フューチャーでの技術ブログの執筆活動はマーケティング活動や自己研鑽活動の一貫として社内に認知</strong>されており、大事な業務の一つとして扱わされています。社内用語で言うとチャージコードがちゃんと準備されています。これは新卒、キャリア採用面接とか、新人研修とか、OJTとかなどと並ぶ重要な業務として、現場のコンサルタントも認識できるので、非常に良いなと思います。</p><p>「リーダーによってはブログ執筆時間を嫌がるんじゃない？」とたまに外部の人に聞かれますが、ぶっちゃけあると思います。チームリーダーのポリシーによっては、チーム内Wikiに非常に力を入れていたりもします。また、そもそもやろうとしていることがチャレンジャブルなゆえに質・量ともに難しい案件が多いので、ブログ書くよりチームのタスクを消化してくれよ。苦笑 って思っている人も（直接言われたことは一度も無いですが）多いと思います。</p><p>とは言え、先ほど言ったとおりやることをやっていれば（宣言してリーダーと合意したアウトプットを出せば）割と後は自由にやって良いフューチャーの文化があるのか、あまりとやかく言われません。</p><h1 id="投稿ネタの発見と予約の確定"><a href="#投稿ネタの発見と予約の確定" class="headerlink" title="投稿ネタの発見と予約の確定"></a>投稿ネタの発見と予約の確定</h1><p>前の章で少し触れましたが、社内チャットはネタの宝庫だなと思います。様々な社内チャットを徘徊しましょう。<strong>もしチャットがなければ導入しましょう</strong>。Slackの無料プランであれば今すぐ有料プランに加入して、ログが消えないようにしましょう。冗談のようですが半分以上は本気です。</p><p>チャット上で<strong>「今○○が理解できずN時間溶かしている」→「解決した！」</strong>といったコメントがあればチャンスです。すかさず<strong>その知見をブログに残しませんか？</strong>とささやきましょう。鉄はアツいうちが良いです。解決して何かしらの脳内麻薬がでている状態ですので、「ぜひやりましょう！」と回答してくれると思います。このときのコツですが、そこで終わりではなく<strong>「では再来月の○日はどうでしょう？備忘に会議通知を送っておきますね」と続けます</strong>。これが大事です。<strong>期間は1.5~2ヶ月がちょうどよい</strong>です。1ヶ月だと書く側の気持ち的にはすぐだなって思ってしまいます。2ヶ月より長いと、内容を忘れてしまう気がします。また、依頼自体も時間が経過すると、ハマった本人としても大したことが無いネタだわと脳内変換してしまうので、まさにハマって解決したよ！という瞬間を狙っていくのが良いです。</p><p>フューチャーだと、Slack以外にも「Go相談室」「クラウドアーキナレッジ共有会」「💡電子工作部」「☁フロントエンド相談室」「AWS-APNアクティビティ」「OCV(競技プログラミング部)」など多くのGoogle Hangoutチャットルームが存在します。運営的にはなるべく多くのチャネルに入れるくらい友人関係や興味を広げておくとよいでしょう。実際に、<a href="https://future-architect.github.io/tags/GoCDK/">GoCloudの連載</a>を始めとするいくつかの連載記事は、「Go相談室」で盛り上がって開始したり、<a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a>は「クラウドアーキナレッジ共有会」でだれかのGCPを勉強したいというちょっとしたコメントがキッカケです。</p><p>Go相談室の例です。50人くらい参加していて割とアクティブに相談が行われています。</p><img src="/images/20200530/photo_20200530_02.png" style="border:solid 1px #000000"><p>だれかの疑問はブログネタの種ですし、初心者の基本的な質問も歓迎する雰囲気を出すのが重要ですよね。</p><p>こっちは「電子工作部」という公認社内サークルの様子です。</p><img src="/images/20200530/photo_20200530_03.png" style="border:solid 1px #000000"><p>ミニ四駆も最高ですが、AWS DeepRacerを買いたいですが技適が..というわけで、無いものは作る精神でHWから設計。<a href="https://future-architect.github.io/articles/20191018/">第1回社内ロボコン開催記-ライントレーサー編-</a> という記事に繋げていました。執筆者の勝村さんはチャット画像の筒井さんとともに電子工作部を支えるエース達ですが、実はAIの方が専門という人生2週目かな？って感じです。筒井さんは他にも<a href="https://future-architect.github.io/articles/20190826/">ソフトとハードの垣根を越えろ - IoTハードウェアの開発をソフト屋視点で解説します</a> という記事で、IoTで獣害問題に取り組んだ記事も書いており、強いです。</p><h1 id="抽出キーワードを学ぶ"><a href="#抽出キーワードを学ぶ" class="headerlink" title="抽出キーワードを学ぶ"></a>抽出キーワードを学ぶ</h1><p>毎日のようにチャットを徘徊する余裕が無いという方が大半だと思うので、チャットを検索しましょう。これは組織風土やチームの文化に完全に依存しますが、例えば、「学び」「知見」「ナレッジ」などのキーワードで検索してみると、何かしら新しい発見をしたメンバーの生の声が知れると思います。その内容が良いなと思ったらブログ執筆依頼をしてみると良いかなと思います。</p><p>Slackであれば、リアクションのスタンプ（Add reaction）を持つコメントも検索できます。例えば「知見」という絵文字が <code>:chiken</code> で使えるのであれば、 <code>has::chiken:</code> で検索できます。</p><img src="/images/20200530/photo_20200530_04.png" style="border:solid 1px #000000"><p>中々記事が集まらない場合は、こういったスタンプトリガーに記事候補を見繕うことも有効だなと思います。</p><h1 id="プロジェクト独自の成果物にチャンスあり"><a href="#プロジェクト独自の成果物にチャンスあり" class="headerlink" title="プロジェクト独自の成果物にチャンスあり"></a>プロジェクト独自の成果物にチャンスあり</h1><p>フューチャーは社内にいるとやることをやっていれば自由度が高く、ベンチャー感がありますが法的には大企業に分類されています。背景にはそういうリッチな開発リソースがあるからか、社内には生産性を高めるために多くの仕組み（ライブラリ、設計ツール、テストツール、方法論、コンポーネント、etc）が存在します。その中でもPJで独自に作られる標準規約などはネタの宝庫だなと思います。</p><p><a href="https://future-architect.github.io/articles/20200203/">チームで機能設計するためのPlantUML標準化</a> や<a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a>といった、よくそれをまとめる工数があったな..!!と自分でも思うようなアウトプットが、ある一つのPJのために作成されたりします。こういったものでもちろん知財的に問題ないものは、ドンドン汎化して外部公開できないか交渉すると良いかなと思います。<a href="https://future-architect.github.io/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a>の記事は逆に最初から外部公開を視野に入れて作成されたようです。色々な流れがありますね。</p><p>こんなの需要ないでしょ？と思うくらいの方が、出してみると意外と反応があり面白いです。実はこういう規約が作られた事自体、通の人間しか知らずにそのまま埋もれることも多いです。社内に浸透させるためには、逆説的に社外に一般公開して、Googleのインデックスに引っかかるようにしたほうが、結果的には社内の別のPJから「これ良い規約だからそのままうちでも流用したよ」といった声も増えた実感があります。</p><h1 id="推薦してもらう"><a href="#推薦してもらう" class="headerlink" title="推薦してもらう"></a>推薦してもらう</h1><p>運営者1人だけでブログネタを探すのは限界があるので、周囲の人を巻き込んでいきましょう。特にエンジニアマネージャはオススメの協力者です。チームの進捗の影響にならない範囲で適任者を教えてくれますし、自チーム以外の他のチームメンバーの推薦もしてくれる可能性が高いです。</p><p><a href="https://future-architect.github.io/articles/20200429/">Reduxを分かりやすく解説してみた</a>や<a href="https://future-architect.github.io/articles/20200428/">Vue.jsのslotの機能を初心者にわかるように解説してみた</a>のフロントエンド系の記事は、だれかフロントエンド記事を書ける人がいないですかねー？と、部署のリーディングをしている星さんに聞いて教えてもらったり、さらにその人に推薦してもらった人だったりします。</p><h1 id="社内イベントはチャンス"><a href="#社内イベントはチャンス" class="headerlink" title="社内イベントはチャンス"></a>社内イベントはチャンス</h1><p>フューチャーは、<a href="https://note.future.co.jp/n/n08d63ab0be11?gs=11b5819f8317" target="_blank" rel="noopener">個人プレゼン決勝戦</a>や、年末の<a href="https://note.future.co.jp/n/n7b0e5de1b2bc" target="_blank" rel="noopener">BPY</a>などなど社内イベントが盛りだくさんです。特にこういったある程度競い合うイベントに登壇してくる人は、もれなく各チームのエース級が出てくるので、チャンスの塊感があります。</p><p>ちょっとでもこの人の話の続きを聞きたい、と思ったらブログ化の依頼をしましょう。アツいうちにチャットでDMを送りましょう。大体優しく答えてくれるので、間髪入れず会議通知を入れて既成事実化しましょう。</p><p>他にも、有志の勉強会や輪読会などチャンスは多いです。</p><p><a href="https://future-architect.github.io/articles/20190729/">社内技術書輪読会とSite Reliability Engineering</a> の記事はたまたまオライリー本を読んでいたグループに混ざって書いてもらいましたが、書き出すと色々ナレッジがあって良い知見を世に出せた気がします。また、<a href="https://future-architect.github.io/articles/20200310/">Goの標準ライブラリのコードリーディングのすすめ</a>も同様に有志の勉強会の様子を記事化してもらったものです。個人的には、完走してからではなく、中間の段階で記事を書くと、その後の社内の募集時も楽になる効果があるのでオススメです。</p><h1 id="テーマを決めて募集する"><a href="#テーマを決めて募集する" class="headerlink" title="テーマを決めて募集する"></a>テーマを決めて募集する</h1><p>「何か書いて」という自由度の高い依頼ベースだと中々記事が集まりにくいです。そのため何かしらのテーマを決めると経験上良いです。もし、テーマ募集でも集まらない場合は、テーマに興味がある人が少ないかしっくり来ていないことが多いのかなと思います。フューチャー技術ブログだと、半分くらいが企画連載モノが締めているくらい、重要な取り組みです。</p><p>この辺りの内容は、”フューチャー技術ブログで行っている連載企画が良いよって話”の記事を近々公開して、そちらに詳しく書きますので、ぜひ公開後に参考にしてみてください。</p><h1 id="アルバイトerやインターン生に就職活動ネタとして書いてもらう"><a href="#アルバイトerやインターン生に就職活動ネタとして書いてもらう" class="headerlink" title="アルバイトerやインターン生に就職活動ネタとして書いてもらう"></a>アルバイトerやインターン生に就職活動ネタとして書いてもらう</h1><p>フューチャーでは多くのアルバイトerやインターン生を受け入れています。中にはNDA（秘密保持契約書）を結んで業務してもらう方もいるそうですが、それ以外のOSS開発などに携わってもらっているメンバーには、<strong>就職活動でも使えるように</strong>ドンドン記事を書いてもらっています。アルバイトやインターンの業務内容の生の声を外部に発信できて、多分フューチャー的にもハッピー、きっと世の中にある幸せの総量を増やせます。</p><p>最初は<a href="https://future-architect.github.io/articles/20170421/">Unity未経験者がHoloLensアプリの開発をしてみた</a>の澤田さん（その後入社を決めてくれた）が1つ目でこれは3年前くらいの事例です。最近だと<a href="https://future-architect.github.io/articles/20200512/">日本製HeadlessCMSのmicroCMSを触ってみた</a>の三村さんや、<a href="https://future-architect.github.io/articles/20200526/">新米エンジニアが１か月のトラブルシューティングで学んだこと</a>を書いてくれた本田さんなど、様々です。もちろんQiitaなど別のブログ媒体にも、業務で得たプログラミングなど汎用的な内容はドンドン書くように背中をおしています。</p><h1 id="Advent-Calendar時期の運営"><a href="#Advent-Calendar時期の運営" class="headerlink" title="Advent Calendar時期の運営"></a>Advent Calendar時期の運営</h1><p>フューチャー技術ブログの出自は、<a href="https://qiita.com/organizations/future?page=1" target="_blank" rel="noopener">Qiita Organization</a>にあるため、当然のようにQiitaのAdvent Calendarに毎年参加しています。</p><ul><li><a href="http://qiita.com/advent-calendar/2019/future" target="_blank" rel="noopener">2019</a></li><li><a href="http://qiita.com/advent-calendar/2018/future" target="_blank" rel="noopener">2018</a></li><li><a href="http://qiita.com/advent-calendar/2017/future" target="_blank" rel="noopener">2017</a></li><li><a href="http://qiita.com/advent-calendar/2016/future" target="_blank" rel="noopener">2016</a></li><li><a href="http://qiita.com/advent-calendar/2015/future" target="_blank" rel="noopener">2015</a></li></ul><p>この12月は技術ブログ界隈では、豊作の月と呼ばれ(要出典)、言い換えればレッドオーシャンです。また社員の多くが様々なカレンダーに参戦していたり、そもそも12月はBPYや評価時期と重なり当社の繁忙期です。そのため<strong>この時期にはあまり活動をしない</strong>ように心がけています。フューチャーとしてもAdvent Calendarに参加するけど、その記事はQiita上に直接書いてもらうことを基本としています。Qiita記事を書いたことがない人にもカジュアルに記事を書いてもらうことを期待もしています。</p><p>Advent Calendarの前月11月は凪の月と呼ばれ（要出典)、気持ち技術ブログ界での投稿が減るので、<strong>逆張りで11月に投稿スケジュールを寄せる</strong>工夫をしています。</p><h1 id="依頼のコツ"><a href="#依頼のコツ" class="headerlink" title="依頼のコツ"></a>依頼のコツ</h1><p>「とりあえず書いてください」というテイストだと、頼まれた側も何を書いて良いか分からないので、なるべく具体的に○○にハマった内容について書いてくださいとか、チームのリポジトリ構造についての工夫について書いてくださいとか、細かくリクエストを出したほうが経験的に反応は良かったです。</p><p><a href="https://future-architect.github.io/articles/20200129/">リモートワークを促進させるDaily Stand-up Meeting</a>の記事は、あるチームが毎日15分くらいのショート朝会をしている風景を見て（まだコロナが無かった頃です）、聞いてみると色々作戦があり面白そうだったので記事化を依頼しました。これを依頼したときは、「良いテーマを見つけてくれてありがとうございます！」と逆に感謝され新鮮な気持ちになりました。ブログを書きたいけどネタをうまく思いつけない人もいて、<strong>客観的な立場からネタを引き出してあげる能力も大事</strong>なのかもな、と思った記憶があります。もしかするとネタを見つけるのも一種の創造性が求められる仕事かもしれません。</p><p>企業IT技術ブログですが、純粋なプログラミングの内容以外にも、<a href="https://future-architect.github.io/articles/20200116/">実践Drawio</a>のようなツールの使い方など、幅はかなり広いと思います。自分が知らなくて勉強になったことは、常に世に公開して貢献できないか教えてくれた人に相談すると良いと思います。</p><h1 id="ベテランを味方に付ける"><a href="#ベテランを味方に付ける" class="headerlink" title="ベテランを味方に付ける"></a>ベテランを味方に付ける</h1><p>かなりのステレオタイプが入っているかも知れませんが、フューチャー中で30中盤を超えてテクノロジーに人生を掛けている勢は控えめにいってかなり強いです。生存バイアスかも知れません。彼らはおそらく技術ブログの記事レベルを底上げしてくれるその道の専門家集団だと思いますが、中には全く技術発信に興味がない人がいます。どのように依頼すべきでしょうか？書いて欲しいテーマについて具体的にお願いすればよいのでしょうか？スキルも実績も文句ないので、ぜひ1本だけでも..1本だけでも書いて欲しいと思う気持ちはあります。</p><p>残念ながら、経験上ですがこの手の興味の無いベテラン勢に執筆を依頼しても一度も成功した試しが無いのです。押すだけ無駄です。その労力があるなら別のところに注いだ方がお互い幸せです。ちょっとでも嫌そうなオーラを感じたら即時撤退しましょう。多分、大人なだけにマイルドに包んでいるだけで本当に嫌がっています。ベテランになるとIT技術以外に仕事の進め方が上手くなり、優先度付けもレベルが高い人が多いです。必要になったら本人から何か書こうか？（というよりこの○○の記事を出したいけど良いかな？って感じです）って言ってくれるので、のんびり待ちましょう。繰り返しますがその時が来ない限り、頼み込んでも書いてくれることはほぼ無いです。逆に時が来れば尖った記事を出してくれます。まるで大自然、荒ぶる神のようですね。</p><p>また、こういった気質の人は、本当に一匹狼気質もいますが、自分の知見を世界に公開するよりどちらかと言えば目の前のメンバー育成に興味を持っている気がします。もしメンバー育成に興味を持っている人であれば、メンバーサイドに記事を書けそうな人がいないか紹介もらったほうが良いでしょう。このへんはエンジニアマネージャーが良い紹介役といったところと共通していると思います。</p><p>もちろん、中には執筆に協力的な方もいらっしゃるので、そういう諸先輩には全力でオネダリしていきましょう。</p><h1 id="入稿が遅れた時"><a href="#入稿が遅れた時" class="headerlink" title="入稿が遅れた時"></a>入稿が遅れた時</h1><p>もし、入稿が遅れるという連絡があった時ですが、<strong>基本的に業務優先</strong>なので気にしないです。大体1週間くらいスケジュールをズラしたいと言われますが、そんなに余力がない中で1週間後だと、アクシデントが発生した時にブラック企業モードに陥る恐れがあります。本当にあとちょっとだったら良いですが、1週間と言わず1ヶ月ズラしてホワイト化しようと意識しています。</p><p>もし、連絡が無くてスルーしているときですが、チャットのDMでチラってコメントを送っています。大体悪気は無いので、リスケするかどうか確認して、これは1.5ヶ月くらい後ろにしています。あまり1人に頼る公開スケジュールを立てると、崩壊した時にリスクが大きく精神的にもよろしくないです。そのため、大体<strong>3人くらいの冗長性を持ってスケジュールを計画すると良い</strong>かなと思います。</p><p>🚩繰り返されるリスケの図</p><img src="/images/20200530/photo_20200530_05.png"><p>大先輩の杉江さんを晒したようですが、<a href="https://future-architect.github.io/articles/20161031/">SQL実行時のブルームフィルタ(Bloom Filter)アルゴリズム</a>という記事を過去に書いていて、こういった感じの大作を書くタイプゆえに、執筆に時間がかかるという理由があります。他にもプライベートのアレコレがあったり個人の事情は様々ゆえ、とてもじゃないですが強権的に記事を書いて！とは言えません。</p><h1 id="原稿について"><a href="#原稿について" class="headerlink" title="原稿について"></a>原稿について</h1><p>レビューですが運営が全ての技術に精通しているわけではないので（憧れますが）、基本的に文章チェック以外は有識者にレビューを依頼します。この時、レビューが得意な人とそうでない人はどうしても存在するので、信頼できるレビュアーは自分の中で持っておきましょう。だれに聞くかは非常に大事です。</p><p>原稿でよく追記のお願いするポイントがいくつかあります。まず、一言でも自己紹介を書いて欲しいこと（執筆者のブランディングに繋げたい）や、記事内で別の記事を紹介してリンクを貼ってもらうことです。後者はブログ内の回遊率を上げたい取り組みですが、Googleアナリティクスを見るとあまりうまく行ってはいないようです。</p><p>個人的に辛い系の原稿レビューは、<a href="https://future-architect.github.io/articles/20191024/">テキストアナリティクスシンポジウム開催報告&amp;ACL2019参加報告</a>を始めとしたデータサイエンス系の記事です。フューチャーのAIチームの専門性が高すぎていつも涙目になっています。セクショナリズムは敵ですが、餅は餅屋でもあるので、１人で抱え込みすぎずチーム内レビューをしてもらうなど状況に応じて対応を変えています。</p><h1 id="FAQを作る"><a href="#FAQを作る" class="headerlink" title="FAQを作る"></a>FAQを作る</h1><p>技術ブログで章立てなどにお作法が無いのか？は非常によく聞かれるポイントです。その他注意事項やよく聞かれるポイントがあればFAQという形でまとめましょう。<br>フューチャー技術ブログだと、GSuiteが導入されているので、だれでも見れる環境にDocumentを配備しています。共同編集もできるためオススメです。</p><h1 id="公開後の宣伝"><a href="#公開後の宣伝" class="headerlink" title="公開後の宣伝"></a>公開後の宣伝</h1><p>記事の公開ですが、宣伝は<strong>運営者自らが行いましょう</strong>。公開だけして自社や外部向けの告知は、執筆者本人に依頼して任せるのはNGです。もちろん執筆者か自発的に宣伝してくれるのはWelcomeです。理由はいくつかあります。</p><ol><li>執筆者が自分で自分の記事を自チームに宣伝するのは恥ずかしがる人もいる（書いたぜアピールが強くなりすぎる）</li><li>特に初投稿の場合、リアクションに緊張する（反応がゼロだったらどうしようとか、反論が来たらどうしようとか）</li><li>純粋に宣伝が慣れていないので、時間がかかる。だったら運営がやったほうが依頼するやり取りが減る分、効率的</li></ol><p>面倒ですがなるべく多くのチャネル（社内の複数のチャットグループ、複数のSNSなど）に投稿しましょう。</p><p>🚩200人超えの社内チャットに宣伝する図<br><img src="/images/20200530/photo_20200530_06.png" style="border:solid 1px #000000"></p><p>🚩Twitterに宣伝している図</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Goのパッケージ構成で悩んでいる人にオススメの記事を公開しました✨ / あなたのGoアプリ/ライブラリのパッケージ構成もっとシンプルでよくない？ <a href="https://t.co/Mi8nvhQpfz" target="_blank" rel="noopener">https://t.co/Mi8nvhQpfz</a></p>&mdash; フューチャー技術ブログ🥢 (@future_techblog) <a href="https://twitter.com/future_techblog/status/1265813149883613184?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">May 28, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h1 id="公開後に反応があった場合"><a href="#公開後に反応があった場合" class="headerlink" title="公開後に反応があった場合"></a>公開後に反応があった場合</h1><p>良い内容であればドンドン広く共有したほうが良いです。Twitterで「○○に関して良い記事だった」といった具体的であればあるほど、ドンドン社内でシェアしましょう。繰り返すと記事を書くことに対して、社内がポジティブに捉えてくれるようになります。</p><h1 id="バズった時は礼賛する"><a href="#バズった時は礼賛する" class="headerlink" title="バズった時は礼賛する"></a>バズった時は礼賛する</h1><p>はてなブックマークなどのホットエントリーに入った場合や大量にRTされた場合には、ドンドン画像ごと社内にシェアしています。この時、書いた本人を含めて「おめでとうございます！🎉」と<strong>礼賛すること</strong>が非常に大事だなと思います。</p><p>🚩少しでもバズった気配があればすかさずアピールする図<br><img src="/images/20200530/photo_20200530_07.png"></p><p>こういった国内IT業界を技術発信で貢献したりリードする人が社内にいて一緒に仕事をできるということは、若手にとってもベテランにとっても嬉しいことですし、さらに記事を公開することに対してポジティブに捉えてくれるようになります。とにかく入社1年以内の若手の人からもブログ活動に興味を持ってもらえるくらい、ドンドン新規の執筆者候補を作ることが、継続したブログ運営に繋がると思います。分かりやすい成果が出た場合は書いた人を称える気持ちでシェアしていきましょう。</p><h1 id="1年ほど繰り返すと"><a href="#1年ほど繰り返すと" class="headerlink" title="1年ほど繰り返すと"></a>1年ほど繰り返すと</h1><p>こういった取り組みを1年ほど繰り返すと、気がつけばチームSlackでも、多くの人が何か事あるたびに、「これはブログネタ」と言ってくれるようになりました。</p><img src="/images/20200530/photo_20200530_08.png"><p>そうするとさらに外部公開を意識したビジネス的、技術的なチャレンジが取りやすい文化が醸造されてきた気がします。上の画像の中のコメントにも書いていますが、チャレンジした結果だめだった場合でも、「<strong>ブログで供養すれば良いじゃない</strong>」といった形です。失敗がダメというよりその後の改善や、失敗するなら早く失敗するための工夫をしようよとマインドも変わってきます。良いサイクルですね。</p><h1 id="今後の施策"><a href="#今後の施策" class="headerlink" title="今後の施策"></a>今後の施策</h1><p>いくつか追加でやりたいテーマがありますが、気張りすぎずやれる範囲でって気持ちです。</p><ol><li>フューチャー<strong>社外</strong>の人にも記事を書いてもらう</li><li>1の延長ですが、社外の人と技術テーマで話すインタビュー記事を作る</li><li>Youtubeやポッドキャストで、技術談義をして公開する</li><li><a href="https://atcoder.jp/contests/future-contest-2020-final" target="_blank" rel="noopener">HACK TO THE FUTURE</a>とのコラボ</li><li><a href="https://note.future.co.jp/" target="_blank" rel="noopener">未来報</a>とコラボ記事</li></ol><p>直近は増えてきている連載企画を社内に定着するよう、色々発信していこうと思っています。</p><h1 id="マーケティングや質と量の論議"><a href="#マーケティングや質と量の論議" class="headerlink" title="マーケティングや質と量の論議"></a>マーケティングや質と量の論議</h1><p>コンテンツマーケティングを囓ったことがある人によく言われることですが、読者のペルソナを作ってSEOワードを気にして…etc. など色々言ってくれる人もいますが、こういったことは全く手が回っていません。今は面白いと思ったネタをなるべく社内から抽出して生み出そうという意識です。本当は導線分析などをしたほうが良いよね、とはECサイトの構築など経験豊富な星さんとたまに話しています。</p><p>コンテンツでいうと、<strong>まずは投稿量</strong>を増やそうと思っています。フューチャー技術ブログは200記事くらいでまだ道半ばです。心が折れない限り500記事くらいは継続したいと思います。量を増やすとSNSでも注目される記事が増えてきました。質はtypoや日本語の言い回しなどはチェックしますが、技術レベルはあまり気にしていません。というのも、ブログのコンセプトとして、<strong>初心者～習熟者まで楽しめるメディアにしたい</strong>というのがあるからです。（そういう意味だと、対象読者は学生さん～社会人の若手エンジニアです）。まずは500記事くらいまではこのまま勢いで走り抜きたいと思っています。その中で順次足りないところでかつ面白いアイデアが浮かんだら実行していくと言った考えです。</p><h1 id="こういう意見は流すに限る、よく言われがちなこと"><a href="#こういう意見は流すに限る、よく言われがちなこと" class="headerlink" title="こういう意見は流すに限る、よく言われがちなこと"></a>こういう意見は流すに限る、よく言われがちなこと</h1><p>2点だけ、経験上なぜか年次が上の人から言われがちなアドバイスがあるので注意喚起します。</p><p><strong>「記事を書くメリットが欲しい」</strong><br>たまに今でも言われます。インセンティブを作ったほう良いんじゃない？と同義です。実は過去、この意見に従い実際に社内で使えるマイルポイントみたいなのを面倒な調整をして付与できるようにしました。しかし、<strong>実際にメリットがあってもそういった人は一人も書かなかった</strong>ことを、声を大にして残しておきます。本当にだれも書かなかったし、むしろ今まで書いてくれた人が時給換算で〇〇円か、とテンションが下がっていたのが印象的です。</p><p>そもそも<strong>物理的な報奨は原資に限りがある</strong>のでやめたほうが良いです。文化的な報奨（つまり礼賛すること）に移行したほうが原資が無限大なので、こちらの仕組みを上手く作ることにフォーカスしましょう。</p><br><br><p><strong>「運営を持ち回り制にしたほうが良いのでは？」</strong><br>ブログ開設期に何度か言われました。運営者に負荷がかかりすぎないようにしたいというマネージメント的な意図だと思います。しかし、<strong>持ち回り制は個人的に悪魔の囁き</strong>だと思っています。なぜならブログの運営タスクをこなすことは、<strong>最初に立ち上げた人以外にメリットが少なく</strong>、最初は有志で回せても、代を経るごとにいつしか<strong>いつの間にか増えたタスク</strong>になりがちです。こういった開設時の思いが失われたタスクは、ある時、感謝とともに別れを告げられることになるでしょう。また、そうでなくても<strong>持ち回り制だと運営のナレッジが蓄積されません</strong>。本当に改善の余地が無く陳腐化したタスク（例が適切かわからないですが経費申請とか）であれば別ですが、創意工夫の余地が多分にあるチームのエンジニア文化を高めて外部に上手く発信するブログ運営という役割は、まだまだ熱量のある有志で運営したほうが良いと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>社内チャットなどで勉強になったり独特だなと思ったことを見つける</li><li>書いてくれそうな人に頼んで、会議通知を送る</li><li>入稿が遅れても気にしない。承諾してくれただけで協力者として感謝しかない</li></ul><p>＞フューチャーの皆さん</p><p>企業ブログ運営もその位置づけをどう捉えるかによって、創造的だし面白いし学びも多いと思います。興味がある方はぜひ一緒に盛り上げていきましょう。運営スタッフ募集しています。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事:"></a>関連記事:</h1><ul><li><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り🌸連載を始めます</a></li><li><a href="https://future-architect.github.io/articles/20190425/">Qiita Jobsを始めました</a></li><li><a href="https://future-architect.github.io/articles/20160216/">ごあいさつ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニットの真野です。フューチャー技術ブログの運営の1人です。&lt;a href=&quot;https://note.futu
      
    
    </summary>
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸連載を始めます</title>
    <link href="https://future-architect.github.io/articles/20200529/"/>
    <id>https://future-architect.github.io/articles/20200529/</id>
    <published>2020-05-29T02:56:30.000Z</published>
    <updated>2020-06-04T12:52:08.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニットの真野です。技術ブログの運営もやっています。</p><p>本記事はフューチャー技術ブログでの企画のお知らせになります。6/1〜25の「<strong>春の入門祭り🌸</strong>」と題して、土日を除く毎日、記事を公開いたします。</p><img src="/images/20200529/photo_20200529_01.jpeg"><a href="https://pixabay.com/ja/users/pixel2013-2364555/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1510602" target="_blank" rel="noopener">S. Hermann &amp; F. Richter</a>による<a href="https://pixabay.com/ja/?utm_source=link-![flower-meadow-1510602_1280.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/6463/a1fc97ab-4cc8-57f2-c5ad-a02bd9c64cd0.jpeg)attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1510602" target="_blank" rel="noopener">Pixabay</a>からの画像<p>6月といえば、入学・入社をされた方々が新しい環境に慣れ、新社会人のエンジニアな皆さまは新人研修がちょうど終わる頃では無いでしょうか？該当する方も、そうでない方も、さらなる飛躍を目指して新しいことに挑戦しようという意欲も高まって来る時期なのかなと思います。</p><p>本企画は<strong>何か新しいことを学ぶキッカケづくり</strong>として、<strong>様々な種類の入門記事を連続で公開</strong>しようといったことをテーマにしています。それ以外の制約は特になく各執筆者にお任せしています。今まで一度もフューチャー技術ブログに投稿したことが無いメンバーが多く参加していただいています。こういった企画を通して有益な情報をカジュアルに発信する文化が、もっと広がれば良いなと願っています。</p><h1 id="執筆スケジュール"><a href="#執筆スケジュール" class="headerlink" title="執筆スケジュール"></a>執筆スケジュール</h1><p>TIG（Technology Innovation Unit）やCSIG(Cyber Security Innovation Group)から多数の人が投稿します。順次リンクが有効になっていきますのお楽しみに。記事は日付の午前中に公開していく予定です。</p><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>6/1</td><td>辻大志郎</td><td><a href="/articles/20200601/">Goのテストに入門してみよう！</a></td></tr><tr><td>6/2</td><td>伊藤太斉</td><td><a href="/articles/20200602/">Google Cloud Platform 101</a></td></tr><tr><td>6/3</td><td>村田靖拓</td><td><a href="/articles/20200603/">ゼロから始めるFlutter生活</a></td></tr><tr><td>6/4</td><td>西田好孝</td><td><a href="/articles/20200604/">NW入門</a></td></tr><tr><td>6/5</td><td>村瀬善則</td><td><a href="/articles/20200605/">データベース テーブル設計入門</a></td></tr><tr><td>6/8</td><td>栗田真</td><td>クロスコンパイラ作ってみた！</td></tr><tr><td>6/9</td><td>真野隼記</td><td>初めてのGraphQL</td></tr><tr><td>6/10</td><td>澁川喜規</td><td>文字列の差分表示入門</td></tr><tr><td>6/11</td><td>岸本卓也</td><td>grep入門</td></tr><tr><td>6/12</td><td>李光焄</td><td>KeyCloak入門</td></tr><tr><td>6/15</td><td>佐藤尚至</td><td>Docker入門</td></tr><tr><td>6/16</td><td>川島誠一</td><td>DB（データモデル設計）</td></tr><tr><td>6/17</td><td>福谷友宏</td><td>Swift Compositional Layouts入門</td></tr><tr><td>6/18</td><td>竹中陽平</td><td>暗号通信入門</td></tr><tr><td>6/19</td><td>久保樹礼</td><td>実際に「その仕事、Slackで。」してみた事例を紹介</td></tr><tr><td>6/22</td><td>二瓶賢</td><td>webpack環境構築入門</td></tr><tr><td>6/23</td><td>町田聖慈</td><td>ElasticSearch入門</td></tr><tr><td>6/24</td><td>伊藤太斉</td><td>Terraform入門</td></tr><tr><td>6/25</td><td>谷田彩花</td><td>Chromeの拡張機能作ってみた！</td></tr></tbody></table><p>※正確なタイトルは直前で変更するかも知れませんが、ご了承ください！</p><p>＞フューチャーの皆さまへ<br>自分も飛び入りで参加したい！って方は早めに真野まで連絡ください👷</p><h1 id="他にも連載企画がざくざく"><a href="#他にも連載企画がざくざく" class="headerlink" title="他にも連載企画がざくざく"></a>他にも連載企画がざくざく</h1><p>他にも多くの連載企画を行っています。特に <strong>インフラ入門</strong> 記事は類似のテーマを掲げていますので、ぜひインフラエンジニアに関心がある方はチェックしていただきたいなと思ってます。</p><ul><li><a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a></li><li><a href="/tags/GoCDK/">Go Cloud</a></li><li><a href="/tags/Auth0/">Auth0</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li></ul><p>春の入門祭り🌸は人数が多く集まったため、たまたまインデックスページを作りましたが、他の連載も力作ぞろいです。</p><p>まだまだStay Homeな日が続く大変な日々ですが、少しでも皆さまの役に立てればなと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXユニットの真野です。技術ブログの運営もやっています。&lt;/p&gt;
&lt;p&gt;本記事はフューチャー技術ブログで
      
    
    </summary>
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="introductory" scheme="https://future-architect.github.io/tags/introductory/"/>
    
  </entry>
  
  <entry>
    <title>あなたのGoアプリ/ライブラリのパッケージ構成もっとシンプルでよくない？</title>
    <link href="https://future-architect.github.io/articles/20200528/"/>
    <id>https://future-architect.github.io/articles/20200528/</id>
    <published>2020-05-28T00:49:19.000Z</published>
    <updated>2020-05-28T00:57:48.224Z</updated>
    
    <content type="html"><![CDATA[<p>Goでプロジェクトのフォルダ構成どうしよう、とググると見つかる<a href="https://github.com/golang-standards/project-layout" target="_blank" rel="noopener">Standard Go Project Layout</a>。とはいえ、これはかなりコード量を増やしてしまう恐れがありますので、導入する場合のデメリットも考えておく方が良いです。</p><p>特に、プログラマーは、最初にみたプログラミング言語のフォルダ構成を親だと思う特性があり、Javaや.NETに影響されるとかなり細かくフォルダを切りたくなったり、package privateなど細かく可視性を制御しようとしたりして、なおかつ「privateのテストってどうすべきなんですか？」とか議論を始めたりもしますが、Go先生によれば<a href="https://github.com/golang/go/tree/master/src/os" target="_blank" rel="noopener">これぐらい</a>は1パッケージにファイルをぶっこんでもいいわけです。勇気を持ちましょう。</p><p>本エントリーでは、小中規模のGoプロジェクト、あるいは小さいところから少しずつ育てていく上でのパッケージ構成について紹介します。すでにメンバーが慣れている構成があるならそれを維持したほうが良いです。</p><p>あと、再利用という言葉の意味が同僚と話をしていて、人によって違いそうだなと思ったので「そのまま利用」「コピーして利用」というのは適宜追記しています。</p><h1 id="事前知識"><a href="#事前知識" class="headerlink" title="事前知識"></a>事前知識</h1><p>Goには処理系にハードコードされたいくつか特別なルールがあります。</p><ul><li>フォルダがパッケージ<ul><li>フォルダ内のファイルは基本的に同じパッケージでないといけない（テスト専用の<code>&lt;package&gt;_test</code>だけは共存可能）</li></ul></li><li>エントリポイントがあるパッケージは<code>main</code>パッケージでなければならない</li><li><code>vendor</code><ul><li>import時にまずこのパスを見にいきます。用途としては、go getせずにそのリポジトリだけで動くようになります。また、サードパーティのパッケージをちょっと改変したいときに使ったりしますが、今だとgo.modのreplaceディレクティブで同じことができます。</li></ul></li><li><code>internal</code><ul><li>この中に置いたコードは外部のパッケージから利用できなくなります。</li></ul></li><li>無視されるフォルダ<ul><li><code>.</code>と<code>_</code>で始まる名前と、<code>testdata</code>と言う名前のフォルダ内部は、Goの処理系がコンパイル対象から除外します。例えば静的解析ツールを実装していてテストデータとしてgoコードを置いておきたい場合とか、NGケースのGo処理系でコンパイルエラーになるはずのコードなどは<code>testdata</code>フォルダの中に置く</li></ul></li><li>パッケージのimportが循環してはダメ<ul><li>これは他の言語でも大抵そうだと思うので問題はないかと思います。動的言語のPythonだとパッケージグローバルではなく、関数の中でimportすることで循環してもなんとかする悪のテクニックはありますが、あまりやらない方がいいです</li></ul></li><li>親パッケージと子パッケージは独立したパッケージ<ul><li>フォルダの上下関係で親子があっても、親と子は独立しています。親→子に依存があっても、子→親の依存があっても問題はありません。上記のルールの循環だけ気をつければOKです</li></ul></li><li>go gettable<ul><li>リポジトリにはソースコードのみ、成果物を入れるな、みたいなのはVSSとかRCSの時代からのコード管理の鉄則でしたが、良くも悪くもGoも含めて近年はパッケージ管理とも密接に結びついちゃっています。ライブラリの場合だと特にgo getしただけで動くgo gettableというのが好まれます。npmのようにビルドした結果をパッケージとしてアップする方式だと分離も可能ですし、npmだとさらにインストール後になんかをするスクリプトが組めるのですがGoにはどちらもありません。Goだと、例えばgRPCのためにprotobufから生成したファイルを入れた方が便利ですね、となります。</li></ul></li></ul><p>それ以外のポイントとしては同一のパッケージ名はなるべく避けた方が良いです。特に標準ライブラリとのコンフリクトは避けるべきです。import時に同一パッケージ名の要素をいくつも利用したくなったとすると、必ず別名を設定しないといけなくなります。処理系ではないですが、コード補完との相性があります。同一名称のパッケージがあると、コード補完がなかなかうまく決まらず、間違ったものを選択して想定外のimport文が追加されたりといった経験をお持ちの方は多いと思います。この問題があるので、細かくパッケージを分けるよりかは、まるっと大きめなパッケージにして、ファイルの先頭がimportで埋め尽くされる、みたいなことは避けた方がましかな、と思っています。</p><p>Go以外の他のルールとしては、GitHubがGitHub pagesのウェブサイトを公開する場合に、masterブランチの<code>/docs</code>フォルダを公開する、というのがあります。</p><p>このあたりはいちユーザーの意思で変わるものではないので、素直に従う必要があり、これ前提のルールを作る必要があります。</p><p>ハードコーディングされていない推奨の考え方としてはパッケージ名は1つの単語で熟語にはしない、というのがありますが、たまに他のルールとぶつかるので、ここは柔軟に対応すればいいと思います。</p><h1 id="最小構成"><a href="#最小構成" class="headerlink" title="最小構成"></a>最小構成</h1><p>一番Goらしさが溢れる最小構成はこれだと思います。実行ファイルは<code>cmd</code>フォルダ内にさらにアプリケーション名のフォルダを作ります。そこの内部は<code>main</code>パッケージにして、<code>main</code>関数が含まれる<code>main.go</code>を置きます。</p><p>必要であれば、<code>/docs</code>（ドキュメント）、<code>/testdata</code>などを足しましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;projectroot&gt; (projectrootパッケージ)</span><br><span class="line"> + cmd</span><br><span class="line"> | + &lt;application1&gt; (mainパッケージ)</span><br><span class="line"> | |  + main.go</span><br><span class="line"> | + &lt;application2&gt; (mainパッケージ) </span><br><span class="line"> |    + main.go</span><br><span class="line"> + project.go</span><br><span class="line">   :</span><br></pre></td></tr></table></figure><p>cmdもなくして、全部をmainパッケージにしてしまうというさらにエクストリームな方法もありますが、起動部分とコアの部分を分けることは、再利用（そのまま呼ぶ）やテストのしやすさの観点では最低限守るべきラインかと思います。また、コードが育って大きくなったときに、mainの位置を変える、パッケージ名を変えるというのはコード全般に影響のある大きな変更になるので、仮に全部mainパッケージでおさまる程度の小さいコードであっても、大した手間ではないので、cmdフォルダを作ってその中でやる方が変更時の手間も削減できます。</p><p>この構成の場合は、mainパッケージはなるべく薄くして、なるべくprojectのルートの方のmainではないパッケージにコードを寄せていく方が良いです。僕はコマンドライン引数のパースと起動時の条件確認ぐらいはmainパッケージでやりたいですが、<a href="https://songmu.jp/riji/entry/2019-07-16-gocon-fukuoka.html" target="_blank" rel="noopener">mainを究極まで薄くしたい派</a>の人もいますし、ここはお好みで。</p><h1 id="もっとコードを大きくしていく場合"><a href="#もっとコードを大きくしていく場合" class="headerlink" title="もっとコードを大きくしていく場合"></a>もっとコードを大きくしていく場合</h1><p>コードが順調に育ってフォルダを分けたくなりました。今までは、起動部分は<code>cmd/&lt;application&gt;</code>にあり、コードの大部分や例えばアプリケーションのモードを表すenum的な型とか定数は<code>&lt;projectroot&gt;</code>にいたとします。ここでサブパッケージを追加するのですが、ここでコーディング方針の意思決定が必要になります。</p><p>単純にフォルダを切ってコードをそっちに持っていくと、共通の定数やら型定義が<code>&lt;projectroot&gt;</code>にいるので、この<code>&lt;projectroot&gt;</code>と、サブフォルダで循環しちゃうのですよね。対策はいくつかあります。</p><img src="/images/20200528/photo_20200528_01.png" class="img-small-size"><h2 id="common的なパッケージを作る"><a href="#common的なパッケージを作る" class="headerlink" title="common的なパッケージを作る"></a>common的なパッケージを作る</h2><p>ナイーブに設計していくと登場しがちなのがこのパターンです。循環参照しちゃった場合、両方から参照されうるものを切り出して移動することで解消します。<code>common</code>という名前は良くない、と言われることが多いのですが、もし、その切り出したものを表すきちんとしたパッケージ名が編み出せるならありです。</p><img src="/images/20200528/photo_20200528_02.png" class="img-small-size"><p><a href="https://dave.cheney.net/2019/01/08/avoid-package-names-like-base-util-or-common" target="_blank" rel="noopener">commonとかbaseとかutilという名前を付けるぐらいなら1つのパッケージにまとめてしまえ</a>という人もいます。</p><h2 id="ルートのロジックを廃していく"><a href="#ルートのロジックを廃していく" class="headerlink" title="ルートのロジックを廃していく"></a>ルートのロジックを廃していく</h2><img src="/images/20200528/photo_20200528_03.png" class="img-small-size"><p>HTTPのハンドラーの初期化は<code>handlers</code>パッケージ、DB初期化コードは<code>repositories</code>パッケージ、のように切り分けて、コードを全部サブフォルダ側に移動します。欠点としてはエントリーポイントの<code>main.go</code>が太りやすい点ですかね。</p><h2 id="ルートの定数や共通のものを末端パッケージに移動する"><a href="#ルートの定数や共通のものを末端パッケージに移動する" class="headerlink" title="ルートの定数や共通のものを末端パッケージに移動する"></a>ルートの定数や共通のものを末端パッケージに移動する</h2><img src="/images/20200528/photo_20200528_04.png" class="img-small-size"><p>起動後のちょっとした処理（DB初期化とか）がルートにあったとして、<code>&lt;projectroot&gt;</code>から<code>handlers</code>などのサブフォルダに一部ロジックとともに定数定義などもまるごと移譲する方法があります。うまくいけば、完全に一方的に利用されるだけの疎なパッケージができます。ここでは<code>handlers</code>みたいなアプリケーションの一部を例に説明していますが、独立した機能でパッケージが構成できれば、そのまま切り出してgo getで利用する独立パッケージ化して他のプロジェクトから利用したり、OSS化できたりもするでしょう。</p><p>欠点としては、ここではサブパッケージは1つだけなので問題ないですが、さらにパッケージが増えて各パッケージの定数で似たようなものが登場すると、定数変換みたいなロジックが必要になったり、詰替え作業が発生する可能性がある点ですかね。</p><h2 id="抽象と具象で階層化する"><a href="#抽象と具象で階層化する" class="headerlink" title="抽象と具象で階層化する"></a>抽象と具象で階層化する</h2><p>今回のようにアプリケーションが育っていく過程でロジックを分割する流れだとそこまで発生しないかもしれませんが、標準ライブラリの<code>crypto</code>や<code>hash</code>などは、親のパッケージが抽象インタフェース、子のパッケージが詳細実装のように分かれています。依存は子から親方向です。ちょっと大規模なライブラリでは共通要素を置く方法としてこのケースが登場することもあるでしょう。</p><h1 id="各論"><a href="#各論" class="headerlink" title="各論"></a>各論</h1><h2 id="internal使う？"><a href="#internal使う？" class="headerlink" title="internal使う？"></a><code>internal</code>使う？</h2><p>個人的には使わなくてもいいかなと思います。少なくともアプリケーションでは完全にナンセンスですね。他からアクセスされないようにするというのはライブラリとしての利用の時なので、アプリケーションコードでは完全に無です。<a href="https://gakkenmu.jp/" target="_blank" rel="noopener">ムー</a>。</p><p>Go本体のコードの悪いところでもあると思うのですが、<code>internal</code>内部で宣言されているせいで、同じことをやりたいためにコードの丸コピーが作られたりして、かえって保守性が悪くなったりというのもあります。</p><p>importでそのまま利用する再利用性を担保したい場合には使う理由は一切ありません。コードコピーで再利用する方針であれば使っても良いです。</p><h2 id="ドメイン-レイヤー？-or-レイヤー-ドメイン？-or-ドメイン？-or-レイヤー？"><a href="#ドメイン-レイヤー？-or-レイヤー-ドメイン？-or-ドメイン？-or-レイヤー？" class="headerlink" title="ドメイン/レイヤー？ or レイヤー/ドメイン？ or ドメイン？ or レイヤー？"></a>ドメイン/レイヤー？ or レイヤー/ドメイン？ or ドメイン？ or レイヤー？</h2><p>クリーンアーキテクチャをGoに導入する場合にどうすればいいのか議論になりがちなのがここですね。議論が盛り上がるポイントです。</p><p>ドメイン/レイヤーでも、レイヤー/ドメインでも、2階層作ると、例えばユーザー認証のDBのモデルとか、共通で使いたい部品とかが出てきて、ドメインまたぎでimportしたくなった場合にちょっと問題が発生します。同一名称のパッケージが複数あるため、コード補完が聞きにくく、場合によってはパッケージ名のエイリアスを毎回定義しないといけなくなったりします。コードの可読性は落ちますね。</p><p>レイヤーで分けるか、ドメインで分けるかですが、個人的にはドメインで分けたいですね。ドメインで分けると、ドメイン間で依存が発生する場合に循環に気をつけないといけないのですが、循環しないようなドメイン設計ができればデータモデルなどの構造はきれいになるかと思います。循環できないことを逆手に取って設計をきれいにする。マイクロサービス化しますねー、というときもやりやすくなるかと思います。あと、クリーンアーキテクチャ的にはNGかもしれませんが、Goって構造体にタグを書いてデータを流し込みますよね。JSONタグと、ORMタグの両方を書いて、HTTP APIとDBアクセスの両方で同じ構造体を使っちゃうのも選択肢かなぁと思います。</p><p>レイヤーで分けると、ドメイン間の依存は比較的自由でやりやすくなります。またレイヤー間での依存は比較的観測しやすくなるため、ジュニアなメンバーが多くて、コードレビューの負荷を減らしたい、という場合に良いと思います。その代わり、レイヤー間でのバケツリレーなコードは一生懸命作らないといけなくなるかもしれません。</p><p>このあたりはチームで話し合って決めると良いと思います。</p><p>なお、同一DBテーブルを参照する場合にも、ドメイン間でimportしないで、全部コピーしてドメイン間の依存をなくすという過激派もいます。コードは重複しますが依存性やimport文のエイリアス問題は解決します。</p><h2 id="あえてフォルダを分けるケース"><a href="#あえてフォルダを分けるケース" class="headerlink" title="あえてフォルダを分けるケース"></a>あえてフォルダを分けるケース</h2><p>このエントリーではフォルダをあまりわけない方向で話を進めていますが、明確にフォルダを切った方が良いケースもあります。</p><p><a href="https://gocloud.dev" target="_blank" rel="noopener">gocloud.dev</a>では、共通APIの下に、各クラウドサービスのアダプタのサブパッケージがあります。それぞれのパッケージは<code>import</code>するだけで<code>init()</code>が各アダプタをインストールして使えるようにします。<code>init()</code>の副作用があり、依存が大量についてまわるので、分けるほうが良いでしょう。GCPとAWSとAzureの全SDKをリンクすると、結構なバイナリサイズになってしまいますので。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">"gocloud.dev/docstore/gcpfirestore"</span></span><br></pre></td></tr></table></figure><p>OpenTelemetryは<code>init()</code>の副作用はなく、明示的に初期化が必要ですが、パッケージは別れています。連携先ごとにパッケージが独立したほうが、自分でプラグインを書いてみたい人が勉強するには単機能のコードだけがわかりやすく分離されているので学びやすいですね。<code>init()</code>はなくても、パッケージグローバルな変数定義とかで利用していない機能の依存が発生してしまう可能性はあるので、分ける方が安全といえば安全。</p><p><a href="https://github.com/open-telemetry/opentelemetry-go" target="_blank" rel="noopener">https://github.com/open-telemetry/opentelemetry-go</a></p><h2 id="vendor使う？"><a href="#vendor使う？" class="headerlink" title="vendor使う？"></a><code>vendor</code>使う？</h2><p><code>vendor</code>は最初に説明したとおり必要性は薄くなっています。既製のライブラリの改変はgo modが使えますからね。一方で、ちょっと便利かなと思っているのはプライベートリポジトリに依存する場合です。</p><p>アプリケーションも共通なライブラリも両方プライベートな場合にDockerイメージを作る、CIでビルドするといったときに結構厄介なのがプライベートリポジトリへのアクセス方法です。環境変数で秘密鍵をわたして、RUN芸を駆使して、一筆書きでprivateリポジトリのチェックアウトをして消すとか、いろいろ頑張っているコードを見たことがあります。</p><p>cloud buildみたいなそれに対するソリューションを用意してくれているものもありますが、いっそのこと、vendorに依存コードを全部入れてからビルド、みたいにしたほうが楽じゃないかと思います。Docker内部でプライベートリポジトリアクセスが必要じゃなくなりますからね。</p><p>Dockerfileの中で頑張るのか、docker buildの前にgo mod vendorを実行するようにするか、いっそのことgo mod vendorを実行した結果もリポジトリに入れてしまうか。どこをシンプルにしたいか次第かな、と思います。最近のGoもNode.jsみたいに依存使いまくる感じになってきてコンテキストのコピーの時間が増えているのでトレードオフはあります。</p><h2 id="tools使う？"><a href="#tools使う？" class="headerlink" title="tools使う？"></a><code>tools</code>使う？</h2><p>コード生成等に使うスクリプトやツールなどの宣言場所として<code>tools</code>フォルダが好まれてきました。特にgo getして動くGo製アプリケーションを利用する場合、アプリケーションのルートのgo.modでツールを宣言してしまうと、go getする人が、ライブラリの利用では必ずしも必要がないツールまでダウンロードさせられてしまいます。みんな在宅で、家でNetflixとかを見まくって回線が輻輳して遅くなっている昨今では、余計なダウンロードをさせるのは邪悪な行為です。そのため、<code>tools</code>フォルダ内で<code>go mod init</code>して、開発者のみが利用するツールはそこで宣言するということが行われてきました。</p><p>現在は、わざわざパッケージを作らなくても、<code>go:generate</code>に<code>go run</code>から書くことで、ダウンロードして実行まで一行で対応できます。ルートのgo.modに依存を書く必要はありません。Go製以外のツールを使う場合にはあってもいいと思いますが、Go製ツールだけなら今どきは不要と言えます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:generate go run github.com/go-swagger/go-swagger/cmd/swagger generate server -f swagger.yaml --target=webapi --exclude-main</span></span><br></pre></td></tr></table></figure><h1 id="Standard-Go-Project-Layoutについて個人的に気になる点"><a href="#Standard-Go-Project-Layoutについて個人的に気になる点" class="headerlink" title="Standard Go Project Layoutについて個人的に気になる点"></a>Standard Go Project Layoutについて個人的に気になる点</h1><p>いろんなプロジェクトの最大公約数でしかないので、あんまり教条的にこれに従うとかは考えなくてもいいかなと思います。気になったフォルダのREADMEにはどのプロジェクトが使っているか、といったことが書かれているので、それを見て取り入れたいものだけを取り入れるスタイルでよいかと思います。個別に気になる点は以下の通り。</p><ul><li><code>testdata</code>には触れていないですね。少なくともGoでのテスト系の要素はGoコードじゃなくてもtestじゃなくて<code>testdata</code>に入れる方が良いかと思います。あえて分ける必要もないので。</li><li><code>examples</code>はコンパイル対象になってしまう。<code>_examples</code>とかにした方が良さそう</li><li>本文でも説明したが<code>internal</code>はアプリケーションでは意味がないという説明がない</li><li>ルートフォルダの扱いについては説明がないですね。ここに共有の定数定義とかEnum定義を書くとか。共有コードの置き場所についても特になさそう</li><li>websiteはgithub pagesで公開するならdocsにドキュメントの成果物を入れる運用の方がスムーズで良いなと思います。gh-pagesブランチとかもありますが、ブランチだとstableとunstableの複数バージョンで内容違いとかが作れないので。ドキュメントのソースのmdなりsphinxをどこに置くのかは検討が必要ですが、僕はdocsrcとかにするかな？</li><li>別にStandard Go Project Layoutのせいじゃないけど、クリーンアーキテクチャの用語のEvilさはなんとかならないですかね。DDDもそうだけど。言葉を大事にして欲しい。「リポジトリ」という言葉で惑わされる若者を今週また見かけました。</li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>フォルダ構造を考えるときでも、普段のコーディングでも、そのルールを変える要件が発生したときにいつでも変えられる柔軟さをもったまま、なるべくシンプルであれ、と思っているため、それを書いて見ました。</p><p>人はルールを作るときは厳しめのルールの方がいい、と思ってしまいがちです。特に、ルールを決める人と、そのルールに従う人が別の場合は顕著です。Goでも細かーく丁寧にフォルダを切りまくっている案件を数多く見てきました。物事はバランスです。厳しくなるフォースだけしかないと、バランス調整が働かず、不具合発生のたびに厚くなる障害対策マニュアルみたいになりがちです。ちょうど良いバランスを維持するためには「そんな頑張らなくてもいいサー」「なんくるないさー」と言うおっさんが1人は必要なわけです。とくにGoのパッケージ構成でググると最初に出てくるのが一番厳しめルールということで、ただでさえコードが長くなりがちなGoのコードが長くなって、Go嫌いになったりしたらいやだなぁ、Goはシンプルにスタートできるんですよ、という気持ちで書きました。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Goでプロジェクトのフォルダ構成どうしよう、とググると見つかる&lt;a href=&quot;https://github.com/golang-standards/project-layout&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Standard Go Pr
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips連載8: logパッケージでログ出力している場所の情報を出す</title>
    <link href="https://future-architect.github.io/articles/20200527/"/>
    <id>https://future-architect.github.io/articles/20200527/</id>
    <published>2020-05-27T01:36:36.000Z</published>
    <updated>2020-06-03T02:46:20.279Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200527/top.png" class="img-small-size"><p><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a>の第8弾です。</p><p>Go tipsということで、シンプルネタを投稿します。</p><p>検索窓に入れると「printデバッグでいつまで消耗しているの？」とか「printデバッグにさようなら」とかサジェストされつつも、根強く生き残っているのがprintデバッグです。むしろ、非同期だったり並列処理だったりプロセスまたぎ、ホストまたぎが増えてくると、同期的に動くデバッガーが逆に使いにくかったりもありますし、デバッガーを使うにしてもブレークポイントを仕掛ける場所のあたりをつけるためにprintデバッグの力を借りたりもあるし、いっそのことprintデバッグの方が進化しろ、と個人的には思っています。分散トレーシングは進化したprintデバッグだと思っています。</p><p>Goでprintデバッグの友といえば標準ライブラリの<a href="https://golang.org/pkg/log/" target="_blank" rel="noopener">logパッケージ</a>ですね。logパッケージには色々カスタマイズポイントがありますのでそれを紹介します。</p><h1 id="ログ出力している場所を表示"><a href="#ログ出力している場所を表示" class="headerlink" title="ログ出力している場所を表示"></a>ログ出力している場所を表示</h1><p>printデバッグをするには、どこから出力された文字列かが分からないと意味がありません。Goの標準のログ出力だと、日付と時間の情報が付与されるだけです。ここはフラグで変更できます。フラグはこんな感じで定義されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ldate         = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span>     <span class="comment">// the date in the local time zone: 2009/01/23</span></span><br><span class="line">Ltime                         <span class="comment">// the time in the local time zone: 01:23:23</span></span><br><span class="line">Lmicroseconds                 <span class="comment">// microsecond resolution: 01:23:23.123123.  assumes Ltime.</span></span><br><span class="line">Llongfile                     <span class="comment">// full file name and line number: /a/b/c/d.go:23</span></span><br><span class="line">Lshortfile                    <span class="comment">// final file name element and line number: d.go:23. overrides Llongfile</span></span><br><span class="line">LUTC                          <span class="comment">// if Ldate or Ltime is set, use UTC rather than the local time zone</span></span><br><span class="line">Lmsgprefix                    <span class="comment">// move the "prefix" from the beginning of the line to before the message</span></span><br><span class="line">LstdFlags     = Ldate | Ltime <span class="comment">// initial values for the standard logger</span></span><br></pre></td></tr></table></figure><p><code>Lmicroseconds</code>のマイクロ秒単位の時間情報があれば、パフォーマンスが遅い、計測が必要な場所のあたりをつけるのに便利そうですね。ファイル名を付与するには、<code>log.Lshortfile</code>か<code>log.Llongfile</code>を付与します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">"標準状態"</span>)</span><br><span class="line">log.SetFlags(log.LstdFlags | log.Lshortfile)</span><br><span class="line">log.Println(<span class="string">"🐙 ファイル名を付与"</span>)</span><br><span class="line">log.SetFlags(log.LstdFlags | log.Llongfile)</span><br><span class="line">log.Println(<span class="string">"🦑 ディレクトリ付きのファイル名を付与"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フォルダはデフォルトではフルパス表示されますが、いまどきは<code>-tirmpath</code>つけてビルドするでしょうし、そうなるとパッケージ名＋相対パスだけになります。</p><img src="/images/20200527/1.png"><h1 id="出力先とかログに決まった文字列を追加"><a href="#出力先とかログに決まった文字列を追加" class="headerlink" title="出力先とかログに決まった文字列を追加"></a>出力先とかログに決まった文字列を追加</h1><p>他にも出力先とかも変更できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">"標準状態"</span>)</span><br><span class="line">log.SetPrefix(<span class="string">"🍤 "</span>)</span><br><span class="line">log.Println(<span class="string">"prefixをセット"</span>)</span><br><span class="line">log.SetOutput(&amp;OrigWriter&#123;&#125;)</span><br><span class="line">log.Println(<span class="string">"出力先を変更"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回は出力先が変わったことがすぐわかるようにちょっとio.Writerを作っていますが、実際はio.MultiWriterを使って、ネットワークとかファイルにクロスポストするぐらいですかね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> OrigWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w OrigWriter)</span> <span class="title">Write</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Fprintf(os.Stderr, <span class="string">"[stderr] %s"</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ファイル名の出力を入れると便利です。また、絵文字を今回サンプルに使いましたが、絵文字って色がつくので（たとえ<a href="https://play.golang.org/p/-wnBrYmGqwI" target="_blank" rel="noopener">go playground</a>であっても）視認性がいいんですよね。絵文字を<code>log.SetPrefix()</code>に入れてあげるのもおすすめです。絵文字を使う場合はグリフが半角相当の幅か全角相当の幅かはターミナルの設定によって出力のされ方が変わることがあり、半角の幅だと絵に次の文字がめり込んでよみにくくなるため、絵文字の後ろには半角スペースを入れておくのをおすすめします。</p><img src="/images/20200527/2.png"><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200527/top.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/tags/GoTips%E9%80%A3%E8%BC%89/&quot;&gt;Go Tips連載&lt;/a&gt;の第8弾です。&lt;/p&gt;
&lt;p&gt;Go tip
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>新米エンジニアが１か月のトラブルシューティングで学んだこと</title>
    <link href="https://future-architect.github.io/articles/20200526/"/>
    <id>https://future-architect.github.io/articles/20200526/</id>
    <published>2020-05-26T00:27:03.000Z</published>
    <updated>2020-05-26T00:44:11.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="まえがき"><a href="#まえがき" class="headerlink" title="まえがき"></a>まえがき</h1><p>はじめまして。TIG DXチームにアルバイトとして参加させていただいている本田直樹と申します。<br>昨年12月にAtCoder Jobs経由でアルバイト採用していただき、今月でちょうど半年になります。普段は文系大学生をしています。</p><p>採用後のアルバイトの作業は、</p><ul><li>ゲームエンジンを利用したIoT情報可視化ツールの開発<ul><li><a href="https://qiita.com/Khdbble/items/491a48effc8dd4bd1133" target="_blank" rel="noopener">Qiita記事をフューチャーのAdventCalendarに投稿</a></li><li><a href="https://future-architect.github.io/articles/20200209/">golang.tokyo #29に社員の先輩方と登壇</a></li></ul></li><li>IoTクラウドインフラの開発<ul><li>現在進行形でお手伝いしています</li></ul></li></ul><p>に携わらせていただいております。</p><p>今回は、アルバイト業務でシステム開発するにあたり、ProxyやDNSなどのネットワーク周りで一か月強も溶かしてしまったので、その過程で学んだトラブルとの向き合い方についてまとめます。</p><h1 id="トラブルの内容"><a href="#トラブルの内容" class="headerlink" title="トラブルの内容"></a>トラブルの内容</h1><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>WSL (Ubuntu 18.04)</li><li>Go言語(go1.14.2 linux/amd64)</li></ul><p>※ VPN経由インターネットに接続する際は社内の認証付きプロキシサーバーを経由する。<br>  VPNを経由しない場合は、認証なしでプロキシサーバーを経由する</p><h2 id="エラーメッセージ"><a href="#エラーメッセージ" class="headerlink" title="エラーメッセージ"></a>エラーメッセージ</h2><p>Go言語では、テストを走らせる(<code>go test</code>)際に、ソースコードでimportしている依存パッケージがローカルに存在するか確認し、ないものについては<code>go get</code>(適切なパスに<code>git clone</code>でパッケージをダウンロード)して、テストのための準備を自動でしてくれます。</p><p>今回のエラーは、<code>go test</code>の際に行われる<code>go get</code>の部分で発生しました。エラーメッセージは以下の通りです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span></span><br><span class="line">go: &#123;パッケージ名&#125;: unrecognized import path <span class="string">"&#123;パッケージ名&#125;"</span></span><br><span class="line">(https fetch: Get https://&#123;パッケージURL&#125;?go-get=1:</span><br><span class="line">proxyconnect tcp: dial tcp:</span><br><span class="line">lookup http on &#123;DNSサーバーのIPアドレス&#125;:53: server misbehaving)</span><br></pre></td></tr></table></figure><p><strong>この事象はリモート環境の時のみ見られ</strong>、現在の出社できない状況(※フューチャーは2020/05/26時点では原則出社NG)ではこれを解決しないと開発に取り組めない状況でした。</p><h2 id="コマンドプロンプトでの実行結果"><a href="#コマンドプロンプトでの実行結果" class="headerlink" title="コマンドプロンプトでの実行結果"></a>コマンドプロンプトでの実行結果</h2><p>全く同様の環境変数、<code>git config</code>、<code>go env</code>の設定で、コマンドプロンプトで実行したエラーメッセージは以下の通りです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span></span><br><span class="line">go: &#123;パッケージ名&#125;: unrecognized import path <span class="string">"&#123;パッケージ名&#125;"</span></span><br><span class="line">(https fetch: Get https://&#123;パッケージURL&#125;?go-get=1:</span><br><span class="line">proxyconnect tcp: dial tcp: 52.206.222.245:443: connectex: </span><br><span class="line">An attempt was made to access a socket <span class="keyword">in</span> a way forbidden by its access permissions.</span><br></pre></td></tr></table></figure><p>エラーメッセージが異なるので、別物の原因があるのかと思われましたが、結果的には同じ原因によって発生してることが<a href="#小話wslとエラーメッセージが異なった理由">後述の内容</a>で分かります。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>プロキシの認証用に設定していたユーザー名、パスワードにURLで使用不可とされる（使う際にURLエンコードを必要とする）記号が含まれていて、<code>go get</code>コマンドの実行時にプロキシサーバのURLのパースに失敗していた。</p><h1 id="解決に向けて行ったこと"><a href="#解決に向けて行ったこと" class="headerlink" title="解決に向けて行ったこと"></a>解決に向けて行ったこと</h1><h2 id="0-原因の切り分けと仮説検証"><a href="#0-原因の切り分けと仮説検証" class="headerlink" title="0:原因の切り分けと仮説検証"></a>0:原因の切り分けと仮説検証</h2><p>この部分が最も自分が勉強になった部分で、他のケースでも参考になる部分だと思います。<br><a href="https://qiita.com/keigodasu/items/a9af6512bf0ae942ca9f" target="_blank" rel="noopener">こちらの記事</a>も参考にさせていただきました。</p><p>問題が発生したときに、とるべき手順として、</p><pre><code>1. トラブルの内容や起こった状況を明確にする2. 原因となる可能性のある分野の切り分けを行う3. 切り分けた内容からエラーの原因についての推測/仮説を立てる4. 仮説を検証する5. 検証結果から、新たな仮説に派生する場合はそれをエラー原因の候補に入れる6. 解決していない場合は、追加の情報をもとに 2. から見直す</code></pre><p>というように表現できるかと思います。</p><p>今回行った仮説の例としては</p><blockquote><p>エラーメッセージにあるポート番号が53なので、DNSでつまずいてると仮定して<code>/etc/resolv.conf</code>をいじってみる。<br>(<code>nameserver 8.8.8.8</code>の追記など)</p></blockquote><p>などがあります。</p><p>また、この過程で試したことについてのログ（仮説の内容、検証の準備のための環境変数の設定、検証結果など）を記録していくことがとても大切です。ログにある過去の検証結果と照らし合わせて、原因となりうる候補を絞れたり、過去に試したことを再度行うような無駄を省くことができ、トラブルシュートに時間をかければかけるほど解決に近づいていきます。</p><h2 id="1-環境設定"><a href="#1-環境設定" class="headerlink" title="1: 環境設定"></a>1: 環境設定</h2><p><code>go get</code>でエラーが出ていることから、<code>go get</code>の挙動に影響を与えるような環境設定を列挙してみました。</p><ul><li>環境変数</li><li><code>git config</code></li><li><code>go env</code></li></ul><p>同じく会社支給のマシンを使っていて、WSL環境、Windows DOS環境で同様のテストを成功している方々にご協力いただき、すべての環境設定を反映させてみました。</p><p>この検証から分かったことは以下の通りです。</p><ul><li><code>ping</code>, <code>dig</code>, <code>nslookup</code> などでの<code>go get</code>の目的の名前解決は成功している</li><li><code>go get</code>実行時にはDNSサーバーのmisbehavingのエラーが出る（先述のエラーと変化なし）</li><li>別ディレクトリで<code>go get</code>を実行すると<ul><li><code>github.com/...</code>で始まるパッケージは問題なく終了</li><li>上記以外（<code>golang.org/...</code>など）のパッケージで上記のエラー</li></ul></li></ul><p><code>dig</code>で名前解決が成功しているにもかかわらず、<code>go get</code>ではDNSサーバーでのエラーが引き続き出ていることから、より低いレイヤで何が起きているのかを知るために<code>Wireshark</code>でパケット解析することにしました。</p><h2 id="2-Wireshark"><a href="#2-Wireshark" class="headerlink" title="2: Wireshark"></a>2: Wireshark</h2><p>Wiresharkとは、ネットワークでやり取りするパケットを解析することができるツールです。<br>Wiresharkでキャプチャしながら<code>go test</code>を走らせ、まずは自分のマシンからどこまでの通信が届いているのかを確認し、以下のような簡単な図にまとめました（IPアドレスなどは一例です）。</p><img src="/images/20200526/photo_20200526_01.png"><p>すると、以下のことが分かりました。</p><ul><li>DNSの名前解決の時点で滞っている</li><li><code>http</code>というドメイン名をDNSサーバーに探していた。（リクエストの不正）</li><li>そのようなドメイン名は存在しないため、名前解決に失敗していた。</li></ul><p>先述の<a href="#エラーメッセージ">エラーメッセージ</a>を振り返って見ると、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lookup http on &#123;DNSサーバーのIPアドレス&#125;:53: server misbehaving)</span><br></pre></td></tr></table></figure><p>とありますが、これは文字通り<code>http</code>というドメイン名を名前解決しようとしていて、DNSに存在しないドメイン名を名前解決できずにエラーを返しているということが後から分かりました。</p><p>まさか<code>http</code>という文字列を見て、それを（プロトコルではなく）ドメイン名だとは思わなかったので、Wiresharkでやっとエラーの内容を正確に把握できました。</p><h3 id="（小話）WSLとエラーメッセージが異なった理由"><a href="#（小話）WSLとエラーメッセージが異なった理由" class="headerlink" title="（小話）WSLとエラーメッセージが異なった理由"></a>（小話）WSLとエラーメッセージが異なった理由</h3><p>ちなみにですが、WSLなどlinux環境では、ドメイン名を探しに行くときに、DNSの設定ファイルである<code>/etc/resolv.conf</code>内に<code>search</code>の記述があれば、それをサフィックスとして探したいドメイン名の後にくっつけたパターンのドメイン名の名前解決も試してくれます。<a href="http://man7.org/linux/man-pages/man5/resolv.conf.5.html" target="_blank" rel="noopener">参考</a></p><p>Windows DOSの方の環境ではそれと同様の設定はいじっていなかったのですが、どうやらデフォルトで<code>.co.jp</code>というサフィックスをつけて探してくれていたので、たまたまそのドメイン名である<a href="https://http.co.jp/" target="_blank" rel="noopener">http.co.jp</a>が実在し、名前解決に成功していました。ドメイン名のネーミングセンスが良くて感動しました。</p><p>結果として、ホストである<code>http.co.jp</code>が許可していないポートへの接続を試みようとしてしまい、そのエラーが帰ってきていました。<br>それがWSL環境とのエラーメッセージが異なる理由でした。</p><h2 id="3-URLエンコード"><a href="#3-URLエンコード" class="headerlink" title="3: URLエンコード"></a>3: URLエンコード</h2><p>ある日、このトラブルが発生するより以前に、ポート番号が不正というエラーを見たことをふと思い出しました。そのエラーメッセージ内ポート番号は、数字ではなく自分の認証付きプロキシのパスワードでした。<br>認証付きプロキシの設定をみてみると、パスワードもポート番号も、<code>:</code>以降に位置します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HTTP_PROXY=http://<span class="variable">$&#123;user&#125;</span>:<span class="variable">$&#123;pass&#125;</span>@proxy.example.com:<span class="variable">$&#123;port&#125;</span>/</span><br></pre></td></tr></table></figure><p>このことから、プロキシ設定のパース処理で手こずっているのではという仮説を立てました。</p><p>プロキシ設定はURLなので、パース処理で問題が発生するとすればURLエンコーディングをすれば良いのではというのは妥当な思考かと思います。実際、自分のパスワードにはURLに使用不可とされるような記号を含んでいたため、それをエンコードしてあげた設定を環境変数に再設定し、<code>go get</code>が通ることを確認することができました。</p><h2 id="4-その他の寄り道"><a href="#4-その他の寄り道" class="headerlink" title="4. その他の寄り道"></a>4. その他の寄り道</h2><p>解決までの道のりを簡潔に述べるために、解決に繋がることのなかった様々なトライアンドエラーを端折りました。しかし、冒頭に１か月と述べた通り、その期間の試行錯誤の中にはうまくいかない、もしくは結果的に意味をなさなかったものもありました。</p><p>泥臭い失敗の部分も残しておきたいので、上記以外にどのようなことを試したかを以下に残します。</p><ul><li>DNSを<code>8.8.8.8</code>に変更</li><li><code>go env -w GO111MODULE-off</code></li><li>別ディレクトリでの目的の<code>go get</code>の実行</li><li><code>git config</code>の<code>http.proxy</code>などの編集</li><li>GitHubのプロトコル切り替え（http &lt;-&gt; ssh）</li><li>…etc</li></ul><h1 id="振り返り"><a href="#振り返り" class="headerlink" title="振り返り"></a>振り返り</h1><p>振り返ってみると、今まで集めた情報でここにたどり着ける可能性のあるヒントとして以下の3つがあります。</p><blockquote><p>リモートでしかエラーが発生しない</p></blockquote><p>出社時は認証なしのプロキシ、リモート時は認証付きのプロキシであることから、認証の部分に問題がある可能性は大いにある</p><blockquote><p><a href="#1-環境設定">1: 環境設定</a>で自分以外は<code>go test</code>を成功させていた</p></blockquote><ul><li><code>go test</code>（および<code>go get</code>）に影響を与えるような環境設定は、列挙された３つしかないと仮定すると</li><li><code>go test</code> に成功していた方々の環境設定を忠実に再現しても解決しなかった。</li><li>環境設定でまだ個人差が出る可能性があるとすれば、個人に紐づけられたクレデンシャル</li></ul><blockquote><ul><li><code>github.com/...</code>で始まるパッケージは問題なく終了</li></ul></blockquote><ul><li>これらのパッケージはローカルPCでキャッシュされていた可能性</li><li>キャッシュを消すか、キャッシュを利用しない設定にすればもっと早く原因がわかった？</li></ul><p>結果論にはなりますが、もう少し仮説を考え抜いていたら、もっと早く解決できたかもしれません。</p><p>原因の切り分けや、仮説/推測を考えるような <strong><em>手を動かさない時間</em></strong> によって、それだけWiresharkでパケット解析をしたりするような時間を削減することができたことが分かります。</p><h1 id="学んだこと"><a href="#学んだこと" class="headerlink" title="学んだこと"></a>学んだこと</h1><h2 id="0-原因の切り分けと仮説検証について"><a href="#0-原因の切り分けと仮説検証について" class="headerlink" title="0:原因の切り分けと仮説検証について"></a><a href="#0原因の切り分けと仮説検証">0:原因の切り分けと仮説検証</a>について</h2><p>私は、最初はログをとらず試行錯誤のみを（１か月の半分程度）していたので、以前にも試したことを再度試すなど無駄が非常に多かったです。自分は永遠にこのトラブルと戦わなきゃいけないのではないかと感じるほど進歩を感じませんでした。</p><p>手を動かす前に状況整理し、Educated Guess(知識や経験に基づいた推測)をしていくことや、ログをとって過去の検証結果と現在の結果を照らし合わせて情報を集めていくことは、暗闇の中を歩くようなトラブルシューティングを、階段を上るように一歩ずつ確実に進んでいくものに変えてくれると思いました。</p><p>原因の候補となりえる要素が有限であるという極めて現実的な仮定の下では、そのような姿勢で取り組むことは、どんなに可能性の薄い推測の検証をし続けていても、いつか必ず解決することができるということになります。</p><h2 id="その他の仮説検証について"><a href="#その他の仮説検証について" class="headerlink" title="その他の仮説検証について"></a>その他の仮説検証について</h2><p>トラブルシューティングでは、様々なことを学ぶことができると思います。今回の経験から、プロキシやDNSなどについて自分の知識を深められたと思います。また、パケットの解析をする方法なども学ぶことができました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>経験豊富であれば、トラブルシュートに数か月といった単位で消耗することはないかと思いますが、新米の自分でも今回のようなトラブルと正しく向き合う経験を積んでいくことで、その場しのぎでアドホックなものでない、学びや経験に結び付く有意義なトラブルシューティングをすることができると感じました。</p><p>今後トラブルに直面した時も、手を動かしたい気持ちを一旦抑えて、まずは状況を明確にして仮説をたて原因を切り分けていくところから始めて習慣づけていきたいと思います。</p><p>長文になりましたが、読んでくださった方が初心を思い出せる、また自分と同じような新人の方にとっては実りのあるものになれば幸いです。</p><p>読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;まえがき&quot;&gt;&lt;a href=&quot;#まえがき&quot; class=&quot;headerlink&quot; title=&quot;まえがき&quot;&gt;&lt;/a&gt;まえがき&lt;/h1&gt;&lt;p&gt;はじめまして。TIG DXチームにアルバイトとして参加させていただいている本田直樹と申します。&lt;br&gt;昨年12月にAtCod
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
      <category term="Troubleshooting" scheme="https://future-architect.github.io/tags/Troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips 連載7:【golangci-lint】lint issueを新たに作り出さないためのTips</title>
    <link href="https://future-architect.github.io/articles/20200525/"/>
    <id>https://future-architect.github.io/articles/20200525/</id>
    <published>2020-05-25T00:30:35.000Z</published>
    <updated>2020-06-04T12:50:22.144Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200525/photo_20200525_01.png"><p><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a>の第6弾です。</p><p>Gopherの佐藤です。今回は<code>golangci-lint</code>の軽めのGoTipsネタを取り上げます。</p><p>Goのコード品質のベースラインを上げる目的で<a href="https://golangci-lint.run/" target="_blank" rel="noopener">golangci-lint</a>というlintアグリゲーターを利用されているかたも多いかと思います。</p><p>コードベースがlint issue(Linterにより検出された問題)がないクリーンな状態に保たれていることが望ましいのですが、必ずしもそういった状態を維持できるとはかぎりません。</p><p>例えば以下のような場合、コードベースにlint issueが大量に存在している状態で、<code>golngci-lint</code>を利用していかなければなりません。</p><ul><li>既にあるコードベースにgolangci-lintを新たに適用しようとした場合</li><li>何らかの理由でbaseブランチ(develop, master etc…)にlint issueが大量に混入してしまった場合</li></ul><p>このような場合、いったんbaseブランチに存在しているlint issueを無視して開発を進め、あとでまとめてlint issueの改修を行うというのか定石かと思います。</p><p>さて、この暫定対応をしている最中でも、lint issueが混入し続ける可能性があります。既存の大量のlint issueに埋もれて、開発中に新たに生み出してしまったlint issueに気づきにくいためです。</p><p>そんなときは、以下のコマンドを打つことで、「baseブランチから作業ブランチ切った断面」の間で新たに生み出してしまってlint issueがないかのチェックができます。</p><figure class="highlight bash"><figcaption><span>新たに発生したlint-issueが無いかチェックする</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">golangci-lint run --new-from-rev=`git merge-base HEAD origin/develop` ./...</span><br></pre></td></tr></table></figure><p>少しコマンドを解説します。<br><code>git merge-base HEAD origin/develop</code> は今checkoutしているコミットとbaseブランチ(この場合はorigin/develop)との分岐点となるコミット(merge base)のcommit_idを教えてくれるコマンドです。</p><p>これを<code>golangci-lint</code>の<code>--new-from-rev=</code>オプションに渡してあげると、そのコミット断面から作業ブランチのHEADまでに新たに生み出してしまったlint issueのみがレポートされます。</p><p>PullRequestを出す前に、このコマンドでlint issueがないかのチェックをしてあげるとよいのではないかと思います！</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200525/photo_20200525_01.png&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/tags/GoTips%E9%80%A3%E8%BC%89/&quot;&gt;Go Tips連載&lt;/a&gt;の第6弾です。&lt;/p&gt;
&lt;p&gt;Gopherの佐藤です。今回は
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips連載6: Error wrappingされた各クラウドSDKの独自型エラーを扱う</title>
    <link href="https://future-architect.github.io/articles/20200523/"/>
    <id>https://future-architect.github.io/articles/20200523/</id>
    <published>2020-05-23T02:12:30.000Z</published>
    <updated>2020-06-04T12:50:18.769Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200523/top.png"><p><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a>の第6弾です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。先週の<a href="/articles/20200519/">この記事</a>ぶりの投稿になります。</p><p>フューチャー社内には「Go相談室」というチャットルームがあり、そこでGoに関連する疑問を投げたら、大体1日くらいで強い人が解決してくれるという神対応が行われています。そこでAWSやGCPの独自エラーをError warppingされた時にどうやってハンドリングすればよいの？と聞いた時にやり取りした内容をまとめました。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Go1.13から<code>fmt.Errorf</code> 関数に <code>%w</code>という<a href="https://blog.golang.org/go1.13-errors" target="_blank" rel="noopener">新しい構文が追加サポート</a>されたことは、ご存知の方が多いと思います。</p><p>利用方法は、<code>%w</code> (pkg/errorsの時と異なりコロンは不要だし末尾じゃなくてもOK) と一緒に <code>fmt.Errorf</code> を用いることで、コンテキストに合わせた情報をメッセージに追加できます。</p><figure class="highlight go"><figcaption><span>%wを使った例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 2009/11/10 23:00:00 main process: any func: strconv.Atoi: parsing "ABC": invalid syntax</span></span><br><span class="line">        log.Fatalf(<span class="string">"main process: %v"</span>, err) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AnyFunc</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// 何かしらの処理</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"any func: %w"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[Go Playground] <a href="https://play.golang.org/p/C__gN90iyt7" target="_blank" rel="noopener">https://play.golang.org/p/C__gN90iyt7</a></li></ul><p>また、error種別ごとに処理を分けたい場合で、Sentinel errorを判定する場合は、 errorsパッケージに追加された <code>errors.Is</code> でWrapの判定できます。逆に言うとWrapされている場合、今まで通りの <code>if err == ErrNotFound {</code> といった構文では判定できなくなるので、既存コードへの導入時は呼び出し元と合わせてリライトが必要です。</p><figure class="highlight go"><figcaption><span>SentinelErrorをWrapしたときのハンドリング</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ErrNotFound = errors.New(<span class="string">"not found"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> errors.Is(err, ErrNotFound) &#123;</span><br><span class="line">            <span class="comment">// ErrorNotFound時のエラーハンドリング</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// その他の場合のエラーハンドリング</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AnyFunc</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// 何かしらの処理</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"any func: %w"</span>, ErrNotFound) <span class="comment">// Wrap</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[Go Playground] <a href="https://play.golang.org/p/R4KzOPVd_SA" target="_blank" rel="noopener">https://play.golang.org/p/R4KzOPVd_SA</a></li></ul><p>この場合はシンプルで良いのですが、AWS SDK for GoなどのerrorをWrapした時に呼び出し側で判定をしたい時、どうすればよいのかが直接的な内容が見当たらなかったのでここにまとめておきたいと思います。</p><h1 id="Handling-Errors-in-the-AWS-SDK-for-Go"><a href="#Handling-Errors-in-the-AWS-SDK-for-Go" class="headerlink" title="Handling Errors in the AWS SDK for Go"></a>Handling Errors in the AWS SDK for Go</h1><p><a href="https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/handling-errors.html" target="_blank" rel="noopener">ドキュメント</a>を読むと例えば、AWSのErorrハンドリングは以下のように、<code>awserr.Error</code> というインターフェースで表現されており、一度errを型アサーションしてから内部的なエラーコードに応じてハンドリングすることになっています。</p><figure class="highlight go"><figcaption><span>AWS-SDKの通常版エラーハンドリング</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> aerr, ok := err.(*awserr.Error); ok &#123;</span><br><span class="line">        <span class="keyword">switch</span> aerr.Code() &#123;</span><br><span class="line">        <span class="keyword">case</span> dynamodb.ErrCodeConditionalCheckFailedException:</span><br><span class="line">            <span class="comment">// エラーハンドリング</span></span><br><span class="line">        <span class="keyword">case</span> dynamodb.ErrCodeProvisionedThroughputExceededException:</span><br><span class="line">            <span class="comment">// エラーハンドリング</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// エラーハンドリング</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// エラーハンドリング</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをWrapされたときは、呼び出し元で単純に型アサーションを行ってもうまく判定できません。</p><figure class="highlight go"><figcaption><span>NGなケース</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AnyFunc</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// 何かしらのAWS SDKを利用したコード</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"aws operation: %w"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> aErr, ok := err.(*awserr.Error); ok &#123; <span class="comment">// 🆖型アサーションでは判定できない</span></span><br><span class="line">            <span class="comment">// AWS操作エラー特有のエラーハンドリング</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// その他のエラーハンドリング</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※Go Playgroundでサンプルを載せようと思いましたが、importでTimeoutになったので諦めました</p><h1 id="対応方法"><a href="#対応方法" class="headerlink" title="対応方法"></a>対応方法</h1><p>この <code>awserr.Error</code> を満たすerrorをWrapしたときはどうすべきかというと、 <code>errors.As</code> を用います。<code>errors.As</code> を代入用の変数とともに利用するとうまくいきます。</p><figure class="highlight go"><figcaption><span>OKなコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> aErr *awserr.Error</span><br><span class="line">    <span class="keyword">if</span> ok := errors.As(err, &amp;aErr); ok &#123;</span><br><span class="line">        <span class="keyword">switch</span> aErr.Code() &#123;</span><br><span class="line">        <span class="keyword">case</span> dynamodb.ErrCodeConditionalCheckFailedException:</span><br><span class="line">            <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">        <span class="keyword">case</span> dynamodb.ErrCodeProvisionedThroughputExceededException:</span><br><span class="line">            <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// エラーハンドリング</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// その他のエラーハンドリング</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例として愚直にif分岐をすべて網羅するように書きましたが、早期returnを活用すると、よりネストが浅く見通しが良いコードにできると思います。</p><h2 id="GCP-SDKの場合"><a href="#GCP-SDKの場合" class="headerlink" title="GCP SDKの場合"></a>GCP SDKの場合</h2><p>しばしば<a href="https://godoc.org/cloud.google.com/go/bigquery#hdr-Errors" target="_blank" rel="noopener">以下のエラーを返すことが多い</a>とのことです。</p><p><a href="https://godoc.org/google.golang.org/api/googleapi#Error" target="_blank" rel="noopener">https://godoc.org/google.golang.org/api/googleapi#Error</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> e, ok := err.(*googleapi.Error); ok &#123;</span><br><span class="line">    <span class="keyword">if</span> e.Code == <span class="number">409</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もしこれらのerrorをWrapする場合は、同様に <code>errors.As</code> で判定します。（実際は後述する各サービスごとに宣言されているSentinel errorで判断することが多いと思います）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> gerr *googleapi.Error</span><br><span class="line">    <span class="keyword">if</span> ok := errors.As(err, &amp;gerr); ok &#123;</span><br><span class="line">        <span class="keyword">switch</span> gerr.Code() &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">409</span>:</span><br><span class="line">            <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// その他のエラーハンドリング</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一方で、<a href="https://godoc.org/cloud.google.com/go/storage#pkg-variables" target="_blank" rel="noopener">StorageなどはSentinel error</a>を返します。</p><figure class="highlight go"><figcaption><span>StorageのSentinelError</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    <span class="comment">// ErrBucketNotExist indicates that the bucket does not exist.</span></span><br><span class="line">    ErrBucketNotExist = errors.New(<span class="string">"storage: bucket doesn't exist"</span>)</span><br><span class="line">    <span class="comment">// ErrObjectNotExist indicates that the object does not exist.</span></span><br><span class="line">    ErrObjectNotExist = errors.New(<span class="string">"storage: object doesn't exist"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>errorを返すAPIを利用してWrapした場合は <code>errors.Is</code> で判定します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Storageに対して何かしらアクセスする処理</span></span><br><span class="line"><span class="keyword">if</span> err := AnyFunc(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ok := errors.Is(err, storage.ErrObjectNotExist); ok &#123;</span><br><span class="line">        <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// その他のエラーハンドリング</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>どのAPIがどういったerrorを返しうるかは、各<a href="https://godoc.org/cloud.google.com/go" target="_blank" rel="noopener">GoDoc</a>に書いてありますので、個別のハンドリングが必要な場合は確認することになると思います。</p><h1 id="Stacktraceの出力について"><a href="#Stacktraceの出力について" class="headerlink" title="Stacktraceの出力について"></a>Stacktraceの出力について</h1><p><a href="https://play.golang.org/p/NAYR7XySCdW" target="_blank" rel="noopener">https://play.golang.org/p/NAYR7XySCdW</a> にサンプルコードを載せましたが、 <code>%w</code>構文を用いた<code>fmt</code>パッケージではStacktraceが出力されません。もし、Stacktraceが必要な場合は <code>fmt.Errorf</code>ではなく <code>xerrors.Errorf</code> を用いてWrapします。</p><p>シビアに性能が求められない、例えばBackendのWebAPIをGoで実装する場合は、 <a href="https://godoc.org/golang.org/x/xerrors" target="_blank" rel="noopener">xerrorsパッケージ</a>を利用した方が、2020/01/26 時点では良さそうです。</p><ul><li>xerrorsについては、そな太さんの <a href="https://qiita.com/sonatard/items/9c9faf79ac03c20f4ae1" target="_blank" rel="noopener">Goの新しいerrors パッケージ xerrors</a> の記事がとても参考になりました</li></ul><figure class="highlight go"><figcaption><span>xerrorsを使った例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang.org/x/xerrors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := Func(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"stacktrace: %+v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := FuncInternal(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> xerrors.Errorf(<span class="string">"anyFunc %w - internal failed"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FuncInternal</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> xerrors.Errorf(<span class="string">"any error"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[Go Playground] <a href="https://play.golang.org/p/4xcqP7Ukt0H" target="_blank" rel="noopener">https://play.golang.org/p/4xcqP7Ukt0H</a></li></ul><p>これを実行するとStacktraceが出力されました。</p><figure class="highlight console"><figcaption><span>Stacktrace出力例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stacktrace: anyFunc any error - internal failed:</span><br><span class="line">    main.Func</span><br><span class="line">        /tmp/sandbox921242282/prog.go:16</span><br><span class="line">  - any error:</span><br><span class="line">    main.FuncInternal</span><br><span class="line">        /tmp/sandbox921242282/prog.go:22</span><br></pre></td></tr></table></figure><p>ちなみに、xerrorsでWrapされたエラーでも、errors.Is, errors.Asで判定できました。（混在すると少し気持ち悪いですが）</p><ul><li>[Go Playground] <a href="https://play.golang.org/p/nfu_JXo6N_e" target="_blank" rel="noopener">https://play.golang.org/p/nfu_JXo6N_e</a></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Sentinel errorの場合は、<code>errors.Is</code> で、独自Error型を宣言している場合は、 <code>errors.As</code> を利用してハンドリングする</li><li>Stacktrace情報が必要な場合は、xerrorsパッケージを利用する</li><li>xerrorsでWrapしても <code>errors.Is</code>, <code>errors.As</code> で扱える</li></ul><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200523/top.png&quot;&gt;


&lt;p&gt;&lt;a href=&quot;/tags/GoTips%E9%80%A3%E8%BC%89/&quot;&gt;Go Tips連載&lt;/a&gt;の第6弾です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; c
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips 連載5: エラーコードベースの例外ハンドリングの実装＋morikuni/failureサンプル</title>
    <link href="https://future-architect.github.io/articles/20200522/"/>
    <id>https://future-architect.github.io/articles/20200522/</id>
    <published>2020-05-21T15:14:52.000Z</published>
    <updated>2020-05-23T05:17:25.456Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200522/top.png"><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>TIG DX所属の多賀です。最近は設計をしつつ Go も触れて引き続き楽しく仕事してます。</p><p>今回は、<a href="https://pkg.go.dev/errors?tab=doc" target="_blank" rel="noopener">errors</a> package を一部利用して、エラーコードベースのエラーハンドリング処理を実装しました。また、morikuni/failure を利用した実装への書き換えも試してみています。</p><h1 id="エラーコードベースの例外ハンドリングについて"><a href="#エラーコードベースの例外ハンドリングについて" class="headerlink" title="エラーコードベースの例外ハンドリングについて"></a>エラーコードベースの例外ハンドリングについて</h1><p>前提としてGoで書かれた HTTP APIサーバーに対してのエラーハンドリングについて記載します。</p><p><strong>エラーコードベースの例外ハンドリング</strong>についてですが、アプリケーションで発生するエラーを事前にラベリングしてコード化し、コードをもとにエラーハンドリングを実施することとします。発生時の運用対応や影響について、事前に一覧で整理することで、運用負荷を下げる意味があると考えています。(補足: Futureではメッセージコードと呼称することが多いですが、一般的な命名であるエラーコードで統一します)</p><p>以下のような形で整理しています。<br>実際は、エラーコード別に運用アクションも合わせて整理します。</p><p>エラーコード表 (例)</p><table><thead><tr><th align="left">エラーコード</th><th align="left">エラー名</th></tr></thead><tbody><tr><td align="left">XXX0001</td><td align="left">クライアントエラー</td></tr><tr><td align="left">XXX0002</td><td align="left">DBコネクションエラー</td></tr><tr><td align="left">XXX0003</td><td align="left">外部APIサーバーへのリクエストエラー</td></tr></tbody></table><p>エラーコードを利用した際に重要なことは、エラーコード外のエラーを発生させないことにあると考えています。エラーコード外のエラーが発生した際、何をどうしたらよいかが明文化されていないためです。エラーは、ログより発生を検知し対応するものとした際に、いかにアプリケーションから出力されるログに対して、適切にエラーコードを付与できるかが大事です。</p><h1 id="errors-package-を利用した実装例"><a href="#errors-package-を利用した実装例" class="headerlink" title="errors package を利用した実装例"></a>errors package を利用した実装例</h1><p>アプリケーション側での、コンパイルレベルでの制約は難しくコードレビューでの担保もふくまれますが、以下のようにしてエラーを出力しています。</p><p>パッケージの構造としてはシンプルな以下のイメージです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── handler    <span class="comment"># httpリクエストをハンドリングする層</span></span><br><span class="line">├── service    <span class="comment"># ビジネスロジック層 </span></span><br><span class="line">└── infra      <span class="comment"># DBや外部API等の外部リソースへアクセスする層</span></span><br></pre></td></tr></table></figure><h2 id="エラーコード別のエラーを定義"><a href="#エラーコード別のエラーを定義" class="headerlink" title="エラーコード別のエラーを定義"></a>エラーコード別のエラーを定義</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apperror</span><br><span class="line"></span><br><span class="line"><span class="comment">// AppError はエラーコードが付与されたエラーのinterface</span></span><br><span class="line"><span class="keyword">type</span> AppError <span class="keyword">interface</span> &#123;</span><br><span class="line">error</span><br><span class="line">Code() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下にエラーコード別にカスタムエラーを定義</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ClientError <span class="keyword">struct</span> &#123;</span><br><span class="line">Err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ClientError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"client error"</span> + <span class="string">": "</span> + e.Err.Error()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ClientError)</span> <span class="title">Code</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"XXX0001"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ClientError)</span> <span class="title">Unwrap</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> e.Err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="handler-層に返却される-error-を必ずエラーコード対応Error型とする"><a href="#handler-層に返却される-error-を必ずエラーコード対応Error型とする" class="headerlink" title="handler 層に返却される error を必ずエラーコード対応Error型とする"></a>handler 層に返却される error を必ずエラーコード対応Error型とする</h2><p>各層のerror を wrappingして handler 層に返却します。ここは愚直にやらないといけないところです。(静的解析ツールを作ってチェックする機構を用意するほうがより良いですね。)</p><p>関数の戻り値の第2引数自体を <code>AppError</code> 型にすることも考えられますが、標準 error インターフェイスを尊重したほうが良いとのノウハウがあるので対応しませんでした。</p><p>参考: <a href="https://www.slideshare.net/yuichi1004/golangtokyo-6-in-japanese?ref=https://golangtokyo.connpass.com/event/57168/presentation/" target="_blank" rel="noopener">初めてGolangで大規模Microservicesを作り得た教訓</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h User)</span> <span class="title">Search</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 処理...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// err を wrap してエラー情報を追加する</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, apperror.ClientError&#123;Err: fmt.Errorf(<span class="string">"invalid id = %v: %w"</span>, id, err)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="エラーログを出力する箇所を集約"><a href="#エラーログを出力する箇所を集約" class="headerlink" title="エラーログを出力する箇所を集約"></a>エラーログを出力する箇所を集約</h2><p>handler 層に集約させます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserHandleFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">app := service.User&#123;&#125;</span><br><span class="line">h, err := app.Search(<span class="string">"id1"</span>)</span><br><span class="line"><span class="comment">// err は 必ずエラーコード定義のエラー</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーから共通のログを出力する関数を呼び出す</span></span><br><span class="line">errorLog(err)</span><br><span class="line">w.WriteHeader(<span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorLog</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> e, ok := err.(apperror.AppError); ok &#123;</span><br><span class="line"><span class="comment">// エラーコードとメッセージをログに出力</span></span><br><span class="line">log.Printf(<span class="string">"[%v] %v\n"</span>, e.Code(), e.Error())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 予想外のエラー(実装ミス)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の通りに実装することで、エラーコードにエラーを集約すること自体はできました。</p><p>ただ、独自エラーを定義して Wrapするところはもっと書きやすくできないか、検討の余地がありそうだと感じました。</p><h1 id="morikuni-failure-を利用できないか"><a href="#morikuni-failure-を利用できないか" class="headerlink" title="morikuni/failure を利用できないか?"></a>morikuni/failure を利用できないか?</h1><p>morikuni/failure は morikuni さんが作成されたエラーハンドリング向けのライブラリです。errors package 存在前より開発されているライブラリです。</p><p><a href="https://github.com/morikuni/failure" target="_blank" rel="noopener">https://github.com/morikuni/failure</a></p><blockquote><p>Package failure provides an error represented as error code and extensible error interface with wrappers.</p></blockquote><p>とのことなので、エラコードベースの利用にマッチしそうです。</p><p>以前の <a href="https://speakerdeck.com/morikuni/designing-errors" target="_blank" rel="noopener">Go Conference 2019 Spring にて発表されている資料</a> にて、failure と errors (当時は xerrors) の使い分けについて明確に説明されています。とてもわかりやすくて、しっくりきたことを覚えています。</p><img src="/images/20200522/photo_20200522_01.png" style="border:solid 1px #000000"><p>参考: <a href="https://speakerdeck.com/morikuni/designing-errors?slide=33" target="_blank" rel="noopener">https://speakerdeck.com/morikuni/designing-errors?slide=33</a></p><h2 id="やってみた"><a href="#やってみた" class="headerlink" title="やってみた"></a>やってみた</h2><p>morikuni/failure を利用して上記のコードを書き換えてみました。</p><h3 id="エラーコード別のエラーを定義-1"><a href="#エラーコード別のエラーを定義-1" class="headerlink" title="エラーコード別のエラーを定義"></a>エラーコード別のエラーを定義</h3><p>とてもシンプルですね。追加も簡単になりそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apperror</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/morikuni/failure"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">ClientError       failure.StringCode = <span class="string">"XXX0001"</span></span><br><span class="line">DBConnectionError failure.StringCode = <span class="string">"XXX0002"</span></span><br><span class="line">XXAPIRequestError failure.StringCode = <span class="string">"XXX0003"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="handler-層に返却される-error-を必ずエラーコードに対応させた独自エラーとする"><a href="#handler-層に返却される-error-を必ずエラーコードに対応させた独自エラーとする" class="headerlink" title="handler 層に返却される error を必ずエラーコードに対応させた独自エラーとする"></a>handler 層に返却される error を必ずエラーコードに対応させた独自エラーとする</h3><p>morikuni/failure でも、エラーコードへの変換 ( <code>failure.Translate</code>  ) や エラーコードの Wrap ( <code>failure.Wrap</code> ) は可能です。<br>(ちなみに、failureで生成したエラーも errors package のインターフェイスを満たしています。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/xxx/failure_sample/apperror"</span></span><br><span class="line"><span class="string">"github.com/morikuni/failure"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h User)</span> <span class="title">Search</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 処理...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// err を wrap してエラー情報を追加する</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, failure.Translate(err, apperror.ClientError, failure.Messagef(<span class="string">"invalid id=%v"</span>, id))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="エラーログを出力する箇所を集約-1"><a href="#エラーログを出力する箇所を集約-1" class="headerlink" title="エラーログを出力する箇所を集約"></a>エラーログを出力する箇所を集約</h3><p>README の sample を参考にハンドリング処理を実装してみました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/xxx/failure_sample/apperror"</span></span><br><span class="line"><span class="string">"github.com/xxx/failure_sample/service"</span></span><br><span class="line"><span class="string">"github.com/morikuni/failure"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserHandleFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">app := service.User&#123;&#125;</span><br><span class="line">_, err := app.Search(<span class="string">"id1"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errorLog(err)</span><br><span class="line">w.WriteHeader(httpStatus(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorLog</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">code, ok := failure.CodeOf(err)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">log.Printf(<span class="string">"unexpected error: %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"[%v] %v\n"</span>, code, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpStatus</span><span class="params">(err error)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> c, _ := failure.CodeOf(err); c &#123;</span><br><span class="line"><span class="keyword">case</span> apperror.ClientError:</span><br><span class="line"><span class="keyword">return</span> http.StatusBadRequest</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> http.StatusInternalServerError</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>エラーコードベースの例外ハンドリングのTipsについて記載しました。</p><p>failure を利用したほうがよりシンプルに書けて良いのではないかと感じています。<br>また、他のメリットとしては以下がありそうです。</p><ul><li>failureでWrapすることでスタックトレースが残る</li><li>failureの便利関数を利用して Error のコンテキストを文字列以外の形式で作成できる</li></ul><p>failureは実戦で使えてないので、次回チャレンジしてみたいです。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.golang.org/go1.13-errors" target="_blank" rel="noopener">Working with Errors in Go 1.13 - The Go Blog</a></li><li><a href="https://pkg.go.dev/github.com/morikuni/failure?tab=doc" target="_blank" rel="noopener">failure package · go.dev</a></li><li><a href="https://speakerdeck.com/morikuni/designing-errors" target="_blank" rel="noopener">エラー設計について / Designing Errors - Speaker Deck</a></li></ul><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200522/top.png&quot;&gt;

&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;TIG DX所属の多賀です。最近は設計をしつつ Go も触れて引
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips連載4: GoDocの読み方</title>
    <link href="https://future-architect.github.io/articles/20200521/"/>
    <id>https://future-architect.github.io/articles/20200521/</id>
    <published>2020-05-21T13:23:40.000Z</published>
    <updated>2020-05-23T05:17:05.871Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/tags/GoTips連載/">Go Tips連載</a>の第4弾目です。</p><p>新しいプログラミング言語を学ぶときは、まず、情報の取得の仕方を覚えておくと学習効率が上がります。検索して、日本語で誰かが解説している二次情報を探すのもいいのですが、古くなって使えなかったり、人気のある情報に偏ってしまって、ちょっと混み入った話になると情報が見つからなくなったりしがちです。多少素っ気なく感じるかもしれませんが、一次情報を読み解く方法を知っておくと良いでしょう。本家が作ったものではなくても網羅的に、リファレンスとなる心意気で書かれたものもたまにあります。</p><table><thead><tr><th align="center">種類</th><th align="center">区分</th><th align="center">翻訳</th><th align="left">解説</th></tr></thead><tbody><tr><td align="center"><a href="https://tour.golang.org/welcome/1" target="_blank" rel="noopener">Tour of Go</a></td><td align="center">一次</td><td align="center"><a href="https://go-tour-jp.appspot.com/welcome/1" target="_blank" rel="noopener">あり</a></td><td align="left">Goの書き方チュートリアル</td></tr><tr><td align="center"><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a></td><td align="center">一次</td><td align="center">メンテされているものはなし？</td><td align="left">Goのコードはこう書くべきといった指標</td></tr><tr><td align="center"><a href="https://blog.golang.org/" target="_blank" rel="noopener">The Go Blog</a></td><td align="center">一次</td><td align="center"><a href="https://www.ymotongpoo.com/works/goblog-ja/" target="_blank" rel="noopener">あり</a></td><td align="left">新し目の機能など大きめのトピックについて設計思想とか解説が書かれることがある</td></tr><tr><td align="center"><a href="https://godoc.org/" target="_blank" rel="noopener">Go Doc</a></td><td align="center">一次</td><td align="center">ﾑﾘ</td><td align="left">標準・サードパティのライブラリのリファレンス</td></tr><tr><td align="center"><a href="https://github.com/golang/go/wiki" target="_blank" rel="noopener">Go Wiki</a></td><td align="center">一次</td><td align="center"></td><td align="left">文法の解説、コミュニティ情報などいろいろあったり</td></tr><tr><td align="center"><a href="https://golang.org/doc/devel/release.html" target="_blank" rel="noopener">Release Notes</a></td><td align="center">一次</td><td align="center">Qiita等に有志が訳したものがあがる</td><td align="left">新バージョンの差分はここ</td></tr><tr><td align="center"><a href="https://gobyexample.com/" target="_blank" rel="noopener">Go by Example</a></td><td align="center">二次</td><td align="center"><a href="https://oohira.github.io/gobyexample-jp/" target="_blank" rel="noopener">あり</a></td><td align="left">細かい書き方のサンプルコード集</td></tr><tr><td align="center"><a href="https://yourbasic.org/golang/go-java-tutorial/" target="_blank" rel="noopener">Java to Go in-depth tutorial</a></td><td align="center">二次</td><td align="center"><a href="https://future-architect.github.io/articles/20200311/">あり</a></td><td align="left">既存の言語ユーザーのためのGo入門</td></tr></tbody></table><p>今回は、GoDocについて取り上げます。</p><p>長いので3行にまとめると</p><ul><li>GoDocのリファレンスはライブラリにとっては一次情報だが、使い方などはリポジトリのREADMEに書かれることも多い</li><li>構造体やインタフェースは、リファレンスだけを見ても使い方がわからないこともあるので、分からないからといって落ち込まないでください</li><li>サンプルコードも合わせて確認して使い方を確認すると良いです</li></ul><h1 id="GoDoc"><a href="#GoDoc" class="headerlink" title="GoDoc"></a>GoDoc</h1><p>GoDocは標準ライブラリや、他のサードパティ製ライブラリのドキュメントをホストしているウェブサイトになります。チュートリアルなどは一度クリアしたら見返すこともあまりないでしょうけども、GoDocはGoで開発している限り、ずっと参照し続けることになります。GoDocの読み方を知っておくことは、Go力をあげるには必須なスキルだと思います。</p><p>GoDocのURLは以下の通りの場所</p><ul><li><a href="https://pkg.go.dev/" target="_blank" rel="noopener">https://pkg.go.dev/</a></li></ul><p>以前はこちらで、検索エンジンでドキュメントを検索するとこっちのドメインが表示されると思いますが、上のツールバーの、always use pkg.go.devをクリックすると、上記のURLにリダイレクトされます。</p><ul><li><a href="https://godoc.org/" target="_blank" rel="noopener">https://godoc.org/</a></li></ul><h1 id="書いてある内容"><a href="#書いてある内容" class="headerlink" title="書いてある内容"></a>書いてある内容</h1><p>最近人気のchiのドキュメントを表示してみました。</p><img src="/images/20200521/1.png"><p>上から、importするときの名前、パッケージ名、バージョンなどが書かれています。<br>その下は更新日時、ライセンス、モジュールのページです。</p><p>モジュールというのはサブディレクトリとかも含めた共通のルートページで、ソースコードがおいてあるリポジトリのリンクや、リポジトリのReadmeなどが書かれています。</p><p>その下のタブは、色々な情報へのハブになっています。</p><ul><li>Doc: 実際のドキュメント<ul><li>リファレンスと概要</li></ul></li><li>Overview: モジュールと同じ</li><li>Versions: 今まで公開されたバージョン一覧</li><li>Imports: どのパッケージに依存しているか？</li><li>Imported By: どのパッケージから利用されているか？人気なものほど多い</li><li>License: ライセンス</li></ul><h1 id="まず読むところ"><a href="#まず読むところ" class="headerlink" title="まず読むところ"></a>まず読むところ</h1><p>いきなりリファレンスを読みたい人もいるかもしれませんが、ふつうは概要を理解したいですよね？Goの場合は2箇所あります。</p><ul><li>DocのOverview</li><li>モジュールページのREADME</li></ul><p>Goのソースコードの中のコメントとして書いたドキュメントであれば前者に、リポジトリのREADMEに書かれた内容であれば後者に概要が書かれます。標準ライブラリの場合は前者しかないですが、サードパーティの場合、後者の方がリッチに丁寧に書かれることが多いように思います。どちらに詳しい情報が書かれるかはパッケージの実装者次第なので両方見て見ると良いでしょう。</p><h1 id="サンプルコード"><a href="#サンプルコード" class="headerlink" title="サンプルコード"></a>サンプルコード</h1><p>概要を把握したところで、どう書くのかを見て見たい人もいるでしょう。サンプルコードを探して見ましょう。DocのOverviewには3箇所、サンプルが置かれる可能性のある場所があります。</p><ol><li>DocのOverviewや各メソッドの説明: Goのコメントの流儀に従ってフォーマットされているサンプル</li><li>パッケージ全体のサンプルは、（あれば）DocのOverviewの末尾にサンプルコードが置かれる</li><li>各構造体や関数、メソッドのサンプルは、それぞれのリファレンスの中に書かれる</li></ol><p>chiはこの最初の1の形式のドキュメントが書かれていました。</p><p>2つ目と3つ目はchiにはなかったので、標準ライブラリのdatabase/sqlパッケージのドキュメントを見て見ましょう。Overviewの下に、パッケージレベルのサンプルコードが2つあることがわかります。▼をクリックすると表示されます。</p><img src="/images/20200521/2.png"><p>メソッドなどのドキュメントは、それぞれの説明のテキストの後ろにサンプルが置かれています。</p><img src="/images/20200521/3.png"><p>Goの公式ドキュメントにおけるサンプルというのは、サンプルの形を模したテストコードだったりします。もし、期待するコードがなければ、リポジトリのサンプルを見て見てもいいでしょう。<code>_example.go</code>あるいは、<code>_test.go</code>といったファイルに入っています。<code>Example</code>から始まる関数がサンプル、<code>Test</code>から始まる関数がテストです。</p><p>サードパーティのパッケージで、これらのどこにもなかった場合、モジュールページのREADMEにある可能性があります。こちらはMarkdownなので、サンプルでもなんでも自由に書けます。この中にサンプルも書かれることが多いです。</p><h1 id="ライブラリリファレンス"><a href="#ライブラリリファレンス" class="headerlink" title="ライブラリリファレンス"></a>ライブラリリファレンス</h1><p>ライブラリリファレンスはDocタブのIndexという項目以下にあります。ドキュメントのメインコンテンツです。</p><img src="/images/20200521/4.png"><p>リファレンスは以下の順番に並んでいます。</p><ul><li>Constants: 定数一覧</li><li>Variables: 変数一覧</li><li>func …の各項目: パッケージ内で定義されている関数</li><li>type …の各項目: パッケージ内で定義されている型（構造体、名前付き型、インタフェース）</li></ul><p>定数、変数は名前とか型を確認するぐらいだと思いますし、関数や型の説明の中で参照されるので、そのタイミングで読むことになると思います。関数も、読み方としては特に難しくはないと思います。ここではtypeの各項目について紹介します。</p><p>要注意ポイントとしては、GoDocはそのサービスが起動しているOS向けの要素しか表示しません。osパッケージにはWindows用の要素だったりとかもあったりしますが、pkg.go.devはLinuxで動作しており、リファレンスもLinuxで有効な項目のみが表示されます。ファイル操作のバッチのプログラムとかを作成する場合には注意してください。</p><h2 id="構造体"><a href="#構造体" class="headerlink" title="構造体"></a>構造体</h2><p>typeのうち、構造体は結構、他の言語のユーザーからすると初見殺しな気がします。たいてい、ドキュメントを見ると「あ、このメソッドを呼んであげれば、やりたいことができそうだ」というのは把握できると思います。しかし、そのメソッドをどう呼んであげればいいのか、で詰まることがあります。ベテランであっても。</p><img src="/images/20200521/5.png"><p>構造体の説明はまずはGoの定義コードほぼそのまま（privateな要素以外）が書かれています。</p><p>さて、この構造体のインスタンスを作って使うにはどうすればいいでしょうか？Goの文法的には3通りあります(newはあんまり見ないので省略)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cはインスタンス</span></span><br><span class="line"><span class="keyword">var</span> c Context</span><br><span class="line"><span class="comment">// cはインスタンス（パラメータの初期化もできる）</span></span><br><span class="line">c := Context&#123;&#125;</span><br><span class="line"><span class="comment">// cはポインタ（パラメータの初期化もできる）</span></span><br><span class="line">c := &amp;Context&#123;&#125;</span><br></pre></td></tr></table></figure><p>それ以外に、リファレンスを見ると、レシーバーがついてないメソッドが構造体のメソッド一覧の先頭にいることがわかります。コンストラクタ関数とかファクトリ関数と呼ばれているもので、必要な属性を持ったインスタンスを生成し、そのポインタや実体を返すものです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">NewRouteContext</span><span class="params">()</span> *<span class="title">Context</span></span></span><br><span class="line"><span class="function">    <span class="title">func</span> <span class="title">RouteContext</span><span class="params">(ctx context.Context)</span> *<span class="title">Context</span></span></span><br></pre></td></tr></table></figure><p>これらのインスタンスの作成方法のうち、どの手法で作ればいいのか、というのはそのライブラリによって違います。</p><ul><li>ファクトリー関数があるものであれば、ほぼそれでいいはず<ul><li>メンバー変数にprivateなものがあり、ファクトリー関数でのみ初期化という場合は確度が高い</li><li>ただし、その中にもGoの文法で作っても動作するハイブリッドなものとかもある</li></ul></li><li>自分で作らず、ライブラリの内部で作ってインスタンスだけ渡ってくるものもある。net/httpのサーバーのハンドラのRequestとか</li><li>Goの文法で作成するもののうち、コピー不能でポインタ型で取り扱わないといけないものもあり</li></ul><p>どの手法で構造体のインスタンスを作ればいいのか、というのはサンプルコードとかを見て判断することになります。</p><p>読み手の気持ちを考えると、何かしらのライブラリを作って構造体を提供するときは、ファクトリー関数を作って提供しましょう、というのがベストプラクティスになる気がします。</p><h2 id="名前付き型-named-type"><a href="#名前付き型-named-type" class="headerlink" title="名前付き型(named type)"></a>名前付き型(named type)</h2><p>Goでは、メモリ上の実態は同じだけど、別の型として振る舞わせることが可能です。例えば、画面に表示しようとするとアスタリスクに塗りつぶす文字列型、みたいなことができます（これは%vとかでダメなので簡易実装です。このまま利用はしないでください）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SecretString <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SecretString)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(s))</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">result[i] = <span class="string">'*'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これも、例えば列挙型のようなものを作ったりするには便利な方法です。しかし、リファレンスを見ても、この型をどう作るのかの説明がされることはありません。これはどうやってインスタンスを作ればいいでしょうか？作り方としては次のような感じになりますね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 型キャスト</span></span><br><span class="line">s := <span class="string">"important credential"</span> <span class="comment">// sはstring</span></span><br><span class="line">ss := SecretString(s)       <span class="comment">// ここでキャスト。ssはSecretString</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最初からその型で宣言</span></span><br><span class="line"><span class="keyword">var</span> ss SecretString = <span class="string">"secret password"</span></span><br></pre></td></tr></table></figure><p>これで、どちらもssがSecretString型になるので、リファレンスに書かれているメソッドが使えるようになります。</p><p>場合によっては、Constantsの定数として事前に定義されているもののみを使うという流儀のライブラリもあります。その場合はインスタンスを作らずに、importして利用するだけでいけます。どの方法でインスタンスを利用すればいいのかは実装次第なので、サンプルコードとかを見てみると良いでしょう。</p><h2 id="インタフェース"><a href="#インタフェース" class="headerlink" title="インタフェース"></a>インタフェース</h2><p>インタフェースも、便利なメソッドは見つけたが、どうやってインスタンスを取得すればいいのかわからない筆頭です。これはベテランでも初見では分からないこと多数です。分からないからといって落ち込まないください。みんな分からないのです。</p><p>インタフェースは、とあるインスタンスが、そのインタフェースで定義されているメソッドを持っている、というだけの情報しかありません。主に4通りあります。2番目のものはウェブサイドではなくローカルで動作する<a href="https://qiita.com/shibukawa/items/8c70fdd1972fad76a5ce#godoc%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AB%E3%82%88%E3%82%8B%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">godocコマンドの解析機能</a>を利用すると発見できます。発見できた後は、この上の節の構造体をどうする問題に遷移します。最後のものは今のところ僕が見たことがあるのはnet/httpのPusherとかだけですので無視してもいいかもしれません。</p><ul><li>自分で作る<ul><li>そのインタフェースを満たすメソッドを持った構造体をユーザーが作成してそのライブラリの他のメソッドに渡せばいいのか</li></ul></li><li>既成の構造体がこのインタフェースを満たしている<ul><li>何かしらの構造体のインスタンスを作ると、そのインタフェースを満たして、そのインタフェースの型の変数に代入したり、メソッドの引数に渡せるようになる</li></ul></li><li>ライブラリが作成してくれるもの<ul><li>net/httpのResponeWriterなど</li></ul></li><li>インタフェース間のキャスト<ul><li>特定のインタフェースを型アサーションでキャストすると、そのインタフェースが得られてメソッドが利用できるようになる</li></ul></li></ul><p>これのどれに当たるかは、リファレンスだけを見てもさっぱり見えてこないこともあります。これも素直に、サンプルコードなどを参照するようにした方が良いでしょう。</p><p>これを読んでいる上級者の方々は、もしインタフェースを実装して他の人に使ってもらおうと思っているのであれば、必ずサンプルコードを見える位置に置いてあげてください。私からの一生のお願いです。</p><h2 id="引数のinterface"><a href="#引数のinterface" class="headerlink" title="引数のinterface{}"></a>引数の<code>interface{}</code></h2><p>Goは静的型付け言語ではあるものの、リフレクションを使ってある程度動的型付け言語のような動作をさせることができます。ライブラリによっては、「ある程度どんな型でも受け付けますよ」ということがあります。Goの<code>interface{}</code>型は他の言語でいう<code>any</code>だったり<code>void *</code>だったりします。例えば、GoでJSONを扱おう、となるとこの<a href="https://golang.org/pkg/encoding/json/#Marshal" target="_blank" rel="noopener">interface{}</a>が登場します。</p><p>で、こいつをどうやって作ればいいのか、というのもリファレンスの関数の定義をいくらにらめっこしても出てきません。数字でも文字列でも受けつけますよ、ということで<code>interface{}</code>にしているかもしれませんし、上記のJSONの場合は、自作の構造体を作る必要があります。その構造体のフィールドにはタグを付与します。このタグにはDSLというかルールがあるのですが、このルールは関数の引数とかのリファレンスを穴があくほど見ても分かりません。ライブラリの作者が自然言語で解説を書く必要があります。またJSONとかもタグを書かなかった場合のデフォルト動作みたいなのもあったりします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span>         <span class="string">`json:"name"`</span></span><br><span class="line">    SessionToken <span class="keyword">string</span> <span class="string">`json:"-"`</span></span><br><span class="line">    NickName <span class="keyword">string</span>     <span class="string">`json:"nickname,omitempty"`</span></span><br><span class="line">    Age <span class="keyword">int</span>             <span class="string">`json:"num,string"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この<code>interface{}</code>は自然言語部分の説明とかサンプルコードを参照するのが良いでしょう。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>プログラミングを学ぶと、一次情報にあたれ、みたいなことはよく言われます。今回は、その中でGoDocの読み方について解説しました。むしろ、GoDoc読んでもここは難しいぞ、というのを理解してもられば、GoDocとうまく折り合いをつけてやっていけるようになると思います。</p><p>上級者になるとリファレンスを見て使い方を想像したり、生のコードを解析してなんとかできるようになりますが、初心者だと使い方を知る部分も結構難しいです。サンプルコードも探しながら、挑戦して見てください。経験を積めば、少しずつ予想ができるようになってきます。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/tags/GoTips連載/&quot;&gt;Go Tips連載&lt;/a&gt;の第4弾目です。&lt;/p&gt;
&lt;p&gt;新しいプログラミング言語を学ぶときは、まず、情報の取得の仕方を覚えておくと学習効率が上がります。検索して、日本語で誰かが解説している二次情報を探すのもいいのですが、
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
      <category term="Document" scheme="https://future-architect.github.io/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips連載3: ファイルを扱うちょっとしたスクリプトをGoで書くときのTips5選</title>
    <link href="https://future-architect.github.io/articles/20200520/"/>
    <id>https://future-architect.github.io/articles/20200520/</id>
    <published>2020-05-20T00:43:46.000Z</published>
    <updated>2020-06-04T12:50:35.921Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200518/Go-Logo_LightBlue.png" class="img-small-size"><p><a href="/tags/GoTips連載/">Go Tips連載</a>の第3弾目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG の辻です。</p><p>筆者は普段ファイルを扱って何か簡単な処理をする場合は、シェルスクリプトで実装することが多かったのですが、実は Go で書くと簡単に、かつ Testable でスクリプトちっく <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> に書くことでできて、幸せになるんじゃないか？と最近考えています。</p><p>とある業務でファイルを扱い、ちょっとだけ複雑な繰り返しを要する処理をする必要がありました。手動で作業するのはめんどくさいし、<del>(モチベーションも上がらないし)</del> ロジックもちょっと面倒だったので、Go でスクリプトを書いて処理しました。</p><p>そこで今回はファイルを扱うようなスクリプトを Go で書くときに役に立ちそうな Tips 5 選を紹介します。</p><ol><li>ファイルの読み込みにio.Readerを用いる</li><li>ファイルの書き込みにio.Writerを用いる</li><li>リストファイルから1行ずつ読み込む</li><li>os/execを使う</li><li>ファイルパスの操作にpath/filepathを使う</li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="1-ファイルの読み込みにio-Readerを用いる"><a href="#1-ファイルの読み込みにio-Readerを用いる" class="headerlink" title="1.ファイルの読み込みにio.Readerを用いる"></a>1.ファイルの読み込みにio.Readerを用いる</h3><p>ファイルを読み込む際に <a href="https://golang.org/pkg/io/#Reader" target="_blank" rel="noopener">io.Reader</a> を受け取って処理するようにすると Testable なスクリプトになって安心です。簡単な処理とはいえやはりテストは書きたいですよね。</p><p>例として、ファイルの中に「Copyright」という文字列が含まれるかどうか調べる処理を考えてみます。実装例として以下の hasCopyright のような実装が考えられます。ポイントは io.Reader のインターフェースを関数の引数として受け取ることです。</p><figure class="highlight go"><figcaption><span>io.Readerの引数がポイント</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCopyright</span><span class="params">(r io.Reader)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">b, err := ioutil.ReadAll(r)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bytes.Contains(b, []<span class="keyword">byte</span>(<span class="string">"Copyright"</span>)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呼び元の実装例です。”LICENSE” ファイルは MIT のライセンスが書かれたファイルを Open しています。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(<span class="string">"LICENSE"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">ok, err := hasCopyright(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 何らかの処理</span></span><br><span class="line">fmt.Println(ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hasCopyright 関数は io.Reader を受け取る関数でした。もちろん以下のように <a href="https://golang.org/pkg/os/#File" target="_blank" rel="noopener">*os.File</a> 構造体を受け取って処理することもできます。しかしこのようにすると、引数には *os.File 構造体を受け取る必要があり、テストケースごとにファイルを作成しないといけません。</p><figure class="highlight go"><figcaption><span>非推奨な引数のとり方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非推奨: 具象の構造体を引数に取る関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCopyright</span><span class="params">(f *os.File)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">b, err := ioutil.ReadAll(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bytes.Contains(b, []<span class="keyword">byte</span>(<span class="string">"Copyright"</span>)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インターフェースである io.Reader を受け取る関数にすることで io.Reader を満たす任意の構造体を関数に渡すことができます。つまりファイルディスクリプタを示す os.File だけでなく <a href="https://golang.org/pkg/bytes/#Buffer" target="_blank" rel="noopener">byte.Buffer</a> や <a href="https://golang.org/pkg/strings/#Reader" target="_blank" rel="noopener">strings.Reader</a> といった構造体を渡すことができます。文字列の場合は <a href="https://golang.org/pkg/strings/#NewReader" target="_blank" rel="noopener">strings.NewReader</a> を用いて string から io.Reader を生成でき便利です。以下のようにテストすることが可能になります。</p><figure class="highlight go"><figcaption><span>main_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_hasCopyright</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">reader io.Reader</span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name    <span class="keyword">string</span></span><br><span class="line">args    args</span><br><span class="line">want    <span class="keyword">bool</span></span><br><span class="line">wantErr <span class="keyword">bool</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="string">"正常"</span>, args&#123;strings.NewReader(<span class="string">`Copyright`</span>)&#125;, <span class="literal">true</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="string">"MITライセンス"</span>, args&#123;strings.NewReader(<span class="string">`MIT License</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Copyright (c) 2020, Future Corporation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="string">of this software and associated documentation files (the "Software"), to deal</span></span><br><span class="line"><span class="string">in the Software without restriction, including without limitation the rights</span></span><br><span class="line"><span class="string">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></span><br><span class="line"><span class="string">copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="string">furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The above copyright notice and this permission notice shall be included in all</span></span><br><span class="line"><span class="string">copies or substantial portions of the Software.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="string">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="string">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="string">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="string">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="string">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></span><br><span class="line"><span class="string">SOFTWARE.`</span>)&#125;, <span class="literal">true</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="string">"空文字"</span>, args&#123;strings.NewReader(<span class="string">``</span>)&#125;, <span class="literal">false</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="string">"cが小文字"</span>, args&#123;strings.NewReader(<span class="string">`copyright`</span>)&#125;, <span class="literal">false</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="string">"スペース有り"</span>, args&#123;strings.NewReader(<span class="string">`Copy right`</span>)&#125;, <span class="literal">false</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got, err := hasCopyright(tt.args.reader)</span><br><span class="line"><span class="keyword">if</span> (err != <span class="literal">nil</span>) != tt.wantErr &#123;</span><br><span class="line">t.Errorf(<span class="string">"hasCopyright() error = %v, wantErr %v"</span>, err, tt.wantErr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"hasCopyright() got = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span></span><br><span class="line">=== RUN   Test_hasCopyright</span><br><span class="line">=== RUN   Test_hasCopyright/正常</span><br><span class="line">=== RUN   Test_hasCopyright/MITライセンス</span><br><span class="line">=== RUN   Test_hasCopyright/空文字</span><br><span class="line">=== RUN   Test_hasCopyright/cが小文字</span><br><span class="line">=== RUN   Test_hasCopyright/スペース有り</span><br><span class="line">--- PASS: Test_hasCopyright (0.00s)</span><br><span class="line">    --- PASS: Test_hasCopyright/正常 (0.00s)</span><br><span class="line">    --- PASS: Test_hasCopyright/MITライセンス (0.00s)</span><br><span class="line">    --- PASS: Test_hasCopyright/空文字 (0.00s)</span><br><span class="line">    --- PASS: Test_hasCopyright/cが小文字 (0.00s)</span><br><span class="line">    --- PASS: Test_hasCopyright/スペース有り (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>テストが通ると、想定した動作をしていることがわかり、安心します。シェルスクリプトで同じような確認をしようと思うと、ちょっと手間です。</p><h3 id="2-ファイルの書き込みにio-Writerを用いる"><a href="#2-ファイルの書き込みにio-Writerを用いる" class="headerlink" title="2.ファイルの書き込みにio.Writerを用いる"></a>2.ファイルの書き込みにio.Writerを用いる</h3><p>ファイルの読み込みに io.Reader を用いる場合と同じ話です。ファイルの書き込みに <a href="https://golang.org/pkg/io/#Writer" target="_blank" rel="noopener">io.Writer</a> を用いると Testable なスクリプトになります。簡単な例として、ファイルの末尾に 「Hello World.」という文字列を追記する関数を考えてみます。</p><figure class="highlight go"><figcaption><span>io.Writerを利用する</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 末尾に Hello World. を書き込むサンプル実装</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeHello</span><span class="params">(w io.Writer)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"\nHello World."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実際のファイルに書き込まなくても io.Writer を実装している <a href="https://golang.org/pkg/bytes/#Buffer" target="_blank" rel="noopener">bytes.Buffer</a> に文字列を書き込み、比較してテストすることができます。実際にファイルを作成したい場合は <a href="https://golang.org/pkg/os/#Create" target="_blank" rel="noopener">os.Create</a> などとすれば生成することができます。</p><figure class="highlight go"><figcaption><span>main_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_writeHello</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">wantW <span class="keyword">string</span></span><br><span class="line">diff  <span class="keyword">bool</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="string">"正常"</span>, <span class="string">"\nHello World.\n"</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="string">"終端の改行がない"</span>, <span class="string">"\nHello World."</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="string">"先頭の改行がない"</span>, <span class="string">"Hello World.\n"</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">w := &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">writeHello(w)</span><br><span class="line"><span class="keyword">if</span> gotW := w.String(); gotW != tt.wantW &#123;</span><br><span class="line"><span class="keyword">if</span> !tt.diff &#123;</span><br><span class="line">t.Errorf(<span class="string">"writeHello() = %v, want %v"</span>, gotW, tt.wantW)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span></span><br><span class="line">=== RUN   Test_writeHello</span><br><span class="line">=== RUN   Test_writeHello/正常</span><br><span class="line">=== RUN   Test_writeHello/終端の改行がない</span><br><span class="line">=== RUN   Test_writeHello/先頭の改行がない</span><br><span class="line">--- PASS: Test_writeHello (0.00s)</span><br><span class="line">    --- PASS: Test_writeHello/正常 (0.00s)</span><br><span class="line">    --- PASS: Test_writeHello/終端の改行がない (0.00s)</span><br><span class="line">    --- PASS: Test_writeHello/先頭の改行がない (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>ちゃんと想定通り書き込めていることが分かります。</p><h3 id="3-リストファイルから1行ずつ読み込む"><a href="#3-リストファイルから1行ずつ読み込む" class="headerlink" title="3.リストファイルから1行ずつ読み込む"></a>3.リストファイルから1行ずつ読み込む</h3><p>ファイルに記載されている文字列を改行コードで区切って一行ずつ処理をする機会は多いと思います。シェルスクリプトだと以下のようにして各行を読み込んでなんやかんやする感じです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 何らかの処理をする</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;line&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span> &lt; list.txt</span><br></pre></td></tr></table></figure><p>文字列リストの一覧を list.txt などとしてファイルを生成しておいて、ファイルから 1 行ずつ読み込みたいときの Go の Tips です。以下のような階層になっているとします。</p><figure class="highlight bash"><figcaption><span>ディレクトリ構成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── list.txt</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p>list.txt の中身は以下のようにリポジトリ名が書いてあるファイルとします。</p><figure class="highlight bash"><figcaption><span>list.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">future-architect/vuls</span><br><span class="line">future-architect/gcp-instance-scheduler</span><br><span class="line">future-architect/cheetah-grid</span><br><span class="line">future-architect/uroborosql</span><br><span class="line">future-architect/icons</span><br></pre></td></tr></table></figure><p><a href="https://golang.org/pkg/bufio/#NewScanner" target="_blank" rel="noopener">bufio.NewScanner</a> を用いて io.Reader (ファイルや標準入出力など)から文字列を読み込むことできます。改行コードを気にせず、各行を読み込むことができるのが嬉しいポイントです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(<span class="string">"list.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">sc := bufio.NewScanner(f)</span><br><span class="line"><span class="keyword">for</span> sc.Scan() &#123;</span><br><span class="line"><span class="comment">// list.txt にかかれている行の文字列を用いて処理をする</span></span><br><span class="line">line := sc.Text()</span><br><span class="line">fmt.Println(line)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := sc.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出力結果:</span></span><br><span class="line"><span class="comment">// future-architect/vuls</span></span><br><span class="line"><span class="comment">// future-architect/gcp-instance-scheduler</span></span><br><span class="line"><span class="comment">// future-architect/cheetah-grid</span></span><br><span class="line"><span class="comment">// future-architect/uroborosql</span></span><br><span class="line"><span class="comment">// future-architect/icons</span></span><br></pre></td></tr></table></figure><p><a href="https://golang.org/pkg/bufio/#Reader" target="_blank" rel="noopener">bufio.Reader</a> を用いても bufio.NewScanner を用いたときと同様に読み込むことができますが <code>io.EOF</code> のハンドリングする必要がある分、幾分プリミティブな実装です。</p><figure class="highlight go"><figcaption><span>幾分プリミティブな実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(<span class="string">"list.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">r := bufio.NewReader(f)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// list.txt にかかれている行の文字列を用いて処理をする</span></span><br><span class="line">line, _, err := r.ReadLine()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>(line))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-os-execを使う"><a href="#4-os-execを使う" class="headerlink" title="4.os/execを使う"></a>4.os/execを使う</h3><p>ファイルを扱うスクリプトに限った話ではないですが Go では <a href="https://golang.org/pkg/os/exec/#Cmd" target="_blank" rel="noopener">exec.Cmd</a> を用いて外部コマンドを実行することができます。とても便利です。<a href="https://golang.org/pkg/os/exec/#Command" target="_blank" rel="noopener">exec.Command</a> 関数を用いて Path と Args に実行したい文字列をセットします。外部コマンドの実行結果が不要であれば <a href="https://golang.org/pkg/os/exec/#Cmd.Run" target="_blank" rel="noopener">Run()</a>, 必要であれば <a href="https://golang.org/pkg/os/exec/#Cmd.Output" target="_blank" rel="noopener">Output()</a> を用いることができます。たいていの場合この 2 つのメソッドで充足することが多いです。</p><p>外部コマンドの実行した結果、エラーが発生すれば戻り値の error に値が格納されます。<code>_</code> などとしてエラーを無視しないようにしましょう。ちゃんとエラーをチェックすれば直前のコマンドでエラーが発生していたけど、間違って次のコマンドが実行されてしまった。<code>cd</code> でエラーが発生していたけど、後続の <code>rm</code> が実行されて意図しないファイルやディレクトリが削除されてしまった。。。などということは防げます。Bash で <code>set -ue</code> しておくのと似たような雰囲気です。</p><p>その他の情報、例えば PID や終了ステータスといった実行結果を取得したい場合は Cmd 構造体に含まれる ProcessState フィールド(<a href="https://golang.org/pkg/os/#ProcessState" target="_blank" rel="noopener">*os.ProcessState</a> 型)にアクセスするといろいろな情報を取得できます。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">"git"</span>, <span class="string">"clone"</span>, <span class="string">"-b"</span>, <span class="string">"delelop"</span>, <span class="string">"https://..."</span>)</span><br><span class="line"><span class="keyword">if</span> err := cmd.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(cmd.ProcessState.Pid())</span><br><span class="line">fmt.Println(cmd.ProcessState.String())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 実行結果:</span></span><br><span class="line"><span class="comment">// 1234</span></span><br><span class="line"><span class="comment">// exit status 0</span></span><br></pre></td></tr></table></figure><p>注意しておきたいポイントとしてシェルスクリプトで <code>*</code> (ワイルドカード)を使ってコマンドを実行するときに Go の exec.Command の引数に <code>*</code> を含めても展開されません。以下のような実装はエラーが返ってきます。<code>*</code> はシェルスクリプトが展開する(glob でパターンマッチングする)ためです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b, err := exec.Command(<span class="string">"ls"</span>, <span class="string">"*.go"</span>).Output()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 実行結果:</span></span><br><span class="line"><span class="comment">// 2020/04/17 10:57:11 exit status 2</span></span><br></pre></td></tr></table></figure><p>シェルスクリプトの <code>*</code> を使いたい場合は以下のように exec.Command の引数で明示的に <code>/bin/sh -c</code> とする必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b, err := exec.Command(<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"ls"</span>, <span class="string">"*.go"</span>).Output()</span><br></pre></td></tr></table></figure><p>その他にも os.exec の <a href="https://golang.org/pkg/os/exec/#pkg-overview" target="_blank" rel="noopener">Overview</a> には、リダイレクトはされない、glob パターンの展開には <code>filepath.Glob</code> を用いることができる、などといった os.exec を扱う上での注意点が記載されています。あらためて確認してみてください。</p><h3 id="5-ファイルパスの操作にpath-filepathを使う"><a href="#5-ファイルパスの操作にpath-filepathを使う" class="headerlink" title="5.ファイルパスの操作にpath/filepathを使う"></a>5.ファイルパスの操作にpath/filepathを使う</h3><p>ファイルパスの結合に以下のように文字列で <code>/</code> を結合させて、あるディレクトリにファイルを生成することがあると思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testFilePath := tempDir + <span class="string">"/"</span> + <span class="string">"test.txt"</span></span><br></pre></td></tr></table></figure><p>ファイルパス関連で問題の一つとして Unix 系 OS と Windows でパスのセパレータが異なるという問題があります。Unix 系 OS ではセパレータが <code>/</code> であって Windows では <code>\</code> という話です。通常、この手のスクリプトを Unix 系 OS と Windows の両方で動作させることは少ないと思うので、問題になることはあまりないと思いますが、<a href="https://golang.org/pkg/path/filepath/" target="_blank" rel="noopener">path/filepath</a> パッケージを用いるとマルチプラットフォームで扱うことができスマートです。path/filepath パッケージは対象の OS で定義されているファイルパスと互換性のある方法でファイルパスを操作することができるユーティリティを提供しているパッケージです。</p><p>以下はカレントディレクトリ直下に一時的なディレクトリ tempxxxx を作成して、その一時ディレクトリにファイルを生成する実装例です。ファイルパスの結合に <a href="https://golang.org/pkg/path/filepath/#Join" target="_blank" rel="noopener">filepath.Join</a> を用いています。以下の実装では tempDir と test.txt を Join していますが、3 つ以上の文字列を Join することも可能です。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tempDir, err := ioutil.TempDir(<span class="string">"."</span>, <span class="string">"temp"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// defer os.RemoveAll(tempDir) とすればスクリプト終了時に一時ディレクトリを削除することも可能</span></span><br><span class="line"></span><br><span class="line">testFilePath := filepath.Join(tempDir, <span class="string">"test.txt"</span>)</span><br><span class="line">f, err := os.Create(testFilePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">writeHello(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ファイル扱うようなスクリプトを Go で実装する上での Tips 5 選を紹介しました。io.Reader や io.Writer といったインターフェースを受け取ることでファイルを扱うスクリプトでも簡単にテストすることができます。エラーも明示的にハンドリングすることができていい感じです。ちょっとしたファイルを扱う処理を Go で書いてみてはいかがでしょうか。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">ProcessState フィールドを参照するテクニックは <a href="https://umedago.connpass.com/event/159972/" target="_blank" rel="noopener">Umeda.go 2020 Winter</a> で渋川さんが話されていました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">スクリプトちっくとは main.go と main_test.go の 2 ファイルで簡潔に実装できる程度の処理、くらいのニュアンスで使っています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200518/Go-Logo_LightBlue.png&quot; class=&quot;img-small-size&quot;&gt;


&lt;p&gt;&lt;a href=&quot;/tags/GoTips連載/&quot;&gt;Go Tips連載&lt;/a&gt;の第3弾目です。&lt;/p&gt;
&lt;h2 id=&quot;は
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips連載2: Golandで環境変数をさっと貼る方法 </title>
    <link href="https://future-architect.github.io/articles/20200519/"/>
    <id>https://future-architect.github.io/articles/20200519/</id>
    <published>2020-05-19T12:52:54.000Z</published>
    <updated>2020-05-23T05:17:17.033Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200519/top.png"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a>の第2弾です。</p><p>こんにちは。TIG DXユニットの真野です。ここ数ヶ月は某IoT案件でGoを用いてバックエンド開発に勤しんでいました。連載第1弾の<a href="/articles/20200518/">ホワイトリストProxy申請するときのGo依存ライブラリURLドメインの調べ方</a>を書いた宮崎さんとは、Goでメッセージ管理のライブラリとか、2-Way-SQLのライブラリとかを作りたいよねといったネタを交換を良くする仲です。</p><p>今回はGoでアプリ開発するときにお世話になっている人が多い、<a href="https://www.jetbrains.com/go/" target="_blank" rel="noopener">Goland</a>のTipsを紹介します。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><a href="https://12factor.net/ja/" target="_blank" rel="noopener">The Twelve-Factor App</a>の方法論や、Dockerなどコンテナの流行に合わせて、環境変数でアプリケーションの設定を切り替えることが増えていると思います。</p><p>単純にこの言葉通りに設計すると、以下のように環境変数の種類が増えてくる場合が多いと思います。噂では30~40の環境変数を使うコンテナアプリも聞いたことがあります。</p><figure class="highlight bash"><figcaption><span>まだこれでも少ない方かもしれない環境変数が沢山ある例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_USER=local_user</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_ITEM=local_item</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_PROFILE=local_profile</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_INSTALLATION=local_installation</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_CALENDAR=local_calendar</span><br><span class="line"><span class="built_in">export</span> AUDIT_API_ENDPOINT=http://localhost:8000</span><br><span class="line"><span class="built_in">export</span> AUDIT_ID_TRACE_ENDPOINT=http://localhost:8001</span><br><span class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=dummy</span><br><span class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=dummy</span><br><span class="line"><span class="built_in">export</span> AWS_REGION=ap-northeast-1</span><br></pre></td></tr></table></figure><p>ターミナルでGoのテスト実行やアプリ起動を行う場合は、上記をそのまま動かせばよいだけですが、Goland上でDebug実行するときなどは大変です。なぜなら <code>Run Configurations</code> で心を込めてポチポチ環境変数を設定する必要があるからです。とても面倒だと思いました。</p><img src="/images/20200519/photo_20200519_01.png"><p>これは大変なタスクです。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Key=Value形式をセミコロン区切りでクリップボードにコピーすると、一括で貼り付け可能です。</p><p>今回の例だと、exportを外して改行コードの代わりにセミコロンに書き換えてCtr+C…</p><p><code>DYNAMO_TABLE_USER=local_user;DYNAMO_TABLE_ITEM=local_item;DYNAMO_TABLE_PROFILE=local_profile;DYNAMO_TABLE_INSTALLATION=local_installation;DYNAMO_TABLE_CALENDAR=local_calendar;AUDIT_API_ENDPOINT=http://localhost:8000;AUDIT_ID_TRACE_ENDPOINT=http://localhost:8001;AWS_ACCESS_KEY_ID=dummy;AWS_SECRET_ACCESS_KEY=dummy;AWS_REGION=ap-northeast-1;</code></p><p>Environment VariablesのアイコンをクリックすればOKです。</p><img src="/images/20200519/photo_20200519_02.gif"><p>CLI操作では無いのが強いていうと不満ですが、とても楽ちんです。</p><h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><p><code>envfile</code> を読み込むプラグインが存在します。<br><a href="https://plugins.jetbrains.com/plugin/7861-envfile" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/7861-envfile</a></p><p>これを用いれば、ターミナルはdirenv 、Goland上ではEnvFileに任せると一貫性があるかも知れません。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Golandはセミコロン区切りで複数の環境変数をコピペ可能</li><li>プラグインを入れればもう少し固く管理も可能</li></ul><p>皆さまの開発生産性に少しでも役立てれば幸いです。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200519/top.png&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;/tags/GoTips%E
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Goland" scheme="https://future-architect.github.io/tags/Goland/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Go Tips連載1: ホワイトリストProxy申請するときのGo依存ライブラリURLドメインの調べ方</title>
    <link href="https://future-architect.github.io/articles/20200518/"/>
    <id>https://future-architect.github.io/articles/20200518/</id>
    <published>2020-05-18T00:55:52.000Z</published>
    <updated>2020-05-23T05:17:09.716Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200518/Go-Logo_LightBlue.png" class="img-small-size"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/tags/GoTips連載/">Go Tips連載</a>の第1弾目です。</p><p>TIG DXユニットの宮崎です。これまでRuby、Java中心に仕事をしてきましたが、ここ1年は某鉄道会社のID連携基盤サーバサイドをGolangで作っています。今回はGo Tips連載の第一回として、ホワイトリストProxy申請するときのGo依存ライブラリURLドメインの調べ方を記載します。</p><p>※パッケージ管理にはGo Modulesを使用している前提です。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>社内CIサーバからのインターネットアクセスがやんごとなき事情でホワイトリスト形式で許可されており、ライブラリダウンロードでアクセスするドメインへの接続解除申請を上げようとしたのが契機。  </p><p>go.modでrequireしているドメインへのアクセスを全て許可したのにも関わらず一部のライブラリが落とせなく、(;´･ω･)? となったのでこれ以上の犠牲者を出さないためTips連載ネタにします。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><ul><li>インターネットアクセスできる環境にて<code>go mod download -v</code>でアクセス先を全て表示させる。</li><li>この時、ライブラリによってはrequireドメインではないリポジトリにリダイレクトされているので、アクセス許可ドメインとして見逃さないこと。(ハマりポイント)　  <ul><li>↓の場合だとrequire先は<code>cloud.google.com</code>だがライブラリダウンロード自体は<code>code.googlesource.com</code>から実施される。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get <span class="string">"cloud.google.com/go"</span>: found meta tag get.metaImport&#123;Prefix:<span class="string">"cloud.google.com/go"</span>, VCS:<span class="string">"git"</span>, </span><br><span class="line">RepoRoot:<span class="string">"https://code.googlesource.com/gocloud"</span>&#125; at https://cloud.google.com/go?go-get=1</span><br></pre></td></tr></table></figure><br>この記事で少しでも犠牲者が減ることを祈っています。<h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Goに関連した他の連載企画です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200518/Go-Logo_LightBlue.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GoTips連載" scheme="https://future-architect.github.io/tags/GoTips%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する</title>
    <link href="https://future-architect.github.io/articles/20200515/"/>
    <id>https://future-architect.github.io/articles/20200515/</id>
    <published>2020-05-15T13:25:58.000Z</published>
    <updated>2020-05-15T01:12:46.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>AWS StepFunctionsとLambdaを活用してバッチ処理を行う記事です。<a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載企画</a>の6回目です。</p><p>2020年はServerlessアーキテクチャが当たり前のように採用される時代になってきていると実感します。フロントエンドからアクセスされるBackendのAPIはAWS環境だと、AppsyncやAPI Gateway+Lambaの利用、IoTなどイベントドリブンなメッセージに対してはAWS IoT、その後続はKinesisを使い、さらにその後続でLambdaやKinesis AnalyticsでETL処理を行い、データストアとしてDynamoDBやS3に格納するといった一連の流れ全てフルマネージドなサービスに寄せて構築することも当たり前ですし、そういった事例も珍しく無くなってきました。</p><h1 id="サーバレスのバッチ処理"><a href="#サーバレスのバッチ処理" class="headerlink" title="サーバレスのバッチ処理"></a>サーバレスのバッチ処理</h1><p>そんな中で、バッチ処理（定時起動やユーザの非同期イベントで処理を行うジョブ）に関してはLambdaではなくECSなどを採用することが多いと思います。理由としてはやはり <a href="https://aws.amazon.com/jp/blogs/news/aws-lambda-timeout-15min/" target="_blank" rel="noopener">LambdaのTimeout時間が最大で15分</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> であるためです。また、ECSも非同期タスク起動ではなく常駐にしてHTTPリクエストなどでイベントを待ち受けるタイプに関しては、<a href="https://docs.aws.amazon.com/ja_jp/elasticloadbalancing/latest/application/application-load-balancers.html#connection-idle-timeout" target="_blank" rel="noopener">ALBであれば4000秒（約66分）</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>なため、1h超えの処理時間になりうる機能は採用できないでしょう。ALBではなくNLBを採用するとこの制約からは逃げられるので、SecurityGroupなどの考えがややALBと異なりますがこちらを採用するチームもいらっしゃると思います。もしくは次の <a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/run-task.html" target="_blank" rel="noopener">ecs-run-task</a> で非同期にECSコンテナを呼び出している、という方式をとることも多いのでは無いでしょうか？ 定期実行であれば、ECS Scheduled Tasksを利用することもできるので便利ですよね。</p><h1 id="ECS-Run-Taskについて"><a href="#ECS-Run-Taskについて" class="headerlink" title="ECS Run Taskについて"></a>ECS Run Taskについて</h1><p>ecs-run-taskで非同期（または定期的）にECSを呼び出す方法を取るメリットは多く、、</p><ul><li>Timeoutなどの各種制約を無視して実行できる</li><li>実質main関数を実装すれば良いので開発時にコンテナを意識することは少ない意味で難易度は高くない</li><li>log出力も自由自在（直接ElasticSearchにログを投げつけることなど何でもできる）</li><li>Fargateを用いるとサーバインフラを意識しないで済むため、実質Serverlessとして運用できそう</li></ul><p>…と言ったことがあります。とは言えいくつかトレードオフもあります。思いつく限りだと…</p><ul><li>ECSタスクの終了を <strong>待ち受けて</strong> 次処理を行うといったことがやりにくい<ul><li>起動したECSタスクが終了したということを、通常はPolling的に監視する必要がある<ul><li>もしくは、ECSコンテナアプリの終了時に、SQSなどに実行終了したことを通知する必要がある</li></ul></li></ul></li><li>コンテナサイズに依存して起動時間のオーバーヘッドがある</li><li>ECS TaskDefinitionの管理が大変</li></ul><p>などがあると思います。<a href="https://github.com/kayac/ecspresso" target="_blank" rel="noopener">kayac/ecspresso</a> のようなECSデプロイツールや、ECS以外のサービスを採用しても学習コスト・インフラ保守コストはどうしてもかかるのでやや無理やり上げた感がありますがご容赦ください。</p><p>個人的にはジュニアなエンジニアがチームに多いのと、AWSに慣れていない新規参画者が多いという、「<strong>他アプリがLambdaで完結している場合に、ECSという別のアプリランタイムを入れたくない</strong>」 という技術スタックをなるべく増やしたくないという思いがあり、できる限りアプリ開発はLambdaでやりたいと思ってます。（Dockerfileもなるべく書かせなく無ければ、 ECRやECSなどインフラ管理対象も増やしたくないし、CI/CDのバリエーションも下げて楽したいというのがあります）</p><h1 id="Lambdaでバッチ処理をガンバル"><a href="#Lambdaでバッチ処理をガンバル" class="headerlink" title="Lambdaでバッチ処理をガンバル"></a>Lambdaでバッチ処理をガンバル</h1><p>起動時間の制約があるもののLambdaでバッチ処理をガンバル前提で進めます。</p><p>アプローチとしては色々あると思いますが、よく思いつくのは次の2つの手法です。</p><ol><li>Lambdaの実行時間をアプリ上で計測し、シンデレラタイムが近づきそうであれば自分で処理を中断、オフセットを引数にSQSに投げるか、非同期で次のLambdaをInvokeして処理を継続する(下図のLambda延命イメージ)</li><li>入力データを一定の大きさでパーティション化して、1と同じくSQSやLambdaをInvokeして後続の複数のLambdaで処理を行う（下図のLambda入力パーティションイメージ）</li></ol><img src="/images/20200515/photo_20200515_01.png"><p>入力データを上手く分割実行できないものに関しては1でシーケンシャルに行う必要がありますが、そうでない場合は2のアプローチのほうが、後々並列実行したい場合にも転用できるので便利だと思いますので、2の方針で進めます。</p><h1 id="コードについて"><a href="#コードについて" class="headerlink" title="コードについて"></a>コードについて</h1><p>次からGoのコードをまじえながら進めていきます。記載するサンプルコードはimport文などを省略しています。全文は以下のリポジトリを参照ください。</p><p><a href="https://github.com/laqiiz/servlerless-batch-example" target="_blank" rel="noopener">https://github.com/laqiiz/servlerless-batch-example</a></p><h1 id="入力がDynmaoDBの場合"><a href="#入力がDynmaoDBの場合" class="headerlink" title="入力がDynmaoDBの場合"></a>入力がDynmaoDBの場合</h1><p>DynamoDBはKVSという印象が強いですが、非常に多くの機能を持っています。いわゆるPK（HashKeyかHashKey＋SortKey）を指定せずにレコードを取得する方法には、次の1,2がありますがバッチ用途だとおそらく1を利用することが多いと思います。ちなみに、2はGSIに対しても実施できます。</p><ol><li><strong>Scan</strong>: HashKeyを指定せずフルスキャンする</li><li><strong>Query</strong>: HashKeyを指定してSortKeyに対して条件で絞る</li></ol><p>1のフルスキャンですがアプリケーション側でPartitionKeyのようなものを持たせること無く、DynamoDBの機能として下図のように <a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan" target="_blank" rel="noopener">並列スキャン</a>が可能です。</p><img src="/images/20200515/photo_20200515_02.png"><p>AWSのドキュメントから引っ張って来ましたが、 <code>TotalSegments</code> と <code>Segment</code> をリクエストに指定することで、DynamoDB側がデータを論理的にTotalSegmentsの数に分割してくれます。アプリケーション側では以下のように指定するだけでOKです。</p><p>例としてTotalSegments、Segmentを指定した場合のDynamoDB ScanのGo実装の例です。TotalSegmentsを<code>4</code>にする場合は、total=4にし、segに0,1,2,3指定した実行すれば排他的にデータを取得できます。何かしらのPartitionKeyとSortKeyを設定してGSIで上手くデータを分割すると言った考慮なしに利用できるため非常に便利だと思います。</p><p>アクセス方法を書いていきます。最初にDynamoDBを初期化しておきます。必要に応じて各種Config設定を行います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = dynamodb.New(session.Must(session.NewSession(aws.NewConfig().WithRegion(<span class="string">"ap-northeast-1"</span>))))</span><br></pre></td></tr></table></figure><p>先ほど初期化したdbに対してデータ操作を行います。<code>TotalSegments</code>, <code>Segment</code> の指定が分割のキーとなります。</p><figure class="highlight go"><figcaption><span>Segment指定の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanSegment</span><span class="params">(ctx context.Context, total, seg <span class="keyword">int64</span>, startKey <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue)</span> <span class="params">([]Resp, <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue, error)</span></span> &#123;</span><br><span class="line">out, err := db.ScanWithContext(ctx, &amp;dynamodb.ScanInput&#123;</span><br><span class="line">TableName:         aws.String(<span class="string">"&lt;DynamoDB Scan Table&gt;"</span>),</span><br><span class="line">TotalSegments:     aws.Int64(total), <span class="comment">// セグメントへの分割数</span></span><br><span class="line">Segment:           aws.Int64(seg),   <span class="comment">// 処理番号（0,1,2,3を指定）</span></span><br><span class="line">ExclusiveStartKey: startKey,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"db.ScanWithContext: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resp []Resp</span><br><span class="line"><span class="keyword">if</span> err := dynamodbattribute.UnmarshalListOfMaps(out.Items, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"dynamodbattribute.UnmarshalListOfMaps: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, out.LastEvaluatedKey, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この <code>ScanSegment</code> 関数を呼び出すと、指定されたSegment番号のレコードのみ読み取る事ができます。呼び出し方は後述します。次の<strong>ページング</strong>の考えと合わせて考慮する必要があります。</p><h2 id="DynamoDBをバッチ処理で扱うときの注意"><a href="#DynamoDBをバッチ処理で扱うときの注意" class="headerlink" title="DynamoDBをバッチ処理で扱うときの注意"></a>DynamoDBをバッチ処理で扱うときの注意</h2><p>いくつか補足して、DynamoDBで大きなデータサイズのデータを扱う場合の注意を記載します。</p><h3 id="ページングについて"><a href="#ページングについて" class="headerlink" title="ページングについて"></a>ページングについて</h3><p>DynamoDBの1度のScanでの最大サイズは1MBという制約があります。それ以上のデータを読み取りる場合は、 ExclusiveStartKeyで指定しているような <a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination" target="_blank" rel="noopener">ページング</a> を行う必要があります。上記の実装であれば <code>ExclusiveStartKey</code> がそれにあたります。</p><p><code>ScanSegment</code> の呼び出し側の実装例も記載しておきます。</p><figure class="highlight go"><figcaption><span>ScanSegmentの呼び出し側の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanWithLogic</span><span class="params">(ctx context.Context, total, seg <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> startKey <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue <span class="comment">// 初回はnilでOK</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">resp, sk, err := ScanSegment(context.Background(), total, seg startKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"ScanSegment: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO respに対して何かしらのビジネスロジック</span></span><br><span class="line"></span><br><span class="line">startKey = sk</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(startKey) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// 続きが無いということなので終了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scanの結果をページングを駆使しつつ最後まで読み取る場合は、 Scan結果の <code>LastEvaluatedKey</code> が存在しなくなるまで繰り返して呼び出すことになります。上記で segments=0 のデータをすべて読み取る事ができました。</p><h3 id="単一プロセスでの分散実行"><a href="#単一プロセスでの分散実行" class="headerlink" title="単一プロセスでの分散実行"></a>単一プロセスでの分散実行</h3><p>もし、ローカルで分散実行したい場合はGoであれば errgroupを用いると便利です。注意としてどれか1つのgoroutineが失敗した場合でも、それだけやり直すのではなく全てやり直すことになるので、アプリケーションを冪等に作って置く必要があります。</p><figure class="highlight go"><figcaption><span>ローカルでの分散実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">parallel := <span class="number">4</span></span><br><span class="line"></span><br><span class="line">eg := errgroup.Group&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; parallel; i++ &#123;</span><br><span class="line">i := i</span><br><span class="line">eg.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">err := ScanWithLogic(context.Background(), <span class="keyword">int64</span>(parallel), <span class="keyword">int64</span>(i))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := eg.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"finished"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出力先をDynamoDBにする場合のスロットリング対策"><a href="#出力先をDynamoDBにする場合のスロットリング対策" class="headerlink" title="出力先をDynamoDBにする場合のスロットリング対策"></a>出力先をDynamoDBにする場合のスロットリング対策</h3><p>今回、出力先についてはテーマではないですが、DynamoDBに対して行う場合はクセがあるため追記しておきます。</p><p>大量データをDynamoDBに書き込む場合は、BatchWriteItemを利用することが多いでしょう。このとき<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Limits.html#limits-api" target="_blank" rel="noopener">DynamoDBのAPI制限</a> として、以下の25件の制約があります。</p><blockquote><p>単一の BatchWriteItem オペレーションは、最大 25 の PutItem または DeleteItem リクエストを含むことができます。書き込むすべての項目の合計サイズは 16 MB を超えることはできません。</p></blockquote><p>こちらは超過した場合には全件登録に失敗し、errorが返ってくるのでまだ良心的な制約です。</p><p>しかし、<a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html" target="_blank" rel="noopener">BatchWriteItemの仕様</a>としてバッチの <strong>部分的な書き込み成功</strong> が発生することがありえます。テーブル名の指定など基本的なところが失敗していれば、全件失敗になるのですが、書き込みスループット超過エラーであれば <code>UnprocessedItems</code> としてレスポンスに含まれ、そのItemは書き込み失敗になります。最初はmjkと思い、いまでもmjkって思ってます。</p><p>そのため、下記の実装例のように、実行結果から <code>UnprocessedItems</code> を取り出し未処理の件数が0になるまで繰り返してBatchWrite要求を行う必要があります。</p><figure class="highlight go"><figcaption><span>BatchPut時のUnprocessedItemsを考慮した実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchPut</span><span class="params">(ctx context.Context, puts []Output)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">batchReq := <span class="built_in">make</span>([]*dynamodb.WriteRequest, <span class="number">0</span>, <span class="number">25</span>) <span class="comment">// dynamodb max batch size is 25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> puts &#123;</span><br><span class="line">av, err := dynamodbattribute.MarshalMap(v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodbattribute.MarshalMap: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">batchReq = <span class="built_in">append</span>(batchReq, &amp;dynamodb.WriteRequest&#123;</span><br><span class="line">PutRequest: &amp;dynamodb.PutRequest&#123;</span><br><span class="line">Item: av,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(batchReq) &gt;= <span class="number">25</span> || (i == <span class="built_in">len</span>(puts) <span class="number">-1</span> &amp;&amp; <span class="built_in">len</span>(batchReq) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 25件に達したか、最後のループの場合に書き込む</span></span><br><span class="line">out, err := db.BatchWriteItemWithContext(ctx, &amp;dynamodb.BatchWriteItemInput&#123;</span><br><span class="line">RequestItems: <span class="keyword">map</span>[<span class="keyword">string</span>][]*dynamodb.WriteRequest&#123;</span><br><span class="line"><span class="string">"&lt;Your Write Table&gt;"</span>: batchReq,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"db.BatchWriteItemWithContext: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">batchReq = batchReq[:<span class="number">0</span>] <span class="comment">// 成功した場合はバッチ対象を初期化</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(out.UnprocessedItems[<span class="string">"&lt;Your Write Table&gt;"</span>]) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 未処理Itemが存在した場合は再設定</span></span><br><span class="line">batchReq = <span class="built_in">append</span>(batchReq, out.UnprocessedItems[<span class="string">"&lt;Your Write Table&gt;"</span>]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちょっと大変ですが、上記によってバッチ未処理の取りこぼし無くDynamoDBにデータを登録できます。逆にUnprocessedItemsを考慮せずに実行した場合、 err が発生せず正常終了するけどデータが実は未登録だった、ということがありえるのでご注意ください。</p><h1 id="入力がS3の場合"><a href="#入力がS3の場合" class="headerlink" title="入力がS3の場合"></a>入力がS3の場合</h1><p>前提としてS3に巨大な1ファイルに対して何かしらの検証やETLなどの処理を行うこととします。もし複数ファイルであればAWS Athenaのパーティション機能を用いた方が効率的だと思います。Athenaの場合はクエリ結果が非同期で取得することになるので内部で結果をポーリングするなど少し作り込みが必要だと思いますので、その点の考慮はご注意ください。</p><p>さて、S3の1ファイルを扱う場合で行単位でパーティショニングして読み取る方法は（調査した限りは）存在しません。入力がCSVやJSON Lineの前提だと <a href="https://aws.amazon.com/jp/blogs/news/querying-data-without-servers-or-databases-using-amazon-s3-select/" target="_blank" rel="noopener">S3 Select</a> が利用できるので、こちらで対応します。</p><p>S3 SelectはS3の単一オブジェクトに対してのみ利用可能。SQLのテーブル名は <code>s3object</code> 固定になります。何かしらの数値項目に対して、 <code>SELECT * FROM s3object WHERE (item_no % 4) = 0</code> とすれば対象のデータセットのみを扱えます。</p><p>CSVの入力に対しては、S3 Selectはデフォルト文字列で型判定するようなので、数値項目が存在する場合はSQL上で<code>CAST</code>が必要なので注意です。<a href="https://aws.amazon.com/jp/blogs/developer/introducing-support-for-amazon-s3-select-in-the-aws-sdk-for-go/" target="_blank" rel="noopener">AWS Developer Blog - Introducing support for Amazon S3 Select in the AWS SDK for Go</a>では <code>io.Pipe</code> + <code>csv.NewReader</code> を使っている実装例が紹介されていますが、今回は折角なのでJSON Outputを使って実装してみます。</p><p>以下のようにS3 Select部分にSQLを記載します。</p><figure class="highlight go"><figcaption><span>S3-Selectの呼び出し例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">resp, err := svc.SelectObjectContent(&amp;s3.SelectObjectContentInput&#123;</span><br><span class="line">Bucket:         aws.String(<span class="string">"&lt;Your S3 Bucket&gt;"</span>),</span><br><span class="line">Key:            aws.String(<span class="string">"&lt;S3 Key Name&gt;.csv"</span>),</span><br><span class="line">ExpressionType: aws.String(s3.ExpressionTypeSql),</span><br><span class="line">Expression:     aws.String(<span class="string">"SELECT cast(item_no integer), item_name FROM s3object s WHERE cast(item_no integer) % 4 = 0"</span>), <span class="comment">// 4分割のうちから0~3を指定</span></span><br><span class="line">InputSerialization: &amp;s3.InputSerialization&#123;</span><br><span class="line">CompressionType: aws.String(<span class="string">"NONE"</span>),</span><br><span class="line">CSV: &amp;s3.CSVInput&#123;</span><br><span class="line">FileHeaderInfo: aws.String(s3.FileHeaderInfoUse),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">OutputSerialization: &amp;s3.OutputSerialization&#123;</span><br><span class="line">JSON: &amp;s3.JSONOutput&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"svc.SelectObjectContent: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.EventStream.Close()</span><br></pre></td></tr></table></figure><p>上記を実行すると、<code>resp.EventStream</code> から実行結果を取得できるので、次のように処理します。</p><p><code>OutputSerialization</code> で <code>JSON</code> を指定すると <strong>JSON配列ではなく</strong>、<a href="http://jsonlines.org/" target="_blank" rel="noopener">JSON Lines</a>でデータが取得できるため、1行ずつ読み込みJSONをデコードします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> event := <span class="keyword">range</span> resp.EventStream.Events() &#123;</span><br><span class="line"><span class="keyword">switch</span> v := event.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *s3.RecordsEvent:</span><br><span class="line">r := bufio.NewReader(bytes.NewReader(v.Payload))</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, _, err := r.ReadLine()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"readLine :%w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resp Resp</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(line, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO 何かしらのビジネスロジック</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := resp.EventStream.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"resp.EventStream: %w"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これにより、S3 Selectレベルで分割されたレコードに対して何かしらの処理を行うことができます。今回はJSON Outputを用いましたが、入力がCSVの場合はCSVそのままで処理したほうが性能は良いかもしれません。</p><h2 id="S3-Selectを使う上での注意"><a href="#S3-Selectを使う上での注意" class="headerlink" title="S3 Selectを使う上での注意"></a>S3 Selectを使う上での注意</h2><p>バッチ処理に限らずですが、2020/04月時点ではAthenaのようにS3 Selectは外部スキーマを参照できないようなので、Structへのマッピングで数値項目が来た場合は、SQL側でCASTするのが手間でした。真面目にプロダクションで運用することを考えると、AWS Athenaを利用するほうが Schema on READ になるもの型の恩恵を受けられ良いかもしれません。</p><h1 id="Step-Functions"><a href="#Step-Functions" class="headerlink" title="Step Functions"></a>Step Functions</h1><p><a href="https://aws.amazon.com/jp/step-functions/" target="_blank" rel="noopener">AWS Step Functions</a> はAWS の複数のサービスに対してワークフローを組むことができるサービスです。ワークフローはステートマシンとして表現することでLambdaの実行管理を任せることができます。</p><p>ワークフローをJSONベースの構造化言語である<a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html" target="_blank" rel="noopener">Amazon States Language</a>で記載するという点がツラミとして挙げられることが大きもしますが、定義したワークフローは即座にプレビューで可視化されますしそれをSVGなどでExportもできるので、JSON力を鍛えながら開発することができます。</p><img src="/images/20200515/photo_20200515_03.png"><p>※HelloWorldのStep Functionsの開発イメージ</p><h2 id="Step-Functions-×-Lambda"><a href="#Step-Functions-×-Lambda" class="headerlink" title="Step Functions × Lambda"></a>Step Functions × Lambda</h2><p>Lambdaの実行時間制約をStep Functionsで突破しようという試みです。実際には以下のようなイメージです。前提として、処理件数が事前にある程度分かっている場合においては、単純にN個にタスクを分割してStep FunctionsからLambdaを呼び出せば良いです。この分散したLambdaそれぞれでDynamoDBのあるSegmentだけを担当させるイメージです。</p><p>DynamoDBやLambdaの場合はスケールアウトさせやすいサービスのため、固定であればParallelステートを利用して並列実行することができます。</p><img src="/images/20200515/photo_20200515_04.png"><p>ただ、Parallelステートだと分散するタスク自体をJSONで定義する必要があり、同時実行数を増やすたびにStepFunctionsの定義を更新する必要があり手間です。次の動的並列の機能を今回は利用したいと思います。</p><h2 id="動的並列する場合"><a href="#動的並列する場合" class="headerlink" title="動的並列する場合"></a>動的並列する場合</h2><p>Step Functionsは <a href="https://aws.amazon.com/jp/blogs/news/new-step-functions-support-for-dynamic-parallelism/" target="_blank" rel="noopener">Amazon Web Services ブログ - 新機能 – Step Functions が動的並列処理をサポート</a> で紹介されているMap 状態を用い、ワークフローでスキャッターギャザーメッセージングパターン（分散して集約するようなパターン）を行うことができます。</p><p>今回はこちらを採用して、最初にScatterLambdaというタスクで、分散情報を動的に生成し、TaskLambdaでDynamoDBをScanし、最後にGatherLambdaで実行件数をカウントするというフローを組むことにします（下図）。</p><img src="/images/20200515/photo_20200515_05.png"><p>※水色のオブジェクトが重なっているところが並列実行されるタスクです。この各LambdaでDynamoDBのあるSegment数だけ担当させるイメージです。</p><h2 id="Lambdaの-In-Out-設計"><a href="#Lambdaの-In-Out-設計" class="headerlink" title="Lambdaの In/Out 設計"></a>Lambdaの In/Out 設計</h2><p>3つのLambdaを利用しますが、概念的にそれぞれの入力・出力を示します。</p><img src="/images/20200515/photo_20200515_06.png"><h2 id="実装について"><a href="#実装について" class="headerlink" title="実装について"></a>実装について</h2><p>上図のような状態遷移図は、下記のJSONで表現できます。<code>ProcessAllSegments</code> の <code>Type: Map</code>と <code>Iterator</code> の部分がミソで、これによって動的に <code>tasklambda</code> 並列実行できます。</p><figure class="highlight json"><figcaption><span>分散実行の状態遷移.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"StartAt"</span>: <span class="string">"ScatterLambda"</span>,</span><br><span class="line">  <span class="attr">"States"</span>: &#123;</span><br><span class="line">    <span class="attr">"ScatterLambda"</span>: &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"Task"</span>,</span><br><span class="line">      <span class="attr">"Resource"</span>: <span class="string">"arn:aws:lambda:ap-northeast-1:123456789012:function:scatterlambda"</span>,</span><br><span class="line">      <span class="attr">"Next"</span>: <span class="string">"ProcessAllSegments"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"ProcessAllSegments"</span>: &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"Map"</span>,</span><br><span class="line">      <span class="attr">"InputPath"</span>: <span class="string">"$.task_definitions"</span>,</span><br><span class="line">      <span class="attr">"ItemsPath"</span>: <span class="string">"$"</span>,</span><br><span class="line">      <span class="attr">"MaxConcurrency"</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">"Iterator"</span>: &#123;</span><br><span class="line">        <span class="attr">"StartAt"</span>: <span class="string">"TaskLambda"</span>,</span><br><span class="line">        <span class="attr">"States"</span>: &#123;</span><br><span class="line">          <span class="attr">"TaskLambda"</span>: &#123;</span><br><span class="line">            <span class="attr">"Type"</span>: <span class="string">"Task"</span>,</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"arn:aws:lambda:ap-northeast-1:123456789012:function:tasklambda"</span>,</span><br><span class="line">            <span class="attr">"End"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"ResultPath"</span>: <span class="string">"$.task_results"</span>,</span><br><span class="line">      <span class="attr">"Next"</span>: <span class="string">"GatherLambda"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"GatherLambda"</span>: &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"Task"</span>,</span><br><span class="line">      <span class="attr">"InputPath"</span>: <span class="string">"$"</span>,</span><br><span class="line">      <span class="attr">"Resource"</span>: <span class="string">"arn:aws:lambda:ap-northeast-1:123456789012:function:gatherlambda"</span>,</span><br><span class="line">      <span class="attr">"End"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scatter, Task, GatherのLambdaはそれぞれ以下のような概要です。</p><h1 id="Scatter部分"><a href="#Scatter部分" class="headerlink" title="Scatter部分"></a>Scatter部分</h1><p>Scatterは入り口のLambdaで、<code>InEvent</code> を引数に持ちます。並列数を受け取ることができこれに応じたTask定義を作成して、後続の TaskLambda に渡します。</p><figure class="highlight go"><figcaption><span>ScatterLambda</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> InEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">Total <span class="keyword">int</span> <span class="string">`json:"total"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OutEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">TaskDefinitions []TaskDefinition <span class="string">`json:"task_definitions"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TaskDefinition <span class="keyword">struct</span> &#123;</span><br><span class="line">Total <span class="keyword">int64</span> <span class="string">`json:"total"`</span></span><br><span class="line">Seg   <span class="keyword">int64</span> <span class="string">`json:"seg"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(HandleRequest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleRequest</span><span class="params">(e InEvent)</span> <span class="params">(*OutEvent, error)</span></span> &#123;</span><br><span class="line">total := <span class="number">4</span> <span class="comment">// default</span></span><br><span class="line"><span class="keyword">if</span> e.Total != <span class="number">0</span> &#123;</span><br><span class="line">total = e.Total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defs := <span class="built_in">make</span>([]TaskDefinition, <span class="number">0</span>, total)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; total; i++ &#123;</span><br><span class="line">defs = <span class="built_in">append</span>(defs, TaskDefinition&#123;</span><br><span class="line">Total: <span class="keyword">int64</span>(total),</span><br><span class="line">Seg:   <span class="keyword">int64</span>(i),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;OutEvent&#123;</span><br><span class="line">TaskDefinitions: defs,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出力のイメージは、例えば4並列であれば次のようなJSON配列になるイメージです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;task_definitions&quot;: [</span><br><span class="line">    &#123;&quot;total&quot;: 4, &quot;seg&quot;: 0&#125;,</span><br><span class="line">    &#123;&quot;total&quot;: 4, &quot;seg&quot;: 1&#125;,</span><br><span class="line">    &#123;&quot;total&quot;: 4, &quot;seg&quot;: 2&#125;,</span><br><span class="line">    &#123;&quot;total&quot;: 4, &quot;seg&quot;: 3&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このJSON配列  <code>task_definitions</code> の1要素ずつ後続のLambdaに渡します。</p><h2 id="TaskLambad"><a href="#TaskLambad" class="headerlink" title="TaskLambad"></a>TaskLambad</h2><p>TaskLambdaは実際にDynamoDBにアクセスして、バッチ処理を行うメイン処理です。今回はただScanして件数を計算するだけですが実際は、外部のAPIサーバに問い合わエンリッチしたり、集約して計算したり、他のデータストアに書き込むなどを行います。引数である <code>InEvent</code> が示す通り、ScattterのLambdaで生成されたDynamoDBのSegument情報を受け取り利用します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> InEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">Total <span class="keyword">int64</span> <span class="string">`json:"total"`</span></span><br><span class="line">Seg   <span class="keyword">int64</span> <span class="string">`json:"seg"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OutEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">Count <span class="keyword">int64</span> <span class="string">`json:"count"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resp <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Any fields</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">db    = dynamodb.New(session.Must(session.NewSession(aws.NewConfig().WithRegion(<span class="string">"ap-northeast-1"</span>))))</span><br><span class="line">table = os.Getenv(<span class="string">"DYNAMO_TABLE"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(HandleRequest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleRequest</span><span class="params">(e InEvent)</span> <span class="params">(*OutEvent, error)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"InEvent: %+v"</span>, e)</span><br><span class="line">total, seg := e.Total, e.Seg</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> startKey <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">resp, sk, err := ScanSegment(context.Background(), total, seg, startKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"scan error: %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"ScanSegment: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">count += <span class="built_in">len</span>(resp)</span><br><span class="line">log.Printf(<span class="string">"count: %v"</span>, count)</span><br><span class="line"></span><br><span class="line">startKey = sk</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(startKey) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">"total count: %v"</span>, count)</span><br><span class="line"><span class="keyword">return</span> &amp;OutEvent&#123;</span><br><span class="line">Count: <span class="keyword">int64</span>(count),</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1つ1つのLambdaの出力は以下のようなシンプルなものです。</p><figure class="highlight json"><figcaption><span>出力例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"count"</span>: <span class="number">6293</span>&#125;</span><br></pre></td></tr></table></figure><p>並列実行された全てLambdaが終わると、最後にGatherのLambdaが起動します。</p><h2 id="GatherLambda"><a href="#GatherLambda" class="headerlink" title="GatherLambda"></a>GatherLambda</h2><p>最後に集約するLambdaです。TaskLambdaではScanした件数を出力しているので、それを集約して総件数を計算だけすることにします。 引数の <code>InEvent</code>が配列になっているのは、今回Iterationで並列実行されたため複数のOutputがあるためです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">Results []TaskResult <span class="string">`json:"task_results"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TaskResult <span class="keyword">struct</span> &#123;</span><br><span class="line">Count <span class="keyword">int64</span> <span class="string">`json:"count"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OutEvent <span class="keyword">struct</span> &#123;</span><br><span class="line">TotalCount <span class="keyword">int64</span> <span class="string">`json:"total_count"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(HandleRequest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleRequest</span><span class="params">(e InEvent)</span> <span class="params">(*OutEvent, error)</span></span> &#123;</span><br><span class="line">totalCount := <span class="keyword">int64</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> e.Results &#123;</span><br><span class="line">totalCount += v.Count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">"total: %d"</span>, totalCount)</span><br><span class="line"><span class="keyword">return</span> &amp;OutEvent&#123;</span><br><span class="line">TotalCount: totalCount,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回はGatherのLambdaで終了なのですが、何かしら戻り値を定義しておくとStepFunctionsのコンソール画面から実行結果を確認できるので便利です。もし、集約処理が不要な場合はこのLambdaをなくしてそのままEndしてしまうのも手だと思います。その場合はScatter&amp;Gatherというよりは、Fan-Outパターンと言うようです。</p><h2 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><p>それぞれ、それぞれのLambdaをデプロイして、StepFunctionsのJSONのARN部分を書き換えると実行可能です。ただし、TaskLambdaだけはDynamoDBにアクセスするためIAM RoleにDynamoDBのScan権限を付与してください。いくつかのコマンドは <a href="https://github.com/laqiiz/servlerless-batch-example" target="_blank" rel="noopener">https://github.com/laqiiz/servlerless-batch-example</a> にも記載しているので参考ください。</p><h1 id="性能検証"><a href="#性能検証" class="headerlink" title="性能検証"></a>性能検証</h1><p>作成したStepFunctionsがどれくらい処理性能がスケールするか検証しました。分散数を1, 2, 4, 8, 16 で計測しています。</p><p><strong>テストデータ</strong></p><ul><li>件数：約10万件</li><li>1ドキュメントあたりのフィールド数：15項目</li><li>1ドキュメントあたりのデータ量：JSON表現で300[KB]弱</li></ul><h2 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h2><p>処理時間と[ms]と分散数1との比率を表にしました。大体10万件のDynamoDBをScanするのに1並列だと30秒程度かかります。DynamoDBをScanするだけの処理では完全にリニアにスケールするというわけではないですが、本来はこの読み取ったレコードに対して、なにかしらの追加処理を行う時間が加算されるはずなのでほとんどのユースケースでは問題ないと思います。</p><table><thead><tr><th>分散数</th><th>処理時間[ms]</th><th>分散数1との比率[%]</th></tr></thead><tbody><tr><td>1</td><td>31077</td><td>100</td></tr><tr><td>2</td><td>15414</td><td>49.6</td></tr><tr><td>4</td><td>9035</td><td>29.1</td></tr><tr><td>8</td><td>5047</td><td>16.2</td></tr><tr><td>16</td><td>3402</td><td>10.9</td></tr></tbody></table><p>ちなみに、16並列では各実行数が6203~6577の間でScanできていたのでかなり件数は平準化できていました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>長いエントリーを最後まで読んでいただきありがとうございます。</p><ul><li>ServerlessのBatchといえばFargateがメジャーだと思うが、Lambdaも工夫次第で十分戦える</li><li>DynamoDBの並列Scanが便利で、10万件Scanが1並列で30秒ほどが目安</li><li>S3が入力だとしてもS3 Selectで入力を分割する設計で対応できる</li><li>StepFunctionsの動的並列実行を利用することでLambdaの実行時間制約に引っかからないように、事前で入力を分割しそれぞれのLambdaに渡す仕組みが作れる</li></ul><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">2020/04/26時点の話です。将来的に伸びる可能性が高いとは思っています。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;AWS StepFunctionsとLambdaを活用してバッチ処理を行う記事です。&lt;a href=&quot;https://fut
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>仕事でPythonコンテナをデプロイする人向けのDockerfile (2): distroless編</title>
    <link href="https://future-architect.github.io/articles/20200514/"/>
    <id>https://future-architect.github.io/articles/20200514/</id>
    <published>2020-05-13T23:51:53.000Z</published>
    <updated>2020-05-14T01:08:25.028Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200514/top.png"><p><a href="https://future-architect.github.io/articles/20200513/">前回のエントリー</a>では、Debianベースの堅実な仕事向けのDockerイメージ作成方法について紹介しました。</p><p>Goではそこそこ実績も増えつつある気がするdistroless。シェルが入っていないくて、ログインされることもなく安全というGoogle製のDockerイメージです。Python3はまだexperimentalですが、実は小さいと言われるalpine版よりも、イメージサイズが半分ぐらいだったりもします。distrolessでは3.7しかないので、3.7のイメージ同士の比較です。</p><table><thead><tr><th>イメージ</th><th>サイズ</th></tr></thead><tbody><tr><td>python:3.7-alpine</td><td>96MB</td></tr><tr><td>python:3.7-slim-buster</td><td>179MB</td></tr><tr><td>python:3.7-buster</td><td>919MB</td></tr><tr><td>gcr.io/distroless/python3-debian10</td><td>52MB</td></tr></tbody></table><p>なお、distrolessのイメージは2種類（3通りの名前）がありますが、Python 3.5はバグ修正はせず、セキュリティ修正のみでサポート期限が2020/9/13というステータスなので、本エントリーでは3.7の方のみを扱います。</p><ul><li>gcr.io/distroless/python3: Python 3.5.3</li><li>gcr.io/distroless/python3-debian9: Python 3.5.3(上のイメージと同一)</li><li>gcr.io/distroless/python3-debian10: Python 3.7.3</li></ul><p>一応サンプル等もありますが、どれも1ファイルで構成されたサンプルスクリプトばかりです。前回のsite-packagesにコピーする方法を軽く試したところうまく動かず、シェルもpipもensurepipもないため、ビルドイメージにすることもできません。いろいろ調べた結果、使い方がわかったので、そのやり方を紹介します。</p><p><a href="https://github.com/GoogleContainerTools/distroless/tree/master/examples/python3" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/distroless/tree/master/examples/python3</a></p><h1 id="ベースイメージの組み合わせ"><a href="#ベースイメージの組み合わせ" class="headerlink" title="ベースイメージの組み合わせ"></a>ベースイメージの組み合わせ</h1><p>多少のイメージサイズによるコスト削減幅よりも、社員がビルドで苦労しない、残業代が減らせる、という方が仕事上は圧倒的にバリューとして大切なことが多いので、Debian版を最初に紹介しましたし、そこの価値は変わりません。しかし、セキュリティ上もうれしいというのであれば使わない手はありませんが、残念ながらすべてのケースに使えるわけではなさそうです。ベースイメージの組み合わせ別の使える例を紹介します。</p><table><thead><tr><th align="center">ビルドベースイメージ</th><th align="center">実行ベースイメージ</th><th align="center">Pure Python</th><th align="center">C拡張(wheelあり)</th><th align="center">C拡張(wheelなし)</th></tr></thead><tbody><tr><td align="center">full版Debian</td><td align="center">slim版Debian</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="center">slim版Debian</td><td align="center">slim版Debian</td><td align="center">○</td><td align="center">○</td><td align="center"></td></tr><tr><td align="center">slim版Debian</td><td align="center">distroless</td><td align="center">○</td><td align="center">○</td><td align="center"></td></tr><tr><td align="center">(参考)Alpine</td><td align="center">Alpine</td><td align="center">○</td><td align="center">※1</td><td align="center">※2</td></tr></tbody></table><p>※1 manylinux1が動作せず、ソースビルドになる。apkでgcc等のインストールが必要<br>※2 apkでgcc等のインストールが必要</p><p>Pythonの場合、多くのパッケージがバイナリwheelを提供してくれています。そのため、Cコンパイラのインストールや設定が大変なWindowsであっても、昔からPythonユーザーはネイティブコードを使ったライブラリの恩恵に授かりやすく、環境構築も短時間で完了していました。「ライブラリのビルドが難しい」みたいな話は僕はPythonではほとんど聞いたことがありません。そのため、distrolessを使うチャンスはもしかしたら結構多いかもしれません。しかし、前回紹介したuwsgiはコンパイルが必要なので難しいです。</p><p>コンパイルが必要なパッケージをビルドしても、libpython3.7m.soが見つからない、みたいなエラーになってしまい、一筋縄ではいかなそうなのですよね（数日トライしたがいかなかった）。もし解決策を見つけた方はおしらせください。</p><h1 id="敵を知り己を知れば百戦殆うからず"><a href="#敵を知り己を知れば百戦殆うからず" class="headerlink" title="敵を知り己を知れば百戦殆うからず"></a>敵を知り己を知れば百戦殆うからず</h1><p>「前回のsite-packagesにコピーする方法を軽く試したところうまく動かなかった」と紹介しましたが、設定がもろもろ違うのですよね。このあたりを知っておかないと、いざdistrolessでトラブルが発生したときに解決に時間がかかると思うので（実際かかった）、どんな感じか調査結果をまとめておきます。</p><h2 id="シェルがない"><a href="#シェルがない" class="headerlink" title="シェルがない"></a>シェルがない</h2><p>まずシェルがないので、通常のDockerはENTRYPOINTがシェルで、CMDに実行されるコマンドを書く、というのが通例ですが、distrolessはCMDがpython3です。CMDにはPythonの処理系で処理できるコードを渡さなければなりません。イメージのlatest（デフォルト）ではなく、debugタグ（イメージ名の末尾に<code>:debug</code>をつける）と、busyboxのシェルが有効になりますが、あくまでもデバッグ用途ですね。</p><h2 id="PythonのパスなどがDebian版と違う"><a href="#PythonのパスなどがDebian版と違う" class="headerlink" title="PythonのパスなどがDebian版と違う"></a>PythonのパスなどがDebian版と違う</h2><p>通常、<code>sys.path</code>には<code>/usr/local/lib/python3.7/site-packages</code>といったパスがあり、pipでグローバルにインストールしたパッケージはそこに入ります。しかし、そもそもそのようなパスがなく、<code>sys.path</code>にも格納されていません。まず、Pythonの位置からして<code>/usr/local/lib</code>ではなく、<code>/usr/lib</code>でした。</p><figure class="highlight py"><figcaption><span>sys.path</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'/app'</span>, <span class="string">'/usr/lib/python37.zip'</span>, <span class="string">'/usr/lib/python3.7'</span>, <span class="string">'/usr/lib/python3.7/lib-dynload'</span>]</span><br></pre></td></tr></table></figure><p>Pythonのパッケージの置き場をsiteパッケージで確認したところ、site-packagesはDebianのシステムPython風のdist-packagesで、ユーザーは別のところですね。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> site</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(site.getsitepackages())</span><br><span class="line">[<span class="string">'/usr/local/lib/python3.7/dist-packages'</span>, <span class="string">'/usr/lib/python3/dist-packages'</span>, <span class="string">'/usr/lib/python3.7/dist-packages'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(site.getusersitepackages())</span><br><span class="line"><span class="string">'/root/.local/lib/python3.7/site-packages'</span></span><br></pre></td></tr></table></figure><p>ちなみに、python:3.7-busterだとこんな感じ。distrolessで動いているのはシステムPythonで、ユーザーランドで動かす用のPythonではなさそう。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> site</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>site.getsitepackages()</span><br><span class="line">[<span class="string">'/usr/local/lib/python3.7/site-packages'</span>]</span><br></pre></td></tr></table></figure><h2 id="aptコマンドもない"><a href="#aptコマンドもない" class="headerlink" title="aptコマンドもない"></a>aptコマンドもない</h2><p>シェルがないため、何か追加のパッケージを入れようとしても、Dockerの枠組みの中ではいろいろやるのが困難です。もともとdistrolessはDockerで作られたのではなく、Bazelで作られているイメージですし、aptでライブラリやツールを入れるなど、凝ったことをする必要がある場合はBazelでイメージをビルドする必要があります。</p><p><a href="https://github.com/GoogleContainerTools/distroless/blob/master/examples/python3/BUILD" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/distroless/blob/master/examples/python3/BUILD</a></p><p>本エントリーでは、みんなが慣れているDockerの範囲内で説明するのでひとまずご安心ください。</p><p>ここまでわかったので、駒を進めます。</p><h1 id="Pure-Pythonなアプリを動かす"><a href="#Pure-Pythonなアプリを動かす" class="headerlink" title="Pure Pythonなアプリを動かす"></a>Pure Pythonなアプリを動かす</h1><p>前回のDjangoウェブアプリを題材にして進めます。uwsgiはうまくいかなかったので、Pure Pythonでこちらも人気の高いgunicornを使います。requirements.txtは次のようになります。</p><figure class="highlight plain"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django</span><br><span class="line">gunicorn</span><br></pre></td></tr></table></figure><p><code>pip install -r requirements.txt</code>で依存ライブラリと一緒にインストールした後に、requirements.lockを作ります。前回と同じですね。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip freeze &gt; requirements.lock</span></span><br></pre></td></tr></table></figure><p>Dockerfileは次のようになりました。どうせCコンパイルが必要なC拡張は利用できないため、ベースイメージをslim版にしていますが、それ以外のビルドステージは変化ありません。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ここはビルド用のコンテナ</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim-buster as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.lock /opt/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.lock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ここからは実行用のコンテナ</span></span><br><span class="line"><span class="keyword">FROM</span> gcr.io/distroless/python3-debian10 as runner</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/lib/python3.7/site-packages /root/.<span class="built_in">local</span>/lib/python3.7/site-packages</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/bin/gunicorn /opt/app/mysite/gunicorn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> mysite /opt/app/mysite</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app/mysite</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"gunicorn"</span>, <span class="string">"--workers=5"</span>, <span class="string">"--threads=2"</span>, <span class="string">"--capture-output"</span>, <span class="string">"--bind=0.0.0.0:8000"</span>, <span class="string">"mysite.wsgi"</span>]</span></span><br></pre></td></tr></table></figure><p>実行のポイントとしては、モジュールのコピー先を<code>/root/.local/lib/python3.7/site-packages</code>にしている点です。gunicornのスクリプトもPythonプログラムとして実行するのでパスが通っている必要がないため、アプリのワークフォルダにコピーしています。gunicornの設定は大量にあるのですが、とりあえずワーカー数（コア数n * 2 + 1が良いらしい)を増やしたり、スレッドを増やしています。また、コンソールをDockerのログ出力に出すようにしています。</p><p>これでPure Pythonのパッケージも動きました。</p><h2 id="manylinux1なwheelは動作するか？"><a href="#manylinux1なwheelは動作するか？" class="headerlink" title="manylinux1なwheelは動作するか？"></a>manylinux1なwheelは動作するか？</h2><p>せっかくなのでこちらも試してみましたこれの有無でできることがかなり変わってきますので。画像処理パッケージのPillowを使ってみます。requirements.txtに一行追加して、reuirements.lockを更新します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django</span><br><span class="line">gunicorn</span><br><span class="line">Pillow</span><br></pre></td></tr></table></figure><p>Djangoのサンプルの最初まで実装したものだったので、<code>mysite/polls/views.py</code>にイベントハンドラがいると思うので、そこに画像を返すハンドラを足します。</p><figure class="highlight py"><figcaption><span>mysite/polls/views.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">future</span><span class="params">(request)</span>:</span></span><br><span class="line">    image = Image.new(<span class="string">"RGB"</span>, (<span class="number">500</span>, <span class="number">300</span>), <span class="string">"white"</span>)</span><br><span class="line">    draw = ImageDraw.Draw(image)</span><br><span class="line"></span><br><span class="line">    draw.line((<span class="number">150</span>, <span class="number">170</span>, <span class="number">450</span>, <span class="number">50</span>), fill=(<span class="number">214</span>, <span class="number">0</span>, <span class="number">75</span>), width=<span class="number">10</span>)</span><br><span class="line">    draw.line((<span class="number">50</span>, <span class="number">220</span>, <span class="number">350</span>, <span class="number">120</span>), fill=(<span class="number">214</span>, <span class="number">0</span>, <span class="number">75</span>), width=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    response = HttpResponse(content_type=<span class="string">"image/png"</span>)</span><br><span class="line">    image.save(response, <span class="string">"PNG"</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><p>ハンドラを呼べるようにurls.pyにも追加します。</p><figure class="highlight py"><figcaption><span>mysite/polls/urls.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'future'</span>, views.future, name=<span class="string">'future logo'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>再びDockerイメージをビルドして実行してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t pytest .</span><br><span class="line">$ docker run -it --rm -p <span class="string">"8000:8000"</span> pytest</span><br></pre></td></tr></table></figure><p>うまくいきました。manylinux1であれば、distrolessでも動作することが確認できました。機械学習系もそこそこいけるんじゃないでしょうか？</p><img src="/images/20200514/1.png" class="img-middle-size"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ちょっと癖があるけど、muslのような性能の劣化もなく、ビルド時間もDebian系と変わらず（一応Debian10なので）、Alpineよりも小さく、シェルがなくてセキュアなdistroless/python3を使う方法を紹介しました。</p><p>なお、このエントリーの調査過程でdistroless/python3にはmanなどの使われない（シェルもないので）ドキュメントファイルが1.6MBほど入っていることがわかり、それを<a href="https://github.com/GoogleContainerTools/distroless/issues/508" target="_blank" rel="noopener">報告</a>しつつ、PRを用意していたのですが、ビルドエラーが発生→<a href="https://github.com/GoogleContainerTools/distroless/issues/509" target="_blank" rel="noopener">Debianの配信サーバーのバグ？</a>と大事になってきています。本当はサイズをさらに小さくしました、とかっこよく報告できればよかったんですけどね。</p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</a></li><li><a href="https://future-architect.github.io/articles/20200422/">PyConJP 2019に登壇しました</a></li><li><a href="https://future-architect.github.io/articles/20200131/">AirflowのTips 11選</a></li><li><a href="https://future-architect.github.io/articles/20200212/">GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200514/top.png&quot;&gt;


&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200513/&quot;&gt;前回のエントリー&lt;/a&gt;では、Debianベースの堅実な仕事向けのD
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</title>
    <link href="https://future-architect.github.io/articles/20200513/"/>
    <id>https://future-architect.github.io/articles/20200513/</id>
    <published>2020-05-12T23:56:40.000Z</published>
    <updated>2020-05-13T23:54:22.934Z</updated>
    
    <content type="html"><![CDATA[<p>Pythonで書かれたアプリケーションをDockerイメージにする堅い方法の紹介です。イメージサイズを少しでも削ろう！とかではなくて実用性重視の方向です。今回は第一弾ということで、Debianベースのイメージを使う方法を紹介します。</p><ul><li>続編も公開されました。<ul><li><a href="https://future-architect.github.io/articles/20200514/">https://future-architect.github.io/articles/20200514/</a></li></ul></li></ul><h1 id="Pythonのベースイメージ選び"><a href="#Pythonのベースイメージ選び" class="headerlink" title="Pythonのベースイメージ選び"></a>Pythonのベースイメージ選び</h1><p>イメージ作成にはベースイメージ選びからですが、基本的には次の2つかなと思います。Pythonバージョンは機械学習だと3.7がよく使われていると思いますが、5/8にTensorflowが3.8向けのwheelとセットで新バージョンを出したので、そろそろ3.8になっていきますかね。本記事も3.8にしますが、3.7でも動作します。</p><ul><li>python:3.x-buster</li><li>python:3.x-slim-buster</li></ul><p>イメージのOSには以下のような種類があります。</p><table><thead><tr><th align="center">名前</th><th align="center">どんなもの？</th></tr></thead><tbody><tr><td align="center">buster</td><td align="center">Debian 10で処理系とかいっぱいインストール済み</td></tr><tr><td align="center">buster-slim</td><td align="center">Debian 10で処理系なしの実行環境用</td></tr><tr><td align="center">stretch</td><td align="center">Debian 9で処理系入り</td></tr><tr><td align="center">stretch-slim</td><td align="center">Debian 9で処理系なしの実行環境用</td></tr><tr><td align="center">alpine</td><td align="center">元はフロッピーで起動するファイルサイズ重視のディストリビューション</td></tr><tr><td align="center">windowsservercore</td><td align="center">Windows。LinuxやmacOS上では動作しない</td></tr></tbody></table><p>BusterとかStretchという名前が見慣れない方もいるかもしれませんが、これはLinuxディストリビューションとしてシェアの大きな<a href="https://www.debian.org/releases/index.en.html" target="_blank" rel="noopener">Debianのコードネーム</a>です。</p><p>Debianバージョンが少し古いStretchの方がちょびっとサイズが小さかったりはしますが、まあ実用的にはサポートが長い方がいいですよね。slimを使ってGCCとかのコンパイラを自前でダウンロードしている記事とかもたまに見かける気がしますが、マルチステージビルドであれば、そんなにケチケチしなくていいのと、パッケージダウンロードは逐次処理なので遅く、処理系が入ったイメージのダウンロードの方が高速です。並列で処理されるし、一度イメージをダウンロードしてしまえば、なんどもビルドして試すときに効率が良いです。また、多くのケースでネイティブのライブラリも最初から入っており、ビルドでトラブルに遭遇することはかなり減るでしょう。</p><p>Pythonユーザーは基本的にAlpineを選んではいけません。いろいろネガが大きいからです。</p><ul><li><a href="https://superuser.com/questions/1219609/why-is-the-alpine-docker-image-over-50-slower-than-the-ubuntu-image" target="_blank" rel="noopener">AlpineはUbuntuよりも50%以上遅い</a></li><li><a href="https://pythonspeed.com/articles/alpine-docker-python/" target="_blank" rel="noopener">Alpineにするとビルド時間が50倍になる</a></li></ul><p>最初の項目。なぜ遅いかというと、Alpineのアプリが使うlibc(musl)のメモリ周りアロケートの実装が、性能よりもライブラリのサイズ重視のシンプルでPythonの使い方と合わなくて速度が出ないとのこと。これはアプリケーションの実装次第なのでjemallocを使っているRubyとかの人は関係ないでしょうし、PostgreSQLとかNginxはAlpine版でも速度は変わらないようです。性能が2倍違うということは、クラウドでアプリケーションを動かすときはメモリさえ許せば一つ下のインスタンスでいいわけで、お金にも利いてきますよね。</p><p>後者の速度の問題ですが、PyPIはLinux向けにはmanylinux1という形式でバイナリを提供しており、DebianでもRedHatでも高速にインストールできます。しかし、この形式はAlpineには対応していないため、C拡張を使うライブラリを使うと、Dockerイメージのビルド時間が伸びまくってしますわけです。</p><p>それでも、どうしても、PurePythonで処理速度はどうでも良い/お金がたくさんある、あるいはC拡張を使う場合でも人生を犠牲にしてでも、イメージサイズをどうしても減らしたいみたいな選ばれし者はAlpineを使う感じでしょうかね。</p><h1 id="Pythonのマルチステージビルド"><a href="#Pythonのマルチステージビルド" class="headerlink" title="Pythonのマルチステージビルド"></a>Pythonのマルチステージビルド</h1><p>マルチステージビルドで環境を作っていきます。</p><p>アプリケーションはDjangoのチュートリアルの最初の1ステップだけ作ったものをuwsgiを使ってデプロイすることを想定します。フォルダ＆ファイル構成はこんな感じ。</p><img src="/images/20200513/1.png" class="img-middle-size"><p>依存パッケージは今回はこれだけです。ただこのファイルは開発環境を設定するときに書くぐらいですね。あまり重要ではないです。</p><figure class="highlight plain"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django</span><br><span class="line">uwsgi</span><br></pre></td></tr></table></figure><p>実際にDockerの中で使うファイルはこちら。<code>pip install -r requirements.txt</code>で依存ライブラリと一緒にインストールした後に<code>pip freeze &gt; requirements.lock</code>で作成します。あらかじめvenvで環境を分けて置くと、ノイズが混ざらないので良いです。</p><figure class="highlight plain"><figcaption><span>requirements.lock</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">asgiref==3.2.7</span><br><span class="line">Django==3.0.5</span><br><span class="line">pytz==2020.1</span><br><span class="line">sqlparse==0.3.1</span><br><span class="line">uWSGI==2.0.18</span><br></pre></td></tr></table></figure><p>uwsgi用の設定はこちら。プロセス数とかスレッド数は適当に。</p><figure class="highlight ini"><figcaption><span>deploy/uwsgi.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">http</span> = <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></span><br><span class="line"><span class="attr">chdir</span> = /opt/app/mysite</span><br><span class="line"><span class="attr">wsgi-file</span> = mysite/wsgi.py</span><br><span class="line"><span class="attr">master</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">processes</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">threads</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">stats</span> = <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9191</span></span><br><span class="line"><span class="attr">uid</span> = uwsgiusr</span><br><span class="line"><span class="attr">gid</span> = uwsgiusr</span><br></pre></td></tr></table></figure><p>Dockerfileはこうなりました。slimの方にはlibxml2などがないので追加します。PostgreSQLのライブラリのlibpq5はまあおまけです。大抵ウェブアプリケーション作るときはPostgreSQLかMySQLは使うでしょうし。もし、使うライブラリがpure python、もしくはC拡張でもwheelによるバイナリ配布をしているパッケージのみであれば、ビルド用イメージも3.8-slim-busterにできます。slimを使っていても、もしライブラリを追加した瞬間にGCCが必要になっても、イメージを3.8-busterに変えるだけなので、このマルチステージビルドの構成は崩さない方が良いでしょう。お仕事であれば問題回避の速度が大事ですからね。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ここはビルド用のコンテナ</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-buster as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.lock /opt/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.lock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ここからは実行用コンテナの準備</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim-buster as runner</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/lib/python3.8/site-packages /usr/<span class="built_in">local</span>/lib/python3.8/site-packages</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/bin/uwsgi /usr/<span class="built_in">local</span>/bin/uwsgi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apt install -y libpq5 libxml2 \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apt-get clean \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd -r -s /bin/<span class="literal">false</span> uwsgiusr</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /opt/app/src/logs/app_logs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch /opt/app/src/logs/server.log</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R uwsgiusr /opt/app/src/logs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> deploy/uwsgi.ini /opt/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> mysite /opt/app/mysite</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> uwsgiusr</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"uwsgi"</span>, <span class="string">"--ini"</span>, <span class="string">"/opt/app/uwsgi.ini"</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t pytest .</span><br><span class="line">$ docker run -it --rm -p <span class="string">"8000:8000"</span> pytest</span><br></pre></td></tr></table></figure><p>ブラウザでアクセスするとうまくいきました。</p><img src="/images/20200513/2.png" class="img-middle-size"><h2 id="Pythonでどうやってマルチステージビルドを実現するのか"><a href="#Pythonでどうやってマルチステージビルドを実現するのか" class="headerlink" title="Pythonでどうやってマルチステージビルドを実現するのか"></a>Pythonでどうやってマルチステージビルドを実現するのか</h2><p>ポイントとしては、pip installしてできたライブラリを一式コピーして実行用のコンテナに写してます。uwsgiは別の場所にインストールされるので、それも個別にコピーします。</p><figure class="highlight dockerfile"><figcaption><span>今回使ったのはこちらの方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/lib/python3.8/site-packages /usr/<span class="built_in">local</span>/lib/python3.8/site-packages</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/bin/uwsgi /usr/<span class="built_in">local</span>/bin/uwsgi</span></span><br></pre></td></tr></table></figure><p>実はこの書き方を紹介している記事等はほとんどありません。ネットでよく見るPythonのマルチステージビルドの方法は次の方法です。</p><figure class="highlight dockerfile"><figcaption><span>こっちの方がよく見る</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /root/.cache /root/.cache</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> /build/requirements.txt /opt/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br></pre></td></tr></table></figure><p>この方法であれば、uwsgiのような別の場所に入る実行ファイルも自動で処理されるのできれいにうまくいくのですが、最終的なイメージに/root/.cacheのレイヤーが残ってしまいます。RUNによるレイヤーなら&amp;&amp;を駆使して削除できるのですが、これはCOPYで作られるレイヤーなので、今のDockerだけだとこの無駄は削除できないのですよね。</p><p>機械学習ライブラリもりもりなイメージだと、これだけで200MBぐらいの容量になったり（全体も1.2GBとかになりますが）。今のところsite-packages全部コピーの方法で問題はなさそうです。</p><h1 id="実行時に必要なライブラリがないと言われたら"><a href="#実行時に必要なライブラリがないと言われたら" class="headerlink" title="実行時に必要なライブラリがないと言われたら"></a>実行時に必要なライブラリがないと言われたら</h1><p>フルセットのbusterには開発者向けのライブラリ類も含めていろいろ入っているのでビルドが成功するも、slim側にライブラリがなくて実行時エラーになる可能性があります。実行時にライブラリがロードできないというエラーが出たら、<a href="https://packages.debian.org/search?lang=ja&arch=amd64&mode=filename&searchon=contents&keywords=libxml2.so.2" target="_blank" rel="noopener">こちらのサイト</a>にライブラリ名を入れて、それをインストールするのに必要なパッケージを探し、apt installの項目に追加してください。</p><img src="/images/20200513/3.png" class="img-middle-size"><p>Pythonだと関数の中でimportできます。名前空間を汚さないので、こちらの方が良いのかな、と思って僕も以前やっていましたが、ファイルのグローバルなところだけにimportがあると、ちょっとした実行すると必要なモジュールを全部読み込んでくれて、この手のロードエラーはすぐにわかります。関数内importはなるべく避けた方が良いでしょう（先日もそれで問題を見つけきれなかった）。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Pythonを仕事で使う人のための堅いイメージ作成について紹介しました。Alpineのような性能のネガもなく、イメージの作成の実行時間も少なく、残業時間が減らせる方法を選びました。次回は条件によっては使えないかもしれないのですが、使えたら効果抜群なdistroless/python3について紹介します。</p><p><strong>公開しました(2020/05/14)</strong></p><p><a href="https://future-architect.github.io/articles/20200514/">https://future-architect.github.io/articles/20200514/</a></p><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20200422/">PyConJP 2019に登壇しました</a></li><li><a href="https://future-architect.github.io/articles/20200131/">AirflowのTips 11選</a></li><li><a href="https://future-architect.github.io/articles/20200212/">GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pythonで書かれたアプリケーションをDockerイメージにする堅い方法の紹介です。イメージサイズを少しでも削ろう！とかではなくて実用性重視の方向です。今回は第一弾ということで、Debianベースのイメージを使う方法を紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;続編も公開され
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
