<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-03-11T12:40:02.810Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CloudNative Days Spring 2021 ONLINEに登壇しました</title>
    <link href="https://future-architect.github.io/articles/20210313/"/>
    <id>https://future-architect.github.io/articles/20210313/</id>
    <published>2021-03-12T15:00:00.000Z</published>
    <updated>2021-03-11T12:40:02.810Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの伊藤太斉です。<br>今回は先日開催されました、<a href="https://event.cloudnativedays.jp/cndo2021">CloudNative Days Spring 2021 ONLINE</a>に登壇しましたので、その内容について書いていきます。</p><p><img src="/images/20210313/CNDO2021@2x.png"></p><h2 id="CloudNative-Daysについて"><a href="#CloudNative-Daysについて" class="headerlink" title="CloudNative Daysについて"></a>CloudNative Daysについて</h2><p>はじめにイベントの概要について簡単に説明します。<br><a href="https://event.cloudnativedays.jp/cndt2020">前回の公式</a>から引用すると、</p><blockquote><p>CloudNative Days はコミュニティ、企業、技術者が一堂に会し、クラウドネイティブムーブメントを牽引することを目的としたテックカンファレンスです。<br>最新の活用事例や先進的なアーキテクチャを学べるのはもちろん、ナレッジの共有やディスカッションの場を通じて登壇者と参加者、参加者同士の繋がりを深め、初心者から熟練者までが共に成長できる機会を提供します。</p></blockquote><p>とあるように、モダンアーキテクチャを学ぶ場であったり、これからインフラのモダナイゼーションを行う方にとってディスカッションの場として提供するテックカンファレンスです。<br>前回は登壇者は自宅、配信会場どちらかを選んで登壇しましたが、今回は全員事前に動画を提出し、配信会場にはオペレーションを行う一部の人のみとしています。またプラットフォームも独自で開発しているものであり、オンラインカンファレンスとしては初の試みの多い内容になっています。<br>今回は、前回に引き続き私は運営として参加しております。</p><h2 id="登壇内容について"><a href="#登壇内容について" class="headerlink" title="登壇内容について"></a>登壇内容について</h2><p>登壇資料はこちらになります。</p><script async class="speakerdeck-embed" data-id="f9d34e658df049bd992ba11c212a7a5f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>今回は、CNCFのプロジェクトの中から<a href="https://www.openpolicyagent.org/">Open Policy Agent</a>（以下、OPA）について話しました。OPAは、CNCFのプロジェクトの中で一番最近Graduatedプロジェクトになりました。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">[NEWS] Cloud Native Computing Foundation Announces Open Policy Agent Graduation 🤗<a href="https://t.co/36yiIhCYvc">https://t.co/36yiIhCYvc</a> <a href="https://t.co/EquYZUqBbu">pic.twitter.com/EquYZUqBbu</a></p>&mdash; CNCF (@CloudNativeFdn) <a href="https://twitter.com/CloudNativeFdn/status/1357373603633848322?ref_src=twsrc%5Etfw">February 4, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>そんな勢いのあるOPAを、今回はTerraformのコード規約として使えないかということで検証という意味でも使ってみた話です。</p><h3 id="Open-Policy-Agentについて"><a href="#Open-Policy-Agentについて" class="headerlink" title="Open Policy Agentについて"></a>Open Policy Agentについて</h3><p>簡単にOPAについて説明します。<br>OPAはPolicy as Code（PaC）を実現するツールです。CNCFでホストされているのでKubernetesにしか利用できない、というわけではなく、JSON、YAMLなど様々なデータを扱ってポリシーで管理することができます。<br>記述する際にはRegoという独自言語で実装します。サンプルなどは後述します。</p><h3 id="Infrastructure-as-Codeの横展開で起こりうる話"><a href="#Infrastructure-as-Codeの横展開で起こりうる話" class="headerlink" title="Infrastructure as Codeの横展開で起こりうる話"></a>Infrastructure as Codeの横展開で起こりうる話</h3><p>Infrastructure as Code（以下、IaC）を実践することで以下のメリットがあるかと思います。</p><ul><li>パラメーターシートとして利用できる</li><li>Gitなどで管理されることで常に最新の状態が分かる</li><li>可搬性があるので、プロジェクトを跨いで同じコードを利用できる</li><li>HCLも含めて比較的読みやすい言語で書かれているため入門しやすい</li></ul><p>特に可搬性については大きなメリットであり、新しく社内でプロジェクトが立ち上がったときにはコードの共有を行うことで、開発の高速化も望めます。</p><p><img src="/images/20210313/CNDO_1.png"></p><p>このようにメリットの大きいIaCですが、浸透が進むにあたり、デメリットも生じます。</p><ul><li>コードの流派が異なる</li><li>コードの規約が異なる</li></ul><p>といったように上記の２つは少ないようにみえて、エンジニアの負荷を大きくあげる原因になりかねないデメリットです。将来的に普及が進んだ後にこれらを統制することはかなり大変になるのでないかと懸念されました。そのため、社内で共通の言語としての規約、が必要だと感じました。そのためのPaCのツールとしてOPAを利用することを検討しました。</p><h3 id="OPAを実際に利用してみる"><a href="#OPAを実際に利用してみる" class="headerlink" title="OPAを実際に利用してみる"></a>OPAを実際に利用してみる</h3><p>今回はTerraformのリソース名を<code>-</code>区切りではなく<code>_</code>区切りで書くことを強制したいと思います。<br>利用するTerraformとRegoは以下になります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region &#x3D; &quot;us-west-1&quot;</span><br><span class="line">&#125;</span><br><span class="line">resource &quot;aws_instance&quot; &quot;web_instance&quot; &#123;</span><br><span class="line">  instance_type &#x3D; &quot;t2.micro&quot;</span><br><span class="line">  ami &#x3D; &quot;ami-09b4b74c&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_instance&quot; &quot;mail-instance&quot; &#123;</span><br><span class="line">  instance_type &#x3D; &quot;t2.micro&quot;</span><br><span class="line">  ami &#x3D; &quot;ami-09b4b74c&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line">                              </span><br><span class="line">lint[msg] &#123;</span><br><span class="line">    resource := input.resource_changes[index]</span><br><span class="line">    resource.<span class="keyword">type</span> == <span class="string">&quot;aws_instance&quot;</span></span><br><span class="line">    </span><br><span class="line">    result := count(split(resource.name, <span class="string">&quot;-&quot;</span>)) == <span class="number">1</span></span><br><span class="line">    msg := sprintf(<span class="string">&quot;Test result of %v.%v is %v&quot;</span>, [resource.<span class="keyword">type</span>, resource.name, result])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraformの中身は単純なインスタンスを2台作成するもの、Regoの中身は、<code>-</code>が含まれる場合にはsplitして、その総計を数えるようにしています。総計が1（分かれていない状態）であればtrue、総計が2以上であればfalseを返します。<br>ここからは実際にコマンドを実行しながら確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Plan結果をバイナリに吐き出す</span></span><br><span class="line">$ tf plan -out tfplan.binary</span><br><span class="line"><span class="comment"># バイナリをJSONに吐き出して、jqコマンドで整形する</span></span><br><span class="line">$ tf show -json tfplan.binary | jq . &gt; tfplan.json</span><br><span class="line"><span class="comment"># Regoを使ってJSONを評価する</span></span><br><span class="line">$ opa <span class="built_in">eval</span> --format json --data test.rego --input tfplan.json <span class="string">&quot;data.test.lint&quot;</span></span><br></pre></td></tr></table></figure><p>最後のコマンドの実行結果は以下になります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;result&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;expressions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;Test result of aws_instance.mail-instance is false&quot;</span>, # ハイフン区切りは<span class="literal">false</span>になる</span><br><span class="line">            <span class="string">&quot;Test result of aws_instance.web_instance is true&quot;</span> # アンダースコア区切りは<span class="literal">true</span>になる</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;data.test.lint&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;location&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;row&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;col&quot;</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想定通り、mailインスタンスについてはfalsem、webインスタンスについてはtrueになりました。</p><h3 id="実際に触ってみた感触とこれから"><a href="#実際に触ってみた感触とこれから" class="headerlink" title="実際に触ってみた感触とこれから"></a>実際に触ってみた感触とこれから</h3><p>今回、OPAを触ってみて、得意なところ、できないところがなんとなくですが見えてきました。</p><h4 id="出来ること"><a href="#出来ること" class="headerlink" title="出来ること"></a>出来ること</h4><p>JSONで出力できる範囲ならかなり強力に押さえ込むことができることを感じました。例えば、</p><ul><li>インスタンスに対しては特定のタグを必須とする</li><li>リージョンは東京リージョンのみに制限する</li><li>インスタンスタイプは<code>t3.medium</code>のみに制限する</li></ul><p>などの制限は可能なので、プロジェクトごと制約をかけたい場合に有用です。</p><h4 id="出来ないこと"><a href="#出来ないこと" class="headerlink" title="出来ないこと"></a>出来ないこと</h4><p>一方出来ないことも見えてきました。</p><ul><li>Terraformのソースコードチェック<ul><li>countの配置箇所</li><li>Linterのような動かし方</li></ul></li></ul><p>結局JSONなどのデータを扱うため、元のTerraformのソースコード自体をみることはありません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>OPAはリソースを使用する範囲を決めるという文脈ではかなり強力に制限してくれることを感じました。一方、Terraformそのままのコードを制限するためにはLinterなどの別のツールが必要だと思いました。単一のツールではなくて、複合的に利用していくことで、出来上がるリソース、記述するコードの両方を整えられると考えました。<br>社内のIaCの平和を守るために、まだ考え始めた段階ですが、規約は作って浸透させるまでが仕事だと思うので、まだまだ先は長いです。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200930/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200930&amp;key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200928/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200928&amp;key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIGの伊藤太斉です。&lt;br&gt;今回は先日開催されました、&lt;a href=&quot;https://event.cloudnativedays.jp/cndo2021&quot;&gt;CloudNative Days Spring 2021 ONLINE&lt;/a&gt;に登壇しましたので、その</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
    <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
    <category term="CloudNative" scheme="https://future-architect.github.io/tags/CloudNative/"/>
    
    <category term="OpenPolicyAgent" scheme="https://future-architect.github.io/tags/OpenPolicyAgent/"/>
    
  </entry>
  
  <entry>
    <title>Text-to-Speechを試してみる</title>
    <link href="https://future-architect.github.io/articles/20210312/"/>
    <id>https://future-architect.github.io/articles/20210312/</id>
    <published>2021-03-11T15:00:00.000Z</published>
    <updated>2021-03-11T12:44:31.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの村瀬です。</p><p><a href="/articles/20200218/">昨年</a>に続き<a href="/articles/20210307/">GCP連載</a>企画の参加です。私個人としてはGCPはほとんど利用したことがないので、せっかくだから面白そうなことを試してみようと思い、今回はText-to-Speechについて試してみることにしました。</p><h1 id="Text-to-Speechとは"><a href="#Text-to-Speechとは" class="headerlink" title="Text-to-Speechとは"></a>Text-to-Speechとは</h1><img src="/images/20210312/Cloud_Text-to-Speech.png"><blockquote><p><a href="https://cloud.google.com/blog/ja/products/ai-machine-learning/cloud-text-to-speech-expands-its-number-of-voices-now-covering-33-languages-and-variants">https://cloud.google.com/blog/ja/products/ai-machine-learning/cloud-text-to-speech-expands-its-number-of-voices-now-covering-33-languages-and-variants</a> より</p></blockquote><p>読んで字のごとくですがテキストを自然な音声に変換するサービスで、40以上の言語と方言で220種類以上の音声から選択できます。話す速度や声の高さも変更することができます。</p><p>本記事ではAPIを利用して音声ファイルを作成するところまでを紹介しますが、APIを利用せずどんなものか確認するのであれば<a href="https://cloud.google.com/text-to-speech/?hl=ja#section-2">このページ</a>の <strong>Text-to-Speech を試してみましょう</strong>  のところで確認できます。あなたがロボットでなければ。</p><h1 id="料金"><a href="#料金" class="headerlink" title="料金"></a>料金</h1><p>無料枠があり、最初の400万文字/月は無料。それを越した場合でも100万文字あたり$4.00でお安いですね。<br>詳細は<a href="https://cloud.google.com/text-to-speech/pricing?hl=ja">公式ページ</a>を参照ください。</p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><p><a href="https://cloud.google.com/text-to-speech/docs/quickstart-protocol?hl=ja">クイックスタート: コマンドラインの使用のページ</a>を参考に準備をします。</p><h2 id="1-新しいプロジェクトの作成"><a href="#1-新しいプロジェクトの作成" class="headerlink" title="1.新しいプロジェクトの作成"></a>1.新しいプロジェクトの作成</h2><img src="/images/20210312/00create_prj.png" class="img-middle-size" style="border:solid 1px #000000"><p>適当にプロジェクト名を入力して作成します。</p><h2 id="2-Cloud-Text-to-Speech-APIの有効化"><a href="#2-Cloud-Text-to-Speech-APIの有効化" class="headerlink" title="2.Cloud Text-to-Speech APIの有効化"></a>2.Cloud Text-to-Speech APIの有効化</h2><p><a href="https://cloud.google.com/text-to-speech/docs/quickstart-protocol?hl=ja">クイックスタート ページ内</a>のAPIを有効にするボタン]をクリックして有効にします。</p><img src="/images/20210312/01pre.png" class="img-middle-size" style="border:solid 1px #000000"><h2 id="3-認証の設定"><a href="#3-認証の設定" class="headerlink" title="3.認証の設定"></a>3.認証の設定</h2><p>必要なロールはありませんということなのでロールを選択せず作成します。</p><img src="/images/20210312/02pre.png" class="img-large-size" style="border:solid 1px #000000"><img src="/images/20210312/03pre.png" class="img-large-size" style="border:solid 1px #000000"><img src="/images/20210312/04pre.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/05pre.png" class="img-middle-size" style="border:solid 1px #000000"><p>JSONファイルがダウンロードされるので適切な場所に保存します。のちにこのJSONファイルのパスを環境変数に設定することになります。</p><h2 id="4-Cloud-SDK-をインストールして初期化します。"><a href="#4-Cloud-SDK-をインストールして初期化します。" class="headerlink" title="4.Cloud SDK をインストールして初期化します。"></a>4.Cloud SDK をインストールして初期化します。</h2><p><a href="https://cloud.google.com/sdk/docs/install?hl=ja">このページ</a>に則りインストールします。</p><img src="/images/20210312/05sdk.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/06sdk.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/07sdk.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/08sdk.png" class="img-middle-size" style="border:solid 1px #000000"><p>環境にもよると思いますが割と時間かかります。コーヒーでも飲んで待ちましょう。</p><p><img src="/images/20210312/09sdk.png"></p><p>コマンドプロンプトが起動するのでYを入力します。</p><p><img src="/images/20210312/13sdk.png"></p><p><img src="/images/20210312/14sdk.png"></p><p>ブラウザが起動するのでアクセスを許可します。</p><img src="/images/20210312/15sdk.png" style="border:solid 1px #000000"><p>無事に完了しました。</p><h2 id="5-環境変数の設定"><a href="#5-環境変数の設定" class="headerlink" title="5.環境変数の設定"></a>5.環境変数の設定</h2><p>他のブログをみるとLinux,macOSの記事が多かったので今回はあえてWindowsのPowerShellでやってみます。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:GOOGLE_APPLICATION_CREDENTIALS</span>=<span class="string">&quot;C:\xxx\Text-to-Speech-123456789012.json&quot;</span></span><br></pre></td></tr></table></figure><h1 id="テキストから音声へ変換"><a href="#テキストから音声へ変換" class="headerlink" title="テキストから音声へ変換"></a>テキストから音声へ変換</h1><h2 id="ファイルの用意"><a href="#ファイルの用意" class="headerlink" title="ファイルの用意"></a>ファイルの用意</h2><p>音声に変換したい文字列や必要となる情報を記載したJSONファイルを用意します。ここではクイックスタートに習ってrequest.jsonとします。日本語の音声を確認したかったので以下の様にしました。</p><figure class="highlight json"><figcaption><span>request.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;input&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>:<span class="string">&quot;経営とITをデザインするフューチャーアーキテクト&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;voice&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;languageCode&quot;</span>:<span class="string">&quot;ja-JP&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;ja-JP-Standard-C&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ssmlGender&quot;</span>:<span class="string">&quot;MALE&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;audioConfig&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;audioEncoding&quot;</span>:<span class="string">&quot;MP3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設定可能な言語、音声は<a href="https://cloud.google.com/text-to-speech/docs/voices?hl=ja">こちら</a>を参照</p><h2 id="APIの実行"><a href="#APIの実行" class="headerlink" title="APIの実行"></a>APIの実行</h2><p>クイックスタートに載ってるコマンドを実行します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cred</span> = gcloud auth application<span class="literal">-default</span> print<span class="literal">-access</span><span class="literal">-token</span></span><br><span class="line"><span class="variable">$headers</span> = <span class="selector-tag">@</span>&#123; <span class="string">&quot;Authorization&quot;</span> = <span class="string">&quot;Bearer <span class="variable">$cred</span>&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> `</span><br><span class="line">  <span class="literal">-Method</span> POST `</span><br><span class="line">  <span class="literal">-Headers</span> <span class="variable">$headers</span> `</span><br><span class="line">  <span class="literal">-ContentType</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span> `</span><br><span class="line">  <span class="literal">-InFile</span> request.json `</span><br><span class="line">  <span class="literal">-Uri</span> <span class="string">&quot;https://texttospeech.googleapis.com/v1/text:synthesize&quot;</span> | <span class="built_in">Select-Object</span> <span class="literal">-Expand</span> Content</span><br></pre></td></tr></table></figure><p>実行すると以下のエラーが発生しました。</p><p><img src="/images/20210312/16err.png"></p><p><a href="https://qiita.com/ponsuke0531/items/4629626a3e84bcd9398f">このページ</a>を参考にしてエラーを解消します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned <span class="literal">-Scope</span> <span class="keyword">Process</span></span><br></pre></td></tr></table></figure><p>再度実行すると無事mp3が返却…されません。<br>代わりにmp3を生成する基となるbase64を含むJSONが返却されます。</p><p>mp3が返却されないのはAPIの応答は全てJSONに統一されているからでしょうか？<br>なお、返却されたJSONの中のbase64の文字列をのちに利用するので応答をファイル出力しておくと便利です。</p><h2 id="base64からmp3への変換"><a href="#base64からmp3への変換" class="headerlink" title="base64からmp3への変換"></a>base64からmp3への変換</h2><p>JSONからaudioContentの値を抜き出してファイル(base64.txt)に保存します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;NExAAQyMGEAEpMTESE+SE5ANiIShEJiQnQNsNoEC9RqUkR48hbOz0pScWztOrVZkyAwcbMmAtFg2aBypBqg0A+b1hwy79PSYfpNP&#x2F;9BsyqPp4vaY45jkmOOY5Jjhlm&#x2F;&#x2F;NExA8SWKoMAMvQTMu2EYFwLghioqxp9DzQNBDEMAUBoDQPBQ93&#x2F;d3REIMQIBkPsKAgD4XB8P&#x2F;XW+QL4w4c&#x2F;&#x2F;7&#x2F;&#x2F;&#x2F;+r&#x2F;8MVPM7NMRAzURAQgDK4ecpYZTFUqxVirtYi&#x2F;&#x2F;NExBgYKNIUAVoYAdZcl&#x2F;Y1LrWX4cs0oZmOdytbJSVYzCoGnGcd2p&#x2F;lrqbpXfFQAPdsY3HYb4&#x2F;Pmbp9fzlX7Yvr++78FtaQ&#x2F;p3d+5BHa8vdpytb5er8feb8LGqKfxqF&#x2F;&#x2F;NExAoVEdqsAYZAAF+kDatk&#x2F;smJhOv44cjW+76m3ilDwYeJyYHEgsNDxO7&#x2F;EpZSQ8IHR+MDqP&#x2F;&#x2F;x3acPoWM7ohDv7laILJpKi&#x2F;+keRUOJCCFmlzJkAGal08aA4w54zG&#x2F;&#x2F;NExAgTuXaoAc9AANzJCY4EXGL71T2+bf+YfWem&#x2F;4v4l+miWQ7NfUcowoLQpgijRh3VNDVxU9Q2OGSNsKCgyi4YTFYJDQmdf&#x2F;6I7ZNe+nbdsLPRtWaEXqhVDST5MuCZ&#x2F;&#x2F;NExAwUiYKsAMFSlHLETDim3bO7gHuzxBlhxpDtECUPnYjAG3qNAuNhUTxwVttPJBc4FxW2usetNHOcmM7GtrIOkggQL0h1RAUCBM4j&#x2F;&#x2F;&#x2F;1fRSq7uCgrIwTcyUMz2nK&#x2F;&#x2F;NExAwToYa0AMoYlQWm8+EpC74gD+RU&#x2F;KLTzKxYzgv86pJGnknBLPx5AYnuSi2sOT1UoZEIsXWpoqmLH15&#x2F;qrfYZgZulWS82d1Zpf21Xar&#x2F;47w9DehG5ak9E0Bik8No&#x2F;&#x2F;NExBAT4Yq8AMGYlY&#x2F;0FIfikM5t9i72njDWjDTI0UDr3x6IY7geEVBiMSyb8VTQSC4Xm0hwUocbhyFuFqrcDNoGnY2o40Tqy&#x2F;RMObr9XYgUhpNs+MJ16ZMCLNMk4wPP&#x2F;&#x2F;NExBMUGYq8AMIYlTJIpXYm32SlGVsNhIcxIoTih7EbBIIgdEgplcunBXTjiQBwSHxyccrS0s5BfOt9MdcT9EsS1Voa7F7MfVMV5YCxdOkQUCcHky6HsjvoEk4iegkb&#x2F;&#x2F;NExBUR8YrEAJFSlJT0M+pTuZx7FVYEbaYZHRPNQ+gMko0IBAW1k&#x2F;Jqc6qMN3bvxjuTXhBN749hJrHf&#x2F;&#x2F;&#x2F;&#x2F;rf&#x2F;U2FgqjwzjYVi5+GVCyYtAojofKJfKZqlToeoUQ&#x2F;bx&#x2F;&#x2F;NExCASkYbAAMCYlOgTP4FxkXz&#x2F;Gi6kRtRnKtlbE8&#x2F;s1gp3ZSKrsGv2XJllrRrV4Okv&#x2F;&#x2F;&#x2F;&#x2F;5hXPXKyMhMfUfpS7BQPH7qVITviK+hLoX6kOpnKHtj1MsKQMEwycmNzI&#x2F;&#x2F;NExCgSUZK8AMHWlFiSDRMWseSQyq3M+1vh5ziDCX5UQ7GQ1I5aj&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;5BW5a7eC4EZI3KZOgCDX1rVVRwBlqJBo40RdqsztRm1etxQ64TAooXgVFRcmhCQ98HRD&#x2F;&#x2F;NExDERyYq8AMFQlD1Qp&#x2F;&#x2F;5ruVkYidjBLJKxVEub&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;Wq6xQ4OrJVQroLuoqDuCj4TbjW4h4h43xO+iJRtFgOB+dNCJDpSIQhvYNi9+nX6v8pN9UvJ0OaUW6XnH2f&#x2F;&#x2F;NExDwRWZK8AJlWlP&#x2F;&#x2F;TXk84tv&#x2F;RXXoho4UlIjUwKED+NUkBPQcfEl+a&#x2F;Obu3M8g6iWyGsBGYlRfKXAi3cRaanc8m7CishEykwUOexUl0f&#x2F;&#x2F;9W6rO0f9Kr&#x2F;&#x2F;EhNJgcq&#x2F;&#x2F;NExEkQSZa8AJKUlFh8RUIXWcsWlhC9B4TcgfkPj3yfyfSTC4lIBjjTH64aSQY&#x2F;KxBfyt+n&#x2F;qHfyWW1VHzv2at&#x2F;Tr&#x2F;&#x2F;&#x2F;68hKPo&#x2F;XhmV7&#x2F;3Sqq&#x2F;vZRPiOhWC3hmh6JZm&#x2F;&#x2F;NExFoSAaa4AMqWlAu8b9R7xl8r5UvyeUbIBdBgUmUOE+yawk5KoLjAalGrazTnC61jMoryTIK8oEsuG&#x2F;&#x2F;&#x2F;&#x2F;lzsfvUS&#x2F;1YJVf&#x2F;V0kiuPcEUzflJKPGsvAE2qHvjx9SH&#x2F;&#x2F;NExGUTSZK4AMnalMediXx4l5kBPWhpEkj67s+4t9J8r5r4bFnfxJn&#x2F;1m3mRui78qZhQuuVLGr259GcIv&#x2F;&#x2F;&#x2F;37yybP+PpX&#x2F;5XGDSZexaeAwdRY2tZqDpAo+MAJfuG&#x2F;3&#x2F;&#x2F;NExGoUIZK4AMKelA+vyC68gf+MD3hD0ZfKuCEF5xlSIBa3k&#x2F;xUJa+4aXmxrLlj4gMtfhga63yp3lI9G1Rb0xuap37x9f&#x2F;&#x2F;&#x2F;QeaAlGTwIA7&#x2F;jUkjr1Kp+7gowCEDqL3&#x2F;&#x2F;NExGwYmaKwAMoelNQeSlfP8VULcmZc4R76ZSzwK59sa3f0Uv1CG5wedNWprHcgqu6k+qz9jOFQUjPWKPuJd9j43X4zal8S43AispfmZjpDVMHYFFG&#x2F;&#x2F;&#x2F;+SYJakzxP&#x2F;&#x2F;&#x2F;NExFwX6Y6wAMpelIq0BU27zccALFWZ1VHzjF7q3UlnFmIK2e4nt9x39RtcFf9F87SIBgiRiUNggKqREj0LlgMEQLC6BPy1Be+55W&#x2F;a2NMVK0hOuxJBK4Lr6w5&#x2F;&#x2F;&#x2F;&#x2F;Q&#x2F;&#x2F;NExE8UaZa0AMLSlJa4YssfbmDfowfmiYS4k+FhRpPJ1ZFWryT&#x2F;l1eoQ1eYsqGEm6NAwBHOU8Poa9wH4jxVghNWzwer+D1&#x2F;Nfz&#x2F;nq9hUfpihDU1VReW&#x2F;&#x2F;&#x2F;+ScrTLf+l&#x2F;&#x2F;NExFAUGZawAMLWlDW+7NIFipWggLHUqjLQDNhiLTTWosKqK2vlHdTrTMLX5V&#x2F;NMUHRoPBEAlVh1YK2cSGQVr8b&#x2F;&#x2F;&#x2F;+HekxHYBGWCh67&#x2F;&#x2F;&#x2F;89+Jf7CyOAOjFQkCjRKO&#x2F;&#x2F;NExFISKYKYAMIGlJgYGYaOEw+kSxYCkhaxHbFFBgRq5i+qCa0sjzJgw4CGDl4IScgq688Sxh7+d0J76rf9d6W9tBH&#x2F;&#x2F;3+mPYw0VGNAZcMJjSlz&#x2F;rlfqU8cBXChyhx&#x2F;&#x2F;&#x2F;NExFwQ8Lo0ANvGTENQ8kVDQFCbAeNCqHsE1D3bsX2qusyjDJuHZiGaB7Xm&#x2F;jEBqGmXGn2kX61CnUbqveXDSvR0BDv+1Lw6ifH&#x2F;csQ3Kv3B8A4VAaAL&#x2F;gwCs8G5ABgt&#x2F;&#x2F;NExGsRkDIgAVkYAD&#x2F;56EB5QNQ5FhYG3&#x2F;4NBwuaCsIxZhosLB1&#x2F;&#x2F;h4KGQkmDmVh8CD&#x2F;&#x2F;+HYfiI+HYf2iqo0OWGiQn&#x2F;&#x2F;&#x2F;+nMpzK9Kg0rYaHQNjmxb&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;xSgaB5iibv&#x2F;&#x2F;NExHcgYyqcAZhAAL3+UzElLKCsjfFq3jjKiBRh7uxV6wZUZxbaRaVF5IJpeXFbH5&#x2F;dM7kipTYig0DlAnONEf2V&#x2F;&#x2F;9f8ffV10aNdbFn1Wg10MWtyKaSzm0cEJc0VAr&#x2F;&#x2F;&#x2F;NExEgS6Wq0AdlYAP&#x2F;&#x2F;&#x2F;1Xn5xAdsYJK3gf45XB4SRUjRRLqXW7RKAMOlJsBFB7xstIZ8XCa5ebdNur361dBLUdW1ZQJHR9SLWFzOcJQORqRU401kVsw8027f&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;NExE8VwoKsAMyOufo6mlTopYUnw&#x2F;KUgYtPG&#x2F;ci5vRtB+agQBwEFYphZwLqqRBAmgEaJIkAGIyqirqZ9SP&#x2F;5&#x2F;lv5ZuWFV5Bub7kC15YPB7RYvUBh0TiJ5X&#x2F;&#x2F;&#x2F;&#x2F;rLA+A&#x2F;&#x2F;NExEsTUVqwAM0QlIXFVefy0ZyM&#x2F;htN0MuhWNkvcegOsk9B&#x2F;dSrBggQdMqE2ktDqdmuVSUPrz9XP&#x2F;8O&#x2F;++f&#x2F;uv4v&#x2F;&#x2F;9+0zBhp22xsux5S7IAZid2VVoCwPhZ7v&#x2F;&#x2F;&#x2F;9y&#x2F;&#x2F;NExFAU+W6sAM4MlNJo01Ln&#x2F;dNNC&#x2F;&#x2F;s&#x2F;JjsdXABet2m6MaIrZ5x5IuGq&#x2F;Qt4IzzUrBM1X803Cn7+5&#x2F;v&#x2F;d5&#x2F;qZyc7IBxpggD7iQ2ggF4nPQa8ZgqONQWTcqO6Etf&#x2F;&#x2F;&#x2F;u&#x2F;&#x2F;NExE8VKY6sAM4UlKIheo6ozWzAAcUMOuIcyiHgZgV5gDUguM0Z8LKk0ygCcG7rJsJEMWcFCBz3mZtqJjoMcarigtRQXn0EDcf44X4z2JNPBLmPy9H&#x2F;&#x2F;&#x2F;vW2mL1KuoB&#x2F;&#x2F;NExE0SiY64AJSOlKXDyjfZZgC9KnqN8VWtpEjqfKrNf7gk5xnMYdV95UG6as5&#x2F;5v4hO+MLvcDD39fyn8p7+Pyj75FJnKJwbs&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;T6YAwS3UH9DQ60wRrPeGGKL7W&#x2F;&#x2F;NExFUQuXrAAIvQlOCnpvl6ov8Lp3&#x2F;pw+9MRlXrl4j6XAPJ0Gpeh4NPUeCUPa4z1fncr45ZBSmgmaTlnf&#x2F;&#x2F;&#x2F;76a1f&#x2F;cwFWQJn6HManfqW4xTo5QNqAo7QV4k&#x2F;fzNUBh&#x2F;&#x2F;NExGUR0Ya8AJvOlHXVLV3ZBAnwxUyJZ&#x2F;IIOoVJ0&#x2F;N7mMlsMptPfzT3qlr77Op2Gmrd&#x2F;&#x2F;&#x2F;&#x2F;6u&#x2F;qShf7a5V0QQ12f43LXK2wno&#x2F;R+X26P&#x2F;q2+ZcDKnFERU2syKWejiBK&#x2F;&#x2F;NExHARwY68AMFWlFbak3KZsaxdR6dYTSbgrUsethAl&#x2F;&#x2F;&#x2F;9PXePZ&#x2F;yoBevL8VVzNRLuzD680gqXuHPzffPz9fyX6n9lKNFjZIaTMBn30KZLSKSHEj6Brq6RPVZsl6WC&#x2F;&#x2F;NExHwSAZK0AMCSlBPeSgayLP&#x2F;&#x2F;&#x2F;&#x2F;Ete+WAq&#x2F;ra4UIkVY8y5wzGjOxlWxtoiXVd91btL&#x2F;8wyF&#x2F;&#x2F;&#x2F;&#x2F;jMzH9lgpYCNfCkeuupMfV8ybaOvtYBQVt+s7&#x2F;&#x2F;5Z55sO4asEro&#x2F;&#x2F;NExIcSEZakAMBSlJZYOjrkkx8CLpmNJoCsEHw4Ng9xYJdXBwyIFKmZ3mNX7vUqlt+ZRJTBZJUZFh8Y08dKu6ZauxC6NxX1Nqb522tyYmU19HtQyjXVOEiGQBERexFG&#x2F;&#x2F;NExJEQOZZ8AMhGlFEPxKxTy+&#x2F;nXFC4ZONyaShU9tU4++gTEB7dcjPIqWwY9yVkvT03oOIu0BmpzXp6KUWLu6ki982qPMOe4G4ITcribiMzA0IOR3EbGHHmQSiPvheB&#x2F;&#x2F;NExKMRiNYoANiEcIQlBzk8vG5V83TRL5uXSVQHYMF+PQuGiCELaPUJ6GJxNv5femnQHuXSTIRENC&#x2F;&#x2F;0GTTepk1rc0nymUh9&#x2F;&#x2F;Tsn2My+blwyKMYhkSaCKYnhwe&#x2F;&#x2F;&#x2F;l&#x2F;&#x2F;NExK8QCDocAVoAAMZNNy4gz0zRuTTFZsXx4HURqHgMiRhM6jUzMBrg0QB0IL0rDrFwFQ3dabq7dBn7f&#x2F;uP&#x2F;+f2qIshDn1Edi7MF4KaWZBwCgQfANDOZD8fCFg3LGTB&#x2F;&#x2F;NExMEhUyqIAZFoAMUuNF&#x2F;4r&#x2F;&#x2F;+9rpWbhmlZ&#x2F;&#x2F;&#x2F;9tf&#x2F;2fiJ+Z+7umih0Yu82WZwLzEt36ZqyxrN1MnUSdmq8YMUaiy+7W5PCdC8hepvNnes628tzXyQTnz8Qx2u2vaM&#x2F;&#x2F;NExI4Y4qKkAdNAAU5voJq0MzEMyWsLKll8&#x2F;OzNYdEgRByEFQeRH5rIXDjv&#x2F;&#x2F;+oICAkcjDgJGBMHla1IYEwyAhCKJrRJoDwUiZ5MhwIulV6Pv0bQ7o&#x2F;Z+nX20OGpEwR&#x2F;&#x2F;NExH0YIYqoAMiYlASQXCUOAHiQXjgVAUExIeByNh4HAcEx7igHojA+EQWg+G5w4DgJjBwsTGpZ0t&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;7M7ZmyuzoxzNt0stUno6rKyFth1gH6JJFIPgDjUt+fr&#x2F;&#x2F;NExG8YQvawAJnOuTFy&#x2F;&#x2F;&#x2F;efwlfs1iRAJAKVMIMWWgJA04gMCaJOTkiJygkE0ycnPAkB5GWnCl0jRn&#x2F;&#x2F;&#x2F;40i3abaFyrF9McWCaUqst1l8hJJbleCoNf9TvzfD1&#x2F;r&#x2F;5f&#x2F;&#x2F;NExGETMYq0AJhSlP7&#x2F;aUvaJnowEGWcUEZKggadNGFzytkYVZYgDCK1wckowgaWSUVf&#x2F;&#x2F;&#x2F;9Tb7YloN&#x2F;zI4RiibTDFgF2lRMdADRSuuW+Dly9dcv&#x2F;nJmcrOYa1xILKW&#x2F;&#x2F;&#x2F;NExGcR8Y60AMBSlC1oTZ3cOV36yffhUMVtC4TTl1OUYt17p9x&#x2F;&#x2F;&#x2F;&#x2F;0u+dc7+aWaUZq&#x2F;V0quYDc28QYuza3LOfH69G16e39ubzMtX&#x2F;Cu39Cea0mB&#x2F;4BNW31IUX&#x2F;4tRz&#x2F;&#x2F;NExHIREZK0AJhYlAHa99gzXvsFi3Sy2HwUd&#x2F;&#x2F;&#x2F;9jjz8KRLb0ZRBhKq&#x2F;7gooeF2ShUYc6loHIx&#x2F;Max8qBXIul8yGO767fNIFwXpNsqDIUYjK9OiWdzS3dVyG4anp2GU&#x2F;&#x2F;NExIASYYKwAMCYlFBfaTk8&#x2F;&#x2F;&#x2F;&#x2F;+v+t3&#x2F;DpQrX91AapxLcdMRJyUrYaDLN2L9vlKi07WJaEQBc+Bx7nGn2Ki0OQuZiRNGl1JTEJBOUt3x3fVVGGQnN656pW4BkQOdFT&#x2F;&#x2F;NExIkRWYK4AMBSlH&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;+tXmUdEK7a9uAEWisrDi8&#x2F;MF8PPlI&#x2F;a4PqlS3wZR9nE+Up7H3a0Hfx9&#x2F;GP+uhdBbEjWDM+jd8Q1FDVDzyCzrDpQ9&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;oX+WhpLU7DC&#x2F;&#x2F;NExJYSUWa4AMISlNDlT3RnYmbOqxckZcFxH1B&#x2F;BgrIcCsPGRRJFnMDbQ7&#x2F;q06dS5CqJmnEnnMaMUggBc7UFBZxIFAj&#x2F;&#x2F;&#x2F;&#x2F;+giq&#x2F;tIZYUlZwRdNRwiko8axXKAmqhcK&#x2F;&#x2F;NExJ8RIW60AMvKlGiZBUyAdB4ABmPBMCbhz05bs1b9tfx&#x2F;4&#x2F;evz5y0NcmjLp7yiMuKyhBH4Z+eVMEJS7&#x2F;&#x2F;&#x2F;&#x2F;okqsaNVQ2EVeI8KNg4lQwRFHS4mzSUMOxYTbGzAUXi&#x2F;&#x2F;NExK0RCWq0AMRKlIrxYjtM8mo3l8&#x2F;p5ZGb3r&#x2F;mv9t9q&#x2F;&#x2F;&#x2F;9P22CKtnP23vOaaj3JVTkYcFyqeNNyqMBcZmg4ULBwxGTzaK2pQ4omLRs7KLQCCqOtpxWSxuUYwzLKGK&#x2F;&#x2F;NExLsSkXawAMNMlETYbDDITikHMS40zc2sxreq67rzJb3CwIm7bv&#x2F;1jrFYRJLM+3Iw+fOiVTRHc0s2AwciIHDTxGKAEVIkwFCcqqSv22ihstjBbi5yXGYKRFzGkZu4&#x2F;&#x2F;NExMMSkYaoAMvMlBxODYLEfhylf3xzBwA3PEfkTV&#x2F;84OQRAZsi5P&#x2F;&#x2F;5gTBUIuRcrkM&#x2F;&#x2F;&#x2F;GYNBmCcQIoeNyf&#x2F;&#x2F;&#x2F;&#x2F;Jsrm70GTJ8hhEDP&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;IubpmZuOYOYaEERTHMI&#x2F;&#x2F;NExMsScJJgAVx4ASFSHCAUGIngLGQTCkLoF0xGWZYZi1iCSLS1Gt3F1u&#x2F;AVyefODG3szyNEjsrKzyJdNsCUZEPS+ITxDBKRy4R0MBhAIAhkBOOD&#x2F;V8EkOck6yz0A1A&#x2F;&#x2F;NExNQgsypoAZuYAMQ&#x2F;lJM321fT&#x2F;ceOwOCkUFVA6lTaw&#x2F;S6ovX&#x2F;&#x2F;NMOr6z&#x2F;&#x2F;&#x2F;Oc1s1BX&#x2F;94qsVGjWam&#x2F;pp9kjjFrA5ioCaxcX6T2NsBcYGjDqn21e1Z19uMiquRlp8v&#x2F;&#x2F;NExKQgYcakAZl4AIMgWy8fc3&#x2F;s3Xu+bfnj0VcX8Zc4SfCgKbpzKny7qWVMxlEaMjgpDXIVRtOcs9A7dJTIH0nsIpD1aLboZVPROctNbl1xYR&#x2F;qziWpI2teOt9bnJd2&#x2F;&#x2F;NExHUf6YqYAdrAAMgyeFv&#x2F;&#x2F;&#x2F;1NdQldypQqTKBseEk63HiAzt+HrA4qnjzN7JJV9jiYV+4THtttVhc5Vaq21ziQjTcz+JW0hGhGyCkyT8Mu0WQtxxqcXiLBgk8ISICh&#x2F;&#x2F;NExEgauYqkANPelG3NKsbn8jFDjPZIrLOyuKvUr9cMTCzwZo7W&#x2F;VzNMqp5LLuQ1XIHvbMGAMVW2yCkUdc1HktKSw3Oj3O2wnlxESM7Hl0e1lSkFTa16YD72l1m3uEo&#x2F;&#x2F;NExDATMPqwAMGYcPniS7c6BVnUYaKmQ0JVBUFRY9V&#x2F;&#x2F;&#x2F;&#x2F;+v&#x2F;5Mufie8YVB9nwA1PyQnDsvqpxbX&#x2F;Q5GrU5Zz1MLKNgHC7OXteY1c1UOr&#x2F;&#x2F;&#x2F;&#x2F;9P&#x2F;&#x2F;&#x2F;+lX0&#x2F;&#x2F;&#x2F;p7+09q&#x2F;&#x2F;NExDYS4xqkAHnKvL7nJPlPFBEPi5oqKDWICYiw11QeMorLUH0n1WiFQb7PAZIc9X+83VmY6K5DcjAinAAAAIRf6Xk+tF9eT7f&#x2F;6v&#x2F;1&#x2F;&#x2F;&#x2F;dk&#x2F;&#x2F;7&#x2F;9evPU5GSWV7orUs&#x2F;&#x2F;NExD0R+wawAHiEucUiMcYzmFMHLVUx&#x2F;HIKBVrwlZaypMO8BkTN+BAJv1EgmYnP17ZwWFdzhZKkG4lujoJcJw2fvxsP39E659D9xBoB7xCKv9P5&#x2F;KaaEHAAjBA+S&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;NExEgSiWq4AMMGlP&#x2F;1Kv7A7Bt6kQs8IEA62S7cIzMk5Hlh95wCziWYSqJSzVqdv4yh35RATXoTL+TFe3y5jfnfWXdHwoicDl1bRNQ+azPj9&#x2F;mNmn&#x2F;4hUtWqv+LsC&#x2F;t&#x2F;&#x2F;NExFASkXrEAH4MlZeh4tdxBWalNgOGfnqUk&#x2F;bjLmxVI&#x2F;wlNrEquaNMRzGXi+IsexSeuaYt5AkMkiTdEln83&#x2F;7&#x2F;eG8tDbm8qCCUeF&#x2F;69f&#x2F;GLlKr+a+GI5XxgCttjamA&#x2F;&#x2F;NExFgRmW7EAHvMlWJ3mCrrfB+xfhrr+1RreBG371rrC8hUbA8UWRIdRZRug0OpFBQRoc8dvdcU9fdfB3kCNw6W7FLpVf&#x2F;ajpGrdxDtFKlwVJNW+Aee0Qm44SzC+nXr&#x2F;&#x2F;NExGQSUZK8AMPQldDtkWxohFOyBGKUCZpdAJtnpmCAgqEIbs55s9zIZuwx+z1mIusW&#x2F;&#x2F;&#x2F;&#x2F;6GIYn&#x2F;oopcsZUYEDXrMNll5NqAlE4O7NiRyAObGGeNMYjap&#x2F;&#x2F;&#x2F;n75mzB&#x2F;&#x2F;NExG0ScYq4AMHSlMHJApsD0btAKcgcTF0RXWNeqqM1BouGczAktMl&#x2F;&#x2F;&#x2F;&#x2F;95B&#x2F;+ipLlKv7SGTVNdQ5qZT9YRAMmzwkOEAbO1RZ6Fqj77f&#x2F;&#x2F;&#x2F;yebRguAqIwRoysHIaEU&#x2F;&#x2F;NExHYSSZKwAMFMlFbFzhU0mN0cmaHucxKrblZxhf&#x2F;&#x2F;&#x2F;2X1ZYUb&#x2F;maDFe&#x2F;mYSDjUKpceEY4jQqQdjlmoOzqjONMwMtN7b&#x2F;&#x2F;+qIwqeEADiRgmPcUCW6ECWLklGZSGaSs&#x2F;&#x2F;NExH8SWY6sAMlQlDU2PmmSk&#x2F;&#x2F;&#x2F;&#x2F;6Pw&#x2F;en&#x2F;K3uWzqNHNn5s8dBuKBt52BqGd1EuQmCRACPEKIDlRjUVjnaptU3vY7q5qQKi4MOmBKPKCll72dv&#x2F;+3x2r3W7nmiKJr&#x2F;&#x2F;&#x2F;&#x2F;NExIgReY6kANHOlP&#x2F;aqmTFVPR&#x2F;WsOjKrMjCgYdAVlACxI0AVUKoCqHCQDTxxXtmsvGWxCYp9JHtxLjwkPfqpedlChwaPtHqrbFnsWz1TLoD3sinOr2V5C&#x2F;&#x2F;0f3MZjG&#x2F;&#x2F;NExJUTUY6gAMlMlLlEo&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;7JRiUQwIxwbB05&#x2F;GnSR4SiUBcJSFox1xsWbmdMs3zlum6tuD73YYYNosGXcVPXgaXLLyiRKKkEEC+NrNfs59qNNTnG5ZXl&#x2F;f&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;NExJoYepKQANsEuP&#x2F;fI3p9m+S76NO6NISr6f+&#x2F;37sQzsjWzst1Di0ZT0A0kIwc6qdCFOBjFZuGDXgHujqjS9pbQ2pV3LL61q4KiI4qRFWctmZA8AwdOK3ut0Z9m2Sv&#x2F;&#x2F;NExIsYUxKQANJEuav+yNb8P&#x2F;WVe7nzay&#x2F;fr+GVm1co7uR8clltxyfvJ3v8PuXsN1K6v2tk00k1nNxRtPSJA+bNRIGSUjJB9cfIGRgUDAsnSM28PoLTQ0AhISI14JhK&#x2F;&#x2F;NExHweeyKUAMFSvF&#x2F;&#x2F;5WuiAcxESZyl&#x2F;6TkD9THr&#x2F;&#x2F;27&#x2F;7f9elb+vtR2shu7OY557oeh08cHHWUcxyxNSpBRgbFBIceEdSY+UFCiWggcZEUSCw0EzjqETqv+D&#x2F;9ZR7G&#x2F;&#x2F;NExFUTcx6kAAhOvGhv+ZnXnyC7831&#x2F;&#x2F;7f&#x2F;&#x2F;X8nvrPdndb3rZRczXUrVKNEkM51YkYLCUOnh8Ph844pnIUhosHw4NOMYWKBAUwYUQMJvdMl1U4tt0JTJVP3EKgIMIRm&#x2F;&#x2F;NExFoSKx6wAAhKvCldqO7T3fp6f&#x2F;&#x2F;&#x2F;3&#x2F;&#x2F;&#x2F;3rmNqyydNlndj1sUxWVUtotSOmNqhyIaKdUcIyGBFKYpApnYcKQWCQEyruYBfGsyBJADBQgEFDDSz36eETNu&#x2F;d60dkx5&#x2F;&#x2F;NExGQSKx60ABFEvEUDpiQIIMLaCAEBA7&#x2F;4tUND4RPlDn8s9qioKnf&#x2F;0aavoUPOwMJemvm0bwrqB1VzHAia4AwY8JdXcOSKnyq6xnufTzmGJzC+wjPzomrRIBcSgySL&#x2F;&#x2F;NExG4QYKK0AHoMTNLA7Lq&#x2F;oG3rKDhoqn6lM+9r1P3q69nMfa0V4ULakxGuRqWWVv6xtYFqKkScFairebwhmBLpphUY4QAgZNJAmwg6aSqZJBbhQ6806I6D0h3GTjkk&#x2F;&#x2F;NExH8VMX6oAVhgAXmA5hUEKABQDwtjkigCZFhGWIgcD1hYjEkQvkyLonjpmWyqbizSqMcQEc0nUUexPnJ5JAoi5SYGNFklUu2o9A6bldk7JLRRUl&#x2F;9bv7epJaKKkjJ&#x2F;&#x2F;NExH0h8np8AZuAAB&#x2F;&#x2F;&#x2F;&#x2F;NUSPaDX&#x2F;+iQQAZYKIDPDBhMENGLF6wM2bY5K42QR83UdR&#x2F;CIBSRl4oZqSyWPJuFNhlT&#x2F;43H4TpHhPZQq+KI2LjgUTkMviz&#x2F;wO1JZj+v5CV&#x2F;&#x2F;NExEghUXacAZrAAEq14fp5mtXWpJqGk&#x2F;FrUQgCjiEcnZfDDvQ6&#x2F;e4AdCIOXK69Jk&#x2F;kUceN09gLBUDkAm1eb6XX&#x2F;&#x2F;5ejAfnKEqquOESsIKsNIUTlCTCBKZzMoUrCOLS&#x2F;&#x2F;NExBUXiXaoAdl4Ac3FtV7eNemy1OU1AxWwyPlIfr5eHIj1KnHzA9fPnj549fOSFxC9G07PpKxsMep4sasvntFs14fw3F3IhL5TqKVvxHzFnvGqHP3V5UJaMUjREVEq&#x2F;&#x2F;NExAkTqW6sAMMSlCBkvCWdoxYXZR7B7rcU4tokjbVnqc6Xk8aA+CggmqJ7LtPOWYtaiMcoUB2aA&#x2F;ScKp+3vTi6NyKq4Hzp4gKPYdRlmDwbn0rUZBxZMK4ZtqPPbOsa&#x2F;&#x2F;NExA0UaXKkAMvSlSIhLpLz4ztG+I&#x2F;i5fxdP5nkR+n3Wi7lorE0ySOUmn1qxtWpiJaIqEy4lPEPpdWEpX+neRlOlk5ImSIyToUGqqWVZoZmxcoMPH4qVWgcKhojInmn&#x2F;&#x2F;NExA4ScU6cAMJKlKsOjc1IsCKSLs1NRqkSTKJURGgSBUCRKsTfPl+5eqqwiClDor9C19DSsxpjGEg8FR4KgIq0kO&#x2F;&#x2F;&#x2F;&#x2F;+qTbyyjaB+pFGcXZf2GqbL97Zs7N7Ys82L&#x2F;&#x2F;NExBcPsNKcAMGQcDAUiCoXMIYyt0vn&#x2F;HFhYCvHHzCtcmtb&#x2F;metG131&#x2F;&#x2F;&#x2F;OIfV+UlKVvk0QaEwkztUJajmNt7meYKDogAwmxuLNgzOk7CJN&#x2F;LLTlTzKZ5GL0gcq4cMS&#x2F;&#x2F;NExCsRaS6YADFGcJCC0rQs21SFffv&#x2F;VlkDumww4gXEB9S1D658wgOrwsrEQAfH42N2BSBXd3fFgzBTIAgWxIDF0OKid4QcGZ9Z4qACJc+laq3e85vavcnl0OpGMf67&#x2F;&#x2F;NExDgQUO6gABhGcNJiRqiQShBthSoMKd13sRf&#x2F;MpN993z71HPR5gdGzUlARMxH2kTL0sulbmu8Piw2wmLpSLhtLZ8XSTpWP&#x2F;+mtbK+cc5zyEnsvFGlzxU4WEdIQGJE&#x2F;&#x2F;NExEkROS6kABBMcIdBMn1HO&#x2F;&#x2F;pT6Ts7+jBhVaiQRA5j66EMkAfA0rMyIF4TEWLSkn4&#x2F;+Oz+5kceqcA78NOtcrX6P6fj91kjyNvWZLKhhRQGTW2ycIZHgYZ&#x2F;m&#x2F;jGVJl&#x2F;&#x2F;NExFcRGU6gAEiSlN1&#x2F;Pw&#x2F;8&#x2F;yw17Pvj4+5iIpi1lY5D+Mi1MuNzAyHQPI+j2sZPVPycYw4xZ6Z96WmetRysencKUAQrMeKCjQGyzHRVCVbjWpFdhV0nW8mcZyuU1Jdp&#x2F;&#x2F;NExGUReVqcAVhYAfXbdWl1Ylcvq0nasoqym9S09trZbstnjEW0LgsEpYZdIEFIBC0H5YkqSHKZPpEpAE48afZTFO5q7&#x2F;O9PMAchqM&#x2F;AD8QuLtKeLGW3bE0sM0WF16K&#x2F;&#x2F;NExHIg2aKIAZrAAFOsP&#x2F;&#x2F;&#x2F;&#x2F;s7OZUQ&#x2F;&#x2F;&#x2F;&#x2F;6NDfyqqowNMp+y31dH1vhVCQcNWKtjmtd+5z+Y91n35v7e3e+v6rCxe+8Vg9uPT4loCIfS+OyEWWVnx2a3e17IbXrWNM6&#x2F;&#x2F;NExEER0VKcAdhgAZaOue8XLurGyTiw4KMpBqZA6OHx0CQQRHbe8Tg3OrhiCKWxQM+5CMeKAwTEBNAuqVm5dUrAbDxMJQaWRwRxTzp+8uHS9wxaCzoo4EmAIx+qrraM&#x2F;&#x2F;NExEwSIU6cAMpSlb6jbBAAHB1E6LcVEmuSGkZJ0JXqARyJKmG8TjB1TBXSlLecygQx8XhTi5Jod4NYOuEWjcvSqR4r5JHS6UiJmTg91M2jQkeMmIiU1LbVXmsMFawn&#x2F;&#x2F;NExFYcEX6MANPelBinwsTGch8BJqOM1&#x2F;D&#x2F;OYktxU&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;7FMCKap+qOhDpuUz1zDJ43JswoAAFyK4X7orS6IhDUvZ2ZrRDArl25Nzihx+RdFeSZjFOO9QKdGQV1HbF&#x2F;&#x2F;NExDggGpKYANPUuIeqxOQoLmiFE2KQsKw2k&#x2F;rCNx0x4cMVOFg4gFQ0sMR8bHBDjgUAIwLycfiEEISB4IggKjcmUgMPt&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;V+YyHvJDy7&#x2F;&#x2F;VWrK4segojOwvA7&#x2F;&#x2F;NExAoTuVaoAMJMlMmtzwyAWNzUqX9ot8rjyFmNoWeVM3QVBm9LG3KoZ+rk0jlTKjtaqpq3e+Z&#x2F;+8zhxKWJBQdEqRUQgqIv&#x2F;&#x2F;&#x2F;&#x2F;USCrFu&#x2F;&#x2F;0lVnHRIMtghY0Fixe1lD&#x2F;&#x2F;NExA4R8LJ4AVgYAMjXp+M4ZZb5rL9d&#x2F;&#x2F;9j&#x2F;KNqGHAQTjMTCRrYloFYe&#x2F;+BRIDoiErB+EqkICj1gJSf&#x2F;zz4wC&#x2F;QyAk57loDGlixs&#x2F;aZcUk2Zv7p1yZxjAuAn5jHqD4B&#x2F;&#x2F;NExBkYAyqIAYw4ACKCPz56MccPDYRfyCnn2HweiMXGw7&#x2F;Rt7kjSArOcp&#x2F;9s+xlhgqPFhkfH&#x2F;&#x2F;7v9uaUJlCAlkiw6NHL&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;58myCQQJlFQbk3f+eb&#x2F;yN6unff6Nqr&#x2F;&#x2F;NExAwVQo68AcEoAf76M5F8jc7XU9ziEhFcQEAQUdlOcPoUgEYw5XhwIB05xcUAc7iYfMxLOzs7lc5zlnRFE853dchS5EU9RTK849Kf9Xl5B5nAOBqFUQElKEAYNqO5&#x2F;&#x2F;NExAoRmcbEAEiElAEjZ9T&#x2F;Vf&#x2F;Qk9Rmd2Zbv3o9zk7fzdryPMY5HAjM5qGVmlRjHEsFAIGQmCoa7l4iz3arfKlQ0o9qPOuQSRX&#x2F;23QujFbM2nWptGp9YMmW0FtH2POP&#x2F;&#x2F;NExBYSgYbEAMPMlGxDatsajgVvm1cv7Zu&#x2F;fwH6fUbA&#x2F;hUgxd3lx6N1MouxhZ3zWPfHhn37btmXy3T0xUaVhmj&#x2F;IgwtdumRGNxWsHw5xWIGojpWsaB4fBdTX11Ylvzv&#x2F;&#x2F;NExB8SiZbAAHvQlK30mSutgz2q+Nu97kQG4JS7MO4CcuLFB7Y1r6H3unyUzOKFcCxtZDQ1DlUq2HKCrdZGB6rpoB+LJwADZwxMFWUvwbhH&#x2F;nog&#x2F;g9S8eY2TK3iClf&#x2F;&#x2F;&#x2F;NExCcRcYLAAIvKlDb87YwdjA2g0CWODcFNs+dtR2MPcgLuPitX&#x2F;&#x2F;&#x2F;tkaLYUOC6dh9B40XI8MLH46ADySKh9AH01nQ2Yg1g&#x2F;xtKYWXjtRYNHMWUWOZpc2c9mva5NvUE&#x2F;&#x2F;NExDQSWXK8AIxSlSzRAJdyZaVdbfa+epx9IH+0b&#x2F;HdhPXgxgvbg&#x2F;LiHLlYlQaXMRjgeaSjQN5UsYwN9QQFrFeTcYwNVH6COx7QFeMeQUzgZ5wC0EWxFpBA1Xeolxp1&#x2F;&#x2F;NExD0RMWbAAGyKlHED1P&#x2F;&#x2F;&#x2F;&#x2F;+hbCBFdo4BbLTFXPkB8HFtqAXCTeUL9U4ahnzWSA4VTE3BGjGxbmCLUH3RapbTNqi4XTVAuJJJm5qs8UOlBKC5kQAI0aS7&#x2F;&#x2F;&#x2F;&#x2F;+hX5&#x2F;&#x2F;NExEsSUSLEAGvacG4cBDqqcV53DU57RqEgLewJwO5FvUkSkTJqPkkzM1NpOoSROMdCiVC+nnK8m8+ltk6k8UnzNIRsHWFsV5zLs9V8xRRID&#x2F;&#x2F;&#x2F;&#x2F;qrV1KegYyjurUi2&#x2F;&#x2F;NExFQSkWq8AHvGlF9m+nllGGEWxD2Yg8cKwYTG0KFqRbAdkZWK0CggGAsTFKM5Q12dn192aYtWICAkRYK9oickHmf&#x2F;&#x2F;&#x2F;&#x2F;0qseQENElgEt1prSnkMwfsRuD&#x2F;WWtfDVk&#x2F;&#x2F;NExFwRCQq8AHvOcJYavMbEx+J2ImA2B7lEoif0psunZTOyC1UmdaFSRuZDZYP3XLl3Jos&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;TNX4yATuO10NvdSZuO14s4k74UTXBAeHzid5NodxJ3sYsjJVj4Ks&#x2F;&#x2F;NExGoRKQLEAHvacP6Nlyx6uX8f8OHLYMROS0NGx4YTsIt&#x2F;0+meIp0wNp&#x2F;&#x2F;&#x2F;&#x2F;ZDdy3&#x2F;ANy2rkfvCNtrYzrQwk6u2OwIK0YQLdNDJo&#x2F;oEIVT5eCwptT5zeTfh&#x2F;5tv4r8&#x2F;&#x2F;NExHgScW68AHvGlM+fevzDi5ltu8eqHl3CUAAJAFU0hd&#x2F;&#x2F;&#x2F;&#x2F;9CvmQNPUioPK9EK+HA4oDelEoyizGWn2ouUCo7wsTVQw5GIxOC8juOGB9zp5qtbaK6+ijWfdI4pdLx&#x2F;&#x2F;NExIER6SLAAHvecBPjHljwlu&#x2F;&#x2F;&#x2F;&#x2F;7q+SpRseUh1bOk6mamu1dOpiDeP62NRRZQhCqVOgkAp26zNi5JZ4UiXsL7OvfgSBHPCBIGpWvOIQKZteq2rWWMspqlarcltuvj&#x2F;&#x2F;NExIwRYRLAAU9oAMx7f3hUpZicnpunocIBrxbDvMcuXre8M9Xr2dq&#x2F;co4&#x2F;rvN&#x2F;&#x2F;&#x2F;&#x2F;4d1&#x2F;&#x2F;&#x2F;&#x2F;V4GjX4w55X6&#x2F;8qQf9A2ruLkFPIddBALFbyi0uiSOjZ3wFBMZg4LhBp&#x2F;&#x2F;NExJkfoca4AZjAABXysYGM3FkafSmJmI0HMb0YA6U5ihawgw4zqvdsj5iYnj4nno5z3m1em3cBmaGuIwQ4DVaSXUudX9t1gzPXs1fAzFi5mMhAaSF+j&#x2F;&#x2F;7gwp4mGiF&#x2F;&#x2F;NExG0boX6sAdh4AGFa7ockJ5qDBECdp0EzbDCG1pklCEvgtCeQ0w08py&#x2F;mqu1ePUhVxcjGP8OINI6wxQyTQRsRQQWWakbbO0rkEntUik4iJjSEMtxQrRQx9XkJ5mbK&#x2F;&#x2F;NExFEbsYqkAMPSlKUpSWiyVtlO2Q+DAfY8wj&#x2F;&#x2F;4kaERUEw0BQEFBJOJqOWAoyJrCC0y9oKSGikNtdxaSy1hKTeKyNaSTEmnIirjonPrTl1aSWykBIG3lo1VNTC7Ks1&#x2F;&#x2F;NExDUUoaKYAMMGlNSqrQoxN8Mof&#x2F;wy&#x2F;&#x2F;VfjcY4KPJoGHHv&#x2F;&#x2F;8rcHXCWjOMEAYSKEFF6kTWKwEw6pGr9s3hxEk0nB&#x2F;WKoMlaERE50tUOXSJPwmwkpsHWS3adZaWq9wF&#x2F;&#x2F;NExDUSmNZMAMpecB7oLMDt3&#x2F;0hoKtehl&#x2F;&#x2F;&#x2F;&#x2F;rSMatMWTU5E84x0GCjKlIAiL81YzQ&#x2F;dxy3lWjXMN6v8LG3XpfESCI+5dhprIwRLM4ikdkmwRIS5p2uStZZBKkTETKj&#x2F;&#x2F;NExD0SYGIkAVoYAHQSmmml91BhXbZFFpWtXDae4oNG+iHf7DQ4Yqjz&#x2F;m5PPkwniE4k&#x2F;+aHCefekSNpN&#x2F;&#x2F;l+gaHCUH4QSJCjp&#x2F;&#x2F;x3jvJ4eA8EwEcKiQIjBAgljn&#x2F;&#x2F;8d&#x2F;&#x2F;NExEYgOyqYAYhYAGTx0EgsJ5ufJgiDscCAO8+CYO02&#x2F;&#x2F;&#x2F;&#x2F;NGPf&#x2F;s+yhhNa2t7JSS&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;4p77Yxj3v&#x2F;84sg+ykzWgpcub2Fr75Kf9qqRrd6a&#x2F;2+j06omqFeqHQDuUE&#x2F;&#x2F;NExBgRgdawAcIQAA3cjMs4Rx2dgpimu7ux3NeRbDIQDIsXDIQFnbFeyihKFsmx7lhdEiLzRRhSDJMag6InabVb&#x2F;hMOYfyCvll4mUhbfwm5SonY6Xtn+1WM7UBEMuq&#x2F;&#x2F;&#x2F;NExCUSEfKkADhGmRrKv7GpXp&#x2F;swr&#x2F;Cn&#x2F;1VibEqK6KjRZRXeTPynYG3Oaf&#x2F;&#x2F;&#x2F;HiqgDogNzxcBBi4QZI2T0fV1&#x2F;V6t&#x2F;7lW&#x2F;T+2ZPdU0X6qlOaVFR9k6VuVet&#x2F;LKiwqnM&#x2F;&#x2F;NExC8Qgf5QAVQQAFYseUesWWcEiUJkSISrwkLka+vnVh3zHIHZH9dxz1CFgP92JyUPt+OhEnjvVJ3+BGDteyQSjEz&#x2F;+SeAYTR1pk43AADH&#x2F;8QBvZLL2GBqCCNBQbf&#x2F;&#x2F;&#x2F;NExEAiGyqQAZhYAO4485L96ROOQUof&#x2F;&#x2F;oEwvimJn1Ss1Ye4Osr&#x2F;&#x2F;&#x2F;83uCQTLk+mb2O8k1pNzripcpv&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;L2E9A4fe+r7QOeTEbsbUHJ3B8lGxtX8wClgssRTg5kC&#x2F;&#x2F;NExAoR+VasAdhIAZSwgxCbnE5FYvX952MN71veU9hVwq9i34TtSMWYIx0sAU0uxEYVXNMCgjLiUXRqdOUIQhP1flmwpNd0dohUuTIRSFrwQibhAcPF2nMp2dX5Uksj&#x2F;&#x2F;NExBUSaWqkAMGSlRuOjJWs3r7Ltr5NNU6ixMJIQWBIGwZEIhwdNIEZYQoTZKhhKUY5ny6lK&#x2F;ubGNSkmFkRiWvtXRnooDEQosyaoUJKO0fAQYGGcxgJH0dDat&#x2F;7+b&#x2F;H&#x2F;&#x2F;NExB4QgQp4AHiScCNfiI1QqOoBVFmRCgNOFRVNhosWVIzp2RTCrjpZ8FSX&#x2F;&#x2F;&#x2F;&#x2F;lThnsVPDGwIUAwcGJhJrP9L2U3K&#x2F;01W9+Pe5ZZZd1l2bt+1ubP&#x2F;ZZFKRQVbUkEwU&#x2F;&#x2F;NExC8Q0NYsAVswALw0n7Hdd+R21ehu7&#x2F;usf0fuc79KFZqLDIEjJf&#x2F;EShbQHz+h7mMAl3GmK0HYGAgcDAsR8TQUuOYJQAWSgEJAMebA0Yf5FRxkHLxUBtqGNiYELCn&#x2F;&#x2F;&#x2F;NExD4g6yp4AY+gAJOIppuxuMqShOk0Tf9Tb5SLJcJkvE+Uv+huyHPEQE4CtC6cKqlf&#x2F;&#x2F;77IVWmiRscPGn&#x2F;&#x2F;rdNC2&#x2F;8xLxgM2ThqpygZlw0RPoFYBxZP8Wg0w0ZNy&#x2F;X&#x2F;&#x2F;NExA0SAZaoAchQANM54qRlB6FMgFQBoLJQGwVRDzEk6TF7O35&#x2F;X&#x2F;&#x2F;++je56KsujHgNBQMO9WrSpxz1oNa6nRzq48TqJrKrDZDoIsgl70WSeo&#x2F;9V9qsDAQMSBAxgKAT&#x2F;&#x2F;NExBgREYagAGjElKrtrqJLUrf+Urf+hn&#x2F;8pnKVgwEBQLJcqGrYiK8qd7WQ1g1UebrBWzh3LBqHajqJUyEUBIAzVCJFVqkRl3ZTGaX+U1Nvtn8st&#x2F;38GJUgzAUk97n4&#x2F;&#x2F;NExCYQwIo4AVsYAJe6p&#x2F;9nspf6&#x2F;blnq55giEoaTW4GXViLuDfdZsrqGwmKgsQoBl27gHoB+fiZjMd7gZ0yBlyYEhfvwOGxAknDVABwv&#x2F;yDkTAOEB5QtP&#x2F;&#x2F;AOKBi8LT&#x2F;&#x2F;NExDYgIypYAZKgAMLFBQ4gH&#x2F;&#x2F;kAFyFocwcwnB3f&#x2F;&#x2F;iChIG6jQQXFjIoGJ&#x2F;&#x2F;&#x2F;&#x2F;xjhAAXIQQqFIQEGQC5gkIlD&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;FwHhQAhQdgfIJQIgI8NDQi5eJyjjWy4hIhdEn&#x2F;&#x2F;NExAgUWeqwAY9QAHeJ0W1Tj0WhCBqwvjIYgXRKNgbBgCwBQGAgnQShZc4Bt557EJpjap8ekqGmponzz+3KOzuYps88xtd7Hf&#x2F;&#x2F;5QjwK0n&#x2F;+6dFyiE1TjT6EAU8CoBc&#x2F;&#x2F;NExAkUCWacAZiAATLy1TKlZtIYB1m7GsbBEAi1CCibg+4eiBSErC5sN&#x2F;EyI4omMipVMpEGoW6Xb9ajpqYrZIpFMuUGSVpHEKVEpGaLH0lmZ8ARqkwy9SzQMMzZzUvk&#x2F;&#x2F;NExAsVCWqQAZmAAch2RQXFMEKEp8gcdDR9VjhkEMiClgFoMujDEpCaldIyNpEiq6RN6d9JdS1fqSOkBIapaBwpm3UmYqJocpFkXKxUJ8unzSZpGUVVMInNIhAxaHd3&#x2F;&#x2F;NExAkTyU5sAZqgAAxAEsFYbRfzpSP4ZdcHLY1QS4DWMwM6QDYwCRAbUWloojHDnFZX+oyRZX&#x2F;ooyiLNFDdSy7+WBSQpcc43LqNIxR+d&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;UqFJMtWzODE37mleP0&#x2F;&#x2F;NExAwP6MIEAc8YACVqasV+&#x2F;kg5hV3vBlcGwlyoa7CHjWBRUqVVYKh26MFVXLNVCxA1Qb&#x2F;r76mzqm&#x2F;1Jd&#x2F;&#x2F;&#x2F;NUFkJYtqhgIdHTsxFGAEBhIoKBTxpI8ackaiaqqsiUu&#x2F;&#x2F;NExB8SoK3YAHmMTF8OtE5IFSUrYWJKApK9p4KwkBQK67IhIGQKp&#x2F;uf4u7URJM+WLEmdMsn6fj1TEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMu&#x2F;&#x2F;NExCcAAANIAAAAADEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVKUNWMgWg&#x2F;&#x2F;NExHoAAANIAAAAACHliEMM0k5K0caDKo4TELJC5sQGQuiDCokLvQZPahTC7ZAyjSYUyZ8IOwGCEBxwBXj5dNCdXhOaZ&#x2F;xKYQhFDEf&#x2F;YsjSYT2&#x2F;uEeQeWd&#x2F;6HkSyP&#x2F;&#x2F;&#x2F;&#x2F;NExKwAAANIAAAAAIgRwJ7O&#x2F;85ZCzP&#x2F;9yKdJtUR0ngxhgmoLcf5LTuBkAxOGUmo+NoVjQKgAixpFRJ8&#x2F;a6dE5ZGEiwLkgoFQEDpFlQFBERBo87JEQmEgL2hUBAYkzUV&#x2F;&#x2F;NExKwAAANIAAAAACJI8&#x2F;tPBIf61liTPSROv+MGIQhwio7C3oYf6IP8&#x2F;GB&#x2F;APQWRJCSzCaC0SQkUKFkE1JCQwUKCdDlj&#x2F;+TWTzJla2ORqyggVBMy7&#x2F;WyaBkVFg8aCoo&#x2F;&#x2F;NExP8aEXHAAHpGld&#x2F;9QsKzISF2dnWz8VFFTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMu&#x2F;&#x2F;NExOkVMLXgAHpMTDEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMu&#x2F;&#x2F;NExOcToSlIAHmGcDEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVOz6bk8c3&#x2F;&#x2F;NExKwAAANIAAAAAOA9Vlrz3nL8PiYT4+EUiz2Sd6PDul84zL7jCNqeNZJ184S0WDkeIDOVMMk5RC7Dj3S3ODRkg2YXHzIZXlMW08gzUh&#x2F;zPRDQM+oEQz5RNTPAIQM1&#x2F;&#x2F;NExKwAAANIAAAAAJLvMk42YweTFDHKIpMpEUQyzgjzLfAtMtoOgyuRvTI+LGMNM10yOjfTNJK2M&#x2F;ocs0PQ3DRSBONEsVk0IiUDOrNTMnI+BVVzCk0jW+uRYjOFMEHC&#x2F;&#x2F;NExKwAAANIAAAAAOOmG48&#x2F;U5E3&#x2F;i82KYUhBBCBDCED1i3ibi5lzUb9+r1BE9HjI8pr+Gr0PQ9D1fH1Dfq9Xq9&#x2F;uj9+&#x2F;fv3fR3064s65zd&#x2F;0QQiIiO4cDeJ&#x2F;ET9z&#x2F;6+&#x2F;&#x2F;NExP8nYLQMAPe8TInxERERz&#x2F;ruf&#x2F;T90RERET9z4XoW7u7uiIiIW6BABQYsFVTKRyRlMQ0zVKkAypWIxWah63yVS5uNJRK45lUboR0HKPUTogw9RCjqhq2ZOmioXr1h&#x2F;&#x2F;NExLQfov3oAMPGuXurQWFWva4hPnz17WvtCjbtbea11a2rPo1t&#x2F;FlgqgIDAIUpfxjVgYCJ6qxS&#x2F;1AVYCFGuzfxj43PjMwEBF681X&#x2F;Zj+qX&#x2F;6hQFS&#x2F;9S4zMf7M2oVkG&#x2F;&#x2F;NExIghsx3oAMPGvNBaROBXx+FeXk6k6FQeA8QEZARlC50ougDhJISKFCQIsw8w8wosRhkBC4qK7f&#x2F;FRUUFjQ8VlgWFhcVDLuFRUUFjT+oWFxVMQU1FMy4xMDBVVVVV&#x2F;&#x2F;NExFQRwJkwAHpMTFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV</span><br></pre></td></tr></table></figure><p>今回はしませんが繰り返し利用するのであればスクリプト組んでおくと便利ですね。</p><p>そしてbase64をmp3に変換します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil <span class="literal">-decode</span> base64.txt future.mp3</span><br></pre></td></tr></table></figure><p>テキストから生成した音声はこちらになります。</p><p><br><br></p><audio controls>  <source src="/images/20210312/future.mp3"></audio><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>慣れないツールを利用したせいかところどころ躓きましたが無事テキストから音声を生成することができました。<br>難しい設定も不要でお手軽に自然な音声が生成できるのは素晴らしいですね。音声を生成する時間も早いと感じました。Webページにデモもありどんなものか試せる点も良いですね。</p><p>高音域まで聞こえるスピーカーで聞くと若干ノイズが気になりますが、電話を通じた音声に利用したりするには十分かと思います。</p><p>公式によるユースケースは<a href="https://cloud.google.com/text-to-speech?hl=ja#section-6">こちら</a>を参照</p><p>今回作成したプロジェクトを削除して終わりです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGの村瀬です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20200218/&quot;&gt;昨年&lt;/a&gt;に続き</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="gcp" scheme="https://future-architect.github.io/tags/gcp/"/>
    
    <category term="TextToSpeech" scheme="https://future-architect.github.io/tags/TextToSpeech/"/>
    
  </entry>
  
  <entry>
    <title>PythonでCloud Operationsの機能を使ってみる</title>
    <link href="https://future-architect.github.io/articles/20210311/"/>
    <id>https://future-architect.github.io/articles/20210311/</id>
    <published>2021-03-10T15:00:00.000Z</published>
    <updated>2021-03-11T02:25:40.482Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210307/">GCP連載</a>の第3回目はCloud Operationsの機能を試してみます。DebuggerとProfilerを試してみます。本当は仕事で使っているGoでやってみようと思ったのですが、Debuggerのドキュメントをみたら、現時点でGoはまだ実験的サポートで、Cloud Runは非対応、Goのバージョンも1.9以下という状況でしたので、サポートが手厚いPythonで試しました。</p><h1 id="gcloudコマンドの設定"><a href="#gcloudコマンドの設定" class="headerlink" title="gcloudコマンドの設定"></a>gcloudコマンドの設定</h1><p>まずGCPの環境で、gcloudコマンドを入れます。M1 macには入れていなかったので入れてみたのですが、<a href="https://mager.co/posts/2021-01-21-gcloud-mac-m1/">こちら</a>に従ってやりました。普通のインストールでは途中でエラーになり、この紹介記事と同じく、最後にinstall.shを自分で叩く必要がありました。</p><p>プロジェクトIDは自分で入力する名前に何か数値が後ろについたようなやつです。プロジェクト一覧に出てくるserverless-12345のようなものがIDです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初期化とプロジェクトの選択</span></span><br><span class="line">$ gcloud auth login</span><br><span class="line">$ gcloud config <span class="built_in">set</span> project [プロジェクトID]</span><br></pre></td></tr></table></figure><h1 id="プロジェクトを作る"><a href="#プロジェクトを作る" class="headerlink" title="プロジェクトを作る"></a>プロジェクトを作る</h1><p>Cloud Runで試しで動かすプロジェクトを作ってみます。Poetryを使ってFastAPIなプロジェクトを作ってみましょう。作ったアプリケーションはCloud Runで実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一度だけやるPoetryのインストール</span></span><br><span class="line">$ python -m pip install --user poetry</span><br><span class="line"><span class="comment"># .venvはIDEが探しやすいようにプロジェクトローカルに作って欲しい</span></span><br><span class="line">$ poetry config virtualenvs.in-project <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># プロジェクトを作る(python-cloud-debugがプロジェクト名)</span></span><br><span class="line">$ poetry new python-cloud-debug</span><br><span class="line">$ <span class="built_in">cd</span> python-cloud-debug</span><br></pre></td></tr></table></figure><h2 id="開発環境の設定"><a href="#開発環境の設定" class="headerlink" title="開発環境の設定"></a>開発環境の設定</h2><p>まず、ライブラリを追加します。なお、uvicornですが、最近になって、uvloopとhttptools、websocketといった依存ライブラリは明示的にインストールしないと実行時にエラーになるように変わったみたいです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry add fastapi uvicorn uvloop httptools</span><br></pre></td></tr></table></figure><p>ここで.venvフォルダができ、ライブラリ類はそこにインストールされます。処理系がそこをみてくれるように設定すれば、コード補完とかが効きます。PyCharmであれば設定で検索ウインドウにvenvとタイプするとインタプリタ選択がでるので、追加してプロジェクトフォルダの.venv以下を設定します。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-05_21.29.31.png"></p><p>VSCodeは特になにもしなくてもよさそうです。開くだけで.venvフォルダを認識してオープンしてくれました。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-05_21.45.41.png"></p><h2 id="アプリケーションを作ってみる"><a href="#アプリケーションを作ってみる" class="headerlink" title="アプリケーションを作ってみる"></a>アプリケーションを作ってみる</h2><p>FastAPIのサンプルを持ってきました。</p><figure class="highlight py"><figcaption><span>python_cloud_debug/main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;hello&quot;</span>: <span class="string">&quot;world&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: Optional[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>次のように実行するとローカルの８０００番ポートで起動します。ブラウザでlocalhost:8000にアクセスしたらJSONが表示ができることを確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry run uvicorn python_cloud_debug.main:app --reload</span><br></pre></td></tr></table></figure><h2 id="コンテナを作ってpushする"><a href="#コンテナを作ってpushする" class="headerlink" title="コンテナを作ってpushする"></a>コンテナを作ってpushする</h2><p>Dockerfileは以下の通りです。ちょびっと工夫したのは以下の2点</p><ul><li>実行イメージでpip installするとイメージサイズが50MBぐらい違いますし、ネイティブコンパイルが必要なパッケージだと実行イメージにコンパイラを入れないといけないので、site-packagesをコピーする手法を選択</li><li>Cloud Runの作法にはPORT環境変数でポートを変えよ、というものがあります。それをsh -cで実現しましたが、今度はCtrl+Cでシャットダウンが効かなかったので、execをつけたところうまくいきました（@moriyoshit さんに教えてもらいました）。</li></ul><p>あとは、Python 3.7じゃないとうまくいかなかったので3.7にしています。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-buster as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install poetry</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> pyproject.toml poetry.lock /opt/app/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> poetry <span class="built_in">export</span> -f requirements.txt &gt; requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim-buster as runner</span><br><span class="line"><span class="keyword">ENV</span> PORT=<span class="number">8000</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/lib/python3.7/site-packages /usr/<span class="built_in">local</span>/lib/python3.7/site-packages</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/bin/uvicorn /usr/<span class="built_in">local</span>/bin/uvicorn</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> python_cloud_debug /opt/app/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED=TRUE</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;exec /usr/local/bin/uvicorn --host 0.0.0.0 --port <span class="variable">$PORT</span> main:app&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>ローカルでビルドしてうまく動くことを確認したらpushします。リポジトリに入れてクラウドビルドをする方法も最近は使えます。とりあえず手元で動かしてプッシュしてみます。M1 macの場合は–platform linux/amd64が必要です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ビルド</span></span><br><span class="line">$ docker build --platform linux/amd64 -t gcr.io/[プロジェクトID]/[プロジェクト名]:latest .</span><br><span class="line"><span class="comment"># ローカルで実行</span></span><br><span class="line">$ docker run --rm -it -p 8000:8000 gcr.io/[プロジェクトID]/[プロジェクト名]:latest</span><br><span class="line"><span class="comment"># push</span></span><br><span class="line">$ docker push gcr.io/[プロジェクトID]/[プロジェクト名]:latest</span><br></pre></td></tr></table></figure><p>これを使ってCloud Runに登録して実行してみても良いでしょう。アプリケーション名を入れて、このpushしたイメージ名を選択して外部公開してあげれば簡単に起動できます。それ以外にはリポジトリと連携してCloud Buildする方法も選べます。デバッガーではソースコードを別にpushしないといけないのでそっちの方がいいかも？</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-06_9.38.35.png"></p><h1 id="デバッガーを使ってみる"><a href="#デバッガーを使ってみる" class="headerlink" title="デバッガーを使ってみる"></a>デバッガーを使ってみる</h1><p>それでは本題のGCPのAPIを使ってみます。必要なライブラリを足しつつ、先程のコードの<code>app = FastAPI()</code>の前に次の内容を入れます。ローカルでは外部依存なく気軽にテストしたいので、poetryの依存に入れず、実行イメージの中でのみ追加して、LOCAL=trueという環境変数があればロードしないようにします。</p><p>pip3の行を次のように書き換えます。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install poetry google-python-cloud-debugger</span></span><br></pre></td></tr></table></figure><p>アプリへの追加はこれだけです。</p><figure class="highlight py"><figcaption><span>python-cloud-debug/main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;LOCAL&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> googleclouddebugger</span><br><span class="line">        googleclouddebugger.enable(breakpoint_enable_canary=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> (ValueError, NotImplementedError) <span class="keyword">as</span> exc:</span><br><span class="line">        print(exc)</span><br></pre></td></tr></table></figure><p>これをビルドしてCloud Runを実行してみたらDebuggerの画面を開きます。まず開くと、ソースコードをアップロード白、と出てくるのでpython_cloud_debugフォルダを選択してアップしました。クラウドビルドだとこの手間なくできるみたいですね。</p><p>スナップショットを設定すると、その行が実行されたときにローカル変数やコールスタックが表示されます。またログポイントでログ出力を挟み込むこともできます。実行環境にそのまま差し込めるのは便利ですね。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-06_0.24.24.png"></p><h1 id="プロファイラを使ってみる"><a href="#プロファイラを使ってみる" class="headerlink" title="プロファイラを使ってみる"></a>プロファイラを使ってみる</h1><p>せっかくなのでプロファイラも使ってみます。こちらはPythonであっても、Cloud Runはまだサポートされていません。ドキュメントにはグーグルのサービスではCompute Engine、GKE、GAEのみが対象となっています。ただ、自分でクレデンシャルを設定したらGCP外からも使えるとは書かれていて、<a href="https://cloud.google.com/profiler/docs/profiling-external">この手順</a>を試して成功したのですが、やっていることはプロファイラのエージェントのロールを付与しているだけなので、Cloud Run実行のサービスアカウントにプロファイラエージェントのロールをつければいけます。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-06_12.51.21.png"></p><p>先程のDockerfileにプロファイラのライブラリのインストールも追加します。また、先ほど作ったクレデンシャルのファイルも登録して、そのファイルのパスを環境変数に設定します。本当は環境変数でファイルの内容を渡して、Pythonコードでそれをまずファイルに落としてあげる、環境変数はCloud Runの設定に入れてDockerイメージに入れない、みたいなことをやった方がセキュアな気がしますが、手取り早くファイルを足してしまいます。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install poetry google-python-cloud-debugger google-cloud-profiler</span></span><br></pre></td></tr></table></figure><p>デバッガーの設定のところでプロファイラを開始する関数の呼び出しを追加します。</p><figure class="highlight py"><figcaption><span>python-cloud-debug/main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;LOCAL&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> googleclouddebugger</span><br><span class="line">        <span class="keyword">import</span> googlecloudprofiler</span><br><span class="line">        googleclouddebugger.enable(breakpoint_enable_canary=<span class="literal">True</span>)</span><br><span class="line">        googlecloudprofiler.start(</span><br><span class="line">            service=<span class="string">&#x27;python-cloud-debug&#x27;</span>,</span><br><span class="line">            service_version=<span class="string">&#x27;1.0.1&#x27;</span>,</span><br><span class="line">            <span class="comment"># 0-error, 1-warning, 2-info, 3-debug</span></span><br><span class="line">            verbose=<span class="number">3</span>,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> (ValueError, NotImplementedError) <span class="keyword">as</span> exc:</span><br><span class="line">        print(exc)</span><br></pre></td></tr></table></figure><p>プロファイル画面をみてみたら、フレームグラフが出ました。ちょっとスリープを挟んでみても、自分で書いたコードのフレームが出てこないのですが、きっとCPUヘビーなコードが出てきたらすぐにわかるんじゃないですかね。すくなくとも、time.sleep()でも、asyncio.sleep()でも結果には出てきませんでした。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-06_10.41.02.png"></p><p>CPU時間のグラフはこんな感じです。きっとプログラムがヘビーになったら活躍してくれるはず。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-06_10.26.38.png"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>StackdriverあらためCloud OperationsのDebuggerとProfilerを試してみました。Goサポートがまだだったり、Cloud Run対応がまだだったりとかはありますが、OpenCensus/OpenTelemetryなみに頑張らなくてもちょっとmainのところにコードを足すだけで本番環境の中身を覗いたりプロファイルが取れるのは面白いですね。そのうち、ローカルのデバッグよりもリモートの方が簡単、みたいになってくれそうな気がしました。</p><p>明日は村瀬さんのText To Speechです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載&lt;/a&gt;の第3回目はCloud Operationsの機能を試してみます。DebuggerとProfilerを試してみます。本当は仕事で使っているGoでやってみようと思ったのですが、Debuggerのドキ</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Monitoring" scheme="https://future-architect.github.io/tags/Monitoring/"/>
    
    <category term="OpenCensus" scheme="https://future-architect.github.io/tags/OpenCensus/"/>
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="CloudOperations" scheme="https://future-architect.github.io/tags/CloudOperations/"/>
    
  </entry>
  
  <entry>
    <title>本番データが急に欲しくなったアナタに贈る、CloudSQLのサーバレスエクスポートを試してみた</title>
    <link href="https://future-architect.github.io/articles/20210310/"/>
    <id>https://future-architect.github.io/articles/20210310/</id>
    <published>2021-03-09T15:00:00.000Z</published>
    <updated>2021-03-10T07:41:59.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG 市川です。<a href="/articles/20210307/">GCP連載2021</a>の2日目です。</p><p>本番運用しているデータをサクッと引っこ抜いてCSV錬金したり、DWHなどに連携していないデータを元にDataStudioでコネコネしたり・・・（負荷を気にせず）気軽にやりたいなぁ・・・というアナタに贈る記事になります。</p><h2 id="おことわり"><a href="#おことわり" class="headerlink" title="おことわり"></a>おことわり</h2><ul><li>実際のシステムにおける本番データは正しく取り扱いましょう。運用ポリシー・セキュリティポリシーに従い、機密情報などを気軽に引っこ抜いてはいけません</li></ul><h2 id="サーバレスエクスポートとは？"><a href="#サーバレスエクスポートとは？" class="headerlink" title="サーバレスエクスポートとは？"></a>サーバレスエクスポートとは？</h2><img src="/images/20210310/serverless_export.png"><blockquote><p><a href="https://cloud.google.com/blog/products/databases/introducing-cloud-sql-serverless-exports">https://cloud.google.com/blog/products/databases/introducing-cloud-sql-serverless-exports</a> より引用</p></blockquote><p>データベースからデータをエクスポートすることは運用上起こりえるタスクではありますが、その実、エクスポートの仕方を誤ると本番のワークロードに影響を及ぼす可能性があります。</p><p>しかし、データのすべてはデータベースに入っていて、欲しい、今すぐ分析したい・・・という時もあると思います。</p><p>我々エンジニアは可能な限り手間は省きたい生き物です。</p><ul><li>別途データベースを建てたくない</li><li>わざわざGCEやローカルPCからSQLクエリ打ちたくない</li><li>データをGCSに持って行くのも面倒</li><li>本番ワークロード影響はあってはならない</li></ul><p>などなどのワガママに対応したのが、このサーバレスエクスポートです。CloudSQLではデータベースからのエクスポートは対応していましたが、2020年9月にサーバレスエクスポートに対応しました！</p><p>サーバレスエクスポートでは<strong>エクスポート専用の一時的なインスタンス</strong>を建て、そこからデータを抜くことで本番ワークロードに一切の影響を与えず、GCSにファイルをアップロードしてくれる優れものです。その上、SQL形式とCSV形式に対応し、カスタムSQLで狙ったデータだけ抜くこともできるかゆいところに手が届くサービスになっています。</p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>今回のケースでは特に準備することはありません。グローバルIPを持ったCloudSQLを建てたのみです。あとはエクスポート先のGCSバケットさえあればよいのです。</p><p>データベースはMySQLとPostgreSQLでサポートしています。（今回はPostgreSQLで試しました）</p><p>今回、データはPostgreSQLの<a href="https://sp.postgresqltutorial.com/wp-content/uploads/2019/05/dvdrental.zip">サンプルデータベース</a>を利用します。CloudShellなどで接続し、pg_restoreを使ってサクッとインポートしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DB作成</span></span><br><span class="line">$ gcloud sql connect serverless-demo-db --user=postgres --quiet</span><br><span class="line">postgres=&gt; CREATE DATABASE dvdrental;</span><br><span class="line">postgres=&gt; \q</span><br><span class="line"></span><br><span class="line"><span class="comment"># サンプルデータベースのダウンロード&amp;インポート</span></span><br><span class="line">$ wget https://sp.postgresqltutorial.com/wp-content/uploads/2019/05/dvdrental.zip</span><br><span class="line">$ unzip dvdrental.zip</span><br><span class="line">$ pg_restore -h 34.123.239.237 -U postgres -d dvdrental ./dvdrental.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># データの確認</span></span><br><span class="line">$ gcloud sql connect serverless-demo-db --user=postgres --quiet --database=dvdrental</span><br><span class="line">dvdrental=&gt; \dt</span><br><span class="line">             List of relations</span><br><span class="line"> Schema |     Name      | Type  |  Owner</span><br><span class="line">--------+---------------+-------+----------</span><br><span class="line"> public | actor         | table | postgres</span><br><span class="line"> public | address       | table | postgres</span><br><span class="line"> public | category      | table | postgres</span><br><span class="line"> public | city          | table | postgres</span><br><span class="line"> public | country       | table | postgres</span><br><span class="line"> public | customer      | table | postgres</span><br><span class="line"> public | film          | table | postgres</span><br><span class="line"> public | film_actor    | table | postgres</span><br><span class="line"> public | film_category | table | postgres</span><br><span class="line"> public | inventory     | table | postgres</span><br><span class="line"> public | language      | table | postgres</span><br><span class="line"> public | payment       | table | postgres</span><br><span class="line"> public | rental        | table | postgres</span><br><span class="line"> public | staff         | table | postgres</span><br><span class="line"> public | store         | table | postgres</span><br><span class="line">(15 rows)</span><br></pre></td></tr></table></figure><h2 id="クエリの作成"><a href="#クエリの作成" class="headerlink" title="クエリの作成"></a>クエリの作成</h2><p>さて、では2007年03月の担当者別売上げ（っぽい）クエリを作ってみます。</p><p>今回は分析用にこのデータがすごく欲しいと仮定します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> staff_detail <span class="keyword">as</span> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    staff.staff_id,</span><br><span class="line">    staff.first_name || <span class="string">&#x27; &#x27;</span> || staff.last_name <span class="keyword">as</span> staff_name,</span><br><span class="line">    store.store_id</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    staff</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    <span class="keyword">store</span></span><br><span class="line">  <span class="keyword">ON</span></span><br><span class="line">    store.store_id = staff.store_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  staff_detail.staff_id,</span><br><span class="line">  staff_detail.staff_name,</span><br><span class="line">  staff_detail.store_id,</span><br><span class="line">  payment.payment_date,</span><br><span class="line">  payment.amount,</span><br><span class="line">  payment.customer_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  payment</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">  staff_detail</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">  payment.staff_id = staff_detail.staff_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="string">&#x27;2007/03/01&#x27;</span>::<span class="built_in">timestamp</span> &lt;= payment_date <span class="keyword">and</span> payment_date &lt; <span class="string">&#x27;2007/03/31&#x27;</span>::<span class="built_in">timestamp</span>;</span><br></pre></td></tr></table></figure><h2 id="データのサーバレスエクスポート実践！"><a href="#データのサーバレスエクスポート実践！" class="headerlink" title="データのサーバレスエクスポート実践！"></a>データのサーバレスエクスポート実践！</h2><p>CLIからももちろん可能ですが、今回は画面からエクスポートを行ってみます。<br><img src="/images/20210310/2021-03-09_13h46_23.png"  style="border:solid 1px #000000"></p><p>SQLクエリ部分に先ほど記載したSQLをおもむろに貼り付けます。</p><img src="/images/20210310/2021-03-09_13h49_22.png"  style="border:solid 1px #000000"><p><strong>一時インスタンスへのエクスポートをオフロードする</strong>にチェックを入れます。</p><img src="/images/20210310/2021-03-09_13h49_40.png"  style="border:solid 1px #000000"><p>エクスポートが開始されると概要画面に戻りぐるぐる回ります。</p><img src="/images/20210310/2021-03-09_13h50_11.png"  style="border:solid 1px #000000"><p>が、WITH句には対応していませんでした・・・<br><img src="/images/20210310/2021-03-09_13h57_31.png"></p><p>気を取り直してサブクエリ版のSQLを作成します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    staff_detail.staff_id,</span><br><span class="line">    staff_detail.staff_name,</span><br><span class="line">    staff_detail.store_id,</span><br><span class="line">    payment.payment_date,</span><br><span class="line">    payment.amount,</span><br><span class="line">    payment.customer_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    payment</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        staff.staff_id,</span><br><span class="line">        staff.first_name || <span class="string">&#x27; &#x27;</span> || staff.last_name <span class="keyword">as</span> staff_name,</span><br><span class="line">        store.store_id</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        staff</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">        <span class="keyword">store</span></span><br><span class="line">    <span class="keyword">ON</span></span><br><span class="line">        store.store_id = staff.store_id</span><br><span class="line">    ) <span class="keyword">AS</span> staff_detail</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">    payment.staff_id = staff_detail.staff_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="string">&#x27;2007/03/01&#x27;</span>::<span class="built_in">timestamp</span> &lt;= payment_date <span class="keyword">and</span> payment_date &lt; <span class="string">&#x27;2007/03/31&#x27;</span>::<span class="built_in">timestamp</span>;</span><br></pre></td></tr></table></figure><p>そして改めてエクスポートを行い、GCSを確認すると・・・</p><img src="/images/20210310/2021-03-09_14h12_59.png"  style="border:solid 1px #000000"><p>エクスポートされていますね！</p><p>サーバレスエクスポートでは一時インスタンスを建てるため、最低でも5分程度時間を要します。後はデータ量によってエクスポートまでの時間がかかります。今回はきっかり5分程度で終わりました。</p><p>この間、本番サーバではSQLの呼び出しなどは行われず、一切の影響なしにデータが抜けました！</p><p>なんてお手軽！</p><p>作成されたCSVはヘッダなしのカンマ区切りで作成されます。</p><p><img src="/images/20210310/2021-03-09_15h28_29.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> -i Cloud_SQL_Export_2021-03-09-14-07-39.csv</span><br><span class="line">Cloud_SQL_Export_2021-03-09-14-07-39.csv: text/plain; charset=us-ascii</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>非常に簡単に本番影響を出さないデータエクスポートができました！</p><p>もちろん無料というわけにはいきませんが、ちょっとしたデータ集計や検証の為に利用価値が高いのではないでしょうか。</p><p>本番データを見たいけど、影響が。。。という方、是非試してみてください。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.google.com/blog/ja/products/databases/introducing-cloud-sql-serverless-exports">Google Cloud blog Japan</a><br><a href="https://cloud.google.com/sql/docs/mysql/import-export/exporting?hl=ja">Google公式ドキュメント</a></p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200207/index.html" data-iframely-url="//cdn.iframe.ly/EECbx6H?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20190820/index.html" data-iframely-url="//cdn.iframe.ly/pdma83U?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG 市川です。&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載2021&lt;/a&gt;の2日目</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="CloudSQL" scheme="https://future-architect.github.io/tags/CloudSQL/"/>
    
  </entry>
  
  <entry>
    <title>PubSubのメッセージスキーマを試してみる</title>
    <link href="https://future-architect.github.io/articles/20210309/"/>
    <id>https://future-architect.github.io/articles/20210309/</id>
    <published>2021-03-08T15:00:00.000Z</published>
    <updated>2021-03-09T01:49:27.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。</p><p><a href="/articles/20210307/">GCP連載2021</a>の1日目です。2020年のGCP連載でも<a href="https://future-architect.github.io/articles/20200205/">Cloud Loggingネタでトップバッター</a>、2021年も先陣を切ることができて光栄です。</p><p>本記事では2021年3月に発表されたCloud PubSubのメッセージスキーマを試します。</p><ul><li><a href="https://cloud.google.com/pubsub/docs/schemas">Creating and managing schemas</a></li></ul><p>なお、2021/03/07時点では<strong>プレビュー</strong>であるのでご注意ください。今後フィードバックにより挙動なり設定方法が変更される可能性があります。</p><h1 id="Cloud-PubSubとは"><a href="#Cloud-PubSubとは" class="headerlink" title="Cloud PubSubとは"></a>Cloud PubSubとは</h1><p><img src="/images/20210309/cps_integration.png"></p><p>公式ドキュメントから引用します。</p><blockquote><p>Pub/Sub は、イベントを処理するサービスとイベントを生成するサービスを切り離す非同期メッセージング サービスです。メッセージング指向のミドルウェア（ストリーミング分析パイプラインにイベントの取り込みと配信を行う）として、Pub/Sub を使用できます。<br><a href="https://cloud.google.com/pubsub/docs/overview">https://cloud.google.com/pubsub/docs/overview</a></p></blockquote><p>メッセージングということで、当然1:N（ファンアウト）、N:1（ファンイン）、N:Nなどの通信が可能です。書き込み側をPublisher、読み込み側をSubscriberと呼びます。あとはAt-Least-Onceな配信（つまりSubscriber側が重複したメッセージを受け取ってしまうことがある）であるといったことが重要事項でしょうか。</p><p>この技術ブログでは、<a href="https://future-architect.github.io/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a>や、<a href="https://future-architect.github.io/articles/20191128/">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる</a> といった関連記事があります。</p><h1 id="PubSubのメッセージスキーマ機能とは"><a href="#PubSubのメッセージスキーマ機能とは" class="headerlink" title="PubSubのメッセージスキーマ機能とは"></a>PubSubのメッセージスキーマ機能とは</h1><p>PubSubのあるトピックに対してスキーマを紐付け、Publishする時に検証を行うことができるようになりました。（待望の機能ですね！）</p><p>今のところは、以下のスキーマが利用できるとのこと。</p><ol><li><a href="https://avro.apache.org/docs/current/spec.html#schemas">Apache Avro</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/overview">Protocol Buffer</a></li></ol><p>個人的には、JSON Schemaが欲しかったところですが、エンコーディングをJSONにすれば、JSONの検証も可能です。今後の拡張に期待しましょう。</p><p>Apache AvroはConfluent Schema Registryを意識しているからでしょうか。Kakfaユーザも乗り換えがしやすいかもしれませんね。Protocol Bufferでの検証が可能ということですが、PubSubはgRPCインターフェースでのPublishが可能です。つまり指定されたProtocol Bufferのスキーマで検証しつつ、gRPCでのやり取りもできそうです。凄い。</p><h1 id="スキーマで嬉しいこと"><a href="#スキーマで嬉しいこと" class="headerlink" title="スキーマで嬉しいこと"></a>スキーマで嬉しいこと</h1><p>従来のPubSubは（AWS Kinesis DataStreamsなどでも）以下のようにどんなメッセージでもバイナリ形式で登録可能でした。</p><figure class="highlight go"><figcaption><span>pubsubのサンプル.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">topic, err := pubsubClient.CreateTopic(context.Background(), <span class="string">&quot;&lt;トピック名&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">res := topic.Publish(ctx, &amp;pubsub.Message&#123;Data: []<span class="keyword">byte</span>(<span class="string">&quot;&lt;任意のバイナリ&gt;&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure><p>なんでもとりあえずPublishできるので楽なのですが、Subscribe側では困ったことになりがちです。<br>例えば、Subscribe側でスキーマ付きのデータストア（BigQueryやCloudSQLなど）に永続化する場合に、登録が失敗するようなレイアウト違反のデータを扱う必要があります。具体的には、Dead Letter Queue（DLQ）に登録したり、エラーログを出してシステムリカバリ運用に乗せたりを検討する必要がありました。</p><p><img src="/images/20210309/pubsub_schema.png"></p><p>これがHTTPのAPIであれば、HTTPレスポンスでエラーメッセージを応答することで、クライアント（今回だとPublisher）側に通知することができましたが、PubSubを経由すると、Enterprise Integration Patternでいう<a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/RequestReply.html">Request-Reply</a>を実装するのであれば別ですが、これはこれで両者がアプリケーションレベルで密結合になりますし、実装もそう簡単ではありません。</p><p>今回のメッセージスキーマ機能を用いると、Publisher側が明らかに契約違反のメッセージを連携した場合に早期にNGを返すことができるので、今後はこの手の考慮事項を減らすことできます。嬉しいですね。</p><h1 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h1><p>GCPプロジェクトは<a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects">こちら</a>の手順に従い作成します。また、gcloudコマンドも<a href="https://cloud.google.com/sdk/docs/install">こちら</a>に従いインストールしておきます。</p><p>今回はAvroスキーマを利用します。コードは<a href="https://github.com/ma91n/pubsubschema">こちら</a>に上げています。</p><h2 id="①スキーマ付きトピックの作成"><a href="#①スキーマ付きトピックの作成" class="headerlink" title="①スキーマ付きトピックの作成"></a>①スキーマ付きトピックの作成</h2><ol><li><a href="https://console.cloud.google.com/iam-admin/serviceaccounts">IAMと管理</a>からPubSubの管理者権限を付与したサービスアカウントを作成し、鍵（JSONファイル）をダウロードします</li><li><a href="https://cloud.google.com/docs/authentication/getting-started">ここ</a>の手順に従い、取得した鍵のパスに環境変数を通します<ul><li><code>export GOOGLE_APPLICATION_CREDENTIALS=&lt;ダウンロードパス&gt;.json</code></li></ul></li><li>gcloudコマンドからトピックと、スキーマを作成します</li></ol><figure class="highlight bash"><figcaption><span>avroスキーマ作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcloud beta pubsub schemas create avroschema1 \</span><br><span class="line">    --<span class="built_in">type</span>=AVRO \</span><br><span class="line">    --definition=&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;record&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Avro&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;StringField&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;string&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;FloatField&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;float&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BooleanField&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;boolean&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>続いてトピックを作成します。管理コンソールからだと以下のように、<strong>スキーマを使用する</strong> のチェックボックスが増えていました。</p><p><img src="/images/20210309/image.png"></p><p>今回はgcloud経由で作成します。<a href="https://cloud.google.com/pubsub/docs/admin#gcloud">こちら</a>の説明に従いオプションを追加します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;gcloud beta pubsub topics create avrotopic \</span><br><span class="line">        --message-encoding=JSON \</span><br><span class="line">        --schema=avroschema1</span><br><span class="line">Created topic [projects/&lt;YOUR PROJECT ID&gt;/topics/avrotopic].</span><br></pre></td></tr></table></figure><p>登録内容をgcloud経由で確認すると、以下の用に設定されています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># トピックの情報</span></span><br><span class="line">$ gcloud pubsub topics describe avrotopic</span><br><span class="line">name: projects/&lt;YOUR PROJECT ID&gt;/topics/avrotopic</span><br><span class="line">schemaSettings:</span><br><span class="line">  encoding: JSON</span><br><span class="line">  schema: projects/&lt;YOUR PROJECT ID&gt;/schemas/avroschema1</span><br><span class="line"></span><br><span class="line"><span class="comment"># スキーマの状態</span></span><br><span class="line">&gt;gcloud beta pubsub schemas describe avroschema1</span><br><span class="line">definition: <span class="string">&#x27;&#123;&quot;type&quot;:&quot;record&quot;,&quot;name&quot;:&quot;Avro&quot;,&quot;fields&quot;:[&#123;&quot;name&quot;:&quot;StringField&quot;,&quot;type&quot;:&quot;string&quot;&#125;,&#123;&quot;name&quot;:&quot;FloatField&quot;,&quot;type&quot;:&quot;float&quot;&#125;,&#123;&quot;name&quot;:&quot;BooleanField&quot;,&quot;type&quot;:&quot;boolean&quot;&#125;]&#125;&#x27;</span></span><br><span class="line">name: projects/&lt;YOUR PROJECT ID&gt;/schemas/avroschema1</span><br><span class="line"><span class="built_in">type</span>: AVRO</span><br></pre></td></tr></table></figure><h2 id="②Publishしてみる"><a href="#②Publishしてみる" class="headerlink" title="②Publishしてみる"></a>②Publishしてみる</h2><p>Go SDK経由でPublishしてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;cloud.google.com/go/pubsub&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">c, err := pubsub.NewClient(ctx, <span class="string">&quot;&lt;YOUR PROJECT ID&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">topic := c.Topic(<span class="string">&quot;avrotopic&quot;</span>) <span class="comment">// 今回作成したトピック名</span></span><br><span class="line"></span><br><span class="line">data := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">`&#123;&quot;StringField&quot;:&quot;hello&quot;, &quot;FloatField&quot;:123.45, &quot;BooleanField&quot;:true&#125;`</span>,</span><br><span class="line"><span class="string">`&#123;&quot;StringField&quot;:&quot;world&quot;, &quot;FloatField&quot;:0, &quot;BooleanField&quot;:false&#125;`</span>,</span><br><span class="line"><span class="string">`&#123;&quot;NGField&quot;:&quot;dummy&quot;&#125;`</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> data &#123;</span><br><span class="line">res := topic.Publish(ctx, &amp;pubsub.Message&#123;</span><br><span class="line">Data: []<span class="keyword">byte</span>(v),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> _, err := res.Get(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;success publish&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>動かしてみると、登録したAvroスキーマ違反な3番目の入力をPublishする時にエラーになります。まだ、go-sdk側にメッセージスキーマのエラーハンドリンクが組み込まれていないのか、色気がない内容ですね。</p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">success publish &#123;<span class="string">&quot;StringField&quot;</span>:<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;FloatField&quot;</span>:123.45, <span class="string">&quot;BooleanField&quot;</span>:<span class="literal">true</span>&#125;</span><br><span class="line">success publish &#123;<span class="string">&quot;StringField&quot;</span>:<span class="string">&quot;world&quot;</span>, <span class="string">&quot;FloatField&quot;</span>:0, <span class="string">&quot;BooleanField&quot;</span>:<span class="literal">false</span>&#125;</span><br><span class="line">2021/03/07 16:20:20 rpc error: code = InvalidArgument desc = Request contains an invalid argument.</span><br></pre></td></tr></table></figure><p>エラーメッセージの表示内容はさておき、メッセージスキーマによってPublisher側が良からぬメッセージを連携してしまうことは防ぐことができました。</p><h1 id="Avroスキーマの検証"><a href="#Avroスキーマの検証" class="headerlink" title="Avroスキーマの検証"></a>Avroスキーマの検証</h1><p>Avroスキーマの動作検証ですが、gcloudコマンドの<code>pubsub schemas validate-message</code>で検証することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正常なケース</span></span><br><span class="line">&gt; gcloud beta pubsub schemas validate-message \</span><br><span class="line">        --message-encoding=json \</span><br><span class="line">        --message=&#123;<span class="string">&quot;StringField&quot;</span>:<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;FloatField&quot;</span>:123.45,<span class="string">&quot;BooleanField&quot;</span>:<span class="literal">true</span>&#125; ^</span><br><span class="line">        --schema-name=avroschema1</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明らかにNGなケース</span></span><br><span class="line">&gt; gcloud beta pubsub schemas validate-message \</span><br><span class="line">        --message-encoding=json \</span><br><span class="line">        --message=&#123;<span class="string">&quot;NGField&quot;</span>:<span class="string">&quot;dummy&quot;</span>&#125; \</span><br><span class="line">        --schema-name=avroschema1</span><br><span class="line">ERROR: (gcloud.beta.pubsub.schemas.validate-message) INVALID_ARGUMENT: Request contains an invalid argument.</span><br></pre></td></tr></table></figure><p>こちらもエラーメッセージに優しさは無いので、今後の拡張に期待です。</p><p>どの程度ちゃんとスキーマを検証してくれるかもう少し細かく突っ込んでみます。<code>BooleanField</code>を文字列<code>xxx</code>を入れてみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;gcloud beta pubsub schemas validate-message \</span><br><span class="line">     --message-encoding=json \</span><br><span class="line">     --message=&#123;<span class="string">&quot;StringField&quot;</span>:<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;FloatField&quot;</span>:123.45,<span class="string">&quot;BooleanField&quot;</span>:<span class="string">&quot;xxx&quot;</span>&#125; \</span><br><span class="line">     --schema-name=avroschema1</span><br><span class="line">ERROR: (gcloud.beta.pubsub.schemas.validate-message) INVALID_ARGUMENT: Request contains an invalid argument.</span><br></pre></td></tr></table></figure><p>無事エラーになりました。同様に<code>FloatField</code>に数値以外の文字列を入れてもエラー担ってくれました。</p><p>スキーママイグレーションの前方互換性で重要そうな、スキーマに存在しないフィールド<code>extra</code>を追加してみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;gcloud beta pubsub schemas validate-message \</span><br><span class="line">        --message-encoding=json \</span><br><span class="line">        --message=&#123;<span class="string">&quot;StringField&quot;</span>:<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;FloatField&quot;</span>:123.45,<span class="string">&quot;BooleanField&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;extra&quot;</span>:<span class="string">&quot;aaa&quot;</span>&#125; \</span><br><span class="line">        --schema-name=avroschema1</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>これは実行結果が<code>&#123;&#125;</code>なので問題ないようです。</p><h2 id="エンコードにバイナリを指定する"><a href="#エンコードにバイナリを指定する" class="headerlink" title="エンコードにバイナリを指定する"></a>エンコードにバイナリを指定する</h2><p>続いて、スキーマのエンコードに<code>バイナリ</code>を指定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;gcloud beta pubsub topics create avrotopic2 \</span><br><span class="line">        --message-encoding=BINARY \</span><br><span class="line">        --schema=avroschema1</span><br><span class="line">Created topic [projects/&lt;YOUR PROJECT ID&gt;/topics/avrotopic2].</span><br></pre></td></tr></table></figure><p>GoでAvroを利用するために、<code>github.com/linkedin/goavro/v2</code> を利用します</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line"><span class="string">&quot;github.com/linkedin/goavro/v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Goのデータ構造をAvro形式に変換するコーデック</span></span><br><span class="line"><span class="keyword">var</span> codec, _ = goavro.NewCodec(<span class="string">`</span></span><br><span class="line"><span class="string">   &#123;</span></span><br><span class="line"><span class="string"> &quot;type&quot; : &quot;record&quot;,</span></span><br><span class="line"><span class="string"> &quot;name&quot; : &quot;Avro&quot;,</span></span><br><span class="line"><span class="string"> &quot;fields&quot; : [</span></span><br><span class="line"><span class="string">   &#123;&quot;name&quot; : &quot;StringField&quot;, &quot;type&quot; : &quot;string&quot;&#125;,</span></span><br><span class="line"><span class="string">   &#123;&quot;name&quot; : &quot;FloatField&quot;, &quot;type&quot; : &quot;float&quot;&#125;,</span></span><br><span class="line"><span class="string">   &#123;&quot;name&quot; : &quot;BooleanField&quot;, &quot;type&quot; : &quot;boolean&quot;&#125;</span></span><br><span class="line"><span class="string"> ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span>)</span><br></pre></td></tr></table></figure><p>これを用いて実行します。登録は <code>map[string]interface&#123;&#125;</code> を先程作成した<code>codec</code>で変換して登録します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">c, err := pubsub.NewClient(ctx, <span class="string">&quot;&lt;YOUR PROJECT ID&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">topic := c.Topic(<span class="string">&quot;avrotopic2&quot;</span>) <span class="comment">// 先程作成したトピック</span></span><br><span class="line"></span><br><span class="line">data := []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">&#123;<span class="string">&quot;StringField&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;FloatField&quot;</span>: <span class="number">123.45</span>, <span class="string">&quot;BooleanField&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;NGField&quot;</span>: <span class="string">&quot;dummy&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> data &#123;</span><br><span class="line">binary, err := codec.BinaryFromNative(<span class="literal">nil</span>, v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;codec.BinaryFromNative&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res := topic.Publish(ctx, &amp;pubsub.Message&#123;</span><br><span class="line">Data: binary,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> _, err := res.Get(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;success publish&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事項すると、1つ目の入力はOK、2つ目はクライアント側のAvro形式への変換でエラーで落ちました。クライアントサイドで落ちた方がエラーメッセージは切り分けしやすいですね。</p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">success publish map[BooleanField:<span class="literal">true</span> FloatField:123.45 StringField:hello]</span><br><span class="line">2021/03/07 16:48:41 codec.BinaryFromNativecannot encode binary record <span class="string">&quot;Avro&quot;</span> field <span class="string">&quot;StringField&quot;</span>: schema does not specify default value and no value provided</span><br></pre></td></tr></table></figure><p>念の為、不正なバイナリ値を送信してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">c, err := pubsub.NewClient(ctx, <span class="string">&quot;&lt;YOUR PROJECT ID&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res := c.Topic(<span class="string">&quot;avrotopic2&quot;</span>).Publish(ctx, &amp;pubsub.Message&#123;</span><br><span class="line">Data: []<span class="keyword">byte</span>(<span class="string">&quot;dummy payload&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> _, err := res.Get(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;success publish&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">2021/03/07 16:55:04 rpc error: code = InvalidArgument desc = Request contains an invalid argument.</span><br></pre></td></tr></table></figure><p>こちらもシンプルな例外メッセージですが、メッセージスキーマで不正なPublishを防ぐことに成功しています。</p><h1 id="スキーママイグレーションについて"><a href="#スキーママイグレーションについて" class="headerlink" title="スキーママイグレーションについて"></a>スキーママイグレーションについて</h1><p>メッセージスキーマを付与した後に、アプリケーション要件の変化に併せてスキーマもアップデートしたいものです。2021/03/07時点では、一度作成したスキーマを変更する機能も、トピックに紐づくスキーマを変更する機能も存在しないようです。このあたりの機能追加や利用者側のナレッジも蓄積できると良いですね。</p><p>また、現状はスキーマをPub/Subの設定に紐付けるような形式なようです。スキーマはPublish/Subscribeのどちらにも公開されるべきものなので、Schema Registryのマネージドサービスが待ち遠しいですね。現状はGCSにもスキーマファイルを配備するなど、一工夫の設計余地がありそうだなと思いました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Cloud Pub/SubでメッセージスキーマでPublish時のペイロードの検証ができるようになりました。今の所、AvroとProtocol Buffersで定義可能で、エンコードJSONにすれば、テキストJSONも検証できます。</p><p>スキーマファイルは今の所GCSなどの連携ができず、Pub/Sub側に直接定義するようです。</p><p>まだまだ発展途上な機能だと思いますが、不正なデータがPub/Subトピックに混入されることを防ぐことができるのは画期的だと思いますので、ぜひ利用を検討したいと思います。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="/articles/20210307/">GCP連載2021</a></li><li><a href="/articles/20200205/">GCP連載2020</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット真野です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載2021</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="PubSub" scheme="https://future-architect.github.io/tags/PubSub/"/>
    
    <category term="スキーマ" scheme="https://future-architect.github.io/tags/%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%9E/"/>
    
    <category term="Avro" scheme="https://future-architect.github.io/tags/Avro/"/>
    
  </entry>
  
  <entry>
    <title>Auth0 Rulesのユニットテストを書きたい</title>
    <link href="https://future-architect.github.io/articles/20210308/"/>
    <id>https://future-architect.github.io/articles/20210308/</id>
    <published>2021-03-07T15:00:00.000Z</published>
    <updated>2021-03-08T02:21:55.631Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> アルバイトの小林です。</p><p>案件で認証プラットフォームである<a href="https://auth0.com/jp/">Auth0</a>を利用していますが、Auth0の機能の中でもRulesと呼ばれるユーザ認証時にJavaScriptの関数を走らせる事が出来る機能は非常に強力で様々なニーズに対応することが可能になります。</p><p>その中でJavaScriptの関数で書けるRulesに対して、ユニットテストを書く事が出来れば、Ruleの質も担保出来ます。</p><p>Auth0テナントへのRulesのexport、importには<a href="https://github.com/auth0/auth0-deploy-cli">auth0-deploy-cli</a>を利用出来ますが、Ruleの記述方法が</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anyRule</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    callback(<span class="literal">null</span>,user,context)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>の様な名前付き関数の形式なのでユニットテストの実現には工夫が必要となります。</p><p>今回はその<code>工夫</code>の部分について書いていきたいと思います。</p><h1 id="Auth0について"><a href="#Auth0について" class="headerlink" title="Auth0について"></a>Auth0について</h1><p><img src="/images/20210308/image.png"></p><p>Auth0の概要については<a href="https://future-architect.github.io/articles/20200122/">Auth0 導入編</a>を、<br>Auth0 Rulesについては<a href="https://future-architect.github.io/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a>をそれぞれご参照ください。</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>検証に利用したマシンのNode.jsのバージョンは<code>v12.15.0</code>です。</p><h2 id="検証に使うRule"><a href="#検証に使うRule" class="headerlink" title="検証に使うRule"></a>検証に使うRule</h2><p>以下の二つのRuleをテストしたいことにします。</p><ul><li>IDトークンのクレームに<code>&#123;&quot;https://example.com/color&quot;: &quot;blue&quot;&#125;</code>を追加する、<code>add-claims.js</code></li></ul><figure class="highlight js"><figcaption><span>add-claims.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClaim</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;https://example.com/color&quot;</span>] = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>http://example.com/some/api</code>にGETリクエストを送信して上手く行った場合はレスポンスをIDトークンの<br><code>http://example.com/data</code>キーに入れる、<code>request-example.js</code></li><li>このRuleはリクエストのレスポンスが200以外の場合にログインエラーとする。</li></ul><figure class="highlight js"><figcaption><span>request-example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">requestExample</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios@0.19.2&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">        url: <span class="string">`http://example.com/some/api`</span>,</span><br><span class="line">        method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// リクエストのレスポンスが200以外の場合にログインエラーとする。</span></span><br><span class="line">    <span class="keyword">if</span> (response <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> e = <span class="string">&#x27;Failed to fetch data&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> UnauthorizedError(<span class="string">`<span class="subst">$&#123;e&#125;</span>: <span class="subst">$&#123;response.data&#125;</span>`</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;http://example.com/data&quot;</span>] = response.data;</span><br><span class="line"></span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details><summary>コードについての補足</summary><div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">requestExample</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br></pre></td></tr></table></figure><p>Auth0 Rulesではトップレベルのasyncは<code>許可</code>されています。</p><ul><li>参考: <a href="https://community.auth0.com/t/is-it-possible-to-use-async-await-in-rules/50235">Is it possible to use async await in rules? - Auth0 Community</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios@0.19.2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Auth0 Rulesではいくつかのライブラリが利用可能です。</p><p>利用可能なライブラリのリストはこちらに記載されています。</p><ul><li><a href="https://auth0-extensions.github.io/canirequire/">Can I require? - Search which node modules you can use in webtask.io</a></li></ul></div></details><h2 id="テスト環境"><a href="#テスト環境" class="headerlink" title="テスト環境"></a>テスト環境</h2><p>以下の様なNode.jsを用いたテスト環境を前提とします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:.</span><br><span class="line">│  add-claim.js</span><br><span class="line">│  package.json</span><br><span class="line">│  request-example.js</span><br><span class="line">│</span><br><span class="line">└─tests</span><br><span class="line">        add-claim.test.js</span><br><span class="line">        request-example.test.js</span><br></pre></td></tr></table></figure><p>それではこれらの前提を元に様々な手段について書いていきます。</p><p>記事中では引数のcallbackやスタブ化したrequireに適当なコードを書いていますが、実際にテストコードを書く際は引数のcallbackやスタブ化したaxiosをモック関数(jestでの<code>jest.fn()</code>)にすることで動作の保証範囲をより広くすることが出来ます。</p><h2 id="fsでスクリプトを文字列として取ってvmを利用して取り出す。"><a href="#fsでスクリプトを文字列として取ってvmを利用して取り出す。" class="headerlink" title="fsでスクリプトを文字列として取ってvmを利用して取り出す。"></a>fsでスクリプトを文字列として取ってvmを利用して取り出す。</h2><p>Auth0 docsに書かれている<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>方法です。</p><p>add-claim.jsのRuleを呼び出すコードを書くとこのようになります。</p><figure class="highlight js"><figcaption><span>add-claim.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script =  fs.readFileSync(<span class="string">&#x27;./add-claim.js&#x27;</span>) <span class="comment">// =&gt; func addClaim...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runCode = <span class="string">`</span></span><br><span class="line"><span class="string">  f = () =&gt; &#123;</span></span><br><span class="line"><span class="string">    return <span class="subst">$&#123;script&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  f() // =&gt; addClaimが関数として得られる。</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rule = vm.runInThisContext(</span><br><span class="line">    runCode, &#123;</span><br><span class="line">        <span class="comment">// filename for stack traces</span></span><br><span class="line">        filename: <span class="string">&#x27;add-claim.js&#x27;</span>,</span><br><span class="line">        displayErrors: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">rule(</span><br><span class="line">    user,</span><br><span class="line">    context,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;https://example.com/color&#x27;: &#x27;blue&#x27; &#125; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>テストしたいRuleのJavaScriptのソースコードを文字列として取得して、<code>vm.runInThisContext</code>を使ってサンドボックス上に<code>テスト対象のメソッドが返るコード</code>を実行します。先述の通り<code>vm.runInThisContext</code>がテスト対象である<code>addClaimメソッド</code>を返し、そのメソッドに(user,context,callback)を入れて呼び出しをしている形となります。</p><p>今回はコードを少しでも読みやすくするため、少し冗長な書き方をしていますが、コードが少し分かりにくいことを除けば比較的短いコードで記述することが可能になります。</p><h3 id="requireモックについて"><a href="#requireモックについて" class="headerlink" title="requireモックについて"></a>requireモックについて</h3><p>axiosモジュールを利用している<code>request-example.js</code>テストについて考えます。</p><p>HTTPリクエストが必要なユニットテストではクライアントライブラリをスタブにして様々なレスポンスが来た場合についてテストすることが品質向上に対して有効です。</p><p>そこで、<code>require</code>モジュールをスタブにすることで<code>axios</code>では無く、独自のメソッドを利用出来る様にします。</p><p>嬉しいことに、<code>vm</code> モジュールの仕様は外部のライブラリを利用するメソッドにおいても都合が良く、<code>context</code>は同一であっても<code>scopeは同一で無い</code>仕様があります。これにより、<code>runInThisContext内ではrequireは未定義</code>になります。</p><p>requireに何か代入してaxiosモジュールのモック化を試みましょう。</p><h4 id="・contextを新たに作成する。"><a href="#・contextを新たに作成する。" class="headerlink" title="・contextを新たに作成する。"></a>・contextを新たに作成する。</h4><p><code>runInThisContext</code>で目的のメソッドを取り出していましたが、<code>require</code>が別の機能を果たす様な<code>context</code>を別途作成して、それを利用します。</p><p>まとめると以下のコードで実現可能になります。</p><figure class="highlight js"><figcaption><span>request-example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script =  fs.readFileSync(<span class="string">&#x27;./request-example.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runCode = <span class="string">`</span></span><br><span class="line"><span class="string">  f = () =&gt; &#123;</span></span><br><span class="line"><span class="string">    return <span class="subst">$&#123;script&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  f()</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runContext = vm.createContext(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">require</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// require()が返すメソッド</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// axios()が返すレスポンス</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;axios called:&quot;</span>, ctx);</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    data: <span class="string">&quot;mock response&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rule = vm.runInContext(</span><br><span class="line">    runCode, runContext,&#123;</span><br><span class="line">        <span class="comment">// filename for stack traces</span></span><br><span class="line">        filename: <span class="string">&#x27;./request-example.js&#x27;</span>,</span><br><span class="line">        displayErrors: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rule);</span><br><span class="line"></span><br><span class="line">rule(</span><br><span class="line">    user,</span><br><span class="line">    context,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;http://example.com/data&#x27;: &#x27;mock response&#x27; &#125; &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ここまでがAuth0 Docsに記載されているユニットテストの実現方法です。</p><h2 id="rewire-を利用する方法"><a href="#rewire-を利用する方法" class="headerlink" title="rewire を利用する方法"></a>rewire を利用する方法</h2><p>他には<a href="https://www.npmjs.com/package/rewire">rewire</a>を利用すると、<code>vm</code>+<code>fs</code>よりは裏ワザ感少な目で<br>テストコードを実行出来ます。</p><p>それでは早速<code>add-claim.js</code>のメソッドを呼び出すコードを書いていきます。</p><figure class="highlight js"><figcaption><span>add-claim.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rewire = <span class="built_in">require</span>(<span class="string">&#x27;rewire&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のスクリプトを取得</span></span><br><span class="line"><span class="keyword">const</span> script = rewire(<span class="string">&#x27;./../add-claim.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のメソッド名を指定してメソッドを取得</span></span><br><span class="line"><span class="keyword">const</span> rule = script.__get__(<span class="string">&#x27;addClaim&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> callback = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">rule(user,context,callback);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;https://example.com/color&#x27;: &#x27;blue&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>何をやっているかは圧倒的に分かりやすいと思います。</p><p>続いて<code>request-example.test.js</code>の呼び出しを進めていくのですが、<code>rewire</code>はモック機能を持つので、<br>先程の<code>vm</code>+<code>fs</code>の組み合わせの時と同様に<code>require</code>をモックすることで、<code>axios</code>をモックします。</p><figure class="highlight js"><figcaption><span>request-example.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rewire = <span class="built_in">require</span>(<span class="string">&#x27;rewire&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のスクリプトを取得</span></span><br><span class="line"><span class="keyword">const</span> script = rewire(<span class="string">&#x27;./../request-example.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">script.__set__(<span class="string">&#x27;require&#x27;</span>, <span class="function">()  =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;axios called&#x27;</span>,ctx);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            data: <span class="string">&quot;mock response&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のメソッド名を指定してメソッドを取得</span></span><br><span class="line"><span class="keyword">const</span> rule = script.__get__(<span class="string">&#x27;requestExample&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> callback = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> rule(user,context,callback).then(</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;http://example.com/data&#x27;: &#x27;mock response&#x27; &#125; &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>相変わらず<code>require</code>のモックは泥臭いですが、ある程度は見やすくなったかと思います。</p><h1 id="その他調査したもの"><a href="#その他調査したもの" class="headerlink" title="その他調査したもの"></a>その他調査したもの</h1><h2 id="auth0-test-harness"><a href="#auth0-test-harness" class="headerlink" title="auth0-test-harness"></a>auth0-test-harness</h2><p><a href="https://github.com/tawawa/auth0-rules-testharness">auth0-rules-testharness</a>を用いてwebtask上でRuleを実行させることが<strong>出来てた様です。</strong></p><details><summary>webtaskとは</summary><div>Auth0 Inc.が持つ`Node.jsをweb上で実行できるサービス`です。HTTPエンドポイントが作成されるため、コードを書くだけでサーバを動かす事が可能でした。<p>webtaskはAuth0 Rulesの実行環境としても使われており、webtaskの作成するサンドボックス上でRuleが実行されます。</p></div></details><p>私も早速試してみようと思ったのですが、publicなwebtaskのサービスが終了している様子<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>のため、検証を断念したいと思います。</p><h2 id="auth0-local-test-harness"><a href="#auth0-local-test-harness" class="headerlink" title="auth0-local-test-harness"></a>auth0-local-test-harness</h2><p><a href="https://github.com/auth0/auth0-rules-local-testharness">auth0-rules-local-testharness</a>は<code>auth0-rules-testharnessのwebtaskを使う所をlocalにした</code>物です。</p><p>コードをよく見ると、<code>fs</code>+<code>vm</code>でサンドボックス上で実行している物に<a href="https://github.com/auth0/auth0-authz-rules-api">auth0-authz-rules-api</a>が定義しているcontextを流し込んでいる様に見えます。</p><p>手元のマシンがNode.js v12.15で、Auth0 Rulesで使われるNode.jsのバージョンも執筆当時12.20.1<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>ですが、手元でのnpm installが失敗するのと、npmパッケージが2年前から更新されていないことを考慮して断念します。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回は以下の4つの方法についてテスト方法の調査を行いました。</p><ul><li>Auth0 Docsに載っている方法</li><li>rewireを利用した方法</li><li>auth0-test-harnessを利用した方法</li><li>auth0-local-test-harnessを利用</li></ul><p>上二つが現実的な実装案になると考えていますが、<br>Auth0 Docsに載っている方法は<code>fs</code>と<code>vm</code>のシンプルな構成で利用可能な代わりに、コードが少し類雑、<br>rewireを利用した方法はシンプルに書けるが別途パッケージのインストールが必要と一長一短の様に見えます。</p><p>また、今回の調査においてはrequireのスタブ化が出来ても、ほぼ無理やり感は否めません。</p><p>一つのRuleが利用するモジュールが2つ以上の場合に置いて、与えられた引数から何を返すか場合分けで記述する必要があり、少し複雑です。</p><p>この辺りは今後の課題として、引き続き調査出来ればと思います。</p><h1 id="Auth0の新機能-Actionsについて"><a href="#Auth0の新機能-Actionsについて" class="headerlink" title="Auth0の新機能 Actionsについて"></a>Auth0の新機能 Actionsについて</h1><p>執筆当時(2021/03/03)はBETA版機能ですが、認証認可を自由自在にカスタマイズする手段として、<strong>Rules</strong>,<strong>Hook</strong> に加えて<strong>Actions</strong>が存在します。</p><p><strong>Actions</strong>はRulesと同様ログイン時に何らかのスクリプトを走らせることが出来る機能です。</p><p>沢山の追加機能があるのですが、一部抜粋すると、</p><ul><li>バージョン管理の実装</li><li>コードエディタの進化(コード補完、クイックヒント機能の搭載)</li><li>任意のnpmパッケージが利用可能</li><li><strong>スクリプトの記述方法がRulesと異なる</strong></li></ul><p>です。 </p><p>詳しくはAuth0の公式ブログ: <a href="https://auth0.com/blog/introducing-auth0-actions/">Introducing Auth0 Actions</a> をご参照ください。</p><p>この記事で特筆すべき点は<strong>スクリプトの記述方法がRulesと異なる</strong>点です。</p><p>Actionは以下の形式で表記されています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;PostLoginAction&#125;</span> </span>*/</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Rulesとは異なり、Actionは<strong>module.exportsが記載されています</strong>。</p><p>つまり、<strong>rewireやfsを使わずともテスト対象のメソッドのインポートが出来ます</strong>。</p><p>インポート先でのrequireは、<a href="https://www.npmjs.com/package/proxyquire">proxyquire</a>などを利用することでスタブ化が出来るため、これらを利用することでActionsの単体テストが実装可能になると考えられます。</p><p>まだBeta版であり、Auth0 Deploy CLIのSupported Featuresには記載されていませんが、Rulesよりも幅広い機能を持ち、改善されている点も多々あるため、今後はRulesの代わりにActionsの利用を視野に入れると良いと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIG: Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。DXユニット: TIGの中にありデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://auth0.com/docs/best-practices/rules-testing-best-practices">Rules Testing Best Practices</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://community.auth0.com/t/future-of-rules-without-webtask-io/48554/2">Future of rules without webtask.io - Auth0 Community</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://webtask.io/">Webtask</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;"><a href="https://auth0.com/docs/product-lifecycle/deprecations-and-migrations/migrate-to-nodejs-12">Migrate to Node.js 12</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;"><a href="https://auth0-extensions.github.io/canirequire/">Can I require? - Search which node modules you can use in webtask.io</a>に記載</span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; アルバイトの小林です。&lt;/p&gt;
&lt;p&gt;案件で認証プラットフォームである&lt;a href=&quot;https://auth0.com/jp/&quot;</summary>
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
    <category term="ユニットテスト" scheme="https://future-architect.github.io/tags/%E3%83%A6%E3%83%8B%E3%83%83%E3%83%88%E3%83%86%E3%82%B9%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載2021を始めます</title>
    <link href="https://future-architect.github.io/articles/20210307/"/>
    <id>https://future-architect.github.io/articles/20210307/</id>
    <published>2021-03-06T15:00:00.000Z</published>
    <updated>2021-03-14T02:02:19.318Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤太斉</a>です。</p><p>タイトル通り、GCP連載をテーマに連載を行います。</p><h2 id="GCP連載について"><a href="#GCP連載について" class="headerlink" title="GCP連載について"></a>GCP連載について</h2><img src="/images/20210307/gcp_global.png"><p>今年は<a href="/tags/GCP%E9%80%A3%E8%BC%89/">昨年の連載</a>に引き続き2度目の開催です。</p><p>GCPはフューチャー社内でも利用を始めたり、検討を行っている案件も増えてきました。また世間でもパブリッククラウドの選択肢として、GCPを入れるという企業が昨年より増えているかと思います。</p><h1 id="連載スケジュール"><a href="#連載スケジュール" class="headerlink" title="連載スケジュール"></a>連載スケジュール</h1><p>今年も参加者が取り扱いたいテーマを取り扱っています。</p><table><thead><tr><th>日程</th><th>メンバー</th><th>内容</th></tr></thead><tbody><tr><td>3/8</td><td>伊藤太斉</td><td>Index（この記事）</td></tr><tr><td>3/9</td><td>真野隼記</td><td><a href="/articles/20210309/">PubSubのメッセージスキーマを試してみる</a></td></tr><tr><td>3/10</td><td>市川諒</td><td><a href="/articles/20210310/">本番データが急に欲しいアナタに贈る、CloudSQLのサーバレスエクスポートを試してみた</a></td></tr><tr><td>3/11</td><td>澁川喜規</td><td><a href="/articles/20210311/">PythonでCloud Operationsの機能を使ってみる</a>]</td></tr><tr><td>3/12</td><td>村瀬善則</td><td><a href="/articles/20210312/">Text-to-Speechを試してみる</a></td></tr><tr><td>3/15</td><td>前原応光</td><td>Deployツール</td></tr><tr><td>3/16</td><td>松井宇宙</td><td>Firebase + BigQuery</td></tr><tr><td>3/17</td><td>伊藤太斉</td><td>Dataproc</td></tr><tr><td>3/18</td><td>関靖秀</td><td>Google Kubernetes Engine</td></tr><tr><td>3/19</td><td>村田靖拓</td><td>Anthos</td></tr><tr><td>3/22</td><td>越島亮介</td><td>Anthos2</td></tr><tr><td>3/23</td><td>齋場俊太朗</td><td>Spanner</td></tr></tbody></table><p>※記事の順が前後したり、取り扱う内容が変わることがありますが、ご了承ください。</p><h2 id="2021年の連載"><a href="#2021年の連載" class="headerlink" title="2021年の連載"></a>2021年の連載</h2><p>2021年の連載を以下の記事で紹介しておりますので、こちらもご覧ください、</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210118/index.html" data-iframely-url="//cdn.iframe.ly/4PM4Q7E"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>2021年は昨年より記事数を増やしてお送りします！GCPも活用事例が増えてきて導入、利用を検討されている方も多くなってきたと思います。是非こちらの連載を参考にしていただければと思います。</p><ul><li><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a></li><li><a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a></li><li><a href="/tags/GoCDK/">Go Cloud</a></li><li><a href="/tags/Auth0/">Auth0</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/">夏休み自由研究</a></li><li><a href="/tags/GlyphFeeds/">GlyphFeeds連載</a></li><li><a href="/tags/CNCF/">CNCF連載</a></li><li><a href="/articles/20201026/">秋の読書週間連載</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIGの&lt;a href=&quot;https://twitter.com/kaedemalu&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;タイトル通り、GCP連載をテーマに連載を行います。&lt;/p&gt;
&lt;h2 id=&quot;GCP連載について&quot;&gt;&lt;a href=&quot;#GCP連載について</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>インフラ入門ーインフラ要件定義編ー</title>
    <link href="https://future-architect.github.io/articles/20210305/"/>
    <id>https://future-architect.github.io/articles/20210305/</id>
    <published>2021-03-04T15:00:00.000Z</published>
    <updated>2021-03-06T05:35:36.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="１．はじめに"><a href="#１．はじめに" class="headerlink" title="１．はじめに"></a>１．はじめに</h1><p>こんにちは。テクノロジーイノベーショングループ所属の長澤です。<br><a href="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a>な連載記事を久々に書くべく、今回筆を取りました。<br><br>これまでのインフラ入門記事は、</p><ul><li><a href="https://future-architect.github.io/articles/20170109/">インフラ概要と当社でのインフラエンジニア像</a></li><li><a href="https://future-architect.github.io/articles/20170704/">ネットワークその１</a></li><li><a href="https://future-architect.github.io/articles/20191107/">ネットワークその２</a></li><li><a href="https://future-architect.github.io/articles/20200414/">ストレージ</a></li></ul><p>といった流れで来ていますが、今回はあえてピンポイントな内容から離れて、<strong>「インフラ要件定義」</strong>をテーマに書いてみたいと思います。</p><p>個人的な考え方・意見に基づくものが大半ですが、何かのお役に立てれば幸いです。</p><h1 id="２．インフラ要件定義・・・その前に"><a href="#２．インフラ要件定義・・・その前に" class="headerlink" title="２．インフラ要件定義・・・その前に"></a>２．インフラ要件定義・・・その前に</h1><img src="/images/20210305/building-blocks-659158_1280.jpg" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/barni1-773830/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=659158">Bernd Hildebrandt</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=659158">Pixabay</a>からの画像</p><p>私は、インフラの要件定義のゴールは、以下の3つだと思っています。</p><p><strong>1. インフラでの提供機能・構成を固めること</strong><br><strong>2. システムの非機能要件を固めること</strong><br><strong>3. お買い物リスト・見積をまとめること</strong></p><p>進め方としては、1番と2番を並行で固めていき、最後に3番と基本設計フェーズの進め方をお客様と合意します。</p><p>そのうち、初めに手を付ける1番と2番のベースとなるのは、<strong>「システムで為したいこと」</strong>となります。<br>すなわち、1番と2番のアウトプットは、<strong>お客様の業務・経営課題の解決</strong>や、<strong>お客様の更なる成長</strong>といったような目的を、<strong>最良の形で達成するもの</strong>となっている必要があります。</p><p>要件定義フェーズでは、アプリケーションチームとインフラチームが分かれ、それぞれの対面のお客様と話して要件を詰めていくことが多いと思います。<br>その際、インフラ側は業務・アプリケーションを脇に置いて、インフラだけの実装・コストや採用技術にこだわってしまう・・・みたいなことがままあります。<br>その結果できあがるのは、お客様がシステムで為したいことから乖離した、例えば <strong>「性能的に業務にならない」</strong> とか、<strong>「スカスカでToo Much」</strong> のような残念なインフラです。</p><p>では、こういった残念な結果を回避するために、限られた時間の中で我々インフラチームはどうすべきか。</p><p>マネジャー層任せでなく、 <strong>アプリケーションチームと自ら積極的にコミュニケーション</strong>を取り、<strong>業務要件や機能要件をなるべく頭に入れておくこと</strong>に尽きると、私は思っています。</p><p>コーディング以外の全てを担当するインフラチーム、特にそのリーダは、アプリケーションチームの代弁者も担い、お客様のインフラチームに、<strong>「業務・機能要件に基づき、このインフラである」</strong>といったような説明ができるようになるべきです。<br>その説明が、いわゆる<strong>「システム化方針」</strong>の一部になります。</p><p>少し話はそれますが、お客様のアプリケーションチームとインフラチーム間の考え方や課題意識の相違や、コミュニケーション不全も「あるある」です。<br>上述のようなアプリケーションチームとの積極的なコミュニケーションは、その橋渡しを担い、プロジェクト全体が一枚岩となる一助にもなると思います。</p><p>ということで、インフラ要件定義のスタートラインは、<strong>アプリケーションチームとインフラチーム、すなわちプロジェクト全体のベクトルを合わせること</strong>であり、その結果として、プロジェクト全体が納得できるシステム化方針ができあがると、私は思っています。<br>（自分もまだまだできてないなぁと自戒しつつ・・・。）</p><p><strong>「業務アプリケーションのコードになる部分以外は全て自分のタスク」</strong>という意識で、自ら動いていきましょう。</p><h1 id="３．インフラ要件定義（前半戦）"><a href="#３．インフラ要件定義（前半戦）" class="headerlink" title="３．インフラ要件定義（前半戦）"></a>３．インフラ要件定義（前半戦）</h1><p>いよいよインフラ要件定義が始まります。</p><p>インフラ要件定義では、まずは要件定義のゴールに向け、</p><ul><li>インフラとして提供しなければいけない機能として何があるか（※本稿では、 <strong>「インフラ機能要件」</strong> と題します）</li><li>インフラとしてどのような構成・レベル感で作っていくべきか（※本稿では、<strong>「インフラ非機能要件」</strong> と題します）</li></ul><p>といった部分の仮説を立てます。</p><p>これらは、 <strong>「システムとして為したいこと」</strong> に基づく必要があるのは、前述の通りです。<br>そのため、アプリケーションチームの要件定義を受けて具体化や肉付け、または軌道修正等も発生するため、初めから精緻なものは不要です。</p><p>一方で、自分の中にゴールイメージがないと、首尾一貫した内容にならなかったり、そもそもお客様との会話にならなかったりもするので、<strong>要件定義を始める頃には何かしら仮説を持っておくことが必要</strong>です。</p><p>インフラ要件定義では、セッションの回数や濃度等も踏まえて、そうして作った仮説を適切な議論の単位（テーマ）に分割した上で、それぞれお客様と議論していきます。</p><h2 id="３－１．インフラ機能要件定義"><a href="#３－１．インフラ機能要件定義" class="headerlink" title="３－１．インフラ機能要件定義"></a>３－１．インフラ機能要件定義</h2><p>インフラ機能要件定義では、<strong>「業務アプリケーションが担う処理以外にどんな機能が必要か」</strong>といったところを明文化していきます。<br>その際、</p><ul><li>現在の持ち物で転用・相乗りできるもの</li><li>現在の持ち物で利用が必須のもの</li><li>現在の持ち物で不足しているもの</li></ul><p>なども明らかにしていきます。</p><p>例えば、</p><ul><li>既に認証基盤を持っているから、その認証基盤とSSOできるようにしてほしい</li><li>データベースはリッチなものを持っているので相乗りしてほしい</li><li>新たに全社の統合ジョブ基盤として使えるジョブ基盤を作ってほしい</li></ul><p>などでしょうか。</p><p>構成面や処理方式に関わることはもちろんですが、非機能面で引きずられる部分があったり、現行他システムへの影響を気にしなければいけなかったりもするので、<strong>「他システムと一緒に」</strong>系のお話には注意が必要です。（上の例は全部そうですね。）</p><p>また、<strong>「インフラ=業務アプリケーション以外全て」</strong>と捉えると、インフラ機能要件定義を抜け漏れなくやりきるのは難しいことです。<br>ゆえに、なるべく抜け漏れなく対応するための一助として、<strong>各種構成図（ハードウェア、ネットワーク、ソフトウェア、アーキテクチャなど）を早めに作成すべき</strong>と、私は考えています。<br>視覚的に訴えるものがあれば、自分たち・お客様ともに抜け漏れや流用資産の有無なども気づきやすいですし、ある程度網羅感を持って話ができるためです。</p><p>こちらも、Factとして既におさえている部分以外は仮説ベースで作り、ブラッシュアップしていければかまいません。<br>ただし、<strong>最終的なアウトプット資料の仮バージョン</strong>として作り、<strong>セッションのための資料</strong>はなるべく作らないようにしましょう。<br>これは「要件定義だから」というお話ではありませんが、有限の作業時間において最終的に捨てる資料を作るのは非効率です。<br>（もちろん、説明のための補足資料などはその限りではありません。）</p><p>ちなみに、当然ながら、お客様毎に構成や所有資産、欲しい機能などは異なるので、機能要件定義の方がよりお客様とのコミュニケーションが大切になるような気がします。</p><h3 id="３－２．インフラ非機能要件定義"><a href="#３－２．インフラ非機能要件定義" class="headerlink" title="３－２．インフラ非機能要件定義"></a>３－２．インフラ非機能要件定義</h3><p>一方のインフラ非機能要件定義については、整理のために便利なツールが既に存在します。<br>皆さん良くご存じの、**<a href="https://www.ipa.go.jp/sec/softwareengineering/std/ent03-b.html">非機能要求グレード2018(IPA)</a>**です。</p><p>非機能要件を網羅的に整理できることはもちろんですが、公開されている指標に基づいてスムースに議論することができるので、非常に有用性が高い代物です。<br>個人的には、非機能要件定義のベースはこれが全てと捉えても、事足りるかなとも思っています。<br>（逆に非機能要求グレードと全く違う軸で要件定義をしている方がいれば、教示いただけると幸いです。）</p><p>さて、非機能要求グレードをおさらいすると、大きく6つに分割して定義されています。</p><ul><li><strong>可用性</strong><ul><li>継続してサービスを提供し続けられるか</li></ul></li><li><strong>性能・拡張性</strong><ul><li>ピーク時や将来も見越して、パフォーマンスを維持できるか</li></ul></li><li><strong>運用・保守性</strong><ul><li>安定・安心してシステムを使い続けられるか</li></ul></li><li><strong>移行性</strong><ul><li>安全にローンチできるか</li></ul></li><li><strong>セキュリティ</strong><ul><li>様々なセキュリティリスクに対応できるか</li></ul></li><li><strong>環境・エコロジー</strong><ul><li>環境関連の制約や守るべき条約などがあるか</li></ul></li></ul><p>大項目の中身については本稿では触れませんが、各大項目に更に細分化された小項目が定義されており、様々な要求・要件を網羅的に明確化できます。</p><p>ただ、網羅的である一方で、細かすぎる部分や、似通った内容を複数箇所で定義することになっている部分もあります。<br>そのため、最初から最後まで須らく議論の俎上に載せると、おそらく要件定義フェーズのセッションが全てその議論で埋まってしまいます。</p><p>また、お客様の興味の大部分は、<strong>「システムを使って何を為すか」</strong>と、<strong>「そのために、なぜこの非機能レベルなのか」</strong>という部分なので、全ての項目を議論の俎上に載せることは、お客様からするとあまり意味がありません。</p><p>それにも関わらず、全ての項目に対して全力で議論をしようとすると、お客様に<strong>「この人は今回のシステムで重要視すべき点がわかってないのでは？」</strong>といった不信感を与えることにもなり得ます。<br>（多忙なスケジュールの中で調整したにも関わらず、ドキュメントを見れば済むような話を何時間も聞かされるストレスも想像に容易いですよね。。。）</p><p>そのような考えの元、私が非機能要求グレードを用いる場合は、 </p><p><strong>1.大項目レベルでの方針を立てて認識を合わせる</strong><br><strong>2.ポイントになると考えられる部分と、後々認識齟齬のダメージが大きそうなものを小項目レベルでピックアップして議論する</strong></p><p>といった2段構えの対応で要件を明確化するように、心がけています。</p><p>大項目レベルの方針は小項目の調整・相談などの際にも立ち戻れる軸となるように、以後ぶれないような形で定義・合意します。<br>また、小項目のうち、お客様にとってポイントとなるような部分については、方針の中にも文言を含めることが多いです。</p><p>一方、小項目レベルにおいては、お客様にとってポイントとなるようなものに加え、例えば性能面など後工程で調整・相談が入る可能性があるといった申し送り事項含め、合意することが大切です。<br>後は、「SLAなのかSLOなのか」といった、曖昧にしていると、後で双方が不幸になるような部分についてもしっかり合意します。</p><p>なお、議論の場で取り扱わなかった部分も、<strong>原則としてドキュメントベースでお客様とレベル感とその理由を共通認識化すること</strong>は並行で行います。<br>ドキュメントでのやり取りの中で、些末な部分含め、認識齟齬を抑制することが目的です。</p><p>ただし、例外もあります。<br>お客様の工数も有限なので、「ドキュメントベースでも確認不要」ということがお客様と合意できる項目は、そちらは割愛してしまってもかまわないと考えています。<br>（経験上、「環境・エコロジー」の大項目は、よくその対象になる気がします。）</p><p>お客様のインフラチームの方々は、全社のシステムを横断で見ていることがままあり、現行システムの運用保守対応や他案件の対応などで多忙なこともあります。<br>お互いの合意の元、正しく濃淡をつけて推進するように心がけます。</p><h2 id="４．インフラ要件定義（後半線）"><a href="#４．インフラ要件定義（後半線）" class="headerlink" title="４．インフラ要件定義（後半線）"></a>４．インフラ要件定義（後半線）</h2><p>インフラ要件定義の前半戦で、要件はほぼ固まっているので、後半戦ではお買い物リストや見積をまとめます。<br>今回は、<strong>オンプレミス環境</strong>の場合と、<strong>パブリッククラウド</strong>の場合で分けて記載したいと思います。</p><p>なお、ソフトウェアについては、どちらの場合も大きく差異はなく、お買い物リスト（ソフトウェア一覧）をまとめ、ライセンスやサポート料金などの見積を取得する形となります。</p><p>これらは比較的納期も短いので、調達含め大きな問題になることはないのですが、<strong>ライセンス体系や必要数</strong>については注意する必要があります。<br>ソフトウェアによっては、オンプレミスの物理マシンと、仮想マシンやパブリッククラウドでライセンスの必要数が変わってくるものがあります。</p><p>また、クライアント側のライセンスについても、手配を忘れないように注意が必要です。<br>加えて、既にお客様が持っているもので事足りる可能性もあるので、今一度ライセンス体系とお客様が本当に所有していないのかを確認します。</p><h3 id="４－１．オンプレミス環境の場合"><a href="#４－１．オンプレミス環境の場合" class="headerlink" title="４－１．オンプレミス環境の場合"></a>４－１．オンプレミス環境の場合</h3><p>オンプレミス環境でのシステム構築の場合、作成した構成案からお買い物リスト（ハードウェア一覧）をまとめ、見積を取得します。</p><p>なお、在庫状況によっては<strong>納期が数か月</strong>かかることもあるので、余裕を持って見積を取り、そして発注することが必要です。<br>（詳細設計・構築の棲み分けの考え方や案件規模にもよりますが、）個人的には、基本設計フェーズの早めのタイミングで発注プロセスが回せていないと、構築スケジュールへの影響が心配になります。</p><p>また、その納期の都合もあり、予定稼働期間（※5年or7年が多いです）の間、要件を満たせるハードウェアを発注する必要があります。<br>ゆえに、多くの場合は、<strong>現在のビジネス規模に対しては過剰なリソースを持つハードウェアや、十二分にリスクに備えたハードウェア</strong>を購入します。</p><p>その特性上、あまりにリッチな要件をベースにしてしまうと、予算をオーバーするだけでなく、基盤更改時にもリソースが過剰に余っていたという残念なことにもなり得るので、要件の妥当性について、よりしっかりとチェックする必要があると思います。</p><p>その妥当性を考えるときに立ち返るのも、 <strong>「システムを使って何を為すか」</strong>です。</p><ul><li>企業の基幹業務を担うシステムだから、可用性の面では妥協できないが、業務のピーク性があるわけでもないので性能・拡張性は、目をつぶれる。</li><li>業務側で運用回避できるから、可用性の面は妥協できるが、セキュアな情報を扱っているからセキュリティ面は妥協できない。</li></ul><p>などなど、お客様毎、そしてシステム毎に、本当に重要な部分は違うはずです。<br>そのあたりを汲み取り、お客様にとってコスト面も含めた最適・最良の構成で合意し、見積を取得するようにします。<br><br></p><p>余談にはなりますが、業務系と直接関係ない<strong>メンテナンス用などのネットワーク回線の引き込み</strong>に関しての見積・調達プロセスは、忘れがちな気がするので注意しましょう。</p><p>（実際はそんなにかからないことが多いですが、）納期として2か月程度見込んでおく必要があり、手配が漏れると、構築期間中ずっとデータセンタに行って作業することになります。</p><p>ハードウェアレイヤの作業は当然現地作業が必要ですが、例えばミドルウェアやソフトウェアの設定作業などは、必ずしも現地でやる必要はないはずです。<br>にもかかわらず、わざわざデータセンタに出向いて作業するとなると、移動時間の工数などもバカになりません。</p><h3 id="４－２．パブリッククラウド環境の場合"><a href="#４－２．パブリッククラウド環境の場合" class="headerlink" title="４－２．パブリッククラウド環境の場合"></a>４－２．パブリッククラウド環境の場合</h3><p>一方、パブリッククラウド環境の場合は、クラウドベンダーの見積ツールが公開されているので、作成した構成案を元にそちらで見積を行います。</p><blockquote><p>○AWSの場合・・・<a href="https://calculator.aws/#/">AWS Pricing Calculator</a><br>○Azureの場合・・・<a href="https://azure.microsoft.com/ja-jp/pricing/calculator/">料金計算ツール</a><br>○GCPの場合・・・<a href="https://cloud.google.com/products/calculator?hl=ja">Google Cloud Pricing Calculator</a></p></blockquote><p>予約インスタンスを使うのか、従量課金インスタンスを使うのかといった部分や、各インスタンスの稼働時間をどれくらいと想定するか等、インフラ要件定義前半戦で議論が漏れていたものがあれば、お客様と追加で認識合わせをします。</p><p>なお、パブリッククラウド環境においても、要件の妥当性をチェックする必要はあります。<br>ただ、必要に応じてリソースを追加したり、リスクに備えたサービスを追加したりということが可能なので、<strong>予定稼働期間を見越した要件</strong>と、<strong>初回稼働日時点での要件</strong>を分けて整理し、それぞれの構成案を考えることで、少なくとも初回稼働日時点でToo Muchな基盤となることは抑止できるはずです。</p><h2 id="５．さいごに"><a href="#５．さいごに" class="headerlink" title="５．さいごに"></a>５．さいごに</h2><p><strong>「インフラ要件定義」</strong>をテーマに、その中で行う作業や、個人的に意識していることや考えていることを、つらつらと書きました。</p><p>要件定義は、お客様のために何が最良なのかを考え抜き、そしてお客様と共に現実のものにしていく最初の数歩のフェーズです。</p><p>フワフワしたものを形にしていくフェーズなので難しい部分もありますが、<strong>「システムを使って何を為すか」</strong> を念頭に置きながら、関係者と活発にコミュニケーションをとり、プロジェクト全体で納得できる要件定義ができるように頑張りたいものです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;１．はじめに&quot;&gt;&lt;a href=&quot;#１．はじめに&quot; class=&quot;headerlink&quot; title=&quot;１．はじめに&quot;&gt;&lt;/a&gt;１．はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。テクノロジーイノベーショングループ所属の長澤です。&lt;br&gt;&lt;a href=&quot;https://fu</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="要件定義" scheme="https://future-architect.github.io/tags/%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9/"/>
    
    <category term="infrastructure" scheme="https://future-architect.github.io/tags/infrastructure/"/>
    
  </entry>
  
  <entry>
    <title>mxGraphで階層グラフを可視化する</title>
    <link href="https://future-architect.github.io/articles/20210304/"/>
    <id>https://future-architect.github.io/articles/20210304/</id>
    <published>2021-03-03T15:00:00.000Z</published>
    <updated>2021-03-04T01:30:08.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGコアテクノロジーユニットの平岡です。</p><p>この記事は、<a href="/articles/20210303/">Vis Networkで階層グラフを可視化する</a>の続編となります。未読の方は、是非そちらの記事もご覧下さい。</p><p>前回の記事では、JavaScript製のグラフ可視化ライブラリについて概観しました。また、その1つであるVis Networkについて紹介し、階層グラフの可視化を行いました。</p><p>Vis Networkはcanvasでの高速な描画が可能で<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、階層グラフをライトに表示・加工する場合は非常に有用ですが、大きな階層グラフを表示する場合にエッジの交差が多くなってしまうという課題があることを見てきました。</p><p>この記事では上述の課題を解決するために<a href="https://github.com/jsGraph/mxgraph">mxGraph</a>を用いて階層グラフの可視化を行います。mxGraphは階層グラフのレイアウト計算にSugiyama Algorithm<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を利用しており、階層グラフを綺麗に表示することが可能です。下の画像は前回の記事で描画した階層グラフを両ライブラリ間で比較したものですが、mxGraphの方がエッジの交差が少なく見やすいレイアウトになっていることがわかります。</p><p><img src="/images/20210304/image1.png" alt="vis-vs-mxgraph.png"></p><h1 id="mxGraphとは"><a href="#mxGraphとは" class="headerlink" title="mxGraphとは"></a>mxGraphとは</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>mxGraphには以下のような特徴があります。</p><ul><li>JavaScript製のグラフ可視化ライブラリ</li><li>描画方式はSVG</li><li><a href="https://www.diagrams.net/">diagrams.net(旧 draw.io)</a>で利用されています</li><li>Apache License 2.0</li><li>自動レイアウト計算にSugiyama Algorithmを利用しており、綺麗な階層グラフを表示できます</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><a href="https://github.com/jgraph/mxgraph">本家</a>は2020年11月9日にメンテ終了し、<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>現在は<a href="https://github.com/jsGraph/mxgraph">有志</a>がメンテを行っているようです。</p><h1 id="mxGraphの使い方"><a href="#mxGraphの使い方" class="headerlink" title="mxGraphの使い方"></a>mxGraphの使い方</h1><h2 id="階層グラフの描画"><a href="#階層グラフの描画" class="headerlink" title="階層グラフの描画"></a>階層グラフの描画</h2><p>mxGraphの自動レイアウト計算を利用して階層グラフを描画してみましょう。</p><ul><li>紹介するソースコードの全体は<a href="https://jsfiddle.net/85pLye7h/">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。こちらと比較しながら読み進めると良いです。</li><li>より詳しく知りたい方は、本家の以下コンテンツをご覧になってみてください。<ul><li><a href="https://jgraph.github.io/mxgraph/docs/manual.html">mxGraph User Manual - JavaScript Client</a> - mxGraphのマニュアルです。</li><li><a href="https://jgraph.github.io/mxgraph/javascript/index.html">JavaScript Diagram Editor</a> - mxGraphを利用したサンプルページが豊富に紹介されています。</li><li><a href="https://jgraph.github.io/mxgraph/docs/js-api/files/index-txt.html">API Specification</a> - mxGraphのAPIドキュメントです。</li></ul></li></ul><p>まずは、グラフを表示する領域を確保し、<code>mxGraph</code>のインスタンスを生成します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフを表示する領域を確保</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span><br><span class="line"><span class="comment">// グラフのインスタンス生成</span></span><br><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> mxGraph(container)</span><br></pre></td></tr></table></figure><p><code>graph.getDefaultParent()</code>はノードやエッジを追加する際に必要(後述)なので取得しておきます。また、階層グラフを自動レイアウトで計算するために、<code>mxHierarchicalLayout</code>のインスタンスを生成します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフにノードやエッジを追加する際に必要</span></span><br><span class="line"><span class="keyword">const</span> parent = graph.getDefaultParent()</span><br><span class="line"><span class="comment">// 今回は階層グラフを自動レイアウトで描画したいため、レイアウトのインスタンスを生成</span></span><br><span class="line"><span class="keyword">const</span> layout = <span class="keyword">new</span> mxHierarchicalLayout(graph)</span><br></pre></td></tr></table></figure><p>最後に、ノードやエッジの追加とレイアウト計算を行いましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフの形状やデザインの変更を行う(グラフモデルを変更する)際は</span></span><br><span class="line"><span class="comment">// beginUpdate -&gt; グラフモデル変更 -&gt; endUpdate の順に行う</span></span><br><span class="line">graph.getModel().beginUpdate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// tryブロックの中でグラフの形状やデザインの変更を行う</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// ノード追加</span></span><br><span class="line"><span class="keyword">const</span> v1 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v2 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;2&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v3 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;3&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v4 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;4&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v5 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;5&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v6 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;6&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v7 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;7&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v8 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;8&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v9 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;9&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v10 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;10&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v11 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;11&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v12 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;12&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// エッジ追加</span></span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v1, v3, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v1, v2, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v2, v4, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v2, v5, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v3, v6, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v3, v8, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v6, v7, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v6, v9, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v4, v10, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v4, v11, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v5, v12, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v3, v4, <span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 追加したノード・エッジに基づいてレイアウトの自動計算を行う</span></span><br><span class="line">layout.execute(parent)</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">graph.getModel().endUpdate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tryブロックの中身を詳しく見てみましょう。ノードの追加は</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>のように行います。各引数の説明は以下のとおりです。</p><ul><li>第1引数：先程取得した<code>parent</code></li><li>第2引数：ノードを一意に識別するためのID(指定なしの場合は自動的に割り当て)</li><li>第3引数：ノードのラベル</li><li>第4,5引数：ノードのx座標・y座標(後でレイアウト自動計算する場合はダミーの値でOK)</li><li>第6,7引数：ノードの幅・高さ</li><li>第8引数：ノードのスタイル</li></ul><p>また、エッジの追加は</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v1, v3, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>のように行います。各引数の説明は以下のとおりです。</p><ul><li>第1引数：先程取得した<code>parent</code></li><li>第2引数：エッジを一意に識別するためのID(指定なしの場合は自動的に割り当て)</li><li>第3引数：エッジのラベル</li><li>第4,5引数：エッジの始点・終点</li><li>第6引数：エッジのスタイル</li></ul><p>最後に、レイアウト計算を呼び出します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 追加したノード・エッジに基づいてレイアウトの自動計算を行う</span></span><br><span class="line">layout.execute(parent)</span><br></pre></td></tr></table></figure><p>以上で、画像のように階層グラフが描画できました。</p><p><img src="/images/20210304/image2.png" alt="graph.png"></p><h2 id="ノードの形状や色の変更"><a href="#ノードの形状や色の変更" class="headerlink" title="ノードの形状や色の変更"></a>ノードの形状や色の変更</h2><p>続いて、ノードの形状や色をカスタマイズしてみましょう。<br>(紹介するソースコード全体は<a href="https://jsfiddle.net/4qnz1c7g/">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。)</p><p><code>graph.insertVertex()</code>の第8引数でノードのstyleを指定できます。また、styleに名前を付けて適用させることも可能です。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ノード追加</span></span><br><span class="line"><span class="keyword">const</span> v1 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=cylinder&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v2 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;2&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=triangle&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v3 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;3&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=cloud&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v4 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;4&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=hexagon&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v5 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;5&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=rectangle&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v6 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;6&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=ellipse&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v7 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;7&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=doubleEllipse&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v8 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;8&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=rhombus&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v9 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;9&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;fillColor=orange&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// styleに名前をつけることもできる</span></span><br><span class="line"><span class="keyword">const</span> defaultNodeStyle = graph.getStylesheet().getDefaultVertexStyle()</span><br><span class="line"><span class="keyword">const</span> style = mxUtils.clone(defaultNodeStyle)</span><br><span class="line">style[<span class="string">&#x27;shape&#x27;</span>] = <span class="string">&#x27;actor&#x27;</span></span><br><span class="line">graph.getStylesheet().putCellStyle(<span class="string">&#x27;myFavoriteStyle&#x27;</span>, style)</span><br><span class="line"><span class="keyword">const</span> v10 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;10&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;myFavoriteStyle&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v11 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;11&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v12 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;12&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/20210304/image3.png" alt="image.png"></p><h2 id="tooltip"><a href="#tooltip" class="headerlink" title="tooltip"></a>tooltip</h2><p>次は、ノードやエッジにマウスを当てた際にtooltipを表示させてみましょう。</p><p>(紹介するソースコード全体は<a href="https://jsfiddle.net/9a8cd50w/">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。)</p><p>まずは、tooltipを有効にしましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tooltipを有効にします</span></span><br><span class="line">graph.setTooltips(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>すると、ノードのラベルがtooltipで表示されました。</p><p><img src="/images/20210304/image4.png" alt="tooltip-default.png"></p><p>ラベル以外のテキストをtooltipで表示させたい場合は、<code>graph.getTooltipForCell</code>メソッドをoverrideすれば良いです。<br>(mxGraphでは、ノードやエッジを<code>mxCell</code>クラスで扱います。<code>graph.getTooltipForCell</code>は、この<code>mxCell</code>を引数として表示したいtooltipを返すメソッドです。デフォルトでは先程のようにラベルがtooltipで表示されます)</p><p><code>cell</code>がエッジか否かの判定は、<code>graph.getModel().isEdge(cell)</code>で行うことができます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tooltipで表示させたい内容を設定します</span></span><br><span class="line">graph.getTooltipForCell = <span class="function"><span class="params">cell</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (graph.getModel().isEdge(cell)) &#123;</span><br><span class="line">    <span class="keyword">const</span> srcNodeLabel = cell.source.getValue()</span><br><span class="line">    <span class="keyword">const</span> dstNodeLabel = cell.target.getValue()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`this edge is directed from node <span class="subst">$&#123;srcNodeLabel&#125;</span> to node <span class="subst">$&#123;dstNodeLabel&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nodeLabel = cell.getValue()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`node <span class="subst">$&#123;nodeLabel&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20210304/image5.gif" alt="tooltip.gif"></p><h2 id="イベント"><a href="#イベント" class="headerlink" title="イベント"></a>イベント</h2><p>イベント処理の例として、クリックしたノードの色をオレンジに変更してみましょう。</p><p>(紹介するソースコード全体は<a href="https://jsfiddle.net/5p6wnfsv/">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。)</p><p><code>graph.addListener</code>メソッドでイベント発火時の処理を設定することができます。<br>イベント一覧は<a href="https://jgraph.github.io/mxgraph/docs/js-api/files/util/mxEvent-js.html">mxEvent</a>に記載されています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// クリックしたノードをオレンジ色に変更します</span></span><br><span class="line">graph.addListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">sender, evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cell = evt.getProperty(<span class="string">&#x27;cell&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (graph.getModel().isVertex(cell)) &#123;</span><br><span class="line">    graph.setCellStyles(<span class="string">&#x27;fillColor&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, [cell])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/20210304/image6.gif" alt="event.gif"></p><h2 id="SVG形式でexport"><a href="#SVG形式でexport" class="headerlink" title="SVG形式でexport"></a>SVG形式でexport</h2><p>描画したグラフをexportすることができます。<br>SVG形式でexportする例を<a href="https://jsfiddle.net/2jLvt46e/">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。</p><p>ブラウザ上で描画したグラフをファイルとして保存できるのは凄く便利ですね。<br>SVG形式なので、業務で扱うような大きいグラフでも潰れずに表示することができるのも良いです。<br>(Vis Networkの場合はcanvasで描画しているため、ファイル出力してもブラウザで見えている範囲だけの画像となり、大きなグラフを鮮明に表示することが難しかったです)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフをexportするためのボタンを配置します</span></span><br><span class="line"><span class="keyword">const</span> button = <span class="built_in">document</span>.createElement(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">mxUtils.write(button, <span class="string">&#x27;export&#x27;</span>)</span><br><span class="line">mxEvent.addListener(button, <span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  exportGraph()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;export-button&#x27;</span>).appendChild(button)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exportGraph</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> svg = createSvg()</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([svg], &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;svg/plain&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  link.href = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">  link.download = <span class="string">&#x27;graph.svg&#x27;</span></span><br><span class="line">  link.click()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSvg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bounds = graph.getGraphBounds()</span><br><span class="line">  <span class="keyword">const</span> offset = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// SVGのルート要素を作る</span></span><br><span class="line">  <span class="keyword">const</span> root = mxUtils.createXmlDocument().createElementNS(mxConstants.NS_SVG, <span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">  root.setAttribute(<span class="string">&#x27;xmlns&#x27;</span>, mxConstants.NS_SVG)</span><br><span class="line">  root.setAttribute(<span class="string">&#x27;xmlns:xlink&#x27;</span>, mxConstants.NS_XLINK)</span><br><span class="line">  root.setAttribute(<span class="string">&#x27;width&#x27;</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.ceil(bounds.width) + <span class="number">2</span>*offset&#125;</span>px`</span>)</span><br><span class="line">  root.setAttribute(<span class="string">&#x27;height&#x27;</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.ceil(bounds.height) + <span class="number">2</span>*offset&#125;</span>px`</span>)</span><br><span class="line">  root.setAttribute(<span class="string">&#x27;version&#x27;</span>, <span class="string">&#x27;1.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> svgCanvas = <span class="keyword">new</span> mxSvgCanvas2D(root)</span><br><span class="line">  <span class="comment">// グラフが端に寄らないように平行移動する</span></span><br><span class="line">  svgCanvas.translate(offset, offset)</span><br><span class="line">  <span class="keyword">const</span> imgExport = <span class="keyword">new</span> mxImageExport()</span><br><span class="line">  <span class="comment">// グラフを記述</span></span><br><span class="line">  imgExport.drawState(graph.getView().getState(graph.getModel().root), svgCanvas)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mxUtils.getPrettyXml(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vis-Network-vs-mxGraph"><a href="#Vis-Network-vs-mxGraph" class="headerlink" title="Vis Network vs mxGraph"></a>Vis Network vs mxGraph</h1><p>業務でVis NetworkとmxGraphを両方使ってみて大きく異なっていた点を紹介します。</p><h2 id="階層グラフのエッジ間の交差"><a href="#階層グラフのエッジ間の交差" class="headerlink" title="階層グラフのエッジ間の交差"></a>階層グラフのエッジ間の交差</h2><p>冒頭で書いたとおりです。mxGraphの方がエッジ間の交差が少なく、見やすいレイアウトになっています。</p><p><img src="/images/20210304/image7.png" alt="vis-vs-mxgraph.png"></p><h2 id="エッジがノードを貫通する場合"><a href="#エッジがノードを貫通する場合" class="headerlink" title="エッジがノードを貫通する場合"></a>エッジがノードを貫通する場合</h2><p>下の画像はVis Networkの自動レイアウトで階層グラフを描画したものです。<br>(ソースコードは<a href="https://jsfiddle.net/jyzb864e/">こちら</a>)</p><p>このグラフのオレンジ色のエッジに注目してみましょう。</p><p>一見すると、ノード1からノード3へ伸びるエッジとノード3からノード10へ伸びるエッジがあるように見えます。<br>しかし、ソースコードを見ると分かる通り、実際には後者のエッジはノード1からノード10へ伸びたものです。道中でノード3を貫通しているために、あたかもノード3から伸びているように見えてしまいます。<br>このように、Vis Networkにおいてエッジがノードを貫通する場合にはエッジの始点がどこなのか判別しにくくなるという課題があります。</p><p><img src="/images/20210304/image8.png" alt="image.png"></p><p>mxGraphの場合はどうでしょうか。下の画像は、上と同じ階層グラフをmxGraphの自動レイアウトで描画したものです。レイアウト計算が賢いため、そもそもエッジがノードに重ならずに描画されました。(ソースコードは<a href="https://jsfiddle.net/gtprnuow/">こちら</a>)</p><p><img src="/images/20210304/image9.png" alt="image.png"></p><p>比較のために、mxGraphで自動レイアウトを使わずに描画し、エッジがノードと重なる例を見てみます。<br>以下のグラフはノード1からノード2、ノード1からノード3へのエッジが出ています。ノード1からノード3へのエッジは道中でノード2の上を通るので、エッジの始点の判別がしやすいことがわかります。<br>(ソースコードは<a href="https://jsfiddle.net/hgdez7y1/">こちら</a>)</p><p><img src="/images/20210304/image10.png" alt="image.png"></p><h2 id="描画速度"><a href="#描画速度" class="headerlink" title="描画速度"></a>描画速度</h2><p>描画速度はどうでしょうか？<br>Vis Networkはcanvas, mxGraphはSVGで描画しているため、Vis Networkの方が速いことが予想されます。以下では簡単に性能比較を行ってみます。</p><ul><li>下記のような一本道のグラフを自動レイアウトで描画するために要する時間を色々なノード数(10個,100個,1000個,2000個,4000個の5種類)に対して計測する</li></ul><p><img src="/images/20210304/image11.png" alt="image.png"></p><ul><li>計測値は、3回測定して平均を取ったもの(単位：ミリ秒)を採用する</li></ul><p>計測結果は以下のようになりました。</p><table><thead><tr><th align="right">ノード数</th><th align="right"><a href="https://jsfiddle.net/8qmn6fyw/">Vis NetWork</a></th><th align="right"><a href="https://jsfiddle.net/f35o29pu/">mxGraph</a></th></tr></thead><tbody><tr><td align="right">10</td><td align="right">33.40</td><td align="right">43.12</td></tr><tr><td align="right">100</td><td align="right">103.52</td><td align="right">181.98</td></tr><tr><td align="right">1000</td><td align="right">742.94</td><td align="right">1491.80</td></tr><tr><td align="right">2000</td><td align="right">1429.83</td><td align="right">2906.09</td></tr><tr><td align="right">4000</td><td align="right">-</td><td align="right">6900.84</td></tr></tbody></table><p>ノード数が2000以下の範囲では、Vis Networkの方が概ね2倍程度速く描画できることがわかりました。</p><p>なお、Vis Networkでノード数4000の場合は<code>Maximum call stack size exceeded</code>エラーが出たため空欄になっています。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><p>mxGraphの描画速度を改善することはできないのでしょうか？<br>実は、何行かコードに追加するだけで、ある程度の改善が可能です。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p><p>追加したコードとその周辺を以下に載せます。次の2つの改善を行っています。</p><ul><li>グラフモデルの更新が完了したときに初めて描画を行うようにする</li><li><code>ignoreStringSize</code>を有効にする</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高速化その1：グラフモデル更新中は描画をOFFにする</span></span><br><span class="line">graph.getView().setRendering(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高速化その2：ignoreStringSizeを有効にする</span></span><br><span class="line">mxText.prototype.ignoreStringSize = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// グラフの形状やデザインの変更を行う(グラフモデルを変更する)際は</span></span><br><span class="line"><span class="comment">// beginUpdate -&gt; グラフモデル変更 -&gt; endUpdate の順に行う</span></span><br><span class="line">graph.getModel().beginUpdate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// tryブロックの中でグラフの形状やデザインの変更を行う</span></span><br><span class="line">  <span class="comment">// (中略)</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  graph.getModel().endUpdate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描画をオンに戻す</span></span><br><span class="line">graph.getView().setRendering(<span class="literal">true</span>)</span><br><span class="line">graph.refresh()</span><br></pre></td></tr></table></figure><p>高速化を施したmxGraphも含めて、計測結果を再掲します。Vis Networkの1.5倍程度まで改善することができました。</p><table><thead><tr><th align="right">ノード数</th><th align="right"><a href="https://jsfiddle.net/8qmn6fyw/">Vis NetWork</a></th><th align="right"><a href="https://jsfiddle.net/f35o29pu/">mxGraph(高速化なし)</a></th><th align="right"><a href="https://jsfiddle.net/n0Lduaz2/">mxGraph(高速化あり)</a></th></tr></thead><tbody><tr><td align="right">10</td><td align="right">33.40</td><td align="right">43.12</td><td align="right">31.78</td></tr><tr><td align="right">100</td><td align="right">103.52</td><td align="right">181.98</td><td align="right">144.06</td></tr><tr><td align="right">1000</td><td align="right">742.94</td><td align="right">1491.80</td><td align="right">1128.03</td></tr><tr><td align="right">2000</td><td align="right">1429.83</td><td align="right">2906.09</td><td align="right">2122.71</td></tr><tr><td align="right">4000</td><td align="right">-</td><td align="right">6900.84</td><td align="right">3477.48</td></tr></tbody></table><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>mxGraphの自動レイアウトを用いて階層グラフの可視化を行い、複雑な階層グラフが綺麗に描画できることを紹介しました。</p><p>また、Vis NetworkとmxGraphの両方を業務で扱ってみて得た知見についても紹介しました。</p><p>コアテクノロジーユニットでは、現在チームメンバーを募集しています。<br>私たちと一緒にテクノロジーで設計、開発、テストの高品質・高生産性を実現する仕組みづくりをしませんか？</p><p>興味がある方はお気軽に技術ブログTwitterや会社採用HPへ、連絡をお待ちしております。</p><p><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210303/index.html" data-iframely-url="//cdn.iframe.ly/UYpIJsS?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200901/index.html" data-iframely-url="//cdn.iframe.ly/MB3R2AH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">フューチャー発のOSSであるCheetah Gridも高速に描画するためにcanvasを使用しています。興味がある方は<a href="/articles/20200901/">Vue.jsで最速に始めるCheetah Grid</a>や<a href="/articles/20200924/">CheetahGrid+Vue.jsをエンプラで使ってみた</a>を御覧ください</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.orsj.or.jp/archive2/or63-1/or63_1_20.pdf">階層グラフの可視化</a>や <a href="https://en.wikipedia.org/wiki/Layered_graph_drawing">Layered graph drawing - Wikipedia</a>などに詳しい説明があります。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">アーカイブされ、issueが閲覧できなくなってしまいました…</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">実装の詳細は確認できていませんが、自動レイアウト計算の実装で再帰関数を使っており、再帰の深さが一定値を超えたためエラーが出たと推測されます。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">この記事で紹介する改善策は以前に本家のissueで見かけて知ったのですが、現在は閲覧できなくなってしまいました...</span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGコアテクノロジーユニットの平岡です。&lt;/p&gt;
&lt;p&gt;この記事は、&lt;a href=&quot;/articles/20</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="可視化" scheme="https://future-architect.github.io/tags/%E5%8F%AF%E8%A6%96%E5%8C%96/"/>
    
    <category term="mxGraph" scheme="https://future-architect.github.io/tags/mxGraph/"/>
    
  </entry>
  
  <entry>
    <title>Vis Networkで階層グラフを可視化する</title>
    <link href="https://future-architect.github.io/articles/20210303/"/>
    <id>https://future-architect.github.io/articles/20210303/</id>
    <published>2021-03-02T15:00:00.000Z</published>
    <updated>2021-03-05T14:42:05.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、TIG コアテクノロジーユニットの山田です。</p><p>だいぶ前のことですが業務で階層グラフを可視化する機会があったので、<strong>階層グラフの可視化方法</strong> について共有させていただこうと思います。</p><blockquote><p>グラフとは関係を抽象化したもので、線グラフや棒グラフなどのチャートとは異なる概念です。グラフはノードとエッジで表現され、例えばSNSでのつながりを表すソーシャルグラフや関数の呼び出し関係を表すコールグラフなど様々な関係をグラフで表現できます。<br>（詳細は<a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95_(%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0)">グラフ (データ構造) - Wikipedia</a>を御覧ください）</p></blockquote><p>グラフの可視化ツールと言えば<a href="https://graphviz.org/">Graphviz</a>が有名ですが、サーバ側にバイナリ入れてプロセス起動する形になってしまうのでWebアプリでの利用には少し不向きです。</p><p>Webアプリで利用しやすい、JavaScript製のライブラリの代表的なプロダクトは例えば以下があります。</p><table><thead><tr><th></th><th><a href="https://github.com/visjs/vis-network">vis-network</a></th><th><a href="https://github.com/jsGraph/mxgraph">mxGraph</a></th><th><a href="https://d3js.org/">D3.js</a></th><th><a href="https://mermaid-js.github.io/mermaid/#/">mermaid</a></th></tr></thead><tbody><tr><td>描画方式</td><td>canvas</td><td>SVG</td><td>canvas / SVG</td><td>SVG</td></tr><tr><td>特徴</td><td>高性能</td><td>diagrams.net (旧 draw.io) で使われている</td><td>多機能</td><td>GitLabで標準利用可</td></tr><tr><td>ライセンス</td><td>Apache License 2.0 / MIT License</td><td>Apache License 2.0</td><td>修正BSDライセンス</td><td>MIT License</td></tr></tbody></table><p>この中で、本記事でははVis Networkを用いて階層グラフを表示する方法をご紹介します。</p><p>mxGraphについて<a href="/articles/20210304/">次の記事</a>で紹介する予定ですのでお楽しみに。</p><h2 id="Vis-Networkとは"><a href="#Vis-Networkとは" class="headerlink" title="Vis Networkとは"></a>Vis Networkとは</h2><p>vis.jsという可視化ライブラリに含まれるグラフ可視化ライブラリです。その中でもVis Networkはグラフの可視化に特化したライブラリで、<a href="https://visjs.github.io/vis-network/examples/">Vis Network Examples</a>にあるように様々なグラフを描画することができます。Vis Networkはcanvasに描画するため描画が高速で、パフォーマンスが要求される場面に有用です。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h1 id="Vis-Networkの使い方"><a href="#Vis-Networkの使い方" class="headerlink" title="Vis Networkの使い方"></a>Vis Networkの使い方</h1><p>Vis Networkでは表示するグラフの元となるノード、エッジ、オプションを定義する必要があります。</p><h2 id="ノード定義"><a href="#ノード定義" class="headerlink" title="ノード定義"></a>ノード定義</h2><p>下記のようにノードを定義することができます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodes = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">&#x27;1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">&#x27;2&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">&#x27;3&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">label</span>: <span class="string">&#x27;4&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">label</span>: <span class="string">&#x27;5&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">label</span>: <span class="string">&#x27;6&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">label</span>: <span class="string">&#x27;7&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">label</span>: <span class="string">&#x27;8&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">&#x27;9&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&#x27;10&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">label</span>: <span class="string">&#x27;11&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">label</span>: <span class="string">&#x27;12&#x27;</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>ノードに設定可能な属性一覧は<a href="https://visjs.github.io/vis-network/docs/network/nodes.html">vis.js - Nodes documentation.</a>をご参照ください。</p><h2 id="エッジ定義"><a href="#エッジ定義" class="headerlink" title="エッジ定義"></a>エッジ定義</h2><p><code>from</code>, <code>to</code>で指定したノードIDをつなぐエッジを作成します。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> edges = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">1</span>, <span class="attr">to</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">1</span>, <span class="attr">to</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">2</span>, <span class="attr">to</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">2</span>, <span class="attr">to</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">3</span>, <span class="attr">to</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">3</span>, <span class="attr">to</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">6</span>, <span class="attr">to</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">6</span>, <span class="attr">to</span>: <span class="number">9</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">4</span>, <span class="attr">to</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">4</span>, <span class="attr">to</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">5</span>, <span class="attr">to</span>: <span class="number">12</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>エッジに設定可能な属性一覧は<a href="https://almende.github.io/vis/docs/network/edges.html">vis.js - Edges documentation.</a>をご参照ください。</p><h2 id="オプション定義"><a href="#オプション定義" class="headerlink" title="オプション定義"></a>オプション定義</h2><p>階層グラフを表示する場合、layoutオプションを指定する必要があります。その際、下記のように<code>sortMethod: &#39;directed&#39;</code>を指定することでグラフの形状から各ノードのレベルを自動計算してくれるので、ライトに可視化したい場合にはこのオプションを使用することをおすすめします。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    layout: &#123;</span><br><span class="line">        hierarchical: &#123;</span><br><span class="line">            sortMethod: <span class="string">&#x27;directed&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>オプションに設定可能な属性一覧は<a href="https://almende.github.io/vis/docs/network/">vis.js - Network documentation.</a>をご参照ください。</p><h2 id="可視化"><a href="#可視化" class="headerlink" title="可視化"></a>可視化</h2><p>上記のノード定義、エッジ定義、オプション定義を元に可視化することができます。実際に可視化した例です。</p><p><img src="/images/20210303/2021-01-19_14h29_14.png"><br>ソースコードは <a href="https://jsfiddle.net/0bxLo6wt/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>これだけでは寂しいので、少しグラフを加工していきましょう。</p><h2 id="ノードの形状"><a href="#ノードの形状" class="headerlink" title="ノードの形状"></a>ノードの形状</h2><p>ノード定義にshape属性を追加することで、ノードにラベルを表示することが出来ます。なお、ここでは紹介しませんでしたが<code>shape: image</code>を指定することで任意の画像を表示することもできます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodes = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">&#x27;1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;database&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;box&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">label</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;text&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">label</span>: <span class="string">&#x27;5&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangle&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">label</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;diamond&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">label</span>: <span class="string">&#x27;7&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;dot&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">label</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;star&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">&#x27;9&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangle&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&#x27;10&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangleDown&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">label</span>: <span class="string">&#x27;11&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;hexagon&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">label</span>: <span class="string">&#x27;12&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;square&#x27;</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p><img src="/images/20210303/2021-01-19_14h31_46.png"><br>ソースコードは <a href="https://jsfiddle.net/3nkac917/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><h2 id="tooltip"><a href="#tooltip" class="headerlink" title="tooltip"></a>tooltip</h2><blockquote><p>tooltip（ツールチップ）とは、マウスオーバーした際に表示される枠内の補足説明などのことです。詳細は<a href="https://ja.wikipedia.org/wiki/%E3%83%84%E3%83%BC%E3%83%AB%E3%83%81%E3%83%83%E3%83%97">こちら</a>の記事などを参考ください。</p></blockquote><p>ノード定義にtitle属性を追加することでtooltipを表示することが出来ます。ドキュメントによるとHTMLを含む文字列を直接セット出来ると書かれていますが、XSS対策<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>のため9.0.0からできなくなっています。</p><p>tooltipでHTMLを表示したい場合は<a href="https://visjs.github.io/vis-network/examples/network/other/popups.html">Vis Network | Other | Popups</a>のように HTML Element を直接セットする必要があります。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodes = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;tooltip\ntest&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;database&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;box&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">label</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;text&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">label</span>: <span class="string">&#x27;5&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangle&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">label</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;diamond&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">label</span>: <span class="string">&#x27;7&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;dot&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">label</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;star&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">&#x27;9&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangle&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&#x27;10&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangleDown&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">label</span>: <span class="string">&#x27;11&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;hexagon&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">label</span>: <span class="string">&#x27;12&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;square&#x27;</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p><img src="/images/20210303/2021-01-19_14h34_43.png"><br>ソースコードは <a href="https://jsfiddle.net/rg50c2jh/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><h2 id="イベント"><a href="#イベント" class="headerlink" title="イベント"></a>イベント</h2><p><code>on</code>メソッドで指定したイベントを処理するCallbackを登録することが出来ます。<br>下記のサンプルではクリックしたノードの<code>color</code>属性を変更します。</p><p><img src="/images/20210303/%E3%83%8E%E3%83%BC%E3%83%89%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88.gif"><br>ソースコードは <a href="https://jsfiddle.net/hu2kts5y/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>イベント一覧は <a href="https://almende.github.io/vis/docs/network/#Events">vis.js - Network documentation.</a> に記載されています。<br>イベント発生時に渡されるパラメータの中身を確認したり、実際にイベント発生させて試したい場合は <a href="https://visjs.github.io/vis-network/examples/network/events/interactionEvents.html">Vis Network | Events | Interaction events</a> がおすすめです。</p><h2 id="dot言語からのインポート"><a href="#dot言語からのインポート" class="headerlink" title="dot言語からのインポート"></a>dot言語からのインポート</h2><p>Vis NetworkではGephiからエクスポートしたデータやdot言語をインポートすることができます。今回は私が先日Graphvizを用いて可視化したグラフ<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>をVis Networkで表示してみます。</p><p><img src="/images/20210303/%E5%90%8D%E7%A7%B0%E6%9C%AA%E8%A8%AD%E5%AE%9A2.png"></p><p>ソースコードは <a href="https://jsfiddle.net/kon2cL8r/10/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>Graphvizほど洗練されたレイアウトにはなりませんが、非常に簡単にdot言語をインポートすることができました。</p><p>※ 上記画像ではVis Networkのノードやエッジのラベルが読み取れない状態になっていますが、Canvas上で拡大することでラベルを読み取ることが出来ます</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>開発中にバージョンアップしたときに何も表示されなくなる不具合<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>に遭遇したことがありました。このようなわかりやすい不具合ならまだいいですが、細かいところで挙動が変わってしまっている可能性もあるのでバージョンアップの際には十分な検証が必要かなと思います。（どのソフトウェアにも言えることではありますが…）</p><h1 id="課題"><a href="#課題" class="headerlink" title="課題"></a>課題</h1><p>当初Vis Networkを使用していましたが、大きめの階層グラフを表示するとエッジの交差が非常に多くなってしまうことがわかりました。例えば下図はこれまでサンプルとして表示していたグラフにオレンジのエッジを一本追加しただけなのですが、エッジの交差が必要以上に多くなってしまっています。</p><p><img src="/images/20210303/2021-01-21_10h44_39.png"></p><p>ソースコードは <a href="https://jsfiddle.net/2801wrud/2/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>私の所属しているプロジェクトでは比較的大きな階層グラフを表示する必要があり、この課題を解消するためmxGraphに乗り換えました。mxGraphではこのようにエッジの交差を減らすことができます。</p><p><img src="/images/20210303/image_(4).png"></p><p>次回の記事ではmxGraphをご紹介いたします。</p><ul><li>続きの記事も<a href="/articles/20210303/">こちら</a>に公開されました。併せて確認してもらえると嬉しいです！</li></ul><p>階層グラフのレイアウト問題そのものに興味がある方は <a href="http://www.orsj.or.jp/archive2/or63-1/or63_1_20.pdf">階層グラフの可視化</a> などを見ると楽しめるかなと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>vis.jsを使い、ライトに階層グラフを表示・加工出来ることがわかりました。残念ながら私達の用途には合いませんでしたが、適切なシーンで使用すればとても有用なライブラリだと思います。</p><p>コアテクノロジーユニットでは、現在チームメンバーを募集しています。興味がある方はお気軽に技術ブログTwitterや会社採用HPへ、連絡をお待ちしております。</p><p><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200901/index.html" data-iframely-url="//cdn.iframe.ly/MB3R2AH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200203/index.html" data-iframely-url="//cdn.iframe.ly/J3rUEhc?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">フューチャー発のOSSであるCheetah Gridも高速に描画するためにcanvasを使用しています。興味がある方は<a href="https://future-architect.github.io/articles/20200901/">Vue.jsで最速に始めるCheetah Grid | フューチャー技術ブログ</a>や<a href="https://future-architect.github.io/articles/20200924/">CheetahGrid+Vue.jsをエンプラで使ってみた | フューチャー技術ブログ</a>を御覧ください</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/visjs/vis-network/pull/1275">fix(xss)!: don't set popup content via innerHTML by Thomaash · Pull Request #1275 · visjs/vis-network · GitHub</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://qiita.com/tanzaku/items/d21ce5c61505a8710fbe#%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C-%E3%81%9D%E3%81%AE3%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E3%83%8E%E3%83%BC%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0">Goでコールグラフを自作してみた - Qiita</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/visjs/vis-network/issues/183">None of the examples work on 6.2.0? · Issue #183 · visjs/vis-network · GitHub</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、TIG コアテクノロジーユニットの山田です。&lt;/p&gt;
&lt;p&gt;だいぶ前のことですが業務で階層グラフを可視化する機</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="vis.js" scheme="https://future-architect.github.io/tags/vis-js/"/>
    
    <category term="可視化" scheme="https://future-architect.github.io/tags/%E5%8F%AF%E8%A6%96%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Auth0でADをユーザDBにし、SalesforceとのSSOを確認する</title>
    <link href="https://future-architect.github.io/articles/20210302/"/>
    <id>https://future-architect.github.io/articles/20210302/</id>
    <published>2021-03-01T15:00:00.000Z</published>
    <updated>2021-03-08T02:20:27.602Z</updated>
    
    <content type="html"><![CDATA[<p>エンタープライズの領域ではAD認証が多く利用されており、また同時にCRMとしてSalesforceが導入されているケースが多くあります。<br>この場合、社内システムにおける「統合認証」の要件として、これらを繋げてログインする必要が出てきます。</p><p>これらの要求に対応するため、以下2点を確認し、Active Directory（以降AD）を中心とした統合認証を試してみます。</p><ol><li>Auth0のApplicationsでAD認証ができることを確認</li><li>SalesforceのSSO機能を利用し、Auth0経由でAD認証かつSSOができることを確認</li></ol><h1 id="Auth0とは？"><a href="#Auth0とは？" class="headerlink" title="Auth0とは？"></a>Auth0とは？</h1><img src="/images/20210222/top.png" class="img-middle-size"><p><a href="https://future-architect.github.io/articles/20200122/">Auth0導入編</a>をぜひ参照ください。他にも<a href="https://future-architect.github.io/tags/Auth0/">Auth0関連</a>の記事があります。</p><h1 id="Auth0に「Active-Directory-LDAP」Connectorを追加"><a href="#Auth0に「Active-Directory-LDAP」Connectorを追加" class="headerlink" title="Auth0に「Active Directory / LDAP」Connectorを追加"></a>Auth0に「Active Directory / LDAP」Connectorを追加</h1><h3 id="設定追加"><a href="#設定追加" class="headerlink" title="設定追加"></a>設定追加</h3><p><code>メニュー　-&gt; Connections -&gt; Enterprise -&gt; Active Directory / LDAP -&gt; CREATE CONNECTION</code><br>メニューからConnectorを追加し、今回は2つのオプションを有効にしています</p><ul><li>Use Windows Integrated Auth (Kerberos)<br>Auth0はWindows統合認証（Kerberos認証）に対応しており、WindowsでAD認証でログインしており、かつ <code>IP Ranges</code> のIPでログインすると認証をスキップできます。  </li><li>Sync user profile attributes at each login<br>こちらはシンプルに認証時に最新のプロファイルをADから取得できる設定となっています。</li></ul><img src="/images/20210302/スクリーンショット_2021-02-24_10.03.37.png"  style="border:solid 1px #000000"><h1 id="ADサーバーの設定"><a href="#ADサーバーの設定" class="headerlink" title="ADサーバーの設定"></a>ADサーバーの設定</h1><h3 id="Connector設定確認"><a href="#Connector設定確認" class="headerlink" title="Connector設定確認"></a>Connector設定確認</h3><p>追加済みのConnectorより、「Setup」タブを確認し <code>Ticket Url</code> を控えておきます。<br><strong>この<code>Ticket Url</code>がADサーバーの設定に必要となります。</strong></p><img src="/images/20210302/スクリーンショット_2021-02-24_10.06.35.png"  style="border:solid 1px #000000"><h3 id="ADサーバーにAD-LDAP-Connectorをインストール"><a href="#ADサーバーにAD-LDAP-Connectorをインストール" class="headerlink" title="ADサーバーにAD LDAP Connectorをインストール"></a>ADサーバーにAD LDAP Connectorをインストール</h3><p><a href="https://auth0.com/docs/extensions/ad-ldap-connector/install-configure-ad-ldap-connector">インストール手順</a>を参考に、ウィザードに従ってインストールしてください。<br>インストール時に前述の手順で控えた<code>Ticket Url</code>が必要になります。</p><h3 id="AD-LDAP-Connectorの設定を変更"><a href="#AD-LDAP-Connectorの設定を変更" class="headerlink" title="AD LDAP Connectorの設定を変更"></a>AD LDAP Connectorの設定を変更</h3><p>Auht0らしく、AD LDAP Connectorの設定をスクリプトで変更できる部分があります。<br>ProfileMapper（ADのユーザプロファイルとAuth0のユーザプロファイルのマッピング）のタブが、スクリプトで記載できる設定になっており、今回は詰められる情報を最大まで詰めてみました。<br>ここで設定したプロファイルがログイン時にAuth0に送信される情報となります。</p><img src="/images/20210302/スクリーンショット_2020-09-11_17.49.51.png"  style="border:solid 1px #000000"><h3 id="ADとAuth0が接続できていることを確認"><a href="#ADとAuth0が接続できていることを確認" class="headerlink" title="ADとAuth0が接続できていることを確認"></a>ADとAuth0が接続できていることを確認</h3><p>Auth0側の<code>Connections</code>の表示が、<code>Offline</code>から<code>Online</code>に変化します。</p><img src="/images/20210302/スクリーンショット_2020-09-11_9.36.28.png"  style="border:solid 1px #000000"><h1 id="Applicationsでログイン確認"><a href="#Applicationsでログイン確認" class="headerlink" title="Applicationsでログイン確認"></a>Applicationsでログイン確認</h1><h3 id="Applicationsの設定変更"><a href="#Applicationsの設定変更" class="headerlink" title="Applicationsの設定変更"></a>Applicationsの設定変更</h3><h3 id="ApplicationsでConnectionsを有効化"><a href="#ApplicationsでConnectionsを有効化" class="headerlink" title="ApplicationsでConnectionsを有効化"></a>Applicationsで<code>Connections</code>を有効化</h3><p>Applicationsの設定で<code>Connections</code>タブを開き、設定済みのADを有効化します。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.51.png"  style="border:solid 1px #000000"><h3 id="ログインを確認"><a href="#ログインを確認" class="headerlink" title="ログインを確認"></a>ログインを確認</h3><p>サンプルアプリケーションを利用し、ログイン後のプロファイルを確認します。<br>ここで、ADで設定済みのプロファイルが見えれば連携成功です。</p><img src="/images/20210302/スクリーンショット_2020-09-11_15.33.11.png"  style="border:solid 1px #000000"><h3 id="プロファイルが取れるか確認"><a href="#プロファイルが取れるか確認" class="headerlink" title="プロファイルが取れるか確認"></a>プロファイルが取れるか確認</h3><p>Auth0のRulesでプロファイルの取得を入れ込み、結果を見ます。</p><img src="/images/20210302/スクリーンショット_2020-09-11_17.59.05.png"  style="border:solid 1px #000000"><p>ADサーバーのAD LDAP Connectorで指定した情報が取れていることがわかります。<br>なお、ここまで確認できればAuth0上でユーザ情報を自由に扱えそうだと判断できます。<br>例えば、ログイン時にADからユーザ情報を透過的に移行するなどの対応も考えられます。</p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-09-11_15.38.32.png"></p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-09-11_15.38.48.png"></p><h1 id="Salesforceの外部認証にAuth0を設定"><a href="#Salesforceの外部認証にAuth0を設定" class="headerlink" title="Salesforceの外部認証にAuth0を設定"></a>Salesforceの外部認証にAuth0を設定</h1><h3 id="Salesforceのアカウント準備"><a href="#Salesforceのアカウント準備" class="headerlink" title="Salesforceのアカウント準備"></a>Salesforceのアカウント準備</h3><p>SSOの前提として、Auth0のドメイン設定を行う必要があります。</p><h3 id="Salesforce側にADとSSOさせたいユーザを作成"><a href="#Salesforce側にADとSSOさせたいユーザを作成" class="headerlink" title="Salesforce側にADとSSOさせたいユーザを作成"></a>Salesforce側にADとSSOさせたいユーザを作成</h3><p><strong>SalesforceのSSOでは、Salesforce側に事前にSSOしたユーザの登録が必要です。</strong><br>また、SSOさせる場合にSalesforceのユーザとADのユーザで、SSOに利用する属性情報を一致させる必要があります。<br>とはいえ、Auth0のログイン画面を使う場合、ADとSalesforceで一致させる属性はEmailが最善です。<br>今回はこの青枠ユーザをSSOで利用します。</p><img src="/images/20210302/スクリーンショット_2021-02-22_19.33.57.png"  style="border:solid 1px #000000"><h3 id="Saleforceのドメイン設定"><a href="#Saleforceのドメイン設定" class="headerlink" title="Saleforceのドメイン設定"></a>Saleforceのドメイン設定</h3><p><a href="https://help.salesforce.com/articleView?id=sf.domain_name_overview.htm&type=5">SSOにはドメイン設定が必要になるため、設定しておきます。</a><br>ここでAuth0に移ります。</p><h3 id="auth0にSalesforce用のSSO設定を追加"><a href="#auth0にSalesforce用のSSO設定を追加" class="headerlink" title="auth0にSalesforce用のSSO設定を追加"></a>auth0にSalesforce用のSSO設定を追加</h3><p><code>SSO Integrations</code>から<code>CREATE SSO INTEGRATION</code>を選択し、SalesforceのSSO設定を追加します<br>Salesforce側のドメインが必要になるので、<a href="https://auth0.com/docs/protocols/saml-configuration-options/configure-salesforce-as-saml-identity-provider">Auth0の設定ページ</a>を確認しつつSalesforceから情報を取得してください。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.24.png"  style="border:solid 1px #000000"><p>Salesforceのドメインに<code>https://</code>をつけたものが<code>Entity ID</code>になります。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.45.png"  style="border:solid 1px #000000"><p>追加設定として、認証先をADに変更します。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.51_2.png"  style="border:solid 1px #000000"><p>ここで、Salesforceに移ります。</p><h3 id="SaleforceのSSO設定追加"><a href="#SaleforceのSSO設定追加" class="headerlink" title="SaleforceのSSO設定追加"></a>SaleforceのSSO設定追加</h3><p>メニューの<code>ID-&gt;シングルサインオン設定</code>を選択し、<code>新規</code>から接続設定を作ります。</p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-02-22_19.09.12.png"></p><p>Auth0のSalesforce設定ページにチュートリアルページあるので、手順に従い必須項目を埋めます。<br><code>IDはattribute要素にあります</code>を選択し、<code>email</code>を入力することを忘れないでください。<br>設定した<code>email</code>が、ADとSalesforceでSSOさせるユーザの一致属性となります。</p><img src="/images/20210302/スクリーンショット_2021-02-22_19.44.06.png"  style="border:solid 1px #000000"><h3 id="SSOの確認"><a href="#SSOの確認" class="headerlink" title="SSOの確認"></a>SSOの確認</h3><p>これでようやく設定完了です。<br>追加したSSOのログインボタンが現れますので、自ドメインの認証画面からSSOユーザでログインしてください。</p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-09-14_12.52.42.png"></p><p>ログインできれば成功です。<br>お疲れ様でした。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="padding-bottom: 35.9551%; padding-top: 120px;"><a href="https://future-architect.github.io/articles/20210222/index.html" data-iframely-url="//cdn.iframe.ly/MKovoVl"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200123/index.html" data-iframely-url="//cdn.iframe.ly/6rr8LwH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;エンタープライズの領域ではAD認証が多く利用されており、また同時にCRMとしてSalesforceが導入されているケースが多くあります。&lt;br&gt;この場合、社内システムにおける「統合認証」の要件として、これらを繋げてログインする必要が出てきます。&lt;/p&gt;
&lt;p&gt;これらの要求に</summary>
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
    <category term="SSO" scheme="https://future-architect.github.io/tags/SSO/"/>
    
    <category term="Salesforce" scheme="https://future-architect.github.io/tags/Salesforce/"/>
    
    <category term="ActiveDirectory" scheme="https://future-architect.github.io/tags/ActiveDirectory/"/>
    
  </entry>
  
  <entry>
    <title>【登壇しました】アレクサアプリを開発してみたら中々大変だった話</title>
    <link href="https://future-architect.github.io/articles/20210301/"/>
    <id>https://future-architect.github.io/articles/20210301/</id>
    <published>2021-02-28T15:00:00.000Z</published>
    <updated>2021-03-01T01:30:46.331Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p><a href="https://future-architect.github.io/articles/20210226/">澁川さん記事</a>と同じく2/25の<a href="https://nodejs.connpass.com/event/203464/">東京Node学園</a>で発表させていただきました。</p><script async class="speakerdeck-embed" data-id="65008f9c75ad473096207bda6809b69f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Alexaスキルを作ってみた"><a href="#Alexaスキルを作ってみた" class="headerlink" title="Alexaスキルを作ってみた"></a>Alexaスキルを作ってみた</h2><p><a href="https://www.amazon.co.jp/dp/B08W1XTQVF/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&dchild=1&keywords=%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E4%BC%9A%E8%AD%B0&qid=1612535863&s=digital-skills&sr=1-1">リモート会議リマインダー</a>というAlexaスキルを開発しました。<br><img src="/images/20210301/image.png"></p><blockquote><p>リモート会議に特化したリマインダーです、会議時刻を話すと10分前と1分前にリマインダーをセットしてくれます。</p></blockquote><p>是非使っていただけると嬉しいです。<br>その際に得た知見を共有するものとして発表させていただきました。</p><h2 id="発表内容"><a href="#発表内容" class="headerlink" title="発表内容"></a>発表内容</h2><p>体験談のスタイルをとりつつ、Alexaスキルの仕組み、開発の流れを簡単に説明しました。<br>詳細についてはぜひスライドを読んでいただければと思います。<br><a href="https://www.youtube.com/watch?v=BnRMmzBbu-M">動画アーカイブ</a>でも発表の内容を確認できます。</p><h2 id="何が大変だったのか"><a href="#何が大変だったのか" class="headerlink" title="何が大変だったのか"></a>何が大変だったのか</h2><p><img src="/images/20210301/image_2.png"></p><p><img src="/images/20210301/image_3.png"></p><p>理解しておくべきトピックが多いため、うまく動かない場合の原因の切り分けに苦労するのがAlexaスキル開発の特徴です。<br>マイナー、ないし先進的なジャンルの開発ではよくあることですが、調べても有益な情報が出てこない事が開発の難易度を大きく上げているかなと感じました。<br>今後もノウハウを共有していくことができればと思います。</p><h2 id="東京Node学園の今後"><a href="#東京Node学園の今後" class="headerlink" title="東京Node学園の今後"></a>東京Node学園の今後</h2><p>本イベントは今後もリモート開催を続けていく予定です。</p><p>イベント情報は<a href="https://nodejs.connpass.com/">conpass</a>で確認できます、次回の開催が楽しみですね。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210226/index.html" data-iframely-url="//cdn.iframe.ly/ZMlnZ2M?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200907/index.html" data-iframely-url="//cdn.iframe.ly/qWUf2Wl?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210226/&quot;&gt;澁川さん記事&lt;/a&gt;と同じく2/25の&lt;a href=&quot;https://nodejs.connpass.co</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Node.js" scheme="https://future-architect.github.io/tags/Node-js/"/>
    
    <category term="Alexa" scheme="https://future-architect.github.io/tags/Alexa/"/>
    
    <category term="VUI" scheme="https://future-architect.github.io/tags/VUI/"/>
    
  </entry>
  
  <entry>
    <title>アクセシビリティ情報を使った壊れにくいE2Eテスト</title>
    <link href="https://future-architect.github.io/articles/20210226/"/>
    <id>https://future-architect.github.io/articles/20210226/</id>
    <published>2021-02-25T15:00:00.000Z</published>
    <updated>2021-03-06T12:53:51.820Z</updated>
    
    <content type="html"><![CDATA[<p>2/25の<a href="https://nodejs.connpass.com/event/203464/">東京Node学園</a>で発表してきました。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vShjxNOc81VhSwY5vDmH2pY6Opc05ZJuY3aemnQ0dmLc10ppBYxJYfKK9DcHLVxp_dQ0u6FUgaL_I_o/embed?start=false&loop=false&delayms=3000" frameborder="0" width="100%" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>E2Eテストはみんなしていますか？正直言うと、僕はあんまり好きじゃなかったです。お仕事では他の人が入れてくれたものが回っていたりしますが。前職で、SikuliXを使って社内向けのデスクトップアプリケーションのE2Eテストにトライしたことがあるんですが、すぐに壊れて動かなくなるので、費用対効果が出せなくてあきらめました（一人プロジェクトだったのもあります）。</p><ul><li>絵でマッチングを行うのでボタン画像をいっぱいスクショをとっていく必要がある</li><li>OCR機能はOSネイティブボタンの背景のグラデーションとかとの相性もあってあまりうまくいかず・・・自分で学習させるのも情報が少なかった。</li><li>ちょっとツールバーに新しいボタンを追加したりすると、絵が変わって動作しなくなる</li><li>ボタンを画像で置くが、QtはOSごとにネイティブなルック＆フィールで描画するので、macOS用に書いたテストがWindowsで失敗する。両対応は2倍大変</li><li>macOSはDPIの違いがあっても常に二倍の解像度でスクリーンショットが取得できる(これをダウンスケールして表示してるみたい）ので問題が出にくいが、WindowsはDPI違いで取れるスクリーンショットの解像度が変わるので違うマシンで実行すると動かなくなる</li><li>多言語化しても死ぬ</li></ul><p>SikuliXをはじめとしたE2EテストのフレームワークはRPAみたいな自動化を後付けするのと同じような技術セットなので、すでに完成したアプリケーションに対して自動化をしたい、みたいな用途であればつまずく回数も減ってよかったのかもしれませんが、開発しながら利用するとメンテ工数が無限に消費されてしまいます。有名どころのGUIフレームワークに対応したfroglogic社の<a href="https://www.froglogic.com/squish/">Squish</a>を使うと良かったのかもしれませんが、一人プロジェクトの社内ツール向けに稟議をあげるのはちょっと難易度が高い価格。</p><p>この気持ちはいつか克服しないとな、と思っていたところで、この技術ブログで枇榔さんの記事でCypressを知って試してみました。Vue.jsのプロジェクトであれば、プロジェクト作成の時にオプションで入れられますし、自分で入れるとしてもnpm一発でインストールというのが良いですね。導入が面倒というのだけでもプロジェクトで統一的に使うときに放置されがちなので。</p><ul><li><a href="https://future-architect.github.io/articles/20200115/">打鍵テストをCIで回す：Cypress on GitHub Actions</a></li></ul><h1 id="ここがよかったCypress"><a href="#ここがよかったCypress" class="headerlink" title="ここがよかったCypress"></a>ここがよかったCypress</h1><p>インストールの容易性、CIへの組み込みのしやすさなどは上記のエントリーでも十分に語られています。動画やスクリーンショットを残してくれたりするところも良いですし、テストランナーがそれぞれのシーケンスの途中経過を全て残してくれて、問題の分析がしやすいところも良いです。</p><p>「使いやすいテストランナー」はサーバー通信の記録も全て残してくれます。それだけではなく、モック機能を使って読み書きをハックすることも可能です。現在は裏のサーバーはDockerで認証のKeycloak、AWSエミュレータのlocalstackともども起動してE2Eテストしていますが、それでもテストしにくい部分はそのうちチャレンジしてみたいですね。</p><h1 id="E2EテストはDOMのテストじゃない"><a href="#E2EテストはDOMのテストじゃない" class="headerlink" title="E2EテストはDOMのテストじゃない"></a>E2EテストはDOMのテストじゃない</h1><p>いくつか不満はあります。環境設定でたくさんディレクトリとかファイルを置く必要があるもののそのサポートがない（vue-cliで作ったテンプレートから引っこ抜くのが一番楽）だったり（cypress init欲しいissueはあった）、Electron対応が途中で放棄されていたりとか・・・</p><p>一番大きいところは、やはりDOMを意識したテストにならざるを得ないという点ですね。<br>基本的にはSeleinumとかと同等で、タグのツリーをたどってテストする感じです。SikuliXの画像でやるよりは壊れにくいのですが、E2Eテストは「機能」のテストであって、DOMの単体テストではないはず。</p><p>人間がウェブサイトを見るときは「よしログインボタンを押そう」と判断しているわけで、「ヘッダーの中のclass=”login”な最初のDOM要素を探してきてクリックイベントを発行しよう」と思っているわけではなく、このギャップがE2Eテストの見通しの悪さに繋がっているんじゃないかと常々思っており、テストケースはもっと抽象的であるべき、と思っていて、「これはなんか違う」と思っていました。SikuliXの画像とかを大量に用意するテストよりははるかに情報量（バイト数）は少なく済むものの、まだまだ情報は圧縮されるべき。</p><p>E2Eテストは、人間以外の別のエージェントがブラウザ経由でウェブサイトを利用する、というユースケースです。で、本物のウェブサイトをブラウザの上から扱うエージェントというのがすでにあります。スクリーンリーダーです。じゃあ、アクセシビリティ情報を利用してテストを書けばより抽象度が高く、シンプルでわかりやすくて壊れにくいテストになるんじゃないかと思ったわけです。で作ってみました。</p><p>これを考えているときにたまたま読んでいたのが<a href="https://amzn.to/3aA6ZLz">ウェブアクセシビリティ</a>の本でした。視覚障害者の人たちが使うスクリーンリーダーとE2Eテストのテストランナーは似ており、ブラウザを操作するエージェントがいて、ユーザーはそれを操作します。スクリーンリーダー向けにメタ情報を提供するWAI-ARIAの拡張属性をE2Eテストでも活用すれば、E2Eテストの抽象度をあげることができるのではないかと考えました。</p><p><img src="/images/20210226/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-02-21_20.26.25.png"></p><h1 id="WAI-ARIAとは"><a href="#WAI-ARIAとは" class="headerlink" title="WAI-ARIAとは"></a>WAI-ARIAとは</h1><p>HTMLはどんどんデザインの比率が上がってきており、タグ=意味の構造、CSS=デザインという本来の役割を守り切るのは難しく、UIデザインのためにdivタグやらspanタグを追加することはよくあるでしょう。そのようなデザイン重視のウェブサイトを、本来のセマンティックHTMLに近づける属性がWAI-ARIAです。ウェブサイトにアクセシビリティを導入する一連のタグ属性やルールなどです。</p><p>視覚障害者が利用するスクリーンリーダーは例えるなら、CSSを全部オフにした状態でウェブサイトを閲覧するようなものだと思います（僕は利用してないので想像ですが）。タグ構造にデザイン用の要素が満載なこの時代に、スクリーンリーダーというブラウザを外から操作する機械向けにいろいろな情報を教えてあげるルールを規定するのがWAI-ARIAです。</p><p>本来は<code>&lt;button&gt;</code>タグとテキストで表現されれば何も問題はないのですが、画像を使ったり、<code>&lt;div&gt;</code>タグを使ったりすることもあります。本来の役割（<code>role</code>）と、役割に対するラベル（<code>aria-label</code>）をあとから付与できます。これ以外にも、<code>aria-selected</code>（選択されていることを示す）とか<code>aria-hidden</code>（視覚要素でスクリーンリーダーからは隠したい要素）とか、さまざまな属性が定義されています。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>異議あり<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;異議あり&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>意義あり<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;異議あり&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;objection.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;objection.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;異議あり&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;objection-label&quot;</span>&gt;</span>異議あり<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;objection-label&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;objection.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="実装してみたCypressプラグイン"><a href="#実装してみたCypressプラグイン" class="headerlink" title="実装してみたCypressプラグイン"></a>実装してみたCypressプラグイン</h1><p>WAI-ARIAでは単に「ボタン」と表現されていても、↑のように実際のDOMの表現はさまざまです。それぞれごとにバリエーションを網羅してあげる必要があります。こんな感じでロールと名前を使って該当する要素をとってくるライブラリを作りました。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.aria(<span class="string">&#x27;button.異議あり&#x27;</span>).click();</span><br></pre></td></tr></table></figure><p>一瞬業務コードに入れて使ってみましたが、かなり便利でした。<a href="https://gitlab.com/osaki-lab/cypress-aria">リポジトリを作って</a>、button, textbox, slider, radio, checkbox, linkあたりのロールに対応し、これからもっと増やすぞ、と思っていた時に事件は起こりました。</p><h1 id="Testing-Library"><a href="#Testing-Library" class="headerlink" title="Testing Library"></a>Testing Library</h1><p>実用的に使える機能を作り上げて、会社のGLとかにこんなの作ったぞ、と自慢した一週間後に、ほぼ同じようなことをするライブラリを見つけました。</p><p><img src="/images/20210226/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-02-21_11.13.43.png"></p><p><a href="https://testing-library.com/">https://testing-library.com/</a></p><p>これはDOMに対して要素を探し出したり、イベントを起動するというライブラリです。jQueryからDOMの編集機能を取っ払った感じですが、アクセシビリティの情報を使ってDOM要素をピックアップできます。このライブラリは多彩なアダプターがあり、ReactやReact Native、Vue.jsのユニットテストもできそうです。Enzyme + JSDOMみたいな感じで使えそうです。まだ使っていないけど今後使ってみたい。</p><p>このアダプターの1つにCypressアダプターがあります。いろいろコマンドが提供されていますが、<code>findByRole()</code>だけでほぼ済む気がします。というかこれしか使ってない。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.findByRole(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;意義あり&quot;</span> &#125;).click();</span><br></pre></td></tr></table></figure><p>この書き方で、前述のどのタグにでもヒットします。<code>aria-labelledby</code>はなんかヒットしたりしなかったり不安定ですが・・・</p><h1 id="Cypress-Testing-Library導入の効果"><a href="#Cypress-Testing-Library導入の効果" class="headerlink" title="Cypress + Testing Library導入の効果"></a>Cypress + Testing Library導入の効果</h1><p>かつて一世を風靡したかもしれないCucumberほどではないけど、ほぼほぼDSLのようなレベルになっていると思います。”button”とか”dialog”とロール名を書くところで、TypeScriptのコード補完が効かなかったのですが、<a href="https://github.com/testing-library/cypress-testing-library/pull/173">型定義ファイルに対してpull request送って</a>、それがマージされた新バージョンがすでにリリースされていますので、今はゴキゲンにテストが書けます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.findByRole(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;編集&quot;</span> &#125;).click();</span><br><span class="line">cy.findByRole(<span class="string">&quot;dialog&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;ユーザー名編集&quot;</span>).should(<span class="string">&quot;exist&quot;</span>);</span><br><span class="line">cy.findByRole(<span class="string">&quot;textbox&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;ユーザー名入力&quot;</span>).type(<span class="string">&quot;yosuke furukawa&quot;</span>);</span><br><span class="line">cy.findByRole(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;保存&quot;</span> &#125;).click();</span><br><span class="line">cy.findByRole(<span class="string">&quot;cell&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;ユーザー名&quot;</span> &#125;).should(<span class="string">&quot;have.value&quot;</span>, <span class="string">&quot;yosuke furukawa&quot;</span>);</span><br></pre></td></tr></table></figure><p>Cypressの中にはjQueryが内蔵されており、多種多様なセレクターが使えます。jQuery、最近は蛇蝎のごとく嫌われている風潮もありますが、便利で広く使われていた裏返しではあると思いますし、DOMを変更したりしないで文字通りクエリーのために使うにはいまだに便利です。Cypressもまさにその使い方です。</p><p>ただし、単にjQueryを使うだけではなく、SPA固有の挙動に最初から対応しており、ほとんどのケースで「処理待ち」のウェイトを入れなくても、タイムアウト（デフォルト4秒）するまで自動リトライしてくれるようになっていて、時間跨ぎのコードにもかかわらず、awaitなどを書かなくても良いし、時間稼ぎもしなくてよいAPIになっています。テストコードの中にワークアラウンドが顔を出してくるようなことがあまりなく（ゼロではないですが）、これもテストの見通しのよさに寄与しています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.findByRole(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;異議あり&quot;</span> &#125;).click();</span><br><span class="line">   <span class="comment">// ↑ボタンが見つかるまで自動リトライ</span></span><br><span class="line">                                            <span class="comment">// ↑見つかったら初めて実行</span></span><br></pre></td></tr></table></figure><h1 id="テストのTips"><a href="#テストのTips" class="headerlink" title="テストのTips"></a>テストのTips</h1><h2 id="アクセシビリティ属性が必要なことをきちんと伝える"><a href="#アクセシビリティ属性が必要なことをきちんと伝える" class="headerlink" title="アクセシビリティ属性が必要なことをきちんと伝える"></a>アクセシビリティ属性が必要なことをきちんと伝える</h2><p>ウェブのデザインとフロントエンドのコーディングで担当を分けて行うことも多いでしょう。デザイナーの人には「アクセシビリティの情報は消さないで！」「なるべくセマンティックHTMLにして！」と伝えた方が良いですね。</p><p>マウスオーバーでCSSのみでふわっとボタンがポップアップしてくるテクニックはJSを使うよりもクールな気がします。また、テキストをCSSで差し込むとかもよくやるテクニックですね。しかし、アクセシビリティを考えると要注意です。Cypressでも:hoverで出てくる要素の存在テストってできないので。きっとスクリーンリーダーも苦手なんじゃないかと。</p><p>このあたりはデザインロールの人と丁寧にやっていく必要がありそうな気がします。</p><h2 id="最初に存在チェックのテストを書く"><a href="#最初に存在チェックのテストを書く" class="headerlink" title="最初に存在チェックのテストを書く"></a>最初に存在チェックのテストを書く</h2><p>存在チェックのテストをまず書いておくと、テストコードを書く速度があがります。</p><p>まず、このテストが通ることで、セレクターが間違ってないことが確認できます。「宣言的」は宣言が間違っていたときのフィードバックが弱いことが多いです。まず要素一覧を確認するテストがあると、実際に動くテストを書こうとして、期待通りに動かなかった場合の問題追跡がしやすくなります。指差し呼称ですね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&quot;コンソールに必要な要素がある&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.findByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;ディバイディングドライバー射出&quot;</span> &#125;).should(<span class="string">&#x27;exist&#x27;</span>)</span><br><span class="line">  cy.findByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;ファイナルフュージョン承認&quot;</span> &#125;).should(<span class="string">&#x27;exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>あと、登場人物がすべてリストアップされていると、挙動のテストを書くときに、ここに書かれている要素をコピーして書けば良いので楽ですね。</p><p>なお、あとで使うからといって変数に入れても正しくは動きません。</p><h2 id="ホットスポットのロールをどうするか"><a href="#ホットスポットのロールをどうするか" class="headerlink" title="ホットスポットのロールをどうするか"></a>ホットスポットのロールをどうするか</h2><p>サーバーからとってきた動的な値を表示するテキストって、DOM上は単なるテキストなのでロールを持っていないのですよね。テスト上はここにロールがあって要素取得できるととても助かる。</p><p>次のどちらかな、と思っているのですが、どちらの方がスクリーンリーダーユーザーにとって自然なロール指定のかはちょっとわかってません。とりあえず前者にしています。</p><ul><li>role=”cell”でテーブルのようにしてしまう</li><li>role=”textbox”で読み込み専用テキストボックスにする</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">/* role=cellでアクセス */</span> &#125;</span><br><span class="line">&lt;div role=<span class="string">&quot;cell&quot;</span>&gt;&#123;userName&#125;&lt;/div&gt;</span><br><span class="line">&#123; <span class="comment">/* role=textboxでアクセス */</span> &#125;</span><br><span class="line">&lt;input readonly&gt;&#123;userName&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>E2Eのテストコードは、「もっと短く表現できるはず」と昔から考えていましたが、それに近いものがCypress + Testing Libraryで実現できました。</p><p>アクセシビリティは、直接人間に対して効果を発揮するわけではなく、人間を補助するエージェントへの情報を増やすことで、結果的に人間を助ける、というのが今のウェブのアクセシビリティです。その特性はE2Eテストにも恩恵があります。</p><p>極端な例をあげれば、ボタンの名前が維持されれば、ボタンの位置がヘッダーにあろうが、サイドバーにあろうが、テストは壊れないのですよね。そのぐらい抽象度があげやすくなります。今まで、「E2Eテストは書く手間が大きく、なおかつ壊れやすく、コストパフォーマンスが悪い」と思っていましたが、だいぶ心理的な負担は下がり、最初からやっておけば、と思うようになりました。</p><p>当初は40分ぐらい発表できるネタとして考えていましたが、発表希望者多数により10分となってしまい、発表もだいぶ駆け足になってしまいました。後日、フューチャーの社外向け勉強会の<a href="https://future.connpass.com/">Future Tech Night</a>で改めて、Cypressについて初心者でもわかるように説明できれば、と思って企画中です。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200115/index.html" data-iframely-url="//cdn.iframe.ly/uGST3JI?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2/25の&lt;a href=&quot;https://nodejs.connpass.com/event/203464/&quot;&gt;東京Node学園&lt;/a&gt;で発表してきました。&lt;/p&gt;
&lt;iframe src=&quot;https://docs.google.com/presentation/d/e</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
    <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
    <category term="E2Eテスト" scheme="https://future-architect.github.io/tags/E2E%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="HTML" scheme="https://future-architect.github.io/tags/HTML/"/>
    
    <category term="accessibility" scheme="https://future-architect.github.io/tags/accessibility/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDBから効率的に大量のデータを取得する方法</title>
    <link href="https://future-architect.github.io/articles/20210225/"/>
    <id>https://future-architect.github.io/articles/20210225/</id>
    <published>2021-02-24T15:00:00.000Z</published>
    <updated>2021-03-02T02:20:30.215Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210225/title.png"></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニット所属の村上です。<br>最近データ分析絡みでDynamoDBを触る機会が多く、DynamoDBが体の一部みたいになってきました。<br>本記事の結論はこれです。</p><p><strong>大量に取得したいデータに共通して存在する値の属性をGSIとして設定しよう</strong></p><p>予備知識から順に解説していきます。</p><h1 id="ScanとQuery"><a href="#ScanとQuery" class="headerlink" title="ScanとQuery"></a>ScanとQuery</h1><p>DynamoDBにはScanとQueryという操作が存在します。それぞれ簡単に説明すると、以下のようになります。</p><ul><li>Scan：DB全体を取得する操作</li><li>Query：指定した属性に指定した値を持つデータのみを抽出して取得する操作</li></ul><p>取得したいデータがDBに存在するほとんど全てのデータであれば、Scanで取得するのが効率的なのですが、必ずしもそのような状況であるとは限りません。Queryによって、特定の値を持つデータのみを取得したい場合もあると思います。</p><p>今回は後者の場合を想定し、Queryによって特定の値を持つ大量のデータを効率的に取得する方法について解説します。</p><h1 id="DynamoDBの制限"><a href="#DynamoDBの制限" class="headerlink" title="DynamoDBの制限"></a>DynamoDBの制限</h1><p>DynamoDBから効率的にデータを取得するにあたり、DynamoDBに存在する制限を知っておかなければなりません。今回対象とするQuery操作には、<code>1度のQuery操作での取得サイズ上限は1MB</code>という制限が存在します。詳しくは<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Query.html">公式ドキュメント</a>をご覧ください。</p><p>この制限を超えるサイズのデータを取得する場合、Query操作を繰り返し行うことによって全てのデータを取得することになります。従って、大量のデータを取得する場合は1回当たりのQueryで上限の1MBをしっかりと使い切ることが、効率的なデータの取得につながります。</p><h1 id="GSI（グローバル・セカンダリ・インデックス）を工夫する"><a href="#GSI（グローバル・セカンダリ・インデックス）を工夫する" class="headerlink" title="GSI（グローバル・セカンダリ・インデックス）を工夫する"></a>GSI（グローバル・セカンダリ・インデックス）を工夫する</h1><p>DynamoDBから特定の条件を満たすデータを大量に取得する場合は、GSIを工夫することが重要となります。これについて順に解説していきます。</p><h2 id="GSIの特徴"><a href="#GSIの特徴" class="headerlink" title="GSIの特徴"></a>GSIの特徴</h2><p>GSIには重複が許されるという特徴があります。実際にDBを操作しながら見ていきたいと思います。</p><p>今回の実験では最近愛用している<code>NoSQL Workbench</code>というアプリを使います。これはクラウドやローカルのDynamoDBをGUIで操作、可視化できるツールで、AWS公式から配布されています。ダウンロードは<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/workbench.settingup.html">こちら</a>。</p><h3 id="パーティションキーとソートキー"><a href="#パーティションキーとソートキー" class="headerlink" title="パーティションキーとソートキー"></a>パーティションキーとソートキー</h3><p>DynamoDBにはパーティションキーとソートキーという概念があります。GSIのパーティションキー、ソートキーと呼び方を区別するために、本記事ではプライマリパーティションキー、プライマリソートキーと呼ぶことにします。<br>基本的にはこれらの値の組み合わせが重複することは許されません。例えば以下のような設定と内容のテーブルに対してこれらが重複したデータを追加しようとしたらどうなるか試してみます。</p><h4 id="テーブル設定"><a href="#テーブル設定" class="headerlink" title="テーブル設定"></a>テーブル設定</h4><table><thead><tr><th align="center">データ項目</th><th align="center">キー</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">PK</td></tr><tr><td align="center">name</td><td align="center">SK</td></tr><tr><td align="center">brand</td><td align="center">GSI PK</td></tr><tr><td align="center">process</td><td align="center">GSI SK</td></tr></tbody></table><p>※PK：パーティションキー、SK：ソートキー</p><h4 id="テーブル内容"><a href="#テーブル内容" class="headerlink" title="テーブル内容"></a>テーブル内容</h4><img src="/images/20210225/image.png" style="border:solid 1px #000000"><h4 id="実験"><a href="#実験" class="headerlink" title="実験"></a>実験</h4><p>既存のデータと同じキー値</p><ul><li>id：003</li><li>name：3800X</li></ul><p>に対して、brandだけ違う値にしてPutItem操作を実行してみます。</p><img src="/images/20210225/image_2.png" style="border:solid 1px #000000"><p>PutItem操作実行後のテーブルの様子です。データ数は変わらず、同じキー値を持つデータが<code>上書き</code>されています。</p><img src="/images/20210225/スクリーンショット_2021-02-14_173302.png" style="border:solid 1px #000000"><p>このように、プライマリパーティションキーとプライマリソートキーの同じ組み合わせに対する重複は許されておらず、同じキー値でデータを追加しようとすると、そのデータが<code>上書き</code>されます。</p><h3 id="GSIのパーティションキーとソートキー"><a href="#GSIのパーティションキーとソートキー" class="headerlink" title="GSIのパーティションキーとソートキー"></a>GSIのパーティションキーとソートキー</h3><p>一方GSIのパーティションキーとソートキーの組み合わせに対しては、重複が許されています。従って、先ほどのテーブルで1行目と2行目のデータのbrandとprocessは全く同じですが、brand、processをそれぞれGSIのパーティションキー、ソートキーに設定しても、片方のデータが消えることはありません。テーブル設定に記載の通り、すでにこれらのGSI設定は適用済みです。</p><p>ここにさらにbrandとprocessが重複するデータを追加してみたいと思います。</p><img src="/images/20210225/スクリーンショット_2021-02-14_174037.png" style="border:solid 1px #000000"><p>PutItem操作実行後のテーブルの様子です。データが<code>上書き</code>されることなく、<code>追加</code>されている様子が確認できると思います。</p><img src="/images/20210225/image_3.png" style="border:solid 1px #000000"><h2 id="GSIの大量データ取得への応用"><a href="#GSIの大量データ取得への応用" class="headerlink" title="GSIの大量データ取得への応用"></a>GSIの大量データ取得への応用</h2><p>以上の実験により、以下のことがわかりました。</p><ul><li>プライマリパーティションキー、プライマリソートキーの組み合わせの重複は許されない</li><li>GSIパーティションキー、GSIソートキーの組み合わせの重複は許される</li></ul><p>これらの性質より、<strong>大量に取得したいデータに共通して存在する値の属性をGSIとして設定する</strong>ことで、欲しいデータをごっそり取得することが可能となります。<br>実際にこの性質を利用してQueryしてみたいと思います。<br>GSIパーティションキーである<code>brand</code>に<code>Intel</code>、GSIソートキーである<code>process</code>に<code>14nm</code>を指定します。</p><img src="/images/20210225/image_4.png" style="border:solid 1px #000000"><p>Query操作の実行結果です。</p><img src="/images/20210225/image_5.png" style="border:solid 1px #000000"><p>指定した値を持つデータを1発で全て取得することができました。</p><p>今回の例ではそもそものデータ数が少ないため、1度のQueryで目的のデータを全て取得できましたが、実際には大量のデータを取得することを想定していますので、冒頭で説明したQueryの1MB制限に引っ掛かることが前提となります。よって、Queryを繰り返し行って目的のデータを全て取得することになります。この時、1MB制限を上限いっぱいまで使うことができるため、効率的であると言えます。</p><h2 id="備考"><a href="#備考" class="headerlink" title="備考"></a>備考</h2><p>そもそもプライマリパーティションキー、プライマリソートキー自体が「大量に取得したいデータに共通して存在する値の属性」であれば問題ないのですが、一般的にDynamoDBでプライマリパーティションキーとプライマリソートキーをこのような観点から設計することはあまりないと思います。また、GSIは後から追加することができるという拡張性の高さからも、GSIの工夫が重要となります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回はDynamoDBから特定のデータを効率的に大量に取得する方法について解説しました。</p><p>他にも「こんな方法があるよ」などのご意見ありましたら是非教えていただけると嬉しいです！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://future-architect.github.io/articles/20201130/">DynamoDBのページング</a></li><li><a href="https://future-architect.github.io/articles/20200818/">【入門】私を苦しめたDynamoDB</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210225/title.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXユニット</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="データ分析" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90/"/>
    
    <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
  </entry>
  
  <entry>
    <title>GCPで構築するサーバーレスデータレイク①</title>
    <link href="https://future-architect.github.io/articles/20210224/"/>
    <id>https://future-architect.github.io/articles/20210224/</id>
    <published>2021-02-23T15:00:00.000Z</published>
    <updated>2021-03-06T08:55:50.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GCPで構築するサーバーレスデータレイク①"><a href="#GCPで構築するサーバーレスデータレイク①" class="headerlink" title="GCPで構築するサーバーレスデータレイク①"></a>GCPで構築するサーバーレスデータレイク①</h1><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG中神です。</p><p>GCPで構築するサーバーレスデータレイクの連載第1弾の記事となります。GCPでデータレイクを構築する場合のポイントについて連載形式でご紹介していければと思います。</p><h2 id="データレイクとは"><a href="#データレイクとは" class="headerlink" title="データレイクとは"></a>データレイクとは</h2><p>まずはデータレイクがどのようなものなのか整理していきましょう。</p><h3 id="データレイクとは？"><a href="#データレイクとは？" class="headerlink" title="データレイクとは？"></a>データレイクとは？</h3><p>そもそもデータレイクとはどのような定義になるでしょうか。</p><p>Wikipediaでは<a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%AC%E3%82%A4%E3%82%AF">データレイク</a>は以下のように定義されていますね。</p><blockquote><p>データレイク (Data lake) は構造化/非構造化データやバイナリ等のファイル含めたデータを一元的に格納するデータリポジトリ。<br>一般的に、データレイクはレポート、可視化、分析、機械学習に利用されるエンタープライズのデータのコピーや返還後のデータを一カ所に集約する。<br>データレイクはリレーショナルデータベースの構造化データ（列と行）や、半構造化データ（CSV、ログ、XML、JSON）、非構造化データ（Eメール、ドキュメント、PDF）、バイナリデータ（画像、音声、映像）を含めることができる。<br>適切に管理されておらず、ユーザが意図するデータへのアクセシビリティが低く、小さな価値しか提供できない低品質のデータレイクはデータの沼と表現される。</p></blockquote><p>その他、主要なクラウドベンダーも以下のように定義しています。<br><a href="https://cloud.google.com/solutions/data-lake?hl=ja">(GCP) データレイクのモダナイゼーション</a><br><a href="https://aws.amazon.com/jp/big-data/datalakes-and-analytics/what-is-a-data-lake/">(AWS) データレイクとは - Amazon Web Services (AWS)</a><br><a href="https://azure.microsoft.com/ja-jp/solutions/data-lake/">(Azure) Data Lake | Microsoft Azure</a></p><p>各引用元の内容を要約すると以下のような特徴が浮かび上がってきます。<br>これらの条件を満たすものをデータレイクとして位置づけることが出来ると思います。</p><ul><li>構造化データ、半構造化データ、非構造化データなどデータのフォーマットに関わらず一元的にデータを保存する。</li><li>保存したデータは分析、機械学習など様々な用途で利用される。</li><li>データマートやデータウェアハウスとはアプローチが異なる。</li></ul><h4 id="データレイクで管理されるデータ群"><a href="#データレイクで管理されるデータ群" class="headerlink" title="データレイクで管理されるデータ群"></a>データレイクで管理されるデータ群</h4><table><thead><tr><th align="left">データ種別</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">構造化データ</td><td align="left">RDBMS、CSVなどの行列データ</td></tr><tr><td align="left">半構造化データ</td><td align="left">XML、JSONなど</td></tr><tr><td align="left">非構造化データ</td><td align="left">画像、音声、映像やPDFデータなど</td></tr></tbody></table><h3 id="データレイクアプローチ"><a href="#データレイクアプローチ" class="headerlink" title="データレイクアプローチ"></a>データレイクアプローチ</h3><p>データレイクの特徴の一つに「データマートやデータウェアハウスとはアプローチが異なる」というものがありましたが具体的にはどのような事なのか記載します。</p><p>データレイクの検討を進めるにあたり大きな考え方として、トップダウン的な考え方とボトムアップ的な考え方の2種類があるのでご紹介します。</p><p><img src="/images/20210224/image.png"></p><h4 id="それぞれのアプローチによる違い"><a href="#それぞれのアプローチによる違い" class="headerlink" title="それぞれのアプローチによる違い"></a>それぞれのアプローチによる違い</h4><ul><li>トップダウン的なアプローチの特徴<ul><li>企画時点で利用目的がはっきりしており、要件や目的に基づいて具体化していく。</li><li>半面、用途がはっきりしている分アドホックな作りになり拡張性が損なわれやすいリスクもあり。</li><li>企画時点で第3者に導入効果を説明しやすい。</li><li>要件や目的に基づいて具体化するため導入効果が早めに出やすい。</li></ul></li><li>ボトムアップ的なアプローチの特徴<ul><li>企画時点でどのようにデータ活用するか明確ではないため、まずはデータ収集して観察や仮説に基づき具体化していく。</li><li>半面、検討に正解がないため品質や利用価値の低いデータレイク（泥沼化）となるリスクもある。</li><li>企画時点で第3者に導入効果を説明しにくい。</li><li>運用の中でPoCや拡張を継続的に行って検証していく必要があるため導入効果が出るまで時間がかかる。</li></ul></li></ul><h4 id="どちらかのアプローチが望ましいのか？"><a href="#どちらかのアプローチが望ましいのか？" class="headerlink" title="どちらかのアプローチが望ましいのか？"></a>どちらかのアプローチが望ましいのか？</h4><p>アプローチとしてはどちらも正しいと言えます。ただし、企画時点の状況や最終的な目標をどこに置くのかによって柔軟にアプローチを変化させる必要があると考えます。<br>例えば、特定の利用に限定したDWHやデータマートで十分なのであればアドホックなシステムとしてトップダウンアプローチで検討していけばいいと思いますし、幅広いデータを保存するデータレイクを検討したいのであればボトムアップアプローチで検討を進めていければいいと思います。</p><p>ただ、現実的には下記で言う真ん中のパターン（ハイブリッド）が多いと思いますので、それぞのアプローチの特性や、将来像などを加味してバランスを取りながら検討を進めていく事が重要であると考えます。</p><ul><li>トップダウン的なアプローチが適している<ul><li>特定の利用に限定したDWHやデータマートで十分</li></ul></li><li>トップダウンとボトムアップアプローチのハイブリッドが適している<ul><li>企画時点では特定の利用限定で大丈夫だが最終的にはデータレイクとして拡張していきたい</li></ul></li><li>ボトムアップ的なアプローチが適している<ul><li>幅広いデータを保存するデータレイクを検討したい</li></ul></li></ul><h2 id="データレイクのシステム化"><a href="#データレイクのシステム化" class="headerlink" title="データレイクのシステム化"></a>データレイクのシステム化</h2><p>前置きが長くなりましたが、上記のような検討を経て、実際にどのようにシステム化するかというところですがデータレイクの特性上、どの程度のデータ量を扱うのか？どの程度のクエリが実行されるのか？あらかじめ定義することが難しいので拡張性の高いクラウドプラットフォームを活用していく事が基本的な方針になるかと思います。</p><p>その中でもGoogle Cloud Platform（以下、GCP）を使うと、比較的容易にさらにサーバーレスでデータレイクを構築することができるため小規模・低コストで進めて徐々に規模を拡大していきたいような要望の場合は特に適しているのではないかと思います。</p><h3 id="データレイクのサービスレベル"><a href="#データレイクのサービスレベル" class="headerlink" title="データレイクのサービスレベル"></a>データレイクのサービスレベル</h3><p>また、サーバーレスでデータレイクを構築していくにおいても、通常のシステムと同じようにどの程度のサービスレベルで提供するかという検討が非常に重要になります。内容はいわゆる非機能の定義とほぼ同じですが、データレイクで特に重要なポイントとしては以下のようなところがあげられます。</p><ul><li>可用性<ul><li>システムの重要度（データレイク停止による業務影響など）、サービス継続性、メンテンナス時間の確保</li><li>BCP対策の有無、バックアップなど</li></ul></li><li>性能/拡張性<ul><li>可能な限りオートスケール構成とする</li><li>おおよその処理量やデータ量の見込みをたてる（処理量やデータ量を明確に定義することは難しいが可能な範囲で）</li><li>利用するプロダクトの制約・制限の把握など</li></ul></li><li>セキュリティ<ul><li>企業や業界で準拠すべき規約やルール、個人情報の取り扱い有無、インターネットアクセスなど</li></ul></li><li>運用性<ul><li>監視、認証など既存のシステムとの連携</li><li>データレイク導入後のデータ追加や利用者追加などの運用作業項目や運用体制の確立</li><li>運用作業は極力汎化してシンプルなものにしておくなど（特定業務向けの作業や人依存になるような運用は避ける）</li></ul></li></ul><h3 id="データレイクの構成要素"><a href="#データレイクの構成要素" class="headerlink" title="データレイクの構成要素"></a>データレイクの構成要素</h3><p>それでは次にデータレイクを構成するためにどのような要素が必要なのか見ていきましょう。</p><p>以下はGoogleの<a href="https://services.google.com/fh/files/misc/principles_best_practices_for_data-governance.pdf?hl=ja">Principles and best practices for data governance in the world</a>でも使用されている概念でGartner社により定義されたデータガバナンスのフレームワーク（Gartner, Applying Effective Data Governance to Secure Your Data Lake, Sanjeev Mohan, April 17, 2018）です。</p><p><img src="/images/20210224/image_2.png"></p><p>それぞれの要素で必要になる機能は概ね以下のようなところでしょうか。<br>これらをGCPのプロダクトを使って構成していく事になります。</p><table><thead><tr><th align="left">構成要素</th><th align="left">機能群</th></tr></thead><tbody><tr><td align="left">Ingestion</td><td align="left">取り込み</td></tr><tr><td align="left">Data Discovery and Curation</td><td align="left">収集、分類、履歴、準備、品質管理</td></tr><tr><td align="left">Data Management</td><td align="left">データ管理、メタデータ管理、カタログ管理、マスタデータ管理、アーカイブ管理、品質管理</td></tr><tr><td align="left">Data Privacy, Security and Access Management</td><td align="left">データセキュリティ、物理的セキュリティ、暗号化、アクセス管理、監査</td></tr><tr><td align="left">Consumption</td><td align="left">利用</td></tr></tbody></table><h3 id="GCPを用いたデータレイク"><a href="#GCPを用いたデータレイク" class="headerlink" title="GCPを用いたデータレイク"></a>GCPを用いたデータレイク</h3><p>これらのことを踏まえてGCPでデータレイクを構築する場合、以下のようなプロダクトの組み合わせで実現可能です。<br>特殊な要件がない限りはサーバーレスで実現可能ですので、インフラもコード化による構成管理がしやすい状態を保てると思います。<br>また、データマートやデータ分析はGCP以外の場所で行うといったようにマルチクラウドな構成に柔軟に発展させることも可能です。<br>※特殊な機能やカスタマイズが必要な場合は仮想サーバーやコンテナが必要になることもあります。</p><p>以下は、<a href="https://cloud.google.com/solutions/smart-analytics?hl=ja">Google Cloud スマート アナリティクス ソリューション</a>で定義されているGCPのデータ分析関連のプロダクトになります。<br><img src="/images/20210224/image_3.png"></p><p>プロダクトの選択肢はいろいろありますが、データレイク関連で特に注目したいプロダクトの概要やポイントを以下に記載します。<br>※一部、上記の図に記載されていないプロダクトもあります。</p><ul><li><strong><a href="https://cloud.google.com/data-catalog?hl=ja">Data Catalog</a></strong><ul><li>フルマネージドでスケーラビリティの高いデータ検出およびメタデータ管理サービス</li><li>構造化データ、半構造化データ、非構造化データに対するメタデータ（テクニカル、ビジネスメタデータ）の管理やタグ付けが可能</li><li>DLPとの連携で個人情報に対するタグ付けも可能</li></ul></li><li><strong><a href="https://cloud.google.com/data-fusion?hl=ja">Cloud Data Fusion</a></strong><ul><li>フルマネージドでクラウドネイティブなデータをあらゆる規模で統合可能</li><li>GUIでETL/ELTパイプラインの作成およびデプロイが可能</li><li>OSSのCDAPがベースであり互換性がある</li><li>事前構成されたライブラリ群を利用してGUIでパイプラインを作成可能</li><li>パイプラインはDataprocで実行される</li><li>パイプラインの中でGCS、BigQueryはもちろん、AWS、Azure、Snowflakeなど外部サービスと連携する事も可能</li></ul></li><li><strong><a href="https://dataform.co/">Dataform</a></strong><ul><li>DWH内のSQLベースの変換処理の順次実行定義が可能</li><li>Googleのプロダクト以外にもAWS Redshift、Snowflake、Azure SQL Data Warehouseなどに対しても利用することが可能</li></ul></li><li><strong><a href="https://cloud.google.com/dlp?hl=ja">Cloud Data Loss Prevention</a></strong><ul><li>機密性の高いデータを検出、分類、保護するためのフルマネージドサービス</li><li>個人情報を含むデータを自動検出してマスクすることも可能</li><li>Cloud KMSなどと組み合わせて柔軟な鍵管理を行う事も可能</li></ul></li><li><strong><a href="https://cloud.google.com/storage?hl=ja">Cloud Storage</a></strong><ul><li>高耐久でスケーラブルなオブジェクトストレージ</li><li>バケット単位でクラス、ライフサイクル、アクセス権限を設定することができ、データを層で管理したい場合に有用</li></ul></li><li><strong><a href="https://cloud.google.com/bigquery?hl=ja">BigQuery</a></strong><ul><li>サーバーレスでスケーラビリティと費用対効果に優れたマルチクラウド データウェアハウス</li><li>ANSI SQL を使用してペタバイト規模のデータを極めて高速に分析可能</li><li>柔軟性の高いマルチクラウド分析ソリューションで、AWSなどクラウドをまたいだデータによる分析が可能</li><li>また、カラム単位でアクセス制御など細かい単位でアクセス制御を行うことが可能</li></ul></li><li><strong><a href="https://cloud.google.com/looker?hl=ja">Looker</a></strong><ul><li>ビジネス インテリジェンス、データ アプリケーション、組み込み型アナリティクス向けのエンタープライズプラットフォーム</li><li>データへのアクセスポイントを一元化することで保存データ利用におけるガバナンスを利かせることが可能</li><li>Google Cloud、AWS、Azure、オンプレミスのデータベースなど分散されたデータを統合的に管理することも可能</li></ul></li></ul><h3 id="リファレンスアーキテクチャ（ミニマム構成）と構成ポイント"><a href="#リファレンスアーキテクチャ（ミニマム構成）と構成ポイント" class="headerlink" title="リファレンスアーキテクチャ（ミニマム構成）と構成ポイント"></a>リファレンスアーキテクチャ（ミニマム構成）と構成ポイント</h3><p>これらのGCPプロダクトを用いたリファレンスアーキテクチャを以下に記載します。</p><p>記載するアーキテクチャはミニマム構成となりますので、必要に応じてカスタマイズする事を前提とした構成になります。また、構成のパターンとしては大きくETLモデルとELTモデルに分かれますので状況に応じて使い分けることを想定しています。</p><h4 id="ETLモデル"><a href="#ETLモデル" class="headerlink" title="ETLモデル"></a>ETLモデル</h4><p>Extract（抽出） Transform（変換） Load（書き出し）を行うモデル。</p><p>データ収集後に、各種変換を行ってからデータベースに格納するモデル。<br>半構造化や非構造化データがある場合に適したモデル。</p><p><img src="/images/20210224/image_4.png"></p><h4 id="ELTモデル"><a href="#ELTモデル" class="headerlink" title="ELTモデル"></a>ELTモデル</h4><p>Extract（抽出） Load（書き出し）Transform（変換）を行うモデル。<br>データ収集後に、データベースに格納しデータベース上で各種変換等を行うモデル。<br>構造化データのみ扱う場合やSQLのみで加工や変換が完結する場合に適したモデル。</p><p><img src="/images/20210224/image_5.png"></p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>いかがでしたでしょうか？</p><p>GCPを用いると比較的容易にデータレイクの構築ができるので、本来の目的であるデータ活用に重きを置いた検討が出来るのではと思います。今後もデータレイクの構成要素（データ収集、データ管理、データセキュリティ、データ利用）毎に、より詳細な部分を記事化していければと考えています。（不定期）</p><p>特にボトムアップ的なアプローチとなる場合は、泥沼化させずにどうデータを運用管理していくか？といった部分が非常に重要になってきますのでそのようなポイントに触れるような感じで記事化できればと思っています。</p><h2 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h2><p><strong>[Google資料]</strong></p><ul><li><a href="https://cloud.google.com/solutions/data-lake?hl=ja">データレイクのモダナイゼーション</a></li><li><a href="https://cloud.google.com/solutions/build-a-data-lake-on-gcp/?hl=ja">データレイクとしてのCloud Storage</a></li><li><a href="https://cloud.google.com/solutions/smart-analytics?hl=ja">Google Cloud スマート アナリティクス ソリューションでイノベーションを促進する</a></li><li><a href="https://services.google.com/fh/files/misc/principles_best_practices_for_data-governance.pdf?hl=ja">Principles and best practices for data governance in the world</a></li><li><a href="https://cloud.google.com/storage?hl=ja">Cloud Storage</a></li><li><a href="https://cloud.google.com/data-catalog?hl=ja">Data Catalog</a></li><li><a href="https://cloud.google.com/data-fusion?hl=ja">Cloud Data Fusion</a></li><li><a href="https://cloud.google.com/dlp?hl=ja">Cloud Data Loss Prevention</a></li><li><a href="https://cloud.google.com/bigquery?hl=ja">BigQuery</a></li><li><a href="https://cloud.google.com/looker?hl=ja">Looker</a></li><li><a href="https://dataform.co/">Dataform</a></li></ul><p>以下は参照するためにユーザー登録が必要なります。</p><ul><li><a href="https://cloudonair.withgoogle.com/events/solution-data-analytics?talk=analytics-session1-2">Google Cloud Smart Analytics ソリューションの方向性と最新アップデート情報</a></li><li><a href="https://cloudonair.withgoogle.com/events/solution-data-analytics?talk=analytics-session2-2">GCP のデータパイプライン サービスの紹介と選び方</a></li><li><a href="https://cloud.withgoogle.com/next/sf/sessions?gate=true&session=DA100-JP#data-analytics">Google Cloudでデータレイクを構築</a></li></ul><p><strong>[その他資料]</strong></p><ul><li><a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%AC%E3%82%A4%E3%82%AF">データレイク - Wikipedia</a></li><li><a href="https://aws.amazon.com/jp/big-data/datalakes-and-analytics/what-is-a-data-lake/">(AWS) データレイクとは - Amazon Web Services (AWS)</a></li><li><a href="https://azure.microsoft.com/ja-jp/solutions/data-lake/">(Azure) Data Lake | Microsoft Azure</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GCPで構築するサーバーレスデータレイク①&quot;&gt;&lt;a href=&quot;#GCPで構築するサーバーレスデータレイク①&quot; class=&quot;headerlink&quot; title=&quot;GCPで構築するサーバーレスデータレイク①&quot;&gt;&lt;/a&gt;GCPで構築するサーバーレスデータレイク①&lt;/</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="データレイク" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%AC%E3%82%A4%E3%82%AF/"/>
    
    <category term="要件定義" scheme="https://future-architect.github.io/tags/%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9/"/>
    
    <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>Auth0で認証成功後に任意のWebページを表示させたい</title>
    <link href="https://future-architect.github.io/articles/20210222/"/>
    <id>https://future-architect.github.io/articles/20210222/</id>
    <published>2021-02-21T15:00:00.000Z</published>
    <updated>2021-03-08T02:19:43.454Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DX-Unit の先山です。</p><p><a href="https://auth0.com/jp/">Auth0</a> を使ってアプリを構築しています。とある案件で、ユーザがログインした後に任意のページを表示させたいニーズがありました。こういった時はアプリ側でやってあげれなくもないのですが、複数のアプリが Auth0 で認証している場合には、アプリの数だけ改修が発生してしまいます。今回は context.redirect という Auth0 のユニークな機能を使って、改修を最小限に抑える方法を紹介します。</p><h1 id="Auth0とは？"><a href="#Auth0とは？" class="headerlink" title="Auth0とは？"></a>Auth0とは？</h1><img src="/images/20210222/top.png" class="img-middle-size"><p><a href="https://future-architect.github.io/articles/20200122/">Auth0導入編</a>をぜひ参照ください。他にも<a href="https://future-architect.github.io/tags/Auth0/">Auth0関連</a>の記事があります。</p><h1 id="context-redirect-機能紹介"><a href="#context-redirect-機能紹介" class="headerlink" title="context.redirect 機能紹介"></a>context.redirect 機能紹介</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Auth0 はユーザが認証成功時に任意の JavaScript スクリプトを実行する Rules を提供しています。引数の context に redirect パラメータをセットすることで、任意のWebページに画面遷移することが可能です。本来であれば redirect_uri にリダイレクトしてアプリケーションへ戻るのですが、その前に1つユーザアクションを介入させることができます。</p><p><a href="https://auth0.com/docs/rules/redirect-users">Auth0公式ドキュメント - Redirect Users From Within Rules</a></p><p>全然関係ない URL にリダイレクトさせちゃうと、認証できなくなっちゃうんじゃないの？と思われるかもしれませんが。リダイレクト先にはクエリパラメータで <code>state=&#123;ハッシュ値&#125;</code> が渡されます。この値を Auth0 側で管理しています。認証を再開するには Auth0テナントのドメインに <code>/continue?state=&#123;ハッシュ値&#125;</code> という形式で画面遷移します。</p><h2 id="実装時の注意点"><a href="#実装時の注意点" class="headerlink" title="実装時の注意点"></a>実装時の注意点</h2><p>注意するべき点を紹介します。</p><ul><li>全ての Rules は2回実行されます。「context.redirect によってリダイレクトされる前」と「リダイレクトから戻ってきた後」の合計2回です。各 Rules が何度起動しても問題ないような実装をしましょう。</li><li>ある Rules で context.redirect にパラメータをセットしても、その Rules 終了後にリダイレクトが発生するわけではありません。全ての Rules の実行が終わってから context の中身が評価されリダイレクトが発生します。</li><li>context.redirect が有効なのは認証1回につき1度のみです。リダイレクトから戻ってきた後は、認証成功とともに callback_uri でアプリケーションへ戻ります。</li></ul><h2 id="ユースケース"><a href="#ユースケース" class="headerlink" title="ユースケース"></a>ユースケース</h2><p>Auth0 のドキュメントではユーザにパスワード更新を促す例が紹介されています。有効期限が短いトークンをクエリパラメータ経由で渡していますね。このやり方であればトークンが必要なAPIサーバとの通信もできますね。勉強になりました。これ以外にも、例えば利用規約の更新をユーザに表示させたい場合などにも使えそうです。</p><p><a href="https://auth0.com/docs/rules/redirect-users#force-password-change-example">https://auth0.com/docs/rules/redirect-users#force-password-change-example</a></p><h1 id="サンプル実装"><a href="#サンプル実装" class="headerlink" title="サンプル実装"></a>サンプル実装</h1><p>ログイン画面で ID/Pass を入力成功した後、ある画面へ遷移させてユーザアクションを求め、ユーザがその画面で承諾しないと認証成功しないといったサンプルを実装します。Auth0 が提供する <a href="https://github.com/auth0-samples/auth0-vue-samples/tree/master/01-Login">Vueのサンプル実装</a>を改造します。</p><h2 id="処理のフロー"><a href="#処理のフロー" class="headerlink" title="処理のフロー"></a>処理のフロー</h2><ul><li>アプリがログイン画面を開くいてログインを試行する</li><li>ログインが成功したら指定した localhost:3000/consent（以降、確認画面と呼びます）へリダイレクトして表示させる</li><li>確認画面でユーザが “Yes” をクリックしたら再び Auth0 の認証処理を再び実行させ、認証成功してアプリへ戻る</li><li>“Yes” と回答したユーザは、次回以降のログインではその確認はせず、認証を成功させる</li><li>（もし確認画面で “No” をクリックした場合は認証エラーにする）</li></ul><h2 id="Rules-実装"><a href="#Rules-実装" class="headerlink" title="Rules 実装"></a>Rules 実装</h2><p>まず１つ目の Rules です。ユーザメタデータに <code>&#123; agreed: &quot;yes&quot; &#125;</code> が含まれているか否かでステータス管理を行います。もし <code>agreed</code> が定義されてなかったり違う値だったりした場合は、<code>context.redirect</code> に遷移先のURLを代入して確認画面へリダイレクトさせます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> metadata = user.app_metadata || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// すでに規約同意している場合は何もせず終了</span></span><br><span class="line">  <span class="keyword">if</span> (metadata.agreed) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.redirect = &#123;</span><br><span class="line">    url: <span class="string">&quot;http://localhost:3000/consent&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>２つ目の Rules です。ここには確認画面から戻ってきた時の処理を書いています。確認画面から戻ってきた時のみ起動して欲しいので、 <code>context.protocol</code> の中身をチェックしてから実行するかの判定をしています。クエリパラメータからユーザの回答を受け取り、メタデータ更新を行ってから認証成功させてます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// context.redirect からの再開でない場合は本処理を終了する</span></span><br><span class="line">  <span class="keyword">if</span> (context.protocol &amp;&amp; context.protocol !== <span class="string">&quot;redirect-callback&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// クエリパラメータを取得</span></span><br><span class="line">  <span class="keyword">const</span> request = context.request || &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> query = request.query || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ユーザが同意すれば認証成功</span></span><br><span class="line">  <span class="keyword">if</span> (query.answer &amp;&amp; query.answer === <span class="string">&quot;yes&quot;</span>) &#123;</span><br><span class="line">    user.app_metadata = user.app_metadata || &#123;&#125;;</span><br><span class="line">    user.app_metadata.agreed = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">    auth0.users.updateAppMetadata(user.user_id, user.app_metadata)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, user, context);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        callback(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ユーザが拒否すれば認証失敗</span></span><br><span class="line">  <span class="keyword">return</span> callback(<span class="keyword">new</span> UnauthorizedError(<span class="string">&quot;同意しないと使えません&quot;</span>), user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-実装"><a href="#Vue-実装" class="headerlink" title="Vue 実装"></a>Vue 実装</h2><p>確認画面の実装はこんな感じです。Rules からこの画面にリダイレクトされた場合はクエリパラメータに <code>state=ハッシュ値</code> が付いています。なので <code>state</code> がない場合にはエラー画面へ遷移させちゃってます。ボタンをクリックしたら再び Auth0 へ遷移するように、<code>https://&#123;Auth0ドメイン&#125;/continue?state=&#123;ハッシュ値&#125;</code> という URL を作成しています。</p><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>アプリケーションの利用を継続しますか？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickYes&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button-a&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickNo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button-a&quot;</span>&gt;</span>No<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; domain &#125; <span class="keyword">from</span> <span class="string">&quot;../../auth_config.json&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&quot;consent&quot;</span>,</span></span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    query: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$route.query;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    state: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.query &amp;&amp; <span class="built_in">this</span>.query.state) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.query.state</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line"><span class="javascript">      immediate: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="built_in">this</span>.state) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$router.replace(<span class="string">&quot;/error&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    clickYes: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      location.href = <span class="string">`https://<span class="subst">$&#123;domain&#125;</span>/continue?state=<span class="subst">$&#123;<span class="built_in">this</span>.state&#125;</span>&amp;answer=yes`</span>;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    clickNo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      location.href = <span class="string">`https://<span class="subst">$&#123;domain&#125;</span>/continue?state=<span class="subst">$&#123;<span class="built_in">this</span>.state&#125;</span>&amp;answer=no`</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="動かしてみる"><a href="#動かしてみる" class="headerlink" title="動かしてみる"></a>動かしてみる</h2><p>アプリケーションを起動して Login をクリックします。Google アカウントを使ってログインする画面が表示されたので、ログインを行います。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.45.47.png" style="border:solid 1px #000000"><p><code>Googleで続ける</code> をクリックしたら想定通り <code>localhost:3000/consent?status=...</code> にリダイレクトされ確認画面が表示しました。Yes をクリックして再び Auth0 での認証を継続します。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.48.01.png" style="border:solid 1px #000000"><p>同意ダイアログが表示しました。許可を押すとログインが完了します。（localhost で起動したアプリケーションは初回ログインで表示される仕様です。実際の Auth0 設定では audience をちゃんと指定して、Consent Skip を有効にしておけばこの画面はスキップされます）</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.48.07.png" style="border:solid 1px #000000"><p>ログインが完了しました！プロフィール画面から IDトークンの中身を見ることができるので、無事に成功している様子です。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.48.48.png" style="border:solid 1px #000000"><p>ちなみに確認画面で No をクリックした場合は Rules で認証エラーにしてます。クエリパラメータに <code>error=unauthorized</code> <code>error_description=同意しないと使えません</code> でエラー内容を通知してます。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.49.36.png" style="border:solid 1px #000000"><h2 id="state-の有効期限"><a href="#state-の有効期限" class="headerlink" title="state の有効期限"></a>state の有効期限</h2><p>これはわかりませんでした。試しに 30 分待ってみたのですが、有効期限切れなどなく認証が継続できました。</p><h1 id="実際にあったトラブル"><a href="#実際にあったトラブル" class="headerlink" title="実際にあったトラブル"></a>実際にあったトラブル</h1><p>すでに稼働しているアプリケーションに context.redirect を適用する場合は、ちょっと注意が必要です。</p><p>これは私が実際にテストで検知したものです。現在、私がメンテしているアプリケーションは Vue.js と <a href="https://github.com/auth0/auth0-spa-js">auth0-spa-js</a> で構築したものなのですが、context.redirect で画面遷移を追加したことにより、Auth0 の Silent Authentication でエラーが発生してしまいました。（しっかりテストを行って正解でした！）</p><p><a href="https://auth0.com/docs/authorization/configure-silent-authentication">Silent Authentication</a> の詳細な説明は割愛しますが、「Auth0で設定した認証の有効期限内であれば、ログイン画面をスキップしてユーザを自動ログインさせる機能」と思ってください。</p><p>導入前のアプリの振る舞いは、ユーザが認証有効期限内であれば自動ログインを行うものでした。この改修によって、リダイレクト先画面でユーザアクションが必要になってしまったため、Silent Authentication は <code>interaction_required</code> を出力しました。原因は auth0-spa-js のバージョンが 1.8.0 と前バージョンのものだったため、このエラーをキャッチする処理が実装されていませんでした。最新版はエラーを網羅的にハンドリングしている習性が入っていたので、ライブラリをバージョンアップすることで解決しました。（ご参考までに、修正対応がされていたコードは<a href="https://github.com/auth0/auth0-spa-js/blob/v1.13.6/src/Auth0Client.ts#L593">こちら</a>です）</p><h1 id="これ以外の実現方法の紹介"><a href="#これ以外の実現方法の紹介" class="headerlink" title="これ以外の実現方法の紹介"></a>これ以外の実現方法の紹介</h1><p>私が思いつく限りをあげてみます。</p><p><strong>Universal Login をカスタマイズする</strong></p><p>独自のhtmlを実装して、ログイン画面に利用規約を一緒に表示させる方法です。<br>ただし、この html ソースの管理やメンテナンスが発生するので、おすすめ度は中くらいです。</p><p><strong>アプリ側で制御する</strong></p><p>IDトークンに規約同意済フラグのようなパラメータを設けて、アプリ側でそのパラメータを見て利用規約を表示する・しないを制御する方法です。この方法でも実現は可能ですが、アプリごとに対応が必要であるため、メンテナンスが大変になります。運用するアプリが1つなど少ない場合には、context.redirect でコントロールするよりシンプルかもしれません。</p><p><strong>同意ダイアログに表示する</strong></p><p>3rdパーティアプリでログインさせるときに<a href="https://auth0.com/docs/authorization/user-consent-and-third-party-applications">同意ダイアログ</a>を表示させることが可能です。ちょっと無理矢理ですが、この画面に任意の文字を表示することは可能であるため、それを利用します。しかし、3rdパーティのみに限定されてしまう点と、ダイアログという小さいエリアに向いていない使い方のため、おすすめ度は低いです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200123/index.html" data-iframely-url="//cdn.iframe.ly/6rr8LwH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200128/index.html" data-iframely-url="//cdn.iframe.ly/sNQz5Cd?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIG DX-Unit の先山です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://auth0.com/jp/&quot;&gt;Auth0&lt;/a&gt; を使ってアプリを構築しています。とある案件で、ユーザがログインした後に任意のページを表示させたいニーズがありました。こういった時はアプリ側</summary>
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
  </entry>
  
  <entry>
    <title>リモートネイティブ世代が考えるリモートワーク設備</title>
    <link href="https://future-architect.github.io/articles/20210219/"/>
    <id>https://future-architect.github.io/articles/20210219/</id>
    <published>2021-02-18T15:00:00.000Z</published>
    <updated>2021-02-24T03:58:59.010Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20210118/">リモートワーク環境連載</a>の3弾目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXユニットの富山です。</p><p>私は2020年4月新卒入社で、入社時からリモートワークが基本のリモートネイティブ世代です。自分なりに快適に仕事を行える自宅作業環境を入社してから少しづつ構築したのでご紹介します。</p><p>少しでも参考になれば嬉しいです！</p><h2 id="デスク構築の考え方"><a href="#デスク構築の考え方" class="headerlink" title="デスク構築の考え方"></a>デスク構築の考え方</h2><p>以下の3点を意識してアイテム選定・構築しました。</p><ol><li>必要最低限のものしかデスクに置かない</li><li>椅子には投資する</li><li>なるべくコードレスに</li></ol><h2 id="現在のデスク"><a href="#現在のデスク" class="headerlink" title="現在のデスク"></a>現在のデスク</h2><p>2021年1月末時点では、このようなデスクになっています。<br>今回は、下記①〜⑧について紹介します。<br><img src="/images/20210219/e9e7dec4-20b1-60a6-4952-e9da500e23e0.png"><br>① モニター・モニターアーム<br>② 椅子<br>③ 昇降式デスク<br>④ キーボード<br>⑤ トラックパッド<br>⑥ スピーカー<br>⑦ クラムシェル用PCスタンド<br>⑧ 空気清浄機</p><h3 id="①-モニター・モニターアーム"><a href="#①-モニター・モニターアーム" class="headerlink" title="① モニター・モニターアーム"></a>① モニター・モニターアーム</h3><h4 id="モニター"><a href="#モニター" class="headerlink" title="モニター"></a>モニター</h4><p>モニターは枚数が多ければ多いほどよいと思いますが、私は現在2枚のモニターを使用しています。</p><p>使用しているのは<a href="https://www.amazon.co.jp/%E3%83%87%E3%82%A3%E3%82%B9%E3%83%97%E3%83%AC%E3%82%A4-GW2780-%E3%83%96%E3%83%AB%E3%83%BC%E3%83%A9%E3%82%A4%E3%83%88%E8%BB%BD%E6%B8%9B-%E8%BC%9D%E5%BA%A6%E8%87%AA%E5%8B%95%E8%AA%BF%E6%95%B4B-I-%E6%8A%80%E8%A1%93%E6%90%AD%E8%BC%89-HDMI1-4/dp/B07D79519M/ref=sr_1_1?adgrpid=98159911085&dchild=1&gclid=Cj0KCQiAx9mABhD0ARIsAEfpavQkaDTaFXLEAXQ1nuNXn0uuasVLLJzwApKdwUzbtE9xvBegNAiX2i8aAtApEALw_wcB&hvadid=429994317584&hvdev=c&hvlocphy=1009309&hvnetw=g&hvqmt=e&hvrand=6386477162357026011&hvtargid=kwd-506728426505&hydadcr=9353_11298745&jp-ad-ap=0&keywords=%E3%83%99%E3%83%B3%E3%82%AD%E3%83%A5%E3%83%BC+27%E3%82%A4%E3%83%B3%E3%83%81&qid=1612096811&sr=8-1&tag=googhydr-22">BenQ GW2780 27inch</a>です。BenQのコスパは最強です。<br><img src="/images/20210219/3abc1945-342b-326b-b7e3-bc144defba27.png"></p><h4 id="モニターアーム"><a href="#モニターアーム" class="headerlink" title="モニターアーム"></a>モニターアーム</h4><p>一般的に、モニターの台座はそこそこスペースを消費します。また、個人的にコードを読む時は縦画面のほうが表示できる行数が多くなり好みなので、柔軟にモニターを動かせるモニターアームの導入は必須でした。使用しているのは<a href="https://www.amazon.co.jp/gp/product/B07W3KK949/ref=ppx_yo_dt_b_asin_title_o01_s00?ie=UTF8&psc=1">HUANUO ガススプリング式モニターアーム</a>です。少々ゴツいですが、最低限のスペースでしっかりとモニターを支えてくれています。<br><img src="/images/20210219/803579c2-c774-f57a-3ebc-9fb32fcc08a4.png"></p><p>※ モニターアームで使用したい場合、<a href="https://ja.wikipedia.org/wiki/VESA">VESA規格</a>に対応しているモニターを用意する必要があります。これから導入される方はご注意ください。</p><h3 id="②-椅子"><a href="#②-椅子" class="headerlink" title="② 椅子"></a>② 椅子</h3><p>椅子は投資です（たぶん）。短期間で壊れることはそうないでしょうし、正しい姿勢に導いてもらうことにより、アウトプットの質があがります（たぶん）。<br>私が使用しているのは<a href="https://www.amazon.co.jp/%E3%83%8F%E3%83%BC%E3%83%9E%E3%83%B3%E3%83%9F%E3%83%A9%E3%83%BC-%E3%82%A2%E3%83%BC%E3%83%AD%E3%83%B3%E3%83%81%E3%82%A7%E3%82%A2-%E3%83%AA%E3%83%9E%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%89-%E3%83%9D%E3%82%B9%E3%83%81%E3%83%A3%E3%83%BC%E3%83%95%E3%82%A3%E3%83%83%E3%83%88SL-AER1B23DW/dp/B01MUZOWBH/ref=sr_1_1_sspa?dchild=1&keywords=%E3%82%A2%E3%83%BC%E3%83%AD%E3%83%B3%E3%83%81%E3%82%A7%E3%82%A2&qid=1612097772&sr=8-1-spons&psc=1&spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFNNFRHRlNRRTg2TjYmZW5jcnlwdGVkSWQ9QTA3Mzg3MDNJWDVXREtDVTA1S1ImZW5jcnlwdGVkQWRJZD1BUTZQRFJJQ1pRSlNPJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==">Herman Miller アーロンチェア</a>です。MoMAパーマネントコレクションに認定された、キングofデスクチェアです。（こういうのに弱い）</p><p>信じられない値段がしますが、将来の自分を信じて購入しました。</p><p>導入した結果としては最高です。身体がまったく痛くならならず、永遠に座っていられます。<br>アウトプットの質もあがった..はず…。<br><img src="/images/20210219/fb2e94ce-1e9c-acab-b1e0-e253a5452e91.png"></p><h3 id="③-昇降式デスク"><a href="#③-昇降式デスク" class="headerlink" title="③ 昇降式デスク"></a>③ 昇降式デスク</h3><p>椅子が最高と言っても自宅だと集中力が途切れてしまったり、体勢を変えたいシーンがあります。そんなときに昇降式デスクです。スタンディングでの作業は思いの外捗ります。使用しているのは<a href="amazon.co.jp/gp/product/B07HBWGGMH/ref=ppx_yo_dt_b_asin_title_o03_s00?ie=UTF8&psc=1">FlexiSpot 電動式スタンディングデスク</a>です。デスク脚のみ購入し、天板は好みのサイズの板を脚の上に乗せています。デスク脚だけにも関わらず結構いいお値段がしますが、満足しています。<br>余談ですが、組み立ての難易度が結構高いです。<br><img src="/images/20210219/241c76fa-6ca1-597d-ad22-ba276fdfe3b8.png"></p><h3 id="④-キーボード"><a href="#④-キーボード" class="headerlink" title="④ キーボード"></a>④ キーボード</h3><p>弊社ではしばしばキーボード宗教戦争や布教運動が起こりますが、私は<a href="https://www.amazon.co.jp/HHKB-Professional-HYBRID-%E7%84%A1%E5%88%BB%E5%8D%B0%EF%BC%8F%E5%A2%A8%EF%BC%88%E8%8B%B1%E8%AA%9E%E9%85%8D%E5%88%97%EF%BC%89-PD-KB800BNS/dp/B082TWFV9C/ref=pd_sbs_2?pd_rd_w=F45k5&pf_rd_p=10c006f1-d300-414f-a419-f9006b54dbbc&pf_rd_r=B50GGXATBN2230C1WGY0&pd_rd_r=3f13515c-273a-43a8-a493-7499e0cde68a&pd_rd_wg=M4Fzj&pd_rd_i=B082TWFV9C&psc=1">HHKB Professional HYBRID Type-S</a>を使用しています。</p><p>実はHHKBは弊デスク2代目で、既に私の手はHHKB意外との互換性を持たなくなりました。無刻印の厨二病さに加え、コンパクトで打鍵感も最高です。ただBluetoothでの接続が基本なので、稀に入力が遅れたり、謎に連打されてしまう現象が起こります。（有線でも使えますが、「なるべくコードレスに」を遵守しているため我慢しています。）<br><img src="/images/20210219/4b48240c-1f98-3d5c-7287-19de1022e676.png"></p><h3 id="⑤-トラックパッド"><a href="#⑤-トラックパッド" class="headerlink" title="⑤ トラックパッド"></a>⑤ トラックパッド</h3><p><a href="https://www.amazon.co.jp/dp/B07DPGK3B3/ref=twister_B08V23SH6P?_encoding=UTF8&psc=1">Apple Magic Tracpad2</a>を使用しています。単純にカッコいいという理由だけで使用しています。<br><img src="/images/20210219/163c170e-2849-f253-f31a-3f45b818f7ca.png"></p><h3 id="⑥-スピーカー"><a href="#⑥-スピーカー" class="headerlink" title="⑥ スピーカー"></a>⑥ スピーカー</h3><p>たまに音楽を聞きながら作業したくなるので、スピーカーも導入しています。<br>使用しているのは、<a href="https://www.amazon.co.jp/dp/B08PF4BDDG/ref=twister_B08T6YGDYN?_encoding=UTF8&psc=1">Bose SoundLink Revolve II</a>です。コンパクトで音も素晴らしいので重宝しています。<br>もちろんBluetoothです。無線だとアウトドアにも使えるのでおすすめです。<br><img src="/images/20210219/31aace4b-85b0-7fbd-fd66-92cdb4546acd.png"></p><h3 id="⑦-クラムシェル用スタンド"><a href="#⑦-クラムシェル用スタンド" class="headerlink" title="⑦ クラムシェル用スタンド"></a>⑦ クラムシェル用スタンド</h3><p>私のデスクには2つのラップトップ（MBP 16・13インチそれぞれ1台ずつ)があり、平置きするとかなりの場所を消費します。幸いMacにはPCを閉じた状態でも諸条件をクリアすればデスクトップのように使用できるクラムシェルがあるため、ラップトップを立てられるスタンドを導入しています。おかげでかなりスペースを確保できましたが、ラップトップが熱を持ちやすくなってしまうため、解決策を模索中です…<br>使用しているのは<a href="https://www.amazon.co.jp/gp/product/B08LGWG21K/ref=ppx_yo_dt_b_asin_title_o01_s01?ie=UTF8&psc=1">BECROWM 4in1</a>です。ラップトップ2台分のスタンドがあります。<br><img src="/images/20210219/24b8650c-760d-ff88-01e8-f154e2404ba3.png"></p><h3 id="⑧-空気清浄機"><a href="#⑧-空気清浄機" class="headerlink" title="⑧ 空気清浄機"></a>⑧ 空気清浄機</h3><p>どんなに良いデスク環境を整えても空気が悪いと身体によくありません。加湿器機能付きのものが個人的におすすめです。目を閉じればそこに木々と川が見えます。使用しているのは<a href="https://www.amazon.co.jp/%E3%82%B7%E3%83%A3%E3%83%BC%E3%83%97-%E7%A9%BA%E6%B0%97%E6%B8%85%E6%B5%84%E6%A9%9F%E3%80%90%E5%8A%A0%E6%B9%BF%E6%A9%9F%E8%83%BD%E4%BB%98%E3%80%91%EF%BC%88%E7%A9%BA%E6%B8%8523%E7%95%B3%E3%81%BE%E3%81%A7-%E3%83%9B%E3%83%AF%E3%82%A4%E3%83%88%E7%B3%BB%EF%BC%89SHARP-%E3%80%8C%E3%83%97%E3%83%A9%E3%82%BA%E3%83%9E%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%83%BC7000%E3%80%8D%E6%90%AD%E8%BC%89-KC-L50-W/dp/B07Z8PRD4W/ref=sr_1_15?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=3FG5TIIN7YR9D&dchild=1&keywords=sharp+%E3%83%97%E3%83%A9%E3%82%BA%E3%83%9E%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%83%BC&qid=1613054441&sprefix=sharp+%E3%83%97%E3%83%A9%E3%82%BA%E3%83%9E,aps,162&sr=8-15">シャープ プラズマクラスター</a>です。<br>1日の大半を自室で過ごすので、満足度はかなり高いです。<br><img src="/images/20210219/0449d246-7657-4a66-9bf9-242a86e3bbc5.png"></p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>つらつらとリモートワークに使用しているアイテムをご紹介しましたが、結局は「気分がアガるモノを揃える」に尽きると思っています。</p><p>まだまだ完成形には程遠く、現在抱えている課題は ①配線問題（いまはデスクの裏に無理やりまとめている）②Webカメラが無い問題 です。また機会があったらアップデートしたデスクをご紹介させてください！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210118/&quot;&gt;リモートワーク環境連載&lt;/a&gt;の3弾目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>AWS SDK for Goのリトライアルゴリズムを差し替える方法</title>
    <link href="https://future-architect.github.io/articles/20210218/"/>
    <id>https://future-architect.github.io/articles/20210218/</id>
    <published>2021-02-17T15:00:00.000Z</published>
    <updated>2021-02-24T10:26:18.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>本記事では<a href="https://github.com/aws/aws-sdk-go">AWS SDK for Go</a>を使ってAWSのAPIをコールする場合のリトライアルゴリズムを差し替える方法を紹介します。</p><h1 id="AWS-SDK-for-Go-のリトライ"><a href="#AWS-SDK-for-Go-のリトライ" class="headerlink" title="AWS SDK for Go のリトライ"></a><code>AWS SDK for Go</code> のリトライ</h1><img src="/images/20210218/awsgo.png" class="img-middle-size"><p><code>AWS SDK for Go</code> のバージョンは <a href="https://github.com/aws/aws-sdk-go/releases/tag/v1.37.6"><code>v1.37.6</code></a> です。</p><p>まず <code>AWS SDK for Go</code> を使ってAPIをコールする場合は、デフォルトでリトライするようになっています<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。そのため <code>AWS SDK for Go</code> を使うアプリケーション側でリトライを実装する必要はありません。<code>AWS SDK for Go</code> 上の実装は <a href="https://github.com/aws/aws-sdk-go/blob/v1.37.6/aws/client/default_retryer.go#L12-L36"><code>client.DefaultRetryer</code></a> がリトライを実施します。リトライ時の待ち時間である <code>time.Duration</code> を計算するアルゴリズムは <code>RetryRules</code> メソッドとして実装されています。</p><p>待ち時間を計算するアルゴリズムはExponential Backoff And Jitter<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>です。</p><ul><li>リトライの再試行の待ち時間を計算する <code>RetryRules</code> メソッド</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RetryRules returns the delay duration before retrying this request again</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DefaultRetryer)</span> <span class="title">RetryRules</span><span class="params">(r *request.Request)</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// if number of max retries is zero, no retries will be performed.</span></span><br><span class="line"><span class="keyword">if</span> d.NumMaxRetries == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default value for retryer members</span></span><br><span class="line">d.setRetryerDefaults()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// minDelay is the minimum retryer delay</span></span><br><span class="line">minDelay := d.MinRetryDelay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initialDelay time.Duration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">isThrottle := r.IsErrorThrottle()</span><br><span class="line"><span class="keyword">if</span> isThrottle &#123;</span><br><span class="line"><span class="keyword">if</span> delay, ok := getRetryAfterDelay(r); ok &#123;</span><br><span class="line">initialDelay = delay</span><br><span class="line">&#125;</span><br><span class="line">minDelay = d.MinThrottleDelay</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">retryCount := r.RetryCount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// maxDelay the maximum retryer delay</span></span><br><span class="line">maxDelay := d.MaxRetryDelay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isThrottle &#123;</span><br><span class="line">maxDelay = d.MaxThrottleDelay</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> delay time.Duration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Logic to cap the retry count based on the minDelay provided</span></span><br><span class="line">actualRetryCount := <span class="keyword">int</span>(math.Log2(<span class="keyword">float64</span>(minDelay))) + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> actualRetryCount &lt; <span class="number">63</span>-retryCount &#123;</span><br><span class="line">delay = time.Duration(<span class="number">1</span>&lt;&lt;<span class="keyword">uint64</span>(retryCount)) * getJitterDelay(minDelay)</span><br><span class="line"><span class="keyword">if</span> delay &gt; maxDelay &#123;</span><br><span class="line">delay = getJitterDelay(maxDelay / <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">delay = getJitterDelay(maxDelay / <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> delay + initialDelay</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/client/default_retryer.go#L77-L123">https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/client/default_retryer.go#L77-L123</a></p><h3 id="デフォルトの設定"><a href="#デフォルトの設定" class="headerlink" title="デフォルトの設定"></a>デフォルトの設定</h3><p>デフォルトのリトライの設定は以下のようになっています。</p><table><thead><tr><th align="center">No</th><th>項目</th><th>説明</th><th>デフォルト値(単位)</th></tr></thead><tbody><tr><td align="center">1</td><td><code>NumMaxRetries</code></td><td>最大リトライ回数</td><td>3 (回)</td></tr><tr><td align="center">2</td><td><code>MinRetryDelay</code></td><td>リトライ時の最小の待ち時間</td><td>30 (ミリ秒)</td></tr><tr><td align="center">3</td><td><code>MinThrottleDelay</code></td><td>リトライスロットリング<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>時の最小の待ち時間</td><td>300 (ミリ秒)</td></tr><tr><td align="center">4</td><td><code>MaxRetryDelay</code></td><td>リトライ時の最大の待ち時間</td><td>300 (秒)</td></tr><tr><td align="center">5</td><td><code>MaxThrottleDelay</code></td><td>リトライスロットリング時の最大の待ち時間</td><td>300 (秒)</td></tr></tbody></table><h1 id="RetryRules-を差し替える"><a href="#RetryRules-を差し替える" class="headerlink" title="RetryRules を差し替える"></a><code>RetryRules</code> を差し替える</h1><p>基本的にはSDKが提供するデフォルトのリトライを実施することで問題ないでしょう。差し替えたくなるケースの一つは、リトライ回数を増やしてリトライエラーを発生させたくないケースです。(ただし、リトライ回数を増やすことでリトライエラーを速やかに解消できる場合に限ります。)リトライ回数が増えると待ち時間が大きくなり、デフォルトの設定の場合最大で300秒です。特定のケースではなるべく早くリトライを試行したい場合があるでしょう。このような場合にリトライアルゴリズムを差し替える方法が役に立ちます。</p><h2 id="差し替える方法"><a href="#差し替える方法" class="headerlink" title="差し替える方法"></a>差し替える方法</h2><p><code>Config</code> の <code>Retryer</code> フィールドに値をセットすることで差し替えることができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// Retryer guides how HTTP requests should be retried in case of</span></span><br><span class="line"><span class="comment">// recoverable failures.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// When nil or the value does not implement the request.Retryer interface,</span></span><br><span class="line"><span class="comment">// the client.DefaultRetryer will be used.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// When both Retryer and MaxRetries are non-nil, the former is used and</span></span><br><span class="line"><span class="comment">// the latter ignored.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// To set the Retryer field in a type-safe manner and with chaining, use</span></span><br><span class="line"><span class="comment">// the request.WithRetryer helper function:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   cfg := request.WithRetryer(aws.NewConfig(), myRetryer)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Retryer RequestRetryer</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/config.go#L94-L108">https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/config.go#L94-L108</a></p><p><code>Retryer</code> は <code>request.Retryer</code> を満たす型です。<code>Retryer</code> の実装上は <code>RequestRetryer</code> 型で <code>interface&#123;&#125;</code> 型へのDefined typeになっていますが、<code>request.Retryer</code> を満たしていない場合は <code>DefaultRetryer</code> が使われます。</p><p><code>client.DefaultRetryer</code> 構造体を埋め込んで <code>RetryRules</code> メソッドを実装する方法がおすすめです。構造体の埋め込みを利用して、委譲したいメソッドだけを実装する手法はGoではよく使われます。リトライするかどうかの判断基準 (<code>ShouldRetry</code>) はデフォルトの実装のままで、リトライの待ち時間の計算アルゴリズムのみを差し替えることができます。以下の実装は <a href="https://github.com/jpillora/backoff"><code>jpillora/backoff</code></a> のシンプルな上限付きExponential Backoff And Jitterを使った実装です。</p><ul><li>retryer.go</li></ul><figure class="highlight go"><figcaption><span>retryer.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sample</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws/client&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws/request&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/backoff&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> customRetryer <span class="keyword">struct</span> &#123;</span><br><span class="line">*backoff.Backoff</span><br><span class="line">client.DefaultRetryer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomRetryer</span><span class="params">(cfg *backoff.Backoff, numRetries <span class="keyword">int</span>)</span> *<span class="title">customRetryer</span></span> &#123;</span><br><span class="line">r := &amp;customRetryer&#123;Backoff: cfg&#125;</span><br><span class="line">r.NumMaxRetries = numRetries</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cr customRetryer)</span> <span class="title">RetryRules</span><span class="params">(req *request.Request)</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> cr.Backoff.Duration()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ request.Retryer = &amp;customRetryer&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>main.go</li></ul><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws/endpoints&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws/session&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/service/lambda&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/d-tsuji/go-sandbox/customretry/sample&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/backoff&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lmd         *lambda.Lambda</span><br><span class="line">maxRetryNum = <span class="number">10</span> <span class="comment">// リトライ上限回数は環境変数などから取得</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">lmd = lambda.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Region:     aws.String(endpoints.ApNortheast1RegionID),</span><br><span class="line">MaxRetries: aws.Int(maxRetryNum),</span><br><span class="line">Retryer: sample.NewCustomRetryer(&amp;backoff.Backoff&#123;</span><br><span class="line">Min:    <span class="number">10</span> * time.Millisecond,</span><br><span class="line">Max:    <span class="number">300</span> * time.Millisecond,</span><br><span class="line">Factor: <span class="number">2</span>,</span><br><span class="line">Jitter: <span class="literal">true</span>,</span><br><span class="line">&#125;, maxRetryNum),</span><br><span class="line">&#125;)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようにリトライアルゴリズムを差し替えることができます。もちろん <code>client.DefaultRetryer</code> を使って、リトライの設定(<code>client.DefaultRetryer</code> の <code>MaxRetryDelay</code> など)を変えることによってリトライの待ち時間の計算に影響を及ぼすこともできます。<code>AWS SDK for Go</code> が提供するデフォルトのリトライアルゴリズム・設定ではパフォーマンス上の問題があるケースなど、リトライのアルゴリズムや設定を差し替えたい場合に本記事が参考になれば幸いです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200121/index.html" data-iframely-url="//cdn.iframe.ly/raMwXJI?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201112/index.html" data-iframely-url="//cdn.iframe.ly/l2eSPH0?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://docs.aws.amazon.com/ja_jp/general/latest/gr/api-retries.html</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">https://aws.amazon.com/jp/blogs/architecture/exponential-backoff-and-jitter/</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">リトライスロットリングが何かという説明は<a href="https://aws.amazon.com/jp/blogs/developer/introducing-retry-throttling/">Introducing Retry Throttling</a>や<a href="https://future-architect.github.io/articles/20200121/">スロットリングとの付き合い方</a>を参照</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;本記事では&lt;a href=&quot;https://github.com/aws/aws-sdk-go&quot;&gt;AWS SDK for G</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="リトライ" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4/"/>
    
  </entry>
  
  <entry>
    <title>プログラミング英会話 基礎</title>
    <link href="https://future-architect.github.io/articles/20210217/"/>
    <id>https://future-architect.github.io/articles/20210217/</id>
    <published>2021-02-16T15:00:00.000Z</published>
    <updated>2021-02-22T02:48:13.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="プログラミング英会話-基礎"><a href="#プログラミング英会話-基礎" class="headerlink" title="プログラミング英会話 [基礎]"></a>プログラミング英会話 [基礎]</h1><p>こんにちは！英語大好き優輝です。</p><p>今回はカナダの大学でコンピュータ・サイエンスを学んだ経験から、英語でIT会話をする基礎を書こうと思います。</p><p>プログラミングやIT表現を練習をしましょう！</p><img src="/images/20210217/giraffes-627031_1280.jpg"><p><a href="https://pixabay.com/ja/users/sponchia-443272/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=627031">Christine Sponchia</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=627031">Pixabay</a>からの画像</p><h2 id="この記事について"><a href="#この記事について" class="headerlink" title="この記事について"></a>この記事について</h2><p>この記事は、「プログラミングを英語で話すこと」を目的として練習する記事です。</p><p>記事の中では日本語に対応する英語を隠してあるので、まず頭の中で日本語を英語に変換してみてから英訳をみてみてください。「読める」ことを目標にした場合はレベル感が落ちてしまうことを了承ください。「話せる」ことで世界のプログラマーと対話できるように練習しましょう！</p><h2 id="まずは試してみる"><a href="#まずは試してみる" class="headerlink" title="まずは試してみる"></a>まずは試してみる</h2><p>“What do you do?”（仕事何してるの）と聞かれたときに「プログラミングを職業にしていること」を伝える3種類の英文を次の条件にしたがって考えてみてください。</p><p>条件: ３つ全ての文にprogramという文字列を必ず含こと。</p><details><summary>解答例</summary><div><p>I program. (動詞の例)<br>I write programs. (名詞の例)<br>I am a programmer. (erを付けてプログラマーとしている例)<br>※他にも回答はあります</p></div></details><p>どうですか？</p><p>シンプルな英語ですが、自分がプログラマであることを表現できます。日本語もそうですが、単語の品詞を変えて英文を作るのが自由に英語を話すコツです。</p><h2 id="エクササイズ"><a href="#エクササイズ" class="headerlink" title="エクササイズ"></a>エクササイズ</h2><p>programの他にcodeという単語も同じ様に使います。</p><p>program[名][動]=プログラム/プログラムする<br>code[名][動]= コード/コーディングする</p><p>programもcodeも名詞の場合は加算です。文法に注意して英文を作ってみましょう。</p><h3 id="名詞扱いの例"><a href="#名詞扱いの例" class="headerlink" title="名詞扱いの例"></a>名詞扱いの例</h3><p>「私は１つプログラムを書いた。」</p><details><summary>英文表示</summary><div>I wrote a program.※数えられるので、1つだとaが付きます。</div></details><p>「私は２つプログラムを書いた。」</p><details><summary>英文表示</summary><div>I wrote two programs.※単数、複数も意識するとよいでしょう。</div></details><h3 id="動詞扱いの例"><a href="#動詞扱いの例" class="headerlink" title="動詞扱いの例"></a>動詞扱いの例</h3><p>「私はプログラミング/コーディングが好きだ。」</p><details><summary>英文表示</summary><div>I like programming.I like coding.※動詞なので現在分詞ingにして動名詞です。</div></details><p>「私は週末プログラミングする。」</p><details><summary>英文表示</summary><div>I program on the weekend.I code on the weekend.</div></details><p>「私は昨日アプリをプログラムした。」</p><details><summary>英文表示</summary><div>I programmed an app yesterday.※アプリはきっと一つ作っているので単数系、母音で始まる単語なのでanを使いましょう。</div></details><p>「私は３年間プログラミングしている。」</p><details><summary>英文表示</summary><div>I have been programming for three years.※動作系の動詞の現在完了進行系です。覚えてますか。※have + be + VingでずっとVしている。を表現します。</div></details><p>programが動詞として使われるということはもちろん、原形、過去形、過去分詞(ed)、現在分詞(ing)があるということです。</p><p>「このコードは彼女によってプログラムミングされた。」</p><details><summary>英文表示</summary><div>This code was programmed by her. </div></details><p>「彼は今プログラミングしている。」</p><details><summary>英文表示</summary><div>He is programming now.</div></details><p>programやcodeを動詞として使いこなせれば、色んな表現ができるようになります。</p><h2 id="ググる"><a href="#ググる" class="headerlink" title="ググる"></a>ググる</h2><p>次に、プログラムではないですがプログラマに必須の「ググる(インターネットで調べること)」についてみてみましょう。</p><p>プログラミングの勉強や開発で分からないことがあったとき、分かる人にを質問するシチュエーションです。</p><p>あなたが質問をします。<br>そうすると、聞かれた彼はこう答えます。<br>「それググった？」</p><details><summary>英文表示</summary><div>Did you google it?</div></details><p>そしてあなたはこう答えます。<br>「昨日何回もググったけど、なにもなかった。」</p><details><summary>英文表示</summary><div>I googled it many times yesterday, but there was nothing.※nothingは単数扱いなのでwasになっています。</div></details><p>日本人はGoogleを動詞化して「ググる」として使っていますが、<br>Googleはそのままgoogleという動詞使っていますね。</p><p>「今ググってるよ」と言いたければこんな感じです。</p><details><summary>英文表示</summary><div>I am googling it right now.</div></details><p>参考</p><details><summary>googleの活用</summary><div>google　ググる 原型googled　ググった　過去形googled　ググられた　過去分詞googling　ググってる　現在分詞</div></details><p>他にも<br>「インスタに投稿した。」</p><details><summary>英文表示</summary><div>I instagrammed.</div></details>「それツイートされてたよ。」<details><summary>英文表示</summary><div>That was tweeted.</div></details>など使われているのを聞くかもしれません。<h2 id="プログラミングを英語で言ってみる"><a href="#プログラミングを英語で言ってみる" class="headerlink" title="プログラミングを英語で言ってみる"></a>プログラミングを英語で言ってみる</h2><p>それではコードを見ながらプログラミング表現を英語で考えてみましょう。<br>サンプルコードはJavaです。<br>※ヒントを用意しましたが、まずはヒントなしで考えてみてください。<br>※主語が明示されていないときはIを主語で英訳を書いています。<br>例:「それを食べた」=&gt; I ate it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int score;</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>変数=variable [名]定義する=define [動]</div></details><p>「変数を定義する」</p><details><summary>英文表示</summary><div>I define a variable</div></details><p>「int型の変数を定義する」</p><details><summary>英文表示</summary><div>I define a variable of type int.</div></details><p>「scoreという名前の変数を定義する」</p><details><summary>英文表示</summary><div>I define a variable named "score".</div></details><p>「 scoreという名前の変数を定義した。」</p><details><summary>英文表示</summary><div>I defined a variable of type int named "score".</div></details><figure class="highlight java"><figcaption><span>Sample.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">90</span>;</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>代入する=assign [動]</div></details><p>「scoreに90を代入する」</p><details><summary>英文表示</summary><div>I assign ninety to the "score". </div></details><h2 id="オブジェクト系も英語で表現"><a href="#オブジェクト系も英語で表現" class="headerlink" title="オブジェクト系も英語で表現"></a>オブジェクト系も英語で表現</h2><figure class="highlight java"><figcaption><span>Cat.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Sample.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat c = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>インスタンス化する=instantiate [動]</div></details><p>「Catクラスをインスタンス化する。」</p><details><summary>英文表示</summary><div>I instantiate the Cat class.</div></details><p>「Catクラスのオブジェクトを作る」</p><details><summary>英文表示</summary><div>I create an object of type Cat.</div></details><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class Cat extends Animal&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>継承する=inherit [動]子は英語でなんていう？</div></details><p>「CatクラスはAnimalクラスを継承している。」</p><details><summary>英文表示</summary><div>The Cat class inherits the Animal class.※三単現なので動詞にはsをつけます。</div></details><p>「CatクラスはAnimalクラスの子クラスである。」</p><details><summary>英文表示</summary><div>The Cat class is a child class of the Animal class.※a childをthe childにしても正しい英文ですが、その場合、CatクラスはAnimalクラスの唯一の子クラスという意味合いになります。（Animalクラスを継承しているクラスはCat以外にはないというニュアンスになる。）</div></details><p>「二分木の全ての親ノードは２つの子、２つの葉、または１つの子と１つの葉を持っている。」</p><details><summary>英文表示</summary><div>Every parent node of a binary tree has either two children, two leaves, or a child and a leaf.Every parent node of binary trees has either two children, two leaves, or a child and a leaf.</div></details><h1 id="encryptとencode"><a href="#encryptとencode" class="headerlink" title="encryptとencode"></a>encryptとencode</h1><p>最後にちょっとした最近の気付きを書こうと思います。<br>次の英単語を日本語にしてみてください。</p><p>encrypt</p><details><summary>日本語表示</summary><div>「暗号化する。」※encryptは動詞なので「暗号化」と訳すのは間違いです。※「暗号化は」encrypiting</div></details><p>encode</p><details><summary>日本語表示</summary><div>「記号化、符号化」「記号化する、符号化する。」※encodeは名詞でも動詞でも使えます。</div></details><p>decrypt</p><details><summary>日本語表示</summary><div>「復号する。」※decryptは動詞なので「復号」と訳すのは間違いです。</div></details><p>decode</p><details><summary>日本語表示</summary><div>「復号」「復号する。」※decodeは名詞でも動詞でも使えます。</div></details><p>気付きましたか？</p><details><summary>筆者が気付いたこと表示</summary><div>"暗号化"(encrypt)も"符号化"(encode)も、日本語だとその逆は"復号"(decrypt/decode)なんです。「暗号化する」<=>「復号する」「符号化する・記号化する」<=>「復号」</div></details>とても面白い。<p>使ってみましょう。<br>1.「コードのこの行はメッセージを暗号化する。」<br>2.「コードのこの行はメッセージを符号化する。」<br>3.「コードのこの行はメッセージを復号する。」</p><details><summary>英文表示</summary><div>1. This line of codes encrypts messages.2. This line of codes encodes messages.3. This line of codes decrypts/decodes messages.※コードは複数の行があって一つのプログラムになるので、複数形※This lineは単数なので、動詞には三単現のs※メッセージは加算かつ、１つしかメッセージを暗号化・記号化する訳ではないので複数系</div></details><h2 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h2><h4 id="「復号化」ではなく、「復号」と書く理由を考えてみる"><a href="#「復号化」ではなく、「復号」と書く理由を考えてみる" class="headerlink" title="「復号化」ではなく、「復号」と書く理由を考えてみる"></a>「復号化」ではなく、「復号」と書く理由を考えてみる</h4><p>日本語では「暗号」や「符号」はそれ自体、具体的な「モノを表す名詞」でしかないが、「復号」は抽象的な「動きを表す名詞」です。</p><p>「暗号」や「記号」=「モノを表す動詞」<br>「復号」=「動きを表す名詞」</p><p>「動きを表す動詞」に「〜する」をつけると動詞になります。<br>「動きを表す名詞」+「〜する」=「動詞」<br>「復号」+「〜する」=「復号する」</p><p>「モノを表す名詞」に「〜化」をつけると モノに変えるといったニュアンスの「動きを表す名詞」になります。<br>「モノを表す名詞」+「〜化」= 「動きを表す名詞」<br>「暗号」+「〜化」=「暗号化」<br>「記号」+「〜化」=「符号化」</p><p>ということは<br>「動きを表す名詞」+「〜する」=「動詞」<br>「暗号化」+「〜する」=「暗号化する」<br>「記号化」+「〜する」=「符号化する」<br>「復号」+「〜する」=「復号する」</p><p>ということで、復号はそもそも「動きを表す名詞」なので「〜化」をつけないのが正しいです。</p><details><summary>英語での対応一覧</summary><div><p>暗号 = cipher [名] / secret code [名]<br>暗号化 = to encrypt / encrypting [名]<br>暗号化する = encrypt [動]</p><p>符号 = code [名]<br>符号化 = encode / to encode / encoding [名]<br>符号化する = encode [動]</p><p>(暗号を)復号 = to decrypt / decrypting [名]<br>(暗号を)復号する = derypt [動]</p><p>(暗号を)復号 = decode / to decode / decoding [名]<br>(暗号を)復号する = decode [動]</p><p>※to Vで不定詞の名詞的用法、Vingで動名詞</p></div></details><p>余談でした。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>これからは仕事でも英語を使うやり取りも増えてくるかもしれません。<br>プログラミングを覚える中で英会話力も向上させてしまいましょう。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;プログラミング英会話-基礎&quot;&gt;&lt;a href=&quot;#プログラミング英会話-基礎&quot; class=&quot;headerlink&quot; title=&quot;プログラミング英会話 [基礎]&quot;&gt;&lt;/a&gt;プログラミング英会話 [基礎]&lt;/h1&gt;&lt;p&gt;こんにちは！英語大好き優輝です。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="英語" scheme="https://future-architect.github.io/tags/%E8%8B%B1%E8%AA%9E/"/>
    
    <category term="英会話" scheme="https://future-architect.github.io/tags/%E8%8B%B1%E4%BC%9A%E8%A9%B1/"/>
    
  </entry>
  
  <entry>
    <title>Service Worker開発で起きた不具合を振り返る</title>
    <link href="https://future-architect.github.io/articles/20210216/"/>
    <id>https://future-architect.github.io/articles/20210216/</id>
    <published>2021-02-15T15:00:00.000Z</published>
    <updated>2021-02-22T02:08:33.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIGの川端です。</p><p>先日、Vue.js + Service Worker開発案件が終わりました。その振り返りとして、Service Worker開発で起きた不具合と対応方法を記載します。</p><img src="/images/20210216/thumbnail.png" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/templune-1493489/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2044932">Diego Velázquez</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2044932">Pixabay</a>からの画像</p><h1 id="Service-Workerとは"><a href="#Service-Workerとは" class="headerlink" title="Service Workerとは"></a>Service Workerとは</h1><p>Service Workerは、ブラウザがWebページとは別にバックグラウンドで実行するJavaScriptになります。</p><h1 id="利用ブラウザ-バージョン情報など"><a href="#利用ブラウザ-バージョン情報など" class="headerlink" title="利用ブラウザ/バージョン情報など"></a>利用ブラウザ/バージョン情報など</h1><ul><li>Chrome v88.0.4324.146</li><li>Vue.js v2.6.11</li></ul><h1 id="起きた不具合その１"><a href="#起きた不具合その１" class="headerlink" title="起きた不具合その１"></a>起きた不具合その１</h1><h2 id="事象"><a href="#事象" class="headerlink" title="事象"></a>事象</h2><p>Service Worker上で、<code>setInterval</code>の処理を用意したところ、数分で止まるという報告が上がりました。<br><code>setInterval</code>は、バックグランド上で定期的にある処理をするために用意したものです。</p><figure class="highlight js"><figcaption><span>service-worker.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1秒ごとに処理を実行</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>調べてみるとService Workerの活動には制限があるようでした。</p><p>またブラウザのDevToolを起動している場合は、Service Workerは常時活動中となり、<code>setInterval</code>の処理が止まることはありません。開発中はブラウザのDevToolを常時起動中であったため、本件不具合に気づかないという事態になりました…</p><p><a href="https://w3c.github.io/ServiceWorker/#service-worker-lifetime">参考：Service Worker Lifetime</a></p><h2 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h2><p><code>setInterval</code>の処理をService WorkerからVue.js側（Webアプリ側）に移動しました。</p><p>簡単な例ですが、下記のように実行したい画面のComponentに組み込みました。</p><figure class="highlight html"><figcaption><span>sample1.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;sample1&#x27;</span>,</span></span><br><span class="line">  created () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1秒ごとに処理を実行</span></span></span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p>本記事は、<code>setInterval</code>に焦点を当てましたが、Service Worker側に用意したWebSocket受信処理も止まってしまったため、WebSocket受信処理もVue.js側に移動する対応も実施しました。</p><h1 id="起きた不具合その２"><a href="#起きた不具合その２" class="headerlink" title="起きた不具合その２"></a>起きた不具合その２</h1><h2 id="事象-1"><a href="#事象-1" class="headerlink" title="事象"></a>事象</h2><p>［Ctrl］＋［Shift］＋［R］キーでリロードすると、下記のエラーが出てVue.jsからService Workerへのメッセージ送信が失敗するという事象が起きました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot read property &#39;postMessage&#39; of null</span><br></pre></td></tr></table></figure><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>［Ctrl］＋［Shift］＋［R］キーでリロードすると、Service Workerが解除され、下記の<code>controller</code>が<code>null</code>になったことが原因でした。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.serviceWorker.controller.postMessage(&#123; msg &#125;)</span><br></pre></td></tr></table></figure><p><a href="https://w3c.github.io/ServiceWorker/#dom-serviceworkercontainer-controller">Service Worker Controller</a>を確認すると、</p><blockquote><p>navigator.serviceWorker.controller returns null if the request is a force refresh (shift+refresh).</p></blockquote><p>の記載があり、［Ctrl］＋［Shift］＋［R］キーでリロードしたときに<code>controller</code>が<code>null</code>になるのは仕様でした。</p><h2 id="対応-1"><a href="#対応-1" class="headerlink" title="対応"></a>対応</h2><p>再度Service WorkerがWebアプリをコントロールする状態になるように下記を実施しました。<br>まずVue.js側に、Service Workerが<code>active</code>になったら、Service Worker側に<code>claim</code>するようにメッセージを送ります。</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Service Workerの登録</span></span><br><span class="line">    <span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.serviceWorker.register(<span class="string">&#x27;/service-worker.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Service Workerがactiveになったら、実行される</span></span><br><span class="line">    <span class="keyword">const</span> activeRegistration = <span class="keyword">await</span> navigator.serviceWorker.ready</span><br><span class="line">    <span class="comment">// この段階では、まだcontrollerはnullのため、active.postMessageでメッセージを送信</span></span><br><span class="line">    activeRegistration.active.postMessage(&#123; <span class="attr">action</span>: <span class="string">&#x27;claim&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次にService Worker側で該当のメッセージを受け取ったら、<code>self.clients.claim()</code>を実施します。</p><figure class="highlight js"><figcaption><span>service-worker.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.onmessage = <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (message.data.action === <span class="string">&#x27;claim&#x27;</span>) &#123;</span><br><span class="line">    self.clients.claim()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここまで対応すると、Service WorkerがWebアプリをコントロールしている状態になります。<br>またService Workerがコントロールする状態になるまで、<code>navigator.serviceWorker.controller.postMessage</code>の処理は失敗します。<br>その失敗した処理のリカバリ方法として、下記のように画面をリロードして再実行するように対応しました。</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Service WorkerがWebアプリをコントロール開始</span></span><br><span class="line">    navigator.serviceWorker.oncontrollerchange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.location.reload()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.serviceWorker.register(<span class="string">&#x27;/service-worker.js&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> activeRegistration = <span class="keyword">await</span> navigator.serviceWorker.ready</span><br><span class="line">    activeRegistration.active.postMessage(&#123; <span class="attr">action</span>: <span class="string">&#x27;claim&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h1><p>Service Worker開発で起きた不具合を２例紹介しました。</p><p>なかなか解決策が見つからず辛いと感じることもありましたが、こうして考えた解決策を公開することができて、大変嬉しく思っています。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201013/index.html" data-iframely-url="//cdn.iframe.ly/SAxxrkF?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200428/index.html" data-iframely-url="//cdn.iframe.ly/2dHfIIG"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIGの川端です。&lt;/p&gt;
&lt;p&gt;先日、Vue.js + Service Worker開発案件が終わりました。その振り返りと</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
    <category term="ServiceWorker" scheme="https://future-architect.github.io/tags/ServiceWorker/"/>
    
  </entry>
  
</feed>
