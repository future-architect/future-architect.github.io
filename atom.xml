<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-08-11T02:24:26.907Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ダイエット食のブレイクスルー！低温調理器を自作して鶏むね肉を美味しく食べる</title>
    <link href="https://future-architect.github.io/articles/20200811/"/>
    <id>https://future-architect.github.io/articles/20200811/</id>
    <published>2020-08-10T15:00:00.000Z</published>
    <updated>2020-08-11T02:24:26.907Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休みの自由研究連載</a>の7回目です。</p><p>こんにちは。筒井です。</p><p>「コロナ太り」という単語をよく目にする今日この頃ですが、皆さんのお腹の具合はいかがでしょうか。</p><p>これからダイエットに取り組もうという方は、おそらく鶏むね肉さんのお世話になるかと思います。鶏むね肉は高たんぱく質で、皮を剥いでしまえば脂質も低い食材です。しかし、調理方法に一工夫加えないとぱさついた食感になってしまうデメリットがありました。</p><p>しかしここ数年、低温調理、あるいはSous videと呼ばれる調理法が登場し、鶏むね肉がとても美味しく食べられるようになりました。</p><p>市場にはAnovaやBONIQといった専用の製品がありますが、せっかくなので自作することにしました。</p><h2 id="設計と部品選定"><a href="#設計と部品選定" class="headerlink" title="設計と部品選定"></a>設計と部品選定</h2><p>低温調理に必要な機能はシンプルで、40℃～70℃程度の水温をキープするだけです。</p><p>システム全体の構成は以下のようになります。目標温度と測定した水温の差がゼロになるようにヒータの出力を制御します。</p><p><img src="/images/20200811/block_diagram.png" alt=""></p><p>まずヒータには、熱帯魚の水槽用のものを使用しました。温度計は自分でこしらえるので、サーモスタット付きのものは使えません。<br><a href="https://www.yodobashi.com/product/100000001003655227/" target="_blank" rel="noopener">https://www.yodobashi.com/product/100000001003655227/</a><br>（買ったのが結構前なので、販売終了してしまっています。すみません。）</p><p>次に温度計ですが、DS18B20という温度センサを防水加工したものを使用しました。<br><a href="https://www.aliexpress.com/item/32862371307.html" target="_blank" rel="noopener">https://www.aliexpress.com/item/32862371307.html</a></p><p>コントローラにはESP32を使用しました。ゆくゆくはスマホから操作を行うことを見越しての選定です。<br><a href="http://akizukidenshi.com/catalog/g/gM-11819/" target="_blank" rel="noopener">http://akizukidenshi.com/catalog/g/gM-11819/</a> </p><p>コントローラからヒータを制御するには、AC100Vをオン/オフする必要があります。これにはソリッドステートリレーを使用しました。<br><a href="http://akizukidenshi.com/catalog/g/gK-00203/" target="_blank" rel="noopener">http://akizukidenshi.com/catalog/g/gK-00203/</a></p><h2 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h2><p>これらを組み立てたのが以下の写真です。ケースはダイソーで購入した容器です。</p><p><img src="/images/20200811/overview.jpg" alt=""></p><p>SSRは基板付きのキットを購入しましたが、かさばるのでユニバーサル基板に実装してしまいました。実装時の注意点として、絶縁のためにAC100Vの配線はユニバーサル基板上で1コマずつ空けて配線し、ランドを削り取っておくのが良いでしょう。</p><p>また設計のところでは解説しませんでしたが、温度を表示するためのディスプレイを追加しています。</p><p>ざっくりとした接続図は以下のようになります。</p><p><img src="/images/20200811/schematics.png" alt=""></p><p>さらにポンプという新キャラが出てきましたが、これは水を撹拌するためのものです。<br><a href="https://www.amazon.co.jp/dp/B07D29YT2C/" target="_blank" rel="noopener">https://www.amazon.co.jp/dp/B07D29YT2C/</a></p><p>最初は自然対流のみで水温が均一になるかと思ったのですが、思いの外鍋の中で温度差が生じてしまったためポンプを追加しました。</p><h2 id="ソフトウェアの実装"><a href="#ソフトウェアの実装" class="headerlink" title="ソフトウェアの実装"></a>ソフトウェアの実装</h2><p>実装したソフトウェアの一部を抜粋します。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">control</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// DS18B20から温度を取得する</span></span><br><span class="line">  <span class="keyword">uint32_t</span> convTime = ds18b20.requestTemperature();</span><br><span class="line">  <span class="built_in">delay</span>(convTime);</span><br><span class="line">  <span class="keyword">float</span> temperature;</span><br><span class="line">  <span class="keyword">if</span> (ds18b20.getTemperatureC(&amp;temperature) != OK)</span><br><span class="line">  &#123;</span><br><span class="line">    log_e(<span class="string">"Failed to measure temperature."</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  log_i(<span class="string">"Temp = %.4f deg-C"</span>, temperature, temperature);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ディスプレイに温度を表示する</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">16</span>];</span><br><span class="line">  <span class="built_in">sprintf</span>(buf, <span class="string">"%2.1f %lcC"</span>, temperature, <span class="number">0xb0</span>);</span><br><span class="line">  displayTask.displayMessage(buf);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ヒーター制御</span></span><br><span class="line">  <span class="keyword">if</span> (temperature &lt; (target_temp - <span class="number">1</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    acSwitch.turnOn();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (temperature &gt; (target_temp + <span class="number">1</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    acSwitch.turnOff();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ヒーターの制御は、ヒステリシスを持たせたオンオフ制御としています。例えば目標温度を60度とした場合、測定した水温が61度を上回ったときにヒーターをオフに、59度を下回ったときにオンにします。</p><h2 id="調理"><a href="#調理" class="headerlink" title="調理"></a>調理</h2><p><img src="/images/20200811/cooking.jpg" alt=""></p><p>調理中の様子です。乱雑なキッチンですみません。</p><p>バケツに10Lほどの水を張り、そこにジップロックにいれた鶏むね肉と、ヒータ、温度計、ポンプを放り込みます。</p><p>今は10Lのバケツに8Lほどの水で使用していますが、温度を保つ分には200Wのヒータで十分です。しかし、20度ほどの水を60度まで温めるのは不可能と思ったほうがいいかもしれません。我が家は幸い給湯器から60度のお湯が出せるので、それを使用しています。</p><h2 id="実食"><a href="#実食" class="headerlink" title="実食"></a>実食</h2><p>お待ちかねの実食です！</p><p><img src="/images/20200811/chicken.jpg" alt=""></p><p>鶏むね肉の下ごしらえは何もしませんでしたが、とってもやわらかーく仕上がっています。加熱は62度で1時間行い、引き上げ後にジップロック内に軽く塩をして、10分ほど休ませました。</p><p>ソースはねぎ塩にんにくだれです。長ねぎとにんにくをみじん切りにして、ごま油と塩で和えただけの簡単たれですが、病みつきになる美味しさです。にんにくパワーで夏を乗り切りましょう。</p><p>鶏むね肉を丸々1枚（約300g）使ったのでかなりの食べごたえです。それなのに、これ全部食べてもおよそ400kcal！ダイエットにピッタリの高たんぱく食です。<br>（鶏むね肉の皮は剥ぎ取っています。余った皮はまとめて冷凍しておいて、ある程度溜まったら鶏油を作るのがおすすめです。）</p><p><img src="/images/20200811/pork.jpg" alt=""></p><p>こちらは同様に豚バラ肉を65度で3時間加熱したものです。</p><p>脂身がほとんど溶け出しておらず、非常に罪深い食感です。こちらは八角を効かせた東坡肉風のソースに、白髪ねぎと辛子を添えて頂きました。</p><p>脂質が多いのでダイエットには向いていませんが、とても美味しかったです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>自作の低温調理器で、鶏むね肉をとても美味しく食べられました。ダイエット食のブレイクスルーです。</p><p>課題としては、ヒータ出力の200Wが少し力不足なこと、ケーブルの取り回しが煩雑なことがあります。調理に支障はありませんが、使い勝手があまり良くありません。</p><p>今回の製作にかかった費用は以下の通りです。</p><table><thead><tr><th>品目</th><th>金額</th></tr></thead><tbody><tr><td>ヒータ</td><td>\2,200</td></tr><tr><td>温度計</td><td>\150</td></tr><tr><td>ポンプ</td><td>\1,100</td></tr><tr><td>ESP32</td><td>\1,500</td></tr><tr><td>ソリッドステートリレー</td><td>\250</td></tr><tr><td>その他配線材、ケースなど</td><td>\1,000</td></tr></tbody></table><p>合計で<strong>6,200円</strong>でした。</p><p>一方市販品を調べてみると、アイリスオーヤマの低温調理器が1万円を切る価格で売られていました。<br><a href="https://www.amazon.co.jp/dp/B07Z5482Y6" target="_blank" rel="noopener">https://www.amazon.co.jp/dp/B07Z5482Y6</a></p><p>賢明な皆様は、市販品を買ったほうが良いと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;フューチャー夏休みの自由研究連載&lt;/a&gt;の7回目です。&lt;/p&gt;
&lt;p&gt;こんにちは。筒井です。&lt;/p&gt;
&lt;p&gt;「コロナ太り」という単語をよく目にする
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Future電子工作部" scheme="https://future-architect.github.io/tags/Future%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C%E9%83%A8/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="電子工作" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="ESP32" scheme="https://future-architect.github.io/tags/ESP32/"/>
    
  </entry>
  
  <entry>
    <title>自動売買ツールを自作してみよう</title>
    <link href="https://future-architect.github.io/articles/20200810/"/>
    <id>https://future-architect.github.io/articles/20200810/</id>
    <published>2020-08-09T15:00:00.000Z</published>
    <updated>2020-08-11T03:21:38.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h2><ul><li>所属：テクノロジーイノベーショングループ</li><li>社会人歴： 5年目のITコンサルタント</li><li>好きな言語：Python、Go</li><li>苦手な言語：日本語</li><li>趣味：<ul><li>特定な問題を解くため、技術要素を組み合わせて応用すること<ul><li>例えば、ボードゲームやルービックキューブのようなパズルをモデリングしてプログラミングで解くこと</li></ul></li><li>時間かかる定形作業を自動化すること</li></ul></li></ul><p>夏自由の研究では、<strong>大人たちが大好きな刺激的な「おカネ」の話</strong>をしようと思います。個人プロジェクトとして、IT技術、数学と金融の知識を融合し、FX<a href="https://ja.wikipedia.org/wiki/%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%BC%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3" target="_blank" rel="noopener">バイナリオプション</a>の自動売買ツールを作ります。</p><p><strong>🚧どんなに技術を使っても、ハイリスクであることは相変わらず、損する可能性も十分にあります。本記事への利用についてご注意ください🚧</strong></p><p>本文にもFXバイナリオプションのルールを簡単に説明しますが、どうしてもやってみないとイメージつかない方は、<a href="https://fx-navi.tokyo/category/bo" target="_blank" rel="noopener">こちらの記事</a> も参考ください。証券会社が提供している無料のデモ取引をやってみるのもオススメです。</p><h2 id="自動売買ツールを自作する経緯"><a href="#自動売買ツールを自作する経緯" class="headerlink" title="自動売買ツールを自作する経緯"></a>自動売買ツールを自作する経緯</h2><h3 id="趣味優先"><a href="#趣味優先" class="headerlink" title="趣味優先"></a>趣味優先</h3><p>私はデータを操ることが大好きです。自然からのデータも人間活動におけるデータも収集&amp;分析し、知られていない隠れた知識を解明することが、何よりも楽しいことだと思います。</p><p>学生時代から少しずつ株や投信やFXを試してきましたが、あまり良い資産運用の成績にならず、自分には才能も金運も無いことを自覚しました。時間とお金の無駄にならないように資金管理や投資を自動化し、時間のコストの削減と成績向上に繋げたら良いなと思い始めました。</p><h3 id="失敗談"><a href="#失敗談" class="headerlink" title="失敗談"></a>失敗談</h3><p>今年5月頃、私はFXバイナリオプションをトレードした実履歴です。入金した<strong>15万円</strong>は、1週間でほぼ全損し大失敗でした。<br><img src="/images/20200810/chart.png" alt=""></p><p>後から振り返ると、様々な誤りや感情的な動きを発見しました。</p><p>例えば、22日14:00の操作は、画面上の「買」と「売」ボタンを間違えて逆操作してしまいました。この1ポチったミスだけで、3万円以上の損失が1秒以内に発生。投資は本当に色々な意味のハイリスクですね。</p><p>ちなみに、FXバイナリオプションは判定時刻（普通は数時間以内）のFX通貨ペアの値段は、あるターゲット値段以上になるか、以下になるかを当ててみるゲームです。もちろん、当たりなら賞金が出て、はずれなら当初の参加費を没収されます。</p><p><strong>FXバイナリオプションのルール</strong>を簡単に説明すると、</p><ul><li>1枚の「HIGH」チケットを買うと、特定な時刻にターゲットFX通貨ペア（例えばUSD/JPY）が、もし約束の値段以上なら1000円もらえる、もし逆な場合は0円をもらえ、チケットの購入料を全額損する</li><li>同じように、1枚の「LOW」チケットを買うと、特定な時刻にターゲットFX通貨ペアが、もし特定な値段よりより低いなら1000円もらえる、もし逆な場合は0円をもらえ、チケットの購入料を全額損する</li><li>判定時間までにいつでもチケットを買えますが、それに必要な料金（数円〜1000円）が、ターゲット通貨ペアの値動きなどに影響され、時間と共に変動していく</li></ul><p>上の表に結果欄にある「SETTLED」は、予測があっていた意味で、チケット枚数かける1000円のペイアウトがもらえます。「OUT_THE_MONEY」は、予測が外れ、チケット購入料を全損。値動きの途中で、損切りや利確でも行えます「SELL_BACK」。</p><p>売買の間にFXのスプレッドスプレッドのような値段差は手数料として代価になります。</p><p>上の1週間のトレードに対して、初期損益はゼロからスタートとすると、損益の変化は以下のようなグラフになります。<br><img src="/images/20200810/manual_oper.png" alt=""></p><p>前半、5万円弱儲かる時期もありますが、後半は調子に乗って大額の取引を始め、一気に転落。2、3回ぐらい反発がありましたが裏返すことは無理でした。</p><h3 id="人間性の弱点"><a href="#人間性の弱点" class="headerlink" title="人間性の弱点"></a>人間性の弱点</h3><p>客観的に反省したら、これはまさに人間性の弱点を映っている鏡ではないでしょうか。</p><ul><li>人間は感情に左右される、非理性的な行動を取ること多々でしょう<ul><li>利益を得られる状況では、安定を求めてリスクを回避する。少しだけ評価益になった時、すぐに利確で逃げてしまう</li><li>損失を被る状況では、リスクを負ってでも損失を回避し、その結果、逆に損失拡大してしまう</li><li>よって、いつも益が小さく、損が大きい、それを繰り返している</li></ul></li><li>人間は反応が遅くて冷静に計算したら時間がかかる。少し躊躇したら、利益のチャンスや損切りのタイミングなどすぐに見逃してしまう</li><li>人間はどんなに慎重に操作しても、疲れや不注意でミスで誤操作を避けるのはがどうしても難しいでしょう</li></ul><p><strong>こんな弱い人間、武器を何も持っていないままで戦場に立つのは、勇気ではない、ただの犠牲です！</strong></p><p>武器となる機械で実現した自動売買を使うメリットが明らかですね。</p><ul><li>機械が休まずに、僕が寝ている間でも働いてくれる</li><li>機械が理性的で、我々人間のように感情的に左右されることがない</li><li>同時に複数のパラメータやデータを見ることができ、短時間に反応できる</li></ul><h2 id="チャンスは本当にあるのか"><a href="#チャンスは本当にあるのか" class="headerlink" title="チャンスは本当にあるのか"></a>チャンスは本当にあるのか</h2><h3 id="大数の法則"><a href="#大数の法則" class="headerlink" title="大数の法則"></a>大数の法則</h3><p><strong>機械を使って代行トレードすれば、勝つでしょうと思ったら？ちょっと待ってと！</strong></p><p>敵は人間性だけではないのです。儲けるかどうかは期待値や確率の問題です。カジノでギャンブルのゲームたちは、勝つ確率が明確に計算されて、リターン対リスクの期待値がそもそもマイナスですね。</p><p>「マーチンゲール」という負けたら倍に賭ける方法、「パーレー法」という勝ったら倍に賭ける方法などなど、いろいろストラテジーが存在しますが、みんなカジノに負けてしまいます。</p><p>そもそも期待値がマイナスの不利な儲けは、個別に勝つ確率が確かに0ではないが、ただし長期的に繰り返すほど勝てる希望がなくなります。最終的に大数の法則につかまるわけです。</p><p>売買のスプレッドが存在する時点で、期待値が不利なわけです。言い換えると、ランダムにトレードするなら、売り手と買う手がバランス良い場合、証券会社はカジノの親のように安定な収入が入ってくるわけです。</p><p>敵は数学ですので、武器も数学にあります。</p><p>チケットの値段は判定時刻になるまでずっと変化しているので、勝つ確率とペーアウトの比率も常に変動しているんです。例えば、勝率は90%の標的は、チケット値段が950円、勝つ可能性が高いけれど、勝ったらただプラス50円益、万が一負けたら、マイナス950円損です。実は利益の期待値がマイナスなので、不利な取引です。また、仮に勝率は25%、チケット値段が200円の場合、4分の3の可能性でその200円を損しますが、勝ったら800円を得ます。それは有利なトレードです。チャンスがあれば繰り返し続けるべきです。</p><p>いつも各チケットの予想勝率と今の値段が有利か不利かをリアタイムで計算して、有利の場合しかトレードしないことは、勝ちパターンですね。</p><p>問題の根本は、やっているゲームに（例えばバイナリオプション）、スプレッドに勝てる有利なトレードのチャンスが本当にありますか、それとも、ギャンブルのように、いつもマイナス期待値の罠っだらけですか。</p><p>検証してみないとわからないですね。</p><h3 id="予め習った有用な概念"><a href="#予め習った有用な概念" class="headerlink" title="予め習った有用な概念"></a>予め習った有用な概念</h3><ul><li>分散の長期記憶性に基づいた予測の<a href="https://ja.wikipedia.org/wiki/ARCH%E3%83%A2%E3%83%87%E3%83%AB#GARCH(p,q)%E3%83%A2%E3%83%87%E3%83%AB" target="_blank" rel="noopener">GARCH</a><br>モデルを使って判定時の値段帯に落ちる確率を計算する<ul><li>金融時系列データに対して、値動きの方向より、値動きの分散（ボラティリティ）の予測の精度が高いらしい</li><li>Pythonはさすがデータサイエンティストの大好物、GARCH及び拡張モデルの実装ライブラリまで提供している → <a href="https://pypi.org/project/arch/" target="_blank" rel="noopener">arch</a></li></ul></li><li><a href="https://en.wikipedia.org/wiki/Kelly_criterion" target="_blank" rel="noopener">ケリー基準</a>を使ってトレードは有利なのか不利なのか、有利ならトレードの量を何割にするかを決める<ul><li><code>kelly = win_rate - (1-win_rate) * premium / (1-premium)</code></li><li><code>kelly</code>値は、1回のトレードで手元にある投資用の総資金の割合の基準。それは、損失のリスクを考えた上で、論理上資金を一番効率的に増やす投資の比率である</li><li><code>kelly</code>値は<code>win_rate</code>(勝つ確率)と<code>premium</code>（チケットの料金は950円、ペーアウトは1000円の場合は<code>premium = 950/1000 = 0.95</code>）によって計算された</li><li><code>win_rate</code>&lt;=<code>premium</code>の場合、<code>kelly</code>&lt;=0、それは不利な取引を意味して、手を出さないほうが良い</li><li><code>win_rate</code>が1ではない時、オールインしてはいけない。それは論理上全損のリスクを避けられて、いつまでも裏返す可能性を放棄しない</li></ul></li></ul><p>改めて、その悔しい1週間の手動の取引を振り返って見たらどうかと思い、取引発生時点<strong>以前</strong>の値動き情報をGARCHモデルに投入し、判定時の勝つ確率(<code>win rate</code>)を評価し、理性的な投資比率(<code>kelly</code>)を出してみました。</p><img src="/images/20200810/kelly.png" class="img-middle-size"><p>どうやら汗が出るほどびっくりしました。手動で取引したのは、半分以上が不利な(kelly&lt;0)取引だったことが分かりました。そして、有利な取引に対しても、もっと「正確な」比率で資金を出せば、もっと良い結果になったはずです。悔しくてたまりません。</p><h2 id="自動売買ツールを自作する流れ"><a href="#自動売買ツールを自作する流れ" class="headerlink" title="自動売買ツールを自作する流れ"></a>自動売買ツールを自作する流れ</h2><h3 id="市販より自作"><a href="#市販より自作" class="headerlink" title="市販より自作"></a>市販より自作</h3><p>「自動売買」をグーグルで検索したら、つないで出てくるキーワードは、「比較」、「おすすめ」とかはもちろん出てきますが、なんと「詐欺」、「稼げない」のも出るので、危ない感を楽しめるリスク屋さん向けの雰囲気が湧いています。</p><p>私も市販の自動売買をあまり信用しない派です。なぜなら、みんなが掘りに行く金鉱には、もう金が無いと思うからです。売買シグナルやインジケータは最初はよく効くかもしれませんが、広く知られたら、真似られて利益も山分けになって利益が小さくなるのです。</p><p>自作の良い点をあげます。</p><ul><li>手数料がかからないので、手数料が利益に勝てない心配なし</li><li>中身がすべて把握できて安心</li><li>自作なのでカストマイズしやすく、随時に進化できる</li></ul><h3 id="ターゲットをバイナリオプションに設定"><a href="#ターゲットをバイナリオプションに設定" class="headerlink" title="ターゲットをバイナリオプションに設定"></a>ターゲットをバイナリオプションに設定</h3><p>主流のFXや株の戦場を避けて、ちょっと亜流系のバイナリオプションを対象にしています。<br>理由は下記のようにリストアップします。</p><ul><li>売買や勝負のルールは簡単</li><li>ルールによって、バイナリオプションはハイリスクだが、利益と損失の限界が取引の前にも読める</li><li>ターゲットはFXデータなので、公開性がある</li><li>比較的に値動きの方向より、値動きの分散（ボラティリティ）の予測の精度が高いらしく、バイナリオプションは、値動きの分散の大小の予測でトレード可能（後述のストラドル法）</li><li>リスクとリターンの最大値が操作する前にも読める。比較的に単純なルールなので、自動化しやすいところがある</li><li>自動売買に委ねるが、高頻度の売買操作が不要（1シリアルは例えば2時間で1回の操作のみ）のため、不正操作の理由でアカウントがフリーズされるリスクが減った（ただしゼロリスクではない）</li></ul><h3 id="具体的に実践した流れはこんな感じ"><a href="#具体的に実践した流れはこんな感じ" class="headerlink" title="具体的に実践した流れはこんな感じ"></a>具体的に実践した流れはこんな感じ</h3><ul><li>アカウント開き、やり方やルールを慣れていく（2、3年前から）<br>↓</li><li>データ収集を自動化（今年4~5月から、コロナのGWの暇つぶしでスタート）<br>↓</li><li>画面上の手動操作の代わりに、売買操作の機械化、自動化（5~6月）<br>↓</li><li>予測モデルを導入し、直近の歴史データを使ってシミュレーションを実施（←直近まで）<br>↓</li><li>パラメータ調整しつつ、実運用を試みる（←今ここ）<br>↓</li><li>経済指標などの外部要素の影響を分析し、もう一層モデルの予測精度を向上（将来プラン）</li></ul><p>この自動売買システムが本当に儲けられるか？実績はどうだったの？を報告したかったんですが、まだそのステップに進行していなくて、ちょっと残念です。今回はシミュレーション結果だけ出します。<br>本運用開始してから継続的に報告しようと思います。</p><h3 id="システムの構成はこんな感じ"><a href="#システムの構成はこんな感じ" class="headerlink" title="システムの構成はこんな感じ"></a>システムの構成はこんな感じ</h3><p><img src="/images/20200810/constructure.png" alt=""></p><h4 id="①ポーリングクライアント"><a href="#①ポーリングクライアント" class="headerlink" title="①ポーリングクライアント"></a>①ポーリングクライアント</h4><p>PythonのrequestパッケージのSessionを使って、ログイン後のクッキー情報を保持しながら継続的にAPIを本物クライアントの発信頻度でデータをポーリングするクライアントです。将来的にデータを分析にするため、Elasticsearchを使って溜め込んでいます。</p><p>Kibanaですぐに可視化できるのが便利ですね。</p><p><img src="/images/20200810/polling_client.png" alt=""></p><h4 id="②取引に関するAPIクライアント"><a href="#②取引に関するAPIクライアント" class="headerlink" title="②取引に関するAPIクライアント"></a>②取引に関するAPIクライアント</h4><p>取引命令を出すコンポーネントです。ポーリングのクライアントとほぼ同じ作りですが、管理上の利便さと開発時の誤操作を防ぐため、別コンポネントに分けています。</p><h4 id="③予測モデル"><a href="#③予測モデル" class="headerlink" title="③予測モデル"></a>③予測モデル</h4><p>前述のGARCHライブラリを使って、2〜4時間の履歴データを使って、近い将来の確率をイメージとして、このような情報を出す感じです。</p><p>「次の判定時刻20:20に、USD/JPYはターゲット値段106.6より高い確率は32%、106.6以下の確率は68%」</p><h4 id="④意思決定"><a href="#④意思決定" class="headerlink" title="④意思決定"></a>④意思決定</h4><p>1ターンの中に、資金数や保有できるチケット数の数の上限がありますので、kelly値がプラスになったらすぐに動作するのではなく、全体的なベストを求めたいのです。</p><p>早い段階に決断したら、後からもっと良いチャンスを失うかもしれませんが、ずっと躊躇して決めないままで、過去に戻れないし、最良の停止タイミングを探す<a href="https://ja.wikipedia.org/wiki/%E7%A7%98%E6%9B%B8%E5%95%8F%E9%A1%8C" target="_blank" rel="noopener">秘書問題</a>が参考になるかと思います。<br>そして、いろんなストラテジーやパラメータをシミュレーションして継続的に調整するのです。</p><h4 id="⑤シミュレーション"><a href="#⑤シミュレーション" class="headerlink" title="⑤シミュレーション"></a>⑤シミュレーション</h4><p>Elasticsearchに溜めた過去データは学習の材料になって、どういうストラテジーやパラメータを適用したら儲かるか、そして、過学習にならないように、今回使っているデータだけにフィットするじゃなくて、モデルのパラメータをなるべく減らします。</p><p>GARCHモデルの<a href="https://ja.wikipedia.org/wiki/%E3%83%99%E3%82%A4%E3%82%BA%E6%83%85%E5%A0%B1%E9%87%8F%E8%A6%8F%E6%BA%96" target="_blank" rel="noopener">ベイズ情報量規準 BIC</a>（モデルのパラメータの数が多いほどモデル精度の評価に罰を与える評価基準）を参考しながら、一定の水準以下のものだけ採用する形になります。</p><p>以下はいい加減なパラメータを使ったシミュレーションです。初期10000円の資本金とその後の変化の結果です。</p><p>6月1ヶ月間の実データを使っています。私手動で1週間全損より、1ヶ月間でほぼ全損でしたね。</p><p><img src="/images/20200810/simulation1.png" alt=""></p><p>パラメータを適度に調整して、少し改善された例ですが、まだ右肩下がりのトレンドですね。</p><p><img src="/images/20200810/simulation2.png" alt=""></p><p>以下は、<em>ストラドル戦略</em>と普通の売買のミックスを使ったシミュレーションの資本金の変化の結果です。<br>月末に月初の2.5倍になりました。</p><p><img src="/images/20200810/simulation3.png" alt=""></p><p><em>ストラドル戦略</em>とは、前述の値動きの方向を予測しなくて、値動きの変動（分散やボラティリティ）の量を予測できたら儲かる方法です。</p><h3 id="【補足】ストラドル戦略"><a href="#【補足】ストラドル戦略" class="headerlink" title="【補足】ストラドル戦略"></a>【補足】ストラドル戦略</h3><p>オプション取引の戦略の一つです。</p><p>例えば、<code>USD/JPY 108.7 HIGH</code>と<code>USD/JPY 108.6 LOW</code>の同枚数を購入し、相場が108.6〜108.7の範囲で動くと損失、相場がその範囲外に大きく動いた場合は利益です。</p><p>このストラテジーは、ある程度リスクのヘッジが可能です。もっと大きい意味は、予測モデルを使って、値段の動き方向の精度とは関係なく、値段の分散（ボラティリティ）の予測は、ある程度の精度が出るなら問題ありません。</p><h2 id="注意書き"><a href="#注意書き" class="headerlink" title="注意書き"></a>注意書き</h2><p>バイナリオプションは1アカウントつき買えるロット数は上限がある（ギャンブルとかも一緒）、複利として回せません。つまり、他の金融投資みたいに、儲かったお金を用いて、比率的に拡大していくことは不可能なので、長期的な運用には向いていません。一定規模の資金になったら、配当のように徐々に出金していくのが賢明的ですね。</p><p><strong>どんなに技術を使っても、ハイリスクであることは相変わらず、損する可能性も十分にあります。</strong></p><p>その理由は以下です。</p><ul><li>予測モデルのインプットがあくまで過去のデータだけ、未来に対する予測の精度が有限である</li><li>有利なトレードでも、個別に損することが十分ありうる。続けてやらないと、大数の法則の威力が発揮できない</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>今回自動売買ツールを自作する理由<ul><li>トレーディングは人間性違反で、私もそれに才能がない</li><li>信用しない市販系ツールにお金をかけたくない</li><li>IT技術なら持っており、数学・金融の知識なら勉強できる</li><li>本当に行けるかどうかを探求したい好奇心駆使、何よりも趣味が大事</li></ul></li><li>今回自動売買ツールを必要な知識、技術<ul><li>FXバイナリオプションの概念とルール</li><li>GARCHモデル：分散の長期記憶性に基づいた予測のGARCHモデル</li><li>ベイズ情報量規準：過剰適合を防止のため、モデルの精度をあげる同時にパラメータの数を最小化する用の指標</li><li>Kelly基準：勝率とペーアウトが分かれば、取引が有利か不利かを判別でき、有利な取引に対して何割を賭けたほうが効率的なのが分かる</li><li>ストラドル戦略：値動きの方向の予測を諦め、分散の予測で儲かる手法（経済指標などの開示前に使うのが有効かもしれない　←将来にこの要素を自動取引に取り込むと思います）</li><li>自動化データ収集、変形、分析に必要なIT技術</li><li>丁寧なパラメータ調整、長く続く忍耐</li></ul></li><li>今回自動売買ツールを作った結果<ul><li>手動トレーディングはダメダメでしたが、自動化によって、リターンの期待値がマイナスの不利なトレードを避けられた</li><li>ストラドル戦略などリスクヘッジの手法を併用して、いい結果を得られるシミュレーションをした</li><li>システムの改善をしつつあるが、手動トレードをやめて、完全に自動化するのはこれから。</li></ul></li></ul><p>寝ている間もチャリンチャリンが聞こえるかもしれません。（笑）</p><p><img src="/images/20200810/image.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;headerlink&quot; title=&quot;自己紹介&quot;&gt;&lt;/a&gt;自己紹介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所属：テクノロジーイノベーショングループ&lt;/li&gt;
&lt;li&gt;社会人歴： 5年目のITコンサルタント&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="自動売買" scheme="https://future-architect.github.io/tags/%E8%87%AA%E5%8B%95%E5%A3%B2%E8%B2%B7/"/>
    
      <category term="バイナリーオプション" scheme="https://future-architect.github.io/tags/%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%BC%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
      <category term="ギャンブル" scheme="https://future-architect.github.io/tags/%E3%82%AE%E3%83%A3%E3%83%B3%E3%83%96%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>API Meetup Online #3で限定公開URL（Capability URLs）について話をしてきました。</title>
    <link href="https://future-architect.github.io/articles/20200809/"/>
    <id>https://future-architect.github.io/articles/20200809/</id>
    <published>2020-08-08T15:00:00.000Z</published>
    <updated>2020-08-11T02:48:54.897Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200809/93281_normal.png" class="img-middle-size"><p><a href="https://api-meetup.doorkeeper.jp/events/109648" target="_blank" rel="noopener">API Meetup Online #3</a>での登壇をお誘いをいただいたので、以前から調査していたものの、発表の機会のなかった限定公開URLについて調べていた内容を発表しました。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRLdRFqBXd35VgVUCvrXsn3kN4rUu7HDzIoy0Kibs_ThTD3mnWpagkGkpNY1a7J8uWijf0lX8SdRBo3/embed?start=false&loop=false&delayms=3000" frameborder="0" width="820" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>Real World HTTPの第3版が出るとしたら（具体的な計画とかはないですが）入れるかも、なネタでした。どちらかというとコンシューマー向けな機能な気がしますが、hipchatは以前、共有したファイルがこのCapability URLsだったという噂も聞きますし、サービスによってはエンプラでも使っているものもあるかもしれません。自分で実装するにしても、利用する側だったりといろんな立場でこの機能に関わる場合に、その安全性を評価する物差しは持っておきたいな、ということで調べました。</p><p>セキュリティ的には、「特定の誰かのファイルを見つける」でも、「誰でもいいからコンテンツを見つける」でも、かなり見つけるのは難しいんじゃないか、というのが所感です。ただ、「誰がいつアクセスしたのか」という証跡が必要な場合には合わないかもね、というのもありますし、ユーザー情報などをやりとりしないで「知っている」という条件だけで他のシステムとの連携が簡単に行えたりもするので、使えるかどうかはシステムごとの要件次第ですね。その要件と照らし合わせて使えるかどうか判断するためにもまとまった資料として価値があるんじゃないかと思います。</p><p>当日質問された、キーの衝突に関してですが、生成したキーはDBに登録しておく必要があります。これは本番のコンテンツを参照するのにも必要ですし、誰が生成したものか、リソースオーナーとの紐付けのためにも必要です。あとからオーナーが共有を解除したりとかもありますからね。そのため、DBに保存しておいて、それとの重複チェックは可能です。参考のGo実装を貼っておきます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"io"</span></span><br><span class="line">   <span class="string">"crypto/rand"</span></span><br><span class="line">   <span class="string">"encoding/base64"</span></span><br><span class="line">   <span class="string">"image"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//本当はDBとかを使う</span></span><br><span class="line"><span class="keyword">var</span> existingImages := <span class="keyword">map</span>[<span class="keyword">string</span>]image.Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genPublicKey</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    baseCode := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">30</span>)</span><br><span class="line">    <span class="comment">// 重複した公開URLを生成しないように、ループしてぶつからないキーが確実に生成されるようにする</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        io.ReadFull(rand, baseCode)</span><br><span class="line">        publicKey := base64.StdEncoding.EncodeToString(baseCode)</span><br><span class="line">        <span class="keyword">if</span> _, ok := existingImages[publicKey]; !ok &#123;</span><br><span class="line">            <span class="keyword">return</span> publicKey;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerImage</span><span class="params">(img image.Image)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    key := genPublicKey()</span><br><span class="line">    existingImages[key] = img</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"https://example.com/images/"</span> + key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このサンプルは雑にbase64にしていますが、記号が入らないエンコードとしてbase62があります。UUID v4なんだけどbase64でなるべく文字列長を短くするGoライブラリも昔作ってみました。このあたり、どれだけ短くするか、利便性とセキュリティや空間の広さをどうするかはエンジニアリング的にチャレンジが楽しい分野かと思います。どういったID生成ロジックを使ってはいけないか、とかも資料では触れています。</p><p><a href="https://github.com/shibukawa/uuid62" target="_blank" rel="noopener">https://github.com/shibukawa/uuid62</a></p><p>他には、Google CloudのAI系のAPIの発表がありました。仕事や趣味で使うチャンスもあるので知らない内容はなかったのですが、「アンパンマン」を含む音声をリアルタイムにテキスト化し、さらに英語翻訳するというクラウドエースの藏持さんの発表のデモは面白かったです。ウェザーニューズ（ズは濁点）の井原さんの発表も、データ量とかもろもろでその分野での圧倒的な感じがあって良かったです。チャンスがあれば使ってみたい。</p><p>API Meetupの運営のみなさま、発表の機会をいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200809/93281_normal.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://api-meetup.doorkeeper.jp/events/109648&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
      <category term="HTTP" scheme="https://future-architect.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>GoとSuffixArray</title>
    <link href="https://future-architect.github.io/articles/20200807/"/>
    <id>https://future-architect.github.io/articles/20200807/</id>
    <published>2020-08-06T15:00:00.000Z</published>
    <updated>2020-08-11T02:24:20.940Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200807/suffixarray.png" class="img-small-size"><p><a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休みの自由研究連載</a>の5回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG の辻です。</p><p>Go は標準ライブラリが充実しているとよく言われます。標準ライブラリだけで、HTTP サーバを作れたり、暗号化処理や、JSON や CSV といったデータ形式を扱うことができます。<code>go list std | grep -v vendor | wc -l</code> としてパッケージ数を見てみると、約 200 ものパッケージが存在することがわかります。本記事では、その多くの Go の標準ライブラリの中でも、個人的に面白いなと思ったライブラリを紹介したいと思います。<a href="https://golang.org/pkg/index/suffixarray/" target="_blank" rel="noopener">suffixarray</a> パッケージです。</p><p><code>suffixarray</code> パッケージは Suffix Array を扱うライブラリです。<code>suffixarray</code> パッケージの魅力を感じるには、まず Suffix Array とは何か？を知る必要があるでしょう。</p><h2 id="Suffix-Arrayとは"><a href="#Suffix-Arrayとは" class="headerlink" title="Suffix Arrayとは"></a>Suffix Arrayとは</h2><p>Suffix Array はデータ構造の 1 つです。1990 年に Udi Manber, Gene Myers によって考案されました。Suffix Array を用いると、検索したい任意の文字列から、漏れなく高速に文字列を検索できます。全文検索やデータ圧縮といった応用があります。</p><p>Suffix Array は文字列のすべての suffix を辞書順でソートし、それぞれの suffix の元の文字列における開始位置を保持する配列です。長さが n である文字列 T の suffix とは 1 ≦ i ≦ n なる i について T の i 文字目から n 文字目までの部分文字列のことを指します。具体的に <code>banana</code> という文字列で考えてみます。<code>banana</code> のおける suffix は以下の 6 つです。</p><ul><li>banana</li><li>anana</li><li>nana</li><li>ana</li><li>na</li><li>a</li></ul><p>各 suffix の開始位置をあわせて記載すると以下のようになります。</p><table><thead><tr><th align="left">開始位置</th><th>suffix</th></tr></thead><tbody><tr><td align="left">1</td><td>banana</td></tr><tr><td align="left">2</td><td>anana</td></tr><tr><td align="left">3</td><td>nana</td></tr><tr><td align="left">4</td><td>ana</td></tr><tr><td align="left">5</td><td>na</td></tr><tr><td align="left">6</td><td>a</td></tr></tbody></table><p>これらの suffix を辞書順でソートすると以下のようになります。</p><table><thead><tr><th align="left">開始位置</th><th>suffix</th></tr></thead><tbody><tr><td align="left">6</td><td>a</td></tr><tr><td align="left">4</td><td>ana</td></tr><tr><td align="left">2</td><td>anana</td></tr><tr><td align="left">1</td><td>banana</td></tr><tr><td align="left">5</td><td>na</td></tr><tr><td align="left">3</td><td>nana</td></tr></tbody></table><p>よって、<code>banana</code> の文字列における Suffix Array とは [6, 4, 2, 1, 5, 3] という配列になります。suffix の開始位置があれば元の suffix を構成することができ、開始位置から n 文字目までの部分文字列になります。<code>banana</code> における suffix の開始位置が 3 であれば元の suffix は 3 文字目から 6 文字目までの部分文字列であるため、<code>nana</code> という suffix であることがわかります。</p><h3 id="文字列のパターンマッチング"><a href="#文字列のパターンマッチング" class="headerlink" title="文字列のパターンマッチング"></a>文字列のパターンマッチング</h3><p>Suffix Array がどのようなデータ構造であるか分かりました。次に Suffix Array を用いて、文字列をパターンマッチングすることを考えてみます。<code>banana</code> という文字列から <code>an</code> という文字列をパターンマッチングすることを考えてみます。b<font color="Red">an</font><font color="Blue">an</font>a ですから、赤文字である 2 文字目から 3 文字目の <code>an</code> と、青文字である 4 文字目から 5 文字目の <code>an</code> の 2 箇所でマッチします。文字列 T の任意の部分文字列は、その出現位置を開始位置とする T の suffix の prefix です。つまり <code>an</code> であれば suffix <code>ana</code> の prefix である <code>an</code> と suffix  <code>anana</code> の prefix である <code>an</code> です。このように文字列 P を prefix としてもつような、T の suffix を探索することによって、文字列のパターンマッチングができます。Suffix Array は文字列の suffix が辞書順でソートされた suffix の開始位置を保持しているため、二分探索を用いて、高速にパターンマッチングできます。</p><p><code>banana</code> の Suffix Array が求められているとして、Go で探索する実装例を示します。実装上の Suffix Array は 0-indexed とします。</p><ul><li>Suffix Array を二分探索して、一致するすべての suffix を検索する実装例</li></ul><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := <span class="string">"banana"</span></span><br><span class="line">p := <span class="string">"an"</span> <span class="comment">// マッチングしたい文字列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// banana の Suffix Array (0-indexed)</span></span><br><span class="line">sa := []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// strings.Compare の戻り値が 0 よりも大きいうちの最小の index を探索</span></span><br><span class="line">left := sort.Search(<span class="built_in">len</span>(sa), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Compare(t[sa[i]:min(sa[i]+<span class="built_in">len</span>(p), <span class="built_in">len</span>(t))], p) &gt;= <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// strings.Compare の戻り値が 1 である最小の index を探索</span></span><br><span class="line">right := sort.Search(<span class="built_in">len</span>(sa), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Compare(t[sa[i]:min(sa[i]+<span class="built_in">len</span>(p), <span class="built_in">len</span>(t))], p) == <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := left; i &lt; right; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"suffix: %s, match: %s\n"</span>, t[sa[i]:], t[sa[i]:sa[i]+<span class="built_in">len</span>(p)])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">suffix: ana, match: an</span><br><span class="line">suffix: anana, match: an</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/JFNugaoB26N" target="_blank" rel="noopener">https://play.golang.org/p/JFNugaoB26N</a></p><p>このパターンマッチングは元の文字列 T の長さを $n$ として、マッチングしたい文字列 P の長さを $m$ とすると $O(m \log n)$ 時間でマッチングできます。Go の <a href="https://golang.org/pkg/sort/#Search" target="_blank" rel="noopener">sort.Search</a> 関数はソートされた配列やスライスに対して条件を満たす最小の index を二分探索することができます。上記の実装では、suffix における prefix の先頭 <code>len(p)</code> 文字目までの部分文字列とマッチングしたい文字列 <code>p</code> を <a href="https://golang.org/pkg/strings/#Compare" target="_blank" rel="noopener">strings.Compare</a> で比較し、結果が 0 以上と 1 となる最小の index <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>を探索しています。Suffix Array に対して二分探索を行うことによって、パターンマッチングするときは、元の文字列の長さに対して、対数時間でおさえることができます。</p><h2 id="Suffix-Array-の構築"><a href="#Suffix-Array-の構築" class="headerlink" title="Suffix Array の構築"></a>Suffix Array の構築</h2><p>Suffix Array を構築することを考えてみます。ナイーブに考えると、長さ $O(n)$ の文字列 $n$ つをソートすることになります。クイックソートの 1 回あたりの平均計算量 $O(n \log n)$ とあわせて $O(n^2 \log n)$ 時間になります。いかにして効率よく Suffix Array を構築できるかどうかがアルゴリズムのポイントになります。</p><ul><li>ナイーブにソートして構築する実装例</li></ul><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">text := <span class="string">"banana"</span></span><br><span class="line"></span><br><span class="line">d := <span class="built_in">make</span>([]data, <span class="number">0</span>, <span class="built_in">len</span>(text))</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(text); i++ &#123;</span><br><span class="line">d = <span class="built_in">append</span>(d, data&#123;</span><br><span class="line">Index:  i,</span><br><span class="line">Suffix: text[i:],</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort.Slice(d, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">ret := strings.Compare(d[i].Suffix, d[j].Suffix)</span><br><span class="line"><span class="keyword">if</span> ret &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> d &#123;</span><br><span class="line">fmt.Printf(<span class="string">"index: %d, suffix: %s\n"</span>, v.Index, v.Suffix)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> &#123;</span><br><span class="line">Index  <span class="keyword">int</span></span><br><span class="line">Suffix <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">index: 5, suffix: a</span><br><span class="line">index: 3, suffix: ana</span><br><span class="line">index: 1, suffix: anana</span><br><span class="line">index: 0, suffix: banana</span><br><span class="line">index: 4, suffix: na</span><br><span class="line">index: 2, suffix: nana</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/J97GtkfWBZp" target="_blank" rel="noopener">https://play.golang.org/p/J97GtkfWBZp</a></p><p>しかし、構築に $O(n^2 \log n)$ 時間かかるのでは、例えば 10 万文字程度の文字列の Suffix Array を構築するのにとても時間がかかるため、実用的ではありません。</p><ul><li>ManberとMyersのアルゴリズム</li></ul><p>そこで次は Manber と Myers によって示されたアルゴリズムを用いて構築することを考えてみます。基本的な着想はダブリングによるものです。つまり n 文字をソートするときに、まず 1 文字の部分文字列のみをソート、続いて 1 文字の部分文字列でソートした結果を用いて 2 文字の部分文字列をソート、、、と 2k 文字の部分文字列をソートするのに、k 文字の部分文字列でソートした結果を用います。詳しくは蟻本 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> を参照ください。蟻本が手もとにない場合は <a href="https://www.geeksforgeeks.org/suffix-array-set-2-a-nlognlogn-algorithm/" target="_blank" rel="noopener">Suffix Array | Set 2 (nLogn Algorithm)</a> などのページでアルゴリズムを確認ください。本記事では Go による実装のみを示します。ダブリングにより比較回数は $O(\log n)$ 回で 1 回あたりのソートの平均計算量が $O(n \log n)$ ですから、全体では $O(n (\log n)^2)$ 時間のアルゴリズムです。</p><ul><li>蟻本ベースの Go による Suffix Array を構築する実装</li></ul><figure class="highlight go"><figcaption><span>suffixarray.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> suffixarray</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> suffixArray <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// length of input string</span></span><br><span class="line">N <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// input text (ASCII only)</span></span><br><span class="line">Text <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Suffix Array</span></span><br><span class="line">Index []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(text <span class="keyword">string</span>)</span> *<span class="title">suffixArray</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> k <span class="keyword">int</span></span><br><span class="line">n := <span class="built_in">len</span>(text)</span><br><span class="line">rank := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line">sa := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line">tmp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">sa[i] = i</span><br><span class="line"><span class="keyword">if</span> i &lt; n &#123;</span><br><span class="line">rank[i] = <span class="keyword">int</span>(text[i])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rank[i] = <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmp := <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> rank[sa[i]] != rank[sa[j]] &#123;</span><br><span class="line"><span class="keyword">return</span> rank[sa[i]] &lt; rank[sa[j]]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ri, rj := <span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> sa[i]+k &lt;= n &#123;</span><br><span class="line">ri = rank[sa[i]+k]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> sa[j]+k &lt;= n &#123;</span><br><span class="line">rj = rank[sa[j]+k]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ri &lt; rj</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// k 文字についてソートされているところから、2k 文字をソートする</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>; k &lt;= n; k *= <span class="number">2</span> &#123;</span><br><span class="line">sort.Slice(sa, cmp)</span><br><span class="line">tmp[sa[<span class="number">0</span>]] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">tmp[sa[i]] = tmp[sa[i<span class="number">-1</span>]]</span><br><span class="line"><span class="keyword">if</span> cmp(i<span class="number">-1</span>, i) &#123;</span><br><span class="line">tmp[sa[i]]++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">rank[i] = tmp[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;suffixArray&#123;</span><br><span class="line">N:     n,</span><br><span class="line">Text:  text,</span><br><span class="line">Index: sa,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>banana</code> の文字列で試しにテストしてみましょう。</p><figure class="highlight go"><figcaption><span>suffixarray_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> suffixarray</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/google/go-cmp/cmp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNew</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">text <span class="keyword">string</span></span><br><span class="line">want *suffixArray</span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"normal"</span>,</span><br><span class="line">text: <span class="string">"banana"</span>,</span><br><span class="line">want: &amp;suffixArray&#123;</span><br><span class="line">N:     <span class="number">6</span>,</span><br><span class="line">Text:  <span class="string">"banana"</span>,</span><br><span class="line">Index: []<span class="keyword">int</span>&#123;<span class="number">6</span> <span class="comment">/* contain empty string */</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got := New(tt.text)</span><br><span class="line"><span class="keyword">if</span> diff := cmp.Diff(got, tt.want); diff != <span class="string">""</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"New() differs: (-got +want)\n%s"</span>, diff)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>テスト結果</li></ul><p>テストが Pass することを確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=== RUN   TestNew</span><br><span class="line">=== RUN   TestNew/normal</span><br><span class="line">--- PASS: TestNew (0.00s)</span><br><span class="line">    --- PASS: TestNew/normal (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>また Go で実装したライブラリは、国内のオンラインジャッジシステムの 1 つである <a href="http://judge.u-aizu.ac.jp/onlinejudge/" target="_blank" rel="noopener">Aizu Online Judge</a> の <a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_14_D" target="_blank" rel="noopener">Multiple String Matching</a> という問題を用いて検証しました。<del><a href="https://judgedat.u-aizu.ac.jp/testcases/ALDS1_14_D/17/in" target="_blank" rel="noopener">05_maximum_00.in</a> (1 MB程度あるので注意)のテストケースでタイムリミット超過(TLE)していましたが…</del></p><h3 id="suffixarray-パッケージによる-Suffix-Array-の構築"><a href="#suffixarray-パッケージによる-Suffix-Array-の構築" class="headerlink" title="suffixarray パッケージによる Suffix Array の構築"></a><code>suffixarray</code> パッケージによる Suffix Array の構築</h3><p>さて、メインである本家の <code>suffixarray</code> パッケージを見てみましょう。Suffix Array の構築は <a href="https://golang.org/pkg/index/suffixarray/#New" target="_blank" rel="noopener">New</a> 関数を用いることができます。</p><p><code>New</code> 関数で Suffix Array を構築し、<a href="https://golang.org/pkg/index/suffixarray/#Index.Lookup" target="_blank" rel="noopener">Lookup</a> メソッドや <a href="https://golang.org/pkg/index/suffixarray/#Index.FindAllIndex" target="_blank" rel="noopener">FindAllIndex</a> メソッドなどを用いて Suffix Array から文字列のマッチングができます。<code>banana</code> の例であれば、以下のように結果を得ることができます。</p><figure class="highlight go"><figcaption><span>main_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"index/suffixarray"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Example</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := <span class="string">"banana"</span></span><br><span class="line">p := <span class="string">"an"</span> <span class="comment">// マッチングしたい文字列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Suffix Array の構築</span></span><br><span class="line">sa := suffixarray.New([]<span class="keyword">byte</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="comment">// -1 でマッチングするすべての位置を取得。取得する index の順番はランダム</span></span><br><span class="line">indexes := sa.Lookup([]<span class="keyword">byte</span>(p), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> indexes &#123;</span><br><span class="line">fmt.Printf(<span class="string">"suffix: %s, match: %s\n"</span>, t[i:], t[i:i+<span class="built_in">len</span>(p)])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unordered Output:</span></span><br><span class="line"><span class="comment">// suffix: ana, match: an</span></span><br><span class="line"><span class="comment">// suffix: anana, match: an</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ベンチマーク"><a href="#ベンチマーク" class="headerlink" title="ベンチマーク"></a>ベンチマーク</h3><p><code>suffixarray</code> パッケージの使い方が分かったところで蟻本ベースの  Manber と Myers のアルゴリズムを用いて Suffix Array を構築する実装と、標準ライブラリを用いて構築する 2 つの方法でベンチマークを取得してみましょう。(なおベンチマークの結果はローカルの環境に依存します)</p><p>Suffix Array を構築する対象のデータは <a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_14_D" target="_blank" rel="noopener">Multiple String Matching</a> における <a href="https://judgedat.u-aizu.ac.jp/testcases/ALDS1_14_D/17/in" target="_blank" rel="noopener">05_maximum_00.in</a> のデータを用いました。100万文字あります。input データを読み込む時間はベンチマークからは除きます。</p><ul><li>ベンチマークテスト</li></ul><figure class="highlight go"><figcaption><span>suffixarray_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkLookupAll_my</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(<span class="string">"testdata/05_maximum_01.in.data"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">b.Fatalf(<span class="string">"read test data: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"></span><br><span class="line">New(<span class="keyword">string</span>(data))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkLookupAll_std</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(<span class="string">"testdata/05_maximum_01.in.data"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">b.Fatalf(<span class="string">"read test data: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"></span><br><span class="line">suffixarray.New(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ベンチマーク結果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -bench . -benchtime=1000000000x</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github.com/d-tsuji/go-sandbox</span><br><span class="line">BenchmarkLookupAll_my-8         1000000000               4.54 ns/op</span><br><span class="line">BenchmarkLookupAll_std-8        1000000000               0.0510 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/go-sandbox      9.362s</span><br></pre></td></tr></table></figure><p>ローカル環境でのベンチマークテストの結果によると、標準ライブラリは、私が実装した Manber と Myers のアルゴリズムに比べて、約 100 倍程度高速であることが分かります。</p><p>実は標準ライブラリの Suffix Array の構築アルゴリズムは SAIS<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> という Ge Nong、Sen Zhang、Wai Hong Chen によって提案された高速なアルゴリズムを用いています。SAIS の計算量は $O(n)$ です。さらにいくつかのチューニングを施しており、詳しくは <a href="https://golang.org/src/index/suffixarray/sais.go" target="_blank" rel="noopener">index/suffixarray/sais.go</a> のドキュメントを確認ください。</p><p>ベンチマークでは約 100 倍程度の処理時間の違いがありましたが、上記の Manber と Myers のアルゴリズムの計算量が $O(n (\log n)^2)$ で SAIS の計算量が $O(n)$ ですから、100 倍程度の差は自然です。SAIS を実装している Go の標準ライブラリが優秀であることが分かります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Go の標準ライブラリで私が面白いと思った <code>suffixarray</code> パッケージを紹介しました。<code>suffixarray</code> パッケージの構築アルゴリズムの計算量は $O(n)$ で非常に高速です。その他に Manber と Myers による計算量 $O(n (\log n)^2)$ の構築アルゴリズムを用いた Go による実装を紹介しました。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>岡野原大輔 (2012) 『高速文字列解析の世界』岩波書店</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">秋葉拓哉、岩田陽一、北川宜稔 (2012) 『プログラミングコンテストチャレンジブック [第2版]』 マイナビ出版</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">Two Efficient Algorithms for Linear Time Suffix Array Construction (https://ieeexplore.ieee.org/document/5582081)</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">文字 a と b を <code>strings.Compare(a, b)</code> で辞書順で比較したときに a &lt; b であれば -1、a = b であれば 0、a &gt; b であれば +1 で返り値として取得できます。返り値が 0 以上の index を探索しているため a ≧ b である最小の index が取得できます。</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200807/suffixarray.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;フューチ
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="データ構造" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>初めてのOSSコミュニティ活動〜ドキュメント翻訳やってみた。カンファレンススタッフもやってみた。〜</title>
    <link href="https://future-architect.github.io/articles/20200806/"/>
    <id>https://future-architect.github.io/articles/20200806/</id>
    <published>2020-08-05T15:00:00.000Z</published>
    <updated>2020-08-07T02:07:05.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>本記事は<a href="https://future-architect.github.io/articles/20200726/">フューチャー夏休みの自由研究連載</a>の4回目です。</p><p>2017年新卒入社の永井です。小売流通系のPJに所属しており、前回はVue.jsに関する記事を書きました。</p><ul><li>前回書いた記事<a href="https://future-architect.github.io/articles/20200428/">「Vue.jsのslotの機能を初心者にわかるように解説してみた」</a></li></ul><p>2020年はコロナ禍ということもあり、夏休みを取っても予定がないという人も多いのではないでしょうか。そんな時間があるときには、普段仕事や趣味でお世話になっているOSSやOSSコミュニティへの貢献をするといった過ごし方はいかがでしょうか。</p><p>でもいざGitHubを開いて、イシューを覗いてみると、どうも自分には出来なさそうな難しいものばかりに見えてなかなかハードル高いですよね。今回は「初めてのOSSコミュニティ活動」として、ハードルの低いOSS貢献を下記２つ紹介したいと思います。</p><ol><li>ドキュメント翻訳</li><li>カンファレンスのスタッフ</li></ol><h1 id="1-ドキュメントの翻訳"><a href="#1-ドキュメントの翻訳" class="headerlink" title="1. ドキュメントの翻訳"></a>1. ドキュメントの翻訳</h1><p>ドキュメントの翻訳は、<a href="https://www.transifex.com/" target="_blank" rel="noopener">transifex</a>というドキュメント翻訳プラットフォームを利用するのがハードルの低い方法です。このプラットフォームには多くのオープンソースが参加しており、自分の興味のあるものに参加することができます。下記の参考ページをもとに登録してみてください。</p><p>参考：transifexを翻訳に利用しているDjangoの翻訳プロジェクトの説明<br><a href="https://djangoproject.jp/howtojoin-transifex/" target="_blank" rel="noopener">https://djangoproject.jp/howtojoin-transifex/</a></p><h2 id="実際にやってみた"><a href="#実際にやってみた" class="headerlink" title="実際にやってみた"></a>実際にやってみた</h2><p>私は日本で生まれ育った日本語ネイティブで英語は中学1年生から学校で習ったという一般的な日本人ですので、英語から日本語への翻訳にチャレンジしてみます。（大学の第二外国語のドイツ語はさっぱり忘れました。）</p><p>transifexでは下記のように各英文ごとに対応する日本語を翻訳することになります。<br>（英単語帳のように対訳を当てていくようなイメージです。）</p><img src="/images/20200806/スクリーンショット 2020-08-05 20.48.15.png"><p>なので、無理のない範囲で少しずつ行うことができます。１文だけでもOKです。簡単ですね。</p><h1 id="2-カンファレンスのスタッフ活動"><a href="#2-カンファレンスのスタッフ活動" class="headerlink" title="2.カンファレンスのスタッフ活動"></a>2.カンファレンスのスタッフ活動</h1><p>昨年<a href="https://pycon.jp/2019/" target="_blank" rel="noopener">PyConJP2019</a>の当日スタッフとして活動しました。</p><ul><li>PyConJP2019に登壇された栗田さんの記事は<a href="https://future-architect.github.io/articles/20200422/">こちら</a><br>（余談に「他のフューチャーの社員も参加しており、最初の画像はスタッフをされていた方から頂戴しました」とありますが、「スタッフをされていた方」が私です。）</li></ul><h2 id="きっかけ"><a href="#きっかけ" class="headerlink" title="きっかけ"></a>きっかけ</h2><p>昨年PyConJP2019のコアスタッフをしていた友人に誘われて、当日スタッフとして活動しました。Pythonは独学で勉強したくらいだったのですが、「カンファレンスのスタッフって、なんだか楽しそうだなー」という気軽な気持ちで参加しました。</p><h2 id="当日スタッフの仕事内容"><a href="#当日スタッフの仕事内容" class="headerlink" title="当日スタッフの仕事内容"></a>当日スタッフの仕事内容</h2><h3 id="担当した仕事"><a href="#担当した仕事" class="headerlink" title="担当した仕事"></a>担当した仕事</h3><ul><li>前日設営</li><li>当日運営のサポート<ul><li>参加者の受付・ノベルティグッズやTシャツの配布</li><li>参加者をセッションの会場を誘導</li><li>道案内（セッションの会場やお手洗いなど）</li><li>セッションの中継機材の操作</li></ul></li><li>Partyへの参加（これはコアスタッフも含めて実費）</li><li>片付け</li></ul><h3 id="担当しなかった仕事"><a href="#担当しなかった仕事" class="headerlink" title="担当しなかった仕事"></a>担当しなかった仕事</h3><ul><li>セッションの司会</li><li>託児室の案内</li></ul><h2 id="得られたもの"><a href="#得られたもの" class="headerlink" title="得られたもの"></a>得られたもの</h2><p>スタッフの仕事や仕事の合間のコミュニケーションを通じてPythonを愛する多くの人と知り合うことが出来ました。それも国際カンファレンスなので、多様な顔ぶれ・・・！<br>特に<a href="https://www.amazon.co.jp/dp/4822292274" target="_blank" rel="noopener">『独学プログラマー』</a>の著者コーリー・アルゾフさん（KeyNote登壇者）とお話できたことは光栄でした。</p><p>翻訳者の清水川さんと一緒にサインもいただいちゃいました。<br><img src="/images/20200806/IMG_20200805_203949.jpg" alt=""></p><p>ちなみに自己紹介する際に、「Futureで働いています」というと、多くの方が「澁川さんの会社」って反応されていたのが印象的でした。</p><p>*ほんのたまに「tsukammoさんの会社」と反応する競プロerもいました。</p><h2 id="当日スタッフやりましょう！・・・と言いたいところですが"><a href="#当日スタッフやりましょう！・・・と言いたいところですが" class="headerlink" title="当日スタッフやりましょう！・・・と言いたいところですが"></a>当日スタッフやりましょう！・・・と言いたいところですが</h2><p>今年はコロナ禍でオンライン開催となるため、PyConJP2020では当日スタッフは募集してなさそうです。<br>来年以降当日スタッフ、もしくはコアスタッフにチャレンジしてみてはいかがでしょうか。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回OSSへの貢献、コミュニティ活動なんて私には無理なんじゃないかと思っている人にもハードル低めな２つを紹介しました。是非皆さんも取り組んでみてください。</p><h1 id="余談：もっとハードルの低いものはないの？"><a href="#余談：もっとハードルの低いものはないの？" class="headerlink" title="余談：もっとハードルの低いものはないの？"></a>余談：もっとハードルの低いものはないの？</h1><p><a href="https://jp.vuejs.org/support-vuejs/" target="_blank" rel="noopener">Vue.js公式の支援のページ</a>には以下のような記載があります。</p><blockquote><p>もしあなたが個人の開発者で、Vue を使って生産性を楽しんでいるのなら、寄付をご検討ください。例えば、時々私にコーヒーをおごる、とか。:)</p></blockquote><p>というわけで、お近くのOSS開発者・貢献者・コミッターにコーヒーを奢ってみてはいかがでしょうか。ちなみにFutureにはVulsの発明者やVue.jsのコアメンバー他、OSSの貢献者がたくさん所属しています。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;本記事は&lt;a href=&quot;https://future-architect.github.io/articles/20200
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
  </entry>
  
  <entry>
    <title>Terraformで楽をしたい</title>
    <link href="https://future-architect.github.io/articles/20200805/"/>
    <id>https://future-architect.github.io/articles/20200805/</id>
    <published>2020-08-04T15:00:00.000Z</published>
    <updated>2020-08-05T14:17:55.873Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200805/%E3%81%B2%E3%81%BE%E3%82%8F%E3%82%8A.jpg" alt=""></p><p>本記事は<a href="/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/">夏休み自由研究記事</a>の第3弾です。</p><p>こんにちは。TIG/DX所属のインフラエンジニア兼カメラマンの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。今回のアイキャッチは私が昨年撮ったひまわり畑にしました。</p><h2 id="ツールをまとめたい"><a href="#ツールをまとめたい" class="headerlink" title="ツールをまとめたい"></a>ツールをまとめたい</h2><p>Infrastructure as Code(IaC)という考え方に属するツールはたくさんあります。例えばサーバーのミドルウェアを設定するためにAnsible、インスタンスのゴールデンイメージを作っておくならPacker、コンテナオーケストレーションならKubernetesと言った感じで、どんどん追えないくらいに増えています。我々エンジニアとしては、新しいツールを使うことが楽しくてしょうがない人も多いかと思います。かくいう私もその一人です。しかし、新しくインフラを始める人にとってもツールの多い時代ですし、少ない学習コスト(人によっては負担)でキャッチアップやインフラのリリースができることに越したことはありません。</p><p>この記事では、Terraformの数多くの機能を使って他のIaCツールと可能な限り代用したり、Terraformの世界でリソース作成を完結させるために使い方を改めて突き詰めた内容になります。私の記事なので、使うクラウドは例にもれずGCPを利用します。</p><h2 id="PackerじゃなくてTerraform"><a href="#PackerじゃなくてTerraform" class="headerlink" title="PackerじゃなくてTerraform"></a>PackerじゃなくてTerraform</h2><p>Packerは、Linuxなど各種OSなどに必要なパッケージをインストールしたあと、インスタンス自体は削除され、ゴールデンイメージを残します。このイメージをベースとして、設定済みのインスタンスを展開することができます。ミドルウェアの設定という意味ではAnsibleと似ていますが、Ansibleは設定したインスタンスはそのまま生きています。</p><h3 id="remote-execを利用する"><a href="#remote-execを利用する" class="headerlink" title="remote-execを利用する"></a><code>remote-exec</code>を利用する</h3><p>TerraformにはProvisionerというものがありますが、<code>remote-exec</code>はそのうちの一つです。<code>remote</code>なので、実行場所は構築しているインスタンスになります。ディレクトリ構成は以下を考えます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hoge-project</span><br><span class="line"> |- compute_instance.tf</span><br><span class="line"> |- sshkey</span><br><span class="line">     |- id_rsa</span><br><span class="line">     |- id_rsa.pub</span><br></pre></td></tr></table></figure><p>インスタンスをコードしている<code>compute_instance.tf</code>、あとは埋める鍵を置いています。<code>compute_instance.tf</code>の中身は以下になります。</p><figure class="highlight sh"><figcaption><span>compute_instance.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"instance"</span> &#123;</span><br><span class="line">  name         = <span class="string">"sample-instance"</span></span><br><span class="line">  machine_type = <span class="string">"n1-standard-1"</span></span><br><span class="line">  zone         = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  tags         = []</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    initialize_params &#123;</span><br><span class="line">      image = <span class="string">"debian-cloud/debian-9"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    network = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">"remote-exec"</span> &#123;</span><br><span class="line">    connection = &#123;</span><br><span class="line">      <span class="built_in">type</span>        = <span class="string">"ssh"</span></span><br><span class="line">      user        = <span class="string">"provisoner"</span></span><br><span class="line">      private_key = file(<span class="string">"./sshkey/id_rsa.pub"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inline = [</span><br><span class="line">      <span class="string">"sudo apt-get install nginx"</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここではインスタンスを立てて、nginxを入れるところまでをゴールとするコードにしました。通常であれば、Terraformでインスタンスを立てて、その後、gcloudコマンドなりで作成したインスタンスにsshしてミドルウェアをインストールするはずですが、それを<code>remote-exec</code>で置き換えています。</p><h3 id="メリット・デメリット"><a href="#メリット・デメリット" class="headerlink" title="メリット・デメリット"></a>メリット・デメリット</h3><ul><li>メリット<ul><li>PackerでbuildしてからイメージをTerraformで再度指定しなくても良い</li><li>Terraformのコマンド、世界で完結する</li></ul></li><li>デメリット<ul><li>ゴールデンイメージを利用するインスタンスが多い場合はコードが汚くなる</li></ul></li></ul><p>Packerを代用しようとする場合は、踏み台や、特定のサーバー種に向けてであれば効果的かと思いますが、利用するインスタンスが多くなった場合にはわずかながらコードが読みにくくなる可能性もあるので、そのときはPackerの導入を考えないといけないのかもしれません。</p><h2 id="Ansibleコマンドを実行したくない"><a href="#Ansibleコマンドを実行したくない" class="headerlink" title="Ansibleコマンドを実行したくない"></a>Ansibleコマンドを実行したくない</h2><p>インフラの管理方法として、Terraform + Ansibleは王道すぎるくらい王道なやり方だと思っていますし、コード管理している方はだいたいその2つをメインとして利用しているのではないでしょうか？なので、手順としては</p><ul><li>Terraformでリソースを作成</li><li>Ansibleでミドルウェアの設定を行う</li></ul><p>で行うと思います。なので、各々コマンドを実行しますが、個人的には2回コマンドを実行したくない、できれば1発で出来上がって欲しいという気持ちがずっとありました。その気持ち、ここで昇華させます。</p><h3 id="local-execを利用する"><a href="#local-execを利用する" class="headerlink" title="local-execを利用する"></a><code>local-exec</code>を利用する</h3><p>先ほどはProvisionerで<code>remote-exec</code>を利用しましたが、今回は<code>local-exec</code>を使います。実行場所が<code>local</code>、つまりTerraformの実行端末上で行うコマンドです。Ansibleは実行するときは各インスタンス上ではなく、ローカルや踏み台サーバーから実行するかと思いますので、<code>local-exec</code>を今回は使います。（構築したサーバー上でlocalhostでAnsibleは実行できますがお掃除も大変ですね…。）<br>今回はケースとして、以下をディレクトリ構成で考えます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hoge-project</span><br><span class="line"> |- compute_instance.tf</span><br><span class="line"> |- ansible</span><br><span class="line">     |- ansible.cfg</span><br><span class="line">     |- inventory</span><br><span class="line">     |- nginx.yaml</span><br><span class="line">     |- sshkey</span><br><span class="line">         |- id_rsa</span><br><span class="line">         |- id_rsa.pub</span><br><span class="line">     |- roles</span><br><span class="line">         |- nginx</span><br><span class="line">             |- tasks</span><br><span class="line">                 |- main.yaml</span><br></pre></td></tr></table></figure><p>このディレクトリ構成もおそらくTerraform + Ansibleの組み合わせの時にはオーソドックスではないでしょうか？ここで、<code>compute_instance.tf</code>は</p><figure class="highlight sh"><figcaption><span>compute_instance.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"instance"</span> &#123;</span><br><span class="line">  name         = <span class="string">"sample-instance"</span></span><br><span class="line">  machine_type = <span class="string">"n1-standard-1"</span></span><br><span class="line">  zone         = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  tags         = []</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    initialize_params &#123;</span><br><span class="line">      image = <span class="string">"debian-cloud/debian-9"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    network = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  metadata = &#123;</span><br><span class="line">    ssh-keys = <span class="string">"ansible:<span class="variable">$&#123;file("./ansible/sshkey/id_rsa.pub")&#125;</span>"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  service_account &#123;</span><br><span class="line">    scopes = [<span class="string">"cloud-platform"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  provisioner <span class="string">"local-exec"</span> &#123;</span><br><span class="line">    working_dir = <span class="string">"./ansible/"</span></span><br><span class="line">    <span class="built_in">command</span>     = <span class="string">"ansible-playbook -i inventory nginx.yaml"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>と書きました。<code>metadata</code>でインスタンスに埋め込む公開鍵を設定しています。そして最終段にある</p><figure class="highlight sh"><figcaption><span>tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">provisioner <span class="string">"local-exec"</span> &#123;</span><br><span class="line">  working_dir = <span class="string">"./ansible/"</span></span><br><span class="line">  <span class="built_in">command</span>     = <span class="string">"ansible-playbook -i inventory nginx.yaml"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>が今回のミソの部分です。ローカルで動かすディレクトリの指定と、そのディレクトリで実行するコマンドを書いています。コマンド自体は人が実行するものと基本的に同じにすればあとはAnsibleの世界なので、taskが終わるのを待ちましょう。</p><h3 id="メリット・デメリット-1"><a href="#メリット・デメリット-1" class="headerlink" title="メリット・デメリット"></a>メリット・デメリット</h3><p>今回、Ansibleの実行をTerraformにもたせましたが、こちらもメリット、デメリットどちらもあるかと思います。</p><ul><li>メリット<ul><li>コマンド実行回数が減る（手順が減る）</li><li>Ansibleが異常終了した場合は<code>taint</code>フラグが付くので、コードに書かれていることはしっかり実行される</li></ul></li><li>デメリット<ul><li>Ansibleの世界とTerraformの世界の境界がなくなるのでそれぞれの責任を分けにくくなる</li></ul></li></ul><p>メリットは実行回数が減ることはもちろんですが、<code>taint</code>フラグをつけてくれることが嬉しいところではないでしょうか？<code>taint</code>フラグは、「Terraformのリソースとしては作成が済んでいるが、リソースが指定通りにできなかった」時につくので、Ansibleの世界で失敗してもTerraformの失敗になります。<br>一方デメリット自体は、私自身は大きくないと思いますが、それぞれにもたせる役割、責任をはっきり分けておきたい場合にはデメリットかなと思います（見た目の問題ではありますが）。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では出来るだけTerraformでまかなってみましたが、とはいえ私自身AnsibleやPackerなどももちろん使います。また、使い方もチームそれぞれなのでこのやり方が100%フィットするとことはないと思っています。ただ、Terraformの世界を広げることで、管理コストや実装コストが下がることがわかりました。IaCの背景は手順書を極力減らしたり、インフラにもCI/CDを取り入れる余地をもたせることだと思うので、こういった取り組みは必要かなと思います。ここでいう、「楽をしたい」はどちらかというと人為的なミスを減らす、というところに落ち着きます。</p><p>これからさらに夏休み記事は出てきますので、今後の記事もぜひ読んでください！</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/">夏休み連載</a></li><li><a href="/tags/Terraform/">Terraform</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200805/%E3%81%B2%E3%81%BE%E3%82%8F%E3%82%8A.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本記事は&lt;a href=&quot;/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>GoPlus自由研究</title>
    <link href="https://future-architect.github.io/articles/20200804/"/>
    <id>https://future-architect.github.io/articles/20200804/</id>
    <published>2020-08-03T15:00:00.000Z</published>
    <updated>2020-08-05T04:14:16.606Z</updated>
    
    <content type="html"><![CDATA[<p>フューチャー<a href="https://future-architect.github.io/articles/20200726/">夏休みの自由研究</a>連載の2回目です。</p><p>TIG DXユニットの伊藤真彦です。</p><p>夏休みの自由研究として、GoPlusの調査を行いました。</p><p>この記事ではGoPlusの紹介、および簡単な内部構造の調査を行います。</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>はじめに</li><li>GoPlusとは</li><li>GoPlusの記述例</li><li>GoPlusのインストール</li><li>GoPlusをGoにインポート</li><li>GoPlusのハックを研究</li><li>GoPlusのこれから</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>私は現在Goを書いていますが、前職ではRubyでのWeb開発がメインでした。</p><p>Rubyは型定義を書く必要がありません、端的に言うと書きやすさに重きを置いています。</p><p><a href="https://ja.wikipedia.org/wiki/Ruby#%E8%A8%AD%E8%A8%88%E6%80%9D%E6%83%B3" target="_blank" rel="noopener">Wikipedia</a>にも</p><blockquote><p>開発者のまつもとゆきひろは、「Rubyの言語仕様策定において最も重視しているのはストレスなくプログラミングを楽しむことである (enjoy programming)」と述べている。</p></blockquote><p>と書いてあることからも、その設計思想が伺えます。</p><p>一方Goはコンパイル言語としての高速実行と書きやすさの絶妙なバランスを攻めている印象です。</p><p>C#を書いた経験もあるので、型があるのが自然という感覚も理解できますが、Rubyに慣れ親しんだ身からすると型定義や配列の取り扱いが少々面倒に感じます。<br>そもそも大抵の言語はRubyよりお堅いのではないでしょうか。<br>(どちらの言語が優れている、という主張は勿論ありません。)</p><p>そんなRuby愛を引きずっている私にとって衝撃的なニュースがありました。<br><a href="https://github.com/qiniu/goplus" target="_blank" rel="noopener">GoPlus</a>の存在です。</p><h1 id="GoPlusとは"><a href="#GoPlusとは" class="headerlink" title="GoPlusとは"></a>GoPlusとは</h1><p>Goのスーパーセットにあたるライブラリです。</p><blockquote><ul><li>静的型付言語である</li></ul></blockquote><ul><li>Goと完全な互換性を持ってる</li><li>スクリプト言語のようなスタイルで、データサイエンスにおいてGoより高い可読性を実現している</li></ul><p>と、<a href="https://github.com/qiniu/goplus/blob/master/README.md" target="_blank" rel="noopener">README</a>に書いてあります。<br>Cに対するC++のようなノリで命名されているようですね。</p><h1 id="GoPlusの記述例"><a href="#GoPlusの記述例" class="headerlink" title="GoPlusの記述例"></a>GoPlusの記述例</h1><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><figure class="highlight go"><figcaption><span>hello.gop</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println</span>(<span class="string">"Hello, world!"</span>)</span><br></pre></td></tr></table></figure><p>拡張子は<code>.gop</code>です。<br>この1行だけで動きます、つまりpackageの定義やmain関数の記述が不要です。<br>素晴らしいですね。</p><h3 id="配列、マップの取り扱い"><a href="#配列、マップの取り扱い" class="headerlink" title="配列、マップの取り扱い"></a>配列、マップの取り扱い</h3><figure class="highlight go"><figcaption><span>maplit.gop</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l := [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">m := &#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">println</span>(l)</span><br><span class="line"><span class="built_in">println</span>(m)</span><br><span class="line"></span><br><span class="line"># [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]、<span class="keyword">map</span>[a:<span class="number">1</span> b:<span class="number">2</span>]が出力される</span><br></pre></td></tr></table></figure><p>特にスライス(可変長の配列型)の宣言の感じがRuby時代を思い出します。<br>同じことをGoでやると、このような感じでしょうか</p><figure class="highlight go"><figcaption><span>maplit.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  l := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">  m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>&#125;</span><br><span class="line">  fmt.Println(l)</span><br><span class="line">  fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>余談ですが、サンプルコードの<code>println</code>関数も<code>GoPlus</code>で新たに定義されています。<br>本家GoのPrint系の関数より柔軟で、型を意識せずに使えるように拡張されています。</p><p>他にも多倍長整数型・多倍長浮動小数点数型のサポート、配列操作の拡張、エラーハンドリングの簡易的な記法の実装など便利な機能が多数用意されています。</p><h1 id="GoPlusのインストール"><a href="#GoPlusのインストール" class="headerlink" title="GoPlusのインストール"></a>GoPlusのインストール</h1><p>GoPlusを実際に使用する方法を紹介します。<br><code>go get</code>コマンドで<code>GOPATH</code>配下にライブラリをインポートします</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/qiniu/goplus</span><br><span class="line">go get github.com/qiniu/goplus@v0.6.50 #バージョン指定する場合</span><br></pre></td></tr></table></figure><p><code>GOPATH</code>配下に<code>goplus</code>ディレクトリが生成されるので移動します。<br><code>go install</code>コマンドでパッケージをインストールします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/qiniu/goplus</span><br><span class="line">go install -v ./...</span><br></pre></td></tr></table></figure><img src="/images/20200804/gop.jpg" class="img-middle-size"><p>インストールすると<code>gop</code>コマンドが利用できるようになります。<br>※執筆時点ではα版であるため、代わりに4種類のコマンドがインストールされます。</p><blockquote><ul><li>qrun: Similar to gop run</li><li>qfmt: Similar to gop fmt</li><li>qexp: Similar to gop export</li><li>qgo: Similar to gop go</li></ul></blockquote><p>試しに<code>qrun</code>コマンドを使用します。<br><code>qrun</code>は<code>gop run</code>、つまりGoの<code>go run</code>に相当するファイル実行コマンドです。<br>拡張子が<code>gop</code>のファイルを実行できます。<br>実際に<code>println(&quot;Hello, world!&quot;)</code>1行だけが書かれたファイルを実行できました。</p><img src="/images/20200804/run.jpg" class="img-middle-size"><h1 id="GoPlusをGoにインポート"><a href="#GoPlusをGoにインポート" class="headerlink" title="GoPlusをGoにインポート"></a>GoPlusをGoにインポート</h1><p>GoPlusの拡張機能をGoのライブラリとしてインポートするような使い方も可能です。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/qiniu/goplus/tutorial/14-Using-goplus-in-Go/foo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rmap := foo.ReverseMap(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"Hi"</span>: <span class="number">1</span>, <span class="string">"Hello"</span>: <span class="number">2</span>&#125;)</span><br><span class="line">fmt.Println(rmap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GoPlusのハックを研究"><a href="#GoPlusのハックを研究" class="headerlink" title="GoPlusのハックを研究"></a>GoPlusのハックを研究</h1><p>仕事で使うかはともかくGoPlusは面白いライブラリだと感じました。<br>今回はGoPlusがどのような手法でGoを柔軟な言語に拡張しているのか調査します。<br>ようやく自由研究の始まりです。</p><h3 id="qrunコマンドでファイルが実行できる仕組み"><a href="#qrunコマンドでファイルが実行できる仕組み" class="headerlink" title="qrunコマンドでファイルが実行できる仕組み"></a>qrunコマンドでファイルが実行できる仕組み</h3><p><code>go run</code>に相当する<code>qrun</code>コマンドを見てみましょう。<br>コマンドの実装は<a href="https://github.com/qiniu/goplus/blob/master/cmd/qrun/qrun.go" target="_blank" rel="noopener">こちら</a>です。</p><p>いたって普通のGoのスクリプトです。<br>つまり、<code>go install</code>コマンドでインストールしたGoの実装が各種コマンドの正体です。</p><p><code>qrun</code>のmain関数内部で、拡張子<code>gop</code>のファイルを解析、実行することで、<code>gop</code>ファイル本体にはmain関数や諸々のおまじないが不要になっていたんですね。</p><p>GoPlusは既に5年に渡り開発が行われています(initial commitが2015年でした)。<br>そのため複雑な実装が組みあがっていますが、頑張って要点だけでも解析してみます。</p><figure class="highlight go"><figcaption><span>qrun.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> flag.NArg() &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">"Usage: qrun [-asm -quiet -debug -prof] &lt;gopSrcDir|gopSrcFile&gt;\n"</span>)</span><br><span class="line">flag.PrintDefaults()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>まずは標準ライブラリの<code>flag</code>を用いて、コマンドライン引数を格納しています。<br>つまり<code>flag.Arg(0)</code>で引数で渡した<code>ファイル名.gop</code>が取得できます。<br>試しに何もファイル名を指定せず<code>qrun</code>コマンドのみを実行すると<code>flag.NArg() &lt; 1</code>が<code>true</code>になり、実装の通りのエラーメッセージが出力されます。</p><img src="/images/20200804/qrun.jpg" class="img-middle-size"><figure class="highlight go"><figcaption><span>qrun.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">target, _ := filepath.Abs(flag.Arg(<span class="number">0</span>))</span><br><span class="line">isDir, err := IsDir(target)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">"input arg check failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">pkgs, err := parser.ParseGopFiles(fset, target, isDir, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">"ParseGopFiles failed:"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ファイル名にパスを組み合わせた<code>target</code>が<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/parser/parse.go#L67" target="_blank" rel="noopener">parser.ParseGopFiles()</a>に渡されます。<br>ここで<code>gopファイル</code>としての解析が始まるようです。</p><figure class="highlight go"><figcaption><span>qrun.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cl.CallBuiltinOp = exec.CallBuiltinOp</span><br><span class="line"></span><br><span class="line">b := exec.NewBuilder(<span class="literal">nil</span>)</span><br><span class="line">_, err = cl.NewPackage(b.Interface(), pkgs[<span class="string">"main"</span>], fset, cl.PkgActClMain)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">"cl.NewPackage failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">code := b.Resolve()</span><br><span class="line"><span class="keyword">if</span> *flagAsm &#123;</span><br><span class="line">code.Dump(os.Stdout)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx := exec.NewContext(code)</span><br><span class="line">ctx.Exec(<span class="number">0</span>, code.Len())</span><br><span class="line"><span class="keyword">if</span> *flagProf &#123;</span><br><span class="line">exec.ProfileReport()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析した結果の実行は<code>NewBuilder</code>、<code>NewPackage</code>などの関数内部で行われています。<br>全てを解析しようとすると終わりが見えません、5年分の重みを感じます。</p><h3 id="構文解析の仕組み"><a href="#構文解析の仕組み" class="headerlink" title="構文解析の仕組み"></a>構文解析の仕組み</h3><p>GoPlusスクリプトの構文解析は<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/compile.go#L474" target="_blank" rel="noopener">cl.NewPackage()</a>で行われるようです。</p><figure class="highlight go"><figcaption><span>compile.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPackage</span><span class="params">(out exec.Builder, pkg *ast.Package, fset *token.FileSet, act PkgAct)</span> <span class="params">(p *Package, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> pkg == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrNotFound</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> CallBuiltinOp == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(<span class="string">"NewPackage failed: variable CallBuiltinOp is uninitialized"</span>)</span><br><span class="line">&#125;</span><br><span class="line">p = &amp;Package&#123;&#125;</span><br><span class="line">ctxPkg := newPkgCtx(out, pkg, fset)</span><br><span class="line">ctx := newGblBlockCtx(ctxPkg)</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> pkg.Files &#123;</span><br><span class="line">loadFile(ctx, f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> act &#123;</span><br><span class="line"><span class="keyword">case</span> PkgActClAll:</span><br><span class="line"><span class="keyword">for</span> _, sym := <span class="keyword">range</span> ctx.syms &#123;</span><br><span class="line"><span class="keyword">if</span> f, ok := sym.(*funcDecl); ok &amp;&amp; f.fi != <span class="literal">nil</span> &#123;</span><br><span class="line">ctxPkg.use(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pkg.Name != <span class="string">"main"</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> PkgActClMain:</span><br><span class="line"><span class="keyword">if</span> pkg.Name != <span class="string">"main"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrNotAMainPackage</span><br><span class="line">&#125;</span><br><span class="line">entry, err := ctx.findFunc(<span class="string">"main"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == ErrNotFound &#123;</span><br><span class="line">err = ErrMainFuncNotFound</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> entry.ctx.noExecCtx &#123;</span><br><span class="line">ctx.file = entry.ctx.file</span><br><span class="line">compileBlockStmtWithout(ctx, entry.body)</span><br><span class="line">ctx.checkLabels()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">out.CallFunc(entry.Get(), <span class="number">0</span>)</span><br><span class="line">ctxPkg.use(entry)</span><br><span class="line">&#125;</span><br><span class="line">out.Return(<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">ctxPkg.resolveFuncs()</span><br><span class="line">p.syms = ctx.syms</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように複雑な分岐を経由しますが、各経路での前処理を終えたら<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/stmt.go#L47" target="_blank" rel="noopener">compileStmt()</a>で実際に構文解析が行われます。<br>その先頭の<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/stmt.go#L378" target="_blank" rel="noopener">compileExprStmt()</a>内部の<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/expr.go#L54" target="_blank" rel="noopener">compileExpr()</a>までトークンを解析して送り込みます。</p><figure class="highlight go"><figcaption><span>expr.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compileExpr</span><span class="params">(ctx *blockCtx, expr ast.Expr)</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> v := expr.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *ast.Ident:</span><br><span class="line"><span class="keyword">return</span> compileIdent(ctx, v.Name)</span><br><span class="line"><span class="keyword">case</span> *ast.BasicLit:</span><br><span class="line"><span class="keyword">return</span> compileBasicLit(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.CallExpr:</span><br><span class="line"><span class="keyword">return</span> compileCallExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.BinaryExpr:</span><br><span class="line"><span class="keyword">return</span> compileBinaryExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.UnaryExpr:</span><br><span class="line"><span class="keyword">return</span> compileUnaryExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.SelectorExpr:</span><br><span class="line"><span class="keyword">return</span> compileSelectorExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.ErrWrapExpr:</span><br><span class="line"><span class="keyword">return</span> compileErrWrapExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.IndexExpr:</span><br><span class="line"><span class="keyword">return</span> compileIndexExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.SliceExpr:</span><br><span class="line"><span class="keyword">return</span> compileSliceExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.CompositeLit:</span><br><span class="line"><span class="keyword">return</span> compileCompositeLit(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.SliceLit:</span><br><span class="line"><span class="keyword">return</span> compileSliceLit(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.FuncLit:</span><br><span class="line"><span class="keyword">return</span> compileFuncLit(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.ParenExpr:</span><br><span class="line"><span class="keyword">return</span> compileExpr(ctx, v.X)</span><br><span class="line"><span class="keyword">case</span> *ast.ListComprehensionExpr:</span><br><span class="line"><span class="keyword">return</span> compileListComprehensionExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.MapComprehensionExpr:</span><br><span class="line"><span class="keyword">return</span> compileMapComprehensionExpr(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.ArrayType:</span><br><span class="line"><span class="keyword">return</span> compileArrayType(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.Ellipsis:</span><br><span class="line"><span class="keyword">return</span> compileEllipsis(ctx, v)</span><br><span class="line"><span class="keyword">case</span> *ast.KeyValueExpr:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"compileExpr: ast.KeyValueExpr unexpected"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">log.Panicln(<span class="string">"compileExpr failed: unknown -"</span>, reflect.TypeOf(v))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらのswitch文まで辿り着いたら、解析結果に応じたコンパイルが走ります。<br>興味があればqrunから構文解析までの処理の流れを詳しく探索してみてください、私はそろそろ限界です。</p><p>試しに解析結果が<code>*ast.SliceExpr</code>だった場合の動き、<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/expr.go#L729" target="_blank" rel="noopener">compileSliceExpr()</a>を見てみます。</p><figure class="highlight go"><figcaption><span>expr.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compileSliceExpr</span><span class="params">(ctx *blockCtx, v *ast.SliceExpr)</span> <span class="title">func</span><span class="params">()</span></span> &#123; <span class="comment">// x[i:j:k]</span></span><br><span class="line"><span class="keyword">var</span> kind reflect.Kind</span><br><span class="line">exprX := compileExpr(ctx, v.X)</span><br><span class="line">x := ctx.infer.Get(<span class="number">-1</span>)</span><br><span class="line">typ := x.(iValue).Type()</span><br><span class="line"><span class="keyword">if</span> kind = typ.Kind(); kind == reflect.Ptr &#123;</span><br><span class="line">typ = typ.Elem()</span><br><span class="line"><span class="keyword">if</span> kind = typ.Kind(); kind != reflect.Array &#123;</span><br><span class="line">logPanic(ctx, v, <span class="string">`cannot slice a (type *%v)`</span>, typ)</span><br><span class="line">&#125;</span><br><span class="line">typ = reflect.SliceOf(typ.Elem())</span><br><span class="line">ctx.infer.Ret(<span class="number">1</span>, &amp;goValue&#123;typ&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">exprX()</span><br><span class="line">i, j, k := exec.SliceDefaultIndex, exec.SliceDefaultIndex, exec.SliceDefaultIndex</span><br><span class="line"><span class="keyword">if</span> v.Low != <span class="literal">nil</span> &#123;</span><br><span class="line">i = compileIdx(ctx, v.Low, exec.SliceConstIndexLast, kind)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> v.High != <span class="literal">nil</span> &#123;</span><br><span class="line">j = compileIdx(ctx, v.High, exec.SliceConstIndexLast, kind)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> v.Max != <span class="literal">nil</span> &#123;</span><br><span class="line">k = compileIdx(ctx, v.Max, exec.SliceConstIndexLast, kind)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> v.Slice3 &#123;</span><br><span class="line">ctx.out.Slice3(i, j, k)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ctx.out.Slice(i, j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>独自の実装が山盛りですね…再帰的に<a href="https://github.com/qiniu/goplus/blob/18dda13248daa0846f7eebc28a5b7268903f9c41/cl/expr.go#L54" target="_blank" rel="noopener">compileExpr()</a>が呼び出されるところも迷宮ポイントを高めています。<br>キリがないので今回はこの辺りで調査を終了したいと思います。</p><h1 id="GoPlusのこれから"><a href="#GoPlusのこれから" class="headerlink" title="GoPlusのこれから"></a>GoPlusのこれから</h1><p>GoPlusは執筆時点では月間90件に近いプルリクエストがマージされ、絶賛開発中の状態です。<br><img src="/images/20200804/project.png" alt=""><br>α版を乗り越え<code>gop</code>コマンドが動き出す日は来るのか、乞うご期待です。</p><h1 id="追記"><a href="#追記" class="headerlink" title="追記"></a>追記</h1><p>記事の公開前日に確認したところ、バージョン0.7.1よりgopコマンドが採用されていました！<br>おめでとうGoPlus。<br><img src="/images/20200804/gop.png" alt=""></p><p>私は偉いので記事公開の1か月前に概ね書き終わっていたのですが、その間にもGoPlusは大きく進化していました。<br>追記執筆時点での最新の実装(v0.7.4)ではREPL(対話型インタプリタ)の実行機能が追加されたようです。</p><p><img src="/images/20200804/repl.png" alt=""></p><p>さらには<a href="https://github.com/goplus/vscode-goplus" target="_blank" rel="noopener">vscode用プラグイン</a>の開発もスタートしました。<br><img src="/images/20200804/vscode.png" alt=""></p><p>今後の成長がますます楽しみになりました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;フューチャー&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;夏休みの自由研究&lt;/a&gt;連載の2回目です。&lt;/p&gt;
&lt;p&gt;TIG DXユニットの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;夏休みの自由研究として、
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>産業用機器向けフィールドネットワークModbusで温湿度センシング</title>
    <link href="https://future-architect.github.io/articles/20200803/"/>
    <id>https://future-architect.github.io/articles/20200803/</id>
    <published>2020-08-02T15:00:00.000Z</published>
    <updated>2020-08-11T01:50:03.215Z</updated>
    
    <content type="html"><![CDATA[<p>フューチャー<a href="https://future-architect.github.io/articles/20200726/">夏休みの自由研究</a>連載の1回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。三菱系のPLCと通信する<a href="http://fa-dic.mitsubishielectric.co.jp/faq/show/15797?category_id=865" target="_blank" rel="noopener">MCプロトコル</a>はちょっと飛び道具的な<a href="https://speakerdeck.com/laqiiz/go-plc" target="_blank" rel="noopener">持ちネタ</a>の1つですが、同様にメジャーな規格であるModbusについて自由研究という名の調査をしました。</p><p>工場、倉庫、プラントなどのIoT化を行うと、Web周りに無い技術も触れて楽しいなって最近思ってます。</p><h1 id="Modbusとは"><a href="#Modbusとは" class="headerlink" title="Modbusとは"></a>Modbusとは</h1><blockquote><p>ModbusはModicon社が1979年、同社のプログラマブルロジックコントローラ (PLC) 向けに策定したシリアル通信プロトコルである。産業界におけるデ・ファクト標準の通信プロトコルとなり、現在では産業用電子機器を接続する最も一般的手段となっている。<br><a href="https://ja.wikipedia.org/wiki/Modbus" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/Modbus</a> - WikipediaのModbusページ</p></blockquote><p>Wikipediaの説明が分かりやすいので引用しました。</p><p>書いてあるようにModbus（モドバス）とは通信プロトコルです。由来はModicon社から来ているのでしょう。通信プロトコルとあるように、WebでいうHTTPのようなものです。サーバ・クライアントモデルで、Modbusでセンサーモジュールにリクエストを投げると、温度・湿度がレスポンスで取得できるようなものです（後述します）。</p><p><a href="https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%96%E3%83%AB%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9" target="_blank" rel="noopener">PLC</a>というのは工場の生産設備で用いる機器のことです。製造現場のFA（ファクトリーオートメーション）に使われる<a href="https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E5%88%B6%E5%BE%A1" target="_blank" rel="noopener">シーケンス制御</a>を行う装置です。</p><p>シリアル接続はWeb系のエンジニアには馴染みが薄い気がします。簡単に言う１本だけの通信線を使い、1/0の電圧レベルを連続的(=シリアル)に変化させて、意味のあるデータを送信/受信する通信方式です。USBとか、自作PCをする人にとってはシリアルATAが有名でしょうか。工場系の人にとっては、RS-232CとかRS485が有名な気がします。</p><h1 id="Modbusの使い所"><a href="#Modbusの使い所" class="headerlink" title="Modbusの使い所"></a>Modbusの使い所</h1><p>利用用途がPLC接続だけだとすると「オレには関係無いな」ってなりそうですが、Modbusはもう少し広く利用されています。掲題の温湿度センサーや、カメラモジュール、産業用ロボットの制御などでも利用されています。</p><p>いやいや、今どきはラズベリーパイなどのシングルボードで完結させることが増えているよってIoT界隈のエンジニアに言われそうですが、倉庫や工場などで導入すると、高い可用性が求められる（5年10年は故障しないとか）ため、こういった産業用の機器の選定を行うこともあると思います。そうすると必然、Modbusのような通信規格を抑える必要がでてきます。ラズパイにセンサーモジュール接続で完結できるならそっちが良いと僕もそう思います。</p><p>MCプロトコルの違いですが、MCプロトコルも<a href="https://www.cc-link.org/ja/cclink/slmp/index.html" target="_blank" rel="noopener">SLMP (Seamless Message Protocol)</a>という形で標準化されているのですが、Modbusはそれより古くからあり、仕様もシンプルなため、センサーやカメラやロボットなどのセンサー・アクチュエータにも搭載されていることが一つの差かなと思います。</p><p>（最近だとOPC-UAですかね。まだ私は触ったことがないです。個人ユースで1万円以下で手に入るOPC-UA機器がありましたらどなたか教えて下さい）</p><h1 id="Modbusプロトコル"><a href="#Modbusプロトコル" class="headerlink" title="Modbusプロトコル"></a>Modbusプロトコル</h1><p>Modbusはサーバ・クライアントモデルです。</p><p>そのためクライアント側がセンサー値の取得やアクチュエータの操作を行います。クライアントが処理の管理役なため、クライアント側をModbusのマスター、サーバ側をModbusのスレーブとも呼びます。Modbusの親玉に複数の子機をぶら下げて一連の制御をするイメージがよく出てくる気がします。この記事ではマスターをマネージャ、スレーブをワーカと呼び替えて記載します。</p><img src="/images/20200803/modbus-worker-manager.png" class="img-middle-size"><p>Modbusには大きく分けて3つの通信方式があります。先ほどシリアル接続のプロトコルだよって言いましたが、TCP/IP対応しているバージョンもあります。</p><ol><li><strong>Modbus RTU</strong>: シリアル接続で、バイナリ表現</li><li><strong>Modbus ASCII</strong>: シリアル接続で、ASCIIフォーマット。RTUに比べてデータサイズが増えるが、人間に読みやすい</li><li><strong>Modbus/TCP</strong>: TCP/IPを用いる</li></ol><p>状況次第かと思いますが、Modbusワーカーそのものを開発している方はともかく、対応機器を利用する分にはシリアル接続の場合は性能上の理由から ModbusRTUを選ぶことが多いと思います。</p><h1 id="メッセージフレーム"><a href="#メッセージフレーム" class="headerlink" title="メッセージフレーム"></a>メッセージフレーム</h1><p>Modbus ASCIIのメッセージフレーム（HTTPでいうと、HTTPリクエストのペイロード）は以下のような属性を持ちます。Modbus RTUはバイナリフレームのため詳細はここでは割愛しますが、ブロックの構造は同じです。</p><p><img src="/images/20200803/ascc_message_frame.png" alt=""><br>※PI–MBUS–300 Rev. Jより</p><p>START移行の、利用可能な文字は 0-9, A-Fからの文字列のみです。最後はCRLFで終わります。</p><ul><li><strong>START</strong>: 1文字で<code>:（0x3A）</code></li><li><strong>ADDRESS</strong>: 2文字。マネージャが要求するワーカーアドレス（1~247）。0 はブロードキャスト。</li><li><strong>FUNCTION</strong>: 2文字。要求の種類を示します。下記に示します。1~255が設定可能。どのファンクションコードがが有効化はワーカデバイスに依存</li><li><strong>DATA</strong>: N文字で可変。ファンクションごとにデータフォーマットが決まります。</li><li><strong>LRC CHECK</strong>: 2文字。水平パリティチェック（Longitudinal Redundancy ChecK）のこと。転送時にノイズによるビットが反転していないかを受信側がチェックできるようにするもの</li><li><strong>改行</strong>: CRLF</li></ul><h2 id="ファンクションコード"><a href="#ファンクションコード" class="headerlink" title="ファンクションコード"></a>ファンクションコード</h2><p><code>PI–MBUS–300 Rev. J</code>に記載されていたコードは全部で24つありました。コードを上から3つ抜粋します。</p><table><thead><tr><th align="left">CODE</th><th align="left">NAME</th><th align="center">Note</th></tr></thead><tbody><tr><td align="left">01</td><td align="left">Read Coil Status</td><td align="center">ワーカのDO（Discrete Output）のON/OFFステータス読み取り</td></tr><tr><td align="left">02</td><td align="left">Read Input Status</td><td align="center">ワーカのDI（Discrete Input）のON/OFFステータス読み取り</td></tr><tr><td align="left">03</td><td align="left">Read Holding Registers</td><td align="center">ワーカの保持レジスタの内容を読み取り</td></tr><tr><td align="left">以下省略。</td><td align="left"></td><td align="center"></td></tr></tbody></table><p>DATA部について03の例で説明します。</p><p><code>Read Holding Registers</code> の<code>DATA</code> は保持レジスタの開始アドレスと保持レジスタの数を指定します。</p><ul><li>START: 1文字</li><li>FUNCTION: 2文字。<code>Read Holding Registers</code> は <code>03</code>になる</li><li><strong>DATA</strong>: 03の場合は以下4つを指定<ul><li><strong>開始アドレス（Hi）</strong>:  Hi+Loなので、201を指す場合は Hiに00、LoにC8を指定。開始アドレスは1少ない</li><li><strong>開始アドレス（Lo）</strong>: 省略</li><li><strong>取得数（Hi）</strong>: Hi+Loなので、3点取得する場合は、Hiを00, Loに03を指定</li><li><strong>取得数（Lo）</strong>: 省略</li></ul></li><li>LRC CHECK: 2文字</li><li>改行</li></ul><p>まとめると、Modbusワーカ番号1にRead Holding Registersで、レジスタ201から3点取得する場合は、<br><code>:0300C8003</code>とLRCチェックとCRLFで1要求になります。</p><p>応答もほぼ似たような形式で、以下の用に指定されたレジスタ値が取得できます。</p><ul><li>START: 1文字</li><li>FUNCTION: 2文字。<code>Read Holding Registers</code> は <code>03</code>になる</li><li><strong>Byte Count</strong>: バイト数</li><li><strong>DATA1</strong>: 取得データ1</li><li><strong>DATA2</strong>: 取得データ2</li><li><strong>DATA3</strong>: 取得データ3</li><li>LRC CHECK: 2文字</li><li>改行</li></ul><h1 id="実機を触ってみる"><a href="#実機を触ってみる" class="headerlink" title="実機を触ってみる"></a>実機を触ってみる</h1><p>Amazonで探した中で一番安く買えたModbus-RTUセンサー <code>KKmoonRS485温度湿度 トランスミッタ</code> です。商品名がModbus-TRUってなっていますがtypoなので安心ください。先ほどまではModbus-Asciiで説明していましたが、ここからはModbus-RTUでバイナリ表現になります。</p><p><a href="https://www.amazon.co.jp/dp/B07KS3WJRM" target="_blank" rel="noopener">https://www.amazon.co.jp/dp/B07KS3WJRM</a></p><p>この真ん中で光っているのがセンサーです。</p><p><img src="/images/20200803/IMG_20200803_011731.jpg" alt=""></p><p>今回はシリアル接続にチャレンジしたかったので、RS485からUSBに変換する<a href="https://www.amazon.co.jp/dp/B00GWEGZOI/" target="_blank" rel="noopener">このあたりの変換アダプタ</a>を追加で購入して、Win機からUSBでこのセンサーに接続しています。</p><p>あと、電源ですが範囲がDC8V〜48Vということで、USBからだと給電できないので<a href="http://akizukidenshi.com/catalog/g/gM-06642/" target="_blank" rel="noopener">ACアダプター</a>と<a href="http://akizukidenshi.com/catalog/g/gK-05148/" target="_blank" rel="noopener">DCジャックのDIP化キット</a> を買って、キットの方をハンダ付けして、ブレッドボードで通電させています。ブレッドボード以外はジャンパー線とドライバーがあれば後はどうにかなるともいます。（抵抗とか不要）。この辺の機材調達は弊社の電子工作部の方に色々教えてもらいました。</p><p>KKmoonRS485センサーの接続情報ですが仕様書などが入っていなく、<a href="https://www.amazon.co.jp/gp/customer-reviews/R36LHIYIFV23QG" target="_blank" rel="noopener">こちらのレビュー</a>が正直一番参考になりました。</p><p>まずは既存のツールを使ってセンサー値を取得してみましょう。</p><p>色々な種類があるようですが、以下のツールが一番使い勝手が良かったです。<br><a href="https://www.fa.hdl.co.jp/jp/html/app/Modbus_Tool/index.html" target="_blank" rel="noopener">https://www.fa.hdl.co.jp/jp/html/app/Modbus_Tool/index.html</a></p><p>レビューコメント通りに設定していきます。</p><ul><li>伝送モード: RTU</li><li>通信速度 9600bps</li><li>送信クエリ: <code>01 03 00 00 00 02</code> になります<ul><li>MobusワーカID=1（ケース内のスイッチで切り替えられるらしい）</li><li><code>Read Holding Registers(0x03)</code></li><li>開始アドレス: 0x0000</li><li>データサイズ: 0x0002</li></ul></li></ul><p>「接続設定」でLANかUSBを選択できるので、ポート選択でUSBのCOMポート割当を確認しましょう。通電できていればプルダウンで選択肢にセンサーモジュールが出てくるとお見ます。（私の環境ではCOM3に割り当てられていました）</p><p>リクエストのTx（要求）を送信して、結果が成功するとRx（応答）の緑の行が表示されます。</p><p><img src="/images/20200803/ModbusToolForDebus.png" alt=""></p><p>Modbusはワーカのシミュレータがいくつかありますが、やはり実機から値が取得できると気持ち良いです。シミュレータを最初に利用しても訳が分からないと思いますので、このセンサーの購入は本当にオススメです。</p><h1 id="応答について"><a href="#応答について" class="headerlink" title="応答について"></a>応答について</h1><p><code>01 03 04 00 FA 03 28 DA EC</code> が応答でした。</p><p>それぞれの意味です。</p><ul><li><code>01</code>: ModbusワーカID（送信したのと同じ）</li><li><code>03</code>: ファンクションコード（送ったのと同じ）</li><li><code>04</code>: データ部のByte数</li><li><code>00FA</code>: 湿度のデータ</li><li><code>0328</code>: 温度のデータ</li><li><code>DAFC</code>: LRCチェックの値</li></ul><p><code>00FA</code>も<code>0328</code>も、どこの国の温湿度ですか？って言いたくなりますが、符号付き整数（16進数）でかつ10倍した値（温度も湿度も小数点以下まで取れるようにということだと思われます）ということです。お手軽に値を見るには、<a href="https://note.cman.jp/convert/bit/" target="_blank" rel="noopener">このあたり</a>のWebツールを利用して変換すると、00FAは10進数で<code>250</code>、0328は<code>808</code>でした。前者は湿度25%でいいとして、後者は80.8℃？この部屋、サウナかな？って思いましたが、どうも華氏表記（°F）のようです。</p><p><code>華氏 摂氏</code> でググると、Googleで変換できるんですね。室温が27℃だということがわかりました。（エアコンの設定は25℃なのに解せぬという知見が得られました。）</p><p><img src="/images/20200803/image.png" alt=""></p><h1 id="Goからアクセスする"><a href="#Goからアクセスする" class="headerlink" title="Goからアクセスする"></a>Goからアクセスする</h1><p>Modbusで温湿度センサーにアクセスして値を取得することはできました。これをGo言語で行ってみます。Modbusは流石に広く使われているだけあって、Goでもライブラリ実装があります。</p><ul><li><a href="https://github.com/goburrow/modbus" target="_blank" rel="noopener">goburrow/modbus</a></li></ul><p>Modbusでリクエストを出しレスポンスを受け取るところまで、ほぼサンプル通りで実行できるため特に難しくありません。</p><p>コードの全文は<a href="https://github.com/laqiiz/modbus-learning" target="_blank" rel="noopener">こちら</a>にあげておきました。</p><figure class="highlight go"><figcaption><span>GoでKKmoonRS485温度湿度センサにアクセスするサンプル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/hex"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/goburrow/modbus"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">h := modbus.NewRTUClientHandler(<span class="string">"COM3"</span>) <span class="comment">// RTU, COM3ポート</span></span><br><span class="line">h.BaudRate = <span class="number">9600</span>                       <span class="comment">// Bit/秒</span></span><br><span class="line">h.DataBits = <span class="number">8</span>                          <span class="comment">// データビット</span></span><br><span class="line">h.Parity = <span class="string">"N"</span>                          <span class="comment">// パリティ</span></span><br><span class="line">h.StopBits = <span class="number">1</span>                          <span class="comment">// トップビット</span></span><br><span class="line">h.SlaveId = <span class="number">1</span>                           <span class="comment">// スレーブID</span></span><br><span class="line">h.Timeout = <span class="number">5</span> * time.Second</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := h.Connect(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// ポートの指定間違いや、他のプロセスがポートを開いている場合</span></span><br><span class="line">log.Fatal(<span class="string">"connect: "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> h.Close()</span><br><span class="line"></span><br><span class="line">mc := modbus.NewClient(h)</span><br><span class="line">results, err := mc.ReadHoldingRegisters(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// アドレス0x00、データサイズ2</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"mc.ReadHoldingRegisters"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">humidity := results[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">temperature := results[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(hex.EncodeToString(humidity), hex.EncodeToString(temperature))</span><br><span class="line"></span><br><span class="line">humidityNum := <span class="keyword">float32</span>(<span class="keyword">int16</span>(binary.BigEndian.Uint16(humidity))) * <span class="number">1</span> / <span class="number">10</span></span><br><span class="line">temperatureFNum := <span class="keyword">float32</span>(<span class="keyword">int16</span>(binary.BigEndian.Uint16(temperature))) * <span class="number">1</span> / <span class="number">10</span></span><br><span class="line">temperatureCNum := (temperatureFNum - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span></span><br><span class="line"></span><br><span class="line">fmt.Println(humidityNum, temperatureCNum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>さきほどのModbusToolで行ったのと同じ要領で設定していきます。関数が<code>ReadHoldingRegisters</code>などそのままの名前で準備されているため、Modbusで何を行いたいかがわかれば、利用することは難しくないと思います。</p><p>1点実行前の注意として、先ほどのModbusToolでコネクションをOPENにしたままにしておくと、上記コード実行時に <code>connect: Access is denied.</code> が発生してしまいます。Modbus RTUでは同時接続はできませんのでご注意ください。</p><p>また、データを取得してからは多少厄介です。 <code>binary.BigEndian.Uint16(humidity)</code> とあるように、2byte(16bit)をBigEndian形式（数値の上位桁がメモリーの下位にある）でUnit16で読み取って、float32に変換しています。</p><p>ここからはセンサーの仕様で、値を1/10にし、温度のみ華氏→摂氏変換を行っています。</p><p>実行すると以下のように出力されます。（暑かったのでエアコンの温度を下げたら急に冷えました）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">湿度 温度</span><br><span class="line">00fb 02e2</span><br><span class="line">25.1 23.222223</span><br></pre></td></tr></table></figure><p>後はこの情報を定期間隔で実行し、データをクラウドに上げておけば可視化も自由自在だと思います。</p><h1 id="エラー時の挙動"><a href="#エラー時の挙動" class="headerlink" title="エラー時の挙動"></a>エラー時の挙動</h1><p>いくつか設定を間違ってみてアクセスして見て結果を確認します。</p><ul><li>SlaveIDを異なる値（例えば2にした場合）<ul><li>結果: * <code>mc.ReadHoldingRegistersserial: timeout</code></li></ul></li><li>ReadHoldingRegistersserialの代わりにReadCoilsを利用<ul><li>結果: * <code>mc.ReadHoldingRegistersserial: timeout</code></li></ul></li><li>ReadHoldingRegistersのAddressを仕様上にない値（例えば1）に変更<ul><li>結果: * <code>mc.ReadHoldingRegistersserial: timeout</code></li></ul></li><li>ReadHoldingRegistersのデータサイズを仕様上にない値（例えば5）に変更<ul><li>結果: * <code>mc.ReadHoldingRegistersserial: timeout</code></li></ul></li></ul><p>全て結果は <code>timeout</code> でした。これでわかるのは、Modbus RTUの仕様にはエラーレスポンスということは存在しないということです。<br>そのため、機器が正常か異常かといった判定は、定期的に値を確認し想定通り内の応答が返ってくるかどうかといったことでのチェックになると思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>「Modbusでシリアル接続」を最初見た時は馴染みがないだけに、凄く難しいことではないか？と思いましたが、Web系の技術に比べ情報が少ないのはありそうですが、データを取得することだけでだとそこまで難しくもありません。</p><p>実際の工場で、ライン制御を直接Goなどから行うことはほぼないと思います。しかしセンサー類から情報をもらい、何かしらのアルゴリズムや機械学習の推論結果を、フィールド制御側にフィードバックすることは今後のFA/IoT化の流れから増えてくると思います。</p><p>その場合の通信プロトコルがModbusであれば上記の知識と、<code>goburrow/modbus</code>のようなライブラリを活用すれば、データ連携を行うこと自体はそこまで大きな障壁ではないと思います。</p><p>また、Modbusを学ぶ上で特にワーカーの扱いに関しては、シミュレータだけで行うのではなく実機を用いるととてもイメージが湧きます。もし、なるべくお安く済ませたい場合は、AliExpressでの購入もおすすめです。リードタイムが30日ほどかかることもありますが、格安で手に入ること間違いないです。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://web.eecs.umich.edu/~modbus/documents/PI_MBUS_300.pdf" target="_blank" rel="noopener">Modicon Modbus ProtocolReference Guide PI–MBUS–300 Rev. J</a><ul><li>プロトコル仕様書</li></ul></li><li><a href="https://www.m-system.co.jp/mssjapanese/kaisetsu/nmmodbus.pdf" target="_blank" rel="noopener">Modbus プロトコル概説書 - M-System</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;フューチャー&lt;a href=&quot;https://future-architect.github.io/articles/20200726/&quot;&gt;夏休みの自由研究&lt;/a&gt;連載の1回目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="PLC" scheme="https://future-architect.github.io/tags/PLC/"/>
    
      <category term="Future電子工作部" scheme="https://future-architect.github.io/tags/Future%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C%E9%83%A8/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
      <category term="Modbus" scheme="https://future-architect.github.io/tags/Modbus/"/>
    
      <category term="電子工作" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Kaggleにワクチン開発用のデータを公開しました &amp; コード解説</title>
    <link href="https://future-architect.github.io/articles/20200801/"/>
    <id>https://future-architect.github.io/articles/20200801/</id>
    <published>2020-07-31T15:00:00.000Z</published>
    <updated>2020-07-31T03:56:09.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。SAIG所属の農見と申します。<br>この度、研究で用いた<a href="https://www.kaggle.com/futurecorporation/epitope-prediction" target="_blank" rel="noopener">B細胞エピトープ予測用データセット</a>と<a href="https://www.kaggle.com/futurecorporation/covid-19-sars-b-cells-basic-predictions-and-eda" target="_blank" rel="noopener">サンプルコード</a>を公開したので、その解説をしようと思います。(これの<a href="https://prtimes.jp/main/html/rd/p/000000406.000004374.html" target="_blank" rel="noopener">プレスリリース</a>)</p><h1 id="データセットについて"><a href="#データセットについて" class="headerlink" title="データセットについて"></a>データセットについて</h1><p>簡単に言うと、B細胞エピトープが分かればワクチン作成の大きな助けになる、だからCOVID-19の原因ウイルスであるSARS-CoV-2が持つタンパク質のB細胞エピトープを予測して、ワクチン開発の役に立てようぜというデータセットです。</p><p>B細胞エピトープについてもう少し詳しく知りたい方は<a href="https://www.biorxiv.org/content/10.1101/2020.07.27.224121v1" target="_blank" rel="noopener">我々の論文</a>を読むか免疫学の本を読んでみるといいと思います。</p><h1 id="サンプルコードについて"><a href="#サンプルコードについて" class="headerlink" title="サンプルコードについて"></a>サンプルコードについて</h1><p>では本題のサンプルコードの解説をしていきます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INPUT_DIR = <span class="string">'../input/epitope-prediction'</span></span><br><span class="line">bcell = pd.read_csv(<span class="string">f'<span class="subst">&#123;INPUT_DIR&#125;</span>/input_bcell.csv'</span>)</span><br><span class="line">sars = pd.read_csv(<span class="string">f'<span class="subst">&#123;INPUT_DIR&#125;</span>/input_sars.csv'</span>)</span><br><span class="line">covid = pd.read_csv(<span class="string">f'<span class="subst">&#123;INPUT_DIR&#125;</span>/input_covid.csv'</span>)</span><br><span class="line">bcell_sars = pd.concat([bcell, sars], axis=<span class="number">0</span>, ignore_index=<span class="literal">True</span>)</span><br><span class="line">bcell_sars.head()</span><br></pre></td></tr></table></figure><img src="/images/20200801/Screenshot from 2020-07-31 05-55-30.png"><p>最初の部分でデータがどんなものなのかということを見ています。基本中の基本ですね、データがどんなものなのかということが分からないと方針の立てようがないです。</p><p>各カラムは</p><ul><li><code>parent_protein_id</code> : タンパク質の<a href="https://www.uniprot.org/" target="_blank" rel="noopener">UniProt ID</a></li><li><code>protein_seq</code> : タンパク質の配列</li><li><code>start_position</code> : エピトープの開始位置</li><li><code>end_position</code> : エピトープの終了位置</li><li><code>peptide_seq</code> : エピトープ配列 </li><li><code>chou_fasman</code> : エピトープ特徴量, $\beta$ ターン</li><li><code>emini</code> : エピトープ特徴量, relative surface accessibility</li><li><code>kolaskar_tongaonkar</code> : エピトープ特徴量, 抗原性</li><li><code>parker</code> : エピトープ特徴量, 疎水性</li><li><code>isoelectric_point</code> : タンパク質特徴量,等電点</li><li><code>aromacity</code>: タンパク質特徴量,芳香族アミノ酸の割合</li><li><code>hydrophobicity</code> : タンパク質特徴量,疎水性</li><li><code>stability</code> : タンパク質特徴量,安定性</li><li><code>target</code> : 抗体価</li></ul><p>となっています。予測したいものはtarget(抗体価)でこれは0と1のbinaryの値を取ることが分かります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(bcell_sars.isnull())</span><br></pre></td></tr></table></figure><p>また、欠損値があるかどうかのチェックもしました。幸いこのデータには欠損値はないので、そのままデータを使うことが出来ます。ということで早速B-cellのデータを利用してCOVID-19に近いとされるSARSのBcellエピトープ予測を行いました。</p><h3 id="Task1-SARS予測"><a href="#Task1-SARS予測" class="headerlink" title="Task1 : SARS予測"></a>Task1 : SARS予測</h3><p>Bcellデータセットのみを使用してSARSデータセットの抗体価を予測するタスク。<br>SARS-CoVとSARS-CoV-2は配列に類似性があるためTask1ではSARSの予測を行っている。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create length columns</span></span><br><span class="line"><span class="keyword">for</span> df <span class="keyword">in</span> [bcell, sars, covid, bcell_sars]:</span><br><span class="line">    df[<span class="string">"length"</span>] = df[<span class="string">"end_position"</span>] - df[<span class="string">"start_position"</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">kf = GroupKFold(n_splits = <span class="number">5</span>)</span><br><span class="line">oof = np.zeros(len(bcell))</span><br><span class="line">preds = np.zeros(len(sars))</span><br><span class="line">feature_importance = pd.DataFrame()</span><br><span class="line">feature_columns = [<span class="string">"chou_fasman"</span>,<span class="string">"emini"</span>,<span class="string">"kolaskar_tongaonkar"</span>,<span class="string">"parker"</span>,<span class="string">"length"</span>,<span class="string">"isoelectric_point"</span>,<span class="string">"aromaticity"</span>,<span class="string">"hydrophobicity"</span>,<span class="string">"stability"</span>]</span><br><span class="line">target = <span class="string">"target"</span></span><br><span class="line"><span class="keyword">for</span> i,(train_index,valid_index) <span class="keyword">in</span> enumerate(kf.split(bcell[feature_columns],bcell[<span class="string">"target"</span>],bcell[<span class="string">"parent_protein_id"</span>])):</span><br><span class="line">    train_x = bcell.loc[train_index][feature_columns].values</span><br><span class="line">    train_y = bcell.loc[train_index][target].values</span><br><span class="line">    valid_x = bcell.loc[valid_index][feature_columns].values</span><br><span class="line">    valid_y = bcell.loc[valid_index][target].values</span><br><span class="line">    train_data = lgb.Dataset(train_x, label = train_y)</span><br><span class="line">    valid_data = lgb.Dataset(valid_x, label = valid_y)</span><br><span class="line">    model = lgb.train(params, train_data, valid_sets = [valid_data], verbose_eval=<span class="number">20</span>,num_boost_round=<span class="number">500</span>,early_stopping_rounds=<span class="number">50</span>) </span><br><span class="line">    oof[valid_index] = model.predict(valid_x)</span><br><span class="line">    preds += model.predict(sars[feature_columns].values)/kf.n_splits</span><br><span class="line">    feature_importance[<span class="string">"feature"</span>] = feature_columns</span><br><span class="line">    feature_importance[<span class="string">"importance"</span>+str(i)] = model.feature_importance()</span><br><span class="line">roc_auc_score(bcell[<span class="string">"target"</span>],oof)</span><br></pre></td></tr></table></figure><p>lengthという特徴量を作成して、普通に5-fold cross validationしているだけですが、注目すべき部分は<strong>GroupKFold</strong>を使っている点です。ただ、GroupKFoldを知らない人もいると思うので先にGroupKFoldの説明をします。</p><p><a href="https://scikit-learn.org/stable/auto_examples/model_selection/plot_cv_indices.html#sphx-glr-auto-examples-model-selection-plot-cv-indices-py" target="_blank" rel="noopener">https://scikit-learn.org/stable/auto_examples/model_selection/plot_cv_indices.html#sphx-glr-auto-examples-model-selection-plot-cv-indices-py</a>から引用。</p><img src="/images/20200801/Screenshot from 2020-07-31 06-20-49.png"><p>これを見てみるとGroupKFoldはKFoldと異なりGroupをまたぐことのない分け方をしていることが分かります。<br>で、今回何故parent_protein_idをgroupとしてGroupKFoldをしているかというとタンパク質ごとに分けないと不当に精度が高くなる恐れがあるためです。これは単純な理由でtargetに1しかないタンパク質や0しかないタンパク質というものが存在します。これをtrainとvalidationに混在させてしまうとより精度が高くなるというのは想像に難くないと思います。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select = [i != <span class="string">"feature"</span> <span class="keyword">for</span> i <span class="keyword">in</span> feature_importance.columns]</span><br><span class="line">select = feature_importance.columns[select]</span><br><span class="line">feature_importance[select] = feature_importance[select]/feature_importance[select].sum()</span><br><span class="line">feature_importance[<span class="string">"importance"</span>] = feature_importance.select_dtypes(include=[np.number]).mean(axis=<span class="number">1</span>)</span><br><span class="line">sns.barplot(x=<span class="string">"importance"</span>, y=<span class="string">"feature"</span>, data=feature_importance.sort_values(by=<span class="string">"importance"</span>, ascending=<span class="literal">False</span>));</span><br><span class="line">plt.title(<span class="string">'GBDT Features (avg over folds)'</span>);</span><br></pre></td></tr></table></figure><img src="/images/20200801/Screenshot from 2020-07-31 06-56-08.png"><p>LightGBMではFeature importanceという指標で、どの特徴量がより予測に寄与したのかを見ることが出来ます。<br>今回の例で見ると予測に一番重要だったのはhydrophobicity(タンパク質の疎水性)であることが分かります。</p><p>またSARSは正解データがあるので予測がどれだけあたっていたかも見てみましょう。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, classification_report</span><br><span class="line">print(<span class="string">"Accuracy:"</span>, accuracy_score(sars[<span class="string">"target"</span>].values, np.int32(preds &gt;= <span class="number">0.5</span>)))</span><br><span class="line">print(classification_report(sars[<span class="string">"target"</span>].values, np.int32(preds &gt;= <span class="number">0.5</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Accuracy: 0.7403846153846154</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           0       0.74      0.99      0.85       380</span><br><span class="line">           1       0.78      0.05      0.09       140</span><br><span class="line"></span><br><span class="line">    accuracy                           0.74       520</span><br><span class="line">   macro avg       0.76      0.52      0.47       520</span><br><span class="line">weighted avg       0.75      0.74      0.65       520</span><br></pre></td></tr></table></figure><p>これを見ると1に対するrecallがとても低く改善の余地があることが分かります。</p><h3 id="Task2-SARS-CoV-2-COVID-19-予測"><a href="#Task2-SARS-CoV-2-COVID-19-予測" class="headerlink" title="Task2 : SARS-CoV-2 (COVID-19) 予測"></a>Task2 : SARS-CoV-2 (COVID-19) 予測</h3><p>BcellとSARSのデータセットを利用して、SARS-CoV-2の抗体価を予測するタスク。<br>SARS-CoV-2には抗体価データがないところが難しいポイントです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">kf = GroupKFold(n_splits = <span class="number">5</span>)</span><br><span class="line">oof = np.zeros(len(bcell_sars))</span><br><span class="line">preds = np.zeros(len(covid))</span><br><span class="line">feature_importance = pd.DataFrame()</span><br><span class="line">feature_columns = [<span class="string">"chou_fasman"</span>,<span class="string">"emini"</span>,<span class="string">"kolaskar_tongaonkar"</span>,<span class="string">"parker"</span>,<span class="string">"length"</span>,<span class="string">"isoelectric_point"</span>,<span class="string">"aromaticity"</span>,<span class="string">"hydrophobicity"</span>,<span class="string">"stability"</span>]</span><br><span class="line">target = <span class="string">"target"</span></span><br><span class="line"><span class="keyword">for</span> i,(train_index,valid_index) <span class="keyword">in</span> enumerate(kf.split(bcell_sars[feature_columns],bcell_sars[<span class="string">"target"</span>],bcell_sars[<span class="string">"parent_protein_id"</span>])):</span><br><span class="line">    train_x = bcell_sars.loc[train_index][feature_columns].values</span><br><span class="line">    train_y = bcell_sars.loc[train_index][target].values</span><br><span class="line">    valid_x = bcell_sars.loc[valid_index][feature_columns].values</span><br><span class="line">    valid_y = bcell_sars.loc[valid_index][target].values</span><br><span class="line">    train_data = lgb.Dataset(train_x, label = train_y)</span><br><span class="line">    valid_data = lgb.Dataset(valid_x, label = valid_y)</span><br><span class="line">    model = lgb.train(params, train_data, valid_sets = [valid_data], verbose_eval=<span class="number">20</span>,num_boost_round=<span class="number">500</span>,early_stopping_rounds=<span class="number">50</span>) </span><br><span class="line">    oof[valid_index] = model.predict(valid_x)</span><br><span class="line">    preds += model.predict(covid[feature_columns].values)/kf.n_splits</span><br><span class="line">    feature_importance[<span class="string">"feature"</span>] = feature_columns</span><br><span class="line">    feature_importance[<span class="string">"importance"</span>+str(i)] = model.feature_importance()</span><br><span class="line">roc_auc_score(bcell_sars[<span class="string">"target"</span>],oof)</span><br><span class="line"></span><br><span class="line">covid[<span class="string">"target"</span>] = preds</span><br><span class="line">covid.to_csv(<span class="string">"sub.csv"</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>SARS-CoV-2への予測も同様にして予測結果を出力しますが、正解データがないので良し悪しの判断は難しいです。この部分は今後の生体内での実験で得られるB細胞エピトープの情報を踏まえた上で判断することになると思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回のデータセット、ソースコード、論文の公開により、医学の知見を持たないAI研究者でも容易にワクチン開発用データで実験することが出来るようになりました。このデータセットを使用して得られた知見をKaggle notebook等で公開していただけると幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。SAIG所属の農見と申します。&lt;br&gt;この度、研究で用いた&lt;a href=&quot;https://www.kaggle
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Kaggle" scheme="https://future-architect.github.io/tags/Kaggle/"/>
    
  </entry>
  
  <entry>
    <title>コード選考の問題選定を現場社員がやるわけ</title>
    <link href="https://future-architect.github.io/articles/20200731/"/>
    <id>https://future-architect.github.io/articles/20200731/</id>
    <published>2020-07-30T15:00:00.000Z</published>
    <updated>2020-07-31T02:19:13.810Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200731/laptop-2298286_1280.png"><p><a href="https://pixabay.com/ja/users/Sara_Torda-888816/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2298286" target="_blank" rel="noopener">Sara Torda</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2298286" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>SAIG(Strategic AI Group)の塚本です。AIと言えば Deep Learning 等の機械学習分野が中心ですが、それらが適さないと判断された問題全般(数理最適や複雑なデータ処理)を担当しています。</p><p>また、競技プログラムを中心とした全社的な活動に関わっており、フューチャーが2018年より実施している、新卒採用の<strong>コード選考</strong>についてご紹介します。</p><h1 id="コード選考をはじめた経緯"><a href="#コード選考をはじめた経緯" class="headerlink" title="コード選考をはじめた経緯"></a>コード選考をはじめた経緯</h1><p>全社員がプログラミングスキルを求められるフューチャーにとって、採用時におけるその能力の定量評価は長年の課題であり、昨今の採用サービスの充実を機に取り組みをはじめました。</p><p>より詳細な経緯は下記記事をご参照ください。</p><p><a href="https://tracks.run/interview/future-architect/" target="_blank" rel="noopener">高いプログラミングスキルを持つ人材を引きつける「コード選考」 全社員がプログラミングを熟知したテクノロジー企業の採用フローを公開！</a></p><p>サービスを活用することが決まったものの、採用フローの意図に沿ったデザインを行う必要があり、採用チームのメンバーだけでは対応が難しい部分がありました。そこで、社内の部活動として競技プログラミング部を立ち上げ・運営していた私に相談が来ました。</p><h1 id="コード選考の位置付けとデザイン"><a href="#コード選考の位置付けとデザイン" class="headerlink" title="コード選考の位置付けとデザイン"></a>コード選考の位置付けとデザイン</h1><p>まず、フューチャー社員の多くはITコンサルタントという1職種に属しており、期待される役割はこれまでの実績や本人希望に応じて流動的に定められます。コード選考でも、プログラミングに特化した人材のみを選出するのではなく、ITコンサルタントとして基礎的なプログラミングの素養を持っているか確認することを目的としました。<br>一方、高いプログラミングスキルを有した人材を評価すべく、スキルに応じて点数の差が開くよう問題選択を行うことも求められます。さらに、合格者が次の選考に進む際や内定承諾時の判断基準として、各選考内容はシビアに見られます。</p><p>これらの観点から、コード選考に求められる要素を下記のように定めました。</p><ul><li>基礎的なプログラミングの素養を有しているか確認すること<sup id="fnref:0"><a href="#fn:0" rel="footnote">0</a></sup></li><li>プログラミングスキルの高さに応じて点数差が生まれること<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>特定の知識やテクニックが不要なこと</li><li>問題文の理解が容易なこと</li><li>解法を考えるのが楽しいこと</li></ul><p>これらを加味し、以下のようなコード選考の実現を目指します。<br>「プログラミング言語に依らず解け、段階的に難易度が上がるパズルチックな問題を複数<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>出題する。」</p><h1 id="問題選定"><a href="#問題選定" class="headerlink" title="問題選定"></a>問題選定</h1><p>活用したサービスでは、予め用意された数百問の問題から自由に組み合わせて試験を作ることができます。<br>各問題には、難易度や所要時間の目安が併記されているのですが、あまり納得のできない値であったり、当社の狙いにそぐわない問題も多く見受けられました。そこで、目指すコード選考の実現のため、全ての問題を現場社員で見直すことにしました。</p><ol><li>スクリーニングとして、私が全問題文を確認、候補として20問以内に絞り込みます。</li><li>競技プログラミング部のメンバーを中心に、協力してくれる社員に問題候補を共有します。</li><li>実際に問題を解いてもらって、難易度の目安や感想をフィードバックしてもらいます。</li><li>難易度が綺麗な階段状になるよう組み合わせを考え、出題する問題を選定します。</li></ol><p>問題選定の実施にあたり、解く問題にノルマや担当等を定めず、部活動の延長として興味の向くままに取り組んでもらえることを大事にしています。解き終わった問題に対し担当したメンバー間で議論が盛り上がることも多く、一種のお祭りのようになっているかも知れません。</p><h1 id="結果の活用"><a href="#結果の活用" class="headerlink" title="結果の活用"></a>結果の活用</h1><p>コード選考の結果の活用方法については、特に面接など、他の選考フローと絡めて試行錯誤を行っています。年々変化するため確定的なことは言い難いのですが、自社の狙いに沿った観点で定量化されていることにより、形骸化せず、選考基準として活用できることにメリットを感じています。</p><h1 id="効果"><a href="#効果" class="headerlink" title="効果"></a>効果</h1><p>コード選考は当初想定を超える成果に繋がっています。</p><p>まず、コード選考を実施することにより、ITコンサルティング業界を就活候補としていない学生からも応募が来るようになりました。また、面接官の評価以外に、客観的な数値基準が加わったことにより、柔軟な選考が可能になりました。そして、面接時のネタや内定承諾時の理由として、コード選考内容に対する好印象を上げる応募者が少なくない人数生まれました。</p><p>上記の結果、新卒採用者の内、すでにコード選考経由の人数は十分な割合を占めるようになりました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>フューチャーのコード選考の取り組みについてご紹介しました。<br>IT人材の枯渇が叫ばれる中、各社プログラミングスキルを測る施策を検討・採用する企業も多いと思います。コード選考といっても、企業毎に求める狙いや評価基準は様々であり、それに合わせて必要な選考をどう実現すればよいのか、本取り組みが何かの参考になれば幸いです。</p><p>(個人的には、コード選考を通じて多くのアルゴリズマーに入社頂いたので、より良い問題を揃えるため、そろそろ社内での自作を実現したいと考えています。)</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:0"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">0.</span><span style="display: inline-block; vertical-align: top;">AtCoder緑コーダーの方の多くが通過するレベルを想定しました。</span><a href="#fnref:0" rev="footnote"> ↩</a></li><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">AtCoder黄コーダーの方であれば満点が取れるレベルを想定しました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">所要時間の兼ね合いから5問程度を目安にしています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200731/laptop-2298286_1280.png&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/Sara_Torda-888816/?utm_source=link-attributio
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="採用" scheme="https://future-architect.github.io/tags/%E6%8E%A1%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redux-Toolkitに学ぶ、TypeScriptの型推論とこれからのAPIデザイン</title>
    <link href="https://future-architect.github.io/articles/20200730/"/>
    <id>https://future-architect.github.io/articles/20200730/</id>
    <published>2020-07-29T15:00:00.000Z</published>
    <updated>2020-08-05T14:18:41.658Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200730/top.png"><p>TypeScriptは、JavaScriptのさまざまなフリーダムな書き方を受け入れ、漸進的な型付けを行えるようにするという<del>狂った</del>高難易度な目的のために作成されているのですが、そろそろ、TypeScriptファーストで、利用者にとって使いやすいAPIみたいな方向性で使われることも増えるのでは、という思いを強く持ちました。「既存のJSプロジェクトをTypeScript化して〜」みたいな紹介のされ方はもはや過去のものになったのではないかと。</p><p>すでに<a href="https://2019.stateofjs.com/javascript-flavors/typescript/" target="_blank" rel="noopener">State of JavaScript 2019</a>では2/3のユーザーがすでにTypeScriptを利用したことがある（使っている）と答え、残りの1/3も学びたい、と答えている状況です。この勢いだと、2年後には80%を超えそうです。僕自身も、TypeScriptファーストな世界がくることを想像して<a href="https://github.com/future-architect/typescript-guide/" target="_blank" rel="noopener">説明に使える教科書</a>を書き始めたわけですが、思ったよりもその世界が来るのは早そうです。</p><p>このエントリーでは、TypeScriptユーザーのTypeScriptユーザーによるTypeScriptユーザーのためのAPI設計について考えをまとめてみたいと思います。想定読者は、フレームワークを作るような人ですので、既存のライブラリを組み合わせてアプリケーションを作る人は想定外です。</p><p>ちなみに、相互運用の話などはオライリージャパンから出版されている<a href="https://www.oreilly.co.jp/books/9784873119045/" target="_blank" rel="noopener">プログラミングTypeScript</a>の11章などで詳しく説明されているので、そちらをみると良いと思います。JSから移行については話はしません。</p><h1 id="3行まとめ"><a href="#3行まとめ" class="headerlink" title="3行まとめ"></a>3行まとめ</h1><ul><li>TypeScriptの型推論は制約があって、他の関数型言語で提供されているものよりは弱い</li><li>うまく推論を活用して、コード補完とか型チェックが利きやすいAPIを作ろう</li><li>JavaScript時代とはAPIの形が変わるかもよ/変えて行こう</li></ul><h1 id="前回のおさらい"><a href="#前回のおさらい" class="headerlink" title="前回のおさらい"></a>前回のおさらい</h1><p>TechBlogで以前、Redux Toolkitの紹介を書きました。今回のエントリーはその続きです。</p><ul><li><a href="https://future-architect.github.io/articles/20200501/">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話</a></li></ul><blockquote><p>最近、僕が意識しているのはリーダブルなコードです。これはオライリーの本のReadableではなくて、コードが人を導いてくれる（Leadable）という意味です。一方で、ReduxとTypeScriptで感じていたのは、処理系を通すためにコードを書かされているという感覚ですね。オーダブル(Orderable)と呼んでいるけど、もっといい名前があったら教えてください。Redux Toolkitはだいぶ余計なことに頭を使わなくて済むので、とても良いです。<br>(略)<br>Redux toolkitと生のReduxを使って見て思うのは、ライブラリの設計の難易度が3倍ぐらいになったなぁ、という感じですね。TypeScriptで型推論が入ったのはあるのですが、その型推論が効きやすい、ライブラリユーザーが実装しなきゃいけない型情報を減らすための設計というのが、この後の主戦場になりそうだなぁ、ということです。今まではデータを加工する、というロジックだけを設計すれば良かったのですが、データの伝搬だけじゃなくて、型情報の伝搬というのも考慮しなければならないと。ある意味、C++プログラマーのテンプレート経験が生きるのかも、なぁ、という。まだあまり言語化できないのですが。Haskellな人とか得意だったりするんですかね？</p></blockquote><h1 id="型の伝搬"><a href="#型の伝搬" class="headerlink" title="型の伝搬"></a>型の伝搬</h1><p>使いやすいAPIというのは、その今入力しようとしている箇所の情報が十分に得られるということです。それは型です。しかし、型を全部覚えていて間違いなく宣言しなければならないとすると、入力の補助にはなりませんし、タイプ数も増えます。わざわざ入力しなくてもきちんと情報が得られるようになるのが型推論です。型推論はその場の環境から型を決定していきます。</p><p>前回のエントリーの最後に書いたのが型の伝搬です。型推論(type inference)ではあるのですが、TypeScriptの場合はより強力な型推論を持つ言語と比べると、推論する方向が限定されているのであえて伝搬と呼びましたが、型推論です。</p><p>方向が決まっていて機能が弱いのは欠点でもありますが、長所でもあります。処理系の挙動はわかりやすく、エラーメッセージもシンプルですし、コンパイルも早いです。</p><h2 id="代入"><a href="#代入" class="headerlink" title="代入"></a>代入</h2><p>一番基本的な推論は、代入ですね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">"hello world"</span>;</span><br></pre></td></tr></table></figure><p>丁寧に書くなら次のように型情報を入れることになりますが、右辺から明らかなので、左側の代入部分では型を省略できますね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i: <span class="built_in">string</span> = <span class="string">"hello world"</span>;</span><br></pre></td></tr></table></figure><p>逆方向には推論はできません。当たり前に思えるかもしれませんがそうではありません。逆方向に推論ができるとしたら、左辺から右辺の関数の返り値の型を推定して、そこから、引数<code>i</code>の型も決まって「testの呼び出し時の引数の型が違う」となりますが、TypeScriptの場合は一方通行なので、右辺の型が全部解決してから左辺を処理するため、「数字は文字列の変数に代入できない」というエラーになります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> i: <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span>&gt;(<span class="params">i: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'number' is not assignable to type 'string'.</span></span><br><span class="line">s = test(i);</span><br></pre></td></tr></table></figure><p>型変数を持つクラスを型を指定しないでインスタンス作成した場合は、<code>unknown</code>が指定されたものとしてインスタンスが作成されます。最初の<code>append()</code>の引数をみて、T=numberと推論してくれることはTypeScriptではありません。そのため、次の文字列の<code>append()</code>も成功してしまいます。エラーになってくれません。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    append(i: T) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> l = <span class="keyword">new</span> List();</span><br><span class="line">l.append(<span class="number">10</span>);</span><br><span class="line">l.append(<span class="string">"string"</span>);</span><br></pre></td></tr></table></figure><p><code>unknown</code>のまま動いちゃうと、TypeScriptからJavaScriptの世界に逆戻りをしますが、まあそれでも動いてくれるのはTypeScriptらしいところではあります。<a href="https://go2goplay.golang.org/" target="_blank" rel="noopener">Goのジェネリクスだとエラーになる</a>のでインスタンス作成時に明示的な型変数指定が必要になります。</p><h2 id="関数、メソッドの引数"><a href="#関数、メソッドの引数" class="headerlink" title="関数、メソッドの引数"></a>関数、メソッドの引数</h2><p>引数から、それが属する関数の型変数への伝搬は可能です。というよりも、関数の型変数に推論で型を自動設定する方法は引数経由が唯一の方法です。</p><p>単なる<code>T</code>でなくても、<code>T[]</code>のような配列でも、<code>(input: T) =&gt; void</code>みたいな引数であっても、きちんと解決してくれます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>&lt;<span class="title">T</span>&gt;(<span class="params">a: T</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引数同士の伝搬も見逃せない要素です。Redux-Toolkitの<code>createSlice()</code>をシンプルに書くと次のようになります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSlice</span>&lt;<span class="title">S</span>&gt;(<span class="params">state: S, reducers: &#123;[key: <span class="built_in">string</span>]: (s: S) =&gt; S&#125;</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これの良い点は、最初の引数のinitialStateから型情報が伝搬し、2つ目のオブジェクトの型の定義が完成する点にあります。このreducersの関数をユーザーが作成する場合は、sはState型と分かっているのでコード補完が聞きますし、returnの方が間違えば即座に赤線が引かれます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> State = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: State = &#123;</span><br><span class="line">    name: <span class="string">"shibukawa"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">createSlice(initialState, &#123;</span><br><span class="line">    greeting: <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;s.name&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="関数の返り値"><a href="#関数の返り値" class="headerlink" title="関数の返り値"></a>関数の返り値</h2><p>関数の返り値の推論が賢いのはTypeScriptのうれしいところです。引数と違って返り値は内部のロジックで決まるので省略可能ですが、ESLintの推奨設定で<code>explicit-function-return-type</code>がデフォルトでONになっており、明示的に書かないといけません。僕はこの設定はオフにしてしまいますし、仮に宣言を省略しても.d.tsには型情報としては現れるし、コード補完は聞くし、型宣言をソースコードをgrepして目で見れない以外のデメリットはないです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> <span class="keyword">as</span> <span class="built_in">number</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span> <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これは次のように推論されます。なお、as number、as stringを外すと、 <code>10 | &quot;test&quot;</code>になります。</p><figure class="highlight ts"><figcaption><span>.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>): <span class="title">string</span> | <span class="title">number</span></span>;</span><br></pre></td></tr></table></figure><p>オブジェクトを返す場合は挙動がちょっと違います。Reduxのaction creatorでよく見るような次ような関数ですね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">"ADD_TODO"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: ADD_TODO,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これはこうなります。</p><figure class="highlight ts"><figcaption><span>.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>): </span>&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">    text: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>レスポンスを文字列型ではなくて、特定の文字列<code>ADD_TODO</code>固定としたい場合は、<code>as const</code>をつけます。↑の例のconstの変数を参照したままas constをつけるとエラーが出ますので、文字列リテラルにしています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ADD_TODO"</span> <span class="keyword">as</span> <span class="keyword">const</span>,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text: <span class="built_in">string</span></span>): </span>&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ADD_TODO"</span>;</span><br><span class="line">    text: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>関数の返り値から、型ユーティリティの<code>ReturnType</code>を使うと、型を取り出すことが可能です。↑の<code>as const</code>はこの型を使う場合に大切になります。Reduxのreducerのactionの型指定で、すべてのAction Creatorの返り値の型の合併型を作るときに、”ADD_TODO”の部分が残っていると嬉しいからです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AddTodoAction = ReturnType&lt;<span class="keyword">typeof</span> addTodo&gt;;</span><br><span class="line"><span class="keyword">type</span> DoneTodoAction = ReturnType&lt;<span class="keyword">typeof</span> doneTodo&gt;;</span><br><span class="line"><span class="keyword">type</span> Actions = AddTodoAction | DoneTodoAction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  todos: [] <span class="keyword">as</span> Todo[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">&#123;todos&#125; = initialState, action: Actions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ADD_TODO"</span>: <span class="comment">// ここで各アクションの関数がreturnしてない文字列を書くとエラーが検知される</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;todos&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最初の例はADD_TODOをconst変数にしていました。変数の有無であればTypeScriptでなくてもJSでもエラーチェックが利くためにReduxで「アクションの識別子はconst変数にする」がベストプラクティスになったと思いますが、そもそもTypeScriptでは文字列のままでもチェックが利くので、変数宣言が省略できるようになりました。</p><p>このオブジェクトを返す場合の型定義は、ほとんどがnullableでない場合はこのように関数に直接書いてもいいですが、nullableだったり型指定のある配列だったりする場合は型アノテーションをたくさんつけなければならず、タイプ数が多くなってきてしまいますし、見通しも悪くなります。また複数箇所で利用する場合などは外部に型定義を書く方が良いですね。</p><p>なお、TypeScriptでは返り値を受け取る変数の型から、返り値の方を推論して決めることはできません。これはまあ返り値を受ける=代入なので、代入の右辺への推論が効かない以上、当然ですね。</p><h2 id="クラスとメンバー"><a href="#クラスとメンバー" class="headerlink" title="クラスとメンバー"></a>クラスとメンバー</h2><p>クラス側に型変数を定義すると、メンバーでも使えます。まあ当然ですね。メンバー変数と、メンバーメソッドの引数や返り値で利用可能です。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    append(i: T) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆に、メンバーで定義された型変数は他のメソッドやクラス側で使えません。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    append&lt;U&gt;(i: T, e: U) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(i);</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただし、コンストラクタを除きます。コンストラクタの引数を元に、型変数を決定することはできます。この特性は大切で、クラスの型変数に型を伝搬させるには、クラスの型変数にはコンストラクタを使う方法以外はありません。そうでなければ明示的に型を渡して初期化（<code>new List&lt;number&gt;()</code>しなければなりません。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">a: T</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解決できないのが<code>Promise</code>の引数のような<code>(asyncTask: (resolve: (i: T)=&gt;void) =&gt; void</code>といった、コンストラクタの引数が関数で、その関数の入力値で型を決めるようなケースです。このようなケースでは型が決定できず、<code>Promiseの型変数</code>は<code>unknown</code>のままです。この場合だけは<code>new Promise&lt;number&gt;</code>と明示的に書いてあげる必要があります。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">10</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h2><p>ここがTypeScriptの型推論の秘孔かな、と思います。まず、Javaのthrows宣言がない（何が飛んでくるか事前にわからない）、<code>Promise</code>で<code>reject</code>に渡される例外の型定義がないからです。受け取り側に型として伝わる物が何もありません。</p><p>そもそも、TypeScriptは例外を扱うのが元のJavaScriptの特性もあって苦手です。</p><ul><li><a href="https://qiita.com/shibukawa/items/ffe7264ecff78f55b296" target="_blank" rel="noopener">JavaScript/TypeScriptの例外ハンドリング戦略を考える</a></li></ul><p>型の補完も効いて、タイプ数も少なくて済み、関数やメソッドの外で別の要素を定義しなくても良い方法は、Goスタイルで返り値の一部として返す方法なんじゃないかと思っています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcAge</span>(<span class="params">birthDay: <span class="built_in">Date</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> error = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> tNum = today.getFullYear() * <span class="number">10000</span> + (today.getMonth() + <span class="number">1</span>) * <span class="number">100</span> + today.getDate();</span><br><span class="line">    <span class="keyword">const</span> bNum = birthDay.getFullYear() * <span class="number">10000</span> + (birthDay.getMonth() + <span class="number">1</span> ) * <span class="number">100</span> + birthDay.getDate();</span><br><span class="line">    <span class="keyword">if</span> (bNum &gt; tNum) &#123;</span><br><span class="line">        error = <span class="string">"birthday is future"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        age = <span class="built_in">Math</span>.floor((tNum - bNum) / <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">120</span>) &#123;</span><br><span class="line">            error = <span class="string">"too old"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        age,</span><br><span class="line">        error,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これであれば補完も利くし、<code>if (res.error)</code>みたいに条件分岐も簡単です。</p><p>オライリーのTypeScript本では、正常系のレスポンスと、Errorの合併型を返し、受け取り側でinstanceofを使って条件わけをしていました。オブジェクトのほうが利用コード側のタイプ数は少ないので個人的には好きかな、と思いました。思いっきりGo風に寄せるためにタプルを使うこともできますが、それよりはオブジェクトの方がもろもろ良い気がします（受け手が分割代入で変数名を自分でつけなければならない、エラーを返す時にundefinedを入れる必要があるetc）。</p><h1 id="型推論の途中での型演算"><a href="#型推論の途中での型演算" class="headerlink" title="型推論の途中での型演算"></a>型推論の途中での型演算</h1><p>推論中に型の演算を行いたい、例えば、入力されたオブジェクトと同一のキーを持つが、シグネチャが全く別の関数を持つオブジェクトを定義して、それを返り値に使いたいとします。ちょうど、Redux <code>createSlice</code> が、<code>reducers</code>で渡されたreducerが格納されたオブジェクトを引数にとって、同じキーのアクションが入ったオブジェクトを作って、返り値の<code>actions</code>に入れて返しています。</p><p>型推論の流れとしては、引数→返り値のよくある推論なのですが、同じ型<code>T</code>を使うのではなくて、ちょっとした演算が必要です。この場合は、引数→関数の型変数→返り値と、関数の型変数をワンクッション置けば良いようです。</p><p>ジェネリックな型定義を、型を引数に持つ関数と見立てて作成します。まずはReducersと、Actionsを作ります。模擬コードなのでアクションの引数はなし、とします。</p><p>Reducersは関数の引数で渡されるオブジェクトで、Actionsは返り値で使うオブジェクトです。引数側はシンプルです。ステートの型を引数にとったら、それを引数にとって、返り値として返す関数を持つオブジェクトです。Actionsの方は、引数のR(reducer)を引数ニトリ、それと同じ属性を持つオブジェクトで、オブジェクトの値の型は、オブジェクトを返す関数です。<code>{[P in keyof R]: 値の型}</code>で、同じキーを持つ値の型違いのオブジェクトを作り出しています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reducers&lt;S&gt; =  &#123;[key: <span class="built_in">string</span>]: <span class="function">(<span class="params">s: S</span>) =&gt;</span> S&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Actions&lt;R&gt; = &#123;[P <span class="keyword">in</span> keyof R]: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;&#125;;</span><br></pre></td></tr></table></figure><p>次にcreateStateを定義します。Sはオブジェクトです。先ほど定義したActionsとReducersを使って関数定義を組み立ててみます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createState</span>&lt;<span class="title">S</span> <span class="title">extends</span> </span>&#123;&#125;&gt;(state: S, reducers: Reducers&lt;S&gt;): &#123; actions: Actions&lt;Reducers&lt;S&gt;&gt; &#125; &#123;</span><br><span class="line">    <span class="keyword">const</span> actions = &#123;&#125; <span class="keyword">as</span> &#123;[key: <span class="built_in">string</span>]: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key of <span class="built_in">Object</span>.keys(reducers)) &#123;</span><br><span class="line">        actions[key] = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">return</span> &#123;&#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        actions: actions <span class="keyword">as</span> Actions&lt;Reducers&lt;S&gt;&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで完成でしょうか？実は違います。<code>Reducers</code>は「任意のキーを持つオブジェクト」です。reducersと、actionsで、それぞれ<code>Reducers</code>を使っていますが、それぞれが「任意のキーを持つオブジェクト」であり、この2つが同じキーを持つという保証はこの型定義では行われていません。そのため、actionsのどのキーをアクセスしてみても、エラーは検出されません。</p><p>2つの<code>Reducers&lt;S&gt;</code>を1つにします。ここで、関数の型パラメータに1つ型変数を追加します。<code>extends</code>は型における「=」みたいなものです。関数の型変数を一時的な型置き場に使っています。それを入力側と、返り値と同じ型パラメータを渡すことで、「この2つが同じオブジェクト」であることが表現できます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createState</span>&lt;<span class="title">S</span> <span class="title">extends</span> </span>&#123;&#125;, ReducersType <span class="keyword">extends</span> Reducers&lt;S&gt;&gt;(state: S, reducers: ReducersType): &#123; actions: Actions&lt;ReducersType&gt; &#125; &#123;</span><br><span class="line">    <span class="keyword">const</span> actions = &#123;&#125; <span class="keyword">as</span> &#123;[key: <span class="built_in">string</span>]: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key of <span class="built_in">Object</span>.keys(reducers)) &#123;</span><br><span class="line">        actions[key] = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">return</span> &#123;&#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        actions: actions <span class="keyword">as</span> Actions&lt;ReducersType&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、期待通りの、「同じキーを持つ別の型」をレスポンスの型に設定できました。</p><h1 id="これからのAPI設計"><a href="#これからのAPI設計" class="headerlink" title="これからのAPI設計"></a>これからのAPI設計</h1><p>Redux-ToolkitのAPI設計を見ると、コードを書くタイミングで、そのコードの環境（型推論用語です）がコーディングの手伝いをしてくれるようなAPIデザインになっています。</p><ul><li>コード補完がぱちっと決まる</li><li>推論が決まる(型変数を明示的に設定しなくてもいい)</li><li>エラーが即座に分かる</li><li>余計な型定義や定数定義などをしなくても済む、必要であっても、使う場所と定義位置がとても近い。</li></ul><p>一言で言えば、「記憶力をあまり必要としない」でコーディングができます。おそらく、同じアウトプットを産み出すための脳の酸素使用量が少ない、みたいな感じで「わかりやすいコード」は定量的に計測は可能な気がします。まあ試したことはないですが。</p><p>コード補完がばちっと決まって推論が決まるのは、anyやunknownになりにくい設計ですね。いろいろな型推論を紹介してきましたが、大きな流れとしては大きく2つですね。推論の起点となるのは、関数の引数とクラスコンストラクタの引数の2箇所です。基本的にはこの流れにうまく乗る、ということになります。</p><ul><li>引数→関数の型変数、返り値</li><li>コンストラクタの引数→クラスの型変数→メンバーメソッドの引数や返り値</li></ul><p>ReduxやRedux Toolkitを使うにあたって、ユーザーはStateは定義する必要があります。まあこれはReduxを使うユーザーの関心ごとそのものなので、これは良いでしょう。これを一度設計したらこれを最大限に活用できる、というのが目指す世界です。シンプルな入出力だけのライブラリであれば引数から推論をきちんとしましょう、で完結ですが、Redux-Toolkitとかのように、ユーザーが指定したデータ型を入力か出力に使うreducerのような（別の例だと、オブジェクト指向用語でいうところのテンプレートメソッドのホットスポット、あるいはGUIのイベントのハンドラ）コードを実装しなければならない場面が、そこそこ複雑なケースです。</p><p>Redux-Toolkitはオブジェクトを受け取る関数という形態でした。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> State = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: State = &#123;</span><br><span class="line">    name: <span class="string">"shibukawa"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">createSlice(initialState, &#123;</span><br><span class="line">    greeting: <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;s.name&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>人によっては「クラスを使ってイベントハンドラも定義したい」と思う方もいると思いますが、よくよく考えると、Redux-Toolkitスタイル以外は難しいことがわかります。</p><p>「関数の入ったオブジェクト」というのは、クラスがなかった時代にみんながオレオレクラス作っていたときによく見かけた悪い慣習ですが、TypeScript的には扱いやすいのです。関数のシグネチャを同一にそろえることが簡単です。型ユーティリティを使えば、オブジェクトのキー一覧が取得できます。ユーザーが定義したreducerのリストを使って、型補完を利用しながらactionsを作り出すこともできました。</p><p>クラスも一応、キーの一覧の取得までは可能です。ただ、取得はできても、ユーザーが任意の名前で定義する新しいメソッドに対して、特定のシグネチャを要求して、それ以外が作成されたら編集中にエラーを出す、というのはできないんじゃないですかね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">    methodA(a :State) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    methodB(a :State) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> keys = keyof A; <span class="comment">// "methodA" | "methodB"</span></span><br></pre></td></tr></table></figure><p>デスクトップGUI時代によく用いられていたテンプレートメソッドのように、固定の名前だけを許す場合にはクラスでも可能です。ReactやVue.jsのクラス方式のコンポーネントのライフサイクルメソッドはそれですね。しかし、各メソッドのシグニチャを強制することまではできません。reducersのように、任意のキーで定義を増やせるようなものは「関数を値に持つオブジェクト」にせざるをえないかな、と思います。</p><p>なお、JavaScriptユーザーを完全に無視するなら、別の方法もあります。AngularがDIを実現するのにつかっている（と思う）のが、tsconfigの<code>emitDecoratorMetadata</code>というオプションです。このオプションの裏では<a href="https://www.npmjs.com/package/reflect-metadata" target="_blank" rel="noopener">reflect-metadata</a>というパッケージが使われていて、型情報を動的に取得してさまざまなことを実現します。ただし、このメタデータを使った動的なロジックはエディタの補完やコーディング時のチェックはしてくれないので、型情報と推論を使った方がユーザービリティは高い気がします。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>TypeScriptの型というと、エラーチェック、ミスの削減、みたいな論調で語られることが99%ですが、使う人にとって使いやすいAPIというのを新しく作り出せるのではないか、ということで思考実験してみました。</p><p>JavaScript時代は型がなかったので、次のような設計もよく作られていました。あとはjQueryとかですね。その手の設計はJavaScript時代にはよかったかもしれませんが、TypeScript時代にはまた別の設計が必要と思っています。もちろん、↓のような型定義もできて、文字列の名前によってイベントハンドラの引数のEventの型が変わったり、返り値の型が変わったり（<code>createElement</code>のように）とか、その手の厳しい要件にも適合するようにTypeScriptでは機能を持っていたりもしますが（オライリーのプログラミングTypeScriptのP65あたり）、それはあくまでも過去と現在をつなげるためのものであって、未来に使う文法ではないと思うのですよね。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.on(<span class="string">"イベント名"</span>, イベントハンドラ)</span><br></pre></td></tr></table></figure><p>Vue.js 3も、今までのオブジェクトをダイレクトでコンポーネンントとしていた方向から、defineComponent関数の引数のオブジェクトで定義となりました。ベータ版のvue-cliだと、もともとTSとの相性が悪くなかったクラスの方がデフォルトになっており（選択肢がクラスベースのフォーマットを使うか(Y/n)となっており、エンター連打だとこちらではなく、クラスの方になる)、こちらがどれだけ普及するかは分からないですが、これもTypeScriptによりそった設計変更なんじゃないですかね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defineComponent(&#123;</span><br><span class="line">   <span class="comment">// ここなら補完やチェックがきく！</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JavaScript===TypeScriptが吐き出す物、フロントエンド開発者はTypeScriptしか書かないという時代にあわせたAPIデザインについて、一緒に考えていきましょう。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200730/top.png&quot;&gt;


&lt;p&gt;TypeScriptは、JavaScriptのさまざまなフリーダムな書き方を受け入れ、漸進的な型付けを行えるようにするという&lt;del&gt;狂った&lt;/del&gt;高難易度な目的のために作成されているのですが
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>AWS認定 Machine learning specialty 合格記</title>
    <link href="https://future-architect.github.io/articles/20200729/"/>
    <id>https://future-architect.github.io/articles/20200729/</id>
    <published>2020-07-28T15:00:00.000Z</published>
    <updated>2020-07-31T04:56:13.051Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>先日もう一人の伊藤さんが<a href="https://future-architect.github.io/articles/20200629/">Terraform Associate合格記</a>を書いてくれました。この記事に続いて資格の記事を書いてみようと思います。余談ですがこちらの伊藤さんとの区別がつくように自己紹介はフルネームで書いています。</p><p>私はAWSの資格を4つほど持っているのですが、今回は<a href="https://aws.amazon.com/jp/certification/certified-machine-learning-specialty/" target="_blank" rel="noopener">AWS認定 機械学習 - 専門知識</a>について紹介します。ちなみに機械学習の資格は実務経験0から2カ月ほど学習して合格しました。</p><p>前提知識0の人も対象になるような記事を目指して記載します。</p><img src="/images/20200729/badge.png" class="img-small-size"><h1 id="この記事の目的"><a href="#この記事の目的" class="headerlink" title="この記事の目的"></a>この記事の目的</h1><p>AWS認定試験で要求される知識、学習法についてまとめます。<br>大まかな概要、各分野の具体的な内容を記載していきます。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ol><li>AWS 認定 機械学習 – 専門知識とは</li><li>要求される知識</li><li>学習方法について</li><li>まとめ</li></ol><p><a id="anchor1"></a></p><h1 id="AWS-認定-機械学習-–-専門知識とは"><a href="#AWS-認定-機械学習-–-専門知識とは" class="headerlink" title="AWS 認定 機械学習 – 専門知識とは"></a>AWS 認定 機械学習 – 専門知識とは</h1><p>その名の通り、AI開発、データサイエンスを業務で行う人向けの資格試験です。<br>AWSの認定試験の中では珍しく、AWSのサービスに特化した試験ではなく機械学習の基礎知識も要求される点が特徴です。<br><a id="anchor2"></a></p><h1 id="要求される知識"><a href="#要求される知識" class="headerlink" title="要求される知識"></a>要求される知識</h1><p><a href="https://aws.amazon.com/jp/certification/certified-machine-learning-specialty/" target="_blank" rel="noopener">AWS認定の公式サイト</a>には下記のように書いてあります。</p><blockquote><p>認定によって検証される能力</p><ul><li>与えられたビジネスの問題に対し、適切な ML アプローチを選び、その理由を説明できる</li></ul></blockquote><ul><li>ML ソリューションの実装に適した AWS のサービスを選択する</li><li>スケーラビリティ、コスト効率、信頼性、安全性に優れた ML ソリューションを設計し、実装する</li></ul><blockquote><p>推奨される知識と経験</p><ul><li>AWS クラウドでの ML/深層学習ワークロードの開発、設計、実行における、1～2 年の経験</li></ul></blockquote><ul><li>基本的な ML アルゴリズムの基となる考えを表現する能力</li><li>基本的なハイパーパラメータ最適化の実践経験</li><li>ML および深層学習フレームワークの使用経験</li><li>モデルトレーニングのベストプラクティスを実行する能力</li><li>デプロイと運用のベストプラクティスを実行する能力</li></ul><p>自分の受験経験から要求される知識を下記のカテゴリに分類しました。</p><ul><li>目的に対し最適な機械学習アルゴリズムを選定するための知識</li><li>作成した機械学習モデルの性能を判定するための知識</li><li>データエンジニアリングに関する知識</li><li>分散処理システムの構築などインフラ寄りの知識</li><li>機械学習のAWSマネージドサービスに対する知識</li><li>サービスの構築、運用に関する知識</li></ul><h2 id="目的に対し最適な機械学習アルゴリズムを選定するための知識"><a href="#目的に対し最適な機械学習アルゴリズムを選定するための知識" class="headerlink" title="目的に対し最適な機械学習アルゴリズムを選定するための知識"></a>目的に対し最適な機械学習アルゴリズムを選定するための知識</h2><p>機械学習モデルにはさまざまな学習アルゴリズムが存在します。<br>機械学習を用いて課題を解決するために、目的に対し最適なアルゴリズムの選択を行う知識が要求されます。</p><p>例えば画像分類にはCNN(畳み込みニューラルネットワーク)が、時系列データの取り扱いにはRNN(再帰型ニューラルネットワーク)を選定できるような知識です。</p><p>言語処理に特化したアルゴリズム、音声処理における最適解など、目的から手段を導き出すためにはこれらのアルゴリズムがどのような分野を得意とするかを学ぶ必要があります。線形学習やロジスティック回帰など基礎的なアルゴリズムや、CNN、RNNの特徴、tf-idfなどの一般的な知識を理解できている事が要求されます。特に、<a href="https://aws.amazon.com/jp/sagemaker/" target="_blank" rel="noopener">Amazon SageMaker</a>で提供される組み込みアルゴリズムの概要を理解して、各アルゴリズムの特徴を理解する必要があります。</p><p>アルゴリズムの種類、概要は<a href="https://docs.aws.amazon.com/ja_jp/sagemaker/latest/dg/algos.html" target="_blank" rel="noopener">Amazon SageMakerのドキュメント</a>に記載されています。</p><p>例えば、ニュースの記事と要約のデータセットを学習させ、ニュース記事から要約を自動生成したい、というユースケースが出題され、4択程度のSageMaker組み込みアルゴリズムが選択肢として用意されます。<br>その中からSequence to Sequenceなどを選べるようになることが目的です。<br>例題</p><blockquote><p>カスタマーサポートのシステム構築を行っています。<br>お問い合わせの内容の類似性に基づいて、重複する質問を特定したいと考えています。<br>この問題の解決にどのSageMakerアルゴリズムが利用できますか。<br>A: BlazingText<br>B: Object2Vec<br>C: K-means<br>D: DeepAR</p></blockquote><blockquote><p>正解: B</p></blockquote><h2 id="作成した機械学習モデルの性能を判定するための知識"><a href="#作成した機械学習モデルの性能を判定するための知識" class="headerlink" title="作成した機械学習モデルの性能を判定するための知識"></a>作成した機械学習モデルの性能を判定するための知識</h2><p>機械学習モデルの性能を示す指標として、正確度（accuracy）、精度（precision）、再現率（recall）といった概念が存在します。少し高度なものではAUC、ROCなどの指標があります。</p><p>これらの指標や、指標の測定で用いるパラメータであるTP、FP、TN、FN(真陽性、偽陽性、真陰性、偽陰性)について理解することが求められます。TP、FP、TN、FNがテーブル形式でまとめられた表から精度を計算するような問題も出題されることがあります。（数字としてはその場で電卓を使わずに計算できるようなものです。）</p><p>また、構築したいソリューションにおいてどの指標が重要視されるのかを理解する必要があります。例えばスパムメールを検知する機械学習モデルにおいて最も重要視される指標は正確度、精度、再現率のうちどれかを答えるような問題が出題されます。</p><p>例題</p><blockquote><p>サブスクリプションサービスを提供するA社では、顧客の解約を防ぐため、顧客が解約する可能性があるかどうかを予測するモデルを2つ構築しました。<br>モデルAは、100の偽陰性（FN）と40の偽陽性（FP）で92％の精度です。<br>モデルBは、40のFNと100のFPで92％の精度でした。<br>2つのモデルのどちらがA社にとってコスト効果が高いでしょうか。</p><p>正解: モデルB</p></blockquote><h2 id="機械学習モデルの性能向上に関する知識"><a href="#機械学習モデルの性能向上に関する知識" class="headerlink" title="機械学習モデルの性能向上に関する知識"></a>機械学習モデルの性能向上に関する知識</h2><p>機械学習モデルの構築では、期待した性能のモデルを構築できない場合にその原因を推測する必要があります。</p><ul><li>機械学習モデルが過学習の状態に陥った際にデータにどのような前処理を施すか。</li><li>充分な数の学習データが集まっていない場合にどのような手段で性能の高い機械学習モデルを構築するか</li></ul><p>といったトピックに対する問題が出題されます。</p><p>正規化、正則化、データの水増し、箱ひげ図の読み取り方、学習率などハイパーパラメータの調整といった機械学習の知識が求められます。</p><p>例題</p><blockquote><p>作成した機械学習モデルが、トレーニングデータでは高精度であるが、テストデータに対して低精度であることに気付きました。<br>この問題の解決が見込める手法はどれでしょうか。<br>A: データの正則化処理を削除する<br>B: 使用するトレーニングデータを少なくする<br>C: データから利用する特徴量を減らす</p></blockquote><blockquote><p>正解: C</p></blockquote><h2 id="分散処理システムの構築などインフラ寄りの知識"><a href="#分散処理システムの構築などインフラ寄りの知識" class="headerlink" title="分散処理システムの構築などインフラ寄りの知識"></a>分散処理システムの構築などインフラ寄りの知識</h2><p>機械学習での分散処理システムに関する知識とは、<code>Apache</code>の<code>Hadoop</code>,<code>Hive</code>, <code>Spark</code>といった分散処理フレームワークに対する理解と換言する事ができます。</p><p>AWSのマネージドサービスとしては<code>Amazon EMR</code>、<code>AWS Glue</code>について理解していることが要求されます。またそれらのサービスと連携する<code>Amazon Athena</code>、<code>Amazon Kinesis</code>についての知識や、データウェアハウスとして<code>Amazon Redshift</code>、機械学習における<code>Amazon S3</code>の使用例が出題範囲に含まれます。</p><p>これらのサービスは実体験無しで各サービスの違いや挙動を理解するのがとても難しい分野ですが、出題されたユースケースに対し、どのようなサービスの組み合わせが最適か考えるような問題が出題されます。</p><p>例題:</p><blockquote><p>ソーシャルゲームの運用で、JSON形式の利用分析データを取り込むシステムの構築を行います。基盤となるインフラストラクチャを管理することを望んでおらず、データをすぐに利用できるようにしたいと考えています。ソリューションはコスト効率が高く、スケーラブルでなければなりません。どのようなソリューションが推奨されますか。</p></blockquote><blockquote><p>A:<br>Kinesis Data Streamsを使用してデータを取り込み、Lambda関数を使用してストリームをS3に保存します。<br>15分ごとにGlue ETLジョブを起動して、データをJSONからParquet形式に変換します。<br>AWS Glueクローラーを使用して、データをAthenaテーブルに読み込みます。</p></blockquote><blockquote><p>B:<br>S3への書き込み中にデータをParquet形式に変換する設定でKinesis Firehoseを使用してデータを取り込みます。<br>AWS Glueクローラーを使用して、データをAthenaテーブルに読み込みます。</p></blockquote><blockquote><p>正解: B</p></blockquote><h2 id="機械学習のAWSマネージドサービスに対する知識"><a href="#機械学習のAWSマネージドサービスに対する知識" class="headerlink" title="機械学習のAWSマネージドサービスに対する知識"></a>機械学習のAWSマネージドサービスに対する知識</h2><p><code>Amazon Sage Maker</code>、<code>Amazon EMR</code>などのマネージドサービスの詳細な利用方法について出題されることもあります。また、機械学習のノウハウがほとんど無い状態からでも機械学習サービスが提供可能になるような、マネージドな側面が極めて高いサービスに関する問題も出題されます。</p><p>テキスト分析に用いる<code>AMAZON COMPREHEND</code>、音声を文字起こしできる<code>AMAZON TRANSCRIBE</code>、時系列データの予測を行う<code>AMAZON FORECAST</code>…といった類のサービスです。<a href="https://aws.amazon.com/jp/machine-learning/" target="_blank" rel="noopener">aws公式サイト「AWS での機械学習」</a>のAI サービス一覧で紹介されています。<br>各サービスの概要、ユースケースを把握し、適切に選択できるように、また存在しないサービスがブラフとして選択肢に出現しても騙されないようしっかりと理解しておく必要があります。</p><p>概要レベルではなく、例えば<code>Amazon Transcribe</code>が対応している言語を把握しておき、非対応の言語の場合<code>Amazon Translate</code>で翻訳してから<code>Amazon Transcribe</code>にデータを受け渡すようなサービス構築が正解となるような深い理解が要求される問題も出題されます。<br>これらのサービスは日々新しいものが増え、既存のサービスも機能が追加されます、入念なキャッチアップが必要なジャンルです。</p><p>例題:</p><blockquote><p>顔写真から有名人を検出できるアプリを作成したいと考えています。<br>最小限の労力でこれをセットアップするのに役立つAWSサービスはどれですか。<br>A: Amazon Predict<br>B: Amazon Rekognition<br>C: Amazon Polly<br>D: Amazon Comprehend</p></blockquote><blockquote><p>正解: B</p></blockquote><h2 id="サービスの構築、運用に関する知識"><a href="#サービスの構築、運用に関する知識" class="headerlink" title="サービスの構築、運用に関する知識"></a>サービスの構築、運用に関する知識</h2><p>機械学習に直結する知識ではありませんが、ビジネスレベルでアプリケーションの構築を行う上でのAWSサービスの知識も問われることがあります。</p><p>具体的にはIAMの設定など、運用面で設定する必要のある項目について出題されます。</p><p>例題</p><blockquote><p>デフォルトのIAMロールを使用してSageMakerノートブックインスタンスを作成しました。S3のデータへのアクセスはどのように管理されますか？<br>A: デフォルトで使用可能なバケットはありません<br>B: 名前に「sagemaker」が含まれるバケットは、デフォルトの役割でアクセスできます<br>C: パブリックアクセスが有効なバケットは、デフォルトの役割でアクセスできます</p></blockquote><blockquote><p>正解: B</p></blockquote><p><a id="anchor3"></a></p><h1 id="学習方法について"><a href="#学習方法について" class="headerlink" title="学習方法について"></a>学習方法について</h1><p>ざっくりと内容を説明しましたが、合格への筋道は見えてきましたでしょうか。<br><code>ソリューションアーキテクト-アソシエイト</code>や<code>クラウドプラクティショナー</code>など、AWSの資格を持っていない方が最初に受ける傾向が高い試験は1冊読んでおけば合格できるような質の高い書籍が存在します。</p><p>しかし機械学習-専門知識は知識が広範かつAWSに特化した内容ではない部分も多く、まだ必要な知識を体系的にまとめた書籍が存在しません。<br>そういった意味でも厳しい試験ですが、参考までに自分が学習に利用した書籍、サービスを紹介します。</p><h2 id="そもそもAIに対する知識が無い人向け"><a href="#そもそもAIに対する知識が無い人向け" class="headerlink" title="そもそもAIに対する知識が無い人向け"></a>そもそもAIに対する知識が無い人向け</h2><p>AIに興味はあるものの実際にAIに触れたことがない、という方もいると思います。その状態から試験問題に特化した知識を詰め込み教育的手法で学ぶのは限界があります。急がば回れ、ということでまずは機械学習の概要から学んでいくと良いと思います。</p><p>AWSの試験に合格するには、Pythonの各種フレームワークを用いたコーディングレベルの知識や、具体的なアルゴリズムの数式についての知識は必要なく、概念的な部分を押さえておけばOKです。回帰、分類、線形分離といった概念から各種アルゴリズムを概念的に大まかに把握しておく程度の学習で、試験に必要な知識を学ぶ上で役に立つと思います。</p><p>前提知識を学ぶために機械学習初心者向けの本を１冊読んでおく事をお勧めします。<br>私は好奇心から<a href="https://www.amazon.co.jp/Python-%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E9%81%94%E4%BA%BA%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%82%B9%E3%83%88%E3%81%AB%E3%82%88%E3%82%8B%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%B7%B5-impress-gear/dp/4295003379/ref=asc_df_4295003379/?tag=jpgo-22&linkCode=df0&hvadid=295678107984&hvpos=&hvnetw=g&hvrand=17590793615228539759&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1009243&hvtargid=pla-524387980046&psc=1&language=ja_JP&th=1&psc=1" target="_blank" rel="noopener">Python 機械学習プログラミング 達人データサイエンティストによる理論と実践</a>という書籍を購入しました。</p><p>試験に対しては過剰なほど詳細に機械学習の概要が書いてあります、正直読むだけで一苦労でした。</p><h2 id="AWSに関する知識を学ぶ方法"><a href="#AWSに関する知識を学ぶ方法" class="headerlink" title="AWSに関する知識を学ぶ方法"></a>AWSに関する知識を学ぶ方法</h2><p>現状機械学習関連のサービスが書籍の形式でまとまっているものはありません。正攻法の手段としては下記のような流れで学習を進めていきます。</p><ul><li><a href="https://docs.aws.amazon.com/index.html" target="_blank" rel="noopener">公式ドキュメント</a>の機械学習のジャンルを読破する</li><li><a href="https://aws.amazon.com/jp/training/learning-paths/machine-learning/exam-preparation/" target="_blank" rel="noopener">機械学習: 試験準備</a>のページに従って学習を進めていく</li></ul><p>愚直に学習する時間の捻出が難しい場合、合格する自信が持てず副教材が必要な場合はudemyなどの学習サイトでカリキュラムや試験問題を購入することをお勧めします。</p><p><a id="anchor4"></a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>この記事が試験勉強の補助となれば、また試験を受けてみようと思っていただけるきっかけになれば幸いです。<br>学習のハードルは高めなので、ソリューションアーキテクトのように１冊の本にまとまる日が来てほしいですね。<br>関連記事としてフューチャー技術ブログの<a href="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</a>、<a href="https://future-architect.github.io/tags/MachineLearning/">Machine Learning</a>タグの記事も是非ご覧ください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;先日もう一人の伊藤さんが&lt;a href=&quot;https://future-architect.github.io/articles/20200629/&quot;&gt;Terraform Associate合格記&lt;/a&gt;を書いてくれました。この記事に続
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>DBスキーマを駆動にした開発のためのライブラリ調査</title>
    <link href="https://future-architect.github.io/articles/20200728/"/>
    <id>https://future-architect.github.io/articles/20200728/</id>
    <published>2020-07-27T15:00:00.000Z</published>
    <updated>2020-07-27T14:48:28.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Goでデータベースを扱う場合、<a href="https://github.com/go-gorm/gorm" target="_blank" rel="noopener">Gorm</a>, <a href="https://github.com/go-gorp/gorp" target="_blank" rel="noopener">Gorp</a>, <a href="https://github.com/jmoiron/sqlx" target="_blank" rel="noopener">sqlx</a> といった ORM がよく使われます。多くの場合は構造体のフィールドとデータベースのカラム名のマッピングをするタグ付きの構造体を実装します。例えば <code>Gorm</code> を用いて <code>users</code> テーブルにアクセスする場合、以下のような構造体が一例として考えられます。</p><figure class="highlight go"><figcaption><span>model_user.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">UserID    <span class="keyword">string</span>       <span class="string">`gorm:"column:user_id;primary_key"`</span></span><br><span class="line">UserName  <span class="keyword">string</span>       <span class="string">`gorm:"column:user_name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"users"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Gorm</code> や <code>Xorm</code> といった ORM を用いる場合、スキーマから構造体を生成できず、構造体の生成が面倒という問題があります。複数人で開発していたり、テーブルのカラム数が多かったり、テーブルの数が多い場合、スキーマから構造体を自動生成できるとよいな、と考えることでしょう。 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>また、当社のメンバと開発するとき SQL が書け適切に index を貼ったり、実行計画からチューニングできるメンバが多いです。素の SQL を書く or 書きたいケースが多く、メソッドチェーンでクエリを生成する <code>Gorm</code> などの ORM と相性が悪いと感じていました。</p><ul><li><strong>スキーマからテーブルのカラムとマッピングできる構造体を自動生成したい</strong></li><li><strong>任意のクエリから結果セットのカラムとマッピングできる構造体を自動生成したい</strong></li></ul><p>上記を満たすようなライブラリを探しつつ、今回は既に存在するデータベースのスキーマやクエリから構造体を生成することができる <code>xo</code> と <code>gen</code> を調査してみました。</p><ul><li><a href="https://github.com/xo/xo" target="_blank" rel="noopener">xo/xo</a></li><li><a href="https://github.com/smallnest/gen" target="_blank" rel="noopener">gen</a></li></ul><p><a href="https://github.com/volatiletech/sqlboiler" target="_blank" rel="noopener">SQLBoiler</a> や <a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">Xorm</a> は ORM として使われることが多いので対象から外しました。<code>SQLBoiler</code> や <code>Xorm</code> の所感は <a href="https://future-architect.github.io/articles/20190926/">Go言語のDBレイヤーライブラリの評価</a> の記事に記載しておりますので、あわせてご確認ください。</p><h2 id="概要サマリ"><a href="#概要サマリ" class="headerlink" title="概要サマリ"></a>概要サマリ</h2><p>今回調査するライブラリの2020/07/12時点のデータをもとにした概要サマリです。どちらのライブラリも継続的にメンテナンスされています。</p><table><thead><tr><th>Project Name</th><th>Stars</th><th>Forks</th><th>Open Issues</th><th>Description</th><th>Last Update</th></tr></thead><tbody><tr><td><a href="https://github.com/xo/xo" target="_blank" rel="noopener">xo</a></td><td>2503</td><td>224</td><td>91</td><td>Command line tool to generate idiomatic Go code for SQL databases supporting PostgreSQL, MySQL, SQLite, Oracle, and Microsoft SQL Server</td><td>2020-07-10 11:12:42</td></tr><tr><td><a href="https://github.com/smallnest/gen" target="_blank" rel="noopener">gen</a></td><td>565</td><td>105</td><td>3</td><td>Converts a database into gorm structs and RESTful api</td><td>2020-07-10 14:19:19</td></tr></tbody></table><ul><li>バージョン</li></ul><p>今回調査したバージョン情報は以下になります。<code>xo</code> はセマンティクスバージョニングされていなかったため、コミット ID を記載しています。</p><table><thead><tr><th>ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td><code>xo</code></td><td><code>7818603ff52bc0b96122715f9c7df7559aeef82d</code></td></tr><tr><td><code>gen</code></td><td><code>v0.9.24</code></td></tr></tbody></table><h2 id="サンプルプロジェクト"><a href="#サンプルプロジェクト" class="headerlink" title="サンプルプロジェクト"></a>サンプルプロジェクト</h2><p>本記事では <code>xo</code> のライブラリにサンプルとして記載されている <code>booktest</code> をサンプルのプロジェクトとして考えてみます。データベースは PostgreSQL を採用することとし、Docker を用いて以下のようにローカルに起動させておきます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --name my-postgres -e POSTGRES_USER&#x3D;booktest -e POSTGRES_PASSWORD&#x3D;pass -e POSTGRES_DB&#x3D;testdb -d -p 15432:5432 postgres</span><br></pre></td></tr></table></figure><p>データベースの ER 図は以下のようになります。</p><p><img src="/images/20200728/erd.png" alt=""></p><p>スキーマを作成する SQL は以下になります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- The MIT License (MIT)</span></span><br><span class="line"><span class="comment">-- </span></span><br><span class="line"><span class="comment">-- Copyright (c) 2015-2016 Kenneth Shaw</span></span><br><span class="line"><span class="comment">-- </span></span><br><span class="line"><span class="comment">-- https://github.com/xo/xo/blob/master/LICENSE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> booktest <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> books <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TYPE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> book_type <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">authors</span> <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> say_hello(<span class="built_in">text</span>) <span class="keyword">CASCADE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> booktest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">authors</span> (</span><br><span class="line">  author_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> authors_name_idx <span class="keyword">ON</span> <span class="keyword">authors</span>(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> book_type <span class="keyword">AS</span> ENUM (</span><br><span class="line">  <span class="string">'FICTION'</span>,</span><br><span class="line">  <span class="string">'NONFICTION'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books (</span><br><span class="line">  book_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  author_id <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">REFERENCES</span> <span class="keyword">authors</span>(author_id),</span><br><span class="line">  isbn <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  booktype book_type <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'FICTION'</span>,</span><br><span class="line">  title <span class="built_in">text</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="keyword">year</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">2000</span>,</span><br><span class="line">  available <span class="built_in">timestamp</span> <span class="keyword">with</span> <span class="built_in">time</span> zone <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'NOW()'</span>,</span><br><span class="line">  tags <span class="built_in">varchar</span>[] <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'&#123;&#125;'</span>,</span><br><span class="line">  memo <span class="built_in">text</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> books_title_idx <span class="keyword">ON</span> books(title, <span class="keyword">year</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> say_hello(<span class="built_in">text</span>) <span class="keyword">RETURNS</span> <span class="built_in">text</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">RETURN</span> <span class="keyword">CONCAT</span>(<span class="string">'hello '</span>, $<span class="number">1</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> books_title_lower_idx <span class="keyword">ON</span> books(title);</span><br></pre></td></tr></table></figure><h2 id="xo"><a href="#xo" class="headerlink" title="xo"></a>xo</h2><p><code>xo</code> はデータベースのスキーマや任意の SQL からデータベースにアクセスする Go のコードを生成するライブラリです。生成するコードはテンプレートファイルを使って柔軟にカスタマイズできます。ORM を目指したライブラリではなく、静的に型付けされた Go らしいコードを生成することを目的の 1 つとしています。</p><p>まずは <code>xo</code> を試してみます。ディレクトリ構成は以下です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.mod</span><br><span class="line">├── main.go</span><br><span class="line">└── generated</span><br></pre></td></tr></table></figure><p>さっそく <code>xo</code> をインストールします。2020/07/13現在、セマンティクスバージョニングはされていないため、master ブランチの最新のコミット(<code>7818603ff52bc0b96122715f9c7df7559aeef82d</code>) を用います。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com&#x2F;xo&#x2F;xo</span><br></pre></td></tr></table></figure><p>生成先のディレクトリ名は <code>generated</code> とします。<code>xo</code> コマンドを用いて、構造体を生成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xo pgsql:&#x2F;&#x2F;booktest:pass@localhost:15432&#x2F;testdb?sslmode&#x3D;disable --schema booktest --out generated</span><br></pre></td></tr></table></figure><p><code>generated</code> ディレクトリ配下にいくつかファイルが生成されました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── generated</span><br><span class="line">│   ├── author.xo.go</span><br><span class="line">│   ├── book.xo.go</span><br><span class="line">│   ├── booktype.xo.go</span><br><span class="line">│   ├── sp_sayhello.xo.go</span><br><span class="line">│   └── xo_db.xo.go</span><br><span class="line">├── go.mod</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p>生成されたファイル <code>author.xo.go</code> を確認します。ファイルの構成は、大きく SELECT を扱うクエリ用の関数と、それ以外の INSERT, UPDATE, DELETE といったクエリを扱うメソッドと 2 種類に大別できます。</p><h3 id="SELECT系"><a href="#SELECT系" class="headerlink" title="SELECT系"></a>SELECT系</h3><p>SELECT を扱うクエリでは以下の 2 つの関数が生成されています。</p><ul><li><code>AuthorsByName(db XODB, name string) ([]*Author, error)</code> </li><li><code>AuthorByAuthorID(db XODB, authorID int) (*Author, error)</code></li></ul><p>それぞれ関数のドキュメントからデータベースに貼られた index をもとに生成されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AuthorsByName retrieves a row from 'booktest.authors' as a Author.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from index 'authors_name_idx'.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorsByName</span><span class="params">(db XODB, name <span class="keyword">string</span>)</span> <span class="params">([]*Author, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AuthorByAuthorID retrieves a row from 'booktest.authors' as a Author.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from index 'authors_pkey'.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorByAuthorID</span><span class="params">(db XODB, authorID <span class="keyword">int</span>)</span> <span class="params">(*Author, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>関数内に SQL が明示的に記述されていて安心感があります。また index から生成されているので、概ねクエリは高速に動作するでしょう。ただし関数のシグネチャや、データベースアクセスするメソッドのシグネチャから分かるように <code>Context</code> を引数に受け取ることができません。多くのケースでは <code>Context</code> を引き回すケースが一般的ですので、Context 対応はテンプレートなどを用いて拡張する必要がありそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AuthorByAuthorID retrieves a row from 'booktest.authors' as a Author.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Generated from index 'authors_pkey'.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorByAuthorID</span><span class="params">(db XODB, authorID <span class="keyword">int</span>)</span> <span class="params">(*Author, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql query</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`SELECT `</span> +</span><br><span class="line"><span class="string">`author_id, name `</span> +</span><br><span class="line"><span class="string">`FROM booktest.authors `</span> +</span><br><span class="line"><span class="string">`WHERE author_id = $1`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run query</span></span><br><span class="line">XOLog(sqlstr, authorID)</span><br><span class="line">a := Author&#123;</span><br><span class="line">_exists: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = db.QueryRow(sqlstr, authorID).Scan(&amp;a.AuthorID, &amp;a.Name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;a, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="INSERT-UPDATE-DELETE系"><a href="#INSERT-UPDATE-DELETE系" class="headerlink" title="INSERT/UPDATE/DELETE系"></a>INSERT/UPDATE/DELETE系</h3><p>INSERT のクエリも SELECT と同様に、INSERT するメソッドが生成されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Author represents a row from 'booktest.authors'.</span></span><br><span class="line"><span class="keyword">type</span> Author <span class="keyword">struct</span> &#123;</span><br><span class="line">AuthorID <span class="keyword">int</span>    <span class="string">`json:"author_id"`</span> <span class="comment">// author_id</span></span><br><span class="line">Name     <span class="keyword">string</span> <span class="string">`json:"name"`</span>      <span class="comment">// name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// xo fields</span></span><br><span class="line">_exists, _deleted <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert inserts the Author to the database.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Author)</span> <span class="title">Insert</span><span class="params">(db XODB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// if already exist, bail</span></span><br><span class="line"><span class="keyword">if</span> a._exists &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"insert failed: already exists"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql insert query, primary key provided by sequence</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`INSERT INTO booktest.authors (`</span> +</span><br><span class="line"><span class="string">`name`</span> +</span><br><span class="line"><span class="string">`) VALUES (`</span> +</span><br><span class="line"><span class="string">`$1`</span> +</span><br><span class="line"><span class="string">`) RETURNING author_id`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run query</span></span><br><span class="line">XOLog(sqlstr, a.Name)</span><br><span class="line">err = db.QueryRow(sqlstr, a.Name).Scan(&amp;a.AuthorID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set existence</span></span><br><span class="line">a._exists = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UPDATE, UPSERT, DELETE 用のメソッドも生成されます。本記事では割愛します。</p><h3 id="その他特徴"><a href="#その他特徴" class="headerlink" title="その他特徴"></a>その他特徴</h3><p><code>xo</code> で特徴的な機能は、任意のクエリをもとに構造体を生成できる点です。<code>books</code> テーブルと <code>authors</code> テーブルを JOIN して <code>books</code> の <code>title</code> で文字列検索するクエリの例を考えてみます。以下は <code>xo</code> のコマンド例です。SQL を記述して構造体を生成できます。オプションの詳細は <a href="https://github.com/xo/xo/blob/master/README.md#command-line-options" target="_blank" rel="noopener">README.md</a> を参照ください。 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xo pgsql://booktest:pass@localhost:15432/testdb?sslmode=<span class="built_in">disable</span> -N -M -B -T AuthorBookResult --query-type-comment=<span class="string">'AuthorBookResult is the result of a search.'</span> -o generated &lt;&lt; ENDSQL</span><br><span class="line">SELECT</span><br><span class="line">  a.author_id AS author_id,</span><br><span class="line">  a.name AS author_name,</span><br><span class="line">  b.book_id AS book_id,</span><br><span class="line">  b.isbn AS book_isbn,</span><br><span class="line">  b.title AS book_title,</span><br><span class="line">  b.tags AS book_tags,</span><br><span class="line">  b.memo AS book_memo</span><br><span class="line">FROM books b</span><br><span class="line">JOIN authors a ON a.author_id = b.author_id</span><br><span class="line">WHERE b.title LIKE %%title string%%</span><br><span class="line">ENDSQL</span><br></pre></td></tr></table></figure><p>コマンドを実装すると <code>authorbookresult.xo.go</code> というファイルが生成されます。以下のようにコマンドに記述したクエリとデータベースから取得するカラムのレコードを保持する構造体が生成されます。SQL にパラメータとして渡す変数の型は、<code>xo</code> のコマンドに記述する SQL の内に <code>int</code>, <code>string</code> などとして明示的に記述する必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package generated contains the types for schema 'public'.</span></span><br><span class="line"><span class="keyword">package</span> generated</span><br><span class="line"></span><br><span class="line"><span class="comment">// Code generated by xo. DO NOT EDIT.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AuthorBookResult is the result of a search.</span></span><br><span class="line"><span class="keyword">type</span> AuthorBookResult <span class="keyword">struct</span> &#123;</span><br><span class="line">AuthorID   <span class="keyword">int</span>         <span class="comment">// author_id</span></span><br><span class="line">AuthorName <span class="keyword">string</span>      <span class="comment">// author_name</span></span><br><span class="line">BookID     <span class="keyword">int</span>         <span class="comment">// book_id</span></span><br><span class="line">BookIsbn   <span class="keyword">string</span>      <span class="comment">// book_isbn</span></span><br><span class="line">BookTitle  <span class="keyword">string</span>      <span class="comment">// book_title</span></span><br><span class="line">BookTags   StringSlice <span class="comment">// book_tags</span></span><br><span class="line">BookMemo   <span class="keyword">string</span>      <span class="comment">// book_memo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AuthorBookResultsByTitle runs a custom query, returning results as AuthorBookResult.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AuthorBookResultsByTitle</span><span class="params">(db XODB, title <span class="keyword">string</span>)</span> <span class="params">([]*AuthorBookResult, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql query</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`SELECT `</span> +</span><br><span class="line"><span class="string">`a.author_id AS author_id, `</span> +</span><br><span class="line"><span class="string">`a.name AS author_name, `</span> +</span><br><span class="line"><span class="string">`b.book_id AS book_id, `</span> +</span><br><span class="line"><span class="string">`b.isbn AS book_isbn, `</span> +</span><br><span class="line"><span class="string">`b.title AS book_title, `</span> +</span><br><span class="line"><span class="string">`b.tags AS book_tags, `</span> +</span><br><span class="line"><span class="string">`b.memo AS book_memo `</span> +</span><br><span class="line"><span class="string">`FROM books b `</span> +</span><br><span class="line"><span class="string">`JOIN authors a ON a.author_id = b.author_id `</span> +</span><br><span class="line"><span class="string">`WHERE b.title LIKE $1`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run query</span></span><br><span class="line">XOLog(sqlstr, title)</span><br><span class="line">q, err := db.Query(sqlstr, title)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> q.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// load results</span></span><br><span class="line">res := []*AuthorBookResult&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> q.Next() &#123;</span><br><span class="line">abr := AuthorBookResult&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// scan</span></span><br><span class="line">err = q.Scan(&amp;abr.AuthorID, &amp;abr.AuthorName, &amp;abr.BookID, &amp;abr.BookIsbn, &amp;abr.BookTitle, &amp;abr.BookTags, &amp;abr.BookMemo)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">append</span>(res, &amp;abr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>余談ですが、カスタム SQL から構造体を生成する場合、<code>-- hogehoge</code> というコメントの記述はできません。生成される SQL が壊れます。以下のように、実行時のログを以下のようにして出力すると明らかです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generated.XOLog = log.Printf</span><br></pre></td></tr></table></figure><ul><li>実行結果例</li></ul><p>文字列結合した SQL ですが、<code>--</code> によって意図しない範囲の記述までコメントアウトされてしまいます。<code>/* hogehoge */</code> とコメントを記述すれば OK です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020/07/14 21:59:00 SELECT a.author_id AS author_id, a.name AS author_name, b.book_id AS book_id, b.isbn AS book_isbn, b.title AS book_title, b.tags AS book_tags, -- memo is memo b.memo AS book_memo FROM books b JOIN authors a ON a.author_id = b.author_id WHERE</span><br><span class="line"> b.title LIKE <span class="variable">$1</span>%!(EXTRA string=hoge)</span><br></pre></td></tr></table></figure><h3 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h3><ul><li>Good<ul><li>SQL が文字列として明示されていて、どのようなクエリが発行されるか分かる</li><li>クエリを扱う関数やメソッドが扱う型を明示していて扱いやすい</li></ul></li><li>Bad<ul><li>デフォルトで生成されたクエリは Context を扱うことができず、<code>Context</code> を使う場合、テンプレートの実装が必要</li><li>生成されたクエリを <code>psql</code> などで接続してコンソールから直接実行したい場合、文字列結合されたクエリを連結させる必要があり手間</li><li>カスタムクエリでパラメータを使う場合、独自の記述方法が必要。またパラメータ内に Go の型を埋め込む必要があり、煩雑</li><li>カスタムクエリを使う場合、SQL にコメント <code>-- hogehoge</code> が記載されていると、生成されるクエリが壊れる</li></ul></li></ul><h2 id="gen"><a href="#gen" class="headerlink" title="gen"></a>gen</h2><p>続いて <code>gen</code> です。<code>gen</code> はデータベースのスキーマメタデータをもとにしてデータベース(特に <code>Gorm</code>)とマッピング可能な構造体のコードを生成できます。</p><p><code>gen</code> をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/smallnest/gen@v0.9.24</span><br></pre></td></tr></table></figure><p>プロジェクト構成は <code>xo</code> を試したときと同様に以下のようにしておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.mod</span><br><span class="line">├── main.go</span><br><span class="line">└── generated</span><br></pre></td></tr></table></figure><p><code>gen</code> コマンドで構造体を生成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gen --connstr=<span class="string">"host=localhost port=15432 user=booktest password=pass dbname=testdb sslmode=disable"</span> --out generated --sqltype postgres --database testdb --no-json --overwrite</span><br><span class="line">table: books unable to generate struct field: tags <span class="built_in">type</span>: _VARCHAR error: unknown sql <span class="built_in">type</span>: _varchar</span><br><span class="line">Generating code <span class="keyword">for</span> the following tables (2)</span><br><span class="line">[0] authors</span><br><span class="line">[1] books</span><br></pre></td></tr></table></figure><p><code>generated</code> ディレクトリ配下に <code>model</code> というディレクトリが生成され、ディレクトリの中に <code>authors.go</code>、<code>books.go</code> と <code>model_base.go</code> という 3 つのファイルが生成されました。<code>books</code> テーブルの <code>tags</code> カラムのデータ型は <code>varchar[]</code> 型でしたが、<code>gen</code> で生成するとエラーになり、生成された構造体にはフィールドが存在しませんでした。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── generated</span><br><span class="line">│   └── model</span><br><span class="line">│       ├── authors.go</span><br><span class="line">│       ├── books.go</span><br><span class="line">│       └── model_base.go</span><br><span class="line">├── go.mod</span><br><span class="line">└── go.sum</span><br></pre></td></tr></table></figure><p><code>gen</code> ではデータベースのデータ型と構造体の型をマッピングする json ファイルを用意し、コマンド実行時にパラメータ <code>--mapping=</code> でファイルを指定することで任意の型のマッピングが可能になります。お手軽かつ柔軟にカスタマイズできる点は非常に良いと感じています。カラムが NULL を許容するかどうかで NULL を扱える型が生成できる点も嬉しいポイントです。ただし <a href="https://github.com/smallnest/gen/blob/v0.9.24/template/mapping.json" target="_blank" rel="noopener">mapping.json</a> をローカルにダウンロードし、以下のマッピング情報を追加して <code>gen</code> コマンドを実行時にファイルを指定しても</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sql_type"</span>: <span class="string">"varchar[]"</span>,</span><br><span class="line">  <span class="attr">"go_type"</span>: <span class="string">"[]string"</span>,</span><br><span class="line">  <span class="attr">"json_type"</span>: <span class="string">"Text"</span>,</span><br><span class="line">  <span class="attr">"protobuf_type"</span>: <span class="string">"[]string"</span>,</span><br><span class="line">  <span class="attr">"guregu_type"</span>: <span class="string">"null.String"</span>,</span><br><span class="line">  <span class="attr">"go_nullable_type"</span>: <span class="string">"[]sql.NullString"</span>,</span><br><span class="line">  <span class="attr">"swagger_type"</span>: <span class="string">"string"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>table: books unable to generate struct field: tags type: _VARCHAR error: unknown sql type: _varchar</code> というエラーは出力されてしまい、フィールドは生成されませんでした。謎のハックですが、エラーメッセージを確認し、以下のように <code>_varchar</code> 型とするとうまく生成できます。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line"><span class="deletion">-     "sql_type": "varchar[]",</span></span><br><span class="line"><span class="addition">+     "sql_type": "_varchar",</span></span><br><span class="line">      "go_type": "[]string",</span><br><span class="line">      "json_type": "Text",</span><br><span class="line">      "protobuf_type": "[]string",</span><br><span class="line">      "guregu_type": "null.String",</span><br><span class="line">      "go_nullable_type": "[]sql.NullString",</span><br><span class="line">      "swagger_type": "string"</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>さて <code>books.go</code> は以下のようなファイルです。デフォルトだと <code>guregu/null</code> や <code>satori/go.uuid</code> といったモジュールを要求されます。テンプレートで拡張の余地がありそうです。</p><figure class="highlight go"><figcaption><span>books.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/guregu/null"</span></span><br><span class="line"><span class="string">"github.com/satori/go.uuid"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">_ = time.Second</span><br><span class="line">_ = sql.LevelDefault</span><br><span class="line">_ = null.Bool&#123;&#125;</span><br><span class="line">_ = uuid.UUID&#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">DB Table Details</span></span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Table: books</span></span><br><span class="line"><span class="comment">[ 0] book_id                                        INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line"><span class="comment">[ 1] author_id                                      INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line"><span class="comment">[ 2] isbn                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line"><span class="comment">[ 3] booktype                                       USER_DEFINED         null: false  primary: false  isArray: false  auto: false  col: USER_DEFINED    len: -1      default: ['FICTION']</span></span><br><span class="line"><span class="comment">[ 4] title                                          TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line"><span class="comment">[ 5] year                                           INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: [2000]</span></span><br><span class="line"><span class="comment">[ 6] available                                      TIMESTAMPTZ          null: false  primary: false  isArray: false  auto: false  col: TIMESTAMPTZ     len: -1      default: ['2020-07-14 00:11:49.494152+00']</span></span><br><span class="line"><span class="comment">[ 7] tags                                           _VARCHAR             null: false  primary: false  isArray: false  auto: false  col: _VARCHAR        len: -1      default: ['&#123;&#125;']</span></span><br><span class="line"><span class="comment">[ 8] memo                                           TEXT                 null: true   primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: []</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JSON Sample</span></span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line"><span class="comment">&#123;    "booktype": 46,    "title": "EBVYCwqfRlayFOFOmrVgcynTE",    "year": 11,    "available": "2272-12-29T02:27:30.083660182+09:00",    "tags": "VHTlEZoMqhtKpSMUrcdhBiUxj",    "book_id": 14,    "author_id": 44,    "isbn": "gxvRbsFhNSFstWgOZBWVeGWvX"&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Books struct is a row record of the books table in the testdb database</span></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//[ 0] book_id                                        INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">BookID <span class="keyword">int32</span></span><br><span class="line"><span class="comment">//[ 1] author_id                                      INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">AuthorID <span class="keyword">int32</span></span><br><span class="line"><span class="comment">//[ 2] isbn                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Isbn <span class="keyword">string</span></span><br><span class="line"><span class="comment">//[ 3] booktype                                       USER_DEFINED         null: false  primary: false  isArray: false  auto: false  col: USER_DEFINED    len: -1      default: ['FICTION']</span></span><br><span class="line">Booktype <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//[ 4] title                                          TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Title <span class="keyword">string</span></span><br><span class="line"><span class="comment">//[ 5] year                                           INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: [2000]</span></span><br><span class="line">Year <span class="keyword">int32</span></span><br><span class="line"><span class="comment">//[ 6] available                                      TIMESTAMPTZ          null: false  primary: false  isArray: false  auto: false  col: TIMESTAMPTZ     len: -1      default: ['2020-07-14 00:11:49.494152+00']</span></span><br><span class="line">Available time.Time</span><br><span class="line"><span class="comment">//[ 8] memo                                           TEXT                 null: true   primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: []</span></span><br><span class="line">Memo sql.NullString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> booksTableInfo = &amp;TableInfo&#123;</span><br><span class="line">Name: <span class="string">"books"</span>,</span><br><span class="line">Columns: []*ColumnInfo&#123;</span><br><span class="line"></span><br><span class="line">&amp;ColumnInfo&#123;</span><br><span class="line">Index:              <span class="number">0</span>,</span><br><span class="line">Name:               <span class="string">"book_id"</span>,</span><br><span class="line">Comment:            <span class="string">``</span>,</span><br><span class="line">Notes:              <span class="string">``</span>,</span><br><span class="line">Nullable:           <span class="literal">false</span>,</span><br><span class="line">DatabaseTypeName:   <span class="string">"INT4"</span>,</span><br><span class="line">DatabaseTypePretty: <span class="string">"INT4"</span>,</span><br><span class="line">IsPrimaryKey:       <span class="literal">true</span>,</span><br><span class="line">IsAutoIncrement:    <span class="literal">false</span>,</span><br><span class="line">IsArray:            <span class="literal">false</span>,</span><br><span class="line">ColumnType:         <span class="string">"INT4"</span>,</span><br><span class="line">ColumnLength:       <span class="number">-1</span>,</span><br><span class="line">GoFieldName:        <span class="string">"BookID"</span>,</span><br><span class="line">GoFieldType:        <span class="string">"int32"</span>,</span><br><span class="line">JSONFieldName:      <span class="string">"book_id"</span>,</span><br><span class="line">ProtobufFieldName:  <span class="string">"book_id"</span>,</span><br><span class="line">ProtobufType:       <span class="string">"int32"</span>,</span><br><span class="line">ProtobufPos:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line">&amp;ColumnInfo&#123;</span><br><span class="line">Index:              <span class="number">8</span>,</span><br><span class="line">Name:               <span class="string">"memo"</span>,</span><br><span class="line">Comment:            <span class="string">``</span>,</span><br><span class="line">Notes:              <span class="string">``</span>,</span><br><span class="line">Nullable:           <span class="literal">true</span>,</span><br><span class="line">DatabaseTypeName:   <span class="string">"TEXT"</span>,</span><br><span class="line">DatabaseTypePretty: <span class="string">"TEXT"</span>,</span><br><span class="line">IsPrimaryKey:       <span class="literal">false</span>,</span><br><span class="line">IsAutoIncrement:    <span class="literal">false</span>,</span><br><span class="line">IsArray:            <span class="literal">false</span>,</span><br><span class="line">ColumnType:         <span class="string">"TEXT"</span>,</span><br><span class="line">ColumnLength:       <span class="number">-1</span>,</span><br><span class="line">GoFieldName:        <span class="string">"Memo"</span>,</span><br><span class="line">GoFieldType:        <span class="string">"sql.NullString"</span>,</span><br><span class="line">JSONFieldName:      <span class="string">"memo"</span>,</span><br><span class="line">ProtobufFieldName:  <span class="string">"memo"</span>,</span><br><span class="line">ProtobufType:       <span class="string">"string"</span>,</span><br><span class="line">ProtobufPos:        <span class="number">9</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TableName sets the insert table name for this struct type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"books"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeforeSave invoked before saving, return an error if field is not populated.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">BeforeSave</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare invoked before saving, can be used to populate fields etc.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">Prepare</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate invoked before performing action, return an error if field is not populated.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">Validate</span><span class="params">(action Action)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TableInfo return table meta data</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Books)</span> <span class="title">TableInfo</span><span class="params">()</span> *<span class="title">TableInfo</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> booksTableInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Gorm</code> を意識したライブラリになっており、<code>gen</code> コマンドに <code>--gorm</code> というパラメータを付与すると生成する構造体に <code>Gorm</code> のタグが付与されます。<code>authors.go</code> ファイルに付与されたタグは以下のようなものです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Authors struct is a row record of the authors table in the testdb database</span></span><br><span class="line"><span class="keyword">type</span> Authors <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//[ 0] author_id                                      INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">AuthorID <span class="keyword">int32</span> <span class="string">`gorm:"primary_key;column:author_id;type:INT4;"`</span></span><br><span class="line"><span class="comment">//[ 1] name                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`gorm:"column:name;type:TEXT;default:'';"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gorm:&quot;primary_key;column:author_id;type:INT4;&quot;</code> といったタグが付与されています。構造体のメソッドとして付与されている <code>TableName()</code> メソッドもおそらく <code>Gorm</code> を意識したものでしょう。以下のような <code>TableName()</code> メソッドを実装すると <code>Gorm</code> のテーブル名として <code>string</code> の文字列が使用されます。以下の場合テーブル名は <code>authors</code> です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TableName sets the insert table name for this struct type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Authors)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"authors"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに <code>Gorm</code> の構造体として生成されるタグですが、外部キーは付与されませんでした。<code>books</code> テーブルにおける <code>author_id</code> は <code>authors</code> の外部キーですが、<code>Gorm</code> の構造体を見ると、外部キーであるタグは付与されていません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Books struct is a row record of the books table in the testdb database</span></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//[ 0] book_id                                        INT4                 null: false  primary: true   isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">BookID <span class="keyword">int32</span> <span class="string">`gorm:"primary_key;column:book_id;type:INT4;"`</span></span><br><span class="line"><span class="comment">//[ 1] author_id                                      INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: []</span></span><br><span class="line">AuthorID <span class="keyword">int32</span> <span class="string">`gorm:"column:author_id;type:INT4;"`</span></span><br><span class="line"><span class="comment">//[ 2] isbn                                           TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Isbn <span class="keyword">string</span> <span class="string">`gorm:"column:isbn;type:TEXT;default:'';"`</span></span><br><span class="line"><span class="comment">//[ 3] booktype                                       USER_DEFINED         null: false  primary: false  isArray: false  auto: false  col: USER_DEFINED    len: -1      default: ['FICTION']</span></span><br><span class="line">Booktype <span class="keyword">interface</span>&#123;&#125; <span class="string">`gorm:"column:booktype;"`</span></span><br><span class="line"><span class="comment">//[ 4] title                                          TEXT                 null: false  primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: ['']</span></span><br><span class="line">Title <span class="keyword">string</span> <span class="string">`gorm:"column:title;type:TEXT;default:'';"`</span></span><br><span class="line"><span class="comment">//[ 5] year                                           INT4                 null: false  primary: false  isArray: false  auto: false  col: INT4            len: -1      default: [2000]</span></span><br><span class="line">Year <span class="keyword">int32</span> <span class="string">`gorm:"column:year;type:INT4;default:2000;"`</span></span><br><span class="line"><span class="comment">//[ 6] available                                      TIMESTAMPTZ          null: false  primary: false  isArray: false  auto: false  col: TIMESTAMPTZ     len: -1      default: ['2020-07-14 00:11:49.494152+00']</span></span><br><span class="line">Available time.Time <span class="string">`gorm:"column:available;type:TIMESTAMPTZ;default:'2020-07-14 00:11:49.494152+00';"`</span></span><br><span class="line"><span class="comment">//[ 8] memo                                           TEXT                 null: true   primary: false  isArray: false  auto: false  col: TEXT            len: -1      default: []</span></span><br><span class="line">Memo sql.NullString <span class="string">`gorm:"column:memo;type:TEXT;"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所感-1"><a href="#所感-1" class="headerlink" title="所感"></a>所感</h3><ul><li>Good<ul><li><code>Gorm</code> や <code>db</code> といった ORM と連携できるタグが付与された構造体を生成できる</li><li>拡張できる点が多く、柔軟にカスタマイズできる</li></ul></li><li>Bad<ul><li>デフォルトだと生成される構造体がやや重厚</li><li><code>varchar[]</code> 型があるテーブルから構造体を生成した場合にエラーが発生するなど、デフォルトでは扱えないデータ型がある</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>スキーマからクエリを扱う関数やメソッド、構造体を生成するライブラリを調査しました</p><p><code>xo</code> は <code>SQLBoiler</code> と同じような系統で、スキーマや SQL をからデータベースアクセス可能な関数やメソッドを生成します。<code>gen</code> はスキーマから構造体を生成するライブラリです。<code>Gorm</code> や <code>sqlx</code> といった ORM などと一緒に使う必要があるでしょう。</p><p>いずれにしてもスキーマから構造体を生成できる点は開発体験として良いと感じています。<code>xo</code> も <code>gen</code> も特徴的で、興味深いライブラリです。ただし、プロジェクトの開発に組み込んでいくにはテンプレートの拡張などいくつか工夫は必要だと感じました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">スキーマを変更した場合、構造体の生成だけでなくマイグレーション管理が必要ですが、本記事ではマイグレーションの話は割愛します。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Goでデータベースを扱う場合、&lt;a href=&quot;https://github.com/go-gorm/gorm&quot; targe
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>GoからAWS KinesisのAggregationFormatを利用する</title>
    <link href="https://future-architect.github.io/articles/20200727/"/>
    <id>https://future-architect.github.io/articles/20200727/</id>
    <published>2020-07-26T15:00:00.000Z</published>
    <updated>2020-07-27T00:25:08.109Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載企画</a>の8回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。ここ数年は産業向けのIoT（例えば工場IoTやモビリティIoT）を行っています。<a href="https://future-architect.github.io/articles/20191023/">工場をハックするための基本知識</a>や<a href="https://future-architect.github.io/articles/20200422/">PyConJP 2019に登壇しました</a> の記事を書いた栗田さんや、<a href="https://future-architect.github.io/articles/20191201/">SORACOM USBドングルの自動接続</a> の記事を書いた棚井さんと同じチームに所属しています。</p><p><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載企画</a> の第8弾目として、Serverlessの代表格であるAWS LambdaでGoを用いてKinesisに対するKPL/KCL相当の処理についてまとめていきます。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某IoTをテーマとした案件で、Kinesisを用いたストリーミングETLなパイプラインを構築するにあたって、下図のようにKinesisの後段はGoとLambdaを採用しました。Kinesisが多段になっているのは、Rawデータと加工済みデータを別システムで利用したかったためです。</p><p><img src="/images/20200727/abstract.png" alt=""></p><p>最初にKinesisにPublishするECSはJavaのKPL（Kinesis Producer Library）を用いており、当然Aggregation Format(後述します)を利用していますが、後続のGoアプリでレコードを <strong>DeAggregation</strong> する処理と、後続のKinesisへの再度レコードを <strong>Aggregation</strong> する方法があまり見当たらなかったので、実装例を残します。</p><p>このエントリーで記載しているコードは以下のリポジトリに記載しています。</p><p><a href="https://github.com/laqiiz/go-kinesis-aggr-example" target="_blank" rel="noopener">https://github.com/laqiiz/go-kinesis-aggr-example</a></p><h1 id="Kineis-Data-Streamとは"><a href="#Kineis-Data-Streamとは" class="headerlink" title="Kineis Data Streamとは"></a>Kineis Data Streamとは</h1><blockquote><p>Amazon Kinesis Data Streams (KDS) は、大規模にスケーラブルで持続的なリアルタイムのデータストリーミングサービスです。(中略) 収集データはミリ秒で入手でき、リアルタイム分析をリアルタイムダッシュボードやリアルタイム異常検知、ダイナミックな価格設定などの事例に利用可能です。<br><a href="https://aws.amazon.com/jp/kinesis/data-streams/" target="_blank" rel="noopener">https://aws.amazon.com/jp/kinesis/data-streams/</a></p></blockquote><p>簡単に言うとAWS上でPub-Subメッセージングを行えるサービスです。Kinesisの文脈ではデータを送信するPublish側をProducer、データを受信するSubscribe側をConsumerと呼びます。SQSとはメッセージを非同期に連携する部分は同じですが、Consumer側をN個配置できるところなどが異なります。</p><h1 id="Kinesis-Record-Aggregation-amp-Deaggregation"><a href="#Kinesis-Record-Aggregation-amp-Deaggregation" class="headerlink" title="Kinesis Record Aggregation &amp; Deaggregation"></a>Kinesis Record Aggregation &amp; Deaggregation</h1><p>KinesisにはRecord Aggregation（レコードの集約）といった考え方があります。</p><p>背景としてKDSへメッセージをProduceするときの課金単位は、<a href="https://aws.amazon.com/jp/kinesis/data-streams/faqs/" target="_blank" rel="noopener">25KBをしきい値とした書き込み数で課金</a>されます。25KBより小さくても同じ料金が課金されるため、レコードのサイズが小さい場合はメッセージを集約することが有効です。同時に、小さくて細かいメッセージを1つのメッセージに集約することで、HTTP リクエスト分のオーバーヘッドが無くせるのでスループットを上げる効果も期待できます。</p><figure class="highlight plain"><figcaption><span>集約イメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">record 0 --|</span><br><span class="line">record 1   |        [ Aggregation ]</span><br><span class="line">    ...    |--&gt; Amazon Kinesis record --&gt;  PutRecords Request</span><br><span class="line">    ...    |                              </span><br><span class="line">record A --|</span><br></pre></td></tr></table></figure><p>AWSでこの25KB以下のメッセージを集約するフォーマットは、<strong>KPL Aggregated Record Format</strong>と呼ぶそうです。仕様は以下に記載されていました。</p><p><a href="https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md" target="_blank" rel="noopener">https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md</a></p><p>概要だけまとめると以下のフォーマットです。</p><ul><li>先頭に4バイトのマジックナンバーは<code>0xF3 0x89 0x9A 0xC2</code> がつく</li><li>プロトコルバッファ（proto2）を利用したバイナリフォーマット</li><li>最後に16バイトのMD5チェックサム</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0               4                  N          N+15</span><br><span class="line">+---+---+---+---+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+---+...+---+</span><br><span class="line">|  MAGIC NUMBER | PROTOBUF MESSAGE |    MD5    |</span><br><span class="line">+---+---+---+---+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+---+...+---+</span><br></pre></td></tr></table></figure><p><code>PROTOBUF MESSAGE</code> 部分は以下の定義です。Proto を知らない人に補足すると <code>repeated</code> はJSONでいう配列を示す宣言です。<code>AggregatedRecord</code> でKinesisのパーティションキーを複数宣言するのが特徴的ですね。もし、複数のレコードが同じパーティションキーを指定するとすると、効率よくシリアライズができそうです。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">AggregatedRecord</span> </span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> partition_key_table     = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> explicit_hash_key_table = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Record records                 = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SubMessage</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Tag</span> </span>&#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">string</span> key   = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">string</span> value = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">uint64</span> partition_key_index     = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">uint64</span> explicit_hash_key_index = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">bytes</span>  data                    = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Tag    tags                    = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>細かく説明しましたが、KPL Aggregated Record Formatの構造を知らなくても既存のライブラリを活用すれば利用可能ですのでご安心ください。</p><h2 id="Record-Aggregation-と-PutRecordsの区別"><a href="#Record-Aggregation-と-PutRecordsの区別" class="headerlink" title="Record Aggregation と PutRecordsの区別"></a>Record Aggregation と PutRecordsの区別</h2><p>ちょっとややこしいのが、 Kinesisには複数RECORDを一度のリクエストで登録する<a href="https://aws.amazon.com/jp/blogs/aws/kinesis-update-putrecords-api/" target="_blank" rel="noopener">PutRecords</a>というAPIがありますが、 Record Aggregationはそれとは異なります（別の概念なので共存できます）。PutRecordsはあくまで複数のRECORDを1度のリクエストに束ねるものであって、Aggregated Formatは複数メッセージを1メッセージに集約する点が違いです。PutRecordsはHTTP Requestの発行を抑えられる分スループットの向上が期待できる点は、Aggregated Formatと同じですが、メッセージ数は変化ないので料金は同じです。当然別物なのでAggregated FormatのメッセージをPutRecordsもできます。</p><h1 id="実施方法"><a href="#実施方法" class="headerlink" title="実施方法"></a>実施方法</h1><p><a href="https://aws.amazon.com/jp/sdk-for-go/" target="_blank" rel="noopener">AWS SDK for Go</a> でKinesisに対するProduce/Consumeはできますが、標準ではAggregation/DeAggregationはできません。そのため以下のライブラリを利用します。</p><ul><li><strong>Aggregation</strong>:  <a href="https://github.com/a8m/kinesis-producer" target="_blank" rel="noopener">a8m/kinesis-producer</a> </li><li><strong>DeAggregation</strong>: <a href="https://github.com/awslabs/kinesis-aggregation" target="_blank" rel="noopener">awslabs/kinesis-aggregation</a></li></ul><p>DeAggregationに関してはAWSLabのリポジトリを利用できるのでちょっと安心できますね。利用方法は簡単かと言われると？でしたのでここに利用方法を残していきます。</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><p>それぞれのライブラリの利用手順を説明していきます。このエントリーで記載しているコードは以下のリポジトリに記載しています。</p><p><a href="https://github.com/laqiiz/go-kinesis-aggr-example" target="_blank" rel="noopener">https://github.com/laqiiz/go-kinesis-aggr-example</a></p><h2 id="Aggregate（a8m-kinesis-producer）"><a href="#Aggregate（a8m-kinesis-producer）" class="headerlink" title="Aggregate（a8m/kinesis-producer）"></a>Aggregate（a8m/kinesis-producer）</h2><p>最初にコードのサンプルを載せます。</p><figure class="highlight go"><figcaption><span>集約側の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"github.com/a8m/kinesis-producer"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/kinesis"</span></span><br><span class="line"><span class="string">"golang.org/x/sync/errgroup"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kc = kinesis.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(e events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"【Start Aggregation Lambda】"</span>, <span class="built_in">len</span>(e.Records))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pr = producer.New(&amp;producer.Config&#123;</span><br><span class="line">StreamName: os.Getenv(<span class="string">"KINESIS_STREAM"</span>),</span><br><span class="line">Client:     kc,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">eg := errgroup.Group&#123;&#125;</span><br><span class="line"></span><br><span class="line">pr.Start() <span class="comment">// Producer用のgoroutine起動</span></span><br><span class="line">eg.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> pr.NotifyFailures() &#123;</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> e.Records &#123;</span><br><span class="line"><span class="comment">// TODO 取得したレコードに対する何かしらの処理。ここでは単純に集約して終わり</span></span><br><span class="line"><span class="keyword">if</span> err := pr.Put(r.Kinesis.Data, r.Kinesis.PartitionKey); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pr.Stop() <span class="comment">// 送信中のレコードのflushと、Producer goroutineの停止</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> eg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フィールドで初期化しているのが、Kinesis Producerのクライアントです。<code>handle</code>関数内部がややこしいですが、最初にRecord Aggregation用のProducerを生成し、<code>pr.Start()</code> で内部で用いるgoroutineを起動、その後にProducerが出すかも知れないerrorを検知するための <code>goroutine</code> を <code>errgroup</code> を利用して起動させます。ちょっとややこしいですが、これを最初に行わないと、エラーを取りこぼす可能性があります。ProducerはStopしたあとにStartしてもchannelを内部でcloseしていたりするので上手く動きませんでした。</p><p><code>Producer</code> に対するPut処理ですが、今回はLambdaだということと、他のデータストアへの書き込みもしないこともあり同期的に行っています。</p><p>最後に <code>pr.Stop()</code> を呼びgoroutineを停止させて、同時に処理中レコードをflushさせます。これを呼び忘れるとFlushされる間隔より前にLambda関数が停止してしまい、エラーは発生しないけどKinesisに送信されていないことが発生する恐れがあります。<code>pr.Stop</code> は <strong>errgroupの待受より前に</strong> 呼び出したいので、<code>defer</code> は利用していません。</p><p>これをGoでLambdaを利用するときのお作法通りにmain関数から呼び出せば完了です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでGoでLambdaでもKinesisへRecord Aggregationが行えます。</p><h2 id="DeAggregate-awslabs-kinesis-aggregation"><a href="#DeAggregate-awslabs-kinesis-aggregation" class="headerlink" title="DeAggregate(awslabs/kinesis-aggregation])"></a>DeAggregate(awslabs/kinesis-aggregation])</h2><p>awslabs/kinesis-aggregationを利用します。この時、Lambdaの引数として渡される <code>events.KinesisEvent</code> の型と、deaggregatorが求める方が異なるため、自分で型の詰め替え作業が必要です（最初のループ分の部分）。そこが最大の山場で、それさえできてしまえば<code>deagg.DeaggregateRecords</code>を呼び出して、レコードの集約解除が行われます。</p><figure class="highlight go"><figcaption><span>集約解除側の実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/kinesis"</span></span><br><span class="line">deagg <span class="string">"github.com/awslabs/kinesis-aggregation/go/deaggregator"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(e events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"【Start DeAggregation Lambda】"</span>, <span class="built_in">len</span>(e.Records))</span><br><span class="line"></span><br><span class="line">krs := <span class="built_in">make</span>([]*kinesis.Record, <span class="number">0</span>, <span class="built_in">len</span>(e.Records))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> e.Records &#123;</span><br><span class="line">krs = <span class="built_in">append</span>(krs, &amp;kinesis.Record&#123;</span><br><span class="line">ApproximateArrivalTimestamp: aws.Time(r.Kinesis.ApproximateArrivalTimestamp.UTC()),</span><br><span class="line">Data:                        r.Kinesis.Data,</span><br><span class="line">EncryptionType:              &amp;r.Kinesis.EncryptionType,</span><br><span class="line">PartitionKey:                &amp;r.Kinesis.EncryptionType,</span><br><span class="line">SequenceNumber:              &amp;r.Kinesis.SequenceNumber,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dars, err := deagg.DeaggregateRecords(krs)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> dars &#123;</span><br><span class="line"><span class="comment">// TODO de-aggregation後レコードに対する処理</span></span><br><span class="line">fmt.Println(<span class="string">"input"</span>, <span class="keyword">string</span>(r.Data))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをGoでLambdaを利用するときのお作法通りにmain関数から呼び出せば完了です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>レコード集約の解除処理は、ことKinesisトリガーのLambdaに対しては常に実装しておいても良い気がします。<br>理由ですが、<code>deagg.DeaggregateRecords</code> が集約済み<strong>ではない</strong> レコードに対して実行してもerrorが発生しないためと、最初は集約レコードじゃない入力だったとしても、途中で集約レコードに切り替わったときに急に動かなくなることを防ぐことも出来るからです。（疎通の1件は通ったけど、結合テストで複数レコードを連携しだすと急に落ちた、みたいなことも回避できます）。特にJavaクライアントがKPLを利用している場合は、集約あり/集約無しはあまり意識しないことが多く、事前のすり合わせでは集約しないと行っていたものの、いざ結合テストをする場合に、集約済みメッセージを連携してきたこともありました。</p><h1 id="動作検証"><a href="#動作検証" class="headerlink" title="動作検証"></a>動作検証</h1><p>下図のような環境を構築して動かしてみます。デプロイ方法はリポジトリのREADMEを参考ください。</p><p>![](/images/20200727/1 (2).png)</p><p>最初のKinesisにはawscli経由で3件データを投入します。</p><figure class="highlight bash"><figcaption><span>テストデータ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws kinesis --profile my_profile put-record --stream-name aggregate --partition-key 123 --data MTIzNDU2Nzg5MA==</span><br><span class="line">aws kinesis --profile my_profile put-record --stream-name aggregate --partition-key 124 --data MTIzNDU2Nzg5MA==</span><br><span class="line">aws kinesis --profile my_profile put-record --stream-name aggregate --partition-key 125 --data MTIzNDU2Nzg5MA==</span><br></pre></td></tr></table></figure><p>そうすると、1つ目のLambdaが起動されます。3つのレコードを受け取り、<code>flushing records reason=drain, records=%!s(int=1)</code> にある通り、3件が1レコードに集約されて次のKinesisにProduceされました。タイミングによっては1件だったり2件だったりしますが、2件以上であれば動作確認はできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-05-16T16:59:25.659+09:00 START RequestId: da2b6674-a147-4804-9e6c-5d78f633e426 Version: $LATEST</span><br><span class="line">2020-05-16T16:59:25.664+09:00 【Start Aggregation Lambda】 3</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 starting producer stream&#x3D;aggregate-test</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 stopping producer backlog&#x3D;%!s(int&#x3D;0)</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 backlog drained</span><br><span class="line">2020-05-16T16:59:25.664+09:00 2020&#x2F;05&#x2F;16 07:59:25 flushing records reason&#x3D;drain, records&#x3D;%!s(int&#x3D;1)</span><br><span class="line">2020-05-16T16:59:25.690+09:00 2020&#x2F;05&#x2F;16 07:59:25 stopped producer</span><br><span class="line">2020-05-16T16:59:25.690+09:00 END RequestId: da2b6674-a147-4804-9e6c-5d78f633e426</span><br></pre></td></tr></table></figure><p>2つ目のLambdaは、集約されたレコードを1件受け取り、集約解除した結果3つのメッセージを標準出力しています。ダミーで送信したデータの中身は全て同じなので3行同じ内容が表示されています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-05-16T17:01:36.865+09:00 START RequestId: 5f7eb56c-a83c-42c3-927d-0e2703528c6b Version: $LATEST</span><br><span class="line">2020-05-16T17:01:36.870+09:00 【Start DeAggregation Lambda】 1</span><br><span class="line">2020-05-16T17:01:36.870+09:00 input 1234567890</span><br><span class="line">2020-05-16T17:01:36.870+09:00 input 1234567890</span><br><span class="line">2020-05-16T17:01:36.870+09:00 input 1234567890</span><br><span class="line">2020-05-16T17:01:36.870+09:00 END RequestId: 5f7eb56c-a83c-42c3-927d-0e2703528c6b</span><br></pre></td></tr></table></figure><p>簡単ではありますがAggregation/DeAggregationの動作確認が取れました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>KPL Aggregated Record Formatを利用することで、Kinesisの利用料金を下げることができる</li><li>GoでLambdaでも、KPL/KCL相当の集約・集約解除は実装できる</li><li>特にDeAggregateする処理は、後々の予期せぬ連携に備えて防御的に実装しておくと良い</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>A deep-dive into lessons learned using Amazon Kinesis Streams at scale<ul><li><a href="https://read.acloud.guru/deep-dive-into-aws-kinesis-at-scale-2e131ffcfa08" target="_blank" rel="noopener">https://read.acloud.guru/deep-dive-into-aws-kinesis-at-scale-2e131ffcfa08</a></li></ul></li><li>KPL の主要なコンセプト<ul><li><a href="https://docs.aws.amazon.com/ja_jp/streams/latest/dev/kinesis-kpl-concepts.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/streams/latest/dev/kinesis-kpl-concepts.html</a></li></ul></li><li>KPL Aggregated Record Format<ul><li><a href="https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md" target="_blank" rel="noopener">https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/&quot;&gt;サーバレス連載企画&lt;/a&gt;の8回目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; cl
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>夏休み自由研究ブログ連載を始めます</title>
    <link href="https://future-architect.github.io/articles/20200726/"/>
    <id>https://future-architect.github.io/articles/20200726/</id>
    <published>2020-07-25T15:00:00.000Z</published>
    <updated>2020-08-11T01:56:46.453Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200726/beach-3121393_1280.png" alt=""><br><a href="https://pixabay.com/ja/users/lethutrang101-6596164/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3121393" target="_blank" rel="noopener">Trang Le</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3121393" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、技術ブログ運営の真野です。</p><p>フューチャー技術ブログで<strong>夏休み自由研究</strong>というテーマの連載を開催します。<a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>に続く、大型の連載なのでブログ運営者としてワクワクドキドキしています。</p><ul><li><strong>自分が好きな技術や興味があるテーマ</strong> について <strong>自由に研究</strong>（執筆）する連載企画です</li><li>8/03～8/21の平日（15枠）</li><li>この4月に入社してくれたフレッシュなメンバーから、ベテラン勢まで幅広い執筆陣です</li></ul><p>この連載を通して、フューチャー社員がどういうことに興味を持って、深堀りしようとしているかの一面が伝われば良いなと思ってます。<br>また、いつもとは一風変わった有益な情報をカジュアルにアウトプットし、皆様のお役に立てればと祈っています。</p><p><strong>2020/08/11 追記</strong>: 8/10の山の日を忘れていて、平日と言いながら祝日もスケジューリングしちゃってました。申し訳ないです..。すでに記事を作ってくれていたので、8/11に2日分公開することにしました。</p><h1 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h1><p>次の15人が投稿します。どれも夏休み感（？）がでていますね。</p><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>8/3</td><td>真野隼記</td><td><a href="/articles/20200803/">産業用機器向けフィールドネットワークModbusで温湿度センシング</a></td></tr><tr><td>8/4</td><td>伊藤真彦</td><td><a href="/articles/20200804/">GoPlus自由研究</a></td></tr><tr><td>8/5</td><td>伊藤太斉</td><td><a href="/articles/20200805/">Terraformで楽をしたい</a></td></tr><tr><td>8/6</td><td>永井優斗</td><td><a href="/articles/20200806/">初めてのOSSコミュニティ活動〜ドキュメント翻訳やってみた。カンファレンススタッフもやってみた。〜</a></td></tr><tr><td>8/7</td><td>辻大志郎</td><td><a href="/articles/20200807/">GoとSuffixArray</a></td></tr><tr><td>8/8</td><td>-</td><td></td></tr><tr><td>8/9</td><td>-</td><td></td></tr><tr><td>8/10</td><td>王紹宇</td><td>自動売買は詐欺？本物を自作してみよう</td></tr><tr><td>8/11</td><td>矢野颯太</td><td><a href="/articles/20200811/">ダイエット食のブレイクスルー！低温調理器を自作して鶏むね肉を美味しく食べる</a></td></tr><tr><td>8/12</td><td>加藤周平</td><td>marpでFutureスライドのテンプレ作ってみる</td></tr><tr><td>8/13</td><td>西田好孝</td><td>GCPのグローバルサービスのRegion集約を考える</td></tr><tr><td>8/14</td><td>村田靖拓</td><td>ぼくのなつやすみ5 -Istio、キミがくれたもの-</td></tr><tr><td>8/15</td><td>-</td><td></td></tr><tr><td>8/16</td><td>-</td><td></td></tr><tr><td>8/17</td><td>仁木美来</td><td>Slack×GASの日報テンプレBOTを実務に導入してみた</td></tr><tr><td>8/18</td><td>富山 龍之介</td><td>私を苦しめたDynamoDB</td></tr><tr><td>8/19</td><td>柏木祥子</td><td>denoとfirebaseでつくるデータ管理画面</td></tr><tr><td>8/20</td><td>栗田真</td><td>Pythonユーザーのためのモジュール開発</td></tr><tr><td>8/21</td><td>武田大輝</td><td>モバイルアプリ開発 - 優れたフォトギャラリーをハイブリッドで実現する -</td></tr></tbody></table><p>※正確なタイトルは直前で変更するかも知れませんが、ご了承ください！</p><p>また、今回は<strong>「補欠」制度</strong>を内部で導入しました。どうしても体調面・業務面で投稿が厳しくなったメンバーがいた時は、補欠メンバーの記事が補填され、タイトルと内容がガラリと変わる可能性があります。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>この企画は LINEさんの<a href="https://engineering.linecorp.com/ja/blog/line-engineering-blog-freedom-study-summer-vacation-homework/" target="_blank" rel="noopener">LINE Engineering Blog 「夏休みの自由研究 -Summer Homework-」 実施のお知らせ</a> に大いに影響を受けています。いつもブログを拝見させてもらっています。ありがとうございます。</p><p>他にも連載企画がざくざくあります。ぜひ、気になるテーマの記事をCHECK! いただけると幸いです。</p><ul><li><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a></li><li><a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a></li><li><a href="/tags/GoCDK/">Go Cloud</a></li><li><a href="/tags/Auth0/">Auth0</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200726/beach-3121393_1280.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://pixabay.com/ja/users/lethutrang101-6596164/?utm_source=lin
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
      <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>AWSサービストリガによるLambda起動</title>
    <link href="https://future-architect.github.io/articles/20200722/"/>
    <id>https://future-architect.github.io/articles/20200722/</id>
    <published>2020-07-21T15:00:00.000Z</published>
    <updated>2020-07-27T00:26:25.444Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載企画</a>の7回目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGのDXチームに所属している加部です。</p><p>昨今様々なシステムで利用さているAWSのLambdaですが、サーバレスということもあり何かのイベントをトリガに関数を起動させる方法が一般的かと思います。LambdaはAWSの様々なサービスをトリガとして起動することが可能で、自分たちの利用しているAWSサービスと組み合わせて実装するることでその真価を発揮します。</p><p>AWSに少し詳しい人であればLambdaをAWSのサービストリガで起動させる事ができることは知っていると思いますが、いざ実装するとなると具体的にどういった手順で、なんの設定が必要かというところがわからないという人もいるのではないでしょうか。Lambdaには起動型がいくつかあったり、トリガとなるサービスによって起動設定も異なってきます。私自身も業務で利用するまではいわゆる知識勢でした。</p><p>この記事ではAWSのローカルモック環境であるLocalStackを用いて、皆さんのローカル環境でも試せるよう各起動型の設定方法を追っていきます。</p><h1 id="Lambdaの起動型"><a href="#Lambdaの起動型" class="headerlink" title="Lambdaの起動型"></a>Lambdaの起動型</h1><p>まずはLambdaの起動型について見ていきましょう。Lambdaの起動型には同期、非同期、ストリームベースの3つがあります。</p><ol><li><strong>同期</strong><ul><li>イベントを処理する関数を待ってクライアントにレスポンスを返す</li><li>AWS側でのリトライ処理はなく実行は1回となる</li><li>代表的なサービス<ul><li>API Gateway</li><li>Cognito</li><li>Alexa</li></ul></li></ul></li><li><strong>非同期</strong><ul><li>Lambdaは処理のためにイベントをキューに入れ、クライアントにすぐにレスポンスを返す</li><li>呼び出しに失敗した場合は自動的に2回リトライが実施される</li><li>代表的なサービス<ul><li>CloudWatch Events</li><li>Cloud Watch Logs</li><li>Code Commit</li><li>S3</li><li>SNS</li><li>Kinesis Firehose<br>etc…</li></ul></li></ul></li><li><strong>ストリームベース</strong><ul><li>Lambdaサービスが連携元のストリームサービスをポーリングし、必要に応じてLambda関数を呼び出す</li><li>BatchSizeを指定することで、1回のLambda関数起動時のレコード取得数を指定する</li><li>Lambda関数が失敗すると、対象レコードの有効期限が切れるまでエラーが発生した関数をリトライする(リトライ回数は設定で指定可能)</li><li>代表的なサービス<ul><li>Kinesis Data Stream</li><li>Dynamo DB Stream</li></ul></li></ul></li></ol><h1 id="各起動型の設定方法"><a href="#各起動型の設定方法" class="headerlink" title="各起動型の設定方法"></a>各起動型の設定方法</h1><p>基本的な流れとしてはどの起動型も下記のような同じ流れになります。</p><ol><li>Lambdaの作成</li><li>トリガとなるリソースの作成</li><li>Lambdaとトリガとなるリソースの紐付け</li></ol><p>手順3のLambdaのトリガ設定が各起動型で変わってきます。それでは各起動型の設定方法を実践していきましょう。</p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>LocalStackを<a href="https://github.com/localstack/localstack" target="_blank" rel="noopener">こちら</a>からダウンロードしてください。LocalStack起動コマンド(macOSの場合)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TMPDIR=/private<span class="variable">$TMPDIR</span> docker-compose up -d</span><br></pre></td></tr></table></figure><p>LocalStackの詳細については<a href="https://future-architect.github.io/articles/20191115/">こちらのブログ</a>で解説しているので興味のある方は読んでみてください。</p><h2 id="同期型"><a href="#同期型" class="headerlink" title="同期型"></a>同期型</h2><p>ではまず同期型の呼び出しから設定/実装方法を見ていきましょう。今回はよくあるAPI Gateway –&gt; Lambdaという構成を参考に進めていきます。</p><p><img src="/images/20200722/2020-07-17T17.05.46.png" alt=""></p><p>それでは早速構築してきましょう。まずは、APIのレスポンスを返すLambdaを作成します。</p><figure class="highlight go"><figcaption><span>テスト用コード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleRequest</span><span class="params">(ctx context.Context, request events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line">q := request.QueryStringParameters</span><br><span class="line">name := q[<span class="string">"name"</span>]</span><br><span class="line">body := <span class="string">"hello "</span> + name</span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       body,</span><br><span class="line">StatusCode: <span class="number">200</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handleRequest)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ソースをbuildして、zipで圧縮しLambdaをデプロイします</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aws lambda create-function \</span><br><span class="line">  --endpoint-url=http://localhost:4574 \</span><br><span class="line">  --<span class="keyword">function</span>-name api-gateway-test \</span><br><span class="line">  --runtime go1.x \</span><br><span class="line">  --handler main \</span><br><span class="line">  --zip-file fileb://main.zip \</span><br><span class="line">  --role r1</span><br></pre></td></tr></table></figure><p>Lambdaのデプロイが完了したらAPI GateAwayを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway create-rest-api \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --name <span class="string">'API Gateway Test'</span></span><br></pre></td></tr></table></figure><p>返ってきたidの値を後のコマンドで利用するので変数に入れておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rest_api_id=******</span><br></pre></td></tr></table></figure><p>API Gatewayを作成したらルートリソースの配下にAPIリソースを追加します<br>そのために、まずルートリソースのIDを確認しましょう。<br>rest-api-idには先のコマンドでレスポンスで返ってきたidを利用します。<br>ルートリソースのIDを確認</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway get-resources \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --rest-api-id <span class="variable">$&#123;rest_api_id&#125;</span></span><br></pre></td></tr></table></figure><p>parent-idには一つ前のコマンドで返ってきたidの値を利用します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway create-resource \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --rest-api-id <span class="variable">$&#123;rest_api_id&#125;</span> \</span><br><span class="line">  --parent-id ****** \</span><br><span class="line">  --path-part hello</span><br></pre></td></tr></table></figure><p>作成したリソースに対するメソッドを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway put-method \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --rest-api-id <span class="variable">$&#123;rest_api_id&#125;</span> \</span><br><span class="line">  --resource-id ****** \</span><br><span class="line">  --http-method GET \</span><br><span class="line">  --authorization-type <span class="string">"NONE"</span></span><br></pre></td></tr></table></figure><p>ここまで設定できたらようやくAPI GatewayとLambdaの紐付けの設定になります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway put-integration \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --rest-api-id <span class="variable">$&#123;rest_api_id&#125;</span> \</span><br><span class="line">  --resource-id ****** \</span><br><span class="line">  --http-method GET \</span><br><span class="line">  --<span class="built_in">type</span> AWS_PROXY \</span><br><span class="line">  --integration-http-method GET \</span><br><span class="line">  --uri arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/<span class="built_in">functions</span>/arn:aws:lambda:us-east-1:000000000000:<span class="keyword">function</span>:api-gateway-test \</span><br><span class="line">  --passthrough-behavior WHEN_NO_MATCH</span><br></pre></td></tr></table></figure><p>最後にAPIをデプロイして完了です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway create-deployment \</span><br><span class="line">  --endpoint-url=http://localhost:4567 \</span><br><span class="line">  --rest-api-id <span class="variable">$&#123;rest_api_id&#125;</span> \</span><br><span class="line">  --stage-name prod</span><br></pre></td></tr></table></figure><p>curlコマンドで想定のレスポンスが返ってくるか確認しましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i http://localhost:4567/restapis/<span class="variable">$&#123;rest_api_id&#125;</span>/prod/_user_request_/hello?name=lambda</span><br><span class="line">hello lambda</span><br></pre></td></tr></table></figure><h2 id="非同期型"><a href="#非同期型" class="headerlink" title="非同期型"></a>非同期型</h2><p>続いてS3とLambdaの連携です。API Gatewayに比べるとだいぶ設定が簡単です。S3にローカルPCからオブジェクトをコピーし、Lambdaが起動できることを確認していきます。</p><p><img src="/images/20200722/2020-07-17T17.05.34.png" alt=""></p><p>先程と同じようにまずはLambda関数のデプロイから実施していきます。<br>トリガの起動が確認できればよいので、Lambdaが起動したらメッセージが出力されるようなソースを用意します。<br>テスト用ソース</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(ctx context.Context, event events.S3Event)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"S3 trigger Lambda"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テスト用ソースでLambdaを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aws lambda create-function \</span><br><span class="line">  --endpoint-url=http://localhost:4574 \</span><br><span class="line">  --<span class="keyword">function</span>-name s3-trigger-test \</span><br><span class="line">  --runtime go1.x \</span><br><span class="line">  --handler main \</span><br><span class="line">  --zip-file fileb://main.zip \</span><br><span class="line">  --role r1</span><br></pre></td></tr></table></figure><p>続いて今回のLambda起動となるS3バケットの作成です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint-url=http://localhost:4572 s3 mb s3://<span class="built_in">test</span>-bucket</span><br><span class="line">make_bucket: <span class="built_in">test</span>-bucket</span><br></pre></td></tr></table></figure><p>続いて作成したS3に対してLambda起動の権限を追加します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aws lambda add-permission \</span><br><span class="line">  --endpoint-url=http://localhost:4574 \</span><br><span class="line">  --region us-east-1 \</span><br><span class="line">  --<span class="keyword">function</span>-name s3-trigger-test \</span><br><span class="line">  --statement-id s3-put-event \</span><br><span class="line">  --principal s3.amazonaws.com \</span><br><span class="line">  --action <span class="string">"lambda:InvokeFunction"</span> \</span><br><span class="line">  --<span class="built_in">source</span>-arn arn:aws:s3:::<span class="built_in">test</span>-bucket</span><br></pre></td></tr></table></figure><p>作成したS3バケットに対する操作の通知を設定します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws s3api put-bucket-notification-configuration \</span><br><span class="line">  --endpoint-url=http://localhost:4572 \</span><br><span class="line">  --bucket <span class="built_in">test</span>-bucket \</span><br><span class="line">  --notification-configuration file://s3test-event.json</span><br></pre></td></tr></table></figure><p>設定Jsonファイル</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"LambdaFunctionConfigurations"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"LambdaFunctionArn"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"Events"</span>: [<span class="string">"s3:ObjectCreated:*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでS3バケットに対するPUT操作でLambdaが起動する設定ができました。<br>試しにテキストファイルをS3にPUTしてみましょう。<br>オブジェクトPUT</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws s3 cp sample.txt s3://<span class="built_in">test</span>-bucket \</span><br><span class="line">  --endpoint-url=http://localhost:4572 \</span><br><span class="line">  --profile localstack</span><br></pre></td></tr></table></figure><p>非同期なのでLambdaが実行されたのかどうかはオブジェクトをPUTした時点ではわかりません。<br>Lambdaの実行を確認するために、CloudWatchLogを確認してLambdaの起動を確認しましょう。<br>まずはログストリームの特定をします。log-group-nameは「/aws/lambda/&lt;Lambdaファンクション名&gt;」となります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws logs describe-log-streams \</span><br><span class="line">  --endpoint-url=http://localhost:4586 \</span><br><span class="line">  --<span class="built_in">log</span>-group-name=/aws/lambda/s3-trigger-test</span><br></pre></td></tr></table></figure><p>上記コマンドを実行すると下記のようにロググループのログストリームが表示されます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"logStreams"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"firstEventTimestamp"</span>: <span class="number">1585829767164</span>, </span><br><span class="line">            <span class="attr">"lastEventTimestamp"</span>: <span class="number">1585829767749</span>, </span><br><span class="line">            <span class="attr">"creationTime"</span>: <span class="number">1585829767942</span>, </span><br><span class="line">            <span class="attr">"uploadSequenceToken"</span>: <span class="string">"1"</span>, </span><br><span class="line">            <span class="attr">"logStreamName"</span>: <span class="string">"+52222/12/12/[$LATEST]ec3fbc60"</span>, </span><br><span class="line">            <span class="attr">"lastIngestionTime"</span>: <span class="number">1585829767947</span>, </span><br><span class="line">            <span class="attr">"arn"</span>: <span class="string">"arn:aws:logs:us-east-1:0:log-group:/aws/lambda/s3-trigger-test:log-stream:+52222/12/12/[$LATEST]ec3fbc60"</span>, </span><br><span class="line">            <span class="attr">"storedBytes"</span>: <span class="number">331</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ログストリーム名が確認できたら、ログストリームの中身を確認していきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws logs get-log-events \</span><br><span class="line">  --endpoint-url=http://localhost:4586 \</span><br><span class="line">  --<span class="built_in">log</span>-group-name=/aws/lambda/s3-trigger-test \</span><br><span class="line">  --<span class="built_in">log</span>-stream-name <span class="string">'+52222/12/12/[$LATEST]ec3fbc60'</span></span><br></pre></td></tr></table></figure><p>ログを確認するとmessageが想定通りに表示されていますね。成功です。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"nextForwardToken"</span>: <span class="string">"f/00000000000000000000000000000000000000000000000000000003"</span>, </span><br><span class="line">    <span class="attr">"events"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585829767947</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585829767164</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mSTART RequestId: 43bd5e82-0bfc-1c43-b8cf-085bc34c3d36 Version: $LATEST\u001b[0m"</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585829767947</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585829767359</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"S3 trigger Lambda"</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585829767947</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585829767554</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mEND RequestId: 43bd5e82-0bfc-1c43-b8cf-085bc34c3d36\u001b[0m"</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585829767947</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585829767749</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mREPORT RequestId: 43bd5e82-0bfc-1c43-b8cf-085bc34c3d36\tInit Duration: 103.67 ms\tDuration: 2.44 ms\tBilled Duration: 100 ms\tMemory Size: 1536 MB\tMax Memory Used: 20 MB\t\u001b[0m"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ], </span><br><span class="line">    <span class="attr">"nextBackwardToken"</span>: <span class="string">"b/00000000000000000000000000000000000000000000000000000000"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ストリームベース"><a href="#ストリームベース" class="headerlink" title="ストリームベース"></a>ストリームベース</h2><p>最後はストリームベーズのLambda起動の設定です。ローカルPCからKinesisへメッセージをPUTしてLambdaを起動させましょう。</p><p><img src="/images/20200722/2020-07-17T17.05.23.png" alt=""></p><p>例によってテスト用のLambdaを作成します。<br>今回はPUTしたメッセージの内容がログに出力されるようなソースを用意します。</p><figure class="highlight go"><figcaption><span>テスト用Lambdaコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(ctx context.Context, kinesisEvent events.KinesisEvent)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, record := <span class="keyword">range</span> kinesisEvent.Records &#123;</span><br><span class="line">kinesisRecord := record.Kinesis</span><br><span class="line">dataBytes := kinesisRecord.Data</span><br><span class="line">dataText := <span class="keyword">string</span>(dataBytes)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%s Data = %s \n"</span>, record.EventName, dataText)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3回目なのでデプロイのコマンドはは割愛します。いままでのコマンドと同じになります。Lambdaが作成できたら次はトリガ起動のもととなるKinesisStreamを作成します。</p><figure class="highlight sh"><figcaption><span>KinesisStream作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws kinesis --endpoint-url=http://localhost:4568 create-stream --stream-name lambda-test --shard-count 1</span><br></pre></td></tr></table></figure><p>必要なリソースが作成できたらKinesisとLambdaの紐付けの設定をします。</p><figure class="highlight sh"><figcaption><span>イベントトリガの設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws lambda create-event-source-mapping \</span><br><span class="line">  --endpoint-url=http://localhost:4574 \</span><br><span class="line">  --event-source-arn arn:aws:kinesis:us-east-1:000000000000:stream/lambda-test  \</span><br><span class="line">  --<span class="keyword">function</span>-name kinesis-trigger-test</span><br></pre></td></tr></table></figure><p>event source mappingの設定ではエラー時のレコード送信先をSQSに設定できたり、バッチ処理するレコードの数など色々なオプションを指定することができます。</p><p>それではKinesisにテストレコードをputしてみましょう。</p><figure class="highlight sh"><figcaption><span>メッセージPUT</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws kinesis --endpoint-url=http://localhost:4568 put-record --stream-name lambda-test --partition-key 123 --data <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>レコードをPUTした時点ではLambdaが起動したかわからないので、S3の時同様CloudWatchを確認しにいきます。</p><p>手順は先程と同じになります。<br>まずは、ログストリームの確認です。</p><figure class="highlight sh"><figcaption><span>ログストリームの確認</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws logs describe-log-streams \</span><br><span class="line">  --endpoint-url=http://localhost:4586 \</span><br><span class="line">  --<span class="built_in">log</span>-group-name=/aws/lambda/kinesis-trigger-test</span><br></pre></td></tr></table></figure><p>ログストリームの確認ができたらログを確認します。</p><figure class="highlight sh"><figcaption><span>らログを確認</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws logs get-log-events \</span><br><span class="line">  --endpoint-url=http://localhost:4586 \</span><br><span class="line">  --<span class="built_in">log</span>-group-name /aws/lambda/kinesis-trigger-test \</span><br><span class="line">  --<span class="built_in">log</span>-stream-name <span class="string">'+52222/12/21/[$LATEST]8d33a723'</span></span><br></pre></td></tr></table></figure><p>ログが確認できましたね。KinesisにPUTしたtestという文字列も返ってきています。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"nextForwardToken"</span>: <span class="string">"f/00000000000000000000000000000000000000000000000000000003"</span>, </span><br><span class="line">    <span class="attr">"events"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585830597603</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585830596901</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mSTART RequestId: 38463daf-5f85-1220-65eb-9607f3f807fe Version: $LATEST\u001b[0m"</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585830597603</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585830597075</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">" Data = test "</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585830597603</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585830597250</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mEND RequestId: 38463daf-5f85-1220-65eb-9607f3f807fe\u001b[0m"</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ingestionTime"</span>: <span class="number">1585830597603</span>, </span><br><span class="line">            <span class="attr">"timestamp"</span>: <span class="number">1585830597425</span>, </span><br><span class="line">            <span class="attr">"message"</span>: <span class="string">"\u001b[32mREPORT RequestId: 38463daf-5f85-1220-65eb-9607f3f807fe\tInit Duration: 54.77 ms\tDuration: 3.63 ms\tBilled Duration: 100 ms\tMemory Size: 1536 MB\tMax Memory Used: 21 MB\t\u001b[0m"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ], </span><br><span class="line">    <span class="attr">"nextBackwardToken"</span>: <span class="string">"b/00000000000000000000000000000000000000000000000000000000"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>長文ご付き合いありがとうございました。今回はLambdaの各起動型の中から代表的なリソースのイベントによるLambdaの起動設定をおさらいしてきました。</p><p>このあたりの設定に関しては知っていれば難しいことはないのですが、初見だと少し苦労する部分かなと思います。本記事ではCLIによる設定をしていきましたが、もちろんCloudFormationやTerraformなどのInfrastructure as Codeでも設定すべき内容は基本的に同じになります。</p><p>一度マスターしてしまえばどうということ無いことなので、ぜひ一度Localstackを利用して試しに実装してみてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/tags/Serverless%E9%80%A3%E8%BC%89/&quot;&gt;サーバレス連載企画&lt;/a&gt;の7回目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
      <category term="LocalStack" scheme="https://future-architect.github.io/tags/LocalStack/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>PythonユーザーのためのGraalVM</title>
    <link href="https://future-architect.github.io/articles/20200721/"/>
    <id>https://future-architect.github.io/articles/20200721/</id>
    <published>2020-07-20T15:00:00.000Z</published>
    <updated>2020-07-22T01:42:56.075Z</updated>
    
    <content type="html"><![CDATA[<p>ちょうど一年ぐらい前にGraalVMが商用利用可能な安定版に達し、Enterprise版もリリースされたというニュースがあります。</p><ul><li><a href="https://www.publickey1.jp/blog/19/graalvmgraalvm_190javajavascriptgraalvm_enterprise_edition.html" target="_blank" rel="noopener">publickey: GraalVM、ついに本番利用可能なバージョン「GraalVM 19.0」登場、JavaやJavaScriptなど多言語対応ランタイム。商用版のGraalVM Enterprise Editionもリリース</a></li></ul><p>GraalVMにはPython機能もあると宣伝されているものの、詳しい説明が行われることがなく、それが何者で、どのようなステータスで、どこを目指しているのか、きちんと答えられる人は（日本どころか世界でも）ほぼいないでしょう。GraalVMそのものの説明はちょくちょく出てくるようになってきたと思いますが、そのPythonの機能についてはあまり説明されていないため、Python部分にフォーカスして紹介します。</p><h1 id="Graal-Pythonのインストール"><a href="#Graal-Pythonのインストール" class="headerlink" title="Graal.Pythonのインストール"></a>Graal.Pythonのインストール</h1><p><a href="https://www.graalvm.org/getting-started/" target="_blank" rel="noopener">GraalVMのインストール</a>をまず行い、次にGraal.Pythonをインストールします。</p><p>インストールはWindows/macOS/Linux向けにバイナリが提供されているので、それを展開してパスを通すなどするだけです。この記事の執筆時点で、20.1が最新バージョンになります。</p><p><a href="https://github.com/graalvm/graalvm-ce-builds/releases" target="_blank" rel="noopener">https://github.com/graalvm/graalvm-ce-builds/releases</a></p><p>WindowsとLinuxなら展開したフォルダ（graalvm-ce-java11-20.1.0）をJAVA_HOMEに、その下のbinフォルダをPATHに追加してあげればGraalVM完了です。</p><p>macOSはJavaに対するちょっとしたサポートがあるので、ちょっと手順が異なり、\ <code>/Library/Java/JavaVirtualMachines</code> フォルダに展開したフォルダをおきます。\ <code>/usr/libexec/java_home -V</code>\ コマンドでおいたフォルダが認識されればJAVA_HOMEの設定は不要です。ただ、この中のbinフォルダへのパスは通す必要があります。</p><p>なお、binフォルダへのパスですが、もろもろ影響が大きいので、可能ならdirenvなどを使って必要なワークフォルダ内でのみパスを通すとか、必要なときに手動でパスを設定するなどした方が良いです。</p><p>インストールが終わるとguコマンドが利用できるようになります。<code>gu available</code>で追加インストール可能なコンポーネント一覧が表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">% gu available</span><br><span class="line">Downloading: Component catalog from www.graalvm.org</span><br><span class="line">ComponentId              Version             Component name      Origin </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">llvm-toolchain           20.1.0              LLVM.org toolchain  github.com</span><br><span class="line">native-image             20.1.0              Native Image        github.com</span><br><span class="line">python                   20.1.0              Graal.Python        github.com</span><br><span class="line">R                        20.1.0              FastR               github.com</span><br><span class="line">ruby                     20.1.0              TruffleRuby         github.com</span><br><span class="line">wasm                     20.1.0              GraalWasm           github.com</span><br></pre></td></tr></table></figure><p>Pythonをインストールするので、次のようにタイプします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% gu install python</span><br></pre></td></tr></table></figure><h1 id="GraalVMとは何者か"><a href="#GraalVMとは何者か" class="headerlink" title="GraalVMとは何者か"></a>GraalVMとは何者か</h1><p>先ほどグローバルにパスを通すのはやめておいた方がよい、とお伝えしました。Python以外にnative-imageもインストールした状態ですが、/binフォルダの中は次のようになっています。　</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> % ls /Library/Java/JavaVirtualMachines/graalvm-ce-java11-20.1.0/Contents/Home/bin </span><br><span class="line">graalpythonjavacjdbjimagejmodjstackllipack200rmiregistry</span><br><span class="line">gujavadocjdeprscanjinfojpsjstatnative-imagepolyglotserialver</span><br><span class="line">jarjavapjdepsjjsjrunscriptjstatdnoderebuild-imagesunpack200</span><br><span class="line">jarsignerjcmdjfrjlinkjsjvisualvmnpmrmic</span><br><span class="line">javajconsolejhsdbjmapjshellkeytoolnpxrmid</span><br></pre></td></tr></table></figure><p>これをみるとわかるようにjavacやjar、javaといったコマンドがいるのがわかります。GraalVMは、ちょっとオルタナティブなJDKの顔をしているのがわかります。この後にも説明は出てきますが、Javaコンパイラとしても利用します。それ以外にはnode, npm, npxというコマンドも見えます。つまり、Node.jsの互換処理系も入っているのです。下手にパスを通すと、既存のJavaのプロジェクトやら、Node.jsのプロジェクトがおかしくなる可能性があります。なので、必要なフォルダでのみ有効にした方が良いです。</p><p>GraalVMですが、一つのVMの中で、JavaScriptやRといったさまざまな言語をサポートしています。Rでデータファイルを読み込んでPythonでデータ処理をして・・・など言語跨ぎで各言語の得意な部分を生かしたコーディングができるのを目指しているようです。</p><h1 id="Graal-Pythonの状況"><a href="#Graal-Pythonの状況" class="headerlink" title="Graal.Pythonの状況"></a>Graal.Pythonの状況</h1><p>Graal.Pythonの一次情報は<a href="https://www.graalvm.org/docs/reference-manual/languages/python/" target="_blank" rel="noopener">ここ</a>になります。</p><p>graalpythonを起動すると、次のようなメッセージが出ます。Python 3.8.2互換と言うことがわかります。なかなか新しいですね。公式ドキュメントとか昨年の情報をみると、19系は3.7だったようなので、順当に更新されています。なお、この起動メッセージにも入っていますが、まだearly stageで安定版ではないです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">% graalpython</span><br><span class="line">Python 3.8.2 (Fri May 15 05:42:24 PDT 2020)</span><br><span class="line">[GraalVM CE, Java 11.0.7] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">Please note: This Python implementation is <span class="keyword">in</span> the very early stages, and can run little more than basic benchmarks at this point.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/graalvm/graalpython" target="_blank" rel="noopener">README</a>によれば、scipyなどのパッケージ群をネイティブサポートしようというのが目下の目標らしいです。</p><p>venvを使った環境の分離も可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% graalpython -m venv .venv</span><br><span class="line">% <span class="built_in">source</span> .venv/bin/activate</span><br></pre></td></tr></table></figure><p>パッケージのインストールは動作確認済み？のものだけginstallモジュールを使ってインストールします。pipもvenvの中には作られるのですが、sslモジュールがインポートできないので・・・みたいな警告が出て、うまく使えませんでした。適当に思いつくパッケージをいろいろインストールしようとしたのですが、docutilsとかSphinxはダメで、pytestだけはインストールできたが、うまく動かず、みたいな感じです。既存のプロジェクトを持ってきてそのまま動かす、というのはまだ難しいです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ graalpython -m ginstall install numpy</span><br></pre></td></tr></table></figure><p>昨年の記事ですが、mocobetaさんがJanomeのインストールにトライした記事がありますが、このときと状況は変わっていません。</p><ul><li><a href="https://medium.com/@mocobeta/graalvm-graalpython-%E3%81%A7-janome-%E3%82%92%E7%84%A1%E7%90%86%E7%9F%A2%E7%90%86%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E3%83%A1%E3%83%A2-c07020f8193f" target="_blank" rel="noopener">GraalVM (graalpython) で janome を無理矢理動かしてみたメモ</a></li></ul><h2 id="polyglotサポート"><a href="#polyglotサポート" class="headerlink" title="polyglotサポート"></a>polyglotサポート</h2><p><code>--polyglot</code>オプションをつけると、いろいろな言語ランタイムにアクセスできるようになります。次のサンプルはREADMEのサンプルですが、PythonからJavaScriptの正規表現のクラスを呼び出しています。これだけでは実用性はなさそうですが・・・</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> polyglot</span><br><span class="line">re = polyglot.eval(string=<span class="string">"RegExp()"</span>, language=<span class="string">"js"</span>)</span><br><span class="line">pattern = re.compile(<span class="string">".*(?:we have (?:a )?matching strings?(?:[!\\?] )?)(.*)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pattern.exec(<span class="string">"This string does not match"</span>):</span><br><span class="line">    <span class="keyword">raise</span> SystemError(<span class="string">"that shouldn't happen"</span>)</span><br><span class="line"></span><br><span class="line">md = pattern.exec(<span class="string">"Look, we have matching strings! This string was matched by Graal.js"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> md:</span><br><span class="line">    <span class="keyword">raise</span> SystemError(<span class="string">"this should have matched"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Here is what we found: '%s'"</span> % md[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="Jython"><a href="#Jython" class="headerlink" title="Jython"></a>Jython</h2><p>Pythonの互換実装で有名なものはいくつかありますが、Javaで実装されたものがJythonです。RPAツールのSikuliXとかでもスクリプト言語として組み込まれていたりします。Jythonは2.7互換で実装されており、3系の実装は安定版が出ていません。Graal.PythonはJavaで実装された3.x系実装で、Jythonと出自は似ています。コマンドラインオプションでJythonをエミュレーションするモードも有効にできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% graalpython --jvm --experimental-options --python.EmulateJython</span><br></pre></td></tr></table></figure><p><a href="https://github.com/graalvm/graalpython/blob/master/docs/user/JYTHON.md" target="_blank" rel="noopener">ここのサンプルの通り</a>ですが、こんな感じで、AWTを使ってウインドウを表示できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> % graalpython --jvm --experimental-options --python.EmulateJython </span><br><span class="line">Python 3.8.2 (Sat Jun 13 16:19:51 JST 2020)</span><br><span class="line">[GraalVM CE, Java 11.0.7] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">Please note: This Python implementation is <span class="keyword">in</span> the very early stages, and can run little more than basic benchmarks at this point.</span><br><span class="line">&gt;&gt;&gt; import java.awt as awt</span><br><span class="line">&gt;&gt;&gt; win = awt.Frame()</span><br><span class="line">&gt;&gt;&gt; win.setSize(200, 200)</span><br><span class="line">&gt;&gt;&gt; win.setTitle(<span class="string">"Hello from Python!"</span>)</span><br><span class="line">&gt;&gt;&gt; win.getSize().toString()</span><br><span class="line"><span class="string">'java.awt.Dimension[width=200,height=200]'</span></span><br><span class="line">&gt;&gt;&gt; win.show()</span><br></pre></td></tr></table></figure><img src="/images/20200721/thumbnail.png" class="img-small-size"><p>デフォルトはnativeモードでAoTコンパイルをします。CPythonと変わらない感覚で使えます。JVMモードにするとJITコンパイルになりますが、ちょっとしたコードはこちらの方が時間がかかるようになります。ただ、Jythonのコードを実行するにはJVMモードでないとダメです。</p><p>アプリへの組み込みの場合、Jythonで提供していたクラスをそのまま提供しているわけではないため、いろいろ変更を行う必要があります。<a href="https://www.graalvm.org/docs/reference-manual/embed/#Function_Python" target="_blank" rel="noopener">そのためのドキュメント</a>も公開されています。JythonでPythonをスクリプトとして提供していたアプリからすると、変更の手間は必要なものの、Python以外にもJavaScriptやRubyも動くようになるので、乗り換えるメリットはあります。Python 2系を止めることもできますし。</p><h2 id="パフォーマンス"><a href="#パフォーマンス" class="headerlink" title="パフォーマンス"></a>パフォーマンス</h2><p>細かい計算で繰り返し回数が多くなるものはCPythonよりも早くなるとのことです。</p><ul><li><a href="https://qiita.com/kotauchisunsun/items/7b7eb1e759e3e4526e62" target="_blank" rel="noopener">Python標準実装より速い！？Oracleが作ったGraalPythonをJython・CPythonとベンチマークしてみた！！</a></li></ul><h1 id="ネイティブイメージ化"><a href="#ネイティブイメージ化" class="headerlink" title="ネイティブイメージ化"></a>ネイティブイメージ化</h1><p>GraalVMといえばネイティブな実行バイナリ（ネイティブイメージ）作成なのでPythonでもチャレンジしてみました。まずはnative-imageの処理系をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% gu install native-image</span><br></pre></td></tr></table></figure><p>基本的な使い方として紹介されているのはJavaで次のような手順で作ります。</p><ul><li>javacでコンパイル</li><li>(jarファイル作成)</li><li>.classもしくは.jarファイルをnative-imageコマンドでネイティブ化</li></ul><p>Java系以外の言語を使った事例や使い方の紹介というのが<a href="https://www.graalvm.org/docs/reference-manual/native-image/" target="_blank" rel="noopener">公式ドキュメント</a>を見てもほとんどないのですが、サンプルコードとして<a href="https://github.com/graalvm/graalvm-demos/tree/master/native-list-dir" target="_blank" rel="noopener">一つだけ</a>ありました。</p><ul><li>ListDir.java: Javaからネイティブイメージ作成</li><li>ExtListDir.java: 他の言語(JavaScript)を使ったサンプル</li></ul><p>他の言語を使ったサンプルも.javaファイルです。これは公式ドキュメントでも次のように説明されています。</p><blockquote><p>GraalVM native-image supports JVM-based languages, e.g., Java, Scala, Clojure, Kotlin. The resulting native image can, optionally, execute dynamic languages like JavaScript, Ruby, R, or Python, but it does not pre-compile their code itself.</p></blockquote><p>これを動的言語目線で再構成すると次のようになります。</p><ul><li>Pythonなどの動的言語は「実行はできる」が、それはJVMベースの言語（Java, Scala, Clojure, Kotlin）をホストにして、そこから呼び出す形</li><li>動的言語のコードは事前コンパイルされない</li></ul><p>これはつまり、動的言語の処理系はネイティブ化されるが、それによって実行されるコードはコード中の文字列のまま、ということですね。<a href="https://www.ibm.com/developerworks/jp/java/library/j-jython/index.html" target="_blank" rel="noopener">Jythonのjpythoncコマンド</a>のように、Pythonを.classにする機能でも入れば、Pythonを直接ネイティブ化という道も開けるんでしょうが、現状ではそれに対応していません。</p><p>ExtListDir.javaをPythonに書き換えたのが次のコードです。<code>Context.create()</code>とそのコンテキストの<code>eval()</code>に<code>&quot;python&quot;</code>を渡すことで、Pythonのコードが解釈されます。</p><figure class="highlight java"><figcaption><span>ExtListDir.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.graalvm.polyglot.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtListDir</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Context context = Context.create(<span class="string">"python"</span>);</span><br><span class="line">String s = <span class="string">"f'&#123;name&#125;: &#123;size&#125;'"</span>;</span><br><span class="line">      String root = <span class="string">"."</span>;</span><br><span class="line"><span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">root = args[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(args.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">s = args[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"Walking path: "</span> + Paths.get(root));</span><br><span class="line">System.out.println(<span class="string">"Python function body: "</span> + s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Value lambda = context.eval(<span class="string">"python"</span>,</span><br><span class="line">            <span class="string">"lambda name, size: "</span> + s);</span><br><span class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; paths = Files.walk(Paths.get(root))) &#123;</span><br><span class="line">paths.filter(Files::isRegularFile).forEach((Path p) -&gt; &#123;</span><br><span class="line">File f = p.toFile();</span><br><span class="line">Value v = lambda.execute(f.getName(), f.length());</span><br><span class="line">System.out.println(v);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これからネイティブバイナリを作成してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .classファイル作成</span></span><br><span class="line">% javac ExtListDir.java</span><br><span class="line"><span class="comment"># 動作確認で実行してみる</span></span><br><span class="line">% java ExtListDir</span><br><span class="line">% ネイティブイメージ作成</span><br><span class="line">% native-image --language:python ExtListDir</span><br></pre></td></tr></table></figure><p>すごく時間がかかります。MacBookAir 2020のCore i5です。13分かかってイメージサイズも240MBを超えました。インタプリタ部分をがんばってネイティブ化しているようです。</p><p>なお、pure Javaな場合の使い勝手は悪くないな、と思いました。javac&amp;javaでいつものように動作確認ができ、その後native-imageを使ってイメージ作成しても40秒かからず、サイズもJavaのランタイムが不要な6MBのバイナリになります。普段の開発はいつものようにjavacとjavaで高速にイテレーションを回し、最後にDocker化するときはnative-imageを使いつつ小さなDockerイメージを作成という流れで開発ができます。これはJavaにとってはとても良いものですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>GraalPythonを試しました。</p><ul><li>まだ実験リリース</li><li>いろんな言語を組み合わせて実行するpolyglotの処理系の一つとして実装されている</li><li>GraalVM 20系はPython 3.8ベース</li><li>機械学習に対応する部分を目指して開発されているが、Jythonモードがあったり、2.7で止まっているJythonの後継としても期待できる</li><li>まだ使えない公式ライブラリも多く、既存のライブラリも気軽に使えない</li><li>GraalVMのネイティブ化は時間もかかりバイナリもでかくなり、GraalVMの動的言語勢はメリットはない</li></ul><p>GraalVMはPythonが使える、GraalVMはネイティブイメージが使える、の二つの文章を読むと、Pythonがネイティブになりそうな印象も持ってしまいがちですが、そうではない、ということがわかりました。とはいえ、Python2.7時代のJython並に開発が進めば、用途はいろいろ広がると思います。楽しみですね。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ちょうど一年ぐらい前にGraalVMが商用利用可能な安定版に達し、Enterprise版もリリースされたというニュースがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.publickey1.jp/blog/19/graalvmgraalvm_
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="GraalVM" scheme="https://future-architect.github.io/tags/GraalVM/"/>
    
  </entry>
  
  <entry>
    <title>Zuora連載 Vol.4 Workflowの話</title>
    <link href="https://future-architect.github.io/articles/20200720/"/>
    <id>https://future-architect.github.io/articles/20200720/</id>
    <published>2020-07-19T15:00:00.000Z</published>
    <updated>2020-07-22T14:29:23.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの町田です。</p><p>Zuora Central Platform（Zuora社が提供するサブスクリプションプラットフォーム名の正式名称/以降 <strong>Zuora</strong> と記載いたします）の連載の第4回はWorkflowです。</p><p>Workflowは<a href="https://future-architect.github.io/articles/20200716/">前回の記事</a>で説明した通知機能と同じく、業務フローを設計する際に必ず理解する必要があります。また、Workflowは通知機能との組み合わせることが多いです。</p><p>他のZuora記事は<a href="https://future-architect.github.io/tags/Zuora/">こちら</a>を参照ください。</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li><a href="./#概要">概要</a></li><li><a href="./#Workflow開発方法">Workflow開発方法</a></li><li><a href="./#Workflow設定">Workflow設定</a></li><li><a href="./#Workflow実行方法">Workflow実行方法</a></li><li><a href="./#Task">Task</a></li><li><a href="./#Swimlane">Swimlane</a></li><li><a href="./#最後に">最後に</a></li><li><a href="./#関連リンク集">関連リンク集</a></li></ul><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Workflowの概要は<a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow" target="_blank" rel="noopener">Workflow - Zuora</a>から引用します。</p><blockquote><p>Zuora Workflow is a Zuora product for designing, configuring, and deploying business workflows in Zuora. With Workflow, you can automate a set of business processes that otherwise need to be performed manually and repetitively.<br>訳：Zuoraワークフローは、Zuoraでビジネスワークフローを設計、構成、および展開するためのZuora製品です。ワークフローを使用すると、手動で繰り返し実行する必要がある一連のビジネスプロセスを自動化できます。</p></blockquote><p>とあるように、Zuoraに実際の業務に合わせた制御を加えるために必須の機能です。業務プロセスの自動化や業務フローの設計には必ずWorkflowを利用することになるでしょう。</p><h1 id="Workflow開発方法"><a href="#Workflow開発方法" class="headerlink" title="Workflow開発方法"></a>Workflow開発方法</h1><ol><li>Zuoraログイン後のサイドメニューにて<code>プラットフォーム</code> &gt; <code>ワークフロー</code> を選択。  WorkflowのTOP画面である<code>OVERVIEW</code>タブに遷移する。ここではWorkflowの実行状況やサマリを確認することができる。<br><img src="/images/20200720/thumbnail.png" alt=""></li><li>WORKFLOWタブをクリックで、Workflow一覧画面に遷移する。右上の表示切替ボタンをクリックするとリスト形式の一覧にできます。編集したいWorkflowの<code>Edit</code>ボタンをクリックすることで、Workflow編集画面へと遷移する。<br><img src="/images/20200720/workflow_settings2.png" alt=""></li><li>Workflow編集画面: Workflowは<strong>Task</strong>と呼ばれる個々の機能を繋げ合わせることで完成する。<br><img src="/images/20200720/workflow_settings3.png" alt=""></li><li>▶ボタンがあるTaskが開始Taskとなっている<code>+</code>ボタンをクリックすることで後続Taskを追加することができる。<br><br><img src="/images/20200720/workflow_settings5.png" class="img-small-size"><br></li><li>開始Task移行のTask<ul><li><code>🖊</code>ボタン：Taskの設定・編集</li><li><code>x</code>ボタン：Taskの削除</li><li><code>+</code>ボタン：後続Taskを追加<br><br><img src="/images/20200720/workflow_settings6.png" class="img-small-size"><br></li></ul></li><li>Taskの追加:   各Taskの<code>+</code>をクリック後、Task成功時は<code>On Success</code>、Taskエラー時は<code>On Failure</code>を選択して追加したいTaskを選択する。各Taskの機能については<a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow" target="_blank" rel="noopener">Workflow - Zuora</a>を参照。<br><img src="/images/20200720/workflow_settings7.png" class="img-middle-size"><br></li></ol><h1 id="Workflow設定"><a href="#Workflow設定" class="headerlink" title="Workflow設定"></a>Workflow設定</h1><ol><li>Workflowの設定にはWorkflow全体の設定を、Workflowごとの設定がある<ul><li><strong>Workflow全体設定</strong>：<code>SETTINGS</code>タブをクリック: Workflowのメンテナンスをするためのユーティリティ、Workflow開発ユーザの設定、外部SMTPサーバの設定が可能。初期設定以外で触ることはほとんどないと思われる。<br><img src="/images/20200720/workflow_settings8.png" alt=""></li><li><strong>Workflowごとの設定</strong>：各Workflow編集画面で<code>SETTINGS</code>タブをクリック<br><img src="/images/20200720/workflow_settings9.png" alt=""></li><li><strong>Workflow Information:</strong> Workflow名、説明の設定</li><li><strong>Workflow Triggers:</strong> Workflowを実行する方法を選択<ul><li><strong>On Demand:</strong> チェックするとWorkflow一覧画面や編集画面から実行することができるようになる。</li><li><strong>Callout:</strong> チェックするとAPIによるWorkflowの実行ができるようになる。</li><li><strong>Scheduled:</strong> Cron形式でスケジュール実行の設定ができる。</li></ul></li><li><strong>Workflow Email Notifications:</strong> メールアドレスを設定することで、Workflow成功時、エラー時等にメールによる通知ができる。複数アドレス可。</li><li><strong>Execution Priority:</strong> Workflowの優先度を設定。同時に実行中のWorkflowがあった場合には、優先度が高いWorkflowが優先して実行される。</li><li><strong>Workflow Configuration:</strong> 設定不可</li><li><strong>Callout Config:</strong> WorkflowをコールアウトAPIで実行する場合の情報について確認できる。</li><li><strong>Mapped Input Fields and Params:</strong>  Workflow内で利用可能な変数はここで定義する。<br>コールアウトAPIによって呼ばれた際に、ここで設定したパラメータをリクエストBodyに設定することで値の受け渡しができる。</li></ul></li></ol><h1 id="Workflow実行方法"><a href="#Workflow実行方法" class="headerlink" title="Workflow実行方法"></a>Workflow実行方法</h1><p>Workflowの実行方法は以下3通りです。</p><ol><li><a href="./#①オンデマンド実行">オンデマンド実行</a></li><li><a href="./#②コールアウト実行">コールアウト実行</a></li><li><a href="./#③スケジュール実行">スケジュール実行</a></li></ol><p><a href="./#Workflow設定">Workflow設定</a>のWorkflowごとの設定の<strong>Workflow Triggers</strong>にてチェックした実行方法が有効となります。</p><h2 id="①オンデマンド実行"><a href="#①オンデマンド実行" class="headerlink" title="①オンデマンド実行"></a>①オンデマンド実行</h2><ul><li>Workflow一覧画面にて、実行したいWorkflowの<code>▶Run</code>をクリック<br><img src="/images/20200720/workflow_settings2.png" alt=""></li><li>またはWorkflow編集画面で開始Taskの▶をクリック<br><br><img src="" alt=""><img src="/images/20200720/workflow_run2.png" class="img-small-size"></li></ul><h2 id="②コールアウト実行"><a href="#②コールアウト実行" class="headerlink" title="②コールアウト実行"></a>②コールアウト実行</h2><p><a href="https://www.zuora.com/developer/api-reference/#operation/POST_Run_Workflow" target="_blank" rel="noopener">こちらのAPI</a>による実行。 <a href="./#Workflow設定">Workflow設定</a>のWorkflowごとの設定の<strong>Callout Config</strong>にてURLやRequest情報が確認できます。</p><pre><code class="sh">curl --location --request POST <span class="string">'https://workflow.apps.zuora.com/api/v1/workflows/{workflow_id}/run'</span> \--header <span class="string">'Content-Type: application/json; charset=utf-8'</span> \--header <span class="string">'API-Token: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span> \--data-raw <span class="string">'{</span><span class="string">    "{params}":"xxxxxx"</span><span class="string">}'</span></code></pre><p>Bodyに設定するパラメータは<a href="./#Workflow設定">Workflow設定</a>のWorkflowごとの設定の<strong>Mapped Input Fields and Params</strong>にて設定したパラメータを設定します。</p><img src="/images/20200720/workflow_run3.png" style="border:solid 1px #000000"><pre><code class="sh">--data-raw <span class="string">'{</span><span class="string">    "SubscriptionId":"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span><span class="string">}'</span>※Workflow内では、<span class="string">'{{ Data.Workflow.SubscriptionId }}'</span>のように取得する。</code></pre><h2 id="③スケジュール実行"><a href="#③スケジュール実行" class="headerlink" title="③スケジュール実行"></a>③スケジュール実行</h2><p><a href="./#Workflow設定">Workflow設定</a>のWorkflowごとの設定の<strong>Workflow Triggers</strong>にて<strong>Scheduled</strong>にチェックすると、<strong>Scheduled Config</strong>項目が表示されます。</p><img src="/images/20200720/workflow_run4.png" class="img-middle-size" style="border:solid 1px #000000"><p>設定は<code>Interval</code>欄にてcron形式で設定が可能だが、設定項目の各プルダウン項目を選択することでも設定が可能です。</p><h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><p>WorkflowはTaskの組み合わせて開発する。Taskについては<a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow" target="_blank" rel="noopener">Workflow - Zuora</a>に各Taskの機能説明あります。よく使うと思われるTaskを紹介します。</p><ol><li><a href="./#①Object-Query">Object Query</a></li><li><a href="./#②Data-Query">Data Query</a></li><li><a href="./#③CSVTranslator">CSVTranslator</a></li><li><a href="./#④Callout">Callout</a></li></ol><h2 id="①Object-Query"><a href="#①Object-Query" class="headerlink" title="①Object Query"></a>①Object Query</h2><p><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/AB_Query" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/AB_Query</a></p><p>Zuoraオブジェクトを選択してデータの取得を行うTaskです。</p><ul><li>選択<br><img src="/images/20200720/workflow_task4.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200720/workflow_task5.png" class="img-middle-size" style="border:solid 1px #000000"></li><li><code>FIELDS</code>タブで、選択したオブジェクトで取得したいフィールドを選択<br><img src="/images/20200720/workflow_task6.png" class="img-middle-size" style="border:solid 1px #000000"></li><li><code>CONDITIONS</code>タブで、取得条件を設定する<br><img src="/images/20200720/workflow_task7.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul><h2 id="②Data-Query"><a href="#②Data-Query" class="headerlink" title="②Data Query"></a>②Data Query</h2><p><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/AC_data_query" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/AC_data_query</a></p><p>SQL(<a href="https://knowledgecenter.zuora.com/Central_Platform/Query/ZOQL" target="_blank" rel="noopener">ZOQL</a>というらしい)によるデータのエクスポートを行うTask。Object Queryより柔軟なデータ取得ができます。</p><img src="/images/20200720/workflow_task1.png" class="img-middle-size" style="border:solid 1px #000000"><p>SQLを書くだけで、取得した結果はCSV、TSV、DSV、JSONにフォーマットして後続Taskに渡すことが可能です。</p><img src="/images/20200720/workflow_task2.png" style="border:solid 1px #000000"><p>超えることはそうそうないとは思うが、Data Queryには制限があるため注意しましょう。</p><img src="/images/20200720/workflow_task3.png" style="border:solid 1px #000000"><table><thead><tr><th align="left">LIMIT(制限)</th><th align="left">VALUE(閾値)</th></tr></thead><tbody><tr><td align="left">Max Execution Time(最大実行時間)</td><td align="left">120分</td></tr><tr><td align="left">Max Number of Input Records(入力レコード最大数)</td><td align="left">500K</td></tr><tr><td align="left">Max Number of Output Records(出力レコード最大数)</td><td align="left">100K</td></tr><tr><td align="left">Number of Concurrent Queries(同時クエリ数)</td><td align="left">5</td></tr><tr><td align="left">Max Memory per Query(1クエリ毎の最大メモリ数)</td><td align="left">2G</td></tr></tbody></table><h2 id="③CSVTranslator"><a href="#③CSVTranslator" class="headerlink" title="③CSVTranslator"></a>③CSVTranslator</h2><p>Data Queryなどで取得した結果をJSON構造やXML構造に変換するためのTaskです。</p><img src="/images/20200720/workflow_task10.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20200720/workflow_task9.png" class="img-middle-size" style="border:solid 1px #000000"><p>変換だけでなく、取得したデータをFilterしたり、Mergeができます。<br><img src="/images/20200720/workflow_task11.png" alt=""></p><p><strong><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/BG_Logic_JSON_Transform" target="_blank" rel="noopener">JSONTransform</a></strong>という、Data Queryなどで取得した結果をJSON構造に変換するためのTaskです。</p><img src="/images/20200720/workflow_task8.png" class="img-middle-size" style="border:solid 1px #000000"><p>クエリで取得した結果のデータをネストしたJSON構造などにする際にはこちらを利用する。主にJSONataという式を駆使して実装することになる。</p><img src="/images/20200720/workflow_task12.png" style="border:solid 1px #000000"><p>JSONata式による実装は若干とっつきにくいが、<a href="https://try.jsonata.org/SJZDsyHTr" target="_blank" rel="noopener">JSONata Exerciser</a>という便利ツールを利用することで、結果を確認しながら実装が可能です。</p><h2 id="④Callout"><a href="#④Callout" class="headerlink" title="④Callout"></a>④Callout</h2><p><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/IC_Notifications_Callout" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Central_Platform/Workflow/Workflow_tasks/IC_Notifications_Callout</a></p><p>Workflow内で取得・加工した結果をCalloutAPIを呼び出して連携するためのTaskです。</p><img src="/images/20200720/workflow_task14.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20200720/workflow_task13.png" style="border:solid 1px #000000"><ul><li>BODYタブでRequest.Bodyに設定する値を定義する。こちらは<a href="https://shopify.github.io/liquid/" target="_blank" rel="noopener">Liquid式</a>を利用して設定する。(<code>HELP</code>タブ参照)</li></ul><img src="/images/20200720/workflow_task15.png" style="border:solid 1px #000000"><ul><li>AUTHENTICATIONタブで、Callout呼び出し時の認証について設定する。認証方式はBasic認証、OAuth2.0やhmacなど利用可能です。</li></ul><img src="/images/20200720/workflow_task16.png" style="border:solid 1px #000000"><h1 id="Swimlane"><a href="#Swimlane" class="headerlink" title="Swimlane"></a>Swimlane</h1><p>Workflow開発時にデバッグをしたい場合に利用する機能です。詳細は<a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Using_Workflow/C_Monitor_and_Troubleshoot_a_Workflow" target="_blank" rel="noopener">こちら</a>参照ください。</p><ul><li>Workflow編集画面の<code>TASKS</code>タブを開くと、各タスクの実行履歴一覧が表示されるので、デバッグしたいTaskの行の一番左のメニューカラムをクリックして<code>Swimlane</code>をクリックする。</li><li>Swimlaneは一度でもWorkflowを実行してTask履歴が存在しないと確認できない。<br><img src="/images/20200720/workflow_swimlane2.png" alt=""></li><li>Swimlane画面では、各タスクの実行状況と、Workflow内の各パラメータ値やデバッグが行える。<br><img src="/images/20200720/workflow_swimlane3.png" alt=""></li><li>Workflow内で扱うパラメータ値。選択したTask時点のパラメータが表示される。<br><img src="/images/20200720/workflow_swimlane4.png" alt=""></li><li>エラーが発生しているTaskは赤い表示<br><br><img src="/images/20200720/workflow_swimlane5.png" class="img-small-size" style="border:solid 1px #000000"><br></li><li>エラーの内容はInfoで確認できる。<code>Workflow Task Config</code>や<code>Instance Config</code>で設定変更して<code>Rerun</code>で、そのTaskから再実行ができる。<img src="/images/20200720/workflow_swimlane6.png" style="border:solid 1px #000000"></li><li>Data QueryやCalloutによるWorkflow内でのAPI実行の結果は、<code>API Calls</code>でRequestやResponse内容が確認できる。<img src="/images/20200720/workflow_swimlane7.png" style="border:solid 1px #000000"><img src="/images/20200720/workflow_swimlane8.png" style="border:solid 1px #000000"></li></ul><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>予期せぬ動きをさせないためには、Workflow全体の動きや個々のTaskの動作をよく理解した上で使いこなす必要はありますが、WorkflowはZuoraとの連携を行ったシステム構築や、Zuoraの基本機能から外れた制御を行う場合には、必ず必要となる機能になります。</p><h1 id="関連リンク集"><a href="#関連リンク集" class="headerlink" title="関連リンク集"></a>関連リンク集</h1><p><strong>Workflow開発リンク集</strong>: </p><ul><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow" target="_blank" rel="noopener">Workflow - Zuora</a><ul><li>Workflowの概要、チュートリアル、使用例、Taskのリファレンスなどについて掲載</li></ul></li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/C_Get_Started_with_Workflow/General_steps_for_using_Workflow" target="_blank" rel="noopener">General steps for using Workflow - Zuora</a><ul><li>Workflowの開発手順について掲載</li></ul></li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Using_Workflow/A_Edit_a_Workflow" target="_blank" rel="noopener">Edit a Workflow - Zuora</a><ul><li>Workflow開発画面での編集方法について掲載</li></ul></li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/C_Get_Started_with_Workflow/C_Workflow_User_Interface" target="_blank" rel="noopener">Workflow User Interface - Zuora</a><ul><li>Workflow画面のUIについての説明が掲載</li></ul></li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Workflow/Using_Workflow/C_Monitor_and_Troubleshoot_a_Workflow" target="_blank" rel="noopener">Monitor and Troubleshoot a Workflow - Zuora</a><ul><li>Workflow実行した際の履歴の確認、デバッグ方法について掲載</li></ul></li></ul><p><strong>Workflow開発に便利なリンク集</strong>: </p><ul><li><a href="https://shopify.github.io/liquid/" target="_blank" rel="noopener">Liquid template language</a><ul><li>Workflowの一部のTaskの設定ではLiquid式というテンプレート言語を利用してロジックを書くことになる</li></ul></li><li><a href="https://try.jsonata.org/SJZDsyHTr" target="_blank" rel="noopener">JSONata Exerciser</a><ul><li>Workflowの一部のTaskでJSONata式でJSONフォーマットを行うことができます。上記はJSONataのテスターとして利用可能</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGの町田です。&lt;/p&gt;
&lt;p&gt;Zuora Central Platform（Zuora社が提供するサブスクリ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Workflow" scheme="https://future-architect.github.io/tags/Workflow/"/>
    
      <category term="Zuora" scheme="https://future-architect.github.io/tags/Zuora/"/>
    
      <category term="SaaS" scheme="https://future-architect.github.io/tags/SaaS/"/>
    
      <category term="サブスクリプション" scheme="https://future-architect.github.io/tags/%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>CORSのプリフライトリクエスト（OPTIONメソッド）はAPI Keyの認証なしでOKにしておかないと失敗する話</title>
    <link href="https://future-architect.github.io/articles/20200717/"/>
    <id>https://future-architect.github.io/articles/20200717/</id>
    <published>2020-07-16T15:00:00.000Z</published>
    <updated>2020-08-11T01:41:55.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニットの真野です。この技術ブログの運営や、ここ数年は産業向けのIoT（例えば工場IoTやモビリティIoT）を行っています。本エントリーのネタを書くキッカケになったのは、<a href="https://future-architect.github.io/articles/20200214/">GCP連載#7 GCPのData Transfer Serviceを使って簡単にS3からBigQueryにデータ転送をしてみる</a>の記事を書いたり、最近は<a href="https://future-architect.github.io/articles/20200204/">アイコン作成にまで手を伸ばしている</a>多芸な加部さんと某IoTな案件のバックエンドの接続テストをしているときに気がついたネタです。</p><h1 id="記事の概要"><a href="#記事の概要" class="headerlink" title="記事の概要"></a>記事の概要</h1><p>記事の内容ですが、<a href="https://future-architect.github.io/articles/20200421/">Real World HTTP 第2版はなぜ1.5倍になったのか | Future Tech Blog</a> で触れられている、以下のCORS周りについて書いていきます。</p><blockquote><p><strong>会社のチャットで、CORSのプリフライトリクエスト（OPTIONメソッド）は認証なしでOKにしておかないとCORSのやりとりが失敗する</strong> というのを見て、なるほどぉ、と思ったりもあります。</p></blockquote><p>上記でフンフンそうだよね、って理解された方は本記事の対象レベルを超えているので、生暖かく続きを御覧ください。これだけだとちょっとどういうことがわからいよ！って人向けに説明していきます。</p><h1 id="CORSとは"><a href="#CORSとは" class="headerlink" title="CORSとは"></a>CORSとは</h1><p>CORSとは <strong>オリジン間リソース共有</strong>（Cross-Origin Resource Sharing）の略で、HTTP ヘッダーを使用して、あるオリジンで動作しているウェブアプリケーションに、異なるオリジンにある選択されたリソースへのアクセス権を与えるようブラウザーに指示するための仕組みです。</p><ul><li>(参考)<a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CORS" target="_blank" rel="noopener">https://developer.mozilla.org/ja/docs/Web/HTTP/CORS</a></li></ul><p>最近はSPAな画面をブラウザで構築することが当たり前になってきていて、バックエンドの通信はJSON形式のWebAPI経由で通信することが多いと思いますが、最初のページを取得した <strong>オリジン</strong>  (≒ドメイン＋プロトコル＋ポート番号) と、WebAPIのオリジンが異なると、適切な設定なしでは以下のようなエラーメッセージがブラウザに表示されて上手く通信できません。</p><p><code>&#39;Access-Control-Allo-Origin&#39; header is present on the requested resource.</code> といったメッセージをブラウザのデベロッパーツールのコンソールで一度は見かけた人も多いのではないでしょうか？</p><p><img src="/images/20200717/thumbnail.png" alt=""></p><h1 id="CORSのプリフライトリクエストについて"><a href="#CORSのプリフライトリクエストについて" class="headerlink" title="CORSのプリフライトリクエストについて"></a>CORSのプリフライトリクエストについて</h1><p>もし、WebAPIのリクエストに <code>x-api-key</code> のようなフィールドを用いて認証を行っている場合は、CORSの仕様では実際のHTTPリクエストを行う前に、 <strong>プリフライトリクエスト</strong> という、 <strong>OPTIONS</strong> メソッドでサーバに要求が行われます。</p><p><img src="/images/20200717/preflight_correct.png" alt=""></p><p><a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CORS#Preflighted_requests" target="_blank" rel="noopener">オリジン間リソース共有 (CORS)</a> から引用</p><p>上図ですが、OPTIONSメソッドには、<code>Origin</code>、<code>Access-Control-Request-Method</code>、<code>Access-Control-Request-Headers</code> のリクエストヘッダが含まれ（1番上の矢印）、それに対してサーバ側が<code>Access-Control-Allow-Origin</code>にリクエストされたオリジンの値、<code>Access-Control-Allow-Methods</code>に先ほどのメソッドを含めた値、<code>Access-Control-Allow-Headers</code>に先ほど要求が合ったヘッダの名称を含めてレスポンスする必要があります（2番目の矢印）。上記の条件を満たせば、ブラウザは通常のメインのリクエストをサーバに要求します。（3,4番目の矢印）</p><p>CORSに対しては、上記のmozillaの記事や、tomoyukilabsさんのQiitaにある<a href="https://qiita.com/tomoyukilabs/items/81698edd5812ff6acb34" target="_blank" rel="noopener">CORSまとめ</a>も網羅的でオススメです。CORSは必ずプリフライトリクエストが飛ぶのではなく、条件によっては「単純リクエスト」と呼ばれる簡易的な認証を行う場合もあるなど細かい仕様は学びがあります。そもそもなんでCORSという決まり事があるかというと、<a href="https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">同一オリジンポリシー</a>があって、なぜ同一オリジンポリシーが存在するかというと、ユーザーの情報を他サイトに漏れてしまわないようにといったセキュリティ上の理由が上げられます。</p><h1 id="GoでのCORS設定例"><a href="#GoでのCORS設定例" class="headerlink" title="GoでのCORS設定例"></a>GoでのCORS設定例</h1><p>GoでCORSの設定をする際は、自前で上記のリクエストヘッダに対応した、レスポンスヘッダを設定すれば良く、net/httpのミドルウェア実装できそうです。というかすでにそういったライブラリが存在します。</p><ul><li>echoだと公式ドキュメントから<a href="https://echo.labstack.com/middleware/cors" target="_blank" rel="noopener">リンク</a>があります</li><li>go-swaggerだと<a href="https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_documenting.md#how-to-use-swagger-ui-cors" target="_blank" rel="noopener">FAQ</a> に記載があり、<a href="https://github.com/rs/cors" target="_blank" rel="noopener">rs/cors</a> のライブラリを使った例が記載されてします</li></ul><figure class="highlight go"><figcaption><span>go-swaggerの実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/rs/cors"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// go-swaggerの生成先次第だが、configure_xxx.goに実装するならこんな感じ</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupGlobalMiddleware</span><span class="params">(h http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">myCORS := cors.AllowAll() <span class="comment">// 実装例として全OKにしています</span></span><br><span class="line"><span class="keyword">return</span> myCORS.Handler(h)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cors.AllowAll()</code> で、全オリジンを許可、全メソッドを許可、全ヘッダを許可、クレデンシャルはNGになります。今回は社内LAN内で利用されるシステムですが、それでもオリジン、利用するメソッドなど絞り込めるのあれば設定した方が固いとは思います。</p><p>さて、これでCORSに関してのサーバサイドの設定はオシマイ、後はフロントエンドからの接続を待つだけ。</p><p>…</p><p>…</p><p>…<strong>🔥🔥そう思っていましたが、上手く動かないという報告😱が上がりました🔥🔥🔥</strong></p><h1 id="🔥状況"><a href="#🔥状況" class="headerlink" title="🔥状況"></a>🔥状況</h1><p>ブラウザを見ると、確かに<code>&#39;Access-Control-Allo-Origin&#39; header is present on the requested resource.</code>のエラーメッセージが表示されていました。明らかにCORS周りが原因です。プリフライトリクエストに対してサーバサイドが想定したレスポンスをしていないと思われます。一方で、ローカルや開発環境でのテストでは問題なくブラウザと疎通が取れている。curlコマンドでも動いてもいました。</p><figure class="highlight bash"><figcaption><span>curlでも疎通確認した例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curlで確認した例。OriginヘッダやAccess-Control-Request-Methodヘッダ付きで想定通りか確認</span></span><br><span class="line">curl -H <span class="string">"Origin:http://example.com"</span> -H <span class="string">"Access-Control-Request-Method:GET"</span> -X OPTIONS -k --dump-header - https://&lt;dev.api.example.com&gt;/v1/health</span><br><span class="line">HTTP/1.1 200 Connection Established</span><br><span class="line">Proxy-Agent: IWSS</span><br><span class="line">Date: Wed, 12 Feb 2020 03:01:20 GMT</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 12 Feb 2020 03:01:21 GMT</span><br><span class="line">Content-Length: 0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Access-Control-Allow-Methods: GET</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Vary: Origin</span><br><span class="line">Vary: Access-Control-Request-Method</span><br><span class="line">Vary: Access-Control-Request-Headers</span><br></pre></td></tr></table></figure><h1 id="切り分け"><a href="#切り分け" class="headerlink" title="切り分け"></a>切り分け</h1><p>Chromeブラウザだけかもしれませんが、プリフライトリクエストはデベロッパーツール上からは省略されていて分かりにくいです。これは <code>chrome://flags/#out-of-blink-cors</code> で<code>Out of blink CORS</code> を Disableにすれば表示することができます。 </p><p><img src="/images/20200717/image.png" alt=""></p><p>また、脳内でブラウザの気持ちになることができるのであれば、先ほどのcurlで適切なリクエストヘッダを付与することでサーバサイドが想定通りか確認することができます。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>上記で色々切り分けていくと、原因はアプリケーションコード側ではなく、<strong>WAF</strong>(ウェブアプリケーションファイアウォール)側にありました。今回の構成は以下のように、連携先のフロントエンド側ごとにAPI Keyを発行して、それをWAFで認証する仕組みでした。私が確認したのは開発環境であり、プロダクションやステージングとは環境差異があったようです。</p><p><img src="/images/20200717/CORS%E3%81%A8WAF%E3%83%96%E3%83%AD%E3%82%B0%E7%94%A8.png" alt=""></p><p>APIキーは <code>x-api-key:aZ12kXCqGrZ9QTnqDtid1P6j2J7luB3v</code>のようなイメージでリクエストヘッダに付与するルールで、これが付与されていないとWAF側でブロックします（403 Forbiddenを返します）。</p><p><img src="/images/20200717/cors_sequence.png" alt=""></p><p>プリフライトリクエストをWAFがブロックすのは想定外で、考慮が漏れていました。分かったときは「なるほど！」とちょっと大きな声を上げました。WAFの設定はどちらかと言えばインフラ側のメンバーが設定したのでお互いの考慮が漏れやすいポイントでもあった気がします。</p><h1 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h1><p>①WAF側のルールを変えるか、②ブラウザ側でプリフライトリクエスト時にAPI Keyを渡すように設定変更するかを考えました。しかし②ですが、XMLHttpRequestでプリフライトするときに任意のリクエストヘッダが追加できるか調べたところ、以下の回答にある通り仕様として不可でした。そのため、①のWAF側のルールを変更することになります。</p><p><a href="https://stackoverflow.com/questions/58547499/is-it-possible-to-add-a-request-header-to-a-cors-preflight-request" target="_blank" rel="noopener">https://stackoverflow.com/questions/58547499/is-it-possible-to-add-a-request-header-to-a-cors-preflight-request</a></p><h2 id="WAFのルール変更"><a href="#WAFのルール変更" class="headerlink" title="WAFのルール変更"></a>WAFのルール変更</h2><p>以下のようにプリフライトリクエストに対応するため、OPTIONSメソッド<strong>も</strong>許可するようにします。</p><p>WAFの変更後のルール：</p><ol><li>Request Heaerに x-api-key が指定の文字列から開始している</li><li>OPTIONメソッドである</li><li>1または2を満たす場合に許可する</li></ol><p>今回、WAFはAWS WAFを利用していたので、2のプリフライトリクエストかどうかのチェックは <code>String and regex match conditions</code>のフィルターで、HTTP Methodを選択できるため、<code>Match type</code>を <code>Exactly matches</code>を選択し、Value to matchに <code>OPTIONS</code> を設定します。</p><p><img src="/images/20200717/image.png" alt=""></p><p>あとは、web ACLに先ほど作成したPreflight-request-checkのルールをAPI Keyのルールに追加し、<code>Default action</code>に<code>Block all requests that don&#39;t match any rules</code> を選択すれば、API Key認証を残しつつ、しかしプリフライトリクエストを受け付けることができます。</p><p>この対応で無事WebAPIをブラウザが利用することができました！</p><p><img src="/images/20200717/68747470733a2f2.png" alt=""></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>最後までお付き合いいただき、ありがとうございます。ちょっとしたネタでしたが、少しでもReal World HTTPなドタバタが伝わったら幸いです。</p><ul><li>もしCORS周りで問題が起こったら、ブラウザの設定でプリフライトリクエストも表示すると調査が捗る</li><li>リクエストヘッダを利用したAPI Key認証を行う場合、全てのHTTPメソッドを対象にするのではなく、OPTIONSは通しておく</li><li>WAFで上記の認証を行う場合は、そういった除外設定ができるか確認しておく</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXユニットの真野です。この技術ブログの運営や、ここ数年は産業向けのIoT（例えば工場IoTやモビリティ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
      <category term="CORS" scheme="https://future-architect.github.io/tags/CORS/"/>
    
      <category term="HTTP" scheme="https://future-architect.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Zuora連載 Vol.3 Notification及びEventTriggerの話</title>
    <link href="https://future-architect.github.io/articles/20200716/"/>
    <id>https://future-architect.github.io/articles/20200716/</id>
    <published>2020-07-16T01:49:27.000Z</published>
    <updated>2020-07-18T03:13:15.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの町田です。</p><p>Zuora Central Platform（Zuora社が提供するサブスクリプションプラットフォーム名の正式名称/以降 <strong>Zuora</strong> と記載いたします）の連載の第3回は、Notification(以後、通知機能)とイベントトリガー(EventTrigger)についてのお話です。</p><p>通知機能はZuora上の様々なイベントをトリガーに、メール通知やコールアウトによる通知・連携が行えます。業務フローを設計する際には、必ず理解しておく必要がある機能になるかと思います。通知機能についての概要やできること、設定方法について解説していきます。</p><p>過去のZuora記事は<a href="https://future-architect.github.io/tags/Zuora/">こちら</a>を参照ください。</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li><a href="./#概要">概要</a></li><li><a href="./#設定方法">設定方法</a></li><li><a href="./#メールテンプレート">メールテンプレート</a></li><li><a href="./#コールアウト">コールアウト</a></li><li><a href="./#カスタムイベントトリガー">カスタムイベントトリガー</a></li><li><a href="./#最後に">最後に</a></li><li><a href="./#関連リンク集">関連リンク集</a></li></ul><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>通知機能は、<strong>イベント定義＋Notification(通知)の組み合わせ</strong>で設定します。</p><ul><li><strong>イベント定義</strong>: <a href="./#カスタムイベントトリガー">カスタムイベントトリガー</a>で後述するが、Zuora上でのオペレーションによって起こるオブジェクトなどの登録・更新・削除をトリガーとして後続の処理（通知）を行うための定義のこと</li><li><strong>Notification(通知)</strong>: イベント定義のトリガー発火を受けて、メール送信やコールアウトによるAPI呼び出しを行うための機能のこと</li></ul><img src="/images/20200716/photo_20200716_01.png" class="img-middle-size"><p>※上記シーケンス図補足</p><table><thead><tr><th>Process</th><th>Comment</th></tr></thead><tbody><tr><td>1. Operation</td><td>UserによるZuoraへのなんらかの操作(UI, API, Batchなど)が発生</td></tr><tr><td>2. Polling</td><td>特定の操作やオブジェクトに対する変更を監視</td></tr><tr><td>3. Event fire</td><td>イベント発火による通知機能の実行</td></tr><tr><td>4. Call/Send</td><td>メール通知やCalloutの呼び出し</td></tr></tbody></table><p>ロジックによる制御を挟みたい場合は、通知機能からWorkflowを呼び出すことで実現できます。</p><p>利用場面は以下のようなケースです。</p><ul><li>コールアウトAPIに設定するリクエスト形式がネストしているなど、コールアウトAPIの設計に合わせたリクエストが、通知機能からのコールアウトだけではできない場合</li><li>イベント定義からのパラメータだけではできないデータの取得・加工を行いたい場合<br></li></ul><img src="/images/20200716/photo_20200716_02.png" class="img-middle-size"><p>※上記シーケンス図補足</p><table><thead><tr><th>Process</th><th>Comment</th></tr></thead><tbody><tr><td>1. Operation</td><td>UserによるZuoraへのなんらかの操作(UI, API, Batchなど)が発生</td></tr><tr><td>2. Polling</td><td>特定の操作やオブジェクトに対する変更を監視</td></tr><tr><td>3. Event fire</td><td>イベント発火による通知機能の実行</td></tr><tr><td>4. Call Workflow</td><td>NotificationからWorkflow呼び出し～Workflowsにてロジックによる処理実行</td></tr><tr><td>5. Call/Send</td><td>Workflow内でのメール通知またはCalloutの呼び出し</td></tr></tbody></table><h1 id="設定方法"><a href="#設定方法" class="headerlink" title="設定方法"></a>設定方法</h1><ol><li>Zuoraログイン後の右上ユーザメニューを開き、<code>請求</code>を選択します<br> <img src="/images/20200716/photo_20200716_03.png" class="img-middle-size"></li><li>請求メニューで<code>プロファイル、通知、およびメールテンプレートのセットアップ</code>を選択します<br> <img src="/images/20200716/photo_20200716_04.png" class="img-middle-size" style="border:solid 1px #000000"></li><li>通知設定画面に遷移する。ここで通知の確認や追加・編集・削除を行う。新しい通知を作成する場合は、<code>新しい通知の追加</code>ボタンをクリックします<br> <img src="/images/20200716/photo_20200716_05.png" class="img-middle-size" style="border:solid 1px #000000"></li><li>新しい通知の作成モーダルが開くので、まず初めに<code>関連イベント</code>を選択します<ul><li><strong>関連イベント</strong>: 通知を発火する条件のこと。デフォルトで用意されているイベントやカスタムイベントを選択する</li><li><strong>有効</strong>: このチェックボックスにチェックしておかないと、通知機能が有効とならない<br><img src="/images/20200716/photo_20200716_06.png" class="img-middle-size"></li></ul></li><li>プルダウンで<code>関連イベント</code>を選択すると、イベントパラメータや配信オプションが設定できます<ul><li><strong>イベントパラメータ</strong>: 項目は選択した関連イベントによって異なる。イベントの細かい条件などを設定します</li><li><strong>配信オプション</strong>:  メールとコールアウトが選択可能。メールを選択した場合は、どのメールテンプレートを使用するか選択する。メールテンプレートは予め別画面にて作成しておく必要がある。 そのメールテンプレートにて設定したアドレスに対して通知が送信される。<a href="#メールテンプレート">詳細は後述</a>。コールアウトでは、イベントを受けて配信したいURLに対して、イベントに関連したパラメータを付与してリクエストが可能。<a href="#コールアウト">詳細は後述</a>。<br><img src="/images/20200716/photo_20200716_07.png"></li></ul></li></ol><h1 id="メールテンプレート"><a href="#メールテンプレート" class="headerlink" title="メールテンプレート"></a>メールテンプレート</h1><p>通知機能で使用可能なメールのテンプレートは、デフォルトで用意もされているが、新しく追加することができます。メール本文には、関連イベントから受け取ったパラメータ等の差し込みが可能です。</p><ol><li>通知設定画面にて<code>メールテンプレート</code>タブを選択します<br> <img src="/images/20200716/photo_20200716_08.png"></li><li>メールテンプレートリスト画面に遷移択します。ここではテンプレートの追加・編集・削除ができる。テンプレートを新しく追加したい場合は<code>新規メールテンプレートの追加</code>をクリック択します<br> <img src="/images/20200716/photo_20200716_09.png" style="border:solid 1px #000000"></li><li>テンプレート編集画面<ul><li><strong>基本情報:</strong>: テンプレート名・関連イベントを設定択します。ここで選択した関連イベントに関係するパラメータを差し込みフィールドとしてメール本文に利用できる</li><li><strong>メール情報</strong>: 差出人や宛先を設定可能<br><img src="/images/20200716/photo_20200716_10.png" style="border:solid 1px #000000"></li></ul></li><li>テンプレート本文<ul><li><strong>利用可能な差し込みフィールド</strong>: メール本文に差し込むフィールドのタグが確認可能です。関連イベントを選択すると、そのイベントに関連したパラメータが選択できるようになります</li><li><strong>件名</strong>: メールの件名を設定。ここでも差し込みフィールドの利用は可能です</li><li><strong>本文</strong>: フォーマットはHTMLかプレーンテキストを選択できます<br><img src="/images/20200716/photo_20200716_11.png" style="border:solid 1px #000000"></li></ul></li></ol><h1 id="コールアウト"><a href="#コールアウト" class="headerlink" title="コールアウト"></a>コールアウト</h1><p>コールアウトとは、外部WebサービスのAPIのコール、HTTP要求を送信して応答を受信することです。</p><p><strong>コールアウトの設定画面:</strong></p><ul><li>呼び出すCalloutのURLを設定。Workflowを呼び出す場合は、Workflow設定画面で確認できるURLを設定します<br><img src="/images/20200716/photo_20200716_12.png" style="border:solid 1px #000000"></li><li><strong>パラメータ</strong>: ここで選択可能なパラメータは、選択したイベントに関連したパラメータのみが選択可能。ネストしたパラメータはできない</li><li><strong>HTTPメソッド</strong>: POST,PUT,GET,DELETEが選択可能</li><li><strong>再試行</strong>: チェックした場合、コールアウトの呼び出しエラー時に再試行を行う</li><li><strong>ユーザ名/パスワード/ドメイン</strong>: Basic認証またはNTLM認証のみが選択可能。より安全な認証を利用したい場合は、WorkflowのCalloutで行うことができるため、Workflowを挟む必要がある</li><li><strong>プレビュー</strong>: プレビューボタンをクリックすると、実際に送信するリクエストやヘッダ等の確認ができる</li></ul><h1 id="カスタムイベントトリガー"><a href="#カスタムイベントトリガー" class="headerlink" title="カスタムイベントトリガー"></a>カスタムイベントトリガー</h1><ul><li>通知機能にて利用可能なイベントは、デフォルトで用意されているイベント以外に、カスタムで追加可能です<br>  <img src="/images/20200716/photo_20200716_13.png" style="border:solid 1px #000000"></li><li>イベントトリガーはZuoraAPIを利用してのみ登録・更新・削除が可能です<ul><li>イベントはZuoraのオブジェクト単位で設定が可能です</li><li>設定が可能なオブジェクトやパラメータ等の詳細は、<a href="https://www.zuora.com/developer/api-reference/#operation/POST_EventTrigger" target="_blank" rel="noopener">API Reference - Developer Center - Zuora</a>を参照してください</li><li>追加すると、通機設定画面の関連イベントのプルダウンメニューに追加されます</li></ul></li></ul><p><strong>リクエスト例</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST <span class="string">'https://rest.apisandbox.zuora.com/events/event-triggers'</span> \</span><br><span class="line">--header <span class="string">'Content-Type: application/json; charset=utf-8'</span> \</span><br><span class="line">--data-raw <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "baseObject": "Subscription",</span></span><br><span class="line"><span class="string">    "condition": "changeType == '</span>\<span class="string">''</span>INSERT<span class="string">'\'</span><span class="string">' || changeType == '</span>\<span class="string">''</span>UPDATE<span class="string">'\'</span><span class="string">'",</span></span><br><span class="line"><span class="string">    "description": "説明",</span></span><br><span class="line"><span class="string">    "eventType": &#123;</span></span><br><span class="line"><span class="string">        "name": "イベント名",</span></span><br><span class="line"><span class="string">        "displayName": "表示名",</span></span><br><span class="line"><span class="string">        "description": "説明"</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "active": true</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>パラメータ補足:</strong></p><ul><li><strong>baseObject</strong>： 監視するオブジェクトを設定<ul><li>例：Subscription</li></ul></li><li><strong>condition</strong>： baseObjectに設定したオブジェクトのトリガー条件をJEXL式で設定<ul><li>例：オブジェクト登録・更新時にイベントをトリガー:<br><code>changeType == &#39;INSERT&#39; || changeType == &#39;UPDATE&#39;</code></li><li>例：請求が1000を超えた金額で更新された場合にイベントをトリガー:<br><code>changeType == &#39;UPDATE&#39; &amp;&amp; Invoice.Status == &#39;Posted&#39; &amp;&amp; Invoice.Status_old != &#39;Posted&#39; &amp;&amp; Invoice.Amount &gt; 1000</code></li></ul></li></ul><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>通知機能はZuora上の様々なイベントを業務と繋げるためには、必ず使いこなす必要がある機能です。特にWorkflowを実行するためのトリガーとして利用することも多いでしょう。</p><p>次回はそのWorkflowについて説明します。</p><h1 id="関連リンク集"><a href="#関連リンク集" class="headerlink" title="関連リンク集"></a>関連リンク集</h1><p>通知機能をフル活用するために最低限必要な知識を付けるための関連リンクです。</p><ul><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Notifications" target="_blank" rel="noopener">Notifications - Zuora</a><br>通知機能について概要が書かれています。</li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Notifications/C_Create_Notifications" target="_blank" rel="noopener">Create and Edit Notifications - Zuora</a><br>通知の作成方法について手順が書かれています。</li><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Notifications/A_Viewing_the_Supported_Event_Types" target="_blank" rel="noopener">Supported Event Types - Zuora</a><br>通知機能で利用できるイベントについて書かれています。ここに記載のイベントはZuoraでデフォルトでサポートされているイベントとなるようです。</li><li><a href="https://www.zuora.com/developer/api-reference/#operation/POST_EventTrigger" target="_blank" rel="noopener">API Reference - Developer Center - Zuora</a><br>Zuoraのオブジェクトに対してカスタムのトリガーを定義するためのAPIのリファレンスです。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGの町田です。&lt;/p&gt;
&lt;p&gt;Zuora Central Platform（Zuora社が提供するサブスクリ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Zuora" scheme="https://future-architect.github.io/tags/Zuora/"/>
    
      <category term="SaaS" scheme="https://future-architect.github.io/tags/SaaS/"/>
    
      <category term="サブスクリプション" scheme="https://future-architect.github.io/tags/%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
  </entry>
  
</feed>
