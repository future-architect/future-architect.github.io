<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Future Tech Blog - フューチャーアーキテクト</title>
  <subtitle>フューチャーアーキテクト開発者ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2017-12-17T05:40:06.696Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第1回Future開発合宿</title>
    <link href="https://future-architect.github.io/articles/20171217/"/>
    <id>https://future-architect.github.io/articles/20171217/</id>
    <published>2017-12-17T05:28:42.000Z</published>
    <updated>2017-12-17T05:40:06.696Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://adventar.org/calendars/2449" target="_blank" rel="noopener">フューチャーアーキテクト裏アドベントカレンダー2017</a>の16日目です。</p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>開発合宿とは…<br>新しいナニカを生み出すための儀式である…</p>
<p>みなさまこんにちは。早2年目になりました谷村です。</p>
<p>2017年はWeb業界で開発合宿が何かと話題になる年でしたね。流れに乗ってFutureでも合宿を開催してみたので、今後合宿を開催してみたい方や、合宿行ってみたいけど迷ってる方向けにレポートします。</p>
<p>なお、Futureでいう開発合宿は、各々がプライベートで開発したいものを開発する有志活動です。</p>
<h1 id="開催のきっかけ"><a href="#開催のきっかけ" class="headerlink" title="開催のきっかけ"></a>開催のきっかけ</h1><p>ある日、<a href="https://github.com/future-architect/vuls" target="_blank" rel="noopener">Vuls</a>でおなじみの神戸さんが、<a href="https://go-beginners.connpass.com/event/47481/" target="_blank" rel="noopener">Golangの合宿</a>があるらしいぞと持ちかけてきまして、<a href="https://dotstud.io/blog/go-beginners-camp-report/" target="_blank" rel="noopener">行ってみたらめっちゃ楽しかった</a> です！</p>
<p>Futureでもやろうよ、と言ってみたら、</p>
<blockquote>
<p>いいじゃん、感動した。<br>谷村くん、スゴイわ。<br>こんな天才がいたとは素晴らしいわ。</p>
</blockquote>
<p>とおだてられたので開催してみました。</p>
<h1 id="開催準備"><a href="#開催準備" class="headerlink" title="開催準備"></a>開催準備</h1><p>簡単3stepで、1人で幹事が出来ました。<br>基本的にGo合宿を <del>パク</del> リスペクトしました。</p>
<ol>
<li><a href="http://www.dozenryokan.com" target="_blank" rel="noopener">土善旅館さん</a>に「Go合宿と同じように開催したいんでよろしく。」と伝える</li>
<li>社内で声かけてまわって、人を集める</li>
<li>Go合宿のしおりを <del>パク</del> リスペクトして作成した<a href="https://gist.github.com/tng527/70a3af19aad64c6dfa0f4214868a4a7e" target="_blank" rel="noopener">しおり</a>を参加者に投げる</li>
</ol>
<p>※支払いは、「LINE Payでよろしく！」と自分のIDを晒しておくと、勝手にお金が送られてきます。マジ神</p>
<h1 id="当日まとめ"><a href="#当日まとめ" class="headerlink" title="当日まとめ"></a>当日まとめ</h1><p>土善旅館さんが最高過ぎてブログが長くなるので、先にまとめておきます。</p>
<ul>
<li>開発部屋が広い！20m四方くらい？</li>
<li>NW強い！まさかの冗長化構成！</li>
<li>外部ディスプレイ無料！開発捗る！！</li>
<li>スクリーンでっかい！100インチくらい？深夜からアニメの上映会もやりました。</li>
<li>夕食うまい！しゃぶしゃぶとか寿司とかめっちゃ豪華！</li>
<li>安い安いアンド安い！ 会費13,000円で1泊3食デザート付、お酒飲み放題！</li>
</ul>
<p><img src="/images/20171217/photo_20171217_01.jpeg"></p>
<h1 id="当日の様子詳細"><a href="#当日の様子詳細" class="headerlink" title="当日の様子詳細"></a>当日の様子詳細</h1><p>それでは順を追って合宿の様子を写真メインでお送りします。<br>土善旅館さんは千葉の奥地にあるので、みんなで電車で向かいます。3時間くらい。</p>
<p><img src="/images/20171217/photo_20171217_02.jpeg"><br>移動中から開発合宿は始まっているのだ…！</p>
<p><img src="/images/20171217/photo_20171217_03.jpeg"></p>
<p>最寄りの笹川駅に着いたら、宿に向かう前にご飯を食べます。<br>青柳亭のしじみ丼がこの辺の名産らしい。</p>
<p><img src="/images/20171217/photo_20171217_04.jpeg"><br>ようやく宿に到着です。歴史ある感じですが、清潔で気持ち良いです。</p>
<p><img src="/images/20171217/photo_20171217_05.jpeg"><br>到着したらまずは乾杯、これ基本。</p>
<p><img src="/images/20171217/photo_20171217_06.jpeg"><br>広い机と外部ディスプレイ、電源タップ、それと<a href="https://yogibo.jp" target="_blank" rel="noopener">人を駄目にする枕高級版</a>が用意されています。</p>
<p><img src="/images/20171217/photo_20171217_07.jpeg"><br>物理的な開発環境を整えたら、各々のスタイルで開発を始めます。</p>
<p><img src="/images/20171217/photo_20171217_08.jpeg"><br>お酒片手に。</p>
<p><img src="/images/20171217/photo_20171217_09.jpeg"><br>開発に飽きた頃に、講義とかやってみたり。<br>写真は競技プログラミング部長・塚本さんのアルゴリズム講座です。</p>
<p><img src="/images/20171217/photo_20171217_10.jpeg"><br>今回は各々が好きなものを開発するスタイルの合宿ですが、<br>一人じゃないから質問や相談も可能！！</p>
<p><img src="/images/20171217/photo_20171217_11.jpeg"><br>ハマったタイミングで看板猫が癒やしを運んできます。</p>
<p><img src="/images/20171217/photo_20171217_12.jpeg"><br>開発しているとご飯の時間がやってまいりました。<br>別のお座敷が用意されるという豪華っぷり。</p>
<p><img src="/images/20171217/photo_20171217_13.jpeg"><br>当然ご飯も豪華です。</p>
<p><img src="/images/20171217/photo_20171217_14.jpeg"><br>食後は卓球で腹ごなしです。なんだ、ただの最高の旅館か。</p>
<p><img src="/images/20171217/photo_20171217_15.jpeg"><br>ロデオボーイも完備。スポッチャ以外で乗る日が来るとは。</p>
<p><img src="/images/20171217/photo_20171217_16.jpeg"><br>そしてまたひたすら開発…</p>
<p><img src="/images/20171217/photo_20171217_17.jpeg"><br>てっぺん(24時)を超えたら集合写真です。エンジニアの夜は遅い。</p>
<p><img src="/images/20171217/photo_20171217_18.jpeg"><br>そして開発合宿の朝は早い。朝ごはんは優しいお味で健康的です。</p>
<p><img src="/images/20171217/photo_20171217_19.jpeg"><br><img src="/images/20171217/photo_20171217_20.jpeg"><br>そして開発合宿の締め。成果発表会です。<br>各々の開発成果についてアピールします。</p>
<p><img src="/images/20171217/photo_20171217_21.jpeg"><br>旅館からのサービスのデザートを食べながら真剣に聞いています。<br>なんだただのサービスが最高の旅館か。</p>
<p><img src="/images/20171217/photo_20171217_22.jpeg"><br>投票でスゴかった発表を決め、<del>余っ</del>景品のお酒を贈呈しました。</p>
<h1 id="振り返り"><a href="#振り返り" class="headerlink" title="振り返り"></a>振り返り</h1><h3 id="keep"><a href="#keep" class="headerlink" title="keep"></a>keep</h3><ul>
<li>旅館の環境・サービスが良すぎる</li>
<li>コンテンツ(講義・LT)が充実していた</li>
<li>LT全員強制参加が良かった</li>
</ul>
<h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><ul>
<li>LINE Payの導入連絡が遅い</li>
<li>お酒の種類が少ない(ビール以外もほしい)</li>
<li>場所が遠かった(電車で片道約3時間)</li>
</ul>
<h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><ul>
<li>土善旅館以外での開催</li>
<li>人数の規模を大幅に拡大して開催</li>
<li>取り組むことのテーマを縛って開催</li>
</ul>
<p>本合宿は2017/6/10-11に実施しました。<br>第2回は2017/12/16-17を予定しています。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://adventar.org/calendars/2449&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;フューチャーアーキテクト裏アドベントカレンダー2017&lt;/a&gt;の16日目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a
    
    </summary>
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="Camp" scheme="https://future-architect.github.io/tags/Camp/"/>
    
  </entry>
  
  <entry>
    <title>Future IoT デバイス</title>
    <link href="https://future-architect.github.io/articles/20171207/"/>
    <id>https://future-architect.github.io/articles/20171207/</id>
    <published>2017-12-07T04:00:00.000Z</published>
    <updated>2017-12-13T03:25:25.306Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://qiita.com/advent-calendar/2017/future" target="_blank" rel="noopener">フューチャーアーキテクト Advent Calendar 2017</a>の7日目です。</p>
<hr>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2017年、社内のR&amp;Dチームにて開発した汎用IoTデバイスについて紹介したいと思います。<br>デバイスの各辺の長さは約4.5cmの立方体で、異なる拡張モジュールを最大8つ内蔵、もしくはGroveコネクタ準拠のセンサーなどを外付けできる形になっています。</p>
<p>こんな感じのサイコロ型のデバイスです。<br><img src="/images/20171207/photo_20171207_02.jpeg"></p>
<p>アップすると FutureIoT のロゴが印字されています。<br><img src="/images/20171207/asset_20171207_01.png"></p>
<p>ちなみに、なんで鶴なんだ？とよく聞かれるのでこの場をお借りして回答しておきます。</p>
<p><strong>FutureIoTのロゴの由来</strong></p>
<ul>
<li>点はデバイスやセンサーで、線がネットワークで、様々なコネクティッドを表しています</li>
<li>鶴を形どっていて縁起がよく「仲良きことの象徴」の鳥です</li>
<li>鳴き声が共鳴して遠方まで届くことから「天に届く＝天上界に通ずる鳥」といわれるなどのシンボルなので、遠隔のフィールドの情報がネットワークの先（クラウド）まで届くこと祈願してます</li>
</ul>
<p>ロゴデザインは<a href="https://99designs.jp" target="_blank" rel="noopener">99design</a>さん経由にて作成を依頼しました。</p>
<h1 id="作成の目的"><a href="#作成の目的" class="headerlink" title="作成の目的"></a>作成の目的</h1><p>このデバイスは、IoT関連ソリューションのワークショップ、<a href="https://ja.wikipedia.org/wiki/%E6%A6%82%E5%BF%B5%E5%AE%9F%E8%A8%BC" target="_blank" rel="noopener">PoC</a>、プロトタイピング、パイロット導入などの用途をカバーすることを目指して開発したものとなります。<br>直近では、お客様向けのIoT関連研修での教材として10数台程利用しました。</p>
<h1 id="力を入れた点"><a href="#力を入れた点" class="headerlink" title="力を入れた点"></a>力を入れた点</h1><p>とにかく簡易に素早く使えることをコンセプトに、下記の特徴をもたせました。</p>
<ul>
<li>多くの拡張用コネクタ(Groveコネクタx8)をコンパクトな筐体(4.5cm)に格納</li>
<li>ユーザを選ばない幅広いプログラミング環境</li>
<li>フルワイヤレス</li>
<li>追加モジュールによる柔軟な拡張性</li>
</ul>
<h1 id="スペック"><a href="#スペック" class="headerlink" title="スペック"></a>スペック</h1><p>スペックは次の通りです。（随時ブラッシュアップしているので変更される/している可能性があります）</p>
<h2 id="ハードウェア"><a href="#ハードウェア" class="headerlink" title="ハードウェア"></a>ハードウェア</h2><p><img src="/images/20171207/photo_20171207_03.jpeg"></p>
<h3 id="MPU"><a href="#MPU" class="headerlink" title="MPU"></a><a href="https://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%83%97%E3%83%AD%E3%82%BB%E3%83%83%E3%82%B5" target="_blank" rel="noopener">MPU</a></h3><p>MPUとしては、Wi-Fi、BLEも内蔵した比較的安価なESP32を採用しました。</p>
<ul>
<li><a href="https://ja.wikipedia.org/wiki/ESP32" target="_blank" rel="noopener">ESP32</a></li>
</ul>
<h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><p>基本的に無線での運用となります。Wi-Fi APやLoRaWAN GW などを経由してクラウドに接続します。</p>
<ul>
<li>有線<ul>
<li>シリアル通信(USB)</li>
</ul>
</li>
<li>無線<ul>
<li><a href="https://ja.wikipedia.org/wiki/Wi-Fi" target="_blank" rel="noopener">Wi-Fi</a></li>
<li><a href="https://ja.wikipedia.org/wiki/Bluetooth_Low_Energy" target="_blank" rel="noopener">BLE</a></li>
<li><a href="https://ja.wikipedia.org/wiki/Long_Term_Evolution" target="_blank" rel="noopener">LTE</a>(オプション)</li>
<li><a href="https://ja.wikipedia.org/wiki/LPWA_(%E7%84%A1%E7%B7%9A" target="_blank" rel="noopener">LoRaWAN</a>#LoRa)(オプション)</li>
</ul>
</li>
</ul>
<h3 id="コネクタ"><a href="#コネクタ" class="headerlink" title="コネクタ"></a>コネクタ</h3><p>コネクタとしては、PCなどの通信や充電のためのmicroUSBと、センサーなどの外部モジュールや内蔵モジュールのためのGroveコネクタがあります。</p>
<ul>
<li>microUSB コネクタ x1<ul>
<li>充電</li>
<li>シリアル通信</li>
</ul>
</li>
<li>Grove コネクタ x8<ul>
<li>デジタル入力</li>
<li>アナログ入力</li>
<li>UART</li>
<li>I2C</li>
</ul>
</li>
</ul>
<h3 id="ストレージ"><a href="#ストレージ" class="headerlink" title="ストレージ"></a>ストレージ</h3><p>基本的に内蔵Flashにプログラムを書き込みますが、大きめのデータを利用したい場合はスロットにmicroSDを差して使用する形になります。</p>
<ul>
<li>内蔵Flash</li>
<li>microSDスロット(対応予定)</li>
</ul>
<h3 id="電源"><a href="#電源" class="headerlink" title="電源"></a>電源</h3><p>充電池を内蔵しているためワイヤレスな利用が可能です。特に低消費電力を考えたプログラミングを行わなくても満充電後数時間は利用できます。プログラム次第になりますがより長時間の運用も可能です。電源を外部から取ることも可能です。</p>
<ul>
<li>内蔵：Li-Poバッテリ</li>
<li>外付：microUSBケーブルでACアダプタ、PC、モバイルバッテリと接続</li>
</ul>
<h2 id="ソフトウェア"><a href="#ソフトウェア" class="headerlink" title="ソフトウェア"></a>ソフトウェア</h2><h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p>現在はその完成度の面から下記のOSを利用しています。</p>
<ul>
<li><a href="https://mongoose-os.com/" target="_blank" rel="noopener">Mongoose OS</a></li>
</ul>
<h3 id="プログラミング言語"><a href="#プログラミング言語" class="headerlink" title="プログラミング言語"></a>プログラミング言語</h3><p>非エンジニアまでターゲット層を広げているため、複数のプログラミング環境をWeb上に用意しています。</p>
<ul>
<li>プログラミング初学者向け<ul>
<li><a href="https://developers.google.com/blockly/" target="_blank" rel="noopener">Blockly</a></li>
</ul>
</li>
<li>Web開発者向け<ul>
<li>JavaScript</li>
</ul>
</li>
<li>組込開発者向け<ul>
<li>C++</li>
<li>C</li>
</ul>
</li>
</ul>
<p><img width="400" alt="Blocklyの編集画面" src="/images/20171207/asset_20171207_04.jpeg"></p>
<p><img width="400" alt="JavaScriptの編集画面" src="/images/20171207/asset_20171207_05.png"></p>
<h2 id="クラウド"><a href="#クラウド" class="headerlink" title="クラウド"></a>クラウド</h2><p>弊社のIoTプラットフォームである Future IoT との連携や、AWS、GCP、Azuleなどの主要なクラウドとの連携を行うことができます。</p>
<h2 id="対応プロトコル"><a href="#対応プロトコル" class="headerlink" title="対応プロトコル"></a>対応プロトコル</h2><ul>
<li><a href="https://ja.wikipedia.org/wiki/MQ_Telemetry_Transport" target="_blank" rel="noopener">MQTT</a></li>
<li><a href="https://ja.wikipedia.org/wiki/WebSocket" target="_blank" rel="noopener">WebSocket</a></li>
<li>HTTP</li>
</ul>
<h1 id="今後の展開"><a href="#今後の展開" class="headerlink" title="今後の展開"></a>今後の展開</h1><p>今後、次のような点を進めていく予定です。<br>ぜひ、興味がある方は連絡下さい！</p>
<ul>
<li>追加モジュールの拡充</li>
<li>プログラミング環境のブラッシュアップ</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2017/future&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;フューチャーアーキテクト Advent Calendar 2017&lt;/a&gt;の7日目です。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>最新テクノロジーでスポーツアイデアソンをやって中高生に教わった大事なこと</title>
    <link href="https://future-architect.github.io/articles/20171113/"/>
    <id>https://future-architect.github.io/articles/20171113/</id>
    <published>2017-11-13T04:08:13.000Z</published>
    <updated>2017-11-13T05:55:45.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、フューチャーアーキテクト入社2年目の姜です。</p>
<p>2017年8月2日（水）に、有志で集まった社内オリンピック事業企画チーム「Future Tokyo2020」のメンバーを中心に、中学生・高校生向けの「<strong>スポーツアイデアソン</strong>」を開催しました。</p>
<h2 id="「スポーツアイデアソン」とは？"><a href="#「スポーツアイデアソン」とは？" class="headerlink" title="「スポーツアイデアソン」とは？"></a>「スポーツアイデアソン」とは？</h2><p>「スポーツアイデアソン」とは、東京オリンピック・パラリンピック大会など、数年後東京で行われる大規模なスポーツイベントを、VRやMRなどの最新技術を使って課題解決するアイデアを生み出すイベントです。<br><a href="http://fif.jp/kidsyouth/report/it/ideathon2017.html" target="_blank" rel="noopener">スポーツアイデアソンの報告はこちら</a></p>
<p><img src="/images/20171113/photo_20171113_01.jpg"><br><img src="/images/20171113/photo_20171113_02.jpg"></p>
<p>当日来てくれた中高生には、より良いアイデアを生み出してもらうために、<strong>MRなど最新の”XRテクノロジー”</strong>を実際に体験してもらいました。<br><img src="/images/20171113/photo_20171113_03.jpg"></p>
<p>また、教育向けビジュアルプログラミング言語「<strong>Blockly</strong>」でVRプログラミングにも挑戦してもらいました。（なんてチャレンジング！）<br><img src="/images/20171113/photo_20171113_04.jpg"></p>
<p>最新テクノロジーに見て、触って、そこから生まれたアイデアはどれも魅力的なアイデアばかりでした。<br>ここでは私が企画を担当し、技術的にもチャレンジングな内容だった<strong>「VRプログラミング体験」</strong>の様子を、ご紹介致します。</p>
<h2 id="会場"><a href="#会場" class="headerlink" title="会場"></a>会場</h2><p>イベントは先日オープンしたばかりの、フューチャーアーキテクトの新オフィスで開催致しました！<br><img src="/images/20171113/photo_20171113_05.jpeg"><br><img src="/images/20171113/photo_20171113_06.jpeg"></p>
<h2 id="イベント開始"><a href="#イベント開始" class="headerlink" title="イベント開始"></a>イベント開始</h2><p>ついにイベントがスタート！<br>会場を見てみると集まってくれた中高生はざっと20人程度。<br>IT経験者は5名ほど、後は全員IT初心者。男女比もちょうどよいバランスで集まってくれました。</p>
<p>イベントのタイムテーブルです。<br><img src="/images/20171113/photo_20171113_10.jpg"></p>
<p>1日にしては濃厚なスケジュール。みんなついてこれるでしょうか？</p>
<h2 id="さっそくVRプログラミング体験スタート！"><a href="#さっそくVRプログラミング体験スタート！" class="headerlink" title="さっそくVRプログラミング体験スタート！"></a>さっそくVRプログラミング体験スタート！</h2><p>簡単なアイスブレイクとXRテクノロジーの紹介を行い、さっそくVRプログラミング体験です。今回、体験の教材として採用したのは <strong>CoSpaces</strong> というアプリケーションです。</p>
<p><img src="/images/20171113/asset_20171113_01.png" class="img-small-size"></p>
<p><a href="https://www.google.co.jp/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwju-6D1wuLVAhXHWrwKHR2LB6gQFggoMAA&amp;url=https%3A%2F%2Fcospaces.io%2F&amp;usg=AFQjCNHg0xT23Te0sb92fFshLQJr3xo-xg" target="_blank" rel="noopener">Cosapces公式ページはこちらから</a></p>
<p>CoSpacesとは、ドイツのミュンヘンとロシアのサンクトペテルブルグを拠点とするスタートアップ、Delightex社が開発したアプリケーションで、開発者がプログラミングやデザインのスキルを持っていなくてもVR環境を構築出来るアプリケーションです。</p>
<p><img src="/images/20171113/asset_20171113_02.png"></p>
<p>動物やテキストボックスをステージ上にアレンジ出来たり、新しいオブジェクトをよりシンプルにカスタマイズ、統合出来る環境を提供しています。<br>なにより、CoSpacesはプログラミングを直接書かなくても、命令文やコマンド名のパズルを組み合わせる <strong>Blockly</strong> という開発言語で、プログラムを作ることができます。</p>
<p><img src="/images/20171113/asset_20171113_03.png"><br><a href="https://developers.google.com/blockly/" target="_blank" rel="noopener">Blockly公式ページはこちらから</a></p>
<p>作成したプログラムはVRアプリケーションとして、iPadなどで実行する事ができます。<br>プログラミングが初体験の中高生でも、<strong>パズルで遊ぶような感覚でVRプログラミングができるスグレモノ</strong>です。</p>
<p>今回は中高生にCoSpacesを使って <strong>スゴい迷路</strong> を作ってもらいながら、合間にHoloLensでMR体験をしてもらいました。</p>
<blockquote>
<p><strong>知らない方の為に補足:</strong><br> <a href="http://www.moguravr.com/holorens-mr-matome/" target="_blank" rel="noopener">HoloLens</a>とは、Microsoftが提供するワイヤレスで頭につけるタイプのホログラフィックコンピューティングです。自分がその場にいながらバーチャルな空間と融合した世界が体験できます。</p>
</blockquote>
<p>次々とHoloLensを体験した子どもたちが順番を待っている子たちに興奮しながら感想を言ったり、積極的に社員に質問しながらCoSpacesで迷路を構築したりして、会場は一気に盛り上がりました！</p>
<h2 id="スゴい迷路の発表"><a href="#スゴい迷路の発表" class="headerlink" title="スゴい迷路の発表!"></a>スゴい迷路の発表!</h2><p>最終的に出来上がった中高生たちの「スゴい迷路」がこちらです。</p>
<p><img src="/images/20171113/photo_20171113_07.png"></p>
<p>私の感想は「ちゃんと迷路に個性が出ている・・・！！」という驚きです。<br>最初のデフォルトの迷路に比べて、短時間でこれだけ様子が変わったことに中高生の底力を感じました。<br>ほとんどの中高生がプログラミング自体が初めてだったのにも関わらず、しっかりとオリジナリティのある迷路を作り上げていたのです。</p>
<p>最後に、中高生のみんなでどれが一番「スゴい」か投票した結果、選ばれた迷路がこちら！<br><img src="/images/20171113/photo_20171113_08.jpg"></p>
<p>なにが「スゴい」かというと、迷路の壁を<strong>半透明</strong>にして、迷路をする人が戸惑うような仕掛けを加えたところです。<strong>ちなみに壁を透明にできることは、講義では教えていません。</strong> 中高生が自分たちで実際にCoSpacesを触って、試して、見つけて、生み出した工夫です。短時間でプログラミングの概念が身につくCoSpacesと、中高生たちの発想の柔軟さがぶつかって「スゴい迷路」が誕生しました。</p>
<p>私はこういうIT技術と人のアイデアが具体的な形になる瞬間が大好きです。</p>
<p>その後のアイデアソンでも、中高生たちの柔軟な発想力が光るアイデアが沢山生まれ、無事イベントは終了しました!<br><img src="/images/20171113/photo_20171113_09.jpg"></p>
<h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>私自身、CoSpacesを触ったのが今回が初めてというハラハラドキドキ状態でしたが、なんとか中高生のフォローができてほっとしました。</p>
<p>中高生と接して感じたのは、 <strong>新しい技術に好奇心と興味をもって取り組めば、IT経験の有無は関係なくモノを作り出すことはできる</strong> ということです。<br>そして <strong>何より「楽しむ」こと！これがモノを作る上で一番の原動力であること</strong> を中高生に教わりました。</p>
<p>今後もFuture Tokyo2020は、スポーツを舞台にして子供とテクノロジーを繋ぐイベント・企画をどんどん進めていきます！またみなさんにレポートできる機会があると思いますので、乞うご期待下さい！</p>
<p>最後まで読んでいただいた方、本当にありがとうございました。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、フューチャーアーキテクト入社2年目の姜です。&lt;/p&gt;
&lt;p&gt;2017年8月2日（水）に、有志で集まった社内オリン
    
    </summary>
    
      <category term="VR" scheme="https://future-architect.github.io/categories/VR/"/>
    
    
      <category term="CoSpaces" scheme="https://future-architect.github.io/tags/CoSpaces/"/>
    
  </entry>
  
  <entry>
    <title>最新で最強、AlphaGo Zero の解説</title>
    <link href="https://future-architect.github.io/articles/20171030/"/>
    <id>https://future-architect.github.io/articles/20171030/</id>
    <published>2017-10-30T04:35:51.000Z</published>
    <updated>2017-10-30T04:56:47.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。データサイエンスチームの李(碩)です。<br>以前、<a href="https://future-architect.github.io/articles/20170804/">古典的ゲームAIを用いたAlphaGo解説</a>に紹介したAlphaGoの最新バージョンが2017年10月19日に発表されました。<br>この記事では、最新のAlphaGo、AlphaGo Zero の仕組みについて紹介です。<br>本文を直接読みたい方はスライドをご覧になってください。</p>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/key/11fEDJ3WaXrLww" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/suckgeunlee/alphago-zero" title="AlphaGo Zero 解説" target="_blank">AlphaGo Zero 解説</a> </strong> from <strong><a href="https://www.slideshare.net/suckgeunlee" target="_blank">suckgeun lee</a></strong> </div></p>
<h2 id="AlphaGo-のバージョン"><a href="#AlphaGo-のバージョン" class="headerlink" title="AlphaGo のバージョン"></a>AlphaGo のバージョン</h2><p>AlphaGo には下記の4つのバージョンがあります。</p>
<pre><code>1. AlphaGo Fan 
  ・2015年10月にヨーロッパの囲碁チャンピオンFanに勝利
2. AlphaGo Lee 
  ・2016年3月に過去世界最強と呼ばれたイ・セドルに勝利
3. AlphaGo Master 
  ・2017年1月、オンラインで世界最強の棋士たちに60:0で勝利
4. AlphaGo Zero 
  ・2017年10月に論文発表
</code></pre><p>前回の<a href="https://future-architect.github.io/articles/20170804/">古典的ゲームAIを用いたAlphaGo解説</a>に紹介したAlphaGoのバージョンは「AlphaGo Fan」になります。AlphaGo ZeroはAlphaGo Fanとアーキテクチャレベルから大きく異なります。Fanの場合、二つのディープニューラルネットワーク(DNN)で構成され、その他にも結構複雑なアーキテクチャになっています。しかし、Zeroの場合は一つのDNNだけで、学習プロセスもすごく簡単になりました。簡単になったけど、学習は早く、性能も強力になったのです。</p>
<h2 id="AlphaGo-Zeroのすごいポイント"><a href="#AlphaGo-Zeroのすごいポイント" class="headerlink" title="AlphaGo Zeroのすごいポイント"></a>AlphaGo Zeroのすごいポイント</h2><h3 id="1-人がプレイしたデータを必要としない"><a href="#1-人がプレイしたデータを必要としない" class="headerlink" title="1. 人がプレイしたデータを必要としない"></a>1. 人がプレイしたデータを必要としない</h3><p>AlphaGo Zeroのすごいところは、以前のAlphaGoと違い、人がプレイしたデータを一切必要としないことです。以前のAlphaGoは、まず人がプレイした数百万の囲碁のデータで学習して、その後に自己対局を通じて強くなる形でした。しかしAlphaGo Zeroは最初から人のプレイデータ無しで、自己対局だけで学習していきます。AIを作る時に一番苦労をするのが、良質のデータを手に入れることです。多くの場合、データを集めるのがすごく大変だったり、データの質がよくなかったり、そもそもデータが無かったりします。AlphaGoはその苦労無しで学習してくれるのです。</p>
<h3 id="2-手作りインプットの削除"><a href="#2-手作りインプットの削除" class="headerlink" title="2. 手作りインプットの削除"></a>2. 手作りインプットの削除</h3><p>以前のAlphaGoはインプットに囲碁の背景知識が必要なデータを人が手作りして入力してました。しかし、AlphaGo Zeroのインプットは石の配置履歴だけです。つまり、AlphaGo Zeroは囲碁の背景知識が全くない状況で学習を始めるのです。背景知識なしで問題を解決するこの進化により、囲碁でない他の問題でも、AlphaGo Zeroは活用できると予測されています。</p>
<h3 id="3-圧倒的なパフォーマンス"><a href="#3-圧倒的なパフォーマンス" class="headerlink" title="3. 圧倒的なパフォーマンス"></a>3. 圧倒的なパフォーマンス</h3><p><img src="/images/20171030/photo_20171030_01.png"><br>AlphaGo Zeroはアーキテクチャが簡単になったわりにAlphaGo FanやLeeより圧倒的なパフォーマンスを誇ります。学習時間も、計算速度も比べられるものではありません。たった36時間で数か月学習したAlphaGo Leeを超えて、40日でAlphaGo Masterを超える。驚異的なスピードです。</p>
<h2 id="本資料の狙い"><a href="#本資料の狙い" class="headerlink" title="本資料の狙い"></a>本資料の狙い</h2><p>本資料ではAlphaGo Zeroの仕組みを分かりやすく解説します。AlphaGo Zeroはどう作られているかが知りたい方はぜひご覧になってください。</p>
<h2 id="本資料の目次"><a href="#本資料の目次" class="headerlink" title="本資料の目次"></a>本資料の目次</h2><ol>
<li>AlphaGo Zeroを構成する二つのパーツ <ol>
<li>ニューラルネットワーク(DNN)</li>
<li>モンテカルロ木探索(MCTS)</li>
</ol>
</li>
<li>AlphaGo Zeroの学習プロセス<ol>
<li>MCTSによる自己対局</li>
<li>DNNの学習</li>
<li>学習前後の性能比較</li>
</ol>
</li>
<li>AlphaGoの各種バージョン</li>
<li>AlphaGo Fan vs. AlphaGo Zero</li>
<li>AlphaGo Zeroの性能評価</li>
<li>教師あり学習 vs. 強化学習</li>
<li>人の動き予測</li>
<li>まとめ</li>
<li>参照論文</li>
</ol>
<p><a href="https://www.slideshare.net/suckgeunlee/alphago-zero?qid=c9839b2d-a0e1-4feb-b72c-063282fe9fc5&amp;v=&amp;b=&amp;from_search=1" target="_blank" rel="noopener">https://www.slideshare.net/suckgeunlee/alphago-zero?qid=c9839b2d-a0e1-4feb-b72c-063282fe9fc5&amp;v=&amp;b=&amp;from_search=1</a></p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>AlphaGo Zeroは人のデータを必要としない、そして囲碁の背景知識を全く使わないことで、他の領域でも活用できると思われています。今後、AlphaGo Zeroを元にどんな面白い課題を解決していくのか、すごく楽しみですね！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。データサイエンスチームの李(碩)です。&lt;br&gt;以前、&lt;a href=&quot;https://future-archit
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>社内ヘルプデスクをＡＩで！</title>
    <link href="https://future-architect.github.io/articles/20171005/"/>
    <id>https://future-architect.github.io/articles/20171005/</id>
    <published>2017-10-05T09:24:22.000Z</published>
    <updated>2017-10-06T06:04:36.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul>
<li>社内ヘルプデスク（Redmine）における管理対応の業務を効率化し、サービスレベルを上げたい</li>
<li>現状の課題<ul>
<li>起票されたチケットの解決にかかる時間が長い</li>
<li>原因の一つは、正しい担当者にチケットが割当てられず滞留することがあること<ul>
<li>処理されないチケットは、カテゴリが正しく設定されていないものが多かった</li>
<li>弊社の運用としてカテゴリ単位で専門的な担当者が割り当てられているので、カテゴリを間違うとやり取りが増え、解決までに時間がかかってしまいます</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Redmineについては下記を参照下さい<br><a href="http://redmine.jp/overview/" target="_blank" rel="noopener">http://redmine.jp/overview/</a></p>
</blockquote>
<h1 id="作ったもの"><a href="#作ったもの" class="headerlink" title="作ったもの"></a>作ったもの</h1><p><img src="/images/20171006/photo_20171006_01.jpeg" class="img-small-size"></p>
<p>Redmineにチケットが新規に起票すると、過去のデータから自動的にカテゴリを設定する仕組みをDeepLearningを用いて作成しました。<br>これにより正しい担当者にチケットが割り当てられ、チケットの平均解決時間の向上を狙います。<br>この仕組に対して、親しみを持たせたいということで <strong>あいちゃん</strong> と命名しました。</p>
<p>例えば下記のような動きです。（※社内情報に触れそうなところは隠しています）</p>
<p><img src="/images/20171006/photo_20171006_02.png"></p>
<p>さらに、カテゴリが自動設定されたことに驚かないよう、振り分けた旨のコメントもセットで投稿するようにしました。</p>
<p><img src="/images/20171006/photo_20171006_03.png" class="img-middle-size"></p>
<p>万が一、間違った振り分けをしても許してもらえそうな新人さんキャラクターを演出しています。<br>今のところクレームは届いていないのですが、彼女の貢献も大きいと思います。</p>
<h1 id="採用技術"><a href="#採用技術" class="headerlink" title="採用技術"></a>採用技術</h1><ul>
<li>Python パッケージ<ul>
<li>conda (4.3.11) # pythonのパッケージ管理</li>
<li>python-redmine (2.0.2)</li>
<li>Keras (2.0.5)</li>
<li>tensorflow (1.2.0)</li>
<li>Janome (0.2.8) # 形態素解析</li>
</ul>
</li>
<li>Ruby パッケージ<ul>
<li>faraday(0.13.0) # HTTP client library</li>
</ul>
</li>
<li>ジョブ系<ul>
<li>Jenkins (2.7.4)</li>
</ul>
</li>
<li>ミドル<ul>
<li>Docker (17.03.1-ce)</li>
</ul>
</li>
</ul>
<h1 id="処理の流れと構成"><a href="#処理の流れと構成" class="headerlink" title="処理の流れと構成"></a>処理の流れと構成</h1><p>チケットの自動カテゴリ設定の処理フローです。</p>
<ol>
<li>Redmineにチケットが起票される</li>
<li>Redmineのweb hook pluginを使ってJenkinsジョブを呼び出す</li>
<li>JenkinsはKeras Dockerコンテナを起動</li>
<li>Kerasでチケットのカテゴリを判定を行う</li>
<li>カテゴリの判定結果をRedmineのWebAPI経由でチケットを更新</li>
<li>カテゴリに紐付いたヘルプデスク担当者に、Redmine経由で通知がなされる</li>
</ol>
<p><img src="/images/20171006/photo_20171006_04.png"></p>
<p>あいちゃんの実体は、Dockerコンテナ上のKeras(Tensorflow）＋ 連携用のRubyスクリプトです。<br>ユーザからはRedmineのカテゴリが、あいちゃんユーザから更新されたかのように見えます。</p>
<h1 id="あいちゃんを作成"><a href="#あいちゃんを作成" class="headerlink" title="あいちゃんを作成"></a>あいちゃんを作成</h1><p>まずは、 <strong>あいちゃん</strong> のコアとなるAI部分を開発します。<br><img src="/images/20171006/photo_20171006_05.png"></p>
<p>今回はKerasライブラリを使います。<br>Kerasで学習＆判定させるときに必要なフローは以下の1～3です。</p>
<ol>
<li>教師データを準備する</li>
<li>モデルを用意する</li>
<li>学習させる</li>
<li>判定させる</li>
</ol>
<h2 id="1-教師データの作成"><a href="#1-教師データの作成" class="headerlink" title="1. 教師データの作成"></a>1. 教師データの作成</h2><p>元となるデータは運用中のRedmineが利用するDBに蓄積されている3000件のデータです。</p>
<p>まずは教師データを作成します。<br>教師データとは、入力データとそれに対応した正解データ(バイナリ)のタプルです。</p>
<p>$$ 教師データ = (X(入力データ), Y(正解データ)) $$</p>
<p>今回は、「チケットの件名」と「チケットの内容」の文字列からカテゴリを出したいので、以下の形式です。</p>
<p>$$ X(入力データ) ＝　チケットの件名 + 内容の文字列 $$ $$ Y(正解データ) ＝　カテゴリ $$</p>
<p>入力データ（X)と正解データ（Y)の作成フローを下図にまとめました。</p>
<p><img src="/images/20171006/photo_20171006_06.png"></p>
<figure class="highlight py"><figcaption><span>サンプルコード.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 題名と本文を結合</span></div><div class="line">text = subject + description</div><div class="line"></div><div class="line"><span class="comment"># 文字列を形態素解析して、名詞、品詞等にわける</span></div><div class="line">tokenizedTexts = JanomeTokenizer().tokenize(text)</div><div class="line"></div><div class="line"><span class="comment"># 出現頻度で数字に変換し、配列化</span></div><div class="line">tokenizer = KerasTokenizer()</div><div class="line">seq = tokenizer.fit_on_texts(tokenizedTexts)</div><div class="line"></div><div class="line"><span class="comment"># 配列のパディング</span></div><div class="line">X = sequence.pad_sequences(seq)</div><div class="line"></div><div class="line"><span class="comment"># カテゴリＩＤを1次元配列に変換</span></div><div class="line"><span class="comment"># 実はKerasで教師データを作ると、バイナリデータしか扱えないため、ここで変換します。</span></div><div class="line">Y = np_utils.to_categorical(categoryId)</div><div class="line"><span class="comment">#例： </span></div><div class="line"><span class="comment">#1 →  1000000000000</span></div><div class="line"><span class="comment">#13 → 0000000000100</span></div></pre></td></tr></table></figure>
<h2 id="2-モデルを用意する"><a href="#2-モデルを用意する" class="headerlink" title="2.　モデルを用意する"></a>2.　モデルを用意する</h2><p>CNN、RNN、LSTMで技術検証を行った結果、最も正解率が高かったCNNを採用しました。<br>CNNを利用した実装は下記のようなイメージになります。</p>
<figure class="highlight py"><figcaption><span>モデルサンプル.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">model = Sequential()</div><div class="line"></div><div class="line"><span class="comment"># 入力層</span></div><div class="line">model.add(Embedding(max_features, </div><div class="line">    embedding_dims, <span class="comment">#50</span></div><div class="line">    input_length = maxlen,</div><div class="line">    dropout = <span class="number">0.2</span>))</div><div class="line"></div><div class="line"><span class="comment"># Convolution1D層</span></div><div class="line">model.add(Convolution1D(nb_filter = <span class="number">250</span>, </div><div class="line">    filter_length = <span class="number">3</span>, </div><div class="line">    border_mode = <span class="string">"valid"</span>,</div><div class="line">    activation = <span class="string">"relu"</span>,</div><div class="line">    subsample_length = <span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="comment"># GlobalMaxPooling1D層:</span></div><div class="line">model.add(GlobalMaxPooling1D())</div><div class="line"></div><div class="line"><span class="comment"># 隠れ層</span></div><div class="line">model.add(Dense(hidden_dims))</div><div class="line">model.add(Dropout(<span class="number">0.2</span>))</div><div class="line">model.add(Activation(<span class="string">"relu"</span>))</div><div class="line"></div><div class="line"><span class="comment"># 出力層</span></div><div class="line">model.add(Dense(<span class="number">10</span>)) </div><div class="line">model.add(Activation(<span class="string">"sigmoid"</span>))</div><div class="line"></div><div class="line"><span class="comment"># 学習過程の設定</span></div><div class="line">model.compile(loss = <span class="string">"categorical_crossentropy"</span>,</div><div class="line">    optimizer = <span class="string">"adam"</span>,</div><div class="line">    metrics = [<span class="string">"accuracy"</span>])</div></pre></td></tr></table></figure>
<h2 id="3-modelで学習させる"><a href="#3-modelで学習させる" class="headerlink" title="3.　modelで学習させる"></a>3.　modelで学習させる</h2><p>教師データを設定します。<br>Kerasを用いると、モデルを作成後、<code>fix function</code> に <code>X(入力データ)</code> , <code>Y(正解データ)</code> , <code>epoch数</code>を渡すだけで学習できます。<br>※poch数とは、学習をさせる回数です。この回数を増やすと限界はありますが重みづけが最適化されていきます。</p>
<figure class="highlight py"><figcaption><span>教師データの設定＆学習サンプル</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">model.fit(X, Y, epoch...)</div></pre></td></tr></table></figure>
<h2 id="4-判定する"><a href="#4-判定する" class="headerlink" title="4. 判定する"></a>4. 判定する</h2><p>学習は終わっているので、あとはX(入力データ)を与えると判定できます！<br>また、後続で使うRedmine操作用に、結果を加工しておきます。</p>
<figure class="highlight py"><figcaption><span>カテゴリ判定サンプル</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">result = model.predict(predictX)</div><div class="line"></div><div class="line">dfPredicts = pds.DataFrame(retPredict, columns = uniqueCategoryIds)</div><div class="line">issues = &#123;&#125;</div><div class="line"><span class="keyword">for</span> (i, dfPredict) <span class="keyword">in</span> dfPredicts.iterrows():</div><div class="line">    <span class="comment"># 可能性が高いものから順から４つだけを取り出します。</span></div><div class="line">    sPredicts = dfPredict.sort_values(ascending = <span class="keyword">False</span>).nlargest(<span class="number">4</span>)</div><div class="line">    <span class="comment"># このredmine操作で使うので、issueオブジェクトに結果を格納します。</span></div><div class="line">    issue = &#123;</div><div class="line">        <span class="string">"subject"</span>: subject,</div><div class="line">        <span class="string">"category_names"</span>: [],</div><div class="line">        <span class="string">"category_ids"</span> : [],</div><div class="line">        <span class="string">"confidences"</span>: []</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span> (j, sPredict) <span class="keyword">in</span> enumerate(sPredicts):</div><div class="line">        category_name = re.split(<span class="string">'\[|\]| '</span>,sPredicts.index[j])[<span class="number">2</span>]</div><div class="line">        category_id = re.split(<span class="string">'\[|\]| '</span>,sPredicts.index[j])[<span class="number">1</span>]</div><div class="line">        issue[<span class="string">"category_names"</span>].append(category_name)</div><div class="line">        issue[<span class="string">"category_ids"</span>].append(int(category_id)),</div><div class="line">        issue[<span class="string">"confidences"</span>].append(sPredicts[j])</div></pre></td></tr></table></figure>
<h1 id="Redmineのチケットを更新"><a href="#Redmineのチケットを更新" class="headerlink" title="Redmineのチケットを更新"></a>Redmineのチケットを更新</h1><p>続いて、Redmine APIを使って、対象のチケットを更新します。<br><img src="/images/20171006/photo_20171006_07.png"></p>
<p>Python-RedmineとAPIキーを使って、対象のチケットを新しいカテゴリIDで更新します。<br>これをコンテナの最後の処理に差し込めば、Redmineのチケットが更新されます。</p>
<figure class="highlight rb"><figcaption><span>Redmineチケット更新サンプル.ruby</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from redminelib import Redmine</div><div class="line"></div><div class="line">redmine = Redmine(<span class="string">'http://localhost/redmine'</span>, key=<span class="string">'***********************'</span>)</div><div class="line">issue = redmine.issue.get(issue_id)</div><div class="line">issue.category_id = category_id</div><div class="line">issue.save()</div></pre></td></tr></table></figure>
<p>以下を参考にしました</p>
<ul>
<li><a href="https://python-redmine.com/" target="_blank" rel="noopener">https://python-redmine.com/</a></li>
<li><a href="http://www.redmine.org/projects/redmine/wiki/Rest_Issues" target="_blank" rel="noopener">http://www.redmine.org/projects/redmine/wiki/Rest_Issues</a></li>
<li><a href="http://qiita.com/mima_ita/items/1a939db423d8ee295c85" target="_blank" rel="noopener">http://qiita.com/mima_ita/items/1a939db423d8ee295c85</a></li>
</ul>
<h1 id="Jenkinsジョブの作成"><a href="#Jenkinsジョブの作成" class="headerlink" title="Jenkinsジョブの作成"></a>Jenkinsジョブの作成</h1><p>今回はRedmineから直接Kerasコンテナを呼ばずに、間にJenkinsを経由させるアーキテクチャになっています。<br>そのため、DockerコンテナをキックするJenkinsジョブを作成します。</p>
<p><img src="/images/20171006/photo_20171006_08.png"></p>
<figure class="highlight sh"><figcaption><span>サンプルコマンド</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># KerasコンテナがいるジョブサーバにSSHで接続して、コンテナにticket_idを渡します。</span></div><div class="line"><span class="comment"># issue_idはparameter付きビルドでredmineから受け取ります。</span></div><div class="line">$ ssh jobserver docker <span class="built_in">exec</span> -t keras_container python3 update_issue.py <span class="variable">$issue_id</span></div></pre></td></tr></table></figure>
<p>以下を参考にしました</p>
<ul>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Parameterized+Build" target="_blank" rel="noopener">https://wiki.jenkins.io/display/JENKINS/Parameterized+Build</a></li>
</ul>
<h1 id="Redmine-Pluginの作成"><a href="#Redmine-Pluginの作成" class="headerlink" title="Redmine Pluginの作成"></a>Redmine Pluginの作成</h1><p>RedmineとJenkinsを連携させる部分を作ります。<br>Redmineにチケットが起票されたイベントをトリガーにしてJenkinsジョブを呼び出します。</p>
<p><img src="/images/20171006/photo_20171006_09.png"></p>
<figure class="highlight rb"><figcaption><span>サンプル実装.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import faraday</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebhookListener</span> &lt; Redmine::Hook::<span class="title">Listener</span></span></div><div class="line">    <span class="comment"># issueが新規に作成されると呼ばれます。</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">controller_issues_new_after_save</span><span class="params">(context = &#123;&#125;)</span></span></div><div class="line">      issue = context[<span class="symbol">:issue</span>]</div><div class="line">      controller = context[<span class="symbol">:controller</span>]</div><div class="line">      <span class="keyword">return</span> unless webhooks</div><div class="line">      post(issue)</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="comment"># Jenkinsジョブにissue.idをパラメータ付きビルドで渡します。</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span></span></div><div class="line">        conn = Faraday.new(<span class="symbol">:url</span> =&gt; <span class="string">'http://jenkins'</span>) <span class="keyword">do</span> <span class="params">|builder|</span></div><div class="line">            builder.request  <span class="symbol">:url_encoded</span></div><div class="line">            builder.response <span class="symbol">:logger</span></div><div class="line">            builder.adapter  <span class="symbol">:net_http</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">        res = conn.post <span class="string">"/JOB_NAME/buildWithParameters"</span>, &#123; <span class="symbol">issue_id:</span> issue.id&#125;</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>以下を参考にしました</p>
<ul>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Remote+access+API" target="_blank" rel="noopener">https://wiki.jenkins.io/display/JENKINS/Remote+access+API</a></li>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Parameterized+Build" target="_blank" rel="noopener">https://wiki.jenkins.io/display/JENKINS/Parameterized+Build</a></li>
</ul>
<h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>結果と所感について…</p>
<ul>
<li>目論見どおり大変だったチケットの再振り分けが減りました<ul>
<li>実は私もヘルプデスクに担当を持っていますが、チケット対応が以前より楽になったと実感しています</li>
</ul>
</li>
<li>意外だったのは、epoch数が10回程度でも思ったよりと正答率が高い（約８０％）ということ</li>
<li>Deep Learning の登場で機械学習の敷居は相当下がっていると感じます。みなさんも是非チャレンジしてみてください！</li>
</ul>
<p>あいちゃん は今後も大きく育てていきます！</p>
<ul>
<li>チケットの担当者振り分け<ul>
<li>カテゴリ毎にだいたい同じような担当者になるので、一緒に入れてしまえるのでは？</li>
</ul>
</li>
<li>あいちゃんと対話できるようにしたい<ul>
<li>チャット形式でチケット起票における質問にある程度答えてくれると助かるのでは？</li>
</ul>
</li>
</ul>
<hr>
<p>フューチャーアーキテクトでは、技術的視点だけでなく、ビジネス視点からも応用先を考え技術検証・現場への導入を行っています。<br>興味がある方、一緒に働きましょう！ぜひメッセージ下さい。</p>
<p><a href="http://www.future.co.jp/recruit/" target="_blank" rel="noopener">http://www.future.co.jp/recruit/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;社内ヘルプデスク（Redmine）における管理対応の業務を効率化し、サービスレベルを上げたい&lt;/li&gt;
&lt;li&gt;現状の課題&lt;ul
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="Redmine" scheme="https://future-architect.github.io/tags/Redmine/"/>
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>第12回NLP若手の会シンポジウム　参加報告</title>
    <link href="https://future-architect.github.io/articles/20170922/"/>
    <id>https://future-architect.github.io/articles/20170922/</id>
    <published>2017-09-22T07:20:00.000Z</published>
    <updated>2017-09-22T07:21:53.185Z</updated>
    
    <content type="html"><![CDATA[<p>はじめまして、7月からフューチャーアーキテクトで自然言語処理・人工知能分野の研究開発を担当している、Strategic R&amp;Dチームの貞光です。</p>
<p>2017/9/3(日) ～ 2017/9/5(火) に開催された第12回NLP若手の会シンポジウム (YANS)にスポンサーとして参加してきました。</p>
<p>今年は沖縄那覇市での開催。<br>亜熱帯の包み込むような熱気にも負けず、若い研究者間での議論が大いに白熱していました。<br>本記事では白熱していた議論の様子に加え、個人的に気になった発表について紹介いたします。</p>
<p><a href="http://yans.anlp.jp/entry/yans2017program" target="_blank" rel="noopener">http://yans.anlp.jp/entry/yans2017program</a></p>
<p><img src="/images/20170915/photo_20170915_01.jpeg"></p>
<h1 id="YANSならではの表彰"><a href="#YANSならではの表彰" class="headerlink" title="YANSならではの表彰"></a>YANSならではの表彰</h1><p>YANSでは若手研究者による一般ポスター発表と講師を招いた招待講演と、それに加えてスポンサー企業による口頭発表があります。</p>
<p>また、会議の最後に、参加者全員の投票によって奨励賞５件とデモ賞１件が表彰されます。<br>論文としての完成度を評価するのではなく、今後の発展性に期待する賞という位置づけとなっているのがYANSの特徴です。</p>
<p>表彰されたのは以下の発表です。おめでとうございます！</p>
<h3 id="奨励賞"><a href="#奨励賞" class="headerlink" title="奨励賞"></a>奨励賞</h3><ul>
<li><strong>活用情報を用いた日英ニューラル機械翻訳</strong><ul>
<li>黒澤道希, 山岸駿秀, 松村雪桜, 小町守（首都大）</li>
<li>日本語の活用情報によるスパースネスを解消するためのNMTの提案。活用情報をモデル内に取り入れることで、BLEUが向上したとのことです</li>
</ul>
</li>
<li><strong>オンライン環境下でのニューストピック検出への強化学習の応用</strong><ul>
<li>大倉俊平（ヤフー株式会社）</li>
<li>強化学習は、対話タスクにおいてMDP,POMDP等の手法が積極的に使われており、最近(2017/9/7)でも、Montreal大のBengio先生のグループが発表した、 Amazon Alexa Prize competition 向けのチャットボットに関する論文が注目を集めています[Serban+’17<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>]。<br>本研究はユーザへのニュースレコメンドに用いるためのトピック検出のために強化学習を用いた研究で、対話以外のNLPタスクで強化学習を用いたチャレンジ性が評価されたように思います</li>
</ul>
</li>
<li><strong>カーネル密度推定に基づく関係予測</strong><ul>
<li>横井祥, 乾健太郎（東北大）</li>
<li>embeddingを用いた新しい類似度の提案。PMIの一般化とみなすことができる、という主張も含まれていました。横井さんは、YANS初の試みであるYoutubeの生中継レポーターとしても大活躍でした</li>
</ul>
</li>
<li><strong>周辺文脈の集合による単語表現の獲得と関係抽出への応用</strong><ul>
<li>濱口拓男（NAIST）, 大岩秀和（RIT）, 新保仁, 松本裕治（NAIST）</li>
</ul>
</li>
<li><strong>発話スタイル空間の教師なし学習およびスタイル制御可能な対話システムの実現</strong><ul>
<li>赤間怜奈, 渡邉研斗, 横井祥, 乾健太郎（東北大）</li>
</ul>
</li>
</ul>
<p>※最後の2件は、弊社スポンサー展示時間帯と重なっており、残念ながら聴講できませんでした。</p>
<h3 id="デモ賞"><a href="#デモ賞" class="headerlink" title="デモ賞"></a>デモ賞</h3><ul>
<li><strong>deep-crf</strong><ul>
<li>佐藤元紀, 能地宏, 松本裕治（NAIST）</li>
<li>Bi-directional-LSTM等のDNNによる基本的な系列ラベリング手法を包含したツールで、attention情報等の分析用付加情報も出してくれるUIを含め、とても良くできていました。</li>
</ul>
</li>
</ul>
<p>上記発表では常に多くの聴衆を集めており、今後の研究の進め方についてのサジェスションを含め、YANSならではの活発な議論がかわされていたように思います。</p>
<h1 id="個人的に興味深かった発表"><a href="#個人的に興味深かった発表" class="headerlink" title="個人的に興味深かった発表"></a>個人的に興味深かった発表</h1><p>それ以外にも興味深い発表が多くありましたので、私の気になった発表について少しだけ紹介させていただきます。</p>
<ul>
<li><strong>教師なし学習による分野特有の固有表現認識</strong><ul>
<li>友利涼, 森信介（京大）</li>
<li>教師なし・半教師ありの固有表現（Named Entity:NE)認識に対し、教師なし単語分割や形態素解析(Mochihashi+’09<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, Uchiumi+’15<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>)等で用いられる階層Pitman-Yor過程を応用した研究です。<br>IREXのような一般的なNEの体系ではなく、特定分野のNEの抽出、例えば「レシピ」や「将棋」といった特定ドメインに焦点をあてています。<br>提案法の教師なし学習では、特定分野のコーパスに加え、一般分野のコーパスを疑似教師データとして与えています。この時、一般分野コーパス中の単語は全て１単語で分割され、かつ”O”ラベル(非NE)を付与するようにします。そうして作られた学習データを元に学習すると、特定分野において高頻度で出現する単語列を、潜在クラス=”NE”として抽出できるようになるという主張で、ベースラインに比べ大幅に精度が改善されたとのことです。<br>事前にNEクラス数を与える必要があるという点や、個々のNEクラスで得意不得意があるようなので、その改善が課題とのことですが、応用範囲の広い技術だと思います。</li>
</ul>
</li>
<li><strong>エンコーダ・デコーダモデルを用いた画像の日本語キャプション生成のエラー分析</strong><ul>
<li>白井稔久, 尾形朋哉, 小町守（首都大）</li>
<li>NLPにおける近年の重要なマイルストンとして、2015年、幅広いNLPタスクに対して誤り分析を行ったプロジェクト<a href="https://sites.google.com/site/projectnextnlp/" target="_blank" rel="noopener">Project Next NLP</a>があります。<br>プロジェクトの結果、価値のある誤り分析の知見がコミュニティにもたらされ、その後もエラー分析に関する試みは続いています。<br>YANSでもいくつか、誤り分析の発表がありました。本発表は、エンコーダ・デコーダモデルを用いた画像からのキャプション生成のエラー分析に関するもので、誤りのタイプを定義した上でそれぞれの誤り割合を算出しています。<br>例として、長い生成文になればなるほど、前に一度出現した単語が再度出現しやすくなる、というエラーが確認されたそうです。</li>
</ul>
</li>
<li><strong>数量表現と比較に着目した意味解析に向けて</strong><ul>
<li>佐々木翔大, 田然, 乾健太郎（東北大）</li>
<li>スーパーのチラシで、「本日大根100円セール！」のところを「本日大根1000円セール！」と誤記すると、誰もお客さんは寄ってきませんよね。これは、数量の常識を理解する問題、と言えます。<br>この問題の一つに、個々のモノによって数量の常識的値のレンジが変化し、かつ多種多様なモノが世の中にスパースに存在する、という点が挙げられます。<br>本発表では、モノそれ自体を条件として常識的値を付与するのではなく、モノをembeddingしたものを条件として値を推定する、というアプローチを取っています。<br>残念ながら実験結果は良くなかったと報告されていましたが、その要因として、条件側となる文字列に対するembeddingを行う際、wikipediaから学習したword2vecを素直に用いた点が挙げられるかもしれません。<br>例えば、周辺文脈の単語を全て用いるword2vecの構成方法ではなく、特に数値に対して重みをかけつつ embedding 空間を構成できれば、この課題を解決できるかもしれず、その点について著者の佐々木さんと少し議論させていただきました。</li>
</ul>
</li>
</ul>
<h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>最後のクロージングセッションで報告されたアンケートは、運営委員渾身の力作で、様々な観点から参加者の意見をうかがい知ることができました。<br>特に興味深かったのは、学生の就職先の希望に関するアンケートです。<br>なんと、参加者の約半数がNLP関連を希望する一方、残る半数はNLP以外を希望しているとのこと。</p>
<p>私自身、産業発展の観点で、NLP以外の関連技術を自由に組み合わせたR&amp;Dにチャレンジしていきたいと思っています。</p>
<p>幸い、フューチャーアーキテクトには顧客毎の特徴的な、テキスト・画像・センサなど多数のデータが蓄積されており、チャレンジングな課題を持った人にとって、面白い環境だと思います。<br>もし、フューチャーアーキテクトについてご興味を持った方がいらっしゃいましたら、ぜひお気軽にご連絡ください！</p>
<p><img src="/images/20170915/photo_20170915_02.jpeg" width="50%"><br>弊社スポンサー発表の様子</p>
<p><img src="/images/20170915/photo_20170915_03.jpg" width="50%"><br>アメニティグッズ（清涼タブレット）</p>
<p><img src="/images/20170915/photo_20170915_04.jpg" width="50%"><br>海岸でのバーベキューの様子</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">[Serban+’17] Iulian V. Serban, Chinnadhurai Sankar, Mathieu Germain, Saizheng Zhang, Zhouhan Lin, Sandeep Subramanian, Taesup Kim, Michael Pieper, Sarath Chandar, Nan Rosemary Ke, Sai Mudumba, Alexandre de Brebisson, Jose M. R. Sotelo, Dendi Suhubdy, Vincent Michalski, Alexandre Nguyen, Joelle Pineau and Yoshua Bengio, &quot;A Deep Reinforcement Learning Chatbot&quot;, arXiv:1709.02349, <a href="https://arxiv.org/abs/1709.02349" target="_blank" rel="noopener">https://arxiv.org/abs/1709.02349</a> (2017)</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">[Mochihashi+’09]Daichi Mochihashi, Takeshi Yamada and Naonori Ueda, &quot;Bayesian Unsupervised Word Segmentation with Nested Pitman-Yor Language Modeling&quot;,  Proceeding of the the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP, pages 100-108 (2009)</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">[Uchiumi+’15]Kei Uchiumi, Hiroshi Tsukahara and Daichi Mochihashi, 2015, &quot;Inducing Word and Part-of-Speech with Pitman-Yor Hidden Semi-Markov Models&quot;, Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing, pages 1774–1782 (2015)</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;はじめまして、7月からフューチャーアーキテクトで自然言語処理・人工知能分野の研究開発を担当している、Strategic R&amp;amp;Dチームの貞光です。&lt;/p&gt;
&lt;p&gt;2017/9/3(日) ～ 2017/9/5(火) に開催された第12回NLP若手の会シンポジウム (YA
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
      <category term="NLP" scheme="https://future-architect.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>uroboroSQL x Spring BootによるWebアプリケーション開発</title>
    <link href="https://future-architect.github.io/articles/20170828/"/>
    <id>https://future-architect.github.io/articles/20170828/</id>
    <published>2017-08-28T03:00:00.000Z</published>
    <updated>2017-09-13T07:18:14.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uroboroSQLについて"><a href="#uroboroSQLについて" class="headerlink" title="uroboroSQLについて"></a>uroboroSQLについて</h1><p>こんにちは。星です。</p>
<p>今回は本技術ブログにもロゴが掲載されている弊社OSSプロダクトの一つ、「<a href="https://future-architect.github.io/uroborosql-doc/">uroboroSQL</a>」を利用してWebアプリケーションをどうやって開発すればよいのか？という話をさせて頂きたいと思います。</p>
<p>今年3月に実施されたオープンソースカンファレンス2017 Tokyo/Springを皮切りに、5月の名古屋、そして、8月の京都の開催においてもブース出展・セミナーでご紹介してきましたが、来場者の方々に興味をもって頂き、さまざまなフィードバックを頂き、OSSにした実感を得ています。</p>
<p>JavaでRDBにアクセスするアプリケーションを開発する場合、Java標準のJPA(Java Persistence API)や、Hiberate、MyBatis、EclipseLink、DBFlute、Domaなど、多くの選択肢が存在しています。</p>
<p>uroboroSQLもこういったJavaにおけるDB永続化ライブラリの一つであり、ORマッピングの機能も持っていますが、基本的にはJavaからSQLを生成することよりも、SQLに足りないところをJavaで補うアプローチを採用しているのが特徴です。</p>
<blockquote>
<p>uroboroSQLに興味を持たれた方は、公式サイトおよび私がオープンソースカンファレンス2017 Nagoyaにて、講演した資料をご覧ください。</p>
<p>uroboroSQL公式サイト<br><a href="https://future-architect.github.io/uroborosql-doc/">https://future-architect.github.io/uroborosql-doc/</a></p>
<p>uroboroSQLの紹介 (OSC2017 Nagoya) #oscnagoya<br><a href="https://www.slideshare.net/KenichiHoshi1/uroborosql-osc2017-nagoya-oscnagoya" target="_blank" rel="noopener">https://www.slideshare.net/KenichiHoshi1/uroborosql-osc2017-nagoya-oscnagoya</a></p>
</blockquote>
<h1 id="uroboroSQLを利用したSpring-BootによるWebアプリケーション"><a href="#uroboroSQLを利用したSpring-BootによるWebアプリケーション" class="headerlink" title="uroboroSQLを利用したSpring BootによるWebアプリケーション"></a>uroboroSQLを利用したSpring BootによるWebアプリケーション</h1><p>さて、JavaでWebアプリケーションを開発するとき、いわゆるWebアプリケーションフレームワークをどうするかという話がありますが、有償のWebアプリケーションサーバを利用する前提であれば、JavaEEは有力な選択肢でしょうし、そうでなければ、Spring Framework(Spring Boot)、Play Frameworkなどが有力かなと思います。特に最近はPaaSなどでコンテナ上で動かす場合は、TomcatやJettyなどを組み込んで、実行可能jarにしてデプロイするという方式もトレンドでしょうか。</p>
<p>uroboroSQLは、特定のWebアプリケーションフレームワークには依存しませんが、現在コマンドラインのサンプルぐらいしか用意できていないので、実際にWebアプリケーションを開発する場合のイメージがわかないという声も聞こえてくるようになりました。</p>
<p>そこで、現在最も人気のあるJavaのWebアプリケーションフレームワークの一つである「Spring Boot」を採用して、uroboroSQLのリファレンスとなるWebアプリケーションを開発してみました。</p>
<p>そして、今回採用するSpring Bootが「Spring PetClinic」というサンプルアプリケーションを公開していることもあり、それを見習って、「uroboroSQL PetClinic」を作ってみました。</p>
<p>なお、最近フロントエンドはJSフレームワーク利用のケースが多いかと思いますので、Thymeleafによるサーバサイドレンダリングではなく、Vue.jsを用いて実装しています。本サンプルのメイン部分ではありませんので、本記事では詳細には触れませんが、興味がある方はソースをご覧ください。</p>
<ul>
<li>uroboroSQL PetClinic<ul>
<li><a href="https://github.com/shout-star/uroborosql-springboot-demo" target="_blank" rel="noopener">https://github.com/shout-star/uroborosql-springboot-demo</a></li>
</ul>
</li>
</ul>
<h1 id="uroboroSQL-PetClinic"><a href="#uroboroSQL-PetClinic" class="headerlink" title="uroboroSQL PetClinic"></a>uroboroSQL PetClinic</h1><p><img src="/images/20170828/photo_20170828_01.jpg" class="img-middle-size"></p>
<p>トップページはSpring PetClinicをご存じの方だったら、ピンと来るかなと思います。<br>基本的に仕様はほぼ踏襲しています。</p>
<p>簡単にこのアプリケーションの説明をすると、動物病院のペット・飼い主の管理システムですね。「Find Owner」から飼い主を検索して、その飼い主のペットの登録やペットの来院履歴の登録ができるといったものです。</p>
<p><img src="/images/20170828/photo_20170828_02.png" class="img-middle-size"></p>
<p><img src="/images/20170828/photo_20170828_03.png" class="img-middle-size"></p>
<p>ログイン不要で利用できたり、DBの排他制御がなかったりと、あくまでサンプルという位置づけですね。</p>
<h1 id="uroboroSQLとSpring-Boot連携"><a href="#uroboroSQLとSpring-Boot連携" class="headerlink" title="uroboroSQLとSpring Boot連携"></a>uroboroSQLとSpring Boot連携</h1><p>Spring Bootだと、通常はSpring Data JPAを利用することが多いかと思いますが、今回は uroboroSQLと連携させるので、application.ymlで定義した<code>DataSource</code>を、uroboroSQLのSqlConfigに渡してやる必要があります。</p>
<p>今回はSpring BootのControllerの親クラス(BaseController)にて、その実装をしてみました。</p>
<p>なお、RDBはH2 Database、コネクションプールは、Tomcat JDBC Connection Poolを利用しています。</p>
<p><strong>application.yml（抜粋）</strong></p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    url:</span> jdbc:h2:file:./target/db/petclinic;AUTOCOMMIT=<span class="literal">FALSE</span></div><div class="line"><span class="attr">    username:</span> sa</div><div class="line"><span class="attr">    password:</span></div><div class="line"><span class="attr">    driver-class-name:</span> org.h2.Driver</div><div class="line"><span class="attr">    name:</span> jdbc/petclinic</div></pre></td></tr></table></figure>
<p><strong>BaseController.java（抜粋）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataSource dataSource;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseController</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dataSource = dataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * create &lt;code&gt;SqlAgent&lt;/code&gt; instance.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> &lt;code&gt;SqlAgent&lt;/code&gt;</div><div class="line">     */</div><div class="line">    <span class="function">SqlAgent <span class="title">createAgent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            SqlConfig config = DefaultSqlConfig.getConfig(dataSource.getConnection());</div><div class="line"></div><div class="line">            config.getSqlFilterManager().addSqlFilter(<span class="keyword">new</span> DebugSqlFilter());</div><div class="line">            config.getSqlFilterManager().initialize();</div><div class="line"></div><div class="line">            <span class="keyword">return</span> config.createAgent();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 以下略 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本来は<code>DefaultSqlConfig#getConfig</code>に直接<code>DataSource</code>を渡したいところだったんですが、uroboroSQL v0.2ではそのインタフェースがなくて、<code>getConnection</code>することにしました。ちなみに、v0.3では<code>DataSource</code>を直接渡せるようにする予定です。</p>
<h1 id="検索処理の実装"><a href="#検索処理の実装" class="headerlink" title="検索処理の実装"></a>検索処理の実装</h1><p>飼い主の検索画面(Find Owner)で、飼い主(Owner)の名字(LastName)で検索ボタンを押下したときに呼び出される実装は下記のようになります。</p>
<p><strong>OwnerController.java（抜粋）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@CrossOrigin</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/owners"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OwnerController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OwnerController</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; find(<span class="meta">@RequestParam</span>(required = <span class="keyword">false</span>) String lastName) <span class="keyword">throws</span> SQLException &#123;</div><div class="line">        <span class="keyword">try</span> (SqlAgent agent = createAgent()) &#123;</div><div class="line">            <span class="keyword">return</span> agent.query(<span class="string">"owners-find"</span>)</div><div class="line">                .param(<span class="string">"lastName"</span>, lastName)</div><div class="line">                .collect(CaseFormat.CamelCase);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* 以下略 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>owner-find.sql</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="comment">/* _SQL_ID_ */</span></div><div class="line">  OWNERS.ID</div><div class="line">, OWNERS.FIRST_NAME</div><div class="line">, OWNERS.LAST_NAME</div><div class="line">, OWNERS.ADDRESS</div><div class="line">, OWNERS.CITY</div><div class="line">, OWNERS.TELEPHONE</div><div class="line">, <span class="keyword">GROUP_CONCAT</span>(PETS.NAME)   <span class="keyword">AS</span>  PETS_NAME</div><div class="line"><span class="keyword">FROM</span></div><div class="line">  OWNERS</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></div><div class="line">  PETS</div><div class="line"><span class="keyword">ON</span></div><div class="line">  OWNERS.ID = PETS.OWNER_ID</div><div class="line"><span class="comment">/*BEGIN*/</span></div><div class="line"><span class="keyword">WHERE</span></div><div class="line"><span class="comment">/*IF SF.isNotEmpty(lastName) */</span></div><div class="line">  LAST_NAME   <span class="keyword">LIKE</span>  <span class="string">'%'</span> ||  <span class="comment">/*lastName*/</span><span class="string">''</span>  ||  <span class="string">'%'</span></div><div class="line"><span class="comment">/*END*/</span></div><div class="line"><span class="comment">/*END*/</span></div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> OWNERS.ID</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> OWNERS.ID</div></pre></td></tr></table></figure>
<p>uroboroSQLはSQLを実装する方式のライブラリなので、ご覧の通りControllerの実装は非常に簡潔で、パラメータを渡して呼び出すのみの実装です。</p>
<p>実際にSQL出力する際は、uroboroSQLの2-way SQLの機能により、名字(lastName)が未入力ならWHERE句自体がなくなり、全件検索するSQLになります。</p>
<p>なお、実際に自分で実装してみて、<code>SQLException</code>の検査例外が邪魔に感じたので、uroboroSQL v0.3からは実行時例外にする予定です。<br>やはり自身で実装してみると気づきがあるものですね。</p>
<h1 id="登録処理の実装"><a href="#登録処理の実装" class="headerlink" title="登録処理の実装"></a>登録処理の実装</h1><p><img src="/images/20170828/photo_20170828_04.png" class="img-middle-size"></p>
<p>次に飼い主の登録画面の実装を見てみます。</p>
<p><strong>OwnerController.java（抜粋）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@CrossOrigin</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/owners"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OwnerController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/new"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">create</span><span class="params">(@Validated @RequestBody Owner owner)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> handleCreate(owner);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 以下略 */</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>BaseController.java（抜粋）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * get generate keys.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> agent SqlAgent</div><div class="line">     * <span class="doctag">@return</span> keys as &#123;<span class="doctag">@literal</span> Map&lt;String, Object&gt;&#125;</div><div class="line">     * <span class="doctag">@throws</span> SQLException SQLException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">generatedKeys</span><span class="params">(SqlAgent agent)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> agent.queryWith(<span class="string">"SELECT SCOPE_IDENTITY() AS ID"</span>)</div><div class="line">            .collect(CaseFormat.CamelCase)</div><div class="line">            .get(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">handleCreate</span><span class="params">(BaseModel model)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">try</span> (SqlAgent agent = createAgent()) &#123;</div><div class="line">            <span class="keyword">return</span> agent.required(() -&gt; &#123;</div><div class="line">                agent.insert(model);</div><div class="line">                <span class="keyword">return</span> generatedKeys(agent);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Owner.java（抜粋）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Table</span>(name = <span class="string">"OWNERS"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Owner</span> <span class="keyword">extends</span> <span class="title">BaseModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Size</span>(max = <span class="number">30</span>)</div><div class="line">    <span class="keyword">private</span> String firstName;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Size</span>(max = <span class="number">30</span>)</div><div class="line">    <span class="keyword">private</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Size</span>(max = <span class="number">255</span>)</div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Size</span>(max = <span class="number">80</span>)</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Digits</span>(fraction = <span class="number">0</span>, integer = <span class="number">10</span>)</div><div class="line">    <span class="keyword">private</span> String telephone;</div><div class="line"></div><div class="line">    <span class="comment">/* 以下getter/setter */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>実際に呼ばれるControllerのメソッドは親に委譲しているだけにシンプルですね。<br>Spring Bootによって、フロントエンドから渡されたJSONがOwnerというエンティティクラスに自動的にマッピングされて、かつ、BeanValidationが実行され、問題なければDB登録処理が呼び出されます。</p>
<p>uroboroSQLもv0.2より、JPAライクなORマッピング機能を追加したことにより、INSERT/UPDATEといった処理はSQL不要でシンプルに実装することができました。</p>
<h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>というわけで、uroboroSQLとSpring BootのWebアプリケーションの実装を見てきましたが、いかがでしたしょうか？</p>
<p>私自身、Spring Framework自体はこれまでも使ってきたものの、Spring Bootは初体験でしたが、うまい具合にSpring Frameworkの面倒だったところを隠していることもあり、非常にスマートですね。</p>
<p>RestControllerにおける検索処理では、uroboroSQLの<code>SqlAgent#query</code>の結果をそのまま返すだけでも事足りるケースも多く、Spring Bootとの相性は良いと感じました。<br>uroboroSQL自体がシンプルな仕様なこともあり、初見でも簡単に実装できることがわかって頂けたのではないかと思います。</p>
<p>むしろ、Vue.jsでのフロントエンドの実装ボリュームのほうが圧倒的に多いですね。。。</p>
<p>uroboroSQLは現在v0.3に向けて、鋭意開発を進めており、まだまだ進化していきますので、是非使ってみてください！！</p>
<p>uroboroSQL PetClinicも認証機能など、エンタープライズ用途の参考になるような機能をまだまだ追加していきたいと思っていますので、こちらもよろしくお願いします。</p>
<h2 id="番外編：SQLログ表示機能"><a href="#番外編：SQLログ表示機能" class="headerlink" title="番外編：SQLログ表示機能"></a>番外編：SQLログ表示機能</h2><p><img src="/images/20170828/photo_20170828_05.png" class="img-middle-size"></p>
<p>本家Spring Clinicには存在しない機能ですが、サーバサイドで実行されたuroboroSQLの出力するログを画面上で表示する機能を追加してみました。画面左下の目のアイコンをクリックするとログウィンドウが表示されます。</p>
<p>もちろん、実業務ではこのような機能はセキュリティホールになってしまいますが、これでどんな操作によってどんなSQLが実行されたのか、画面から見ることができますので、uroboroSQLのデモにも使えるかなと思っています。</p>
<p>そういうわけで、2017/9/9(土)、2017/9/10(日)に開催されるオープンソースカンファレンス2017 Tokyo/Fallにて、ブースでお見せしたいと思いますので、興味のある方は是非、当日フューチャーアーキテクト  ブースまで足を運んでください！！</p>
<ul>
<li>オープンソースカンファレンス2017 Tokyo/Fall - オープンソースの文化祭！<ul>
<li><a href="https://www.ospn.jp/osc2017-fall/" target="_blank" rel="noopener">https://www.ospn.jp/osc2017-fall/</a></li>
</ul>
</li>
</ul>
<h1 id="関連サイト"><a href="#関連サイト" class="headerlink" title="関連サイト"></a>関連サイト</h1><ul>
<li>uroboroSQL PetClinic<ul>
<li><a href="https://github.com/shout-star/uroborosql-springboot-demo" target="_blank" rel="noopener">https://github.com/shout-star/uroborosql-springboot-demo</a></li>
</ul>
</li>
<li>uroboroSQL Github Repository<ul>
<li><a href="https://github.com/future-architect/uroborosql" target="_blank" rel="noopener">https://github.com/future-architect/uroborosql</a></li>
</ul>
</li>
<li>uroboroSQL Document<ul>
<li><a href="https://future-architect.github.io/uroborosql-doc/">https://future-architect.github.io/uroborosql-doc/</a></li>
</ul>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>Spring Boot<ul>
<li><a href="https://projects.spring.io/spring-boot/" target="_blank" rel="noopener">https://projects.spring.io/spring-boot/</a></li>
</ul>
</li>
<li>Spring PetClinic<ul>
<li><a href="https://github.com/spring-projects/spring-petclinic" target="_blank" rel="noopener">https://github.com/spring-projects/spring-petclinic</a>)</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;uroboroSQLについて&quot;&gt;&lt;a href=&quot;#uroboroSQLについて&quot; class=&quot;headerlink&quot; title=&quot;uroboroSQLについて&quot;&gt;&lt;/a&gt;uroboroSQLについて&lt;/h1&gt;&lt;p&gt;こんにちは。星です。&lt;/p&gt;
&lt;p&gt;今回は本
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
      <category term="uroboroSQL" scheme="https://future-architect.github.io/tags/uroboroSQL/"/>
    
  </entry>
  
  <entry>
    <title>古典的ゲームAIを用いたAlphaGo解説</title>
    <link href="https://future-architect.github.io/articles/20170804/"/>
    <id>https://future-architect.github.io/articles/20170804/</id>
    <published>2017-08-04T01:00:00.000Z</published>
    <updated>2017-08-03T23:50:21.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。データ分析チームの李(碩)です。<br>この記事はAlphaGo解説の紹介です。本文を直接読みたい方は下記<a href="https://www.slideshare.net/suckgeunlee/aialphago/suckgeunlee/aialphago" target="_blank" rel="noopener">AlphaGo解説</a>にてスライドをご覧になってください。</p>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/key/MkHgW3PHRXZxOL" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/suckgeunlee/aialphago" title="古典的ゲームAIを用いたAlphaGo解説" target="_blank">古典的ゲームAIを用いたAlphaGo解説</a> </strong> from <strong><a target="_blank" href="https://www.slideshare.net/suckgeunlee">suckgeun lee</a></strong> </div></p>
<h1 id="AlphaGo調査のきっかけ"><a href="#AlphaGo調査のきっかけ" class="headerlink" title="AlphaGo調査のきっかけ"></a>AlphaGo調査のきっかけ</h1><p>私がAlphaGoについて初めて聞いたのは2016年3月、囲碁の伝説的な棋士、イ・セドルとの対局の時でした。AlphaGoの勝利が確定した時に「人間はもはや機械に勝てない!」とか、「AIが支配する世界」など海外のメディアも非常に炎上してたことを今でも覚えています。囲碁のプレイ経験もないし、ゲームAIなんて興味もなかったのですが、さすがにこれだけ大騒ぎになると調べたくなるものですね(笑)。</p>
<h1 id="AlphaGoは背景知識がない人には難しい"><a href="#AlphaGoは背景知識がない人には難しい" class="headerlink" title="AlphaGoは背景知識がない人には難しい"></a>AlphaGoは背景知識がない人には難しい</h1><p>AlphaGoの中身はどうなってるのかを調べるためにいろいろとブログや記事などを読んでいたのですが、当時は難しいアルゴリズム説明がドンとくる不親切な情報しか見あたらなかったです。何を説明しているのか全く分からなかったので、結局<a href="https://www.nature.com/nature/journal/v529/n7587/full/nature16961.html" target="_blank" rel="noopener">AlphaGoの論文</a>を直接読むことになりました。そこで分かったのが、これはゲームAIの背景知識がないと理解しにくいことでした。AlphaGoがモンテカルロ木検索とDLを使って強くなったとは理解しましたが、これって何がすごいのかが全く伝わらないのです。</p>
<h1 id="AlphaGo中身と、そのすごさを理解するには、古典的ゲームAIも触れる必要がある"><a href="#AlphaGo中身と、そのすごさを理解するには、古典的ゲームAIも触れる必要がある" class="headerlink" title="AlphaGo中身と、そのすごさを理解するには、古典的ゲームAIも触れる必要がある"></a>AlphaGo中身と、そのすごさを理解するには、古典的ゲームAIも触れる必要がある</h1><p>突然AlphaGoのアルゴリズムをドンと説明されても困ってしまいます。そもそもなぜAlphaGoが今の形になったのか、従来のアルゴリズムと何が違うのか、性能はどれくらい上がったのかが全く見えなかったです。<br>結局私はゲームAIの歴史を含め、他の木探索系のアルゴリズムを調査しその違いを比較することになりました。<br>その背景知識を得た後に、なぜAlphaGoが今の形になったのか、どこがすごいのかがやっと理解できたのです。</p>
<h1 id="本資料の狙い"><a href="#本資料の狙い" class="headerlink" title="本資料の狙い"></a>本資料の狙い</h1><p>この資料は私のように、ゲームAIに関する背景知識はないがAlphaGoの中身が知りたい人のための資料です。単純にアルゴリズムを説明するのではなく、古典的なゲームAIに比べAlphaGoはどう発展してきたのか、何がすごいのかを説明していきます。<br>この資料に書いている古典的ゲームAIは全てのゲームAIではないですが、AlphaGoの発展の方向性を理解するには十分だと思っています。本資料ではディープラーニングや強化学習の詳細については触れませんが、その詳細が知りたい人は<a href="https://www.nature.com/nature/journal/v529/n7587/full/nature16961.html" target="_blank" rel="noopener">AlphaGoの論文</a>を直接読んだ方が絶対に分かりやすいと思いますので、論文をおすすめします。</p>
<h1 id="本資料の目次"><a href="#本資料の目次" class="headerlink" title="本資料の目次"></a>本資料の目次</h1><ol>
<li>AlphaGo簡略紹介</li>
<li>ゲームAIの基層知識紹介<ul>
<li>ゲーム木</li>
<li>完全ゲーム木</li>
<li>部分ゲーム木</li>
</ul>
</li>
<li>効果的にゲーム木を計算するためのポイント</li>
<li>ミニマックス法 (1949年)</li>
<li>アルファ・ベータ法 (1958年)</li>
<li>古典的アルゴリズムの成功と失敗<ul>
<li>チェスでの成功：Deep Blue、1997年</li>
<li>囲碁での失敗</li>
</ul>
</li>
<li>モンテカルロ木検索 (1993年)<ul>
<li>囲碁での進歩</li>
<li>AlphaGoのベースになるアルゴリズム</li>
</ul>
</li>
<li>Deep Learningの登場 (2012年)</li>
<li>AlphaGoの登場 (2016年)<ul>
<li>モンテカルロ木検索の改良</li>
<li>Policy Network</li>
<li>Value Network</li>
<li>Rollout Policy</li>
<li>強化学習</li>
<li>AlphaGoのアーキテクチャ</li>
<li>性能比較</li>
</ul>
</li>
</ol>
<h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本資料は2016年の論文をベースにしていますが、現在のAlphaGoは仕組みがかなり変わったらしいですね。2017年末新しい論文が出るとのことですが、非常に楽しみです。その論文が出る前に、この資料がたくさんの人の役に立てればと思っています。</p>
<p>ちなみに、技術職ではない私のかわいい妻に見せたら、何の問題もなく理解してくれたので、背景知識が無くても読めると思います。</p>
<p>では、また新しい論文がでるまで、みなさんお元気で！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。データ分析チームの李(碩)です。&lt;br&gt;この記事はAlphaGo解説の紹介です。本文を直接読みたい方は下記&lt;a 
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>インフラ入門vol.2(ネットワーク)</title>
    <link href="https://future-architect.github.io/articles/20170704/"/>
    <id>https://future-architect.github.io/articles/20170704/</id>
    <published>2017-07-04T06:04:04.000Z</published>
    <updated>2017-07-03T02:32:15.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>みなさま、こんにちは。洞内です。</p>
<p>今回はインフラ入門のvol.2と題して、インフラエンジニアの若手がネットワーク設計の現場で向き合っていく事柄（ここでは手段ではなく、設計の検討で外してはいけないポイント）について、説明します。</p>
<ul>
<li>前記事は<a href="https://future-architect.github.io/articles/20170109/">こちら</a>です</li>
</ul>
<h1 id="ネットワークって？"><a href="#ネットワークって？" class="headerlink" title="ネットワークって？"></a>ネットワークって？</h1><p>ネットワークとは「網状に作られた何か」（by Wikipedia）ですが、ITインフラにおけるネットワークとは、<strong>コンピューターAからコンピューターBへとデータを送るための通信経路</strong> の事を指します。<br><img src="/images/20170704/photo_20170704_01.png"></p>
<p>身近なものでイメージをするのであれば、電話、メール、SNS等はネットワークが存在して、その上をデータがやり取りされている事が大前提となる機能です。<br>電話であれば「音声データ」、メールやSNSであれば「文字データや画像データ」等を、相手のスマートフォンに届けるために、通信経路となる「ネットワーク」が使われている訳ですね。<br><img src="/images/20170704/photo_20170704_02.png"></p>
<p>身近なものを例に挙げましたが、業務システム（業務アプリケーション）でも同じことが言えます。<br>例えば、お店で不足した商品を補充する発注業務等でもネットワークを通じて、商品を注文していますし、遠く離れた相手とTV会議をするにもネットワークが使われています。</p>
<p>では、様々な場面で利用されているネットワークですが、どのようなポイントを意識して設計するのかを考えていきたいと思います。</p>
<h1 id="設計の要件"><a href="#設計の要件" class="headerlink" title="設計の要件"></a>設計の要件</h1><p>ネットワークを設計する際のポイントとなる要件は以下です。</p>
<ol>
<li>だれがどのように使うのか</li>
<li>どの位のデータが流れるのか</li>
<li>機械の故障等による停止はどの程度まで許容できるのか</li>
</ol>
<p>上から順番に見てみましょう。</p>
<h2 id="1-だれがどのように使うのか"><a href="#1-だれがどのように使うのか" class="headerlink" title="1. だれがどのように使うのか"></a>1. だれがどのように使うのか</h2><p>例えば、以下のように状況によって用意すべきネットワークは異なります。</p>
<p><strong>a. 会社員の方が、必ず会社のオフィスの自席で使う</strong><br>→この場合、ネットワークは有線で用意すれば良いでしょう</p>
<p><strong>b. 会社員の方が、会社のオフィス内の色々な場所で使う</strong><br>→この場合、ネットワークは無線の方が良いですね？</p>
<p><strong>c. 会社員の方が、客先でお客様と商談をしながら使う</strong><br>→こうなってくると、モバイルWi-Fiを使う事も検討する必要がでてきます</p>
<p><img src="/images/20170704/photo_20170704_03.png"></p>
<p>利用者がどのようなシチュエーションで利用するのかは、ネットワークを設計する上での非常に重要なポイントですね。</p>
<p>他にも、考慮すべき点は色々考えられると思います。</p>
<p><strong>d. インターネット上にWebサイトを公開するので、不特定多数の人がアクセスする</strong><br>→この場合は、使い勝手の話だけではなく、不正アクセスの対策等も必要になってきます。<br>（もちろん、アプリケーションに不具合を作らない事も重要ですが、ネットワークの設計や設定としても不要な通信は通さないといった事を考える必要があります）</p>
<h2 id="2-どの位のデータが流れるのか"><a href="#2-どの位のデータが流れるのか" class="headerlink" title="2. どの位のデータが流れるのか"></a>2. どの位のデータが流れるのか</h2><p>例えば、家庭のインターネットサービスでも、10Mbps、100Mbps、1Gbps等の通信速度の違うサービスがありますね。<br>これは用途にあったサービスプランを選ぶと思います。</p>
<ul>
<li>メールや、ちょっと調べ物をしたいだけの人は10Mbps</li>
<li>動画をたくさん見たい人は100Mbps～1Gbps</li>
</ul>
<p>動画をたくさん見たい人が、10Mbpsの回線を契約した場合は通信速度が遅くて動画がカクカクしてしまうかもしれませんね。また、<strong>複数人で同じ10Mbpsの回線を使っている場合、他の人もなかなかメールが送れない</strong>といった状況になるかもしれません。</p>
<p><img src="/images/20170704/photo_20170704_04.png"></p>
<p>ネットワークの設計をする上では、<strong>どの位のデータが流れるのか</strong> や <strong>今後、どの位のデータが流れるのか</strong> を考慮する必要があります。</p>
<p>家庭用のインターネットサービスでは、契約を変更して、機械を取り換えれば大体の場合は増速ができますが、会社の中のネットワークで増速しようとすると、大規模な工事が必要になる場合がほとんどです。</p>
<p>そのため、<strong>目的や使用用途を明確にして、どの位のデータがネットワークを流れるのか</strong>を見極めて設計をする必要があります。</p>
<h2 id="3-機械の故障等による停止はどの程度まで許容できるのか"><a href="#3-機械の故障等による停止はどの程度まで許容できるのか" class="headerlink" title="3. 機械の故障等による停止はどの程度まで許容できるのか"></a>3. 機械の故障等による停止はどの程度まで許容できるのか</h2><p>ネットワークを構成している機械もモノなので、いつかは故障しますし、それは突然訪れる事がままあります。</p>
<p>そんな突然故障した時に、ネットワークはどの程度の時間、使えないままになるのでしょうか？<br>5分？1時間？1日？</p>
<p>企業のネットワークがまるまる1日止まってしまったら大損失ですね。<br>そんな時のために、予備の機械を用意したり、壊れたときにすぐに自動で切り替えができる機械を用意したりすることを考えます。</p>
<p>当然、予備の機械の用意や、自動切り替えの機能がついた機械は値段も高くなりますので、<strong>全体の中で通信が止まってはいけないポイントはどこなのか</strong> を整理して、重要な箇所から優先的に投資を行うことが必要となってきます。</p>
<p><img src="/images/20170704/photo_20170704_05.png"></p>
<h1 id="設計の構成"><a href="#設計の構成" class="headerlink" title="設計の構成"></a>設計の構成</h1><p>前述の要件に加え、企業のネットワーク構成の設計には、以下の3つのポイントがあります。</p>
<ol>
<li>ネットワークのコア</li>
<li>LANとWANの利用</li>
<li>クラウドの利用</li>
</ol>
<p>こちらも順番にみていきましょう。</p>
<h2 id="1-ネットワークのコア"><a href="#1-ネットワークのコア" class="headerlink" title="1. ネットワークのコア"></a>1. ネットワークのコア</h2><p>ネットワークを構築する際、ほとんどの場合がコアルーターやコアスイッチと呼ばれるような、ネットワークの中心となる機械を用意します。</p>
<p>コアには沢山のデータが集まるため末端の機械よりも高い処理能力が必要になります。</p>
<p>また、通信が集中するため、不要な通信をブロックするファイアウォール機能や、通信の流量をコントロール（トラフィックシェーピング）して、セキュリティ性を高めたり、皆が快適に使えたりするといった制御を担うのがコアになります。</p>
<p>そのため、コアとなる機械が故障すると、全ネットワークが停止する恐れがあるため、先ほど挙げた<strong>機械の故障等による停止はどの程度まで許容できるのか</strong>という考え方の中で、非常に重要度の高いポイントと言えますね。</p>
<p> </p>
<h2 id="2-LANとWANの利用"><a href="#2-LANとWANの利用" class="headerlink" title="2. LANとWANの利用"></a>2. LANとWANの利用</h2><p>そもそも、LANとWANとはなんぞや？という方もいらっしゃると思いますので、簡単に説明します。</p>
<blockquote>
<ul>
<li>LAN(Local Area Network) <ul>
<li>1つの建物や、1つの組織の中で運用されるネットワークを指す言葉</li>
</ul>
</li>
<li>WAN(Wide Area Network):<ul>
<li>LANに対して、もっと広範囲に広がるネットワークを指す言葉。一般的にはインターネットサービスプロバイダが持つネットワークをWANと呼ぶ。</li>
</ul>
</li>
</ul>
</blockquote>
<p>LANは、何となくイメージが出来るかもしれません。<br>でも、WANはどうでしょうか？ちょっとぼんやりしたイメージかもしれませんね。<br>もう少し具体的にしましょう。</p>
<p>私たちが家庭でインターネットを利用する際、ほとんどの人が、インターネットサービスプロバイダと契約をして、インターネットを利用していると思います。<br>この時、契約内容にもよりますが、多くの場合はルーターと呼ばれる機械を用意して、このルーターに複数のPCやTV、ゲーム機等を接続して、インターネットを利用していると思います。<br>実はこのルーターの下に繋いだPC、TV、ゲーム機は1つのネットワークに所属しており、このネットワークの事をLANと言います。</p>
<p>また、ルーターを挟んで反対側(インターネットサービスプロバイダ側)をWANと言います。<br>このWANと呼ばれる、インターネットサービスプロバイダ側のネットワークがたくさん集まり、繋がっている物がインターネットと呼ばれるものです。言い換えると、インターネットとは様々なWANの集合体ということですね。</p>
<p>さて、話を戻して、当社の顧客には企業規模の大きなお客様が多く、オフィスも1つではなく、たくさんの拠点を構えていらっしゃいます。そのため1つの建物内で構成されたLANでは、業務遂行にあたり不便な部分が出てきてしまいます。</p>
<p>例えば、会計処理をするにあたり東京、名古屋、大阪それぞれのオフィスで処理したものを集めて、また合算するよりも、1ヶ所で処理をした方が早いですよね？</p>
<p>他にも同じ文書ファイルを各オフィスに配布するときに、それぞれの拠点の担当者にメールで配布をするよりも、ファイルサーバ上に置いて、1ヶ所から皆が参照をする方が効率的ですね。そのため、各拠点のLANをWANで繋いで、1つのLANとして扱うような設計を行う事が多くあります。</p>
<p>このように複数の拠点をまたぐLANを設計する場合、先ほど挙げたようなポイントを検討する必要があります。</p>
<ul>
<li>通信内容をどのように保護(第三者に傍受されないように)するのか。</li>
<li>ネットワークのコアをどこに配置するのか</li>
<li>だれがどのように使うのか。</li>
<li>どの位のデータが流れるのか。</li>
<li>機械の故障等による停止はどの程度まで許容できるのか。</li>
</ul>
<p>他にも、</p>
<ul>
<li>ネットワーク上の住所となるIPアドレスをどのように割り当てるのか。</li>
<li>将来拠点が増えたら、どのように拡張するのか。</li>
<li>重要なデータのある場所へのアクセス制御の有無。</li>
<li>通信のレイテンシ(遅延)はどうか。</li>
</ul>
<p>などなど考えることは様々です。</p>
<h2 id="3-クラウドの利用"><a href="#3-クラウドの利用" class="headerlink" title="3. クラウドの利用"></a>3. クラウドの利用</h2><p>昨今、このクラウドという単語は、IT業界だけではなく一般的にも浸透してきたのではないでしょうか？<br>一言でクラウドといっても、多種多様なサービスがありますが、共通していることがいくつかあります。</p>
<ul>
<li>必要な時に必要な分だけ機能やサービスを利用する</li>
<li>ネットワーク経由での利用が前提</li>
</ul>
<p>クラウドサービスはネットワーク経由での利用が前提になっているのですね。<br>クラウドへの接続の方法は、多くはインターネット経由ですが、クラウドサービスの提供側が対応していれば、WAN経由での接続も可能です。</p>
<p>先ほど、WANを使って各拠点のLANを1つにまとめるといった話をしましたが、クラウドサービスも、そんなLANの1つとして扱う事ができる訳ですね。</p>
<p>ただし、当然ですが何でもかんでも繋げば良いという事ではなく、限られた予算の中でどのようにするのが一番良いのかを常に考えて、不要なのであれば切り捨てるといった判断をする事も必要です。</p>
<h1 id="プロジェクトを進める上でのネットワーク"><a href="#プロジェクトを進める上でのネットワーク" class="headerlink" title="プロジェクトを進める上でのネットワーク"></a>プロジェクトを進める上でのネットワーク</h1><p>実際にプロジェクトの中では、ほとんどの企業が既にネットワークを持っている場合が多いのですが、新しく作るシステムを作る上で、ネットワークを拡張するための設計や対応が必要な場合があります。</p>
<p>そんな時、インフラの構築の中でも特にネットワークはプロジェクト全体の進行に対して大きく先行して進めなければなりません。</p>
<p>ネットワークを作るためには、機械の発注や購入だけではなく、建物工事や、通信が正しく行えるか疎通試験等も行う必要があるからです。</p>
<p>その他にも、お客様自身が自社のネットワークを網羅しきれておらず、現行のネットワーク調査を行う必要が有る場合等もあります。</p>
<p>こういった作業に対するスケジュールや、見積り、設計を誤ってしまうと、プロジェクトの進行が大きく遅れるだけではなく、お客様に想定外の出費をさせてしまう可能性があります。</p>
<p>実際に、当社の中でも建物工事を行う業者の繁忙期閑散期を見誤り、実際に工事が行えるタイミングが当初想定より遅れてしまいギリギリでの対応となったことや、いざ使い始めてみると、当初の想定見積よりも多くの通信が流れており、通信の圧縮処理や、通信処理が集中する時間を分散させて影響を最小限に留めるように業務処理の見直しを行った事などもあります。</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>いかがでしたでしょうか？<br>普段、多くの方々はあまりネットワークについて意識をしていないかもしれません。</p>
<p>その理由は<a href="https://future-architect.github.io/articles/20170109/">インフラ入門vol1</a>にもありましたが、ITインフラが<strong>動いて当たり前</strong>だからです。ただ、実際に壊れない機器は無いですし、<strong>メールだけ出来れば良い</strong> としていた環境でだれかが勝手に<strong>動画も配信！</strong> となれば、その元々の要件下での <strong>動いて当たり前</strong> は崩れてしまいます。</p>
<p>この <strong>動いて当たり前</strong> を崩れないようにしっかりと作りつつ、今後の拡張性や、セキュリティ、予算等のバランスを取って作り上げる事がネットワークの設計に求められることです。</p>
<p>では、また次回をお楽しみに。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;みなさま、こんにちは。洞内です。&lt;/p&gt;
&lt;p&gt;今回はインフラ入門のvol.2と題して、インフラエンジニアの若手がネットワー
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/tags/Infrastructure/"/>
    
      <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>ES2015 Web componentsと国産Web componentsフレームワークUrushi</title>
    <link href="https://future-architect.github.io/articles/20170605/"/>
    <id>https://future-architect.github.io/articles/20170605/</id>
    <published>2017-06-05T03:00:00.000Z</published>
    <updated>2017-06-05T01:00:16.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近のWebアプリ事情"><a href="#最近のWebアプリ事情" class="headerlink" title="最近のWebアプリ事情"></a>最近のWebアプリ事情</h1><p>2016年までの、MVX系フレームワーク、Reactに代表される仮想DOMを提供するフレームワーク、Vue.jsのようなWeb componentsフレームワークなど、フレームワーク群雄割拠時代を経て、2017年はWebフレームワーク界隈は落ち着いてきたように見えます。</p>
<p>今回ご紹介したいのは、Web componentsフレームワークとして作成したフューチャーアーキテクト製のOSS <strong>Urushi</strong> です。</p>
<h1 id="Web-componentsとは？"><a href="#Web-componentsとは？" class="headerlink" title="Web componentsとは？"></a>Web componentsとは？</h1><p>Web componentsは、HTML・ES2015の技術を駆使して作られるUIの再利用性を高める技術です。<br>Web componentsを構成する技術要素には下記があります。</p>
<ul>
<li>Custom elements</li>
<li>Class syntax</li>
<li>Shadow DOM</li>
<li>Template</li>
</ul>
<p>Web componentsの作り方・使い方については本記事では割愛させていただきますが、4つの技術要素のうち、特にShadow DOMの存在は大きいと思っています。理由はDOMのレベルでの編集・参照の制約を設けることができるため、開発規模が大きくなればなる程、イレギュラーな実装を防ぐ事ができ品質が安定するからです。</p>
<p>今回ご紹介するUrushiはこのWeb componentsの思想に迎合しているフレームワークです。</p>
<hr>
<p><img src="/images/20170530/photo_20170530_01.png" class="img-middle-size"></p>
<h1 id="どういうもの？"><a href="#どういうもの？" class="headerlink" title="どういうもの？"></a>どういうもの？</h1><p><a href="http://future-architect.github.io/urushi/ja-jp/"><i class="fa fa-arrow-right"></i>Urushi 公式</a><br>フューチャーアーキテクトのWebアプリケーション開発現場で、上述しているWeb componentsの技術を使わずに実装したWeb componentフレームワークです。</p>
<p>2017年5月時点では下記の形で提供しています。</p>
<ul>
<li>大規模開発で利用される事を想定しており、AMD<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>でのモジュール提供を前提としています</li>
<li>公開中のVersion 0.5.0は標準セットとしてMaterial designのWeb componentsを保有しています</li>
<li>2014年末に制作を開始し、2016年初頭にMITライセンスでGitHubに公開しました</li>
</ul>
<p>日本語での導入ページも作成していますので、ぜひご確認ください。<br><a href="http://future-architect.github.io/urushi/ja-jp/get-started.html">http://future-architect.github.io/urushi/ja-jp/get-started.html</a></p>
<h1 id="なぜ作ったのか"><a href="#なぜ作ったのか" class="headerlink" title="なぜ作ったのか"></a>なぜ作ったのか</h1><p>2014年秋。<br>参画していたプロジェクトで新しいシステムを構築する仕事をしていました。</p>
<p>様々な要件からアプリケーションはSingle Page ApplicationのWebアプリが良いだろうと判断しました。当時は、AngularJS, BackboneJS, KnockoutJSが多く使われていた時代です。これらのJavaScriptのフレームワークの中から、ブラウザの制約やJavaScript未経験者の習熟コストを考え、BackboneJSを採用しました。</p>
<p>BackboneJSの採用までは決まりましたが、品質向上、効率性の向上にはWeb componentsの仕組みが不足していると考えました。当時はPolymerなどのWeb componentsの仕組みを取り入れたライブラリも存在していましたが、ブラウザ要件により採用できません。</p>
<p>探していくうちに、自分で作った方が良いんじゃないかと思い始め、構想を練り、試作を繰り返していきました。<br>レガシーブラウザ対応があるので、当時最新技術だったWeb componetnsの技術は少しも使えません。試行錯誤の結果、レガシーブラウザでも動作可能なWeb componentsの仕組みを作ることができました。また、UrushiはJavaScript未経験者への配慮もあります。</p>
<p>仕組みとしては限りなくシンプルにし、ソースコードが追いづらい！と言われるようなことがないよう作成しています。業務システムでありがちな、レガシーバージョンのブラウザ対応、効率性、品質を向上させるためにUrushiと名付け、正式に作成しました。</p>
<p>ちなみにUrushiという名前は、特に意味を持たせているわけではありません。作者が前日に漆という文字を見たことによるインスピレーションです！</p>
<h1 id="使い方は？"><a href="#使い方は？" class="headerlink" title="使い方は？"></a>使い方は？</h1><h2 id="1-ダウンロード"><a href="#1-ダウンロード" class="headerlink" title="1. ダウンロード"></a>1. ダウンロード</h2><p>Urushi は下記ページの [GET URUSHI] ボタンから入手可能です。<br><a href="http://future-architect.github.io/urushi/ja-jp/get-started.html">http://future-architect.github.io/urushi/ja-jp/get-started.html</a></p>
<h2 id="2-Urushiの利用"><a href="#2-Urushiの利用" class="headerlink" title="2. Urushiの利用"></a>2. Urushiの利用</h2><p>解凍したフォルダをHTTPサーバに配置し、次のようにUrushiを利用します。</p>
<p>まずは、解凍したフォルダの直下にHTMLファイルを作成します。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf8"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Material DesignのUIをCSSで提供しています。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./urushi/material/style/material.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- AMDの実装としてRequireJSを採用しています。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./config/requireConfig.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/js/require.js"</span> <span class="attr">data-main</span>=<span class="string">"./main"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-urushi-type</span>=<span class="string">"panel"</span> <span class="attr">data-urushi-options</span>=<span class="string">'&#123;"header" : "Header title"&#125;'</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-urushi-type</span>=<span class="string">"button"</span>&gt;</span>CLICK ME<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>続いて同じフォルダ階層にJavaScriptファイルを作成します。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startup</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">require</span>.config(requireConfig);</div><div class="line">    <span class="built_in">require</span>([<span class="string">'templateEngine'</span>, <span class="string">'templateConfig'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">templateEngine, templateConfig</span>) </span>&#123;</div><div class="line">        templateEngine.renderDocument(<span class="built_in">document</span>.body, templateConfig).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(results);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.readyState === <span class="string">'complete'</span> || (<span class="built_in">document</span>.readyState !== <span class="string">'loading'</span> &amp;&amp; !<span class="built_in">document</span>.documentElement.doScroll)) &#123;</div><div class="line">    startup();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, startup);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-プレビュー"><a href="#3-プレビュー" class="headerlink" title="3. プレビュー"></a>3. プレビュー</h2><p>ただしく導入できていると、ブラウザに下記のような「CLICK ME」ボタンが表示されます。</p>
<p><img src="/images/20170530/photo_20170530_03.gif" class="img-small-size"></p>
<h2 id="4-仕組みについて"><a href="#4-仕組みについて" class="headerlink" title="4. 仕組みについて"></a>4. 仕組みについて</h2><p>下図に示すように、②で実行する関数中でDOMを直接操作することなく、インスタンスのAPIを実行することでコンポーネントの操作が可能になります。<br>DOMに直接アクセスしないことで、データを保全できたり、予期しない動作を防ぐ事ができるなど、Web componentsと同じメリットを享受することが可能です。</p>
<p><img src="/images/20170530/photo_20170530_02.png"></p>
<h1 id="プロジェクトに導入してみて"><a href="#プロジェクトに導入してみて" class="headerlink" title="プロジェクトに導入してみて"></a>プロジェクトに導入してみて</h1><p>プロジェクトでは100以上ものWeb componentsをUrushiの仕組みを利用して作成しました。</p>
<p>その結果として、アプリケーションの画面開発者は直接DOM操作を行わず、必ずWeb componentsのAPIを利用できたため、狙い通り品質を高くすることができました。また、「UrushiはJavaScriptを読めるようになると簡単にソースコードを読めるようになる。非常にわかりやすい！」という意見をもらえ、これまた狙い通りの成果を出せました。</p>
<p>しかし、一方でUIデザインに課題が残りました。UIに定義しているアニメーション時間は300msだったのですが、それがアプリケーションがサクサク動かないという錯覚を起こしてしまうことがありました。マージンの大きさでコンテンツの分かれめを表現をすると、そのマージンが無駄という捉えられ方をするという事がありました。</p>
<p>課題は1.0.0開発の糧とし、成果はUrushiの良いところと自信をもってオススメできます。<br>今後も構成はシンプルで未経験者にもわかりやすいものとして成長をさせる所存です。</p>
<h1 id="これからのWeb開発方式"><a href="#これからのWeb開発方式" class="headerlink" title="これからのWeb開発方式"></a>これからのWeb開発方式</h1><h2 id="現在"><a href="#現在" class="headerlink" title="現在"></a>現在</h2><p>Web開発方式は下記の2分化が発生しています。</p>
<ol>
<li>Babelを始めとしたNode.js上でトランスパイルし、リソースファイルをサービスする形式</li>
<li>Webブラウザのみで開発する形式  <ul>
<li>※Webサーバーはもちろん必要</li>
</ul>
</li>
</ol>
<p>どちらが選択すべきかの判断はなかなか難しいと思います。<br>Webブラウザのみで動作する形式には、仕組みの軽量さがメリットとして挙げられますが、反面ES6・TypeScriptなどが利用できないため、効率的なプログラミングができないというデメリットがあります。</p>
<h2 id="これから（想像）"><a href="#これから（想像）" class="headerlink" title="これから（想像）"></a>これから（想像）</h2><p>現在のWeb開発方式の二分化は今後も続くと思います。</p>
<p>npmでのモジュール公開が増えて来ていることも一因ですが、一番大きな要因はECMAScriptの新仕様への対応の速さにあると考えています。</p>
<p>現状ではアプリケーションが対応すべきブラウザが、例えばIE11, Edge, Chrome, Safari, Firefoxだったとすると、ES6の仕様はほぼ利用できません。しかし、ES6以降に魅力的な技術要素が多く、またエンジニアはそういったものを使いたがるものなので、Node.js + Babelなどのトランスパイラを利用する形式は必要です。</p>
<p>一方で、作成したHTML, CSS, JavaScriptのファイルをWebサーバでサービスし、そのままWebブラウザでデバッグするスタイルの開発も根強く残ると思います。こちらを選ぶ理由としては、将来的にIE11のサポート終了に伴ってES6, ES7の仕様が実質的に利用可能になることが期待できることと、class構文やESモジュールがWebブラウザのみで利用可能になれば開発環境やソフトウェア構成もシンプルになるという大きなメリットが挙げられます。</p>
<h1 id="Urushiの展望"><a href="#Urushiの展望" class="headerlink" title="Urushiの展望"></a>Urushiの展望</h1><h2 id="Web-componentsがもたらすWebアプリケーションの変化"><a href="#Web-componentsがもたらすWebアプリケーションの変化" class="headerlink" title="Web componentsがもたらすWebアプリケーションの変化"></a>Web componentsがもたらすWebアプリケーションの変化</h2><p>今後も少しずつ、従来DOM操作をjQueryなどを利用して行っていた開発が、Web componentsに置き換わっていくことが想定できます。動的なWebサイトを作りたいという要望に対してはWeb componentsはオーバースペックですが、Webアプリケーション開発では、大きな力を発揮してくれることでしょう。</p>
<p>また、コンポーネント化とその組み合わせによるWebアプリケーション開発手法はWebアプリケーションの開発手法のバリエーションの一つとして確立するのではないかと考えています。</p>
<h2 id="Urushiのこれから"><a href="#Urushiのこれから" class="headerlink" title="Urushiのこれから"></a>Urushiのこれから</h2><p>2016年に作成したUrushiですが、Web components型のフレームワークとして進化を考えています。</p>
<ul>
<li>Enterprise向けWeb componentsの拡充  <ul>
<li>Web componentsの技術要素に対応をしつつ、Enterpriseアプリケーション向けのAPIを保有したWeb componentsを多く作成予定としています</li>
</ul>
</li>
<li>UIデザインの刷新  <ul>
<li>Enterpriseでは、UIそのもののわかりやすさではなく、業務遂行のためのUIであるべきです。Webアプリケーション用途でもユーザーが違和感なく使えるUIのデザインを実装予定としています</li>
</ul>
</li>
</ul>
<p>今後もドシドシ開発していきますのでぜひUrushiをウォッチ下さい！<br>興味がある方はぜひ触ってフィードバックをいただければと思います。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Asynchronous Module Definitionの略で、モジュールを非同期でロードする仕組みのことです</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最近のWebアプリ事情&quot;&gt;&lt;a href=&quot;#最近のWebアプリ事情&quot; class=&quot;headerlink&quot; title=&quot;最近のWebアプリ事情&quot;&gt;&lt;/a&gt;最近のWebアプリ事情&lt;/h1&gt;&lt;p&gt;2016年までの、MVX系フレームワーク、Reactに代表される仮想
    
    </summary>
    
      <category term="Frontend" scheme="https://future-architect.github.io/categories/Frontend/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Web component" scheme="https://future-architect.github.io/tags/Web-component/"/>
    
  </entry>
  
  <entry>
    <title>AIを使って顔画像から「常連さん」を判定しよう！</title>
    <link href="https://future-architect.github.io/articles/20170526/"/>
    <id>https://future-architect.github.io/articles/20170526/</id>
    <published>2017-05-26T07:15:31.000Z</published>
    <updated>2017-05-25T09:25:56.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。データ分析チーム・入社1年目のルーキー、小池です。<br>データ分析チームでは、画像処理・自然言語処理など様々な分野に取り組んでおり、機械学習や多変量解析を用いたデータの分析を行っています。</p>
<p>そんな中で私は機械学習・Deep Learningによる画像処理系の分析を行っています。<br>本記事では、私達の取り組みの一部をご紹介すると同時に、画像分析の面白さを体感していただければと思います。</p>
<h1 id="今回のテーマ"><a href="#今回のテーマ" class="headerlink" title="今回のテーマ"></a>今回のテーマ</h1><p>今回のテーマは、AI(機械学習・Deep Learning等)を用いて、 <strong>大量にある顔画像の中から同一人物をクラスタリングし、頻出する顔画像の抽出</strong> を行いたいと思います。<br>簡単に言うと、 <strong>たくさんある画像から同じ人を見つけること</strong> を機械(AI)にやらせるということです。</p>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>「たくさんある画像から同じ人を見るけること」ができれば、以下1～3の流れで、店舗に来るお客さんが常連さんか否かが判定ができるのではないかと考えています。</p>
<ol>
<li>店舗にカメラを設置し、1ヶ月程来店したお客さんの顔画像を収集</li>
<li>収集した顔画像に対して同じ人の画像があるかどうかを見つける</li>
<li>同じ人の画像が見つからなかったら新規のお客さん、見つかったら常連さんと判定</li>
</ol>
<p>画像により新規のお客さん・常連さんの判定ができたとすると、マーケティング分析やサービスの向上への活用が期待できそうです。</p>
<ul>
<li>よく来店するお客さんと初めて来店されるお客さんの購買行動を比較し、マーケティング戦略に活かす</li>
<li>今回のテーマで抽出した顔画像を元にDeep Learningのモデルを作り、その場で常連さんか否かを判断し、現場のサービス向上につなげる</li>
</ul>
<p>前者の顧客分析は、従来はポイントカードを発行しPOSレジをお店に導入しないとなかなか実現できなかったのではないかと思います。また、後者のサービス向上についても、現時点では店員さんの記憶や経験だけに頼っている現場が多いのが実情では無いでしょうか？</p>
<p>こういったことが、今回のような画像処理技術とカメラ1つで実現できそうだということで、非常にワクワクしています。</p>
<h1 id="方針"><a href="#方針" class="headerlink" title="方針"></a>方針</h1><p>「たくさんある画像から同じ人を見るけること」実現に向け、下記1～3で進めていきます。</p>
<p><img src="/images/20170523/photo_20170523_01.png"></p>
<ol>
<li>OpenFace API(Deep Learning)を利用し、顔画像を抽出・表現獲得を行う<ul>
<li>結果は128次元ベクトルに変換される</li>
</ul>
</li>
<li>顔画像に対して次元削減を行い、ユークリッド平面にプロットし可視化</li>
<li>表現獲得した画像をクラスタリングして同一人物をまとめる</li>
</ol>
<h1 id="開発環境の構築"><a href="#開発環境の構築" class="headerlink" title="開発環境の構築"></a>開発環境の構築</h1><h2 id="画像解析と相性が良いDockerを使おう"><a href="#画像解析と相性が良いDockerを使おう" class="headerlink" title="画像解析と相性が良いDockerを使おう"></a>画像解析と相性が良いDockerを使おう</h2><p><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>とは、仮想化のためのオープンソースで、1つのOS上に複数の仮想環境を簡単に用意できます。<br>また、Docker HubというDockerで構築された環境をシェアする仕組みがあり、ありがたいことにエンジニアが数日間かけて構築したような複雑な環境も数多く共有されています。</p>
<p>今回のような画像分析の開発構築は、一昔前までちょっとした環境差異でインストールができなかったりと非常に苦労を伴ったそうですが、今ならDockerを利用することでコマンド一つで準備できます。<br>また、Deep LearningではGPGPUを用いていますが、<a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="noopener">nvidia-docker</a>があればGPGPU環境も整います。<br>みなさんもぜひ導入してみて下さい。<br>今回はGPU環境を利用しないので、Dockerのみ入っていればOKです。</p>
<h2 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h2><ul>
<li>Ubuntu 16.04 LTS<ul>
<li>私はUbuntuを開発で利用していますが、Dockerが入っていれば問題ないと思います</li>
</ul>
</li>
<li>Docker 1.13.0 (Client,Server)</li>
</ul>
<h2 id="環境構築手順"><a href="#環境構築手順" class="headerlink" title="環境構築手順"></a>環境構築手順</h2><p>Dockerは導入されている前提で進めます。</p>
<h3 id="1-コンテナを取得-amp-実行"><a href="#1-コンテナを取得-amp-実行" class="headerlink" title="1. コンテナを取得 &amp; 実行"></a>1. コンテナを取得 &amp; 実行</h3><p>bamosさんの作成したopenface(後に記述）の環境を使わせていただきます。<br>python2,3、numpy、OpenCV、scikit-learn、Dlibが入っているのですぐに画像解析が始めることができます。</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker pull bamos/openface</div><div class="line">$ docker run -v /home/&#123;your <span class="built_in">dir</span>&#125;:/home/ -it bamos/openface /bin/bash</div></pre></td></tr></table></figure>
<p><code>-v</code> オプションで、コンテナとホスト側でディレクトリを共有できます。<br><code>{your dir}</code> は自分の共有したいディレクトリに書き換えてください。</p>
<h3 id="2-ディレクトリの確認"><a href="#2-ディレクトリの確認" class="headerlink" title="2. ディレクトリの確認"></a>2. ディレクトリの確認</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /root/openface/demos</div></pre></td></tr></table></figure>
<p>無事demosディレクトリに入れたら環境構築完了です。<br>Dockerは便利です！</p>
<h1 id="OpenFaceによる表現獲得"><a href="#OpenFaceによる表現獲得" class="headerlink" title="OpenFaceによる表現獲得"></a>OpenFaceによる表現獲得</h1><p>さて、いよいよ画像解析をはじめていきましょう！<br>顔画像から表現を獲得する方法はいくつかありますが、今回はGoogleが出している<a href="http://www.cv-foundation.org/openaccess/content_cvpr_2015/app/1A_089.pdf" target="_blank" rel="noopener">FaceNet:A Unified Embedding for Recognition and Clustering</a>に記載されている手法を実装した、<a href="https://cmusatyalab.github.io/openface/" target="_blank" rel="noopener">OpenFace</a>を使います。</p>
<p><img src="/images/20170523/photo_20170523_02.jpg"></p>
<p>OpenFaceのAPIを利用すると、人の顔画像を128次元ベクトルへ変換し、画像同士のユークリッド距離が直接類似度となるようにマッピングを行ってくれます。</p>
<p>実際に2つの画像を特徴変換し、ユーグリッド距離（類似度）を出してみましょう。<br>利用する画像は次の2枚です。(Dockerコンテナを立てた際にこの2枚のサンプル画像も入っています)</p>
<p><img src="/images/20170523/photo_20170523_03.jpeg"><br>lennon-1.jpg</p>
<p><img src="/images/20170523/photo_20170523_04.jpeg"><br>carell.jpg</p>
<p><code>/root/openface/demo/</code> フォルダに以下のファイルを作成します。</p>
<figure class="highlight py"><figcaption><span>compare_images.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python2</span></div><div class="line"><span class="comment"># -*-coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">np.set_printoptions(precision=<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> openface</div><div class="line"><span class="keyword">import</span> glob</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"></div><div class="line">fileDir = os.path.dirname(os.path.realpath(__file__))</div><div class="line">modelDir = os.path.join(fileDir, <span class="string">'..'</span>, <span class="string">'models'</span>)</div><div class="line">dlibModelDir = os.path.join(modelDir, <span class="string">'dlib'</span>)</div><div class="line">openfaceModelDir = os.path.join(modelDir, <span class="string">'openface'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rep</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        <span class="comment"># モデル読み込み</span></div><div class="line">        self.align = openface.AlignDlib(os.path.join(dlibModelDir, <span class="string">"shape_predictor_68_face_landmarks.dat"</span>))</div><div class="line">        self.net = openface.TorchNeuralNet(os.path.join(openfaceModelDir, <span class="string">'nn4.small2.v1.t7'</span>), <span class="number">96</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_rep</span><span class="params">(self,imgPath)</span>:</span></div><div class="line"></div><div class="line">        <span class="comment"># 画像の読み込み</span></div><div class="line">        bgrImg = cv2.imread(imgPath)</div><div class="line">        rgbImg = cv2.cvtColor(bgrImg, cv2.COLOR_BGR2RGB)</div><div class="line"></div><div class="line">        <span class="comment"># boundingboxやalign faceなどを作成</span></div><div class="line">        bb = self.align.getLargestFaceBoundingBox(rgbImg)</div><div class="line">        alignedFace = self.align.align(<span class="number">96</span>, rgbImg, bb,landmarkIndices=openface.AlignDlib.OUTER_EYES_AND_NOSE)</div><div class="line"></div><div class="line">        <span class="comment"># 128D vectorに変換</span></div><div class="line">        rep = self.net.forward(alignedFace)</div><div class="line">        <span class="keyword">return</span> rep</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    reps = Rep()</div><div class="line">    img1,img2 = sys.argv[<span class="number">1</span>],sys.argv[<span class="number">2</span>]</div><div class="line"></div><div class="line">    <span class="comment"># get rep array</span></div><div class="line"></div><div class="line">    img1_rep, img2_rep = reps.get_rep(img1),reps.get_rep(img2)</div><div class="line"></div><div class="line">    <span class="comment"># 各画像のベクトル表示</span></div><div class="line">    <span class="comment">#print(img1_rep,img2_rep)</span></div><div class="line"></div><div class="line">    <span class="comment"># 類似度計算</span></div><div class="line">    d = img1_rep - img2_rep</div><div class="line">    print(np.dot(d,d))</div></pre></td></tr></table></figure>
<p>実行は以下のコマンドで行います。</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python compare_images.py /root/openface/images/examples/lennon-<span class="number">1</span>.jpg /root/openface/images/examples/carell.jpg</div><div class="line"></div><div class="line"><span class="number">1</span>.<span class="number">9628270995</span></div></pre></td></tr></table></figure>
<p>この場合は第一引数に <code>lennon-1.jpg</code> 、第二引数に <code>carell.jpg</code> をとり、両者を比較しています。</p>
<p><code>1.9628270995</code> という実行結果はユークリッド距離（類似度）で、0に近いほど同一人物ということが言えます。<br>論文では、類似度の閾値を1.1程度としています。つまり、類似度が1.1以下なら同一人物、<br>1.1以上なら別人物というわけですね。ただし、光の加減やピクセル数等によって閾値は多少前後します。1.1を基準とし、しっくりくる閾値を見つけてみてください。</p>
<p>本テーマである来店数の多い人（常連さん）を発見するには、画像から取得した表現をユーグリッド空間にプロットし、それをクラスタリングすることで、同一人物のクラスタを作成することを考えます。</p>
<p>参考として、どのようなことをすればよいかを可視化しました。<br>可視化のために各画像を主成分分析(PCA<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>)により50次元まで次元削減し、t-sne<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>によって2次元まで顔画像を落としこみプロットしています。<br>koike,liさん,yonetaniさんの顔画像を50枚前後用意し、次元削減を行い2次元に無理やり落とし込みました。<br>(※次元削減しているので、各点間の距離が直接の類似度になるとは限らないので注意）</p>
<p><img src="/images/20170523/photo_20170523_05.png"></p>
<p>各点は、顔画像を無理やりに２次元に落とし込んだものです。<br>なんとなくクラスタリングできそうですね！</p>
<h1 id="クラスタリング手法について"><a href="#クラスタリング手法について" class="headerlink" title="クラスタリング手法について"></a>クラスタリング手法について</h1><p>では、クラスタリングはどのように行えば良いでしょうか。<br>今回のクラスタリングは、 <strong>クラスタ数が事前にわかりません</strong>。<br>来店するお客さんの例で説明すると、来店した人の顔画像はあるけど、よく来店する人の数（クラスター数）はわからない状況です。<br>そこで、クラスタリングの中でもクラスタ数を指定しないアプローチをしなければなりません。<br>クラスター数を指定しないアルゴリズムはMeanShift、DBSCAN、x-meansなどがありますが<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>、<br>今回はDBSCANを利用してクラスタリングを行います。</p>
<h1 id="DBSCANによるクラスタリング"><a href="#DBSCANによるクラスタリング" class="headerlink" title="DBSCANによるクラスタリング"></a>DBSCANによるクラスタリング</h1><p>DBSCANの簡単な説明をします。<br>ある点 \(p\) から近傍半径 \(\xi\) 以内に少なくとも \(minPts\) 数の点があれば、<br>その点 \(p\) は \(core-points\) といいます。また、近傍半径内にある点を到達可能点と言います。<br>点pの近傍半径 \(\xi\) 内の点を \(core-points\) か判断し、\(core-points\) を移動させながら同じ動作を繰り返します。<br>各点から到達可能である点は同じクラスタと判断します。<br>視覚的に表すと以下のようになり、密接な点を同一クラスとみなしてクラスタリングを行っていることがわかります。</p>
<p><img src="/images/20170523/photo_20170523_06.png"></p>
<p>(厳密に言うと、条件があったり等少々異なった箇所がありますが、今回はこのような理解で構いません。)</p>
<p>DBSCANは、指定するパラメータは2で良いです。1つは近傍半径 \(\xi\) 、もう1つは円内に含まれる最低オブジェクト数 \(minPts\) です。<br>今回のクラスタリングは、\(\xi = 0.7\)、\(minPts = 1\)として行いました。<br>（ただし、先ほど類似度の所でも述べましたが、被写体の光の具合・撮影距離等によって近傍半径の調整が必要です。クラスタリングを行う場合、まずは少数データで近傍半径を調整した後にクラスタリングすることをおすすめします）</p>
<p>このクラスタリングを行うにはいろいろな人の顔画像を用意する必要があります。<br>顔画像データセットを <code>/home/</code> 以下に設置してください。<br>(ディレクトリを共有しているので、ホスト側の<code>/home/{your dir}</code>に画像データをおいてOKです。)</p>
<p>なお、今回私は以下のように画像を用意しました。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/home/</div><div class="line">|-- 0aaa.jpg</div><div class="line">|-- 0bbb.jpg</div><div class="line">|-- 0ccc.jpg</div><div class="line">|-- 0ddd.jpg</div><div class="line">|-- 10bbb.jpg</div><div class="line">|-- 10ccc.jpg</div><div class="line">|-- 11aaa.jpg</div><div class="line">|-- 11bbb.jpg</div><div class="line">|-- 11ccc.jpg</div><div class="line">|-- 12bbb.jpg</div><div class="line">|-- 8aaa.jpg</div><div class="line">|-- 8bbb.jpg</div><div class="line">|-- 8ccc.jpg</div><div class="line">|-- 9bbb.jpg</div><div class="line">|-- 9ccc.jpg</div><div class="line">|-- carell.jpg</div><div class="line">|-- lennon-1.jpg</div><div class="line">(以下略)</div></pre></td></tr></table></figure>
<p>それぞれの合計枚数は下表のとおりです。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名前</th>
<th style="text-align:center">画像枚数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">aaaさん</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">bbbさん</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">cccさん</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">dddさん</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">carellさん</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">lenon-1さん</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>この5人の顔画像をランダムに集め、 <code>/home/</code> に置きました。lenonさん、carellさんは先ほどのサンプル画像をそのまま使用しています。<br>なお、カメラ撮影の関係でファイル名は <code>index+名前.jpg</code> となっています<br>（例えば、 <code>0aaa.jpg</code> はaaaさんが映った画像です）</p>
<p>そして以下のpythonファイルを作成し、実行します。</p>
<figure class="highlight py"><figcaption><span>dbscan.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python2</span></div><div class="line"><span class="comment"># -*-coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">np.set_printoptions(precision=<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> openface</div><div class="line"><span class="keyword">import</span> glob</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> DBSCAN</div><div class="line"></div><div class="line">fileDir = os.path.dirname(os.path.realpath(__file__))</div><div class="line">modelDir = os.path.join(fileDir, <span class="string">'..'</span>, <span class="string">'models'</span>)</div><div class="line">dlibModelDir = os.path.join(modelDir, <span class="string">'dlib'</span>)</div><div class="line">openfaceModelDir = os.path.join(modelDir, <span class="string">'openface'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rep</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.align = openface.AlignDlib(os.path.join(</div><div class="line">            dlibModelDir, <span class="string">"shape_predictor_68_face_landmarks.dat"</span>))</div><div class="line">        self.net = openface.TorchNeuralNet(os.path.join(</div><div class="line">            openfaceModelDir, <span class="string">'nn4.small2.v1.t7'</span>), <span class="number">96</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_rep</span><span class="params">(self, imgPath)</span>:</span></div><div class="line"></div><div class="line">        bgrImg = cv2.imread(imgPath)</div><div class="line">        rgbImg = cv2.cvtColor(bgrImg, cv2.COLOR_BGR2RGB)</div><div class="line">        bb = self.align.getLargestFaceBoundingBox(rgbImg)</div><div class="line"></div><div class="line">        alignedFace = self.align.align(</div><div class="line">            <span class="number">96</span>, rgbImg, bb, landmarkIndices=openface.AlignDlib.OUTER_EYES_AND_NOSE)</div><div class="line">        rep = self.net.forward(alignedFace)</div><div class="line">        <span class="keyword">return</span> rep</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_reps</span><span class="params">(self, files)</span>:</span></div><div class="line"></div><div class="line">        <span class="comment"># initialize x</span></div><div class="line">        reps = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</div><div class="line">            <span class="keyword">if</span> reps <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                reps = self.get_rep(file)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># 画像に顔がなかった場合の例外処理</span></div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    reps = np.vstack((reps, self.get_rep(file)))</div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    <span class="keyword">pass</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> reps</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    getreps = Rep()</div><div class="line"></div><div class="line">    <span class="comment"># get files</span></div><div class="line">    files = glob.glob(<span class="string">"/home/*.jpg"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># get Reps</span></div><div class="line">    reps = getreps.get_all_reps(files)</div><div class="line"></div><div class="line">    print(reps)</div><div class="line">    EPS = <span class="number">0.7</span></div><div class="line">    MINPTS = <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="comment"># dbscan clustering</span></div><div class="line">    dbscan = DBSCAN(eps=EPS, min_samples=MINPTS).fit(reps)</div><div class="line">    ans = dbscan.fit_predict(reps)</div><div class="line"></div><div class="line">    print(<span class="string">"class"</span>, <span class="string">"img"</span>)</div><div class="line">    <span class="keyword">for</span> a, f <span class="keyword">in</span> zip(ans, files):</div><div class="line">        print(a, f)</div></pre></td></tr></table></figure>
<p>出力は、<code>(クラスタ番号,画像名）</code> となっています。</p>
<figure class="highlight sh"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">(<span class="string">'class'</span>, <span class="string">'img'</span>)</div><div class="line">(0, <span class="string">'/home/0aaa.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/9bbb.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/3ccc.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/17ccc.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/11ccc.jpg'</span>)</div><div class="line">(3, <span class="string">'/home/lennon-1.jpg'</span>)</div><div class="line">(0, <span class="string">'/home/17aaa.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/3bbb.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/18ccc.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/2ccc.jpg'</span>)</div><div class="line">(0, <span class="string">'/home/19aaa.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/18bbb.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/13bbb.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/15ccc.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/11bbb.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/15bbb.jpg'</span>)</div><div class="line">(4, <span class="string">'/home/1ddd.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/13ccc.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/5bbb.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/12bbb.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/9ccc.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/0ccc.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/14ccc.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/0bbb.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/16ccc.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/6ccc.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/7ccc.jpg'</span>)</div><div class="line">(0, <span class="string">'/home/6aaa.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/1ccc.jpg'</span>)</div><div class="line">(5, <span class="string">'/home/carell.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/10bbb.jpg'</span>)</div><div class="line">(0, <span class="string">'/home/13aaa.jpg'</span>)</div><div class="line">(4, <span class="string">'/home/2ddd.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/4ccc.jpg'</span>)</div><div class="line">(0, <span class="string">'/home/15aaa.jpg'</span>)</div><div class="line">(6, <span class="string">'/home/19bbb.jpg'</span>)</div><div class="line">(0, <span class="string">'/home/8aaa.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/10ccc.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/14bbb.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/16bbb.jpg'</span>)</div><div class="line">(0, <span class="string">'/home/11aaa.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/8ccc.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/12ccc.jpg'</span>)</div><div class="line">(0, <span class="string">'/home/14aaa.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/5ccc.jpg'</span>)</div><div class="line">(4, <span class="string">'/home/0ddd.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/1bbb.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/6bbb.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/8bbb.jpg'</span>)</div><div class="line">(1, <span class="string">'/home/17bbb.jpg'</span>)</div><div class="line">(2, <span class="string">'/home/19ccc.jpg'</span>)</div><div class="line">(0, <span class="string">'/home/16aaa.jpg'</span>)</div></pre></td></tr></table></figure>
<p>出力を確認すると、aaaさんはクラスタ0、bbbさんはクラスタ1、cccさんはクラスタ2、dddさんはクラスタ4、lennon-1さんはクラスタ3、carellさんはクラスタ5にうまく分類されていることがわかります。<br>この結果から、常連さんをSVMまたはCNNで学習させモデルを作成することで、次回から常連さんをその場で判別させることができると思います。</p>
<h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回は複数枚ある顔画像からよく頻出する人をクラスタリングし、常連（よく出現する人）さんを機械的に抽出できることを具体的なコードを追いながら実践しました。<br>この技術の応用方法は多くあり、さまざまビジネスへつなげることができると考えています。</p>
<p>フューチャーアーキテクトのデータ分析チームでは、技術的視点だけでなく、ビジネス視点からも応用先を考え技術検証を行っています。</p>
<p>これからもどんどん面白そうな記事を書いていきますので、よろしくお願いします。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">PCAについては <a href="http://d.hatena.ne.jp/hgshrs/20130407/1365335916" target="_blank" rel="noopener">こちら</a> も参考にしてください</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">t-sneについては <a href="http://blog.albert2005.co.jp/2015/12/02/tsne/" target="_blank" rel="noopener">こちら</a> も参考にしてください</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">k-meansのクラスタ数をhyperparameterとしてグリッドサーチするのも1つの手ですが。</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。データ分析チーム・入社1年目のルーキー、小池です。&lt;br&gt;データ分析チームでは、画像処理・自然言語処理など様々な
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
      <category term="DeepLearning" scheme="https://future-architect.github.io/tags/DeepLearning/"/>
    
  </entry>
  
  <entry>
    <title>マネージャーがうれしいRedmineデータのダッシュボード表示方法を公開します！！</title>
    <link href="https://future-architect.github.io/articles/20170510/"/>
    <id>https://future-architect.github.io/articles/20170510/</id>
    <published>2017-05-10T09:00:00.000Z</published>
    <updated>2017-05-12T07:56:11.976Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20170510/photo_20170510_00.jpg" alt=""></p>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。近藤です。</p>
<p>前回までの関連記事です</p>
<ul>
<li><a href="https://future-architect.github.io/articles/20160920/">1記事目</a> はRedmineのデータをKibanaで表示しました</li>
<li><a href="https://future-architect.github.io/articles/20170119/">2記事目</a> はRedmineのデータからEVMグラフを作成しKibanaで表示しました</li>
</ul>
<p>3記事目となる本記事ではRedmineデータを可視化するダッシュボードをKibana上に構築します。Kibanaを使うことによって例えば、担当者別のタスク量、トラッカー別のタスク量、EVMグラフを同時に把握できます。</p>
<p>◆ダッシュボード例</p>
<p><img src="/images/20170510/photo_20170510_39.png" alt=""></p>
<p>では早速、Kibanaを使ってみましょう。</p>
<p>なお、下記を前提としています。</p>
<ul>
<li>Windows環境で構築する</li>
<li>Redmineのデータベース(MySQL)に直接接続する</li>
</ul>
<h2 id="大まかな流れ"><a href="#大まかな流れ" class="headerlink" title="大まかな流れ"></a>大まかな流れ</h2><p>下記の手順でグラフを表示します。</p>
<ol>
<li>環境構築</li>
<li>データ投入</li>
<li>ダッシュボード構築 </li>
</ol>
<h2 id="1-環境構築"><a href="#1-環境構築" class="headerlink" title="1.環境構築"></a>1.環境構築</h2><p>今回もELK+Timelionを利用して、Redmineデータの可視化環境を構築します。</p>
<p><img src="/images/20170510/photo_20170510_99.png" alt=""></p>
<h3 id="モジュールのダウンロード"><a href="#モジュールのダウンロード" class="headerlink" title="モジュールのダウンロード"></a>モジュールのダウンロード</h3><p>前回の投稿から時間がたち、ELKのバージョンが上がったのであらためて最新のモジュールをダウンロードします。</p>
<ul>
<li>Elastic Search Download URL<ul>
<li><a href="https://www.elastic.co/jp/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/jp/downloads/elasticsearch</a></li>
<li>私の場合は、「elasticsearch-5.4.0.zip」をダウンロードしました。</li>
</ul>
</li>
<li>Kibana Download URL<ul>
<li><a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/downloads/kibana</a></li>
<li>私の場合は、「kibana-5.4.0-windows-x86.zip」をダウンロードしました。</li>
</ul>
</li>
<li>Logstash Download URL<ul>
<li><a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/downloads/logstash</a></li>
<li>私の場合は、「logstash-5.4.0.zip」をダウンロードしました。</li>
</ul>
</li>
</ul>
<h3 id="モジュールの配備"><a href="#モジュールの配備" class="headerlink" title="モジュールの配備"></a>モジュールの配備</h3><p>次に、「C:\elastic」というフォルダを作成。そして、先ほどダウンロードしたそれぞれの圧縮ファイルを解凍し、「C:\elastic」へ配置します。</p>
<p>最終的には下記のようなフォルダ構成になります。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\elastic</div><div class="line"> └ elasticsearch<span class="number">-5.4</span><span class="number">.0</span></div><div class="line"> └ kibana<span class="number">-5.4</span><span class="number">.0</span>-windows-x86</div><div class="line"> └ logstash<span class="number">-5.4</span><span class="number">.0</span></div></pre></td></tr></table></figure></p>
<h3 id="JDBCドライバ設定"><a href="#JDBCドライバ設定" class="headerlink" title="JDBCドライバ設定"></a>JDBCドライバ設定</h3><p>次に、JDBCドライバを用意します。</p>
<p><a href="https://future-architect.github.io/articles/20160920/">前々回</a>ダウンロードした「mysql-connector-java-5.1.39-bin.jar」というファイルを、<br>「C:\elastic\logstash-5.4.0\bin」以下に配置します。</p>
<p>次に、「redmine.txt」というファイルを作成。中身は下記のようにします。（★を含む箇所は皆様の環境に合わせた値へ変えてください。）</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    jdbc &#123;</div><div class="line">        jdbc_connection_string =&gt; <span class="string">"jdbc:mysql://★IP★:3306/★サービス名★"</span></div><div class="line">        jdbc_user =&gt; <span class="string">"★ユーザ名★"</span></div><div class="line">        jdbc_password =&gt; <span class="string">"★パスワード★"</span></div><div class="line">        jdbc_driver_library =&gt;<span class="string">"mysql-connector-java-5.1.39-bin.jar"</span></div><div class="line">        jdbc_driver_class =&gt; <span class="string">"com.mysql.jdbc.Driver"</span></div><div class="line">        statement =&gt; <span class="string">"</span></div><div class="line">select</div><div class="line">	iss.due_date due_date</div><div class="line">	, iss.updated_on updated_on</div><div class="line">	, iss.estimated_hours pv</div><div class="line">	, iss.estimated_hours * iss.done_ratio / 100 ev</div><div class="line">	, tim.hours ac</div><div class="line">	, concat(usr.lastname, usr.firstname) user_name</div><div class="line">	, tra.name tracker_name</div><div class="line">from</div><div class="line">	issues iss</div><div class="line">	left join (</div><div class="line">		select</div><div class="line">			issue_id</div><div class="line">			, sum(hours) hours</div><div class="line">		from</div><div class="line">			time_entries</div><div class="line">		group by</div><div class="line">			issue_id</div><div class="line">	) tim</div><div class="line">	on iss.id = tim.issue_id</div><div class="line">	left join users usr</div><div class="line">	on iss.assigned_to_id = usr.id</div><div class="line">	left join trackers tra</div><div class="line">	on iss.tracker_id = tra.id</div><div class="line">"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>中に記載されているSQLでは、下記7つの値を取得します。なお、pv、ec、acについては、<a href="https://future-architect.github.io/articles/20170119/#EVMとは？">前回の記事:EVMとは？</a>をご参照ください。</p>
<table>
<thead>
<tr>
<th style="text-align:left">SQL上の項目名</th>
<th style="text-align:left">Redmine上の項目名 　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">due_date 　</td>
<td style="text-align:left">「期日」 　　　　　　　　</td>
</tr>
<tr>
<td style="text-align:left">updated_on</td>
<td style="text-align:left">「更新日」　　　　　　　</td>
</tr>
<tr>
<td style="text-align:left">pv 　　　　　</td>
<td style="text-align:left">「予定工数」        　</td>
</tr>
<tr>
<td style="text-align:left">ev</td>
<td style="text-align:left">「予定工数」×「進捗率」</td>
</tr>
<tr>
<td style="text-align:left">ac     　　</td>
<td style="text-align:left">「作業時間の記録」 　　　</td>
</tr>
<tr>
<td style="text-align:left">user_name</td>
<td style="text-align:left">「担当者名」 　　　</td>
</tr>
<tr>
<td style="text-align:left">tracker_name</td>
<td style="text-align:left">「トラッカー名」 　　　</td>
</tr>
</tbody>
</table>
<p>この「redmine.txt」も「C:\elastic\logstash-5.4.0\bin」に配置します。</p>
<p>結果的に、下記のようなフォルダ構成になります。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">C:\elastic</div><div class="line"> └ elasticsearch<span class="number">-5.4</span><span class="number">.0</span></div><div class="line"> └ kibana<span class="number">-5.4</span><span class="number">.0</span>-windows-x86</div><div class="line"> └ logstash<span class="number">-5.4</span><span class="number">.0</span></div><div class="line"> └ bin</div><div class="line">   └ mysql-connector-java<span class="number">-5.1</span><span class="number">.39</span>-bin.jar</div><div class="line">   └ redmine.txt</div></pre></td></tr></table></figure>
<h2 id="2-RedmineデータをELKに取り込む"><a href="#2-RedmineデータをELKに取り込む" class="headerlink" title="2.RedmineデータをELKに取り込む"></a>2.RedmineデータをELKに取り込む</h2><h3 id="ElasticSearchの起動"><a href="#ElasticSearchの起動" class="headerlink" title="ElasticSearchの起動"></a>ElasticSearchの起動</h3><p>まず、ElasticSearchを実行します。<br>「C:\elasticsearch-5.4.0\bin」フォルダで下記のコマンドを実行。</p>
<p><code>elasticsearch.bat</code></p>
<p>コマンドプロンプトの右下に”started”と表示されたら起動完了です。</p>
<h3 id="Logstashを使ったデータ取り込み"><a href="#Logstashを使ったデータ取り込み" class="headerlink" title="Logstashを使ったデータ取り込み"></a>Logstashを使ったデータ取り込み</h3><p>次に、Logstashを使って、RedmineのデータをElasticSearchへ取り込みます。<br>「C:\elastic\logstash-5.4.0\bin」フォルダで下記コマンドを実行。</p>
<p><code>logstash.bat -f redmine.txt</code></p>
<p><img src="/images/20170510/photo_20170510_40.png" alt=""></p>
<p>取り込みが完了しました。</p>
<h3 id="Kibanaの起動"><a href="#Kibanaの起動" class="headerlink" title="Kibanaの起動"></a>Kibanaの起動</h3><p>次に、Kibanaを起動します。<br>「C:\elastic\kibana-5.4.0-windows-x86\bin」フォルダで下記コマンドを実行。</p>
<p><code>kibana.bat</code></p>
<p><img src="/images/20170510/photo_20170510_02.png" alt=""></p>
<p>Kibanaが起動しました。</p>
<h3 id="Kibanaでグラフ表示"><a href="#Kibanaでグラフ表示" class="headerlink" title="Kibanaでグラフ表示"></a>Kibanaでグラフ表示</h3><p>では、Kibanaを表示します。ブラウザで <code>http://localhost:5601</code>を開く。</p>
<p><img src="/images/20170510/photo_20170510_03.png" alt=""></p>
<p>[Configure an index pattern]という画面が開くので、[Time-field name]に”due_date”を指定します。</p>
<p>そして、[Create]をクリック。</p>
<p><img src="/images/20170510/photo_20170510_10.png" alt=""></p>
<p>そして、左側の[Visualize]をクリックすると、Visualizeの画面が開きます。</p>
<p><img src="/images/20170510/photo_20170510_06.png" alt=""></p>
<p>ここで、「Create a visualizetion」をクリック。</p>
<p><img src="/images/20170510/photo_20170510_11.png" alt=""></p>
<p>[Select visualization type]画面が表示されるので、「Vertical bar」をクリックします。</p>
<p><img src="/images/20170510/photo_20170510_08.png" alt=""></p>
<p>そして、「logstash-*」をクリックすると、</p>
<p><img src="/images/20170510/photo_20170510_12.png" alt=""></p>
<p>グラフ画面が出ましたね！</p>
<h3 id="担当者別のPVグラフ作成"><a href="#担当者別のPVグラフ作成" class="headerlink" title="担当者別のPVグラフ作成"></a>担当者別のPVグラフ作成</h3><p>次は、担当者別のPVを表示するグラフを作成。下記の設定箇所にそれぞれの値を設定します。</p>
<table>
<thead>
<tr>
<th style="text-align:left">設定箇所</th>
<th style="text-align:left">値 　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[metrics]-&gt;[Y-Axis]-&gt;[Aggregation]</td>
<td style="text-align:left">Sum</td>
</tr>
<tr>
<td style="text-align:left">[metrics]-&gt;[Y-Axis]-&gt;[Field]</td>
<td style="text-align:left">pv</td>
</tr>
<tr>
<td style="text-align:left">[buckets]-&gt;[X-Axis]-&gt;[Terms]</td>
<td style="text-align:left">user_name.keyword</td>
</tr>
</tbody>
</table>
<p>そして、画面左上の「再生ボタン」をクリックすると、</p>
<p><img src="/images/20170510/photo_20170510_13.png" alt=""></p>
<p>担当者別のPVが表示されました！</p>
<p>では、グラフを保存します。</p>
<p>画面右上の「Save」をクリック。<br>テキストボックスが表示されるので”PvUser”と入力します。</p>
<p><img src="/images/20170510/photo_20170510_15.png" alt=""></p>
<p>そして、青色の「Save」をクリックすると、グラフが保存されました。</p>
<h2 id="3-ダッシュボード構築"><a href="#3-ダッシュボード構築" class="headerlink" title="3.ダッシュボード構築"></a>3.ダッシュボード構築</h2><p>続いて、画面左側の「Dashboard」をクリックします。</p>
<p><img src="/images/20170510/photo_20170510_16.png" alt=""></p>
<p>画面中央の「Create a dashboard」をクリック。</p>
<p><img src="/images/20170510/photo_20170510_17.png" alt=""></p>
<p>そして、画面中央の「Add」をクリックします。</p>
<p><img src="/images/20170510/photo_20170510_18.png" alt=""></p>
<p>続いて、「PvUser」をクリックすると、</p>
<p><img src="/images/20170510/photo_20170510_19.png" alt=""></p>
<p>グラフが追加されました！</p>
<p><img src="/images/20170510/photo_20170510_19.png" alt=""></p>
<p>次にダッシュボードを保存します。</p>
<p>右上の「Save」をクリックし、表示されたテキストボックスに”main”と入力。</p>
<p><img src="/images/20170510/photo_20170510_20.png" alt=""></p>
<p>「Save」をクリックします。これで作成したダッシュボードが保存されました。</p>
<p><img src="/images/20170510/photo_20170510_21.png" alt=""></p>
<p>では、もう一つグラフを作成します。</p>
<p>作成したグラフの上にカーソルを当てると、右上にボタンが出てくるので、</p>
<p><img src="/images/20170510/photo_20170510_22.png" alt=""></p>
<p>その中の「鉛筆マーク」をクリックします。</p>
<p><img src="/images/20170510/photo_20170510_23.png" alt=""></p>
<p>グラフの編集画面が開きました。</p>
<p>今度、トラッカー別のPVを表示するグラフを作成。下記の通り値を変更し、「再生ボタン」をクリックし、画面右上の「Save」をクリック。</p>
<table>
<thead>
<tr>
<th style="text-align:left">設定箇所</th>
<th style="text-align:left">値 　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[buckets]-&gt;[X-Axis]-&gt;[Terms]</td>
<td style="text-align:left">tracker_name.keyword</td>
</tr>
</tbody>
</table>
<p>表示されたテキストボックスに”PvTracker”と入力し、「Save as a new visualization」にチェックを入れます。</p>
<p><img src="/images/20170510/photo_20170510_27.png" alt=""></p>
<p>そして、「Save」をクリック。グラフが保存されます。</p>
<p>画面左の「Dashboard」をクリック。そして、画面右上の、「Add」をクリックします。</p>
<p><img src="/images/20170510/photo_20170510_25.png" alt=""></p>
<p>「PvTracker」をクリックすると、</p>
<p><img src="/images/20170510/photo_20170510_28.png" alt=""></p>
<p>トラッカー別PVグラフが追加されました。</p>
<p>次に右上の「Add new Visualization」ボタンをクリック。</p>
<p><img src="/images/20170510/photo_20170510_30.png" alt=""></p>
<p>「Select visualization type」画面で「Timelion」をクリックします。</p>
<p>ここで、EVMグラフを作成します。</p>
<p>内容は<a href="https://future-architect.github.io/articles/20170119/">前回</a>のEVMグラフと一緒。</p>
<p>まず、「Timelion」画面が開くので、「Interval」に”1d”を指定。</p>
<p>次に、「Timelion Expression」に下記の値を指定し、再生ボタンをクリックします。</p>
<p><code>.es(metric=&#39;sum:pv&#39;, timefield=&#39;due_date&#39;).cusum().label(&#39;[累積]pv&#39;),.es(metric=&#39;sum:ev&#39;, timefield=&#39;updated_on&#39;).cusum().label(&#39;[累積]ev&#39;),.es(metric=&#39;sum:ac&#39;, timefield=&#39;updated_on&#39;).cusum().label(&#39;[累積]ac&#39;)</code></p>
<p><img src="/images/20170510/photo_20170510_31.png" alt=""></p>
<p>EVMグラフが表示されました。</p>
<p>右上の「Save」をクリック。表示されるテキストボックスに、”EvmAll”と入力し、青い「Save」をクリックします。</p>
<p>これでEVMグラフが保存されました。</p>
<p>画面左側の「Dashboard」をクリック。</p>
<p>そして、画面右上の「Add」をクリックし、「EvmAll」をクリックします。</p>
<p><img src="/images/20170510/photo_20170510_33.png" alt=""></p>
<p>さらに、画面右上の”＾”をクリックすると、</p>
<p><img src="/images/20170510/photo_20170510_34.png" alt=""></p>
<p>EVMグラフの大きさを調整すると、</p>
<p><img src="/images/20170510/photo_20170510_35.png" alt=""></p>
<p>ダッシュボードの完成です。</p>
<p>ではドリルダウン機能も使ってみましょう。</p>
<p>操作はとても簡単。</p>
<p>例えば、特定の担当者名をクリックすると。</p>
<p><img src="/images/20170510/photo_20170510_36.png" alt=""></p>
<p>その担当者が、アサインされているチケットのトラッカー、及び担当者のEVMが表示されます。</p>
<p><img src="/images/20170510/photo_20170510_37.png" alt=""></p>
<p>また、表示期間を絞り込む事もできます。Timelion上で期間を選択することで、</p>
<p><img src="/images/20170510/photo_20170510_38.png" alt=""></p>
<p>この通り。選択された期間で絞り込むことができました。</p>
<h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回は、Redmineデータを可視化するダッシュボードを構築しました。今回の設定を拡張することで、様々な軸で、様々な値を可視化することが可能。RedmineをKibanaと組み合わせることで、結果的にプロジェクト状況の把握が容易になります。</p>
<p>本記事が、皆様のプロジェクトマネジメントに役に立てば幸いです。<br>みなさまにとって参考になりそうでしたら「いいね！」をクリックして頂けますと幸いです。執筆の励みになります。＾＾</p>
<p>なお、次回以降私がブログを執筆する際は、ダッシュボード画像のメール配信に関する方法を記載する予定。<br>今後ともよろしくお願い致します。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/20170510/photo_20170510_00.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;
    
    </summary>
    
      <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
      <category term="Elastic-Stack" scheme="https://future-architect.github.io/tags/Elastic-Stack/"/>
    
      <category term="Kibana" scheme="https://future-architect.github.io/tags/Kibana/"/>
    
      <category term="Redmine" scheme="https://future-architect.github.io/tags/Redmine/"/>
    
  </entry>
  
  <entry>
    <title>Unity未経験者がHoloLensアプリの開発をしてみた</title>
    <link href="https://future-architect.github.io/articles/20170421/"/>
    <id>https://future-architect.github.io/articles/20170421/</id>
    <published>2017-04-21T03:00:00.000Z</published>
    <updated>2017-05-09T01:57:18.468Z</updated>
    
    <content type="html"><![CDATA[<p>Unity, C# の未経験者がHoloLensのアプリを開発しました。<br>まだまだHoloLensについての開発情報が少ないと思いますので、アプリを作っていく流れをまとめます。<br>なにか少しでもお役に立てれば嬉しいです！</p>
<p>HoloLensに関する過去記事はこちらをどうぞ。</p>
<ul>
<li><a href="https://future-architect.github.io/articles/20170210/">会社に届いたHoloLensを使ってみた</a></li>
<li><a href="https://future-architect.github.io/articles/20170405/">HoloLensの空間共有サービスを使ってみよう</a></li>
</ul>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。名古屋大学の澤田周吾です。就職活動中にフューチャーアーキテクト株式会社さんと出会い、 インターンとしてHoloLens アプリの開発を担当させていただきました。</p>
<p>キッカケはある懇親会の時。私がいきなり「来週からホロレンズ開発のインターンさせてください！」という要望をぶつけたのですが、あっさり「いいよ」と一言。インターンの日程もサクサク決まりHoloLensアプリの開発が始まりました。無茶振りにも華麗に応えてくれるフューチャーさん、好きです。</p>
<h1 id="何を作ったか"><a href="#何を作ったか" class="headerlink" title="何を作ったか"></a>何を作ったか</h1><p>人の前で発表する時って、やっぱり緊張しますよね。<br><img src="/images/20170418/photo_20170418_00.png"></p>
<p>真面目な人の顔って、圧迫感がありますから。</p>
<p><img src="/images/20170418/photo_20170418_01.png"></p>
<p>このような人達の前で発表するのは相当緊張すると思います。<br>しかし、この人達が全てジャガイモだったらどうでしょうか。</p>
<p><img src="/images/20170418/photo_20170418_02.png"><br>発表しやすくなった！<br>みなさん、そう感じると思います。ジャガイモって、ほっこりしますよね。<br>ということで、人類芋化計画を実現させていきます。</p>
<p>つまり <strong>人の顔をジャガイモに置き換える</strong> アプリ、名づけて <strong>Potato Heads</strong> です。</p>
<p>実現に向けての技術的な見通しは…</p>
<ol>
<li>HoloLensのカメラから、顔認証技術を使って顔の部分の位置座標を検出</li>
<li>そこに画像の大きさを合わせて出力する<br>という2段構えで実現できると考えました。</li>
</ol>
<p>実際に作った Potato Heads の動画はこちら↓↓↓</p>
<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">私が作ったHoloLensアプリの Potato Heads !<br>人の顔をジャガイモにします！ <a href="https://t.co/nu5SOPSrME" target="_blank" rel="noopener">pic.twitter.com/nu5SOPSrME</a></p>&mdash; sSgo (@ssogoss) <a href="https://twitter.com/ssogoss/status/852385164814450688" target="_blank" rel="noopener">2017年4月13日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h1 id="使用したもの"><a href="#使用したもの" class="headerlink" title="使用したもの"></a>使用したもの</h1><ul>
<li>HoloLens</li>
<li>Unity 5.5</li>
<li>C#</li>
<li>HoloToolkit-Unity</li>
<li>OpenCV For Unity</li>
<li>HoloLensWithOpenCVForUnityExample.unitypackage</li>
<li>PCスペック<ul>
<li>windows10 Home<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>メモリ4GB<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ul>
</li>
</ul>
<h1 id="開発環境構築"><a href="#開発環境構築" class="headerlink" title="開発環境構築"></a>開発環境構築</h1><p>UnityとVisual Studioのインストールについてはこちらを参考にさせていただきました。<br><a href="http://azure-recipe.kc-cloud.jp/2016/12/hololens-install/" target="_blank" rel="noopener">HoloLens UnityとVisual Studioのインストール | ナレコムazureレシピ</a></p>
<h2 id="Unityのプロジェクトを作成"><a href="#Unityのプロジェクトを作成" class="headerlink" title="Unityのプロジェクトを作成"></a>Unityのプロジェクトを作成</h2><ol>
<li>Unityを起動</li>
<li>右上のNEWボタンを押します</li>
<li>Project Name 記入、任意の保存先選択、3Dを選択</li>
<li>Create projectボタンを押します</li>
</ol>
<p>これで新しいプロジェクトが作成されます。</p>
<p>Unityのレイアウトについては右上のLayoutドロップダウンから2by3を選択すると以下のように配置されます。</p>
<p><img src="/images/20170418/photo_20170418_03.png"><br>(引用：<a href="http://qiita.com/2dgames_jp/items/11bb76167fb44bb5af5f" target="_blank" rel="noopener">http://qiita.com/2dgames_jp/items/11bb76167fb44bb5af5f</a>)</p>
<h2 id="HoloToolkit-Unityのダウンロード"><a href="#HoloToolkit-Unityのダウンロード" class="headerlink" title="HoloToolkit-Unityのダウンロード"></a>HoloToolkit-Unityのダウンロード</h2><p>アプリ開発を効率よくしてくれる HoloToolkit は、Unity用に HoloToolkit-Unity が存在するので、Unityで開発する場合はそちらを利用します。<br><a href="https://github.com/Microsoft/HoloToolkit-Unity" target="_blank" rel="noopener">GitHub:HoloToolkit-Unity</a><br>↑ここからZIPファイルをダウンロードして、任意の場所に展開しておきます。</p>
<h2 id="初期設定"><a href="#初期設定" class="headerlink" title="初期設定"></a>初期設定</h2><ol>
<li>先ほどダウンロードして展開しておいたHoloToolkit-Unityフォルダを開き、<br><code>任意の場所\HoloToolkit-Unity-master\Assets</code> 内の <code>HoloToolkitフォルダ</code> と<br><code>HoloToolkit.meta</code> をProjectビューのAssetsにドラッグアンドドロップします。<br>インポートが始まるのでしばし待ちます。<br>ここまでうまくいっていればメインメニューに「 HoloToolkit 」が追加されているはずです。<br>ここからHoloLensアプリに必要な初期設定を簡単に行うことができます。</li>
<li>まずはプロジェクトの初期設定<ol>
<li><code>メインメニューのHoloToolkit &gt; Configure &gt; ApplyHoloLensProjextSettings</code> をクリック<br><img src="/images/20170418/photo_20170418_04.png"></li>
<li>以下のようなポップアウトが開くので全てにチェックを入れてApplyボタンを押します。<br><img src="/images/20170418/photo_20170418_05.png"></li>
<li>Reload now? と聞かれるのでYesをクリックします。</li>
<li>いったんUnityが閉じ、開き直されます。<br>これでプロジェクトの初期設定は完了です。</li>
</ol>
</li>
<li>次にメインカメラの初期設定をします。<ol>
<li><code>メインメニューのHoloToolkit &gt; Configure &gt; ApplyHoloLensSceneSettings</code> をクリック<br><img src="/images/20170418/photo_20170418_06.png"><br>2.先ほどと同じようにポップアウトが開くので全てにチェックを入れてApplyボタンを押します。<br><img src="/images/20170418/photo_20170418_07.png"></li>
</ol>
</li>
</ol>
<p>HoloLensでは黒は透過を意味するので、背景は黒に設定する必要があり、そのような設定がここで行われています。</p>
<p>ここまでで、初期設定は終了です。<br>アプリを作る際、ここまでの作業は毎回行うことになると思います。</p>
<h2 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h2><p>HoloLensにおいて <strong>現実世界のモノを消す技術</strong>（＝DR: DIMINISHED REALITY）は難しいです。<br>カメラ映像の世界では何年も前からDRが実現できている<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>ので不思議に思った方も多いと思います。</p>
<p>HoloLensは現実世界の物は透過して、プラスしたいモノをレンズに光をプラスすることによって、上乗せて表示させるような原理になっています。そのため、何か消したいとしても光を上乗せすることしかできず、それゆえどうしてもリアリティの差が出てしまいます。現実世界の物とプラスした光の物の区別ができないレベルまでリアリティをもたすことができれば可能になると思いますが、まだまだ技術の進歩を待つ必要がありそうです。</p>
<h1 id="アプリ開発"><a href="#アプリ開発" class="headerlink" title="アプリ開発"></a>アプリ開発</h1><p>ここからHoloLensアプリケーション開発の流れを説明します。</p>
<h2 id="簡単なオブジェクトの作成"><a href="#簡単なオブジェクトの作成" class="headerlink" title="簡単なオブジェクトの作成"></a>簡単なオブジェクトの作成</h2><p>簡単な物なら、<code>Hierarchyビュー右クリック &gt; 3D Object &gt; Cube</code> から立方体を作成します。<br>Inspectorビューの設定を以下のようにすると視認性が高く表示できます。</p>
<ul>
<li>Position : 0, 0, 1</li>
<li>Rotation : 45, 45, 45</li>
<li>Scale : 0.1, 0.1, 0.1<br><img src="/images/20170418/photo_20170418_08.png"></li>
</ul>
<p>作業を残したい場合は <code>メインメニュー File &gt; Save Scenes</code> から作成したSceneに任意の名前を入力して保存できます。</p>
<h2 id="Potato-Headsのつくり方"><a href="#Potato-Headsのつくり方" class="headerlink" title="Potato Headsのつくり方"></a>Potato Headsのつくり方</h2><p>Potato Headsの設定をここから記載します。<br>とりあえず簡単なものを動かしてみたい方は、上記の簡単なオブジェクトを作成したら、この小段落は飛ばしてビルドに移ってください。</p>
<ol>
<li>導入するアセットを下記からダウンロード<ul>
<li>顔認証を使うために OpenCV を導入します。また、OpenCV を HoloLens で動くようにするためのアセットが HoloLensWithOpenCVForUnityExample.unitypackage です<ul>
<li><a href="https://www.assetstore.unity3d.com/jp/#!/content/21088" target="_blank" rel="noopener">OpenCV For Unity</a>　(私は2.1.5を購入)</li>
<li><a href="https://github.com/EnoxSoftware/HoloLensWithOpenCVForUnityExample" target="_blank" rel="noopener">HoloLensWithOpenCVForUnityExample.unitypackage</a></li>
</ul>
</li>
</ul>
</li>
<li>先ほどHoloToolkit-Unityをインポートした時と同様に、インポート<ol>
<li><code>OpenCVforUnity/Assets</code> 内の OpenCVForUnity, OpenCVForUnity.meta をプロジェックトの Assets にドラッグアンドドロップ</li>
<li><code>HoloLensWithOpenCVForUnityExample/Assets</code> 内のすべて4ファイルをプロジェクトのAssets にドラッグアンドドロップ</li>
<li><code>Assets/OpenCVForUnity/StreamingAssets</code> を Assets 直下に出します</li>
<li><code>Assets/OpenCVForUnity/OpenCVForUnityUWP_Beta3</code> 圧縮ファイルを展開</li>
<li><code>Assets/OpenCVForUnity/OpenCVForUnityUWP_Beta3/OpenCVForUnityUWP_Beta3</code> を実行</li>
<li>OpenCV を HoloLens で使用するために必要なファイルがインポートされるので、Allを選択し、Importボタンをクリック</li>
</ol>
</li>
</ol>
<p>ここまでできていれば以下の画像のようなAssets構造になっているはずです。<br><img src="/images/20170418/photo_20170418_09.png"></p>
<p>この状態で <code>HoloLensWithOpenCVForUnityExample/Scenes</code>内のサンプルはHoloLens上でも動きます。</p>
<p>ここで私は <code>Scene/HoloLensAnonymousFaceExample</code> を使用します。<br>人の顔を検知して画像をかぶせるサンプルです。</p>
<p>好きな画像にしたい場合は、以下の1～2手順で変更できます。</p>
<ol>
<li><code>Assets/HoloLensAnonymousFaceExample/Resources</code> に画像を保存</li>
<li><code>Assets/HoloLensAnonymousFaceExample/Scripts/Overlay/AnonymousRectQuad</code> のInspectorビューの一番下の AnonymousRectQuadMaterial の左下の下三角を押すと詳細がでるので、そこで画像のSelectから好きな画像を選択（下画像を参照）<br><img src="/images/20170418/photo_20170418_10.png"></li>
</ol>
<h1 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h1><ol>
<li><code>メインメニュー &gt; Build Settings</code> をクリック</li>
<li>以下の設定の確認します<ul>
<li>SDK : Universal 10</li>
<li>UWP Build Type : D3D</li>
</ul>
</li>
<li>Unity C# Projects にチェックをつけます</li>
<li>Add Open Scenesボタンから先ほどビルドしたいSceneを追加します</li>
<li>Build ボタンをクリック<br><img src="/images/20170418/photo_20170418_11.png"></li>
<li>ビルド先が聞かれるので、開かれるフォルダの中にAppフォルダを作って、そこをビルド先にするといいです</li>
<li>ビルドが完了したら、フォルダが自動で開かれるので、先ほどのビルド先フォルダ内の <code>[プロジェクト名].sln</code> をVisual Studioで開きます</li>
<li>Visual Studioで開いたら、上にあるドロップダウンを Release, x86, Device に設定します<br><img src="/images/20170418/photo_20170418_12.png"></li>
<li>HoloLensをPCに接続し、電源をつけておきます</li>
<li><code>メインメニュー デバッグ &gt; デバッグなしで開始</code> をクリック</li>
</ol>
<p>1～10の作業を行えば、HoloLens用にアプリがビルド・デプロイされます。<br>うまく完了すれば、HoloLensに転送したアプリが自動で起動して、開発したアプリを見ることができるはずです。</p>
<p>以上で、一連のHoloLensアプリの開発は完了です。</p>
<h1 id="デバッグについて"><a href="#デバッグについて" class="headerlink" title="デバッグについて"></a>デバッグについて</h1><p>私はWindows10 Home で開発していて、Emulatorが使えない環境だったので、HoloLensで起動しているアプリのログをとることができませんでした。<br>そのため「3D Text」をつくり、それを変更することでログとしての役割を持たせデバッグしていました。</p>
<figure class="highlight c"><figcaption><span>TextChange.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> DlibFaceLandmarkDetectorExample &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> TextChange : MonoBehaviour &#123;</div><div class="line">        <span class="built_in">string</span> text = <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Use this for initialization</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Update is called once per frame</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="built_in">string</span> newtext)</span></span></div><div class="line">        &#123;</div><div class="line">            text = text + newtext;</div><div class="line">            GetComponent&lt;TextMesh&gt;().text = text;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上のメソッドを用意しておいて、デバッグしたいコードの中でこのメソッドに飛ばすという形です。<br>クラスの中でパスを定義↓しまして…</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TextChange textChange;</div><div class="line">GameObject refObj;</div><div class="line">refObj = GameObject.Find(<span class="string">"3DText名"</span>);</div></pre></td></tr></table></figure>
<p>メソッドに飛ばします↓</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">textChange = refObj.GetComponent&lt;TextChange&gt;();            </div><div class="line">textChange.Change(<span class="string">"test\n"</span>);</div></pre></td></tr></table></figure>
<p>この手法を用いてデバッグを行いました。</p>
<h1 id="インターン成果発表会"><a href="#インターン成果発表会" class="headerlink" title="インターン成果発表会"></a>インターン成果発表会</h1><p>インターン当初はもっと高度なことをやろうと計画立てていましたが、開発期間4日間という短い期間だったため、途中で方向転換し、期間内で物をつくりあげることを大切にしました。</p>
<p><img src="/images/20170418/photo_20170418_13.png"></p>
<p>最後の発表会はHoloLensをつけて、オーディエンスをイモにしてリラックスしながら進めました。笑</p>
<p><img src="/images/20170418/photo_20170418_14.png"></p>
<p>発表会の後には体験もしてもらい、なぜかイモになる側が盛り上がりました。</p>
<p><img src="/images/20170418/photo_20170418_15.png"></p>
<p>HoloLensごしから撮影すると上記のような感じです。<br>無理やり撮影しているので色がおかしいですが、人間が見るとキレイにジャガイモに見えます。<br>ちなみに、距離が離れたメガネの人は顔認識が行いにくいようです。</p>
<h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Unity上では動くけれどHoloLensに転送するとうまく動かないといったものもあり、大変なところもありました。<br>具体的には、入力画像をマトリックスで処理していく際、その処理のメソッドに飛ばすところで止まってしまうことがありました。</p>
<p>HoloLensのアプリを開発するにあたって、使用する技術の分野は未経験でしたがアプリとして形にすることができました。<br>フューチャーさんの技術的アドバイスがあったからこそだと感じています。</p>
<p>Potato Heads はストア申請をしていて、近日中にWindowsストアに公開されると思います！<br>→公開されました！(2017/04/14時点)<br>　<a href="https://www.microsoft.com/en-us/store/p/poteto-heads/9pmqvw7znj1v" target="_blank" rel="noopener">Potato Heads - Microsoft Store</a></p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">エディションHomeは HoloLens のアプリ開発ではイバラの道。PC上でシミュレーションできるemulatorが入らないからです</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">windowsの推奨は8GBですが、4GBでも開発できました</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">(参考) <a href="http://developer.cybozu.co.jp/akky/2010/10/ar-diminished/" target="_blank" rel="noopener">http://developer.cybozu.co.jp/akky/2010/10/ar-diminished/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Unity, C# の未経験者がHoloLensのアプリを開発しました。&lt;br&gt;まだまだHoloLensについての開発情報が少ないと思いますので、アプリを作っていく流れをまとめます。&lt;br&gt;なにか少しでもお役に立てれば嬉しいです！&lt;/p&gt;
&lt;p&gt;HoloLensに関する過去
    
    </summary>
    
      <category term="VR" scheme="https://future-architect.github.io/categories/VR/"/>
    
    
      <category term="Unity" scheme="https://future-architect.github.io/tags/Unity/"/>
    
      <category term="HoloLens" scheme="https://future-architect.github.io/tags/HoloLens/"/>
    
  </entry>
  
  <entry>
    <title>Elixir Conf Japan 2017 参加レポート</title>
    <link href="https://future-architect.github.io/articles/20170414/"/>
    <id>https://future-architect.github.io/articles/20170414/</id>
    <published>2017-04-14T03:00:00.000Z</published>
    <updated>2017-05-09T01:57:18.463Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20170412/photo_20170412_01.png" class="img-small-size"></p>
<h1 id="Elixir-Conf-Japan-2017-に参加しました"><a href="#Elixir-Conf-Japan-2017-に参加しました" class="headerlink" title="Elixir Conf Japan 2017 に参加しました"></a>Elixir Conf Japan 2017 に参加しました</h1><p>弊社がミッションクリティカルなシステムを構築する際には、実績やノウハウが充実した固い技術要素を選択することも多いのですが、絶え間無く進化する技術の恩恵を享受すると共に自身もコミッタとして貢献するべく、先端技術のキャッチアップにも注力しています。そんな技術調査の一環として4月1日、秋葉原コンベンションホールで開催された<a href="http://www.elixirconf.jp/" target="_blank" rel="noopener">Elixir Conf Japan 2017</a>に参加してきました。<br>未だ社内には採用実績が無くウォッチャーも少ない言語の為、言語仕様と歴史的背景の大まかな理解のみを携えて、まずは採用事例やその背景を伺う事を目的としました。</p>
<h2 id="Elixir-とは"><a href="#Elixir-とは" class="headerlink" title="Elixir とは"></a>Elixir とは</h2><p>Elixirは、一言で言えば<strong>「モダンなErlang」</strong>です。Erlangは30年前から電話会社のネットワークシステムを支えてきた、耐障害性と強力な並行処理のサポートを持つ言語で、それらの実装を支えるライブラリとデザイン集である<strong>「OTP」</strong>とセットで多くの場合<strong>「Erlang/OTP」</strong>と呼ばれます。</p>
<p>ErlangはWebサービスの様な高レベルなアプリケーションサーバではなく、低層のネットワークサーバやミドルウェアが主用途とされてきた為、独自の発展を遂げて仕様やライブラリやビルドシステムは一般的に馴染みのある他言語の使用感とは一線を画していました。</p>
<p>Elixirは、Erlang/OTPの特長はそのままに、近年のトレンドであるパッケージ管理やビルドの仕組やメタプログラミング、LL風のプログラミングスタイルといった物を持ち込んで、世の中の多くのプログラマーにとって馴染み易い言語となっています。</p>
<ul>
<li>紹介リンク<ol>
<li><a href="https://elixirschool.com/jp/lessons/basics/basics/" target="_blank" rel="noopener">Elixir School</a></li>
<li><a href="http://dev.classmethod.jp/server-side/web_language_topic-elixir_introduction/" target="_blank" rel="noopener">最近話題のWeb言語 Elixirのご紹介</a>（2015年11月の記事）</li>
</ol>
</li>
</ul>
<h2 id="Elixir-Conf-Japan-2017-概要"><a href="#Elixir-Conf-Japan-2017-概要" class="headerlink" title="Elixir Conf Japan 2017 概要"></a>Elixir Conf Japan 2017 概要</h2><p>[<a href="https://elixirconf.connpass.com/event/47856/presentation/" target="_blank" rel="noopener">発表資料</a>]<br>Elixirのコミュニティの活動としては、 <a href="http://sapporo-beam.github.io/" target="_blank" rel="noopener">Sapporo.beam</a> や <a href="https://beam-lang.connpass.com/" target="_blank" rel="noopener">tokyo.ex</a> と言ったイベントが開催されています。そんな中、今回のカンファレンスはElixir作者のJosé Valim氏を招聘し、300人規模の会場で9時間で8セッション・8LTと日本では過去最大規模のイベントとなりました。有料(¥4,000)にも関わらず前日には参加枠が埋まり、当日はホールも懇親会会場も満員御礼の大盛況でした。</p>
<p>まだ若い言語だけあってセッションでは「運用してみて課題が見えて来た」「本格的な稼働はこれから」といった報告が多めでした。またElixir Confと銘打ちながらもErlang/OTPの話題に触れる機会が多く、「Erlang/OTPを使う手段としてのElixir」という位置付けの印象が強かったです。事実、主催者の方を含め複数の人が「次回は”Erlang &amp; Elixir Conf”で良いんじゃないか？」との感想をお持ちの様です。</p>
<p>参加者層は（あくまで見た感じでの主観ですが）幅広い年齢層、女性が3～4%、外国人が5%くらい？という印象でした。9割9分がMBP/Macbookでした。開演の挨拶で「メリットを強調しようとすると他をディスる論調になりがちだけど絶対やめて！！！」と強く釘を刺されていました。</p>
<h2 id="Opening-Keynote-Jose-Valim-さん"><a href="#Opening-Keynote-Jose-Valim-さん" class="headerlink" title="Opening Keynote - José Valim さん"></a>Opening Keynote - José Valim さん</h2><p>オープニングの基調講演は、Elixirの生みの親による、Elixir誕生前夜の舞台裏から今後の展望について。Railsのコアメンバーでもある同氏は、Rubyで並行プログラムを安全にかつフル活用する良い方法が見付からず悩んでいた所に <a href="https://www.amazon.co.jp/dp/193435659X" target="_blank" rel="noopener">Seven Languages in Seven Weeks</a> でErlang/OTPを知り、並行プログラムとの親和性の高さや安全性に惹かれ……といった所から始まり、メタプログラミングの導入と明示性の確保の間の苦悩等、言語開発者ならではの興味深い示唆と人間味の混じった誕生秘話が披露されました。今後の導入予定として語られた内容は以下1～3です。</p>
<h3 id="1-UTF-8-Atoms-in-progress"><a href="#1-UTF-8-Atoms-in-progress" class="headerlink" title="1. UTF-8 Atoms  (in progress)"></a>1. UTF-8 Atoms  (in progress)</h3><ul>
<li>日本語でテストが書ける</li>
<li><del>Emojiでソースが書ける</del><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from 🍺 <span class="keyword">in</span> 🍻, </div><div class="line">    <span class="symbol">order_by:</span> 🍺.💰,</div><div class="line">    <span class="symbol">join:</span> 🍗 <span class="keyword">in</span> assoc(🎉, <span class="symbol">:</span>🍴)</div><div class="line">    |&gt; Repo.all</div><div class="line">    |&gt; Enum.each(💸)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-genHTTP-early-research"><a href="#2-genHTTP-early-research" class="headerlink" title="2. genHTTP (early research)"></a>2. genHTTP (early research)</h3><ul>
<li>HTTPに応答するlow levelなビヘイビア？名前からして超気になる所ですが詳細は聞き取れませんでした。<ul>
<li>Type System (early research)</li>
</ul>
</li>
<li>静的型付け！公言したのはメーリングリスト含め今会場が初めてだそうです。どよめきました。</li>
<li>現時点では、ErlangVMには所謂厳密な静的型システムが有りませんが、Dialyzerという静的解析ツールをコンパイル後に実行する事でチェックする事が出来ます。ただ後のvoluntasさんのお話によると1万行のモジュールの解析に1分近くかかるとの事<ul>
<li>また懇親会で伺った話によると <a href="https://github.com/skirino/croma" target="_blank" rel="noopener">skirino/croma</a> というツール(日本の方!)を提供されていて、マクロによりコンパイル時の型チェックを実現できているという事でした。<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import Croma.Defun</div><div class="line">defun f(a <span class="symbol">:</span>: integer, b <span class="symbol">:</span>: String.t) <span class="symbol">:</span>: String.t <span class="keyword">do</span></div><div class="line">  <span class="string">"<span class="subst">#&#123;a&#125;</span> <span class="subst">#&#123;b&#125;</span>"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="3-Data-Stream-amp-Property-based-testing-early-research"><a href="#3-Data-Stream-amp-Property-based-testing-early-research" class="headerlink" title="3. Data Stream &amp; Property based testing (early research)"></a>3. Data Stream &amp; Property based testing (early research)</h3><ul>
<li>QuickCheck的な物ですね</li>
</ul>
<h2 id="Session-1-Phoenix-で作るスケーラブルなリアルタイムゲームサーバー-株式会社ミクシィ-XFLAG-STUDIO-古城秀隆さん"><a href="#Session-1-Phoenix-で作るスケーラブルなリアルタイムゲームサーバー-株式会社ミクシィ-XFLAG-STUDIO-古城秀隆さん" class="headerlink" title="Session 1 - Phoenix で作るスケーラブルなリアルタイムゲームサーバー - 株式会社ミクシィ XFLAG STUDIO 古城秀隆さん"></a>Session 1 - Phoenix で作るスケーラブルなリアルタイムゲームサーバー - 株式会社ミクシィ XFLAG STUDIO 古城秀隆さん</h2><p>「Elixir歴が日本一長い」と自負するXFLAGでの採用経緯と運用事例です。</p>
<h3 id="利用用途"><a href="#利用用途" class="headerlink" title="利用用途"></a>利用用途</h3><ul>
<li>モンストのバックエンドの他、”XFLAG STATION”のアプリケーションサーバとしてElixir、Phoenixを使用中</li>
</ul>
<h3 id="モバイルゲームの特徴"><a href="#モバイルゲームの特徴" class="headerlink" title="モバイルゲームの特徴"></a>モバイルゲームの特徴</h3><ul>
<li>大量の更新リクエスト</li>
<li>イベント開催中のトラフィック増</li>
<li>協力プレイなどでリアルタイム通信は当たり前。サーバからのプッシュ通信もしたい</li>
</ul>
<h3 id="Elixirがもたらしたもの"><a href="#Elixirがもたらしたもの" class="headerlink" title="Elixirがもたらしたもの"></a>Elixirがもたらしたもの</h3><ul>
<li>メモリがあふれない限り大量のリクエストを漏らさず打ち返す。スループットはリクエストの量とサーバリソースに対して概ね線形に推移する</li>
<li>ErlangVMのホットデプロイでクライアントを切断する事無くサーバサイドのバージョンアップが実現する……かに思えたが実際には不具合に悩まされた<br>VM内にバージョン違いのモジュールが一時的に混在したり、旧バージョンの関数への参照を保持していたプロセスが予期せず落ちたり等<br>※これは<a href="http://sile.github.io/slide/kbkz_tech_05/#/18" target="_blank" rel="noopener">ドワンゴさんも通って来た道ですね。</a></li>
<li>MySQLは大量のリクエストを受けると詰まる。ectoのプロセスが緩和してくれた</li>
</ul>
<h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><ul>
<li>モバイルは通信がよく切れたり別経路で再接続したりする。cowboyのWebsocketとRabbitMQによるpubsubで対応した</li>
<li>Erlangのデフォルトのpubsubはサーバのクラスタリングが必要だったためRabbitMQにした</li>
</ul>
<h2 id="Session-2-Elixirから始める関数型言語-Claude-Tech株式会社-CTO-Perez-Danielさん"><a href="#Session-2-Elixirから始める関数型言語-Claude-Tech株式会社-CTO-Perez-Danielさん" class="headerlink" title="Session 2 - Elixirから始める関数型言語 - Claude Tech株式会社 CTO Perez Danielさん"></a>Session 2 - Elixirから始める関数型言語 - Claude Tech株式会社 CTO Perez Danielさん</h2><p>会社でのElixir採用歴1年、Tokyo.exでもよく登壇されているとの事。関数型言語の初心者向けに、以下1～4の特徴やElixirでの使用方法についての発表でした。個人的には、知っている人には「ああ、あれね」で通じるが初心者にとっては宇宙語では…？という印象を持った発表内容とスピードでしたが、心配には及ばず好評のようです。</p>
<ol>
<li>パターンマッチ</li>
<li>再帰</li>
<li>高階関数</li>
<li>不変性</li>
</ol>
<h2 id="Session-3-Elixir導入提案-株式会社gumi-CTO-幾田雅仁さん"><a href="#Session-3-Elixir導入提案-株式会社gumi-CTO-幾田雅仁さん" class="headerlink" title="Session 3 - Elixir導入提案 - 株式会社gumi CTO 幾田雅仁さん"></a>Session 3 - Elixir導入提案 - 株式会社gumi CTO 幾田雅仁さん</h2><p>nine nines(99.9999999%)のSLAを実現できると知って以来Erlang/OTPに惚れ込み10年になる幾田さん。隙あらばErlangなErlangおじさん。<strong>「今後gumiはElixirとともにある。Python2は3へは移行しません」</strong>と宣言しました。社内外含め初の公表だそうです。Alchemist的には勇気づけられますが、pythonistaの心境や如何に。</p>
<ul>
<li>10年前の職場で決済代行サービスにErlang/OTPを導入したが、perlとの接続等もあって複雑な構造になり、勉強会を何度も開催しても後続が育たなかった。気付けば皆Scalaに行った</li>
<li>gumi入社後、認証・課金の共通基盤を手掛ける事になり、早速Erlangでの開発を決めて時雨堂さんに発注した。以来4年間、計画的停止とAWS障害の2回を除き止まった事が無い。サーバ運用が超楽に、かつ安く上がっている。しかしErlang/OTPで組まれたシステムのメンテナンスは相変わらずトラックナンバー1</li>
<li>Elixirは馴染みやすい文法でErlang/OTPの信頼性とスケーラビリティを享受できる</li>
<li>現在は基盤のErlang/OTPをElixirに置き換えつつある</li>
<li>まだ一般社員向けの体系的トレーニングには至っていない。ゲームのサービスとしてリリースされるのは3年程先か</li>
<li>Erlang/OTPのプロセス設計は他の処理系には無い特徴が有り難しい。Elixirでもその点は同様。教育でもOTPに重点を置いている</li>
<li>シンガポールにオフショア開発を委託した実績がある</li>
<li>Dynamoを使う上でectoは不要で、Plugとcowboyで充分だったのでPhoenixは採用しなかった</li>
<li>求人数を調べると辛うじてErlangに勝っていた。Ruby:5k Elixir:54 Erlang:46</li>
</ul>
<h2 id="Session-4-Elixir-はリアルタイムWeb-に強いというのは本当か？-mururuさん"><a href="#Session-4-Elixir-はリアルタイムWeb-に強いというのは本当か？-mururuさん" class="headerlink" title="Session 4 - Elixir はリアルタイムWeb に強いというのは本当か？ - mururuさん"></a>Session 4 - Elixir はリアルタイムWeb に強いというのは本当か？ - mururuさん</h2><p>東京大学大学院の院生にして、時雨堂から高難易度の仕事を任されたり、サンフランシスコのErlang Factoryで飛び入りLTしたりと、日本屈指のErlang/OTP・Elixirのエキスパートmururuさん。まず「リアルタイムWeb」という言葉の要件を定義して、そこにElixirはどう寄与するか？というお話。</p>
<ul>
<li>リアルタイムWebの課題<ul>
<li>大量コネクション</li>
<li>ステートフル</li>
<li>低遅延</li>
<li>耐障害性</li>
</ul>
</li>
<li>Erlang/OTPの軽量プロセスの特長<ul>
<li>一般的なグリーンスレッドと比べてもフットプリントが小さく、大量に起動してもメモリフレンドリー</li>
<li>軽量プロセス間でデータを共有しないのでGCがプロセス単位。stop the worldしない</li>
<li>グリーンスレッドを謳う処理系も、実は内部にCooperativeな部分が相当残っているErlang/OTPは極めてPreemptiveなスケジューリング（※例えば<a href="https://github.com/golang/go/issues/114629" target="_blank" rel="noopener">goroutineは”partially preemptive”</a>とか言われていますね）</li>
<li>軽量プロセス間で独立しているので障害が他の軽量プロセスに波及しない。逆に軽量プロセス別に障害を監視してハンドリングする事も可能</li>
</ul>
</li>
<li>リアルタイムWebシステムが抱える課題に対し、軽量プロセスがもたらすメリットを挙げた上で、「それでもそれらを正しく活かすプロセス設計は大変」</li>
<li>プロセス設計がプアだと、メッセージパッシングがボトルネックになってパフォーマンス劣化に繋がり易い</li>
<li>Phoenix 等のフレームワークに乗れば、複雑なプロセス設計を賄ってくれる</li>
</ul>
<h2 id="Session-5-Rubyist-gt-o-gt-Alchemist-〜Elixirの採用からサービス稼動までの記録〜-株式会社ドリコム-大原常徳さん"><a href="#Session-5-Rubyist-gt-o-gt-Alchemist-〜Elixirの採用からサービス稼動までの記録〜-株式会社ドリコム-大原常徳さん" class="headerlink" title="Session 5 - Rubyist |&gt; (^o^) |&gt; Alchemist 〜Elixirの採用からサービス稼動までの記録〜 - 株式会社ドリコム 大原常徳さん"></a>Session 5 - Rubyist |&gt; (^o^) |&gt; Alchemist 〜Elixirの採用からサービス稼動までの記録〜 - 株式会社ドリコム 大原常徳さん</h2><p>ここまでとは毛色が変わって導入におけるチーミングや運用の話がメインでした。</p>
<ul>
<li>RailsからElixirへの移行</li>
<li>開発者に求めるスキルは「テストが書ける」事が実務の壁。並行処理やプロセス設計への理解はレビュアに求めるスキル</li>
<li>Elixirを使えば並行プログラムは簡単に書ける、だが逐次処理はもっと簡単に書けてしまう。意識して並行化可能なプログラムを書く必要がある点は他と変わらない</li>
<li>Red-Green-Refactorのサイクルに「平行化する」（あるいは「しないと判断する」）ステップを加える。という提唱</li>
<li>一般的なHeartBeatによる死活監視だと、プロセスが死んでもSuperviserがすぐ再起動するので検知できない。対応した通知機構を持つ必要がある</li>
<li>Erlang/OTP,Elixirはバージョンアップの頻度が高い。しかもErlang/OTPとElixirとのバージョンの組み合わせの選択も発生する。Elixirが年2回マイナーバージョンアップ、Erlang/OTPが年1回メジャーバージョンアップ</li>
<li>デバッグ中にErlangで書かれたソースを読む機会が往々にしてある</li>
<li>関数型言語の学習にはHaskel入門がおすすめ（※と言ってもElixirにはプレーンな状態だと関数合成やらカリー化やらモナドやらも無いので意図して深みにハマらない限りそこまでモナモナしい領域には達しないと思います）</li>
</ul>
<h2 id="Session-6-ニコニコを支えるErlang-Elixir-〜-大規模運用して初めて見えたアレやコレ-株式会社ドワンゴ-原耕司さん"><a href="#Session-6-ニコニコを支えるErlang-Elixir-〜-大規模運用して初めて見えたアレやコレ-株式会社ドワンゴ-原耕司さん" class="headerlink" title="Session 6 - ニコニコを支えるErlang/Elixir 〜 大規模運用して初めて見えたアレやコレ - 株式会社ドワンゴ  原耕司さん"></a>Session 6 - ニコニコを支えるErlang/Elixir 〜 大規模運用して初めて見えたアレやコレ - 株式会社ドワンゴ  原耕司さん</h2><p>ニコニコ動画のコンテンツ配信システム Dwango Media Clusterについて。開発者20人で55万行のErlangに2万行のRustなど文字通り桁外れです。残念ながらElixirの話はほぼありませんでした。DMCでは形式的記述で「レシピ」を書くとErlang/C++/Lua等々のソース6万行を自動生成とか、開発部門の作業スケジュールを工数と優先度から自動生成＆公開しているとかいった発表内容自体は面白かったです。</p>
<p>今回の発表では触れられませんでしたが、<a href="http://niconare.nicovideo.jp/watch/kn2178" target="_blank" rel="noopener">ニコニコ動画の生放送の配信システムでもErlang/OTPが使われていて、こちらは10万locという事が以前発表されていました。</a></p>
<ul>
<li>巨大なバイナリデータをshared heap領域で管理し軽量プロセスはそこへのポインタを持つ形で構成していた。プロセスが死んだ後もshared heap内でデータが生き残り、毎時2GBのメモリリークが発生した。monitorが死んだプロセスのDOWNを発信しなかった。根本的に解決出来なかったが自力でmonitor_with_pollingして回避した。</li>
</ul>
<h2 id="LT"><a href="#LT" class="headerlink" title="LT"></a>LT</h2><p>よくある勉強会のノリでみなさん思い思いの「作ってみた」等々披露されていました。時間切れの銅鑼の音が心臓に悪いと不評で、音量を控えめにしてからは「ホワァ～ン」と気の抜けた音になったりしました。</p>
<ul>
<li>Why did we decide to start using Elixir?<ul>
<li>by ma2geさん</li>
<li>楽しんで進化する為</li>
</ul>
</li>
<li>「Surge」 - Amazon DynamoDB for Elixir<ul>
<li>by hirocaster</li>
<li>AWSのSDKにElixir用が無かったので</li>
</ul>
</li>
<li>初心者のElixir |&gt; Flow,GenStage |&gt; Concurrent MapReduce<ul>
<li>by ovrmrvさん</li>
<li>Elixirと言えど気を抜くと逐次処理になるぞ、性能落ちるぞ、を端的に見せ付けられて非常に良かったです</li>
</ul>
</li>
<li>Elixir client from OpenAPI(Swagger) definition<ul>
<li>by niku_nameさん</li>
<li>SwaggerでElixirクライアントソースを生成</li>
</ul>
</li>
<li>AngulaとElixirの新しい関係 <ul>
<li>by isyumi_netさん</li>
<li>[<a href="https://www.slideshare.net/ssuserd34c39/angulaelixir" target="_blank" rel="noopener">スライド</a>]</li>
<li>サーバとクライアントの2階建てMVC辛い。FluxのView部分だけAngularで書いて、後は全部Elixir/Phoenixで提供して1階建てMVCにするという夢のような悪夢のような試み。この方式、個人的に将来性がとても気になります</li>
</ul>
</li>
<li>ElixirでHubotを倒す<ul>
<li>ne_sachirouさん</li>
<li>実家のような安心感のある結論でした</li>
</ul>
</li>
<li>「APIサーバーとしてのCowboy」<ul>
<li>by hayabusa333さん</li>
<li>日本で数少ない(少なかった)Elixir書籍、エーフィーのアトリエの著者としてお馴染みのはやぶささん、いつの間にドリコムに</li>
</ul>
</li>
<li>「<a href="http://www.erlang-factory.com/sfbay2017/" target="_blank" rel="noopener">Erlang and Elixir Factory San Francisco Bay 2017</a> 参加報告」<ul>
<li>by jj1bdx (力武健次)さん</li>
<li>1週間の有料トレーニングの真ん中にカンファレンスがある、という日程</li>
<li>発表内容は濃い物も多いがトレーニーでも充分楽しめる</li>
<li>コンパイラの挙動の解説やノード間通信の可視化の話、FPGAとErlangなどコアな講演から、「言語がコミュニティの特徴を方向付ける」等と言った抽象的な物まで</li>
<li>日本人もどんどん登壇すべき。今日のConfを見て行けると思った</li>
</ul>
</li>
</ul>
<h1 id="Closing-Keynote-voluntasさん"><a href="#Closing-Keynote-voluntasさん" class="headerlink" title="Closing Keynote - voluntasさん"></a>Closing Keynote - voluntasさん</h1><p>日本でErlang/OTPと言えば時雨堂ですね。Elixirの話は皆無でWhy Erlang/OTPの話しかしない、との英断、見事にはまっていたと思います。</p>
<ul>
<li>Elixirは使った事が無く使う予定も無い。皆Erlang書くの辛いと言うが、手を付けて10年で辛いと思った事が無い</li>
<li>Erlangを採用するシステムは内情が明らかにされないケースが多いので採用の実態は把握し難い。公に出来る情報は氷山の一角</li>
<li>誰もOTPの話をしなかったのが残念。mururuかgumiはしてくれると思ったのに</li>
<li>Erlang/OTPを軽く試してみたいならまずネットワークサーバを書いてみると良い。HTTPサーバでも、HTTPを超えるオレオレプロトコルでも</li>
<li>Erlangで書かれたシステムは大体1万行程度。ドワンゴの55万行は世界的に見ても大きい方</li>
<li>有名どころだとWhatsAppがユーザー10億人、秒間7000万リクエストを捌くのにエンジニアは30人。ErlangVMにも手を入れてる。ゲーム会社ではRiotがある（※ 昔からRiotではLeague of Legendsのチャットサーバに使われている事が公開されていましたが、<a href="https://engineering.riotgames.com/news/riot-messaging-service" target="_blank" rel="noopener">最近ゲームサーバのメッセージング部分もErlangで実装しているという記事が公開されました。</a>更にゲーム繋がり(?)で言うと<a href="https://blog.discordapp.com/how-discord-handles-push-request-bursts-of-over-a-million-per-minute-with-elixirs-genstage-8f899f0221b4" target="_blank" rel="noopener">Discordでのバーストやバックプレッシャーの話も興味深いです。</a>）</li>
<li>Why not Golang<ul>
<li>goで良い。狭いながらもErlangが勝てる領域があるのでそこで戦っているだけ</li>
</ul>
</li>
<li>Why Erlang/OTP<ul>
<li>適当に書いても動く</li>
<li>適当に書いても落ちない。落ちる時も軽量プロセスが単独で逝く</li>
<li>適当に書いてもスケールする。ARM96コアで利用率8000%まで行けた</li>
</ul>
</li>
<li>巷で「MacでErlang試してみたけど落ちたぞ」と言ってるのは大体FD枯渇。デフォルトでは256しかないので</li>
<li>DSLでネットワークサーバ関連の記述が充実しているので超短く書ける</li>
<li>プロセス設計は難しい。だから僕にプロセス設計の依頼が来る</li>
<li>パターンマッチ最高。一度経験すると無い言語には戻れない</li>
<li>クラッシュダンプが読み難い。皆一度は読んで絶望する</li>
<li>E2Eテストが容易。HTTP非同期のテスト等も実際のTCPコネクションを使って簡単にテストできる</li>
<li>Erlang/OTP関係で問題が起きてSOSが回って来る時は9割方RabbitMQ。辛いので大抵断る</li>
<li>軽量プロセスについて<ul>
<li>Erlang/OTPは1プロセスでは性能が出ない。複数プロセスを起動すると綺麗に終わらせるのが難しい</li>
<li>supervisorが死んでErlangVMが死ぬ事はある。simple_one_for_oneでtemporaryで、死に際に綺麗にログを出して～とやりだすとsupervisor不要</li>
<li>軽量プロセスは実はしぶとい。殺したつもりのプロセスが生きていて「プロセスリーク」の状態になる。waitingでもなくshutdownの一歩手前で生き残っている事がある</li>
<li>毎秒10万メッセージ辺りでキューが詰まり出す。これはErlangVMのメッセージパッシング速度が上がらないとどうしようもない</li>
<li>RabbitMQの場合、キュー溢れに対する挙動は「キューを捨てて再起動」</li>
</ul>
</li>
<li>OTP 20.0 coming<ul>
<li>2017-06-21 にリリース</li>
<li>やっとシグナルがハンドル可能になる。今まではCtrl+Cで止まらない等、コンテナ技術と相性が悪かった</li>
<li>stringモジュールがUnicode対応</li>
<li>古い言語の割にドラスティックにソースを変更する</li>
<li>etsが性能向上する</li>
<li>JITはLLVMベースで実験中</li>
</ul>
</li>
</ul>
<h2 id="懇親会"><a href="#懇親会" class="headerlink" title="懇親会"></a>懇親会</h2><p><img src="/images/20170412/photo_20170412_02.jpeg"></p>
<p>スリーモンキーズカフェにて。会場は「最大300人」を謳ってますが相当すし詰め状態でした。そしてビュッフェの料理がデプロイされるテーブルがシングルスレッドでキュー溢れしてました。<br>私は初手でディープな方々のテーブルに突撃するのはハードルが高かったので比較的親しみ易い話題のテーブルをうろうろしていましたが、感想として多かったのは「やっぱりErlang/OTPか」と「どこに使えば良いんだ…？」でした。自己紹介すると「エンプラでElixirって使うんですか？」と訊かれ「それを探りに来ました」と返す会話が多かったです。そこは予想していた通りでしたが、使える場面を考える上で開発者の確保（教育/採用/調達全て込みで）はどうしたもんだろうねという話は、ほとんどど通じなかったのは意外でした。</p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回のElixir Conf Japanを通してのトピックを以下にピックアップします。</p>
<ul>
<li>まずErlang/OTPの概念と現実から始めよう。すごいE本を読もう！</li>
<li>Erlangは遅いがスケールする</li>
<li>プロセス設計は難しいがPhoeninx等のFWの恩恵に預かれればその限りではない</li>
<li>導入も教育もまだまだ手探り中</li>
</ul>
<p>なかなか使い所に迷う技術ではあるものの、１プログラマーの視点で見れば「書いていて楽しい」という最高に魅力的な言語には違いないので、引き続き知見を積んで行こうと思います。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/20170412/photo_20170412_01.png&quot; class=&quot;img-small-size&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Elixir-Conf-Japan-2017-に参加しました&quot;&gt;&lt;a href=&quot;#Elixir-Co
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Elixir" scheme="https://future-architect.github.io/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>HoloLensの空間共有サービスを使ってみよう</title>
    <link href="https://future-architect.github.io/articles/20170405/"/>
    <id>https://future-architect.github.io/articles/20170405/</id>
    <published>2017-04-05T03:00:00.000Z</published>
    <updated>2017-05-09T01:57:18.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。HoloLens記事第二弾です。</p>
<ul>
<li>前回の記事は<a href="https://future-architect.github.io/articles/20170210/">こちら</a>をご参照ください。</li>
</ul>
<p>今回は、HoloLensでこれから多く使われるであろう<font color="red"><strong>空間共有サービス（以下シェアリングサービス）</strong></font>の特性と実装方法の触りについて紹介します。</p>
<h1 id="HoloLensの空間共有サービスとは"><a href="#HoloLensの空間共有サービスとは" class="headerlink" title="HoloLensの空間共有サービスとは"></a>HoloLensの空間共有サービスとは</h1><p>HoloLensの醍醐味は、現実世界と仮想世界が融合することです。つまりHoloLensゴーグルをかけると、スマホを通さずとも視野の中にに様々な情報や仮想的なオブジェクトを出現させることができます。</p>
<p>ARとして流行ったポケモンGOを例にすると、スマホの画面上で現実の背景の上にポケモンの画像が合成されて表示されていましたよね？HoloLensを身につけると、散歩中にふと公園を見ると「ピカチュウが花壇から出てきた！」という風景を自然に見ることができます。また、HoloLensは<strong>現実世界のオブジェクトをスキャンしてマッピング</strong>を行っているので、「ピカチュウが滑り台を滑る」といったことが比較的容易に実現できちゃいます。</p>
<p>でも悲しいかな、HoloLensをそのまま装着しても、みんな別々、パラレルワールドのマサラタウンにいるのです。ある人はそこにピカチュウがいるというけれど、私には見えない、そんな状態です。それでは盛り上がりもかけますし、結局は自分にしか見えない仮想的なものなんだという儚い気持ちになってしまいますよね。</p>
<p>そこで登場HoloLensの<strong><font color="red">シェアリングサービス</font></strong>です。<strong>これを使うと、あるHoloLensで見ているものが、他のHoloLensでも同様に見ることができ、空間の共有が行えます。</strong>「ベンチの上でピカチュウがバク転した！かわゆす」というのを皆で一緒に見ることが可能となります。</p>
<h1 id="閑話。（仮想現実と現実に対する哲学的考察をちょっと）"><a href="#閑話。（仮想現実と現実に対する哲学的考察をちょっと）" class="headerlink" title="閑話。（仮想現実と現実に対する哲学的考察をちょっと）"></a>閑話。（仮想現実と現実に対する哲学的考察をちょっと）</h1><p>みんながそこにピカチュウがいると言う。これはもはやピカチュウが現実となったと言えるのではないでしょうか。</p>
<p><strong>「この世は人間に記録（観測）されるまでは存在しない」</strong>とどこかの偉い方が言いましたが、逆に認識されればそれは現実の世界になるのです。HoloLensを通さないと見えないから現実の世界なわけないじゃんというあなた、あなたは視覚を司る「目」という器官を通して世界を認識しています。この世界も目が無いと、見えなくなるから現実な世界なわけないと言っているのと同じかなと思います。</p>
<p><strong>昆虫は紫外線を見ることができるため、人間とは全く別の世界が広がっていますが、HoleLensが映し出す世界も似たようなものではないでしょうか。</strong>また、実際触れるじゃないかと思ったあなた、触れるという現象も触覚も持って感知しているにすぎず、本当の意味でそこに物体があるかどうかなんてだれにもわからないのではないかなと思います。</p>
<h1 id="シェアリングサービスの仕組み"><a href="#シェアリングサービスの仕組み" class="headerlink" title="シェアリングサービスの仕組み"></a>シェアリングサービスの仕組み</h1><p>哲学の話は置いて、本題に戻りましょう。<br>シェアリングを行うためには、<strong>お互いの空間情報を中継するためのサーバー（PC）が必要</strong>です。</p>
<p>アプリケーションの構成によりますが、本記事ではMicrosoftがHoloLensの開発ノウハウを公開している<a href="https://developer.microsoft.com/en-us/windows/mixed-reality/academy" target="_blank" rel="noopener">HolographicAcademy</a>にてシェアリングサービスを紹介している<a href="https://developer.microsoft.com/en-us/windows/mixed-reality/holograms_240" target="_blank" rel="noopener">Holograms240</a>の仕組みを説明します。</p>
<p>まず試したいという方は、<a href="https://developer.microsoft.com/en-us/windows/mixed-reality/holograms_240" target="_blank" rel="noopener">Holograms240の公式サイト</a>に実行方法が記載されています。<br>もしくは日本語で実施方法を記載してくださっている方がいるので<a href="https://docs.com/kaorun55/7627/hololens-sharing?c=euXVvL" target="_blank" rel="noopener">ここ</a>を見ると良いと思います。</p>
<p>Holograms240では<strong><a href="https://github.com/Microsoft/HoloToolkit-Unity" target="_blank" rel="noopener">HoloToolKit-Unity</a></strong>というUnity上でHoloLensの機能を使用するためのツール群を利用しています。このHoloToolKit-Unityにはシェアリングサービスが含まれています。開発者はこれを使用して、複数HoloLens間でのシェアリングを行うことができます。またHoloToolKit-Unityの中には、<strong>サーバーで起動するためのシェアリングサービスの実行ファイルが準備されている</strong>ので、シェアリングを行うためにはこれをPC上で実行して利用することができます。</p>
<p><strong>Holograms240は以下のような仕組みで動いています（下図）。</strong><br>まずはアプリ起動時にアンカー情報と呼ばれる、現実世界のマッピングとUnity上での座標を紐づけるための目印を共有します。<br><img src="/images/20170405/photo_20170405_01.jpeg"></p>
<p>次に、アプリ内で共有が必要なデータを逐次送受信して、同じオブジェクトの同期を行っています。<br><img src="/images/20170405/photo_20170405_02.jpeg"></p>
<p><strong>実空間とのマッピングがされているのはアンカーだけです。</strong></p>
<p>実空間をスキャンした情報とアンカーとのマッピング情報はデータ量が多いです。同期するのに長いと1分以上の時間がかかります！その後の共有情報はデータ量は少ないですが、<strong>各オブジェクトやアクションごとにデータの型や、送信処理、受信時の動作を実装してあげなくてはいけません。</strong>さすがに楽々と視野すべてを一括で同期して、というのはできないのですね…。今後もっと便利なライブラリができることを期待します。</p>
<h1 id="HoloToolKit-Unityの仕組みを少しだけ紹介"><a href="#HoloToolKit-Unityの仕組みを少しだけ紹介" class="headerlink" title="HoloToolKit-Unityの仕組みを少しだけ紹介"></a>HoloToolKit-Unityの仕組みを少しだけ紹介</h1><p>次にHoloToolKit-Unity内で何が行われているのか、かいつまんで紹介します。</p>
<h2 id="ImportExportAnchorManager"><a href="#ImportExportAnchorManager" class="headerlink" title="ImportExportAnchorManager"></a>ImportExportAnchorManager</h2><p>Holograms240ではこれを、HologramCollection（HoloLensで扱うオブジェクトの大親）につけてますね。このスクリプトは1機目ではアンカー（Unity上のオブジェクト）を物理的に固定（現実世界にマッピング）して、そのアンカー情報を共有サーバーにエクスポートしています。また2機目以降は、1機目のアンカー情報をインポートして、自身の現実世界のマッピング情報上にアンカーを設置します。これによって<strong>Unityの世界では1機目と2機目の座標軸がアンカーを中心として一致</strong>します。</p>
<h2 id="CustomMessages"><a href="#CustomMessages" class="headerlink" title="CustomMessages"></a>CustomMessages</h2><p>デバイス間で共有するデータの形式の定義と、送受信時の処理が記載されていますこれはアプリの仕様ごとに、がっつり個別実装する必要があります。<br>以下の流れで見ていきます。</p>
<ol>
<li>送受信用のデータ形式</li>
<li>送信処理について</li>
<li>受信処理について</li>
</ol>
<h3 id="1-送受信用のデータ形式"><a href="#1-送受信用のデータ形式" class="headerlink" title="1. 送受信用のデータ形式"></a>1. 送受信用のデータ形式</h3><p>TestMessageIDは<strong>デバイス間で共有（送受信）するデータを定義しています。</strong><br>オブジェクトやアクションの種類ごとに定義しています。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TestMessageID : byte</div><div class="line">&#123;</div><div class="line">    HeadTransform = MessageID.UserMessageIDStart,</div><div class="line">    UserAvatar,</div><div class="line">    UserHit,</div><div class="line">    ShootProjectile,</div><div class="line">    StageTransform,</div><div class="line">    ResetStage,</div><div class="line">    ExplodeTarget,</div><div class="line">    Max</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-送信処理について"><a href="#2-送信処理について" class="headerlink" title="2. 送信処理について"></a>2. 送信処理について</h3><p><strong>Sendメソッドは送信処理を実装しています。</strong><br>例えばSendShootProjectleはユーザーがゲーム内で発射するオブジェクトの送信処理です。<br>起点となるpositionと打ち出される方向directionをアンカーからの相対位置に変換して送信しています。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendShootProjectile</span><span class="params">(Vector3 position, Vector3 direction)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// If we are connected to a session, broadcast our head info</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.serverConnection != null &amp;&amp; <span class="keyword">this</span>.serverConnection.IsConnected())</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Create an outgoing network message to contain all the info we want to send</span></div><div class="line">        NetworkOutMessage msg = CreateMessage((byte)TestMessageID.ShootProjectile);</div><div class="line"></div><div class="line">        AppendVector3(msg, position + (direction * <span class="number">0.016f</span>));</div><div class="line">        AppendVector3(msg, direction);</div><div class="line"></div><div class="line">        <span class="comment">// Send the message as a broadcast, which will cause the server to forward it to all other users in the session.</span></div><div class="line">        <span class="keyword">this</span>.serverConnection.Broadcast(</div><div class="line">            msg,</div><div class="line">            MessagePriority.Immediate,</div><div class="line">            MessageReliability.Reliable,</div><div class="line">            MessageChannel.Avatar);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-受信処理について"><a href="#3-受信処理について" class="headerlink" title="3. 受信処理について"></a>3. 受信処理について</h3><p><strong>受信時の処理はMessageHandlersを使って登録しています。</strong><br>例えば上記で送信している発射物の受信時の処理はProjectileLauncher.csに記載されています。下記のコードで受信時イベントの登録を行っています。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomMessages.Instance.MessageHandlers[CustomMessages.TestMessageID.ShootProjectile] = <span class="keyword">this</span>.ProcessRemoteProjectile;</div></pre></td></tr></table></figure>
<p>そして、実際の受信処理は下記のProcessRemoteProjectileです。受信した発射物のアンカーからの位置情報（Position）と方向（Direction）から同じ位置にオブジェクトを生成しています。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ProcessRemoteProjectile</span><span class="params">(NetworkInMessage msg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Parse the message</span></div><div class="line">    <span class="keyword">long</span> userID = msg.ReadInt64();</div><div class="line">    Vector3 remoteProjectilePosition = CustomMessages.Instance.ReadVector3(msg);</div><div class="line"></div><div class="line">    Vector3 remoteProjectileDirection = CustomMessages.Instance.ReadVector3(msg);</div><div class="line"></div><div class="line">    Transform anchor = ImportExportAnchorManager.Instance.gameObject.transform;</div><div class="line">    ShootProjectile(anchor.TransformPoint(remoteProjectilePosition), anchor.TransformDirection(remoteProjectileDirection), userID);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>このように、<strong>現実世界上の位置情報として同期されるのはアンカーだけで、その他のオブジェクトを同期したい場合は、個別に定義して処理を記載する必要</strong>があります。</p>
<h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul>
<li>シェアリングサービスはHoloToolKit-Unityを使うことで実装できる</li>
<li>実空間に固定されているのはアンカーだけであり、アンカーの同期には時間がかかる</li>
<li>その他のアプリ内情報は個別に連携データの形式と送受信処理を実装する必要がある</li>
</ul>
<h1 id="おまけ～最新（2017-04-03時点）特ダネ情報～"><a href="#おまけ～最新（2017-04-03時点）特ダネ情報～" class="headerlink" title="おまけ～最新（2017/04/03時点）特ダネ情報～"></a>おまけ～最新（2017/04/03時点）特ダネ情報～</h1><ul>
<li><a href="https://github.com/HoloMagicians/HolographicAcademyJP" target="_blank" rel="noopener">英語弱者（筆者も）待望！Holographic Academyを日本語訳してくださっている神サイト</a></li>
<li><a href="https://github.com/the6th/StartupScene-for-Academy-240-on-HoloLens" target="_blank" rel="noopener">SharingサービスのサーバーIPをアプリ起動時に設定できるようにするプラグイン</a></li>
<li><a href="https://docs.com/xin9le/1447/sharing-deep-dive" target="_blank" rel="noopener">Hololens meetup vol2で発表されたHoloToolKitよりイケている共有サービス</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。HoloLens記事第二弾です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前回の記事は&lt;a href=&quot;https://fut
    
    </summary>
    
      <category term="VR" scheme="https://future-architect.github.io/categories/VR/"/>
    
    
      <category term="Unity" scheme="https://future-architect.github.io/tags/Unity/"/>
    
      <category term="HoloLens" scheme="https://future-architect.github.io/tags/HoloLens/"/>
    
  </entry>
  
  <entry>
    <title>Elastic{ON}-2017 レポート ~セッション編~</title>
    <link href="https://future-architect.github.io/articles/20170403/"/>
    <id>https://future-architect.github.io/articles/20170403/</id>
    <published>2017-04-03T03:00:00.000Z</published>
    <updated>2017-05-09T01:57:18.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！齋場です。<br>本記事ではElastic{ON}-2017のセッション内容を紹介します。カンファレンスの様子は<a href="https://future-architect.github.io/articles/20170331/">こちらの記事</a>で紹介しています。</p>
<p><img src="/images/20170403/photo_20170403_01.jpeg"></p>
<h1 id="セッションの紹介"><a href="#セッションの紹介" class="headerlink" title="セッションの紹介"></a>セッションの紹介</h1><p>3日間にわたり、およそ<a href="https://www.elastic.co/elasticon/conf/2017/sf" target="_blank" rel="noopener">90セッション</a>が行われました。主に、Elastic社からの新製品の紹介とユーザ事例の発表に分かれます。<br>(※以下は、主なセッションを抜粋しました。)</p>
<ul>
<li>Elasticsearch<ul>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/what-is-evolving-in-elasticsearch" target="_blank" rel="noopener">What’s Evolving in Elasticsearch?</a> (5.xシリーズでの新機能、6.0でリリース予定の機能を紹介)</li>
</ul>
</li>
<li>Kibana<ul>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/what-is-cookin-in-kibana" target="_blank" rel="noopener">What’s Cookin’ in Kibana?</a> (ヒートマップ表示対応、ログのコンテキスト表示、CSVエクスポート等の新機能の紹介)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/kibana-visualizations-deep-dive" target="_blank" rel="noopener">Kibana Visualizations Deep Dive</a> (Kibanaの新たな可視化機能の詳細紹介)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/timelion-magic-math-and-everything-in-the-middle" target="_blank" rel="noopener">Timelion: Magic, Math, and Everything in the Middle</a> (新たにKibanaに組み込まれたTimelionでの可視化、分析方法の紹介)</li>
</ul>
</li>
<li>Beats<ul>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/what-is-brewing-in-beats" target="_blank" rel="noopener">What’s Brewing in Beats</a> (Beatsモジュール機能、Heartbeatによるモニタリング機能の紹介)</li>
</ul>
</li>
<li>Logstash<ul>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/what-is-the-latest-in-logstash" target="_blank" rel="noopener">What’s the Latest in Logstash?</a> (Logstashのモニタリング機能、新たな設定方法、今後のUIについて)</li>
</ul>
</li>
<li>Elastic Cloud<ul>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/what-is-next-for-elastic-cloud" target="_blank" rel="noopener">What’s Next for Elastic Cloud</a> (Elastic Cloud Enterpriseの紹介、AWSへのデプロイについて)</li>
</ul>
</li>
<li>Machine Learning<ul>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/machine-learning-in-the-elastic-stack" target="_blank" rel="noopener">Machine Learning in the Elastic Stack</a> (新たにElastic Stackに組み込まれた”Machine Learning”の紹介)</li>
</ul>
</li>
<li>ユーザ事例<ul>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/near-real-time-retail-analytics-walmart" target="_blank" rel="noopener">Walmart</a> : リアルタイム購買分析事例 (スーパーマーケットチェーン)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/elastic-at-general-mills-the-journey-continues" target="_blank" rel="noopener">General Mills</a> : Webサイト検索精度向上事例 (食品加工企業)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/hotel-nersc-data-collect-where-data-checks-in-but-never-checks-out" target="_blank" rel="noopener">NERSC</a> : マシンルーム整備データ分析事例 (データ分析企業)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/streaming-healthcare-and-research-story-of-elasticsearch-at-ucla-health" target="_blank" rel="noopener">UCLA Health</a> : 健康に関するデータ分析事例(ヘルスケア)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/data-intelligence-with-the-elastic-stack-at-scale-nvidia-user-experience-streaming-analytics" target="_blank" rel="noopener">NVIDIAs</a> : ユーザーエクスペリエンス分析事例(ゲームのストリーミングプラットフォーム)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/products-support-commerce-and-relevancy-the-story-behind-search-on-dell-com" target="_blank" rel="noopener">Dell.com</a> : Dell.comの検索機能実装事例 (コンピュータメーカー)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/tinder-using-the-elastic-stack-to-make-connections-around-the-world" target="_blank" rel="noopener">Tinder</a> : ユーザマッチングアプリ実装事例 (マッチングアプリ)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/advancing-earth-science-with-elasticsearch-at-terradue" target="_blank" rel="noopener">Terradue</a> : 地球科学での活用事例 (地球科学研究機関)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/elasticsearch-as-a-service-at-ebay" target="_blank" rel="noopener">eBay</a> : ECサイト構築事例 (オンラインショッピングサイト)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/it-as-the-transmission-of-the-sprint-business-engine" target="_blank" rel="noopener">Sprint</a> : ビジネス情報、IT運用管理情報の可視化システム構築事例 (携帯電話事業者)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/how-workday-search-built-their-metrics-pipeline-with-the-elastic-stack" target="_blank" rel="noopener">Workday</a> : ECサイト検索事例 (薬局チェーン)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/elastic-cloud-at-fandango-how-they-shifted-deployment-model-to-scale-and-meet-their-deadlines" target="_blank" rel="noopener">Fandango</a> : Elastic Cloud活用事例 (映画関連事業)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/walgreens-journey-to-creating-an-end-to-end-search-platform" target="_blank" rel="noopener">Walgreens</a> : アプリケーション監視システム構築事例 (薬局チェーン)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/integrating-human-genetic-data-to-help-drive-drug-discovery-elastic-at-merck" target="_blank" rel="noopener">Merck</a> : 遺伝子データ分析事例 (化学品・医薬品メーカー)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/powering-uber-marketplace-real-time-data-needs-with-elasticsearch" target="_blank" rel="noopener">Uber</a> : 配車サービスアプリ実装事例 (配車アプリ)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/evolution-of-log-insight-at-mz-games" target="_blank" rel="noopener">MZ Games</a> : オンラインゲームログ分析事例 (オンラインゲーム会社)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/engine-for-key-security-platforms-at-barclays" target="_blank" rel="noopener">Barclays</a> : セキュリティ分析事例 (国際金融グループ)</li>
<li><a href="https://www.elastic.co/elasticon/conf/2017/sf/security-at-slack" target="_blank" rel="noopener">Slack</a> : セキュリティ分析事例 (チャットアプリ)</li>
<li>(and more..)</li>
</ul>
</li>
<li>その他、Elastic製品のノウハウをレクチャーしてくれるセッションも多数行われました。</li>
</ul>
<h1 id="ロードマップ-Opening-Keynote"><a href="#ロードマップ-Opening-Keynote" class="headerlink" title="ロードマップ(Opening Keynote)"></a>ロードマップ(Opening Keynote)</h1><p><a href="https://www.elastic.co/elasticon/conf/2017/sf/opening-keynote" target="_blank" rel="noopener">Opening Keynote</a>で発表された、Elastic{ON}-2017の主要トピックを紹介します！</p>
<p>以下の順番で説明していきます。</p>
<ol>
<li>New Products</li>
<li>今後リリース予定の機能紹介</li>
</ol>
<h2 id="1-New-Products"><a href="#1-New-Products" class="headerlink" title="1. New Products"></a>1. New Products</h2><p>今年の春にリリースが予定されている新製品および新機能の発表です。</p>
<h3 id="Filebeat-Modules"><a href="#Filebeat-Modules" class="headerlink" title="Filebeat Modules"></a>Filebeat Modules</h3><p>Filebeatのログファイル設定、Elasticsearchのテンプレート、Kibanaのダッシュボードがモジュール化され、ログデータの収集、分析、可視化までを自動化してくれます。まずはApache、Nginx、MySQLなどのサービスがモジュール化されるようです。</p>
<p><img src="/images/20170403/photo_20170403_02.jpeg"></p>
<p>デモでは、moduleコマンドによってKibanaで可視化するまでを行ってくれました。基本的なアクセスログ分析に加えて、アクセス元のmap表示も組み込まれていました。コマンドのmodule=xxxの部分を変えるだけで他のサービスに対応可能で、非常に使いやすそうです。</p>
<p><img src="/images/20170403/photo_20170403_03.png"></p>
<h3 id="Kibana-Time-Series-Visual-Builder"><a href="#Kibana-Time-Series-Visual-Builder" class="headerlink" title="Kibana-Time Series Visual Builder"></a>Kibana-Time Series Visual Builder</h3><p>Kibanaの時系列データの可視化機能を拡張するTime Series Visual Builderです。ヒストグラム、ゲージ、メトリック、トップN等の可視化も可能になります。</p>
<p><img src="/images/20170403/photo_20170403_04.png"></p>
<p>非常にリッチな監視ダッシュボードの作成が可能になりそうです。時系列グラフを横断的に観測できるのが、メトリクス監視の観点で嬉しいですね。<br>特に、Timelionは複雑なクエリを作るのが大変でしたが、WEB画面上でプルダウン選択にてグラフを生成するのは非常に簡単そうでした。(Grafanaのグラフ設定よりも簡単そうでした。)</p>
<p><img src="/images/20170403/photo_20170403_05.png"></p>
<h3 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h3><p>Elastic StackにPrelert社の教師なし機械学習技法が統合された”Machine Learning”。これにより、生成された予測モデルに基づきデータの異常値や外れ値を自動的に検知することが可能になります。</p>
<p><img src="/images/20170403/photo_20170403_06.jpeg"></p>
<p>デモでは、時系列データのサンプルからモデルを生成、異常値の検知が行われました。<br>Beta版では、機械学習ジョブの結果はジョブ完了後にTimelionでグラフ化する必要がありましたが、今回のデモではグラフ上でデータが読み取られて随時モデルが生成されているのが描写されていたので、非常にイメージがつきやすいですね。</p>
<p><img src="/images/20170403/photo_20170403_07.jpeg"></p>
<h3 id="Elastic-Cloud-Enterprise"><a href="#Elastic-Cloud-Enterprise" class="headerlink" title="Elastic Cloud Enterprise"></a>Elastic Cloud Enterprise</h3><p>Elasitc Cloud EnterpriseはElastic Cloudと同等なオーケストレーション、プロビジョニングをオンプレミス環境で可能とします。<br>Elastic Stackのクラスターの設定、管理、運用作業を単一のコンソールで行うことができ、もちろん、Elastic StackやX-Packは最新の機能が提供されます。</p>
<p><img src="/images/20170403/photo_20170403_08.jpeg"></p>
<p>クラスターの状態(メモリ使用率等)も一目でわかるダッシュボードで、さまざまな設定もダッシュボード上で完結していたため、管理コストが抑えられそうです。</p>
<h2 id="2-今後リリース予定の機能紹介"><a href="#2-今後リリース予定の機能紹介" class="headerlink" title="2. 今後リリース予定の機能紹介"></a>2. 今後リリース予定の機能紹介</h2><p>リリース時期は未定ですが、今後リリースが予定されている機能も発表されました。</p>
<h3 id="Elasticsearch-SQL"><a href="#Elasticsearch-SQL" class="headerlink" title="Elasticsearch SQL"></a>Elasticsearch SQL</h3><p>SQLのインターフェースでデータの検索が可能になります。<br>デモでは基本的なクエリを実行してくれました。基本的なFunctionも使用可能で、平均値等の算出もデモしてくれました。</p>
<p><img src="/images/20170403/photo_20170403_09.jpeg"><br>(show tablesとSELECT文を実行)</p>
<p>ODBCでの接続も可能になり、DbVisualizer(接続クライアントソフト)での接続も行っていました。</p>
<p><img src="/images/20170403/photo_20170403_10.png"></p>
<p>ElasticsearchにてSQLが標準で使用可能になることで、利用用途の幅も広がりますね。</p>
<h3 id="Kibana-Canvas"><a href="#Kibana-Canvas" class="headerlink" title="Kibana Canvas"></a>Kibana Canvas</h3><p>ボランティアのモチベーションについての円グラフが並ぶプレゼンが始まりました。</p>
<p><img src="/images/20170403/photo_20170403_11.jpeg"></p>
<p>実はこれはKibanaの新機能”Kibana Canvas” Kibanaの画面上で、プレゼンテーションが作成できる機能です。</p>
<p><img src="/images/20170403/photo_20170403_12.png"></p>
<p>Kibanaの画面からだけでリアルタイムのデータによるプレゼンテーション、インフォグラフィックスの作成が可能になります。十数個のオブジェクトが使用でき、自由に移動・回転ができるので表現力も申し分なさそうです。何より見た目がキレイ!<br>これがあるとレポート作成のためだけのExcel、PowerPointの作業は必要なくなりますし、今までは考えられなかったリアルタイムに反映されるデータでのプレゼンテーションが可能になりますね。</p>
<h1 id="最後に-セキュリティ用途としてのElastic-Stackについて"><a href="#最後に-セキュリティ用途としてのElastic-Stackについて" class="headerlink" title="最後に (セキュリティ用途としてのElastic Stackについて)"></a>最後に (セキュリティ用途としてのElastic Stackについて)</h1><p>ユーザ事例は、やはりサーチの分野の事例が多い中、ログ解析、セキュリティ(異常検知・分析)といった分野の事例も目立ちました。</p>
<ul>
<li>Barclays(国際金融業)、USAA(アメリカ軍関連の金融業)等でのセキュリティ分析の事例もあり、ミッションクリティカルな場面でも利用されています。</li>
<li>ArcSightとElastic Stackの連携についてのセッションでは以下のElastic Stackの要素が、SIEM<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>としての要件にマッチしていることが述べられていました。<ul>
<li>容易にスケールが可能</li>
<li>リアルタイムに近い分析が可能なパフォーマンス</li>
<li>REST APIによる拡張性</li>
</ul>
</li>
<li>また、新たに発表された”Machine Learning”もセキュリティ用途の追い風となりそうです。<ul>
<li>メトリクスの異常検知から、マルウェアに感染しているかを検査、普段発生しないログメッセージを検知し、インシデントへの対策を行う等の利用が考えられます。</li>
<li>(Machine Learning Beta版の検証をしてみましたが、ユーザは異常検知のための閾値、ロジック、パラメータを意識せず、データを読み込ませるのみで容易に実行可能でした。)</li>
</ul>
</li>
<li>Demoコーナーでも、機械学習を用いたエンドポイントセキュリティ対策を行っており、Elastic社としても力を入れているのが分かりました。</li>
</ul>
<p>上記のように、Elastic Stackのセキュリティ分野への応用は今後活発になることが予想されます。弊社としても、Elastic Stackの新機能を用いて新しいソリューションを提案できるように検討中です。</p>
<p>Elastic{ON}-2017のセッション内容を紹介させていただきました。<br>本記事で、Elastic{ON}参加レポートは完結です。ありがとうございました。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">SIEM: さまざまなネットワーク機器やサーバーから、多様かつ膨大なログを収集して一元管理し、それらを基に不正を検知する新しいセキュリティシステムのこと</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは！齋場です。&lt;br&gt;本記事ではElastic{ON}-2017のセッション内容を紹介します。カンファレンスの様子は
    
    </summary>
    
      <category term="Event" scheme="https://future-architect.github.io/categories/Event/"/>
    
    
      <category term="Elastic-Stack" scheme="https://future-architect.github.io/tags/Elastic-Stack/"/>
    
  </entry>
  
  <entry>
    <title>Elastic{ON}-2017 レポート ~概要編~</title>
    <link href="https://future-architect.github.io/articles/20170331/"/>
    <id>https://future-architect.github.io/articles/20170331/</id>
    <published>2017-03-31T01:57:43.000Z</published>
    <updated>2017-05-09T01:57:18.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！齋場です。</p>
<p>今回、サンフランシスコで行われた<strong><a href="https://www.elastic.co/elasticon/conf/2017/sf" target="_blank" rel="noopener">Elastic{ON}-2017</a></strong> に参加してきましたのでレポートさせていただきます！</p>
<p>※他サンフランシスコ出張報告の記事は以下</p>
<ul>
<li><a href="https://future-architect.github.io/articles/20170321/">スタンフォード大学で食べたピーナッツサラダは、格別だった。。</a></li>
<li><a href="https://future-architect.github.io/articles/20170322/">シリコンバレー巡礼</a></li>
</ul>
<h1 id="Elastic-ON-とは"><a href="#Elastic-ON-とは" class="headerlink" title="Elastic{ON}とは"></a>Elastic{ON}とは</h1><p>Elastic社主催のユーザカンファレンスです。2015年が初回で開催されてから、今回で3回目になります。Elastic Stackのプロダクトのセッション&amp;デモがメインで、ユーザ企業のセッションも多く行われます。<br>Elasticの最新動向をフォローするために、我々もこのサンフランシスコの地へやってきました。</p>
<p>本記事では主にElastic{ON}のカンファレンスの様子を紹介します。<br>セッション内容については、次回の記事に記載します。</p>
<h1 id="カンファレンスの様子紹介"><a href="#カンファレンスの様子紹介" class="headerlink" title="カンファレンスの様子紹介"></a>カンファレンスの様子紹介</h1><h2 id="会場到着"><a href="#会場到着" class="headerlink" title="会場到着"></a>会場到着</h2><p>会場はPier48という、サンフランシスコベイエリアに位置するイベントブースです。</p>
<p><img src="/images/20170330/photo_20170330_01.jpeg"></p>
<p>ちなみに会場近くはこんな感じです。隣にAT&amp;Tのスタジアムが見えます。</p>
<p><img src="/images/20170330/photo_20170330_02.jpeg"></p>
<p>受付の様子です。日本人の方もちらほらと<br>今回、日本から参加された方はおよそ50人程度とのこと。</p>
<p><img src="/images/20170330/photo_20170330_03.jpeg"></p>
<h2 id="AMA-Ask-Me-Anything"><a href="#AMA-Ask-Me-Anything" class="headerlink" title="AMA (Ask Me Anything)"></a>AMA (Ask Me Anything)</h2><p>カンファレンス開催時に1日中Elasticのサポートエンジニア&amp;開発エンジニアに対してElasticに関する質問ができるコーナーです。<br>私もカンファレンス中に検証中の機能がうまく動かなかったため、PC片手に質問しに言ったら速攻で解決してくれました。</p>
<p><img src="/images/20170330/photo_20170330_04.jpeg"></p>
<p>机がホワイトボードになっているため、議論もスムーズに進みます。</p>
<p><img src="/images/20170330/photo_20170330_05.jpeg"></p>
<h2 id="Seating-Area"><a href="#Seating-Area" class="headerlink" title="Seating Area"></a>Seating Area</h2><p>会場には電源完備のテーブルがたくさん用意されており、参加者はそこで作業&amp;食事をすることも可能です。<br>私が座っていた隣では、Kibanaの画面を見ながら白熱に議論しているエンジニアの方もいました。</p>
<p><img src="/images/20170330/photo_20170330_06.jpeg"></p>
<h2 id="Food-Truck"><a href="#Food-Truck" class="headerlink" title="Food Truck"></a>Food Truck</h2><p>朝・昼食時には隣の駐車場に、サンフランシスコっ子も認めるおしゃれなFood Truckが集結してくれます。</p>
<p><img src="/images/20170330/photo_20170330_07.jpeg"></p>
<p>私はワッフルをいただきました。</p>
<p><img src="/images/20170330/photo_20170330_08.jpeg"></p>
<h1 id="Sponsorブース"><a href="#Sponsorブース" class="headerlink" title="Sponsorブース"></a>Sponsorブース</h1><p>22の企業が参加しており、多くはモニタリングツールや機械学習関連のサービスを紹介していました。</p>
<p><img src="/images/20170330/photo_20170330_09.jpeg"></p>
<p><img src="/images/20170330/photo_20170330_10.jpeg"></p>
<p>2016年9月、Elastic社が買収したPrelert社<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>も前回のElastic{ON}にスポンサーとしてブース展示をしていたそうです。Prelert社は教師なし機械学習技法によるデータセットの異常発見を自動化する技術を持っており、Elastic社は2016年秋この機能をElastic Stackへ統合しました。<br>今回参加していたスポンサー企業の中には、Elasticの競合ともなりえるサービスを提供する企業もありました。このことをElastic社の人に聞いてみたところ、Prelert社と同様、良い技術を持った企業は共にビジネスを開拓できるか常に検討しているそうです。</p>
<h1 id="Demoブース"><a href="#Demoブース" class="headerlink" title="Demoブース"></a>Demoブース</h1><p>Elastic Stackのデモブースです。<br>直接対話できるので最新プロダクトの使い方も丁寧にレクチャーしてくれます。</p>
<p><img src="/images/20170330/photo_20170330_11.jpeg"></p>
<p>デモブースは以下4つのテーマで行われていました。</p>
<ol>
<li><strong>Search &amp; Analytics</strong><ul>
<li>Eコマースの分析を例にして、ビジネス分析を実施</li>
</ul>
</li>
<li><strong>Security Analytics</strong><ul>
<li>ネットワークのアクセスパターンをKibanaの”Graph”で可視化し、感染した端末を検知、Logstashで最新化したブラックリストで接続元IPチェック</li>
</ul>
</li>
<li><strong>Operational Analytics</strong><ul>
<li>Elastic{ON}の会場のデータをリアルタイムに可視化<ol>
<li>どのセッションが人気？</li>
<li>ランチブースの待ち時間は？</li>
</ol>
</li>
</ul>
</li>
<li><strong>Elastic Cloud Enterprise</strong><ul>
<li>実際のコンソール画面で、クラスターのスケールアップ・スケールアウトがいかに簡単にできるかをデモ</li>
</ul>
</li>
</ol>
<h1 id="Opening-Keynote"><a href="#Opening-Keynote" class="headerlink" title="Opening Keynote"></a>Opening Keynote</h1><p>Opening Keynoteは、ダンスから開始！<br>ダンサーの四肢にはセンサーが付けられ、ダンサーの動きはリアルタイム(グラフを見る限り1sec以内)でKibanaによって可視化されています。</p>
<p><img src="/images/20170330/photo_20170330_12.jpeg"></p>
<h1 id="その他紹介"><a href="#その他紹介" class="headerlink" title="その他紹介"></a>その他紹介</h1><h2 id="Conference-T-Shirt"><a href="#Conference-T-Shirt" class="headerlink" title="Conference T-Shirt"></a>Conference T-Shirt</h2><p>カンファレンスTシャツのプレゼントですが、なんと工房がありました。その場でプリントしてくれます。工房スペースもなかなか広い。</p>
<p><img src="/images/20170330/photo_20170330_13.jpeg"></p>
<p>まずは、サイズを選んで…(男女別で色は決められていました)</p>
<p><img src="/images/20170330/photo_20170330_14.jpeg"></p>
<p>4つの柄から好きな柄を選びます。</p>
<p><img src="/images/20170330/photo_20170330_15.jpeg"></p>
<p>私はHeartBeatの柄をチョイス!<br>最初からプリントしたものを配布した方が明らかに効率的ですが、わざわざスペース・機材・人員を用意してまでオーダーメードTシャツをプレゼントしてくれるのはうれしいですね。ユーザエクスペリエンスを重要視しているElastic社らしいエンターテイメントだと感じました。</p>
<p><img src="/images/20170330/photo_20170330_16.jpeg"></p>
<h2 id="Elastic-Heart"><a href="#Elastic-Heart" class="headerlink" title="Elastic{Heart}"></a>Elastic{Heart}</h2><p>手のひらの脈をリアルタイムにグラフに描写する展示も行われていました。ArduinoとRaspberry Piにより測定したデータをKibanaによって可視化していました。</p>
<p><img src="/images/20170330/photo_20170330_17.jpeg"></p>
<p>Keynoteでのダンサーの動きの可視化も同様、今後はIoT x Elastic Stackの組み合わせも活発になりそうです。</p>
<h2 id="ゲームコーナー"><a href="#ゲームコーナー" class="headerlink" title="ゲームコーナー"></a>ゲームコーナー</h2><p>なんと会場裏にはアーケードゲームコーナが！終始人が絶えませんでした。プレイする方も結構本気。</p>
<p><img src="/images/20170330/photo_20170330_18.jpeg"></p>
<p>Tシャツ工房と同様スペースも大きく、Elastic社の遊び心が垣間見えますね。</p>
<h2 id="パーティ"><a href="#パーティ" class="headerlink" title="パーティ"></a>パーティ</h2><p>パーティ会場は、カリフォルニア科学博物館を貸切です。<br>博物館内の植物園見学、地震シミュレーターをはじめとした展示をお酒と食事とともに楽しめました。</p>
<p><img src="/images/20170330/photo_20170330_19.jpeg"></p>
<p>博物館中央のホールはDJスペースに様変わり。エンジニアたちが踊り明かす姿はなかなかの見ものでした。</p>
<p><img src="/images/20170330/photo_20170330_20.jpeg"></p>
<h2 id="Elastic-Cause-Awards"><a href="#Elastic-Cause-Awards" class="headerlink" title="Elastic Cause Awards"></a>Elastic Cause Awards</h2><p>Elastic Stackを使い現実の社会問題を解決している非営利団体のノミネートも行われました。今回ノミネートされていたのは以下の3つです。</p>
<ol>
<li>人身売買と奴隷取引にテクノロジーで立ち向かった <strong>“IST Research”</strong><ul>
<li>危険に晒されている人々を特定し、意思疎通することを可能にするシステムを構築<br><img src="/images/20170330/photo_20170330_21.jpeg"></li>
</ul>
</li>
<li>National School Security Databaseを用いて校内暴力の低減に貢献した <strong>“NoSchoolViolence.org”</strong><ul>
<li>学生の挙動パターンから、リスクを洗い出すことを可能にしたシステムを構築<br><img src="/images/20170330/photo_20170330_22.jpeg"></li>
</ul>
</li>
<li>エボラ熱に対応するコールセンターと健康状態監視アプリケーションを開発した <strong>“eHealth Africa”</strong><ul>
<li>リアルタイムで疾病の流行傾向を分析できるシステムを構築<br><img src="/images/20170330/photo_20170330_23.jpeg"></li>
</ul>
</li>
</ol>
<p>Elasticの<a href="https://www.elastic.co/blog/elastic-heart-the-center-of-the-elastic-cause-awards" target="_blank" rel="noopener">カルチャー</a>に則り、Elastic Stackを用いてより良い未来に向けた進化と貢献が認められたプロジェクトを選定しているそうです。<br>自分たちのProductが社会問題の解決に役に立っていることに非常に誇りを持っていて、素敵な企業文化であると感じました。私もますますElasticのファンになりました！</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>本記事では、Elastic{ON}のカンファレンスの様子をリポートさせていただきました。<br>セッションの内容は、次回の記事にて紹介しています。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.jcnnewswire.com/pressrelease/32377/3" target="_blank" rel="noopener">Elastic、行動分析大手のPrelertを買収</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは！齋場です。&lt;/p&gt;
&lt;p&gt;今回、サンフランシスコで行われた&lt;strong&gt;&lt;a href=&quot;https://ww
    
    </summary>
    
      <category term="Event" scheme="https://future-architect.github.io/categories/Event/"/>
    
    
      <category term="Elastic-Stack" scheme="https://future-architect.github.io/tags/Elastic-Stack/"/>
    
  </entry>
  
  <entry>
    <title>オープンソースカンファレンス2017 Tokyo/Spring登壇＆ブース出展レポート</title>
    <link href="https://future-architect.github.io/articles/20170327/"/>
    <id>https://future-architect.github.io/articles/20170327/</id>
    <published>2017-03-27T03:00:00.000Z</published>
    <updated>2017-05-09T01:57:18.441Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20170327/photo_20170327_00.jpeg"></p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。星です。</p>
<p>前回の<a href="https://future-architect.github.io/articles/20170323/">「ヒカ☆ラボ初参戦！AWS x IoTで若手エンジニアが登壇してきました」</a>に引き続き、3/10〜11の2日間、オープンソースカンファレンス（OSC）2017 Tokyo/Springにて、セミナー登壇、ブース出展をしてきましたので、今回はそのレポートをお届けしたいと思います！！</p>
<p><strong>オープンソースカンファレンス(OSC）とは？</strong></p>
<blockquote>
<p>オープンソースカンファレンスとは、2004年からスタートし、60回以上の開催をしているオープンソースの今を伝えるイベントです。<br>東京だけでなく、北は北海道、南は沖縄まで全国規模で開催されており、オープンソースのコミュニティや協賛企業、後援団体による、オープンソース関連のセミナーや展示などをお楽しみ頂けます。<br>普段オープンソースに触れている方、オープンソースに興味がある方、これからオープンソースを使ってみたい方、オープンソースの最新情報を得たい方、コミュニティに参加したい方、コミュニティに既に参加している方。大学や学校教員や学生さんにも多く参加いただいています。<br>出展者、来場者ともに業界で活躍されている方が多く関わっていますので、有名人やあなたが読んでいる書籍の著者にばったり会えるかもしれません。 </p>
</blockquote>
<h1 id="1日目-ブース設営"><a href="#1日目-ブース設営" class="headerlink" title="1日目 - ブース設営"></a>1日目 - ブース設営</h1><p>会場は明星大学です。11時からのブースの展示開始に向けて、9:30頃には中央大学・明星大学駅に有志で集合して会場に向かいました。好天に恵まれ、普段の喧騒とは打って変わって、空気のおいしさも感じます。</p>
<p><img src="/images/20170327/photo_20170327_01.jpeg"></p>
<p>会場に到着して、まずは202号室の下見。そう、12時からのLT大会と我々が登壇する14時からのセミナー会場がこの202号室なんですね。もちろん、プレゼンは教壇にて行うわけですから、ちょっとした先生気分になりそうだなぁと思いながら、展示ブースへと向かいました。</p>
<p><img src="/images/20170327/photo_20170327_02.jpeg"></p>
<p>会社から持ち込んだタペストリーをテーブルの後ろに配置しました。下図は新人の小松が真剣な表情でモニタを設置する様子です。<br>実はモニタの電源ケーブルを忘れるという大失敗をしたのですが、OSC主催者の宮原徹さんにモニタごとお借りして、午後から参加するメンバに電源ケーブルを持ってきてもらい、何とか事なきを得ました。</p>
<p><img src="/images/20170327/photo_20170327_03.jpeg"></p>
<p>そして、ブースが完成です！！まずは記念写真。会社にいるメンバに写真をシェアしたら、若さが足りない・・・と指摘を受けましたが、抜群の安定感と前向きに捉えつつ。。。</p>
<p><img src="/images/20170327/photo_20170327_04.jpeg"></p>
<p>今回展示しているVuls、uroboroSQL、Urushiのステッカーとフューチャーのロゴ入りボールペンも用意して、あとは来場者の皆さんを待つだけですね。</p>
<p><img src="/images/20170327/photo_20170327_05.jpeg"></p>
<h1 id="1日目-ブース大盛況！！"><a href="#1日目-ブース大盛況！！" class="headerlink" title="1日目 - ブース大盛況！！"></a>1日目 - ブース大盛況！！</h1><p>お昼を前にして、だんだんと来場者数が増えてきました。<br>社会人、学生だけでなく海外からの方達も来られて、ブースは大盛況です！！</p>
<p><img src="/images/20170327/photo_20170327_06.jpeg"></p>
<p>OSC初心者のための展示ツアーでは、OSC宮原さんに当社のブースに立ち寄って頂きました。またVuls開発者の神戸も駆けつけ、学生の方に説明もしていました。</p>
<p>そんなこんなで、当社ブースでは、常時3〜5名が来場者の皆さんに説明しているという大忙しの状況に！！</p>
<p><img src="/images/20170327/photo_20170327_07.jpeg"></p>
<h1 id="1日目-ライトニングトーク＆セミナー登壇"><a href="#1日目-ライトニングトーク＆セミナー登壇" class="headerlink" title="1日目 - ライトニングトーク＆セミナー登壇"></a>1日目 - ライトニングトーク＆セミナー登壇</h1><p>いよいよ午後からは当社からのプレゼンが始まります。</p>
<h2 id="ライトニングトーク：Vulsで始めよう！DevSecOps-by-牛田"><a href="#ライトニングトーク：Vulsで始めよう！DevSecOps-by-牛田" class="headerlink" title="ライトニングトーク：Vulsで始めよう！DevSecOps! by 牛田"></a>ライトニングトーク：Vulsで始めよう！DevSecOps! by 牛田</h2><p>まずは12時のライトニングトークに牛田が登場しました。</p>
<p>自分の出番になると上着を脱いて、Vuls Tシャツを颯爽と見せながら登壇しました！！</p>
<p><img src="/images/20170327/photo_20170327_08.jpeg"></p>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/blSxOd7FDgMGKZ" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<h2 id="No-1-Vulsをバズらせるためにやったこと-by-神戸"><a href="#No-1-Vulsをバズらせるためにやったこと-by-神戸" class="headerlink" title="No.1 Vulsをバズらせるためにやったこと by 神戸"></a>No.1 Vulsをバズらせるためにやったこと by 神戸</h2><p>そして、14時からの当社セミナーは、3本立ての構成にしました。</p>
<p>私が3分ほど会社紹介をさせて頂いた後、まずは神戸が登壇しました。<br>神戸がついに発表した「バズらせFlowChart」はきっと今後のOSS開発者の役に立つはず！？</p>
<p><img src="/images/20170327/photo_20170327_09.jpeg"></p>
<h3 id="発表資料-OSC2017-Tokyo-Spring-Vulsをバズらせるためにやったこと"><a href="#発表資料-OSC2017-Tokyo-Spring-Vulsをバズらせるためにやったこと" class="headerlink" title="発表資料:OSC2017 Tokyo/Spring Vulsをバズらせるためにやったこと"></a><a href="http://qiita.com/kotakanbe@github/items/e7678773adcdb80ae7cd" target="_blank" rel="noopener">発表資料:OSC2017 Tokyo/Spring Vulsをバズらせるためにやったこと</a></h3><h2 id="No-2-uroboroSQL〜エンプラで培った秘伝のSQL開発手法をOSS化！〜-by-星"><a href="#No-2-uroboroSQL〜エンプラで培った秘伝のSQL開発手法をOSS化！〜-by-星" class="headerlink" title="No.2 uroboroSQL〜エンプラで培った秘伝のSQL開発手法をOSS化！〜 by 星"></a>No.2 uroboroSQL〜エンプラで培った秘伝のSQL開発手法をOSS化！〜 by 星</h2><p>続いて、私がOSCで初公開となったuroboroSQLの紹介をしました。<br>できるだけ面白く・・・をコンセプトにプレゼンしたのですが、あまり笑いを取れず（苦笑）</p>
<p>とはいえ、これまでのJavaのO/Rマッパーとは一味違うuroboroSQLには興味を持って頂けたようでした。</p>
<p><img src="/images/20170327/photo_20170327_10.jpeg"></p>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/bOHqva5K4q4X7R" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

<h2 id="No-3-エンプラでSPAで最新UI！？-よし、作ってOSS化！-by-平川"><a href="#No-3-エンプラでSPAで最新UI！？-よし、作ってOSS化！-by-平川" class="headerlink" title="No.3 エンプラでSPAで最新UI！？ よし、作ってOSS化！ by 平川"></a>No.3 エンプラでSPAで最新UI！？ よし、作ってOSS化！ by 平川</h2><p>最後は、平川がWeb component Frameworkの「Urushi」を発表しました。<br>数多のJSフレームワークが存在する中、なぜ自身で作るという決断をしたのか、共感して頂いた方も多かったようですね。</p>
<p><img src="/images/20170327/photo_20170327_11.jpeg"></p>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/8g7C5jv0aWXKAl" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

<h1 id="1日目終了、そして、懇親会"><a href="#1日目終了、そして、懇親会" class="headerlink" title="1日目終了、そして、懇親会"></a>1日目終了、そして、懇親会</h1><p>セミナー終了後も、ブースは人が途切れることなく賑わいを見せました。<br>そして、夕方、無事1日目のブース出展が完了し、いよいよOSC恒例の出展者・参加者が大集合する懇親会が始まります。</p>
<p>懇親会が始まる前の写真です。丸一日、全力で来場者の皆さんに説明をした当社メンバはちょっとぐったりしていますね！！</p>
<p><img src="/images/20170327/photo_20170327_12.jpeg"></p>
<p>しかし、お腹は減ったし、やりきった感もあり酒も飲みたい・・・ということで、乾杯です！！</p>
<p><img src="/images/20170327/photo_20170327_13.jpeg"></p>
<p>その後、色々なOSSユーザー会の方々や企業の方々と名刺交換させて頂きつつ、楽しい話に花を咲かせました。</p>
<p>懇親会からの帰り道、記念写真を後ろから歩いてきた方にお願いして取って頂きました！！<br>OSC参加者はみんなフランクで良いですね。</p>
<p><img src="/images/20170327/photo_20170327_14.jpeg"></p>
<h1 id="2日目＆まとめ"><a href="#2日目＆まとめ" class="headerlink" title="2日目＆まとめ"></a>2日目＆まとめ</h1><p>2日目はセミナーがなかったので、ブース出展のみでしたが、やはり盛況でした。</p>
<p>1日目は来場者の傾向として、インフラエンジニアが多かった印象でしたが、2日目は休日ということもあり、開発者の方や当社の近くのビルにお勤めの方もいて、バラエティに富んだバッググラウンドの方が多かったように思います。</p>
<p>ノベルティやパンフレットが足りなくなって、会社から急遽送ってもらったり、近くのコンビニへコピーに行ったりと、様々な課題はありましたが、総じて出展者として参加してよかったなと思います。</p>
<p>振り返ってみると、当社メンバも疲れはしましたが、楽しかったし、なんだか結束力が増したような、そんな充実感も得られたイベントになったと感じています。</p>
<p>今年、沖縄や名古屋など、OSCは各地で開催されますので、また参加したいと思います！！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li>オープンソースカンファレンス2017 Tokyo/Spring - オープンソースの文化祭！<ul>
<li><a href="https://www.ospn.jp/osc2017-spring/" target="_blank" rel="noopener">https://www.ospn.jp/osc2017-spring/</a></li>
</ul>
</li>
<li>3/10(金)タイムテーブル<ul>
<li><a href="https://www.ospn.jp/osc2017-spring/modules/eventrsv/?id=1&amp;noform=1" target="_blank" rel="noopener">https://www.ospn.jp/osc2017-spring/modules/eventrsv/?id=1&amp;noform=1</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/20170327/photo_20170327_00.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんに
    
    </summary>
    
      <category term="Event" scheme="https://future-architect.github.io/categories/Event/"/>
    
    
      <category term="Conference" scheme="https://future-architect.github.io/tags/Conference/"/>
    
      <category term="vuls" scheme="https://future-architect.github.io/tags/vuls/"/>
    
      <category term="UI/UX" scheme="https://future-architect.github.io/tags/UI-UX/"/>
    
      <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
      <category term="uroboroSQL" scheme="https://future-architect.github.io/tags/uroboroSQL/"/>
    
      <category term="Urushi" scheme="https://future-architect.github.io/tags/Urushi/"/>
    
  </entry>
  
  <entry>
    <title>ヒカ☆ラボ初参戦！AWS x IoTで若手エンジニアが登壇してきました</title>
    <link href="https://future-architect.github.io/articles/20170323/"/>
    <id>https://future-architect.github.io/articles/20170323/</id>
    <published>2017-03-23T03:00:00.000Z</published>
    <updated>2017-05-09T01:57:18.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>皆さん、<a href="https://teratail.com/" target="_blank" rel="noopener">teratail</a>使ってますか？</p>
<p>エンジニアの方にはお馴染みのプログラミング系Q＆Aサイトですが、実は3/16より「teratail Report」というのができたのはご存知でしょうか？</p>
<p><img src="/images/20170323/photo_20170323_01.jpeg"></p>
<p>そう、実はこのレポート第１弾に登場しているのが、弊社のエンジニア、須田と武田です！！</p>
<h1 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h1><p>昨年10月、teratailを運営するレバレジーズさんとお話をする機会があり、ヒカ☆ラボというイベントを運営されていることを伺い、フューチャーさんもどうですか？とお誘いを受けました。</p>
<p>まだ誰が登壇する？どんなトピックにするかも決まってませんでしたが、「やります！！」と勢いでお伝えして、結局今年に入ってから急ピッチで準備を開始しました。</p>
<p>当初は参加者枠は50名にしておこう、参加希望者が少なかった悲しい・・・なんて心配もしていましたが、最終的には270名を超える方にお申込みをして頂くことができました。</p>
<h1 id="当日の模様"><a href="#当日の模様" class="headerlink" title="当日の模様"></a>当日の模様</h1><p>当日のタイムテーブルは下表の通りです。</p>
<table>
<thead>
<tr>
<th>時間</th>
<th>講演内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>19:30～19:35</td>
<td>弊社から挨拶</td>
</tr>
<tr>
<td>19:35～19:40</td>
<td>What’s　FUTURE？</td>
</tr>
<tr>
<td>19:40～20:05</td>
<td>スマートファクトリーを支えるIoTインフラをつくった話</td>
</tr>
<tr>
<td>20:05～20:30</td>
<td>AWSマネージドサービスをフル活用したヘルスケアIoTプラットフォーム</td>
</tr>
<tr>
<td>20:30～20:45</td>
<td>質疑応答</td>
</tr>
<tr>
<td>20:45～21:30</td>
<td>懇親会（ドリンクとお菓子をご用意しています）</td>
</tr>
</tbody>
</table>
<p>当日はあいにくの雨で、参加者の足も遠のくでは？とも思いましたが、多くの方に参加して頂くことができました。</p>
<p>登壇前の二人。非常にリラックスしていますね。</p>
<p><img src="/images/20170323/photo_20170323_02.jpeg"></p>
<p>レバレジーズさんより、フューチャーの場合は会社説明をやったほうがいいですよとアドバイスを頂きましたので、私が「What’s FUTURE？」と題して、5分ほど会社紹介をしてきました。二人の登壇前に場を和ますべく。。。</p>
<p><img src="/images/20170323/photo_20170323_03.jpeg"></p>
<p>まずは、「スマートファクトリーを支えるIoTインフラをつくった話」。須田の登壇です。</p>
<p><img src="/images/20170323/photo_20170323_04.jpeg"></p>
<p>続いて、武田が登壇。お題は「AWSマネージドサービスをフル活用したヘルスケアIoTプラットフォーム」。</p>
<p><img src="/images/20170323/photo_20170323_05.jpeg"></p>
<p>登壇を終えて、質疑応答に笑顔で応える二人。</p>
<p><img src="/images/20170323/photo_20170323_06.jpeg"></p>
<p>この後、懇親会も大いに盛り上がりました！！</p>
<h1 id="イベントレポート"><a href="#イベントレポート" class="headerlink" title="イベントレポート"></a>イベントレポート</h1><p>いつもならこのブログで詳細を語るのですが、すでにteratail Reportで詳しく伝えられてますので、こちらをご覧ください！！</p>
<p><strong>AWSによる大規模IoTプラットフォーム構築の裏側に迫る！</strong><br><a href="https://teratail.com/report/1" target="_blank" rel="noopener">https://teratail.com/report/1</a></p>
<h1 id="発表資料"><a href="#発表資料" class="headerlink" title="発表資料"></a>発表資料</h1><h2 id="スマートファクトリーを支えるIoTインフラをつくった話"><a href="#スマートファクトリーを支えるIoTインフラをつくった話" class="headerlink" title="スマートファクトリーを支えるIoTインフラをつくった話"></a>スマートファクトリーを支えるIoTインフラをつくった話</h2><iframe src="//www.slideshare.net/slideshow/embed_code/key/xq03ILeKwqoMS" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

<h2 id="AWSマネージドサービスをフル活用したヘルスケアIoTプラットフォーム"><a href="#AWSマネージドサービスをフル活用したヘルスケアIoTプラットフォーム" class="headerlink" title="AWSマネージドサービスをフル活用したヘルスケアIoTプラットフォーム"></a>AWSマネージドサービスをフル活用したヘルスケアIoTプラットフォーム</h2><iframe src="//www.slideshare.net/slideshow/embed_code/key/CohUlWFppkQqoA" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;皆さん、&lt;a href=&quot;https://teratail.com/&quot; target=&quot;_blank&quot; rel=&quot;noope
    
    </summary>
    
      <category term="BigData" scheme="https://future-architect.github.io/categories/BigData/"/>
    
    
      <category term="Conference" scheme="https://future-architect.github.io/tags/Conference/"/>
    
      <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>ぶらりシリコンバレー巡礼</title>
    <link href="https://future-architect.github.io/articles/20170322/"/>
    <id>https://future-architect.github.io/articles/20170322/</id>
    <published>2017-03-22T03:00:00.000Z</published>
    <updated>2017-05-09T01:57:18.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは♪<br>またまた、ゆるふわエンジニアの前原ですヽ(*ﾟдﾟ)ノ</p>
<p><a href="/articles/20170321/">前回の記事（スタンフォード大学で食べたピーナッツサラダは、格別だった♥）</a>ではスタンフォード大学をいろいろ見て回りました。</p>
<p>次は、シリコンバレーにひしめくIT企業の巨人たちを見に行きたいと思います！</p>
<p>今回も弊社CTO斎藤洋平さん（ここから洋平さんで表現しますー）に案内してもらいます。</p>
<p>こんな順番で巡礼します！</p>
<ol>
<li>シリコンバレー発祥の地</li>
<li>Google</li>
<li>facebook</li>
<li>Intel</li>
<li>Apple</li>
<li>Elastic</li>
</ol>
<h1 id="1-シリコンバレー発祥の地"><a href="#1-シリコンバレー発祥の地" class="headerlink" title="1. シリコンバレー発祥の地"></a>1. シリコンバレー発祥の地</h1><p>シリコンバレー巡礼のスタート地点は、やはりここからですね。<br>世界有数のIT企業がひしめいているシリコンバレー。<br>そして、ここがシリコンバレー発祥の地といわれる<strong>「ヒューレッド・パッカードのガレージ」</strong></p>
<p><img src="/images/20170322/photo_20170322_01.jpeg"></p>
<p><img src="/images/20170322/photo_20170322_02.jpeg"></p>
<p><strong>「The Birthplace of Silicon Valley」</strong><br>カルフォルニア州パロ アルト市のアディソン街 367 番地のガレージが「シリコン バレー発祥の地」として歴史的建造物に指定され、カルフォルニア州によって記念碑が築かれています。</p>
<p><img src="/images/20170322/photo_20170322_03.jpeg"></p>
<h1 id="2-Google"><a href="#2-Google" class="headerlink" title="2. Google"></a>2. Google</h1><p>Google本社に来ましたーーー<br>とにかく広い！！<br>どこからどこまでが敷地かわからないぐらい広い！</p>
<p>てことで、とりあえず記念撮影！！</p>
<p><img src="/images/20170322/photo_20170322_04.jpeg"></p>
<p>Googleには所々に自転車が置いてあり、社員でなくとも利用することができます。<br>それだけ敷地が広いってことですね。</p>
<p><img src="/images/20170322/photo_20170322_05.jpeg"></p>
<h1 id="3-facebook"><a href="#3-facebook" class="headerlink" title="3. facebook"></a>3. facebook</h1><p>次は、facebookに向かうべく車で移動します。</p>
<p>その途中にIN-N-OUTというハンバーガー屋さんがありました。<br>カリフォルニア州などで展開しているチェーンストアです。<br>美味しいとのことですが、今回は食べられませんでした…</p>
<p>ちなみに、過去に4時間限定で原宿にオープンしたらしいです。</p>
<p><img src="/images/20170322/photo_20170322_06.jpeg"></p>
<p>ということで、facebook本社に着きました。<br>facebookは、オリジナル番地を取得しており、住所が<strong>「1 Hacker Way」</strong>です。</p>
<p><strong>Hacker Way：速く・大胆に・オープンであれ</strong></p>
<p><img src="/images/20170322/photo_20170322_07.jpeg"></p>
<p>元々ここの敷地はSun Microsystemsで、そこにfacebookが移転しました。<br>なので、facebookの看板裏には、Sun Microsystemsの文字が・・・。</p>
<p><img src="/images/20170322/photo_20170322_08.jpeg"></p>
<p>ちなみに、facebook内にもGoogle同様に自転車があるのですが、社員しか乗れない模様…。</p>
<h1 id="4-Intel"><a href="#4-Intel" class="headerlink" title="4. Intel"></a>4. Intel</h1><p>世界最大の半導体メーカのIntel Museumに来ました。<br>ここでは、Intelの歴史、マイクロプロセッサなどのチップをどう作っているかなどが展示されています。<br>1時間くらいで回れるくらいの大きさです。</p>
<p><img src="/images/20170322/photo_20170322_09.jpeg"></p>
<p>当時、Intel4004を日本のビジコン社と共同開発し、4004を組み込んだ電卓を作りあげました。<br>1971年。ここからインテルの歴史が動きました。<br>日本の企業が絡んでいたんですね、感慨深い。</p>
<p><img src="/images/20170322/photo_20170322_10.jpeg"></p>
<p>とりあえず、アスキーコードでFuture Architectの文字を作ってみました！</p>
<p><img src="/images/20170322/photo_20170322_11.jpeg"></p>
<p>博物館内には、お土産コーナーがあり、エンジニア心をくすぐるモノがちょいちょいあります。</p>
<p><img src="/images/20170322/photo_20170322_12.jpeg"></p>
<h2 id="5-Apple"><a href="#5-Apple" class="headerlink" title="5. Apple"></a>5. Apple</h2><p>Apple本社の<strong>Infinite Loop</strong>！！<br>もうすぐ新本社のApple Parkが建設され、2017年4月から移転開始されるとのこと。<br>なので、Infinite Loopが見られるのも後わずか…。</p>
<p><img src="/images/20170322/photo_20170322_13.jpeg"></p>
<p><img src="/images/20170322/photo_20170322_14.jpeg"></p>
<p><strong>Apple Store Infinite Loop</strong></p>
<p>ここでは、一般的にApple Storeで売られているグッズだけでなく、Appleロゴが入ったTシャツや文具など色々と販売されています。</p>
<p><img src="/images/20170322/photo_20170322_15.jpeg"></p>
<h1 id="6-Elastic"><a href="#6-Elastic" class="headerlink" title="6. Elastic"></a>6. Elastic</h1><p>最後は、Elasticの本社にお邪魔しましたー<br>場所は、カリフォルニア州サンタクララ郡内にあるMountain Viewにあります。</p>
<p><img src="/images/20170322/photo_20170322_16.jpeg"></p>
<p>おぉ！受付がオサレですねー<br>ただ、人が一人もおらず、入ることができなかったです。笑<br>Elastic{ON}の対応でほぼ全ての社員が出ていると思うので受付をやっているわけないですよね。。。</p>
<p><img src="/images/20170322/photo_20170322_17.jpeg"></p>
<h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>はい！ということで、シリコンバレー巡礼はこれにておしまいです！<br>洋平さん！お忙しいところ本当にありがとうございましたm(<em> </em>)m<br>貴重な体験をさせていただきました☆彡</p>
<p><img src="/images/20170322/photo_20170322_18.jpeg"></p>
<p>次は、いよいよElastic{ON}について書いていきたいと思います。<br>ではでは！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは♪&lt;br&gt;またまた、ゆるふわエンジニアの前原ですヽ(*ﾟдﾟ)ノ&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/article
    
    </summary>
    
      <category term="Event" scheme="https://future-architect.github.io/categories/Event/"/>
    
    
      <category term="Conference" scheme="https://future-architect.github.io/tags/Conference/"/>
    
      <category term="Elastic-Stack" scheme="https://future-architect.github.io/tags/Elastic-Stack/"/>
    
  </entry>
  
</feed>
