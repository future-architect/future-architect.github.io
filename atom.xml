<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-08-31T02:21:14.415Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AWS初心者向けNW構築ハンズオン-Internal編-</title>
    <link href="https://future-architect.github.io/articles/20210831a/"/>
    <id>https://future-architect.github.io/articles/20210831a/</id>
    <published>2021-08-30T15:00:00.000Z</published>
    <updated>2021-08-31T02:21:14.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>AWS初心者にとって、最初に躓きやすい部分がNWの構築かと思います。</p><p>インスタンス立ててみたけど、これってどうやると他のノードと通信できるんだっけ？なんとなく通信できたけど、なんでだ？といった辺り、なんとなく有耶無耶なままにしていませんか。</p><p>今回は2020年12月にローンチされたReachability Analyzerを利用して、AWS初心者向けのNW構築ハンズオン-Internal編-をやってみたいと思います。</p><p>参考：<a href="https://aws.amazon.com/jp/blogs/news/new-vpc-insights-analyzes-reachability-and-visibility-in-vpcs/">新機能 – VPC Reachability Analyzer</a></p><h1 id="流れ"><a href="#流れ" class="headerlink" title="流れ"></a>流れ</h1><ul><li>前準備<ol><li>VPCを２つ作成</li><li>各VPCにサブネットを作成</li><li>各VPC内にEC2を作成</li></ol></li><li>AWS Reachability Analyzerを利用しての疎通確認<ul><li>#1 VPC Peeringが不足している</li><li>#2 Route Tableのルーティングが不足している</li><li>#3 Security Groupのインバウンドの許可設定が不足している</li><li>#4 振り返り</li></ul></li></ul><h1 id="前準備"><a href="#前準備" class="headerlink" title="前準備"></a>前準備</h1><h2 id="1-VPCを作成"><a href="#1-VPCを作成" class="headerlink" title="1. VPCを作成"></a>1. VPCを作成</h2><p>VPCを2つ作成<br><img src="/images/20210831a/vpc_a.png" alt="vpc_a.png" width="1008" height="266" loading="lazy"><br><img src="/images/20210831a/vpc_b.png" alt="vpc_b.png" width="1019" height="270" loading="lazy"><br>参考：<a href="https://dev.classmethod.jp/articles/vpc-cidr/">Amazon VPC IPアドレス設計レシピ</a></p><h2 id="2-各VPCにサブネットを作成"><a href="#2-各VPCにサブネットを作成" class="headerlink" title="2. 各VPCにサブネットを作成"></a>2. 各VPCにサブネットを作成</h2><p>各VPC（InternalA, B）に、それぞれサブネットを作成する<br><img src="/images/20210831a/subnet.png" alt="subnet.png" width="1200" height="83" loading="lazy"></p><h2 id="3-各VPCにEC2を作成"><a href="#3-各VPCにEC2を作成" class="headerlink" title="3. 各VPCにEC2を作成"></a>3. 各VPCにEC2を作成</h2><p>今しがた作成した各サブネットにEC2を立てます。<br>イメージはAmazon Linux2、インスタンスサイズはt2.microの無料利用枠にしています。<br><img src="/images/20210831a/ec2_a.png" alt="ec2_a.png" width="851" height="356" loading="lazy"><br><img src="/images/20210831a/ec2_b.png" alt="ec2_b.png" width="856" height="347" loading="lazy"></p><p>また、EC2作成のタイミングで、Security Groupも作成しています。<br>判別しやすいようNameのみ設定しており、ルールはデフォルトのままです。<br><img src="/images/20210831a/sg_a.png" alt="sg_a.png" width="660" height="362" loading="lazy"><br><img src="/images/20210831a/sg_b.png" alt="sg_b.png" width="623" height="366" loading="lazy"></p><h1 id="Reachability-Analyzerを利用しての疎通確認"><a href="#Reachability-Analyzerを利用しての疎通確認" class="headerlink" title="Reachability Analyzerを利用しての疎通確認"></a>Reachability Analyzerを利用しての疎通確認</h1><p>前準備は完了したので、ここからはReachability Analyzerを利用しながら疎通確認をしていきましょう。</p><p>VPCのメニューバーから選択利用できます。<br><img src="/images/20210831a/ra01.png" alt="ra01.png" width="423" height="121" loading="lazy"></p><p><code>パスの作成と分析</code>からパスを作成します。<br>今回はInterna-AのEC2からInternal-BのEC2への疎通確認をします。<br>ポートはhttpsを意識して443としています。<br><img src="/images/20210831a/ra02.png" alt="ra02.png" width="1163" height="157" loading="lazy"></p><h2 id="1-VPC-Peeringが不足している"><a href="#1-VPC-Peeringが不足している" class="headerlink" title="#1 VPC Peeringが不足している"></a>#1 VPC Peeringが不足している</h2><p>パスを作成すると同時に分析が実行されます。<br>分析が完了し、ステータスが<code>到達不可能</code>になっていることが確認できます。<br>詳細を見ていきましょう。<br><img src="/images/20210831a/ra03.png" alt="ra03.png" width="517" height="72" loading="lazy"></p><p>詳細を確認すると、VPC Peeringが接続できていないようです。<br><img src="/images/20210831a/ra04.png" alt="ra04.png" width="1169" height="526" loading="lazy"></p><p>VPC Peeringとは、異なるVPC間の通信を実現するためのサービスです。<br>参考：<a href="https://dev.classmethod.jp/articles/handson-vpc-peering/">VPCピアリングを作りながら学んでみた</a></p><p>VPCのコンソール画面からピアリング接続を設定します。<br><img src="/images/20210831a/vpc_peering_atob01.png" alt="vpc_peering_atob01.png" width="736" height="524" loading="lazy"></p><p>設定後、アクションメニューバーから承諾を行う必要がある点に注意です。<br><img src="/images/20210831a/vpc_peering_atob02.png" alt="vpc_peering_atob02.png" width="972" height="195" loading="lazy"></p><p>再度、分析してみましょう。</p><h2 id="2-Route-Tableのルーティングが不足している"><a href="#2-Route-Tableのルーティングが不足している" class="headerlink" title="#2 Route Tableのルーティングが不足している"></a>#2 Route Tableのルーティングが不足している</h2><p>分析結果が変わっています。3つ指摘があるようです。先に、1つ目と3つ目を見ていきます。<br><img src="/images/20210831a/ra05.png" alt="ra05.png" width="790" height="170" loading="lazy"></p><p><code>rtb-026e0943b428a980d</code>とは、Internal A（VPC）に紐付いているルートテーブルです。<br><code>pcx-032cb64744c1e754a</code>とは、先程作成したVPC Peeringのことです。<br>Internal AからVPC Peeringに対するルーティング設定が不足しているという指摘のようです。<br>ルーティングを設定しましょう。ターゲットを先のVPC Peeringに向けて、送信先のCIDRはInternal Bを指定します。</p><img src="/images/20210831a/vpc_a_rt.png" alt="vpc_a_rt.png" width="750" height="230" loading="lazy"><p>3つ目は反対に、Internal BからVPC Peeringに対するルーティング設定が不足しているという指摘です。同じ要領で設定をします。この時、送信先のCIDRはInternal Aを指定します。<br><img src="/images/20210831a/vpc_b_rt.png" alt="vpc_b_rt.png" width="742" height="187" loading="lazy"></p><p>再度、分析してみましょう。</p><h2 id="3-Security-Groupのインバウンドの許可設定が不足している"><a href="#3-Security-Groupのインバウンドの許可設定が不足している" class="headerlink" title="#3 Security Groupのインバウンドの許可設定が不足している"></a>#3 Security Groupのインバウンドの許可設定が不足している</h2><p>先の指摘がクリアになっています。いい感じです。<br>残りの指摘を見ると、Security Groupのingressルールが不足しているようです。<br><img src="/images/20210831a/ra06.png" alt="ra06.png" width="501" height="87" loading="lazy"></p><p><code>03766d1ad9783c83b</code>とはInternal BのEC2にアタッチされているSecurity Groupのことです。<br>このSecurity GroupがInternal AのEC2からの通信を拒絶しているので、許可設定をします。</p><p>今回はhttps通信を想定して、443ポートでの疎通確認をしていました。<br>そのためSecurity Groupのインバウンドルールに443ポート、CIDR10.1.0.0/16からの通信を許可する設定を追加します。<br><img src="/images/20210831a/sg_b_inbound.png" alt="sg_b_inbound.png" width="1049" height="253" loading="lazy"></p><p>再度、分析してみましょう。</p><h2 id="4-振り返り"><a href="#4-振り返り" class="headerlink" title="#4 振り返り"></a>#4 振り返り</h2><p>通信に成功しました！<br><img src="/images/20210831a/ra07.png" alt="ra07.png" width="364" height="156" loading="lazy"></p><p>通信経路も視覚的に確認できます。<br><img src="/images/20210831a/ra08.png" alt="ra08.png" width="317" height="442" loading="lazy"></p><p>わかりやすく注釈をつけてみました。<br><img src="/images/20210831a/ra09.png" alt="ra09.png" width="440" height="435" loading="lazy"><br>黒字で記載している箇所は今回意識しなかった箇所です。</p><ul><li>EC2のENI：<ul><li>EC2が通信を行うためのインターフェースです。ENIがないとEC２は通信を行うことができません。EC2を作成したタイミングで合わせて払い出されています。</li></ul></li><li>VPCのACL：<ul><li>VPCの単位でNWの制御を行うためのサービスです。セキュリティグループ同様にセキュリティを高める目的で利用します。</li></ul></li></ul><p>参考：<a href="https://business.ntt-east.co.jp/content/cloudsolution/column-14.html">AWSのネットワークインターフェース「ENI」とは</a><br>参考：<a href="https://dev.classmethod.jp/articles/amazon-vpc-acl/">Amazon VPCのネットワークACLについて</a></p><p>なぜ、今回はInternal AのSecurity Groupの設定を操作せずに済んだのかというと、もともと外向きの通信が許可されていたためです。<br><img src="/images/20210831a/sg_a_outbound.png" alt="sg_a_outbound.png" width="1090" height="245" loading="lazy"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回のNW構成を簡単に図化すると以下です。</p><p>Internal AのVPCにいるEC2からInternal BのVPCにいるEC２に向けて投げられた通信は、SecurityGroupを抜けて、VPCのRouteTableを利用して、VPCPeeringへと流れていきます。</p><p>VPC Peeringを抜けた通信はやがてInternal Bに到達し、Securituy Groupを抜けて対向のEC2へとたどり着きました。</p><img src="/images/20210831a/diagram.png" alt="diagram.png" width="1200" height="723" loading="lazy">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;AWS初心者にとって、最初に躓きやすい部分がNWの構築かと思います。&lt;/p&gt;
&lt;p&gt;インスタンス立ててみたけど、これってどう</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
    <category term="VPC_Reachability_Analyzer" scheme="https://future-architect.github.io/tags/VPC-Reachability-Analyzer/"/>
    
  </entry>
  
  <entry>
    <title>リモートワーク環境を全力で整備してみた</title>
    <link href="https://future-architect.github.io/articles/20210827a/"/>
    <id>https://future-architect.github.io/articles/20210827a/</id>
    <published>2021-08-26T15:00:00.000Z</published>
    <updated>2021-08-28T06:02:54.571Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。<a href="/articles/20210823a/">夏の自由研究ブログ連載2021</a>の６記事目です。</p><p>私事ですがお引っ越しをしました、0からプログラミングしたいネタがない事もないのですが引っ越しに体力が奪われたので今年は断念します。素直に日頃やった事をネタにしていきます。</p><h1 id="0からの環境構築"><a href="#0からの環境構築" class="headerlink" title="0からの環境構築"></a>0からの環境構築</h1><p>今回のネタはタイトルの通りです、リモートワーク環境を整えてたレポートをしつつおすすめアイテムを紹介していきます。</p><p>気を抜くと生活感あふれる何かがカメラに写り込む生活とはこれでオサラバ。というわけで、まずはまっさらな部屋を用意します、部屋.new()です。</p><img src="/images/20210827a/room.jpg" alt="空っぽの部屋" width="800" height="600" loading="lazy"><p>６畳の素朴な部屋ですが、今回ここは仕事部屋オンリーに使います、生活感のある要素はこの部屋からは極力排除します。</p><h1 id="部屋の印象は床で決まる"><a href="#部屋の印象は床で決まる" class="headerlink" title="部屋の印象は床で決まる"></a>部屋の印象は床で決まる</h1><p>通勤が仕事モードに入る準備期間となっていたため、気持ちの切り替えができないという意見をよく聞きます。</p><p>私は比較的大丈夫なタイプですが、確かに仕事をする空間らしい場所で仕事をした方が気分が良いですよね。そこで、部屋全体に<a href="https://www.amazon.co.jp/gp/product/B085D8SK82/">タイルマット</a>を敷きました。</p><p>そこからか、という感じですが気合を入れてみました。</p><img src="/images/20210827a/image.png" alt="床タイル" width="300" height="299" loading="lazy"><p>これを5セット購入しました、見えないところに端材を敷き詰めてギリギリセーフという結果になりました。</p><p>全て綺麗に仕上げたい方は余裕を持って一畳１セットくらいの感じで買うと良いでしょう。部屋から職場感が漂ってきました、下手すると自宅なのに心が休まらない仕上がりです。</p><img src="/images/20210827a/image_2.png" alt="職場感がある部屋" width="1200" height="802" loading="lazy"><p>さらに本気を出すと<a href="https://item.rakuten.co.jp/asia-kobo/set54-84/">大理石やモルタル風のパネル</a>を設置してオシャレ感を高める事ができますが、一枚1kgという重量感に危険を感じたため諦めました、引っ越す時50kg以上の大荷物になります。今住んでいる場所に5年10年と住む予定の人にはオススメです。紹介したタイルマットは安価、軽量ながらすぐに使えなくなるような不安を感じない、絶妙なスペックでした。</p><h1 id="PCデスクを配置する"><a href="#PCデスクを配置する" class="headerlink" title="PCデスクを配置する"></a>PCデスクを配置する</h1><p>デスクと椅子が整っていないと腰を痛める原因になります、とても大事な要素です。引越しついでにPCデスクを新調しました。</p><p>デスクは<a href="https://www.bauhutte.jp/">Bauhutte (バウヒュッテ)</a>に統一しました、これはゲーミングデスクのブランドです。もう少し大人なコンセプトのデスクも探したのですが、サイズに余裕がありつつキーボードスライダーがデフォルトでついているデスクを求めて悩み抜いた結果、このブランドに落ち着きました。</p><p><a href="https://www.amazon.co.jp/gp/product/B01HG3QOIK/">昇降式 スタンディングデスク (幅100cm×奥行45cm)</a>をチョイス。スタンディングデスクですが、狙いはキーボードスライダーなので高さを上げる日は来ないと思われます。</p><p><a href="https://www.amazon.co.jp/gp/product/B071FSPSYV/">サイドデスク</a>、<a href="https://www.amazon.co.jp/gp/product/B07FMC91Q2/">デスクサイドラック</a>も統一してオシャレ感アップです。</p><p>後述しますが設備の都合上私にはサイドデスクをL字に配置する必要があります。<a href="https://www.amazon.co.jp/gp/product/B07YWST6H8/">デスクマット</a>も忘れずに、Bauhutteからもマットは販売されていますが、ここだけブランド統一せずにケチってしまいました…</p><p>これらを組み立てて準備完了です。</p><img src="/images/20210827a/組み立て完了.jpg" alt="家具が置かれた部屋" width="1000" height="668" loading="lazy"><p>椅子は予算があればアーロンチェアあたりをいつの日か購入したいところですが、<a href="https://www.amazon.co.jp/s?k=%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%83%81%E3%82%A7%E3%82%A2&i=kitchen&page=3&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&qid=1629553741&ref=sr_pg_3">メッシュチェア</a>で検索すると２万円以下でも良さげなものが出てきます。</p><h1 id="デスクにアイテムを配置する"><a href="#デスクにアイテムを配置する" class="headerlink" title="デスクにアイテムを配置する"></a>デスクにアイテムを配置する</h1><p>デスクを用意したらPC、ディスプレイをセッティングしていきます。<a href="https://www.amazon.co.jp/gp/product/B07T1CJ9VR/">ディスプレイ</a>は迫力の43インチです。</p><img src="/images/20210827a/image_3.png" alt="4K 43インチのPCディスプレイ" width="1200" height="770" loading="lazy"><p>27~33インチを買うのが賢い選択ですが、ブランドに拘らなければ同じ値段で43インチまでサイズアップできることに気がついてしまったのが運の尽きです、誘惑に勝てなかった。これによりデスクの横幅いっぱいまでディスプレイが伸びるため、サイドデスクにノートPCを配置しています。</p><p>私は常にチャットツールを表示していたいタイプなのですが、画面がどれ程大きくても、チャット表示用に２画面あった方が画面を有効活用できます。引っ越す前はデスクの端に無理やり置いたノートPC本体の画面を利用していましたが、43インチモニタの登場により引退した27インチモニタをサブモニタとして配置しました。</p><p>最初は２７インチ２画面を夢見ていたのですが、やり過ぎました。</p><img src="/images/20210827a/image_4.png" alt="43インチのPCディスプレイが置かれたデスク" width="1200" height="802" loading="lazy"><p>さて快適なリモートワークには会議の音質を整えることが大切ですね。<br>私は<a href="https://www.soundhouse.co.jp/products/detail/item/164160/">スピーカー</a>にADAM AUDIO ( アダムオーディオ ) / A5Xを使用しています。</p><img src="/images/20210827a/image_5.png" alt="スピーカー" width="600" height="300" loading="lazy"><p>ほとんどの人がピンとこないチョイスだと思いますが、私の趣味が大いに反映されています。音楽が好きなので、部屋にモニタースピーカーがある生活に夢を感じます。</p><p>同じスピーカーを私物PCでも仕事PCでも、さらには<a href="https://www.amazon.co.jp/gp/product/B084DWX1PV/">Alexa</a>でも鳴らしたい、という要望があり、<a href="https://www.amazon.co.jp/dp/B08628FVYF/">ステレオミキサー</a>を導入しました。</p><img src="/images/20210827a/image_6.png" alt="ステレオミキサー" width="890" height="791" loading="lazy"><p>構造上ケーブルにもこだわる程のオーディオマニア向けではないですが、コンパクトで電源不要なのは大きな魅力です。</p><p>Alexaは以前<a href="/articles/20210301/">登壇レポート記事</a>に書いたとおり、会議をすっぽかさないためのリマインダーとして使っています。<a href="https://www.amazon.co.jp/gp/product/B07V1PZFXY/">スマートプラグ</a>を買って節電するような使い方もしています。</p><img src="/images/20210827a/image_7.png" alt="スマートプラグ" width="804" height="589" loading="lazy"><p>スピーカー鳴らすのは憚られる、という方はヘッドホン、イヤホンに投資してみるのはいかがでしょうか。<br>私は<a href="https://www.amazon.co.jp/AKG-K872/dp/B01M3SVO6G">AKG K872</a>を愛用しています。</p><img src="/images/20210827a/image_8.png" alt="ヘッドホン" width="1041" height="1340" loading="lazy"><p>開放型ヘッドホンの高級機は音漏れでは済まないレベルで外部に音が漏れますが、これは密閉型なので比較的音漏れを気にする必要がありません。趣味なのでこの辺の感覚は参考にならないと思います。</p><p><a href="https://www.amazon.co.jp/gp/product/B083TJ93H2/">マイク</a>も整えています、この流れだと誤解を産みそうですが、ケーブルがUSBになっておりでPCに直接させる、万人におすすめのアイテムです。</p><img src="/images/20210827a/image_9.png" alt="マイク" width="931" height="955" loading="lazy"><p>特にMACの場合ノートPC付属のマイクでも充分な品質で、際立った音質向上は案外感じられないのですが、マイクの指向性が強いことでキーボードのタイプ音が比較的拾われなくなるメリットがあります。</p><p>忘れてはいけない<a href="https://www.amazon.co.jp/dp/B082TV2Z9M/">HHKB</a>、キーボードはこだわり出すとキリがないですね、今回の連載でも最高の持ち歩きキーボード考という記事がありました。</p><img src="/images/20210827a/image_10.png" alt="キーボード" width="1200" height="617" loading="lazy"><p>私は最初にこの人すごいなと尊敬した先輩エンジニアがHHKBユーザーだったという憧れもあってHHKBを愛用しています。</p><p>新型の<a href="https://www.amazon.co.jp/dp/B082TYNNL2/">HHKB Professional HYBRID</a>が出たので、欲しい気持ちがとてもあるのですが、まだ我慢しています。マウスはELECOMです、まだ沼には沈んでいないです。</p><p>私物PCを使う際にキーボードとマウスをいちいち接続し直すのが面倒だな、と感じていたのですが、<a href="https://www.amazon.co.jp/gp/product/B071NM5GRW/">切り替えスイッチ付きUSBハブ</a>がありました。</p><img src="/images/20210827a/image_11.png" alt="切り替えスイッチ付きUSBハブ" width="1200" height="984" loading="lazy"><p>これをデスク裏に貼り付けて利用しています。</p><p>これらをなるべく配線がごちゃつかないように整えていきました。<a href="https://www.amazon.co.jp/gp/product/B07RNJJMST/">ケーブル結束バンド</a>で整理し、<a href="https://www.amazon.co.jp/gp/product/B076GXW7GK/">ケーブルクリップ</a>でデスク裏面に隠すように固定します。</p><img src="/images/20210827a/image_12.png" alt="ケーブル結束バンド" width="1200" height="1195" loading="lazy"><p>設備の都合上人並み以上にケーブルがありますが、床がごちゃつくような事態は回避できました。</p><p>仕上げに<a href="https://www.amazon.co.jp/gp/product/B07QXMZ7C8/">LEDテープ</a>による間接照明を設置します。結局ゲーミング感を出してしまいました。</p><img src="/images/20210827a/DSC00926.JPG" alt="LEDテープで照明されたデスク" width="1200" height="802" loading="lazy"><p>見ての通り趣味の色が大幅に出ているので、真面目な仕事一色というわけではありません、同じデスクで私物PCも触れば映画も見てゲームもします。</p><p>いずれにせよ会社では実現できないレベルの環境が整いました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>下記のアイテムを紹介しました。</p><ul><li><a href="https://www.amazon.co.jp/gp/product/B085D8SK82/">タイルマット</a></li><li><a href="https://item.rakuten.co.jp/asia-kobo/set54-84/">大理石やモルタル風のパネル</a></li><li><a href="https://www.amazon.co.jp/gp/product/B01HG3QOIK/">昇降式 スタンディングデスク (幅100cm×奥行45cm)</a></li><li><a href="https://www.amazon.co.jp/gp/product/B071FSPSYV/">サイドデスク</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07FMC91Q2/">デスクサイドラック</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07YWST6H8/">デスクマット</a></li><li><a href="https://www.amazon.co.jp/s?k=%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%83%81%E3%82%A7%E3%82%A2&i=kitchen&page=3&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&qid=1629553741&ref=sr_pg_3">メッシュチェア</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07T1CJ9VR/">ディスプレイ</a></li><li><a href="https://www.soundhouse.co.jp/products/detail/item/164160/">スピーカー</a></li><li><a href="https://www.amazon.co.jp/dp/B08628FVYF/">ステレオミキサー</a></li><li><a href="https://www.amazon.co.jp/gp/product/B084DWX1PV/">Alexa</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07V1PZFXY/">スマートプラグ</a></li><li><a href="https://www.amazon.co.jp/AKG-K872/dp/B01M3SVO6G">AKG K872</a></li><li><a href="https://www.amazon.co.jp/gp/product/B083TJ93H2/">マイク</a></li><li><a href="https://www.amazon.co.jp/dp/B082TV2Z9M/">HHKB</a></li><li><a href="https://www.amazon.co.jp/dp/B082TYNNL2/">HHKB Professional HYBRID</a></li><li><a href="https://www.amazon.co.jp/gp/product/B071NM5GRW/">切り替えスイッチ付きUSBハブ</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07RNJJMST/">ケーブル結束バンド</a></li><li><a href="https://www.amazon.co.jp/gp/product/B076GXW7GK/">ケーブルクリップ</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07QXMZ7C8/">LEDテープ</a></li></ul><p>元々持っていたものや買ってないものも含みますが、合計金額のことは考えたくないですね。</p><p>みなさんもワクワクするお仕事環境を整えてみませんか</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIGの伊藤真彦です。&lt;a href=&quot;/articles/20210823a/&quot;&gt;夏の自由研究ブログ連載2021&lt;/a&gt;の６記事目です。&lt;/p&gt;
&lt;p&gt;私事ですがお引っ越しをしました、0からプログラミングしたいネタがない事もないのですが引っ越しに体力が奪われたので今年は断</summary>
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
    <category term="引っ越し" scheme="https://future-architect.github.io/tags/%E5%BC%95%E3%81%A3%E8%B6%8A%E3%81%97/"/>
    
  </entry>
  
  <entry>
    <title>ローカルフォワードプロキシでHTTP要求時に機能横断な処理を差し込み</title>
    <link href="https://future-architect.github.io/articles/20210826b/"/>
    <id>https://future-architect.github.io/articles/20210826b/</id>
    <published>2021-08-25T15:00:01.000Z</published>
    <updated>2021-08-28T04:19:59.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20210823a/">夏の自由研究連載2021</a>の4日目で、TIG DXユニット真野です。</p><p>この記事では <del>みんな</del> 個人的に大好きなフォワードプロキシの概要と、Goでの既存のOSSライブラリを利用した実装例をまとめました。このテーマに決めた理由は以下です。</p><ul><li>Goのnet/httpのクライアントは、<code>https_proxy</code> の環境変数で差し込める（標準のデフォルトクライアントをそのまま利用する前提です）</li><li>差し込んだプロキシ側に、ロギングや認証やできればリトライを仕込めば色々役立つ事があるんじゃないかという調査<ul><li>Goだとhttp.Clientは、RoundTripperというインタフェースを実装したTransportでカスタマイズ可能なので、実用だとこちらを利用したほうが良いと思います。</li></ul></li><li>概念的にはサービスメッシュの文脈でのサイドカープロキシに近いものをイメージしています</li></ul><p>自由研究という趣旨なので、そんなに実用性は考えず、興味ドリブンで手を動かそうと思いテーマに選びました。</p><h2 id="フォワードプロキシとは"><a href="#フォワードプロキシとは" class="headerlink" title="フォワードプロキシとは"></a>フォワードプロキシとは</h2><p>大きな括りではWebプロキシとも呼ばれることあるフォワードプロキシ（単にプロキシと呼ぶことも多いです）ですが、クライアントとWebサーバの中間に位置し、クライアントの要求を代理（proxy）してWebサーバにアクセスする存在です。<a href="/articles/20201020/">ProxyとDockerと新人社員と時々わたし</a>の記事にも詳しく書かれていますが、メリットとしてはキャッシュや接続先の通信の制限、ウイルススキャンを行うと言った余地をもたせることができる点でしょうか。Webエンジニアとしてのデメリットがあるとすると、利用するツール群でのプロキシ設定が大変だということがでしょうか。</p><img src="/images/20210826b/ローカルフォワードプロキシ.drawio-ページ2.png" alt="フォワードプロキシ説明" width="962" height="437" loading="lazy"><p>たまにプロキシと書いてリバースプロキシ（私の周囲ではリバプロと略す人が多い）を指すブログ記事なども見かけますが、リバースプロキシとの差は、プロキシサーバがクライアント側にあるか、サーバ側にあるかの違いでしょう。今回は掲題にある通り、フォワードプロキシについてです．</p><img src="/images/20210826b/ローカルフォワードプロキシ.drawio-ページ3.png" alt="リバースプロキシ説明" width="1022" height="495" loading="lazy"><h2 id="自由研究でやりたいこと"><a href="#自由研究でやりたいこと" class="headerlink" title="自由研究でやりたいこと"></a>自由研究でやりたいこと</h2><p>Goでローカル端末（同一プロセス）上にフォワードプロキシを立ち上げ、アプリ側には <code>http_proxy</code>や<code>https_proxy</code> の環境変数で先程のフォワードプロキシのFQDNを設定してアクセスさせること。</p><img src="/images/20210826b/ローカルフォワードプロキシ.drawio.png" alt="自由研究イメージ" width="621" height="409" loading="lazy"><p>もし同一プロセス内に組み込む場合は、実現させるためにはローカルでフォワードプロキシのgoroutineを起動すること、フォワードプロキシのプロトコル（HTTPのCONNECTメソッドなど）を守って実装する必要があり、利用できるOSSなどを調査します。</p><p>リバースプロキシだと、net/http/httputil の <a href="https://pkg.go.dev/net/http/httputil#ReverseProxy">ReverseProxy</a>を利用すればかなり楽できそうなのですが、繰り返しますが今回構築するのはフォワードプロキシなので異なります。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>フォワードプロキシを実装するには、HTTP CONNECTメソッドなど所定のプロトコルを解釈させる必要があると思うのですが、<a href="https://github.com/elazarl/goproxy">elazarl/goproxy</a>など有名なプロダクトがすでに存在したのでそちらを利用します。</p><p>goproxyという名前は<a href="https://golang.org/ref/mod#goproxy-protocol">go module側のプロキシサーバ</a>と勘違いしそうですが、それとは関係ないです。</p><p>goproxyはカスタマイズ可能なHTTPプロキシライブラリを提供するとREADMEに書いている通り、内部で利用するTransportなどが公開されているので自由度が高い印象を受けました。プロキシ自体は <code>net/http</code>のハンドラーなので、コードもGoに慣れている人であれば比較的理解しやすいと思います。</p><p>goporxyをまずmain関数内で呼び出すミニマムな実装で試してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/elazarl/goproxy&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">proxy := goproxy.NewProxyHttpServer()</span><br><span class="line">proxy.Tr = &amp;http.Transport&#123;TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class="literal">true</span>&#125;, Proxy: <span class="literal">nil</span>&#125;</span><br><span class="line">proxy.ConnectDial = <span class="literal">nil</span></span><br><span class="line">proxy.Verbose = <span class="literal">true</span></span><br><span class="line"><span class="keyword">go</span> http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>, proxy) <span class="comment">// ローカルにフォワードプロキシを起動</span></span><br><span class="line"></span><br><span class="line">resp, err := http.Get(os.Args[<span class="number">1</span>]) <span class="comment">// 引数で渡されたURLにアクセス</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">all, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(all))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IPアドレスを取得する、 <a href="https://httpbin.org/ip">https://httpbin.org/ip</a> というサイトにアクセスで試してみます。IP部分はなんとなく書き換えておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境変数プロキシ設定</span></span><br><span class="line">&gt; <span class="built_in">set</span> http_proxy=http://localhost:8000</span><br><span class="line">&gt; <span class="built_in">set</span> https_proxy=http://localhost:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP側のエンドポイントにアクセス</span></span><br><span class="line">&gt; go run main.go http://httpbin.org/ip</span><br><span class="line">2021/08/26 11:24:57 [001] INFO: Got request /ip httpbin.org GET http://httpbin.org/ip</span><br><span class="line">2021/08/26 11:24:57 [001] INFO: Sending request GET http://httpbin.org/ip</span><br><span class="line">2021/08/26 11:24:57 [001] INFO: Received response 200 OK</span><br><span class="line">2021/08/26 11:24:57 [001] INFO: Copying response to client 200 OK [200]</span><br><span class="line">2021/08/26 11:24:57 [001] INFO: Copied 30 bytes to client error=&lt;nil&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.xxx.x&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPS側のエンドポイントにアクセス</span></span><br><span class="line">&gt; go run main.go https://httpbin.org/ip</span><br><span class="line">2021/08/26 11:26:16 [001] INFO: Running 0 CONNECT handlers</span><br><span class="line">2021/08/26 11:26:16 [001] INFO: Accepting CONNECT to httpbin.org:443</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.90.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように実行してみると、<code>proxy.Verbose = true</code> の設定をしていることもあり、goproxyでログ出力され、ローカルのフォワードプロキシを経由して通信されていることがわかります。</p><p>念の為、環境変数を外すると、直接外部に通信されることも確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境変数を外す</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=</span><br><span class="line"><span class="built_in">set</span> https_proxy=</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP, HTTPSでアクセス（ローカルのプロキシに経由していないことを確認）</span></span><br><span class="line">&gt; go run main.go http://httpbin.org/ip</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.90.1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; go run main.go https://httpbin.org/ip</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.90.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>goproxy側でログを出していないため、環境変数の有無で通信経路を変えられたようです。</p><h2 id="goproxyで紹介されているユースケース"><a href="#goproxyで紹介されているユースケース" class="headerlink" title="goproxyで紹介されているユースケース"></a>goproxyで紹介されているユースケース</h2><p>READMEにはgoproxyの利用例もいくつか書かれていて興味深かったです。例えば、午前8時から午後17時までの時間帯にはアクセスを禁じる処理が紹介されていました。これは冗談寄りのアイデアだと思いますが、実用に近づけたユースケースを考えると障害テスト寄りのことを実現するときにも使えそうだなと思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proxy.OnRequest(goproxy.DstHostIs(<span class="string">&quot;www.reddit.com&quot;</span>)).DoFunc(</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request,ctx *goproxy.ProxyCtx)</span><span class="params">(*http.Request,*http.Response)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> h,_,_ := time.Now().Clock(); h &gt;= <span class="number">8</span> &amp;&amp; h &lt;= <span class="number">17</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> r,goproxy.NewResponse(r,</span><br><span class="line">                    goproxy.ContentTypeText,http.StatusForbidden,</span><br><span class="line">                    <span class="string">&quot;Don&#x27;t waste your time!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r,<span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>もちろん、何かしらの認証やトレーサビリティに利用できそうな、リクエストヘッダへの差し込みも可能で、紹介されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxy.OnRequest().DoFunc(</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request,ctx *goproxy.ProxyCtx)</span><span class="params">(*http.Request,*http.Response)</span></span> &#123;</span><br><span class="line">        r.Header.Set(<span class="string">&quot;X-GoProxy&quot;</span>,<span class="string">&quot;yxorPoG-X&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> r,<span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="拡張ポイント"><a href="#拡張ポイント" class="headerlink" title="拡張ポイント"></a>拡張ポイント</h2><p>前の章で説明しましたが、goproxyを利用する場合は以下のような拡張ポイントが用意されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add handlers to httpsHandlers</span></span><br><span class="line">proxy.OnRequest(Some ReqConditions).HandleConnect(YourHandlerFunc())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add handlers to reqHandlers</span></span><br><span class="line">proxy.OnRequest(Some ReqConditions).Do(YourReqHandlerFunc())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add handlers to respHandlers</span></span><br><span class="line">proxy.OnResponse(Some RespConditions).Do(YourRespHandlerFunc())</span><br></pre></td></tr></table></figure><p>実装例は<a href="https://github.com/elazarl/goproxy/tree/master/examples">examples</a>フォルダに2021.08.26時点で14ほどの例があるので、大体何ができるかはここから追えると思います。</p><h2 id="ミドルウェアでの拡張"><a href="#ミドルウェアでの拡張" class="headerlink" title="ミドルウェアでの拡張"></a>ミドルウェアでの拡張</h2><p>goproxyもServeHTTPを実装されているため、よくあるmiddlewareでの拡張が可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exampleMiddleware</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 何かしらの処理のフック</span></span><br><span class="line">next.ServeHTTP(recorder, r)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このmiddlewareを次のように呼び出します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>, exampleMiddleware(proxy))</span><br></pre></td></tr></table></figure><p>この形式であれば、既存資産のライブラリを流用しやすいかもしれません。</p><h2 id="ミドルウェア拡張の注意"><a href="#ミドルウェア拡張の注意" class="headerlink" title="ミドルウェア拡張の注意"></a>ミドルウェア拡張の注意</h2><p>例えば、レスポンスコードを取得するために、 http.ResponseWriter をラップしたいときはよくあると思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StatusRecorder <span class="keyword">struct</span> &#123;</span><br><span class="line">http.ResponseWriter</span><br><span class="line">Status <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *StatusRecorder)</span> <span class="title">WriteHeader</span><span class="params">(status <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">r.Status = status</span><br><span class="line">r.ResponseWriter.WriteHeader(status)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loggingMiddleware</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">recorder := &amp;StatusRecorder&#123;ResponseWriter: w&#125;</span><br><span class="line">next.ServeHTTP(recorder, r)</span><br><span class="line">fmt.Println(<span class="string">&quot;★★★StatusCode&quot;</span>, recorder.Status)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをそのまま使うと、panicが発生するので注意です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>, loggingMiddleware(proxy))</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>実行例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go  https://httpbin.org/ip</span><br><span class="line">2021/08/26 12:22:16 http: panic serving [::1]:51340: httpserver does not support hijacking</span><br><span class="line">goroutine 5 [running]:</span><br><span class="line">net/http.(*conn).serve.func1()</span><br><span class="line">        C:/Program Files/Go/src/net/http/server.go:1801 +0xb9</span><br><span class="line">panic(&#123;0x7396a0, 0x7ee370&#125;)</span><br><span class="line">        C:/Program Files/Go/src/runtime/panic.go:1047 +0x266</span><br><span class="line">github.com/elazarl/goproxy.(*ProxyHttpServer).handleHttps(0xc000119180, &#123;0x7f5ee8, 0xc000226000&#125;, 0xc000212000)</span><br><span class="line">        C:/Users/manoj/go/pkg/mod/github.com/elazarl/goproxy@v0.0.0-20210801061803-8e322dfb79c4/https.go:84 +0x1479</span><br><span class="line">github.com/elazarl/goproxy.(*ProxyHttpServer).ServeHTTP(0xc00011da30, &#123;0x7f5ee8, 0xc000226000&#125;, 0xc000212000)</span><br><span class="line">        C:/Users/manoj/go/pkg/mod/github.com/elazarl/goproxy@v0.0.0-20210801061803-8e322dfb79c4/proxy.go:114 +0xd7</span><br><span class="line">略</span><br></pre></td></tr></table></figure><p>リクエストをラップするにはHijackインターフェースを実装する必要があるとのこと。そこで以下のレシーバーを追加します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *StatusRecorder)</span> <span class="title">Hijack</span><span class="params">()</span> <span class="params">(net.Conn, *bufio.ReadWriter, error)</span></span> &#123;</span><br><span class="line">h, ok := r.ResponseWriter.(http.Hijacker)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errors.New(<span class="string">&quot;hijack not supported&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h.Hijack()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そうするとステータスコードのロギングが成功します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">go</span> run main.<span class="keyword">go</span>  http:<span class="comment">//httpbin.org/ip</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">16</span>:<span class="number">36</span> [<span class="number">001</span>] INFO: Got request /ip httpbin.org GET http:<span class="comment">//httpbin.org/ip</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">16</span>:<span class="number">36</span> [<span class="number">001</span>] INFO: Sending request GET http:<span class="comment">//httpbin.org/ip</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">16</span>:<span class="number">36</span> [<span class="number">001</span>] INFO: Received response <span class="number">200</span> OK</span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">16</span>:<span class="number">36</span> [<span class="number">001</span>] INFO: Copying response to client <span class="number">200</span> OK [<span class="number">200</span>]</span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">16</span>:<span class="number">36</span> [<span class="number">001</span>] INFO: Copied <span class="number">30</span> bytes to client error=&lt;<span class="literal">nil</span>&gt;</span><br><span class="line">★★★StatusCode <span class="number">200</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.xx.x&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意ですが、HTTPS通信だとこの実装ではステータスが取れません。Man in The Middel Proxyの仕組みを構築する必要があるのでそこまでガンバるかどうかでしょうか。（この制約が、圧倒的に使い勝手の面でhttp.Client側のTransportに比べて面倒だなと感じることができました）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">go</span> run main.<span class="keyword">go</span>  https:<span class="comment">//httpbin.org/ip</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">17</span>:<span class="number">39</span> [<span class="number">001</span>] INFO: Running <span class="number">0</span> CONNECT handlers</span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">17</span>:<span class="number">39</span> [<span class="number">001</span>] INFO: Accepting CONNECT to httpbin.org:<span class="number">443</span></span><br><span class="line">★★★ <span class="number">0</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.xx.x&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTTPSの宛先では、<code>★★★ 0</code> とステータスが取れていないことがわかります。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>環境変数（http_proxy, https_proxy, no_proxy）などで差し込めるフォワードプロキシをローカル（に近いところ）で利用して、何かしらの共通処理を用いれないかという自由研究でした。接続先のサーバレスポンスによって処理を切り替えたい（例えばリトライしたい）というときには、Man in The Middel Proxyの考慮が必要で（特別な証明書を準備し、クライアントに読み込ませる必要がある）、気軽に導入するにはハードルが高いです。</p><p>実用性に近い部分では、リクエスト側に何かしらエンリッチ（認証情報やトレース情報）するケースや、カオスエンジニアなどの障害テストを行うときには少し便利かもしれません。障害テストはプロキシという要素が一つ増えているので、どうしてもスタブを作るのが面倒な時にサポート用途に使えるかも？という具合でしょうか。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;/articles/20210823a/&quot;&gt;夏の自由研究連載2021&lt;/a&gt;の4日目で、TIG DXユニッ</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="プロキシ" scheme="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/"/>
    
  </entry>
  
  <entry>
    <title>MONETマーケットプレイス × OSS活用でさっくりデモアプリ開発</title>
    <link href="https://future-architect.github.io/articles/20210826a/"/>
    <id>https://future-architect.github.io/articles/20210826a/</id>
    <published>2021-08-25T15:00:00.000Z</published>
    <updated>2021-08-28T04:19:59.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>MONET Technologies Inc. の竹内です。このたび、フューチャー技術ブログに寄稿させていただいています。</p><p>今回は、弊社のMONETマーケットプレイス上のプロダクトを使って、MaaSアプリをイメージしたデモアプリを作ってみました。</p><p>今回イメージしたデモアプリは「イベント会場へのマルチモーダル移動経路検索&amp;予約&amp;搭乗Webアプリ」です。</p><img src="/images/20210826a/demo_short2.gif" alt="アプリデモ動画" width="640" height="400" loading="lazy"><img src="/images/20210826a/image.png" alt="アプリ紹介" width="1200" height="367" loading="lazy"><p>MONETマーケットプレイスのプロダクトを利用することにより、このようなデモアプリを省エネで作成することができます。画面動作の実装単体であれば、2週間弱であらかた完成しました。</p><p>本記事では、デモアプリ開発時の利用場面を交えて、MONETマーケットプレイスと各プロダクトの魅力をお伝えできればと思います。</p><h1 id="そもそもMONETマーケットプレイスとは"><a href="#そもそもMONETマーケットプレイスとは" class="headerlink" title="そもそもMONETマーケットプレイスとは?"></a>そもそもMONETマーケットプレイスとは?</h1><p>こちらは既に<a href="io/articles/20210404/">以前の記事</a>でも紹介されていますが、MaaS (Mobility As A Service)に関わるAPI/ソフトウェアを提供するプラットフォームです。</p><p>弊社を含め、複数の3rd Partyが提供するAPIを同一プラットフォーム上で契約、管理、実行出来るというメリットに加えて、プラットフォーム上に集まるAPIやデータを各サービサー(マーケットプレイス利用者)と共に活用したい、というコンセプトで現在稼働しているサービスです。</p><p>今回は、一体MONETマーケットプレイスで何が出来るのか、イメージ作りに貢献できればと思い、デモアプリ開発を行ってみました。デモアプリについては、<a href="https://developer.monet-technologies.co.jp/tutorials#tutorial-eventdrt">MONETマーケットプレイス チュートリアルページ</a>に実装など詳細を記載しています。</p><p>別途、ご参考にしていただけると幸いです。</p><h1 id="MaaSを題材にしたデモアプリ開発"><a href="#MaaSを題材にしたデモアプリ開発" class="headerlink" title="MaaSを題材にしたデモアプリ開発"></a>MaaSを題材にしたデモアプリ開発</h1><p>それでは簡単に今回作ったデモアプリを紹介していきます。大まかに、</p><ol><li>デモアプリのコンセプト</li><li>構成</li><li>各機能でのマーケットプレイス利用場面</li></ol><p>といった構成で説明します。</p><h2 id="デモアプリコンセプトとエンドユーザのイメージ"><a href="#デモアプリコンセプトとエンドユーザのイメージ" class="headerlink" title="デモアプリコンセプトとエンドユーザのイメージ"></a>デモアプリコンセプトとエンドユーザのイメージ</h2><p>今回作成するデモアプリの簡単な背景を決めておきます。私はデマンド交通サービスの提供者であり、複数のイベント提供会社と提携しながら、エリア内のエンドユーザをイベント会場付近まで送迎するサービスを開始したいサービサーだとします。</p><img src="/images/20210826a/image_2.png" alt="デモアプリコンセプトとエンドユーザのイメージ" width="1198" height="526" loading="lazy"><p>この時、エンドユーザ向けのアプリとして「<strong>イベント会場への移動をシームレスに検索できるマルチモーダルMaaSアプリ</strong>」を考えました。今回は、移動手段として、電車とデマンド交通サービス、徒歩を組み合わせた移動を想定します。</p><img src="/images/20210826a/image_3.png" alt="イベント会場への移動をシームレスに検索できるマルチモーダルMaaSアプリイメージ" width="1022" height="210" loading="lazy"><p>このような流れで移動するエンドユーザに対して、イベントの開始時刻に合わせたデマンド交通サービスを検索/予約を提供できるシステムを提供したいと思います。</p><h2 id="システムの構成"><a href="#システムの構成" class="headerlink" title="システムの構成"></a>システムの構成</h2><p>作成するデモアプリのイメージがついたので、実際のサービスに関わるシステムを図に起こしてみます。</p><img src="/images/20210826a/image_4.png" alt="システム構成図" width="1200" height="462" loading="lazy"><p>実際のオンデマンドモビリティサービス運用を考えると、</p><ol><li>車両や乗客、ドライバーの情報を管理する機能</li><li>実際の道路(地図情報)に従って移動経路や時間を計算する機能</li><li>予約を管理する機能</li><li>ドライバー用の運行案内機能</li></ol><p>などなど、エンドユーザが使うアプリケーションの他に多くの管理機能を実装する必要があります。しかし、MONETマーケットプレイスでは、<strong>オンデマンドモビリティに普遍的に必要であろう機能をパッケージ化して利用できる</strong>ようにしています。</p><p>これは <strong>「サービサーはMaaSアプリ開発において付加価値を提供したい部分(エンドユーザ向けアプリ)の開発に注力できる」</strong>ことを意味します。</p><img src="/images/20210826a/image_5.png" alt="サービサーはMaaSアプリ開発において付加価値を提供したい部分(エンドユーザ向けアプリ)の開発に注力できる図" width="1200" height="454" loading="lazy"><p>エンドユーザ向けアプリに必要な機能のインターフェイスとしてAPIを提供しているため、こちらを利用してデモアプリを開発します。</p><h2 id="MONETマーケットプレイスを利用した各種開発"><a href="#MONETマーケットプレイスを利用した各種開発" class="headerlink" title="MONETマーケットプレイスを利用した各種開発"></a>MONETマーケットプレイスを利用した各種開発</h2><p>今回は、エンドユーザ向けアプリをWebアプリとして実装することにより、<strong>PC/Android/iPhoneなどデバイスを問わずに利用できるアプリ</strong>を目指します。</p><p>ここで利用するのは、Vueフレームワークのマテリアルデザインライブラリである<a href="https://vuetifyjs.com/en/">Vuetify</a>です。</p><p>こちらのOSSを使うことにより、</p><ul><li><strong>ブラウザの機能を活用してPC/スマホ両方に対応したアプリケーションの開発</strong></li><li><strong>実装済みのコンポーネントを活用することで実装時間の短縮</strong></li></ul><p>を図ることができ、短期間でサクッと予約アプリを実装できます。</p><p>それでは以下で、実際にどのような場面でMONETマーケットプレイス上のAPIを利用出来るのか、いくつか例を紹介します。</p><h3 id="各種APIを使った管理者Web登録用ポイントの決定"><a href="#各種APIを使った管理者Web登録用ポイントの決定" class="headerlink" title="各種APIを使った管理者Web登録用ポイントの決定"></a>各種APIを使った管理者Web登録用ポイントの決定</h3><p>MONETマーケットプレイスが提供する<a href="https://developer.monet-technologies.co.jp/products/2c92a0fd76f5b2b00176f99cea7463a3">「デマンド交通サービス開発キット」</a>では、運行するデマンド交通サービス用に「ポイント(利用者の乗降地点)」を管理者が設定する必要があります。登録自体はマスタ管理用の画面が用意されているので簡単な操作で追加登録可能です。</p><img src="/images/20210826a/image_6.png" alt="デマンド交通サービス開発キット" width="1200" height="449" loading="lazy"><p>ただ、登録するポイントの緯度経度は管理者があらかじめ自身で用意する必要があります。</p><p>今回のデモアプリではエリア内の駅からイベント付近までの送迎を扱いたいため、駅やイベント会場の緯度経度を取得する必要がありますが、この時に便利なのが以下のAPIです。</p><ol><li><a href="https://developer.monet-technologies.co.jp/products/2c92a00e70cd67470170e25e80cb497d">株式会社ゼンリンデータコム提供「いつもNAVI API」</a></li><li><a href="https://developer.monet-technologies.co.jp/products/2c92a00e77dd376a0177eca2514329af">ぴあ株式会社提供「イベント・公演情報検索 API」 </a></li></ol><p>「いつもNAVI API」では、<strong>POI(Point of Interest)情報を取得することができ、あるエリア内の駅や施設の情報を取得することができます。</strong>しかも、単なる駅の大雑把な緯度経度ではなく、出入り口付近の道路といった細かい緯度経度情報を取得することができ、デマンド交通サービスとの相性が最高です。</p><p>また、イベント会場に関しては、「イベント・公演情報検索 API」を用いることによって会場の地点情報を取得することができます。なお、こちらは建物自体の緯度経度情報になるので、降車ポイントとしては、付近の道路の緯度経度に補正する必要があります。</p><p>ここで嬉しい情報なのですが、「いつもNAVI API」には、”与えられた緯度経度から最寄りの道路上の緯度経度を返すAPI”が存在するため、ふたつを組み合わせることで”イベント会場付近の道路の緯度経度”を取得することができます。</p><p>さらに、パラメータを設定することによって、大きめの道路を選択する、といった細やかな調節も可能になります。</p><p>今回のデモアプリでは、せっかくなので、これらのAPIを活用した乗降地点の設定を行ってみました。</p><ol><li>エリア内の駅の出入り口の緯度経度を取得・乗車用ポイントとして登録</li><li>エリア内のイベント会場の緯度経度を取得</li><li>イベント会場の緯度経度をk-means法でk個に分類</li><li>各クラスタの重心の緯度経度を計算</li><li>計算した緯度経度を道路上に補正・降車用ポイントとして登録</li></ol><p>といった流れで、いい感じのエリア内の乗降車ポイント登録をすることが出来ます。</p><img src="/images/20210826a/image_7.png" alt="乗降車ポイントの登録フロー" width="1026" height="394" loading="lazy"><p>実際のスクリプトとしては2段階に分けて、</p><ul><li>レスポンス形式の加工(XML→CSV)</li><li>クラスタリング処理</li></ul><p>を行いました。レスポンスの形式加工は少々煩雑になってしまいますが、以下のようなPythonスクリプトになります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 「イベント・公演情報検索 API」で取得したイベント情報を利用しやすい形に加工</span></span><br><span class="line"><span class="keyword">import</span> xmltodict</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一旦ぴあAPIのレスポンスを保存して、そちらを読み込む</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example/events.xml&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># CSV形式にコンバート</span></span><br><span class="line">d = xmltodict.parse(data)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example/events.csv&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  writer = csv.writer(f)</span><br><span class="line">  writer.writerow([<span class="string">&quot;id&quot;</span>, <span class="string">&quot;venueCode&quot;</span>, <span class="string">&quot;venueName&quot;</span>, <span class="string">&quot;venueLat&quot;</span>, <span class="string">&quot;venueLon&quot;</span>])</span><br><span class="line"></span><br><span class="line">  event_releases = d[<span class="string">&quot;result&quot;</span>][<span class="string">&quot;eventReleases&quot;</span>][<span class="string">&quot;eventRelease&quot;</span>]</span><br><span class="line">  idx = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> event_release <span class="keyword">in</span> event_releases:</span><br><span class="line">    event = event_release[<span class="string">&quot;event&quot;</span>]</span><br><span class="line">    performs = event_release[<span class="string">&quot;performs&quot;</span>][<span class="string">&quot;perform&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(performs, <span class="built_in">list</span>):</span><br><span class="line">      performs = [performs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> perform <span class="keyword">in</span> performs:</span><br><span class="line">      venue = perform[<span class="string">&quot;venue&quot;</span>]</span><br><span class="line">      venue_name = venue[<span class="string">&quot;venueName&quot;</span>]</span><br><span class="line">      venue_code = venue[<span class="string">&quot;venueCode&quot;</span>]</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot;worldLatitude&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> venue.keys()) <span class="keyword">or</span> (<span class="string">&quot;worldLongitude&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> venue.keys()):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">      venue_lat = <span class="built_in">float</span>(venue[<span class="string">&quot;worldLatitude&quot;</span>])</span><br><span class="line">      venue_lon = <span class="built_in">float</span>(venue[<span class="string">&quot;worldLongitude&quot;</span>])</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 東京会場のみに絞る</span></span><br><span class="line">      <span class="keyword">if</span> venue[<span class="string">&quot;prefectureCode&quot;</span>] != <span class="string">&quot;13&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">      writer.writerow([idx, venue_code, venue_name, venue_lat, venue_lon])</span><br><span class="line">      idx += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>加工したレスポンスから、イベント会場をクラスタリングして重心座標を取得するPythonスクリプトは以下になります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># イベント会場を抽出</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># イベント会場を抽出</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;example/events.csv&quot;</span>)</span><br><span class="line">df_reduced = df.loc[:, [<span class="string">&quot;venueCode&quot;</span>, <span class="string">&quot;venueName&quot;</span>, <span class="string">&quot;venueLat&quot;</span>, <span class="string">&quot;venueLon&quot;</span>]]</span><br><span class="line">df_reduced = df_reduced.drop_duplicates()</span><br><span class="line">df_reduced.to_csv(<span class="string">&quot;example/venues.csv&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># イベント会場をまとめたポイントを生成</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;example/venues.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># イベント会場を7クラスタに分割</span></span><br><span class="line">staNum = <span class="number">7</span></span><br><span class="line">kmeans_model = KMeans(n_clusters=staNum, random_state=<span class="number">10</span>).fit(</span><br><span class="line">    df.loc[:, [<span class="string">&quot;venueLat&quot;</span>, <span class="string">&quot;venueLon&quot;</span>]])</span><br><span class="line">labels = kmeans_model.labels_</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---assigned label---&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;nearestPointId&quot;</span>] = labels+<span class="number">1</span></span><br><span class="line">df.to_csv(<span class="string">&quot;example/fixedVenues.csv&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example/reducedVenues.csv&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  writer = csv.writer(f)</span><br><span class="line">  writer.writerow([<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;meanLat&quot;</span>, <span class="string">&quot;meanLon&quot;</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(staNum):</span><br><span class="line">    name = <span class="string">f&quot;イベント会場<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span></span><br><span class="line">    mean_lat = df[df[<span class="string">&quot;nearestPointId&quot;</span>] == (i+<span class="number">1</span>)].mean()[<span class="string">&quot;venueLat&quot;</span>]</span><br><span class="line">    mean_lon = df[df[<span class="string">&quot;nearestPointId&quot;</span>] == (i+<span class="number">1</span>)].mean()[<span class="string">&quot;venueLon&quot;</span>]</span><br><span class="line">    writer.writerow([i + <span class="number">1</span>, name, mean_lat, mean_lon])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;done!!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>このような形で得られた<code>reducedVenues.csv</code>を参照して、<code>[meanLat,meanLon]</code>を引数として「いつもNAVI API」を利用すると、道路上に補正された緯度経度を得ることができます。</p><p>今回は単なる緯度経度情報のクラスタリングを行いましたが、「イベント・公演情報検索 API」で取得できるイベント情報にはイベント規模を示す情報も含まれているので、こちらで重み付けしたクラスタを計算することも可能です。</p><h3 id="イベント情報やチケット販売情報の表示"><a href="#イベント情報やチケット販売情報の表示" class="headerlink" title="イベント情報やチケット販売情報の表示"></a>イベント情報やチケット販売情報の表示</h3><p>イベント参加を促進させるためには、イベントやチケットの情報を分かりやすく伝える必要があります。</p><p>「イベント・公演情報検索 API」を用いると、イベントの雰囲気を想起させるような画像や説明だけでなく、チケット購入用のURLまで取得できるため、実際のイベント参加に繋がる情報を取得可能です。</p><p>これらの情報をAPIで取得した後、画面にわかりやすく表示する必要がありますが、こちらはVuetifyのコンポーネントを活用することによって、短時間で実装することができます。</p><p>例えば、成形したデータをVuetifyのカレンダーに渡すことによって、1時間もかからずにイベントスケジュールを表示することができました。</p><img src="/images/20210826a/image_8.png" alt="イベントスケジュール" width="1200" height="638" loading="lazy"><p>また、今回はイベントという情報に注目したデモアプリを作ってみましたが、MONETマーケットプレイスには、</p><ul><li><a href="https://developer.monet-technologies.co.jp/products/2c92a0ff74a2d6c00174b89bc12f42de">るるぶDATA 観光API</a></li><li><a href="https://developer.monet-technologies.co.jp/products/2c92a00774a2c96e0174b8a19e0779d5">るるぶDATA 温泉地API</a></li></ul><p>といった、観光情報を提供するAPIも存在しますし、</p><ul><li><a href="https://developer.monet-technologies.co.jp/products/2c92a0fe74b89a350174b89f6c1a04b7">天気予報 API</a></li></ul><p>を組み合わせることで当日の天気に応じた情報提供なども可能で、実現できることは多岐に渡ります。</p><h3 id="地図上に各種情報を表示"><a href="#地図上に各種情報を表示" class="headerlink" title="地図上に各種情報を表示"></a>地図上に各種情報を表示</h3><p>MaaSサービスではさまざまな情報を地図上に表示する必要がありますが、<br>今回は<a href="https://github.com/vue-leaflet/Vue2Leaflet">vue2leaflet</a>と呼ばれるライブラリを利用して、さっくり地図の表示を行ってみました。</p><p>この地図上には、イベント情報や乗降車地点ポイントをピンとして乗せたり、ピンに対して詳細を表示するポップアップを追加することができます。</p><p>また、ゼンリンAPIを使って取得した徒歩経路を地図上に乗せることができます。今回はGeoJSON形式に整形することにより、汎用性を持たせた形で地図上に乗せることができました。</p><img src="/images/20210826a/image_9.png" alt="地図表示" width="698" height="435" loading="lazy"><p>さらに、デマンド交通サービス開発キットの予約検索APIや「いつもNAVI API」の徒歩ルート検索APIを組み合わせることで、経路検索結果をポップアップとして表示することができました。</p><p>なお、予約検索APIでは、</p><ul><li>予約しようとした日時に対して運行している車が稼働しているか</li><li>その時間の前後に既に予約している乗客が存在する場合、希望時間通りに車が到着できるか</li></ul><p>などを見ながら予約可能かどうかを判断し結果を返すため、オーバーブッキングや物理的に不可能な予約は予め弾けるようにレスポンスを返します。</p><img src="/images/20210826a/image_10.png" alt="イベント会場まで移動するまでの経路" width="1200" height="747" loading="lazy"><p>上記画像のように、エンドユーザが自身の最寄り駅からイベント会場まで移動するまでの経路をマルチモーダル的に表示することができました。</p><p>こちらの画面実装もAPIとVuetifyのコンポーネントの組み合わせなので、実装時間はAPIの使い方に慣れる時間を含めても、おおよそ数日です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事のまとめは、</p><p>「MONETマーケットプレイス上のプロダクトとOSSを活用することによって、短時間でMaaSアプリを作成することができる」</p><p>この一言に尽きます。</p><p>もちろん、実際にサービス運用するためには細々した部分を洗練させる必要がありますが、むしろそういったこだわりに時間をかけられるようになるのではないかと感じています。</p><p>本記事を通して、MONETマーケットプレイス上の各プロダクトを用いて独自のMaaSアプリを開発するイメージに繋がれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;MONET Technologies Inc. の竹内です。このたび、フューチャー技術ブログに寄稿させていただいています。&lt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
    <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
    <category term="MaaS" scheme="https://future-architect.github.io/tags/MaaS/"/>
    
    <category term="MONETマーケットプレイス" scheme="https://future-architect.github.io/tags/MONET%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E3%83%97%E3%83%AC%E3%82%A4%E3%82%B9/"/>
    
    <category term="外部寄稿" scheme="https://future-architect.github.io/tags/%E5%A4%96%E9%83%A8%E5%AF%84%E7%A8%BF/"/>
    
    <category term="Vuetify" scheme="https://future-architect.github.io/tags/Vuetify/"/>
    
  </entry>
  
  <entry>
    <title>最高の持ち歩きキーボード考</title>
    <link href="https://future-architect.github.io/articles/20210825b/"/>
    <id>https://future-architect.github.io/articles/20210825b/</id>
    <published>2021-08-24T15:00:01.000Z</published>
    <updated>2021-08-28T04:19:59.236Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210825b/pic0.jpg" alt="" width="1200" height="900" loading="lazy"><p><a href="/articles/20210823a/">フューチャー夏の自由研究連載2021</a>の3日目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。TIGの大野です。2021年4月新卒入社です。</p><p>夏の自由研究連載の2日目「<a href="/articles/20210824a/">Sesame3にICカード施錠/解錠機能を実装してみた with Golang &amp; Python</a>」を投稿された宮永さんの同期です。</p><p>現在所属するプロジェクトでの私の主な業務の一つは、お客様先へ出張して会議に出席し、議事録を取ることです。せっかくなら、出張先でもお気に入りのキーボードで楽しく議事録を取りたいですよね。</p><p>そこで、この記事では、出張のお供にぴったりな「最高の持ち歩きキーボード」を考察・製作していきたいと思います！</p><h1 id="設計方針"><a href="#設計方針" class="headerlink" title="設計方針"></a>設計方針</h1><p>製作を始める前に、まずは「最高の持ち歩きキーボード」に必要な条件を整理してみます。</p><h3 id="携帯性"><a href="#携帯性" class="headerlink" title="携帯性"></a>携帯性</h3><p>やはり「持ち歩き」キーボードですから、携帯性は不可欠でしょう。具体的には、以下のような条件が考えられます。</p><ul><li><strong>コンパクトであること</strong><br>最低でも、A4サイズの鞄にすっぽり入るくらいのサイズ感でないと論外です。分割キーボードという選択肢もありますが、左右を接続するTRRSケーブルを持ち歩くのが億劫だったため、今回は一枚板の60%キーボードを採用します。本当は40%キーボードに挑戦しようかと思ったのですが、議事録を取るという目的がある以上、数字キーは欲しいなと思い、諦めました……。</li><li><strong>軽いこと</strong><br>あんまり重たいと持ち歩く気をなくしてしまいます。かといって、あまりに軽いと打鍵の衝撃でキーボードが動いてしまうので、いい塩梅の重さが必要です。感覚としては、500mlペットボトル1本分=約500gくらいの重さだと良いかなと思っています。</li><li><strong>頑丈であること</strong><br>持ち運ぶものですから、気軽に鞄に放り込めるような頑丈さもほしいところです。わざわざキーボード用の外袋を用意するのは面倒なので、キーボード自体に蓋があるとなお良いです。</li></ul><p>※<strong>ちなみに、分割キーボードのビルドに関しては、過去に「<a href="/articles/20200909/">キーボードを組み立ててみた話</a>」という記事が公開されています。キーボードの分割にご興味のある方は、ぜひご覧ください！</strong></p><h3 id="静音性"><a href="#静音性" class="headerlink" title="静音性"></a>静音性</h3><p>持ち歩いて使う以上、必然的に人のいる場で使う機会が多くなることが予想されます。真面目な会議をしている場で、私の打鍵音が響き渡る……なんて事態は避けたいので、ある程度の静音性も必須です。</p><p>目安としては、ノートPC付属のキーボード以下くらいの静音性は欲しいところです。</p><h3 id="Coolさ"><a href="#Coolさ" class="headerlink" title="Coolさ"></a>Coolさ</h3><p><strong>これが一番大事です。</strong><br>今回のコンセプトはずばり、どこに出しても恥ずかしくない、<strong>「ナチュラル&amp;ボタニカルな大人のキーボード」</strong>です。疲れたときにふと手元を見るとふわりと癒やしてくれるような、目にも心にも優しいキーボードを目指します。</p><h1 id="部品選定"><a href="#部品選定" class="headerlink" title="部品選定"></a>部品選定</h1><p>前項で決めた設計方針に基づいて、パーツを決めていきます。パーツのほとんどは、<a href="https://shop.yushakobo.jp/">遊舎工房</a>と<a href="https://kbdfans.com/">KBDFANS</a>で購入しました。</p><p>キーボードを作るのに必要なパーツは、大きく以下のものがあります。</p><img src="/images/20210825b/pic1.png" alt="キーボードパーツ" width="1090" height="818" loading="lazy"><p><strong>① ケース</strong><br>PCBを収めるケースです。PCBの規格にあったものを選びます。一番外側の、見た目に大きく関わるパーツの一つです。今回は、軽くて丈夫、おまけに蓋までついていて持ち歩きにぴったりなウォールナット製のケースを採用します。また、打鍵時にケース内で音が反響してしまうのを緩和するスポンジも追加します。</p><p><strong>②プレート</strong><br>キースイッチをはめ込むための穴が空いたプレートです。キースイッチのグラつきを抑えます。これも、PCBの規格にあったものを選びます。真鍮製の方が音が良いという意見がありますが、お財布事情によりアルミ製です。</p><p><strong>③PCB（プリント基板）&amp;コントローラ</strong><br>キーボードの核となる、回路を収めた基板です。キースイッチ、USBインタフェース、Nキーロールオーバー時の回路の誤動作を防止するダイオード、キーボードを光らせるLED、そしてPCと通信するためのコントローラなどを実装します。今回は、最初からキースイッチ以外のパーツがすべて実装されている<a href="https://shop.yushakobo.jp/products/dz60">DZ60</a>というPCBを使用します。実装されているUSBインタフェースがType-CなのもGoodです。</p><p><strong>④キースイッチ</strong><br>キーボードの主役、キースイッチです。私は普段、<a href="https://talpkeyboard.net/items/5fd61629b00aa37e7271319d">FEKER Like Holy Panda</a>というタクタイル軸を愛用しているのですが、この軸の魅力はなんといっても、ハイヒールで石畳を歩くときのようなコツコツとした硬質な打鍵音です。自宅で使う分には大変良いのですが、会議の場では顰蹙を買うこと間違いなしです。そこで、今回は<a href="https://shop.yushakobo.jp/products/novelkeys-cream-switches">NovelKeys Cream Switch</a>というリニア軸に挑戦してみます。サクサクとした打鍵感、ブレのない軸、そしてこの優しいクリーム色がお気に入りです。</p><p><strong>⑤キーキャップ</strong><br>キースイッチに被せるキャップです。ケース同様、見た目に大きく関わるパーツの一つです。また、指ざわりや打鍵音に影響するため、その材質も重要なポイントです。今回は、静音性を意識して比較的打鍵音が低めのPBT素材のものを選びました。PBT特有のざらざらとした質感が高級感を演出します。</p><p><strong>⑥スタビライザー</strong><br>スペースキーやエンターキーなど、長いキーを支えるためのパーツです。作成したいキー配列に合わせて、必要数用意します。PCBにネジ止めするタイプと爪で引っ掛けるタイプがあり、前者のほうが静音性が高いのですが、お財布と相談して今回は爪で引っ掛けるタイプのものを使用します。その代わり、スタビライザーとPCBが接する面に布テープを貼ることで反響音を緩和してあげます。</p><h1 id="組み立て"><a href="#組み立て" class="headerlink" title="組み立て"></a>組み立て</h1><p>パーツを集め終えたら、あとはPCBにパーツをはんだづけするのみです！</p><p>と言いたいのですが、まずはキースイッチとスタビライザーをルブしていきます。「ルブ」とは、パーツに潤滑油を塗ることで、これをするとしないで、打鍵のスムーズさや静音性が大きく変わってきます。80個ほどのパーツを一つひとつ分解して潤滑油を塗っていく大変な作業ですが、頑張って塗ります。</p><p>今回は、スプリングに<a href="https://shop.yushakobo.jp/products/lubricants?variant=37665261060257">Krytox GPL 105</a>を、ステムとボトムハウジング（写真中クリーム色のパーツ）に<a href="https://shop.yushakobo.jp/products/lubricants?variant=37665260994721">Krytox GPL 205 Grade 0</a>を使用しました。</p><img src="/images/20210825b/pic2.png" alt="ステムとボトムハウジング" width="1136" height="852" loading="lazy"><p>ルブし終えたら、いよいよはんだづけするのみです。</p><p>多様なキー配列を実現するため、PCBにはたくさんのキースイッチ用スルーホールが空いています。自分の作りたい配列をよく確認し、どこにはんだづけするか、間違えないように気をつけて実装していきます。</p><img src="/images/20210825b/pic3.JPG" alt="はんだ付け" width="1200" height="900" loading="lazy"><p>はんだづけを終えたら残りのパーツを取り付けていき、組み立て完了です！<br>ぱっきり割れたスペースバーがキュートです。</p><img src="/images/20210825b/pic4.JPG" alt="完成したキーボード" width="1200" height="900" loading="lazy"><h1 id="ファームウェア作成"><a href="#ファームウェア作成" class="headerlink" title="ファームウェア作成"></a>ファームウェア作成</h1><p>DZ60の場合は、最初からファームウェアが書き込まれているため、このままでもキーボードとして使えます。しかし、自作キーボードの醍醐味はやはり自分でキーマップをカスタムすることです。ということで、これからオリジナルのファームウェアを作成していきます。</p><p>とはいえ、1からファームウェアを自作するのはとても大変です。そこで、自作キーボードでは、<a href="https://github.com/qmk/qmk_firmware">QMK Firmware</a>というオープンソースファームウェアの利用が一般的です。</p><p>頒布されている自作キーボードのDIYキットやPCBの多くは、QMKのGitリポジトリ上で専用のファームウェアが公開されています。DZ60もQMK上でファームウェアが公開されているため、今回は<a href="https://github.com/qmk/qmk_firmware/tree/master/keyboards/dz60">そちら</a>を利用します。</p><p>DZ60のファームウェア構成は以下のようになっています。</p><figure class="highlight sh"><figcaption><span>qmk_firmware/keyboards/dz60/</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config.h</span><br><span class="line">dz60.c</span><br><span class="line">dz60.h</span><br><span class="line">info.json</span><br><span class="line">readme.md</span><br><span class="line">rules.mk</span><br><span class="line">keymaps</span><br><span class="line">   └─ &lt;キーマップ名&gt;</span><br><span class="line">         └─ keymap.c</span><br></pre></td></tr></table></figure><p>ピンの割当といった<code>keymaps</code>以外の共通定義はそのまますべてお借りし、<code>keymaps</code>にオリジナルのキーマップ定義を追加するという方法で、ファームウェアを作成していきます。</p><p>実際に作成したキーマップの<code>kurumi</code>がこちらです！</p><figure class="highlight c"><figcaption><span>keymaps/kurumi/keymap.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> QMK_KEYBOARD_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* keymap layer name */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">keymap_layer</span> &#123;</span></span><br><span class="line">_BL,</span><br><span class="line">_FL,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* custom keycode name */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">custom_keycoads</span>&#123;</span></span><br><span class="line">M_HNZN,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ______ KC_TRNS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint16_t</span> PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* BASE Layer</span></span><br><span class="line"><span class="comment">   * ,-----------------------------------------------------------------------------------------.</span></span><br><span class="line"><span class="comment">   * | Esc |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  |   Bkspc   |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * | Tab    |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |    \   |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * | HNZN    |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  &#x27;  |    Enter    |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * | Shift     |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  |  /  | ` ~ |  U  | Del |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * | Ctrl |  Win  |  Alt  |    Space    | _FN |     Space     | Alt | Ctrl |  L  |  D  |  R  |</span></span><br><span class="line"><span class="comment">   * `-----------------------------------------------------------------------------------------&#x27;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">[_BL] = LAYOUT_directional(</span><br><span class="line">      KC_ESC,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  ______,  KC_BSPC,</span><br><span class="line">      KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC, KC_RBRC, KC_BSLS,</span><br><span class="line">      M_HNZN,  KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT, KC_ENT,</span><br><span class="line">      KC_LSFT, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH, KC_GRV,  KC_UP,   KC_DEL,</span><br><span class="line">      KC_LCTL, KC_LGUI, KC_LALT, KC_SPC,  MO(_FL), KC_SPC,  KC_RALT, KC_RCTL, KC_LEFT, KC_DOWN, KC_RIGHT</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* FN Layer</span></span><br><span class="line"><span class="comment">   * ,-----------------------------------------------------------------------------------------.</span></span><br><span class="line"><span class="comment">   * |Reset|  F1 |  F2 |  F3 |  F4 |  F5 |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |           |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * |        |     |     | Esc |     |     |     |     | Ins |     | Psc |     |     |        |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * |         | App |     | Del |     |     |  L  |  D  |  U  |  R  |     |     |             |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * |           |     |     |     |     |     |  HM | End |     |     |     |     |     |     |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * | Ctrl |  Win  |  Alt  |             | _BS |               | Alt | Ctrl |     |     |     |</span></span><br><span class="line"><span class="comment">   * `-----------------------------------------------------------------------------------------&#x27;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  [_FL] = LAYOUT_directional(</span><br><span class="line">      RESET,   KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  ______,  ______,</span><br><span class="line">      ______,  ______,  ______,  KC_ESC,  ______,  ______,  ______,  ______,  KC_INS,  ______,  KC_PSCR, ______,  ______,  ______,</span><br><span class="line">      ______,  KC_APP,  ______,  KC_DEL,  ______,  ______,  KC_LEFT, KC_DOWN, KC_UP,   KC_RIGHT,______,  ______,  ______,</span><br><span class="line">      ______,  ______,  ______,  ______,  ______,  ______,  KC_HOME, KC_END,  ______,  ______,  ______,  ______,  ______,  ______,</span><br><span class="line">      KC_LCTL, KC_LGUI, KC_LALT, ______,  ______,  ______,  KC_RALT, KC_RCTL, ______,  ______,  ______</span><br><span class="line">      ),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* result of process_record_user */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_OVERRIDE_BEHAVIOR   (false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_USUAL_BEHAVIOR      (true)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">process_record_user</span><span class="params">(<span class="keyword">uint16_t</span> keycode, <span class="keyword">keyrecord_t</span> *record)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (keycode) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> M_HNZN: &#123;</span><br><span class="line"><span class="keyword">if</span>(record-&gt;event.pressed)&#123;</span><br><span class="line">SEND_STRING(SS_LALT(<span class="string">&quot;`&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> PROCESS_OVERRIDE_BEHAVIOR;</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PROCESS_USUAL_BEHAVIOR;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>キーマップ作成に際し、工夫したポイントは次の2つです。</p><h3 id="親指の位置にレイヤーキー"><a href="#親指の位置にレイヤーキー" class="headerlink" title="親指の位置にレイヤーキー"></a>親指の位置にレイヤーキー</h3><p>なにせ60%キーボード、キーの数が足りないので、足りないキーを仮想的に補うレイヤー機能を使う必要があります。今回の場合は、<code>MO(_FL)</code>キーを用意し、このキーを押している間だけ入力レイヤーがファンクションレイヤーに切り替わるという手法を取りました。</p><p>ここで重要なのが、どのキーに<code>MO(_FL)</code>キーを割り当てるかという点です。キー割り当てが比較的空いているのはベースレイヤーの右下のあたりですが、レイヤー切り替えのたびに右手の小指が攣りそうになるので却下です。</p><p>そこで、今回はスペースバーを真っ二つに割り、ど真ん中にレイヤーキーを配置してみました。ホームポジションに指を置いた際、ちょうど右手親指が右スペースキーとレイヤーキーの間に来るようになっており、自然なキータッチでレイヤーキーを押下できます。もちろん左手親指からもすぐ近くなので、押したいキーに合わせて押下する手を変えることも簡単です。</p><p>普通のキー配列ではサボりがちな親指をうまく有効活用できたかなと思います。</p><h3 id="US配列で半角-全角キーを再現"><a href="#US配列で半角-全角キーを再現" class="headerlink" title="US配列で半角/全角キーを再現"></a>US配列で半角/全角キーを再現</h3><p>US配列の大きな欠点は、半角/全角キーがないことです。<code>Alt</code>+<code>~</code>キーで半角/全角を切り替えられますが、頻繁に使う半角/全角切り替えを1キーでできないのは、耐えがたいことです。</p><p>そこで、<a href="https://www.taneyats.com/entry/qmk-ime-toggle">こちらの記事</a>を参考に<code>M_HNZN</code>というマクロを作成し、CapsLockキーに割り当てることで、無事1タップでの半角/全角切り替えを実現しました。マクロは、キー入力検知時に毎回呼び出される関数<code>process_record_user</code>内で以下のように定義しています。</p><figure class="highlight c"><figcaption><span>keymaps/kurumi/keymap.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> M_HNZN: &#123;</span><br><span class="line">    <span class="keyword">if</span>(record-&gt;event.pressed)&#123;</span><br><span class="line">          SEND_STRING(SS_LALT(<span class="string">&quot;`&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PROCESS_OVERRIDE_BEHAVIOR;</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p><code>M_HNZN</code>キー押下時、元々定義されたキーコードの送信をキャンセルし、<code>左Alt</code>+<code>~</code>キーコードを送信するという処理です。今回はごくシンプルな構成ですが、やろうと思えばキーのタップや長押しなど、様々なキー入力の状態に合わせてマクロを組むことができます。時間を見つけて色々試して見ようと思います。</p><p>「要らない子」と言われて久しいCapsLockキーの救済も兼ねた一石二鳥のマクロでした。</p><h1 id="ファームウェア書き込み"><a href="#ファームウェア書き込み" class="headerlink" title="ファームウェア書き込み"></a>ファームウェア書き込み</h1><p>いよいよファームウェアを書き込んでいきます。</p><p>なお、QMK Projectには<a href="https://github.com/qmk/qmk_configurator">QMK Configurator</a>や<a href="https://github.com/qmk/qmk_toolbox">QMK Toolbox</a>といったファームウェア作成・書き込みのための便利なツールも存在するのですが、今回は<a href="https://www.msys2.org/">MSYS2</a>上に構築したQMK環境でビルドしていきます。環境構築の詳細は<a href="https://docs.qmk.fm/#/newbs_getting_started">公式ドキュメント</a>をご参照ください。（なお、以下のビルド手順は、2021/08/25時点の<a href="https://docs.qmk.fm/#/newbs_getting_started">公式ドキュメント</a>で紹介されている手順より古いものですので、ご注意ください。）</p><p>まずはQMK Firmwareをインストールしたディレクトリまで移動し、さきほど作成したキーマップの<code>kurumi</code>を指定してファームウェアをコンパイルします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make dz60:kurumi</span><br></pre></td></tr></table></figure><p>問題なければ、<code>hex</code>ファイルが出力されます。続いて以下のコマンドを実行し、ファームウェアを書き込みます。<code>dfu</code>はブートローダーの種類を指定するオプションです。DZ60に搭載されているブートローダーは<code>atmel-dfu</code>なので、<code>dfu</code>を指定しています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make dz60:kurumi:dfu</span><br></pre></td></tr></table></figure><p>途中でブートローダーの起動を求められるので、キーボートを接続し、リセットボタンを押下して起動します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dfu-programmer: no device present.</span><br><span class="line">ERROR: Bootloader not found. Trying again <span class="keyword">in</span> 5s.</span><br><span class="line">Bootloader Version: 0x00 (0)</span><br><span class="line">Erasing flash...  Success</span><br><span class="line">Checking memory from 0x0 to 0x6FFF...  Empty.</span><br><span class="line">0%                            100%  Programming 0x5B80 bytes...</span><br><span class="line">[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]  Success</span><br><span class="line">0%                            100%  Reading 0x7000 bytes...</span><br><span class="line">[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]  Success</span><br><span class="line">Validating...  Success</span><br><span class="line">0x5B80 bytes written into 0x7000 bytes memory (81.70%).</span><br></pre></td></tr></table></figure><p>このように表示されれば、書き込み成功です！</p><p>これで本当に完成です！やったー！！</p><h1 id="使ってみて"><a href="#使ってみて" class="headerlink" title="使ってみて"></a>使ってみて</h1><p>先日初めての出張があったので、早速使ってみました。</p><p>最初に立てた設計方針に照らし合わせてキーボードを評価していきます。</p><ul><li><strong>携帯性：★★☆☆☆</strong><ul><li>縦横の大きさは許容範囲ですが、蓋付きのケースにしたことで約5cmの分厚さになってしまいました。バッグの中での主張が激しいです。</li><li>そこそこ重いです。量ったら、約700gでした。電車など、座っての移動であれば問題ありませんが、「持ち歩き」となると重さが気になります。</li></ul></li><li><strong>静音性：★★★★☆</strong><ul><li>やはり静音モデルのキーボードには負けますが、十分な静音性を確保できました。打鍵音はするのですが、「コトコト」といった感じで音が低いので、会議室ではあまり目立ちません。</li></ul></li><li><strong>Coolさ：★★★★★</strong><ul><li>見た目は大満足です！MA Profileという丸みを帯びた特徴的な形のキーキャップが、ウォールナット製のケースと相まってタイプライターのような趣を醸し出しています。</li><li>実は、ケースの蓋がちょうどよいパームレストになります。機能美です。</li></ul></li></ul><img src="/images/20210825b/pic5.JPG" alt="キーボードを中心としたデスク画像" width="1200" height="900" loading="lazy"><p>反省点もありますが、なんだかんだで愛着の湧く、良いキーボードができました。キーマップなどは、これから使っていく中でどんどん改良していきたいと思います。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>せっかく作ったキーボードですが、新型コロナウイルスの感染拡大を受け、しばらく出張停止になったことでさっそく活躍機会がなくなってしまいました……。自由に歩きまわることのできる生活が早く帰ってくることを切に願うばかりです。</p><p>それまでは、ステイホームでタイピング練習を頑張ります！</p><p><a href="/articles/20210823a/">フューチャー夏の自由研究連載2021</a>、次の記事は真野さんによる「<a href="/articles/20210826b/">フォワードプロキシ</a>」です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210825b/pic0.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;900&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/articles/20210823a/&quot;&gt;フューチャー夏の自由研究連載2021</summary>
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="電子工作" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/"/>
    
    <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
    <category term="自作キーボード" scheme="https://future-architect.github.io/tags/%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>AWS Certified DevOps Engineer - Professional合格体験記</title>
    <link href="https://future-architect.github.io/articles/20210825a/"/>
    <id>https://future-architect.github.io/articles/20210825a/</id>
    <published>2021-08-24T15:00:00.000Z</published>
    <updated>2021-08-28T04:19:59.233Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>先日AWS Certified DevOps Engineer – Professionalを受験し合格できました。</p><p>これにて専門知識以外はコンプリートしました、<a href="/articles/20200729/">Machine learning specialtyも合格している</a>ので7冠です。</p><img src="/images/20210825a/image.png" alt="合格バッチ" width="450" height="450" loading="lazy"><h1 id="AWS-Certified-DevOps-Engineer-–-Professionalとは"><a href="#AWS-Certified-DevOps-Engineer-–-Professionalとは" class="headerlink" title="AWS Certified DevOps Engineer – Professionalとは"></a>AWS Certified DevOps Engineer – Professionalとは</h1><p>その名の通りDevOpsに特化したテストで、Solutions Architect - Professionalと双璧をなすような存在です。下位資格にSysOps Administrator – AssociateとDeveloper – Associateが存在します。</p><p>ここでのAssociateはおそらく準学士のようなニュアンスだと思いますが、Professionalと名のつく資格を持つと一人前のような気持ちになるので嬉しいですね。</p><p>試験の内容自体は下記のようなテーマが問われます。</p><ul><li>運用の自動化、CI/CD</li><li>ダウンタイムやコストを考慮したデプロイ戦略</li><li>セキュリティコンプライアンス</li><li>スケーリングのベストプラクティス</li><li>モニタリング、ログ記録</li></ul><p>具体的にはAWS CloudFormation、AWS OpsWorks、AWS Elastic Beanstalkなどデプロイ、構成管理を行うサービス群や、Amazon CloudWatch、 Amazon Inspectorなど監視、運用に役立つサービスのベストプラクティスを軸に、DevOpsについて比較的難易度の高い問題が出題されます。</p><p>可用性、スケーリングに関する問題も出題され、一部はSolutions Architect - Professionalで解いた覚えのある問題も出てきました。</p><p>余談ですがデプロイ戦略としてBlue/Greenデプロイがとても推されている印象を感じました。</p><h1 id="勉強方法"><a href="#勉強方法" class="headerlink" title="勉強方法"></a>勉強方法</h1><p>今回はSAPでとても役に立った実績を信じ、<a href="https://aws.koiwaclub.com/">aws.koiwaclub.com</a>一発で臨みました。</p><p>全体的に質の高い模擬意見の内容で、５問以上はほぼそのままの問題が出てくる文句なしのクオリティでした。合格ライン750点に対し837点という安心感のある点数を取る事ができました。</p><p>Solutions Architect – Professionalと比較すると試験の難易度はやや低いものの、教材のコンテンツ量はどのサービスでも目減りしているので、事前に他の試験に合格していない人が0から合格するという観点では逆に難しいかもしれません。実際Solutions Architect – Professionalに合格しているお陰で解けた問題は多いです。</p><p>各種下位資格、Solutions Architect - Professionalを修めてから仕上げに受験するパターンで山を登っていくのが安全な印象です。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>実はDeveloper – AssociateはSolutions Architect - Professionalの後に一気に取得したのですが記事のネタにし損ねました。</p><p>先日<a href="/articles/20210818b/">AWS Certified Solutions Architect - Associate 合格体験記</a>を書いた市川さんに期待して温存しておきたいなと思います。</p><p>引き続き全冠目指して頑張ります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;先日AWS Certified DevOps Engineer – Professionalを受験し合格できました。&lt;/p&gt;
&lt;p&gt;これにて専門知識以外はコンプリートしました、&lt;a href=&quot;/articles/20200729/&quot;&gt;</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>Sesame3にICカード施錠/解錠機能を実装してみた with Go &amp; Python</title>
    <link href="https://future-architect.github.io/articles/20210824a/"/>
    <id>https://future-architect.github.io/articles/20210824a/</id>
    <published>2021-08-23T15:00:00.000Z</published>
    <updated>2021-08-28T04:19:59.229Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210824a/サムネ.png" alt="" width="" height="" loading="lazy"><p>Photo by <a href="https://unsplash.com/@davidclode?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">David Clode</a> on <a href="https://unsplash.com/s/photos/python-programming?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>. The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renee French</a>.</p><p>※本記事で紹介している認証方法はFelicaのIDmのみを使用しております。IDm単体での認証はセキュリティ上望ましくないため、本記事を参考にされる方はご注意ください。</p><h2 id="0-はじめに"><a href="#0-はじめに" class="headerlink" title="0. はじめに"></a>0. はじめに</h2><p>はじめまして、2021年4月入社TIG/DXユニット所属の宮永です。</p><p><a href="/articles/20210823a/">夏の自由研究ブログ連載2021</a>の第2本目の投稿として、Sesame3にFelicaによる施錠解錠を実装しました。</p><p>作成したプログラムは <a href="https://github.com/orangekame3/gopy-sesame3">orangekame3/gopy-sesame3: Sesame3のAPIをたたくクライアントアプリ</a>にて公開しています。</p><h2 id="1-動機"><a href="#1-動機" class="headerlink" title="1. 動機"></a>1. 動機</h2><p>私が所属しているプロジェクトではGoをメイン言語としています。Go未経験者である私は身の回りで楽しみながら言語を学べるブツはないかと探しました。</p><p>するとそこにはSesame3がありました。</p><h2 id="2-Sesame3とは"><a href="#2-Sesame3とは" class="headerlink" title="2. Sesame3とは"></a>2. Sesame3とは</h2><img src="/images/20210824a/DSC_0478.JPG" alt="Sesame3の箱" width="1200" height="676" loading="lazy"><p>Sesame3は<a href="https://jp.candyhouse.co/">CANDY HOUSE JAPAN</a>が開発、販売しているスマートロックです。Sesame3本体に加えてwifiモジュールを購入すると、外出先から鍵の施錠/解錠を行うことができます。</p><p>また、6月にCANDY HOUSE公式で<a href="https://doc.candyhouse.co/ja/SesameAPI">Web API</a>が公開されており、鍵の状態確認、施錠/解錠などを行うことができます。</p><p>今回はこのデバイスを使ってFelicaによる施錠と解錠の機能を実装したいと思います。</p><h2 id="3-必要なもの"><a href="#3-必要なもの" class="headerlink" title="3. 必要なもの"></a>3. 必要なもの</h2><p>実装に使用したものを列挙します</p><h3 id="3-1-ハード"><a href="#3-1-ハード" class="headerlink" title="3.1. ハード"></a>3.1. ハード</h3><ul><li><a href="https://jp.candyhouse.co/products/sesame3?variant=33274924367935">SESAME３ – CANDY HOUSE JAPAN</a></li><li><a href="https://www.amazon.co.jp/dp/B00VR1WARC">非接触ＩＣカードリーダー | NFCポート パソリ | ソニー</a></li><li><a href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/">Raspberry Pi 3 Model B+ – Raspberry Pi</a></li><li><a href="https://akizukidenshi.com/catalog/g/gP-03285/">スピーカー　８Ω８Ｗ: パーツ一般 秋月電子通商-電子部品・ネット通販</a></li><li><a href="https://akizukidenshi.com/catalog/g/gC-08853/">３．５ｍｍステレオミニプラグ⇔スクリュー端子台: パーツ一般 秋月電子通商-電子部品・ネット通販</a></li><li><a href="https://akizukidenshi.com/catalog/g/gK-08217/">ＰＡＭ８０１２使用２ワットＤ級アンプモジュール: 組立キット(モジュール) 秋月電子通商-電子部品・ネット通販</a></li></ul><h3 id="3-2-ソフト"><a href="#3-2-ソフト" class="headerlink" title="3.2. ソフト"></a>3.2. ソフト</h3><p>開発はWindows10環境、WSL2上で行いました。</p><ul><li>Go1.16.6 linux/amd64</li><li>Python 3.8.10<ul><li><a href="https://github.com/nfcpy/nfcpy">nfcpy/nfcpy: A Python module to read/write NFC tags or communicate with another NFC device.</a></li><li><a href="https://github.com/theskumar/python-dotenv">theskumar/python-dotenv: Get and set values in your .env file in local and production servers.</a></li><li><a href="https://github.com/Legrandin/pycryptodome">Legrandin/pycryptodome: A self-contained cryptographic library for Python</a></li></ul></li></ul><p>Sesame3を動かすWebAPIは<a href="https://dash.candyhouse.co/login">こちら</a>からAPI_TOKENを発行してください。<br>API_TOKENの発行の方法は<a href="https://zenn.dev/key3/articles/6c1c2841d7a8a2">こちら</a>のブログが参考になりました。</p><p>施錠/解錠に必要な情報は</p><ul><li>API_TOKEN</li><li>UUID</li><li>SECRET_KEY</li></ul><p>の3つです。</p><h2 id="4-構成"><a href="#4-構成" class="headerlink" title="4. 構成"></a>4. 構成</h2><p>PythonでカードリーダーによるIDmの読み取りと<code>SECRET_KEY</code>の暗号化を行い、GoでHTTPリクエストを行うという構成にしました。<br>この構成にした理由は..</p><ol><li>Pythonに便利なモジュールがあった</li><li>Goに少しでも慣れたかった</li><li>cgoというものを見つけてしまった</li></ol><p>の3点です。本来であれば素直にPython1本、Go1本に絞ったほうが良いと思います….</p><h3 id="4-1-システム概要図"><a href="#4-1-システム概要図" class="headerlink" title="4.1 システム概要図"></a>4.1 システム概要図</h3><p>以下システムの概要図です。</p><p>Raspberry Piにカードリーダー、スピーカーを接続しています。PythonでカードーリーダーからFelicaのIDmを取得し、暗号化したSECRET_KEYとAPI_TOKENをGo側に渡します。また、IDmの検知をユーザーに通知音で知らせています。GOではCANDY HOUSEが公開しているWeb APIに向けてHTTPリクエストを行います。リクエストに応じて、SESAME3を開閉することができるという構成になっています。</p><img src="/images/20210824a/image.png" alt="システム構成図" width="1200" height="933" loading="lazy"><h3 id="4-2-ディレクトリの構成"><a href="#4-2-ディレクトリの構成" class="headerlink" title="4.2. ディレクトリの構成"></a>4.2. ディレクトリの構成</h3><p>ビルド前のディレクトリの構成です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── <span class="built_in">export</span></span><br><span class="line">│   ├── export.go</span><br><span class="line">│   └── go.mod</span><br><span class="line">├── main.py</span><br><span class="line">├── nfcreader.py</span><br><span class="line">└── notify.wav</span><br></pre></td></tr></table></figure><h2 id="5-実装"><a href="#5-実装" class="headerlink" title="5. 実装"></a>5. 実装</h2><p> APIの使用方法は<a href="https://doc.candyhouse.co/ja/SesameAPI">公式</a>にて、PythonおよびJavaScriptで公開されています。</p><p>今回は公式に記載された方法を手掛かりにコーディングしました。</p><h3 id="5-1-HTTPリクエスト"><a href="#5-1-HTTPリクエスト" class="headerlink" title="5.1. HTTPリクエスト"></a>5.1. HTTPリクエスト</h3><p>GoでHTTPリクエストを実装します。今回は<code>cgo</code>を使用するため、構造体はなるべく使わずメソッドのみで完結させます。</p><p>まずは変数定義です。<code>rootUrl</code>は公式に記載されたendpointです。コマンドに応じて<code>rootUrl</code>に追記していきます。<code>cmd_unlock</code>、<code>cmd_lock</code>は公式ページに指定された解錠コマンドおよび施錠コマンドです。<code>src</code>にはアプリに登録する履歴名を指定しています。今回は<code>by Felica</code>という名前で登録しています。</p><figure class="highlight go"><figcaption><span>export.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">rootUrl    = <span class="string">&quot;https://app.candyhouse.co/api/sesame2/&quot;</span></span><br><span class="line">cmd_unlock = <span class="number">83</span></span><br><span class="line">cmd_lock   = <span class="number">82</span></span><br><span class="line">src        = []<span class="keyword">byte</span>(<span class="string">&quot;by Felica&quot;</span>)</span><br><span class="line">history    = base64.StdEncoding.EncodeToString(src)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>続いて、HTTPリクエストに使用するJSONを格納するための構造体を定義します。こちらも<br>公式に記載されているJSONの定義を参考にしました。</p><figure class="highlight go"><figcaption><span>export.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RequestBody <span class="keyword">struct</span> &#123;</span><br><span class="line">Cmd     <span class="keyword">int</span>    <span class="string">`json:&quot;cmd&quot;`</span></span><br><span class="line">History <span class="keyword">string</span> <span class="string">`json:&quot;history&quot;`</span></span><br><span class="line">Sign    <span class="keyword">string</span> <span class="string">`json:&quot;sign&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ResponseBody <span class="keyword">struct</span> &#123;</span><br><span class="line">BatteryPercentage <span class="keyword">int</span>     <span class="string">`json:&quot;batteryPercentage&quot;`</span></span><br><span class="line">BatteryVoltage    <span class="keyword">float64</span> <span class="string">`json:&quot;batteryVoltage&quot;`</span></span><br><span class="line">Position          <span class="keyword">int</span>     <span class="string">`json:&quot;position&quot;`</span></span><br><span class="line">CHSesame2Status   <span class="keyword">string</span>  <span class="string">`json:&quot;CHSesame2Status&quot;`</span></span><br><span class="line">Timestamp         <span class="keyword">int</span>     <span class="string">`json:&quot;timestamp&quot;`</span></span><br><span class="line">Wm2State          <span class="keyword">bool</span>    <span class="string">`json:&quot;wm2State&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>それでは、鍵の開閉を行う関数<code>executeSesame3</code>を実装します。関数内で指定された引数<code>signPtr</code>、<code>apiPtr</code>、<code>uuidPtr</code>はPythonから渡されることを想定しています。<code>C.</code>を指定することで<code>cgo</code>内の関数を使用することができます。</p><p>ここで一つ注意が必要です。<code>cgo</code>を利用する際はメソッドの上のコメントを関数名にそろえる必要があります。</p><p>開閉の流れとしては「施錠中/解錠中の確認<code>fetchStatus</code>」→「解錠中<code>isUnlocked</code>であれば<code>executeLock</code>を実行」、「施錠中であれば<code>executeUnlock</code>を実行する」という構成です。</p><figure class="highlight go"><figcaption><span>export.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//export executeSesame3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">executeSesame3</span><span class="params">(signPtr, apiPtr, uuidPtr *C.char)</span></span> &#123;</span><br><span class="line"><span class="comment">// sign,api,uuidはpython側から入力されるSIGN,API_TOKEN.UUIDに一致する</span></span><br><span class="line">sign := C.GoString(signPtr)</span><br><span class="line">api := C.GoString(apiPtr)</span><br><span class="line">uuid := C.GoString(uuidPtr)</span><br><span class="line"><span class="comment">// fetchStatusでは鍵の状態を読みこんでいる</span></span><br><span class="line">key_status := fetchStatus(api, uuid)</span><br><span class="line"><span class="comment">//executeLockで施錠を、executeUnlockで解錠を行う</span></span><br><span class="line"><span class="keyword">if</span> isUnlocked(key_status) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Key is &quot;</span> + key_status + <span class="string">&quot;. Locking ...&quot;</span>)</span><br><span class="line">executeResponse := executeLock(sign, api, uuid)</span><br><span class="line">fmt.Println(executeResponse)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Key is &quot;</span> + key_status + <span class="string">&quot;. Unlocking ...&quot;</span>)</span><br><span class="line">executeResponse := executeUnlock(sign, api, uuid)</span><br><span class="line">fmt.Println(executeResponse)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次に、<code>fetchStatus</code>をコーディングします。<code>fetchStatus</code>は鍵の状態を取得する関数です。鍵の状態取得のHTTPリクエストに必要な情報は<code>UUID</code>と<code>API_TOKEN</code>です。<code>rootUrl</code>に自分のデバイスの<code>UUID</code>を追加したものがendpointです。</p><figure class="highlight go"><figcaption><span>export.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//export fetchStatus</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchStatus</span><span class="params">(api, uuid <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// candyhouse公式(https://doc.candyhouse.co/ja/SesameAPI)に記載されているurlを準備する</span></span><br><span class="line">fetchUrl := rootUrl + uuid</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, fetchUrl, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// headerにpython側から受け取ったAPI_TOKENを渡す</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;x-api-key&quot;</span>, api)</span><br><span class="line"><span class="comment">// リクエストの実行</span></span><br><span class="line">resp, _ := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">respbody, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> statusResponse ResponseBody</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(respbody, &amp;statusResponse); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;JSON Unmarshal error:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">key_status := <span class="keyword">string</span>(statusResponse.CHSesame2Status)</span><br><span class="line"><span class="keyword">return</span> key_status</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後に施錠と解錠の関数<code>executeLock</code>、<code>executeUnlock</code>をコーディングします。こちらの2つはほぼ同じ内容です。</p><figure class="highlight go"><figcaption><span>export.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//export executeUnlock</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">executeUnlock</span><span class="params">(sign, api, uuid <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// candyhouse公式(https://doc.candyhouse.co/ja/SesameAPI)に記載されているurlを準備する</span></span><br><span class="line">cmdUrl := rootUrl + uuid + <span class="string">&quot;/cmd&quot;</span></span><br><span class="line"><span class="comment">// リクエスト構造体の初期化</span></span><br><span class="line">requestBody := RequestBody&#123;</span><br><span class="line">Cmd:     cmd_unlock,</span><br><span class="line">History: history,</span><br><span class="line">Sign:    sign,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// リクエスト構造体をjson化してPOSTのbodyに追加する</span></span><br><span class="line">jsonBody, err := json.Marshal(requestBody)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, cmdUrl, bytes.NewBuffer(jsonBody))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// headerにpython側から受け取ったAPI_TOKENを渡す</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;x-api-key&quot;</span>, api)</span><br><span class="line"><span class="comment">// リクエストの実行</span></span><br><span class="line">resp, _ := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Unlock command was executed.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//export executeLock</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">executeLock</span><span class="params">(sign, api, uuid <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// candyhouse公式(https://doc.candyhouse.co/ja/SesameAPI)に記載されているurlを準備する</span></span><br><span class="line">cmdUrl := rootUrl + uuid + <span class="string">&quot;/cmd&quot;</span></span><br><span class="line"><span class="comment">// リクエスト構造体の初期化</span></span><br><span class="line">requestBody := RequestBody&#123;</span><br><span class="line">Cmd:     cmd_lock,</span><br><span class="line">History: history,</span><br><span class="line">Sign:    sign,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// リクエスト構造体をJSON化してPOSTのbodyに追加する</span></span><br><span class="line">jsonBody, err := json.Marshal(requestBody)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, cmdUrl, bytes.NewBuffer(jsonBody))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// headerにpython側から受け取ったAPI_TOKENを渡す</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;x-api-key&quot;</span>, api)</span><br><span class="line"><span class="comment">// リクエストの実行</span></span><br><span class="line">resp, _ := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Lock command was executed.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上でGo側のコーディングは完成です。<br>Pythonのコーディングを始める前に<code>export.go</code>をビルドします。<code>/exoprt</code>にて以下コマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build -buildmode=c-shared -o export.so</span><br></pre></td></tr></table></figure><p>ビルド後、export配下に新たに<code>export.so</code>、<code>export.h</code>が出力されていることが確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── <span class="built_in">export</span></span><br><span class="line">│   ├── export.go</span><br><span class="line">│   ├── export.h</span><br><span class="line">│   ├── export.so</span><br><span class="line">│   └── go.mod</span><br><span class="line">├── main.py</span><br><span class="line">├── nfcreader.py</span><br><span class="line">└── notify.wav</span><br></pre></td></tr></table></figure><p>次にPython側をコーディングしていきます。</p><h3 id="5-2-NFCの読み込み"><a href="#5-2-NFCの読み込み" class="headerlink" title="5.2 NFCの読み込み"></a>5.2 NFCの読み込み</h3><p>Python側ではカードリーダーの制御、環境変数の引き渡し、<code>SECRET_KEY</code>の暗号化を行います。また、ICカード検知の通知音を出すために、スピーカーの制御も行っています。</p><p>以下必要となるモジュールを読み込みます。自作したモジュールは<code>nfcreader.py</code>のみです。</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> CMAC</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> nfcreader <span class="keyword">import</span> CardReader</span><br></pre></td></tr></table></figure><p>まずは環境変数の読み込みです。</p><p>ここで環境変数とは<code>SECRET_KEY</code>、<code>API_TOKEN</code>、<code>UUID</code>、ICカードの<code>IDm</code>を指しています。環境変数は誤ってGitHubなどに公開しないようにまとめて管理します。</p><p>環境変数の管理には<code>python-dotenv</code>を使用しました。ソースコードでは相対ディレクトリでプロジェクトディレクトリの直上に配置しています。</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">load_dotenv(<span class="string">&#x27;../.env&#x27;</span>)</span><br><span class="line">SECRET_KEY = os.environ[<span class="string">&quot;SECRET_KEY&quot;</span>]</span><br><span class="line">API_TOKEN = os.environ[<span class="string">&quot;API_TOKEN&quot;</span>]</span><br><span class="line">UUID = os.environ[<span class="string">&quot;UUID&quot;</span>]</span><br><span class="line">ANDROIDO = os.environ[<span class="string">&quot;ANDROIDO&quot;</span>].encode()</span><br><span class="line">SUICA = os.environ[<span class="string">&quot;SUICA&quot;</span>].encode()</span><br></pre></td></tr></table></figure><p>まずは<code>MySesame3</code>クラスを定義します。</p><p><code>MySesame3</code>はコンストラクタにて冒頭で読み込んだ環境変数を格納しています。暗号化する際に<code>timestamp</code>が必要となるため、<code>sign</code>（署名）のみ空にしています。また、先ほどビルドすることによって生成された<code>export.so</code>ファイルを読み込んでいます。メソッドとして<code>SECRET_KEY</code>の暗号化<code>encryptmyKey</code>、および施錠と解錠<code>lockOrunlock</code>を持っています。</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySesame3</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;docstring</span></span><br><span class="line"><span class="string">    ・セサミ3のクラス、libはGoでビルドしたバイナリファイルを読み込んでいる</span></span><br><span class="line"><span class="string">    ・API_TOKENはこちら(https://dash.candyhouse.co/login)で取得する</span></span><br><span class="line"><span class="string">    ・UUIDはアプリに記載されている対象のセサミ3のUUID</span></span><br><span class="line"><span class="string">    ・SECRET_KEYはアプリを立ち上げて「鍵のシェア（オーナー）」で生成されるQRコードを読み込んで得られる文字列</span></span><br><span class="line"><span class="string">    ・施錠/解錠の際はSECRET_KEYとタイムスタンプをAES-CMACによって暗号化する必要がある(encryptmyKey)</span></span><br><span class="line"><span class="string">    ・作成した暗号キーをsignとしてAPI_TOKEN,UUIDとともにPOSTすることで施錠解錠ができる(lockOrunlock)</span></span><br><span class="line"><span class="string">    ・現在の鍵の状態(施錠中/解除中)はgolang側で判断する</span></span><br><span class="line"><span class="string">    ・施錠中であれば解錠コマンドを、解錠中であれば施錠コマンドを打ち込む</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.lib = cdll.LoadLibrary(<span class="string">&quot;./export/export.so&quot;</span>)</span><br><span class="line">        self.key = SECRET_KEY</span><br><span class="line">        self.api = API_TOKEN</span><br><span class="line">        self.uuid = UUID</span><br><span class="line">        self.sign = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encyptmyKey</span>(<span class="params">self</span>):</span></span><br><span class="line">        timestamp = <span class="built_in">int</span>(datetime.datetime.now().timestamp()).to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">        cmac = CMAC.new(<span class="built_in">bytes</span>.fromhex(self.key), ciphermod=AES)</span><br><span class="line">        cmac.update(timestamp)</span><br><span class="line">        self.sign =  cmac.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lockOrunlock</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.lib.executeSesame3.restype=c_char_p</span><br><span class="line">        self.lib.executeSesame3(self.sign.encode(<span class="string">&#x27;utf-8&#x27;</span>),self.api.encode(<span class="string">&#x27;utf-8&#x27;</span>),self.uuid.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>次に一度<code>main.py</code>からは離れて、カードリーダーのクラスを定義します。こちらは別ファイル<code>nfcreader.py</code>にコーディングします。<code>nfcreader.py</code>をコーディングするにあたって<a href="https://qiita.com/LinaNfinE/items/945a795e53427e768e47">こちら</a>の方の記事を参考にしました。</p><figure class="highlight python"><figcaption><span>nfcreader.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nfc</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CardReader</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;docstring</span></span><br><span class="line"><span class="string">    ・カードリーダークラス</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.idm = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_startup</span>(<span class="params">self,targets</span>):</span></span><br><span class="line">        <span class="keyword">for</span> target <span class="keyword">in</span> targets:</span><br><span class="line">            target.sensef_req = <span class="built_in">bytearray</span>.fromhex(<span class="string">&quot;0000030000&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> targets</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_connect</span>(<span class="params">self,tag</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Detected!!&quot;</span>)</span><br><span class="line">        self.idm = binascii.hexlify(tag.idm)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_id</span>(<span class="params">self</span>):</span></span><br><span class="line">        clf = nfc.ContactlessFrontend(<span class="string">&#x27;usb&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Waiting Felica...&quot;</span>)</span><br><span class="line">        clf.connect(rdwr = &#123;<span class="string">&#x27;targets&#x27;</span>:[<span class="string">&#x27;212F&#x27;</span>],<span class="string">&#x27;on-startup&#x27;</span>:self.on_startup,<span class="string">&#x27;on-connect&#x27;</span>:self.on_connect&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(self.idm))</span><br><span class="line">        clf.close()</span><br></pre></td></tr></table></figure><p><code>main.py</code>の本体を記述します。</p><p>先ほど定義したクラス、およびカードリーダーのクラスを使用します。</p><p>構成としては「<code>Mysesame3</code>および<code>CardReader</code>インスタンス生成」→「<code>CardReader</code>インスタンスに格納されたIDmを取得」→「受信を検知したらスピーカーから音で通知」→「環境変数に登録したIDmを参照」→「一致したら施錠/解錠リクエストを送信」といった流れになっています。スピーカーの音源は<code>notify.wav</code>という名前で同<code>main.py</code>と同階層に配置しています。</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ismyID</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bool</span>(<span class="built_in">id</span>==ANDROIDO <span class="keyword">or</span> <span class="built_in">id</span> ==SUICA)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     <span class="comment"># セサミ3インスタンスの作成</span></span><br><span class="line">     mySesame3 = MySesame3()</span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># nfcpyによるNFC入力待機</span></span><br><span class="line">            myreader = CardReader()</span><br><span class="line">            myreader.read_id()</span><br><span class="line">            detectedID = myreader.idm</span><br><span class="line">            <span class="comment"># NFCの入力を検知したらスピーカーから通知音を出す</span></span><br><span class="line">            subprocess.call(<span class="string">&quot;aplay notify.wav&quot;</span> ,shell=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">if</span> ismyID(detectedID):</span><br><span class="line">                <span class="comment"># secret_keyを暗号化</span></span><br><span class="line">                mySesame3.encyptmyKey()</span><br><span class="line">                <span class="comment"># 施錠と解錠の実行</span></span><br><span class="line">                mySesame3.lockOrunlock()</span><br><span class="line">                detectedID = <span class="number">0</span></span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;KeyboardInterrupt!!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="6-スピーカーから音を出す"><a href="#6-スピーカーから音を出す" class="headerlink" title="6. スピーカーから音を出す"></a>6. スピーカーから音を出す</h2><p>最後にラズパイから音を出すためにスピーカーを取り付けます。高価なスピーカーはもったいないのでこちらはアンプを取り付けて自作します。スピーカーの取り付けは<a href="https://karaage.hatenadiary.jp/entry/RPi-Speaker">こちら</a>の記事を参考にしました。</p><h2 id="7-取り付け"><a href="#7-取り付け" class="headerlink" title="7. 取り付け"></a>7. 取り付け</h2><p>スピーカーを取り付けたらとりあえず、新聞受けに投げ入れます。玄関まで電源コードを延長するのが大変でしたが、<a href="https://www.amazon.co.jp/gp/product/B019O0JS7C">こちら</a>の延長コードでどうにか電源供給できました。</p><img src="/images/20210824a/DSC_0482.JPG" alt="玄関に設置の様子" width="1200" height="676" loading="lazy"><p>カードリーダーはコクヨの<a href="https://www.amazon.co.jp/dp/B0012R6M52">マグネットプレート</a>を使って取り付けました。</p><img src="/images/20210824a/DSC_0000_BURST20210822170307504.JPG" alt="カードリーダー設置の様子" width="1200" height="676" loading="lazy"><h2 id="8-動作確認"><a href="#8-動作確認" class="headerlink" title="8. 動作確認"></a>8. 動作確認</h2><p>動作確認の結果です。待機<code>Waiting Felica...</code>から検知<code>Detected!!</code>→<code>Lock command was executed.</code>と正しく動作していることがわかります。</p><img src="/images/20210824a/demo.png" alt="デモ" width="1200" height="234" loading="lazy"><p>こちらは施錠時のスマホの通知画面です。<code>export.go</code>に定義した文字列<code>by Felica</code>が正しく表示されています。</p><img src="/images/20210824a/screenshot.png" alt="スマホ通知画面" width="1200" height="663" loading="lazy"><h2 id="9-まとめ"><a href="#9-まとめ" class="headerlink" title="9. まとめ"></a>9. まとめ</h2><p>Sesame3のWeb APIを利用して、Felicaによる施錠解錠の機能を実装しました。</p><p>今回認証に使用したIDmはスマホアプリでも簡単に取得することができます。そのため、IDm単体に認証を任せてしまうのはセキュリティの観点から適切ではありません。実用に耐えうるにはさらなる工夫が求められます。とはいえ、GoとPythonを使って楽しみながらコーディングできたため、夏休みの自由研究の目的は達成できたと思います。</p><p>次は大野さんによる<a href="https://future-architect.github.io/articles/2021082">最高の持ち歩きキーボード考</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210824a/サムネ.png&quot; alt=&quot;&quot; width=&quot;&quot; height=&quot;&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@davidclode?utm_so</summary>
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="SESAME3" scheme="https://future-architect.github.io/tags/SESAME3/"/>
    
    <category term="RaspberryPi" scheme="https://future-architect.github.io/tags/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title>Wiresharkで通信プロトコルを見る</title>
    <link href="https://future-architect.github.io/articles/20210823b/"/>
    <id>https://future-architect.github.io/articles/20210823b/</id>
    <published>2021-08-22T15:00:01.000Z</published>
    <updated>2021-08-28T04:19:59.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIGの棚井龍之介です。</p><p><a href="/articles/20210823a/">夏の自由研究ブログ連載2021</a>の第1投稿として、Wiresharkで実際に流れるパケットを観察し、通信プロトコルの動きを見てみました。</p><h2 id="本記事の目標"><a href="#本記事の目標" class="headerlink" title="本記事の目標"></a>本記事の目標</h2><p>コンピュータはネットワークを通じて他のコンピュータと通信しています。</p><p>みなさんが利用する業務用PCも、いっときも目が離せないiPhoneも、Apple Watchでさえも、ネットワークを通じてデータのやり取りをしています。パソコンとスマートウォッチというように明らかに見た感じが異なるデバイスであっても、どちらもWi-Fiを設定すればインターネットと通信できるのは、<strong>共通のルール</strong>のもとネットワークを介して通信しているからです。この共通ルールのことを<strong>通信プロトコル</strong>と呼びます。</p><p>本記事では、基本的な通信プロトコルの中身を見ていくことにより</p><ul><li>通信プロトコルのやり取りがイメージできる</li><li>IPアドレス、MACアドレスの利用場面がわかる</li><li>ネットワーク分野への誘いになる</li></ul><p>ことを目標としています。</p><h1 id="TCP-IPモデル"><a href="#TCP-IPモデル" class="headerlink" title="TCP/IPモデル"></a>TCP/IPモデル</h1><p>インターネットの多くは、<strong>TCP/IPプロトコル</strong>によって通信しています。</p><p>Twitterで投稿するとき、YouTubeを見るときも、その裏側ではコンピュータがTCP/IPに沿った通信を行っています。この通信は「利用者が意識しないで済む」ことを念頭に設計されています。そのため、TCP/IPで何らかの問題が生じた場合、利用者の認知は「ネットにつながらない」です。</p><p>あるコンピュータ(PC)から別のコンピュータ(Server)に通信するとき、以下のようなやりとりが発生しています。</p><img src="/images/20210823b/Screen_Shot_2021-08-23_at_3.37.34.png" alt="" width="" height="" loading="lazy"><p>人間が会話するのと同様に</p><ul><li>PC:「明日の東京の天気は?」</li><li>Server:「晴れです。」</li></ul><p>とやり取りしているだけです。</p><p>この通信にて、TCP/IPは裏側で以下のようなことをやっています。</p><p>PC→Server</p><img src="/images/20210823b/Screen_Shot_2021-08-23_at_4.00.52.png" alt="" width="" height="" loading="lazy"><p>PC←Server</p><img src="/images/20210823b/Screen_Shot_2021-08-23_at_4.09.34.png" alt="" width="" height="" loading="lazy"><p>通信したいデータに対して、カプセル化を繰り返しながら情報を追加していき、符号化してデータを送る。受け手側ではその逆の順序で情報を外していき、最終的に送信元のデータを取得する。各層には独自の役割があり、それぞれがうまく機能することでコンピュータ同士は通信しています。よくある「ネットにつながない」現象は、これらの層のどこかで問題が生じている、ということになります。</p><p>コンピュータ同士がやり取りするデータはネットワークを介しているため、ネットワーク自体を覗き見ることで、「やり取りしているデータ自体」を見ることができます。このデータを見る作業を<strong>パケットキャプチャ</strong>といいます。</p><h1 id="Wiresharkでパケットキャプチャ"><a href="#Wiresharkでパケットキャプチャ" class="headerlink" title="Wiresharkでパケットキャプチャ"></a>Wiresharkでパケットキャプチャ</h1><p>パケットキャプチャのために、OSS(Open Source Software)の<a href="https://www.wireshark.org/">Wireshark</a>を使います。</p><p>パケットキャプチャツールは、キャプチャ実行端末のNIC(Network Interface Card)を通信傍受することで、端末の送受信する通信データを取得するものです。</p><p>Wiresharkを起動するとキャプチャするNICの選択画面が表示されるので、インターフェース表示を無線にして「Wi-Fi」を選択すれば、無線で送受信されるパケットが見れます。</p><img src="/images/20210823b/1_wifi_en0.png" alt="" width="" height="" loading="lazy"><p>パケットを見る機会などほとんどないので、しばらく見続けてみましょう。</p><p><code>TCP</code>や<code>192.168.1.1</code>など、なんとなく見覚えのある情報もあれば、正体不明のIPも見つかると思います。Wiresharkで続々と表示されるレコードは、全てパソコンで送受信しているデータです。実際に見てみると、想像していたよりも沢山のやり取りをしていませんか?</p><p>それでは、WiresharkでTCP/IPでの代表的な3つの通信プロトコルを見ていきます。</p><ul><li>データリンク層<ul><li>ARP</li></ul></li><li>ネットワーク層<ul><li>ICMP</li></ul></li><li>トランスポート層<ul><li>TCP</li></ul></li></ul><p>アプリケーション層の内容はWiresharkのみでは扱いきれない場面が多いため、本記事では取り扱っていません。</p><h1 id="データリンク層"><a href="#データリンク層" class="headerlink" title="データリンク層"></a>データリンク層</h1><p>IPアドレスとMacアドレスの対応表を作成する<code>ARP</code>の通信を見ていきます。ARPはブロードキャスト通信の「ARP Request」とユニキャスト通信「ARP Reply」により実現されます。</p><p>Wiresharkは表示レコードを制限できるので、表示条件を<code>arp</code>にしてしばらく待つとルータからのARP通信をキャッチできます。</p><img src="/images/20210823b/2_arp_1.png" alt="" width="" height="" loading="lazy"><p>今回キャッチした内容は以下です。</p><img src="/images/20210823b/2_arp_2.png" alt="" width="" height="" loading="lazy"><ul><li>Source<ul><li>MAC: Buffalo_(UAA)</li><li>IP: 192.168.11.1</li></ul></li><li>Destination<ul><li>MAC: 00:00:00_00:00:00</li><li>IP: 192.168.11.7</li></ul></li><li>ARP Request</li><li>Info<ul><li>Who has 192.168.11.7? Tell 192.168.11.1</li></ul></li></ul><img src="/images/20210823b/2_apr_3.png" alt="" width="" height="" loading="lazy"><ul><li>Source<ul><li>MAC: Apple_(UAA)</li><li>IP: 192.168.11.7</li></ul></li><li>Destination<ul><li>MAC: Buffalo_(UAA)</li><li>IP: 192.168.11.1</li></ul></li><li>ARP Reply</li><li>Info<ul><li>192.168.11.7 is at Apple_(UAA)</li></ul></li></ul><p>Infoをみると、ルータとPCが会話していることが分かります。</p><ul><li>ルータ: 192.168.11.7を持っている方、Macアドレスを私に教えてください。</li><li>PC: 私が192.168.11.7です。MacアドレスはApple_(UAA)です。</li></ul><p>ARPはIPアドレスとMacアドレスの対応表を作成するプロトコルなので、上記会話にて「ルータのARPテーブルに、192.168.11.7に紐づくMacアドレスはApple_(UAA)」と登録されたようです。</p><h1 id="ネットワーク層"><a href="#ネットワーク層" class="headerlink" title="ネットワーク層"></a>ネットワーク層</h1><p>トラブルシュートでお馴染みのpingを見ていきます。pingは<code>ICMP</code>プロトコルを用いたネットワーク監視の王道ツールです。ICMPは「Echo Request」と「Echo Reply」により会話します。</p><p>ネットワークの障害切り分けでは、pingに対してEcho Replyが</p><ul><li>返ってくる: ネットワーク層より上の層(トランスポート層、アプリケーション層)に問題あり</li><li>返ってこない: ネットワーク層より下の層(データリンク層、物理層)に問題あり</li></ul><p>と疎通問題を切り分けられます。</p><p>作業PC(192.168.11.7)から、ルータ(192.168.11.1)に向けて、pingを打ってみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$  ping -t 5 192.168.11.1</span><br><span class="line">PING 192.168.11.1 (192.168.11.1): 56 data bytes</span><br><span class="line">64 bytes from 192.168.11.1: icmp_seq=0 ttl=64 time=8.456 ms</span><br><span class="line">64 bytes from 192.168.11.1: icmp_seq=1 ttl=64 time=8.293 ms</span><br><span class="line">64 bytes from 192.168.11.1: icmp_seq=2 ttl=64 time=8.138 ms</span><br><span class="line">64 bytes from 192.168.11.1: icmp_seq=3 ttl=64 time=8.310 ms</span><br><span class="line">64 bytes from 192.168.11.1: icmp_seq=4 ttl=64 time=7.234 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.11.1 ping statistics ---</span><br><span class="line">5 packets transmitted, 5 packets received, 0.0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 7.234/8.086/8.456/0.438 ms</span><br></pre></td></tr></table></figure><p>このとき、Wiresharkでは5つの通信全てをキャッチしています。<br><code>icmp</code>で表示を絞り込むと…</p><p><img src="/images/20210823b/"><br><img src="/images/20210823b/3_icmp_1.png" alt="" width="" height="" loading="lazy"></p><p>各通信ごとに「Echo (ping) Request」と「Echo (ping) Reply」を送り合っていることが分かります。</p><p>Echo (ping) Request</p><img src="/images/20210823b/3_icmp_2.png" alt="" width="" height="" loading="lazy"><p>Echo (ping) Reply</p><img src="/images/20210823b/3_icmp_3.png" alt="" width="" height="" loading="lazy"><p>ネットワーク疎通確認のとき、ping単体だと通信がイメージできないならば、裏でWiresharkを起動すると理解が進むかもしれません。その場合、デフォルトのWiresharkはNICを通過する全パケットを取得&amp;表示してしまうため、メモリ負荷を下げるために「キャプチャフィルタ」や「表示フィルタ」の利用がオススメです。</p><h1 id="トランスポート層"><a href="#トランスポート層" class="headerlink" title="トランスポート層"></a>トランスポート層</h1><p>トランスポート層はTCP(Transmission Control Protocol)とUDP(User Datagram Protocol)の2つがメインです。今回は<code>TCP</code>側での、通信の開始と終了を見ていきます。</p><p>TCPは通信の信頼性を保証するため、その開始と終了タイミングで特徴的なデータのやり取りを実施しています。</p><ul><li>開始<ul><li>3ウェイハンドシェイク<ul><li>相互に通信を開始する</li></ul></li><li>通信内容<ol><li>SYN</li><li>SYN + ACK</li><li>ACK</li></ol></li></ul></li><li>終了<ul><li>コネクションの切断<ul><li>各自で通信を終了する</li></ul></li><li>通信内容<ol><li>FIN + ACK</li><li>ACK</li><li>FIN + ACK</li><li>ACK</li></ol></li></ul></li></ul><p>Wiresharkには、TCP通信の開始からコネクションの終了までをグルーピングしてくれる<code>StreamID</code>という識別子があります。これ利用して、あるTCP通信が始まってから終わるまでの流れを見ていきます。</p><p>開始・終了</p><img src="/images/20210823b/4_tpc_3.png" alt="" width="" height="" loading="lazy"><p>開始のSYN+ACKと、終了のFIN+ACKがキャッチできました。</p><p>本ブログ執筆まで、「コネクション切断」の通信は「FIN→ACK→FIN→ACK」パターンだと理解していたのですが、Wireshackでのキャプチャで「<strong>FIN/ACK→ACK→FIN/ACK→ACK</strong>」と表示されて、自分の理解が間違っていたことに気づきました。</p><p>ネットで検索したところ、日本語で分かりやすい記事が見つかったので、URLを添付します。</p><p><a href="https://kawasin73.hatenablog.com/entry/2019/08/31/153809">FIN -&gt; FIN/ACK -&gt; ACK という TCP の幻想</a></p><p>要するに、TCP通信が開始された(3ウェイハンドシェイクが完了してESTABLISHED状態になった)相手との通信では、基本的に<code>ACK</code>を付与しなければならない、ということです。コネクション終了時は<code>FIN</code>ではなく、<code>FIN/ACK</code>が正解です。</p><p>ネットワークは教科書的な理解よりも「実際の運用で、ちゃんと疎通させられる知識」の方が重要です。Wiresharkでリアルなパケットを見て「知識と実挙動の対応を確認する」ことの重要性を改めて実感しました。</p><p>パケットの詳細を確認すると、行列のような形で SYN・ACK・FIN が表現されていることが分かります。</p><p>SYN</p><img src="/images/20210823b/5_syn.png" alt="" width="" height="" loading="lazy"><p>SYN・ACK</p><img src="/images/20210823b/5_syn_ack.png" alt="" width="" height="" loading="lazy"><p>FIN・ACK</p><img src="/images/20210823b/5_fin_ack.png" alt="" width="" height="" loading="lazy"><p>ACK<br><img src="/images/20210823b/5_ack.png" alt="" width="" height="" loading="lazy"></p><p>Wiresharkでパケットをしばらく監視していると、通信失敗やリトライ時の挙動が見れるので、「Wiresharkを眺める→新しい情報を見つける→ネットで調べる」を繰り返せば、色々な生きた知識が身についていきます。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>Wiresharkを利用して、代表的なネットワーク通信プロトコルの「ARP, ICMP, TCP」の中身を見てきました。</p><p>各種通信プロトコルを「知識としては知っている」で終わらせずに、パケットキャプチャツールでインターセプトして「実際にどのように通信しているかイメージできる」まで体得すれば、ネットワーク系の問題が発生したときに、より正確に問題の切り分けができると思います。</p><p>アプリケーションと異なり、ネットワークは「見えない」が勉強の壁になりがちです。今回ご紹介した「Wiresharkでの可視化」を導入することで、ネットワーク分野への参入障壁が下がればいいなと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIGの棚井龍之介です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20210823a/&quot;&gt;夏の自由研究ブログ連載</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
    <category term="Wireshark" scheme="https://future-architect.github.io/tags/Wireshark/"/>
    
    <category term="TCP/IP" scheme="https://future-architect.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>夏の自由研究連載2021を始めます</title>
    <link href="https://future-architect.github.io/articles/20210823a/"/>
    <id>https://future-architect.github.io/articles/20210823a/</id>
    <published>2021-08-22T15:00:00.000Z</published>
    <updated>2021-08-28T04:19:59.222Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤</a>です。</p><p><a href="/articles/20200726/">2020年</a>に続いて、2021年も夏の自由研究連載を始めます！</p><img src="/images/20210823a/summer.jpg" alt="" width="900" height="600" loading="lazy"><p>Photo taken by <a href="https://twitter.com/kaedemalu">@kaedemalu</a></p><h2 id="思い出したいあの頃"><a href="#思い出したいあの頃" class="headerlink" title="思い出したいあの頃"></a>思い出したいあの頃</h2><p>小学生の時の夏休みの宿題には必ず、自由研究、自由工作というものが存在していました。面倒と思った時もある一方で、楽しいテーマを題材にしたときは自分から前のめりに何かを作ったり調べたりしていました。</p><p>フューチャー技術ブログはこれまで<a href="/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">数多くの連載</a>を行っており、それぞれ題材に応じて記事を執筆してもらっていました。ただ、夏休みの自由研究連載は、あくまで「<strong>自分が好きなこと</strong>」を調べて記事にしてもらう連載なので、幅の広いネタが扱われます。日によって異なる分野のネタが投稿される、それが夏の自由研究連載です。</p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>2021年は以下のスケジュールで投稿します。</p><p>順番が前後したり、投稿内容が変わることがありますが、ご了承ください。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>8/23</td><td>棚井龍之介</td><td><a href="/articles/20210823b/">Wiresharkで通信プロトコルを見る</a></td></tr><tr><td>8/24</td><td>宮永崇史</td><td><a href="/articles/20210824a/">Sesami3にICカード施錠/開錠機能を実装してみた</a></td></tr><tr><td>8/25</td><td>大野朱理</td><td><a href="/articles/20210825b/">最高の持ち歩きキーボード考</a></td></tr><tr><td>8/26</td><td>真野隼記</td><td><a href="/articles/20210826b/">フォワードプロキシ</a></td></tr><tr><td>8/27</td><td>伊藤真彦</td><td><a href="/articles/20210827a/">リモートワーク環境</a></td></tr><tr><td>8/30</td><td>栗田真</td><td>マイコンにGPSつけてリアルタイムに送って位置情報を表示する</td></tr><tr><td>8/31</td><td>金子剛士</td><td>医薬品副作用データベースから医薬品同士の関係を可視化する</td></tr><tr><td>9/1</td><td>西田好孝</td><td>Lookerという技術とそれを運営する組織を考察する</td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>リモートワーク環境についての考察からIoTまで、とても幅の広いネタが集まりました。</p><p>時期的にも夏休みが終わる時期ですが、ぜひあの頃を思い出しながら読んでいただければと思います！</p><p>他にも連載企画があります！今年もいくつかあるのでそちらもぜひ楽しみにしてください。</p><ul><li><a href="/articles/20210112/">技術ブログの年間連載予定を発表します</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIGの&lt;a href=&quot;https://twitter.com/kaedemalu&quot;&gt;伊藤&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20200726/&quot;&gt;2020年&lt;/a&gt;に続いて、2021年も夏の自由研究連載を始めます！&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Cuture" scheme="https://future-architect.github.io/categories/Cuture/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="夏休み自由研究" scheme="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>golang.tokyo31でGoを使ってホントのところというテーマで登壇しました</title>
    <link href="https://future-architect.github.io/articles/20210820b/"/>
    <id>https://future-architect.github.io/articles/20210820b/</id>
    <published>2021-08-19T15:00:01.000Z</published>
    <updated>2021-08-28T04:19:59.219Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210820b/golangtokyo.png" alt="" width="800" height="404" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。縁があって2021/07/30(金)に開催した <a href="https://golangtokyo.connpass.com/event/218670/">golang.tokyo #31</a> に登壇させてもらいました。第29回目も<a href="https://speakerdeck.com/laqiiz/go-plc">工場設備であるPLCにGo言語で接続するネタ</a>で登壇させていただいたことがあり、再びの機会を得られむちゃくちゃ嬉しかったです。</p><p>今回登壇した golang.tokyo #31のテーマはISIDさんとフューチャーで「受託開発におけるGoの実態について語る」というテーマだったので、何を話すか悩みましたが、ベーシックに自分の観測範囲における自社でのGoの利用状況とか使ってよかった点をまとめることにしました。それだけだとよくありがちかなと思ったので、リーダー視点という要素をスパイスに入れています。</p><h2 id="資料"><a href="#資料" class="headerlink" title="資料"></a>資料</h2><p>こちらに公開しています。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRzKGDRiY2di2fn1-2Xr9Dw_0f9mfZdJyMzL3iINGAQfAksPfiqTJfdWB233DtaXicHdcLCf4L_q5NA/embed?start=false&loop=false&delayms=3000" frameborder="0" width="95%" height="549" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><h2 id="発表について補足"><a href="#発表について補足" class="headerlink" title="発表について補足"></a>発表について補足</h2><p>同じフューチャーの澁川さんが上級ぽいネタだったので、入門パートぽい話ができてバランスが良かったんじゃないかなと思います。</p><p>色々伝えたいことがあったんですが、途中に@saki_engineerさんがシンプルに3点でまとめてくれていて、完全に同意です。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Goは<br>- 半年ごとに新verがリリースされててまだまだ発展するのでネタが尽きない<br>- シンプル&amp;スキがあるゆえに、NewJoinerでも記事を書くネタがそこそこある<br>- そしてそれを評価してくれるだけのコミュニティがしっかりしている<br><br>のがいいところだし、私もそれに多分に助けられましたね。<br> <a href="https://twitter.com/hashtag/golangtokyo?src=hash&amp;ref_src=twsrc%5Etfw">#golangtokyo</a></p>&mdash; さき(H.Saki) (@saki_engineer) <a href="https://twitter.com/saki_engineer/status/1421060636302217219?ref_src=twsrc%5Etfw">July 30, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>他に個人的に強調したいのは、支配的なフレームワークが存在せず自分たちの開発スタイルにあったものを選ぶ・作ると行ったことがしやすい文化であることも発表時に伝えたかった点（スキがあることに包含されているような気もしますが）で、少なくても自分がいるチームはアウトプット文化がGo言語採用移行で加速した気がします。</p><h2 id="懇親会"><a href="#懇親会" class="headerlink" title="懇親会"></a>懇親会</h2><p>最後に懇親会タイムで居酒屋のようにざっくばらんとGo言語中心とした雑談が発生し、楽しかったです。チャット上でも合いの手を色々入れていただけて新鮮でした。個人的には自動生成コードの話から、Goはパッケージ管理がGitHubリポジトリを直接見るため.goファイルをコミットする慣習からの、それを書き換えられたらセキュリティ的に危ないんじゃないか（コインのマイニングコードの混入など。履歴が残らないし）からの、Module Proxyに履歴が残ってそこはある程度信頼できる運用がなされているからトレースができるのでは？という話の派生は聞いていて楽しかったです。そのままGOPROXYの環境変数から、環境変数そのものの扱いについては個人的にもう少し話したかった気もしています。まぁほぼ聞いていただけですが。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>golang.tokyo、初級～中級～上級まで幅広いレベル感でテーマも様々、Go言語の導入を広げるためとあって初心者フレンドリーなコミュニティだと思います。ありがとうございました！また良いネタがあれば登壇チャレンジしたいと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210820b/golangtokyo.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;404&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="golang.tokyo" scheme="https://future-architect.github.io/tags/golang-tokyo/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.17の sync/atomic パッケージ更新点と CompareAndSwap</title>
    <link href="https://future-architect.github.io/articles/20210820a/"/>
    <id>https://future-architect.github.io/articles/20210820a/</id>
    <published>2021-08-19T15:00:00.000Z</published>
    <updated>2021-08-28T04:19:59.216Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210820a/cas.png" alt="" width="900" height="393" loading="lazy"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renee French</a>.</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIGの市川です。<a href="/articles/20210810a/">Go 1.17連載</a>のラストです。前回は宮崎さんによる「<a href="/articles/20210819b/">Go1.17で警告されるようになったerror#Is/As/Unwrap</a>」の解説でした。</p><p>この記事では、Go 1.17で変更になった <code>sync/atomic</code> パッケージについて解説します。</p><h2 id="Go-1-17の-sync-atomic-パッケージ更新点"><a href="#Go-1-17の-sync-atomic-パッケージ更新点" class="headerlink" title="Go 1.17の sync/atomic パッケージ更新点"></a>Go 1.17の sync/atomic パッケージ更新点</h2><p><code>sync/atomic</code> パッケージの <code>atomic.Value</code> に以下のメソッドが追加されました。</p><ul><li>CompareAndSwap</li><li>Swap</li></ul><p>Go 1.16以前でもCompare And Swap(以下CAS)とSwapの関数はintとuintの32, 64型とPointer型の関数が用意されてました。今回の変更により <code>atomic.Value</code> でCASが利用可能になりました。</p><h2 id="CASについて"><a href="#CASについて" class="headerlink" title="CASについて"></a>CASについて</h2><p>CASは文字通り、比較と置換をアトミックに行う命令です。<br>処理は次の1~3です。</p><ol><li>「現在の値」と「以前取得した値」を比較</li><li>異なる場合はFalseを返す</li><li>一致した場合は「現在の値」を「新しい値に」入れ替えTrueを返す</li></ol><p>CASからFalseが返った場合には、割り込みによって値が変わったと判断し、改めて取得からやり直します。</p><p>通常ロックしてから処理を行う場合と比較し、ロック時間が短くなることが利点です。(<a href="http://tutorials.jenkov.com/java-concurrency/compare-and-swap.html">こちらの記事</a>の図が非常に分かりやすいと感じました。)</p><h2 id="CompareAndSwap実装例"><a href="#CompareAndSwap実装例" class="headerlink" title="CompareAndSwap実装例"></a>CompareAndSwap実装例</h2><p>並列処理で <code>*big.Int</code> の共有カウンタを回す処理のサンプルです。<code>sync.WaitGroup</code> は並列処理の完了制御で利用してます。</p><p><a href="https://play.golang.org/p/7IKfoh7wYJT">https://play.golang.org/p/7IKfoh7wYJT</a></p><p>(Playground上では仕様により処理時間が0秒になります。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">counter := big.NewInt(<span class="number">0</span>)</span><br><span class="line">delta := big.NewInt(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> m atomic.Value</span><br><span class="line">m.Store(counter) <span class="comment">// 値を保存</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(time.Since(start))</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="number">10000</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">newVal := big.NewInt(<span class="number">0</span>)</span><br><span class="line">oldVal := m.Load().(*big.Int) <span class="comment">// 値を取得</span></span><br><span class="line">time.Sleep(time.Microsecond)</span><br><span class="line">newVal.Add(oldVal, delta)</span><br><span class="line"><span class="keyword">if</span> m.CompareAndSwap(oldVal, newVal) &#123;</span><br><span class="line"><span class="comment">// oldValの値が一致し置換を成功</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(m.Load().(*big.Int)) <span class="comment">// 10000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>int64などの場合には <code>atomic.AddInt64</code> などの専用の関数が用意されており、Compare And Swapを利用しなくても実装可能です。<br>実装例: <a href="https://play.golang.org/p/8IeIITMaMzs">https://play.golang.org/p/8IeIITMaMzs</a></p><h2 id="CompareAndSwapと別の処理方式との比較"><a href="#CompareAndSwapと別の処理方式との比較" class="headerlink" title="CompareAndSwapと別の処理方式との比較"></a>CompareAndSwapと別の処理方式との比較</h2><h3 id="CompareAndSwapPointerを使った実装との比較"><a href="#CompareAndSwapPointerを使った実装との比較" class="headerlink" title="CompareAndSwapPointerを使った実装との比較"></a>CompareAndSwapPointerを使った実装との比較</h3><p>既存で用意されている <code>CompareAndSwapPointer</code> を利用した実装です。</p><p><a href="https://play.golang.org/p/cFZhpZIZVni">https://play.golang.org/p/cFZhpZIZVni</a><br>(Playground上では仕様により処理時間が0秒になります。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">counter := big.NewInt(<span class="number">0</span>)</span><br><span class="line">delta := big.NewInt(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(time.Since(start))</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="number">10000</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">newVal := big.NewInt(<span class="number">0</span>)</span><br><span class="line">oldVal := atomic.LoadPointer((*unsafe.Pointer)(unsafe.Pointer(&amp;counter)))</span><br><span class="line">newVal.Add((*big.Int)(oldVal), delta)</span><br><span class="line"><span class="comment">//time.Sleep(time.Microsecond)</span></span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapPointer((*unsafe.Pointer)(unsafe.Pointer(&amp;counter)), oldVal, unsafe.Pointer(newVal)) &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println((*big.Int)(atomic.LoadPointer((*unsafe.Pointer)(unsafe.Pointer(&amp;counter))))) <span class="comment">// 10000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CompareAndSwapPointer</code> での実装と比較し <code>unsafe.Pointer</code> を使わずに済み、<code>CompareAndSwap</code> のほうがシンプルに書けるようになりました。</p><p>ちなみに処理時間はあまり変わりませんでした。</p><h3 id="排他制御との比較"><a href="#排他制御との比較" class="headerlink" title="排他制御との比較"></a>排他制御との比較</h3><p>前章で記載した共有カウントを排他制御を使った実装です。</p><p><a href="https://play.golang.org/p/Lt9FYmefo5m">https://play.golang.org/p/Lt9FYmefo5m</a><br>(Playground上では仕様により処理時間が0秒になります。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">counter := big.NewInt(<span class="number">0</span>)</span><br><span class="line">delta := big.NewInt(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> mt sync.Mutex</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(time.Since(start))</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="number">10000</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">mt.Lock()</span><br><span class="line"><span class="keyword">defer</span> mt.Unlock()</span><br><span class="line"><span class="comment">//time.Sleep(time.Microsecond)</span></span><br><span class="line">counter.Add(counter, delta)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(counter) <span class="comment">// 10000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排他処理での実装はSwapの処理がいらないためシンプルな実装になります。</p><p><code>time.Sleep</code> のコメントアウトを外した場合の処理時間を比較すると手元の環境でCAS: 約23ms, 排他制御: 約500msと20倍以上の処理時間がかかりました。時間がかかる処理を行う場合にはCAS方式のほうが処理が早そうです。<br>(Sleepがない場合には、CAS: 約3.0ms, 排他制御: 約2.5msと排他制御のほうが処理時間が短い結果となりました。)</p><h2 id="Swapの実装サンプル"><a href="#Swapの実装サンプル" class="headerlink" title="Swapの実装サンプル"></a>Swapの実装サンプル</h2><p>Swapのほうは良い例を思いつかなかったので、単純なサンプルを載せます。<br><a href="https://play.golang.org/p/te6ewTUvomV">https://play.golang.org/p/te6ewTUvomV</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">bi := big.NewInt(<span class="number">1</span>)</span><br><span class="line">newVal := big.NewInt(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> m atomic.Value</span><br><span class="line">m.Store(bi)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;before:&quot;</span>, m.Load().(*big.Int)) <span class="comment">// before: 1</span></span><br><span class="line">oldVal := m.Swap(newVal).(*big.Int)</span><br><span class="line">fmt.Println(<span class="string">&quot;oldVal:&quot;</span>, oldVal)             <span class="comment">// oldVal: 1</span></span><br><span class="line">fmt.Println(<span class="string">&quot;after:&quot;</span>, m.Load().(*big.Int)) <span class="comment">// after: 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のサンプルを既存の関数 <code>SwapPointer</code> で書くと以下のようになります。<br><a href="https://play.golang.org/p/HcUrh3J4uNo">https://play.golang.org/p/HcUrh3J4uNo</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">bi := big.NewInt(<span class="number">1</span>)</span><br><span class="line">newVal := big.NewInt(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;before:&quot;</span>, (*big.Int)(atomic.LoadPointer((*unsafe.Pointer)(unsafe.Pointer(&amp;bi))))) <span class="comment">// before: 1</span></span><br><span class="line">oldVal := atomic.SwapPointer((*unsafe.Pointer)(unsafe.Pointer(&amp;bi)), unsafe.Pointer(newVal))</span><br><span class="line">fmt.Println(<span class="string">&quot;oldVal:&quot;</span>, (*big.Int)(oldVal))                                                    <span class="comment">// oldVal: 1</span></span><br><span class="line">fmt.Println(<span class="string">&quot;after:&quot;</span>, (*big.Int)(atomic.LoadPointer((*unsafe.Pointer)(unsafe.Pointer(&amp;bi))))) <span class="comment">// after: 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swapのケースでも既存の関数の利用と比べシンプルかつ <code>unsafe.Pointer</code> を使わずに記述出来るようになりました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li><code>atomic.Value</code> で <code>CompareAndSwap</code>, <code>Swap</code> のメソッドが追加になった。</li><li>既存の <code>atomic.CompareAndSwapPointer</code>, <code>atomic.SwapPointer</code> 関数と比較し、 <code>unsafe.Pointer</code> を利用せずに任意の型でCASやSwapが実装可能になった。</li><li>処理時間がかかる場合には排他処理よりもCASが有利になるケースを確認した。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210820a/cas.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;393&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot desi</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.17" scheme="https://future-architect.github.io/tags/Go1-17/"/>
    
    <category term="排他制御" scheme="https://future-architect.github.io/tags/%E6%8E%92%E4%BB%96%E5%88%B6%E5%BE%A1/"/>
    
    <category term="ロックフリー" scheme="https://future-architect.github.io/tags/%E3%83%AD%E3%83%83%E3%82%AF%E3%83%95%E3%83%AA%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>Go1.17で警告されるようになったerror#Is/As/Unwrap</title>
    <link href="https://future-architect.github.io/articles/20210819b/"/>
    <id>https://future-architect.github.io/articles/20210819b/</id>
    <published>2021-08-18T15:00:01.000Z</published>
    <updated>2021-08-28T04:19:59.211Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210819b/errors.png" alt="" width="900" height="304" loading="lazy"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renee French</a>.</p><h1 id="始めに"><a href="#始めに" class="headerlink" title="始めに"></a>始めに</h1><p>TIG DXUnitの宮崎です。</p><p>2021/8/16にGo1.17がリリースされましたね。</p><p><a href="/articles/20210810a/">Go 1.17連載</a>第6回目ということで、Go Vetによる静的解析が強化され、<code>error</code>を実装した構造体に対する<code>Is/As/Unwrap</code>のシグネチャチェックが実施されるようになったという小ネタを紹介します。</p><p><code>errors.Is/As/Unwrap</code> に関しては<a href="/articles/20200523/">Go Tips連載6: Error wrappingされた各クラウドSDKの独自型エラーを扱う</a>記事で復習もできますので、なんだっけ？という方は参照いただけるとです。</p><p>なお、この記事では以下の表記ルールとしています。</p><ul><li><code>errors</code>パッケージの<code>Is/As/Unwrap</code>メソッド<br>= <code>errors.Is/As/Unwrap</code></li><li><code>error</code>インターフェースを実装した構造体の<code>Is/As/Unwrap</code>メソッド<br>= <code>error#Is/As/Unwrap</code></li></ul><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><ul><li><code>error</code>インターフェースを実装し、かつ<code>Is/As/Unwrap</code>メソッドを実装する場合、以下シグネチャ以外は警告されるようになった。<ul><li><code>Is(error) bool</code></li><li><code>As(interface&#123;&#125;) bool</code></li><li><code>Unwrap() error</code></li></ul></li><li>あくまで警告であり、ビルドも実行も可能</li><li>挙動にも変更点はなし</li></ul><h1 id="error-Is-As-Unwrap-is-何"><a href="#error-Is-As-Unwrap-is-何" class="headerlink" title="error#Is/As/Unwrap is  何"></a><code>error#Is/As/Unwrap</code> is  何</h1><p>Go1.17のリリースノートを引用すると以下の通り。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The vet tool now warns about methods named As, Is or Unwrap on types implementing the error interface that have a different signature than the one expected by the errors package.</span><br><span class="line">The errors.&#123;As,Is,Unwrap&#125; functions expect such methods to implement either Is(error) bool, As(interface&#123;&#125;) bool, or Unwrap() error respectively.</span><br><span class="line">The functions errors.&#123;As,Is,Unwrap&#125; will ignore methods with the same names but a different signature.</span><br></pre></td></tr></table></figure><p><code>error</code>インターフェースを実装した時に<code>Is/As/Unwrap</code>のシグネチャが間違ってた時に怒ってくれるようになったらしいです。<code>Is/As/Unwrap</code>をなんとなーくしか捉えていなかったので、これを期にしっかり学んでみます。</p><h2 id="そもそもerror"><a href="#そもそもerror" class="headerlink" title="そもそもerror"></a>そもそも<code>error</code></h2><p>Goの<code>error</code>インターフェースについての復習から。ご存知の通り、Goには<code>try/catch</code>構文が存在しなく、<code>error</code>インターフェースを実装した構造体を返却することで例外発生を表現します。<code>error</code>インターフェースとはGoに組込まれているインターフェースで、具体的には以下の通り定義されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Error()</code>というメソッドを実装して<code>string</code>を返せばなんでも<code>error</code>になれるということですね。シンプルですが、これだけではエラーとしての表現力が乏しく、実際使う場合は具体的にどの型のエラーなのか、どの型が発生源なのかを判別して挙動を分岐させたりします。</p><p><code>errors.Is/As/Unwrap</code>はGo 1.13で導入された<code>error</code>の階層化や型比較を実現するためのメソッドです。</p><p>※<code>error</code>に関する記述は<a href="https://golang.org/src/errors/">ソース</a>を見るのが一番早いです。</p><h2 id="errors-Unwrap-error-Unwrap"><a href="#errors-Unwrap-error-Unwrap" class="headerlink" title="errors.Unwrap/error#Unwrap"></a><code>errors.Unwrap</code>/<code>error#Unwrap</code></h2><p>Go 1.13にて以下が追加され<code>error</code>の階層化ができるようになりました。</p><ul><li><code>errors.Unwrap</code></li><li><code>fmt.Errorf()</code>に、<code>%w</code>識別子が追加</li></ul><p><code>fmt.Errorf()</code>で階層化させて<code>Unwrap</code>で取り出すという流れですね。<code>errors.Unwrap</code>の実装は下記の通り。<code>Unwrap() error</code>を実装しない構造体の場合は<code>nil</code>が返却されるようになってます。階層化を実現するための重要なメソッドなのにシグネチャ違いで実装されていると予期した通りに動かないので、Vetが気を効かせてくれるようになったみたいですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unwrap</span><span class="params">(err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u, ok := err.(<span class="keyword">interface</span> &#123;</span><br><span class="line">Unwrap() error</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u.Unwrap()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="errors-Is-error-Is"><a href="#errors-Is-error-Is" class="headerlink" title="errors.Is/error#Is"></a><code>errors.Is</code>/<code>error#Is</code></h2><p><code>errors.Is</code>は特定のエラーとの比較を、再起的に階層を掘って実施してくれます。<br>実装は以下の通り。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Is</span><span class="params">(err, target error)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> target == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err == target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isComparable := reflectlite.TypeOf(target).Comparable()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> isComparable &amp;&amp; err == target &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> x, ok := err.(<span class="keyword">interface</span>&#123; Is(error) <span class="keyword">bool</span> &#125;); ok &amp;&amp; x.Is(target) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> consider supporting target.Is(err). This would allow</span></span><br><span class="line"><span class="comment">// user-definable predicates, but also may allow for coping with sloppy</span></span><br><span class="line"><span class="comment">// APIs, thereby making it easier to get away with them.</span></span><br><span class="line"><span class="keyword">if</span> err = Unwrap(err); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>やっていることは↓の通り。</p><ul><li>targetが比較可能なら比較</li><li><code>err</code>に <code>Is(err error) bool</code>メソッドが実装されていればcall</li><li>errをUnwrapする。できなければfalse返却</li></ul><p><code>Unwrap</code>のときと同じ具合で、シグネチャを確認するような実装になっていますね。</p><h2 id="errors-As-error-As"><a href="#errors-As-error-As" class="headerlink" title="errors.As/error#As"></a><code>errors.As</code>/<code>error#As</code></h2><p><code>errors.As</code>はエラーに対する型アサーションを実施してくれます。<br>実装は以下の通り。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">As</span><span class="params">(err error, target <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> target == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;errors: target cannot be nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">val := reflectlite.ValueOf(target)</span><br><span class="line">typ := val.Type()</span><br><span class="line"><span class="keyword">if</span> typ.Kind() != reflectlite.Ptr || val.IsNil() &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;errors: target must be a non-nil pointer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">targetType := typ.Elem()</span><br><span class="line"><span class="keyword">if</span> targetType.Kind() != reflectlite.Interface &amp;&amp; !targetType.Implements(errorType) &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;errors: *target must be interface or implement error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> reflectlite.TypeOf(err).AssignableTo(targetType) &#123;</span><br><span class="line">val.Elem().Set(reflectlite.ValueOf(err))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> x, ok := err.(<span class="keyword">interface</span>&#123; As(<span class="keyword">interface</span>&#123;&#125;) <span class="keyword">bool</span> &#125;); ok &amp;&amp; x.As(target) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">err = Unwrap(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>やっていることは以下です。</p><ul><li>targetが有効なポインタでなければエラー（errの型アサーション結果代入先であるため）</li><li>ループ<ul><li>targetにerrが代入可能なら代入して終了</li><li><code>As(interface&#123;&#125;) bool</code>メソッドがあればそれを呼ぶ。trueが帰ってくれば終了</li><li>Unwrapして次ループに入る</li></ul></li></ul><p>指定した型として扱えるまで階層を掘って試行してくれていますね。</p><p>ここでもシグネチャが大事になってきます。</p><h1 id="警告されるようになった実装"><a href="#警告されるようになった実装" class="headerlink" title="警告されるようになった実装"></a>警告されるようになった実装</h1><p>リリースノートのサンプルに戻ります。</p><p>以下がVetによって警告されるようになったとのことですが、具体的に言うと<code>Is</code>のシグネチャが間違っていますね。<code>errors.Is</code>を有効に使用するには<code>Is(err error) bool</code>として実装する必要があります。</p><p>↓の実装だとどんなに頑張っても<code>errors.Is</code>が<code>false</code>を返すので、何もないと貴重な時間を無駄にしたり、最悪の場合バグに気づかずリリースなんてことにもなりかねません。今回の修正でVetが怒ってくれるようになったので、そんな不幸なことが起きることが無くなったわけですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123; hint <span class="keyword">string</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MyError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123; ... &#125; <span class="comment">// MyError implements error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(MyError)</span> <span class="title">Is</span><span class="params">(target <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123; ... &#125; <span class="comment">// target is interface&#123;&#125; instead of error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Foo</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">x, y := MyError&#123;<span class="string">&quot;A&quot;</span>&#125;, MyError&#123;<span class="string">&quot;B&quot;</span>&#125;</span><br><span class="line"><span class="keyword">return</span> errors.Is(x, y) <span class="comment">// returns false as x != y and MyError does not have an `Is(error) bool` function.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>というわけで<code>error#Is/As/Unwrap</code>ネタでした。</p><p>少しだけ平和な世界に近づいたようです。</p><p>次回は連載最後で市川さんの記事です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210819b/errors.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;304&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot d</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="エラーハンドリング" scheme="https://future-architect.github.io/tags/%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/"/>
    
    <category term="Go1.17" scheme="https://future-architect.github.io/tags/Go1-17/"/>
    
  </entry>
  
  <entry>
    <title>エキスパートPythonプログラミング改訂3版が出版されました</title>
    <link href="https://future-architect.github.io/articles/20210819a/"/>
    <id>https://future-architect.github.io/articles/20210819a/</id>
    <published>2021-08-18T15:00:00.000Z</published>
    <updated>2021-08-28T04:19:59.208Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210819a/302105001236.jpeg" alt="" width="400" height="513" loading="lazy"><p>TIGの渋川です。エキスパートPythonプログラミング改訂3版が出版されました。ますます厚みを増し、買ってくれた知人からは、<a href="https://altema.jp/ffrk/weapon/1581">学者専用武器</a>なのでは、とか銃弾止められそうとか感想をいただいております。</p><p>詳しくは共訳の清水川さんがすでに記事にしています。</p><ul><li><a href="http://www.freia.jp/taka/blog/expert-python-programming-3rd-intro/index.html">『エキスパートPythonプログラミング 改訂3版』の紹介</a></li></ul><p>僕が最初に触ったPython 2.2と比べても、また原著の初版の時代と比べても、言語から標準ライブラリから周辺ツールまで、かなりの進展がありました。本書もそのような言語のバージョンアップやエコシステムの変化を取り入れています。一部翻訳でいろいろ加えた内容などもあります。</p><p>一方で、現在話題の機械学習は触れていません。逆にいえば、そちらのライブラリなどはいろいろ進展があったとしても、本書の内容は古くなったり価値が減ったりはしません。言語のコアやテスト、ドキュメントやビルド周りなど、そういうところのストイックなところにフォーカスしています。</p><p>原著が説明対象にとりあげているPythonバージョンは3.7ですが、3.9とか一部3.10の話題とかも取り入れつつ、現時点で最新の話題を扱う書籍となっています。どうしても翻訳本というのは元のソフトウェアがリリースされてから原著が書かれるまでのリードタイム、翻訳のリードタイムと、どうしても最新情報からは遅れがちなのですが、これまで初版、改訂2版、改訂3版とやってきた中でずっと行ってきたように、鮮度の高い書籍としていろいろ訳注が追加されたりしています。このあたり、Pythonのコアメンバーでもある稲田さんのパワーは絶大でした。</p><p>僕自身もいろいろコラム的なやつとか章とかを追記したりしました。僕が書き足した内容はだいたいこれぐらいですかね。いくつかは下書きを技術ブログとしても出しています。</p><ul><li><a href="https://future-architect.github.io/articles/20200721/">PythonユーザーのためのGraalVM</a></li><li><a href="https://future-architect.github.io/articles/20200910/">「2020年代のコンテナ時代のPythonアーキテクチャ&amp;デプロイ」というテーマでPyCon.jp 2020で発表してきました</a></li><li><a href="https://future-architect.github.io/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</a></li><li><a href="https://future-architect.github.io/articles/20200514/">仕事でPythonコンテナをデプロイする人向けのDockerfile (2): distroless編</a></li><li>型ヒントの仕様の遷移（PEP集）</li><li>セイウチ演算子（walrus operator）</li><li><a href="https://future-architect.github.io/articles/20201223/">2021年版Pythonの型ヒントの書き方 (for Python 3.9)</a></li></ul><p>これらの内容ですが、英語でもまとまった内容がなかったり（Docker周りとか）したところで調べつつブログにまとめて書籍にも入れているので、世界でもトップクラスに情報の新鮮な書籍にできたのではないか、と思っています。</p><p>改訂2版からもページ数は100ページ増なのにお値段ほぼ据え置きということでお得度はかなり高い本になっていると思います。ぜひ、お手にとっていただきたいと思います。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://www.kadokawa.co.jp/product/302105001236/">アスキードワンゴの商品ページ</a></li><li><a href="https://www.amazon.co.jp/dp/B09BHTY4Z8/">Amazonの商品ページ</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210819a/302105001236.jpeg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;513&quot; loading=&quot;lazy&quot;&gt;


&lt;p&gt;TIGの渋川です。エキスパートPythonプログラミング改訂3版が出版されました</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="出版" scheme="https://future-architect.github.io/tags/%E5%87%BA%E7%89%88/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>AWS Certified Solutions Architect - Associate 合格体験記</title>
    <link href="https://future-architect.github.io/articles/20210818b/"/>
    <id>https://future-architect.github.io/articles/20210818b/</id>
    <published>2021-08-17T15:00:01.000Z</published>
    <updated>2021-08-28T04:19:59.205Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、TIGの市川浩暉です。</p><p>先日、業務の合間を縫って少しづつ勉強を進めていた、AWS Certified Solutions Architect - Associate（AWS SAA）を受験し、合格することができました。</p><p>今回は合格までの学習方法と試験を受けた感想を共有したいと思います。</p><p>この記事がこれから受験する人の一助となれば幸いです。</p><img src="/images/20210818b/AWS-SolArchitect-Associate-2020.png" alt="合格バッチ" width="340" height="340" loading="lazy"><h1 id="AWS-Certified-Solutions-Architect-Associate-とは"><a href="#AWS-Certified-Solutions-Architect-Associate-とは" class="headerlink" title="AWS Certified Solutions Architect - Associate とは"></a>AWS Certified Solutions Architect - Associate とは</h1><blockquote><p>AWS 認定ソリューションアーキテクト - アソシエイト試験は、AWS における分散システムの可用性、コスト効率、高耐障害性およびスケーラビリティの設計に関する 1 年以上の実務経験を持つソリューションアーキテクト担当者を対象としています。<br>引用：<a href="https://aws.amazon.com/jp/certification/certified-solutions-architect-associate/">AWS 認定 ソリューションアーキテクト – アソシエイト</a></p></blockquote><p>AWS 認定 ソリューションアーキテクト – アソシエイト試験は、AWSで提供されている認定試験のうち、アソシエイトレベルに位置づけられている資格で、以下の能力が検証される試験になっています。</p><ul><li>AWSのテクノロジーを使ってセキュアかつ堅牢なソリューションを設計するための能力</li><li>適切なAWSのサービスを使用し、要件を基にアーキテクチャ原則に従ってソリューションを設計する能力</li><li>ワークロードのライフサイクルを通して、ベストプラクティスに基づく実装ガイダンスを組織に提供する能力</li></ul><p>試験ガイドはこちらです。<br><a href="https://d1.awsstatic.com/ja_JP/training-and-certification/docs-sa-assoc/AWS-Certified-Solutions-Architect-Associate_Exam-Guide.pdf">AWS Certified Solutions Architect – Associate(SAA-C02) Exam Guide</a></p><p>AWS Certified Solutions Architect - Associate試験は、試験名称が長いので、よく <code>AWS SAA</code> と略されることが多いです。<br>AWSの認定資格試験は現在12種類ありますが、個人的にはAWSの勉強を始める上で最初に受ける登竜門のような試験である印象を持っています。ベーシックレベルの試験として「<a href="https://aws.amazon.com/jp/certification/certified-cloud-practitioner/">クラウドプラクティショナー</a>」の試験もありますが、実務経験が一定程度あるのであればAWS SAAから受験して問題ないと思います。</p><p>この試験の勉強を通じて、AWSの主要サービスやAWSの推奨するアーキテクチャ構成の理解を深めることができます。</p><h1 id="受験したきっかけ"><a href="#受験したきっかけ" class="headerlink" title="受験したきっかけ"></a>受験したきっかけ</h1><p>以前所属していたプロジェクトが少人数体制であったこともあり、アプリ・インフラを横断的に見て課題解決に当たることが多くありました。そのため、業務では私が担当していたアプリの知識だけでなく、インフラの知識やAWSの知識が求められることが多く、ミーティングで話についていけない時があったため、話を理解できるようにしたかったのが受験したきっかけになります。</p><p>また、直近のプロジェクトでは要件定義に近いフェーズを実施していたため、機能実装や構築を行っておらず、技術力が下がっているのでは？、と少し不安を抱えていたため、資格を一つのマイルストンとして設定し、モチベーションを維持しようと考えました。</p><h1 id="試験対策"><a href="#試験対策" class="headerlink" title="試験対策"></a>試験対策</h1><p>以下に私が合格するまでに実施した勉強法を記載します。</p><h2 id="使用した教材"><a href="#使用した教材" class="headerlink" title="使用した教材"></a>使用した教材</h2><h3 id="Udemy教材"><a href="#Udemy教材" class="headerlink" title="Udemy教材"></a>Udemy教材</h3><ul><li><a href="https://www.udemy.com/course/aws-associate/">これだけでOK！ AWS 認定ソリューションアーキテクト – アソシエイト試験突破講座（SAA-C02試験対応版）</a></li></ul><p>他の合格体験記にもよく出てきますが、基本知識はこの教材で身につけました。<br>サービスの説明だけでなく、ハンズオンもついており、非常にわかりやすいです。<br>ハンズオンを含めると結構時間がかかるので、他の方の合格記ではハンズオンだけSkipしている方もいますが、私は理解を深める目的で全て実施しました。</p><ul><li><a href="https://www.udemy.com/course/aws-knan/">【SAA-C02版】AWS 認定ソリューションアーキテクト アソシエイト模擬試験問題集（6回分390問）</a></li></ul><p>これもUdemyの教材になりますが、比較的難易度の高めの問題などを中心に構成された問題集です。（講義はなく、問題のみのコンテンツ）<br>上記のアソシエイト試験突破講座にも小テストと問題集がついていますが、もう少し問題演習をしたい人は購入しても良いかと思います。</p><p>ただ、Udemyの仕様に引きづられているのかわからないのですが、この問題集は一問一答形式ではなく、65問解き終わって初めて正解が分かります。一気に65問解くのは結構ハードなので、一問一答形式で問題演習をしていきたい人は後述する「aws.koiwaclub.com」での問題演習をした方が勉強しやすいかもしれません。</p><h2 id="学習サイト-aws-koiwaclub-com"><a href="#学習サイト-aws-koiwaclub-com" class="headerlink" title="学習サイト aws.koiwaclub.com"></a>学習サイト aws.koiwaclub.com</h2><p>「AWS WEB問題集で学習しよう」というサービスで、実際の試験レベルに合った問題演習を行うことができます。問題数も豊富で、ここに記載されている<a href="https://aws.koiwaclub.com/passrecord/saa-experience/">合格体験記</a>を読んで勉強法や出題傾向を確認していました。</p><p>有料のサービスにはなりますが、問題の質は良く、ここから実際の試験に出てきた問題もいくつかありました。私は試験1週間前にこのサービスに申し込み、#90 〜 #148 の問題を解いてました。</p><p>また、解答形式は一問一答形式で、解説+関連するAWSの公式ドキュメントのリンクも付いているので非常に学習しやすく、理解も深めながら進めることができました。</p><h2 id="書籍"><a href="#書籍" class="headerlink" title="書籍"></a>書籍</h2><ul><li><a href="https://www.amazon.co.jp/dp/4815607389">AWS認定資格試験テキスト AWS認定ソリューションアーキテクト - アソシエイト 改訂第2版</a></li></ul><p>リファレンスとして、こちらの本を使っていました。<br>非常に整理されていてわかりやすく、動画や問題演習で身に付けた知識を整理するのに非常に有用でした。</p><p>AWSのSAAの試験内容が2020年に改定されたことに伴い、少し前に出版された本は現在のSAA-C02版に対応していない場合があります。そのため、書籍を購入する場合は、SAA-C02版の試験に対応している書籍かどうか、念のため確認したほうが良いと思います。</p><h2 id="AWS主催の試験準備ワークショップ-「ソリューションアーキテクト-アソシエイト」"><a href="#AWS主催の試験準備ワークショップ-「ソリューションアーキテクト-アソシエイト」" class="headerlink" title="AWS主催の試験準備ワークショップ 「ソリューションアーキテクト - アソシエイト」"></a>AWS主催の試験準備ワークショップ 「ソリューションアーキテクト - アソシエイト」</h2><p>私が学習をしていた時期にちょうどAWS Summit Onlineが開催されており、期間中に「AWS 認定 - 試験準備ワークショップ ソリューションアーキテクト - アソシエイト」という講座が配信されていたので、そちらを視聴しました。<br>内容としては、「レジリエント（回復性がある）アーキテクチャ設計」、「高パフォーマンスアーキテクチャの設計」、「セキュアなアプリケーションとアーキテクチャの設計」、「コスト最適化アーキテクチャの設計」の4つのセッションで構成されており、サンプル問題とその解説が行われます。</p><p>現在でも定期的にウェビナー形式で行われているので、もし時間に都合がつく方は受けてみると良いと思います。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">【AWS認定に挑戦しよう】「AWS 認定ソリューションアーキテクト – アソシエイト」試験準備ワークショップ➡️ <a href="https://t.co/DK3aTiehto">https://t.co/DK3aTiehto</a><a href="https://twitter.com/hashtag/AWS%E8%AA%8D%E5%AE%9A?src=hash&amp;ref_src=twsrc%5Etfw">#AWS認定</a> インストラクターが、試験問題を解く際のポイントをサンプル問題を用いて解説する無料ウェビナーを開催。ライブ Q&amp;A で質問も可能です！ <a href="https://t.co/CJPNTxy8UZ">pic.twitter.com/CJPNTxy8UZ</a></p>&mdash; AWS/アマゾン ウェブ サービス/クラウド (@awscloud_jp) <a href="https://twitter.com/awscloud_jp/status/1421984092741152775?ref_src=twsrc%5Etfw">August 2, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="Black-Belt-Online-Seminar"><a href="#Black-Belt-Online-Seminar" class="headerlink" title="Black Belt Online Seminar"></a>Black Belt Online Seminar</h2><p>Black Belt Online Seminarとは、AWSの技術担当者が各サービスについてテーマごとに、そのサービスの概要を説明してくれる動画コンテンツです。過去に開催された Black Belt の動画や資料のアーカイブは<a href="https://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-service-cut/">こちら</a>から確認することができます。</p><p>動画だと理解が深まりやすい分、視聴するのに時間がかかるので、私は全てのサービスを視聴せず、上記教材でも理解が浅い領域のみ見ていました。</p><h1 id="勉強の反省点"><a href="#勉強の反省点" class="headerlink" title="勉強の反省点"></a>勉強の反省点</h1><p>当初はUdemyの講座を受けてハンズオンを行い問題演習をする流れで学習を進めていました。しかし、今振り返ってみると理解ができていないまま画面の通りに操作しているだけになってしまったかなと思います。ですので、一旦全体的な知識を身に付け、ある程度の問題演習をした後にハンズオンを実施する流れだと、理解がさらに深まったのではないかと思いました。</p><h1 id="受験方法"><a href="#受験方法" class="headerlink" title="受験方法"></a>受験方法</h1><p>ピアソンVUEを利用して自宅受験を選択しました。<br>というのも、私が受験する際に「<a href="https://pages.awscloud.com/Global_TrainCert_Japan_Online_Proctoringja.html">自宅からAWS認定を受験すると、1回目の受験が不合格でも、2回目の再受験が無料になるキャンペーン</a>」を実施しており、こちらを利用して受験しました。</p><p>結果、1回目で合格してしまったので2回目が無料になる特典は利用せずでしたが、精神的な余裕を持って試験に臨むことができたと思います。</p><p>担当いただいた試験官の方は海外の方でしたが、指示はチャット形式（日本語）で行われたので非常にスムーズで、自宅での認定試験受験は部屋を片付けないといけないこと以外は特に不自由はなく受験することができました。（少し前は試験官の方が海外の方だったっぽく、コミュニケーションが取りにくかったことがあったらしいのですが、現在は改善されているようです）</p><h1 id="試験での注意"><a href="#試験での注意" class="headerlink" title="試験での注意"></a>試験での注意</h1><p>AWSの認定試験ではよく変な日本語の問題があるとよく言われていますが、やはり今回の試験でも日本語がおかしい部分が多々散見されました。最初はとっつきにくさを感じますが、解いていくうちに次第に慣れてくるのと、表示を英語に切り替えて意味を理解することはできるので、そこまで大きな負担ではないかなと思います。</p><h1 id="合格後の特典"><a href="#合格後の特典" class="headerlink" title="合格後の特典"></a>合格後の特典</h1><p>AWS認定試験に合格すると、いくつかの特典を受けることができます。</p><img src="/images/20210818b/image.png" alt="合格後の特典" width="425" height="136" loading="lazy"><ul><li>50% Discount on your next Exam<ul><li>次回受ける認定試験の受験料が半額となる。</li></ul></li><li>AWS Free Practice Exam Voucher<ul><li>模擬試験（¥2,000 ~ ¥4,000）の無料クーポン</li></ul></li><li>Apply to join our Subject Matter Expert (SME) Program<ul><li>SMEへの参加資格を得られる。</li></ul></li><li>AWS Certified Associate: Store Access<ul><li>AWS公式グッズのストアへのアクセスができる。</li></ul></li><li>AWS Certified Global LinkedIn Community<ul><li>AWS認定資格に合格した者のみが参加できるLinkedInのコミュニティへ参加できる。</li></ul></li></ul><p>また、試験に合格した証として認定バッチも受け取ることができます。</p><img src="/images/20210818b/image_2.png" alt="認定バッチ" width="760" height="744" loading="lazy"><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>業務の合間を縫って資格試験の勉強をしていくことは非常に大変でしたが、そこで得た知識を業務に活かせていると実感できることがあり、勉強のモチベーションが下がることはありませんでした。また、前のプロジェクトで構築していたアプリケーションのアーキテクチャ構成がAWSのベストプラクティスに従って設計されていることを理解できたり、前プロジェクトで学んだ断片的なAWSの知識の点が、線で繋がっていく感覚を感じることができたのが非常に面白かったです。</p><p>また、広い範囲で多くの機能が提供されているAWSをただ闇雲に学ぶのではなく、資格をマイルストンとして設定してそれに向かって勉強を進めていくことは、効率的にAWSの概要やクラウドインフラで押さえておくべき知識を学ぶことができるという点で非常に有用だと思いました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回、資格としての合格は得ることはできましたが、まだスタートラインに立ったばかりなので、これからも継続的に復習をして、レベルアップしていきたいと思います。また、AWS SAAだけでなく、AWS DVAやSOAなどの試験に向けて、継続して学習を進めていきたいと思います。</p><p>Future Tech Blogでは、今回扱ったAWS SAAの上位資格であるAWS Certified Solutions Architect - Professionalに合格した<a href="https://future-architect.github.io/articles/20210607a/">伊藤真彦さんの記事</a>やAWSだけでなく、<a href="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">GCPやTerraform認定試験の合格記</a>もありますので、認定試験を受験する前にぜひご覧ください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは、TIGの市川浩暉です。&lt;/p&gt;
&lt;p&gt;先日、業務の合間を縫って少しづつ勉強を進めていた、AWS Certified Solutions Architect - Associate（AWS SAA）を受験し、合格することができました。&lt;/p&gt;
&lt;p&gt;今回は合格まで</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>Go1.17における go get の変更点</title>
    <link href="https://future-architect.github.io/articles/20210818a/"/>
    <id>https://future-architect.github.io/articles/20210818a/</id>
    <published>2021-08-17T15:00:00.000Z</published>
    <updated>2021-08-28T04:19:59.201Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210818a/go_get.png" alt="" width="900" height="388" loading="lazy"><p>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/">Renee French</a>.</p><p>TIGの辻です。</p><p><a href="/articles/20210810a/">Go 1.17連載</a>の5日目の記事です。本記事ではGo1.17の <code>go get</code> に関するアップデートの詳細をお伝えします。</p><h2 id="go-get-に関する変更点サマリ"><a href="#go-get-に関する変更点サマリ" class="headerlink" title="go get に関する変更点サマリ"></a><code>go get</code> に関する変更点サマリ</h2><ul><li>モジュール外からの <code>go get</code> におけるコマンドインストール時に、警告を出力する</li><li><code>go get</code> の <code>-insecure</code> フラグは使えなくなった、代わりに環境変数 <code>GOINSECURE</code> を使う</li></ul><h3 id="モジュール外からの-go-get-におけるコマンドインストール時に、警告を出力する"><a href="#モジュール外からの-go-get-におけるコマンドインストール時に、警告を出力する" class="headerlink" title="モジュール外からの go get におけるコマンドインストール時に、警告を出力する"></a>モジュール外からの <code>go get</code> におけるコマンドインストール時に、警告を出力する</h3><h4 id="go-get-時の警告"><a href="#go-get-時の警告" class="headerlink" title="go get 時の警告"></a><code>go get</code> 時の警告</h4><p><a href="https://golang.org/doc/go1.16#go-command">Go1.16のリリースノート</a>でも、コマンドのインストールで <code>go get</code> を使うのは非推奨、とお知らせがありましたが、Go1.17では、モジュール外からコマンドのバイナリを <code>go get</code> を使ってインストール<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>した場合、警告が出るようになりました。いよいよ次のGo 1.18のリリースでは <code>go get</code> でコマンドのインストールができなくなりそうです。</p><ul><li>非推奨なインストール方法</li></ul><p>メインモジュール外で <code>go get</code> してコマンドをインストールしようとすると、以下のように警告が出力されます。将来的には <code>go get</code> 時にデフォルトで <code>-d</code> フラグが有効になるため、<code>go get</code> でバイナリをインストールすること自体ができなくなります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/future-architect/awsmfa/cmd/awsmfa</span><br><span class="line">go: downloading github.com/future-architect/awsmfa v1.1.1</span><br><span class="line">go: downloading gopkg.in/ini.v1 v1.62.0</span><br><span class="line">go get: installing executables with <span class="string">&#x27;go get&#x27;</span> <span class="keyword">in</span> module mode is deprecated.</span><br><span class="line">        Use <span class="string">&#x27;go install pkg@version&#x27;</span> instead.</span><br><span class="line">        For more information, see https://golang.org/doc/go-get-install-deprecation</span><br><span class="line">        or run <span class="string">&#x27;go help get&#x27;</span> or <span class="string">&#x27;go help install&#x27;</span>.</span><br></pre></td></tr></table></figure><ul><li>推奨されるインストール方法</li></ul><p>コマンドのインストールは以下のように <code>go install</code> を使いましょう。Go1.16の連載の <a href="https://future-architect.github.io/articles/20210209/">Go 1.16のgo installについて</a> の記事の中でも紹介していますが、Go1.16からツールなどの実行バイナリをローカル環境にインストールする場合に <code>go install</code> でバージョンを指定してインストールできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go install github.com/future-architect/awsmfa/cmd/awsmfa@v1.1.1</span><br></pre></td></tr></table></figure><h4 id="将来的にデフォルトで-go-get-時に-d-オプションが有効になることの影響"><a href="#将来的にデフォルトで-go-get-時に-d-オプションが有効になることの影響" class="headerlink" title="将来的にデフォルトで go get 時に -d オプションが有効になることの影響"></a>将来的にデフォルトで <code>go get</code> 時に <code>-d</code> オプションが有効になることの影響</h4><p>将来的には <code>go get</code> 時はデフォルトで <code>-d</code> フラグが有効になります。<code>-d</code> フラグはソースのみをインストールし、ビルドは行われません。<code>go.mod</code> ファイルを更新し、パッケージのビルドに必要なソースをダウンロードするだけです。</p><p><code>-d</code> がデフォルトで有効になると、<code>go get</code> 時はソースのダウンロードのみを行い、ビルドはしなくなるため、以下のような影響があります。</p><ul><li>1.<code>go get</code> がより高速になる</li><li>2.プラットフォーム依存のソースを、ローカルの環境でビルドできない場合、<code>go get</code> 時にエラー報告しなくなる</li></ul><p>1つ目のポイントは多くのGopherにとって嬉しいポイントかもしれません。</p><h4 id="なぜ非推奨になったのか"><a href="#なぜ非推奨になったのか" class="headerlink" title="なぜ非推奨になったのか"></a>なぜ非推奨になったのか</h4><p><a href="https://golang.org/doc/go-get-install-deprecation">Deprecation of ‘go get’ for installing executables</a> に背景が書いてあります。端的に言うと「<code>go get</code> の、コマンドをビルドしてインストールする機能が <code>go install</code> と重複するため」ということです。</p><h4 id="コントリビュートチャンス？！"><a href="#コントリビュートチャンス？！" class="headerlink" title="コントリビュートチャンス？！"></a>コントリビュートチャンス？！</h4><p>おまけですが、多くのREADMEなどのドキュメントではGo製のコマンドをインストールする方法として <code>go get</code> の手順を記載しています。<code>golang</code> のリポジトリにもコマンドインストールで <code>go get</code> を用いていた記述がいくつかありました。Goにコントリビュートしてみたい方はチャンスかもしれません。<code>golang/review</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> などでも <code>go get</code> としてコマンドをインストールする手順がまだドキュメントに記載されています。もちろんFutureが公開しているGo製のツールのドキュメントも今後アップデートしていく必要があります。</p><h3 id="go-get-の-insecure-フラグは使えなくなった、代わりに環境変数-GOINSECURE-を使う"><a href="#go-get-の-insecure-フラグは使えなくなった、代わりに環境変数-GOINSECURE-を使う" class="headerlink" title="go get の -insecure フラグは使えなくなった、代わりに環境変数 GOINSECURE を使う"></a><code>go get</code> の <code>-insecure</code> フラグは使えなくなった、代わりに環境変数 <code>GOINSECURE</code> を使う</h3><p><code>go get</code> 時に <code>-insecure</code> を付与してコマンドを実行すると、<code>-insecure</code> フラグはサポートされなくなった旨が表示されるようになりました。<a href="https://golang.org/doc/go1.16">Go1.16のリリースノート</a>では将来 <code>-insecure</code> フラグを削除するよ、とお知らせがありましたが、それが実現しました。</p><ul><li>Go1.17で <code>-insecure</code> フラグを付与して <code>go get</code> したときの例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> get -insecure github.com/future-architect/<span class="keyword">go</span>-mcprotocol</span><br><span class="line"><span class="keyword">go</span> get: -insecure flag is no longer supported; use GOINSECURE instead</span><br></pre></td></tr></table></figure><p>Go1.14から環境変数 <code>GOINSECURE</code> が追加になっているので、安全でない方法でアクセスする必要があるときは環境変数 <code>GOINSECURE</code> に対象のホストを指定しましょう。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">ソースをダウンロードして、ソースからビルドしたバイナリを <code>$GOPATH/bin</code> に配備する、ということ</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://github.com/golang/review/tree/2e4fd9a232c3368afeca71043fd7538ed11c681c">https://github.com/golang/review/tree/2e4fd9a232c3368afeca71043fd7538ed11c681c</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://github.com/golang/review/tree/2e4fd9a232c3368afeca71043fd7538ed11c681c">https://github.com/golang/review/tree/2e4fd9a232c3368afeca71043fd7538ed11c681c</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210818a/go_get.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;388&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot d</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.17" scheme="https://future-architect.github.io/tags/Go1-17/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.17からの負のruneの扱い</title>
    <link href="https://future-architect.github.io/articles/20210817a/"/>
    <id>https://future-architect.github.io/articles/20210817a/</id>
    <published>2021-08-16T15:00:00.000Z</published>
    <updated>2021-08-28T04:19:59.198Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210817a/runes-947831.jpg" alt="" title="Alex VolodskyによるPixabayからの画像" width="900" height="675" loading="lazy"><p>こんにちは、TIGの玉木です。<a href="https://future-architect.github.io/articles/20210810a/">Go 1.17連載</a>の4記事目です。</p><p>この記事ではGo 1.17で更新があった負のruneの扱いについてです。更新自体は簡単なもので、この記事ではruneの説明から行います。</p><h2 id="この記事を書いたきっかけ"><a href="#この記事を書いたきっかけ" class="headerlink" title="この記事を書いたきっかけ"></a>この記事を書いたきっかけ</h2><p>Go 1.17のRelsease Notes<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>を眺めていたらいくつかの箇所で <code>negative rune values</code>という記述があり、runeってなんだ？と気になったことがきっかけです。</p><h2 id="runeについて"><a href="#runeについて" class="headerlink" title="runeについて"></a>runeについて</h2><p>こちらの<a href="https://qiita.com/seihmd/items/4a878e7fa340d7963fee">seihmdさんのQiita記事</a>がとてもわかりやすかったです。詳細はそちらの記事に任せて、この記事では簡単な紹介に留めます。</p><p>コンピュータは文字を0と1のビットで表現します。例えば「”あ”, ”い”, “う”, “え”, “お”」の5種類の文字しかなければ、それぞれ「”000”, “001”, “010”, “011”, “100”」のように0と1で文字を表現することができます。このように文字に非負整数値を対応付け、コンピュータに利用できるように変換することを、文字符号化と呼びます。この文字符号化のうちの1つがUnicodeであり、対応する非負整数値をコードポイントと呼びます。例えば”あ”という文字のコードポイントは3042(16進数表記)となります。</p><p>Goではこのコードポイントをより短い用語としてruneを導入したようです<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。コードポイントとruneは全く同義です。</p><h2 id="報告されていた問題"><a href="#報告されていた問題" class="headerlink" title="報告されていた問題"></a>報告されていた問題</h2><p><a href="https://github.com/golang/go/issues/43254">https://github.com/golang/go/issues/43254</a></p><p>上記issueでは負のruneが来た場合、他の異常なruneと同じように振る舞うべきだがそうなっていないと報告しています。issueを報告している方が<a href="https://play.golang.org/p/9ZkvjGuE1so">Go Playgroundで共有しているコード</a>が以下になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unicode&quot;</span></span><br><span class="line"><span class="string">&quot;unicode/utf8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// unicode.Is goes checks rangeTab.R16 with negative values.</span></span><br><span class="line"><span class="comment">// -2147483583 = 0x80000041</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;unicode.IsPrint(-2147483583) = %t\n&quot;</span>, unicode.IsPrint(<span class="number">-2147483583</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// bytes.Buffer.WriteRune runs the single-byte codepath with</span></span><br><span class="line"><span class="comment">// negative values, even writing invalid UTF-8.</span></span><br><span class="line"><span class="keyword">var</span> b bytes.Buffer</span><br><span class="line">b.WriteRune(<span class="number">-2147483583</span>) <span class="comment">// 0x80000041</span></span><br><span class="line">b.WriteRune(<span class="number">-2147483393</span>) <span class="comment">// 0x800000ff</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;b.String() = %q\n&quot;</span>, b.String())</span><br><span class="line">fmt.Printf(<span class="string">&quot;utf8.ValidString(b.String()) = %t\n&quot;</span>, utf8.ValidString(b.String()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>出力(Go1.16以前)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unicode.IsPrint(-2147483583) = <span class="literal">true</span></span><br><span class="line">b.String() = <span class="string">&quot;A\xff&quot;</span></span><br><span class="line">utf8.ValidString(b.String()) = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>unicode.IsPrint()が負の整数を入れているにも関わらず、trueになっています。runeは非負整数しか取り得ないため、falseを返すべきです。</p><p>また、Builder.WriteRuneで負の整数を入れているにも関わらず、b.String()に文字が入っています。Unicodeではこのような場合、REPLACEMENT CHARACTERと呼ばれる文字�(rune: U+FFFD)に変換するのが一般的です<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。また、異常な文字が入ってしまっているため、utf8.ValidString(b.String())がfalseになっています。</p><h2 id="今回の更新について"><a href="#今回の更新について" class="headerlink" title="今回の更新について"></a>今回の更新について</h2><p>以下Go 1.17 Relsease Notesからの本記事に関係がある箇所の引用です。</p><blockquote><p>bufio<br>The Writer.WriteRune method now writes the replacement character U+FFFD for negative rune values, as it does for other invalid runes.</p></blockquote><blockquote><p>bytes<br>The Buffer.WriteRune method now writes the replacement character U+FFFD for negative rune values, as it does for other invalid runes.</p></blockquote><blockquote><p>strings<br>The Builder.WriteRune method now writes the replacement character U+FFFD for negative rune values, as it does for other invalid runes.</p></blockquote><blockquote><p>unicode<br>The Is, IsGraphic, IsLetter, IsLower, IsMark, IsNumber, IsPrint, IsPunct, IsSpace, IsSymbol, and IsUpper functions now return false on negative rune values, as they do for other invalid runes.</p></blockquote><ul><li>bufio</li><li>bytes</li><li>strings</li></ul><p>上記パッケージでは、負のruneを他の無効なruneと同じくU+FFFDに置き換えるように修正されています。</p><ul><li>unicode</li></ul><p>負のruneの場合、該当する関数ではfalseを返すように修正されています。</p><p>Go 1.17では、先程の問題を再現するコードは以下のような出力になります。</p><figure class="highlight bash"><figcaption><span>出力(Go1.17)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unicode.IsPrint(-2147483583) = <span class="literal">false</span></span><br><span class="line">b.String() = <span class="string">&quot;��&quot;</span></span><br><span class="line">utf8.ValidString(b.String()) = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>unicode.IsPrint()に負の整数を入れるとfalseを返すようになります。Builder.WriteRuneで負の整数を入れているため、�に置き換えられています。�が代わりに入るようになったため、utf8.ValidString()がtrueを返します。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Go 1.17では以下のように負のruneの扱いが修正されました。</p><ul><li>bufio, bytes, stringsパッケージでのWriteRuneメソッドにおいて、負のruneをU+FFFDに置き換える</li><li>unicodeパッケージでのいくつかの関数において、負のruneが来た場合falseを返す</li></ul><p>あまりコードを書いていて気にする箇所ではないかもしれませんが、この記事が参考になれば幸いです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://tip.golang.org/doc/go1.17">https://tip.golang.org/doc/go1.17</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://ja.wikipedia.org/wiki/Specials_(Unicode_block)">https://ja.wikipedia.org/wiki/Specials_(Unicode_block)</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210817a/runes-947831.jpg&quot; alt=&quot;&quot; title=&quot;Alex VolodskyによるPixabayからの画像&quot; width=&quot;900&quot; height=&quot;675&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;こんにちは</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.17" scheme="https://future-architect.github.io/tags/Go1-17/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night #14〜IDaaS/OSS/Managed比較〜</title>
    <link href="https://future-architect.github.io/articles/20210812b/"/>
    <id>https://future-architect.github.io/articles/20210812b/</id>
    <published>2021-08-11T15:00:01.000Z</published>
    <updated>2021-08-28T04:19:59.193Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210812b/key-2114046_1280.jpg" alt="" title="Arek SochaによるPixabayからの画像" width="640" height="408" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Technology Innovation Group所属の山田です。2021年7月21日に <a href="https://future.connpass.com/event/218520/">Future Tech Night #14～認証認可（IDaaS）勉強会～</a>で発表させてもらいました。</p><p>元々は、Rails Devise+cancancan、Cognito User Pools（5年前）、Auth0の開発経験があり、改めてOSSも加えて学んでみたかったのが、テーマを決めた背景になります。</p><p>なお、一緒に発表をした市川さんが、Auth0でWebAuthnを試されており、認証において非常に重要な機能になりますので、合わせてご覧ください。私はとても勉強になりました。</p><ul><li><a href="/articles/20210811b/">Future Tech Night #14「生体認証・デバイス認証を活用するパスワードレスな認証規格「WebAuthn」を体験！」</a></li></ul><h1 id="資料"><a href="#資料" class="headerlink" title="資料"></a>資料</h1><p>発表資料はこちらです。</p><script async class="speakerdeck-embed" data-id="a6797af79a054b808d099e7f53f1d430" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><h3 id="ハンズオン"><a href="#ハンズオン" class="headerlink" title="ハンズオン"></a>ハンズオン</h3><p>全てのプロダクトをまっさらな状態からハンズオンし、要した時間と、利用できるまでの工程をまとめてみました。<br>アプリケーションはVueで統一しています。</p><p>ソースコードはコピペで動くを事を目指し、参考URLも掲載しています。</p><ul><li> Auth0<br>Auth0の初期設定、vueを利用したハンズオン</li><li> keycloak<br>keycloakの初期設定、vueを利用したハンズオン</li><li> Cognito<br>Cognitoの初期設定、Amplify＋Vueを利用したハンズオン、hosted UI＋Vueを利用したハンズオン</li></ul><h3 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h3><ul><li>プラン<br>HPに掲載されている内容で、プランと価格を比較</li><li>機能<br>各プロダクトのダッシュボード画面、トップレベルメニューまでの機能比較</li></ul><h1 id="当日頂いたQA"><a href="#当日頂いたQA" class="headerlink" title="当日頂いたQA"></a>当日頂いたQA</h1><p>時間の関係で頂いたQAに返答できなかったため、改めてこの場で返答させて頂きます。</p><p><strong>Q.</strong> Firebase Auth はフューチャーさんの方で事例や検証などされたりしていますでしょうか？（Auth0 が最も事例がある感じでしょうか）もし Firebase Authの事例などがあれば、どういう基準で選んでいるのか回答頂けると助かります。<br><strong>A.</strong> 私の周囲では、Keycloak、Auth0の採用が多いです。<br>理由の1つとして、SSOの実現が必須になるケースが多く、central authentication serviceの仕組みが欲しくなってしまう為ですFirebase Auth（は知識が不足しており、定かではありませんが）やAmplify(+cognito)は単一アプリで利用するには良い印象ですが、IDPとして使う為には、追加の実装が必要になるため、採用するケースが少ないように思います。</p><hr><p><strong>Q.</strong> Auth0を導入される際に比較されたIDaaS, 比較ポイントがもしあれば教えていただけないでしょうか。例えばOktaなどは比較されましたでしょうか？<br><strong>A.</strong> 残念ながら、Oktaとの比較結果は持ち合わせておらず、申し訳ありません。<br>比較ポイントとして特殊なものは無く、機能、非機能、価格、開発の自由度で純粋に比較しています。機能であれば、SSOやAD/GSuiteなどとの統合、移行性、GDPRへの対応…etc<br>非機能であれば、認証スループット、可用性、データの所在…etc 等かと思います。</p><hr><p><strong>Q.</strong> IDaaSの選択肢として、Azure AD B2Cがどうか、私見で良いので聞きたいです。<br><strong>A.</strong> 勉強不足で申し訳ありません。Azure AD B2Cは初見でしたので機能を見てみました。<br>Customize性（Rules/Hooks）、SDKの充実度などはAuth0が有利に見えますが、基本的な機能は揃っており、価格メリットがあれば十分選択肢になりうると思えました。</p><hr><p><strong>Q.</strong> Futureでの各サービスやOSSの採用事例とその際の選定基準などあればお聞きしたいです<br><strong>A.</strong> プロジェクトによって、優先すべき内容が異なるため、決まった選定基準はありません。<br>基本的にはプロジェクト単位に定められた機能、非機能の要件で選定軸を作り、第3者レビューも通した上で採用プロダクトを決めています。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>次の機会があれば、追加で他のプロダクトも比較してみたいです。</p><p>ありがとうございました。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210812b/key-2114046_1280.jpg&quot; alt=&quot;&quot; title=&quot;Arek SochaによるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;408&quot; loading=&quot;lazy&quot;&gt;


&lt;h1 id</summary>
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
    <category term="IDaaS" scheme="https://future-architect.github.io/tags/IDaaS/"/>
    
    <category term="Keycloak" scheme="https://future-architect.github.io/tags/Keycloak/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.17のtesting新機能</title>
    <link href="https://future-architect.github.io/articles/20210812a/"/>
    <id>https://future-architect.github.io/articles/20210812a/</id>
    <published>2021-08-11T15:00:00.000Z</published>
    <updated>2021-08-28T04:19:59.190Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210812a/audit-3929140_640.jpg" alt="" title="mohamed HassanによるPixabayからの画像" width="640" height="371" loading="lazy"><p>TIGの伊藤真彦です。</p><p>この記事は<a href="/articles/20210810a/">Go1.17連載</a>の3記事目です。</p><h1 id="Go1-17からのtestingにおける新機能"><a href="#Go1-17からのtestingにおける新機能" class="headerlink" title="Go1.17からのtestingにおける新機能"></a>Go1.17からのtestingにおける新機能</h1><p><a href="https://tip.golang.org/doc/go1.17">Go1.17のリリースノート</a>にこのような記載があります。</p><blockquote><p>testing<br>Added a new testing flag -shuffle which controls the execution order of tests and benchmarks.</p><p>The new T.Setenv and B.Setenv methods support setting an environment variable for the<br>duration of the test or benchmark.</p><p>テストとベンチマークの実行順序を制御する新しいテストフラグ-shuffleを追加しました。</p><p>新しいT.SetenvおよびB.Setenvメソッドは、テストまたはベンチマークの期間中の環境変数の設定をサポートします。</p></blockquote><p>意外と根深い課題を解決できる嬉しい機能ですね、今回はこの新機能の紹介をすることにします。</p><h1 id="shuffleオプションについて"><a href="#shuffleオプションについて" class="headerlink" title="shuffleオプションについて"></a>shuffleオプションについて</h1><p>Goでテストを行う時はいくつかのフラグを追加することができます。<code>-run</code>で実行するテストを絞り込んだり、<code>-cover</code>でカバレッジを計測したりといった機能があります。</p><p>公式ドキュメントは<a href="https://pkg.go.dev/cmd/go/internal/test">こちら</a>です。</p><p>それらオプション群にshuffleが追加されました。</p><h3 id="shuffleオプションの使い方"><a href="#shuffleオプションの使い方" class="headerlink" title="shuffleオプションの使い方"></a>shuffleオプションの使い方</h3><p><a href="https://pkg.go.dev/cmd/go@master#hdr-Testing_flags">ドキュメント</a>に下記のように追記されています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-shuffle off,on,N</span><br><span class="line">Randomize the execution order of tests and benchmarks.</span><br><span class="line">It is off by default. If -shuffle is set to on, then it will seed</span><br><span class="line">the randomizer using the system clock. If -shuffle is set to an</span><br><span class="line">integer N, then N will be used as the seed value. In both cases,</span><br><span class="line">the seed will be reported for reproducibility.</span><br></pre></td></tr></table></figure><p><code>go test -shuffle=on</code>のように利用できます。<br><code>go test -shuffle=123</code>のように整数値を指定することで、ランダムな値の生成などにおけるseed値を指定する事ができます。</p><h3 id="テストをシャッフルすると何が嬉しいのか"><a href="#テストをシャッフルすると何が嬉しいのか" class="headerlink" title="テストをシャッフルすると何が嬉しいのか"></a>テストをシャッフルすると何が嬉しいのか</h3><p>テストの実行順番をランダムにする機能は、<code>Ruby On Rails</code>でのテストにおけるデファクトスタンダードである<code>rspec</code>など、他の言語、ライブラリでも実装されています。<br>順番をランダムにすることで、前に書いたテストの実行結果に依存する状態を検知し、回避できることが最大の目的です。</p><p>前に書いたテストの実行結果に依存する状態とは、下記のようなケースが該当します。</p><ul><li>前のテストケースでグローバル変数が宣言、変更された前提で次のテストケースが書かれている</li><li>前のテストケースでデータベースに保存された内容を次のテストケースで利用している</li></ul><p>これらの書き方は基本的にバッドプラクティスです。</p><p>何らかの事情でテストケースや実装に変更が加わった際に、一見無関係なテストが落ちて混乱を招くことになります。テストは各ケースの実行ごとにデータベースの内容を掃除するなど、クリーンな状態を保ちましょう。テストをランダム実行することで、上記のバッドプラクティスを早期に炙り出すことが可能になります。</p><p><a href="https://github.com/golang/go/issues/28592">当該機能を追加したissue</a>においても、グローバル変数の状態が変わる事で、テストの実行順序が実行結果に影響が出る例が記載されています。</p><blockquote><p>Those tests pass, everything looks fine, but they’re order dependent. Running them in another order will fail.<br>To prevent such hidden and hard to debug mistakes we need to make the order of test random for each test build.</p><p>これらのテストは合格し、すべてが正常に見えますが、順序によって異なります。それらを別の順序で実行すると失敗します。<br>このような隠れたデバッグの難しい間違いを防ぐために、テストビルドごとにテストの順序をランダムにする必要があります。</p></blockquote><p>Goに限った話ではないので、テストを書くときは気を付けていきたいですね。</p><h1 id="T-Setenv、B-Setenvについて"><a href="#T-Setenv、B-Setenvについて" class="headerlink" title="T.Setenv、B.Setenvについて"></a>T.Setenv、B.Setenvについて</h1><p>テストコード、並びにベンチマーク中に環境変数をセットする事ができるようになりました。<a href="https://pkg.go.dev/os#Setenv">osパッケージのSetenv</a>との違いは、テストが終了するとセットした内容が破棄され、環境変数が汚染されない事です。</p><p>元々の環境変数がセットされている場合は、きちんと元の値に戻ります、気軽に環境変数を変更できるようになりました。</p><p><code>t.Parallel</code>実行後に利用すると環境変数の寿命の扱いが破綻するため、エラーが発生する点だけ要注意です。</p><p>サンプルを探したところ、下記のように<a href="https://github.com/golang/go/blob/891547e2d4bc2a23973e2c9f972ce69b2b48478e/src/go/build/build_test.go#L556">Go本体のテスト</a>でも早速大活躍していました。</p><figure class="highlight go"><figcaption><span>test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestImportVendor</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">testenv.MustHaveGoBuild(t) <span class="comment">// really must just have source</span></span><br><span class="line"></span><br><span class="line">t.Setenv(<span class="string">&quot;GO111MODULE&quot;</span>, <span class="string">&quot;off&quot;</span>)</span><br><span class="line"></span><br><span class="line">ctxt := Default</span><br><span class="line">wd, err := os.Getwd()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">ctxt.GOPATH = filepath.Join(wd, <span class="string">&quot;testdata/withvendor&quot;</span>)</span><br><span class="line">p, err := ctxt.Import(<span class="string">&quot;c/d&quot;</span>, filepath.Join(ctxt.GOPATH, <span class="string">&quot;src/a/b&quot;</span>), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;cannot find vendored c/d from testdata src/a/b directory: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">want := <span class="string">&quot;a/vendor/c/d&quot;</span></span><br><span class="line"><span class="keyword">if</span> p.ImportPath != want &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;Import succeeded but found %q, want %q&quot;</span>, p.ImportPath, want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私たちのチームでは、今まではテスト実行時にはMakefileで環境変数を一通り整備してからテストを実行する運用をしていました。また、必要な環境変数が存在しない場合はエラーで落ちるロジックが保険として書かれているのですが、複雑度が低いためテストできていない事を許容していました。</p><p>これらの課題をGo1.17に上げ事で簡単に解決できる希望が見えてきました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Go1.17ではテストの実装を改善する為、2点の新機能が追加されている。</p><ul><li>新しいテストフラグ-shuffle</li><li>環境変数をモックするT.SetenvおよびB.Setenv</li></ul><p>見落とさず活用していきたいなと感じたので、連載のトピックとして取り上げてみました。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210812a/audit-3929140_640.jpg&quot; alt=&quot;&quot; title=&quot;mohamed HassanによるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;371&quot; loading=&quot;lazy&quot;&gt;

&lt;p</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="テスト" scheme="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="Go1.17" scheme="https://future-architect.github.io/tags/Go1-17/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night #14「生体認証・デバイス認証を活用するパスワードレスな認証規格「WebAuthn」を体験！」</title>
    <link href="https://future-architect.github.io/articles/20210811b/"/>
    <id>https://future-architect.github.io/articles/20210811b/</id>
    <published>2021-08-10T15:00:01.000Z</published>
    <updated>2021-08-28T04:19:59.187Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210811b/key-3348307_640.jpg" alt="" title="MasterTuxによるPixabayからの画像" width="640" height="360" loading=""><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの市川浩暉です。</p><p>2021年7月21日に<a href="https://future.connpass.com/event/218520/">Future Tech Night #14～認証認可（IDaaS）勉強会～</a> を開催し、「生体認証・デバイス認証を活用するパスワードレスな認証規格「WebAuthn」を体験！」というテーマで登壇させていただきました。</p><p>なお、登壇者の資料は <a href="https://future.connpass.com/event/218520/presentation/">こちら</a> に公開済みですので、興味があればご参照ください。</p><p>一緒にイベントに登壇した山田さんのレポートはも公開されています。</p><ul><li><a href="/articles/20210812b/">IDaaS(Auth0) vs OSS（Keycloak）vs Managed(Amazon Cognito)で使い勝手を確認</a></li></ul><p>参加申し込み数はこれまでのFuture Tech Night史上最多となる190名の申し込みをいただき、大盛況での開催となりました。</p><h1 id="発表内容"><a href="#発表内容" class="headerlink" title="発表内容"></a>発表内容</h1><script async class="speakerdeck-embed" data-id="29f23e7fea7f428c95401c17f52005f6" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>当日の発表では、以下のアジェンダに沿って発表を実施しました。</p><ul><li>自己紹介</li><li>WebAuthnの概要説明<ul><li>前置き</li><li>これまでの認証方式</li><li>FIDO（Fast IDentity Online）</li><li>登録、認証フロー</li><li>WebAuthnとは</li><li>2つの認証方式</li><li>WebAuthn対応ブラウザ</li><li>WebAuthnを利用するメリット・デメリット</li></ul></li><li>Auth0を用いたWebAuthnの構築</li><li>まとめ</li></ul><h1 id="発表の概要"><a href="#発表の概要" class="headerlink" title="発表の概要"></a>発表の概要</h1><p>まず、WebAuthnが生まれた背景を理解しやすいよう、認証方式の変遷を説明しました。</p><p>その中で、パスワード認証方式と2要素認証の課題を解決するために生まれたFIDOという考え方、そしてFIDOをWebでも使用できるようにしたFIDO2（WebAuthn, CTAP）が生まれ、WebAuthnの登録と認証のフローについて説明しました。</p><p>WebAuthnの概要を理解した後に、最近Auth0がリリースした機能を用いて実際に生体認証によるパスワードレス機能、そして実装してみた感想を発表しました。</p><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="Webサーバーに公開鍵はどのタイミングで登録されるのでしょうか？"><a href="#Webサーバーに公開鍵はどのタイミングで登録されるのでしょうか？" class="headerlink" title="Webサーバーに公開鍵はどのタイミングで登録されるのでしょうか？"></a>Webサーバーに公開鍵はどのタイミングで登録されるのでしょうか？</h2><p>登録されるタイミングはWebサーバ側で送られてきたチャレンジキーの検証に成功したタイミングです。<br>スライドの<a href="https://speakerdeck.com/hichikawa1126/future-tech-night-14?slide=21">P.21</a>にあるとおり、⑥にて生成した公開鍵を⑦でWebサーバ側に送信し、⑧での検証成功後に公開鍵とユーザの紐付けを行って登録します。</p><h2 id="実際の業務でWebAuthenを用いたAuth0での認証を使用した事例はありますか？-またもし利用するとしたらどのような事例でしょうか？"><a href="#実際の業務でWebAuthenを用いたAuth0での認証を使用した事例はありますか？-またもし利用するとしたらどのような事例でしょうか？" class="headerlink" title="実際の業務でWebAuthenを用いたAuth0での認証を使用した事例はありますか？　またもし利用するとしたらどのような事例でしょうか？"></a>実際の業務でWebAuthenを用いたAuth0での認証を使用した事例はありますか？　またもし利用するとしたらどのような事例でしょうか？</h2><p>フューチャーではAuth0をIDaaSとして採用し、実際に本番環境にて運用しているケースは多いのですが、今回ご紹介した機能はリリースされたばかりということもあり、実際のプロジェクトでの導入までは至っておりません。</p><p>IDaaSとしてAuth0を採用する場合、今回ご説明したWebAuthnを用いる機能は要件として含めることは可能と考えており、機会があれば前向きに考えていきたいと考えております。</p><h1 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h1><p>初めての勉強会登壇でしたが、アンケートでの回答やTwitterでのリアルタイム反応を見るのは新鮮で、自分にとって学びの多い勉強会になりました。反省点としては、少し時間がオーバしてしまい質疑応答ができなかったので、次回以降のイベントでは改善していければと思います。</p><p>フューチャーではFuture Tech Nightの他にも様々なイベントを開催しており、引き続き、参加者の皆さんと交流できる場としてもイベントを盛り上げていければと考えています。今後も皆様のご参加をお待ちしております。次回のイベント情報はフューチャーの<a href="https://future.connpass.com/">connpass</a>で確認できます。</p><p>最後に、発表をご視聴いただいた方、当記事を最後まで読んでいただいた方、ありがとうございました。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210811b/key-3348307_640.jpg&quot; alt=&quot;&quot; title=&quot;MasterTuxによるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;360&quot; loading=&quot;&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;</summary>
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
    <category term="WebAuthn" scheme="https://future-architect.github.io/tags/WebAuthn/"/>
    
  </entry>
  
  <entry>
    <title>Go1.17のencoding/csv</title>
    <link href="https://future-architect.github.io/articles/20210811a/"/>
    <id>https://future-architect.github.io/articles/20210811a/</id>
    <published>2021-08-10T15:00:00.000Z</published>
    <updated>2021-08-28T04:19:59.184Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210811a/csv.png" alt="" title="CSV" width="841" height="403" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20210810a/">Go1.17連載</a>の2つ目です。</p><p>TIG DXユニット真野です。前回Go1.16連載の時も2つ目で<a href="/articles/20210209/">Go 1.16のgo installについて</a>について触れました。今回は <code>encoding/csv</code> のマイナーチェンジ（APIが1個だけ追加した）という小ネタです。</p><h2 id="Minor-changes-to-the-library-in-encoding-csv"><a href="#Minor-changes-to-the-library-in-encoding-csv" class="headerlink" title="Minor changes to the library in encoding/csv"></a>Minor changes to the library in encoding/csv</h2><p><a href="https://tip.golang.org/doc/go1.17#encoding/binary">Go 1.17 Release Notes</a>でencoding/xml, encoding/binaryとともに、encoding/csvも微修正がありました。</p><blockquote><p>The new Reader.FieldPos method returns the line and column corresponding to the start of a given field in the record most recently returned by Read.<br>csv.ReaderにFieldPostメソッドが追加され、最後に読んだ列を返す</p></blockquote><p>これについて紹介します。選んだ理由は個人的にCSVとかJSONとかApache Parquetといったデータレイアウトが好きだからです。</p><p>Issueは<a href="https://github.com/golang/go/issues/44221">encoding/csv: add the ability to get the line number of a record #44221</a>です。2021.2.21に起票され同年5.21にクローズされているので3ヶ月くらいの期間での出来事でしょうか。</p><h2 id="どういう関数か"><a href="#どういう関数か" class="headerlink" title="どういう関数か"></a>どういう関数か</h2><p>追加されたのはcsv.Readerの以下の関数です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reader)</span> <span class="title">FieldPos</span><span class="params">(field <span class="keyword">int</span>)</span> <span class="params">(line, column <span class="keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure><p>csv.Readerは<code>Read</code>関数でCSVデータを1レコードずつ処理しますが（1行と呼ばない理由ですがCSVは項目中の改行が許容されているからです）、現在処理しているファイルの行や列を取得します。行と列は1始まり。列はルーンではなくバイト単位でカウントされるようです。</p><p>早速使っていきましょう。</p><figure class="highlight go"><figcaption><span>FieldPosをつかったサンプル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/csv&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">r := csv.NewReader(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">record, err := r.Read()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, item := <span class="keyword">range</span> record &#123;</span><br><span class="line">lineNo, column := r.FieldPos(i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;lineNo:%d column:%d pos:%d record:%s\n&quot;</span>, lineNo, i, column, item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FilePosを利用したコードでした。対象データとしてはGoDocに書いてあったCSVを利用します。</p><figure class="highlight plaintext"><figcaption><span>name.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_name,last_name,username</span><br><span class="line">&quot;Rob&quot;,&quot;Pike&quot;,rob</span><br><span class="line">Ken,Thompson,ken</span><br><span class="line">&quot;Robert&quot;,&quot;Griesemer&quot;,&quot;gri&quot;</span><br></pre></td></tr></table></figure><p>これを実行すると次の実行結果になりました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; go run main.go name.csv</span><br><span class="line">lineNo:1 column:0 pos:1 record:first_name</span><br><span class="line">lineNo:1 column:1 pos:12 record:last_name</span><br><span class="line">lineNo:1 column:2 pos:22 record:username</span><br><span class="line">lineNo:2 column:0 pos:1 record:Rob</span><br><span class="line">lineNo:2 column:1 pos:7 record:Pike</span><br><span class="line">lineNo:2 column:2 pos:14 record:rob</span><br><span class="line">lineNo:3 column:0 pos:1 record:Ken</span><br><span class="line">lineNo:3 column:1 pos:5 record:Thompson</span><br><span class="line">lineNo:3 column:2 pos:14 record:ken</span><br><span class="line">lineNo:4 column:0 pos:1 record:Robert</span><br><span class="line">lineNo:4 column:1 pos:10 record:Griesemer</span><br><span class="line">lineNo:4 column:2 pos:22 record:gri</span><br></pre></td></tr></table></figure><p>lineNoが対象ファイルの行番号です（1行目から4行目まで出ていますね）。次のcoulmnはカラムインデックス、posがCSV各カラムの出現位置です（[1 12 22]だと1文字目、12文字目、22文字目からそのカラムが始まっているよという意味です）。シンプルですね。言ってしまえばそれだけです。</p><h2 id="なぜ追加されたか"><a href="#なぜ追加されたか" class="headerlink" title="なぜ追加されたか"></a>なぜ追加されたか</h2><p>FieldPosというAPI経由しなくても少なくても、ループ変数を用いればファイル番号は取得できるような気がします。Goの思想的に反して余計なAPIを追加したのか？と思われる人も多いのではないでしょうか？</p><p>理由としてはおそらく、先程触れたとおりCSVファイルの項目中の改行が許容される（実質標準な<a href="http://www.kasai.fm/wiki/rfc4180jp">RFC4180</a>でも規定）のが理由の1つになると思います。</p><p>例えば、以下のようなCSVも許容されます。</p><figure class="highlight plaintext"><figcaption><span>lf.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;aaa&quot;,&quot;b</span><br><span class="line"></span><br><span class="line">bb&quot;,&quot;ccc&quot;</span><br><span class="line">zzz,yyy,xxx</span><br></pre></td></tr></table></figure><p>上記のlf.csvは4行ですが、CSVとしては2レコードです。項目中の改行もダブルクォートで囲めば許容されるということです。lf.csvのようなケースにおいては空行すら許容されます。</p><p>この仕様を理解すると行番号≠CSVレコード番号が分かると思います。どうようにカラム位置も項目中の改行を考慮すると、APIとして利用した方が使い側としては助かるというのがイメージが湧くでしょう。</p><p>このlf.csvを先程のサンプルコードで動かすと以下の結果です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">go run main.go lf.csv</span><br><span class="line">&gt; go run main.go lf.csv</span><br><span class="line">lineNo:1 column:0 pos:1 record:aaa</span><br><span class="line">lineNo:1 column:1 pos:7 record:b</span><br><span class="line"></span><br><span class="line">bb</span><br><span class="line">lineNo:3 column:2 pos:5 record:ccc</span><br><span class="line">lineNo:4 column:0 pos:1 record:zzz</span><br><span class="line">lineNo:4 column:1 pos:5 record:yyy</span><br><span class="line">lineNo:4 column:2 pos:9 record:xxx</span><br></pre></td></tr></table></figure><p>結果を見ると、CSV1レコード目のcccのカラムの行番号が3であるのがわかります。少し面白いですね。そしてFilePosの面白いところは、FieldPosの引数にカラムのインデックスを指定できるため、同一レコードの処理中に置いてlineNoが変わることが、すなわち項目中の改行が含まれている判明するという点です。</p><p>一見、ちょっと面倒そうな関数ですが中々考えられていますね。</p><p>今回は項目中の改行を例に上げましたが、他にも何かしらCSVの処理中に想定されていないデータが含まれていた場合（例えば予期せぬ区切り文字の混入やダブルクォートのエスケープがされていないなど）に、FieldPosによってトレースがしやすくなるのが大きいです（Issueのニュアンスだとこっちの方が強いかもです）。CSVのパースをしくじって数値項目なのに隣の文字列項目が設定されてエラーにった経験はみなさん何度も何度も経験してきたと思います。それが数百万、数千行のデータともなればトレースが大変。こういったデバック用のAPIが増えるのは本当に好ましいです。</p><p>encoding/csvパッケージを生で使う人は直接恩恵を受けられますし、これらのラッパーライブラリも性能改善などでメリットがある良い改修だと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>Go1.17ではencoding/CSVのReaderにFieldPosというCSV処理中の行番号やカラム開始位置を返す関数が追加された</li><li>項目中の改行の考慮であったり、違反データのトレーサビリティ（デバッグ）としても有効なAPIで、従来の回避手法に比べて性能が良いとのことです</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210811a/csv.png&quot; alt=&quot;&quot; title=&quot;CSV&quot; width=&quot;841&quot; height=&quot;403&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.17" scheme="https://future-architect.github.io/tags/Go1-17/"/>
    
  </entry>
  
</feed>
