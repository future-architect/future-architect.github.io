<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-06-24T03:34:17.463Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>春の入門祭り🌸 #18 Terraform 101</title>
    <link href="https://future-architect.github.io/articles/20200624/"/>
    <id>https://future-architect.github.io/articles/20200624/</id>
    <published>2020-06-24T02:44:35.000Z</published>
    <updated>2020-06-24T03:34:17.463Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200624/photo_20200624_01.png" class="img-middle-size"><p>こんにちは。TIG/DXユニットの伊藤です。本記事は<a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の第18弾になります。</p><p>今回はタイトルの通り、Terraformの入門記事です。Infrastructure as Code(IaC)のツールとしてはAWSからはCloudFormation、GCPからはDeployment Managerが出ています。Terraformは単一ツールで複数クラウドのリソースをコードで管理することができる、ということが大きなメリットであることは世に出ている他の記事でも言われています。</p><p>本記事では以前私がこの入門記事連載で上げた「<a href="https://future-architect.github.io/articles/20200602/">春の入門祭り 🌸 #02 Google Cloud Platform 101</a>」の内容を扱います。なので、今回はGCP+Terraformの組み合わせでリソースを実際にコード化するところが基本編、Terraform Cloudの導入をを応用編として書いていきます。長くなるかもですが、お付き合いください。</p><h1 id="Terraformについて"><a href="#Terraformについて" class="headerlink" title="Terraformについて"></a>Terraformについて</h1><p>はじめはTerraformの簡単な説明をしていきます。Terraformは、HashiCorp社が開発したInfrastructure as Code(IaC)のためのツールになります。<br>コード化していく中で以下の働きを理解しながら進めるとどんな風にTerraformが動いているかわかると思います。</p><ul><li>resource<ul><li>人が実際にリソースを作成する際に書くコード。作成後もコードを差分を適用することができる。</li></ul></li><li>tfstate<ul><li>実在するリソースの「あるべき状態」を定義しているファイル。コードの変更を適用するとtfstateもコードに即した状態になる。</li></ul></li><li>provider<ul><li>各クラウドのAPIをTerraformが実行するために必要なプラグイン。コードで定義して作成する時に必要。</li></ul></li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>Terraformを実行できる準備をしましょう。今回の記事の作成に当たっての実行環境は以下です。</p><ul><li>MacBook 16inch(2019)</li><li>OS: Catalina</li><li>Terraform version: 0.12.24</li><li>Editor: VS Code</li></ul><p>Terraformのインストールは、Macの方であれば、Homebrew経由でできます。なので、以下のコマンドで簡単に手に入ります。便利。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install terraform</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> terraform version <span class="comment"># Terraformのバージョン確認</span></span></span><br></pre></td></tr></table></figure><p>次にサービスアカウントと、キーを発行します。サービスアカウントキーは昨今<a href="https://note.com/munmun1234/n/n7515fef76041" target="_blank" rel="noopener">こんな記事</a>も出ていますので、気をつけましょう。<br>サービスアカウントの作成は、GCPのコンソール画面のハンバーガーメニューより、[IAMと管理]&gt;[サービスアカウント]からできます。何回か入力と次に進むを繰り返しますが、以下のように入力してください。</p><table><thead><tr><th>項目</th><th>内容</th></tr></thead><tbody><tr><td>サービスアカウント名</td><td>terraform</td></tr><tr><td>ロール</td><td>編集者(editor)</td></tr><tr><td>サービスアカウント管理ロール</td><td>自分の登録メールアドレス</td></tr></tbody></table><p>作成できたらこのサービスアカウントの詳細に行き、[鍵の追加]を行ってください。jsonかP12かを選択できますが、今回はjsonを選択します。自動でダウンロードされるので、今回はこのキー名を<code>credentials.json</code>と名前を変更して今回使用するTerraformのディレクトリに配置しておきましょう。<br>コード側でも一つ準備しておきます。<code>provider</code>と呼ばれる各クラウドのAPIをTerraformが叩くためのバイナリを指定します。以下のコードをTerraformを実行するディレクトリに準備してください。</p><figure class="highlight sh"><figcaption><span>provider.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">"google"</span> &#123;</span><br><span class="line">  project = <span class="string">"xxxxxxxxxx"</span> <span class="comment"># リソースを作成したいプロジェクトID</span></span><br><span class="line">  credentials = file(<span class="string">"credentials.json"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コードとサービスアカウントキーが準備できたら、以下のコマンドで、Terraformの準備をします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform init</span></span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Checking for available provider plugins...</span><br><span class="line">- Downloading plugin for provider "google" (hashicorp/google) 3.26.0...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">If you ever set or change modules or backend configuration for Terraform,</span><br><span class="line">rerun this command to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to do so if necessary.</span><br></pre></td></tr></table></figure><p>この<code>init</code>コマンドを実行することで<code>.terraform</code>ディレクトリが生成されています。このディレクトリ内に、定義されている<code>provider</code>やあとで出てくる<code>backend</code>など、Terraformのリソースではなく設定に関わる部分を初期化してくれます。なので、複数人でGit管理している時にも通常は<code>.terraform</code>ディレクトリは管理に入れないようにしましょう。<br>さて、これでリソースを作成する準備ができたので、いよいよTerraformを書いていきましょう！！</p><h1 id="基本編"><a href="#基本編" class="headerlink" title="基本編"></a>基本編</h1><p>入門記事からの再掲になりますが、以下の構成を基本編で行っていきます。手で組んでみてからの方が実際にTerraformが便利ということに気がつけるかもしれません。<br><img src="/images/20200624/photo_20200624_02.png"><br>まずは大枠のVPCやサブネットを作成してからGCEやNATなどを立てていきましょう。</p><h2 id="ネットワーク構築"><a href="#ネットワーク構築" class="headerlink" title="ネットワーク構築"></a>ネットワーク構築</h2><p>はじめにネットワークを構築しましょう。ここでは<a href="https://www.terraform.io/docs/providers/google/r/compute_network.html" target="_blank" rel="noopener">VPC</a>と<a href="https://www.terraform.io/docs/providers/google/r/compute_subnetwork.html" target="_blank" rel="noopener">サブネット</a>を構築します。Terraformはコード化する時にはドキュメント必須なので、是非公式のドキュメントも読んでみてください。ネットワークについては、以下のコードにしました。<code>auto_create_subnetworks = false</code>としているのは不必要なサブネット作成を抑えるためです。</p><figure class="highlight sh"><figcaption><span>compute_network.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_network"</span> <span class="string">"sample_network"</span> &#123;</span><br><span class="line">  name = <span class="string">"sample-network"</span></span><br><span class="line">  auto_create_subnetworks = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでVPC部分のコードを適用してみましょう。ここでは以下のコマンドを使ってみましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform fmt <span class="comment"># コードの整形をしてくれる</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> terraform validate <span class="comment"># コードのシンタックスや必要なリソースの確認</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> terraform plan <span class="comment"># コードのドライランを行う</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> terraform apply <span class="comment"># コードを適用してリソースを作成する</span></span></span><br></pre></td></tr></table></figure><p>これらコマンドを是非使ってみてください。上で示した<code>network.tf</code>はコードの形が崩れていますが、<code>fmt</code>コマンドで整形されることがわかるかと思います。<code>apply</code>コマンドを実行すると以下が出力され、<code>yes</code>の入力を求められます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">  #</span><span class="bash"> google_compute_network.sample_network will be created</span></span><br><span class="line">  + resource "google_compute_network" "sample_network" &#123;</span><br><span class="line">      + auto_create_subnetworks         = false</span><br><span class="line">      + delete_default_routes_on_create = false</span><br><span class="line">      + gateway_ipv4                    = (known after apply)</span><br><span class="line">      + id                              = (known after apply)</span><br><span class="line">      + ipv4_range                      = (known after apply)</span><br><span class="line">      + name                            = "sample-network"</span><br><span class="line">      + project                         = (known after apply)</span><br><span class="line">      + routing_mode                    = (known after apply)</span><br><span class="line">      + self_link                       = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><p>もしかしたらApplyが「APIを有効化していないのでできない」と出る方もいるかと思いますが、その時はGUIで該当のAPIを有効化してください。<a href="https://cloud.google.com/endpoints/docs/frameworks/enable-api" target="_blank" rel="noopener">APIの有効化はこちら</a>を参照してくださいApplyが完了したらGUIで確認してみてください。ここではネットワークだけできていると思います。<br>次にサブネットを作成しましょう。</p><figure class="highlight sh"><figcaption><span>compute_subnetwork.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_subnetwork"</span> <span class="string">"pub_subnetwork"</span> &#123;</span><br><span class="line">  name          = <span class="string">"sample-subnet-pub"</span></span><br><span class="line">  ip_cidr_range = <span class="string">"192.168.1.0/24"</span></span><br><span class="line">  region        = <span class="string">"asia-northeast1"</span></span><br><span class="line">  network       = <span class="string">"sample-network"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_subnetwork"</span> <span class="string">"prv_subnetwork"</span> &#123;</span><br><span class="line">  <span class="comment"># 実際に書いてみましょう</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここでは<code>sample-network</code>に作ることを指定して書いています。オプションとして他にも様々書けるので、必要に応じて追記することができます。また、今回はサブネットを2つ作成しますが、1つは作成ぜひ実際に書いてみてください。答えは<a href="https://github.com/kaedemalu/terraform_101_handon/blob/master/compute_subnetwork.tf" target="_blank" rel="noopener">こちら</a>にあります。コードの準備が終わったらApplyコマンドを叩いてリソースを作成してください。</p><h2 id="ファイアウォールの作成"><a href="#ファイアウォールの作成" class="headerlink" title="ファイアウォールの作成"></a>ファイアウォールの作成</h2><p>次にインスタンスを不正なアクセスから保護するためのファイアウォールを作成します。インスタンスなどの作成よりもこういったルール周りの方がTerraformが役立つ場面でもあります。GCPの入門記事では2つ作成したので、今回も2つ作成できるようにします。コードは以下になります。</p><figure class="highlight sh"><figcaption><span>compute_firewall.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_firewall"</span> <span class="string">"bastion"</span> &#123;</span><br><span class="line">  name    = <span class="string">"bastion"</span></span><br><span class="line">  network = <span class="string">"sample-network"</span></span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">"tcp"</span></span><br><span class="line">    ports    = [<span class="string">"22"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  source_ranges = [<span class="string">"0.0.0.0/0"</span>]</span><br><span class="line">  target_tags = [<span class="string">"bastion"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_firewall"</span> <span class="string">"from_bastion"</span> &#123;</span><br><span class="line">  name    = <span class="string">"from-bastion"</span></span><br><span class="line">  network = <span class="string">"sample-network"</span></span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">"tcp"</span></span><br><span class="line">    ports    = [<span class="string">"22"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  source_tags = [<span class="string">"bastion"</span>]</span><br><span class="line">  target_tags = [<span class="string">"from-bastion"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_firewall"</span> <span class="string">"sample_network_allow_http"</span> &#123;</span><br><span class="line">  name    = <span class="string">"sample-network-allow-http"</span></span><br><span class="line">  network = <span class="string">"sample-network"</span></span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">"tcp"</span></span><br><span class="line">    ports    = [<span class="string">"80"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  source_ranges = [<span class="string">"0.0.0.0/0"</span>]</span><br><span class="line">  target_tags = [<span class="string">"http-server"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sshできるようにするファイアウォールルールは上の2つ、下の<code>sample-network-allow-http</code>は、GUIであれば自動生成されますが、Terraformだとできないので、今回はコード化してApplyします。</p><h2 id="インスタンスの作成"><a href="#インスタンスの作成" class="headerlink" title="インスタンスの作成"></a>インスタンスの作成</h2><p>はじめに踏み台インスタンスから作成していきます。踏み台は、外部IPがついている必要があるので、以下の形で書きます。</p><figure class="highlight sh"><figcaption><span>compute_instance.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"bastion"</span> &#123;</span><br><span class="line">  name         = <span class="string">"bastion"</span></span><br><span class="line">  machine_type = <span class="string">"n1-standard-1"</span></span><br><span class="line">  zone         = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  tags = [<span class="string">"bastion"</span>]</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    initialize_params &#123;</span><br><span class="line">      image = <span class="string">"debian-cloud/debian-10"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    subnetwork = <span class="string">"sample-subnet-pub"</span></span><br><span class="line"></span><br><span class="line">    access_config &#123;</span><br><span class="line">      nat_ip = google_compute_address.bastion_external.address</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  service_account &#123;</span><br><span class="line">    scopes = [<span class="string">"cloud-platform"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_address"</span> <span class="string">"bastion_external"</span> &#123;</span><br><span class="line">  name         = <span class="string">"bastion-external"</span></span><br><span class="line">  address_type = <span class="string">"EXTERNAL"</span></span><br><span class="line">  region       = <span class="string">"asia-northeast1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上のコードでは、インスタンス作成を行う<code>google_compute_instance</code>と、外部IPコードで決めて設定している<code>google_compute_address</code>を記載しています。webインスタンスについては実際に書いてみましょう。外部IPは必要ないので、<code>google_compute_instance</code>だけあれば作成することができます。答えの例は<a href="https://github.com/kaedemalu/terraform_101_handon/blob/master/compute_instance.tf" target="_blank" rel="noopener">こちら</a>になります。</p><h3 id="リソースに依存関係をつける"><a href="#リソースに依存関係をつける" class="headerlink" title="リソースに依存関係をつける"></a>リソースに依存関係をつける</h3><p>今回、GCEの作成にあたり、<code>access_config</code>ブロックの中に<code>nat_ip = google_compute_address.bastion_external.address</code>という書き方をしました。この書き方には主に2つ目的があり、</p><ul><li>他で作成したリソース値を利用する書き方<ul><li>今回は該当するリソースのアドレスを引用する書き方になっている</li></ul></li><li>リソースの依存関係をつけてくれる<ul><li>今回は<code>google_compute_address.bastion_external</code>が作成されないとインスタンスが作成されない</li></ul></li></ul><p>そのため、これまで出てきたリソースだと、VPC→サブネットorファイアウォールの作成順序が好ましいので、サブネットを例にすると、</p><figure class="highlight sh"><figcaption><span>compute_subnetwork.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_subnetwork"</span> <span class="string">"pub_subnetwork"</span> &#123;</span><br><span class="line">  name          = <span class="string">"sample-subnet-pub"</span></span><br><span class="line">  ip_cidr_range = <span class="string">"192.168.1.0/24"</span></span><br><span class="line">  region        = <span class="string">"asia-northeast1"</span></span><br><span class="line">  network       = google_compute_network.sample_network.id <span class="comment"># ここを書き換え</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_subnetwork"</span> <span class="string">"prv_subnetwork"</span> &#123;</span><br><span class="line">  <span class="comment"># 実際に書いてみましょう</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>と書くことができます。他にも修正できる部分があるので直してみましょう。<br>webインスタンスについては実際に書いてみましょう。外部IPは必要ないので、<code>google_compute_instance</code>だけあれば作成することができます。答えの例は<a href="https://github.com/kaedemalu/terraform_101_handon/blob/master/compute_instance.tf" target="_blank" rel="noopener">こちら</a>になります。</p><h2 id="ロードバランサの作成"><a href="#ロードバランサの作成" class="headerlink" title="ロードバランサの作成"></a>ロードバランサの作成</h2><p>ユーザーからのリクエストを受けるロードバランサを作成しましょう。GUIでも設定が細かいロードバランサですが、Terraformにしておくとコードで設定が見えるので、あとで見返すのにもおすすめな部分です。</p><figure class="highlight sh"><figcaption><span>http_lb.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_global_address"</span> <span class="string">"web_lb"</span> &#123;</span><br><span class="line">  name = <span class="string">"web-lb"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_health_check"</span> <span class="string">"web_health"</span> &#123;</span><br><span class="line">  name = <span class="string">"web-health"</span></span><br><span class="line">  timeout_sec        = 1</span><br><span class="line">  check_interval_sec = 1</span><br><span class="line">  tcp_health_check &#123;</span><br><span class="line">    port = <span class="string">"80"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_backend_service"</span> <span class="string">"web_backend"</span> &#123;</span><br><span class="line">  name        = <span class="string">"web-backend"</span></span><br><span class="line">  port_name   = <span class="string">"http"</span></span><br><span class="line">  protocol    = <span class="string">"HTTP"</span></span><br><span class="line">  timeout_sec = 3000</span><br><span class="line"></span><br><span class="line">  backend &#123;</span><br><span class="line">    group = google_compute_instance_group.web_instance_group.self_link</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  health_checks = [google_compute_health_check.web_health.self_link]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_url_map"</span> <span class="string">"web_lb"</span> &#123;</span><br><span class="line">  name        = <span class="string">"web-lb"</span></span><br><span class="line">  default_service = google_compute_backend_service.web_backend.self_link</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_target_http_proxy"</span> <span class="string">"http_proxy"</span> &#123;</span><br><span class="line">  name             = <span class="string">"http-proxy"</span></span><br><span class="line">  url_map          = google_compute_url_map.web_lb.self_link</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_global_forwarding_rule"</span> <span class="string">"forwarding_rule"</span> &#123;</span><br><span class="line">  name       = <span class="string">"forwarding-rule"</span></span><br><span class="line">  target     = google_compute_target_http_proxy.http_proxy.self_link</span><br><span class="line">  port_range = <span class="string">"80"</span></span><br><span class="line">  ip_address = google_compute_global_address.web_lb.address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_instance_group"</span> <span class="string">"web_instance_group"</span> &#123;</span><br><span class="line">  name        = <span class="string">"web-instance-group"</span></span><br><span class="line"></span><br><span class="line">  instances = [google_compute_instance.web_instance.self_link]</span><br><span class="line"></span><br><span class="line">  zone = <span class="string">"asia-northeast3-a"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ロードバランサを1つ作るために様々なリソースを作成しなければいけませんが、上のコードではLBを作る部分、最後にはインスタンスグループを作るリソースを書いています。</p><h2 id="Cloud-NAT-Routerの作成"><a href="#Cloud-NAT-Routerの作成" class="headerlink" title="Cloud NAT, Routerの作成"></a>Cloud NAT, Routerの作成</h2><p>WebサーバーのパッケージをアップデートさせるためにはNATから外に出られるようにする必要があります。ここではCloud NATとCloud Routerを作成します。またまた、コードは以下です。</p><figure class="highlight sh"><figcaption><span>compute_router.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_router"</span> <span class="string">"seoul_router"</span> &#123;</span><br><span class="line">  name    = <span class="string">"seoul-router"</span></span><br><span class="line">  region  = <span class="string">"asia-northeast3"</span></span><br><span class="line">  network = google_compute_network.sample_network.id</span><br><span class="line"></span><br><span class="line">  bgp &#123;</span><br><span class="line">    asn = 64514</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>compute_router_nat.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_router_nat"</span> <span class="string">"seoul_nat"</span> &#123;</span><br><span class="line">  name                               = <span class="string">"seoul-nat"</span></span><br><span class="line">  router                             = google_compute_router.seoul_router.name</span><br><span class="line">  region                             = google_compute_router.seoul_router.region</span><br><span class="line">  nat_ip_allocate_option             = <span class="string">"AUTO_ONLY"</span></span><br><span class="line">  source_subnetwork_ip_ranges_to_nat = <span class="string">"ALL_SUBNETWORKS_ALL_IP_RANGES"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここまで設定できたら、<a href="https://future-architect.github.io/articles/20200602/">春の入門祭り 🌸 #02 Google Cloud Platform 101</a>の「6.ミドルウェアの設定」を行って、nginxの画面がブラウザから見ることができれば基本編の完了です！</p><h1 id="応用編"><a href="#応用編" class="headerlink" title="応用編"></a>応用編</h1><p>応用編としてTeraform Cloudの導入を行ってみましょう。Terraform Cloudが導入できると、TerraformのCI/CDができるようになるので、グッと開発スピードが上がります！</p><h2 id="Terraform-Cloudについて"><a href="#Terraform-Cloudについて" class="headerlink" title="Terraform Cloudについて"></a>Terraform Cloudについて</h2><p>Terraform CloudはHashiCorp社が提供するTerraformのCI/CD基盤になります。プランは様々あり、有料版にあげることでPolicy as Code(PaC)を実現できる<a href="https://www.terraform.io/docs/cloud/sentinel/index.html" target="_blank" rel="noopener">Sentinel</a>を導入できたりと、インフラのデプロイ速度をあげる以外にも、Terraformの実行環境の統一や実行ログ、インフラの状態など秩序を守るためにも非常に大きなメリットをもたらします。</p><h2 id="変数の設定"><a href="#変数の設定" class="headerlink" title="変数の設定"></a>変数の設定</h2><p>Terraform Cloudに本格的に移行する前に、変数の切り出しを行いましょう。特に今回は、サービスアカウントキーなどケアが必要な部分を<code>secret.tfvars</code>に切り出します。</p><figure class="highlight sh"><figcaption><span>variable.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">variable <span class="string">"PROJECT_ID"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"PROJECT_NAME"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"GOOGLE_CREDENTIALS"</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>secret.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PROJECT_ID         = <span class="string">"xxxxxxxx"</span> <span class="comment"># プロジェクトIDを入れる</span></span><br><span class="line">PROJECT_NAME       = <span class="string">"xxxxxxxx"</span> <span class="comment"># プロジェクト名を入れる</span></span><br><span class="line">GOOGLE_CREDENTIALS = <span class="string">"credentials.json"</span></span><br></pre></td></tr></table></figure><p>切り出した上を元にさらに<code>provider.tf</code>も書き換えましょう。</p><figure class="highlight sh"><figcaption><span>provider.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">"google"</span> &#123;</span><br><span class="line">  project     = var.PROJECT_ID</span><br><span class="line">  credentials = var.GOOGLE_CREDENTIALS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Terraform-Cloudの設定"><a href="#Terraform-Cloudの設定" class="headerlink" title="Terraform Cloudの設定"></a>Terraform Cloudの設定</h2><p>Terraform Cloudへの登録自体は<a href="">こちら</a>から行うことができるので、手順に沿って登録しましょう。</p><h3 id="Workspaceの作成"><a href="#Workspaceの作成" class="headerlink" title="Workspaceの作成"></a>Workspaceの作成</h3><p>登録が完了したら、Terraform Cloudにリポジトリの登録を行いましょう。サインアップ終わったあとはきっとこんな感じでできたてホヤホヤだと思います。</p><img src="/images/20200624/tf_cloud1.png" style="border:solid 1px #000000"><p>右にある[New workspace]から新しいWorkspaceを作成しましょう。<br>はじめにGitリポジトリを指定します。今回はGithubを使用するのでGithubを選択して次に進みます。<br><img src="/images/20200624/tf_cloud2.png" style="border:solid 1px #000000"></p><p>[Choose a repository]の項目では今回使うリポジトリを選択します。選択が終わると[Configure settings]に進むので、Workspaceの名前を変えられます。ここではとくに問題がないので、そのまま(リポジトリの名前のまま)で進みます。</p><h3 id="変数の設定-1"><a href="#変数の設定-1" class="headerlink" title="変数の設定"></a>変数の設定</h3><p>Workspaceの作成が完了すると、そのまま変数の設定に進むことができます。なので[Configure variables]に進みましょう。設定するのは「Terraform Variables」の方になります。今回は以下のように<code>PROJECT_ID</code>、<code>PROJECT_NAME</code>、<code>GOOGLE_CREDENTIALS</code>の3つを設定しました。<code>GOOGLE_CREDENTIALS</code>については鍵なので、sensitiveにチェックを入れると見えなくなります。</p><img src="/images/20200624/photo_20200624_03.png" style="border:solid 1px #000000"><p>これで一通りの設定ができたので実際にQueueを走らせてみましょう。</p><h2 id="Queueの実行"><a href="#Queueの実行" class="headerlink" title="Queueの実行"></a>Queueの実行</h2><p>画面の右上に[Queue plan]の項目があるので実行してみましょう。入力項目が現れますが、特に何も入れずに実行できます。実行してみると以下の様にPlanの結果が返ってきます。<br><img src="/images/20200624/tf_cloud3.png" style="border:solid 1px #000000"></p><p><code>11 to add</code>になっていますが、これはローカルのStateファイルをみていないために起こります。この後で、Stateの移行を行います。</p><h2 id="Tokenを取得する"><a href="#Tokenを取得する" class="headerlink" title="Tokenを取得する"></a>Tokenを取得する</h2><p>Terraform Cloud上のStateを見れるように前の作業として、ローカルから認証できる必要があります。そのために必要なTokenを取得するために以下の2パターンで取得します.</p><h3 id="コマンドを使う"><a href="#コマンドを使う" class="headerlink" title="コマンドを使う"></a>コマンドを使う</h3><p>コマンドを使ってTokenを取得できます。しかし、バージョンが<strong>v0.12.21</strong>以降でしか使えないので、これより前のバージョンを使用している方はGUIを使ったパターンで取得してください。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform login</span></span><br><span class="line">Terraform will request an API token for app.terraform.io using your browser.</span><br><span class="line"></span><br><span class="line">If login is successful, Terraform will store the token in plain text in</span><br><span class="line">the following file for use by subsequent commands:</span><br><span class="line">    /Users/itota/.terraform.d/credentials.tfrc.json</span><br><span class="line"></span><br><span class="line">Do you want to proceed? (y/n) y # ここでyを入力する</span><br><span class="line">Terraform must now open a web browser to the tokens page for app.terraform.io.</span><br><span class="line"></span><br><span class="line">If a browser does not open this automatically, open the following URL to proceed:</span><br><span class="line">    https://app.terraform.io/app/settings/tokens?source=terraform-login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Generate a token using your browser, and copy-paste it into this prompt.</span><br><span class="line"></span><br><span class="line">Terraform will store the token in plain text in the following file</span><br><span class="line">for use by subsequent commands:</span><br><span class="line">    /Users/itota/.terraform.d/credentials.tfrc.json</span><br><span class="line"></span><br><span class="line">Token for app.terraform.io: # ブラウザで表示されるTokenを入力する</span><br><span class="line"></span><br><span class="line">Retrieved token for user xxxxxxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Success! Terraform has obtained and saved an API token.</span><br><span class="line"></span><br><span class="line">The new API token will be used for any future Terraform command that must make</span><br><span class="line">authenticated requests to app.terraform.io.</span><br></pre></td></tr></table></figure><p>このように出力されるので、2箇所入力が済めばこちらのコマンドは完了となるので次に進みましょう。</p><h3 id="GUIから取得する"><a href="#GUIから取得する" class="headerlink" title="GUIから取得する"></a>GUIから取得する</h3><p>こちらではGUIからTokenwo取得する方法を説明します。以下の画像について順を追って説明します。<br><img src="/images/20200624/photo_20200624_04.png" style="border:solid 1px #000000"></p><ul><li>① [Ortanization Setting]に遷移する</li><li>② [API Token]をクリック</li><li>③ [Create an authentication token]をクリックする<ul><li>Token名を入力するとTokenが払い出される。</li></ul></li></ul><p>あとは以下のファイルを作成すればTokenの取得作業は完了です。</p><figure class="highlight sh"><figcaption><span>~/.terraformrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">credentials <span class="string">"app.terraform.io"</span> &#123;</span><br><span class="line">  token = <span class="string">"xxxxxxxxxxxxx"</span> <span class="comment"># Tokenを入力</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="backendの設定を有効化する"><a href="#backendの設定を有効化する" class="headerlink" title="backendの設定を有効化する"></a>backendの設定を有効化する</h2><p><code>backend.tf</code>を以下に書き換えて、stateを見に行く場所をGCSからTerraform Cloudに変えます。</p><figure class="highlight sh"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">"remote"</span> &#123;</span><br><span class="line">    hostname = <span class="string">"app.terraform.io"</span></span><br><span class="line">    organization = <span class="string">"kaedemalu"</span> <span class="comment"># 現在のOrganizantion Name</span></span><br><span class="line"> </span><br><span class="line">    workspaces &#123;</span><br><span class="line">      name = <span class="string">"terraform_101"</span> <span class="comment"># 使っているWorkspaceの名前</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで再び<code>terraform init</code>コマンドを実行しましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform init</span></span><br><span class="line">Initializing the backend...</span><br><span class="line">Acquiring state lock. This may take a few moments...</span><br><span class="line">Do you want to copy existing state to the new backend?</span><br><span class="line">  Pre-existing state was found while migrating the previous "local" backend to the</span><br><span class="line">  newly configured "remote" backend. No existing state was found in the newly</span><br><span class="line">  configured "remote" backend. Do you want to copy this state to the new "remote"</span><br><span class="line">  backend? Enter "yes" to copy and "no" to start with an empty state.</span><br><span class="line"></span><br><span class="line">  Enter a value: yes # ここでyesと入力する</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Successfully configured the backend "remote"! Terraform will automatically</span><br><span class="line">use this backend unless the backend configuration changes.</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line"></span><br><span class="line">The following providers do not have any version constraints in configuration,</span><br><span class="line">so the latest version was installed.</span><br><span class="line"></span><br><span class="line">To prevent automatic upgrades to new major versions that may contain breaking</span><br><span class="line">changes, it is recommended to add version = "..." constraints to the</span><br><span class="line">corresponding provider blocks in configuration, with the constraint strings</span><br><span class="line">suggested below.</span><br><span class="line"></span><br><span class="line">* provider.google: version = "~&gt; 3.26"</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">You may now begin working with Terraform. Try running "terraform plan" to see</span><br><span class="line">any changes that are required for your infrastructure. All Terraform commands</span><br><span class="line">should now work.</span><br><span class="line"></span><br><span class="line">If you ever set or change modules or backend configuration for Terraform,</span><br><span class="line">rerun this command to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to do so if necessary.</span><br></pre></td></tr></table></figure><p>これでローカルからTerraform Cloudにstateがコピーされたので、Queue Runの情報を確認してみましょう。Planの自動実行結果は以下になります。<br><img src="/images/20200624/tf_cloud4.png"  style="border:solid 1px #000000"></p><p>ローカルで全てApplyが済んでいるので差分がない状態になります！ちなみにこの状態になってからローカルでapplyコマンドを実行すると、</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform apply</span></span><br><span class="line"></span><br><span class="line">Error: Apply not allowed for workspaces with a VCS connection</span><br><span class="line"></span><br><span class="line">A workspace that is connected to a VCS requires the VCS-driven workflow to</span><br><span class="line">ensure that the VCS remains the single source of truth.</span><br></pre></td></tr></table></figure><p>と返されて実行できなくなっています。これでTerraform CloudからのみコードのApplyができるようになっているので、実行環境の統制ができるようになります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はTerraform 101ということでTerraformをつかってリソース構築を行いました。今回は取り扱いませんでしたが、コードの管理を環境ごと変えずに利用できるWorkspaceやTemplateとして使えるModuleなどもあります（参考記事は<a href="https://future-architect.github.io/articles/20190903/">こちら</a>。また、今回扱ったTerraformのバージョンは0.12ですが、<a href="https://future-architect.github.io/articles/20190816/">環境構築編</a>や<a href="https://future-architect.github.io/articles/20190819/">実践編</a>もありますのでそちらもぜひ読んでみてください。<br>Terraformを使うことで俗にいう手順書を無くして、インフラをコードで管理することで冪等性を保つことができます。うっかり手順を飛ばして、どこでミスを起こしたか調べることにもかなりの労力と時間を使うと思うので、是非Terraformを日々の(インフラの)お供に取り入れてみてはいかがでしょうか？</p><p>今回使用しているコードは以下のGithubに上がっているので、ぜひ参照してください。<br><a href="https://github.com/kaedemalu/terraform_101_handon" target="_blank" rel="noopener">https://github.com/kaedemalu/terraform_101_handon</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200624/photo_20200624_01.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;こんにちは。TIG/DXユニットの伊藤です。本記事は&lt;a href=&quot;https://future-architect.g
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Ansible" scheme="https://future-architect.github.io/tags/Ansible/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #17 Elasticsearch入門</title>
    <link href="https://future-architect.github.io/articles/20200623/"/>
    <id>https://future-architect.github.io/articles/20200623/</id>
    <published>2020-06-23T01:14:50.000Z</published>
    <updated>2020-06-23T06:04:51.591Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200623/top.png"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGメディアユニットの町田です。2020年4月にフューチャーに転職してきました。<br>当社を選んだきっかけの一つとしてこのTechブログの存在があったので、このように投稿できることをうれしく思います！</p><p>本日の<a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>🌸 #17は、全文検索エンジンとして高い人気を誇る「Elasticsearch」についての入門記事です。</p><img src="/images/20200623/photo_20200623_01.png" class="img-middle-size"><p>Elasticsearchとは何か、どういうメリットがあるのかということから、ローカル環境へのインストールと簡単な活用事例を見ていきたいと思います。</p><p>※本記事の環境はWindows 10 Pro 64ビットとなります。</p><h2 id="Elasticsearchとは何か"><a href="#Elasticsearchとは何か" class="headerlink" title="Elasticsearchとは何か"></a>Elasticsearchとは何か</h2><p>Elasticsearchは「全文検索システム」を提供するソフトウェアです。</p><p>全文検索とは検索手法の一つで、文字列をキーにして複数の文書データをまたがって検索し、目的のデータを探し出す機能のことを指します。ECサイトやコンテンツマネジメントシステムなどで利用されているいわゆる検索エンジンと呼ばれるものは、裏の仕組みとして全文検索システムが動いているものが多いようです。元々はShay Banon氏（現Elastic社CEO）が妻の料理レシピの情報を検索するためのアプリケーションとして開発されたのがElasticsearchの起源だそうです。</p><p>それが今では世界中で利用される検索エンジンとなっている訳ですから、ソフトウェア開発の可能性は無限大ですね！</p><h2 id="どうやって入手するか"><a href="#どうやって入手するか" class="headerlink" title="どうやって入手するか"></a>どうやって入手するか</h2><p>ElasticsearchはElastic社からオープンソースで公開されており、誰でもインストールして無料で利用することが可能です。</p><p>また、Amazon Web Service(AWS)上においても「Amazon Elasticsearch Service」としてマネージドサービス(※)として提供されています。<br>※インフラ設定やバージョン管理などは不要になりますが、利用データ量などによって料金がかかります。</p><p>本記事ではオープンソースのソフトウェアをローカルPCにインストールしていきます。</p><h2 id="Elasticsearchのどういうところが便利か"><a href="#Elasticsearchのどういうところが便利か" class="headerlink" title="Elasticsearchのどういうところが便利か"></a>Elasticsearchのどういうところが便利か</h2><p>Elasticsearchのメリットとして、以下が挙げられます。</p><ul><li>索引型検索を採用しているため、大量データに対して高速検索が可能</li><li>標準で分散配置型の構成をとり、高速化と高可用性を実現</li><li>JSONフォーマットで非定型データを投入可能</li><li>REST APIによるシンプルなアクセスが可能</li><li>関連ツールを利用して分析・可視化</li></ul><p>当社の実績においても、大量の顧客データ検索し数秒で結果を返す要件のプロダクトにて実際に採用されています。</p><p>前置きが長くなりましたが、実際にインストールをして試していきましょう！</p><h1 id="Elasticsearchのインストール"><a href="#Elasticsearchのインストール" class="headerlink" title="Elasticsearchのインストール"></a>Elasticsearchのインストール</h1><p><a href="https://www.elastic.co/jp/downloads/elasticsearch" target="_blank" rel="noopener">公式ページ</a>からzipファイルをダウンロードします。（執筆時のバージョンは7.7.1です）<br><img src="/images/20200623/photo_20200623_02.jpeg"></p><p>ダウンロードしたzipを解凍すると以下のような構成になっています。<br><img src="/images/20200623/photo_20200623_03.jpeg" class="img-middle-size"></p><p>ここで <code>bin/elasticsearch.bat</code> を実行するとコマンドプロンプトが立ち上がり、Elasticsearchが起動状態になります。</p><p>動作確認として、別のコマンドプロンプトを立ち上げ <code>curl http://localhost:9200/</code> と叩いてみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl http://localhost:9200/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行結果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"XXXXXXXX"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"XXXXXXXXXXXXXXXXXXXXXX"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.7.1"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"zip"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"xxxxxxxxxxxxxxxxxxxxxxx"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2020-05-28T16:30:01.040088Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.5.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようにレスポンスがあれば準備OKです。簡単ですね！！</p><p>停止する場合は、起動時に現れたコマンドプロンプトで <code>Ctrl+c</code> で停止してください。</p><p>ちなみに、ポートはデフォルトで <code>9200</code> となっています。<br>もし変更したい場合は <code>config/elasticsearch.yml</code> の <code>#http.port: 9200</code> のコメントアウトを外して別のポートを指定することも可能です。（再度起動すると反映されます。）</p><h2 id="日本語解析への対応"><a href="#日本語解析への対応" class="headerlink" title="日本語解析への対応"></a>日本語解析への対応</h2><p>標準ではElasticsearchは日本語の形態素解析（後述します）に対応しておりませんが、オープンソースの<strong>kuromoji</strong>というソフトウェアを対応させることで、日本語の解析が可能となります。<br><code>bin/elasticsearch-pulgin.bat</code> から追加インストールすることができます。コマンドプロンプトで以下のコマンドを実行しましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [zip解凍したフォルダ\bin] にて実行</span></span><br><span class="line">&gt; elasticsearch-plugin.bat install analysis-kuromoji</span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行結果</span></span><br><span class="line">-&gt; Installing analysis-kuromoji</span><br><span class="line">-&gt; Downloading analysis-kuromoji from elastic</span><br><span class="line">[=================================================] 100%??</span><br><span class="line">-&gt; Installed analysis-kuromoji</span><br></pre></td></tr></table></figure><p>インストール後はElasticsearchを再起動します。</p><p>また、ご利用の環境によってはコマンドプロンプトの文字コードによって日本語表示が文字化けることがあります。<br><code>chcp 65001</code>と実行すると文字コードがUTF-8になります。</p><h2 id="Elasticsearchの用語について"><a href="#Elasticsearchの用語について" class="headerlink" title="Elasticsearchの用語について"></a>Elasticsearchの用語について</h2><p>ここでElasticsearchで知っておくべき用語と概念を示しておきます。<br>Elasticsearchは様々なデータを格納するにあたり、MySQLなどのRDBMSで言うところのデータベースやテーブルに相当する概念が存在します。<br>RDBに慣れている方も多いかと思いますので、比較する形で示したいと思います。<br>※厳密に言うと異なる概念ですが、イメージしやすいかと思います。</p><table><thead><tr><th align="left">Elasticsearch用語</th><th align="left">説明</th><th align="left">RDBMSで言うところの…</th></tr></thead><tbody><tr><td align="left">インデックス</td><td align="left">ドキュメントを格納する場所</td><td align="left">データベース</td></tr><tr><td align="left">ドキュメントタイプ・マッピング</td><td align="left">ドキュメントの構成やフィールド型などの定義</td><td align="left">テーブル</td></tr><tr><td align="left">ドキュメント</td><td align="left">格納される１つの文章の単位</td><td align="left">レコード</td></tr><tr><td align="left">フィールド</td><td align="left">ドキュメント内のKeyとValueの組み合わせ</td><td align="left">カラム</td></tr></tbody></table><p>これらを踏まえ、実際にElasticsearchを動かしていってみましょう！</p><h1 id="インデックスとドキュメントの登録"><a href="#インデックスとドキュメントの登録" class="headerlink" title="インデックスとドキュメントの登録"></a>インデックスとドキュメントの登録</h1><p>ここからは実際にElasticsearchにドキュメントを登録したり検索したりしてみます。</p><p>Elasticsearchは、REST APIによるHTTPリクエストでシンプルに操作できるというメリットがありますので、<br>curlコマンドを使ってバシバシ叩いてみましょう。</p><p>まずはインデックスとドキュメントを作成してみます。<br>ドキュメントは、JSON形式で登録することとなります。<br>事前準備として、登録するドキュメントの内容を<code>my_document_1.json</code>というファイルに作成しておきます。</p><figure class="highlight json"><figcaption><span>my_document_1.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"user_name"</span>: <span class="string">"Future 太郎"</span>,</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2020-06-23T10:09:01"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"春の入門祭り　Elasticsearch入門"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登録のHTTPリクエストは以下の形式で行います。</p><blockquote><ul><li>メソッド： POST</li><li>URL： <a href="http://localhost:9200/my_index/my_type/?pretty" target="_blank" rel="noopener">http://localhost:9200/my_index/my_type/?pretty</a><ul><li>localhost:9200/<strong>{インデックス名を指定}</strong>/<strong>{ドキュメントタイプ名を指定}</strong>/<br>⇒インデックスとドキュメントタイプが存在しない場合は、自動的に作成される</li><li>?prettyを付与するとJSONが整形された形で返却される</li></ul></li><li>ヘッダ： “Content-Type”:”application/json”</li><li>ボディ： my_document_1.json</li></ul></blockquote><p>それでは、実際にコマンドを叩いてみます。</p><figure class="highlight sh"><figcaption><span>インデックスとドキュメントを作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X POST <span class="string">"http://localhost:9200/my_index/my_type/?pretty"</span> -H <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span> -d @my_document_1.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行結果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"my_index"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"my_type"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"D4DCxnIB33lDYAWdACgJ"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 1,</span><br><span class="line">  <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 2,</span><br><span class="line">    <span class="string">"successful"</span> : 1,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 0,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インデックス、ドキュメントタイプの作成、ドキュメントの登録がこれだけで完了しました！</p><p>登録された内容を確認してみましょう。<br>ドキュメントを指定して参照するには、<code>～/{インデックス名}/{ドキュメントタイプ名}/{ドキュメントid}</code>と指定してリクエストします。<br>ドキュメントidとは、先ほどのレスポンスの <strong>“_id”</strong> です</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X GET <span class="string">"http://localhost:9200/my_index/my_type/D4DCxnIB33lDYAWdACgJ?pretty"</span> -H <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行結果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"my_index"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"my_type"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"D4DCxnIB33lDYAWdACgJ"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 1,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 0,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"user_name"</span> : <span class="string">"Future 太郎"</span>,</span><br><span class="line">    <span class="string">"date"</span> : <span class="string">"2020-06-23T10:09:01"</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"春の入門祭り　Elasticsearch入門"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しっかり登録されていますね！</p><h1 id="ドキュメントの検索"><a href="#ドキュメントの検索" class="headerlink" title="ドキュメントの検索"></a>ドキュメントの検索</h1><p>続いて、Elasticsearchのコア機能となる検索機能を試してみましょう。</p><p>検索する条件もJSONに記載します。messageが<strong>「春祭り」</strong>という条件で検索をかけてみましょう。<br>まずは以下のファイルを作成してください。</p><figure class="highlight json"><figcaption><span>my_query_1.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"春祭り"</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>検索は<code>～/{インデックス名}/{ドキュメントタイプ名}/_search</code>という形式でリクエストします。<br>検索条件として、先ほどの<code>my_query_1.json</code> を指定します。</p><figure class="highlight sh"><figcaption><span>「春祭り」で検索</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X GET <span class="string">"http://localhost:9200/my_index/my_type/_search?pretty"</span> -H <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span> -d @my_query_1.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">3.8015757</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"my_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"my_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"D4DCxnIB33lDYAWdACgJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">3.8015757</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user_name"</span> : <span class="string">"Future 太郎"</span>,</span><br><span class="line">          <span class="attr">"date"</span> : <span class="string">"2020-06-23T10:09:01"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"春の入門祭り　Elasticsearch入門"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>いろいろな要素が返却されていますが、着目したいのは<strong>「春祭り」</strong>という条件で検索したにも関わらず、<strong>「春の入門祭り」</strong>を含むドキュメントが結果として取得できた点です。</p><p>これはElasticsearchが備えるAnalyzerという機能によって、格納している文章を単語単位で分割して保持しているため、このような検索が実現されます。<br>特に日本語を単語単位で分割することを形態素解析と呼びます。<br>※日本語を形態素解析するためには、先ほど追加インストールしたkuromojiが必要です。</p><p>ここで、先ほど登録していたmessageの内容である「春の入門祭り　Elasticsearch入門」という日本語がどのように形態素解析されるのか確かめてみましょう。</p><p>リクエストのため以下のファイルを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;: &quot;kuromoji&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;春の入門祭り　Elasticsearch入門&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そして以下の通りリクエストしてみます。</p><figure class="highlight sh"><figcaption><span>「春の入門祭り　Elasticsearch入門」の解析結果を調べる</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X POST <span class="string">"http://localhost:9200/my_index/_analyze?pretty"</span> -H <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span> -d @my_analyze_1.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"春"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"入門"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"祭り"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">20</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"入門"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">20</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">22</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように「春の入門祭り　Elasticsearch入門」という文章は、<strong>「春」</strong> <strong>「入門」</strong> <strong>「祭り」</strong> <strong>「Elasticsearch」</strong> <strong>「入門」</strong>という形で解析され分割されることがわかります。</p><p>形態素解析された単語たちは、自身のドキュメントidと紐づく形の構成で保持されており、ドキュメントへのインデックスとなります。このような構成を特に「転置インデックス」と呼びます。</p><p>検索時には、クエリ文字列に対しても形態素解析を行いその結果（今回は<strong>「春」</strong> <strong>「祭り」</strong>）を条件に検索をかけ、Hitしたドキュメントが返却されるという仕組みです。（索引型検索）</p><p>Elasticsearchではこの索引型検索方式を採用することで、大量データの中からでも高速に対象のドキュメントを探し出すことが可能となっています。</p><p>もう少し検索についてみていきます。<br>先ほどと同じ手順で新たにドキュメントを追加してください。</p><figure class="highlight json"><figcaption><span>my_document_2.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"user_name"</span>: <span class="string">"Future 次郎"</span>,</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2020-06-23T11:09:01"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"夏は辛い物を食べて発汗！"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そして以下の条件で検索をかけてみます。</p><figure class="highlight json"><figcaption><span>my_query_2.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"おいしい食べ物"</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>「おいしい食べ物」で検索</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X GET <span class="string">"http://localhost:9200/my_index/my_type/_search?pretty"</span> -H <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span> -d @my_query_2.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">7</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">3.3295276</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"my_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"my_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"kzUPynIBNYoM10duZYBa"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">3.3295276</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user_name"</span> : <span class="string">"Future 次郎"</span>,</span><br><span class="line">          <span class="attr">"date"</span> : <span class="string">"2020-06-23T11:09:01"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"夏は辛い物を食べて発汗！"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>検索条件は「食べ物」ですが、「食べる」を含むドキュメントが結果として取得されました。<br>こちらも同様にAnalyzerが<strong>「表記のゆれ」</strong>を検知して、「食べる」や「食べた」を<strong>「食べ」</strong>に変換して検索しています。</p><p>RDBMSでは「～と一致する」や「～を含む」などといったカッチリした条件指定となりますが、Elasticsearchでは文章を解析したりゆれを考慮して結果を返してくれるのです。<br>全文検索エンジン便利！！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>本記事ではドキュメントの登録や検索などのほんの（本当に！）一部しか紹介していませんが、より高度な条件の検索をかけたり、登録ドキュメントの分析を行う様々な種類があります。<br>また、周辺ツールとしてデータをグラフィカルに表示する<strong>「Kibana」</strong>や、ログを自動的にElasticsearchに送り込む<strong>「Logstash」</strong>などがあります。</p><p>本記事にてElasticsearchの基本に触れたのちは、当ブログの過去記事に高度な利用法も紹介されていますので、是非挑戦してみてください！</p><ul><li><a href="https://future-architect.github.io/articles/20160920/">マネージャーがうれしいRedmineデータのグラフ表示方法を公開します！！</a></li><li><a href="https://future-architect.github.io/articles/20170510/">マネージャーがうれしいRedmineデータのダッシュボード表示方法を公開します！！</a></li><li><a href="https://future-architect.github.io/articles/20170119/">マネージャーがうれしいRedmineデータのEVM表示方法を公開します！！</a></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://www.amazon.co.jp/Elasticsearch%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89-impress-top-gear-%E6%83%A3%E9%81%93/dp/4295003913/ref=asc_df_4295003913/?tag=jpgo-22&linkCode=df0&hvadid=295706574430&hvpos=&hvnetw=g&hvrand=18123178779117293225&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1009309&hvtargid=pla-525424503079&psc=1&th=1&psc=1" target="_blank" rel="noopener">Elasticsearch実践ガイド</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200623/top.png&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGメディアユニットの町田です。
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Elastic-Stack" scheme="https://future-architect.github.io/tags/Elastic-Stack/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Elasticsearch" scheme="https://future-architect.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #16 「その仕事、Slackで。」してみた事例を紹介</title>
    <link href="https://future-architect.github.io/articles/20200622/"/>
    <id>https://future-architect.github.io/articles/20200622/</id>
    <published>2020-06-22T04:08:22.000Z</published>
    <updated>2020-06-23T06:04:46.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG メディアユニットの久保です。</p><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り🌸</a> #16　業務効率化・コミュニケーションツールSlack入門です。</p><img src="/images/20200622/1.png"><p>コロナ影響により業界各社がテレワーク中心の業務体制を準備する中、コミュニケーションツールの需要が一気に高まってきました。</p><p>この環境の中、各社がこぞって求めているのは、テレワーク上でもオフラインと同じように密なコミュニケーションを取れる手段です。新型コロナが流行してから、約２週間で大手コミュニケーションツール<a href="https://slack.com/intl/ja-jp/" target="_blank" rel="noopener">Slack</a>の同時接続数が250万人超となったニュースが、記憶に新しいですね。</p><p>そんな中、フューチャーは密なコミュニケーションを取るという目的に留まらず、Slackの拡張機能を使った業務の効率化を図っています。今年から配属される新人向けに日々の業務効率化・タスク管理の一つの手段を紹介できればと思います。</p><p>本記事では、私のチームが普段使用しているSlackの<strong>拡張機能</strong>を説明します。具体的な設定方法などは詳しく書いてある記事がたくさんあるのでググってみてください。</p><h1 id="普段使用しているSlackの拡張機能（ワークフロービルダー編）"><a href="#普段使用しているSlackの拡張機能（ワークフロービルダー編）" class="headerlink" title="普段使用しているSlackの拡張機能（ワークフロービルダー編）"></a>普段使用しているSlackの拡張機能（ワークフロービルダー編）</h1><p>私のチームではSlackの拡張機能であるワークフロービルダー（以降、WF）やAppsを使って、既存業務の効率化を図っています。<br>拡張機能の具体的な定義や作成方法は公式HPを参照してみてください。</p><ul><li>WF<ul><li>Slack内のアクション（メッセージやスタンプ）から後続のイベントを発生させる機能</li><li>公式URL：<a href="https://slack.com/intl/ja-jp/features/workflow-automation" target="_blank" rel="noopener">https://slack.com/intl/ja-jp/features/workflow-automation</a></li></ul></li></ul><h2 id="①スタンプを押すだけでタスクのTODOリスト化"><a href="#①スタンプを押すだけでタスクのTODOリスト化" class="headerlink" title="①スタンプを押すだけでタスクのTODOリスト化"></a>①スタンプを押すだけでタスクのTODOリスト化</h2><p>Slack上で発覚したタスクに対し、スタンプ（絵文字）をつけることでメンバーのTODOに追加しています。<br>具体的な例で説明すると以下のシーン。</p><img src="/images/20200622/2.png"><p>上記の例では、他メンバーからタスクを強制的に追加された！！のような表現になっていますが、普段は自分のタスク管理のために、やりとりで発覚したタスクを自身でスタンプを押してTODO化しています。</p><p>このように、スタンプ→TODOメッセージ化することで、ダイレクトメッセージ（Slackbot）上にTODOが一覧化されるため、タスクの漏れを防止すること・一覧上で視認することができます。今までは日々の会話から発覚したタスクに対して、わざわざ個人のメモ帳に張り付ける等していたタスクのリスト化が、WFを使うとスタンプを押すだけで管理することができます。</p><h2 id="②勤怠連絡のフォーマット化"><a href="#②勤怠連絡のフォーマット化" class="headerlink" title="②勤怠連絡のフォーマット化"></a>②勤怠連絡のフォーマット化</h2><p>テレワークが主軸となる中、各メンバーの勤務状況を共有するためにWFを使って、勤務状況共有の簡易化を図っています。</p><img src="/images/20200622/3.png"><p>予めWFでフォーマットを作成することで、勤怠連絡用のチャンネルからショートカット（青い稲妻マーク）によりWFを呼び出すことができます。このWF一つでは大きなコスト削減にはなりませんが、こういった日々の小さなタスクを定型化・自動化することで、本来やりたい業務に時間を費やすことができます。</p><h2 id="③新規メンバーアサイン時のガイドライン自動共有化"><a href="#③新規メンバーアサイン時のガイドライン自動共有化" class="headerlink" title="③新規メンバーアサイン時のガイドライン自動共有化"></a>③新規メンバーアサイン時のガイドライン自動共有化</h2><p>プロジェクトにメンバーが新規参画した際に行うプロジェクトルールやキャッチアップ資料の共有・ガイドを、WFで自動化しています。具体的には、特定のチャンネルに新しくメンバーを追加することをトリガーに、各種キャッチアップ資料が格納されたパスを自動で通知する仕組みを適用しています。</p><p>私たちのチームでは新規メンバー参画時に以下をWFで共有しています。</p><ul><li>Wiki</li><li>キャッチアップ資料のファイルパス</li><li>注意事項などチャンネルでピン留めされているスレッドのパス</li></ul><p>上記のように、参画時のガイドを自動化することで説明時間の削減を行っています。また、メンバーの新規参画～説明は頻繁に起こることではないため、定型化しておくことで共有しなければいけない情報の共有漏れなども防ぐことができています。</p><h1 id="普段使用しているSlackの拡張機能（Apps編）"><a href="#普段使用しているSlackの拡張機能（Apps編）" class="headerlink" title="普段使用しているSlackの拡張機能（Apps編）"></a>普段使用しているSlackの拡張機能（Apps編）</h1><p>Slack Appsには、様々なAppsが提供されています。</p><p>例えば、「<a href="https://slack.com/apps/A6L22LZNH-aws-chatbot" target="_blank" rel="noopener">AWSチャットボット</a>」を使えばAWS上のリソースをわざわざマネジメントコンソールにアクセスしなくてもSlack上で監視および操作することができます。</p><p>私たちのチームでは、業務形態に合わせてチーム固有のappを作成しています。具体的にはSlack Apps作成用の部品である「<a href="https://slack.com/intl/ja-jp/help/articles/115005265063-Slack-%E3%81%A7%E3%81%AE-Incoming-Webhook-%E3%81%AE%E5%88%A9%E7%94%A8" target="_blank" rel="noopener">Incoming Webhooks</a>」を利用して、外部サービスがイベントを発火する際に、Slackに対して通知連携をすることで、「〇〇が発生したらSlackにもメッセージが投稿される」仕組みを実現しています。</p><ul><li>Apps<ul><li>外部アクションを起点にSlack内部に後続のイベントを発生させる機能</li><li>公式URL：<a href="https://slack.com/intl/ja-jp/apps" target="_blank" rel="noopener">https://slack.com/intl/ja-jp/apps</a></li></ul></li></ul><h2 id="GitLabのCommit-MergeRequestを通知"><a href="#GitLabのCommit-MergeRequestを通知" class="headerlink" title="GitLabのCommit/MergeRequestを通知"></a>GitLabのCommit/MergeRequestを通知</h2><p>GitLabからCommit/MergeRequestの通知をSlackに連携することができます。</p><p>具体的な操作手順は少し古いですが<a href="https://qiita.com/M4e/items/c26d938e73830b0ba6b9" target="_blank" rel="noopener">まとめてくれている記事</a>があるので、参考にしてみてください。<br>要約すると以下の手順で設定していきます。</p><ol><li><a href="https://api.slack.com/" target="_blank" rel="noopener">Slackアプリを作成</a></li><li>Slackアプリの「Incoming Webhooks」を設定し、「WebhooksURL」を発行。</li><li>GitLabのsettings/Integrationsから2で発行した「WebhooksURL」を設定。</li></ol><p>上記の設定を行うことにより、ソースレビューの状況やMasterブランチのcommitをSlackで通知を受けることができます。レビュアーにMergeRequestしたけど気づいてもらえない等のタイムラグをSlack自動通知で認知してもらうことができます。開発経験が乏しいアサイン当初などはソースレビューをお願いする機会が頻繁にあると思うので、この機能があると先輩社員に自動で通知がいくのでありがい機能となるはずです。</p><h1 id="【番外編】GoogleAppsScriptでZabbix→GmailのメッセージをSlackに通知"><a href="#【番外編】GoogleAppsScriptでZabbix→GmailのメッセージをSlackに通知" class="headerlink" title="【番外編】GoogleAppsScriptでZabbix→GmailのメッセージをSlackに通知"></a>【番外編】GoogleAppsScriptでZabbix→GmailのメッセージをSlackに通知</h1><p>Zabbixの通知をGmail経由（GoogleAppsScript）でSlackにも投稿しています。</p><p>GASを挟んでいるため本記事では番外編としていますが、障害周りの通知もSlackへ連携しリアルタイムで認知できる仕組みを作っています。<br><a href="https://qiita.com/Quikky/items/9de56c049304885a4f4f" target="_blank" rel="noopener">こちらの記事</a>が参考になりました。</p><p>本記事を作成する際に改めてSlack Appを調べていいるとZabbixから直接Slackに連携することもできるようなので、次々に新しい方法が出ているなと感じました。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>働く環境や利用するツールが変わることで、業務方法やタスク管理方法が着々と変わっていきます。今まで自身の中で最適解であった方法よりもさらに良い方法が生まれてきている環境です。</p><p>勤続年数が多い先輩社員はそれぞれ自身の業務効率化・タスク管理がある程度確立しているなか、今年からアサインされる新人のみなさんはぜひ積極的に新しい技術・新しいサービスを取り入れて、先輩社員に「そんなサービスあるんだ！？」とあっと驚かしてみてはいかがでしょうか。自動化って便利だしかっこいいですよね。</p><p>その１ステップ目として、Slackの拡張機能は早いものなら5分で作れるものもあるので、手を出してみるにはおすすめの手段（の一つ）です。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG メディアユニットの久保です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-archit
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Slack" scheme="https://future-architect.github.io/tags/Slack/"/>
    
      <category term="ChatOps" scheme="https://future-architect.github.io/tags/ChatOps/"/>
    
  </entry>
  
  <entry>
    <title>webpack入門</title>
    <link href="https://future-architect.github.io/articles/20200619/"/>
    <id>https://future-architect.github.io/articles/20200619/</id>
    <published>2020-06-19T01:19:09.000Z</published>
    <updated>2020-06-23T06:04:40.409Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200619/top.png"><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>15 日目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><strong>想定読者はプログラミング初心者/フロントエンド未経験者です。</strong></p><p>TIG メディアユニットの二瓶賢です。<br>入門祭りということで、今回はフロントエンドの入門記事を書きました。</p><p>JavaScriptでの開発は実行結果が視覚的&amp;ツール周りが充実しているのでプログラミング覚えたての人も楽しみながら進められると思います。一方、開発環境周りは充実しすぎているがゆえ難しいと思ったので記事にしました。</p><p>webpackがどんなものか理解し、実際にwebpackを使えるようになることをゴールとしています。</p><h2 id="webpack-について"><a href="#webpack-について" class="headerlink" title="webpack について"></a>webpack について</h2><p><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a>とはフロントエンドのモジュールバンドラーツールです。  簡単に言うと、部品(モジュール)単位で開発した複数のJSを1つのJSにまとめる(バンドル)ツールです。(実は、JSだけでなくCSS, 画像ファイルについてもバンドルできます)</p><p>webpackを使うと、以下の利点があります。</p><ol><li>ファイルがまとめられる=通信の回数をまとめられるのでHTTP リクエストの回数が減り、パフォーマンス向上に繋がる</li><li>ファイルを部品単位で作れるので、管理がしやすくなる</li></ol><p>1.の具体例を出します。</p><p>例えば、1 ページで複数のJSをモジュール単位で開発していたとします。webpackを使わない場合HTMLは以下のようになります。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/button.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/form.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/toggle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>webpackを使う場合は以下のようになります。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>複数のJSファイルを<code>dist/main.js</code>にバンドルすることができます。そのため、開発者はファイルを部品単位で開発し、まとめ方をwebpackで指定してあげるだけで良くなります。</p><h2 id="webpack-導入手順"><a href="#webpack-導入手順" class="headerlink" title="webpack 導入手順"></a>webpack 導入手順</h2><p>webpackは<a href="https://nodejs.org/ja/" target="_blank" rel="noopener">Node.js</a> (JavaScriptの実行環境) 上で動きます。<br>※ここではNode.js についての詳細な説明は割愛します。</p><p>次に、<a href="https://docs.npmjs.com/about-npm/" target="_blank" rel="noopener">npm</a>を使ってwebpackをインストールします。</p><p>npmについても詳細は割愛します。端的に記載するとnpm(Node Packaging Manager)はNode.jsのパッケージ管理ツールです。JavaScriptのパッケージ(フレームワーク/ライブラリ/ツール)のインストールや、バージョン管理が可能です。</p><p>npmでの開発を初めるためのコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> init -y</span><br></pre></td></tr></table></figure><p>下記のコマンドでwebpackをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> isntall -D webpack webpack-cli</span><br></pre></td></tr></table></figure><p>これでwebpackを使う準備は完了です。</p><h2 id="実際に-webpack-を使ってみよう"><a href="#実際に-webpack-を使ってみよう" class="headerlink" title="実際に webpack を使ってみよう"></a>実際に webpack を使ってみよう</h2><p>実際にwebpackを体験してみましょう。JSファイルをバンドルし、バンドル後のJSファイルをHTML上から読み込みます。</p><p>まず、ディレクトリ <code>dist/</code>, <code>js/</code>を作成しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist/</span><br><span class="line">├── index.html</span><br><span class="line">├── js/</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── node_modules/</span><br></pre></td></tr></table></figure><p>さらに、JSファイルを2つ作成します。</p><p>まず、<code>js/hoge.js</code>を作成します。<code>alert()</code>でメッセージを表示する機能を持つ部品(モジュール)として作成します。</p><figure class="highlight js"><figcaption><span>hoge.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">alertMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"from hoge.js"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いて、<code>js/entry.js</code>を作成します。<br>このファイルはモジュールを使う側のJSファイルです。</p><figure class="highlight js"><figcaption><span>entry.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; alertMessage &#125; <span class="keyword">from</span> <span class="string">"./hoge"</span></span><br><span class="line"></span><br><span class="line">alertMessage()</span><br></pre></td></tr></table></figure><p>さて、この2つのJSファイルをバンドリングするためwebpackを使います。<br><code>./webpack.config.js</code>を作成します。</p><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  entry: <span class="string">'./js/entry.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>これはwebpackの設定ファイルです。</p><p>上記では設定は2つ指定しています。<code>mode</code>では、開発モードでビルドすることを指定しています。<code>mode</code>は<code>development</code>(開発モード),<code>production</code>(製品モード),<code>none</code>(指定なし)の3つあります。<code>entry</code>では、エントリーポイント(一番初めの他モジュールの呼び出し元ファイル)を<code>./js/entry.js</code>に指定しています。</p><p>さて、webpackの設定は終わったので実際にwebpackを実行してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$./node_modules/.bin/webpack</span><br></pre></td></tr></table></figure><p>結果は以下のように出るかと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hash: acbec46c248d0da2e3fb</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 117ms</span><br><span class="line">Built at: 06/17/2020 10:08:18 PM</span><br><span class="line">  Asset      Size  Chunks             Chunk Names</span><br><span class="line">main.js  4.54 KiB    main  [emitted]  main</span><br><span class="line">Entrypoint main = main.js</span><br><span class="line">[./js/entry.js] 53 bytes &#123;main&#125; [built]</span><br><span class="line">[./js/hoge.js] 63 bytes &#123;main&#125; [built]</span><br></pre></td></tr></table></figure><p>さて、ここで<code>dist/</code>の中身を観てみましょう。<br><code>dist/main.js</code>が作成されているはずです。</p><p><code>dist/main.js</code>はビルド済ですが、一旦中身を見てみると</p><figure class="highlight js"><figcaption><span>dist/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=&#123;&#125;;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">if</span>(t[n])<span class="keyword">return</span> t[n].exports;<span class="keyword">var</span> o=t[n]=&#123;<span class="attr">i</span>:n,<span class="attr">l</span>:!<span class="number">1</span>,<span class="attr">exports</span>:&#123;&#125;&#125;;<span class="keyword">return</span> e[n].call(o.exports,o,o.exports,r),o.l=!<span class="number">0</span>,o.exports&#125;r.m=e,r.c=t,r.d=<span class="function"><span class="keyword">function</span>(<span class="params">e,t,n</span>)</span>&#123;r.o(e,t)||<span class="built_in">Object</span>.defineProperty(e,t,&#123;<span class="attr">enumerable</span>:!<span class="number">0</span>,<span class="attr">get</span>:n&#125;)&#125;,r.r=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"undefined"</span>!=<span class="keyword">typeof</span> <span class="built_in">Symbol</span>&amp;&amp;<span class="built_in">Symbol</span>.toStringTag&amp;&amp;<span class="built_in">Object</span>.defineProperty(e,<span class="built_in">Symbol</span>.toStringTag,&#123;<span class="attr">value</span>:<span class="string">"Module"</span>&#125;),<span class="built_in">Object</span>.defineProperty(e,<span class="string">"__esModule"</span>,&#123;<span class="attr">value</span>:!<span class="number">0</span>&#125;)&#125;,r.t=<span class="function"><span class="keyword">function</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">if</span>(<span class="number">1</span>&amp;t&amp;&amp;(e=r(e)),<span class="number">8</span>&amp;t)<span class="keyword">return</span> e;<span class="keyword">if</span>(<span class="number">4</span>&amp;t&amp;&amp;<span class="string">"object"</span>==<span class="keyword">typeof</span> e&amp;&amp;e&amp;&amp;e.__esModule)<span class="keyword">return</span> e;<span class="keyword">var</span> n=<span class="built_in">Object</span>.create(<span class="literal">null</span>);<span class="keyword">if</span>(r.r(n),<span class="built_in">Object</span>.defineProperty(n,<span class="string">"default"</span>,&#123;<span class="attr">enumerable</span>:!<span class="number">0</span>,<span class="attr">value</span>:e&#125;),<span class="number">2</span>&amp;t&amp;&amp;<span class="string">"string"</span>!=<span class="keyword">typeof</span> e)<span class="keyword">for</span>(<span class="keyword">var</span> o <span class="keyword">in</span> e)r.d(n,o,<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;<span class="keyword">return</span> e[t]&#125;.bind(<span class="literal">null</span>,o));<span class="keyword">return</span> n&#125;,r.n=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=e&amp;&amp;e.__esModule?<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.default&#125;:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e&#125;;<span class="keyword">return</span> r.d(t,<span class="string">"a"</span>,t),t&#125;,r.o=<span class="function"><span class="keyword">function</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(e,t)&#125;,r.p=<span class="string">""</span>,r(r.s=<span class="number">0</span>)&#125;([<span class="function"><span class="keyword">function</span>(<span class="params">e,t,r</span>)</span>&#123;<span class="string">"use strict"</span>;r.r(t),alert(<span class="string">"from hoge.js"</span>)&#125;]);</span><br></pre></td></tr></table></figure><p>と、綺麗なコードが生成されているかと思います。<br>これがバンドル後のJSファイルです。<br>もう何が書いてあるのかわかりません。<br>正しく意図したとおり動くのか、実際に実行してみましょう。</p><p><code>./index.html</code>を作成します。</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>実際にこれをブラウザで開いてみましょう。<br>開くと、意図したとおり以下のようなメッセージが出ます。(画像はChromeで開いた場合)<br><img src="/images/20200619/photo_20200619_01.png"></p><p>最後に、webpackのコマンドオプションを一つ紹介します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$./node_modules/.bin/webpack --watch</span><br></pre></td></tr></table></figure><p>これを指定するとJSファイルの変更を監視し、変更を検知すると自動でwebpackが走ります。<br>試しに、監視状態のまま<code>js/hoge.js</code>で表示するメッセージを変更してみましょう。</p><figure class="highlight js"><figcaption><span>hoge.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">alertMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"****from hoge.js****"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>その後、もう一度<code>./index.html</code>をブラウザで開いてみましょう。メッセージが変更されていることが確認できるかと思います。</p><p>これで、逐次webpackを実行する手間もなくなりました。</p><hr><p>今回は<code>webpack.config.js</code>については必要最低限の設定しかしませんでしたが実際はたくさん設定することになります。<br>例えば、利用するプラグインの設定をします。<br>webpackではプラグインは豊富に用意されています。<br>ここでは、一例をご紹介します。</p><ul><li>バンドル時に不要なスペースやコメント等を削除し軽量化するプラグイン：<a href="https://webpack.js.org/plugins/uglifyjs-webpack-plugin/" target="_blank" rel="noopener">UglifyjsWebpackPlugin</a></li><li>HTMLの生成までするプラグイン：<a href="https://webpack.js.org/plugins/html-webpack-plugin/" target="_blank" rel="noopener">HtmlWebpackPlugin</a></li><li><code>--watch</code>オプションで特定のファイルの監視を無視させるプラグイン：<a href="https://webpack.js.org/plugins/watch-ignore-plugin/" target="_blank" rel="noopener">WatchIgnorePlugin</a></li></ul><p>たくさん設定が増え複雑化するため、実際の開発では共通設定/開発環境設定/本番環境設定としてそれぞれ<code>webpack.common.js</code>, <code>webpack.dev.js</code>, <code>webpack.prod.js</code>と分けて設定を記載していきます。<br><a href="https://webpack.js.org/guides/production/#setup" target="_blank" rel="noopener">公式ドキュメントの例</a></p><p>また、<code>./node_modules/.bin/webpack</code>はnpm-scriptsに登録するとよりよいです。<br><code>./package.json</code>にて、scriptsに<code>&quot;コマンド名&quot;:&quot;タスク&quot;</code>を登録すると、以下のように実行できます。<br>例：</p><figure class="highlight"><figcaption><span>./package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "build": "webpack",</span><br><span class="line">    "watch": "webpack --watch"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>npm-script実行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> run build</span><br></pre></td></tr></table></figure><p>上記のコマンドは<code>$./node_modules/.bin/webpack</code>と実行内容は同じですが、こちらの方が簡潔かと思います。<br><code>watch</code>に関しても同様です。<br>npm-scriptsを上手く設定することで、複雑なタスクも簡潔に実行できるようになります(これはwebpackに限りません)。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>webpackの機能をすべて紹介することはできませんでしたが、webpackがどのような目的のツールなのかを知っていただき実際にwebpackを体験していただけたなら幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200619/top.png&quot;&gt;


&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;15 日目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめ
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Node.js" scheme="https://future-architect.github.io/tags/Node-js/"/>
    
      <category term="webpack" scheme="https://future-architect.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #14 暗号通信入門 </title>
    <link href="https://future-architect.github.io/articles/20200618/"/>
    <id>https://future-architect.github.io/articles/20200618/</id>
    <published>2020-06-18T00:33:37.000Z</published>
    <updated>2020-06-23T06:04:31.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG メディアチームの竹中です。</p><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り🌸</a> #14　暗号通信入門です。</p><p>新型コロナ肺炎の感染拡大に伴い、多くの方がインターネット通販をいつも以上に利用したのでは無いでしょうか？その際、クレジットカード番号など漏洩したら困る個人情報が多く含まれますので、どのような通信が行われているか分からないと気が気ではありませんね。もちろんやり取りには暗号通信が利用されています。</p><p>私自身、「仕組みは知っているけど検証はしたことがなかったな」と思い、HTTP通信とHTTPS通信の通信内容を確認しつつ、暗号通信入門記事としていきます。本記事では、入門記事として簡単な解説と検証内容を記載し、詳細な仕組みなど後記する参考文献などで調べて頂くことを想定しています。</p><p>では、早速見ていきましょう。</p><h1 id="HTTP通信？HTTPS通信？"><a href="#HTTP通信？HTTPS通信？" class="headerlink" title="HTTP通信？HTTPS通信？"></a>HTTP通信？HTTPS通信？</h1><p>インターネット通販などでブラウザを使う際、ブラウザとWebサーバーで主に行われている通信です。<br>通信内容を暗号化せずに通信（＝HTTP通信）すると無関係な人も通信内容を読み取れるため、通信内容を暗号化して、通信先にのみ通信内容を正しく読み取れるように（＝HTTPS通信）しようというものです。</p><img src="/images/20200618/photo_20200618_01.png" style="border:solid 1px #000000"><h1 id="暗号化していないHTTP通信"><a href="#暗号化していないHTTP通信" class="headerlink" title="暗号化していないHTTP通信"></a>暗号化していないHTTP通信</h1><p>HTTP通信ではどのように通信内容が見えるのでしょうか。早速検証してみましょう。</p><h2 id="HTTP通信をするサーバを用意"><a href="#HTTP通信をするサーバを用意" class="headerlink" title="HTTP通信をするサーバを用意"></a>HTTP通信をするサーバを用意</h2><p>Node.jsをインストールして、以下のファイルを用意します。</p><figure class="highlight js"><figcaption><span>server-http.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'fs'</span>).readFileSync(<span class="string">'form.html'</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// サーバー起動</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">         <span class="comment">// 初期表示ではformを返す</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;)</span><br><span class="line">        res.end(html);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">         <span class="comment">// formからの入力値を解釈して返却</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;)</span><br><span class="line">        req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;data += chunk&#125;)</span><br><span class="line">            .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                res.end(<span class="string">`form: <span class="subst">$&#123;data&#125;</span> `</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(port)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server is running : http://localhost:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>from.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">    Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Credit No:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"creditNo"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTTP通信を行うサーバを起動します。<br><code>node .\server-http.js start</code></p><p>ブラウザで<code>http://localhost:8080/</code>を開くと下記のようなフォームが表示されます。<br><img src="/images/20200618/photo_20200618_02.png" class="img-middle-size"></p><h2 id="通信内容を確認"><a href="#通信内容を確認" class="headerlink" title="通信内容を確認"></a>通信内容を確認</h2><p>今回はWiresharkでパケット取得してみます。</p><p>Wiresharkはネットワーク・アナライザ・ソフトウェアで、指定したネットワークインターフェイス上を通過するネットワークパケットをキャプチャすることができます。要するに、ブラウザからWebサーバへ送られるネットワーク通信の内容を監視することができます。</p><p>こちらを使って、ブラウザから送られるHTTP通信・HTTP通信の内容を見ていきます。</p><p>インストールや使い方については『<a href="https://beginners-network.com/wireshark.html" target="_blank" rel="noopener">Wiresharkの使い方 - ネットワーク入門サイト</a>』を参考にしてください。</p><p>Wiresharkでキャプチャ取得を開始し、「http」でフィルターします。ブラウザから<code>http://localhost:8000/</code>のフォームを開き、『送信』（HTTPリクエスト）します。</p><img src="/images/20200618/photo_20200618_03.png" class="img-middle-size"><p>サーバ側では問題なくリクエスト情報を取得できていますね。<br><img src="/images/20200618/photo_20200618_04.png" class="img-middle-size"></p><p>Wiresharkで送信内容見てみると、NameもcreditNoもそのまま送られています。</p><img src="/images/20200618/photo_20200618_05.png" style="border:solid 1px #000000"><p>HTTP通信で情報を送ってしまった場合、 <strong><em>通信内容から容易に情報が読み取れてしまう</em></strong> 、ということですね。</p><h1 id="暗号化したHTTPS通信"><a href="#暗号化したHTTPS通信" class="headerlink" title="暗号化したHTTPS通信"></a>暗号化したHTTPS通信</h1><p>HTTP通信では、「通信内容から容易に情報が読み取れてしまう」ことが分かりました。</p><p>次にHTTPS通信の内容を見て、HTTPS通信では本当に情報が読み取れないのかを確認していきます。</p><p>しかし、暗号通信を行うためには、暗号化するための情報や複合化するための情報が分からないと通信のやり取りができません。そのためHTTPS通信の際には、実際に送信したい内容を送る前に暗号通信準備を行っています。暗号通信準備については、『<a href="https://www.infraexpert.com/study/security28.html" target="_blank" rel="noopener">SSL/TLSネゴシエーション - ネットワークエンジニアとして</a>』を参照ください。</p><h2 id="暗号化のための証明書、秘密鍵を用意"><a href="#暗号化のための証明書、秘密鍵を用意" class="headerlink" title="暗号化のための証明書、秘密鍵を用意"></a>暗号化のための証明書、秘密鍵を用意</h2><p>HTTPS通信を行う際のSSL/TLSネゴシエーションに必須となる、サーバの証明書・秘密鍵を用意します。</p><p>執筆時はWindows、かつ認証Proxy環境の環境で検証を行っています。今回はchocolateyをインストール後、mkcertのインストールして、mkcertでサーバーの証明書・秘密鍵を作成を行います。mkcertはローカルで信頼された証明書を発行するためのソフトウェア、chocolateyはWindows用のパッケージ管理ソフトウェアで、今回はmkcertをインストールするために使用します。</p><p>まずは下記等を参考として、chocolateyのインストールをしてください。</p><ul><li><a href="https://qiita.com/Koutaru/items/41a87ea4004fa685de55" target="_blank" rel="noopener">Windows環境にchocolateyをインストールし、使う</a></li><li><a href="https://qiita.com/geotrader/items/33b5db1832bb42979ba9" target="_blank" rel="noopener">認証プロキシ環境下でのchocolateyインストール</a></li></ul><p>次にmkcertのインストールして、サーバの証明書・秘密鍵を作成を行います。コマンドプロンプトを管理者権限で起動し、下記を実行してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkcertをインストール</span></span><br><span class="line"><span class="variable">$cinst</span> -y mkcert</span><br><span class="line"></span><br><span class="line"><span class="comment"># ローカル環境に認証局を作成</span></span><br><span class="line"><span class="variable">$mkcert</span> -install</span><br><span class="line"></span><br><span class="line"><span class="comment"># localhostの証明書、秘密鍵を作成</span></span><br><span class="line"><span class="comment"># ※カレントディレクトリに「localhost+2.pem」「localhost+2-key.pem」が生成される</span></span><br><span class="line"><span class="variable">$mkcert</span> localhost 127.0.0.1 ::1</span><br></pre></td></tr></table></figure><h2 id="HTTPS通信をするサーバを用意"><a href="#HTTPS通信をするサーバを用意" class="headerlink" title="HTTPS通信をするサーバを用意"></a>HTTPS通信をするサーバを用意</h2><p>以下のファイルを用意します。</p><figure class="highlight js"><figcaption><span>server-http.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">const</span> fs    = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = fs.readFileSync(<span class="string">'form.html'</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8443</span>;</span><br><span class="line"><span class="keyword">const</span> options = &#123; </span><br><span class="line">    key: fs.readFileSync(<span class="string">'localhost+2-key.pem'</span>),</span><br><span class="line">    cert: fs.readFileSync(<span class="string">'localhost+2.pem'</span>)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// サーバー起動</span></span><br><span class="line">https.createServer(options, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">        <span class="comment">// 初期表示ではformを返す</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;)</span><br><span class="line">        res.end(html);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">        <span class="comment">// formからの入力値を解釈して返却</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;)</span><br><span class="line">        req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;data += chunk&#125;)</span><br><span class="line">            .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                res.end(<span class="string">`form: <span class="subst">$&#123;data&#125;</span> `</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(port);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server is running : https://localhost:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>from.html　※HTTPサーバで用意したものと同じです。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">    Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Credit No:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"creditNo"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用意したファイルは『暗号化のための鍵情報などを用意』で作成したファイルと同じ場所に配置します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">folder/</span><br><span class="line">　├ form.html</span><br><span class="line">　├ localhost+2-key.pem</span><br><span class="line">　├ localhost+2.pem</span><br><span class="line">　└ server-https.js</span><br></pre></td></tr></table></figure><p>HTTPS通信を行うサーバを起動します。<br><code>node .\server-https.js start</code></p><p>ブラウザで<code>https://localhost:8443/</code>を開きます。</p><h2 id="WireSharckで通信内容を確認"><a href="#WireSharckで通信内容を確認" class="headerlink" title="WireSharckで通信内容を確認"></a>WireSharckで通信内容を確認</h2><p>Wiresharkでパケット取得してみます。</p><p>キャプチャ取得を開始し、「ipv6.src == ::1」でフィルターします。<br>フォームからHTTPリクエストします。<br><img src="/images/20200618/photo_20200618_06.png" class="img-middle-size"></p><p>サーバ側では問題なくリクエスト情報を取得できていますね。<br><img src="/images/20200618/photo_20200618_07.png" class="img-middle-size"></p><p>しかし、Wiresharkで通信内容見てみると、HTTP通信の時と違ってNameもcreditNoも見つかりません。それどころか、HTTP通信のときにあったGETやPOSTというやり取りすら見つけることができません。</p><img src="/images/20200618/photo_20200618_08.png" style="border:solid 1px #000000"><p>このようにHTTPS通信の内容は、暗号化されているため、サーバが保持している秘密鍵がないと暗号化前の通信内容が分からない状態になっています。</p><h1 id="HTTPS通信の内容を復号化して平文を確認"><a href="#HTTPS通信の内容を復号化して平文を確認" class="headerlink" title="HTTPS通信の内容を復号化して平文を確認"></a>HTTPS通信の内容を復号化して平文を確認</h1><p>暗号化されている？見逃しているだけでHTTPS通信でも平文が送られてるのでは？と考える方もいるかもしれません。</p><p>次に、Wiresharkでキャプチャしている通信内容を復号して平文を確認してみましょう。復号方法は『<a href="https://www7390uo.sakura.ne.jp/wordpress/archives/709" target="_blank" rel="noopener">HTTPSによる暗号化された通信のやり取りをWiresharkで復号して内容を読み取る</a>』を参考にしてください。</p><p>筆者検証時はWireshark設定項目から「Protocols &gt; SSL」がなくなっていたため、「Protocols &gt; TLS」に同様の設定をして検証しています。参考先に記載がありますが「鍵情報が漏洩するとHTTPS通信内容が復号できる」ということですので、鍵情報の取扱にはご注意ください。</p><p>Wiresharkの設定後、再度HTTPS通信を行います。先ほどまでApplication Dataと表記されていた箇所が復号され、平文が確認できます。<br><img src="/images/20200618/photo_20200618_09.png" style="border:solid 1px #000000"></p><p>キャプションを比較してみると、確かに設定を入れる前のWiresharkではApplication Dataと表記されていたところが、復号化されて平文になって確認できていることが分かります。<br><img src="/images/20200618/photo_20200618_10.png" style="border:solid 1px #000000"></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はHTTP通信とHTTPS通信について、検証・確認しました。</p><p>昨今、インターネットの普及に伴い、企業では勿論ですが、プライベートで利用するインターネット通販でも個人情報を入力する機会は多くあるため、一人一人が当たり前にセキュリティ対策を知り、考えなければいけないものになってきています。</p><p>本記事は触れていませんが、HTTPS通信を行う際にその通信先を証明してくれる『信用できる第三者（証明局）』を何をもって信用するか、といった問題など、懸念を上げれば限がないぐらいセキュリティ対策は考えることが多いです。しかし、企業も個人も身を守るために避けては通れないことの一つがセキュリティ対策です。</p><p>HTTP通信に関しては、Chromeで2019年末から2020年第1四半期にわたってHTTPS/HTTP混在ページにおけるHTTPをデフォルトでブロックの対象としていくことが宣言されるなど、各サイトでHTTPSへの対応が必須となってきています。</p><p>フリーで自動化されたオープンな認証局として、『<a href="https://letsencrypt.org/ja/" target="_blank" rel="noopener">Let’s Encrypt</a>』というサービスもあります。ISRGが公共の利益のために運営・提供しているサービスで、2016年4月12日 に正式サービスが開始して以降、毎日多くの証明書を発行しており、HTTPSへの対応もあまりコストかからずできるようになっています。</p><p>本記事は、前記の通り詳しい仕組みの解説記事とはなっておりません。最後に参考文献について記載しますので、皆さんの興味・関心に応じて別途調べてください。</p><p>普段何気なく使っている、身近な暗号通信に興味を持ってもらうきっかけになれば、幸いです！</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://www.amazon.co.jp/%E6%9A%97%E5%8F%B7%E6%8A%80%E8%A1%93%E5%85%A5%E9%96%80-%E7%AC%AC3%E7%89%88-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797382228" target="_blank" rel="noopener">暗号技術入門</a><ul><li>「対称暗号」「公開鍵暗号」「デジタル署名」「PKI」「PGP」「SSL/TLS」など、<br>暗号技術の基礎を、たくさんの図とやさしい文章で解説しています。</li></ul></li><li><a href="https://www.lambdanote.com/products/tls" target="_blank" rel="noopener">プロフェッショナルSSL/TLS</a><ul><li>いまやインターネットにおける暗号化通信に不可欠となったセキュリティプロトコルであるTLS（SSL）の全体像を体系的かつ具体的に語った、‟Bulletproof SSL and TLS”（Ivan Ristić 著）の全訳</li></ul></li><li><a href="https://www.oreilly.co.jp/books/9784873119038/" target="_blank" rel="noopener">Real World HTTP</a><ul><li>HTTPが進化する道筋をたどりながら、ブラウザが内部で行っていること、サーバーとのやりとりの内容などについて、プロトコルの実例や実際の使用例などを交えながら紹介！！</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG メディアチームの竹中です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-archite
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="暗号" scheme="https://future-architect.github.io/tags/%E6%9A%97%E5%8F%B7/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Wireshark" scheme="https://future-architect.github.io/tags/Wireshark/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #13 Swift Compositional Layouts入門：複雑なCollectionViewをシンプルに実装する</title>
    <link href="https://future-architect.github.io/articles/20200617/"/>
    <id>https://future-architect.github.io/articles/20200617/</id>
    <published>2020-06-17T01:20:21.000Z</published>
    <updated>2020-06-23T03:09:41.505Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の第13弾です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG メディアユニットの福谷（ふくや）です。</p><p>お仕事では主にサーバーサイド領域で開発していますが、趣味でiOSアプリを開発しており、春の入門祭りの社内アナウンスがあったので書いてみようと思います。</p><p>iOSアプリで記事や写真などを一覧表示させたい場合、必ずと言っていいほどCollectionView（あるいはTableView）が採用されると思います。</p><p>iPhoneが発売された当初のデザインは、縦にコンテンツが並ぶだけのレイアウトでしたが、昨今はコンテンツの一覧性・視認性をより高めるために、縦にも横にもスクロールできるCollectionViewが一般的になってきています。<br><img src="/images/20200617/1.png" class="img-small-size"></p><h1 id="Compositional-Layouts"><a href="#Compositional-Layouts" class="headerlink" title="Compositional Layouts"></a>Compositional Layouts</h1><p>そこでCompositional Layoutsの登場です。</p><p>Compositional LayoutsはWWDC2019に発表された複雑なレイアウトをシンプルに実装するための考え方です。CollectionViewにおいては<code>UICollectionViewCompositionalLayout</code>クラス<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>を利用します。</p><p>Compositional Layoutsの詳しい解説はWWDC2019の動画<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を見るか、それを元に解説した記事<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>もあるのでそちらを参照してください。また公式サンプルコード<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>もかなり参考になるためおすすめです。</p><p>※公式ではiOS13でサポートされていますが、iOS13以前でも利用可能にするためのライブラリ<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>がでています。</p><h1 id="アプリを作る"><a href="#アプリを作る" class="headerlink" title="アプリを作る"></a>アプリを作る</h1><p>以下のようなFuture Tech Blogリーダーを作ってみようと思います。</p><p>ソース全量は<a href="https://github.com/popai306/FutureTechBlogReader" target="_blank" rel="noopener">こちら</a>。<br>※以降の解説はCompositional Layoutsの実装部分に焦点を当てて解説していきます。</p><img src="/images/20200617/photo_20200617_01.gif" class="img-middle-size" style="border:solid 1px #000000"><h3 id="item・group・sectionの構成を決める"><a href="#item・group・sectionの構成を決める" class="headerlink" title="item・group・sectionの構成を決める"></a>item・group・sectionの構成を決める</h3><p>Compositional Layoutは item・group・section、そしてsectionを内包するlayoutにより構成されます。<br><img src="/images/20200617/2.png" class="img-middle-size"></p><p>今回作るアプリのUIを例に、item・group・sectionをどう構成するかについて示したのが下記の画像です。<br><img src="/images/20200617/3.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>それではLayoutを書いていきましょう。</p><h3 id="Compositional-Layoutで実装する"><a href="#Compositional-Layoutで実装する" class="headerlink" title="Compositional Layoutで実装する"></a>Compositional Layoutで実装する</h3><p>まず大枠のSectionから書いていきます。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createLayout</span><span class="params">()</span></span> -&gt; <span class="type">UICollectionViewLayout</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sectionProvider = &#123; (sectionIndex: <span class="type">Int</span>,</span><br><span class="line">        layoutEnvironment: <span class="type">NSCollectionLayoutEnvironment</span>) -&gt; <span class="type">NSCollectionLayoutSection?</span> <span class="keyword">in</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> section = <span class="type">NSCollectionLayoutSection</span>(group: group)</span><br><span class="line">        section.orthogonalScrollingBehavior = sectionKind.scrollingBehavior()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//①</span></span><br><span class="line">        section.interGroupSpacing = <span class="number">10</span></span><br><span class="line">        <span class="comment">//②</span></span><br><span class="line">        section.contentInsets = <span class="type">NSDirectionalEdgeInsets</span>(top: <span class="number">0</span>, leading: <span class="number">15</span>, bottom: <span class="number">0</span>, trailing: <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// section headerの定義</span></span><br><span class="line">        <span class="keyword">let</span> sectionHeaderSize = <span class="type">NSCollectionLayoutSize</span>(widthDimension: .fractionalWidth(<span class="number">1.0</span>),</span><br><span class="line">                                                       heightDimension: .estimated(<span class="number">44</span>))</span><br><span class="line">        <span class="keyword">let</span> sectionHeader = <span class="type">NSCollectionLayoutBoundarySupplementaryItem</span>(layoutSize: sectionHeaderSize, elementKind: <span class="string">"header"</span>, alignment: .top)</span><br><span class="line">        section.boundarySupplementaryItems = [sectionHeader]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> section</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> config = <span class="type">UICollectionViewCompositionalLayoutConfiguration</span>()</span><br><span class="line">    <span class="comment">//③</span></span><br><span class="line">    config.interSectionSpacing = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> layout = <span class="type">UICollectionViewCompositionalLayout</span>(sectionProvider: sectionProvider, configuration: config)</span><br><span class="line">    <span class="keyword">return</span> layout</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sectionheaderSize</code>の<code>widthDimension</code>に引数として渡している<code>fractionalWidth(1.0)</code>は、sectionの横幅と同じ比率でheaderの横幅を定義することを意味します。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p><p>また、<code>heightDimension</code>に引数として渡している<code>estimated(44)</code>は、44で高さを指定するものの最終的なレイアウトはレンダリング時に決定します（＝「弱い定義」と勝手に呼んでいます）。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><br>ソースコード中の余白定義①②③はそれぞれUI上の下記のポイントに対応しています。<img src="/images/20200617/4.png" class="img-middle-size" style="border:solid 1px #000000"><p>続いてitem・groupのレイアウトを定義していきます。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createLayout</span><span class="params">()</span></span> -&gt; <span class="type">UICollectionViewLayout</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sectionProvider = &#123; (sectionIndex: <span class="type">Int</span>,</span><br><span class="line">        layoutEnvironment: <span class="type">NSCollectionLayoutEnvironment</span>) -&gt; <span class="type">NSCollectionLayoutSection?</span> <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// セクションのenum</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> sectionKind = <span class="type">SectionLayoutKind</span>(rawValue: sectionIndex) <span class="keyword">else</span> &#123; <span class="built_in">fatalError</span>(<span class="string">"unknown section kind"</span>) &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// itemの定義</span></span><br><span class="line">        <span class="keyword">let</span> itemSize = <span class="type">NSCollectionLayoutSize</span>(widthDimension: .fractionalWidth(<span class="number">1.0</span>),</span><br><span class="line">                                              heightDimension: .fractionalHeight(<span class="number">1.0</span>))</span><br><span class="line">        <span class="keyword">let</span> item = <span class="type">NSCollectionLayoutItem</span>(layoutSize: itemSize)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// groupの定義    </span></span><br><span class="line">        <span class="keyword">let</span> groupWidth = layoutEnvironment.container.effectiveContentSize.width - <span class="number">15</span> * <span class="number">2</span> - <span class="number">5</span></span><br><span class="line">        <span class="keyword">let</span> groupSize = <span class="type">NSCollectionLayoutSize</span>(widthDimension: .absolute(groupWidth),</span><br><span class="line">                                               heightDimension: .absolute(<span class="number">150</span>))</span><br><span class="line">        <span class="keyword">let</span> group: <span class="type">NSCollectionLayoutGroup</span></span><br><span class="line">        <span class="keyword">if</span> sectionKind == .recommend &#123;</span><br><span class="line">            group = <span class="type">NSCollectionLayoutGroup</span>.horizontal(layoutSize: groupSize, subitem: item, <span class="built_in">count</span>: <span class="number">2</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            group = <span class="type">NSCollectionLayoutGroup</span>.vertical(layoutSize: groupSize, subitem: item, <span class="built_in">count</span>: <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        group.interItemSpacing = <span class="type">NSCollectionLayoutSpacing</span>.fixed(<span class="number">10</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// sectionの定義</span></span><br><span class="line">        <span class="keyword">let</span> section = <span class="type">NSCollectionLayoutSection</span>(group: group)</span><br><span class="line">        section.orthogonalScrollingBehavior = sectionKind.scrollingBehavior()</span><br><span class="line">        section.interGroupSpacing = <span class="number">10</span></span><br><span class="line">        section.contentInsets = <span class="type">NSDirectionalEdgeInsets</span>(top: <span class="number">0</span>, leading: <span class="number">15</span>, bottom: <span class="number">0</span>, trailing: <span class="number">15</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> sectionHeaderSize = <span class="type">NSCollectionLayoutSize</span>(widthDimension: .fractionalWidth(<span class="number">1.0</span>),</span><br><span class="line">                                                       heightDimension: .estimated(<span class="number">44</span>))</span><br><span class="line">        <span class="keyword">let</span> sectionHeader = <span class="type">NSCollectionLayoutBoundarySupplementaryItem</span>(layoutSize: sectionHeaderSize, elementKind: <span class="string">"header"</span>, alignment: .top)</span><br><span class="line">        section.boundarySupplementaryItems = [sectionHeader]</span><br><span class="line">        <span class="keyword">return</span> section</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> config = <span class="type">UICollectionViewCompositionalLayoutConfiguration</span>()</span><br><span class="line">    config.interSectionSpacing = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> layout = <span class="type">UICollectionViewCompositionalLayout</span>(sectionProvider: sectionProvider, configuration: config)</span><br><span class="line">    <span class="keyword">return</span> layout</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SectionLayoutKind"><a href="#SectionLayoutKind" class="headerlink" title="SectionLayoutKind"></a>SectionLayoutKind</h4><p><code>SectionLayoutKind</code>はアプリ中の<code>おすすめ</code>や<code>春の入門祭り</code>などのセクションをenumで定義したもので、<br>下記の通り定義しています。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SectionLayoutKind</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> recommend, springEntry, goTips, serverless</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollingBehavior</span><span class="params">()</span></span> -&gt; <span class="type">UICollectionLayoutSectionOrthogonalScrollingBehavior</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .recommend:</span><br><span class="line">            <span class="keyword">return</span> .continuous</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> .groupPaging</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もし固定的にセクションを管理するならenumで定義しておくのが良いと思います。</p><p>一方でenumで定義するとenum内でセクションごとのレイアウト情報をいろいろ管理したくなりますが、<code>createLayout()</code>内にもレイアウト定義をしているので、見通しを良くするためにも最低限のレイアウト情報のみenum内で定義すべきだと思います。（この場合水平スクロールの挙動）</p><h4 id="groupのレイアウト定義"><a href="#groupのレイアウト定義" class="headerlink" title="groupのレイアウト定義"></a>groupのレイアウト定義</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> group: <span class="type">NSCollectionLayoutGroup</span></span><br><span class="line"><span class="keyword">if</span> sectionKind == .recommend &#123;</span><br><span class="line">    <span class="comment">// ①おすすめセクションのgroup定義</span></span><br><span class="line">    group = <span class="type">NSCollectionLayoutGroup</span>.horizontal(layoutSize: groupSize, subitem: item, <span class="built_in">count</span>: <span class="number">2</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ②おすすめセクション以外ののgroup定義</span></span><br><span class="line">    group = <span class="type">NSCollectionLayoutGroup</span>.vertical(layoutSize: groupSize, subitem: item, <span class="built_in">count</span>: <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// item間の空白の定義</span></span><br><span class="line">group.interItemSpacing = <span class="type">NSCollectionLayoutSpacing</span>.fixed(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>②おすすめセクション以外ののgroup定義</p><p><code>NSCollectionLayoutGroup.vertical(layoutSize: groupSize, subitem: item, count: 2)</code><br><code>vertical</code>で<code>count</code>を”２”にすることによって垂直にitemを２つスタックしています。</p><p>①おすすめセクションのgroup定義</p><p>おすすめの記事は画像を大きくして目立たせたいので水平にitemを２つスタックしています。<br><code>NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitem: item, count: 2)</code></p><h4 id="groupSizeの定義"><a href="#groupSizeの定義" class="headerlink" title="groupSizeの定義"></a>groupSizeの定義</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> groupWidth = layoutEnvironment.container.effectiveContentSize.width - <span class="number">15</span> * <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> groupSize = <span class="type">NSCollectionLayoutSize</span>(widthDimension: .absolute(groupWidth), heightDimension: .absolute(<span class="number">150</span>))</span><br></pre></td></tr></table></figure><p><code>layoutEnvironment.container.effectiveContentSize</code>はcollectionViewの描画領域を意味しています。今回は対応していませんが、例えばスマホの向きによってアプリのレイアウトを変えたい場合はこの値を使って分岐処理を書けば対応できます。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>以上が今回のアプリのレイアウト部分に関する解説になります。コメントを除いて38行で書けました。</p><p>同じレイアウトをUICollectionViewLayoutのカスタムクラスで実現しようとしたらかなりの行数・難易度になるのではないでしょうか。item・group・sectionの理解さえすれば私のような初学者でも簡易かつシンプルに実装できるので、今後のiOSアプリ開発でどんどん採用されていくのではと思います。</p><p>その際の参考になれば幸いです！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/kishikawakatsumi/IBPCollectionViewCompositionalLayout" target="_blank" rel="noopener">https://github.com/kishikawakatsumi/IBPCollectionViewCompositionalLayout</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://developer.apple.com/videos/play/wwdc2019/215/" target="_blank" rel="noopener">https://developer.apple.com/videos/play/wwdc2019/215/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://qiita.com/shiz/items/a6032543a237bf2e1d19#%E8%83%8C%E6%99%AF%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%99%82%E4%BB%A3%E3%81%AE%E5%A4%89%E5%8C%96" target="_blank" rel="noopener">https://qiita.com/shiz/items/a6032543a237bf2e1d19#%E8%83%8C%E6%99%AF%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%99%82%E4%BB%A3%E3%81%AE%E5%A4%89%E5%8C%96</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://developer.apple.com/documentation/uikit/nscollectionlayoutdimension/3199059-fractionalwidth" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/nscollectionlayoutdimension/3199059-fractionalwidth</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;"><a href="https://developer.apple.com/documentation/uikit/nscollectionlayoutdimension/3199057-estimated" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/nscollectionlayoutdimension/3199057-estimated</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;"><a href="https://developer.apple.com/documentation/uikit/uicollectionviewcompositionallayout" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uicollectionviewcompositionallayout</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;"><a href="https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/using_collection_view_compositional_layouts_and_diffable_data_sources" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/using_collection_view_compositional_layouts_and_diffable_data_sources</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;の第13弾です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="アプリ" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
      <category term="Swift" scheme="https://future-architect.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸#12 レシートで学ぶデータモデリング入門</title>
    <link href="https://future-architect.github.io/articles/20200616/"/>
    <id>https://future-architect.github.io/articles/20200616/</id>
    <published>2020-06-16T01:22:22.000Z</published>
    <updated>2020-06-23T02:58:53.829Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の第12弾です。</p><h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>こんにちは、TIGメディアユニットチームの川島です。</p><p>私は新卒でフューチャーに入社後、基幹系システム刷新PJのDBAからキャリアをスタートしました。その後、小売業の店舗システム刷新PJなど複数のPJで企画フェーズから導入フェーズまで幅広く経験し、現在は、人材サービス企業のクライアントの全社データ活用PJでコンサルティング業務を主として担当しています。</p><p>RDBMSについては論理から物理まで一通り経験していて、データに関わるところは強みがあると思っています。</p><h1 id="記事の背景"><a href="#記事の背景" class="headerlink" title="記事の背景"></a>記事の背景</h1><p>DB設計のデータモデリング入門として、コンビニのレシートを使ったDB設計をやっていきます。</p><p>DB設計はよく物理と論理の両面があると言われますが、今回は論理設計について扱います。</p><p>論理設計の基本はモデリングの技法にあります。モデリングは、設計する人以外必要ないのでは？と思われがちですが、ソフトウェア開発する上でも、または上流フェーズでシステムやサービスの提案をしていく上でも重要なスキルになります。なぜなら、モデリングはその名の通り現実を抽象化して、扱いやすい形式に起こして、他者に伝達する手法だからです。これはITエンジニアやITコンサルタント（ITプロフェッショナル）のコミュニケーションスキルの基本ともいえる部分でもあります。ただし、モデリングというととっつきづらく難しい要素もあるので、特別な道具立てもなく、身近なモノからできる例としてレシートを題材にDB設計することをやっていきたいと思います。具体的に、実務で使える内容ではないですが、ITプロフェッショナルとしての力を鍛える「素振り」と思って、取り組んでいただければ幸いです。</p><p>よりよいテーブルの設計については、今回の入門記事シリーズでも取り扱っています。ぜひそちらも合わせて勉強してみてください。<br><a href="https://future-architect.github.io/articles/20200605/">春の入門祭り 🌸 #05　データベース　テーブル設計入門</a></p><h1 id="記事の対象読者"><a href="#記事の対象読者" class="headerlink" title="記事の対象読者"></a>記事の対象読者</h1><p>対象は、新人エンジニア・ITコンサルタントを想定しています。</p><h1 id="題材"><a href="#題材" class="headerlink" title="題材"></a>題材</h1><p>今回の題材は、某コンビニエンスストアのレシートを使います。</p><p>毎日のように、みなさんが見ているものだと思いますが、このような身近なものにもIT技術が使われており、当然データを格納するDBがあります。DB設計のトレーニングとして身近な帳票（レシートや請求書など、データの印刷されたもの）から、それらを支えるインフラ技術や、プログラムソースコード、DBの設計などを想像することは良い手段です。</p><h2 id="レシート"><a href="#レシート" class="headerlink" title="レシート"></a>レシート</h2><img src="/images/20200616/1.jpg" class="img-middle-size"><h2 id="イベント（出来事）を見つける"><a href="#イベント（出来事）を見つける" class="headerlink" title="イベント（出来事）を見つける"></a>イベント（出来事）を見つける</h2><p>まずは、このレシートが表す主要な「出来事」を見出しましょう。難しく考えず、この紙が表現している行為は何かを考えてみましょう。</p><p>大きく領収書と書かれていますね。</p><p>そうすると、「領収」とか「購入」とかが思い浮かびますが、システムの所有者はコンビニエンスストア側であるので、主語はお店の側とします。すると販売とか売上になりますが、今回は売上にしましょう。</p><img src="/images/20200616/2.png" class="img-small-size"><p>イベント系データは、トランザクションと言われることもあります。企業のビジネスはこのようなトランザクションの連なりと積み重ねで成り立っています。人間の体でいうと、血液のようなものです。</p><h2 id="リソース（資源）を見つける"><a href="#リソース（資源）を見つける" class="headerlink" title="リソース（資源）を見つける"></a>リソース（資源）を見つける</h2><p>次に、売上をあげるにあたって、「誰に」「何を」という部分がないと売上という行為は完結しません。</p><p>6W2Hでもれなくダブりなくデータの種類を書き出してみましょう。（5W1HにWhom、How Muchを加えた6W2Hを使うとよりもれなくダブりなく物事をとらえることができるのでおすすめです）</p><ul><li>Who（誰が）・・販売店、責任者</li><li>When・・販売日時</li><li>What（何を）・・商品</li><li>Whom（誰に）・・会員（顧客）</li><li>Where（どこで）・・レジ</li><li>Why（なぜ）・・とくになし</li><li>How（どのように）・・決済手段</li><li>How Much（いくらで）・・商品価格、消費税、還元ポイント</li></ul><p>全部扱うのは大変なので、 <strong>今回は一部の商品と顧客と価格、消費税について扱います</strong>。他のリソースについてもみなさんもぜひ考えてみてください。</p><p>価格と消費税（率）は商品の一部といえるので、リソースとしてはいったん商品と顧客を書き出します。</p><img src="/images/20200616/3.png" class="img-middle-size"><p>リソース系データは、マスタと言われることもあります。トランザクションが血液なら、マスタは企業のビジネスの骨格をなす部分です。<br>骨格のつくりがおかしいと人間がうまく背が伸びなくなるように、企業のビジネスの成長のボトルネックにもなりかねない部分なのでこの設計は非常に重要です。</p><h2 id="項目を入れる"><a href="#項目を入れる" class="headerlink" title="項目を入れる"></a>項目を入れる</h2><p>データの箱を用意したら、次は項目を入れていきましょう。</p><p>顧客には、コンビニエンスストアからセール情報などを郵送することを想定して、氏名と住所を入れます。<br>商品には、商品名と価格、税率を入れます。売上には、販売数を入れます。商品と顧客も入れるべきですが、のちのち入れていきます。</p><img src="/images/20200616/4.png" class="img-middle-size"><p>税金についてはよくみると、10%対象と8％対象のものがあります。軽減税率制度ですね。</p><p>食料品は8%、それ以外は10%対象になっています。商品マスタ上で、分類があると考えます。消費税は数年後には変わっていくものなので、商品マスタにもっていると変更するのが大変です。なので、税対象カテゴリという新しいテーブルを追加して管理することにしましょう。</p><p>※実用的には、有効期間を設定してある日を過ぎたときから税率が変わるようにすることがあります。ちょうどよい参考文献があるので、末尾に記載します。</p><img src="/images/20200616/5.png"><h2 id="リレーションシップを設定する"><a href="#リレーションシップを設定する" class="headerlink" title="リレーションシップを設定する"></a>リレーションシップを設定する</h2><p>次にテーブル同士の関係性を設定していきます（リレーション）。</p><p>関係性を設定するまえに、各テーブルのデータを一意に表すPK（主キー）を設定します。<br>PKとして空欄にしていた部分に、IDを設定します。</p><p>この主キーに特定の項目を設定し意味をもたせると、その意味が変わったときに他のテーブルとのリレーションが変わってしまいます。そのため、機械的に○○IDもしくは○○コードなどと設定するのが妥当です。具体的には、商品マスタにおいて、商品名はそのデータを一意に表すと自然に考えられます（ナチュラルキー）が、あえて代理のキー（サロゲートキー）を設定して、意味に依存しない形にします。</p><img src="/images/20200616/6.png"><p>そして、各テーブルを関連付ける、FK（外部キー）を設定することでリレーションシップはいったん完成です。<br><img src="/images/20200616/7.png"></p><h2 id="点検する"><a href="#点検する" class="headerlink" title="点検する"></a>点検する</h2><p>作成したモデルが現実をきちんと表現しているか点検をしましょう。出来上がったテーブルとリレーション（ERD)を見て、最初のレシートに立ち戻ってみましょう。</p><p>すると、このERDでは1つの売上で1種類の商品、1人の顧客しか扱えないことがわかります。1売上1顧客は良いとして、1売上で複数の商品があるのは自然なので、修正して売上テーブルを分割することを考えます。<br>売上明細というテーブルを作成します。</p><img src="/images/20200616/8.png"><p>（注）FKが一部間違っていたので修正しました 6/16</p><p>今回は省きますが、加えて以下もやってみると理解が深まるでしょう。</p><ul><li>DDL（CREATE TABLE）を書いてテーブルをRDB（PostgreSQL,MySQL,Oracleなど）上に作成してみる</li><li>テーブルに実データを入れてみる（事前にExcelなどで表を書いてみるのをおすすめします）</li><li>SQLを書いて実行してみる</li></ul><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>データモデルのポイントは以下のとおりです。</p><ul><li>イベントを見つける</li><li>リソースを見つける（6W2Hでもれなくダブりなく）</li><li>項目を入れる</li><li>リレーションシップを設定する</li><li>点検する（モデルが現実を表現しているか）</li></ul><p>今回はITプロフェッショナルとしての「素振りの仕方」をご紹介しました。<br>日頃、目にするデータから設計をする練習をして、本番の仕事のため（試合）に備えましょう。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.amazon.co.jp/dp/4798110663" target="_blank" rel="noopener">楽々ERDレッスン (CodeZine BOOKS) (株)スターロジック 羽生 章洋 著</a><br>レシート（帳票）からERDをつくるというアイデアはここからもらっています。DB設計の基本が書かれている良書です。</p><p><a href="https://sikushima.hatenablog.com/entry/2020/06/09/113306" target="_blank" rel="noopener">SQLで消費税の計算</a><br>マスタへの有効期間の設定・SQLの書き方など、実用的な内容が詳細に書かれています。もう一歩踏み込みたい人は読んでみてください。</p><p><a href="https://www.amazon.co.jp/dp/B07TPYY3K1" target="_blank" rel="noopener">業務システムのための上流工程入門 渡辺幸三 著</a><br>DB設計はお客さんとあるべきシステムのイメージの合意をとりながら進めていくものです。データ指向設計の手法が、ロールプレイング形式で具体的に書かれています。上流工程に興味のある人は読んでみてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;の第12弾です。&lt;/p&gt;
&lt;h1 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="DataModel" scheme="https://future-architect.github.io/tags/DataModel/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #11 Kaggle入門</title>
    <link href="https://future-architect.github.io/articles/20200615/"/>
    <id>https://future-architect.github.io/articles/20200615/</id>
    <published>2020-06-15T01:48:52.000Z</published>
    <updated>2020-06-23T06:04:21.221Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の第11弾です</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIGの伊藤真彦です、<a href="https://future-architect.github.io/articles/20200612/">第10弾</a>に続いての投稿です。</p><p>フューチャーではAI教育・認定のオリジナルプログラム<a href="https://prtimes.jp/main/html/rd/p/000000363.000004374.html" target="_blank" rel="noopener">Future AI Certification</a>が実施されています。私も入社早々に本プログラムでGoogle Colaboratoryを用いてノートブック形式でのドキュメントを作成、実行する形での学習しました。入社以前からAI関連の技術に興味を持っており、AWSの機械学習認定資格に合格するなど勉強していたので、とても嬉しかったです。</p><p>このFuture AI Certificationプログラムで学習した勢いで、この度<a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a>にチャレンジしてみました。</p><h2 id="この記事の内容"><a href="#この記事の内容" class="headerlink" title="この記事の内容"></a>この記事の内容</h2><p>実際にKaggleに挑戦する上で自分が知りたかったこと、やってみたことを書いていきます。</p><h2 id="kaggleとは"><a href="#kaggleとは" class="headerlink" title="kaggleとは"></a>kaggleとは</h2><img src="/images/20200615/photo_20200615_01.png"><blockquote><p>Kaggleは企業や研究者がデータを投稿し、世界中の統計家やデータ分析家がその最適モデルを競い合う、予測モデリング及び分析手法関連プラットフォーム及びその運営会社である。<br>– <a href="https://ja.wikipedia.org/wiki/Kaggle" target="_blank" rel="noopener">wikipedia</a>より</p></blockquote><p>Kaggleは機械学習のモデルを作成・共有し、その機械学習モデルの精度を競い合うプラットフォームです。環境構築不要で機械学習を学習できるだけでなく、賞金付きのコンペティションで上級者が鎬を削り合うような場所でもあります。</p><p>まずは<a href="https://www.kaggle.com/account/login" target="_blank" rel="noopener">アカウント登録</a>が第一歩です。</p><h2 id="タイタニック問題に挑む"><a href="#タイタニック問題に挑む" class="headerlink" title="タイタニック問題に挑む"></a>タイタニック問題に挑む</h2><img src="/images/20200615/2.jpg"><p>アカウントを登録したら次に何をするか？</p><p>いきなり賞金つきコンペティションに突撃する事も可能ですが、初心者向けの学習用コンテンツがあるので、まずそれに参加して流れを掴んでいきます。</p><p>定番の問題として「タイタニック問題」と呼ばれている問題があります。「タイタニック」とは1912年に沈没した豪華客船のタイタニック号のことです。映画にもなったのでご存じですよね、と言いたいところですが映画の初公開は１９９７年、そろそろ映画を見た事がない人が入社しても不思議ではないですね。</p><p>タイタニックと機械学習のどこに接点があるかと言うと、Kaggleではタイタニック号の乗客の年齢、性別、客室番号などの各種データと、生存、死亡のデータがcsvファイルにまとめられています。このcsvから学習して、各種データから乗客の生存・死亡を推論する機械学習モデルを作成する事が初心者向けの課題として用意されています。</p><p>アカウントを登録したら、タイタニック問題に挑戦するのが定番の流れです。</p><h2 id="実際の作業"><a href="#実際の作業" class="headerlink" title="実際の作業"></a>実際の作業</h2><p>コンペティションに参加登録をしたら、実際に機械学習モデルを作成していきます。</p><p>とはいえ機械学習のことはよくわからないし、何をどうしたら課題を達成できるのか…と、初心者の方は思うのではないでしょうか。</p><p>Kaggleでは他の参加者のノートブック形式での成果物が公開されているので、極論公開されているコードを写していくだけで課題の提出が可能です。</p><img src="/images/20200615/3.jpg" style="border:solid 1px #000000"><p>最初は写経のような形で公開されているソースコードを読み解いていくと良いと思います。</p><h2 id="学習のために"><a href="#学習のために" class="headerlink" title="学習のために"></a>学習のために</h2><p>機械学習のモデル作成では、以下の流れでソースコードを記述していきます。(csvデータを読み込んで推論を行う、いわゆるテーブルコンペと呼ばれる形式の話で、例えば画像を取り扱うような問題では違った流れになります)</p><ol><li>csvデータを読み込む</li><li>データの欠損値を補完する、機械学習モデルが読み込める形にデータを変換する。</li><li>整理したデータで機械学習モデルを学習させる。</li><li>作成したモデルでテストデータを推論、提出用のデータを生成、保存する</li></ol><p>公開されているソースコードは、ランキングの上位に食い込むためにさまざまな工夫が行われています。また、データエンジニアリングの内容や根拠を説明するためにデータをグラフとして表現するコードも各々のスタイルで記載されています。いきなりこれら工夫満載の成果物を見ても理解が難しいと思います。</p><p>私は「<a href="https://www.kspub.co.jp/book/detail/5190067.html" target="_blank" rel="noopener">PythonではじめるKaggleスタートブック</a>」という書籍を購入しました。</p><p>この記事の結論はオススメ書籍の紹介になります。この本ではタイタニック問題を回答できるようになることが目的の一つとなっており、実際にタイタニック問題に対して提出可能なソースコードが、最低限の素朴な実装の段階から、精度を上げていくための工夫まで、Python初心者レベルの人でもわかるよう一行ずつ丁寧に説明されています。</p><p>この本のおかげで学習がかなり楽になりました。こういう知識はやはり書籍の形式で体系的に学ぶのが楽ですね。あとKaggleは基本的に英語なので…ただでさえ難しいものを英語で学習するのは辛いものがあります。日本語で学べる教材という意味でも良かったです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ol><li>まずはアカウントを登録しよう</li><li>タイタニック問題にチャレンジ</li><li>公開されているコードから学んでいこう</li><li>効率よく学ぶためには本を買うのがおススメ</li></ol><p>といったお話でした。</p><p>きちんと理解しようとすると一問に費やす時間が数日単位でかかり、結構大変なのですが、Kaggleを通して機械学習の流れが具体的にわかるようになってきました。</p><p>Kaggleは無料でできるので、ぜひ挑戦してみてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;の第11弾です&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Kaggle" scheme="https://future-architect.github.io/tags/Kaggle/"/>
    
  </entry>
  
  <entry>
    <title>フューチャーの新人研修後の配属先にかける新人の思いを歌ってみた</title>
    <link href="https://future-architect.github.io/articles/20200613/"/>
    <id>https://future-architect.github.io/articles/20200613/</id>
    <published>2020-06-13T05:20:17.000Z</published>
    <updated>2020-06-17T05:39:28.868Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200613/top.png" class="img-middle-size"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャー株式会社の井上拓です。</p><p>Strategic AI Groupというチームで、AIをはじめとするテクノロジーを核としながら、時にお客様と、時に自社主体で、新しいビジネスをデザインする活動に取り組んでいます。</p><p>６月、関東も梅雨入りし、IT企業各社で研修修了した新人たちが現場に配属される時期ではないでしょうか。私の所属するフューチャー株式会社でも修了・配属に向けたお知らせがあり、フレッシュなパワーへの期待に胸を寄せています。</p><p>フューチャーの新人研修は<a href="https://note.future.co.jp/n/nc3982a6a127f" target="_blank" rel="noopener">未来報で公開</a>されているように、<strong>人間嫌い</strong>の現場のITコンサルタントが研修リーダーになったり、実力次第で早期卒業ができたり、2020年はフルリモートだったりと、毎回の試行錯誤と改善を繰り返して行われています。</p><p>特徴的なのは、<strong>年に複数回の入社タイミング</strong> があることでしょうか。春入社に比べて夏・秋入社は個性（クセ）が強いという非科学的な迷信が社内にあったりします。<strong>不思議</strong> ですね。</p><h1 id="“配属”というドラマ"><a href="#“配属”というドラマ" class="headerlink" title="“配属”というドラマ"></a>“配属”というドラマ</h1><p>新人研修で特にドラマが生まれる出来事は <strong>配属（プロジェクトアサイン）</strong> でしょう。</p><p>新人にとっても一番気になる配属先。フューチャーには様々な部署やプロジェクトがあります。大規模/小規模、ビジネス寄り/テクノロジー寄り、といったとても白黒ハッキリした情報をもとに、どこどこのチームに行きたいと新人自ら希望をあげ、配属候補先のリーダが受け入れを検討したりします。先輩社員からすると、配属先はあくまでスタート位置に過ぎず、そこからいくらでも志向・関心は変化するし、成長すると考えています。しかし、新人さんからすると死活問題。中にはダイレクトに配属先のリーダーにアポイントメントを取ってヒューマンハックする技巧派な方もいます。</p><p>つい先日、配属を控えた <strong>とある新人エンジニアの強い思い</strong> に心を動かされ、私が新人だった10年以上前のことを振り返り、<strong>配属にかける思いをオリジナルソングにしてみました</strong> 。すべてのIT企業で、どこか共感できるポイントがあるのではないかと考え、こちらで公開させていただくことにしました。</p><p>いつか新人だった、エンジニアの皆さんに聞いていただければ幸いです。</p><h1 id="「配属前夜」-歌"><a href="#「配属前夜」-歌" class="headerlink" title="「配属前夜」- 歌"></a>「配属前夜」- 歌</h1><iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/839551090&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true"></iframe><div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"><a href="https://soundcloud.com/nukkq649asbw" title="拓" target="_blank" style="color: #cccccc; text-decoration: none;">拓</a> · <a href="https://soundcloud.com/nukkq649asbw/bpcyfoujejjf" title="配属前夜" target="_blank" style="color: #cccccc; text-decoration: none;">配属前夜</a></div><p><a href="https://soundcloud.com/nukkq649asbw/bpcyfoujejjf" target="_blank" rel="noopener">配属前夜</a> ※SoundCloudリンク</p><h1 id="「配属前夜」-歌詞"><a href="#「配属前夜」-歌詞" class="headerlink" title="「配属前夜」- 歌詞"></a>「配属前夜」- 歌詞</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">二者択一が僕らの全部だった</span><br><span class="line">大規模か小規模か 業務か技術か</span><br><span class="line">こだわり屋の同期は 右左 白黒はっきりしてた</span><br><span class="line">「市場価値がすべてだ」と</span><br><span class="line"></span><br><span class="line">新人研修が終わり</span><br><span class="line">配属先が伝えられる</span><br><span class="line">どこに選ばれるかで</span><br><span class="line">人生決まると本気で信じてた</span><br><span class="line"></span><br><span class="line">配属前夜にメモった</span><br><span class="line">「やりたくないな」リストは</span><br><span class="line">その後マルがついていくたびに</span><br><span class="line">できることが増えてった</span><br><span class="line"></span><br><span class="line">配属前夜によぎった</span><br><span class="line">「いきたくない」ポジションで</span><br><span class="line">出会った人たちに いまも</span><br><span class="line">助けられてここにいる</span><br><span class="line"></span><br><span class="line">目新しさばかり求める</span><br><span class="line">未熟さに気づかされたのは</span><br><span class="line">この手で書いたソースコードが</span><br><span class="line">社会を支え始めた瞬間だった</span><br><span class="line"></span><br><span class="line">配属前夜にメモった</span><br><span class="line">「必須技術！」のリストは</span><br><span class="line">一年も立たないうちに</span><br><span class="line">時代遅れになってた</span><br><span class="line"></span><br><span class="line">配属前夜にもらった</span><br><span class="line">「役に立つコマンド」は</span><br><span class="line">一年も立たないうちに</span><br><span class="line">そらで打つようになってた</span><br><span class="line"></span><br><span class="line">配属前夜に感じた</span><br><span class="line">開発の面白さは</span><br><span class="line">散々な目にあった今でも</span><br><span class="line">やっぱり感じてる</span><br><span class="line"></span><br><span class="line">配属前夜に誓った</span><br><span class="line">「なしとげたいこと」はまだ</span><br><span class="line">10年たったいまでも</span><br><span class="line">変わらないでここにある</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>どこに配属されたとしても、テクノロジーを楽しむことで必ず成長して、やりたいことができるようになる。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200613/top.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="応援歌" scheme="https://future-architect.github.io/tags/%E5%BF%9C%E6%8F%B4%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #10 denoに触れてみよう</title>
    <link href="https://future-architect.github.io/articles/20200612/"/>
    <id>https://future-architect.github.io/articles/20200612/</id>
    <published>2020-06-12T03:06:07.000Z</published>
    <updated>2020-06-12T03:14:09.742Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>🌸の第10弾です</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>6月よりTIGに入社した伊藤真彦です。入社時点ですでに春の入門祭りは始まっていたのですが、この度飛び入り参加で技術ブログを書かせていただける運びとなりました。</p><p>さて、初投稿として選んだテーマはdenoです。deno1.0のリリースからしばらくたちましたが、転職の合間に触って遊ぶことができましたので、体験記として紹介させていただきます。</p><h2 id="この記事の内容"><a href="#この記事の内容" class="headerlink" title="この記事の内容"></a>この記事の内容</h2><p>ただdenoをインストールして、hello worldのサンプルを動かすだけでは今から掲載するものとしては面白みに欠けるので、</p><p><strong>1. docker上にインストールする</strong><br><strong>2. HTMLファイルを読みこんでレンダリングする</strong></p><p>をゴールとします。</p><h2 id="ファイルを用意しよう"><a href="#ファイルを用意しよう" class="headerlink" title="ファイルを用意しよう"></a>ファイルを用意しよう</h2><p>今回必要なファイルは4種類です。</p><ol><li><strong>Dockerfile</strong></li><li><strong>docker-compose.yml</strong></li><li><strong>main.ts</strong></li><li><strong>hello.html</strong></li></ol><p>手始めに<code>Dockerfile</code>と<code>docker-compose.yml</code>を用意します、ubuntuに突っ込む形をとりました。<br>コンテナ向きなミニマムなOSにしても良かったかもしれないです。<br>deno公式dockerイメージを作ろうぜ、みたいなissueを見た覚えがあるので、<code>FROM deno</code>とか1行書けば終わる日が来ることに期待します。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="comment"># deno導入シェルの実行&amp;必要なライブラリをインストール、インストール完了後に削除</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -qq update &amp;&amp; apt-get -qq -y install curl zip unzip \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -fsSL https://deno.land/x/install/install.sh | sh \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apt-get remove curl zip unzip</span></span><br><span class="line"><span class="comment"># pathを通す</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'export DENO_INSTALL="/root/.deno"'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'export PATH="$DENO_INSTALL/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">vendor:</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">bash</span> <span class="string">-c</span> <span class="string">"source ~/.bash_profile &amp;&amp; deno run --allow-net --allow-read app/main.ts"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8000:8000"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/app</span></span><br></pre></td></tr></table></figure><p>執筆時点ではdenoは公式に記載の方法でインストールした後に手動でパスを通す必要があるので、その辺の作業をコンテナのビルド&amp;起動時に行うのがミソです。<br>単にインストールを行うシェルを実行しただけではパスが通らずdenoコマンドが使えるようになりませんので注意。<br>(docker-composeの環境変数に書いてみるとかいろいろ試しつつ、うまく動くものをフィーリングで書いています、もう少しスマートな方法があるかもしれません)</p><p>denoコマンドのオプションはそれぞれ以下の意味です。<br><code>--allow-net:</code> サーバーとして動かす上で通信を許可するオプション<br><code>--allow-read:</code> HTMLファイルをdenoに探してもらう権限を与えるオプション</p><p>続いてサーバーを立ち上げるメインのTypeScriptと読みこみを行うHTMLを作成します。<br>メインのスクリプトはjsにちょっと型定義を付け足しただけの素朴なTypeScriptです。<br>ちなみにフューチャーには<a href="https://future-architect.github.io/typescript-guide/">TypeScriptに関する公式ガイド</a>があります、ぜひ確認してみてください。</p><p>今回はstdライブラリの<code>readFileStr</code>でHTMLファイルを読んでみました。<br>正直この方法が正解か、他に方法があるのか自信がありませんが、そのうちフロントエンドライブラリが導入されて根本から使い方が変わっていくと思います、自由にやっていきましょう。</p><figure class="highlight ts"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serve &#125; <span class="keyword">from</span> <span class="string">"https://deno.land/std@0.50.0/http/server.ts"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; readFileStr &#125; <span class="keyword">from</span> <span class="string">'https://deno.land/std@0.53.0/fs/read_file_str.ts'</span>;</span><br><span class="line"><span class="keyword">const</span> s: <span class="built_in">any</span> = serve(&#123; port: <span class="number">8000</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> template: <span class="built_in">string</span> = <span class="keyword">await</span> readFileStr(<span class="string">"app/html/hello.html"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"server starting on http://localhost:8000/\nCtrl-C to shutdown container"</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> req of s) &#123;</span><br><span class="line">  req.respond(&#123; body: template &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTMLもとてもシンプルですが、style要素が正常に動くかを見てみたかったので文字色を赤くしてみます。</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"message"</span>&gt;</span>Hello Deno with Html<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.message</span>&#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上記4つのファイルを下記の構成で配置します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HelloDeno(好きなフォルダ名)</span><br><span class="line">├ app</span><br><span class="line">│ ├ html</span><br><span class="line">│ │ └ hello.html</span><br><span class="line">│ └ main.ts</span><br><span class="line">├ Dockerfile</span><br><span class="line">└ docker-compose.yml</span><br></pre></td></tr></table></figure><p>HTMLはpublic配下に置くべし、という意見もあるかもしれません。<br>今回は前職でお世話になったRuby On Railsの設計思想を引きずっており、MVCに属するものはapp配下に設置しました。<br>気が向いたらhtmlディレクトリの配下に複数のファイルを配置して拡張していくつもりで、このような構成になっています。<br><code>main.tsの</code>HTML読み込み処理のパスを書き換えるだけで自由な構成にできるので、お好きなようにカスタマイズしてみてください。</p><h2 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h2><p>必要なファイルを準備できたら <code>docker-compose up</code> で起動します<br><img src="/images/20200612/photo_20200612_01.png"></p><p>ライブラリのダウンロード、コンパイルを経てサーバーが立ち上がります。<br><code>console.log(&quot;server starting on http://localhost:8000/\nCtrl-C to shutdown container&quot;);</code><br>で書いた内容がコンパイルが完了し、動いたタイミングで吐き出されています。<br>書かなくても動きますが、何かログ出力しておいた方が正常に動いているのか判定しやすいです。</p><p>無事に起動出来たらブラウザで<code>localhost:8000</code>にアクセスしましょう。<br>HTMLの内容が正常に表示されました!</p><img src="/images/20200612/photo_20200612_02.png"  style="border:solid 1px #000000" ><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>現状テンプレやお作法がそれほど世の中に出回っていないので、<a href="https://deno.land/" target="_blank" rel="noopener">deno公式</a>から使えそうなAPIやライブラリを探索しながら模索してみました。</p><p>HTMLファイルを取得して表示させることすら手探りな感じが黎明期を感じさせます。もう少し情報を漁ってベストな方法を探したり、フレームワークが誕生or参入してきたらこの記事に書いている手法は無意味になりそうですが、取り敢えず触ってみましたよ、以上、というお話なのでその辺はご容赦ください。</p><p>今後の発展が楽しみですね。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="/articles/20200512/">日本製HeadlessCMSのmicroCMSを触ってみた</a></li><li><a href="/articles/20200511/">PJでUIデザインにAtomic Designを導入したらどうだったのか</a></li><li><a href="/articles/20200501/">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;🌸の第10弾です&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="deno" scheme="https://future-architect.github.io/tags/deno/"/>
    
      <category term="Node.js" scheme="https://future-architect.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #9 Grep, Git grepの便利オプション</title>
    <link href="https://future-architect.github.io/articles/20200611/"/>
    <id>https://future-architect.github.io/articles/20200611/</id>
    <published>2020-06-11T00:53:08.000Z</published>
    <updated>2020-06-23T04:27:17.636Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200611/top.png"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGメディアユニット岸本卓也です。普段の業務ではアプリ領域を担当しており、JavaやJSと戯れつつ日々を過ごしています。</p><p>私は最近プロジェクトが変わり、キャッチアップを進めています。その中でソースコードを検索するために、IDEの検索機能以外に <code>grep</code> や <code>git grep</code> を使いました。そこでよく使った・または便利だったオプションを紹介します。</p><p>なお、Windowsでは初期状態ではgrepコマンドがありませんが、インストールする方法はいくつかあります。gitを使うためにインストールするGit for WindowsのGit Bashでもgrepコマンドが使えますので、Windowsユーザーの方はお試しください。</p><h1 id="grepの基本"><a href="#grepの基本" class="headerlink" title="grepの基本"></a>grepの基本</h1><p>grepは指定された検索パターンに一致する部分を検索するコマンドラインプログラムです。次の形式で実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド実行形式</span></span><br><span class="line">grep [オプション...] [検索パターン] [検索対象のファイル...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: sample.txtファイルの中からFutureという文字列を含む行を検索する。</span></span><br><span class="line">grep <span class="string">'Future'</span> sample.txt</span><br></pre></td></tr></table></figure><p>このように検索パターン (≒検索したい文字列) と検索対象のファイルを指定して実行すると、検索パターンにマッチする行がコンソールに出力されます。</p><p>検索対象のファイルが複数ある場合は、次のようにファイルを列挙します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: 複数のファイルを対象に検索する。</span></span><br><span class="line">grep <span class="string">'Future'</span> sample.txt sample2.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: ワイルドカードで複数ファイルを指定する。</span></span><br><span class="line">grep <span class="string">'Future'</span> *</span><br></pre></td></tr></table></figure><h1 id="検索パターン"><a href="#検索パターン" class="headerlink" title="検索パターン"></a>検索パターン</h1><p>grepの検索パターンには正規表現を使うことができ、正規表現を使うことで非常に強力な検索ができます。正規表現は検索パターンを表現する特殊な文字列で、ワイルドカードのようなものです。</p><p>正規表現には普通の文字とメタ文字 (=特別な意味を持つ文字) があるので、ここではメタ文字の内よく使うものを紹介します。よく使う順に記載します。</p><ul><li>任意の1文字: <code>.</code> (ドット)</li><li>量指定子: その直前の文字が何回繰り返すかを指定します。<ul><li>0回以上: <code>*</code></li><li>1回以上: <code>+</code></li><li>0回または1回: <code>?</code></li><li>n回: <code>{n}</code></li></ul></li><li>アンカー: 行頭または行末にマッチします。<ul><li>行頭: <code>^</code></li><li>行末: <code>$</code></li></ul></li><li>エスケープ: <code>\</code> メタ文字を普通の文字として指定したい場合にメタ文字の直前に指定します。</li><li>ブラケット式: <code>[]</code> []で囲んだ中に指定した文字のいずれか1文字を表します。文字を列挙する以外に <code>-</code> (ハイフン) を使った範囲指定も可能です。</li><li>部分式 (グループ)、後方参照<ul><li>部分式 (グループ): <code>()</code> 正規表現の一部を <code>(</code> と <code>)</code> で囲むと部分式 (グループ) を定義できます。</li><li>後方参照: <code>\n</code> (grepの場合、nは1～9までの数字) <code>n</code> 番目の部分式にマッチした文字列と同じ文字列にマッチします。</li></ul></li><li>単語の境界: 単語の境界にマッチします。<ul><li>単語の境界: <code>\b</code></li><li>単語の始まり: <code>\&lt;</code></li><li>単語の終わり: <code>\&gt;</code></li></ul></li></ul><p>これらのメタ文字のいくつかを使った正規表現の例は次のとおりです。</p><ul><li><code>Hack.+Future</code>: <code>Hack</code> という文字列に続いて任意の文字が1個以上あり、それに続いて <code>Future</code> という文字列がある部分にマッチします。例えば <code>Hack to the Future</code> にマッチします。</li><li><code>BT{2}F</code>: <code>BTTF</code> という文字列にマッチします。</li><li><code>Future$</code>: 行末の <code>Future</code> という文字列にマッチします。</li><li><code>[0-9]{4}</code>: 任意の数字が4個続く部分にマッチします。例えば <code>1989</code> にマッチします。</li><li><code>Dr\. [a-zA-Z]+</code>: <code>Dr.</code> という文字列に続いてアルファベットが1文字以上続く部分にマッチします。例えば <code>Dr. Emmett</code> にマッチします。</li><li><code>(\&lt;[bB]uffalo\&gt; ?){8}</code>: <code>buffalo</code> という単語が8回続く文字列にマッチします。例えば <code>Buffalo buffalo Buffalo buffalo buffalo buffalo Buffalo buffalo</code> にマッチします。</li></ul><p>正規表現はgrepに限らずエディタやプログラミング言語など様々な場所で使うことができますが、正規表現の細かな仕様は実装によって結構異なります。したがって、正規表現の詳細は各実装のドキュメントを参照する必要があります。</p><ul><li>Grepの正規表現: <a href="https://www.gnu.org/software/grep/manual/grep.html#Regular-Expressions" target="_blank" rel="noopener">GNU grep manual: 3 Regular Expressions</a><br>Grepの基本正規表現 (BRE)、拡張正規表現 (ERE) はこちらが参考になります。</li><li>Perlの正規表現: <a href="http://perldoc.jp/docs/perl/5.18.1/perlre.pod" target="_blank" rel="noopener">perlre - Perl の正規表現 - perldoc.jp</a><br>grepは <code>-P</code> オプションでPerl互換正規表現 (PCRE) を使うことができますが、その詳細は上記には記載されていません。PCREはこちらが参考になります。</li><li>Javaの正規表現: <a href="https://docs.oracle.com/javase/jp/11/docs/api/java.base/java/util/regex/Pattern.html" target="_blank" rel="noopener">Pattern (Java SE 11 &amp; JDK 11 )</a><br>grepとは関係ありませんが、正規表現のバリエーションの一例です。</li><li>Vimの正規表現: <a href="https://vim-jp.org/vimdoc-ja/pattern.html#pattern-overview" target="_blank" rel="noopener">pattern - Vim日本語ドキュメント</a><br>grepとは関係ありませんが、正規表現のバリエーションの一例です。</li></ul><h1 id="よく使うオプション"><a href="#よく使うオプション" class="headerlink" title="よく使うオプション"></a>よく使うオプション</h1><p>grepには様々なオプションがあり、オプションを指定することで検索動作を変えることができます。ここではそのオプションの内よく使うものを紹介します。よく使う順に記載します。</p><h2 id="大文字-小文字の違いを無視-i"><a href="#大文字-小文字の違いを無視-i" class="headerlink" title="大文字/小文字の違いを無視: -i"></a>大文字/小文字の違いを無視: <code>-i</code></h2><p>grepはデフォルトでは大文字/小文字も含めて厳密に一致する文字を検索するため、検索パターン <code>future</code> は文字列 <code>Future</code> にマッチしません。 <code>-i</code> を指定すると大文字/小文字の違いを無視して検索するため、 <code>Future</code> にもマッチします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: futureにマッチするが、Futureにはマッチしない。</span></span><br><span class="line">grep <span class="string">'future'</span> sample.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: future, Futureどちらにもマッチする。</span></span><br><span class="line">grep -i <span class="string">'future'</span> sample.txt</span><br></pre></td></tr></table></figure><p>大文字/小文字の違いを無視して広めに検索したい時によく使います。</p><h2 id="フォルダを再帰的に検索-r"><a href="#フォルダを再帰的に検索-r" class="headerlink" title="フォルダを再帰的に検索: -r"></a>フォルダを再帰的に検索: <code>-r</code></h2><p>前述の通り、検索対象ファイルは複数列挙できますが、フォルダ階層が切られたソースを検索する場合にファイルを1個ずつ指定するのは面倒です。そのような場合に <code>-r</code> オプションとともに検索対象ファイルではなくフォルダを指定すると、指定されたフォルダに存在するファイルと、サブフォルダがあればその中に存在するファイルも再帰的に検索します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: some_dirフォルダから再帰的に、配下に存在するファイルを対象に検索する。</span></span><br><span class="line">grep -r <span class="string">'Future'</span> some_dir/</span><br></pre></td></tr></table></figure><p>なお、フォルダ指定を省略するとカレントディレクトリから検索するため、私はよく <code>grep -ir &#39;future&#39;</code> といった形で使います。</p><h2 id="特定のファイルだけ検索-include"><a href="#特定のファイルだけ検索-include" class="headerlink" title="特定のファイルだけ検索: --include"></a>特定のファイルだけ検索: <code>--include</code></h2><p>フォルダ指定で検索する場合は指定したフォルダ配下のすべてのファイルが検索されますが、これを限定したいことがあります。そのような場合に  <code>--include</code> オプションで検索対象とするファイル名の条件を指定できます。ファイル名の条件にはglobパターンを使えます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: some_dirフォルダから再帰的に、配下に存在する拡張子.vueのファイルを対象に検索する。</span></span><br><span class="line">grep -r --include=<span class="string">'*.vue'</span> <span class="string">'Future'</span> some_dir/</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: 検索対象にしたいファイル名の条件が複数ある場合はオプションを複数回指定する。</span></span><br><span class="line">grep -r --include=<span class="string">'*.vue'</span> --include=<span class="string">'*.js'</span> <span class="string">'Future'</span> some_dir/</span><br></pre></td></tr></table></figure><h2 id="特定のファイル-フォルダを除外-exclude-exclude-dir"><a href="#特定のファイル-フォルダを除外-exclude-exclude-dir" class="headerlink" title="特定のファイル/フォルダを除外: --exclude, --exclude-dir"></a>特定のファイル/フォルダを除外: <code>--exclude</code>, <code>--exclude-dir</code></h2><p>上記とは逆に、検索対象から除外するファイルを指定することもできます。除外するファイル名は <code>--exclude</code> オプション、フォルダ単位で除外するには <code>--exclude-dir</code> オプションで条件を指定でき、どちらもglobパターンを使えます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: some_dirフォルダから再帰的に、配下に存在する拡張子.log以外のファイルを対象に検索する。</span></span><br><span class="line">grep -r --exclude=<span class="string">'*.log'</span> <span class="string">'Future'</span> some_dir/</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: some_dirフォルダから再帰的に、logフォルダ以外の配下に存在するファイルを対象に検索する。</span></span><br><span class="line">grep -r --exclude-dir=<span class="string">'log'</span> <span class="string">'Future'</span> some_dir/</span><br></pre></td></tr></table></figure><h2 id="拡張正規表現を使う-E"><a href="#拡張正規表現を使う-E" class="headerlink" title="拡張正規表現を使う: -E"></a>拡張正規表現を使う: <code>-E</code></h2><p>grepの検索パターンはデフォルトでは基本正規表現 (BRE) として解釈されます。BREでは <code>?</code>, <code>+</code>, <code>{</code>, <code>|</code>, <code>(</code>, <code>)</code> の文字はメタ文字ではなく普通の文字です。BREでこれらをメタ文字として機能させるには <code>\?</code>, <code>\+</code>, <code>\{</code>, <code>\|</code>, <code>\(</code>, <code>\)</code> と指定する必要があります<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p>一方、拡張正規表現 (ERE) ではこれらの文字は単体でメタ文字として機能します。したがって、検索パターンによってEREにした方がスッキリ書ける場合は <code>-E</code> オプションを指定することで検索パターンをEREとして解釈させることができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: BRE</span></span><br><span class="line">grep <span class="string">'[0-9]\&#123;4\&#125;'</span> sample.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: ERE</span></span><br><span class="line">grep -E <span class="string">'[0-9]&#123;4&#125;'</span> sample.txt</span><br></pre></td></tr></table></figure><p> マッチした周辺行も出力: <code>-A num</code>, <code>-B num</code>, <code>-num</code> (<code>-C num</code>)</p><p>検索パターンがどのような状況で使われているか、知りたいことがあります。そのような場合に、マッチした行に加えてその周辺の行を出力するオプションがあります。</p><ul><li>マッチした行の後 num 行も出力: <code>-A num</code></li><li>マッチした行の前 num 行も出力: <code>-B num</code></li><li>マッチした行の前後 num 行も出力: <code>-num</code> (<code>-C num</code>)</li></ul><h2 id="行番号を出力-n"><a href="#行番号を出力-n" class="headerlink" title="行番号を出力: -n"></a>行番号を出力: <code>-n</code></h2><p>行番号が必要であれば <code>-n</code> オプションでマッチした行の行番号を出力できます。</p><h2 id="ファイル名を出力しない-h"><a href="#ファイル名を出力しない-h" class="headerlink" title="ファイル名を出力しない: -h"></a>ファイル名を出力しない: <code>-h</code></h2><p>検索対象のファイルが複数ある場合、デフォルトでは検索結果にファイル名が出力されます。単一ファイルの検索時同様にファイル名なしの出力にするには <code>-h</code> オプションを指定します。</p><p>検索結果をパイプで繋いで処理したい場合によく使います。</p><h2 id="ファイル名だけ出力-l"><a href="#ファイル名だけ出力-l" class="headerlink" title="ファイル名だけ出力: -l"></a>ファイル名だけ出力: <code>-l</code></h2><p>デフォルトでは検索結果にはマッチした行テキストが出力されます。これの代わりにマッチするデータがあるファイル名だけ表示するには <code>-l</code> オプションを指定します。</p><h2 id="文字コードShift-JISのファイルを検索"><a href="#文字コードShift-JISのファイルを検索" class="headerlink" title="文字コードShift_JISのファイルを検索"></a>文字コードShift_JISのファイルを検索</h2><p>grepは文字コードUTF-8のファイルならマルチバイト文字も検索できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: 日本語を検索する。</span></span><br><span class="line">grep <span class="string">'フューチャー'</span> sample.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: 絵文字を検索する。</span></span><br><span class="line">grep -P <span class="string">'🤠'</span> sample.txt</span><br></pre></td></tr></table></figure><p>ただ、Windowsにおいては文字コードShift_JISのファイルを相手にすることもまだまだ多いものの、grepは単純にはShift_JISのファイルを検索できません。そのような場合は、次のように文字コードShift_JISの検索パターンを指定すると検索できます。ただし、正規表現が使えません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: 文字コードShift_JISのファイルを対象に検索する。</span></span><br><span class="line">grep -aF $(<span class="built_in">echo</span> <span class="string">'フューチャー'</span> | iconv -t SJIS) sample_sjis.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: 検索結果の文字化けを解消するには、検索結果の文字コードを変換する。</span></span><br><span class="line">grep -aF $(<span class="built_in">echo</span> <span class="string">'フューチャー'</span> | iconv -t SJIS) sample_sjis.txt | iconv -f SJIS</span><br></pre></td></tr></table></figure><p>この例ではコマンド置換 (<code>$(...)</code> の部分、grepではなくシェルの機能) により文字コードShift_JISに変換するコマンドを実行してその結果を検索パターンに指定しています。</p><p>各オプションの意味とその意図は次のとおりです。</p><ul><li><code>-a</code>: バイナリファイルもテキストとして検索します。<br>Shift_JISのファイルはgrepにバイナリファイルと認識され、検索結果にマッチした行テキストが出力されないことがあります。 <code>-a</code> を指定するとバイナリファイルもテキスト扱いで検索してマッチした行テキストが出力されます。</li><li><code>-F</code>: 検索パターンを正規表現として解釈せず普通の文字列として扱います。<br>Shift_JISの検索文字列の一部はメタ文字として解釈されてしまい、エラーになることがあります。そのような場合は <code>-F</code> オプションを指定して検索パターンをただの文字列として指定するとエラーを解消できます。</li></ul><h2 id="マッチしない行を検索-v"><a href="#マッチしない行を検索-v" class="headerlink" title="マッチしない行を検索: -v"></a>マッチしない行を検索: <code>-v</code></h2><p>検索パターンを含まない行を検索したい (NOT条件のような) 場合は <code>-v</code> オプションを指定します。</p><h2 id="複数の検索パターン-e"><a href="#複数の検索パターン-e" class="headerlink" title="複数の検索パターン: -e"></a>複数の検索パターン: <code>-e</code></h2><p>複数の検索パターンのいずれかを含む行を検索したい (OR条件のような) 場合はいくつか方法がありますが、 <code>-e</code> オプションで検索パターンを複数指定する方法が簡単です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: HackまたはBackという文字列を含む行を検索する。</span></span><br><span class="line">grep -e <span class="string">'Hack'</span> -e <span class="string">'Back'</span> sample.txt</span><br></pre></td></tr></table></figure><h2 id="検索パターンをファイルで指定-f"><a href="#検索パターンをファイルで指定-f" class="headerlink" title="検索パターンをファイルで指定: -f"></a>検索パターンをファイルで指定: <code>-f</code></h2><p>検索パターンは <code>-f</code> オプションを使ってファイルで指定できます。検索パターンを指定するファイルは1行に1個の検索パターンを記述します。このとき、検索パターンを指定するファイルの改行コードは <code>LF</code> にする必要があります。改行コードに <code>CR</code> が含まれていると意図した検索ができません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: ファイルから検索パターンを読み取って検索する。</span></span><br><span class="line">grep -f patterns.txt sample.txt</span><br></pre></td></tr></table></figure><p>このオプションは次の例のように、別のコマンドの結果を検索パターンとして使う時に指定することが多いです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: 別コマンドの結果を検索パターンとして指定し、検索する。</span></span><br><span class="line">grep -r --include=<span class="string">'*.vue'</span> -f &lt;(grep -Eo <span class="string">'[EWI][0-9]+'</span> some-resource.yml) some_dir/</span><br></pre></td></tr></table></figure><p>この例ではプロセス置換 (<code>&lt;(...)</code> の部分、grepではなくシェルの機能) により別のコマンドの結果を検索パターンファイルとして指定しています。</p><h2 id="最短一致検索"><a href="#最短一致検索" class="headerlink" title="最短一致検索"></a>最短一致検索</h2><p>検索パターンで紹介した量指定子の <code>*</code> や <code>+</code> はマッチする部分ができるだけ長くなるようにマッチされます (最長一致検索)。例えば、検索パターン <code>H.*e</code> は文字列 <code>Hack to the Future</code> の全体にマッチします。そうではなく、1個目の <code>e</code> までマッチさせる (最短一致検索) 場合は、 <code>-P</code> オプションを指定し、Perl互換正規表現 (PCRE) のメタ文字 <code>*?</code> や <code>+?</code> を使います。検索パターン <code>H.*?e</code> は文字列 <code>Hack to the Future</code> に対して <code>Hack to the</code> の部分にマッチします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: 最短一致検索する。</span></span><br><span class="line">grep -P <span class="string">'H.*?e'</span> sample.txt</span><br></pre></td></tr></table></figure><h1 id="git-grep"><a href="#git-grep" class="headerlink" title="git grep"></a>git grep</h1><p>gitのサブコマンドにはgitリポジトリを検索するgit grepコマンドがあります。単にワークツリーを検索するだけであればgrepを使えば良いですが、コミット内を検索したい場合にはgit grepを使う必要があります。git grepはワークツリーとコミット内のどちらも検索できます。</p><p>git grepは名前にgrepが含まれている通りgrepと似ており、使い方がgrepとほぼ同じでオプションも同じように使えるものが多いです。ここでは前述したgrepのオプションとは異なる部分と、git grep特有の便利機能を紹介します。</p><h2 id="特定のファイルだけ検索"><a href="#特定のファイルだけ検索" class="headerlink" title="特定のファイルだけ検索"></a>特定のファイルだけ検索</h2><p>git grepには <code>--include</code> オプションがありません。代わりに、git grepではコマンドライン引数の最後に検索対象のファイルを限定する「パス仕様」を指定できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: カレントディレクトリから再帰的に、配下に存在する拡張子.vueのファイルを対象に検索する。</span></span><br><span class="line">git grep <span class="string">'Future'</span> -- <span class="string">'*.vue'</span></span><br></pre></td></tr></table></figure><p>この例では <code>&#39;*.vue&#39;</code> の部分がパス仕様で、 <code>--</code> はそれより後ろの引数がパス仕様であることを明示するために指定します。</p><p>なお、git grepは <code>-r</code> オプションの動作がデフォルトのため、オプション無しでもフォルダを再帰的に検索します。</p><h3 id="特定のファイル-フォルダを除外"><a href="#特定のファイル-フォルダを除外" class="headerlink" title="特定のファイル/フォルダを除外"></a>特定のファイル/フォルダを除外</h3><p><code>--include</code> と同様にgit grepには <code>--exclude</code>, <code>--exclude-dir</code> オプションが無いため、コマンドライン引数の最後で除外するパス仕様を指定します。除外するパスは先頭に <code>:^</code> または <code>:!</code> という文字 (どちらも同じ意味) を付けて指定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: カレントディレクトリから再帰的に、配下に存在する拡張子.log以外のファイルを対象に検索する。</span></span><br><span class="line">git grep <span class="string">'Future'</span> -- <span class="string">':^*.log'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: カレントディレクトリから再帰的に、logフォルダ以外の配下に存在するファイルを対象に検索する。</span></span><br><span class="line">git grep <span class="string">'Future'</span> -- <span class="string">':^*/log/*'</span></span><br></pre></td></tr></table></figure><h2 id="他ブランチ-全ブランチ検索"><a href="#他ブランチ-全ブランチ検索" class="headerlink" title="他ブランチ/全ブランチ検索"></a>他ブランチ/全ブランチ検索</h2><p>gitは機能や修正毎にブランチを分けて開発することが多いため、他ブランチを対象に検索したいことがあります。そのような場合はコマンドライン引数でブランチを指定して検索できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: dev/awesome-featureブランチを対象に検索する。</span></span><br><span class="line">git grep <span class="string">'Future'</span> dev/awesome-feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: リモートブランチを対象に検索する。</span></span><br><span class="line">git grep <span class="string">'Future'</span> origin/dev/awesome-feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: 検索対象のブランチを複数指定する。</span></span><br><span class="line">git grep <span class="string">'Future'</span> dev/awesome-feature dev/pretty-feature</span><br></pre></td></tr></table></figure><p>また、もっと広く検索するために全ブランチを対象に検索したいことがあります。そのような場合、私は次のように検索しています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: 全リモートブランチを対象に検索する。</span></span><br><span class="line">git grep <span class="string">'Future'</span> $(git show-ref | cut -d<span class="string">' '</span> -f2 | grep <span class="string">'/origin/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: 全リモートブランチを対象に、特定のパターンのファイルのみ検索する。</span></span><br><span class="line">git grep <span class="string">'Future'</span> $(git show-ref | cut -d<span class="string">' '</span> -f2 | grep <span class="string">'/origin/'</span>) -- <span class="string">'*.vue'</span> <span class="string">':^*.log'</span></span><br></pre></td></tr></table></figure><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>当記事では、私がよく使うgrepオプションやgit grepの機能を紹介しました。grepは他のコマンドと組み合わせるとさらに強力に使うことができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンド例: 別コマンドの結果を検索する。</span></span><br><span class="line">hoge | grep <span class="string">'Future'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: 3日以内に更新されたログファイルを対象に検索する。</span></span><br><span class="line">find . -maxdepth 2 -<span class="built_in">type</span> f -name <span class="string">'*.log'</span> -mtime -3 -print0 | xargs -0 grep <span class="string">'Future'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># コマンド例: grepで検索されたファイルを対象に置換処理する。</span></span><br><span class="line">perl -pi -e <span class="string">'s/foo([-\/])/bar$&#123;1&#125;/g'</span> $(grep -rl <span class="string">'foo[-/]'</span>)</span><br></pre></td></tr></table></figure><p>当blog過去記事の <a href="https://future-architect.github.io/articles/20160527/">grepのLT</a> では、「find, while, cut, …もgrepのオプションだよね？」といった衝撃の発表もされていて面白い内容ですのでよろしければそちらも参照ください。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://www.gnu.org/software/grep/manual/" target="_blank" rel="noopener">GNU Grepのマニュアル</a></li><li><a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html" target="_blank" rel="noopener">POSIXの正規表現仕様</a><br>GNU Grepのマニュアルに記載のないBRE, EREの仕様はこちらが参考になります。</li><li><a href="https://git-scm.com/docs/git-grep" target="_blank" rel="noopener">git-grepのドキュメント</a></li><li><a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec" target="_blank" rel="noopener">gitglossaryのドキュメント (パス仕様の詳細)</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.gnu.org/software/grep/manual/grep.html#Basic-vs-Extended" target="_blank" rel="noopener">GNU grep manual: 3.6 Basic vs Extended Regular Expressions</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200611/top.png&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGメディアユニット岸本卓也です
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Shellscript" scheme="https://future-architect.github.io/tags/Shellscript/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #8 人生を豊かにする文字列diff入門</title>
    <link href="https://future-architect.github.io/articles/20200610/"/>
    <id>https://future-architect.github.io/articles/20200610/</id>
    <published>2020-06-10T02:31:40.000Z</published>
    <updated>2020-06-23T03:14:54.868Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の8日目です。</p><p>文字列の新旧の違いを表現する時によくdiffをとるとか言いますよね。そこで実行されるのが差分アルゴリズムです。差分のアルゴリズムって結構知れば知るほど難しいやつです。「より良い差分」という基準が、状況によって変わるからです。ヒューリスティックなやつです。例えば、HTMLの説明の文章を書いていたとします。タイトルをテーブルに書き換えてみたとします。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;</span><br></pre></td></tr></table></figure><p>どちらの差分の方がわかりやすいでしょうか？</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &lt;title&gt;</span></span><br><span class="line"><span class="addition">+ &lt;table&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  &lt;t</span><br><span class="line"><span class="deletion">- it</span></span><br><span class="line"><span class="addition">+ ab</span></span><br><span class="line">  le&gt;</span><br></pre></td></tr></table></figure><p>どちらも間違ってはおらず、この差分を元にパッチを当てたりも可能です。ただ、読んだ時の読みやすさが違います。</p><p>これはもちろん前者と答える人の方が多いでしょう。だって、タグという意味の塊が維持されていますからね。<br>これは究極的にはわかりやすいdiffというのは「意味」を理解しないと作れないということを意味します。これがdiffは簡単なようで難しいと書いた理由です。もちろん、ほどほどの工数で、ほどほどの見た目のdiffも作成可能です。</p><p>案件の中で「とりあえず差分を」となるとあまり細かい部分まで詰めきれないことが多いと思います。差分の表示の質はどちらかというと、「あれば嬉しい」話で、「ないと困る」という線引きがしにくいものです。とりあえず出せてしまったらそこで試合終了になることも多いかも知れません。というか、そもそも差分アルゴリズムを案件で使おうという議論にもあまりならない気がします。</p><p>個人的には結構工夫しがいがあってお気に入りの差分アルゴリズムについて、それが何者であるか、どういう特製があって、どういう工夫ができるのかを紹介していきます。この説明では、Google製のdiff-match-patchのGo移植を元に説明していきますが、基本的な考え方は他の実装でも使えると思います。なお、このライブラリはdiff以外にmatchとpatchの機能もありますが、このエントリーではdiffのみを扱います。</p><h1 id="差分検知では何が行われるのか？"><a href="#差分検知では何が行われるのか？" class="headerlink" title="差分検知では何が行われるのか？"></a>差分検知では何が行われるのか？</h1><p>さっそく、<a href="https://play.golang.org/p/c0kcz7IO0Op" target="_blank" rel="noopener">差分を表示して</a>みます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/sergi/go-diff/diffmatchpatch"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">text1 = <span class="string">"github.com/mattn_jp/go-sqlite3"</span></span><br><span class="line">text2 = <span class="string">"github.com/shibukawa/nanogui-go"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dmp := diffmatchpatch.New()</span><br><span class="line"></span><br><span class="line">diffs := dmp.DiffMain(text1, text2, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">log.Println(diffs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[{Equal github.com/} {Delete m} {Insert shibuk}]</code>みたいなテキストで出力されますが、手動でdiffコマンド的に出力をわかりやすく表示すると以下のようになります。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  github.com/</span><br><span class="line"><span class="deletion">- m</span></span><br><span class="line"><span class="addition">+ shibuk</span></span><br><span class="line">  a</span><br><span class="line"><span class="deletion">- tt</span></span><br><span class="line"><span class="addition">+ wa/</span></span><br><span class="line">  n</span><br><span class="line"><span class="deletion">- _jp/</span></span><br><span class="line"><span class="addition">+ anogui-</span></span><br><span class="line">  go</span><br><span class="line"><span class="deletion">- -sqlite3</span></span><br></pre></td></tr></table></figure><p>結果のdiffsは差分のリストで、文字列片ごとに、Equal/Insert/Deleteのフラグ(Type)がついたものです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Diff <span class="keyword">struct</span> &#123;</span><br><span class="line">    Type Operation</span><br><span class="line">    Text <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>差分アルゴリズムがやっていることは、この編集リストを作るのがお仕事です。ちなみに、このEqualとInsertだけをピックアップして文字列を結合すれば新しい文字列が、EqualとDeleteだけをピックアップすると古い文字列になります。</p><p>文章を編集するアクションのリストなので、ここから<a href="https://play.golang.org/p/hj2ekE8Rtjd" target="_blank" rel="noopener">レーベンシュタイン距離を計算</a>することもできます。diff-match-patchのライブラリではまさにその関数が提供されています。レーベンシュタイン距離はInsertやDeleteが多いほどスコアが上がるアルゴリズムで、単語同士の距離を計算できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log.Println(dmp.DiffLevenshtein(diffs))</span><br><span class="line"><span class="comment">// output: 24</span></span><br></pre></td></tr></table></figure><p>レーベンシュタイン距離を使うと、ユーザーが入力したコマンドが、利用可能なコマンドリストのどれにもマッチしないときに、一番近いコマンド名を出して「これを入力しようとしたんでしょうか？」と聞くことができます。</p><h2 id="出力部分の補助関数"><a href="#出力部分の補助関数" class="headerlink" title="出力部分の補助関数"></a>出力部分の補助関数</h2><p>diffの結果を加工する関数がいくつか提供されています。HTMLにしたり、カラーコード付きでコンソール出力したり、diffから元のテキストを復元したり、diffのテキストのように出力したり・・・</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dmp *DiffMatchPatch)</span> <span class="title">DiffPrettyHtml</span><span class="params">(diffs []Diff)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dmp *DiffMatchPatch)</span> <span class="title">DiffPrettyText</span><span class="params">(diffs []Diff)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dmp *DiffMatchPatch)</span> <span class="title">DiffText1</span><span class="params">(diffs []Diff)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dmp *DiffMatchPatch)</span> <span class="title">DiffText2</span><span class="params">(diffs []Diff)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dmp *DiffMatchPatch)</span> <span class="title">DiffToDelta</span><span class="params">(diffs []Diff)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure><h2 id="基本の検知ロジックのカスタマイズ"><a href="#基本の検知ロジックのカスタマイズ" class="headerlink" title="基本の検知ロジックのカスタマイズ"></a>基本の検知ロジックのカスタマイズ</h2><p>マッチを探す文字数の範囲やコスト計算のパラメータ調整は構造体の属性をいじると行えます。diff以外のmatchとpatch用のパラメータもあります。とはいえ、これだけで「見やすいdiff」を作り出すのは難しいと思います。そのため、基本の差分ロジックの出力を後から変更していく方法をこのあと紹介します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DiffMatchPatch <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Number of seconds to map a diff before giving up (0 for infinity).</span></span><br><span class="line">    DiffTimeout time.Duration</span><br><span class="line">    <span class="comment">// Cost of an empty edit operation in terms of edit characters.</span></span><br><span class="line">    DiffEditCost <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// How far to search for a match (0 = exact location, 1000+ = broad match). A match this many characters away from the expected location will add 1.0 to the score (0.0 is a perfect match).</span></span><br><span class="line">    MatchDistance <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// When deleting a large block of text (over ~64 characters), how close do the contents have to be to match the expected contents. (0.0 = perfection, 1.0 = very loose).  Note that MatchThreshold controls how closely the end points of a delete need to match.</span></span><br><span class="line">    PatchDeleteThreshold <span class="keyword">float64</span></span><br><span class="line">    <span class="comment">// Chunk size for context length.</span></span><br><span class="line">    PatchMargin <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// The number of bits in an int.</span></span><br><span class="line">    MatchMaxBits <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// At what point is no match declared (0.0 = perfection, 1.0 = very loose).</span></span><br><span class="line">    MatchThreshold <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="後処理でのdiffの統合"><a href="#後処理でのdiffの統合" class="headerlink" title="後処理でのdiffの統合"></a>後処理でのdiffの統合</h1><p>最初のサンプルをみた時に、わかりにくかった原因は「細かすぎる」ことにありました。diff-match-patchはデフォルトではなるべく細かい差分を見つけようとします。ただ、それではわかりにくかったりするので、行ごとの差分になるようにしたり「編集リストをまとめて数を減らす」のが基本的なチューニングの方向性になります。</p><p>例えばこの差分は、Equalが2つ、DeleteとInsertが一つずつのリストになっています。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  &lt;t</span><br><span class="line"><span class="deletion">- it</span></span><br><span class="line"><span class="addition">+ ab</span></span><br><span class="line">  le&gt;</span><br></pre></td></tr></table></figure><p>で、読みやすい方は、Equal要素はDeleteとInsertにそれぞれマージされています。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &lt;title&gt;</span></span><br><span class="line"><span class="addition">+ &lt;table&gt;</span></span><br></pre></td></tr></table></figure><p>diff-match-patchには、デフォルトのアルゴリズムで作成した編集リストを、ある程度まとめてわかりやすくする関数がいくつも提供されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dmp *DiffMatchPatch)</span> <span class="title">DiffCleanupEfficiency</span><span class="params">(diffs []Diff)</span> []<span class="title">Diff</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dmp *DiffMatchPatch)</span> <span class="title">DiffCleanupMerge</span><span class="params">(diffs []Diff)</span> []<span class="title">Diff</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dmp *DiffMatchPatch)</span> <span class="title">DiffCleanupSemantic</span><span class="params">(diffs []Diff)</span> []<span class="title">Diff</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dmp *DiffMatchPatch)</span> <span class="title">DiffCleanupSemanticLossless</span><span class="params">(diffs []Diff)</span> []<span class="title">Diff</span></span></span><br></pre></td></tr></table></figure><p>それぞれ、異なる戦略でマージしようとします。<a href="https://play.golang.org/p/xDf4MyftWgM" target="_blank" rel="noopener">DiffCleanupEfficiency()</a>と<a href="https://play.golang.org/p/A9coFnr-LK8" target="_blank" rel="noopener">DiffCleanupSemantic()</a>の結果は次の通りです。他の二つはこの入力では変わりませんでした。</p><figure class="highlight diff"><figcaption><span>DiffCleanupEfficiency()</span></figcaption><table><tr><td class="code"><pre><span class="line">  github.com/</span><br><span class="line"><span class="deletion">- mattn_jp/</span></span><br><span class="line"><span class="addition">+ shibukawa/nanogui-</span></span><br><span class="line">  go</span><br><span class="line"><span class="deletion">- -sqlite3</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><figcaption><span>DiffCleanupSemantic()</span></figcaption><table><tr><td class="code"><pre><span class="line">  github.com/</span><br><span class="line"><span class="deletion">- mattn_jp/go-sqlite3</span></span><br><span class="line"><span class="addition">+ shibukawa/nanogui-go</span></span><br></pre></td></tr></table></figure><h1 id="行単位のdiff"><a href="#行単位のdiff" class="headerlink" title="行単位のdiff"></a>行単位のdiff</h1><p><a href="https://play.golang.org/p/6hQaDU230yT" target="_blank" rel="noopener">複数行のテキスト</a>を今までの関数に入れてみます。行頭に改行が来たり、テキストの中に来たり、まちまちです。そのまま色付きで表示してもなんかわかりにくい表示結果になりがちです。</p><p>何も考えずに複数行テキストを入れてみる</p><figure class="highlight diff"><figcaption><span>何も考えずに複数行テキストを入れてみる</span></figcaption><table><tr><td class="code"><pre><span class="line">  github.com/</span><br><span class="line"><span class="deletion">- mattn_jp/go-sqlite3</span></span><br><span class="line"><span class="addition">+ shibukawa/nanogui-go</span></span><br><span class="line">  (改行)github.com/labstack/echo(改行)github.com/g</span><br><span class="line"><span class="deletion">- orilla/mux</span></span><br><span class="line"><span class="addition">+ in-gonic/gin</span></span><br><span class="line">  (改行)</span><br></pre></td></tr></table></figure><p>この結果をゴニョゴニョ直しても良いのですが、行単位でのdiffでは<a href="https://play.golang.org/p/7PKXZXA3D2O" target="_blank" rel="noopener">今までとは違うメソッドを使って入力と出力をフィルター</a>することで読みやすい差分出力を行うロジックが提供されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/sergi/go-diff/diffmatchpatch"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">text1 = <span class="string">"github.com/mattn_jp/go-sqlite3"</span></span><br><span class="line">text2 = <span class="string">"github.com/shibukawa/nanogui-go"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dmp := diffmatchpatch.New()</span><br><span class="line">a, b, c := dmp.DiffLinesToChars(text1, text2)</span><br><span class="line">diffs := dmp.DiffMain(a, b, <span class="literal">false</span>)</span><br><span class="line">diffs = dmp.DiffCharsToLines(diffs, c)</span><br><span class="line"></span><br><span class="line">log.Println(diffs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- Delete github.com/mattn_jp/go-sqlite3(改行)</span></span><br><span class="line"><span class="addition">+ Insert github.com/shibukawa/nanogui-go(改行)</span></span><br><span class="line">  github.com/labstack/echo(改行)</span><br><span class="line"><span class="deletion">- Delete github.com/gorilla/mux(改行)</span></span><br><span class="line"><span class="addition">+ Insert github.com/gin-gonic/gin(改行)</span></span><br></pre></td></tr></table></figure><p>見慣れたdiffが出てきましたね。</p><p>これ、何をしているかというと、入力のテキストを行単位にわけ、1行1文字となるように、前処理をしているのですよね。そして、最後に文字を行に戻しています。文字というのは、それ以上は分られない単位ですので、この前処理を行うことで行単位でのdiffが出力されるわけです。</p><h1 id="応用編-GitHubのようなdiff"><a href="#応用編-GitHubのようなdiff" class="headerlink" title="応用編: GitHubのようなdiff"></a>応用編: GitHubのようなdiff</h1><p>みなさんが見慣れているGitHubでは、行単位のdiffの中に、文字単位のdiffが入った出力が行われます。この出力の情報量は多く、長い行の一部が変更された場合などに力を発揮します。</p><p>これを実現するには既製のライブラリをそのまま使うだけではダメで、いろいろ後処理を加える必要があります。完成品は<a href="https://github.com/shibukawa/cdiff/blob/master/diff.go#L141" target="_blank" rel="noopener">こちら</a>にあります。</p><p>やっていることは単純で、diffsの差分の結果中で、Delete→Insertの順番に並んでいるところを見つけ、その差分を行内のdiffとして出力してあげればいけます。</p><p>なお、GitHubの場合は新旧の行番号を両方表示しているため、そこをエミュレーションするにはdiffsのテキストを解析し、新旧の行番号をカウントしてあげる必要があります。上記のコードでは<a href="https://github.com/shibukawa/cdiff/blob/master/diff.go#L16" target="_blank" rel="noopener">まずさいしょに</a>この処理を行っています。Equalなら両方の、Deleteなら旧の方のみ、Insertなら新の方のみの行カウンターをインクリメントする、みたいな感じですね。</p><p>これらの処理を組み合わせることで、次のような行単位差分と、その中のテキスト単位差分を出しつつ、新旧の行数を両方出す（unified形式）で出したのが次のスクリーンショットです。まあ、テキスト単位差分はもうちょっと何かしらの後処理はした方が良いですが、とりあえず実証実験ということで。</p><img src="/images/20200610/99.png"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>diffのアルゴリズムと応用について紹介しました。</p><p>diffってすごく人間臭いアルゴリズムだと思うんですよね。そもそもすべてがきちんと動いている・情報が把握されている場合にはあまり必要とされない。間違った時、間違いを見つけようとした時ほど役立つんですよね。フューチャーが扱うようなシステムでも必須要件に入ることはあまりないと思いますし、僕が前職でやっていたような社内SE業でも必ずしも必要とされない。でも、それを知っていると、もしユーザーが間違った時に「もしかしてこれじゃないですか？」「前回の設定との違いはこれですよ。間違いの原因はこの中にありますか？」みたいな親切なことができるんですよね。</p><p>「なくても困らないけど、あったら嬉しい」ものって、ほとんどの場合「付加価値」を提供するものです。diffアルゴリズムも自分が使える道具の中に入れておくと、いざと言う時に「最低限を満足するだけのシステム」から「すごく親切なシステム」にパワーアップできると思います。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20200310/">Goの標準ライブラリのコードリーディングのすすめ</a></li><li><a href="https://future-architect.github.io/articles/20191203/">Go Conferenceの📛を作る</a></li><li><a href="https://future-architect.github.io/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;の8日目です。&lt;/p&gt;
&lt;p&gt;文字列の新旧の違いを表現する時によくdiffをとるとか言いますよね。そこで実行されるのが差分アル
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Algorithm" scheme="https://future-architect.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #7 作って学ぶGraphQL。gqlgenを用いて鉄道データ検索API開発入門</title>
    <link href="https://future-architect.github.io/articles/20200609/"/>
    <id>https://future-architect.github.io/articles/20200609/</id>
    <published>2020-06-09T02:16:57.000Z</published>
    <updated>2020-06-10T02:23:39.894Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200609/top.png"><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の7日目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><strong>※このエントリーはGoでGraphQLサーバアプリ開発の入門記事です。技術要素にGo, gqlgen, Docker, PosgreSQLなどが登場します。</strong></p><p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の真野です。技術ブログ運営もしています。</p><p>フューチャーでは<a href="/tags/OpenAPI/">OpenAPI関連の過去記事</a>からお察しもできるように、REST-likeなWebAPIを実装することが多いです。しかし<a href="https://future-architect.github.io/articles/20200512/">日本製HeadlessCMSのmicroCMSを触ってみた</a>の記事で紹介されたように、HeadlessCMS界隈を初めGraphQLのAPIを提供するサービスが増えている体感もあり、GraphQLを春の入門祭りのテーマにしました。</p><p>学習する上でドキュメントを読み込むだけでは忘れがちです。手を動かしながらタイトルにあるように<strong>鉄道データ検索API</strong>をGraphQLで実装していきましょう。実装の前に結果のみを知りたい人は <a href="#クエリ：「渋谷駅」を検索する">クエリ：「渋谷駅」を検索する</a>にお進みください。スキーマは<a href="#GraphQLスキーマ設計">#GraphQLスキーマ設計</a>にあります。</p><h1 id="GraphQLとは"><a href="#GraphQLとは" class="headerlink" title="GraphQLとは"></a>GraphQLとは</h1><img src="/images/20200609/photo_20200609_01.png"><ul><li><a href="https://graphql.org/" target="_blank" rel="noopener">https://graphql.org/</a></li></ul><p>GraphQLはWebAPI用のクエリ言語です。誤解を恐れずに書けばWebAPIにおけるSQLのような存在です。GraphQL（つまりクエリ）と呼ぶとSelectしかない印象を持ってしまいそうですが、Mutationと呼ばれるスキーマを定義すればInsert/Update/Delteが相当の処理を実行できます。今回はMutationは省略してQueryのみを実装していきます。</p><p>GraphQLはRDBのDDL（Data Definition Language）のようなスキーマも持て、<code>.graphqls</code>の拡張子で管理します。このGraphQLスキーマを元に、クライアントやサーバサイドのテンプレートコードを自動生成できます。サーバサイド実装者側の立場に立てば、この宣言したGraphQLに沿ったリクエストを受付、レスポンスを応答する必要があります。</p><h1 id="GraphQLスキーマ定義"><a href="#GraphQLスキーマ定義" class="headerlink" title="GraphQLスキーマ定義"></a>GraphQLスキーマ定義</h1><p>スキーマ定義の文法は以下のような形式で、項目ごとに型定義を行えます。 <code>!</code> の意味は、Not Null条件です。</p><figure class="highlight ts"><figcaption><span>GraphQLのスキーマ例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Query &#123;</span><br><span class="line">  me: User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User &#123;</span><br><span class="line">  id: ID!</span><br><span class="line">  name: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このスキーマに対して、以下のクエリを実行すると…</p><figure class="highlight ts"><figcaption><span>クエリ実行例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  me &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下の形式のレスポンスが取得されます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"me"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Luke Skywalker"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この例だと宣言している項目が少ないので恩恵が少なそうですが、属性が増えたりネストした属性（Lukeの友人関係もスキーマ定義するなど）をすると、名前だけ取得したい場合と、友人関係も取得したいときで、クエリによって呼び分けられるので便利です（実装次第ですが、おそらくサーバサイドの負荷も下げることができます）。</p><p>文法詳細は<a href="https://graphql.org/learn/" target="_blank" rel="noopener">公式のlearn</a>ページをさらっと目を通すとオススメです。公式がスターウオーズのデータで説明しているため、この界隈に入門するときはスター・ウォーズシリーズの視聴をしておくと有利な気がします。他にも<a href="https://kakakakakku.hatenablog.com/entry/2019/12/30/135420" target="_blank" rel="noopener">ポケモン初代</a>のデータや実装が公開されているため、トレーナの皆様におかれましてはこちらの方が良いかもです。ポケモン、非常に良いと思ったのですがポケモン名や技名が、英語限定なのでそこがネックかも知れません。</p><h1 id="スターウォーズスキーマお試し環境の構築手順"><a href="#スターウォーズスキーマお試し環境の構築手順" class="headerlink" title="スターウォーズスキーマお試し環境の構築手順"></a>スターウォーズスキーマお試し環境の構築手順</h1><p>スターウォーズで良ければサンプル実装で試すのが早いです。Goの開発環境が入っていれば、以下の手順でクイックにサーバを起動できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; mkdir <span class="variable">$GOPATH</span>/src/github.com/graphql-go</span><br><span class="line">&gt; <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/graphql-go</span><br><span class="line">&gt; git <span class="built_in">clone</span> https://github.com/graphql-go/graphql.git</span><br><span class="line">&gt; <span class="built_in">cd</span> graphql-go/examples</span><br><span class="line">&gt; go run main.go</span><br><span class="line">Now server is running on port 8080</span><br><span class="line">Test with Get      : curl -g <span class="string">'http://localhost:8080/graphql?query=&#123;hero&#123;name&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>GraphQLクライアントですが、ログ出力している通り、<code>curl</code> で試しても良いですが、GraphiQLというElectron製のtypoしているような名前のツールが便利です。</p><ul><li><a href="https://www.electronjs.org/apps/graphiql" target="_blank" rel="noopener">https://www.electronjs.org/apps/graphiql</a></li></ul><p>GraphiQLを起動後に、Endpiontには先ほどログ出力されていた、<code>http://localhost:8080/graphql</code> と <code>GET</code>に書き換えると実行可能です。てっきりGraphQLは <code>POST</code>で <code>/graphql</code> で固定的に提供されるものだと思っていましたが、実装元の提供方法次第で自由に変えられることがわかります。</p><img src="/images/20200609/photo_20200609_02.gif"><p>サンプルのクエリは、ここの<a href="https://github.com/graphql-go/graphql/blob/master/graphql_test.go" target="_blank" rel="noopener">テストケース</a>を参考に試してみてください。</p><h1 id="GoでのGraphQL実装方法"><a href="#GoでのGraphQL実装方法" class="headerlink" title="GoでのGraphQL実装方法"></a>GoでのGraphQL実装方法</h1><p>さて、ここからは実際に手を動かしてみるパートです。コードは全て<a href="https://github.com/laqiiz/gqlgen-ekiapp" target="_blank" rel="noopener">こちらのリポジトリ</a>にコミットしていますので、適時参照ください。</p><p>GoでのGraphQLサーバの実装に用いるライブラリは、メジャーなのが2種類ありそれぞれ特色が大きく違います。</p><ol><li><a href="https://github.com/graphql-go/graphql" target="_blank" rel="noopener">graphql-go/graphql</a><ul><li>コードでGraphQLスキーマを表現するタイプ</li></ul></li><li><a href="https://github.com/99designs/gqlgen" target="_blank" rel="noopener">99designs/gqlgen</a><ul><li>GraphQLのスキーマを元にコードを自動生成するタイプ</li></ul></li></ol><p>どちらを選ぶかはチームの戦略次第だと思いますが、今回はスキーマ駆動で開発を進められる <strong>gqlgen</strong> を採用します。</p><h1 id="実装するもの"><a href="#実装するもの" class="headerlink" title="実装するもの"></a>実装するもの</h1><p>スターウォーズ・ポケモン（英語）、どちらも不朽の名作ですが、今回は趣向を変えます。昨今の情勢下でフューチャーはリモートワーク推進のためでしたが、それまで非常にお世話になった<strong>鉄道🚃の駅情報を検索するAPI</strong>をGraphQLサーバで実装していきます。データは<a href="https://ekidata.jp/" target="_blank" rel="noopener">駅データ.jp</a>を使わせていただきました。</p><h1 id="今回利用する駅データ"><a href="#今回利用する駅データ" class="headerlink" title="今回利用する駅データ"></a>今回利用する駅データ</h1><p><a href="https://ekidata.jp/" target="_blank" rel="noopener">駅データ.jp</a>さんからCSVファイルをダウンロードします。データ取得にはユーザ登録（無料）が必要です。有料データには路線カラー情報や新幹線駅データなどさらに有益な情報が含まれているそうなので、必要に応じて切り替えてください。今回は無料版で行います。スキーマ情報は仕様書のページに記載されています。控えめに言って神サイトです。</p><img src="/images/20200609/photo_20200609_03.gif"><ul><li><a href="https://ekidata.jp/doc/" target="_blank" rel="noopener">駅データ.jpのデータ仕様書ページより</a></li></ul><h1 id="PostgreSQLにデータを登録する"><a href="#PostgreSQLにデータを登録する" class="headerlink" title="PostgreSQLにデータを登録する"></a>PostgreSQLにデータを登録する</h1><p>GraphQLサーバから直接CSVファイルを読み取っても良いですが、結合が面倒なのでPostgreSQLに登録します。以下のDockerfile, docker-compose.ymlを作成します。</p><figure class="highlight dockerfile"><figcaption><span>駅データ格納PosgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> postgres:<span class="number">10.7</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> init /docker-entrypoint-initdb.d/</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.5"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  postgresql:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">./</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">postgre-eki</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_USER=postgres</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_PASSWORD=postgres</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_INITDB_ARGS=--encoding=UTF-8</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5432:5432"</span></span><br><span class="line"><span class="attr">    user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - pg-data-eki:</span><span class="string">/var/lib/pgdata</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  pg-data-eki:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure><p>記事ではstationのCreate文とcopy句を記載します。</p><figure class="highlight sql"><figcaption><span>1_create.sql(company,line,joinは省略)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> station</span><br><span class="line">(</span><br><span class="line">    station_cd <span class="built_in">integer</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    station_g_cd <span class="built_in">integer</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    station_name <span class="built_in">varchar</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    station_name_k <span class="built_in">varchar</span>,</span><br><span class="line">    station_name_r <span class="built_in">varchar</span>,</span><br><span class="line">    line_cd <span class="built_in">integer</span>,</span><br><span class="line">    pref_cd <span class="built_in">integer</span>,</span><br><span class="line">    post <span class="built_in">varchar</span>,</span><br><span class="line">    address <span class="built_in">varchar</span>,</span><br><span class="line">    lon <span class="built_in">float</span>,</span><br><span class="line">    lat <span class="built_in">float</span>,</span><br><span class="line">    open_ymd <span class="built_in">varchar</span> ,</span><br><span class="line">    close_ymd <span class="built_in">varchar</span>,</span><br><span class="line">    e_status <span class="built_in">integer</span>,</span><br><span class="line">    e_sort <span class="built_in">integer</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (station_cd)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">comment</span> <span class="keyword">on</span> <span class="keyword">table</span> station <span class="keyword">is</span> <span class="string">'station20200316free.csv'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>2_copy.sql(company,line,joinは省略)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy company(company_cd,rr_cd,company_name,company_name_k,company_name_h,company_name_r,company_url,company_type,e_status,e_sort)</span><br><span class="line">  from '/docker-entrypoint-initdb.d/company20200309.csv' <span class="keyword">with</span> csv header;</span><br></pre></td></tr></table></figure><p>また、先ほどダウンロードしたCSVファイルと、それぞれに相当するDDL文を作成して、以下のフォルダに格納します。こんな感じで作成してコンテナを起動させます。PostgreSQLのコンテナは<code>/docker-entrypoint-initdb.d/</code>配下にSQLを配備すると、起動時にファイル名の順番で実行してくれて便利です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.gqlgen-ekiapp</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── init</span><br><span class="line">    ├── 1_create.sql              <span class="comment"># DDL</span></span><br><span class="line">    ├── 2_copy.sql                <span class="comment"># Copy句</span></span><br><span class="line">    ├── company20200309.csv       <span class="comment"># DownloadしたCSV</span></span><br><span class="line">    ├── join20200306.csv          <span class="comment"># DownloadしたCSV</span></span><br><span class="line">    ├── line20200306free.csv      <span class="comment"># DownloadしたCSV</span></span><br><span class="line">    └── station20200316free.csv   <span class="comment"># DownloadしたCSV</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初回だけ</span></span><br><span class="line">docker volume create pg-data-eki</span><br><span class="line"></span><br><span class="line"><span class="comment"># 起動（コンテナイメージ作成処理でinitフォルダ以下が/docker-entrypoint-initdb.d/にコピーされ、createとcopyが実行される）</span></span><br><span class="line">docker-compose up --build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line"><span class="comment">#docker-compose down</span></span><br></pre></td></tr></table></figure><p>上手く起動できれば、psqlツールを用いると結果が取得できるようになっています。psqlを使わずともお好きなSQLクライアントツールで確認してみてください。先ほどのDockerfileだと postgres/postgresでログインできます。</p><figure class="highlight bash"><figcaption><span>接続確認</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d postgres -c <span class="string">'select * from station limit 10'</span>;</span><br></pre></td></tr></table></figure><p>データ登録はこれでおしまいです。</p><h1 id="GraphQLスキーマ設計"><a href="#GraphQLスキーマ設計" class="headerlink" title="GraphQLスキーマ設計"></a>GraphQLスキーマ設計</h1><p>ここからGraphQLのスキーマを検討します。GraphQLスキーマ設計のコツは、上図の事業マスタ(Company)、路線マスタ(Line)、駅マスタ(Station)、接続駅マスタ(Join)といった<strong>RDBのスキーマ構造に縛られない</strong>ことです。設計上の重要なインプットではありますが、いったんRDBは忘れWebAPIとしてどういう構造が使いやすいかを考えて設計します。</p><p>あるべき構造を考え、さらに仕様書ページを参考に、型・必須有無を設定します。元データにはもっと多くの属性が存在しますが、今回は簡略化のためかなり削っています。必要に応じて追加してください。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Station &#123;</span><br><span class="line">    stationCD: Int!</span><br><span class="line">    lineName: <span class="built_in">String</span></span><br><span class="line">    stationName: <span class="built_in">String</span>!</span><br><span class="line">    address: <span class="built_in">String</span></span><br><span class="line">    beforeStation: Station</span><br><span class="line">    afterStation: Station</span><br><span class="line">    transferStation: [Station]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回はStationという型のみを定義します。beforeStation/afterStationは同じ路線（JR山手線とかJR東海道線とか）の前後の駅を指し、transferStationは乗り換え駅を指します。今回グラフぽいところは、Stationの中に、beforeStation/afterStation/transferSationという別のStationのフィールドを持っていることです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Query &#123;</span><br><span class="line">    stationByCD(stationCD: Int): Station!</span><br><span class="line">    stationByName(stationName: String): [Station]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>データ型が宣言できれば、Queryというエンドポイントとなるルートの関数を宣言します。<code>stationByName</code>と<code>stationByCD</code>の2つです。駅名で検索できるか、駅CDで検索できるかの2種類です。<code>[Station]</code>で配列であることを示します。駅名だと”横浜”で検索すると、<code>JR根岸線</code>や<code>JR横須賀線</code>など11路線がヒットしますので複数受け取れるようにしないとならないです。<code>stationCD</code>は「路線×駅」を示すIDで、JR根岸線の横浜駅といったかたちで駅データ.jpさんに登録されていて、ユニークな値ですので単一のStationを返すようにします。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Query &#123;</span><br><span class="line">    stationByName(stationName: <span class="built_in">String</span>): [Station]</span><br><span class="line">    stationByCD(stationCD: Int): Station!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これらを1つにした.graphqlsファイルを作成し、gqlgenでサーバコードのテンプレートを作成します。</p><h1 id="GraphQLスキーマからGoコードを生成"><a href="#GraphQLスキーマからGoコードを生成" class="headerlink" title="GraphQLスキーマからGoコードを生成"></a>GraphQLスキーマからGoコードを生成</h1><p>gqlgenの<a href="https://gqlgen.com/getting-started/#install-gqlgen" target="_blank" rel="noopener">Getting Started</a>を参考にしてgqlgenをインストールします。Goのインストールは必須です。私は1.14を使っています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.14.2 linux/amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># gqlgenのインストール</span></span><br><span class="line">$ go get -u github.com/99designs/gqlgen</span><br></pre></td></tr></table></figure><p>今回作成するサンプルを仮に<code>gqlgen-ekiapp</code>と名付けます。</p><figure class="highlight bash"><figcaption><span>プロジェクトの作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir gqlgen-ekiapp</span><br><span class="line">$ <span class="built_in">cd</span> gqlgen-ekiapp</span><br><span class="line">$ go mod init</span><br></pre></td></tr></table></figure><p>以下のような構成になります。</p><figure class="highlight bash"><figcaption><span>プロジェクトディレクトリ構成(コード生成前）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.mod</span><br><span class="line">└── graph</span><br><span class="line">    └── schema.graphqls    <span class="comment"># GraphQLスキーマ</span></span><br></pre></td></tr></table></figure><p>このルートディレクトリで<code>gqlgen init</code>（2回目以降は<code>gqlgen generate</code>）コマンドでテンプレートコードを生成します。</p><figure class="highlight bash"><figcaption><span>テンプレートコードの生成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gqlgen init</span><br><span class="line">$ go mod tidy</span><br></pre></td></tr></table></figure><p>そうすると、以下のような構成になります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── gqlgen.yml                <span class="comment"># gqlgenコマンドのコンフィグファイル(初回のみ作成)</span></span><br><span class="line">├── graph</span><br><span class="line">│   ├── generated</span><br><span class="line">│   │   └── generated.go      <span class="comment"># 自動生成されたクエリのパース処理などの部分</span></span><br><span class="line">│   ├── model</span><br><span class="line">│   │   └── models_gen.go     <span class="comment"># 自動生成されたmodel</span></span><br><span class="line">│   ├── resolver.go           <span class="comment"># Resolverコードの実体を実装する部分(☆初回のみ作成)</span></span><br><span class="line">│   ├── schema.graphqls       <span class="comment"># GraphQLスキーマ</span></span><br><span class="line">│   └── schema.resolvers.go   <span class="comment"># 各Resolverのエンドポイント(☆初回のみ作成)</span></span><br><span class="line">├── server.go                 <span class="comment"># mainパッケージ</span></span><br><span class="line">|                </span><br><span class="line">└── postgresql</span><br><span class="line">    ├── ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>最初はresolver.goを実装していきます。</p><h1 id="SQLクエリからGoのStructを作成（シンプルな実装）"><a href="#SQLクエリからGoのStructを作成（シンプルな実装）" class="headerlink" title="SQLクエリからGoのStructを作成（シンプルな実装）"></a>SQLクエリからGoのStructを作成（シンプルな実装）</h1><p>resolver.goの実装に入る前に前処理を行います。今回はデータストアがPostgreSQLに存在し、すでにテーブルが実装済みでデータも登録されている状態ですこれを上手く利用したいと思います。</p><p>DBスキーマからGoのStructを作成するツールはsqlboilerなどたくさんの選択肢がありますが、今回は<a href="https://github.com/xo/xo" target="_blank" rel="noopener">xo/xo</a>を利用します。xo/xoではSQLからStructを生成できて便利です。</p><p>インプットとして利用するSQLは、PostgreSQLからJoinを駆使して、同一路線の前後の駅や、乗り換え情報を一度に取得しています。そのため少しばかり重厚です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xoのインストール</span></span><br><span class="line">$ go get -u github.com/xo/xo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出力先フォルダの作成</span></span><br><span class="line">$ mkdir -p models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Structの生成</span></span><br><span class="line">$ xo pgsql://postgres:postgres@localhost/postgres?sslmode=<span class="built_in">disable</span> -N -M -B -T StationConn -o models/ &lt;&lt; ENDSQL</span><br><span class="line">select li.line_name,</span><br><span class="line">       li.line_name_h,</span><br><span class="line">       li.line_cd,</span><br><span class="line">       st.station_cd,</span><br><span class="line">       st.station_g_cd,</span><br><span class="line">       st.address,</span><br><span class="line">       st.station_name,</span><br><span class="line">       COALESCE(s2l.line_name, <span class="string">''</span>)     as before_line_name,</span><br><span class="line">       COALESCE(st2.station_cd, 0)    as before_station_cd,</span><br><span class="line">       COALESCE(st2.station_name, <span class="string">''</span>) as before_station_name,</span><br><span class="line">       COALESCE(st2.address, <span class="string">''</span>)      as before_address,</span><br><span class="line">       COALESCE(s3l.line_name, <span class="string">''</span>)     as after_line_name,</span><br><span class="line">       COALESCE(st3.station_cd, 0)    as after_station_cd,</span><br><span class="line">       COALESCE(st3.station_name, <span class="string">''</span>) as after_station_name,</span><br><span class="line">       COALESCE(st2.address, <span class="string">''</span>)      as after_address,</span><br><span class="line">       COALESCE(gli.line_name, <span class="string">''</span>)    as transfer_line_name,</span><br><span class="line">       COALESCE(gs.station_cd, 0)     as transfer_station_cd,</span><br><span class="line">       COALESCE(gs.station_name, <span class="string">''</span>)  as transfer_station_name,</span><br><span class="line">       COALESCE(gs.address, <span class="string">''</span>)       as transfer_address</span><br><span class="line">from station st</span><br><span class="line">         inner join line li on st.line_cd = li.line_cd</span><br><span class="line">         left outer join station_join sjb on st.line_cd = sjb.line_cd and st.station_cd = sjb.station_cd2</span><br><span class="line">         left outer join station_join sja on st.line_cd = sja.line_cd and st.station_cd = sja.station_cd1</span><br><span class="line">         left outer join station st2 on sjb.line_cd = st2.line_cd and sjb.station_cd1 = st2.station_cd</span><br><span class="line">         left outer join line s2l on st2.line_cd = s2l.line_cd</span><br><span class="line">         left outer join station st3 on sja.line_cd = st3.line_cd and sja.station_cd2 = st3.station_cd</span><br><span class="line">         left outer join line s3l on st3.line_cd = s3l.line_cd</span><br><span class="line">         left outer join station gs on st.station_g_cd = gs.station_g_cd and st.station_cd &lt;&gt; gs.station_cd</span><br><span class="line">         left outer join line gli on gs.line_cd = gli.line_cd</span><br><span class="line"><span class="built_in">where</span> st.station_cd = %%stationCD int%%</span><br><span class="line">  and st.e_status = 0</span><br><span class="line">order by st.e_sort</span><br><span class="line">ENDSQL</span><br></pre></td></tr></table></figure><p>正常に実行できると、models配下にクエリ結果を格納するStructと実行用の関数が生成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── models                <span class="comment"># 自動生成対象のフォルダ</span></span><br><span class="line">│   ├── stationconn.xo.go <span class="comment"># 自動生成コード</span></span><br><span class="line">│   └── xo_db.xo.go       <span class="comment"># 自動生成コード</span></span><br><span class="line">|</span><br><span class="line">└── postgresql</span><br><span class="line">    ├── ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h1 id="Resolverの実装（初回）"><a href="#Resolverの実装（初回）" class="headerlink" title="Resolverの実装（初回）"></a>Resolverの実装（初回）</h1><p><code>resolver.go</code> を実装していきます。ResolverにgetStation関数を追加して実装していきます。この実装は後で書き直すので流すくらいでOKです。少し長いです。</p><details><summary>resolver.goの実装</summary><pre><code>func (r *Resolver) getStationByCD(ctx context.Context, stationCd *int) (*model.StationConn, error) {    stations, err := models.StationConnsByStationCD(db, *stationCd)    if err != nil {        return nil, err    }    if len(stations) == 0 {        return nil, errors.New("not found")    }    first := stations[0]    var beforeStation *model.Station    if first.BeforeStationName != "" {        beforeStation = &model.Station{            LineName:    &first.LineName,            StationCd:   first.BeforeStationCd,            StationName: first.BeforeStationName,            Address:     nil,        }    }    var afterStation *model.Station    if first.AfterStationName != "" {        afterStation = &model.Station{            LineName:    &first.LineName,            StationCd:   first.AfterStationCd,            StationName: first.AfterStationName,            Address:     nil,        }    }    transfers := make([]*model.Station, 0, len(stations))    for _, v := range stations {        if v.TransferStationName == "" {            continue        }        transfers = append(transfers, &model.Station{            LineName:    &v.TransferLineName,            StationCd:   v.TransferStationCd,            StationName: v.TransferStationName,            Address:     nil,        })    }    return &model.StationConn{        Station: &model.Station{            LineName:    &first.LineName,            StationCd:   first.StationCd,            StationName: first.StationName,            Address:     &first.Address,        },        TransferStation: transfers,        BeforeStation:   beforeStation,        AfterStation:    afterStation,    }, nil}</code></pre></details><p>xoで生成された関数を呼び出すだけです。ただし、呼び出し後はGraphQLのスキーマに沿った応答を返すためStruct詰め替えなGlueコードが多いです。</p><p>これを、<code>schema.resolvers.go</code> から呼び出してあげます。</p><figure class="highlight go"><figcaption><span>schema.resolvers.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *queryResolver)</span> <span class="title">StationByCd</span><span class="params">(ctx context.Context, stationCd *<span class="keyword">int</span>)</span> <span class="params">(*model.Station, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.getStationByCD(ctx, stationCd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>queryResolverから先ほどの関数を呼び出せることについてちょっと謎感がありますね。これは<code>queryResolver</code>は先ほど実装した <code>Resolver</code> を埋め込んでいるため、Resolverに実装した関数をそのまま呼べるというテクニックがgqlgenで行われています。簡単にインジェクションできて面白いですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> queryResolver <span class="keyword">struct</span>&#123; *Resolver &#125;</span><br></pre></td></tr></table></figure><p>記事中では省略していますが、この手順と同様の流れで <code>getStationByName</code> も実装しています。</p><h1 id="実装したデータのお試し"><a href="#実装したデータのお試し" class="headerlink" title="実装したデータのお試し"></a>実装したデータのお試し</h1><p>先ほどのサーバを起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$go</span> run server.go</span><br><span class="line">2020/06/09 09:00:11 connect to http://localhost:8080/ <span class="keyword">for</span> GraphQL playground</span><br></pre></td></tr></table></figure><p>ブラウザでlocalhost:8080にアクセスするとGraphQLコンソールが開けるのでそれでお試しします。JR東海道本線の横浜駅を示す station_cdの<code>1130105</code>で検索してみます。</p><img src="/images/20200609/photo_20200609_04.gif"><p>上手く動きました🎉</p><h1 id="今の実装の課題"><a href="#今の実装の課題" class="headerlink" title="今の実装の課題"></a>今の実装の課題</h1><p>先ほどのGraphQLサーバは表面上は上手く動きました。一方で今の実装では以下の課題があります。</p><ol><li>1つのSQLで全てのデータ（前後の隣駅や乗換駅）を取得しているため、クエリにそれらのフィールド無い場合もDBに負荷をかけてしまう。（また巨大なSQLになりがちで性能劣化の懸念がある）</li><li>乗換駅の隣駅の隣駅といった、<strong>ネストしたクエリを実行できない</strong></li></ol><p>これを解決する1つとして、<strong>SQLの結合が必要になるフィールドには GraphQL resolverを分離し別に用意する</strong> 方法があります。gqlgen側にクエリの実行順序やレスポンス整形を委ねるということです。これを行うと各resolverの実装をシンプルに保ちつつ、複雑なクエリに対応できます。</p><h1 id="Resolverを別に用意する"><a href="#Resolverを別に用意する" class="headerlink" title="Resolverを別に用意する"></a>Resolverを別に用意する</h1><p><code>gqlgen init</code>で作成された、gqlgenの設定ファイルを以下のように変更します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">models:</span></span><br><span class="line">  <span class="comment"># 中略</span></span><br><span class="line"><span class="attr">  Station:</span>                <span class="comment"># GraphQLスキーマのStation型</span></span><br><span class="line"><span class="attr">    fields:</span></span><br><span class="line"><span class="attr">      beforeStation:</span>      <span class="comment"># フィールド名</span></span><br><span class="line"><span class="attr">        resolver:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      afterStation:</span>       <span class="comment"># フィールド名</span></span><br><span class="line"><span class="attr">        resolver:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      transferStation:</span>    <span class="comment"># フィールド名</span></span><br><span class="line"><span class="attr">        resolver:</span>  <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>GraphQLスキーマで定義した<code>Station</code>のフィールドである、<code>beforeStation</code>, <code>afterStation</code>, <code>transferStation</code>にたいして、 <code>resolver: true</code> を設定することで、このフィールドを取得する際にはそれぞれ個別のresolverを用いるようにgqlgenに指定します。</p><p>変更を保存したら、既存の<code>resolver.go</code>と<code>schema.resolvers.go</code>はバックアップを取って削除しておきましょう。続いてgql generateで再生成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gqlgen generate</span><br></pre></td></tr></table></figure><p>そうすると、<code>schema.resolvers.go</code>で実装すべき関数が増えます。引数は *model.Stationでここから<code>stationCD</code> が取得できるので、これをキーに前後の隣駅と、乗り換え駅を取得していきます。</p><figure class="highlight go"><figcaption><span>schema.resolvers.goで増えた関数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *stationResolver)</span> <span class="title">BeforeStation</span><span class="params">(ctx context.Context, obj *model.Station)</span> <span class="params">(*model.Station, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// TODO 実装</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *stationResolver)</span> <span class="title">AfterStation</span><span class="params">(ctx context.Context, obj *model.Station)</span> <span class="params">(*model.Station, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// TODO 実装</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *stationResolver)</span> <span class="title">TransferStation</span><span class="params">(ctx context.Context, obj *model.Station)</span> <span class="params">([]*model.Station, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// TODO 実装</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実装ですが、今まで通りResolver.go側に実体の実装を行います。SQLの結合部分がなくなったので、どのSQLもかなりシンプルになります。本文では駅CD検索と乗り換え駅検索の2つのResolverの実装を載せて、残りは省略しています。</p><p>まずはxoでSQLからStructと検索用の関数を生成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 駅CD検索</span></span><br><span class="line">xo pgsql://postgres:postgres@localhost/postgres?sslmode=<span class="built_in">disable</span> -N -M -B -T StationByCD -o models/ &lt;&lt; ENDSQL</span><br><span class="line">select l.line_cd, l.line_name, s.station_cd, station_g_cd, s.station_name, s.address </span><br><span class="line">from station s</span><br><span class="line">         inner join line l on s.line_cd = l.line_cd</span><br><span class="line"><span class="built_in">where</span> s.station_cd = %%stationCD int%%</span><br><span class="line">  and s.e_status = 0</span><br><span class="line">ENDSQL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乗り換え検索</span></span><br><span class="line"><span class="comment"># 乗換駅検索</span></span><br><span class="line">xo pgsql://postgres:postgres@localhost/postgres?sslmode=<span class="built_in">disable</span> -N -M -B -T Transfer -o models/ &lt;&lt; ENDSQL</span><br><span class="line">select s.station_cd,</span><br><span class="line">       ls.line_cd,</span><br><span class="line">       ls.line_name,</span><br><span class="line">       s.station_name,</span><br><span class="line">       s.station_g_cd,</span><br><span class="line">       s.address,</span><br><span class="line">       COALESCE(lt.line_cd, 0)     as transfer_line_cd,</span><br><span class="line">       COALESCE(lt.line_name, <span class="string">''</span>)   as transfer_line_name,</span><br><span class="line">       COALESCE(t.station_cd, 0)   as transfer_station_cd,</span><br><span class="line">       COALESCE(t.station_name, <span class="string">''</span>) as transfer_station_name,</span><br><span class="line">       COALESCE(t.address, <span class="string">''</span>)      as transfer_address</span><br><span class="line">from station s</span><br><span class="line">         left outer join station t on s.station_g_cd = t.station_g_cd and s.station_cd &lt;&gt; t.station_cd</span><br><span class="line">         left outer join line ls on s.line_cd = ls.line_cd</span><br><span class="line">         left outer join line lt on t.line_cd = lt.line_cd</span><br><span class="line"><span class="built_in">where</span> s.station_cd = %%stationCD int%%</span><br><span class="line">ENDSQL</span><br></pre></td></tr></table></figure><p>Resolverを分離した分、SQLが少しシンプルになりました。</p><figure class="highlight go"><figcaption><span>Reolverの実装部分（駅CD検索と乗り換え駅取得の2つだけ抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 駅CD検索部分</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span> <span class="title">getStationByCD</span><span class="params">(ctx context.Context, stationCd *<span class="keyword">int</span>)</span> <span class="params">(*model.Station, error)</span></span> &#123;</span><br><span class="line">stations, err := models.StationByCDsByStationCD(db, *stationCd)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(stations) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line">first := stations[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;model.Station&#123;</span><br><span class="line">StationCd:   first.StationCd,</span><br><span class="line">StationName: first.StationName,</span><br><span class="line">LineName:    &amp;first.LineName,</span><br><span class="line">Address:     &amp;first.Address,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 乗り換え駅取得部分</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span> <span class="title">transferStation</span><span class="params">(ctx context.Context, obj *model.Station)</span> <span class="params">([]*model.Station, error)</span></span> &#123;</span><br><span class="line">stationCd := obj.StationCd</span><br><span class="line"></span><br><span class="line">records, err := models.TransfersByStationCD(db, stationCd)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp := <span class="built_in">make</span>([]*model.Station, <span class="number">0</span>, <span class="built_in">len</span>(records))</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> records &#123;</span><br><span class="line"><span class="keyword">if</span> v.TransferStationName == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">resp = <span class="built_in">append</span>(resp, &amp;model.Station&#123;</span><br><span class="line">StationCd:   v.TransferStationCd,</span><br><span class="line">StationName: v.TransferStationName,</span><br><span class="line">LineName:    &amp;v.TransferLineName,</span><br><span class="line">Address:     &amp;v.TransferAddress,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Resolver側の実装は、xoで生成された検索用の関数を呼び出して、Structの詰め替え作業をしているだけです。これを <code>schema.resolvers.go</code> で生成されたテンプレート関数から呼び出してあげます。</p><p>こういったResolver関数だけ用意しておけば、GraphQLのクエリでそのフィールドが指定されているときだけSQLが実行されるようになります。残りのResolverの実装が終わったら<code>go run server.go</code> でサーバを起動させ、localhost:8080のコンソールで確認します。</p><h1 id="クエリ：「渋谷駅」を検索する"><a href="#クエリ：「渋谷駅」を検索する" class="headerlink" title="クエリ：「渋谷駅」を検索する"></a>クエリ：「渋谷駅」を検索する</h1><p>今回開発したGraphQLサーバに対してクエリを実行して動作確認しましょう。</p><p>まずは<code>stationByName</code>で大崎駅で検索します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query osaki&#123;</span><br><span class="line">  stationByName(stationName: <span class="string">"大崎"</span>) &#123;</span><br><span class="line">    lineName</span><br><span class="line">    stationCD</span><br><span class="line">    stationName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>すると、大崎駅を利用する各路線とその駅CD（stationCD）が取得できます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"stationByName"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"lineName"</span>: <span class="string">"JR山手線"</span>,</span><br><span class="line">        <span class="attr">"stationCD"</span>: <span class="number">1130201</span>,</span><br><span class="line">        <span class="attr">"stationName"</span>: <span class="string">"大崎"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"lineName"</span>: <span class="string">"JR埼京線"</span>,</span><br><span class="line">        <span class="attr">"stationCD"</span>: <span class="number">1132101</span>,</span><br><span class="line">        <span class="attr">"stationName"</span>: <span class="string">"大崎"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"lineName"</span>: <span class="string">"JR湘南新宿ライン"</span>,</span><br><span class="line">        <span class="attr">"stationCD"</span>: <span class="number">1133307</span>,</span><br><span class="line">        <span class="attr">"stationName"</span>: <span class="string">"大崎"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"lineName"</span>: <span class="string">"りんかい線"</span>,</span><br><span class="line">        <span class="attr">"stationCD"</span>: <span class="number">9933708</span>,</span><br><span class="line">        <span class="attr">"stationName"</span>: <span class="string">"大崎"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="クエリ：「大崎駅」の隣の駅を調べる"><a href="#クエリ：「大崎駅」の隣の駅を調べる" class="headerlink" title="クエリ：「大崎駅」の隣の駅を調べる"></a>クエリ：「大崎駅」の隣の駅を調べる</h1><p>先ほど取得した<code>1130201</code>のstationCDを元に、stationByCDを指定して隣駅を調べます。隣駅は、<code>beforeStation</code>、<code>afterStation</code>で調べられます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">query nextStation &#123;</span><br><span class="line">  stationByCD(stationCD: <span class="number">1130201</span>) &#123;</span><br><span class="line">    lineName</span><br><span class="line">    stationCD</span><br><span class="line">    stationName</span><br><span class="line">    beforeStation &#123;</span><br><span class="line">      lineName</span><br><span class="line">      stationCD</span><br><span class="line">      stationName</span><br><span class="line">    &#125;</span><br><span class="line">    afterStation &#123;</span><br><span class="line">      lineName</span><br><span class="line">      stationCD</span><br><span class="line">      stationName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>すると、大崎の隣駅は<code>五反田</code>と<code>品川</code>であることがわかります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"stationByCD"</span>: &#123;</span><br><span class="line">      <span class="attr">"lineName"</span>: <span class="string">"JR山手線"</span>,</span><br><span class="line">      <span class="attr">"stationCD"</span>: <span class="number">1130201</span>,</span><br><span class="line">      <span class="attr">"stationName"</span>: <span class="string">"大崎"</span>,</span><br><span class="line">      <span class="attr">"beforeStation"</span>: &#123;</span><br><span class="line">        <span class="attr">"lineName"</span>: <span class="string">"JR山手線"</span>,</span><br><span class="line">        <span class="attr">"stationCD"</span>: <span class="number">1130202</span>,</span><br><span class="line">        <span class="attr">"stationName"</span>: <span class="string">"五反田"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"afterStation"</span>: &#123;</span><br><span class="line">        <span class="attr">"lineName"</span>: <span class="string">"JR山手線"</span>,</span><br><span class="line">        <span class="attr">"stationCD"</span>: <span class="number">1130229</span>,</span><br><span class="line">        <span class="attr">"stationName"</span>: <span class="string">"品川"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="クエリ：五反田の乗り換え駅を調べる"><a href="#クエリ：五反田の乗り換え駅を調べる" class="headerlink" title="クエリ：五反田の乗り換え駅を調べる"></a>クエリ：五反田の乗り換え駅を調べる</h1><p><code>transferStation</code>を追加することで、乗換駅を取得できます。beforeStationに<code>beforeStation</code>を追加することで、五反田駅の乗換駅を取得します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">query stationByCD &#123;</span><br><span class="line">  stationByCD(stationCD: <span class="number">1130201</span>) &#123;</span><br><span class="line">    lineName</span><br><span class="line">    stationCD</span><br><span class="line">    stationName</span><br><span class="line">    beforeStation &#123;</span><br><span class="line">      lineName</span><br><span class="line">      stationCD</span><br><span class="line">      stationName</span><br><span class="line">      transferStation &#123;</span><br><span class="line">        lineName</span><br><span class="line">        stationCD</span><br><span class="line">        stationName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    afterStation &#123;</span><br><span class="line">      lineName</span><br><span class="line">      stationCD</span><br><span class="line">      stationName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そうすると、五反田駅の乗換駅が、東急池上線と都営浅草線があることがわかります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"stationByCD"</span>: &#123;</span><br><span class="line">      <span class="attr">"lineName"</span>: <span class="string">"JR山手線"</span>,</span><br><span class="line">      <span class="attr">"stationCD"</span>: <span class="number">1130201</span>,</span><br><span class="line">      <span class="attr">"stationName"</span>: <span class="string">"大崎"</span>,</span><br><span class="line">      <span class="attr">"beforeStation"</span>: &#123;</span><br><span class="line">        <span class="attr">"lineName"</span>: <span class="string">"JR山手線"</span>,</span><br><span class="line">        <span class="attr">"stationCD"</span>: <span class="number">1130202</span>,</span><br><span class="line">        <span class="attr">"stationName"</span>: <span class="string">"五反田"</span>,</span><br><span class="line">        <span class="attr">"transferStation"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"lineName"</span>: <span class="string">"東急池上線"</span>,</span><br><span class="line">            <span class="attr">"stationCD"</span>: <span class="number">2600501</span>,</span><br><span class="line">            <span class="attr">"stationName"</span>: <span class="string">"五反田"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"lineName"</span>: <span class="string">"都営浅草線"</span>,</span><br><span class="line">            <span class="attr">"stationCD"</span>: <span class="number">9930205</span>,</span><br><span class="line">            <span class="attr">"stationName"</span>: <span class="string">"五反田"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"afterStation"</span>: &#123;</span><br><span class="line">        <span class="attr">"lineName"</span>: <span class="string">"JR山手線"</span>,</span><br><span class="line">        <span class="attr">"stationCD"</span>: <span class="number">1130229</span>,</span><br><span class="line">        <span class="attr">"stationName"</span>: <span class="string">"品川"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="フラグメントを活用する"><a href="#フラグメントを活用する" class="headerlink" title="フラグメントを活用する"></a>フラグメントを活用する</h1><p>どの要素も、同じような属性を持っているので冗長な気がしますね。GraphQL クエリの「フラグメント」を使って共通化する事ができます。<code>stationF</code>というフラグメントに、3つのフィールドを集約しました。利用する側は <code>...stationF</code>という形で呼び出します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fragment stationF on Station &#123;</span><br><span class="line">  lineName</span><br><span class="line">  stationCD</span><br><span class="line">  stationName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query stationByCD &#123;</span><br><span class="line">  stationByCD(stationCD: <span class="number">1130201</span>) &#123;</span><br><span class="line">    ...stationF</span><br><span class="line">    beforeStation &#123;</span><br><span class="line">      ...stationF</span><br><span class="line">      transferStation &#123;</span><br><span class="line">        ...stationF</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    afterStation &#123;</span><br><span class="line">      ...stationF</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果はフラグメントを利用する前と同様です。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"stationByCD"</span>: &#123;</span><br><span class="line">      <span class="attr">"lineName"</span>: <span class="string">"JR山手線"</span>,</span><br><span class="line">      <span class="attr">"stationCD"</span>: <span class="number">1130201</span>,</span><br><span class="line">      <span class="attr">"stationName"</span>: <span class="string">"大崎"</span>,</span><br><span class="line">      <span class="attr">"beforeStation"</span>: &#123;</span><br><span class="line">        <span class="attr">"lineName"</span>: <span class="string">"JR山手線"</span>,</span><br><span class="line">        <span class="attr">"stationCD"</span>: <span class="number">1130202</span>,</span><br><span class="line">        <span class="attr">"stationName"</span>: <span class="string">"五反田"</span>,</span><br><span class="line">        <span class="attr">"transferStation"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"lineName"</span>: <span class="string">"東急池上線"</span>,</span><br><span class="line">            <span class="attr">"stationCD"</span>: <span class="number">2600501</span>,</span><br><span class="line">            <span class="attr">"stationName"</span>: <span class="string">"五反田"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"lineName"</span>: <span class="string">"都営浅草線"</span>,</span><br><span class="line">            <span class="attr">"stationCD"</span>: <span class="number">9930205</span>,</span><br><span class="line">            <span class="attr">"stationName"</span>: <span class="string">"五反田"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"afterStation"</span>: &#123;</span><br><span class="line">        <span class="attr">"lineName"</span>: <span class="string">"JR山手線"</span>,</span><br><span class="line">        <span class="attr">"stationCD"</span>: <span class="number">1130229</span>,</span><br><span class="line">        <span class="attr">"stationName"</span>: <span class="string">"品川"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フラグメントを活用すると、クエリ本体の密度が高まって良いですね。（SQLにもこういう文法が欲しい..）</p><p>見知ったデータで試すと意図したクエリになっているかすぐ分かるのでGraphQLの学習には向いているとおもいます。</p><h1 id="次の拡張にむけて"><a href="#次の拡張にむけて" class="headerlink" title="次の拡張にむけて"></a>次の拡張にむけて</h1><p>現状の実装ではいくつか課題が出ることが分かっています。ざっと問題になりやすいものだけ上げておきます</p><ol><li>N+1クエリ<ul><li>beforeStation/afterStation/transferStationなどResolverを分割したのは良いですが、gqlgen側によって1回ずつ実行されます。クエリによってはとても大きな負荷になりえます。対応策としては<code>DataLoader</code>と呼ばれるバッチ処理に対応したライブラリでサーバサイドを実装すると良いでしょう。</li></ul></li><li>それでも負荷が大きいクエリ対策<ul><li>サーバに負荷を書けるようなネストが深いクエリを実行されると、1のバッチ処理対応をしても負荷が高くなります。また、今回は駅名重複や乗り換え駅でしか複数件数が取得できず、かつ件数が限られるため良いですが、データによっては最大件数の制約をかけたほうが良いでしょう。クエリの複雑とその制約に関しては <a href="https://gqlgen.com/reference/complexity/#limiting-query-complexity" target="_blank" rel="noopener">Limiting Query Complexity</a>で指定ができるようです</li></ul></li><li>認証認可<ul><li>GraphQLの仕様とは外れますが、実アプリだと認証認可が必要になってくると思います。認証については<a href="https://gqlgen.com/recipes/authentication/" target="_blank" rel="noopener">Recipes/Autehtification</a>で触れられています。認可もこのページの<code>directives</code>という仕組みで対応できるか検討します</li></ul></li></ol><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>GraphQL クエリを学ぶ場合、スターウォーズや英語版ポケモンに馴染みがあればそれらを用いる良いでしょう。もし駅や路線の方が理解しやすいのであれば、今回実装したサーバを用いると便利だと思います。少しでも皆さまのGraphQLライフの参考になればと思います。</p><p>GraphQLサーバを実装について。実装前はイマイチどこまでがフレームワークが担って、どこから個別実装なのかよく理解できていませんでしたが、実際に手を動かすことによって、その区別が非常にクリアになりました。仕組みが分かるとこのクエリは負荷が高そうだということもすぐ分かるようになると思います。今回は鉄道路線のデータを利用しましたが、他にも公開されているデータを用いたサンプルアプリ実装が増える流れになると良いですね。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200609/top.png&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;の7日目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GraphQL" scheme="https://future-architect.github.io/tags/GraphQL/"/>
    
      <category term="PostgreSQL" scheme="https://future-architect.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #6 とあるマイコンのクロスコンパイラ</title>
    <link href="https://future-architect.github.io/articles/20200608/"/>
    <id>https://future-architect.github.io/articles/20200608/</id>
    <published>2020-06-08T01:37:41.000Z</published>
    <updated>2020-06-08T01:46:47.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXチームの栗田です。もともと宇宙物理を専攻しており、前職では製鉄メーカーでプラントエンジニアをしていました。<br>最近ではもっぱら工場IoT案件で制御系システムとクラウドをつなぐようなことをしていますが、その前は組み込みマイコンで制御系開発をしていました（人工衛星時代の話）。</p><p>IT業界で働き始めると、ソースコードを書いてそれを実行してシステムを動かす、ということを行うことになりますが、その裏で頑張ってくれているのがコンパイラです。普段プログラムを書いていても、「コンパイラ使ったことあるけどその中身までは。。。」「普段Pythonとかで特に意識したことない。」な方もいると思います。</p><p>そこで今回は<a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>ということで、自分でコンパイラを作ります。ただしコンパイラはコンパイラでも、イチから全部作るのはなかなか大変なので、公開されているコンパイラのソースコードを使って、「クロスコンパイラ」を作ってみようと思います。</p><h1 id="クロスコンパイラについて"><a href="#クロスコンパイラについて" class="headerlink" title="クロスコンパイラについて"></a>クロスコンパイラについて</h1><p>今回のテーマはクロスコンパイラですが、そもそもコンパイラとはというところから始めようと思います。</p><h2 id="コンパイラって何"><a href="#コンパイラって何" class="headerlink" title="コンパイラって何"></a>コンパイラって何</h2><p>人間が理解しやすいプログラミング言語で記述されたプログラムを、機械が理解できるバイナリにすることをコンパイルと言います。</p><p>このコンパイルを行うプログラムをコンパイラといいます。</p><p>より厳密には言語や開発環境に応じてオブジェクトファイルに変換するプログラムをコンパイラ、各種オブジェクトコードを紐付けて処理するリンクを行うプログラムをリンカ、この一連の流れを通してビルドと呼ぶこともありますが、gccを始めとして世の中でコンパイラと呼ばれるプログラムはこの一連の流れを一手に行えます（もっと細かく言うとプリプロセッサやアセンブルなどの処理もありますが、細かくしすぎること今回の趣旨から外れますので割愛します。）。ここからは平たくプラグラムを実行ファイル（バイナリ）にするプログラムを、コンパイラと呼んでいくことにします。</p><img src="/images/20200608/photo_20200608_01.png"><p>余談ではありますが、同じ環境で実行できるコンパイラは複数存在します。</p><p>Cで使えるコンパイラとしてはgccやclangがあります。WindowsだとVisual Studioに付属しているコンパイラもあります。</p><p>コンパイラも特定の実行環境上で動くプログラムなので、当然実行環境やバージョンによって挙動が違います。そして気をつけなければいけないのが、同じ名前のコマンドを叩いているように見えても実際は違うコマンドを叩いているようなことがあります。代表的なところでいうと、MacのXcodeにてデフォルトで使えるgccの実体は、エイリアスがついたclangです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> gcc</span><br><span class="line">/usr/bin/gcc</span><br><span class="line">$ gcc -v</span><br><span class="line">Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/4.2.1</span><br><span class="line">Apple clang version 11.0.3 (clang-1103.0.32.59)</span><br><span class="line">Target: x86_64-apple-darwin19.5.0</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin</span><br></pre></td></tr></table></figure><p>gccもclangもコンパイラであることに変わりはないですが、XcodeでインストールされるclangはAppleが提供するclangでして、古いバージョンのライブラリなどが同梱されていてやられることがあります。</p><p>実際に経験した経験したケースでいうと、コンパイルしてできた実行ファイルが特定サイズを超えると余計なバイナリ文字が入ってしまい、結果プログラムが暴走しました。</p><p>古いバージョンのライブラリが同梱されている理由は各種ライブラリのライセンスの関係などがあるのですが、そういうときは、HomebrewやMacPortsでインストールした適切なコンパイラに切り替えましょう。</p><p>さらに余談ですが、コンパイラもプログラムとすると、コンパイラを作るコンパイラが必要となります。まるで鶏が先か卵が先かと言うような話ですが、特定のプログラムを使って同じバージョンの新しいバージョンを作ることをセルフホスティングと呼びます。例えばGoは1.5以降からセルフホスティングされています。</p><h2 id="クロスコンパイラの必要性"><a href="#クロスコンパイラの必要性" class="headerlink" title="クロスコンパイラの必要性"></a>クロスコンパイラの必要性</h2><img src="/images/20200608/photo_20200608_02.png"><p>大学在学時の研究やあるいは趣味でプログラミングしている場合、開発（コンパイル）環境と実行環境が同じケースが多いかと思いますが、異なる環境で動作させなければならないケースがあります。</p><p>このような「開発（コンパイル）環境と異なる実行環境で動くようにプログラムをコンパイルするプログラム」をクロスコンパイラと呼びます。この場合の環境とはアーキテクチャレベルでの話であり、最たる例はマイコンなどの組み込み開発です。ラズパイのようなOSが搭載されているようなものではなく、もっと低レイヤーのものになります。有名どころだとArduinoなどがそれに当たりますが、他にはSTM32bitマイコン、もっと前だとH8マイコンなどがあります。</p><p>マイコンは昨今だと家電の制御部などを想像していただければ良いですが、これらマイコンは開発環境を備えておらず、起動時に記憶領域に書き込まれたプログラムをロードして動くことになります。となると、このマイコン上で動くプログラムを別のマシン上で作る必要があり、このときに必要となるのがクロスコンパイラです。</p><p>開発環境としてはマイコンを提供している会社がIDEの形で提供しており、書き込み用のツールなどもセットで存在します。このツール、会社によっては有償になっていることがあり、確かに無料で使える試用期間が設けられていますが、やはり長期に渡る開発には向きません。</p><p>こんなときの選択肢は、買うか、作るかです。</p><p>今回は作りましょう。</p><h1 id="実際に作ってみる"><a href="#実際に作ってみる" class="headerlink" title="実際に作ってみる"></a>実際に作ってみる</h1><p>今回作るターゲットは arm-none-eabi-gcc です。</p><p>これはARMという組込みアーキテクチャ用のクロスコンパイラです。環境としては、macOS Catalina 10.15.5 &amp; MacPorts とします。なお、過去Ubuntuでもクロスコンパイラを作成したことはありますが、ここではややこしくなるため省きます。</p><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><p>今回の材料は次のとおりです。他にコンパイルに必要なものは、適宜インストールするものとします（さすがにcommand line toolいるでしょ、とかそういう話は特にしません）。</p><p>なお、バージョンとしては基本現時点での最新版でいいと思いますが、gccとbinutilsは直近当てられたパッチ部分がうまく対応してくれなかったので、少し古いものにしました。</p><ul><li>ダウンロードして用意するもの（コンパイルするもの）<ul><li><a href="http://gcc.gnu.org/" target="_blank" rel="noopener">gcc-9.1.0</a></li><li><a href="https://www.gnu.org/software/binutils/" target="_blank" rel="noopener">binutils-2.32</a></li><li><a href="https://sourceware.org/newlib/" target="_blank" rel="noopener">newlib-3.3.0</a></li></ul></li><li>MacPortsでインストールするもの<ul><li>MPC</li><li>GMP</li><li>MPFR</li></ul></li></ul><p>binutilsはアセンブラや逆アセンブラあるいはリンカなどを目的として利用します。</p><p>gccはコンパイラとして利用するために利用します。newlibは組込みシステム向けに実装された標準Cライブラリで、今回gccをコンパイルするときに利用します。</p><p>MacPortsでインストールするとした３つは、gccをコンパイルするときに必要になるものです。</p><p>gcc4.3以降で依存しているMPC, GMP, MPFRをインストールします。</p><h2 id="コマンド"><a href="#コマンド" class="headerlink" title="コマンド"></a>コマンド</h2><h3 id="MacPortsでのインストール"><a href="#MacPortsでのインストール" class="headerlink" title="MacPortsでのインストール"></a>MacPortsでのインストール</h3><p>コマンド一つで終わり、あとは確認です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo port -v install libmpc</span><br><span class="line">$ port deps libmpc                              </span><br><span class="line">Full Name: libmpc @1.1.0_1</span><br><span class="line">Library Dependencies: gmp, mpfr</span><br><span class="line">$ port installed | grep -e mpc -e gmp -e mpfr      </span><br><span class="line">  gmp @6.2.0_1 (active)</span><br><span class="line">  libmpc @1.1.0_1 (active)</span><br><span class="line">  mpfr @4.0.2_1 (active)</span><br></pre></td></tr></table></figure><h3 id="コンパイル時に使うgccの選択"><a href="#コンパイル時に使うgccの選択" class="headerlink" title="コンパイル時に使うgccの選択"></a>コンパイル時に使うgccの選択</h3><p>先程「MacのXcodeでデフォルトされているclang」について説明し、確かにgccで呼び出されているものがAppleのclangだと確認できました。</p><p>これから、コンパイラを切り替えます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo port -v install gcc10</span><br><span class="line">$ port select --list gcc </span><br><span class="line">Available versions <span class="keyword">for</span> gcc:</span><br><span class="line">mp-gcc10</span><br><span class="line">none</span><br><span class="line">$ sudo port -v select --<span class="built_in">set</span> gcc mp-gcc10</span><br><span class="line">Password:</span><br><span class="line">Selecting <span class="string">'mp-gcc10'</span> <span class="keyword">for</span> <span class="string">'gcc'</span> succeeded. <span class="string">'mp-gcc10'</span> is now active.</span><br><span class="line">$ gcc -v                            </span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">COLLECT_LTO_WRAPPER=/opt/<span class="built_in">local</span>/libexec/gcc/x86_64-apple-darwin19/10.1.0/lto-wrapper</span><br><span class="line">Target: x86_64-apple-darwin19</span><br><span class="line">Configured with: /opt/<span class="built_in">local</span>/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_lang_gcc10/gcc10/work/gcc-10.1.0/configure --prefix=/opt/<span class="built_in">local</span> --build=x86_64-apple-darwin19 --<span class="built_in">enable</span>-languages=c,c++,objc,obj-c++,lto,fortran --libdir=/opt/<span class="built_in">local</span>/lib/gcc10 --includedir=/opt/<span class="built_in">local</span>/include/gcc10 --infodir=/opt/<span class="built_in">local</span>/share/info --mandir=/opt/<span class="built_in">local</span>/share/man --datarootdir=/opt/<span class="built_in">local</span>/share/gcc-10 --with-local-prefix=/opt/<span class="built_in">local</span> --with-system-zlib --<span class="built_in">disable</span>-nls --program-suffix=-mp-10 --with-gxx-include-dir=/opt/<span class="built_in">local</span>/include/gcc10/c++/ --with-gmp=/opt/<span class="built_in">local</span> --with-mpfr=/opt/<span class="built_in">local</span> --with-mpc=/opt/<span class="built_in">local</span> --with-isl=/opt/<span class="built_in">local</span> --<span class="built_in">enable</span>-stage1-checking --<span class="built_in">disable</span>-multilib --<span class="built_in">enable</span>-lto --<span class="built_in">enable</span>-libstdcxx-time --with-build-config=bootstrap-debug --with-as=/opt/<span class="built_in">local</span>/bin/as --with-ld=/opt/<span class="built_in">local</span>/bin/ld --with-ar=/opt/<span class="built_in">local</span>/bin/ar --with-bugurl=https://trac.macports.org/newticket --<span class="built_in">disable</span>-tls --with-pkgversion=<span class="string">'MacPorts gcc10 10.1.0_0'</span> --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk</span><br><span class="line">Thread model: posix</span><br><span class="line">Supported LTO compression algorithms: zlib</span><br><span class="line">gcc version 10.1.0 (MacPorts gcc10 10.1.0_0)</span><br></pre></td></tr></table></figure><p>確かに、gccが切り替わりました。</p><h3 id="コンパイル"><a href="#コンパイル" class="headerlink" title="コンパイル"></a>コンパイル</h3><p>上述したリンク先から必要なソースをダウンロードし、下記のように配置します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">work</span><br><span class="line">├── arm-none-eabi-gcc</span><br><span class="line">└── src</span><br><span class="line">    ├── binutils-2.32.tar.xz</span><br><span class="line">    ├── gcc-10.1.0.tar.gz</span><br><span class="line">    └── newlib-3.3.0.tar.gz</span><br></pre></td></tr></table></figure><h4 id="binutilsのコンパイル"><a href="#binutilsのコンパイル" class="headerlink" title="binutilsのコンパイル"></a>binutilsのコンパイル</h4><p>一気にいきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> CFLAGS=<span class="string">"-I/opt/local/include -O2"</span></span><br><span class="line">$ <span class="built_in">export</span> CXXFLAGS=<span class="string">"-I/opt/local/include -O2"</span></span><br><span class="line">$ <span class="built_in">export</span> LDFLAGS=<span class="string">"-L/opt/local/lib"</span></span><br><span class="line">$ tar zxvf binutils-2.32.tar.xz</span><br><span class="line">$ <span class="built_in">cd</span> binutils-2.32</span><br><span class="line">$ ./configure --prefix=/Users/kurita/work/arm-none-eabi-gcc --<span class="built_in">disable</span>-werror --target=arm-none-eabi --<span class="built_in">enable</span>-interwork --<span class="built_in">enable</span>-multilib</span><br><span class="line">$ make -j4</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>特にエラーなどでなければ成功です。</p><h4 id="gccのコンパイル"><a href="#gccのコンパイル" class="headerlink" title="gccのコンパイル"></a>gccのコンパイル</h4><p>こちらも一気にいきます。なお、newlibはgccのコンパイル時に使用するもので、それ自体でコンパイルすることはしません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/work/src</span><br><span class="line">$ tar zxvf newlib-3.3.0.tar.gz</span><br><span class="line">$ tar zxvf gcc-9.1.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> gcc-9.1.0</span><br><span class="line">$ ln -s ../newlib-3.3.0/newlib .</span><br><span class="line">$ mkdir build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ ../configure --prefix=/Users/kurita/work/arm-none-eabi-gcc  --target=arm-none-eabi --<span class="built_in">enable</span>-interwork --<span class="built_in">enable</span>-multilib --with-newlib --<span class="built_in">enable</span>-langages=<span class="string">"c,c++"</span></span><br><span class="line">$ make -j4</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>最後に、パスを通して終わりです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/Users/kurita/work/arm-none-eabi-gcc/bin</span><br></pre></td></tr></table></figure><p>簡単ではありますが、試しに <code>--version</code> で情報表示してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ arm-none-eabi-gcc --version</span><br><span class="line">arm-none-eabi-gcc (GCC) 9.1.0</span><br><span class="line">Copyright (C) 2019 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure><p>これでMacでARM開発する準備が整いました。<br>どうやって書き込むのだとかそういう話はありますが、そこはぜひ実際に買ってみて、試行錯誤しながら開発してみていただきたいと思います。</p><h1 id="クロスコンパイラはマイコンの世界だけではない"><a href="#クロスコンパイラはマイコンの世界だけではない" class="headerlink" title="クロスコンパイラはマイコンの世界だけではない"></a>クロスコンパイラはマイコンの世界だけではない</h1><p>「開発（コンパイル）環境と異なる実行環境で動くようにプログラムをコンパイルするプログラムがクロスコンパイラ」と言いましたが、これはマイコンの世界には閉じません。</p><p>次のコマンドはこのFuture Tech Blogでも何度か出てきている、GoのプログラムをAWS Lambda向けの実行ファイルを作るコマンドです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=linux GOARCH=amd64 go build -o lambda/lambda ./lambda/main.go</span><br></pre></td></tr></table></figure><p>AWS Lambdaで提供されるgoのランタイムはgo1.xなのですが、これはAmazon Linux上で動くことになります。</p><p>そのため、AWS Lambdaに登録するGoのコードは、OSとしてlinuxを指定し、またアーキテクチャとしてamd64を指定します。</p><p>これもクロスコンパイルになります。</p><h1 id="車輪の再実装"><a href="#車輪の再実装" class="headerlink" title="車輪の再実装"></a>車輪の再実装</h1><p>今回のブログで私は一つだけ嘘を付きました。「マイコン用開発環境を用意するときの選択肢は、買うか、作るか」だけではなく、「フリーで公開されているものを使う」という方法が取れます。すでにarm-none-eabi-gccはMacPortsでインストール可能です。Homebrewなどでも公開されているようですので、わざわざ自分で作る必要はありません。</p><p>そのため使いたければ各種パッケージ管理ツールでインストールすればいいだけですが、自分が今使用しているツールがどのようにして作られているかを知ることは、原理原則を理解するには非常に大切かと思います。</p><p>例えば新人さんなど、最初はひたすらポチポチコマンドの写経から始まるかもしれませんが、コマンド一つ一つの意味を考えながら、「このオプションにはこういう意味があるのだ」「今自分はこういうことをしているのだ」ということを理解しながらお仕事していければいいなと思います。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事:"></a>関連記事:</h1><ul><li><a href="https://future-architect.github.io/articles/20200310/">Goの標準ライブラリのコードリーディングのすすめ</a></li><li><a href="https://future-architect.github.io/articles/20200427/">Goならわかるシステムプログラミングが増刷されて初版4刷になりました</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG/DXチームの栗田です。もともと宇宙物理を専攻しており、前職では製鉄メーカーでプラントエンジニアをしていま
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="clang" scheme="https://future-architect.github.io/tags/clang/"/>
    
      <category term="Compiler" scheme="https://future-architect.github.io/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>フューチャー夏のインターン2020。リモート開催予定です</title>
    <link href="https://future-architect.github.io/articles/20200606/"/>
    <id>https://future-architect.github.io/articles/20200606/</id>
    <published>2020-06-06T05:32:59.000Z</published>
    <updated>2020-06-22T09:02:11.183Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200606/photo_20200606_01.png"><p><a href="https://www.future.co.jp/recruit/new/internship/" target="_blank" rel="noopener">https://www.future.co.jp/recruit/new/internship/</a></p><ul><li>2020/06/10: ⑩のインターン内容を追記</li><li>2020/06/10: 交通費について説明を追記</li><li>2020/06/22: Project Campのリンクを追加</li></ul><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、真野です。</p><p>フューチャーのサマーインターン🌞Summer Camp🏄が6月より募集を開始しました。</p><p>夏季インターンを「Summer Camp」と称して提供しており、現在2つのコースがあります。</p><ol><li><strong>Engineer Camp</strong>: エンジニア向けのプログラミング主体のプロジェクト業務を体験するコース</li><li><strong>Project Camp</strong>: だれでも応募OKのプロジェクト業務を体験するコース</li></ol><p>それぞれに良いところがありますが、せっかく技術ブログで紹介するので <strong>Engineer Camp</strong> について細かく説明します。</p><p>Project Campに興味がある方は、ぜひ未来報の記事をご覧ください。</p><iframe class="note-embed" src="https://note.future.co.jp/embed/notes/n3d3b635c4c1b" style="border: 0; display: block; max-width: 99%; width: 494px; padding: 0px; margin: 10px 0px; position: static; visibility: visible;" height="400"></iframe><script async src="https://note.future.co.jp/scripts/embed.js" charset="utf-8"></script><h1 id="2020年はフルリモート開催"><a href="#2020年はフルリモート開催" class="headerlink" title="2020年はフルリモート開催"></a>2020年はフルリモート開催</h1><p>フューチャー史上初のフルリモート🏡💻なインターンです。</p><p>リモートでもパフォーマンスが出るように、Google MeetやSlackなどの環境を用意し、例年と同等以上に学びがある、密度の濃い良い体験ができるように準備しています。また、この状況が落ち着いた後に、もし希望があればオフィス見学することも可能なようです。ボルダリング壁🧗もありますのでそういった場を取れることを祈っています。その他、希望は柔軟に対応しようと思っています。</p><h1 id="実施日程"><a href="#実施日程" class="headerlink" title="実施日程"></a>実施日程</h1><p>8月24日（月）～9月18日（金）<br>　※原則は土日祝日を除く、週5日/8時間の勤務<br>　※期間中、数日程度の欠席は調整可能<br>　※週3～4日でのインターンを希望される場合は理由などを伺い、要検討</p><h1 id="選考プロセス、選考スケジュール"><a href="#選考プロセス、選考スケジュール" class="headerlink" title="選考プロセス、選考スケジュール"></a>選考プロセス、選考スケジュール</h1><p><a href="https://job.axol.jp/cr/s/future_22/mypage/login" target="_blank" rel="noopener">マイページ登録</a>→エントリーシート提出→プログラミングテスト→面接</p><p>まずは「マイページ登録をして欲しいです！」って採用チームの岡田さん<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>が言っていました。</p><h1 id="エントリーシートの提出締切："><a href="#エントリーシートの提出締切：" class="headerlink" title="エントリーシートの提出締切："></a>エントリーシートの提出締切：</h1><p>締切①　　　　2020年6月14日（日） 23時59分<br>締切②(最終)　2020年6月28日（日） 23時59分</p><ul><li>マイページの登録は6月25日（木）までにご登録ください。</li><li>登録はこちら: <a href="https://job.axol.jp/cr/s/future_22/mypage/login" target="_blank" rel="noopener">https://job.axol.jp/cr/s/future_22/mypage/login</a></li></ul><h1 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h1><ul><li><strong>報酬</strong>: 1日あたり12,000円を支給します。<ul><li>※時給1500円/H。8時間勤務を行った場合の計算です。</li><li>※実際の勤務時間に基づいての支給となります。</li></ul></li><li><strong>交通費</strong>: 規定に沿ってご自宅最寄駅から、大崎駅もしくは五反田駅までの交通費を支給</li></ul><h1 id="Engineer-Campのポイント"><a href="#Engineer-Campのポイント" class="headerlink" title="Engineer Campのポイント"></a>Engineer Campのポイント</h1><p><strong>1. 実際の業務に関わることができる</strong></p><p>インターン用のタスクをしてもらうのではなく、<strong>実プロジェクトにアサイン</strong>され、リアル業務を行えます。個人では扱うことのできない技術にも触れられます。また、チームで開発する際の苦労や工夫を知ることもできるのは大きいと思います。当然、社会人になってエンジニアとしてはたらくイメージを持つにはうってつけです。</p><p><strong>2. フューチャーの技術部隊のメンバーがメンター</strong></p><p>実プロジェクトのアサインと聞いて不安に思われた方も多いと思いますが安心してください。フューチャーの各技術分野のスペシャリストがメンターとしてサポートします。社員との距離感も近く、フラットな社風なので、気軽に質問をしやすい環境です。フューチャーの技術力の高さを体感いただきつつ、ご自身のスキルも伸ばしてください。Slackをフル活用しているので疑問を呟くと、きっとすぐに先輩社員がアドバイスしてくれます。</p><p><strong>3. 昨年に比べてパワーアップした1か月のプログラム</strong></p><p>開催期間を昨年までの2週間から、<strong>4週間に延長</strong>しました。2週間でも長いよ！と思われる方もいるかもしれませんが、長いようでもう少し期間があればもっと深く入ることができるのに！という昨年の反省がありました。昨年の参加者満足度100％でしたが、今年はより深く・より面白く・より満足できるプログラムとなるはずです。</p><h1 id="Engineer-Camp-のコース紹介"><a href="#Engineer-Camp-のコース紹介" class="headerlink" title="Engineer Camp のコース紹介"></a>Engineer Camp のコース紹介</h1><p>Engineer Campでは10コースの選べるコースを用意しています。それぞれに特徴があり、使う技術も様々です。ご自身の強みを活かせるコースや興味のあるコースがあるはずです。</p><h2 id="①交通系プラットフォームサービス開発🚲"><a href="#①交通系プラットフォームサービス開発🚲" class="headerlink" title="①交通系プラットフォームサービス開発🚲"></a>①交通系プラットフォームサービス開発🚲</h2><p>DXチームで推進中の顧客プラットフォームサービスのエンハンス・新規サービス開発を行います。フューチャーでも珍しい、toC向けのサービス設計～開発経験が可能です。以下のいずれか、または複数にチャレンジする予定です。</p><ul><li>Vue.js＋TypeScriptでのフロントエンド開発（エンドユーザー向け機能開発や、管理者向け機能）</li><li>Go言語でのAPI設計、開発、テスト、データモデリング</li><li>Terraformを用いたInfrastructure as Codeで実現するAWS構築、エンハンス</li></ul><p>こんな人にオススメ。</p><ul><li>すでに稼働しているtoC向けのサービス開発を行いたい方</li><li>フロントエンド～バックエンド～インフラまで、幅広く技術領域を体験したい方</li></ul><p>プロジェクトリーダーの壺屋さんからアツいメッセージです。</p><ul><li>「進捗度合・内容によっては、 <strong>実サービスへのリリース</strong>・<strong>直接顧客への説明機会を設定します</strong>。サービス設計や開発だけでなく、実際のお客様への説明までチャレンジし、リアルサービスに爪痕を残したい方、ぜひお待ちしております！」</li></ul><h2 id="②スマート工場IoT設計開発🏭"><a href="#②スマート工場IoT設計開発🏭" class="headerlink" title="②スマート工場IoT設計開発🏭"></a>②スマート工場IoT設計開発🏭</h2><p>フューチャー史上、（多分）初となる物理的な工場の設計とITを絡めたプログラミング設計開発支援を行います。以下の技術要素の中で面談の上で作業タスクを決めていきます</p><ul><li>生産設備の要であるPLCアクセスプログラム開発</li><li>AWSでTerraform用いたインフラ構築</li><li>サーバサイドアプリケーションをGo言語で開発</li></ul><p>担当者の真野からのメッセージです。</p><ul><li>リアル工場に興味がある学生さんこそ来たれ！君のコードが工場ラインを動かす（かも）。Web技術と工場の生産技術を合わせると、その超希少な人材になれます。多分担当は<a href="https://future-architect.github.io/articles/20191023/">工場をハックするための基本知識</a>とか<a href="https://future-architect.github.io/articles/20200422/">PyConJP 2019に登壇しました</a>の記事を書いた栗田さんになるので、優しく受け入れてくれます。</li></ul><h2 id="③IoTプラットフォームバックエンド開発🏭"><a href="#③IoTプラットフォームバックエンド開発🏭" class="headerlink" title="③IoTプラットフォームバックエンド開発🏭"></a>③IoTプラットフォームバックエンド開発🏭</h2><p>実際に稼働している、ミッションクリティカル（高い信頼性が求められるシステム）のバックエンドシステムを開発します。フューチャーでは貴重な広域・大規模な接続数（数十万規模）であり、多くの課題が山積みなので一緒に解決に導きましょう。</p><p>担当者の真野からのメッセージです。</p><ul><li>社会的にも意義が大きいプロジェクトです。IoTといってもきれいなところではなく、独特のツラミが多いのですが、特に今プロジェクト全てが詰まっています。笑</li><li>泥臭いところを乗り越えて実現することに価値があると思います。チャレンジャー来たれ！</li></ul><h2 id="④大規模基幹系システムの現行システム解析👪"><a href="#④大規模基幹系システムの現行システム解析👪" class="headerlink" title="④大規模基幹系システムの現行システム解析👪"></a>④大規模基幹系システムの現行システム解析👪</h2><p>人材業界の大規模基幹系システムのダウンサイジングにおいて、ソースコードやPG実行ログなどのFACTに基づいた現行システムの解析手法を体験します。</p><p>こんな人にオススメ。</p><ul><li><a href="https://www.meti.go.jp/shingikai/mono_info_service/digital_transformation/20180907_report.html" target="_blank" rel="noopener">ITシステム2025年の崖</a> をご存知でしょうか？ そこで指摘されている課題として、日本がITで成長していくための障害に現行システムの柔軟性が欠けるという点があります。それを突破するためには、システムに対してのデータに基づく緻密な分析が必要不可欠です</li><li>エンジニアスキルとデータアナリストの両面のスキルを伸ばしたい方</li><li>ソースコードに対してAST解析や、システムの実行ログを収集可視化したい方</li></ul><h2 id="⑤人材ビジネスビックデータ解析👪"><a href="#⑤人材ビジネスビックデータ解析👪" class="headerlink" title="⑤人材ビジネスビックデータ解析👪"></a>⑤人材ビジネスビックデータ解析👪</h2><p>人材業界のお客様が保持するビッグデータを活用して未来のあるべき姿を検討します。その中で、BIツールのTableauを活用したレポート開発📈を経験します。</p><p>こんな人にオススメ。</p><ul><li>複雑なデータを読みほどき、人間が理解できる形に可視化（ビジュアライズ）することに興味がある方</li><li>データアナリスト、データサイエンティスト寄りのエンジニアリングに興味がある方</li></ul><h2 id="⑥モビリティサービスプラットフォーム開発🚗"><a href="#⑥モビリティサービスプラットフォーム開発🚗" class="headerlink" title="⑥モビリティサービスプラットフォーム開発🚗"></a>⑥モビリティサービスプラットフォーム開発🚗</h2><p>日本を代表するMaaSサービス提供会社のプロジェクトメンバーの一員として、車載器やスマホからリアルタイムで入る移動地点情報、センサー情報等のビックデータを取り扱うプラットフォームシステムでのチーム開発を経験します。</p><p>プロジェクトリーダーの吉田さんからアツいメッセージが届いています。</p><ul><li>「日本/世界の様々な業種のエンジニアが挑戦しているMaaSの世界を体験してみませんか？　日本における、最先端のMaaSビジネスを実現する企業のシステムに触れてみたい学生さんを募集します。MaaSの先の未来（スマートシティ、Society5.0）の世界につながる価値ある体験をしてみたいチャレンジャー来たれ！」</li><li>日本のMaaSビジネスの最先端企業のもつシステム/データの現実に直接触れる機会を提供します。　MaaSの挑戦がどのようなものかを感じていただき、そこから沸き上がる発想やアイデアをソースコードで表現し、新しい価値を作り上げて下さい</li></ul><h2 id="⑦マルチクラウド環境の技術検証・開発☁"><a href="#⑦マルチクラウド環境の技術検証・開発☁" class="headerlink" title="⑦マルチクラウド環境の技術検証・開発☁"></a>⑦マルチクラウド環境の技術検証・開発☁</h2><p>社会的な影響を与えるクリティカルなシステムをマルチクラウド環境に構築するためインフラの技術検証、先行開発にチャレンジできます。以下の中から要望とスキルセットにあったものを経験していただきます。</p><ul><li>AWS、GCP上へのTerraformによるInfrastracture as Codeな基盤構築</li><li>AWS、GCP上の複数環境へのデプロイをゴールとしたCI/CD環境構築</li><li>電話、SMSなどを利用するコミュニケーションAPIの技術検証</li></ul><h2 id="⑧サブスクサービスのWebアプリケーション開発📰"><a href="#⑧サブスクサービスのWebアプリケーション開発📰" class="headerlink" title="⑧サブスクサービスのWebアプリケーション開発📰"></a>⑧サブスクサービスのWebアプリケーション開発📰</h2><p>メディア業界の業務を支えるフルクラウドWebアプリケーションサービスの開発を通じて、サブスクリプション型サービスにおけるチーム開発を経験します。</p><ul><li>JavaScriptによるフロントエンド開発</li><li>Java/Goによるバックエンド開発</li></ul><p>こんな人にオススメ。</p><ul><li>メディア業界を支える技術に興味がある人</li><li>フューチャー自身が手掛けるSaaSサービスの裏側に興味がある人</li><li>フロントエンドからバックエンドまでのアプリケーションを開発したい方</li></ul><h2 id="⑨Webサービスのクラウドインフラ構築📰"><a href="#⑨Webサービスのクラウドインフラ構築📰" class="headerlink" title="⑨Webサービスのクラウドインフラ構築📰"></a>⑨Webサービスのクラウドインフラ構築📰</h2><p>メディア業界の業務を支えるフルクラウドWebアプリケーションサービスを支えるインフラ構築を経験します。<br>Terraform、Ansibleで実現する完全なInfrastructure as Codeの世界にふれます。</p><ul><li>Terraform、Ansibleによるコードベースのインフラ構築・管理</li><li>スクリプト言語による各種ツール開発</li></ul><p>こんな人にオススメ。</p><ul><li>メディア業界を支える技術に興味がある人</li><li>フューチャー自身が手掛けるSaaSサービスの裏側に興味がある人</li><li>そういった仕組みのより基底となるインフラに興味がある人</li></ul><h2 id="⑩AI先端的モデル開発🏥"><a href="#⑩AI先端的モデル開発🏥" class="headerlink" title="⑩AI先端的モデル開発🏥"></a>⑩AI先端的モデル開発🏥</h2><p>言語・画像・医療・エッジAIの先端的モデルの開発しようというテーマです。大学の研究ではなかなか触ることのできない生のデータを使い、最新のAI技術をビジネスに適用する経験ができます。現時点では詳細なタスクは決まっていませんが、興味、熱意、適性、経験等を判断して柔軟にタスクを決定したいと思っています。</p><p>参考までにAIチーム内で行っているタスクです（これ以外にも様々なタスクに取り組んでいます）：</p><ol><li>チャットログの分析</li><li>顔画像診断</li><li>AI-OCR</li><li>ワクチン開発</li><li>Edge AI</li></ol><p>画像系のタスクやワクチン開発であれば、深層学習モデルの構築をやってもらう可能性大です。言語系のタスクでは、場合によっては深層学習ではなく旧来の機械学習アルゴリズムを使ったモデル開発から行う可能性があります。</p><p>どんなタスクでも実データにAI技術を適用するための泥臭い仕事なども経験できると思います笑</p><p>こんな人にオススメ。</p><ul><li>研究用の綺麗なデータじゃなくて実際のデータを触りたい</li><li>業務で使われるAI技術の温度感を知りたい</li><li>最先端のAIモデルを実データに応用してみたい</li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>なにはともあれマイページにエントリーをお願いします！<br><a href="https://job.axol.jp/cr/s/future_22/mypage/login" target="_blank" rel="noopener">https://job.axol.jp/cr/s/future_22/mypage/login</a></p><p>たくさんのご応募をお待ちしています！　最後まで読んでいただいてありがとうございました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">未来報:https://note.future.co.jp/n/nee4d66fc5906 の編集長でもある方です。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200606/photo_20200606_01.png&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://www.future.co.jp/recruit/new/internship/&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="Intern" scheme="https://future-architect.github.io/tags/Intern/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #05　データベース　テーブル設計入門</title>
    <link href="https://future-architect.github.io/articles/20200605/"/>
    <id>https://future-architect.github.io/articles/20200605/</id>
    <published>2020-06-05T12:46:58.000Z</published>
    <updated>2020-06-16T01:24:16.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a> #05　データベース　テーブル設計入門です。</p><p>テーブル設計を初めて任された際にどうやって設計をすれば良いか困った経験はありませんか？ </p><p>誰かが設計済みのテーブルを見れば理解できるのだけれども、そもそもテーブル設計ってどうすれば良いの？って方に向けた記事です。</p><p>とりあえず定義したテーブルを正規化していく形であるべき姿を学んで行きます。  </p><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>DBはRDBMS(リレーショナルデータベース)を対象とします。 </p><p>論理設計を対象とします。 </p><p>処理速度よりも整合性を優先するものとします。  </p><h1 id="良いテーブル設計とは？"><a href="#良いテーブル設計とは？" class="headerlink" title="良いテーブル設計とは？"></a>良いテーブル設計とは？</h1><p>処理速度が速いに越したことはないのですが、それよりも保持するデータの冗長性を排除し、整合性を保持する設計が良しとされます。</p><p>これを行う方法が正規化として定義されており、一般的には第３正規形まで正規化することで取り扱いやすい良いテーブル設計となります。</p><p>正規形定義</p><table><thead><tr><th>名称</th><th>定義</th></tr></thead><tbody><tr><td>非正規形</td><td>リレーションRの属性の中に、単一でない値が含まれている。</td></tr><tr><td>第１正規形</td><td>リレーションRの属性が、単一値である。</td></tr><tr><td>第２正規形</td><td>リレーションRが次の二つの条件を満たす。<br>1.第１正規形であること<br>2.すべての非キー属性は、いかなる候補キーにも部分関数従属していない(完全関数従属である)こと</td></tr><tr><td>第３正規形</td><td>リレーションRが次の二つの条件を満たす。<br>1.第２正規形であること<br>2.すべての非キー属性は、いかなる候補キーにも推移的関数従属していない</td></tr></tbody></table><p>ですがこの定義の説明、専門用語と独特の言い回しが多く初見だと難しく感じたので順を追ってわかりやすく非正規形から第３正規形にしてみようと思います。</p><h1 id="STEP0-基本となるテーブル"><a href="#STEP0-基本となるテーブル" class="headerlink" title="STEP0　基本となるテーブル"></a>STEP0　基本となるテーブル</h1><p>説明の為、サンプルとなるテーブルを用意します。社員番号、社員名、部署コード、部署、趣味を持つものとします。社内向け社員検索システムの設計の一部だとでも思っていただければよいです。</p><p>仮のレコードも付け加えると以下のようになります。以後、主キーは下線にて示します。</p><p>この社員テーブルは非正規形の状態です。</p><p>社員</p><img src="/images/20200605/1.png" class="img-middle-size"><p>※1 本来であれば社員名は姓、名で分けたり、よみがなの項目を分けて持つべきですが、今回の説明の主旨から外れるので簡易的に社員名として表現しています。<br>※2 会社によっては社員が複数の部署に所属するような場合もあるかと思いますが、今回は社員は一つの部署にのみ所属することとします。</p><h1 id="STEP1-非正規形から第１正規形へ"><a href="#STEP1-非正規形から第１正規形へ" class="headerlink" title="STEP1　非正規形から第１正規形へ"></a>STEP1　非正規形から第１正規形へ</h1><p>非正規形の定義として「単一でない値が含まれている」というのがあり、それは上表で言うと趣味にあたります。<br>一人が複数の趣味を持つことがあり、検索や更新をする際に適切な形式ではありません。<br>まずは単一でない値を排除することで第１正規形にしてみましょう。</p><p>社員<br><img src="/images/20200605/2.png" class="img-middle-size"></p><p>趣味<br><img src="/images/20200605/3.png" class="img-small-size"></p><h1 id="STEP2-第１正規形から第２正規形へ"><a href="#STEP2-第１正規形から第２正規形へ" class="headerlink" title="STEP2　第１正規形から第２正規形へ"></a>STEP2　第１正規形から第２正規形へ</h1><p>用意したサンプルでは実はもう社員テーブルは第２正規形になっています。<br>正規形の定義を確認すると第２正規形の定義の一部として「1.第１正規形であること」とあるので第３正規形までであれば高次の正規形は低次の正規形を満たすことになります。<br>「2.すべての非キー属性は、いかなる候補キーにも部分関数従属していない(完全関数従属である)こと」この定義がいまいちわかりにくいので補足すると複数のキーで主キーが構成される場合に主キーの一部が他のキーの主キーとなるのを解消することです。<br>※正確に言うと主キーではなく候補キーですが説明を簡素化する為、主キーと記載しています。<br>別のテーブルで例を示すと以下のようになります。</p><p>伝票<br><img src="/images/20200605/4.png" class="img-small-size"></p><p>このテーブルでは主キーの一部である商品コードが商品名に対する主キーになる為、第１正規形ですが、それを以下のように解消することで第２正規形(第３正規形)にできます。</p><p>伝票<br><img src="/images/20200605/5.png" class="img-small-size"></p><p>商品<br><img src="/images/20200605/6.png" class="img-small-size"></p><h1 id="STEP3-第２正規形から第３正規形へ"><a href="#STEP3-第２正規形から第３正規形へ" class="headerlink" title="STEP3　第２正規形から第３正規形へ"></a>STEP3　第２正規形から第３正規形へ</h1><p>社員テーブルはまだ第２正規形ですので第３正規形にしましょう。<br>「2.すべての非キー属性は、いかなる候補キーにも推移的関数従属していない」ことが第３正規形の定義です。<br>これも言い回しが独特でとっつきにくいのですが、マスタテーブルを作成すると捉えればOKです。そのマスタテーブルって何って話ですが、何らかのIDに対して一意の名称を持ち利用されうる値全てを保持するテーブルです。例えば都道府県だったり、社員だったり取引先だったり。反対に伝票番号のように業務に伴って発生した出来事を記録するテーブルはマスタテーブルではありません。</p><p>社員(再掲)<br><img src="/images/20200605/7.png" class="img-middle-size"></p><p>部署の主キーとなるのが部署コードなので新たに部署テーブルを作成し、社員テーブルからは部署テーブルの主キーのみを示す形します。</p><p>社員<br><img src="/images/20200605/8.png" class="img-small-size"></p><p>部署<br><img src="/images/20200605/9.png" class="img-small-size"></p><h1 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h1><p>正規化の他にも気を付けるべき点があるので特に気を付けるべきと思われる点を簡単に３点だけ紹介します。</p><h2 id="多対多の関係の解消"><a href="#多対多の関係の解消" class="headerlink" title="多対多の関係の解消"></a>多対多の関係の解消</h2><p>テーブル設計を進めていくとテーブル間の関係が多対多になってしまうことがあります。<br>先ほどの例ではあえて留めましたが、趣味テーブルがマスタテーブル化されているような場合に起きえます。</p><p>社員<br><img src="/images/20200605/10.png" class="img-middle-size"></p><p>趣味マスタ<br><img src="/images/20200605/12.png" class="img-small-size"></p><p>多対多の関係の場合にどうテーブル設計をすれば良いかわからなくなってしまいがちです。<br>そうなんです。多対多の関係の場合、どう頑張っても良い設計にならないのです。<br>ですのでそもそも多対多の関係にならないような設計が必要で、その解消方法は中間テーブルを用意し、１対多の関係になるように設計することが必要です。</p><p>社員趣味紐付け(中間テーブル)※<br><img src="/images/20200605/13.png" class="img-small-size"></p><p>※代理キー(サロゲートキー)を主キーとする設計も良くあります。</p><h2 id="論理削除の可否"><a href="#論理削除の可否" class="headerlink" title="論理削除の可否"></a>論理削除の可否</h2><p>論理削除はアンチパターンの一つなのですが、割と良くある設計です。<br>レコードを消したい。でも消したくないみたいな時に削除フラグ項目を設け、レコードをDELETEするのではなく削除フラグをUPDATEして、SELECTの条件で削除フラグがTRUEなら取得しないようにするやつです。<br>頻繁に復活させたり、レコード数が少ないテーブルに設けるのであれば検討の余地はありますが、基本的には論理削除を用いないほうが良いでしょう。<br>削除フラグを設けることで検索速度が遅くなるので、削除したデータを保持しておきたいのであれば検索に利用しない削除済みデータを管理する別のテーブルを用意しそちらに移動させるか、ログから削除したデータが追えるようになっているほうが良いと考えます。</p><p>※論理削除については以下Webページで語られているので深く知りたい方はご確認ください。<br><a href="https://fukabori.fm/episode/27" target="_blank" rel="noopener">27. 論理削除とは何か？どのような解法があるのか？ w/ twada</a></p><h2 id="インデックスの作成"><a href="#インデックスの作成" class="headerlink" title="インデックスの作成"></a>インデックスの作成</h2><p>検索速度を早くしたい場合にインデックスを作成しますが、インデックスにも順序性があり、実際にSQLのwhere句で指定されるキーの順序と合致しないとそのインデックスは利用されません。<br>また、メリットだけではなくデメリットが存在し、検索速度が早くなる代わりにそれ以外のINSERT,UPDATE,DELETEは遅くなります。<br>良くインデックスは文字通り書籍の索引に例えられますが、索引があれば引くのは早く、ページに変更(INSERT,UPDATE,DELETE)があれば索引も再構築しなければならない為、遅くなります。現実世界のものに例えると理解しやすくなりますね。<br>なお、主キーには暗黙的にインデックスが作成されます。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>テーブル設計を第３正規形になるように順を追って設計し、その他に気を付けるべき点を紹介しました。<br>他にもテーブル設計の要素として外部キーやデータ型、トリガーなどがありますが、入門記事ということもありさくっと読めるように割愛しています。<br>第３正規形がいかなるときも最適かと言うとそんなことは無く、整合性よりも処理速度を優先するようなシステムの場合には第２正規形にすることもありますし、今回は入門記事のため触れませんでしたがレコード数が多い場合にはパーティショニングやシャーディングの検討が必要になることもあります。<br>型を崩すにしても基本を知っているのと知っていないのでは大違いですのでまずは基本をマスターしましょう。その上で崩すところは崩す。<br>重要なのはシステムの規模や特性にあった設計を行うことです。<br>それでは良いテーブル設計ライフを！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architect
      
    
    </summary>
    
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="DataModel" scheme="https://future-architect.github.io/tags/DataModel/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #04 NW入門</title>
    <link href="https://future-architect.github.io/articles/20200604/"/>
    <id>https://future-architect.github.io/articles/20200604/</id>
    <published>2020-06-04T00:06:07.000Z</published>
    <updated>2020-06-23T06:04:03.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニットの西田と申します。</p><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の第4弾！という事で、私はネットワークの入門編を書きます。</p><p>プログラマー視点ではあまり馴染みのない技術領域、ネットワーク。そもそもなんで馴染みがないのか？それは…<strong>独自用語あまりに多すぎ！概念も独自すぎ！</strong>という背景があります。わかります、その気持ち。私もプログラマ出身ですから。</p><p>ネットワークの設計という観点では<a href="https://future-architect.github.io/articles/20170704/">こちらの記事</a>がありますが、今回は入門という事で、<strong>身近な仕組みを実機で動作を確認</strong>しながら、解説しようと思います。通常のNW入門って、大体はOSI参照モデルから入りますが、ちょっと重いので今回はやりません。</p><h1 id="説明する事"><a href="#説明する事" class="headerlink" title="説明する事"></a>説明する事</h1><p><code>Chrome</code>や<code>Safari</code>などのブラウザで<code>https://www.future.co.jp</code>を入力すると、会社の公式ページが表示されますよね。<br>その裏側でどんな通信が行われているのかを <strong>実機で具体的に確認して理解する</strong> 事を目的にします。</p><img src="/images/20200604/photo_20200604_01.jpeg"><h1 id="DNSとは"><a href="#DNSとは" class="headerlink" title="DNSとは"></a>DNSとは</h1><p>皆さん、基本的には<code>future.co.jp</code>とか、<code>tokyo-calendar.jp</code>とかそういう名前でアクセスする先を認識していますよね？これは<code>FQDN</code>(Fully Qualified Domain Name：完全修飾ドメイン名)と呼ばれていて、（基本的には）世界中でアクセス先を1つに限定する名前になっています。</p><p>ですが、この<code>FQDN</code>だけでは、実はネットワークの世界では通信は出来ないんです。ネットワークの世界では、<code>IPアドレス</code>（ネットワーク上の住所・番地など）を用いて通信が行われています。</p><p>その対応付けがこのDNSという事ですね。例えるならこういう事です。</p><img src="/images/20200604/2.jpg"><p>この対応付けをする技術が<code>DNS</code>であり、この対応付けをしてくれる人が<code>DNSサーバ</code>という事です。</p><h2 id="DNSの仕組み"><a href="#DNSの仕組み" class="headerlink" title="DNSの仕組み"></a>DNSの仕組み</h2><p>DNSの仕組み自体は外部にいいサイトがたくさんあるので、仕組みそのものはそっちを見た方が良いです。例えば<a href="https://xn--u8j7eobcu7j2kyg7f.jp/special/dns/page_02.html" target="_blank" rel="noopener">このサイト</a>があります。</p><h2 id="動きを見る"><a href="#動きを見る" class="headerlink" title="動きを見る"></a>動きを見る</h2><p>さて、それではDNS解決を実機で見てみましょう。DNS調査のコマンドといえば、<code>dig</code>です。が、実はwindowsにはインストールされていないので、<a href="https://www.digwebinterface.com/" target="_blank" rel="noopener">こちらのサイト</a>でまずは試してみましょう。</p><h3 id="基本編"><a href="#基本編" class="headerlink" title="基本編"></a>基本編</h3><p>まずはグループ会社である<a href="https://corp.tokyo-calendar.jp/" target="_blank" rel="noopener">東京カレンダー</a>から見てみましょう。ここがとても分かりやすかったので。<br>手順は囲いました。</p><img src="/images/20200604/photo_20200604_02.jpeg"  style="border:solid 1px #000000"><p>これは、以下を実行しています。</p><ul><li>右上の<code>Nameservers</code>で指定したDNSサーバ<code>1.1.1.1</code>に対して<ul><li><code>1.1.1.1</code>は世界で一番早いと言われているDNSキャッシュサーバです。私は家のPCのDNSはこれにしています。</li></ul></li><li><code>corp.tokyo-calendar.jp</code>のIPアドレスの解決を</li><li><code>Trace</code>オプション(反復問い合わせ箇所の結果を返すモード)で実行</li></ul><p>結果はこうなりますよね。参考までに、以下は私の手元のlinuxマシンで実行した結果です。</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">nishida@ubuntu:~$ <span class="title">dig</span> @1.1.1.1 <span class="title">corp.tokyo</span>-<span class="title">calendar.jp</span>. +<span class="title">trace</span> +<span class="title">nodnssec</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">; &lt;&lt;&gt;&gt; <span class="title">DiG</span> 9.11.3-1<span class="title">ubuntu1</span>.11-<span class="title">Ubuntu</span> &lt;&lt;&gt;&gt; @1.1.1.1 <span class="title">corp.tokyo</span>-<span class="title">calendar.jp</span>. +<span class="title">trace</span> +<span class="title">nodnssec</span></span></span><br><span class="line"><span class="function">; (1 <span class="title">server</span> <span class="title">found</span>)</span></span><br><span class="line"><span class="function">;; <span class="title">global</span> <span class="title">options</span>: +<span class="title">cmd</span></span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">a.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">b.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">c.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">d.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">e.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">f.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">g.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">h.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">i.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">j.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">k.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">l.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">.514237<span class="title">IN</span><span class="title">NS</span><span class="title">m.root</span>-<span class="title">servers.net</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 239 <span class="title">bytes</span> <span class="title">from</span> 1.1.1.1#53(1.1.1.1) <span class="title">in</span> 55 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">a.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">b.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">c.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">d.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">e.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">f.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">g.dns.jp</span>.</span></span><br><span class="line"><span class="function"><span class="title">jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">h.dns.jp</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 507 <span class="title">bytes</span> <span class="title">from</span> 192.5.5.241#53(<span class="title">f.root</span>-<span class="title">servers.net</span>) <span class="title">in</span> 107 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.86400<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1512.<span class="title">awsdns</span>-61.<span class="title">org</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.86400<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-211.<span class="title">awsdns</span>-26.<span class="title">com</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.86400<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-586.<span class="title">awsdns</span>-09.<span class="title">net</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.86400<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1832.<span class="title">awsdns</span>-37.<span class="title">co.uk</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 219 <span class="title">bytes</span> <span class="title">from</span> 203.119.1.1#53(<span class="title">a.dns.jp</span>) <span class="title">in</span> 42 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">corp.tokyo</span>-<span class="title">calendar.jp</span>.60<span class="title">IN</span><span class="title">A</span>54.250.204.18</span></span><br><span class="line"><span class="function"><span class="title">corp.tokyo</span>-<span class="title">calendar.jp</span>.60<span class="title">IN</span><span class="title">A</span>52.193.252.137</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.300<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1512.<span class="title">awsdns</span>-61.<span class="title">org</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.300<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1832.<span class="title">awsdns</span>-37.<span class="title">co.uk</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.300<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-211.<span class="title">awsdns</span>-26.<span class="title">com</span>.</span></span><br><span class="line"><span class="function"><span class="title">tokyo</span>-<span class="title">calendar.jp</span>.300<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-586.<span class="title">awsdns</span>-09.<span class="title">net</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 223 <span class="title">bytes</span> <span class="title">from</span> 205.251.194.74#53(<span class="title">ns</span>-586.<span class="title">awsdns</span>-09.<span class="title">net</span>) <span class="title">in</span> 160 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>順に説明していきます。</p><ul><li><code>.</code>で始まるパート<ul><li><code>.</code>(ルート)レベルのドメインを持つのは、a-mのroot-serverである。このどれかに問い合わせる、という意味です。</li></ul></li><li><code>jp.</code>で始まるパート<ul><li>一番下に<code>from 192.5.5.241#53(f.root-servers.net)</code>と書いてあります。<code>1.1.1.1</code>が、a-m の中で<code>f.root-servers.net</code>に問い合わせを行った結果が返っています。</li><li><code>f.root-servers</code>から、『jpドメインの名前を知っているのは、<code>a.dns.jp</code>-<code>h.dns.jp</code>だからそこに問い合わせてほしい』と返ってきています。</li></ul></li><li><code>tokyo-calendar.jp.</code>で始まるパート<ul><li>一番下に<code>from 203.119.1.1#53(a.dns.jp)</code>と書いてあります。<code>1.1.1.1</code>が、上記のa-h の中で<code>a.dns.jp</code>に問い合わせを行った結果が返っています。</li><li><code>a.dns.jp</code>から、『tokyo-calendar.jpドメインの名前を知っているのは、<code>ns-......</code>だからそこに問い合わせてほしい』と返ってきています。</li><li>ドメインからわかりますが、<code>aws</code>にこのwebサーバが置かれているという事がわかります。<code>route53</code>使ってるんですかね、おそらく。</li></ul></li><li><code>corp.tokyo-calendar.jp.</code>で始まるパート<ul><li>一番下に<code>from 205.251.194.74#53(ns-586.awsdns-09.net)</code>と書いてあります。<code>1.1.1.1</code>が、上記の中で<code>ns-586.awsdns-09.net</code>に問い合わせを行った結果が返っています。</li><li><code>ns-586.awsdns-09.net</code>から、<code>corp.tokyo-calendar.jp</code>は<code>54.250.204.18</code>と<code>52.193.252.137</code>の2つであると返ってきています。</li></ul></li></ul><p>これで無事、<strong><code>FQDN</code> から <code>IPアドレス</code> に <code>DNS解決</code></strong> 出来ました。<br>解決出来たアドレスで、https通信ももちろんできます。<br><a href="https://54.250.204.18/" target="_blank" rel="noopener">https://54.250.204.18/</a><br>証明書の<code>CN</code>が一致しないので警告画面は出ますが <code>詳細設定ボタン</code> を押して、下のリンクをクリックすると当然閲覧出来ます。</p><h3 id="少し応用"><a href="#少し応用" class="headerlink" title="少し応用"></a>少し応用</h3><p>それでは次は<code>www.future.co.jp</code>を見てみましょう。</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">nishida@ubuntu:~$ <span class="title">dig</span> @1.1.1.1 <span class="title">www.future.co.jp</span>. +<span class="title">trace</span> +<span class="title">nodnssec</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">～～　中略　～～</span></span><br><span class="line"><span class="function"><span class="title">www.future.co.jp</span>.60<span class="title">IN</span><span class="title">CNAME</span><span class="title">www.future.co.jp</span>-<span class="title">v1.edgesuite.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">future.co.jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1106.<span class="title">awsdns</span>-10.<span class="title">org</span>.</span></span><br><span class="line"><span class="function"><span class="title">future.co.jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-131.<span class="title">awsdns</span>-16.<span class="title">com</span>.</span></span><br><span class="line"><span class="function"><span class="title">future.co.jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-1906.<span class="title">awsdns</span>-46.<span class="title">co.uk</span>.</span></span><br><span class="line"><span class="function"><span class="title">future.co.jp</span>.172800<span class="title">IN</span><span class="title">NS</span><span class="title">ns</span>-746.<span class="title">awsdns</span>-29.<span class="title">net</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 229 <span class="title">bytes</span> <span class="title">from</span> 205.251.192.131#53(<span class="title">ns</span>-131.<span class="title">awsdns</span>-16.<span class="title">com</span>) <span class="title">in</span> 146 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>最後が<code>CNAME</code>で終わってますよね。これ、Akamaiという<code>CDN</code>サービスを使っているからなんです。<br><code>CDN</code>は、簡単に言うとwebのコンテンツ（例えば画像ファイルなど）をクライアントに（NW的に）近い場所にキャッシュしておくことで、webの応答を早くする＆webサーバの負荷を軽くするために使われるサービスです。<br>なので、実際のFutureのトップページのコンテンツが置かれているサーバではなく、Akamai 管理のコンテンツキャッシュサーバを案内されます。それを<code>CNAME</code>という名前の<strong>別名</strong>を設定する事で実現しています。では、この別名を今度は解決します。</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">nishida@ubuntu:~$ <span class="title">dig</span> @1.1.1.1 <span class="title">www.future.co.jp</span>-<span class="title">v1.edgesuite.net</span>. +<span class="title">trace</span> +<span class="title">nodnssec</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">～～　中略　～～</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">www.future.co.jp</span>-<span class="title">v1.edgesuite.net</span>. 21600 <span class="title">IN</span> <span class="title">CNAME</span> <span class="title">a1807.b.akamai.net</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 91 <span class="title">bytes</span> <span class="title">from</span> 23.211.133.64#53(<span class="title">a6</span>-64.<span class="title">akam.net</span>) <span class="title">in</span> 32 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>また<code>CNAME</code> 別名でしたね。ではもう1回。</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">nishida@ubuntu:~$ <span class="title">dig</span> @1.1.1.1 <span class="title">a1807.b.akamai.net</span>. +<span class="title">trace</span> +<span class="title">nodnssec</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">～～　中略　～～</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n5b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n1b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n7b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n2b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n6b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n0b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n3b.akamai.net</span>.</span></span><br><span class="line"><span class="function"><span class="title">b.akamai.net</span>.4000<span class="title">IN</span><span class="title">NS</span><span class="title">n4b.akamai.net</span>.</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 347 <span class="title">bytes</span> <span class="title">from</span> 95.101.36.192#53(<span class="title">zd.akamaitech.net</span>) <span class="title">in</span> 30 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">a1807.b.akamai.net</span>.20<span class="title">IN</span><span class="title">A</span>23.32.3.80</span></span><br><span class="line"><span class="function"><span class="title">a1807.b.akamai.net</span>.20<span class="title">IN</span><span class="title">A</span>23.32.3.66</span></span><br><span class="line"><span class="function">;; <span class="title">Received</span> 79 <span class="title">bytes</span> <span class="title">from</span> 221.110.183.69#53(<span class="title">n5b.akamai.net</span>) <span class="title">in</span> 40 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>ようやく解決出来ました。<a href="https://www.digwebinterface.com/" target="_blank" rel="noopener">こちらのサイト</a>で<code>DNS解決</code>を行った場合は、最後に解決できるIPアドレスは違うと思います。先ほど説明した通り、<code>CDN</code>はクライアントに近い場所のキャッシュサーバを案内するため、接続元の場所が大きく違うと違うIPアドレスになるのが正しいです。<br>ちなみに、私が試した上記の環境は、会社支給のポケット<code>wifi</code>で試しているので、その<code>SIM</code>携帯キャリアの基地局（？）内に置かれているAkamaiのキャッシュサーバのアドレスが、上記のアドレスになっていると想定されます。</p><p>このDNSですが、調査方法を知っておく事は非常に重要です。<br>私の経験上、<strong>ネットワークがつながらない問題の5割が、DNSが解決出来ない</strong> 事です。<code>dig</code>コマンドはwindowsにもインストール出来ます。<br>実際、<a href="https://future-architect.github.io/articles/20200526/">こちらの記事</a>ではトラブルシュートの中で<code>dig</code>を使っています。また、原因も一周回って<code>DNS</code>でした。</p><h1 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h1><p>無事、IPアドレス（ネットワーク上の住所）が判明した、次はどう通信するのかに話を進めます。</p><ul><li>データはパケットという単位で分割される<ul><li>ご存知の方も多いかもしれませんが、ネットワーク上の通信は、<code>パケット</code>という単位で区切ってデータを送受信します。例えば動画などの大きなデータも、1パケットあたり（基本は）最大で1500バイトに分割して送られます、</li></ul></li><li>各パケットがそれぞれ、送信先のIPアドレスめがけて送信されます</li></ul><h2 id="Routing-の仕組み"><a href="#Routing-の仕組み" class="headerlink" title="Routing の仕組み"></a>Routing の仕組み</h2><p>Routing も仕組み自体は外部にいいサイトがたくさんあるので、そちらを見た方が良いです。これくらいの説明の粒度を合致してそうなサイトは、<a href="https://network.yamaha.com/knowledge/routing" target="_blank" rel="noopener">このサイト</a>あたりです。IPアドレス体系の説明をしていないので、まずはこれくらいの理解で良いです。</p><h2 id="動きを見る-1"><a href="#動きを見る-1" class="headerlink" title="動きを見る"></a>動きを見る</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>それでは、先程名前を解決した、<code>www.future.co.jp</code> = <code>a1807.b.akamai.net</code> = <code>23.32.3.80</code> を例にしてみましょう。</p><p><code>Routing</code> の様子を調べるには、windowsでは<code>tracert</code>というコマンドが使えます。(Macでは<code>traceroute</code>)</p><figure class="highlight dos"><figcaption><span>tracert</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; tracert <span class="number">23</span>.<span class="number">32</span>.<span class="number">3</span>.<span class="number">80</span></span><br><span class="line"></span><br><span class="line">a23-<span class="number">32</span>-<span class="number">3</span>-<span class="number">80</span>.deploy.static.akamaitechnologies.com [<span class="number">23</span>.<span class="number">32</span>.<span class="number">3</span>.<span class="number">80</span>] へのルートをトレースしています</span><br><span class="line">経由するホップ数は最大 <span class="number">30</span> です:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>     <span class="number">3</span> ms     <span class="number">1</span> ms     <span class="number">2</span> ms  <span class="number">192</span>.<span class="number">168</span>.<span class="number">128</span>.<span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">47</span> ms   <span class="number">211</span> ms    <span class="number">38</span> ms  pw126240091001.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">91</span>.<span class="number">1</span>]</span><br><span class="line"><span class="number">3</span>    <span class="number">27</span> ms    <span class="number">42</span> ms    <span class="number">37</span> ms  pw126240091002.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">91</span>.<span class="number">2</span>]</span><br><span class="line"><span class="number">4</span>    <span class="number">45</span> ms    <span class="number">39</span> ms    <span class="number">40</span> ms  pw126240088129.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">88</span>.<span class="number">129</span>]</span><br><span class="line"><span class="number">5</span>    <span class="number">54</span> ms    <span class="number">28</span> ms    <span class="number">38</span> ms  pw126240088085.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">88</span>.<span class="number">85</span>]</span><br><span class="line"><span class="number">6</span>    <span class="number">44</span> ms    <span class="number">69</span> ms    <span class="number">47</span> ms  pw126240088065.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">88</span>.<span class="number">65</span>]</span><br><span class="line"><span class="number">7</span>    <span class="number">76</span> ms    <span class="number">25</span> ms    <span class="number">41</span> ms  pw126240088033.<span class="number">0</span>.tss.panda-world.ne.jp [<span class="number">126</span>.<span class="number">240</span>.<span class="number">88</span>.<span class="number">33</span>]</span><br><span class="line"><span class="number">8</span>    <span class="number">27</span> ms    <span class="number">36</span> ms    <span class="number">39</span> ms  <span class="number">101</span>.<span class="number">110</span>.<span class="number">16</span>.<span class="number">241</span></span><br><span class="line"><span class="number">9</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"><span class="number">10</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"><span class="number">11</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"><span class="number">12</span>    <span class="number">41</span> ms    <span class="number">35</span> ms    <span class="number">37</span> ms  a23-<span class="number">32</span>-<span class="number">3</span>-<span class="number">80</span>.deploy.static.akamaitechnologies.com [<span class="number">23</span>.<span class="number">32</span>.<span class="number">3</span>.<span class="number">80</span>]</span><br><span class="line"></span><br><span class="line">トレースを完了しました。</span><br></pre></td></tr></table></figure><p>上から順にNW的に近いルーティングデバイスです。<br><strong>全部で12ホップ</strong>である＝クライアント～サーバ間に11個のルーティングデバイス存在する事が明らかになりました。<br>応答時間が3回分返ってきています。目的地まで平均して<code>40ms</code>程度なので通信状況は良好と言えます。</p><p>少しだけ細かく説明します。</p><ul><li>1は、会社支給のポケット<code>wifi</code>のアドレス</li><li>2～8は、Softbankさん運営のNWです。NW内で（＝AS内で）、何回かルーティングされています。<ul><li>ネットワークの所有者はwhoisというサービス（コマンドもインストール可能）で調べる事が出来ます。<ul><li><a href="https://tech-unlimited.com/whois.html" target="_blank" rel="noopener">こちらのサイト</a> で <code>126.240.91.1</code> を入力すると出てきます。</li></ul></li></ul></li><li>9～11は、<code>Firewall</code> or 装置の設定などの問題で、<code>traceroute</code>の信号に応答してくれない状態になっています。</li><li>12は、<code>www.future.co.jp</code>のトップページの<code>html</code>ファイルがキャッシュされているAkamaiのサーバです。</li></ul><p>この様に、<code>traceroute</code>を使用すると、サーバまでのNWの経路と、その応答時間（レイテンシ）を測る事が出来ます。<br>何かしらの<strong>処理が遅い系のトラブルは、まず<code>traceroute</code></strong>を見るのが良いです。<br>NWの問題か、サーバの問題か、明らかになりますから。</p><h3 id="少し応用-1"><a href="#少し応用-1" class="headerlink" title="少し応用"></a>少し応用</h3><p>今度は<code>corp.tokyo-calendar.jp</code> = <code>54.250.204.18</code>を見てみましょう。</p><figure class="highlight dos"><figcaption><span>windows</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; tracert <span class="number">54</span>.<span class="number">250</span>.<span class="number">204</span>.<span class="number">18</span></span><br><span class="line"></span><br><span class="line">ec2-<span class="number">54</span>-<span class="number">250</span>-<span class="number">204</span>-<span class="number">18</span>.ap-northeast-<span class="number">1</span>.compute.amazonaws.com [<span class="number">54</span>.<span class="number">250</span>.<span class="number">204</span>.<span class="number">18</span>] へのルートをトレースしています</span><br><span class="line">経由するホップ数は最大 <span class="number">30</span> です:</span><br><span class="line"></span><br><span class="line">～～　中略　～～</span><br><span class="line"></span><br><span class="line"> <span class="number">22</span>    <span class="number">22</span> ms    <span class="number">41</span> ms    <span class="number">33</span> ms  <span class="number">52</span>.<span class="number">95</span>.<span class="number">31</span>.<span class="number">82</span></span><br><span class="line"> <span class="number">23</span>    <span class="number">48</span> ms    <span class="number">28</span> ms    <span class="number">31</span> ms  <span class="number">27</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">72</span></span><br><span class="line"> <span class="number">24</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">25</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">26</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">27</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">28</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">29</span>     *        *        *     要求がタイムアウトしました。</span><br><span class="line"> <span class="number">30</span>     *        *        *     要求がタイムアウトしました。</span><br></pre></td></tr></table></figure><p>返ってきませんね。これは明らかにターゲットとなる <code>54.250.204.18</code> の前にいるFirewall、今回はおそらくAWS の <code>Sercurity Group</code>で<code>tracert</code>で使用する<code>ICMP(Ping)</code>というパケットを許可していないため、途中から探索が出来なくなっています。</p><p>逆に言えば、webサイトの閲覧の通信（<code>https</code>）は許可されているわけなので、その通信に成りすまして trace してみましょう。<br>windowsではまたもやコマンドがないので、以下はlinuxマシンで試しています。</p><figure class="highlight dos"><figcaption><span>linux</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function">nishida@ubuntu:~$ <span class="title">sudo</span> <span class="title">traceroute</span> -<span class="title">T</span> -<span class="title">p</span> 443 54.250.204.18</span></span><br><span class="line"><span class="function"><span class="title">traceroute</span> <span class="title">to</span> 54.250.204.18 (54.250.204.18), 30 <span class="title">hops</span> <span class="title">max</span>, 60 <span class="title">byte</span> <span class="title">packets</span></span></span><br><span class="line"><span class="function"> 1  <span class="title">_gateway</span> (192.168.128.1)  3.666 <span class="title">ms</span>  3.563 <span class="title">ms</span>  3.613 <span class="title">ms</span></span></span><br><span class="line"><span class="function"> 2  <span class="title">pw126240091001</span>.0.<span class="title">tss.panda</span>-<span class="title">world.ne.jp</span> (126.240.91.1)  205.578 <span class="title">ms</span>  205.551 <span class="title">ms</span>  205.487 <span class="title">ms</span></span></span><br><span class="line"><span class="function"> 3  <span class="title">pw126240091002</span>.0.<span class="title">tss.panda</span>-<span class="title">world.ne.jp</span> (126.240.91.2)  99.263 <span class="title">ms</span>  99.244 <span class="title">ms</span>  99.178 <span class="title">ms</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">～～　中略　～～</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">29  * * *</span></span><br><span class="line"><span class="function">30  <span class="title">ec2</span>-54-250-204-18.<span class="title">ap</span>-<span class="title">northeast</span>-1.<span class="title">compute.amazonaws.com</span> (54.250.204.18)  46.987 <span class="title">ms</span>  37.726 <span class="title">ms</span>  37.653 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>今度は返ってきました。<br>途中で中継しているルーティングデバイスはやっぱり返答してくれませんでした。<br>全部で30ホップ。FutureのトップページよりはNW的には倍以上遠いです（というか、Futureは<code>CDN</code>を使っているから特別近いだけ）。ただ、応答時間は約<code>40ms</code>なので良好です。応答時間の大部分を占めるのは、4G回線の部分という事も明らかになっています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>説明の関係で誤解を招きそうなのでここで訂正しますが、最初の<code>DNS</code>の通信でも<code>Routing</code>は使われています。</p><ul><li>例えば、自分のPC → <code>1.1.1.1</code>に対して、DNSパケットを投げた時からすでに。</li><li>そして、<code>1.1.1.1</code> → <code>f.root-servers.net(192.5.5.241)</code> へのDNS通信でももちろん。</li></ul><p>最初から<code>IPアドレス</code>の世界から入ると、どうしても壁を感じてしまうため、本記事は名前から入ったためこの様な順序になっています。<br><strong>OSI参照モデル</strong>と呼ばれており、各層で役割が分かれています（例えば、Routingは3層、DNSは7層）。次があればこの辺りも説明します。<br>OSI参照モデルに関しては、<a href="https://future-architect.github.io/articles/20191107/">こちらの記事</a>で、冗長構成の観点から少しだけ説明しています。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>いかがでしたでしょうか？企業のシステム構成がだんだん明らかになっていくので、まるでハッキングしているみたいで面白いですよね。もちろん全部合法なので、知っているサイトを調べてみてください。特にFutureグループのWebサイトのほとんどがAWS上で作られている事がわかります。</p><p>トップページの様にそもそも公開しているサイトであれば別に構わないですが、逆にVPNサーバなど『本当は隠蔽したいけど通信のために公開しなければならないサービス』もありますよね。最近ではこれらのサービスの隠蔽のために<a href="https://www.cloudsecurityalliance.jp/site/?page_id=1167" target="_blank" rel="noopener"><code>SDP</code>という技術</a>も出始めています。ニーズがあればどこかで書きます。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXユニットの西田と申します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-archi
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸#03 ゼロから始めるFlutter生活</title>
    <link href="https://future-architect.github.io/articles/20200603/"/>
    <id>https://future-architect.github.io/articles/20200603/</id>
    <published>2020-06-03T02:09:41.000Z</published>
    <updated>2020-06-23T06:03:56.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの<a href="https://twitter.com/famipapamart" target="_blank" rel="noopener">村田</a>です。<a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a> 第3弾として、兼ねてより気になっていたFlutterに入門してみた話をお届けします。</p><p>普段はクラウドインフラ寄りな技術を触っているのですが、実は生まれと育ちはフロントエンド畑で、過去には<a href="https://github.com/future-architect/urushi" target="_blank" rel="noopener">Urushi</a>という当社製のOSS開発に携わっていました。</p><p>Urushiについては以下のブログで詳細に語られています。2017年の記事ですね。懐かしい限りです。<br><a href="https://future-architect.github.io/articles/20170605/">ES2015 Web componentsと国産Web componentsフレームワークUrushi</a></p><p>昨今の自粛生活の中で私のチーム内でもオンラインもくもく会（社内では通称「引きこもりもくもく」）が流行っているのですが、久しぶりにフロントエンドに触れようと思い立ったのが事の経緯です。</p><h1 id="Flutterとは"><a href="#Flutterとは" class="headerlink" title="Flutterとは"></a>Flutterとは</h1><blockquote><p>Flutter is Google’s UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase.</p></blockquote><p><a href="https://flutter.dev/" target="_blank" rel="noopener">https://flutter.dev/</a></p><p>FlutterはGoogle製のフレームワークです。クロスプラットフォーム対応はAndroidとiOSだけでなくWebまで行き届いていますが、これはReactNativeなど他のクロスプラットフォーム開発フレームワークでも同様ですね。</p><p>Flutterの特徴は、開発言語に<a href="https://dart.dev/" target="_blank" rel="noopener">Dart</a>という言語を採用している点です。DartはGoogle製のプログラミング言語なのですが、書き心地はJavaScriptに非常に近く、久しぶりにJSを嗜んだ私でもとっつきやすい言語でした。</p><h1 id="やりたいこと"><a href="#やりたいこと" class="headerlink" title="やりたいこと"></a>やりたいこと</h1><p>絶賛無人島生活🏝️を満喫していた私は、Flutterでもくもくするにあたって、「カブ価の推移を可視化する」というゴールを定めました。本記事ではカブ価についての詳細は割愛しますが、株価のように時系列に合わせて上下する値の推移を銘柄(島)ごとにグラフ📈化したい、というのが私のやりたかったことです。</p><p>Flutterは今回Web版を利用しています。バックエンドのDBについては、Firebaseでうまくライトにやれないかなー程度に考えていました。（最終的にCloud Firestoreを採択してますが、それについては後述します）</p><img src="/images/20200603/photo_20200603_01.png"><h1 id="実際にやってみる"><a href="#実際にやってみる" class="headerlink" title="実際にやってみる"></a>実際にやってみる</h1><h2 id="まずは環境構築"><a href="#まずは環境構築" class="headerlink" title="まずは環境構築"></a>まずは環境構築</h2><p>兎にも角にもまずは環境構築をしていきます。私の端末はMacOSなので、<a href="https://flutter.dev/docs/get-started/install/macos" target="_blank" rel="noopener">MacOS用の手順</a>に従って環境構築を進めていきます。ちなみに今回利用するのはWeb版なので、<a href="https://flutter.dev/docs/get-started/web" target="_blank" rel="noopener">Web版向けの手順</a>も合わせて実施する必要があります。</p><p>Flutterのバージョンを確認しておきましょう。Flutter Webを使うのでChannel betaを利用しています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ flutter --version</span><br><span class="line">Flutter 1.17.0 • channel beta • https://github.com/flutter/flutter.git</span><br><span class="line">Framework • revision e6b34c2b5c (4 weeks ago) • 2020-05-02 11:39:18 -0700</span><br><span class="line">Engine • revision 540786dd51</span><br><span class="line">Tools • Dart 2.8.1</span><br></pre></td></tr></table></figure><p>さて、手順にはmockアプリをインストールしそれを動作するところまで含まれていますので、やってみましょう！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ flutter create myapp</span><br><span class="line">Creating project myapp...                                          </span><br><span class="line">・</span><br><span class="line">・</span><br><span class="line">(中略)</span><br><span class="line">・</span><br><span class="line">・</span><br><span class="line">Running <span class="string">"flutter pub get"</span> <span class="keyword">in</span> myapp...                               1.9s</span><br><span class="line">Wrote 77 files.</span><br><span class="line"></span><br><span class="line">All <span class="keyword">done</span>!</span><br><span class="line">[✓] Flutter: is fully installed. (Channel beta, v1.17.0, on Mac OS X 10.14.6 18G4032, locale ja-JP)</span><br><span class="line">[!] Android toolchain - develop <span class="keyword">for</span> Android devices: is partially installed; more components are available. (Android SDK version 28.0.3)</span><br><span class="line">[✗] Xcode - develop <span class="keyword">for</span> iOS and macOS: is not installed.</span><br><span class="line">[✓] Chrome - develop <span class="keyword">for</span> the web: is fully installed.</span><br><span class="line">[!] Android Studio: is partially installed; more components are available. (version 3.4)</span><br><span class="line">[✓] VS Code: is fully installed. (version 1.45.1)</span><br><span class="line">[✓] Connected device: is fully installed. (2 available)</span><br><span class="line"></span><br><span class="line">Run <span class="string">"flutter doctor"</span> <span class="keyword">for</span> information about installing additional components.</span><br><span class="line"></span><br><span class="line">In order to run your application, <span class="built_in">type</span>:</span><br><span class="line"></span><br><span class="line">  $ <span class="built_in">cd</span> myapp</span><br><span class="line">  $ flutter run</span><br><span class="line"></span><br><span class="line">Your application code is <span class="keyword">in</span> myapp/lib/main.dart.</span><br></pre></td></tr></table></figure><p>これで必要なファイル群が <code>myapp</code> 配下に作成されます。 <code>lib/main.dart</code> が実際にimplementする対象のファイルになるのですが、一旦触らずにアプリの起動を確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myapp</span><br><span class="line">$ flutter run -d chrome</span><br></pre></td></tr></table></figure><p>以下のような画面が表示されれば成功です！画面はとてもシンプルで、右下の「+ボタン」をクリックすると画面内のカウンタがインクリメントされていきます。</p><img src="/images/20200603/photo_20200603_02.png" style="border:solid 1px #000000"><p>これでアプリの開発環境は整いました。では早速アプリの開発に移っていきましょう。</p><h2 id="ChartJSプラグインを使ってグラフ表示を行う"><a href="#ChartJSプラグインを使ってグラフ表示を行う" class="headerlink" title="ChartJSプラグインを使ってグラフ表示を行う"></a>ChartJSプラグインを使ってグラフ表示を行う</h2><p>Flutter(Dart)で利用できるプラグインは<a href="https://pub.dev/" target="_blank" rel="noopener">pub.dev</a>というページにまとまっているのですが、今回はその中から<a href="https://pub.dev/packages/flutter_web_chartjs" target="_blank" rel="noopener">flutter_web_chartjs</a>というWeb版Flutterで使えるChartJSライブラリを使うことにしました。</p><p>使いたいパッケージは <code>pubspec.yaml</code> というファイルに以下のような形で記載します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter_web_chartjs:</span> <span class="string">^0.2.5</span></span><br></pre></td></tr></table></figure><p>これで準備完了です。<br><a href="https://pub.dev/packages/flutter_web_chartjs#-example-tab-" target="_blank" rel="noopener">Example</a>に従ってアプリを実装すれば以下のような画面を表示することができますが、詳細はここでは割愛します。</p><img src="/images/20200603/photo_20200603_03.png" style="border:solid 1px #000000"><p>縦軸と横軸に該当するデータセット群を用意すればグラフを表示できることが確認できました。</p><h2 id="FirebaseのDBと繋ぎたい"><a href="#FirebaseのDBと繋ぎたい" class="headerlink" title="FirebaseのDBと繋ぎたい"></a>FirebaseのDBと繋ぎたい</h2><p>DBはなるべく簡単に扱えるものにしたく、Cloud Firestoreを使うことにしました。</p><p>ちなみに、Cloud Firestoreを使うかRealtime Databaseを使うか少しだけ悩んだのですが、そのへんは<a href="https://speakerdeck.com/mura123yasu/zerokarashi-merufluttersheng-huo-prologue" target="_blank" rel="noopener">こちら</a>の資料にまとめてあります。</p><p>諸々の背景は省きますが、「おとなしくCloud FirestoreをNative Modeで使おう」というのが私の結論です。</p><h3 id="利用プラグインの追加"><a href="#利用プラグインの追加" class="headerlink" title="利用プラグインの追加"></a>利用プラグインの追加</h3><p>さて、実装に移っていきます。先程同様、まずは使いたいプラグインを <code>pubspec.yaml</code> に記載するところからです。<a href="https://pub.dev/packages/cloud_firestore" target="_blank" rel="noopener">cloud_firestore</a>を使うため、以下のように追記しました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter_web_chartjs:</span> <span class="string">^0.2.5</span></span><br><span class="line">  <span class="attr">cloud_firestore:</span> <span class="string">^0.13.5</span></span><br></pre></td></tr></table></figure><h3 id="Firebase-Appの作成"><a href="#Firebase-Appの作成" class="headerlink" title="Firebase Appの作成"></a>Firebase Appの作成</h3><p>次にFirebase Appの作成です。Firebase Consoleにて「アプリを追加」から作成し、 <code>アプリID</code> を取得します。</p><p>その際、以下のような形でHTMLファイルの修正も求められます。</p><img src="/images/20200603/photo_20200603_04.png" style="border:solid 1px #000000"><p>今回は <code>web/index.html</code> が修正対象になります。この辺の経緯は<a href="https://github.com/FirebaseExtended/flutterfire/blob/master/packages/cloud_firestore/cloud_firestore_web/README.md" target="_blank" rel="noopener">GitHubページのREADME</a>にも記載があります。</p><blockquote><p>Due to this bug in dartdevc, you will need to manually add the Firebase JavaScript files to your index.html file.</p></blockquote><p>Web版のFlutterは鋭意アップデート中ということもあり、今後改善されていくポイントなんだろうなと思っています。</p><h3 id="index-html-のアップデート"><a href="#index-html-のアップデート" class="headerlink" title="index.html のアップデート"></a><code>index.html</code> のアップデート</h3><p>必要な変更を加えた <code>index.html</code> の <code>&lt;body&gt;</code> タグは以下のようになりました。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Due to this bug in dartdevc, you will need to manually add the Firebase JavaScript files to your index.html file. see: https://github.com/FirebaseExtended/flutterfire/blob/master/packages/cloud_firestore/cloud_firestore_web/README.md--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.gstatic.com/firebasejs/7.5.0/firebase-app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.gstatic.com/firebasejs/7.5.0/firebase-firestore.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- This script installs service_worker.js to provide PWA functionality to</span></span><br><span class="line"><span class="comment">       application. For more information, see:</span></span><br><span class="line"><span class="comment">       https://developers.google.com/web/fundamentals/primers/service-workers --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        navigator.serviceWorker.register(<span class="string">'flutter_service_worker.js'</span>);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ADD THIS BEFORE YOUR main.dart.js SCRIPT --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// <span class="doctag">TODO:</span> Replace the following with your app's Firebase project configuration.</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// See: https://support.google.com/firebase/answer/7015592</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> firebaseConfig = &#123;</span></span><br><span class="line"><span class="actionscript">      apiKey: <span class="string">"YOUR_API_KEY"</span>,</span></span><br><span class="line"><span class="actionscript">      authDomain: <span class="string">"YOUR_AUTH_DOMAIN"</span>,</span></span><br><span class="line"><span class="actionscript">      databaseURL: <span class="string">"YOUR_DATABASE_URL"</span>,</span></span><br><span class="line"><span class="actionscript">      projectId: <span class="string">"YOUR_PROJECT_ID"</span>,</span></span><br><span class="line"><span class="actionscript">      storageBucket: <span class="string">"YOUR_STORAGE_BUCKET"</span>,</span></span><br><span class="line"><span class="actionscript">      messagingSenderId: <span class="string">"YOUR_MESSAGING_SENDER_ID"</span>,</span></span><br><span class="line"><span class="actionscript">      appId: <span class="string">"YOUR_APP_ID"</span>,</span></span><br><span class="line"><span class="actionscript">      measurementId: <span class="string">"YOUR_MEASUREMENT_ID"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="comment">// Initialize Firebase</span></span></span><br><span class="line">    firebase.initializeApp(firebaseConfig);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- END OF FIREBASE INIT CODE --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.dart.js"</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="main-dart-にて本実装"><a href="#main-dart-にて本実装" class="headerlink" title="main.dart にて本実装"></a><code>main.dart</code> にて本実装</h2><p>ここまでの下準備が整えば、本実装を行うのみです。<br><a href="https://pub.dev/packages/cloud_firestore#-example-tab-" target="_blank" rel="noopener">Example</a>等を参考にしつつ実装を進めたのが以下です。</p><p>まずはimport文とmain文。FirebaseAppを設定してアプリを起動します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_web_chartjs/chartjs.models.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_web_chartjs/chartjs.wrapper.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:firebase_core/firebase_core.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:cloud_firestore/cloud_firestore.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> FirebaseApp app = <span class="keyword">await</span> FirebaseApp.configure(</span><br><span class="line">    name: <span class="string">'Turniprice Visualizer'</span>,</span><br><span class="line">    options: <span class="keyword">const</span> FirebaseOptions(</span><br><span class="line">      apiKey: <span class="string">"YOUR_API_KEY"</span>,</span><br><span class="line">      projectID: <span class="string">"YOUR_PROJECT_ID"</span>,</span><br><span class="line">      googleAppID: <span class="string">"YOUR_APP_ID"</span>,</span><br><span class="line">      databaseURL: <span class="string">"YOUR_DATABASE_URL"</span>,</span><br><span class="line">      storageBucket: <span class="string">"YOUR_STORAGE_BUCKET"</span>,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">final</span> Firestore firestore = Firestore(app: app);</span><br><span class="line"></span><br><span class="line">  runApp(MyApp(firestore: firestore));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先程 <code>runApp()</code> に引数として渡された <code>MyApp</code> クラスの実体です。 <code>_getChartData()</code> が今回のキモとなる部分であり、FirestoreへのアクセスとChartJSで描画するデータセットの整形を担っています。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyApp(&#123;<span class="keyword">this</span>.firestore&#125;);</span><br><span class="line">  <span class="keyword">final</span> Firestore firestore;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> values = &#123;&#125;;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; x = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> colors = [</span><br><span class="line">    Colors.blue.withOpacity(<span class="number">0.4</span>),</span><br><span class="line">    Colors.yellow.withOpacity(<span class="number">0.4</span>),</span><br><span class="line">    Colors.red.withOpacity(<span class="number">0.4</span>),</span><br><span class="line">    Colors.green.withOpacity(<span class="number">0.4</span>)</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  Future&lt;ChartData&gt; _getChartData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Query documents</span></span><br><span class="line">    <span class="keyword">final</span> querySnapshot = <span class="keyword">await</span> firestore</span><br><span class="line">        .collection(<span class="string">"prices"</span>)</span><br><span class="line">        .orderBy(<span class="string">"date"</span>, descending: <span class="keyword">true</span>)</span><br><span class="line">        .orderBy(<span class="string">"ampm"</span>, descending: <span class="keyword">true</span>)</span><br><span class="line">        .getDocuments();</span><br><span class="line">    </span><br><span class="line">    querySnapshot.documents.forEach((doc) =&gt; format(doc));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ChartDataオブジェクトを作成</span></span><br><span class="line">    <span class="comment">// datasetsを作成</span></span><br><span class="line">    <span class="built_in">List</span>&lt;ChartDataset&gt; datasets = [];</span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">    values.forEach((key, value) &#123;</span><br><span class="line">      datasets.add(</span><br><span class="line">        ChartDataset(</span><br><span class="line">          data: value,</span><br><span class="line">          label: key,</span><br><span class="line">          backgroundColor: colors[count],</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">      count++;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> chartData = ChartData(</span><br><span class="line">      labels: x,</span><br><span class="line">      datasets: datasets,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chartData;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> format(DocumentSnapshot doc) &#123;</span><br><span class="line">    <span class="built_in">print</span>(doc[<span class="string">"date"</span>] + <span class="string">"/"</span>+ doc[<span class="string">"ampm"</span>] + <span class="string">"/"</span>+ doc[<span class="string">"label"</span>] + <span class="string">"/"</span>+ doc[<span class="string">"val"</span>].toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// "date+ampm"がxにいるかチェックし、いなければリストに追加</span></span><br><span class="line">    <span class="keyword">var</span> xVal = doc[<span class="string">"date"</span>] + doc[<span class="string">"ampm"</span>];</span><br><span class="line">    <span class="keyword">if</span> (!x.contains(xVal)) &#123;</span><br><span class="line">      x.add(xVal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// labelをキーにしたリストがvaluesにあるかチェックし、いなければリストに追加</span></span><br><span class="line">    values[doc[<span class="string">"label"</span>]] ??= [];</span><br><span class="line">    <span class="comment">// valueをリストに追加</span></span><br><span class="line">    values[doc[<span class="string">"label"</span>]].add(doc[<span class="string">"val"</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみにデータレコードは以下のような情報を持っています。</p><img src="/images/20200603/photo_20200603_05.png" style="border:solid 1px #000000"><p>最後にStateクラスです。 <code>MyApp</code> クラスは <code>StatefulWidget</code> なのでこのStateクラスにてbuild処理を実装します。実装時に気にしたポイントは後述します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">'Turniprice Visualizer'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: FutureBuilder(</span><br><span class="line">            future: widget._getChartData(),</span><br><span class="line">            builder: (BuildContext context, AsyncSnapshot&lt;ChartData&gt; snapshot) &#123;</span><br><span class="line">              <span class="comment">// 通信中</span></span><br><span class="line">              <span class="keyword">if</span> (snapshot.connectionState != ConnectionState.done) &#123;</span><br><span class="line">                <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 通信終了だがエラーあり</span></span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[USER-ERROR]"</span> + snapshot.error.toString());</span><br><span class="line">                <span class="keyword">return</span> Text(snapshot.error.toString());</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 通信正常終了</span></span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[USER-INFO]Fetching data succeeded."</span>);</span><br><span class="line">                <span class="keyword">return</span> ChartJS(</span><br><span class="line">                    id: <span class="string">'graph'</span>,</span><br><span class="line">                    config: ChartConfig(</span><br><span class="line">                        type: ChartType.line,</span><br><span class="line">                        options: ChartOptions(</span><br><span class="line">                            animationConfiguration: ChartAnimationConfiguration(</span><br><span class="line">                              duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">1200</span>),</span><br><span class="line">                              easing: ChartEasing.easeOutQuart,</span><br><span class="line">                            ),</span><br><span class="line">                            scales: ChartScales(</span><br><span class="line">                              xAxes: [</span><br><span class="line">                                ChartAxis(</span><br><span class="line">                                  type: ChartCartesianAxisType.category,</span><br><span class="line">                                )</span><br><span class="line">                              ],</span><br><span class="line">                            ),</span><br><span class="line">                            tooltip: ChartTooltip(</span><br><span class="line">                                intersect: <span class="keyword">false</span>,</span><br><span class="line">                                mode: ChartTooltipMode.isIndex,</span><br><span class="line">                                callbacks: ChartCallbacks(label: (tooltip) &#123;</span><br><span class="line">                                  <span class="keyword">return</span> <span class="string">'R\$ <span class="subst">$&#123;tooltip.value&#125;</span>'</span>;</span><br><span class="line">                                &#125;))),</span><br><span class="line">                        data: snapshot.data),</span><br><span class="line">                  );</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"[USER-INFO]Fetching data failed."</span>);</span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">'No Data'</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-dart-実装時に気にしたこと"><a href="#main-dart-実装時に気にしたこと" class="headerlink" title="main.dart 実装時に気にしたこと"></a><code>main.dart</code> 実装時に気にしたこと</h2><h3 id="StatefulWidget-vs-StatelessWidget"><a href="#StatefulWidget-vs-StatelessWidget" class="headerlink" title="StatefulWidget vs StatelessWidget"></a><code>StatefulWidget</code> vs <code>StatelessWidget</code></h3><p>Widgetには <code>Stateful</code> と <code>Stateless</code> の2種類があり、<a href="https://flutter.ctrnost.com/tutorial/tutorial05/" target="_blank" rel="noopener">Flutter Doc JP</a>では以下のように説明されています。</p><img src="/images/20200603/photo_20200603_06.png" style="border:solid 1px #000000"><p>今回利用しているChartJSプラグインにおいて <code>ChartJS</code> クラスは <code>StatefulWidget</code> として定義されていたため、 <code>MyApp</code> クラスは <code>StatefulWidget</code> で実装しています。用途的には、初回通信でのみ値を取得および描画できればよかったので、 <code>StatelessWidget</code> でも良いのかなと思いましたが、プラグインの実装に従う形で <code>StatefulWidget</code> を利用しています。</p><h3 id="FutureBuilder-vs-StreamBuilder"><a href="#FutureBuilder-vs-StreamBuilder" class="headerlink" title="FutureBuilder vs StreamBuilder"></a><code>FutureBuilder</code> vs <code>StreamBuilder</code></h3><p>素のBuilderを使うと、Cloud Firestoreのデータ取得が完了する前に画面の描画処理が走ってしまいます。そのため、非同期通信を待つBuilderを使う必要がありました。</p><p>非同期Builderには <code>FutureBuilder</code> と <code>StreamBuilder</code> の2種類があります。</p><ul><li>StreamBuilder<ul><li>非同期処理の更新する変数が変化する度にウィジェットをbuildし直すBuilder</li></ul></li><li>FutureBuilder<ul><li>指定した非同期処理の完了を待つBuilder</li></ul></li></ul><p>上記の説明は<a href="https://qiita.com/sshon/items/9005cd64a4fc9f9b6a45" target="_blank" rel="noopener">こちら</a>のページから拝借しました。</p><p>今回のアプリでは初回のデータ取得のみを待てばよいので、Builderは <code>FutureBuilder</code> を利用しました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はFlutter入門記事ということで、簡単ではありますがFirebaseを利用したアプリ開発をご紹介させて頂きました。</p><p>それにしてもDartという開発言語、Future社員の私にとってFuture型の存在がなにか特別な感情をもたらしてくれました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Flutterでアプリ書いてるけど何回も&quot;Future&quot;って登場してて、知らぬ間に愛社精神が磨かれてる気がする。Dart...お前まさか...</p>&mdash; Yasuhiro Murata (@famipapamart) <a href="https://twitter.com/famipapamart/status/1254307447117737984?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 26, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>…という冗談はさておき、書いている間に楽しい気分にさせてくれる言語というのもモチベーションの一部だと思うので、この感情はこれからも大事にしていきたいと思います。</p><p>春の入門祭り🌸 はまだまだ続きます！Future技術ブログ始まって以来の超大型連載、ぜひぜひ最後までお付き合いください！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの&lt;a href=&quot;https://twitter.com/famipapamart&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
      <category term="Dart" scheme="https://future-architect.github.io/tags/Dart/"/>
    
      <category term="アプリ" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #02 Google Cloud Platform 101</title>
    <link href="https://future-architect.github.io/articles/20200602/"/>
    <id>https://future-architect.github.io/articles/20200602/</id>
    <published>2020-06-02T00:54:02.000Z</published>
    <updated>2020-06-23T06:03:52.402Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200602/top.jpg" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/dendoktoor-14802912/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4934438" target="_blank" rel="noopener">dendoktoor</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4934438" target="_blank" rel="noopener">Pixabay</a>からの画像</p><br><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の第2弾です。</p><p>こんにちは、TIG/DXチームの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤</a>です。今回はGCPでWebアプリ環境を作ってみようという記事になります。今回のモチベーションとしては、</p><ul><li>GCPには特有の思想・設計があるが、まだまだ世に浸透していないと思うので、それを表現したい</li><li>世の中のシステムのほとんどがWebサービスなので、それを例に構築する</li></ul><p>というのがあります。今回は社内でGCPを広めている立場としても、入門記事を出してより多くの人にGCPを触ってもらえたらと思います。GCPの思想や設計については以前私が書いたブログがあるので以下をご覧ください。<br>「<a href="https://future-architect.github.io/articles/20200424/">社内勉強会で発表したGCP資料を公開します</a>」</p><h2 id="GCPのプロジェクトを作成する"><a href="#GCPのプロジェクトを作成する" class="headerlink" title="GCPのプロジェクトを作成する"></a>GCPのプロジェクトを作成する</h2><p>はじめにGCPのプロジェクトを作成して、片付けを簡単にしましょう。GCPは1つのアカウントに対して複数のプロジェクトを作成することができます。今回は以下の画像の様にプロジェクトを作成しました。</p><img src="/images/20200602/photo_20200602_01.png" class="img-middle-size" style="border:solid 1px #000000"><p>しばらくすると作成が完了するので、待ちましょう。</p><h2 id="Compute-Engineを使ったWebアプリ環境の構築"><a href="#Compute-Engineを使ったWebアプリ環境の構築" class="headerlink" title="Compute Engineを使ったWebアプリ環境の構築"></a>Compute Engineを使ったWebアプリ環境の構築</h2><p>ここではCompute Engine(GCE)を使ったWebアプリ環境の構築を行います。完成すると、以下のような構成になります。<br><img src="/images/20200602/photo_20200602_02.png"></p><h3 id="1-VPCとサブネットを作成する"><a href="#1-VPCとサブネットを作成する" class="headerlink" title="1.VPCとサブネットを作成する"></a>1.VPCとサブネットを作成する</h3><p>はじめに、VPCとサブネットを作成しましょう。GCPではVPCは世界中のリージョンをまたぐことができます。ハンバーガーメニューから[VPCネットワーク]&gt;[VPCネットワーク]を選びましょう。</p><img src="/images/20200602/photo_20200602_03.png" class="img-middle-size" style="border:solid 1px #000000"><p>デフォルトのVPCがすでにありますが、今回は使用せず、画面上部にある[VPCネットワークを作成]を押しましょう。<br>今回はVPCネットワークを「<strong>sample-network</strong>」とし、サブネットを2つ以下のように作成しました。</p><table><thead><tr><th>Subnet Name</th><th>Region</th><th>IP Address Range</th></tr></thead><tbody><tr><td>sample-subnet-pub</td><td>asia-northeast1</td><td>192.168.1.0/24</td></tr><tr><td>sample-subnet-prv</td><td>asia-northeast3</td><td>10.0.1.0/24</td></tr></tbody></table><p>また、動的ルーティングモードは今回リージョンとしています。これでVPCとサブネットの作成が終わったので、リソースの作成に入りましょう。</p><h3 id="2-GCEの作成"><a href="#2-GCEの作成" class="headerlink" title="2.GCEの作成"></a>2.GCEの作成</h3><p>はじめにGCEインスタンスを立ち上げていきましょう。まずはハンバーガーメニューから「Compute Engine」を選択してください。リソースが何もない状態だと以下の画面が表示されますので「作成」の青ボタンを押しましょう。<br><img src="/images/20200602/photo_20200602_04.png" class="img-middle-size"></p><p>作成画面に入ったら、いくつか選択する項目があるので、画像の下の表に倣って埋めましょう。<br><img src="/images/20200602/photo_20200602_05.png" class="img-middle-size" style="border:solid 1px #000000"></p><table><thead><tr><th></th><th>踏み台サーバー</th><th>Webサーバー</th></tr></thead><tbody><tr><td>名前</td><td>bastion</td><td>web-instance</td></tr><tr><td>リージョン</td><td>asia-northeast1</td><td>asia-northeast1-a</td></tr><tr><td>ゾーン</td><td>asia-northeast3</td><td>asia-northeast3-a</td></tr><tr><td>IDとAPIへのアクセス</td><td>全てのCloud APIに完全アクセス権を許可</td><td>全てのCloud APIに完全アクセス権を許可</td></tr><tr><td>ファイアウォール</td><td>-</td><td>HTTP トラフィックを許可する</td></tr><tr><td>ネットワークタグ</td><td>bastion</td><td>from-bastion, (http-server)</td></tr><tr><td>ネットワーク</td><td>sample-network</td><td>sample-network</td></tr><tr><td>サブネットワーク</td><td>sample-subnet-pub</td><td>sample-subnet-prv</td></tr><tr><td>外部IP</td><td>エフェメラル</td><td>なし</td></tr></tbody></table><p>他の項目についてはデフォルトで入っているもので問題ありません。ここまでくるとインスタンスが2台出来上がっていると思います。</p><p>ここでさらにインスタンスグループを作成しましょう。のちの4で使います。[Compute Engine]&gt;[インスタンスグループ]まで進みます。今回は既に作成されているインスタンスをインスタンスグループに属させるので、「新しい非マネージドインスタンス グループ」を使います。以下の画像の通りに作成を進めましょう。<br><img src="/images/20200602/photo_20200602_06.png" class="img-middle-size" style="border:solid 1px #000000"></p><h3 id="3-ファイアウォールの作成"><a href="#3-ファイアウォールの作成" class="headerlink" title="3.ファイアウォールの作成"></a>3.ファイアウォールの作成</h3><p>今回、2つGCEを作成しています。サーバーが攻撃を受けないように守りを固めましょう。[VPCネットワーク]&gt;[ファイアウォールルール]から作成できます。以下の表の2つを作成してください</p><table><thead><tr><th>名前</th><th>bastion</th><th>from-bastion</th></tr></thead><tbody><tr><td>ネットワーク</td><td>sample-network</td><td>sample-network</td></tr><tr><td>ターゲット</td><td>指定されたターゲットタグ</td><td>指定されたターゲットタグ</td></tr><tr><td>ターゲットタグ</td><td>bastion</td><td>from-bastion</td></tr><tr><td>ソースフィルタ</td><td>IP範囲</td><td>ソースタグ</td></tr><tr><td>ソースIPの範囲/ソースタグ</td><td>0.0.0.0/0</td><td>bastion</td></tr><tr><td>プロトコルとポート</td><td>すべて許可</td><td>すべて許可</td></tr></tbody></table><h3 id="4-ロードバランサの作成"><a href="#4-ロードバランサの作成" class="headerlink" title="4.ロードバランサの作成"></a>4.ロードバランサの作成</h3><p>リソース作成の最後です。<code>web-instance</code>にインターネット上からアクセスしてサービスを見れるようにロードバランサの設定をします。ハンバーガーメニューから[ネットワークサービス]&gt;[負荷分散]を選択しましょう。GCEと同様に何も作成されていなければ、画面中央にある[ロードバランサを作成]を押して作成に入ります。ここで使うのは「HTTP(S)負荷分散」です。用途としてはインターネットからVMのアクセスを受け入れるように設定します。名前を「web-lb」としてバックエンドからどんどん設定を進めていきましょう。<br>バックエンドサービスの設定について、今回はバックエンドをGCEインスタンスにするので、バックエンドサービスを選択し、作成に進みましょう。入力項目は名前を「web-backend」、インスタンスグループを「web-instance-group」と入力します。ヘルスチェックの欄がありますが、名前を「web-health」。プロトコルを「HTTP」にして、他の欄はデフォルトのままで作成に進みましょう。<br>フロントエンドの設定は「web-frontend」として入力し、完了ボタンを押しましょう。<br>これで一通り入力が終わったので、最後に確認と完了を見てみましょう。ここまでくると以下のようになっているかと思います。<br><img src="/images/20200602/photo_20200602_07.png" class="img-middle-size" style="border:solid 1px #000000"></p><h3 id="5-Cloud-Router-Cloud-NATの設定"><a href="#5-Cloud-Router-Cloud-NATの設定" class="headerlink" title="5. Cloud Router, Cloud NATの設定"></a>5. Cloud Router, Cloud NATの設定</h3><p>ミドルウェアの設定を行う前にWebサーバーから<code>apt-get</code>コマンドを実行できるようにCloud RouterとCloud NATを設定します。<br>Cloud Routerはハンバーガーメニューの[ハイブリッド接続]&gt;[クラウドルーター]を選択し、作成します。</p><ul><li>名前：seoul-router</li><li>ネットワーク：sample-network</li><li>リージョン：asia-northeast3</li></ul><p>他はデフォルトのままで大丈夫です。作成ボタンを押してしばらく待つと出来上がります。<br>次にCloud NATを作ります。ハンバーガーメニューの[ネットワークサービス]&gt;[Cloud NAT]に入り、作成します。</p><ul><li>名前：seoul-nat</li><li>VPCネットワーク：sample-network</li><li>リージョン：asia-northeast3</li><li>クラウドルーター：seoul-router</li></ul><p>こちらも他はデフォルトのまま作成すれば出来上がります。次はいよいよミドルウェアの設定をしましょう。</p><h2 id="6-ミドルウェアの設定"><a href="#6-ミドルウェアの設定" class="headerlink" title="6.ミドルウェアの設定"></a>6.ミドルウェアの設定</h2><p>ここからは<code>web-instance</code>の設定をしていきましょう。操作するとき、ローカルPCに色々設定を入れて行うのもいいのですが、GCPにはCloud Shellというものが用意されているので、使っていきましょう。コンソールのヘッダーにあるので有効化して操作できるようにしましょう。また、このCloud Shellはユーザーに紐づくので、プロジェクトを横断して使うことになります。<br><img src="/images/20200602/photo_20200602_08.png"></p><p>Cloud Shellに入って、以下のコマンドを実行して、踏み台サーバーに入りましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud compute ssh bastion --project [PROJECT_ID] --zone asia-northeast1<span class="_">-a</span></span><br></pre></td></tr></table></figure><p>途中キーペアの作成を行いますが、聞かれている内容そのまま答えていけば問題ありません。sshできたら<code>uname -a</code>コマンドで踏み台サーバーにいるか確認しましょう。<br>踏み台に入れたら次はwebサーバーへのsshのコマンドで行います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud compute ssh web-instance --project [PROJECT_ID] --zone asia-northeast3<span class="_">-a</span> --internal-ip</span><br></pre></td></tr></table></figure><p>今度は引数に<code>--internal-ip</code>と入れましたが、これは<code>web-instance</code>に内部IPしかついていないためオプションとして付けています。また、<code>uname -a</code>で踏み台に入れいているか確認ができたら、以下のコマンドでNginxをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span><br><span class="line">$ systemctl status nginx <span class="comment"># Nginxが起動しているか確認する</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> nginx <span class="comment"># インスタンス再起動後にNginxも自動起動するよう設定</span></span><br></pre></td></tr></table></figure><p>ここまでできたら、ロードバランサに付与されている外部IPをブラウザで実行してください。<br><img src="/images/20200602/lb.png" style="border:solid 1px #000000"></p><p>ブラウザからこちらのNginxの画面が見えたらここまでの操作がうまくいっています。あとは好きなアプリケーションを載せましょう！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回はGCPのIaaSであるCompute Engineを使って作成を行いました。GCPならではの強みはいくつかあり</p><ul><li>サブネットはリージョン単位で設定が可能<ul><li>ゾーンごと細かく設定しなくて良い</li></ul></li><li>ロードバランサはグローバルアクセスが可能<ul><li>バックエンドを別のリージョンのインスタンスも設定できる</li></ul></li><li>Cloud Shellを使って簡単にCUI環境を得ることができる。</li></ul><p>など、GCPを使うことのメリットはたくさんあります。<br>これを読んで試したい！という方は、是非アカウントを作成して、こちら試してみてください。お金がかかるのでは？と思う人がいると思いますが、アカウントを初回登録してから1年間有効な$300のクレジットがあるので、それを使い切るまでは課金されませんので安心してお試しください！</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200602/top.jpg&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/dendoktoor-14802912/?utm_source=link-
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #01 Goのテストに入門してみよう！</title>
    <link href="https://future-architect.github.io/articles/20200601/"/>
    <id>https://future-architect.github.io/articles/20200601/</id>
    <published>2020-06-01T00:41:23.000Z</published>
    <updated>2020-06-23T06:04:06.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG の辻です。<a href="/articles/20200529/">今回は春の入門祭り</a>ということで Go のテストに入門してみよう！という記事です。</p><p>書いた背景ですが Go の標準ライブラリのコードリーディング会で <code>testing</code> パッケージにチャレンジしてみましたが、難しすぎてわからん。そもそも Go のテストって何ができるんだっけ？という話になり、基本的な内容をなるべく具体例をまじえながらまとめました。</p><p>ざっとどんなことができるんだろう、という index になれば幸いです。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>Go に組み込まれているテストの仕組みの中に、ベンチマークに関するテストと Example テストというサンプルコード用のテストも含まれているのですが、この 2 つは対象外にします。基礎的と思われる内容から順に並べてみました。</p><ul><li><a href="#はじめに">はじめに</a></li><li><a href="#tips">Tips</a><ul><li><a href="#テストがしたい">テストがしたい</a></li><li><a href="#テストをスキップしたい">テストをスキップしたい</a></li><li><a href="#テストを並列に実施したい">テストを並列に実施したい</a></li><li><a href="#テストの前処理や後処理を実施したい">テストの前処理や後処理を実施したい</a></li><li><a href="#カバレッジを取得したい">カバレッジを取得したい</a></li><li><a href="#あるディレクトリ配下のテストをすべて実施したい">あるディレクトリ配下のテストをすべて実施したい</a></li><li><a href="#一部のテストのみ実施したい">一部のテストのみ実施したい</a></li><li><a href="#テストのキャッシュを削除したい">テストのキャッシュを削除したい</a></li><li><a href="#テストコードの雛形を楽に作りたい">テストコードの雛形を楽に作りたい</a></li><li><a href="#構造体マップやスライスの比較を実施したい">構造体、マップやスライスの比較を実施したい</a></li><li><a href="#apiサーバにアクセスするテストをしたい">APIサーバにアクセスするテストをしたい</a></li><li><a href="#apiサーバのハンドラのテストをしたい">APIサーバのハンドラのテストをしたい</a></li><li><a href="#データ競合をテストで検知したい">データ競合をテストで検知したい</a></li><li><a href="#テストデータを置いておきたい">テストデータを置いておきたい</a></li><li><a href="#テストにヘルパー関数を使いたい">テストにヘルパー関数を使いたい</a></li><li><a href="#ブラックボックステストをしたい">ブラックボックステストをしたい</a></li><li><a href="#用途単体インテグレーションなどによってテストを切り替えたい">用途(単体/インテグレーションなど)によってテストを切り替えたい</a></li><li><a href="#モックを使ってテストをしたい">モックを使ってテストをしたい</a></li><li><a href="#ゴルーチンリークを検出したい">ゴルーチンリークを検出したい</a></li></ul></li><li><a href="#まとめ">まとめ</a></li><li><a href="#参考資料">参考資料</a></li></ul><h2 id="テストがしたい"><a href="#テストがしたい" class="headerlink" title="テストがしたい"></a>テストがしたい</h2><p>Goのテストは <code>go test</code> コマンドを用いてテストを実施します。テストを実施する関数の命名は以下のような形式でなければなりません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestXxx</span><span class="params">(*testing.T)</span></span></span><br></pre></td></tr></table></figure><p><code>TestXxx</code> は <code>Testxxx</code> ではダメです。<code>Test_xxx</code> という関数名であれば問題ありません。</p><p>テストファイルは <code>xxxx_test.go</code> といった命名である必要があります。このファイルはビルド時には除かれます。簡単なテストを試してみます。</p><figure class="highlight go"><figcaption><span>main_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="keyword">int</span></span><br><span class="line">b <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">args args</span><br><span class="line">want <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"normal"</span>,</span><br><span class="line">args: args&#123;a: <span class="number">1</span>, b: <span class="number">2</span>&#125;,</span><br><span class="line">want: <span class="number">3</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> got := add(tt.args.a, tt.args.b); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"add() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/XYrpmljtPrW" target="_blank" rel="noopener">https://play.golang.org/p/XYrpmljtPrW</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestAdd</span><br><span class="line">=== RUN   TestAdd/normal</span><br><span class="line">--- PASS: TestAdd (0.00s)</span><br><span class="line">    --- PASS: TestAdd/normal (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>上記のテストは TableDrivenTest とサブテストを組み合わせています。どちらも現場でよく使われます。サブテストを用いると各テストごとに結果がわかるようになります。 TableDrivenTest はさまざまな Input/Output パターンを網羅するのに便利です。上記のテストをシンプルに書き直すと以下のようになります。</p><ul><li><a href="https://github.com/golang/go/wiki/TableDrivenTests" target="_blank" rel="noopener">TableDrivenTests</a></li><li><a href="https://golang.org/pkg/testing/#T.Run" target="_blank" rel="noopener">T.Run</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> add(<span class="number">1</span>, <span class="number">2</span>) != <span class="number">3</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"add() = %v, want %v"</span>, add(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/-TQObdTOqPA" target="_blank" rel="noopener">https://play.golang.org/p/-TQObdTOqPA</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestAdd</span><br><span class="line">--- PASS: TestAdd (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><h2 id="テストをスキップしたい"><a href="#テストをスキップしたい" class="headerlink" title="テストをスキップしたい"></a>テストをスキップしたい</h2><p>時間がかかるテストなど、自動テストなどではテストをスキップしたい場合があるかもしれません。次のようなある条件の場合は処理にめちゃくちゃ時間がかかる例を考えてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">365</span> * <span class="number">24</span> * time.Hour)</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このテストをスキップしたいとします。その場合は <code>func (c *T) Skip(args ...interface{})</code> というメソッドを用いることでスキップできます。</p><p>テストコードに以下を追加します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">b: <span class="number">2</span>,</span><br><span class="line">&#125;,</span><br><span class="line">want: <span class="number">3</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 以下を追加</span></span><br><span class="line"><span class="comment">// ---------------------------------</span></span><br><span class="line"><span class="keyword">if</span> testing.Short() &#123;</span><br><span class="line">t.Skip(<span class="string">"skipping test in short mode."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------------------------------</span></span><br><span class="line"><span class="keyword">if</span> got := add(tt.args.a, tt.args.b); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"add() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ go test -v -short</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   Test_add</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   Test_add&#x2F;normal_1</span><br><span class="line">--- PASS: Test_add (0.00s)</span><br><span class="line">    --- SKIP: Test_add&#x2F;normal_1 (0.00s)</span><br><span class="line">        main_test.go:35: skipping test in short mode.</span><br><span class="line">PASS</span><br><span class="line">ok      github.com&#x2F;d-tsuji&#x2F;go-sandbox   0.339s</span><br></pre></td></tr></table></figure><p>テストがスキップされていることが分かります。さらっと <code>testing.Short()</code> という関数も用いましたが <a href="https://golang.org/pkg/testing/#Short" target="_blank" rel="noopener"><code>Short()</code></a> は <code>testing</code> パッケージに含まれている関数で、<code>-short</code> フラグがセットされていると true になります。そのためテストを実施するときに <code>-short</code> というフラグを付与したときだけテストがスキップされる、そうでないときはスキップされずテストが実施される、というように使い分けることができます。</p><p>標準パッケージでもテストのスキップが実装されているのを色々見ることができます。以下は <a href="https://github.com/golang/go/blob/master/src/io/ioutil/ioutil_test.go#L68-L71" target="_blank" rel="noopener"><code>io/ioutil/ioutil_test.go</code></a> からの抜粋です。特定の条件を満たす場合にテストをスキップするように実装されています。</p><figure class="highlight go"><figcaption><span>io/ioutil/ioutil_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReadOnlyWriteFile</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> os.Getuid() == <span class="number">0</span> &#123;</span><br><span class="line">t.Skipf(<span class="string">"Root can write to read-only files anyway, so skip the read-only test."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="テストを並列に実施したい"><a href="#テストを並列に実施したい" class="headerlink" title="テストを並列に実施したい"></a>テストを並列に実施したい</h2><p>以下のような謎に sleep する実装があるとします。テストを並列に実施したいとします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">time.Sleep(time.Duration(a+b) * time.Second)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>並列化せず、逐次サブテストを実施すると 3 + 5 + 7 = 15 から約 15 秒テスト実施に時間がかかります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_add</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="keyword">int</span></span><br><span class="line">b <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">args args</span><br><span class="line">want <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="string">"normal_1"</span>, args&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="string">"normal_2"</span>, args&#123;<span class="number">2</span>, <span class="number">3</span>&#125;, <span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="string">"normal_3"</span>, args&#123;<span class="number">3</span>, <span class="number">4</span>&#125;, <span class="number">7</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> got := add(tt.args.a, tt.args.b); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"add() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   Test_add</span><br><span class="line">=== RUN   Test_add/normal_1</span><br><span class="line">=== RUN   Test_add/normal_2</span><br><span class="line">=== RUN   Test_add/normal_3</span><br><span class="line">--- PASS: Test_add (15.01s)</span><br><span class="line">    --- PASS: Test_add/normal_1 (3.00s)</span><br><span class="line">    --- PASS: Test_add/normal_2 (5.00s)</span><br><span class="line">    --- PASS: Test_add/normal_3 (7.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/go-sandbox   15.315s</span><br></pre></td></tr></table></figure><p>並列にテストを実施するには <code>func (t *T) Parallel()</code> メソッドを用いることができます。上記のテストに <code>tt := tt</code> と <code>t.Parallel()</code> を追記します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line"><span class="comment">// 以下を追加</span></span><br><span class="line"><span class="comment">// ---------</span></span><br><span class="line">tt := tt</span><br><span class="line"><span class="comment">// ---------</span></span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 以下を追加</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="keyword">if</span> got := add(tt.args.a, tt.args.b); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"add() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の実装を用いてテストをします。するとテストが並列に実施されていることが分かります。結果としてテストにかかった時間は約 7 秒になりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   Test_add</span><br><span class="line">=== RUN   Test_add/normal_1</span><br><span class="line">=== PAUSE Test_add/normal_1</span><br><span class="line">=== RUN   Test_add/normal_2</span><br><span class="line">=== PAUSE Test_add/normal_2</span><br><span class="line">=== RUN   Test_add/normal_3</span><br><span class="line">=== PAUSE Test_add/normal_3</span><br><span class="line">=== CONT  Test_add/normal_1</span><br><span class="line">=== CONT  Test_add/normal_3</span><br><span class="line">=== CONT  Test_add/normal_2</span><br><span class="line">--- PASS: Test_add (0.00s)</span><br><span class="line">    --- PASS: Test_add/normal_1 (3.00s)</span><br><span class="line">    --- PASS: Test_add/normal_2 (5.00s)</span><br><span class="line">    --- PASS: Test_add/normal_3 (7.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/go-sandbox   7.317s</span><br></pre></td></tr></table></figure><p>ループ時に割り当てているローカル変数 <code>tt</code> を捕捉することは重要です。Go ではループで用いられる変数は同じアドレスを使います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b := []<span class="keyword">byte</span>(<span class="string">"abcde"</span>)</span><br><span class="line"><span class="keyword">for</span> i, c := <span class="keyword">range</span> b &#123;</span><br><span class="line">fmt.Printf(<span class="string">"i: %#v, c: %#v ------- &amp;i: %#v, &amp;c: %#v\n"</span>, i, <span class="keyword">string</span>(c), &amp;i, &amp;c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 変数のアドレスがすべて同じアドレスを参照している</span><br><span class="line">i: 0, c: <span class="string">"a"</span> ------- &amp;i: (*int)(0x40e020), &amp;c: (*uint8)(0x40e024)</span><br><span class="line">i: 1, c: <span class="string">"b"</span> ------- &amp;i: (*int)(0x40e020), &amp;c: (*uint8)(0x40e024)</span><br><span class="line">i: 2, c: <span class="string">"c"</span> ------- &amp;i: (*int)(0x40e020), &amp;c: (*uint8)(0x40e024)</span><br><span class="line">i: 3, c: <span class="string">"d"</span> ------- &amp;i: (*int)(0x40e020), &amp;c: (*uint8)(0x40e024)</span><br><span class="line">i: 4, c: <span class="string">"e"</span> ------- &amp;i: (*int)(0x40e020), &amp;c: (*uint8)(0x40e024)</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/_tSALjq8yZ6" target="_blank" rel="noopener">https://play.golang.org/p/_tSALjq8yZ6</a></p><p>そのため、テストを並列に実行するときは <code>tt := tt</code> などとして変数をシャドウイングし、並列で実行しているテストに影響がないようにする必要があります。</p><p>ただし、テストケース自体がそもそも並列に実行できない場合、例えばデータベース上のテーブルへの UPDATE や INSERT が発生し、テストケースで競合する場合、テストを並列に実行することはできないため、注意が必要です。</p><h2 id="テストの前処理や後処理を実施したい"><a href="#テストの前処理や後処理を実施したい" class="headerlink" title="テストの前処理や後処理を実施したい"></a>テストの前処理や後処理を実施したい</h2><p>テストをしていると、前処理や後処理をしたい場合があると思います。主な例の 1 つとしてデータベースの処理化があるでしょう。テストを実施する前処理としてあるデータを INSERT しておいて、テスト実施後に対象のテーブルのデータを削除する、といったものです。</p><p>そのような共通的な前処理や後処理を実施したい場合は </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span></span><br></pre></td></tr></table></figure><p>関数を用いることができます。</p><p>例を見てみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"なんらかの処理"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のように <code>TestMain</code> を用いてテストを制御するとテストの前後(今回の場合は <code>f()</code> の前後)に処理を実行できます。<code>m.Run()</code> の実行結果を取得して <code>os.Exit()</code> するのが慣用的です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_f</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"前処理"</span>)</span><br><span class="line">status := m.Run()</span><br><span class="line">    fmt.Println(<span class="string">"後処理"</span>)</span><br><span class="line">    </span><br><span class="line">    os.Exit(status)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span></span><br><span class="line">前処理</span><br><span class="line">なんらかの処理</span><br><span class="line">PASS</span><br><span class="line">後処理</span><br><span class="line">ok      github.com/d-tsuji/go-sandbox   0.298s</span><br></pre></td></tr></table></figure><p>参考までに <code>google/trillian</code> という OSS で <code>TestMain</code> がどのように使われているか確認してみます。以下はテスト用のデータベースを <code>openTestDBOrDie()</code> として作成し、テスト終了後に <code>done(context.Background())</code> という処理を実施しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> !testdb.PGAvailable() &#123;</span><br><span class="line">glog.Errorf(<span class="string">"PG not available, skipping all PG storage tests"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> done <span class="function"><span class="keyword">func</span><span class="params">(context.Context)</span></span></span><br><span class="line">db, done = openTestDBOrDie()</span><br><span class="line"></span><br><span class="line">status := m.Run()</span><br><span class="line">done(context.Background())</span><br><span class="line">os.Exit(status)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/google/trillian/blob/master/storage/postgres/storage_test.go#L168-L181" target="_blank" rel="noopener">https://github.com/google/trillian/blob/master/storage/postgres/storage_test.go#L168-L181</a></p><ul><li><strong>後処理には <code>T.Cleanup</code> が便利</strong></li></ul><p>Go1.14 でテスト時に生成したリソースを便利に後処理できる関数が登場しました。<a href="https://golang.org/pkg/testing/#T.Cleanup" target="_blank" rel="noopener">T.Cleanup</a> です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *T)</span> <span class="title">Cleanup</span><span class="params">(f <span class="keyword">func</span>()</span>)</span></span><br></pre></td></tr></table></figure><p>リソースの後処理という意味では <code>defer</code> を用いてクリーンアップできるので、今までとあまり変わらないのでは？と思うかもしれません。<code>T.Cleanup</code> を便利に使えることが実感できるシーンの 1 つとして、テストに必要な前処理をテストとは別の関数で実施している場合があります。</p><p>簡単な例ですが、テストの前準備としてテスト用のファイルを生成する必要があったとして、テスト終了後に削除したい場合、以下のような実装が考えられます。TempFile 関数ではリソースをクローズする処理を呼び出し元に返却する必要があり、呼び出し元で後処理として teardown 関数を呼び出すことになります。</p><figure class="highlight go"><figcaption><span>testutil/file.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TempFile</span><span class="params">(t *testing.T, content []<span class="keyword">byte</span>)</span> <span class="params">(name <span class="keyword">string</span>, teardown <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">file, err := ioutil.TempFile(<span class="string">""</span>, <span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = ioutil.WriteFile(file.Name(), content, <span class="number">0644</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> file.Name(), <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">syscall.Unlink(file.Name())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呼び出し元の処理です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file, <span class="built_in">delete</span> := testutil.TempFile(t, <span class="literal">nil</span> <span class="comment">/* something */</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">delete</span>()</span><br></pre></td></tr></table></figure><p><code>T.Cleanup</code> を用いると前処理を実施する関数内でリソースの後処理が実施できるようになります。TempFile 関数の例であれば、以下のように <code>t.Cleanup</code> を用いることができます。関数から return したタイミングで呼び出される <code>defer</code> とは異なり、テストが完了したタイミングで Cleanup 処理が呼び出されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TempFile</span><span class="params">(t *testing.T, content []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">file, err := ioutil.TempFile(<span class="string">""</span>, <span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line">t.Cleanup(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; syscall.Unlink(file.Name()) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = ioutil.WriteFile(file.Name(), content, <span class="number">0644</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> file.Name()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ファイルでなくても、テスト用のデータベースや HTTP サーバの teardown など、テストに必要なリソースの teardown 処理を同じ関数内に記述することができ、テストコードが簡潔になります。</p><h2 id="カバレッジを取得したい"><a href="#カバレッジを取得したい" class="headerlink" title="カバレッジを取得したい"></a>カバレッジを取得したい</h2><p>標準パッケージのカバレッジを取得してみます。今回は <code>io</code> パッケージ( <code>ioutil</code> も含む)のテストのカバレッジを取得することにします。カバレッジは <code>go test</code> コマンドの引数として <code>-covermode=count</code> を付与すれば取得できます。 <code>-coverprofile=c.out</code> で結果をファイルに保存します。</p><p>Go のコードは <code>/Go/src</code> にあるものとします。以下のコマンドを実行してカバレッジを取得します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> io/... -covermode=count -coverprofile=c.out</span><br><span class="line">ok      io      0.620s  coverage: 95.2% of statements</span><br><span class="line">ok      io/ioutil       0.311s  coverage: 68.9% of statements</span><br></pre></td></tr></table></figure><p>以下のコマンドで上記の出力ファイルを簡単に HTML で可視化できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go tool cover -html=c.out -o coverage.html</span><br></pre></td></tr></table></figure><p>このような感じでどのパスが通っていないか確認できます。</p><img src="/images/20200601/photo_20200601_01.png"><h2 id="あるディレクトリ配下のテストをすべて実施したい"><a href="#あるディレクトリ配下のテストをすべて実施したい" class="headerlink" title="あるディレクトリ配下のテストをすべて実施したい"></a>あるディレクトリ配下のテストをすべて実施したい</h2><p>たとえば標準パッケージの例だと、<code>io</code> パッケージはテスト対象に含めるが、その他のパッケージはテスト対象に含めない…といった要領です。これはテストのコマンドというよりはパッケージのコマンドになります。以下のように <code>...</code> の文字列を用いてワイルドカードとしてテスト対象のファイルを選択できます。詳細は <code>go help packages</code> とすることで確認できます。</p><p>以下の場合は <code>io</code> パッケージに含まれるすべてのテストを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> io/...</span><br></pre></td></tr></table></figure><p>同様に <code>io</code> パッケージに含まれる <code>ioutil</code> パッケージのみテストしたい場合は以下のようになります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v io/ioutil/...</span><br><span class="line">=== RUN   TestReadFile</span><br><span class="line">--- PASS: TestReadFile (0.00s)</span><br><span class="line">=== RUN   TestWriteFile</span><br><span class="line">--- PASS: TestWriteFile (0.00s)</span><br><span class="line">=== RUN   TestReadDir</span><br><span class="line">--- PASS: TestReadDir (0.00s)</span><br><span class="line">=== RUN   TestTempFile</span><br><span class="line">--- PASS: TestTempFile (0.00s)</span><br><span class="line">=== RUN   TestTempFile_pattern</span><br><span class="line">--- PASS: TestTempFile_pattern (0.00s)</span><br><span class="line">=== RUN   TestTempDir</span><br><span class="line">--- PASS: TestTempDir (0.00s)</span><br><span class="line">=== RUN   TestTempDir_BadDir</span><br><span class="line">--- PASS: TestTempDir_BadDir (0.00s)</span><br><span class="line">=== RUN   ExampleReadAll</span><br><span class="line">--- PASS: ExampleReadAll (0.00s)</span><br><span class="line">=== RUN   ExampleReadFile</span><br><span class="line">--- PASS: ExampleReadFile (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      io/ioutil       0.342s</span><br></pre></td></tr></table></figure><h2 id="一部のテストのみ実施したい"><a href="#一部のテストのみ実施したい" class="headerlink" title="一部のテストのみ実施したい"></a>一部のテストのみ実施したい</h2><p>実行対象のテストを抽出するには <code>-run</code> フラグを用いることできます。以下のように正規表現を用いて、一致するテストのみを実行できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-run regexp</span><br></pre></td></tr></table></figure><p>例えば <code>io</code> パッケージで Pipe に関するテストのみ実行したいとしましょう。Pipe に関するテストはテスト関数に <code>Pipe</code> の文字列が含まれるものとします。以下のように実行するとテストの関数名に <code>Pipe</code> が含まれるテストのみ実行されていることが分かります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -v io/... -run Pipe</span><br><span class="line">=== RUN   TestPipe1</span><br><span class="line">--- PASS: TestPipe1 (0.00s)</span><br><span class="line">=== RUN   TestPipe2</span><br><span class="line">--- PASS: TestPipe2 (0.00s)</span><br><span class="line">=== RUN   TestPipe3</span><br><span class="line">--- PASS: TestPipe3 (0.00s)</span><br><span class="line">=== RUN   TestPipeReadClose</span><br><span class="line">--- PASS: TestPipeReadClose (0.01s)</span><br><span class="line">=== RUN   TestPipeReadClose2</span><br><span class="line">--- PASS: TestPipeReadClose2 (0.00s)</span><br><span class="line">=== RUN   TestPipeWriteClose</span><br><span class="line">--- PASS: TestPipeWriteClose (0.01s)</span><br><span class="line">=== RUN   TestPipeWriteClose2</span><br><span class="line">--- PASS: TestPipeWriteClose2 (0.00s)</span><br><span class="line">=== RUN   TestPipeCloseError</span><br><span class="line">--- PASS: TestPipeCloseError (0.00s)</span><br><span class="line">=== RUN   TestPipeConcurrent</span><br><span class="line">=== RUN   TestPipeConcurrent/Write</span><br><span class="line">=== RUN   TestPipeConcurrent/Read</span><br><span class="line">--- PASS: TestPipeConcurrent (0.00s)</span><br><span class="line">    --- PASS: TestPipeConcurrent/Write (0.00s)</span><br><span class="line">    --- PASS: TestPipeConcurrent/Read (0.00s)</span><br><span class="line">=== RUN   ExamplePipe</span><br><span class="line">--- PASS: ExamplePipe (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      io      0.345s</span><br><span class="line">testing: warning: no tests to run</span><br><span class="line">PASS</span><br><span class="line">ok      io/ioutil       0.575s [no tests to run]</span><br></pre></td></tr></table></figure><h2 id="テストのキャッシュを削除したい"><a href="#テストのキャッシュを削除したい" class="headerlink" title="テストのキャッシュを削除したい"></a>テストのキャッシュを削除したい</h2><p>Go でテストをしていると以下のように <code>cached</code> の文字列を見ることがあると思います。テストのキャッシュを削除するにはどのようにすれば良いでしょうか。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> io/... -run Pipe</span><br><span class="line">ok      io      (cached)</span><br><span class="line">ok      io/ioutil       (cached) [no tests to run]</span><br></pre></td></tr></table></figure><p>テストのキャッシュは Go1.10 から組み込まれました。テストのキャッシュの詳細は <a href="https://golang.org/doc/go1.10#test" target="_blank" rel="noopener">go1.10#test</a> が詳しいです。キャッシュ使わない場合はを明示的に <code>-count=1</code> と指定すればよいです。<code>-count=1</code> と明示的に指定するとテストはキャッシュされなくなります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> test io/... -run Pipe -count=<span class="number">1</span></span><br><span class="line">ok      io      <span class="number">0.304</span>s</span><br><span class="line">ok      io/ioutil       <span class="number">0.563</span>s [no tests to run]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> test io/... -run Pipe -count=<span class="number">1</span></span><br><span class="line">ok      io      <span class="number">0.314</span>s</span><br><span class="line">ok      io/ioutil       <span class="number">0.576</span>s [no tests to run]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> test io/... -run Pipe -count=<span class="number">1</span></span><br><span class="line">ok      io      <span class="number">0.321</span>s</span><br><span class="line">ok      io/ioutil       <span class="number">0.575</span>s [no tests to run]</span><br></pre></td></tr></table></figure><p>また <code>go clean -cache</code> を用いてもビルドキャッシュ全体を削除することができ、テストのキャッシュも削除できます。</p><h2 id="テストコードの雛形を楽に作りたい"><a href="#テストコードの雛形を楽に作りたい" class="headerlink" title="テストコードの雛形を楽に作りたい"></a>テストコードの雛形を楽に作りたい</h2><p>Tips ですが IDE などの機能を使うと少し便利になるかもしれません。例えば GoLand の機能を用いるとデフォルトで TableDrivenTest の雛形を生成してくれます。詳細は割愛しますが VS Code を用いて開発する場合でも同様に雛形を生成できます。</p><img src="/images/20200601/photo_20200601_02.gif"><h2 id="構造体、マップやスライスの比較を実施したい"><a href="#構造体、マップやスライスの比較を実施したい" class="headerlink" title="構造体、マップやスライスの比較を実施したい"></a>構造体、マップやスライスの比較を実施したい</h2><p><code>map</code> のキーと値が一致しているかどうか確認するようなテストがしたいとしましょう。<code>map</code> や <code>slice</code> は <a href="https://golang.org/ref/pec#Comparison_operators" target="_blank" rel="noopener">spec#Comparison_operators</a> にもあるように比較演算子を用いて比較することができません。<code>map</code> に含まれるキーと値が同じものを含んでいるかどうかはループを回して確認しないといけないのでしょうか。</p><p><code>reflect</code> パッケージに含まれる <a href="https://golang.org/pkg/reflect/#DeepEqual" target="_blank" rel="noopener"><code>reflect.DeepEqual</code></a> を用いると map のような比較演算子で比較できないオブジェクトの比較ができます。</p><p><code>net/http</code> パッケージにある <code>request_test.go</code> の中でクエリパラメータなどに用いられる <code>map</code> (<code>map[string][]string</code> 型)は以下のように比較して同値かどうかテストしています。</p><figure class="highlight go"><figcaption><span>net/http/request_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wantForm := url.Values&#123;</span><br><span class="line"><span class="string">"language"</span>: []<span class="keyword">string</span>&#123;<span class="string">"Go"</span>&#125;,</span><br><span class="line"><span class="string">"name"</span>:     []<span class="keyword">string</span>&#123;<span class="string">"gopher"</span>&#125;,</span><br><span class="line"><span class="string">"skill"</span>:    []<span class="keyword">string</span>&#123;<span class="string">"go-ing"</span>&#125;,</span><br><span class="line"><span class="string">"field1"</span>:   []<span class="keyword">string</span>&#123;<span class="string">"value1"</span>&#125;,</span><br><span class="line"><span class="string">"field2"</span>:   []<span class="keyword">string</span>&#123;<span class="string">"initial-value2"</span>, <span class="string">"value2"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !reflect.DeepEqual(req.Form, wantForm) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"req.Form = %v, want %v"</span>, req.Form, wantForm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/blob/master/src/net/http/request_test.go#L210-L219" target="_blank" rel="noopener">https://github.com/golang/go/blob/master/src/net/http/request_test.go#L210-L219</a></p><p>Go は言語自体にテスティングフレームワークを提供してません。<a href="https://golang.org/doc/faq#testing_framework" target="_blank" rel="noopener">Where is my favorite helper function for testing?</a> に理由が記載されていますが、端的に言うと開発者が適切にエラーハンドリングすることと適切なエラーメッセージの出力を実装することが重要であるためです。</p><p>とはいえ薄い便利なツールを使いたくなるシチュエーションはあるのではないでしょうか。<code>reflect.DeepEqual</code> を使った同値チェックは <a href="https://github.com/google/go-cmp" target="_blank" rel="noopener">google/go-cmp</a> を使うとより便利にテストができるので、私は <code>reflect.DeepEqual</code> の代わりとして <code>google/go-cmp</code> を用いることが多いです。</p><p><code>go-cmp</code> のリポジトリにある構造体を比較するサンプルの例を見てみます。以下のような <code>net.IP</code> 型や <code>time.Time</code> 型をフィールドに持つ構造体の比較です。</p><figure class="highlight go"><figcaption><span>example_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> (</span><br><span class="line">Gateway <span class="keyword">struct</span> &#123;</span><br><span class="line">SSID      <span class="keyword">string</span></span><br><span class="line">IPAddress net.IP</span><br><span class="line">NetMask   net.IPMask</span><br><span class="line">Clients   []Client</span><br><span class="line">&#125;</span><br><span class="line">Client <span class="keyword">struct</span> &#123;</span><br><span class="line">Hostname  <span class="keyword">string</span></span><br><span class="line">IPAddress net.IP</span><br><span class="line">LastSeen  time.Time</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeGatewayInfo</span><span class="params">()</span> <span class="params">(x, y Gateway)</span></span> &#123;</span><br><span class="line">x = Gateway&#123;</span><br><span class="line">SSID:      <span class="string">"CoffeeShopWiFi"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">NetMask:   net.IPv4Mask(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">Clients: []Client&#123;&#123;</span><br><span class="line">Hostname:  <span class="string">"ristretto"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">116</span>),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"aribica"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">104</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"macchiato"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">153</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">43</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"espresso"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">121</span>),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"latte"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">219</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"americano"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">188</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">y = Gateway&#123;</span><br><span class="line">SSID:      <span class="string">"CoffeeShopWiFi"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">NetMask:   net.IPv4Mask(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">Clients: []Client&#123;&#123;</span><br><span class="line">Hostname:  <span class="string">"ristretto"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">116</span>),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"aribica"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">104</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"macchiato"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">153</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">43</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"espresso"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">121</span>),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">Hostname:  <span class="string">"latte"</span>,</span><br><span class="line">IPAddress: net.IPv4(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">221</span>),</span><br><span class="line">LastSeen:  time.Date(<span class="number">2009</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x, y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この構造体が同値かどうかテストしてみます。上記の実装の通り <code>MakeGatewayInfo</code> は異なる 2 つの変数 <code>x</code> と <code>y</code> を返す関数です。これを <code>go-cmp</code> と <code>reflect.DeepEqual</code> のそれぞれを用いて比較してみます。</p><figure class="highlight go"><figcaption><span>example_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMakeGatewayInfoDeepEqual</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got, want := MakeGatewayInfo()</span><br><span class="line"><span class="keyword">if</span> !reflect.DeepEqual(got, want) &#123;</span><br><span class="line">t.Errorf(<span class="string">"MakeGatewayInfo() got = %v, want %v"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMakeGatewayInfoGoCmp</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got, want := MakeGatewayInfo()</span><br><span class="line"><span class="keyword">if</span> diff := cmp.Diff(want, got); diff != <span class="string">""</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"MakeGatewayInfo() mismatch (-want +got):\n%s"</span>, diff)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると以下のような結果を得ることができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> example_test.go</span><br><span class="line">--- FAIL: TestMakeGatewayInfoDeepEqual (0.00s)</span><br><span class="line">    example_test.go:15: MakeGatewayInfo() got = &#123;CoffeeShopWiFi 192.168.0.1 ffff0000 [&#123;ristretto 192.168.0.116 0001-01-01 00:00:00 +0000 UTC&#125; &#123;aribica 192.168.0.104 2009-11-10 23:06:32 +0000 UTC&#125; &#123;macchiato 192.168.0.153 2009-11-10 23:39:43 +0000 UTC&#125; &#123;espresso 192</span><br><span class="line">.168.0.121 0001-01-01 00:00:00 +0000 UTC&#125; &#123;latte 192.168.0.219 2009-11-10 23:00:23 +0000 UTC&#125; &#123;americano 192.168.0.188 2009-11-10 23:03:05 +0000 UTC&#125;]&#125;, want &#123;CoffeeShopWiFi 192.168.0.2 ffff0000 [&#123;ristretto 192.168.0.116 0001-01-01 00:00:00 +0000 UTC&#125; &#123;aribica 192.</span><br><span class="line">168.0.104 2009-11-10 23:06:32 +0000 UTC&#125; &#123;macchiato 192.168.0.153 2009-11-10 23:39:43 +0000 UTC&#125; &#123;espresso 192.168.0.121 0001-01-01 00:00:00 +0000 UTC&#125; &#123;latte 192.168.0.221 2009-11-10 23:00:23 +0000 UTC&#125;]&#125;</span><br><span class="line">--- FAIL: TestMakeGatewayInfoGoCmp (0.00s)</span><br><span class="line">    example_test.go:22: MakeGatewayInfo() mismatch (-want +got):</span><br><span class="line">        &#123;t.Gateway&#125;.IPAddress:</span><br><span class="line">                -: s<span class="string">"192.168.0.2"</span></span><br><span class="line">                +: s<span class="string">"192.168.0.1"</span></span><br><span class="line">        &#123;t.Gateway&#125;.Clients[4].IPAddress:</span><br><span class="line">                -: s<span class="string">"192.168.0.221"</span></span><br><span class="line">                +: s<span class="string">"192.168.0.219"</span></span><br><span class="line">        &#123;t.Gateway&#125;.Clients[?-&gt;5]:</span><br><span class="line">                -: &lt;non-existent&gt;</span><br><span class="line">                +: t.Client&#123;Hostname: <span class="string">"americano"</span>, IPAddress: s<span class="string">"192.168.0.188"</span>, LastSeen: s<span class="string">"2009-11-10 23:03:05 +0000 UTC"</span>&#125;</span><br><span class="line">FAIL</span><br><span class="line">FAIL    <span class="built_in">command</span>-line-arguments  0.304s</span><br><span class="line">FAIL</span><br></pre></td></tr></table></figure><p><code>go-cmp</code> の結果は何が同値で、何が同値でなかったか、同値でなかったときは取得した値と想定する値は何か明示的にわかるのがよいです。他にもオプションで条件をカスタマイズできます。(やりすぎ注意)</p><p>社内でも <a href="https://github.com/stretchr/testify/tree/master/assert" target="_blank" rel="noopener"><code>stretchr/testify/assert</code></a> を使う勢なども見かけます。Go のテスティングフレームに関する話は好みが分かれるところだと思うので、深くは触れません。</p><h2 id="APIサーバにアクセスするテストをしたい"><a href="#APIサーバにアクセスするテストをしたい" class="headerlink" title="APIサーバにアクセスするテストをしたい"></a>APIサーバにアクセスするテストをしたい</h2><p><code>net/http/httptest</code> を用いると簡単にテスト用のモックサーバをたてることができます。リクエストに対して <code>Hello, client</code> というレスポンスを返却する API を用いた、API クライアントの視点で単体テストを実施する例を考えてみます。</p><p><code>httptest.NewServer</code> にハンドラを渡すことでハンドラの振る舞いをするローカルの HTTP サーバを提供してくれます。デフォルトだとこのテスト用の HTTP サーバは <code>127.0.0.1:0</code> で起動します。ポートが <code>0</code> にバインドされていますが、これは空いている任意ポートを割り当てます。なお、ブラウザからデバッグしたいなどの用途として <code>httptest.serve</code> フラグを渡すこともできます。<code>-httptest.serve=127.0.0.1:18888</code> などとしてフラグを指定した場合、HTTP サーバはブロックされます。</p><figure class="highlight go"><figcaption><span>x_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestX</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ts := httptest.NewServer(http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"Hello, client"</span>)</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">defer</span> ts.Close()</span><br><span class="line"></span><br><span class="line">res, err := http.Get(ts.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">got, err := ioutil.ReadAll(res.Body)</span><br><span class="line">res.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// API からのレスポンスを用いてなんならの処理をする</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"GET %s: expected status code = %d; got %d"</span>, ts.URL, <span class="number">200</span>, res.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(got) != <span class="string">"Hello, client\n"</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"expected body %v; got %v"</span>, <span class="string">"Hello, client"</span>, <span class="keyword">string</span>(got))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/i1Dz5alS4hQ" target="_blank" rel="noopener">https://play.golang.org/p/i1Dz5alS4hQ</a></p><p>実際にはテストで用いる構造体のフィールドに URL を保持できるようにして <code>httptest</code> で起動させたモックサーバの URL に切り替えるなどことが多いのではないか、と思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span> <span class="params">(client *Client, mux *http.ServeMux, serverURL <span class="keyword">string</span>, teardown <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">mux = http.NewServeMux()</span><br><span class="line"></span><br><span class="line">apiHandler := http.NewServeMux()</span><br><span class="line">apiHandler.Handle(baseURLPath+<span class="string">"/"</span>, http.StripPrefix(baseURLPath, mux))</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">server := httptest.NewServer(apiHandler)</span><br><span class="line"></span><br><span class="line">client = NewClient(<span class="literal">nil</span>)</span><br><span class="line">url, _ := url.Parse(server.URL + baseURLPath + <span class="string">"/"</span>)</span><br><span class="line">client.BaseURL = url</span><br><span class="line">client.UploadURL = url</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> client, mux, server.URL, server.Close</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/google/go-github/blob/master/github/github_test.go#L31-L64" target="_blank" rel="noopener">https://github.com/google/go-github/blob/master/github/github_test.go#L31-L64</a></p><h2 id="APIサーバのハンドラのテストをしたい"><a href="#APIサーバのハンドラのテストをしたい" class="headerlink" title="APIサーバのハンドラのテストをしたい"></a>APIサーバのハンドラのテストをしたい</h2><p>上記の「APIサーバにアクセスするテストをしたい」の項目では <code>httptest.NewServer</code> でモックサーバを立てて、API クライアントという視点でリクエストを発行してテストをしました。今度は API サーバを提供する視点から、ハンドラの単体テストを実施する場合を考えてみます。<a href="https://golang.org/pkg/net/http/httptest/#NewRequest" target="_blank" rel="noopener"><code>httptest.NewRequest</code></a> を用いると、ハンドラの単体テストを簡潔に実施できます。以下のようなハンドラを考えてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"hello world!"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このハンドラに対して GET リクエストしたときに <code>hello world!</code> というレスポンスが得られるかどうかテストします。<code>httptest.NewRequest</code> はテストのためのリクエストを生成するのに便利です。<code>httptest.NewRequest</code> で生成した <code>*http.Request</code> をハンドラに渡すことができます。また <code>httptest.NewRecorder()</code> で生成できる <code>*httptest.ResponseRecorder</code> を用いるとハンドラのレスポンスを記録できます。</p><p>これらを用いて、以下のようにハンドラから想定のレスポンスが得られるかどうかテストできます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloHandler</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">r := httptest.NewRequest(<span class="string">"GET"</span>, <span class="string">"/dummy"</span>, <span class="literal">nil</span>)</span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">helloHandler(w, r)</span><br><span class="line"></span><br><span class="line">resp := w.Result()</span><br><span class="line"></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"cannot read test response: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"got = %d, want = 200"</span>, resp.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(body) != <span class="string">"hello world!"</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"got = %s, want = hello world!"</span>, body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go test -v</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestHelloHandler</span><br><span class="line">--- PASS: TestHelloHandler (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      github.com&#x2F;d-tsuji&#x2F;go-sandbox&#x2F;x 0.186s</span><br></pre></td></tr></table></figure><p><code>httptest.NewRequest()</code> や <code>httptest.NewRecorder()</code> を用いることで、<a href="https://echo.labstack.com/" target="_blank" rel="noopener">Echo</a> や <a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a> といった Web フレームワークを用いて構築しているハンドラも同様にテストできます。</p><p>ちなみにリクエストは <a href="https://golang.org/pkg/net/http/#NewRequestWithContext" target="_blank" rel="noopener"><code>http.NewRequestWithContext</code></a> (<a href="https://golang.org/pkg/net/http/#NewRequest" target="_blank" rel="noopener"><code>http.NewRequest</code></a>) でも生成できるのは？と思うかもしれません。何が異なるかというと、<code>httptest.NewRequest</code> は <code>http.Handler</code> に適しているリクエストを返却します。一方で <code>http.NewRequestWithContext</code> (<code>http.NewRequest</code>) は <code>Client.Do</code> や <code>Transport.RoundTrip</code> に適しているリクエストを返却します。そのため、単体テストの用途で直接ハンドラにリクエストを渡す場合は <code>httptest.NewRequest</code> を用いることになります。</p><h2 id="データ競合をテストで検知したい"><a href="#データ競合をテストで検知したい" class="headerlink" title="データ競合をテストで検知したい"></a>データ競合をテストで検知したい</h2><p>テストでレースコンディションを検知したい場合はどうすればよいでしょうか。レースコンディションが起きていないかどうか確認するのに <code>-race</code> フラグが役に立ちます。</p><p>公式の <a href="https://blog.golang.org/race-detector" target="_blank" rel="noopener">The Go Blog</a> の例を引用します。</p><figure class="highlight go"><figcaption><span>race_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFoo</span><span class="params">(te *testing.T)</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="keyword">var</span> t *time.Timer</span><br><span class="line">t = time.AfterFunc(randomDuration(), <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(time.Now().Sub(start))</span><br><span class="line">t.Reset(randomDuration())</span><br><span class="line">&#125;)</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomDuration</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Duration(rand.Int63n(<span class="number">1e9</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の実装は異なるゴルーチンから変数 <code>t</code> の読み書きをしていて、レースコンディションを引き起こします。これは <code>-race</code> をつけることで確認できます。<code>-race</code> は <code>go test</code> 以外にも以下のように使うことができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -race mypkg    // <span class="built_in">test</span> the package</span><br><span class="line">$ go run -race mysrc.go  // compile and run the program</span><br><span class="line">$ go build -race mycmd   // build the <span class="built_in">command</span></span><br><span class="line">$ go install -race mypkg // install the package</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&gt; go <span class="built_in">test</span> -v -race race_test.go</span><br><span class="line">=== RUN   TestFoo</span><br><span class="line">947.9969ms</span><br><span class="line">==================</span><br><span class="line">WARNING: DATA RACE</span><br><span class="line">Read at 0x00c00009a030 by goroutine 9:</span><br><span class="line">  <span class="built_in">command</span>-line-arguments.TestFoo.func1()</span><br><span class="line">      C:/Users/d-tsuji/go/src/github.com/d-tsuji/go-sandbox/race_test.go:15 +0x128</span><br><span class="line"></span><br><span class="line">Previous write at 0x00c00009a030 by goroutine 8:</span><br><span class="line">  <span class="built_in">command</span>-line-arguments.TestFoo()</span><br><span class="line">      C:/Users/d-tsuji/go/src/github.com/d-tsuji/go-sandbox/race_test.go:13 +0x194</span><br><span class="line">  testing.tRunner()</span><br><span class="line">      C:/Go/src/testing/testing.go:909 +0x1a0</span><br><span class="line"></span><br><span class="line">Goroutine 9 (running) created at:</span><br><span class="line">  time.goFunc()</span><br><span class="line">      C:/Go/src/time/sleep.go:168 +0x58</span><br><span class="line"></span><br><span class="line">Goroutine 8 (running) created at:</span><br><span class="line">  testing.(*T).Run()</span><br><span class="line">      C:/Go/src/testing/testing.go:960 +0x658</span><br><span class="line">  testing.runTests.func1()</span><br><span class="line">      C:/Go/src/testing/testing.go:1202 +0xad</span><br><span class="line">  testing.tRunner()</span><br><span class="line">      C:/Go/src/testing/testing.go:909 +0x1a0</span><br><span class="line">  testing.runTests()</span><br><span class="line">      C:/Go/src/testing/testing.go:1200 +0x528</span><br><span class="line">  testing.(*M).Run()</span><br><span class="line">      C:/Go/src/testing/testing.go:1117 +0x306</span><br><span class="line">  main.main()</span><br><span class="line">      _testmain.go:44 +0x22a</span><br><span class="line">==================</span><br><span class="line">1.0319969s</span><br><span class="line">1.6985715s</span><br><span class="line">1.9336667s</span><br><span class="line">2.22163s</span><br><span class="line">2.7717493s</span><br><span class="line">3.4048429s</span><br><span class="line">3.7370048s</span><br><span class="line">3.9208427s</span><br><span class="line">4.4012115s</span><br><span class="line">--- FAIL: TestFoo (5.00s)</span><br><span class="line">    testing.go:853: race detected during execution of <span class="built_in">test</span></span><br><span class="line">FAIL</span><br><span class="line">FAIL    <span class="built_in">command</span>-line-arguments  5.122s</span><br><span class="line">FAIL</span><br></pre></td></tr></table></figure><p>上記のようにレースコンディションが発生している場合は、テストが FAIL になります。</p><p><code>-race</code> をつけてテストすると多少実行に時間がかかりますが、想定しないレースコンディションが発生して、テストが FAIL になるとデバッグが大変です。テストの際にデフォルトで <code>-race</code> をつけておくのも一つの方法です。</p><h2 id="テストデータを置いておきたい"><a href="#テストデータを置いておきたい" class="headerlink" title="テストデータを置いておきたい"></a>テストデータを置いておきたい</h2><p>テストの Input や Output になるファイルを <code>testdata</code> という名前のディレクトリに置いておくことができます。<code>testdata</code> ディレクトリに含まれるファイルはテストのときのみ用いられます。標準パッケージの中でたくさん用いられていますが、<code>image</code> パッケージの例を上げると <a href="https://github.com/golang/go/tree/master/src/image/testdata" target="_blank" rel="noopener">https://github.com/golang/go/tree/master/src/image/testdata</a> といったものです。</p><h2 id="テストにヘルパー関数を使いたい"><a href="#テストにヘルパー関数を使いたい" class="headerlink" title="テストにヘルパー関数を使いたい"></a>テストにヘルパー関数を使いたい</h2><p>複数のテストで用いるような共通の関数をヘルパー関数として実装する場合があると思います。テスト用のヘルパー関数の特徴は以下です。</p><ul><li>ヘルパー関数はエラーを返さない</li><li><code>*testing.T</code> を受け取ってテストを落とす</li><li>Go 1.9 からは <code>T.Helper</code> を使って情報を補足する<ul><li><a href="https://tip.golang.org/pkg/testing/#T.Helper" target="_blank" rel="noopener">https://tip.golang.org/pkg/testing/#T.Helper</a></li></ul></li></ul><p><a href="https://www.slideshare.net/takuyaueda967/go-friday" target="_blank" rel="noopener">Go Friday 傑作選</a> より引用</p><p>テスト用のヘルパー関数は以下のように実装されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mustUrlParse</span><span class="params">(t *testing.T, s <span class="keyword">string</span>)</span> *<span class="title">url</span>.<span class="title">URL</span></span> &#123;</span><br><span class="line">t.Helper()</span><br><span class="line">u, err := url.Parse(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ヘルパー関数に <code>t.Helper()</code> を付与すると何が嬉しいのでしょうか。上記のヘルパー関数 <code>mustUrlParse</code> を用いたテストを実施してみて確認してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestX</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">str <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">args args</span><br><span class="line">want <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="string">"normal1"</span>, args&#123;<span class="string">"http://example.com/"</span>&#125;, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="string">"normal2"</span>, args&#123;<span class="string">"%zzzzz"</span> <span class="comment">/* error occured */</span>&#125;, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">url := mustUrlParse(t, tt.args.str)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 何らかの処理をしてテストする</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ヘルパー関数から <code>t.Helper()</code> を除いた場合</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestX</span><br><span class="line">=== RUN   TestX/normal1</span><br><span class="line">=== RUN   TestX/normal2</span><br><span class="line">--- FAIL: TestX (0.00s)</span><br><span class="line">    --- PASS: TestX/normal1 (0.00s)</span><br><span class="line">    --- FAIL: TestX/normal2 (0.00s)</span><br><span class="line">        x_test.go:44: parse %zzzzz: invalid URL escape <span class="string">"%zz"</span></span><br><span class="line">FAIL</span><br><span class="line"><span class="built_in">exit</span> status 1</span><br><span class="line">FAIL    github.com/d-tsuji/go-sandbox/x 0.299s</span><br></pre></td></tr></table></figure><ul><li>ヘルパー関数に <code>t.Helper()</code> がある場合</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestX</span><br><span class="line">=== RUN   TestX/normal1</span><br><span class="line">=== RUN   TestX/normal2</span><br><span class="line">--- FAIL: TestX (0.00s)</span><br><span class="line">    --- PASS: TestX/normal1 (0.00s)</span><br><span class="line">    --- FAIL: TestX/normal2 (0.00s)</span><br><span class="line">        x_test.go:34: parse %zzzzz: invalid URL escape <span class="string">"%zz"</span></span><br><span class="line">FAIL</span><br><span class="line"><span class="built_in">exit</span> status 1</span><br><span class="line">FAIL    github.com/d-tsuji/go-sandbox/x 0.296s</span><br></pre></td></tr></table></figure><p>上記の 2 通りの結果を比較すると FAIL になった行が何行目を指しているのか、が変わっています。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// t.Helper() がない場合</span><br><span class="line">x_test.go:44: parse %zzzzz: invalid URL escape "%zz"</span><br><span class="line"></span><br><span class="line">// t.Helper() がある場合</span><br><span class="line">x_test.go:34: parse %zzzzz: invalid URL escape "%zz"</span><br></pre></td></tr></table></figure><p><code>t.Helper()</code> を付けた場合は <code>t.Run()</code> 内の <code>_ = mustUrlParse(t, tt.args.str)</code> の行を指しています。付けなかった場合はヘルパー関数でエラーになった <code>t.Fatal(err)</code> の行を指しています。<code>t.Helper()</code> を付けた場合のほうが、テストケース内のどの行で失敗したか分かりやすくなり、エラーの原因を探りやすくなるのではないでしょうか。</p><h2 id="ブラックボックステストをしたい"><a href="#ブラックボックステストをしたい" class="headerlink" title="ブラックボックステストをしたい"></a>ブラックボックステストをしたい</h2><p>あるパッケージ <code>mypkg</code> があって以下のようなファイル構成になっているとします。ブラックボックステストなどを実施するときにパッケージ名を分けたい、などのニーズがあるかもしれません(そんなに多くは無いと思いますが)。Go ではディレクトリ名とパッケージ名は同じである必要があるため、異なるパッケージ名のファイルを作ることはできません。しかし例外的に <code>mypkg_test</code> という、<code>mypkg</code> に <code>_test</code> を付与したパッケージ名は用いることができます。<a href="https://tip.golang.org/cmd/go/#hdr-Test_packages" target="_blank" rel="noopener">Test packages</a> にもあるように Go では <code>_test</code> の接尾語をもつパッケージ名は別のパッケージとして扱われます。パッケージ名を <code>mypkg</code> と <code>mypkg_test</code> とで分けることでテスト実施時に <code>mypkg</code> の非公開の関数を呼び出すことはできなくなります。似たような議論を <a href="https://stackoverflow.com/questions/19998250/proper-package-naming-for-testing-with-the-go-language" target="_blank" rel="noopener">Proper package naming for testing with the Go language</a> で見ることができます。</p><p>具体的には以下のようなファイル構成になっていて <code>x.go</code> と <code>x_test.go</code> で別のパッケージ名とできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mypkg</span><br><span class="line">|--x.go</span><br><span class="line">|--x_test.go</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>x.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypkg</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>x_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mypkg ディレクトリにあるテストファイルでも _test を付けたパッケージ名を混在できる</span></span><br><span class="line"><span class="keyword">package</span> mypkg_test</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="用途-単体-インテグレーションなど-によってテストを切り替えたい"><a href="#用途-単体-インテグレーションなど-によってテストを切り替えたい" class="headerlink" title="用途(単体/インテグレーションなど)によってテストを切り替えたい"></a>用途(単体/インテグレーションなど)によってテストを切り替えたい</h2><p>テストは単体テストの他、インテグレーションテストなど用途によっていくつか存在します。用途によって実行するテストを分けるにはどのようにすれば良いでしょうか。<a href="https://golang.org/pkg/go/build/#hdr-Build_Constraints" target="_blank" rel="noopener">ビルドタグ</a> を用いる方法やディレクトリを分ける方法があります。</p><ul><li>ビルドタグを用いる方法</li></ul><p>以下のようにビルドタグ <code>// +build integration</code> を付与します。このようにすると <code>go test -tags=integration</code> とタグを付けたときのみテストが実行されるようになります。タグがない場合はテスト対象に含まれません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build integration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestX</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connecting server and some processing and so on...</span></span><br><span class="line"></span><br><span class="line">t.Log(<span class="string">"run integration test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OSS から具体例をあげると以下のようなものです。以下の例はテストのパッケージ名に <code>_test</code> をつけることでテストであることを明示的に分けています。テストで用いる関数は、テスト内でインポートしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2019 Google Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment">// This file is available under the Apache license.</span></span><br><span class="line"><span class="comment">// +build integration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> mtail_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/google/mtail/internal/mtail"</span></span><br><span class="line"><span class="string">"github.com/google/mtail/internal/testutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNewProg</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tmpDir, rmTmpDir := testutil.TestTempDir(t)</span><br><span class="line"><span class="keyword">defer</span> rmTmpDir()</span><br><span class="line"></span><br><span class="line">logDir := path.Join(tmpDir, <span class="string">"logs"</span>)</span><br><span class="line">progDir := path.Join(tmpDir, <span class="string">"progs"</span>)</span><br><span class="line">err := os.Mkdir(logDir, <span class="number">0700</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">err = os.Mkdir(progDir, <span class="number">0700</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m, stopM := mtail.TestStartServer(t, <span class="number">0</span>, <span class="literal">false</span>, mtail.ProgramPath(progDir), mtail.LogPathPatterns(logDir+<span class="string">"/*"</span>))</span><br><span class="line"><span class="keyword">defer</span> stopM()</span><br><span class="line"></span><br><span class="line">startProgLoadsTotal := mtail.TestGetMetric(t, m.Addr(), <span class="string">"prog_loads_total"</span>).(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">testutil.TestOpenFile(t, progDir+<span class="string">"/nocode.mtail"</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"></span><br><span class="line">progLoadsTotal := mtail.TestGetMetric(t, m.Addr(), <span class="string">"prog_loads_total"</span>).(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">mtail.ExpectMetricDelta(t, progLoadsTotal[<span class="string">"nocode.mtail"</span>], startProgLoadsTotal[<span class="string">"nocode.mtail"</span>], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/google/mtail/blob/master/internal/mtail/new_prog_integration_test.go#L1-L44" target="_blank" rel="noopener">https://github.com/google/mtail/blob/master/internal/mtail/new_prog_integration_test.go#L1-L44</a></p><ul><li>ディレクトリを分ける</li></ul><p>シンプルながら、インテグレーションテストは <code>integration</code> などのディレクトリに対象のテストケースを含めることが多いのではないでしょうか。その <code>integration</code> パッケージと <code>// +build integration</code> のビルドタグを組み合わせる方法も考えられます。OSS だと以下のようなイメージです。</p><ul><li>google/go-github<ul><li><a href="https://github.com/google/go-github/blob/master/test/integration" target="_blank" rel="noopener">/test/integration</a></li></ul></li></ul><h2 id="モックを使ってテストをしたい"><a href="#モックを使ってテストをしたい" class="headerlink" title="モックを使ってテストをしたい"></a>モックを使ってテストをしたい</h2><p>外部サービスに依存する実装のテストをするときに、外部サービスをモックしたい場合があります。特に外部の API を実行した結果に依存する場合、API のレートリミットやテストの結果が外部 API の仕様変更などに引きづられ、テスト結果が不安定になります。どのようにすればモック化できるでしょうか。方法はいくつかありますが、基本的な考えはインターフェースを満たす実装を、本物の実装とモックで切り替えていくことになります。</p><p>データベースアクセスする処理をモックする簡単な疑似コードを見てみます。データベースからユーザの検索と作成をします。インターフェースのメソッドは以下のようにあるとします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DataStore <span class="keyword">interface</span> &#123;</span><br><span class="line">FindUser(ctx context.Context, id <span class="keyword">int</span>) (*User, error)</span><br><span class="line">CreateUser(ctx context.Context, name <span class="keyword">string</span>) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">id   <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常の実装は以下のような感じを想定します。ポイントは DataStore のインターフェースをファクトリ関数である <code>NewDataStore</code> で返すところです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserDataStore <span class="keyword">struct</span> &#123;</span><br><span class="line">*sql.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DataStore のインターフェースを返すのがポイント</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDataStore</span><span class="params">(db *sql.DB)</span> <span class="title">DataStore</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;UserDataStore&#123;db&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserDataStore)</span> <span class="title">FindUser</span><span class="params">(ctx context.Context, id <span class="keyword">int</span>)</span> <span class="params">(*User, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> user *User</span><br><span class="line">row := u.QueryRowContext(context.Background(), <span class="string">`SELECT * FROM user WHERE userId = ?`</span>, id)</span><br><span class="line"><span class="keyword">if</span> err := row.Scan(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> user, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserDataStore)</span> <span class="title">CreateUser</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あるテストをする際に、このデータベースに依存する実装をモックする例は以下のようになります。インターフェースを満たす、モックオブジェクトに想定の結果が取得できるメソッドを実施します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MockUserDataStore <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMockDataStore</span><span class="params">()</span> <span class="title">DataStore</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;MockUserDataStore&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MockUserDataStore)</span> <span class="title">FindUser</span><span class="params">(ctx context.Context, id <span class="keyword">int</span>)</span> <span class="params">(*User, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;User&#123;</span><br><span class="line">id:   <span class="number">1</span>,</span><br><span class="line">name: <span class="string">"test user"</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MockUserDataStore)</span> <span class="title">CreateUser</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"create user. dummy"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このモックしたオブジェクトをテストで用いる場合は以下のようになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestXXX</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">storage := NewMockDataStore()</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">user, err = storage.FindUser(context.TODO(), <span class="number">1</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようにして外部依存する処理をモックできます。モックの struct やメソッドの実装が手間なので <a href="https://github.com/golang/mock" target="_blank" rel="noopener"><code>gomock</code></a> を使うこともあるかもしれません(<code>gomock</code> に関して詳細は説明を割愛します)。</p><p>インターフェースを用いたテストに関しては <a href="https://deeeet.com/writing/2016/10/25/go-interface-testing/" target="_blank" rel="noopener">Golangにおけるinterfaceをつかったテスト技法</a> が詳しいです。またインターフェースの埋め込みを用いたモックに関しては <a href="http://haya14busa.com/golang-how-to-write-mock-of-interface-for-testing/" target="_blank" rel="noopener">Golangにおけるinterfaceをつかったテストで Mock を書く技法</a> が詳しいです。</p><p>余談ですが、テストがモックに依存しすぎるとなんのためのテストをしているか分からなくなったり、リファクタリングのときに辛かったりするので、モックを使ったテストは用法用量に注意です。</p><h2 id="ゴルーチンリークを検出したい"><a href="#ゴルーチンリークを検出したい" class="headerlink" title="ゴルーチンリークを検出したい"></a>ゴルーチンリークを検出したい</h2><p>ゴルーチンがリークするような実装になっていることをテスト時に確認したいかもしれません。公式のツールチェーンには含まれていませんが、<a href="https://github.com/uber-go/goleak" target="_blank" rel="noopener"><code>goleak</code></a> はゴルーチンリークの検出に役に立ちます。このツールを用いるとテスト時にゴルーチンがリークしている場合にテストが FAIL になります。</p><p>簡単な例で確認してみます。</p><figure class="highlight go"><figcaption><span>leak.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">X</span><span class="params">(send <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// チャネルになんらかの値が書き込まれない or チャネルがクローズされない限り</span></span><br><span class="line"><span class="comment">// ブロックされて、ゴルーチンリークになる</span></span><br><span class="line"><span class="keyword">case</span> &lt;-send:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>leak_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDoLeak</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">closedchan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="built_in">close</span>(closedchan)</span><br><span class="line"></span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">ch   <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"not leak"</span>,</span><br><span class="line"><span class="comment">// クローズされているチャネルを渡す</span></span><br><span class="line">ch:   closedchan,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"leak"</span>,</span><br><span class="line">ch:   <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> goleak.VerifyNone(t)</span><br><span class="line">X(tt.ch)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果は以下のようになります。想定通り <code>leak</code> のテストが FAIL になっていることが分かります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; go <span class="built_in">test</span> -v</span><br><span class="line">=== RUN   TestDoLeak</span><br><span class="line">=== RUN   TestDoLeak/not_leak</span><br><span class="line">=== RUN   TestDoLeak/leak</span><br><span class="line">--- FAIL: TestDoLeak (0.46s)</span><br><span class="line">    --- PASS: TestDoLeak/not_leak (0.00s)</span><br><span class="line">    --- FAIL: TestDoLeak/leak (0.46s)</span><br><span class="line">        leaks.go:78: found unexpected goroutines:</span><br><span class="line">            [Goroutine 11 <span class="keyword">in</span> state chan receive, with github.com/d-tsuji/go-sandbox/t.X.func1 on top of the stack:</span><br><span class="line">            goroutine 11 [chan receive]:</span><br><span class="line">            github.com/d-tsuji/go-sandbox/t.X.func1(0xc000010360)</span><br><span class="line">                C:/Users/d-tsuji/go/src/github.com/d-tsuji/go-sandbox/t/leak.go:13 +0x40</span><br><span class="line">            created by github.com/d-tsuji/go-sandbox/t.X</span><br><span class="line">                C:/Users/d-tsuji/go/src/github.com/d-tsuji/go-sandbox/t/leak.go:10 +0x46</span><br><span class="line">            ]</span><br><span class="line">FAIL</span><br><span class="line"><span class="built_in">exit</span> status 1</span><br><span class="line">FAIL    github.com/d-tsuji/go-sandbox/t 0.761s</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/wWGWe8_S0WN" target="_blank" rel="noopener">https://play.golang.org/p/wWGWe8_S0WN</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>テストに関する Go の基本的な機能のまとめてみました。なるべく使い方のイメージがわかるように具体的な例を多く載せました。参考にした素晴らしいドキュメントの URL は以下に記載しています。合わせてみてみてください。</p><h1 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h1><ul><li><a href="https://blog.golang.org/race-detector" target="_blank" rel="noopener">https://blog.golang.org/race-detector</a></li><li><a href="https://github.com/golang/go/wiki/LearnTesting" target="_blank" rel="noopener">https://github.com/golang/go/wiki/LearnTesting</a></li><li><a href="https://golang.org/cmd/cover/" target="_blank" rel="noopener">https://golang.org/cmd/cover/</a></li><li><a href="https://golang.org/doc/articles/race_detector.html" target="_blank" rel="noopener">https://golang.org/doc/articles/race_detector.html</a></li><li><a href="https://golang.org/pkg/cmd/go/internal/test/" target="_blank" rel="noopener">https://golang.org/pkg/cmd/go/internal/test/</a></li><li><a href="https://golang.org/pkg/testing" target="_blank" rel="noopener">https://golang.org/pkg/testing</a></li><li><a href="https://talks.godoc.org/github.com/tcnksm/talks/2016/12/golang-tokyo/golang-tokyo.slide" target="_blank" rel="noopener">https://talks.godoc.org/github.com/tcnksm/talks/2016/12/golang-tokyo/golang-tokyo.slide</a></li><li><a href="https://talks.golang.org/2014/testing.slide" target="_blank" rel="noopener">https://talks.golang.org/2014/testing.slide</a></li></ul><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="/tags/GoCDK/">GoCDK</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG の辻です。&lt;a href=&quot;/articles/20200529/&quot;&gt;今回は春の入門祭り&lt;/a&gt;ということで Go 
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="テスト" scheme="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/"/>
    
  </entry>
  
</feed>
