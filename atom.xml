<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-02-03T00:38:01.759Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WEB+DB PRESS Vol.120 最新Vue.js3入門を読んで</title>
    <link href="https://future-architect.github.io/articles/20210203/"/>
    <id>https://future-architect.github.io/articles/20210203/</id>
    <published>2021-02-02T15:00:00.000Z</published>
    <updated>2021-02-03T00:38:01.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Technology Innovation Group所属の久保です。</p><p>私はフロントエンドエンジニアとして約1年くらいVue2でのフロントエンド開発を行っています。そんなVue3を全く触ったことにのないエンジニアが読んだ｢WEB+DB PRESS Vol.120｣に掲載されている｢最新Vue.js3入門｣の記事感想文となります｡  </p><p>とても面白く良い雑誌なので是非定期購入をおすすめします｡</p><img src="/images/20210203/TH320_9784297118112.jpg" class="img-small-size"><ul><li><a href="https://gihyo.jp/magazine/wdpress/archive/2021/vol120" target="_blank" rel="noopener">https://gihyo.jp/magazine/wdpress/archive/2021/vol120</a></li></ul><h1 id="執筆陣"><a href="#執筆陣" class="headerlink" title="執筆陣"></a>執筆陣</h1><p>執筆陣に当社の太田がいたのが縁で、折角なので感想をブログで書こうとなった背景です。</p><ul><li>石井輝亜    グローバル・ブレイン(株)</li><li>太田洋介    フューチャー(株)</li></ul><h1 id="本記事のターゲット層"><a href="#本記事のターゲット層" class="headerlink" title="本記事のターゲット層"></a>本記事のターゲット層</h1><p>｢最新Vue.js3入門｣と謳っている通りVueの知識0でも読める記事となっています｡</p><p>もちろんVue2､Vue3の知識があっても楽しめる記事だと思います｡</p><h1 id="本書の目次"><a href="#本書の目次" class="headerlink" title="本書の目次"></a>本書の目次</h1><p>本書では5つの章で構成されており約30ページながらVueの歴史からVue2､Vue3でのTodoアプリケーション製作など､かなり濃厚な内容となっています｡</p><p>章立ては以下の通りです｡</p><p>1.Vue.js入門… 歴史､特徴､開発環境の構築<br>2.Vue.jsの基本的な使い方…Todoリストアプリケーションを作って学ぶ<br>3.Vue.コンポーネントの基本的な使い方…簡単な記述で使用できる部品を作る<br>4.Vue.js 3 の新機能…新しいコンポーネントの書き方､柔軟なテンプレート､Vue2からの移行<br>5.Vue.jsの公式プラグイン…ルーティング､ステート管理､リンタ､テスト､デバッグ</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><h2 id="1章"><a href="#1章" class="headerlink" title="1章"></a>1章</h2><ul><li>Vueの歴史</li><li>Vueの特徴  <ul><li>HTMLベースでの制御について  </li><li>コンポーネントによる構成  </li></ul></li><li>環境構築<ul><li>VScode</li><li>Vite</li></ul></li></ul><h2 id="2章"><a href="#2章" class="headerlink" title="2章"></a>2章</h2><ul><li>ToDoリスト実装<ul><li>要件定義</li></ul></li><li>リスト表示部の実装<ul><li>単一項目の表示</li><li>複数項目の表示</li></ul></li><li>入力フォームとボタンの実装<ul><li>入力フォーム実装</li><li>ボタン実装</li><li>入力フォームとボタンの連動</li></ul></li><li>操作機能の実装<ul><li>ステータス毎の表示切り替え</li><li>フィルタ機能実装</li></ul></li><li>装飾<ul><li>styleブロックの書き方</li><li>クラスのバインディング方法</li></ul></li></ul><h2 id="3章"><a href="#3章" class="headerlink" title="3章"></a>3章</h2><ul><li>コンポーネント<ul><li>2章で実装したアプリケーションのコンポーネント化</li><li>コンポーネントの登録方法</li></ul></li><li>コンポーネントを使用するための定義<ul><li>props/emit</li><li>slot</li><li>provide/inject</li></ul></li><li>スコープ付きCSS</li><li>transition を使用したアニメーション<ul><li>transition コンポーネント</li><li>transition-group コンポーネント</li></ul></li></ul><h2 id="4章"><a href="#4章" class="headerlink" title="4章"></a>4章</h2><ul><li>Composition API<ul><li>Options API(Vue2)</li><li>Reactivity API(Vue3)</li><li>Reactivity APIの基本的な使い方</li><li>Reactivity APIを使用した開発の特徴</li><li>使用可能なライブラリの紹介</li></ul></li><li>teleport コンポーネント<ul><li>基本的な使い方</li></ul></li><li>Fragments<ul><li>基本的な使い方</li></ul></li><li>emits オプション<ul><li>基本的な使い方</li></ul></li><li>Vue 2からVue 3へのマイグレーション<ul><li>移行対象の機能</li><li>マイグレーションツールの紹介</li></ul></li></ul><h2 id="5章"><a href="#5章" class="headerlink" title="5章"></a>5章</h2><ul><li>Vue Router<ul><li>インストール</li><li>URLに対応するコンポーネント設定</li><li>Vue Routerの有効化</li><li>ページ遷移</li></ul></li><li>Vuex<ul><li>インストール</li><li>ストアの作成</li><li>Vuexの有効化</li><li>ストアの参照方法</li><li>ステートの更新</li></ul></li><li>他の公式プラグイン<ul><li>環境構築、拡張機能</li><li>リンタ、テスト、デバッグ</li><li>フレームワーク</li></ul></li></ul><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>約30ページながらVueの歴史や特徴､開発環境の構築からToDOアプリケーション実装、Vue3のプラグイン紹介までがかなり濃厚な内容となっています｡また本書はコーディングしながら読み進める構成となっており楽しみながら読める内容だとと思います｡</p><p>1章ではVueの環境構築からHello worldやv-if､コンポーネントの構成など書いてます。ページが少ないながら環境構築までしっかりと書いてあるのは初心者にとってありがたいと思いました｡  </p><p>2章ではVue2でのToDoアプリケーションの実装方法が書いてあります｡</p><p>要件定義から始まるのはさすがITコンサルタント！と思いました。またしっかりとソースコードも乗っておりHTML,JS,CSSも満遍なく勉強ができる内容で本記事のターゲット層に書いたとおりVueの知識0でもアプリケーションが作れます｡</p><p>3章では2章で実装したものをコンポーネント単位（部品単位）での分け方の紹介となっています｡</p><p>別コンポーネントへのデータの渡し方､アニメーション効果の実装方法などが記載されています｡このデータの渡し方が1パターンでなく（props/emit、slot、provide/inject）の複数のパターンで紹介しており、パターン毎のメリット､デメリットなど詳細に記載してありかなり勉強になりました。  </p><p>4章では今まで2-3章で実装したアプリケーションをVue3への移行方法､実装方法が書いてあります｡</p><p>2-3章で実装したVue2のコードと比較しVue3での実装例が数パターン紹介されています｡</p><p>またVue2ではなかった新機能も紹介されています。<br>以下一例の引用します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">Vue3の新機能である <span class="symbol">&amp;lt;</span>teleport<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>= <span class="string">"body"</span>&gt;</span></span><br><span class="line">  ページ内の任意の箇所にテレポーテーションできます。</span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line">を試しましょう</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上記のコードを実行すると以下のような表示になります</p><hr><p>Vue3の新機能である <teleport> を試しましょう<br>ページ内の任意の箇所にテレポーテーションできます。</p><hr><p>このように <code>&lt;teleport&gt;</code>のコンテンツがコンポーネントの中から別の場所に表示されるようになります。</p><p>この機能を活用することでVue2では大変だったモーダルウィンドウなどのZ-indexの表示問題を回避することができるようになります。（詳しくは本を読んでみましょう）</p><p>このような機能を知るとVue3すげー!やってみたい!という気持ちが奮い立ちます｡またVue2からVue3へのマイグレーションツールの紹介もあります｡Vue2で実装経験のある人には有益な情報だと思います。</p><p>5章では4章のVue3で実装したアプリケーションで使わなったもので代表的なプラグインが紹介されています｡まだRC版ですがVue2でアプリケーションを実装したことあるにも人は馴染み深いプラグインも多くあります｡今後の正式版リリースがたのしみですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ターゲット層にも書きましたが知識0でもVue2では実装経験あるがVue3は使ったことない人でも楽しめる記事だと思います｡</p><p>私も手を動かしながらVue2との違いを楽しみながら読んでいたらあっという間に30ページ読み切っていました｡特に3章では勉強になることも多く内容の濃い記事となっていました｡</p><p>もちろんこの記事だけでなく他も面白い記事が沢山あるのでこれは買いですね!</p><ul><li><a href="https://gihyo.jp/magazine/wdpress/archive/2021/vol120" target="_blank" rel="noopener">https://gihyo.jp/magazine/wdpress/archive/2021/vol120</a></li></ul><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201013/index.html" data-iframely-url="//cdn.iframe.ly/SAxxrkF?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200924/index.html" data-iframely-url="//cdn.iframe.ly/dsvZVOu?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200428/index.html" data-iframely-url="//cdn.iframe.ly/2dHfIIG"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Technology Innovation Group所属の久保です。&lt;/p&gt;
&lt;p&gt;私はフロントエンドエンジニ
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
  </entry>
  
  <entry>
    <title>システム障害対応の心構えと対応</title>
    <link href="https://future-architect.github.io/articles/20210202/"/>
    <id>https://future-architect.github.io/articles/20210202/</id>
    <published>2021-02-01T15:00:00.000Z</published>
    <updated>2021-02-02T00:32:05.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="１．はじめに"><a href="#１．はじめに" class="headerlink" title="１．はじめに"></a>１．はじめに</h2><p>冬の寒い夜、シャワーからお湯が出なくなったり、雪の降った朝、車のエンジンが掛からなかったり、列車を待っていたら運転見合わせとなり、いつ帰れるのかわからなくなったり、普段の生活の中でも障害は突然発生します。</p><p>システムも同じで、昨日まで正常に動いていたのに、突然止まる、なんだか挙動がおかしいといったシステム障害が突然発生します。</p><p>この記事ではシステム障害が発生した際の心構え、対応についてご紹介します。なお、システム障害の定義は、『<a href="https://gihyo.jp/book/2020/978-4-297-11265-3" target="_blank" rel="noopener">システム障害対応の教科書</a>』の「リリース後のシステムにおいて、システムの不具合やユーザ側の操作ミスで、ユーザ業務に影響が出ている」と同義といたします。</p><p>この記事の想定している対象者は、システム障害対応に初めて参加される方です。システム開発、運用保守といった直接対応する方はもちろんですが、システムが関わる場面は多岐に渡りますので、利用者、開発依頼をされる方にもシステム障害の裏側を知っていただければ幸いです。</p><p>私の略歴です。これまで総合物流企業の事務経理システム刷新のお手伝い、ネット証券でのシステム企画開発、現職フューチャー・アーキテクトでは金融のお客様の運用保守のとりまとめをしています。</p><h2 id="２．システム障害発生"><a href="#２．システム障害発生" class="headerlink" title="２．システム障害発生"></a>２．システム障害発生</h2><img src="/images/20210202/siren-297289_1280.png" class="img-small-size"><blockquote><p><a href="https://pixabay.com/ja/users/clker-free-vector-images-3736/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=297289" target="_blank" rel="noopener">Clker-Free-Vector-Images</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=297289" target="_blank" rel="noopener">Pixabay</a>からの画像</p></blockquote><p>あなたが開発に関わった初めてのシステムは無事にカットオーバーを迎えました。おめでとうございます。</p><p>眉間のシワが深くなっているリーダー陣も少し冗談が言えるようになったことでしょう。</p><p>ある日、あなたが早めに出社したところ、部屋の奥にある<a href="https://isa-j.co.jp/keiko/products/" target="_blank" rel="noopener">パトランプ</a>が鳴っていることに気づきました。</p><p>周りには誰もいません。</p><p>パトランプの存在は知ってましたが先輩がサッと止めて何かコマンドを叩いて確認し、他のメンバと会話しているのを横目に見るぐらいでした。</p><p>このタイミングで何をするべきでしょう。</p><p>まずは、<strong>連絡</strong>です。</p><p>あなたの身近の先輩、リーダーなど連絡先を知っている人が出るまで総当たりで連絡しましょう。パトランプが鳴り響く恐怖からその場を離れたくなるかもしれませんが、勇気を持って、何かが起きていることを発信しましょう。緊張で話す内容がまとまらない時は、いったん深呼吸して、3つ数えて、心を落ち着かせましょう。焦らず、事実だけを話すことが大事です。</p><h2 id="３．システム障害対応"><a href="#３．システム障害対応" class="headerlink" title="３．システム障害対応"></a>３．システム障害対応</h2><p>システム障害の対応は初動がとても大事です。</p><p>先輩に連絡が付いたら、<strong>いつ</strong>、何に気づいたのか、<strong>誰に</strong>連絡をしたのか、話をしながらノートに<strong>書き留め</strong>ましょう。近くにホワイトボードがあれば持ってきて転記しましょう。</p><p>しばらくすると、出勤途中だった先輩が到着しました。</p><p>ホワイトボードを見てもらい、受け答えをしてみましょう。この時、他の方への連絡を依頼されるかもしれませんし、簡単な調査を依頼されるかもしれません。依頼されたこともホワイトボードに書いて、やってみましょう</p><p>気がつくと、現場にはたくさんの人が集まっているはずです。手が空いていれば発言に耳を傾け、調査結果や<strong>決定事項</strong>と思われることを<strong>時刻</strong>と共に<strong>記録</strong>していきましょう。</p><p>重苦しい空気の中、パトランプの音、キーボードを叩く音、どこかへ電話する声、様々な会話が飛び交います。言葉に耳を傾けると、影響はいまも出ている？、何時までに復旧しないとまずい？、あの人に連絡した？、ログを取って、エラーの出力箇所のプログラムを見て、ハードはみた？、前にあった事例に似ていない？、などなど情報が錯綜するでしょう。</p><p>長丁場の場合、リーダーからあなたへ食料の買い出しを求めらるかもしれません。コンビニに走っていかれると思いますが、参加人数×2個ぐらいのおにぎり、サンドイッチがいいでしょう。常温でも飲めるものも人数分買いましょう。お弁当を買ってしまうとレンジが必要になります。カップ麺はお湯が必要です。冷たかったり、温かくないとおいしく飲めないものは、すぐに食事できない人には不向きです。みなさんが交代で食事することを意識したものを用意するのがよいでしょう。長期戦かなと思ったら栄養ドリンクもあるとよいでしょう。</p><p>リーダーがお客様への定期的な報告をしているのを横で聞きながらメモを取っていると、お客様がとある操作の話をされました。</p><p>あなたが知っている画面でしたので、言われた操作をすると、普段なら正常に表示されるはずなのに、なぜかその操作ではエラーになります。その画面をリーダーに見せて、エラーの操作方法を説明しました。リーダーは、調査メンバを呼んで、あなたに再度操作するよう求めてきます。調査メンバはすばやくコンソールを叩きながらログを読み始めています。そして、あなたの操作で発生しているエラーから怪しい箇所が報告され、復旧に向けたプランが議論され始めました。やがて、リーダーとお客様の間で復旧手順の実施が承認され、実行に移されます。</p><p>狙い通りであれば、無事に復旧するはずです。</p><h2 id="４．システム障害終了"><a href="#４．システム障害終了" class="headerlink" title="４．システム障害終了"></a>４．システム障害終了</h2><p>システム障害が解消されたあと、何があったのか確認がされます。</p><p>その時にあなたのメモが効果を発揮します。紙やホワイトボードに手書きしているものを整理して、リーダーに共有しましょう。もしかすると、報告書の手伝いを依頼されるかもしれません。起きたことを思い出しながら事実を正確に書いてみましょう。システム障害対応中、たくさんの用語が飛び交い、初めて見る資料が大量に出てきたはずです。ツラい時間だったかもしれませんが、終わった瞬間、何かが見えた感覚を味わうかもしれません。</p><p>さて、あなたが初めて体験したシステム障害が無事、収束しました。</p><p>まずは家に帰って、39度ぐらいのぬるめのお風呂に10分ぐらいゆっくり使って、早めに寝ましょう。</p><h2 id="５．ふりかえり"><a href="#５．ふりかえり" class="headerlink" title="５．ふりかえり"></a>５．ふりかえり</h2><p>システム障害対応が終わり、翌日、振り返った時、何か気づきはなかったでしょうか。</p><p>最初にパトランプが鳴っていることを気づいたときに、誰に連絡したらいいか頭に浮かびましたか。もし、誰に連絡したらいいのかわからないときは、事前に確認をしておいた方がよいでしょう。今回は、ノートに書きながら記録を残しましたが、パソコンで記録を取っていたらメールに貼ったり、報告書に使いまわせたりしなかったでしょうか。ホワイトボードに発生時刻や起きていることを書きましたが、これもパソコンから接続可能なファイルをチームに共有できたらホワイトボードの大きさに依存せずに複数人で更新ができたでしょう。</p><p>いろんな人の会話もチャットに集合してもらってやりとりをしてもらうと、後から来た人への共有も楽になるでしょう。影響調査をするときに、事前に実施する内容を決めておけば、どこは大丈夫でどこがダメなのかある程度の影響範囲がわかるようになるでしょう。</p><p>今回の対応の記録を手順書にできれば、万が一同じことが起きた時により早く復旧できるでしょう。</p><h2 id="６．さいごに"><a href="#６．さいごに" class="headerlink" title="６．さいごに"></a>６．さいごに</h2><p>あなたがシステムと関わり続ける限り、システム障害は何度でも発生します。</p><p>「助けを借りたいときはいつでも言ってくれ」そんな台詞を言ってくれそうな仲間をたくさんみつけて、あなたも力を貸せるように一緒に精進しましょう。</p><h2 id="７．参考"><a href="#７．参考" class="headerlink" title="７．参考"></a>７．参考</h2><p>この記事で、システム障害対応の世界に興味を持たれたら、下記もお読みください。</p><p>Qiita</p><ul><li><a href="https://qiita.com/ko1/items/dc260b14d9b7e8a54bd6" target="_blank" rel="noopener">運用における障害対応の基本 - システム障害といかに向き合い、チームとして対処するか</a></li><li><a href="https://qiita.com/zaru/items/edb49d8d2a2a6981789a" target="_blank" rel="noopener">システム障害と僕達はいかにして戦えば良いのか、障害対応について考えた</a></li><li><a href="https://qiita.com/s_kozake/items/825348559e4b4e330fb5" target="_blank" rel="noopener">恥かどうかはともかく、そもそも逃げられない障害対応のお話</a></li></ul><p>書籍</p><ul><li><a href="https://gihyo.jp/book/2020/978-4-297-11265-3" target="_blank" rel="noopener">システム障害対応の教科書</a></li><li><a href="https://www.oreilly.co.jp/books/9784873117911/" target="_blank" rel="noopener">SRE サイトリライアビリティエンジニアリング</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;１．はじめに&quot;&gt;&lt;a href=&quot;#１．はじめに&quot; class=&quot;headerlink&quot; title=&quot;１．はじめに&quot;&gt;&lt;/a&gt;１．はじめに&lt;/h2&gt;&lt;p&gt;冬の寒い夜、シャワーからお湯が出なくなったり、雪の降った朝、車のエンジンが掛からなかったり、列車を待っていた
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="障害対応" scheme="https://future-architect.github.io/tags/%E9%9A%9C%E5%AE%B3%E5%AF%BE%E5%BF%9C/"/>
    
      <category term="障害対応方法" scheme="https://future-architect.github.io/tags/%E9%9A%9C%E5%AE%B3%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95/"/>
    
      <category term="初心者" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>自宅仕事環境構築：指向性マイクの勧め</title>
    <link href="https://future-architect.github.io/articles/20210201/"/>
    <id>https://future-architect.github.io/articles/20210201/</id>
    <published>2021-01-31T15:00:00.000Z</published>
    <updated>2021-02-01T01:49:59.921Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20210118/">リモートワーク連載</a>の第2弾です。</p><ul><li>第1回: <a href="https://future-architect.github.io/articles/20210119/">プラントエンジニアのオレオレリモートワーク環境</a></li></ul><p>もともと、お仕事的には2019年にはリモートではあったのですが（仕事のカウンターが海外で、自社に出社しても、客先の日本のオフィスに行っても、テレビ会議とチャットで仕事していた）、2020年の3月からは自宅で仕事をすることになり、いろいろ整備しました。もともと自宅には書斎がなく、自分の机などもなく、本を書いたりOSSのコードを書いたりはしていたのですが、リビングでやるぐらいでした。仕事環境を作るために、タンスがいっぱいあって、洗濯物を干したりといった用途で使われていた部屋の一角に環境を作りました。築20年ぐらいの一軒家で、購入後6年ぐらい住んでいます。</p><p><img src="/images/20210201/PXL_20210126_055613291.jpg" alt=""></p><p>仕事スペースの間取りはこんな感じ。作業スペースは左端（窓側）です。右側は引き戸ですが、隙間があって防音性能は低いです。1階の子供達の声は聞こえてきます。</p><p><img src="/images/20210201/Screen_Shot_2021-01-25_at_17.16.23.png" alt=""></p><p>みなさん、それぞれこだわりの作業テーブルだったり、椅子だったり、モニターだったりがあると思うのですが、好みの問題とか体格によるマッチングもあるので、どれがいいかどうかは人それぞれかと思います。今日はマイクの話をします。</p><h1 id="マイクの購入と設置"><a href="#マイクの購入と設置" class="headerlink" title="マイクの購入と設置"></a>マイクの購入と設置</h1><p>もともと、PCの内蔵マイクで会議をしたりはしていましたが、キーボードの音が入ったりとかが気になっていました。昨年、<a href="https://future-architect.github.io/articles/20200910/">PyCon.jp 2020での発表のプロポーザルが通った</a>ので、せっかくなので、発表者に聞きやすいように良いものを、ということで知人が買っていたAmazonで安く売っている<a href="https://www.amazon.co.jp/dp/B07WKM5ZCS/" target="_blank" rel="noopener">マランツの888M</a>と、フリーハンドでマイクを口に近づけるための<a href="https://www.amazon.co.jp/dp/B07C5H4MJ2/" target="_blank" rel="noopener">マイクアーム</a>を購入しました。macではマイク付属のオーディオインタフェースがうまく動かないということで、<a href="https://www.amazon.co.jp/dp/B06XZY8JTZ/" target="_blank" rel="noopener">Sound Blasterの安いインタフェース</a>も買いました。Sound Blasterを冠する商品を買うのはBeOSプリインストールのぷらっとホームのショップブランドのパソコン（Celeron 300AMHz/メモリ64MB/HDD 6GB/ATi 3D Rage LT/SB AWE32あたり？）以来で22年ぶりですね。</p><p>マイクの指向性的には次のような感じの配置になっています。</p><p><img src="/images/20210201/Screen_Shot_2021-01-25_at_17.13.33.png" alt=""></p><p>音声出力はPCのスピーカー出力をそのまま使うので、パソコンに背を向ける方向で設置しました。キーボードの音も入りません。</p><p>家族がいる人や、夫婦でリモートワークをしている人は、環境音がどれだけ入るのかが気になると思うので、ちょっと実験してみました。meetで他の人につないで、どの程度聞こえるかの感想を聞きました。騒音源は10年ものの<a href="https://www.amazon.co.jp/dp/B003Z9KYRM" target="_blank" rel="noopener">ダイソンDC26</a>で、弱の強さで稼働させてみました。<a href="https://future-architect.github.io/articles/20210119/">家電ソムリエ</a>によると、最近のダイソンは静からしいですが、こいつは景気の良い音を出します。</p><p>結果としては、どの条件でもネットワークの向こうの伊藤さんには問題なく聞こえていました。掃除機を動かしているこちら側では向こうの声がかき消されて聞けないレベルではありましたが。階下で子供が大騒ぎで全力で遊んでも、問題はないですし、廊下で子供が遊んでいてもテレビ会議では相手に迷惑をかけることはないな、ということは分かりました。</p><table><thead><tr><th align="center">条件</th><th align="center">リモートでの感想</th><th align="center">ローカルでの感想</th></tr></thead><tbody><tr><td align="center">ダイソンを廊下に置く＆ドアを閉める</td><td align="center">聞こえない</td><td align="center">うるさい</td></tr><tr><td align="center">ダイソンを廊下に置く＆ドアを開ける</td><td align="center">ホワイトノイズ</td><td align="center">うるさくて仕事できないレベル</td></tr><tr><td align="center">ダイソンを室内（引き戸のそば）に置く</td><td align="center">ホワイトノイズ</td><td align="center">子供の喧嘩を真横で聞いているレベル</td></tr></tbody></table><p>試しにスマホで音楽をマイクの後ろで流しても、「かすかに聞こえる」レベルとのことでした。PCマイク　に切り替えてみると、バッチリ向こう側に聞こえていたらしいです。ここまで指向性があるのであれば、テレビ会議しながら発話者だけに音で伝えるのも可能そうではあります。これは勉強会などの発表をしつつ、発表者に対して音声で「あと5分」みたいな音声指示をマイクの裏で流すことは可能だったりしそうなので、うまく使えば、オンライン勉強会をよりスムーズに回せそうな気がします。</p><p>その後追試で音量を計測しました。Meet越しにiPhoneアプリの<a href="https://apps.apple.com/jp/app/sonic-tools-svm/id1245046029" target="_blank" rel="noopener">Sonic Tools SVM</a>で計測するみたいな簡単な計測方法です。Meetのアプリもノイズ抑制があったり、おそらくiPhoneアプリ側でも環境音を消すフィルターを持っているだろうな、みたいないろいろ変数がありすぎて評価が難しいところですが、ノイズ発生直後でもマイクで発話する声よりもだいぶ小さいノイズしか向こうには聞こえないということはお分りいただけると思います。その後の音量の下がり方はMeetが頑張って消しているんですかね。Meetすごい。</p><table><thead><tr><th align="center">条件</th><th align="center">マイク</th><th align="center">音量</th></tr></thead><tbody><tr><td align="center">無音（ノイズなし）</td><td align="center">外部マイク</td><td align="center">30dB</td></tr><tr><td align="center">会話（ノイズなし）</td><td align="center">外部マイク</td><td align="center">50dB</td></tr><tr><td align="center">室内でダイソン起動</td><td align="center">外部マイク</td><td align="center">（起動直後）35dB→30dB</td></tr><tr><td align="center">無音（ノイズなし）</td><td align="center">mac内蔵マイク</td><td align="center">30dB</td></tr><tr><td align="center">会話（ノイズなし）</td><td align="center">mac内蔵マイク</td><td align="center">50dB</td></tr><tr><td align="center">室内でダイソン起動</td><td align="center">mac内蔵マイク</td><td align="center">（起動直後）55dB→28dB</td></tr></tbody></table><p>マイクを変えてから、テレビ会議中に子供が部屋に入ってきて喋っても他の人には気づかれることはいまのところないので、マイクのおかげで生活音が会議の相手には伝わりにくくなっていることの裏付けは取れたと思います。</p><p>とはいえ、この生活音の伝搬については、きちんとした知識のある人に追試してほしいところではありますが。この手の測定は難しいですね。単に送信元の音量レベルを計測すればいいかというと、実際にネットワーク越しに聞く人の感性に近い数値を出そうとすると、Meetを通してそのノイズキャンセル機能も含めて測定したいところでありますし。夏休みの自由研究ネタに良さそう。</p><h1 id="その他の機材"><a href="#その他の機材" class="headerlink" title="その他の機材"></a>その他の機材</h1><p>今回買ったのはマイクとカメラ以外には、ディスプレイアーム、机とトラックボールぐらいですかね。</p><h2 id="ディスプレイ"><a href="#ディスプレイ" class="headerlink" title="ディスプレイ"></a>ディスプレイ</h2><p>Dellの4Kです。24インチぐらいですかね。知人からもらったものです。その知人にはガステーブルをあげたのでブツブツ交換ですかね。今時のUSB-Cで1本で繋がったりと比べると古いモデルですし、4Kで30Hzですが、困ってません。ゲームとかしないので。</p><h2 id="キーボード＆トラックボール"><a href="#キーボード＆トラックボール" class="headerlink" title="キーボード＆トラックボール"></a>キーボード＆トラックボール</h2><p><a href="https://www.amazon.co.jp/dp/B009ZNBJBM/" target="_blank" rel="noopener">Kinesis Freestyle 2</a>です。姿勢は大事(<a href="https://www.oreilly.co.jp/community/blog/2016/02/helthy-programmers-talk-training-part1.html" target="_blank" rel="noopener">Part 1</a>, <a href="https://www.oreilly.co.jp/community/blog/2016/03/helthy-programmers-talk-training-part2.html" target="_blank" rel="noopener">Part 2</a>)なのでセパレートです。前職の時から使っていて、前のプロジェクトで客先に持ち込んだりもしていたのでだいぶ長い付き合いであす。だいぶタッチが悪くなってきたので買い替えを検討中。シルバー軸のKinesis Freestyle Edgeか、Mistel MD770 Baroccoか。トラックボールは<a href="https://www.amazon.co.jp/dp/B004QJYBAG/" target="_blank" rel="noopener">ケンジントンのスリムブレード</a>です。ボールの大きさは正義。会社のロッカーには別のトラックボールもあったのですが、取りに行けなかったので。</p><h2 id="サンワサプライのデスク"><a href="#サンワサプライのデスク" class="headerlink" title="サンワサプライのデスク"></a>サンワサプライのデスク</h2><p>今回購入したのが、<a href="https://www.amazon.co.jp/dp/B0833KVS84/" target="_blank" rel="noopener">サンワサプライの折りたたみデスク</a>です。最終的な仕事のスペースをどこにするか決めていなかったので移動がしやすいように折りたたみにして、家の他の場所に移動しやすいように奥行きの浅いデスクにしました。浅いスペースでもキーボードをおく場所が狭くならないように、エルゴトロンOEMと言われている<a href="https://www.amazon.co.jp/dp/B00MIBN16O/" target="_blank" rel="noopener">Amazon Basicディスプレイアーム</a>でモニタを取り付けています。奥行き50cmでも狭くはないです。モニタの足部分が空くので、ケーブルの配線もしやすくなります。</p><p>ニトリの<a href="https://www.nitori-net.jp/ec/product/8732215s/" target="_blank" rel="noopener">マルチ収納Ｌワイド(オールホワイト)</a>がぴったりサイズ。あとは100円ショップで買ったスチールの網棚を天板の下に取り付けて電源ホルダーに（写真でちら見えしてますが）、本立てを取り付けてノートPCホルダーに。</p><h2 id="アーロンチェア"><a href="#アーロンチェア" class="headerlink" title="アーロンチェア"></a>アーロンチェア</h2><p>知人が椅子の買い替えをするということで、2マン円ほどで買い取ったものです。今回のリモートワークの前からリビングで使っていました。</p><p>だいぶ弱ってきてはいますが、これのおかげで長時間座り続けても健康を維持できています。もし壊れたら<a href="https://twitter.com/hiroki_niinuma" target="_blank" rel="noopener">握力王</a>オススメのバランスチェアにしたいと思い早数年ですが、なかなか壊れないですね。子供達の椅子は全部バランスチェアにしています。</p><h2 id="Google-Nest-mini"><a href="#Google-Nest-mini" class="headerlink" title="Google Nest mini"></a>Google Nest mini</h2><p>リモート会議を忘れないように、だいたい2分前に「オーケーグーグル、17:58にアラーム」みたいに言ってアラームを鳴らす専用機です。</p><h2 id="EOS-Kiss-X90"><a href="#EOS-Kiss-X90" class="headerlink" title="EOS Kiss X90"></a>EOS Kiss X90</h2><p>これもPyCon.jpの発表時のビデオ品質をアップさせようとCostcoで売っているセットを買ってきたものです。EOS WebCam Utilityで接続して発表しました。画質は確かにはるかに良いのですが、長時間使うと熱でダウンする？ まあ、もともとそういう用途ではないので仕方ない気がしますが、有識者によるとBetaが外れた正式版では30分制限があるとか。30分を超える動画撮影ができてしまうと輸出品目がカメラではなくビデオカメラになってしまって関税が変わってしまうので30分撮れない制限があるとかないといか、という噂も聞きました。Big SurとM1対応お待ちしているのですが、専用のウェブカメラの方が良いかもしれません。</p><h2 id="それ以外"><a href="#それ以外" class="headerlink" title="それ以外"></a>それ以外</h2><p>築20年だし、自宅のトイレx2がそこそこ古く、水量が多い古い機種だったのですよね。以前からトイレを新しくしたいという気持ちはありました。在宅というと自宅のトイレを使う回数も激増しますし、定額給付金が入金される前から、速攻で島忠に走って、トイレの改装をやりました。当時は中国からの流通が止まっていて選べる選択肢が少なかったので、店頭在庫でまずは1台改装し、在庫が復活したタイミングで、ちょっと良い機種を選んでもう1台のトイレも最新にしました。男女の人数非的に男性に偏りがちな職場が多かったからか、かつてどの職場でも、トイレの渋滞はいつもひどい感じでしたが、在宅ワークになって一番よかったのはトイレ待ちがない点ですね。</p><p>あとは、全然使っていない部屋でエアコンが壊れたままだったので、コジマで一番安いコロナのエアコンを導入しました。せっかくなので、今後は樹脂内窓のエコリフォームとかもやりたいと思っています。</p><p><a href="https://www.amazon.co.jp/dp/B07WKM5ZCS" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B07WKM5ZCS&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B07WKM5ZCS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B07C5H4MJ2" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B07C5H4MJ2&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B07C5H4MJ2" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B06XZY8JTZ" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B06XZY8JTZ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B06XZY8JTZ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B0833KVS84" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B0833KVS84&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B0833KVS84" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B00MIBN16O" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00MIBN16O&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B00MIBN16O" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B009ZNBJBM" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B009ZNBJBM&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B009ZNBJBM" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B004QJYBAG" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B004QJYBAG&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B004QJYBAG" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210118/&quot;&gt;リモートワーク連載&lt;/a&gt;の第2弾です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1回: &lt;a href=&quot;https://future-architect.
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
      <category term="指向性マイク" scheme="https://future-architect.github.io/tags/%E6%8C%87%E5%90%91%E6%80%A7%E3%83%9E%E3%82%A4%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>Azure Event Hubs の EventProcessorClientを利用した Consumer 実装</title>
    <link href="https://future-architect.github.io/articles/20210129/"/>
    <id>https://future-architect.github.io/articles/20210129/</id>
    <published>2021-01-28T15:00:00.000Z</published>
    <updated>2021-01-29T02:57:17.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Azure が提供されている Event Hubs の Consumer 処理実装の EventProcessorClient について調査する機会があったため、整理した内容を公開いたします。</p><img src="/images/20210129/EventHubs_logo.png" class="img-small-size"><blockquote><p><a href="https://docs.microsoft.com/ja-jp/azure/architecture/icons/" target="_blank" rel="noopener">Azure アーキテクチャ アイコン</a> からの画像</p></blockquote><h2 id="バージョン"><a href="#バージョン" class="headerlink" title="バージョン"></a>バージョン</h2><p>実装言語は Java を想定しています。</p><ul><li>azure-sdk-for-java<ul><li>com.azure:azure-messaging-eventhubs:5.3.1</li><li>com.azure:azure-messaging-eventhubs-checkpointstore-blob:1.3.1</li></ul></li></ul><h2 id="Event-Hubs-とは"><a href="#Event-Hubs-とは" class="headerlink" title="Event Hubs とは"></a>Event Hubs とは</h2><p>Azure が提供している、大規模データを貯めて配信することが可能な Pub/Sub モデルのマネージドサービスです。</p><p><a href="https://docs.microsoft.com/ja-jp/azure/event-hubs/event-hubs-about" target="_blank" rel="noopener">Azure Event Hubs とは - ビッグ データ インジェスト サービス - Azure Event Hubs | Microsoft Docs</a></p><p>Publisher からメッセージを受けて、 Subscriber(Consumer) へ配信する役割をします。<br>Event Hubs 構成としては、以下階層構造となっています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">namespace</span><br><span class="line">└── event hub</span><br><span class="line">└── partition</span><br></pre></td></tr></table></figure><p>まず namespace を作成し、作成したnamespace 内にevent hub を作成、作成したevent hub 内は partition 分割されています。</p><p>partition 数は <code>1 - 32</code> の間で指定します。</p><p>Publisher は namespace と  event hub を指定して、メッセージを送信し、Subscriber も同様にして、メッセージを受信します。</p><h2 id="Offset-管理"><a href="#Offset-管理" class="headerlink" title="Offset 管理"></a>Offset 管理</h2><p>Pub/Sub 系のサービスの、Consumer 実装を行う際に、メッセージをどこまで取得したかを管理すること(= offset 管理) が重要になります。<br>(アプリが突然止まったり、デプロイで停止したりと継続して取れ続けるとは限らないかなと思います。)<br>Event Hubs では offset は <code>Consumer group</code> の <code>partition</code> 単位で管理されます。</p><h3 id="Consumer-group"><a href="#Consumer-group" class="headerlink" title="Consumer group"></a>Consumer group</h3><p>Consumer group とは、複数の Consumer をまとめて扱う単位で、Event Hubs 側の設定で作成できます。Consumer group を設定する目的としては、複数の用途別にメッセージ取得をすることがあります。</p><p>例えば、メール配信用とSlack配信用で同一 Event Hub から別々に受信処理をしたい場合は、Consumer group Mail と Consumer group Slack と分けて作成することで実現できます。その際、offset 管理を別々に実施しないとメッセージが欠けたり重複したりしてしまいます。</p><p>そのため、offset の管理単位として Consumer group が利用されています。<br><img src="/images/20210129/azure_eventhubs_consumer_group.png" alt=""></p><blockquote><p><a href="https://docs.microsoft.com/ja-jp/azure/event-hubs/event-hubs-features#consumer-groups" target="_blank" rel="noopener">Azure アーキテクチャ アイコン-コンシューマーグループ</a> からの画像</p></blockquote><h2 id="EventProcessorClient"><a href="#EventProcessorClient" class="headerlink" title="EventProcessorClient"></a>EventProcessorClient</h2><p>Consumber group 別の offset 管理を行う実装として、 <code>EventProcessorClient</code> が一部 Azure SDK( <a href="https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventhubs/azure-messaging-eventhubs" target="_blank" rel="noopener">azure-messaging-eventhubs</a> )にて提供されています。こちらを利用することで、offset 管理をした上で漏れなくメッセージ取得処理を行うことができます。また他のメリットとして、複数台の Consumer 間で負荷を分散して、メッセージを重複することなく、取得する機能も持っています。処理のスケールのため Consumer の台数を増やしたいケースでは、Consumer 間で同じメッセージを取得しないような仕組みづくりが大変ですが、SDK側でよしなにやってくれて便利です。</p><p>ちなみに、旧版の<code>EventProcessorHost</code> (<code>azure-eventhubs</code> )でも同様のことができますが、他 API との実装の一貫性のために新版への移行が推奨されています。(<a href="https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/servicebus/azure-messaging-servicebus/migration-guide.md#migration-benefits" target="_blank" rel="noopener">参考</a>)</p><p>実際の動きとしては、各 Consumer ごとに partition を自動で割り当ててメッセージ取得処理をします。Consumer は 1 つ以上の partition を保持することができます。また、Consumer の増減にも対応し自動で再割り振りをしてくれます。注意点として、Consumer と partition が 1対n 対応する都合上、 Consumer と partition が同一数までしかスケールアウトせず、同一数以上に Consumer を増やしても、増やした Consumer はメッセージ受信処理をしません。</p><h3 id="どういった実装になっているのか？"><a href="#どういった実装になっているのか？" class="headerlink" title="どういった実装になっているのか？"></a>どういった実装になっているのか？</h3><p>実装としては、 ownership と checkpoint の2つの考え方を利用しています。</p><p>ownership は、各 Consumer がどの partition を担当するかを決める役割を担います。checkpoint は、 partition ごとにどの offset までメッセージを取得したかを保存する役割を担います。</p><p>Azure SDK (Java) で提供されている実装は、Blob Storage のメタデータを保存先として利用した実装になっています。</p><p><a href="https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/main/java/com/azure/messaging/eventhubs/checkpointstore/blob/BlobCheckpointStore.java" target="_blank" rel="noopener">azure-sdk-for-java/BlobCheckpointStore.java at master · Azure/azure-sdk-for-java</a></p><p>Blob Storage への Blob の配置先は以下の通りで、partition_id ごとに Blob が作成されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ownership</span></span><br><span class="line">az://<span class="variable">$&#123;Blob名&#125;</span>/<span class="variable">$&#123;namespace&#125;</span>/<span class="variable">$&#123;event hub&#125;</span>/<span class="variable">$&#123;consumer group&#125;</span>/ownership/<span class="variable">$&#123;partition_id&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># checkpoint</span></span><br><span class="line">az://<span class="variable">$&#123;Blob名&#125;</span>/<span class="variable">$&#123;namespace&#125;</span>/<span class="variable">$&#123;event hub&#125;</span>/<span class="variable">$&#123;consumer group&#125;</span>/checkpoint/<span class="variable">$&#123;partition_id&#125;</span></span><br></pre></td></tr></table></figure><p>ownership の担当者ID、 checkpoint の offset値 は Blob のメタデータとして管理されています。</p><p>Azure SDK 内で、メタデータ値を参照/更新することで、複数台のConsumer 間で連携して処理を行うことができるようになっています。Azure SDK 側で提供されている処理は Blob Storage を利用していますが、 <code>Checkpointstore</code> interface として切り出されているため、他の Storage (S3, GCS, インメモリ) でも実装することは可能です。<br><a href="https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/CheckpointStore.java" target="_blank" rel="noopener">azure-sdk-for-java/CheckpointStore.java at master · Azure/azure-sdk-for-java</a></p><h4 id="対応SDK"><a href="#対応SDK" class="headerlink" title="対応SDK"></a>対応SDK</h4><ul><li>.NET Core</li><li>Java</li><li>Python</li><li>JavaScript</li></ul><h4 id="Java-実装サンプル"><a href="#Java-実装サンプル" class="headerlink" title="Java 実装サンプル"></a>Java 実装サンプル</h4><p>サンプルの実装を記載します。その他、公式でサンプル実装が提供されています。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventProcessorClientBuilder = <span class="keyword">new</span> EventProcessorClientBuilder()</span><br><span class="line">        .connectionString(<span class="string">"$&#123;Connection String&#125;"</span>)</span><br><span class="line">        .checkpointStore(<span class="keyword">new</span> XXXCheckpointStore())</span><br><span class="line">        .consumerGroup(<span class="string">"$&#123;consumer group名&#125;"</span>)</span><br><span class="line">        .processEvent(eventContext -&gt; &#123;</span><br><span class="line">            <span class="comment">// メッセージ取得 成功処理</span></span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"partition=&#123;&#125;, sequence number=&#123;&#125;, offset=&#123;&#125;, body:=&#123;&#125;"</span>,</span><br><span class="line">                    eventContext.getPartitionContext().getPartitionId(),</span><br><span class="line">                    eventContext.getEventData().getSequenceNumber(),</span><br><span class="line">                    eventContext.getEventData().getOffset(),</span><br><span class="line">                    eventContext.getEventData().getBodyAsString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 10 件に 1回 checkpoint を更新</span></span><br><span class="line">            <span class="keyword">if</span> (eventContext.getEventData().getSequenceNumber() % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                eventContext.updateCheckpoint();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).processError(errorContext -&gt; &#123;</span><br><span class="line">            <span class="comment">// メッセージ取得 失敗処理</span></span><br><span class="line"></span><br><span class="line">            log.error(<span class="string">"namespace=&#123;&#125;, eventhubName=&#123;&#125;, consumerGroup=&#123;&#125;, partitionId=&#123;&#125;"</span>,</span><br><span class="line">                    errorContext.getPartitionContext().getFullyQualifiedNamespace(),</span><br><span class="line">                    errorContext.getPartitionContext().getEventHubName(),</span><br><span class="line">                    errorContext.getPartitionContext().getConsumerGroup(),</span><br><span class="line">                    errorContext.getPartitionContext().getPartitionId(),</span><br><span class="line">                    errorContext.getThrowable());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> eventProcessorClient = eventProcessorClientBuilder.buildEventProcessorClient();</span><br><span class="line"><span class="comment">// 別スレッドで client が起動</span></span><br><span class="line">eventProcessorClient.start();</span><br><span class="line"><span class="comment">// client を停止</span></span><br><span class="line">eventProcessorClient.stop();</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventhubs/azure-messaging-eventhubs/src/samples/java/com/azure/messaging/eventhubs" target="_blank" rel="noopener">azure-messaging-eventhubs</a></li><li><a href="https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/samples/java/com/azure/messaging/eventhubs/checkpointstore/blob" target="_blank" rel="noopener">azure-messaging-eventhubs-checkpointstore-blob</a></li></ul><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><p>その他、調査した結果を記載します。</p><h2 id="Apache-Kafka-との関係"><a href="#Apache-Kafka-との関係" class="headerlink" title="Apache Kafka との関係"></a>Apache Kafka との関係</h2><p>Event Hubs の実装は、 <strong>Kafka ではない</strong> とドキュメントに記載されています。</p><p>(用途が似ており、実態はマネージド Kafka だと勘違いしてました。)</p><p><a href="https://docs.microsoft.com/ja-jp/azure/event-hubs/apache-kafka-frequently-asked-questions" target="_blank" rel="noopener">https://docs.microsoft.com/ja-jp/azure/event-hubs/apache-kafka-frequently-asked-questions</a></p><p>ただ、Kafka API との互換性があるため、Pub/Sub の実装は Kafka のソースコードを利用することができます。</p><h2 id="接続プロトコル"><a href="#接続プロトコル" class="headerlink" title="接続プロトコル"></a>接続プロトコル</h2><p>複数のプロトコル(AMQP, Kafka, HTTPS)に対応していますが、Azure SDKを利用する場合は、AMQP を利用しています。</p><p>AMQP 利用時は、ポート 5671 と 5672 を開く必要があります。</p><p>参考: <a href="https://docs.microsoft.com/ja-jp/azure/service-bus-messaging/service-bus-amqp-protocol-guide" target="_blank" rel="noopener">Azure Service Bus と Event Hubs における AMQP 1.0 プロトコル ガイド - Azure Service Bus | Microsoft Docs</a></p><h2 id="認証・認可方式"><a href="#認証・認可方式" class="headerlink" title="認証・認可方式"></a>認証・認可方式</h2><p>Azure Active Directory 利用と 共有アクセス署名-SAS(Shared Access Signatures) 利用の 2パターンを使用可能です。<br>Connection String を払い出して接続する方式は、SAS 利用のパターンの理解です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Endpoint&#x3D;sb:&#x2F;&#x2F;&lt;namespace&gt;&#x2F;;SharedAccessKeyName&#x3D;&lt;KeyName&gt;;SharedAccessKey&#x3D;&lt;KeyValue&gt;;EntityPath&#x3D;&lt;event hub&gt;</span><br></pre></td></tr></table></figure><p>参考: <a href="https://docs.microsoft.com/ja-jp/azure/event-hubs/event-hubs-get-connection-string" target="_blank" rel="noopener">接続文字列を取得する - Azure Event Hubs - Azure Event Hubs | Microsoft Docs</a></p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>Azure Event Hubs の EventProcessorClient について紹介いたしました。<br>Azure 系は、他クラウドサービスと比べ情報があまり調べても出てこないので、実装と公式ドキュメントをどれだけ見れるかで理解度が変わってくるなぁという印象でした。また他のサービスも触ってみたいです。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.microsoft.com/ja-jp/azure/event-hubs/event-processor-balance-partition-load" target="_blank" rel="noopener">複数のインスタンス間でパーティション負荷のバランスを取る - Azure Event Hubs - Azure Event Hubs | Microsoft Docs</a></li><li><a href="https://docs.microsoft.com/ja-jp/azure/service-bus-messaging/service-bus-amqp-protocol-guide?toc=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fazure%2Fevent-hubs%2Ftoc.json&bc=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fazure%2Fbread%2Ftoc.json" target="_blank" rel="noopener">Azure Service Bus と Event Hubs における AMQP 1.0 プロトコル ガイド - Azure Service Bus | Microsoft Docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;Azure が提供されている Event Hubs の Consumer 処理実装の EventProcessorClient について調査
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="Azure" scheme="https://future-architect.github.io/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night(第3弾：船舶IoT Platform編)を開催しました。</title>
    <link href="https://future-architect.github.io/articles/20210128/"/>
    <id>https://future-architect.github.io/articles/20210128/</id>
    <published>2021-01-27T15:00:00.000Z</published>
    <updated>2021-02-01T02:09:04.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの仲澤、矢野です。</p><p>2020/8/17にオンラインにてFuture Tech Nightという社外勉強会を開催しました。</p><p>今回は第3弾としてAWS＆DataPlatform を活用した、船舶IoTプロジェクトの事例を紹介しました。</p><ul><li><a href="https://future.connpass.com/event/177093/" target="_blank" rel="noopener">Future Tech Night #1 ~メディア業界変革編～</a></li><li><a href="https://future.connpass.com/event/179387/" target="_blank" rel="noopener">Future Tech Night #2 ～MaaS ビジネス編～</a></li><li><a href="https://future.connpass.com/event/185051/" target="_blank" rel="noopener">Future Tech Night #3 ～船舶IoT Platform編～                               </a>← 今回はここ</li><li><a href="https://future.connpass.com/event/188742/" target="_blank" rel="noopener">Future Tech Night #4 〜Go x AWS スマート工場編〜</a></li><li><a href="https://future.connpass.com/event/195568/" target="_blank" rel="noopener">Future Tech Night #5 〜AWS＆DataPlatform MaaSビジネス編〜</a></li></ul><p><img src="/images/20210128/%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99%EF%BC%BF%E5%9B%B31.png" alt=""></p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>勉強会は以下のような構成で行いました。</p><ol><li>FutureとTechnology Innovation Groupの紹介</li><li>顧客・業界の紹介</li><li>業界の課題とプロジェクトの提案</li><li>プロジェクトの概況</li></ol><p>FutureとTechnology Innovation Groupの紹介では、グループ全体の紹介を代表的なプロジェクトを取り上げて紹介しました。<br><img src="/images/20210128/image01.png" alt=""></p><p>顧客・業界の紹介では、業界の構造を説明した後に、業界が抱えている課題を定義し、<br><img src="/images/20210128/image02.png" alt=""></p><p>その課題を解決するためにプロジェクトが提案した内容を説明しました。<br><img src="/images/20210128/%E5%9B%B31.png" alt=""></p><p>プロジェクトの概況では、働き方や担当領域の紹介、プラットフォームの全体像と、設計事例、構築にあたって利用したシステムやサービスについて紹介をしました。</p><p><img src="/images/20210128/%E5%9B%B32.png" alt=""></p><p><img src="/images/20210128/%E5%9B%B33.png" alt=""></p><h1 id="登壇者からのコメント"><a href="#登壇者からのコメント" class="headerlink" title="登壇者からのコメント"></a>登壇者からのコメント</h1><p><strong>仲澤：</strong><br>普段、少人数でひっそりとプロジェクトをやっているので、今回の社外発信は、とても有意義でした。<br>海事産業はITへの投資は他業界と比較して、まだ進んでおらず、また効果が大きいと感じています。自分たちの手で海上の事故を減らし、業務の効率化ができることに、とてもやりがいを感じています。一緒にやってくれる仲間も募集しています！</p><p><strong>矢野：</strong><br>これから少しずつ成長していくサービスを作っている実感があります。実績ベースでお話をすることはできませんでしたが、今後にご期待ください。業界特有の癖のようなものがあり、技術的にも挑戦しがいがあります。技術的な面白さは当プロジェクトに限らず数多く存在しており、この勉強会ではそんな面白いプロジェクトの紹介が今後も行われる予定ですので、興味を持たれた方はぜひご参加ください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ご参加頂いた方々、ありがとうございました。</p><p>FUTUREではFuture Tech Nightの他にも様々なイベントを開催しております。</p><ul><li><a href="https://future.connpass.com/" target="_blank" rel="noopener">https://future.connpass.com/</a></li></ul><p>今後も皆様のご参加をお待ちしております。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200925/index.html" data-iframely-url="//cdn.iframe.ly/YpB7olh?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201228/index.html" data-iframely-url="//cdn.iframe.ly/RWuBJfe?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの仲澤、矢野です。&lt;/p&gt;
&lt;p&gt;2020/8/17にオンラインにてFuture Tech Nightとい
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>不調PCを介抱しつつWMIに思いを馳せる</title>
    <link href="https://future-architect.github.io/articles/20210127/"/>
    <id>https://future-architect.github.io/articles/20210127/</id>
    <published>2021-01-26T15:00:00.000Z</published>
    <updated>2021-01-28T05:16:57.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、TIGの加藤剛です。2013年キャリア入社で、現在はTIG内に複数あるチームの1つのリーダをしています。テクノロジー領域としてはインフラやデータベースが明るめの分野です。先日 納期間近の作業中に社用PC端末で少々トラブルがあり復帰対応を行ったのですが、今回はその際の話について、関連する技術要素を織り交ぜながら取り上げてみたいと思います。</p><h1 id="問題の概要"><a href="#問題の概要" class="headerlink" title="問題の概要"></a>問題の概要</h1><p>社用PCのパッチ自動適用後、一時期から音声・ディスプレイ周辺の動作不良が続いていました。デバイスドライバーを当て直したいところなのですが、調査の中でPC構成情報を見ようとsysteminfoコマンドを実行すると、そこで見慣れないエラー。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:\ systeminfo</span><br><span class="line">オペレーティング システム情報を読み込んでいます...                    エラー: 無効なクラスです</span><br></pre></td></tr></table></figure><p>WindowsのApplicationイベントログにはWMIエラーが数回。<strong>Microsoft-Windows-WMIプロバイダーで イベントID 10 (Error: 0x80041010)</strong>、<code>//./root/CIMV2</code>の名前空間へのクエリが失敗していることがわかります。無視してドライバーをインストールしようとしても、同様のエラーでインストーラが止まり、ここから進めない状態です。納期が迫る中で立ち往生、ということでWMIの構成を修復していきました。</p><figure class="highlight plain"><figcaption><span>Windows-Eventlog（Application）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  + System </span><br><span class="line">  - Provider </span><br><span class="line">   [ Name]  Microsoft-Windows-WMI </span><br><span class="line">(中略)</span><br><span class="line">   EventID 10 </span><br><span class="line">   Version 2 </span><br><span class="line">   Level 2 </span><br><span class="line">   Task 0 </span><br><span class="line">   Opcode 0 </span><br><span class="line">   Keywords 0x8000000000000000 </span><br><span class="line">  - TimeCreated </span><br><span class="line">(中略)</span><br><span class="line">- UserData </span><br><span class="line">  - data_0x8000003F </span><br><span class="line">   Query &#x2F;&#x2F;.&#x2F;root&#x2F;CIMV2 </span><br><span class="line">   Namespace SELECT TargetInstance FROM __InstanceCreationEvent WITHIN 10 WHERE TargetInstance ISA &#39;Win32_Process&#39; AND TargetInstance.Name &#x3D; &#39;lync.exe&#39; </span><br><span class="line">   Error 0x80041010</span><br></pre></td></tr></table></figure><h2 id="原因はWMIリポジトリ破損"><a href="#原因はWMIリポジトリ破損" class="headerlink" title="原因はWMIリポジトリ破損"></a>原因はWMIリポジトリ破損</h2><p>パッチ自動適用の影響なのか真因は不明ながら、ある時点から<strong>WMIのリポジトリが破損</strong>していました。</p><p>尚これが原因で、前述のsysteminfo以外にもWMIベースでの実装されている情報収集機能系の機能は他も軒並みNGという状況でした。例えばmsinfo32のようなコマンド群や、ハードウェアメーカー製のアップデート管理ツールなど。</p><h1 id="WMI（Windows-Management-Instrumentation）とは"><a href="#WMI（Windows-Management-Instrumentation）とは" class="headerlink" title="WMI（Windows Management Instrumentation）とは"></a>WMI（Windows Management Instrumentation）とは</h1><p>そもそもWMIとは何でしょうか。超ざっくり要約すると<strong>Windows関連コンポーネントを管理するための汎用メカニズム</strong>です。<a href="https://ja.wikipedia.org/wiki/Windows_Management_Instrumentation" target="_blank" rel="noopener">Wikipedia</a>ではこのように説明されています。</p><blockquote><p>Windows Management Instrumentation (WMI) は、Windows Driver Modelへの拡張の一種で、システムの構成要素について情報収集と通知を行うオペレーティングシステム (OS) のインターフェースを提供する。WMI はDistributed Management Task Force (DMTF) の定めた Web-Based Enterprise Management (WBEM) と Common Information Model (CIM) 標準のマイクロソフトによる実装である。<br>WMI により、Windowsを搭載したパーソナルコンピュータやサーバをVBScriptやPowerShellのようなスクリプト言語で（ローカルでもリモートでも）管理できるようになる。WMIはWindows Vista、Windows Server 2003、Windows XP、Windows Me、Windows 2000に最初から実装されている。Windows 95およびWindows 98向けのWMIはダウンロード可能である[1]。<br>また、マイクロソフトはWMIのキャラクタユーザインターフェースとして Windows Management Instrumentation Command-line (WMIC) を提供している[2]。</p><p>^ [1] <a href="http://www.microsoft.com/downloads/details.aspx?familyid=98a4c5ba-337b-4e92-8c18-a63847760ea5&displaylang=en" target="_blank" rel="noopener">WMI Redistributable for Windows 95 and Windows 98</a><br>^ [2] <a href="http://support.microsoft.com/kb/290216" target="_blank" rel="noopener">Description of WMIC</a></p></blockquote><p>WMI (Windows Management Instrumentation) の Instrumentationという単語は「計器」や「計器による測定」を意味します。自動車の計器類がエンジンに関する情報を示すように、<strong>WMIはコンピュータシステムの内部状態に関する情報を示します</strong>。WMIでは、Windowsシステム内に検出されたディスクやプロセスなどのオブジェクトをモデリングすることにより、計器情報を提供します。</p><p>WMIによるシステムオブジェクトのモデリングには、<code>Win32_LogicalDisk</code> や <code>Win32_Process</code> などのクラスが使用されます。クラス名から推察できるように、<code>Win32_LogicalDisk</code> はコンピュータ上の論理ディスクをモデリングするクラス、<code>Win32_Process</code> はコンピュータ上で現在稼動している任意のプロセスをモデリングするクラスです。クラスは、Common Information Model (CIM) と呼ばれる拡張可能スキーマに基づいています。CIM スキーマは、<a href="http://www.dmtf.org" target="_blank" rel="noopener">Distributed Management Task Force</a> の公開規格です。</p><p>WMIには、上記のほか、イベント処理、リモート処理、クエリ処理、ビュー、スキーマのユーザー拡張、情報取得などの機能もあります。汎用メカニカズムですので、これに準拠することで<strong>全てのメーカーのハードウェアやソフトウェアで統一的に使える</strong>ようになります。</p><h2 id="WMIのアーキテクチャ"><a href="#WMIのアーキテクチャ" class="headerlink" title="WMIのアーキテクチャ"></a>WMIのアーキテクチャ</h2><p>続いて、WMIのアーキテクチャについて紐解いていきます。詳細はマイクロソフトの <a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-architecture" target="_blank" rel="noopener">WMI Architecture</a> に纏まっています。</p><p>WMIはコンピュータ、ネットワーク、ローカルまたはリモートのアプリケーションやスクリプトに対して、統一インターフェースを提供するわけですが、ポイントは<strong>WMIクライアントアプリケーションとスクリプトが多数のOS-APIを呼び出す必要がないように設計</strong>された点でしょう。 WMI以外の多くのAPIは、スクリプトやVBアプリケーションなどのオートメーションクライアントから呼び出すことはできず、リモートコンピュータも呼び出しません。WMIからデータを取得するには、WMIクラスにアクセスするクライアントスクリプトまたはアプリケーションを作成するか、WMIプロバイダーを作成してWMIにデータを提供します。 </p><ul><li>WMIアーキテクチャ構成図の概略と各層の役割を以下に示します。</li></ul><p><img src="/images/20210127/wmi-architecture.png" alt=""></p><h3 id="1-WMI-providers-and-managed-objects"><a href="#1-WMI-providers-and-managed-objects" class="headerlink" title="1.WMI providers and managed objects"></a>1.WMI providers and managed objects</h3><ul><li>WMIプロバイダー<ul><li>1つ以上の<strong>管理対象オブジェクトのWMIを監視するCOMオブジェクト</strong>です。</li><li>ドライバー同様に、プロバイダーはWMIに管理対象オブジェクトからのデータを提供し、WMIから管理対象オブジェクトへのメッセージを処理します。 DLLファイルと、プロバイダーがデータを返し、操作を実行するクラスを定義する管理対象オブジェクト形式（<a href="https://docs.microsoft.com/en-us//windows/win32/wmisdk/managed-object-format--mof-" target="_blank" rel="noopener">MOF</a>）ファイルで構成され、WMI C++アプリケーションなどのプロバイダーは、WMI用のCOMAPIを使用します。</li></ul></li><li>管理対象オブジェクト<ul><li>ハードディスクドライブ、ネットワークアダプター、データベースシステム、オペレーティングシステム、プロセス、サービスなどの<strong>論理的または物理的なエンタープライズコンポーネント</strong>です。</li><li>プロバイダーの例は、システムレジストリ内のデータにアクセスするプリインストールされたレジストリプロバイダーなどがあります。<br>プロバイダーによって、1クラス内のメソッドとプロパティの数的関係性は絶対のルールはなくマチマチです。</li></ul></li><li>物理構造体の特徴<ul><li>WMI MOFおよびDLLファイルは、Winmgmt.exeやMofcomp.exeなどのWMIコマンドラインツールとともに<code>%WINDIR%\System32\Wbem</code> に置かれます。<code>Win32_LogicalDisk</code> などのプロバイダークラスはMOFファイルで定義され、<strong>システムの起動時にWMIリポジトリにコンパイル</strong>されます。</li></ul></li></ul><h3 id="2-WMI-infrastructure"><a href="#2-WMI-infrastructure" class="headerlink" title="2. WMI infrastructure"></a>2. WMI infrastructure</h3><ul><li>WMIインフラストラクチャは<strong>WMIサービス（winmgmt）として知られるWindows OSコンポーネント</strong>で、 WMIリポジトリとWMIコアの2つのコンポーネントがあります。</li><li>WMIリポジトリ<ul><li><strong>WMI名前空間によって編成されます。名前空間はWMIサービスによってシステムの起動時に作成</strong>され、Win32クラス、WMIシステムクラスなどのクラス定義の既定のセットをプレインストールします。</li><li>システム起動時に作成される名前空間には、<code>root\default</code>、<code>root\cimv2</code>、<code>root\Subscription</code>などがあります。システムにある残りの名前空間は、オペレーティングシステムまたは製品の他の部分のプロバイダーによって作成されます。</li></ul></li><li>WMIコア<ul><li><strong>プロバイダー、管理アプリケーション、およびWMIリポジトリ間の仲介役</strong>として機能します。プロバイダーによって定義されたクラスなど、オブジェクトに関する静的データのみがリポジトリに保存されます。 WMIはクライアントが要求したときにプロバイダーからほとんどのデータを動的に取得します。</li><li>ちなみに上記は、マイクロソフトの説明原文（<a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-architecture" target="_blank" rel="noopener">WMI Architecture</a> ）では以下のようにWMIコアではなく「WMI service」の説明として記載されていますが、内容の整合性を踏まえるとWMIコアの役割に関する説明と読み取るのが妥当なのではと思われます。</li></ul></li></ul><blockquote><p><strong>The WMI service acts</strong> as an intermediary between the providers, management applications, and the WMI repository. Only static data about objects is stored in the repository, such as the classes defined by providers. WMI obtains most data dynamically from the provider when a client requests it. You also can set up subscriptions to receive event notifications from a provider. For more information, see Monitoring Events.</p></blockquote><h3 id="3-WMI-consumers-management-applications"><a href="#3-WMI-consumers-management-applications" class="headerlink" title="3. WMI consumers (management applications)"></a>3. WMI consumers (management applications)</h3><ul><li>WMIインフラストラクチャと対話する<strong>管理アプリケーションあるいはスクリプト</strong>です。</li><li>管理アプリケーションは、WMI用のCOMAPIまたはWMI用のScriptingAPIのいずれかを呼び出すことにより、クエリ、データの列挙、プロバイダーメソッドの実行、またはイベントのサブスクライブを行うことができます。ディスクドライブやサービスなどの管理対象オブジェクトで使用できるデータまたはアクションは、プロバイダーが提供するものだけとなります。</li></ul><h2 id="WMIを扱うためのWindows標準ツール"><a href="#WMIを扱うためのWindows標準ツール" class="headerlink" title="WMIを扱うためのWindows標準ツール"></a>WMIを扱うためのWindows標準ツール</h2><p>WMIによる情報取得や管理操作を行うのに利用できるWindows標準ツールには、以下のような方法があります。</p><table><thead><tr><th align="center">No</th><th align="left">ツール名</th><th align="left">概要説明</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">WMICコマンド (<a href="https://docs.microsoft.com/ja-jp/windows-server/administration/windows-commands/wmic" target="_blank" rel="noopener">wmic</a>)</td><td align="left">Windows標準のCUIベースの情報走査ツール。コマンドラインからWMIにアクセスできる。データアクセスはWQLベースではない。外部記事によるコマンド具体例は<a href="https://qiita.com/Yorcna/items/119abffc89d01f67c111" target="_blank" rel="noopener">こちら</a>。アーキテクチャ階層の「WMI consumers」にあたる。</td></tr><tr><td align="center">2</td><td align="left">WMIテスト (<a href="https://docs.microsoft.com/ja-jp/mem/configmgr/develop/core/understand/introduction-to-wbemtest" target="_blank" rel="noopener">wbemtest</a>)</td><td align="left">Windows標準ツールのGUIベースの情報走査ツール。WQLエディターに相当。WMI名前空間への接続、クラス定義の確認、そしてクラスのメソッド実行をテストすることができる。また、MOFCOMPでCIMレポジトリに登録された情報を削除することも可能。アーキテクチャ階層の「WMI consumers」にあたる。</td></tr><tr><td align="center">3</td><td align="left">WMIコントロール (<a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/winmgmt" target="_blank" rel="noopener">wmimgmt.msc</a>)</td><td align="left">Windows標準のGUI管理ツール。WMIの構成と制御を行うツールで、WMIデータベースのバックアップと復元、WMIサービスに対するアクセスのセキュリティ設定を行うことができる。ただし、WMIデータにアクセスする機能はない。アーキテクチャ階層の「WMI infrastructure」にあたる。</td></tr></tbody></table><p>上記以外だと、以前はマイクロソフトのサイトで「WMI Administrative Tools」というWQLツールも配布されていたようですが、現在ではDLできないようになっています。WQLベースのツールとしては前述の表No.2の「wbemtest」と、軽量・簡易なフリーソフトとして、<a href="http://www.vector.co.jp/soft/winnt/util/se477357.html" target="_blank" rel="noopener">WMI Query</a>というものが知られています。</p><h2 id="補足：WQL-WMI-Query-Language）について"><a href="#補足：WQL-WMI-Query-Language）について" class="headerlink" title="補足：WQL (WMI Query Language）について"></a>補足：WQL (WMI Query Language）について</h2><p>最後に、WQLについて補足しておきます。</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/querying-with-wql" target="_blank" rel="noopener">WQL(WMI Query Language)</a>は「SQL for WMI」と記載されることある、WMI特有の拡張機能を複数持つ構造化照会言語 (SQL) の単純化されたサブセットです。 WMIの情報を取得するには、WMIクラスのインスタンスを取得し、取得したWMIクラスの各インスタンスのプロパティから情報を取得するという流れで作業します。この操作をWQLと呼ばれるSQL文を使い取得することが可能です。<strong>SQL文の場合、通常はデータベースやテーブルを操作しますが、WQLではWMIクラスが対象</strong>となります。</p><p>冒頭に出てきたイベントログでも、以下のようになっていましたね。</p><figure class="highlight plain"><figcaption><span>Windows-EventLog（抜粋で再掲）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Query &#x2F;&#x2F;.&#x2F;root&#x2F;CIMV2 </span><br><span class="line">   Namespace SELECT TargetInstance FROM __InstanceCreationEvent WITHIN 10 WHERE TargetInstance ISA &#39;Win32_Process&#39; AND TargetInstance.Name &#x3D; &#39;lync.exe&#39;</span><br></pre></td></tr></table></figure><h1 id="発生していた問題への対処"><a href="#発生していた問題への対処" class="headerlink" title="発生していた問題への対処"></a>発生していた問題への対処</h1><p>ではここまでの内容を頭に置きつつ、以降は話を戻し、不調な我がPCを復帰させていきます。</p><p>結論から言うと、最終的にWMIを再構成することで解決しました。</p><p>手順は至ってシンプルで、<strong>WMIサービスを止めて、リポジトリを再作成するのみ</strong>です。今回は <del>ディスプレイ制御がおかしく仕方なく</del> カッコよく？GUIを使わずコマンドでやってみようということで、PowerShellのコマンドレットをベースに操作していきます。詳細は割愛しますがWindows標準コマンドのsc（sc.exe）も高機能でよく使うコマンドですので、もう忘れたという方は是非思い出してあげてください（というか、scでは簡単にできることでもPowerShellだと大変なことも割とあります）。</p><h2 id="WMIサービス状態と構成の確認"><a href="#WMIサービス状態と構成の確認" class="headerlink" title="WMIサービス状態と構成の確認"></a>WMIサービス状態と構成の確認</h2><p>まずはサービスの状態、設定を確認していきます。ここでは主にWMI（<code>Windows Management Instrumentation</code>サービス）の起動状態とサービス実名を確認しています。なお以降PowerShellは基本的に 「管理者として実行」 しています。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\windows\system32&gt;  <span class="built_in">Get-Service</span> | <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.displayname <span class="operator">-eq</span> <span class="string">"Windows Management Instrumentation"</span>&#125;|<span class="built_in">select-object</span> status, starttype, name, displayname</span><br><span class="line"></span><br><span class="line"> Status StartType Name    DisplayName</span><br><span class="line"> ------ --------- ----    -----------</span><br><span class="line">Running Automatic Winmgmt Windows Management Instrumentation</span><br></pre></td></tr></table></figure><p>続いて依存関係も併せて確認していきます。コマンドレットのオプションの意味合いが少しわかりにくいのですが、意味は以下の通りです。</p><ul><li>-DependentServices：WinMgmt「に」依存しているサービス</li><li>-RequiredServices：WinMgmt「が」依存しているサービス</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; <span class="built_in">Get-Service</span> <span class="literal">-DependentServices</span> Winmgmt</span><br><span class="line">Status   Name               DisplayName</span><br><span class="line">------   ----               -----------</span><br><span class="line">Stopped  NcaSvc             Network Connectivity Assistant</span><br><span class="line">Running  iphlpsvc           IP Helper</span><br><span class="line"></span><br><span class="line">PS C:\Windows\system32&gt; <span class="built_in">Get-Service</span>  <span class="literal">-RequiredServices</span> Winmgmt</span><br><span class="line">Status   Name               DisplayName</span><br><span class="line">------   ----               -----------</span><br><span class="line">Running  RPCSS              Remote Procedure Call (RPC)</span><br></pre></td></tr></table></figure><p>小技ですが、上記は横着するとこんな感じで一度に取得することも可能です。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\System32&gt; <span class="built_in">Get-Service</span> <span class="literal">-Name</span> WinMgmt | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.RequiredServices <span class="operator">-or</span> <span class="variable">$_</span>.DependentServices&#125; |</span><br><span class="line">  <span class="built_in">Format-Table</span> <span class="literal">-Property</span> Status, Name, RequiredServices, DependentServices <span class="literal">-auto</span></span><br><span class="line"></span><br><span class="line"> Status Name    RequiredServices DependentServices</span><br><span class="line"> ------ ----    ---------------- -----------------</span><br><span class="line">Running WinMgmt &#123;RPCSS&#125;          &#123;NcaSvc, iphlpsvc&#125;</span><br></pre></td></tr></table></figure><p>実はこの後のWMIリポジトリ再作成時に少しだけハマった部分なのですが、当該サービス、Windowsサービスの回復設定で停止検知後（正確にはエラー検知）に自動で再度立ち上がってくる設定になっていることがわかります。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\System32&gt; C:\Windows\System32\sc.exe qfailure Winmgmt</span><br><span class="line">[<span class="type">SC</span>] QueryServiceConfig2 SUCCESS</span><br><span class="line"></span><br><span class="line">SERVICE_NAME: Winmgmt</span><br><span class="line">        RESET_PERIOD (<span class="keyword">in</span> seconds)    : <span class="number">86400</span></span><br><span class="line">        REBOOT_MESSAGE               :</span><br><span class="line">        COMMAND_LINE                 :</span><br><span class="line">        FAILURE_ACTIONS              : RESTART -- 遅延 = <span class="number">120000</span> ミリ秒です。</span><br><span class="line">                                       RESTART -- 遅延 = <span class="number">300000</span> ミリ秒です。</span><br></pre></td></tr></table></figure><p>なお、PowerShellで <code>sc qfailure</code> 相当の自動回復設定の確認方法がパッとわからなかったため、ここでは少しズル？をして<code>sc</code>コマンドをコールしています。<code>sc.exe</code>をフルパスで呼んでいるのは、試したこのある方はニヤッとされるかもしれませんが、Powershellのコマンドレットである <code>sc (Set-Content)</code>のエイリアスと<code>sc.exe</code> の名前が重複して、<code>Set-Content</code> が優先されるためです。</p><h2 id="WMIサービスを停止"><a href="#WMIサービスを停止" class="headerlink" title="WMIサービスを停止"></a>WMIサービスを停止</h2><p>前述の手順で確認した通り、WMIサービスには依存関係のあるサービスがありますので<code>-Force</code>で強制停止します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\System32&gt; <span class="built_in">Stop-Service</span> <span class="literal">-Name</span> WinMgmt</span><br><span class="line"><span class="built_in">Stop-Service</span> : サービス <span class="string">'Windows Management Instrumentation (WinMgmt)'</span> には依存サービスが存在するため、停止できません。このサービスを停止できるのは、Force フラグが設定されている場合のみです。</span><br><span class="line">発生場所 行:<span class="number">1</span> 文字:<span class="number">1</span></span><br><span class="line">+ <span class="built_in">Stop-Service</span> <span class="literal">-Name</span> WinMgmt</span><br><span class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : InvalidOperation: (System.ServiceProcess.ServiceController:ServiceController) [<span class="built_in">Stop-Service</span>]、ServiceCommandException</span><br><span class="line">    + FullyQualifiedErrorId : ServiceHasDependentServices,Microsoft.PowerShell.Commands.StopServiceCommand</span><br><span class="line"></span><br><span class="line">PS C:\Windows\System32&gt; <span class="built_in">Stop-Service</span> <span class="literal">-Force</span> <span class="literal">-Name</span> WinMgmt</span><br></pre></td></tr></table></figure><h2 id="リポジトリ情報フォルダをリネーム"><a href="#リポジトリ情報フォルダをリネーム" class="headerlink" title="リポジトリ情報フォルダをリネーム"></a>リポジトリ情報フォルダをリネーム</h2><p>リポジトリの実体は <code>%windir%\system32\repository</code> 配下にあり、以下のようなファイルが格納されます。今回はこれらをリネームし、WMIサービスを改めて起動することでリポジトリを再作成（＝プロバイダークラスをリコンパイル）していきます。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS C:\windows\system32&gt; <span class="built_in">Set-Location</span> .\wbem\</span><br><span class="line">PS C:\windows\system32\wbem&gt; <span class="built_in">Get-ChildItem</span> C:\Windows\system32\wbem\repository\</span><br><span class="line"></span><br><span class="line">    ディレクトリ: C:\Windows\system32\wbem\repository</span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">2021</span>/<span class="number">01</span>/<span class="number">18</span>     <span class="number">15</span>:<span class="number">36</span>        <span class="number">5562368</span> INDEX.BTR</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">2021</span>/<span class="number">01</span>/<span class="number">18</span>     <span class="number">15</span>:<span class="number">36</span>          <span class="number">89108</span> MAPPING1.MAP</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">2021</span>/<span class="number">01</span>/<span class="number">18</span>     <span class="number">15</span>:<span class="number">31</span>          <span class="number">88800</span> MAPPING2.MAP</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">2021</span>/<span class="number">01</span>/<span class="number">18</span>     <span class="number">15</span>:<span class="number">31</span>          <span class="number">88892</span> MAPPING3.MAP</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">2021</span>/<span class="number">01</span>/<span class="number">18</span>     <span class="number">15</span>:<span class="number">36</span>       <span class="number">26796032</span> OBJECTS.DATA</span><br></pre></td></tr></table></figure><p>モタモタしているとWMIサービスが自動起動で起き上がってきてリネームが失敗するので、クイックに。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\windows\system32\wbem&gt; <span class="built_in">Move-Item</span> <span class="literal">-Path</span> <span class="string">".\repository\"</span> .\repository.bk20210118A\</span><br></pre></td></tr></table></figure><p>既にWMIサービスが自動起動されている場合にはアクセス拒否が返されます。この場合は、前述のWMIサービス停止をもう一度行ってからすぐにリネームしましょう。正常に実行できると画面上は応答メッセージなしとなります。</p><h2 id="WMIサービス再起動、そして動作確認"><a href="#WMIサービス再起動、そして動作確認" class="headerlink" title="WMIサービス再起動、そして動作確認"></a>WMIサービス再起動、そして動作確認</h2><p>あとは手動でサービスを起動すれば終わりです。サービスが起動してくると、<code>%windir%\system32\wbem</code> 配下に新たにrepositoryフォルダが作成され、再構成が完了します。サービス回復による自動起動が働くため、タイミング次第では以下にように既に起動中といったことになりますが、<code>%windir%\system32\repository</code>フォルダが新たに作成されていることが確認できれば問題ありません。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\System32&gt; <span class="built_in">Start-Service</span>  <span class="literal">-Name</span> WinMgmt</span><br><span class="line">PS C:\windows\system32&gt; <span class="built_in">Get-Service</span> <span class="literal">-Name</span> WInMgmt</span><br><span class="line"></span><br><span class="line">Status   Name               DisplayName</span><br><span class="line">------   ----               -----------</span><br><span class="line">Running  WInMgmt            Windows Management Instrumentation</span><br></pre></td></tr></table></figure><p>これで解決です。この後、本来やりたかったデバイスドライバーを再適用をしてハードウェア制御が正常に戻りました（よかった）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS C:\windows\system32&gt; systeminfo</span><br><span class="line"></span><br><span class="line">ホスト名:               **********</span><br><span class="line">OS 名:                  Microsoft Windows <span class="number">10</span> Pro</span><br><span class="line">OS バージョン:          <span class="number">10.0</span>.<span class="number">18363</span> N/A ビルド <span class="number">18363</span></span><br><span class="line">OS 製造元:              Microsoft Corporation</span><br><span class="line">OS 構成:                メンバー ワークステーション</span><br><span class="line">OS ビルドの種類:        Multiprocessor Free</span><br><span class="line">登録されている所有者:   Windows ユーザー</span><br><span class="line">(後略)</span><br></pre></td></tr></table></figure><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回は、普段よく扱っているサーバサイドではなく自分のPC端末でのトラブルを契機に、WMIについて取り上げてみました。自分のメインPCがおかしくなるのは、ある意味 サーバトラブルとはまた一味違った焦りがあるものですね。クラウド上のサーバと違って、壊れたらすぐに替えがきかない機器ということで、少し緊張感の高い作業でした。折角の機会なので久方ぶりのWindowsのコマンド操作の復習をしつつ、WMIのアーキテクチャ面の基礎を改めて整理をしてみましたので、どこかで誰かのご参考になればと思います。</p><p>ところで、普段動いているのが当たり前の機能やサービスが、何か想定外トラブルでダウンしてしまうことってそれなりにありますよね。私のメインの守備範囲の1つはインフラですが、インフラでいうとどこかのクラウドサービスがまた別のクラウドサービスをバックボーンに動いていて、大元のサービスが障害になった時に「あ、こういう関係性で動いていたんだ…」とその時になって気付くことがあります。また、こうしたケースでは依存先のサービスが公称されていないことが大半で、その影響は事前になかなかわからないものです。</p><p>今回のPC上でのトラブル程度でもいざ起こってみると案外色々な機能に影響が出て混乱しましたが、エンタープライズ領域のシステムにおける影響は、ある端末で起きたWMIエラーのようなかわいいものではすみません。普段のシステムデザインにおける考慮事項として、こういった可能性は常に頭において考えていきたいものですね。</p><p>ではまた！</p><h1 id="参考情報"><a href="#参考情報" class="headerlink" title="参考情報"></a>参考情報</h1><ul><li><a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-architecture" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-architecture</a></li><li><a href="https://docs.microsoft.com/ja-jp/powershell/scripting/samples/managing-services?view=powershell-7.1" target="_blank" rel="noopener">https://docs.microsoft.com/ja-jp/powershell/scripting/samples/managing-services?view=powershell-7.1</a></li><li><a href="https://docs.microsoft.com/ja-jp/windows-hardware/drivers/kernel/implementing-wmi" target="_blank" rel="noopener">https://docs.microsoft.com/ja-jp/windows-hardware/drivers/kernel/implementing-wmi</a></li><li><a href="https://www.manageengine.jp/products/OpManager/how-to-rebuild-wmi.html" target="_blank" rel="noopener">https://www.manageengine.jp/products/OpManager/how-to-rebuild-wmi.html</a></li><li><a href="https://websetnet.net/ja/how-to-repair-or-rebuild-the-wmi-repository-on-windows-10/" target="_blank" rel="noopener">https://websetnet.net/ja/how-to-repair-or-rebuild-the-wmi-repository-on-windows-10/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、TIGの加藤剛です。2013年キャリア入社で、現在はTIG内に複数あるチームの1つのリーダをしています。テクノ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="トラブルシュート" scheme="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%88/"/>
    
      <category term="Windows" scheme="https://future-architect.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>July Tech Festa 2021 winterで発表しました</title>
    <link href="https://future-architect.github.io/articles/20210125/"/>
    <id>https://future-architect.github.io/articles/20210125/</id>
    <published>2021-01-24T15:00:00.000Z</published>
    <updated>2021-02-01T02:09:11.462Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>先日<a href="https://techfesta.connpass.com/event/193966/" target="_blank" rel="noopener">July Tech Festa 2021 winter</a>に登壇させていただきました。  </p><p>昨今の情勢的に当然のごとくオンラインイベントでの参加です、手軽で良いのですが少し寂しさもあります。</p><img src="/images/20210125/photo_20210125_01.png"><h2 id="July-Tech-Festaとは"><a href="#July-Tech-Festaとは" class="headerlink" title="July Tech Festaとは"></a>July Tech Festaとは</h2><p>July Tech Festaは有志のボランティアにより開催されるイベントです。</p><p>システム管理者の日という記念日が七月であることに由来します。</p><blockquote><p>「 ITに関わる全ての人の知的好奇心を満たすお祭りを作りたい」ーー<br>その思いから July Tech Festa は生まれました。</p></blockquote><blockquote><p>興味のある技術に触れ、普段会えない人の話を聞き、<br>参加したエンジニアがスキルやキャリアについて考えるきっかけになる</p></blockquote><blockquote><p>そんな場を作ろうと、July Tech Festa 2021 winter を開催します。</p></blockquote><p>今回は朝10時からの60分枠で発表させていただけました、ありがとうございます。</p><h2 id="発表の内容"><a href="#発表の内容" class="headerlink" title="発表の内容"></a>発表の内容</h2><p>発表資料のダイジェスト版をアップロードしました。</p><script async class="speakerdeck-embed" data-id="958c38fb19314907aa93bf91e2f0c562" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>一足先に<a href="/articles/20210107/">Electronの使い方 Web開発の技術でデスクトップアプリを作ろう</a>というタイトルで入門記事を技術ブログでも書きました。</p><p>その内容と重複する部分もありますが、発表ではサンプルアプリケーションのコードを深堀りして、どのようにフレームワークが動いているかをお話しさせていただきました。</p><img src="/images/20210125/photo_20210125_02.png"><p>July Tech Festaは元々システム管理、インフラエンジニア向けのイベントであるという側面を意識し、<br>業務観点でのデスクトップアプリケーションとクラウドインフラの構築における工夫についても発表しました。</p><img src="/images/20210125/photo_20210125_03.png"><p>ITコンサルタントとしての働き方、アルバイトが驚異的に優秀である文化といった会社のカルチャーも自己紹介として少し長めに説明させていただきました。<br>フューチャーって結局どんな会社なんだろう、と思った方はぜひ<a href="https://www.youtube.com/channel/UCKLoUvohjwyohYzKTRyeUBQ" target="_blank" rel="noopener">アーカイブ動画</a>を見ていただければと思います。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>実は25分枠でも60分枠でもどちらでもOK，というスタンスで応募したのですが、めでたく60分枠を頂きました。<br>60分の長尺に耐えられるコンテンツになるかが正直不安でしたが、結果的にはちょうど良い尺で終わることができました。</p><p>クライアント証明書の利用方法など、初めて知った、知らなかったという反応を頂けました。<br>つぶやきとして感想をリアルタイムで得ることができるとモチベーションが上がります、今後も業務で得た学びは外部発信していければと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;https://techfesta.connpass.com/event/193966/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;July Tech Festa 2021 winter&lt;/a
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="Electron" scheme="https://future-architect.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>オレのDynamoDB Streamsが再着火しないわけがない</title>
    <link href="https://future-architect.github.io/articles/20210122/"/>
    <id>https://future-architect.github.io/articles/20210122/</id>
    <published>2021-01-21T15:00:00.000Z</published>
    <updated>2021-02-01T02:09:17.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニット真野です。</p><p>タイトルのみで内容にあたりがつく、AWSお兄さんな方も多いかと思いますが、内容サマリです。</p><ul><li>一度着火済みであるDynamoDB Streamsイベントを再着火させる公式機能は存在しない（管理コンソールでボタンポチではできないという意図です）</li><li>何かしらのスクリプトでGet（Scan） + Put（Update）して、再度データ編集する必要がある</li><li>この時、Get（Scan）した内容をそのままPutしてもDynamoDB Streamsは起動せず、何かしらの項目変更や項目追加が必要</li></ul><p>..です。</p><p>興味がある方向けに説明を続けます。</p><h2 id="DynamoDB-Streamsとは"><a href="#DynamoDB-Streamsとは" class="headerlink" title="DynamoDB Streamsとは"></a>DynamoDB Streamsとは</h2><p><img src="/images/20210122/1_isSK76wQioKx8k3dXrDrZA.png" alt=""></p><p>DynamoDB Streamsは、DynamoDBに対する項目の追加、変更、削除をイベントとして検出できる機能です。テーブルの項目が変更されるとすぐに、新しいレコードがテーブルのストリームに表示されます。AWS Lambda はストリームをポーリングし、新しいストリームレコードを検出すると、Lambda 関数を同期的に呼び出します。</p><p>参考: <a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Streams.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Streams.html</a></p><p>この手のAWSサービスに珍しくAt Least Onceだったり、順序制御がされていたりと何かと助かるサービスです。ストリームレコードは 24 時間後に自動的に削除されるので、ストリームのコンシューマ側のアプリの処理が追いつかない場合はデータロストする可能性があるので注意すべき、ってところが見落としやすいポイントでしょうか。</p><h2 id="DynamoDB-Streamsをリラン（再実行）したい時"><a href="#DynamoDB-Streamsをリラン（再実行）したい時" class="headerlink" title="DynamoDB Streamsをリラン（再実行）したい時"></a>DynamoDB Streamsをリラン（再実行）したい時</h2><p>DynamoDB StreamsはAWSのサービスだと珍しく <code>Exactly Once</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> の実行保証で、通常は後続にLambdaを呼び出します。</p><p>起動が保証されているとはいえ、アプリケーションが不具合を起こしたり、外部連携先のシステム都合でリランしてほしいという要望もあるかと思います（ありました）。</p><p>DynamoDB StreamsはKinesis Data Streamsのように、ストリームの開始位置を水平トリムや日付指定で行なうことができず、有効・無効の切り替えのみ可能です。</p><p>参考: <a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Streams.html#Streams.Enabling" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Streams.html#Streams.Enabling</a></p><p>そのため、ある日時から再度DynamoDB Streamsを再実行したい場合は、自前のスクリプトで対応する必要があります。</p><h2 id="イベントが再着火しない"><a href="#イベントが再着火しない" class="headerlink" title="イベントが再着火しない"></a>イベントが再着火しない</h2><p>しかし、以下1~2のようなスクリプトを作っても上手くDynamoDB Streamsが起動せず、後続のLambdaが動いてくれませんでした😭</p><ol><li>ストリームを再読み取りさせたい、DynamoDBの項目をScan</li><li>Scanして取得したItemをそのまま同じテーブルにPut</li></ol><p>ScanもPutも正しく成功しているのでなんでだろうって思ってましたが、ドキュメントを見返すと答えが出ていました。</p><h2 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h2><p>原因はドキュメントに書いてあるとおり、そのままでした。</p><blockquote><p>DynamoDB Streamsは、DynamoDBに対する項目の追加、変更、削除をイベントとして検出できる機能です</p></blockquote><p>とある通りです。<strong>項目の追加、変更、削除を検出する機能</strong>と書いていますね。Scanした項目をそのままPutするだけでは、追加、編集、削除ではないのでDynamoDB Streamsは起動しないのです。</p><p>何となくDynamoDB Streamsは、Put、Update、DeleteといったAPIアクションをキャプチャしてくれるイメージがありましたが、あくまで項目に対する書き換え操作が行われた場合のみに起動する機能が正しかったです。この仕様自体はOracleDBのCDC（チェンジデータキャプチャ）そのままなので違和感は無いので、そうだよね～って感じです。</p><p>そのため、以下のようなコードに書き換えました。</p><ol><li>ストリームを再読み取りさせたい、DynamoDBの項目をScan</li><li>ItemにRevisionといったフィールドを新規追加（存在すれば＋１する）</li><li>書き換えたItemを同じテーブルにPut</li></ol><p>上記でDynamoDB Streamsを再度して無事後続のLambdaまでデータを渡して再着火させることに成功しました✨</p><p>Goで書いたコードは以下のイメージです。簡易のため対象テーブルは指定されたハッシュキーでスキャン（正確にはクエリ）しています。</p><figure class="highlight go"><figcaption><span>main.go(サンプルコード)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/dynamodb"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"</span></span><br><span class="line"><span class="string">"github.com/rs/zerolog/log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">db = dynamodb.New(session.Must(session.NewSessionWithOptions(session.Options&#123;</span><br><span class="line">SharedConfigState: session.SharedConfigEnable,</span><br><span class="line">&#125;)))</span><br><span class="line">tableName    = os.Getenv(<span class="string">"DynamoTable"</span>)  <span class="comment">// リラン対象のテーブル</span></span><br><span class="line">hashKeyName  = os.Getenv(<span class="string">"HashKeyName"</span>)  <span class="comment">// リラン対象のハッシュキー名</span></span><br><span class="line">hashKeyValue = os.Getenv(<span class="string">"HashKeyValue"</span>) <span class="comment">// リラン対象のハッシュキー値</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := scanAndPut(context.Background()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error().Msgf(<span class="string">"%v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"finished"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scanAndPut</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> startKey <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">resp, err := scan(ctx, startKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to scan: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Info().Msgf(<span class="string">"scanCount: %v"</span>, <span class="built_in">len</span>(resp.Items))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> resp.Items &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> revision <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">if</span> err := dynamodbattribute.Unmarshal(v[<span class="string">"revision"</span>], &amp;revision); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"unmarshal: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">revision++</span><br><span class="line">marshal, _ := dynamodbattribute.Marshal(revision)</span><br><span class="line">v[<span class="string">"revision"</span>] = marshal</span><br><span class="line"><span class="keyword">if</span> err := put(ctx, v); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to put: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startKey = resp.LastEvaluatedKey</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(startKey) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scan</span><span class="params">(ctx context.Context, startKey <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue)</span> <span class="params">(*dynamodb.QueryOutput, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> db.QueryWithContext(ctx, &amp;dynamodb.QueryInput&#123;</span><br><span class="line">TableName:         aws.String(tableName),</span><br><span class="line">ExclusiveStartKey: startKey,</span><br><span class="line">ExpressionAttributeNames: <span class="keyword">map</span>[<span class="keyword">string</span>]*<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"#Hash"</span>: aws.String(hashKeyName),</span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeValues: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">":hash"</span>: &#123;</span><br><span class="line">S: aws.String(hashKeyValue),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">KeyConditionExpression: aws.String(<span class="string">"#Hash = :hash"</span>),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">put</span><span class="params">(ctx context.Context, v <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">_, err := db.PutItemWithContext(ctx, &amp;dynamodb.PutItemInput&#123;</span><br><span class="line">TableName: aws.String(tableName),</span><br><span class="line">Item:      v,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>サンプルコードは、3つの環境変数を持ってます。<br>利用する場合には環境変数の設定を忘れないようにしてください。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DynamoTable=&lt;Your Table Name&gt;</span><br><span class="line"><span class="built_in">export</span> HashKeyName=&lt;Hash Key Name fo Your Table&gt;</span><br><span class="line"><span class="built_in">export</span> DynamoTable=&lt;Hash Key Value fo Your Table&gt;</span><br><span class="line">go run main.go</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>DynamoDB StreamsからLambdaにわたす項目には、編集前の<code>OldImage</code>と 編集後の<code>NewImage</code> が存在します。</p><p>今回のリラン方法だと、OldImageは初回実行時と差分が生じるので、OldImageを利用したLambdaのリランは上手く行えません。DynamoDB Streamsで渡される項目については、Goであれば <a href="https://github.com/aws/aws-lambda-go/blob/master/events/dynamodb.go#L78" target="_blank" rel="noopener">https://github.com/aws/aws-lambda-go/blob/master/events/dynamodb.go#L78</a> あたりを確認ください。</p><h2 id="指定した日付のみをリランしたい場合のインデックス設計"><a href="#指定した日付のみをリランしたい場合のインデックス設計" class="headerlink" title="指定した日付のみをリランしたい場合のインデックス設計"></a>指定した日付のみをリランしたい場合のインデックス設計</h2><p>ある日付からといった指定がすでにハッシュキー・ソートキーの構造で可能であれば良いですが、そうでない限りはGSIでcreated_ymdといった日付を示す項目をもたせることが多いのではないでしょうか？</p><p>このGSIをDynamoDBのScanで読み取り＋Putすれば、日付単位のストリームの再実行ができそうです。</p><p>DynamoDB Streamsを利用したシステム設計を行う場合は、リランのしやすさも意識して、予めGSIを追加しておくのも良いかも知れません（費用とのトレードオフになりますが、いざという時に構えておくと良いかなと思います）</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>DynamoDB Streamsを同じデータで再実行させたい場合は、何かしらの項目を<strong>編集して</strong>再度Putする必要がある</li><li>リランのしやすさも設計時に織り込んでおき、必要に応じてGSIに日付項目などを追加しておくと良い</li><li>DynamoDB Streamsをイベントソースとして起動するLambdaが、OldImage（編集前の項目）を利用する設計になっていると、単純リランができなくなるので、別途考慮が必要</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html に Each stream record appears exactly once in the stream. とある</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXユニット真野です。&lt;/p&gt;
&lt;p&gt;タイトルのみで内容にあたりがつく、AWSお兄さんな方も多いかと思い
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
      <category term="DynamoDBStream" scheme="https://future-architect.github.io/tags/DynamoDBStream/"/>
    
  </entry>
  
  <entry>
    <title>DockerでRUNをまとめた方が良いとは限らない</title>
    <link href="https://future-architect.github.io/articles/20210121/"/>
    <id>https://future-architect.github.io/articles/20210121/</id>
    <published>2021-01-20T15:00:00.000Z</published>
    <updated>2021-01-21T02:24:28.323Z</updated>
    
    <content type="html"><![CDATA[<p>TIG/DXの渋川です。</p><p>ソフトウェアの世界では、ツールや言語の進歩があって、もはや古い知識になっているにも関わらず、古い知識がベストプラクティスと呼ばれて蔓延し続けている例があります。Dockerだと「RUNをまとめよう」というのがそうです。かつてはこれは常に行うべきプラクティスでしたが、現代だとそうじゃないケースもあり、デメリットもあります。</p><img src="/images/20210121/Moby-logo.png" class="img-middle-size"><blockquote><p><a href="https://www.docker.com/company/newsroom/media-resources" target="_blank" rel="noopener">https://www.docker.com/company/newsroom/media-resources</a></p></blockquote><h1 id="1-ただファイルが増えるだけのケースであれば気にしなくていい"><a href="#1-ただファイルが増えるだけのケースであれば気にしなくていい" class="headerlink" title="1. ただファイルが増えるだけのケースであれば気にしなくていい"></a>1. ただファイルが増えるだけのケースであれば気にしなくていい</h1><p>次の2つのファイルで実験してみます。ベースイメージに、10MBのファイルを作成するコマンドをふたつ並べたものです。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:bullseye-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dd <span class="keyword">if</span>=/dev/zero of=dummy1 bs=1M count=10</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dd <span class="keyword">if</span>=/dev/zero of=dummy2 bs=1M count=10</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:bullseye-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dd <span class="keyword">if</span>=/dev/zero of=dummy1 bs=1M count=10 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dd <span class="keyword">if</span>=/dev/zero of=dummy2 bs=1M count=10</span></span><br></pre></td></tr></table></figure><p>結果を見てみると、サイズは同じです。「Aを足す」「Bを足す」というレイヤーと、「AとBを足す」というレイヤー、どちらであっても差はありません。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;none&gt;        &lt;none&gt;        cc9f228f6862   5 seconds ago    89.1MB</span><br><span class="line">&lt;none&gt;        &lt;none&gt;        1c3789ba70ca   11 seconds ago   89.1MB</span><br></pre></td></tr></table></figure><h1 id="2-ファイルの削除時にのみ影響があるが、必要なファイルだけを引っこ抜くなら違いはない"><a href="#2-ファイルの削除時にのみ影響があるが、必要なファイルだけを引っこ抜くなら違いはない" class="headerlink" title="2. ファイルの削除時にのみ影響があるが、必要なファイルだけを引っこ抜くなら違いはない"></a>2. ファイルの削除時にのみ影響があるが、必要なファイルだけを引っこ抜くなら違いはない</h1><p>次の二つを比較してみましょう。2つファイルがあるが、1つは後から削除するというケースです。apt getしたあとに不要なファイルを消すとかそういうのでよく見かけますね。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:bullseye-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dd <span class="keyword">if</span>=/dev/zero of=dummy1 bs=1M count=10</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dd <span class="keyword">if</span>=/dev/zero of=dummy2 bs=1M count=10</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm dummy1</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:bullseye-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dd <span class="keyword">if</span>=/dev/zero of=dummy1 bs=1M count=10 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dd <span class="keyword">if</span>=/dev/zero of=dummy2 bs=1M count=10 &amp;&amp; rm dummy1</span></span><br></pre></td></tr></table></figure><p>今度は違いが出ました。最初のRUNを混ぜない方法では、途中のレイヤーの状態としてはdummy1ファイルが存在しています。そのため、その分サイズが大きくなってしまうのです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;none&gt;        &lt;none&gt;        7594cc6c4f07   About a minute ago   89.1MB</span><br><span class="line">&lt;none&gt;        &lt;none&gt;        1a6c1daf8eb5   About a minute ago   78.6MB</span><br></pre></td></tr></table></figure><p>ここまでが昔の話。今の時代（といってももう4年前？）からはマルチステージビルドがあります。最終的に必要なファイルはdummy2だけですので、実行用イメージはビルド用イメージからそのファイルを持ってきます。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:bullseye-slim as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dd <span class="keyword">if</span>=/dev/zero of=dummy1 bs=1M count=10</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dd <span class="keyword">if</span>=/dev/zero of=dummy2 bs=1M count=10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> debian:bullseye-slim as runner</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder dummy2 .</span></span><br></pre></td></tr></table></figure><p>RUNを連結してrmしたのと同じイメージサイズになりましたね。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;none&gt;        &lt;none&gt;        5398e862d3db   2 seconds ago   78.6MB</span><br></pre></td></tr></table></figure><p>もし、aptのパッケージになくてビルドを自前でやっている、オプションをチューニングしたビルドが必要みたいなケースでは<code>--prefix</code>で<code>/usr/local</code>とは別のところ、例えば<code>/opt/local</code>とかに<code>make install</code>をしておけば、最終イメージへのコピーはしやすく、マルチステージ化しやすいかと思います。</p><h1 id="まとめることのデメリット"><a href="#まとめることのデメリット" class="headerlink" title="まとめることのデメリット"></a>まとめることのデメリット</h1><p>1にも2にも、キャッシュが効かなくなってDockerの実行速度が落ちることです。連結したコマンドが途中で失敗したら、最初からやり直しです。</p><p>また、何かしらの原因で失敗したときに、&amp;&amp;で連結されたどのコマンドが原因で失敗したのかが一発では分からなくなります。&amp;&amp;を消して複数のRUNにして再実行し、デバッグが終わったらまた結合する・・・みたいになりがちです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>「あとから無駄ファイルを削除する」という場合には、その無駄ファイルを生成しているコマンドと連結すれば効果はありました。これはつまり、apt-get関連のコマンド群と、npm installなどのコマンド群を一緒に連結する意味はないということです。ファイル削除に意識して、「こことここはくっつけるべきだが、あとは効果がない」というのを吟味しましょう。</p><p>また、ファイル削除の場合でも、成果物だけ別のステージのイメージに転送してしまえば、無駄ファイルを削除する必要もありませんでした。なのでマルチステージビルドの最終的な成果物のイメージ以外ではRUNの連結は不要です。</p><p>マルチステージビルドの場合、実行に必要なファイル群の準備は別イメージ内で完了し、結果を実行イメージにコピーする使い方が一般的です。RUNはそのイメージ内部でyumとかapt-getで追加のライブラリなりツールをインストールする場合のみ使われるはずなので、&amp;&amp;の結合が登場するとしたらそこだけじゃないですかね。</p><p>なにもデメリットがなければ「シノゴの言わず結合せよ」でもいいとは思うんですが、デメリットもありますし、特に電力供給が逼迫しているというこの時期ですので、不要な結合をしてキャッシュを効かなくして消費電力を増やさないようにしたいものです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20201010/">「Go on DockerスタイルでのバックエンドAPI構築」というテーマでGo Conference’20 in Autumn SENDAIに登壇しました</a></li><li><a href="https://future-architect.github.io/articles/20200910/"><br>「2020年代のコンテナ時代のPythonアーキテクチャ&amp;デプロイ」というテーマでPyCon.jp 2020で発表してきました</a></li><li><a href="https://future-architect.github.io/articles/20200514/">仕事でPythonコンテナをデプロイする人向けのDockerfile (2): distroless編</a></li><li><a href="https://future-architect.github.io/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIG/DXの渋川です。&lt;/p&gt;
&lt;p&gt;ソフトウェアの世界では、ツールや言語の進歩があって、もはや古い知識になっているにも関わらず、古い知識がベストプラクティスと呼ばれて蔓延し続けている例があります。Dockerだと「RUNをまとめよう」というのがそうです。かつてはこれは常
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Androidのビルドバリアントをイチから理解する</title>
    <link href="https://future-architect.github.io/articles/20210120/"/>
    <id>https://future-architect.github.io/articles/20210120/</id>
    <published>2021-01-19T15:00:00.000Z</published>
    <updated>2021-02-01T02:09:22.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャー2年目の松井です。</p><p>昨今のコロナ事情の中、「なかなか外出できない…。そうだ、Androidアプリを作ろう。」となるエンジニアの方は多いのではないでしょうか？アプリを作っていると、ソースコードを分けるまではいかなくとも、微妙なバージョンの違いを表現したい場面に度々出くわします。例えば、無料版と有料版を管理したい、テスト環境用のアプリを分離したい、などです。</p><p>今回はそんな場面での強い味方、ビルドバリアントについて具体的なコードを交えて解説していきます！</p><p>お時間があれば、過去のAndroidに関する記事(<a href="https://future-architect.github.io/articles/20200330/">Firebase CrashlyticsでAndroidアプリのエラーログをさくっと収集する</a>)もぜひご覧ください。</p><h1 id="使用した環境"><a href="#使用した環境" class="headerlink" title="使用した環境"></a>使用した環境</h1><ul><li>Android Studio 3.6</li><li>Android端末 (HUAWEI P9 lite)</li><li>Androidバージョン 7.0</li><li>gradle plugin 3.5.3</li></ul><h1 id="そもそものビルドの仕組み"><a href="#そもそものビルドの仕組み" class="headerlink" title="そもそものビルドの仕組み"></a>そもそものビルドの仕組み</h1><p>Androidアプリを実行するには、リソースとソースコードをコンパイルしてAPKと呼ばれるパッケージを作成します。</p><p>その際にGradleを用いることでビルドプロセスの自動化、および柔軟なカスタムビルド設定ができるようになっています。<br>※以下の図は<a href="https://developer.android.com/studio/build?hl=ja" target="_blank" rel="noopener">公式ドキュメント</a>からの引用です。一連のソース群からAPKが作られるフローを示しています。</p><p><img src="/images/20210120/Android%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E6%B5%81%E3%82%8C.png" alt=""></p><p>ビルド設定用のGradleファイル <code>build.gradle</code> はプロジェクトレベル、モジュールレベルで2種類存在しています。</p><p><strong>プロジェクトレベル</strong>では、プロジェクト配下の全てのモジュールに適用される、アプリのビルドに必要なリポジトリや依存関係を定義します。<strong>モジュールレベル</strong>では、<code>build.gradle</code>の所属するモジュールに適用される依存関係や、カスタムビルドの設定を記述します。今回の主役であるビルドバリアントの設定もこちらで実施します。</p><p>複数モジュールにプロジェクトを分割するマルチモジュール構成の場合、水平方向・垂直方向の2通りの分割が考えられますが、軽く調べたところ、機能やレイヤーで分ける垂直方向の分割の実例が多いようです。</p><p>各モジュールがビルドファイルを持つことでモジュールごとのビルドやテストが可能なため、マルチモジュール構成では開発チームで役割分担しやすいなどのメリットがあります。</p><p>今回はシングルモジュール構成で話を進めます。<br>※以下の図は<a href="https://developer.android.com/studio/build?hl=ja" target="_blank" rel="noopener">公式ドキュメント</a>からの引用です。プロジェクトレベル、モジュールレベルごとに<code>build.gradle</code>が存在することがわかります。</p><img src="/images/20210120/Androidプロジェクトのディレクトリ構成.png" class="img-middle-size"><h1 id="ビルドバリアントとは"><a href="#ビルドバリアントとは" class="headerlink" title="ビルドバリアントとは"></a>ビルドバリアントとは</h1><p><a href="https://developer.android.com/studio/build/build-variants?hl=ja" target="_blank" rel="noopener">公式ドキュメント</a>を読むと以下のように書かれています。</p><blockquote><p>各ビルド バリアントは、ビルド可能なさまざまなバージョンのアプリを表しています。</p></blockquote><p>ビルドバリアントを指定すると、ソースコードに変更を加えることなく１つのモジュールから無料版/有料版、本番環境用/開発環境用などを切り替えてアプリをビルドできるようになります。一般的なウェブアプリケーションでいう環境変数に近いかもしれません。この存在がなければ、いちいち別のソースを書き換えてビルドしなければならず、開発やテストに不都合となることが想像できます。</p><p>このビルドバリアントはさらに<strong>ビルドタイプ</strong>と<strong>プロダクトフレーバー</strong>の組み合わせで定義されています。</p><p><strong>ビルドタイプ</strong>は、本番用or開発用など、開発のライフサイクルに応じてバージョンを切り替えるために設定します。Android Studioで新規モジュールを作成する際は、releaseとdebugのビルドタイプが自動で作成されます。さらに独自のビルドタイプを設定して管理することも可能です。ビルド時には最低一つのビルドタイプを指定する必要があります。</p><p><strong>プロダクトフレーバー</strong>は、ビルドタイプに加えてオプションでさらに柔軟なバージョン管理が必要な場合に使用します。</p><p>有料版or無料版の制御などに加え、公式ドキュメントでは、クライアントのAndroidSDKの最低バージョンに応じてプロダクトフレーバーを切り替える、というサンプルも記載されています。基本的な記述はビルドタイプと同様ですが、<code>flavorDimensions</code>を指定する必要があります。後述しますが、この<code>flavorDimensions</code>を用いることでさらに細かなバージョン管理を実現できます。最初に述べましたが、ビルドバリアントはビルドタイプとプロダクトフレーバーの組み合わせです。</p><p>releaseとdebugの2ビルドタイプ、有料版と無料版の2プロダクトフレーバーをもつモジュールでは、2×2の計4通りのビルドバリアントを利用できることを意味します。</p><table><thead><tr><th align="center">ビルドバリアント</th><th align="center">ビルドタイプ</th><th align="center">プロダクトフレーバー</th></tr></thead><tbody><tr><td align="center">#1</td><td align="center">release</td><td align="center">有料版</td></tr><tr><td align="center">#2</td><td align="center">release</td><td align="center">無料版</td></tr><tr><td align="center">#3</td><td align="center">debug</td><td align="center">有料版</td></tr><tr><td align="center">#4</td><td align="center">debug</td><td align="center">無料版</td></tr></tbody></table><p>具体的な使い方とアプリの挙動は、実際にソースを追いAndroid Studioからビルドして確認していきます。</p><h1 id="実際にビルドしてみる"><a href="#実際にビルドしてみる" class="headerlink" title="実際にビルドしてみる"></a>実際にビルドしてみる</h1><p>さて、実際にコードとアプリの挙動を見ながらビルドバリアントへの理解を深めていきます。</p><p>今回は、新規作成した<code>testApp</code>というモジュール配下に、メイン画面にヘッダーとテキストを表示するだけのシンプルなアプリを作成し、以下の3パターンについて確認していきます。<br><strong><a href="#-ビルドタイプ2通り">① ビルドタイプ2通り</a></strong><br><strong><a href="#-ビルドタイプ2通りプロダクトフレーバー2通りflavordimensionsa-2通り">② ビルドタイプ2通り、プロダクトフレーバー2通り(flavorDimensionsA: 2通り)</a>)</strong><br><strong><a href="#-ビルドタイプ2通りプロダクトフレーバー5通りflavordimensionsa-2通りflavordimensionsb-3通り">③ ビルドタイプ2通り、プロダクトフレーバー5通り(flavorDimensionsA: 2通り、flavorDimensionsB: 3通り)</a>)</strong></p><p>アプリの初期画面は以下のようになっています。<br><img src="/images/20210120/Screenshot_19700101-100351.png" class="img-small-size"></p><h2 id="①-ビルドタイプ2通り"><a href="#①-ビルドタイプ2通り" class="headerlink" title="① ビルドタイプ2通り"></a>① ビルドタイプ2通り</h2><p>一番シンプルなパターンです。</p><p>releaseとdebugの2通りのビルドタイプを設定します。モジュール配下の<code>build.gradle</code>ファイルは抜粋すると以下のようになっています。</p><figure class="highlight gradle"><figcaption><span>testApp/build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            applicationIdSuffix <span class="string">".debug"</span></span><br><span class="line">            debuggable <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略...</span></span><br></pre></td></tr></table></figure><p><code>applicationIdSuffix</code>は、applicationIDの末尾に指定した文字列を追加してくれるパラメータです。</p><p>AndroidはapplicationIDによって端末上でアプリが同一かどうかを識別しています。releaseとdebugでapplicationIDを変えることで、1つの端末上で2つのバージョンのアプリを共存させることができます。同一のapplcationIDであれば上書きされます。ユーザーの目には触れない点ですが、開発者側からするといちいちビルドしなくても端末上の操作だけで両方のバージョンを確認できるので、大切な設定になってきます。</p><p>そのほかのパラメータは、apkの軽量化、難読化、署名に関わるものですが、今回のスコープではないので割愛します。</p><p>さて、この設定でAndroid Studioでビルドしてみると、無事2つのビルドバリアント (release, debug) が作成されていことがわかります。プロダクトフレーバーは作成していないので、<strong>ビルドバリアント = ビルドタイプ</strong> となっています。</p><p><img src="/images/20210120/%E2%91%A0%E3%83%93%E3%83%AB%E3%83%89%E3%83%90%E3%83%AA%E3%82%A2%E3%83%B3%E3%83%88%E3%81%AF2%E3%81%A4.png" alt=""></p><p>しかしこのままアプリを立ち上げてもなんら違いはありません。debugかreleaseかに応じてアプリの内容を切り替えるには、もう一手間必要になってきます。<br>結論から言うと、<strong>ビルドタイプの名称をもつディレクトリを作成し、mainディレクトリと構成の齟齬が無いように差分のファイルを配置する</strong>ことが必要です。</p><p>文章で書いてもよくわからないので、具体的に見ていきます。</p><p>まず、こちらが現在のモジュール<code>testApp</code>のディレクトリ構成です。直下には先ほど編集したモジュールレベルの<code>build.gradle</code>がいます。</p><img src="/images/20210120/mainのディレクトリ構成.png" class="img-middle-size"><p>アプリのソースコードはsrc/main配下に格納されています。Main画面を表示する<code>MainActivity.java</code>はJava配下へ、画面のレイアウトを定義する<code>activity_main.xml</code>はres配下へ格納されています。</p><p>このsrc配下に、mainと同じ階層で、ビルドタイプの名前をもつディレクトリを作成し、ファイルを配置します。そうすることで、ビルドタイプのディレクトリ配下にmainと同じファイルが存在すれば、そちらが優先して実行されるようになります。</p><p>以下がビルドタイプdebugのディレクトリ配下に作成された<code>activity_main.xml</code>です。mainと同じ階層に配置されていることが確認できます。あとは、この新規作成したactivity_main.xmlを編集し、表示内容を変更します。</p><img src="/images/20210120/debugのディレクトリ構成.png" class="img-middle-size"><figure class="highlight xml"><figcaption><span>main/layout/activity_main.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> </span></span><br><span class="line"><span class="tag">    // 省略<span class="attr">...</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width="wrap_content"</span><br><span class="line">        android:layout_height="wrap_content"</span><br><span class="line">        android:text="Hello World!"  // ここを書き換える</span><br><span class="line">        app:layout_constraintBottom_toBottomOf="parent"</span><br><span class="line">        app:layout_constraintLeft_toLeftOf="parent"</span><br><span class="line">        app:layout_constraintRight_toRightOf="parent"</span><br><span class="line">        app:layout_constraintTop_toTopOf="parent" /&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>debug/layout/activity_main.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> </span></span><br><span class="line"><span class="tag">    // 省略<span class="attr">...</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width="wrap_content"</span><br><span class="line">        android:layout_height="wrap_content"</span><br><span class="line">        android:text="This is debug!"  // ここを書き換えた</span><br><span class="line">        app:layout_constraintBottom_toBottomOf="parent"</span><br><span class="line">        app:layout_constraintLeft_toLeftOf="parent"</span><br><span class="line">        app:layout_constraintRight_toRightOf="parent"</span><br><span class="line">        app:layout_constraintTop_toTopOf="parent" /&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>すると、ビルドバリアント(=ビルドタイプ)debugでビルドした際に、表示内容が変化したことが確認できます。 releaseは対応するディレクトリとソースを作成していないので、main配下の<code>activity_main.xml</code>が呼び出されます。</p><table><thead><tr><th><img src="/images/20210120/debug%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th><th><img src="/images/20210120/release%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th></tr></thead><tbody><tr><td>debugでビルド</td><td>releaseでビルド</td></tr></tbody></table><p>ここまでのまとめです。</p><table><thead><tr><th align="center">ビルドバリアント</th><th align="center">ビルドタイプ</th><th align="center">プロダクトフレーバー</th></tr></thead><tbody><tr><td align="center">debug</td><td align="center">debug</td><td align="center">-</td></tr><tr><td align="center">release</td><td align="center">release</td><td align="center">-</td></tr></tbody></table><h2 id="②-ビルドタイプ2通り、プロダクトフレーバー2通り-flavorDimensionsA-2通り"><a href="#②-ビルドタイプ2通り、プロダクトフレーバー2通り-flavorDimensionsA-2通り" class="headerlink" title="② ビルドタイプ2通り、プロダクトフレーバー2通り(flavorDimensionsA: 2通り)"></a>② ビルドタイプ2通り、プロダクトフレーバー2通り(flavorDimensionsA: 2通り)</h2><p>次は、プロダクトフレーバーも組み合わせてビルドバリアントを構成してみます。<br>有料版と無料版でバージョンを切り替えられるようプロダクトフレーバーを設定してみましょう。<br><code>build.gradle</code>は抜粋すると以下のようになっています。</p><figure class="highlight gradle"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            applicationIdSuffix <span class="string">".debug"</span></span><br><span class="line">            debuggable <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flavorDimensions <span class="string">"plan"</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        paid &#123;</span><br><span class="line">            dimension <span class="string">"plan"</span></span><br><span class="line">        &#125;</span><br><span class="line">        free &#123;</span><br><span class="line">            dimension <span class="string">"plan"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略...</span></span><br></pre></td></tr></table></figure><p>基本形はビルドタイプと同様ですが、<code>flavorDimensions</code>が定義されているのが異なる点です。さらに各プロダクトフレーバーの要素がどの<code>flavorDimensions</code>に属しているのかを、<code>dimension</code>パラメータを用いて明示してやります。</p><p><code>flavorDimensions</code>はその名の通りプロダクトフレーバーの次元を管理するもので、同一次元の要素から一つずつ選択して、全体のプロダクトフレーバーを構成する、という使い方をします。<br>これは③の実例をみるともう少しわかりやすくなると思います。</p><p>このファイルをビルドすると、以下のようにビルドタイプ × プロダクトフレーバーの組み合わせで4パターンのビルドバリアントが作成されていることが確認できます。</p><p>ビルドバリアントの命名規則は、キャメルケースで<strong>プロダクトフレーバー + ビルドタイプ</strong>となります。</p><p><img src="/images/20210120/%E2%91%A1%E3%83%93%E3%83%AB%E3%83%89%E3%83%90%E3%83%AA%E3%82%A2%E3%83%B3%E3%83%88%E3%81%AF4%E3%81%A4.png" alt=""></p><p>プロダクトフレーバーにおいても、ビルドタイプと同様に、<strong>プロダクトフレーバーの名称をもつディレクトリを作成し、mainディレクトリと構成の齟齬が無いように差分のファイルを配置する</strong>ことでソースとビルドバリアントを連携させることが可能です。</p><p>さて、先ほどと同様に、ディレクトリを切ってプロダクトフレーバー特有のソースを格納します。無料版のみヘッダータイトルに「free」と入るよう実装してみましょう。<code>free/value/strings.xml</code>を作成し、タイトルの末尾に「free」を追記します。</p><img src="/images/20210120/freeのディレクトリ構成.png" class="img-middle-size"><figure class="highlight xml"><figcaption><span>main/value/strings.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">string</span>&gt;</span>   //ここを書き換える</span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>free/value/strings.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>test[free]<span class="tag">&lt;/<span class="name">string</span>&gt;</span>   //ここを書き換えた</span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>freeDebugおよびfreeReleaseでビルドすると、タイトルに「free」がくっついていることが確認できました。<br>一方、paid側のビルドバリアントはディレクトリを切っていないため、main配下のリソースが呼ばれています。</p><table><thead><tr><th><img src="/images/20210120/freeDebug%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th><th><img src="/images/20210120/freeRelease%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th><th><img src="/images/20210120/paidDebug%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt="paidDebugでビルド"></th><th><img src="/images/20210120/paidRelease%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th></tr></thead><tbody><tr><td>freeDebugでビルド</td><td>freeReleaseでビルド</td><td>paidDebugでビルド</td><td>paidReleaseビルド</td></tr></tbody></table><p>ここで、こんな疑問が生じるかもしれません。</p><p><strong>ビルドタイプ、プロダクトフレーバーで同一のファイルを編集したらどのように表示されるのか？</strong></p><p>検証してみましょう。<br>freeディレクトリ配下でも、<code>activity_main.xml</code>を作成して編集します。これは先ほどdebug配下でも編集していたファイルです。<br><img src="/images/20210120/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-01-16_21.04.12.png" alt=""></p><figure class="highlight xml"><figcaption><span>free/layout/activity_main.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> </span></span><br><span class="line"><span class="tag">    // 省略<span class="attr">...</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width="wrap_content"</span><br><span class="line">        android:layout_height="wrap_content"</span><br><span class="line">        android:text="This is free!"  // ここを書き換えた</span><br><span class="line">        app:layout_constraintBottom_toBottomOf="parent"</span><br><span class="line">        app:layout_constraintLeft_toLeftOf="parent"</span><br><span class="line">        app:layout_constraintRight_toRightOf="parent"</span><br><span class="line">        app:layout_constraintTop_toTopOf="parent" /&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>そしてfreeDebugのビルドバリアントでビルドすると…</p><img src="/images/20210120/freeDebugでビルド2.png" class="img-small-size"><p>「This is debug!」つまりビルドタイプ配下のファイルが優先されました。</p><p>実は同じソースについての優先度は<a href="https://developer.android.com/studio/build/build-variants?hl=ja#sourceset-build" target="_blank" rel="noopener">Androidで定義されており</a>、<strong>ビルドタイプ -&gt; プロダクトフレーバー -&gt; main</strong> のディレクトリ順でファイルが優先されます。</p><p>なるほど、ビルドタイプが優先されることはわかった、ただ、どうしても <strong>freeかつdebugの時には「This is free!」と表示させたい</strong>。そんな需要もあるかもしれません。<br>そんな場合は、freeDebugという<strong>ビルドバリアント名称のディレクトリを作成することで、ビルドタイプに優先させることができます。</strong><br>試しに先ほどのfree配下の<code>activity_main.xml</code>ファイルをfreeDebugディレクトリ配下に移動してみましょう。ディレクトリ構成はこのようになります。</p><p><img src="/images/20210120/freeDebug%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%90.png" alt=""></p><p>そして改めてfreeDebugでビルドすると…<br>無事に「This is free!」と表示され、ビルドタイプに優先することが確認できました。</p><img src="/images/20210120/freeDebugでビルド3.png" class="img-small-size"><p>改めてソースの優先順位は、<br><strong>ビルドバリアント -&gt; ビルドタイプ -&gt; プロダクトフレーバー -&gt; main</strong><br>のディレクトリ順となります。</p><p>ここまでのまとめです。</p><table><thead><tr><th align="center">ビルドバリアント</th><th align="center">ビルドタイプ</th><th align="center">プロダクトフレーバー</th></tr></thead><tbody><tr><td align="center">freeDebug</td><td align="center">debug</td><td align="center">free</td></tr><tr><td align="center">freeRelease</td><td align="center">release</td><td align="center">free</td></tr><tr><td align="center">paidDebug</td><td align="center">debug</td><td align="center">paid</td></tr><tr><td align="center">paidRelease</td><td align="center">release</td><td align="center">paid</td></tr></tbody></table><h2 id="③-ビルドタイプ2通り、プロダクトフレーバー5通り-flavorDimensionsA-2通り、flavorDimensionsB-3通り"><a href="#③-ビルドタイプ2通り、プロダクトフレーバー5通り-flavorDimensionsA-2通り、flavorDimensionsB-3通り" class="headerlink" title="③ ビルドタイプ2通り、プロダクトフレーバー5通り(flavorDimensionsA: 2通り、flavorDimensionsB: 3通り)"></a>③ ビルドタイプ2通り、プロダクトフレーバー5通り(flavorDimensionsA: 2通り、flavorDimensionsB: 3通り)</h2><p>最後のパターン、プロダクトフレーバーのdimensionが複数ある場合です。<br>そんな複雑な構成は実務で生じるのか、と疑問に思うかもしれませんが、今回この記事を書くに至った理由が、実際のプロジェクトの現場でこの構成のビルドが必要になったためでした。</p><p>当該のプロジェクトではプロダクトフレーバーを用いて開発、ステージング、本番環境ごとのアプリを作成していました。<br>そこに、アプリで扱う商品のブランドごとにバージョン管理したいと言う要件が生じたため、さらにブランドのdimensionを追加してバージョン管理していました。</p><p>今回の検証では、<code>color</code> dimensionを追加して、色ごとにバージョン管理できるように設定してみます。<br>build.gradleファイルは抜粋すると以下のようになっています。</p><figure class="highlight gradle"><figcaption><span>testApp/build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            applicationIdSuffix <span class="string">".debug"</span></span><br><span class="line">            debuggable <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flavorDimensions <span class="string">"plan"</span>, <span class="string">"color"</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        paid &#123;</span><br><span class="line">            dimension <span class="string">"plan"</span></span><br><span class="line">        &#125;</span><br><span class="line">        free &#123;</span><br><span class="line">            dimension <span class="string">"plan"</span></span><br><span class="line">        &#125;</span><br><span class="line">        purple &#123;</span><br><span class="line">            dimension <span class="string">"color"</span></span><br><span class="line">        &#125;</span><br><span class="line">        green &#123;</span><br><span class="line">            dimension <span class="string">"color"</span></span><br><span class="line">        &#125;</span><br><span class="line">        red &#123;</span><br><span class="line">            dimension <span class="string">"color"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略...</span></span><br></pre></td></tr></table></figure><p>このように<code>flavorDimensions</code>はカンマで区切ることで複数定義できます。<br>さて、これをビルドすると… だんだん複雑になってきましたが、ビルドタイプ × プロダクトフレーバー(plan) × プロダクトフレーバー(color) の組み合わせで12通りのビルドバリアントが作成されました。</p><p><img src="/images/20210120/%E2%91%A2%E3%83%93%E3%83%AB%E3%83%89%E3%83%90%E3%83%AA%E3%82%A2%E3%83%B3%E3%83%8812%E9%80%9A%E3%82%8A.png" alt=""></p><p>ここまでくると、<code>flavorDimensions</code>のいう次元の意味が見えてきたのではないかと思います。各dimensionから組み合わせで1つずつ選択して、プロダクトフレーバーが構成されています。</p><p>ビルドバリアントの名称は、キャメルケースで<strong>プロダクトフレーバー(dimensionA) + プロダクトフレーバー(dimensionB) + ビルドタイプ</strong> となっています。</p><p>では早速プロダクトフレーバーごとのディレクトリを作成していきましょう。 今回はgreen, redのバージョンの<code>res/values/color.xml</code>を編集して、ヘッダーの色を変更します。</p><p>ディレクトリ構成はこのようになっています。</p><img src="/images/20210120/greenredのディレクトリ構成.png" class="img-middle-size"><figure class="highlight xml"><figcaption><span>main/value/colors.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#6200EE<span class="tag">&lt;/<span class="name">color</span>&gt;</span>  //ここを書き換える</span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#3700B3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#03DAC5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>green/value/colors.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#4CAF50<span class="tag">&lt;/<span class="name">color</span>&gt;</span>  //ここを書き換えた to Green</span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#3700B3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#03DAC5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>red/value/colors.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#F44336<span class="tag">&lt;/<span class="name">color</span>&gt;</span>  //ここを書き換えた to Red</span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#3700B3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#03DAC5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>freeGreenDebug、freeRedDebug、paidGreenDebug、paidRedDebug、でビルドすることで、元の紫色のヘッダーがそれぞれ緑、赤になることが確認できました。<br>purpleについては、ディレクトリを作成していないためにmainのソースが呼ばれており、ヘッダーは元の色のままです。<br>※Releaseも同様のため割愛します。</p><table><thead><tr><th><img src="/images/20210120/freeGreenDebug%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th><th><img src="/images/20210120/freeRedDebug%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th><th><img src="/images/20210120/freePurpleDebug%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th><th><img src="/images/20210120/paidGreenDebug%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th><th><img src="/images/20210120/paidRedDebug%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th><th><img src="/images/20210120/paidPurpleDebug%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89.png" alt=""></th></tr></thead><tbody><tr><td>freeGreenDebugでビルド</td><td>freeRedDebugでビルド</td><td>freePurpleDebugでビルド</td><td>paidGreenDebugでビルド</td><td>paidRedDebugビルド</td><td>paidPurpleDebugでビルド</td></tr></tbody></table><p>さて、ここでも先ほどと同様の疑問が生じます。</p><p><strong>異なるflavorDimensionsで同一のファイルを編集したらどのように表示されるのか？</strong></p><p>先ほどからの類推で何となく検討はつきますが、検証していきましょう。<br><code>color</code>dimensionのプロダクトフレーバーであるgreenディレクトリ配下で、<code>strings.xml</code>を編集します。<br>これは先ほど<code>plan</code>dimensionのプロダクトフレーバーであるfreeディレクトリ配下でも編集していた、ヘッダータイトルを決めていたファイルです。</p><p><img src="/images/20210120/green%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%902.png" alt=""></p><figure class="highlight xml"><figcaption><span>green/value/strings.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>test[green]<span class="tag">&lt;/<span class="name">string</span>&gt;</span>   //ここを書き換えた</span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>そしてfreeGreenDebugのビルドバリアントでビルドすると…</p><img src="/images/20210120/Screenshot_19700101-115109.png" class="img-small-size"><p>「test[free]」つまりfree (1つ目のdimension)ディレクトリ配下のファイルが優先されました。</p><p>プロダクトフレーバーでは、<strong>記述したdimensionの順でディレクトリの優先度が決まる</strong>ことが確認できました。仮に<code>flavorDimensions &quot;color&quot;, &quot;plan&quot;</code> のように記載するdimensionの順序を逆転させれば、colorディレクトリ配下のファイルが優先されるようになります。先ほどと繰り返しになるので検証は割愛しますが、プロダクトフレーバー全体のディレクトリfreeGreenなどを作成することで、各dimensionのディレクトリに優先させることができます。</p><p>改めてリソースの優先順位は、<br><strong>ビルドバリアント -&gt; ビルドタイプ -&gt; プロダクトフレーバー(全体) -&gt; プロダクトフレーバー(個々のdimension) -&gt; main</strong><br>のディレクトリ順となります。</p><p>ここまでのまとめです。</p><table><thead><tr><th align="center">ビルドバリアント</th><th align="center">ビルドタイプ</th><th align="center">プロダクトフレーバー</th><th align="center">dimensionA(plan)</th><th align="center">dimensionB(color)</th></tr></thead><tbody><tr><td align="center">freeGreenDebug</td><td align="center">debug</td><td align="center">freeGreen</td><td align="center">free</td><td align="center">green</td></tr><tr><td align="center">freeGreenRelease</td><td align="center">release</td><td align="center">freeGreen</td><td align="center">free</td><td align="center">green</td></tr><tr><td align="center">freeRedDebug</td><td align="center">debug</td><td align="center">freeRed</td><td align="center">free</td><td align="center">red</td></tr><tr><td align="center">freeRedRelease</td><td align="center">release</td><td align="center">freeRed</td><td align="center">free</td><td align="center">red</td></tr><tr><td align="center">freePurpleDebug</td><td align="center">debug</td><td align="center">freePurple</td><td align="center">free</td><td align="center">purple</td></tr><tr><td align="center">freePurpleRelease</td><td align="center">release</td><td align="center">freePurple</td><td align="center">free</td><td align="center">purple</td></tr><tr><td align="center">paidGreenDebug</td><td align="center">debug</td><td align="center">paidGreen</td><td align="center">paid</td><td align="center">green</td></tr><tr><td align="center">paidGreenRelease</td><td align="center">release</td><td align="center">paidGreen</td><td align="center">paid</td><td align="center">green</td></tr><tr><td align="center">paidRedDebug</td><td align="center">debug</td><td align="center">paidRed</td><td align="center">paid</td><td align="center">red</td></tr><tr><td align="center">paidRedRelease</td><td align="center">release</td><td align="center">paidRed</td><td align="center">paid</td><td align="center">red</td></tr><tr><td align="center">paidPurpleDebug</td><td align="center">debug</td><td align="center">paidPurple</td><td align="center">paid</td><td align="center">purple</td></tr><tr><td align="center">paidPurpleRelease</td><td align="center">release</td><td align="center">paidPurple</td><td align="center">paid</td><td align="center">purple</td></tr></tbody></table><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はAndroidのビルドバリアントについて実コードを交えながら解説しました。<br>ビルドバリアントの有用性、使い方について理解を深めていただけたなら幸いです。<br>最後に、参考として今回作成したtestAppモジュール配下の<code>build.gradle</code>の全体を載せておきます。</p><figure class="highlight gradle"><figcaption><span>testApp/build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">29</span></span><br><span class="line">    buildToolsVersion <span class="string">"29.0.3"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.example.test"</span></span><br><span class="line">        minSdkVersion <span class="number">24</span></span><br><span class="line">        targetSdkVersion <span class="number">29</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            applicationIdSuffix <span class="string">".debug"</span></span><br><span class="line">            debuggable <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flavorDimensions <span class="string">"plan"</span>, <span class="string">"color"</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        paid &#123;</span><br><span class="line">            dimension <span class="string">"plan"</span></span><br><span class="line">        &#125;</span><br><span class="line">        free &#123;</span><br><span class="line">            dimension <span class="string">"plan"</span></span><br><span class="line">        &#125;</span><br><span class="line">        purple &#123;</span><br><span class="line">            dimension <span class="string">"color"</span></span><br><span class="line">        &#125;</span><br><span class="line">        green &#123;</span><br><span class="line">            dimension <span class="string">"color"</span></span><br><span class="line">        &#125;</span><br><span class="line">        red &#123;</span><br><span class="line">            dimension <span class="string">"color"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'androidx.appcompat:appcompat:1.2.0'</span></span><br><span class="line">    implementation <span class="string">'androidx.constraintlayout:constraintlayout:1.1.3'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.ext:junit:1.1.2'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.3.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>それではみなさま、良きAndroidライフを！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.android.com/studio/build?hl=ja" target="_blank" rel="noopener">https://developer.android.com/studio/build?hl=ja</a></li><li><a href="https://developer.android.com/studio/build/build-variants?hl=ja" target="_blank" rel="noopener">https://developer.android.com/studio/build/build-variants?hl=ja</a></li><li><a href="https://iti.hatenablog.jp/entry/2015/06/22/084303" target="_blank" rel="noopener">https://iti.hatenablog.jp/entry/2015/06/22/084303</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、フューチャー2年目の松井です。&lt;/p&gt;
&lt;p&gt;昨今のコロナ事情の中、「なかなか外出できない…。そうだ、Andro
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Android" scheme="https://future-architect.github.io/tags/Android/"/>
    
      <category term="BuildVariant" scheme="https://future-architect.github.io/tags/BuildVariant/"/>
    
      <category term="Gradle" scheme="https://future-architect.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>プラントエンジニアのオレオレリモートワーク環境</title>
    <link href="https://future-architect.github.io/articles/20210119/"/>
    <id>https://future-architect.github.io/articles/20210119/</id>
    <published>2021-01-18T15:00:00.000Z</published>
    <updated>2021-01-19T00:53:18.578Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20210118/">リモートワーク環境連載</a>の1弾目です</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>ご安全に。TIG/DXユニットの栗田です。</p><p>フューチャーでの全社的にリモートワークがはじまって久しく経ちます。社内のいろいろな人が思い思いの方法で環境を構築していますが、今回は私の例をご紹介したいと思います。</p><p>本文章の前半では、環境を考えていくにあたってどのような前提のもとでどんな考え方をしていったかを記載しています。後半では実際の機器の配置や使っている機器のリンクについても可能な範囲で記載しています。</p><p>「前置きはいいから何使っているか教えて！」という場合は、前半を飛ばして後半からお読みください。</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>一言でリモートワークといってもそれぞれを取り巻く環境は大きく違います。そこでここでは、私という人間をペルソナ化し、こういう人間がどのような環境を整えているかという観点で説明します。</p><ul><li>都内在住（1K）の独身成人男性</li><li>PCと書籍が荷物の多数を占める</li><li>忙しくなってくると部屋の掃除サボりがち</li><li>部屋の収納が少ない</li></ul><h1 id="環境の考え方"><a href="#環境の考え方" class="headerlink" title="環境の考え方"></a>環境の考え方</h1><p>今の場所に引っ越してきた時点から、自宅で趣味開発をする前提でデスクはじめ作業環境を構築していました。そのためリモートワーク開始前から、比較的リラックスして作業できる環境を整えていました。</p><h2 id="一箇所で複数作業を同時に扱えること"><a href="#一箇所で複数作業を同時に扱えること" class="headerlink" title="一箇所で複数作業を同時に扱えること"></a>一箇所で複数作業を同時に扱えること</h2><p>最も重要な事柄であり、リモートワーク環境を整えるにあたって部屋が1Kなので複数の作業場所をとることはできません。これは他の多くの方もそうだと考えますが、これまで持っていた作業環境で仕事もできるようにしました。</p><p>私が所有し、一つの机の上で切り替えるようにしているのは以下です。</p><ul><li>【私物】Desktop Windows PC<ul><li>普段作業用途（Web閲覧など）&amp;ゲーム用</li><li>自宅Linuxサーバへログインして作業することも</li></ul></li><li>【私物】Mac Book Air: <ul><li>個人開発用</li><li>コロナ前は勉強会へ持っていったりしていたメインPC。</li></ul></li><li>【仕事】Mac Book Pro<ul><li>仕事開発用</li><li>複数Docker環境を立てて開発するにはUnix系の環境が最強。</li></ul></li><li>【仕事】Notebook Windows PC<ul><li>工場系の仕事しているとWinじゃないとソフトが対応していないことがままある</li><li>事務作業でも利用</li></ul></li></ul><p>上記以外にも私用のマシンは複数ありますが、机に座って扱うのは上記4つでほぼほぼ収束します。</p><h2 id="モニタの数"><a href="#モニタの数" class="headerlink" title="モニタの数"></a>モニタの数</h2><p>エンジニアの方であれば多く共感いただけると思いますが、もはやマルチモニタは必須です。</p><p>複数の資料を見ながら開発したり別の資料を作るには、表示できる画面の解像度が威力を発揮するのは明白です。しかしだからといってモニタをたくさん設置すればよいわけではなく、PCによって同時に出力できるモニタの数には限界があります。</p><p>特に私の場合、私用デスクトップがHDMIとDisplayPortの構成であったことと、仕事用のMBPが外部モニタ出力が2枚までのモデルであること、そして1kにおける机のサイズを考慮して、モニタは2枚をおいて、ノートPCを使う場合は3枚画面構成とするようにしました。</p><p>また、具体的な利用ケースは後述しますが、モニタ2枚それぞれに対して別のマシンをつなげて表示することもあるため、スピーカーが内蔵あるいはモニタ自体に外付けできるものにしました。</p><h2 id="デスクと椅子"><a href="#デスクと椅子" class="headerlink" title="デスクと椅子"></a>デスクと椅子</h2><p>紙にものを書くことがままあるため、机は大きいほうが好みでした。</p><p>しかし、都内の1kという部屋事情から、大きな机を置くことはできず、平均的な120 x 60cmの机にしました。このとき、机の上には色々本や小物を置きたいと考えていたので、本棚などがついているタイプで探しました。</p><p>椅子についてですが、肘掛けとヘッドレストがあること、背もたれ・肘掛け・椅子の高さを動かせるを条件に探しました。</p><p>前者ですが、長時間座っているため腰回りに優しいことはもちろんですが、しっかり背中を椅子に預けてリラックスするために腕と頭をおきたいことが理由です。学生時代や前職においてヘッドレストのない椅子を使っていましたが、長時間作業していると首が痛いという実績があったことも理由です。</p><p>後者については、各モニタと目線の高さが理由です。モニタの最上部が目線より上にあるとまぶたが開きっぱなしになるため目が乾燥しがちになるため、モニタ自体は目線より下にあるように配置したいです。しかし、机上のモニタをメインに使うケースと、ノートPCのモニタをメインに使うケースで、必要となる目線の高さが異なります。そのため、椅子の高さがある程度可変であることを重要視しました。</p><h2 id="カメラワーク"><a href="#カメラワーク" class="headerlink" title="カメラワーク"></a>カメラワーク</h2><h3 id="自分の顔、下から撮るか上から撮るか"><a href="#自分の顔、下から撮るか上から撮るか" class="headerlink" title="自分の顔、下から撮るか上から撮るか"></a>自分の顔、下から撮るか上から撮るか</h3><p>ノートPCのカメラはモニタの上についていますが、普通にPCを使う形になると、カメラが顔を見上げる形になります。</p><p>光の加減もありますが顔が暗い印象が出やすくなりますし、見下ろすような形になるのはあまりよろしくありません。また、カメラを意識しても、結局モニタを見ていると目線がカメラからずれるため、顔を合わせたコミュニケーションと比べると少し視線が気になることがあります。それくらいであれば、カメラを外付けのものにし、さらに目線から思い切りずらした場所に決め、最終的には斜め上から撮影する形としました。</p><h3 id="見せられる場所と見せたくない場所"><a href="#見せられる場所と見せたくない場所" class="headerlink" title="見せられる場所と見せたくない場所"></a>見せられる場所と見せたくない場所</h3><p>斜め上から撮影するとなると、今度は足元や机の上が映りやすくなります。</p><p>しかし、片付けが得意ではない自分からすると机の上や床が見えるのが必ずしもよくない時間帯があります。もちろん、meetやzoomにバーチャル背景機能があることは知っていますが、それらの機能はマシンのパワーを食いますし、ツールとマシンの組み合わせによってはパワー不足で対応していないことがあるので、考慮する必要がありました（特に私用のMBAはCore-i5なのですが、zoomで仮想背景を使うにはブルースクリーンをちゃんと用意する必要がありました）。</p><p>そこで、2つのことを意識しました。</p><p>1つ目は、カメラの方向の背景に棚を配置することです。比較的整理整頓されている棚であれば、ミーティングの背景としても不自然ではありません。<br>その上で棚がごちゃごちゃしているか、あるいは見せたくないなどあれば、棚に布をかぶせて隠します。</p><p>2つ目は、ものをなるべくものを机と同じ側に置くことです。机と同じ側であればカメラからの死角になりますので、多少ごちゃごちゃしていてもわかりません。<br>というか、私の机周りはカメラの死角が非常にごちゃごちゃしています。</p><h3 id="ライティング"><a href="#ライティング" class="headerlink" title="ライティング"></a>ライティング</h3><p>顔を明るくするために円形の卓上女優ライトが一部で話題になりましたが、普通の卓上ライトを机の上部においても十分かと考えています。</p><h2 id="音声"><a href="#音声" class="headerlink" title="音声"></a>音声</h2><p>マイクについてMacであれば内蔵マイクが優秀ですが、Windowsだと機体差があります。</p><p>また、外付けキーボードを使っているケースなどはそもそもマシン自体が離れた位置に置くことになるため、マイクへの音声入力が悪くなります。そのため、マイクは別で用意できるよう考えました。</p><p>その上で音声ですが、一人暮らしであっても仕事には守秘義務がある内容もありますので、音漏れしないようスピーカーではなくマイク付きヘッドホンにしました。イヤホンだと耳の中が痛くなってしまうのと、前述のようにマイクが別で必要だったのと、あとは若干の趣味です。</p><h1 id="環境紹介-基本となる配置3パターン"><a href="#環境紹介-基本となる配置3パターン" class="headerlink" title="環境紹介/基本となる配置3パターン"></a>環境紹介/基本となる配置3パターン</h1><h2 id="私用Windows-Desktop"><a href="#私用Windows-Desktop" class="headerlink" title="私用Windows Desktop"></a>私用Windows Desktop</h2><p>最も基本となる配置がこちらです。</p><p>机は左に本棚と小物だなを構えたタイプで、そこには高さを合わせるように棚とPC（Linux）がおいてあり、あとはモニタがおいてあるのみです。なお、図の上では省いていますがメインモニタの後ろにスピーカーを置いて、メインモニタの音声はここに出力しています。右のFHDは斜めに配置してあり、その上にWebカメラを設置しています。この画角だと、机の上が基本死角となりますので、結果として油断して机の上は気づいたらごちゃごちゃしています（なので、今回も写真はなしです）。</p><p>一方で背中側が足元近くまで見えてしまうことがあるため、画角を調整してあまり足元が映らず、そして背中側には棚を配置してさらに上から布をかぶせています。</p><p><img src="/images/20210119/%E3%83%86%E3%82%99%E3%82%B9%E3%82%AF%E7%89%A9%E7%90%86%E6%A7%8B%E6%88%90%E5%9B%B3_default.png" alt=""></p><p><img src="/images/20210119/%E3%83%86%E3%82%99%E3%82%B9%E3%82%AF%E3%82%AB%E3%83%A1%E3%83%A9%E7%94%BB%E8%A7%92.png" alt=""></p><h2 id="仕事用MBP-私用MBA"><a href="#仕事用MBP-私用MBA" class="headerlink" title="仕事用MBP/私用MBA"></a>仕事用MBP/私用MBA</h2><p>仕事するとき、開発やその他基本となる位置構成はこの形です。</p><p>MBPが机の上に登場し、モニタを傾けて作業しています。ここまでおいてしまうと、ほぼほぼ机の上にスペースはなくなり、キーボードを叩くのがせいぜいです。<br>なお、私用のMBAなどを使うときも、この形になります。</p><p><img src="/images/20210119/%E3%83%86%E3%82%99%E3%82%B9%E3%82%AF%E7%89%A9%E7%90%86%E6%A7%8B%E6%88%90%E5%9B%B3_%E4%BB%95%E4%BA%8B%E7%94%A8MBP.png" alt=""></p><h2 id="仕事用WindowsノートPC"><a href="#仕事用WindowsノートPC" class="headerlink" title="仕事用WindowsノートPC"></a>仕事用WindowsノートPC</h2><p>仕事用のWindowsノートPCを使うときは、外付けキーボードを使いたいがために、PCスタンドを立てて横にPCを寄せます。正直PCがギリギリの位置になるため個人的にはあまり好ましいスタイルではないですが、仕事中気分転換になります。</p><p><img src="/images/20210119/%E3%83%86%E3%82%99%E3%82%B9%E3%82%AF%E7%89%A9%E7%90%86%E6%A7%8B%E6%88%90%E5%9B%B3_%E4%BB%95%E4%BA%8B%E7%94%A8WinPC.png" alt=""></p><h1 id="実際に使用している道具"><a href="#実際に使用している道具" class="headerlink" title="実際に使用している道具"></a>実際に使用している道具</h1><h2 id="デスク：山善MRPE-1260"><a href="#デスク：山善MRPE-1260" class="headerlink" title="デスク：山善MRPE-1260"></a>デスク：山善MRPE-1260</h2><p>部屋のサイズと荷物の関係から調整して選んだデスクがこちらです。</p><p>可能であればもっと大きなサイズだと作業スペースが十二分に取れたのですが、現状こちらで最低限のサイズは確保できています。どれくらいのスペースが確保できているかというと、前述の図に示しているようにモニタ二枚にノートPCが一台ギリギリ乗るくらいのスペースです。</p><p>ノートPCを広げながら手元で紙の資料を広げたり、飲み物を置こうとすると手狭になります。</p><p><a href="https://www.amazon.co.jp/gp/product/B01ISMNC4W" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B01ISMNC4W</a></p><h2 id="椅子：DXRacerゲーミングチェアDXR-BKN"><a href="#椅子：DXRacerゲーミングチェアDXR-BKN" class="headerlink" title="椅子：DXRacerゲーミングチェアDXR-BKN"></a>椅子：DXRacerゲーミングチェアDXR-BKN</h2><p>ヘッドレストがあり、長時間座れるものということで、ほぼほぼゲーミングチェアに絞りました。</p><p>もちろんオフィスチェアの中にもヘッドレストが付いているものはありますが、数万円程度で複数の種類から選べるのが魅力でした。特にゲーミングチェアの場合、フットレストがあるタイプも選択可能ですが、都内の1Kで足元に色々器具がつくとじゃまになるかなと言う理由でやめました。</p><p>実際購入して一年以上経過していますが、私自身が集中すると足を後ろに寄せるような癖があり、フットレストがほしいと思うシチュエーションに到達していないので良かったかなと考えています。一方で、もしもゲーミングチェアの上で仰向けになって仮眠を取ることまで考えている場合は、フットレストを候補に入れてもいいかなと思います。</p><p><a href="https://www.amazon.co.jp/gp/product/B00M2CZZOA" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B00M2CZZOA</a></p><h2 id="メインモニタ-4Kモニタ：ASUSゲーミングモニタ28型VP28UQG"><a href="#メインモニタ-4Kモニタ：ASUSゲーミングモニタ28型VP28UQG" class="headerlink" title="メインモニタ/4Kモニタ：ASUSゲーミングモニタ28型VP28UQG"></a>メインモニタ/4Kモニタ：ASUSゲーミングモニタ28型VP28UQG</h2><p>私用・仕事用の両方で主に使うモニタです。</p><p>リモートワーク前はFHDのモニタを使っていましたが、コーディングをするのに画面が小さいこと、そして主にFF14をきれいな画質でプレイしたいがために購入しました（補足ですが、FF14をやるために私用のデスクトップPCも新調しています）。28型にしたのは机のサイズが制約となってこれ以上大きなものを置くのが厳しかったこともありますが、同時に姿勢を正したときにモニタの上部がギリギリ目線の下に来ること、首を振らずに画面全体が視野に収まることも選定理由です。</p><p>最近では大型のモニタも比較的安い金額で入手可能ですが、ゲームやTVとは違いPC用に使う場合は、かなり近づいて使います。過去43型のモニタを使っていたこともありますが、そのときは首をかなり動かす必要がありましたが、28型程度であれば、ギリギリ首を動かさずに全体を見渡すことができます。</p><p>なお、こちらスピーカーは外付けで別途必要なモデルになるので音声利用される場合は注意が必要です。</p><p><a href="https://www.amazon.co.jp/gp/product/B077DQK3BQ" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B077DQK3BQ</a></p><h2 id="サブモニタ-FHDモニタ：VE248（24型）"><a href="#サブモニタ-FHDモニタ：VE248（24型）" class="headerlink" title="サブモニタ/FHDモニタ：VE248（24型）"></a>サブモニタ/FHDモニタ：VE248（24型）</h2><p>中古で買ってきたモニタですでに販売していないかもしれませんが、スピーカーが内蔵されたモニタです。</p><p>サブモニタとして使っていますが、リモートワーク中には画面共有用のモニタとして使っています。現在よく利用されている各種Webミーティングツールでは「画面全体の共有」「ウィンドウの共有」「タブの共有」と選ぶことができるため適切に選べば見せたくない画面を相手に見せることは防げますが、複数のウィンドウやタブを切り替えながらミーティングを行いたいときは、どうしても「画面全体の共有」を選択したいです。</p><p>一方で画面全体の共有を行ったときに気になるのは、Google Workspaceやslackの通知が画面上に表示されてしまうことです。これもPCのモニタに通知を表示するようにしておけばサブモニタ側に通知は出ないため、ミーティング出席者に余計な表示をしないですみます。また、メインモニタやPCモニタには他の資料やチャットツールを表示しながらミーティングを進められるため、例えば会議の途中で気に内容があった際に、会議に参加していない他のメンバにすぐに情報共有することなどもできます。</p><h2 id="Windows用キーボード1"><a href="#Windows用キーボード1" class="headerlink" title="Windows用キーボード1"></a>Windows用キーボード1</h2><p>当社にも自作キーボード勢は生息しており、突き詰めれば沼に向かう未来しか見えませんが、沼に入らずとも自分が好きなキーボードを選ぶことはモチベーションを保つためにも大事です。<br>私は自宅でのテンションを上げるためにゲーミングキーボードであるNPETを使っています。</p><p>ズボラな性格の私が電池切れでイライラしないよう有線接続であり、メンブレン式であるためそこそこの打鍵感があり、比較的廉価に入手できるため、キーボード初心者である自分にマッチしていました。</p><p>そして何より、作業しているときに手元がキラキラ光っているのは非常に楽しいです。</p><p>また、MBPのシザーあるいはバタフライ構造はもちろん、ノートPCのキーのストロークは短くなりがちです。それと対比が付く形になりますので、気分転換にも最適と考えています。</p><p><a href="https://www.amazon.co.jp/gp/product/B075WQYC4Y" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B075WQYC4Y</a></p><h2 id="マウス"><a href="#マウス" class="headerlink" title="マウス"></a>マウス</h2><p>完全にゲーミング用途で購入したマウスですが、仕事でも使えています。手が小さな私ですがマウスが小さすぎると扱いにくいので、程々のサイズのマウスということで利用しています。</p><p>やはり、キラキラ光っています。</p><p><a href="https://www.amazon.co.jp/gp/product/B07W8PNXDW" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B07W8PNXDW</a></p><h2 id="Windows用キーボード2-w-マウス"><a href="#Windows用キーボード2-w-マウス" class="headerlink" title="Windows用キーボード2 w/ マウス"></a>Windows用キーボード2 w/ マウス</h2><p>同じくNPETのキーボードで、こちらはマウスがセットになったタイプです。もちろん、キラキラ光っています。</p><p>こちらは普段私用デスクトップに繋ぎっぱなしで仕事中は机上台の下に格納していますが、もう一つがうまく使えなくなった場合などはこちらに切り替えて使っています。</p><p><a href="https://www.amazon.co.jp/gp/product/B07GJ9CKSH/" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B07GJ9CKSH/</a></p><h2 id="机上台"><a href="#机上台" class="headerlink" title="机上台"></a>机上台</h2><p>ノートPCのキーボードを使うとき、または考え方をまとめたり、資料を広げたり、あるいは本を広げたり私用で何かを書いたりします。</p><p>その時（特に私用の）キーボードが邪魔になるので、格納するように用意しました。仕事をしている最中、私用デスクトップにつながっているキーボードはここに格納します。</p><p><a href="https://www.amazon.co.jp/gp/product/B00485N41U/" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B00485N41U/</a></p><h2 id="PCスタンド"><a href="#PCスタンド" class="headerlink" title="PCスタンド"></a>PCスタンド</h2><p>ノートPCを気分を変えて外付けキーボードで作業したいときに使います。</p><p>デスクが狭いのでギリギリになりがちですが、ファンが全力で回るときにも、ここを利用したりします。</p><p><a href="https://www.amazon.co.jp/gp/product/B07VC5X2GT" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B07VC5X2GT</a></p><h2 id="モバイルモニタ：GeCicモバイルモニタOn-Lap1101P"><a href="#モバイルモニタ：GeCicモバイルモニタOn-Lap1101P" class="headerlink" title="モバイルモニタ：GeCicモバイルモニタOn-Lap1101P"></a>モバイルモニタ：GeCicモバイルモニタOn-Lap1101P</h2><p>リモートワークになったとはいえ、プラントエンジニアたる自分は現地にでかけて作業することがあります。</p><p>その際、モニタが1枚になるとあらゆる面で苦労します。前職時代から持っていた悩みであり、これを解決するために購入したのがこのモバイルモニタです。<br>USB給電であるため例えばMBPで使う場合Type-Cから変換するコネクタが必要となりますが、結局後述の外付けカメラをつなげるためにIFは必要でHDMI変換コネクタをどうせ買うのでそれで事足ります。</p><p>これでFHDの画面が一枚増えると考えると、非常に良い投資だと考えます。</p><p><a href="https://www.amazon.co.jp/gp/product/B018587MI6" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B018587MI6</a></p><h2 id="ヘッドセット"><a href="#ヘッドセット" class="headerlink" title="ヘッドセット"></a>ヘッドセット</h2><p>これは人の趣味嗜好によるとおもいますが、集中したいときはガッツリヘッドホンを好むタイプです。</p><p>その際自分のテンションを上げるために、あえてヘッドホンもゲーミングタイプでキラキラ光るものにしました。</p><p><a href="https://www.amazon.co.jp/gp/product/B088GQZCCY" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B088GQZCCY</a></p><h2 id="カメラ"><a href="#カメラ" class="headerlink" title="カメラ"></a>カメラ</h2><p>斜め上から映像を取るために使用しています。</p><p>サブモニタの上に設置し、普段は仕事用ノートPCにつないでいますが、私用でもデスクトップPCをつないでいます。</p><p><a href="https://www.amazon.co.jp/gp/product/B088P8THJM/" target="_blank" rel="noopener">https://www.amazon.co.jp/gp/product/B088P8THJM/</a></p><h2 id="切替器"><a href="#切替器" class="headerlink" title="切替器"></a>切替器</h2><p>複数のデバイスを持っているため、切替器は非常に大事です。</p><p>メインモニタおよびサブモニタを柔軟に切り替えることで、好きな組み合わせで画面表示を行うことができます。一つ悩みがあるとすればSwitchとPS4の出力であり、これらはメインモニタにもサブモニタにもつなげることがあります。</p><p>例えば、リングフィットをする際にはサブモニタに表示してメインモニタはYouTubeなど流しておきたいですが、ガッツリ遊びたいときはメインモニタにSwitchをつなげたいです。よしなにSwitch/PS４の出力先をメイン/サブモニタで切り替えつつ、メインモニタorサブモニタでの入力先を切り替えられるように今後していきたいです。</p><p><img src="/images/20210119/%E3%83%86%E3%82%99%E3%82%B9%E3%82%AF%E5%91%A8%E3%82%8A%E5%87%BA%E5%8A%9B%E6%A7%8B%E6%88%90%E5%9B%B3.png" alt=""></p><h1 id="他にほしいと思うもの"><a href="#他にほしいと思うもの" class="headerlink" title="他にほしいと思うもの"></a>他にほしいと思うもの</h1><h2 id="サイドデスク"><a href="#サイドデスク" class="headerlink" title="サイドデスク"></a>サイドデスク</h2><p>前述のように狭いデスクの上に大量のアイテムを置いているため、すでにいっぱいです。</p><p>この状況下で例えばMBPを広げながらWindowsでも作業をしたくなったり、紙を広げたりしたいとき、あるいは飲み物を置くスペースが致命的に不足しています。また、個人的に小物を置くスペースが圧倒的に足りていないので、収納を補う意味でもサイドデスクの購入を検討しています。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>リモートワークはこれからも続くと考えていますが、直近引っ越しを検討しているため、家具をこれから増やすことは考えていません。</p><p>引っ越す際によりベストな作業環境を心がけて「最強のリモートワーク環境」をブラッシュアップしていきたいと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210118/&quot;&gt;リモートワーク環境連載&lt;/a&gt;の1弾目です&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>リモートワーク環境連載を始めます</title>
    <link href="https://future-architect.github.io/articles/20210118/"/>
    <id>https://future-architect.github.io/articles/20210118/</id>
    <published>2021-01-17T15:00:00.000Z</published>
    <updated>2021-02-01T02:09:37.630Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。技術ブログ運営の<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。</p><p>今回の連載は、フューチャー社員のリモートワークに伴った自宅環境の整備にまつわる連載を行います。一般的にはテレワークの方が言葉としては浸透していますが、社内ではリモートワークの方が浸透しているため、本連載でもリモートワークとしています。</p><h2 id="連載の目的"><a href="#連載の目的" class="headerlink" title="連載の目的"></a>連載の目的</h2><p><img src="/images/20210118/remote-5491798_1280.png" alt=""></p><blockquote><p><a href="https://pixabay.com/ja/users/roadlight-15702095/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5491798" target="_blank" rel="noopener">政徳 吉田</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5491798" target="_blank" rel="noopener">Pixabay</a>からの画像</p></blockquote><p>2020年、新型ウイルスが流行して以来、多くの会社がリモートワークを余儀なくされました。</p><p>フューチャーは以前よりリモートワークの環境が整っており、比較的スムーズに全社員がフルリモートになりました。一方会社として環境を整えていても、ほどんどの社員が会社もしくは客先での勤務が基本であったため、自宅の環境についてはあまり整っていなかった人も多くいました。</p><p>私が所属しているDXチームでは、リモートワークになってから、購入を検討しているモノの相談から個人が買ってよかったもの、あってよかったものを共有しており、「これ、連載にした方がいいのではないか」という声が上がりました。また、導入して効率が上がったツールや方法なども合わせて、ナレッジとして外に出す今回この連載を行うことになりました。</p><h2 id="連載内容"><a href="#連載内容" class="headerlink" title="連載内容"></a>連載内容</h2><p>今回の連載は、先日掲載した連載計画のように期間を集中して連載するのではなく、投稿できる記事が上がったら都度投稿を行っていく方針にしています。日が空いて投稿するときもありますが、ぜひ気長にご覧いただければと思います。</p><p>連載記事には以下の内容が載る予定です（個人によって変わるのでご了承ください）</p><ul><li>リモートワークになって買った機材</li><li>今現在のデスク環境</li><li>プライベートと仕事のデスクの切り替え</li><li>ちょうどいいものがなかったので自作した</li><li>リモートワークで実践して効率があがった話</li></ul><p>などなど、リモートワーク主体になって必要になった、購入したものを各々紹介していただければと思います！</p><p>また、投稿された記事は随時このインデックス記事に紐づけていきます</p><table><thead><tr><th>投稿日</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>1/19</td><td>栗田真</td><td><a href="https://future-architect.github.io/articles/20210119/">プラントエンジニアのオレオレリモートワーク環境</a></td></tr><tr><td>2月中</td><td>澁川喜規</td><td><a href="https://future-architect.github.io/articles/20210201/">自宅仕事環境構築：指向性マイクの勧め</a></td></tr><tr><td>2月中</td><td>壺屋翔</td><td>リモートワーク × スマートホーム × モバイルワーク</td></tr><tr><td>2月中</td><td>富山龍之介</td><td>リモートネイティブ世代が考えるリモートワーク設備</td></tr><tr><td>2月中</td><td>佐藤尭彰</td><td>社用機と私用機に同じモニタ3台を使う話</td></tr><tr><td>2月中</td><td>千葉駿</td><td>集中できる状態とは</td></tr><tr><td>2月中</td><td>久保樹礼</td><td>TV会議でつまづく「認識のすり合わせ」をリモート環境アップデートで改善した話</td></tr><tr><td>3月中</td><td>塚本祥太</td><td>オール無線化して、マウスとキーボードしか触らないでいい環境を作ったけど、電波に阻まれた話。</td></tr><tr><td>4月中</td><td>村田靖拓</td><td>リモートワークで引っ越しして整えた自宅環境紹介</td></tr></tbody></table><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回はリモートワーク連載を始めます！という紹介でした。まだまだ全員対面で会話することが難しい世の中で、この状況もいつまで続くかわかりません。</p><p>社員の中にも、少しずつ買い揃えた人や、一気に整えた人もいます。自宅環境なので、自身の体格に合わせた環境づくりも可能だと思いますので、まだ整っていないという方は、こちらの連載を是非参考にしていただければと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。技術ブログ運営の&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;今回の連載は、フューチャー社員のリモートワークに伴った自宅環境の整
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>MLOpsことはじめ ～実験管理導入と学習基盤の構築～</title>
    <link href="https://future-architect.github.io/articles/20210115/"/>
    <id>https://future-architect.github.io/articles/20210115/</id>
    <published>2021-01-14T15:00:00.000Z</published>
    <updated>2021-01-15T01:07:48.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、Strategic AI Group(以降SAIG)に在籍しています、2019年度入社の真鍋です。学生の頃よりクラウドやHadoop等、大規模分散システムの研究をしていました。その経験と私自身の希望もあり、SAIGでは主にインフラ担当として業務に取り組んでいます。  </p><p>今回は私がAI分野のインフラに触れ、MLOpsを知り、SAIG全体で利用する学習基盤を構築するまでに得た知見を、一部ではありますが共有させていただければと思い筆を取りました。MLOpsについて興味を持たれていて、具体的な取り組みについて知りたいといった方に読んでいただければ幸いです。</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>本稿は下記の内容で構成しています。  </p><ol><li>MLOpsとは</li><li>SAIGの課題</li><li>施策1：実験管理についての取り組み</li><li>施策2：SAIG学習基盤の構築</li><li>まとめと今後の展望  </li></ol><h1 id="1-MLOpsとは"><a href="#1-MLOpsとは" class="headerlink" title="1. MLOpsとは"></a>1. MLOpsとは</h1><p>私がアサインされたSAIGは、フューチャーの一般的なプロジェクトとは異なり、AI技術を用いて横串で色々な企業様とお仕事をさせていただくことが多く、その中ではPoC(Proof of Concept)と呼ばれる、将来的なシステム構築に向けて、新しいアイデアについて実現できるかどうか検証するという概念実証を行っているプロジェクトが多く走っていました。  </p><p>PoCでは実際にシステム構築を始める前段階として、モデル学習や評価を行うことになるのですが、システム構築を始めるにあたって問題が発生することがあります。PoC時点でどのバージョンのデータを利用して学習したのかが分からなくなったり、実行環境やパッケージに関する整合性の問題でソースコードが動かなくなったり、PoC時点でのメンバーが居なくなった際に引継ぎが十分でなかったたことで当時の再現が難しくなったり等です。  </p><p>上記の理由もあり、SAIGではMLOpsの概念の導入が求められていました。SAIGにおいてMLOpsとは、「機械学習モデルの実装から運用までのライフサイクルを円滑に進めるための管理体制(機械学習基盤)を築くこと、またはその概念全体」と定義しています。<br>詳細は、SAIGにて先んじてMLOpsの導入を進めていた山野さんが網羅的にまとめた<a href="https://qiita.com/noko_qii/items/d2c36b0b22ab0da6c759" target="_blank" rel="noopener">記事</a>を見ていただければと思います。  </p><p>本稿では、一般的なMLOpsについて簡単にまとめるに留めます。<br>MLOpsとはMachine Learning、Develop、Operateをまとめた概念です(<a href="https://www.c-sharpcorner.com/blogs/mlops" target="_blank" rel="noopener">参考</a>)。機械学習のプロジェクトにおいて、モデルの作成・学習は全体から見てほんの一部であるという話は良く聞かれます。<br><img src="/images/20210115/fig_1.jpg" alt=""><br> <em>▲ <a href="https://papers.nips.cc/paper/2015/hash/86df7dcfd896fcaf2674f757a2463eba-Abstract.html" target="_blank" rel="noopener">Hidden Technical Debt in Machine Learning Systems</a>より引用</em></p><p>MLOpsとは、機械学習プロジェクト全体のフローに発生する多様なコストを包括的に削減するための概念だと認識しています。</p><ul><li>元データ・加工後データを格納し、後から参照することを可能にする</li><li>作成したコード・モデル・利用したデータ等についてのバージョン管理</li><li>モデルを使ったサービスを提供するための、モデルのパッケージ化・API化</li><li>サービス展開後のモデル精度監視と、再学習・再デプロイの自動化  </li></ul><p>MLOpsを導入することで、上記のような機械学習プロジェクト全般における課題の解決が期待されます。</p><h1 id="2-SAIGの課題"><a href="#2-SAIGの課題" class="headerlink" title="2. SAIGの課題"></a>2. SAIGの課題</h1><p>1章ではMLOpsの概要と、MLOpsによって解決を期待される課題について列挙しましたが、SAIGにおいてもほぼ同様な課題が存在していました。私達がMLOpsの導入を行うにあたり最初に実施したことは、実際に機械学習プロジェクトを推進している各リーダーや、最前線でモデル学習を行っているメンバーの方々へのヒアリングです。本章では、SAIGにおいて機械学習プロジェクトを進める中で頻出した困りごとについて一部を紹介します。</p><h2 id="後になってから実験の再現ができない"><a href="#後になってから実験の再現ができない" class="headerlink" title="後になってから実験の再現ができない"></a>後になってから実験の再現ができない</h2><p>「PoC終了時の結果をもう一度見せて欲しい」、「新しいデータがあるので、これでもう一度学習してみて欲しい」といったご要望を企業様よりいただくことがあります。当時のメンバーが在籍しており、直近の記憶で再現することが可能なPoC直後なら良いですが、PoC終了の数ヶ月後にこのようなご要望があった場合、必要な情報が揃っていないと困ったことになります。  </p><p>実験の再現に必要なのは、masterブランチのソースコードを動かせる(バグが無く、実行コマンドが分かる)ことはもちろん、再現したいソースコードのバージョン、学習時に利用したデータ、そのデータの前処理方法、各種パラメータ値等、多岐にわたります。セキュリティ・ネットワーク・ファイルのパーミッション等、実行する環境の違いや、利用しているパッケージのアップデートによりソースコードが動かなくなることもあります。また、利用しているモデルが変わることで精度に影響することもあるでしょう。  </p><p>ヒアリングを行った結果、この問題はどの機械学習プロジェクトでも直面する可能性があることが分かりました。あるプロジェクトはExcelやスプレッドシートに結果を記録していたり、あるプロジェクトはGitLabのissueやWikiに結果を各自で投稿していたりと、各々の裁量に任されていました。</p><h2 id="開発におけるリソースが不足している"><a href="#開発におけるリソースが不足している" class="headerlink" title="開発におけるリソースが不足している"></a>開発におけるリソースが不足している</h2><p>モデル学習には膨大な計算機リソースを必要としますが、SAIGの案件拡大に伴うメンバー増員により計算機に関するコストは増大していました。機械学習プロジェクトにおいて、GPUを多く利用するという面や、学習に長い時間を要するという面がコストの増大に大きく影響しています。  </p><p>また、企業様より受領するデータをクラウド環境へアップロードする際には、その調整が難しいケースがあることもヒアリングで明らかになりました。その場合はAWSやGCPといったクラウドサービスを利用できません。  </p><p>SAIGにおいて、プロジェクトを進める上での人的・金銭的コストを抑えた上で、GPUを複数人で利用でき、容量の大きいデータを運用できる計算環境の構築は喫緊の課題でした。</p><h2 id="その他の課題"><a href="#その他の課題" class="headerlink" title="その他の課題"></a>その他の課題</h2><p>上記以外の、現在対応中な課題についても簡単にご紹介します。それらの課題については、また別の場でご紹介させていただければと思います。<br>まず多かったのは「Jupyter Notebookを使いたいが、バージョン管理が難しい」といった課題です。Jupyter Notebookはブラウザ上でセルごとにpythonのコーディング・実行をすることができ、画像等の結果をインタラクティブに表示できる大変優れたツールです。SAIGでも、多くのプロジェクト、特にOCR等の画像を扱うプロジェクトで利用されています。ただ、Notebookファイル(.ipynb)はpythonスクリプト(.py)とは異なり、ファイルに出力結果や実行順番が含まれるため、差分を取ることが難しいという特徴があります。  </p><p>これは少しMLOpsの対象と外れるかもしれないのですが、繰り返し利用するソースコードのライブラリ化についても話に挙がっていました。SAIGでは先ほど述べたOCR等の画像処理だけでなく、言語処理や最適化問題等のプロジェクトも存在しています。それぞれの分野に在籍されているメンバーは、よく使うソースコードを「秘伝のタレ」として持っていますが、それらを全体に共有し別プロジェクトで利用するには一手間かかります。汎用的なライブラリを分野ごとに用意することも将来的なアイデアとして挙がっています。    </p><h1 id="3-施策1：実験管理についての取り組み"><a href="#3-施策1：実験管理についての取り組み" class="headerlink" title="3. 施策1：実験管理についての取り組み"></a>3. 施策1：実験管理についての取り組み</h1><p>MLOpsの導入を進めるにあたり、まずは2章で紹介した「後になってから実験の再現ができない」問題に対して、私達はツールを用いた解決を目指しました。ツールを利用する方針にした理由は、実験の再現に必要な情報は2章で述べた通り多岐に渡るため、ハイパーパラメータチューニングの中で何度も手作業で記録することはコストが高いと判断したためです。私達がツールを選定した基準は下記の通りです。</p><table><thead><tr><th>フェーズ</th><th>処理内容</th><th>概要</th></tr></thead><tbody><tr><td>モデル実装</td><td>Notebook対応</td><td>Jupyter notebookによる利用が可能かどうか</td></tr><tr><td></td><td>複数人の運用</td><td>ソースコードや実行結果等を中央管理できるかどうか</td></tr><tr><td></td><td>GUI</td><td>ブラウザ上で結果を確認するインターフェースを有するかどうか</td></tr><tr><td></td><td>記録</td><td>チューニングにおける実際の値とスコアを保存しておけるかどうか</td></tr><tr><td></td><td>自動チューニング</td><td>パラメータのオートチューニング機能を有するかどうか</td></tr><tr><td>学習</td><td>パラメータ記録</td><td>学習の際に設定したパラメータや、その他設定値を記録できるかどうか</td></tr><tr><td></td><td>出力結果記録</td><td>標準出力の内容や、生成した画像ファイルなどを保管・参照できるかどうか</td></tr><tr><td></td><td>学習の再現</td><td>過去に実行した学習をパラメータを変え再実行できるかどうか</td></tr><tr><td></td><td>並列学習</td><td>学習においてクラスタを利用した並列実行が可能かどうか</td></tr></tbody></table><p>複数のツールについて、上記の観点で実現可能かどうかを実際に動かして調べました。SAIGのプロジェクトは多様であり、1つのツールで全ての要件を満たすことは難しいです。複数のツールを組み合わせ、一部は運用ルールを策定し、一部は基盤に機能を組込むことで上記の要件を満たすことを想定しています。  </p><p>今回は別ツールとの連携やカスタマイズの容易性から、MLライフサイクルを管理するオープンソースプラットフォームであるMLflowの導入を決定しました。MLflowについての詳細は、<a href="https://future-architect.github.io/articles/20200626/">別記事</a>にて山野さんが書いています。<br>詳細はそちらで紹介していますので省略しますが、実験管理として私達が実施した主な施策は下記の通りです。  </p><ul><li>記録するパラメータおよび結果の選定</li><li>インプット・アウトプットデータの保管</li><li>各実験の比較用プログラムの実装  </li></ul><p>上記の施策を見ていただくと分かる通り、私達はただツールを導入しただけではありません。データサイエンティストのメンバーと打ち合わせを重ね、必要なパラメータやインプット・アウトプットデータといった情報の選定を選定しました。加えて、実験結果を比較するための独自の手法を、実験管理ツール内で実行できるような追加機能として実装したりもしています。  </p><p>実際に実験管理ツールを使っていただいたメンバーの方からは、手作業の記録の手間が大幅に省け、作業の効率化が目に見えてできたとコメントをいただいています。MLOpsを実現するためにはツールを入れればOKというわけではなく、環境やサービスを構築するエンジニアと、AIロジックを実装するデータサイエンティストの両立場からの情報の擦り合わせが重要だと感じました。  </p><h1 id="4-SAIG学習基盤の構築"><a href="#4-SAIG学習基盤の構築" class="headerlink" title="4. SAIG学習基盤の構築"></a>4. SAIG学習基盤の構築</h1><p>私達は次の取り組みとして、計算リソースが不足している課題の解決に取り組みました。そのためにローカルで構築する学習基盤は、SAIGのメンバーだけでなく、アルバイトとして業務に協力していただいている方々も含めた大人数が同時に、かつ計算量の大きい学習を長時間回すことが予想されました。  </p><p>SAIG全体で利用する学習基盤を設計するにあたって、まずは実験管理と同様にヒアリングから始めました。その結果、SAIG全体で運用していくにあたってどうしても考慮しなくてはならない課題や、SAIGのデータサイエンティストの方々が求めている条件が明らかになってきました。一部にはなりますがそれぞれの要件について、その概要と対処法について紹介したいと思います。  </p><h2 id="物理マシンの追加・削除に対応する"><a href="#物理マシンの追加・削除に対応する" class="headerlink" title="物理マシンの追加・削除に対応する"></a>物理マシンの追加・削除に対応する</h2><p>今回、物理マシンは新たに購入したものと、リソースが余っていたマシンを活用してクラスタを構築することとなりました。必要に応じてマザーボードから用意することもあれば、GPUやメモリ、追加NICを買い足しマシンを構築しました。全体の構成は下記の図の通りです。  </p><p><img src="/images/20210115/fig_2.jpg" alt=""></p><p>ソフトウェアスタックは下記の通りです。  </p><p><img src="/images/20210115/fig_3.jpg" alt=""></p><p>利用者はログインノードにsshで接続し利用を開始し、実際の学習はGPUノードで実行されます。ログインノードや管理用のマネジメントノードは良いのですが、GPUノードは将来的にスケールアウトが必要になることが想定されます。また、古いマシンも利用しているため、各ノードの入れ替えが必要になるかもしれません。<br>そのたびに環境構築をやり直すのは大変な手間がかかり、復旧に失敗する恐れがあります。実験の再現と同様に、環境構築においても風化しない、私達現行のメンバーが不在になっても問題ない仕組みが必要と考えました。そこで今回は全面的にansibleを使った環境構築を採用しています。<br>ansibleとは構成管理ツールと呼ばれる、サーバ上の環境構築を自動化するアプリケーションです。ansibleの優れている点は、処理ごとの依存関係の設定が可能な点や、実行するノードごとに変数として値を個別に設定できる点にあります。ansibleを利用することでログインノード・マネジメントノード・ファイルサーバ・バックアップサーバ・GPUノードの全ての環境構築を可能としました。</p><h2 id="複数人での利用を想定した環境の構築"><a href="#複数人での利用を想定した環境の構築" class="headerlink" title="複数人での利用を想定した環境の構築"></a>複数人での利用を想定した環境の構築</h2><p>複数人で同一環境を利用するにあたって、各自・各プロジェクトごとに開発環境を整備できるようにしなければならず、誰かが利用している間、他の人は使えないといったことは避けなければなりません。私達は、複数のマシン上で処理を動かす際の可用性と、複数人が実施する処理のスケジューリングが必要だということ、そして全計算リソースの利用状況を可視化する事を目的にKubernetesの導入を決めました。  </p><p>コンテナを利用する利点は、OSの多様化に対応できることや、パッケージを気軽に追加できること、複数のマシンで動かすときの差異に影響されにくい等、枚挙に暇がありません。大規模計算クラスタで多く使われているSlurmも候補に挙がりましたが、ジョブ単位での実行ではなくJupyter Notebookを用いたインタラクティブな利用が多くなることが見込まれたことと、多くのプロジェクトでDockerを用いた開発が進められていたため導入コストが低くなることが期待できたため、導入は見送られました。  </p><h2 id="メンバーごとにプロジェクトへ所属させ、ファイルのパーミッションを適切に限定する"><a href="#メンバーごとにプロジェクトへ所属させ、ファイルのパーミッションを適切に限定する" class="headerlink" title="メンバーごとにプロジェクトへ所属させ、ファイルのパーミッションを適切に限定する"></a>メンバーごとにプロジェクトへ所属させ、ファイルのパーミッションを適切に限定する</h2><p>複数人での利用は、kubernetesのPodと呼ばれるリソース単位でそれぞれ利用することで、他のメンバーへの影響を最小限にした上で開発を進めることができるようになります。ただ、全員が全てのプロジェクトのファイルにアクセスできるようでは、機密性の問題が発生してしまいます。そこで今回はLDAP(Lightweight Directory Access Protocol)を導入しメンバーの権限を一括管理することとしました。Kubernetesには元から権限管理の機能が備わっていますが、Kubernetesに組込まれたマシン以外でもLDAPを利用する想定があったためLDAPを採用しています。現在、学習基盤の利用における権限管理はLDAPの情報を用いて実施していますが、将来的にはKubernetesと各種認証プロトコルの統合も視野に入れています。</p><p>LDAPの構築にあたって、Kubernetesのリソース管理機能を有効活用するため、Deploymentという形式でLDAPのコンテナをデプロイしました。Deploymentで構築することで、Kubernetesクラスタ上において設定した数のPodが起動していることを保証することができます。  </p><h2 id="GPUの利用"><a href="#GPUの利用" class="headerlink" title="GPUの利用"></a>GPUの利用</h2><p>通常Kubernetesを導入する際には、kubeadmを利用する方法が一般的かと思いますが、そのまま利用しただけでは起動したPod内でGPUを認識することができません。今回私たちは、<a href="https://medium.com/nvidiajapan/nvidia-docker-%E3%81%A3%E3%81%A6%E4%BB%8A%E3%81%A9%E3%81%86%E3%81%AA%E3%81%A3%E3%81%A6%E3%82%8B%E3%81%AE-20-09-%E7%89%88-558fae883f44" target="_blank" rel="noopener">こちらの記事</a>を参考にさせていただき、Nvidia Docker2の導入を決めました。  </p><p>Nvidia Driverをインストールした上で、nvidia-docker2を導入し、Dockerの起動設定を下記の通り変更し適用することで、Kubernetes上でGPUを認識することができます。</p><figure class="highlight json"><figcaption><span>daemon.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="attr">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="attr">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="attr">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="attr">"default-runtime"</span>: <span class="string">"nvidia"</span>,</span><br><span class="line">  <span class="attr">"runtimes"</span>: &#123;</span><br><span class="line">    <span class="attr">"nvidia"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"/usr/bin/nvidia-container-runtime"</span>,</span><br><span class="line">      <span class="attr">"runtimeArgs"</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"insecure-registries"</span>:[<span class="string">"プライベートレジストリの接続先を記載"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高速なファイルの転送"><a href="#高速なファイルの転送" class="headerlink" title="高速なファイルの転送"></a>高速なファイルの転送</h2><p>LDAPと同様に、Kubernetesのリソース管理機能を活用するべく、DockerのプライベートレジストリについてもDeploymentで構築しました。プライベートレジストリとは、各自が作成したイメージを保存・バージョン管理することのできるストレージのようなものです。プライベートレジストリを用意することで、Kubernetesの各ノード上で各自がビルドしたコンテナイメージを利用することができるようになります。  </p><p>ただ、Dockerのイメージは物によってはサイズが大きくなってしまいます。今回のプライベートレジストリは、ファイルサーバ上に構築したNFSに保存するようにしていますが、ネットワークの転送速度には長い時間がかかる恐れがあります。  </p><p>構築前のヒアリングでも要望として上がっていましたが、機械学習プロジェクトでは大規模なモデルや学習データを取り扱う機会が多い事もあり、大容量のファイル送信は必須でした。今回は通常のネットワーク用とは別にNICを各マシンに追加し、外部通信とは別に利用するネットワークを構築することで高速なデータ転送を実現しています。  </p><h2 id="CI-CDの実現"><a href="#CI-CDの実現" class="headerlink" title="CI/CDの実現"></a>CI/CDの実現</h2><p>CI/CDとは継続的インテグレーション・継続的デプロイメントとして広く知られた手法になってきていますが、機械学習プロジェクトにおいても今まで以上に重要な技術です。機械学習プロジェクトでは、ただソースコードが動けば良いだけでなく、モデルの精度についても継続して評価する必要があります。  </p><p>今回はGitLabとKubernetesを連携させ、各プロジェクトごとに利用できるCI環境を構築しています。Kubernetes上でHelmというパッケージ管理ツールを使いGitLab runnerを動かせるようにした上で、設定パラメータにGitLabの情報を入力することで連携することができます。また、Kubernetes環境にMLflowのPodを立てCIの結果を逐一記録することで、継続的なモデル評価を実現できます。  </p><h1 id="5-まとめと今後の展望"><a href="#5-まとめと今後の展望" class="headerlink" title="5. まとめと今後の展望"></a>5. まとめと今後の展望</h1><p>長々と、かつまとまりの無い記事になってしまいましたが、MLOpsを進める中で感じたことは下記の2点です。</p><ul><li>データサイエンティストのメンバーと対話し実情を知るべき</li><li>画一的に技術・ルールを整備するのではなく、状況や案件に合わせて都度カスタマイズするべき  </li></ul><p>データサイエンティストとエンジニアは持つ知識や経験が異なり、片方が常識だと考えていることが一方ではそうではないことは多々あります。それは多様な職種の企業様と行うコンサルティングと同様に、それぞれの理解の擦り合わせを積極的に行うことと、自分の知らない分野に関する知識を学び、より良いモノを作るよう努力を続けるという歩み寄りの姿勢が重要であると感じました。  </p><p>未だSAIG内で表面化している課題の全てには対応できていません。ディレクトリ構成に関する運用ルールを策定するにとどまっているJupyter Notebookのバージョン管理や、データの前処理と学習を一連の処理として扱うパイプラインツールの導入も今後挑戦したいと考えています。<br>引き続き、円滑な機械学習プロジェクト推進の一助となれるよう、MLOpsの導入に力を入れていきたいです。<br>また、MLOpsの導入に力を貸してくれるメンバーも募集していますので、興味のある方は是非、SAIGの門を叩いてみてください！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、Strategic AI Group(以降SAIG)に在籍しています、2019年度入社の真鍋です。学生の頃より
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MLOps" scheme="https://future-architect.github.io/tags/MLOps/"/>
    
      <category term="kubernetes" scheme="https://future-architect.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>コミュニティ運営をして思っていること</title>
    <link href="https://future-architect.github.io/articles/20210114/"/>
    <id>https://future-architect.github.io/articles/20210114/</id>
    <published>2021-01-13T15:00:00.000Z</published>
    <updated>2021-01-15T01:07:30.718Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210114/4e4202b879470495078b35350428bb40.png" class="img-small-size"><p>こんにちは。技術ブログ運営の<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。この記事は<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間連載</a>の3日目（穴埋め）です。</p><p>私は昨年半ばから<a href="https://cloudnativedays.jp/" target="_blank" rel="noopener">CloudNative Days</a>の実行委員や、<a href="https://gcpug-shonan.connpass.com/" target="_blank" rel="noopener">GCPUG Shonan</a>のスタッフになって、会社の活動以外にコミュニティ活動を行っています。社外のグループに属しているので、大変な面ももちろんありますが、それ以上に楽しい、やりがいが大きいです。</p><p>今回は普段活動していて考えていること、気をつけていることなどを備忘も含めて読み物記事として書いていければと思います。また、今回はGCPUG Shonanにフォーカスして書いていきます。</p><h2 id="GCPUG-Shonanとは"><a href="#GCPUG-Shonanとは" class="headerlink" title="GCPUG Shonanとは"></a>GCPUG Shonanとは</h2><p>GCPUGはGoogle Cloud Platform User Groupの略称であり、名前の通りGCPのユーザー会です。</p><p>GCPの普及を目的としており全国に支部があります。この中でGCPUG Shonanは神奈川県の湘南エリアにて活動しているGCPUGの1つです。基本的に少数で開催しており、一方的なセッションを話す、聞くだけの関係ではなく参加者同士のコミュニケーションなどインタラクティブなやり取りをモットーにしています。</p><p>また、参加者の住んでいるところを湘南と定義するので「湘南の〜〜から来ました〇〇です。」といった挨拶も定番でした。</p><p>スタッフに入った経緯は、以前からGCPUG Shonanに何度か参加しており、スタッフの方から声をかけていただけたので参加することになりました。</p><h2 id="リモートになってからの運営"><a href="#リモートになってからの運営" class="headerlink" title="リモートになってからの運営"></a>リモートになってからの運営</h2><p>私スタッフとして入って数ヶ月でリモートになってしまったので、今回はリモートでの運営から書いていきます。</p><p>これまで、オフラインでの開催、少人数での開催を行ってきたので、スタッフもはじめはリモートでの開催については悩んでおり、頻度を減らしたり、することも考えました。ですが…</p><ul><li>オンライン開催することによるデメリットがない</li><li>どんな形でもオンライン開催することでコミュニティが存続しているアピールになる</li><li>継続できている月1の開催は続けたい</li></ul><p>…と話がまとまり、オンライン開催でイベントを継続することにしました。</p><p>次に、取り扱うネタについて決めました。ネタは、最近話題になっているもの、スタッフのより深めたい知識についてテーマを集めて開催しました。リモートで運営した中身です。</p><ul><li><a href="https://gcpug-shonan.connpass.com/event/179246/" target="_blank" rel="noopener">ホワイトペーパーの輪読会</a></li><li><a href="https://gcpug-shonan.connpass.com/event/190937/" target="_blank" rel="noopener">Google Deyeloper Expert（GDE）がひたすらねたを喋る、質問する会</a></li><li><a href="https://gcpug-shonan.connpass.com/event/189674/" target="_blank" rel="noopener">Google Cloud NextのRecap</a></li></ul><p>また、1度だけ万全の対策を行った上でオフラインで参加者全員がLTを行うイベントも開催しましたが、結局スタッフミーティングになってしまったことはここだけの話です。</p><h2 id="コミュニティ運営をやってよかったこと"><a href="#コミュニティ運営をやってよかったこと" class="headerlink" title="コミュニティ運営をやってよかったこと"></a>コミュニティ運営をやってよかったこと</h2><p>元々GCPが好きで業務でも深めたり勉強会自体も参加していましたが、スタッフになってみて、自分自身がより良い情報が得られると感じました。普段のスタッフミーティングも、GCPを利用している人で話しているので、余った時間は最近の業務の詰まりどころ、最近気になっているサービスについて話しています。勉強会での内容と同じくらい実は参考になっている時間です。</p><p>運営することで身に付く、考えるようになったこともあります。</p><p>参加しているだけだとどうしてもどこかで受け身になって「聞いて終わり」になることが多かったように私は感じています。しかし、運営しながら参加すると、他の参加者の反応とかを気にしており、吸収できる幅が広がったなと感じています。俗にいう「当事者意識」みたいなものですが、運営を通してみについたことの１つです。</p><h2 id="コミュニティ運営で大変な点"><a href="#コミュニティ運営で大変な点" class="headerlink" title="コミュニティ運営で大変な点"></a>コミュニティ運営で大変な点</h2><p>私が参加して1年位経ちますが、大変だと思っているところはネタ選定です。オンライン開催を余儀なくされたとき、もともとオフラインでハンズオンが多かった勉強会なので、オンライン向けのイベントにするところがはじめは悩んだ覚えです。</p><p>ただ、そこはスタッフが知りたいこと、話したいことに考え直していきました。直近で話題になっていることのブレストをして、オンライン向けのイベントにしていきました。また、人数についても、オンラインなので際限なく呼ぶことは可能ですが、オフラインのときの少人数で何でも聞きやすい状態は維持して、あえて少なめに上限を設定しました。</p><h2 id="運営に向いていそうな人"><a href="#運営に向いていそうな人" class="headerlink" title="運営に向いていそうな人"></a>運営に向いていそうな人</h2><p>「あれやりたい」「これ聞きたい」などがある人は個人的には向いていると思っています。</p><p>前述の通り、ネタ選定するときに、自分自身普段から疑問に思っていることがなかったり、技術自体への興味が薄かったりするとかなり困るな、という印象です。極端な内容でない限り、自分が聞きたいこと≒みんなが聞きたいこと、というのがスタッフになってから思ったことです。</p><p>また、企画が好きな人ももちろん向いていると思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回は、私がスタッフとして参加しているコミュニティから、GCPUG Shonanについて紹介しました。他の記事でも挙げていますが、GCPを好きでずっと触っているので、私自身とても楽しく活動させていただいています。</p><p>企画が好きな人、好きな技術がある人、ぜひ何らかの勉強会のスタッフなってみてはいかがでしょうか？また、自分が参加したい勉強会、コミュニティを立ち上げるという選択肢もあるかと思うので、「我こそは！！」という方はチャレンジしてみてください。</p><p>最後になりますが、この記事をレビューしていただいたGCPUG Shonanのスタッフの方々ありがとうございました。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200806/index.html" data-iframely-url="//cdn.iframe.ly/kOPiyQH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20210114/4e4202b879470495078b35350428bb40.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;p&gt;こんにちは。技術ブログ運営の&lt;a href=&quot;https://twitter.com/kaed
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
      <category term="秋ブログ週間" scheme="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/"/>
    
  </entry>
  
  <entry>
    <title>技術ブログの年間連載予定を発表します</title>
    <link href="https://future-architect.github.io/articles/20210112/"/>
    <id>https://future-architect.github.io/articles/20210112/</id>
    <published>2021-01-11T15:00:00.000Z</published>
    <updated>2021-01-18T02:39:12.854Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。技術ブログ運営の<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。</p><p>あけましておめでとうございます。本年もフューチャー技術ブログをよろしくお願いいたします。</p><p>2021年に計画しているブログの連載についてご紹介します。</p><h2 id="連載計画を発表する背景"><a href="#連載計画を発表する背景" class="headerlink" title="連載計画を発表する背景"></a>連載計画を発表する背景</h2><p>2020年は、季節性や話題になりそうなテーマを中心として連載を企画してきました。</p><p>このときの寄稿者の募集についていくつか課題がありました。</p><ul><li>募集が開催の1~3ヶ月ほぼ前で準備期間が短いため、すでにネタがある人しか参加できなくなりがち<ul><li>本当はもっと初心者の方でも参加できるようにしたい</li></ul></li><li>参加者募集のアナウンスが行き届かない<ul><li>Technology Innovation Group（TIG）をはじめとした技術部隊が中心になってしまいがち。もう少し全社を巻き込みたい</li></ul></li></ul><p>これらを解決する第一歩として年間計画をブログにして、社内外へ拡散しやすくしようと考えました。</p><h2 id="2021年の連載計画"><a href="#2021年の連載計画" class="headerlink" title="2021年の連載計画"></a>2021年の連載計画</h2><p><img src="/images/20210112/new-year-resolution-5859760_1280.jpg" alt=""></p><blockquote><p><a href="https://pixabay.com/ja/users/usa-reiseblogger-328188/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5859760" target="_blank" rel="noopener">USA-Reiseblogger</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5859760" target="_blank" rel="noopener">Pixabay</a>からの画像</p></blockquote><br><p>2021/01/12現在、技術ブログ運営にて企画している、公開月を決めて集中的に行う連載計画は以下です。</p><p>同月に複数実施することもありますが、並列で走らないように調整する予定です。</p><table><thead><tr><th>月</th><th>連載するネタ</th><th>予定数</th><th>昨年(2020年)の連載</th><th>備考</th></tr></thead><tbody><tr><td>1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>2</td><td>Go 1.16</td><td>5</td><td>無し</td><td>Go1.16リリースをテーマにした連載</td></tr><tr><td></td><td>Rust</td><td>5</td><td>無し</td><td>各人がRust入門してみようという連載</td></tr><tr><td>3</td><td>GCP</td><td>10</td><td><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/</a></td><td>Google Cloud Platformに関する連載</td></tr><tr><td></td><td>ShellScript</td><td>5</td><td>無し</td><td>Shell Script に関するTipsを共有する連載</td></tr><tr><td>4</td><td>春の入門祭り</td><td>10</td><td><a href="https://future-architect.github.io/articles/20200529/">https://future-architect.github.io/articles/20200529/</a></td><td>新年度にふさわしく何か新しい技術要素に取組む連載</td></tr><tr><td>5</td><td>Serverless</td><td>10</td><td><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/</a></td><td>Serverlessアーキテクチャに関する連載</td></tr><tr><td>6</td><td>JavaScript</td><td>5</td><td>無し</td><td>JavaScript/TypeScript関連の連載。Vue.jsやReactに関するネタも含みます</td></tr><tr><td></td><td>データ構造とアルゴリズム</td><td>5</td><td>無し</td><td>データ構造とアルゴリズムに関する連載。もしかすると競技プログラミングにも役立つかも</td></tr><tr><td>7</td><td>Go CDK</td><td>4</td><td><a href="https://future-architect.github.io/articles/20191111/">https://future-architect.github.io/articles/20191111/</a></td><td>GoCDKというマルチプラットフォームに役立つライブラリに関する連載</td></tr><tr><td>8</td><td>Python</td><td>5</td><td>無し</td><td>Pythonをテーマとした連載</td></tr><tr><td></td><td>夏休み自由研究</td><td>10</td><td><a href="https://future-architect.github.io/articles/20200726/">https://future-architect.github.io/articles/20200726/</a></td><td>各人が自由研究をテーマに調査実装した内容をシェアする連載</td></tr><tr><td>9</td><td>CNCF</td><td>5</td><td><a href="https://future-architect.github.io/articles/20200928/">https://future-architect.github.io/articles/20200928/</a></td><td>CloudNativeComputingFoundationのプロダクトをテーマとした連載</td></tr><tr><td>10</td><td>秋の読書週間</td><td>10</td><td><a href="https://future-architect.github.io/articles/20201026/">https://future-architect.github.io/articles/20201026/</a></td><td>エッセーなど読み物よりをテーマとした連載</td></tr><tr><td>11</td><td>（同上）</td><td>-</td><td>-</td><td>※秋のブログ週間は月跨ぎのため10~11月にかけて行います</td></tr><tr><td>12</td><td>Qiitaアドベントカレンダー</td><td>25</td><td><a href="https://qiita.com/advent-calendar/2020/future" target="_blank" rel="noopener">https://qiita.com/advent-calendar/2020/future</a></td><td>※基本的にはQiita上で投稿するため、フューチャー技術ブログはお休みシーズンです</td></tr></tbody></table><p>数ヶ月～1年程度でゆるく連載を計画しているのは以下です。</p><table><thead><tr><th>連載するネタ</th><th>予定数</th><th>リンク</th></tr></thead><tbody><tr><td>リモートワーク環境</td><td>4</td><td><a href="https://future-architect.github.io/articles/20210118/">https://future-architect.github.io/articles/20210118/</a></td></tr></tbody></table><p>※連載予定は突然変更、入れ替わることがあります。ご了承ください。<br>その他候補としては</p><ul><li>Zuora</li><li>Auth0</li><li>SORACOM</li><li>オンプレミスインフラ</li><li>PLC</li><li>データストリーム（Kafka、Beamなど）</li><li>やり直しコンピュータサイエンス</li></ul><p>があります。もしかしたら連載されるかもしれないので、お楽しみに。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>昨年の良いところは継続し、改善できるところは改善してより良くしようと運営一同、意気込んでおります。</p><p>読者の方にとって少しでもタメになる知識を共有し、書き手にとって成長に繋がるようなアウトプットの場所として大いに活用していただければと思います。<br>本年もフューチャー技術ブログをよろしくお願いいたします。</p><p>社員の皆さんへ： </p><ul><li>気になる連載があったらお気軽にブログ運営者までDMでお声がけください。会議通知など入れますので</li><li>参加者はどれも枠が残っています（定員を増やすことも可能です）。開催1週間前くらいまでに声をかけてもらえると助かります</li></ul><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>昨年の振り返りはこちらにまとめています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201127/index.html" data-iframely-url="//cdn.iframe.ly/mp0v8g9?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>ブログ運営で気にしていることはこちらにまとめています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200530/index.html" data-iframely-url="//cdn.iframe.ly/NZFPJjo?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。技術ブログ運営の&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;あけましておめでとうございます。本年もフューチャー技術ブログをよろ
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
  </entry>
  
  <entry>
    <title>自分の分身(3Dアバター)と自作ワールドを作ってみた</title>
    <link href="https://future-architect.github.io/articles/20210108/"/>
    <id>https://future-architect.github.io/articles/20210108/</id>
    <published>2021-01-07T15:00:00.000Z</published>
    <updated>2021-01-14T06:56:41.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして！Unity初心者の阿保ですଘ(੭ˊ꒳​ˋ)੭</p><p>このご時世でフューチャーも完全リモートワークとなり、便利になったことや不便になったことがあります。</p><p><strong>【便利になったこと】</strong></p><ul><li>仕事の合間にカンファレンスや勉強会に参加し放題</li><li>出勤に使用してた体力を自分の好きなことをやる体力として使える</li><li>仕事を終えた瞬間から自分の時間として使える</li></ul><p><strong>【不便になったこと】</strong></p><ul><li>家にいるのに気合を入れて顔を作って会議に参加するのがめんどくさい</li><li>顔が見えない会議の場合に感情が読み取れず、相手が怒っているように感じる</li><li>外に出歩けないから何かを体験するということができない</li></ul><p>不便になったことを改善するために3Dアバターや仮想空間技術を使いこなして<br>もっと便利な世の中にすることを企みこの度、VRの勉強をはじめました。<br>まずは顔がいい分身とみんなが穏やかな気持ちになれる仮想世界を作ってみました٩(ˊᗜˋ*)و</p><h1 id="何を作ったか"><a href="#何を作ったか" class="headerlink" title="何を作ったか"></a>何を作ったか</h1><ul><li>自分の分身(３Dアバター)</li><li>分身を動かす仮想世界</li></ul><p>実際に作った自分の分身と仮想世界がこちら↓↓<br><img src="/images/20210108/2020-12-31_18h51_23.png" alt=""></p><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul><li>windows 10</li><li>VRoidStudio-v0.11.2</li><li>Unity Hub 2.4.0 </li><li>Unity 2019.4.9f1</li></ul><h1 id="自分の分身を作成"><a href="#自分の分身を作成" class="headerlink" title="自分の分身を作成"></a>自分の分身を作成</h1><p>まずはVRoidStudioを使って自分のオリジナル3Dアバターを作成します。</p><p>VRoidStudioは無料で提供されている3Dモデル作成アプリです。</p><p>基本となるモデルがあり、</p><ul><li>顔</li><li>髪型</li><li>体型</li><li>洋服</li></ul><p>が編集でき自分のオリジナルのアバターが作成できます。</p><p>VRoidStudioの環境構築や3Dアバターの作成はこちら↓を参考にしました。<br><a href="https://degifeel.com/vroid-studio-how-to/" target="_blank" rel="noopener">https://degifeel.com/vroid-studio-how-to/</a></p><p>作った分身はこちらです↓<br><img src="/images/20210108/2020-12-31_16h33_36.png" alt=""></p><h1 id="仮想世界の作成"><a href="#仮想世界の作成" class="headerlink" title="仮想世界の作成"></a>仮想世界の作成</h1><p>ここからは<a href="https://www.amazon.co.jp/Unity%E3%81%A7%E7%A5%9E%E3%81%AB%E3%81%AA%E3%82%8B%E6%9C%AC%E3%80%82-%E5%BB%A3-%E9%89%84%E5%A4%AB/dp/4274069222" target="_blank" rel="noopener">Unityで神になる本</a>を参考に仮想世界を作っていきます。</p><ul><li>UnityHubから新規3Dプロジェクトを作成</li><li>右上のLayoutドロップダウンから2by3を選択</li><li>まずは大地を作成<ul><li>Game&gt;3D Object &gt; Terrainの順番に選択<br><img src="/images/20210108/image.png" alt=""></li><li>HierarchyPositionタブに表示されている「Terrain」をクリック</li><li>Inspectorタブに表示されている「Position」をX:-500 Y:0 Z:-500に変更し大地が世界の中心にくるようにする<br><img src="/images/20210108/2020-12-29_16h05_09.png" alt=""></li><li>Ctl + 9でAsset Storeを表示</li><li>「Standard Assets」をインポート<ul><li>Allボタンで全てにチェックをつけてImportボタンを押下</li></ul></li><li>HierarchyPositionタブに表示されているTerrainを押下</li><li>Inspectorタブに表示されているTerrainの筆のアイコンを押下</li><li>Edit Terrain Layers…&gt;Create Layerの順に選択<br><img src="/images/20210108/2020-12-29_16h30_01.png" alt=""></li><li>検索窓に先ほどImportしたStandard Assetsの地面素材である「GrassRockyAlbedo」を入力し画像を押下する</li><li>Textureの枠に画像が設定されていることを確認してダブルクリックすると地面が「GrassRockyAlbedo」に染まる</li><li>Inspectorタブに表示されているTerrainの木のアイコンを押下</li><li>「Edit Trees…」&gt;「Add Tree」を選択</li><li>Tree Prefabに「Broadleaf_Desktop」という樹木を選択</li><li>クリックを長押しすることで地面に木を生やすことができる<br><img src="/images/20210108/2020-12-29_23h19_22.png" alt=""></li><li>Inspectorタブに表示されているTerrainの草花のアイコンを押下</li><li>「Edit Details…」&gt;「Add Grass Texture」を選択</li><li>Detail Textureに「Grass」と入力しでてきた好きな草を選択しAddボタンを押下</li><li>木と同じくクリック長押しで草を生やせる</li><li>上記要領で3Dワールドを作りこんでいく<br><img src="/images/20210108/2020-12-29_23h46_07.png" alt=""></li></ul></li></ul><h1 id="3Dワールドに自分の分身を誕生させる"><a href="#3Dワールドに自分の分身を誕生させる" class="headerlink" title="3Dワールドに自分の分身を誕生させる"></a>3Dワールドに自分の分身を誕生させる</h1><ul><li>VRoidStudioで作った分身をUnityで動かせるようにするためのパッケージを導入します。<ul><li>UniVRMを<a href="https://github.com/vrm-c/UniVRM/releases" target="_blank" rel="noopener">github</a>から最新バージョンを選んでUniVRM-X.XX.X_XXXX.unitypackageをDownload<br><img src="/images/20210108/2020-12-31_10h00_28.png" alt=""></li><li>DownloadしたパッケージをUnityのProjectウィンドウにDragu&amp;Dropする<br><img src="/images/20210108/2020-12-31_11h03_42.png" alt=""></li><li>Import Unity Packageのダイアログが開くので下の「ALL」&gt;「Import」の順に押下しPackageをImportする</li></ul></li><li>自分の分身をUnityへImport<ul><li>VRoidStudioで作成した自分のvrmファイルをUnityのProjectウィンドウのAssetに配下にDragu&amp;Drop</li></ul></li><li>分身を操作できるようにセットアップ<ul><li>ここからは分身の操作が見えやすいようにUnity右上のLayoutを「Default」へ変更</li><li>SceneにAsset配下の自分の分身(Prefab Asset)ファイルをDrag&amp;Dropで投下<br><img src="/images/20210108/2020-12-31_12h08_16.png" alt=""></li><li>自分の分身ファイルを選択した際に表示される右側のInspectorタブのAnimatorのControllerに「ThirdPersonAnimatorController」をセットする</li><li>「Capsule Collider」の値を変化させて分身の大きさを調整する<ul><li>CenterをX:0 Y:0.8 Z:0に設定</li><li>Heightを1.81に設定<br><img src="/images/20210108/2020-12-31_15h35_19.png" alt=""></li></ul></li><li>「Third Person Character」の「Ground Check Distance」値を0.3に変化する<ul><li>歩く速さなど動作が変化するので自分の好みの値に調整してください<br><img src="/images/20210108/2020-12-31_14h54_43.png" alt=""></li></ul></li></ul></li></ul><h1 id="分身を動かしてみる"><a href="#分身を動かしてみる" class="headerlink" title="分身を動かしてみる"></a>分身を動かしてみる</h1><ul><li>動かした際に分身をカメラが追ってくれるように設定<ul><li>「Hierarchy」&gt;「Main Camera」を分身フォルダ配下へDrag&amp;Drop<br><img src="/images/20210108/2020-12-31_15h06_30.png" alt=""></li><li>分身フォルダ配下に移動していることを確認</li><li>Main Cameraの「Inspector」のMain Cameraのチェックを外す<br><img src="/images/20210108/2020-12-31_15h09_58.png" alt=""></li><li>Projectの検索窓に「MultipurposeCameraRig」と入力</li><li>表示された「MultipurposeCameraRig」を「Hierarchy」へDrag&amp;Dropする</li><li>「MultipurposeCameraRig」を選択し、右のInspectorに「MultipurposeCameraRig」を表示させる</li><li>「Auto Cam(Script)」のTargetに分身フォルダをDrag&amp;Dropする<br><img src="/images/20210108/2020-12-31_15h40_30.png" alt=""></li><li>上部のPlayボタン(▷)を押下して分身を動かす<ul><li>w:前進 S:後進 A：右移動 D：左移動 Space：ジャンプ</li></ul></li></ul></li></ul><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">自分の分身(3Dアバター)を自作ワールド<br>で動かした動画をYouTubeに上げましたଘ(੭ˊ꒳​ˋ)੭<br>木と草と空しかないですが汗<a href="https://t.co/3ipaXtujef" target="_blank" rel="noopener">https://t.co/3ipaXtujef</a> <a href="https://twitter.com/YouTube?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@YouTube</a>より <a href="https://twitter.com/hashtag/Unity?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#Unity</a> <a href="https://twitter.com/hashtag/unity3d?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#unity3d</a> <a href="https://twitter.com/hashtag/VRoid?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#VRoid</a></p>&mdash; DevAbo (@DevAbo1) <a href="https://twitter.com/DevAbo1/status/1346489578539032576?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">January 5, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>ちょっと空もいじってみました。</p><p>驚きのジャンプ力ですがいい感じに動いてます(๑òωó๑)</p><p>本日はここまでですが、動物や家など配置させて仮想空間を作りこんだり、他の人をこのワールドに召喚し、VoiceChat機能を追加することで家から出ずに顔も作らず、心穏やかにコミュニケーションがとれそうです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして！Unity初心者の阿保ですଘ(੭ˊ꒳​ˋ)੭&lt;/p&gt;
&lt;p&gt;このご時世でフューチャーも完全リモートワークとなり
      
    
    </summary>
    
    
      <category term="VR" scheme="https://future-architect.github.io/categories/VR/"/>
    
    
      <category term="Unity" scheme="https://future-architect.github.io/tags/Unity/"/>
    
      <category term="Unity3D" scheme="https://future-architect.github.io/tags/Unity3D/"/>
    
      <category term="VRoid" scheme="https://future-architect.github.io/tags/VRoid/"/>
    
      <category term="VR" scheme="https://future-architect.github.io/tags/VR/"/>
    
  </entry>
  
  <entry>
    <title>Electronの使い方 Web開発の技術でデスクトップアプリを作ろう</title>
    <link href="https://future-architect.github.io/articles/20210107/"/>
    <id>https://future-architect.github.io/articles/20210107/</id>
    <published>2021-01-06T15:00:00.000Z</published>
    <updated>2021-01-07T02:25:53.042Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>最近Electronを用いたアプリケーション開発を行っています。技術ブログで今まで取り扱った事のないテーマであるため、まずは入門記事を書いてみました。</p><h2 id="Electronとは"><a href="#Electronとは" class="headerlink" title="Electronとは"></a>Electronとは</h2><p><a href="https://www.electronjs.org/" target="_blank" rel="noopener">Electron</a>は、GitHubが開発したオープンソースのソフトウェアフレームワークです。</p><p>ChromiumとNode.jsをコアとして採用する事で、Web開発と同じようにHTML,CSS,JavaScriptを用いて開発したものを、デスクトップアプリケーションとしてビルドすることが可能になります。クロスプラットフォームであることも利点の一つであり、同一のソースコードからmacOS、Windows、Linuxへのアプリケーションビルドが可能です。</p><p>つまりWeb開発の技術でデスクトップアプリが作成できるものです。</p><h2 id="Electronを使って開発されているもの。"><a href="#Electronを使って開発されているもの。" class="headerlink" title="Electronを使って開発されているもの。"></a>Electronを使って開発されているもの。</h2><p>Electronを使って開発されているアプリケーションの中でも有名なものは<a href="https://www.electronjs.org/apps" target="_blank" rel="noopener">公式ページ</a>にリストアップされています。</p><p>とりわけ有名なものとして、<code>Facebook Messenger</code>、<code>Slack</code>、<code>Twitch</code>, 更には<code>Visual Studio Code</code>等が存在します。</p><p>エンジニアの皆さんから、そうでない方まで、Electronのお世話になっていない人の方が少ないかもしれません。習得すると<a href="https://github.com/microsoft/vscode" target="_blank" rel="noopener">Visual Studio CodeのGithubリポジトリ</a>にコミットできるかも…ロマンを感じませんか？</p><h2 id="Electronを使って開発する方法"><a href="#Electronを使って開発する方法" class="headerlink" title="Electronを使って開発する方法"></a>Electronを使って開発する方法</h2><p>Electronはnpmパッケージとして提供されています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron</span><br></pre></td></tr></table></figure><p>ReactやVue.js等のフロントエンドライブラリと組み合わせて使うようなユースケースが現在では一般的ですが、それらライブラリに依存しない形での開発も可能です。</p><p><a href="https://github.com/electron/electron-quick-start" target="_blank" rel="noopener">electron-quick-startのリポジトリ</a>が参考になります。</p><p>git cloneから起動までを体験できる一連のコマンドは<a href="https://www.electronjs.org/" target="_blank" rel="noopener">公式ページ</a>にも記載があります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Clone the Quick Start repository</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;electron&#x2F;electron-quick-start</span><br><span class="line"></span><br><span class="line"># Go into the repository</span><br><span class="line">$ cd electron-quick-start</span><br><span class="line"></span><br><span class="line"># Install the dependencies and run</span><br><span class="line">$ npm install &amp;&amp; npm start</span><br></pre></td></tr></table></figure><img src="/images/20210107/image.png"  style="border:solid 1px #000000"><p><code>npm start</code>コマンドでアプリケーションが実行されます、公式にしては少々素朴ですがHello Worldが表示されます。</p><h2 id="proxy環境下でのElectronアプリの開発"><a href="#proxy環境下でのElectronアプリの開発" class="headerlink" title="proxy環境下でのElectronアプリの開発"></a>proxy環境下でのElectronアプリの開発</h2><p>proxy認証が必要なネットワークの場合、環境変数の設定及びnpmでのproxy設定をしないと<code>npm install</code>が失敗します。</p><p><code>npm config</code>は<code>-g</code>オプションでグローバル設定にすることができますが、Electronのライブラリがグローバル設定を見に行かない場合があるため、うまく動かない場合はグローバルで設定した覚えがある方でも<code>-g</code>オプション無しで設定してみてください。</p><p>下記6つの設定を済ませればproxy環境下でも問題なく動きます。id、pass、proxyのドメインは適宜組み替えてください。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> https-proxy http://id:pass@proxy.example.com:port</span><br><span class="line">npm config <span class="built_in">set</span> proxy http://id:pass@proxy.example.com:port</span><br><span class="line">SET(linuxの場合<span class="built_in">export</span>) ELECTRON_GET_USE_PROXY=<span class="literal">true</span> </span><br><span class="line">SET GLOBAL_AGENT_HTTPS_PROXY=http://id:pass@proxy.example.com:port</span><br><span class="line">SET HTTPS_PROXY=http://id:pass@proxy.example.com:port</span><br><span class="line">SET HTTP_PROXY=http://id:pass@proxy.example.com:port</span><br></pre></td></tr></table></figure><h2 id="Vue-jsでElectronアプリを作る"><a href="#Vue-jsでElectronアプリを作る" class="headerlink" title="Vue.jsでElectronアプリを作る"></a>Vue.jsでElectronアプリを作る</h2><p>個人的にはElectronアプリを作成する場合は、Vue.jsとの組み合わせがオススメです。</p><p><a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/" target="_blank" rel="noopener">Vue CLI Plugin Electron Builder</a>の存在が大きいです。このプラグインを導入することで、とても簡単に、Vue.jsで作成したWebアプリケーションをElectronアプリとしてビルドすることができます。</p><p>実際に試してみましょう。</p><p>まずは環境に応じてnodeをインストールし、<code>npm</code>コマンドが叩けるようになっている必要があります。Windowsの場合、<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs公式サイト</a>からインストーラをダウンロードし、インストールしてください。Macの場合、homebrew経由でバージョン管理ツールである<a href="https://github.com/hokaccha/nodebrew" target="_blank" rel="noopener">nodebrew</a>のインストールを行うのが一般的です。</p><p>本記事では<code>npm</code>コマンドが利用できる状態となっていることを前提条件として取り扱います、詳細なインストール方法は割愛します。</p><p><code>npm</code>コマンドが利用できるようになったら、<a href="https://cli.vuejs.org/" target="_blank" rel="noopener">Vue CLI</a>をインストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure><p>インストールが完了したら、Vue CLIを用いてVue.jsのプロジェクトを作成します。</p><p>プロジェクト用のフォルダやgitリポジトリを作成することを推奨します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir vue-cli-electron-sample</span><br><span class="line"><span class="built_in">cd</span> vue-cli-electron-sample</span><br><span class="line">vue create vue-cli-electron-sample</span><br></pre></td></tr></table></figure><p>Vue CLIの案内に従い、バージョンや構成をいくつか選択します。</p><p><img src="/images/20210107/image_2.png" alt=""></p><p>全てDefault設定で問題ありません。</p><p>アプリケーションの構築が正常に完了すると画像のような案内が表示されます。</p><p><img src="/images/20210107/image_3.png" alt=""></p><p>指示に従いひとまず起動してみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue-cli-electron-sample</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="/images/20210107/image_4.png" alt=""></p><img src="/images/20210107/image_5.png"  style="border:solid 1px #000000"><p>サーバーが立ち上がり、ブラウザで<code>localhost:8080</code>にアクセスするとHello Worldが表示されます。</p><p>ここまではVue.jsの説明ですね。このVue.jsアプリケーションをElectron化してみます。</p><p><code>npm run serve</code>コマンドを叩いた場所と同じディレクトリで、<code>vue add</code>コマンドを使ってVue CLIプラグインをインストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add electron-builder</span><br></pre></td></tr></table></figure><p><img src="/images/20210107/image_6.png" alt=""></p><p>Electronのバージョンを選択できます。</p><p>作りたいアプリケーションで利用する、その他のライブラリとの相性問題等が限りは最新バージョンで問題ないと思います。バージョンを選択するとビルドに必要なパッケージのインストールが始まります。ここでproxyに関連する設定を済ませておかないと、クイックスタートを動かす時と同様インストールに失敗します、ご注意ください。</p><p>インストールに成功すると、<code>package.json</code>に変更が加わるほか、<code>background.js</code>が自動生成されます。</p><figure class="highlight js"><figcaption><span>background.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; app, protocol, BrowserWindow &#125; <span class="keyword">from</span> <span class="string">'electron'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createProtocol &#125; <span class="keyword">from</span> <span class="string">'vue-cli-plugin-electron-builder/lib'</span></span><br><span class="line"><span class="keyword">import</span> installExtension, &#123; VUEJS_DEVTOOLS &#125; <span class="keyword">from</span> <span class="string">'electron-devtools-installer'</span></span><br><span class="line"><span class="keyword">const</span> isDevelopment = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Scheme must be registered before the app is ready</span></span><br><span class="line">protocol.registerSchemesAsPrivileged([</span><br><span class="line">  &#123; <span class="attr">scheme</span>: <span class="string">'app'</span>, <span class="attr">privileges</span>: &#123; <span class="attr">secure</span>: <span class="literal">true</span>, <span class="attr">standard</span>: <span class="literal">true</span> &#125; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      <span class="comment">// Use pluginOptions.nodeIntegration, leave this alone</span></span><br><span class="line">      <span class="comment">// See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info</span></span><br><span class="line">      nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.WEBPACK_DEV_SERVER_URL) &#123;</span><br><span class="line">    <span class="comment">// Load the url of the dev server if in development mode</span></span><br><span class="line">    <span class="keyword">await</span> win.loadURL(process.env.WEBPACK_DEV_SERVER_URL)</span><br><span class="line">    <span class="keyword">if</span> (!process.env.IS_TEST) win.webContents.openDevTools()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    createProtocol(<span class="string">'app'</span>)</span><br><span class="line">    <span class="comment">// Load the index.html when not in development</span></span><br><span class="line">    win.loadURL(<span class="string">'app://./index.html'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// On macOS it is common for applications and their menu bar</span></span><br><span class="line">  <span class="comment">// to stay active until the user quits explicitly with Cmd + Q</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// On macOS it's common to re-create a window in the app when the</span></span><br><span class="line">  <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">  <span class="keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="number">0</span>) createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isDevelopment &amp;&amp; !process.env.IS_TEST) &#123;</span><br><span class="line">    <span class="comment">// Install Vue Devtools</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> installExtension(VUEJS_DEVTOOLS)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'Vue Devtools failed to install:'</span>, e.toString())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exit cleanly on request from parent process in development mode.</span></span><br><span class="line"><span class="keyword">if</span> (isDevelopment) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">'win32'</span>) &#123;</span><br><span class="line">    process.on(<span class="string">'message'</span>, (data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (data === <span class="string">'graceful-exit'</span>) &#123;</span><br><span class="line">        app.quit()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    process.on(<span class="string">'SIGTERM'</span>, () =&gt; &#123;</span><br><span class="line">      app.quit()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここがVue CLIプラグインの最大の利点です。</p><p><img src="/images/20210107/image_7.png" alt=""></p><p>package.jsonにelectronに関連するコマンドが追記されます。</p><p><code>npm run serve</code>の代わりに<code>npm run electron:serve</code>コマンドを実行してみます。</p><p><img src="/images/20210107/image_8.png" alt=""></p><p>npm run serveコマンドと似ていますが、Electronアプリケーションが起動されます。</p><p><img src="/images/20210107/image_9.png" alt=""></p><p>表示内容はVue.jsのHello Worldです、これをElectronアプリとして起動することに成功しました。</p><p>ではこの状態のアプリケーションをビルドしてみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run electron:build</span><br></pre></td></tr></table></figure><p><img src="/images/20210107/image_10.png" alt=""></p><p>ビルドコマンドを実行するとアプリケーションのビルドが走ります。基本的にはアプリケーションをビルドしている端末のOS向けのアプリケーションがビルドされますが、WindowsでMac向けのアプリケーションをビルドするようなことも可能です。詳しくは<a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/recipes.html#multi-platform-build" target="_blank" rel="noopener">公式ガイド</a>をご確認ください。</p><p>ビルドに成功すると、dist_electronフォルダ配下に成果物が配置されます。通常のVue.jsアプリケーションのdistフォルダに相当します。</p><img src="/images/20210107/image_11.png"  style="border:solid 1px #000000"><p>dist_electronフォルダ配下は画像のような状態です。</p><img src="/images/20210107/image_12.png"  style="border:solid 1px #000000"><p>vue-cli-electron-sample Setup 0.1.0をダブルクリックするとアプリケーションのインストールが開始されます。ちなみに、アプリケーションのバージョン情報は<code>package.json</code>記載のバージョンに依存します。<br><img src="/images/20210107/image_13.png" class="img-small-size"></p><p>インストールが完了したアプリケーションは一般的なアプリケーション同様に起動することができます。<br><img src="/images/20210107/image_14.png" alt=""></p><p>vue.config.jsに、下記のように、ビルド設定を<code>portable</code>に設定することで、インストール不要な、ダウンロードしたファイルを直接実行、起動できるようなものとしてアプリケーションをビルドする事もできます。</p><p>ちょっとしたアプリケーションを毎回インストール、アンインストールするのは手間なので、個人的にはportable形式のアプリが好きです。ここに記載可能な設定は、<a href="https://www.electron.build/configuration/configuration" target="_blank" rel="noopener">electron-builderの公式ページ</a>に記載されています。</p><figure class="highlight js"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    electronBuilder: &#123;</span><br><span class="line">      builderOptions: &#123;</span><br><span class="line">        win: &#123;</span><br><span class="line">          target: [</span><br><span class="line">            &#123;</span><br><span class="line">              target: <span class="string">'portable'</span>, <span class="comment">// 'zip', 'nsis', 'portable'</span></span><br><span class="line">              arch: [<span class="string">'x64'</span>], <span class="comment">// 'x64', 'ia32'</span></span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20210107/image_15.png" class="img-small-size"><p>デフォルトの状態ではアイコンが無いため少々寂しいですが、デスクトップアイコンもvue.config.jsで指定することが可能です。</p><figure class="highlight js"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    electronBuilder: &#123;</span><br><span class="line">      builderOptions: &#123;</span><br><span class="line">        win: &#123;</span><br><span class="line">          icon: <span class="string">'src/assets/icon.png'</span>,</span><br><span class="line">          target: [</span><br><span class="line">            &#123;</span><br><span class="line">              target: <span class="string">'portable'</span>, <span class="comment">// 'zip', 'nsis', 'portable'</span></span><br><span class="line">              arch: [<span class="string">'x64'</span>], <span class="comment">// 'x64', 'ia32'</span></span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なお最小画像サイズ(256 x 256, macの場合512 x 512px)を下回るサイズの画像を指定した場合エラーが発生してビルドできません、ご注意ください。</p><img src="/images/20210107/image_16.png" class="img-small-size"><p>アイコンを設定することでそれらしくなってきました。</p><p>portable形式でビルドしたものをダブルクリックすると、そのままアプリケーションが起動します。依存しているファイルなどは存在しないため、ビルド成果物の保存場所を移動したり、これだけを他のPCに配布しても問題なく動作します。ただし、何も設定をしないと信頼できないアプリケーションとして扱われてしまいます。</p><p>これを回避するためには<a href="https://www.electronjs.org/docs/tutorial/code-signing" target="_blank" rel="noopener">アプリケーションの署名</a>が必要になります。仕事で開発する場合は避けては通れない部分ですね。</p><p>細かい設定項目はありますが、最小コストとしてはライブラリの導入だけでデスクトップアプリをビルドすることができました。</p><h2 id="ReactでElectronアプリをビルドする"><a href="#ReactでElectronアプリをビルドする" class="headerlink" title="ReactでElectronアプリをビルドする"></a>ReactでElectronアプリをビルドする</h2><p>Vue.jsではライブラリを導入するだけでアプリケーションのビルドが可能でした。</p><p>Reactの場合はツールが自動でやってくれた部分を自力で整える必要があります。逆に言えばReactアプリケーションをElectronアプリとしてビルドできれば、大抵のものはElectronアプリケーションにできるといっても過言ではありません。<br>Vue.js同様Hello Worldから導入してみます。</p><p>React製アプリケーションを手早く構築するために、<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>を導入します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install create-react-app</span><br></pre></td></tr></table></figure><p>インストールに成功したら、新しくアプリケーションを構築します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir react-electron-sample</span><br><span class="line">cd react-electron-sample</span><br><span class="line">create-react-app react-electron-sample</span><br></pre></td></tr></table></figure><p><img src="/images/20210107/image_17.png" alt=""></p><p>アプリケーションの構築に成功すると画像のような案内が表示されます。<br>指示に従ってアプリケーションを起動してみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> react-electron-sample</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p><img src="/images/20210107/image_18.png" alt=""></p><p>無事にHello Worldが起動しました。</p><p><img src="/images/20210107/image_19.png" alt=""><br><code>Edit src/App.js</code>の文言を無視するのは忍びないので、Hello Worldらしいメッセージに修正しました。<br>pタグの文言を修正するだけです。</p><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">        &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Hello React <span class="keyword">with</span> Electron</span><br><span class="line">        &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;a</span></span><br><span class="line"><span class="regexp">          className="App-link"</span></span><br><span class="line"><span class="regexp">          href="https:/</span><span class="regexp">/reactjs.org"</span></span><br><span class="line"><span class="regexp">          target="_blank"</span></span><br><span class="line"><span class="regexp">          rel="noopener noreferrer"</span></span><br><span class="line"><span class="regexp">        &gt;</span></span><br><span class="line"><span class="regexp">          Learn React</span></span><br><span class="line"><span class="regexp">        &lt;/</span>a&gt;</span><br><span class="line">      &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>ここまででReactのHello Worldは完了です。<br>これをElectronアプリケーションに拡張します。</p><p>まずは愚直にelectronパッケージをインストールします。<br><code>npm start</code>コマンドを実行したディレクトリと同じ場所で、下記コマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron electron-builder --save-dev</span><br></pre></td></tr></table></figure><p>Vue.jsの場合ライブラリが自動でやってくれた部分ですが、<code>package.json</code>に実行できるコマンド、およびビルドのために必要な設定項目を追記します。<br>Vue.jsでは<code>vue.config.js</code>にビルドオプションを記載する形を取ることができましたが、Vue CLIプラグインによる拡張が無いため<code>package.json</code>に直接記載する形になります。</p><figure class="highlight json"><figcaption><span>jsonc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"react-electron-sample"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">  <span class="attr">"build"</span>: &#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"files"</span>: [</span><br><span class="line">      <span class="string">"build/**/*"</span>,</span><br><span class="line">      <span class="string">"*.js"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"directories"</span>: &#123;</span><br><span class="line">      <span class="attr">"output"</span>: <span class="string">"dist_electron"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"win"</span>: &#123;</span><br><span class="line">      <span class="attr">"target"</span>: <span class="string">"portable"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"."</span>,</span><br><span class="line">  <span class="comment">// 中略 //</span></span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"electron"</span>: <span class="string">"^11.1.1"</span>,</span><br><span class="line">    <span class="attr">"electron-builder"</span>: <span class="string">"^22.9.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line">    <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span>,</span><br><span class="line">    <span class="attr">"electron:serve"</span>: <span class="string">"electron ."</span>,</span><br><span class="line">    <span class="attr">"electron:build"</span>: <span class="string">"react-scripts build &amp;&amp; electron-builder"</span>,</span><br><span class="line">    <span class="attr">"postinstall"</span>: <span class="string">"electron-builder install-app-deps"</span>,</span><br><span class="line">    <span class="attr">"postuninstall"</span>: <span class="string">"electron-builder install-app-deps"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アプリケーション起動時のエントリポイントの設定に当たる<code>&quot;main&quot;: &quot;main.js&quot;</code>は<code>&quot;main&quot;: &quot;electron/starter.js&quot;</code>のように、ディレクトリを分けて整理するような事例など諸説確認しましたが、今回はクイックスタートの雰囲気に合わせようと思います。</p><p>加えて、Vue CLIプラグインの場合自動生成された<code>background.js</code>が担当してくれた部分を手動で書き換えます。</p><p>Vue CLIが自動生成した<code>background.js</code>は若干Vue.js向けの拡張が為されているため、<a href="https://github.com/electron/electron-quick-start" target="_blank" rel="noopener">electron-quick-start</a>の内容をベースに<code>index.html</code>のパスなどを調整します。</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modules to control application life and create native browser window</span></span><br><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">"electron"</span>);</span><br><span class="line"><span class="keyword">const</span> app = electron.app;</span><br><span class="line"><span class="keyword">const</span> BrowserWindow = electron.BrowserWindow;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      preload: path.join(__dirname, <span class="string">'preload.js'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// and load the index.html of the app.</span></span><br><span class="line">  mainWindow.loadFile(<span class="string">'build/index.html'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  <span class="comment">// mainWindow.webContents.openDevTools()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.whenReady().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  createWindow()</span><br><span class="line">  </span><br><span class="line">  app.on(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// On macOS it's common to re-create a window in the app when the</span></span><br><span class="line">    <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">    <span class="keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="number">0</span>) createWindow()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed, except on macOS. There, it's common</span></span><br><span class="line"><span class="comment">// for applications and their menu bar to stay active until the user quits</span></span><br><span class="line"><span class="comment">// explicitly with Cmd + Q.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) app.quit()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this file you can include the rest of your app's specific main process</span></span><br><span class="line"><span class="comment">// code. You can also put them in separate files and require them here.</span></span><br></pre></td></tr></table></figure><p>上記ファイルは<code>preload.js</code>を読み込んでいるため、こちらも同様にディレクトリ直下に作成します。</p><figure class="highlight js"><figcaption><span>preload.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All of the Node.js APIs are available in the preload process.</span></span><br><span class="line"><span class="comment">// It has the same sandbox as a Chrome extension.</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> replaceText = <span class="function">(<span class="params">selector, text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(selector)</span><br><span class="line">    <span class="keyword">if</span> (element) element.innerText = text</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> type <span class="keyword">of</span> [<span class="string">'chrome'</span>, <span class="string">'node'</span>, <span class="string">'electron'</span>]) &#123;</span><br><span class="line">    replaceText(<span class="string">`<span class="subst">$&#123;type&#125;</span>-version`</span>, process.versions[type])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>package.json</code>の修正、<code>main.js</code>, <code>preload.js</code>の配置が完了したら、いよいよ起動です。</p><p>下記コマンドを実行するとElectronアプリケーションが起動します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run electron:serve</span><br></pre></td></tr></table></figure><p>無事に成功しました。</p><p><img src="/images/20210107/image_20.png" alt=""></p><p>アプリケーションのビルドは下記コマンドです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run electron:build</span><br></pre></td></tr></table></figure><p>dis_electron配下にアプリケーションがビルドされました。<br>package.jsonに何も設定が無いとdistディレクトリに生成されます。</p><img src="/images/20210107/image_21.png" class="img-small-size"><p>作業の抜け漏れ、typoの確認や、理想のディレクトリ構成を検討して迷うコストを鑑みると体感でVue.jsの3倍くらいの時間がかかる感触でした。</p><p>既存のReact製アプリをElectron化したい、Vueより慣れてるフレームワークがある、など事情はあると思いますので、どちらが良いかはチーム構成と趣味次第ですが、エッジケースの挙動や脆弱性の穴埋め等をライブラリ側である程度保証してくれるVue CLIプラグインの利点は大きいかなと感じています。</p><h2 id="Vue-js（ブラウザ）でできてElectronアプリでできないこと"><a href="#Vue-js（ブラウザ）でできてElectronアプリでできないこと" class="headerlink" title="Vue.js（ブラウザ）でできてElectronアプリでできないこと"></a>Vue.js（ブラウザ）でできてElectronアプリでできないこと</h2><p>無いといっても良いかなというレベル感です。</p><p>Webアプリケーションとして一通りの機能を持ったアプリケーションをVue.js x Electronの組み合わせで作りました。最初は技術的実現性を調査しながら実装を進めていく形になりますが、Electronの問題でどうしてもできなかったという機能はありませんでした。少々の調査や努力が必要だった部分はあります。</p><p>当初心配だった部分の一例を紹介します。</p><blockquote><p>httpクライアントライブラリ(axiosなど)を用いた外部APIへのアクセスは可能か</p></blockquote><p>→問題なく可能だった</p><blockquote><p>VueRouterを用いた画面遷移は可能か</p></blockquote><p>→<a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/commonIssues.html#blank-screen-on-builds-but-works-fine-on-serve" target="_blank" rel="noopener">少々設定が必要</a>だが動いた</p><blockquote><p>ファイルのダウンロード、生成は可能か</p></blockquote><p>→問題なく可能だった</p><blockquote><p>パスワード付きProxy認証を通すことは可能か</p></blockquote><p>→ライブラリ側での担保はされないので自前で実装する必要があった</p><blockquote><p>クライアント証明書を利用することは可能か</p></blockquote><p>→可能、クライアント証明書が端末に複数インストールされているような場合は自前で選択処理を実装する必要があった</p><p>初めて触る場合は色々不安になると思いますが、想像以上に大丈夫でした。<br>これらハマりどころやtipsは今あるもの、今後気が付いたもの含め適宜記事にしたいと考えています。</p><h2 id="Electronアプリの開発フロー"><a href="#Electronアプリの開発フロー" class="headerlink" title="Electronアプリの開発フロー"></a>Electronアプリの開発フロー</h2><p>上記の通り、Vue.jsとして動かしているときは問題なかったがビルドすると動かなくなった、というケースは少ないです。（0ではありません）</p><p>そのため、基本は完全にWeb開発の流れで、Vue.jsのホットリロードを効かせた状態でWebアプリとして開発しています。機能が出来上がった段階でElectronアプリケーションとしてビルドし、ビルドが通り、正常に動作するか確認するような形で開発を行うことが可能です。Electronアプリケーションとして起動しつつ、ホットリロードを行う<a href="https://www.npmjs.com/package/electron-reload" target="_blank" rel="noopener">electron-reload</a>のようなパッケージも存在します。万全を期すために、これを導入して常にElectronアプリケーションとして問題ないか検証しながら作業するようなフローにすることも可能かもしれません。導入コストや通常時の動作が重くなる可能性などを考慮し、私のチームでは現在導入していません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ElectronはWebの技術で開発可能な、デスクトップアプリケーションのフレームワークです。</p><p>クロスプラットフォームで、フロントエンドライブラリに依存しない、デスクトップアプリケーションの開発プラットフォームがElectronです。ライブラリの導入以外でWeb開発と開発手法が大きく異なるようなことはありません。</p><p>記事にするために整理したhello world状態のアプリケーション2種類をプライベートのgithubで公開しています。参考になれば、もしくはこれをベースに何かアプリケーションを作って頂ければ嬉しいです。</p><ul><li><a href="https://github.com/maito1201/vue-cli-electron-sample" target="_blank" rel="noopener">vue-cli-electron-sample</a></li><li><a href="https://github.com/maito1201/react-electron-sample" target="_blank" rel="noopener">react-electron-sample</a></li></ul><p>余談ですが、昨年の<a href="https://qiita.com/advent-calendar/2020/kuso-app" target="_blank" rel="noopener">Qiita クソアプリ Advent Calendar 2020</a>でもElectronを使った開発事例がありましたね。</p><p>お仕事で役立つことはもちろんですが、ちょっとした便利ツールでも、クソアプリ Advent Calendar向けの小ネタでも、いつものWeb開発からちょっと趣向を変えて、デスクトップアプリケーションという選択肢を視野に入れていただければ幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;最近Electronを用いたアプリケーション開発を行っています。技術ブログで今まで取り扱った事のないテーマであるため、まずは入門記事を書いてみました。&lt;/p&gt;
&lt;h2 id=&quot;Electronとは&quot;&gt;&lt;a href=&quot;#Electron
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="Electron" scheme="https://future-architect.github.io/tags/Electron/"/>
    
      <category term="クロスプラットフォーム" scheme="https://future-architect.github.io/tags/%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night(第5弾：AWS＆DataPlatform MaaSビジネス編)を開催しました。</title>
    <link href="https://future-architect.github.io/articles/20201228/"/>
    <id>https://future-architect.github.io/articles/20201228/</id>
    <published>2020-12-27T15:00:00.000Z</published>
    <updated>2021-01-15T01:07:45.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIGの山田、町田、多賀です。先日2020/11/25にオンラインにてFuture Tech Nightという社外勉強会を開催しました。今回は第5弾としてAWS＆DataPlatform を活用した、MaaSビジネスの最新事例を紹介しました。</p><ul><li><a href="https://future.connpass.com/event/177093/" target="_blank" rel="noopener">Future Tech Night #1 ~メディア業界変革編～</a></li><li><a href="https://future.connpass.com/event/179387/" target="_blank" rel="noopener">Future Tech Night #2 ～MaaS ビジネス編～</a></li><li><a href="https://future.connpass.com/event/185051/" target="_blank" rel="noopener">Future Tech Night #3 ～船舶IoT Platform編～</a></li><li><a href="https://future.connpass.com/event/188742/" target="_blank" rel="noopener">Future Tech Night #4 〜Go x AWS スマート工場編〜</a></li><li><a href="https://future.connpass.com/event/195568/" target="_blank" rel="noopener">Future Tech Night #5 〜AWS＆DataPlatform MaaSビジネス編〜</a> ← 今回はここ</li></ul><p><img src="/images/20201228/74fb7c65c1ef518a159eb99b5105ef10.png" alt=""></p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>勉強会は以下のような構成で行いました。</p><ul><li>FutureとTechnology Innovation Groupの紹介</li><li>DataPlatform 構築と Tips 紹介</li><li>DataPlatform 蓄積データの外部提供の仕組みの紹介</li></ul><p>多賀からは、DataPlatform の構築方法と設計事例の共有と、 構築にあたって利用したシステム・サービスの Tips の紹介をしました。DataPlatform で必要な要素を分解し、責務を分けた設計事例をお話いたしました。Tips では、バッチ処理・AWS Glue・Airflow についてお話いたしました。<br><img src="/images/20201228/image.png" alt=""></p><p>町田からは、DataPlatformに蓄積されたデータを外部に提供する仕組みを構築するにあたっての検討内容を紹介しました。また、データ提供基盤であるGatewayアプリの全体像をお話しました。</p><p><img src="/images/20201228/2020-12-25_153425.jpg" alt=""></p><h2 id="登壇者からコメント"><a href="#登壇者からコメント" class="headerlink" title="登壇者からコメント"></a>登壇者からコメント</h2><p>町田: 本当はもっと細かい部分で、各要素の詳細や技術的な話をもっとしたかったのですが、諸事情によりかなりモヤっとした中身になってしまい、内容が薄く得るものが少なかったことは残念でした。</p><p>多賀: MaaS サービスを提供するにあたって肝となる、DataPlatform についてお話いたしました。発展途上の中、現状得られた知見をできる限り共有いたしました。少しでも持ち帰ってもらえるものがあったとしたら嬉しいです。</p><h2 id="勉強会でいただいた質問"><a href="#勉強会でいただいた質問" class="headerlink" title="勉強会でいただいた質問"></a>勉強会でいただいた質問</h2><h3 id="Q-リアルタイムデータ連携のKinesisからLambdaって流れありますが、KinesisFirehoseではなく、Lambdaを挟んだのは何故か知りたいです。"><a href="#Q-リアルタイムデータ連携のKinesisからLambdaって流れありますが、KinesisFirehoseではなく、Lambdaを挟んだのは何故か知りたいです。" class="headerlink" title="Q. リアルタイムデータ連携のKinesisからLambdaって流れありますが、KinesisFirehoseではなく、Lambdaを挟んだのは何故か知りたいです。"></a>Q. リアルタイムデータ連携のKinesisからLambdaって流れありますが、KinesisFirehoseではなく、Lambdaを挟んだのは何故か知りたいです。</h3><p>発表時は Firehose の GAがまだだったためと回答いたしましたが、 GA が 2017/08/25 であることから誤りでした。 採用理由ですが、配置先の S3 Bucket と prefix を柔軟に切り替えたかったためが正でした。</p><h3 id="Q-Glueは、CloudWatchなどで定期実行でしょうか？"><a href="#Q-Glueは、CloudWatchなどで定期実行でしょうか？" class="headerlink" title="Q. Glueは、CloudWatchなどで定期実行でしょうか？"></a>Q. Glueは、CloudWatchなどで定期実行でしょうか？</h3><p>いえ、Airflow を利用して定期実行しております。</p><h3 id="Q-Glueの処理結果の正常・異常の監視はどのような方法で、何のステータスを見ていますか？"><a href="#Q-Glueの処理結果の正常・異常の監視はどのような方法で、何のステータスを見ていますか？" class="headerlink" title="Q. Glueの処理結果の正常・異常の監視はどのような方法で、何のステータスを見ていますか？"></a>Q. Glueの処理結果の正常・異常の監視はどのような方法で、何のステータスを見ていますか？</h3><p>Airflow からジョブを起動しており、Airflow ジョブ内で正常・以上のステータスを判定し、エラーを検知する仕組みとしております。</p><h3 id="Q-Airflowについて質問です。StepFunctionsとAirflow比べた時のAirflowの優位性は何でしょうか？"><a href="#Q-Airflowについて質問です。StepFunctionsとAirflow比べた時のAirflowの優位性は何でしょうか？" class="headerlink" title="Q. Airflowについて質問です。StepFunctionsとAirflow比べた時のAirflowの優位性は何でしょうか？"></a>Q. Airflowについて質問です。StepFunctionsとAirflow比べた時のAirflowの優位性は何でしょうか？</h3><p>Python でジョブを実装することができるため、 Python で実現できることがほぼ全て可能になります。 そのため、より柔軟なジョブ設定を行うことができます。</p><h3 id="Q-Redshiftの同時接続で問題は起きたことありますか？"><a href="#Q-Redshiftの同時接続で問題は起きたことありますか？" class="headerlink" title="Q. Redshiftの同時接続で問題は起きたことありますか？"></a>Q. Redshiftの同時接続で問題は起きたことありますか？</h3><p>当環境では、データ量・接続数共に少ない影響で、現状は発生したことはございません。</p><h3 id="Q-LambdaとAPIGateway、どこがどう辛かったんでしょうか。"><a href="#Q-LambdaとAPIGateway、どこがどう辛かったんでしょうか。" class="headerlink" title="Q. LambdaとAPIGateway、どこがどう辛かったんでしょうか。"></a>Q. LambdaとAPIGateway、どこがどう辛かったんでしょうか。</h3><p>ここでは詳細は語れない部分もありますが、Gateway処理を検討していった際に、単純な認証・認可のみのような制御だけではなく、他にもいろいろな制御が必要なことが判り、全て実装していくにはLambdaよりもECSでプロキシのようなアプリとして方が良さそうという判断となりました。</p><h3 id="Q-同時アクセス時の結果整合性はどのように取られてますでしょうか？"><a href="#Q-同時アクセス時の結果整合性はどのように取られてますでしょうか？" class="headerlink" title="Q. 同時アクセス時の結果整合性はどのように取られてますでしょうか？"></a>Q. 同時アクセス時の結果整合性はどのように取られてますでしょうか？</h3><p>ここでは利用量の制限チェックの話として捉えますと、利用量のチェックをする際にDynamoDBの値をチェックしますが、その値は、瞬間的に連続でアクセスした場合は、常に最新のものが取れるとは限りません。<br>ただし、最新の値が取れないことは、ここでは利用ユーザの不利益になることではない（むしろ逆）ため、良しとしています。</p><h3 id="Q-API-Gateway-を多用途に備えようとすると，遅延などの要求を満たすためにはDynamoDBインスタンスの要求スペックが上がっていくと想像しますが，想定以上にコストがかかったなどの苦労話はありますでしょうか"><a href="#Q-API-Gateway-を多用途に備えようとすると，遅延などの要求を満たすためにはDynamoDBインスタンスの要求スペックが上がっていくと想像しますが，想定以上にコストがかかったなどの苦労話はありますでしょうか" class="headerlink" title="Q. API Gateway を多用途に備えようとすると，遅延などの要求を満たすためにはDynamoDBインスタンスの要求スペックが上がっていくと想像しますが，想定以上にコストがかかったなどの苦労話はありますでしょうか"></a>Q. API Gateway を多用途に備えようとすると，遅延などの要求を満たすためにはDynamoDBインスタンスの要求スペックが上がっていくと想像しますが，想定以上にコストがかかったなどの苦労話はありますでしょうか</h3><p>現状では、利用ユーザ・アクセスは少ないため苦労話は今のところは無いです。今後見えてくる課題にはなり得ると思っております。</p><h3 id="Q-サードパーティ製のGUIに優れたETL製品ではなく、Glue-を採用した理由"><a href="#Q-サードパーティ製のGUIに優れたETL製品ではなく、Glue-を採用した理由" class="headerlink" title="Q. サードパーティ製のGUIに優れたETL製品ではなく、Glue を採用した理由"></a>Q. サードパーティ製のGUIに優れたETL製品ではなく、Glue を採用した理由</h3><p>S3 を中心としたデータレイク構築が要件としてあり、 AWS 製品を中心に比較検討を実施した経緯があったためです。他製品も高機能で優れた部分もあるかと思われますが、Glue はフルマネージドで分散処理ができる利便性があり優れたサービスであると考えています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ご参加いただいた方々、ありがとうございました。<br>FutureではFuture Tech Nightの他にも様々なイベントを開催しております。今後も皆様のご参加をお待ちしております。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200925/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200925%2F&key=eed90a27f7b47e9333aee373cceb6203&iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、TIGの山田、町田、多賀です。先日2020/11/25にオンラインにてFuture Tech Nightという社
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>2021年版Pythonの型ヒントの書き方 (for Python 3.9)</title>
    <link href="https://future-architect.github.io/articles/20201223/"/>
    <id>https://future-architect.github.io/articles/20201223/</id>
    <published>2020-12-22T15:00:00.000Z</published>
    <updated>2020-12-23T06:54:28.253Z</updated>
    
    <content type="html"><![CDATA[<p>Pythonに型ヒントが入ってからしばらく経ちます。型ヒントの立ち位置も、なんでもできるアノテーションとして導入されましたが、型ヒント以外の用途はあまり育たず、型ヒントが中心になり、PEPや仕様もそれに合わせて変化したり、より書きやすいように機能が追加されてきました。</p><p>本エントリーでは、Python 3.9時点での最新情報を元に、現在サポート中のPythonバージョン（3.6以上）との互換性の情報も織り交ぜながら、最新の型ヒントの書き方を紹介します。</p><p>本エントリーの執筆には、Pythonの型の有識者の<a href="https://twitter.com/moriyoshit" target="_blank" rel="noopener">@moriyoshi</a>、<a href="https://twitter.com/aodag" target="_blank" rel="noopener">@aodag</a>、<a href="https://twitter.com/tk0miya" target="_blank" rel="noopener">@tk0miya</a> にアドバイスをもらいました。ありがとうございます。</p><h1 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h1><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>Visual Studio Codeの場合は、事前にどのインタプリタを利用するかを設定しておきます。その環境にインストールします。venvを使うにはvenvPathを設定します。</p><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"python.venvPath"</span>: <span class="string">"$&#123;workspaceFolder&#125;/.venv"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mypyを有効にします。デフォルトの動作だと、型付けをしていない関数内部のチェックがされないので、<code>--check-untyped-defs</code>をつけたり、より厳しい<code>--strict</code>をつけたりすると良いでしょう。</p><figure class="highlight plain"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;python.linting.mypyEnabled&quot;: true,</span><br><span class="line">    &quot;python.linting.enabled&quot;: true,</span><br><span class="line">    &quot;python.linting.mypyArgs&quot;: [</span><br><span class="line">        &quot;--ignore-missing-imports&quot;,</span><br><span class="line">        &quot;--follow-imports&#x3D;silent&quot;,</span><br><span class="line">        &quot;--show-column-numbers&quot;,</span><br><span class="line">        &quot;--check-untyped-defs&quot; &#x2F;&#x2F; 追加</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>必要な追加パッケージのインストールが実行されますが、3.9特有の機能はまだPyPIにリリースされている安定板の0.790では対応していません。masterブランチにはいくつかの機能が実装済みなので、0.800リリースまでは最新の開発版をインストールしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/python/mypy.git</span><br><span class="line">$ <span class="built_in">cd</span> mypy</span><br><span class="line">$ git submodule --update init</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><h2 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h2><p>PyCharmはPythonインタプリタ(IntelliJ IDEA Ultimateを使っている場合はSDK設定で追加)の設定をすればmypyのインストールは不要です。</p><p><img src="/images/20201223/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-12-20_10.30.58.png" alt=""></p><h1 id="変数の型の型付け"><a href="#変数の型の型付け" class="headerlink" title="変数の型の型付け"></a>変数の型の型付け</h1><p>変数名の後ろにコロンと型を付与することで型をつけられます。</p><figure class="highlight py"><figcaption><span>変数の型付け</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i_love_python: bool = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代入を後回しにしてもよい</span></span><br><span class="line">i_love_python: bool</span><br><span class="line">i_love_python = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>以前はPythonのコメントの中に記入していましたが、Python 3.5はすでにEOLなので、PyPIで配布されるライブラリ開発者ももう上記の書き方に統一しても問題ないでしょう。</p><figure class="highlight py"><figcaption><span>古い書き方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.5以前の書き方</span></span><br><span class="line">i_love_python = <span class="literal">True</span> <span class="comment"># type: bool</span></span><br></pre></td></tr></table></figure><h1 id="関数やメソッドの型付け"><a href="#関数やメソッドの型付け" class="headerlink" title="関数やメソッドの型付け"></a>関数やメソッドの型付け</h1><p>関数やメソッドは引数リストと返り値の情報を付与できます。返り値がない場合は<code>-&gt; None</code>（あるいは<code>typing.NoReturn</code>）をつけます。</p><figure class="highlight py"><figcaption><span>関数の型付け</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(name: str)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Hello Guido, my name is <span class="subst">&#123;name&#125;</span>'</span></span><br><span class="line"></span><br><span class="line">greeting(<span class="number">10</span>) <span class="comment"># エラー</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返り値がない場合は-&gt; Noneをつける</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_python_version</span><span class="params">()</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    print(sys.version)</span><br></pre></td></tr></table></figure><p>mypyは<code>--check-untyped-defs</code>オプションが付与されていない場合、<code>-&gt; None</code>が付いてない関数は型付けされていないとみなしてエラーチェックしません。返り値がない関数でも忘れずにつけるようにしましょう。PyCharmであれば警告は表示されます。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mypyは返り値宣言されてない関数の中のエラーはチェックしない</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    greeting(<span class="number">10</span>) <span class="comment"># エラーにならない</span></span><br></pre></td></tr></table></figure><h1 id="ユーザー定義クラスの型つけ"><a href="#ユーザー定義クラスの型つけ" class="headerlink" title="ユーザー定義クラスの型つけ"></a>ユーザー定義クラスの型つけ</h1><p>クラスは乱暴にいってしまえば、変数と関数を固めたものであるので、これまで説明してきた要素でほぼ説明できます。</p><figure class="highlight py"><figcaption><span>クラスの型付け</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnidentifiedMysteriousAnimal</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    未確認生物クラス</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    name: str = <span class="string">"unknown"</span> <span class="comment"># デフォルト値</span></span><br><span class="line">    country: str</span><br><span class="line">    year: int</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name: str, country: str, year: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.country = country</span><br><span class="line">        self.year = int </span><br><span class="line"></span><br><span class="line">killerRabbit = UnidentifiedMysteriousAnimal(<span class="string">"殺人ウサギ"</span>, <span class="string">"Great Britain"</span>, <span class="number">1975</span>)</span><br></pre></td></tr></table></figure><p>なお、クラス変数を設定するには、 <code>typing.ClassVar</code>を利用します。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> ClassVar</span><br><span class="line"></span><br><span class="line"><span class="comment"># classの中にこれを追加</span></span><br><span class="line">    joke: ClassVar[bool] = true</span><br></pre></td></tr></table></figure><h1 id="あらゆる型を受け付けるAny"><a href="#あらゆる型を受け付けるAny" class="headerlink" title="あらゆる型を受け付けるAny"></a>あらゆる型を受け付ける<code>Any</code></h1><p>型のある言語にはたいてい「あらゆる型のインスタンスを保持できるany型」があります。Pythonにも<code>typing.Any</code>があります。もちろん、なるべく静的に型を決めていき、<code>Any</code>が登場しないに越したことはないのですが、外部からやってくる情報をハンドリングするときなど、どうしても必要な``ことがあります。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Any</span><br><span class="line"></span><br><span class="line">user_input: Any</span><br></pre></td></tr></table></figure><h1 id="型よりも厳しく、特定の文字列や数値のリテラルのみを許可する"><a href="#型よりも厳しく、特定の文字列や数値のリテラルのみを許可する" class="headerlink" title="型よりも厳しく、特定の文字列や数値のリテラルのみを許可する"></a>型よりも厳しく、特定の文字列や数値のリテラルのみを許可する</h1><p>型ヒントというと、変数に代入できるオブジェクトの型を限定することが想像されますが、「文字列」ではなくて、「特定の文字列」、「数値」ではなく、「特定の数値」など、特定のリテラルのみを保持できる制約を与えることができます。これにより、他の言語のenumのようなことが実現できます。</p><p>これはPython 3.8以降のみ対応していますが、PyPIの<a href="https://pypi.org/project/typing-extensions/" target="_blank" rel="noopener">typing-extensions</a>パッケージを利用すれば以前のバージョンでも利用できます。</p><figure class="highlight py"><figcaption><span>リテラル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.6, 3.7はpip install typing-extensionsが必要</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> typing <span class="keyword">import</span> Literal</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> typing_extensions <span class="keyword">import</span> Literal</span><br><span class="line">    </span><br><span class="line">train_type: Literal[<span class="string">'各駅停車'</span>, <span class="string">'準急'</span>, <span class="string">'急行'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># この文字列は許可されているのでOK</span></span><br><span class="line">train_type = <span class="string">'準急'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># この文字列は許可されていないのでエラー</span></span><br><span class="line">train_type = <span class="string">'超特急'</span></span><br></pre></td></tr></table></figure><h1 id="ジェネリクス"><a href="#ジェネリクス" class="headerlink" title="ジェネリクス"></a>ジェネリクス</h1><p>リストや集合の型付けを行うには、次のように<code>型名[要素の型]</code>、辞書は<code>dict[キーの型, 値の型]</code>など、ブラケットで型変数の設定を行います。mypyは現在リリースされている0.790ではこの書き方はできないので、0.800の開発版が必要です。</p><figure class="highlight py"><figcaption><span>Python3.7以降の書き方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.9以降のみであればこの行は不要</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"></span><br><span class="line">my_favorite_pokemons: list[str] = [<span class="string">"フォッコ"</span>, <span class="string">"ルカリオ"</span>]</span><br></pre></td></tr></table></figure><p>Python 3.8以前はこのような書き方はできず、typingパッケージのものを利用していました。Python 3.9ではこの書き方はdeprecatedになります。Python 3.7とPython 3.8は<code>from __future__ import annotations</code>を先頭に記述すれば使えるようになります。2021年12月がEOLのPython 3.6は<code>__future__</code>を使った回避はできないため、Python 3.6をサポートするのであれば（広く公開するライブラリの場合など）、こちらの書き方が必要です。</p><figure class="highlight py"><figcaption><span>Python3.6もサポートする場合の書き方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line">my_favorite_pokemons: List[str] = [<span class="string">"フォッコ"</span>, <span class="string">"ルカリオ"</span>]</span><br></pre></td></tr></table></figure><p><a href="https://www.python.org/dev/peps/pep-0585/#implementation" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0585/#implementation</a></p><p>新と旧で使うべきジェネリック型定義がどこにあるかは上記のPEPにまとまっています。大雑把にいえば、以前は<code>typing</code>パッケージがそのすべてを担っていましたが、Python 3.9以降は次のように各パッケージに分散されています。</p><ul><li>実際にオブジェクトとして使う型そのものであれば、その型定義をそのまま利用<ul><li>リスト、タプル、辞書などの<code>__builtins__</code>の要素であれば、<code>list</code>、<code>tuple</code>、<code>dict</code>など</li><li><code>collections</code>パッケージの各クラスであれば、<code>collections.deque</code>など</li></ul></li><li>iterable、callableなどのPythonのプロトコル関係は<code>collections.abc</code>以下</li><li>コンテキスト関係は<code>contextlib</code>、正規表現は<code>re</code></li></ul><p>例えば、コールバック用にcallableオブジェクトを関数引数に渡したり、インスタンス変数に保存したいとします。この場合は関数を受け取れる宣言は次のように<code>collections.abc.Callable</code>を使って書きます。型パラメータの最初は引数の型のリスト、後者は返り値です。</p><figure class="highlight py"><figcaption><span>callableな引数の設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Callable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_callback</span><span class="params">(cb: Callable[[str], None])</span> -&gt; <span class="keyword">None</span>:</span></span><br></pre></td></tr></table></figure><p>古い環境は<code>typing.Callable</code>を代わりに使います。</p><figure class="highlight py"><figcaption><span>古い書き方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Callable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_callback</span><span class="params">(cb: Callable[[str], None])</span> -&gt; <span class="keyword">None</span>:</span></span><br></pre></td></tr></table></figure><h2 id="コレクションの種類の使い分け"><a href="#コレクションの種類の使い分け" class="headerlink" title="コレクションの種類の使い分け"></a>コレクションの種類の使い分け</h2><p><code>collections.abc</code>には多数の型があります。今までのコーディングで、これらを細かく区別して利用することは基本的になかったと思いますが、型付けを行うにあたっては、なるべく制約（メソッド）の少ないコレクションを選択する方がポータビリティが上がります。次の図は<code>collections.abc</code>および組み込み型のシーケンスの継承関係（実装上の継承ではなく、メソッドの包含で定義した）の図です。左に行くほど、少ないメソッドを持っており、右側に行くほど、メソッドが多くなります。関数の中で使用しているメソッドを見て、なるべくこの図の左側にある型を選んで使うと良いでしょう。</p><p><img src="/images/20201223/collections.png" alt=""></p><p>例えば、関数の中で引数のシーケンスに対して、<code>for</code>でループを回すだけの使い方をするならば<code>collections.abc.Iterable</code>を、さらに<code>in</code>で存在確認をする必要があれば、<code>Collection</code>を使うと、さまざまなシーケンスのインスタンスを受けて利用できるようになります。ランダムアクセスが必要であれば<code>Sequence</code>を使います。値の変更が必要であれば<code>Mutable</code>がついた型を利用します。</p><p>例えば、引数の型を安易に<code>list</code>を指定してしまうと、<code>set</code>や<code>dict</code>を渡せなくなります。特に慣れているからといって安易に具象型（リスト、タプル、辞書、集合）を設定しない方が良いです。といっても、これらの具象型を使う方が理解はしやすいと思うので、まずはこの具象型を当てはめてみて、使う演算子やメソッドが少なくても済むことをを確認したら、少しずつ左側の型に寄せていくと良いかもしれません。</p><h2 id="タプルと他のシーケンスの違い"><a href="#タプルと他のシーケンスの違い" class="headerlink" title="タプルと他のシーケンスの違い"></a>タプルと他のシーケンスの違い</h2><p>タプルは長さ情報まで固定ですので、要素数分、型を指定します。<code>tuple[int, str, float]</code>など、型を混ぜて指定もできます。一方、リストなどのシーケンスは要素内の全要素が同じ制約になります。1要素だけ設定すればシーケンスの長さによらず、利用できます。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.9の例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要素数があっているのでOK</span></span><br><span class="line">t1: tuple[str, str, str] = (<span class="string">"空飛ぶ"</span>, <span class="string">"モンティ"</span>, <span class="string">"パイソン"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># こちらはあっていないのでNG</span></span><br><span class="line">t2: tuple[str] = (<span class="string">"Monty"</span>, <span class="string">"Python's"</span>, <span class="string">"Flying"</span>, <span class="string">"Circus"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># リストは全要素が同じ型。1つだけ型定義すれば長さは自由</span></span><br><span class="line">l: list[str] = [<span class="string">"Monty"</span>, <span class="string">"Python"</span>, <span class="string">"and"</span>, <span class="string">"the"</span>, <span class="string">"Holy"</span>, <span class="string">"Grail"</span>]</span><br></pre></td></tr></table></figure><p>タプルで同じ型の要素を任意長持つインスタンスに適合する型を書くには、ellipsis演算子（<code>...</code>)を使います。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t: tuple[str, ...] = (<span class="string">"Monty"</span>, <span class="string">"Python's"</span>, <span class="string">"Flying"</span>, <span class="string">"Circus"</span>)</span><br></pre></td></tr></table></figure><h1 id="合併型（Union-Type-オプショナル"><a href="#合併型（Union-Type-オプショナル" class="headerlink" title="合併型（Union Type) / オプショナル"></a>合併型（Union Type) / オプショナル</h1><p>引数の型は常に1種類だけ、とは限りません。条件によって文字列や数字の両方を受け入れる関数を作りたいこともあります。</p><p>Python 3.10では文字列でも数字でもいい、という条件は次のように<code>|</code>を使って書きます。この記法も、mypy 0.790では対応せず、mypyのmasterブランチ版のインストールが必要です。</p><figure class="highlight py"><figcaption><span>合併型</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_year</span><span class="params">(year: int | str)</span> -&gt; int:</span></span><br></pre></td></tr></table></figure><p>Python 3.7から3.9であれば、<code>from __future__ import annotations</code>を記述すればこの記法が使えるようになります。</p><p>Python 3.6もサポートしたい場合は、旧式の<code>typing.Union</code>を利用して書きます。</p><figure class="highlight py"><figcaption><span>古い書き方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Union</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_year</span><span class="params">(year: Union[int, str])</span> -&gt; int:</span></span><br></pre></td></tr></table></figure><p>合併型は同じ型のまま受け入れてくれる関数にそのまま渡す以外は、型を分解しなければ利用できません。<code>isinstance()</code>などで型のチェックを行うと、その条件を見て、ブロック内の型を絞ってくれます。</p><figure class="highlight py"><figcaption><span>ロジック内で型を分離</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_year</span><span class="params">(year: int | str)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(year, int):</span><br><span class="line">        <span class="comment"># ここではyearは数値</span></span><br><span class="line">        <span class="keyword">return</span> year</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># ここではyearは文字列</span></span><br><span class="line">        <span class="keyword">if</span> year.startswith(<span class="string">"昭和"</span>):</span><br><span class="line">            <span class="keyword">return</span> int(year[<span class="number">2</span>:]) + <span class="number">1925</span></span><br><span class="line">        <span class="keyword">elif</span> year.startswith(<span class="string">"平成"</span>):</span><br><span class="line">            <span class="keyword">return</span> int(year[<span class="number">2</span>:]) + <span class="number">1988</span></span><br><span class="line">        <span class="keyword">elif</span> year.startswith(<span class="string">"令和"</span>):</span><br><span class="line">            <span class="keyword">return</span> int(year[<span class="number">2</span>:]) + <span class="number">2018</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported style'</span>)</span><br><span class="line"></span><br><span class="line">print(normalize_year(<span class="string">'昭和55'</span>))</span><br></pre></td></tr></table></figure><p>合併型の1つの形として他の言語でいうnullable（未初期化がありえる）のような概念を表現するために、<code>typing.Optional</code>が提供されています。これは<code>None</code>との合併型と等価です。</p><figure class="highlight py"><figcaption><span>Optionalの定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line">age: Optional[int]</span><br><span class="line">age = <span class="number">18</span>    <span class="comment"># 数値を入れることもできる</span></span><br><span class="line">age = <span class="literal">None</span>  <span class="comment"># 年齢未回答も選択可能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># こうも書ける</span></span><br><span class="line">age: int | <span class="literal">None</span></span><br></pre></td></tr></table></figure><h1 id="キャスト"><a href="#キャスト" class="headerlink" title="キャスト"></a>キャスト</h1><p>合併型や<code>Any</code>など、型が一意に決まらない変数のうち、状況から、特定の型である確信がある場合、キャストを使って特定の型であると処理系に伝える方法が提供されています。本来なら、ifの条件分岐などを行う方法の方が実際の変数の値を見ての判断になりますが、緊急的な脱出ハッチとして利用可能です。</p><figure class="highlight py"><figcaption><span>キャスト</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> cast</span><br><span class="line"></span><br><span class="line">r = httpx.get(<span class="string">'https://api.example.com'</span>)</span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="comment"># Anyからdict[str, str]に変換</span></span><br><span class="line">    res = cast(dict[str, str], r.json())</span><br></pre></td></tr></table></figure><h1 id="関数のオーバーロード"><a href="#関数のオーバーロード" class="headerlink" title="関数のオーバーロード"></a>関数のオーバーロード</h1><p>複数の関数で、入力の型、および返り値の型が異なる関数を作りたいとします。その時に使うのがオーバーロードです。次の例は、画面表示のときの文字数を計算する関数です。入力の型のバリエーションが増える場合は合併型で対応できますし、返り値も合併型で書くことで、雑に対応は可能ですが、入力値の型によって返り値が決定される（例えば、<code>bool</code>の時は<code>bool</code>しか返らない）ことを表現するためにはオーバーロードを使う必要があります。</p><ul><li><code>@overload</code>を付与したスタブ定義を並べて書く。これはmypyなどの型チェック用の情報提供のためだけのもので、Pythonで実際には実行されるときは上書きされて消えるだけなので、実装はellipse演算子(<code>...</code>)や<code>pass</code>でよい</li><li>最後に<code>@overload</code>がつかない実際の実装を書く。これは入出力はオーバーロードしたすべてを受け入れる必要があるので<code>Any</code>を使うか、型を付けないで実装（mypyオプションに<code>--strict</code>をつけるとこれはエラーになるが）のどちらかで実装</li></ul><p>次の関数は、JSON化にあたっての前処理を行う関数です。例えば、JavaScriptは<code>2**53</code>を超える数値は浮動小数点数になってしまうので、規格上は制約はないが実装的にintは入れられないものが多いので<code>float</code>変換するようにしています。</p><figure class="highlight py"><figcaption><span>関数のオーバーロード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JSONに出力するのに安全な形式に変換</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: str)</span> -&gt; str:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: bytes)</span> -&gt; str:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: bool)</span> -&gt; bool:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: int)</span> -&gt; Union[int, float]:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: float)</span> -&gt; float:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: Any)</span> -&gt; Any:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(i, (str, bool, float)):</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">elif</span> isinstance(i, int):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">2</span> ** <span class="number">53</span>:</span><br><span class="line">            <span class="keyword">return</span> float(i)</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f'length only support str and int, but <span class="subst">&#123;type(i)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ここ数年、バージョンアップのたびに大きく改善されてきた型ヒント。今回の3.9でも大きな変化がありました。一部、<code>from __future__</code>を使わないと3.10未満では使えない機能もありました。3.10でもさらに進展予定です。</p><p>ここでは紹介していない、細かい機能もいくつかあります。より詳細な情報は<a href="https://docs.python.org/ja/3/library/typing.html" target="_blank" rel="noopener">typingパッケージ</a>や、関連PEPを見ると書かれています。</p><p>また、<a href="https://mypy.readthedocs.io/en/stable/" target="_blank" rel="noopener">mypyのサイト</a>にあるcheatsheetも参考になると思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pythonに型ヒントが入ってからしばらく経ちます。型ヒントの立ち位置も、なんでもできるアノテーションとして導入されましたが、型ヒント以外の用途はあまり育たず、型ヒントが中心になり、PEPや仕様もそれに合わせて変化したり、より書きやすいように機能が追加されてきました。&lt;/p
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Goでio.Readerをラップしてio.ReadSeekerを作る関数を作った &amp; プロパティベーステストで徹底的にテスト</title>
    <link href="https://future-architect.github.io/articles/20201211/"/>
    <id>https://future-architect.github.io/articles/20201211/</id>
    <published>2020-12-10T15:00:00.000Z</published>
    <updated>2020-12-28T02:07:31.467Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201211/readseeker.png" class="img-small-size"><p><a href="https://qiita.com/advent-calendar/2020/go5" target="_blank" rel="noopener">Goアドベントカレンダーその5</a>の穴埋めです。</p><p>Goではインタフェースをうまく利用することで、ライブラリの柔軟性が大幅にあがります。ライブラリでデータの読み込みを<code>os.File</code>ではなくて、<code>io.Reader</code>で行うようにすれば、メモリの情報を直接<code>bytes.Reader</code>や<code>strings.Reader</code>で渡したり、http.Request.BodyでHTTPクライアントからアップロードされた内容を直接読み込ませたり、とかですね。</p><p>で、<code>io.Reader</code>や<code>io.Writer</code>あたりはこの恩恵に授かりやすいのですが、標準ライブラリのioパッケージで定義されているものの、ごくごくたまーに要求されるが、そのインタフェースを実装している構造体が少なくてついつい慌てがちなのが、<code>io.Seeker</code>です。</p><p>会社のチャットで話題になって、回答はしたものの、裏で自動でバッファリングしてシーク可能にするようなラッパー作れそうだな、と思ってつい書き始めました。</p><ul><li><a href="https://gitlab.com/osaki-lab/iowrapper" target="_blank" rel="noopener">https://gitlab.com/osaki-lab/iowrapper</a></li></ul><p><img src="/images/20201211/Screen_Shot_2020-12-10_at_19.21.58.png" alt=""></p><p><code>io.Reader</code>としてラップ元の<code>io.Reader</code>から読み込まれた内容とか、<code>Seek()</code>呼び出しで内容の読み飛ばしが指示されたときに、内部にバッファリングして、自由にシークできるようにします。バッファサイズはデフォルトで1MBにしていますが、オプションで変更できるようにしました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readSeeker := iowrapper.NewSeeker(reader, iowrapper.MaxBufferSize(<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>)</span><br></pre></td></tr></table></figure><h1 id="徹底的にテストしてみる"><a href="#徹底的にテストしてみる" class="headerlink" title="徹底的にテストしてみる"></a>徹底的にテストしてみる</h1><p>この手の入出力が決まって、なおかつ内部の状態を持つものはとても歯ごたえがあってテストのしがいがあります。いろいろな組み合わせがあるので、テストのカバレッジをあげるのは頭を使います。いくつかチャレンジしてみました。</p><h2 id="ペアワイズ法"><a href="#ペアワイズ法" class="headerlink" title="ペアワイズ法"></a>ペアワイズ法</h2><p>何度か使ったことがある、PICTを使って見ます。次のQiitaの記事が詳しいです。</p><ul><li><a href="https://qiita.com/bremen/items/6eceddc534d87fc797cc" target="_blank" rel="noopener">ペアワイズ法によるテストケース抽出ツール「PICT」を使ってテストケースを85%削減する</a></li></ul><p>M1 macでしたが、git cloneしてmake一発でビルド完了。ビルド時間もごくわずかです。入力パラメータとして、カテゴリとその構成要素をカンマ区切りで書きます。これでpictコマンドに渡すとテストすべき組み合わせがリストで出力されます。</p><figure class="highlight plain"><figcaption><span>state.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seek-whence: start, current, end</span><br><span class="line">seek-offset: negative, zero, positive</span><br><span class="line">read-position: negative, zero, in-buffer, out-of-buffer, end, exceed-end</span><br><span class="line">read-size: zero, in-range, end, exceed-end</span><br></pre></td></tr></table></figure><p>このうち、条件で組み合わせが限定されるもの（確定されるもの、あるいは存在しない組み合わせ）を式で追加できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if [seek-whence] &#x3D; &quot;start&quot; AND [seek-offset] &#x3D; &quot;negative&quot;</span><br><span class="line">  THEN ( [read-position] &#x3D; &quot;negative&quot; );</span><br><span class="line">if [seek-whence] &#x3D; &quot;start&quot; AND [seek-offset] &#x3D; &quot;zero&quot;</span><br><span class="line">  THEN ( [read-position] &#x3D; &quot;start&quot; );</span><br><span class="line">if [seek-whence] &#x3D; &quot;end&quot; AND [seek-offset] &#x3D; &quot;zero&quot;</span><br><span class="line">  THEN ( [read-position] &#x3D; &quot;end&quot; );</span><br><span class="line">if [seek-whence] &#x3D; &quot;end&quot; AND [seek-offset] &#x3D; &quot;positive&quot;</span><br><span class="line">  THEN ( [read-position] &#x3D; &quot;exceed-end&quot; );</span><br></pre></td></tr></table></figure><p>結果はこのように出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ pict state.txt</span><br><span class="line">seek-whenceseek-offset<span class="built_in">read</span>-position<span class="built_in">read</span>-size</span><br><span class="line">currentnegativenegativeexceed-end</span><br><span class="line">startpositivenegativeend</span><br><span class="line">currentzeroexceed-end<span class="keyword">in</span>-range</span><br><span class="line">currentzero<span class="keyword">in</span>-bufferexceed-end</span><br><span class="line">endzeroendend</span><br><span class="line">currentpositiveendexceed-end</span><br><span class="line">currentzeronegativezero</span><br></pre></td></tr></table></figure><p>これを元にテストコードを書けばばっちりです！</p><p>・・・とはなかなかうまくはいきませんでした。</p><p>これを元にテーブルテストの項目を手動で書いてみたのですが、「あ、この条件を足そう」と、カテゴリが増えたり、組み合わせの制約を足したら、がらっと結果が変わってしまって、過去に書いたテストがどれに該当するのか、どれが足りないのかを目視で確認するのが結構大変です。以前にも何度かチャレンジしたものの、やはり同様の理由で途中で放棄しました。出発点のテストのボイラープレート作成用の元データとして使い、コードが成長してきて、後からif文が増えたのでカバレッジ向上のために足したいものがあれば手動で足す・・・みたいな運用に結果的になってしまいました。テーブル駆動テストのネタ作りのための使い捨てと割り切って、組み合わせ算出の電卓として使うのが良さそう。</p><p>テストコードを書きながら書いて設計していくようなサイクルを回して成長させていくテスト駆動開発に組み込むには、乱数の種を固定(<code>/r:N</code>オプション)しつつ、テストケースの中にこのカテゴリの値そのものをどこかに入れておいて、生成されたものと比較して足りないものを出力するみたいな静的解析との組み合わせが必要かな、と。あるいは、この入力をダイレクトにテスト実行時に読み込んでテストケースにしてしまう方法も考えられますが、それであれば、正直このツールを使うよりは次のプロパティベーステストの方が開発のサイクルには合わせやすいと思いました。</p><p>まあ、組み合わせとかカバレッジを考えるには良い題材だと思うので、新入社員研修とかで触らせてみるのは良いかもしれません。</p><h1 id="プロパティベーステスト（PBT"><a href="#プロパティベーステスト（PBT" class="headerlink" title="プロパティベーステスト（PBT)"></a>プロパティベーステスト（PBT)</h1><p>上記のPICTを（初期だけ）使って、テーブルテストを手動で書いて、一通りの実装を完成させるところまではできました。しかし、この手のバッファを扱うものは扱いを間違えると即座にバッファオーバーフローでセキュリティホールで・・・となる修羅の世界。せっかくなので、追加で、<a href="https://github.com/leanovate/gopter" target="_blank" rel="noopener">gopter</a>を使ってプロパティベーステストしたり、ファジングのテストもしました。プロパティベーステストについては次のサイトが日本語でよくわかる説明になっています。</p><ul><li><a href="https://docs.google.com/presentation/d/e/2PACX-1vR6RLKjIUv6ACJRK8Zqc63J0W2ycf7S5j2NoQTkIuwpxyI9DDELFTMH_fPIVbUiYrjEiF787N9t4xc2/pub?start=false&loop=false&delayms=3000" target="_blank" rel="noopener">@ymotongpoo氏によるGoCon仙台の解説</a></li><li><a href="https://qiita.com/rerorero/items/568e227da3939dbf9532" target="_blank" rel="noopener">gopterを使ってGoでProperty Based Testingする</a></li></ul><p>細かい定義とかは追っかけていないですが、形式仕様記述と、ユニットテストの1手法であるテーブル駆動テストの中間ぐらいの感触です。テーブル駆動テストだと、入力値を人力でリスト化し、テストコードに投入して期待する結果が出るかをテストします。形式仕様記述はAlloyをちょっと触っただけなので違う側面があるかもしれませんが、論理的に入出力や内部の状態の関係性を記述し、それを解釈して仕様が矛盾しないかを検証します。</p><h2 id="PICTとの違い"><a href="#PICTとの違い" class="headerlink" title="PICTとの違い"></a>PICTとの違い</h2><p>PICTは、テストケースをなるべく削減するために、問題の発生原因となる因子の組み合わせ数を考慮してなるべく少ないテストケースを生成しますし、入力はenumの組み合わせです。Property Base Testも、因子を与えると、入力値の組み合えわせを生成する点は一緒ですが、こちらは「文字列が入力」と型の指定をすると、空文字列から長い文字列までいろんなバリエーションの文字列を生成してテストの入力とします。自動テスト前提なのでデフォルトで100件とかそれなりの分量のテストを生成します。実際の入力の組み合わせは無限大ありますが、PICT同様、無限大の選択肢の中から、100パターン効率よくいろいろなバリエーションのインプットを生成します。ただたくさん組み合わせを作るだけではなく、エラーが発生したときに、失敗した組み合わせを分析（シュリンク）し、「この要素が原因である」と少し分析したうえでエラーを返してくれます。問題が発生したかどうかだけではなく、問題の解析にも役立ちます。</p><p>PBTはPICTのテストケース生成と異なり、「Aならば結果がBにはならない」みたいな論理的な記述はできません。評価は単にtrue/falseで返すだけなので単にありえない組み合わせならさっさとtrueを返して終了、という方法もできますが、いろいろ考慮されて絞られた100通りのパターンのテストケースを、そこからさらに何割か削ってしまうと、本来テストすべきだったケースも検証がスキップされてしまう可能性があります。そういう無駄玉は打たない方が良いでしょう。</p><h2 id="書いてみたテスト"><a href="#書いてみたテスト" class="headerlink" title="書いてみたテスト"></a>書いてみたテスト</h2><p>今回書いたテストはこんな感じです。プロパティを宣言し、それにテストを書いていきます。プロパティには入力値のジェネレータを渡します。ジェネレータでは文字数の上限とか数値の値の範囲とか細かく制御はできますが、今回みたいなケースの場合、「元のio.Readerのコンテンツよりも少ない数値を入力パラメータに利用したい」みたいなニーズが出てきます。しかし、ジェネレータが生成する値を元に別の値を生成する指定はできません。</p><p>今回は、「読み飛ばす文字列」「実際に読む文字列」「読み残す文字列」と3つの文字列を生成し、それを合成してio.Readerの入力を生成したり、Seek()のオフセット値や読み込む量といった数値を算出しています。Property Base Testの場合はこのようなジェネレータを使ったパズルを解いて、効率よく入力を作り出す方法を考えるところが楽しいところですし、結果の質に影響がある部分です。</p><p>プロパティベーステストがユニットテストと異なるのが、入力時が自動生成なので結果の比較をどうするか考える点です。今回の入力を3つに分けて生成しており、正解のデータも自動生成してから組み込んでいるので、厳密に正しいかどうかテストできます。他に先行実装があってその移植であればそれをテストにもできるでしょう。こちらも考慮が必要です。まあホワイトボックステストですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSuccessfullyRead</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">properties := gopter.NewProperties(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">skipBytesGen := gen.AnyString()</span><br><span class="line">readBytesGen := gen.AnyString()</span><br><span class="line">remainedBytesGen := gen.AnyString()</span><br><span class="line"></span><br><span class="line">properties.Property(<span class="string">"Read successfully with SeekStart"</span>, prop.ForAll(<span class="function"><span class="keyword">func</span><span class="params">(skipBytesSrc, readBytesSrc, remainedBytesSrc <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">skipBytes := []<span class="keyword">byte</span>(skipBytesSrc)</span><br><span class="line">readBytes := []<span class="keyword">byte</span>(readBytesSrc)</span><br><span class="line">remainedBytes := []<span class="keyword">byte</span>(remainedBytesSrc)</span><br><span class="line"><span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">buffer.Write(skipBytes)</span><br><span class="line">buffer.Write(readBytes)</span><br><span class="line">buffer.Write(remainedBytes)</span><br><span class="line"></span><br><span class="line">readSeeker := NewSeeker(&amp;buffer)</span><br><span class="line">readSeeker.Seek(<span class="keyword">int64</span>(<span class="built_in">len</span>(skipBytes)), io.SeekStart)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> output bytes.Buffer</span><br><span class="line">n, err := io.CopyN(&amp;output, readSeeker, <span class="keyword">int64</span>(<span class="built_in">len</span>(readBytes)))</span><br><span class="line"><span class="keyword">if</span> n != <span class="keyword">int64</span>(<span class="built_in">len</span>(readBytes)) &#123;</span><br><span class="line">t.Logf(<span class="string">"Read successfully with SeekStart fail: n(%d) != len(readBytes)()%d\n"</span>, n, <span class="built_in">len</span>(readBytes))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> output.String() != readBytesSrc &#123;</span><br><span class="line">t.Logf(<span class="string">"Read successfully with SeekStart fail: %s != %s\n"</span>, output.String(), readBytesSrc)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Logf(<span class="string">"Read successfully with SeekStart fail: err(%v) != nil\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;, skipBytesGen, readBytesGen, remainedBytesGen))</span><br><span class="line">properties.TestingRun(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ファジング"><a href="#ファジング" class="headerlink" title="ファジング"></a>ファジング</h2><p>PBTのライブラリは、ファジングにも便利です。ありとあらゆる入力値の可能性を与えて、パニックが起きないかどうかの検証です。Goでファジングだと、go-fuzzが有名ですが、gopterを使い回す方が、入力値の型に合わせたデータ生成ができるので使いやすいです。</p><p>今回は、オフセット値や読み込むバイト数をソース文字列とは別に生成器を作っています。入力文字列よりもはるかに大きなオフセットを与えたり、読み込みを行おうとしたりします。このテストでは結果の検証はしなくて、完走したらreturn trueとしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFuzzing</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">properties := gopter.NewProperties(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">srcGen := gen.AnyString()</span><br><span class="line">whenceGen := gen.IntRange(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">offsetGen := gen.Int64()</span><br><span class="line">readBytesGen := gen.Int64()</span><br><span class="line"></span><br><span class="line">properties.Property(<span class="string">"Don't panic"</span>, prop.ForAll(<span class="function"><span class="keyword">func</span><span class="params">(srcStr <span class="keyword">string</span>, whence <span class="keyword">int</span>, offset, readBytes <span class="keyword">int64</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">src := strings.NewReader(srcStr)</span><br><span class="line">readSeeker := NewSeeker(src)</span><br><span class="line">readSeeker.Seek(offset, whence)</span><br><span class="line">io.CopyN(ioutil.Discard, readSeeker, readBytes)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;, srcGen, whenceGen, offsetGen, readBytesGen))</span><br><span class="line"></span><br><span class="line">properties.TestingRun(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Goのインタフェースのラッパーを作ってみたのと同時に、いつもよりも少し気合いを入れてテストを書いてみました。本体のコード量の数倍のテストになりました。</p><p>PICTはお手軽に始められる言語非依存のツールです。テスト駆動開発のサイクルの出発時に状態の組み合わせを考えてみるお手伝いとして使う方が良いな、というのが実感です。</p><p>一方プロパティベーステストはプログラミング言語に合わせて作られているライブラリを利用します。徹底的にテストされてしまうので、テスト駆動開発だといつまでも青くならない、真っ赤になり続けることになるため、テスト駆動開発に組み込むのは少し難いですね。一通り実装が完了したら、セルフQAとしてPBTを使ったテストを書いてみる使い方が良いかな、と思いました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201211/readseeker.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2020/go5&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="PICT" scheme="https://future-architect.github.io/tags/PICT/"/>
    
      <category term="PBT" scheme="https://future-architect.github.io/tags/PBT/"/>
    
  </entry>
  
</feed>
