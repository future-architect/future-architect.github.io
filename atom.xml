<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2022-11-18T02:52:39.381Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MSAL.jsを使ってウェブフロントエンドだけでAzureAD認証する</title>
    <link href="https://future-architect.github.io/articles/20221118a/"/>
    <id>https://future-architect.github.io/articles/20221118a/</id>
    <published>2022-11-17T15:00:00.000Z</published>
    <updated>2022-11-18T02:52:39.381Z</updated>
    
    <content type="html"><![CDATA[<p>AzureADを使って認証を行っている企業は多いと思います。このAzureADを使った場合にはMSAL.jsを使えば認証は楽だぞ、というのはAzureADのサイトには書かれているのですが、OpenID Connectのプロトコルの動きの理解と、ライブラリのAPIがどう対応づいているのかがわからずにちょっと試行錯誤したので、そのメモを残しておきます。</p><p>OAuth 2.1(現在策定中)ではImplicit Code Flowが非推奨になり、Authorization Code FlowにPKCEが追加されて、コード横取り攻撃への耐性が強化されて、モバイルアプリケーションや、ウェブフロントエンドなどのパブリッククライアント（ユーザー側で動作するため攻撃者が自由にいじれる）でも安全に認証できるようになります。OAuth 2.1自体はまだ作業中ではありますが、これはOAuth 2.0から少しずつ追加されたアップデートをまとめたバージョンであり、現在でもこれらの機能は使えます。</p><p>MSAL.js 2.0というMicrosoft製のライブラリはこのPKCE対応をうたっているライブラリなので、このライブラリを使えば、コールバックハンドラーをサーバー側で用意せずとも、ウェブフロントエンドだけで認証が可能となるはずですので、実験してみました。</p><p>実現したいことは</p><ul><li>MSAL.js (npmのパッケージ名は<a href="https://www.npmjs.com/package/@azure/msal-browser">@azure&#x2F;msal-browser</a>)を組み込む</li><li>フロントエンドだけで認証する</li></ul><p>なお、このライブラリには、ReactとAngular向けのフレームワーク向けのラッパーライブラリが提供されていますが、動きを知るために直接このライブラリを使うものとします。</p><h1 id="まずは実験用のサービスをAzureADに登録する"><a href="#まずは実験用のサービスをAzureADに登録する" class="headerlink" title="まずは実験用のサービスをAzureADに登録する"></a>まずは実験用のサービスをAzureADに登録する</h1><p>まずはAzureのActive Directoryのコンソールにアクセスしてアプリケーションを登録します。</p><ul><li>名前は適当に(azuread-testでもなんでも)</li><li>サポートされているアカウントの種類も任意</li><li>プラットフォームの種類は <strong>シングルページアプリケーション(SPA)</strong> 、コールバックURLは<code>http://localhost:5173/callback</code>にする（ローカルで動かす開発サーバーで受けるため）</li></ul><p>なお、すべての項目はあとで修正できますので(アカウント種類はマニフェストエディタでJSONいじる必要があって面倒ですが）、気軽な気持ちで作成できます。また、リダイレクト情報は複数登録できます。</p><img src="/images/20221118a/スクリーンショット_2022-11-09_12.34.58.png" alt="スクリーンショット_2022-11-09_12.34.58.png" width="1200" height="818" loading="lazy"><p>作成したあとにアプリケーションを選ぶと、アプリケーションの基本情報が表示されますが、次の2つのUUID型式のIDはあとで大事になります。</p><ul><li>アプリケーション (クライアント) ID</li><li>ディレクトリ (テナント) ID</li></ul><img src="/images/20221118a/スクリーンショット_2022-11-09_12.37.10.png" alt="スクリーンショット_2022-11-09_12.37.10.png" width="1200" height="710" loading="lazy"><h1 id="ウェブフロントエンドの作成"><a href="#ウェブフロントエンドの作成" class="headerlink" title="ウェブフロントエンドの作成"></a>ウェブフロントエンドの作成</h1><p>今回はVue.jsで作ってみました。認証部分はプラグイン化して使えるようにします。ReactであればContext化すればよい気がします。Vueのアプリケーションを適当に作ります。僕はVite.jsで作りましたが、vue-cliでもNuxt.jsでもなんでもOKです。</p><p>まずはMSAL.jsをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @azure/msal-browser</span><br></pre></td></tr></table></figure><p>次に認証情報を設定するファイルを作成します。先ほど作ったアプリケーションの情報を登録します。</p><figure class="highlight ts"><figcaption><span>authConfig.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Configuration</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@azure/msal-browser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Configuration</span> = &#123;</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">        <span class="attr">authority</span>: <span class="string">&quot;https://login.microsoftonline.com/&#123;テナントID&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">clientId</span>: <span class="string">&quot;&#123;クライアントID&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">redirectUri</span>: <span class="string">&quot;http://localhost:5173/callback&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cache</span>: &#123;</span><br><span class="line">        <span class="attr">cacheLocation</span>: <span class="string">&quot;localStorage&quot;</span>,</span><br><span class="line">        <span class="attr">storeAuthStateInCookie</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>次にプラグインを作ります。今回は基本的にログインしっぱなしの想定で、未ログインアクセスを許容しない前提でいます。もし、ページによっては未ログインを許可してVue Routerでアクセス制御するのであれば、ログインしているかどうかを確認するメソッド（auth.getAllAccounts()が1つもない）を追加しておけば組み込みがしやすいでしょう。</p><figure class="highlight ts"><figcaption><span>authPlugin.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">App</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Configuration</span>, <span class="title class_">PublicClientApplication</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@azure/msal-browser&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">auth</span>: <span class="title class_">PublicClientApplication</span>;</span><br><span class="line"><span class="keyword">let</span> accessToken = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">config: Configuration</span>) &#123;</span><br><span class="line">    auth = <span class="keyword">new</span> <span class="title class_">PublicClientApplication</span>(config);</span><br><span class="line">    <span class="keyword">await</span> auth.<span class="title function_">handleRedirectPromise</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">AuthPluginType</span> = &#123;</span><br><span class="line">    <span class="title function_">login</span>(): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">    <span class="title function_">logout</span>(): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;;</span><br><span class="line">    <span class="title function_">accessToken</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AuthPlugin</span> = &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app: App, config: Configuration</span>) &#123;</span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$auth</span> = &#123;</span><br><span class="line">            <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (auth.<span class="title function_">getAllAccounts</span>().<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    auth.<span class="title function_">setActiveAccount</span>(auth.<span class="title function_">getAllAccounts</span>()[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">const</span> result = <span class="keyword">await</span> auth.<span class="title function_">acquireTokenSilent</span>(&#123;</span><br><span class="line">                        <span class="attr">scopes</span>: [<span class="string">&quot;User.Read&quot;</span>],</span><br><span class="line">                        <span class="attr">redirectUri</span>: config.<span class="property">auth</span>.<span class="property">redirectUri</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    accessToken = result.<span class="property">accessToken</span>;</span><br><span class="line">                    <span class="keyword">return</span> accessToken;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">await</span> auth.<span class="title function_">acquireTokenRedirect</span>(&#123;</span><br><span class="line">                        <span class="attr">redirectStartPage</span>: location.<span class="property">href</span>,</span><br><span class="line">                        <span class="attr">scopes</span>: [<span class="string">&quot;User.Read&quot;</span>],</span><br><span class="line">                        <span class="attr">redirectUri</span>: config.<span class="property">auth</span>.<span class="property">redirectUri</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">async</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">await</span> auth.<span class="title function_">logoutRedirect</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">accessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> accessToken;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>この<code>login()</code>メソッドが肝です。</p><ul><li>すでにログイン済みの場合は<code>PublicClientApplication.getAllAccounts()</code>がユーザー一覧を返すのでアクティブユーザーとして設定する。本当はidTokenClaims.audがクライアントIDと一致しているものを探すというのを丁寧にやった方がいいかもしれないけど、今回のケースではそもそも違うクライアントIDのユーザーアカウントがここに入ることは今のところないので雑に最初の要素をピック。</li><li><code>PublicClientApplication.acquireTokenSilent()</code>はログイン済みであればアクセストークンをAzureADに問い合わせることなく取得してVue.js内で使える形で返すが、未ログインだと例外を投げる。</li><li>未ログインだった場合に<code>PublicClientApplication.acquireTokenRedirect()</code>を使ってAzureADにリダイレクトしてログインを行う。</li></ul><p>いろいろ試行錯誤しましたが、たぶんこれが最小ケースです。</p><p>なお、MSAL.jsにはリダイレクトモードだけでなく、SPA向けのポップアップモードがありますが、Chromeでは動かず、Edgeでしか動きませんでした。そもそも別ウインドウでログイン画面が出るため、未ログイン時の画面のブロックとかを実装するのは手間なので、今回紹介したリダイレクトモードの方が手間が少なくて済むかと思います。あと、ChromeもEdgeも、デフォルトで別ウインドウのポップアップはブロックされるという問題もあります。今のところ選ぶ理由が見当たらないです。</p><p>TypeScript用にプラグインの型定義も書いておきます。</p><figure class="highlight ts"><figcaption><span>auth.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">AuthPluginType</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./authPlugin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;vue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$auth</span>: <span class="title class_">AuthPluginType</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="組み込み"><a href="#組み込み" class="headerlink" title="組み込み"></a>組み込み</h1><p><code>PublicClientApplication</code>の初期化はVue.jsとかよりも先に行います。</p><figure class="highlight ts"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthPlugin</span>, init &#125; <span class="keyword">from</span> <span class="string">&#x27;./authplugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&#x27;./authconfig&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">init</span>(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">AuthPlugin</span>, config);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>MSAL.jsは初期化時に、AzureADからのコールバックでフロントエンドが呼ばれた場合の、クエリー文字列にOAuthの認証コードが付与されている場合には、「コールバックが来たぞ！」と検知して、OpenID Connectの認証処理の続きを行ってくれます。そして、その後<code>redirectStartPage</code>で指定したURLにリダイレクトまでやってくれます。そのために、<code>init()</code>で待ち（正確には<code>auth.handleRedirectPromise()</code>を待つ)を入れています。<code>await</code>を忘れるとエラーが出て認証に失敗します。</p><p>コンポーネントへの組み込みは以下の通りです。プラグインで作成した<code>login()</code>と<code>logout()</code>を呼び出せるようにしています。あとは、アクセストークンもプラグイン経由で取得できますので、あとはこれをサーバーAPIリクエスト時にヘッダーに設定すればOKです。</p><figure class="highlight html"><figcaption><span>App.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$auth</span>.<span class="title function_">logout</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$auth</span>.<span class="title function_">login</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$auth</span>.<span class="title function_">accessToken</span>());　<span class="comment">// アクセストークン表示</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    login test</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="デバッグ"><a href="#デバッグ" class="headerlink" title="デバッグ"></a>デバッグ</h1><p>結構はまったのですが、ログインの途中でとまったときは、セッションストレージにゴミが残ります。この状態でMSAL.jsのAPIを呼んでも、処理中のものがあるというエラーになってしまうので、ブラウザを再起動するか、開発者ツールでセッションストレージを掃除します。</p><p>あとは、 <code>auth.handleRedirectPromise()</code> のPromiseのエラーとか返り値を見てみるのも良いです。</p><h1 id="セキュリティ強度を変えるためのチューニング"><a href="#セキュリティ強度を変えるためのチューニング" class="headerlink" title="セキュリティ強度を変えるためのチューニング"></a>セキュリティ強度を変えるためのチューニング</h1><p>今回は1人1台専用のマシンがある前提のコードになっているため、ブラウザ再起動でもセッションが残るようにlocalStorageに入れていますが、そうでない場合はブラウザを落としたら認証情報もリセットされるようにsessionStorageにしてあげた方が良いでしょう。上記のサンプルコードの<code>authConfig.ts</code>で変更できます。</p><p>あとはこの形式だとサーバーを介さずにフロントだけで認証するため、サーバー側からアクセスの無効化などができません。フロントで作ったトークンをサーバーに送って「使っていいよ」というお墨付きを与える（あるいはユーザーごとに1セッションしか認めず、後からログインしたら先のログインは無効)みたいなロジックとかを作ればそのような問題には対処できるかもしれませんが、それであればフロントエンドだけで認証という方式ではなく、最初からアクセストークンの発行はサーバーに任せた方が良い気もします。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>PKCEの恩恵で、サーバーいらずの認証が実装できました。サーバーで認証する場合、サーバー側に設定を入れる必要があり、ダメだった場合に何度もデプロイしてテストしたり不便でしたが、とても簡単に実装できました。</p><p>サーバー側としては、JWTの検証だけは必要となりますので、そこだけ実装が必要です。MSAL.jsのリポジトリに<a href="https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/on-behalf-of/web-api/index.js#L40-L61">サーバー側でのトークン検証のサンプル</a>(Express利用)があるので、見てみると良いでしょう。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;AzureADを使って認証を行っている企業は多いと思います。このAzureADを使った場合にはMSAL.jsを使えば認証は楽だぞ、というのはAzureADのサイトには書かれているのですが、OpenID</summary>
        
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="Azure" scheme="https://future-architect.github.io/tags/Azure/"/>
    
    <category term="AD" scheme="https://future-architect.github.io/tags/AD/"/>
    
    <category term="MSAL.js" scheme="https://future-architect.github.io/tags/MSAL-js/"/>
    
    <category term="AzureAD" scheme="https://future-architect.github.io/tags/AzureAD/"/>
    
  </entry>
  
  <entry>
    <title>初めての長期インターンでWebアプリ開発を経験しました！</title>
    <link href="https://future-architect.github.io/articles/20221117a/"/>
    <id>https://future-architect.github.io/articles/20221117a/</id>
    <published>2022-11-16T15:00:00.000Z</published>
    <updated>2022-11-17T03:54:01.488Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221117a/toppage.jpg" alt="" width="1200" height="675" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！フューチャーのサマーインターン2022 Engineer Campに参加いたしました、山岸涼です。</p><p>大学では、情報系の学科に所属しており、プログラミングやコンピュータサイエンスを学んでいます。課外活動では、サッカーサークルと、企業が運営している大学生プログラミングコミュニティに所属しています。</p><p>プログラミングでは、コミュニティで提供された課題に対し、2ヶ月間のチーム開発やハッカソン経験をしてきました。しかし、業務的な経験がないため、長期で体験できるインターンを経験したいと思いました。その中で、現場での作業の進め方やコミュニケーションの取り方などを体験したいと考えました。IT業界を中心に就職を考えている私にとって、業務をイメージできる良い経験になると考え応募しました。</p><p>この記事では、インターンで学んだことをまとめていきます！</p><h1 id="参加前のスキル・経験"><a href="#参加前のスキル・経験" class="headerlink" title="参加前のスキル・経験"></a>参加前のスキル・経験</h1><ul><li>独学やコミュニティで習得<ul><li>HTML, CSS, JavaScript, PHP, Git</li></ul></li><li>大学の授業で習得（基本文法は書ける程度）<ul><li>C, C++, Python, Java</li></ul></li><li>チーム開発経験あり</li><li>技術系アルバイトやインターンの経験なし</li><li>資格 なし</li></ul><p>大学からプログラミングを学び始めました。</p><p>最初はC言語から学びましたが、print文が理解するのに3日かかったレベルでした。プログラムはある程度書けるが、実践経験のない、典型的な大学生のスキルセットだと思います。</p><h1 id="インターンの概要"><a href="#インターンの概要" class="headerlink" title="インターンの概要"></a>インターンの概要</h1><p>私は<a href="/articles/20220606b/"><strong>サブスクサービスのWebアプリ開発</strong></a> に参加しました。</p><p>サブスクリプション型サービスにおけるチーム開発を経験します。フロントエンド開発経験（HTML CSS JavaScriptなど）がある前提で、VueやGit、Slackを使った経験（なくてもOK）があれば大丈夫です。</p><p>業務内容は<strong>メディア業界向けクラウドサービスの業務システムの移行</strong>です。こののクラウドサービスは<strong>HTML, CSS, JavaScript</strong>で作られており、これをすべて<strong>Vue.js</strong>に移行していきます。</p><p>従来のシステムでは、保守性が低いことや、案件者からの要望に沿ったカスタマイズが容易ではないことから、システムを刷新し、保守性の確保することが急務でした。そのため、古いコードをVueで作り直す必要がありました。</p><p>なぜVueなのかについては、プロジェクト自体が中規模の開発であること、システムの保守性の確保、カスタムの柔軟性、学習コストが低い、コンポーネントの再利用が可能というメリットがあるためです。</p><h1 id="具体的にやったこと"><a href="#具体的にやったこと" class="headerlink" title="具体的にやったこと"></a>具体的にやったこと</h1><p>インターンでは、メンター2名、インターン生２名のチームで開発を行いました。</p><p>基本はリモートワークで、初日や最終日、同じ配属先の社員との交流会がある日は出社しました。</p><ul><li>環境構築とVueの基礎理解</li><li>開発</li><li>フィードバックと修正</li><li>テスト</li></ul><h2 id="環境構築とVueの基礎理解"><a href="#環境構築とVueの基礎理解" class="headerlink" title="環境構築とVueの基礎理解"></a>環境構築とVueの基礎理解</h2><p>初週はPCのプロキシ周りの設定と環境構築を行います。PCセットアップのマニュアルが準備されており、メンターの方のサポートを受けつつ行います。次はVueの環境構築です。Node.jsで仮想DOMを構築し、プロジェクトのフォルダをローカルに落とし込みます。</p><p>環境構築が終わると、業務内容やクラウドサービスの概要についての理解に時間をあてます。</p><p>私はVueが未経験でしたので、Vueの基礎知識や社内ライブラリの概要がまとまったリファレンスを活用して、基礎知識を学んでいきました。</p><h2 id="開発"><a href="#開発" class="headerlink" title="開発"></a>開発</h2><p>ここからがインターンの本題です。<br>業務で用いた技術は下記の通りです。</p><ul><li>言語 : HTML, CSS, JavaScript, Vue.js</li><li>その他 : GitLab, Slack</li><li>エディタ : VsCode</li></ul><p>メンターからタスクを渡され、独自の作業ブランチを作成し、開発に取り掛かります。</p><p>社内のライブラリを用いて、コンポーネントを組み合わせながら、ダイアログや、モーダルなどの機能を開発していきました。</p><p>質問や業務内容の説明などのやりとりはSlackで行いました。開発が一番楽しいです！</p><h2 id="フィードバックと修正"><a href="#フィードバックと修正" class="headerlink" title="フィードバックと修正"></a>フィードバックと修正</h2><p>一通り開発が終わると、実装したファイルを追加し、リモート上に反映させます。プルリクエストを作成し、メンターの方からGitLab上でフィードバックをいただきます。<br>細かな修正箇所や、ミスを指摘されるので、修正を重ねていき、完成に近づけていきます。</p><h2 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h2><p>最終チェックで、見た目や動作がおかしくないかのテストを行い、問題がなければメンターが親ブランチにマージして終了です。</p><p>そして次のタスクが渡され、これを繰り返していきます。</p><p>やることは大きく変わらないので、だんだんと作業スピードがだんだんと上がっていき、少し難しいタスクにも挑戦しました！</p><h1 id="インターン中の1日"><a href="#インターン中の1日" class="headerlink" title="インターン中の1日"></a>インターン中の1日</h1><h3 id="10-00-開始"><a href="#10-00-開始" class="headerlink" title="10:00~ 開始"></a>10:00~ 開始</h3><p>まず最初に「今日の予定、今日の目標、やること」をSlackで社員に報告し、やるべきことを整理します。</p><h3 id="12-00-13-00-休憩"><a href="#12-00-13-00-休憩" class="headerlink" title="12:00~13:00 休憩"></a>12:00~13:00 休憩</h3><p>基本どのタイミングでとってもOKです。</p><p>私は、仕事の区切りがいいところで休憩をし、昼食や昼寝をしていました。</p><p>出社した場合は、社員の方とランチにいきました。</p><h3 id="13-00-17-00-業務再開"><a href="#13-00-17-00-業務再開" class="headerlink" title="13:00~17:00 業務再開"></a>13:00~17:00 業務再開</h3><p>ひたすら開発です。</p><h3 id="17-00-17-30-日次報告"><a href="#17-00-17-30-日次報告" class="headerlink" title="17:00~17:30 日次報告"></a>17:00~17:30 日次報告</h3><p>今日取り組んだこと、目標が達成できたかをメンターと共有します。</p><p>その他の業務連絡や、雑談などをします。業務外での話で盛り上がることがありました笑</p><h3 id="〜19-00-終了"><a href="#〜19-00-終了" class="headerlink" title="〜19:00 終了"></a>〜19:00 終了</h3><p>日報と勤務時間を登録して、勤務終了です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Vueを使ってクラウドサービスの業務システムの移行を行いました。社内独自のライブラリを扱ったため、コードやリファレンスなどからVueの扱い方を理解することが大変でしたが、Slackを通じてメンターの方がサポートしてくださり、または社内勉強会に参加して理解を深めることができました。</p><p>開発では、コードを見ただけで伝わる書き方や、厳格な命名規則が求められることを教わりました。他の社員が書いたコードを見ても、明示的な関数名や、コメントでコードの動きの説明がなされており、今後身に付けるべき力だと感じました。</p><p>また、エンジニアに必要なマインドセットとして、開発に携わる際に、そこで使われる技術の仕組みを理解しようとするマインドをもつことが大切であることを教わりました。</p><p>そのマインドを持って開発に取り組むことで、違うプロジェクトで異なる技術を使う機会があったとしても、技術のインプットが早く、応用が効くことを学びました。</p><p>インターン後も、身につけたVueの知識を自分のものにしていきます。仕組みの部分や、動きを学ぶという意識を持って勉強していこうと思います。他にもフロントエンド周りの言語やフレームワーク（React, Firebase）を詳しく学び、技術の選定や言語比較ができるレベルまで取り組んでいきます！</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>1ヶ月という長期インターンで不安な気持ちでいっぱいでしたが、業務だけでなく、同年代のメンバーとの交流会や先輩社員からの講義、ランチやディナーなどのイベントがたくさん詰め込まれており、存分にフューチャーを体感でき、刺激と満足感で心がお腹いっぱいでした。</p><p>このような素晴らしい経験をさせていただいたメンターの吉田さん、中村さんをはじめ、HRの方々、同じインターン生の森さんには大変お世話になりました。</p><p>本当にありがとうございました！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221117a/toppage.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;675&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
    <category term="インターン2022" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/"/>
    
  </entry>
  
  <entry>
    <title>Plotly.pyによるデータ可視化のすすめ</title>
    <link href="https://future-architect.github.io/articles/20221116a/"/>
    <id>https://future-architect.github.io/articles/20221116a/</id>
    <published>2022-11-15T15:00:00.000Z</published>
    <updated>2022-11-16T01:23:47.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Plotly-pyによるデータ可視化のすすめ"><a href="#Plotly-pyによるデータ可視化のすすめ" class="headerlink" title="Plotly.pyによるデータ可視化のすすめ"></a>Plotly.pyによるデータ可視化のすすめ</h1><p>7月にキャリア採用していただいて、早3ヶ月が経とうとしています 。Futureの人はみんな自分の知見を積極的に発信していて、自分も乗るしかないこの波にという気持ちで一本書きました。</p><p>現在業務でいわゆるビッグデータを扱っていまして、アウトプットを可視化する機会が多くあります。Pythonでデータ可視化といえば<code>matplotlib</code>が定番で、メンバー単位でのアウトプット共有なら特に不便は無いのですが、顧客への説明資料などに使い回すことを考えると、もう少し見栄え良く仕上げたくなる時があります。しかし、<code>matplotlib</code>はデフォルト設定だと素っ気無いグラフになるので、そこから見栄えを良くしようとするとかなり手間がかかります。</p><p><code>plotly</code>はデフォルトで作成できるグラフが既に美しいので、誰でも手間なく見栄えのいいグラフを作成することができます。（もちろん見栄えがいいだけでなく、見やすいです）<br>しかも特別な設定をしなくても、インタラクティブな操作が可能となっていますので、作成したアウトプットを用いたディスカッションも捗ることでしょう。</p><h2 id="Plotlyとは"><a href="#Plotlyとは" class="headerlink" title="Plotlyとは"></a>Plotlyとは</h2><p>plotly はデータ可視化のためのOSSで、MITライセンスなので自由に無料で利用することが可能です。アカウント登録なども不要です。手間をかけずに美しいグラフが作成できることと、インタラクティブな操作性を特徴としています。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>今回はPlotlyのインストールから簡単なグラフ作成方法までを紹介します。</p><p><strong>ウェブサイト</strong><br><a href="https://plotly.com/python/">https://plotly.com/python/</a></p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p><code>pip</code>でインストールします</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install plotly==5.10.0</span><br></pre></td></tr></table></figure><p><code>Jupyter Lab</code>もサポートしているので、もし使用する場合は<code>jupyterlab</code>および<code>ipywidgets</code> パッケージをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install <span class="string">&quot;jupyterlab&gt;=3&quot;</span> <span class="string">&quot;ipywidgets&gt;=7.6&quot;</span></span><br></pre></td></tr></table></figure><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>以下のコードを試してみます。</p><p><code>python</code>で以下のコードを実行すると、ブラウザが起動してグラフが表示されます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line">fig = px.bar(x=[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>], y=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><img src="/images/20221116a/plotly01.gif" alt="plotly01.gif" width="765" height="448" loading="lazy"><h4 id="グラフ操作"><a href="#グラフ操作" class="headerlink" title="グラフ操作"></a>グラフ操作</h4><p>グラフ上にカーソルを置くとx, yの値が表示されたり、X方向にドラッグ＆ドロップして範囲を指定するとその範囲のみが拡大表示されます。例えば1年間の推移を示す時系列のグラフを作成しつつ、 1ヶ月分だけを拡大して表示させるといったことができます。便利ですね。</p><h4 id="グラフ保存"><a href="#グラフ保存" class="headerlink" title="グラフ保存"></a>グラフ保存</h4><p>作成したグラフはhtmlで保存することで、インタラクティブな操作が可能なグラフをそのまま保存できます。また、右上のカメラアイコンでPNG画像として保存することができます。この場合は静止画として保存されます。</p><p>もちろんグラフの保存はコード上で実行することも可能です（後述）。</p><h2 id="グラフ作成手順"><a href="#グラフ作成手順" class="headerlink" title="グラフ作成手順"></a>グラフ作成手順</h2><h3 id="グラフ作成に使用するモジュール"><a href="#グラフ作成に使用するモジュール" class="headerlink" title="グラフ作成に使用するモジュール"></a>グラフ作成に使用するモジュール</h3><p><code>plotly</code>は大きく分けて２種類のサブモジュールがあり、公式サイトでは以下のように説明されています。</p><blockquote><ul><li><code>Plotly Express</code>: high-level interface for data visualization</li><li><code>Graph Objects</code>: low-level interface to figures, traces and layout</li></ul></blockquote><p><code>plotly Express</code>の方がパラメーターがシンプルで少ないコードでグラフ作成が可能ですが、<code>Graph Objects</code>の方が細やかなグラフ作成が可能です。<code>Graph Objects</code>の方が<code>matplotlib</code>の使い方に近いと思います。今回は<code>Graph Objects</code>を使用します。</p><p>※最初は<code>Plotly Express</code>で作成したけど、後になってやりたいことができなくて<code>Graph Objects</code>で作り直すパターンが何度かあるので。。。</p><h4 id="サブモジュールごとの比較"><a href="#サブモジュールごとの比較" class="headerlink" title="サブモジュールごとの比較"></a>サブモジュールごとの比較</h4><p>それぞれのサブモジュールをヒストグラムを作成します。見た目は全く同じになりますが、<code>Plotly Express</code>の方がコードがややシンプルです。<code>Graph Objects</code>は最初に<code>go.Figure</code>でキャンバスを作成しておいて、そこにグラフを重ねていくというイメージです。（<code>matplotlib</code>の<code>plt.Figure</code>と同じような感じですね）</p><p>ちなみにPlotlyで作成したヒストグラムは拡大表示すると自動でbinが細分化されたりして面白いので、ぜひ試してみてください。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Plotly Expressでヒストグラム作成</span></span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line">df = px.data.tips()</span><br><span class="line">fig = px.histogram(df, x=<span class="string">&quot;total_bill&quot;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Graph Objectsでヒストグラム作成</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line">df = px.data.tips()</span><br><span class="line">fig = go.Figure(data=[go.Histogram(x=df[<span class="string">&#x27;total_bill&#x27;</span>])])</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><h3 id="グラフを作成してみる"><a href="#グラフを作成してみる" class="headerlink" title="グラフを作成してみる"></a>グラフを作成してみる</h3><p><code>Graph Objects</code>を使ってグラフを作成します。大まかな流れは以下の通りです。</p><ul><li>インスタンス作成：<code>go.Figure()</code></li><li>グラフ追加：<code>fig.add_trace()</code></li><li>グラフ周りの設定：<code>fig.update_layout()</code></li><li>グラフ表示：<code>fig.show()</code></li><li>グラフの保存：<code>fig.write_html(), fig.write_image()</code><br>※グラフによってはもっと簡単に記述できますが、これが最も汎用的な手順だと思います。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># データ準備（2グループ作成）</span></span><br><span class="line">df = px.data.tips() <span class="comment"># 今回はPlotlyのサンプルデータを利用</span></span><br><span class="line">df1 = df[df[<span class="string">&#x27;time&#x27;</span>]==<span class="string">&#x27;Lunch&#x27;</span>]</span><br><span class="line">df2 = df[df[<span class="string">&#x27;time&#x27;</span>]==<span class="string">&#x27;Dinner&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># インスタンス作成</span></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 料金とチップの散布図（Lunch）</span></span><br><span class="line">fig.add_trace(</span><br><span class="line">  go.Scatter(</span><br><span class="line">    x=df1[<span class="string">&#x27;total_bill&#x27;</span>], y=df1[<span class="string">&#x27;tip&#x27;</span>],</span><br><span class="line">    name=<span class="string">&#x27;Lunch&#x27;</span>, mode=<span class="string">&#x27;markers&#x27;</span>, opacity=<span class="number">0.7</span>,</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 料金とチップの散布図（Dinner）</span></span><br><span class="line">fig.add_trace(</span><br><span class="line">  go.Scatter(</span><br><span class="line">    x=df2[<span class="string">&#x27;total_bill&#x27;</span>], y=df2[<span class="string">&#x27;tip&#x27;</span>],</span><br><span class="line">    name=<span class="string">&#x27;Dinner&#x27;</span>, mode=<span class="string">&#x27;markers&#x27;</span>, opacity=<span class="number">0.7</span>,</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># タイトル、軸ラベル、凡例</span></span><br><span class="line">fig.update_layout(</span><br><span class="line">  title=<span class="string">&#x27;料金とチップの関係 &lt;br&gt; 時間別：Lunch, Dinner&#x27;</span>, <span class="comment"># htmlなので&lt;br&gt;で改行</span></span><br><span class="line">  xaxis=<span class="built_in">dict</span>(title=<span class="string">&#x27;料金($)&#x27;</span>),</span><br><span class="line">  yaxis=<span class="built_in">dict</span>(title=<span class="string">&#x27;チップ($)&#x27;</span>),</span><br><span class="line">  legend=<span class="built_in">dict</span>(</span><br><span class="line">    yanchor=<span class="string">&quot;top&quot;</span>, y=<span class="number">0.99</span>, <span class="comment"># 判例をいい感じの位置に置く</span></span><br><span class="line">    xanchor=<span class="string">&quot;left&quot;</span>, x=<span class="number">0.01</span>,</span><br><span class="line">    bgcolor=<span class="string">&#x27;rgba(255,255,255,0.5)&#x27;</span> <span class="comment"># プロットが隠れないように半透明にする</span></span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p>それでは上記のコードを順番に説明します</p><h4 id="インスタンス作成"><a href="#インスタンス作成" class="headerlink" title="インスタンス作成"></a>インスタンス作成</h4><p><code>plotly.graph_objects</code>を<code>import</code>して、<code>Figure</code>のインスタンスを作成します</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment"># データ準備（2グループ作成）</span></span><br><span class="line">df = px.data.tips() <span class="comment"># 今回はPlotlyのサンプルデータを利用</span></span><br><span class="line">df1 = df[df[<span class="string">&#x27;time&#x27;</span>]==<span class="string">&#x27;Lunch&#x27;</span>]</span><br><span class="line">df2 = df[df[<span class="string">&#x27;time&#x27;</span>]==<span class="string">&#x27;Dinner&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># インスタンス作成</span></span><br><span class="line">fig = go.Figure()</span><br></pre></td></tr></table></figure><h4 id="グラフ追加"><a href="#グラフ追加" class="headerlink" title="グラフ追加"></a>グラフ追加</h4><p>今回はtimeでグループ分けした散布図を描いてみます（LunchとDinner）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 料金とチップの散布図（Lunch）</span></span><br><span class="line">fig.add_trace(</span><br><span class="line">go.Scatter(</span><br><span class="line">x=df1[<span class="string">&#x27;total_bill&#x27;</span>], y=df1[<span class="string">&#x27;tip&#x27;</span>],</span><br><span class="line">name=<span class="string">&#x27;Lunch&#x27;</span>, mode=<span class="string">&#x27;markers&#x27;</span>, opacity=<span class="number">0.7</span>,</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 料金とチップの散布図（Dinner）</span></span><br><span class="line">fig.add_trace(</span><br><span class="line">go.Scatter(</span><br><span class="line">x=df2[<span class="string">&#x27;total_bill&#x27;</span>], y=df2[<span class="string">&#x27;tip&#x27;</span>],</span><br><span class="line">name=<span class="string">&#x27;Dinner&#x27;</span>, mode=<span class="string">&#x27;markers&#x27;</span>, opacity=<span class="number">0.7</span>,</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>これで<code>fig.show()</code>するとこのようなグラフが作成できます。</p><img src="/images/20221116a/newplot.png" alt="newplot" width="848" height="450" loading="lazy"><h4 id="グラフ周りの設定"><a href="#グラフ周りの設定" class="headerlink" title="グラフ周りの設定"></a>グラフ周りの設定</h4><p>続いてグラフタイトル、軸ラベル、凡例を追加します</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># タイトル、軸ラベル、凡例</span></span><br><span class="line">fig.update_layout(</span><br><span class="line">  title=<span class="string">&#x27;料金とチップの関係 &lt;br&gt; 時間別：Lunch, Dinner&#x27;</span>, <span class="comment"># htmlなので&lt;br&gt;で改行</span></span><br><span class="line">  xaxis=<span class="built_in">dict</span>(title=<span class="string">&#x27;料金($)&#x27;</span>),</span><br><span class="line">  yaxis=<span class="built_in">dict</span>(title=<span class="string">&#x27;チップ($)&#x27;</span>),</span><br><span class="line">  legend=<span class="built_in">dict</span>(</span><br><span class="line">    yanchor=<span class="string">&quot;top&quot;</span>, y=<span class="number">0.99</span>, <span class="comment"># 判例をいい感じの位置に置く</span></span><br><span class="line">    xanchor=<span class="string">&quot;left&quot;</span>, x=<span class="number">0.01</span>,</span><br><span class="line">    bgcolor=<span class="string">&#x27;rgba(255,255,255,0.5)&#x27;</span> <span class="comment"># プロットが隠れないように半透明にする</span></span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>完成したグラフ</strong><br><img src="/images/20221116a/plotly02.gif" alt="" width="765" height="448" loading="lazy"></p><h4 id="グラフ表示"><a href="#グラフ表示" class="headerlink" title="グラフ表示"></a>グラフ表示</h4><p>既に登場していますが、<code>fig.show()</code>で作成したグラフを表示します。pythonファイルで実行するとWebブラウザが起動します。Jupyterファイルで実行すると出力セルに表示されます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig.show()</span><br></pre></td></tr></table></figure><h4 id="グラフ保存-1"><a href="#グラフ保存-1" class="headerlink" title="グラフ保存"></a>グラフ保存</h4><p>ブラウザ上で保存できますが、もちろんコード上で保存することもできます。インタラクティブな操作をそのままにしたい場合はhtmlで保存します。パワポに使いたい等、静止画が欲しい場合は画像で保存します。</p><h5 id="htmlで保存"><a href="#htmlで保存" class="headerlink" title="htmlで保存"></a>htmlで保存</h5><p>　参考URL: <a href="https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_html.html">https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_html.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write_html(<span class="string">&#x27;output.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="画像で保存"><a href="#画像で保存" class="headerlink" title="画像で保存"></a>画像で保存</h5><p>　参考URL: <a href="https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_image.html">https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_image.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write_image(<span class="string">&#x27;output.png&#x27;</span>) <span class="comment"># 拡張子で自動的にフォーマットが変わります</span></span><br></pre></td></tr></table></figure><p><strong>画像で保存する場合の前準備</strong><br>静的画像を生成する場合は<code>Kaleido</code>をインストールする必要があります。</p><p>参考URL: <a href="https://plotly.com/python/static-image-export/">https://plotly.com/python/static-image-export/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U kaleido</span><br></pre></td></tr></table></figure><h2 id="グラフの紹介"><a href="#グラフの紹介" class="headerlink" title="グラフの紹介"></a>グラフの紹介</h2><p>Plotlyで作成したグラフを紹介します。画像をクリックするとhtmlが開くので、インタラクティブな操作を体験していただければと思います。この他にも色々なグラフが用意されているので、ぜひ公式サイトのグラフライブラリーを見てください。</p><h3 id="グラフライブラリー（公式サイトTop）"><a href="#グラフライブラリー（公式サイトTop）" class="headerlink" title="グラフライブラリー（公式サイトTop）"></a>グラフライブラリー（公式サイトTop）</h3><ul><li><a href="https://plotly.com/python/">Plotly Open Source Graphing Library for Python</a></li></ul><p>色々な種類のグラフがソースコード付きで公開されているので、何かグラフ化したいデータがある時は、まずここを参考にするのがいいと思います。アウトプットのイメージを固めつつ、足りないところはリファレンスで補いましょう。見た目が綺麗で見やすいので、勉強になります。</p><h3 id="APIリファレンス"><a href="#APIリファレンス" class="headerlink" title="APIリファレンス"></a>APIリファレンス</h3><ul><li><a href="https://plotly.com/python-api-reference/">Python API reference for <code>plotly</code></a></li></ul><p>様々な項目が設定可能で、一通り眺めるのも一苦労なのでグラフライブラリーで分からない設定をしたいときに参考にするのがいいと思います。凝り出すとコードが長くなりがちです😅</p><h3 id="散布図＋折れ線グラフ"><a href="#散布図＋折れ線グラフ" class="headerlink" title="散布図＋折れ線グラフ"></a>散布図＋折れ線グラフ</h3><p><code>go.Scatter()</code>(線グラフもScatterで作成します)<br><img src="/images/20221116a/plotly_lines.gif" alt="" width="1020" height="440" loading="lazy"></p><h3 id="時系列の折れ線グラフ"><a href="#時系列の折れ線グラフ" class="headerlink" title="時系列の折れ線グラフ"></a>時系列の折れ線グラフ</h3><p><code>go.Scatter()</code><br><img src="/images/20221116a/plotly_stock.gif" alt="" width="1023" height="447" loading="lazy"></p><h3 id="ヒストグラム"><a href="#ヒストグラム" class="headerlink" title="ヒストグラム"></a>ヒストグラム</h3><p><code>go.Histogram()</code><br><img src="/images/20221116a/plotly_histogram.gif" alt="" width="793" height="397" loading="lazy"></p><h3 id="2次元ヒストグラム-with-散布図"><a href="#2次元ヒストグラム-with-散布図" class="headerlink" title="2次元ヒストグラム with 散布図"></a>2次元ヒストグラム with 散布図</h3><p><code>go.Histogram2d()</code> &amp; <code>go.Scatter()</code><br><img src="/images/20221116a/plotly_2dhist.gif" alt="" width="541" height="545" loading="lazy"></p><h3 id="マップ"><a href="#マップ" class="headerlink" title="マップ"></a>マップ</h3><p><code>go.Scattermapbox</code></p><img src="/images/20221116a/plotly_map.gif" alt="" width="479" height="304" loading="lazy"><p>mapboxの地図を利用しています。</p><p><strong>ウェブサイト</strong><br><a href="https://www.mapbox.jp/">https://www.mapbox.jp/</a></p><h2 id="使ってみての所感"><a href="#使ってみての所感" class="headerlink" title="使ってみての所感"></a>使ってみての所感</h2><p>何もせずともインタラクティブな操作ができることに感動しました。たとえば日次データで１年間の時系列に沿った推移を表すグラフを作成すると、どうしても週単位のデータがつぶれますが、Plotlyなら期間選択して拡大表示できます。客先でもも捗りますし、簡易的なダッシュボードとして使えるのではと思います。</p><p>マニュアルは用意されているのですが、項目が膨大過ぎて、目当ての項目を探すのに苦労しました。<br>幸い公式サイトでサンプルがコード付きで多数公開されているので、そこからイメージに合うグラフを探してコードを参考にするのがいいと思いました。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>以上、Plotly.pyの紹介でした。</p><p>Plotlyは美しい見た目とインタラクティブな操作感を手軽に実現できる非常に有用なツールです。パワポ用だけではなく、インタラクティブな操作を生かした簡易的なダッシュボードのような利用方法も可能かと思います。今回紹介した以外にも様々な表現を美しくお手軽に実現できますので、ぜひ利用してみてください！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Plotly-pyによるデータ可視化のすすめ&quot;&gt;&lt;a href=&quot;#Plotly-pyによるデータ可視化のすすめ&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="可視化" scheme="https://future-architect.github.io/tags/%E5%8F%AF%E8%A6%96%E5%8C%96/"/>
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="Plotly" scheme="https://future-architect.github.io/tags/Plotly/"/>
    
    <category term="グラフ" scheme="https://future-architect.github.io/tags/%E3%82%B0%E3%83%A9%E3%83%95/"/>
    
  </entry>
  
  <entry>
    <title>WindowsのVPN切り替えコマンドで学ぶ各シェルのエイリアス設定方法</title>
    <link href="https://future-architect.github.io/articles/20221115a/"/>
    <id>https://future-architect.github.io/articles/20221115a/</id>
    <published>2022-11-14T15:00:00.000Z</published>
    <updated>2022-11-15T03:17:18.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>どうも、気付いたら社会人3年目に突入したオチラルです。</p><p>2022年8月に当時僕のいたPJの後輩である<a href="/authors/%E5%B1%B1%E4%B8%8B%E9%87%8F%E4%B9%8B/">山下さん</a>が、MacでのVPN切り替えコマンドの<a href="/articles/20220818a/">紹介記事</a>を書きました。</p><p>今回は山下さんの元記事をリスペクトしながら、<strong>WindowsでのVPN切り替えコマンド</strong>及び<strong>各シェルにエイリアスを貼る方法</strong>も紹介します。エイリアスを貼れば、好きなコマンドで好きなスクリプトを実行できるようになります。</p><p>ちなみに、山下さんは画面共有した際にすごい早さで僕の知らないコマンドを打ち込み、僕が効率悪くやっていた作業を効率よくこなす、デキすぎる後輩です。</p><h2 id="元記事の紹介"><a href="#元記事の紹介" class="headerlink" title="元記事の紹介"></a>元記事の紹介</h2><ul><li>参考リンク：<a href="/articles/20220818a/">MacのVPNをコマンドでスムーズに切り替えよう</a></li></ul><p>業務上、複数のVPNを利用する必要があるとき、GUIツールでマウスをポチポチ打ち込む場合VPNの切り替えに10秒ぐらい必要になります。しかし、ここでCLIツールでコマンドを打ち込んで切り替えができる場合、<a href="/articles/20220818a/#VPN%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%B0%8E%E5%85%A5%E3%81%AE%E5%8A%B9%E6%9E%9C">2秒ほどまで削減</a>⚡されかなりのストレス軽減になります。</p><p>時間削減もそうですが、GUIツールでマウスを所定の位置に動かして作業するということは思っている以上に脳のリソースを使う作業であり、山下さんの記事を参考にWindowsでのVPN切り替えツールを導入した結果、僕もかなり仕事が捗るようになりました！</p><h2 id="今回やりたいこと"><a href="#今回やりたいこと" class="headerlink" title="今回やりたいこと"></a>今回やりたいこと</h2><p>元記事と同様に筆者は2つのVPN接続ツールを使用しています。</p><ul><li>Cisco社のCisco AnyConnect</li><li>Windows標準のVPN機能</li></ul><p>以上の2つのVPN接続ツールのGUIでの接続&#x2F;切断環境は用意していますが、今回はCLI上のコマンドでVPN接続&#x2F;切断できるようにします。</p><p>目標はコマンド1つ打つことでVPNを切り替えることです。もし、別のOS、VPNツールを使っている場合、そのツールに対応したコマンドを用意しましょう。</p><p>今回はWindowsでのVPN切り替えコマンドの紹介とシェルスクリプトへのエイリアス作成方法も共有します。エイリアスとはコマンドに別名を付けることを指しており、一連のコマンド（シェルスクリプト）を一発で実行できるようになります。</p><p>適切にエイリアス設定が出来た場合CLIにて、 <code>backToTheFutureVpn</code>と打ち込むだけでVPNが切り替わります。<br>既存のコマンド名とダブっていなければ、好きな文字列を指定できます。なのでCLIに打ち込むコマンドは<code>bttf2</code>でも<code>delorean</code>でも<code>ToInfinityAndBeyond</code>でも<code>StriveForGreatness</code>でも<code>hogevpn</code>や<code>fvpn</code>などでも良くなります。</p><h2 id="結果だけ先に教えて欲しい人へ"><a href="#結果だけ先に教えて欲しい人へ" class="headerlink" title="結果だけ先に教えて欲しい人へ"></a>結果だけ先に教えて欲しい人へ</h2><p>煩わしいから、結果だけ頂戴という方のために、早速VPN切り替えコマンドとエイリアス記載箇所を共有します。</p><p>Windowsだと色んなシェルを使いますが、<code>GitBash</code>、<code>PowerShell</code>、<code>コマンドプロンプト</code>すべてのシェルのコマンドとエイリアス設定方法を共有します。（PJ異動したり勤続年数が増えると色んなシェルに詳しくなっていくものですね。）</p><p>各コマンドの<code>&#123;&#125;</code>、<code>$&#123;&#125;</code>の箇所は<strong>該当するVPN名、ユーザー名、パスワード、設定したいエイリアス名などに置き換えて</strong>下さい。または、環境変数に設定して下さい。</p><h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><h4 id="CiscoのCLIツールのパスを通す"><a href="#CiscoのCLIツールのパスを通す" class="headerlink" title="CiscoのCLIツールのパスを通す"></a>CiscoのCLIツールのパスを通す</h4><p>CiscoのCLIツールはWindowsの場合</p><p><code>/c/Program Files (x86)/Cisco/Cisco AnyConnect Secure Mobility Client</code></p><p>にvpncli.exeファイルとして存在してると思います。そのため、</p><figure class="highlight sh"><figcaption><span>vpncli</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#GitBash</span></span><br><span class="line"><span class="string">&quot;C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpncli&quot;</span></span><br><span class="line"><span class="comment">#PowerShell</span></span><br><span class="line">cmd /c <span class="string">&quot;C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpncli&quot;</span></span><br><span class="line"><span class="comment">#Command Prompt</span></span><br><span class="line"><span class="string">&quot;C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpncli&quot;</span></span><br></pre></td></tr></table></figure><p>とコマンドを打てばCLIツールを起動できますが、パスを通せば<code>vpncli</code>と打つだけで起動できるようになります。</p><p>本記事ではパスを通した前提で進めますが、パスの通し方が分からない方でも一旦<code>vpncli</code>を上記のコマンドに置き換えても動くはずです。本記事ではパスとパスの通し方に付いては割愛します。</p><h4 id="vpncli用の入力ファイルを作成する"><a href="#vpncli用の入力ファイルを作成する" class="headerlink" title="vpncli用の入力ファイルを作成する"></a>vpncli用の入力ファイルを作成する</h4><p>どのシェルでもCiscoのCLIツールの仕様により<strong>CLIへの入力を書いた</strong>テキストファイルをどこかに格納しないといけません。</p><p>今回は元記事と同様の箇所に保存します。</p><p>GUIでやってもいいですが、かっこよくCLIで作成します。<br>※Gitbashでしか動かないです。他のシェルでは<code>vi</code>を<code>notepad</code>に置き換えたり<code>code .</code>でvscodeを開いたりして適切に保存して下さい。</p><figure class="highlight sh"><figcaption><span>テキストファイル作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.vpn</span><br><span class="line">vi ~/.vpn/CISCO_VPN.cre</span><br></pre></td></tr></table></figure><p>上記のコマンドでディレクトリとファイルが作成ができます。vi editorが開かられるので<code>i</code>ボタンを押し以下の内容を入力します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;CISCO_VPN_USER_NAME&#125;</span><br><span class="line">&#123;CISCO_VPN_PASSWORD&#125;</span><br><span class="line">y</span><br></pre></td></tr></table></figure><p>完了したら<code>escape</code>　➔ <code>:wq</code> ➔ <code>enter</code>キーの順番で押せばファイル保存ができます。</p><h3 id="各シェルでVPNを切り替えるコマンド"><a href="#各シェルでVPNを切り替えるコマンド" class="headerlink" title="各シェルでVPNを切り替えるコマンド"></a>各シェルでVPNを切り替えるコマンド</h3><p>エイリアス設定時に各コマンドをシェルスクリプトファイルとして保存していないといけません。</p><p>本記事では、<code>~/ShellScripts</code>に<code>ciscoVPN</code>、<code>winVPN</code>という名前で以下のスクリプトを保存した前提でエイリアス設定を次項でします。</p><p>実際にスクリプトファイルを作成する前に、各コマンドが動いていることを確認すると良いです。</p><p>■Cisco Anyconnect切断　➔　Windows標準接続</p><figure class="highlight sh"><figcaption><span>ciscoVPN</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitbash、PowerShell、Command Promptすべて同様</span></span><br><span class="line">vpncli disconnect</span><br><span class="line">rasdial <span class="variable">$&#123;WIN_VPN_NAME&#125;</span> <span class="variable">$&#123;WIN_VPN_USER_NAME&#125;</span> <span class="variable">$&#123;WIN_VPN_PASSWORD&#125;</span></span><br></pre></td></tr></table></figure><p>■Windows標準切断　➔　Cisco Anyconnect接続</p><figure class="highlight sh"><figcaption><span>winVPN</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitbashの場合</span></span><br><span class="line"><span class="comment"># スラッシュにエスケープが必要</span></span><br><span class="line">rasdial <span class="variable">$&#123;WIN_VPN_NAME&#125;</span> //disconnect</span><br><span class="line">vpncli -s &lt; ~/.vpn/CISCO_VPN.cre connect <span class="variable">$&#123;CISCO_VPN_NAME&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>winVPN</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PowerShellの場合</span></span><br><span class="line">rasdial <span class="variable">$&#123;WIN_VPN_NAME&#125;</span> /disconnect</span><br><span class="line"><span class="comment"># リダイレクト機能が未実装のためコマンドプロンプトを使う</span></span><br><span class="line">cmd /c <span class="string">&#x27;vpncli -s &lt; %HOMEPATH%\.vpn\CISCO_VPN.cre connect $&#123;CISCO_VPN_NAME&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>winVPN</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Command Promptの場合</span></span><br><span class="line">rasdial <span class="variable">$&#123;WIN_VPN_NAME&#125;</span> /disconnect</span><br><span class="line">vpncli -s &lt; %HOMEPATH%\.vpn\CISCO_VPN.cre connect <span class="variable">$&#123;CISCO_VPN_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>Gitbashでエイリアスの設定まで成功するとこういったログが表示されます。<br><code>hogevpn</code>が「Cisco Anyconnect切断　➔　Windows標準接続」で<code>backToTheFutureVpn</code>がその逆です。（普段はもっと短いエイリアス設定してます。）</p><img src="/images/20221115a/無題3.png" alt="無題3.png" width="990" height="1893" loading="lazy"><h3 id="エイリアス設定"><a href="#エイリアス設定" class="headerlink" title="エイリアス設定"></a>エイリアス設定</h3><p>前項で作成したスクリプトファイルを実行するエイリアスを<strong>各シェル起動時に読み込まれる設定ファイル（スクリプト）に追記</strong>します。</p><h4 id="GitBash"><a href="#GitBash" class="headerlink" title="GitBash"></a>GitBash</h4><p>Gitbashは<code>/.bash_profile</code>と<code>/.bashrc</code>がシェル起動時に読み込まれるので、好みで好きな方にエイリアスを貼ります。こういった設定は<code>~/.bashrc</code>に書くのが一般的な気がします。</p><p>もしファイルが存在しない場合は作成して下さい。</p><figure class="highlight sh"><figcaption><span>.bashrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> &#123;CISCO_ALIAS_NAME&#125;=<span class="string">&#x27;source ~/ShellScripts/cicoVPN.sh&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> &#123;WIN_ALIAS_NAME&#125;=<span class="string">&#x27;source ~/ShellScripts/winVPN.sh&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h4><p>PowerShellは<a href="https://qiita.com/smicle/items/0ca4e6ae14ea92000d18">この記事</a>を参考に設定しました。<a href="https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.2">公式はここ</a>です。PowerShellではシェル起動時に読み込まれる設定ファイルをプロファイルと言うようです。</p><p>プロファイル作成前に<a href="https://qiita.com/smicle/items/0ca4e6ae14ea92000d18#powershellscript%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E6%A8%A9%E9%99%90%E3%82%92%E4%BB%98%E4%B8%8E">元記事</a>で言われているようにプロファイルでスクリプトを実行するための権限を付与します。</p><p>管理者権限で以下のコマンドを打ちます。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure><p>そして、設定されるユーザーの範囲によって異なる箇所にプロファイルを置くようです。</p><p>僕は個人ユーザーで設定されるように、<code>$HOME\Document\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</code>を作成しました。</p><p>プロファイルには以下の2行を書き込みます。</p><figure class="highlight ps1"><figcaption><span>Microsoft.PowerShell_profile.ps1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-Alias</span> &#123;WIN_ALIAS_NAME&#125; <span class="string">&quot;<span class="variable">$HOME</span>\ShellScripts\winVPN.ps1&quot;</span></span><br><span class="line"><span class="built_in">Set-Alias</span> &#123;CISCO_ALIAS_NAME&#125; <span class="string">&quot;<span class="variable">$HOME</span>\ShellScripts\ciscoVPN.ps1&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Command-Prompt"><a href="#Command-Prompt" class="headerlink" title="Command Prompt"></a>Command Prompt</h4><p>コマンドプロンプトは残念ながら他のシェルと違い分かりやすく読み込まれる設定ファイルはないようです。以下の<strong>2つの方法から選ぶことになります。</strong></p><p>今回はこちらの<a href="https://superuser.com/questions/144347/is-there-windows-equivalent-to-the-bashrc-file-in-linux">StackOverFlowの質問</a>を参考に調べました。</p><p>先に書き込むエイリアスを共有します。スクリプトはどこに置いても良いですが、今回は<code>ShellScripts/cmdProfile.bat</code>を作成します。</p><figure class="highlight ps1"><figcaption><span>cmdProfile.bat</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doskey &#123;WIN_ALIAS_NAME&#125; = <span class="string">&quot;%HOMEPATH%\ShellScripts\winVPN.bat&quot;</span></span><br><span class="line">doskey &#123;CISCO_ALIAS_NAME&#125; = <span class="string">&quot;%HOMEPATH%\ShellScripts\ciscoVPN.bat&quot;</span></span><br></pre></td></tr></table></figure><h5 id="1-レジストリのautorunの設定に読み込むスクリプトを指定する。"><a href="#1-レジストリのautorunの設定に読み込むスクリプトを指定する。" class="headerlink" title="1. レジストリのautorunの設定に読み込むスクリプトを指定する。"></a><strong>1. レジストリのautorunの設定に読み込むスクリプトを指定する。</strong></h5><p>レジストリとはWindowsのシステム、ハードウェアなどの設定がされているファイルです。<a href="https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry">公式</a>では変更を加えることは推奨していません。コマンドプロンプトのcmd.exeのレジストリにAutorunという設定があり、Autorunに設定されたコマンドはコマンドプロンプト起動時に読み込むようになっているそうです。</p><p><a href="https://learn.microsoft.com/ja-jp/windows-server/administration/windows-commands/cmd">公式</a>には読み込まれるレジストリだけ書いてありAutorunが読み込まれるという記載はありませんでしたが、<a href="https://renenyffenegger.ch/notes/Windows/dirs/Windows/System32/cmd_exe/index">何人か</a>の方の<a href="https://hail2u.net/blog/software/cmd-autorun.html">解説記事</a>によるとそうなるようです。苦しいソースで心苦しいですが。。多分Autorunの値が読み込まれる認識で合ってると思います。レジストリ何も分からない。。</p><p>そのため、公式から用意している方法であるレジストリを編集するのが正しい姿な気がしますが、ほとんどの会社の業務用PCはセキュリティの都合上レジストリを編集することは禁止しているかと思いますので、今回は次の方法で設定します。</p><p>こちらの方法を取る場合は<a href="https://hail2u.net/blog/software/cmd-autorun.html">こちらの記事</a>などを参考に設定して下さい。</p><h5 id="2-cmd-exeのショートカットを作成し、起動オプションでスクリプトを実行してから開くようにする"><a href="#2-cmd-exeのショートカットを作成し、起動オプションでスクリプトを実行してから開くようにする" class="headerlink" title="2. cmd.exeのショートカットを作成し、起動オプションでスクリプトを実行してから開くようにする"></a><strong>2. cmd.exeのショートカットを作成し、起動オプションでスクリプトを実行してから開くようにする</strong></h5><p>こちらの<a href="https://learn.microsoft.com/ja-jp/windows-server/administration/windows-commands/cmd">公式の記載</a>や、<a href="https://ss64.com/nt/cmd.html">非公式</a>の有志のまとめてくれたコマンドプロンプトの仕様によると、コマンドプロンプトはいくつかのオプションを付けて起動できます。</p><p>今回使うのは <code>/q</code> <code>/k</code>オプションで、<code>/q</code>はログ出力をさせないオプションで、<code>/k</code>はコマンドプロンプト起動前に指定されたコマンドを実行するというオプションになります。</p><p>コマンドプロンプトは、<code>C:\Windows\System32\cmd.exe</code>を開けば開くようになっていると思いますので、まずこちらの<strong>ショートカットを作成します。</strong> そして、<strong>ショートカットのプロパティ　→　ショートカット　→　リンク先を以下のように書き換えます。</strong></p><p><code>%windir%\system32\cmd.exe /q /k &quot;%HOMEPATH%\ShellScripts\cmdProfile.bat&quot;</code></p><img src="/images/20221115a/無題.png" alt="" width="648" height="987" loading="lazy"><p>これで無事、設定ファイルを読み込みながらを起動するコマンドプロンプトのショートカットができました。ここで作成したショートカット以外を経由しないでコマンドプロンプトを開いた場合作成したプロファイルが読み込まれないので注意して下さい。適宜、タスクバーなどに追加して利用して下さい。</p><p>Windows Terminalを使っている方は、 <strong>設定　→　全般　→　コマンドライン</strong> の箇所に同様のオプションで設定ファイルを読み込むようにすればいいです。（筆者はこっちを使ってます。）</p><img src="/images/20221115a/無題2.png" alt="" width="1200" height="658" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>上記の設定を行いシェルを再度開けば、無事設定したエイリアス名を打ち込めばVPNが切り替わるようになります。</p><p>ちなみに、bashrcはlinuxやmacのターミナルでも読み込まれるので、実はMacとLinuxはGitbashの箇所を参考に設定すればエイリアス設定ができます。今回の記事の応用として、以下のようによく使うディレクトリの移動スクリプトを作ってエイリアス設定すれば煩わしいディレクトリ移動を一瞬でできるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;移動したいディレクトリパス&#125;</span><br></pre></td></tr></table></figure><p>短いコマンドでディレクトリを自由に移動する様を周りに見せつければ何も知らない人から尊敬の念をきっと貰えると思います。</p><p>また、こういった設定ファイルは永続的に通さなくても良さげな環境変数やパスを通すことが多いです。筆者は学生の頃bashrcが何かについて1ミリも理解せず脳死で世の中の記事のコマンドをコピペしていった結果、bashrcがとても汚くなったことがあります。エラーが出ても何を行っているか理解してなかったので<strong>シェル怖い</strong>と思った過去もありますが、今はだいぶ分かるようになりました。</p><p>そのため、過去の自分が読んだときに勉強になるように、今回の記事ではできる限り丁寧に各項で何を行っているか説明しました。過去の僕のような「シェル怖い」な方の助けになったら幸いです。</p><h3 id="おまけ：各コマンドの解説-x2F-振り返り"><a href="#おまけ：各コマンドの解説-x2F-振り返り" class="headerlink" title="おまけ：各コマンドの解説&#x2F;振り返り"></a>おまけ：各コマンドの解説&#x2F;振り返り</h3><p>今回の一連のコマンドを見て疑問に思ったかもしれない箇所の解説&#x2F;振り返りをしたり気ままに語ります。</p><p>コマンドを打つときこんな感じで調べてるんだなと勉強になれば幸いです。</p><h4 id="シェルの違い"><a href="#シェルの違い" class="headerlink" title="シェルの違い"></a><strong>シェルの違い</strong></h4><p>各シェルの差分として大きかったのは以下の4つかと思います。</p><h5 id="パスの指定方法"><a href="#パスの指定方法" class="headerlink" title="パスの指定方法"></a><strong>パスの指定方法</strong></h5><p>こちらは、ホームディレクトリの記載方法が各シェルで違いましたね。<code>%HOMEPATH%</code>、<code>$HOME</code>、<code>~</code>だったかと思います。<code>%</code>や<code>$</code>は環境変数を読み込んでいるだけで、後は各シェルがホームディレクトリの変数をどう設定しているかの違いです。地味に<code>gitbash</code>以外は知らなかったのでググりました。</p><p>ちなみに、普通にホームディレクトリを打っても良いです。記事を書く都合上誰でもコピペして使えるように調べましたが、当初僕のスクリプトには<code>C:\Users\&#123;USER_NAME&#125;</code>と書いてありました。</p><p>また、大きな違いとして、<strong>パスの区切りがスラッシュ<code>/</code>とバックスラッシュ<code>\</code>で違った</strong>と思います。Windows系はバックスラッシュで、その他UNIX系はスラッシュが一般的です。歴史的な経緯があるそうですが、正直超絶初心者キラーです。何度パスが間違ってますと怒られたことか。。僕は未だにどっちがどっちか覚えておらず、いつも<code>pwd</code>などを打ってコピペして確認したりしてます。</p><h5 id="シェルスクリプトの拡張子"><a href="#シェルスクリプトの拡張子" class="headerlink" title="シェルスクリプトの拡張子"></a><strong>シェルスクリプトの拡張子</strong></h5><p>ちゃんと解説してないですし、そもそも調べてないですが、各シェルで実行するシェルスクリプトの拡張子が<code>.ps1</code>、<code>.bat</code>、<code>.sh</code>になっていたかと思います。これは各シェルでのシェルスクリプト実行時の拡張子で、正しい拡張子ではない場合上手く動かなかったのでしょうがなく対応する拡張子に変えました。（総当たりで全パターンを見た訳じゃないので互換性のある拡張子とシェルがあったかもしれないですが。。誰かどんなシェルでも動く神シェルスクリプト拡張子を教えて下さい。）</p><h5 id="エイリアス設定コマンド"><a href="#エイリアス設定コマンド" class="headerlink" title="エイリアス設定コマンド"></a><strong>エイリアス設定コマンド</strong></h5><p>各シェルで完全に違いましたね。<code>各シェル名　＋　エイリアス</code>でググってやりました。特段エラーに遭遇したりはしなかったです。<br>やってることは、</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;エイリアスを貼るコマンド&#125; &#123;付けたいコマンド名&#125; &#123;実行するコマンド（シェルスクリプトファイルを実行する）&#125;</span><br></pre></td></tr></table></figure><p>ですね。</p><p>ちなみに、シェルスクリプトを実行するコマンドは、Windowsのシェルはパスを指定するだけで実行してくれるし、Gitbashの場合<code>source</code>コマンドと後にパスを書くと実行することを利用してます。</p><h5 id="設定ファイル"><a href="#設定ファイル" class="headerlink" title="設定ファイル"></a><strong>設定ファイル</strong></h5><p>軽い気持ちで、「せや全シェルで動くようにしよう」と思い立ったのがこの長い記事の始まりです。元々VPN切り替えはGitbashで設定しようとして上手くいかなかった（WindowsVPN切断時のエスケープに気付かなった）のでPowerShellで設定していましたが、新PJでコマンドプロンプトを使うようになったのでどうせならと思い調べました。各シェルの設定方法が違いすぎてとても勉強になりましたね。</p><p>大学生のときはbashrcが何をやっているか知らずに5,6年ぐらいいじってましたが、「シェル起動時に読み込んでいる」、「bash系のシェルしか読み込んでない」という事実にようやく気付き感動したのが最近のことです。シェルで何気なく打っているコマンドの「<code>.exe</code>ファイルがPCに格納されている」、「OSが勝手に設定している環境変数がある」という事実に気付いたのも最近で、もっと昔にシェルの仕組みの勉強しとけば今まで脳死で実行してたコマンドを理解出来て成長できたろうなと思う今日この頃です。<br>皆さんも世の記事で当たり前のように書かれているオプションの意味を調べる癖を身に着けましょう。</p><p>余談ですが、bashrcを設定ファイルだったりプロファイルと呼ぶことも勉強になりました。実は設定ファイルとググるより<code>bashrc command prompt（コマンドプロンプト）</code>とか<code>bashrc PowerShell</code>と検索した方が記事が見つかりやすかったです。なのでこういったシェル起動時に読み込まれるファイルはbashrcと呼ぶのが世界共通認識のようです（違う</p><h4 id="VPN切り替えの振り返り"><a href="#VPN切り替えの振り返り" class="headerlink" title="VPN切り替えの振り返り"></a><strong>VPN切り替えの振り返り</strong></h4><h5 id="VPN切り替え"><a href="#VPN切り替え" class="headerlink" title="VPN切り替え"></a><strong>VPN切り替え</strong></h5><p>基本的にVPN切断　➔　VPN接続してるだけです。<br>山下さんの元記事を参考に調べました。感謝。</p><h5 id="Windows標準VPN接続・切断"><a href="#Windows標準VPN接続・切断" class="headerlink" title="Windows標準VPN接続・切断"></a><strong>Windows標準VPN接続・切断</strong></h5><p><code>rasdial</code>コマンドですね。dialと名前も付いてますし、オプションに電話帳とか書いてあったので多分古くからあるコマンドです。誰か歴史教えて下さい。</p><p>いくつかの記事を読んだり、コマンド自体のヘルプを見て書きました。今回はスクリプトにユーザー名とパスワードを書いてしまいましたが、外部ファイルに書き込んで読み込むという方法もあると思います。</p><p>ちなみに、<code>rasdial</code>のヘルプは以下のようになってます。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&#123;user_name&#125;&gt;rasdial /<span class="built_in">h</span></span><br><span class="line">使用法:</span><br><span class="line">        rasdial エントリ名 [ユーザー名 [パスワード|*]] [/<span class="type">DOMAIN</span>:ドメイン]</span><br><span class="line">                [/<span class="type">PHONE</span>:電話番号] [/<span class="type">CALLBACK</span>:コールバック番号]</span><br><span class="line">                [/<span class="type">PHONEBOOK</span>:電話帳ファイル] [/<span class="type">PREFIXSUFFIX</span>]</span><br><span class="line"></span><br><span class="line">        rasdial [エントリ名] /DISCONNECT</span><br><span class="line"></span><br><span class="line">        rasdial</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;https://go.microsoft.com/fwlink/?LinkId=521839&#x27;</span> にある</span><br><span class="line">        プライバシーに関する声明を参照してください</span><br></pre></td></tr></table></figure><p>接続は見てわかる通りVPN名、ユーザーネームとパスワード入れるだけですね。切断もだいぶ単純です。</p><p><code>gitbash</code>の切断だけスラッシュにエスケープが必要ということに気付かずだいぶ詰まりましたね。エスケープしないと下のエラーになります。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> rasdial &#123;VPN_NAME&#125; /disconnect</span><br><span class="line">&#123;VPN_NAME&#125; に接続中...</span><br><span class="line">ユーザー名とパスワードを確認中...</span><br><span class="line"></span><br><span class="line">リモート アクセス エラー <span class="number">691</span> - 指定したユーザー名またはパスワードが認識されないか、選択した認証プロトコルがリモート アクセス サーバーで許可されていないため、リモート接続が拒否されました。</span><br><span class="line"></span><br><span class="line">このエラーの詳細については:</span><br><span class="line">        <span class="string">&#x27;hh netcfg.chm&#x27;</span> と入力してください。</span><br><span class="line">        ヘルプでトラブルシューティングのエラー メッセージをクリックし、<span class="number">691</span> を参照してください。</span><br></pre></td></tr></table></figure><p>ググっても原因が分からず諦めていたのですが、今回の記事作成時に再度見てたら単純に<code>/disconnect</code>がコマンドではなく、ユーザー名判定されてるということにようやく気付きました。試しに<code>rasdial &#123;VPN_NAME&#125; //disconnect</code>で上手く動いたときは感動しました。</p><p>rasdialはwindowsのコマンドだしwindows系のシェルでしか上手く動かないんだなと結論付けた数ヶ月前の自分は愚かだったなと思います。bashとwindowsのシェルのスラッシュのエスケープについて調べてないので、あるあるなのかどうかすら知らないので、誰か面白い話あったら教えて下さい。</p><h5 id="Cisco-AnyConnect-VPN接続・切断"><a href="#Cisco-AnyConnect-VPN接続・切断" class="headerlink" title="Cisco AnyConnect VPN接続・切断"></a>Cisco AnyConnect VPN接続・切断</h5><p>vpncliですね。山下さんの元記事があったのでそんな苦労はしてないです。山下さんの記事のリダイレクトとオプションが不思議だったのでそこらへんを調べたりしました。</p><p><code>vpncli</code>のヘルプは下になります。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> vpncli /<span class="built_in">h</span></span><br><span class="line">Cisco AnyConnect Secure Mobility Client (version <span class="number">4.9</span>.<span class="number">06037</span>) .</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2004</span> - <span class="number">2021</span> Cisco Systems, Inc.  All Rights Reserved.</span><br><span class="line">    Usage: vpncli.exe [<span class="type">options</span>] | [<span class="type">cmd</span>] [<span class="type">host</span>]</span><br><span class="line"></span><br><span class="line">       options:</span><br><span class="line">            <span class="literal">-h</span>         Print this usage statement.</span><br><span class="line">            <span class="literal">-v</span>         Print version.</span><br><span class="line">            <span class="literal">-s</span>         Read commands from response file to work non<span class="literal">-interactively</span>.</span><br><span class="line">                       Example: vpncli.exe <span class="literal">-s</span> &lt; response.txt</span><br><span class="line"></span><br><span class="line">       commands: [<span class="type">connect</span>|<span class="type">disconnect</span>|<span class="type">hosts</span>|<span class="type">state</span>|<span class="type">stats</span>]</span><br></pre></td></tr></table></figure><p>vpncliは使ってみると分かりますが、vpncliのコマンドラインが開かれてしまいます。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> vpncli</span><br><span class="line">Cisco AnyConnect Secure Mobility Client (version <span class="number">4.9</span>.<span class="number">06037</span>) .</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2004</span> - <span class="number">2021</span> Cisco Systems, Inc.  All Rights Reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &gt;&gt; state: Disconnected</span><br><span class="line">  &gt;&gt; state: Disconnected</span><br><span class="line">  &gt;&gt; notice: Ready to connect.</span><br><span class="line">  &gt;&gt; registered with local VPN subsystem.</span><br><span class="line">VPN&gt; <span class="literal">-h</span></span><br><span class="line"></span><br><span class="line">[ <span class="type">VPN</span> <span class="type">Connection</span> <span class="type">commands</span> ]</span><br><span class="line">    connect             disconnect        hosts         stats</span><br><span class="line">    state               block             cancel</span><br><span class="line"></span><br><span class="line">[ <span class="type">Misc</span> <span class="type">commands</span> ]</span><br><span class="line">    help                version           <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">For</span> help with a specific command, <span class="keyword">try</span>: help &lt;command&gt;</span><br><span class="line"></span><br><span class="line">VPN&gt;</span><br></pre></td></tr></table></figure><p>この後、disconnectするなり、connectを押して指示に従いVPN名とユーザーネーム、パスワードを入れたりすることになります。ちなみに、connectとだけ打つとVPN名一覧を見れたりします。</p><p>今回使っている<code>-s</code>コマンドはヘルプに書いてある通り、vpncliのコマンドラインに渡す入力をファイルから貰うという意味になります。</p><p>そして、<code>rasdial</code>と違いユーザーネームとパスワードをオプションで指定出来ず、1つずつ入力しないといけない都合上、<code>-s</code>コマンドを使わなければコマンド一発で接続することが出来ませんでした。ちなみに、<code>connect &#123;CISCO_VPN_NAME&#125;</code>を<code>.cre</code>に書き込んでも上手く動いたりします。</p><p>また、面白いのがPowerShellの仕様で、リダイレクト機能である<code>&lt;</code>を打つと以下のエラーが出ます。</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\&#123;user_name&#125;&gt; vpncli <span class="literal">-s</span> &lt; %HOMEPATH%\.vpn\CISCO_VPN.cre connect &#123;CISCO_VPN_NAME&#125;</span><br><span class="line">発生場所 行:<span class="number">1</span> 文字:<span class="number">11</span></span><br><span class="line">+ vpncli <span class="literal">-s</span> &lt; %HOMEPATH%\.vpn\CISCO_VPN.cre connect &#123;CISCO_VPN_NAME&#125;</span><br><span class="line">+           ~</span><br><span class="line">演算子 <span class="string">&#x27;&lt;&#x27;</span> は、今後の使用のために予約されています。</span><br><span class="line">    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException</span><br><span class="line">    + FullyQualifiedErrorId : RedirectionNotSupported</span><br></pre></td></tr></table></figure><p>どうやら、<code>&lt;</code>を利用すること自体禁止されているようで、今後使えるようになるらしいです。知らないですけど、こんなシェル黎明期みたいな文言を見れるとは思いもしませんでした。</p><p>そのため、コマンドプロンプトは<code>cmd</code>で実行できるので、<code>/c</code>のコマンド実行後に閉じるオプションを付けてコマンドプロンプトで実行させてます。</p><h3 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h3><p>こんな長い記事を最後まで読んで頂きありがとうございます。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;どうも、気付いたら社会人3年目に突入したオチラルです。&lt;/p&gt;
&lt;p&gt;2022年8月に当時僕のいたPJの後輩である&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Windows" scheme="https://future-architect.github.io/tags/Windows/"/>
    
    <category term="VPN" scheme="https://future-architect.github.io/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>パスワードレス技術の現状と未来について</title>
    <link href="https://future-architect.github.io/articles/20221114a/"/>
    <id>https://future-architect.github.io/articles/20221114a/</id>
    <published>2022-11-13T15:00:00.000Z</published>
    <updated>2022-11-14T02:07:13.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG の吉岡です。<a href="/articles/20221031a/">秋のブログ週間</a> 10 本目の投稿です。</p><p>2022年の 5 月に Apple, Google, Microsoft そして FIDO Alliance が <a href="https://fidoalliance.org/white-paper-multi-device-fido-credentials/">マルチデバイス対応FIDO認証資格情報</a> を発表してから、パスワードレス技術に対する注目が高まっています。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> パスワードレスの概要について調査してまとめてみました。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ol><li>私たちとパスワード<ol><li>パスワードの抱える問題</li><li>パスワードマネージャ</li><li>公開鍵暗号の活用</li></ol></li><li>パスワードレスと FIDO Alliance<ol><li>FIDO v1.0</li><li>FIDO2</li><li>FIDO の認証フロー</li><li>Passkeys</li></ol></li><li>パスワードレスな未来</li></ol><h2 id="私たちとパスワード"><a href="#私たちとパスワード" class="headerlink" title="私たちとパスワード"></a>私たちとパスワード</h2><p>今日、私たちのデジタルアイデンティティはパスワードに支えられています。私たちは日々 Google で検索し、Netflix を観て、Twitter でつぶやき、Amazon で買い物をしますが、これらすべてのアカウントが、パスワードによって保護されています。</p><p>パスワードは通常 TLS によって安全にクライアントからサーバに転送され、サーバ上で難読化されて保存されるため、攻撃者が任意のパスワードを即座に奪取することは困難です。しかしながら、秘密鍵であるパスワードを他者と共有する方法は、本質的で避けることのできない問題を複数孕みます。</p><h3 id="パスワードの抱える問題"><a href="#パスワードの抱える問題" class="headerlink" title="パスワードの抱える問題"></a>パスワードの抱える問題</h3><ol><li>ユーザがパスワードを適切に管理するのは困難である</li><li>サーバや通信経路からパスワードが漏洩することがある</li><li>パスワードにはフィッシング耐性がない</li></ol><h4 id="ユーザがパスワードを適切に管理するのは困難である"><a href="#ユーザがパスワードを適切に管理するのは困難である" class="headerlink" title="ユーザがパスワードを適切に管理するのは困難である"></a>ユーザがパスワードを適切に管理するのは困難である</h4><p><a href="https://www.ipa.go.jp/security/anshin/account_security.html">IPA</a> によると、パスワードは、できるだけ長く、複雑で、使い回さないものとすべきだそうです。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>それはそうなのですが、このベストプラクティスを人間が実践することは事実上不可能です。私たちは数百のアカウントを保持しています。そのアカウント全てに対して、ユニークでランダムな文字列を記憶することはできないでしょう。残念なことに、複数のサービスでパスワードを使い回しているユーザも多くいるようです。</p><h4 id="サーバや通信経路からパスワードが漏洩することがある"><a href="#サーバや通信経路からパスワードが漏洩することがある" class="headerlink" title="サーバや通信経路からパスワードが漏洩することがある"></a>サーバや通信経路からパスワードが漏洩することがある</h4><p>ユーザがパスワードを適切に管理していたとしても、通信経路やサーバにセキュリティ上の不備がある場合、パスワードが漏洩し、ユーザのアカウントが危険に晒される場合があります。通常、パスワードは難読化された上でデータベースに保存されますが、<a href="https://www.ogis-ri.co.jp/news/1272165_6734.html">平文で保存されたパスワードが漏洩した事例</a> も存在します。ユーザにとって、ウェブサービスが適切に管理・運営されていることを断定的に知る術はなく、パスワードの使用には本質的な危険が伴います。</p><h4 id="パスワードにはフィッシング耐性がない"><a href="#パスワードにはフィッシング耐性がない" class="headerlink" title="パスワードにはフィッシング耐性がない"></a>パスワードにはフィッシング耐性がない</h4><p>パスワードは、人間であるユーザが直接入力することのできる文字列であり、フィッシング耐性がありません。普段からフィッシング詐欺の被害に遭わないよう注意している人であっても、急いでいるときや慌てているときに、適切に入力先ウェブサイトの真正性を確かめるよう徹底することは、簡単なことではありません。また、<a href="https://jpn.nec.com/cybersecurity/blog/220107/index.html">ミスリード URL やホモグラフ攻撃</a> に常に気をつける必要があるというのは、それだけでも大きな心理的負担です。パスワードには本質的にフィッシング耐性がなく、人間の注意力に期待するのは無謀でしょう。</p><h3 id="パスワードマネージャ"><a href="#パスワードマネージャ" class="headerlink" title="パスワードマネージャ"></a>パスワードマネージャ</h3><p>このようなパスワードの惨状に際して、パスワードマネージャを利用することが、現時点でのベストプラクティスであり、唯一のまともな解決策であると筆者は考えています。プラットフォーマーとして Apple は iCloud Keychain を、Google は Google Password Manager を提供していますし、サードパーティとしても 1Password や Bitwarden、Dashlane のような有力なプレイヤーが存在します。</p><p>ユーザは信頼できるパスワードマネージャを適切に使用することで、パスワードに潜む問題をある程度解消することができます。パスワードマネージャはユニークでランダムなパスワードを作成・管理することができ、また、常にオートフィル機能を使うようにすれば、フィッシング被害を受ける可能性も大きく下げることができます。</p><p>ところがパスワードマネージャも銀の弾丸ではありません。オートフィルが活用できないような場面では相変わらずフィッシングの被害を受ける可能性がありますし、サーバからパスワードが漏洩するような事態に対しても、ユーザは無防備のままです。</p><h3 id="公開鍵暗号の活用"><a href="#公開鍵暗号の活用" class="headerlink" title="公開鍵暗号の活用"></a>公開鍵暗号の活用</h3><p>根本的な問題は、秘密鍵であるパスワードをクライアントとサーバが共有する、という現状のモデルにあります。トランスポート層では 10 年以上前から SSL&#x2F;TLS として公開鍵暗号が大活躍しているのに、アプリケーション層で同様の技術を活用しない手はありません。公開鍵暗号を活用し、パスワードへの過度な依存を軽減するため、2012 年に Fido Alliance が設立されました。</p><h2 id="パスワードレスと-FIDO-Alliance"><a href="#パスワードレスと-FIDO-Alliance" class="headerlink" title="パスワードレスと FIDO Alliance"></a>パスワードレスと FIDO Alliance</h2><p><a href="https://fidoalliance.org/">FIDO Alliance</a> は、パスワードに対する依存を軽減するため、PayPal や Lenovo らにより 2012 年に結成された業界団体です。現在では Amazon, Apple, Google, Microsoft などが参加する一大アライアンスに成長しています。FIDO は、TPM や生体認証機能を備えた認証器 (スマートフォンやセキュリティキー) を活用し、ユーザがパスワードを利用することなくアカウントにログインできるようにすることを目的としており、そのための標準規格をいくつか定めています。</p><p>FIDO が発表した重要な規格には、FIDO 1.0 (2014) と FIDO2 (2018) があります。</p><h3 id="FIDO-v1-0"><a href="#FIDO-v1-0" class="headerlink" title="FIDO v1.0"></a>FIDO v1.0</h3><p>FIDO v1.0 は FIDO UAF (Universal Authentication Framework) と FIDO U2F (Universal 2nd Factor) から成ります。FIDO UAF はスマートフォンのネイティブアプリケーション向けに、公開鍵ベースのパスワードレス認証を規定します。FIDO U2F は、パスワードに加わる第 2 認証要素として、従来通りの OTP でなく、公開鍵暗号を利用できるようにした仕様です。</p><p>この UAF と U2F ですが、仕様編纂者を見るに、UAF は PayPal が、U2F は Google が主体となって仕様策定を進めたようで、全体として足並みが揃っていない感があります。FIDO として一貫性のある仕様の実現には、FIDO2 を待つ必要がありました。</p><h3 id="FIDO2"><a href="#FIDO2" class="headerlink" title="FIDO2"></a>FIDO2</h3><p>FIDO v1.0 にはいくつかの反省点がありました。UAF は半ばスマートフォンのネイティブアプリケーションで使うことを前提としていたため、ウェブブラウザへの応用がすすみませんでしたし、U2F はあくまで従来のパスワードを補完する技術要素にすぎず、完全なパスワードレスを実現するものではありませんでした。これらの問題を解決した最新の FIDO 仕様が、2018 年に発表された FIDO2 です。</p><p>FIDO2 は WebAuthn と CTAP から成る公開鍵ベースの認証技術仕様です。</p><h4 id="WebAuthn"><a href="#WebAuthn" class="headerlink" title="WebAuthn"></a>WebAuthn</h4><p><a href="https://www.w3.org/TR/webauthn/">WebAuthn (Web Authentication)</a> は、FIDO Alliance と W3C の共同作業として、2016 から作業が開始し、2019 年にウェブ標準となった仕様です。WebAuthn はウェブブラウザが認証器とコミュニケーションをとり、キーペアを作成したり、チャレンジに署名したりする方法を定めています。この仕様により、ウェブ開発者はユーザの認証器に対してキーペアの作成やチャレンジへの署名を依頼することができます。2022 年 11 月現在、WebAuthn は Firefox を除くすべての主要なブラウザで完全にサポートされています。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><h4 id="CTAP"><a href="#CTAP" class="headerlink" title="CTAP"></a>CTAP</h4><p><a href="https://fidoalliance.org/specs/fido-v2.1-ps-20210615/fido-client-to-authenticator-protocol-v2.1-ps-errata-20220621.html">CTAP (Client to Authenticator Protocol)</a> は、OS がセキュリティキーのような外部認証器とやりとりする際の低レイヤープロトコルを規定しています。ウェブ開発者が普段意識しないような、ウェブブラウザよりも先にある世界のプロトコルです。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p><h3 id="FIDO-の認証フロー"><a href="#FIDO-の認証フロー" class="headerlink" title="FIDO の認証フロー"></a>FIDO の認証フロー</h3><p>FIDO は複数の仕様を規定しており、それらの関係が複雑なのですが、<strong>公開鍵暗号を利用した認証プロトコル</strong> であるという点は、すべてに共通しています。おおまかに言って、FIDO のパスワードレス認証は次のようなフローを採用しています。</p><h4 id="ユーザ登録"><a href="#ユーザ登録" class="headerlink" title="ユーザ登録"></a>ユーザ登録</h4><p>FIDO 認証のユーザ登録時にはユーザの認証器がキーペアを作成し、公開鍵をサーバに送信します。サーバは公開鍵を保存します。サーバは秘密鍵を知らないため、仮にサーバから情報が漏洩しても、第三者がユーザのアカウントを乗っ取ることはできません。</p><img src="/images/20221114a/register.png" alt="registerシーケンス" width="456" height="330" loading="lazy"><h4 id="ユーザ認証-サインイン"><a href="#ユーザ認証-サインイン" class="headerlink" title="ユーザ認証 (サインイン)"></a>ユーザ認証 (サインイン)</h4><p>ユーザ認証 (サインイン) 時にはサーバがランダムなチャレンジを生成し、クライアントに送信します。クライアントは秘密鍵でチャレンジに署名し、サーバに返却します。サーバはユーザ登録時に保存していた公開鍵で署名を検証し、有効な署名であれば、ユーザをサインインさせます。なお、このときサインイン先のドメイン名がユーザ登録したドメイン名と同一であることがクライアント側で検証されるため、FIDO 認証にはフィッシング耐性があります。</p><img src="/images/20221114a/signin.png" alt="signinシーケンス" width="549" height="372" loading="lazy"><h3 id="Passkeys"><a href="#Passkeys" class="headerlink" title="Passkeys"></a>Passkeys</h3><p>FIDO Alliance の設立から 10 年近くを経て、ベンダ中立な FIDO2 仕様群が策定され、多くの OS・ブラウザでサポートされるようになりましたが、この技術が一般に広く用いられるには、移行とリカバリの問題が残っていました。従来の FIDO 認証では、ユーザの秘密鍵はデバイスのセキュアストレージを出ることなく、ローカルに保存されていました。従って、ユーザが複数のデバイスを使用しているとき、デバイスごとにサービスに登録する必要がありました。また、デバイスを買い替えたとき、アカウントをシームレスに移行する機能はなく、すべてのアカウントについて、再登録が必要でした。さらに怖いことに、デバイスを紛失したり破損したりしてしまうと、アカウントに対するアクセスを完全に失ってしまう可能性がありました。</p><p>この問題を解決し、パスワードレス技術を真にユビキタスなものにするため、2022 年 5 月 5 日 (World Password Day) に、Apple, Google, Microsoft, FIDO Alliance が共同で声明を発表し、<a href="https://fidoalliance.org/white-paper-multi-device-fido-credentials/">マルチデバイス対応 FIDO 認証資格情報 (通称 passkeys)</a> への対応を推進していくことを宣言しました。Passkeys により、iCloud Keychain や Google Password Manager を通して秘密鍵をデバイス間で安全に同期することができ、移行とリカバリの問題も解消されます。Passkeys は macOS 13 Ventura や iOS 16 の Safari 16 ですでにサポートされており、Google も <a href="https://android-developers.googleblog.com/2022/10/bringing-passkeys-to-android-and-chrome.html">Android と Chrome で今秋に対応</a> することを発表しています。</p><h2 id="パスワードレスな未来"><a href="#パスワードレスな未来" class="headerlink" title="パスワードレスな未来"></a>パスワードレスな未来</h2><p>現状、広範に採用されているとは言い難い FIDO, WebAuthn, passkeys ですが、強力なプラットフォーマーが協力して推進していくことから、今後採用が進んでいくことが考えられます。直近では Apple, Google そして Microsoft といったプラットフォーマーによるサポートから始まっていますが、将来的には <a href="https://blog.1password.com/what-are-passkeys/">1Password</a> や <a href="https://support.dashlane.com/hc/en-us/articles/7888558064274-Passkeys-in-Dashlane">Dashlane</a> のようなパスワードマネージャも認証器機能を提供する予定だそうです。ユーザとサービス提供者をパスワードから解放するパスワードレス技術に今後も注目していきます。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">当社比</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">ちなみに、IPA のウェブサイトで紹介されている「コアパスワード」を使った管理方法を採用することはお勧めしません。パスワードが平文で漏洩したとき、プレフィクスを識別するのが容易で、コアパスワードが攻撃者に奪取されるためです。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://caniuse.com/?search=WebAuthn">&quot;WebAuthn&quot; | Can I use... Support tables for HTML5, CSS3, etc</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">FIDO2 に含まれるのは CTAP2 と呼ばれる仕様です。FIDO v1.0 において FIDO U2F と呼ばれていたものは、FIDO2 において CTAP1 に改名されました。</span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG の吉岡です。&lt;a href=&quot;/articles/20221031a/&quot;&gt;秋のブログ週間&lt;/a&gt; 10</summary>
        
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="WebAuthn" scheme="https://future-architect.github.io/tags/WebAuthn/"/>
    
    <category term="パスワードレス" scheme="https://future-architect.github.io/tags/%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%83%AC%E3%82%B9/"/>
    
    <category term="FIDO" scheme="https://future-architect.github.io/tags/FIDO/"/>
    
    <category term="FIDO2" scheme="https://future-architect.github.io/tags/FIDO2/"/>
    
    <category term="Passkeys" scheme="https://future-architect.github.io/tags/Passkeys/"/>
    
  </entry>
  
  <entry>
    <title>データベースと向き合う決意</title>
    <link href="https://future-architect.github.io/articles/20221111a/"/>
    <id>https://future-architect.github.io/articles/20221111a/</id>
    <published>2022-11-10T15:00:00.000Z</published>
    <updated>2022-11-11T05:09:11.902Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20221031a/">秋のブログ週間</a>の9本目のエントリーになります。この企画もこんなに書く人が出てくるように育っていいですね。</p><p>「中間層を増やして柔軟性を高めるのがソフトウェアの歴史」</p><p>これは大学時代に2つ上の先輩が言っていた言葉です。例えばマシン語を直接書くのではなく、アセンブラで書けば、変換（コンパイル）の手間はかかりますが、他のCPUへの移植はしやすくなります。高級アセンブラと名高いC言語を使えばさらに移植性は上がります。C言語で書かれたVMを使う言語、例えばJava、Python、Rubyなんかはさらに移植性は上がります。</p><p>ストレージもそうです。最終的にストレージはビット列を保存するものですが、それにOSのファイルシステムというレイヤーがあり、そこにスキーマで管理されたデータを入れるDBMSが乗っかり、SQLなどの問い合わせ言語でデータ取得できるようにします。DBMSを挟むことで、レプリケーションでバックアップを勝手に別マシンに取ってくれたり、複数のマシンを透過的に扱い、1台のマシンに収まらないデータを透過的に扱うことができるパーティショニングといった機能が得られます。</p><p>ウェブのフロントエンドもリッチ化の流れでどんどん高機能に、そしてバンドルされる.jsファイルのサイズもどんどん大きくなってきました。ウェブフロントエンドでは、DHTMLと呼ばれた時代、prototype.js、jQueryの時代から徐々にリッチにデスクトップGUI的な思想で重厚な開発が行われるようになり、Knockout.js、Backbone.jsとMustacheなどのテンプレートエンジンを使ったMVCがしばらく行われていました。データ保持のレイヤーと表示のレイヤーをきちんと用意する、通信とチェックなどのビジネス知識の層を分けるなどです。Angularもコンポーネントとサービスというレイヤー分けの仕組みがありますし、Vue.jsや　Reactでも、ストアを用意する使い方をみんなしていました。ストアを使うと、Reduxがモデル層、Reactがビューというレイヤー分けとなります。</p><h1 id="時々起きる中間層を壊すムーブメント"><a href="#時々起きる中間層を壊すムーブメント" class="headerlink" title="時々起きる中間層を壊すムーブメント"></a>時々起きる中間層を壊すムーブメント</h1><p>とはいえ、中間層を増やしていくコストはゼロではありません。MS-DOS時代にちょっとコンソールに色付けする2桁バイトのバイナリを作ったことがありますが、Cを使えばそのサイズでは収まりませんし、PythonやRubyはCと比べてどうしても速度ではかないません。</p><p>そのため、時々中間層を壊すイノベーションが起きています。イノベーションのジレンマの文脈で説明すると、中間層を足すことは、より複雑に、より便利に、より遅い方向への持続的イノベーションの進化ですが、中間層の破壊は、より単機能で、より手軽に、より速く、さらに新しい価値観が付与された方向への破壊的イノベーションです。例えば、JITは高級言語の「便利だが遅くて重い」インタプリタという層を破壊してC言語やアセンブラといった言語で作られる世界へのポータルを作るものです。</p><p>ウェブフロントエンドも近年は層を破壊する方向に進歩しています。モデルのレイヤーをブラウザ上で作り上げてビューがそれを使うという方向性だったのが、GraphQLやSWRといったデータアクセスライブラリが登場してきました。これらのライブラリが実現する世界は、サーバー側である程度フロントが期待するレスポンスを返し、それをそのままフロントエンドが表示に利用するということで、ブラウザ上でのモデル層がなくなり、ブラウザはビューとコントローラのみ、モデルはサーバー上にあり、そのキャッシュがブラウザ上にもある、という状態になります。</p><p>JavaScriptはES4でクラスを入れるので大騒ぎし、ES6でようやくクラスを導入しました。ES3→6ではJavaやPythonをお手本にJavaScriptがリッチな言語へと進化しましたが、その苦労の末入ったクラスは、現在ではあまり使われていません。Angularはクラスを使いますが、Reactはクラスベースのコンポーネントから関数を使ったコンポーネントが主流になりました。Vue.jsも一時期クラス形式がありましたが、Vue3になったときにクラスAPIのメンテナーがコアメンバーから外れました。</p><p>現在主流なのはオブジェクトや配列など、言語標準のデータをそのまま使います。クラスのようなSetter&#x2F;Getterといったアクセッサで正しい状態を保証するという考えはウェブフロントエンドでは完全に過去のものです。Reduxでは前の状態をもとに、新しい状態を新規に作るという動きになり、関数型チックに状態を扱います。しかし、Redux-ToolkitではImmer.jsを使い、それと同じような処理を、直接値を書き換えるようにコーディングできます。なんか時代が巻き戻っているような書き心地です。</p><p>もう1つのムーブメントはTypeScriptです。Facebook(現Meta）のFlowもありましたが、これは型情報を外から与えるものです。JavaScriptの「直接オブジェクトや配列を使う」使い方に合わせて、かなりマニアックな型定義もできるようになっています。これで直接いじるにしても想定外の型を入れようとすればコンパイラで検知できます。</p><p>中間層を壊すといっても、完全に過去に作られたものが消えるわけではなく、「あたかもなかったかのように振る舞う透明な層」に化けるという感じですね。仮想DOMにしても、SWRやGraphQLにしても、Immer.jsにしても、TypeScriptにしても。TypeScriptの前にはAltJSブームがありましたが、覇権を握ったのはBabelでした。これもリッチな言語を作るのではなく、リッチな文法を使ってJSを書いたら、ポータビリティの高いJSに書き換えますよ、というのもこれに近い思想かな、と思います。CSSのprefixerとかもですね。</p><p>中間層がなくなることで、隠される対象の底レイヤーだったDOMを開発者が意識して書くことになり、本来のセマンティクスや、アクセサビリティを大事にしよう、というところに業界全体が向かっている気がします。</p><h1 id="クラウドネイティブとデータ中心アプローチの未来"><a href="#クラウドネイティブとデータ中心アプローチの未来" class="headerlink" title="クラウドネイティブとデータ中心アプローチの未来"></a>クラウドネイティブとデータ中心アプローチの未来</h1><p>僕がフューチャーに入って学びたいと思っているのがデータベースをしっかり使う開発です。まあ、まだあまりその機会には恵まれてはいませんが・・・フューチャーではデータベースを第一に設計を固めようという開発を行います。ソフトウェア開発の試験だとオブジェクト指向と並んで紹介されるのがデータ中心アプローチです。しかし、本屋に行くと、データ中心アプローチ（DOA）を解説した本はほとんどありません。まあ、といってもオブジェクト指向も新しい本は出ておらず、ここ15年ぐらいは設計の本は不作の時代ですし、出版社がいくつか技術書から撤退したり、ということもあって過去の本も手に入らなくなっています。</p><p>しかし、この今やオープンには学べないDOAは、実はいわゆるSIerではしっかりと生きています。フューチャーはSIerではなくてITコンサルである、というのが会社の公式見解ですが、実装までやるのでSIerを内包しています。社内ポータルには動画やスライドやらのDBの教育コンテンツなどが充実しています。最近は時間を見つけて学習しています。</p><p>最近はいろいろクラウドの時代になっていますが、いろいろやっていると、データベース設計力が大事だな、と思うことが多くなってきました。たとえば、Firebaseはウェブフロントエンドから直接データストアにクエリーを投げられます。先ほど、ウェブフロントエンドはモデル層をサーバー側に持っていこうとしていると紹介しましたが、その場合、Firebase側でフロントエンドから使いやすいデータ構造が実現できればばっちりアプリ開発が決まる、ということです。例えばデータベースはアドホックに設計していき、BFFのような層を作ってフロントに優しいデータに変換するとなると、一層増えてしまうためにバックエンドレスにできるFirebaseのメリットが減ってしまいます。</p><p>DOAのツールとしてはそのようなデータ構造のためのERDという設計のツールがありますが、もう1つはDFDがあります。これもクラウドネイティブ時代にはかなり役立つツールなのではないかと思っています。DFDでは、データストアとプロセスを線で繋げた図です。処理の流れではなくてデータの流れを表現するものです。クラウドネイティブな大規模アプリケーションだと、LambdaなどのFaaSがトリガーなどで起動されたりと、「ピタゴラスイッチ」として表現されることが多いのですが、コンテナで実現されたアプリやFaaSといったサーバーレスでは、アプリが状態を持たない「関数」的な部品になります。各種ストレージやPub&#x2F;Subはデータストアとして扱うと、DFDはサーバーレスのアプリケーションの設計に最適なツールなんじゃないかと思っています。クラウドサービスを並べたブロック図をよく見かけますが、あれを物理設計とすると、ネットワーク系のサービスを抜いて、compute系とストレージ系だけを並べたような図となり、論理設計的になるかと思います。</p><img src="/images/20221111a/cloud.png" alt="cloud.png" width="951" height="321" loading="lazy"><p>CRUD表も、現代のクラウドデータベースのパフォーマンス問題を洗い出すときに役にたつという話も聞きます。どでかいデータを持つテーブルに大量データをスキャンするようなクエリーを投げていると問題になりがちなので、テーブルに対してだれが処理を投げているかがわかれば、だいたい当たりはつきますしね。</p><p>あと、余談ですが、　ReactアプリケーションのuseEffectとuseStateの連鎖も、DFDで表現すると綺麗にいけるんじゃないかな、というのも最近ぼんやり考えているところです。あとで紹介するSQL生成ツールは<a href="https://future-architect.github.io/articles/20221024a/">ウェブインターフェイス</a>をReactで作ったのですが、そのフックの関係をDFDで図示するとこんな感じです。useState&#x2F;useRefのストアと、useCallback&#x2F;useEffectのプロセスで表現できますね。テキスト入力はuncontrolled、コンボボックスはcontrolled、青線は生成したデータをURLに反映してシェアできる仕組み・・・みたいにうまく設計情報が反映できていますよね？</p><img src="/images/20221111a/react-dfd.png" alt="react-dfd.png" width="831" height="524" loading="lazy"><h1 id="そろそろSQL嫌いを卒業する時期が来たのではないか"><a href="#そろそろSQL嫌いを卒業する時期が来たのではないか" class="headerlink" title="そろそろSQL嫌いを卒業する時期が来たのではないか"></a>そろそろSQL嫌いを卒業する時期が来たのではないか</h1><p>僕自身はMongoDBだったりの案件が多く、RDBを直接扱う経験は数えるほどしかなく、経験値が足りないな、というのは実感していました。アプリ作るときもORマッパーを使ったりもしていましたが、どうも動きが気に入らなくて、直接コントロールしたいな、と思うことの方が増えてきています。</p><p>かつては（20年ぐらい前）はスケールアウトのようなものが一般的ではなく、CPU数に応じたライセンス料がかかるDBMSを使うことが多かったと思います。元オラクルの人から聞いたのですが、当時はソート処理など、アプリ側でもできる処理は貴重なサーバーリソースを節約するために非推奨というのがベストプラクティスとされていたそうです。しかし、近年はスケールアウトが組み込まれたマネージドなDBMSが増えてきて、フューチャーの案件でも当たり前のように選択されています。クエリー処理でCPUリソースが足りない、という時代ではなくなっています（帯域や書き込み性能は足りないということは聞きますが）。N+1問題も、本来はSQLを書けば解決する問題を、SQLを避けるために発生してしまっている問題といえます。</p><p>DBを直接扱わない理由としてはDBMSを切り替えてもアプリケーションの書き換えが不要にするという20年ぐらい前のエンタープライズアーキテクチャ的な思想もあると思います。しかし、実稼働すると、アプリケーションよりもデータベース、その特定のバージョンのデータベースよりも中のデータの方が寿命が長くなることはざらです。そもそも現代においては高額なライセンスは本番環境だけで、ローカルはH2を使う、みたいなことをする必要は少なく、本番はAWS Auroraで、ローカルはPostgreSQLで、と言った感じの開発をしているところがほとんどでしょう。もはやDB依存を毛嫌いする時代ではなくなってきていると思います。</p><p>また、データサイエンティストを中心に、SQLを使ってデータ分析をしようという本はたくさん出ていますし、SQLは当たり前の道具になってきています。開発者もSQLを書ける方が良いですよね。また、データ保持部分と、加工部分が別のサーバーにあると、毎度転送するコストが発生します。それに対して、安いノードをたくさん並べてデータを持つノードにバイトコードにした処理を投げつけて並列処理させるという方式も使われています。Apache Sparkで使われるようになった処理方式ですが、ビッグデータを扱う人がSQLを使うのも、このネットワークコストを削減するためでしょう。これも、DBサーバーにおけるコスト構造の変化に対する連続的な進化の流れに見えます。</p><h1 id="最近いろいろチャレンジしているもの"><a href="#最近いろいろチャレンジしているもの" class="headerlink" title="最近いろいろチャレンジしているもの"></a>最近いろいろチャレンジしているもの</h1><p>僕自身、SQLと向かい合ってこなかったので、最近はいろいろチャレンジしながらDBやSQLとの距離を縮めようとしているところです。あと、ウェブフロントエンドとかのツール群と比べると、もうちょっとスモールステップで作業を勧められるようなものがあったらいいなと思ってツールを作ったりしています。</p><p>例えば、僕が最近作っているのが、箇条書きでざっと書いたテーブル情報から、DDLやらERDを作るツールです。概念設計やら論理設計あたりで使えたら便利かなって。論物変換（日本だと日本語の名前から実際に使うシンボル名への変換）とかも乗せたいな、と思っているところです。</p><p><a href="https://shibukawa.github.io/md2sql/">https://shibukawa.github.io/md2sql/</a></p><p>テーブル構造が決まり、インデックスを貼る場所が決まればクエリーはある程度自動生成できそうです。データ量が少ないことがわかっているテーブル以外は、インデックス以外で検索することはないはずですからね。</p><p>もう1つはtwowaysql周りです。</p><p><a href="https://future-architect.github.io/articles/20220531a/">https://future-architect.github.io/articles/20220531a/</a></p><p>SQLは直接テストされることがなく、だいたいそれをラップしたリポジトリ層を使ってテストしたりします。SQLを直接テストできれば便利かな、と思い、twowaysqlにCLIツールを追加し、テストケースをYAMLで書いてテストできるようなテストランナーを実装してみました。十分にテストされた信頼されたSQLがあればレイヤードアーキテクチャのリポジトリ層っていらなくなって、プログラムをさらにシンプルにできるんじゃないかと思っているところです。</p><p>フロントエンドで関数型とかを意識する時代、OOPですべて統一する時代はもう過去のものと考えれば、バックエンドコードにSQLがいてもいいですよね？Goの場合は、だいたい他の言語経験者がORMを探してgormを触って絶望する、というのが「あーあ、またか」という感じでよく発生しますが、最近はsqlcやsqlxなど、SQLを書ける前提の良いライブラリが増えていますし、不便になることはありません。ORマッパーはオブジェクトのマッピングと、クエリービルダーで構成されますが、前者の構造体へのマッピングさえあれば十分かと思います。</p><p>ウェブフロントエンドではBabelやらCSSのprefixerがありましたが、　SQLも便利方言を吸収してくれるものはなんか欲しいですよね。::typeでキャストできるPostgreSQLの記法をCAST()という標準SQLに直してくれるようなやつとか、欲しいですよね。いつか作りたい。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ぼんやりと考えてきたことを紹介してきました。</p><ul><li>中間層をなくす進化というものが最近は多くなってきている。</li><li>クラウドネイティブな開発をスムーズに行うためには古のDOAが役に立つのではないか</li><li>ORマッパーも技術の進歩とベクトルが合わないもので、将来なくなるべきものと考えている</li></ul><p>自分で作っているツールはどれもまだ未熟だし、構想段階のものもありますが、ツールを作りながら自分なりの開発スタイルを磨いていきたいなと思っています。</p><p>今の仕事をしているとお客さんから「こんな新しいアーキテクチャは他のベンダーから提案されたことがなかった」と言われたりもするのですが、DOAを使っているSIerが本気でクラウドネイティブに取り組むと、ものすごいポテンシャルを発揮できるんじゃないかな、というのも将来期待しているところです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
    <category term="技術選定" scheme="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E9%81%B8%E5%AE%9A/"/>
    
    <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
    <category term="ORM" scheme="https://future-architect.github.io/tags/ORM/"/>
    
    <category term="エッセー" scheme="https://future-architect.github.io/tags/%E3%82%A8%E3%83%83%E3%82%BB%E3%83%BC/"/>
    
    <category term="DOA" scheme="https://future-architect.github.io/tags/DOA/"/>
    
  </entry>
  
  <entry>
    <title>Web API The Good Partsを読んだ感想</title>
    <link href="https://future-architect.github.io/articles/20221110a/"/>
    <id>https://future-architect.github.io/articles/20221110a/</id>
    <published>2022-11-09T15:00:00.000Z</published>
    <updated>2022-11-10T04:26:31.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>金融グループ所属、新人の藤戸四恩です。<a href="/articles/20221031a/">秋のブログ週間</a>9日目の記事です。</p><p>今までWeb APIに関してしっかりと勉強をしたことがなかったので、Web APIの設計方法や考え方をしっかりと学びたいと思い、おすすめの本を周りの人に聞いた際に「<a href="https://www.oreilly.co.jp/books/9784873116860/">Web API The Good Parts</a>」を薦めていただき、実際に購入して読みました。<br>この記事では本書を読んだ感想を書いていきたいと思います。</p><h1 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h1><p>Web APIの設計、開発、運用についての解説書。APIは設計次第で使いづらいものになってしまうだけでなく公開後の保守運用も難しくなってしまいます。そのためAPIを美しく設計することがとても重要です。</p><p>本書では「設計の美しいAPIは、使いやすい、変更しやすい、頑強である、恥ずかしくない」という考えのもと、APIをどのように設計し運用すればより効果的なのか、ありがちな罠や落とし穴を避けるにはどういう点に気をつけなければいけないのかを明らかにします。</p><p>ターゲットは、URIにアクセスするとXMLやJSONなどのデータが返ってくるシンプルなタイプ――XML over HTTP方式やJSON over HTTP方式――のAPIです。読者は、Web API設計の考え方と手法を知ることができます。</p><p><a href="https://www.oreilly.co.jp/books/9784873116860/">引用元 - O’REILLY</a></p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>1章 Web APIとは何か</li><li>2章 エンドポイントの設計とリクエストの形式</li><li>3章 レスポンスデータの設計</li><li>4章 HTTPの仕様を最大限利用する</li><li>5章 設計変更をしやすいWeb APIを作る</li><li>6章 堅牢なWeb APIを作る</li></ul><h1 id="特徴と感想"><a href="#特徴と感想" class="headerlink" title="特徴と感想"></a>特徴と感想</h1><h2 id="API-の歴史"><a href="#API-の歴史" class="headerlink" title="API の歴史"></a>API の歴史</h2><p>書籍内では歴史については下記のように記載がありました。</p><blockquote><p>非常に普及した古くから知られる成功したWeb APIとして、AmazonのProduct Advertising API があります。<br>これが初めて公開されたのは2003年前と10年以上も前です。<br>ちなみにEC2やS3などが公開されるよりもずっと前である当時はAWS(Amazon Web Service)という言葉そのものがProduct Advertising API のことを意味していました。<br>そしてこのAPIの公開はインターネットの世界にかなり大きなインパクトを与えました。<br>なぜならこのAPIはアフィリエイトに結び付けられており、これを使うことで誰でも簡単にAmazonの商品を自分のサイトから販売し、その収益の一部を得ることができたからです。</p></blockquote><p>この書籍の出版が2014年ということもあり、10年以上前と記載がありましたが記事投稿時(2022年)では、2003年は19年前ということでAPIの歴史の長さにびっくりしました。</p><p>APIの普及について書籍内ではAmazonのアフィリエイトリンクによって広まったと記載があります。また、<a href="https://developer.ntt.com/ja/blog/556bdab4-1583-4763-839b-19ba892252cf">APIとは。歴史を振り返る</a>の記事では、「スマートフォンアプリの普及によって、スマートフォンはデータの保存領域はそれほど大きくないため、その結果、データをクラウドに保存し、それを参照する仕組みが必要になります。データの保存と参照について、APIを使うということです。」と記載があり、普段の生活で使っているサービスや物がAPIの普及の礎になったのだと感じました。</p><h2 id="美しいWeb-API-2章"><a href="#美しいWeb-API-2章" class="headerlink" title="美しいWeb API(2章)"></a>美しいWeb API(2章)</h2><p>美しいWeb APIとは書籍内では、下記の6つ述べられていました。</p><ul><li>短くて入力しやすいURI</li><li>人間が読んで理解できるURI</li><li>大文字小文字が混在していないURI</li><li>改造いやすい(Hackableな)URI</li><li>サーバ側のアーキテクチャが反映されていないURI</li><li>ルールが統一されたURI</li></ul><p>恥ずかしながら今までAPIのURIを設計する際に、どのサービスでもURIは小文字を使用してるから小文字にしていましたが、ホスト名以降のパスは大文字と小文字は区別されていることを知りました。GitHubなどでは大文字を混ぜるとステータスコード404が返ってくるそうです。</p><p>また、改造しやすい(Hackableな)URIの説明に「開発の際にいちいちドキュメントを首っ引きで見なくてもわかるAPIにする」と記載があり、設計するときはこれを意識すべきだなと思いました。</p><h2 id="レスポンスデータの設計-3章"><a href="#レスポンスデータの設計-3章" class="headerlink" title="レスポンスデータの設計(3章)"></a>レスポンスデータの設計(3章)</h2><p>書籍内(2014年)では、APIのレスポンスデータのフォーマットがJSONとXMLでどちらを採用するのがよいかについて記載されており、JSONをデフォルトとして対応して、必要があればXMLに対応するのが最も現実に即していると述べられているます。出版当時はAmazonのAPIのレスポンスデータはXMLだけしか対応していなかったそうですが、現在はJSONだけ対応しています。<a href="https://developer-docs.amazon.com/amazon-business/docs/product-search-api-v1-reference">Amazon API</a></p><p>2014年時点のGoogleトレンドによる「json api」と「xml api」のトレンド比較が書籍内では「json api」が「xml api」を追い抜いた2年後でしたが、下図の2022年11月では、「json api」の圧勝でした。</p><img src="/images/20221110a/比較.png" alt="比較.png" width="1200" height="625" loading="lazy"><p>また、1つの作業をするために複数回のアクセスを必要とするAPIは <code>Chatty API</code>と呼ばれるためできるだけ少ないアクセス回数になるような設計が必要だが、データを詰め込みすぎてはデータサイズも大きくなってしまうのでレスポンスデータの内容はユーザが取捨選択できるようにすることでデータサイズを小さくし、データの階層はなるべくフラットにすることが必要だと感じました。</p><h2 id="HTTPの仕様を最大限利用する-4章"><a href="#HTTPの仕様を最大限利用する-4章" class="headerlink" title="HTTPの仕様を最大限利用する(4章)"></a>HTTPの仕様を最大限利用する(4章)</h2><p>HTTPの仕様を最大限利用するには、キャッシュをうまく活用し、サーバへのアクセス回数を減らしサーバ側のコストも抑えつつユーザ体験を良くしていくことが大切だと感じました。</p><p>HTTPのキャッシュにはExpiration Model (期限切れモデル)とValidation Model(検証モデル)の二つのタイプがあり、その内容を下記に記載します。</p><h3 id="Expiration-Model-期限切れモデル"><a href="#Expiration-Model-期限切れモデル" class="headerlink" title="Expiration Model(期限切れモデル)"></a>Expiration Model(期限切れモデル)</h3><p>あらかじめレスポンスデータに保存期限を決めておき、期限が切れたら再度アクセスをして取得を行います。<br>いつ期限が切れるかをサーバからのレスポンスに含めて返すことで実現できます。<br>方法としては2つあり、Cache-Controlレスポンスヘッダを使い現在時刻からの秒数を表す方法とExpiresレスポンスヘッダを使い期限が切れる絶対時間を表す方法があります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Expires: Fri, 01 Jan 2016 00:00:00 GMT</span><br><span class="line">Cache-Control: max-age=3600</span><br></pre></td></tr></table></figure><p>どちらを使うかの判断基準は更新日時がわかっている場合は、Expiresを使い、更新頻度が少ないものはCache-Controlを使うと良いとのことでした。<br>また、両方指定する新しい仕様のCache-Controlが優先されます。</p><h3 id="Validation-Model-検証モデル"><a href="#Validation-Model-検証モデル" class="headerlink" title="Validation Model(検証モデル)"></a>Validation Model(検証モデル)</h3><p>保持しているキャッシュが最新かを問い合わせて、データが更新されていた場合にのみ取得を行います。<br>更新の確認には最終更新日付とエンティティタグのどちらか使います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Last-Modified: Tue, 01 Jul 2014 00:00:00 GMT</span><br><span class="line">ETag: &quot;16ddf21b3f21fcb2433e28cd2e3b33d8&quot;</span><br></pre></td></tr></table></figure><p>*ETagの値はハッシュ値で、今回は<a href="https://phpspot.net/php/pg%EF%BC%AD%EF%BC%A4%EF%BC%95%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E8%A8%88%E7%AE%97%E3%83%84%E3%83%BC%E3%83%AB.html">こちら</a>で文字列をEtagにして生成しました。</p><p>サーバ側はその内容をみて更新がなければステータスコード304を返し、更新があればステータスコード200でデータを返すします。</p><h3 id="確実にキャッシュしない方法"><a href="#確実にキャッシュしない方法" class="headerlink" title="確実にキャッシュしない方法"></a>確実にキャッシュしない方法</h3><p>Cache-Contorlには <code>no-cache</code> と <code>no-store</code> があり、<code>no-cache</code>はLast-ModifiedとETagを使って、サーバがステータスコード304を返した時にキャッシュが有効になるため、確実にキャッシュするわけではありません。<code>no-sotre</code>はキャッシュを利用しないでサーバへアクセスします。</p><h2 id="設計変更しやすいAPI-5章"><a href="#設計変更しやすいAPI-5章" class="headerlink" title="設計変更しやすいAPI(5章)"></a>設計変更しやすいAPI(5章)</h2><p>設計変更しやすいAPIとは、古いバージョンのAPIはアクセスできるようにそれまでの変わらないデータを送り、終了する際には、事前に終了日をアナウンスして周知を行うことが大切だと感じました。<br>API側のメンテナスコストも考え、古いバージョンは提供を終了していくことも重要だと思いました。</p><h2 id="堅牢なWeb-API-6章"><a href="#堅牢なWeb-API-6章" class="headerlink" title="堅牢なWeb API(6章)"></a>堅牢なWeb API(6章)</h2><p>APIを安全にするには、悪意のある第三者による攻撃や情報漏洩を防ぐ、認証されたユーザによる不正な操作を防ぐことが大切で、新しい攻撃方法や問題はどんどん発見されているため、常に情報収集を心がけ、自身の知識のアップデートに努めててほしいと筆者は述べています。</p><h3 id="サーバとクライアント間での情報の不正入手"><a href="#サーバとクライアント間での情報の不正入手" class="headerlink" title="サーバとクライアント間での情報の不正入手"></a>サーバとクライアント間での情報の不正入手</h3><p>HTTPS化することによりHTTP通信の暗号化することが大切で、HTTPSを使えば100%安全ではなく、SSL証明書の検証をきちんと行っていない場合に問題が発生する可能性があることも意識する必要があると感じました。</p><h3 id="セキュリティ関連の-HTTP-ヘッダ"><a href="#セキュリティ関連の-HTTP-ヘッダ" class="headerlink" title="セキュリティ関連の HTTP ヘッダ"></a>セキュリティ関連の HTTP ヘッダ</h3><ul><li>X-Content-Type-Options<br>サポートが終了したIEについても書籍内で記載がありました。<br>IEではContent-Typeのメディアタイプが指定されても、それを無視してコンテンツの内容や拡張子からデータ形式を推測する機能があったため、<br><code>X-Content-Type-Options</code>で無効にしていたそうです。</li></ul><p>他にもセキュリティ関係のHTTPヘッダはあり、この辺りも設計の際にはしっかりと考慮すべきだと感じました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>200ページとそこまで多くない分量なので短時間で読むことができます。APIの設計をまともに行なったことない自分でも詰まることなく読み切ることができました。</p><p>付録のWeb APIチェックリストが個人的には復習ができるのでおすすめです。ぜひ手にとってみてください。</p><p>ちなみに、フューチャーでは<a href="/articles/20200409/">OpenAPIを使うことが多い</a>です。</p><p>個人的に、ProtobufやgRPCとGraphQLが気になっているため、<a href="/articles/20220623a/">gRPCのGo実装の新星、Connect</a>などを含めて勉強して記事を書きたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;金融グループ所属、新人の藤戸四恩です。&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
    <category term="WebAPI" scheme="https://future-architect.github.io/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title>「AIファースト・ヘルスケア」を読んでみた感想</title>
    <link href="https://future-architect.github.io/articles/20221109a/"/>
    <id>https://future-architect.github.io/articles/20221109a/</id>
    <published>2022-11-08T15:00:00.000Z</published>
    <updated>2022-11-09T04:41:43.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>HealthCare Innovation Group(HIG)所属の山本です。<br>2021年10月に新卒入社し、初のブログ投稿となります。</p><p>この記事は「<a href="/articles/20221031a/">秋のブログ週間</a>」の7記事目です。<br>読書の秋ということで、ヘルスケアという部署に縁がある本を読んでみようと思いました。</p><p>読んでみたのはこちら、「<a href="https://www.oreilly.co.jp/books/9784814400034/">AIファースト・ヘルスケア</a>」です。</p><img src="/images/20221109a/image.png" alt="" width="465" height="660" loading="lazy"><h2 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h2><p>書籍のタイトルを一見すると、画像認識や強化学習などなど昨今次々に新しい技術が開発され続けている機械学習を医療現場に活用した事例紹介や技術的課題が書いてあるのかと当初は思いました。</p><p>ですが、本書では「AIは機械学習以上のものである」ということを大きなコンセプトとしており、</p><p>機械学習に関する技術的な詳細を扱う内容ではなく、医療現場の課題を考慮し、実際に医療の現場の中心に幅広くAIを導入するための方法について議論するといった内容になってます。</p><p>本書が機械学習に焦点を当てるのではなく、あくまでAIとして扱っている思想については以下の引用で納得できる部分があります。</p><blockquote><p>AIが機械学習と同じものだと見なしてしまうと、インテリジェントシステムを構築するために使用するソフトウェア郡のうち、機械学習出ない部分を無視したり否定してしまうことになります。さらに悪いことに、AIに何ができるかという私達の想像や知識は、機械学習によって実装可能な機能だけに限定されてしまいます。</p></blockquote><p>章立てとしては以下のようになっており、興味がある章からでも比較的読みやすい構成になっています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1章　AIの神話と現実</span><br><span class="line">    1.1　AIの起源と定義</span><br><span class="line">    1.2　AIヘルスケアの神話</span><br><span class="line">    1.3　AIの神話</span><br><span class="line">    1.4　AIテクノロジーの神話</span><br><span class="line">    1.5　AIファーストなヘルスケア</span><br><span class="line"></span><br><span class="line">2章　人間中心のAI（Human-Centered AI）</span><br><span class="line">    2.1　“人間中心のAI”に向けて</span><br><span class="line">    2.2　AIと人間の交叉</span><br><span class="line">    2.3　人間の倫理とAI</span><br><span class="line">    2.4　まとめ</span><br><span class="line"></span><br><span class="line">3章　モニタリング＋AI＝個別化医療への処方箋（Rx）</span><br><span class="line">    3.1　個人の健康に対する処方箋（Rx）</span><br><span class="line">    3.2　AIを用いた継続的なモニタリング</span><br><span class="line">    3.3　IoTとAIの医療への応用</span><br><span class="line">    3.4　まとめ</span><br><span class="line"></span><br><span class="line">4章　デジタルトランスフォーメーション（DX）とAI</span><br><span class="line">    4.1　ヘルスケアDX</span><br><span class="line">    4.2　デジタル・ヘルスケア</span><br><span class="line">    4.3　予防と慢性疾患の管理</span><br><span class="line">    4.4　AIと遠隔医療</span><br><span class="line">    4.5　AIと服薬管理</span><br><span class="line">    4.6　管理事務をデジタル化・AI化する</span><br><span class="line">    4.7　まとめ</span><br><span class="line"></span><br><span class="line">5章　不都合な事実</span><br><span class="line">    5.1　医療の無駄</span><br><span class="line">    5.2　管理費用</span><br><span class="line">    5.3　医療従事者の時間</span><br><span class="line">    5.4　まとめ</span><br><span class="line"></span><br><span class="line">6章　AIを使った医療アプリケーションの登場</span><br><span class="line">    6.1　人々の健康改善</span><br><span class="line">    6.2　テクノロジーを医療現場で機能させる</span><br><span class="line">    6.3　新時代のアプリケーションやサービスの到来</span><br><span class="line">    6.4　まとめ</span><br><span class="line"></span><br><span class="line">7章　医療機関のための大規模AI</span><br><span class="line">    7.1　大規模AIの実現</span><br><span class="line">    7.2　医療の変革</span><br><span class="line">    7.3　見えないエンジン：医療プラットフォーム</span><br><span class="line">    7.4　まとめ</span><br></pre></td></tr></table></figure><h2 id="書籍の感想"><a href="#書籍の感想" class="headerlink" title="書籍の感想"></a>書籍の感想</h2><h3 id="「AIファースト・ヘルスケア」とは？"><a href="#「AIファースト・ヘルスケア」とは？" class="headerlink" title="「AIファースト・ヘルスケア」とは？"></a>「AIファースト・ヘルスケア」とは？</h3><p>この書籍の3章以降では、AIを医療現場に現状活用できること、今後の課題について医師や患者、企業を始めとした様々な視点から議論しています。</p><ul><li>IoTデバイスを用いた血圧モニタリング、管理</li><li>処方薬のボトルキャップにセンサーをつけることでの服薬・治療管理</li><li>医師の業務効率化、治療補助</li><li>保険適応や診療報酬請求の自動化</li></ul><p>実際に挙げられている例のいくつかは研究レベルでの実施、あるいは一部限定された現場での適応は事例としてあるものです。</p><p>ですが、これらのAIが世界中の医療現場全体へ適応されているか？という疑問については2022年時点では残念ながらNoと言わざるを得ないと思います。</p><p>以下書籍の引用ですが、実際にあらゆる面へのAIの適応性を考え、医療を再構築するという点において、「AIファースト・ヘルスケア」の視点は取り入れていく必要があると感じます。</p><blockquote><p>AIファースト・ヘルスケアは、AIファースト企業と同義ではありません。AIファーストは技術的な声明ではありません。ヘルスケア分野の既存の企業がテクノロジー企業と競合することでもありません。AIをあらゆる面に適応することでペイシェント・ジャーニー、患者の体験、患者の治療に違いがでるかどうかを考えることです。あるいは、ICU(集中治療室)や家庭、その他のさまざまな場所の環境やインテリジェント・オブジェクトにAIを導入することで、医療を再構築することができます。</p></blockquote><h3 id="「個別化医療」について"><a href="#「個別化医療」について" class="headerlink" title="「個別化医療」について"></a>「個別化医療」について</h3><p>書籍では主に3章で触れられていますが、”個別化医療”といったトピックはAIを医療に適応する上で今後大きなトピックになるのではないかと考えているため興味深かったです。</p><p>書評から外れていくためあまり深くは触れませんが、日本でも近年、「医師主体の医療」から「患者主体の医療」へと移り変わるような流れがあります。</p><p>例としては、「インフォームドコンセント」といった、医師から患者が病気と治療について説明を受け、同意した上で治療を行うことであったり、「セカンドオピニオン」といった、現在の主治医ではない他の医師から治療法の意見を聞く、といったことなどですね。</p><p>この時代の1歩先としては、「患者に個別化された医療」が実現される可能性も十分考えられます。</p><p>そのような時代では本書で触れられているように、AIの適応が大きなインパクトを発揮するのではないでしょうか。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>“医療にAIを導入する入門書”という観点で記載されている本書ですが、1章、2章ではAI・機械学習とはそもそもなんなのか？といった導入から始まり、各章のトピックでは様々な視点から”AI”をどのように医療現場に導入できるのかといったことが書かれており、興味深いです。</p><p>実際に医療現場やそのシステムに携わる方は自分が思うところがあるトピックを読んでも面白いとおもいますし、医療システムに関して初めて触れる方も最初から読めばわかりやすい構成となっています。</p><p>“AI×医療”というトピックが気になる方にはオススメしたい書籍です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;HealthCare Innovation</summary>
        
      
    
    
    
    <category term="Business" scheme="https://future-architect.github.io/categories/Business/"/>
    
    
    <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="ヘルスケア" scheme="https://future-architect.github.io/tags/%E3%83%98%E3%83%AB%E3%82%B9%E3%82%B1%E3%82%A2/"/>
    
    <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
  </entry>
  
  <entry>
    <title>Azure Data Boxを使ってみた</title>
    <link href="https://future-architect.github.io/articles/20221108a/"/>
    <id>https://future-architect.github.io/articles/20221108a/</id>
    <published>2022-11-07T15:00:00.000Z</published>
    <updated>2022-11-09T04:39:15.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、テクノロジーイノベーショングループ所属、2021年4月に新卒で入社した一ノ瀬です。</p><p><a href="/articles/20221031a/">秋のブログ週間</a>の6本目となる本記事では、オンプレからクラウドへのデータ移行に関して、AzureのData Boxというサービスを利用する機会があったので、詳細なワークフローや失敗談について共有します。</p><p>昨今のDX推進の流れにのり、システムのクラウドシフト&#x2F;リフトに取り組む方も多いかと思います。</p><p>「クラウドへの移行を考えているがデータ量が膨大で移行ができない」といった悩みがあったり、「クラウドへのデータ移行でData Boxサービスを利用したい！けど、よくわからない…」という方々に本記事を参考にしていただけると幸いです。</p><h1 id="Data-Boxを利用する背景"><a href="#Data-Boxを利用する背景" class="headerlink" title="Data Boxを利用する背景"></a>Data Boxを利用する背景</h1><p>今回の要件は、オンプレのデータ分析基盤で収集していた100TB以上のデータをAzureに移行することでした。</p><p>当初はAzure専用線を使ったオンラインのデータ移行を検討していました。</p><p>しかし、データ容量の大きさから移行に約7ヶ月かかる点からオンラインのデータ移行は断念しました。</p><p>短期間かつNW負荷が低くてすむ移行方法はないか？ということで、オンプレ基盤とAzure間でオフラインでデータ移行できるサービスData Boxを利用することになりました。</p><p>続いては、動作環境に触れていきます。</p><h1 id="動作環境のはなし"><a href="#動作環境のはなし" class="headerlink" title="動作環境のはなし"></a>動作環境のはなし</h1><h3 id="物理構成はどんな感じ？"><a href="#物理構成はどんな感じ？" class="headerlink" title="物理構成はどんな感じ？"></a>物理構成はどんな感じ？</h3><p>データコピー時の登場人物は以下の計3端末です。</p><ol><li>Data Box</li><li>Data Box初期設定用PC</li><li>データコピー用サーバ</li></ol><img src="/images/20221108a/WS000297.JPG" alt="WS000297.JPG" width="1037" height="736" loading="lazy"><p>Data Box初期設定用PCとデータコピー用サーバは今回の案件のために用意したので、以下に環境情報を記します。<br>転送先はAzure Data Boxの領域であり、また転送元はユーザにより異なるため環境情報の説明は省きます。</p><p><strong>データコピー用サーバ</strong></p><ul><li>RedHat Enterprise for Linux v8.4</li><li>メモリ16GB</li><li>1CPU4コア</li></ul><p><strong>Data Box初期設定用PC</strong>（※）</p><ul><li>Windows10</li><li>Google Chrome(2022&#x2F;8&#x2F;18時点最新)</li></ul><p>※借用PCのため詳細不明</p><h3 id="Data-Boxの結線の詳細は？"><a href="#Data-Boxの結線の詳細は？" class="headerlink" title="Data Boxの結線の詳細は？"></a>Data Boxの結線の詳細は？</h3><p>Data Boxの結線についても紹介します。<br>今回の構成では、以下の組み合わせで結線しています。</p><div class="scroll"><table><thead><tr><th align="left">Data Boxのポート</th><th align="left">接続先</th><th align="left">種別</th><th align="left">ポートの説明</th></tr></thead><tbody><tr><td align="left">MGMTポート</td><td align="left">Data Box初期設定用PC</td><td align="left">RJ45</td><td align="left">初期設定時のみ使用<br>データコピーでは使用しない</td></tr><tr><td align="left">Data#1~2ポート</td><td align="left">10GbE対応のL2スイッチ</td><td align="left">10GBASE-SR</td><td align="left">データコピーにて<br>メインで使用する</td></tr><tr><td align="left">Data#3ポート</td><td align="left">1GbE対応のL2スイッチ</td><td align="left">RJ45</td><td align="left">アクセスは発生させない<br>前提条件を満たすために結線</td></tr></tbody></table></div><p>以下は結線のイメージです。<br><img src="/images/20221108a/image.png" alt="" width="820" height="449" loading="lazy"><br>出典：<a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-cable-options#transfer-via-data-port-with-static-ips-using-a-switch">Azure Data Boxの配線方法</a></p><p>今回MGMTポート + Data#1~3ポート全てで結線をしている理由は、サービス利用の前提として調達・結線が求められているためです。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-quickstart-portal">Docs:DataBoxのクイックスタート</a>の前提条件の一つに以下の記述があります。</p><blockquote><p>Data Box をホスト コンピューターに接続するために以下のケーブルを用意していること。<br>・10 GbE SFP+ Twinax 銅線ケーブル 2 本 (DATA 1、DATA 2 ネットワーク インターフェイスで使用)<br>・RJ-45 CAT 6 ネットワーク ケーブル 1 本 (MGMT ネットワーク インターフェイスで使用)<br>・RJ-45 CAT 6A OR ネットワーク ケーブル 1 本、RJ-45 CAT 6 ネットワーク ケーブル 1 本 (それぞれ 10 Gbps または 1 Gbps として構成されている DATA 3 ネットワーク インターフェイスで使用)</p></blockquote><p>また、マイクロソフトサポートから以下コメントを頂いています。</p><blockquote><p>Docsにて「必要」と記載のある部材に関しては原則調達をお願いしております。<br>仮に上記が欠けている場合、有事の際にサービス提供者側としての責任を負うことが出来ないという判断になる懸念がございます。</p></blockquote><p>以上から、マイクロソフト社はケーブルを4本全て用意し、Data Boxのすべてのポートを接続させた状態で使用することを前提にしているようです。</p><p>最低限の構成（例：Data#1とMGMTのみ）でも動作はするかと思いますが、今回は万全を期すために、MGMT + Data#1~3ポート全てで結線をしています。</p><p>また結線に使用したケーブルやアダプターについても説明します。</p><p>SFP+アダプターにはCiscoの「SFP-10G-SR」という機種を使用しました。<br>SFP+アダプターについては、問い合わせを起票してMiceosoftサポートが推奨する機種を参考に選びました。<br>以下サポートからの回答です。</p><blockquote><p><a href="https://network.nvidia.com/pdf/firmware/ConnectX3-FW-2_42_5000-release_notes.pdf">Mellanox ConnectX-3 Firmware Release Notes</a>の「1.2.1 Validated and Supported 1GbE&#x2F;10GbE Cables (p.8~11)」に記載されているケーブルと同等のケーブルであれば問題なく動作すると考えられます。</p></blockquote><p>RJ45は一般的なLANケーブルで問題ないですが、SFP+のアダプターは小さくても高額ですので、「アダプター準備したけど使えないじゃん」という事態を避けるためにも慎重に準備することをおすすめします。</p><h1 id="Data-Boxの主なワークフロー"><a href="#Data-Boxの主なワークフロー" class="headerlink" title="Data Boxの主なワークフロー"></a>Data Boxの主なワークフロー</h1><p>では、実際の利用の流れを説明していこうと思います。</p><p>Data Boxを使ったデータ移行の大まかな流れは以下です。</p><img src="/images/20221108a/WS000294.JPG" alt="WS000294.JPG" width="1200" height="176" loading="lazy"><ol><li>発注</li><li>受け取り</li><li>デバイス初期設定</li><li>結線とマウント</li><li>データコピー</li><li>返送</li><li>Azureへインポート</li></ol><p>※今回の案件では筐体の写真を撮影することができませんでした。手順の中で写真なしで筐体の説明をしていますが、ご了承ください。</p><h1 id="発注"><a href="#発注" class="headerlink" title="発注"></a>発注</h1><img src="/images/20221108a/ワークフロー_(1).JPG" alt="ワークフロー_(1).JPG" width="1200" height="179" loading="lazy"><h3 id="注文の作成"><a href="#注文の作成" class="headerlink" title="注文の作成"></a>注文の作成</h3><p>まずはAzure Portalにログインし、ダッシュボードからData Boxを発注していきます。</p><p>Azure Portalのホーム画面で[Azure Data Box]を選択し、画面左上の[作成]を押下します。</p><img src="/images/20221108a/DataBox発注1.jpg" alt="DataBox発注1.jpg" width="1200" height="399" loading="lazy"><p>次の画面では対象のサブスクリプション、リソースグループ、ソースの国、宛先のAzureリージョンを選択し、[適用]を押下します。</p><img src="/images/20221108a/DataBox発注2.jpg" alt="DataBox発注2.jpg" width="1200" height="442" loading="lazy"><img src="/images/20221108a/DataBox発注3.jpg" alt="DataBox発注3.jpg" width="1200" height="605" loading="lazy"><p>サービスを選択すると、注文に関する記入する画面に移ります。</p><p>[基本]では注文名を指定します。</p><p>ここで設定する注文名は、Azure Portalに残るものですので、複数台発注する場合は特に一意な名称にしておくとよいでしょう。</p><img src="/images/20221108a/DataBox発注4.jpg" alt="DataBox発注4.jpg" width="1200" height="300" loading="lazy"><p>注文名を指定したら[データ格納先]に移動します。データの格納先と宛先のAzureリージョン、データをインポート&#x2F;エクスポートしたいストレージアカウントを選択します。</p><img src="/images/20221108a/DataBox発注5.jpg" alt="DataBox発注5.jpg" width="1200" height="531" loading="lazy"><p>Data Boxサービスは一部のストレージアカウントのタイプをサポートしていないため、発注に先立って確認しておくと良いでしょう。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-system-requirements#supported-storage-accounts-for-imports">Docs:インポートでサポートされているストレージアカウント</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-system-requirements#supported-storage-accounts-for-exports">Docs:エクスポートでサポートされているストレージアカウント</a></li></ul><p>今回はGeneral-purpose(汎用) v2 Standardを使用しています。</p><p>次は[セキュリティ]です。</p><p>デバイスのロック解除兼WebUIのログインに使用するパスワードの種類を設定します。Microsoftマネージドキーかカスタマーマネージドキーを選択できます。</p><p>今回は全項目でMicrosoftマネージドキーを選択していますが、カスタマーマネージドキーを選択すると、より長く複雑なパスワードを設定できるようです。パスワードセキュリティをより強固にしたい場合は選択するとよいでしょう。</p><img src="/images/20221108a/DataBox発注6.jpg" alt="DataBox発注6.jpg" width="1200" height="547" loading="lazy"><p>[連絡先の詳細]では出荷方法と通知を受け取るメールアドレス、（Microsoftの管理による出荷を選択した場合は）配達先住所の設定をします。</p><p>今回は自己管理の出荷を選択しています。メールはメーリングリストも使用可能です。</p><img src="/images/20221108a/住所の追加.jpg" alt="住所の追加.jpg" width="1200" height="567" loading="lazy"><p>[タグ]では対象の注文にタグを設定できます。請求情報等の管理のために便利な機能のようですが、今回は空欄としています。</p><img src="/images/20221108a/DataBox発注9.jpg" alt="DataBox発注9.jpg" width="1200" height="324" loading="lazy"><p>必要なすべての項目を記入し終えたら[確認と注文]に移動し発注します。</p><h1 id="受け取り"><a href="#受け取り" class="headerlink" title="受け取り"></a>受け取り</h1><img src="/images/20221108a/ワークフロー_(2).JPG" alt="ワークフロー_(2).JPG" width="1200" height="178" loading="lazy"><h3 id="受取日の調整"><a href="#受取日の調整" class="headerlink" title="受取日の調整"></a>受取日の調整</h3><p>次はData Box受取日の調整をします。<br>今回は自己管理の出荷を選択したため、受け取り・引き渡しの両方で自己管理の出荷を前提に説明していきます。</p><p>まずは<a href="mailto:&#97;&#100;&#x62;&#x6f;&#x70;&#x73;&#x40;&#109;&#x69;&#x63;&#114;&#111;&#115;&#x6f;&#102;&#x74;&#46;&#99;&#x6f;&#109;">&#97;&#100;&#x62;&#x6f;&#x70;&#x73;&#x40;&#109;&#x69;&#x63;&#114;&#111;&#115;&#x6f;&#102;&#x74;&#46;&#99;&#x6f;&#109;</a>宛てに必要な情報をメールで送付します。件名を <code>Request Azure Data Box Pickup for Order: \&lt;ordername&gt;</code> に設定し、本文には以下フォーマットを記入したものを記入します。今回は日本語で記入しました。</p><p>Company name (会社名):<br>Contact name (受取担当者名):<br>Contact tel. no. (受取担当者電話番号):<br>Date of pickup (受取日):<br>Date of birth (担当者生年月日):<br>Nationality (担当者国籍):<br>Time of pickup (受取時刻):<br>Car number plate (自動車登録番号):</p><p>また、希望受取日は、複数決めておくとその後の調整がスムーズです。私が利用した際は、Microsoftから日程変更の依頼が来ました</p><p>受取日が決定すると、Azure Portalで認証コードが発行され、<a href="mailto:&#97;&#x7a;&#x75;&#114;&#x65;&#x2d;&#x6e;&#x6f;&#x72;&#101;&#x70;&#108;&#x79;&#64;&#109;&#x69;&#x63;&#114;&#111;&#115;&#x6f;&#x66;&#x74;&#x2e;&#x63;&#111;&#109;">&#97;&#x7a;&#x75;&#114;&#x65;&#x2d;&#x6e;&#x6f;&#x72;&#101;&#x70;&#108;&#x79;&#64;&#109;&#x69;&#x63;&#114;&#111;&#115;&#x6f;&#x66;&#x74;&#x2e;&#x63;&#111;&#109;</a>から受取準備が完了した旨のメール（以下、参照）が送付されます。</p><img src="/images/20221108a/受け取り準備完了メール.JPG" alt="受け取り準備完了メール.JPG" width="511" height="529" loading="lazy"><p>受取当日は以下3点を用意し、指定された住所でData Boxを受け取ります。</p><ol><li>認証コード</li><li>受取準備完了メールのコピー</li><li>受取担当者の写真つき身分証明書の</li></ol><p>認証コードについては、マイクロソフト側担当者に口頭で伝える必要があるため、メモ等を用意しておくと良いでしょう。</p><p>事前に知らなかったのですが、Databoxの受け取り・引き渡しの際、いくつかの書類（NDA等）にサインをする必要があります。NDAは個人とマイクロソフト者の間で締結するもので、データセンターの情報などの漏洩防止に関係しているようです。</p><p>無事受け取れたら、いよいよData Boxの初期設定に移ります。</p><h1 id="デバイスの初期設定"><a href="#デバイスの初期設定" class="headerlink" title="デバイスの初期設定"></a>デバイスの初期設定</h1><img src="/images/20221108a/ワークフロー_(3).JPG" alt="ワークフロー_(3).JPG" width="1200" height="179" loading="lazy"><h3 id="開梱"><a href="#開梱" class="headerlink" title="開梱"></a>開梱</h3><p>マイクロソフト社から引き取った段ボールを開梱し筐体を取り出したら、次はData Boxの起動と初期設定作業に移ります。<br><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-overview#features-and-specifications">Docs:機能と仕様</a>にありますが、Data Boxの重さは23Kg、サイズは309.0 mm x 430.4 mm x 502.0 mmです。</p><p>大人一人でギリギリ設置可能な大きさ・重さですが、複数名で行うとより安全でしょう</p><h3 id="Data-Boxの起動"><a href="#Data-Boxの起動" class="headerlink" title="Data Boxの起動"></a>Data Boxの起動</h3><p>まず、ディスプレイとは反対側に位置する扉を開け、電源ケーブルを取り出します。<br>電源ケーブルをデバイスと電源に接続し、ディスプレイの下にある電源ボタンを押し、Data Boxを起動します。</p><h3 id="WebUIへアクセス"><a href="#WebUIへアクセス" class="headerlink" title="WebUIへアクセス"></a>WebUIへアクセス</h3><p>次にData BoxのWebUIに Data Box初期設定用PCからアクセスしていきます。</p><p>まず Data Box初期設定用PCにIPアドレスを割り当てていきます。Data Box初期設定用PCのイーサネットアダプタのIPアドレスを192.168.100.5&#x2F;24に設定し、Data BoxのMGMTポートと Data Box初期設定用PCをLANケーブルを結線します。</p><p>結線したら、 Data Box初期設定用PCでブラウザを開き、https:&#x2F;192.168.10.10にアクセスし、ログイン画面が表示されれば疎通成功です。</p><p>次にAzurePortalに記載されているデバイスロックのパスワードを入力してWebUIにログインします。</p><p>※イーサネットに割り当てるIPアドレスや、WebUIのURLは<a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-deploy-set-up">Docs:デバイスに接続する</a>を参考にしています。</p><p>おまけではありますが、ここでデバイスの実効容量の確認も済ませると良いです。</p><p>ログイン後に表示されるダッシュボード中央の[Connect and copy]にて、その時点の空き容量（Free Space）と使用済み容量（Used Space）が表示されます。<br>※キャプチャはデータコピー最中のものです</p><img src="/images/20221108a/【1号機】ダッシュボード.jpg" alt="【1号機】ダッシュボード.jpg" width="1200" height="583" loading="lazy"><p>一通りコピーした後に「思ったよりファイル置けなかった」「もっとコピーしておけばよかった」という事態を避けるため、事前に実効容量を確認し、コピー計画の最終確認ができると良いです。</p><p>今回の実効容量は、2台とも80TBにほど近い値でした。100GB程度の個体差はありましたが、ほとんど気にならない差でした。<a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-overview#features-and-specifications">Docs:実効容量</a>では80TBとされていますが、ほぼ正確な値と思って良さそうです。</p><p>次にData Box側の初期設定を行います。</p><p>今回の手順では、Data#1~3ポートへのIPアドレス割り当てとNFSの接続許可設定を実行していきます。</p><h3 id="Data-BoxへのIP割り当て"><a href="#Data-BoxへのIP割り当て" class="headerlink" title="Data BoxへのIP割り当て"></a>Data BoxへのIP割り当て</h3><p>まず、IPアドレス割り当てからです。</p><p>[Set network interfaces]ページからネットワーク設定画面に遷移し、Data＃1〜3ポートにIPアドレスを割り当てます。</p><p>今回は3つのポートすべてにIPを割り当てていきます。</p><p>※この際MGMTポートのIPアドレスは変更できないため注意です。</p><img src="/images/20221108a/【1号機】NWインターフェース設定.jpg" alt="【1号機】NWインターフェース設定.jpg" width="1200" height="587" loading="lazy"><p>今回は静的にIPアドレスを割り当てるので、IP setteingsをStaticに設定し、ほかの項目（IP address, Subnet, Gateway）を埋めました。</p><p>任意のポートでIPアドレスを入力したら、画面左下の[Apply settings]を押下します。</p><p>ダッシュボードに戻り、設定したIPが各ポートで反映されていれば設定完了です。</p><h3 id="データコピーの接続許可設定"><a href="#データコピーの接続許可設定" class="headerlink" title="データコピーの接続許可設定"></a>データコピーの接続許可設定</h3><p>次にデータコピーに必要な接続情報を取得・設定します。</p><p>ダッシュボードから[Connect and copy]ページを選択した後、対象のストレージアカウントで転送に使用するプロトコルを選択します。今回はCIFSを利用するため、[SMB]を押下します。</p><p>押下すると、添付のようなポップアップが表示されます。</p><p>ここでCIFS接続に必要なユーザネーム、パスワードを取得できます。</p><img src="/images/20221108a/【1号機】接続とコピー_SMB.jpg" alt="【1号機】接続とコピー_SMB.jpg" width="1200" height="585" loading="lazy"><p>CIFSに限らず、「NFSもしくはREST APIで転送したい！」と考えている方も、[Connect and copy]ページにて同様に接続情報を取得・設定できます。</p><p>NFSの場合は接続許可したいIPアドレスをテキストボックスに記入し、Validata IP addressを押下します。</p><p>IPが追加されれば、エクスポート設定が完了します。</p><img src="/images/20221108a/【1号機】接続とコピー_NFS.jpg" alt="【1号機】接続とコピー_NFS.jpg" width="1200" height="582" loading="lazy"><p>REST APIの場合は、BLOBエンドポイントのURL、また認証情報であるAPI Keyや Connection Stringが取得できます。</p><img src="/images/20221108a/【1号機】接続とコピー_RESTAPI.jpg" alt="【1号機】接続とコピー_RESTAPI.jpg" width="1200" height="582" loading="lazy"><h1 id="結線とマウント"><a href="#結線とマウント" class="headerlink" title="結線とマウント"></a>結線とマウント</h1><img src="/images/20221108a/ワークフロー_(4).JPG" alt="ワークフロー_(4).JPG" width="1200" height="179" loading="lazy"><h3 id="Data-BoxとNWスイッチの結線"><a href="#Data-BoxとNWスイッチの結線" class="headerlink" title="Data BoxとNWスイッチの結線"></a>Data BoxとNWスイッチの結線</h3><p>Data BoxへのIP割り当てとデータコピーの接続設定が済んだので、<br>ついにData BoxとNWスイッチを結線させ、ネットワークに接続していきます。（やったー）</p><p>接続するポートとスイッチの対応や、ケーブルの規格については物理環境のはなしの中の<a href="https://qiita.com/sichinoseeeee/private/415694f8f6e781a75b62#data-box%E3%81%AE%E7%B5%90%E7%B7%9A%E3%81%AE%E8%A9%B3%E7%B4%B0%E3%81%AF">Data Boxの結線の詳細は？</a>を参照ください。</p><h3 id="Data-Boxのネットワーク接続確認"><a href="#Data-Boxのネットワーク接続確認" class="headerlink" title="Data Boxのネットワーク接続確認"></a>Data Boxのネットワーク接続確認</h3><p>Data Boxをネットワークに接続させたら、 Data Box初期設定用PCでData Boxにアクセスします。<br>Data Box初期設定用PCのブラウザーからhttps:&#x2F;{Data＃1〜3ポートに割り当てたIP}にアクセスし、WebUIのログイン画面が表示されれば疎通成功です。</p><p>デバイスがネットワークに接続したことが確認できたら、以上でデバイス側での事前作業は完了です。（やったー）</p><p>次にデータコピー用サーバでの作業です。</p><p>この手順ではData Boxのファイルシステムマウントとファイルコピーの動作確認を行います。</p><h3 id="Data-Boxのマウント"><a href="#Data-Boxのマウント" class="headerlink" title="Data Boxのマウント"></a>Data Boxのマウント</h3><p>まずデータコピー用サーバにログインし、<code>/etc/fstab</code> にData BoxをNFSマウントするための定義を記入していきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/fstab</span><br><span class="line"></span><br><span class="line">=====以下定義を追加=====</span><br><span class="line"><span class="comment"># Data Box</span></span><br><span class="line">\\&lt;DeviceIPAddress<span class="comment">#1&gt;\&lt;storageaccountname_BlockBlob&gt;   /mnt/databox1 cifs rw,username=&lt;username&gt;,password=&lt;password&gt;,uid=&lt;uid&gt;,gid=&lt;gid&gt;,dir_mode=0777,file_mode=0777  0 0</span></span><br><span class="line">\\&lt;DeviceIPAddress<span class="comment">#2&gt;\&lt;storageaccountname_BlockBlob&gt;  /mnt/databox2 cifs rw,username=&lt;username&gt;,password=&lt;password&gt;,uid=&lt;uid&gt;,gid=&lt;gid&gt;,dir_mode=0777,file_mode=0777 0 0</span></span><br><span class="line">=======================</span><br></pre></td></tr></table></figure><p><code>/etc/fstab</code> ファイルへの書き込みが完了したら、ついにData Boxをマウントしていきます。<br>対象ファイルシステムが正しくマウントされたかも同時に確認していきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mount /mnt/databox1</span><br><span class="line">$ mount /mnt/databox2</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line">ファイルシステム                                        サイズ  使用  残り 使用% マウント位置</span><br><span class="line">\\&lt;DeviceIPAddress<span class="comment">#1&gt;\&lt;storageaccountname_BlockBlob&gt;          79T  135G   79T    1% /mnt/databox1</span></span><br><span class="line">\\&lt;DeviceIPAddress<span class="comment">#2&gt;\&lt;storageaccountname_BlockBlob&gt;          79T   96G   79T    1% /mnt/databox2</span></span><br></pre></td></tr></table></figure><h3 id="マウントポイント配下にディレクトリ作成"><a href="#マウントポイント配下にディレクトリ作成" class="headerlink" title="マウントポイント配下にディレクトリ作成"></a>マウントポイント配下にディレクトリ作成</h3><p>次にマウントポイント配下にディレクトリを作成していきます。Data Boxのファイルシステムにデフォルトで備わっているディレクトリは<code>\&lt;storageaccountname_BlockBlob&gt; </code> の1つのみでData Boxを発注したストレージアカウント名がそのままディレクトリ名になっています。</p><blockquote><p>常にコピーしようとするファイル用のフォルダーを共有下に作成してから、ファイルをそのフォルダーにコピーします。<br>~~~中略~~~<br>ストレージ アカウント内の root フォルダーに直接ファイルをコピーすることはできません。</p></blockquote><p><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-deploy-copy-data-via-nfs#connect-to-data-box">Docs:Data Boxに接続する</a>で推奨されているように、デフォルトのディレクトリの1階層下に新たなディレクトリ（以下、コンテナー用ディレクトリ）を作成し、そこにデータをコピーする必要があります</p><blockquote><p>ブロック BLOB およびページ BLOB の共有の下に作成したフォルダーは、データが BLOB としてアップロードされるコンテナーになります。</p></blockquote><p>また、<code>\&lt;storageaccountname_BlockBlob&gt;</code> の直下に作成したディレクトリは、Azureへインポート後にコンテナーとして反映されます。<br>今回は既定のコンテナー配下にファイル及びディレクトリを配置する想定だったため、以下手順でディレクトリを作成していきます。</p><p>※Data Boxを2台同時に使用するため、管理上の都合でコンテナ用ディレクトリ配下に更に1階層ディレクトリを作成していますが、特に必要ではありません。<br>ユーザー&#x2F;オーナーは</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -m 755 /mnt/databox1/&lt;containername&gt;</span><br><span class="line">$ <span class="built_in">mkdir</span> -m 755 /mnt/databox2/&lt;containername&gt;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mkdir</span> -m 755 /mnt/databox1/&lt;containername&gt;/databox1</span><br><span class="line">$ <span class="built_in">mkdir</span> -m 755 /mnt/databox2/&lt;containername&gt;/databox2</span><br><span class="line">$ find /mnt/databox* -<span class="built_in">ls</span></span><br><span class="line">3458764513820542746      1 drwxrwxr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:45 /mnt/databox1</span><br><span class="line">3458764513820542749      1 drwxr-xr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:45 /mnt/databox1/&lt;containername&gt;</span><br><span class="line">3458764513820542750      1 drwxr-xr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:45 /mnt/databox1/&lt;containername&gt;/databox1</span><br><span class="line">3458764513820542746      1 drwxrwxr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:46 /mnt/databox2</span><br><span class="line">3458764513820542749      1 drwxr-xr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:46 /mnt/databox2/&lt;containername&gt;</span><br><span class="line">3458764513820542750      1 drwxr-xr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:46 /mnt/databox2/&lt;containername&gt;/databox2</span><br></pre></td></tr></table></figure><p>今回のように既存のコンテナーにデータをインポートする要件がある場合は、<code>\\&lt;DeviceIPAddress#1&gt;\&lt;storageaccountname_BlockBlob&gt;</code> 配下に同様の名前のディレクトリを作成する必要があります。ここでディレクトリ名に誤字があると、Azureへのインポート時にまったく新しい別のコンテナーが生成されてしまうので注意が必要です。</p><p>以上でディレクトリ作成が完了したので、次はディレクトリの動作確認をしていきます。</p><h3 id="ディレクトリの動作確認"><a href="#ディレクトリの動作確認" class="headerlink" title="ディレクトリの動作確認"></a>ディレクトリの動作確認</h3><p>本手順では、作成したディレクトリ配下でディレクトリとファイルの作成（ディレクトリへの書き込み）ができるかを確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> /mnt/databox1/&lt;containername&gt;/databox1/test.txt</span><br><span class="line">$ <span class="built_in">ls</span> -l /mnt/databox1/&lt;containername&gt;/databox1</span><br><span class="line">$ <span class="built_in">rm</span> /mnt/databox1/&lt;containername&gt;/databox1/test.txt</span><br><span class="line">$ <span class="built_in">ls</span> -l /mnt/databox1/&lt;containername&gt;/databox1</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">touch</span> /mnt/databox2/&lt;containername&gt;/databox2/test.txt</span><br><span class="line">$ <span class="built_in">ls</span> -l /mnt/databox2/&lt;containername&gt;/databox2</span><br><span class="line">$ <span class="built_in">rm</span> /mnt/databox2/&lt;containername&gt;/databox2/test.txt</span><br><span class="line">$ <span class="built_in">ls</span> -l /mnt/databox2/&lt;containername&gt;/databox2</span><br></pre></td></tr></table></figure><p>以上のコマンドが正常に実行されれば、データコピー作業の準備は以上です。<br>ついに、データコピー作業へと移ります。</p><h1 id="データコピー"><a href="#データコピー" class="headerlink" title="データコピー"></a>データコピー</h1><img src="/images/20221108a/ワークフロー_(5).JPG" alt="ワークフロー_(5).JPG" width="1200" height="178" loading="lazy"><h3 id="コピーコマンド実行"><a href="#コピーコマンド実行" class="headerlink" title="コピーコマンド実行"></a>コピーコマンド実行</h3><p>今回の案件では<code>cp -prf</code>コマンドでデータコピーを実施しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> -prf /&lt;転送元ファイルパス&gt; /mnt/databox1/&lt;containername&gt;/databox1/&lt;転送先パス&gt;</span><br><span class="line">$ <span class="built_in">cp</span> -prf /&lt;転送元ファイルパス&gt; /mnt/databox2/&lt;containername&gt;/databox2/&lt;転送先パス&gt;</span><br></pre></td></tr></table></figure><h3 id="コピーのパフォーマンス"><a href="#コピーのパフォーマンス" class="headerlink" title="コピーのパフォーマンス"></a>コピーのパフォーマンス</h3><p>ファイルサイズやファイル数に左右されますが、今回の転送速度は100~170MB&#x2F;秒でした。</p><p>有効容量の80TBいっぱいにコピーしたい場合、24時間休まずシリアル実行すると、8日前後で完了する計算です。</p><p>今回はシリアル実行でしたが、コピー完了までに1台あたり8~9日かかりました。<br><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-limits#data-box-limits">Docs:Data Boxの制限</a>には10セッションまで同時接続できるとあるので</p><blockquote><p>Data Box では、NFS 共有上で最大 10 のクライアント接続が同時にサポートされます。</p></blockquote><p>パラレルでコピーすることによって、さらに転送速度の向上を狙えるようです。</p><h1 id="発送"><a href="#発送" class="headerlink" title="発送"></a>発送</h1><img src="/images/20221108a/ワークフロー_(6).JPG" alt="ワークフロー_(6).JPG" width="1200" height="179" loading="lazy"><h3 id="デバイスの発送準備処理（チェックサム計算）"><a href="#デバイスの発送準備処理（チェックサム計算）" class="headerlink" title="デバイスの発送準備処理（チェックサム計算）"></a>デバイスの発送準備処理（チェックサム計算）</h3><p>データコピーが完了したら、デバイスの発送準備処理を実行していきます。<br>ダッシュボードで[Prepare to ship]ページを選択し、[Start preparation]を押下します。</p><img src="/images/20221108a/【1号機】発送準備.jpg" alt="【1号機】発送準備.jpg" width="1200" height="574" loading="lazy"><p>発送準備処理では、キャプチャにある通り、デバイスのロックや転送済みデータの整合性確認、ファイル一覧の作成などが実行されます。</p><p>処理完了後には以下のように全項目にチェックがつき、Completedの文字が表示されます。<br><img src="/images/20221108a/発送準備完了_1号機.JPG" alt="発送準備完了_1号機.JPG" width="1200" height="540" loading="lazy"></p><p>余談にはなりますが、発送準備処理のリードタイムについても説明しようと思います。<br><a href="https://docs.microsoft.com/ja-jp/azure/databox/data-box-deploy-prepare-to-ship">Docs:Azure Data Box の発送準備</a>では最遅で数日間かかるとあるので、ここで少し驚く方もいるかと思います。</p><blockquote><p>チェックサムの計算は、データのサイズによっては数時間から数日間かかる場合があります。</p></blockquote><p>本当に数日間かかるとすると、発送準備処理だけのためにData Boxサービス料を払うことになり、あまり嬉しくはありません。<br>しかし、いざ発送準備処理を実行してみると、2台平均の所要時間は10分ほどで、見込みよりも大幅に短い時間で完了することができました。</p><p>今回はData Box1台あたり実効容量の9割近く（70&#x2F;80TB）を使用していたため、最悪のパフォーマンスが考えられる環境でしたが、十数分で完了しました。</p><p>発送準備処理のリードタイムは、扱うデータ構造やファイル数、ファイルあたりのサイズなど環境要因に左右されるため参考程度ではありますが、今回の実績ベースでは概ね十数分～数時間程度と考えて良さそうです。<br>ドキュメントにあるリードタイムの目安を鵜呑みにする必要はそれほどなく、より余裕を持ったコピー計画を立ても問題ないと感じています。</p><h3 id="Data-Boxシャットダウンと抜線"><a href="#Data-Boxシャットダウンと抜線" class="headerlink" title="Data Boxシャットダウンと抜線"></a>Data Boxシャットダウンと抜線</h3><p>クローズ処理が完了したら、いよいよ発送に向けて準備をします。<br>WebUIにアクセスしデバイスをシャットダウンしていきます。[Shut down or restart]ページから[Shut down]を押下します。</p><img src="/images/20221108a/【1号機】シャットダウンと再起動.jpg" alt="【1号機】シャットダウンと再起動.jpg" width="1200" height="576" loading="lazy"><p>シャットダウンすると、当たり前ですがファイル共有は使えなくなります。<br>必要に応じて周知しましょう。</p><p>押下後に数分あけ、ブラウザの新しいタブを開き再度WebUIにアクセスをします。<br>この時アクセスがタイムアウトすれば、Data Box側のNICがアクティブでない（＝デバイスの電源が落ちた）と判断できます。</p><p>次にNWスイッチに接続しているケーブルを抜線し、Data Boxをアンラック・梱包します。</p><h3 id="梱包"><a href="#梱包" class="headerlink" title="梱包"></a>梱包</h3><p>データボックスを元々の段ボールに梱包し、発送の準備をします。<br><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-overview#features-and-specifications">Docs:機能と仕様</a>にある通り、マイクロソフト社からは①Data Box本体と②電源ケーブルの2点をレンタルしているので、<br>以上が間違いなく梱包されていることを確認し、段ボールの封をします。</p><h3 id="引き渡し"><a href="#引き渡し" class="headerlink" title="引き渡し"></a>引き渡し</h3><p>発送（Azureデータセンターへの引き渡し）の目処がたった時点で、受け取り時と同様に<a href="mailto:&#x61;&#100;&#x62;&#x6f;&#x70;&#115;&#64;&#x6d;&#105;&#99;&#114;&#x6f;&#x73;&#111;&#102;&#116;&#46;&#99;&#x6f;&#109;">&#x61;&#100;&#x62;&#x6f;&#x70;&#115;&#64;&#x6d;&#105;&#99;&#114;&#x6f;&#x73;&#111;&#102;&#116;&#46;&#99;&#x6f;&#109;</a>宛に引き渡し日時の調整メールを送付します。<br>引き渡しでは以下フォーマットでメールを送付します。</p><p>Company name (会社名):<br>Contact name (引き渡し担当者名):<br>Contact tel. no. (引き渡し担当者電話番号):<br>Date of dropoff (引き渡し日):<br>Date of birth (担当者生年月日):<br>Nationality (担当者国籍):<br>Time of dropoff (引き渡し時刻):<br>Car number plate (自動車登録番号):</p><p>引き渡し日時が確定しData Boxの発送準備処理が終わるとAzure Portalで認証コードが発行されます。<br>また、<a href="mailto:&#x61;&#122;&#117;&#x72;&#101;&#x2d;&#x6e;&#111;&#x72;&#x65;&#112;&#108;&#121;&#64;&#x6d;&#x69;&#x63;&#x72;&#111;&#x73;&#x6f;&#x66;&#116;&#x2e;&#x63;&#111;&#x6d;">&#x61;&#122;&#117;&#x72;&#101;&#x2d;&#x6e;&#111;&#x72;&#x65;&#112;&#108;&#121;&#64;&#x6d;&#x69;&#x63;&#x72;&#111;&#x73;&#x6f;&#x66;&#116;&#x2e;&#x63;&#111;&#x6d;</a>から受取準備が完了した旨のメール（以下、参照）が送付されます。<br><img src="/images/20221108a/引き渡し準備完了メール.JPG" alt="引き渡し準備完了メール.JPG" width="512" height="561" loading="lazy"></p><p>あとは引き渡し当日に以下3点を準備してData BoxをAzureデータセンターに引き渡します。</p><ol><li>認証コード</li><li>引き渡し準備完了メールのコピー</li><li>引き渡し担当者の写真つき身分証明書</li></ol><h1 id="Azureへのインポート"><a href="#Azureへのインポート" class="headerlink" title="Azureへのインポート"></a>Azureへのインポート</h1><img src="/images/20221108a/ワークフロー_(7).JPG" alt="ワークフロー_(7).JPG" width="1200" height="180" loading="lazy"><h3 id="インポートを待つ"><a href="#インポートを待つ" class="headerlink" title="インポートを待つ"></a>インポートを待つ</h3><p>引き渡し後は特にすることはなく、Azureへのインポートを待ちます。</p><p>今回のインポート（デバイス引き渡し完了→BLOBへのインポートまで）のリードタイムは、2台ともに約24時間で、予想よりも短納期で対応していただけた印象です。金曜日にData BoxがAzureデータセンターに到着し、土曜日にインポートが完了したのですが、営業日は考慮せずに対応してもらえるようでした。</p><p>Data Boxのワークフローについては以上になります。最後に、全体を通してつまずいたポイントを紹介します。</p><h2 id="つまずいたポイント"><a href="#つまずいたポイント" class="headerlink" title="つまずいたポイント"></a>つまずいたポイント</h2><h3 id="Azureにインポートしたらファイル権限はなくなるのに、一生懸命権限を保持しようとした"><a href="#Azureにインポートしたらファイル権限はなくなるのに、一生懸命権限を保持しようとした" class="headerlink" title="Azureにインポートしたらファイル権限はなくなるのに、一生懸命権限を保持しようとした"></a>Azureにインポートしたらファイル権限はなくなるのに、一生懸命権限を保持しようとした</h3><p>Azureにデータをインポートしてしまえばファイルの権限はなくなってしまうのですが、転送時に権限の保持をしようとしたために、余計な苦労をしました。</p><p>当初はNFSでData Boxのファイルシステムをマウントを予定していました。<br>先述のようにデータコピーでは<code>cp -prf</code>コマンドを実行したのですが、NFSマウントの環境下ではコピーコマンド実行時に権限の保持ができませんでした。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> -prf /tmp/databox_dev/test.txt /mnt/databox1/&lt;containername&gt;/databox1</span><br><span class="line"><span class="built_in">cp</span>: <span class="string">&#x27;/mnt/databox1/&lt;containername&gt;/databox1/test.txt&#x27;</span> の所有者の保護に失敗しました: 許可がありません</span><br></pre></td></tr></table></figure><p>コピーは成功しており目先の問題はないのですが、エラーメッセージが出るのは気になります。</p><p>Data BoxはWindows系OSで動いていると推測し、NFSでのマウントはユーザー名のマッピングにおいて相性が悪いと仮定しました。そこでNFSからCIFSでのマウントに切り替えところ、権限を保持したままコピーできるようになったのですが、Azureの世界ではファイルの権限は引き継がれません。</p><p>振り返るとファイルの権限を保持するオプションも、それを保持するための苦労も必要なかったと今は思います。</p><p>ファイルの権限を保持することに意味はなく、不具合を引き起こす場合もあるので、コピー時には余計なオプションを付け足すのは避けたほうがよいでしょう。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>以上、秋のブログ週間の一貫で、Data Boxを使ってみてわかった詳細なワークフロー・手順やつまずいたポイントを紹介してきました。</p><p>AzureのData Boxが日本で提供され始めたのは2019年ごろなので、比較的若いサービスです。</p><p>第三者のレポートが非常に少なく、検討段階では情報収集に苦労しました。</p><p>本記事がData Box利用を検討される方の参考になれば幸いです。</p><p>データ移行にかけられる期間と回線費用を考えると、数十TB規模のデータを1-2週間で移行できるのは非常に有効な手段だと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、テクノロジーイノベーショングループ所属、2021年4月に新卒で入社した一ノ瀬です。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="クラウドマイグレーション" scheme="https://future-architect.github.io/tags/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
    <category term="Azure" scheme="https://future-architect.github.io/tags/Azure/"/>
    
    <category term="DataBox" scheme="https://future-architect.github.io/tags/DataBox/"/>
    
    <category term="データ移行" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E7%A7%BB%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>SREの探究 - Spotifyの事例：Ops-in-Squads</title>
    <link href="https://future-architect.github.io/articles/20221107a/"/>
    <id>https://future-architect.github.io/articles/20221107a/</id>
    <published>2022-11-06T15:00:00.000Z</published>
    <updated>2022-11-07T04:25:41.473Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221107a/teamwork-7423957_640.png" alt="" width="640" height="427"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG 岸下です。<br><a href="/articles/20221031a/">秋のブログ週間</a>の5本目になります。</p><p>最近、Netflixで配信中のSpotify創業ドキュメンタリー：<a href="https://www.netflix.com/title/81186296">The Playlist</a>を見ました。創業ドキュメンタリーは鳥肌モノが多く、なんだかパワー貰える感じがして自分も頑張ろうと思わせてくれるので非常にオススメです<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p>そんなわけでSpotify熱が高まっていたこと、自分がプロジェクトの方でSRE活動に関わっていることもあり、<a href="https://www.oreilly.co.jp/books/9784873119618/">SREの探究：7章「SREのいないSRE：Spotifyのケーススタディ」</a>を読んでみました。</p><h2 id="そもそもSREって？"><a href="#そもそもSREって？" class="headerlink" title="そもそもSREって？"></a>そもそもSREって？</h2><p>恥ずかしながら、自分も現在のプロジェクトに配属されるまでSREの存在を知りませんでした。</p><p>SREはSite Reliability Engineeringの略で、サービスの信頼性をソフトウェアエンジニアリングの力で高めていこうぜ！というGoogle発祥の試みになります。</p><p>もはや、試みという枠組みからは抜け出していて一種の<strong>文化</strong>です。</p><p>詳しく知りたい人はオライリーの<a href="https://www.oreilly.co.jp/books/9784873117911/">SRE本</a>が有名どころです。<br>が、かなり分厚くて読むのが辛い人もいると思うのでTopotal社がやっているPodcast：<a href="https://open.spotify.com/show/1PUdFj8hXIZdyFat3nk3Af?si=2aaef285b25a4220">もう一度読むSRE</a>をオススメします。</p><p>SRE活動の例として、</p><ul><li>標準化<ul><li>開発に使うツールやクラウドサービスの設定標準を決めておく</li></ul></li><li>エラーバジェット<ul><li>あるサービスの許容できるエラーの量を数値で決めてしまって、機能開発のリリース可否を定性的に判断しよう</li></ul></li><li>自動化<ul><li>人間が手作業でデプロイするといつか事故るから、できるだけ自動化しよう</li></ul></li><li>アラートの改善<ul><li>多すぎるアラートはノイズにしかならないから、利用ユーザーの機会損失となるようなバグだけアラートを飛ばそう</li></ul></li></ul><p>などの活動になります。<br>SREは文化なので、SRE活動はSREの伝道師となってエンジニアリングチームに対して、恒常的にサービスの信頼性を維持・向上させる文化を醸成していきます。<br>以下の記事も参考にしてみてください。</p><ul><li><a href="https://future-architect.github.io/articles/20220518a/">TIG 原木さんの記事：OpenSLOについて</a></li><li><a href="https://engineering.mercari.com/blog/entry/20220225-cdb2b6deff/">メルカリ社：SRE伝道師としてMicroservices SRE チームが取り組んでいる事例</a></li><li><a href="https://www.youtube.com/channel/UChvqB_M4qllXCJOW9nNB-Cw">SRE NEXT 2022: 登壇資料</a></li></ul><h2 id="SpotifyのSRE：Ops-in-Squads"><a href="#SpotifyのSRE：Ops-in-Squads" class="headerlink" title="SpotifyのSRE：Ops-in-Squads"></a>SpotifyのSRE：Ops-in-Squads</h2><p>この章のタイトルでは「SREのいないSRE」と書いていますが、SpotifyにSREが居ないわけではありません。<br>Spotifyではプロダクトリリース前から<strong>運用に重きを置いた開発</strong>を行っており、例えば</p><ul><li>プロダクトリリース前の段階で開発メンバーの中に運用エンジニアを組み込む<ul><li>開発に関する議論の中で運用の健全性を対等なテーマとして扱う社風の醸成</li></ul></li><li>ベータ版時点で、運用をソリューションのライフサイクルに組み込む<ul><li>スケーラビリティ、信頼性、保守性など運用上の品質を早い段階で議論</li></ul></li><li>運用の責任をそのノウハウのあるところ、開発者の近くに移す<ul><li>自分で構築したものは自分で実行・運用</li></ul></li></ul><p>などの試みによって文化を根付かせていたそうです。</p><p>また、Spotifyのバックエンドは創業当初から多くの小さなサービスで構成、現代で言えば<strong>マイクロサービスパターン</strong>を採用することを構想しており、これらを組み合わせることでSpotifyのクライアントにコンテンツを提供しています。</p><p>これら2つの文化・構想が現在の<strong>Ops-in-Squads</strong>という運用体型を生み出しました。<br>直訳すればOpsはOperations（運用）、Squadsは分隊で、運用を細かく分けられた分隊が行う形態となります。<br>つまり、Ops-in-Squadsは各サービスの開発チーム側でデプロイから運用までの世話を見る、つまり開発チーム側でサービスの信頼性の担保に責任を持とうぜという文化になります。</p><h2 id="Ops-in-Squads確立までの道のり"><a href="#Ops-in-Squads確立までの道のり" class="headerlink" title="Ops-in-Squads確立までの道のり"></a>Ops-in-Squads確立までの道のり</h2><p>では、どういう経緯でOps-in-Squadsが確立されていったのでしょうか？<br>ざっくりではありますが、その経緯を要約します。</p><h3 id="ベータ版リリースとユーザー数の急激な増加（2007年～2010年）"><a href="#ベータ版リリースとユーザー数の急激な増加（2007年～2010年）" class="headerlink" title="ベータ版リリースとユーザー数の急激な増加（2007年～2010年）"></a>ベータ版リリースとユーザー数の急激な増加（2007年～2010年）</h3><p>場所はスウェーデン、時はインターネットが民主化し皆がエンタメコンテンツを渇望するような時代で、一世を風靡していたファイル共有サイト：パイレートベイ（<a href="https://ja.wikipedia.org/wiki/%E3%83%91%E3%82%A4%E3%83%AC%E3%83%BC%E3%83%88%E3%83%BB%E3%83%99%E3%82%A4">Wiki</a>）が問題視され、遂に閉鎖されたという背景があります。<br>そんな中、音楽コンテンツ配信の新生児Spotifyがベータ版リリースということでスウェーデン中の元パイレートベイユーザーがSpotifyへどっと流れ込みました。<br>詳しくは<a href="https://www.netflix.com/title/81186296">The Playlist</a>のエピソード1～2を御覧ください。</p><p>ユーザーの急激な増加はプロダクトに深刻な問題を発生させます。稀にしか起こらない、ほとんど理論上の問題点が大規模に顕在化したわけです。<br>具体的には</p><ul><li>ピーク時間帯にバックエンドサービスでサービス障害</li><li>使用率の高い状況で重要なデータを扱っているサーバーが反応しなくなる</li><li>サーバーのラックへの格納と積み重ねの日々</li></ul><p>などが本書で挙げられています。</p><p>利用ユーザーの多いサービスに関わったことのない自分としてはどれぐらいのつらみだったのか想像し難いのですが、<br><strong>「プロダクトの成功とは、負荷との格闘で今にも落ちそうになるシステムを手作業で何とか動かし続けるために、ノートPCを前にして過ごす数え切れないほどの夜という犠牲の上に成り立つのだ」</strong> という名言から、想像を絶する感があります😇</p><p>これに対して、</p><ul><li>スケーラビリティと信頼性を全面に打ち出す<ul><li>運用を重視する文化から、運用チームだけでなく開発チームも率先して運用の問題解決に協力</li></ul></li><li>スプリント期間中に開発チームのメンバーに「システム所有者デー」を設ける<ul><li>この日は主に各自のサービスのメンテナンス、アップグレード、一般的な改善強化に専念する時間が与えられる</li></ul></li><li>コアサービスの定式化<ul><li>（当時は）様々なバックエンドサービスが依存しあっており、あるサービスが別のサービスを救うための犠牲になることがあった</li><li>これによって、（睡眠不足の）運用エンジニアの意思決定に常に迷いを生じさせてしまっていた</li><li>そこで、コアサービスをユーザーに音楽コンテンツを届けるプロセスと定義し、他のサービスから依存関係を分離した</li></ul></li><li>ゴールキーパーの導入<ul><li>曜日毎などで、運用に関する問い合わせの一次受付の人間を決めておき、コンテキストスイッチが起こる人間の数を最小限に留めておく</li></ul></li></ul><p>などによって、この苦難を乗り越えていきました。</p><p>私が所属するプロジェクトでも曜日毎でゴールキーパー役が決まっており、その曜日以外は問い合わせを気にしなくて済むのでタスクに集中できる環境を作り出し、非常に良い試みだと思います。</p><h3 id="手作業の行き詰まり（2012年）"><a href="#手作業の行き詰まり（2012年）" class="headerlink" title="手作業の行き詰まり（2012年）"></a>手作業の行き詰まり（2012年）</h3><p>今日では、CI&#x2F;CDなど自動化の取り組みが一般化しつつありますが、2012年後半に100万ユーザーを突破したSpotifyは未だ手作業でのデプロイを行っていました。<br>デプロイ方法はというと、社内チャットで <strong>「～～ DEPLOY!」と叫ぶことで他のユーザーが別のデプロイ作業を行わないように排他制御を確保</strong> してから、手作業でスクリプトを実行するやり方を取っていたそうです。<br>まさに人間的排他制御…！2012年時点で100万ユーザーを抱えていたサービスがこのデプロイ方法を取っていたのは驚きです😮</p><p>手作業によるデプロイに加え、新規サーバーの購買と設置、インフラの変更に対するレビューとマージ、アラートの設定など運用チームの負担がどんどん増え、新しい機能や改良した機能をデリバリする能力はどんどん低下していきました。</p><p>バックエンドのアーキテクチャは初期の段階からスケールできるような設計が議論されておりスケールアップに対応済みでしたが、<strong>それに合わせた運用業務のスケールアップは集中型の運用SREチームでは対応できない</strong>ことに気づかされ、Ops-in-Squads（分隊型運用）を確立させる動きが始まるのでした。</p><h3 id="分隊型運用の導入（2013～2015年）"><a href="#分隊型運用の導入（2013～2015年）" class="headerlink" title="分隊型運用の導入（2013～2015年）"></a>分隊型運用の導入（2013～2015年）</h3><p>まずは運用チームの負担を減らすための大きな変革として、</p><ul><li>Jiraチケットで起票することで、新規サーバーのプロビジョニング自動化</li><li>サーバー用のDNSレコードの追加・デプロイを自動化</li><li>内製ツールを用いたDNS SRVレコードに関するテストとデプロイの自動化<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li><li>デプロイ権限を運用チームから開発チームへ移譲<ul><li>他の誰かからApproveを貰えた場合はセルフマージ可</li></ul></li></ul><p>などの自動化が導入されました。<br>ただ、これらの導入によって一時的に解決の兆しが見えたと思いきや、新たな問題が生まれます。<br>これまでは運用チームが行っていた「サニティーチェック」が取り除かれたことによって、バックエンドのカオス化を生み出してしまいました。<br>また、オンコール担当の運用エンジニアも「プロダクションで何が実行されているか」という対処に必要な理解を欠いていたりする事例が目立つようにもなりました。<br>運用チームの作業負担を減らすための自動化によって、今度は運用チームが全てを把握できなくなってしまい、全ての運用の面倒を見ることができなくなってしまったわけです。</p><p>そんなこんなでOps-in-Squads、つまりサービスに対するオンコールと運用の責任を開発チームが負うスタイルを形成する運びとなりました。<br>ただ、いきなり「運用チームはもう面倒見きれないから、サービスの面倒は自分たちで見てね」と言われても反発は必至です。<br>そこで、運用チームから運用エンジニアを開発チームに派遣することで <strong>「運用の地ならし」</strong> を行い、徐々にオンコールと運用の責任を開発チームへ移譲していくことでOps-in-Squadsを確立させていったようです。</p><p>この活動は当にEnabling SREで、中央のSREチームのメンバーが伝道師となり、他の開発チームでSREができる（Enabling）ように文化を根付かせていったわけですね🧐<br>Enabling SREに関しては以下の記事が参考になります。<br>参考：<a href="https://moneyforward.com/engineers_blog/2022/02/24/enabling-sre/">Money Forwad社：組織にSREの文化を作り上げていくEnabling SRE</a></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回、本書を読みながら感想記事を執筆したことでエンジニアリング（主に運用）の側面で見たSpotifyの成長とその運用形態であるOps-in-Squadsの成り立ちを学ぶことができました。組織に文化を根付かせる＝組織の人の意識を変えさせることになるので、本当に労力と根気のいる作業だと改めて思いました。</p><p>昨今ではマイクロサービスパターンが流行っていることもあり、規模の大きいサービスではOps-in-Squadsも1つの選択肢としてポジションを確立させていくのかなと思いました。<br>各サービス・機能の運用は各分隊に任せて、中央のSREチームは各分隊が運用コストを下げられるためのツール開発や新しい技術の標準化を進めていくスタイルとなりそうです。</p><p>また、本書では泥臭ストーリーが包み隠さず書かれており、更に事前に<a href="https://www.netflix.com/title/81186296">The Playlist</a>を見ていたこともあって、脳内に情景を浮かぶような解像度で読むことができました。<br>詳細なストーリーを読みたい方、他の事例を読みたい方は是非本書を手に取ってみてください。<br>自分もこの話を励みに、プロジェクトでの活動を邁進していきたいと思います。</p><p>アイキャッチは<a href="https://pixabay.com/ja/users/roszie-6000120/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=7423957">Rosy - The world is worth thousands of pictures</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=7423957">Pixabay</a>からの画像を利用させていただきました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">スペースXドキュメンタリー：<a href="https://www.netflix.com/title/81111324">Return to space</a>はイーロン・マスクの気迫に鳥肌が立ちました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://github.com/spotify/rspec-dns">https://github.com/spotify/rspec-dns</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221107a/teamwork-7423957_640.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;427&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="SRE" scheme="https://future-architect.github.io/tags/SRE/"/>
    
    <category term="Spotify" scheme="https://future-architect.github.io/tags/Spotify/"/>
    
  </entry>
  
  <entry>
    <title>チームの開発生産性を高めるための心がけ</title>
    <link href="https://future-architect.github.io/articles/20221104a/"/>
    <id>https://future-architect.github.io/articles/20221104a/</id>
    <published>2022-11-03T15:00:00.000Z</published>
    <updated>2022-11-08T02:19:52.123Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221104a/rocket-1103713_640.jpg" alt="" width="640" height="360"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Technology Innovation Group 辻です。<br><a href="/articles/20221031a/">秋のブログ週間</a>の 4 本目です。</p><p>最近はアーキテクトとしてチームにジョインすることも増えてきました。より素早く、継続的にビジネス上の価値を提供するためにチームの開発生産性は重要です。チームの生産性を高めるために私が心がけているいくつかの内容を紹介します。</p><h2 id="心がけ"><a href="#心がけ" class="headerlink" title="心がけ"></a>心がけ</h2><ol><li>開発上のボトルネックを取り除く</li><li>コードべースの品質を保つ</li><li>コードを読みやすくする</li><li>素早くレビューに取り組む、質問&#x2F;相談にレスポンスする</li><li>体裁の一貫性を保つ</li></ol><h3 id="1-開発上のボトルネックを取り除く"><a href="#1-開発上のボトルネックを取り除く" class="headerlink" title="1.開発上のボトルネックを取り除く"></a>1.開発上のボトルネックを取り除く</h3><p>開発上のボトルネックになっているポイントを発見し、原因を特定し、対応する、ということです。一例をあげると以下のようなことです。</p><ul><li>コードの責務がはっきりしておらず、改修時の影響が大きくなる。意図しない挙動になる</li><li>そもそもテストコードがなく、機能仕様が満たされているのかわからない</li><li>改修しようと思ったが、そもそもコードベースのテストが失敗していた</li><li>SDK が素朴な API のみで構成されており、コードの記述量が増える、全体の見通しがわかりにくい</li><li>CI 環境でのテスト実行に時間がかかり、素早いフィードバックが得られない</li><li>必要なテストコードが膨大になり、テストの実装に時間がかかる、またテストコードのメンテナンスが難しい</li><li>デプロイが属人的で、デプロイ職人しかデプロイできない、デプロイには秘伝のコマンドが必要になる</li></ul><p>ボトルネックになるポイントは開発の規模&#x2F;仕様&#x2F;特性あるいは開発体制によっても変わります。アーキテクトとして実際の開発に向き合い、まだコードも書くからこそ、開発上のボトルネックポイントがわかり、またどうすればいいのかいくつかの手段のなかから最適な選択ができます。</p><h3 id="2-コードべースの品質を保つ"><a href="#2-コードべースの品質を保つ" class="headerlink" title="2.コードべースの品質を保つ"></a>2.コードべースの品質を保つ</h3><p>品質を保つことは開発生産性に大きく影響があります。え、品質？生産性は関係ないのでは？と思う方もいるかもしれません。しかし、そうではありません。品質が悪いと手戻りが発生し、結果的に生産性に跳ね返ります<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。品質を保つからこそ高い生産性が得られます。品質と生産性の議論は <a href="https://twitter.com/t_wada">t_wada</a> さんの『<a href="https://speakerdeck.com/twada/quality-and-speed-2022-spring-edition">質とスピード</a>』などの資料を参照してください。</p><p>コードベースの品質を保つために実践しているいくつかのプラクティスを紹介します。</p><h4 id="ユニットテストを充実させる"><a href="#ユニットテストを充実させる" class="headerlink" title="ユニットテストを充実させる"></a>ユニットテストを充実させる</h4><ul><li>データパターンを網羅する</li></ul><p>機能要件を満たすユニットテストを書きます。具体的にはインプットデータを入力したときに、想定しているアウトプットデータが出力されていることを確認します。業務上想定している入力パターンと出力パターンの網羅性が重要です。テストケースレビュー時は特にこのデータパターンの網羅性を意識して、業務観点から抜けているケースがないか気にしながらレビューしています。</p><p>なおコードカバレッジはテスト品質の指標の 1 つとしてよく挙げられますが、私は品質の絶対的な指標とはせずに、参考値として捉えています。もちろんデータパターンを網羅したテストを実装した結果、コードカバレッジが低ければなにか問題があるかもしれません。</p><ul><li>なるべくモックを使わず、本番環境に近い状態でテストする</li></ul><p>サーバアプリケーションの機能であれば、データベースへの IO を伴うことが多いでしょう。ユニットテストでも、モックを使わずになるべく実環境に近い状況でテストできるように整えています。たとえばデータベースであれば、ローカル環境にコンテナとして立ち上げて、そのデータベースに本番環境と同等の DDL を適用し、その環境をユニットテストに使用します。もちろんアプリケーションから外部の API にリクエストする場合はローカル環境に同等の環境を用意するのは難しいため、この場合はモックしてユニットテストすることは妥当です。<code>Cypress</code> などを使ったフロントエンドの E2E テストをローカルで実施するときに、バックエンド API に本物の実装を使うことはテストのコストが高くなるため、モックすることもあるでしょう。</p><h4 id="自動テストを行う"><a href="#自動テストを行う" class="headerlink" title="自動テストを行う"></a>自動テストを行う</h4><ul><li>意図しない振る舞いをより早く捉える</li></ul><p>ユニットテストを充実させたうえで、それを継続的にテストします。あるタイミングでは PASS していた実装もバグ修正や機能追加、リファクタリングなどにより変化するものです。コードの変更だけでなく、ランタイムのバージョンをアップデートするなどのインフラ関連の変更もあるでしょう。こうしたコードやインフラの変更による影響が意図しているものだけであるか、意図せず挙動が変わっていることがないか、PR をマージする前に自動テストして確認します。そして自動テストを PASS した PR だけをマージします。自動テストが失敗していれば、その内容を実装者に確認します。</p><p>万が一 master ブランチを使った自動テストが失敗していた場合は slack などに通知を飛ばすようにしています。迅速に状況を確認し、影響度に応じて対応します。</p><ul><li>テストを十分早く動作させる</li></ul><p>最初のボトルネックのところにも少し書きましたが、テストコードが増えるにつれ、テストの所要時間が増えることがよくあります。自動テストは必要ですが、そのテストを十分早い時間で動作させることも必要です。高速化するための方針としては、テスト範囲を狭める、テストを分割して並列に実行できるようにする、などがあります。今、私が所属しているチームでは後者の方針で CI 環境上での自動テストを高速化しています。具体的には CI 環境に CircleCI を使っており、<a href="https://circleci.com/docs/ja/parallelism-faster-jobs/">テスト分割と並列実行</a>にある <code>circleci tests split</code> などを組み合わせてテストを分割し、分割したテストを異なるコンテナ上で並列に実行しています。</p><h3 id="3-コードを読みやすくする"><a href="#3-コードを読みやすくする" class="headerlink" title="3.コードを読みやすくする"></a>3.コードを読みやすくする</h3><p>読みやすいコードはコードが修正しやすく、また修正に伴う影響範囲も把握しやすいです。本番環境で運用されるソフトウェアのコードであれば、一度書いたらそれで終わりとはならず、ビジネスの進化、外部環境の変化、ソフトウェアの不具合などにより、将来の自分あるいは他の誰かに読まれます。コードが継続的に読まれる以上、その可読性は開発生産性に大きく影響します。</p><p>とはいえコードの可読性はこれだけで本一冊かけるテーマですので、詳細は『<a href="https://www.oreilly.co.jp/books/9784873115658/">リーダブルコード</a>』などの書籍や、<a href="/articles/20190610/">ソースコードを綺麗にするためにまず心がけたい３点</a> の記事に譲ります。</p><p>私がレビューで特に気をつけて確認しているポイントは以下です。</p><ul><li>意図した命名になっているか、不必要に抽象的な命名になっていないか？</li><li>コードの責務は妥当か？</li><li>シンプルに実現しているか、早すぎる最適化をしていないか？</li><li>コードベースの構造と照らし合わせて、追加&#x2F;修正するコードやモジュールの粒度感&#x2F;構造は妥当か？</li></ul><h3 id="4-素早くレビューに取り組む、質問-x2F-相談にレスポンスする"><a href="#4-素早くレビューに取り組む、質問-x2F-相談にレスポンスする" class="headerlink" title="4.素早くレビューに取り組む、質問&#x2F;相談にレスポンスする"></a>4.素早くレビューに取り組む、質問&#x2F;相談にレスポンスする</h3><p>この項目はコミュニケーションに関する心がけです。</p><p>レビューを受けたときは素早く取り組むようにしています。コードレビューに関する Google のプラクティス<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>にも「あるタスクに集中的に取り組んでいる最中でなければ、コードレビューの依頼が来たらすぐに着手してください。」と書いてありました。レビューした側は作業がブロッキングされることが多く、進捗を出しにくいからです。シニアなメンバであればうまくコンテキストスイッチできるケースも多いですが、ジュニアなメンバだとタスクをシングルで進めることも多く、レビュー待ちによるブロッキングの影響はより大きいと感じています。</p><p>レビューだけでなく普段のコミュニケーションでも同様です。最近はリモートで非同期コミュニケーションを取りながら開発することが増えており、より意識しています。たとえば「ここの仕様がわからず、ちょっと XXX について教えてください」「実装方針を相談したいのですが、…」みたいな質問&#x2F;相談があります。質問&#x2F;相談した側としてはその内容を解消しないと次の進捗が出しにくいケースがあり、このようなテキストコミュニケーションも気づいたタイミングで素早くレスポンスするようにしています。<br>レスポンスするのが重要です。すぐに回答できなければ「ちょっと今回答できないので 1 時間後に回答します」とか、自分ではわからなければ「私はわからないです、ZZZ さんわかりますか？」みたいなレスポンスも有効です。何かしらのレスポンスがあるだけでも受け手の印象は変わります。</p><h3 id="5-体裁の一貫性を保つ"><a href="#5-体裁の一貫性を保つ" class="headerlink" title="5.体裁の一貫性を保つ"></a>5.体裁の一貫性を保つ</h3><p>最後はやや具体的な心がけですが、地味に効果的です。</p><p>コードレビューをしていると、コードのフォーマットやファイル終端の改行有無、文字コードなどの体裁が開発者の中で一貫しておらず、PR にコメントすることがあります。しかし、本来であれば、このような体裁に関するコメントは不要です。コードのロジックそのもののレビューに集中できることが望ましいです。コードベース全体や開発者の間で、体裁に一貫性があることが重要です。チーム内で方針を合意して、設定としてコードベースに反映するのが良いでしょう。これにより自転車置場の議論<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>を避けられます。</p><p>ファイルの改行コード、インデントなどの設定は <a href="https://editorconfig.org/"><code>EditorConfig</code></a> を使うことが多いです。VSCode<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>や IntelliJ IDEA など多くのエディタがサポートしています。<code>EditorConfig</code> の設定ファイル例は以下のとおりです。</p><figure class="highlight ini"><figcaption><span>.editorconfig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">indent_style</span> = tab</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">end_of_line</span> = lf</span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*.json]</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>コードフォーマットはチームで会話して決めた方針を <code>Makefile</code> などに記述して <code>make fmt</code> などでフォーマットすることが多いです。たとえば SQL のフォーマットに <a href="https://github.com/future-architect/uroboroSQL-formatter"><code>future-architect/uroboroSQL-formatter</code></a> を使うと決めたのであれば、以下のように <code>fmt</code> のタスクとしてフォーマットのコマンドを記載するイメージです。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">fmt:</span></span><br><span class="line">@usqlfmt -m directory files</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>チームの開発生産性を高めるいくつかの私の心がけを紹介しました。抽象度の高いものからすぐに実践できそうな具体的なものまで様々ピックアップしました。普段、技術ブログにはプログラミング、特に Go 言語に関する記事を投稿することが多いですが、秋のブログ週間ということで、私のいくつかの心がけを言語化することにチャレンジしました。</p><p>最後まで読んでいただきありがとうございました。</p><p>アイキャッチは<a href="https://pixabay.com/ja/users/geralt-9301/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1103713">Gerd Altmann</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1103713">Pixabay</a>からの画像を利用させていただきました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://i2key.hateblo.jp/entry/2017/05/15/082655">https://i2key.hateblo.jp/entry/2017/05/15/082655</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">VSCode の場合はプラグインをインストールする必要があります。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://fujiharuka.github.io/google-eng-practices-ja/ja/review/reviewer/speed.html">https://fujiharuka.github.io/google-eng-practices-ja/ja/review/reviewer/speed.html</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><a href="https://ja.wikipedia.org/wiki/%E3%83%91%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%BD%E3%83%B3%E3%81%AE%E5%87%A1%E4%BF%97%E6%B3%95%E5%89%87">https://ja.wikipedia.org/wiki/パーキンソンの凡俗法則</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221104a/rocket-1103713_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="マネジメント" scheme="https://future-architect.github.io/tags/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/"/>
    
    <category term="コードレビュー" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/"/>
    
    <category term="可読性" scheme="https://future-architect.github.io/tags/%E5%8F%AF%E8%AA%AD%E6%80%A7/"/>
    
    <category term="チーム開発" scheme="https://future-architect.github.io/tags/%E3%83%81%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA/"/>
    
    <category term="生産性" scheme="https://future-architect.github.io/tags/%E7%94%9F%E7%94%A3%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>ポッドキャスト運営をしていて思うこと、収録Tips</title>
    <link href="https://future-architect.github.io/articles/20221102a/"/>
    <id>https://future-architect.github.io/articles/20221102a/</id>
    <published>2022-11-01T15:00:00.000Z</published>
    <updated>2022-11-02T07:09:03.571Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221102a/microphone-338481_640.jpg" alt="" width="640" height="425"><p>こんにちは、<a href="https://open.spotify.com/show/6ntaBQ28GSDaOztBphH6oi">Future Tech Cast</a> メインパーソナリティの村田です。<br>今回は<a href="/articles/20221031a/">秋のブログ週間</a>連載3日目ということで、ポッドキャスト運営として活動する中で思うこと、ナレッジをつらつらと書いていきたいと思います。</p><p>私はフューチャーにて Future Tech Cast を運営しつつ、プライベートでも1本ポッドキャストを運営しています。本記事ではせっかくなので2つのポッドキャスト運営を通じて培ったノウハウにも触れたいと思います。</p><h1 id="ポッドキャストを始めたわけ"><a href="#ポッドキャストを始めたわけ" class="headerlink" title="ポッドキャストを始めたわけ"></a>ポッドキャストを始めたわけ</h1><p>フューチャーには元々 <a href="https://future-architect.github.io/">Future Tech Blog</a> があり、2016年から続く長寿コンテンツとして君臨しています。ちょこちょこはてぶランキング上位に食い込む記事が登場したり、皆さんに愛されるブログとなっているかなと思います。フューチャーとしての技術発信の軸足はいまも変わらずこの技術ブログに置かれているのですが、コロナをきっかけにポッドキャストの機運が高まってきました。</p><p>これはもう世間で散々こすられた話ではありますが、おうち時間の増加(※)に伴い、「耳だけ」で楽しめるコンテンツとしてのポッドキャストの需要が増加しました。「この波に乗るしか無い…！」という機運もありポッドキャストを始める流れが社内で生まれ、2020年11月に記念すべき<a href="https://open.spotify.com/episode/6gr6Hllhjkf9i55aVdD1o7?si=TBspH7wmRVm9WmE_JMRZbw">第1回のエピソード(#1 Real World HTTP著者の澁川さんと語り尽くす会)</a>を公開するに至りました。</p><p>※日本国内におけるポッドキャスト利用実態についてはオトナル様の「ポッドキャスト国内利用実態調査2021」が一番丁寧に調査・整理されている印象です。「<a href="https://prtimes.jp/main/html/rd/p/000000035.000035509.html">オトナル、朝日新聞社と共同で「ポッドキャスト国内利用実態調査2021」を実施。使用サービスはSpotifyがApple Podcastを抜いてトップに</a>」 の記事内でも言及されていますが、ポッドキャストの聴取シチュエーショントップは「家事中(35.2%)」であり、コロナ禍でのリモートワーク促進・おうち時間の増加がポッドキャストユーザの増加を後押ししていることが分かります。</p><h1 id="ポッドキャストの良さ・ブログとの違い〜相性の良いコンテンツとは〜"><a href="#ポッドキャストの良さ・ブログとの違い〜相性の良いコンテンツとは〜" class="headerlink" title="ポッドキャストの良さ・ブログとの違い〜相性の良いコンテンツとは〜"></a>ポッドキャストの良さ・ブログとの違い〜相性の良いコンテンツとは〜</h1><p>そんなこんなで波に乗る形でポッドキャスト企画が進んでいきましたが、改めて真剣にポッドキャストの存在意義を考えてみると、音声コンテンツ固有のメリットもあるなと思い至りました。というのも、ブログ記事は良くも悪くも文章と図があるのみなので、書き手がどんなキャラクターなのかはなかなか伝わりづらいです。もちろん文体にキャラクターがぷんぷん滲み出るタイプの人もいますが、音声コンテンツへ載せられる情報量には敵わないなと思っています。そういった意味で、音声コンテンツであるポッドキャストはフューチャーの技術を発信する媒体として一定の役割を担えるはずです。</p><p>実はポッドキャストを始める際に、「YouTubeの動画投稿も始めちゃう？」といった話もあがりました。結果的にこれは却下されたのですが、その大きな理由のひとつは「編集コスト」でした。その観点でもポッドキャストは優秀です。もちろんどこまでこだわるかにはよりますが、字幕を挿入するなど素材に対しての足し算が発生する動画編集に対し、音声コンテンツであるポッドキャストの編集は素材をベースに引き算な編集を行うことが主です。そんな背景もあり、編集は素材音源の長さの1.5〜2倍程度の時間で完遂できています。</p><p>話をブログとの違いに戻しますが、先程も書いたようにブログは「文章と図」、ポッドキャストは「音声のみ」という媒体特性から、各々得意なコンテンツが異なります。実はポッドキャスト開始当初は「技術ブログの音声版にしよう」という思想の元スタートさせたのですが、実際に収録を重ねていくと難しい面も浮き彫りになってきました。技術ブログの記事ではやってみた系記事だったり図やソースコードを見せつつの実装ノウハウ・Tips系記事なども多く、そういったコンテンツを音声のみでお届けしようとすると非常に伝わりづらくなってしまいます。ゆえにFuture Tech Castでは、技術に軸足を置きつつも人・組織・考え方・キャリアといったポイントにスポットを当ててフューチャーの生の声を届けるコンテンツとして育てていっています。</p><p>もっとパーソナリティとしての力量をあげて技術的な情報についての密度をあげていきたいなとも思っていますが、技術に携わる「人」に焦点をあてるいまのやり方は私個人としても非常にやりやすく、話を聞いていても楽しいなと感じられるのでこれはこれでひとつのスタイルとして良いのかなと思っています。</p><p>超個人的な話になりますが私はfukabori.fmのパーソナリティであるiwashiさんをリスペクトしており、ちょくちょく配信を聞かせていただいてます。そしていつもながらに思うのですが、中々あのレベルの情報密度を生み出すところへ到達するのは難しいですね。でもやはり技術系発信コンテンとしては「技術の情報密度」は大事にしたく、今後もっと伸ばしていきたいです。りっちゃ・りょかちのやいやいラジオにiwashiさんがゲスト出演した回がありまして、ここで語られていた考え・テクニックは非常に興味深かったです。（<a href="https://open.spotify.com/episode/45LsOzUI4S3pYisWnNdjaJ">#170 fukabori.fmのiwashiさんがしたかった雑談</a>）</p><h1 id="運営・収録に際してのTips"><a href="#運営・収録に際してのTips" class="headerlink" title="運営・収録に際してのTips"></a>運営・収録に際してのTips</h1><p>ポッドキャスト運営および収録を始めてからかれこれ2年が経ちましたが、それなりに運営ノウハウだったり収録環境周りのTipsも溜まってきたのでこのタイミングでご紹介したいと思います。</p><h2 id="運営で心がけていること"><a href="#運営で心がけていること" class="headerlink" title="運営で心がけていること"></a>運営で心がけていること</h2><p>私が定常的に運営として行っている仕事は大きく3つあります。</p><ol><li>公開スケジュール管理</li><li>ゲストの調整</li><li>収録音源の編集・公開</li></ol><p>まずは1つめの公開スケジュール管理ですが、継続的な活動にしていくためにもやはり重要です。一時期これが崩れてしまった際は投稿頻度が激減してしまいました…ゆえに、ゲストの人が決まったら自分を律する意味も込めて「TechCast公開日」という予定をカレンダーに入れるようにしています。最近では1回の収録音源が編集を経て前後編の2つに分割されることが多いので、「収録→翌週前編公開→翌々週後編公開」の3週間を1サイクルとして、バッファも持たせつつスケジュールを組んでいます。</p><p>ゲストの調整について心がけている点は「シリーズ企画を練る」ことです。これは技術ブログ側の運営ノウハウをそのまま流用しているのですが、やはりシリーズテーマが決まっている方がゲストの人を呼びやすいです。ちょうどこの記事を書いているタイミングでは「AIシリーズ（※）」の企画が動いていますが、すでに3ヶ月先までの予定が埋まっています。（これは非常に…非常にありがたいことです…!!!）</p><p>※シリーズ初回は <a href="https://open.spotify.com/episode/7dEUQ88C3UlRSmVsMWGlsf">#34 MLOpsエンジニアって何やるの？（前編）</a> です。ぜひお聞きくださいmm</p><p>編集のタイミングでも様々意識しているポイントがあります。いわゆる”雑談”をお届けするポッドキャストではないので、変に間延びしないよう会話の間などは不自然になりすぎない程度で極力カットしています。また、「BGMをいれるか」についての議論も行われたのですが、番組の特性上倍速再生が主なユースケースと考え、BGMは入れないことにしました。</p><h2 id="収録環境で心がけていること"><a href="#収録環境で心がけていること" class="headerlink" title="収録環境で心がけていること"></a>収録環境で心がけていること</h2><p>収録は基本的にZoomで行っているのですが、設定周りで気をつけていることがいくつかあります。その中でも特に重要なのが「参加者ごとに個別のオーディオファイルでレコーディングする」設定(※)です。通常Zoomミーティング参加者の音声は全てひとつの音声ファイルにマージされた形でレコーディングされます。ただ、この状態だと誰かの音声だけボリュームを調整したり、あるいは不要な相槌をカットするといった作業が難しくなります。しかしこの機能を使うと話者ごとにオーディオファイルが分割されるため、前述のような編集がとても容易です。個人的にはポッドキャスト収録時はほぼマストな機能なのかなと思っています。</p><p>※この機能はローカルレコーディングの場合のみ設定可能で、クラウドレコーディングでは利用できない機能なので注意してください。</p><p>またZoom収録時の悩みとして「音声品質が低くなってしまう」というものがあるかと思います。これは各人のネットワーク環境や収録環境などにも依存するため一律の解はないですが、ベターな設定を入れ込むことは可能です。私が使用しているのは「オリジナルサウンド」の設定です。この機能を使うとよりクリアな音質で収録することが可能です。私は「高忠実度音楽モード」を有効にして収録を実施しています。</p><p>Zoom側の設定はこれでOKなのですが、収録時には他にも様々ハプニングが発生します。スマホの通知音が鳴ってしまったり、PCに入っているウイルス対策ソフトの定期スキャンがちょうど実行されて猛烈に回転するファンの音が乗っかってしまったり…ゆえにスマホなどは消音モードに設定の上、定期的にPC負荷を上げてしまうことが分かっているソフトウェアについては一時的に動作を停止させるなどの下準備も欠かせません。</p><p>こうした環境周りの整備のおかげもあり、オンライン収録のみで運営している Future Tech Cast も特にやり辛さは感じずに収録を進められています。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はポッドキャスト運営をする中で心がけていること、そして収録に関わるTipsをご紹介させていただきました。すでにポッドキャスターな方、そして未来のポッドキャスターに向けてこの記事が少しでも広く届くとうれしいです。</p><p>アイキャッチは<a href="https://pixabay.com/ja/users/theangryteddy-123386/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=338481">Daniel Friesenecker</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=338481">Pixabay</a>からの画像を利用させていただきました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221102a/microphone-338481_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;425&quot;&gt;

&lt;p&gt;こんにちは、&lt;a</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="TechCast" scheme="https://future-architect.github.io/tags/TechCast/"/>
    
    <category term="ポッドキャスト" scheme="https://future-architect.github.io/tags/%E3%83%9D%E3%83%83%E3%83%89%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>Go入門の軌跡</title>
    <link href="https://future-architect.github.io/articles/20221101a/"/>
    <id>https://future-architect.github.io/articles/20221101a/</id>
    <published>2022-10-31T15:00:00.000Z</published>
    <updated>2022-11-01T04:07:57.199Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221101a/top.drawio.png" alt="" width="800" height="430"><p>Gopher wan designed by Renee Frenc.</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの今泉です。<br><a href="/articles/20221031a/">秋のブログ週間</a>の２本目です。</p><p>業務ではJavaを使用する機会が多かったのですが、今年に入ってからGo言語を扱うようになりました。</p><p>これまでプライベートではエディタに叱られながらGoを雰囲気で書いていたりはしたのですが、これを機にしっかりと学ぶことにしました。</p><p>本記事ではキャッチアップのため自分が参考にさせていただいたリソースを紹介させていただきます。</p><p>一通り学んだ結果、コードが読み解けなかったりWebAPI開発で困るような場面はかなり減ったと思います（コードレビューでGoっぽくないよね、みたいな指摘は受けるのでまだまだ精進は必要です）。</p><h1 id="言語仕様を学ぶ"><a href="#言語仕様を学ぶ" class="headerlink" title="言語仕様を学ぶ"></a>言語仕様を学ぶ</h1><ul><li><a href="https://go.dev/tour/welcome/1">A Tour of Go</a><br>Goの言語仕様をブラウザ上で学ぶことができる公式のチュートリアルです。<br>実際にコードを実行しながら一通りの書き方や仕様を把握することができました。</li><li><a href="https://go.dev/doc/effective_go#allocation_new">Effective Go</a><br>Goらしい書き方が紹介されているガイドラインです。こちらも公式から。<br>時々思い返したように見直したりします。</li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a><br>Goを始めて一番最初につまずいたポイントは大体この記事で解消することができました。</li><li><a href="https://future-architect.github.io/articles/20200311">JavaプログラマーのためのGo言語入門</a><br>実際に今まで自分が利用していた言語との違いを把握することで、より経験に近い形で仕様についての理解を深めることができました。Javaプログラマーの方はまず本記事を読んでGoの解像度を高めることで、より早くキャッチアップができると思います。</li><li><a href="https://www.how2go.dev/">How to GO</a><br>基本的な文法について「これってGOでどう書くんだったっけな..?」となった時にいつも参考にさせていただいています。</li></ul><h1 id="コードを読む"><a href="#コードを読む" class="headerlink" title="コードを読む"></a>コードを読む</h1><ul><li><a href="https://github.com/golang/go">golang&#x2F;go</a></li><li><a href="https://future-architect.github.io/articles/20200310/">Goの標準ライブラリのコードリーディングのすすめ</a><br>やはり新しい言語に触るからには標準ライブラリの仕様について正しく理解しておきたいものです。よく利用するため距離が近いというのも精神的なハードルが低くてgoodです。<br>と、いいつつも標準ライブラリだけでかなりのボリュームがあるためどうしようかと思案していたところ、フューチャー技術ブログで標準ライブラリのコードリーディングについて言及していた記事があったので参考にしてerrors、net&#x2F;http、sort、testingあたりを読みました。<br>またコードリーディング会やらないかなあ…。（当時私はGoに入門していませんでした）<br>また、<a href="https://github.com/golang/go/wiki">Wiki</a>にもかなり有用な情報が詰まっていたので参考になりました。</li><li><a href="https://future-architect.github.io/articles/20200601/">Goのテストに入門してみよう！</a><br>コードリーディングを始めたもののtestingパッケージが激ムズだったので、知識の補完に参考にさせていただきました。</li><li><a href="https://future-architect.github.io/articles/20210714a/">Goのおすすめのフレームワークはnet&#x2F;http</a><br>私はWEB開発が中心のため、なにかWEBフレームワークのコードも読んでおこうか…と思ったのですが、いざ読んでみると「はわわ、これってnet&#x2F;httpのラッパーじゃね..？」というお気持ちになり、この記事を読んで確信に変わったためnet&#x2F;http自体を読むようにしました。</li></ul><h1 id="書籍を読む"><a href="#書籍を読む" class="headerlink" title="書籍を読む"></a>書籍を読む</h1><ul><li><a href="https://www.oreilly.co.jp/books/9784873119694/">実用 Go言語</a><br>Goはシンプルな言語であるがゆえにある機能を満たすコードを書こうとすると様々なものを組み合わる必要があります。<br>本書ではその組み合わせ..つまり、より実用的なGoの書き方について紹介されており、自分がGoでの開発を進めていく中で必要になったテーマをつまみ食い的に読んで参考にさせていただいています。インターネットではお目当ての知識にたどり着くのが大変ですが、目次を見ただけでサッと欲しい情報が得られるのが書籍の強みですね。</li><li><a href="https://www.oreilly.co.jp/books/9784873119038/">Real World HTTP</a><br>Goについてではなく、ウェブの知識や技術について触れている書籍です。<br>元々、HTTPの基礎を学ぶため数年前に購入していたものですが、そいうえば実装がGoで書かれていたな、と思い出し知識の整理も兼ねて読み直してみました。<br>net&#x2F;httpライブラリを読んだあとに本書で紹介されているコードを自分で実装してみたりすると理解が進んで気持ち良かったです。</li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>分かっていたことではありましたが、自分がGoをキャッチアップするのにかなり当社のメンバーが外部発信している記事&#x2F;書籍に助けられています。</p><p>日本語での２次情報はほぼ当社から得ているかもしれません…。<br>これらのリソースを享受するだけではなく、発信する側にも回れるよう引き続き努力していきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221101a/top.drawio.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;430&quot;&gt;

&lt;p&gt;Gopher wan designed by Renee Frenc.&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>バーチャルデスクトップ環境の現状と、VRの個人的な感想</title>
    <link href="https://future-architect.github.io/articles/20221031b/"/>
    <id>https://future-architect.github.io/articles/20221031b/</id>
    <published>2022-10-30T15:00:01.000Z</published>
    <updated>2022-10-31T03:50:35.879Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。CSIGの井上です。</p><p><a href="/articles/20221031a/">秋のブログ週間2022</a> の1本目です。</p><p>私はしばらく前からVRに興味があり、Oculus Go（2018&#x2F;05-2020&#x2F;12）から使っています。MetaのHMDは、最近Oculus Quest Proが発売され、来年2023年後半にはOculs Quest3が発売される可能性が高いという、VRヘッドセットとしては定番の製品です。最近はそこそこVRを利用したサービスや製品が増えましたが、まだ一般的という領域までは広がっていません。ヘッドセットという日常で使わないものが必要な点で、普及しないのでしょう。</p><p>モノが普及するには、「人間の欲望を刺激するか業務で使うか」だと思うので、今回は一般の業務利用で使えそうな、バーチャルデスクトップ環境についてお話しをすることで普及の一助になればと思い、書いてみました。</p><ul><li>本稿の注意事項</li><li>バーチャルデスクトップ環境とは？</li><li>Immersedの場合</li><li>VRの個人的な感想</li><li>今後のVRの展望</li></ul><h1 id="本稿の注意事項"><a href="#本稿の注意事項" class="headerlink" title="本稿の注意事項"></a>本稿の注意事項</h1><p>本稿は、これを書いている井上個人の見解であり、Futureグループとしての見解ではありません。<br>私個人の見解を共有することで、この分野の興味を持っていただいたり、議論のヒントになればと思い、公開します。</p><ul><li>プログラム言語など違い、発展途上で周辺環境が変わりやすい分野と考えます。その為、気が付けば常識が変わっている、という事は十分あり得ます。</li><li>体験しない事には議論ができない分野でもあるため、まずは興味を持つ&#x2F;体験することが重要と考えます。</li><li>VR関連に関する読み物、という感覚でご覧ください。</li></ul><p>あと、この記事を書くことで、会社でバーチャルデスクトップ使えるようにならないかな…、という下心もあります（後述のセキュリティ問題を気にしないといけないので、難しいかも）。</p><p>追加説明が必要そうな単語は、「（※）」を付けており、本稿最後の章に補足説明を記載しています。</p><h1 id="バーチャルデスクトップ環境とは？"><a href="#バーチャルデスクトップ環境とは？" class="headerlink" title="バーチャルデスクトップ環境とは？"></a>バーチャルデスクトップ環境とは？</h1><img src="/images/20221031b/image.png" alt="image.png" width="720" height="720" loading="lazy">(meta Horizon Workrooms)<p>PC作業をVR上で行うための環境、と言えます。VR空間にディスプレイを配置し、そこでいつも通りPC作業をする感じです。</p><p>バーチャルデスクトップの利点としては以下が挙げられます。</p><ul><li>物理的なモニタが不要になる</li><li>作業環境を自由に変更できる</li><li>ヘッドセットで視界が奪われる為、集中力が高まる</li></ul><p>物理的なモニタが不要になる点ですが、PCとヘッドセットをリンクすることで、VR上に仮想モニタを含むデスクトップ環境を表示します。アプリケーションによりますが、複数モニタを仮想的に配置することができ、外付け物理ディスプレイを持っていないノートPCでも 3画面作業 ができたりします（但し、一般的には解像度がFHD程度が限界。ヘッドセット側の解像度や処理負荷に依存する為）。屋外でFHDを3-4画面を使った作業が、ヘッドセットのみで実現できます。</p><p>作業環境の自由な変更については、例えば「喫茶店」「森の中」「ビーチ」「映画館」「宇宙」などの周辺風景を設定することができます（但し、アプリケーションによる）。同時に、環境音も実装されていることが多いので、「喫茶店でBGMを聞きながら」や、「森の別荘で鳥のさえずりを聞きながら」で作業できたりします。出社して仕事をしているが気分転換に喫茶店で少し作業する、のような感覚で作業環境を変えられます。</p><p>そして集中力が高まる件ですが、リアルの視界がほぼ奪われ、VRとして作成された必要な情報のみが目に入ってくるので、集中力が途切れづらいという利点があります。自宅のごちゃごちゃした部屋でリモートワークをするのと、（見た目だけは）山小屋で暖炉の音を聞きながら仕事をするのでは、雑念の入り方が違いますよね。</p><p>ワーケーションで使えれば、ショルダーハッキング（※）の心配をしなくて済むので、便利なものだと思います。</p><p>そんな利点のあるバーチャルデスクトップ環境ですが、例えばOculus Quest2で使えるアプリケーションだと以下があります。</p><ul><li>Immersed (<a href="https://www.immersed.com/">https://www.immersed.com</a>)</li><li>VertualDesktop (<a href="https://www.vrdesktop.net/">https://www.vrdesktop.net/</a>)</li><li>BigScreen (<a href="https://www.bigscreenvr.com/">https://www.bigscreenvr.com/</a>)</li><li>Meta Holizon Horkrooms (<a href="https://www.meta.com/jp/work/workrooms/">https://www.meta.com/jp/work/workrooms/</a>)</li><li>etc..</li></ul><p>この中で仕事やプログラミング等の作業で使うなら、Immersedが使いやすかったので、これを例に紹介します。その他のアプリケーションも数年前から格段に進化しているのですが、例えば「みんなで集まって映画を見る」のように、作業用途には合わないものもあります。</p><p>Immersedをとり上げますが、特定の製品をとり上げるというより、「プログラミングの話をするときにGo言語を例に話す」のような説明のための手段や実装例として取り上げています。他の製品でも同様のことはおそらくできるはずです。</p><h1 id="Immersedの場合"><a href="#Immersedの場合" class="headerlink" title="Immersedの場合"></a>Immersedの場合</h1><p>Immersedで便利な機能は、以下のようなものがあります。</p><img src="/images/20221031b/image_2.png" alt="image.png" width="432" height="432" loading="lazy"><ul><li>仮想モニタ機能<ul><li>実機にモニタが無くても、仮想的にモニタを追加できます。</li><li>他のアプリケーションだと、実機に接続されているもののみ、1枚だけのみ、というものが多く、ビデオカードなしに複数枚モニタを追加できるものは現時点ではImmersedのみのようです。</li><li>但し、モニタ数が多くなると負荷が高くなる、FHD(1920x1080)に抑えられてしまう、という制限はあります。リアルで4Kモニタを付けていても、FHDになります。</li><li>解像度は処理負荷に直結し、処理負荷増大はフレームレート落ちを招き、それにより実用に耐えなくなるので、仕方がないと思われます。</li></ul></li><li>仮想カメラ機能<ul><li>VR上でバーチャルなWEBカメラを利用できます。画像3枚目は、zoomに参加している例です。</li><li>これにより、WEBオンラインミーティングにバーチャルデスクトップ環境で参加した際に、アバターを表示することができます。<ul><li>VR上で会議をすれば全員アバターでコミュニケーションを取れますが、相手がヘッドセット等を持っていない場合は、ZoomやGoogle meetやMicrosoft Teamsのようなものを使う事になると思います。その際に違和感なく（？）参加者画面を表示できます。</li></ul></li></ul></li><li>部分的パススルー機能<ul><li>VR上でデスクトップを操作する際、普通は物理キーボードやマウスを見ることができません。</li><li>今までは「特定製品であれば自動認識して、VR上に表示できる」という手法が探られていましたが、現在は「VR上でキーボードがある部分だけパススルー（※）で現実を見せる」という方法で物理キーボード等を見ることができるようになりました。画像1,3枚目下側の黒い長方形の部分が、パススルー表示されている部分です。スクリーンショットではパススルー内容は記録されないようです。<ul><li>自作分割キーボードは、カメラで認識してそのオブジェクトをVR上に表示する、のは至難の業です。それであれば、キーボードがある部分だけパススルー出来る機能の方が簡単に問題を解決できますね。</li></ul></li><li>慣れていれば「ブラインドタッチや勘で探り当てる」や「ヘッドセットの鼻付近の隙間から手元を見る」などで対処できますが、パススルーで見えたほうが分かりやすいですね。</li></ul></li></ul><p>これらの機能を組み合わせ、VR上のカフェでBGMを聞きながら3枚モニタでこの記事を書いていたりします。</p><h2 id="使い勝手"><a href="#使い勝手" class="headerlink" title="使い勝手"></a>使い勝手</h2><p>「4Kモニタを使わないと見ることができないような多量なデータを処理する作業」には向いていませんが、「通常の作業」には支障が無いと思います。WordやExcelやWEBブラウズ、メール確認などはそれほど大きい解像度は無くても大丈夫だと思います。</p><ul><li>モニタを自由に複数枚配置できるので、首や目に優しい気がします。<ul><li>解像度はFHDですが、奥行き&#x2F;上下&#x2F;傾き&#x2F;湾曲 を制御できます。</li></ul></li><li>集中力が高まる、かもしれません。<ul><li>私の自宅のリモートワーク作業部屋はデバイスで溢れているので、ヘッドセットでそれらを見ないで済むことで集中できています。部屋がきれいな人は…知りません。</li><li>競走馬もそうですが、視界の制限が集中を促すと考えます。<ul><li>私は土日にプライベートの作業をすることが多いのですが、”09:00に始めて、気がついたら17:00だった”という事も多々あります。それくらい集中出来ました。</li></ul></li></ul></li><li>気分転換がしやすい。<ul><li>いつもはカフェで作業しますが、時々、洞窟や山小屋に変えることで、バーチャルワーケーション気分を味わえます。必要なら、Richo THETA（360度カメラ）で撮った画像なども背景にできます。</li><li>これを緊急作業等の泊まり込み残業に応用すると、バーチャル帰宅もできるはずです。最近はVR睡眠（※）という話もありますが、本稿の話題ではないので割愛します。</li></ul></li></ul><h1 id="VRの個人的な感想"><a href="#VRの個人的な感想" class="headerlink" title="VRの個人的な感想"></a>VRの個人的な感想</h1><p>バーチャルデスクトップが流行するかは、バーチャルデスクトップだけの話では無く、それを構成する要素である「VR」自体の普及に依存すると考えられます。<br>この章では、バーチャルデスクトップにとどまらず、VR自体について考えてみたいと思います。<br>尚、あくまで筆者の個人的な感想&#x2F;考えとなります。</p><p>バーチャルデスクトップ、ひいてはVRが普及しない原因を考えてみると、以下のような原因がありそうです。</p><ul><li>VR利用自体が、非日常の活動<ul><li>HMDを付けるという行為が、例えばスマホを使う程度の心理的障壁にならないと、VRが流行ることは無いような気がしています。</li><li>HMDを付ける手間と、それにより得られる利便性が、今は均衡が取れていないため使われていないと思われます。</li></ul></li><li>VR酔いが存在する<ul><li>FPSゲームで酔うように、VR利用でも酔う事があります。これは、視覚による情報と三半規管による情報が乖離していることで発生すると考えられます。「乗り物酔い」や「3D（ゲーム）酔い」等と同じです。</li><li>バーチャルデスクトップ利用であれば、この部分は大幅に影響が無いと考えられます。<ul><li>VR酔いをする場合は、画面は大幅に動いている（&#x3D;加速度等が発生すると脳は認識している）のに実際は一切動いていない為、視覚と三半規管の認識にずれが生じるからと考えられます。</li><li>バーチャルデスクトップの場合、椅子に座って利用する為に下半身が固定されており、可動域は三半規管の認知範囲に収まっています。その為、認知差はほぼなく、比較問題として酔いづらいと考えられます。</li><li>但し、処理能力不足等でフレームレートが低い場合、酔いは発生します。私は酔いました。フレームレートが低く画面が断続的に描画されることで、描画間の加速度等の認知で問題が発生すると思われます。故に、バーチャルデスクトップにおいては、適切な解像度や仮想モニタ数でフレームレートが落ちない程度にする必要があります。</li></ul></li></ul></li><li>社会が対応していない<ul><li>例えば、今働いている会社の情報システム部に「明日からバーチャルデスクトップで作業したいので、通信許可をしてください」といっても、許可されることはほぼほぼ無いのではないかと思います。特に情報漏洩対策等でネットワークの制限等を行っている組織では、限りなく不可と思われます。</li><li>これはそもそも仕方のない事で、どのような通信が行われるのか、それによる会社資産への影響はどの程度か、セキュリティ的なリスクは何があるのか、などが通常は知らないし考えたことも無いからですね。</li><li>その為、通信要件等を把握する、利用に際したリスクを洗い出す、等の明確化が必要です。そしてこれらを検討すること自体がコストなので、会社として「使ったらよい事がある」（コストを下げられる、作業効率が上がる、等）ことを認識させる必要がありそうです。故に、会社と関係ない場面で使い有用性を広める、という活動で「そういうものがあるんだ」という認識を広めることが重要かもしれません。そしてこの記事がそれだったりします。</li><li>その点、必要と認識された業務範囲や業界では、普通に利用されています。<ul><li>例えば、研修分野などは積極的に活用されていると思われます。溶接であったり、自動車保険の被害査定研修であったり、医療での手術研修などもあります。実際に物理で実施するよりも安全かつ安価に実施できるという利点があるため、利用されています。</li><li>これはあくまで「研修」という範囲であるため、セキュリティ的に侵害されても会社資産情報が漏洩することは無い、などの分離がされているためとも思われます。その点、バーチャルデスクトップは社員端末の代替えとすれば、難しいことも確かです。</li></ul></li></ul></li></ul><h2 id="VRとセキュリティ"><a href="#VRとセキュリティ" class="headerlink" title="VRとセキュリティ"></a>VRとセキュリティ</h2><p>前述の通り、VRでもセキュリティ観点で物を考える必要がありそうです。VRでのセキュリティは、一般的なコンピュータシステムのセキュリティと、VR特有のセキュリティの両面から対応する必要があると思われます。</p><ul><li>フローとしてのセキュリティ<ul><li>VRで何かを実現する際の、実現したいことに対するスキームやフロー自体のセキュリティ対策が必要です。</li></ul></li><li>実装としてのセキュリティ<ul><li>上記フローを実装した際の、セキュリティ対策が必要です。</li><li>例えば…<ul><li>利用する環境自体のセキュリティ<ul><li>UnityやUnrealEngineなどの利用技術のセキュリティ対策が必要です。利用アプリケーションのバージョン管理やセキュリティ更新などが含まれます。</li><li>VRプラットフォームとしてのClusterやVRChatなどのサービスのセキュリティレベルも検討する必要があります。サービス提供側の設計に依存します。<ul><li>認証認可、保持する情報、侵害リスク、等の検討が必要かもしれません。例えば、aws自体はセキュリティ機能は持っているが、ユーザが設定し忘れた&#x2F;設定ミスした、のような状態が無いようにする必要があります。</li></ul></li></ul></li><li>環境上での実装のセキュリティ対策が必要です。<ul><li>利用技術やプラットフォーム上で、自らが構築したもののセキュリティ対策は、自分自身で実施する必要があります。<ul><li>WEBシステムで言えば、自作のWEBアプリが該当します。前述の環境自体は、ミドルウェアやOS層に該当します。</li><li>例えば、侵入不可に設定し忘れた領域、他者からVR上で入力した情報が見えてしまう設計、VR上での資産に対するセキュリティ、等が考えられます。これらはおそらく自動検査は難しいと思われ、ペネトレーションテストのようなデバッグ作業が必要になると思われます。</li></ul></li></ul></li><li>通信経路におけるセキュリティ<ul><li>どこからどこへどのような内容が送受信されるのか、暗号化は適切なレベルなのか、等の通信のセキュリティ対策も必要です。</li></ul></li></ul></li></ul></li><li>利用者自身へのセキュリティ<ul><li>利用者の物理的な安全保護対策が必要です。<ul><li>視界がヘッドセットにより奪われる為、周囲への物理的な安全確保が必要となります。<ul><li>利用環境の適切な設計、利用者外人員での監視、等で保護する必要があります。</li><li>自宅リモートワークなら自宅の安全性に依存、会社オフィスであればオフィス内での安全性に依存しています。宅外リモートワークやワーケーション時に注意が必要です。</li><li>保護に関しては、怪我等もありますが、悪意を持って接触される可能性も考慮が必要です。</li></ul></li></ul></li><li>利用者への心理的な保護対策が必要です。<ul><li>意図をもって、利用者の認知を歪ませる&#x2F;誤認させる状況への対処が必要と思われます。HMDで表示するVRや、利用者への環境に対する働きかけなどが想定されます。</li><li>これらはおそらく心理学などの分野と強調する必要もあるかもしれません。</li></ul></li></ul></li></ul><h1 id="今後のVRの展望"><a href="#今後のVRの展望" class="headerlink" title="今後のVRの展望"></a>今後のVRの展望</h1><p>VRの文脈でメタバースが語られることも多いですが、メタバース自体は「体験を得るための”手段”」までは規含まれていないと考えます。メタバースに参加する際、iPad等で2Dとして参加する（表現上は、3Dを2Dで描画している）というのは割と普通かと思いますし、VRでフルトラッキング（※）で参加する人もいます。参加コストとしては2D描画となる、PC&#x2F;タブレット&#x2F;スマホでの参加が大多数と思われます。故に、メタバースが一般化&#x2F;進化しても、VRが同時に一般化するとは限らないです。同じメタバース内でも、2D&#x2F;VRでは得られる体験が異なるため、メタバースとVRは切り離して考えてもいいかもしれません。</p><p>一部とはいえVRが浸透してきたのは、機材の低価格化&#x2F;軽量化もあると思われます。今まではハイエンドPC＋外部トラッキング装置＋いろんなケーブルで数十万だったのが、Oculus Questにより5万円台で「HMD単体で使える」ようなりました。また、Googleカードボード（スマホを使った簡易VR）もありました。今後は、求められる機能的&#x2F;性能的には5万円台より下がることは無いような気がするので、普及するには「利用したいと思えるコンテンツが増える」「使った方が有利である状況が増える」事が増える必要があります。ハードウェア的にはフェイストラッキングやアイトラッキングも活用されていくようです。</p><p>会社の通常業務業務でVRが使えると、普及するかもしれません。複数のモニタを使う人達は、バーチャルデスクトップ環境を使う事で「物理モニタ」という資産が不要になりますし、モニタ設置スペースも不要になります。また、作業環境を変えられるので、VRリモートワークも可能です（そして、残業時のVR帰宅も…）。社員を物理的な場所から解放する、という点では良いと思うのですが…</p><p>現状では「日常使い」が一般的に難しいので、日常生活に普及していくのは難しいと思われます。しかしながら特定分野では着実に実績を伸ばしているため、用途が見つかれば突然一部に普及する、という可能性はありそうです。VRはあくまで手段であり、その手段が有効である状況が発生すれば普及しそうです。日常が便利になるか&#x2F;楽しくなるか、という点で興味があるので、引き続きVRやメタバースに注力していこうと思います。</p><p>以上</p><h1 id="用語とか"><a href="#用語とか" class="headerlink" title="用語とか"></a>用語とか</h1><ul><li>ショルダーハッキング：<ul><li>画面やキーボードを肩越しにのぞき込んで情報を搾取する方法。VRであれば、ヘッドセット内に表示されるので画面ののぞき込みは防げる。キー入力はVR上に表示されるソフトキーボードを利用することで、のぞき見はされない。</li><li>ヘッドセットを利用して作業する場合、物理的に不審なことをされない場所を選ぶことも重要。ヘッドセットで視界を完全に塞がれるので、何かをされないような環境（管理者のいるコワーキングスペース等）に身を置く必要がある。</li></ul></li><li>パススルー：<ul><li>ヘッドセット外部の映像を、VR上に表示すること。</li><li>Oculus Questの場合は、低解像度&#x2F;モノクロの外部カメラがヘッドセットについており、その映像をVR上に透過表示している。</li><li>Immersedの場合、キーボードがある範囲のみをパススルーで表示する、任意の一部分だけパススルーする、全体をパススルーする（低解像度&#x2F;白黒の周辺風景にモニタを浮かばせる）を複数選択できる。</li><li>私の場合、キーボード～トラックボールの並びをパススルー表示、ハンドトラッカーをノートパソコンのタッチパッド上に置いているので部分的にパススルー、という利用をしている。</li></ul></li><li>VR睡眠：<ul><li>HMDを装着したまま、VR空間で寝ることを指す。</li><li>睡眠だけというより、他者との睡眠迄の空間共有を楽しむことが多いようだ。泊りの旅行、パジャマパーティー、等に類する行動に近い。VRChatで行われることが多いようだ。</li><li>研究結果として、VRは不眠症の症状を改善する、というものもあるようだ。但し、HMD自体が睡眠に最適化されていない為、慣れないとストレスになる。<ul><li>Quest2などは外部カメラにより6DoFを実現しているため、”寝室で電気を消す”状況だとトラッキングができなくなる。HMDの遮光性を利用して、明かりをつけたまま寝ることになる。</li></ul></li></ul></li><li>フルトラッキング：<ul><li>一般的にHMDを付けてVRを利用する際は上半身だけのトラッキングを利用しているが、下半身を含めた体全体の動きをトラッキングすることを、フルトラッキングという。</li><li>Quest2の場合は、手先のトラッキング（ハンドコントローラ、若しくは外部カメラによる手の認識）とHMD自体の6DoF（The six degrees of Freedom:forward&#x2F;back,up&#x2F;down,left&#x2F;right,pitch,yaw,rollの6自由度）で認識している。その為、例えば肘は手の動きと胴体から推定されているし、下半身は移動と上下動で推定されている。</li><li>下肢などに複数のセンサーを設置する&#x2F;外部からカメラなどで読み込む事で、全身の動きをトラッキングする（フルトラッキング）。</li><li>ただ、VR自体の一般用途は会議であったり会話によるコミュニケーションであるため、下半身のトラッキングが必須となる場合は限定されると思われる。現時点では、フルトラッキングの方が表現力が上がるというものであり、無くてもコミュニケーション上は問題ないと思われる。</li></ul></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;こんにちは。CSIGの井上です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20221031a/&quot;&gt;秋のブログ週間2022&lt;/a&gt; の1本目です。&lt;/p&gt;
&lt;p&gt;私はしばらく前からVRに興味があり、Oculus</summary>
        
      
    
    
    
    <category term="VR" scheme="https://future-architect.github.io/categories/VR/"/>
    
    
    <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
    <category term="VR" scheme="https://future-architect.github.io/tags/VR/"/>
    
    <category term="VirtualDesktop" scheme="https://future-architect.github.io/tags/VirtualDesktop/"/>
    
  </entry>
  
  <entry>
    <title>秋のブログ週間2022を始めます</title>
    <link href="https://future-architect.github.io/articles/20221031a/"/>
    <id>https://future-architect.github.io/articles/20221031a/</id>
    <published>2022-10-30T15:00:00.000Z</published>
    <updated>2022-11-14T02:08:01.901Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221031a/halloween-gece73ccea_640.jpg" alt="halloween-gece73ccea_640.jpg" width="640" height="286" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG 真野です。</p><p>2020年から始めた企画である、秋のブログ週間の開始しますという報告です。2022年で3回目です。</p><ul><li><a href="/articles/20201026/">秋のブログ週間連載をはじめます</a></li><li><a href="/articles/20211027a/">秋のブログ週間連載2021を始めます</a></li></ul><p>2022年の秋はフューチャーが関わったイベントが多かった記憶です。</p><p>実施順に並べます。</p><ul><li>(10&#x2F;14) <a href="https://talent.supporterz.jp/geeksai/2022autumn/">技育祭2022秋に登壇しました。ソフトウェアアーキテクトって何やるの？～知っておくと役立つ考え方を共有します～</a><ul><li><a href="/articles/20221019a/">登壇記事</a></li></ul></li><li>(10&#x2F;16)Vue Fes Japan Online 2022<ul><li>登壇記事は岸本さんが書いてくれる予定</li></ul></li><li>(10&#x2F;26) <a href="https://forkwell.connpass.com/event/262394/">「実用Go言語」の作り方 - Forkwell Library #7</a><ul><li>登壇記事は渋川さんが書いてくれる予定</li></ul></li></ul><p>他にも、<a href="https://sendaigo.connpass.com/event/256463/">Go Conference mini 2022 Autumn IN SENDAI</a> や <a href="https://2022.pycon.jp/">PyCon JP</a> など、大体どの季節もイベントが多いとは思うのですが、特に集中しているような体感がありました。</p><p>また、通常、フューチャーのようなITコンサルティングを生業ととするような企業には特に決まった繁忙期はないと思われるかと思いますが、個人的には<a href="https://note.future.co.jp/n/n7b0e5de1b2bc">BPY</a>の予選や<a href="https://note.future.co.jp/n/n08d63ab0be11">年末個人プレゼン</a>の準備に向けた気持ちのスイッチがあり、いつもこのくらいの時期から年末に向けて忙しいです。</p><p>12月にはお馴染みQiitaさんのアドベントカレンダーにも参加したいと思いますので、秋のブログ週間はちょうどその中間のまったりとした、秋の夜長を楽しむために、読み物成分を中心とすることをテーマとしています。</p><h2 id="秋のブログ週間とは"><a href="#秋のブログ週間とは" class="headerlink" title="秋のブログ週間とは"></a>秋のブログ週間とは</h2><p>2020年から始まったブログ連載企画で、秋の読書週間（文化の日を中心とした10&#x2F;27〜11&#x2F;9の2週間）の平日にブログ記事を投稿していこうというイベントです。普段は○○技術への入門といった形式の記事が多いですが、そういったプログラミングとは少し趣を変えていきます。普段フューチャー技術ブログをあまり読まない人にも記事が届くと良いなと考えています。</p><p>2022年は曜日の区切り的に、10&#x2F;31（月）から開始することになりました。</p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><div class="scroll"><table><thead><tr><th>Date</th><th>Title</th><th>Author</th></tr></thead><tbody><tr><td>10&#x2F;31</td><td><a href="/articles/20221031b/">バーチャルデスクトップ環境の現状と、VRの個人的な感想</a></td><td>井上圭</td></tr><tr><td>11&#x2F;1</td><td><a href="/articles/20221101a/">Go習得の軌跡</a></td><td>今泉智義</td></tr><tr><td>11&#x2F;2</td><td><a href="/articles/20221102a/">ポッドキャスト運営をしていて思うこと、収録Tips</a></td><td>村田靖拓</td></tr><tr><td>11&#x2F;3</td><td>（文化の日🎨）</td><td>ー</td></tr><tr><td>11&#x2F;4</td><td><a href="/articles/20221104a/">チームの開発生産性を高めるための心がけ</a></td><td>辻大志郎</td></tr><tr><td>11&#x2F;5</td><td>（土曜日）</td><td>ー</td></tr><tr><td>11&#x2F;6</td><td>（日曜日）</td><td>ー</td></tr><tr><td>11&#x2F;7</td><td><a href="/articles/20221107a/">SREの探究 - Spotifyの事例：Ops-in-Squads</a></td><td>岸下優介</td></tr><tr><td>11&#x2F;8</td><td><a href="/articles/20221108a/">Azure Data Box使ってみた</a></td><td>一ノ瀬秀都</td></tr><tr><td>11&#x2F;9</td><td><a href="/articles/20221109a/">AIファースト・ヘルスケアを読んだ感想</a></td><td>山本竜玄</td></tr><tr><td>11&#x2F;10</td><td><a href="/articles/20221110a/">Web API: The Good Parts を読んでみた感想</a></td><td>藤戸四恩</td></tr><tr><td>11&#x2F;11</td><td><a href="/articles/20221111a/">データベースと向き合う</a></td><td>澁川喜規</td></tr><tr><td>11&#x2F;12</td><td><a href="/articles/20221114a/">パスワードレス技術の現状と未来について</a></td><td>吉岡朋哉</td></tr></tbody></table></div><p>準備が間に合えば、佐野さん（PMO経験談）、宮永さん（ハンズオンWebAssenbly感想）も参加するかもしれないとのことです。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>いつもはコードが本文に書かれていることも多いフューチャー技術ブログですが、この連載はスマホ片手で読めるような記事比率を高めたいと思います。約2週間ですがどうぞお付き合いください。</p><p>アイキャッチ画像は<a href="https://pixabay.com/users/pixel2013-2364555/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2901944">S. Hermann &#x2F; F. Richter</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2901944">Pixabay</a>を利用させていただきました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221031a/halloween-gece73ccea_640.jpg&quot; alt=&quot;halloween-gece73ccea_640.jpg&quot; width=&quot;640&quot; height=&quot;286&quot; loading=&quot;lazy&quot;&gt;

&lt;h2</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="秋ブログ週間" scheme="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/"/>
    
  </entry>
  
  <entry>
    <title>PlantUMLをReact上でレンダリングする</title>
    <link href="https://future-architect.github.io/articles/20221028a/"/>
    <id>https://future-architect.github.io/articles/20221028a/</id>
    <published>2022-10-27T15:00:00.000Z</published>
    <updated>2022-10-28T06:08:45.511Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20221027a/">前回の記事</a>ではMermaid.jsをレンダリングしましたが、次はPlantUMLをレンダリングしてみます。こちらも、前回のMermaid.js同様、メンテナンスされているPlantUML対応コンポーネントはありません。</p><p>PlantUMLもMermaid.js同様、多様なダイアグラムをサポートしています。しかし、PlantUMLはJavaで書かれており、一部C言語製のGraphvizにレイアウト処理を任せているようです。そのままの仕組みでGitHub Pagesのような静的HTMLで気軽に動かすことはできません。<a href="https://zenn.dev/newgyu/scraps/5bd12587744379">Haxeで作り直してJavaScriptでも動かせるようにするPlantUML2</a>というのもあるようですが、まだまだ安定版ではなさそうです。</p><p>しかし、GitHub Pagesでプレビューを実現しているサイトは確かにあって、どうやっているのかと思っていたら、その仕組みについては<a href="https://plantuml.com/ja/jquery">公式ページで紹介されていました</a>。plantuml.comにリクエストを投げて画像を生成していました。ソースコードを圧縮し、base64にして、それを末尾に付与したURLを作り、imgタグのsrcに入れるという方法です。</p><h1 id="ロジックを実装してみる"><a href="#ロジックを実装してみる" class="headerlink" title="ロジックを実装してみる"></a>ロジックを実装してみる</h1><p>jQuery用のコードが上記のページで紹介されています。そのまま使えば動きはすると思いますが、いかんせんcjs形式でES6 modules形式でもなく、scriptタグで読み込む形式なので手を加えたいところ。そしてやっていることはdeflateの圧縮とbase64なので、より良いコードがnpmにあるので苦労はないだろう・・・と思ったらなかなかうまくいかず。</p><p>まずは高速という<a href="https://www.npmjs.com/package/pako">pako</a>を使ってdeflateしてbtoaしたらplantuml.comがエラーに。次にzlib.jsとかいろいろ試したがダメ。で、ダメもとでbase64の部分をPlantUMLのサイトのコードを使ったらOKでした。で、再度pakoを使ったらOK。base64難しい。まあatobもいろいろdeprecatedであったりするのですが。最終形は以下の2つのコードになりました。このブログをかいているときに<a href="https://www.npmjs.com/package/plantuml-encoder">plantuml-encoder</a>というのも見つけました。これもみたら同じような構成でした。</p><figure class="highlight ts"><figcaption><span>encode64.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">encode64</span>(<span class="params">data: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> r = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;data.<span class="property">length</span>; i+=<span class="number">3</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (i+<span class="number">2</span>==data.<span class="property">length</span>) &#123;</span><br><span class="line">      r +=<span class="title function_">append3bytes</span>(data.<span class="title function_">charCodeAt</span>(i), data.<span class="title function_">charCodeAt</span>(i+<span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i+<span class="number">1</span>==data.<span class="property">length</span>) &#123;</span><br><span class="line">      r += <span class="title function_">append3bytes</span>(data.<span class="title function_">charCodeAt</span>(i), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      r += <span class="title function_">append3bytes</span>(data.<span class="title function_">charCodeAt</span>(i), data.<span class="title function_">charCodeAt</span>(i+<span class="number">1</span>), data.<span class="title function_">charCodeAt</span>(i+<span class="number">2</span>));</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> r;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">append3bytes</span>(<span class="params">b1: <span class="built_in">number</span>, b2: <span class="built_in">number</span>, b3: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> c1 = b1 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> c2 = ((b1 &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>) | (b2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">let</span> c3 = ((b2 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">2</span>) | (b3 &gt;&gt; <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">let</span> c4 = b3 &amp; <span class="number">0x3F</span>;</span><br><span class="line">    <span class="keyword">let</span> r = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    r += <span class="title function_">encode6bit</span>(c1 &amp; <span class="number">0x3F</span>);</span><br><span class="line">    r += <span class="title function_">encode6bit</span>(c2 &amp; <span class="number">0x3F</span>);</span><br><span class="line">    r += <span class="title function_">encode6bit</span>(c3 &amp; <span class="number">0x3F</span>);</span><br><span class="line">    r += <span class="title function_">encode6bit</span>(c4 &amp; <span class="number">0x3F</span>);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">encode6bit</span>(<span class="params">b: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (b &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">48</span> + b);</span><br><span class="line">   &#125;</span><br><span class="line">   b -= <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">if</span> (b &lt; <span class="number">26</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">65</span> + b);</span><br><span class="line">   &#125;</span><br><span class="line">   b -= <span class="number">26</span>;</span><br><span class="line">   <span class="keyword">if</span> (b &lt; <span class="number">26</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">97</span> + b);</span><br><span class="line">   &#125;</span><br><span class="line">   b -= <span class="number">26</span>;</span><br><span class="line">   <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (b == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><figcaption><span>PlantUML.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> pako <span class="keyword">from</span> <span class="string">&quot;pako&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; encode64 &#125; <span class="keyword">from</span> <span class="string">&quot;../lib/encode64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ImageProps</span> = <span class="variable constant_">JSX</span>.<span class="property">IntrinsicElements</span>[<span class="string">&#x27;img&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">PlantUML</span>(<span class="params">plops: ImageProps</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; src, ...remained &#125; = plops;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> base64 = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!src) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> bin = pako.<span class="title function_">deflateRaw</span>(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(src)));</span><br><span class="line">        <span class="comment">// https://stackoverflow.com/a/21214792</span></span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">CHUNK_SIZE</span> = <span class="number">0x8000</span>;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> length = bin.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">strs</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length) &#123;</span><br><span class="line">          <span class="keyword">const</span> slice = bin.<span class="title function_">subarray</span>(index, <span class="title class_">Math</span>.<span class="title function_">min</span>(index + <span class="variable constant_">CHUNK_SIZE</span>, length));</span><br><span class="line">          <span class="comment">// @ts-ignore</span></span><br><span class="line">          strs.<span class="title function_">push</span>(<span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, slice));</span><br><span class="line">          index += <span class="variable constant_">CHUNK_SIZE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">encode64</span>(strs.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125;, [src])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> src ? <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> &#123;<span class="attr">...remained</span>&#125; <span class="attr">src</span>=<span class="string">&#123;</span>`<span class="attr">http:</span>//<span class="attr">www.plantuml.com</span>/<span class="attr">plantuml</span>/<span class="attr">svg</span>/$&#123;<span class="attr">base64</span>&#125;`&#125; /&gt;</span></span> : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最終系は、useMemoを使ってソースが変更されたときだけ変換計算をするようにしてみたのと、imgタグのさまざまな属性をそのまま受け取れるようにした感じです。<code>alt</code>属性とかのアクセシビリティ用属性もそのまま使える。</p><p>以下のコードから次の図が生成できるようになりました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">entity User &#123;</span><br><span class="line">  *id:INTEGER &lt;&lt;generated&gt;&gt;</span><br><span class="line">  --</span><br><span class="line">  *name:TEXT</span><br><span class="line">  *email:TEXT</span><br><span class="line">  *age:INTEGER</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">entity Job &#123;</span><br><span class="line">  *id:INTEGER &lt;&lt;generated&gt;&gt;</span><br><span class="line">  --</span><br><span class="line">  *name:TEXT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User &#125;o--o&#123; Job</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><img src="/images/20221028a/スクリーンショット_2022-10-24_9.04.50.png" alt="スクリーンショット_2022-10-24_9.04.50.png" width="940" height="1086" loading="lazy"><h1 id="日本語対応"><a href="#日本語対応" class="headerlink" title="日本語対応"></a>日本語対応</h1><p>このままだと日本語を使うとエラーになってしまいます。とはいえ、PlantUMLのライブエディターを使うと日本語通ります。エラー画面を見ると文字化けしているようです。</p><p>検索すると、<a href="https://plantuml.com/ja/text-encoding">テキストエンコーディング</a>のページがありました。ここを見ると、UTF-8でエンコードしろ、とあります。あと興味深かったのはBrotli圧縮形式にも対応しているとのこと。まあBrotliはnpmで検索しても使いやすいPure JS版はなかったのでDeflateのままにしておきます。</p><p>JavaScriptのオリジナルのUTF-16をUTF-8にするのは<code>TextEncoding</code>を使います。次のように圧縮の前に変換を実行するようにすれば日本語も通るようになります。</p><figure class="highlight diff"><figcaption><span>tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- const bin = pako.deflateRaw(unescape(encodeURIComponent(src)));</span></span><br><span class="line"><span class="addition">+ const encoder = new TextEncoder();</span></span><br><span class="line"><span class="addition">+ const bin = pako.deflateRaw(encoder.encode(src));</span></span><br></pre></td></tr></table></figure><p>ちなみに、<code>btoa</code>などの既存のbase64アルゴリズムが使えない理由も上記のページに書かれていました。歴史的経緯。</p><h1 id="plantuml-com以外のサーバー対応"><a href="#plantuml-com以外のサーバー対応" class="headerlink" title="plantuml.com以外のサーバー対応"></a>plantuml.com以外のサーバー対応</h1><p>これまでのコードは、plantuml.comの変換サーバーを使って表示を行っていました。何度もリクエストを送ってしまうのは申し訳ないので、ローカルで建てたサーバーなど、別サーバーも使えるようにします。</p><p>まずはローカルサーバーを起動します。　Dockerを使うのが簡単ですね。</p><figure class="highlight yaml"><figcaption><span>docker-compose.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">plantuml:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plantuml/plantuml-server:jetty</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">18080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>以下のように起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose up</span><br></pre></td></tr></table></figure><p>次にファイルを変更します。この手の共通のパラメータをインジェクションするにはコンテキストを使うのが一番行儀が良いでしょう。まず<code>Context</code>を宣言しつつ、アプリ側に組み込むProviderをエクスポートします。</p><figure class="highlight diff"><figcaption><span>plantuml.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-import &#123; useMemo &#125; from &quot;react&quot;;</span></span><br><span class="line"><span class="addition">+import &#123; useMemo, createContext, useContext &#125; from &quot;react&quot;;</span></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"></span><br><span class="line"><span class="addition">+const PlantUMLContext = createContext(&quot;http://www.plantuml.com/plantuml&quot;);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+export const PlantUMLProvider = PlantUMLContext.Provider;</span></span><br></pre></td></tr></table></figure><p>コンポーネント内部では<code>useContext()</code>を使って設定値を取り出します。何も指定されていなかったら今まで通りのパスを使うようにします。</p><figure class="highlight diff"><figcaption><span>tsx plantuml.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> export function PlantUML(plops: ImageProps) &#123;</span><br><span class="line">     const &#123; src, ...remained &#125; = plops;</span><br><span class="line"></span><br><span class="line"><span class="addition">+    const serverUrl = useContext(PlantUMLContext) || &quot;http://www.plantuml.com/plantuml&quot;;</span></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"></span><br><span class="line"><span class="deletion">-    return src ? &lt;img &#123;...remained&#125; src=&#123;`http://www.plantuml.com/plantuml/svg/$&#123;base64&#125;`&#125; /&gt; : null;</span></span><br><span class="line"><span class="addition">+    return src ? &lt;img &#123;...remained&#125; src=&#123;`$&#123;serverUrl&#125;/svg/$&#123;base64&#125;`&#125; /&gt; : null;</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>使う場合はルートの要素で変数を設定します。今回はNext.jsを使っているので、ここでは<code>NEXT_PUBLIC_PLANTUML_SERVER</code>環境変数から情報を取得するようにします。</p><figure class="highlight ts"><figcaption><span>_app.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+<span class="keyword">import</span> &#123; <span class="title class_">PlantUMLProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../components/plantuml&#x27;</span></span><br><span class="line">+</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params">&#123; Component, pageProps &#125;: AppProps</span>) &#123;</span><br><span class="line">-  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line">+  <span class="keyword">return</span> (</span><br><span class="line">+    <span class="language-xml"><span class="tag">&lt;<span class="name">PlantUMLProvider</span> <span class="attr">value</span>=<span class="string">&#123;process.env.NEXT_PUBLIC_PLANTUML_SERVER</span> <span class="attr">as</span> <span class="attr">string</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">+      <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">+    <span class="tag">&lt;/<span class="name">PlantUMLProvider</span>&gt;</span></span></span><br><span class="line">+  )</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>次のように環境変数を設定して実行すればローカルに建てたPlantUMLサーバーを利用します。Windowsだったらsetとかで環境変数してからnpm run devすれば大丈夫です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NEXT_PUBLIC_PLANTUML_SERVER=http://localhost:18080 npm run dev</span><br></pre></td></tr></table></figure><p>開発者ツールで見てみると、きちんとローカルホストのサーバーにアクセスしていることがわかります。</p><img src="/images/20221028a/スクリーンショット_2022-10-28_13.05.31.png" alt="スクリーンショット_2022-10-28_13.05.31.png" width="1200" height="286" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回も最小の依存（deflateのpakoのみ）でPlantUML表示のコンポーネントが作れました。また、標準でお手頃なplantuml.comへのアクセス以外に、plantuml-serverのパスは切り替えられるようにもしてみました。</p><p>先ほどのMermaid.jsはGitHubでレンダリングされたり、確かにお手軽なのですが、例えばエンティティに日本語を入れるとか、ノードの色を変えるとか、テーマとか、表現力では圧倒的にPlantUMLですね。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="PlantUML" scheme="https://future-architect.github.io/tags/PlantUML/"/>
    
    <category term="UML" scheme="https://future-architect.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>Mermaid.jsをReact上でレンダリングする</title>
    <link href="https://future-architect.github.io/articles/20221027a/"/>
    <id>https://future-architect.github.io/articles/20221027a/</id>
    <published>2022-10-26T15:00:00.000Z</published>
    <updated>2022-10-28T06:06:29.135Z</updated>
    
    <content type="html"><![CDATA[<p>テキストで書いた情報をもとにダイアグラムを作成するツールがいくつかあります。有名どころだとGraphviz、Mermaid.jsや、PlantUMLがあります。このうち、GitHubでも対応して、テキストで書いても絵が見えるので今後が利用が大きく伸びそうなのがMermaid.jsです。</p><p>Mermaid.jsをReactで表示しようとしたものの、Reactラッパーとしてnpmに公開されているものがどれも古くてメンテナンスされていなそうという問題がありました。この手のアダプター系のライブラリはどうしてもメンテナンスがされなくて放置されるのが早くなりがちです。脆弱性が残り続けたりします。また、もう1つ、Reactのバージョンポリシーが変わって、0.1, 0.2, 0.3…0.14だったのが、突然15, 16, 17, 18となったのも問題を加速しています。メンテされないライブラリがReactのバージョンを<code>&quot;react&quot;: &quot;^16.12.0&quot;</code>みたいに指定すると、17、18とマッチしないので、Next.jsとかを使っていると、Reactのバージョンがコンフリクトしてインストールできなくなったりします。</p><p>そこで自前でやったところ、思ったよりも簡単だったのでそのやり方を紹介します。きっと、Vue.jsとかSvelteとかでもやりたい方は多いと良いと思いますし、React版ライブラリを公開しました、よりも内部の構造の紹介の方が有益でしょう。</p><h1 id="MermaidのAPI"><a href="#MermaidのAPI" class="headerlink" title="MermaidのAPI"></a>MermaidのAPI</h1><p><a href="https://mermaid-js.github.io/mermaid/#/">Mermaid.jsのAPI</a>の端々にjQuery時代のドキュメントを見ると、いくつかやり方が書かれています。</p><ul><li><code>mermaid.initialize()</code>で、HTMLの中の特定のクラスを持つタグなどを一括して処理してSVG画像を生成して挿入する</li><li><code>mermaid.mermaidAPI.render()</code>の機能を使ってSVGの要素を取得して表示</li></ul><p>それ以外にdeprecataedなAPIとして、<code>mermaid.init()</code>を使って指定のタグ（<code>initialize()</code>よりも細かく指定可能）の表示を行う方法もあります。こちらはクラス名、jQueryのセレクターの結果オブジェクト、実DOMオブジェクトを処理対象として明示します。</p><p><code>mermaid.initialize()</code>は実行したタイミングで全DOMを検索して実行しますが、いまどきのSPAとは相性がよくないと言えます。まず、指定のコンポーネントの中だけを処理対象にしたくても全DOMツリーが対象になってしまいますし、非同期でサーバーからソースを取得してきて実行する場合など、ソースが最初からそろっていないケースが多いでしょう。この<code>mermaid.initialize()</code>はサーバー側でレンダリングしていてDOM内のテキストノードに最初からコードがあり、<code>document.onLoad</code>だかで読み込めばOKというMPA前提のAPIです。</p><p>ReactなりなんなりがDOMのライフサイクルを管理していて、そのmermaid.jsを扱うタグもそれに従属していて、寿命管理はReactが担っているという関係の場合、処理対象が厳密に絞れる方がうれしいです。なのでdeprecatedな<code>mermaid.init()</code>を使うしかありません。</p><p>deprecatedでも問題ないのか、と言っても、<a href="https://github.com/mermaid-js/mermaid/issues/374#issuecomment-373917444">コラボレーター自らこのAPIしか使わん</a>と言っているので問題ないでしょう。</p><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p>次のコードがそのMermaid.jsを表示するコンポーネントです。<code>src</code> propsとしてMermaid.jsのソーステキストを受け取る前提となっています。まあコードに落としてみるとあっという間ですね。ドキュメントを理解するまでの時間の方が長かった。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mermaid <span class="keyword">from</span> <span class="string">&quot;mermaid&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">    <span class="attr">src</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">className</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Mermaid</span>(<span class="params">&#123;src, className&#125;: Props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ref = useRef&lt;<span class="title class_">HTMLDivElement</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (src) &#123;</span><br><span class="line">            mermaid.<span class="title function_">init</span>(&#123;&#125;, ref.<span class="property">current</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [ref.<span class="property">current</span>, src])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        src ?</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">key</span>=<span class="string">&#123;src&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;src&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        : <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> <span class="attr">key</span>=<span class="string">&#123;src&#125;</span> /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>肝としては、このコードがやっていることをピックアップすると、</p><ul><li>テキストノードとしてソースを書く(<code>&#123;src&#125;</code>のところ)</li><li><code>mermaid.init()</code>はソースが書かれたタグに限定(<code>useRef</code>を活用)</li><li>ソースは空だとやはり変換エラーになってしまうので、ソースが揃うまでは実行しない</li><li>キーを設定し、ソーステキストの修正ごとにDOMが再作成されるようにした</li></ul><p>ぐらいです。</p><p>一番最後ですが、一度ビルドすると、ソースコードが削除されたタグが動的に書き換えられてしまい、2度目の変更が行われないようになります。変更を起こすにはソースが書き換わったときに、タグごと作り直す方が手っ取り早いです。key属性をタグに付与することでタグを作り直すことを指定しています。これをやらないと、ソースコードが編集されると、絵ではなく、そのソースコードが画面に出てしまいます。絵の更新をしてほしいですよね？</p><p>これを表示すると以下のようになります。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> src=<span class="string">`erDiagram</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">User &#123;</span></span><br><span class="line"><span class="string">  INTEGER id PK</span></span><br><span class="line"><span class="string">  TEXT name</span></span><br><span class="line"><span class="string">  TEXT email</span></span><br><span class="line"><span class="string">  INTEGER test</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Job &#123;</span></span><br><span class="line"><span class="string">  INTEGER id PK</span></span><br><span class="line"><span class="string">  TEXT name</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">User &#125;o--o&#123; Job : jobs`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Mermaid</span> <span class="attr">src</span>=<span class="string">&#123;src&#125;/</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/images/20221027a/スクリーンショット_2022-10-22_22.47.54.png" alt="" width="480" height="714" loading="lazy"><p>めでたしめでたし。SVG形式で内部では生成されます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これで　Mermaid.jsが表示できるようになりました。古い型式のAPIの良質ライブラリを現代のフレームワークで活用するのは頭のパズルっぽくていいですね。</p><p>PlantUMLについては長くなったので別エントリーにします。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;テキストで書いた情報をもとにダイアグラムを作成するツールがいくつかあります。有名どころだとGraphviz、Mermaid.jsや、PlantUMLがあります。このうち、GitHubでも対応して、テキストで書いても絵が見えるので今後が利用が大きく伸びそうなのがMermaid</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
    <category term="UML" scheme="https://future-architect.github.io/tags/UML/"/>
    
    <category term="Mermaid.js" scheme="https://future-architect.github.io/tags/Mermaid-js/"/>
    
  </entry>
  
  <entry>
    <title>A5:SQL Mk-2 （a5m2）のデータモデリング便利機能（初心者向け）</title>
    <link href="https://future-architect.github.io/articles/20221025a/"/>
    <id>https://future-architect.github.io/articles/20221025a/</id>
    <published>2022-10-24T15:00:00.000Z</published>
    <updated>2022-10-27T02:10:08.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>私が所属しているチームでは、ERDの管理およびDDL生成のために、A5:SQL Mk-2（以下A5M2）を利用しています。全員がそこまで使ったことがあるわけでなく、徐々にかゆいところに手が届く機能を知り利用してよかったと思っています。</p><p>そこで、開発を通して最初から知っていれば嬉しかったなという機能をまとめます。使いこなしているチーム（人）に確認したら全て当たり前に使っていたので、常識レベルらしいです。</p><ul><li><a href="https://a5m2.mmatsubara.com/">A5:SQL Mk-2 - フリーのSQLクライアント&#x2F;ER図作成ソフト (松原正和)</a></li></ul><p>なお、a5m2 ってどういう機能があるんだという方は、宮崎さんの <a href="/articles/20220225a/">A5:SQL Mk-2に回帰した話 </a> を参照ください。また、SQLクライアントとして a5m2 を使う話はしません。余談ですが個人的にはSQLクライアントとしてはJetBrainsで特に有料製品を使っている方は<a href="/articles/20221014a/">Database Tools and SQLプラグインをおすすめ</a>しています。</p><h3 id="共通列（システム共通カラム）"><a href="#共通列（システム共通カラム）" class="headerlink" title="共通列（システム共通カラム）"></a>共通列（システム共通カラム）</h3><p>全テーブルに共通して付与したいカラムのことです。よく目にしそうなのが以下です。</p><ul><li>created_at: 作成日時</li><li>created_by: 作成ユーザーID、作成プログラムID</li><li>created_trace_id: 作成トレースID</li><li>updated_at: 更新日時</li><li>updated_by: 更新ユーザーID、更新プログラムID</li><li>updated_trace_id: 作成トレースID</li><li>revision: 更新番号</li><li>delete_flg: 削除フラグ(※是非については要議論)</li></ul><p>通常、運用観点から全テーブルに対して一律、横断的に付与させるため、個々のテーブル定義で設定するのは手間だし、管理の上でも省略したくなります。</p><p>a5m2 には共通列という機能が存在します。</p><p>「ER図タブ＞共通列を表示」から設定します。</p><img src="/images/20221025a/共通列の設定.png" alt="共通列の設定" width="1200" height="616" loading="lazy"><p>これにより全テーブルの一律設定が可能となります。</p><p>なお、共通列というだけあって、あるテーブルは追記オンリーである（更新がない）ため、updated_xx 系が不要にしたいといったことはできないです。その場合はa5m2のブックを分けるとか、DDLを生成した後に 何かしらのスクリプトで削除するといった作り込みになりそうです。</p><h3 id="型ドメイン"><a href="#型ドメイン" class="headerlink" title="型ドメイン"></a>型ドメイン</h3><p>公式ドキュメントにもしっかりと記載がある、<a href="https://a5m2.mmatsubara.com/help/ER/ERDomain.html">型ドメイン</a>についてです。</p><p>テーブル数が増えてくると、同じデータが入るにもかかわらず、データ型の定義が揺れてしまうときが多々あります。</p><p>例えば以下のようなケースです。</p><ul><li>論理的には同じ営業店コード VARCHAR(12) の体系で登録されるべきだが、名称は別のカラムが複数ある</li><li>移管先営業店コード、配送先営業店コードなど派生的な別名で登録する際に、誤ってVARCHAR(14)などと定義し揺れてしまう</li></ul><p>こういった状況を防ぐために取られるのが <strong>型ドメイン</strong> の機能です。基本的には個別で VARCHARやINTEGERなどを定義するのをやめ、全てドメイン定義で指定すると良いでしょう。</p><img src="/images/20221025a/型ドメイン.png" alt="型ドメイン.png" width="1200" height="603" loading="lazy"><p>当然ですが、型ドメインで個別の方を指定すると、DDLなどの出力時には指定された型桁で置換されます。ERDの大枠を作成する人が最初にいかに整えられるかが鍵になるかなと思います。</p><p>型ドメインですが、どれくらい汎化して用いるかは少しコツが必要だと思います。個別の営業店コードといったレベル感でいくのか、実は支社・支店も同じコード体型で存在するよというのであれば、 「店コード」 といったより抽象的な型ドメインを適用スべきかもしれません。システムで扱いたいエンティティをよく見極めて設計すると良いかなと思います。</p><h3 id="コマンドラインツール"><a href="#コマンドラインツール" class="headerlink" title="コマンドラインツール"></a>コマンドラインツール</h3><p>a5m2を用いるとGUIからDDLを生成できますが、コマンドラインツールも整備されておりこちらもうまく活用できると、CIやローカルでのタスクランナーでの実行に便利です。</p><ul><li><a href="https://www.vector.co.jp/soft/winnt/util/se519353.html?ds">A5ER コマンドラインユーティリティ</a></li></ul><p>上記をインストールしてPATHを通すと、大体の自動化ができます。使い方ですが、 <code>/Help</code> でみると用意されているコマンドの説明が出てきますので助かります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;A5M2cmd /Help</span><br><span class="line">A5:SQL Mk-2 コマンドラインユーティリティ</span><br><span class="line">  Version 2.17.1</span><br><span class="line"></span><br><span class="line">■コマンドライン引数</span><br><span class="line">  &gt; a5m2cmd コマンドオプション [追加オプション...]</span><br><span class="line"></span><br><span class="line">  追加オプションは <span class="string">&quot;/オプション名&quot;</span> または <span class="string">&quot;/オプション名=オプション値&quot;</span> の形式で</span><br><span class="line">  指定します。</span><br><span class="line"></span><br><span class="line">  オプション値に空白が含まれる場合、オプション名も含めてダブルクォートで括ってく</span><br><span class="line">  ださい。</span><br><span class="line"></span><br><span class="line">■コマンドオプション</span><br><span class="line">  /RunSql     SQLのスクリプトファイルを実行します。</span><br><span class="line"></span><br><span class="line">（以下、省略）</span><br></pre></td></tr></table></figure><p>DDLの出力ですが、例えば次のようなコマンドで可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; A5M2cmd.exe /ERDDL /Encoding=UTF-8 /ERD=erd.a5er /OutFileName=ddl.sql</span><br></pre></td></tr></table></figure><p>出力の改行コードの設定はできないようなので、次のようなMakefileでカバーしたりしました。WSLで実行するイメージです（WSL側からWindows側のexeを叩くのがどうなんだというのはあります）。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">ddl.sql: erd.a5er</span></span><br><span class="line">@A5M2cmd.exe /ERDDL /Encoding=UTF-8 /ERD=erd.a5er /OutFileName=ddl.sql</span><br><span class="line">@nkf -wd --overwrite ddl.sql</span><br></pre></td></tr></table></figure><p>なお、コマンドラインツールですが、Wine&#x2F;Macだと動かないという話もあり（私は未検証）、もし何か追加で手順が必要であれば教えてください。</p><p>他にも、ERDのPDFを生成したりします。PDFではなくPNGなどの画像ファイルを出力を自動化するのも良いかなと思います。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">erd.png: erd.a5er</span></span><br><span class="line">@A5M2cmd.exe /ERImage /ERD=ERD.a5er /OutFileName=erd.png</span><br></pre></td></tr></table></figure><p>まとめて generate タスクのようにしても良いかなと思います。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : generate</span><br><span class="line"><span class="section">generate: ddl.sql erd.pdf erd.png</span></span><br></pre></td></tr></table></figure><p>他にも、今回は割愛しますがSQLフォーマッタやImport&#x2F;ExportなどもCLIで呼び出せます。この手のツールでコマンドラインを用意されているところが、痒いところに手が届いて素晴らしいのでぜひ活用していきましょう。</p><h3 id="DDLオプション"><a href="#DDLオプション" class="headerlink" title="DDLオプション"></a>DDLオプション</h3><p>例えばPostgreSQLにおけるパーティション設定をどこで設定するか、迷った方も多いのではないでしょうか（私です）。</p><p>こういったRDBMS固有の設定は、CREATE TABLEオプションに記載します。次の例は、注文テーブルに対して、注文日でRANGEパーティションを設定する例です。</p><img src="/images/20221025a/PARTITON_BY_RANGE(order_on).png" alt="PARTITON_BY_RANGE(order_on)" width="1018" height="404" loading="lazy"><p>これが設定されると次のようにDDL出力時に差し込まれます。シンプルな仕組みに感じますが、私の周辺ではこれが逆に良いんだという声が続出している拡張機能です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">order</span> (</span><br><span class="line">  id <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , user_id <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  <span class="comment">-- 中略</span></span><br><span class="line">  , updated_by <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , revision <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">) <span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(ordered_on); <span class="comment">-- ★差し込まれたパーティション設定</span></span><br></pre></td></tr></table></figure><h3 id="論物変換"><a href="#論物変換" class="headerlink" title="論物変換"></a>論物変換</h3><p>型ドメインと類似ですが、同じ論理名なのに、物理名が揺れるケースがあります。よく見る例は次のようなケースです。</p><ul><li>注文番号（order_number）と処理番号（process_num）のように、 number と num で揺れるケース</li><li>開始日、終了日が start, end または from, to で揺れるケース</li><li>Xxx装置といったドメインで扱う名称が、 device と equipment で揺れるケース</li></ul><p>a5m2において標準で論物管理するような機能は存在しません。</p><p>そこでサードパーティ製のツールですが、 <a href="https://github.com/future-architect/a5er-dictionary">future-architect&#x2F;a5er-dictionary</a> を用いると便利です（同僚の辻さんが開発してくれました）。 <code>a5er-dictionary</code> は論理名でカラムを指定すると、辞書をもとに物理名を自動で組み立ててくれる便利ツールです。</p><p>例えば、以下のような辞書を用意します。</p><figure class="highlight txt"><figcaption><span>dict/dict.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ID,id</span><br><span class="line">会社,company</span><br><span class="line">コード,cd</span><br><span class="line">名,nm</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>これを用いて、各カラムの論理名から辞書を用いて、物理名を振り下ろすMakefileを用いると次のような感じで使えます。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: install a5er-dictionary</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> ERD_PATH=erd.a5er</span><br><span class="line"><span class="keyword">export</span> DICT_PATH=dict/dict.txt</span><br><span class="line"><span class="keyword">export</span> OUTPUT_PATH=erd.tmp</span><br><span class="line"><span class="keyword">export</span> TABLE_PLURAL=false</span><br><span class="line"></span><br><span class="line"><span class="section">install:</span></span><br><span class="line">@go install github.com/future-architect/a5er-dictionary/cmd/a5er-dictionary@latest</span><br><span class="line"></span><br><span class="line"><span class="section">a5er-dictionary: erd.a5er</span></span><br><span class="line">@a5er-dictionary</span><br><span class="line">@rm -f erd.a5er</span><br><span class="line">@mv erd.tmp erd.a5er</span><br><span class="line">@nkf -wd --overwrite erd.a5er</span><br></pre></td></tr></table></figure><p>これを実行すると、辞書が不完全であれば次のようなメッセージが出力されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make a5er-dictionary</span><br><span class="line">2022/10/23 21:34:41 Fail to logical to physical [<span class="comment">#注文]. remain [#注文]</span></span><br></pre></td></tr></table></figure><p>これは、「注文」に一致する「物理名」が無いため、論物変換できなかったということです。</p><p>その場合、次のようにdict.txt にレコードを追加していくことで、辞書自体を育てつつ論理名と物理名の揺れを防ぐ仕組みです。</p><figure class="highlight txt"><figcaption><span>dict/dict.txtに追加する</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注文,order</span><br></pre></td></tr></table></figure><p>注意ですが、論理名自体が揺れてしまうと意味がないの注意です（装置ID:equipment_id、デバイスID:device_idなど論理名で揺れると防ぎようが無いです）。</p><p><code>a5er-dictionary</code> はまだ <code>v0.2.0</code> であるため、不具合、ご要望などあればコメント貰えればです（こういったdict.txtの辞書自体も、オープン化したいですね）。</p><h3 id="ERDレビュー"><a href="#ERDレビュー" class="headerlink" title="ERDレビュー"></a>ERDレビュー</h3><p>機能でもなんでも無いですが、a5m2 の良いところの1つに、定義ファイルがテキストファイルであるということです。</p><p>そのため、何かしらの修正が発生した場合にはGitHub上で差分を見てレビューできることは非常に良いです（もちろん <code>ddl.sql</code> を見てレビューでも良いと思いますが、本体側に予期せぬ変更が加えられていないか見れるのが良いです）。</p><img src="/images/20221025a/a5m2フォーマット.png" alt="" width="1200" height="1180" loading="lazy"><p><code>a5er</code> 拡張子のファイルをエディタで開くとフラットな構造であることがわかり、Diffも取りやすいことが分かります。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>データモデリングのテーマからは外れますが、<a href="https://a5m2.mmatsubara.com/help/TableEditor/dummy.html">テスト用ダミーデータ作成</a> 機能はかなり便利と私の周囲で評判です。なんというか痒いところに届く感じが凄いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>a5m2のデータモデリング周りの便利な機能、使い方を紹介しました。</p><p>個人的には開発者10人程度までであれば、今回のようなa5m2の機能を用いて十分に設計開発が進められると感じています。</p><p>もっと他にもこういった機能が便利だよというのがありましたら、Twitterなどでコメントを貰えると幸いです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;私が所属しているチームでは、ERDの管理およびDDL生成のために、A5:SQL</summary>
        
      
    
    
    
    <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
    <category term="データモデル" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB/"/>
    
    <category term="便利ツール" scheme="https://future-architect.github.io/tags/%E4%BE%BF%E5%88%A9%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
    <category term="a5m2" scheme="https://future-architect.github.io/tags/a5m2/"/>
    
    <category term="A5:SQLMk-2" scheme="https://future-architect.github.io/tags/A5-SQLMk-2/"/>
    
  </entry>
  
  <entry>
    <title>Goで作ったロジックにWebUIをつけてGitHubページに公開する</title>
    <link href="https://future-architect.github.io/articles/20221024a/"/>
    <id>https://future-architect.github.io/articles/20221024a/</id>
    <published>2022-10-23T15:00:00.000Z</published>
    <updated>2022-10-24T01:21:37.172Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっとしたツールをGoで作ってみたのですが、わざわざインストールしなくてもいいようにWebのUIをつけてブラウザで使えるようにしてみました。作ってみたのは以下のツールで、Markdownのリスト形式でざっと下書きしたテーブルの設計をSQLとか、PlantUMLとかMermaid.js形式のERDの図にします。</p><p><a href="https://shibukawa.github.io/md2sql/">https://shibukawa.github.io/md2sql/</a></p><img src="/images/20221024a/スクリーンショット_2022-10-18_8.38.26.png" alt="" width="1200" height="714" loading="lazy"><p>ウェブフロントエンド部分はNext.jsの静的サイトで、GoはWASMにしてロードして実行しています。WASMを使うのは初めてなのであえて選んでみました。</p><h1 id="GoをWASM化する"><a href="#GoをWASM化する" class="headerlink" title="GoをWASM化する"></a>GoをWASM化する</h1><p>もともとCLIツールは作っておりました。CLIのメインは<a href="https://github.com/shibukawa/md2sql/blob/main/cmd/md2sql/main.go">cmd&#x2F;md2sql&#x2F;main.go</a>で作っていました。この中でやっていることは</p><ul><li>kingpin.v2のオプションパース</li><li>指定されたファイルを読み込み(あるいは標準入力)</li><li>パース</li><li>指定の形式変換</li></ul><p>です。このうち、Web化する場合は後者の2個だけ必要ですし、コマンドラインオプションのパースとかは不要なので、WASM化用のmain.goを別途作ります。それが<a href="https://github.com/shibukawa/md2sql/blob/main/cmd/wasm/main.go">cmd&#x2F;wasm&#x2F;main.go</a>です。JSから呼ばれる関数は<code>js.Value</code>で引数を受け取るエントリー関数を用意しておきます。<code>ConvertToSQL()</code>がこれにあたります。そしてJS側から呼べるように、<code>js.Global()</code>に作ったAPIを追加します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:build wasm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;syscall/js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/shibukawa/md2sql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConvertToSQL</span><span class="params">(this js.Value, args []js.Value)</span></span> any &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span>:      <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;first argument should be markdown source.&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tables, err := md2sql.Parse(strings.NewReader(args[<span class="number">0</span>].String()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span>:      <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: err.Error(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">md2sql.DumpSQL(&amp;buf, tables, md2sql.PostgreSQL)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span>:     <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;result&quot;</span>: buf.String(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mermaid/PlantUML変換は省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">js.Global().Set(<span class="string">&quot;md2sql&quot;</span>, js.ValueOf(<span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;toSQL&quot;</span>:      js.FuncOf(ConvertToSQL),</span><br><span class="line"><span class="string">&quot;toMermaid&quot;</span>:  js.FuncOf(ConvertToMermaid),</span><br><span class="line"><span class="string">&quot;toPlantUML&quot;</span>: js.FuncOf(ConvertToPlantUML),</span><br><span class="line">&#125;))</span><br><span class="line">&lt;-c <span class="comment">// 終了しないようにブロック</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次のコマンドでwasmが生成されることを確認しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GOOS=js GOARCH=wasm go build -o md2sql.wasm</span><br></pre></td></tr></table></figure><p>実行時にローダーも必要なのでwasm_exec.jsを取得しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> <span class="string">&quot;<span class="subst">$(go env GOROOT)</span>/misc/wasm/wasm_exec.js&quot;</span> .</span><br></pre></td></tr></table></figure><h1 id="Webの画面を作る"><a href="#Webの画面を作る" class="headerlink" title="Webの画面を作る"></a>Webの画面を作る</h1><p>&#x2F;cmd&#x2F;frontendをつくるようにcreate-next-appを実行し、最近お気に入りの<a href="https://future-architect.github.io/articles/20211124a/">Tailwind.CSSとdaisyUI</a>の組み合わせで、ページトップのスクリーンショットのような画面を作りました。テキストボックスに入れられたソースコードを<code>useRef</code>の変数に一時変数に入れておいて、generateボタンを押されたらGoコードを呼び出して実行します。</p><p>まず、Next.jsが動くページは、ドメイン(shibukawa.github.io)直下ではなく、&#x2F;md2sql&#x2F;というフォルダの中で動くのでbasePathを設定します。ついでに、静的サイト生成してアップするので画像の最適化もオフにしておきます。</p><figure class="highlight js"><figcaption><span>/cmd/frontend/next.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  <span class="attr">basePath</span>: <span class="string">&#x27;/md2sql&#x27;</span>,     <span class="comment">// 追加</span></span><br><span class="line">  <span class="attr">reactStrictMode</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">swcMinify</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">images</span>: &#123;                <span class="comment">// 追加</span></span><br><span class="line">    <span class="attr">unoptimized</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ついでにロードするWASMが公開する関数の型定義を宣言します。</p><figure class="highlight ts"><figcaption><span>/cmd/frontend/md2sql.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> f = <span class="function">(<span class="params">src: <span class="built_in">string</span></span>) =&gt;</span> &#123; <span class="attr">ok</span>: <span class="literal">true</span>, <span class="attr">result</span>: <span class="built_in">string</span>&#125; | &#123;<span class="attr">ok</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="built_in">string</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">md2sql</span>:&#123;</span><br><span class="line">    <span class="attr">toSQL</span>: f,</span><br><span class="line">    <span class="attr">toMermaid</span>: f,</span><br><span class="line">    <span class="attr">toPlantUML</span>: f,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code>にこの追加したmd2sql.d.tsを追加しておきます。最初next-env.d.tsに追加してやっていたのですが、このファイルってビルドのたびに再生成されてしまうので消えてしまいます。</p><figure class="highlight json"><figcaption><span>/cmd/frontend/tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;next-env.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;md2sql.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.tsx&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>wasm_exec.js</code>はNext.jsのpublicフォルダに入れておきます。</p><p>ビルド周りもいろいろ書き換えておきます。静的サイト生成なので、next build後にnext exportも実行するのと、GitHubの制約でリポジトリのルート以下の&#x2F;docsフォルダに生成されたファイルを移動、<code>.nojekyll</code>ファイルをその中に作る、というのを一緒にやります。ついでにGoのビルドもここに入れておきました。</p><p>さっとやったのでWindowsでは動かない書き方をしています。すみません。Windowsだったら<a href="https://www.npmjs.com/package/shelljs">shelljs</a>とか<a href="https://www.npmjs.com/package/crossenv">crossenv</a>を使ってください。</p><figure class="highlight json"><figcaption><span>/cmd/frontend/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prebuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd ../wasm &amp;&amp; GOOS=js GOARCH=wasm go build -o ../frontend/public/md2sql.wasm&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postbuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next export &amp;&amp; mv out ../../docs &amp;&amp; touch ../../docs/.nojekyll&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="繋げる部分のコード"><a href="#繋げる部分のコード" class="headerlink" title="繋げる部分のコード"></a>繋げる部分のコード</h1><p>wasm_exec.jsをロードして実行するコードを書きます。Next.jsでは任意のページ内とかコンポーネント内で宣言しておけば、ページのヘッダー部分に<code>&lt;script&gt;</code>タグを作って遅延ロードしてくれる<a href="https://nextjs.org/docs/basic-features/script"><code>next/script</code>コンポーネント</a>があるのでこれを使います。一応この<a href="https://www.npmjs.com/package/@types/golang-wasm-exec">wasm_exec.jsの型定義も</a>入れようと思えば入れられますが、今回はts-ignoreで済ませてしまいました。定型文ですし。GitHubページのプロジェクトページなのでjsもwasmもパスが<code>/md2sql/</code>以下にある想定で書きます。</p><figure class="highlight tsx"><figcaption><span>/cmd/frontend/pages/index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Script</span> <span class="keyword">from</span> <span class="string">&#x27;next/script&#x27;</span></span><br><span class="line"></span><br><span class="line">:中略</span><br><span class="line"></span><br><span class="line">&#123; <span class="comment">/* Load web assembly */</span> &#125;</span><br><span class="line">&lt;<span class="title class_">Script</span> id=<span class="string">&quot;exec-wasm&quot;</span> src=<span class="string">&quot;/md2sql/wasm_exec.js&quot;</span> onLoad=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">const</span> go = <span class="keyword">new</span> <span class="title class_">Go</span>();</span><br><span class="line">    <span class="title class_">WebAssembly</span>.<span class="title function_">instantiateStreaming</span>(<span class="title function_">fetch</span>(<span class="string">&quot;/md2sql/md2sql.wasm&quot;</span>), go.<span class="property">importObject</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        go.<span class="title function_">run</span>(result.<span class="property">instance</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;&#125;/&gt;</span><br></pre></td></tr></table></figure><p>WASMのロジックは生成のコールバックが呼ばれた時に呼び出します。型定義があるのでその通りに呼んであげればOKです。本当はエラーはトーストとかでポップアップさせた方が良いけどとりあえず雑にコンソールに書いてます。</p><figure class="highlight tsx"><figcaption><span>/cmd/frontend/pages/index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> generate = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (format) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;sql&quot;</span>:</span><br><span class="line">      <span class="keyword">const</span> r1 = md2sql.<span class="title function_">toSQL</span>(src.<span class="property">current</span>);</span><br><span class="line">      <span class="keyword">if</span> (r1.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="title function_">setResult</span>(r1.<span class="property">result</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(r1.<span class="property">message</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 以下略</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [format])</span><br></pre></td></tr></table></figure><p>接点としてはこの「起動時のロード」と、ローダーが登録した関数の呼び出しだけですので、あとはウェブフロントエンド作れる人には特に問題なく進められると思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>思ったよりもWASM化が簡単にできました。作業時間の半分はGitHubページのフォルダがルート直下じゃないことで起きる問題のトラブルシュートでした。繋ぐ部分を作ってローカルで試すのは思ったよりもすぐでした。</p><p>なお、標準のGoコンパイラでやっていますので生成されるwasmファイルは大きめ(5.5MB、gzip時に1.3MB)ですが、TinyGoを使えばもっと小さいものが作れますが、標準のGoの方が互換性が高いというメリットはあります。以前はgopher.jsを使ったりしたこともありますが、標準処理系でできるのはありがたいですね。まあ、あちらは.jsになるのでローダーが不要というメリットはあります。</p><p>今後も、小さいな補助ツールを作ったらウェブで簡単に実行できるようにしていこうと思いました。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.asobou.co.jp/blog/web/go-webassembly">GoのコードをWebAssenblyにコンパイルしてブラウザ上でGoを実行する</a></li><li><a href="https://macias.info/entry/202003151900_go_wasm_js.md">Go and WebAssembly (I): interacting with your browser JS API</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;ちょっとしたツールをGoで作ってみたのですが、わざわざインストールしなくてもいいようにWebのUIをつけてブラウザで使えるようにしてみました。作ってみたのは以下のツールで、Markdownのリスト形式でざっと下書きしたテーブルの設計をSQLとか、PlantUMLとかMerm</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="Next.js" scheme="https://future-architect.github.io/tags/Next-js/"/>
    
    <category term="wasm" scheme="https://future-architect.github.io/tags/wasm/"/>
    
  </entry>
  
  <entry>
    <title>CSV処理における共通処理をDecoratorパターンで実現する</title>
    <link href="https://future-architect.github.io/articles/20221021a/"/>
    <id>https://future-architect.github.io/articles/20221021a/</id>
    <published>2022-10-20T15:00:00.000Z</published>
    <updated>2022-10-21T00:17:54.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Technogoly Innovation Group 辻です。</p><p>システム間のデータ連携として、他システムが出力した CSV ファイルを Go で読み込んでリレーショナルデータベースにファイルのデータを保存する、という処理がありました。CSV の値をデコードしたあとに共通的な処理を差し込みたいユースケースで <a href="https://ja.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Decorator パターン</a>を使って実装をしました。コードベースをシンプルに保ちつつ共通処理をフックできます。実用的なユースケースで Decorator パターンを紹介する記事は少ないと思ったので、本記事を書きました。<br>まず Decorator パターンが必要になった背景を説明したあとに具体的な Go の実装を見ていきます。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>他システムが出力した CSV ファイルを Go でデコードして、PostgreSQL にデータを投入するような処理がありました。簡略化したイメージは以下です。</p><img src="/images/20221021a/abstract.png" alt="" width="666" height="156" loading="lazy"><p>このとき、連携元システムが出力した CSV ファイルにヌル文字（NUL）<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> が稀に含まれることがわかりました。ヌル文字は PostgreSQL では扱えません。ヌル文字が含まれるデータを PostgreSQL に投入しようとするとエラーになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: invalid byte sequence for encoding &quot;UTF8&quot;: 0x00 (SQLSTATE 22021)</span><br></pre></td></tr></table></figure><p>PostgreSQL のエラーコード <a href="https://www.postgresql.jp/document/14/html/errcodes-appendix.html#:~:text=22021,character_not_in_repertoire">22021</a> や PostgreSQL の開発グループが運営する QA のスレッド <a href="https://www.postgresql.org/message-id/1510040474.2845.41.camel%40cybertec.at">“Re: ERROR: invalid byte sequence for encoding “UTF8”: 0x00”</a> などを見ると、PostgreSQL ではヌル文字は許容されていないことがわかります。</p><p>このことから PostgreSQL にデータを投入する前にヌル文字を削除する必要がありました。連携元システムの CSV ファイル出力処理は手を加えることができなかったため、<strong>Go の実装のなかでヌル文字を削除する</strong>ことにしました。</p><h2 id="実装方針"><a href="#実装方針" class="headerlink" title="実装方針"></a>実装方針</h2><p>実装方針として大きく２つ考えらます。</p><ul><li>案１：ナイーブにヌル文字を除外する</li><li>案２：Decorator パターンを使ってヌル文字を除外する</li></ul><p>本ケースでは後者の方法がより望ましい実装方針です。</p><p>まずヌル文字を除外する前の実装を確認します。その上でヌル文字を除外するためのナイーブな実装方法と、その実装をするとコードベースがどうなるか考えたあと、最後に Decorator パターンを使った実装を紹介します。</p><h3 id="ヌル文字を除外する前の実装"><a href="#ヌル文字を除外する前の実装" class="headerlink" title="ヌル文字を除外する前の実装"></a>ヌル文字を除外する前の実装</h3><p>まずヌル文字を除外する前の実装例です。CSV ファイルを読み込んで <a href="https://github.com/gocarina/gocsv">gocarina&#x2F;gocsv</a> でデコードし標準出力する実装です。データベースにデータを投入するコードは省略します。説明の便宜上 CSV ファイルの値は標準出力してヌル文字が含まれていることを確認します。</p><p>CSV ファイルの <code>&quot;future&quot;</code> の文字列の後ろにはヌル文字が含まれています。</p><figure class="highlight plaintext"><figcaption><span>company.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id,company_name</span><br><span class="line">&quot;1&quot;,&quot;future &quot;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>model.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Company <span class="keyword">struct</span> &#123;</span><br><span class="line">ID          <span class="type">string</span> <span class="string">`csv:&quot;id&quot;`</span></span><br><span class="line">CompanyName <span class="type">string</span> <span class="string">`csv:&quot;company_name&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/csv&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gocarina/gocsv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(<span class="string">&quot;company.csv&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">r := csv.NewReader(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ss []Company</span><br><span class="line"><span class="keyword">if</span> err := gocsv.UnmarshalCSV(r, &amp;ss); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> ss &#123;</span><br><span class="line"><span class="comment">// ヌル文字は目には見えないため、バイト列として表示します</span></span><br><span class="line"><span class="comment">// 値が 0 であるバイトがヌル文字です</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ID = %v, CompanyName = %v&quot;</span>,</span><br><span class="line">[]<span class="type">byte</span>(s.ID),</span><br><span class="line">[]<span class="type">byte</span>(s.CompanyName),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// データベースを投入する何らかの処理（省略）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><p>バイト列で確認すると、たしかに <code>CompanyName</code> の終端にヌル文字（バイトが 0）が含まれています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID = [49], CompanyName = [102 117 116 117 114 101 0]</span><br></pre></td></tr></table></figure><h3 id="案１：ナイーブにヌル文字を除外する実装"><a href="#案１：ナイーブにヌル文字を除外する実装" class="headerlink" title="案１：ナイーブにヌル文字を除外する実装"></a>案１：ナイーブにヌル文字を除外する実装</h3><p>さて、ヌル文字を除外する実装を考えます。ナイーブな実装は <code>ID</code> や <code>CompanyName</code> の各構造体の値をデータベースへ投入するときにヌル文字を除外するという方法です。実装例のコードでは標準出力時に除外することに相当します。</p><p>実装例は以下です。</p><figure class="highlight go"><figcaption><span>delete_nul.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deleteNUL はヌル文字を削除した文字列を返却します</span></span><br><span class="line"><span class="comment">// &quot;\x00&quot; がヌル文字です</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteNUL</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.ReplaceAll(s, <span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> ss &#123;</span><br><span class="line"><span class="comment">// 表示するときに各フィールドに deleteNUL() を挟み、ヌル文字を除外する</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ID = %v, CompanyName = %v&quot;</span>,</span><br><span class="line">[]<span class="type">byte</span>(deleteNUL(s.ID)),</span><br><span class="line">[]<span class="type">byte</span>(deleteNUL(s.CompanyName)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><p>出力結果を見ると、ヌル文字が削除されています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID = [49], CompanyName = [102 117 116 117 114 101]</span><br></pre></td></tr></table></figure><p>この実装方法でヌル文字を除外できますが、以下のような課題があります。</p><ul><li>コードの見通し、可読性が悪くなる。ビジネスロジックのコードにシステム都合によるコードが混ざるため</li><li>実装やテストが漏れてしまうおそれがある。構造体の全フィールドに適用する必要があるため</li></ul><p>Decorator パターンを使って実装することで上記の課題を解決できます。</p><h3 id="案２：Decorator-パターンを使ってヌル文字を除外する実装"><a href="#案２：Decorator-パターンを使ってヌル文字を除外する実装" class="headerlink" title="案２：Decorator パターンを使ってヌル文字を除外する実装"></a>案２：Decorator パターンを使ってヌル文字を除外する実装</h3><p>本ケースでベターな方法である Decorator パターンを使った実装を紹介します。Decorator パターンはデザインパターンの１つとして知られています。もともとの振る舞いに対して、新しい振る舞いを動的に追加できます。</p><p>今回のケースでは「CSV の値を読み込む」という振る舞いに対して「ヌル文字を除去する」という振る舞いを追加します。これにより <code>gocsv.UnmarshalCSV()</code> で CSV をデコードするときにヌル文字を除去できます。まず <code>gocsv.UnmarshalCSV()</code> の API のシグネチャを確認したあとに、どのように Decorator を実装するか説明します。</p><p><code>gocsv.UnmarshalCSV</code> の API は以下のようになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnmarshalCSV(in CSVReader, out <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span></span><br></pre></td></tr></table></figure><p>第一引数に <code>gocsv.CSVReader</code> のインターフェースを受け取っていることがポイントです。 <code>gocsv.CSVReader</code> は以下のメソッドがあるインターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CSVReader <span class="keyword">interface</span> &#123;</span><br><span class="line">Read() ([]<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line">ReadAll() ([][]<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>またヌル文字を除外する前の実装で <code>gocsv.UnmarshalCSV</code> の引数として渡している <code>*csv.Reader</code> 構造体は当然ながら <code>Read()</code> と <code>ReadAll()</code> メソッドがあります。</p><p>このとき <strong><code>gocsv.CSVReader</code> インターフェースを満たす <code>Read()</code> と <code>ReadAll()</code> メソッドを持つ構造体を用意し、それぞれメソッドで <code>*csv.Reader</code> の <code>Read()</code> と <code>ReadAll()</code> を呼び出したあとに、ヌル文字を除外するような実装ができます。この構造体を <code>gocsv.UnmarshalCSV()</code> の引数に渡すことで <code>gocsv</code> によるデコード時にヌル文字を除去できます</strong>。</p><p>具体的な Decorator の実装例は以下のとおりです。</p><figure class="highlight go"><figcaption><span>decorator_reader.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> deleteNulReader <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 型は *csv.Reader でも良いです</span></span><br><span class="line"><span class="comment">// ただ Decorator と呼ぶ場合、振る舞いをラップするインターフェースと</span></span><br><span class="line"><span class="comment">// 同じインターフェースを型に持つのが一般的です</span></span><br><span class="line">r gocsv.CSVReader</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewDeleteNulReader は Decorator したインターフェースを返却します</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDeleteNulReader</span><span class="params">(r gocsv.CSVReader)</span></span> gocsv.CSVReader &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;deleteNulReader&#123;r: r&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dr *deleteNulReader)</span></span> Read() ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 最初に引数に渡された値の Read() を呼び出す</span></span><br><span class="line">ss, err := dr.r.Read()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ss, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read() の結果に対して、ヌル文字を除去する処理をおこなう</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ss &#123;</span><br><span class="line">ss[i] = strings.ReplaceAll(ss[i], <span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ss, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dr *deleteNulReader)</span></span> ReadAll() ([][]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 最初に引数に渡された値の ReadAll() を呼び出す</span></span><br><span class="line">ss, err := dr.r.ReadAll()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ss, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAll() の結果に対して、ヌル文字を除去する処理をおこなう</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ss &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> ss[i] &#123;</span><br><span class="line">ss[i][j] = strings.ReplaceAll(ss[i][j], <span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ss, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで Decorator は完成です。アプリケーションのコードに Decorator を適用する場合は以下のようになります。デコード処理以降の実装は手を加えずとも <code>gocsv.UnmarshalCSV()</code> で得られる結果ではヌル文字が削除されているのが非常に嬉しいポイントです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NewDeleteNulReader() として Decorator を適用する</span></span><br><span class="line">r := NewDeleteNulReader(csv.NewReader(f))</span><br><span class="line"></span><br><span class="line"><span class="comment">// デコード処理以降の実装は手を加えずにヌル文字を除外することができる</span></span><br><span class="line"><span class="keyword">var</span> ss []Company</span><br><span class="line"><span class="keyword">if</span> err := gocsv.UnmarshalCSV(r, &amp;ss); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> ss &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ID = %v, CompanyName = %v&quot;</span>,</span><br><span class="line">[]<span class="type">byte</span>(s.ID),</span><br><span class="line">[]<span class="type">byte</span>(s.CompanyName),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// データベースを投入する何らかの処理（省略）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><p>このような方法でヌル文字を除外できました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID = [49], CompanyName = [102 117 116 117 114 101]</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>CSV ファイルのデコード時に必要な共通的な処理を Decorator パターンを使って実装しました。この方法はコードベースをシンプルに保ちつつ、必要な共通処理をフックできる方法として役に立ちます。Decorator パターンの実用的な適用例として、みなさんの参考になれば嬉しいです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">文字コード 0 番の制御文字のことです。データや文字列の終端を示す特殊な文字として使用されることがあります。 <a href="https://e-words.jp/w/%E7%A9%BA%E6%96%87%E5%AD%97.html">https://e-words.jp/w/空文字.html</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Technogoly Innovation Group</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="ファイル連携" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E9%80%A3%E6%90%BA/"/>
    
    <category term="CSV" scheme="https://future-architect.github.io/tags/CSV/"/>
    
    <category term="Decorator" scheme="https://future-architect.github.io/tags/Decorator/"/>
    
  </entry>
  
</feed>
