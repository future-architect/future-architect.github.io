<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-05-14T05:43:37.050Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutterで技術ブログRSSリーダー</title>
    <link href="https://future-architect.github.io/articles/20210514a/"/>
    <id>https://future-architect.github.io/articles/20210514a/</id>
    <published>2021-05-13T15:00:01.000Z</published>
    <updated>2021-05-14T05:43:37.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>真野です。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の5日目です。昨日は鶴巻さんの<a href="/articles/20210513b/">Flutterレイアウト入門</a>でした。</p><p>この記事ではFlutterでRSSを用いてフューチャー技術ブログリーダーを作ろうと思います。</p><h2 id="RSSとは"><a href="#RSSとは" class="headerlink" title="RSSとは"></a>RSSとは</h2><blockquote><p>RSS（RDF Site Summary/Rich Site Summary）はXMLを応用したデータ形式の一種で、Webサイト内の新着ページや更新ページのタイトルやURL、更新日時、要約などを一覧形式で記述することができる。</p><ul><li><a href="https://e-words.jp/w/RSS%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89.html">IT用語辞典</a></li></ul></blockquote><p>新着記事などの把握のためにサイトが配信しているXMLファイルのことですね。フューチャー技術ブログでは<a href="https://future-architect.github.io/atom.xml">atom.xml</a>を配信しています。</p><p>さきほどのatom.xmlのリンクを開いた人はほとんどいないと思いますが、<code>Atom 1.0</code> という一般的な形式で、記事数は <code>20件</code> を上限にして生成しています。本ブログは静的サイトジェネレータに<a href="https://hexo.io/">Hexo</a>を使っていて、atom.xmlの生成にはメジャーそうだった<a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a>のデフォルトで出力しています。今の所この設定に運営の意思は働いていないので、要望/アドバイスがあればTwitterでコメント下さい。今回開発するリーダーではこれを入力に利用します。</p><h2 id="インプットを怠けてしまう"><a href="#インプットを怠けてしまう" class="headerlink" title="インプットを怠けてしまう"></a>インプットを怠けてしまう</h2><p>話は変わりますが、ITエンジニアにとってインプットを行わないと、<code>今までの知識や経験のみで判断することになり、新たな技術でより効率的なやり方を発想できなくなる</code> そうです。<a href="https://qiita.com/kotakanbe@github/items/32cf4eb3de1741af26fb">究極のIT系最新技術情報収集用Slackチーム公開</a>の記事に書いてありました。インプット大事ですよね。</p><p>モヒカンSlackチームは良いものですが、ワークスペース設定の宿命でデータが消えてしまい悲しいです。そこで自分のペースで自由自在にインプトットできるツールを欲する人は意外と多いのではないでしょうか。</p><p>そのため個人的な様々な要求に耐えられるRSSリーダーを作ろうと思いました。今回は左右のスワイプでスキップ・既読の操作を行えると気持ちが良いと思ったので記事の表示＋スワイプ操作ができることまでを題材とします。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p><a href="https://flutter.dev/docs/get-started/install">get-started/install</a> に従い構築します。</p><p>自分の環境では以下です。</p><figure class="highlight bash"><figcaption><span>環境情報</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[√] Flutter (Channel stable, 2.0.6, on Microsoft Windows [Version 10.0.19043.964], locale ja-JP)</span><br><span class="line">[√] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version 30.0.3)</span><br><span class="line">[√] Chrome - develop <span class="keyword">for</span> the web</span><br><span class="line">[√] Android Studio</span><br><span class="line">[√] IntelliJ IDEA Community Edition (version 2020.2)</span><br><span class="line">[√] VS Code (version 1.56.0)</span><br><span class="line">[√] Connected device (2 available)</span><br></pre></td></tr></table></figure><p>わたしの開発はIntelliJで行っていますが、VSCodeでも十分開発できるそうです。</p><h2 id="Widget開発"><a href="#Widget開発" class="headerlink" title="Widget開発"></a>Widget開発</h2><p>StatelessWidgetで作っていきます</p><p><code>lib/main.dart</code> に実装します。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(App());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        title: <span class="string">&#x27;Future Tech Blog Reader&#x27;</span>,</span><br><span class="line">        theme: ThemeData(</span><br><span class="line">          primaryColor: Colors.white,</span><br><span class="line">        ),</span><br><span class="line">        home: TechBlog());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TechBlog</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TechBlogState createState() =&gt; _TechBlogState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TechBlogState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TechBlog</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 次から実装していきます。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次章から <code>_TechBlogState</code> にメインのロジックを詰めていきます。</p><h2 id="RSSフィードの取得"><a href="#RSSフィードの取得" class="headerlink" title="RSSフィードの取得"></a>RSSフィードの取得</h2><p>まずはatom.xmlを取得しないと始まらないので、ファイルをダウンロードします。</p><p><a href="https://pub.dev/packages/http">http</a>パッケージを利用します。<code>pubspec.yaml</code>に以下を追記します。</p><figure class="highlight yml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">http:</span> <span class="string">^0.13.3</span></span><br></pre></td></tr></table></figure><p>Dartのコードでは以下のようにアクセスします。<code>response.body</code>で直接String型が取得できますが、利用している文字コードが不正なのか文字化けするので、<code>dart:convert</code> パッケージを用いて自前でUTF-8でデコードします。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;dart:convert&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TechBlogState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TechBlog</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    fetchFeed();</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> fetchFeed() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> response = <span class="keyword">await</span> http</span><br><span class="line">        .<span class="keyword">get</span>(<span class="built_in">Uri</span>.parse(<span class="string">&#x27;https://future-architect.github.io/atom.xml&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> Exception(<span class="string">&#x27;Failed to fetch atom.xml&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    debugPrint(utf8.decode(response.bodyBytes))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここでXMLが問題なく表示できていれば、フィードの解析に進みます。</p><h2 id="RSSフィード解析"><a href="#RSSフィード解析" class="headerlink" title="RSSフィード解析"></a>RSSフィード解析</h2><p>atom.xml パース用の<a href="https://pub.dev/packages/webfeed">webfeed</a>と呼ばれるパッケージを利用します。 <code>_articles</code>のリストに結果を追加します。</p><figure class="highlight yml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">http:</span> <span class="string">^0.13.3</span></span><br><span class="line">  <span class="attr">webfeed:</span> <span class="string">^0.7.0</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> _articles = &lt;AtomItem&gt;[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> fetchFeed() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// 中略</span></span><br><span class="line">  <span class="keyword">final</span> atomFeed = AtomFeed.parse(utf8.decode(response.bodyBytes));</span><br><span class="line">  atomFeed.items!.forEach((item) =&gt; &#123;_articles.add(item)&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AtomFeed.parseで解析結果はドキュメントに書いてあるとおり、一通り必要な要素が入っています。必ずしも要素が入っているか保証されていないので、<code>String?</code> 型でした。</p><figure class="highlight dart"><figcaption><span>atom_item.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AtomItem</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> id;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">DateTime?</span> updated;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;AtomPerson&gt;? authors;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;AtomLink&gt;? links;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;AtomCategory&gt;? categories;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;AtomPerson&gt;? contributors;</span><br><span class="line">  <span class="keyword">final</span> AtomSource? source;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> published;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> content;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> summary;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> rights;</span><br><span class="line">  <span class="keyword">final</span> Media? media;</span><br><span class="line">  <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここの<code>id</code>が記事のURLになります。他には<code>title</code>、<code>published</code>のフィールドを利用します。</p><h2 id="リストの作成"><a href="#リストの作成" class="headerlink" title="リストの作成"></a>リストの作成</h2><p>先程取得した、_articleのリストをListViewに変換します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(<span class="string">&#x27;Future Tech Blog Reader&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    body: ListView.builder(</span><br><span class="line">      itemCount: _articles.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">          <span class="keyword">return</span> ListTile(</span><br><span class="line">            leading: Text(_articles[index].published.toString()),</span><br><span class="line">            title: Text(_articles[index].title.toString()),</span><br><span class="line">            onTap: () =&gt; &#123;_launchURL(_articles[index].id.toString())&#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>URLを開くためには、<code>package:url_launcher/url_launcher.dart</code> パッケージを利用したヘルパー関数を用意すると良さそうです。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _launchURL(<span class="built_in">String</span> _url) <span class="keyword">async</span> =&gt; <span class="keyword">await</span> canLaunch(_url)</span><br><span class="line">    ? <span class="keyword">await</span> launch(_url)</span><br><span class="line">    : <span class="keyword">throw</span> <span class="string">&#x27;Could not launch <span class="subst">$_url</span>&#x27;</span>;</span><br></pre></td></tr></table></figure><p>これでスワイプなしで、技術ブログの記事をひらけるようになりました。</p><p>Androidの場合はブラウザの起動に権限設定が必要です。</p><figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.QUERY_ALL_PACKAGES&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>エミュレータで動かしてみるとこんな感じです。</p><img src="/images/20210514a/Animation.gif" alt="モバイルアプリで実行例" wight="469" height="842" loading="lazy"><h2 id="スワイプでリストを閉じる"><a href="#スワイプでリストを閉じる" class="headerlink" title="スワイプでリストを閉じる"></a>スワイプでリストを閉じる</h2><p>次はスワイプで既読を管理する機能です。</p><p>需要が多いのか公式ドキュメントのCookbookに<a href="https://flutter.dev/docs/cookbook/gestures/dismissible">実装例</a>が照会されています。</p><p>さきほどのitemBuilderを<code>Dismissible</code>ウィジェットで拡張します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">itemBuilder: (context, index) &#123;</span><br><span class="line">  <span class="keyword">final</span> item = _articles[index];</span><br><span class="line">  <span class="keyword">return</span> Dismissible(</span><br><span class="line">    key: Key(item.title.toString()),</span><br><span class="line">    onDismissed: (direction) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _articles.removeAt(index);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    background: Container(color: Colors.red),</span><br><span class="line">    secondaryBackground: Container(color: Colors.blue),</span><br><span class="line">    child: ListTile(</span><br><span class="line">      leading: Text(item.published.toString()),</span><br><span class="line">      title: Text(item.title.toString()),</span><br><span class="line">      onTap: () =&gt; &#123;_launchURL(item.id.toString())&#125;,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>background</code> が右スワイプ時の色、<code>secondaryBackground</code>が左スワイプ時の色です。</p><p><code>onDismissed</code> でスワイプ時のアクションを決められます。今回はスワイプされたらリストから除外するシンプルな実装をあげます。</p><p>動かしてみると以下のような使い勝手です。</p><img src="/images/20210514a/スワイプ.gif" alt="スワイプ動作イメージ" wight="469" height="842" loading="lazy"><p>気持ち良いですね…！！</p><p>デモ上はタイトルだけで判断して捨てていますが、本来はクリックして記事を一読してからスワイプするイメージです。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>RSSを読み込んでスワイプで記事を管理できるシンプルなリーダーを作りました。</p><p>今回はフューチャー技術ブログのみを対象としましたが、他のお気に入りのサイトを追加したり、左右のスワイプごとに別の機能を付けたり（後で読むとか）、新着を通知させたり色々アイデアを実装させてお楽しみいただけると幸いです。</p><p>初めてのFlutterでしたが、大きなハマりもなくレイアウトをXMLではなく、コードで記載することは新鮮でした。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の5日目でした。次は越島さんの「FlutterでMONETマーケットプレイスAPIを使ってみた」です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Group（TIG）は、「最先端、且つ先進的なテクノロジーのプロフェッショナル集団」、「プロジェクト品質と生産性の向上」、「自社サービス事業の立ち上げ」を主なミッションとする、技術部隊です。DXユニットとはデジタルトランスフォーメーションを推進するチームで、IoTやらMaaSなどのテクノロジーカットでビジネス転換を行っています。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
    <category term="RSS" scheme="https://future-architect.github.io/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>Flutterレイアウト入門</title>
    <link href="https://future-architect.github.io/articles/20210513b/"/>
    <id>https://future-architect.github.io/articles/20210513b/</id>
    <published>2021-05-12T15:00:01.000Z</published>
    <updated>2021-05-14T05:40:11.717Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210510a/">Dart/Flutter連載</a>の4記事目は、Flutterでの画面レイアウトの入門です。</p><p>Flutterを触ったことがない方にも「こんな感じで画面が作れるんだな」というイメージがつくようお伝えできればと思います。また、私がつまずいたWidgetのサイズ調整についても記載します。</p><h2 id="Scaffold-Widgetでベースとなるレイアウト構造を作成"><a href="#Scaffold-Widgetでベースとなるレイアウト構造を作成" class="headerlink" title="Scaffold Widgetでベースとなるレイアウト構造を作成"></a>Scaffold Widgetでベースとなるレイアウト構造を作成</h2><p>FlutterのUIは、Widgetと呼ばれる部品を組み合わせて構築します。</p><p>画面のベースとなるレイアウト構造は、Scaffold Widgetで定義します。Scaffold Widgetには、appBar, body, botomNavigationBar等のプロパティが用意されており、それぞれに各Widgetを配置することでページ上部のAppBarや下部のナビゲーションバー等を簡単に配置できます。ページのメインコンテンツはbodyに定義します。</p><p>FAB(フローティングアクションボタン)と呼ばれる、スマホアプリのUIでよく見かける画面上の浮いているようなボタンについても、Scaffoldプロパティに用意されており、配置位置も簡単に定義できます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">  <span class="comment">//　AppBarの表示</span></span><br><span class="line">  appBar: AppBar(</span><br><span class="line">    title: Text(<span class="string">&#x27;Flutter Demo&#x27;</span>),</span><br><span class="line">  ),</span><br><span class="line">  <span class="comment">// ページのメインコンテンツ</span></span><br><span class="line">  body: ...,</span><br><span class="line">  <span class="comment">// フッターのナビゲーション</span></span><br><span class="line">  bottomNavigationBar: ...,</span><br><span class="line">  <span class="comment">// FAB(フローティングアクションボタン)</span></span><br><span class="line">  floatingActionButton: ...,</span><br><span class="line">  <span class="comment">// FABの位置</span></span><br><span class="line">  floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/images/20210513b/c319f243-8175-36f6-f541-de4ec59fb7d9.png" alt="フローティングアクションボタン" class="img-small-size" width="428" height="704"><h2 id="Widgetの配置に必須のColumn-Row-Widget"><a href="#Widgetの配置に必須のColumn-Row-Widget" class="headerlink" title="Widgetの配置に必須のColumn, Row Widget"></a>Widgetの配置に必須のColumn, Row Widget</h2><p>Widgetを垂直に並べたいときは、Column Widget, 水平に並べたいときはRow Widgetを用いて配置します。メイン軸方向にどのように配置するかを<code>mainAxisAlignment</code>プロパティで定義することができ、Column Widgetの場合は垂直方向、Row Widgetの場合は水平方向を指します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">body: Column(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.start, <span class="comment">// ここで配置の仕方を定義</span></span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Card(color: Colors.yellow, child: Text(<span class="string">&#x27;text01&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>))),</span><br><span class="line">    Card(color: Colors.teal, child: Text(<span class="string">&#x27;text01&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>))),</span><br><span class="line">    Card(color: Colors.blueAccent, child: Text(<span class="string">&#x27;text01&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>))),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure><img src="/images/20210513b/b1e35360-8fa9-84dc-8b0f-9df591516120.png" alt="mainAxisAlignmentのstart,center,spaceEvenly設定の表示位置" width="949" height="546" loading="lazy"><h2 id="意外と難しいWidgetのサイズ調整"><a href="#意外と難しいWidgetのサイズ調整" class="headerlink" title="意外と難しいWidgetのサイズ調整"></a>意外と難しいWidgetのサイズ調整</h2><p>Widgetのサイズは、直接的には指定せずにFlutterの自動調整に任せる場合も多く、異なる画面サイズにも柔軟に対応できて便利です。ただし明示的に指定していないため、意図しないサイズになってしまい戸惑うことがよくありました。</p><p>Widgetは、親Widgetから与えられた幅・高さの最大値と最小値をもとに、自身のサイズを決定します。<br><a href="https://flutter.dev/docs/development/ui/layout/constraints">https://flutter.dev/docs/development/ui/layout/constraints</a></p><p>ただし、与えられた最大値・最小値からどのようにサイズを決定するかは、Widgetによって異なり、またWidgetの親子関係によっても変わってきます。各Widgetのサイズ決定については私自身まだ理解できていない部分が多くありますが、一例としてContainer Widgetのサイズの挙動について紹介します。Container Widgetは明示的にサイズを指定することも可能ですが、今回は直接的な指定は行わない場合のサイズの挙動・調整について記載します。</p><h3 id="Container-Widgetのサイズ"><a href="#Container-Widgetのサイズ" class="headerlink" title="Container Widgetのサイズ"></a>Container Widgetのサイズ</h3><p>Container Widgetのサイズは、子要素の有無で違ってきます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子要素がない場合は可能な限り最大サイズになる</span></span><br><span class="line">body: Container(color: Colors.yellow),</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子要素がある場合は子要素に応じた最小限のサイズになる</span></span><br><span class="line">body: Container(color: Colors.yellow, child: Text(<span class="string">&#x27;text&#x27;</span>)),</span><br></pre></td></tr></table></figure><img src="/images/20210513b/914c4dba-d8c4-700c-1aa0-35231a59c4b2.png" alt="mainAxisAlignmentのstart,center,spaceEvenly設定の表示位置" class="img-middle-size" width="1098" height="964" loading="lazy"><h3 id="Column-Widgetでラップした際のContainer-Widgetのサイズ"><a href="#Column-Widgetでラップした際のContainer-Widgetのサイズ" class="headerlink" title="Column Widgetでラップした際のContainer Widgetのサイズ"></a>Column Widgetでラップした際のContainer Widgetのサイズ</h3><p>単純にColumn Widgetでラップした場合は、最小限のサイズになります。</p><p>さらにContainer WidgetをExpanded Widgetでラップすると、メイン軸方向(Columnの場合は垂直方向）にサイズを拡張してくれます。また、Expanded Widgetの<code>Flex</code>プロパティで、各Widgetを均等な大きさにしたり大きさの割合を指定できます。</p><p>垂直方向へのサイズの拡張は、Column Widgetの<code>CrossAxisAlignment</code>プロパティにCrossAxisAlignment.stretchを指定することで可能になります。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Column Widgetのみ</span></span><br><span class="line">body: Column(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Container(color: Colors.yellow, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>))),</span><br><span class="line">    Container(color: Colors.teal, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>))),</span><br><span class="line">  ],</span><br><span class="line">),</span><br><span class="line"></span><br><span class="line"><span class="comment">// Column Widget + Expanded Widget</span></span><br><span class="line">body: Column(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Expanded(flex: <span class="number">1</span>, child: Container(color: Colors.yellow, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>)))),</span><br><span class="line">    Expanded(flex: <span class="number">1</span>, child: Container(color: Colors.teal, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>)))),</span><br><span class="line">  ],</span><br><span class="line">),</span><br><span class="line"></span><br><span class="line"><span class="comment">// Column Widget + Expanded Widget + CrossAxisAlignment.stretch</span></span><br><span class="line">body: Column(</span><br><span class="line">  crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Expanded(flex: <span class="number">1</span>, child: Container(color: Colors.yellow, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>)))),</span><br><span class="line">    Expanded(flex: <span class="number">1</span>, child: Container(color: Colors.teal, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>)))),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure><img src="/images/20210513b/524888ee-5362-c8d3-5260-e01df14a038c.png" alt="mainAxisAlignmentのstart,center,spaceEvenly設定の表示位置" width="1200" height="727" loading="lazy"><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Flutterの画面構築は細かく位置やサイズを指定しなくても、それらしいUIが作れるため、かなりスピーディーに開発ができる印象です。その反面、Widgetのサイズ決定の理解に難しさも感じています。</p><p>今回はレイアウト作成の導入的な記事となりましたが、より理解が進んだ後にWidgetのサイズ決定についても記事化できればと思います。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の4記事目でした。明日は真野さんの<a href="/articles/20210514a/">Flutterで技術ブログRSSリーダー</a>の記事です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210510a/&quot;&gt;Dart/Flutter連載&lt;/a&gt;の4記事目は、Flutterでの画面レイアウトの入門です。&lt;/p&gt;
&lt;p&gt;Flutterを触ったことがない方にも「こんな感じで画面が作れるんだな」というイメージがつくようお伝え</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
    <category term="モバイル" scheme="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>背が高いエンジニアが考えるリモートワーク環境</title>
    <link href="https://future-architect.github.io/articles/20210513a/"/>
    <id>https://future-architect.github.io/articles/20210513a/</id>
    <published>2021-05-12T15:00:00.000Z</published>
    <updated>2021-05-13T00:48:59.471Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210513a/IMG_0030.jpg" alt="おしゃれな自宅デスク画像" width="1200" height="800">※写真は実際の私のデスク環境です<p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤太斉</a>です。<a href="/articles/20210118/">リモートワーク連載</a>の6本目です。</p><p>リモートワークになって以来、私も多くの方と同じようにリモートワーク環境を整えてきました。将来の投資と自分に言い聞かせながらかなり投資してしまいましたが、満足した環境ができたのでこの記事で紹介します。</p><p>そんな私のリモートワーク環境ですが、「自分の体格に合わせる」という他の方とちょっと違う観点で環境構築してみたので、体格が平均から大きく離れている方は、ぜひこの記事を参考にしていただければと思います。この記事は購入したものの紹介もしますが、デスク設計の上で「何故そうしたか」も書いていきます。</p><h2 id="私のプロフィール"><a href="#私のプロフィール" class="headerlink" title="私のプロフィール"></a>私のプロフィール</h2><p>はじめに、私の体格やら住んでいる部屋について書いていきます。</p><ul><li>身長188cmの痩せ型</li><li>10畳1Kのマンション（角部屋なので2面採光）</li><li>駅から徒歩15分</li></ul><h2 id="自宅で環境を整備できる良さ"><a href="#自宅で環境を整備できる良さ" class="headerlink" title="自宅で環境を整備できる良さ"></a>自宅で環境を整備できる良さ</h2><p>会社で自分の環境を整えるとなると、</p><ul><li>キーボード</li><li>マウス</li><li>（モニター）</li></ul><p>くらいかなと思いますが、自宅であればそれに加えて、</p><ul><li>デスク</li><li>椅子</li><li>etc…</li></ul><p>と際限なく環境を整えることができます。特に会社だと制約のあるデスクと椅子についてはオフィスでは一般的な体格に合わせて作られているため、人と極端に体格が違うと負荷も大きくなります。体の負荷を軽減するという意味で仕事環境にまつわる全てを好きな物を用意できるというのは自宅ならではだと思います。</p><h2 id="リモートワークになるに当たって買ったもの一覧"><a href="#リモートワークになるに当たって買ったもの一覧" class="headerlink" title="リモートワークになるに当たって買ったもの一覧"></a>リモートワークになるに当たって買ったもの一覧</h2><p>ここから実際にリモートワークを始めて買ったものを紹介します。まずはじめに一覧です。</p><ul><li>27インチ4Kモニター</li><li>コンデンサーマイク</li><li>Webカメラ</li><li>キーボード2種類</li><li>スタンディングデスク</li><li>オフィスチェア</li><li>PCスタンド</li><li>モニターアーム</li></ul><p>書き上げてみたらほぼフルセット買っていたことに気がついてしまいました笑。</p><h3 id="モニタ"><a href="#モニタ" class="headerlink" title="モニタ"></a>モニタ</h3><p>モニタは27インチの4Kモニターを買いました。会社で4Kモニターを使って以来フルHDに戻れなくなってしまったこと、PCとの接続はThunderbolt1つで、モニターをハブとして使えることから<a href="https://www.amazon.co.jp/gp/product/B085TWLMF9">DELLのモニター</a>を買いました。接続するものが多い方にはハブ、もしくはハブ機能を有するモニターをお勧めします。一度に表示できるコードが多い方が効率面から考えても良いです。<br>お気に入りポイントはケーブル１本でPCとの接続を管理できるところです。プライベート環境もiMacからMacBookに変えてデスク環境を組み直したので、プライベートと仕事をケーブル一つで切り替えできるのはやはり楽です。</p><h3 id="コンデンサーマイク"><a href="#コンデンサーマイク" class="headerlink" title="コンデンサーマイク"></a>コンデンサーマイク</h3><p>カンファレンス運営で声の出演をすることもあり、その時にマイクを買いました。リモートだとカメラの画質よりも声で印象が決まりやすい（と思う）ので、買っておいて良かったと思っています。近頃はもう少し良いマイクに変えても良い気もしてきました。沼ですね。<br>現状使っているマイクは品薄な時に買った7000円くらいのUSBタイプのマイクです。</p><h3 id="Webカメラ"><a href="#Webカメラ" class="headerlink" title="Webカメラ"></a>Webカメラ</h3><p>本来はノートPCのカメラで事足りるので割と悩んだものではありますが、モニターは外部モニター1枚あれば十分なので、PCを閉じて使うために買いました。購入したのは<a href="https://www.amazon.co.jp/gp/product/B07QQR6G5N">Logicoolのカメラ</a>です。<br>Webカメラを導入したことにもいくつか意図はあり、目線の高さにカメラがあることで、</p><ul><li>顔が暗くなりにくい</li><li>カメラを見て話せる（目を見て話す状態に近づけられる）</li></ul><p>といった印象に関わる部分もよりよくすることができます。<br>また、登壇などよりきれいに写したい場合には、Canonの一眼レフを接続して利用いています。</p><h3 id="キーボード2種類"><a href="#キーボード2種類" class="headerlink" title="キーボード2種類"></a>キーボード2種類</h3><p>キーボードは気分転換も込めて2種類を行き来して使っています。使っているのは</p><ul><li>Corne Cherry</li><li>Realforce for Mac</li></ul><p>です。<br>Realforce（アイキャッチ画像参照）は全然買うつもりがなかったのですが、後述するCorne Cherryで失ったファンクションキーなど、本来キーボードが有しているであろうキーが必要な時もあることに気がついたので買いました。使い心地は言うまでもなく最高です。今では、時々入れ替えながら使ってリフレッシュしています。<br><del>最近、比較的キーが揃った分割を買えばいいのではということに気がつきました。</del><br>Corne Cherryを買う（作る）経緯については、昔話があります。</p><p>前職から<a href="https://ergodox-ez.com/">Ergodox</a>という分割キーボードを使っていたので、リモートワークになって以来、家でも継続して使っていました。しかし、会社が自由出社になり、これを持ち運ぶとしても身体への負担が大きいことを感じました（あとキースイッチの音が少々うるさい）。そこで小さい分割キーボードが欲しくなったのですが、既製品では希望に沿うものがなかったのでCorne Cherryを作ることにしました。作った時のことは<a href="https://kaedem-dev.hatenablog.com/entry/2020/11/23/155602">個人ブログ</a>に書いてあるのでぜひ読んでみてください。買ったところはみなさん大好きな<a href="https://yushakobo.jp/">遊舎工房</a>さんです。ちなみに、大きさ比較をしましたが、差は歴然でした。</p><img src="/images/20210513a/IMG_7341.jpg" alt="分割キーボード" width="1200" height="800" loading="lazy"><p>ここで、分割キーボードを使うことと、極端にキーが少ないことについて疑問を感じる方もいると思いますのでそこについての考えを書きます。</p><h4 id="分割キーボードを使うこと"><a href="#分割キーボードを使うこと" class="headerlink" title="分割キーボードを使うこと"></a>分割キーボードを使うこと</h4><p>分割キーボードを使うことは単に「身体のため」と思って使っています。通常のキーボードだと胸が塞がる姿勢になり、猫背になりやすくなります。結果、肩こりなど不調をきたすことにつながります。特に肩幅も少しあったり、体格が大きい方はこの塞ぎ込みがよりキツくなることもあり、私は早々に分割キーボードに手を出しました。初めは全く慣れなくて作業効率ガタ落ちでしたが、今ではなくてはならない仕事のお供になりました。</p><h4 id="キー数が少ないこと"><a href="#キー数が少ないこと" class="headerlink" title="キー数が少ないこと"></a>キー数が少ないこと</h4><p>Ergodoxを使っていた時に思っていたのが「1日1回も押さないキー」があることでした。利用しないところに場所を取られているのは非常にもったいないことですし、先述した出社も重なり、キー数を削る決断をしました。本来必要なキーすらも削っているのですが、良かったことは指を伸ばし切らなくても全部のキーを触れることです。そのため、指が疲れにくくなった気がします。また、Ergodoxを使っていた時に感じていた不要なキーについても見事にクリアされ、押さないキーはなくなりました。</p><h3 id="スタンディングデスク"><a href="#スタンディングデスク" class="headerlink" title="スタンディングデスク"></a>スタンディングデスク</h3><p>これはあまり買うつもりがなかったのですが、座り続けていることのデメリットも叫ばれる中、身体のためと思って買いました。<br>買ったのはこれも有名なFlexiSpotの<a href="https://flexispot.jp/desk/height-adjustable-desks/e3-set.html">E3</a>を買いました。理由としてはFlexiSpotの中で一番高いところまでデスクを上げられるため選びました。午後の眠い時やリフレッシュしたい時にはとても重宝しています。<br>購入の際に、<a href="https://flexispot.jp/desk/height-adjustable-desks/ej2-set.html">EJ2</a>という少し安めなデスクも候補にあり、相当悩みました。最大の悩みポイントは昇降範囲で、購入したE3の方がより高く設定できます。ただ、私でも上限まで使うことがなかったため、よっぽどのことがない限りEJ2の方が選択肢としては良いかもしれません（何より値段と重量が上がることがネックです。。）。<br>FlexiSpotは天板と脚が別売りなのですが、天板も公式から140x70cmの広めのサイズを購入しました。PCを2つおいても余裕が持てるので結果としては良かったです。そして、部屋の中に占めるデスクの圧迫感も増しました。</p><h3 id="オフィスチェア"><a href="#オフィスチェア" class="headerlink" title="オフィスチェア"></a>オフィスチェア</h3><p>オフィスチェアはずっと憧れていたハーマンミラーの<a href="https://store.hermanmiller.co.jp/c/chairs/office_chairs/AS1YA23/AS1YA23HAN265BBRO829112">セイルチェア</a>を買いました。良かったところは</p><ul><li><strong>オシャレ</strong></li><li>ハーマンミラーの中でも比較的安価</li><li>機能が多すぎない</li></ul><p>です。給付金がセイルチェアになりましたが、スタイリッシュなデスクの一助になっています。ハーマンミラーのオフィスチェアの設計で多く使われている、背もたれを前傾にする機能は集中したい時に役立っています。毎日使うものなのでお気に入りの家具として気分を上げてくれるものになりました。</p><h3 id="モニターアーム"><a href="#モニターアーム" class="headerlink" title="モニターアーム"></a>モニターアーム</h3><p>一番こだわりのないところがモニターアームですが、買ってみて納得する良さもありました。</p><ul><li>付属のスタンドより高く設定できる</li><li>デスクにホコリがたまりにくくなった（掃除がしやすい）</li></ul><p>良さを上げるとするとこれくらいですが、ちゃんと使い込めば、モニターの位置を変えることも簡単だというところも良さですが、ほとんど使わない機能なのであまり恩恵を享受していません。</p><p>モニターの位置をしっかり設定できることは大きなメリットがあると考えています。モニターを覗き込む姿勢は、猫背になったり、ストレートネックの原因になると散々言われていることなので、この辺は元々気をつけいていました。また、効率面を考えても広い画面を使いたいので、モニターは必須です。<br>モニターの高さは一般的には目線がモニターの上辺に来るようにと言うのがよく言われているため、私もその高さで設定しています。</p><h3 id="おまけ：マウス"><a href="#おまけ：マウス" class="headerlink" title="おまけ：マウス"></a>おまけ：マウス</h3><p>エンジニアになって初めて買ったのがLogicoolの<a href="https://www.amazon.co.jp/dp/B074Z71C2M">トラックボールマウス</a>ですが、diagrams.netを使うときや、プライベートで写真を編集する時などの細かい作業にはとても向いていました。<br>加えて、Macの操作をより良くするトラックパッドも入れ替えながら使っています。トラックパッドについては<a href="/articles/20210219/">富山さんの記事</a>でも触れているのでぜひ見てください。</p><h2 id="完成形"><a href="#完成形" class="headerlink" title="完成形"></a>完成形</h2><p>そして、（今のところの）完成形を撮影しました。</p><img src="/images/20210513a/IMG_0854.JPG" alt="おしゃれな自宅デスクの完成形" width="1200" height="800" loading="lazy"><p>どこかのプロデューサーさんみたいなデスクになっていますが、好きなものに囲まれながら作り込んだデスクなので、楽しく仕事できています。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>家で環境を作り込める、ということは、好きなものを取り入れることはもちろんですが、自分の身体に合わせて設計できることだと思っているので、並外れて体格の異なる方はぜひ身体を合わせずに、道具を自身に合わせて健康に働けるようにしましょう！</p><p><a href="/articles/20210118/">リモートワーク連載</a>に他のリモートワーク環境構築例がありますので、探してもらえると嬉しいです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210513a/IMG_0030.jpg&quot; alt=&quot;おしゃれな自宅デスク画像&quot; width=&quot;1200&quot; height=&quot;800&quot;&gt;
※写真は実際の私のデスク環境です

&lt;p&gt;こんにちは。TIGの&lt;a href=&quot;https://twit</summary>
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>Goのサーバーの管理画面をFlutter Webで作ってみるための調査</title>
    <link href="https://future-architect.github.io/articles/20210512a/"/>
    <id>https://future-architect.github.io/articles/20210512a/</id>
    <published>2021-05-11T15:00:00.000Z</published>
    <updated>2021-05-14T05:17:15.427Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210510a/">Dart/Flutter連載</a>の3本目はFlutter Webを紹介します。</p><p>Flutter 2になって、Web向けに出力する機能もStableになりました。</p><p>Flutter for Webは標準のHTMLにするHTMLレンダラーと、CanvasKitレンダラーと2種類あります。後者はSkiaという2DグラフィックスのライブラリをWebAssembly化したものを使います。Skiaはウェブ向けではないFlutterでも使っているため、モバイルとの互換性の高さが期待されます。</p><p>現状では明示的に指定しなければauto（モバイルはHTMLレンダラー、PCはCanvasKitレンダラー）になりますが、明示的に指定もできます。これらの違いはまた後で触れますが、せっかくウェブが出せるようになったので、ウェブフロントエンドをFlutterで作ってみるための色々調査をしてみました。React/Vue/Angularを一通り業務で使ってみましたし、フロントエンド開発周りもここ5-6年ぐらい、書き方が違うぐらいでやっていることはあんまり変わらなくて個人的に飽きてきたこともあります。</p><h1 id="ウェブアプリといえばRouter"><a href="#ウェブアプリといえばRouter" class="headerlink" title="ウェブアプリといえばRouter"></a>ウェブアプリといえばRouter</h1><p>SPAで管理画面を作っていく上で、最低限必要なことはRouterと呼ばれる機能です。VueやAngularだと標準で用意されています。Reactは標準はないですが、使うときはだいたい何かしら入れるでしょう。</p><p>FlutterはデフォルトでNavigotorというクラスがあります。以下のページがめちゃくちゃまとまっていますので、詳細はこちらをご覧ください。</p><p><a href="https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade">https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade</a></p><p>ウェブアプリケーションユーザー目線で、いくつか知っておくべきポイントがあります。</p><ul><li>1.0と2.0と大きく2種類に分かれる（ここでは2を扱います）ので、ウェブを検索して出てきた内容を参考にするには利用バージョンと同じかどうか注意が必要</li><li>サンプルの一番シンプルな書き方だと、URLのパスを決めるのではなく、その場でウィジェットを上書きする（pushする）モードで、ウェブのよくある挙動とは違う動きになる</li><li>named navigator routesという、ウェブのRouterに近い、パスのルールとその時の表示するウィジェットのマッピングを定義するモードもある（ネストもできる）</li><li>named navigator routesでデフォルトはハッシュを挟んだパスになる（AngularでいうところのHashLocationStrategy）が、PathLocationStrategyも設定可能</li><li>パスの一部をパラメータとして利用しようとすると面倒</li></ul><p>あとは次のあたりも僕がFlutterを学び始めたときにちょっと悩んだポイントです。</p><ul><li>statefulとstatelessでウィジェットを作り分ける必要がある</li><li>buildメソッドはReactのrender</li><li>builderという言葉はVueのslot的な、特定のライフサイクルで呼ばれてビューの一部を返す何か←某握力王の人に教えてもらいました</li><li>debug(）関数でconsole.logに出力できる</li></ul><h2 id="最小のRouter"><a href="#最小のRouter" class="headerlink" title="最小のRouter"></a>最小のRouter</h2><p>次のコードが↑に書いてあるnamed navigator routesを使った最小のコードです。2つの画面の間の遷移をします。まず、ルートのMaterialAppに、routesの引数でURLとページのマップを定義します。あとは、Navigatorクラスを使って、pushNamed()メソッドや、pop()メソッドを使ってページ遷移ができます。よくあるSPAと変わらないですね。</p><figure class="highlight dart"><figcaption><span>lib/main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  configureApp();</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span>: (context) =&gt; HomeScreen(),</span><br><span class="line">        <span class="string">&#x27;/details&#x27;</span>: (context) =&gt; DetailScreen(),</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: TextButton(</span><br><span class="line">          child: Text(<span class="string">&#x27;View Details&#x27;</span>),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            Navigator.pushNamed(context, <span class="string">&#x27;/details&#x27;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: TextButton(</span><br><span class="line">          child: Text(<span class="string">&#x27;Pop!&#x27;</span>),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            Navigator.pop(context);</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらができあがりです。Android Studioで作った環境でウェブで表示してみたものになります。</p><img src="/images/20210512a/スクリーンショット_2021-05-11_8.49.21.png" alt="Routerのデモをウェブ表示" width="1200" height="1659"  loading="lazy"><p>なお、URLの一部がエンティティのIDとしてパスパラメータとして使いたい場合は、RouteInformationParserを継承したクラスを作ってアプリに渡す必要があります。上記のmediumのページの中でRouteInformationParserで検索して見てみれば書き方がわかりますが、面倒です。ここはそのうち改善されるのでは、ということを期待しています。</p><h2 id="ハッシュがURLに入ってしまうのをやめる"><a href="#ハッシュがURLに入ってしまうのをやめる" class="headerlink" title="ハッシュがURLに入ってしまうのをやめる"></a>ハッシュがURLに入ってしまうのをやめる</h2><p>PathLocationStrategy相当への切り替え方法については次のページで説明されています。</p><p><a href="https://flutter.dev/docs/development/ui/navigation/url-strategies">https://flutter.dev/docs/development/ui/navigation/url-strategies</a></p><p>まず、依存パッケージにflutter_web_pluginsを追加します。</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter_web_plugins:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br></pre></td></tr></table></figure><p>次に、main関数の中で、URLのルールを変更します。↑のページには、Web向けとそれ以外向けでルールを切り替える方法も紹介されていますが、ここではウェブでしか使わない前提でシンプルにmainに書いてしまっています。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_web_plugins/flutter_web_plugins.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    setUrlStrategy(PathUrlStrategy());</span><br><span class="line"></span><br><span class="line">    runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでパスにハッシュが入ることがなくなりました。</p><img src="/images/20210512a/スクリーンショット_2021-05-11_8.56.50.png" alt="URLにハッシュが入っていないデモ画面" width="1006" height="260"  loading="lazy"><h1 id="Goのアプリケーションに組み込む"><a href="#Goのアプリケーションに組み込む" class="headerlink" title="Goのアプリケーションに組み込む"></a>Goのアプリケーションに組み込む</h1><p>Goで作ったサーバーの管理画面をFlutterで作る前提で、go:embedでアプリにバンドルしてみます。以前、本技術ブログでVueで行ったことをFlutterでもやってみます。</p><p><a href="https://future-architect.github.io/articles/20210408/">https://future-architect.github.io/articles/20210408/</a></p><p>まずビルドします。<a href="https://recruit.gmo.jp/engineer/jisedai/blog/flutter2-canvaskit-performance/">CanvasKitのほうが描画性能は高いとのこと</a>ですが、たぶん、レンダラーはHTMLが良いかと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter build web --web-renderer=html --source-maps</span><br></pre></td></tr></table></figure><p>ビルドオプションには–releaseをつけることができます。つけるとビルドは遅くなります（M1 MacBook Proで20秒ほど。つけないと0.3秒）。</p><p>ビルド結果は<code>build/web</code>フォルダに出力されます。</p><p>一見、CanvasKitもHTMLもファイルサイズがほとんど変わらない（3.4MBと3.5MB)のですが、CanvasKitでビルドすると、CanvasKitの本体のwasmのビルド済みのファイルをネット越しにダウンロードしているようです。これが2MBぐらいあるみたいですし、もしかしたらプロキシが必要なイントラネットで利用とか考えると、外部依存はないに越したことはありません。</p><figure class="highlight js"><figcaption><span>main.dart.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14151</span>:$<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;https://unpkg.com/canvaskit-wasm@0.25.1/bin/&quot;</span>+a&#125;,</span><br><span class="line"><span class="number">41865</span>:s($,<span class="string">&quot;ae9&quot;</span>,<span class="string">&quot;a2x&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;https://unpkg.com/canvaskit-wasm@0.25.1/bin/canvaskit.js&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>Goのファイルをいくつか作成します。go:embedが、今いるフォルダよりも子供のフォルダしか読み込めないので、Flutterのルートのフォルダでgo mod init flutter_with_goを叩いて、go.modを作成します。</p><p>ファイルを参照するgo:embedは次のように書きます。</p><figure class="highlight go"><figcaption><span>asest.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> flutter_with_go</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;embed&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed build/web/*</span></span><br><span class="line"><span class="keyword">var</span> assets embed.FS</span><br></pre></td></tr></table></figure><p>NotFoundHandlerハンドラーは<a href="https://future-architect.github.io/articles/20210408/">前回の記事のファイルの配信のハンドラー</a>で紹介したコードとほぼ同じです。ファイルの置き場をプロジェクトルートにしてみたのと、パスがbuild/webになったぐらいです。main関数もほぼ以前と同じです。</p><p>無事、GoでもFlutter Webのビルド結果をホストできました。</p><img src="/images/20210512a/スクリーンショット_2021-05-11_18.15.39.png" alt="GoでもFlutter Webのビルド結果をホストしたデモ表示" width="1200" height="1398"  loading="lazy"><p>今回のフォルダ構成は次の通りです。Goのコードはserverみたいなサブパッケージを作って入れてもよかったかも。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── android</span><br><span class="line">├── asset.go</span><br><span class="line">├── cmd</span><br><span class="line">│   └── flutter_with_go</span><br><span class="line">│       └── main.go</span><br><span class="line">├── flutter_with_go.iml</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── ios</span><br><span class="line">├── lib</span><br><span class="line">│   └── main.dart</span><br><span class="line">├── notfound.go</span><br><span class="line">├── pubspec.lock</span><br><span class="line">├── pubspec.yaml</span><br><span class="line">└── web</span><br><span class="line">    ├── favicon.png</span><br><span class="line">    ├── icons</span><br><span class="line">    │   ├── Icon-192.png</span><br><span class="line">    │   └── Icon-512.png</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── manifest.json</span><br></pre></td></tr></table></figure><h1 id="サーバーへのHTTPアクセス"><a href="#サーバーへのHTTPアクセス" class="headerlink" title="サーバーへのHTTPアクセス"></a>サーバーへのHTTPアクセス</h1><p>静的HTMLを表示するだけでは管理画面にはなりませんので、HTTPアクセスを行ってみます。より高度なサービスになると、昨日のエントリーの<a href="https://future-architect.github.io/articles/20210511b/">Swaggerを使ったサーバーアクセス</a>や、GraphQLやgRPCを使いたくなるかもしれません。今時なプロトコルはどれでも利用できるのも、Flutterの良いところですが、今回はシンプルなHTTPアクセスをします。</p><p>題材としては今話題沸騰のイケてるWeb APIである<a href="https://kenall.jp/">ケンオール</a>にアクセスしてみます。</p><img src="/images/20210512a/スクリーンショット_2021-05-11_20.34.54.png" alt="ケンオールのサイト画面" width="1200" height="952"  loading="lazy"><p>ケンオールはアカウント登録するとAPIキーが発行され、これを使ってアクセスします。サンプルと言えど、APIキーはフロントエンドに置きたくないので、サーバー側で中継することとします。</p><h2 id="サーバー側の実装"><a href="#サーバー側の実装" class="headerlink" title="サーバー側の実装"></a>サーバー側の実装</h2><p><code>/api/postal/&#123;code&#125;</code>にアクセスしたら、住所情報を返すAPIをGoで実装しました。APIキーは環境変数で渡します。Vue.jsのときのサンプルの差分だけ表示します。</p><figure class="highlight go"><figcaption><span>cmd/flutter_with_go/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> Env <span class="keyword">struct</span> &#123;</span><br><span class="line">Port         <span class="keyword">uint16</span> <span class="string">`envconfig:&quot;PORT&quot; default:&quot;8000&quot;`</span></span><br><span class="line">KenAllAPIKey <span class="keyword">string</span> <span class="string">`envconfig:&quot;KENALL_API_KEY&quot; required:&quot;true&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newHandler</span><span class="params">(apiKey <span class="keyword">string</span>)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">router := chi.NewRouter()</span><br><span class="line"></span><br><span class="line">router.Route(<span class="string">&quot;/api&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(r chi.Router)</span></span> &#123;</span><br><span class="line">r.Get(<span class="string">&quot;/postal/&#123;code&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">code := chi.URLParam(r, <span class="string">&quot;code&quot;</span>)</span><br><span class="line">req, _ := http.NewRequestWithContext(r.Context(), <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.kenall.jp/v1/postalcode/&quot;</span>+code, <span class="literal">nil</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Token &quot;</span>+apiKey)</span><br><span class="line">res, err := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">io.Copy(w, res.Body)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.NotFound(flutter_with_go.NotFoundHandler)</span><br><span class="line"><span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// これの前後は同じ</span></span><br><span class="line">server := &amp;http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:&quot;</span> + strconv.FormatUint(<span class="keyword">uint64</span>(env.Port), <span class="number">10</span>),</span><br><span class="line">Handler: newHandler(env.KenAllAPIKey),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ビルドしたら試しにcurlでこのサーバーAPIを叩いてみます。バッチリですね(長いのでレスポンスは短くしてます)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">% curl http://localhost:8000/api/postal/1410032</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2021-04-30&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;postal_code&quot;</span>: <span class="string">&quot;1410032&quot;</span>,</span><br><span class="line">      <span class="string">&quot;prefecture_kana&quot;</span>: <span class="string">&quot;トウキョウト&quot;</span>,</span><br><span class="line">      <span class="string">&quot;city_kana&quot;</span>: <span class="string">&quot;シナガワク&quot;</span>,</span><br><span class="line">      <span class="string">&quot;town_kana&quot;</span>: <span class="string">&quot;オオサキ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;prefecture&quot;</span>: <span class="string">&quot;東京都&quot;</span>,</span><br><span class="line">      <span class="string">&quot;city&quot;</span>: <span class="string">&quot;品川区&quot;</span>,</span><br><span class="line">      <span class="string">&quot;town&quot;</span>: <span class="string">&quot;大崎&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="フロント側の実装"><a href="#フロント側の実装" class="headerlink" title="フロント側の実装"></a>フロント側の実装</h2><p>フロント側からはサーバーアクセスをさせたいと思います。状態をもつのでstatefulなウィジェットとします。</p><figure class="highlight dart"><figcaption><span>lib/main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;KenAll Sample&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: KenAll(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KenAll</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _KenAllState createState() =&gt; _KenAllState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実サーバーアクセスと表示を行う部分はこちらです。フィールドの入力が7文字になったらサーバーアクセスを行い、取得してきた情報をStateに入れています。</p><figure class="highlight dart"><figcaption><span>lib/main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_KenAllState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">KenAll</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _formKey = GlobalKey&lt;FormState&gt;();</span><br><span class="line">  <span class="built_in">String</span> prefecture = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> city = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> town = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> koaza = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> kyoto_street = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> building = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> floor = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Form(</span><br><span class="line">      key: _formKey,</span><br><span class="line">      child: Column(</span><br><span class="line">        children: [</span><br><span class="line">          TextFormField(</span><br><span class="line">            decoration: InputDecoration(</span><br><span class="line">              filled: <span class="keyword">true</span>,</span><br><span class="line">              hintText: <span class="string">&#x27;Enter a postal code...&#x27;</span>,</span><br><span class="line">              labelText: <span class="string">&#x27;Postal Code&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">            onChanged: (value) <span class="keyword">async</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (value.length == <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(<span class="built_in">Uri</span>.parse(<span class="string">&#x27;/api/postal/<span class="subst">$&#123;value&#125;</span>&#x27;</span>));</span><br><span class="line">                debugPrint(response.body);</span><br><span class="line">                <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                  <span class="keyword">final</span> json = jsonDecode(response.body);</span><br><span class="line">                  <span class="keyword">final</span> body = json[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>];</span><br><span class="line">                  <span class="built_in">print</span>(body);</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    prefecture = body[<span class="string">&#x27;prefecture&#x27;</span>];</span><br><span class="line">                    city = body[<span class="string">&#x27;city&#x27;</span>];</span><br><span class="line">                    town = body[<span class="string">&#x27;town&#x27;</span>];</span><br><span class="line">                    koaza = body[<span class="string">&#x27;koaza&#x27;</span>];</span><br><span class="line">                    kyoto_street = body[<span class="string">&#x27;kyoto_street&#x27;</span>];</span><br><span class="line">                    building = body[<span class="string">&#x27;building&#x27;</span>];</span><br><span class="line">                    floor = body[<span class="string">&#x27;floor&#x27;</span>];</span><br><span class="line">                  &#125;);</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                prefecture = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                city = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                town = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                koaza = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                kyoto_street = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                building = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                floor = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          Expanded(</span><br><span class="line">            child:  ListView(</span><br><span class="line">              children: [</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Prefecture&#x27;</span>),</span><br><span class="line">                  title: Text(prefecture),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;City&#x27;</span>),</span><br><span class="line">                  title: Text(city),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Town&#x27;</span>),</span><br><span class="line">                  title: Text(town),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Koaza&#x27;</span>),</span><br><span class="line">                  title: Text(koaza),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Kyoto Street&#x27;</span>),</span><br><span class="line">                  title: Text(kyoto_street),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Building&#x27;</span>),</span><br><span class="line">                  title: Text(building),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Floor&#x27;</span>),</span><br><span class="line">                  title: Text(floor),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このHTTPアクセスには外部パッケージが必要なため、pubspec.yamlとHTTPリクエストを送っているコードへのimportの追加を行いま。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line"> http: ^0.13.3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#39;package:http&#x2F;http.dart&#39; as http;</span><br></pre></td></tr></table></figure><p>無事動いたようです。</p><img src="/images/20210512a/スクリーンショット_2021-05-11_22.32.50.png" alt="ケンオールAPIを利用したFlutter画面" width="1200" height="1371"  loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>そろそろReact/Vue/Angularに飽きてきたかも？な人の新たなおもちゃとしてFlutter Webの紹介をしました。機能的には以下の3つを紹介しました</p><ul><li>Router周り</li><li>ビルドした成果物がどうなっていて他の言語(Go)のサーバーにどう組み込めばいいのか</li><li>サーバーへのHTTPアクセス</li></ul><p>モバイルアプリ開発案件じゃなくてもFlutterができてしまうので、スカンクワークスにぴったりですね。用途が広くていつの間にかシェアを広げていた黎明期のGoと同じように、上司に内緒でこっそり導入に最適です。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の3記事目でした。次回は鶴巻さんの<a href="/articles/20210513b/">Flutterレイアウト入門</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210510a/&quot;&gt;Dart/Flutter連載&lt;/a&gt;の3本目はFlutter Webを紹介します。&lt;/p&gt;
&lt;p&gt;Flutter 2になって、Web向けに出力する機能もStableになりました。&lt;/p&gt;
&lt;p&gt;Flutter f</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="SPA" scheme="https://future-architect.github.io/tags/SPA/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
    <category term="ケンオール" scheme="https://future-architect.github.io/tags/%E3%82%B1%E3%83%B3%E3%82%AA%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>Flutter Swagger統合</title>
    <link href="https://future-architect.github.io/articles/20210511b/"/>
    <id>https://future-architect.github.io/articles/20210511b/</id>
    <published>2021-05-10T15:00:01.000Z</published>
    <updated>2021-05-12T08:41:10.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の2記事目です。</p><p>はじめまして、TIGの宮崎将太です。</p><p>突然ですがみなさん、Swagger使いたいですよね。当社でもGo言語などでSwaggerを用いてREST APIサーバ/クライアントコードを生成する機会が増えています。</p><p>たまたま Flutter+Rails でアプリケーション構築をする機会があったので、今回Flutterのみに着目してSwagger(OpenAPISpec)を使用する方法をコード付きで解説していきます。(Railsは需要があったら書こうと思いますので、SNSでリアクションもらえるとです！)</p><h1 id="Swaggerとは？"><a href="#Swaggerとは？" class="headerlink" title="Swaggerとは？"></a>Swaggerとは？</h1><p>Swagger(OpenAPISpec)とはREST API仕様をyamlやjsonベースで定義できるフォーマットを定めたツールで、定義書を書くとAPI仕様書やサーバ、クライアントコードを生成できちゃう優れものです。</p><p>2系、3系いろいろありますが、今回はエコシステムが充実している2系を使用していきます。</p><p>Swaggerの詳しい説明は、敬愛する武田さんが以前記載してくださっているので、そちらをチェックしてください。m(__)m</p><p><a href="https://future-architect.github.io/articles/20191008/">https://future-architect.github.io/articles/20191008/</a></p><h1 id="0からクライアントコード実装までやってみる"><a href="#0からクライアントコード実装までやってみる" class="headerlink" title="0からクライアントコード実装までやってみる"></a>0からクライアントコード実装までやってみる</h1><p>百聞は一見に如かず。</p><p>0の状態からクライアントコード実装までやってみます。</p><p>なお、flutter/dartはインストール済みの前提として進めます。まだの方は<a href="https://flutter.dev/docs/get-started/install">公式</a>にインストール方法がありますので、準備してからやってみてください。</p><p>各バージョン情報は以下の通りです。</p><ul><li>開発機OS: Mac Catalina</li><li>Flutter: 2.0.4</li><li>Dart: 2.12.2</li><li>Swagger: 2.0</li></ul><h2 id="openapi-generatorインストール"><a href="#openapi-generatorインストール" class="headerlink" title="openapi-generatorインストール"></a>openapi-generatorインストール</h2><p>後ほどSwaggerからコードを生成するので、まずは生成ツールである<code>openapi-generator</code>をインストールします。</p><p>生成ツールはjar、dockerなどいろいろな形式で提供されていますが、今回は楽にHomebrew経由でインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openapi-generator</span><br></pre></td></tr></table></figure><p>その他の形式については下記参考に導入してください。<br><a href="https://openapi-generator.tech/docs/installation/">https://openapi-generator.tech/docs/installation/</a></p><h2 id="Flutterプロジェクト作成"><a href="#Flutterプロジェクト作成" class="headerlink" title="Flutterプロジェクト作成"></a>Flutterプロジェクト作成</h2><p>ツール導入が完了したので、プロジェクトを作成。<br><code>flutter_swagger</code>という名称でプロジェクトを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create flutter_swagger</span><br></pre></td></tr></table></figure><p>以下のようなプロジェクトが生成されるはずです。</p><p>あくまでAPIリクエスト実行までを実装するので、今回いじるのは<code>pubspec.yaml</code>と<code>lib/main.dart</code>のみです。</p><p>※Flutter基本的なディレクトリ構造に関しての説明は今回は割愛します。</p><img src="/images/20210511b/image.png" alt="ディレクトリ構成" width="580" height="758" loading="lazy"><h2 id="swagger-yaml配置"><a href="#swagger-yaml配置" class="headerlink" title="swagger.yaml配置"></a>swagger.yaml配置</h2><p>プロジェクト作成が完了したので、プロジェクトルートに<code>swagger.yaml</code>を作成します。<br>swaggerはヘルスチェックに対して200OKを返すのみの簡単なもの。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">&quot;2.0&quot;</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">&quot;api&quot;</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;0.0.1-SNAPSHOT&quot;</span></span><br><span class="line"><span class="comment"># host: &quot;localhost:8080&quot;</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">/api/v1</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">http</span></span><br><span class="line"><span class="attr">consumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">System</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;システム共通機能&quot;</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/health:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">System</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">OK</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&quot;#/definitions/health&quot;</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">health:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">enum:</span> [<span class="string">OK</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="APIクライアントコード生成"><a href="#APIクライアントコード生成" class="headerlink" title="APIクライアントコード生成"></a>APIクライアントコード生成</h2><p><code>swagger.yaml</code>の配置が終わったので<code>openapi-generator</code>でAPIクライアントコードを生成します。</p><p>dartのクライアントコードはパッケージ形式で生成されるので、<code>lib</code>配下には生成せず別ディレクトリに生成（<code>client</code>配下）し、後ほどimportします。</p><p>terminalにて以下を実行してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openapi-generator generate -i ./swagger.yaml -g dart -o ./client</span><br></pre></td></tr></table></figure><p>各オプションは以下の通りです。</p><ul><li><code>i</code>: swagger.yamlへのパス</li><li><code>g</code>: 生成コードの形式(≒言語)を指定します。様々な形式での生成ができるので以下参考にしてください。（dartも別形式である<code>dart-dio</code>を指定可能。）<br><a href="https://openapi-generator.tech/docs/generators/">https://openapi-generator.tech/docs/generators/</a></li><li><code>o</code>: 生成コードの出力先パス</li></ul><p>クライアントコードの生成が完了すると、以下のように<code>client</code>配下に別パッケージが確認できます。</p><p>※コンパイルエラーが発生している場合は<code>client</code>配下で<code>flutter pub get</code>を実行して依存ライブラリを解決してください。</p><img src="/images/20210511b/image_2.png" alt="openapi-generatorでの生成先ディレクトリ" width="554" height="1102"  loading="lazy"><p>主たる生成コードの役割は以下の通りです。</p><ul><li><code>lib/api/xxx_api.dart</code>: swaggerの<code>tag</code>ごとに生成されます。APIレスポンスのモデルバインド等を実行するAPIクライアントラッパーが定義されます。</li><li><code>lib/auth/xxx.dart</code>: 認証系の生成コードです。APIキー認証、basic認証、Bearer認証、OAuth認証が可能。今回は使用しません。</li><li><code>lib/model/xxx.dart</code>: swaggerの<code>definition</code>ディレクティブで定義するAPIリクエスト/レスポンスがモデルクラスとして生成されます。</li><li><code>lib/api_client.dart</code>: APIクライアントが定義されます。</li></ul><h2 id="openapiパッケージの導入"><a href="#openapiパッケージの導入" class="headerlink" title="openapiパッケージの導入"></a>openapiパッケージの導入</h2><p>生成されたコードは<code>openapi</code>という名称のパッケージになっているので、プロジェクトルートの<code>pubspec.yaml</code>にて依存定義を記載します。</p><p>以下、最後2行を<code>pubspec.yaml</code>に記載後、プロジェクトルートにて<code>flutter pub get</code>を実行してください。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The following adds the Cupertino Icons font to your application.</span></span><br><span class="line">  <span class="comment"># Use with the CupertinoIcons class for iOS style icons.</span></span><br><span class="line">  <span class="attr">cupertino_icons:</span> <span class="string">^1.0.2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 以下2行追記</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./client/</span></span><br></pre></td></tr></table></figure><h2 id="APIリクエスト実行"><a href="#APIリクエスト実行" class="headerlink" title="APIリクエスト実行"></a>APIリクエスト実行</h2><p>ここまででようやくAPIリクエストを実行する準備が整いました。</p><p>あとは通常通り<code>openapi</code>パッケージをimportし、<code>main.dart</code>など任意の箇所にコーディングするだけです。</p><p>以下、参考コードになります。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:openapi/api.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ① ベースとなるAPIクライアント生成</span></span><br><span class="line"><span class="keyword">var</span> client = ApiClient(basePath: <span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line"><span class="comment">// ヘッダを追加したい場合はクライアントに設定可能</span></span><br><span class="line">client.addDefaultHeader(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② APIクライアントラッパーを生成</span></span><br><span class="line"><span class="comment">// APIレスポンスをモデルに変換してくれる</span></span><br><span class="line"><span class="keyword">var</span> api = SystemApi(client);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③ レスポンスボディのみが欲しい場合は$&#123;パス名+HTTPメッソド名&#125;のメソッドをcall</span></span><br><span class="line">Health health = <span class="keyword">await</span> api.healthGet();</span><br><span class="line"><span class="built_in">print</span>(health.value); <span class="comment">// =&gt; OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ④ HTTPステータスや、その他ヘッダ情報が欲しい場合は$&#123;パス名+HTTPメッソド名&#125;WithHttpInfoのメソッドをcall</span></span><br><span class="line">Response res = <span class="keyword">await</span> api.healthGetWithHttpInfo();</span><br><span class="line"><span class="built_in">print</span>(res.statusCode); <span class="comment">// =&gt; 200</span></span><br><span class="line"><span class="built_in">print</span>(res.headers); <span class="comment">// =&gt; HTTPヘッダーMap</span></span><br><span class="line"><span class="built_in">print</span>(res.body); <span class="comment">// =&gt; OK</span></span><br></pre></td></tr></table></figure><ol><li>ベースとなるAPIクライアント生成<br><code>ApiClient</code>をインスタンス化しています。アクセスの設定や共通ヘッダを実装したい場合は此処に実装することになります。<br><code>ApiClient</code>の定義は<code>client/lib/api_client.dart</code>に生成されます。</li><li>APIクライアントラッパーを生成<br>swaggerの<code>tag</code>ごとに生成されるクラスです。APIレスポンスのモデルへバインド等を実行します。swaggerの<code>path</code>一つにつき後述の3と4の2メソッドが生成されます。クラス定義は<code>client/lib/api/xxx_api.dart</code>に生成されます。</li><li>リクエスト発行（レスポンスボディのみが欲しい場合）<br>単純にレスポンスボディのみが欲しい場合は<code>$&#123;パス名+HTTPメッソド名&#125;</code>のメソッドをcallします。（この場合は<code>healthGet</code>）。HTTPステータスが400以上の場合やレスポンスボディがnullの場合は例外(<code>ApiException</code>)をthrowしてくれます。</li><li>リクエスト発行（ヘッダも含めて欲しい場合）<br>③のメソッドではHTTPヘッダ情報が取得できなかったり、HTTPステータスが400以上の場合には例外をthrowしてしまうので、この挙動が嫌な場合は<code>$&#123;パス名+HTTPメッソド名&#125;WithHttpInfo</code>をcallします。（例の場合は<code>healthGetWithHttpInfo</code>）<br>ただし、返り値は<code>http/http.dart</code>パッケージの<code>Response</code>インスタンスとなるので、レスポンスボディのモデルバインドは自前で実装する必要がある点に注意してください。生成コード的には③の中で④をcallするような構造になっています。</li></ol><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>お手軽にSwaggerからAPIクライアントコードの生成&amp;実装ができました。</p><p>今回はスキップしましたが、認証機構も生成されていたり、APIクライアントのカスタマイズも可能なので自動生成コードの中身は是非見てみてください。</p><p>Flutterに関しては他にもいろいろ知見を深めることができたので、別の機会があれば記事にできればと。m(__)m</p><h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><p>需要があるかわかりませんが、サンプルとして載せたSwaggerから生成されたコードを載せておきます。<br>コード見てみたいけど手元に環境がない、なんて方の参考になればと。</p><details><summary>▽Swaggerから生成したコード（クリックで開けます）</summary><div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client/lib/api/sytem_api.dart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> of openapi.api;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemApi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ApiClient apiClient;</span><br><span class="line"></span><br><span class="line">  SystemApi([ApiClient apiClient]) : apiClient = apiClient ?? defaultApiClient;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///  <span class="markdown">with HTTP info returned</span></span></span><br><span class="line">  Future&lt;Response&gt; healthGetWithHttpInfo() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span> postBody;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verify required params are set</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create path and map variables</span></span><br><span class="line">    <span class="built_in">String</span> path = <span class="string">&quot;/health&quot;</span>.replaceAll(<span class="string">&quot;&#123;format&#125;&quot;</span>,<span class="string">&quot;json&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// query params</span></span><br><span class="line">    <span class="built_in">List</span>&lt;QueryParam&gt; queryParams = [];</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; headerParams = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; formParams = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; contentTypes = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> nullableContentType = contentTypes.isNotEmpty ? contentTypes[<span class="number">0</span>] : <span class="keyword">null</span>;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; authNames = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nullableContentType != <span class="keyword">null</span> &amp;&amp; nullableContentType.startsWith(<span class="string">&quot;multipart/form-data&quot;</span>)) &#123;</span><br><span class="line">      <span class="built_in">bool</span> hasFields = <span class="keyword">false</span>;</span><br><span class="line">      MultipartRequest mp = MultipartRequest(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">if</span>(hasFields)</span><br><span class="line">        postBody = mp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> apiClient.invokeAPI(path,</span><br><span class="line">                                             <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                                             queryParams,</span><br><span class="line">                                             postBody,</span><br><span class="line">                                             headerParams,</span><br><span class="line">                                             formParams,</span><br><span class="line">                                             nullableContentType,</span><br><span class="line">                                             authNames);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;Health&gt; healthGet() <span class="keyword">async</span> &#123;</span><br><span class="line">    Response response = <span class="keyword">await</span> healthGetWithHttpInfo();</span><br><span class="line">    <span class="keyword">if</span>(response.statusCode &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ApiException(response.statusCode, _decodeBodyBytes(response));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(response.body != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> apiClient.deserialize(_decodeBodyBytes(response), <span class="string">&#x27;Health&#x27;</span>) <span class="keyword">as</span> Health;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client/lib/model/health.dart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> of openapi.api;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Health</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">The underlying value of this enum member.</span></span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Health._internal(<span class="keyword">this</span>.value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> Health oK_ = <span class="keyword">const</span> Health._internal(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Health fromJson(<span class="built_in">String</span> value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HealthTypeTransformer().decode(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">List</span>&lt;Health&gt; listFromJson(<span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    <span class="keyword">return</span> json == <span class="keyword">null</span> ? <span class="keyword">new</span> <span class="built_in">List</span>&lt;Health&gt;() : json.map((value) =&gt; Health.fromJson(value)).toList();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthTypeTransformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dynamic</span> encode(Health data) &#123;</span><br><span class="line">    <span class="keyword">return</span> data.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Health decode(<span class="built_in">dynamic</span> data) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (data) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;OK&quot;</span>: <span class="keyword">return</span> Health.oK_;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">throw</span>(<span class="string">&#x27;Unknown enum value to decode: <span class="subst">$data</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client/lib/api_client.dart</span></span><br><span class="line"><span class="keyword">part</span> of openapi.api;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryParam</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> value;</span><br><span class="line"></span><br><span class="line">  QueryParam(<span class="keyword">this</span>.name, <span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> basePath;</span><br><span class="line">  <span class="keyword">var</span> client = Client();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; _defaultHeaderMap = &#123;&#125;;</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Authentication&gt; _authentications = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _regList = <span class="built_in">RegExp</span>(<span class="string">r&#x27;^List&lt;(.*)&gt;$&#x27;</span>);</span><br><span class="line">  <span class="keyword">final</span> _regMap = <span class="built_in">RegExp</span>(<span class="string">r&#x27;^Map&lt;String,(.*)&gt;$&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  ApiClient(&#123;<span class="keyword">this</span>.basePath = <span class="string">&quot;http://localhost/api/v1&quot;</span>&#125;) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> addDefaultHeader(<span class="built_in">String</span> key, <span class="built_in">String</span> value) &#123;</span><br><span class="line">     _defaultHeaderMap[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dynamic</span> _deserialize(<span class="built_in">dynamic</span> value, <span class="built_in">String</span> targetType) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (targetType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;String&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;<span class="subst">$value</span>&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;int&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> value <span class="keyword">is</span> <span class="built_in">int</span> ? value : <span class="built_in">int</span>.parse(<span class="string">&#x27;<span class="subst">$value</span>&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;bool&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> value <span class="keyword">is</span> <span class="built_in">bool</span> ? value : <span class="string">&#x27;<span class="subst">$value</span>&#x27;</span>.toLowerCase() == <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;double&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> value <span class="keyword">is</span> <span class="built_in">double</span> ? value : <span class="built_in">double</span>.parse(<span class="string">&#x27;<span class="subst">$value</span>&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Health&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> HealthTypeTransformer().decode(value);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">Match</span> match;</span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">is</span> <span class="built_in">List</span> &amp;&amp;</span><br><span class="line">                (match = _regList.firstMatch(targetType)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> newTargetType = match[<span class="number">1</span>];</span><br><span class="line">              <span class="keyword">return</span> value.map((v) =&gt; _deserialize(v, newTargetType)).toList();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">is</span> <span class="built_in">Map</span> &amp;&amp;</span><br><span class="line">                (match = _regMap.firstMatch(targetType)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> newTargetType = match[<span class="number">1</span>];</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">Map</span>.fromIterables(value.keys,</span><br><span class="line">                  value.values.map((v) =&gt; _deserialize(v, newTargetType)));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">on</span> Exception <span class="keyword">catch</span> (e, stack) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ApiException.withInner(<span class="number">500</span>, <span class="string">&#x27;Exception during deserialization.&#x27;</span>, e, stack);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> ApiException(<span class="number">500</span>, <span class="string">&#x27;Could not find a suitable class for deserialization&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dynamic</span> deserialize(<span class="built_in">String</span> json, <span class="built_in">String</span> targetType) &#123;</span><br><span class="line">    <span class="comment">// Remove all spaces.  Necessary for reg expressions as well.</span></span><br><span class="line">    targetType = targetType.replaceAll(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (targetType == <span class="string">&#x27;String&#x27;</span>) <span class="keyword">return</span> json;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> decodedJson = jsonDecode(json);</span><br><span class="line">    <span class="keyword">return</span> _deserialize(decodedJson, targetType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> serialize(<span class="built_in">Object</span> obj) &#123;</span><br><span class="line">    <span class="built_in">String</span> serialized = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">      serialized = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      serialized = json.encode(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serialized;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We don&#x27;t use a Map&lt;String, String&gt; for queryParams.</span></span><br><span class="line">  <span class="comment">// If collectionFormat is &#x27;multi&#x27; a key might appear multiple times.</span></span><br><span class="line">  Future&lt;Response&gt; invokeAPI(<span class="built_in">String</span> path,</span><br><span class="line">                             <span class="built_in">String</span> method,</span><br><span class="line">                             <span class="built_in">Iterable</span>&lt;QueryParam&gt; queryParams,</span><br><span class="line">                             <span class="built_in">Object</span> body,</span><br><span class="line">                             <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; headerParams,</span><br><span class="line">                             <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; formParams,</span><br><span class="line">                             <span class="built_in">String</span> nullableContentType,</span><br><span class="line">                             <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; authNames) <span class="keyword">async</span> &#123;</span><br><span class="line"></span><br><span class="line">    _updateParamsForAuth(authNames, queryParams, headerParams);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ps = queryParams</span><br><span class="line">      .where((p) =&gt; p.value != <span class="keyword">null</span>)</span><br><span class="line">      .map((p) =&gt; <span class="string">&#x27;<span class="subst">$&#123;p.name&#125;</span>=<span class="subst">$&#123;Uri.encodeQueryComponent(p.value)&#125;</span>&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> queryString = ps.isNotEmpty ?</span><br><span class="line">                         <span class="string">&#x27;?&#x27;</span> + ps.join(<span class="string">&#x27;&amp;&#x27;</span>) :</span><br><span class="line">                         <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> url = basePath + path + queryString;</span><br><span class="line"></span><br><span class="line">    headerParams.addAll(_defaultHeaderMap);</span><br><span class="line">    <span class="keyword">if</span> (nullableContentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> contentType = nullableContentType;</span><br><span class="line">      headerParams[<span class="string">&#x27;Content-Type&#x27;</span>] = contentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(body <span class="keyword">is</span> MultipartRequest) &#123;</span><br><span class="line">      <span class="keyword">var</span> request = MultipartRequest(method, <span class="built_in">Uri</span>.parse(url));</span><br><span class="line">      request.fields.addAll(body.fields);</span><br><span class="line">      request.files.addAll(body.files);</span><br><span class="line">      request.headers.addAll(body.headers);</span><br><span class="line">      request.headers.addAll(headerParams);</span><br><span class="line">      <span class="keyword">var</span> response = <span class="keyword">await</span> client.send(request);</span><br><span class="line">      <span class="keyword">return</span> Response.fromStream(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> msgBody = nullableContentType == <span class="string">&quot;application/x-www-form-urlencoded&quot;</span> ? formParams : serialize(body);</span><br><span class="line">      <span class="keyword">final</span> nullableHeaderParams = (headerParams.isEmpty)? <span class="keyword">null</span>: headerParams;</span><br><span class="line">      <span class="keyword">switch</span>(method) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> client.post(url, headers: nullableHeaderParams, body: msgBody);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;PUT&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> client.put(url, headers: nullableHeaderParams, body: msgBody);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;DELETE&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> client.delete(url, headers: nullableHeaderParams);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;PATCH&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> client.patch(url, headers: nullableHeaderParams, body: msgBody);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;HEAD&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> client.head(url, headers: nullableHeaderParams);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">return</span> client.<span class="keyword">get</span>(url, headers: nullableHeaderParams);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Update query and header parameters based on authentication settings.</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">@param authNames The authentications to apply</span></span></span><br><span class="line">  <span class="keyword">void</span> _updateParamsForAuth(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; authNames, <span class="built_in">List</span>&lt;QueryParam&gt; queryParams, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; headerParams) &#123;</span><br><span class="line">    authNames.forEach((authName) &#123;</span><br><span class="line">      Authentication auth = _authentications[authName];</span><br><span class="line">      <span class="keyword">if</span> (auth == <span class="keyword">null</span>) <span class="keyword">throw</span> ArgumentError(<span class="string">&quot;Authentication undefined: &quot;</span> + authName);</span><br><span class="line">      auth.applyToParams(queryParams, headerParams);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  T getAuthentication&lt;T <span class="keyword">extends</span> Authentication&gt;(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">var</span> authentication = _authentications[name];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> authentication <span class="keyword">is</span> T ? authentication : <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の2記事目でした。次回は澁川さんの <a href="/articles/20210512a/">Goのサーバーの管理画面をFlutter Webで作ってみるための調査</a> です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;/articles/20210510a/&quot;&gt;Dart/Flutter連載&lt;/a&gt;の2記事目です。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
    <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
    <category term="Dart" scheme="https://future-architect.github.io/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>技育祭登壇しました。これから機械学習を学びたい方向けへの自分の経験談とおすすめの本、サイトの紹介もします</title>
    <link href="https://future-architect.github.io/articles/20210511a/"/>
    <id>https://future-architect.github.io/articles/20210511a/</id>
    <published>2021-05-10T15:00:00.000Z</published>
    <updated>2021-05-12T00:44:58.657Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210511a/geeksai_logo.png" alt="geeksai_logo" width="640" height="602"><p>TIGの玉木です。去年の12月までは主に機械学習エンジニアとして機械学習案件を任されていましたが、今年の1月からはITコンサルタントとして業務の幅が広くなりいろいろやっています。</p><p>先月技育祭<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>と呼ばれるイベントの勉強会という枠で、同僚の上野さんと一緒に「初心者必見！機械学習エンジニアがあれこれ話します。〜基礎から実社会応用まで〜」というタイトルで発表しました。この記事では技育祭の簡単な紹介と、当日あったこれから機械学習学びたい方向けへの本、サイトの紹介をします。</p><h2 id="技育祭とは"><a href="#技育祭とは" class="headerlink" title="技育祭とは"></a>技育祭とは</h2><p>公式サイト<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>から引用させていただくと、</p><blockquote><p>技育祭は「技術者を育てる」ことを目的としたエンジニアを目指す学生のための日本最大のテックカンファレンスです</p></blockquote><p>とのことです。元2ちゃんねる管理人のひろゆきさんや、東京大学の松尾豊先生など、豪華なゲストの方々が参加され、学生向けにためになる話をしてくれるイベントでした。講演セッションが3つ、勉強会セッションが2つ同時に進み、我々が話した勉強会セッションの裏ではRuby開発者のまつもとゆきひろさん、AtCoder社長のchokudaiさん、株式会社ドワンゴの川上量生さんが話されていました。こんな豪華なメンツが講演している中勉強会きてくれる人いるのかと不安だったのですが、当日は50人超の学生の方々が参加してくれました。</p><h2 id="当日の内容"><a href="#当日の内容" class="headerlink" title="当日の内容"></a>当日の内容</h2><img src="/images/20210511a/スクリーンショット_2021-04-27_15.54.35.png" alt="当日の発表スライド_ワクチン開発における教師あり学習" width="1200" height="863" loading="lazy"><p>「初心者必見！機械学習エンジニアがあれこれ話します。〜基礎から実社会応用まで〜」と、かなり抽象的なタイトルで話しました。私は教師あり学習について少し説明したあと、以前ブログに書いたワクチンの話<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を簡単に紹介し、word2vecなどの事前学習モデルについて説明したあと、それを使った案件への応用を紹介しました。上記の図は当日話したスライドの1部で、自然言語処理のタスクの1つである感情分析の説明をしたあと、ワクチン候補を見つけるのも感情分析と同じ枠組みで解けることを説明している図になります。上野さんは主に画像処理での案件への応用を紹介していました。</p><p>当日はチャットが大いに盛り上がりました(書き込んでくれた皆様ありがとうございました！)。よくあった質問が「どうやって機械学習勉強しましたか？」「おすすめの参考になる本などありますか？」という質問でした。その場で口頭で答えたものの、初心者向けの本、サイトを紹介するというのは一定の需要がありそうなので、この記事では</p><ul><li>私がどうやって機械学習を学んだか</li><li>今ならどうやって機械学習を学ぶか</li></ul><p>を紹介しようと思います。これから機械学習関係の研究室に入ってガッツリ学ぶ方向けというよりは、当日勉強会に参加していた、機械学習ちょっと学んでみたいぐらいのレベル感の方に向けてこの記事を書きます。</p><h2 id="私がどうやって機械学習を学んだか"><a href="#私がどうやって機械学習を学んだか" class="headerlink" title="私がどうやって機械学習を学んだか"></a>私がどうやって機械学習を学んだか</h2><p>私は大学院から自然言語処理の研究室に入り、現職では自然言語処理の案件や、ワクチンの案件に配属されて、機械学習のデータを作ったり、機械学習モデルを作ったりしていました。Kaggleと呼ばれる機械学習のコンペティションサイトではKaggle Expertぐらいの実力です(凄くないです)。<br>私が入った大学院の研究室はできたばかりの研究室だったこともあり、多くの部分を独学で学びました。最初に参考にしたサイトは、東京都立大学の小町先生が書かれた「自然言語処理を独習したい人のために」、「自然言語処理を学ぶ推薦書籍」というサイトです。当時非常に参考になりました。</p><ul><li><a href="http://cl.sd.tmu.ac.jp/prospective/prerequisite">自然言語処理を独習したい人のために</a></li><li><a href="http://cl.sd.tmu.ac.jp/prospective/readings">自然言語処理を学ぶ推薦書籍</a></li></ul><p>上記のサイトは私が学生のときにはすでにあり、現在も更新されています。実際に当時私が読んで役に経ったなと思っている本は</p><ul><li><a href="https://www.coronasha.co.jp/np/isbn/9784339027518/">言語処理のための機械学習入門</a></li><li><a href="https://book.impress.co.jp/books/1120101017">Python 機械学習プログラミング</a></li></ul><p>の2つです。「言語処理のための機械学習入門」は今はあまり使われないようなモデルも紹介されていますが、大学院で研究をする上での基礎になりました。「Python 機械学習プログラミング」はコードを書いて結果が出るので、その分楽しく読めた記憶があります。本ではありませんが、</p><ul><li>courseraのAndrew Ng先生の「<a href="https://ja.coursera.org/learn/machine-learning">Machine Learning</a>」</li><li>PFN海野さん、東工大岡崎先生といった方々が公開されている論文紹介の資料</li><li>論文</li></ul><p>を見たり読んだりして知識をつけました。courseraのAndrew Ng先生の「Machine Learning」は英語に抵抗がなければおすすめします。最近は<a href="https://ja.coursera.org/specializations/deep-learning">Deep Learning用の別の講座</a>もできていて、そちらを見るのがいいのかなと思います。かなり時間がかかるのがネックですが、内容はとても良いです。Andrew Ng先生のYouTubeに上がっている授業の方は結構難しいのですが、courseraの授業は易しめだと思います。</p><p>実験面や機械学習のコードに関して最も参考になったのが、<a href="https://www.kaggle.com/">Kaggle</a>と呼ばれる機械学習のコンペティションサイトです。当時<a href="https://www.kaggle.com/c/quora-question-pairs">Quora Question Pairs</a>というコンペが開催されており、データや内容に興味があったため参加しました。その後もぼちぼち興味のあるコンペティションに参加し、知見を得ています。またその他に、kerasやchainerのサンプルコードや、論文の実装を参考にして当時は機械学習のコードの書き方を学んでいきました。</p><h2 id="今ならどうやって機械学習を学ぶか"><a href="#今ならどうやって機械学習を学ぶか" class="headerlink" title="今ならどうやって機械学習を学ぶか"></a>今ならどうやって機械学習を学ぶか</h2><p>今もし1から自分が機械学習を学び直すとしたら、Kaggleでたくさん実験するところから始めると思います。本をただ読むよりも、コードを実際に動かして、実行結果がわかることが自分の好みというのがあります。そのような方に特にKaggleがおすすめできます。Kaggleはある程度データや環境がすでに用意されており、いきなりコードを書き始めることができます。公開されているデータの種類も多岐にわたります。余談ですが、弊社もコンペティションではないですが、データの公開を行っています<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。Kaggle上でGPUやTPUも制限付きで使うことができます。参考になるコードや議論も公開されています。Kaggle上に公開されている内容が全くわからないと最初はなると思います。その中でおすすめなのが以下の2つです。</p><ul><li><a href="https://developers.google.com/machine-learning/crash-course">Machine Learning Crash Course</a></li><li><a href="https://www.kspub.co.jp/book/detail/5190067.html">実践Data Scienceシリーズ PythonではじめるKaggleスタートブック</a></li></ul><p>Machine Learning Crash Courseは前述のcourseraの授業に比べて量もそんなに多くなく、最初に学ぶ内容として必要なことが一通り揃っているように思います。<br>PythonではじめるKaggleスタートブックが出たときすでに自分はKaggleに出たことがあったのでこの本は読んだことがないのに紹介してしまい申し訳ないのですが、本の紹介、レビューを見る限り良さそうだなと思います。当社ブログでも紹介しています<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。</p><p>上記2冊に比べて内容は難しくなりますが、</p><ul><li><a href="https://gihyo.jp/book/2019/978-4-297-10843-4">Kaggleで勝つデータ分析の技術</a></li></ul><p>もおすすめします。機械学習モデルの精度をあげる工夫ももちろん載っているのですが、正しくモデルを評価する、データを変換するといった基礎的なことも学べます。実務で機械学習をやっていても、この点難しいと感じることが多いのですが、Kaggleで勝つデータ分析の技術は一通りまとまっていて今でも参考にしてます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>技育祭でよくあった質問の「どうやって機械学習勉強しましたか？」「おすすめの参考になる本などありますか？」に対する答えとなる記事を書きました。現在もKaggle上でいくつかコンペティションが開催されているので、機械学習に興味のある方は参加してみてはいかがでしょうか。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://talent.supporterz.jp/geeksai/2021/">https://talent.supporterz.jp/geeksai/2021/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="/articles/20201208/">https://future-architect.github.io/articles/20201208/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="/articles/20200801/">https://future-architect.github.io/articles/20200801/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="/articles/20200615/">https://future-architect.github.io/articles/20200615/</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210511a/geeksai_logo.png&quot; alt=&quot;geeksai_logo&quot; width=&quot;640&quot; height=&quot;602&quot;&gt;

&lt;p&gt;TIGの玉木です。去年の12月までは主に機械学習エンジニアとして機械学習案件を任されていま</summary>
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
    <category term="技育祭" scheme="https://future-architect.github.io/tags/%E6%8A%80%E8%82%B2%E7%A5%AD/"/>
    
  </entry>
  
  <entry>
    <title>Dart入門</title>
    <link href="https://future-architect.github.io/articles/20210510b/"/>
    <id>https://future-architect.github.io/articles/20210510b/</id>
    <published>2021-05-09T15:00:01.000Z</published>
    <updated>2021-05-12T08:40:09.534Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は<a href="/articles/20210510a/">Dart/Flutter連載</a>の1記事目です。</p><p>TIGの伊藤真彦です。</p><p>Dart/Flutter入門に参加します、DartといえばFlutterの話が必ずついてくるものですが、今回は連載1記事目として、敢えてプログラミング言語としてのDartに焦点を絞った記事にします。</p><h1 id="Dartとは"><a href="#Dartとは" class="headerlink" title="Dartとは"></a>Dartとは</h1><img src="/images/20210510b/logo_lockup_dart_horizontal.png" alt="dart horizontal logo" width="560" height="202"><p>DartはGoogleによって開発されたウェブ向けのプログラミング言語です、正式発表された時期は2011年です。</p><p>元々はJavaScriptの代替となることを目的に作られましたが、Javascriptのようにブラウザに統合される事なく今日まで至ります。JavaScriptの代替、という概念では競合にあたるTypeScriptが今ではGoogle社内の標準プログラミング言語として承認されています。</p><p>しかし、2018年にDart2として再起動、モバイルアプリケーション向けフレームワークである<code>Flutter</code>の基本ライブラリでDartが採用される事により、近年注目度が上昇しています。今iOS/Androidのクロスプラットフォームでのアプリケーション開発を行うならDartが熱い、という事ですね。</p><h1 id="技術的特徴"><a href="#技術的特徴" class="headerlink" title="技術的特徴"></a>技術的特徴</h1><p>Dartはクラスベースのオブジェクト指向言語です、単一継承のみがサポートされていますが、Mixinを利用することも可能です。</p><p>静的型付け言語としての型アノテーションが存在しつつも、dynamic型と呼ばれる特徴的な型により、動的型付け言語のようにも扱うことが可能です。上記の特徴により、大規模システムでも耐えられる堅牢さ、高パフォーマンスを維持しつつ、時には柔軟性を持つこともできる言語として設計されています。</p><p>JavaScriptトランスパイラにより、作成したコードをJavascriptに変換することが可能です。デバッグビルドでのみ動作する<code>assert</code>という構文があるのも特徴です。</p><h1 id="Dartのインストール"><a href="#Dartのインストール" class="headerlink" title="Dartのインストール"></a>Dartのインストール</h1><p><a href="https://dart.dev/get-dart">公式サイト</a>にOSごとのインストールの方法がまとめられています、MACでのインストールが一番簡単です。</p><p>インストールに成功したら<code>dart --version</code>コマンドでバージョンを確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ dart --version</span><br><span class="line">Dart SDK version: 2.12.4 (stable) (Thu Apr 15 12:26:53 2021 +0200) on <span class="string">&quot;macos_x64&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Dartの実行"><a href="#Dartの実行" class="headerlink" title="Dartの実行"></a>Dartの実行</h1><p><code>dart ファイル名</code>で作成したDARTファイルを実行できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ dart hello.dart</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>拡張子は<code>.dart</code>が一般的なようですが、dartコマンドに渡す分には他の拡張子でも読み込み、実行できました。</p><h1 id="Dartの基礎文法"><a href="#Dartの基礎文法" class="headerlink" title="Dartの基礎文法"></a>Dartの基礎文法</h1><p>基本的な文法を紹介する形でDartに触れてみます。</p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dartはmain関数に実行したい処理を書く形式で単一ファイルでとして実行可能です。</p><h2 id="コマンドライン引数"><a href="#コマンドライン引数" class="headerlink" title="コマンドライン引数"></a>コマンドライン引数</h2><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;args[<span class="number">0</span>]&#125;</span>!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ % dart hello.dart Dart</span><br><span class="line">Hello Dart!</span><br></pre></td></tr></table></figure><p>main関数に引数を持たせることでコマンドライン引数を受け取ることができます。</p><p>Goの<code>flag.Parse()</code>、Rubyの<code>ARGV</code>のようなコマンドライン引数を取り扱うための独自な手法が無い。引数の書き方が<code>型名 変数名</code>の順番である、などgoに慣れた状態で触れると異文化を感じます。文字列への変数展開はJavaScriptであれば``で囲った文字列である必要があるところを’’でも問題ないあたりも細かい作法が異なりますね。</p><h2 id="変数宣言"><a href="#変数宣言" class="headerlink" title="変数宣言"></a>変数宣言</h2><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = args[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;name&#125;</span>!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新しい変数は<code>var 変数名 = 値</code>の形式で宣言します。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="built_in">String</span> name = args[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;name&#125;</span>!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>変数の型を明示的に指定することも可能です。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">dynamic</span> obj = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span> + obj);</span><br><span class="line">    obj = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span> + obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ dart main.dart</span><br><span class="line">2</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p>特定の形を期待しない場合は<code>dynamic</code>を型アノテーションとして付けることができます。<br>どのような型でも再代入可能になる一方で、<code>dynamic obj = 1;</code>をそのまま<code>&quot;1&quot; + obj</code>でString型の文字列と結合することはできません。</p><p><a href="https://dart.dev/guides/language/effective-dart/style">スタイルガイド</a>によると、ローカル変数には型アノテーション無しの<code>var</code>を、公開APIの引数等で型アノテーションを書くようにするような用法が推奨されています。</p><h3 id="デフォルト値"><a href="#デフォルト値" class="headerlink" title="デフォルト値"></a>デフォルト値</h3><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">String</span> s;</span><br><span class="line">    s = <span class="string">&#x27;Hello Dart!&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ % dart main.dart</span><br><span class="line">Hello Dart!</span><br></pre></td></tr></table></figure><p>値を決めずに変数を宣言することが可能です。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">String</span> s;</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dart main.dart</span><br><span class="line">main.dart:3:11: Error: Non-nullable variable <span class="string">&#x27;s&#x27;</span> must be assigned before it can be used.</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br></pre></td></tr></table></figure><p>変数のデフォルト値はどのような型であってもnullです、nullを許容しない型の変数を代入しないまま参照するとコンパイルエラーが発生します。</p><h2 id="定数"><a href="#定数" class="headerlink" title="定数"></a>定数</h2><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">String</span> s = <span class="string">&quot;Hello Dart!&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>const</code>を先頭に付与することで定数として宣言することも可能です。<br>定数の値を変更しようとするとコンパイルエラー<code>Can&#39;t assign to the const variable</code>が発生します。</p><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> s = <span class="string">&quot;Hello Dart!&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dartには<code>final</code>という修飾子も存在します。<br>finalを使って宣言した変数を変更しようとするとコンパイルエラー<code>Can&#39;t assign to the final variable</code>が発生します。</p><p>使い方が似ていますが、<code>const</code>はコンパイル時に評価され、<code>final</code>は実行段階で評価されるという違いがあります。</p><p>例えばコンパイル段階で計算できない実行時の時刻を<code>const</code>で宣言することはできません。</p><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">final</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="built_in">print</span>(now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このコードは正常に動作します。</p><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="built_in">print</span>(now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>constに置き換えると下記のエラーが発生します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Error compiling to JavaScript:</span><br><span class="line">Warning: Interpreting this as package URI, <span class="string">&#x27;package:dartpad_sample/main.dart&#x27;</span>.</span><br><span class="line">lib/main.dart:2:26:</span><br><span class="line">Error: Cannot invoke a non-<span class="string">&#x27;const&#x27;</span> constructor <span class="built_in">where</span> a const expression is expected.</span><br><span class="line">    const now = DateTime.now();</span><br><span class="line">                         ^^^</span><br><span class="line">Error: Compilation failed.</span><br></pre></td></tr></table></figure><p>このような多様な修飾子の存在はコンパイル速度のパフォーマンスチューニングに貢献しますが、若干難易度が高い印象ですね。</p><p>Dart 2.12から<code>late</code>修飾子も追加されています。</p><figure class="highlight dart"><figcaption><span>late.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">late</span> <span class="built_in">String</span> description;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  description = <span class="string">&#x27;Feijoada!&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(description);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>late</code>修飾子には主に2つのメリットがあります。</p><ul><li>変数がnullを許容しない</li><li>変数を遅延評価することでパフォーマンスを改善する</li></ul><p>条件分岐によっては利用しない値を<code>late</code>修飾子付きで宣言するような使い方が期待できます。</p><h2 id="組み込み型"><a href="#組み込み型" class="headerlink" title="組み込み型"></a>組み込み型</h2><p>Dartには下記の組み込み型が用意されています。</p><ul><li>Numbers (int, double)</li><li>Strings (String)</li><li>Booleans (bool)</li><li>Lists (List, also known as arrays)</li><li>Sets (Set)</li><li>Maps (Map)</li><li>Runes (Runes; often replaced by the characters API)</li><li>Symbols (Symbol)</li><li>The value null (Null)</li></ul><p>特徴的なものは<code>List</code>、<code>Set</code>の違いでしょうか。<br><code>List</code>はお馴染みの配列であるのに対し、<code>Set</code>は重複した値を持たないコレクション型です。</p><p><code>String</code>型の変数はシングルクオート、またはダブルクオート文字列を作成することが可能です。<br>シングルクオートとダブルクオートでは特殊文字のエスケープのルールが異なります。</p><figure class="highlight dart"><figcaption><span>string.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;Single quotes.&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;Double quotes.&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">&#x27;It\&#x27;s easy to escape the string delimiter.&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">&quot;It&#x27;s even easier to use the other delimiter.&quot;</span>;</span><br></pre></td></tr></table></figure><p><code>トリプルクオート</code>で複数行の文字列を書くことができるのが特徴的です。</p><figure class="highlight dart"><figcaption><span>string.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">You can create</span></span><br><span class="line"><span class="string">multi-line strings like this one.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;&quot;&quot;This is also a</span></span><br><span class="line"><span class="string">multi-line string.&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>Dartにおける<code>Symbol</code>はコンパイル時常数として扱われる、文字列から生成できるデータ型です。<br>コンパイル時に難読化なれないため、ライブラリのメタデータの整理などに利用されますが。<br>ユーザー目線ではほぼ使わないようです。</p><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><figure class="highlight dart"><figcaption><span>enum.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">enum</span> Color &#123;</span><br><span class="line">   red,</span><br><span class="line">   blue,</span><br><span class="line">   green</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(Color.red);</span><br><span class="line">  <span class="built_in">print</span>(Color.green.index);</span><br><span class="line">  <span class="built_in">print</span>(Color.values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~$ dart enum.dart</span><br><span class="line">Color.red</span><br><span class="line">2</span><br><span class="line">[Color.red, Color.blue, Color.green]</span><br></pre></td></tr></table></figure><p>Dartではバージョン1.8からenumがサポートされています。<br>比較的素朴な仕組みで、インデックスを1から始めたり飛ばしたり、文字列に変換するような機能はありません。</p><h2 id="条件分岐"><a href="#条件分岐" class="headerlink" title="条件分岐"></a>条件分岐</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args[<span class="number">0</span>] == <span class="string">&quot;Dart&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello Dart!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>] == <span class="string">&quot;Flutter&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Welcome Flutter!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">el