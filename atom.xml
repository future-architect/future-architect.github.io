<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Future Tech Blog - フューチャーアーキテクト</title>
  
  <subtitle>フューチャー開発者ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-02-19T01:12:15.545Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GCP連載#10 Terraform ではなくCloud Deployment Manager を使ってみよう</title>
    <link href="https://future-architect.github.io/articles/20200219/"/>
    <id>https://future-architect.github.io/articles/20200219/</id>
    <published>2020-02-19T01:05:30.000Z</published>
    <updated>2020-02-19T01:12:15.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a>もいよいよ最終日です！</p><p>普段は、Terraform を使っているのですが、ふとCloud Deployment Manager を使ったことないことに気づきました。そこで、Cloud Deployment Manager について紹介したいと思います。</p><h2 id="Cloud-Deployment-Manager-とは"><a href="#Cloud-Deployment-Manager-とは" class="headerlink" title="Cloud Deployment Manager とは"></a>Cloud Deployment Manager とは</h2><p><a href="https://cloud.google.com/deployment-manager" target="_blank" rel="noopener">Cloud Deployment Manager</a> とは、GCP のリソースをYAML で宣言的に記述し、デプロイできるサービスです。要は、AWS のCloudFormation などにあたるサービスです。</p><p>ちなみにですが、Cloud Deployment Manager は、テンプレートをPython やJinja2 を使って、パラメータ化することもできます。ざっくりですが、以下にCloud Deployment Manager と似たサービスをクラウド毎に記載します。</p><table><thead><tr><th></th><th>GCP</th><th>AWS</th><th>AWS</th><th>Alibaba Cloud</th></tr></thead><tbody><tr><td>Management tools</td><td>Cloud Deployment Manager</td><td>AWS CloudFormation</td><td>Cloud Development Kit (CDK)</td><td>Resource Orchestration Service</td></tr><tr><td>Format</td><td>JSON, YAML, Python, Jinja2</td><td>JSON, YAML</td><td>TypeScript, Python, Java, C#</td><td>JSON</td></tr></tbody></table><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>事前に以下は実施済みであることを前提とします。</p><ul><li>プロジェクト作成</li><li><a href="https://cloud.google.com/sdk/docs/quickstarts?hl=ja" target="_blank" rel="noopener">gcloud</a> コマンドが使える状態</li></ul><p>まず、Deployment Manager のAPI を有効化し、次にgcloud コマンドでログインし、プロジェクトを指定します。<br>[MY_PROJECT]にあらかじめ作成したプロジェクトのID を指定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud auth login</span><br><span class="line">$ gcloud config <span class="built_in">set</span> project [MY_PROJECT]</span><br></pre></td></tr></table></figure><h2 id="Cloud-Deployment-Manager-事始め"><a href="#Cloud-Deployment-Manager-事始め" class="headerlink" title="Cloud Deployment Manager 事始め"></a>Cloud Deployment Manager 事始め</h2><p>まずは、GCE を作成して慣れてみたいと思います。</p><h3 id="定義ファイルの作成"><a href="#定義ファイルの作成" class="headerlink" title="定義ファイルの作成"></a>定義ファイルの作成</h3><p>YAML でリソースを定義します。</p><figure class="highlight yaml"><figcaption><span>vm.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">compute.v1.instance</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-vm</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    zone:</span> <span class="string">asia-northeast1-a</span></span><br><span class="line"><span class="attr">    machineType:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/zones/asia-northeast1-a/machineTypes/f1-micro</span></span><br><span class="line"><span class="attr">    disks:</span></span><br><span class="line"><span class="attr">    - deviceName:</span> <span class="string">boot</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">PERSISTENT</span></span><br><span class="line"><span class="attr">      boot:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      autoDelete:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      initializeParams:</span></span><br><span class="line"><span class="attr">        sourceImage:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9</span></span><br><span class="line"><span class="attr">    networkInterfaces:</span></span><br><span class="line"><span class="attr">    - network:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/global/networks/default</span></span><br><span class="line"><span class="attr">      accessConfigs:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">External</span> <span class="string">NAT</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">ONE_TO_ONE_NAT</span></span><br></pre></td></tr></table></figure><p>定義ファイルの設定内容を以下に記載します。</p><ul><li>name: インスタンス名を指定</li><li>zone: 作成するゾーンを指定</li><li>machineType: インスタンスタイプを指定</li></ul><p>また、[MY_PROJECT]は、作成したプロジェクトのID を指定します。</p><h3 id="リソースのデプロイ"><a href="#リソースのデプロイ" class="headerlink" title="リソースのデプロイ"></a>リソースのデプロイ</h3><p>リソースのデプロイは、<code>gcloud</code>をコマンドを使用してデプロイします。</p><p>まずは、プレビューで作成したいと思います。プレビューを指定すると作成や更新前にどのような変化をもたらすかを確認することができます。要は、dry-run 的な用途で使えるオプションです。</p><h4 id="コマンドの構成について"><a href="#コマンドの構成について" class="headerlink" title="コマンドの構成について"></a>コマンドの構成について</h4><p>コマンドの構成について以下に記載します。<br>詳細は、<a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments" target="_blank" rel="noopener">こちら</a>を参考にしてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments COMMAND DEPLOYMENT_NAME --config [FILE_PATH] --preview</span><br></pre></td></tr></table></figure><ul><li>COMMAND: create, delete, update などを指定</li><li>DEPLOYMENT_NAME: デプロイの名前を指定（任意の名前）</li><li>FILE_PATH: 先ほど作成したリソース定義ファイルのパスを指定</li><li>–preview: dry-run 的に実行したい時に指定</li></ul><p>それでは実際に<a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments/create" target="_blank" rel="noopener">create</a>コマンドを実行したいと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments create <span class="built_in">test</span> --config vm.yaml --preview</span><br><span class="line">The fingerprint of the deployment is xxx</span><br><span class="line">Waiting <span class="keyword">for</span> create [xxx]...<span class="keyword">done</span>.</span><br><span class="line">Create operation xxx completed successfully.</span><br><span class="line">NAME     TYPE                 STATE       ERRORS  INTENT</span><br><span class="line"><span class="built_in">test</span>-vm  compute.v1.instance  IN_PREVIEW  []      CREATE_OR_ACQUIRE</span><br></pre></td></tr></table></figure><p>実行結果のステータスが、<code>IN_PREVIEW</code>であることからプレビュー状態であることがわかります。<br>プレビュー実行後にブラウザで確認すると以下のように構成などを確認することができます。</p><img src="/images/20200219/photo_20200219_01.png"><p>ブラウザ上からデプロイすることも可能ですが、<code>gcloud</code>コマンドから実行したいと思います。<br><a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments/update" target="_blank" rel="noopener">update</a>を指定し、<code>DEPLOYMENT_NAME</code>を指定します（ここではtest）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments update <span class="built_in">test</span></span><br><span class="line">The fingerprint of the deployment is xxx==</span><br><span class="line">Waiting <span class="keyword">for</span> update [xxx]...<span class="keyword">done</span>.</span><br><span class="line">Update operation xxx completed successfully.</span><br><span class="line">NAME     TYPE                 STATE      ERRORS  INTENT</span><br><span class="line"><span class="built_in">test</span>-vm  compute.v1.instance  COMPLETED  []</span><br></pre></td></tr></table></figure><p>実行結果から先ほどまでは<code>IN_PREVIEW</code>だったが、<code>COMPLETED</code>に変わっていることがわかります。</p><p>また、以下のブラウザからもプレビューからデプロイに変わっていることがわかります。</p><p>実際に、GCE コンソールに遷移すると作成されていることが確認できます。</p><img src="/images/20200219/photo_20200219_02.png"><p>その他のコマンドを紹介したいと思います。<br><a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments/list" target="_blank" rel="noopener">list</a>コマンドでデプロイの一覧を表示することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments list</span><br><span class="line">NAME  LAST_OPERATION_TYPE  STATUS  DESCRIPTION  MANIFEST  ERRORS</span><br><span class="line"><span class="built_in">test</span>  preview              DONE                           []</span><br></pre></td></tr></table></figure><p><a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments/describe" target="_blank" rel="noopener">describe</a>コマンドでデプロイの詳細情報を確認することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments describe <span class="built_in">test</span></span><br><span class="line">---</span><br><span class="line">fingerprint: xxx==</span><br><span class="line">id: <span class="string">'xxx'</span></span><br><span class="line">insertTime: <span class="string">'xxx'</span></span><br><span class="line">manifest: manifest-xxx</span><br><span class="line">name: <span class="built_in">test</span></span><br><span class="line">operation:</span><br><span class="line">  endTime: <span class="string">'xxx'</span></span><br><span class="line">  name: xxx</span><br><span class="line">  operationType: update</span><br><span class="line">  progress: 100</span><br><span class="line">  startTime: <span class="string">'xxx'</span></span><br><span class="line">  status: DONE</span><br><span class="line">  user: xxx</span><br><span class="line">NAME     TYPE                 STATE      INT</span><br><span class="line"><span class="built_in">test</span>-vm  compute.v1.instance  COMPLETED</span><br></pre></td></tr></table></figure><p>もし、デプロイを削除したい場合は、<a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments/delete" target="_blank" rel="noopener">delete</a>コマンドを使用します。<br><code>Do you want to continue (y/N)?</code>は、<code>y</code>と入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments delete <span class="built_in">test</span></span><br><span class="line">The following deployments will be deleted:</span><br><span class="line">- <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">Do you want to <span class="built_in">continue</span> (y/N)?  y</span><br><span class="line"></span><br><span class="line">Waiting <span class="keyword">for</span> delete [xxx]...<span class="keyword">done</span>.</span><br><span class="line">Delete operation xxx completed successfully.</span><br></pre></td></tr></table></figure><p>これでGCE の作成から削除までの一連の操作を行いました。</p><h2 id="複数のVM-インスタンスを作成"><a href="#複数のVM-インスタンスを作成" class="headerlink" title="複数のVM インスタンスを作成"></a>複数のVM インスタンスを作成</h2><p>先ほど作成した定義ファイルを複製するかたちで作成します。<br>ファイル名は、<code>vms.yaml</code>とします。</p><figure class="highlight yaml"><figcaption><span>vms.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">compute.v1.instance</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-vm-01</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    zone:</span> <span class="string">asia-northeast1-a</span></span><br><span class="line"><span class="attr">    machineType:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/zones/asia-northeast1-a/machineTypes/f1-micro</span></span><br><span class="line"><span class="attr">    disks:</span></span><br><span class="line"><span class="attr">    - deviceName:</span> <span class="string">boot</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">PERSISTENT</span></span><br><span class="line"><span class="attr">      boot:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      autoDelete:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      initializeParams:</span></span><br><span class="line"><span class="attr">        sourceImage:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9</span></span><br><span class="line"><span class="attr">    networkInterfaces:</span></span><br><span class="line"><span class="attr">    - network:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/global/networks/default</span></span><br><span class="line"><span class="attr">      accessConfigs:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">External</span> <span class="string">NAT</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">ONE_TO_ONE_NAT</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">compute.v1.instance</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-vm-02</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    zone:</span> <span class="string">asia-northeast1-a</span></span><br><span class="line"><span class="attr">    machineType:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/zones/asia-northeast1-a/machineTypes/f1-micro</span></span><br><span class="line"><span class="attr">    disks:</span></span><br><span class="line"><span class="attr">    - deviceName:</span> <span class="string">boot</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">PERSISTENT</span></span><br><span class="line"><span class="attr">      boot:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      autoDelete:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      initializeParams:</span></span><br><span class="line"><span class="attr">        sourceImage:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9</span></span><br><span class="line"><span class="attr">    networkInterfaces:</span></span><br><span class="line"><span class="attr">    - network:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/global/networks/default</span></span><br><span class="line"><span class="attr">      accessConfigs:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">External</span> <span class="string">NAT</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">ONE_TO_ONE_NAT</span></span><br></pre></td></tr></table></figure><p><code>name</code>を01と02に分けるかたちでVM を2台分の定義を記述し、デプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments create <span class="built_in">test</span>-vms --config vms.yaml</span><br><span class="line">The fingerprint of the deployment is xxx==</span><br><span class="line">Waiting <span class="keyword">for</span> create [xxx]...<span class="keyword">done</span>.</span><br><span class="line">Create operation xxx completed successfully.</span><br><span class="line">NAME        TYPE                 STATE      ERRORS  INTENT</span><br><span class="line"><span class="built_in">test</span>-vm-01  compute.v1.instance  COMPLETED  []</span><br><span class="line"><span class="built_in">test</span>-vm-02  compute.v1.instance  COMPLETED  []</span><br></pre></td></tr></table></figure><p>デプロイ後、ブラウザでも2台作成されていることがわかります。</p><img src="/images/20200219/photo_20200219_03.png"><p>このようにYAML で定義ファイルを書いて作成することができることがわかりました。<br>しかし、このような書き方では冗長さを感じてしまいますね。<br>次は、再利用性を高めるためのテンプレートを紹介します。</p><h2 id="テンプレートを利用する"><a href="#テンプレートを利用する" class="headerlink" title="テンプレートを利用する"></a>テンプレートを利用する</h2><p>テンプレートを利用するとリソースを定義したファイルを独立させて再利用性を高めることができます。テンプレートを作成するには、<font color="DeepSkyBlue">Python</font>や<font color="DeepSkyBlue">Jinja2</font>を使用することができます。Pythonを使用する場合は、Python 3.x で作成する必要があります（公式ドキュメントの日本語サイトだとPython 2.7 と記載がありますが、英語サイトだとPython 3.x と記載があるので注意）</p><h3 id="テンプレートの作成"><a href="#テンプレートの作成" class="headerlink" title="テンプレートの作成"></a>テンプレートの作成</h3><p>今回もGCE 2台作成し、合わせてファイアウォールの設定なども行いたいと思います。<br>以下のファイルを準備します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── firewall_template.py</span><br><span class="line">├── gce_template.py</span><br><span class="line">├── network_template.py</span><br><span class="line">├── vm_template.py</span><br><span class="line">└── vms.yaml</span><br></pre></td></tr></table></figure><h3 id="環境変数とプロパティについて"><a href="#環境変数とプロパティについて" class="headerlink" title="環境変数とプロパティについて"></a>環境変数とプロパティについて</h3><p>テンプレートのプロパティは、任意の変数を表します。<br>例えば以下のように変数を指定することができます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.properties[<span class="string">'zone'</span>],</span><br></pre></td></tr></table></figure><p>また、デプロイメント固有の環境変数を指定することもできます。<br>環境変数の呼び出し方は、以下の構文を使用することでプロジェクトID を取得します。<br>詳細な環境変数については、<a href="https://cloud.google.com/deployment-manager/docs/configuration/templates/use-environment-variables?hl=ja" target="_blank" rel="noopener">こちら</a>を参考にしてください。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ontext.env[<span class="string">'project'</span>]</span><br></pre></td></tr></table></figure><p>VM インスタンスを定義します。</p><figure class="highlight python"><figcaption><span>vm_template.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">COMPUTE_URL_BASE = <span class="string">'https://www.googleapis.com/compute/v1/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GenerateConfig</span><span class="params">(context)</span>:</span></span><br><span class="line">  resources = [&#123;</span><br><span class="line">      <span class="string">'name'</span>: context.env[<span class="string">'name'</span>],</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'compute.v1.instance'</span>,</span><br><span class="line">      <span class="string">'properties'</span>: &#123;</span><br><span class="line">          <span class="string">'zone'</span>: context.properties[<span class="string">'zone'</span>],</span><br><span class="line">          <span class="string">'machineType'</span>: <span class="string">''</span>.join([COMPUTE_URL_BASE, <span class="string">'projects/'</span>,</span><br><span class="line">                                  context.env[<span class="string">'project'</span>], <span class="string">'/zones/'</span>,</span><br><span class="line">                                  context.properties[<span class="string">'zone'</span>], <span class="string">'/machineTypes/'</span>,</span><br><span class="line">                                  context.properties[<span class="string">'machineType'</span>]]),</span><br><span class="line">          <span class="string">'disks'</span>: [&#123;</span><br><span class="line">              <span class="string">'deviceName'</span>: <span class="string">'boot'</span>,</span><br><span class="line">              <span class="string">'type'</span>: <span class="string">'PERSISTENT'</span>,</span><br><span class="line">              <span class="string">'boot'</span>: <span class="literal">True</span>,</span><br><span class="line">              <span class="string">'autoDelete'</span>: <span class="literal">True</span>,</span><br><span class="line">              <span class="string">'initializeParams'</span>: &#123;</span><br><span class="line">                  <span class="string">'sourceImage'</span>: <span class="string">''</span>.join([COMPUTE_URL_BASE, <span class="string">'projects/'</span>,</span><br><span class="line">                                          <span class="string">'debian-cloud/global/'</span>,</span><br><span class="line">                                          <span class="string">'images/family/debian-9'</span>])</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;],</span><br><span class="line">          <span class="string">'networkInterfaces'</span>: [&#123;</span><br><span class="line">              <span class="string">'network'</span>: <span class="string">'$(ref.'</span> + context.properties[<span class="string">'network'</span>]</span><br><span class="line">                         + <span class="string">'.selfLink)'</span>,</span><br><span class="line">              <span class="string">'accessConfigs'</span>: [&#123;</span><br><span class="line">                  <span class="string">'name'</span>: <span class="string">'External NAT'</span>,</span><br><span class="line">                  <span class="string">'type'</span>: <span class="string">'ONE_TO_ONE_NAT'</span></span><br><span class="line">              &#125;]</span><br><span class="line">          &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="string">'resources'</span>: resources&#125;</span><br></pre></td></tr></table></figure><p>ネットワークを定義します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def GenerateConfig(context):</span><br><span class="line">  resources = [&#123;</span><br><span class="line">      &apos;name&apos;: context.env[&apos;name&apos;],</span><br><span class="line">      &apos;type&apos;: &apos;compute.v1.network&apos;,</span><br><span class="line">      &apos;properties&apos;: &#123;</span><br><span class="line">          &apos;routingConfig&apos;: &#123;</span><br><span class="line">              &apos;routingMode&apos;: &apos;REGIONAL&apos;</span><br><span class="line">          &#125;,</span><br><span class="line">          &apos;autoCreateSubnetworks&apos;: True</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">  return &#123;&apos;resources&apos;: resources&#125;</span><br></pre></td></tr></table></figure><p>ファイアウォールを定義します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def GenerateConfig(context):</span><br><span class="line">  resources = [&#123;</span><br><span class="line">      &apos;name&apos;: context.env[&apos;name&apos;],</span><br><span class="line">      &apos;type&apos;: &apos;compute.v1.firewall&apos;,</span><br><span class="line">      &apos;properties&apos;: &#123;</span><br><span class="line">          &apos;network&apos;: &apos;$(ref.&apos; + context.properties[&apos;network&apos;] + &apos;.selfLink)&apos;,</span><br><span class="line">          &apos;sourceRanges&apos;: [&apos;0.0.0.0/0&apos;],</span><br><span class="line">          &apos;allowed&apos;: [&#123;</span><br><span class="line">              &apos;IPProtocol&apos;: &apos;TCP&apos;,</span><br><span class="line">              &apos;ports&apos;: [80]</span><br><span class="line">          &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">  return &#123;&apos;resources&apos;: resources&#125;</span><br></pre></td></tr></table></figure><p>ここで上記のテンプレートに指定する変数の定義を作成します。</p><figure class="highlight python"><figcaption><span>gce_template.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">NETWORK_NAME = <span class="string">'test-network'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GenerateConfig</span><span class="params">(unused_context)</span>:</span></span><br><span class="line">  resources = [&#123;</span><br><span class="line">      <span class="string">'name'</span>: <span class="string">'test-vm-01'</span>,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'vm_template.py'</span>,</span><br><span class="line">      <span class="string">'properties'</span>: &#123;</span><br><span class="line">          <span class="string">'machineType'</span>: <span class="string">'f1-micro'</span>,</span><br><span class="line">          <span class="string">'zone'</span>: <span class="string">'asia-northeast1-a'</span>,</span><br><span class="line">          <span class="string">'network'</span>: NETWORK_NAME</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      <span class="string">'name'</span>: <span class="string">'test-vm-02'</span>,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'vm_template.py'</span>,</span><br><span class="line">      <span class="string">'properties'</span>: &#123;</span><br><span class="line">          <span class="string">'machineType'</span>: <span class="string">'g1-small'</span>,</span><br><span class="line">          <span class="string">'zone'</span>: <span class="string">'asia-northeast1-a'</span>,</span><br><span class="line">          <span class="string">'network'</span>: NETWORK_NAME</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      <span class="string">'name'</span>: NETWORK_NAME,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'network_template.py'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      <span class="string">'name'</span>: NETWORK_NAME + <span class="string">'-firewall'</span>,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'firewall_template.py'</span>,</span><br><span class="line">      <span class="string">'properties'</span>: &#123;</span><br><span class="line">          <span class="string">'network'</span>: NETWORK_NAME</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="string">'resources'</span>: resources&#125;</span><br></pre></td></tr></table></figure><p>最後にテンプレートをインポートするための定義ファイルを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">imports:</span><br><span class="line">- path: vm_template.py</span><br><span class="line">- path: network_template.py</span><br><span class="line">- path: firewall_template.py</span><br><span class="line">- path: gce_template.py</span><br><span class="line"></span><br><span class="line">resources:</span><br><span class="line">- name: gce-setup</span><br><span class="line">  type: gce_template.py</span><br></pre></td></tr></table></figure><h3 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h3><p>実行方法は、今まで変わらず<code>gcloud</code> コマンドから実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments create <span class="built_in">test</span>-templates --config vms.yaml</span><br><span class="line">The fingerprint of the deployment is xxx==</span><br><span class="line">Waiting <span class="keyword">for</span> update [xxxx]...<span class="keyword">done</span>.</span><br><span class="line">Update operation xxx completed successfully.</span><br><span class="line">NAME                   TYPE                 STATE      ERRORS  INTENT</span><br><span class="line"><span class="built_in">test</span>-network           compute.v1.network   COMPLETED  []</span><br><span class="line"><span class="built_in">test</span>-network-firewall  compute.v1.firewall  COMPLETED  []</span><br><span class="line"><span class="built_in">test</span>-vm-01             compute.v1.instance  COMPLETED  []</span><br><span class="line"><span class="built_in">test</span>-vm-02             compute.v1.instance  COMPLETED  []</span><br></pre></td></tr></table></figure><p>ブラウザ上でもデプロイされていることが確認できます。</p><img src="/images/20200219/photo_20200219_04.png"><h2 id="エラーメモ"><a href="#エラーメモ" class="headerlink" title="エラーメモ"></a>エラーメモ</h2><p>gcloud コマンドからデプロイした際に何かしらのエラーが発生したとします。コード修正後に以下のように再度<font color="LightCoral">“create”</font>を実行すると<font color="LightCoral">“already exists and cannot be created”</font>というエラーが発生します。</p><p>原因は、失敗したとしても中途半端にデプロイは作られてしまうため、既にあるといったエラーが発生します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments create <span class="built_in">test</span>-templates --config vms.yaml</span><br><span class="line">ERROR: (gcloud.deployment-manager.deployments.create) ResponseError: code=409, message=<span class="string">'projects/xxx/global/deployments/test-templates'</span> already exists and cannot be created.</span><br></pre></td></tr></table></figure><p>それでは、どのように解消するかというと以下のように<font color="LightCoral">“update”</font>を使用します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments update <span class="built_in">test</span>-templates --config vms.yaml</span><br></pre></td></tr></table></figure><p>この中途半端に作成されるのは解消されて欲しいですね。。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>GCP リソースをPython で操れることで、自由度の高いテンプレートを作成できる点は面白いと思いました。<br>また、Terraform は、tfstate というファイルをGCS やS3 に保存する必要があるので、アクセス権限や同時実行などを気にする必要がありますが、CloudFormation 同様に状態管理は、GCP 側でよしなにやってもらえるのもメリットだと感じました。</p><p>ただ、Google 自体は<a href="https://github.com/GoogleCloudPlatform/terraformer" target="_blank" rel="noopener">Terraformer</a>などのツールを作成していることから割とTerraform 推しなのでは？と感じるところもあります（個人的見解）<br>なので、個人的には、GCP だけでなくAWS や、最近ではAlibaba Cloud などのクラウドを利用する機会が多いので、Terraform 一択になってしまうのが本音です。<br>とはいえ、今回のように触れたことのないサービスを使ってみるのも新たな知見として楽しめるので、今後もいろいろ触れていきたいと思います。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.google.com/deployment-manager/docs?hl=en" target="_blank" rel="noopener">Google Cloud Deployment Manager documentation</a><br><a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager" target="_blank" rel="noopener">gcloud deployment-manager</a><br><a href="https://github.com/GoogleCloudPlatform/deploymentmanager-samples" target="_blank" rel="noopener">deploymentmanager-samples</a><br><a href="https://cloud.google.com/deployment-manager/docs/configuration/templates/use-environment-variables?hl=ja" target="_blank" rel="noopener">環境変数</a><br><a href="https://cloud.google.com/deployment-manager/docs/configuration/supported-resource-types?hl=en" target="_blank" rel="noopener">サポートしているリソースタイプ</a></p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#9 初めてのGCP 画像AI(Vision API)をさわってみた</title>
    <link href="https://future-architect.github.io/articles/20200218/"/>
    <id>https://future-architect.github.io/articles/20200218/</id>
    <published>2020-02-18T01:16:55.000Z</published>
    <updated>2020-02-18T01:33:29.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>今回は<a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a>の9日目です。私個人としてはGCPはほとんど利用したことがないので、せっかくだから面白そうなことを試してみようと思い、画像AIのサービスであるVision APIについて試してみることにしました。</p><h1 id="Vision-APIとは"><a href="#Vision-APIとは" class="headerlink" title="Vision APIとは"></a>Vision APIとは</h1><blockquote><p>Google Cloud の Vision API は REST API や RPC API を使用して強力な事前トレーニング済みの機械学習モデルを提供します。画像にラベルを割り当てることで、事前定義済みの数百万のカテゴリに画像を高速で分類できます。オブジェクトや顔を検出し、印刷テキストや手書き入力を読み取り、有用なメタデータを画像カタログに作成します。<br><a href="https://cloud.google.com/vision" target="_blank" rel="noopener">https://cloud.google.com/vision</a></p></blockquote><p>Google Cloudの公式ページによりますと事前トレーニング済みの機械学習モデルを利用してラベルの割り当てやOCRとしてすぐに利用できるようですね。</p><p>機能(検出のタイプ)としては以下のものがあります。</p><table><thead><tr><th>Feature Type</th><th>Description</th></tr></thead><tbody><tr><td>Face detection</td><td>顔の検出</td></tr><tr><td>Landmark detection</td><td>ランドマークの検出</td></tr><tr><td>Logo detection</td><td>ロゴの検出</td></tr><tr><td>Label detection</td><td>ラベル検出</td></tr><tr><td>Text detection</td><td>光学式文字認識（OCR）</td></tr><tr><td>Document text detection (dense text / handwriting)</td><td>PDF/TIFF ドキュメント テキスト検出</td></tr><tr><td>Image properties</td><td>画像プロパティの検出</td></tr><tr><td>Object localization</td><td>複数のオブジェクトを検出する</td></tr><tr><td>Crop hint detection</td><td>クロップヒントの実行</td></tr><tr><td>Web entities and pages</td><td>ウェブ エンティティおよびページの検出</td></tr><tr><td>Explicit content detection (Safe Search)</td><td>セーフサーチ プロパティの検出</td></tr></tbody></table><p>詳細は公式ページを参照ください。<br><a href="https://cloud.google.com/vision/docs/features-list?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/vision/docs/features-list?hl=ja</a></p><h2 id="料金"><a href="#料金" class="headerlink" title="料金"></a>料金</h2><p>無料枠があり、最初の1,000ユニット/月は無料。それを越した場合でも1,000ユニットあたり$1.50。なんと太っ腹！</p><p>詳細は公式ページを参照ください。<br><a href="https://cloud.google.com/vision/pricing?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/vision/pricing?hl=ja</a></p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><h2 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h2><img src="/images/20200218/photo_20200218_01.png" class="img-middle-size"><p>プロジェクト名を入力し作成ボタンをクリック</p><h2 id="Cloud-Vision-APIの有効化"><a href="#Cloud-Vision-APIの有効化" class="headerlink" title="Cloud Vision APIの有効化"></a>Cloud Vision APIの有効化</h2><img src="/images/20200218/photo_20200218_02.png" class="img-middle-size"><p>Cloud Vision APIの画面に移動して有効にするボタンをクリック<br><a href="https://cloud.google.com/vision/docs/before-you-begin" target="_blank" rel="noopener">https://cloud.google.com/vision/docs/before-you-begin</a></p><h2 id="APIキーを作成"><a href="#APIキーを作成" class="headerlink" title="APIキーを作成"></a>APIキーを作成</h2><img src="/images/20200218/photo_20200218_03.png" class="img-middle-size"><p>APIとサービスの画面に移動して認証情報を作成からAPIキーを選択してクリック</p><img src="/images/20200218/photo_20200218_04.png" class="img-middle-size"><p>これでAPIキーが作成されました。<br>後ほどこのAPIキーを利用します。</p><p>事前準備はこれで完了です。</p><h1 id="APIをコールしてみる"><a href="#APIをコールしてみる" class="headerlink" title="APIをコールしてみる"></a>APIをコールしてみる</h1><p>バリエーション豊かな機能がありますが、今回はLabel detection(ラベル検出)とText detection(光学式文字認識（OCR）)を試してみます。</p><h2 id="Label-detection-ラベル検出"><a href="#Label-detection-ラベル検出" class="headerlink" title="Label detection(ラベル検出)"></a>Label detection(ラベル検出)</h2><p>まずは、Label detection。Futureの<a href="https://www.future.co.jp/recruit/career/job/engineer/" target="_blank" rel="noopener">キャリア採用ページ</a>にある、つよつよエンジニア渋川の<a href="https://www.future.co.jp/recruit/common/img/member/er_popup_14_pc.jpg" target="_blank" rel="noopener">画像</a>を利用してどのようなラベルが検出がされるか見てみましょう。今回の検証では改めて説明する必要はないと思いますがお手軽万能HTTPアクセスツールcURLを利用します。</p><img src="/images/20200218/photo_20200218_05.jpeg" class="img-middle-size"><p>keyの項目に先ほど取得したAPIキーを設定します。</p><figure class="highlight sh"><figcaption><span>Request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">'Content-Type:application/json'</span> -d <span class="string">'&#123;"requests":[&#123;"image":&#123;"source":&#123;"imageUri":"https://www.future.co.jp/recruit/common/img/member/er_popup_14_pc.jpg"&#125;&#125;,"features":[&#123;"type":"LABEL_DETECTION","maxResults":10,"model":"builtin/stable"&#125;],"imageContext":&#123;"languageHints":[]&#125;&#125;]&#125;'</span> https://vision.googleapis.com/v1/images:annotate?key=xxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>リクエストのJSONを整形するとこんな感じ</p><figure class="highlight json"><figcaption><span>json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"requests"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"image"</span>: &#123;</span><br><span class="line"><span class="attr">"source"</span>: &#123;</span><br><span class="line"><span class="attr">"imageUri"</span>: <span class="string">"https://www.future.co.jp/recruit/common/img/member/er_popup_14_pc.jpg"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"features"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"LABEL_DETECTION"</span>,</span><br><span class="line"><span class="attr">"maxResults"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">"model"</span>: <span class="string">"builtin/stable"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"imageContext"</span>: &#123;</span><br><span class="line"><span class="attr">"languageHints"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>レスポンスは以下の通りJSON形式で返却されます。</p><figure class="highlight json"><figcaption><span>Response</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"responses"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"labelAnnotations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/015c4z"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Sitting"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.84581405</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.84581405</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/0dzf4"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Arm"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.82127464</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.82127464</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/0c_jw"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Furniture"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.7518786</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.7518786</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/01kq3x"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"White-collar worker"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.74684197</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.74684197</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/0dzd8"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Neck"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.7371684</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.7371684</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/019nj4"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Smile"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.6944891</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.6944891</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/0dnr7"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Textile"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.6563325</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.6563325</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/05wkw"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Photography"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.62422496</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.62422496</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/08xgn7"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Comfort"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.55251026</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.55251026</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/02crq1"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Couch"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.5395869</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.5395869</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>descriptionだけ抜き出して整理すると</p><table><thead><tr><th>description</th><th>日本語</th></tr></thead><tbody><tr><td>Sitting</td><td>座っている</td></tr><tr><td>Arm</td><td>腕</td></tr><tr><td>Furniture</td><td>家具</td></tr><tr><td>White-collar worker</td><td>サラリーマン</td></tr><tr><td>Neck</td><td>首</td></tr><tr><td>Smile</td><td>ほほえみ</td></tr><tr><td>Textile</td><td>織物</td></tr><tr><td>Photography</td><td>写真撮影</td></tr><tr><td>Comfort</td><td>快適さ</td></tr><tr><td>Couch</td><td>ソファー</td></tr></tbody></table><p>当たり前と言えば当たり前なのですが、画像から連想される説明が返却されてます。<br>サラリーマンが快適にソファーに座っていてほほえんでおり、首や腕、ソファーの繊維も映っていますね。</p><h2 id="Text-detection-光学式文字認識（OCR）"><a href="#Text-detection-光学式文字認識（OCR）" class="headerlink" title="Text detection(光学式文字認識（OCR）)"></a>Text detection(光学式文字認識（OCR）)</h2><p>続いてText detection。渋川の<a href="https://www.future.co.jp/recruit/common/img/member/chart_14_pc.png" target="_blank" rel="noopener">スペックのレーダーチャート</a>を解析してみましょう。</p><img src="/images/20200218/photo_20200218_06.png" class="img-middle-size"><figure class="highlight sh"><figcaption><span>Request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">'Content-Type:application/json'</span> -d <span class="string">'&#123;"requests":[&#123;"image":&#123;"source":&#123;"imageUri":"https://www.future.co.jp/recruit/common/img/member/chart_14_pc.png"&#125;&#125;,"features":[&#123;"type":"TEXT_DETECTION"&#125;]&#125;]&#125;'</span> https://vision.googleapis.com/v1/images:annotate?key=xxxxxxxxxxx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;responses&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;textAnnotations&quot;: [</span><br><span class="line">      &quot;～～　中略　～～&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;text&quot;: &quot;コミュケーションカ\nメイタリティ\n画性\n5.\n3\n4\n5.\nインライン\nスケート\nメタ学習法\nオタク度\nLO\n&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析したワードを整理すると</p><table><thead><tr><th>text</th></tr></thead><tbody><tr><td>コミュケーションカ</td></tr><tr><td>メイタリティ</td></tr><tr><td>画性</td></tr><tr><td>5</td></tr><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>5</td></tr><tr><td>インラインスケート</td></tr><tr><td>メタ学習法オタク度</td></tr></tbody></table><p>一部の文字はレーダーチャートの線と重なって別の文字として認識されてしまったり、読み込めなかったりしていますが(目的にもよりますが)十分な精度かと思います。</p><p>画像AIってすごいですね。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>機械学習と聞くと利用できるようにするのにトレーニングが必要で、ある種の車輪の再発明に近い作業が必要になり、コストと時間が掛かるものと思っていたのですが、事前トレーニング済みの機械学習モデルが安価にお手軽に利用できてとても便利ですね。様々な検出のタイプがあり、(当たり前ではありますが)適切なタイプを選ぶ必要があるのでそこさえ間違えなければ多種多様なニーズに応えられる素晴らしいAPIかと思います。Vision APIのすばらしさを実感できる検証となりました。</p><p>今回は検証目的でプロジェクトを作成したのでプロジェクトを削除して完了です。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;今回は&lt;a href=&quot;https://future-archit
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#8 gcloud compute sshじゃなくてsshコマンドを使いたいあなたへ</title>
    <link href="https://future-architect.github.io/articles/20200217/"/>
    <id>https://future-architect.github.io/articles/20200217/</id>
    <published>2020-02-17T01:56:29.000Z</published>
    <updated>2020-02-18T01:33:25.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a>の8日目です。</p><p>いきなりですが、 <code>gcloud compute ssh</code>コマンドは便利ですよね。 </p><p>ssh先のGCEインスタンスとクライアント間で、キーペア(秘密鍵/公開鍵)の自動生成 -&gt; GCEインスタンスへの鍵配置を自動で行ってくれて、ユーザーは鍵の存在を意識することなくsshできるコマンドですが、<code>gcloud compute ssh</code>コマンドじゃなくて、素のsshコマンドでGCEインスタンスにsshしたい、という方もいらっしゃるのではないでしょうか。</p><p>例えば、以下のケース(あれ、少ない…)</p><ul><li>使い慣れたsshクライアント(TeraTerm等)を使ってsshしたい</li><li>VScodeのsshプラグイン(便利ですよね)を使ってリモートサーバー上のファイルを編集したい</li></ul><p>そんな方は、きっと <code>~/.ssh</code> 配下に生成された秘密鍵( <code>google_compute_engine</code>) とホスト情報を <code>~/.ssh/config</code> に手動で追加されていることでしょう。</p><p>ただ、対象のホストが多くなると都度configを更新するのは大変ですよね。実はこのconfigへの追加、 <code>gcloud compute config-ssh</code>コマンドを使えば 自動でやってくれますよ! (<strong>本題</strong>)</p><h2 id="やってみる"><a href="#やってみる" class="headerlink" title="やってみる"></a>やってみる</h2><p>まずは、 <code>gcloud compute ssh</code>コマンドを使って <code>test-instance</code>にsshしてみましょう。<br>自動でキーペアを生成してくれていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">❯ gcloud compute ssh <span class="built_in">test</span>-instance  --project <span class="built_in">test</span>-project --zone asia-northeast1<span class="_">-a</span>                                                 </span><br><span class="line">WARNING: The public SSH key file <span class="keyword">for</span> gcloud does not exist.</span><br><span class="line">WARNING: The private SSH key file <span class="keyword">for</span> gcloud does not exist.</span><br><span class="line">WARNING: You <span class="keyword">do</span> not have an SSH key <span class="keyword">for</span> gcloud.</span><br><span class="line">WARNING: SSH keygen will be executed to generate a key.</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/hoge/.ssh/google_compute_engine.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/hoge/.ssh/google_compute_engine.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:PQXtls0bpoISsn+/u2vDpqMKBORO5VEFgEGqyJ4klcM hoge@MAC00011</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|.+o+ooo.  ..     |</span></span><br><span class="line"><span class="string">|+oo..      ..    |</span></span><br><span class="line"><span class="string">|ooE.       ..+   |</span></span><br><span class="line"><span class="string">|*o .. .  . .+ =  |</span></span><br><span class="line"><span class="string">|++.  o .S.o. o o |</span></span><br><span class="line"><span class="string">|+.. . . . ... .  |</span></span><br><span class="line"><span class="string">| o.  . . . .     |</span></span><br><span class="line"><span class="string">|   .  . o =      |</span></span><br><span class="line"><span class="string">|    ...o.***     |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">Updating project ssh metadata...⠹Updated [https://www.googleapis.com/compute/v1/projects/test-project].</span></span><br><span class="line"><span class="string">Updating project ssh metadata...done.</span></span><br><span class="line"><span class="string">Waiting for SSH key to propagate.</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>compute.3504985360589690116<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Linux test-instance 4.9.0-12-amd64 #1 SMP Debian 4.9.210-1 (2020-01-20) x86_64</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The programs included with the Debian GNU/Linux system are free software;</span></span><br><span class="line"><span class="string">the exact distribution terms for each program are described in the</span></span><br><span class="line"><span class="string">individual files in /usr/share/doc/*/copyright.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span></span><br><span class="line"><span class="string">permitted by applicable law.</span></span><br><span class="line"><span class="string">hoge@test-instance:~$</span></span><br></pre></td></tr></table></figure><p>ローカルの<code>~/.ssh</code>配下にキーペア( <code>google_compute_engine</code>, <code>google_compute_engine.pub</code>)が生成されていますね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ ls ~/.ssh</span><br><span class="line">config                     google_compute_engine      google_compute_engine.pub  google_compute_known_hosts</span><br></pre></td></tr></table></figure><p><strong>ここで本題の <code>gcloud compute config-ssh</code> の出番です。</strong> 実行してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">❯ gcloud compute config-ssh --project <span class="built_in">test</span>-project</span><br><span class="line">You should now be able to use ssh/scp with your instances.</span><br><span class="line">For example, try running:</span><br><span class="line"></span><br><span class="line">  $ ssh <span class="built_in">test</span>-instance.asia-northeast1-a.test-project</span><br></pre></td></tr></table></figure><p> <code>~/.ssh/config</code> に <code>test-instance</code>が追加されていますね! </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">❯ cat ~/.ssh/config</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Compute Engine Section</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following has been auto-generated by "gcloud compute config-ssh"</span></span><br><span class="line"><span class="comment"># to make accessing your Google Compute Engine virtual machines easier.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To remove this blob, run:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   gcloud compute config-ssh --remove</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can also manually remove this blob by deleting everything from</span></span><br><span class="line"><span class="comment"># here until the comment that contains the string "End of Google Compute</span></span><br><span class="line"><span class="comment"># Engine Section".</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You should not hand-edit this section, unless you are deleting it.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Host <span class="built_in">test</span>-instance.asia-northeast1-a.test-project</span><br><span class="line">    HostName 35.200.9.109</span><br><span class="line">    IdentityFile /Users/hoge/.ssh/google_compute_engine</span><br><span class="line">    UserKnownHostsFile=/Users/hoge/.ssh/google_compute_known_hosts</span><br><span class="line">    HostKeyAlias=compute.3504985360589690116</span><br><span class="line">    IdentitiesOnly=yes</span><br><span class="line">    CheckHostIP=no</span><br><span class="line"></span><br><span class="line"><span class="comment"># End of Google Compute Engine Section</span></span><br></pre></td></tr></table></figure><p>あとは、使い慣れた sshコマンドでアクセスできますよ。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ ssh <span class="built_in">test</span>-instance.asia-northeast1-a.test-project</span><br><span class="line">Last login: Sun Feb 16 11:58:05 2020 from 126.228.201.100</span><br><span class="line">hoge@<span class="built_in">test</span>-instance:~$</span><br></pre></td></tr></table></figure><p>これで快適なsshライフ??が送れますね</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#7 GCPのData Transfer Serviceを使って簡単にS3からBigQueryにデータ転送をしてみる</title>
    <link href="https://future-architect.github.io/articles/20200214/"/>
    <id>https://future-architect.github.io/articles/20200214/</id>
    <published>2020-02-14T00:39:28.000Z</published>
    <updated>2020-02-14T00:50:34.981Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP集中連載</a>の7回目です。</p><p>まずは簡単に自己紹介をさせてください。TIGのDXチームに所属している加部です。入社してからは主にインフラやデータベースを中心に仕事をしており、現在はGOでバックエンドのAPIの開発なんかもしています。<br>突然ですがAWSを利用しているけどビッグデータの蓄積や解析はBigQueryで実施したい、なんて意見も最近多くなってきているようですね。実際にS3からBigQueryのデータ転送について検索すると、自前でデータ転送を作成してみましたや、データ転送をサービスとして販売しているような会社もあります。そんな中GCPが提供しているBigQeryへのデータ転送サービス<a href="https://cloud.google.com/bigquery/transfer/" target="_blank" rel="noopener">DataTransferService</a>のソース元としてS3が追加され、簡単にS3からBigQueryのデータ転送のジョブを作成できるようになりました。まだ、ベータ版でのリリースのみですが今回は実際にS3からのデータ転送を試してみましょう。</p><h1 id="そもそもDataTransferServiceとは"><a href="#そもそもDataTransferServiceとは" class="headerlink" title="そもそもDataTransferServiceとは"></a>そもそもDataTransferServiceとは</h1><img src="/images/20200214/photo_20200214_01.png" class="img-very-small-size"><blockquote><p>BigQuery Data Transfer Service は、あらかじめ設定されたスケジュールに基づき、BigQuery BigQuery Data Transfer Service は、あらかじめ設定されたスケジュールに基づき、BigQuery へのデータの移動を自動化するマネージド サービスです。そのため、アナリティクス チームが BigQuery データ ウェアハウス基盤を構築する際にコードの作成はまったく必要ありません。<br><a href="https://cloud.google.com/bigquery/transfer" target="_blank" rel="noopener">https://cloud.google.com/bigquery/transfer</a></p></blockquote><p>要はBigQueryに対してデータを転送するジョブをマネージドサービスで簡単に作成できるよということですね。<br>マニュアルによると現在下記のようなサービスとの連携が可能となっています。</p><ul><li>AWS S3 </li><li>キャンペーンマネージャー</li><li>Cloud Strage</li><li>Google アドマネージャー</li><li>Google 広告</li><li>Google Merchant Center</li><li>Google Play</li><li>検索広告360</li><li>YouTubeチャンネル</li><li>YouTubeコンテンツ所有者</li></ul><p>今までは主にGoogle系のサービスとの親和性が高く、AWSのS３は初めてのGoogle以外のソース元のサービスになるのではないでしょうか。</p><h1 id="今回の構成と手順"><a href="#今回の構成と手順" class="headerlink" title="今回の構成と手順"></a>今回の構成と手順</h1><img src="/images/20200214/photo_20200214_02.png" class="img-middle-size"><p>今回はS3のバケットに格納したCSVファイルのデータを、DataTransferServiceの機能を使ってBiqQueryに転送します。<br>複雑なコマンドや手順があるわけでは無いため、とてもかんたんに設定することができます。本記事では主にコマンドラインによる作成となりますが、もちろんコンソールからポチポチして作成することもできます。</p><ol><li>S3バケットの作成</li><li>シークレットキー、アクセスキーの発行</li><li>DataTransfer APIの有効化</li><li>BigQueryのデータセット、テーブル作成</li><li>転送ジョブの作成</li></ol><h1 id="手順1-AWSでのS3バケットの作成"><a href="#手順1-AWSでのS3バケットの作成" class="headerlink" title="手順1 AWSでのS3バケットの作成"></a>手順1 AWSでのS3バケットの作成</h1><p><strong>S3の作成に関しては下記参照</strong><br><a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/user-guide/create-bucket.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/user-guide/create-bucket.html</a></p><h1 id="手順2-シークレットキー、アクセスキーの発行"><a href="#手順2-シークレットキー、アクセスキーの発行" class="headerlink" title="手順2 シークレットキー、アクセスキーの発行"></a>手順2 シークレットキー、アクセスキーの発行</h1><p>S3のデータ転送をするためには「AmazonS3ReadOnlyAccess」の権限が必要になるため、シークレットキーとアクセスキーを発行するユーザの権限に追加してください。</p><p><strong>シークレットキー、アクセスキーの発行は下記参照</strong><br><a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-services-iam-create-creds.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-services-iam-create-creds.html</a></p><h1 id="手順3-DataTransfer-APIの有効化"><a href="#手順3-DataTransfer-APIの有効化" class="headerlink" title="手順3 DataTransfer APIの有効化"></a>手順3 DataTransfer APIの有効化</h1><p>AWS環境の準備が完了したら次はGCP環境の準備です。まずは<a href="https://cloud.google.com/bigquery-transfer/docs/enable-transfer-service?hl=ja" target="_blank" rel="noopener">DataTransfer APIの有効化</a>にしましょう。</p><p>コンソールタブの「APIとサービス」からライブラリを選択し、「BigQuery Data Transfer API」と入力して検索してください。<br><img src="/images/20200214/photo_20200214_03.png"></p><p>検索したAPIを選択して、有効にするをクリックするとAPIが有効化されます。<br><img src="/images/20200214/photo_20200214_04.png"></p><h1 id="手順4-BigQueryのデータセット、テーブル作成"><a href="#手順4-BigQueryのデータセット、テーブル作成" class="headerlink" title="手順4 BigQueryのデータセット、テーブル作成"></a>手順4 BigQueryのデータセット、テーブル作成</h1><p>今回のサンプルデータとして気象庁のデータから2019年の東京の気温のデータを使います。<br><strong>下記URLから取得</strong><br><a href="http://www.data.jma.go.jp/gmd/risk/obsdl/index.php" target="_blank" rel="noopener">http://www.data.jma.go.jp/gmd/risk/obsdl/index.php</a></p><p><a href="https://cloud.google.com/bigquery/docs/bq-command-line-tool?hl=ja" target="_blank" rel="noopener">bqコマンド</a>でデータセットを作成して、取得したデータを格納できるようなテーブルを作成します。</p><p><strong>データセットの作成</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bq --location=asia-northeast1 mk \</span><br><span class="line">  --dataset <span class="built_in">test</span>-project-268106:from_s3</span><br></pre></td></tr></table></figure><p><strong>テーブル作成</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bq mk --table <span class="built_in">test</span>-project-268106:from_s3.temp_tokyo \</span><br><span class="line">  date:string,temp_avg:<span class="built_in">integer</span>,temp_max:<span class="built_in">integer</span>,temp_min:<span class="built_in">integer</span></span><br></pre></td></tr></table></figure><h1 id="手順5-転送ジョブの作成"><a href="#手順5-転送ジョブの作成" class="headerlink" title="手順5 転送ジョブの作成"></a>手順5 転送ジョブの作成</h1><p>いよいよS3からの転送ジョブの作成です。こちらもコマンドラインでの作成していきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">bq mk \</span><br><span class="line">  --transfer_config  \</span><br><span class="line">  --project_id=*** \</span><br><span class="line">  --data_source=amazon_s3 \</span><br><span class="line">  --display_name=data_export_from_s3 \</span><br><span class="line">  --target_dataset=from_s3 \</span><br><span class="line">  --params=<span class="string">'&#123;</span></span><br><span class="line"><span class="string">"data_path":"s3://data-to-bq/temperature/data.csv",</span></span><br><span class="line"><span class="string">"destination_table_name_template":"temp_tokyo",</span></span><br><span class="line"><span class="string">"access_key_id":"***",</span></span><br><span class="line"><span class="string">"secret_access_key":"U***",</span></span><br><span class="line"><span class="string">"file_format":"CSV",</span></span><br><span class="line"><span class="string">"max_bad_records":"0",</span></span><br><span class="line"><span class="string">"ignore_unknown_values":"true",</span></span><br><span class="line"><span class="string">"field_delimiter":",",</span></span><br><span class="line"><span class="string">"skip_leading_rows":"0",</span></span><br><span class="line"><span class="string">"allow_quoted_newlines":"true",</span></span><br><span class="line"><span class="string">"allow_jagged_rows":"false"&#125;'</span></span><br></pre></td></tr></table></figure><p>簡単にコマンドラインのオプションについて抜粋して説明を記載します。</p><ul><li><strong>data_source</strong> : BigQueryにデータを転送するデータソース。今回はS3なので「amazon_s3」を選択</li><li><strong>data_path</strong> : S3のURIを入力します。基本的には「S3://バケット名/フォルダ名/オブエジェクト名」</li><li><strong>access_key_id/secret_access_key</strong> : 手順２で作成したユーザのアクセスキーとシークレットキー</li><li><strong>file_format</strong> : 今回はCSVデータがサンプルデータなので「CSV」を入力。CSV以外にも、JSONやPARQUETなどのファイルフォーマットも選択することが可能</li><li><strong>field_delimiter</strong> : 今回はカンマ区切りのCSVのため「,」を入力</li><li><strong>skip_leading_rows</strong> : スキップするヘッダの行数。今回はヘッダ行を含まないデータにしているため「０」</li></ul><p>コマンドを実行するとGoogleアカウントのログイン許可のURLが表示され、URLのリンクに飛び認証コードを入力すると正常に作成されましたと表示されます。コンソールからも転送ジョブが作成されていることが確認できました。<br><img src="/images/20200214/1.png" style="border:solid 1px #000000"></p><p>ジョブが作成されるとその後すぐに実行され、コンソールから実行ログを確認することができます。<br><img src="/images/20200214/2.png" style="border:solid 1px #000000"></p><p>今回は小さなデータでしたが3分ほどかかってジョブは終了しました。<br>実際にSQLでデータを見てみると下記の様に取得することができます。<br><img src="/images/20200214/photo_20200214_05.png" class="img-small-size"></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>注意点としてはコマンドラインからの作成の場合、スケジュールの選択オプションがありませんでした。どうやらデフォルト値である24時間ごと(日時)が自動で選択されているようです。作成後にコンソールからジョブのスケジュールを編集することは可能です。下記のように毎日、毎週、毎月、カスタム、オンデマンドと選ぶことができます。<br><img src="/images/20200214/3.png" class="img-middle-size"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回はGCPのコマンドラインで作成しましたがInfrastructure as Codeで有名なTerraformなどでも作成することができます。今回の機能を実運用で利用するとなるとS3のパス設計など検討することは他にもあるとは思いますが、AWSを使いつつGCPのBigQueryを利用するなどのマルチクラウドの夢が広がるような機能ですね。今後もさらなる機能拡張を期待します。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/&quot;&gt;GCP集中連載&lt;/a&gt;の7回目です。&lt;/p&gt;
&lt;p&gt;まずは簡単に自己紹介をさせてください。TIGのDXチームに所属している加部で
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
      <category term="BigQuery" scheme="https://future-architect.github.io/tags/BigQuery/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#6 Terraform Validatorを使って、GCPのセキュリティポリシーの自動チェックを行う</title>
    <link href="https://future-architect.github.io/articles/20200213/"/>
    <id>https://future-architect.github.io/articles/20200213/</id>
    <published>2020-02-13T01:26:28.000Z</published>
    <updated>2020-02-13T01:38:31.258Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP集中連載</a>の6回目です。今回は<strong>Terraform Validatorを使って、組織のセキュリティポリシーの自動チェックを継続的に行う</strong>方法を紹介します。併せて、ポリシーをコードとして管理する方法も紹介します。<strong>Policy as code</strong> です。もちろんセキュリティポリシーのみだけではなく、命名規則やリージョン制限なども扱えます。</p><h1 id="Infrastructure-as-code-理想と現実"><a href="#Infrastructure-as-code-理想と現実" class="headerlink" title="Infrastructure as code 理想と現実"></a>Infrastructure as code 理想と現実</h1><p>Infrastructure as code (以下 IaC)、ここ最近大分一般的になってきました。弊社でも大半のプロジェクトは導入しています。3年前とかに導入するために一苦労していた時代が懐かしい..<br>IaCが当たり前になった今、インフラの構成管理はもう問題ないかというとそうではありません。<strong>特にプロジェクト数がスケールする場合</strong>、以下のような問題が発生してしまっているのではないでしょうか。</p><ul><li>各チームに権限を委譲しインフラを管理してもらうが、組織のポリシーに反したリソースが作成されてしまう</li><li>そもそも組織のポリシーが定義・明文化できていない</li><li>できていても周知できない、周知できていても、守ってもらえない</li></ul><p>例えば、”GCSのバケットを全世界に公開してしまっている” という誤った設定も本番環境にデプロイされてしまうかもしれません。</p><img src="/images/20200213/photo_20200213_01.png"><p>GCPだけではなく、多くのクラウド管理者が同じような悩みを抱えているかと思います。私もその一人です。各チームの開発者がクラウドインフラに熟知しているわけではありません。では、クラウド管理者がすべてソースコードをレビューすればよいか、いやいや、それも現実的ではない。</p><p>IaCがアプリケーション開発やっと同じ土俵に立った今、同じく <strong>CI(継続的インテグレーション)</strong> の仕組みが必要になってくるのは、自然の流れかと思います。terraform fmtがされているか、planが通るか、等の簡単なチェックをやっている人は多いと思いますが、それよりも高度なチェックを行う仕組みがなく私も方法を探しておりました。</p><h1 id="Terraform-Validator-とは"><a href="#Terraform-Validator-とは" class="headerlink" title="Terraform Validator とは"></a>Terraform Validator とは</h1><p>これを実現するのが、今回紹介する <strong>Terraform Validator</strong> です。Terraform Validatorは、 <strong>terraformがapplyされる前に、インフラのリソース設定が定義したポリシーに従っているかをチェックすることができるツール</strong>です。GCPのオープンソースとして公開されています。 <a href="https://github.com/GoogleCloudPlatform/terraform-validator" target="_blank" rel="noopener">GoogleCloudPlatform/terraform-validator</a></p><p>以下が概要の図です。</p><img src="/images/20200213/photo_20200213_02.png"><p>仕組みはごく単純です</p><ul><li>Policy をソースコード(yaml)として定義</li><li>Terraformのplanの結果(json)を生成</li><li>Terraform Validatorに読み込みさせ、チェック結果を出力</li></ul><p>ポリシーに反したリソースがterraformで定義された場合、以下のように <code>Found Violations</code> と出力されます。 (以下のサンプルは、GCSのロケーションが許可されていないリージョンを利用している)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sample</span></span><br><span class="line">$ terraform-validator validate --policy-path=<span class="variable">$&#123;POLICY_PATH&#125;</span> ./terraform.tfplan.json</span><br><span class="line">Found Violations:</span><br><span class="line">Constraint allow_some_storage_location on resource //storage.googleapis.com/validator-trial: //storage.googleapis.com/validator-trial is <span class="keyword">in</span> a disallowed location.</span><br></pre></td></tr></table></figure><h1 id="ハンズオン"><a href="#ハンズオン" class="headerlink" title="ハンズオン"></a>ハンズオン</h1><p>ではさっそく、実際に試してみます。<strong>“GCSのロケーションに制限をかける”</strong> シンプルなパターンで試してみます。以下のようにフォルダ構成を用意し、2つのファイルを作成しました。</p><ul><li><code>storage_location.yaml</code> : (ポリシーを定義するコード)</li><li><code>main.tf</code> : (terraformのコード)</li></ul><img src="/images/20200213/photo_20200213_03.png"><h2 id="Terraform-Validator-インストール"><a href="#Terraform-Validator-インストール" class="headerlink" title="Terraform Validator インストール"></a>Terraform Validator インストール</h2><p>バイナリファイルがGCSで公開されているので、最新版をダウンロードし適当なパスに配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gsutil ls -r gs://terraform-validator/releases</span><br><span class="line">$ gsutil cp gs://terraform-validator/releases/2020-01-23/terraform-validator-linux-amd64 .</span><br><span class="line">$ mv terraform-validator-linux-amd64 terraform-validator-linux-amd64</span><br><span class="line">$ chmod 755 terraform-validator</span><br></pre></td></tr></table></figure><h2 id="Policyを定義"><a href="#Policyを定義" class="headerlink" title="Policyを定義"></a>Policyを定義</h2><p>PolicyをGit cloneし、<code>POLICY_PATH</code> を定義</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/forseti-security/policy-library.git</span><br><span class="line">$ <span class="built_in">export</span> POLICY_PATH=<span class="string">"/&lt;your_work_space&gt;/policy-library"</span></span><br></pre></td></tr></table></figure><p>Sampleからファイルをコピーし、ポリシーを定義します。policies/constraints 配下に配置したファイルが有効化されます。今回はGCSのLocationに制限をかけます (<strong>ap-northeast-1のみを許可する</strong>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /&lt;your_work_space&gt;/policy-library/policies/constraints</span><br><span class="line">$ cp ../../samples/storage_location.yaml .</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">constraints.gatekeeper.sh/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">GCPStorageLocationConstraintV1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">allow_some_storage_location</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  severity:</span> <span class="string">high</span></span><br><span class="line"><span class="attr">  match:</span></span><br><span class="line"><span class="attr">    target:</span> <span class="string">["organization/*"]</span></span><br><span class="line"><span class="attr">  parameters:</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">"allowlist"</span></span><br><span class="line"><span class="attr">    locations:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">asia-northeast1</span></span><br><span class="line"><span class="attr">    exemptions:</span> <span class="string">[]</span></span><br></pre></td></tr></table></figure><h2 id="Terraform-planの実行"><a href="#Terraform-planの実行" class="headerlink" title="Terraform planの実行"></a>Terraform planの実行</h2><p>main.tfは以下のように定義されています。<code>location=&quot;us-central1-a&quot;</code> と設定しています<br>(その他 variable.tf, provider.tf等は省略)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;google_storage_bucket&quot; &quot;validator_trial&quot; &#123;</span><br><span class="line">      project       = &lt;your project&gt;</span><br><span class="line">      name          = &quot;validator-trial&quot;</span><br><span class="line">      force_destroy = false</span><br><span class="line">      storage_class = &quot;REGIONAL&quot;</span><br><span class="line">      location      = &quot;us-central1-a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>planを実行 <code>--out=</code> optionを利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan --out=terraform.tfplan</span><br></pre></td></tr></table></figure><p>terraform.tfplanのバイナリをjsonへ変換</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform show -json ./terraform.tfplan &gt; ./terraform.tfplan.json</span><br></pre></td></tr></table></figure><h2 id="Terraform-Validatorの実行"><a href="#Terraform-Validatorの実行" class="headerlink" title="Terraform Validatorの実行"></a>Terraform Validatorの実行</h2><p>これで準備は整いました。Terraform Validatorの実行を行います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ terraform-validator validate --policy-path=<span class="variable">$&#123;POLICY_PATH&#125;</span> ./terraform.tfplan.json</span><br><span class="line">Found Violations:</span><br><span class="line">Constraint allow_some_storage_location on resource //storage.googleapis.com/validator-trial: //storage.googleapis.com/validator-trial is <span class="keyword">in</span> a disallowed location.</span><br></pre></td></tr></table></figure><p>Validationによりポリシー違反を検知しました！🚫</p><p>main.tf を修正して..</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource "google_storage_bucket" "validator_trial" &#123;</span><br><span class="line">      project       = &lt;your project&gt;</span><br><span class="line">      name          = "validator-trial"</span><br><span class="line">      force_destroy = false</span><br><span class="line">      storage_class = "REGIONAL"</span><br><span class="line"><span class="deletion">-     location      = "us-central1-a"</span></span><br><span class="line"><span class="addition">+     location      = "asia-northeast1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再度実行してみると..</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform-validator validate --policy-path=<span class="variable">$&#123;POLICY_PATH&#125;</span> ./terraform.tfplan.json</span><br><span class="line">No violations found</span><br></pre></td></tr></table></figure><p>今度はValidationが成功しました！✅ 期待通りの動きをしてくれました。</p><h1 id="ポリシー定義-Policy-as-code"><a href="#ポリシー定義-Policy-as-code" class="headerlink" title="ポリシー定義 (Policy as code)"></a>ポリシー定義 (Policy as code)</h1><p>サンプルポリシーは、先ほど利用した <a href="https://github.com/forseti-security/policy-library/tree/master/samples" target="_blank" rel="noopener">forseti-security/policy-library</a> にあります。これらのyamlファイルを <code>POLICY_PATH</code> で定義した <code>/&lt;your_work_space&gt;/policy-library</code> の中の <code>policies/constraints/</code> 配下に配置すればOKです。Policy as codeが簡単に実現できます。<br>以下に、サンプルから一部をピックアップしてご紹介します。セキュリティポリシーを定義できるほかにも、リソースの命名規則の制限ができたりするのは地味に嬉しいですね。</p><h4 id="ポリシー定義のサンプル"><a href="#ポリシー定義のサンプル" class="headerlink" title="ポリシー定義のサンプル"></a>ポリシー定義のサンプル</h4><ul><li>一般的な制限<ul><li>リソースの命名規則(正規表現で指定)</li><li>Labelのアタッチの強制</li><li>リソースタイプの制限</li></ul></li><li>GCE<ul><li>Public IPの無効化</li><li>NWのWhitelist指定</li></ul></li><li>Cloud SQL<ul><li>Public IPの無効化</li><li>Maintenance Windownの制限</li><li>SSLの強制</li></ul></li><li>GKE<ul><li>Private Clusterの強制</li><li>Dashboardの無効化</li><li>Node poolのAuto upgradeの強制</li><li>Node OSの指定</li></ul></li><li>BigQuery<ul><li>Datasetのパブリック公開制限</li></ul></li><li>IAM<ul><li>Service Accountへ付与するRoleの制限</li><li>Audit loggingの強制</li></ul></li><li>Network<ul><li>Firewall ssh,rdp rule パブリック公開の禁止</li></ul></li><li>VPC Service Control<ul><li>有効化プロジェクトの指定</li></ul></li></ul><p>どのような制限をかけることができるかイメージできたでしょうか。実はこちらに用意されていないものでも、Custom Policyとして自身でポリシールールを記述することもできます。詳細は<a href="https://github.com/forseti-security/policy-library/blob/master/docs/constraint_template_authoring.md" target="_blank" rel="noopener">こちら</a></p><h1 id="実際の運用"><a href="#実際の運用" class="headerlink" title="実際の運用"></a>実際の運用</h1><p>実行方法とポリシーの定義方法が分かったところで、実際の運用方法についてです。<br>以下のように、TerraformのソースコードのPRに対して、Terraform Validatorを実行し、結果をPRにフィードバックさせるようにするのが良いと思います。Githubと連携が可能であれば、CloudBuildで以下のようにCIを回すのが簡単でよいです。</p><img src="/images/20200213/photo_20200213_04.png"><p>Cloud BuildのSteps イメージ</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">gcr.io/config-validator/terraform-validator</span></span><br><span class="line"><span class="attr">  entrypoint:</span> <span class="string">terraform</span></span><br><span class="line"><span class="attr">  dir:</span> <span class="string">your-terraform-folder</span></span><br><span class="line"><span class="attr">  args:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">init</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">gcr.io/config-validator/terraform-validator</span></span><br><span class="line"><span class="attr">  dir:</span> <span class="string">your-terraform-folder</span></span><br><span class="line"><span class="attr">  entrypoint:</span> <span class="string">terraform</span></span><br><span class="line"><span class="attr">  args:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">plan</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="bullet">-out=terraform.tfplan</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">gcr.io/config-validator/terraform-validator</span></span><br><span class="line"><span class="attr">  entrypoint:</span> <span class="string">"/bin/bash"</span></span><br><span class="line"><span class="attr">  args:</span> <span class="string">['-c',</span> <span class="string">'terraform show -json terraform.tfplan &gt; terraform.tfplan.json'</span><span class="string">]</span></span><br><span class="line"><span class="attr">  dir:</span> <span class="string">your-terraform-folder</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">gcr.io/config-validator/terraform-validator</span></span><br><span class="line"><span class="attr">  dir:</span> <span class="string">your-terraform-folder</span></span><br><span class="line"><span class="attr">  args:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">validate</span></span><br><span class="line"><span class="bullet">  -</span> <span class="bullet">--policy-path=/&lt;your_work_space&gt;/policy-library</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">your-terraform-folder/terraform.tfplan.json</span></span><br></pre></td></tr></table></figure><p>PR上でのフィードバックのイメージ<br><img src="/images/20200213/photo_20200213_05.png"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>本記事ではあまり触れませんでしたが、実は、<a href="https://forsetisecurity.org/" target="_blank" rel="noopener">Forseti</a>というツールを用いてOngoingでの監視も可能です。こちらもGCPが公開しているオープンソースのツールです。これを用いれば、一元管理されたポリシーでTerraform経由ではない手作業によるポリシー違反の発生も検知することができます。</p><img src="/images/20200213/photo_20200213_06.png"><p>GCPのプロジェクト数がスケールする際に必ずぶち当たるであろうこの課題、私たちもTerraform Validatorを用いて解決しようと現在、試行錯誤中です。導入自体はシンプルにできるため、まずは簡単なポリシーのチェックから始めてみてはいかがでしょうか。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li><li><a href="https://future-architect.github.io/articles/20190816/">はじめてのTerraform 0.12 ～環境構築～</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/&quot;&gt;GCP集中連載&lt;/a&gt;の6回目です。今回は&lt;strong&gt;Terraform Validatorを使って、組織のセキュリティポリ
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる</title>
    <link href="https://future-architect.github.io/articles/20200212/"/>
    <id>https://future-architect.github.io/articles/20200212/</id>
    <published>2020-02-12T00:14:36.000Z</published>
    <updated>2020-02-12T00:45:18.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前書き"><a href="#前書き" class="headerlink" title="前書き"></a>前書き</h2><p>こんにちは、TIG所属インフラエンジニアの市川です。</p><p>突然ですが、普段生活するうえでカギ🔑をなくした、忘れたことはないでしょうか。私はあります。なくしたことはないけど、うっかり置き忘れちゃうんですよね。</p><p>それがことインフラ構築の場面ではどうでしょうか。最近はとにかく多くのカギを管理しなくてはなりません。API Keyとか気づいたら何が何だか分からなくなり、苦渋の決断の末、再度払い出すことも多いのでは無いでしょうか。検証ならまぁ…ギリギリですが、本番ではやっちゃダメ絶対です。</p><p>ということで、そんな管理人の皆さんに朗報です。 <strong>遂にGCPにシークレット管理機能がやってきました！</strong> CLIツールのBerglasとGUIで管理するSecret Managerを簡単にご紹介したいと思います。</p><h2 id="Berglasを使ってみる"><a href="#Berglasを使ってみる" class="headerlink" title="Berglasを使ってみる"></a>Berglasを使ってみる</h2><p>サクっと利用するならCloud Shellだよね！ということで、以下Cloud Shellで作業をしています。</p><h3 id="Berglasとは？"><a href="#Berglasとは？" class="headerlink" title="Berglasとは？"></a>Berglasとは？</h3><p><a href="https://github.com/GoogleCloudPlatform/berglas" target="_blank" rel="noopener">Githubページ</a>でこのツールについて確認します。</p><blockquote><p>Berglasは、Google Cloudでシークレットを保存および取得するためのコマンドラインツールおよびライブラリです。シークレットはCloud KMSで暗号化され、Cloud Storageに保存されます。 Secret Managerには相互運用可能なレイヤーもあります。</p><ul><li>CLIとして：Berglasは、Google Cloudでのデータの暗号化、復号化、保存のプロセスを自動化します。</li><li>ライブラリとして：BerglasはさまざまなGoogle Cloudランタイムへのシークレットの組み込みを自動化します</li></ul><p>Berglasは、公式にサポートされているGoogle製品ではありません。</p></blockquote><p>なるほど。GCPのリポジトリで開発されてるのに公式製品ではないのね。CLIとしてもライブラリとしても利用可能というところがイケてますね。</p><h3 id="Berglasのインストール（正確にはバイナリをダウンロード）"><a href="#Berglasのインストール（正確にはバイナリをダウンロード）" class="headerlink" title="Berglasのインストール（正確にはバイナリをダウンロード）"></a>Berglasのインストール（正確にはバイナリをダウンロード）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget https://storage.googleapis.com/berglas/master/linux_amd64/berglas</span><br><span class="line"><span class="meta">$</span> chmod +x berglas</span><br></pre></td></tr></table></figure><p>Dockerコンテナもあるようなので、好みに応じて使い分けください。</p><h3 id="環境変数の準備と依存してるAPIの有効化"><a href="#環境変数の準備と依存してるAPIの有効化" class="headerlink" title="環境変数の準備と依存してるAPIの有効化"></a>環境変数の準備と依存してるAPIの有効化</h3><p>サクッと設定しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境変数の設定</span></span><br><span class="line">$ <span class="built_in">export</span> PROJECT_ID=my-secret-project</span><br><span class="line">$ <span class="built_in">export</span> BUCKET_ID=my-secrets-bucket-123</span><br><span class="line"></span><br><span class="line"><span class="comment"># APIの有効化</span></span><br><span class="line">$ gcloud services <span class="built_in">enable</span> --project <span class="variable">$&#123;PROJECT_ID&#125;</span> \</span><br><span class="line">  cloudkms.googleapis.com \</span><br><span class="line">  storage-api.googleapis.com \</span><br><span class="line">  storage-component.googleapis.com</span><br></pre></td></tr></table></figure><h3 id="Berglas環境のBootstrap"><a href="#Berglas環境のBootstrap" class="headerlink" title="Berglas環境のBootstrap"></a>Berglas環境のBootstrap</h3><p>次コマンドを実行すると、シークレットを保存するための新しいCloud Storageバケットと、データを暗号化するためのCloud KMSキーが自動的に作成されます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas bootstrap --project <span class="variable">$PROJECT_ID</span> --bucket <span class="variable">$BUCKET_ID</span></span></span><br></pre></td></tr></table></figure><p>成功すると下記のような出力が確認できます！最近のCLIツールってこれでもかってくらい優しくできていますよね。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Successfully created berglas environment:</span><br><span class="line"></span><br><span class="line">  Bucket: my-secrets-bucket-123</span><br><span class="line">  KMS key: projects/my-secret-project/locations/global/keyRings/berglas/cryptoKeys/berglas-key</span><br><span class="line"></span><br><span class="line">To create a secret:</span><br><span class="line"></span><br><span class="line">  berglas create my-secrets-bucket-123/my-secret abcd1234 \</span><br><span class="line">    --key projects/my-secret-project/locations/global/keyRings/berglas/cryptoKeys/berglas-key</span><br><span class="line"></span><br><span class="line">To grant access to that secret:</span><br><span class="line"></span><br><span class="line">  berglas grant my-secrets-bucket-123/my-secret \</span><br><span class="line">    --member user:jane.doe@mycompany.com</span><br><span class="line"></span><br><span class="line">For more help and examples, please run &quot;berglas -h&quot;.</span><br></pre></td></tr></table></figure><h3 id="シークレットの作成"><a href="#シークレットの作成" class="headerlink" title="シークレットの作成"></a>シークレットの作成</h3><p>サンプルケースとして、<a href="http://httpbin.org/" target="_blank" rel="noopener">httpbin</a>のBasic認証APIへリクエストを投げ <code>200 OK</code> するのCloud Functionsを作ります。</p><p><a href="http://httpbin.org/" target="_blank" rel="noopener">httpbin</a>のBasic認証は次のようなレスポンスを返すモックサーバです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 認証情報なしだと401を返す</span></span><br><span class="line">$ curl -i -G <span class="string">"https://httpbin.org/basic-auth/basic-user-name/basic-user-pass"</span></span><br><span class="line">HTTP/2 401</span><br><span class="line">date: Tue, 11 Feb 2020 10:43:43 GMT</span><br><span class="line">content-length: 0</span><br><span class="line">server: gunicorn/19.9.0</span><br><span class="line">www-authenticate: Basic realm=<span class="string">"Fake Realm"</span></span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">access-control-allow-credentials: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 認証情報を付けて送るとちゃんと200を返す</span></span><br><span class="line">$ curl -i -G -u basic-user-name <span class="string">"https://httpbin.org/basic-auth/basic-user-name/basic-user-pass"</span></span><br><span class="line">Enter host password <span class="keyword">for</span> user <span class="string">'basic-user-name'</span>:</span><br><span class="line">HTTP/2 200</span><br><span class="line">date: Tue, 11 Feb 2020 10:45:16 GMT</span><br><span class="line">content-type: application/json</span><br><span class="line">content-length: 58</span><br><span class="line">server: gunicorn/19.9.0</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">access-control-allow-credentials: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"authenticated"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"user"</span>: <span class="string">"basic-user-name"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ということで、ユーザ名・パスワードを認証情報としてシークレットにしていきましょう！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas create <span class="variable">$&#123;BUCKET_ID&#125;</span>/api-user basic-user-name \</span></span><br><span class="line">  --key projects/$&#123;PROJECT_ID&#125;/locations/global/keyRings/berglas/cryptoKeys/berglas-key</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> berglas create <span class="variable">$&#123;BUCKET_ID&#125;</span>/api-pass basic-user-pass \</span></span><br><span class="line">  --key projects/$&#123;PROJECT_ID&#125;/locations/global/keyRings/berglas/cryptoKeys/berglas-key</span><br></pre></td></tr></table></figure><h3 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h3><ul><li>Cloud Functionへ渡すサービスアカウントを作成</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud iam service-accounts create berglas-service-account \</span></span><br><span class="line">  --project $&#123;PROJECT_ID&#125; \</span><br><span class="line">  --display-name "berglas Cloud Functions Example"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> SA_EMAIL=berglas-service-account@<span class="variable">$&#123;PROJECT_ID&#125;</span>.iam.gserviceaccount.com</span></span><br></pre></td></tr></table></figure><h4 id="Berglasから先ほど作ったサービスアカウントへシークレットへのアクセス権限を渡す"><a href="#Berglasから先ほど作ったサービスアカウントへシークレットへのアクセス権限を渡す" class="headerlink" title="Berglasから先ほど作ったサービスアカウントへシークレットへのアクセス権限を渡す"></a>Berglasから先ほど作ったサービスアカウントへシークレットへのアクセス権限を渡す</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas grant <span class="variable">$&#123;BUCKET_ID&#125;</span>/api-user --member serviceAccount:<span class="variable">$&#123;SA_EMAIL&#125;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> berglas grant <span class="variable">$&#123;BUCKET_ID&#125;</span>/api-pass --member serviceAccount:<span class="variable">$&#123;SA_EMAIL&#125;</span></span></span><br></pre></td></tr></table></figure><h4 id="Goのプログラム"><a href="#Goのプログラム" class="headerlink" title="Goのプログラム"></a>Goのプログラム</h4><p>golangでBASIC認証をする場合は<a href="https://golang.org/pkg/net/http/#Request.SetBasicAuth" target="_blank" rel="noopener"><code>SetBasicAuth</code></a>を使います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fn</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/GoogleCloudPlatform/berglas/pkg/auto"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readBody</span><span class="params">(res *http.Response)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    data, err := ioutil.ReadAll(res.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* dataはbyte型なので、string型に */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"--- ENV VAR FROM BERGLAS ---\n"</span>)</span><br><span class="line">fmt.Fprintf(w, <span class="string">"API_USER: %s\n"</span>, os.Getenv(<span class="string">"API_USER"</span>))</span><br><span class="line">fmt.Fprintf(w, <span class="string">"API_PASS: %s\n"</span>, os.Getenv(<span class="string">"API_PASS"</span>))</span><br><span class="line"></span><br><span class="line">    client := &amp;http.Client&#123;Timeout: time.Duration(<span class="number">3</span>) * time.Second&#125;</span><br><span class="line"></span><br><span class="line">    req, _ := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"https://httpbin.org/basic-auth/basic-user-name/basic-user-pass"</span>, <span class="literal">nil</span>)</span><br><span class="line">    req.SetBasicAuth(os.Getenv(<span class="string">"API_USER"</span>), os.Getenv(<span class="string">"API_PASS"</span>))</span><br><span class="line">    res, err := client.Do(req)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">fmt.Fprintf(w, <span class="string">"--- HTTPBIN RESPONSE ---\n"</span>)</span><br><span class="line">fmt.Fprintf(w, readBody(res))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud <span class="built_in">functions</span> deploy berglas-example-go \</span></span><br><span class="line">  --project $&#123;PROJECT_ID&#125; \</span><br><span class="line">  --region us-central1 \</span><br><span class="line">  --runtime go113 \</span><br><span class="line">  --memory 1G \</span><br><span class="line">  --max-instances 10 \</span><br><span class="line">  --service-account $&#123;SA_EMAIL&#125; \</span><br><span class="line">  --set-env-vars "API_USER=berglas://$&#123;BUCKET_ID&#125;/api-user,API_PASS=berglas://$&#123;BUCKET_ID&#125;/api-pass" \</span><br><span class="line">  --entry-point F \</span><br><span class="line">  --trigger-http \</span><br><span class="line">  --allow-unauthenticated</span><br></pre></td></tr></table></figure><h4 id="テスト実行"><a href="#テスト実行" class="headerlink" title="テスト実行"></a>テスト実行</h4><p>ちゃんとBerglasで作成したシークレットが取得できましたね！<br>割と道のりが長いですが、GCPのサービスから簡単にアクセスできるのは気持ちが良いですね。<br><img src="/images/20200212/photo_20200212_01.png" class="img-small-size"></p><h2 id="Secret-Managerを利用"><a href="#Secret-Managerを利用" class="headerlink" title="Secret Managerを利用"></a>Secret Managerを利用</h2><p>折り返しです。もうしばしお付き合いください。</p><h3 id="Secret-Manageとは？"><a href="#Secret-Manageとは？" class="headerlink" title="Secret Manageとは？"></a>Secret Manageとは？</h3><blockquote><p>インフラストラクチャとアプリケーションレベルのシークレットを暗号化、保存、管理、監査します。<br><a href="https://cloud.google.com/solutions/secrets-management/" target="_blank" rel="noopener">https://cloud.google.com/solutions/secrets-management/</a></p></blockquote><p>簡潔ですね。CloudKMSはGCPの管理するカギで暗号化、復号などをサポートしたサービスですが、もう一枚レイヤが上なサービスのようです。BerglasのGUI版ぐらいの気持ちでいると良いとお思います。</p><h3 id="Secret-Manager画面"><a href="#Secret-Manager画面" class="headerlink" title="Secret Manager画面"></a>Secret Manager画面</h3><p>GUI画面へは<code>セキュリティ -&gt; シークレット マネージャー</code>でアクセスできます。</p><p>作成画面はかなり簡潔で好感度が高いです。この手のサービスはやたらと入力項目が多くて初見殺しなイメージ（勝手）があったので。</p><img src="/images/20200212/photo_20200212_02.png" class="img-small-size" style="border:solid 1px #000000"><p>ラベルで整理ができるのも片づけが苦手な私にぴったりです。（今回はつけていないですが。。。）</p><p>有効化、無効化、破棄も非常に容易にできます。新しいバージョンを選択することで、シークレットの中身の更新と過去のシークレットを一括無効にできます。</p><img src="/images/20200212/photo_20200212_03.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20200212/photo_20200212_04.png" class="img-middle-size" style="border:solid 1px #000000"><h3 id="Berglasで登録したシークレットをSecret-Managerに移す"><a href="#Berglasで登録したシークレットをSecret-Managerに移す" class="headerlink" title="Berglasで登録したシークレットをSecret Managerに移す"></a>Berglasで登録したシークレットをSecret Managerに移す</h3><p>何やらBerglasと連携もできるようなので、ちょこっと触ってみます。</p><ul><li>BerglasからSecret Managerのキーにアクセス</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas access sm://<span class="variable">$&#123;PROJECT_ID&#125;</span>/the-first-secret</span></span><br><span class="line">sugoi-secret</span><br></pre></td></tr></table></figure><ul><li>migrate</li></ul><p><a href="https://cloud.google.com/blog/ja/products/identity-security/introducing-google-clouds-secret-manager" target="_blank" rel="noopener">Google Cloud Blog</a>に「1回限りの」って書いてあるのが不穏ｗ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas migrate <span class="variable">$&#123;BUCKET_ID&#125;</span> --project <span class="variable">$&#123;PROJECT_ID&#125;</span></span></span><br><span class="line">Migrating api-user to projects/my-secret-project/secrets/api-user... done!</span><br><span class="line">Migrating api-pass to projects/my-secret-project/secrets/api-pass... done!</span><br></pre></td></tr></table></figure><p>二回目の実行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas migrate <span class="variable">$&#123;BUCKET_ID&#125;</span> --project <span class="variable">$&#123;PROJECT_ID&#125;</span></span></span><br><span class="line">Migrating api-user to projects/my-secret-project/secrets/api-user... done!</span><br><span class="line">Migrating api-pass to projects/my-secret-project/secrets/api-pass... done!</span><br></pre></td></tr></table></figure><p>通りました。</p><ul><li>画面</li></ul><p>イケてますね！当然ですが、最終更新日はUPLOADした時間になります。</p><img src="/images/20200212/photo_20200212_05.png" class="img-middle-size" style="border:solid 1px #000000"><h3 id="Cloud-FunctionからSecret-Managerを使う"><a href="#Cloud-FunctionからSecret-Managerを使う" class="headerlink" title="Cloud FunctionからSecret Managerを使う"></a>Cloud FunctionからSecret Managerを使う</h3><p>流れとしては、非常に簡単です。</p><ol><li>シークレットアクセサ役割をCloud Functionのサービスアカウントに割り当て</li><li>利用</li></ol><h4 id="サービスアカウントへ役割を割り当て"><a href="#サービスアカウントへ役割を割り当て" class="headerlink" title="サービスアカウントへ役割を割り当て"></a>サービスアカウントへ役割を割り当て</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcloud beta secrets add-iam-policy-binding the-first-secret \</span><br><span class="line">    --role roles/secretmanager.secretAccessor \</span><br><span class="line">    --member serviceAccount:<span class="variable">$&#123;PROJECT_ID&#125;</span>@appspot.gserviceaccount.com</span><br></pre></td></tr></table></figure><h4 id="サンプルプログラム"><a href="#サンプルプログラム" class="headerlink" title="サンプルプログラム"></a>サンプルプログラム</h4><p>シークレットを吐き出すのみというシンプルなコードです。BerglasのクライアントライブラリはgooglecloudがメンテしているのがGoだけでしたが、今回はPythonライブラリがあったのでPythonで書きます。</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> secretmanager</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_secret</span><span class="params">(request)</span>:</span></span><br><span class="line">    client = secretmanager.SecretManagerServiceClient()</span><br><span class="line">    secret_name = <span class="string">'the-first-secret'</span></span><br><span class="line">    project_id = os.getenv(<span class="string">'GCP_PROJECT'</span>)</span><br><span class="line">    resource_name = <span class="string">'projects/&#123;&#125;/secrets/&#123;&#125;/versions/latest'</span>.format(project_id, secret_name)</span><br><span class="line">    res = client.access_secret_version(resource_name)</span><br><span class="line">    secret_string = res.payload.data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> secret_string</span><br></pre></td></tr></table></figure><p>ライブラリ<code>google-cloud-secret-manager</code>が必要なので、<code>requirements.txt</code>も作成しましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-cloud-secret-manager==0.1.1</span><br></pre></td></tr></table></figure><h4 id="デプロイ-1"><a href="#デプロイ-1" class="headerlink" title="デプロイ"></a>デプロイ</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud <span class="built_in">functions</span> deploy print_secret \</span></span><br><span class="line">  --runtime python37 \</span><br><span class="line">  --trigger-http \</span><br><span class="line">  --allow-unauthenticated</span><br></pre></td></tr></table></figure><img src="/images/20200212/photo_20200212_06.png"><p>…ニッコリ😄</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>使い方にちょいとクセというか、お作法があるので、習うより慣れろシリーズだと思います。<br>これでもう、カギの管理に困ることはなくなって、幸せな世界が待っていることでしょう。<br>ご興味のある方は、ぜひ触ってみてはいかがでしょうか。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前書き&quot;&gt;&lt;a href=&quot;#前書き&quot; class=&quot;headerlink&quot; title=&quot;前書き&quot;&gt;&lt;/a&gt;前書き&lt;/h2&gt;&lt;p&gt;こんにちは、TIG所属インフラエンジニアの市川です。&lt;/p&gt;
&lt;p&gt;突然ですが、普段生活するうえでカギ🔑をなくした、忘れたことはな
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#4 Cloud Life Sciencesを見てみた</title>
    <link href="https://future-architect.github.io/articles/20200210/"/>
    <id>https://future-architect.github.io/articles/20200210/</id>
    <published>2020-02-10T02:53:19.000Z</published>
    <updated>2020-02-10T03:14:00.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXチームの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤</a>です。今回はGCP連載企画の4日目です。</p><p>これまでの内容は<a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a>にあります。</p><p>さて、私は業務ではGCPとTerraformを扱っています。コンピューティング・ネットワーキングなどが現在の業務領域でである一方で、ビッグデータ・機械学習関連のサービスはあまり使う機会がなく理解もまだまだな部分が多いです。今回は、Cloud Life Sciencesという、ビッグデータの中でも毛色の違うサービスを調べてみようと思いこの連載に参加しております。割と読み物に近くなったのでさらっと読み流していただければ幸いです。</p><h2 id="私の今まで"><a href="#私の今まで" class="headerlink" title="私の今まで"></a>私の今まで</h2><p>本記事を書くためのモチベーションとしては昔話をすこし挟みます。現在はインフラやネットワークエンジニアとして日々働いていますが、大学時代は化学を専攻し大学院では感染症を専門に研究していました。最終的に遺伝子を触ることなく修了しましたが、生物系に少しでも在籍していたこともあり、今回はわずかな記憶を頼りながら調べています。この記事が最終的にかつての研究の何かに使えたかもしれないと私の中で知識が落とし込めればいいなと考えています。</p><h2 id="Cloud-Life-Sciencesについて"><a href="#Cloud-Life-Sciencesについて" class="headerlink" title="Cloud Life Sciencesについて"></a><a href="https://cloud.google.com/life-sciences" target="_blank" rel="noopener">Cloud Life Sciences</a>について</h2><img src="/images/20200210/1.png" class="img-very-small-size"><p>GCPの中ではビッグデータに属するサービスになります。大規模な生物医学データの処理を費用対効果が高くできることがウリで、対象ユーザーは<code>ライフ サイエンス機関と学術研究機関向け</code>となっています。特に強く謳われているのが、研究に集中できることと結果の再現性にです。遺伝子情報は特に大きなデータ量になるので、得たデータの検証をスピードアップさせることは研究スピード全体を上げることにも繋がります。</p><p>また、アーキテクチャは以下になっており、サービス単体としてではなく、1つのプラットフォームとして動くようです。<br><img src="/images/20200210/photo_20200210_01.png"><br>(引用：<a href="https://cloud.google.com/life-sciences/?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/life-sciences/?hl=ja</a>)</p><h3 id="VCF"><a href="#VCF" class="headerlink" title="VCF"></a>VCF</h3><p>Variant Call Formatと言われる、遺伝子配列の変異データを保存するときに利用されるファイル形式になります。ファイル内の記載内容は以下になります。</p><ul><li>VCFヘッダー行(1~8行目)</li><li>データのフォーマット行(カラムタイトル)<ul><li>染色体番号</li><li>塩基の位置</li><li>塩基(変異箇所)のID</li><li>リファレンス配列上の塩基</li><li>シーケンスデータ上の塩基</li><li>シーケンシングデータのスコア</li><li>フィルタリング条件の通過の有無</li><li>key:dataの形の追加情報</li></ul></li></ul><p>このような形でシーケンス結果を記載しています。DNAの塩基配列についてはアデニン(A)、チミン(T)、グアニン(G)、シトシン(C)の4種類がありますが、それぞれ、A=T、G≡Cとしてペアになっているのでぜひ試すときには思い出してみてください。また後のクエリに使います。</p><h3 id="Variant-Transformsツール"><a href="#Variant-Transformsツール" class="headerlink" title="Variant Transformsツール"></a><a href="https://github.com/googlegenomics/gcp-variant-transforms" target="_blank" rel="noopener">Variant Transforms</a>ツール</h3><p>こちらのツールはGoogleが作成したオープンソースになります。実際にBigQueryに読み込ませるためにはデータの加工が必要になりますので、こちらのツールを使って分析に最適な形で出力することができます。実際のフローにはDataflowが使用されており、BigQueryで分析するまでは以下の図になります。</p><h2 id="実際に流れを掴む"><a href="#実際に流れを掴む" class="headerlink" title="実際に流れを掴む"></a>実際に流れを掴む</h2><p>実際に公開データセットを使ってバリアントを使って少しいじってみましょう。ここは実際のチュートリアルの一部を行なっているので、本記事以外の方法を試したい方は<a href="https://cloud.google.com/life-sciences/docs/how-tos/variant-transforms" target="_blank" rel="noopener">こちら</a>から確認してください。Cloud Consoleで行うとクリーンに進められます。</p><h3 id="GCSからVariant-TransformsツールからBigQueryに送る"><a href="#GCSからVariant-TransformsツールからBigQueryに送る" class="headerlink" title="GCSからVariant TransformsツールからBigQueryに送る"></a>GCSからVariant TransformsツールからBigQueryに送る</h3><p>GCSにバリアントファイルを配置したら実際にツールを使います。使うためには公式のDockerイメージがあるのでこちらを落としてきます。イメージが2GB近くあるので、ダウンロードは気長に待ちましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull gcr.io/cloud-lifesciences/gcp-variant-transforms</span><br></pre></td></tr></table></figure><p>次にスクリプトを実行します。変数は実際に使っているプロジェクト名、バケットなどに置き換えてください。</p><figure class="highlight sh"><figcaption><span>script.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Parameters to replace:</span></span><br><span class="line"><span class="comment"># The GOOGLE_CLOUD_PROJECT is the project that contains your BigQuery dataset.</span></span><br><span class="line">GOOGLE_CLOUD_PROJECT=GOOGLE_CLOUD_PROJECT</span><br><span class="line">INPUT_PATTERN=gs://BUCKET/*.vcf</span><br><span class="line">OUTPUT_TABLE=GOOGLE_CLOUD_PROJECT:BIGQUERY_DATASET.BIGQUERY_TABLE</span><br><span class="line">TEMP_LOCATION=gs://BUCKET/temp</span><br><span class="line"></span><br><span class="line">COMMAND=<span class="string">"vcf_to_bq \</span></span><br><span class="line"><span class="string">    --input_pattern <span class="variable">$&#123;INPUT_PATTERN&#125;</span> \</span></span><br><span class="line"><span class="string">    --output_table <span class="variable">$&#123;OUTPUT_TABLE&#125;</span> \</span></span><br><span class="line"><span class="string">    --temp_location <span class="variable">$&#123;TEMP_LOCATION&#125;</span> \</span></span><br><span class="line"><span class="string">    --job_name vcf-to-bigquery \</span></span><br><span class="line"><span class="string">    --runner DataflowRunner"</span></span><br><span class="line">docker run -v ~/.config:/root/.config \</span><br><span class="line">    gcr.io/cloud-lifesciences/gcp-variant-transforms \</span><br><span class="line">    --project <span class="string">"<span class="variable">$&#123;GOOGLE_CLOUD_PROJECT&#125;</span>"</span> \</span><br><span class="line">    --zones us-west1-b \</span><br><span class="line">    <span class="string">"<span class="variable">$&#123;COMMAND&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>スクリプト実行後は時間がかかるようなので、これも気長に待ちます。<br>実行が終わったら<code>bq</code>コマンドでアウトプットがあるか確認しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bq ls --format=pretty GOOGLE_CLOUD_PROJECT:BIGQUERY_DATASET</span><br></pre></td></tr></table></figure><p>これでVariant Transformツールを使ってファイルをBigQueryに適した形にすることが出来ました。</p><h3 id="BigQueryに読み込ませる"><a href="#BigQueryに読み込ませる" class="headerlink" title="BigQueryに読み込ませる"></a>BigQueryに読み込ませる</h3><p>こちらでは公開プロジェクトのデータを使ってバリアントの分析を行います。データを用いるプロジェクトは<a href="https://www.illumina.com/platinumgenomes.html" target="_blank" rel="noopener">Illumina Platinum Genomes</a>、テーブル名は<code>platinum_genomes_deepvariant_variants_20180823</code>になります。実際のテーブルを５件出力しました。<br><img src="/images/20200210/photo_20200210_02.png"></p><p>実際に流すクエリは以下になります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> filtered_snp_calls <span class="keyword">AS</span> (</span><br><span class="line">   <span class="keyword">SELECT</span></span><br><span class="line">     reference_name,</span><br><span class="line">     c.name,</span><br><span class="line">     <span class="keyword">CONCAT</span>(reference_bases, <span class="string">'-&gt;'</span>, alternate_bases[ORDINAL(<span class="number">1</span>)].alt) <span class="keyword">AS</span> mutation</span><br><span class="line">   <span class="keyword">FROM</span></span><br><span class="line">     <span class="string">`bigquery-public-data.human_genome_variants.platinum_genomes_deepvariant_variants_20180823`</span> <span class="keyword">AS</span> v, <span class="keyword">UNNEST</span>(v.call) <span class="keyword">AS</span> c</span><br><span class="line">   <span class="keyword">WHERE</span></span><br><span class="line">     <span class="comment"># Only include biallelic SNPs.</span></span><br><span class="line">     reference_bases <span class="keyword">IN</span> (<span class="string">'A'</span>,<span class="string">'C'</span>,<span class="string">'G'</span>,<span class="string">'T'</span>)</span><br><span class="line">     <span class="keyword">AND</span> alternate_bases[ORDINAL(<span class="number">1</span>)].alt <span class="keyword">IN</span> (<span class="string">'A'</span>,<span class="string">'C'</span>,<span class="string">'G'</span>,<span class="string">'T'</span>)</span><br><span class="line">     <span class="keyword">AND</span> (ARRAY_LENGTH(alternate_bases) = <span class="number">1</span></span><br><span class="line">       <span class="keyword">OR</span> (ARRAY_LENGTH(alternate_bases) = <span class="number">2</span> <span class="keyword">AND</span> alternate_bases[ORDINAL(<span class="number">2</span>)].alt = <span class="string">'&lt;*&gt;'</span>))</span><br><span class="line">     <span class="comment"># Skip homozygous reference calls and no-calls.</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> g <span class="keyword">FROM</span> <span class="keyword">UNNEST</span>(c.genotype) <span class="keyword">AS</span> g <span class="keyword">WHERE</span> g &gt; <span class="number">0</span>)</span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> g <span class="keyword">FROM</span> <span class="keyword">UNNEST</span>(c.genotype) <span class="keyword">AS</span> g <span class="keyword">WHERE</span> g &lt; <span class="number">0</span>)</span><br><span class="line">     <span class="comment"># Include only high quality calls.</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> ft <span class="keyword">FROM</span> <span class="keyword">UNNEST</span>(c.filter) ft <span class="keyword">WHERE</span> ft <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">'PASS'</span>, <span class="string">'.'</span>))</span><br><span class="line"> ),</span><br><span class="line"></span><br><span class="line"> mutation_type_counts <span class="keyword">AS</span> (</span><br><span class="line">   <span class="keyword">SELECT</span></span><br><span class="line">     reference_name,</span><br><span class="line">     <span class="keyword">name</span>,</span><br><span class="line">     <span class="keyword">SUM</span>(<span class="keyword">CAST</span>(mutation <span class="keyword">IN</span> (<span class="string">'A-&gt;G'</span>, <span class="string">'G-&gt;A'</span>, <span class="string">'C-&gt;T'</span>, <span class="string">'T-&gt;C'</span>) <span class="keyword">AS</span> INT64)) <span class="keyword">AS</span> transitions,</span><br><span class="line">     <span class="keyword">SUM</span>(<span class="keyword">CAST</span>(mutation <span class="keyword">IN</span> (<span class="string">'A-&gt;C'</span>, <span class="string">'C-&gt;A'</span>, <span class="string">'G-&gt;T'</span>, <span class="string">'T-&gt;G'</span>,</span><br><span class="line">                           <span class="string">'A-&gt;T'</span>, <span class="string">'T-&gt;A'</span>, <span class="string">'C-&gt;G'</span>, <span class="string">'G-&gt;C'</span>) <span class="keyword">AS</span> INT64)) <span class="keyword">AS</span> transversions</span><br><span class="line">   <span class="keyword">FROM</span> filtered_snp_calls</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">     reference_name,</span><br><span class="line">     <span class="keyword">name</span></span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line">   reference_name,</span><br><span class="line">   <span class="keyword">name</span>,</span><br><span class="line">   transitions,</span><br><span class="line">   transversions,</span><br><span class="line">   transitions/transversions <span class="keyword">AS</span> titv</span><br><span class="line"> <span class="keyword">FROM</span> mutation_type_counts</span><br><span class="line"> <span class="keyword">WHERE</span></span><br><span class="line">   transversions &gt; <span class="number">0</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">   titv <span class="keyword">DESC</span>,</span><br><span class="line">   <span class="keyword">name</span></span><br></pre></td></tr></table></figure><p><code>mutation_type_counts</code>のところで、正確にペアになっている塩基対(A=T、もしくはG≡C)については<code>transitions</code>、正しいペアになっていない塩基対は<code>transversions</code>(変異)しているものをそれぞれint型にCASTして合計を取っています。上記クエリをBigQueryに流すと以下の結果が出力されます(上記10件)。</p><table><thead><tr><th>行</th><th>referencce_name</th><th>name</th><th>transitions</th><th>transversions</th><th>titv</th></tr></thead><tbody><tr><td>1</td><td>chr22</td><td>NA12892</td><td>35299</td><td>15017</td><td>2.3506026503296265</td></tr><tr><td>2</td><td>chr22</td><td>NA12889</td><td>34091</td><td>14624</td><td>2.331167943107221</td></tr><tr><td>3</td><td>chr17</td><td>NA12892</td><td>67297</td><td>28885</td><td>2.3298251687727194</td></tr><tr><td>4</td><td>chr22</td><td>NA12878</td><td>33627</td><td>14439</td><td>2.3289008934136715</td></tr><tr><td>5</td><td>chr22</td><td>NA12877</td><td>34751</td><td>14956</td><td>2.3235490772933938</td></tr><tr><td>6</td><td>chr22</td><td>NA12891</td><td>33534</td><td>14434</td><td>2.323264514341139</td></tr><tr><td>7</td><td>chr17</td><td>NA12877</td><td>70600</td><td>30404</td><td>2.3220628864623074</td></tr><tr><td>8</td><td>chr17</td><td>NA12878</td><td>66010</td><td>28475</td><td>2.3181738366988585</td></tr><tr><td>9</td><td>chr17</td><td>NA12890</td><td>67242</td><td>29057</td><td>2.314141170802216</td></tr><tr><td>10</td><td>chr17</td><td>NA12889</td><td>69767</td><td>30189</td><td>2.311007320547219</td></tr></tbody></table><p>最終列の<code>titv</code>では正しいペア、および変異の入ったペアの比をとっているので、各リファレンスに対してどれくらい変異は入っているかがわかります。ここでは20 GBほど読み込んでいますが、実際にクエリにかかった時間は1秒を切っているので、ローカルで同様のクエリ実行するよりははるかに早いでしょう。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では簡単ですが、Cloud Life Sciencesを触る記事を書いてきました。エンジニアとして分析に使うものはうっすら理解していても、実際に使うファイルフォーマットなどは知識が深くないとそもそも何もできないなと改めて感じたところです。今回はVCFファイルという専門的なファイルからBigQueryに流すところまで行いましたが、Cloud Life Sciencesはもともと Google Genomicsというサービスだったようで、以前よりGoogleが力を入れていた部分の一つであることが今回色々調べてわかりました。医療分野は正確さを求められる一方で、そのデータ量は膨大な量になります。大学院時代に肌で感じたことですが、ローカルで分析している先輩がかなり時間をかけていたことを思い出しました。このサービスの知名度が上がるとともに、研究ユース、非エンジニアでも使いやすいプラットフォームになるとより良いなと思いました。</p><p>明日は祝日なので次回更新は水曜日です。お楽しみに！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>先日、GCPのProfessional Cloud Architectに合格しました！結果が出力される瞬間はなかなかドキドキでしたが、なんとか合格できました。私も参考にしましたが、本技術ブログでも合格体験記を出しておりますので、そちらもぜひご覧ください！<br><a href="https://future-architect.github.io/articles/20190530/">【合格記】GCP Professional Cloud Architect認定資格を振り返る</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://bi.biopapyrus.jp/gwas/vcf.html" target="_blank" rel="noopener">VFC フォーマットファイルの特徴および Python でパースする方法</a></p><hr><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG/DXチームの&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>golang.tokyo #29に4名で登壇しました</title>
    <link href="https://future-architect.github.io/articles/20200209/"/>
    <id>https://future-architect.github.io/articles/20200209/</id>
    <published>2020-02-09T11:01:05.000Z</published>
    <updated>2020-02-10T11:05:24.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの真野です。先日開催された<a href="https://golangtokyo.connpass.com/event/164955/" target="_blank" rel="noopener">golang.tokyo #29</a> にTIG DXユニットから渋川、辻、真野と、当社アルバイトの本田さんの計4名が登壇しました。</p><p>29回目となるgolang.tokyoは今回始めてFutureのオフィスで開催させていただくことになりました。budougumi0617さんを始め運営の方々、および来ていただいた方々、ありがとうございました！</p><p>🎤当日の様子<br><img src="/images/20200209/photo_20200210_01.jpeg" class="img-middle-size"></p><p>今思うと29回目ということで肉🍖を準備すれば良かったのですが、自然とピザ🍕とドリンク🍹を用意してしまいました。次からはもっとウィットに富んだ運営を心がけたいと思います。</p><h1 id="登壇内容について"><a href="#登壇内容について" class="headerlink" title="登壇内容について"></a>登壇内容について</h1><p>今回はUmeda.goで発表されて好評だった事例を再演するということで、資料は <a href="https://future-architect.github.io/articles/20200127/">Umeda.go 2020 Winterに3名で登壇しました</a> を御覧ください。今回が人生初🔰の勉強会登壇であった本田さんの発表は本人から感想を聞いてみたいと思います。</p><h1 id="ebitenでIoT可視化"><a href="#ebitenでIoT可視化" class="headerlink" title="ebitenでIoT可視化"></a>ebitenでIoT可視化</h1><script async class="speakerdeck-embed" data-slide="1" data-id="f280d9e36d834062b0a7cb353c93846f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>golang.tokyo初参加・初登壇させていただいた本田です。登壇者として立たせていただいたこと、そして他の登壇者の方のお話や、懇親会での交流など、本当にいい経験になったと思います。</p><p>弊社でのホーム開催で、たった5分のLTだったにもかかわらずド緊張で、拙い点もありましたが（デモと言いつつ初っ端から動画に頼ったり、質問であたふたして弊社社員の方に頼りまくったり…）、自分が今まで取り組んでいたGoでのゲーム開発についてアウトプットできてとても良かったです。温かく見守ってくださった皆様ありがとうございました。</p><p>また、質問や懇親会ではebiten開発者の星さんをはじめ、様々な方からあらゆる知見を得ることができたこと、弊社の社員の方々からもこういった場で改めて多くを学ばせていただいたことなどなど、多くの意味で本当に勉強になりました！！</p><p>またこういったチャンスがあれば、どんどん挑戦していきたいと思います。登壇経験がまだない方も、golang.tokyoは温かく素敵なコミュニティなのでぜひ挑戦してみてください。</p><h1 id="質疑応答"><a href="#質疑応答" class="headerlink" title="質疑応答"></a>質疑応答</h1><p>各登壇後の質問タイムや、最後の懇親会で様々な質問や活発な意見交換ができました。少しアルコールが入っていたため覚えている範囲になりますが、話した内容を紹介したいと思います。</p><p>懇親会ではcuelangなど、技術ブログで書いた内容についても質問を受けたりしました。技術ブログは書いた瞬間にブックマークなどで反応が少しは見られたりはしますが、直接反応があるとうれしいですね。</p><ul><li><p>Goならわかるラッパーコマンド作成で学ぶシステムプログラミング（澁川）</p><ul><li>今回は運営兼発表で参加しました。再演の依頼をbudougumiさんからいただきましたが、今回は40分の内容を20分で巻きで発表しました。仕事の中でちょっとしたツールを作って業務を改善したり公開するというのにGoは最適だと思います。今回作ったツールは、今後は業務にきちんと適用してブラッシュアップさせていきたいですし、もっと洗練させていきたいと思っています。</li><li>Q. 懇親会で「Goらしさとは」といった質問をいただきました。<ul><li>A. 世間的な流行と逆行しているとは思いますが、個人的な思いとしてはコードが短くなる「宣言的」も、乱用すると「なぜ動かないのか分からない」となりがちだと思っています。その宣言的な文法をなるべく排しているのがGoらしさな気がしています。静的型付けと動的型付けをいったりきたりしながら、型推論で両方の良さを生かした言語が出て広まっているように、宣言的がブームでも、そうじゃない書き方の良さもあるだろうし、単純にどっちが良いという話に終始するのではなく、その先を探していきたいと思っています。</li></ul></li></ul></li><li><p>ワークフローエンジンをGoで作る（辻）</p><ul><li>Q. Workerの並行数はどれくらい？<ul><li>A. 今の設定では10にしていました。WorkerのタスクはDBやS3といった外部リソースへのアクセスが多いので、外部リソースを見ながらチューニングする想定です。</li></ul></li><li>Q. 標準コードリーディング会はどういう目的でやっているのですか？<ul><li>A. もともとは業務や趣味でコードを書いた人がよりレベルアップする目的で、標準パッケージのGoらしい書き方や、テクニックを学ぶために始めました。いざ始めると、いろいろなレベルの方が参加しているので、標準パッケージの使い方やテストの書き方といった内容も社内で一緒に学んでいます。</li></ul></li></ul></li><li><p>Goで工場を制御する要であるPLCにアクセスする（真野）</p><ul><li>Q. 三菱製以外の例えばオムロン社製のPLCに対応しないのか？<ul><li>A. 今までの案件で工場側に導入されていたPLCがたまたま全て三菱さんであった。機会があればオムロンさんのPLCも触ってみたいです</li></ul></li><li>Q. Modbusの方が良いのでは？<ul><li>A. 後で気がついたのですがそうかも知れません。三菱さんのPLCアクセス方法を調べるとMCプロトコルの仕様が見つかったので先に実装してしまった</li></ul></li><li>Q. 書き込みにも対応しているのか？<ul><li>A. まだコードはUploadしていないが可能。読み取りのコマンドをWriteに変えて16進数で書き込みデータを追加するイメージ。過去実績ではアクチュエータの操作はしたことないが、コンフィグデータの書き込みは行ったことがあります</li></ul></li></ul></li></ul><h1 id="会場運営について"><a href="#会場運営について" class="headerlink" title="会場運営について"></a>会場運営について</h1><p>採用担当の田邊です。今回、フューチャー初の「golang.tokyo」という外部イベントという事もあり、私としても気合を入れて、少しでも参加者の方が楽しい場になればと思い準備をしてきました。</p><p>参加人数に対し、🍕ピザ15枚、🍺お酒160本！！<br>無事終わったかと思いきや、、、お酒はなんと100本弱余りました。笑</p><p>ただ当日は、セミナー&amp;懇親会共に盛り上がったので満足です。</p><p>入社してまだ半年ですが、日々感じることはフューチャーの技術に対する拘り・向上心の高さにただただ驚いている毎日です。これから、フューチャーは、エンジニアイベントを定期的に開催していきます。少しでも多くの方にフューチャーを認知して頂き、魅力をお伝えしていきますので、これからもよろしくお願いします。もし、興味をもっていただいたGopherさんがいれば、キャリア採用もしていますので<a href="https://progres12.jposting.net/pgfuture/u/job.phtml?job_code=215" target="_blank" rel="noopener">このあたりの職種</a>で申し込みください！<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>golang.tokyoは個人的に憧れの勉強会でしたが、まさか自社開催できるとは思いもせず、非常に嬉しいです。実はコッソリと何人かの社員が後ろの方で傾聴していたそうですが、みんな刺激になったと喜んでいました。</p><p>Goに関しては、<a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a>や<a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a>などブログ記事も上がっています。今後も日本のGoコミュニティを盛り上げるべくなるべく多くのナレッジを公開しますので今後もよろしくお願いします。</p><p>また、澁川と真野は2/14開催の<a href="https://event.shoeisha.jp/devsumi/20200213/session/2413/" target="_blank" rel="noopener">Developpers Summit 2020に登壇</a>します。こちらでは何かと巷を騒がせる「ITコンサルタントって何やっているの？必要なの？」といった疑問にいい感じに答える場となっています。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">ダイレクトマーケティングすいません。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXユニットの真野です。先日開催された&lt;a href=&quot;https://golangtokyo.conn
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#3 Goでサーバーレスな管理画面アプリを作る</title>
    <link href="https://future-architect.github.io/articles/20200207/"/>
    <id>https://future-architect.github.io/articles/20200207/</id>
    <published>2020-02-07T01:54:41.000Z</published>
    <updated>2020-02-07T03:10:57.648Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP集中連載</a>の3回目です。今回はCloud Runを使ったサーバーレスウェブアプリケーションの作り方について紹介します。</p><h1 id="サーバーレスとは"><a href="#サーバーレスとは" class="headerlink" title="サーバーレスとは"></a>サーバーレスとは</h1><p>OSをインストールして、その上にアプリケーションをインストールして・・・みたいなことが必要なく、アプリケーションのコードだけを書けばよく、必要なときに必要なだけスケールするPaaSなアーキテクチャで、インフラコストが完全従量課金、という前提でこの記事では扱っていきます。</p><p>GCPで、サーバーレスに使えるコンピュート基盤のサービスはいくつかあります。</p><table><thead><tr><th align="center">サービス名</th><th align="center">実行単位</th><th align="center">HTTP</th><th align="center">スケジュール</th><th align="center">その他イベント</th></tr></thead><tbody><tr><td align="center">Cloud Functions</td><td align="center">Goパッケージ</td><td align="center">✔</td><td align="center">Cloud Scheduler</td><td align="center">✔</td></tr><tr><td align="center">App Engine (std)</td><td align="center">Goアプリケーション</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td></tr><tr><td align="center">Cloud Run</td><td align="center">コンテナ</td><td align="center">✔</td><td align="center">Cloud Scheduler</td><td align="center"></td></tr></tbody></table><p>このうち、Cloud Funcionsと、AWSのLambdaはライバルのように言われます。実際機能的には似通っています。LambdaはHTTPのサーバーとして公開しようとすると、API Gatewayが必要なぐらいですね。</p><p>Cloud RunとFargateもライバルのように言われますが、Fargateは複数のコンテナを組み合わせたタスク単位で実行しますが、Cloud Runは単体のコンテナの実行になり、そこは少し差があります。</p><p>今回は、Go + Vue + Cloud Runでかんたんな管理画面を作ろうと思います。ストレージ側にもサーバーレスがあります。MySQLやPostgreSQLのクラウドサービス（Cloud SQLとかRDS）は、サーバーマシンを可動させて、その上にDBMSが稼働しますので、起動している時間だけお金がかかってしまします。一方、FirestoreやDynamoDBの場合は容量と通信（と、キャパシティユニット）にしかお金がかからないモデルになっており、サーバーレスです。今回はかんたん化のためにストレージは扱いません。</p><h1 id="Cloud-FunctionsとCloud-Runのどちらを使うべきか？"><a href="#Cloud-FunctionsとCloud-Runのどちらを使うべきか？" class="headerlink" title="Cloud FunctionsとCloud Runのどちらを使うべきか？"></a>Cloud FunctionsとCloud Runのどちらを使うべきか？</h1><p>ストレージに書き込まれたタイミングで何かイベントを駆動したいのであればCloud Functions一択ですが、両方でサポートされているHTTPリクエストを受け取るウェブサービスやスケジュールで駆動するイベントを受ける場合にはどちらも使えます。</p><p>Cloud Functionsは基本的に、1つのリクエストごとにインスタンスが作られる（正確には1つのインスタンスは同時に1つのリクエストのみを処理する）とドキュメントには書かれています。Cloud Runは同時80接続までは一つのインスタンスで処理できます。Cloud Functionsで大量アクセスがあって起動が頻繁に行われると、DBへのコネクションが新規に大量に張られてトラブルになる可能性があります。AWSではLambda RDS Proxyが提供されはじめていて(MySQLのみ)、LambdaでもRDBを使えるようにという機能が提供され始めていますが、GCPにはまだありません。ウェブアプリケーションを作るならCloud SQLも使えるCloud Runの方が良さそうです。スケジュール駆動のイベントの場合はそんなに並列で走ることはないと思うので、どちらでも良いと思います。</p><p>日本語のCloud Runを紹介しているサイトではまだベータ扱いの操作になっているものも多いのですが（本家のGCPの日本語ドキュメントもまだ更新されていない）<a href="https://cloud.google.com/run/docs/release-notes" target="_blank" rel="noopener">Cloud Runは昨年の11月にGAになり</a>、ベータが取れました。SLAも99.95%になっています。</p><p>・・・というのは性能指標だけを見た場合の比較ですが、Cloud RunにはVPCに繋げられないという問題があります。今年のうちには使えるようになるらしいです。このエントリーは今後に超期待ということでの先行検証ぐらいに見ておいていただければと思います。Cloud FunctionsをVPCに接続する方法はこのブログの<a href="https://future-architect.github.io/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a>で紹介しています。</p><h1 id="Cloud-Runで管理画面のウェブサービスを作る"><a href="#Cloud-Runで管理画面のウェブサービスを作る" class="headerlink" title="Cloud Runで管理画面のウェブサービスを作る"></a>Cloud Runで管理画面のウェブサービスを作る</h1><p>Cloud Runでウェブサービスを作るのは通常のコンテナで動くウェブサービスです。せっかくなのでウェブのUI付きの管理画面を作ってみます。完成品はこちらにあります。</p><ul><li><a href="https://github.com/shibukawa/serverless-sample" target="_blank" rel="noopener">https://github.com/shibukawa/serverless-sample</a></li></ul><p>管理画面は通常、何か非定常的なイベントが発生したときとか、必要なときにのみ使われるサービスです。そのためにインスタンスを立ち上げっぱなしにしておくのは費用的にもうれしくないですし、限りある地球の資源の浪費です。管理画面はサーバーレスでアプリケーションを作るには最適です。</p><h2 id="ライブラリの選定"><a href="#ライブラリの選定" class="headerlink" title="ライブラリの選定"></a>ライブラリの選定</h2><p>今回は次のようなライブラリを選択しました。</p><ul><li>Goでnet/http + <a href="https://github.com/go-chi/chi" target="_blank" rel="noopener">chi router</a></li><li>Vue.js + TypeScript<ul><li>ビルドした静的ファイルもコンテナの中に入れる</li></ul></li><li>UI部品は<a href="https://mwc-demos.glitch.me/demos/" target="_blank" rel="noopener">Material Design WebComponents</a></li></ul><p>chiは高速だけども、イベントハンドラ周りは標準のnet/httpと同じものが使えるので、多くのGoユーザーにとって敷居が低いライブラリです。Vueは説明不要ですよね。管理画面といってもそれなりに綺麗な部品を使って画面を作りたいものです。Material Design WebComponentsは<a href="https://qiita.com/shibukawa/items/5a36147ec103d35c1b5e" target="_blank" rel="noopener">2019年はWebComponents元年(2回目)！WebComponentsをReact/Angular/Vueと一緒に使う</a>で紹介したツールキットの1つです。Ionicはすでに使って見たので、今回はこっちを選択。</p><h2 id="プロジェクトのフォルダを作る"><a href="#プロジェクトのフォルダを作る" class="headerlink" title="プロジェクトのフォルダを作る"></a>プロジェクトのフォルダを作る</h2><p>Vueのプロジェクトと、Goのプロジェクトを同じフォルダに入れてしまいましょう。Vueの設定はお好みで色々設定しますが、Babel、TS、CSS Preprocessor(dart-sass)、Formatter(Prettier)、Unittest(Jest)を有効にしました(E2EのCypressを有効にするとDockerのビルド時間がめちゃ伸びるので注意)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/go/src/github.com/shibukawa</span><br><span class="line">$ npx @vue/cli create serverless-sample</span><br><span class="line">:</span><br><span class="line">⚓  Running completion hooks...</span><br><span class="line"></span><br><span class="line">📄  Generating README.md...</span><br><span class="line"></span><br><span class="line">🎉  Successfully created project serverless-sample.</span><br><span class="line">👉  Get started with the following commands:</span><br><span class="line">   $ <span class="built_in">cd</span> serverless-sample</span><br><span class="line">   $ npm run serve</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> serverless-sample</span><br><span class="line">$ go mod init</span><br><span class="line">go: creating new go.mod: module github.com/shibukawa/serverless-sample</span><br></pre></td></tr></table></figure><p>密結合な2つのリポジトリだと、1つのPRをマージするためにはもう片方のPRのマージを待たないいけない、とか運用で苦労することが増えるので、最近はフロントとサーバーはなるべくまとめたい派です。そんでもって、各言語のよく知られている開発の流れに従った方が、キャッチアップも引き継ぎも楽ですよね。あと、変に依存があると、ビルド時に秘密鍵をコンテナの中に・・・とかいろいろ厄介事が増えてDockerが複雑になるのもなるべく避けたい。</p><h2 id="フロントの開発"><a href="#フロントの開発" class="headerlink" title="フロントの開発"></a>フロントの開発</h2><p>開発時はJavaScriptの開発サーバーを立てて、Goのサーバーを後ろで動かすのが楽です。近年のフロントはビルドの時間も長いのですが、開発サーバーはコンパイル結果をキャッシュしてライブリロードとかしてくれますので。開発サーバーにはプロキシ機能があるのでこれを有効にします。サーバーを別々に建てると、開発時だけCORSを気にしなきゃいけないとか面倒なことになりますが、同じオリジンならそういうことも気にしなくていいので、フロント、サーバーの同時開発のプラクティスとしては、今のところこれがマイベスト。</p><figure class="highlight js"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">"/api"</span>: &#123;</span><br><span class="line">        target: <span class="string">"http://localhost:8888"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>後は通常のTypeScriptでのVueの開発ですが、今回は<a href="https://qiita.com/shibukawa/items/5a36147ec103d35c1b5e" target="_blank" rel="noopener">2019年はWebComponents元年(2回目)！WebComponentsをReact/Angular/Vueと一緒に使う</a>で紹介したUI部品を使います。WebComponentsのタグは<code>ignoreElements</code>に登録しておきます。</p><figure class="highlight ts"><figcaption><span>src/main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.ignoredElements = [</span><br><span class="line">  <span class="string">"mwc-drawer"</span>,</span><br><span class="line">  <span class="string">"mwc-top-app-bar"</span>,</span><br><span class="line">  <span class="string">"mwc-button"</span>,</span><br><span class="line">  <span class="string">"mwc-icon-button"</span>,</span><br><span class="line">  <span class="string">"mwc-dialog"</span>,</span><br><span class="line">  <span class="string">"mwc-textfield"</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>Routerでページ切り替えはしたいと思うので（大したページはないけど）切り替えられるようにしました。自分のページにジャンプするときにはドロワーが閉じたりしない方がいいので、クリックイベントで遷移先を確認するようにしています。リンククリック時に<code>&lt;mwc-drawer&gt;</code>を閉じたいのですが、デフォルトの動作だとそうならないので、Routerの遷移イベントを拾ってドロワーを閉じるようしています。</p><figure class="highlight html"><figcaption><span>src/App.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mwc-drawer</span> <span class="attr">hasHeader</span> <span class="attr">type</span>=<span class="string">"modal"</span> <span class="attr">:open</span>=<span class="string">"openDrawer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>Drawer Title<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drawer-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Drawer content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"selectPage('/')"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"selectPage('/prime')"</span>&gt;</span>Prime<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"selectPage('/about')"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mwc-drawer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">"@material/mwc-icon-button"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">"@material/mwc-drawer"</span>;</span></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  openDrawer: boolean = <span class="literal">false</span>;</span></span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$router.afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.openDrawer = <span class="literal">false</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  selectPage(path: string) &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (path !== <span class="keyword">this</span>.$router.currentRoute.path) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$router.push(path);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>中の画面も1つ作ってみます。数字を入れて、素数かどうかをサーバー判定してダイアログに表示する、という画面です。ページ内部のヘッダーでドロワーを開けるようにする関係で、親のコンポーネントにアクセスしているところはちょっと設計がアレかな、と思いつつ、このためだけにVuexを入れるのもこの規模だと割に合わないのでご勘弁を。</p><figure class="highlight html"><figcaption><span>src/views/Prime.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"appContent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mwc-top-app-bar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mwc-icon-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">slot</span>=<span class="string">"navigationIcon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">"menu"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"toggleDrawer"</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;/<span class="name">mwc-icon-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>Prime<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mwc-top-app-bar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mwc-textfield</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:value</span>=<span class="string">"num"</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">change</span>=<span class="string">"onchange($event.target.value)"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">label</span>=<span class="string">"Input Number"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mwc-button</span> @<span class="attr">click</span>=<span class="string">"check()"</span>&gt;</span>Is it Prime Number?<span class="tag">&lt;/<span class="name">mwc-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mwc-dialog</span> <span class="attr">:open</span>=<span class="string">"dialogOpen"</span> @<span class="attr">closing</span>=<span class="string">"closingDialog"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; this.result &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mwc-button</span> <span class="attr">slot</span>=<span class="string">"primaryAction"</span> <span class="attr">dialogAction</span>=<span class="string">"discard"</span>&gt;</span></span><br><span class="line">        OK</span><br><span class="line">      <span class="tag">&lt;/<span class="name">mwc-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mwc-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">"@material/mwc-top-app-bar"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">"@material/mwc-icon-button"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">"@material/mwc-button"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">"@material/mwc-dialog"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> <span class="string">"@material/mwc-textfield"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> AppComponent <span class="keyword">from</span> <span class="string">'../App.vue'</span>;</span></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AboutPage</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  result: string = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">  num: string = <span class="string">"0"</span>;</span></span><br><span class="line"><span class="javascript">  dialogOpen: boolean = <span class="literal">false</span>;</span></span><br><span class="line"></span><br><span class="line">  onchange(value: string) &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.num = value;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  closingDialog() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.dialogOpen = <span class="literal">false</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">async</span> check() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"後で書く"</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toggleDrawer(e: Event) &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> parent = <span class="keyword">this</span>.$parent <span class="keyword">as</span> AppComponent;</span></span><br><span class="line">    parent.openDrawer = !parent.openDrawer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>サーバーアクセスしない部分はこれで動作可能になりました。</p><img src="/images/20200207/photo_20200207_01.png"><img src="/images/20200207/photo_20200207_02.png"><h2 id="Goのサーバーを作る"><a href="#Goのサーバーを作る" class="headerlink" title="Goのサーバーを作る"></a>Goのサーバーを作る</h2><p>Goのサーバーはnet/httpですが、今回はフロントとの通信はJSON-RPCにしました。標準ライブラリのJSON-RPCはいろいろ制約が強いので、github.com/semrush/zenrpcを使いました。それらをchiのrouterに登録してサーバー起動しておしまい。注意点としては、PORT環境変数を見て、ポートを切り替えられるようにすることです。ついでにHOST環境変数も見てますが、これはChromebookの制約故なので他の人はいらないかもです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/go-chi/chi"</span></span><br><span class="line"><span class="string">"github.com/semrush/zenrpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:generate go run github.com/semrush/zenrpc/zenrpc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// APIService is a JSON RPC server interface</span></span><br><span class="line"><span class="keyword">type</span> APIService <span class="keyword">struct</span> &#123;</span><br><span class="line">zenrpc.Service</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CheckPrimeNumber returns input value is prime number or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(as APIService)</span> <span class="title">CheckPrimeNumber</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> big.NewInt(<span class="keyword">int64</span>(a)).ProbablyPrime(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := chi.NewRouter()</span><br><span class="line">rpc := zenrpc.NewServer(zenrpc.Options&#123;</span><br><span class="line">TargetURL: <span class="string">"/api"</span>,</span><br><span class="line">ExposeSMD: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line">rpc.Register(<span class="string">""</span>, &amp;APIService&#123;&#125;)</span><br><span class="line">r.Handle(<span class="string">"/api"</span>, rpc)</span><br><span class="line"></span><br><span class="line">port := os.Getenv(<span class="string">"PORT"</span>)</span><br><span class="line"><span class="keyword">if</span> port == <span class="string">""</span> &#123;</span><br><span class="line">port = <span class="string">"8080"</span></span><br><span class="line">&#125;</span><br><span class="line">host := os.Getenv(<span class="string">"HOST"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"Open Server at %s:%s\n"</span>, host, port)</span><br><span class="line">log.Fatal(http.ListenAndServe(fmt.Sprintf(<span class="string">"%s:%s"</span>, host, port), r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON-RPCサーバーのスタブ生成でgo generateが必要です。go generateで起動したいプログラムがGo製の場合、go run形式で書くと、そのツールのインストールを事前にしておかなくても良い（し、go modがキャッシュしてくれる）というのは、gophers slackのosakaチャンネルでIwatsuruさんに教えていただいたテクニックです。ありがとうございます。便利です。</p><p>ポートを8080じゃなくしているのは、手元の開発環境のcode-serverが使っていたので回避しただけです。Vueのプロキシー設定と合わせれば問題ないです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go generate</span><br><span class="line">$ go build</span><br><span class="line">$ HOST=127.0.0.1 PORT=8888 ./serverless-sample</span><br><span class="line">Open Server at 127.0.0.1:8888</span><br></pre></td></tr></table></figure><p>このJSON-RPCサーバーの素敵なところはService Mapping DescriptionというJSONが出力できるところです。今回は時間がなかったのでやらなかったのですが、これを元にTypeScriptのクライアントコードの自動生成とかできると、gRPCみたいなスキーマを書かずに、Goのメソッド定義の型情報がクライアントでも利用できるようになって素敵なんじゃないかと期待しています。</p><figure class="highlight json"><figcaption><span>localhost:8080/api?smd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"transport"</span>:<span class="string">"POST"</span>,</span><br><span class="line">  <span class="attr">"envelope"</span>:<span class="string">"JSON-RPC-2.0"</span>,</span><br><span class="line">  <span class="attr">"contentType"</span>:<span class="string">"application/json"</span>,</span><br><span class="line">  <span class="attr">"SMDVersion"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">  <span class="attr">"target"</span>:<span class="string">"/api"</span>,</span><br><span class="line">  <span class="attr">"services"</span>: &#123;</span><br><span class="line">    <span class="attr">"CheckPrimeNumber"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:<span class="string">"CheckPrimeNumber returns input value is prime number or not"</span>,</span><br><span class="line">      <span class="attr">"parameters"</span>:[&#123;<span class="attr">"name"</span>: <span class="string">"a"</span>,<span class="attr">"type"</span>: <span class="string">"integer"</span>&#125;],</span><br><span class="line">      <span class="attr">"returns"</span>:&#123;<span class="attr">"type"</span>: <span class="string">"boolean"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="サーバーとフロントをつなぐ"><a href="#サーバーとフロントをつなぐ" class="headerlink" title="サーバーとフロントをつなぐ"></a>サーバーとフロントをつなぐ</h2><p>先程のイベントハンドラにつなぎます。fetchでJSON-RPCを直接呼んでいます。</p><figure class="highlight ts"><figcaption><span>src/views/Prime.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> check() &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">"/api"</span>, &#123;</span><br><span class="line">    method: <span class="string">"post"</span>,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      jsonrpc: <span class="string">"2.0"</span>,</span><br><span class="line">      method: <span class="string">"CheckPrimeNumber"</span>,</span><br><span class="line">      params: [<span class="built_in">parseInt</span>(<span class="keyword">this</span>.num)],</span><br><span class="line">      id: <span class="number">1</span></span><br><span class="line">    &#125;),</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">"content-type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">      accept: <span class="string">"application/json"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> dialog = <span class="keyword">this</span>.$refs.dialog <span class="keyword">as</span> Dialog;</span><br><span class="line">  <span class="keyword">if</span> (res.ok) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> res.json() <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">      <span class="keyword">if</span> (result.result) &#123;</span><br><span class="line">        <span class="keyword">this</span>.result = <span class="string">`<span class="subst">$&#123;this.num&#125;</span> is prime number`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.result = <span class="string">`<span class="subst">$&#123;this.num&#125;</span> is not prime number`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.result = <span class="string">"parse error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.result = <span class="string">"server access error"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.dialogOpen = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここまでで、開発環境で一通り動作確認ができます。</p><img src="/images/20200207/photo_20200207_03.png"><h2 id="フロントエンドのアセットをGoサーバーにバンドル"><a href="#フロントエンドのアセットをGoサーバーにバンドル" class="headerlink" title="フロントエンドのアセットをGoサーバーにバンドル"></a>フロントエンドのアセットをGoサーバーにバンドル</h2><p>本番環境に向けて、1コンテナの1プロセスで動作するようにしていきます。AWSのFargateであれば、複数コンテナをまとめて1つのタスクとできるので、静的HTMLの配信にはフロントに立てたNginxを使うという方法もできますが、Cloud Runの場合は1つのコンテナにまとめる必要があります。</p><p>静的ファイルをサーバー側でバンドルして配信する方法はいろいろありますが、自作の<a href="https://godoc.org/go.pyspa.org/brbundle" target="_blank" rel="noopener">brbundle</a>というのにします。Single Page Applicationの場合、<a href="https://angular.io/guide/deployment" target="_blank" rel="noopener">Angularのページで紹介されている</a>ように、静的ファイルを配信するときに見つからなかったらindex.htmlにフォールバックする、ということが必要です。この自作のライブラリはSSP用にnet/httpやらchiのアダプタを持っていて、このフォールバックもできるようにしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// これを追加</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"go.pyspa.org/brbundle"</span></span><br><span class="line"><span class="string">"go.pyspa.org/brbundle/brchi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓この行を追加</span></span><br><span class="line"><span class="comment">//go:generate go run go.pyspa.org/brbundle/cmd/brbundle embedded -f dist</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// この行を追加</span></span><br><span class="line">r.NotFound(brchi.Mount(brbundle.WebOption&#123;</span><br><span class="line">SPAFallback: <span class="string">"index.html"</span>,</span><br><span class="line">&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>後はVueをビルドして出来上がったdistフォルダをGoの実行ファイルにバンドルしてあげるだけです。go generateでバンドルができるようにしたので次のコマンドでVueのフロント付きのシングルプロセスのGoサーバーができあがります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line">$ <span class="keyword">go</span> generate</span><br><span class="line">$ HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> PORT=<span class="number">8888</span> ./serverless-sample</span><br><span class="line">Open Server at <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8888</span></span><br></pre></td></tr></table></figure><p>今度は開発サーバー経由ではなく、Goに直接アクセスして動作確認します。なお、バンドルしたとしても、開発サーバー経由でのアクセスも可能なので、開発のイテレーションを回すのに邪魔しません。</p><h1 id="Cloud-Runにデプロイする"><a href="#Cloud-Runにデプロイする" class="headerlink" title="Cloud Runにデプロイする"></a>Cloud Runにデプロイする</h1><p>Cloud RunにデプロイするにはDockerコンテナを作ります。</p><h2 id="Dockerコンテナを作る"><a href="#Dockerコンテナを作る" class="headerlink" title="Dockerコンテナを作る"></a>Dockerコンテナを作る</h2><p>いよいよDockerにしていきます。みなさん、まさかAlpineとか使っていないですよね？今どきのセキュリティを気にするエンジニアの常識はシェルがなくてログインができないdistrolessをベースイメージにするって、マックで隣の女子高生が言っていました。</p><p>distrolessはDebian系なので、ビルド用のオフィシャルイメージとも合わせやすいです。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">12</span>-buster-slim as nodebuilder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home/node</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json package-lock.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm ci</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> babel.config.js .browserslistrc .eslintrc.js jest.config.js tsconfig.json vue.config.js ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> public/ ./public</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src/ ./src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.13</span>-buster as gobuilder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> go.mod go.sum ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod download</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> main.go ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=nodebuilder /home/node/dist/ ./dist</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go generate</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -ldflags=<span class="string">"-w -s"</span> -o /go/bin/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> gcr.io/distroless/base</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=gobuilder /go/bin/app /</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/app"</span>]</span></span><br></pre></td></tr></table></figure><p>コンテナになったら、この状態でも動作確認できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ DOCKER_BUILDKIT=1 docker build -t <span class="string">"serverless-app"</span> .</span><br><span class="line">$ docker run -p 8080:8080 --rm <span class="string">"serverless-app"</span></span><br></pre></td></tr></table></figure><h2 id="Cloud-Runで動かす"><a href="#Cloud-Runで動かす" class="headerlink" title="Cloud Runで動かす"></a>Cloud Runで動かす</h2><p>ここまで来たらあとはgcloudコマンドでデプロイするだけです。<br>GCP_PROJECTは自分で作成したプロジェクトを入れてください。IMAGE_NAMEはなんでも大丈夫です。日本から近いのでGCRはasia.gcr.ioにしています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud builds submit --tag asia.gcr.io/<span class="variable">$&#123;GCP_PROJECT&#125;</span>/<span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line">$ gcloud run deploy --image asia.gcr.io/<span class="variable">$&#123;GCP_PROJECT&#125;</span>/<span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>最後のコマンドを起動すると、マネージドで動かすかAnthosで動かすか、どのリージョンで動かすか、名前を何にするかを聞いてきます。それに回答したらURLが表示されるので、それにアクセスすると動作が確認できます。初回は認証なしでアクセスできるかどうか、というのも聞かれました。</p><p>かんたんにユーザーに使ってもらう方法としては、<a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a>で紹介するCloud Run Buttonもあります。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>Cloud Functionsと比べると、動作するアプリケーションが普通のGoのウェブサーバーなので開発はとてもしやすいです。フロントエンドを含めた動作検証も、JS側の開発支援の機能の恩恵を最大限受けられます。ローカルでかんたんに動作確認できます。また、その後本番用プロセスのローカル確認、Dockerコンテナの動作確認、クラウド上での動作確認と、確認できるポイントが多いのが助かりますね。</p><p>試してみてちょっと残念だったポイントは、brbundleはその名の通り、ブラウザがBrotli圧縮に対応していたら、Brotli形式で返す機能があるのですが、それを使うと正しい結果が返りませんでした。brbundleを拡張して、gzipで試してみたいです。</p><p>あと、<a href="https://cloud.google.com/run/docs/issues" target="_blank" rel="noopener">Known Issue</a>にもWebSocketやgRPCのストリーミングには非対応と書かれているのですが、実験したところ、Chunked Encodingにも非対応でした。そのため、Server Sent Eventを使うのもできません。Cloud FunctionsもGoogle App Engineもこれらはできないので、GCPのサーバーレスでサーバー側から通知というのはポーリング以外にはなさそうです。</p><p>とはいえ、きちんとした画面付きの管理画面がかんたんに稼働できます。常時稼働しない管理画面の稼働にはうってつけです。1コンテナという制約がありますが、そのおかげでFargateのような設定ファイルを作成する必要もありません。</p><p>今回は使いませんでしたが、アプリケーションの実装がローカルで単体で動くサーバーを作れば良い、ということで、以前本ブログで紹介した<a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud</a>を使えば、他のクラウドサービスでも動作するようなマルチクラウドな管理画面もかんたんに作れそうです。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/&quot;&gt;GCP集中連載&lt;/a&gt;の3回目です。今回はCloud Runを使ったサーバーレスウェブアプリケーションの作り方について紹介します
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#2 Istio on GKEではじめるサービスメッシュ</title>
    <link href="https://future-architect.github.io/articles/20200206/"/>
    <id>https://future-architect.github.io/articles/20200206/</id>
    <published>2020-02-06T02:43:53.000Z</published>
    <updated>2020-02-06T05:13:58.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの村田です。<a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a>2日目の記事です！</p><p>皆さんは普段どのようなアプリケーションを開発されてますか？私は最近Kubernetes上にデプロイされるマイクロサービスなアプリケーションに携わっています。</p><p>今回はIstio on GKEに焦点をあててGCPにおけるサービスメッシュの活用方法をご紹介したいと思います。</p><h1 id="GKEクラスタを作成する"><a href="#GKEクラスタを作成する" class="headerlink" title="GKEクラスタを作成する"></a>GKEクラスタを作成する</h1><p>まずはクラスタを作成します。</p><p>基本的にはデフォルト値のままクラスタ作成してしまおうと思います。<br>変えるのは一箇所だけ、今回の目玉の部分です。</p><img src="/images/20200206/photo_20200206_01.png" class="img-middle-size"><p><code>Additional features</code> の <code>Enable Istio</code> にチェック！<br>チェックを入れると <code>Enable mTLS</code> 欄が登場します。</p><p>選べるのは <code>Permissive</code> と <code>Strict</code> の2種類ですが、今回はデフォルト値である <code>Permissive</code> のままとします。詳しくは以下のページを見てみてくださいmm<br><a href="https://cloud.google.com/blog/products/networking/the-service-mesh-era-securing-your-environment-with-istio" target="_blank" rel="noopener">The service mesh era: Securing your environment with Istio</a></p><p>少し待つとクラスタができました！</p><img src="/images/20200206/photo_20200206_02.png"><p>クラスタ内に作成されたServiceを確認してみましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud container clusters list --project &lt;your-project&gt;</span><br><span class="line">NAME                LOCATION       MASTER_VERSION  MASTER_IP        MACHINE_TYPE   NODE_VERSION    NUM_NODES  STATUS</span><br><span class="line">standard-cluster-1  us-central1-a  1.13.11-gke.23  130.211.127.151  n1-standard-1  1.13.11-gke.23  3          RUNNING</span><br></pre></td></tr></table></figure><p>Istio関連のService(Podも)は <code>istio-system</code> のNamespaceに作成されます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get service -n istio-system</span><br><span class="line">NAME                     TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)                                                                                                                                      AGE</span><br><span class="line">istio-citadel            ClusterIP      10.12.6.189    &lt;none&gt;          8060/TCP,15014/TCP                                                                                                                           49m</span><br><span class="line">istio-galley             ClusterIP      10.12.10.108   &lt;none&gt;          443/TCP,15014/TCP,9901/TCP                                                                                                                   49m</span><br><span class="line">istio-ingressgateway     LoadBalancer   10.12.11.17    34.69.104.178   15020:30222/TCP,80:30345/TCP,443:31293/TCP,31400:31428/TCP,15029:30807/TCP,15030:30916/TCP,15031:32448/TCP,15032:31430/TCP,15443:30612/TCP   49m</span><br><span class="line">istio-pilot              ClusterIP      10.12.15.0     &lt;none&gt;          15010/TCP,15011/TCP,8080/TCP,15014/TCP                                                                                                       49m</span><br><span class="line">istio-policy             ClusterIP      10.12.3.166    &lt;none&gt;          9091/TCP,15004/TCP,15014/TCP                                                                                                                 49m</span><br><span class="line">istio-sidecar-injector   ClusterIP      10.12.5.178    &lt;none&gt;          443/TCP                                                                                                                                      49m</span><br><span class="line">istio-telemetry          ClusterIP      10.12.14.103   &lt;none&gt;          9091/TCP,15004/TCP,15014/TCP,42422/TCP                                                                                                       49m</span><br><span class="line">promsd                   ClusterIP      10.12.3.103    &lt;none&gt;          9090/TCP                                                                                                                                     49m</span><br></pre></td></tr></table></figure><p>また、デフォルトでは <code>sidecar injection</code> が有効になっていません。<br>Istioのメリットを最大限享受するためにはサイドカーとして動くEnvoy proxyが必要です。<br>以下のコマンドで有効化します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl label namespace default istio-injection=enabled</span><br><span class="line">namespace/default labeled</span><br></pre></td></tr></table></figure><p>クラスタの準備はひとまず完了です。</p><h1 id="デモアプリケーションをデプロイする"><a href="#デモアプリケーションをデプロイする" class="headerlink" title="デモアプリケーションをデプロイする"></a>デモアプリケーションをデプロイする</h1><p>マイクロサービスのデモアプリケーションといえばこれ、ということで <a href="https://github.com/GoogleCloudPlatform/microservices-demo#hipster-shop-cloud-native-microservices-demo-application" target="_blank" rel="noopener">Hipster Shop: Cloud-Native Microservices Demo Application</a> を早速デプロイします。</p><p>まずは <code>microservices-demo</code> をclone。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/GoogleCloudPlatform/microservices-demo.git</span><br></pre></td></tr></table></figure><p><code>Docker</code>, <code>kubectl</code>, <code>skaffold</code> が必要とのことでインストール。筆者環境では <code>skaffold</code> のみが無かったのでHomebrew経由で入れました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install skaffold</span><br></pre></td></tr></table></figure><p><code>skaffold</code> はバージョン制約(≥v0.20)があるので念の為チェック。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ skaffold version</span><br><span class="line">v1.3.1</span><br></pre></td></tr></table></figure><p>問題なさそうですね。次に進みます。<br>READMEに従う形でMANIFESTをapply。ここの紐解きは後述(★)します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f ./istio-manifests</span><br><span class="line">gateway.networking.istio.io/frontend-gateway created</span><br><span class="line">virtualservice.networking.istio.io/frontend-ingress created</span><br><span class="line">virtualservice.networking.istio.io/frontend created</span><br><span class="line">serviceentry.networking.istio.io/whitelist-egress-googleapis created</span><br><span class="line">serviceentry.networking.istio.io/whitelist-egress-google-metadata created</span><br></pre></td></tr></table></figure><p>skaffoldを使って一気にイメージ登録からデプロイまでを行います。Docでは30分未満との記述がありましたが、筆者環境では1時間半以上かかりました。。。マシンスペックとネットワークスピードですかね。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ skaffold run --default-repo=gcr.io/&lt;your-project&gt;</span><br></pre></td></tr></table></figure><p>何はともあれ無事にデモアプリのデプロイが完了しました。<br>Podの稼働状況を見てみます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get po</span><br><span class="line">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">adservice-7b456d8f85-29s59               2/2     Running   0          9h</span><br><span class="line">cartservice-7874b9c947-7vgmz             2/2     Running   3          9h</span><br><span class="line">checkoutservice-68c84b95cb-kx7z5         2/2     Running   0          9h</span><br><span class="line">currencyservice-58dc87958b-knkzr         2/2     Running   0          9h</span><br><span class="line">emailservice-5f4d4cc69-4mp75             2/2     Running   0          9h</span><br><span class="line">frontend-75b6b5d576-pxbcv                2/2     Running   6          9h</span><br><span class="line">loadgenerator-554f8b4bc8-9rzzx           2/2     Running   6          9h</span><br><span class="line">paymentservice-58867f6b85-nfcwn          2/2     Running   0          9h</span><br><span class="line">productcatalogservice-5c567d44cf-jsgjx   2/2     Running   0          9h</span><br><span class="line">recommendationservice-6fb9fd5b8f-5p449   2/2     Running   0          9h</span><br><span class="line">redis-cart-698f46b844-f4qr8              2/2     Running   0          9h</span><br><span class="line">shippingservice-6fd9764fc5-b44lc         2/2     Running   0          142m</span><br></pre></td></tr></table></figure><p>デフォルトのクラスタ設定ではリソースが足らず、半数以上のPodがPending状態となってしまいました。<br>Autoscalingの設定を入れることで解消しましたが、それに伴いCrashLoopBackoffが発生してしまったPodがいくつか存在しています。</p><p>Autoscale後は <code>n1-standard-1</code> が6台並ぶ構成となりました。（初期3台構成）</p><p><code>sidecar injection</code> を有効にしたので、Podの中も少し覗いてみます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod adservice-7b456d8f85-29s59</span><br><span class="line">Name:               adservice-7b456d8f85-29s59</span><br><span class="line">Namespace:          default</span><br><span class="line">Priority:           0   </span><br><span class="line">PriorityClassName:  &lt;none&gt;</span><br><span class="line">・・・</span><br><span class="line">・・・</span><br><span class="line">Containers:</span><br><span class="line">  server:</span><br><span class="line">・・・</span><br><span class="line">・・・</span><br><span class="line">  istio-proxy:</span><br><span class="line">・・・</span><br><span class="line">・・・</span><br></pre></td></tr></table></figure><p><code>istio-proxy</code> がコンテナとして稼働していることが確認できました。</p><p>画面へのアクセスも試みてみましょう。<br>まずはIPを取得。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get service frontend-external</span><br><span class="line">NAME                TYPE           CLUSTER-IP    EXTERNAL-IP      PORT(S)        AGE</span><br><span class="line">frontend-external   LoadBalancer   10.12.0.203   35.232.239.135   80:30731/TCP   9h</span><br></pre></td></tr></table></figure><p><code>35.232.239.135</code> がIPなのでアクセスすると…</p><img src="/images/20200206/photo_20200206_03.png"><p>無事にデモ画面が表示されました！！</p><h1 id="サービスモニタリングを行う"><a href="#サービスモニタリングを行う" class="headerlink" title="サービスモニタリングを行う"></a>サービスモニタリングを行う</h1><p>さて、Istioを使う意義の一つであるモニタリングに踏み込んでいきましょう。<br>細かい設定手順は<a href="https://github.com/GoogleCloudPlatform/istio-samples/tree/master/istio-stackdriver#monitoring" target="_blank" rel="noopener">公式のMonitoring解説パート</a>がとても丁寧なので参照すると良いです。</p><p>以下はAdd ChartよりServer LatencyのChartを作成している画面です。<br>各項目設定時は選択候補がとてもたくさんありましたが、インクリメンタルサーチでどんどん絞れるのでストレスなく作成を進められました。</p><img src="/images/20200206/photo_20200206_04.png"><p>いくつかのメトリクスを追加してみると…</p><img src="/images/20200206/photo_20200206_05.png"><p>簡単にダッシュボードが作成できました。<br>既に様々なデータがStackdriver Monitoringへ送られているので、それをダッシュボード化すれば良いだけで特段難しいことは無かったです。</p><h1 id="サービストレースを行う"><a href="#サービストレースを行う" class="headerlink" title="サービストレースを行う"></a>サービストレースを行う</h1><p>簡単ですがトレースも行ってみました。<br>Stackdriver Traceの画面にて時系列順にLatencyがplotされます。</p><img src="/images/20200206/photo_20200206_06.png"><p>ちょうど点線のあたりでポチポチ画面を触っていたのですが、気になるほど高Latencyになってるわけではありませんでした。</p><p>処理ごとのLatencyも確認できます。</p><img src="/images/20200206/photo_20200206_07.png"><p>もちろん実装次第ではもっとブレークダウンした形でLatencyを参照できます。<br>こんなに簡単に見られることが分かってしまうと、OpenCensusを使った可視化にもっともっとチャレンジしたいという気持ちに包まれます！</p><h1 id="GKEクラスタに適用したIstio用MANIFESTについて"><a href="#GKEクラスタに適用したIstio用MANIFESTについて" class="headerlink" title="GKEクラスタに適用したIstio用MANIFESTについて"></a>GKEクラスタに適用したIstio用MANIFESTについて</h1><blockquote><p>READMEに従う形でMANIFESTをapply。ここの紐解きは後述(★)します。</p></blockquote><p>ここの布石を回収します。<br>applyしたのは<a href="https://github.com/GoogleCloudPlatform/microservices-demo/tree/master/istio-manifests" target="_blank" rel="noopener">ここ</a>にある3つのyamlでした。</p><p>1つ目は <code>frontend-gateway.yaml</code> です。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Gateway</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">frontend-gateway</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    istio:</span> <span class="string">ingressgateway</span> <span class="comment"># use Istio default gateway implementation</span></span><br><span class="line"><span class="attr">  servers:</span></span><br><span class="line"><span class="attr">  - port:</span></span><br><span class="line"><span class="attr">      number:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">    hosts:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"*"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">frontend-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">  gateways:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">frontend-gateway</span></span><br><span class="line"><span class="attr">  http:</span></span><br><span class="line"><span class="attr">  - route:</span></span><br><span class="line"><span class="attr">    - destination:</span></span><br><span class="line"><span class="attr">        host:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">        port:</span></span><br><span class="line"><span class="attr">          number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>Istioを有効化すると自動的に <code>Ingress Gateway</code> が有効化されるのですが、具体的にGatewayがどのようなリクエストを受け付けるか定義しているのが <code>kind: Gateway</code> の箇所です。全てのHTTPリクエストを受け付ける形で定義されています。</p><p><code>Ingress Gateway</code> 自体の詳細は<a href="https://istio.io/docs/tasks/traffic-management/ingress/ingress-control/" target="_blank" rel="noopener">こちら</a>も参照してみてください。</p><p><code>kind: VirtualService</code> で定義されているのが、Gatewayを通過したリクエストの転送先です。 <code>destination</code> にて具体的な記載があり <code>frontend</code> と記載されているため今回のデモアプリではWeb画面を返却するWebサーバへルーティングされます。</p><p>Ingress GatewayのIPアドレスは以下のコマンドで取得可能です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ INGRESS_HOST=&quot;$(kubectl -n istio-system get service istio-ingressgateway \</span><br><span class="line">   -o jsonpath=&apos;&#123;.status.loadBalancer.ingress[0].ip&#125;&apos;)&quot;</span><br><span class="line">$ echo &quot;$INGRESS_HOST&quot;</span><br><span class="line">34.69.104.178</span><br></pre></td></tr></table></figure><p>2つ目は <code>frontend.yaml</code> です。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"frontend.default.svc.cluster.local"</span></span><br><span class="line"><span class="attr">  http:</span></span><br><span class="line"><span class="attr">  - route:</span></span><br><span class="line"><span class="attr">    - destination:</span></span><br><span class="line"><span class="attr">        host:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">        port:</span></span><br><span class="line"><span class="attr">          number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>これの存在意義はしっかり腹落ちしきっていないのですが、①IstioのIngress gatewayを使ったアクセスと②LoadBalancerを使ったアクセスではHTTPレスポンスヘッダに差異がありました。</p><p>まずは①の場合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v http://34.69.104.178</span><br><span class="line">* Rebuilt URL to: http://34.69.104.178/</span><br><span class="line">* Trying 34.69.104.178...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to 34.69.104.178 (34.69.104.178) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: 34.69.104.178</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; set-cookie: shop_session-id=e654493b-ee35-4c30-9cbd-c11b72f89a4d; Max-Age=172800</span><br><span class="line">&lt; date: Wed, 05 Feb 2020 07:23:26 GMT</span><br><span class="line">&lt; content-type: text/html; charset=utf-8</span><br><span class="line">&lt; x-envoy-upstream-service-time: 70</span><br><span class="line">&lt; server: istio-envoy</span><br><span class="line">&lt; transfer-encoding: chunked</span><br></pre></td></tr></table></figure><p>次は②の場合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v http://35.232.239.135</span><br><span class="line">* Rebuilt URL to: http://35.232.239.135/</span><br><span class="line">* Trying 35.232.239.135...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to 35.232.239.135 (35.232.239.135) port 80 (#0) </span><br><span class="line">&gt; GET / HTTP/1.1 </span><br><span class="line">&gt; Host: 35.232.239.135 </span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200 OK </span><br><span class="line">&lt; set-cookie: shop_session-id=828d0405-1c54-4605-8156-6178c480540f; Max-Age=172800 </span><br><span class="line">&lt; date: Wed, 05 Feb 2020 07:24:24 GMT</span><br><span class="line">&lt; content-type: text/html; charset=utf-8 </span><br><span class="line">&lt; x-envoy-upstream-service-time: 32</span><br><span class="line">&lt; server: istio-envoy</span><br><span class="line">&lt; x-envoy-decorator-operation: frontend.default.svc.cluster.local:80/* </span><br><span class="line">&lt; transfer-encoding: chunked</span><br></pre></td></tr></table></figure><p>②のLoadBalancerを使ったアクセスの場合のみ <code>x-envoy-decorator-operation</code> というヘッダが含まれました。<a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-decorator-operation" target="_blank" rel="noopener">Envoyの公式ドキュメント</a>にてこのヘッダについて言及されているのですが、おそらく内部ルーティングにおける名前解決のために本yamlをapplyしているものと思います。</p><p>3つ目は <code>whitelist-egress-googleapis.yaml</code><br>外部への通信を許可する設定です。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceEntry</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">whitelist-egress-googleapis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"accounts.google.com"</span> <span class="comment"># Used to get token</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"*.googleapis.com"</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - number:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">  - number:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">HTTPS</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">https</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceEntry</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">whitelist-egress-google-metadata</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">metadata.google.internal</span></span><br><span class="line"><span class="attr">  addresses:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">169.254</span><span class="number">.169</span><span class="number">.254</span> <span class="comment"># GCE metadata server</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - number:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">  - number:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">HTTPS</span></span><br></pre></td></tr></table></figure><p>※外部への通信に対する挙動はIstioのバージョンによって異なるので利用バージョンの<a href="https://istio.io/docs/tasks/traffic-management/egress/egress-control/" target="_blank" rel="noopener">公式ドキュメント</a>を確認してください。</p><blockquote><p>all outbound traffic from an Istio-enabled pod is redirected to its sidecar proxy by default</p></blockquote><p>執筆時点(2020.02.05)での最新バージョンは <code>1.4.3</code> で、デフォルトの挙動は「クラスタ外部への通信を許可する」となります。</p><p>ちなみに今回検証で利用したGKEクラスタにインストールしたIstioのバージョンは <code>1.1.7</code> で、正確には <code>Istio 1.1.17-gke.2</code> です。</p><p>以下のページにて、GKEクラスタのバージョンごとのIstioバージョンのマッピングが確認できます。<br><a href="https://cloud.google.com/istio/docs/istio-on-gke/versions" target="_blank" rel="noopener">https://cloud.google.com/istio/docs/istio-on-gke/versions</a></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回は触りの部分でしたがGKEにおけるIstio活用について皆さんにお伝えできていれば幸いです。Traffic RoutingなどIstioの真髄とも言える部分への踏み込みはまた別に機会でやれたらと思います。</p><p>以上、GCP連載2日目でした。明日もお楽しみに！！</p><hr><p>連載リンク：</p><ul><li><a href="https://future-architect.github.io/tags/GCP%98A%8D%DA/">GCP連載企画</a></li></ul><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200205/">GCP連載: Stackdriver Loggingへ良い感じのログ出力方法を考える</a></li><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの村田です。&lt;a href=&quot;https://future-architect.github.io/tag
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Istio" scheme="https://future-architect.github.io/tags/Istio/"/>
    
      <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#1 Stackdriver Loggingへ良い感じのログ出力方法を考える</title>
    <link href="https://future-architect.github.io/articles/20200205/"/>
    <id>https://future-architect.github.io/articles/20200205/</id>
    <published>2020-02-05T00:23:10.000Z</published>
    <updated>2020-02-12T00:39:46.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCPをテーマにした連載企画</a>を始めるということで、初回はStackdriver Loggingの活用方法をまとめます。1記事でまとめるには手が余るほど様々な機能があるため、初回はログの出力とビューア周りといったアプリケーション開発者視点での機能に絞って説明していきます。利用コードはGoで書かれていますが、汎用的な内容なので他の言語でもある程度通じる内容にしているつもりです。</p><p>連載企画は以下の10本をほぼ連日投稿する予定です。お楽しみに！</p><ol><li>Stackdriver Loggingへ良い感じのログ出力方法を考える（この記事です）</li><li>Istio on GKEではじめるサービスメッシュ</li><li>Goでサーバーレスな管理画面アプリを作る</li><li>Cloud Life Sciencesを見てみた</li><li>【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる</li><li>Forseti Config Validator </li><li>s3→BigQuery</li><li>Firewall Ruleのタグ命名規則について考えて</li><li>初めてのGCP 画像AI(VISION API)をさわってみた</li><li>Cloud Deployment Manager</li></ol><h1 id="Stackdriver-Loggingについて"><a href="#Stackdriver-Loggingについて" class="headerlink" title="Stackdriver Loggingについて"></a>Stackdriver Loggingについて</h1><img src="/images/20200205/photo_20200205_01.png" class="img-small-size"><p><a href="https://cloud.google.com/logging" target="_blank" rel="noopener">Stackdriver Logging</a>は、GCPやAWS(!)からのログの収集、検索、分析、モニタリング、通知といった機能を持つGCPのマネージドサービスの1つです。ユーザからするとログの収集・蓄積し、それらを検索するためのログ基盤を自前で構築するのはかなり大変ですが、全てStackdriver Loggingサービス側が面倒見てくれるため、よりアプリケーションなど自分たちの関心事に集中できるようになります。</p><p>なお、2020/02/04時点ではログデータがプロジェクトごとに<a href="https://cloud.google.com/stackdriver/pricing" target="_blank" rel="noopener">最初の50 GiBが無料で、 その後は$0.50/GiB</a> の費用がかかります。</p><h1 id="Stackdriver-Loggingにログを流す方法"><a href="#Stackdriver-Loggingにログを流す方法" class="headerlink" title="Stackdriver Loggingにログを流す方法"></a>Stackdriver Loggingにログを流す方法</h1><p>Stackdriver Loggingへ直接ログデータを流し込むには、<a href="https://cloud.google.com/logging/docs/reference/librarie" target="_blank" rel="noopener">Logging Client Libraries</a>が存在します。こちらは内部的にStackdriver LoggingのWebAPIのエンドポイントをコールしてログデータを流し込んでくれます。</p><p>Logging Client Librariesを利用しなくても、CloudRunやFunction上にアプリケーションをデプロイし、それ上で標準出力/標準エラーでログを出せばStackdriver LoggingにGCPサービス側で連携することができます。CloudRunは標準出力/標準エラーに加えて、 <code>/var/log</code> やsyslog(<code>/dev/log</code>) に出力しても連携されます<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p>また、<a href="https://cloud.google.com/logging/docs/agent/" target="_blank" rel="noopener">Stackdriver Logging Agent</a> というfluentdベースのツールを導入することで、ローカルファイル出力されたログも収集させることができます。</p><p>今回はアプリケーションからLogging Client Librariesを <strong>利用しない</strong> ケースで調査しています。</p><h1 id="ログレベルについて"><a href="#ログレベルについて" class="headerlink" title="ログレベルについて"></a>ログレベルについて</h1><p>ログレベル（Stackdriver Loggingのコンテキストではseverity）によって、ビューアで表示する見た目を変更することができます。</p><img src="/images/20200205/photo_20200205_02.png" style="border:solid 1px #000000"><br><p>上から、DEBUG、INFO、WARN、ERROR、CRITICALです。Stackdriverは各種検索Filterも充実していますが、ログ量が増えるとちょっとしたことで見落としが発生しうるので、障害時の運用フローを整備する前にSeverityは正しく設定したほうが良いでしょう。</p><p>severity設定方法は、標準SDKを利用する以外だと、ログ出力レイアウトをJSONにすることが必要になります。</p><p>GoでJSON形式でログ出力と聞くと、最近では “rs/zerolog” か “uber-go/zap” がオススメですが、今回はわかりやすさ優先で心をこめてjson.Marshalする方式で説明を進めます。</p><p>JSONのログレベル項目は <code>severity</code> という名称です。</p><figure class="highlight go"><figcaption><span>ログレベル指定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cloud FunctionのEndpoint関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"DEBUG"</span>, <span class="string">"debug log"</span>))</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"INFO"</span>, <span class="string">"info log"</span>))</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"WARN"</span>, <span class="string">"warn log"</span>))</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"ERROR"</span>, <span class="string">"error log"</span>))</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"FATAL"</span>, <span class="string">"fatal log"</span>))</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON変換用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FmtJSON</span><span class="params">(logLevel, message <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">entry := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"severity"</span>: logLevel,</span><br><span class="line"><span class="string">"message"</span>:  message,</span><br><span class="line">&#125;</span><br><span class="line">bytes, _ := json.Marshal(entry)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この<a href="https://cloud.google.com/functions/docs/deploying/filesystem" target="_blank" rel="noopener">CloudFunctionをデプロイ</a>し、テスト実行などから実行するとログ出力をお手軽に確かめることができます。</p><p>そうすると、ビューアの <code>textPayload</code> から <code>severity</code> の項目が除去され、上位のフィールドにセットされていることがわかると思います。</p><img src="/images/20200205/photo_20200205_03.png" style="border:solid 1px #000000"><p>ちなみに、<a href="https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity" target="_blank" rel="noopener">利用できる Severityのレベルは以下の種類</a>です。</p><table><thead><tr><th>ENUM</th><th>Level</th></tr></thead><tbody><tr><td>DEFAULT</td><td>(0) The log entry has no assigned severity level.</td></tr><tr><td>DEBUG</td><td>(100) Debug or trace information.</td></tr><tr><td>INFO</td><td>(200) Routine information, such as ongoing status or performance.</td></tr><tr><td>NOTICE</td><td>(300) Normal but significant events, such as start up, shut down, or a configuration change.</td></tr><tr><td>WARNING</td><td>(400) Warning events might cause problems.</td></tr><tr><td>ERROR</td><td>(500) Error events are likely to cause problems.</td></tr><tr><td>CRITICAL</td><td>(600) Critical events cause more severe problems or outages.</td></tr><tr><td>ALERT</td><td>(700) A person must take an action immediately.</td></tr><tr><td>EMERGENCY</td><td>(800) One or more systems are unusable.</td></tr></tbody></table><p>どのレベルをどのような場合に出力するかはチームごとにコンセンサスを取ったほうが良いでしょう。</p><p>わたしたちは、だいたいDEBUG, INFO, WARNING, ERRORの4種類をアプリケーションコードで利用することが多いです。<br>開発環境ではDEBUG、プロダクション以上ではINFOレベルでログ出力させ、ERROR以上でSlackやメールに通知するようにしています。</p><h2 id="うまく行かないケース"><a href="#うまく行かないケース" class="headerlink" title="うまく行かないケース"></a>うまく行かないケース</h2><p>ログ出力内容をJSONではななくただのテキスト形式、例えば <code>fmt.Println(&quot;[INFO] call any method&quot;)</code>  にしてもStackdriverはseverityを認識してくれません。</p><figure class="highlight go"><figcaption><span>うまくSeverityが設定されないケース</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"[DEBUG] function"</span>)</span><br><span class="line">log.Printf(<span class="string">"[INFO] function"</span>)</span><br><span class="line">log.Printf(<span class="string">"[WARN] function"</span>)</span><br><span class="line">log.Printf(<span class="string">"[ERROR] function"</span>)</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20200205/photo_20200205_04.png" style="border:solid 1px #000000"><p>上記のキャプチャ画像を見るとseverity は空っぽなので、見た目も特に色が付いていません。<br>ログエントリをドリルダウンして、<code>severity</code> のレベルを確認しても空っぽです。</p><p>また、標準エラー出力にログを書き込むと、severityが変わってくると期待しましたが、こちらも変化なしです。</p><figure class="highlight go"><figcaption><span>標準エラー</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"[INFO] info log"</span>)</span><br><span class="line">fmt.Fprintln(os.Stderr, <span class="string">"[ERROR] error log"</span>) <span class="comment">// 標準エラー</span></span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20200205/photo_20200205_05.png" style="border:solid 1px #000000"><p>こういったログ出力ポリシーになっている場合は、文字列ではERRORというラベルが見えますが、ビューア上は何も変化しないため見落としに注意ください。</p><h1 id="ログ取得時間について"><a href="#ログ取得時間について" class="headerlink" title="ログ取得時間について"></a>ログ取得時間について</h1><p>ログレベルの <code>severity</code> 同様に <code>time</code> というJSONフィールドを設定すると、ログ上のタイムスタンプを上書きすることができます。指定しない場合はおそらく現在時刻が設定されます。</p><p>時刻フォーマットはprotobufでいう<a href="https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp" target="_blank" rel="noopener">Timestamp</a> で、RFC 3339に則れば良いとのことです。</p><figure class="highlight go"><figcaption><span>timeフィールドを追加</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"INFO"</span>, <span class="string">"info log"</span>))</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"ERROR"</span>, <span class="string">"error log"</span>))</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FmtJSON</span><span class="params">(logLevel, message <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">entry := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"severity"</span>: logLevel,</span><br><span class="line"><span class="string">"message"</span>:  message,</span><br><span class="line"><span class="string">"time"</span>:  time.Now().Format(time.RFC3339Nano), <span class="comment">// time項目を追加</span></span><br><span class="line">&#125;</span><br><span class="line">bytes, _ := json.Marshal(entry)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このようにすると、先程の severityと同様に、textPayloaのJSONからtimeフィールドが消え、上位のtimestampが書き換えられます。</p><img src="/images/20200205/photo_20200205_06.png" style="border:solid 1px #000000"><p>timeフィールドは任意項目ですが、ローカル実行での確認時にも便利なため特に理由がなければ付けたほうが良いと思います。</p><h1 id="Stackdriver-Traceとは"><a href="#Stackdriver-Traceとは" class="headerlink" title="Stackdriver Traceとは"></a>Stackdriver Traceとは</h1><img src="/images/20200205/trace.png" class="img-small-size"><p>Stackdriver Traceはアプリケーションからレイテンシ データを収集して Google Cloud Platform Console に表示する、分散トレースシステムです。<br><a href="https://cloud.google.com/trace/" target="_blank" rel="noopener">https://cloud.google.com/trace/</a></p><p>分散トレースって何？という方はこちら↓の記事を参考ください。<br><a href="https://future-architect.github.io/articles/20190604/">https://future-architect.github.io/articles/20190604/</a></p><p>分散トレースの機能の一つには、下図のようなウォーターフォールチャートを出すことができます。これを利用して、アプリケーションのボトルネック調査などに活かすことできます。</p><img src="/images/20200205/photo_20200205_07.png" style="border:solid 1px #000000"><h2 id="Stackdriver-TraceとStackdriver-Loggingの連携"><a href="#Stackdriver-TraceとStackdriver-Loggingの連携" class="headerlink" title="Stackdriver TraceとStackdriver Loggingの連携"></a>Stackdriver TraceとStackdriver Loggingの連携</h2><p>連携の前準備として、アプリケーションのロールに <strong>Cloud Trace エージェント</strong> のロールが必須になります。</p><p>コードはまず、OpenCensus経由でStackdriver Traceに連携します。</p><p><code>trace.ApplyConfig(trace.Config{DefaultSampler: trace.AlwaysSample()})</code> はテスト用に毎回トレースを行うような指定です。通常は毎回実施するとコストが高いため、動作確認時以外は設定しないほうが良いと思います。</p><figure class="highlight go"><figcaption><span>初期化処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client *http.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">exporter, err := stackdriver.NewExporter(stackdriver.Options&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">trace.RegisterExporter(exporter)</span><br><span class="line">trace.ApplyConfig(trace.Config&#123;DefaultSampler: trace.AlwaysSample()&#125;) <span class="comment">// テスト用途</span></span><br><span class="line"></span><br><span class="line">client = &amp;http.Client&#123;</span><br><span class="line">Transport: &amp;ochttp.Transport&#123;</span><br><span class="line">Propagation: &amp;propagation.HTTPFormat&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cloud Functionの途中でHTTPリクエストを発行するものとして、http.Clientも同時に生成しています。</p><p>続いてCloud Functionのメイン処理です。<code>trace.StartSpan(r.Context(), &quot;root function&quot;)</code> でSpanという、計測の単位を作成できます。処理の途中で<code>init</code> で生成した <code>http.Client</code> を利用すると、OpenCensusライブラリ側がHTTP Request/Responseをキャプチャして、 Stackdriver Trace側に送信してくれます。</p><figure class="highlight go"><figcaption><span>Cloud_Functionのメイン処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">sctx, span := trace.StartSpan(r.Context(), <span class="string">"root function"</span>)</span><br><span class="line"><span class="keyword">defer</span> span.End()</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">200</span>) <span class="comment">// 何かしらの処理の代替にSleepする</span></span><br><span class="line"></span><br><span class="line">req, _ := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"https://www.future.co.jp"</span>, <span class="literal">nil</span>)</span><br><span class="line">req = req.WithContext(sctx)</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"INFO"</span>, <span class="string">"do http get request"</span>))</span><br><span class="line"><span class="keyword">if</span> _, err := ioutil.ReadAll(resp.Body); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stackdriver Trace側のログのリンクを見ると、Stackdriver Loggingでログを確認することができます。</p><img src="/images/20200205/photo_20200205_08.png" style="border:solid 1px #000000"><p>リンクをクリックすると、Stackdriver Logging側の該当するログに遷移できます。</p><img src="/images/20200205/photo_20200205_09.png" style="border:solid 1px #000000"><p>今回のサンプルコードには記載していないですが、ログ側に検索条件や処理件数を出力しておくと、その処理時間が妥当なのか、想定外なのか判断ができるため、性能調査などを行う場合には非常に有用だと思います。</p><h2 id="GCP以外でアプリケーションを動かす場合"><a href="#GCP以外でアプリケーションを動かす場合" class="headerlink" title="GCP以外でアプリケーションを動かす場合"></a>GCP以外でアプリケーションを動かす場合</h2><p>GCP以外のリソース上でアプリケーションを動かす場合は、<code>trace</code> と、<code>spanId</code> のフィールドを利用するとStackdriver TraceとLoggingを紐付けることができるようです。その場合はログ出力部分を以下のように書き換えれば良いと思います。 <strong>こちらはまだ未検証なので参考程度にお願いします。</strong></p><p><a href="https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry" target="_blank" rel="noopener">https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry</a></p><figure class="highlight go"><figcaption><span>JSONログ出力部分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FmtJSON</span><span class="params">(logLevel, message <span class="keyword">string</span>, span *trace.Span)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">entry := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"severity"</span>: logLevel,</span><br><span class="line"><span class="string">"message"</span>:  message,</span><br><span class="line"><span class="string">"time"</span>:     time.Now().Format(time.RFC3339Nano),</span><br><span class="line"><span class="string">"trace"</span>:    span.SpanContext().TraceID.String(), <span class="comment">// 追加</span></span><br><span class="line"><span class="string">"spanId"</span>:   span.SpanContext().SpanID.String(),  <span class="comment">// 追加</span></span><br><span class="line">&#125;</span><br><span class="line">bytes, _ := json.Marshal(entry)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h1><p>Stackdriverの <a href="https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry" target="_blank" rel="noopener">LogEntry</a> のドキュメントを読むと、他にも <code>labels</code> や <code>traceSampled</code> などのオプションが存在します。  <code>traceSampled</code> はデフォルト false ですが、 trueにするとサンプリングされて Stackdriver Trace側に連携されるようです。このあたりの使い分けは別途調査したいと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Stackdriver Loggingで視認性を上げるためには、JSON形式でログを出力しseverityを設定する</li><li>time項目も設定しておくと良い</li><li>Stackdriver Traceを設定するとパフォーマンス可視化とログが紐づくと捗るのでオススメ</li></ul><p>話しが少しそれますが、一度Stackdriver Traceでビジュアライズを始めるとのウォーターフォールビューの見た目にこだわりたくなります。これらをうまく出すコツについてはまた別途ブログ化したいと思います。</p><hr><p>連載リンク：</p><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li></ul><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">CloudRunのその仕様はドキュメント読むまで気が付かなかったです。https://cloud.google.com/run/docs/logging</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Monitoring" scheme="https://future-architect.github.io/tags/Monitoring/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="OpenCensus" scheme="https://future-architect.github.io/tags/OpenCensus/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>これさえあればサービス構成図がだいたい描けるアイコンセットを公開します！</title>
    <link href="https://future-architect.github.io/articles/20200204/"/>
    <id>https://future-architect.github.io/articles/20200204/</id>
    <published>2020-02-03T23:12:14.000Z</published>
    <updated>2020-02-03T23:26:18.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。木村です。<br>以前、<a href="https://future-architect.github.io/articles/20160721/">『これさえあればシステム構成図がだいたい描けるアイコンセットを公開します！』</a>という記事を公開いたしました。<br>もしご利用いただけていれば、嬉しい限りです！</p><h1 id="サービス構成図とは"><a href="#サービス構成図とは" class="headerlink" title="サービス構成図とは"></a>サービス構成図とは</h1><p>昨今はDX・UX・IoTなどの言葉も浸透し、システムと生活の距離がどんどん近くなってきています。<br>スライドにおいても、システムにとどまらず、サービス全体の構成図を作成する機会が、より一層増えていることを実感しています。</p><p>サービス構成図は、システム構成に加え、様々な立場のプレースホルダーやクライアント機器、さらに物理的な場所や移動手段の概念が含まれます。<br>これらのアイコンを都度探し、思ったようなモチーフにたどり着くまでには、予想外の手間がかかってしまうこともあります。</p><p>・・・ということで、「これさえあればサービス構成図がだいたい描けるアイコンセット」を公開します！</p><h1 id="「これさえあればサービス構成図がだいたい描けるアイコンセット」の概要"><a href="#「これさえあればサービス構成図がだいたい描けるアイコンセット」の概要" class="headerlink" title="「これさえあればサービス構成図がだいたい描けるアイコンセット」の概要"></a>「これさえあればサービス構成図がだいたい描けるアイコンセット」の概要</h1><p>アイコンはPNG形式、SVG形式で公開しています。<br>全部で107種類（うち、色差分39種類）、サイズは500×500ピクセルとなっています。</p><img src="/images/20200204/list.png"><p>＞＞ <a href="https://github.com/future-architect/icons/releases/download/v_1.1.0/v_1.1.0-icons.zip" target="_blank" rel="noopener">ダウンロード</a></p><p>この 作品 は <a href="https://creativecommons.org/publicdomain/zero/1.0/deed.ja" target="_blank" rel="noopener">CC0 1.0</a>の下に提供されています。<br>ご自由にお使い下さい！</p><p>なお、アイコンはGithubで管理しています。<br><a href="https://github.com/future-architect/icons" target="_blank" rel="noopener">https://github.com/future-architect/icons</a></p><p>アイコン探しの手間を省き、少しでもみなさまに貢献できれば幸いです。</p><h1 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h1><p>このアイコン作成には、同僚の千葉さん,織田さん,加部さん,矢野さんに多大な協力をいただきました。</p><p>重ね重ねありがとうございます！</p><p>また、前回にTwitterなどSNSで使っているよなどの報告は非常に嬉しかったです。ぜひ今後もよろしくおねがいします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。木村です。&lt;br&gt;以前、&lt;a href=&quot;https://future-architect.github.io/
      
    
    </summary>
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="icon" scheme="https://future-architect.github.io/tags/icon/"/>
    
  </entry>
  
  <entry>
    <title>チームで機能設計するためのPlantUML標準化</title>
    <link href="https://future-architect.github.io/articles/20200203/"/>
    <id>https://future-architect.github.io/articles/20200203/</id>
    <published>2020-02-03T00:16:35.000Z</published>
    <updated>2020-02-03T00:41:47.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>現在所属しているプロジェクトではWebAPIやバッチ処理の設計の一環としてPlantUMLを利用しています。効率よく品質高くアウトプットを出すためには、プログラミング言語に対してコーディング規約があるように、UMLに対してもチームで設計するにあたり一定のルールを決める必要があります。<br>そこでプロジェクト内のPlantUMLを使用するうえでのガイドラインやルールをまとめる機会があり、せっかくなのでそれを記事化します。</p><h2 id="記事のゴール"><a href="#記事のゴール" class="headerlink" title="記事のゴール"></a>記事のゴール</h2><ul><li>シーケンス図設計におけるPlantUMLの標準化</li><li>必要最低限のルールだけに絞ってチーム設計の生産性と品質を上げる</li></ul><h2 id="記事の前提"><a href="#記事の前提" class="headerlink" title="記事の前提"></a>記事の前提</h2><ul><li>ルールの想定の利用シーン：<br>チームで大量生産する業務機能の処理フローを表現するために使う場合を想定。<br>また、この記事に記載されているルールはRDBを中心的に使用したAPI処理やバッチ処理等を念頭に置き決められたものです。</li><li>ルールの想定の効果：<br>PlantUMLを標準化/シンプル化することで設計者も、レビュアも少ないインプットで品質高く設計/レビュできようになる想定。</li><li>ルールがカバーしている図の種類：<br>PlantUMLで様々な種類の図が作成できますがこの記事のスコープはシーケンス図に限った話になります。</li><li>ルールに沿って作成されるシーケンス図に期待される最低限の役割：<ul><li>一目で機能全体の流れと大まかなロジックがわかる。</li><li>デバッグ、障害対応やパフォーマンスチューニングの第一ステップとして即座に調査ターゲットを絞り、問題の詳細設計やソースコードに導くヒントを与えてくれる。</li></ul></li></ul><h2 id="書いてない内容"><a href="#書いてない内容" class="headerlink" title="書いてない内容"></a>書いてない内容</h2><ul><li>PlantUMLってなに？→ <a href="https://plantuml.com/ja/" target="_blank" rel="noopener">https://plantuml.com/ja/</a></li><li>PlantUMLで何ができる？→ <a href="http://plantuml.com/ja/guide" target="_blank" rel="noopener">http://plantuml.com/ja/guide</a></li><li>そもそもなぜUML？→ <a href="https://qiita.com/laqiiz/items/fb7ad9dfb7430dd08455" target="_blank" rel="noopener">https://qiita.com/laqiiz/items/fb7ad9dfb7430dd08455</a></li><li>PlantUMLのセットアップ手順は？→ <a href="https://qiita.com/couzie/items/9dedb834c5aff09ea7b2" target="_blank" rel="noopener">https://qiita.com/couzie/items/9dedb834c5aff09ea7b2</a><br><br>(セットアップの際はJAVAの環境変数の設定は忘れずに！参考：<a href="https://eng-entrance.com/java-install-env" target="_blank" rel="noopener">https://eng-entrance.com/java-install-env</a>)<br>気軽にPlantUMLを使用したい方はブラウザからでもできます： <a href="https://www.planttext.com/" target="_blank" rel="noopener">https://www.planttext.com/</a>   </li></ul><h2 id="書いてる内容"><a href="#書いてる内容" class="headerlink" title="書いてる内容"></a>書いてる内容</h2><ul><li>このルールに沿ってPlantUMLでシーケンス図を楽しく書いていきましょう！</li></ul><h2 id="puファイルの基本"><a href="#puファイルの基本" class="headerlink" title="puファイルの基本"></a>puファイルの基本</h2><p>PlantUMLのファイル(pu)の中身は大体こんな感じです。<br>大きく、色等といった見た目を決める部分（L39より上）と、実際のシーケンスのフローを示す部分（L39より下）に分けられます。<br><img src="/images/20200203/photo_20200203_01.png" class="img-middle-size"><br>なお、見た目を決める部分は別のコードは一つのconfigファイルに統一させることもできますが、ここはチームの管理の仕方に合わせてやりましょう。</p><p>上記のコードをレンダリングすると下記のような綺麗な図になります。<br><img src="/images/20200203/photo_20200203_02.png" class="img-middle-size"></p><h2 id="基本的な処理の書き方"><a href="#基本的な処理の書き方" class="headerlink" title="基本的な処理の書き方"></a>基本的な処理の書き方</h2><h3 id="矢印"><a href="#矢印" class="headerlink" title="矢印"></a>矢印</h3><p>処理が発生する箇所は矢印で表します。</p><ul><li><strong>シングルヘッド</strong> - 処理がアクターを跨いで一方的になっているもの<br>（例：リクエスト送信、Queueに詰める処理等）</li></ul><figure class="highlight plain"><figcaption><span>single_head_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Client -&gt; Backend: Request</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_03.png" class="img-small-size"><ul><li><strong>ダブルヘッド</strong> - 処理がアクターを跨いで双方的になっているもの<br><br>（例：マスターチェック、DBアクセス処理等）</li></ul><figure class="highlight plain"><figcaption><span>double_head_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Backend &lt;-&gt; RDB: Master Check\n[Store Control Master]</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_04.png" class="img-small-size"><ul><li><strong>リターニング</strong> - 処理がアクターを跨がないもの<br><br>（例：DBにアクセスせずJava内で完結するチェック処理等）</li></ul><figure class="highlight plain"><figcaption><span>returning_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Backend -&gt; Backend: Add select result into Error List</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_05.png" class="img-small-size"><h3 id="イベント"><a href="#イベント" class="headerlink" title="イベント"></a>イベント</h3><ul><li><strong>note</strong> - 大きなイベントごとにnote毎で分けて見やすくします<br>（例：Parameter Check &gt; Update t_status_history<blockquote><p>Process End）</p></blockquote></li></ul><figure class="highlight plain"><figcaption><span>note_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">note over Backend: 1. Parameter Check</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_06.png" class="img-small-size"><h3 id="分岐"><a href="#分岐" class="headerlink" title="分岐"></a>分岐</h3><p>シーケンス図内で分岐や条件付き処理を表したい場合は分岐の処理毎にAltで囲みます。</p><ul><li><strong>alt</strong> - いわゆるifのような条件付き処理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Backend-&gt;Backend: Check A and B</span><br><span class="line">alt If A</span><br><span class="line">    Backend -&gt; Backend: Add x to Error List</span><br><span class="line">end</span><br><span class="line">alt If B</span><br><span class="line">    Backend &lt;-&gt; RDB: Insert x to A table</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_07.png" class="img-small-size"><ul><li><strong>alt - else ①</strong> - いわゆるif-elseのような分岐処理</li></ul><figure class="highlight plain"><figcaption><span>alt_else_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Backend-&gt;Backend: Check A and B</span><br><span class="line">alt If A</span><br><span class="line">    Backend -&gt; Backend: Add x to Error List</span><br><span class="line">else</span><br><span class="line">    Backend &lt;-&gt; RDB: Insert x to A table</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_08.png" class="img-small-size"><ul><li><strong>alt - else ②</strong> - いわゆるif-else if-elseのような分岐処理</li></ul><figure class="highlight plain"><figcaption><span>alt_else_ifexample.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Backend -&gt; Backend: Check something</span><br><span class="line">alt If A</span><br><span class="line">    Backend -&gt; Backend: Add x to Error List</span><br><span class="line">else If B</span><br><span class="line">    Backend &lt;-&gt; RDB: Insert x to A table</span><br><span class="line">else</span><br><span class="line">    Backend -&gt; Client: Response status code 422</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_09.png" class="img-small-size"><h3 id="ループ"><a href="#ループ" class="headerlink" title="ループ"></a>ループ</h3><p>loopが発生した場合はloopで囲みます。<br>loopの右にはループを回す単位をFor Eachで記載する</p><ul><li><strong>loop</strong></li></ul><figure class="highlight plain"><figcaption><span>loop_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop for each EPC</span><br><span class="line">  Backend &lt;-&gt; RDB: Insert\n[t_sales] </span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_13.png" class="img-small-size"><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><ul><li><strong>採番のルール</strong><br>殆どの場合、シーケンス図はスタンドアロンではなく、一つ一つの処理の詳細（データアクセス定義、チェック定義、DB変更定義等）を図以外の場所に記載しますよね。そういった設計書内の詳細の記載とマッピングするために一個一個のフローステップにプロセスIDを付けます。プロセスIDの採番は下記のルールで実施します：<ul><li><font color="YellowGreen">処理が複数あった場合、階層が同じ処理は処理が発生する順に番号を振っていく</font></li><li><font color="LightCoral">直前の処理からaltで階層が深くなるたびにIDの桁に1を足し、１から始める</font></li><li><font color="LightSkyBlue">直前の処理からaltで階層が深くなると同時に、その階層に複数処理があった場合、IDの桁に2桁足す（深くなった理由での一桁と複数処理を分けるためのもう一桁）</font></li></ul></li></ul><figure class="highlight plain"><figcaption><span>id_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">note over Backend: 2. Update Family Tree</span><br><span class="line">loop for each New Member</span><br><span class="line">    alt If Update Pattern = Any member</span><br><span class="line">        Backend -&gt; Backend: 2.1. Check DNA</span><br><span class="line">        alt If DNA test returns success</span><br><span class="line">            Backend &lt;-&gt; RDB: 2.1.1.1. Update\n[t_parent]</span><br><span class="line">            Backend &lt;-&gt; RDB: 2.1.1.2. Update\n[t_child]</span><br><span class="line">            Backend &lt;-&gt; RDB: 2.1.1.3. Update\n[t_grand_child]</span><br><span class="line">        end</span><br><span class="line">        alt If DNA test returns failure</span><br><span class="line">            Backend -&gt; Backend: 2.1.2. Add Member into Error List</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_11.png" class="img-middle-size"><ul><li><strong>改行</strong><br>文字の記載等で改行したい場合は<code>\n</code>を使いましょう。</li></ul><figure class="highlight plain"><figcaption><span>return_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop for each EPC</span><br><span class="line">  Backend &lt;-&gt; RDB: Insert\n[t_sales] </span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_13.png" class="img-small-size"><ul><li><strong>テーブル名</strong><br>DBアクセスが発生した場合はできる限り対象テーブルやデータを記載しましょう。<br><br>テーブル名は[ ]に入れましょう。</li></ul><figure class="highlight plain"><figcaption><span>table_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop for each EPC</span><br><span class="line">  Backend &lt;-&gt; RDB: Insert\n[t_sales] </span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_13.png" class="img-small-size"><ul><li><strong>エラー</strong><br>エラーやエクセプションはAltで表現しましょう。</li></ul><figure class="highlight plain"><figcaption><span>error_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alt Error</span><br><span class="line">    Backend -&gt; Client: 1.4. Response status code 402</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_14.png" class="img-small-size"><ul><li><strong>ロック</strong><br>ロックする場合は下記のように<code>Select Lock for [ロック解除の処理] [ロックするテーブル]</code>と記載する。<br>ただロックに関してはプロジェクトのロック方式などにもよるのでここはフレキシブルに。</li></ul><figure class="highlight plain"><figcaption><span>lock_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Backend &lt;-&gt; RDB: 2.2.1. Select\nLock for Update at 2.2.4\n[t_sales_header]</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_15.png" class="img-small-size"><ul><li><p><strong>インデント</strong><br>インデントは基本しなくてもコードはレンダリングされるが、他の言語同様読みやすいように入れましょう。</p></li><li><p><strong>色</strong><br>余談ですがPlantUMLのデフォルトカラーって良いと思う人、世の中あまりいないですよね。<br>これはもう、目に良いビジュアルに自分で変えていくしかないです。<br>色を変えるだけでだいぶ印象も変わってきます。ちなみに私のお気に入りは：</p><ul><li>パレット①：<br>「puファイルの基本」で使ったサンプル図で使っているものです。グレーをベースにカラフルなアクセント、トイライクで見やすい（個人的な意見）パレットを作りました。<br><ul><li><code>#FFFFFF</code><span class="inline-code-color" style="background-color: #FFFFFF;"></span>（font1）</li><li><code>#DDDDDD</code><span class="inline-code-color" style="background-color: #DDDDDD;"></span>（background）</li><li><code>#454645</code><span class="inline-code-color" style="background-color: #454645;"></span>（font2、line）</li><li><code>#FF6F61</code><span class="inline-code-color" style="background-color: #FF6F61;"></span>（participant）</li><li><code>#98DDDE</code><span class="inline-code-color" style="background-color: #98DDDE;"></span>（database)</li><li><code>#FFDA29</code><span class="inline-code-color" style="background-color: #FFDA29;"></span>（entity）</li><li><code>#98FB98</code><span class="inline-code-color" style="background-color: #98FB98;"></span>（note）</li></ul></li><li>パレット②：<br>「基本的な処理の書き方」で使ったサンプル図で使っているものです。使用する色が少ないなためシンプルでクリーンな資料と相性が良いです。バックグラウンドも白く、シーケンス図をWeb等に埋め込んで使う場合に適しており、ページと一体化して見えるので統一感があっておすすめです。<br><ul><li><code>#FFFFFF</code><span class="inline-code-color" style="background-color: #FFFFFF;"></span>（font1, background）</li><li><code>#696969</code><span class="inline-code-color" style="background-color: #696969;"></span>（line）</li><li><code>#454645</code><span class="inline-code-color" style="background-color: #454645;"></span>（font2）</li><li><code>#FF6347</code><span class="inline-code-color" style="background-color: #FF6347;"></span>（participant）</li><li><code>#00FFFF</code><span class="inline-code-color" style="background-color: #00FFFF;"></span>（database）</li><li><code>#7FFFD4</code><span class="inline-code-color" style="background-color: #7FFFD4;"></span>（note）</li></ul></li><li>デフォルト：<br>もちろん、カラーにこだわりのない方はデフォルトでトラディショナルな白黒黄のコーディネートにすることができます。</li></ul></li></ul><p>（左から右：デフォルト、パレット②、パレット①）<br><img src="/images/20200203/photo_20200203_16.png"></p><h3 id="あえてルール化しなかったもの"><a href="#あえてルール化しなかったもの" class="headerlink" title="あえてルール化しなかったもの"></a>あえてルール化しなかったもの</h3><p>はじめにも記載されている通り、記事のゴールとして「必要最低限のルールだけに絞ってチーム設計の生産性と品質を上げる」があります。上記で記載されたルールはシーケンス図が期待される必要最低限の役割を果たすために含めてたものです。したがって分岐やループ等、処理の柱となるロジックやパフォーマンスを表すものは記載必須としています。一方で、シンプル化のため、下記のものはあえてルールとしていません。</p><ul><li><p><strong>ライフライン</strong><br>ライフラインの活性化と破壊はシンプル化のため、あえて使いません。<br>こちらは<code>activate</code>、<code>deactivate</code>や<code>destroy</code>で表現できるので、必要に応じて。</p><img src="/images/20200203/photo_20200203_17.png" class="img-small-size"></li><li><p><strong>線とアローヘッドの使い分け</strong><br>PlantUMLでは様々なアローヘッドや線の種類を指定することができます。「レスポンスは点線にする」等、世間ではアローヘッドと線の種類に関するいろんな使い分けが存在していますが、このルールではシンプル化のため、意識しません。こちらも必要に応じてやりましょう。</p><img src="/images/20200203/photo_20200203_18.png" class="img-very-small-size"></li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>勝手にルールを決めちゃいましたがルールの中身よりもルールを決めることが大事だと思います。<br>これからPlantUMLを利用してチームで設計を始めたいけどルールを決めるのが面倒くさい方々、この記事をスタートラインにしてみてはいかが。</p><h2 id="参考＆リンク"><a href="#参考＆リンク" class="headerlink" title="参考＆リンク"></a>参考＆リンク</h2><ul><li><a href="https://plantuml.com" target="_blank" rel="noopener">https://plantuml.com</a></li><li><a href="https://qiita.com/laqiiz/items/fb7ad9dfb7430dd08455" target="_blank" rel="noopener">https://qiita.com/laqiiz/items/fb7ad9dfb7430dd08455</a></li><li><a href="https://qiita.com/couzie/items/9dedb834c5aff09ea7b2" target="_blank" rel="noopener">https://qiita.com/couzie/items/9dedb834c5aff09ea7b2</a></li><li><a href="https://eng-entrance.com/java-install-env" target="_blank" rel="noopener">https://eng-entrance.com/java-install-env</a>)</li><li><a href="https://www.planttext.com/" target="_blank" rel="noopener">https://www.planttext.com/</a></li><li><a href="https://future-architect.github.io/articles/20190821/">https://future-architect.github.io/articles/20190821/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;現在所属しているプロジェクトではWebAPIやバッチ処理の設計の一環としてPlantUMLを利用しています。効率よく品質高く
      
    
    </summary>
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="PlantUML" scheme="https://future-architect.github.io/tags/PlantUML/"/>
    
      <category term="UML" scheme="https://future-architect.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>AirflowのTips 11選</title>
    <link href="https://future-architect.github.io/articles/20200131/"/>
    <id>https://future-architect.github.io/articles/20200131/</id>
    <published>2020-01-31T02:28:46.000Z</published>
    <updated>2020-01-31T02:45:27.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Airflow 利用にあたって知っておいたほうが良いんじゃないかなと思う情報をまとめました。いわゆるハマりどころです。  </p><p>Airflow 自体の基本的な説明(用語,DAG 定義方法,etc..) は省略しています。</p><p>基礎参照先</p><ul><li><a href="https://airflow.apache.org/docs/stable/tutorial.html" target="_blank" rel="noopener">公式 Tutorial</a></li><li><a href="https://github.com/puckel/docker-airflow" target="_blank" rel="noopener">Dockerfile</a></li></ul><h1 id="バージョン"><a href="#バージョン" class="headerlink" title="バージョン"></a>バージョン</h1><ul><li>Airflow 1.10.4</li><li>Postgres 10.7</li></ul><h1 id="Tips-11-選"><a href="#Tips-11-選" class="headerlink" title="Tips 11 選"></a>Tips 11 選</h1><ul><li><a href="#1-日時">1. 日時</a></li><li><a href="#2-リトライ">2. リトライ</a></li><li><a href="#3-start_date-の変更ができない">3. start_date の変更ができない</a></li><li><a href="#4-開始日時を過去日時にすると過去ジョブが自動実行される">4. 開始日時を過去日時にすると過去ジョブが自動実行される</a></li><li><a href="#5-context-の活用">5. context の活用</a></li><li><a href="#6-macros">6. Macros</a></li><li><a href="#7-task-間で値を受け渡す方法">7. Task 間で値を受け渡す方法</a></li><li><a href="#8-dags-ディレクトリ以下のディレクトリの切り方">8. dags ディレクトリ以下のディレクトリの切り方</a></li><li><a href="#9-ui-の表示が-utc-固定">9. UI の表示が UTC 固定</a></li><li><a href="#10-web-ui-上からジョブのパラメータを渡せない">10. Web UI 上からジョブのパラメータを渡せない</a></li><li><a href="#11-dagtask-の同時実行数制御">11. DAG/Task の同時実行数制御</a></li></ul><h2 id="1-日時"><a href="#1-日時" class="headerlink" title="1. 日時"></a>1. 日時</h2><p>Airflow は基本的には、日時のみを変数として DAG を実行します。<br>日時にも種類があるため、各日時について整理します。</p><h3 id="execution-date"><a href="#execution-date" class="headerlink" title="execution_date"></a>execution_date</h3><p>実行日時。いつ実行されても、リトライで実行されても変わることのない日時。<br>特定日時のデータを取得したいといったケースの日時指定は、実行日時を利用しておくと良いです。</p><h3 id="start-date"><a href="#start-date" class="headerlink" title="start_date"></a>start_date</h3><p>DAG の開始日時。実際に DAG が動作した日時。<br>リトライ時にはリトライした日時になります。<br>DAG ファイル上では特に利用しないほうが良いです。</p><h3 id="end-date"><a href="#end-date" class="headerlink" title="end_date"></a>end_date</h3><p>DAG の終了日時。実際に DAG が動作した日時。</p><h3 id="schedule-interval"><a href="#schedule-interval" class="headerlink" title="schedule_interval"></a>schedule_interval</h3><p>DAG の実行間隔。</p><p>上記の用語を元に、初回の Dag 実行までを時系列で追いかけてみます。</p><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><ul><li><code>2020/01/29 15:30:00+09:00</code> よりスケジュール実行</li><li>実行間隔は <code>1min</code></li></ul><ol><li><p>DAG ファイルを作成<br> ./dag 配下に配置</p>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dag = DAG(</span><br><span class="line">    <span class="string">'blog_example_execution_date'</span>,</span><br><span class="line">    schedule_interval=timedelta(minutes=<span class="number">1</span>),</span><br><span class="line">    start_date=datetime(</span><br><span class="line">        <span class="number">2020</span>, <span class="number">1</span>, <span class="number">29</span>, <span class="number">15</span>, <span class="number">30</span>, tzinfo=pendulum.timezone(<span class="string">'Asia/Tokyo'</span>)), <span class="comment"># 明示的にタイムゾーンを指定</span></span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line">BashOperator(</span><br><span class="line">    task_id=<span class="string">'test'</span>,</span><br><span class="line">    dag=dag,</span><br><span class="line">    bash_command=<span class="string">'echo 1'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>Web UI 上から <code>OFF</code> -&gt; <code>ON</code> に変更<ul><li><img src="/images/20200131/1.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><ol start="3"><li><p>start_date に指定した時刻には <strong>何も起きない</strong></p></li><li><p>start_date + schecule_interval 経過後に 初回 DAG 実行<br>各パラメータの日時は以下のようになります。(※ 各パラメータの取得方法は <code>5</code> で後述)<br>start_date と execution_date がずれていることがわかります。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execution_date = 2019/01/29 15:30:00 +09:00</span><br><span class="line">  =&gt; DAG に指定した start_date と同一</span><br><span class="line">  </span><br><span class="line">start_date = 2019/01/29 15:31:00 +09:00</span><br><span class="line">  =&gt; DAG に指定した start_date に schedule_interval を足した日時と同一</span><br></pre></td></tr></table></figure></li><li><p>2 回目以降は、schedule_interval 経過後に順次実行</p></li></ol><h2 id="2-リトライ"><a href="#2-リトライ" class="headerlink" title="2. リトライ"></a>2. リトライ</h2><p>基本的には Task の状態を <code>Clear</code> とすることで、リトライができます。</p><h4 id="Tree-View-より指定"><a href="#Tree-View-より指定" class="headerlink" title="Tree View より指定"></a>Tree View より指定</h4><ol><li><code>○</code> を Click<ul><li><img src="/images/20200131/2.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><ol start="2"><li>Clear を指定<ul><li><img src="/images/20200131/3.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><ol start="3"><li>Clear する Task の一覧が表示され OK を 指定する<ul><li><img src="/images/20200131/4.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><ol start="4"><li>Clear (=リトライ) される<ul><li><img src="/images/20200131/5.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><h3 id="Task-Instances-から指定"><a href="#Task-Instances-から指定" class="headerlink" title="Task Instances から指定"></a>Task Instances から指定</h3><p>基本的には、 <code>Tree View</code> の画面より指定してリトライする方法が簡単なのですが、いくつかのケースにて、下記の画面が出てきて失敗するケースがあります。<br>(筆者の環境では Task 指定の Clear の際に失敗します。)</p><img src="/images/20200131/6.png" class="img-middle-size"><p>こちらが発生した際は、他の手段を利用して、Clear することができます。</p><ol><li><code>Browse &gt; Task Instances</code> を指定<ul><li><img src="/images/20200131/7.png" class="img-middle-size"></li></ul></li></ol><ol start="2"><li>対象 Task を検索<ul><li><img src="/images/20200131/8.png" class="img-middle-size"></li></ul></li></ol><ol start="3"><li><p>対象 Task を指定して Clear</p><ul><li><img src="/images/20200131/9.png" class="img-middle-size"></li></ul></li><li><p>Clear 完了</p></li></ol><h2 id="3-start-date-の変更ができない"><a href="#3-start-date-の変更ができない" class="headerlink" title="3. start_date の変更ができない"></a>3. start_date の変更ができない</h2><p>一度でも DAG を実行してしまった場合、start_date を変更できない仕様になっています。<br>DAG ファイル上で変更しても、反映されなくなってしまいます。<br>(※ 筆者の経験談ですが、DAG が実行されていない ( <code>ON</code> にしていない) 場合であれば、 start_date の変更が反映されます。)<br>よくあるケースとしては、毎日03:00実行のDAGを1時間ずらす変更がありますが、簡易にはできません。</p><p>1度でも DAG を実行してしまった場合は、下記の手段にて start_date を変更する必要があります。</p><h3 id="過去履歴が消えても良い場合"><a href="#過去履歴が消えても良い場合" class="headerlink" title="過去履歴が消えても良い場合"></a>過去履歴が消えても良い場合</h3><ol><li>DAG ファイルを一度 ./dag 配下から削除</li><li>Web UI 上から DAG を削除</li><li>ファイルを復元して開始日時を修正</li><li>./dag 配下にファイルを配置</li></ol><h3 id="過去履歴を残したい場合"><a href="#過去履歴を残したい場合" class="headerlink" title="過去履歴を残したい場合"></a>過去履歴を残したい場合</h3><p>DAGファイルをコピーして、別DAG ID として再作成して開始日時を変更する。</p><h2 id="4-開始日時を過去日時にすると過去ジョブが自動実行される"><a href="#4-開始日時を過去日時にすると過去ジョブが自動実行される" class="headerlink" title="4. 開始日時を過去日時にすると過去ジョブが自動実行される"></a>4. 開始日時を過去日時にすると過去ジョブが自動実行される</h2><p>過去日を指定するとデフォルトで、backfillという機能により、過去日から <code>schedule_interval</code> ごとにDAGを実行します。<br>実行したくない場合は、 <code>catchup=False</code> 指定により回避できます。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dag = DAG(</span><br><span class="line">    <span class="string">'blog_example_backfill'</span>,</span><br><span class="line">    schedule_interval=timedelta(days=<span class="number">1</span>),</span><br><span class="line">    start_date=datetime(</span><br><span class="line">        <span class="number">2019</span>, <span class="number">1</span>, <span class="number">1</span>, tzinfo=pendulum.timezone(<span class="string">'Asia/Tokyo'</span>)),</span><br><span class="line">    default_args=args,</span><br><span class="line">    catchup=<span class="literal">False</span>, <span class="comment"># こちらを指定</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="5-context-の活用"><a href="#5-context-の活用" class="headerlink" title="5. context の活用"></a>5. context の活用</h2><p>各 DAG 実行ごとの変数は、context として取得することができます。<br>PythonOperator として呼び出す際は、呼び出す関数に <code>**context</code> と可変長引数を定義することで扱えます。context には辞書型で値が入ります。</p><p>(context として渡ってくる値は、 <code>6</code> 参照)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_context</span><span class="params">(**context)</span>:</span></span><br><span class="line">    <span class="comment"># 最も利用するケースが多い</span></span><br><span class="line">    <span class="comment"># pendulum.Pendulum 型 であることに注意</span></span><br><span class="line">    execution_date = context[<span class="string">'execution_date'</span>]</span><br><span class="line"></span><br><span class="line">    dag_id = context[<span class="string">'dag'</span>].dag_id</span><br><span class="line">    task_id = context[<span class="string">'task'</span>].task_id</span><br><span class="line"></span><br><span class="line">    print(execution_date)</span><br><span class="line">    print(dag_id)</span><br><span class="line">    print(task_id)</span><br><span class="line"></span><br><span class="line">    pprint.pprint(context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PythonOperator(</span><br><span class="line">    task_id=<span class="string">'context'</span>,</span><br><span class="line">    dag=dag,</span><br><span class="line">    python_callable=print_context,</span><br><span class="line">    provide_context=<span class="literal">True</span>, <span class="comment"># context を渡したい場合必須</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="6-Macros"><a href="#6-Macros" class="headerlink" title="6. Macros"></a>6. Macros</h2><p>context の値は、 <figure class="highlight plain"><figcaption><span>&#125;&#125; ``` の構文を利用することでも取得できます。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```py</span><br><span class="line">BashOperator(</span><br><span class="line">    task_id=&apos;test&apos;,</span><br><span class="line">    dag=dag,</span><br><span class="line">    bash_command=&apos;echo &#123;&#123; dag.dag_id &#125;&#125;&apos;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>以下が、context で取得できる値一覧です。 (Macros で取得できる値と同義)<br><a href="https://airflow.apache.org/docs/stable/macros.html" target="_blank" rel="noopener">https://airflow.apache.org/docs/stable/macros.html</a></p><h2 id="7-Task-間で値を受け渡す方法"><a href="#7-Task-間で値を受け渡す方法" class="headerlink" title="7. Task 間で値を受け渡す方法"></a>7. Task 間で値を受け渡す方法</h2><p>処理を Task 粒度で分割して定義することが多いですが、Task間で値を渡したいケースが有るかと思います。その場合は、<a href="https://airflow.apache.org/docs/stable/concepts.html?highlight=xcom#xcoms" target="_blank" rel="noopener">XComs</a> と呼ばれる機能を利用します。<br>利用方法は下記の実装のとおりです。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(**context)</span>:</span></span><br><span class="line">    <span class="comment"># 後続の Task に渡したい値を戻り値として定義</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hoge'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pull</span><span class="params">(**context)</span>:</span></span><br><span class="line">    <span class="comment"># context 内より task_id を key に取得</span></span><br><span class="line">    v = context[<span class="string">'task_instance'</span>].xcom_pull(task_ids=<span class="string">'push_task'</span>)</span><br><span class="line">    print(v)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">push = PythonOperator(</span><br><span class="line">    task_id=<span class="string">'push_task'</span>,</span><br><span class="line">    dag=dag,</span><br><span class="line">    python_callable=push,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pull = PythonOperator(</span><br><span class="line">    task_id=<span class="string">'pull_task'</span>,</span><br><span class="line">    dag=dag,</span><br><span class="line">    python_callable=pull,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">push &gt;&gt; pull</span><br></pre></td></tr></table></figure><h2 id="8-dags-ディレクトリ以下のディレクトリの切り方"><a href="#8-dags-ディレクトリ以下のディレクトリの切り方" class="headerlink" title="8. dags ディレクトリ以下のディレクトリの切り方"></a>8. dags ディレクトリ以下のディレクトリの切り方</h2><p>下記ファイルを dags 直下に配置することで、実現できます。<br>再帰的に参照してくれるため、指定したディレクトリ以下でさらにディレクトリを切っても問題ないです。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> DagBag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加したいディレクトリを指定</span></span><br><span class="line">dags_dirs = [<span class="string">'~/dags/blog'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> dags_dirs:</span><br><span class="line">    dag_bag = DagBag(os.path.expanduser(dir))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dag_bag:</span><br><span class="line">        <span class="keyword">for</span> dag_id, dag <span class="keyword">in</span> dag_bag.dags.items():</span><br><span class="line">            globals()[dag_id] = dag</span><br></pre></td></tr></table></figure><h2 id="9-UI-の表示が-UTC-固定"><a href="#9-UI-の表示が-UTC-固定" class="headerlink" title="9. UI の表示が UTC 固定"></a>9. UI の表示が UTC 固定</h2><p>Web UI は UTC のみ対応との記載がドキュメントにあるので、現状は UTC 時刻をみて脳内変換しています。<br><a href="https://airflow.apache.org/docs/stable/timezone.html#time-zones" target="_blank" rel="noopener"><img src="/images/20200131/10.png" class="img-small-size" style="border:solid 1px #000000"></a><br><a href="https://airflow.apache.org/docs/stable/timezone.html#time-zones" target="_blank" rel="noopener">timezone.html#time-zones</a></p><p>回避策はある模様ですが、試したことはないです。<br><a href="https://qiita.com/hatappi/items/2a4d41ca14746a3c98a6" target="_blank" rel="noopener">Airflow 日本語化</a></p><h2 id="10-Web-UI-上からジョブのパラメータを渡せない"><a href="#10-Web-UI-上からジョブのパラメータを渡せない" class="headerlink" title="10. Web UI 上からジョブのパラメータを渡せない"></a>10. Web UI 上からジョブのパラメータを渡せない</h2><p>Web UI 上の、 <code>Trigger DAG</code> より手動での実行は可能ですが、任意のパラメータを指定して実行することはできません。<br>execution date は Trigger DAG を押下した時刻になります。</p><p>CLI で実行する際は、パラメータを渡すことができます。<br>渡し方は、下記の通りです。<br>(※ <code>追記</code> :筆者のローカルで試したところ DAG が見つからないエラーが出ており、未解消です。)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow trigger_dag <span class="variable">$&#123;dag_id&#125;</span> -c <span class="string">'&#123;"key": "value"&#125;'</span></span><br></pre></td></tr></table></figure><p>パラメータの受け取り方</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># context より取得</span></span><br><span class="line">value = context[<span class="string">'dag_run'</span>][<span class="string">'conf'</span>][<span class="string">'key'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># macros 利用</span></span><br><span class="line"><span class="string">'&#123;&#123; DAG_run.conf["key"] &#125;&#125;'</span></span><br></pre></td></tr></table></figure><p><a href="https://airflow.apache.org/docs/stable/cli.html#trigger_dag" target="_blank" rel="noopener">https://airflow.apache.org/docs/stable/cli.html#trigger_dag</a></p><h2 id="11-DAG-Task-の同時実行数制御"><a href="#11-DAG-Task-の同時実行数制御" class="headerlink" title="11. DAG/Task の同時実行数制御"></a>11. DAG/Task の同時実行数制御</h2><p>DAG オブジェクトに対して、concurrency/max_active_runs フィールドを指定することで制御できます。<br><code>max_active_runs</code> の数値が DAG の最大同時実行数で、 <code>concurrency</code> の数値が Task の最大同時実行数になります。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dag = DAG(</span><br><span class="line">    <span class="string">'blog_example_concurrency'</span>,</span><br><span class="line">    start_date=start_date,</span><br><span class="line">    schedule_interval=timedelta(days=<span class="number">1</span>),</span><br><span class="line">    concurrency=<span class="number">3</span>, <span class="comment"># task は 3つまで同時起動できる</span></span><br><span class="line">    max_active_runs=<span class="number">1</span>, <span class="comment"># DAG は 1つまで同時起動できる</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Airflow 全体/デフォルトの concurrency/max_active_runs は、airflow.cfg に指定してあります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Airflow 全体の task の同時実行数のデフォルト値</span><br><span class="line">parallelism = 32</span><br><span class="line"></span><br><span class="line"># DAG ごとの task の同時実行数のデフォルト値</span><br><span class="line">DAG_concurrency = 16</span><br><span class="line"></span><br><span class="line"># DAG ごとの DAG の同時実行数 のデフォルト値</span><br><span class="line">max_active_runs_per_DAG = 16</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Airflow利用にあたっての Tips をまとめました。<br>ハマりどころはありますが、ジョブをソースコード管理でき、Pythonで自由に定義できる点が非常に魅力的ですので、利用できるシーンで使っていきたいと思います。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/53663534/for-apache-airflow-how-can-i-pass-the-parameters-when-manually-trigger-DAG-via" target="_blank" rel="noopener">For Apache Airflow, How can I pass the parameters when manually trigger DAG via CLI? - Stack Overflow</a></li><li><a href="https://gtoonstra.github.io/etl-with-airflow/gotchas.html" target="_blank" rel="noopener">Gotcha’s — ETL Best Practices with Airflow v1.8</a></li><li><a href="https://medium.com/programming-soda/apache-airflow%E3%81%A7%E3%82%A8%E3%83%B3%E3%83%89%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B-part4-590ad9f9fb80" target="_blank" rel="noopener">Apache Airflow でエンドユーザーのための機械学習パイプラインを構築する Part4 - programming-soda - Medium</a></li><li><a href="https://medium.com/@xnuinside/how-to-load-use-several-dag-folders-airflow-dagbags-b93e4ef4663c" target="_blank" rel="noopener">How to use several dag_folders? Airflow DAGBags. - Iuliia Volkova - Medium</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;Airflow 利用にあたって知っておいたほうが良いんじゃないかなと思う情報をまとめました。いわゆるハマりどころです。  &lt;/p&gt;
&lt;p&gt;A
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Airflow" scheme="https://future-architect.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>リモートワークを促進させるDaily Stand-up Meeting</title>
    <link href="https://future-architect.github.io/articles/20200129/"/>
    <id>https://future-architect.github.io/articles/20200129/</id>
    <published>2020-01-29T01:02:04.000Z</published>
    <updated>2020-01-29T01:33:28.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの村田です。皆さんは普段どのようにプロジェクトのタスク優先順位を管理していますか？大規模なプロジェクトであればbacklogなどの進捗管理システムを導入しつつ優先度のタグ付けをしたり、あるいは小規模なプロジェクトであれば密なコミュニケーションで状況を常に共有し合ったりしているかもしれません。</p><p>私の所属しているプロジェクトは以下のような状況です。</p><ul><li>5名程度の比較的小規模なメンバー構成だった</li><li>自社オフィス、顧客オフィス、自宅など各メンバーが離れた場所で仕事をすることが多い</li></ul><p>大掛かりな進捗管理システムを入れるほどの規模感ではなく、しかし油断するとプロジェクトの状況が不透明になりかねないということで、私のチームではDaily Stand-up Meeting(以後、SUM)を導入しています。<br>※毎度立っているわけではないので、呼称はDaily Scrumのほうが正しいかもしれません</p><img src="/images/20200129/photo_20200129_01.jpg">↑とある日のSUMの様子↑<h1 id="SUMに期待したこと"><a href="#SUMに期待したこと" class="headerlink" title="SUMに期待したこと"></a>SUMに期待したこと</h1><ul><li>各メンバーのいま取り組むべきタスクを明確にすること</li><li>お互いのタスク状況を把握すること</li><li>お互いの困りごとを把握すること</li></ul><h1 id="SUMの開催に向けて"><a href="#SUMの開催に向けて" class="headerlink" title="SUMの開催に向けて"></a>SUMの開催に向けて</h1><h2 id="SUMの形式"><a href="#SUMの形式" class="headerlink" title="SUMの形式"></a>SUMの形式</h2><ul><li>状況共有シートとしてGoogle Spreadsheetを利用<ul><li>セル形式かつみんなで同時編集可能なものを使うのが好ましいと思います</li></ul></li><li>Hangout Meetを利用して相互に接続<ul><li>これはなんでもよいと思います。全社的にGSuiteを利用しているのでHangout Meetを使っています</li></ul></li><li>時間は15分（1人持ち時間3分×人数）<ul><li>ダラダラと話してしまわないよう時間は厳密に区切っています。</li></ul></li></ul><h2 id="状況共有シートの書きっぷり"><a href="#状況共有シートの書きっぷり" class="headerlink" title="状況共有シートの書きっぷり"></a>状況共有シートの書きっぷり</h2><img src="/images/20200129/photo_20200129_02.png" style="border:solid 1px #000000">↑こんな感じで記載しています↑<h3 id="シートのフォーマット"><a href="#シートのフォーマット" class="headerlink" title="シートのフォーマット"></a>シートのフォーマット</h3><p>シートには5つのカラムを準備しています。<br><strong>①日付</strong><br> 「ctl+:」のようなショートカットを書いておくと地味に便利です</p><p><strong>②名前</strong><br>名字だけ、シンプルに</p><p><strong>③昨日やったこと</strong><br>基本は前日の「今日やること」に実績を反映したものになります</p><p><strong>④今日やること</strong><br>メインコンテンツ。やることを箇条書きで列挙します。</p><p><strong>⑤障害となっていること/つぶやき</strong><br>現在ハマっているポイントや他人への連絡事項など。直近の勤怠の予定など周知事項も記載しています。</p><h3 id="シートを書く際は絵文字をフル活用すると良い"><a href="#シートを書く際は絵文字をフル活用すると良い" class="headerlink" title="シートを書く際は絵文字をフル活用すると良い"></a>シートを書く際は絵文字をフル活用すると良い</h3><p>状況共有の際にタスクを種別ごとやプロジェクトごとにカテゴライズすると思いますが、付帯情報を書き始めると縦に長くなってしまいがちです。<br><img src="/images/20200129/photo_20200129_04.png" class="img-small-size" style="border:solid 1px #000000"></p><p>この縦に長い共有内容を5人分記載するといよいよ一覧性に欠けてしまうので、絵文字をフル活用する方針を立てています。<br><img src="/images/20200129/photo_20200129_05.png" class="img-small-size" style="border:solid 1px #000000"></p><p>上記は一例ですが、このように絵文字ごとに意味を持たせて記載するようにしています。<br>絵文字を利用して先程の共有内容を書き換えると…<br><img src="/images/20200129/photo_20200129_06.png" class="img-small-size" style="border:solid 1px #000000"></p><p>このようにスッキリします。もちろん行数を圧縮するだけであれば絵文字を使わず書き方を変えるだけで実現はできます。<br><img src="/images/20200129/photo_20200129_07.png" class="img-small-size" style="border:solid 1px #000000"></p><p>これでも必要な情報は含まれていますが…なんか味気ないと思いませんか？私は思います笑<br>絵文字に意味づけを行うことでハイコンテキスト化してしまうという点はありますが、見てて視覚的にも楽しいので絵文字をガンガン利用しています。</p><p>新しいプロジェクトやタスクが始める時に誰かが新しい絵文字を追加して、「◯◯っぽいのでこの絵文字を使おうと思います」「お！いいねーｗ」「面白い！！」みたいな会話が生まれたりするのでなんだかんだ楽しく運用できているのかなと思います。<br><img src="/images/20200129/photo_20200129_08.png" class="img-small-size"></p><p>シートの上の方に、いま存在する絵文字をずらっと並べておくと、毎日記載する時にも困らないので便利です。</p><h2 id="Slack-ReminderでSUMをリマインド"><a href="#Slack-ReminderでSUMをリマインド" class="headerlink" title="Slack ReminderでSUMをリマインド"></a>Slack ReminderでSUMをリマインド</h2><p>私のチームではSlack Reminderを使って毎日9時にリマインダを飛ばしています。<br><img src="/images/20200129/photo_20200129_09.png" style="border:solid 1px #000000"></p><p>SpreadsheetのURLを都度探すのは面倒なので、Slack reminderでURLを投稿する形にしています。ブックマーク登録しとけばいいという意見もありますが、Slack駆動にしておくと何かと便利なのでこうしています。</p><p>Reactionがつけられるので、「欠席」や「リモート参加」などはReactionで示す運用としています。このためにオリジナルのReactionを<a href="https://emoji-gen.ninja/" target="_blank" rel="noopener">絵文字ジェネレーター</a>で作成しました。</p><p>※ちなみに毎朝持ち回りで実施しているLTやプロジェクトのTipsページのURLなど、何度も周知して浸透させたい情報もリマインダに乗せています</p><p>また、スレッドを掘ることもできるので、電車遅延や別打ち合わせによる遅参などスレッド内でやり取りしています。</p><p>各々がリモートな状態だと、欠席なのかそれとも遅刻なのかなどが分かりづらくなりますが、やり取りをSlackにすべて寄せることでスムーズにSUMを開催することができています。</p><h1 id="SUM中の過ごし方"><a href="#SUM中の過ごし方" class="headerlink" title="SUM中の過ごし方"></a>SUM中の過ごし方</h1><p>SUMの一番大事な目的は「プロジェクトにおけるタスク優先順位の決定」と定めていました。そのためにはそれぞれのメンバーから積極的にプロジェクト状況を発信しあうことが重要です。共有された情報をもとにプロジェクトを俯瞰、いま優先的に取り組むべきタスクを判断・遂行しています。</p><p>その他SUM自体の進め方は世間的なものと特に大差ないですが、以下のようなことに気を付けていました。</p><ul><li>1人持ち時間は3分</li><li>議論が始まるようなネタは一旦ストップ → 検討会議を別途設ける</li><li>状況共有は <strong>先輩社員から降順で行う</strong></li></ul><p>状況共有を降順にするのは意外と大事で、後輩社員が遅延報告などのエスカレーションを素直にあげやすい雰囲気作りに注力していました。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>私のチームではSUMを開催することで、互いの状況を把握することができ、円滑にプロジェクトを推進できています。</p><p>また副次的に以下のようなメリットも享受できています。</p><ul><li>朝のペースメーカーになる</li><li>リモートでもぼっちにならず朝の挨拶ができるので、元気に一日を始められる</li><li>互いの声を聞けるので、文面に表れない不調などを察知できる（めっちゃテンション低い、鼻水ズルズル、など）</li></ul><p>長々とコツなどを書いてきましたが、実はこれが一番大きな開催意義なのかもしれません。<br>互いにリモートだと、オフィスにいるときのなにげない会話（雑談を多分に含む）などが無くなってしまいます。</p><p>仲間意識を持ち健やかな精神衛生を保つためにも、Daily Stand-up Meetingは継続していきたいと思います！</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190917/">サステナブルなエンジニア組織デザイン～よくある設計とジレンマ～</a></li><li><a href="/articles/20190918/">サステナブルなエンジニア組織デザイン～デザインパターンと10のリファクタリング～</a></li><li><a href="/articles/20190703/">マネージャーがうれしいRedmineデータのグラフ表示方法を公開します！</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの村田です。皆さんは普段どのようにプロジェクトのタスク優先順位を管理していますか？大規模なプロジェクトであ
      
    
    </summary>
    
      <category term="マネジメント" scheme="https://future-architect.github.io/categories/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/"/>
    
    
      <category term="会議" scheme="https://future-architect.github.io/tags/%E4%BC%9A%E8%AD%B0/"/>
    
  </entry>
  
  <entry>
    <title>Auth0のRulesを使って認証認可を自在にカスタマイズする</title>
    <link href="https://future-architect.github.io/articles/20200128/"/>
    <id>https://future-architect.github.io/articles/20200128/</id>
    <published>2020-01-28T00:24:18.000Z</published>
    <updated>2020-01-28T00:31:21.592Z</updated>
    
    <content type="html"><![CDATA[<p>Auth0をカスタマイズして使うに当たって必要になるRulesについて、概要と開発に関するTipsを説明します。<br>Auth0のRulesの使い方については、Auth0公式の<a href="https://auth0.com/docs/best-practices/rules" target="_blank" rel="noopener">Rules Best Practices</a>に様々な役立ち情報が載っているのですが、分量が多くてしんどい(全て英語な上に印刷するとA4で18ページ分…)です。<br>この記事ではRules Best Practicesの中でも特に役に立つと思われる情報と、その他Rules開発で得られた知見について書いていきます。</p><p>Auth0に関する概要については<a href="https://future-architect.github.io/articles/20200122/">弊社 山田の記事</a>を、Auth0の二要素認証に興味のある方は<a href="https://future-architect.github.io/articles/20200123/">弊社 先山の記事</a>を御覧ください。</p><h1 id="Rulesとは"><a href="#Rulesとは" class="headerlink" title="Rulesとは"></a>Rulesとは</h1><p>Auth0のRulesとは、</p><ul><li>アクセストークンやIDトークンの取得後に実行される</li><li>任意のJavascriptで書かれたコードを実行して</li><li>認証認可の結果を編集したり、追加の処理を行う事のできる機能</li></ul><p>となっています。<br><a href="https://auth0.com/docs/best-practices/rules" target="_blank" rel="noopener">https://auth0.com/docs/best-practices/rules</a><br><img src="/images/20200128/photo_20200128_01.png" style="border:solid 1px #000000"></p><p>Auth0にはOIDCを使った認証認可フローに必要な機能が備わっているのですが、Rulesの機能を使うことによりプロダクト固有の様々な要求に答えることが出来ます。</p><h1 id="Rulesの作り方"><a href="#Rulesの作り方" class="headerlink" title="Rulesの作り方"></a>Rulesの作り方</h1><p>Auth0には代表的なRulesの活用方法のサンプルを多数用意していて、それらをそのまま使うことでもある程度の認証認可のカスタマイズが可能となっています。<br>ここではサンプルを用いたRulesの作成手順を説明します。</p><p>まず左のメニューからRulesを選択し、右上のCREATE RULEをクリックします。<br><img src="/images/20200128/photo_20200128_02.png" style="border:solid 1px #000000"></p><p>空のルールか、用意されたテンプレートを選択します。<br>今回は、「IP Address whitelist」というテンプレートを使用してルールを作成します。</p><img src="/images/20200128/photo_20200128_03.png" style="border:solid 1px #000000"><p>ソースコードが表示されるので、許可したいIPのリストを編集してSAVE CHANGESを押すとルールの追加は完了です。</p><img src="/images/20200128/photo_20200128_04.png" style="border:solid 1px #000000"><p>ルールを追加が反映されると、特定のIPアドレスから以外のアクセスはログイン出来ないような制御が追加されます。<br>このような形でRulesを追加していくことにより、細かなアクセス制御やトークンに与えられる情報の変更等様々なカスタマイズを施すことが出来ます。</p><h1 id="Rulesの書き方"><a href="#Rulesの書き方" class="headerlink" title="Rulesの書き方"></a>Rulesの書き方</h1><p>テンプレート以外のRulesが必要になる事も多々あると思うので、基本的なRulesの書き方について説明します。<br>以下が空のルールのコードです。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> implement your rule</span></span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ルールは、</p><ul><li>ユーザ情報、context, コールバック関数を受け取り、</li><li>受け取ったコールバックを呼び出す</li></ul><p>必要があります。<br>ルールが受け取る情報は、</p><ul><li>user: ログインしたユーザに関する情報が入ったオブジェクト</li><li>context: 現在のログイン処理に関する情報が入ったオブジェクト</li></ul><p>の２つになります。内容の正体は<a href="https://auth0.com/docs/rules/references/context-object" target="_blank" rel="noopener">Auth0の公式ドキュメント</a>を確認してください。</p><p>callbackへ渡す引数は、1つ目はエラーとなっています。nullは正常に処理が完了したことを表し、この後続のRulesが引き続き実行されます。<br>2つ目、3つ目は次のRuleに渡すuserやcontextを表しています。これらを編集すると後続の処理に特定の値を渡したり、実際にログインされるユーザをRule側で変更したりすることが出来ます。</p><p>認証にエラーが発生した場合、以下のような形でエラーを返す事が推奨されています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> callback(<span class="keyword">new</span> UnauthorizedError(<span class="string">"IP is out of range"</span>))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Unexpected error"</span>))</span><br></pre></td></tr></table></figure><p>UnauthorizedErrorの引数が拒否された理由を表します。<br>callbackでnull以外何を返しても認証エラーとみなされますが、Unauthorizedオブジェクトは原因が分かっている認証エラー、Errorオブジェクトは内部エラーを表現するのに使用するのが正しいようです。<a href="https://auth0.com/docs/best-practices/rules#callback-function" target="_blank" rel="noopener">Auth0公式ドキュメントより</a></p><h1 id="独自Rulesの開発Tips"><a href="#独自Rulesの開発Tips" class="headerlink" title="独自Rulesの開発Tips"></a>独自Rulesの開発Tips</h1><p>以上がRulesの概要なのですが、実際に開発する上で知っておくと良いTipsや、最初の開発の際にハマりやすいポイントが多数あるのでいくつかをピックアップしてここに記します。</p><h2 id="ログの見方について"><a href="#ログの見方について" class="headerlink" title="ログの見方について"></a>ログの見方について</h2><p>Rules内でconsole.logを使用しても、Auth0のログインページやログイン時のレスポンスで出力結果を見ることは出来ません。<br>しかし、拡張機能のReal-time Webtask Logsを使うことによってログを見ることが出来るようになります。<br><img src="/images/20200128/photo_20200128_05.png" style="border:solid 1px #000000"></p><p>拡張機能をインストールして使用すると、ブラウザ経由から以下のような形でログインの試行のログやconsole.logで出力した内容を確認することが出来ます。<br><img src="/images/20200128/photo_20200128_06.png"></p><p>Real-time Webtask Logsはデバッグには非常に強力なツールなのですが、本番で運用する際には個人情報が含まれるuserオブジェクトやcontextオブジェクトはコンソールには出さないよう注意が必要です。</p><h2 id="環境変数の使い方について"><a href="#環境変数の使い方について" class="headerlink" title="環境変数の使い方について"></a>環境変数の使い方について</h2><p>Rulesを開発していると、ソースコード上ではなく環境変数で管理したい値がだいたい出てきます。<br>例としては、</p><ul><li>環境によって異なる外部APIの接続先情報</li><li>APIキー等公開したくない情報</li></ul><p>が挙げられます。<br>Auth0では全てのRulesで共通の環境変数を定義することが出来ます。<br>環境変数を定義するためにはRulesを開き、以下の赤い四角の部分を使用して登録します。<br><img src="/images/20200128/photo_20200128_07.png" style="border:solid 1px #000000"></p><p>環境変数を使用する際には、以下のようにconfigurationオブジェクトを使用してアクセスします。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> SOME_VALUE = configuration.SOME_KEY;</span><br><span class="line">  <span class="comment">// do something with value</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用できるライブラリについて"><a href="#使用できるライブラリについて" class="headerlink" title="使用できるライブラリについて"></a>使用できるライブラリについて</h2><p>RulesではAWSのLambda等と異なりライブラリのコードも含めてアップロードすることは出来ないので、インストールされているライブラリに実装が依存します。<br>そうなると、使用できるライブラリ一覧が欲しくなってきます。<br>以下のページで使用できるモジュールの一覧を確認することが出来ます。<br><a href="https://auth0-extensions.github.io/canirequire/" target="_blank" rel="noopener">https://auth0-extensions.github.io/canirequire/</a><br>基本的なモジュールは全て含まれているので、困ることは少ないと思います。<br>もしどうしても必要なライブラリが含まれていない場合はリクエストすることも出来るみたいです。</p><h2 id="Rulesの中でAuth0自身のAPIを使用する方法について"><a href="#Rulesの中でAuth0自身のAPIを使用する方法について" class="headerlink" title="Rulesの中でAuth0自身のAPIを使用する方法について"></a>Rulesの中でAuth0自身のAPIを使用する方法について</h2><p>Auth0のRules内では、一部のAuth0APIが簡単に使用できるような機能が提供されています。<br>以下Auth0のルール内でユーザのメタデータを更新するためのコードです。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth0.users.updateAppMetadata(user.user_id, user.app_metadata);</span><br></pre></td></tr></table></figure><p>auth0というオブジェクトにアクセスすることで、現在のauth0環境関連の情報(ドメイン等)や一部のAPI呼び出しを行うことが出来ます。<br>しかし、このauth0オブジェクトに付与されている権限は一部の権限しかないため(read:usersとupdate:usersのみ)その他の操作を行おうとすると拒否されてしまいエラーとなります。<br>全てのauth0の操作をRules上で行うためには、Rules上でAuth0からアクセストークンを取得するコードを書く必要があります。</p><p>例として以下に、ログインしてきたユーザを全て削除してしまうRuleを示します。（危険なルールなので、もちろんですが本番環境等では絶対に動かさないでください！）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ManagementClient = <span class="built_in">require</span>(<span class="string">'auth0@2.9.1'</span>).ManagementClient;</span><br><span class="line">    <span class="comment">// Auth0のユーザ削除権限を持つクライアントを生成する</span></span><br><span class="line">    <span class="keyword">var</span> managementAuth0 = <span class="keyword">new</span> ManagementClient(&#123;</span><br><span class="line">        domain: auth0.domain,</span><br><span class="line">        clientId: configuration.application_client_id,</span><br><span class="line">        clientSecret: configuration.application_client_secret,</span><br><span class="line">        scope: <span class="string">'delete:users'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ユーザ削除を行う</span></span><br><span class="line">    managementAuth0.users.delete(&#123; <span class="attr">id</span>: user.user_id &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">`failed to delete user <span class="subst">$&#123;user.user_id&#125;</span>`</span>);</span><br><span class="line">            <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">        callback(err, user, context);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このソースを実行する前準備として、Rulesでの実行用にMachine to Machine用のアプリケーションを一つ登録しておき環境変数にclient_idとclient_secretを登録します。<br>これを行うことにより、任意のAuth0APIを呼び出すことが出来るようになります。<br>もちろん必要ない場合は、デフォルトで与えられているauth0のクライアントを使用するべきなのでご注意ください。</p><h2 id="サインアップ時のみRulesを実行する方法について"><a href="#サインアップ時のみRulesを実行する方法について" class="headerlink" title="サインアップ時のみRulesを実行する方法について"></a>サインアップ時のみRulesを実行する方法について</h2><p>Rulesが実行されるタイミングはトークンを発行した後になります。<br>ログイン時とサインアップ時は両方トークンが発行されるのですが、Rulesに渡される情報のみからはそのリクエストがログインかサインアップかわかりません。<br>そのため、サインアップ時のみ実行したい処理がある場合は少し工夫する必要があります。<br>調べたところ、ユーザ固有のメタデータを保存する領域であるapp_metadataを使用して実現する方法がメジャーのようです。(<a href="https://dev.classmethod.jp/server-side/auth0/hook_signup_logic_using_auth0_rules/" target="_blank" rel="noopener">例1</a>, <a href="https://community.auth0.com/t/running-rule-only-once-at-sign-up/19401" target="_blank" rel="noopener">例2</a>)</p><p>以下がサインアップ時のみ特定の処理を実行するソースコードです。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 既にサインアップ処理が完了している場合は何もしない</span></span><br><span class="line">  <span class="keyword">if</span> (user.app_metadata.signedup) <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// do something related to signup</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ユーザのAppMetadataを更新し、サインアップフラグをtrueにする</span></span><br><span class="line">  user.app_metadata.signedup = <span class="literal">true</span>;</span><br><span class="line">  auth0.users.updateAppMetadata(user.user_id, user.app_metadata);    </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>サインアップ時の更新処理が正常に完了した後に、ログインユーザのメタデータでサインアップ処理が完了したことを示すフラグをONにすることで２回目以降は実行されないように制御しています。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>Rulesは任意のコードが実行可能な非常に強力な機能ですが、処理を追加しすぎるとログイン処理が遅くなってしまうリスクがあります。<br>ですので、認証認可のフローで必ずやらなければならない最小限の内容を行うに留めるのが良いでしょう。<br>ここでは語れませんでしたが、より多くの実行タイミングが選べるHooksという機能がBetaで公開されています。<br>将来的にはHooksを活用したほうがより柔軟で綺麗な処理を書くことが出来るようになりそうです。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20200122/">Auth0 導入編</a></li><li><a href="/articles/202001223/">Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Auth0をカスタマイズして使うに当たって必要になるRulesについて、概要と開発に関するTipsを説明します。&lt;br&gt;Auth0のRulesの使い方については、Auth0公式の&lt;a href=&quot;https://auth0.com/docs/best-practices/r
      
    
    </summary>
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
  </entry>
  
  <entry>
    <title>Umeda.go 2020 Winterに3名で登壇しました</title>
    <link href="https://future-architect.github.io/articles/20200127/"/>
    <id>https://future-architect.github.io/articles/20200127/</id>
    <published>2020-01-27T00:39:35.000Z</published>
    <updated>2020-01-27T00:50:05.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の渋川、辻、真野です。先日開催された <a href="https://umedago.connpass.com/event/159972/" target="_blank" rel="noopener">Umeda.go 2020 Winter</a> に当社から3名が登壇しました。</p><p>登壇特典で特製ステッカーを1枚ずつもらえました。みんな嬉しすぎてスマホに貼っています。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/umedago?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#umedago</a> 新しいロゴのステッカーができました！<br>今回のイベントから登壇者様に配っていきます。<br>運営自身が言うのもなんですが<br>なかなかいい出来だと思います！ <a href="https://t.co/yQszITKtgM" target="_blank" rel="noopener">pic.twitter.com/yQszITKtgM</a></p>&mdash; umeda.go (@umedago) <a href="https://twitter.com/umedago/status/1220903482346991617?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">January 25, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>当日はホワイトボードにGopherくんがライブ的に描かれ、神絵師っているんだって思いました。てっきりデザイナーさんかと思いましたが、職種としてはまさかのプログラマーということを後で知りました。げに恐ろしき才能..!! と戦慄しました。</p><p>そして「あんまり持ち上げすぎると、本人が次から緊張しちゃうかもだから期待値を上げすぎないようにね笑」って運営の方がさらっと言って、むちゃくちゃ良い雰囲気だなって思いました。</p><img src="/images/20200127/photo_20200127_01.jpeg"><p>震えるほど可愛い。</p><h1 id="Goならわかるラッパーコマンド作成で学ぶシステムプログラミング"><a href="#Goならわかるラッパーコマンド作成で学ぶシステムプログラミング" class="headerlink" title="Goならわかるラッパーコマンド作成で学ぶシステムプログラミング"></a>Goならわかるラッパーコマンド作成で学ぶシステムプログラミング</h1><p>澁川です。今回は、基調公演枠をいただきましたので、久々に長めの発表をさせていただきました。書籍でもプロセスの起動のセクションはありましたが、Goのスキルを学ぶ題材として優れていると思いますので、書籍の内容をアップデートするには、という感じで構成しました。</p><p>僕も元栃木県民として、地方の勉強会と東京の勉強会の違いは少し感じていました。おそらく普段からGoを書いている人だけがズバッと集まることはなくて、各種勉強会でメンバーはかなりオーバーラップしていて、さまざまなバックグラウンドの人がふわっと集まることが多い印象でした。そのため、使っている人向けの細かいネタよりは、これから導入するには、という人にも配慮して間口を普段よりも広く、ということを意識しました。また、Goの実装のテクニックだけではなく「Goらしさ」を言葉にして、普段Goを使っていない人にも、なにか持ち帰ってもらえればという内容にしました。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSl7mn5XBPTKFEiMZo8X02Q0kOt0IGhw_zEYCSZIuUpYioez3TxGWwAcrwZU4FZLm0OtwEZFfNN4G0N/embed?start=false&loop=false&delayms=3000" frameborder="0" width="900" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>※<strong>権限が必要です</strong> と出る方は、会社のGSuite設定の可能性があります。私用のモバイルなどで確認ください</p><p>実際、仕事で書かれている人以外にも、趣味で書いているという人も多いし、普段使いの言語が違う人が多くて、質疑応答の内容も東京都はだいぶ違って楽しかったです。</p><h1 id="LT-ワークフローエンジンをGoで作る"><a href="#LT-ワークフローエンジンをGoで作る" class="headerlink" title="LT: ワークフローエンジンをGoで作る"></a>LT: ワークフローエンジンをGoで作る</h1><p>辻です。シンプルで扱いやすいワークフローエンジンを Go で作りたい、と思って年末年始の休みに実装したネタで LT させていただきました。</p><script async class="speakerdeck-embed" data-id="725c739447ab4f8d9372018ccfd52160" width="900" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>ワークフローエンジンは複数処理を並列に扱うことが多いです。 Go だと Goroutine のスレッドプールを作って、Goroutine が独立して並列に処理するような実装が書きやすく、Go の良さをあらためて体感できました。</p><p>ワークフローエンジンは OSS としてたくさんのプロダクトが公開されていますが、汎用的かつ柔軟に構成できる一方で設定が複雑になりがちです。ロジックも Go で実装できて、実行順序もマスタで管理できるように実装しました。<br>趣味として始めた PoC の実装ですが、業務で使えるようなプロダクトに仕上げていきたいなと思っています。</p><h1 id="LT-Goで工場を制御する要であるPLCにアクセスする"><a href="#LT-Goで工場を制御する要であるPLCにアクセスする" class="headerlink" title="LT: Goで工場を制御する要であるPLCにアクセスする"></a>LT: Goで工場を制御する要であるPLCにアクセスする</h1><p>真野です。業務活用しているコードをOSSとして公開したので、そのネタでLTをさせていただきました。</p><script async class="speakerdeck-embed" data-id="31901c3f2d144c189faee547f8cbe541" width="900" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>このPLCとの付き合いはここ2,3年くらいあり、色々ナレッジが溜まっているところです。当初は各種用語に慣れず、というかマニュアルがたくさんありどれを読むべきかも分からず四苦八苦しましたが、考え方にも慣れやりたいことがスムーズに実現できるようになりました。</p><p>今後は例えば100msとか10msとかPLC側に負荷をなるべくかけない想定で、もっと高頻度にレジスタ値をミラーリングする手法を研究したり、対応するMCプロトコルのコマンドを増やしたいと思います。</p><p>一方でMCプロトコル以外にもModbus, OPC-UAなどのプロトコルも有名です。こちらもあまり世に出ていない情報なので、どうにか実装したいと思います。（対応している機種を調達する必要があるのでまずはそこからですが）</p><h1 id="Umeda-go楽しかった話"><a href="#Umeda-go楽しかった話" class="headerlink" title="Umeda.go楽しかった話"></a>Umeda.go楽しかった話</h1><p>Umeda.go、良いですね。登壇内用が初級者～中級～上級まで様々あり、やっている内容も特徴的で面白かったです。Gopher歴1日目の方にもみんな優しく接していたので本当に良いコミュニティでした。</p><p>今回の発表内容はIoTとか組み込み領域の話が多く、さすが関西！製造業強いから？って思いましたが、タマタマだったそうです。Webフロントエンド、Webバックエンド、CLIツール、組み込み、など多くの内容に触れられるのはGoならではで良いですね。</p><p>また、懇親会という名前で全員で議論のセッションがありましたが、これはとても良かったです。どうしても大人数の勉強会だと、参加して話を聞いておしまい、ということも多いのですが、全員がスピーカーというか、普段思っていることを出し合い、意見を交換するという「ミートアップしているぞ」という体感が得られました。これは東京で今後開催するイベントにも取り入れたい内容でした。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20191211/">golang.tokyoで発表してきました</a></li><li><a href="https://future-architect.github.io/articles/20191120/">Go Conference 2019 Autumn に登壇しました</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。 ↩</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnot
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する</title>
    <link href="https://future-architect.github.io/articles/20200123/"/>
    <id>https://future-architect.github.io/articles/20200123/</id>
    <published>2020-01-23T02:02:12.000Z</published>
    <updated>2020-01-28T00:28:50.641Z</updated>
    
    <content type="html"><![CDATA[<p>Auth0のパスワードレス認証を説明します。該当の機能を使うことで、ユーザがパスワードの入力をスキップして認証を行うことができます。イメージとしてはSlackのMagic Linkのような振る舞いです。</p><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>Auth0が提供するVue.jsのサンプル実装をベースに説明します。手元で動作確認をする場合は、下記を事前にcloneしてください。このリポジトリにある<code>01-Login</code>のディレクトリにあるアプリケーションを使います。</p><p><a href="https://github.com/auth0-samples/auth0-vue-samples" target="_blank" rel="noopener">https://github.com/auth0-samples/auth0-vue-samples</a></p><p>事前準備に関しては、以前の<a href="https://future-architect.github.io/articles/20200122/">弊社 山田の記事</a>で詳しく解説しておりますので、省略して記載を行います。</p><h2 id="Applicationの作成"><a href="#Applicationの作成" class="headerlink" title="Applicationの作成"></a>Applicationの作成</h2><p><code>CREATE APPLICATION</code>をクリックし、<code>Single Page Web Applications</code>を選択して作成をします。今回は検証用にApplication NameをPasswordlessSPAにしました。ここはどんな名前でもOKですし、日本語でも構いません。</p><p>また、書きのパラメータは全て<code>http://localhost:3000</code>を設定してください。</p><ul><li>Allowed Callback URLs</li><li>Allowed Web Origins</li><li>Allowed Logout URLs</li></ul><p>特に忘れがちなのが<code>Allowed Web Origins</code>で、これが空白だとサンプルアプリケーションが<a href="https://auth0.com/docs/api-auth/tutorials/silent-authentication" target="_blank" rel="noopener">Silent Authentication</a>に失敗します。これに関しては補足として後述をします。</p><img src="/images/20200123/photo_20200123_01.png" style="border:solid 1px #000000"><h2 id="サンプルアプリケーションにパラメータを設定"><a href="#サンプルアプリケーションにパラメータを設定" class="headerlink" title="サンプルアプリケーションにパラメータを設定"></a>サンプルアプリケーションにパラメータを設定</h2><p><code>auth_config.json.example</code>をコピーして、同フォルダに<code>auth_config.json</code>を作成します。<code>domain</code>と<code>clientId</code>は上記で作成したアプリケーションの値を設定してください。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"domain"</span>: <span class="string">"my-tenant-name.au.auth0.com"</span>,</span><br><span class="line">  <span class="attr">"clientId"</span>: <span class="string">"abcdefg"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ローカルでサンプルアプリケーションを起動し、ブラウザで<code>localhost:3000</code>へアクセスします。右上に表示されるLoginをクリックし、Auth0のログイン画面が出ればOKです。</p><img src="/images/20200123/s1.png" class="img-small-size"><h1 id="パスワードレス認証の設定-Email編"><a href="#パスワードレス認証の設定-Email編" class="headerlink" title="パスワードレス認証の設定 - Email編"></a>パスワードレス認証の設定 - Email編</h1><p>ここからが本題です。パスワードレス認証の設定を行います。<br>Auth0のダッシュボードを開き、Connections→Passwordlessを選択します。</p><p>SMSとEmailの両方が提供されています。後ほどSMSも解説しますので、まずはEmailの方をアクティブにしてみてください。</p><img src="/images/20200123/photo_20200123_02.png" style="border:solid 1px #000000"><p>ポップアップが開くので<code>SAVE</code>をクリックします。</p><img src="/images/20200123/photo_20200123_03.png"><p>EmailのPasswordless認証が有効になったので、PasswordlessSPAのアプリケーション設定からConnectionsタブを選択し、有効化を実施します。</p><img src="/images/20200123/photo_20200123_04.png" style="border:solid 1px #000000"><p>Universal Loginを変更します。</p><ul><li>Universal Login → Loginタブ</li><li>Customize Login PageをONにする</li><li>プルダウンからLock(passwordless)を選択する</li></ul><img src="/images/20200123/s2.png" style="border:solid 1px #000000"><p>今回はリンクをクリックすれば認証可能にしたいため、テンプレートを修正します。といっても1行だけ追加でOKです。<code>Auth0LockPasswordless</code>を初期化している処理の引数に1行を追加します。これで準備OKです。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      assetsUrl:  config.assetsUrl,</span><br><span class="line">      allowedConnections: connection ? [connection] : null,</span><br><span class="line"><span class="addition">+     passwordlessMethod: 'link',</span></span><br><span class="line">      rememberLastLogin: !prompt,</span><br></pre></td></tr></table></figure><h1 id="Passwordless認証を動かしてみる"><a href="#Passwordless認証を動かしてみる" class="headerlink" title="Passwordless認証を動かしてみる"></a>Passwordless認証を動かしてみる</h1><p><code>localhost:3000</code>にアクセスしてログインをクリックしてみます。Auth0がホスティングしているログイン画面へ遷移します。</p><img src="/images/20200123/s3.png" class="img-small-size" style="border:solid 1px #000000"><p>リンク付きEmailが送信されるか確認してみます。メールアドレスを入力してSUBMITをクリックします。</p><img src="/images/20200123/s4.png" class="img-small-size"><p>メールが届いていました。リンクをクリックします。デフォルト設定の場合、URLの有効期限が180秒を経過すると切れるので注意です。</p><img src="/images/20200123/s5.png" class="img-small-size"><p>サンプルアプリケーションで初回ログインの場合は、同意画面(Consent Dialog)が表示されます。localhostで起動するアプリケーションの場合は、初回ログイン時に必ず表示がされます。これはAuth0の仕様です。Acceptをクリックして進めます。</p><img src="/images/20200123/s6.png" class="img-small-size"><p><code>localhost:3000</code>へリダイレクトされ、ログイン済みであることが確認できます。私のアカウントがgravatorを設定していないのでわかりにくいですが、ログインしてEmailを取得できています。</p><img src="/images/20200123/photo_20200123_05.png" class="img-middle-size" style="border:solid 1px #000000"><h1 id="パスワードレス認証の設定-SMS編"><a href="#パスワードレス認証の設定-SMS編" class="headerlink" title="パスワードレス認証の設定 - SMS編"></a>パスワードレス認証の設定 - SMS編</h1><p>SMSのパスワードレス認証を動かしてみます。SMSの場合はリンクのログインが使えないため、残念がらMagic Linkの振る舞いは実現できません。代わりに検証コードをSMSでスマホへ送信するタイプの認証を設定します。</p><p>SMSはTwilioを使う必要があるため、事前にTwilioへ登録を済ませておき、以下パラメータを取得しておきます。</p><ul><li>Account SID</li><li>Auth Token</li><li>電話番号<ul><li>Twilioは無料プランで使うため、Trial Numberを使います</li></ul></li></ul><img src="/images/20200123/photo_20200123_06.png" style="border:solid 1px #000000"><p>Auth0 Dashboardへ戻ります。Emailと同様にConnections→Passwordlessを選択して、SMSをONにします。</p><img src="/images/20200123/photo_20200123_07.png" style="border:solid 1px #000000"><p>Twilioのパラメータを入力する項目があるので設定します。入力後にSAVEをクリックします。</p><img src="/images/20200123/photo_20200123_08.png" class="img-middle-size" style="border:solid 1px #000000"><p>PasswordlessSPAの設定画面へ戻り、ConnectionsからPasswordless SMSをONにします。</p><img src="/images/20200123/photo_20200123_09.png" class="img-middle-size" style="border:solid 1px #000000"><p>Universal Loginのテンプレートを修正します。allowedConnectionsとpasswordlessMethodのパラメータを修正します。これでSMS認証ができるようになりました。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      assetsUrl:  config.assetsUrl,</span><br><span class="line"><span class="deletion">-     allowedConnections: connection ? [connection] : null,</span></span><br><span class="line"><span class="deletion">-     passwordlessMethod: 'link',</span></span><br><span class="line"><span class="addition">+     allowedConnections: ['sms'],</span></span><br><span class="line"><span class="addition">+     passwordlessMethod: 'code',</span></span><br><span class="line">      rememberLastLogin: !prompt,</span><br></pre></td></tr></table></figure><p>localhost:3000にアクセスしてログインをクリックします。ログイン状態の場合は一度ログアウトしてから、同じ操作をしてください。</p><p>無事に電話番号入力の画面が表示されていれば成功です。試しに携帯電話番号を入力してSUBMITを実行してください。</p><img src="/images/20200123/photo_20200123_10.png" class="img-small-size"><p>検証コード入力画面が表示されました。検証コードはSMSでスマホへ届きます。試しに自身のスマホに送信をしましたが、上手く届きました。</p><img src="/images/20200123/photo_20200123_11.png" class="img-small-size"><img src="/images/20200123/photo_20200123_12.jpg" class="img-small-size"><p>この6桁の検証コードを入力するとログインができます。初回ログインとなるため、電話番号でユーザアカウントが作成されます。</p><img src="/images/20200123/photo_20200123_13.png" style="border:solid 1px #000000"><h1 id="補足-Silent-Authentication"><a href="#補足-Silent-Authentication" class="headerlink" title="補足 - Silent Authentication"></a>補足 - Silent Authentication</h1><p>ログインした後、同じブラウザで再び<code>localhost:3000</code>へアクセスをすると、自動的にログイン状態になるのがわかると思います。これはサンプルプロジェクトがVueの実行時に、Silent Authenticationというアクセスを行って実現しています。</p><p>Auth0がホスティングする認証画面はセッション機能があります。同じブラウザで同一テナント認証画面へアクセスする場合、セッションが残っていれば認証をスキップします。（セッションの有効期間は変更することも可能）</p><p>サンプルアプリケーションは実行と同時に、Auth0側のセッションが残っているか確認を実施します。テナントへのアクセスはSilent Authenticationという方法を利用して実施します。</p><p>興味のある方はドキュメントへのリンクを書いておきますので、読んでみてください。丁寧に書かれていてわかりやすいです。</p><ul><li><a href="https://auth0.com/docs/sessions/concepts/session-lifetime" target="_blank" rel="noopener">Session Lifetime</a></li><li><a href="https://auth0.com/docs/api-auth/tutorials/silent-authentication" target="_blank" rel="noopener">Set Up Silent Authentication</a></li></ul><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>Auth0のパスワードレス認証を実際に試してみました。Auth0を使えば容易にMagic Linkのような振る舞いを実装することが可能です。Linkでなくても、エンドユーザのスマホにSMSないしEmailで検証コードを送信して、それでアプリケーションに認証することも可能です。</p><p>例えばエンタープライズの分野では、人がよく入れ替わる領域の認証をシンプルにしたいという要望があります。Auth0の提供するパスワードレス認証は、そういったクライアントのユースケースへとても合う機能だと思います。</p><p>関連記事：</p><ul><li><a href="/articles/20200122/">Auth0 導入編</a></li><li><a href="/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Auth0のパスワードレス認証を説明します。該当の機能を使うことで、ユーザがパスワードの入力をスキップして認証を行うことができます。イメージとしてはSlackのMagic Linkのような振る舞いです。&lt;/p&gt;
&lt;h1 id=&quot;事前準備&quot;&gt;&lt;a href=&quot;#事前準備&quot; c
      
    
    </summary>
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Auth0 導入編</title>
    <link href="https://future-architect.github.io/articles/20200122/"/>
    <id>https://future-architect.github.io/articles/20200122/</id>
    <published>2020-01-22T01:31:27.000Z</published>
    <updated>2020-01-28T00:28:40.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="始めに"><a href="#始めに" class="headerlink" title="始めに"></a>始めに</h1><p>様々なシステムを構築する中で必ず発生する要素<br><strong>ログイン</strong></p><p>そのログインを支える技術要素<br><strong>認証・認可</strong></p><p>しかし、認証認可の壁は無駄に高く、調べ始めるとまずは数々の専門用語に阻まれ<br><strong>BASIC認証・OAtuh・OpenID・Jwt・Jwk・Jwe…</strong></p><p>次に、認証Flowに阻まれます。<br><strong>Implicit Flow、Client Credentials Flow…etc</strong></p><p>これらを比較的容易に実装する、Auth0を紹介していきます。</p><h1 id="なぜ今回の連載がAuth0なのか？"><a href="#なぜ今回の連載がAuth0なのか？" class="headerlink" title="なぜ今回の連載がAuth0なのか？"></a>なぜ今回の連載がAuth0なのか？</h1><p>社内で以下の要件を持つ案件が複数あり、結果としてそれぞれでAuth0を採用・知見が溜まったため、連載という形をとることにしました。</p><ul><li>OIDC(OpenIdConnect)準拠の要件</li><li>Google/Facebookなどのソーシャル連携の要件</li><li>開発の期間が短い</li><li>メンテナンス費用は抑えたい</li></ul><h1 id="認証認可の実現方式とAuth0の立ち位置"><a href="#認証認可の実現方式とAuth0の立ち位置" class="headerlink" title="認証認可の実現方式とAuth0の立ち位置"></a>認証認可の実現方式とAuth0の立ち位置</h1><p>実現方法は大きく・フルスクラッチ、OSS、SaaSがあると思いますが、Auth0はSaaSのプロダクトとなります。<br>図中には代表的なプロダクトを掲載しています。<br>個別のプロダクトの詳細は今回割愛いたします。</p><ul><li>方式の特徴</li></ul><table><thead><tr><th align="center">特徴</th><th align="center">スクラッチ</th><th align="center">OSS</th><th align="center">SaaS</th></tr></thead><tbody><tr><td align="center">機能</td><td align="center">すべて自分で設計可能</td><td align="center">OSS依存</td><td align="center">SaaS依存</td></tr><tr><td align="center">データ</td><td align="center">自環境内に保持可能</td><td align="center">→</td><td align="center">SaaS基盤に一部からすべてのデータを保存する可能性がある</td></tr><tr><td align="center">非機能</td><td align="center">すべての要件に応じることが可能</td><td align="center">→</td><td align="center">SaaS基盤に依存(※)</td></tr><tr><td align="center">運用・保守</td><td align="center">障害・セキュリティ対応を自チームで対応する必要がある</td><td align="center">→</td><td align="center">SaaSの保証範囲内であれば、障害対応・セキュリティ対応が自動で行われる</td></tr><tr><td align="center">※SaaSによっては個別環境を建てることが可能な場合もあり、この場合はすべての要件に応じることが可能</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><img src="/images/20200122/1.png" style="border:solid 1px #000000"><h1 id="Auth0で実現できる事（機能目次レベル"><a href="#Auth0で実現できる事（機能目次レベル" class="headerlink" title="Auth0で実現できる事（機能目次レベル"></a>Auth0で実現できる事（機能目次レベル</h1><h2 id="機能要約"><a href="#機能要約" class="headerlink" title="機能要約"></a>機能要約</h2><p>詳細は、以下のとおりですが、要約するとこんな形になります。</p><ul><li>OIDC/OAuth2を利用した認証・認可が可能</li><li>画面はAuth0側で自由に作り込みが可能（アプリ内に画面を自分で作り込んで持つことも可能）</li><li>ソーシャル連携が可能（ボタンをオン・オフすると、標準画面にソーシャルログインボタンが出現します）</li><li>MFAが可能</li><li>パイプライン・HOOK機能で、サインアップ・サインイン等、特定のアクションにlambda的なロジックの挟み込むことが出来る</li></ul><h2 id="作り込みが発生する要素"><a href="#作り込みが発生する要素" class="headerlink" title="作り込みが発生する要素"></a>作り込みが発生する要素</h2><p>Auth0は認証情報（メールアドレス・パスワード）以外の情報をAuth0内部に持つことを推奨していないため、個人情報の管理は自分で持つ（構築する）必要があります。<br>おそらくこれが、Auth0を利用する上での最も大きい作り込み要素となります。</p><h2 id="Auth0のメニュー"><a href="#Auth0のメニュー" class="headerlink" title="Auth0のメニュー"></a>Auth0のメニュー</h2><p>※すいません、以前自分でQiitaにまとめたものを転載しています。</p><table><thead><tr><th>機能名</th><th>概要</th></tr></thead><tbody><tr><td>tenant</td><td>auth0上で複数のサービスを展開したい場合に利用する機能<br>UserDB/Rule/Hooksなどの機能全般を分離して扱うことが可能になる</td></tr><tr><td>applications</td><td>認証につなぐアプリケーション単位にアプリケーションを定義する機能<br>認証後のコールバック画面などを個別に定義可能となる</td></tr><tr><td>APIs</td><td>認証後に認可させるAPIの定義機能</td></tr><tr><td>SSO</td><td>アプリケーション間でログインを共有する機能</td></tr><tr><td>Connections-Database</td><td>認証情報・ユーザ情報を管理</td></tr><tr><td>Connections-Social</td><td>ソーシャル連携機能<br>トグルボタンのオンオフでログイン画面に連携ボタンが出てくる</td></tr><tr><td>Connections-Enterprise</td><td>LDAP/AD/SAMLなどのエンタープライズ認証連携機能</td></tr><tr><td>Connections-Passwordless</td><td>SMSログイン、メールログインなどのパスワードレス接続を設定する機能</td></tr><tr><td>Universal Login</td><td>Auth0の組み込み画面（ログイン/パスワードリセット..etc）のデザインを変更できる機能</td></tr><tr><td>Rules</td><td>認証のパイプラインファンクションを追加できる機能<br>ログイン後にユーザ属性追加するなど、認証後のカスタマイズできる</td></tr><tr><td>Hooks(BETA)</td><td>認証・ユーザ登録・ユーザ登録前にフック処理を追加できる機能</td></tr><tr><td>Multi-factor Authentication</td><td>多要素認証を追加できる機能<br>プッシュ/ワンタイムパスワード/SMS/メールなどで実現可能</td></tr><tr><td>Emails</td><td>Auth0の組み込まれているメール文章の変更機能<br>ウェルカムメール、パスワードリセット、アカウント検証メールなどの文章を変更できる</td></tr><tr><td>Logs</td><td>loggingの定義機能</td></tr><tr><td>Anomaly Detection</td><td>不正登録・アクセスからの保護機能<br>Brute-force Protection/Breached-password Detection</td></tr><tr><td>Extensions</td><td>サードパーティー制のアドオンを追加できる機能<br>github・ユーザのインポート/エクスポート等との連携ができる<br>つなげるサービスとの契約は個別に必要</td></tr><tr><td>custom domein</td><td>独自のドメインを設定できる機能<br>ドメインの契約は自分でやる必要がある</td></tr></tbody></table><h1 id="Exampleを動かすまでのhow-to"><a href="#Exampleを動かすまでのhow-to" class="headerlink" title="Exampleを動かすまでのhow-to"></a>Exampleを動かすまでのhow-to</h1><p>なにはともあれ、ハンズオンして動かしてみます。<br>いわゆる<code>やってみた</code>ってやつですね。</p><h2 id="0-前提"><a href="#0-前提" class="headerlink" title="0. 前提"></a>0. 前提</h2><p>サインアップ済みであること</p><h2 id="1-ダッシュボードから初期設定を実行します。"><a href="#1-ダッシュボードから初期設定を実行します。" class="headerlink" title="1. ダッシュボードから初期設定を実行します。"></a>1. ダッシュボードから初期設定を実行します。</h2><img src="/images/20200122/photo_20200122_01.png"><h2 id="２-サンプルアプリケーションを動かし、Auth0と繋ぎます。"><a href="#２-サンプルアプリケーションを動かし、Auth0と繋ぎます。" class="headerlink" title="２. サンプルアプリケーションを動かし、Auth0と繋ぎます。"></a>２. サンプルアプリケーションを動かし、Auth0と繋ぎます。</h2><img src="/images/20200122/photo_20200122_02.png"><p>ここまででサンプルアプリケーションが、Auth0を認証局として利用し、認証・認可を実装出来た形になります。</p><h1 id="ソースコードを見てみる"><a href="#ソースコードを見てみる" class="headerlink" title="ソースコードを見てみる"></a>ソースコードを見てみる</h1><p>詳細は次回以降になりますが、ログイン処理の実装を見てみます。</p><p>まず実装しているコンポーネントはNavBarであることが分かります。<br><img src="/images/20200122/photo_20200122_03.png" style="border:solid 1px #000000"></p><h2 id="1-ログイン状態を確認"><a href="#1-ログイン状態を確認" class="headerlink" title="1. ログイン状態を確認"></a>1. ログイン状態を確認</h2><p>25行目付近<br><code>$auth.isAuthenticated</code> を確認し、ログインしていなければ、ログインボタンを表示します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">"!$auth.isAuthenticated &amp;&amp; !$auth.loading"</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"qsLoginBtn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"btn btn-primary btn-margin"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click.prevent</span>=<span class="string">"login"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-on-clickでlogin実行"><a href="#2-on-clickでlogin実行" class="headerlink" title="2. on clickでlogin実行"></a>2. on clickでlogin実行</h2><p>99行目付近<br><code>this.$auth.loginWithRedirect()</code> によって、ログイン処理（モーダル呼び出し）が行われ、ログイン後はcallbackURLにリダイレクトされます。</p><p>callback先は、アプリケーション設定画面に合ったこちらです。<br><img src="/images/20200122/photo_20200122_04.png" style="border:solid 1px #000000"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  login() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$auth.loginWithRedirect();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ログイン処理を実装するだけであればこれだけです。</p><h1 id="この処理で実装した認証Flow"><a href="#この処理で実装した認証Flow" class="headerlink" title="この処理で実装した認証Flow"></a>この処理で実装した認証Flow</h1><p>詳細は以下のものとなりますが、SPAの場合は今回の数行の実装で <code>Authorization Code Flow</code> を踏むことが出来たことになります。<br>※ てっきり<code>Implicit Flow</code>だと思っていたんですが、この記事を書いているときに<code>Authorization Code Flow</code>だって指摘されました。<br>※ <code>ライブラリのコード読まないとだめだよね</code>って言われて悔しかったです。<br><a href="https://auth0.com/docs/flows" target="_blank" rel="noopener">https://auth0.com/docs/flows</a></p><img src="/images/20200122/photo_20200122_05.png" style="border:solid 1px #000000"><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>何度か認証・認可の仕組みを作る機会があった中で、Auth0を触ったのですが、globalで使わているプロダクトの凄みを感じました。<br>今後も、余程の要件がない限り（データを持ち出せない場合、どうしてもSaaSでは機能が実装できない場合など）SaaSを中心に選定していくことになると思います。<br>何より、認証・認可は本来のビジネスの中心ではないため、可能な限り省力化して実装したい場合が多いのではないでしょうか？</p><p>このブログ記事ではAuth0の導入までを紹介しましたが、次回以降はより実践的な利用法について触れていきたいと思います。</p><hr><p>関連記事：</p><ul><li><a href="/articles/202001223/">Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する</a></li><li><a href="/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;始めに&quot;&gt;&lt;a href=&quot;#始めに&quot; class=&quot;headerlink&quot; title=&quot;始めに&quot;&gt;&lt;/a&gt;始めに&lt;/h1&gt;&lt;p&gt;様々なシステムを構築する中で必ず発生する要素&lt;br&gt;&lt;strong&gt;ログイン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;そのログインを支える技
      
    
    </summary>
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>スロットリングとの付き合い方</title>
    <link href="https://future-architect.github.io/articles/20200121/"/>
    <id>https://future-architect.github.io/articles/20200121/</id>
    <published>2020-01-20T23:52:16.000Z</published>
    <updated>2020-01-21T00:13:04.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>Googleで「スロットリング」で検索するとパチスロのリングが沢山ヒットするんですね。<br>今回はその「SLOT リング」ではなく「throttling」関して記載します。</p><h1 id="スロットリングとは"><a href="#スロットリングとは" class="headerlink" title="スロットリングとは"></a>スロットリングとは</h1><p>一定時間内に受信可能なリクエスト数を制限し、制限を上回るリクエストがなされた際には受信を拒否しエラーコードを返却すること。時間経過により再び受信可能となる仕組みです。</p><p>リクエスト数を制限することでシステムにかかる負荷を抑えたり、スパムメールの送信を防止するのに利用されます。</p><p>SaaSであれば有限のコンピューティングをみんなでシェアするのでより多くの人が快適に利用できるよう、一部のユーザからの大量リクエストを制限するのに利用されます。もし無制限にリクエストを受け入れたとするとシステムに負荷がかかり、クライアントへのレスポンスに時間を要したり待たされた挙句にタイムアウトしてしまいます。</p><img src="/images/20200121/1.png" style="border:solid 1px #000000"><p>これは大人気の遊園地が入場制限することで、入場済みの来場者に快適に過ごしてもらうことに似ています。入場前の来場者にとっては好ましくありませんが。。。</p><h1 id="受信拒否時の対応方法"><a href="#受信拒否時の対応方法" class="headerlink" title="受信拒否時の対応方法"></a>受信拒否時の対応方法</h1><p>リクエストする側としては受信拒否されないに越したことはありませんが、拒否された際には以下の対応をするとお行儀が良いです。<br>・少し待ってからリトライする。<br>・ユーザに対してしばらく経ってから再度アクセスするようにアナウンスする。</p><p>遊園地で入場制限がかかるとその日の入園は絶望的で遠方から訪れていると大変がっかりしますが、コンピュータの世界では極短時間です。システムにもよりますが数秒待ってからリトライしてみましょう。一定回数リトライしてみてダメならユーザにしばらく経ってから再度アクセスするようにアナウンスしましょう。</p><h1 id="リトライに一手間加えてスループットを向上させよう"><a href="#リトライに一手間加えてスループットを向上させよう" class="headerlink" title="リトライに一手間加えてスループットを向上させよう"></a>リトライに一手間加えてスループットを向上させよう</h1><p>一定時間待ってからリトライしようとすると同一タイミングで受信拒否されたアクセス数分一斉にアクセスすることになり再度受信拒否されてしまう可能性が高いです。<br>ここは工夫が必要です。<br>方法はいくつもあると思いますがExponential Backoff And Jitterのテクニックが効果的です。<br>詳細は<a href="https://aws.typepad.com/sajp/2015/03/backoff.html" target="_blank" rel="noopener">AWS Solutions Architect ブログ</a>にまとめられているのでそちらをご覧ください。</p><p>少しだけ説明します。</p><h2 id="Exponential-Backoff"><a href="#Exponential-Backoff" class="headerlink" title="Exponential Backoff"></a>Exponential Backoff</h2><p>リトライの間隔を倍々に増加させてく手法<br>例えばリトライの度に1秒,2秒,4秒,8秒と待ち時間を増やしていく。<br>※あくまで例示ですので適切な時間を経過したらエラーであることをユーザにアナウンスしたほうがユーザーフレンドリーです。</p><h2 id="Jitter"><a href="#Jitter" class="headerlink" title="Jitter"></a>Jitter</h2><p>リトライの間隔にばらつきを持たせる手法<br>クライアント毎にランダムな秒数待ってからリトライする。</p><h2 id="Exponential-Backoff-And-Jitter"><a href="#Exponential-Backoff-And-Jitter" class="headerlink" title="Exponential Backoff And Jitter"></a>Exponential Backoff And Jitter</h2><p>リトライの間隔を倍々に増加させた上でばらつかせる</p><img src="/images/20200121/photo_20200121_01.png" class="img-middle-size" style="border:solid 1px #000000">上図は[AWS Solutions Architect ブログ](https://aws.typepad.com/sajp/2015/03/backoff.html)より引用<p>これらのリトライ手法により単位時間あたりのアクセス数が低減でき、スロットリングの受信拒否が起きにくくなります。</p><h1 id="受信拒否の回避方法"><a href="#受信拒否の回避方法" class="headerlink" title="受信拒否の回避方法"></a>受信拒否の回避方法</h1><p>システムにより状況は異なると思われますが概ね以下のような対応が必要です。<br>・受信拒否される要因を分散させる。<br>　送信元のメールアドレスやIPアドレス、APIキーが要因となりえます。<br>・適切にキューイングやWAITを入れ単位時間あたりのリクエスト数を制限する。</p><h1 id="スロットリングを実装する場合"><a href="#スロットリングを実装する場合" class="headerlink" title="スロットリングを実装する場合"></a>スロットリングを実装する場合</h1><p>これまでスロットリングされているサービスを利用する側の視点で説明してきましたが、反対に自分のサービスにスロットリングを実装することを考えてみましょう。</p><p>単位時間あたりのリクエスト数を正確に計測しようとするとRDBMSを利用してリクエストの度にINSERTし、単位時間あたりのリクエスト数を確認する為にSELECTするなどが必要になります。スロットリング処理の割合が高くなり、本来行うべき処理に支障をきたすのでゆるい制御をすることをおすすめします。</p><p>簡易的に行うのであればリクエスト毎の同期処理で閾値判定処理をするのではなく非同期処理で閾値判定し超えていたら一定時間受信を拒否する仕組みが良いと思います。</p><h2 id="簡易的なスロットリングの仕組み"><a href="#簡易的なスロットリングの仕組み" class="headerlink" title="簡易的なスロットリングの仕組み"></a>簡易的なスロットリングの仕組み</h2><p>APIキーを用いてスロットリングされるものとして説明します。</p><img src="/images/20200121/2.png" style="border:solid 1px #000000"><p><strong>サービスプロセス</strong><br>1.クライアントからサービスへAPIキーを付与してアクセスする<br>2.APIキーを含めたアクセスログを出力する<br>3.受信拒否するかどうかAPIキーに対応するロック状態を取得する<br>4.ロック状態により正常なレスポンスか受信拒否のレスポンスを返却する</p><p><strong>スロットリング制御プロセス</strong><br>1.定期的にアクセスログを取得する<br>2.直近の単位時間あたりのアクセス数をAPIキー毎にカウントし、閾値を超えている場合はロック、超えていない場合は非ロックの状態に変更する</p><p>これらにより重い処理はスロットリング制御プロセスが担い、サービスプロセスに負荷をかけずにスロットリング処理が実現できます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>一部の利用者のせいでその他の利用者が不快な思いをしないようにする仕組みであるスロットリング。この仕組みのおかげで大多数の利用者が快適にサービスを利用できます。サービスを利用する場合でもサービスを提供する場合でも他の利用者のことを考慮し適切な対応を心掛けましょう。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20191206">AWS Glueの単体テスト環境の構築手順</a></li><li><a href="/articles/20191101/">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="/articles/20190902/">AWS IAMロールの信頼関係の気になる動作</a></li><li><a href="/articles/20180828">5TB/日 のデータをAWS Glueでさばくためにやったこと（概要編）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;Googleで「スロットリング」で検索するとパチスロのリングが沢山
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
</feed>
