<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2022-02-09T05:19:04.981Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 1.18集中連載 ジェネリクス</title>
    <link href="https://future-architect.github.io/articles/20220209a/"/>
    <id>https://future-architect.github.io/articles/20220209a/</id>
    <published>2022-02-08T15:00:00.000Z</published>
    <updated>2022-02-09T05:19:04.981Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220209a/go1.18top.png" alt="" width="600" height="295"><p>Go 1.18のリリースが迫っているため、最近恒例でやっている新機能を何人かで紹介する集中連載を行います。ただ、Go 1.18は機能が大きく、ベータが長くなっており、当初2月予定だったのが、3月リリース見込みとなっています。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Title</th><th>Author</th></tr></thead><tbody><tr><td>2/9 （水）</td><td>ジェネリクス（この記事です）</td><td>澁川喜規</td></tr><tr><td>2/10（木）</td><td>net/http, wasm</td><td>真野隼記さん</td></tr><tr><td>2/14（月）</td><td>fuzzing</td><td>伊藤真彦さん</td></tr><tr><td>2/15（火）</td><td>net/netip</td><td>宮永崇史さん</td></tr><tr><td>2/16（水）</td><td>勉強会ではなしたツール系</td><td>辻大志郎さん</td></tr><tr><td>2/17（木）</td><td>debug/buildinfo</td><td>多賀聡一朗さん</td></tr></tbody></table></div><h1 id="ジェネリクス"><a href="#ジェネリクス" class="headerlink" title="ジェネリクス"></a>ジェネリクス</h1><p>Go 1.18で入る機能で注目度が高い新機能がジェネリクスです。Goに対する批判的な言葉としてよく使われるものが「ジェネリクスがない」というものでした。Goを長く使っている人は「ジェネリクスなんていらん」と言い続けてきたし、個人的にもいまだになくてもいいと思っているのですが、大きな変更であるし、これから影響もいろいろある領域ですので学ぶ必要はあるでしょう。自分で書かなくても、書かれたコードを読むこともあるでしょうし。</p><p>ジェネリクスのチュートリアルが追加されています。</p><p><a href="https://go.dev/doc/tutorial/generics">https://go.dev/doc/tutorial/generics</a></p><p>mattnさんの動画もあります。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/omvbKgQrdYU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>文法的には基底型を表すチルダ演算子が増えたりいろいろ変更が入っています。</p><p>とはいえ、constraintsパッケージが1.18に入る予定だったのが、一旦準標準パッケージに格下げされたり、まだまだいろいろ変更が入っています。</p><ul><li><a href="https://github.com/golang/go/issues/50792">https://github.com/golang/go/issues/50792</a></li></ul><p>また、今回のアップデートでは言語の変更が大きいので標準ライブラリの変更はなるべく減らそう、という提案も行われています。</p><ul><li><a href="https://github.com/golang/go/issues/48918">https://github.com/golang/go/issues/48918</a></li></ul><p>そのため、ジェネリクスの文法は入るものの、標準ライブラリでそれを活かしたものが入るのは1.19以降ですね。現状、準標準ライブラリで提供されているのは次の3つのパッケージです。</p><ul><li><a href="https://pkg.go.dev/golang.org/x/exp/constraints">golang.org/x/exp/constraints</a><br><code>constraints.Ordered</code> など、型パラメータの制約で使えそうな事前定義済みの型がいろいろ定義されているパッケージ。</li><li><a href="https://pkg.go.dev/golang.org/x/exp/slices">golang.org/x/exp/slices</a><br>コピー、挿入、削除、重複の削除、ソート、バイナリサーチなどを提供する汎用のスライス処理の関数群。</li><li><a href="https://pkg.go.dev/golang.org/x/exp/maps">golang.org/x/exp/maps</a><br>コピー、空にする、値の一覧取得、キーの一覧取得など、汎用のマップ処理の関数群</li></ul><p>また、現状の実装ではいくつか制限もあります。2つは1.19に向けて改善していく旨がリリースノートに書かれています。</p><ul><li>ジェネリックな関数やメソッド内部で型宣言が扱えない</li><li>パラメータ型の引数を組み込み関数のreal()/imag()/complex()といった複素数関数に渡せない</li></ul><p>次の制限は解決するかどうかは明言されていません。</p><ul><li>型パラメータや型パラメータへのポインタを構造体の無名フィールドに埋め込めない。インタフェース型にも型パラメータを埋め込めない</li><li>2つ以上の項を持つ要素ユニオン要素に、メソッドセットを持つインタフェース型を入れられない</li></ul><h2 id="ジェネリクスでできること・できないこと"><a href="#ジェネリクスでできること・できないこと" class="headerlink" title="ジェネリクスでできること・できないこと"></a>ジェネリクスでできること・できないこと</h2><p>いろいろ大きな変更となっていますが、Goのジェネリクスでできるのは主に2つです。</p><ul><li>型チェックを実行時からコンパイル時にフォワードできる（ものがある)</li><li>キャストを減らせる</li></ul><p>挙動としてはC++のテンプレート的に、型パラメータを設定したタイミングで、その型が設定されたバージョンのコードが生成されているようですので、<code>interface&#123;&#125;</code>で毎回キャストしたりしていたのよりも高速に実行されそうです。</p><p>ジェネリクスは以前ではリフレクションで行っていたようなことを一部コンパイル時にできるようにしてくれます。また、以前は汎用型の<code>interface&#123;&#125;</code>で扱っていて、毎回キャストしていたようなケースでキャストしないで書けます。</p><p>とはいえ、その構造体のフィールド一覧を取り出すとか、そういうのはあいかわらずリフレクションが必要です。</p><p>また、Goのジェネリクスは型違いによりロジックを最適化する方法はありません。16ビットの時はSIMDで8個ずつ、32ビットだと4個ずつ計算といったように、型の種別ごとに実行されるプログラムを変えることはできません。</p><p>また、Goの場合はオーバーロードもなく、定数も入れられず、記述力としてはかなりシンプルです。C++では型パラメータがより柔軟でオーバーロードもありますし、型パラメータが可変長だったり、型だけでなく整数なども入れられ、再帰を使って柔軟なデータ構造を実現したりできます。C++のテンプレート機能は、コンパイル時に計算を行ったり、うっかりチューリング完全になってしまったことが知られていますが、Goの場合はC++と違って地獄門が開いたりはしてませんので、安心してください。</p><h2 id="ジェネリクスとの付き合い方・アプリ編"><a href="#ジェネリクスとの付き合い方・アプリ編" class="headerlink" title="ジェネリクスとの付き合い方・アプリ編"></a>ジェネリクスとの付き合い方・アプリ編</h2><p>では実際、ジェネリクスを業務にどのように入れていくか、というところは問題ですが、この手の話はアプリとライブラリで様子が変わってきます。</p><p>まずアプリケーションですが、これは他から利用されるコードではないため、自分の中で完結すればOKです。なのでコンパイラのバージョンが上げられる状況であれば使えるでしょう。ただし、GAEのStandard Environmentだったり、GCPのCloud RunとかCloud Functionsとかでソースコードをクラウドビルドする場合はランタイムのバージョンが環境次第だったりするでしょうし（Cloud Runは自分でローカルビルドしたイメージも使えますが）、そこだけが問題ですね。</p><p>具体的に何に使っていくかですが、ゆるーく型チェックを行うのと、キャストを減らすぐらいの使い道でしょう。</p><p>緩く、というと、例えば整数型を受け取るときに、<code>int</code>を受け取るだけではなく、<code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>も受け取れるようにするとか、今までのGoでは<code>int</code>のみメソッド提供して利用者がキャストするか、個別に関数を用意するか、<code>interface&#123;&#125;</code>で雑に扱うかの３択だったところに、「<code>int</code>っぽいものは全部受け取るよ」という柔軟な選択肢が追加で提供できますね。</p><p>それ以外だと、「ポインタのみ受け取りたい、インスタンスは受け取らない」みたいなケースで、ポインタを強制するみたいなのもできますね。デコード系の処理でよく問題になるやつ。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonDecode</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(data []<span class="keyword">byte</span>, input *T)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> json.Unmarshal(data, input)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> Favorite <span class="keyword">struct</span> &#123;</span><br><span class="line">Food <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f Favorite</span><br><span class="line">JsonDecode([]<span class="keyword">byte</span>(<span class="string">`&#123;&quot;food&quot;:&quot;中本&quot;&#125;`</span>), &amp;f) <span class="comment">// ←ポインタではなくインスタンスを渡すとコンパイルエラー</span></span><br><span class="line">fmt.Println(f.Food)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あとはデータベースのNullBoolとかその手のコード内のイディオムとかはどんどん使って行ってもいいかと思います。</p><p>オレオレカッコいいコンテナクラスとか、壮大なプログラミングモデルを変えうるような機構とかを入れてしまいたくなるかもしれませんが、JavaScriptでプリミティブな構造を大きく変えるようなライブラリが入った結果、そのコードを読み解くのにそのライブラリの知識も追加で必要になって、他の人から手が出ない、みたいなことがあったので（数社の共同開発案件で、突然、コードフリーズの日に今まで使ってなかったimmutable.jsを使ったコードがPRで送られてきてコードレビューで苦戦した）、Go流から大きく外れるようなものは慎重にやった方が良いですね。世間の流行とうっかり距離が離れてしまうと負債化してしまいますし。</p><p>もちろん、RxGoみたいなのとか、関数型のリスト処理を行ライブラリがジェネリクス対応になって多くのコミュニティの支持を得られて広まっていく、というのは当然あると思いますが、エコシステム全体がアップデートされていくには数年単位でかかると思うので、まあのんびりやればいいかと思います。</p><h2 id="ジェネリクスとの付き合い方・ライブラリ編"><a href="#ジェネリクスとの付き合い方・ライブラリ編" class="headerlink" title="ジェネリクスとの付き合い方・ライブラリ編"></a>ジェネリクスとの付き合い方・ライブラリ編</h2><p>ライブラリを実装する人は、ジェネリクスを使ってしまうとGo 1.18以上でしか使えないものになってしまいます。Node.jsもfsパッケージのasync版を追加したときにパッケージを分けていたし、Goでもそうすべき気がします。</p><ul><li>github.com/yourname/mylibrary/v2</li><li>github.com/yourname/mylibrary/v2/generics</li></ul><p>で、半年後に1.19がリリースされ、1.17のサポートが切れたタイミングでバージョンをあげて後方互換性を切りつつ、ジェネリクスの方をデフォルトにする、という感じでしょうか。</p><ul><li>github.com/yourname/mylibrary/v3</li></ul><p>ジェネリクスのチュートリアルには「まずジェネリクスでない実装を作ってからジェネリクス化せよ」とありますが、その前にまるごとコピーする工程を入れるだけなのでまあ、手法としてはこれでいけるかと思います。</p><h2 id="ジェネリクスに向けたイディオムの整備"><a href="#ジェネリクスに向けたイディオムの整備" class="headerlink" title="ジェネリクスに向けたイディオムの整備"></a>ジェネリクスに向けたイディオムの整備</h2><p>Goに限らず、どの言語でも「よくある命名規則やルール」などがあります。Goでは、<code>Append()</code>関数があれば1つ目のものが追加先で返り値に変更済みのものが入るとか、<code>Copy()</code>はコピー先、コピー元の順序の引数になっているとかです。ジェネリクスに関するこのようなイディオムも今後、徐々にコンセンサスが取れてくると思います。</p><p>今の所のサンプルとかで見えてくる命名規則はこんな感じですね。</p><ul><li>型パラメータ名として、型が1つだけならTを使う。</li><li>型パラメータ名として、複数ある場合は1文字変数的な命名で大文字にして使う</li></ul><p>mapsパッケージだとこんな感じですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Equal</span>[<span class="title">M1</span>, <span class="title">M2</span> <span class="title">constraints</span>.<span class="title">Map</span>[<span class="title">K</span>, <span class="title">V</span>], <span class="title">K</span>, <span class="title">V</span> <span class="title">comparable</span>]<span class="params">(m1 M1, m2 M2)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure><p>holdになっているプロポーザルでは、型パラメータを取るファクトリー関数として<code>PoolOf()</code>が提案されています。</p><p><a href="https://github.com/golang/go/issues/47657">https://github.com/golang/go/issues/47657</a></p><p>そういうジェネリクスならではのイディオムが整備されると、ジェネリクスを使ったコードの意図が伝わりやすくなるので、今後その手のイディオムが充実していくといいですね。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220209a/go1.18top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;295&quot;&gt;

&lt;p&gt;Go 1.18のリリースが迫っているため、最近恒例でやっている新機能を何人かで紹介する集中連載を行います。ただ、Go</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="Go1.18" scheme="https://future-architect.github.io/tags/Go1-18/"/>
    
    <category term="ジェネリクス" scheme="https://future-architect.github.io/tags/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>PG BATTLE 2021 参戦記</title>
    <link href="https://future-architect.github.io/articles/20220208a/"/>
    <id>https://future-architect.github.io/articles/20220208a/</id>
    <published>2022-02-07T15:00:00.000Z</published>
    <updated>2022-02-08T03:05:18.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>本記事は、2021/10/23(土)に行われた<a href="https://products.sint.co.jp/pg_battle" title="PG Battle2021">PG Battle 2021</a>の参戦記です。</p><p>フューチャーから3人1組で3チーム参加し、なんと<strong>企業の部6位</strong>に入賞することができました！！</p><img src="/images/20220208a/キャプチャ.PNG" alt="" width="1200" height="642" loading="lazy"><p>本記事を通じて、競技プログラミングに興味のある方が少しでも増えると良いなーと思っています！</p><h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>2021年7月フューチャー新卒入社の栗城です。競プロ歴は2年弱（就活期の終盤に始めました）、</p><p>問題を解くのが大好きで、毎週末AtCoderのコンテストに参加しています。2022年2月からOCV（フューチャーの競技プログラミング部）の部長を務めさせていただいています。</p><h1 id="競技プログラミングとは"><a href="#競技プログラミングとは" class="headerlink" title="競技プログラミングとは"></a>競技プログラミングとは</h1><p>競技プログラミングは与えられた問題を好きなプログラミング言語で解く競技です。略して「競プロ」と言います。日本では<a href="https://atcoder.jp/">AtCoder</a>というコンテストサイトが有名で、毎週末コンテストが開催されています。</p><p>初級レベルでは求められた処理をそのまま実装すれば正解できる問題が多く出題されるので、</p><ul><li><strong>プログラミングに慣れたい</strong></li><li><strong>新しいプログラミング言語を習得したい</strong></li></ul><p>という方には非常におすすめです。</p><p>コンテストとかは興味ないけど気軽にアルゴリズムの練習をしてみたいという方には、<a href="https://algo-method.com/">アルゴ式</a>というサイトがあります。プログラミングを通して簡単な算数・アルゴリズム・統計などを基礎的なレベルから学ぶことができ、新しい言語の習得にも役立ちます。</p><p>一方コンテストにおいては、上位になればなるほど<strong>アルゴリズム力</strong>・<strong>思考力</strong>・<strong>数学力</strong>を極める戦いとなります。</p><p>アルゴリズムを駆使するような仕事でない限り実務からはだんだん離れていきますが、それでも</p><ul><li><strong>問題の本質を見抜く力</strong></li><li><strong>複雑なロジックを最後まで考え抜く思考体力</strong></li><li><strong>思いついた解法を素早く正確にコードに落とし込む実装力</strong></li></ul><p>このあたりは実務にも大いに役立つところだと思っています。</p><p>どんな問題が出るのか気になる方は、今回PG Battleで出題された問題をこの記事の後半で紹介していますので、<br>ぜひ見てみてください！</p><h1 id="PG-Battleとは"><a href="#PG-Battleとは" class="headerlink" title="PG Battleとは"></a>PG Battleとは</h1><p>毎年秋に開催される競プロのチーム戦で、ルールはこんな感じです。</p><ul><li>同じ会社や学校の中で3人チームを組んで参加</li><li>3人で<strong>「ましゅまろ」「せんべい」「かつおぶし」</strong>の各4問セットを別々に解き、チームの合計点を競う</li><li>「ましゅまろ」 &lt; 「せんべい」 &lt; 「かつおぶし」 の順に難しくなる（堅い方が難しい！）</li><li>合計点が同じ場合は、合計解答時間の短いチームが上位</li><li>企業の部・大学生の部・高校生以下の部のそれぞれで順位を競う</li></ul><p>細かい参加方法やルール・注意点などは<a href="https://qiita.com/mirai_taiyaki/items/9dab22821af15858e414">去年の体験記</a>にあるので、気になる方は読んでみてください。</p><p>OCVでは毎年部内でチームを組んで参加するのが恒例となっており、今年は以下の３チームで参加しました。</p><p>例年より<del>適当な</del>個性の強いチーム名でした笑</p><ul><li>犬もこもこ栗いがいが（※筆者のチームです）</li><li>Hello 猫 World!</li><li>あと一人足りない！行けたら行くチーム</li></ul><h1 id="コンテスト当日"><a href="#コンテスト当日" class="headerlink" title="コンテスト当日"></a>コンテスト当日</h1><p>私のチームは</p><p>ましゅまろ担当：<a href="https://atcoder.jp/users/baku1101"><font color="LightSeaGreen"><b>baku1101</b></font></a><br>せんべい担当：<a href="https://atcoder.jp/users/marroncastle917"><font color="Blue"><b>marroncastle917</b></font></a><br>かつおぶし担当：<a href="https://atcoder.jp/users/yamad"><font color="DarkKhaki"><b>yamad</b></font></a></p><p>の同期新人チームでした。<br><font color="LightSeaGreen">水</font><font color="Blue">青</font><font color="DarkKhaki">黄</font><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>とバランスが取れたチームが組めたので、始まる前から上位狙えるかも？とは思っていました。</p><p>私は競プロのコンテストに普段から参加しているので、<a href="https://products.sint.co.jp/q_list_2020">前年の過去問</a>を解く以外に特に対策はしませんでした。PG Battle自体は初めてだったので、本番で使用する<a href="https://products.sint.co.jp/topsic">TOPSIC</a>というサイトから提出の練習などをして本番を迎えました。</p><p>本番では私が担当したせんべいは第3問までは比較的解きやすい問題でしたが第4問が非常に難しく、第4問を考えている間にタイムアップ！問題は<a href="https://products.sint.co.jp/q_list_2021">こちら</a>から見られます。</p><p>最後まで提出ボタンを押さなかったので、オンラインに保存していたコードが提出されたかどうか不安になりましたが、提出履歴を見るときちんと提出されており、一安心。</p><p>反省としては、時間いっぱいまで考え続けるのではなく、第4問にもっと早く見切りをつけて解答終了すべきでした。</p><p>点数が同じチームは3人の解答時間の合計で順位が決まるからです。チームの足を少し引っ張ってしまったので、この点は来年への教訓です。</p><h1 id="結果発表"><a href="#結果発表" class="headerlink" title="結果発表"></a>結果発表</h1><p>終了から数時間後に採点結果が発表され、以下のような結果でした。</p><p>ましゅまろ：100点（4問中4問正解）<br>せんべい：65点（4問中3問正解）<br>かつおぶし：70点（4問中3問正解）</p><p>3人とも取るべき問題をミスなく正解でき、ベストを尽くせたと言っていい結果になりました！</p><p>Twitterなどで感想を見る限り上位が期待できそうなことが分かったので、順位発表を楽しみに1週間過ごしました。</p><p>1週間後に結果発表があり、冒頭にも書いた通り<strong>企業の部194チーム中6位</strong>という成績を収めることができました！景品は上位3チームと10位以降の飛び賞しかないのでもらえませんでしたが、トップ10に入ると順位表に企業名が出るので、会社の名前を残せたことが何より良かったなと思っています。チームメイトに感謝です。</p><h1 id="問題紹介"><a href="#問題紹介" class="headerlink" title="問題紹介"></a>問題紹介</h1><p>私が解いた「せんべい」の第3問「トーナメント表」の問題を紹介します。</p><p>この問題はアルゴリズムの知識は特に必要ないので、競プロ未経験の方もぜひ考えてみてください。</p><img src="/images/20220208a/PGBattle2021_トーナメント表.png" alt="PGBattle2021_トーナメント表" width="1200" height="674" loading="lazy"><p>問題の全文は<a href="https://products.sint.co.jp/hubfs/resource/topsic/pgb2021/2_3.pdf">こちら</a>から見られます。</p><p>読んでもよく分からなかった方のために、改めて説明します。</p><p>例えば、人１～４の４人がいたとして、とある組み合わせでトーナメント形式で対決した結果、</p><ul><li>人１：ベスト４</li><li>人２：ベスト４</li><li>人３：ベスト２</li><li>人４：ベスト１</li></ul><p>だったことだけが分かっているとします。</p><p>このとき、もしトーナメント上の人の並びが問題文中の図のようだったとしたら、各試合の勝敗を図のように決めれば人１～４がそれぞれ「ベスト４、ベスト４、ベスト２、ベスト１」になりますよね。</p><p>このように、<strong>適切に勝敗を定めれば与えられた順位を実現できるようなトーナメント表の人の並び方を出力する</strong>のがこの問題です。この例では「3,1,2,4」と出力すれば正解となります（他の正答もあり得ます）</p><p>競プロでは最適解を求める問題が多いのですが、この問題はそうではなく、条件を満たす解を何でもよいので一つ出力する形式です。このような問題を<strong>「構築問題」</strong>といい、理詰めのプロセスだけでなく<strong>「実験」</strong>や<strong>「ちょっとしたひらめき」</strong>が必要になることが多く、得意不得意がはっきりしやすいのが特徴です。</p><h1 id="解説"><a href="#解説" class="headerlink" title="解説"></a>解説</h1><p>さて、この問題はどう考えれば良いでしょうか。</p><p>まず、どう転んでも各順位を取る人数は決まっているので、人数の分布が違っていたらダメそうです。例えば、ベスト１（優勝者）やベスト２（準優勝者）が２人以上いたり、ベスト４が１人しかいないようなことはあり得ないため、そのような場合は-1を出力します。</p><p>一方、順位ごとの人数が適切な場合は工夫すれば上手くいきそうです。ここで人の並びを定めやすくするために、<strong>トーナメントの勝敗をこちらで決めてしまう</strong>ことにしましょう。今回は、<strong>各対戦において右側の人が必ず勝つ</strong>ことにします。</p><p>つまり、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="6.157ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 2721.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2221.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>の場合には以下のように対戦が進むことを仮定します。<img src="/images/20220208a/トーナメント表.PNG" alt="トーナメント表.PNG" width="620" height="455" loading="lazy"></p><p>図中の数字は人の番号ではなく、<strong>トーナメント上の位置が左から何番目か</strong>を表すことに注意してください。以後、この左から数えた位置を<strong>位置番号</strong>と呼ぶことにします。</p><p>実は、どのように勝敗を決めたとしても各順位の人数は変わらないため、適切な解を必ず構成できます。よって、<strong>勝敗は好きなように決めて良い</strong>のです。</p><p>勝敗さえ決めてしまえばあとは人を適切な位置に配置していくだけなのですが、実装をやりやすくするため、ここでは以下のような性質に注目します。</p><ul><li>各対戦では<strong>位置番号が2で割り切れる回数が多い方が勝利</strong>している</li><li><strong>位置番号が2で何回割り切れるかで最終順位が決まる</strong></li></ul><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="6.157ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 2721.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2221.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>の例だと位置番号が2で割り切れる回数によって</p><ul><li>2回：ベスト１（位置４）</li><li>1回：ベスト２（位置２）</li><li>0回：ベスト４（位置１，３）</li></ul><p>のようになっています。<br>ピンと来ない方は、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="8.295ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 3666.2 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2221.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2721.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3166.2,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>のトーナメント表を実際に書いてみると分かりやすいと思います。</p><p>この性質を一般化すると、</p><ul><li><strong>位置番号が2で割り切れる回数がちょうど</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><strong>回ならベスト</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="4.536ex" height="1.914ex" role="img" focusable="false" viewBox="0 -846 2005 846"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1666,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container></li></ul><p>と表すことができます。さらに、ベスト<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="4.536ex" height="1.914ex" role="img" focusable="false" viewBox="0 -846 2005 846"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1666,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container>になるのは<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>回勝利することと同値なため、</p><ul><li><strong>位置番号が2で割り切れる回数がちょうど</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><strong>回なら</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><strong>回勝利する</strong></li></ul><p>と言い換えればよりシンプルになります。また、この逆も成り立ちます。</p><p>2で割り切れる回数だけ勝利するというのは面白い性質ですね。</p><p>以上より、与えられた順位情報から各人が何回勝利したかを求め、</p><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><strong>勝した人を2でちょうど</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><strong>回割り切れる位置に配置</strong></li></ul><p>するように実装すれば、正解が得られます。</p><p>計算量は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.226ex" height="2.48ex" role="img" focusable="false" viewBox="0 -846 2751.9 1096"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="mo" transform="translate(2362.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>となり、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="9.049ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 3999.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(2999.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>であることから<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container>回程度の計算で収まるので、実行時間制限2秒に余裕をもって間に合います。</p><p>以下は、pythonでこの方針を実装してみたものです。本番で私が提出したコードを可読性を上げるために改良し、コメントをつけてみました。ジャッジで確かめていないので間違いがないとは言い切れませんが、方針は合っているはずです。</p><h2 id="Part１-入力を受け取る"><a href="#Part１-入力を受け取る" class="headerlink" title="Part１　入力を受け取る"></a>Part１　入力を受け取る</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())                    <span class="comment"># トーナメントの深さ</span></span><br><span class="line">A = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="comment"># 各人の順位を並べた配列</span></span><br><span class="line">M = <span class="built_in">pow</span>(<span class="number">2</span>,N)                        <span class="comment"># 参加人数</span></span><br></pre></td></tr></table></figure><p>pow(2,N)は2の<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container>乗です。</p><h2 id="Part２-勝利数ごとに人の番号を記録"><a href="#Part２-勝利数ごとに人の番号を記録" class="headerlink" title="Part２　勝利数ごとに人の番号を記録"></a>Part２　勝利数ごとに人の番号を記録</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rank_to_win = {<span class="built_in">pow</span>(<span class="number">2</span>,i) : N-i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>)} <span class="comment"># 「ベストa」を「勝利数」に変換する辞書（javaでいうmap）</span></span><br><span class="line">people_nums = [[] <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>)]             <span class="comment"># w勝した人の番号を記録する配列</span></span><br><span class="line"><span class="keyword">for</span> i,a <span class="keyword">in</span> <span class="built_in">enumerate</span>(A):        <span class="comment"># 配列Aの要素aを0始まりのインデックスiとともに繰り返す</span></span><br><span class="line">    num = i+<span class="number">1</span>                   <span class="comment"># 人の番号</span></span><br><span class="line">    w = rank_to_win[a]          <span class="comment"># num番の人の勝利数、ベストaを勝利数に変換</span></span><br><span class="line">    people_nums[w].append(num)  <span class="comment"># w勝した人の番号を記録する配列にnum番を追加</span></span><br></pre></td></tr></table></figure><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.62ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 716 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></svg></mjx-container> 勝した人の番号を<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="6.156ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 2721 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(969,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1454,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1957,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2255,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>_<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.577ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3791 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2519,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2797,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(3513,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>に記録します。</p><h2 id="Part３-トーナメント上に実際に人を並べる"><a href="#Part３-トーナメント上に実際に人を並べる" class="headerlink" title="Part３　トーナメント上に実際に人を並べる"></a>Part３　トーナメント上に実際に人を並べる</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 答え（トーナメントに並べる人の番号）の配列</span></span><br><span class="line">ans = [<span class="number">0</span>]*M</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0勝からN勝まで繰り返し</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># w勝した人のトーナメント上の位置番号(1-index)を表す配列</span></span><br><span class="line">    positions = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">pow</span>(<span class="number">2</span>,w), M+<span class="number">1</span>, <span class="built_in">pow</span>(<span class="number">2</span>,w+<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># w勝した人の人数が位置番号の数と合わなければ-1を出力して終了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(people_nums[w]) != <span class="built_in">len</span>(positions):</span><br><span class="line">        <span class="built_in">print</span>(-<span class="number">1</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># トーナメント上の位置（pos）にnum番の人を配置（同じ勝利数の人の中では順不同）</span></span><br><span class="line">    <span class="keyword">for</span> pos, num <span class="keyword">in</span> <span class="built_in">zip</span>(positions, people_nums[w]):</span><br><span class="line">        ans[pos-<span class="number">1</span>] = num</span><br><span class="line"></span><br><span class="line"><span class="comment"># 答えを出力</span></span><br><span class="line"><span class="built_in">print</span>(*ans)</span><br></pre></td></tr></table></figure><p>本質パートです。このパートで答えまで出力しています。<br>python特有の記法である</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">pow</span>(<span class="number">2</span>,w), M+<span class="number">1</span>, <span class="built_in">pow</span>(<span class="number">2</span>,w+<span class="number">1</span>)))</span><br></pre></td></tr></table></figure><p>では、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.464ex" height="1.53ex" role="img" focusable="false" viewBox="0 -676.2 1089.3 676.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></svg></mjx-container>から始めて<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="4.509ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1993 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container>間隔で<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container>までのリストを作っており、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>でちょうど<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.62ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 716 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></svg></mjx-container>回割り切れる数を全列挙しています。<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="22.349ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9878.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2221.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2721.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3110.6,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(4439.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5495.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6495.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6884.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7328.8,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(8322.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9378.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>の場合は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="23.27ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10285.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(988,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1457,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1802,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2163,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2508,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2993,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3593,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(4339.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5395.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(5673.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(6173.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(6618.2,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(7118.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7562.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(8562.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9007.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(10007.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>となります。</p><p>解説は以上です。いかがでしたでしょうか。</p><p>この問題は他にも様々なやり方があるので、余裕があれば考えてみてください。解の構成自体はそこまで難しいものではありませんが、どう実装するかが問われる問題だったかなと思います。</p><p>あと、問題の作りが自然というか実際自分でも考えたくなりそうな問題設定で、個人的にはとても好きな問題でした。</p><p>公式が出している<a href="https://products.sint.co.jp/a_list_2021#07">python, C++, javaによる解答例</a>や、<a href="https://www.youtube.com/watch?v=t5O_wdQ_0a8&list=PLnNY0P_Gy1deocZv3L-P0A_vplKdGL5Tq&index=7">AtCoder社長による解説動画</a>もあるので参考にしてみてください。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>私自身は競プロで入賞するのが初めてだったので、とてもうれしかったです。私のように個人では到底最上位は狙えないような実力でも、同じ企業内で粒を揃えられれば上位を狙えるのがPG Battleの魅力だなと思います。</p><p>それから、去年よりも全体的に面白い問題が多く解きがいがありました。</p><p>意外と競プロの公式チーム戦は数が少ないので、このような機会を毎年提供してくださる主催者の方々にとても感謝ですし、レベルが近いメンバーで比較的簡単にチームが組める社内の競プロerのレベルの高さにも恵まれているなと感じました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>最後までお読みいただきありがとうございました！競技プログラミングに少しでも興味を持っていただけたでしょうか。</p><p>OCV（フューチャーの競プロ部）では灰色からレッドコーダーまで様々なレベルの方が在籍しています。</p><p>まだ部長になったばかりなので本格的な活動はこれからになりますが、気軽に教え合ったり情報交換したりできる環境を作っていく予定です。</p><p>興味のある方はぜひお声がけください！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">色はAtCoderにおける強さを表していて、灰,茶,緑,水,青,黄,橙,赤,自由色の順に強くなります。詳しくは<a href="https://chokudai.hatenablog.com/entry/2019/02/11/155904">こちら</a>を読んでみてください。各色がどれぐらいの実力なのかについてAtCoderの社長が詳しく書いてくださっています。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;本記事は、2021/10/23(土)に行われた&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
    <category term="pgbattle" scheme="https://future-architect.github.io/tags/pgbattle/"/>
    
  </entry>
  
  <entry>
    <title>オンライン勉強会の発表順を決めるサービスを作ってみた</title>
    <link href="https://future-architect.github.io/articles/20220207a/"/>
    <id>https://future-architect.github.io/articles/20220207a/</id>
    <published>2022-02-06T15:00:00.000Z</published>
    <updated>2022-02-07T01:15:56.555Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220207a/スクリーンショット_2022-02-03_0.14.44.png" alt="サービスイメージ" width="1200" height="678" loading="lazy"><p>オンライン勉強会をする上で、ちょっと悩むポイントは発表順を決めることです。meetなどで表示されるユーザー一覧は、人によって表示順序が異なるため「画面上の右上の人から順番に」という技が使えなかったりします。</p><p>で、「名前順」「背の順」「誕生日順」など、いろいろな順番を決めるための方法を考えて順番を決めていました。でも、順番を変えるだけなら乱数で適当に決めちゃえばいいよね、ということで作ってみました。Svelte使ってみたかったし（←これが目的）。</p><ul><li><a href="https://shibukawa.github.io/shuffle-name/">https://shibukawa.github.io/shuffle-name/</a></li></ul><p>テキストエリアに参加者の名前を改行区切りで入れていくだけです。一文字入力ごとにシャッフルして右側に表示されます。最後まで名前を入れるだけでシャッフル済みのリストができるという寸法です。</p><p>Tailwind.cssとDaisyUIのおかげで、新しいフレームワークにチャレンジするときに、見た目部分は既存の知識の流用が効くので良いですね。効率良く学べます。しかもReactと違ってサンプルコードをそのままコピーして貼ると動くのは楽で良いですね（classをclassNameに変える手間がない)。</p><p>ビルド結果がコンパクトで高速という触れ込みなので、ちょくちょく使ってみたいと思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="/articles/20220125a/">がんばらない手ぶらオンライン勉強会</a></li><li><a href="/articles/20211124a/">JSレスBootstrapなdaisyUIの秘密 </a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220207a/スクリーンショット_2022-02-03_0.14.44.png&quot; alt=&quot;サービスイメージ&quot; width=&quot;1200&quot; height=&quot;678&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="Svelte" scheme="https://future-architect.github.io/tags/Svelte/"/>
    
    <category term="daisyUI" scheme="https://future-architect.github.io/tags/daisyUI/"/>
    
    <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>Step Functionsの動的並列処理をローカルで実行する</title>
    <link href="https://future-architect.github.io/articles/20220204a/"/>
    <id>https://future-architect.github.io/articles/20220204a/</id>
    <published>2022-02-03T15:00:00.000Z</published>
    <updated>2022-02-04T06:14:59.076Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220204a/eyecatch_stepfunctions.png" alt="" width="1003" height="498" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の宮永です。</p><p>今回はAWS Step Functionsの動的並列処理をローカルで実行する方法をハンズオン形式でまとめました。ソースコードはこちらに格納していますのでご参考にして下さい。</p><p><a href="https://github.com/orangekame3/stepfunctions-demo">https://github.com/orangekame3/stepfunctions-demo</a></p><blockquote><p>本記事は<a href="/articles/20220202a/">Pipenv+LocalStackで作るLambda開発環境</a>で作成したLambda関数をベースに実装しています。本記事の実装に取り組まれる方はこちらの記事が参考になると思います。</p></blockquote><h1 id="Step-Functionsとは"><a href="#Step-Functionsとは" class="headerlink" title="Step Functionsとは"></a>Step Functionsとは</h1><p>Step FunctionsとはAWSの各種リソースをオーケストレーションするサービスです。</p><p>類似のサービスに<a href="https://airflow.apache.org/">Airflow</a>等があります。AirflowとStep Functionsの比較をした<a href="/articles/20220111a/">多賀さんの記事</a>はとても読み応えたあるのでぜひご覧ください。</p><p>Step Functionsについては技術ブログでもこれまで取り扱っています。</p><ul><li><a href="/articles/20200515/">Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する</a></li><li><a href="https://qiita.com/kazuyuki_yamashita/items/cf36b98c5d2fa83b38bd">CloudWatch EventとLambdaでStepFunctions間のエラ－を伝搬する</a></li></ul><p>今回は<a href="/articles/20200515/">Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する</a>を参考にPythonとLocalStack(Docker)で動的並列処理を実装します。</p><h1 id="モチベーション"><a href="#モチベーション" class="headerlink" title="モチベーション"></a>モチベーション</h1><p>今回想定しているユースケースは「大規模データの集計作業をLambdaで実装する」というものです。</p><p>Lambdaの実行制限時間である15分を超えるであろう処理をStep Functionsを使ってうまく突破したいというのがモチベーションです。先程紹介した<a href="/articles/20200515/">Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する</a>には動的並列処理以外にもStep Functionsを応用したバッチ処理について幅広く言及しているため、一読されると良いかと思います。</p><h1 id="ハンズオンで構築するシステム"><a href="#ハンズオンで構築するシステム" class="headerlink" title="ハンズオンで構築するシステム"></a>ハンズオンで構築するシステム</h1><p>全体のシステム概要を記載した後に機能詳細を紹介します。</p><h2 id="システム構成図"><a href="#システム構成図" class="headerlink" title="システム構成図"></a>システム構成図</h2><p>今回構築するシステム構成図を以下に記載します。</p><p>画像左側はビジュアルワークフロー図と呼ばれるもので今回扱うStep Functionsの定義書から生成されます。画像右側はビジュアルワークフロー図に対応するシステムアーキテクチャ図です。</p><p>S3バケットからJSONを取得し、後続のLambdaでETL処理をします。</p><blockquote><p>余談ですが、Visual Studio Codeには<a href="https://aws.amazon.com/jp/visualstudiocode/">AWS Tool Kit</a>という拡張機能が存在します。</p></blockquote><p>こちらの拡張機能を利用すれば<a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-amazon-states-language.html">ステートメント言語</a>を下図のビジュアルワークフロー図のように可視化することができます。</p><img src="/images/20220204a/image.png" alt="ビジュアルワークフロー" width="1200" height="881" loading="lazy"><h2 id="実装するアプリの機能詳細"><a href="#実装するアプリの機能詳細" class="headerlink" title="実装するアプリの機能詳細"></a>実装するアプリの機能詳細</h2><p><a href="https://qiita.com/orangekame3/private/9abed652b26dd4eb1afd">こちらの記事</a>で実装しているLambda関数と同等の機能をもつシステムを実装します。<br>Scatter→Gatherに注目するとJSON→ExcelのETL処理を行っています。<br>S3バケットには予め以下の構造をもつJSONファイルを配置しておきます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;長野原 ひろし&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">58</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-05-16&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;001&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;般若 竜門&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">75</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-07-19&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;002&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;十河 アンナ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">57</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-09-06&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="ScatterLambda"><a href="#ScatterLambda" class="headerlink" title="ScatterLambda"></a>ScatterLambda</h2><p>ScatterLambdaでは上記のJSONファイルを取り込み、DataFrameに変換します。その後、DataFrameをSegmentLamdaが15分以内に処理できる単位に分割します。</p><p>分割したファイルはpikcleファイルでS3バケットに格納します。</p><h2 id="SegmentLambda"><a href="#SegmentLambda" class="headerlink" title="SegmentLambda"></a>SegmentLambda</h2><p>SegmentLambdaではScatterLambdaで分割されたpickleファイルを取り込みETL処理を行います。<br>今回行うETL処理を以下記載します。</p><ul><li>「ボーナスポイント」カラムの追加</li></ul><p>「ボーナスポイント」は以下の条件で決定します。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>【条件】</p>  <p>会員ランクが「4，5」の会員には「ポイント」×1.25倍のボーナスポイントを、会員ランク「1，2，3」の会員には「ポイント」と同等のボーナスポイントを付与することします。</p></div><p>上記の条件に従ってSegmentLambdaの処理前後のテーブルをまとめると以下のようになります。</p><p><strong>SegmentLambda処理前</strong></p><div class="scroll"><table><thead><tr><th align="left">会員番号</th><th align="left">名前</th><th align="left">会員ランク</th><th align="left">ポイント</th><th align="left">タイムスタンプ</th></tr></thead><tbody><tr><td align="left">000</td><td align="left">長野原 ひろし</td><td align="left">4</td><td align="left">58</td><td align="left">2021-05-16</td></tr><tr><td align="left">001</td><td align="left">般若 竜門</td><td align="left">2</td><td align="left">75</td><td align="left">2021-07-19</td></tr><tr><td align="left">002</td><td align="left">十河 アンナ</td><td align="left">2</td><td align="left">57</td><td align="left">2021-09-06</td></tr></tbody></table></div><p><strong>SegmentLambda処理後</strong></p><div class="scroll"><table><thead><tr><th align="left">会員番号</th><th align="left">名前</th><th align="left">会員ランク</th><th align="left">ポイント</th><th align="left">タイムスタンプ</th><th align="left">ボーナスポイント</th></tr></thead><tbody><tr><td align="left">000</td><td align="left">長野原 ひろし</td><td align="left">4</td><td align="left">58</td><td align="left">2021-05-16</td><td align="left">72.5</td></tr><tr><td align="left">001</td><td align="left">般若 竜門</td><td align="left">2</td><td align="left">75</td><td align="left">2021-07-19</td><td align="left">75</td></tr><tr><td align="left">002</td><td align="left">十河 アンナ</td><td align="left">2</td><td align="left">57</td><td align="left">2021-09-06</td><td align="left">57</td></tr></tbody></table></div><h2 id="GatherLambda"><a href="#GatherLambda" class="headerlink" title="GatherLambda"></a>GatherLambda</h2><p>GatherLambdaではSegmentLambdaでETL処理をされた各pickleファイルを取り込み、ひとつのExcelファイルを作成します。<br>作成したExcelファイルはS3バケットにアップロードして処理を終了します。</p><h1 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h1><p>開発に取り組む前に筆者の開発環境を記載します。記事中Linuxコマンドを使用している箇所があります。Windowsで開発される方はWSLを使用することをおすすめいたします。</p><ul><li>OS Ubuntu 20.04</li><li>Python(pyenv) 3.9</li><li>Pipenv</li><li>Docker</li><li>docker compose v2</li><li>AWS CLI v2</li></ul><h1 id="LocalStackの準備"><a href="#LocalStackの準備" class="headerlink" title="LocalStackの準備"></a>LocalStackの準備</h1><p>実装対象が決まったので早速開発環境の準備に取り掛かります。</p><p>AWS環境をローカルに用意するためにLocalStackを利用します。使用するのは以下２つのimageです。<br>なお、LocalStackの環境準備は<a href="https://dev.classmethod.jp/articles/stepfunctionslocal-localstack/">こちらの記事</a>を参考にさせていただきました。</p><ul><li><a href="https://hub.docker.com/r/localstack/localstack/">localstack</a></li><li><a href="https://hub.docker.com/r/amazon/aws-stepfunctions-local">stepfunctions</a></li></ul><p>それでは上記2つのimageを使用したdocker-compose.ymlを記述します。</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;$&#123;LOCALSTACK_DOCKER_NAME-localstack_main&#125;&quot;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATA_DIR=/tmp/localstack/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=lambda,s3,stepfunctions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LAMBDA_EXECUTOR=docker-reuse</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEFAULT_REGION=us-east-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEBUG=1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4566:4566&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/localstack:/tmp/localstack</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">stepfunctions:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">stepfunctions</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">amazon/aws-stepfunctions-local:latest</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">stepfunctions-credentials.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LAMBDA_ENDPOINT=http://localstack:4566</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">STEPFUNCTIONS_LAMBDA_ENDPOINT=http://host.docker.internal:4566</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8083:8083&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>stepfunctions</code>の<code>env_file</code>で環境変数を渡しています。<code>env_file</code>の中身を以下記載します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AWS_ACCOUNT_ID=test</span><br><span class="line">AWS_DEFAULT_REGION=us-east-1</span><br><span class="line">AWS_ACCESS_KEY_ID=test</span><br><span class="line">AWS_SECRET_ACCESS_KEY=test</span><br></pre></td></tr></table></figure><p>また、<code>DEBUG</code>オプションに<code>1</code>と選択することでLocalStackのログを細かく確認することができます。<br>Step Functionsを実行するときにはログも確認しながらデバッグするとよいと思います。</p><p>これでLocalStackの準備が整いました。<br>以下のコマンドを実行してコンテナが2つ起動していることを確認してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose up --build</span><br></pre></td></tr></table></figure><p>次にAWS CLIの設定を行います。</p><h1 id="AWS-CLIの設定"><a href="#AWS-CLIの設定" class="headerlink" title="AWS CLIの設定"></a>AWS CLIの設定</h1><p>AWS CLIでは認証情報などをプロファイルとして保存することができます。<br>AWS CLIをインストールされた方はご自身が使用しているOSのhomeディレクトリに<code>.aws</code>の隠しファルダがあります。(エクスプローラーなどで確認する場合は隠しフォルダを表示するように設定してください。)<code>.aws</code>フォルダ配下には.<code>config</code>と<br><code>.credentials</code>2つのファイルがありますのでそれぞれ以下のように設定してください。</p><p>参考:<a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-profiles.html">名前付きプロファイル</a></p><p>今回は以下のように<code>local</code>というプロファイルを作成しました。</p><figure class="highlight ini"><figcaption><span>config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[localstack]</span></span><br><span class="line"><span class="attr">region</span> = us-east-<span class="number">1</span></span><br><span class="line"><span class="attr">output</span> = json</span><br></pre></td></tr></table></figure><figure class="highlight ini"><figcaption><span>credentials</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[local]</span></span><br><span class="line"><span class="attr">aws_access_key_id</span> = test</span><br><span class="line"><span class="attr">aws_secret_access_key</span> = test</span><br></pre></td></tr></table></figure><p>次にLambdaの実装を行います。</p><h1 id="Lambdaの実装"><a href="#Lambdaの実装" class="headerlink" title="Lambdaの実装"></a>Lambdaの実装</h1><p>このあと、複数のファイルを作成するため、最終的なディレクトリ構造を先に記載します。<br>適宜参考にしてください。</p><details><summary>最終的なディレクトリ構造</summary><div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">├── README.md</span><br><span class="line">├── demo-gather</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── Pipfile</span><br><span class="line">│   ├── Pipfile.lock</span><br><span class="line">│   ├── bin</span><br><span class="line">│   │   └── lambda.zip</span><br><span class="line">│   ├── deploy-packages</span><br><span class="line">│   ├── gather.py</span><br><span class="line">│   ├── lambda.py</span><br><span class="line">│   ├── requirements.txt</span><br><span class="line">│   ├── result.log</span><br><span class="line">│   ├── setup.cfg</span><br><span class="line">│   └── tests</span><br><span class="line">├── demo-scatter</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── Pipfile</span><br><span class="line">│   ├── Pipfile.lock</span><br><span class="line">│   ├── bin</span><br><span class="line">│   │   └── lambda.zip</span><br><span class="line">│   ├── deploy-packages</span><br><span class="line">│   ├── lambda.py</span><br><span class="line">│   ├── requirements.txt</span><br><span class="line">│   ├── result.log</span><br><span class="line">│   ├── scatter.py</span><br><span class="line">│   ├── setup.cfg</span><br><span class="line">│   └── tmp.py</span><br><span class="line">├── demo-segment</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── Pipfile</span><br><span class="line">│   ├── Pipfile.lock</span><br><span class="line">│   ├── bin</span><br><span class="line">│   │   └── lambda.zip</span><br><span class="line">│   ├── deploy-packages</span><br><span class="line">│   ├── lambda.py</span><br><span class="line">│   ├── requirements.txt</span><br><span class="line">│   ├── result.log</span><br><span class="line">│   ├── segment.py</span><br><span class="line">│   ├── setup.cfg</span><br><span class="line">│   └── tests</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── test_segment.py</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── result</span><br><span class="line">│   └── test.xlsx</span><br><span class="line">├── state-machine</span><br><span class="line">│   └── parallel.json</span><br><span class="line">├── stepfunctions-credentials.env</span><br><span class="line">└── utils</span><br><span class="line">    ├── data</span><br><span class="line">    │   └── sample_data.json</span><br><span class="line">    └── utils.py</span><br><span class="line"></span><br><span class="line">15 directories, 39 files</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></details><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>ローカルマシンにPython3の環境が構築されていることを前提としています。<br>今回Lambdaの実装にはPythonを使用します。Pipenvを使用して各Lambda関数毎にプロジェクトを作成します。<br>Pipenvは以下のコマンドでインストールができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pipenv</span><br></pre></td></tr></table></figure><p>冒頭で記載しましたが、以前<a href="/articles/20220202a/">Pipenv+LocalStackで作るLambda開発環境</a>という記事を書かせていただきました。<br>今回は上記の記事で実装した内容を応用します。</p><p>記事ではLambdaの開発時使用するパッケージとデプロイ時のパッケージを分離することでデプロイ時のzipファイルの容量節約する方法を紹介しています。興味がある方はぜひご覧になってください。</p><p>今回は3つLambdaを作成しますので、以下のような構成でフォルダを作成してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── demo-gather</span><br><span class="line">├── demo-scatter</span><br><span class="line">└── demo-segment</span><br></pre></td></tr></table></figure><p>まずはdemo-scatterから開発環境を準備します。<br>Python環境は3.9を使用します。<br>demo-scatter配下で以下のコマンドを実行してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --python 3.9</span><br></pre></td></tr></table></figure><p>次に使用する外部モジュールをインストールします。<br>demo-scatterで使用するモジュールはpandasだけです。以下のコマンドを実行してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install pandas</span><br></pre></td></tr></table></figure><p>続いて開発環境で使用するパッケージをインストールします。以下のコマンドでpytestとmypyをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install pytest mypy --dev</span><br></pre></td></tr></table></figure><p>これでプロジェクト環境が整いました。他2つのプロジェクトも同様に環境を構築します。<br>それぞれ必要なモジュールを記載します。</p><ul><li>demo-segment<ul><li>pandas</li><li>pytest mypy (–dev)</li></ul></li><li>demo-gather<ul><li>pandas</li><li>xlwt</li><li>xlsxwriter</li><li>pytest mypy (–dev)</li></ul></li></ul><p>それではScatterLambdaからロジックの実装をします。</p><h2 id="ScatterLambda-1"><a href="#ScatterLambda-1" class="headerlink" title="ScatterLambda"></a>ScatterLambda</h2><p>demo-scatter配下に以下2つのファイルを作成します。</p><ul><li>scatter.py</li><li>lambda.py</li></ul><p>機能のほとんどはscatter.pyに記述し、lambda.pyではハンドラを呼び出すのみにします。<br>以下、lambda.pyです。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> scatter <span class="keyword">import</span> ScatterHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getenv(<span class="string">&quot;LOCALSTACK_HOSTNAME&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    s3 = boto3.client(<span class="string">&quot;s3&quot;</span>, <span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    endpoint = <span class="string">f&quot;http://<span class="subst">&#123;os.environ[<span class="string">&#x27;LOCALSTACK_HOSTNAME&#x27;</span>]&#125;</span>:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">    handler = ScatterHandler(</span><br><span class="line">        event,</span><br><span class="line">        context,</span><br><span class="line">        s3,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> handler.main()</span><br></pre></td></tr></table></figure><p>ScatterLambdaでは、ファイルの分割を行います。</p><figure class="highlight python"><figcaption><span>scatter.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScatterHandler</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        event,</span></span></span><br><span class="line"><span class="params"><span class="function">        context,</span></span></span><br><span class="line"><span class="params"><span class="function">        s3,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        self.event = event</span><br><span class="line">        self.context = context</span><br><span class="line">        self.s3 = s3</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">            data_path = self.event[<span class="string">&quot;input_obj&quot;</span>]</span><br><span class="line">            division_number = <span class="number">10</span></span><br><span class="line">            segments: <span class="type">Dict</span> = &#123;&#125;</span><br><span class="line">            segments[<span class="string">&quot;segment_definitions&quot;</span>] = []</span><br><span class="line">            data = self.get_s3_data(bucket, data_path)</span><br><span class="line">            df = self.make_df(data)</span><br><span class="line">            dfs = [</span><br><span class="line">                df.loc[i : i + division_number - <span class="number">1</span>, :]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(df), division_number)</span><br><span class="line">            ]</span><br><span class="line">            segments = self.make_segment_df(segments, bucket, dfs)</span><br><span class="line">            <span class="keyword">return</span> segments</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.exception(e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_s3_data</span>(<span class="params">self, bucket: <span class="built_in">str</span>, key: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">dict</span>]:</span></span><br><span class="line">        resp = self.s3.get_object(Bucket=bucket, Key=key)</span><br><span class="line">        body = resp[<span class="string">&quot;Body&quot;</span>].read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        json_dict: <span class="type">List</span>[<span class="built_in">dict</span>] = json.loads(body)</span><br><span class="line">        <span class="keyword">return</span> json_dict</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_df</span>(<span class="params">self, data: <span class="built_in">list</span></span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        df = pd.DataFrame.from_dict(data)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_segment_df</span>(<span class="params">self, segments: <span class="built_in">dict</span>, bucket: <span class="built_in">str</span>, dfs: <span class="built_in">list</span></span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i, df_i <span class="keyword">in</span> <span class="built_in">enumerate</span>(dfs):</span><br><span class="line">            <span class="keyword">with</span> tempfile.TemporaryFile() <span class="keyword">as</span> fp:</span><br><span class="line">                df_i.to_pickle(fp)</span><br><span class="line">                fp.seek(<span class="number">0</span>)</span><br><span class="line">                fsend = <span class="string">&quot;scatter/job_&quot;</span> + <span class="built_in">str</span>(i).zfill(<span class="number">3</span>) + <span class="string">&quot;.pkl&quot;</span></span><br><span class="line">                self.s3.put_object(</span><br><span class="line">                    Body=fp.read(),</span><br><span class="line">                    Bucket=bucket,</span><br><span class="line">                    Key=fsend,</span><br><span class="line">                )</span><br><span class="line">                segments[<span class="string">&quot;segment_definitions&quot;</span>].append(fsend)</span><br><span class="line">        <span class="keyword">return</span> segments</span><br></pre></td></tr></table></figure><p>test-bucketに格納されたsample.jsonを取得して、pandasでDataFrameに変換します。変換後はpickleファイルで保存することでSegmentLambdaでの読み込み処理を高速化しています。<br>関数の戻り値はS3のオブジェクトキーの一覧です。<code>segment_definitions</code>をキーとした辞書にリストして格納しています。</p><h2 id="SegmentLambda-1"><a href="#SegmentLambda-1" class="headerlink" title="SegmentLambda"></a>SegmentLambda</h2><p>SegmentLambdaでETL処理を行います。ETL処理時の条件を再度記載します。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>【条件】</p>  <p>会員ランクが「4，5」の会員には「ポイント」×1.25倍のボーナスポイントを、会員ランク「1，2，3」の会員には「ポイント」と同等のボーナスポイントを付与することします。</p></div><p>上記の条件を実装した<code>segment.py</code>を以下記載します。</p><figure class="highlight python"><figcaption><span>segment.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentHandler</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, event, context, s3</span>):</span></span><br><span class="line">        self.event = event</span><br><span class="line">        self.context = context</span><br><span class="line">        self.s3 = s3</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">            recieve = self.event</span><br><span class="line">            send = recieve.replace(<span class="string">&quot;scatter&quot;</span>, <span class="string">&quot;gather&quot;</span>)</span><br><span class="line">            df = self.get_s3_data(bucket, recieve)</span><br><span class="line">            df = self.process(df)</span><br><span class="line">            <span class="keyword">return</span> self.send_segment_df(df, bucket, send)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.exception(e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_s3_data</span>(<span class="params">self, bucket, key</span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        resp = self.s3.get_object(Bucket=bucket, Key=key)</span><br><span class="line">        body = resp[<span class="string">&quot;Body&quot;</span>].read()</span><br><span class="line">        df = pickle.loads(body)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">self, row</span>):</span></span><br><span class="line">        <span class="keyword">if</span> row[<span class="string">&quot;会員ランク&quot;</span>] &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> row[<span class="string">&quot;ポイント&quot;</span>] * <span class="number">1.25</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> row[<span class="string">&quot;ポイント&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span>(<span class="params">self, data: pd.DataFrame</span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        data[<span class="string">&quot;ボーナスポイント&quot;</span>] = data.apply(self.calc, axis=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_df</span>(<span class="params">self, data: <span class="built_in">list</span></span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        df = pd.DataFrame.from_dict(data)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_segment_df</span>(<span class="params">self, df: pd.DataFrame, bucket: <span class="built_in">str</span>, send: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">with</span> tempfile.TemporaryFile() <span class="keyword">as</span> fp:</span><br><span class="line">            df.to_pickle(fp)</span><br><span class="line">            fp.seek(<span class="number">0</span>)</span><br><span class="line">            self.s3.put_object(</span><br><span class="line">                Body=fp.read(),</span><br><span class="line">                Bucket=bucket,</span><br><span class="line">                Key=send,</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> send</span><br></pre></td></tr></table></figure><p>ScatterLambdaと同様にsegment.pyで定義したハンドラを呼ぶlambda.pyを以下のように作成します。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> segment <span class="keyword">import</span> SegmentHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getenv(<span class="string">&quot;LOCALSTACK_HOSTNAME&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    s3 = boto3.client(<span class="string">&quot;s3&quot;</span>, <span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    endpoint = <span class="string">f&quot;http://<span class="subst">&#123;os.environ[<span class="string">&#x27;LOCALSTACK_HOSTNAME&#x27;</span>]&#125;</span>:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    handler = SegmentHandler(event, context, s3)</span><br><span class="line">    <span class="keyword">return</span> handler.main()</span><br></pre></td></tr></table></figure><h2 id="GatherLambda-1"><a href="#GatherLambda-1" class="headerlink" title="GatherLambda"></a>GatherLambda</h2><p>最後にSegmentLambdaでETL処理をしたDataFrameを取り込み、一つのExcelファイルにまとめるGatherLambdaを実装します。<br>こちらもScatterLambda、SegmentLamdaと同様にハンドラを記載したgather.pyとハンドラを呼ぶlambda.pyを作成します。</p><p>gather.pyは以下のようになります。</p><figure class="highlight python"><figcaption><span>gather.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GatherHandler</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, event, context, s3</span>):</span></span><br><span class="line">        self.event = event</span><br><span class="line">        self.context = context</span><br><span class="line">        self.s3 = s3</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">            segments = self.event[<span class="string">&quot;segment_results&quot;</span>]</span><br><span class="line">            send = <span class="string">&quot;test.xlsx&quot;</span></span><br><span class="line">            data_frames: <span class="type">List</span>[pd.DataFrame] = []</span><br><span class="line">            <span class="keyword">for</span> pkl <span class="keyword">in</span> segments:</span><br><span class="line">                df = self.get_s3_df(bucket, pkl)</span><br><span class="line">                data_frames.append(df)</span><br><span class="line">            df_gather = pd.concat(data_frames)</span><br><span class="line">            <span class="keyword">return</span> self.send_excel(df_gather, bucket, send)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.exception(e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_s3_df</span>(<span class="params">self, bucket, key</span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        resp = self.s3.get_object(Bucket=bucket, Key=key)</span><br><span class="line">        body = resp[<span class="string">&quot;Body&quot;</span>].read()</span><br><span class="line">        df = pickle.loads(body)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_excel</span>(<span class="params">self, df: pd.DataFrame, bucket: <span class="built_in">str</span>, send: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">with</span> tempfile.TemporaryFile() <span class="keyword">as</span> fp:</span><br><span class="line">            writer = pd.ExcelWriter(fp, engine=<span class="string">&quot;xlsxwriter&quot;</span>)</span><br><span class="line">            df.to_excel(writer, sheet_name=<span class="string">&quot;Sheet1&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line">            writer.save()</span><br><span class="line">            fp.seek(<span class="number">0</span>)</span><br><span class="line">            self.s3.put_object(</span><br><span class="line">                Body=fp.read(),</span><br><span class="line">                Bucket=bucket,</span><br><span class="line">                Key=send,</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> send</span><br></pre></td></tr></table></figure><p>gather.pyで定義したハンドラを呼ぶlambda.pyを以下に記載します。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> gather <span class="keyword">import</span> GatherHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getenv(<span class="string">&quot;LOCALSTACK_HOSTNAME&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    s3 = boto3.client(<span class="string">&quot;s3&quot;</span>, <span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    endpoint = <span class="string">f&quot;http://<span class="subst">&#123;os.environ[<span class="string">&#x27;LOCALSTACK_HOSTNAME&#x27;</span>]&#125;</span>:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    handler = GatherHandler(event, context, s3)</span><br><span class="line">    <span class="keyword">return</span> handler.main()</span><br></pre></td></tr></table></figure><h1 id="LocalStackへのデプロイ"><a href="#LocalStackへのデプロイ" class="headerlink" title="LocalStackへのデプロイ"></a>LocalStackへのデプロイ</h1><p>それでは作成したそれぞれのLambda関数をLocalStackにデプロイします。<br>デプロイの方法は先程紹介した<a href="https://qiita.com/orangekame3/private/9abed652b26dd4eb1afd">こちらの記事</a>にまとめた方法を採用します。各Lambda関数のディレクトリ内に以下のようなMakefileを作成します。<br>以下はdemo-scatter内のMakefileの例です。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean zip  delete cretae update</span></span><br><span class="line">PROJECT_DIR=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">DEPLOY_PACKAGES_DIR=deploy-packages</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf ./bin/*</span><br><span class="line"></span><br><span class="line"><span class="section">zip:clean</span></span><br><span class="line">pipenv run mypy</span><br><span class="line">pipenv lock -r &gt;requirements.txt</span><br><span class="line">pipenv run pip install -r requirements.txt --target <span class="variable">$(DEPLOY_PACKAGES_DIR)</span></span><br><span class="line">@echo <span class="string">&quot;Project Location: <span class="variable">$(PROJECT_DIR)</span>&quot;</span></span><br><span class="line">@echo <span class="string">&quot;Library Location: <span class="variable">$(DEPLOY_PACKAGES_DIR)</span>&quot;</span></span><br><span class="line">cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -rf __pycache__ &amp;&amp; zip -r <span class="variable">$(PROJECT_DIR)</span>/bin/lambda.zip *</span><br><span class="line">cd <span class="variable">$(PROJECT_DIR)</span> &amp;&amp; zip -g ./bin/lambda.zip lambda.py scatter.py</span><br><span class="line">find ./bin/lambda.zip</span><br><span class="line">cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -r *</span><br><span class="line"></span><br><span class="line"><span class="section">delete:</span></span><br><span class="line">aws --endpoint-url=http://localhost:4566 \</span><br><span class="line">    --region us-east-1 --profile localstack lambda delete-function \</span><br><span class="line">    --function-name=scatter-lambda</span><br><span class="line"></span><br><span class="line"><span class="section">create:</span></span><br><span class="line">aws lambda create-function \</span><br><span class="line">    --function-name=scatter-lambda \</span><br><span class="line">    --runtime=python3.9 \</span><br><span class="line">    --role=DummyRole \</span><br><span class="line">    --handler=lambda.lambda_handler \</span><br><span class="line">    --zip-file fileb://./bin/lambda.zip \</span><br><span class="line">--region us-east-1 \</span><br><span class="line">    --endpoint-url=http://localhost:4566</span><br><span class="line"></span><br><span class="line"><span class="section">update:</span></span><br><span class="line">aws lambda update-function-code \</span><br><span class="line">    --function-name=scatter-lambda \</span><br><span class="line">    --zip-file fileb://./bin/lambda.zip \</span><br><span class="line">--region us-east-1 \</span><br><span class="line">    --endpoint-url=http://localhost:4566</span><br></pre></td></tr></table></figure><p>上記と同等の内容のMakefileをdemo-segmet及びdemo-gatherにも作成してください。(<code>function-name</code>とzipコマンド部のscatter.pyは適宜変更してください)</p><p>すべての関数内にMakefileを作成したらプロジェクトルートにもMakefileを作成します。<br>プロジェクトルートに作成するMakefileは以下のようにします。</p><figure class="highlight sh"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">.PHONY: zip delete create update invoke <span class="built_in">log</span> download stepfunction <span class="built_in">test</span> json</span><br><span class="line">zip:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile zip --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile zip --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile zip --no-print-directory</span><br><span class="line"></span><br><span class="line">delete:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile delete --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile delete --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile delete --no-print-directory</span><br><span class="line"></span><br><span class="line">create:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile create --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile create --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile create --no-print-directory</span><br><span class="line"></span><br><span class="line">update:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile update --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile update --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile update --no-print-directory</span><br><span class="line"></span><br><span class="line">invoke:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile invoke-local --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile invoke-local --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile invoke-local --no-print-directory</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span>:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile <span class="built_in">log</span> --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile <span class="built_in">log</span> --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile <span class="built_in">log</span> --no-print-directory</span><br><span class="line"></span><br><span class="line">download:</span><br><span class="line">aws s3 --endpoint-url=http://localhost:4566 \</span><br><span class="line">cp s3://test-bucket/ ./result --exclude <span class="string">&quot;*&quot;</span> \</span><br><span class="line">--include <span class="string">&quot;*.xlsx&quot;</span> --recursive</span><br><span class="line"></span><br><span class="line">bucket:</span><br><span class="line">aws s3 mb s3://test-bucket \</span><br><span class="line">--endpoint-url=http://localhost:4566 \</span><br><span class="line">--profile localstack</span><br><span class="line"></span><br><span class="line">stepfunctions:</span><br><span class="line">aws stepfunctions create-state-machine \</span><br><span class="line">--name Aggregate \</span><br><span class="line">--definition file://state-machine/parallel.json \</span><br><span class="line">--role-arn <span class="string">&quot;arn:aws:iam::000000000000:role/DummyRole&quot;</span> \</span><br><span class="line">--endpoint http://localhost:4566</span><br><span class="line"></span><br><span class="line">aws stepfunctions start-execution \</span><br><span class="line">--state-machine arn:aws:states:us-east-1:000000000000:stateMachine:Aggregate \</span><br><span class="line">--endpoint http://localhost:4566</span><br><span class="line"></span><br><span class="line">aws stepfunctions delete-state-machine \</span><br><span class="line">--state-machine-arn <span class="string">&quot;arn:aws:states:us-east-1:000000000000:stateMachine:Aggregate&quot;</span> \</span><br><span class="line">--endpoint=http://localhost:4566</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile <span class="built_in">test</span> --no-print-directory</span><br><span class="line"></span><br><span class="line">json:</span><br><span class="line">python utils/utils.py 1000</span><br></pre></td></tr></table></figure><p>プロジェクトルートに配置するMakefileでは各プロジェクトフォルダで定義されたMakefileを利用しています。<br>それでは、プロジェクトルート直下で以下のコマンドを実行してScatterLambda、SegmentLambda、GatherLambdaのすべてをzipファイル化します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make zip</span><br></pre></td></tr></table></figure><p>zip化が完了していれば各ファルダのbinフォルダにlambda.zipが生成されているはずです。</p><h1 id="Step-Functionsの準備"><a href="#Step-Functionsの準備" class="headerlink" title="Step Functionsの準備"></a>Step Functionsの準備</h1><h2 id="Amazonステートメント言語"><a href="#Amazonステートメント言語" class="headerlink" title="Amazonステートメント言語"></a>Amazonステートメント言語</h2><p>Step Functionsでは各種リソースのオーケストレーション（状態管理）JSON形式のファイルで行います。<br>今回採用したスキャッターギャザーメッセージングパターン（分散して集約するようなパターン）は冒頭に紹介した<a href="/articles/20200515/">記事</a>をほぼそのまま転用させていただきました。<br>ScatterLambdaの<code>event</code>に引数を渡すため一部追加しています。<br>以下、今回使用するステートマシンの定義書であるprallel.jsonです。</p><figure class="highlight json"><figcaption><span>parallel.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;StartAt&quot;</span>: <span class="string">&quot;ScatterLambda&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;States&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ScatterLambda&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;Task&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:lambda:us-east-1:000000000000:function:scatter-lambda&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Parameters&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;input_obj&quot;</span>: <span class="string">&quot;test.json&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;Next&quot;</span>: <span class="string">&quot;ProcessAllSegments&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;ProcessAllSegments&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;Map&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;InputPath&quot;</span>: <span class="string">&quot;$.segment_definitions&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;ItemsPath&quot;</span>: <span class="string">&quot;$&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;MaxConcurrency&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;Iterator&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;StartAt&quot;</span>: <span class="string">&quot;SegmentLambda&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;States&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;SegmentLambda&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;Task&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:lambda:us-east-1:000000000000:function:segment-lambda&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;End&quot;</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;ResultPath&quot;</span>: <span class="string">&quot;$.segment_results&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Next&quot;</span>: <span class="string">&quot;GatherLambda&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;GatherLambda&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;Task&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;InputPath&quot;</span>: <span class="string">&quot;$&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:lambda:us-east-1:000000000000:function:gather-lambda&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;End&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定義書の詳細については<a href="/articles/20200515/">元記事</a>を参考にしてください。ここで注目していただきたいのは<code>InputPath</code>と<code>ResultPath</code>です。ここに宣言した<code>segment_definitions</code>と<code>segment_results</code>というパラメータをキーとして、次のLambdaに渡すデータをフィルタリングしています。</p><p>そのため、ScatterLambdaでの返り値はSegmentLambdaに渡したい配列のキーを<code>segment_definitions</code>とし、Gatherでは<code>segment_results</code>をキーに持つ要素を参照します。返り値はJSONにdumpする必要はなく、辞書型で値を渡します。</p><h2 id="テストデータの準備"><a href="#テストデータの準備" class="headerlink" title="テストデータの準備"></a>テストデータの準備</h2><p>各Lambda関数のデプロイが完了し、ステートマシンの定義も完成しました。あとはStep Functionsの生成と実行をするだけです。<br>ステートマシンをLocalStackに作成する前に今回使用するテストデータを生成します。<br>テストデータはtest-bucket/test.jsonに格納します。<br>以下、テストデータを生成するPythonスクリプトです。utilsフォルダ配下に作成してください。</p><figure class="highlight python"><figcaption><span>utils.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> fire <span class="keyword">import</span> Fire</span><br><span class="line"><span class="keyword">from</span> mimesis <span class="keyword">import</span> Person</span><br><span class="line"><span class="keyword">from</span> mimesis.locales <span class="keyword">import</span> Locale</span><br><span class="line"></span><br><span class="line">person = Person(Locale.JA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dummy_data</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">str</span>(num).zfill(<span class="number">3</span>)</span><br><span class="line">    date = datetime.date(<span class="number">2021</span>, randint(<span class="number">1</span>, <span class="number">12</span>), randint(<span class="number">1</span>, <span class="number">28</span>)).strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">    dummy_dict = &#123;</span><br><span class="line">        <span class="string">&quot;会員番号&quot;</span>: <span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&quot;名前&quot;</span>: person.full_name(reverse=<span class="literal">True</span>),</span><br><span class="line">        <span class="string">&quot;会員ランク&quot;</span>: randint(<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="string">&quot;ポイント&quot;</span>: randint(<span class="number">50</span>, <span class="number">100</span>),</span><br><span class="line">        <span class="string">&quot;タイムスタンプ&quot;</span>: date,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_json</span>(<span class="params">s3, sample_data: <span class="built_in">list</span>, bucket: <span class="built_in">str</span>, send: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;utils/data/sample_data.json&quot;</span>, mode=<span class="string">&quot;wt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(sample_data, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line">    s3.put_object(</span><br><span class="line">        Body=json.dumps(sample_data, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>),</span><br><span class="line">        Bucket=bucket,</span><br><span class="line">        Key=send,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> send</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_dummy_data</span>(<span class="params">k</span>) -&gt; <span class="built_in">list</span>:</span></span><br><span class="line">    sample_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        sample_data.append(dummy_data(i))</span><br><span class="line">    <span class="keyword">return</span> sample_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">iterate_num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    endpoint = <span class="string">f&quot;http://localhost:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">    send = <span class="string">&quot;test.json&quot;</span></span><br><span class="line">    sample_data = make_dummy_data(iterate_num)</span><br><span class="line">    send = send_json(s3, sample_data, bucket, send)</span><br><span class="line">    <span class="keyword">return</span> send</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Fire(main)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>テストデータをLocalStack上のS3バケットに格納します。<br>プロジェクトルートに戻って以下コマンドを実行します。必要なコマンドはすでにMakefileに記載してあります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make buket</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make json</span><br></pre></td></tr></table></figure><p>これでLocalStackのS3バケット上にtest.jsonが作成されました。</p><h1 id="Step-Functionsの実行"><a href="#Step-Functionsの実行" class="headerlink" title="Step Functionsの実行"></a>Step Functionsの実行</h1><p>それではStep Functiionsを実行します。<br>プロジェクトルートで以下のコマンドを実行してください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make stepfunctions</span><br></pre></td></tr></table></figure><p>実行するとLocalStackのログで各Lambdaが処理を開始しているのを確認できます。<br>ターミナルの右反面でステートマシンの作成、実行、消去を行っています。<br>ターミナルの左半面はLocalStackで書き出されるログです。<br>よく見るとScatterLambdaで後続のSegmentLambdaに渡した<code>segment_definitions</code>や、<code>segment_results</code>なども出力されていることがわかります。<br>ログを確認したい方はコンテナ起動時に<code>-d</code>オプションを付けずに起動してください。<br>また<code>dockcer-compose.yml</code>の<code>DEBUG</code>オプションを<code>1</code>とすることで画像のようにタスク定義なども確認できます。</p><img src="/images/20220204a/stepfunctions.gif" alt="stepfunctions" width="1200" height="629" loading="lazy"><p>demo-gatherによってアップロードされたエクセルファイルをローカルにダウンロードしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make download</span><br></pre></td></tr></table></figure><p>downloadに成功していればプロジェクトプロジェクトルート直下にresultフォルダが生成されtest.xlsxが生成されていると思います。</p><img src="/images/20220204a/image_2.png" alt="image.png" width="1200" height="676" loading="lazy"><p>想定通りの出力が得られましたね🎉<br>今回はデモなので処理もステップ数も大したことはありません。<br>より大規模な処理が必要となるときStep Functionsでうまく分散することでLambdaで超えられない壁を突破することができるようになります。</p><p>それでは、今回はここまでとしたいと思います。</p><p>今回作成したスクリプトはこちらに格納してます。</p><p><a href="https://github.com/orangekame3/stepfunctions-demo">https://github.com/orangekame3/stepfunctions-demo</a></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>いかがでしたでしょうか、Step Functionsでは性質上、複数のリソースを連動させて処理を行います。デバッグの都度リソースをデプロイをするのはかなりの労力を伴うのでローカル環境で動作確認を行えるのはとても良いですね。</p><p>今回はLambdaの並列実行でしたが、様々な用途に応用が期待できそうです。<br>長くなりましたが、最後まで読んでいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220204a/eyecatch_stepfunctions.png&quot; alt=&quot;&quot; width=&quot;1003&quot; height=&quot;498&quot; loading=&quot;lazy&quot;&gt;



&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="LocalStack" scheme="https://future-architect.github.io/tags/LocalStack/"/>
    
    <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
    <category term="StepFunctions" scheme="https://future-architect.github.io/tags/StepFunctions/"/>
    
    <category term="Pipenv" scheme="https://future-architect.github.io/tags/Pipenv/"/>
    
  </entry>
  
  <entry>
    <title>Goのnet/httpパッケージに出てくるTemporary()がなにか調べた</title>
    <link href="https://future-architect.github.io/articles/20220203a/"/>
    <id>https://future-architect.github.io/articles/20220203a/</id>
    <published>2022-02-02T15:00:00.000Z</published>
    <updated>2022-02-03T01:25:06.155Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220203a/top.png" alt="" width="500" height="208" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。net/httpパッケージには非常にお世話になっています。Goの net/httpの内部にはサーバー/クライアントの両方が含まれていますが、今回はクライアントサイドの話です。</p><p><a href="https://future-architect.github.io/articles/20211026a/">TCPレベルの接続エラーの調査</a>のために標準パッケージやサードパーティのライブラリのコードを読み込んでいくと、Temporary() 関数だけをもった temporary インターフェースが登場します。HTTP周りでtemporaryと聞くと、 307 Temporary Redirect のステータスコードのことかと思いますが、ちょっと違いそうです。どういったものでどういった場合に出てくるのか、調べました。</p><h2 id="Temporary-とは"><a href="#Temporary-とは" class="headerlink" title="Temporary()とは"></a>Temporary()とは</h2><p>Temporary()はnet/http パッケージなどのコードを見ていると出てくる関数です。プライベートなインターフェースがあちこちのパッケージや呼び出し元のライブラリでつくられています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> temporary <span class="keyword">interface</span> &#123;</span><br><span class="line">Temporary() <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例えば次のhttpErrorはtemporaryインターフェースを満たし、常にtrueを返すように実装されています。</p><figure class="highlight go"><figcaption><span>transport.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> httpError <span class="keyword">struct</span> &#123;</span><br><span class="line">err     <span class="keyword">string</span></span><br><span class="line">timeout <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *httpError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span>   &#123; <span class="keyword">return</span> e.err &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *httpError)</span> <span class="title">Timeout</span><span class="params">()</span> <span class="title">bool</span></span>   &#123; <span class="keyword">return</span> e.timeout &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *httpError)</span> <span class="title">Temporary</span><span class="params">()</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;  <span class="comment">//  常に true を返しているが..？</span></span><br></pre></td></tr></table></figure><p>netパッケージのOpErrorもtemporaryインターフェースを満たし、Temporary()関数にはロジックが結構が入っています。</p><figure class="highlight go"><figcaption><span>net.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *OpError)</span> <span class="title">Temporary</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// Treat ECONNRESET and ECONNABORTED as temporary errors when</span></span><br><span class="line"><span class="comment">// they come from calling accept. See issue 6163.</span></span><br><span class="line"><span class="keyword">if</span> e.Op == <span class="string">&quot;accept&quot;</span> &amp;&amp; isConnError(e.Err) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ne, ok := e.Err.(*os.SyscallError); ok &#123;</span><br><span class="line">t, ok := ne.Err.(temporary)</span><br><span class="line"><span class="keyword">return</span> ok &amp;&amp; t.Temporary()</span><br><span class="line">&#125;</span><br><span class="line">t, ok := e.Err.(temporary)</span><br><span class="line"><span class="keyword">return</span> ok &amp;&amp; t.Temporary()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AWS SDK for GoにもorigiErrがtemporaryインターフェース(Temporary() boolの関数)を満たしていて、かつTemporary()の結果がtrueの場合はリトライする、みたいな実装がよくあります。</p><figure class="highlight go"><figcaption><span>retryer.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AWS SDK for Goのretyer.goの例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shouldRetryError</span><span class="params">(origErr error)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> err := origErr.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"><span class="keyword">case</span> temporary:</span><br><span class="line"><span class="keyword">if</span> netErr, ok := err.(*net.OpError); ok &amp;&amp; netErr.Op == <span class="string">&quot;dial&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If the error is temporary, we want to allow continuation of the</span></span><br><span class="line"><span class="comment">// retry process</span></span><br><span class="line"><span class="keyword">return</span> err.Temporary() || isErrConnectionReset(origErr) <span class="comment">// Temporary()がtrueの場合はリトライするのはなぜ？</span></span><br></pre></td></tr></table></figure><p>どういったルールでtrue/falseになって、どのように使われるべきなんでしょうか。</p><h2 id="Temporary-の使い方"><a href="#Temporary-の使い方" class="headerlink" title="Temporary() の使い方"></a>Temporary() の使い方</h2><p>go.devの<a href="https://go.dev/blog/error-handling-and-go">Error handling and Go</a> にドンピシャな説明が書いてありました（本来はエラーハンドリングの説明ですが）。</p><figure class="highlight go"><figcaption><span>net.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Error <span class="keyword">interface</span> &#123;</span><br><span class="line">    error</span><br><span class="line">    Timeout() <span class="keyword">bool</span>   <span class="comment">// Is the error a timeout?</span></span><br><span class="line">    Temporary() <span class="keyword">bool</span> <span class="comment">// Is the error temporary?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このerrorは、Temporary()を呼ぶことで、一時的なネットワークエラーと永続的なネットワークエラーを区別するために用意されたようです。例えばWebクローラーは、一時的なエラーが発生したときにスリープして再試行し、それ以外の場合はあきらめるといった使い方に利用できるとのこと。サンプルコードも付いていました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> nerr, ok := err.(net.Error); ok &amp;&amp; nerr.Temporary() &#123;</span><br><span class="line">    time.Sleep(<span class="number">1e9</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ということで、Temporary() は日本語訳そのままで、一時的なエラー（リトライすると成功するかも）かどうかを区別するために用意されたものでした。例えばURLが無効であるとかクライアントサイドの指定の問題は、何回繰り返しても成功することは無いのでTemporary() はfalseを返すべきだということです。</p><p>例を探すとIPアドレスのパースに失敗したときに呼ばれるnetパッケージのParseErrorはTemporary()を常にfalseを返していました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A ParseError is the error type of literal network address parsers.</span></span><br><span class="line"><span class="keyword">type</span> ParseError <span class="keyword">struct</span> &#123;</span><br><span class="line">Type <span class="keyword">string</span></span><br><span class="line">Text <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ParseError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">&quot;invalid &quot;</span> + e.Type + <span class="string">&quot;: &quot;</span> + e.Text &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ParseError)</span> <span class="title">Timeout</span><span class="params">()</span> <span class="title">bool</span></span>   &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ParseError)</span> <span class="title">Temporary</span><span class="params">()</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;  <span class="comment">// IPアドレスのパース失敗時は同じ値を何度繰り返しても成功することは無いので、毎回false</span></span><br></pre></td></tr></table></figure><p>最初に説明したhttpErrorはクライアント側で指定した時間に対してタイムアウトしたときに利用されていたため、再試行で成功する可能性があるためtrueが返されるのだと思います。OpErrorはシステムコール側の処理でのエラーハンドリング結果に移譲していますが、ECONNRESET(connection reset by peer)やアボートされたときはリトライの余地がありと判定しtrueを返しています。</p><h2 id="もはや非推奨である"><a href="#もはや非推奨である" class="headerlink" title="もはや非推奨である"></a>もはや非推奨である</h2><p>ここまでTemporary()について説明してきましたが、netパッケージのErrorでは（おそらく）Go 1.18からのように書かれます。Deprecated（非推奨）になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An Error represents a network error.</span></span><br><span class="line"><span class="keyword">type</span> Error <span class="keyword">interface</span> &#123;</span><br><span class="line">error</span><br><span class="line">Timeout() <span class="keyword">bool</span> <span class="comment">// Is the error a timeout?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Deprecated: Temporary errors are not well-defined.</span></span><br><span class="line"><span class="comment">// Most &quot;temporary&quot; errors are timeouts, and the few exceptions are surprising.</span></span><br><span class="line"><span class="comment">// Do not use this method.</span></span><br><span class="line">Temporary() <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/issues/32463">net: deprecate Temporary error status #45729</a>に理由が書かれています。 Timeout()はわかりやすいけど、Temporary()は何が一時的で何が永続的なのかの区別が明確じゃなく、本来別の表現で区別されるものもTemporary()として扱われてしまっているのでは無いかということ。Timeout()で区別がつけるものはそちらを使いましょうということかと思います。（これだとECONNRESET, ECONNABORTEDが表現できない気がしますが…）</p><p>ちなみに、<a href="https://github.com/golang/go/issues/32463">os: remove ErrTemporary in Go 1.13 #32463</a> にあるように、 <code>os.ErrTemporary</code> は削除されたようです。</p><h2 id="Temporary-の判定方法"><a href="#Temporary-の判定方法" class="headerlink" title="Temporary()の判定方法"></a>Temporary()の判定方法</h2><p>Temporary()の判定にはType Switchしたり、次のようなerrors.As()を使って判定することが多かったかと思います。</p><figure class="highlight go"><figcaption><span>繰り返されるボイラーコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> temporary <span class="keyword">interface</span> &#123; Temporary() <span class="keyword">bool</span> &#125;</span><br><span class="line"><span class="keyword">var</span> terr temporary</span><br><span class="line"><span class="keyword">if</span> errors.As(err, &amp;terr) &amp;&amp; terr.Temporary() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この辺は標準パッケージ側でヘルパー関数を作ったら？という提案が<a href="https://github.com/golang/go/issues/37250">proposal: errors: add new function Temporary(error) bool</a>出ています。期待ですねと言いたいところですが、Temporary() の立ち位置自体が先程説明したようにちょっと微妙であるため、その結果次第ですがおそらく追加されることは無さそうです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>Temporary()は一時的なエラーであるかどうかを示し、リトライで成功する可能性がある場合にtrueを返す</li><li>例えば、タイムアウトやTCP通信でコネクションリセットなどを返されたときにtrueになる</li><li>とは言え、Temporary()の使い分けのハッキリとした定義が難しく、位置づけがTimeout()と被ることもあり非推奨の方向で進んでいる</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220203a/top.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;208&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.18" scheme="https://future-architect.github.io/tags/Go1-18/"/>
    
    <category term="ソースコードリーディング" scheme="https://future-architect.github.io/tags/%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>Pipenv+LocalStackで作るLambda開発環境</title>
    <link href="https://future-architect.github.io/articles/20220202a/"/>
    <id>https://future-architect.github.io/articles/20220202a/</id>
    <published>2022-02-01T15:00:00.000Z</published>
    <updated>2022-02-02T03:59:10.143Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220202a/eyecatch.png" alt="" width="969" height="484" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の宮永です。<br>PipenvとLocalStackを使用したLambda開発環境の構築を紹介します。</p><p>本記事で作成するデモアプリは以下のGitHubリポジトリに格納しています。ご参考にしてください。</p><p><a href="https://github.com/orangekame3/pipenv-lambda">https://github.com/orangekame3/pipenv-lambda</a></p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>【本記事で伝えたいこと】</p>  <p>本記事で最も伝えたいことはデプロイパッケージと開発パッケージの分離です。Pipenvを使用することでzipの容量を節約しながらLambdaをデプロイすることができます。やや長い記事となっていますので、「LocalStackへのデプロイ」の章だけでも見ていただけると幸いです。</p></div><h1 id="Pipenvとは"><a href="#Pipenvとは" class="headerlink" title="Pipenvとは"></a>Pipenvとは</h1><p>Pipenvはパッケージ管理ツールです。似たようなツールにPoetry等があります。<br>Poetryを使用したPython開発環境の構築は<a href="https://future-architect.github.io/articles/20210611a/">澁川さんの記事</a>がとても参考になりますのでぜひご覧ください。</p><h1 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h1><p>開発に取り組む前に筆者の開発環境を記載します。記事中Linuxコマンドを使用している箇所があります。Windowsで開発される方はWSLを使用することをおすすめいたします。</p><ul><li>OS Ubuntu 20.04</li><li>Python(pyenv) 3.9</li><li>Pipenv</li><li>Docker</li><li>docker compose v2</li><li>AWS CLI v2</li></ul><h1 id="プロジェクトの作成"><a href="#プロジェクトの作成" class="headerlink" title="プロジェクトの作成"></a>プロジェクトの作成</h1><p>まずはPipenvをダウンロードしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><p>次にプロジェクトを作成します。<br>プロジェクトのルートディレクトリで以下コマンドを実行してPythonプロジェクトを作成します。<br>ランタイムはLambdaでサポートしている最新環境のPython 3.9を使用します。<br>参考：<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-runtimes.html">Lambda ランタイム</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --python 3.9</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~/git/src/pipenv-lambda main</span><br><span class="line">❯❯❯ pipenv --python 3.9                                                                  ✘ 1</span><br><span class="line">Creating a virtualenv <span class="keyword">for</span> this project...</span><br><span class="line">Pipfile: /home/orangekame3/git/src/pipenv-lambda/Pipfile</span><br><span class="line">Using /home/orangekame3/.anyenv/envs/pyenv/versions/3.9.4/bin/python3.9 (3.9.4) to create virtualenv...</span><br><span class="line">⠹ Creating virtual environment...created virtual environment CPython3.9.4.final.0-64 <span class="keyword">in</span> 136ms</span><br><span class="line">  creator CPython3Posix(dest=/home/orangekame3/.<span class="built_in">local</span>/share/virtualenvs/pipenv-lambda-LX4n91M6, clear=False, no_vcs_ignore=False, global=False)</span><br><span class="line">  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/orangekame3/.<span class="built_in">local</span>/share/virtualenv)</span><br><span class="line">    added seed packages: pip==21.3.1, setuptools==60.2.0, wheel==0.37.1</span><br><span class="line">  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator</span><br><span class="line"></span><br><span class="line">✔ Successfully created virtual environment!</span><br><span class="line">Virtualenv location: /home/orangekame3/.<span class="built_in">local</span>/share/virtualenvs/pipenv-lambda-LX4n91M6</span><br><span class="line">Creating a Pipfile <span class="keyword">for</span> this project...</span><br></pre></td></tr></table></figure><p>プロジェクトの作成ができました 🎉<br>この状態でtreeコマンドを実行すると<code>Pipfile</code>が作成されていることを確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~/git/src/pipenv-lambda main*</span><br><span class="line">❯❯❯ tree</span><br><span class="line">.</span><br><span class="line">├── Pipfile</span><br><span class="line">└── README.md</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure><p><code>Pipfile</code>にプロジェクトのPythonのバージョンや使用するパッケージ等が記載されています。<br><code>cat</code>コマンドで中身を確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~/git/src/pipenv-lambda main*</span><br><span class="line">❯❯❯ cat Pipfile</span><br><span class="line">[[<span class="built_in">source</span>]]</span><br><span class="line">url = <span class="string">&quot;https://pypi.org/simple&quot;</span></span><br><span class="line">verify_ssl = <span class="literal">true</span></span><br><span class="line">name = <span class="string">&quot;pypi&quot;</span></span><br><span class="line"></span><br><span class="line">[packages]</span><br><span class="line"></span><br><span class="line">[dev-packages]</span><br><span class="line"></span><br><span class="line">[requires]</span><br><span class="line">python_version = <span class="string">&quot;3.9</span></span><br></pre></td></tr></table></figure><p>Pipenvでパッケージをインストールする際は<code>pipenv install</code>コマンドを使用します。<br><code>pipenv install</code>でインストールしたパッケージは<code>[packages]</code>で管理されます。<br>一方、このコマンドに<code>--dev</code>オプションをつけてインストールした際は<code>[dev-packages]</code>でパッケージ管理されます。<br>この点については後ほど「LocalStackへのデプロイ」で説明します。</p><h2 id="開発パッケージのインストール"><a href="#開発パッケージのインストール" class="headerlink" title="開発パッケージのインストール"></a>開発パッケージのインストール</h2><p>続いてテスト環境を構築します。以下のコマンドでpytestをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~/git/src/pipenv-lambda main* 10s</span><br><span class="line">❯❯❯ pipenv install pytest --dev</span><br><span class="line">Installing pytest...</span><br><span class="line">Adding pytest to Pipfile<span class="string">&#x27;s [dev-packages]...</span></span><br><span class="line"><span class="string">✔ Installation Succeeded</span></span><br><span class="line"><span class="string">Pipfile.lock (8eec78) out of date, updating to (7c060a)...</span></span><br><span class="line"><span class="string">Locking [dev-packages] dependencies...</span></span><br><span class="line"><span class="string">Building requirements...</span></span><br><span class="line"><span class="string">Resolving dependencies...</span></span><br><span class="line"><span class="string">✔ Success!</span></span><br><span class="line"><span class="string">Locking [packages] dependencies...</span></span><br><span class="line"><span class="string">Building requirements...</span></span><br><span class="line"><span class="string">Resolving dependencies...</span></span><br><span class="line"><span class="string">✔ Success!</span></span><br><span class="line"><span class="string">Updated Pipfile.lock (7c060a)!</span></span><br><span class="line"><span class="string">Installing dependencies from Pipfile.lock (7c060a)...</span></span><br><span class="line"><span class="string">  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00</span></span><br><span class="line"><span class="string">To activate this project&#x27;</span>s virtualenv, run pipenv shell.</span><br><span class="line">Alternatively, run a <span class="built_in">command</span> inside the virtualenv with pipenv run.</span><br></pre></td></tr></table></figure><p>同様にして静的型チェックツールであるmypyもインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install mypy --dev</span><br></pre></td></tr></table></figure><h2 id="デプロイパッケージのインストール"><a href="#デプロイパッケージのインストール" class="headerlink" title="デプロイパッケージのインストール"></a>デプロイパッケージのインストール</h2><p>Pythonの標準パッケージ以外にも使用したいパッケージはあると思います。<br>Lambdaを実行する上で必要となる外部パッケージは<code>--dev</code>オプションは付けずにインストールします。<br>今回はpandasをインストールします。<br>またpandasでエクセルファイルを扱うため、xlwtとxlsxwriterもインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install pandas xlwt xlsxwriter</span><br></pre></td></tr></table></figure><p>ここまででPythonプロジェクトの準備は一旦完了です。<br>ローカル環境でLambdaのデプロイと実行を確認するためLocalStackを使用します。<br>次の章でLocalStackの準備をします。</p><h1 id="LocalStackの準備"><a href="#LocalStackの準備" class="headerlink" title="LocalStackの準備"></a>LocalStackの準備</h1><p>LocalStackを使用して、Lambdaのデプロイと動作検証を行います。</p><h2 id="docker-compose-ymlの作成"><a href="#docker-compose-ymlの作成" class="headerlink" title="docker-compose.ymlの作成"></a>docker-compose.ymlの作成</h2><p>以下のような<code>docker-compose.yml</code>を用意してください。</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;$&#123;LOCALSTACK_DOCKER_NAME-localstack_pipenv&#125;&quot;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:4566:4566&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATA_DIR=/tmp/localstack/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=lambda,s3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_TMP_FOLDER=$&#123;TMPDIR:-/tmp/&#125;localstack</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DOCKER_HOST=unix:///var/run/docker.sock</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;TMPDIR:-/tmp&#125;/localstack:/tmp/localstack&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br></pre></td></tr></table></figure><p><code>docker-compose.yml</code>の準備ができたらビルドします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up --build</span><br></pre></td></tr></table></figure><p>起動が確認できたらLocalStackの準備も完了です。<br>次にAWS CLIの設定を行います。</p><h2 id="AWS-CLIの設定"><a href="#AWS-CLIの設定" class="headerlink" title="AWS CLIの設定"></a>AWS CLIの設定</h2><p>AWS CLIでは認証情報などをプロファイルとして保存することができます。<br>AWS CLIをインストールされた方はご自身が使用しているOSのhomeディレクトリに<code>.aws</code>の隠しファルダがあります。(エクスプローラーなどで確認する場合は隠しフォルダを表示するように設定してください。)<code>.aws</code>フォルダ配下には.<code>config</code>と<br><code>.credentials</code>2つのファイルがありますのでそれぞれ以下のように設定してください。</p><p>参考:<a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-profiles.html">名前付きプロファイル</a></p><p>今回は以下のように<code>local</code>というプロファイルを作成しました。</p><figure class="highlight ini"><figcaption><span>config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[local]</span></span><br><span class="line"><span class="attr">region</span> = ap-northeast-<span class="number">1</span></span><br><span class="line"><span class="attr">output</span> = json</span><br></pre></td></tr></table></figure><figure class="highlight ini"><figcaption><span>credentials</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[local]</span></span><br><span class="line"><span class="attr">aws_access_key_id</span> = test</span><br><span class="line"><span class="attr">aws_secret_access_key</span> = test</span><br></pre></td></tr></table></figure><h1 id="デモアプリの実装"><a href="#デモアプリの実装" class="headerlink" title="デモアプリの実装"></a>デモアプリの実装</h1><h2 id="最終的なディレクトリ構成"><a href="#最終的なディレクトリ構成" class="headerlink" title="最終的なディレクトリ構成"></a>最終的なディレクトリ構成</h2><p>以降、複数のファイルを作成します。最終的なディレクトリ構成を記載しますので、適宜参考にしてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">├── Pipfile</span><br><span class="line">├── Pipfile.lock</span><br><span class="line">├── README.md</span><br><span class="line">├── bin</span><br><span class="line">│   └── lambda.zip</span><br><span class="line">├── deploy-packages</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── lambda.py</span><br><span class="line">├── model.py</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── result</span><br><span class="line">│   └── test.xlsx</span><br><span class="line">├── result.log</span><br><span class="line">├── setup.cfg</span><br><span class="line">├── tests</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── test_model.py</span><br><span class="line">└── utils</span><br><span class="line">    ├── data</span><br><span class="line">    │   └── sample_data.json</span><br><span class="line">    └── utils.py</span><br></pre></td></tr></table></figure><h2 id="全体構成"><a href="#全体構成" class="headerlink" title="全体構成"></a>全体構成</h2><p>今回作成するのはS3バケットからJSONファイルを取得し、ETL処理後にExcelファイルとして再度S3バケットに格納するアプリです。<br>S3バケットに格納したExcelファイルはAWS CLIコマンドでファイルをダウンロードして想定通りの挙動をしているか検証します。<br>以下、構成図です。</p><img src="/images/20220202a/構成.png" alt="構成" width="1200" height="810" loading="lazy"><h2 id="アプリ機能詳細"><a href="#アプリ機能詳細" class="headerlink" title="アプリ機能詳細"></a>アプリ機能詳細</h2><p>JSON→ExcelのETL処理について以下記載します。<br>S3バケットには予め以下の構造をもつJSONファイルを配置しておきます。<br>実装するLambdaには大きく2つの機能をもたせます。</p><ol><li>JSON→Excelへの変換</li><li>「ボーナスポイント」カラムの追加</li></ol><p>「ボーナスポイント」は以下の条件で決定します。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>【条件】</p>  <p>会員ランクが「４，５」の会員には「ポイント」×1.25倍のボーナスポイントを、会員ランク「１，２，３」の会員には「ポイント」と同等のボーナスポイントを付与することします。</p></div><br /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;長野原 ひろし&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">58</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-05-16&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;001&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;般若 竜門&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">75</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-07-19&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;002&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;十河 アンナ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">57</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-09-06&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>例えば上記のようなJSONファイルを取り込んだ場合、Lambdaは以下のExelファイルを出力することとします。</p><div class="scroll"><table><thead><tr><th align="left">会員番号</th><th align="left">名前</th><th align="left">会員ランク</th><th align="left">ポイント</th><th align="left">タイムスタンプ</th><th align="left">ボーナスポイント</th></tr></thead><tbody><tr><td align="left">000</td><td align="left">長野原 ひろし</td><td align="left">4</td><td align="left">58</td><td align="left">2021-05-16</td><td align="left">72.5</td></tr><tr><td align="left">001</td><td align="left">般若 竜門</td><td align="left">2</td><td align="left">75</td><td align="left">2021-07-19</td><td align="left">75</td></tr><tr><td align="left">002</td><td align="left">十河 アンナ</td><td align="left">2</td><td align="left">57</td><td align="left">2021-09-06</td><td align="left">57</td></tr></tbody></table></div><h2 id="ハンドラの実装"><a href="#ハンドラの実装" class="headerlink" title="ハンドラの実装"></a>ハンドラの実装</h2><p>それではアプリ本体を実装します。<br>Lambdaは<code>lambda.py</code>と<code>model.py</code>の２つで構成します。<br>機能のほとんどは<code>model.py</code>に記述し、<code>lambda.py</code>ではハンドラを呼び出すのみにします。<br>以下、<code>lambda.py</code>です。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> Handler</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getenv(<span class="string">&quot;LOCALSTACK_HOSTNAME&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    s3 = boto3.client(<span class="string">&quot;s3&quot;</span>, <span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    endpoint = <span class="string">f&quot;http://<span class="subst">&#123;os.environ[<span class="string">&#x27;LOCALSTACK_HOSTNAME&#x27;</span>]&#125;</span>:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    handler = Handler(event, context, s3)</span><br><span class="line">    <span class="keyword">return</span> handler.main()</span><br></pre></td></tr></table></figure><p>次に<code>model.py</code>です。</p><figure class="highlight python"><figcaption><span>model.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, event, context, s3</span>):</span></span><br><span class="line">        self.event = event</span><br><span class="line">        self.context = context</span><br><span class="line">        self.s3 = s3</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">            send = <span class="string">&quot;test.xlsx&quot;</span></span><br><span class="line">            data_path = self.event[<span class="string">&quot;input_obj&quot;</span>]</span><br><span class="line">            dict_data: <span class="type">List</span>[<span class="built_in">dict</span>] = self.get_s3_data(bucket, data_path)</span><br><span class="line">            df = self.make_df(dict_data)</span><br><span class="line">            df_processed = self.process(df)</span><br><span class="line">            send = self.send_excel(df_processed, bucket, send)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;completed : &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(send)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.exception(e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_s3_data</span>(<span class="params">self, bucket: <span class="built_in">str</span>, key: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">dict</span>]:</span></span><br><span class="line">        resp = self.s3.get_object(Bucket=bucket, Key=key)</span><br><span class="line">        body = resp[<span class="string">&quot;Body&quot;</span>].read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        json_dict: <span class="type">List</span>[<span class="built_in">dict</span>] = json.loads(body)</span><br><span class="line">        <span class="keyword">return</span> json_dict</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_df</span>(<span class="params">self, data: <span class="built_in">list</span></span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        df = pd.DataFrame.from_dict(data)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">self, row</span>):</span></span><br><span class="line">        <span class="keyword">if</span> row[<span class="string">&quot;会員ランク&quot;</span>] &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> row[<span class="string">&quot;ポイント&quot;</span>] * <span class="number">1.25</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> row[<span class="string">&quot;ポイント&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span>(<span class="params">self, data: pd.DataFrame</span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        data[<span class="string">&quot;ボーナスポイント&quot;</span>] = data.apply(self.calc, axis=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_excel</span>(<span class="params">self, df: pd.DataFrame, bucket: <span class="built_in">str</span>, send: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">with</span> tempfile.TemporaryFile() <span class="keyword">as</span> fp:</span><br><span class="line">            writer = pd.ExcelWriter(fp, engine=<span class="string">&quot;xlsxwriter&quot;</span>)</span><br><span class="line">            df.to_excel(writer, sheet_name=<span class="string">&quot;Sheet1&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line">            writer.save()</span><br><span class="line">            fp.seek(<span class="number">0</span>)</span><br><span class="line">            self.s3.put_object(</span><br><span class="line">                Body=fp.read(),</span><br><span class="line">                Bucket=bucket,</span><br><span class="line">                Key=send,</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> send</span><br></pre></td></tr></table></figure><p>実装では型アノテーションを付けています。<br>正しく型アノテーションを付与できているか、mypyを使ってチェックすることができます。<br><code>Pipfile</code>に以下を追記します。</p><figure class="highlight ini"><figcaption><span>Pipfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[scripts]</span></span><br><span class="line"><span class="attr">mypy</span> = <span class="string">&quot;mypy model.py lambda.py&quot;</span></span><br></pre></td></tr></table></figure><p><code>Pipfile</code>へ追記したら以下コマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv run mypy</span><br></pre></td></tr></table></figure><p>型付けに問題がなければ以下の結果を得られるはずです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Success: no issues found in 2 source files</span><br></pre></td></tr></table></figure><p>次にテストコードを実装します。</p><h2 id="テストコードの実装"><a href="#テストコードの実装" class="headerlink" title="テストコードの実装"></a>テストコードの実装</h2><p>テストにはpytestを使用します。プロジェクトルートに<code>tests</code>フォルダを作成し、<code>model.py</code>をテストする<code>test_model.py</code>を実装します。</p><p>以下<code>tests</code>ディレクトリのファイル構成です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── __init__.py</span><br><span class="line">└── test_model.py</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure><p><code>__init__.py</code>ファイルがないとテストに失敗するので忘れずに作成してください。</p><p>pytestを使用すれば簡単にテーブルドリブンテストを実装することができます。</p><p><code>fixture</code>を使用することで<code>handler</code>の初期値を入力することができ、各メソッドテストで使い回しが可能です。今回pandasを使用したテストを行うため、<code>assert</code>部にはpandasのDataFrame比較メソッドである<code>testing.assert_frame_equal</code>を使用しました。</p><p>以下はボーナスポイント付与のメソッドである<code>process</code>をテストした<code>test_process</code>の例です。</p><figure class="highlight python"><figcaption><span>test_model.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> Handler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span>():</span></span><br><span class="line">    <span class="keyword">return</span> Handler(</span><br><span class="line">        event=&#123;&#125;,</span><br><span class="line">        context=&#123;&#125;,</span><br><span class="line">        s3=<span class="string">&quot;&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&quot;input_dict,expected_dict&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    [</span></span></span><br><span class="line"><span class="params"><span class="meta">        (<span class="params"></span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">            [</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;000&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;椎名 米子&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">1</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">45</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-07-14&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;001&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;広島 たくみ&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">4</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">39</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-12-17&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;002&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;大嶺 順子&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">27</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-09-23&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">            ],</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">            [</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;000&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;椎名 米子&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">1</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">45</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-07-14&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ボーナスポイント&quot;</span>: <span class="number">45</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;001&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;広島 たくみ&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">4</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">39</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-12-17&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ボーナスポイント&quot;</span>: <span class="number">48.75</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;002&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;大嶺 順子&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">27</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-09-23&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ボーナスポイント&quot;</span>: <span class="number">27</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">            ],</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">        </span>),</span></span></span><br><span class="line"><span class="params"><span class="meta">    ],</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_process</span>(<span class="params">handler, input_dict, expected_dict</span>):</span></span><br><span class="line">    json_dict = pd.DataFrame.from_dict(input_dict)</span><br><span class="line">    got = handler.process(json_dict).sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">    expected = pd.DataFrame.from_dict(expected_dict).sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">    pd.testing.assert_frame_equal(got, expected)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>テストも<code>Pipfile</code>でコマンド化することができます。以下を<code>Pipfile</code>に追記してください。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[scripts]</span></span><br><span class="line"><span class="attr">mypy</span> = <span class="string">&quot;mypy model.py lambda.py&quot;</span></span><br><span class="line"><span class="attr">pytest</span> = <span class="string">&quot;pytest -vv&quot;</span></span><br></pre></td></tr></table></figure><p>ファイルへの追記が完了したら、テストを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">❯❯❯ pipenv run pytest</span><br><span class="line">==================================== <span class="built_in">test</span> session starts =====================================</span><br><span class="line">platform linux -- Python 3.9.4, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- /home/orangekame3/.<span class="built_in">local</span>/share/virtualenvs/pipenv-lambda-LX4n91M6/bin/python</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">rootdir: /home/orangekame3/git/src/pipenv-lambda</span><br><span class="line">collected 1 item</span><br><span class="line"></span><br><span class="line">tests/test_model.py::test_process[input_dict0-expected_dict0] PASSED                   [100%]</span><br><span class="line"></span><br><span class="line">===================================== 1 passed <span class="keyword">in</span> 0.17s ======================================</span><br></pre></td></tr></table></figure><p>無事テストを通過しました🎉</p><h1 id="LocalStackへのデプロイ"><a href="#LocalStackへのデプロイ" class="headerlink" title="LocalStackへのデプロイ"></a>LocalStackへのデプロイ</h1><p>Lambdaのzip化やLocalStackへのデプロイは<code>Makefile</code>で管理します。</p><p><code>Makefile</code>は<code>Pipfile</code>に追加したコマンドやAWS CLIコマンドで構成されています。筆者の環境はAWS CLI v2なので<code>invoke</code>コマンドでpayloadを指定時に<code>--cli-binary-format raw-in-base64-out</code>オプションを付与しています。</p><p>参考：<a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cliv2-migration.html#cliv2-migration-binaryparam">破壊的変更 - AWS CLI バージョン 1 からバージョン 2 への移行</a></p><h2 id="Makefile全貌"><a href="#Makefile全貌" class="headerlink" title="Makefile全貌"></a>Makefile全貌</h2><p>以下作成した<code>Makefile</code>です。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean zip  delete cretae update invoke log test bucket download json</span></span><br><span class="line">PROJECT_DIR=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">DEPLOY_PACKAGES_DIR=deploy-packages</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf ./bin/*</span><br><span class="line"></span><br><span class="line"><span class="section">zip:clean</span></span><br><span class="line">pipenv run mypy</span><br><span class="line">pipenv run pytest</span><br><span class="line">pipenv lock -r &gt;requirements.txt</span><br><span class="line">pipenv run pip install -r requirements.txt --target <span class="variable">$(DEPLOY_PACKAGES_DIR)</span></span><br><span class="line">@echo <span class="string">&quot;Project Location: <span class="variable">$(PROJECT_DIR)</span>&quot;</span></span><br><span class="line">@echo <span class="string">&quot;Library Location: <span class="variable">$(DEPLOY_PACKAGES_DIR)</span>&quot;</span></span><br><span class="line">cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -rf __pycache__ &amp;&amp; zip -r <span class="variable">$(PROJECT_DIR)</span>/bin/lambda.zip *</span><br><span class="line">cd <span class="variable">$(PROJECT_DIR)</span> &amp;&amp; zip -g ./bin/lambda.zip lambda.py model.py</span><br><span class="line">find ./bin/lambda.zip</span><br><span class="line">cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -r *</span><br><span class="line"></span><br><span class="line"><span class="section">delete:</span></span><br><span class="line">aws --endpoint-url=http://localhost:4566 \</span><br><span class="line">    --region ap-northeast-1 --profile local lambda delete-function \</span><br><span class="line">    --function-name=pipenv-lambda</span><br><span class="line"></span><br><span class="line"><span class="section">create:</span></span><br><span class="line">aws lambda create-function \</span><br><span class="line">    --function-name=pipenv-lambda \</span><br><span class="line">    --runtime=python3.9 \</span><br><span class="line">    --role=DummyRole \</span><br><span class="line">    --handler=lambda.lambda_handler \</span><br><span class="line">    --zip-file fileb://./bin/lambda.zip \</span><br><span class="line">--region ap-northeast-1 \</span><br><span class="line">    --endpoint-url=http://localhost:4566</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">update:</span></span><br><span class="line">aws lambda update-function-code \</span><br><span class="line">    --function-name=pipenv-lambda \</span><br><span class="line">    --zip-file fileb://./bin/lambda.zip \</span><br><span class="line">--region ap-northeast-1 \</span><br><span class="line">    --endpoint-url=http://localhost:4566</span><br><span class="line"></span><br><span class="line"><span class="section">invoke:</span></span><br><span class="line">aws lambda --endpoint-url=http://localhost:4566 invoke \</span><br><span class="line">--function-name pipenv-lambda \</span><br><span class="line">--region ap-northeast-1 \</span><br><span class="line">--payload &#x27;&#123; <span class="string">&quot;input_obj&quot;</span>: <span class="string">&quot;test.json&quot;</span> &#125;&#x27; \</span><br><span class="line">--cli-binary-format raw-in-base64-out \</span><br><span class="line">--profile local  result.log</span><br><span class="line"></span><br><span class="line"><span class="section">log:</span></span><br><span class="line">cat result.log</span><br><span class="line"></span><br><span class="line"><span class="section">test:</span></span><br><span class="line">pipenv shell <span class="string">&quot;pytest -vv &amp;&amp; exit&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">bucket:</span></span><br><span class="line">aws s3 mb s3://test-bucket \</span><br><span class="line">--endpoint-url=http://localhost:4566 \</span><br><span class="line">--profile local</span><br><span class="line"></span><br><span class="line"><span class="section">download:</span></span><br><span class="line">aws s3 --endpoint-url=http://localhost:4566 \</span><br><span class="line">cp s3://test-bucket/ ./result --exclude <span class="string">&quot;*&quot;</span> \</span><br><span class="line">--include <span class="string">&quot;*.xlsx&quot;</span> --recursive</span><br><span class="line"></span><br><span class="line"><span class="section">json:</span></span><br><span class="line">python utils/utils.py 100</span><br></pre></td></tr></table></figure><h2 id="デプロイパッケージのzip化"><a href="#デプロイパッケージのzip化" class="headerlink" title="デプロイパッケージのzip化"></a>デプロイパッケージのzip化</h2><p>ポイントはzipコマンド部です。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">zip:clean</span></span><br><span class="line">    pipenv run mypy</span><br><span class="line">    pipenv run pytest</span><br><span class="line">    pipenv lock -r &gt;requirements.txt</span><br><span class="line">    pipenv run pip install -r requirements.txt --target <span class="variable">$(DEPLOY_PACKAGES_DIR)</span></span><br><span class="line">    @echo <span class="string">&quot;Project Location: <span class="variable">$(PROJECT_DIR)</span>&quot;</span></span><br><span class="line">    @echo <span class="string">&quot;Library Location: <span class="variable">$(DEPLOY_PACKAGES_DIR)</span>&quot;</span></span><br><span class="line">    cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -rf __pycache__ &amp;&amp; zip -r <span class="variable">$(PROJECT_DIR)</span>/bin/lambda.zip *</span><br><span class="line">    cd <span class="variable">$(PROJECT_DIR)</span> &amp;&amp; zip -g ./bin/lambda.zip lambda.py model.py</span><br><span class="line">    find ./bin/lambda.zip</span><br><span class="line">    cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -r *</span><br></pre></td></tr></table></figure><p>前提として、Lambda上でPythonの外部パッケージを使用する際は外部パッケージを含んだzipファイルを作成する必要があります。直接CLI等からアップロードする場合は50MBの上限が存在します。</p><p>今回開発環境の補助ツールとしてpytestとmypyを、デプロイ時に必要なパッケージとしてpandasとxlwt、xlsxwriterをインストールしました。</p><p>開発に使用するpytestとmypyはLambdaの機能として不要です。そこでまずは<code>Pipfile</code>から<code>requirements.txt</code>を作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv lock -r -&gt; requirements.txt</span><br></pre></td></tr></table></figure><p>requirements.txtには–devオプションでインストールしたパッケージは含まれません。開発パッケージとデプロイパッケージを分離することができました。</p><p>次にrequirements.txtを元にdeploy-packagesというフォルダを作成します。事前に<code>mkdir</code>コマンドで<code>deploy-packages</code>を作成しておきます。pipコマンドは<code>--target</code>オプションを付与することでインストール先を指定することができます。</p><p>コマンド冒頭で<code>pipenv run</code>を付与することで、プロジェクトの仮想環境上で実行することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv run pip install -r requirements.txt --target $(DEPLOY_PACKAGES_DIR)</span><br></pre></td></tr></table></figure><p>あとはzipコマンドを使用して実装した<code>lambda.py</code>と<code>model.py</code>を追加するだけです。</p><p>なお、このzipコマンドを作成する際に以下の記事と<br><a href="https://pyteyon.hatenablog.com/entry/2019/08/04/204704">https://pyteyon.hatenablog.com/entry/2019/08/04/204704</a></p><p>pipenv公式の以下のIssue<br><a href="https://github.com/pypa/pipenv/issues/746">https://github.com/pypa/pipenv/issues/746</a></p><p>を参考にさせていただきました。</p><p>zipコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make zip</span><br></pre></td></tr></table></figure><img src="/images/20220202a/zip.gif" alt="zip" width="890" height="786" loading="lazy"><p>正常に動作していればルートディレクトリのbinフォルダに<code>lambda.zip</code>が生成されます。</p><p>続いてLocalStackが起動していることを確認した上でS3上に新規バケットを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make bucket</span><br></pre></td></tr></table></figure><p>バケットの作成が完了したらLocalStackにアプリをデプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make create</span><br></pre></td></tr></table></figure><p>Lambdaのデプロイに成功していれば以下のレスポンスが返ってきます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;FunctionName&quot;</span>: <span class="string">&quot;pipenv-lambda&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;FunctionArn&quot;</span>: <span class="string">&quot;arn:aws:lambda:ap-northeast-1:000000000000:function:pipenv-lambda&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Runtime&quot;</span>: <span class="string">&quot;python3.9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Role&quot;</span>: <span class="string">&quot;DummyRole&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Handler&quot;</span>: <span class="string">&quot;lambda.lambda_handler&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;CodeSize&quot;</span>: <span class="number">38937088</span>,</span><br><span class="line">    <span class="attr">&quot;Description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Timeout&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;LastModified&quot;</span>: <span class="string">&quot;2022-01-29T11:52:04.798+0000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;CodeSha256&quot;</span>: <span class="string">&quot;cr93AW1EjYHkErTkS6dGRKGCsTrtBEedwcuO9N4LSj0=&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;$LATEST&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;VpcConfig&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;TracingConfig&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;Mode&quot;</span>: <span class="string">&quot;PassThrough&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;RevisionId&quot;</span>: <span class="string">&quot;35bfafab-da87-4f25-8014-16c7b35caa9e&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;State&quot;</span>: <span class="string">&quot;Active&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LastUpdateStatus&quot;</span>: <span class="string">&quot;Successful&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;PackageType&quot;</span>: <span class="string">&quot;Zip&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Architectures&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;x86_64&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LocalStackへのLambdaデプロイに成功しました🎉<br>最後に動作検証をします。</p><h1 id="動作検証"><a href="#動作検証" class="headerlink" title="動作検証"></a>動作検証</h1><h2 id="テストデータの作成"><a href="#テストデータの作成" class="headerlink" title="テストデータの作成"></a>テストデータの作成</h2><p>まずはETL処理元のテストデータを作成します。<br>ルートディレクトリに<code>utils/utils.py</code>を作成し、以下のコードを実装します。</p><figure class="highlight python"><figcaption><span>utils.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> fire <span class="keyword">import</span> Fire</span><br><span class="line"><span class="keyword">from</span> mimesis <span class="keyword">import</span> Person</span><br><span class="line"><span class="keyword">from</span> mimesis.locales <span class="keyword">import</span> Locale</span><br><span class="line"></span><br><span class="line">person = Person(Locale.JA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dummy_data</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">str</span>(num).zfill(<span class="number">3</span>)</span><br><span class="line">    date = datetime.date(<span class="number">2021</span>, randint(<span class="number">1</span>, <span class="number">12</span>), randint(<span class="number">1</span>, <span class="number">28</span>)).strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">    dummy_dict = &#123;</span><br><span class="line">        <span class="string">&quot;会員番号&quot;</span>: <span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&quot;名前&quot;</span>: person.full_name(reverse=<span class="literal">True</span>),</span><br><span class="line">        <span class="string">&quot;会員ランク&quot;</span>: randint(<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="string">&quot;ポイント&quot;</span>: randint(<span class="number">50</span>, <span class="number">100</span>),</span><br><span class="line">        <span class="string">&quot;タイムスタンプ&quot;</span>: date,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_json</span>(<span class="params">s3, sample_data: <span class="built_in">list</span>, bucket: <span class="built_in">str</span>, send: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;utils/data/sample_data.json&quot;</span>, mode=<span class="string">&quot;wt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(sample_data, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line">    s3.put_object(</span><br><span class="line">        Body=json.dumps(sample_data, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>),</span><br><span class="line">        Bucket=bucket,</span><br><span class="line">        Key=send,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> send</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_dummy_data</span>(<span class="params">k</span>) -&gt; <span class="built_in">list</span>:</span></span><br><span class="line">    sample_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        sample_data.append(dummy_data(i))</span><br><span class="line">    <span class="keyword">return</span> sample_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">iterate_num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    endpoint = <span class="string">f&quot;http://localhost:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">    send = <span class="string">&quot;test.json&quot;</span></span><br><span class="line">    sample_data = make_dummy_data(iterate_num)</span><br><span class="line">    send = send_json(s3, sample_data, bucket, send)</span><br><span class="line">    <span class="keyword">return</span> send</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Fire(main)</span><br></pre></td></tr></table></figure><p>テストデータを作成するにあたってmimesisとfireの2つの外部パッケージを使用しました。</p><p>mimesisはダミーデータを作成するパッケージ、fireはPythonスクリプトにコマンドライン引数を渡すパッケージです。fireは社内チャットで話題になっていたので今回使用してみました。非常に便利でした。皆さんぜひ、使ってみてください。utils直下で以下コマンドを実行することで先程作成した<code>test-bucket</code>に<code>test.json</code>を任意のデータ量で格納することができます。</p><p>今回は100行のダミーデータを作成しました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python utils.py 100</span><br></pre></td></tr></table></figure><h2 id="Lambdaの実行"><a href="#Lambdaの実行" class="headerlink" title="Lambdaの実行"></a>Lambdaの実行</h2><p>それではデプロイしたLambdaを呼び出します。AWS CLIのinvoke実行時に<code>--payload &#39;&#123; &quot;input_obj&quot;: &quot;test.json&quot; &#125;&#39;</code>を付与することでLambdaに<code>test.json</code>の場所を渡します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make invoke</span><br></pre></td></tr></table></figure><p>Lambdaの実行が完了していれば次のレスポンスが返ってきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;StatusCode&quot;</span>: 200,</span><br><span class="line">    <span class="string">&quot;LogResult&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ExecutedVersion&quot;</span>: <span class="string">&quot;<span class="variable">$LATEST</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>それではS3からLambdaの実行により生成されたExcelファイルをダウンロードします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make download</span><br></pre></td></tr></table></figure><p>以下の画像はETL処理元のJSONファイルとETL処理後のExcelファイルを比較したものです。<br>想定通りの結果が得られました！！🎉</p><img src="/images/20220202a/image.png" alt="実行結果" width="1200" height="676" loading="lazy"><p>本記事で使用したソースコードは以下のGitHubリポジトリにまとめています。</p><p><a href="https://github.com/orangekame3/pipenv-lambda">https://github.com/orangekame3/pipenv-lambda</a></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はPipenvとLocalStackを使用してLambdaの開発環境を構築しました。</p><p>普段はGo言語を使用してLambdaを作成しており、外部パッケージの依存を気にすることがありませんでした。今回Pythonを使用するにあたり、<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/python-package.html">公式で紹介されているデプロイ方法</a>をもう少しスマートに行いたいと考えて試行錯誤しました。ひとつ自分として満足の行く形にたどり着けて良かったと思っています。</p><p>調べて見るとLambdaの開発環境としては<a href="https://aws.amazon.com/jp/serverless/sam/">Serverless Application Model</a>や<a href="https://github.com/serverless/serverless">Serverless Famework</a>などのテンプレートがあるようです。こうしたフレームワークも今後触ってみて自分なりのベストな開発環境を模索していきたいです。</p><p>最後までお付き合いいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220202a/eyecatch.png&quot; alt=&quot;&quot; width=&quot;969&quot; height=&quot;484&quot; loading=&quot;lazy&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
    <category term="LoclStack" scheme="https://future-architect.github.io/tags/LoclStack/"/>
    
    <category term="開発環境" scheme="https://future-architect.github.io/tags/%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/"/>
    
    <category term="Pipenv" scheme="https://future-architect.github.io/tags/Pipenv/"/>
    
  </entry>
  
  <entry>
    <title>HACK TO THE FUTURE 2022本選のビジュアライザ作成しました</title>
    <link href="https://future-architect.github.io/articles/20220201a/"/>
    <id>https://future-architect.github.io/articles/20220201a/</id>
    <published>2022-01-31T15:00:00.000Z</published>
    <updated>2022-02-03T03:00:05.974Z</updated>
    
    <content type="html"><![CDATA[<p>テクノロジーイノベーショングループ コアテクノロジーユニットの山田です。<br>HACK TO THE FUTURE 2022本選のビジュアライザ開発担当したのでその体験記を残しておきます。</p><h2 id="HACK-TO-THE-FUTUREとは"><a href="#HACK-TO-THE-FUTUREとは" class="headerlink" title="HACK TO THE FUTUREとは"></a>HACK TO THE FUTUREとは</h2><p>HACK TO THE FUTUREはフューチャーグループが2018年からAtCoderで開催しているオンライン競技プログラミングコンテストで、全国から高度なプログラミングスキルを持つユース世代を発掘し、交流を図り切磋琢磨し合う場を提供することを目的として開催しています<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p><strong>【本選概要】</strong><br><strong>開催日時</strong>：2021年12月18日(土) 10:00〜20:30<br><strong>プログラム</strong>：プログラミングコンテスト(10:30~18:30)、表彰式・懇親会(任意)<br><strong>実施形式</strong>：オンライン (開会式・表彰式、懇親会はバーチャル空間oViceを利用)<br><strong>コンテストサイト</strong>：AtCoder「HACK TO THE FUTURE 2022本選」<br>＜本選出場者＞<a href="https://atcoder.jp/contests/future-contest-2022-final">https://atcoder.jp/contests/future-contest-2022-final</a><br>＜オープン参加＞<a href="https://atcoder.jp/contests/future-contest-2022-final-open">https://atcoder.jp/contests/future-contest-2022-final-open</a></p><p>HACK TO THE FUTUREは予選と本選に分かれていて<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>、今回のコンテストでは予選は744人、本選は（本選と同時刻に行われる本選オープンと合算で）186人の方が有効回答を提出しています。HACK TO THE FUTUREは厳密解を求めるのが難しい問題が出題されるヒューリスティックコンテストで、競技者はより良い解を求めることが要求されます。ヒューリスティックコンテストでは、競技者はアルゴリズム改善のヒントを得るために解を可視化するビジュアライザを使用することがあります。ビジュアライザは必ずしも公式で提供されるわけではありませんが、HACK TO THE FUTUREでは必ず提供しています。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>今回の問題は、与えられたプログラムの通りに部屋を掃除するお掃除ロボットがあり、入力で与えられた部屋を掃除するプログラムを計算するという問題でした。掃除できた範囲が広いほど高いスコアを得ることができ、部屋全体を掃除できた場合は更にプログラムの短さに応じたボーナススコアが入ります。</p><p>プログラムは<code>LRlrF()0123456789</code>の文字で構成された文字列で、L,R,l,r の命令により向きを変え、F命令で前進します。また、括弧で命令列をグループ化し、数値で命令列の繰り返し回数を指定できます。詳しくは<a href="https://atcoder.jp/contests/future-contest-2022-final-open/tasks/future_contest_2022_final_a">問題文</a>をご参照ください。</p><p><a href="https://img.atcoder.jp/future-contest-2022-final/e4ace3a9dfd2d994ac246560e10d2f4e.html">ビジュアライザ</a>を開き、input欄に「rFL3F」を1文字ずつ順番に追加入力してsimulateボタン押下してみてください。</p><p>output欄に1文字ずつ「r」と入力→simulateボタン押下→「r」のあとに「F」→simulateボタン押下→…と進めていくとロボットの動きが動いていくのが確認できます。</p><ol><li>r：壁を向いているので右を向く</li><li>F：前に壁がないため1マス進む</li><li>L：90度左を向く</li><li>3F：前に壁がないため3マス進む<br>※実際には作成したプログラムで出力した文字を貼り付けるとsimulateボタンを押下せず一気にロボット動かせます。</li></ol><p>入力前のビジュアライザの状態<br><img src="/images/20220201a/2022-01-20_11h20_48.png" alt="2022-01-20_11h20_48.png" width="982" height="918" loading="lazy"></p><p>入力後のビジュアライザの状態<br><img src="/images/20220201a/2022-01-20_11h15_49.png" alt="2022-01-20_11h15_49.png" width="987" height="915" loading="lazy"></p><p>アニメーション<br><img src="/images/20220201a/Animation.gif" alt="Animation.gif" width="1200" height="843" loading="lazy"></p><h2 id="ビジュアライザ開発業務の流れ"><a href="#ビジュアライザ開発業務の流れ" class="headerlink" title="ビジュアライザ開発業務の流れ"></a>ビジュアライザ開発業務の流れ</h2><h3 id="応募"><a href="#応募" class="headerlink" title="応募"></a>応募</h3><p>全社メールにビジュアライザ作成メンバー募集のメールが送られており、今年はコンテストに参加する予定もなくビジュアライザ作成業務に興味があったこともあり応募しました。</p><p>複数人応募があったようですが、運良く私が選ばれました。</p><h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><p>問題が完成する前段階で事前準備を行いました。</p><p>まずは、コンテスト開催を主導している塚本さんから過去のビジュアライザ開発の流れや注意点などを教えていただき、それから過去問のビジュアライザの実装を見てビジュアライザの実装について理解を深めつつ開発環境の構築を行っていました。</p><p>ビジュアライザは個人開発のため、これまではソース管理などは行っていなかったということだったのですが、塚本さんと共有するためのプラットフォームとしての意味も含めgitlabで管理することにしました。その後linterやformatterの導入を進めましたが、元々linterやformatterを使わずに開発されたプロダクトに後から導入するのには壁があり、結局eslintでJavaScriptのlintのみ行うようにしました<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p><p>cypressも導入できるとpush時にリグレッションテストを行ったりビジュアライザの動きをmp4で動画化して成果物として保存したりできるのかなと思っていたのですが、そこまで手が回らなかったのが残念でした。</p><h3 id="ビジュアライザ開発"><a href="#ビジュアライザ開発" class="headerlink" title="ビジュアライザ開発"></a>ビジュアライザ開発</h3><p>問題完成し、こちらで問題内容が確認できるようになってから開発を開始しました。部屋の情報とプログラムから掃除の過程をシミュレーションする処理はAtCoder社側で作成したwasmによって提供されており、可視化部分の開発に注力することができました。</p><p>ビジュアライザの開発では、まず入出力のバリデーションの処理を書き<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>、それから可視化に必要な素材集めを行いました。今回は壁のあるグリッドを掃除ロボットが掃除するという設定だったので、壁を表現できるタイル、汚れの表現、掃除ロボットの素材を探しました。</p><p>素材については<a href="https://pipoya.net/sozai/">ぴぽや倉庫</a>さんからお借りしました。ぴぽや倉庫さんの無料素材は素材データの転売のみ厳格に禁止で改変等については自由という非常に利用しやすいライセンスとなっているため、過去コンテストでも使用しています。ありがとうございます。</p><p>今回使用したいただいた元素材は以下の通りです。</p><img src="/images/20220201a/pipo-fog004a.png" alt="ホコリに使った素材" width="640" height="480" loading="lazy"><p>部屋の埃を表現に使用しました。埃っぽさを増すために明度をあげて使用しました。</p><img src="/images/20220201a/tiles_-_コピー.png" alt="タイル" width="256" height="192" loading="lazy"><p>壁付きの部屋を表現するのに使用した素材です。後述の素材のフローリング部分と合成して洋風の部屋にしています。</p><img src="/images/20220201a/32x32mapchip_20190721.png" alt="床" width="640" height="480" loading="lazy"><p>部屋の床をフローリングにするため、右下の部屋の床部分を切り出して前述の素材と合成しました。</p><img src="/images/20220201a/robot_-_コピー.png" alt="お掃除ロボット" width="96" height="128" loading="lazy"><p>お掃除ロボットです。目の部分を書き換えて使用しています。</p><h3 id="コンテスト中"><a href="#コンテスト中" class="headerlink" title="コンテスト中"></a>コンテスト中</h3><p>コンテスト中の質問<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>対応等については全て塚本さんが担当していたため、コンテスト中はTwitterで反応を見ていました。ビジュアライザ関連のトラブルが発生しないか不安でしたが、コンテスト中は不具合なく動いていたようでほっとしました。</p><h3 id="懇親会"><a href="#懇親会" class="headerlink" title="懇親会"></a>懇親会</h3><p>表彰式参加したかったのですが、共有機能にバグが見つかったため表彰式中は共有機能のバグ修正に追われていました<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>。表彰式終了の少し前に対応が終わり、なんとか懇親会には参加できました。<br>懇親会ではロボット（の名前が「お掃除高橋くん」なのに）かわいいという感想をいただいたりして、とても嬉しく思いました。（ロボットの名前が「お掃除高橋くん」というのは、そこで言われるまで気づいていなかったため驚きましたが）</p><h2 id="共有機能のバグについて"><a href="#共有機能のバグについて" class="headerlink" title="共有機能のバグについて"></a>共有機能のバグについて</h2><p>命令列の最後が<code>)</code>で終わる場合、末尾の括弧がURLとして判定されず不正な命令列となってしまう不具合が発生しました。今後同じ轍を踏まないように <a href="https://github.com/twitter/twitter-text">GitHub - twitter/twitter-text</a> を見て軽く調査しました。（内容に誤りがありましたらご指摘いただけると幸いです）</p><p>tweet内のURLの解析の正規表現は下図のように、<code>validUrlQueryChars</code> と <code>validUrlQueryEndingChars</code> が分かれているため、クエリ文字列として使用可能だが終端には置けない文字が存在します。</p><img src="/images/20220201a/2022-01-13_19h09_50.png" alt="正規表現" width="556" height="426" loading="lazy"><p>クエリ文字列として使用可能な文字集合</p><img src="/images/20220201a/2022-01-13_19h12_21.png" alt="正規表現" width="527" height="37" loading="lazy"><p>クエリ文字列の終端として使用可能な文字集合</p><img src="/images/20220201a/2022-01-13_19h13_34.png" alt="正規表現" width="399" height="40" loading="lazy"><p>今回問題となった<code>)</code>はクエリ文字列として使用可能だが、終端として使用可能な文字ではないためこのような現象が起きてしまったようです。今後共有機能を使う際には<code>#</code>などの文字を番兵として配置しておくのが無難でしょう。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>ビジュアライザ開発が間に合わなかったら多方面に迷惑をかけてしまうのでとても緊張感がありましたが、無事開発できて安心しました。開発は普段の業務と大きく違う内容なので、新鮮味があり楽しく開発ができました。Twitterの方でもビジュアライズに言及いただき大変励みになりました。</p><p>今後ヒューリスティックコンテストがこれまで以上に盛り上がり、各社独自のビジュアライザ自作する流れができたら面白いなと思います。</p><p>反省点としては下記の3点です。</p><ol><li>メッセージやUIの修正を最後に回してしまったが、これらの修正は先に行い、後はアニメーションや機能追加の方のクオリティを向上させるだけという状態を作るべきでした。</li><li>共有機能でバグらせてしまい、競技者の皆様やAtCoder社の方にご迷惑をおかけしてしまった。</li><li>競技者にとってあると嬉しい機能を提案したかったが、いい案が浮かばず提案できなかった。</li></ol><p>詳しい日程は未定ですが、今年も開催予定なので参加お待ちしています！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://prtimes.jp/main/html/rd/p/000000527.000004374.html">オンライン競技プログラミングコンテスト「HACK TO THE FUTURE 2022 for Youth」本選 12月18日開催</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">本選オープンも同時刻に行われ、そちらは誰でも参加することができます</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">弊社には社内にeslint-plugin-vueのメインコミッターの方もおり、linterなどの設定は社内のドキュメント通りに設定すれば済んでいたためこのあたりの作業をしたことがなかったのですが、やってみると細かいところで躓いたりして、きちんとした環境が用意されていることのありがたみを感じました。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">いつもは、素材集め→アニメーション無しマスの描画→入出力のvalidation→wasmを用いたスコアや盤面の表示→アニメーション作成という順番で行っているそうです</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">競プロの世界ではclarと呼ばれることが多い</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">結局AtCoder社の方がよりよい方法で対応してくださったため、私の対応は使われることはありませんでしたが。</span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;テクノロジーイノベーショングループ コアテクノロジーユニットの山田です。&lt;br&gt;HACK TO THE FUTURE 2022本選のビジュアライザ開発担当したのでその体験記を残しておきます。&lt;/p&gt;
&lt;h2 id=&quot;HACK-TO-THE-FUTUREとは&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
    <category term="AtCoder" scheme="https://future-architect.github.io/tags/AtCoder/"/>
    
    <category term="HTTF" scheme="https://future-architect.github.io/tags/HTTF/"/>
    
  </entry>
  
  <entry>
    <title>フューチャー社員が行ったIT系技術誌への寄稿まとめ(2017~2022年)</title>
    <link href="https://future-architect.github.io/articles/20220128a/"/>
    <id>https://future-architect.github.io/articles/20220128a/</id>
    <published>2022-01-27T15:00:00.000Z</published>
    <updated>2022-02-03T14:01:40.730Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220128a/kindle-ga51f96f25_640.jpg" alt="" width="640" height="426"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャーにおける、ここ4,5年でIT技術系の雑誌への寄稿をまとめました。せっかくのなのでブログ公開します。なお<a href="https://www.future.co.jp/press_room/media/">コーポレートサイトのプレスルーム</a>ではIT技術系以外のメディア露出もまとめられていますので、もっと知りたい方はそちらを確認いただけると幸いです。</p><p>たまたま部門別に良い感じに散らばっていたのでその単位でグルーピングしてまとめました。本当は寄稿したタイミングで、フューチャー技術ブログ側にも記念記事を書いてほしかったのですがけっこう抜けていることに気が付きました。今後は運営としてもウォッチして一緒にアピールできればなと考えています。</p><h2 id="SAIG（Strategic-AI-Group）"><a href="#SAIG（Strategic-AI-Group）" class="headerlink" title="SAIG（Strategic AI Group）"></a>SAIG（Strategic AI Group）</h2><p>SAIGは世界最先端の、ディープラーニングを中心とするAI技術をベースとして、顧客企業の抱える重要課題に挑戦する、先進的AIプロジェクトをリードしているチームです。</p><ul><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201901">Software Design 2019年1月号</a><ul><li>自然言語処理・画像処理における線形代数の応用 ～データ処理アルゴリズムへの活用事例～(貞光さん)</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201903">Software Design 2019年3月号</a><ul><li>微分でつなぐ、機械学習とニューラルネットワーク ～データ分析も画像処理も最小二乗法で！～（上野さん、貞光さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201909">Software Design 2019年9月号</a><ul><li>数字認識APIを作って実感 ～充実した機械学習ライブラリがPythonの魅力～（上野さん、貞光さん）</li><li>2019年の1,3,9号は上野さんが<a href="/articles/20191016/">Software Design 後記</a>というタイトルでまとめ記事を書いてくれています。</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2021/202111">Software Design 2021/11月号</a><ul><li>Kaggleで知る機械学習 前処理から学習モデルの構築，スコアの上げ方までわかる<ul><li>第1章：Kaggleにエントリーしよう 登録からSubmitまでブラウザ上で完結（農見さん）</li><li>第2章：自然言語処理のコンペに挑戦① データの前処理・学習・推論の流れ（玉木さん）</li><li>第3章：自然言語処理のコンペに挑戦② モデル変更でスコアを底上げする（玉木さん）</li><li>第4章：くずし字認識のコンペに挑戦① パラメータチューニングの奥深さに触れる（金子さん）</li><li>第5章：くずし字認識のコンペに挑戦② さらなるスコアアップのためにKagglerがやっていること（金子さん）</li></ul></li><li>玉木さんの<a href="/articles/20211026b/">Software Design 2021年11月号「Kaggleで知る機械学習」を寄稿しました</a>記事が公開されています。</li></ul></li></ul><h2 id="CSIG-Cyber-Security-Innovation-Group"><a href="#CSIG-Cyber-Security-Innovation-Group" class="headerlink" title="CSIG(Cyber Security Innovation Group)"></a>CSIG(Cyber Security Innovation Group)</h2><p>CSIGは先進のセキュリティ技術で、未来の安心を創るチームです。</p><ul><li><a href="https://gihyo.jp/magazine/SD/archive/2017/201710">Software Design 2017年10月号</a><ul><li>システムのセキュリティチェックをもっと楽に 脆弱性スキャナVuls入門<ul><li>第1章：セキュリティ対応に追われる現場の悲鳴と，その解決策 （林さん）</li><li>第2章：Vuls導入チュートリアル （枇榔さん、牛田さん）</li><li>第3章：Vulsとさまざまなプロダクトとの外部連携 （牛田さん）</li><li>第4章：Vuls誕生秘話――OSSをバズらせるには（神戸さん）</li></ul></li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2018/201801">Software Design 2018年1月号</a><ul><li>システムのセキュリティ運用をもっと楽に・セキュアに 脆弱性管理サービスFutureVuls登場（林さん，牛田さん，枇榔さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201911">Software Design 2019年11月号</a><ul><li>環境構築から使い方まで実践指導！<br>脆弱性スキャナVuls/Trivy/Dockle OSSを公開したら人生が変わった3人の開発者（神戸さん）</li></ul></li></ul><h2 id="TIG-Technology-Innovation-Group"><a href="#TIG-Technology-Innovation-Group" class="headerlink" title="TIG(Technology Innovation Group)"></a>TIG(Technology Innovation Group)</h2><p>TIGは、「最先端、且つ先進的なテクノロジーのプロフェッショナル集団」、「プロジェクト品質と生産性の向上」、「自社サービス事業の立ち上げ」を主なミッションとして発足したチームです。</p><ul><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201903">Software Design 2019年3月号</a><ul><li>第3章：ES2015～2018を踏まえた、今どきのJavaScriptの書き方 （澁川さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201905">Software Design 2019年5月号</a><ul><li>入門！ Go CLIツールとWebアプリを作って学ぶ 第3章（澁川さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2021/202107">Software Design 2021年7月号</a><ul><li>[特別企画］WSL 2本格入門 何ができるか，どこまでできるか（澁川さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/wdpress/archive/2021/vol120">WEB+DB PRESS Vol.120</a><ul><li>最新vue.js 3コアチームが解説！ 基本から新機能まで完全網羅（第2章～第4章 太田さん）</li><li>久保さんによる<a href="/articles/20210203/">WEB+DB PRESS Vol.120 最新Vue.js3入門を読んで</a> という書評記事があります</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202201">Software Design 2022年1月号</a><ul><li>Cypressで作る“消耗しない”E2Eテスト環境 【1】Cypressで快適なテストライフを（木戸さん）</li><li>木戸さんの<a href="/articles/20211218a/">紹介記事</a></li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202202">Software Design 2022年2月号</a><ul><li>Cypressで作る“消耗しない”E2Eテスト環境 【2】実運用に効くコードの書き方＆便利な機能（枇榔さん）</li></ul></li><li>まだ未発売ですが、連載は4回まで続くようです。3,4月号も期待ですね！</li></ul><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>まとめてみると、Software Design と WEB+DB PRESSの2つが対象になりました。フューチャーのITコンサルティングの技術スタックと相性が良いと言うのはなんとなく分かるような気がします。Cypressに関してはまだフューチャーメンバーの連載が続くようですので応援お願いします！</p><p>引き続き、フューチャーからこういった寄稿が増えていくと良いなと思っています。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220128a/kindle-ga51f96f25_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;426&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="SoftwareDesign" scheme="https://future-architect.github.io/tags/SoftwareDesign/"/>
    
    <category term="雑誌" scheme="https://future-architect.github.io/tags/%E9%9B%91%E8%AA%8C/"/>
    
    <category term="寄稿" scheme="https://future-architect.github.io/tags/%E5%AF%84%E7%A8%BF/"/>
    
    <category term="まとめ" scheme="https://future-architect.github.io/tags/%E3%81%BE%E3%81%A8%E3%82%81/"/>
    
    <category term="WEB+DBPRESS" scheme="https://future-architect.github.io/tags/WEB-DBPRESS/"/>
    
  </entry>
  
  <entry>
    <title>CHAdeMO vs コンボ EV充電規格を比較する</title>
    <link href="https://future-architect.github.io/articles/20220127a/"/>
    <id>https://future-architect.github.io/articles/20220127a/</id>
    <published>2022-01-26T15:00:00.000Z</published>
    <updated>2022-01-27T02:10:59.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの村上です。</p><p>大手自動車メーカーが続々とEVを発表したり、EUでは2035年にガソリン車の新車販売が禁止になったりと、近年電気自動車業界が盛り上がりを見せています。</p><p>EVといえば充電しなければならないのが特徴です。充電ステーションにはスマホのLightningやUSBなどのように、充電するための対応規格が存在します。今回はEVの充電規格について解説したいと思います。</p><h1 id="充電ステーションの通信規格"><a href="#充電ステーションの通信規格" class="headerlink" title="充電ステーションの通信規格"></a>充電ステーションの通信規格</h1><p>充電ステーションとEVの通信規格は多数存在し、シェア争いが過熱しています。主要な規格をまとめると、以下のようになります。</p><div class="scroll"><table><thead><tr><th>項目</th><th>CHAdeMO</th><th>GB/T</th><th>テスラ</th><th>CCS1</th><th>CCS2</th></tr></thead><tbody><tr><td>規格制定国</td><td>日本</td><td>中国</td><td>アメリカ</td><td>アメリカ</td><td>ドイツ</td></tr><tr><td>デジタル通信規格</td><td>CAN</td><td>CAN</td><td>CAN</td><td>PLC</td><td>PLC</td></tr></tbody></table></div><p>CCS1とCCS2は通称<strong>コンボ</strong>と呼ばれています。<br>テスラは独自規格を採用していますが、専用の変換アダプタを使うことによってCHAdeMOで充電することができます。</p><h2 id="CHAdeMO"><a href="#CHAdeMO" class="headerlink" title="CHAdeMO"></a>CHAdeMO</h2><p>上記で示したように、充電規格は多数存在しますが、現在はCHAdeMOへの統一化の動きがあります。</p><p>実際に2020年にCHAdeMO、GB/T、コンボに互換性のあるCHAdeMO3.0が完成しました。</p><img src="/images/20220127a/image.png" alt="チャデモ3.0" width="1200" height="620" loading="lazy"><p>参考：<a href="https://www.chademo.com/ja/chademo3-0/">https://www.chademo.com/ja/chademo3-0/</a></p><p>現在CHAdeMOの充電ステーションは欧州を中心に全世界で35600台以上普及しており、世界最大のカバレッジを誇っています。規格上の最大出力は900kWです。</p><h3 id="CHAdeMOの充電シーケンス"><a href="#CHAdeMOの充電シーケンス" class="headerlink" title="CHAdeMOの充電シーケンス"></a>CHAdeMOの充電シーケンス</h3><p>CHAdeMOではEVとCANによってデジタル通信を行いながら充電を進めます。</p><p>充電の手続きをざっくりとまとめると以下のようになります。</p><ol><li>EVと充電ステーションを接続</li><li>EVと充電ステーションの互換性を確認し、問題なければEVが準備完了状態に移行</li><li>車両コネクタロック</li><li>充電ステーションから給電開始</li><li>EVから充電停止命令を送ることで充電終了</li><li>車両コネクタロック解除</li><li>充電ステーションで支払い手続きを行う</li></ol><p>車両コネクタロックとは、充電コネクタがEVのプラグから離れないようにするための物理的なロックです。</p><p>安全面でのロックであることはもちろんですが、充電自体にしばらく時間がかかるため、充電を開始してからその場を離れることがあります。その際に風などで自然に外れたり、他人が勝手に外したりすることを防ぐ目的もあります。</p><p>また、このロックが解除された瞬間にEVとのデジタル通信が切断されます。</p><p>さらに給電が行われている最中は充電ステーションとEV間で以下のデータがやりとりされています。</p><div class="scroll"><table><thead><tr><th>充電ステーションから送信</th><th>EVから送信</th></tr></thead><tbody><tr><td>充電シーケンス管理番号</td><td>充電シーケンス管理番号</td></tr><tr><td>出力可能電圧値</td><td>電池総容量</td></tr><tr><td>出力可能電流値</td><td>電池耐久上限値</td></tr><tr><td>電池不適合</td><td>最大充電時間</td></tr><tr><td>車両コネクタロック</td><td>充電電圧上限値</td></tr><tr><td>充電システム異常</td><td>車両充電可能</td></tr><tr><td>充電器状態</td><td>充電電流指令値</td></tr><tr><td>現在出力電圧値</td><td>充電システム異常</td></tr><tr><td>現在充電電流値</td><td>車両シフト位置</td></tr><tr><td>残り充電時間</td><td></td></tr><tr><td>充電器異常</td><td></td></tr><tr><td>充電システム故障</td><td></td></tr></tbody></table></div><p>参考：<a href="https://kikakurui.com/d6/D61851-24-2014-01.html">https://kikakurui.com/d6/D61851-24-2014-01.html</a></p><p>これらのデータを用いてリアルタイムで充電状態を監視し、異常が発生した場合は安全にかつ素早く停止するようになっています。</p><p>CHAdeMOは物理的な安全面への配慮が徹底している規格です。</p><h2 id="コンボ"><a href="#コンボ" class="headerlink" title="コンボ"></a>コンボ</h2><p>コンボは欧州で生まれた規格で、デジタル通信はPLCを用いて行われます。</p><p><a href="https://en.wikipedia.org/wiki/Combined_Charging_System">Wikipediaによると</a>規格上の最大出力は350kWになることがアナウンスされています。</p><p>また、コンボは料金の支払い方法に大きな違いがあります。</p><h2 id="コンボの充電シーケンス"><a href="#コンボの充電シーケンス" class="headerlink" title="コンボの充電シーケンス"></a>コンボの充電シーケンス</h2><p>コンボでは支払方法を予め設定しておくことができます。</p><p>支払方法によって充電手順が若干変わってきますが、以下で一例を示します。</p><ol><li>EVに支払方法や契約情報をセットしておく<ul><li>充電ステーションへの直接支払い</li><li>EVへの自動課金</li></ul></li><li>EVと充電ステーションを接続</li><li>EVから指定の支払方法を送信（ここではEVへの自動課金を選択したと仮定）</li><li>充電ステーションで支払い契約情報の承認</li><li>EVから充電許可信号を送信</li><li>充電ステーションから給電開始</li><li>充電終了</li><li>充電ステーションから課金額をEVに送信</li></ol><p>このように、コンボではユーザの認証情報が充電コネクタを通して行われるケースがあるため、情報セキュリティ的な観点で安全性が高い設計となっています。</p><h2 id="CHAdeMOとコンボの比較"><a href="#CHAdeMOとコンボの比較" class="headerlink" title="CHAdeMOとコンボの比較"></a>CHAdeMOとコンボの比較</h2><p>CHAdeMOとコンボを比較した表が以下になります。</p><div class="scroll"><table><thead><tr><th>項目</th><th>CHAdeMO</th><th>コンボ</th></tr></thead><tbody><tr><td>普及地域</td><td>世界中</td><td>欧州</td></tr><tr><td>最大出力</td><td>900kW</td><td>350kW</td></tr><tr><td>認証情報の通信</td><td>なし</td><td>あり</td></tr><tr><td>規格の設計思想</td><td>物理的な安全性重視</td><td>データのセキュリティ重視</td></tr></tbody></table></div><p>スペックを比較すると現状はCHAdeMOが優勢と言えそうです。<br>しかしEV市場は今後さらに盛り上がっていくと思われるので、今後どうなっていくか注目していきたいですね。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>最後まで読んでいただいてありがとうございました！</p><p>2021年末にはトヨタがEVを大量に発表するなど、国内でもEVに対する盛り上がりが本格的になってきました。将来的には日本でもガソリン車に対する課税や販売制限などが設けられたりするのでしょうか？</p><p>EV市場の今後の動向には目が離せませんね。</p><h1 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h1><ul><li><a href="https://monoist.itmedia.co.jp/mn/articles/1409/03/news003_2.html">https://monoist.itmedia.co.jp/mn/articles/1409/03/news003_2.html</a></li><li><a href="https://car.watch.impress.co.jp/docs/series/tech/554577.html">https://car.watch.impress.co.jp/docs/series/tech/554577.html</a></li><li><a href="https://www.chademo.com/wp/pdf/QCtebikiRev32.pdf">https://www.chademo.com/wp/pdf/QCtebikiRev32.pdf</a></li><li><a href="https://monoist.itmedia.co.jp/mn/articles/1407/02/news014_2.html">https://monoist.itmedia.co.jp/mn/articles/1407/02/news014_2.html</a></li><li><a href="https://www.chademo.com/ja/">https://www.chademo.com/ja/</a></li><li><a href="https://www.chademo.com/ja/chademo3-0/">https://www.chademo.com/ja/chademo3-0/</a></li><li><a href="https://en.wikipedia.org/wiki/Combined_Charging_System">https://en.wikipedia.org/wiki/Combined_Charging_System</a></li><li><a href="https://kikakurui.com/d6/D61851-23-2014-01.html">https://kikakurui.com/d6/D61851-23-2014-01.html</a></li><li><a href="https://kikakurui.com/d6/D61851-24-2014-01.html">https://kikakurui.com/d6/D61851-24-2014-01.html</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="電気自動車" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E6%B0%97%E8%87%AA%E5%8B%95%E8%BB%8A/"/>
    
    <category term="通信規格" scheme="https://future-architect.github.io/tags/%E9%80%9A%E4%BF%A1%E8%A6%8F%E6%A0%BC/"/>
    
    <category term="CHAdeMO" scheme="https://future-architect.github.io/tags/CHAdeMO/"/>
    
    <category term="コンポ" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.18 Release Notes みんなで読む会を開催しました</title>
    <link href="https://future-architect.github.io/articles/20220126a/"/>
    <id>https://future-architect.github.io/articles/20220126a/</id>
    <published>2022-01-25T15:00:00.000Z</published>
    <updated>2022-01-26T04:21:53.449Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220126a/top.png" alt="" width="600" height="261"><p>TIGの伊藤真彦です。</p><p>2022.1.14（金）に <a href="https://future.connpass.com/event/235852/">Go 1.18 Release Notes みんなで読む会</a> というイベントを開催しました。</p><h1 id="Go-1-18-Release-Notes-みんなで読む会"><a href="#Go-1-18-Release-Notes-みんなで読む会" class="headerlink" title="Go 1.18 Release Notes みんなで読む会"></a>Go 1.18 Release Notes みんなで読む会</h1><p>フューチャーでは定期的に勉強会などのイベントを開催しています。詳細は<a href="https://future.connpass.com/event/235852/">connpass</a>で確認できます、今後もイベントを開催予定ですので、ぜひご確認ください。</p><p>Go 1.18 Release Notes みんなで読む会はタイトルの通り<a href="https://tip.golang.org/doc/go1.18">Go 1.18のリリースノート</a>を読み、適宜解説を行うイベントです。</p><p>がっつりと資料を作りこむスタイルではなく、社内勉強会くらいの軽めのノリでオープンなイベントを開催するという試みでもありました。詳しくは、<a href="/articles/20220125a/">がんばらない手ぶらオンライン勉強会</a>の記事で説明しています。</p><p>視聴枠40人が埋まり、楽しくイベントを開催できました、今後はこういったスタイルのイベントを高頻度に開催できると良いかもしれませんね。</p><h1 id="リリースノートの内容を紹介"><a href="#リリースノートの内容を紹介" class="headerlink" title="リリースノートの内容を紹介"></a>リリースノートの内容を紹介</h1><p>イベントで取り上げたリリースノートの注目ポイントを軽く紹介します。内容はYoutube動画で公開予定です。</p><h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><p>Go1.18の目玉機能と言えばGenericsの導入です。</p><p>Genericsは既に<a href="https://go.dev/doc/tutorial/generics">チュートリアル</a>も公開されていますが、<a href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md">Type ParametersProposal</a>で提案された内容に従った新機能が提供されます。</p><p>リリースノートの内容だけでもある程度紹介にはなりますが、非常に大きく複雑な新機能であるため、詳しくは様々な資料を見たり実際に触れながら勉強していくと良いでしょう。</p><p>またリリースノートにはメソッド内の型宣言など、Go 1.18では提供しないが、Go 1.19で追加を検討している機能もあるなど注意事項も書かれています。</p><h2 id="Bug-fixes"><a href="#Bug-fixes" class="headerlink" title="Bug fixes"></a>Bug fixes</h2><p>勿論バグの修正もリリースノートには記載されています。</p><p>今回は使用されていない変数をコンパイラが検知できないエッジケースの修正などが含まれています。普通に使っていて同じ現象に遭遇する事はほぼ無いであろうケースが紹介されており、これはこれで勉強になります。</p><h2 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h2><p>Portとはビルド対象のアーキテクチャにまつわる話です。AMD64、RISC-Vなど各アーキテクチャ向けにビルドした際の挙動の変更などが記載されています。CPU命令セットの話など詳しい人と一緒に読んでいくと大きな学びになります。</p><p>GoはPlan 9対応が強いよね。理由は開発チームにメンバーがいて..といった小話をしました。</p><h2 id="Fuzzing"><a href="#Fuzzing" class="headerlink" title="Fuzzing"></a>Fuzzing</h2><p>Genericsの導入が大きいため他の変更は少ないと思いきや、その他様々な新機能も提供されています。</p><p>Go1.18からテストでFuzzingを行う事が可能になります。詳しくは<a href="https://go.dev/doc/fuzz/">fuzzing landing page</a>をご覧ください。</p><p>イベント当日で私が喋った部分です。</p><h2 id="Go-command"><a href="#Go-command" class="headerlink" title="Go command"></a>Go command</h2><p><code>go get</code>、<code>go instal</code>等の各種コマンドの細かな変更から、前述のFuzzing機能の追加によるコマンド追加などが説明されています。</p><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>ガベージコレクタの改善などが説明されています。</p><h2 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h2><p>コンパイル結果の改善やジェネリクスの追加によるコンパイル速度への影響などのトピックがあります。<br><code>-asan</code>オプションについてはリリースノートを読むまで知らなかった、という方も多いのではないでしょうか。</p><h2 id="Linker"><a href="#Linker" class="headerlink" title="Linker"></a>Linker</h2><p>リンカについては<code>-asan</code>オプションについて記述があります。</p><p>asanとはつまりAddress Sanitizerの事ですね。cgoを利用する際に起こり得るメモリエラーを検知できるようになります。</p><h2 id="Core-library"><a href="#Core-library" class="headerlink" title="Core library"></a>Core library</h2><p>Genericsの登場に伴い<code>constraints</code>パッケージが登場する事が大きなニュースではありますが、<code>net/netip</code>パッケージの登場などGenerics以外でも様々なニュースがありました。</p><p>Go 1.18はジェネリクスなど大きな目玉機能が多いので、コアライブラリなどの機能追加は減らそうという</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>リリースノートを読む会を開催しました</li><li>Genericsの導入が目玉ですがその他にも様々な変更があります</li><li><a href="https://future.connpass.com/">connpass</a>に今後のイベント予定を掲載しています</li></ul><p>次回は2022/1/28(金)に<a href="https://future.connpass.com/event/236138/">AWSを中心とした勉強会</a>を開催します。<br>ぜひご参加ください。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220126a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;261&quot;&gt;

&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;2022.1.14（金）に &lt;a</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
    <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
    <category term="開催レポート" scheme="https://future-architect.github.io/tags/%E9%96%8B%E5%82%AC%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Go1.18" scheme="https://future-architect.github.io/tags/Go1-18/"/>
    
  </entry>
  
  <entry>
    <title>がんばらない手ぶらオンライン勉強会</title>
    <link href="https://future-architect.github.io/articles/20220125a/"/>
    <id>https://future-architect.github.io/articles/20220125a/</id>
    <published>2022-01-24T15:00:00.000Z</published>
    <updated>2022-01-30T05:40:51.441Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220125a/video-conference-gb478cc247_640.jpg" title="Alexandra_KochによるPixabay<からの画像" alt="" width="640" height="384"><p>読書会とか勉強会をやるときに、どうしても負担が大きくなってくると継続が面倒になってきて消滅してしまったりします。継続のためには負担を減らすことが大切だな、と昔から考えてきました。最近実践している勉強会の時間以外の負担をなるべく減らす方法をいくつか紹介します。</p><h1 id="とちぎRuby式読書会"><a href="#とちぎRuby式読書会" class="headerlink" title="とちぎRuby式読書会"></a>とちぎRuby式読書会</h1><p>これは僕が栃木に住んでいた時に参加していた、とちぎRuby方式の勉強会です。対象の本を決めて、順番に音読しつつ、気になったところは質問したり、という方式です。事前に本を読んでまとめたりとかは不要です。</p><p>知見のある人が参加すると勉強会で得られるものはぐーんと濃くなります。とちぎRubyでは著者の咳さんがいる中でのdRuby本の読書会だったのでめちゃくちゃ刺激がありました。ちょっと経験値の高めな人が何人か入れるのが成功の秘訣かと思います。ただ、経験値が高い人が多すぎると、ｌ本とかから脱線しまくって、その人達の間の雑談で終わってしまいそうな気もするので、バランスも大切かもしれません。</p><p>この方式は密度の濃いドキュメントとか行間が広い文章を読むには適切かと思います。一方で、時間がかかるので「この部分はスキップしましょうか？」みたいなこともうまく入れるといいと思います。</p><p>この方式は、最近お客様と<a href="https://ja.reactjs.org/docs/getting-started.html">Reactの公式ドキュメントの読書会</a>をしていて採用しました。僕がちょうどクラス方式とか旧Reduxとか現Redux Toolkitとかいろいろ経験はしていたので、うまく盛り上げられたり、「ここは昔のクラス方式の話なので軽く読み飛ばしましょう」とか言えて、良い勉強会にできているのではないかな、と思っているところです。</p><h1 id="Amazon方式読書会"><a href="#Amazon方式読書会" class="headerlink" title="Amazon方式読書会"></a>Amazon方式読書会</h1><p>Amazonの会議方式として検索するとすぐ出てくるのが「まず黙読」というスタイルです。僕はAmazonで仕事したことはないので本当の公式なやり方はわからないのですが、15分とか時間を決めて黙読し、黙読しながらチャットに気になるところをコメント、その後30分とかで議論をする、みたいなスタイルで勉強会は行いました。</p><p>世の中の平均的な人は、音読する速度でしか文章の黙読もできないらしいのですが、まあ大学出ている人たちとかITの仕事をしている人ならほとんどは音読の数倍の速度で読めるはずなので、ゆっくり音読よりはちょっと長めの文章を短時間で進められます。本の1章（20-40ページ）を一回で、進めるみたいな感じでやりました。</p><p>この方式は議論が中心となるので、まったくの初心者からの勉強会には向かないかもしれません。書かれたコメントを拾ってファシリテーションしつつ、なされた議論も文章化してログに残したりと、ちょっと会議チックなスキルは必要になります。</p><p>ちょうど今、フューチャーメンバーと一緒に本を書いていて、その本のレビュー会をこの方式で行いました。直前にPDFを共有し（直前まで修正したりするので直前じゃないと共有できない）、黙読して議論し、それをissue化する、といった感じでした。</p><h1 id="その真ん中方式"><a href="#その真ん中方式" class="headerlink" title="その真ん中方式"></a>その真ん中方式</h1><p>黙読だと最初ちょっと黙ってしまうので、勉強会コンテンツというのを考えると、一般受けはあんまりしなそう、しかもコンテンツが英語だとじっくり音読も厳しいだろいうということもあり、順番に音読はするものの、ちょっと飛ばし気味にダイジェストで読んで議論する、みたいな方式にすれば社外向け勉強会でもできそうだ、という議論の末行ったのが先日行った<a href="https://future.connpass.com/event/235852/">Go 1.18リリースノートを読む会</a>の方式です。</p><p>ここ最近はGoリリースに合わせて会社のメンバーと技術ブログの連載を行っているのですが、その準備としてリリースノートを読んでおきたいね→勉強会にしようか→どうせなら社内に限定する必要ないし公開しちゃえ、という流れで企画しました。通常のフューチャーのTech Nightなんかは1か月近く前にはコンテンツを決めてConnpass上で募集をして・・・という感じでしたが、今回は実質作業は1週間ぐらい前から動いて、という感じでした（真野さんが全部やってくれました）。やろうということ自体は昨年末ぐらいから話はしてましたが、スライドとかも作らず、軽く事前に流し読みするぐらいで臨みました。</p><p>本当は音読も社外の人にも参加して欲しい気持ちはあった（当日も声掛けはしたが）のですが、いきなりだとそれも難しかろう、ということで一応フューチャーメンバーだけで回せるように場所ごとの担当を浅く決めていました。</p><p>なお、議論方式なので、今回はZoomのウェビナーではなく、ミーティングとして行っています。全員が発言できてしまうので、いきなりマイクオンでマツケンサンバとか歌いだす人がいると破綻したりというリスクもあり、人数が多すぎても難しいかも、ということで40人にさせてもらいました。</p><p>一人で読むのと比べると、何人かで読むとわからないところもコメントもらえたりしてみんなで読むのは確かにメリットはありました。また、当日参加した知人からは「勉強になりました」とコメントいただいたので、参加された方からも喜んでもらえたと思います。こちらのイベントのYoutube公開などは準備中ですので、お待ちください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ここ1-2か月ぐらいで試しているいくつかの方式について紹介しました。それぞれ、勉強会で扱うコンテンツの質やメンバーのスキルなど、いろいろな要因でメリット・デメリットが出てくるかと思います。今のところ、どれも成功したな、という実感はありました。僕はいぜん、つまみぐい勉強法という本を共著で出しましたが、勉強会への参加も、勉強そのものも、「燃え尽きないこと」が一番大事だというのが、書籍を書くにあたって考えたことでした。本が出てからもう12年ですが、当時から「勉強会疲れ」ということは言われていました。移動時間もないオンラインの「準備がいらない（少ない）手ぶら勉強会」というのは、当時では到達できなかったもう1つのテクニックですね。</p><p>今回書いたのは、どれもオンライン勉強会での開催を前提としています。オフラインでもできるとは思いますが、それはまたコロナが納まって、やってみて、新しい知見が見つかったらまたブログに書こうと思います。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://www.ohmsha.co.jp/book/9784274066092/">オーム社: dRubyによる分散・Webプログラミング</a></li><li><a href="https://future-architect.github.io/articles/20190729/">https://future-architect.github.io/articles/20190729/</a></li><li><a href="https://gihyo.jp/dp/ebook/2012/978-4-7741-5265-3">技術評論社: つまみぐい勉強法</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220125a/video-conference-gb478cc247_640.jpg&quot; title=&quot;Alexandra_KochによるPixabay&lt;からの画像&quot; alt=&quot;&quot; width=&quot;640&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>Docker Desktop有償化！どのライセンス契約する？</title>
    <link href="https://future-architect.github.io/articles/20220124a/"/>
    <id>https://future-architect.github.io/articles/20220124a/</id>
    <published>2022-01-23T15:00:00.000Z</published>
    <updated>2022-01-24T06:01:09.221Z</updated>
    
    <content type="html"><![CDATA[<p>大きな組織でのDocker Desktop有料化が発表されて、いよいよFreeからの切り替え期限が今月末に迫っています。「Docker DesktopだからLinux版は無償だからWSL2に入れれば無料」みたいな解説もされていますが、Linux版のDocker Desktopもすでにベータリリースされており、そのうちLinux版も遅かれ早かれ有償化されるかと思います。</p><p>で、ライセンスもいくつかあるけど、どれを選べばよいのかを検討した記録を公開します。なお、2022/01時点の情報を元に書いており、最新情報はDockerのサイトをご覧ください。</p><p><a href="https://www.docker.com/pricing">https://www.docker.com/pricing</a></p><h1 id="有償ライセンスは3種類"><a href="#有償ライセンスは3種類" class="headerlink" title="有償ライセンスは3種類"></a>有償ライセンスは3種類</h1><p>Freeはフューチャーの規模では使えませんので、除外してみると、Pro, Team, Businessがあります。2022年1月時点の一人/月あたりの金額は以下の通りです。</p><img src="/images/20220124a/image.png" alt="ライセンス一覧" width="1200" height="725" loading="lazy"><div class="scroll"><table><thead><tr><th>Type</th><th align="center">年契約</th><th align="center">月契約</th><th align="left">メモ</th></tr></thead><tbody><tr><td>Pro</td><td align="center">$5</td><td align="center">$7</td><td align="left">個人ごとの契約？</td></tr><tr><td>Team</td><td align="center">$7</td><td align="center">$9</td><td align="left">シート数契約。組織に人を追加したり外したりは比較的自由にできそう。最初の5ユーザーはProと同じ金額。</td></tr><tr><td>Business</td><td align="center">$21</td><td align="center">$21</td><td align="left">おそらくTeam同様？ボリュームディスカウントがあるらしい</td></tr></tbody></table></div><p>外部公開しないのであれば、イメージを置いておく機能とか権限管理とかはまああんまり大事じゃないというか、AWSを使うならECR、GCPを使うならGCRと、コンテナレジストリは代替があるし、実際にクラウド環境にサービスデプロイするならどうせそっちを使うことになりますし、大きな会社だとNexusとかを社内に立ててたりもするでしょう。GitHubのもありますし。なのであんまり大事じゃなさそうです。もちろん、そのあたりは会社のビジネスにもよるのでそこは各自判断で。</p><p>Proアカウントはボタンを押すといきなりクレジットカード入力画面が出てきます。個人ごとにチャージですので、会社で全員が各自ぽちぽち購入申請を上げて・・・みたいなのが必要です。全員がコーポレートカード持っているとかであればこれでもいいかもしれません。</p><img src="/images/20220124a/image_2.png" alt="支払い方法" width="951" height="719" loading="lazy"><p>Teamは組織名を決めて、人数（シート数、最小5ライセンス）を入れて、その後クレジットカード番号を入れることになります。複数人数分まとめて支払える点がProよりも良いですね。ただ、組織名はユニークでなければならず、チームごとに決済を分けたい、となるとチーム名も分かれることになるし、複数チームに所属する人はその分お金がかかるというのはデメリットです。まあDocker Hubにイメージをpushしたり、そこでプロジェクトのイメージ管理をしようとかしないで、ローカルでDocker Desktop使うだけなら、仕事上は複数チームでも1つのTeamに所属してお金を払っていたらまあ問題はないかと思います。大きなチーム（org）を内部でチームに分けることは可能っぽく、その場合は複数チームに入ってもお金は重複してかからなそうなので、なるべく多くのチームにして支払いをまとめたほうがよさそうです。プロジェクト按分とかを事後に行う必要があると思いますが。</p><p>なお、マニュアルを見ると、Teamではシート数が固定で、だれを入れるかは自由にあとから変更できるので、プロジェクトのメンバー入れ替えとかにも対応できそうです。シート数の増減は可能（増加は日割りで元の契約期間にプラス、減少は次回の支払い時にその分減額、月払い、年払い混在は不可）みたいな感じのようです。</p><p><a href="https://docs.docker.com/subscription/add-seats/">https://docs.docker.com/subscription/add-seats/</a></p><img src="/images/20220124a/image_3.png" alt="組織設定" width="952" height="673" loading="lazy"><p>Businessは試してないですが、おそらく営業とやりとりして見積して・・・という流れになるかと思います。請求書払いができるってのがBusinessのメリットしてあげられていますね。あとは、長らくComing Soonだったシングルサインオンが1/7ぐらいに突然やってきたので、それがあったほうが管理が楽、というのがあればBusinessがいいんじゃないでしょうか。</p><p>フューチャーのうちの部署ではとりあえず組織とかプロジェクト（フューチャーグループ各社をまたぐ場合）ごとに申請しよう、ということになったので、各プロジェクトごとにTeamでの申請かな、と思っているところです。実運用始まって実際にアカウント数とか見えてきたらどのぐらいディスカウントしてもらえるか問い合わせたうえでBusinessにアップグレードでもいいかもしれません。</p><h1 id="プロジェクト参画のリードタイムを減らすために"><a href="#プロジェクト参画のリードタイムを減らすために" class="headerlink" title="プロジェクト参画のリードタイムを減らすために"></a>プロジェクト参画のリードタイムを減らすために</h1><p>プロジェクトに参画してすぐで購入申請のリードタイムとか考えると、Dockerなしでもできる手立ては用意した方がいいのかな、と思っています。今のところは候補としてはpodmanですかね。BUILDKITは使えないようですが、docker-composeが使えるようにDocker互換性がさらに増えていますし、Kubernetesのマニフェストも食えます。</p><p><a href="https://rheb.hatenablog.com/entry/podman3_docker_compose">https://rheb.hatenablog.com/entry/podman3_docker_compose</a></p><p>もちろん、podmanを最初から全員使うという手もあるかもしれませんが、どうしても情報がまだまだ少ないし、まずは安定していて知見もたまっているDockerを使いつつ、アプリ本体をビルドとか開発環境整備用途ではなくて、ビルド済みのミドルウェアの起動、アプリはローカルネイティブに起動ぐらいの用途にとどめておこうかな、と考えているところです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;大きな組織でのDocker Desktop有料化が発表されて、いよいよFreeからの切り替え期限が今月末に迫っています。「Docker DesktopだからLinux版は無償だからWSL2に入れれば無料」みたいな解説もされていますが、Linux版のDocker</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="ライセンス" scheme="https://future-architect.github.io/tags/%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Best Blogger of the Year 2021 受賞者を発表します</title>
    <link href="https://future-architect.github.io/articles/20220121a/"/>
    <id>https://future-architect.github.io/articles/20220121a/</id>
    <published>2022-01-20T15:00:00.000Z</published>
    <updated>2022-01-22T02:20:27.473Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220121a/badge-gf28962ed1_640.png" alt="" width="640" height="320"><p>こんにちは。技術ブログ運営の伊藤です。</p><p>今回は、社内の取り組みであるBest Blogger of the Yearの紹介と、2021年の受賞者を発表します。</p><h2 id="Best-Blogger-of-the-Year（べすぶろ）とは"><a href="#Best-Blogger-of-the-Year（べすぶろ）とは" class="headerlink" title="Best Blogger of the Year（べすぶろ）とは"></a>Best Blogger of the Year（べすぶろ）とは</h2><p>Best Blogger of the Year（べすぶろ）は、社外に影響を与えた記事を執筆した人を表彰する仕組みとして2020年より開催しています。べすぶろは技術ブログ部門と<a href="https://note.future.co.jp/">未来報</a>（フューチャーの人を紹介するオウンドメディア）との共催で開催します。<br>記事の選定基準は、</p><ul><li><strong>品質</strong>：読者が望む内容を適切に文章に落とし込んで価値ある記事である。</li><li><strong>ユニーク</strong>：記事の固有性がある。唯一無二の記事になっている。</li><li><strong>記事数</strong>：発信に積極的に取り組んでいる。数多くの記事を出している。</li><li><strong>影響度</strong>：記事によって何らかの影響が可視化される。（多く閲覧された（PV）、行動変容があった（内定承諾に影響した、ビジネス展開に影響した）等）</li></ul><p>の4つを基準とし、3名選出しました。</p><p>選出された3名の中での順位はつけてはいないです。2021年は105名の寄稿者がいましたので、選出されるためにはよっぽど目立った記事を書くか、定期的なアウトプットが求められたのかなと思います。</p><h2 id="2021年受賞者の発表"><a href="#2021年受賞者の発表" class="headerlink" title="2021年受賞者の発表"></a>2021年受賞者の発表</h2><p>さて、2021年のべすぶろ受賞者を発表します。寄稿数順に記載しています。</p><div class="scroll"><table><thead><tr><th>名前</th><th>寄稿数</th><th>代表記事</th><th>選出理由</th></tr></thead><tbody><tr><td>澁川喜規</td><td>32</td><td><a href="/articles/20210611a/">サーバーアプリ開発環境(Python／FastAPI)</a></td><td>今年1番記事を寄稿いただき、数々の記事ではてブのランキング入りを果たした。GoやPythonの特定の言語だけでなく、近年盛り上がりをみせるFlutterの記事も複数公開し、技術の幅を魅せるきっかけにもなっている。</td></tr><tr><td>伊藤真彦</td><td>31</td><td><a href="/articles/20210812a/">Go 1.17のtesting新機能</a></td><td>特定の分野の記事に問わず、AWSやGo言語、さらには自作OSSなどのネタも投稿。技術ブログ主催の連載にも数多く参加し、資格の合格体験記やイベントの登壇レポートなど、フューチャーとしての技術力の向上にも寄与していたため。</td></tr><tr><td>枇榔晃裕</td><td>2</td><td><a href="/articles/20210621a/">どうしてHTML5が廃止されたのか</a></td><td>フロントエンド連載にて寄稿いただいた、HTML5の廃止を題材とした記事は、連日にわたってはてブへのランクインし、技術ブログのはてブ数では歴代1位になった。また、Twitterのトレンド入りも果たし、業界の中でも話題になった。</td></tr></tbody></table></div><p>2021年はこの3記事を選出しました。いずれもはてブのランク入りを果たしたり、Twitterで話題になった記事なので、皆さんも1度は読んだ記事も上がっているのではないでしょうか？</p><h2 id="2020年受賞者に付いて"><a href="#2020年受賞者に付いて" class="headerlink" title="2020年受賞者に付いて"></a>2020年受賞者に付いて</h2><p>2020年も社内では表彰していたものの記事として公開はしていなかったため、こちらも本記事で合わせて公開します。全体の寄稿者は81名でした。</p><div class="scroll"><table><thead><tr><th>名前</th><th>寄稿数</th><th>代表記事</th><th>選出理由</th></tr></thead><tbody><tr><td>澁川喜規</td><td>21</td><td><a href="/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編 </a> など多数</td><td><a href="/articles/20200910/">イベント登壇</a>から技術ブログの各種関連記事まで幅広いジャンルで記事投稿があり、記事に対する反響も大きくSNSでシェアなど拡散がみられる。寄稿数がトップ。PVも2万超えのものもあり、認知度向上に寄与している。</td></tr><tr><td>多賀聡一朗</td><td>6</td><td>AirFlow記事全般</td><td><a href="/tags/Airflow/">AirFlow記事</a>は日本語トップの検索結果になるものが多く。影響力が大きい。<a href="/articles/20200708/">Zuora記事</a>は社外パートナー推進のきっかけにもなり、ビジネスにも影響があった。</td></tr><tr><td>ヴーホアン・ミン</td><td>1</td><td><a href="/articles/20200203/">PlantUML規約</a></td><td>おそらく世界初のPlantUML規約を公開し、エポックメーキングとなった。GitHubに<a href="https://github.com/future-architect/puml-themes">OSS</a>としても公開している。幅広い人に向けてフューチャーの知名度と、良い意味での技術へのこだわりをアピールできた。</td></tr></tbody></table></div><p>なんと、澁川さんが2年連続での受賞となります！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>フューチャー技術ブログは社員の有志という形で寄稿されて成り立っているので、今後もこういった称える仕組みを継続していければと思います。<br>また、皆さんが気になった記事はコメントやシェアをしていただくと、励みにもなりますので、今後ともよろしくお願いいたします！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220121a/badge-gf28962ed1_640.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;320&quot;&gt;

&lt;p&gt;こんにちは。技術ブログ運営の伊藤です。&lt;/p&gt;
&lt;p&gt;今回は、社内の取り組みであるBest</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="ベスブロ" scheme="https://future-architect.github.io/tags/%E3%83%99%E3%82%B9%E3%83%96%E3%83%AD/"/>
    
  </entry>
  
  <entry>
    <title>数字と振り返るフューチャー技術ブログ（2021）</title>
    <link href="https://future-architect.github.io/articles/20220120a/"/>
    <id>https://future-architect.github.io/articles/20220120a/</id>
    <published>2022-01-19T15:00:00.000Z</published>
    <updated>2022-01-23T07:00:56.866Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220120a/top.png" alt="" width="600" height="441" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>技術ブログ運営の真野です。年があけましたが、<a href="/articles/20201127/">2020年</a>に引き続き2021年の技術ブログの振り返りをお届けしたいと思います。</p><h2 id="キーメトリクスについて"><a href="#キーメトリクスについて" class="headerlink" title="キーメトリクスについて"></a>キーメトリクスについて</h2><p>この技術ブログ運営の指標としてPVやSNSでのリアクション数などは追っていません。理由は次です。</p><ol><li>PVを真面目にあげようとすると、タイトル釣りやエッセー的な内容を増やしたくなり、趣旨であるフューチャーのITコンサルティング業務を通して得た知見を共有するという趣旨が薄まる恐れがある</li><li>PVが少なくても、特定の領域を追っている人に刺さる記事は重要であると認識していること</li><li>一般ウケしない記事を書いてしまっても次回作以降で、バズる記事を書いてくれる人もいる。あまりそこに囚われないようにしたい</li><li>運営上、PVやSNSでのリアクションを追わないけど、バズった場合はチームで礼賛すれば良い</li></ol><p>そのため、このブログで気にしているのは以下です。</p><ul><li><strong>記事の投稿数/月</strong></li><li><strong>寄稿者のユニークユーザ（UU）数/年</strong></li><li><strong>連載企画の本数および、それぞれの参加人数</strong></li></ul><p>投稿数がある程度活発であれば、IT技術組織的な活動がある一面ではヘルシーに行われていると思うからです。さらに寄稿者UUですが、寄稿者が増えれば増えるほど様々な観点の記事が増えるためユニークな媒体になると考えており、広く当社の技術的な成果を伝えられるのでは？と考えています。連載企画も発信内容の偏りを意思入れで散らすことや、単発だと出てこないようなテーマを拾い上げるキッカケにしたいため、企画本数やそこに参加しているメンバーの数にはこだわっていきたいと思っていました。</p><p>年間目標はなんとなく300本にしました。実績は281本で届きませんでしたが、2020年から1.5倍になっており大健闘かとおもっています。</p><div class="scroll"><table><thead><tr><th>year</th><th>objectives</th><th>results</th></tr></thead><tbody><tr><td>2021</td><td>300</td><td>281</td></tr><tr><td>2020</td><td>48</td><td>190</td></tr><tr><td>2019</td><td>24</td><td>75</td></tr></tbody></table></div><p>月別で見てもコンスタントに公開できており、2022年もこのペースを守りたいと思っています。</p><img src="/images/20220120a/月別投稿数.png" alt="月別投稿数.png" width="1200" height="387" loading="lazy"><p>寄稿者UU数ですが、2021年は105名。これもかなりがんばれたと思います。フューチャーは1000名を超えるITコンサルタントが所属しているため、このうち1割程度が関わったということでしょうか。2022年は130名を目指したいと思います。</p><img src="/images/20220120a/寄稿者数の推移.png" alt="寄稿者数の推移.png" width="1200" height="245" loading="lazy"><p>連載企画は<a href="/articles/20210112/">技術ブログの2021年の連載予定を発表します </a>にある通り、14本開催できました。CNCFは惜しくも開催できませんでした。2022年は月1ペースでの開催を行う予定。スポットで2,3本増やしていく予定です。今の運営的には月2開催だとかなり厳しいので、月1程度がサステナブルです。</p><p>なお、繰り返しですがSNSなどで盛り上がった記事についてはできる限り社内で褒め合えるようにシェアしています。</p><h2 id="PV数"><a href="#PV数" class="headerlink" title="PV数"></a>PV数</h2><p>PVを追っていないと言いながらも共有です。上がると嬉しいですね。6月はスパイクして32万PV/月を声、2021年下期は12～14万PV/月でした。2020年と比較すると、記事のストック効果もあり1~2割成長しているのかな？と思っています。</p><img src="/images/20220120a/PV.png" alt="PV.png" width="1200" height="206" loading="lazy"><p>6月スパイクの要員は <a href="/articles/20210621a/">どうしてHTML5が廃止されたのか </a> の記事がバズったからです。素晴らしい吸引力。</p><h2 id="ベストブロガーオブザイヤー"><a href="#ベストブロガーオブザイヤー" class="headerlink" title="ベストブロガーオブザイヤー"></a>ベストブロガーオブザイヤー</h2><p>年1ペースで、技術ブログからは3名、発信力があった方を讃えています。ギフト券をプレゼントもしているようです。</p><p>2020年に引き続き、<a href="https://future-architect.github.io/authors/%E6%BE%81%E5%B7%9D%E5%96%9C%E8%A6%8F/">澁川さん</a>が素晴らしい貢献をしてくれています。社外にもファンが多数いらっしゃるということも理解できるほど、良記事を大量にアウトプットされていて尊敬します。これについては<a href="/articles/20220121a/">別の記事</a>で紹介しています。</p><h2 id="人気の記事分析"><a href="#人気の記事分析" class="headerlink" title="人気の記事分析"></a>人気の記事分析</h2><p>PVで見る人気の記事や、2020年いちばん寄稿してくれた人は？といった調査を2020年は行いましたが、これはブログの機能として実装したので、だれでも簡単に見ることができるようになりましたので、今年はスキップします。</p><h2 id="記事・寄稿者を増やす取り組み"><a href="#記事・寄稿者を増やす取り組み" class="headerlink" title="記事・寄稿者を増やす取り組み"></a>記事・寄稿者を増やす取り組み</h2><p>ブログ連載自体に、地道に改善を続けています。</p><h3 id="1-Bar-Techblogの開催"><a href="#1-Bar-Techblogの開催" class="headerlink" title="1. Bar Techblogの開催"></a>1. Bar Techblogの開催</h3><img src="/images/20220120a/bar_techblogの募集ページ.png" alt="bar_techblogの募集ページ" width="959" height="523" loading="lazy"><p>社内向けで技術ブログの運営についての意見吸い上げや、寄稿に悩んでいる人の相談室を2回開催しました。ブログ機能についても色々フィードバックをもらい、機能上はかなり強化できたので、ユーザーの声を聞く大事さを学びました。</p><p>このかっこいい画像はもうひとりの技術ブログ運営の伊藤太斉が作ってくれて、企画もぜんぶやってくれました。</p><h3 id="2-ブログ機能のアップグレード"><a href="#2-ブログ機能のアップグレード" class="headerlink" title="2. ブログ機能のアップグレード"></a>2. ブログ機能のアップグレード</h3><p>記事数がここ2年で3倍以上になっているため、記事を探しやすくする工夫や、回遊率を上げるための施策をかなり増やしました。</p><ol><li>記事検索ボックスの追加</li><li>Google AnalyticsのPVから、<a href="https://future-architect.github.io/#popular">人気の記事を週・月・年別</a>に追加</li><li>各記事に対して、タグ情報から関連する記事を表示</li><li>ブログ内で被リンクされている記事を表示</li><li>著者による記事の絞り込み</li><li>著者ページに投稿頻度のグラフなどメトリクス表示</li><li><a href="https://future-architect.github.io/authors/">著者一覧に投稿数のランキング</a>を表示</li><li>最近投稿された記事に NEW ラベルを表示</li><li>トップページの表示件数を10→25に変更</li><li>記事のサイドバーに目次（toc）を表示</li></ol><p>他にも様々な対応（CSS調整、アクセシビリティ、数式表示の最適化、記事のタグ付け改善）などを継続的に行っています。</p><p>Lighthouseによる検査も定期的にチェックしています（ユーザー補助がちょっと下がっていることにこの記事を書いていて気が付きました）。</p><img src="/images/20220120a/lighthouse結果.png" alt="lighthouse結果.png" width="1200" height="280" loading="lazy"><p>最適化の余地はまだまだ多分に残っていますが、ある程度快適に参照できるようにはなっているのではないでしょうか。</p><h3 id="3-Future-Tech-Night（勉強会）との連動"><a href="#3-Future-Tech-Night（勉強会）との連動" class="headerlink" title="3. Future Tech Night（勉強会）との連動"></a>3. Future Tech Night（勉強会）との連動</h3><p><a href="https://future.connpass.com/">connpassのフューチャーページ</a> で募集している勉強会との連動を強化しました。できる限り毎回、登壇者レポートを記載してもらうようにしています。勉強会を開催して終わりではなく、登壇資料・登壇レポートの添付で、資料の添付も2021年だけで40ほど増えました。引き続きよりオープンな運営を目指したいと思います。次は動画撮影しYoutubeでの公開も目指しています。</p><h3 id="4-連載のインデックス記事"><a href="#4-連載のインデックス記事" class="headerlink" title="4. 連載のインデックス記事"></a>4. 連載のインデックス記事</h3><p>ブログ連載のインデックス記事を丁寧に作成するようにしました。<a href="/articles/20210112/">インデックスをまとめたインデックス記事</a>もあります。本数ベースでいくと水増しですが、こういった丁寧な運用をすると、リンクのシェアなども行いやすくなるので、記事数が増えてきて初見の人からすると記事を相対的に見つけにくくなっていることを踏まえ、おまとめページもできる限り同期をとってメンテナンスしていきます。</p><h2 id="2022年に向けて"><a href="#2022年に向けて" class="headerlink" title="2022年に向けて"></a>2022年に向けて</h2><p>数を追ってもということはあるのですが、ブログ本数300本、著者UU数130人を目指したいと思っております。社員のみなさまの協力を、、なにとぞお願いします🙏</p><p>7/18にテックカンファレンスを開催したいと思っており、こちらも技術ブログ側にレポートや動画を載せていきたいです。</p><p>技術ブログでの発信を通して、このブログを見てくださる皆まさに少しでもお役に立ちたいと思っています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>2021年は順調に運営できた。ブログ自体の機能も強化し改善サイクルを回せた。<br>2022年も地道な改善を回し続けることと、カンファレンス開催とコラボレーションしていきます。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220120a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;441&quot; loading=&quot;lazy&quot;&gt;


&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="PV" scheme="https://future-architect.github.io/tags/PV/"/>
    
  </entry>
  
  <entry>
    <title>DatoCMSでポートフォリオをサクッとつくる</title>
    <link href="https://future-architect.github.io/articles/20220119a/"/>
    <id>https://future-architect.github.io/articles/20220119a/</id>
    <published>2022-01-18T15:00:00.000Z</published>
    <updated>2022-01-19T11:11:55.157Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220119a/color_full_logo.png" alt="" width="1200" height="371" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の宮永です。</p><p>今回はタイトルの通り、Headless CMSサービスである<a href="https://www.datocms.com/">DatoCMS</a>をつかってポートフォリオをサクッと作成する方法をご紹介します。</p><p>この記事をお読みの皆様はご自身のポートフォリオサイトはお持ちでしょうか？</p><p>GitHubPagesやWordPressなど、コーディングを行わずともWebサイトを作成できるサービスはたくさんあります。上記のようなサービスは比較的低コストで簡単にウェブサイトを作成ができる一方で拡張性やフロントエンドの自由度は高くありません。フロントエンドを自力でカスタマイズしつつ、お手軽にサイトを作りたいと思ったとき、次に考えるサービスはHeadless CMSの類いであると思います。今回紹介する<a href="https://www.datocms.com/">DatoCMS</a>もHeadless CMSサービスの一つです。</p><p>本記事では<a href="https://www.datocms.com/">DatoCMS</a>を使用してポートフォリオサイトを作成する方法をハンズオン形式で紹介します。</p><p>サービス登録に必要なのはGitHubアカウントとメールアドレスだけなので、記事を読み進めながら取り組んでいただければと思います。</p><h1 id="Headless-CMSとは"><a href="#Headless-CMSとは" class="headerlink" title="Headless CMSとは"></a>Headless CMSとは</h1><p>Headless CMSについての解説が和製Headless CMSサービスである<a href="https://blog.microcms.io/what-is-headlesscms/">microCMSのブログ記事</a>に記載されていたので以下引用します。</p><blockquote><p>ヘッドレスの「ヘッド」は、ビュー（表示する画面）を指します。ヘッドレスなので、ビューの無いCMSということになります。<br>ビューがないとはどういう事でしょうか？<br>そもそもCMSとはContent Management Systemの略で、つまりはコンテンツ管理システムを指します。従来のCMSはコンテンツを入稿するシステムとコンテンツを表示するビューが合わさったものでした。<br>最も代表的な例としてはWordPressが挙げられます。また、はてなブログやQiita、NoteなどもCMSです。<br>CMSのビュー（見た目）には以下の三種類があります。<br>サービス固有の画面（Qiita、Note、Mediumなど）<br>テンプレートを選択できるもの（WordPress、はてなブログなど）<br>自由に作成可能なもの（WordPress）<br>※ はてなブログ等もCSSの範囲であれば自由に見た目を変更可能<br>※ WordPressはHTMLの骨組みから自由に作成可能<br>このビューに当たる部分が無いのがヘッドレスCMSです。</p></blockquote><p>例えば、ブログサイトの作成を考えるとき、入稿システムはHeadless CMSに預けて、ビューの管理をコーディング（Vue.jsやNuxt.jsなど）で作成するといった事例が考えられます。バックエンドの開発を自分で行わずともブログサイトを作成できるのはとても便利ですね。</p><h1 id="DatoCMSをはじめる"><a href="#DatoCMSをはじめる" class="headerlink" title="DatoCMSをはじめる"></a>DatoCMSをはじめる</h1><p>それでは早速<a href="https://www.datocms.com/">DatoCMS</a>をはじめましょう。こちらの<a href="https://dashboard.datocms.com/signup">リンク</a>からサービスの登録ができます。</p><p>なんと登録するときにクレジットカードその他個人情報の登録は不要です。メールアドレスと名前を用意すればすぐにサービスを始めることができます。</p><img src="/images/20220119a/image.png" alt="ユーザ登録" width="1200" height="631" loading="lazy"><p>登録が完了したら、下記のページに遷移します。[New project]で新規プロジェクトを作成しましょう。</p><img src="/images/20220119a/image_2.png" alt="New project" width="1174" height="909" loading="lazy"><p>新規プロジェクトを作成すると、スクラッチから作成する「Blank project」と「Demo project」の2つを選択することができます。<br>「Demo project」にはフレームワークや用途に沿って複数のスタータープロジェクトが用意されています。</p><img src="/images/20220119a/image_3.png" alt="Demo project" width="991" height="1007" loading="lazy"><p>今回は「サクッと」ポートフォリオを作成したいので<a href="https://www.datocms.com/marketplace/starters/vue-js-profile-card">Vue.js Profile Card Website</a>を選択します。</p><p>[Start project]を選択すると以下のようなポップアップ画面が立ち上がります。ホスティングサービスはNetliftyとVercelを選ぶことができます。今回はNetliftyを選択します。</p><p>プロジェクト名とホスティングサービスの入力が完了したら、ご自身のGitHubアカウントとNetliftyとを連携します。</p><img src="/images/20220119a/Screenshot_from_2022-01-15_15-20-56.png" alt="Create demo project" width="957" height="610" loading="lazy"><p>[Create project]を選択すると、スタータープロジェクトのフォークとNetlifyへのデプロイがはじまります。</p><img src="/images/20220119a/image_4.png" alt="Netlifyデプロイ" width="946" height="607" loading="lazy"><p>プロジェクトの作成が完了すると以下のような画面に切り替わります。この時点でサイトはデプロイされています。</p><p>自身のGitHubリポジトリにフォークされたプロジェクトからフロントエンドを編集することができます。</p><img src="/images/20220119a/image_5.png" alt="GitHubリポジトリにフォークされたプロジェクト" width="952" height="587" loading="lazy"><p>以下がデフォルトのサイトの画面です。</p><p><a href="https://vuejs-datocms-demo.netlify.app/">https://vuejs-datocms-demo.netlify.app/</a></p><img src="/images/20220119a/image_6.png" alt="image.png" width="1200" height="612" loading="lazy"><p>すでにかっこいいですね。</p><p>もちろんレスポンシブにも対応しています。</p><img src="/images/20220119a/responsive.png" alt="responsive" width="791" height="632" loading="lazy"><p>それでは、このスタータープロジェクトをベースにカスタマイズしていきます。</p><p>まずはローカルでクローンしたプロジェクトを開き、<code>.env</code>に<code>API_KEY</code>を格納します。<br>このとき、キャッシュがクリアされていないと<code>.gitignore</code>に<code>.env</code>が記載されていてもリモートにアップロードされてしまうので注意してください。🙅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>を実行したあと、以下コマンドでサーバーを起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><code>http://192.168.10.108:8080/</code>で確認ができると思います。</p><p>まずはコーディングは行わず、スタータープロジェクトで実装されたモデルを変更していきます。</p><p>プロジェクトにログインすると下記画像のような編集画面に遷移します。<br><code>Profile</code>、<code>Theme</code>、<code>Social</code>は初期設定で実装されているものです。<code>Product</code>は私が新規に作成しました。</p><p>下記の画面では<code>Profile</code>を選択しています。初期設定では<code>Photo</code>にRebeccaさんの写真が登録されています。</p><p>写真や名前などプロフィール欄を変更します。</p><img src="/images/20220119a/image_7.png" alt="プロフィール" width="1200" height="610" loading="lazy"><p>同様にして、<code>Theme</code>、<code>Social</code>も変更して[Save]を押下します。正しく登録ができており、<code>API_KEY</code>が設定されていれば下図のようにローカルで変更を確認することができます。</p><p>余談ですが、背景画像は<a href="https://unsplash.com/">Unsplash</a>から<a href="https://unsplash.com/@sumaidsingh?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Sumaid pal Singh Bakshi</a>さんの写真を使用しています。</p><img src="/images/20220119a/image_8.png" alt="背景画像" width="1200" height="610" loading="lazy"><p>次に新規にモデルを作成します。</p><p>「Settings」に遷移し、画面下部のプラスマークからモデルを追加できます。</p><img src="/images/20220119a/image_9.png" alt="Settings画面" width="1200" height="609" loading="lazy"><p><code>Product</code>の中身は<code>Name</code>、<code>URL</code>、<code>Image</code>としています。</p><img src="/images/20220119a/image_10.png" alt="Product" width="1200" height="611" loading="lazy"><p>「Content」に再度遷移するとメニューアイテムに<code>Product</code>が追加されています。<br><code>Product collection</code>に成果物を追加していきます。</p><img src="/images/20220119a/image_11.png" alt="Product collection" width="1200" height="609" loading="lazy"><p>編集画面は下図のようになります。</p><img src="/images/20220119a/image_12.png" alt="Product編集画面" width="1200" height="772" loading="lazy"><p>次にコーディングに移ります。</p><p><code>src/</code>配下の<code>App.vue</code>のクエリ文に以下を追記します。</p><figure class="highlight js"><figcaption><span>graphql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">products</span>: allProducts &#123;</span><br><span class="line">    name</span><br><span class="line">    url</span><br><span class="line">    image &#123;</span><br><span class="line">      <span class="attr">productImage</span>: <span class="function"><span class="title">responsiveImage</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        imgixParams: &#123; w: <span class="number">100</span>, h: <span class="number">100</span>, fit: crop, crop: faces, auto: format &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">      </span>)</span> &#123;</span><br><span class="line">        ...imageFields</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v-forで配列を表示するようにします。</p><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;profile in data.products&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;link&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:href</span>=<span class="string">&quot;profile.url&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">&quot;profile.name&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">      pt-4</span></span></span><br><span class="line"><span class="string"><span class="tag">      text-base</span></span></span><br><span class="line"><span class="string"><span class="tag">      font-bold</span></span></span><br><span class="line"><span class="string"><span class="tag">      flex</span></span></span><br><span class="line"><span class="string"><span class="tag">      items-center</span></span></span><br><span class="line"><span class="string"><span class="tag">      justify-center</span></span></span><br><span class="line"><span class="string"><span class="tag">      lg:justify-start</span></span></span><br><span class="line"><span class="string"><span class="tag">    &quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; profile.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lg:w-2/5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datocms-image</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:data</span>=<span class="string">&quot;profile.image.productImage&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;rounded-none lg:rounded-lg shadow-2xl hidden&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ここまでコーディングしたら、保存して<code>http://192.168.10.108:8080/</code>にアクセスします。</p><p>実装が正しければ新たに追加した<code>Product</code>の情報が反映されているはずです。</p><img src="/images/20220119a/image_13.png" alt="image.png" width="1200" height="629" loading="lazy"><p>きちんと反映されていますね。 🎉</p><p>あとはモデルを追加しつつ、コーディングを進めればオリジナルのウェブサイトを作成することができます。今回はここまでとします。</p><p>実装したコードはこちらに格納しています。</p><p><a href="https://github.com/orangekame3/datocms-orangekame3-portfolio">https://github.com/orangekame3/datocms-orangekame3-portfolio</a></p><p>また、今回作成したポートフォリオは<a href="https://orangekame3.blog/">こちら</a>です</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回はHeadless CMSサービスである<a href="https://www.datocms.com/">DatoCMS</a>を使用して、ポートフォリオを「サクッと」作成する方法をハンズオン形式で紹介しました。</p><p>DatoCMSの機能は今回全く紹介できていないので、また機会を見て記事にまとめられればと思います。DatoCMSには各種フレームワークに沿ったスタータープロジェクトが充実していたため、低コストで見栄えの良いものを作成できました。</p><p>ご自身のポートフォリオを作成する手段の一つとしてDatoCMSを試してみてはいかがでしょうか。</p><p>最後までお付き合いいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220119a/color_full_logo.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;371&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
    <category term="CMS" scheme="https://future-architect.github.io/tags/CMS/"/>
    
    <category term="HeadlessCMS" scheme="https://future-architect.github.io/tags/HeadlessCMS/"/>
    
    <category term="DatoCMS" scheme="https://future-architect.github.io/tags/DatoCMS/"/>
    
  </entry>
  
  <entry>
    <title>2022年のテック勉強会スケジュールを発表します</title>
    <link href="https://future-architect.github.io/articles/20220118a/"/>
    <id>https://future-architect.github.io/articles/20220118a/</id>
    <published>2022-01-17T15:00:00.000Z</published>
    <updated>2022-02-04T02:54:22.867Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220118a/top.jpeg" alt="" title="Alexandra_KochPixabayによるPixabayからの画像" width="640" height="421" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。 <a href="/articles/20210314/">2021年</a>に続きまして、2022年のフューチャーが主催するIT技術系の勉強会について発表いたします。</p><div class="scroll"><table><thead><tr><th>#</th><th>Date</th><th>Category</th><th>Name</th><th>Memo</th></tr></thead><tbody><tr><td>2</td><td>01/14(金)</td><td>connpass</td><td><a href="https://future.connpass.com/event/235852/">Go ReleaseNotes 読む会</a></td><td>澁川、真野、辻、伊藤m</td></tr><tr><td>3</td><td>01/28(金)</td><td>connpass</td><td><a href="https://future.connpass.com/event/236138/">AWS CodePipelineと新聞向けCMS構築事例</a></td><td>渡邉、岡田、原</td></tr><tr><td>4</td><td>02/17(木)</td><td>connpass</td><td><a href="https://future.connpass.com/event/237902/">Terraform</a></td><td>伊藤t、棚井</td></tr><tr><td>6</td><td>03/17(木)</td><td>connpass</td><td>GCP</td><td>TBD、TBD</td></tr><tr><td>7</td><td>04/21(木)</td><td>connpass</td><td>Flutter</td><td>宮崎、藤田</td></tr><tr><td>5</td><td>04/22(金)</td><td>社内イベント</td><td>LT2022 Winter</td><td>TBD×6名</td></tr><tr><td>8</td><td>05/19(木)</td><td>connpass</td><td>【公募】Goで自分で作ったOSSを自慢会</td><td>公募</td></tr><tr><td>9</td><td>06/16(木)</td><td>connpass</td><td>Svelte</td><td>TBD、TBD</td></tr><tr><td>10</td><td>07/18(月)</td><td>Youtube配信</td><td>Future Tech Conference</td><td>30本の動画配信を予定</td></tr><tr><td>11</td><td>07/28(木)</td><td>connpass</td><td>Go言語</td><td>TBD、TBD</td></tr><tr><td>12</td><td>08/18(木)</td><td>connpass</td><td>データレイク</td><td>TBD、TBD</td></tr><tr><td>13</td><td>08/26(金)</td><td>社内イベント</td><td>LT2022 Summer</td><td>TBD×6名</td></tr><tr><td>14</td><td>09/22(木)</td><td>connpass</td><td>Java/Java18</td><td>藤野、星</td></tr><tr><td>15</td><td>10/20(木)</td><td>connpass</td><td>Reactのドキュメントを読む会</td><td>澁川、TBD</td></tr><tr><td>16</td><td>11/24(木)</td><td>connpass</td><td>AWS</td><td>TBD、TBD</td></tr></tbody></table></div><p>2021年は、<a href="/articles/20211004a/">ナイルさん</a>と<a href="/articles/20211014a/">トップゲート</a>さんと合同LTイベントを企画しました。こういった合同勉強会もオープンに開催したいと考えています。フューチャーの本社がある東京都品川区の大崎にも、Go言語をよく使っている会社さんが増えているということで、osaki.go のようなイベントも開催できたらね、と話しています。</p><p>※ LTは視聴者枠で一般募集も検討していますので一応掲載しました。</p><h2 id="Future-TechNight"><a href="#Future-TechNight" class="headerlink" title="Future TechNight"></a>Future TechNight</h2><p><a href="https://future.connpass.com/">connpass</a> で募集している技術系のイベントは、Future Tech Nightという名称で月1程度のペースで開催しています。「フューチャーが業務を通して得た技術的な知見やナレッジを共有する勉強会」がテーマです。なるべく<a href="https://future.connpass.com/presentation/">発表資料</a>はすぐに公開すること、<a href="/tags/TechNight/">登壇レポート</a>も1ヶ月以内で公開することを目標にしていました。2022年はYoutubeに動画も公開するように運営を整えていますので、時間が合わなくて参加できない！といった方にも好きな時間で視聴できるように環境を整えていきます。connpassは約2週間からオープンするようにしますので、フォローよろしくおねがいします。（2021年初期では300名ほどでしたが、2022年には1300名を超えて運営として喜んでいます。）</p><p>また、「Go ReleaseNotes 読む会」のようにフューチャー社内の雰囲気が伝わるような、より双方向な勉強会の開催頻度も増やしていこうと考えています（本番は緊張しますが、準備は楽できますのでもっと開催頻度を増やせるかも知れません！）。</p><p>ハッシュタグは引き続き <a href="https://twitter.com/search?q=%23future_tech_night">#future_tech_nigth</a> です。</p><h2 id="Future-Tech-Conference"><a href="#Future-Tech-Conference" class="headerlink" title="Future Tech Conference"></a>Future Tech Conference</h2><p>2022年初の試みです。30名の登壇者がそれぞれの技術テーマで、25分枠で全Youtube配信を行おうと考えています。現在企画を進めていますのでご期待ください。</p><p><a href="https://www.youtube.com/channel/UCJUSwYYd0CkGgmEKAW7QVpw">https://www.youtube.com/channel/UCJUSwYYd0CkGgmEKAW7QVpw</a></p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>勉強会についてもフューチャー社員一同、良い情報を発信してみなさまのお役にたてるようにがんばって行きます。どうぞよろしくお願いします。新卒・キャリア採用ともに積極的に募集していますので、興味がある方はご気軽にお問い合わせください！</p><p><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></p><p>社員のみなさまへ：</p><ul><li>TBDの登壇者、積極的に募集しています。ちょっと自信が無いけど..といった方も声をかけてもらえると嬉しいです！（支援します！）</li><li>こういった勉強会もやりたい！という方も真野隼記 or 伊藤太斉まで連絡をいただけるとです。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220118a/top.jpeg&quot; alt=&quot;&quot; title=&quot;Alexandra_KochPixabayによるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;421&quot; loading=&quot;lazy&quot;&gt;


&lt;h2</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
    <category term="スケジュール" scheme="https://future-architect.github.io/tags/%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/"/>
    
    <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>2022年のブログ連載予定を発表します</title>
    <link href="https://future-architect.github.io/articles/20220117a/"/>
    <id>https://future-architect.github.io/articles/20220117a/</id>
    <published>2022-01-16T15:00:00.000Z</published>
    <updated>2022-02-09T05:13:13.526Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220117a/calendar.jpeg" alt="" title="Andreas LischkaPixabayからの画像" width="640" height="426" loading="lazy"><p>あけましておめでとうございます。本年もどうぞよろしくおねがいします。TIG真野です。</p><p>2022年に計画しているブログ連載について紹介します。</p><h2 id="連載計画を発表する背景"><a href="#連載計画を発表する背景" class="headerlink" title="連載計画を発表する背景"></a>連載計画を発表する背景</h2><p><a href="/articles/20210112/">2021年</a>の記事でも説明しましたが、追加でいくつかの理由があります。</p><ul><li>企画が増えてくると、寄稿者を募集するスケジューリングが忘れがちになるため備忘にしたい<ul><li>スプレッドシート管理はファイルがどこにいったか分からなくなりがち</li></ul></li><li>寄稿者の幅を広げたい<ul><li>リモートワークになってからの他チームにジョインしたメンバーなどに少しでも届くように</li></ul></li></ul><h2 id="2022年の計画"><a href="#2022年の計画" class="headerlink" title="2022年の計画"></a>2022年の計画</h2><div class="scroll"><table><thead><tr><th>#</th><th>Title</th><th>Memo</th><th>Link</th></tr></thead><tbody><tr><td>1月</td><td>ー</td><td>ー</td><td></td></tr><tr><td>2月</td><td><a href="/articles/20220209a/">Go 1.18</a></td><td>Go 1.18のリリースノートからテーマをピックアップして深堀りする連載</td><td>公開予定</td></tr><tr><td>3月</td><td>Flutter連載</td><td>Flutterの開発ネタ</td><td>2022、<a href="/articles/20210510a/">2021</a></td></tr><tr><td></td><td>電子工作</td><td>電子工作、IoT、自作キーボードなど</td><td>公開予定</td></tr><tr><td>4月</td><td>春の入門祭り</td><td>初心者向けに入門記事を書いてみようという連載</td><td>2022、<a href="/articles/20210414a/">2021</a>、<a href="/articles/20200529/">2020</a></td></tr><tr><td>5月</td><td>Svelte</td><td>JSフレームワーク、Svelteをテーマにした連載</td><td>公開予定</td></tr><tr><td>6月</td><td>サービス間通信</td><td>gRPC、GraphQL、OpenAPIなどをテーマにした連載</td><td>公開予定</td></tr><tr><td></td><td>技術書評</td><td>技術書の書評を書いていく連載</td><td>公開予定</td></tr><tr><td>7月</td><td>認証認可</td><td>Auth0、KeyCloackやWebAuthなどの技術周りについての連載</td><td>公開予定</td></tr><tr><td>8月</td><td>Go 1.19</td><td>Go 1.19のリリースノートからテーマをピックアップして深堀りする連載</td><td>公開予定</td></tr><tr><td></td><td>夏休み自由研究</td><td>夏休みに行った自由研究と銘うって、個人的に関心があることを深堀りして調べる連載</td><td>2022、<a href="/articles/20210823a/">2021</a>、<a href="/articles/20200726/">2020</a></td></tr><tr><td>9月</td><td>Terraform</td><td>Terraformをテーマにした連載</td><td>公開予定</td></tr><tr><td>10月</td><td>秋のブログ週間</td><td>秋の夜長に楽しめるように、いつもより文章が多めな読み物をテーマにした連載</td><td>2022、<a href="/articles/20211027a/">2021</a>、<a href="/articles/20201026/">2020</a></td></tr><tr><td>11月</td><td>Python 3.11</td><td>Python 3.11が出ることを記念して、Python全般をテーマにした連載</td><td>2022、<a href="/articles/20210927b/">2021</a></td></tr><tr><td>12月</td><td>アドベントカレンダー2022</td><td>Qiitaさんのアドベントカレンダーのイベントに乗っかる連載</td><td>2022、<a href="http://qiita.com/advent-calendar/2021/future">2021</a>、<a href="http://qiita.com/advent-calendar/2020/future">2020</a>、<a href="http://qiita.com/advent-calendar/2019/future">2019</a>、<a href="http://qiita.com/advent-calendar/2018/future">2018</a>、<a href="http://qiita.com/advent-calendar/2017/future">2017</a>、<a href="http://qiita.com/advent-calendar/2016/future">2016</a>、<a href="http://qiita.com/advent-calendar/2015/future">2015</a></td></tr></tbody></table></div><p>同月に複数実施することもありますが、並列に走らないようにする予定です。</p><p>2020～2021年実施した、GCP・サーバレス連載は寄稿者の集客がいまいちだったため本年は行わない予定です。代わりに、電子工作・サービス間通信・技術書評・Terraformテーマを新規に行います。Auth0は認証認可と少しスコープを広げて行う予定。フロントエンド連載はテーマが広すぎたため、Svelteに絞って行います。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>これまでの経緯を踏まえテーマをブラッシュアップしています。2022年も皆様にとって有益な情報発信を活発にしていきますので、応援よろしくおねがいします！</p><p>社員の皆さんへ：</p><ul><li><a href="/articles/20200908/">フューチャー技術ブログで行っている連載企画が良いよって話</a> でも記載しましたが、読み手にとっても、書き手にとっても色々とメリットがあります。興味があるけどブログに載せるほどのネタになるか不安という声はよく聞きます。どういうレベル感の記事を書くべきかにも相談を承っています。ハードルは限りなく低いので、DMなどで連絡いただけるとです。お気軽に参加いただけるとです。だいたい2～4週間前に寄稿者募集を投げるためレスポンスをいただけると助かります。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220117a/calendar.jpeg&quot; alt=&quot;&quot; title=&quot;Andreas LischkaPixabayからの画像&quot; width=&quot;640&quot; height=&quot;426&quot;</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="スケジュール" scheme="https://future-architect.github.io/tags/%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>Minikubeでk8s学習を進めるためのヒント</title>
    <link href="https://future-architect.github.io/articles/20220112a/"/>
    <id>https://future-architect.github.io/articles/20220112a/</id>
    <published>2022-01-11T15:00:00.000Z</published>
    <updated>2022-01-12T01:33:37.626Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220112a/minikube.png" alt="" width="1000" height="519"><h1 id="k8s学習環境が欲しい"><a href="#k8s学習環境が欲しい" class="headerlink" title="k8s学習環境が欲しい"></a>k8s学習環境が欲しい</h1><p>こんにちはTIG鈴木です。</p><p>以前チームの輪読会で<a href="https://www.amazon.co.jp/Kubernetes%E5%AE%8C%E5%85%A8%E3%82%AC%E3%82%A4%E3%83%89-%E7%AC%AC2%E7%89%88-Top-Gear-%E9%9D%92%E5%B1%B1/dp/4295009792">Kuberntes完全ガイド</a>(以下k8s本)を読みました。 k8s本は、GKEを例にしながら、k8sのCLIツールだったりマニフェストのyamlファイルを丁寧に紹介しており、実践的に勉強するの適しています。</p><p>そのため、手を動かしつつ勉強したいところですが、クラウドプロバイダーが提供するマネージドk8sはコストが高めで気分的にほいほい使えないところがあります。となるとローカル環境でk8sを用意したくなります。</p><p>k8s完全ガイドでは<a href="https://github.com/kubernetes/minikube">minikube</a>だったり<a href="https://kind.sigs.k8s.io/">kind</a>だったりが紹介されています</p><h1 id="ローカル環境もそれなりにめんどくさい"><a href="#ローカル環境もそれなりにめんどくさい" class="headerlink" title="ローカル環境もそれなりにめんどくさい"></a>ローカル環境もそれなりにめんどくさい</h1><p>ところがminikubeだとGKEとは使い勝手が違っていて、k8s本通りに検証できない部分があり、初学者の私は混乱してしまいました。</p><p>ということで、私がひっかかったポイント（おもにServiceまわり）を踏まえて、k8s学習を進めるためのいくつかTipsを紹介します。</p><h1 id="minikubeとは"><a href="#minikubeとは" class="headerlink" title="minikubeとは"></a>minikubeとは</h1><p>ローカルk8sクラスタをを簡単に構築できる定番のツールです。DockerやVirtualBoxで仮想マシンが立ち上がりその上にk8sが構築されます。</p><p>下の様にオプションなしで起動した場合、筆者環境ではDockerコンテナとして起動します。デフォルトでは1 nodeで構築されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ minikube start</span><br><span class="line">...</span><br><span class="line">🏄  Done! kubectlisnow configuredtouse <span class="string">&quot;minikube&quot;</span> clusterand <span class="string">&quot;default&quot;</span> namespacebydefault</span><br><span class="line"></span><br><span class="line">$ kubectl get nodes</span><br><span class="line">NAME           STATUS   ROLES                  AGE   VERSION</span><br><span class="line">minikube       Ready    control-plane,master   90m   v1.22.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># ノードはdockerコンテナとして起動している</span></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINERID   IMAGE                                 COMMAND                  CREATEDSTATUS              PORTS</span><br><span class="line">NAMES</span><br><span class="line">362ee8fb5198   gcr.io/k8s-minikube/kicbase:v0.0.26   <span class="string">&quot;/usr/local/bin/entr…&quot;</span>   2 hours ago   Up 2 hours   127.0.0.1:49177-&gt;22/tcp, 127.0.0.1:49176-&gt;2376/tcp, 127.0.0.1:49175-&gt;5000/tcp, 127.0.0.1:49174-&gt;8443/tcp, 127.0.0.1:49173-&gt;32443/tcp   minikube</span><br></pre></td></tr></table></figure><h1 id="Serviceまわり"><a href="#Serviceまわり" class="headerlink" title="Serviceまわり"></a>Serviceまわり</h1><p><strong>NodePort</strong>は&lt;ノードのIP&gt;:&lt; Port &gt;への通信をPodに転送する形で、アプリケーションの外部疎通性を確保するリソースです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment test-deployment --image=nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># NodePortを作成</span></span><br><span class="line">$ kubectl expose deployment test-deployment --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">$ kubectl get service test-deployment</span><br><span class="line">NAME              TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">test-deployment   NodePort   10.107.114.198   &lt;none&gt;        80:31307/TCP   4m21s</span><br></pre></td></tr></table></figure><p>上記Deploymentにアクセスするには、ノードのIPアドレスを調べる必要があります。minikubeではコマンドが用意されており、<code>minikube ip</code> で調べられます。  実態はminikubeノードとして起動しているDockerコンテナのアドレスです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ minikube ip</span><br><span class="line">192.168.49.2</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it minikube ip -4 a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">69: eth0@if70: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default  link-netnsid 0</span><br><span class="line">    inet 192.168.49.2/24 brd 192.168.49.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>curlをしてみれば、疎通できることがわかります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  curl 192.168.49.2:31307</span><br></pre></td></tr></table></figure><p><strong>LoadBalancer</strong>を使う場合は<code>minikube tunnel</code> で EXTERNAL-IPを払い出し、ホストサーバからEXTERNAL-IPへルートを確保します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose deployment test-deployment --<span class="built_in">type</span>=LoadBalancer --port=80</span><br><span class="line"></span><br><span class="line">$ kubectl get service test-deployment</span><br><span class="line">NAME              TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">test-deployment   LoadBalancer   10.108.139.68   &lt;pending&gt;     80:31284/TCP   70s</span><br><span class="line"></span><br><span class="line">$ minikube tunnel</span><br><span class="line"></span><br><span class="line"><span class="comment"># EXTERNAL-IPが払い出されている</span></span><br><span class="line">$ kubectl get service test-deployment</span><br><span class="line">NAME              TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE</span><br><span class="line">test-deployment   LoadBalancer   10.108.139.68   10.108.139.68   80:31284/TCP   2m35s</span><br></pre></td></tr></table></figure><p><code>curl 10.108.139.68:80</code> で疎通が確認できます。</p><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><p>Ingressを使う場合は、Ingressコントローラをデプロイする必要があります。<br>minikubeではそのためのaddonが用意されています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ minikube addons <span class="built_in">enable</span> ingress</span><br><span class="line"><span class="comment"># nginx ingress controllerがデプロイされている</span></span><br><span class="line">$ kubectl get pods -n ingress-nginx</span><br><span class="line">NAME                                        READY   STATUS      RESTARTS   AGE</span><br><span class="line">ingress-nginx-admission-create-2mjhv        0/1     Completed   0          5m34s</span><br><span class="line">ingress-nginx-admission-patch-pj8jv         0/1     Completed   0          5m34s</span><br><span class="line">ingress-nginx-controller-5d88495688-grssn   1/1     Running     0          5m35s</span><br></pre></td></tr></table></figure><p>以下のマニフェストでingressを作成してみます。</p><figure class="highlight yaml"><figcaption><span>ing.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">test-deployment</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f ing.yaml</span><br></pre></td></tr></table></figure><p>下のようにIngressが作成されたことがわかります。 <code>ADDRESS</code> に対してリクエストを送ればアプリケーションにアクセスできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get ingress</span><br><span class="line">NAME            CLASS    HOSTS   ADDRESS        PORTS   AGE</span><br><span class="line">test-ingress    &lt;none&gt;   *       192.168.49.2   80      13m</span><br></pre></td></tr></table></figure><p><a href="https://minikube.sigs.k8s.io/docs/handbook/addons/ingress-dns/">ingress-dns</a> addonを使えば、Ingressで設定したホスト名をホストサーバから解決することが可能らしいです。ちょっと試せていないですが、参考までに。</p><h1 id="Horizontal-Pod-Autoscaler"><a href="#Horizontal-Pod-Autoscaler" class="headerlink" title="Horizontal Pod Autoscaler"></a>Horizontal Pod Autoscaler</h1><p>Horizontal Pod Autoscaler(HPA)はCPUやメモリ消費に基づいてPodをスケールさせる機能です。HPAを使うためには、Podの消費するリソースをmetricsとして取得できる必要があります。minikubeではaddonとしてmetrics-serverを有効化します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ minikube addons <span class="built_in">enable</span> metrics-server</span><br><span class="line">    ▪ Using image k8s.gcr.io/metrics-server/metrics-server:v0.4.2</span><br></pre></td></tr></table></figure><p>metrics-serverを有効化したので、<code>kubectl top</code> でpodのリソース消費を確認できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl top pod test-nginx</span><br><span class="line">NAME         CPU(cores)   MEMORY(bytes)</span><br><span class="line">test-nginx   0m           1Mi</span><br></pre></td></tr></table></figure><p>この状態であれば、<a href="https://kubernetes.io/ja/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/">HPAのチュートリアル</a>で、HPAが機能することを確認できます。</p><h1 id="Multi-Node-Clusterとスケジューリング"><a href="#Multi-Node-Clusterとスケジューリング" class="headerlink" title="Multi-Node Clusterとスケジューリング"></a>Multi-Node Clusterとスケジューリング</h1><p>minikubeはデフォルトで1 nodeで起動します。なのでそのままでは、Node AffinityやPod Affinityなど高度なスケジューリング機能の検証ができません。</p><p>ですが、minikubeでは<code>--nodes</code> オプションで複数ノードでクラスタを作成可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ minikube start --nodes 2</span><br><span class="line">$ kubectl get node</span><br><span class="line">NAME           STATUS   ROLES                  AGE     VERSION</span><br><span class="line">minikube       Ready    control-plane,master   9m53s   v1.22.1</span><br><span class="line">minikube-m02   Ready    &lt;none&gt;                 9m35s   v1.22.1</span><br></pre></td></tr></table></figure><p>下のマニフェストでPod Anti Affinityを使ってみます。このDeploymentでは2つのPodが作成されますが、別々のノードに配置される設定になっています。</p><figure class="highlight yaml"><figcaption><span>pod-antiaffinity.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">100</span><span class="string">%</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="comment"># ⬇⬇⬇ This ensures pods will land on separate hosts</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">              <span class="attr">matchExpressions:</span> [&#123; <span class="attr">key:</span> <span class="string">app</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> [<span class="string">hello</span>] &#125;]</span><br><span class="line">            <span class="attr">topologyKey:</span> <span class="string">&quot;kubernetes.io/hostname&quot;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-from</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">pbitty/hello-from:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">            <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Podが異なるノードに配置されていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP           NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">hello-7db79cdc77-68mvs   1/1     Running   0          4m23s   10.244.0.3   minikube       &lt;none&gt;           &lt;none&gt;</span><br><span class="line">hello-7db79cdc77-gkpwm   1/1     Running   0          4m23s   10.244.1.5   minikube-m02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>minikubeでk8sを学習していく際のTipsをご紹介しました。minikube以外にも<a href="https://microk8s.io/">microk8s</a>, <a href="https://kind.sigs.k8s.io/">kind</a>などローカルk8sクラスタ構築ツールの選択肢はありますし、VMとkubeadmで構築するのも勉強になると思います。<br>入門者のお役に立てれば幸いです！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220112a/minikube.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;519&quot;&gt;

&lt;h1 id=&quot;k8s学習環境が欲しい&quot;&gt;&lt;a href=&quot;#k8s学習環境が欲しい&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="Minikube" scheme="https://future-architect.github.io/tags/Minikube/"/>
    
  </entry>
  
  <entry>
    <title>Step Functions を利用して感じた Airflow との比較</title>
    <link href="https://future-architect.github.io/articles/20220111a/"/>
    <id>https://future-architect.github.io/articles/20220111a/</id>
    <published>2022-01-10T15:00:00.000Z</published>
    <updated>2022-01-14T11:30:44.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Step-Functions-を利用して感じた-Airflow-との比較"><a href="#Step-Functions-を利用して感じた-Airflow-との比較" class="headerlink" title="Step Functions を利用して感じた Airflow との比較"></a>Step Functions を利用して感じた Airflow との比較</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>TIG 所属の多賀です。</p><p>AWS 上でのワークフロー構築のため、Step Functions を直近で導入しました。</p><p>筆者は Airflow (MWAA) の経験が長く、いくつかブログも書いています。 (<a href="/tags/Airflow/">過去ブログ一覧</a>)。今回、両サービスを利用してみた上での比較を整理したく記事化しました。</p><p>前提として、どちらも素晴らしいサービスで、ユースケースに合わせて選定していくことが大事かと思います。</p><h2 id="サービス概要"><a href="#サービス概要" class="headerlink" title="サービス概要"></a>サービス概要</h2><p>各サービスについて、概要を整理しました。</p><p>※ Airflow は AWS 上でマネージドサービスとして提供されている Amazon Managed Workflows for Apache Airflow (以下 MWAA) をベースに記載します。</p><div class="scroll"><table><thead><tr><th align="left"></th><th align="left"><a href="https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html">MWAA</a></th><th align="left"><a href="https://aws.amazon.com/jp/step-functions/?step-functions.sort-by=item.additionalFields.postDateTime&step-functions.sort-order=desc">Step Functions</a></th></tr></thead><tbody><tr><td align="left"></td><td align="left"><img src="/images/20220111a/image.png" alt="MWAAフロー" width="1200" height="764" loading="lazy"></td><td align="left"><img src="/images/20220111a/stepfunction.png" alt="stepfunctionフロー" width="922" height="908" loading="lazy">  <br> <a href="https://aws.amazon.com/jp/blogs/news/new-aws-step-functions-workflow-studio-a-low-code-visual-tool-for-building-state-machines/">新機能 – AWS Step Functions ワークフロースタジオ – ステートマシンを構築するためのローコードのビジュアルツール - Amazon Web Services ブログ</a> 参照</td></tr><tr><td align="left">サービス概要</td><td align="left">OSS である <a href="https://airflow.apache.org/">Airflow</a> をマネージドサービスとして提供</td><td align="left">AWS 独自実装のビジュアルワークフローサービス</td></tr><tr><td align="left">一言で</td><td align="left">ワークフローにソースコードベース管理の概念を取入れアプリケーション化したサービス (※ Airflow について)</td><td align="left">各種 AWS サービスをパイプラインとして実行するサービス</td></tr><tr><td align="left">特徴</td><td align="left">・Pure Python ベースでワークフローを実装可能 <br> ・独自のブラウザベース UI を提供 <br> ・DAG(有向非巡回グラフ)ベースのワークフロー定義</td><td align="left">・Amazon States Language(JSON/YAML) ベースでワークフロー(=State Macine)を実装 <br> ・AWSコンソール上でドラッグ&amp;ドロップでワークフローを作成可能 (<a href="https://docs.aws.amazon.com/step-functions/latest/dg/workflow-studio.html">Workflow Studio</a>) <br> ・200を超える AWS サービスのサポート(<a href="https://aws.amazon.com/jp/about-aws/whats-new/2021/09/aws-step-functions-200-aws-sdk-integration/">参考</a> )</td></tr><tr><td align="left">コスト</td><td align="left"><a href="https://aws.amazon.com/jp/managed-workflows-for-apache-airflow/pricing/">料金 - Amazon Managed Workflows for Apache Airflow (MWAA)</a> <br><br> ・時間単位のインスタンス使用量課金 <br> ・ストレージ使用量課金 <br></td><td align="left"><a href="https://aws.amazon.com/jp/step-functions/pricing/">料金 - AWS Step Functions AWS</a> <br><br>・実行毎課金(状態遷移毎)</td></tr></tbody></table></div><h2 id="サービス比較"><a href="#サービス比較" class="headerlink" title="サービス比較"></a>サービス比較</h2><p>各サービス別に、Good/Challenge に分けて記載しています。</p><h3 id="Good"><a href="#Good" class="headerlink" title="Good"></a>Good</h3><h4 id="MWAA"><a href="#MWAA" class="headerlink" title="MWAA"></a>MWAA</h4><ul><li>Pythonで実現できることは基本すべて実装可能で、実装の制約が少ない</li><li>UI が充実しており、実行履歴、ログ、実行時間等の様々な情報を参照することが可能</li><li>UI 上でワークフローの任意の位置からリトライ可能</li><li>各種クラウドSDK/OSS API を呼び出しを簡易化するための provider がサードパーティ提供されている<ul><li><a href="https://airflow.apache.org/docs/apache-airflow-providers/packages-ref.html#">Providers packages reference — apache-airflow-providers Documentation</a></li><li>provider を pip でインストール後、各 provider に実装されている operator 関数を呼び出すことで実現可能</li></ul></li></ul><h4 id="Step-Functions"><a href="#Step-Functions" class="headerlink" title="Step Functions"></a>Step Functions</h4><ul><li>AWS サービスの呼び出しをローコード(パラメータ指定程度)で実現可能</li><li>Workflow Studio を利用した AWS コンソール上でのワークフロー組み上げが可能<ul><li>Amazon States Language を直接書くことなく定義することができる</li></ul></li><li>パラメータ指定(JSON形式)でワークフロー実行可能</li><li>AWS サービスの呼び出しごとにログが出力されており、各 SDK の呼び出し結果を確認可能</li></ul><h3 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h3><h4 id="MWAA-1"><a href="#MWAA-1" class="headerlink" title="MWAA"></a>MWAA</h4><ul><li>ソースコードベースであることから実装コストはある程度見込む必要あり<ul><li>初期構築等で、デフォルトで用意されていなければ、単純なクラウド SDK 呼び出しをするだけの処理を Python で都度実装が必要になる</li></ul></li><li>UI 上からパラメータ指定での実行がしづらい<ul><li>厳密には実行可能な方法があるが、UI 上でサポートされていない or ジョブの実行画面外に存在しており、運用しづらくなっている</li><li>(2022/01/07時点で <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/airflow-versions.html#airflow-versions-latest">MWAA 未サポート</a>) Aiflow version 2.1.0 以上でパラメータ指定(<code>Trigger Dag w/ config</code>)でワークフローを実行可能となっている</li><li>デフォルトで<a href="https://airflow.apache.org/docs/apache-airflow/stable/templates-ref.html#variables">実行時間等</a>はワークフローへ渡されるため、時間ベースでの実行の場合は特段困らない</li></ul></li><li>運用コスト面では、EC2等と同様に起動時間課金であり、基本は立ち上げたままで運用されることから、Step Functions よりコストは高くなる</li><li>ソースコードを実装するため単体テストを実装したいが、外部 API 呼び出し等が多くなる場合はモック化含めてコストは高くなる</li><li>VPC の構築が必須<ul><li>MWAA 向けのネットワーク要件が存在するため、VPC 構築時に合わせて確認しておく必要がある</li><li><a href="https://docs.aws.amazon.com/ja_jp/mwaa/latest/userguide/networking-about.html">Amazon MWAA でのネットワーキングについて - Amazon Managed Workflows for Apache Airflow</a></li></ul></li><li>マネージドサービスのため直接意識することは少ないが、Airflow の構成について学習するコストはかかる</li></ul><h4 id="Step-Functions-1"><a href="#Step-Functions-1" class="headerlink" title="Step Functions"></a>Step Functions</h4><ul><li>ワークフロー途中からの実行が未サポート<ul><li>初期構築等で失敗しながら動かしていく際に、毎回最初からになって効率が悪かった</li><li>運用上は、リトライ単位 = 1 State Macine の原則で構築すれば問題なし</li></ul></li><li>Workflow Studio で作成した定義を IaC 管理化に置きたい場合は、環境情報(本番、開発..)等の一部修正が必須<ul><li>「Workflow Studio で基本作成→JSONをダウンロード→IaC 管理下へ配置」の作成フロー</li></ul></li><li><a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html">組み込み関数</a>でできることがあまりないため、入力を少し加工をしたい等で Lambda の実装が必要</li><li>API の実行結果が非同期で成功する場合(インスタンス作成等)に、成功を待ち受けるためのループ処理を都度実装する必要がある<ul><li><a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/sample-project-job-poller.html">Job ステータスのポーリング (Lambda、AWS Batch) - AWS Step Functions</a></li></ul></li><li>各 State の入出力を扱うための、Input/Output/ResultPath,ResultSelector等の学習コストは低くはない<ul><li>同一のパラメータをワークフロー全体で引き回したいケースで実装に考慮が必要<ul><li>OutputPath を指定して、Input がすべて上書きされる問題に直面した</li></ul></li><li>最終的に、ResultSelector で残したいレスポンス情報を選定して、ResultPath で追加する形式を取ることが多かった</li><li>参考: <a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-input-output-filtering.html">Step Functions の入出力処理 - AWS Step Functions</a></li></ul></li></ul><h2 id="選定方針"><a href="#選定方針" class="headerlink" title="選定方針"></a>選定方針</h2><p>各ケースごとに細かい要件等があるかと思いますが、大まかな方針としては以下の通りと考えています。</p><ul><li>MWAA (Airflow)<ul><li>ワークフローの複雑度(※ 実行するタスクの量が指標) が高い</li><li>実行する 処理時間の長いタスクが複数連続している (リトライ観点)</li><li>単純な AWS SDK や API Call で処理が完結しない (※ 設計としてワークフローにロジックをもたせる可否は要検討)</li><li>初期構築にコストをかけることができる</li></ul></li><li>Step Functions<ul><li>複雑度が低くAWS の各種 SDK を呼び出すのみの単純なワークフロー</li><li>ワークフローの実行頻度が低い</li><li>手動でのパラメータ指定必須</li></ul></li></ul><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>Step Functions を本格的に利用したのは初めてだったので、同じワークフロー系サービスとして経験のあった Airflow との比較をしてみました。</p><p>実際に AWS 上でワークフローを構築しようとする際は、まずはこの2つのサービス比較から入ることが今後は多くなってくるのではと思いますので、参考になりましたら幸いです。</p><p>Airflow は 2.0 がリリースされて以降も、月1程度で継続的にリリースがされていてますので、引き続きウォッチしていていきたいと考えてます。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://airflow.apache.org/docs/apache-airflow/stable/index.html">Apache Airflow Documentation — Airflow Documentation</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/mwaa/latest/userguide/what-is-mwaa.html">Amazon Managed Workflows for Apache Airflow (MWAA) とは - Amazon Managed Workflows for Apache Airflow</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/welcome.html">AWS Step Functions とは - AWS Step Functions</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Step-Functions-を利用して感じた-Airflow-との比較&quot;&gt;&lt;a href=&quot;#Step-Functions-を利用して感じた-Airflow-との比較&quot; class=&quot;headerlink&quot; title=&quot;Step Functions</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="技術選定" scheme="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E9%81%B8%E5%AE%9A/"/>
    
    <category term="Airflow" scheme="https://future-architect.github.io/tags/Airflow/"/>
    
    <category term="StepFunctions" scheme="https://future-architect.github.io/tags/StepFunctions/"/>
    
  </entry>
  
  <entry>
    <title>Future社員が使っているWindows便利ツール（新人さん向け）</title>
    <link href="https://future-architect.github.io/articles/20220107a/"/>
    <id>https://future-architect.github.io/articles/20220107a/</id>
    <published>2022-01-06T15:00:00.000Z</published>
    <updated>2022-01-10T11:00:51.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。2020年4月入社の青柳です。タイトルにある通り便利ツールをまとめてみました。</p><p>今回は、新入社員や入社前の大学生をターゲットに、誰でもすぐに使えるツールを紹介しているので、まだ使っていないツールがあればぜひ使ってみて下さい。<br>※前提としてwindowsの方向けなので、Macの方はごめんなさい🙇🏼</p><h1 id="everything"><a href="#everything" class="headerlink" title="everything"></a>everything</h1><img src="/images/20220107a/everything.gif" alt="everything" width="1160" height="428" loading="lazy"><p><a href="https://forest.watch.impress.co.jp/library/software/everything/">https://forest.watch.impress.co.jp/library/software/everything/</a></p><p>ファイルやフォルダを超高速で検索できるツール。</p><p>あのファイルどこにあったっけ？？の問題が一瞬で解消できます。私も初めて使った際は、検索のスピードの早さに驚きました。</p><p>しかも設定すればファイルサーバーの中も検索できます。</p><p>もはや必須ツールですね。</p><h1 id="cribor"><a href="#cribor" class="headerlink" title="cribor"></a>cribor</h1><img src="/images/20220107a/cribor1.gif" alt="cribor1" width="1200" height="372" loading="lazy"><p><a href="https://forest.watch.impress.co.jp/library/software/clibor/">https://forest.watch.impress.co.jp/library/software/clibor/</a></p><p>簡単にコピーと貼り付けができるツール。</p><p>クリップボードの履歴を呼び出して、以前にコピーした文章も貼り付けれる。定型文も登録できる。</p><p>いたってシンプルな機能ですが、一度使うとすぐに便利さがわかると思います。</p><h1 id="Tablacus-Explorer"><a href="#Tablacus-Explorer" class="headerlink" title="Tablacus Explorer"></a>Tablacus Explorer</h1><img src="/images/20220107a/TablacusExplorer.gif" alt="TablacusExplorer.gif" width="862" height="451" loading="lazy"><p><a href="https://tablacus.github.io/explorer.html">https://tablacus.github.io/explorer.html</a></p><p>ついついたくさん開きがちなエクスプローラをタブで管理可能。</p><p>似たようなツールで「QTTabBar」もあるが、個人的にはこちらがおすすめ。アドイン機能も充実しているので、好きなようにカスタマイズもできます。</p><h1 id="orchis-launcher"><a href="#orchis-launcher" class="headerlink" title="orchis launcher"></a>orchis launcher</h1><img src="/images/20220107a/orchislauncher.gif" alt="orchislauncher.gif" width="768" height="348" loading="lazy"><p><a href="https://forest.watch.impress.co.jp/library/software/orchis/">https://forest.watch.impress.co.jp/library/software/orchis/</a></p><p>ポップアップメニューでよく使うファイルやフォルダを、素早く簡単に起動。</p><p>私の先輩も使っていますが、これを使いこなしてるだけで仕事できる感が半端ない。</p><p>みなさんもカッコよく使いこなして！</p><h1 id="OneNote"><a href="#OneNote" class="headerlink" title="OneNote"></a>OneNote</h1><img src="/images/20220107a/ScreenToGif_2.gif" alt="ScreenToGif.gif" width="1200" height="604" loading="lazy"><p><a href="https://www.microsoft.com/ja-jp/microsoft-365/onenote/digital-note-taking-app">https://www.microsoft.com/ja-jp/microsoft-365/onenote/digital-note-taking-app</a></p><p>メモとして使えたりキャプチャを張り付けたりと、画面に情報を効率よく集約。</p><p>他のテキストツールだと、画像の貼付やイラストの挿入とかができないですが、OneNoteだと自由自在。</p><p>まさにノートのような使い方ができて非常に便利です。</p><h1 id="ScreenToGif"><a href="#ScreenToGif" class="headerlink" title="ScreenToGif"></a>ScreenToGif</h1><img src="/images/20220107a/ScreenToGif.gif" alt="ScreenToGif.gif" width="469" height="72" loading="lazy"><p><a href="https://www.screentogif.com/">https://www.screentogif.com/</a></p><p>簡単な動画ならこちらのツールで簡単に作成可能。この記事にあるGif動画もこのツールで撮影しました。</p><p>自分のパソコンの動きをそのまま記録できるので、手順を他の人に共有する時とか便利そう。</p><p>工夫次第で使い道はいくらでもありそうなので、一度使ってみて欲しいです。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>テレワークだと先輩社員の仕事を直接見れず、どんなツールを使っているのか知る機会が少ないですよね。</p><p>そこで、便利ツールの一覧とかあったら嬉しいかなという気持ちで書きました。</p><p>参考にしていただければ幸いです。</p><p>上記以外にも色々なツールを紹介して頂きましたが、今回は誰でもすぐに使えそうなものを厳選しました。</p><p>より開発向けのツールについては、どなたか続編をお願いします🙇🏼</p><p>以上、お読みいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="便利ツール" scheme="https://future-architect.github.io/tags/%E4%BE%BF%E5%88%A9%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
    <category term="新入社員" scheme="https://future-architect.github.io/tags/%E6%96%B0%E5%85%A5%E7%A4%BE%E5%93%A1/"/>
    
  </entry>
  
</feed>
