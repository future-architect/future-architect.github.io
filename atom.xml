<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-07-10T01:41:45.053Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HashiTalks: Japanに登壇しました</title>
    <link href="https://future-architect.github.io/articles/20200710/"/>
    <id>https://future-architect.github.io/articles/20200710/</id>
    <published>2020-07-10T01:19:54.000Z</published>
    <updated>2020-07-10T01:41:45.053Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200710/top.png"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXユニットの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤</a>です。最近Terraformネタが多くなってきました。さて、本記事の内容はHashiTalks: Japanに登壇したのでその時に話したことを書いていきます。大きめなイベントには初の登壇だったのでなかなかドキドキしましたが、なんとかやりきりました。</p><h2 id="HashiTalks-Japanとは"><a href="#HashiTalks-Japanとは" class="headerlink" title="HashiTalks: Japanとは"></a>HashiTalks: Japanとは</h2><p><a href="https://events.hashicorp.com/hashitalksjapan" target="_blank" rel="noopener">イベントページ</a>から言葉を拝借すると、</p><blockquote><p>HashiTalksは、HashiCorpのツールやコミュニティに焦点を当てたユニークなユースケースやデモをコミュニティメンバーから共有する機会です。</p></blockquote><p>といった感じで、コミュニティベースのイベントになっています。参加者は普段使っている時のナレッジから企業で実践している例などがあり、幅広い内容を取り扱っています。今回のタイムテーブルではTerraformがほどんどそ占めておりますが、中にはConsulとかVaultなどもありました。この辺のツールのちゃんと扱えるようにしたいですね。</p><h2 id="何を発表したか"><a href="#何を発表したか" class="headerlink" title="何を発表したか"></a>何を発表したか</h2><p>私自身は「Cloud MonitoringとTerraformの付き合い方」と題して、TerraformでCloud Monitoringのリソースを作成・管理するときのことをテーマにしました。スライドは以下になりますので、見ていただければと思います。ここからは話した内容のサマリになります。</p><script async class="speakerdeck-embed" data-id="01797d2feb8b41359be8138a65170819" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h3 id="監視設定の大変さ"><a href="#監視設定の大変さ" class="headerlink" title="監視設定の大変さ"></a>監視設定の大変さ</h3><p>Terraformは各クラウドプロバイダーのリソースをコードで管理できるInfrastructure as Code(IaC)を実現するツールとして使われています。AWSのCloudFormation、GCPのDeployment Managerではなくクラウドに依存しないツールとしてマルチクラウド戦略を行うところではTerraformを採用されているのではないでしょうか？<br>基本的にクラウド(今回ではGCP)のリソースは全てTerraformで管理されていることが望ましく、それは監視ツールであるCloud Monitoringも例外ではありません。特に私が大変だと感じているのは特定のメトリクスを抽出するためのフィルターです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_monitoring_alert_policy"</span> <span class="string">"someone_alert_policy"</span> &#123;</span><br><span class="line">  ....</span><br><span class="line">  conditions &#123;</span><br><span class="line">    condition_threshold &#123;</span><br><span class="line">      aggregations &#123;</span><br><span class="line">....</span><br><span class="line">        filter = <span class="string">"metric.type=\"agent.googleapis.com/disk/percent_used\" resource.type=\"gce_instance\" metric.label.\"state\"=\"used\" metric.label.\"device\"=\"rootfs\" metadata.user_labels.\"name\"=\"sample-instance-1\""</span></span><br><span class="line">        ....</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように複数の条件を重ねて書くことはとても大変であるので、私はコード化にTerraformerを使っています。</p><h3 id="Terraformerの使いどころ"><a href="#Terraformerの使いどころ" class="headerlink" title="Terraformerの使いどころ"></a>Terraformerの使いどころ</h3><p>TerraformerはGCPに限らず、AWSなどのメジャークラウドに存在するリソースをコマンド一つでコードに落とせる便利なツールです。とても便利ではある反面、Terraformでのリソース名はわかりにくいものになっています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_monitoring_alert_policy"</span> <span class="string">"tfer--projects--project-name--alertPolicies--17320504"</span> &#123;</span><br><span class="line">  ....</span><br><span class="line">  conditions &#123;</span><br><span class="line">    condition_threshold &#123;</span><br><span class="line">      ....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本的には<code>terraform state mv</code>コマンドを実行してリソース名を変更するかと思いますが、一通り作り切ってからこのコマンドを実行するのもそれなりに時間がかかります。私は、監視のTerraformのコードは特に再利用性が高いと思っており、それであれば雛形として最低限作成して、展開することで時間の節約になったり、コードの変更を最低限で抑えられると考えています。</p><h3 id="セキュリティに気をつけたい"><a href="#セキュリティに気をつけたい" class="headerlink" title="セキュリティに気をつけたい"></a>セキュリティに気をつけたい</h3><p>Cloud Monitoringにはアラート設定をしたときに、その通知先をメールやSlackにすることができます。しかし、SlackのTokenやメールアドレス自体をコード上にハードコードすることは避けなければいけません。Tokenなどを守る方法としては</p><ul><li>tfvarsで逃す</li><li>Vaultを使う</li><li>Secret Manager</li></ul><p>などがあるので、これらを使えばコードとして書かざるを得ない状況は回避できます。しかし、今回は「<strong>コードにはしないけど、リソースとしてはある</strong>」状態を目指してちょっと安全にTerraformでリソースを管理する方法を考えてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_monitoring_alert_policy"</span> <span class="string">"someone_alert_policy"</span> &#123;</span><br><span class="line"> ....</span><br><span class="line">  display_name = <span class="string">"use-80-percent-resource-disk"</span></span><br><span class="line"></span><br><span class="line">  enabled               = <span class="string">"true"</span></span><br><span class="line">  notification_channels = [</span><br><span class="line">    google_monitoring_notification_channel.slack_channel_1.id, <span class="comment"># チャンネルがコード化されている</span></span><br><span class="line">    <span class="string">"projects/project-name/notificationChannels/0123456789"</span>,   <span class="comment"># チャンネルがコード化されていない</span></span><br><span class="line">  ]</span><br><span class="line">  project               = <span class="string">"project-name"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上の<code>notification_channel</code>ではコード化している部分としていない部分を示しています。IDで書かれている部分では、チャンネル自体はコード化されていないが、アラートの通知先として指定しているので、「コードにはしないけど、リソースとしてはある」状態を達成できているのではないでしょうか。このようにコードにせず、クラウド側で担保することで少し安全にコードにできていると考えています。<br>しかし、これも将来的には先述した、VaultやSecret Managerを使うなどして管理することも視野に入れたいですね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回発表したことはTerraformとGCPを組み合わせて以来、ずっと直面している問題で、発表するに当たって、自分の中で一つの答えになったかなと思っています。Terraform Associateを取ったり、こういった登壇する挑戦で少しづつではありますが、自分の自信に繋がっているので、今後も発信は媒体に関係なく続けていきたいなと思います。</p><p>最後にこちらが話しているYouTubeになりますのでよければご覧ください。<br><a href="https://www.youtube.com/watch?v=SiCCwE9a1iY&list=PL81sUbsFNc5aWJJrpaclnwARJAzf1-2bV&index=14&t=0s" target="_blank" rel="noopener">Cloud MonitoringとTerraformの付き合い方 - YouTube</a></p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="/articles/20200629/">Terraform Associate合格記</a></li><li><a href="/articles/20200624/">Terraform 101</a></li><li><a href="tags/Terraform/">Tech Blog内のTerraform記事</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200710/top.png&quot;&gt;


&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG/DXユニットの&lt;a hre
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>GoでWebアプリ開発時にあるあるだったレビューコメント</title>
    <link href="https://future-architect.github.io/articles/20200709/"/>
    <id>https://future-architect.github.io/articles/20200709/</id>
    <published>2020-07-09T02:09:27.000Z</published>
    <updated>2020-07-09T02:25:12.754Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200709/photo_20200709_01.png" class="img-small-size"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の真野です。</p><p>コードレビューについては3,4年ほど前に、<a href="https://medium.com/@laqiiz/effdcc39da52" target="_blank" rel="noopener">コードレビューにおけるレビュアー側のアンチパターン</a> って記事を書いたりもしました。当時はレビュアーの伝え方って大事だよなって話をしてました。いつしかレビュイーからレビュアーに比重が変わることが増えてきました。相互レビューは当たり前にしていますがが、比較的こうしたらもっと良くなるんじゃないかな？と提案される回数より、自分が提案する回数の方が増えてくるタイミングってありますよね？</p><p>そういうわけで、最近Goで主にバックエンドのWebAPIや、AWS Lambdaで動くETLアプリ、たまにCLIツールを開発する時に、2回以上同じ指摘したコメントをまとめてます。Go言語特有ぽいところを中心にしています。</p><h1 id="レビュイーのスキルセット"><a href="#レビュイーのスキルセット" class="headerlink" title="レビュイーのスキルセット"></a>レビュイーのスキルセット</h1><p>新人さん（専攻は情報系であれば経済学部の人もいました）や、AtCoderJobs経由のアルバイトerの方。新人さんであればJavaは研修で学んでいたのと、アルバイトerの方はPython使いが多かったです。それぞれ全員Goを業務で使ったことがない人でした。何ならJavaやPythonでも業務利用は初めてレベルの人が対象でした。人数は覚えていませんが、のべ15名以上に対して何かしら開発で関わったと思います。</p><h1 id="ベースラインとしてのインプット情報"><a href="#ベースラインとしてのインプット情報" class="headerlink" title="ベースラインとしてのインプット情報"></a>ベースラインとしてのインプット情報</h1><p>Goを初めて使うよってメンバーも多いので、インプット情報はまとめています。Go Tutorialを1日くらいやってもらった後に、環境構築をしてもらい、次の内容を適時読んでもらっています。最初のPullRequest時では必須ではなく、大体はある機能実装の2,3回目以降に読んだ方が良いかも？なタイミングでリンクを送ることが多いです。初心者にはあまりインプットに比重を寄せず、せっかくの業務でGoを書く機会なのでまずはアウトプットを出してもらいそれに対してフィードバックして育てようという考えです。</p><p>インプットは個人的なお勧め順に記載しています。Effective Goはそこそこ分量があるので、興味があるところだけザッと読むことが良いと思います。</p><ul><li><strong><a href="https://future-architect.github.io/articles/20200311/">JavaプログラマーのためのGo言語入門</a></strong><ul><li>安心のフューチャー技術ブログ。翻訳本の出版ばりのクオリティーだと評判</li><li>社内だと新人研修がJavaなので、新卒組には特に勧めています</li></ul></li><li><strong><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></strong><ul><li>安心のフューチャー技術ブログ。読み応えたっぷりです</li></ul></li><li><strong><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a></strong><ul><li>日本語訳もあるけど、ちょっと古いのでそちらは参考にする程度にしたほうが良いかも</li><li>量が多いので最初は気になるところだけ逆引き的に読んでいこう</li><li>命名に関しては、micnncimさんの <strong><a href="https://micnncim.com/post/2019/12/11/go-naming-conventions/" target="_blank" rel="noopener">Go の命名規則</a></strong> 記事に目を通しておくと間違いないです</li></ul></li><li><strong><a href="https://github.com/golang/go/wiki/CodeReviewComments" target="_blank" rel="noopener">Go Code Review Comments</a></strong><ul><li>日本語訳: <a href="https://qiita.com/knsh14/items/8b73b31822c109d4c497" target="_blank" rel="noopener">https://qiita.com/knsh14/items/8b73b31822c109d4c497</a></li></ul></li><li><strong><a href="https://qiita.com/ksato9700/items/6228d4eb6d5b282f82f6" target="_blank" rel="noopener">Go言語で幸せになれる10のテクニック - Qiita</a></strong><ul><li>(個人的にはReturn function callsが特にレビュー指摘がとても多い)</li></ul></li><li><strong><a href="https://github.com/uber-go/guide" target="_blank" rel="noopener">Uber Style Guide</a></strong><ul><li>日本語訳: <a href="https://github.com/knsh14/uber-style-guide-ja" target="_blank" rel="noopener">https://github.com/knsh14/uber-style-guide-ja</a></li></ul></li><li><strong><a href="https://github.com/google/go-cloud/blob/master/internal/docs/design.md#coding-conventions" target="_blank" rel="noopener">go-cloudのCoding Conventions</a></strong><ul><li>短いですが、GoCDKというライブラリの規約が書いてありました</li></ul></li></ul><p>もし、利用しているWebApplicationFrameworkがgo-swaggerであれば</p><ul><li><a href="https://future-architect.github.io/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a></li></ul><p>も軽く見てもらっています。</p><h1 id="コードレビューの位置づけ"><a href="#コードレビューの位置づけ" class="headerlink" title="コードレビューの位置づけ"></a>コードレビューの位置づけ</h1><p>レビューコメントですが、golangci-linterやその他Linterでカバーできる内容もあるかもしれません。静的解析で分かる範囲はなるべく自動化して、人間がやるべきところにもっとフォーカスを当てるべきだと思いますが、正直あまりここに力を割けてません。これ、Linterでデキるよってのがあれば教えて下さい。</p><p>ちなみに、golangci-lintの設定は、スピード重視で最低限にしています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">golangci-lint run --tests --disable-all \ </span><br><span class="line">  --enable&#x3D;goimports --enable&#x3D;govet --enable&#x3D;errcheck --enable&#x3D;staticcheck</span><br></pre></td></tr></table></figure><p>あまり力を割けてはいませんが、リソースのクローズ漏れなどの致命的な不具合以外の、文法よりのところはレビューで防ぐか、最悪は後でテックリードがリファクタリング修正コミットすれば良いという考えで、初心者Gopherにはユニットテストをガンバって欲しいという意図があります。とは言え、何度も同じようなレビューコメントをするのも大変なので、汎用性がありそうなのを今回まとめた次第です。Linterでいけるなら行きたいです。</p><h1 id="💬-コードレビューでコメントしたこと"><a href="#💬-コードレビューでコメントしたこと" class="headerlink" title="💬 コードレビューでコメントしたこと"></a>💬 コードレビューでコメントしたこと</h1><p>数が増えてきましたので、以下のように4つのカテゴリに分けました。</p><ul><li>📦ライブラリの使い方</li><li>☁️クラウド環境を意識した実装</li><li>⚡一般的な内容</li><li>🧪単体テスト</li></ul><h2 id="📦ライブラリの使い方"><a href="#📦ライブラリの使い方" class="headerlink" title="📦ライブラリの使い方"></a>📦ライブラリの使い方</h2><h3 id="1-なるべくXxxWithContextを使おう"><a href="#1-なるべくXxxWithContextを使おう" class="headerlink" title="1. なるべくXxxWithContextを使おう"></a>1. なるべくXxxWithContextを使おう</h3><p>特にHTTP要求やDB接続などで、利用するパッケージの関数に <code>context.Context</code> を指定できる、多分 <code>WithContext</code>がついか関数があると思います。なるべくそちらを利用するようにしましょう。キャンセル通知やTimeoutの伝播などを行えて無駄なリソースの実行を防ぐことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 これでも良いが、context.Contextを使って欲しい</span></span><br><span class="line">resp, err := http.Get(<span class="string">"http://example.com/"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 context.Contextを渡す関数へ</span></span><br><span class="line">req, err := http.NewRequestWithContext(ctx, http.MethodGet, <span class="string">"http://example.com/"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">resp, err = http.DefaultClient.Do(req)</span><br></pre></td></tr></table></figure><p>使い捨てのコードであれば最初のコードの方がシンプルなのでドンドン利用すると良いと思います。例えばnet/httpを用いてサーバサイドを実装した場合には、 <code>http.Request</code> からcontext.Contextを取得できるので、これを別の外部リソース（DBとか外部APIなど）へのアクセス時にも利用するため引き回します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// このctxを引き回して用いる。別の関数に引き渡すときもこのctxを渡せるように定義しておく</span></span><br><span class="line">ctx := r.Context()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回は外部へのHTTPリクエストでしたが、例えば<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/s3/#S3.GetObjectWithContext" target="_blank" rel="noopener">AWS S3</a>でも、<code>GetObjec</code> より <code>GetObjectWithContext</code> を使おうとなります。AWSやGCPなどクラウド系のSDKはもちろん、3rd Party製のライブラリにもWithContext付きのAPIが用意されていることが多いので、ぜひ利用しましょう。</p><p>これを守ると、自分で定義する関数もcontext.Contextを引き回す設計になると思います。</p><figure class="highlight go"><figcaption><span>DynamoDBへのcontext.Contextを引き回しての書き込み例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeToDB</span><span class="params">(ctx context.Context, v ExampleStruct)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">av, err := dynamodbattribute.MarshalMap(v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodb attribute marshalling map: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">i := &amp;dynamodb.PutItemInput&#123;</span><br><span class="line">Item:      av,</span><br><span class="line">TableName: aws.String(<span class="string">"&lt;テーブル名&gt;"</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, err = db.PutItemWithContext(ctx, i); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodb put item: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Factory関数があればそちらを優先しよう"><a href="#2-Factory関数があればそちらを優先しよう" class="headerlink" title="2. Factory関数があればそちらを優先しよう"></a>2. Factory関数があればそちらを優先しよう</h3><p><code>go-swagger</code> での生成コードでよくありましたが、ライブラリが<code>NewXxx</code>のファクトリ関数を用意している場合はそちらを利用しましょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 Structに自分で詰めても場合によっては良いが..</span></span><br><span class="line">params := &amp;UplinkSecurityParams&#123;</span><br><span class="line">Context:    ctx,</span><br><span class="line">HTTPClient: hc,</span><br><span class="line">UserID:     <span class="string">"userID"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀ファクトリー経由での生成したほうが固い</span></span><br><span class="line">params := user.NewGetUserParamsWithContext(ctx).</span><br><span class="line">WithHTTPClient(hc).</span><br><span class="line">WithXAPIKey(<span class="string">"0123456789"</span>).</span><br><span class="line">WithUserID(userID)</span><br></pre></td></tr></table></figure><p>理由は、ファクトリー内で初期値を設定していたり、将来的にそういった処理が差し込まれる可能性があるためです。用意されているのであればそちらをまず優先して使いましょう。ファクトリー関数があるかどうかは、GoDocを探すことが多いと思います。GoDocの探し方にもコツがあるので、<a href="https://future-architect.github.io/articles/20200521/">Go Tips連載4: GoDocの読み方</a> の記事をチェックしてみると勉強になります。</p><h3 id="3-利用ライブラリがチェーンスタイルを提供していれば活用しよう"><a href="#3-利用ライブラリがチェーンスタイルを提供していれば活用しよう" class="headerlink" title="3. 利用ライブラリがチェーンスタイルを提供していれば活用しよう"></a>3. 利用ライブラリがチェーンスタイルを提供していれば活用しよう</h3><p>先ほどのgo-swagger以外のライブラリでもそうですが、チェーンスタイル（関数をドット区切りでつなげていく）なAPIを提供してくれているライブラリもあります。例えばGCPのSDKなどです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 別に実装上問題ないですが..</span></span><br><span class="line">ts := compute.NewInstanceTemplatesService(s)</span><br><span class="line">tsf:= ts.List(projectID).Filter(<span class="string">"properties.labels.scheduled=true"</span>)</span><br><span class="line">listInstances, err :=tsf.Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 一時変数が無い分は可読性が高そうなので、他で流用しないならつなげて書いてもOK</span></span><br><span class="line">listInstances, err := compute.NewInstanceTemplatesService(s).</span><br><span class="line">List(projectID).</span><br><span class="line">Filter(<span class="string">"properties.labels."</span> + targetLabel + <span class="string">"=true"</span>).</span><br><span class="line">Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1行にまとめるのか、複数行にするのかは好みなのでどちらでも良い気はします。ブログではスマホでも見やすいように改行しています。</p><h3 id="4-SDKが出力するNotFoundを意味するerrorと、その他のエラーを区別してハンドリングする"><a href="#4-SDKが出力するNotFoundを意味するerrorと、その他のエラーを区別してハンドリングする" class="headerlink" title="4. SDKが出力するNotFoundを意味するerrorと、その他のエラーを区別してハンドリングする"></a>4. SDKが出力するNotFoundを意味するerrorと、その他のエラーを区別してハンドリングする</h3><p>Go入門時はどうしても、とにかく <code>if err:= fn(); err!= nil {return err}</code> するものだと教わるものかと思いますが、当然ながらerrorの値によってハンドリング内容を変更する場合もあります。例えば、あるerrorの場合はステータス404を返し、そうでない場合は500を返す場合などです。</p><p>例としてDynamoDBのUpdateItemをあげます。</p><figure class="highlight go"><figcaption><span>DynamoDBのUpdateItemの例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db dynamodb.New(session.Must(session.NewSession())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line">out, err := db.UpdateItemWithContext(ctx, &amp;dynamodb.UpdateItemInput&#123;</span><br><span class="line">TableName: aws.String(<span class="string">"&lt;exmaple-table&gt;"</span>),</span><br><span class="line">ExpressionAttributeNames: <span class="keyword">map</span>[<span class="keyword">string</span>]*<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"#TYPE"</span>:       aws.String(<span class="string">"user_type"</span>),</span><br><span class="line"><span class="string">"#REVISION"</span>:   aws.String(<span class="string">"revision"</span>),</span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeValues: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">":type"</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">"有料会員"</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">":incr"</span>: &#123;</span><br><span class="line">N: aws.String(<span class="string">"1"</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">"user_id"</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">"&lt;user-id&gt;"</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">ConditionExpression: swag.String(<span class="string">"attribute_exists(user_id)"</span>),</span><br><span class="line">UpdateExpression: aws.String(<span class="string">"SET #TYPE= :size ADD #REVISION :incr"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 💬 500 Server Internal Error をレスポンスで返す</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の<code>db.UpdateItemWithContext</code> を実行後の <code>err</code> ですが、もし一律<code>500 Server Internal Error</code> で返すと、おそらく意図と反する挙動になるかもしれません。理由は、指定したユーザIDが存在しない場合の考慮がないためです。もしユーザIDが存在しない場合に404を返す要件で合った場合はこの実装では満たせません。</p><p>もし、そういった要件の場合は、以下のような判定用のエラー関数を作成し、エラーハンドリングを修正すると良いかと思います。</p><figure class="highlight go"><figcaption><span>ヘルパー関数を使った細かいハンドリング</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsNotFoundErr</span><span class="params">(err error)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">aerr, ok := err.(awserr.Error)</span><br><span class="line"><span class="keyword">if</span> ok &amp;&amp; aerr.Code() == dynamodb.ErrCodeConditionalCheckFailedException &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 🚀 (当然だけど..)必要に応じてハンドリング</span></span><br><span class="line"><span class="keyword">if</span> IsNotFoundErr(err) &#123;</span><br><span class="line"><span class="comment">// 404 NotFound</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 500 ServerInternalError</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今利用しているSDKがどういうエラーを返すかは、<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#DynamoDB.UpdateItem" target="_blank" rel="noopener">こういったドキュメントを探す</a>か、コードを探すかになると思います。何にしろ、正常系以外のエラーパスのハンドリングはどうしても後回しになりがちですが、この辺はレビュアー視点でも抜け漏れガチなので、相互にチェックしあえると良いかなって思います。</p><h3 id="5-複数Itemを処理する場合、Batch登録APIの有無を確認しよう"><a href="#5-複数Itemを処理する場合、Batch登録APIの有無を確認しよう" class="headerlink" title="5. 複数Itemを処理する場合、Batch登録APIの有無を確認しよう"></a>5. 複数Itemを処理する場合、Batch登録APIの有無を確認しよう</h3><p>これはどの言語でも共通する内容ですが、PostgreSQLへのinsertやDynamoDBへのPutItem、あるいは複数のキーを指定したGetなどはSDKやライブラリが用意しているBatch処理用のAPIを利用しましょう。1件1件は大したことがなくても、500件ほど積み重なると思いの外レイテンシに影響がデカイです。</p><p>また、Batch処理のAPIが合ったとしても、同時に書き込む件数は絞り込む必要が特にAWSやGCPには存在します。RDBであっても同時書き込み件数は1000件くらいに絞ったほうが良いでしょう。例えばAWS Kinesisへの書き込み例ですが、複数件の書き込みなので <code>putRecords</code>を利用します。大体が同時に書き込めるデータ容量やバッチ件数があるので、ググって上限を調べます。次のコードだと実は最大 5 MBの制限チェックはしていないのですが必要に応じてそういった閾値の判定を追加します。</p><figure class="highlight go"><figcaption><span>Kinesisへのバッチ登録例(※ちょっとエラーハンドリング甘い書き方なので注意)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kc *kinesis.Kinesis</span><br><span class="line"><span class="keyword">var</span> items []ExampleStruct</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">entries := <span class="built_in">make</span>([]*kinesis.PutRecordsRequestEntry, <span class="number">0</span>, <span class="built_in">len</span>(items))</span><br><span class="line"><span class="keyword">for</span> i, v:= <span class="keyword">range</span> items &#123;</span><br><span class="line">data, _:= json.Marshal(v)</span><br><span class="line">entries = <span class="built_in">append</span>(entries, &amp;kinesis.PutRecordsRequestEntry&#123;</span><br><span class="line">Data:         data,</span><br><span class="line">PartitionKey: aws.String(<span class="string">"&lt;any partition key&gt;"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// KinesisのBatch上限件数が500なので分割する</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(entries) &gt;= <span class="number">500</span> || i == <span class="built_in">len</span>(items) <span class="number">-1</span> &#123;</span><br><span class="line">_, err := kc.PutRecordsWithContext(ctx, &amp;kinesis.PutRecordsInput&#123;</span><br><span class="line">Records:    records,</span><br><span class="line">StreamName: aws.String(<span class="string">"&lt;Kinesis Stream name&gt;"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">entries = entries[:<span class="number">0</span>] <span class="comment">// 成功したらクリア</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回は省略しましたが、この辺の最大件数が数百になるような閾値を含んだ単体テストは書きにくいので、500を <code>var kinesisPutSize = 500</code> といった形で変数に切り出すこともおそらく必要になってくると思います。この辺りはどこまでレビュー時にコメントするか、後から自分で直すかはその時の状況次第ですが、少ない件数では上手く動くけど、件数が増えるとスローダウンしたりエラーが発生するのは結構辛い事象なので、気をつけていきたい点ですね。</p><p>検索系も同様に大量件数に対する考慮が必要です。特に最大検索件数を指定し忘れることが多いので、SQLやDynamoDBにLimitの指定をし忘れないようにしましょう。特にSQLは意識しないとよく忘れるので、フレームワークレベルで横断的に設定しても良いかも知れません。</p><p>※ちなみに上記のコードは<code>putRecords</code>結果の <code>FailedRecordCount</code>が<code>0</code> であるかを確認していないので、そのままは利用しないで下さい。本当は<code>FailedRecordCount</code>が1件以上であれば、未処理だったレコードを再びputRecords対象に回す必要があります。<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/kinesis/#Kinesis.PutRecords" target="_blank" rel="noopener">参考</a>。この辺のAWSのSDK周りのハマリどころの説明は長くなるので..今回は省略します。</p><h2 id="☁️クラウド環境を意識した実装"><a href="#☁️クラウド環境を意識した実装" class="headerlink" title="☁️クラウド環境を意識した実装"></a>☁️クラウド環境を意識した実装</h2><h3 id="6-外部通信周りのリトライ"><a href="#6-外部通信周りのリトライ" class="headerlink" title="6. 外部通信周りのリトライ"></a>6. 外部通信周りのリトライ</h3><p><a href="https://dev.classmethod.jp/articles/retry-api-call-with-exponential-backoff-using-aws-sdk-go/" target="_blank" rel="noopener">AWS SDK for Goの場合は、APIコール時のリトライを意識して実装する必要は無い</a>ということです。問題になるのは、他のWebAPIサーバにリクエストを送信するときでしょう。</p><p>Goは簡単にHTTPリクエストを送信できるのでそれ自体は良いことですが、特にクラウド環境で動いているリソースに対しては瞬断も想定してリトライロジックを入れたほうが良いでしょう。リトライもそこそこナレッジが合って、<a href="https://docs.aws.amazon.com/ja_jp/general/latest/gr/api-retries.html" target="_blank" rel="noopener">エクスポネンシャルバックオフ</a>であったり、ジッターを入れるなど、自前で実装するとややこしいのでGoだと外部ライブラリに頼ることがほとんどだと思います。</p><ul><li><a href="https://github.com/hashicorp/go-retryablehttp" target="_blank" rel="noopener">hashicorp/go-retryablehttp</a></li></ul><p>などを利用すると良いかと思います。もし実行基盤がAWS Lambdaだとインフラレベルでリトライ回数を設定できるので、その場合は不要かもしれません。状況次第ですがレビュアー・レビュイーと相談して決めていました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 カジュアルなWebAPIを呼び出し</span></span><br><span class="line">resp, err := http.Get(<span class="string">"http://api.example.com/v1/users/"</span> + userID)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 リトライまで考慮したい(hashicorp/go-retryablehttpを使った例)</span></span><br><span class="line">retryClient := retryablehttp.NewClient()</span><br><span class="line">retryClient.RetryMax = <span class="number">2</span></span><br><span class="line">rc := retryClient.StandardClient()</span><br><span class="line">req, err := http.NewRequestWithContext(ctx, http.MethodGet, <span class="string">"http://example.com/"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">resp, err := rc.Do(req)</span><br></pre></td></tr></table></figure><p>1のWithContextの話と合わせて実装してみて下さい。ちなみに、もし外部API側がOpenAPI定義などを公開している場合は、そちらを利用した方が良いでしょう。もし、WebAPI定義の仕様が変わった場合に、再コード自動生成＋コンパイルで不整合を事前に検知できるかも知れないからです。</p><h3 id="7-プロパティは環境変数に切り出し起動時にチェックする"><a href="#7-プロパティは環境変数に切り出し起動時にチェックする" class="headerlink" title="7. プロパティは環境変数に切り出し起動時にチェックする"></a>7. プロパティは環境変数に切り出し起動時にチェックする</h3><p>データストアを始めとした外部リソースへのアクセス先など、多くのプロパティが業務システムの開発は出てくると思います。この時のホスト名、ポート番号、URLなどは環境変数などの外部から設定できるようにしましょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 1stコミットだから良いよね？って感じの仮実装の気持ちが伝わりますが</span></span><br><span class="line"><span class="keyword">const</span> EXTERNAL_API_URL = <span class="string">"http://localhost:8001"</span></span><br><span class="line"><span class="keyword">var</span> client = NewClient(EXTERNAL_API_URL)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 環境変数化はどのみち必要であるため早めに対応したい</span></span><br><span class="line"><span class="keyword">var</span> client external.Client</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">externalURL := os.Getenv(<span class="string">"EXTERNAL_API_URL"</span>)</span><br><span class="line"><span class="keyword">if</span> externalURL == <span class="string">""</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"EXTERNAL_API_URL is requiread environment variable"</span>)</span><br><span class="line">&#125;</span><br><span class="line">client = NewExternalClient(externalURL )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、環境変数化した場合は、その値がちゃんと設定されているか必須チェックなどは最低限行いましょう。Goだと<a href="https://github.com/kelseyhightower/envconfig" target="_blank" rel="noopener">kelseyhightower/envconfig</a> といった便利ライブラリもあるため、すでに導入済みであればそちらにフィールドを追加して、タグを設定すれば必須チェックくらいは行なえます。</p><p>環境変数を追加した場合は、READMEなどのドキュメントや、TerraformやCloudFormationなどインフラスコード側の更新も同期をとる必要があることが多いと思いますので、そういったものが存在しないかはレビュアー・レビュイーどちらも気をつけていったほうが良いと思います。</p><h2 id="⚡一般的な内容"><a href="#⚡一般的な内容" class="headerlink" title="⚡一般的な内容"></a>⚡一般的な内容</h2><h3 id="8-再利用可能なgoroutineセーフな変数はフィールドに切り出す"><a href="#8-再利用可能なgoroutineセーフな変数はフィールドに切り出す" class="headerlink" title="8. 再利用可能なgoroutineセーフな変数はフィールドに切り出す"></a>8. 再利用可能なgoroutineセーフな変数はフィールドに切り出す</h3><p><code>http.Client</code> などは<code>safe for concurrent use by multiple goroutines</code>(goroutineセーフだよ)と<a href="https://golang.org/src/net/http/client.go" target="_blank" rel="noopener">GoDoc</a> に記載されています。同じようにaws-sdk-for-goのDynamoDBのクライアントも<code>safe to use concurrently</code>だと<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#DynamoDB" target="_blank" rel="noopener">GoDoc</a>に記載されています。”Thread Safe”とか、”goroutine Safe”とか、”Concurrency Safe” とかで調べると見つけやすいと思います。この辺りをのクライアントを毎回生成せず、再利用できるものはフィールドに持たせようという指摘は比較的多いです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 毎回フィールドでDynamoDBクライアントを生成</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> db dynamodb.New(session.Must(session.NewSession())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中略</span></span><br><span class="line">    out, err := db.UpdateItemWithContext(ctx, &amp;dynamodb.GetItemInput&#123;</span><br><span class="line">    TableName: aws.String(<span class="string">"&lt;exmaple-table&gt;"</span>),</span><br><span class="line">        Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line">            <span class="string">"user_id"</span>: &#123;</span><br><span class="line">                N: aws.String(<span class="string">"1"</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 中略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 goroutine Safeなものはフィールドに置いて再利用</span></span><br><span class="line"><span class="keyword">var</span> db dynamodb.New(session.Must(session.NewSession())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 中略</span></span><br><span class="line">    out, err := db.UpdateItemWithContext(ctx, &amp;dynamodb.GetItemInput&#123;</span><br><span class="line">    TableName: aws.String(<span class="string">"&lt;exmaple-table&gt;"</span>),</span><br><span class="line">        Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line">            <span class="string">"user_id"</span>: &#123;</span><br><span class="line">                N: aws.String(<span class="string">"1"</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 中略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-Structの初期化処理はまとめる"><a href="#9-Structの初期化処理はまとめる" class="headerlink" title="9. Structの初期化処理はまとめる"></a>9. Structの初期化処理はまとめる</h3><p>GoのネストしたStructの作成は親子同時に行えるので、一度に宣言したほうが構造が使い見やすい分お得だと思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 ネストしたStructの方を先に宣言してから、後で親側にセット</span></span><br><span class="line">args := []command.Arg&#123;</span><br><span class="line">&#123;<span class="string">"media_type"</span>, control.MediaType&#125;,</span><br><span class="line">&#123;<span class="string">"live_streaming_enabled"</span>, fmt.Sprintf(<span class="string">"%v"</span>, control.LiveStreamingEnabled)&#125;,</span><br><span class="line">&#123;<span class="string">"device_id"</span>, deviceID&#125;,</span><br><span class="line">&#125;</span><br><span class="line">req := &amp;command.Command&#123;</span><br><span class="line">Func: control.CommandType,</span><br><span class="line">Args: args,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 これくらいであれば一度に宣言してしまう方が見やすい</span></span><br><span class="line">req := &amp;command.Command&#123;</span><br><span class="line">Func: control.CommandType,</span><br><span class="line">Args: []command.Arg&#123;</span><br><span class="line">&#123;<span class="string">"media_type"</span>, control.MediaType&#125;,</span><br><span class="line">&#123;<span class="string">"live_streaming_enabled"</span>, fmt.Sprintf(<span class="string">"%v"</span>, control.LiveStreamingEnabled)&#125;,</span><br><span class="line">&#123;<span class="string">"device_id"</span>, deviceID&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他のWebAPIでネストしたJSONをPOSTする時によくこういったコードが生まれやすい気がします。やりすぎは禁物ですがコレくらいであればargsの一時変数代入を行わずreqを作成したいですね。</p><h3 id="10-Structのフィールドを利用した判定ロジックを呼び出し元ではなくStruct側に寄せていく"><a href="#10-Structのフィールドを利用した判定ロジックを呼び出し元ではなくStruct側に寄せていく" class="headerlink" title="10. Structのフィールドを利用した判定ロジックを呼び出し元ではなくStruct側に寄せていく"></a>10. Structのフィールドを利用した判定ロジックを呼び出し元ではなくStruct側に寄せていく</h3><p>Structがデータを出し入れするだけの用途になることはよくあると思います。Structからデータを取得してif/forなどで処理をしているロジックがあれば、それはレシーバ側に寄せることを検討してみると良いかなと思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 センサーデータを表現するStructがあり、値の取得ロジックを利用側で実装しているイメージ</span></span><br><span class="line"><span class="keyword">type</span> SensorData <span class="keyword">struct</span> &#123;</span><br><span class="line">SensorType <span class="keyword">string</span></span><br><span class="line">ModelID <span class="keyword">string</span></span><br><span class="line">Value <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadValue</span><span class="params">(r SensorReading)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.ModelID == <span class="string">"P0AUK100B"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.SensorType == <span class="string">"D001"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value * <span class="number">1</span>/<span class="number">100</span> <span class="comment">// 何かしらの補正ロジック</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r.Value * <span class="number">1</span>/<span class="number">10</span> <span class="comment">// 何かしらの補正ロジック </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 レシーバに実装する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r SensorData)</span> <span class="title">ReadValue</span><span class="params">()</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.ModelID == <span class="string">"P0AUK100B"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.SensorType == <span class="string">"振動系"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value * <span class="number">1</span>/<span class="number">100</span> <span class="comment">// 何かしらの補正ロジック</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r.Value * <span class="number">1</span>/<span class="number">10</span> <span class="comment">// 何かしらの補正ロジック </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように寄せる意図は、単体テストを書きやすくなるというメリットが特にあると思います。後述するTableDrivenTestsにも繋げやすくなります。</p><figure class="highlight go"><figcaption><span>Struct側に実装するとテストがしやすい</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReadValue</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">r := SensorReading&#123;</span><br><span class="line">SensorType: <span class="string">"D001"</span>,</span><br><span class="line">ModelID:    <span class="string">"00CCK100W"</span>,</span><br><span class="line">Value:      <span class="number">12345</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.ReadValue() != <span class="number">1234.5</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">"want 123 but got "</span>, r.ReadValue())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、ロジックが呼び出し側に散らばらず、自然とデータを保持するStructが扱う業務ドメインのモデルぽく成長するメリットもあります。レシーバに寄せた後も、<code>if r.ModelID == &quot;P0AUK100B&quot;</code> ってどういう意味だろうかとか（プロトタイプの製品コードのイメージ）、なんで <code>1/100</code> するんだとかは、定数に切ったり別の説明関数を切ったりすることで、自己説明的なコードになるし、さらに細かくテストもしやすくなるし、今後プロトタイプ判定処理を拡張しようとした時に見通しを立てやすくと思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r SensorData)</span> <span class="title">IsprototypeModel</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.ModelID == <span class="string">"P0AUK100B"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r SensorData)</span> <span class="title">ReadValue</span><span class="params">()</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.IsprototypeModel() &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この話はDDDの話題とおそらく近くて好みが分かれそうなところですが、せっかくレシーバという機能がGoにあるのでドンドン使っていって、細かい粒度でテストを書いていこうよと話しています。</p><h3 id="11-panicやlog-Fatalはmain関数でのみ利用し、その他の関数はreturn-errする"><a href="#11-panicやlog-Fatalはmain関数でのみ利用し、その他の関数はreturn-errする" class="headerlink" title="11. panicやlog.Fatalはmain関数でのみ利用し、その他の関数はreturn errする"></a>11. panicやlog.Fatalはmain関数でのみ利用し、その他の関数はreturn errする</h3><p>Goのエラーハンドリングですが、よく言われるように、<strong>main関数以外</strong>で<code>panic</code>や<code>os.Exit(1)</code>や<code>log.Fatal</code>を行うのは原則禁止です。テストがしにくいといったことが理由です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬アルバイト勢がよく書いていたコード。なぜかよく指摘した</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">example</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"><span class="keyword">if</span> err := anyWork() &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀returnして最終的なハンドリングはmain関数かそれに相当する上位の関数でハンドリングする</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">example</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"><span class="keyword">if</span> err := anyWork() &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この辺りのお作法チックな指摘は、最初はしっくり来ない人が多いのか、業務でコードを書くのは初めてといった新卒さんやアルバイトerなメンバーによく指摘してる気がします。</p><h3 id="12-デバック用の標準出力はレビュー時には削除し、必要であればloggerを用いる"><a href="#12-デバック用の標準出力はレビュー時には削除し、必要であればloggerを用いる" class="headerlink" title="12. デバック用の標準出力はレビュー時には削除し、必要であればloggerを用いる"></a>12. デバック用の標準出力はレビュー時には削除し、必要であればloggerを用いる</h3><p><code>fmt.Println</code> が大量に書かれたコードのレビューをすると、試行錯誤の経緯が垣間見れるような気がして癒やされますよね。一方で、プロダクションコードにデバック用の標準出力は入れたくないので、消すかlogger経由にして欲しいと依頼するかGUIから消しちゃうことが多い気がします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬標準出力は辞めよう</span></span><br><span class="line">fmt.Println(<span class="string">"■debug確認"</span>, v.Name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀レビュー時にはキレイキレイしておくか、どうしても必要ならlogger経由で出力する</span></span><br><span class="line"><span class="keyword">import</span><span class="string">"github.com/rs/zerolog/log"</span></span><br><span class="line"></span><br><span class="line">log.Debug().Msgf(<span class="string">"UserName: %s\n"</span>, v.Name)</span><br></pre></td></tr></table></figure><h3 id="13-errのスコープを小さくする工夫"><a href="#13-errのスコープを小さくする工夫" class="headerlink" title="13. errのスコープを小さくする工夫"></a>13. errのスコープを小さくする工夫</h3><p>ある関数がerrorのみを返す時にありがちなのですが、if文の中で関数を呼ばない方式だと、err1とerr2で変数名が被るので、連番方式になりがちです。この場合はよくerr2のreturn部分をerr1にするミスをおかしがちです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 複数のerrがある場合は、連番方式になる（経験上）</span></span><br><span class="line">err1 := PostArticle(article)</span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err1</span><br><span class="line">&#125;</span><br><span class="line">err2 := UpdateIndex(article)</span><br><span class="line"><span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err2 <span class="comment">// ⚠️よくここが err1 になってしまいバグの原因に⚠️</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 errorのスコープをif文に閉じ込める</span></span><br><span class="line"><span class="keyword">if</span> err := PostArticle(article); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := UpdateIndex(article); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そのため、慣れるまで違和感が残りますが、if文の中でerrを宣言 &amp; ハンドリングするようにします。<br>複数の値を返す関数の場合でも、なるべく err1, err2といった変数を作らないようにする方が、バグ🐞を埋め込む確率を下げることに繋がると思います。</p><h3 id="14-return-errについて"><a href="#14-return-errについて" class="headerlink" title="14. return errについて"></a>14. return errについて</h3><p>非常に細かい点ですが、高確率に突っ込むことが多いネタです。コードのとおりですがnilが自明な場合は、変数ではなくnilそのものの固定値を返したほうが、レビュー時の脳内メモリを減らせて助かるので、確認しながら書き換えています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 複数のerrがある場合は、連番方式になる（経験上）</span></span><br><span class="line">resp, err := hoge()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"context info: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, err <span class="comment">// ⚠️ここのerrは必ずnilになるはず⚠️</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 errorのスコープをif文に閉じ込める</span></span><br><span class="line">resp, err := hoge()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"context info: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, <span class="literal">nil</span> <span class="comment">// 自明であればnilにする</span></span><br></pre></td></tr></table></figure><p>書き換え後のコードが前提になっている人は、最後のreturnでerrが残っているともしかしてnil以外の値が入るフローがあるのかと余計に考えてしまうそうです。</p><h3 id="15-Return-function-callsでできるものは一時変数に代入しない"><a href="#15-Return-function-callsでできるものは一時変数に代入しない" class="headerlink" title="15. Return function callsでできるものは一時変数に代入しない"></a>15. Return function callsでできるものは一時変数に代入しない</h3><p>一時変数に格納して、そのままreturnするコードもありますが、関数をreturnから始めるのを恐れなくても良いと思います。変数textが無くなる分、ワーキングメモリが減ってレビューが楽になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 一時変数への代入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countTextLength</span><span class="params">(text <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">text := utf8.RuneCountInString(text)</span><br><span class="line"><span class="keyword">return</span> text</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 returnから開始することを恐れない</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countTextLength</span><span class="params">(text <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> utf8.RuneCountInString(text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記であればreturn firstを取る人も、<code>val, error := anyFunc()</code> みたいに多値を返す関数の場合、一時変数を準備する人が多いと思います。最初に紹介した、<a href="https://qiita.com/ksato9700/items/6228d4eb6d5b282f82f6" target="_blank" rel="noopener">Go言語で幸せになれる10のテクニック - Qiita</a>の記事に書いてあるとおり、Return function callsにするとスッキリします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 errチェックをしても、結局関数barの振る舞いは同じ</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">(arg <span class="keyword">string</span>)</span> <span class="params">(*Example, error)</span></span> &#123;</span><br><span class="line">v, err := foo(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> v, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 それであれば直接returnしちゃう</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">(argstring)</span> <span class="params">(*Example, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> foo(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後の <code>return foo(arg)</code> で良いじゃないかな？って提案は年に100回くらいしている気がします。コードも減るので、errorをWrapしない場合はこちらで省略できないか、注意すると良いんじゃないかと思います。</p><h4 id="16-コードコメント"><a href="#16-コードコメント" class="headerlink" title="16. コードコメント"></a>16. コードコメント</h4><p>コードのコメントについては、至言があるので引用します。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">コードには How<br>テストコードには What<br>コミットログには Why<br>コードコメントには Why not<br><br>を書こうという話をした</p>&mdash; Takuto Wada (@t_wada) <a href="https://twitter.com/t_wada/status/904916106153828352?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 5, 2017</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>これ以上は蛇足になりそうですが、、、あとはことAWS, GCPなどのサービスを利用する場合は、処理件数などの制約があるかと思いますので、そのリファレンスURLなどをコードに貼ることは有効だと思います。また、ライブラリの利用方法も特殊なものがあれば、GoDocのExampleコードのリンクを貼るのは有効です。<a href="https://ishiotks.hatenablog.com/entry/2019/02/02/143259" target="_blank" rel="noopener">ソースコードのコメントに登場する URL の役割</a>にもある通り、<strong>無効になりにくい URL を使う</strong> といったテクニックがあるので、リンク先の記事も確認してみて下さい</p><p>コードレビュー時には、正直自分が使ったことがないプロダクトにアクセスするコードの場合は、レビューがつらすぎるので、レビュイーに参考にしたURLを教えてもらったり、制約から来ているぽい数値の諸元を確認したりしています。この時、すでにコード上に参考URLが貼ってあれば、GitHub上のPullRequestのコメントで余計なやり取りが減らせるので、スピード感が増してお互い幸せかなと思っています。</p><h2 id="🧪単体テスト"><a href="#🧪単体テスト" class="headerlink" title="🧪単体テスト"></a>🧪単体テスト</h2><h3 id="17-単体テストの変数名"><a href="#17-単体テストの変数名" class="headerlink" title="17. 単体テストの変数名"></a>17. 単体テストの変数名</h3><p>出身や育った環境の違い？で期待値と実際値を、<code>input/actual/expected</code>と呼んだり、<code>in/want/got</code>と呼んだりいくつかの文化圏があるようです。Goは <code>in/want/got</code>を採用することが多いようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 💬 正直、好みの世界だが..</span></span><br><span class="line">cases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">input        <span class="keyword">string</span></span><br><span class="line">expected     <span class="keyword">string</span></span><br><span class="line">expectedCode <span class="keyword">int</span></span><br><span class="line">&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 🚀 want。複数ある場合はwantCodeなどで区別する</span></span><br><span class="line">cases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">in       <span class="keyword">string</span></span><br><span class="line">want     <span class="keyword">string</span></span><br><span class="line">wantCode <span class="keyword">int</span></span><br><span class="line">&#125;&#123;&#125;</span><br></pre></td></tr></table></figure><p>他にも入力値は <code>in</code> とすることが多そうです。次のTable Driven Testsではcaseと汎化されて、使う機会は少ないかも知れません。</p><h3 id="18-Table-Driven-Tests"><a href="#18-Table-Driven-Tests" class="headerlink" title="18. Table Driven Tests"></a>18. Table Driven Tests</h3><p>GoだとTable Driven Testsという、データを駆動にテストすることが推奨されています。</p><ul><li><a href="https://github.com/golang/go/wiki/TableDrivenTests" target="_blank" rel="noopener">https://github.com/golang/go/wiki/TableDrivenTests</a></li></ul><p>このパターンになっていなくて、このパターンが導入できそうな場合、そっとTable Driven Testsっていうのがあってね、と声をかけることにしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"%d"</span>, i), <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got := TestFunction(tt.in)</span><br><span class="line"><span class="keyword">if</span> got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"failed for %v: got %v, want %v"</span>, tt.in, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>たとえ、テストパターンが1件でもTable Driven Testsで作成しておけば、後でケースを追加したいときも容易なので、基本的にこのスタイルでのテストを推奨しています。テスト駆動開発は自分たちのチームでは全員が取り組んでいないので、最初のPullRequestレビューではテストがない（！）事が多く、テストを書いてねってコメントすることも多いのも実はあります。（最終的には全て書くのですが）</p><p>テストに関してはbudougumi0617さんの<a href="https://budougumi0617.github.io/2018/08/19/go-testing2018/#table-driven-test" target="_blank" rel="noopener">Goのtestを理解する in 2018 #go</a>の記事にいつもお世話になっています。ありがとうございます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>独断と偏見による、コードレビューでよく指摘したことのまとめ記事でした。Goに入ればGoに従えっていうのはかなり浸透している気がしますが、ことライブラリの使い方や、AWSなどのクラウド上でアプリを動かす時といった観点での、こういったレビュー記事は観測した限りは比較的少なかったのでまとめました。</p><p>また、今回は省略した内容でよく指摘したのは、</p><ul><li>「変数名や関数名やレシーバ名を短くしよう」</li><li>「Sliceのマージは<code>...</code>を使って<code>append</code>すると良いよ」</li><li>「関数の引数で同じ型が並んでいると省略できるよ」</li><li>「引数の並び順はcontext.Contextとか固い順にしようよ」</li><li>「引数の種類が多い場合はStructを作らない？」</li><li>「ファイルI/Oなどで一度に全部メモリに抱えず、1000件単位などでページングしながら処理しよう」</li></ul><p>とか色々ありましたが、このへんは別の記事でもよく上げられていたので省略しました。</p><p>他にもライブラリの使い方や、クラウドで動かすアプリ開発で汎用的なネタが集まりましたら、ここに追記予定です。</p><p>Go案件も色々増えてきていますので、興味がある方はお気軽にリモート飲み会（お茶会）しましょう☕🍻。興味がある方はフューチャーぽいメンバーにDMください。</p><p>ここまで読んでいただいてありがとうございました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIG(Technology Innovation Group)というフューチャーグループのIT技術を良い感じに推進する部署と、その中にあるDXユニットという、デジタルトランスフォーメーションに関わる仕事を主に推進していくチームのことです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200709/photo_20200709_01.png&quot; class=&quot;img-small-size&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Zuora連載2：Zuora REST API 利用と開発環境構築</title>
    <link href="https://future-architect.github.io/articles/20200708/"/>
    <id>https://future-architect.github.io/articles/20200708/</id>
    <published>2020-07-08T00:56:30.000Z</published>
    <updated>2020-07-08T01:17:07.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Zuora Central Platform には様々なリソースがありますが、それらは API 越しに扱うことができます。<br>この記事では、Zuora REST API の簡単な利用方法と Swagger を利用したモックを作成して、開発環境を整備することを扱います。</p><h2 id="Zuora-Central-Platformとは？"><a href="#Zuora-Central-Platformとは？" class="headerlink" title="Zuora Central Platformとは？"></a>Zuora Central Platformとは？</h2><ul><li><a href="https://future-architect.github.io/articles/20200706/">Zuora連載１：Zuora Central Platform概要</a></li></ul><h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><ul><li>Zuora REST API<ul><li>version: 2020-04-08</li></ul></li><li>go-swagger<ul><li>v0.23.0</li></ul></li></ul><h2 id="Zuora-REST-API-Reference"><a href="#Zuora-REST-API-Reference" class="headerlink" title="Zuora REST API Reference"></a>Zuora REST API Reference</h2><p>Zuora Central Platform の API 仕様は下記で参照することができます。<br><a href="https://www.zuora.com/developer/api-reference/#" target="_blank" rel="noopener">https://www.zuora.com/developer/api-reference/#</a></p><h3 id="Zuora-Object-Model"><a href="#Zuora-Object-Model" class="headerlink" title="Zuora Object Model"></a>Zuora Object Model</h3><p>Zuora Central Platform の API を扱う上で、リソース同士の関係性が知りたいケースはよくあります。<br>リソースの関係性は図として公開されています。</p><p><a href="https://www.zuora.com/developer/api-reference/#section/Zuora-Object-Model" target="_blank" rel="noopener">https://www.zuora.com/developer/api-reference/#section/Zuora-Object-Model</a><br><img src="/images/20200708/photo_20200708_01.jpeg"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>各リソースごとに、CRUD が定義されているようなイメージを持っていただければ良さそうです。<br>種類としては 2 つほどあり、<code>CRUD:</code> とプレフィクスがついている API は単純な CRUD 処理、その他は関連リソース含めて扱えるような API となっています。</p><h3 id="よく利用する-API"><a href="#よく利用する-API" class="headerlink" title="よく利用する API"></a>よく利用する API</h3><p>現在利用しているプロジェクトでは、以下の API をよく利用しています。</p><ul><li><a href="https://www.zuora.com/developer/api-reference/#operation/POST_Account" target="_blank" rel="noopener">Create Account</a><ul><li><code>POST /v1/accounts</code></li><li>サブスクリプション契約を行うアカウントを新規作成する API</li></ul></li><li><a href="https://www.zuora.com/developer/api-reference/#operation/POST_Subscription" target="_blank" rel="noopener">Create subscription</a><ul><li><code>POST /v1/subscriptions</code></li><li>サブスクリプション契約を実施する API</li></ul></li><li><a href="https://www.zuora.com/developer/api-reference/#operation/GET_SubscriptionsByAccount" target="_blank" rel="noopener">Get subscriptions by account</a><ul><li><code>GET /v1/subscriptions</code></li><li>アカウント別のサブスクリプション情報を取得する API</li></ul></li><li><a href="https://www.zuora.com/developer/api-reference/#operation/POST_Usage" target="_blank" rel="noopener">Post usage</a><ul><li><code>POST /v1/usage</code></li><li>利用量を Zuora へ連携する API</li><li>csv を HTTP Body へセットしてリクエストを実施する</li></ul></li></ul><h3 id="同時リクエスト制限"><a href="#同時リクエスト制限" class="headerlink" title="同時リクエスト制限"></a>同時リクエスト制限</h3><p>Zuora REST API は基本的には、同時リクエスト数の上限が <code>40</code> となっています。<br>実際は、APIやデータサイズ別に、リクエスト数の上限が以下に整理されてますので、システム構築の際は一度目を通しておいたほうが良いです。</p><p><a href="https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Policies/Concurrent_Request_Limits" target="_blank" rel="noopener">Concurrent Request Limits - Zuora</a></p><h3 id="Zuora-REST-API-リクエスト環境"><a href="#Zuora-REST-API-リクエスト環境" class="headerlink" title="Zuora REST API リクエスト環境"></a>Zuora REST API リクエスト環境</h3><p>下記の環境が提供されております。<br>いづれも API 利用のため、Zuora Central Platform へログインを実施し、クレデンシャルを発行する必要があります。<br>Sandbox 環境はテスト用として利用できる環境になっています。</p><p><a href="https://www.zuora.com/developer/api-reference/#section/Introduction/Access-to-the-API" target="_blank" rel="noopener">https://www.zuora.com/developer/api-reference/#section/Introduction/Access-to-the-API</a><br><img src="/images/20200708/1.png" style="border:solid 1px #000000"></p><h4 id="リクエスト方法"><a href="#リクエスト方法" class="headerlink" title="リクエスト方法"></a>リクエスト方法</h4><p>ここで、Postman を利用したリクエスト方法について記載します。</p><p>認証は OAuth2.0 を利用して行われています。 設定手順も、ドキュメントにまとまっています。<br><a href="https://www.zuora.com/developer/api-reference/#section/Authentication/OAuth-v2.0" target="_blank" rel="noopener">https://www.zuora.com/developer/api-reference/#section/Authentication/OAuth-v2.0</a></p><ol><li><strong>クレデンシャルを発行</strong>: Zuora Central Platform 管理ページよりクレデンシャルを作成します。<ul><li>1.1. メニューより、「管理者」を選択<br><img src="/images/20200708/2.png" class="img-small-size" style="border:solid 1px #000000"><br></li><li>1.2. 「ユーザーの管理」を選択<img src="/images/20200708/3.png" style="border:solid 1px #000000"></li><li>1.3. 「OAuth クライアント」から新規クライアントを作成し、 <code>client_id</code> と <code>client_secret</code> を保存します。<img src="/images/20200708/4.png"></li></ul></li><li>OAuth API をリクエストして Bearer トークンを取得  <ul><li>2.1. Postman で新規リクエスト作成から、「Authorization」を選択</li><li>Type を 「OAuth 2.0」へ設定し、「Get New Access Token」を押下します。<img src="/images/20200708/Get_New_Access Token.png"></li><li>2.2. 「Access Token URL」を下記 <a href="https://www.zuora.com/developer/api-reference/#operation/createToken" target="_blank" rel="noopener">Generate an OAuth token</a> URL に設定し、 <code>client_id</code>と<code>client_secret</code> も合わせてセットし、「Request Token」を押下します。<br><a href="https://rest.apisandbox.zuora.com/oauth/token" target="_blank" rel="noopener">https://rest.apisandbox.zuora.com/oauth/token</a></li><li><img src="/images/20200708/request_token.png"></li><li>2.3. アクセストークンが作成されます。<img src="/images/20200708/access_token.png"></li></ul></li><li>Bearer トークンを Authorization ヘッダーに付与してリクエスト<br><a href="https://www.zuora.com/developer/api-reference/#operation/POST_Account" target="_blank" rel="noopener">Create Account</a> へリクエストしてみます。<br><a href="https://rest.apisandbox.zuora.com/v1/accounts" target="_blank" rel="noopener">https://rest.apisandbox.zuora.com/v1/accounts</a><ul><li>3.1. 先ほど作成したトークンを指定します。<img src="/images/20200708/select_token.png"></li><li>3.2. URL とサンプルの Body をセットし、リクエストを実行します。<img src="/images/20200708/sample_request.png"></li><li>3.3. 以下のように返却されると成功です。<img src="/images/20200708/response_success.png"></li></ul></li></ol><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>Zuora REST API 定義は Swagger ファイルとしても、公開されています。<br>下記リンクよりダウンロードが可能です。</p><p>Swagger 2.0<br><a href="https://assets.zuora.com/zuora-documentation/swagger.yaml" target="_blank" rel="noopener">https://assets.zuora.com/zuora-documentation/swagger.yaml</a></p><p>Open API(Swagger) 3.0<br><a href="https://assets.zuora.com/zuora-documentation/swagger3.yaml" target="_blank" rel="noopener">https://assets.zuora.com/zuora-documentation/swagger3.yaml</a></p><p>今回は、この Swagger ファイルを利用してモックサーバーとクライアントを作成して開発ができるような環境を作ります。</p><h3 id="モックサーバーの作成"><a href="#モックサーバーの作成" class="headerlink" title="モックサーバーの作成"></a>モックサーバーの作成</h3><p>モックサーバーは <a href="https://github.com/stoplightio/prism" target="_blank" rel="noopener">Prism</a> を利用します。<br>詳細は、下記記事に記載があります。とても便利です。</p><ul><li><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかった OpenAPI (Swagger) ツール | Future Tech Blog - フューチャーアーキテクト</a></li></ul><p>node の環境が整っている方はこちら</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">npm install -g @stoplight/prism-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># モック起動</span></span><br><span class="line">prism mock -p 4010 ./swagger.yaml</span><br></pre></td></tr></table></figure><p>docker から利用したい場合はこちら</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># モック起動</span></span><br><span class="line">docker run --init --rm -it -p 4010:4010 -v $(<span class="built_in">pwd</span>):/tmp -P stoplight/prism:3 mock -h 0.0.0.0 <span class="string">"/tmp/swagger.yaml"</span></span><br></pre></td></tr></table></figure><p>ここで試しにリクエストしてみます。<br>Prism はバリデーション等もしてくれるので、Swagger 定義に沿ったリクエストをする必要があります。</p><p>例: アカウント登録リクエストサンプル</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">% curl -X POST <span class="string">"http://localhost:4010/v1/accounts"</span> -H <span class="string">"Content-Type: application/json"</span> -d <span class="string">'&#123;"name": "test", "currency": "JPY", "billToContact": &#123;"lastName": "Taro", "firstName":"Tanaka" &#125;&#125;'</span> | jq .</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"accountId"</span>: <span class="string">"402892c74c9193cd014c96bbe7c101f9"</span>,</span><br><span class="line">  <span class="string">"accountNumber"</span>: <span class="string">"A00000004"</span>,</span><br><span class="line">  <span class="string">"billToContactId"</span>: <span class="string">"2c92c8fb68a28d180168a7ccedba1c4c"</span>,</span><br><span class="line">  <span class="string">"soldToContactId"</span>: <span class="string">"2c92c8fb68a28d180168a7ccedc61c4e"</span>,</span><br><span class="line">  <span class="string">"paymentMethodId"</span>: <span class="string">"402892c74c9193cd014c96bbe7d901fd"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Get-リクエスト時のエラー解消方法"><a href="#Get-リクエスト時のエラー解消方法" class="headerlink" title="Get リクエスト時のエラー解消方法"></a>Get リクエスト時のエラー解消方法</h4><p>ここで少々本筋とはずれますが、Get リクエストをした際に下記エラーに遭遇するかもしれないです。パスパラメータに、パラメータを渡しているにもかかわらず未定義であるかのようなエラーです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># アカウント取得API</span></span><br><span class="line"><span class="comment"># /v1/accounts/&#123;account-key&#125;</span></span><br><span class="line">% curl -s -X GET <span class="string">"http://localhost:4010/v1/accounts/xxxxx"</span> | jq .</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"https://stoplight.io/prism/errors#UNPROCESSABLE_ENTITY"</span>,</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Invalid request body payload"</span>,</span><br><span class="line">  <span class="string">"status"</span>: 422,</span><br><span class="line">  <span class="string">"detail"</span>: <span class="string">"Your request is not valid and no HTTP validation response was found in the spec, so Prism is generating this error for you."</span>,</span><br><span class="line">  <span class="string">"validation"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"location"</span>: [</span><br><span class="line">        <span class="string">"path"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"severity"</span>: <span class="string">"Error"</span>,</span><br><span class="line">      <span class="string">"code"</span>: <span class="string">"required"</span>,</span><br><span class="line">      <span class="string">"message"</span>: <span class="string">"should have required property 'account-key'"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらは、Prism 側の問題で、パスパラメータの <code>-</code> を取り除くことで解消します。<br>具体的には、パラメータキーの <code>account-key</code> を <code>accountKey</code> へ修正します。</p><p><code>swagger.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># before</span></span><br><span class="line"><span class="string">/v1/accounts/&#123;account-key&#125;:</span></span><br><span class="line"><span class="comment"># after</span></span><br><span class="line"><span class="string">/v1/accounts/&#123;accountKey&#125;:</span></span><br><span class="line">  <span class="attr">get:</span></span><br><span class="line">    <span class="attr">parameters:</span></span><br><span class="line">      <span class="comment"># before</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">account-key</span></span><br><span class="line">      <span class="comment"># after</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">accountKey</span></span><br><span class="line">        <span class="attr">in:</span> <span class="string">path</span></span><br></pre></td></tr></table></figure><p>修正後はリクエストが成功するようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">% curl -s -X GET <span class="string">"http://localhost:4010/v1/accounts/xxxxx"</span> | jq .</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"basicInfo"</span>: &#123;</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"billingAndPayment"</span>: &#123;</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"metrics"</span>: &#123;</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"billToContact"</span>: &#123;</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"soldToContact"</span>: &#123;</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"success"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="クライアントの作成"><a href="#クライアントの作成" class="headerlink" title="クライアントの作成"></a>クライアントの作成</h3><h4 id="コード生成"><a href="#コード生成" class="headerlink" title="コード生成"></a>コード生成</h4><p>Zuora REST API へのリクエストですが、フロントエンドから直接というケースより、バックエンド内で呼び出すケースが多いのではないでしょうか。<br>(実際、私が利用しているケースも同様で、バックエンド内で利用しています。)<br>そのため、クライアントは バックエンドで利用される Go で作成します。</p><p>Swagger のクライアント生成は、 <a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a> を利用します。<br>115552 行 ( ※ <code>version: 2020-04-08</code> ) ほど Swagger ファイルがあり 3 分程度生成に時間がかかりました。<br>validation を実行すると、エラーで引っかかってしまうため、仕方なくスキップしています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./zuoraClient ディレクトリ以下に生成</span></span><br><span class="line">swagger generate client -q \</span><br><span class="line">  -f ./swagger.yaml \</span><br><span class="line">  --skip-validation \</span><br><span class="line">  -t ./zuoraClient</span><br></pre></td></tr></table></figure><h4 id="補足-エラー修正"><a href="#補足-エラー修正" class="headerlink" title="補足: エラー修正"></a>補足: エラー修正</h4><p>上記コマンド実行にあたり、下記エラーが発生しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed rendering template data <span class="keyword">for</span> definition: template execution failed <span class="keyword">for</span> template definition: template: schemavalidator:491:65: executing <span class="string">"schemavalidator"</span> at &lt;.&gt;: wrong <span class="built_in">type</span> <span class="keyword">for</span> value; expected string; got bool</span><br></pre></td></tr></table></figure><p>template を展開する際に、型エラーになっているようです。<br>これだけだとよくわからなかったので、 go-swagger 側のソースコードを読み、エラーの箇所を突き止めました。<br><a href="https://github.com/go-swagger/go-swagger/blob/v0.23.0/generator/templates/schemavalidator.gotmpl#L491" target="_blank" rel="noopener">https://github.com/go-swagger/go-swagger/blob/v0.23.0/generator/templates/schemavalidator.gotmpl#L491</a></p><p>前後のコードとエラーログから、 <code>Enum</code> 定義で <code>type: string</code> を期待しているが <code>bool</code> 型の値が定義されていると読み取れました。<br>そこで、swagger.yml 内を grep して検索したところ、下記の定義が見つかりました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">linkage_type:</span></span><br><span class="line">  <span class="attr">enum:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Start</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Success</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Failure</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Iterate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Approve</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Reject</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><p>こちらを、以下のように定義し直すことでエラーが回避できました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">linkage_type:</span></span><br><span class="line">  <span class="attr">enum:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Start</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Success</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Failure</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Iterate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"true"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"false"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Approve</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Reject</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><h4 id="クライアントの利用"><a href="#クライアントの利用" class="headerlink" title="クライアントの利用"></a>クライアントの利用</h4><p>クライアントコードは以下のように利用できます。<br>ここでは、 <a href="https://www.zuora.com/developer/api-reference/#operation/GET_SubscriptionsByAccount" target="_blank" rel="noopener">Get subscriptions by account</a> をリクエストしています。<br>注意点として、処理の成功がステータスコードではなく <code>success</code> プロパティで表現されるケースがあるので、エラーハンドリングを入れています。</p><p><code>main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/taga_sandbox/zuora_api_sandbox/zuoraClient/client"</span></span><br><span class="line"><span class="string">"github.com/taga_sandbox/zuora_api_sandbox/zuoraClient/client/subscriptions"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// モックサーバーへ接続するクライアント作成</span></span><br><span class="line">subscriptionClient := client.NewHTTPClientWithConfig(<span class="literal">nil</span>, &amp;client.TransportConfig&#123;</span><br><span class="line">Host:     <span class="string">"localhost:4010"</span>,</span><br><span class="line">BasePath: <span class="string">"/"</span>,</span><br><span class="line">Schemes:  []<span class="keyword">string</span>&#123;<span class="string">"http"</span>&#125;,</span><br><span class="line">&#125;).Subscriptions</span><br><span class="line"></span><br><span class="line">params := subscriptions.NewGETSubscriptionsByAccountParams()</span><br><span class="line">params.SetAccountKey(<span class="string">"dummy-account-key"</span>)</span><br><span class="line"></span><br><span class="line">res, err := subscriptionClient.GETSubscriptionsByAccount(params)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 処理が成功したかどうかは success プロパティで判定する</span></span><br><span class="line"><span class="keyword">if</span> !res.GetPayload().Success &#123;</span><br><span class="line">log.Fatalln(<span class="string">"falied"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ go run main.go</span><br><span class="line">[GET /v1/subscriptions/accounts/&#123;accountKey&#125;][200] gETSubscriptionsByAccountOK  &amp;&#123;NextPage: Subscriptions:[0xc0005ce2c0] Success:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>これで、モックサーバーを立ち上げ、かつクライアントからのリクエストを実行することができました。<br>このセットが用意されていると、ローカルでの開発がとても楽になります。</p><h5 id="補足-エラーと解消方法"><a href="#補足-エラーと解消方法" class="headerlink" title="補足: エラーと解消方法"></a>補足: エラーと解消方法</h5><p><code>go-swagger</code> で生成したコードをそのまま利用すると、エラーになってハマるケースがありましたので、解消法を記載します。<br>このあたりは、もうちょっと楽にできたらいいなぁと思います。</p><ol><li><code>cannot convert XXX (type float64) to type string</code> エラー</li></ol><p><code>go-swagger</code> で生成されたコード自体に問題があるケースです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ go run main.go</span><br><span class="line"><span class="comment"># github.com/taga_sandbox/zuora_api_sandbox/zuoraClient/models</span></span><br><span class="line">zuoraClient/models/proxy_create_payment.go:567:55: cannot convert m.Amount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_create_payment.go:571:55: cannot convert m.Amount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_create_payment.go:584:75: cannot convert m.AppliedCreditBalanceAmount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_create_payment.go:588:75: cannot convert m.AppliedCreditBalanceAmount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_create_payment.go:601:69: cannot convert m.AppliedInvoiceAmount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_create_payment.go:605:69: cannot convert m.AppliedInvoiceAmount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_modify_payment.go:315:55: cannot convert m.Amount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br><span class="line">zuoraClient/models/proxy_modify_payment.go:319:55: cannot convert m.Amount (<span class="built_in">type</span> float64) to <span class="built_in">type</span> string</span><br></pre></td></tr></table></figure><p>生成コードのエラー該当行</p><p><code>zuoraClient/models/proxy_create_payment.go</code> 561 行目</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *ProxyCreatePayment)</span> <span class="title">validateAmount</span><span class="params">(formats strfmt.Registry)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> swag.IsZero(m.Amount) &#123; <span class="comment">// not required</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// この行がエラー</span></span><br><span class="line"><span class="keyword">if</span> err := validate.MinLength(<span class="string">"Amount"</span>, <span class="string">"body"</span>, <span class="keyword">string</span>(m.Amount), <span class="number">0</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// この行がエラー</span></span><br><span class="line"><span class="keyword">if</span> err := validate.MaxLength(<span class="string">"Amount"</span>, <span class="string">"body"</span>, <span class="keyword">string</span>(m.Amount), <span class="number">16</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>swagger.yml での該当行は下記<br><code>type: number</code> に対して <code>minLength</code> , <code>maxLength</code> を定義していることが原因のようです。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ProxyCreatePayment:</span></span><br><span class="line">  <span class="attr">allOf:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">properties:</span></span><br><span class="line">        <span class="comment"># 省略</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">Amount:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">"The amount of the payment.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            "</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">double</span></span><br><span class="line">          <span class="attr">maxLength:</span> <span class="number">16</span></span><br><span class="line">          <span class="attr">minLength:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">number</span></span><br></pre></td></tr></table></figure><p>ここは迷ったのですが、生成コード側に手を入れることにしました。<br>この後の利用でも生成コードと、Zuora REST API のレスポンスで型が不整合とのエラーが一定数起きたので、生成コードの修正は可としています。</p><p>修正後</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(m *ProxyCreatePayment)</span> <span class="title">validateAmount</span><span class="params">(formats strfmt.Registry)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> swag.IsZero(m.Amount) &#123; <span class="comment">// not required</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := validate.MinLength(<span class="string">"Amount"</span>, <span class="string">"body"</span>, fmt.Sprint(m.Amount), <span class="number">0</span>); err != <span class="literal">nil</span> &#123; <span class="comment">//この行がエラー</span></span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := validate.MaxLength(<span class="string">"Amount"</span>, <span class="string">"body"</span>, fmt.Sprint(m.Amount), <span class="number">16</span>); err != <span class="literal">nil</span> &#123; <span class="comment">//この行がエラー</span></span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>none of producers</code> エラー</li></ol><p>クライアントコードからリクエストを実行すると、下記エラーが発生します。<br>こちらも、 <code>go-swagger</code> 側の問題で <code>Content-Type</code> の <code>charset</code> に対応していないことが原因です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ go run main.go</span><br><span class="line">2020/04/21 15:00:00 none of producers: map[application/json:0x13e1270 application/octet-stream:0x13dfeb0 application/xml:0x13e2040 text/csv:0x13e0c40 text/html:0x13e18f0 text/plain:0x13e18f0] registered. try application/json; charset=utf-8</span><br><span class="line"><span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>swagger.yml で以下のように定義されているため修正して、再度 client を生成します。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># before</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">application/json;</span> <span class="string">charset=utf-8</span></span><br><span class="line"><span class="attr">consumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">application/json;</span> <span class="string">charset=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># after</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">application/json</span></span><br><span class="line"><span class="attr">consumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">application/json</span></span><br></pre></td></tr></table></figure><p>client だけ 再生成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">swagger generate client -q \</span><br><span class="line">  -f ./swagger.yaml \</span><br><span class="line">  --skip-validation \</span><br><span class="line">  --skip-models \</span><br><span class="line">  -t ./zuoraClient</span><br></pre></td></tr></table></figure><ol start="3"><li><code>cannot unmarshal number into Go struct</code> エラー</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ go run main.go</span><br><span class="line">2020/04/21 15:00:00 json: cannot unmarshal number into Go struct field GETSubscriptionWrapper.subscriptions of <span class="built_in">type</span> string</span><br><span class="line"><span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>Zuora REST API モックサーバーからの JSON レスポンスを Go の Struct へパースしようとしたところ、型エラーが発生してました。<br>このエラーは結構、対象を見つけ出すのが大変です。<br>モックサーバーのレスポンスと 生成 Struct の型定義を見比べて、原因を調査します。<br>(※ 実際の開発の際は、モックサーバーではなく Zuora REST API からのレスポンスと比較してください。)</p><p>今回は、 以下 2 点が原因でした<br>型を変更すると付随でコンパイルエラーになるため、合わせて修正します。</p><ul><li><code>string型</code> に対して <code>bool値</code> の <code>true/false</code> が返却</li><li><code>string型</code> に対して <code>number</code> が返却</li></ul><p><code>./zuoraClient/models/g_e_t_subscription_type.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GETSubscriptionType <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// before</span></span><br><span class="line">  InvoiceSeparately <span class="keyword">string</span> <span class="string">`json:"invoiceSeparately,omitempty"`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// after</span></span><br><span class="line">  InvoiceSeparately <span class="keyword">bool</span> <span class="string">`json:"invoiceSeparately,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>zuoraClient/models/g_e_t_subscription_rate_plan_charges_type.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GETSubscriptionRatePlanChargesType <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// before</span></span><br><span class="line">  Dmrc <span class="keyword">string</span> <span class="string">`json:"dmrc,omitempty"`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// after</span></span><br><span class="line">  Dmrc <span class="keyword">float64</span> <span class="string">`json:"dmrc,omitempty"`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Dtcv, Mrr, Tcvh も同様</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>Zuora REST API のリクエスト方法と、開発環境整備のためのモックサーバーとクライアントコードの生成方法について記載しました。<br>若干ハマりどころはありますが、整備すると開発とテストが格段にやりやすくなります。</p><p>こちらを参考に、Zuora REST API を利用した開発効率が上がれば良いなと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;Zuora Central Platform には様々なリソースがありますが、それらは API 越しに扱うことができます。&lt;br&gt;この記事で
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Zuora" scheme="https://future-architect.github.io/tags/Zuora/"/>
    
      <category term="SaaS" scheme="https://future-architect.github.io/tags/SaaS/"/>
    
  </entry>
  
  <entry>
    <title>VSCode の Go extension でよく利用するコマンド 7選</title>
    <link href="https://future-architect.github.io/articles/20200707/"/>
    <id>https://future-architect.github.io/articles/20200707/</id>
    <published>2020-07-07T01:15:05.000Z</published>
    <updated>2020-07-07T01:24:56.521Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DX チーム所属の多賀です。また Go についての記事を書きます。</p><p>最近 Go 開発本体への加入が発表されるなど、盛り上がっている VSCode の Go extension ですが、私も基本は VSCode + Go extension を利用して開発しています。<br>開発する際によく利用するコマンドがいくつかありますので、まとめました。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>VSCode: 1.45.1</li><li>Go extension: 0.14.4</li></ul><p>補完やその他機能を利用するために Go の Language Server Protocol の実装である <code>gopls</code> を利用しています。<br><a href="https://github.com/golang/tools/tree/master/gopls" target="_blank" rel="noopener">https://github.com/golang/tools/tree/master/gopls</a></p><p>Go extension 設定の <code>go.useLanguageServer</code> を <code>true</code> にしています。<br>その他の設定は以下の公式設定を利用しています。<br><a href="https://github.com/golang/tools/blob/master/gopls/doc/vscode.md" target="_blank" rel="noopener">https://github.com/golang/tools/blob/master/gopls/doc/vscode.md</a></p><h2 id="コマンドの出し方"><a href="#コマンドの出し方" class="headerlink" title="コマンドの出し方"></a>コマンドの出し方</h2><p>そもそもコマンドはどうやって出すかですが、<br>VSCode を開いて以下ショートカットキーで出てきます。</p><ul><li>Windows: Ctrl + Shift + P</li><li>Mac: Command + Shift + P</li></ul><p>あとは利用したいコマンドを検索して Enter を押せば実行できます。<br>(各コマンドに対してショートカットキーを割り振ることも可能です。)</p><h2 id="利用するコマンド"><a href="#利用するコマンド" class="headerlink" title="利用するコマンド"></a>利用するコマンド</h2><h3 id="1-Go-Restart-Language-Server"><a href="#1-Go-Restart-Language-Server" class="headerlink" title="1. Go: Restart Language Server"></a>1. Go: Restart Language Server</h3><img src="/images/20200707/photo_20200707_01.png"><p>gopls を再起動するコマンドです。<br>コードを実装していて、何かしらうまく動かない (おかしなエラーが出る、補完が効かなくなる、etc) 場合に即座に試します。 <strong>大体治ります</strong> 。</p><h3 id="2-Go-Generate-Unit-Tests-For-Function"><a href="#2-Go-Generate-Unit-Tests-For-Function" class="headerlink" title="2. Go: Generate Unit Tests For Function"></a>2. Go: Generate Unit Tests For Function</h3><img src="/images/20200707/photo_20200707_02.png"><p>カーソル直下の関数のテストコードを自動生成してくれます。<br>デフォルトで Table Driven Test の形で生成してくれるため、生成後はテストケースを追加するだけで Unit Test が書けてしまいます。</p><p>例えば以下の関数のテストを書きたいとなった場合に、コマンドを実行すると、</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このようなコードが生成されます。 TODO 以下にケースを随時追加すれば動作します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="keyword">int</span></span><br><span class="line">b <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">args args</span><br><span class="line">want <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add test cases.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> got := Add(tt.args.a, tt.args.b); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"Add() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Go-Generate-Interface-Stubs"><a href="#3-Go-Generate-Interface-Stubs" class="headerlink" title="3. Go: Generate Interface Stubs"></a>3. Go: Generate Interface Stubs</h3><img src="/images/20200707/photo_20200707_03.png"><p>特定の interface を実装するためのメソッドを自動生成してくれます。</p><p>例: <code>XXXReader</code> struct に io.Reader を実装したい</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> XXXReader <span class="keyword">struct</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>コマンドを入力すると、入力ダイアログが出てくるので以下を入力</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $&#123;レシーバの変数名&#125; $&#123;struct名&#125; $&#123;interface&#125;</span></span><br><span class="line">x XXXReader io.Reader</span><br></pre></td></tr></table></figure><p>すると以下のコードが生成されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> XXXReader <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x XXXReader)</span> <span class="title">Read</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"not implemented"</span>) <span class="comment">// <span class="doctag">TODO:</span> Implement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大量のメソッドを実装する必要があるケースでとても便利に使えます。</p><h3 id="4-Go-Fill-Struct"><a href="#4-Go-Fill-Struct" class="headerlink" title="4. Go: Fill Struct"></a>4. Go: Fill Struct</h3><img src="/images/20200707/photo_20200707_04.png"><p>カーソル下の struct を field を初期値で穴埋めする形で自動生成してくれます。</p><p>このような struct 定義がある場合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Hoge <span class="keyword">struct</span> &#123;</span><br><span class="line">A <span class="keyword">string</span></span><br><span class="line">B <span class="keyword">int</span></span><br><span class="line">C <span class="keyword">float64</span></span><br><span class="line">D *<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のように生成されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h := Hoge&#123;</span><br><span class="line">A: <span class="string">""</span>,</span><br><span class="line">B: <span class="number">0</span>,</span><br><span class="line">C: <span class="number">0.0</span>,</span><br><span class="line">D: <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>field 定義がたくさんあり、どれが必要かわからなくなった際に、<br>とりあえず全部生成して必要な field だけ残すことがよくあります。</p><h3 id="5-Go-Add-Tags-To-Struct-Fields"><a href="#5-Go-Add-Tags-To-Struct-Fields" class="headerlink" title="5. Go: Add Tags To Struct Fields"></a>5. Go: Add Tags To Struct Fields</h3><img src="/images/20200707/photo_20200707_05.png"><p>カーソル下の struct にタグを付与します。<br>struct 内にカーソル当てておく必要があります。<br>初期設定は、 json かつ omitempty で生成されます。 (設定で他のタグにできます。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Hoge <span class="keyword">struct</span> &#123;</span><br><span class="line">A <span class="keyword">string</span>  <span class="string">`json:"a,omitempty"`</span>  <span class="comment">// カッコ内にカーソルを当てる</span></span><br><span class="line">B <span class="keyword">int</span>     <span class="string">`json:"b,omitempty"`</span></span><br><span class="line">C <span class="keyword">float64</span> <span class="string">`json:"c,omitempty"`</span></span><br><span class="line">D *<span class="keyword">string</span> <span class="string">`json:"d,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Go-Test-Function-At-Cursor"><a href="#6-Go-Test-Function-At-Cursor" class="headerlink" title="6. Go: Test Function At Cursor"></a>6. Go: Test Function At Cursor</h3><img src="/images/20200707/photo_20200707_06.png"><p>カーソル下のテスト関数のみのテストを実行してくれます。<br>テストコードを修正して、すぐに試したいといったときに便利です。</p><h3 id="7-Go-Install-Update-Tools"><a href="#7-Go-Install-Update-Tools" class="headerlink" title="7. Go: Install/Update Tools"></a>7. Go: Install/Update Tools</h3><img src="/images/20200707/photo_20200707_07.png"><p>Go extension で利用している コマンドを install/update します。<br>extension をいれたタイミングで install は自動でされるため、 update したいときに使います。</p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>個人的にはとりあえず <code>1. Go: Restart Language Server</code> だけでも覚えればだいぶ開発体験上がると思います。<br>ぜひ利用して、開発効率を向上させてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIG DX チーム所属の多賀です。また Go についての記事を書きます。&lt;/p&gt;
&lt;p&gt;最近 Go 開発本体への加入が発表されるなど、盛り上がっている VSCode の Go extension ですが、私も基本は VSCode + Go extension を利用して開
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Zuora連載１：Zuora Central Platform概要</title>
    <link href="https://future-architect.github.io/articles/20200706/"/>
    <id>https://future-architect.github.io/articles/20200706/</id>
    <published>2020-07-06T00:01:37.000Z</published>
    <updated>2020-07-08T01:01:03.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Zuora Central Platform（Zuora社が提供するサブスクリプションプラットフォーム名。以降 <strong>Zuora</strong> と記載）を利用する機会があったため、ナレッジをまとめます。</p><p>サブスクリプションのプラン設計・プライシング設計などの販売戦略的な話は今回触れませんのでご了承ください。</p><p>続編が公開されました:</p><ul><li><a href="https://future-architect.github.io/articles/20200708/">Zuora連載2：Zuora REST API 利用と開発環境構築</a></li></ul><h1 id="サブスクリプションとは？"><a href="#サブスクリプションとは？" class="headerlink" title="サブスクリプションとは？"></a>サブスクリプションとは？</h1><p>サブスクリプション（略してサブスク）。様々なところで聞く言葉だと思います。直訳すると「購読」。ITの分野では「定期購読」として説明されることが多いです。</p><p>簡単に言うと「ある商品（モノ・コト・サービスなど）を、定期的に利用する契約を結んで提供する仕組み」です。今までと異なる売り方やサービスができ、バラ色の世界が待っているよという謳い文句もよく聞きます。しかしいざ自分たちでやろうとすると、何らかの専門的なプラットフォームサービスを利用することが必要な事が多いでしょう。</p><p>その中でも世界的にも有名な「Zuora」というサブスクプラットフォームをガッツリ使い倒す機会がありました。サブスクのプラットフォームとはどういうものか、利用者視点で解説します。</p><h1 id="Zuora-Central-Platformとは？"><a href="#Zuora-Central-Platformとは？" class="headerlink" title="Zuora Central Platformとは？"></a>Zuora Central Platformとは？</h1><p>Zuoraの<a href="https://jp.zuora.com/products/" target="_blank" rel="noopener">公式ページ</a>を見ると、 <strong>サブスクリプションのプラットフォーム</strong> と記載されています。</p><p>様々なガイドがありますが、私は当初、以下の3点を理解するまでイニシャルコストを掛けたので、この点を中心にまとめます。</p><ol><li>何ができるのか<ul><li>1-1. オブジェクトモデル</li><li>1-2. 画面</li></ul></li><li>Zuoraを利用したシステム構築では、何を行えばよいのか？</li><li>システムが受ける制約事項</li></ol><h1 id="1-1-何ができるか（オブジェクトモデル）"><a href="#1-1-何ができるか（オブジェクトモデル）" class="headerlink" title="1-1. 何ができるか（オブジェクトモデル）"></a>1-1. 何ができるか（オブジェクトモデル）</h1><ul><li>サブスクリプションで扱う商品を管理できます</li><li>サブスクリプションで扱う商品のプラン・価格を管理できます</li><li>サブスクリプションを買う人を管理できます</li><li>サブスクリプションの購入方法（銀行払い・クレジット払いなど）を管理できます</li><li>サブスクリプションの請求・消込管理ができます</li></ul><p>システムを考える場合、オブジェクトモデルをみると機能の見当が付きやすいように思うので、以下にポイントをまとめます。<br><a href="https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Zuora_Business_Objects_Relationship" target="_blank" rel="noopener">zuora business object model（公式より転載）</a></p><img src="/images/20200706/zuora_erd.png"><h3 id="商品-Product"><a href="#商品-Product" class="headerlink" title="商品(Product)"></a>商品(Product)</h3><p>商品(Product)が複数のプラン(Product Rate Plan)を持ち、プラン(Product Rate Plan)が複数の料金(Product Rate Plan Charge)を持つことができます（例えば、プランに初期費用を持つ場合、料金が別れます）。<br>一番下のTier(Product Rate Plan Charge Tier)は料金が階段状のTireになる場合に利用されます。</p><img src="/images/20200706/product.png" class="img-small-size"><h3 id="顧客（Account）"><a href="#顧客（Account）" class="headerlink" title="顧客（Account）"></a>顧客（Account）</h3><p>顧客(Account)は複数の契約（subscription）を持つことができます。顧客(Account)は複数の請求方法（Payment method）を管理することができます。請求（invoice）は顧客(Account)に紐づきます。</p><img src="/images/20200706/account.png"><h3 id="契約-Subscription"><a href="#契約-Subscription" class="headerlink" title="契約(Subscription)"></a>契約(Subscription)</h3><p>契約(Subscription)は商品(Product)が持つプラン(Product Rate Plan)をコピーして作られます。したがって、商品(Product)を変更しても契約済みのサブスクリプションは影響を受けません。</p><img src="/images/20200706/subscription.png"><h1 id="1-2-何ができるか？（画面）"><a href="#1-2-何ができるか？（画面）" class="headerlink" title="1-2. 何ができるか？（画面）"></a>1-2. 何ができるか？（画面）</h1><p>オブジェクトと合わせてみるとわかりやすいのではないでしょうか？<br>※画面は正式に契約したときに見えるものと異なる場合があります。</p><img src="/images/20200706/photo_20200706_01.png"><h3 id="顧客"><a href="#顧客" class="headerlink" title="顧客"></a>顧客</h3><p>サブスクリプションを契約する顧客、顧客の請求先住所、請求方法を管理できます。また、顧客が契約するサブスクリプションもここから作成します。</p><h3 id="プロダクト"><a href="#プロダクト" class="headerlink" title="プロダクト"></a>プロダクト</h3><p>サブスクリプションで購入可能なプロダクトを定義します。ここでデータモデルのプロダクト・プラン・チャージ（ティア）の定義を作成します。</p><h3 id="請求"><a href="#請求" class="headerlink" title="請求"></a>請求</h3><p>請求情報（明細含む）の作成と請求情報作制の実行タイミングを制御可能です。従量など、使用量が金額に反映されるプランを用意している場合、「使用量（※）」のメニューから確認できます。</p><p>※使用量はAPI・FileなどでZuoraに登録する必要があります。</p><h3 id="回収"><a href="#回収" class="headerlink" title="回収"></a>回収</h3><p>請求に対しての回収業務になります。クレジット会社・銀行との接続も含めて請求の消込まで可能（※）です。</p><p>※全てのパターンは網羅できていないので、利用時はZuoraさんに確認してください。</p><h3 id="ファイナンス-レポート"><a href="#ファイナンス-レポート" class="headerlink" title="ファイナンス/レポート"></a>ファイナンス/レポート</h3><p>冒頭に記載しましたとおり、ここは今回あまり深く触れることができていない部分になります。<br>詳細は公式ページを御覧ください。</p><ul><li><a href="https://jp.zuora.com/products/finance/" target="_blank" rel="noopener">https://jp.zuora.com/products/finance/</a></li><li><a href="https://knowledgecenter.zuora.com/Billing/Reporting_and_Analytics" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Billing/Reporting_and_Analytics</a></li></ul><h3 id="マーケットプレイス"><a href="#マーケットプレイス" class="headerlink" title="マーケットプレイス"></a>マーケットプレイス</h3><p>Salesforceとの接続機能（顧客情報はSaleforceとも連携可能です）や、インテグレーション用の機能（Workflow）など、Zuoraに機能を追加する場合に利用します。</p><h3 id="プラットフォーム"><a href="#プラットフォーム" class="headerlink" title="プラットフォーム"></a>プラットフォーム</h3><p>インテグレーション用の機能が提供されています。<br>次章参照ください</p><h1 id="②Zuoraを利用したシステム構築では、何を行えばよいのか？"><a href="#②Zuoraを利用したシステム構築では、何を行えばよいのか？" class="headerlink" title="②Zuoraを利用したシステム構築では、何を行えばよいのか？"></a>②Zuoraを利用したシステム構築では、何を行えばよいのか？</h1><p>Zuoraを利用する場合、サブスクリプションの情報をZuoraと通信することになります。この通信部分を実装する場合、以下の機能に触れる必要があります。おそらく、これらの機能を抑えることで、構築されるシステムとのつなぎ込みを実現できるでしょう。</p><ul><li><strong>Data Model</strong>: Zuoraが持つオブジェクトを拡張できまず（新しいオブジェクトを作ることも、Fieldを追加することも両方可能です/制約あり）  <ul><li><a href="https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Zuora_Business_Objects_Relationship" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Zuora_Business_Objects_Relationship</a>  </li></ul></li><li><strong>Events</strong>: Zuora上のオブジェクト変更をEventとして管理できます。直下の通知機能と合わせて使います  </li><li><strong>Notifications</strong>: EventをTriggerに外部APIのコール・Workflowのコール・メール通知行うことができます。</li><li><strong>Workflow</strong>: Zuoraのリソース変更に合わせて各種処理が実行できるで、Zuoraと接続したシステムを構築する場合、必ず触る機能です。タスクの定義と、それを繋げたフローを作ることで、基本機能が持たない作り込みを可能とします。<ul><li><a href="https://jp.zuora.com/products/developer-platform/workflow/" target="_blank" rel="noopener">https://jp.zuora.com/products/developer-platform/workflow/</a>  </li></ul></li><li><strong>Data Query</strong>: Zuoraのオブジェクトに対してQuery（API可能）でデータを参照する機能です  <ul><li><a href="https://knowledgecenter.zuora.com/Central_Platform/Query/Data_Query" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Central_Platform/Query/Data_Query</a>  </li></ul></li><li><strong>Settings API</strong>: データの登録参照を実行するためAPI群です  <ul><li><a href="https://knowledgecenter.zuora.com/Central_Platform/API" target="_blank" rel="noopener">https://knowledgecenter.zuora.com/Central_Platform/API</a></li></ul></li></ul><h1 id="③システムが受ける制約事項"><a href="#③システムが受ける制約事項" class="headerlink" title="③システムが受ける制約事項"></a>③システムが受ける制約事項</h1><p>Zuoraを含むシステム構築を実施しましたが、以下がシステム制約になると感想を持ちました。</p><ul><li>サブスクリプション商材のマスタをZuoraに持つ必要がある</li><li>サブスクリプション情報をZuoraに持つ必要がある（当然ですね…）</li><li>顧客情報をZuoraに持つ必要がある</li><li>請求・消込まで行う場合、Zuoraでこれらの管理を行う必要があり</li><li>Zuoraが標準で用意する入力チェック・機能制約は少々ゆるいため、業務 or システムで吸収する必要がある</li></ul><p>仮に、契約日に業務上の制約を付ける場合以下の対応が必要になります。 </p><ul><li><strong>Zuoraが持つ標準画面で入力</strong>: 手動入力の運用で回避する  </li><li><strong>外部システムで入力チェックを実現する</strong>: 要件に応じた入力チェックを外部システムで実現する  </li></ul><img src="/images/20200706/photo_20200706_02.png"><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>少しでもZuoraの使用感が伝われば幸いです</p><p>より構築の目線で、API・Workflowなどの紹介は次回以降にバトンを渡します。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;Zuora Central Platform（Zuora社が提供するサブスクリプションプラットフォーム名。以降 &lt;stron
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Zuora" scheme="https://future-architect.github.io/tags/Zuora/"/>
    
      <category term="SaaS" scheme="https://future-architect.github.io/tags/SaaS/"/>
    
  </entry>
  
  <entry>
    <title>スケーラブルデータベース ～クラウドにおける後悔しないデータベース選定～</title>
    <link href="https://future-architect.github.io/articles/20200703/"/>
    <id>https://future-architect.github.io/articles/20200703/</id>
    <published>2020-07-03T01:34:11.000Z</published>
    <updated>2020-07-06T01:17:55.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>エンタープライズでのミッションクリティカル領域においてもクラウド利用が普通になってきています。</p><p>その過程において今までできないことを指向する試みも行われてきています。その代表的なものがクラウドの備えるリソースの高い拡張性と弾力性を利用したシステム展開です。例えば「より多くのデータを扱う」「同業他社に向けたサービス展開をする（マルチテナンシー）」といったものがあります。その際のアーキテクチャ選定では将来の利用を想定した選択を行う必要がありますが、データベースのスケールというのは非常に難しく簡単ではありません。</p><p>各種の要件に応じてデータベースを選定するということは多く行われていますが、その中で一番考え方が難しい<strong>スケーラビリティにどう立ち向かうか</strong>について記載していきます。データベースについては全ての要件を満たせる「万能」なアーキテクチャが存在しないのが実情です。そのためスケーラビリティを確保するための工夫とアーキテクチャを決定するロジックが必要となります。</p><p>大事なのは、データベースのアーキテクチャだけではなく、データ特性（データモデル）の2つの目線で考えるということです。どちらかだけに偏ると、システム要件は実現できたとしてもTCOの増大を招くことになりその選択を後悔することになります。</p><h1 id="データベースとしてのスケーラビリティ"><a href="#データベースとしてのスケーラビリティ" class="headerlink" title="データベースとしてのスケーラビリティ"></a>データベースとしてのスケーラビリティ</h1><p>データ―ベースに求められる要件は当然利用方法により異なりますが、大きく分けて２種類ありそれぞれ重視されるポイントが異なります。</p><table><thead><tr><th align="left">#</th><th align="left">用途</th><th align="left">特徴</th><th align="left">重視されるポイント</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">トランザクション型</td><td align="left">オペレーション用途に利用されてデータの記録と作成が行われる</td><td align="left">応答性能(レスポンス）重視</td></tr><tr><td align="left">2</td><td align="left">アナリティック型</td><td align="left">データ分析用途に利用されてデータの参照に利用される</td><td align="left">単位時間処理(スループット)重視</td></tr></tbody></table><p>この2つのタイプは重視されるポイントが異なることからスケーラビリティの確保の考え方が異なっています。</p><p>(2)アナリティック型についてはスケーラビリティの考え方は非常にシンプルで、「分散処理をする」という一択です。すなわちデータを細かい単位に分割してそれぞれの分割単位で処理を並列に実行するという考え方です。その実現にはRDBをベースとしたものとHDFS(Hadoop)をベースとしたものがあり、クラウドサービスで考えたときには代表的なものとして以下があげられます。</p><table><thead><tr><th align="left">#</th><th align="left">クラウドサービス</th><th align="left">RDB型プロダクト</th><th align="left">HDFS型プロダクト</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">AWS</td><td align="left">Redshift</td><td align="left">Amazon EMR</td></tr><tr><td align="left">2</td><td align="left">Azure</td><td align="left">SQL Datawarehouse</td><td align="left">HDInsight</td></tr><tr><td align="left">3</td><td align="left">GCP</td><td align="left">BigQuery</td><td align="left">Google Cloud Dataproc</td></tr><tr><td align="left">4</td><td align="left">AWS/Azure/GCP</td><td align="left">Snowflake</td><td align="left">-</td></tr></tbody></table><p>こちらについてもテーマとしては面白いのですが、スケーラビリティという点では大きな違いはないため、別の機会に譲ります。</p><p>今回のテーマとしたいのが「トランザクション型データベース」におけるスケーラビリティです。<br>これについて検討する上で、「トランザクションとは」という点の正しい理解が必要となります。</p><h1 id="トランザクションとスケーラビリティ"><a href="#トランザクションとスケーラビリティ" class="headerlink" title="トランザクションとスケーラビリティ"></a>トランザクションとスケーラビリティ</h1><p>トランザクション(transaction)は文字通り「trans + action」であり、複数のデータの読み書きを論理的な単位でまとめて扱うことがその定義となります。ここであらためてトランザクションを扱うシステムのもつ概念(ACID特性)について記載します。</p><table><thead><tr><th align="left">ACID</th><th align="left">説明</th><th align="left">実現するための機能</th></tr></thead><tbody><tr><td align="left">Atomicity 原子性</td><td align="left">トランザクションは完全に実行されるか、実行されないかのどちらかであること</td><td align="left">コミット機能</td></tr><tr><td align="left">Consistency 一貫性</td><td align="left">あらかじめ定められた整合性を満たすことを保証すること</td><td align="left">アプリケーションで実現</td></tr><tr><td align="left">Isolation 独立性</td><td align="left">トランザクションを同時に実行しても他のトランザクションには影響を受けない（受けないことを保証する）こと</td><td align="left">排他制御/トランザクション分離レベル</td></tr><tr><td align="left">Durability 耐久性</td><td align="left">トランザクションの結果は永続化されること</td><td align="left">トランザクションログ</td></tr></tbody></table><p>一貫性(Consisteny)は、データが矛盾なく記録されていることを意味しますので「データベース」として実現するものではなく、「データベースを利用するシステム」により実現することとなります。つまりアプリケーションにて実現するものとなります。</p><p>独立性(Isolation)は非常に重要な概念ではあるのですが、一般的には以下のように考えられています。</p><ul><li>どのレベルで実現するかというものを<a href="https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E5%88%86%E9%9B%A2%E3%83%AC%E3%83%99%E3%83%AB" target="_blank" rel="noopener">トランザクション分離レベル</a>として4段階で定義されており、独立性と性能とトレードオフになることからシステム要件に合わせて使い分けることをおこなう。</li><li>広く使われる分離レベル（Read committed)は、低い独立性レベルであり、ファントムリード・非再現リードというデータ一矛盾が発生する可能性があるが性能面の影響は比較的少なく、アプリケーションの実装手段の工夫により回避することや許容可能である。</li><li>実装手段の工夫とは、トランザクションでの排他ロックの利用、更新する際に他トランザクションでの更新があったかの値チェック(compare and set操作、楽観的ロックとも言う)などがある。</li></ul><p>このことから、データベースのスケーラビリティを考えるうえでの本質的な要素は原子性(Atomicity)と耐久性(Durability)であると言えます。（あくまでもスケーラビリティを考えるうえでの話です！）さらに、原子性と耐久性は「トランザクションログ」により確保されるのが一般的です。</p><p>正しく理解するために<a href="https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%AD%E3%82%B0" target="_blank" rel="noopener">トランザクションログ</a>の説明をwikiより転記すると以下です。</p><blockquote><p>計算機科学のデータベースの分野において、トランザクションログ（英: transaction log）（または データベースログ, バイナリログ とも呼ばれる）とは、クラッシュやハードウェア故障があったとしてもデータベース管理システムのACID特性を保障するための操作履歴を指す。ログは電源が途絶えてもデータを保持できる補助記憶装置上のファイルに出力される場合が多い。</p><p>データベースが起動後に、整合性の無い状態であるか、正常に終了されていないことを検知すると、<br>データベース管理システムはトランザクションログを読み取り、以下の操作を行う。どちらも原子性と永続性を保障するために必要である。</p><p>完了していない または ロールバックされたトランザクションが行った操作を取り消す。<br>コミットしているが、データベースには反映されていない操作を再実行する。</p></blockquote><p>トランザクションログとは、耐久性を確保するための仕組みだがデータベースに障害が発生した場合には原子性の確保するために利用されるものであることになります。データベースは正常時には揮発性メモリ（キャシュ）内で行われるが、操作履歴となるトラクションログが必ず不揮発性領域に（通常はファイル）保存されることになります。裏を返すとトランザクションログが作成されないとデータの更新はできないことになります。</p><p>そのため、トランザクションログの保存がデータベースのスケーラビリティを決定する決定的な要素となります。</p><p>トランザクションログは製品ごとに名称は異なりますが概念としては同一のものとなります。</p><table><thead><tr><th align="left">タイプ</th><th align="left">プロダクト</th><th align="left">ログ名称</th></tr></thead><tbody><tr><td align="left">RDB</td><td align="left">Oracle</td><td align="left">REDOログ</td></tr><tr><td align="left">RDB</td><td align="left">PostgreSQL</td><td align="left">WALログ</td></tr><tr><td align="left">RDB</td><td align="left">MySQL</td><td align="left">Binログ</td></tr><tr><td align="left">RDB</td><td align="left">SQL Server</td><td align="left">トランザクションログ</td></tr><tr><td align="left">KVS</td><td align="left">Cassandra</td><td align="left">コミットログ</td></tr><tr><td align="left">KVS</td><td align="left">HBase</td><td align="left">WALログ</td></tr><tr><td align="left">KVS</td><td align="left">クラウドサービスKVS(Dynamo DB@AWS/Cosmos DB@Azure/Big table@GCP)</td><td align="left">？</td></tr></tbody></table><p>クラウドサービスKVSについては明確な説明がないため？としています。Dynamo DBではかつてはトランザクションのサポートはされておらず、「データの更新は一つのキー単位に限定したうえで、レプリケーションとクオラムの概念により耐久性を保証するが、すべてのレプリカにデータが必ず保存されるとは限らない」という結果整合性が提供されていました。（参考：<a href="https://gist.github.com/matope/2657692" target="_blank" rel="noopener">Dynamo: Amazonの高可用性Key-value Store[和訳]</a>）つまり複数データの原子性(Atomicity)は提供されてません（クライアント側で対応（冪等性実装）を行う必要がある）。そのためトランザクションログという概念もなかったはずです。</p><p>2019年にトランザクションサポートが提供されました。（参考：<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/transaction-apis.html" target="_blank" rel="noopener">Amazon DynamoDB トランザクション: 仕組み</a>）これは非常にインパクトのある機能向上でした。この機能の利用にあたってはトランザクションログの概念が組み込まれたと推測されますが、トランザクションログの実装がパフォーマンスに与える影響を極小化するために最大25項目以内であるという制約が設定されています。トランザクションログがスケーラビリティ決定する要素であることには変わりありません。</p><h1 id="トランザクション型データベースのアーキテクチャ"><a href="#トランザクション型データベースのアーキテクチャ" class="headerlink" title="トランザクション型データベースのアーキテクチャ"></a>トランザクション型データベースのアーキテクチャ</h1><p>ここでエンタープライズ用途という条件における、クラウド環境でのトランザクション型データベースアーキテクチャとスケーラブル構成について一度整理しておきます。網羅感は乏しくいろいろ指摘を受けそうですが「実質的」な意味ではこの選択肢に限定されるはずです。</p><table><thead><tr><th align="left">#</th><th align="left">データ構造</th><th align="left">スケーラブル構成</th><th align="left">クラウドサービス</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Key-Value型</td><td align="left">可能</td><td align="left">DynamoDB(AWS), CosmosDB(Azure), BigTable/Cloud Spanner(GCP) ※1</td></tr><tr><td align="left">2</td><td align="left">Relational型</td><td align="left">制限的で可能</td><td align="left">Relational Database Service(AWS/Azure/GCP/Oracle Cloud)</td></tr><tr><td align="left">3</td><td align="left">Relational型</td><td align="left">可能</td><td align="left">Oracle-RAC (Oracle Cloud)</td></tr></tbody></table><p>(※1)SpannerはRelation型が自然かと思いますが、本記事ではコアアーキテクチャに注目するためKVSと分類しました</p><p>今回のテーマのスケーラブルデータベースですが、冒頭「全ての要件を満たせる「万能」なアーキテクチャが存在しない」ということを書きましたが、Oracle RACは例外といってもいいかもしれません。しかしながら、</p><ul><li>コスト削減圧力は依然として高く、ソフトウェアのライセンス費用はできるだけ抑えたい。</li><li>機能的に不足している部分はアプリケーションの工夫で対応するほうがリーズナブル。</li><li>クラウド環境を固定化するのは避けたい（いざとなれば他へ移すことも容易であるという選択をしたい）</li></ul><p>ということもあり、今回は(1)(2)に特化して議論を進めます。</p><p>今回の内容はあくまでも「手段」の話をしています。決して「目的」としてはいけないというのは言うまでもありません。</p><h2 id="Key-Value型とRelational型の選択"><a href="#Key-Value型とRelational型の選択" class="headerlink" title="Key Value型とRelational型の選択"></a>Key Value型とRelational型の選択</h2><p>このテーマは深みのあるテーマではあるのですが、「できる・できない」という技術や手法ではなく、扱うデータモデル（データ種）のデータ管理面で考察してみます。</p><p>「データモデル」とは物理的なテーブルではなく、情報のまとまり（エンティティ）を抽出したもので以下の原則に従います。</p><ul><li>データの整合性を保つために正規化（通常は第三正規化）設計を行うのが原則です</li><li>物理設計（いわゆるテーブル設計）に落とし込む際に、あえてそれを崩す非正規化の手法を行う場合があります</li></ul><p>次の表の中で非正規化とあるのは、あえて正規化を崩していることを意味していますので、データの整合性を保つための施策を実装時におこなう必要があることを意味しています。なおこの表はパフォーマンスという点の評価はしていません。</p><img src="/images/20200703/photo_20200703_01.png"><p>ここで言えるのは、<strong>Key-Value型は扱うデータモデルを選び、実装面の工夫が必要であるのに対して、Relational型はデータモデルとしての制約はない</strong>ということです。このことから以下のことが言えます。</p><p>(1) この表でFitするデータ種を主体に扱う場合にKey-Value型を選択する。<br>(2) エンタープライズ領域では、データ種や業務オペレーションは多種多様なことから一般的にはRelational型が選ばれることが多い。<br>(3) 特にスケーラビリティが求められる場合に、Relational型を基本としたうえで何らかの施策が必要。</p><p>ここで、(1)の選択はデータベースの特徴を踏まえて選択することから容易です。難しいのは(2)と(3)の判断となります。(2)で実装するのであればシンプルでもあり実装コストも非常に読みやすいのですが、(3)を選択した場合には実装コストにも大きく影響します。すなわち実現しようとしているシステムにおいて(2)でどこまでの範囲を実現できるのかがポイントになるのです。さらに、(2)では実現できない場合に(3)の選択をとる必要があるがどのようなアーキテクチャにすればよいのか。</p><h2 id="データモデルの観点からシステムの特徴をつかむ"><a href="#データモデルの観点からシステムの特徴をつかむ" class="headerlink" title="データモデルの観点からシステムの特徴をつかむ"></a>データモデルの観点からシステムの特徴をつかむ</h2><p>まず自分たちが取り組もうとしているシステムについての特徴をつかむ必要があります。今行わなくてはいけないのはデータベースのスケーラビリティの判断ですが、やみくもに性能指標値(TPS:秒間トランザクション数、QPS:秒間クエリー実行件数）を求めるのではなく、データモデルを中心として考える必要があります。</p><p>下の図では「小売業での在庫管理」を示す例となります（まったくの架空のデータです）。ECも展開していることからEC受注処理も入っています。主なオペレーションがどのエンティティにアクセスするのかのCRUD情報を示しています。アーキテクチャを検討する際に具体的なアプリケーションの設計は完了していないのが普通ですが、その企業の業務規模は見えているのが普通ですがからこの程度の情報は収集することは可能でしょう。</p><p>もちろんシステムにはこのほかにも多様な業務処理が存在し、エンティティも無数に存在しますが、主要なエンティティという視点で見渡すと意外にシンプルな形になります。データを中心に業務が動いているということを改めて感じるはずです。</p><img src="/images/20200703/photo_20200703_02.png"><img src="/images/20200703/photo_20200703_03.png"><p>この例では次のことが言えます。</p><ul><li>参照は主に在庫データについて行われており、約200QPSである。</li><li>更新は主に在庫データについて行われており、約100TPSである。</li></ul><p>経験上、この例のように「在庫エンティティ」といった<strong>高頻度に更新されるリソース系エンティティが存在する場合、データベースのスケーラビリティに悩むことが多い</strong>と感じます。</p><p>次に、データ参照とデータ更新についてそれぞれ確認していきます。</p><h2 id="データ参照のスケーラビリティ"><a href="#データ参照のスケーラビリティ" class="headerlink" title="データ参照のスケーラビリティ"></a>データ参照のスケーラビリティ</h2><p>これについては従来から対応方法は明確にあります。DBのレプリケーション技術を用いて別のインスタンスからデータを参照するという方法でMySQLやPostgreSQLでサポートされています。クラウドベンダの提供するRelational Database Serviceでは比較的容易に実現可能です。</p><ol><li>MySQLによReadonly用レプリケーション構成例<br><a href="https://dev.mysql.com/doc/refman/5.7/en/replication-solutions-scaleout.html" target="_blank" rel="noopener">Using Replication for Scale-Out</a><img src="/images/20200703/photo_20200703_04.png"></li></ol><p>2.Amazon AuroraでのReadonly用レプリケーション構成例<br><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/Aurora.Overview.html" target="_blank" rel="noopener">Amazon Aurora DB クラスター</a><br><img src="/images/20200703/photo_20200703_05.png"></p><p>ここで紹介したように、<strong>データ参照(ReadOnly)についてのスケーラビリティという点については解決策があり、アーキテクチャとしての課題はないと考えてもよいでしょう。</strong>もちろん実装にあたっては十分な検討が必要です。</p><h2 id="データ更新のスケーラビリティの判断"><a href="#データ更新のスケーラビリティの判断" class="headerlink" title="データ更新のスケーラビリティの判断"></a>データ更新のスケーラビリティの判断</h2><p>ここが本記事の一番のポイントになるところです。レプリケーションによりデータ参照のスケーラビリティの確保は可能ですが、あくまでもデータ更新可能なデータベースインスタンスは一つです。そのため、そもそもそのデータベースでどのぐらいのトランザクション処理が可能なのかを把握しないことには次の検討ができません。</p><p>これについてはやってみるしかない。という答えになってしまうのですが、それでは、何をやれば把握できるのでしょうか。</p><p>これまでに、<strong>トランザクションログの保存がデータベースのスケーラビリティを決定する決定的な要素となる</strong>ということをすでに述べています。そうであるのであればこのトランザクションログに依存する性能が何によって決定するのかということを考えると決定できます。すなわち以下となります。</p><ul><li>トランザクションログの書き込まれるタイミングはcommitタイミングである。</li><li>ランザクションログの 書き込まれる量は更新データのサイズに依存する。</li></ul><p>これを先ほどの在庫管理システムに当てはめて考えてると以下のようになります。</p><img src="/images/20200703/photo_20200703_06.png"><p>約100TPS発生して、データ更新(insert/update)が約1500レコード発生しています。</p><p>このほか多数の業務が実施されているわけですし厳密に求めることは意味がありません。あくまでも傾向分析をしたいのでこの程度の情報で十分です。</p><p>この要件を実現できるかを実際にサンプルプログラムを作成して試してみます。その際に１レコード当たりのレコードサイズも重要な要素となるためこの値は現実的な数値で代表させるのが良いでしょう。また、updateとinsertではトランザクションログの発生量も変化するためにより負荷の高まるupdateに統一して試してもよいでしょう。このあたりは柔軟に考えればよいでしょう。ここでは100TPS発生してその際に15レコード更新されると仮定してみます。</p><p>得られたテスト結果が以下です。「records」はトランザクションあたりの更新レコード数を示します。（このテスト結果はテストシナリオにおけるあくまでもサンプルです）</p><img src="/images/20200703/photo_20200703_07.png"><img src="/images/20200703/photo_20200703_08.png"><p>この結果から、AWS Aurora (PostgreSQL)で今回の要件を実現する場合には、r4.8xlargeを利用した場合において実現性はありそうということが推測できます。</p><p>ただ、テストは単純化していますので実際のアプリケーション実装時の余裕率や将来のビジネスの伸びを考えるとやや心もとない感じがします。またさらに上のインスタンスクラスのr4.16xlargeでテストすることでTPSは向上する可能性はありますが、コストも２倍となることから費用面から積極的に選択することが難しそうです。</p><p>そのためこのような要件がある場合は、１つのデータベースインスタンスでの実現はリスクがあると判断し、よりスケールするための施策を模索することに舵を切ることことになります。反対にこの調査を行った結果、十分に余裕があるということであればスケーラビリティは十分確保されているということが言い切れます。</p><h2 id="Relational型データベースのスケーラブル構成"><a href="#Relational型データベースのスケーラブル構成" class="headerlink" title="Relational型データベースのスケーラブル構成"></a>Relational型データベースのスケーラブル構成</h2><p>一つのデータベースで扱うトランザクションに限界があるということですから、データベースを増やせばよいということになります。すなわちスケーラブルな構成とは扱うデータを分割して管理することになります。</p><p>その方法は以下の３つです。<br>(1)業務分割パターン<br>(2)論理分割パターン<br>(3)データ分割パターン</p><img src="/images/20200703/photo_20200703_09.png"><p>どのパターンを選択すべきかは、要件によって変わるため答えは一つではありません。</p><p>経験上ですが、</p><ul><li>エンティティをまたがるオペレーションが多く、トランザクション管理を実装するコストを考えると実現が厳しい</li><li>業務的はある一定の論理単位（例えば店舗）で行われることが多い</li></ul><p>という観点で(2)を選択する場面が多いような気がします。（この時、十分に議論をしたうえで決定するのが重要です）</p><p>また、業務規模が大きくエンティティも複雑で、保守性をより強固に持ちたい場合には、マイクロサービス指向に合致している(1)が選択されるでしょう。</p><h2 id="Relational型データベースのデータ保持"><a href="#Relational型データベースのデータ保持" class="headerlink" title="Relational型データベースのデータ保持"></a>Relational型データベースのデータ保持</h2><p>スケーラブルな構成とするためには実際のデータをどのように保持するのかについても検討する必要があります。データ保持形態によってスケーラビリティに制約が出ると本末転倒となるのでここまでの検討は事前に行う必要があります。</p><p>先ほどの例の「論理分割パターン」において、店舗(=店コード)で分割した場合を考えます。同一データベースにある各店舗のデータをどのようにテーブル保持するのかがポイントです。</p><p>この部分の検討は、データベースソフトウェアに深く依存することになりますので、事前の調査はしておく必要があります。以下の図はPostgreSQLをベースとした検討例です。</p><img src="/images/20200703/photo_20200703_10.png"><p>PostgreSQLのパーティションの特性についてここで詳細は記載しませんが制約事項について理解する必要があります。理屈上は正しいが、実装してみると正しくスケールしないということもあるため確認したほうが良いでしょう。以下に参考リンクを載せておきます。</p><ul><li><a href="https://future-architect.github.io/articles/20181019/">PostgreSQLパーティションプルーニングの動作を確認する</a></li><li><a href="http://www.intellilink.co.jp/article/column/oss-postgres11_02.html" target="_blank" rel="noopener">PostgreSQL11でのテーブル・パーティショニング機能の改善</a></li><li><a href="https://www.2ndquadrant.com/en/blog/postgresql-12-partitioning/" target="_blank" rel="noopener">PostgreSQL 12: Partitioning is now faster</a></li></ul><p>(3)のスキーマ分割はデータの論理分割パターンにおける究極の形です。テーブル管理が手間が非常となりますが、わかりやすさと運用での安定性から意外と悪くない方法だと考えています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>だいぶ長くなりましたので、最後にこれまに検討してきた内容をまとめてみます。</p><ul><li>データベースのスケーラビリティにはトランザクションログが決定的な影響を与えることについて解説しました。</li><li>実現にあたって、Key-Value型とRelational型の選択の考え方について解説をしています。実際の場面としてRelational型を基本として検討することが多いが、実現にあたっては通常の方法でできるのか、特別な施策が必要なのかという範囲の見極めについて議論しました</li><li>スケーラビリティの検討にあたっては、まずはデータモデルという視点で検討を行い、スケーラブル構成をとるべき判断ポイントについての例をあげました。</li><li>Relational型のデータベースの構成例とテーブル実装方法について検討しました。</li></ul><p>ここまでの流れを一通り理解することにより<strong>「何となく決める」ではなく「根拠をもって決める」ということが可能になるはずです。</strong>後悔しない（←これ大事です。つまり無理をした実装はTCOの増大を招くことになります）スケーラブルデータベース構成を自信をもって決定することができるでしょう。</p><p>今回はトランザクション型データベースということで触れなかったアナリティック型データベースについての考察はいずれまた記載してみます。</p><p>おわり。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事:"></a>関連記事:</h1><ul><li><a href="https://future-architect.github.io/articles/20161031/">SQL実行時のブルームフィルタ(Bloom Filter)アルゴリズム</a></li><li><a href="https://future-architect.github.io/articles/20190718/">― 脱RDB脳 ― Cassandraのデータモデルについて考えてみる</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;エンタープライズでのミッションクリティカル領域においてもクラウド利用が普通になってきています。&lt;/p&gt;
&lt;p&gt;その過程におい
      
    
    </summary>
    
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
      <category term="RDB" scheme="https://future-architect.github.io/tags/RDB/"/>
    
      <category term="KVS" scheme="https://future-architect.github.io/tags/KVS/"/>
    
  </entry>
  
  <entry>
    <title>Auth0の設定をバージョン管理し、Auth0 Deploy CLIを利用してデプロイ環境を整える</title>
    <link href="https://future-architect.github.io/articles/20200702/"/>
    <id>https://future-architect.github.io/articles/20200702/</id>
    <published>2020-07-02T00:48:34.000Z</published>
    <updated>2020-07-02T01:48:17.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニットの市川です。</p><p>私が所属しているプロジェクトでは認証認可基盤としてAuth0を使用しています。検証段階や初期構築段階では各種設定をダッシュボードから操作することが多いと思いますが、実際に本番運用を行っていると、Auth0の設定やRulesのスクリプトをGit管理し、変更履歴を追えるようにしたいというケースが出てくるかと思います。</p><p>今回は、Auth0から提供されている<a href="https://auth0.com/docs/extensions/deploy-cli" target="_blank" rel="noopener">Auth0 Deploy CLI</a>という拡張機能を利用して、Auth0テナントの設定をエクスポートする方法と私のプロジェクトで実際に行っているAuth0テナントへのデプロイの方法をお伝えします。</p><p>最終的なイメージは下記の通りです。</p><img src="/images/20200702/photo_20200702_01.png"><h1 id="1-実行環境"><a href="#1-実行環境" class="headerlink" title="1. 実行環境"></a>1. 実行環境</h1><p>今回の記事の作成で使用した実行環境は以下の通りです。</p><p><a href="https://www.npmjs.com/package/npm" target="_blank" rel="noopener">npm</a>：6.14.5<br><a href="https://www.npmjs.com/package/auth0-deploy-cli" target="_blank" rel="noopener">auth0-deploy-cli</a>：5.0.0</p><h1 id="2-Auth0-Deploy-CLIとは"><a href="#2-Auth0-Deploy-CLIとは" class="headerlink" title="2. Auth0 Deploy CLIとは"></a>2. Auth0 Deploy CLIとは</h1><p>Auth0 Deploy CLIとはAuth0で提供されている拡張機能です。<br>これを利用するとAuth0テナントの設定情報をエクスポートできることに加え、テナントの設定情報を記載したファイルを、各Auth0テナントへ反映できます。<br>よって、この拡張機能をCI/CDに組み込み、そこからデプロイを行うことも可能です。</p><h1 id="3-既存環境のエクスポート"><a href="#3-既存環境のエクスポート" class="headerlink" title="3. 既存環境のエクスポート"></a>3. 既存環境のエクスポート</h1><p>では早速既存環境のエクスポートから行っていきます。</p><h2 id="3-1-Auth0-Deploy-CLIで使用するアプリケーションを各テナントに作成する"><a href="#3-1-Auth0-Deploy-CLIで使用するアプリケーションを各テナントに作成する" class="headerlink" title="3-1. Auth0 Deploy CLIで使用するアプリケーションを各テナントに作成する"></a>3-1. Auth0 Deploy CLIで使用するアプリケーションを各テナントに作成する</h2><p>Auth0テナントにAuth0 Deploy CLIで使用するアプリケーションを作成します。<br>（各環境ごとにAuth0テナントを作成している場合は、それぞれのテナントごとにApplicationを作成する必要があります）</p><p>Application Type はM2M(Machine to Machine Applications)を指定します。</p><img src="/images/20200702/photo_20200702_02.png"><p>使用するAPIはAuth0 Management APIを選択し、auth0-deploy-cliを使用するに当たり必要となるSCOPEを設定します。</p><p>必要となるSCOPEは下記をご確認ください。</p><p><a href="https://auth0.com/docs/extensions/deploy-cli/guides/create-deploy-cli-application-manually#required-scopes" target="_blank" rel="noopener">Required Scopes - Create and Configure the Deploy CLI Application Manually</a></p><p>SCOPE設定後、ポップアップ下部のAUTHORIZEを押下します。</p><img src="/images/20200702/photo_20200702_03.png"><h2 id="3-2-ローカル環境にAuth0-Deploy-CLIの拡張機能をインストールする。"><a href="#3-2-ローカル環境にAuth0-Deploy-CLIの拡張機能をインストールする。" class="headerlink" title="3-2. ローカル環境にAuth0 Deploy CLIの拡張機能をインストールする。"></a>3-2. ローカル環境にAuth0 Deploy CLIの拡張機能をインストールする。</h2><p>npmを使用して、auth0-deploy-cliをローカル環境にインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g auth0-deploy-cli</span><br></pre></td></tr></table></figure><h2 id="3-3-エクスポート先のディレクトリの作成"><a href="#3-3-エクスポート先のディレクトリの作成" class="headerlink" title="3-3. エクスポート先のディレクトリの作成"></a>3-3. エクスポート先のディレクトリの作成</h2><p>まずエクスポートする設定の置き場所となる任意のディレクトリを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir auth0-deploy</span><br><span class="line">$ <span class="built_in">cd</span> auth0-deploy</span><br></pre></td></tr></table></figure><h2 id="3-4-設定ファイルのconfig-jsonを作成"><a href="#3-4-設定ファイルのconfig-jsonを作成" class="headerlink" title="3-4 設定ファイルのconfig.jsonを作成"></a>3-4 設定ファイルのconfig.jsonを作成</h2><p>次にエクスポートを行う際に使用するconfig.jsonを作成します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch config.json</span><br></pre></td></tr></table></figure><p>作成したconfig.jsonに、先程作成したアプリケーションのdomainやclient id、client secrtetの情報を下記のフォーマットで記載します。</p><figure class="highlight json"><figcaption><span>auth0-deploy/config.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"AUTH0_DOMAIN"</span>: <span class="string">"YOUR_DOMAIN"</span>,</span><br><span class="line">  <span class="attr">"AUTH0_CLIENT_ID"</span>: <span class="string">"YOUR_CLIENT_ID"</span>,</span><br><span class="line">  <span class="attr">"AUTH0_CLIENT_SECRET"</span>: <span class="string">"YOUR_CLIENT_SECRET"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client id等の情報はAuth0のダッシュボードから確認することができます。</p><img src="/images/20200702/photo_20200702_04.png"><h2 id="3-5-exportコマンドでエクスポートする"><a href="#3-5-exportコマンドでエクスポートする" class="headerlink" title="3-5. exportコマンドでエクスポートする"></a>3-5. exportコマンドでエクスポートする</h2><p>これでテナントの設定をエクスポートする準備が整いました。<br>下記コマンドを実行して、Auth0テナントの設定をエクスポートします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ a0deploy <span class="built_in">export</span> -c config.json -f yaml -o ./</span><br></pre></td></tr></table></figure><p>-cはconfigファイル、-fはフォーマット、-oはエクスポート先のディレクトリを指定します。<br>プロキシ経由の場合はプロキシのオプション（-p）を設定します。</p><p>詳細は<a href="https://auth0.com/docs/extensions/deploy-cli/references/deploy-cli-options#options" target="_blank" rel="noopener">こちら</a>をご確認ください。</p><p>コマンドを実行し、ログの最後に<code>Export Successful</code>が出力されれば、エクスポートは成功です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Loading Auth0 Tenant Data</span><br><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Retrieving rules data from Auth0</span><br><span class="line">...</span><br><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Exporting guardianFactorTemplates</span><br><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Exporting roles</span><br><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Writing tenant.yaml</span><br><span class="line">$ 20XX-YY-ZZ:ZZ:SS.SSSZ - info: Export Successful</span><br></pre></td></tr></table></figure><h2 id="3-6-ディレクトリ構成"><a href="#3-6-ディレクトリ構成" class="headerlink" title="3-6. ディレクトリ構成"></a>3-6. ディレクトリ構成</h2><p>各環境が設定している内容により異なることはありますが、私が使用しているテナントは下記のようなディレクトリ構成となりました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">|   <span class="comment"># 新規登録時やアカウントブロック時に送信されるemailテンプレート</span></span><br><span class="line">├── emailTemplates</span><br><span class="line">│   ├── blocked_account.html</span><br><span class="line">│   ├── reset_email.html</span><br><span class="line">│   └── verify_email.html</span><br><span class="line">|</span><br><span class="line">|   <span class="comment"># Universal Loginで使用するログイン画面やパスワード再発行ページ</span></span><br><span class="line">├── pages　　　　　　　　　　　　</span><br><span class="line">|   ├── error_page.html</span><br><span class="line">|   ├── login.html</span><br><span class="line">|   └── password_reset.html</span><br><span class="line">|</span><br><span class="line">|   <span class="comment"># テナントにされている各Rulesのスクリプト</span></span><br><span class="line">├── rules</span><br><span class="line">|   ├── hoge.js</span><br><span class="line">|   └── fuga.js</span><br><span class="line">|</span><br><span class="line">|   <span class="comment"># テナントの設定が記載されているyamlファイル</span></span><br><span class="line">└── tenant.yaml</span><br></pre></td></tr></table></figure><h2 id="3-7-各環境ごとのデプロイに対応したディレクトリ構成に変更する"><a href="#3-7-各環境ごとのデプロイに対応したディレクトリ構成に変更する" class="headerlink" title="3-7. 各環境ごとのデプロイに対応したディレクトリ構成に変更する"></a>3-7. 各環境ごとのデプロイに対応したディレクトリ構成に変更する</h2><p>私が所属しているプロジェクトでは3つの環境を使用しているため、Auth0テナントも3つ使用しています。<br>各環境ごとに設定内容が同一ではない項目もあるため、テナントの設定が記載されているyamlファイルを環境ごとに作成しています。<br>よって下記のようなディレクトリ構成となります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">|   <span class="comment"># 新規登録時やアカウントブロック時に送信されるemailテンプレート</span></span><br><span class="line">├── emailTemplates</span><br><span class="line">│   ├── blocked_account.html</span><br><span class="line">│   ├── reset_email.html</span><br><span class="line">│   └── verify_email.html</span><br><span class="line">|</span><br><span class="line">|   <span class="comment"># Universal Loginで使用するログイン画面やパスワード再発行ページ</span></span><br><span class="line">├── pages　　　　　　　　　　　　</span><br><span class="line">|   ├── error_page.html</span><br><span class="line">|   ├── login.html</span><br><span class="line">|   └── password_reset.html</span><br><span class="line">|</span><br><span class="line">|   <span class="comment"># テナントにされている各Rulesのスクリプト</span></span><br><span class="line">├── rules</span><br><span class="line">|   ├── hoge.js</span><br><span class="line">|   └── fuga.js</span><br><span class="line">|</span><br><span class="line">|   テナントの設定が記載されているyamlファイル</span><br><span class="line">└── tenant-dev.yaml</span><br><span class="line">└── tenant-stg.yaml</span><br><span class="line">└── tenant-prd.yaml</span><br></pre></td></tr></table></figure><h1 id="4-環境ごとに差異がある値を環境変数に定義する"><a href="#4-環境ごとに差異がある値を環境変数に定義する" class="headerlink" title="4. 環境ごとに差異がある値を環境変数に定義する"></a>4. 環境ごとに差異がある値を環境変数に定義する</h1><p>テナントの設定をエクスポートした時点ではドメイン等、環境によって変えたい変数がハードコーディングされている状態になっています。<br>もしrulesやemailTemplate配下のファイルで環境ごとにセットしたい値が異なる場合は、環境変数を用いて正しい値がセットされるようにします。</p><p>Auth0 Deploy CLIでは、デプロイ時に指定するconfigファイルに<code>AUTH0_KEYWORD_REPLACE_MAPPINGS</code> を指定して環境変数のセットを行うと、configファイルから値を読み取って環境変数がセットされます。</p><figure class="highlight json"><figcaption><span>auth0-deploy/config.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"AUTH0_DOMAIN"</span>: <span class="string">"YOUR_DOMAIN"</span>,</span><br><span class="line">  <span class="attr">"AUTH0_CLIENT_ID"</span>: <span class="string">"YOUR_CLIENT_ID"</span>,</span><br><span class="line">  <span class="attr">"AUTH0_CLIENT_SECRET"</span>: <span class="string">"YOUR_CLIENT_SECRET"</span>,</span><br><span class="line">   <span class="attr">"AUTH0_KEYWORD_REPLACE_MAPPINGS"</span>: &#123;</span><br><span class="line">        <span class="attr">"DOMAIN"</span>: <span class="string">"https://www.example.com"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下記に例を記載します。</p><p>login.htmlが下記の様になっていた場合、</p><figure class="highlight html"><figcaption><span>auth0-source/pages/login.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##DOMAIN##/sample"</span>&gt;</span>サンプルリンク<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>デプロイ時にはconfig.jsonファイルから環境変数が適用され、環境ごとに値を変えることができます。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.example.com/sample"</span>&gt;</span>サンプルリンク<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-デプロイ環境の整備"><a href="#5-デプロイ環境の整備" class="headerlink" title="5. デプロイ環境の整備"></a>5. デプロイ環境の整備</h1><p>私のプロジェクトではソースコードの管理をGitlabで行っており、上記作業完了後、リモートリポジトリにpushします。</p><p>その後、Gitlab CI/CDを起動して上記テナントのディレクトリをS3へアップロードしたことをトリガーにCodePipelineが起動し、CodeBuild上でAuth0テナントのデプロイを行っています。</p><p>実際に使用しているbuildspec.ymlは下記の通りです。<br>client idやclient secretを指定するconfigファイルはAWSのParameter Storeから読みとった値をCodeBuild上でセットしています。</p><figure class="highlight yml"><figcaption><span>buildspec.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.2</span></span><br><span class="line"><span class="attr">phases:</span></span><br><span class="line">  <span class="attr">pre_build:</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">auth0-deploy-cli@5.0.0</span></span><br><span class="line">  <span class="attr">post_build:</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">creating</span> <span class="string">config</span> <span class="string">file</span> <span class="string">started</span></span><br><span class="line">      <span class="comment"># ↓リポジトリ上ではclient id等をハードコーディングしたconfig.jsonファイルは保持せず、config.jsonのテンプレートファイルのみ保持し、Parameter Storeの値をもとにファイルを新規作成しています。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">envsubst</span> <span class="string">&lt;</span> <span class="string">config-template.json</span> <span class="string">&gt;</span> <span class="string">config.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">finished</span> <span class="string">creating</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cat</span> <span class="string">config.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">auth0-deploy-cli</span> <span class="string">version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">a0deploy</span> <span class="string">--version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">Auth0</span> <span class="string">Deploy</span> <span class="string">started</span></span><br><span class="line">      <span class="comment"># ↓ENVは環境変数から読み取っています</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">a0deploy</span> <span class="string">import</span> <span class="string">-c</span> <span class="string">config.json</span> <span class="string">-i</span> <span class="string">tenant-$&#123;ENV&#125;.yaml</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">Auth0</span> <span class="string">Deploy</span> <span class="string">completed</span></span><br></pre></td></tr></table></figure><p>これでデプロイ環境を整備することができました。</p><p>基本的には初期構築時のExportファイルを正として管理を行っていますが、Auth0上で大きな設定変更が生じた際は念の為テナント設定のExportを行い、正管理ファイルに誤りがないかどうか、必要に応じて確認を行っています。</p><h1 id="6-最後に"><a href="#6-最後に" class="headerlink" title="6. 最後に"></a>6. 最後に</h1><p>Auth0 Deploy CLIを利用して既存テナントの設定をエクスポートするところから、実際にCI/CDに組み込んでデプロイを行う部分までをご紹介してきました。<br>ただ、Auth0の設定管理は今回扱ったAuth0 Deploy CLIだけでなく、Teraformで管理することも可能です。（<a href="https://www.terraform.io/docs/providers/auth0/index.html）" target="_blank" rel="noopener">https://www.terraform.io/docs/providers/auth0/index.html）</a></p><p>そのため、自身が所属しているプロジェクトの状況に応じて適切なものを選択・利用していくのが良いかと思います。</p><h1 id="7-関連リンク"><a href="#7-関連リンク" class="headerlink" title="7. 関連リンク"></a>7. 関連リンク</h1><p><a href="https://www.npmjs.com/package/auth0-deploy-cli" target="_blank" rel="noopener">Auth0 Deploy CLI Tool</a><br><a href="https://future-architect.github.io/articles/20200122/">Auth0 導入編</a><br><a href="https://future-architect.github.io/articles/20200123/">Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する</a><br><a href="https://future-architect.github.io/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG/DXユニットの市川です。&lt;/p&gt;
&lt;p&gt;私が所属しているプロジェクトでは認証認可基盤としてAuth0を使
      
    
    </summary>
    
    
      <category term="CI/CD" scheme="https://future-architect.github.io/categories/CI-CD/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
      <category term="GitLab" scheme="https://future-architect.github.io/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>Go の Open API 3.0 のジェネレータ oapi-codegen を試してみた</title>
    <link href="https://future-architect.github.io/articles/20200701/"/>
    <id>https://future-architect.github.io/articles/20200701/</id>
    <published>2020-07-01T00:40:40.000Z</published>
    <updated>2020-07-01T00:54:13.470Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200701/top.png" class="img-middle-size"><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>TIG DXチーム所属の多賀です。最近はフロントのコードを書いたりすることも増えましたが、引き続き Go も触っています。<br>Go で OpenAPI(Swagger) からコード生成する際には、 go-swagger をよく利用しています。<br>go-swagger については他記事でもまとめられています。</p><ul><li><a href="https://future-architect.github.io/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a></li><li><a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a></li></ul><p>ただ、 go-swagger は Swagger 2.0 にのみ対応しており、OpenAPI 3.0 系が使えない問題がありました。最新に追従していく上でも Open API 3.0 系に寄せていきたいと考えていたので、なにか使えるツールはないか探したところ、以下を見つけました。</p><p><a href="https://github.com/deepmap/oapi-codegen" target="_blank" rel="noopener">https://github.com/deepmap/oapi-codegen</a></p><p>使えるかどうか実際に動かして試してみます。</p><p>ざっと見た感じは、以下の模様です。</p><ul><li>Open API 3.0 の定義から Go のソースコードを生成できる</li><li>echo, chi の形式でServerソースが出力できる</li><li>Go の interface で Open API の仕様が定義され interfaceを満たすように実装していく</li></ul><h2 id="調査"><a href="#調査" class="headerlink" title="調査"></a>調査</h2><p>実際に OpenAPI 定義からコードを出力してみます。</p><p>ライブラリ側で OpenAPI定義のサンプルが用意されていたためそのまま利用してみます。<br><a href="https://github.com/deepmap/oapi-codegen/blob/master/examples/petstore-expanded/petstore-expanded.yaml" target="_blank" rel="noopener">https://github.com/deepmap/oapi-codegen/blob/master/examples/petstore-expanded/petstore-expanded.yaml</a></p><p>ざっくり以下のAPI が定義されています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;pets</span><br><span class="line">POST &#x2F;pets</span><br><span class="line">GET &#x2F;pets&#x2F;&#123;id&#125;</span><br><span class="line">DELETE &#x2F;pets&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure><p>上記を <code>openapi.yml</code> としてダウンロードしました。</p><p>とりあえず、コード生成を実行してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コマンドインストール</span></span><br><span class="line">go get github.com/deepmap/oapi-codegen/cmd/oapi-codegen@v1.3.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go コード生成</span></span><br><span class="line">oapi-codegen openapi.yml &gt; openapi.gen.go</span><br></pre></td></tr></table></figure><p>こちらで Goのコードが1ファイルに生成されました。<br>生成項目としては以下4点です。</p><ul><li>型定義</li><li>http client</li><li>http server</li><li>OpenAPI spec</li></ul><p>実際に利用する際は、必要な分だけ生成・管理したいかなと思います。<br>生成コードとはいえ、1ファイルにまとまっていると少々読みづらかったりもします。<br>コマンドのパラメータで制御できるようでしたので、それぞれ別にコード生成し中身を確認していきます。<br>(生成コードは長くなるため一部抜粋しています。)</p><h4 id="型定義"><a href="#型定義" class="headerlink" title="型定義"></a>型定義</h4><ul><li>OpenAPI の <code>components</code> から struct を生成</li><li>リクエスト Bodyの定義も同様に生成</li></ul><p><code>コマンド</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oapi-codegen -generate <span class="string">"types"</span> -package openapi openapi.yml &gt; ./openapi/types.gen.go</span><br></pre></td></tr></table></figure><p><code>生成コード</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewPet defines model for NewPet.</span></span><br><span class="line"><span class="keyword">type</span> NewPet <span class="keyword">struct</span> &#123;</span><br><span class="line">Age  *<span class="keyword">int</span>    <span class="string">`json:"age,omitempty"`</span></span><br><span class="line">Kind *<span class="keyword">string</span> <span class="string">`json:"kind,omitempty"`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Name of the pet</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Type of the pet</span></span><br><span class="line">Tag *<span class="keyword">string</span> <span class="string">`json:"tag,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="http-client"><a href="#http-client" class="headerlink" title="http client"></a>http client</h4><ul><li>API仕様が interface として出力</li><li>2種類の interface が定義<ul><li>ClientInterface<ul><li>API実行の結果 http.Response が返却される</li></ul></li><li>ClientWithResponsesInterface<ul><li>API実行の結果の Response Body を parse して struct へ詰めてくれる<ul><li>Body を []byte 形式で保持するためメモリ効率はいまいち</li></ul></li></ul></li></ul></li><li>上記 interface を実装した struct も合わせて生成済<ul><li>生成された Client を利用するだけで良い</li></ul></li></ul><p><code>コマンド</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oapi-codegen -generate <span class="string">"client"</span> -package openapi openapi.yml &gt; ./openapi/client.gen.go</span><br></pre></td></tr></table></figure><p><code>生成コード</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The interface specification for the client above.</span></span><br><span class="line"><span class="keyword">type</span> ClientInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// FindPets request</span></span><br><span class="line">FindPets(ctx context.Context, params *FindPetsParams) (*http.Response, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddPet request  with any body</span></span><br><span class="line">AddPetWithBody(ctx context.Context, contentType <span class="keyword">string</span>, body io.Reader) (*http.Response, error)</span><br><span class="line"></span><br><span class="line">AddPet(ctx context.Context, body AddPetJSONRequestBody) (*http.Response, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeletePet request</span></span><br><span class="line">DeletePet(ctx context.Context, id <span class="keyword">int64</span>) (*http.Response, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// FindPetById request</span></span><br><span class="line">FindPetById(ctx context.Context, id <span class="keyword">int64</span>) (*http.Response, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Client which conforms to the OpenAPI3 specification for this service.</span></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// The endpoint of the server conforming to this interface, with scheme,</span></span><br><span class="line"><span class="comment">// https://api.deepmap.com for example.</span></span><br><span class="line">Server <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Doer for performing requests, typically a *http.Client with any</span></span><br><span class="line"><span class="comment">// customized settings, such as certificate chains.</span></span><br><span class="line">Client HttpRequestDoer</span><br><span class="line"></span><br><span class="line"><span class="comment">// A callback for modifying requests which are generated before sending over</span></span><br><span class="line"><span class="comment">// the network.</span></span><br><span class="line">RequestEditor RequestEditorFn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">FindPets</span><span class="params">(ctx context.Context, params *FindPetsParams)</span> <span class="params">(*http.Response, error)</span></span> &#123;</span><br><span class="line">req, err := NewFindPetsRequest(c.Server, params)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">req = req.WithContext(ctx)</span><br><span class="line"><span class="keyword">if</span> c.RequestEditor != <span class="literal">nil</span> &#123;</span><br><span class="line">err = c.RequestEditor(ctx, req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.Client.Do(req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用コード</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c := openapi.NewClient(<span class="string">"http://localhost:8888"</span>)</span><br><span class="line">params := openapi.FindPetsParams&#123;Tags: []<span class="keyword">string</span>&#123;<span class="string">"dog"</span>&#125;&#125;</span><br><span class="line"><span class="comment">// http.Response として返却</span></span><br><span class="line">res, err := c.FindPets(context.Background(),  params)</span><br></pre></td></tr></table></figure><h4 id="http-server"><a href="#http-server" class="headerlink" title="http server"></a>http server</h4><ul><li>API仕様が interface として定義</li><li>interface を実装する形で Server側のコードを実装していく</li></ul><p><code>コマンド</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oapi-codegen -generate <span class="string">"server"</span> -package openapi openapi.yml &gt; ./openapi/server.gen.go</span><br></pre></td></tr></table></figure><p><code>生成コード</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ServerInterface represents all server handlers.</span></span><br><span class="line"><span class="keyword">type</span> ServerInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Returns all pets</span></span><br><span class="line"><span class="comment">// (GET /pets)</span></span><br><span class="line">FindPets(ctx echo.Context, params FindPetsParams) error</span><br><span class="line"><span class="comment">// Creates a new pet</span></span><br><span class="line"><span class="comment">// (POST /pets)</span></span><br><span class="line">AddPet(ctx echo.Context) error</span><br><span class="line"><span class="comment">// Deletes a pet by ID</span></span><br><span class="line"><span class="comment">// (DELETE /pets/&#123;id&#125;)</span></span><br><span class="line">DeletePet(ctx echo.Context, id <span class="keyword">int64</span>) error</span><br><span class="line"><span class="comment">// Returns a pet by ID</span></span><br><span class="line"><span class="comment">// (GET /pets/&#123;id&#125;)</span></span><br><span class="line">FindPetById(ctx echo.Context, id <span class="keyword">int64</span>) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServerInterfaceWrapper converts echo contexts to parameters.</span></span><br><span class="line"><span class="keyword">type</span> ServerInterfaceWrapper <span class="keyword">struct</span> &#123;</span><br><span class="line">Handler ServerInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FindPets converts echo context to params.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *ServerInterfaceWrapper)</span> <span class="title">FindPets</span><span class="params">(ctx echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parameter object where we will unmarshal all parameters from the context</span></span><br><span class="line"><span class="keyword">var</span> params FindPetsParams</span><br><span class="line"><span class="comment">// ------------- Required query parameter "tags" -------------</span></span><br><span class="line"></span><br><span class="line">err = runtime.BindQueryParameter(<span class="string">"form"</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="string">"tags"</span>, ctx.QueryParams(), &amp;params.Tags)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf(<span class="string">"Invalid format for parameter tags: %s"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------- Optional query parameter "limit" -------------</span></span><br><span class="line"></span><br><span class="line">err = runtime.BindQueryParameter(<span class="string">"form"</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"limit"</span>, ctx.QueryParams(), &amp;params.Limit)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf(<span class="string">"Invalid format for parameter limit: %s"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke the callback with all the unmarshalled arguments</span></span><br><span class="line">err = w.Handler.FindPets(ctx, params)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>利用コード</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ServerInterface を実装するような struct を定義</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> petHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(si petHandler)</span> <span class="title">FindPets</span><span class="params">(ctx echo.Context, params FindPetsParams)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// GET /pets の処理記載</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(si petHandler)</span> <span class="title">AddPet</span><span class="params">(ctx echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">b := NewPet&#123;&#125;</span><br><span class="line"><span class="comment">// リクエスト Body は echo の APIを利用</span></span><br><span class="line">ctx.Bind(&amp;b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST /pets の処理記載</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(si petHandler)</span> <span class="title">DeletePet</span><span class="params">(ctx echo.Context, id <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// DELETE /pets/&#123;id&#125; の処理記載</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(si petHandler)</span> <span class="title">FindPetById</span><span class="params">(ctx echo.Context, id <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// GET /pets/&#123;id&#125; の処理記載</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">handler := petHandler&#123;&#125;</span><br><span class="line"><span class="comment">// 定義した struct を登録</span></span><br><span class="line">openapi.RegisterHandlers(e, handler)</span><br><span class="line">e.Logger.Fatal(e.Start(fmt.Sprintf(<span class="string">"0.0.0.0:%d"</span>, *port)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/go-chi/chi" target="_blank" rel="noopener">chi</a> 形式でも出力できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># server (chi)</span></span><br><span class="line">oapi-codegen -generate <span class="string">"chi-server"</span> openapi.yml &gt; openapi_chi_server.gen.go</span><br></pre></td></tr></table></figure><h4 id="OpenAPI-spec"><a href="#OpenAPI-spec" class="headerlink" title="OpenAPI spec"></a>OpenAPI spec</h4><ul><li>base64形式で <code>openapi.yaml</code> を保持</li></ul><p><code>コマンド</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oapi-codegen -generate <span class="string">"spec"</span> -package openapi openapi.yml &gt; ./openapi/spec.gen.go</span><br></pre></td></tr></table></figure><p><code>生成コード</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Base64 encoded, gzipped, json marshaled Swagger object</span></span><br><span class="line"><span class="keyword">var</span> swaggerSpec = []<span class="keyword">string</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="string">"H4sIAAAAAAAC/+RWTW/jNhD9K8S0R1XSJosedGp2nQIGiiRotqfAB0YcyWzFj5CjOEKg/16QlJ3Y0iZY"</span>,</span><br><span class="line"><span class="string">"tCha9GST4pBv3nsz5DPURlmjUZOH6hl8vUXF499L54wLf6wzFh1JjNO1ERh+BfraSUvSaKjSYha/ZdAY"</span>,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="レビュー"><a href="#レビュー" class="headerlink" title="レビュー"></a>レビュー</h2><p>良さそうな点と気になる点をまとめました。</p><h3 id="良さそうなところ"><a href="#良さそうなところ" class="headerlink" title="良さそうなところ"></a>良さそうなところ</h3><ul><li>生成コードが薄めで良い<ul><li>go-swagger は生成コードが重厚かつintefaceで分離されて実装が追いづらい点が気になっていた</li><li>echo/chi の APIが直接触れる</li></ul></li><li>echoやchi などの選択も結構好み</li><li>tag指定して出力すると依存のある定義のみが出力される<ul><li><code>oapi-codegen -include-tags pet -generate &quot;server&quot; openapi.yml</code></li></ul></li><li>クエリパラメータが struct へ Bindされる</li><li>パラメータのバリデーションに対応<ul><li>デフォルトだとリクエストボディはバリデーションされない (読まれないため)</li><li>Echo だと middleware をいれれば Body のバリデーションエラーも見れる<ul><li><code>middleware.OapiRequestValidator(swagger)</code></li><li>OpenAPI の spec が必要</li></ul></li></ul></li></ul><h3 id="気になるところ"><a href="#気になるところ" class="headerlink" title="気になるところ"></a>気になるところ</h3><ul><li>拡張タグは動かなそう<ul><li><code>x-XXX</code> 系は動作しない</li></ul></li><li>生成 struct の型定義に違和感<ul><li>required が 基本型 で optional が pointer 型</li><li>Go のコードでよく見る定義と逆なので注意が必要</li></ul></li><li><strong>レスポンス定義は Bind されない</strong><ul><li>実装者がレスポンスの struct を間違えないようにする必要がある</li><li>(個人的には一番いまいちかなと感じた点です。生成コード上仕方なさそうでしたが..)</li></ul></li><li>1 interface で Open API の定義が出力される<ul><li>include-tags を利用してタグ別に出力はうまく動作しない<ul><li>Server interface の実装が1つでないといけないため (echo/chiに登録できない)</li></ul></li><li>特定の tag のみ実装するケースでの利用可能</li></ul></li><li>同一 package に押し込める必要あり<ul><li>server, client コードは types に依存している</li></ul></li><li>echo と chi だと若干 echo 側のほうがリクエストの Bind が良い<ul><li>echo だと生成 Handler の引数にリクエストパラメータの struct が定義される</li><li>chi だと context から取得する必要あり<ul><li>生成コードで ctx から取り出すヘルパー関数あり</li></ul></li></ul></li></ul><h3 id="利用するとしたら"><a href="#利用するとしたら" class="headerlink" title="利用するとしたら..?"></a>利用するとしたら..?</h3><ul><li>echoでの出力を選択<ul><li>リクエストパラメータのバインドがしっかりされるため</li><li>middleware 利用だがリクエストボディのバリデーションチェックもできて良い</li></ul></li><li>出力は同一パッケージでファイルを分けて管理<ul><li>サーバー<ul><li>server, types, spec</li></ul></li><li>クライアント<ul><li>client, types</li></ul></li></ul></li><li>生成コード用の パッケージ (ディレクトリ) を切る<ul><li>各生成コードに依存があるため</li></ul></li><li>各API のレスポンス定義の命名を統一する<ul><li>レスポンス Body の Bindがされないため</li><li><code>${operationId}Res</code> or <code>${operationId}Response</code></li></ul></li></ul><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>ざっとコード生成を試して、コード側の確認をしてみました。<br>結構利用できそうだなというのが全体的な感想で、OpenAPI3.0系の制約がある場合は、oapi-codegen を実際に利用してみたいです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a></li><li><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a></li><li><a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="https://future-architect.github.io/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200701/top.png&quot; class=&quot;img-middle-size&quot;&gt;


&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;TIG DXチ
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
      <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
  </entry>
  
  <entry>
    <title>go-swaggerを用いたWebアプリケーション開発Tips19選</title>
    <link href="https://future-architect.github.io/articles/20200630/"/>
    <id>https://future-architect.github.io/articles/20200630/</id>
    <published>2020-06-30T01:06:15.000Z</published>
    <updated>2020-07-07T05:33:59.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の真野です。echo → 生net/http → gorilla/mux → go-swagger, gqlgenの経歴でGoのHTTP APIを実装してきました。本記事では最近業務でヘビーユーズしているgo-swaggerについての開発Tipsをまとめました。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>フューチャーではGoを採用する案件が増えて来ており、その際に<a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a> というツールを利用することが多いです。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> 理由はWebAPIのスキーマを駆動に開発することに慣れているという開発文化（DBレイヤのERDやデータフローを駆動に開発することは今も多い）や、リリース後の保守や将来のマイグレーションを考慮しなるべく特定のDSLに依存したくないというポリシーを強く持つこと、開発前にある程度固く機能数を洗い出して工数見積もりや開発スケジュールに活かしたいといった大人な事情など、色々相性が良いからだと思います。</p><h1 id="Swaggerとは"><a href="#Swaggerとは" class="headerlink" title="Swaggerとは"></a>Swaggerとは</h1><p><a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></p><blockquote><p>Swaggerは、OpenAPI仕様（以下OAS）と言われる、REST APIを定義するための標準仕様にもとづいて構築された一連のオープンソースツールです。REST APIの設計、構築、文書化、および使用に役立つ機能を提供します。</p></blockquote><p>YAML(JSON）でWebAPIの定義を記載することで、ドキュメンテーション・Client/Serverのコード生成・モックサービスの生成など多くのメリットを享受できます。またエコシステムも多数作られ、あるDSLに則ることでコードからSwaggerファイルを生成するなど、リバース系の生成手段も出てきています。</p><h1 id="Swaggerを記述する流れ"><a href="#Swaggerを記述する流れ" class="headerlink" title="Swaggerを記述する流れ"></a>Swaggerを記述する流れ</h1><p>Swagger(OpenAPI)のYAML定義は生で書くと大変なので、武田さんの<a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a> 記事で紹介されたツールを利用してYAMLファイルを作成し、それをインプットにサーバサイドのコードを自動生成しています。中にはそれらの文明を捨て生身のYAML職人になった猛者もいます。続いて後述するgo-swaggerでサーバサイドやクライアントサイドのコードを生成・実装・テストし、その中で足りない点を設計にフィードバック（つまりYAMLを修正）し、さらにコードを再生成するといったサイクルを取ることが一般的だと思います。</p><p>実際に生成したSwaggerに対する規約は、亀井さんの<a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a>の記事を見ると、どういうところに注意すべきか分かって良いと思います。</p><h1 id="go-swaggerはWebアプリケーションフレームワーク"><a href="#go-swaggerはWebアプリケーションフレームワーク" class="headerlink" title="go-swaggerはWebアプリケーションフレームワーク"></a>go-swaggerはWebアプリケーションフレームワーク</h1><p><a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a>とは、Swaggerファイルを入力にGoのコードを生成することができるツールです。生成されるコードは、go-openapi で管理されているモジュールが利用されています。go-swaggerそのものの技術選定については、多賀さんの<a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a> 記事にも記載があります。</p><p>go-swaggerがWAF(Webアプリケーションフレームワーク）というのは直感では理解しにくいですが、go-swaggerで生成したサーバサイドのコードは、実質的にechoやginのように多くの機能を持ちます。 例えば、<strong>URLのルーティング</strong>、<strong>入力Validation</strong>、<strong>クエリパラメータ</strong>、フォーム、リクエストヘッダ、リクエストボディなどの <strong>入力modelへのバインディング</strong>、<strong>HTTPレスポンスコード別のmodelの作成</strong>や、<strong>Middlewareの設定専用の関数</strong>など多くをサポートしていますし、<strong>固有のビジネスロジックを書くルール</strong>もgo-swaggerの生成したコードによって決められています。</p><h1 id="フロントエンド側の生成は？"><a href="#フロントエンド側の生成は？" class="headerlink" title="フロントエンド側の生成は？"></a>フロントエンド側の生成は？</h1><p>TypeScriptのフロントエンド側の生成は<a href="https://openapi-generator.tech/docs/generators/" target="_blank" rel="noopener">openapi-generator</a>を当社では採用することが多いです。あくまでサーバサイドの生成にgo-swaggerを用いています。go-swaggerもクライアントコードは生成でき、こちらはあるWebAPIロジック中で、別のWebAPIを呼び出す時に利用したりもします。（下図のイメージ）</p><img src="/images/20200630/photo_20200630_01.png"><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>そんなgo-swaggerを用いてWebAPIサーバを開発し、いくつかのシステムをリリースしてきました。そこで得たTipsを紹介していきます。比較的サーバサイドの話が多いですが、一部クライアントサイドの話しもあります。（前述したあるWebAPIサーバから、別のOpenAPIで定義されているWebAPIを呼び出すことも合ったので）</p><h2 id="1-インストールバージョンをチームで固定しよう"><a href="#1-インストールバージョンをチームで固定しよう" class="headerlink" title="1. インストールバージョンをチームで固定しよう"></a>1. インストールバージョンをチームで固定しよう</h2><p><a href="https://goswagger.io/install.html" target="_blank" rel="noopener">インストール手順</a>は様々ですが、コードを自動生成する関係上、バージョンは必ず揃えた方が良いです。もしチーム内に複数バージョンが混在してしまうと、自動生成するたびに不要なコード差分が発生して履歴が汚れてしまいます。</p><p>もし、コードからビルドするのであれば、下記のように<code>@v0.23.0</code> のように固定することがオススメです。</p><figure class="highlight bash"><figcaption><span>インストール手順</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/go-swagger/go-swagger/cmd/swagger@v0.23.0</span><br></pre></td></tr></table></figure><p>特に理由がなければ最新のバージョンを利用するのが良いと思います。2020/05/19時点では<a href="https://github.com/go-swagger/go-swagger/releases" target="_blank" rel="noopener">リリースノート</a>を見る限り数ヶ月ごとにリリースされているように活発に開発が続いているので、適時バージョンも上げていきたいですね。</p><h2 id="2-swagger-genrate-server-コマンドの推奨オプション"><a href="#2-swagger-genrate-server-コマンドの推奨オプション" class="headerlink" title="2. swagger genrate server コマンドの推奨オプション"></a>2. swagger genrate server コマンドの推奨オプション</h2><p>オプションは<a href="https://goswagger.io/generate/server.html" target="_blank" rel="noopener">公式ドキュメント</a>に記載されています。次のオプションは設定したほうが良いかなと思います。</p><ul><li><code>--strict-additional-properties</code> リクエストボディなどで指定外のフィールドを指定した場合にエラーになる</li><li><code>-a</code>, <code>--api-package</code> パッケージがoperationsではなく任意のパッケージ名になる。短くしたい時にオススメ</li><li><code>-A</code>, <code>--name</code>  Swagger定義の <code>info.title</code> に大文字が入るとアンスコ繋がりにされちゃうの回避できる</li><li><code>--exclude-main</code> main.goのファイルを生成するのを除外してくれる</li><li><code>-t</code>,<code>--target</code> 出力先のパッケージを指定。3にもあるが、<code>gen</code> にすることが経験上多い</li></ul><p>まとめると、例えばルート管理（RouteManagement）のAPIであれば、以下のようなコマンドにすることが多いです。</p><figure class="highlight bash"><figcaption><span>生成コマンド例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swagger generate server -a routemanagement -A routemanagement \</span><br><span class="line">  --exclude-main --strict-additional-properties -t gen f ./swagger/swagger.yaml</span><br></pre></td></tr></table></figure><p>立ち上がり初期は、<code>-a</code>や<code>-A</code>の値を変えながらしっくり来るのを探すことがオススメです。</p><h2 id="3-パッケージ構造"><a href="#3-パッケージ構造" class="headerlink" title="3. パッケージ構造"></a>3. パッケージ構造</h2><p>先ほど、出力先ディレクトリを <code>gen</code> に指定しましたが、<a href="ttps://goswagger.io/tutorial/custom-server.html">公式ドキュメントにもgenで生成する例</a>が書いてありました。最初は <code>generated</code> にしようか迷いましたが、短いですし <code>gen</code> に合わせることをおすすめします。</p><p>genの意味が何か？というのは新規参画者が全員抱く疑問だと思うので、READMEの上の方にディレクトリ構成を書くようにしています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── docs                  <span class="comment"># 設計ドキュメント</span></span><br><span class="line">├── swagger               <span class="comment"># Swagger管理</span></span><br><span class="line">|    └── swagger.yml      <span class="comment"># WebAPI定義</span></span><br><span class="line">├── server                <span class="comment"># WebAPI本体のコード</span></span><br><span class="line">|    ├── cmd              <span class="comment"># 実行ファイルのエンドポイント</span></span><br><span class="line">|    ├── gen              <span class="comment"># go-swaggerで自動生成コードの出力先(⚠️configure_xx.go以外は編集しない⚠️)</span></span><br><span class="line">|    └── testdata         <span class="comment"># ユニットテストデータ</span></span><br><span class="line">|</span><br><span class="line">└── migrationtool         <span class="comment"># データ移行ツール</span></span><br><span class="line">     └── ...</span><br></pre></td></tr></table></figure><p>例がモノリポで作っているイメージなので、適時書き換えて参考にしていただければです。</p><h2 id="4-起動時オプションの-hostには注意"><a href="#4-起動時オプションの-hostには注意" class="headerlink" title="4. 起動時オプションの --hostには注意"></a>4. 起動時オプションの <code>--host</code>には注意</h2><p>go-swaggerで生成した<a href="https://goswagger.io/tutorial/todo-list.html" target="_blank" rel="noopener">サーバ起動時オプション</a>がいくつか存在します。その中で必須なのは、<code>--host</code>と <code>--port</code> だと思います。<code>--host</code> を指定した場合はデフォルト<code>localhost</code>、つまり <code>127.0.0.1</code>になります。そうすると、ローカル開発では良いですが、他のサーバからアクセスできなくなります。ネットワークインターフェースを個別に指定したいケースは別ですが、基本的には <code>--host 0.0.0.0</code> を指定すると良いでしょう。</p><p>また、ポート番号は未指定だと毎回ランダムな数値を選択します。固定したほうが何かと都合が良いと思うのでアプリごとに利用するポートを決定しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./exmample-server --host 0.0.0.0 --port 3000</span><br></pre></td></tr></table></figure><p><code>--host</code>は<code>$HOST</code>、<code>--port</code>は<code>$PORT</code>という環境変数でも利用できるので、コンテナ化するときなどはこちらを利用するのも良いと思います。特に<a href="https://cloud.google.com/run/docs/reference/container-contract" target="_blank" rel="noopener">GCPのCloudRunは$PORTで待ち受けるのが必須</a>なので、この場合はGCP側にポート設定は任せましょう。</p><h2 id="5-OpenAPIのバージョンを見間違えないように注意"><a href="#5-OpenAPIのバージョンを見間違えないように注意" class="headerlink" title="5. OpenAPIのバージョンを見間違えないように注意"></a>5. OpenAPIのバージョンを見間違えないように注意</h2><p>go-swaggerが対応しているのは <code>OAS2</code> であるので注意です。最新は <code>OAS3</code> ですが、その記法は利用できないことがあります。特にググった時に出てくる公式ドキュメントが <code>OAS2</code>であることをよく確認しましょう</p><p>大事なポイントなのでちゃんとテストします。次の画像↓はOAS2かOAS3のどちらでしょうか？</p><img src="/images/20200630/photo_20200630_02.png"><p>..はい、<code>OAS2</code> と書かれているのでOKです。このドキュメントはgo-swaggerで利用できます。</p><p>では、次の画像↓はどちらでしょうか？</p><img src="/images/20200630/photo_20200630_03.png"><p>..はい、<code>OAS3</code> と書かれていますね。というわけで、このドキュメントはgo-swaggerでは利用できない可能性が高いので、参考にするのはほどほどにしましょう。</p><p>個人的には <code>OAS2</code> の仕様については下記が最もまとまっていて簡潔なのでオススメです。ググるのではなくまずこの仕様書を見ましょう。</p><p><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md" target="_blank" rel="noopener">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md</a></p><h2 id="6-go-swaggerで対応しているOpenAPIの規約とは"><a href="#6-go-swaggerで対応しているOpenAPIの規約とは" class="headerlink" title="6. go-swaggerで対応しているOpenAPIの規約とは"></a>6. go-swaggerで対応しているOpenAPIの規約とは</h2><p>5で説明したとおり、OpenAPIの3系と2系（Swagger）でGoogle検索しにくいのが実情だと思います。さらにその中でgo-swaggerがその記法に対応しているかどうか迷う場面が出てくると思います。</p><p>対応状況については下記に記載があります。</p><p><a href="https://github.com/go-swagger/go-swagger/blob/master/docs/use/spec/params.md" target="_blank" rel="noopener">https://github.com/go-swagger/go-swagger/blob/master/docs/use/spec/params.md</a></p><p>主要どころは網羅できているとお気づきになると思います。実際、経験上はほとんどが問題なく利用できてきました。もし、上手く動かない場合は、設定ミスや仕様の勘違い、あるいはコードの再生成をし忘れているといった可能性が高いです。</p><h2 id="7-Swaggerのモデルの必須属性を外すとGoのコードがポインタじゃなくなり便利だが落とし穴がある"><a href="#7-Swaggerのモデルの必須属性を外すとGoのコードがポインタじゃなくなり便利だが落とし穴がある" class="headerlink" title="7. Swaggerのモデルの必須属性を外すとGoのコードがポインタじゃなくなり便利だが落とし穴がある"></a>7. Swaggerのモデルの必須属性を外すとGoのコードがポインタじゃなくなり便利だが落とし穴がある</h2><p>Goの辛いところかも知れませんが、nullかどうかを判定するためにGoではしばしばstringやint64のフィールドが、必須設定されるとポインタ型になります。これを <code>swag.String()/swag.StringValue()</code> や <code>swag.Int64()/swag.Int64Value()</code> で変換するのが厄介なので、特にレスポンスに関してはチェックもしないし必須属性を外そうかという判断になりがちだと思います。</p><p>この時に厄介なのが、必須属性<strong>ではない</strong> フィールドには、JSONの <code>omitempty</code> タグが付与されることです。これによって、int64やboolの型がついているフィールドが、<code>0</code>値や<code>false</code> の場合にレスポンスのJSONフィールドから除外されてしまいます。意味は分かるけど意図はそういうことじゃないんだよなーって思う人も多いのでは無いでしょうか？これを回避するためには、 go-swaggerの拡張記法である、 <code>x-omitempty: false</code> を設定する必要があります。</p><p>..なんというか、色々歪みが大きい気がするので、必ずレスポンスに含まれる項目であれば素直に必須だという宣言に、Swagger上はしておく方が良いかも知れません。このあたりはチーム全体の判断になると思います。</p><h2 id="8-数値始まりのフィールド名にNrというプレフィックスが付与される"><a href="#8-数値始まりのフィールド名にNrというプレフィックスが付与される" class="headerlink" title="8. 数値始まりのフィールド名にNrというプレフィックスが付与される"></a>8. 数値始まりのフィールド名にNrというプレフィックスが付与される</h2><p>数値始まりのフィールド <code>0x9101</code> といったフィールドを、go-swaggerで生成すると、 <code>Nr0x9101</code> と言った具合に<code>Nr</code>といったプレフィックスが付与されます。ドキュメントには見当たりませんでしたが、コードでは<a href="https://github.com/go-swagger/go-swagger/blob/b6f0abd35e2a0d1415e1b4776e35e33808d2ce62/generator/template_repo.go#L551" target="_blank" rel="noopener">この辺</a> に実装されていました。おそらく数値を表すNumberのドイツ語読み？でしょうか。これはGoのフィールド名が数字始まりを許可しないため、仕方ない挙動だとは思いますが、<code>Nr</code>は辞めたいと思われる方も多いのではないでしょうか？</p><p>これを回避すると前には、<code>x-go-name</code> という拡張記法を用います。コレを用いると、 <code>x-go-name: d0x9101</code> といった形でカスタムな名称にできます。まぁAPIの定義と、内部で用いるフィールド名が異なると脳内変換が大変なので、この場合は状況が許すのであればAPI定義側も <code>d0x9101</code> などと変更したほうが良い判断に思われます。</p><p><code>x-go-name</code> ですが、おそらくは、<code>company_cd</code>や<code>user_id</code>といったsnake_caseでAPIを定義した場合、go-swaggerのデフォルトの挙動は <code>companyCd</code>、<code>userId</code>といった具合に、Goの慣習と合わないことへの対応に使うことが本来は多いと思います。このあたりに用いるのであれば本来の意図したオプションだと思います。</p><h2 id="9-go-swaggerの拡張記法"><a href="#9-go-swaggerの拡張記法" class="headerlink" title="9. go-swaggerの拡張記法"></a>9. go-swaggerの拡張記法</h2><p>7,8と関連しますが、<code>x-omitempty</code>や<code>x-go-name</code>以外にも、go-swagger独自の拡張パラメータが存在します。</p><p>どういったパラメータが利用できるかは、コードを見ると分かりやすいです。<br><a href="https://github.com/go-swagger/go-swagger/blob/master/generator/types.go#L45" target="_blank" rel="noopener">https://github.com/go-swagger/go-swagger/blob/master/generator/types.go#L45</a></p><p>この中でも、比較的よく使いそうなのは <code>x-go-type</code>や<code>x-order</code>でしょうか？ <code>x-go-type</code> は自分でtype aliasした型を指定することが出来ます。 <code>x-order</code>は、go-swaggerはデフォルトの挙動では、Swaggerに記載した順番にStructのフィールドを生成してくれません。それが視認性など場合によっては困ると言った場合に、順序を指定することも出来ます。あまり乱用すると、扱いにくいSwaggerファイルになりかねないので、トレードオフを考えながら指定していくと良いかなと思います。</p><h2 id="10-DateTimeを活用しよう"><a href="#10-DateTimeを活用しよう" class="headerlink" title="10. DateTimeを活用しよう"></a>10. DateTimeを活用しよう</h2><p><code>type=string</code>を指定した時に、<code>format</code>には、<code>date</code>, <code>date-time</code> などが<a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types" target="_blank" rel="noopener">指定できます</a>。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">event_time:</span><br><span class="line">  type: string</span><br><span class="line">  format: date-time</span><br></pre></td></tr></table></figure><p>こうすると、go-swaggerでは <code>github.com/go-openapi/strfmt</code> の <code>strfmt.DateTiime</code> 型でStructが生成されます。</p><figure class="highlight go"><figcaption><span>date-time指定時の生成例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ExampleParams <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP Request Object</span></span><br><span class="line">HTTPRequest *http.Request <span class="string">`json:"-"`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Required: true</span></span><br><span class="line"><span class="comment">  In: query</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">EventTime strfmt.DateTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>date-time</code>を指定すると、<code>full-date - RFC3339</code>の形式での入力をパースすることが出来ます。コードでは<a href="https://github.com/go-openapi/strfmt/blob/master/time.go#L78" target="_blank" rel="noopener">この辺</a>です。中身を見ると、複数のフォーマットに対応してくれおり、どれかに一致すればOKという仕様です。このあたりの受け入れる日付フォーマットを一々取り決めるのは厄介ですが、標準ライブラリレベルで規定してくれるているため、楽ができます。</p><figure class="highlight go"><figcaption><span>full-dateを指定したときにパースする</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// RFC3339Millis represents a ISO8601 format to millis instead of to nanos</span></span><br><span class="line">RFC3339Millis = <span class="string">"2006-01-02T15:04:05.000Z07:00"</span></span><br><span class="line"><span class="comment">// RFC3339Micro represents a ISO8601 format to micro instead of to nano</span></span><br><span class="line">RFC3339Micro = <span class="string">"2006-01-02T15:04:05.000000Z07:00"</span></span><br><span class="line"><span class="comment">// ISO8601LocalTime represents a ISO8601 format to ISO8601 in local time (no timezone)</span></span><br><span class="line">ISO8601LocalTime = <span class="string">"2006-01-02T15:04:05"</span></span><br><span class="line"><span class="comment">// ISO8601TimeWithReducedPrecision represents a ISO8601 format with reduced precision (dropped secs)</span></span><br><span class="line">ISO8601TimeWithReducedPrecision = <span class="string">"2006-01-02T15:04Z"</span></span><br><span class="line"><span class="comment">// ISO8601TimeWithReducedPrecision represents a ISO8601 format with reduced precision and no timezone (dropped seconds + no timezone)</span></span><br><span class="line">ISO8601TimeWithReducedPrecisionLocaltime = <span class="string">"2006-01-02T15:04"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">dateTimeFormats = []<span class="keyword">string</span>&#123;RFC3339Micro, RFC3339Millis, time.RFC3339, time.RFC3339Nano, </span><br><span class="line">ISO8601LocalTime, ISO8601TimeWithReducedPrecision, ISO8601TimeWithReducedPrecisionLocaltime</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>また、レスポンスのモデル側のフィールドに<code>date-time</code>を指定したときは、デフォルトでは上記 <code>RFC3339Millis</code> のフォーマットが利用されます。もし、これを変更したい場合は、strfmtパッケージのMarshalFormatフィールドを書き換えればOKです（グローバルに書き換わります）。</p><figure class="highlight go"><figcaption><span>レスポンスの日付フォーマットを変更したい場合（ミリ秒を外したい!といった場合）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strfmt.MarshalFormat = time.RFC3339</span><br></pre></td></tr></table></figure><p><code>strfmt.DateTime</code> ですが、初見だと色々と扱いにくいと思います。なぜなら<code>swag.DateTime</code>とか<code>swag.DateTimeValue</code>とかが無いからです。理由は<a href="https://github.com/go-swagger/go-swagger/issues/734" target="_blank" rel="noopener">もともとOpenAPI側のライブラリだからです</a>。</p><p>変換の仕方をざっとまとめます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/strfmt"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/strfmt/conv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// *strfmt.DateTime → strfmt.DateTime</span></span><br><span class="line">dateTimePointer := conv.DateTimeValue(p.Body.DateTime)</span><br><span class="line"></span><br><span class="line"><span class="comment">// strfmt.DateTime → *strfmt.DateTime</span></span><br><span class="line">dateTime := conv.DateTime(p.Body.DateTimePointer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// strfmt.DateTime → time.Time</span></span><br><span class="line">timeTime := time.Time(dateTime)</span><br><span class="line"></span><br><span class="line"><span class="comment">// time.Time → strfmt.DateTime</span></span><br><span class="line">dateTime := strfmt.DateTime(timeNow())</span><br><span class="line"></span><br><span class="line"><span class="comment">// string → strfmt.DateTime</span></span><br><span class="line">dateTime := strfmt.ParseDateTime(<span class="string">"2020-05-20T15:04:05Z07:00"</span>)</span><br></pre></td></tr></table></figure><p>time.Timeへの変換さえ慣れれば、自前で日付パースを行うコードを減らせ見通しが良くなると思います。ぜひ、日付周りのデータを受け付ける場合は活用下さい。</p><h2 id="11-アクセスログ"><a href="#11-アクセスログ" class="headerlink" title="11. アクセスログ"></a>11. アクセスログ</h2><p>Go系のWAF全般に言えることかも知れませんが、go-swaggerも標準ではアクセスログなどが一切出力されず、自前でMiddlewareを仕込む必要があります。</p><p>設定する場所は、 <code>restapi/configure_{project name}.go</code> にある、2つの関数のどちらかに設定します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupMiddlewares</span><span class="params">(handler http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupGlobalMiddleware</span><span class="params">(handler http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> handler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setupMiddlewares</code> はプログラム上で指定したルートに対するMiddlewareで、<code>setupGlobalMiddleware</code>は<code>/swagger.json</code>のエントリーポイントにも着火するミドルウェアです。</p><p>アクセスログの実装方法は色々ですが、私は以下のようなAccessLogの関数を実装することが多いです。</p><figure class="highlight go"><figcaption><span>アクセスログ実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mymiddleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/labstack/gommon/log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> captureResponseWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">http.ResponseWriter</span><br><span class="line">statusCode <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCaptureResponseWriter</span><span class="params">(w http.ResponseWriter)</span> *<span class="title">captureResponseWriter</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;captureResponseWriter&#123;w, http.StatusOK&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lrw *captureResponseWriter)</span> <span class="title">WriteHeader</span><span class="params">(code <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">lrw.statusCode = code</span><br><span class="line">lrw.ResponseWriter.WriteHeader(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AccessLog</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">start := time.Now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.URL.Path != <span class="string">"/health"</span> &amp;&amp; r.URL.Path != <span class="string">"/health/"</span> &#123;</span><br><span class="line"><span class="comment">// ヘルスチェックは毎秒出力されログを汚すので出力させない</span></span><br><span class="line">log.Infof(<span class="string">"[ACCESS] START %v %v\n"</span>, r.Method, r.URL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lrw := NewCaptureResponseWriter(w)</span><br><span class="line">next.ServeHTTP(lrw, r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.URL.Path != <span class="string">"/v1/health"</span> &amp;&amp; r.URL.Path != <span class="string">"/v1/health/"</span> &#123;</span><br><span class="line">elapsed := time.Since(start)</span><br><span class="line"></span><br><span class="line">code := lrw.statusCode</span><br><span class="line"><span class="keyword">if</span> code &gt;= <span class="number">500</span> &#123;</span><br><span class="line">log.Errorf(<span class="string">"[ACCESS] END %v %v %v %v\n"</span>, r.Method, code, r.URL, elapsed)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> code &gt;= <span class="number">400</span> &#123;</span><br><span class="line">log.Warnf(<span class="string">"[ACCESS] END %v %v %v %v\n"</span>, r.Method, code, r.URL, elapsed)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Infof(<span class="string">"[ACCESS] END %v %v %v %v\n"</span>, r.Method, code, r.URL, elapsed)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを、先ほどの<code>setupGlobalMiddleware</code>関数に設定します。</p><figure class="highlight go"><figcaption><span>ミドルウェアの設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupGlobalMiddleware</span><span class="params">(handler http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> mymiddleware.AccessLog(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、go-swaggerへのリクエストに対してロギングを行うことができました。開発や利用状況の調査などに役立て下さい。</p><h2 id="12-panicしたときの防御"><a href="#12-panicしたときの防御" class="headerlink" title="12. panicしたときの防御"></a>12. panicしたときの防御</h2><p>これも11に関連した話ですが、go-swaggerのロジックでpanicが発生するとレスポンスを何も返さないため不便です（どこかのレイヤーでGateway Timeoutなどが発生します）。この場合は、panicをキャプチャするmiddlewareを設定し、500エラーを返すなどをしたほうが良いでしょう。</p><p>公式ドキュメントにも<a href="https://github.com/go-swagger/go-swagger/blob/master/docs/use/middleware.md#add-logging-and-panic-handling" target="_blank" rel="noopener">実装例</a>が記載されています。<a href="https://github.com/dre1080/recover" target="_blank" rel="noopener">dre1080/recover</a>を利用しても良いと思いますし、私はもう少し自由度を高めたかったので<a href="https://medium.com/@masnun/panic-recovery-middleware-for-go-http-handlers-51147c941f9" target="_blank" rel="noopener">こちらの実装</a>を参考にして、カスタムミドルウェアをつくることもあります。</p><figure class="highlight go"><figcaption><span>panic救済用のミドルウェア実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mymiddleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/labstack/gommon/log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Recovery</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Errorf(<span class="string">"panic catch: %v"</span>, err)</span><br><span class="line"></span><br><span class="line">resp, _ := json.Marshal(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"error"</span>: fmt.Sprintf(<span class="string">"Internal Server Error: %v"</span>, err),</span><br><span class="line"><span class="string">"code"</span>:  <span class="string">"000500"</span>, <span class="comment">// 予期せぬエラー</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">_, _ = w.Write(resp)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">next.ServeHTTP(w, r)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを11のアクセスログと合わせて設定します。</p><figure class="highlight go"><figcaption><span>ミドルウェアの設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupGlobalMiddleware</span><span class="params">(handler http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> mymiddleware.Recovery(mymiddleware.AccessLog(handler))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、panicが発生しても仕様通りに何かしらレスポンスすることができました。</p><h2 id="13-Middleware"><a href="#13-Middleware" class="headerlink" title="13. Middleware"></a>13. Middleware</h2><p>現実には、10, 11以外にも多くのMiddlewareを実装する必要が出てくると思います。多いのは、CORS、GZIPでしょう。BodyLimitやRateLimitなどは、LANを飛び出してWebAPIを実装すると必要性が出てくると思います。どういったMiddlewareが必要になってくるかは、<a href="https://echo.labstack.com/middleware" target="_blank" rel="noopener">echoのMiddlewareページ</a>を見て、どういった観点がありそうか確認してみるのも良いかも知れません。</p><p><strong>CORS</strong>に関しては、<a href="https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_documenting.md#how-to-use-swagger-ui-cors" target="_blank" rel="noopener">公式のFAQ</a> があります。</p><figure class="highlight go"><figcaption><span>FAQに載っている実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/rs/cors"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupGlobalMiddleware</span><span class="params">(handler http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">    handleCORS := cors.Default().Handler</span><br><span class="line">    <span class="keyword">return</span> handleCORS(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大体が、<code>cors.Default()</code> の設定で大丈夫だと思いますが、<code>Access-Control-Allow-Headers</code> のリクエストヘッダに対してはデフォルトで許可していないので、要件によっては追加でオプションを追加します。</p><figure class="highlight go"><figcaption><span>リクエストヘッダも全OKにする例（個別に指定するのがベストだとは思います）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myCORS := cors.New(cors.Options&#123;</span><br><span class="line">AllowedHeaders: []<span class="keyword">string</span>&#123;<span class="string">"*"</span>&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>GZIP</strong>は<a href="https://github.com/nytimes/gziphandler/blob/master/README.md" target="_blank" rel="noopener">こちらのライブラリ</a>を利用すると良いかと思います。こちらは最後の設定例でまとめて説明します。</p><p><strong>BodyLimit</strong>はこちらの<a href="https://stackoverflow.com/questions/52879193/how-to-determine-if-ive-reached-the-size-limit-via-gos-http.maxbytesreader" target="_blank" rel="noopener">StackOverflowの記事</a>を参考に実装しました。やりたいことは、指定されたサイズ以上のリクエストボディを許可せず、サーバ側に負荷をかけないようにしたいことです。</p><figure class="highlight go"><figcaption><span>BodyLimitの実装例（2MB制限）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MaxBodyByteSize = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span> <span class="comment">// 2MB</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BodyLimit</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">r.Body = http.MaxBytesReader(w, r.Body, MaxBodyByteSize)</span><br><span class="line">next.ServeHTTP(w, r)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RateLimit</strong>は<a href="https://github.com/go-swagger/go-swagger/blob/master/docs/use/middleware.md#add-logging-and-panic-handling" target="_blank" rel="noopener">さきほどの公式ドキュメント</a> にも記載があります。WAFなどを導入していれば不要かもしれないですが、負荷試験時にベンチマークツールの誤作動でDynamoDBなど回数課金なサービスで費用がかさんだ悪夢から、防御的に設定することにしています。</p><figure class="highlight go"><figcaption><span>RateLimitの設定例（秒間10回まで）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupMiddlewares</span><span class="params">(handler http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">  limiter := tollbooth.NewLimiter(<span class="number">10</span>, time.Second)</span><br><span class="line">  limiter.IPLookups = []<span class="keyword">string</span>&#123;<span class="string">"RemoteAddr"</span>, <span class="string">"X-Forwarded-For"</span>, <span class="string">"X-Real-IP"</span>&#125;</span><br><span class="line">  <span class="keyword">return</span> tollbooth.LimitFuncHandler(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これらを合わせると以下のようになります。</p><figure class="highlight go"><figcaption><span>各種Middlewareの実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupGlobalMiddleware</span><span class="params">(handler http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="comment">// CORS</span></span><br><span class="line">myCORS := cors.New(cors.Options&#123;</span><br><span class="line">AllowedHeaders: []<span class="keyword">string</span>&#123;<span class="string">"*"</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RateLimit</span></span><br><span class="line">limiter := tollbooth.NewLimiter(<span class="number">10</span>, time.Second)</span><br><span class="line">limiter.IPLookups = []<span class="keyword">string</span>&#123;<span class="string">"RemoteAddr"</span>, <span class="string">"X-Forwarded-For"</span>, <span class="string">"X-Real-IP"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mymiddleware.Recovery(myCORS.Handler(mymiddleware.AccessLog(</span><br><span class="line">gziphandler.GzipHandler(tollbooth.LimitFuncHandler(</span><br><span class="line">mymiddleware.BodyLimit(handler))))))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>デコレートの階層が深すぎてよくわからなくなってきましたが、浅い方から順番に動くので、アクセスログはCORSの前に出したいとかがあれば順序を動かしてみてください。</p><h2 id="14-エラーハンドリング"><a href="#14-エラーハンドリング" class="headerlink" title="14. エラーハンドリング"></a>14. エラーハンドリング</h2><p>go-swaggerの入力Validationでエラーが発生したときは、デフォルトでは <code>422 Unprocessable Entity</code> が発生します。422のままで良いよという方はこのままでも良いですが、<code>400 Bad Request</code>で統一したい場合もあるでしょう。理由は、悪さをしようとするユーザーのリクエストがあるという性悪説にたって、不正パラメーターの詳細なエラー情報は悪いクライアントに不要な情報を与えるものとなりかねないので、雑に400を返すといった考えもあると思うからです。</p><p>単純にエラー時のステータスコードを変えたいだけなら、<a href="https://github.com/go-swagger/go-swagger/issues/1820" target="_blank" rel="noopener">ここに書いてあるように</a>簡単に実施できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/go-openapi/errors"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureAPI</span><span class="params">(api *myapp.MyApplicationAPI)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">errors.DefaultHTTPCode = http.StatusBadRequest </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで入力されたパラメータがSwaggerで定義したスキーマと異なる場合は、<code>400 Bad Request</code> を返すことができました。</p><p>一方で、エラー時のレスポンスボディは <code>{&quot;code&quot;:400, &quot;mesasge&quot;: &quot;xxx&quot;}</code> といった形式になります。<a href="https://github.com/go-openapi/errors/blob/master/api.go#L84" target="_blank" rel="noopener">実装はこのあたり</a>になります。もし、レスポンスボディのレイアウトを変更したいときは、自分でカスタムのerrorHandlerを設定することもできます。</p><figure class="highlight go"><figcaption><span>go-swaggerでのハンドリングのカスタマイズ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureAPI</span><span class="params">(api *myapp.MyApplicationAPI)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">errors.DefaultHTTPCode = http.StatusBadRequest</span><br><span class="line">api.ServeError = myerrors.MyServeError <span class="comment">// 拡張部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>myerrors.MyServeErrorの実装ですが、デフォルトである <code>github.com/go-openapi/errors</code>の <code>errors.ServeError</code>の実装を参考にしながら、一部を改修するといった形になります。<a href="https://github.com/go-swagger/go-swagger/issues/1041#issuecomment-301393502" target="_blank" rel="noopener">このIssue</a>で話題になっています。例えば、<code>code</code>というフィールドを削除したいよって場合は、<code>errors.ServeError</code>の<code>errorAsJSON</code>関数を書き換えて対応します。</p><figure class="highlight go"><figcaption><span>codeフィールドを削除した実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorAsJSON</span><span class="params">(err Error)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">b, _ := json.Marshal(<span class="keyword">struct</span> &#123;</span><br><span class="line">Message <span class="keyword">string</span> <span class="string">`json:"message"`</span></span><br><span class="line">&#125;&#123;err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記で、色々go-swaggerのフレームワーク側が対応してしてくれているエラーハンドリングも自由自在になりました。あまりカスタマイズすると、本家バージョンアップの追随が大変なので、なるべくgo-swagger標準の形式に則ってWebAPI設計することがおすすめですが、いざという時の逃げ道として認識してもらえると幸いです。</p><h2 id="15-Defaultステータスコードの勧め"><a href="#15-Defaultステータスコードの勧め" class="headerlink" title="15. Defaultステータスコードの勧め"></a>15. Defaultステータスコードの勧め</h2><p><code>OAS2</code> のSwagger定義に、<a href="https://swagger.io/docs/specification/2-0/describing-responses/#Default" target="_blank" rel="noopener">Defaultレスポンス</a>という設定が出来ます。</p><p>下記のように、200以外は全て同じErrorモデルを利用するというのであれば定義の簡略として便利だと思います。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">responses:</span></span><br><span class="line">    <span class="attr">200:</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">Success</span></span><br><span class="line">      <span class="attr">schema:</span></span><br><span class="line">        <span class="string">$ref:</span> <span class="string">'#/definitions/User'</span></span><br><span class="line">    <span class="comment"># Definition of all error statuses</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">Unexpected</span> <span class="string">error</span></span><br><span class="line">      <span class="attr">schema:</span></span><br><span class="line">        <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br></pre></td></tr></table></figure><p>これが特に効果を発揮するのは、<strong>クライアントコードを生成した時</strong>です。理由は、サーバサイドが行儀よくWebAPI定義通りのレスポンスコードを返してくれればよいのですが、実装によって予期せぬレスポンスコードを帰す場合（例えば先ほどの422の話）には、クライアントコードはそれを上手く扱えません。他にも自動生成部分ではなく開発者が個別実装する部分で、間違った自動生成コードを利用した場合にも発生します。</p><p>例えば、もしdefalutが存在しない場合は、下記のようにクライアント側でエラーをログ出力しても、<code>{resp:0xc0005325a0}</code> のようなポインタ情報しか出力されないです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">params := user.NewGetUserParamsWithContext(ctx).WithUserID(userID)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err := api.user.GetUserContract(params); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Errorf(<span class="string">"getUserContract: %s"</span>, err.Error()) <span class="comment">//=&gt;  getUserContract: &#123;resp:0xc0005325a0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これは、ステータスコード別にバインドするStructを自動生成する関係上、想定外のステータスコードの場合に動かしようが無いからだともいます。<a href="https://github.com/go-swagger/go-swagger/issues/1470" target="_blank" rel="noopener">このあたりのIsseuにも似たような議論</a>がありました。これを避けるためには、横断的にエラー時のModelを共通化しておき、全てのエンドポイントごとにDefaultステータスコードを設定しておくことがオススメです。</p><h2 id="16-NewXxxの関数を利用する"><a href="#16-NewXxxの関数を利用する" class="headerlink" title="16. NewXxxの関数を利用する"></a>16. NewXxxの関数を利用する</h2><p>15でもちょっと実装が出ましたが、go-swaggerで生成したクライアントコードを利用して、サーバにリクエストする場合について注意があります。リクエストパラメータの生成には、 <code>NewXxx</code>を利用してStructを作らないと、timeout=0になって、<code>context deadline exceeded</code> エラーとなり上手く動作しません。<a href="https://github.com/go-swagger/go-swagger/issues/919#" target="_blank" rel="noopener">このあたりのIssue</a>でも話題にしています。</p><p>NewXxxの関数を用いるときは、<code>WithContext</code>付きの方を利用すると便利です。さらにチェーンスタイルでパラメータも設定できます。必須属性については <code>swag.String</code> などで *string 型への変換が必要です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">params := user.NewPostUserParamsWithContext(ctx).</span><br><span class="line">WithHTTPClient(hc).</span><br><span class="line">WithUserID(userID).</span><br><span class="line">WithBody(&amp;models.PostUser&#123;</span><br><span class="line">Name:          swag.String(<span class="string">"未来太郎"</span>),</span><br><span class="line">MemberType:    swag.String(<span class="string">"一般会員"</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="17-クライアントコードでホスト名やBASE-PATHを書き換えたい"><a href="#17-クライアントコードでホスト名やBASE-PATHを書き換えたい" class="headerlink" title="17. クライアントコードでホスト名やBASE_PATHを書き換えたい"></a>17. クライアントコードでホスト名やBASE_PATHを書き換えたい</h2><p>Swaggerに記載するホスト名と開発中のホスト名は異なるため、書き換えが必要です。また、URLの基底となるパスですが、 <code>/v1</code> などを設定することが一般的だと思います。一方で、ロードバランサやAPIゲートウェイの仕様のため、本番環境では別の基底パスを追加したいときがあると思います。そうすると、ローカルで利用したいURLと差異がでるため、差異を吸収する設定が必要です。</p><p><code>gen/{project name}_client.go</code> にあるクライアントの <code>HTTPClientWithConfig</code> を書き換えます。</p><figure class="highlight go"><figcaption><span>ホスト名やBASE_PATHの書き換え</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/future-architect/&#123;project name&#125;/gen/client"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">api = client.NewHTTPClientWithConfig(<span class="literal">nil</span>, &amp;client.TransportConfig&#123;</span><br><span class="line">Host:     os.Getenv(<span class="string">"API_HOST"</span>), </span><br><span class="line">BasePath: os.Getenv(<span class="string">"BASE_PATH"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err := api.user.GetUserContract(user.NewGetUserParamsWithContext(ctx).WithUserID(userID)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Errorf(<span class="string">"getUserContract: %s"</span>, err.Error()) <span class="comment">//=&gt;  getUserContract: &#123;resp:0xc0005325a0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もし、Swaggerの設定そのままのホスト名やBASE_PATHを利用するのであれば、Defaultクライアントを利用もできます。</p><figure class="highlight go"><figcaption><span>デフォルト設定のままの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _, err := client.Default.user.GetUserContract(user.NewGetUserParamsWithContext(ctx).WithUserID(userID)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Errorf(<span class="string">"getUserContract: %s"</span>, err.Error()) <span class="comment">//=&gt;  getUserContract: &#123;resp:0xc0005325a0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この辺りの作り込みは上手く環境変数など外部プロパティで切り替えられるようにしておきたいですね。</p><h2 id="18-単体テストの話"><a href="#18-単体テストの話" class="headerlink" title="18. 単体テストの話"></a>18. 単体テストの話</h2><p>go-swaggerのサーバサイドの単体テストは、Goの関数呼び出しと同様に実現できます。レスポンスに関しては <code>httptest.NewRecorder()</code> を利用するとヘッダ・ボディなど全て取得できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"github.com/Cside/jsondiff"</span></span><br><span class="line"><span class="string">"github.com/&lt;your repo&gt;/&lt;project name&gt;/server/gen/models"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">params := installation.NewAttachParams()</span><br><span class="line">params.HTTPRequest = httptest.NewRequest(<span class="string">"GET"</span>, <span class="string">"http://example.com"</span>, <span class="literal">nil</span>)</span><br><span class="line">params.UserID= <span class="string">"0001"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 🔎🔎Test Func🔎🔎</span></span><br><span class="line">resp := GetUser(params)</span><br><span class="line"></span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line">resp.WriteResponse(w, runtime.JSONProducer())</span><br><span class="line"></span><br><span class="line">want := <span class="keyword">struct</span> &#123;</span><br><span class="line">status  <span class="keyword">int</span></span><br><span class="line">body    <span class="keyword">string</span></span><br><span class="line">&#125; &#123;</span><br><span class="line">status: <span class="number">200</span>,</span><br><span class="line">body: <span class="string">`&#123;"id":"0001", "name":"未来太郎"&#125;`</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> strconv.Itoa(w.Result().StatusCode) != want.status &#123;</span><br><span class="line">t.Errorf(<span class="string">"status want %v got %v"</span>, want.status, w.Result().StatusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> diff := jsondiff.Diff(want.body, w.Body.Bytes()); diff != <span class="string">""</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"case %v body diff:\n%s"</span>, c.name, diff)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>レスポンスボディのチェックは、jsondiffというパッケージを利用していますが、他にも色々な方法があると思いますので、要件に合わせて書き換えて下さい。他のGoのテストの考え方と特に変わらないのは嬉しいですね。</p><h2 id="19-Lambdaで動かしたい"><a href="#19-Lambdaで動かしたい" class="headerlink" title="19. Lambdaで動かしたい"></a>19. Lambdaで動かしたい</h2><p>go-swaggerのサーバですが、<a href="https://github.com/go-swagger/go-swagger/issues/962#issuecomment-478382896" target="_blank" rel="noopener">実はAWS Lambdaでも動かせます</a>。<code>httpadapter</code> というパッケージを利用することで、API Gatewayの<code>events.APIGatewayProxyRequest</code> といったイベントを、go-swaggerのリクエストである <code>*http.Request</code> に変換してくれます。コードは下記のようなイメージです。</p><figure class="highlight go"><figcaption><span>API-Gateway+Lambdaで動かす場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/awslabs/aws-lambda-go-api-proxy/httpadapter"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/loads"</span></span><br><span class="line"><span class="string">"github.com/&lt;your repo&gt;/&lt;project name&gt;/server/gen/restapi"</span></span><br><span class="line"><span class="string">"github.com/&lt;your repo&gt;/&lt;project name&gt;/server/gen/restapi/&lt;your app&gt;"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpAdapter *httpadapter.HandlerAdapter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">api := myApp.NewMyApplicationAPI(swaggerSpec)</span><br><span class="line">server := restapi.NewServer(api)</span><br><span class="line">server.ConfigureAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment">// see https://github.com/go-swagger/go-swagger/issues/962#issuecomment-478382896</span></span><br><span class="line">httpAdapter = httpadapter.New(server.GetHandler())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handler handles API requests</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(req events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> httpAdapter.Proxy(req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(Handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>起動速度がちょっと気になる..という方もいらっしゃるかと思いますが、とあるシステムの本番環境で、ほぼほぼ上記のコードを動かしていますが、気持ち10-20msくらいかかっているかも？といったレベルです。init関数で初期化した部分を、毎回のリクエストのたびに使いまわしているからだと思います。そこまでレイテンシを求められないシステムであれば、go-swaggerもドンドンLambdaに載せちゃって良いのでは？と私は考えています。</p><p>他のServlerless相当でgo-swaggerで動かしたい場合も、このコードを参考にサーバレス関数のイベントを、<code>*http.Request</code> に変換すれば動かすことができそうです。夢が広がりますね！</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>最初は3,4つのTipsをまとめて終わりにしようかと思いましたが、書いていると非常に長くなってしまいました。go-swaggerは良いプロダクトだと思うのですが、定義情報からコードを自動生成する関係上、どこまで何ができるのかイメージがつきにくかったり、そもそもOpenAPI（Swagger）の知識も必要のため敷居が高かったりと、最初はハマる箇所が多いからかも知れません。（さらにはサーバサイドとクライアントサイドの2種類のコードも生成できるためネタが増える..）</p><p>上手く使えば、WebAPI定義と実装が完全に一致する（定義からコードを生成しているため）で強力なツールだと思いますしオススメです。すでに使っている方にも今回のTipsを活用していただければ幸いです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a></li><li><a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIG(Technology Innovation Group)というフューチャーグループのIT技術を良い感じに推進する部署と、その中にあるDXユニットという、デジタルトランスフォーメーションに関わる仕事を主に推進していくチームのことです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">もちろん、echo派や生net/http派やその他の勢力もいます</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
      <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
  </entry>
  
  <entry>
    <title>Terraform Associate合格記</title>
    <link href="https://future-architect.github.io/articles/20200629/"/>
    <id>https://future-architect.github.io/articles/20200629/</id>
    <published>2020-06-29T01:03:42.000Z</published>
    <updated>2020-06-30T01:13:25.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXユニットの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤</a>です。今回は、5/24に受験したHashiCorpから出た資格の1つである、Terraform Associateを受験したときの記事になります。結果としては無事に合格したので、受験前、そして受験当日のことを今回取り扱おうと思います。私はTerraform以外にも準備が必要だったので、この記事がこれから受験する人の一助となれば幸いです。<br><img src="/images/20200629/1.png" class="img-small-size"></p><h1 id="本人のスペック"><a href="#本人のスペック" class="headerlink" title="本人のスペック"></a>本人のスペック</h1><p>まず、はじめに受験者の私についてです。（読み飛ばしていただいて良いです）</p><ul><li>Terraform歴: 9ヶ月</li><li>他の資格: <ul><li>AWS Solution Architect Associate</li><li>Google Cloud Certified: Professional Cloud Architect</li></ul></li><li><strong>英語</strong><ul><li>そこそこ読めるけど、話す経験はほとんどない（海外経験なし）</li></ul></li></ul><p>私はフューチャーに入社して以来GCP+Terraformというコンビでインフラの作成および管理を行っていました。途中で、Google CloudのProfessional Cloud Architectを取得して、今回が2個目の資格チャレンジになります。後述しますが試験の言語が英語なので、私にとってはある意味１番のネックでした。そのため、英語の大事さを痛感した試験にもなっています。</p><h1 id="HashiCorp-Certified-Terraform-Associate-とは"><a href="#HashiCorp-Certified-Terraform-Associate-とは" class="headerlink" title="HashiCorp Certified: Terraform Associate とは"></a>HashiCorp Certified: Terraform Associate とは</h1><p>そもそもこの試験の内容についてざっくり中身を出しておきます。</p><table><thead><tr><th></th><th>内容</th></tr></thead><tbody><tr><td>言語</td><td>英語</td></tr><tr><td>受験方法</td><td>オンライン</td></tr><tr><td>試験費用</td><td>$70.50 USD</td></tr><tr><td>試験時間</td><td>１時間</td></tr><tr><td>有効期間</td><td>2年間</td></tr></tbody></table><p>受験方法は自宅からオンラインで受けられます。AWSやGCPの試験を受けたことがある方は、受験会場で画面に向かって受ける試験を自宅で行うものと考えてもらえれば良いです。試験内容は、IaCの一般的な知識から始まり、Terraformで使えるFunctionとかコマンドの挙動など概要から実践的な部分まで広く出題されます。HashiCorpから事前に<a href="https://learn.hashicorp.com/terraform/certification/terraform-associate-sample-questions" target="_blank" rel="noopener">サンプル問題</a>が提供されているので、出題形式を押さえるという意味で見ておくことをお勧めします。</p><h1 id="試験対策"><a href="#試験対策" class="headerlink" title="試験対策"></a>試験対策</h1><p>私が試験を受けるまでに行った対策と言えるものは以下になります。</p><ul><li><a href="https://learn.hashicorp.com/terraform/certification/terraform-associate-review" target="_blank" rel="noopener">Exam Review - Terraform Associate Certification</a></li><li><a href="https://www.udemy.com/course/terraform-associate-practice-exam/" target="_blank" rel="noopener">HashiCorp Certified: Terraform Associate Practice Exam</a></li></ul><p>試験ガイドはこれからTerraformの全容を知りたい人向けの<a href="https://learn.hashicorp.com/terraform/certification/terraform-associate-study-guide" target="_blank" rel="noopener">Study Guide</a>と、そこそこTerraformに親しみのある人向けのExam Reviewと2種類あります。私はそれなりに使ってきたぞと、自負していたので、Exam Reviewから入りました。ドキュメントの内容は試験項目別になっているので、自分が弱いと思ったところを重点的に読んだり、Function周りがまだ使い慣れていないものもあったので、<code>terraform console</code>などで一通り実行して色々試してみました。<br>また、Udemyの試験問題は、知識の抜け漏れがないか確かめるために買いましたが、これは結構役に立つ内容でした。1回解いて、答えを見て腹落ちするまでドキュメントなども見ながら理解を深めることをひたすら行いました。ついでに英語で読む癖をつけられたのもよかったことかなと思います。<br>また、TerraformとVaultとの関わりも深くまでは調べなくても、組み合わせ方は知っておいた方が良さそうでした。</p><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>試験を受けるまでの流れをここでは説明していきます。少し面倒でした。</p><h2 id="申し込み"><a href="#申し込み" class="headerlink" title="申し込み"></a>申し込み</h2><p><a href="https://www.hashicorp.com/certification/terraform-associate/" target="_blank" rel="noopener">試験概要</a>のページから申し込みます。試験自体はQuestionmarkというところが代理で行うようです。順を追っていくことで、アカウントの登録や試験ができるようになっています。試験の購入については現段階では</p><ul><li>Terraform Associate</li><li>Vault Associate</li></ul><p>の2つが購入可能です。Terraform Associateの試験を購入して、決済まで完了すると、試験時間の設定ができます。ここで結構不安だったのが、受験時の時間です。試験の選択時間はプロフィールで設定できる居住地やタイムゾーンに依存するので、試験時間を選択する前にプロフィールを確認してJSTにしておきましょう。試験官がアメリカのため、日本だと大体21時以降や、6~10時などが受験可能時間として出てきます。私は午前10時からの枠を選択しました。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>パソコン自体は順当にMacやWindowsなら受験が可能で、Webカメラやマイクがきちんと使えることを事前に確認しておくとよいでしょう。ノートPCの人はデュアルディスプレイには出来ないので、ノートPC1台と本人確認に必要なパスポートを残して机のものをすべておろしておくくらいが精神衛生上でも良いかなと思います。部屋の中はそこまで見せる必要はありませんが、他の人が絶対に入らない環境が求められますので、家族などには事前に受けることを周知しておきましょう。</p><h1 id="当日"><a href="#当日" class="headerlink" title="当日"></a>当日</h1><p>当日は試験時間の15分くらい前から試験を申し込んだページで試験の準備を進められます。ここからはリスニングとスピーキングを求められるので、私は受ける前になかなか頭を使ってしまいました。順当に試験の事前準備出来ているか（パスポートでの本人確認や机のものの整理具合)かどうかを聞かれるので、言われるがまま(あまり聞き取れてはいないのですが)進めると、試験を開始できます。<br>試験時間は1時間ですが、私はほとんど見直す時間がありませんでした。とりあえず、分かる問題はどんどん答えていって、あとで分からない問題に時間を使う方針で進みました。英語読むことに対して、今までで一番集中力を使った気がします。<br>試験を終えるとすぐに結果発表があり、そのあとはアンケートに答えます。これも終えると、試験官より声かけられて一連の流れが終わりになります。</p><h1 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h1><p>無事合格しました。スコアを見ると他の合格体験記と見比べて割とギリギリだったようです。今までAWSやらGCPやら受けてきましたが、また違った緊張感でした。試験終了直後は受かったというメールのみ来て、10日くらいあけるとデジタルバッジが来ます。やはり、何かしら形になるのは嬉しいですね。<br>合格してから数日でデジタルバッジが取得できるので、より実感が湧きます。素直に嬉しかったです。<br><img src="/images/20200629/photo_20200629_01.png" class="img-middle-size" style="border:solid 1px #000000"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>試験が出されてから1ヶ月で受けましたが、とりあえず合格してよかったなという気持ちが大きく、ホッとしています。また、初の英語での受験でしたが、なんとか終えられて、個人的には結構自信がつきました。Terraformは私が触っていてとても好きなものの一つなので、勉強しながら好きなものの知識を深められることが嬉しかったです。とはいえ知識も経験もまだまだなので、これからも新しいことに挑戦しつつ、出来ることの裾野を広げられたらなと思います。<br>あと、英語は本当に大事であると感じたので、英語もやろうと思いました。<br>先日、<a href="/articles/20200624/">Terraformの入門記事</a>も書きましたので、これからTerraform Associateを受験しようという方は参考にしてみてください。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="/tags/Terraform/">技術ブログ Terraform一覧</a></li></ul><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="/articles/20190530/">【合格記】GCP Professional Cloud Architect認定資格を振り返る</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG/DXユニットの&lt;a href=&quot;https://twitter.com/kaedemalu&quot; targe
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>MLflowで実験管理入門</title>
    <link href="https://future-architect.github.io/articles/20200626/"/>
    <id>https://future-architect.github.io/articles/20200626/</id>
    <published>2020-06-26T01:08:23.000Z</published>
    <updated>2020-06-26T02:25:36.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、Strategic AI Group(SAIG)の山野です。</p><p>今回は、<strong>機械学習の実験管理</strong>をテーマにMLflowについて紹介します。</p><h2 id="1-実験管理の必要性"><a href="#1-実験管理の必要性" class="headerlink" title="1. 実験管理の必要性"></a>1. 実験管理の必要性</h2><p>モデル開発では、様々な条件で大量の実験を時には複数人で回していくことがありますが、徐々に管理し切れなくなり、後から（必要に迫られて）<strong>もう一度その実験を再現しようと思ってもできなくて困る</strong>、ということがあります。</p><p>つまり、実験が終わって数ヶ月後に「あの実験てどういう条件で実施してどういう結果出たんだっけ？+再現できる？」と聞かれても困らない状態を作れれば良いです。PoCが終わってプロダクション化のフェーズで、PoCの実験について確認されるケースが意外とあったりします。</p><p>管理すべき情報は、前処理・学習・評価それぞれで以下があります。</p><ul><li><strong>前処理</strong><ul><li>元データ &lt;-&gt; 前処理コード &lt;-&gt; 加工済データ</li></ul></li><li><strong>学習</strong><ul><li>加工済みデータ（学習用） &lt;-&gt; 学習コード、ハイパーパラメータ &lt;-&gt; モデル</li></ul></li><li><strong>評価</strong><ul><li>加工済みデータ（評価用） &lt;-&gt; 評価コード &lt;-&gt; モデル &lt;-&gt; 評価結果（サマリ表、画像出力結果など）</li></ul></li></ul><h2 id="2-MLflowとは"><a href="#2-MLflowとは" class="headerlink" title="2. MLflowとは"></a>2. MLflowとは</h2><p><a href="https://mlflow.org/" target="_blank" rel="noopener">MLflow</a> は、<strong>実験、再現性、デプロイメント、セントラルモデルレジストリ</strong>など、MLライフサイクルを管理するためのオープンソースのプラットフォームです。MLflowは現在、4つのコンポーネントを提供しています。</p><ol><li>MLflow Tracking</li><li>MLflow Projects</li><li>MLflow Models</li><li>Model Registry</li></ol><p>今回は、実験管理を効率化してくれる1の<strong>MLflow Tracking</strong>についてと、それをどう使っているかを記載します。</p><h2 id="3-MLflowを使った理由"><a href="#3-MLflowを使った理由" class="headerlink" title="3. MLflowを使った理由"></a>3. MLflowを使った理由</h2><ul><li>実験管理をライトに始めることができる<ul><li>MLflow本体には様々な機能があるが、目的に応じてライトに始めることができます。（「5. MLflowのシンプルな使い方」参照）</li></ul></li><li>リッチなUIで実験結果を確認することができる</li><li>OSSであり、自分でサーバを立てることができる<ul><li>他のツールでは、サービスとして提供されており、サーバ管理不要だがアカウント登録やデータ送信の必要がある場合があります</li></ul></li><li>実験管理ツールとして広く使われている<ul><li>GitHubスター数6.8k（2020.6.25時点）</li></ul></li></ul><h2 id="4-MLflowのアーキテクチャ"><a href="#4-MLflowのアーキテクチャ" class="headerlink" title="4. MLflowのアーキテクチャ"></a>4. MLflowのアーキテクチャ</h2><p><a href="https://blog.hoxo-m.com/entry/mlflow_store" target="_blank" rel="noopener">MLflowのデータストアを覗いてみる</a>に分かりやすく詳しく記載されています。</p><ul><li>Run<ul><li>一回の試行（実験、学習、前処理、etc）</li></ul></li><li>Experiment<ul><li>Runを束ねるグループ</li><li>格納先は、ローカルファイル or HTTPリモートサーバ or DB</li></ul></li><li>Artifact<ul><li>Runで得られた出力や中間生成物の保管先</li><li>格納先は、ローカルファイル or S3</li></ul></li></ul><img src="/images/20200626/1.png"><img src="/images/20200626/2.png"><h2 id="5-MLflowのシンプルな使い方"><a href="#5-MLflowのシンプルな使い方" class="headerlink" title="5. MLflowのシンプルな使い方"></a>5. MLflowのシンプルな使い方</h2><p>pipでインストールしたら、あとはlogger感覚で記録したい値を設定するだけです。<br>※MLflow Tracking Serverを別途立てず、ローカルに保存・確認する場合。</p><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p>pipを用いてmlflowをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install mlflow</span><br></pre></td></tr></table></figure><h3 id="実装例"><a href="#実装例" class="headerlink" title="実装例"></a>実装例</h3><ul><li>start_run<ul><li>runIDを発行する</li></ul></li><li>log_param<ul><li>パラメータを記録する</li></ul></li><li>log_metric<ul><li>メトリックを記録する（ステップごとに）</li></ul></li><li>log_artifact<ul><li>生成物を記録する</li><li>UIからディレクトリ・ファイルの中身を確認できる</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mlflow</span><br><span class="line">mlflow.start_run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log a parameter (key-value pair)</span></span><br><span class="line">mlflow.log_param(<span class="string">"param1"</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log a metric; metrics can be updated throughout the run</span></span><br><span class="line">mlflow.log_metric(<span class="string">"foo"</span>, <span class="number">2</span>, step=<span class="number">1</span>)</span><br><span class="line">mlflow.log_metric(<span class="string">"foo"</span>, <span class="number">4</span>, step=<span class="number">2</span>)</span><br><span class="line">mlflow.log_metric(<span class="string">"foo"</span>, <span class="number">6</span>, step=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log an artifact (output file)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"output.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"Hello world!"</span>)</span><br><span class="line">mlflow.log_artifact(<span class="string">"output.txt"</span>)</span><br><span class="line"></span><br><span class="line">mlflow.end_run()</span><br></pre></td></tr></table></figure><ul><li>-&gt; UIで実験結果を確認することができる。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mlflow ui</span><br><span class="line"><span class="comment"># -&gt; http://localhost:5000</span></span><br></pre></td></tr></table></figure><img src="/images/20200626/3.png" style="border:solid 1px #000000"><img src="/images/20200626/4.png" style="border:solid 1px #000000"><h2 id="6-MLflowの実践的な使い方"><a href="#6-MLflowの実践的な使い方" class="headerlink" title="6. MLflowの実践的な使い方"></a>6. MLflowの実践的な使い方</h2><p>MLflowを実際に使うときによくやること。</p><h3 id="6-1-MLflow-Tracking-Serverを実験サーバと別で立てる"><a href="#6-1-MLflow-Tracking-Serverを実験サーバと別で立てる" class="headerlink" title="6-1. MLflow Tracking Serverを実験サーバと別で立てる"></a>6-1. MLflow Tracking Serverを実験サーバと別で立てる</h3><p>Experimentの格納方式にHTTPサーバー(MLflow Tracking Server)を指定します。</p><h4 id="設定内容（Server側）"><a href="#設定内容（Server側）" class="headerlink" title="設定内容（Server側）"></a>設定内容（Server側）</h4><p>pipを利用してインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install mlflow</span><br></pre></td></tr></table></figure><p>MLflow Tracking Server起動します。</p><ul><li>UIのデフォルトポートは5000</li><li>backend-store-uri: 連携されてきたデータの格納先</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line">$ mkdir mlflow</span><br><span class="line">$ <span class="built_in">cd</span> mlflow</span><br><span class="line">$ mlflow server --backend-store-uri ./mlruns --host 0.0.0.0 &amp;</span><br></pre></td></tr></table></figure><h4 id="設定内容（Client側）"><a href="#設定内容（Client側）" class="headerlink" title="設定内容（Client側）"></a>設定内容（Client側）</h4><p>環境変数exportします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> MLFLOW_TRACKING_URI=http://&lt;MLflow Server IP&gt;:5000</span><br></pre></td></tr></table></figure><h3 id="6-2-アウトプットの保存先として、S3と連携する"><a href="#6-2-アウトプットの保存先として、S3と連携する" class="headerlink" title="6-2. アウトプットの保存先として、S3と連携する"></a>6-2. アウトプットの保存先として、S3と連携する</h3><h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><ul><li>Artifactの格納方式にS3を指定する</li><li>Artifactのファイルサイズが大きい場合、S3に格納するとよい</li><li>S3に格納しても、Artifacts Viewerで中身を確認することは可能</li><li>別途、Server側・Clinet側の双方でS3アクセス用のIAMを設定しておく必要あり</li></ul><h4 id="設定内容"><a href="#設定内容" class="headerlink" title="設定内容"></a>設定内容</h4><ul><li>boto3をServer側・Clinet側の双方でインストールしておきます</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install boto3</span><br></pre></td></tr></table></figure><ul><li>experimentsを作成時に格納先を指定します</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mlflow experiments create -n experiment_a -l s3://&lt;my-bucket&gt;/mlruns/experiment_a</span><br></pre></td></tr></table></figure><ul><li>-&gt; run時にexperimentsを指定する。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mlflow.start_run(experiment_id=<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><h3 id="6-3-log-artifactを非同期に実行する"><a href="#6-3-log-artifactを非同期に実行する" class="headerlink" title="6-3. log_artifactを非同期に実行する"></a>6-3. log_artifactを非同期に実行する</h3><p>Artifactのファイルサイズが大きい場合、非同期で実行させます。</p><h4 id="設定内容-1"><a href="#設定内容-1" class="headerlink" title="設定内容"></a>設定内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mlflow</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mlflow_log_artifact_async</span><span class="params">(artifact, run_id)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">_log_artifact</span><span class="params">(artifact, run_id)</span>:</span></span><br><span class="line">        mlflow.start_run(run_id=run_id)</span><br><span class="line">        mlflow.log_artifact(artifact)</span><br><span class="line">        mlflow.end_run()</span><br><span class="line"></span><br><span class="line">    asyncio.ensure_future(_log_artifact(artifact, run_id))</span><br><span class="line">    <span class="keyword">return</span> artifact, run_id</span><br><span class="line"></span><br><span class="line">run_info = mlflow.start_run(experiment_id=<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"output.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"Hello world!"</span>)</span><br><span class="line"></span><br><span class="line">run_id = run_info.info.run_id</span><br><span class="line">result = mlflow_log_artifact_async(<span class="string">"output.txt"</span>, run_id)</span><br><span class="line">mlflow.end_run()</span><br></pre></td></tr></table></figure><h3 id="6-4-実験の再現に必要な項目を連携する"><a href="#6-4-実験の再現に必要な項目を連携する" class="headerlink" title="6-4. 実験の再現に必要な項目を連携する"></a>6-4. 実験の再現に必要な項目を連携する</h3><p>実験の再現に必要な項目を、実験ごとに予め定義しておきます。</p><h4 id="設定内容-2"><a href="#設定内容-2" class="headerlink" title="設定内容"></a>設定内容</h4><table><thead><tr><th>連携する項目</th><th>連携に使うメソッド</th></tr></thead><tbody><tr><td>実行時刻</td><td>run発行時に自動で連携される</td></tr><tr><td>実行ファイル名</td><td>mlflow.set_tag(‘mlflow.source.name’, filename)</td></tr><tr><td>実行ファイルcommitID</td><td>mlflow.set_tag(‘mlflow.source.git.commit’, commit_id)</td></tr><tr><td>実験の説明</td><td>mlflow.set_tag(‘mlflow.note.content’, DISCRIPTION)</td></tr><tr><td>Inputデータ</td><td>mlflow.log_param(“INPUT_DATA_PATH_S3”, INPUT_DATA_PATH_S3)</td></tr><tr><td>Outputデータ</td><td>mlflow.log_param(“OUTPUT_DATA_PATH_S3”, OUTPUT_DATA_PATH_S3)</td></tr><tr><td>パラメータ</td><td>mlflow.log_param(“IMAGE_SIZE”, IMAGE_SIZE)</td></tr><tr><td>メトリック</td><td>mlflow.log_metric(“foo”, 2, step=1)</td></tr><tr><td>実行結果HTML</td><td>mlflow.log_artifact(output_reports_file_path_local)</td></tr><tr><td>※スクリプトファイルの場合は、「実行ファイル名」「実行ファイルcommitID」は自動で連携される。</td><td></td></tr></tbody></table><h3 id="6-5-すでにExcelにて実験結果を管理している場合は、移行（インポート）する"><a href="#6-5-すでにExcelにて実験結果を管理している場合は、移行（インポート）する" class="headerlink" title="6-5. すでにExcelにて実験結果を管理している場合は、移行（インポート）する"></a>6-5. すでにExcelにて実験結果を管理している場合は、移行（インポート）する</h3><p>Excelですでにまとめている内容を、MLflowに移行（インポート）します。</p><h4 id="設定内容-3"><a href="#設定内容-3" class="headerlink" title="設定内容"></a>設定内容</h4><ul><li>元ファイル例<ul><li>二行目にタイプ（parameter/metric/tag）を追記しておく。</li></ul></li></ul><img src="/images/20200626/5.png"><p>移行スクリプト例を載せます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mlflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># csv読み込み</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">'./experiment_list.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># csvデータをMLflowへインポート</span></span><br><span class="line"><span class="keyword">for</span> row_index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    <span class="comment"># 1行ずつ処理</span></span><br><span class="line">    <span class="comment"># 1行目はタイプを書いているので、スキップ</span></span><br><span class="line">    <span class="keyword">if</span> row_index &gt;= <span class="number">1</span>:</span><br><span class="line">        run_info = mlflow.start_run(experiment_id=<span class="string">'1'</span>)</span><br><span class="line">        <span class="comment"># 1行の中の1列ずつMlflowに連携</span></span><br><span class="line">        <span class="keyword">for</span> column_index <span class="keyword">in</span> range(len(row)):</span><br><span class="line">            <span class="keyword">if</span> df.iat[<span class="number">0</span>, column_index] == <span class="string">'parameter'</span>:</span><br><span class="line">                mlflow.log_param(df.columns[column_index], row[column_index])</span><br><span class="line">            <span class="keyword">elif</span> df.iat[<span class="number">0</span>, column_index] == <span class="string">'metric'</span>:</span><br><span class="line">                mlflow.log_metric(df.columns[column_index], float(row[column_index]))</span><br><span class="line">            <span class="keyword">elif</span> df.iat[<span class="number">0</span>, column_index] == <span class="string">'tag'</span>:</span><br><span class="line">                mlflow.set_tag(df.columns[column_index], row[column_index])</span><br><span class="line">        mlflow.end_run()</span><br></pre></td></tr></table></figure><h4 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h4><img src="/images/20200626/6.png"><h3 id="6-6-過去の特定の試行結果（run）と比較する"><a href="#6-6-過去の特定の試行結果（run）と比較する" class="headerlink" title="6-6. 過去の特定の試行結果（run）と比較する"></a>6-6. 過去の特定の試行結果（run）と比較する</h3><p>過去の特定の試行結果(ベースラインとしたい結果など)と比較します。ベースラインとしたい試行にtagを打っておきます。</p><p>設定内容です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 今回の試行でのacc</span></span><br><span class="line">acc = <span class="number">0.15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 過去の試行でのaccを取得</span></span><br><span class="line"><span class="comment"># 下記では、タグでnum_traialに1を指定しておいた試行から取得</span></span><br><span class="line">num_trial_target = <span class="string">'1'</span></span><br><span class="line">run_result = mlflow.search_runs(experiment_ids=<span class="number">1</span>)</span><br><span class="line">acc_target = float(run_result[run_result[<span class="string">'tags.num_traial'</span>] == num_trial_target][<span class="string">"metrics.acc"</span>])</span><br><span class="line"><span class="comment"># acc_target: 0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 過去の試行との比較</span></span><br><span class="line">rate_improve = acc  / acc_target</span><br></pre></td></tr></table></figure><h3 id="6-7-実験結果をチャットに通知する"><a href="#6-7-実験結果をチャットに通知する" class="headerlink" title="6-7. 実験結果をチャットに通知する"></a>6-7. 実験結果をチャットに通知する</h3><p>runが完了したタイミングで、実験結果をチャットに通知させます。</p><p>設定内容です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start mlflow run</span></span><br><span class="line">run_info = mlflow.start_run(experiment_id=&lt;experiment_id&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># （省略）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get mlflow run result for notify</span></span><br><span class="line">run_result_dict = mlflow.get_run(run_info.info.run_id).to_dictionary()</span><br><span class="line">run_result_str = json.dumps(run_result_dict, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># notify chats</span></span><br><span class="line">WEBHOOK_URI = <span class="string">'&lt;WEBHOOK_URI&gt;'</span></span><br><span class="line"></span><br><span class="line">response = requests.post(</span><br><span class="line">    WEBHOOK_URI,</span><br><span class="line">    json=&#123;<span class="string">"text"</span>: run_result_str&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># end mlflow run</span></span><br><span class="line">mlflow.end_run()</span><br></pre></td></tr></table></figure><h2 id="7-他の実験管理ツール"><a href="#7-他の実験管理ツール" class="headerlink" title="7. 他の実験管理ツール"></a>7. 他の実験管理ツール</h2><ul><li><a href="https://github.com/allegroai/trains" target="_blank" rel="noopener">Trains</a><ul><li>“Auto-Magical Experiment Manager &amp; Version Control for AI”</li></ul></li><li><a href="https://www.wandb.com" target="_blank" rel="noopener">Weights and Biases</a><ul><li>“Developer tools for machine learning”</li></ul></li><li><a href="https://www.comet.ml/site/" target="_blank" rel="noopener">comet</a><ul><li>“Comet provides a self-hosted and cloud-based meta machine learning platform allowing data scientists and teams to track, compare, explain and optimize experiments and models.”</li></ul></li><li><a href="https://neptune.ai" target="_blank" rel="noopener">neptune</a><ul><li>“The most lightweight experiment management tool that fits any workflow”</li></ul></li><li><a href="https://github.com/ex4sperans/mag" target="_blank" rel="noopener">mag</a><ul><li>“mag is a very simple but useful library with primary goal to remove the need of custom experiment tracking approaches most people typically use. The focus is on reproducibility and removing boilerplate code.”</li></ul></li></ul><h2 id="8-参考"><a href="#8-参考" class="headerlink" title="8. 参考"></a>8. 参考</h2><ul><li><a href="https://mlflow.org" target="_blank" rel="noopener">MLflow</a></li><li><a href="https://docs.databricks.com/applications/mlflow/tracking.html" target="_blank" rel="noopener">Databricks Documentation-MLflow</a></li><li><a href="https://blog.hoxo-m.com/entry/mlflow_store" target="_blank" rel="noopener">MLflowのデータストアを覗いてみる</a></li><li><a href="https://towardsdatascience.com/5-tips-for-mlflow-experiment-tracking-c70ae117b03f" target="_blank" rel="noopener">5 Tips for MLflow Experiment Tracking</a></li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回は、実験管理ツールとして、MLflowをご紹介させていただきました。<br>実験管理以外にも、学習基盤・パイプラインツール・CI/CDなどなども知見が貯まりつつあるので、また別の機会にご紹介できればと思います。</p><p>本記事は同じチームの真鍋さんにレビューしていただきました。真鍋さん、ありがとうございました！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、Strategic AI Group(SAIG)の山野です。&lt;/p&gt;
&lt;p&gt;今回は、&lt;strong&gt;機械学習の実
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
      <category term="MLOps" scheme="https://future-architect.github.io/tags/MLOps/"/>
    
      <category term="MLflow" scheme="https://future-architect.github.io/tags/MLflow/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #19 Chromeの拡張機能作ってみた！</title>
    <link href="https://future-architect.github.io/articles/20200625/"/>
    <id>https://future-architect.github.io/articles/20200625/</id>
    <published>2020-06-25T01:34:33.000Z</published>
    <updated>2020-06-29T01:49:20.030Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200625/top.png" class="img-small-size"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャーに入社して約半年が経ちました。CSIGの谷田です。</p><p>現在業務では直接開発をする機会はないのですが、業務の合間を縫って日々プログラミングを勉強中です。そんな中、お世話になっている先輩から手始めに、Google Chromeの拡張機能の作成方法を教えて頂いたので、拡張機能の作成方法入門を書いていこうと思います。</p><p>作成方法自体はとっても簡単なので、ぜひ皆様もやってみてください！</p><h1 id="拡張機能とは"><a href="#拡張機能とは" class="headerlink" title="拡張機能とは"></a>拡張機能とは</h1><p>Webページの閲覧や情報の検索に使用するブラウザに、自身で選んだ機能を追加することで、日常業務や作業を効率化して、便利にしてくれるものです。</p><p>皆さんもお気に入りのものを追加して日々の業務で使用されているのではないでしょうか？拡張機能はChrome以外のブラウザ（IE、Firefox等）でも存在し、アドオンとかextensionという言い方もしますよね。</p><p>この拡張機能、Google Storeから好きなものを追加できますが、自分で作成することもできるのです。</p><ul><li>What are extensions?: <a href="https://developer.chrome.com/extensions" target="_blank" rel="noopener">https://developer.chrome.com/extensions</a></li><li>拡張機能とは何か？: <a href="https://developer.mozilla.org/ja/docs/Mozilla/Add-ons/WebExtensions/What_are_WebExtensions" target="_blank" rel="noopener">https://developer.mozilla.org/ja/docs/Mozilla/Add-ons/WebExtensions/What_are_WebExtensions</a></li></ul><h1 id="用意する物"><a href="#用意する物" class="headerlink" title="用意する物"></a>用意する物</h1><p>以下のファイルは、manifest.jsonファイルへのパスの記載が楽なので同一フォルダに入れます（今回は/desktop/Myextension）。manifest.jsonとは、拡張機能の仕様を書くファイルのことです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">desktop</span><br><span class="line">   └ Myextension</span><br><span class="line">       ├ manifest.json      <span class="comment"># 拡張機能の仕様を記載するファイル</span></span><br><span class="line">       ├ calendar.png       <span class="comment"># アイコン</span></span><br><span class="line">       ├ calendar.html      <span class="comment"># 表示したい画面、今回はカレンダー</span></span><br><span class="line">       ├ calendar.css       <span class="comment"># 表示したい画面、今回はカレンダー</span></span><br><span class="line">       └ calendar.js        <span class="comment"># 表示したい画面、今回はカレンダー</span></span><br></pre></td></tr></table></figure><p>表示させるカレンダーは至って普通のもの。こちらのサイトを参考に作成しました。</p><ul><li><a href="https://qiita.com/kan_dai/items/b1850750b883f83b9bee" target="_blank" rel="noopener">JavaScriptでカレンダーを自作したら勉強になった</a></li></ul><p>縦の軸と横の軸を考えて、毎月曜日や日にちが変わる状況で、土日祝日も反映させるにはどうすればいいか..？など頭を使いますが、for文とif文の練習になりますよ！</p><p>JavaScriptの基本から勉強するには、MDNのこちらのサイトがおすすめです。</p><ul><li><a href="https://developer.mozilla.org/ja/docs/Learn/JavaScript/Building_blocks/conditionals" target="_blank" rel="noopener">https://developer.mozilla.org/ja/docs/Learn/JavaScript/Building_blocks/conditionals</a></li></ul><p>以上！！</p><h2 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h2><p>さて、ここで肝となるのがmanifest.jsonファイルですが、さっそくこちらの中身を見ていきましょう。</p><figure class="highlight json"><figcaption><span>manifest.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"calendar"</span>,</span><br><span class="line">  <span class="attr">"description"</span> : <span class="string">"calendar"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"browser_action"</span>: &#123;</span><br><span class="line">    <span class="attr">"default_icon"</span>: &#123;</span><br><span class="line">      <span class="attr">"16"</span>: <span class="string">"calendar.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"default_popup"</span>: <span class="string">"calendar.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下、今回記載した項目と簡単な説明です。</p><h3 id="name（必須）"><a href="#name（必須）" class="headerlink" title="name（必須）"></a>name（必須）</h3><p>拡張機能の名前を書きます。<br>ブラウザに追加した際に、拡張機能の管理画面にも名前として表示されます。</p><h3 id="discription（推奨）"><a href="#discription（推奨）" class="headerlink" title="discription（推奨）"></a>discription（推奨）</h3><p>必要に応じて拡張機能の説明を記載します。<br>なくても動作しますが、あったほうが分かりやすいです。</p><h3 id="version（必須）"><a href="#version（必須）" class="headerlink" title="version（必須）"></a>version（必須）</h3><p>拡張機能自体のバージョンを記載します。<br>最初なので1.0を記載しておきます。</p><h3 id="manifest-version（必須）"><a href="#manifest-version（必須）" class="headerlink" title="manifest_version（必須）"></a>manifest_version（必須）</h3><p>拡張機能で使用される manifest.json のバージョンを指定します。<br>現在のバージョンは2なので2を記載します。</p><h3 id="browser-action"><a href="#browser-action" class="headerlink" title="browser_action"></a>browser_action</h3><p>ツールバーに拡張機能を追加します。</p><h4 id="default-icon（推奨）"><a href="#default-icon（推奨）" class="headerlink" title="- default_icon（推奨）"></a>- default_icon（推奨）</h4><p>拡張機能を有効化した際に、ブラウザのツールバーに表示するアイコンを指定できます。16は、16px×16pxの大きさという意味です。</p><h4 id="default-popup"><a href="#default-popup" class="headerlink" title="- default_popup"></a>- default_popup</h4><p>アイコンをクリックすると、指定したファイルがポップアップとして表示されます。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>今回は、記載するのは上記だけです。</p><p>その他の項目の意味や詳細は、manifest.jsonの公式リファレンスも参考にしてみてください。</p><ul><li><a href="https://developer.chrome.com/extensions/manifest" target="_blank" rel="noopener">https://developer.chrome.com/extensions/manifest</a></li></ul><p>MDNにも詳しく載っています。</p><ul><li><a href="https://developer.mozilla.org/ja/docs/Mozilla/Add-ons/WebExtensions/manifest.json" target="_blank" rel="noopener">https://developer.mozilla.org/ja/docs/Mozilla/Add-ons/WebExtensions/manifest.json</a></li></ul><h2 id="Chrome拡張機能に追加"><a href="#Chrome拡張機能に追加" class="headerlink" title="Chrome拡張機能に追加"></a>Chrome拡張機能に追加</h2><p>ここまでできたら、実際に自分のChromeの拡張機能に追加していきます。<br>「右上のその他のアイコンを右クリック→その他のツール→拡張機能」を選択もしくは、URLバーに「chrome://extensions」と入力して拡張機能の管理画面を表示したら、右上のデベロッパーモードをオンにして、</p><img src="/images/20200625/photo_20200625_01.png" style="border:solid 1px #000000"><p>左上に出現する「パッケージ化されていない拡張機能を読み込む」を選択します。<br>ここで、作成した拡張機能が入っているフォルダ（今回は/desktop/Myextension）を選択すると追加できます。</p><p>ツールバーに”default_icon”で指定したカレンダーアイコンが表示され、クリックするとポップアップとしてカレンダーが表示されます。</p><p>注意点としては、拡張機能を編集したらその都度読み込みし直すことです。</p><img src="/images/20200625/photo_20200625_02.png" class="img-middle-size" style="border:solid 1px #000000"><p>ちなみに、以下のkuma.html、kuma.pngを同一フォルダに配置し、”default_popup”をkuma.htmlに変更すると、こうなります。</p><figure class="highlight html"><figcaption><span>kuma.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"kuma.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/20200625/kuma.png" class="img-middle-size" style="border:solid 1px #000000"><h2 id="jQueryを用いた拡張"><a href="#jQueryを用いた拡張" class="headerlink" title="jQueryを用いた拡張"></a>jQueryを用いた拡張</h2><p>次に、jQueryを使用して、指定した画面にカレンダーをが表示されるようにしてみました。<br><a href="https://jquery.com/" target="_blank" rel="noopener">https://jquery.com/</a><br>からjQueryをインストールし、同一フォルダにjquery.jsとして保存して、manifest.jsonを以下の様に記載します。</p><figure class="highlight json"><figcaption><span>manifest.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"calendar"</span>,</span><br><span class="line">  <span class="attr">"description"</span> : <span class="string">"calendar"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"browser_action"</span>: &#123;</span><br><span class="line">    <span class="attr">"default_icon"</span>: &#123;</span><br><span class="line">      <span class="attr">"16"</span>: <span class="string">"calendar.png"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"content_scripts"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"matches"</span>:[</span><br><span class="line">        <span class="string">"https://www.google.com/"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"css"</span>:[<span class="string">"calendar.css"</span>],</span><br><span class="line">      <span class="attr">"js"</span>:[<span class="string">"jquery.js"</span>,<span class="string">"calendar.js"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="content-scripts"><a href="#content-scripts" class="headerlink" title="content_scripts"></a>content_scripts</h3><p>配列で記載し、特定のウェブページのコンテキストで実行される拡張機能の一部を指定します。</p><h4 id="matches"><a href="#matches" class="headerlink" title="- matches"></a>- matches</h4><p>動作対象のURLを記載します。<br>今回は<a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com/</a><br>を開いたときに画面にカレンダーを表示する仕様です。<br>カレンダーを表示したいサイトのURLを記載します。</p><h4 id="css"><a href="#css" class="headerlink" title="- css"></a>- css</h4><p>動作させるcssファイルを記載します。</p><h4 id="js"><a href="#js" class="headerlink" title="- js"></a>- js</h4><p>動作させるjsファイルを記載します。ここにjquery.jsも記載します。</p><p><code>www.google.com</code> には、searchformというidのdivがあります。<br>calendar.jsに以下を追記し、<a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com/</a> を開いたときに、<code>www.google.com</code>のsearchformというidを持ったdivにcalendarというidを持ったdivが追加され、calendar.jsに記載されているカレンダーが表示されるようにします。</p><p>jQueryのappendメソッドは、要素を追加できるメソッドで、HTMLを直接指定することができます。</p><figure class="highlight js"><figcaption><span>calendar.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#searchform'</span>).append(<span class="string">`&lt;div id="calendar"&gt;&lt;/div&gt;`</span>)</span><br></pre></td></tr></table></figure><p>フォルダの中身は以下となります。上記により、calendar.htmlは不要となります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Myextension</span><br><span class="line">  ├ manifest.json <span class="comment"># 拡張機能の仕様を記載するファイル</span></span><br><span class="line">  ├ calendar.png  <span class="comment"># アイコン</span></span><br><span class="line">  ├ calendar.css  <span class="comment"># 表示したい画面、今回はカレンダー</span></span><br><span class="line">  ├ calendar.js   <span class="comment"># 表示したい画面、今回はカレンダー</span></span><br><span class="line">  └ jquery.js     <span class="comment"># wwww.google.comにdivを追加するために使用</span></span><br></pre></td></tr></table></figure><p>拡張機能を読み込み直し、”matches”で指定した<a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com/</a> を開くと、カレンダーを表示することができました。<br><img src="/images/20200625/photo_20200625_03.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>今回は以上です。いかがでしたでしょうか？</p><p>この基本を元に、他の動きも組み合わせて現在使用しているアプリのAPIと連携したりすると、便利な拡張機能が作成できるかもしれませんね！</p><p>何か便利な機能を思いついたときに、ぜひ”無いものは作って”みてください！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200625/top.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;フ
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="JSON" scheme="https://future-architect.github.io/tags/JSON/"/>
    
      <category term="ChromeExtension" scheme="https://future-architect.github.io/tags/ChromeExtension/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #18 Terraform 101</title>
    <link href="https://future-architect.github.io/articles/20200624/"/>
    <id>https://future-architect.github.io/articles/20200624/</id>
    <published>2020-06-24T02:44:35.000Z</published>
    <updated>2020-06-29T01:49:18.332Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200624/photo_20200624_01.png" class="img-middle-size"><p>こんにちは。TIG/DXユニットの伊藤です。本記事は<a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の第18弾になります。</p><p>今回はタイトルの通り、Terraformの入門記事です。Infrastructure as Code(IaC)のツールとしてはAWSからはCloudFormation、GCPからはDeployment Managerが出ています。Terraformは単一ツールで複数クラウドのリソースをコードで管理することができる、ということが大きなメリットであることは世に出ている他の記事でも言われています。</p><p>本記事では以前私がこの入門記事連載で上げた「<a href="https://future-architect.github.io/articles/20200602/">春の入門祭り 🌸 #02 Google Cloud Platform 101</a>」の内容を扱います。なので、今回はGCP+Terraformの組み合わせでリソースを実際にコード化するところが基本編、Terraform Cloudの導入をを応用編として書いていきます。長くなるかもですが、お付き合いください。</p><h1 id="Terraformについて"><a href="#Terraformについて" class="headerlink" title="Terraformについて"></a>Terraformについて</h1><p>はじめはTerraformの簡単な説明をしていきます。Terraformは、HashiCorp社が開発したInfrastructure as Code(IaC)のためのツールになります。<br>コード化していく中で以下の働きを理解しながら進めるとどんな風にTerraformが動いているかわかると思います。</p><ul><li>resource<ul><li>人が実際にリソースを作成する際に書くコード。作成後もコードを差分を適用することができる。</li></ul></li><li>tfstate<ul><li>実在するリソースの「あるべき状態」を定義しているファイル。コードの変更を適用するとtfstateもコードに即した状態になる。</li></ul></li><li>provider<ul><li>各クラウドのAPIをTerraformが実行するために必要なプラグイン。コードで定義して作成する時に必要。</li></ul></li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>Terraformを実行できる準備をしましょう。今回の記事の作成に当たっての実行環境は以下です。</p><ul><li>MacBook 16inch(2019)</li><li>OS: Catalina</li><li>Terraform version: 0.12.24</li><li>Editor: VS Code</li></ul><p>Terraformのインストールは、Macの方であれば、Homebrew経由でできます。なので、以下のコマンドで簡単に手に入ります。便利。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install terraform</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> terraform version <span class="comment"># Terraformのバージョン確認</span></span></span><br></pre></td></tr></table></figure><p>次にサービスアカウントと、キーを発行します。サービスアカウントキーは昨今<a href="https://note.com/munmun1234/n/n7515fef76041" target="_blank" rel="noopener">こんな記事</a>も出ていますので、気をつけましょう。<br>サービスアカウントの作成は、GCPのコンソール画面のハンバーガーメニューより、[IAMと管理]&gt;[サービスアカウント]からできます。何回か入力と次に進むを繰り返しますが、以下のように入力してください。</p><table><thead><tr><th>項目</th><th>内容</th></tr></thead><tbody><tr><td>サービスアカウント名</td><td>terraform</td></tr><tr><td>ロール</td><td>編集者(editor)</td></tr><tr><td>サービスアカウント管理ロール</td><td>自分の登録メールアドレス</td></tr></tbody></table><p>作成できたらこのサービスアカウントの詳細に行き、[鍵の追加]を行ってください。jsonかP12かを選択できますが、今回はjsonを選択します。自動でダウンロードされるので、今回はこのキー名を<code>credentials.json</code>と名前を変更して今回使用するTerraformのディレクトリに配置しておきましょう。<br>コード側でも一つ準備しておきます。<code>provider</code>と呼ばれる各クラウドのAPIをTerraformが叩くためのバイナリを指定します。以下のコードをTerraformを実行するディレクトリに準備してください。</p><figure class="highlight sh"><figcaption><span>provider.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">"google"</span> &#123;</span><br><span class="line">  project = <span class="string">"xxxxxxxxxx"</span> <span class="comment"># リソースを作成したいプロジェクトID</span></span><br><span class="line">  credentials = file(<span class="string">"credentials.json"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コードとサービスアカウントキーが準備できたら、以下のコマンドで、Terraformの準備をします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform init</span></span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Checking for available provider plugins...</span><br><span class="line">- Downloading plugin for provider "google" (hashicorp/google) 3.26.0...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">If you ever set or change modules or backend configuration for Terraform,</span><br><span class="line">rerun this command to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to do so if necessary.</span><br></pre></td></tr></table></figure><p>この<code>init</code>コマンドを実行することで<code>.terraform</code>ディレクトリが生成されています。このディレクトリ内に、定義されている<code>provider</code>やあとで出てくる<code>backend</code>など、Terraformのリソースではなく設定に関わる部分を初期化してくれます。なので、複数人でGit管理している時にも通常は<code>.terraform</code>ディレクトリは管理に入れないようにしましょう。<br>さて、これでリソースを作成する準備ができたので、いよいよTerraformを書いていきましょう！！</p><h1 id="基本編"><a href="#基本編" class="headerlink" title="基本編"></a>基本編</h1><p>入門記事からの再掲になりますが、以下の構成を基本編で行っていきます。手で組んでみてからの方が実際にTerraformが便利ということに気がつけるかもしれません。<br><img src="/images/20200624/photo_20200624_02.png"><br>まずは大枠のVPCやサブネットを作成してからGCEやNATなどを立てていきましょう。</p><h2 id="ネットワーク構築"><a href="#ネットワーク構築" class="headerlink" title="ネットワーク構築"></a>ネットワーク構築</h2><p>はじめにネットワークを構築しましょう。ここでは<a href="https://www.terraform.io/docs/providers/google/r/compute_network.html" target="_blank" rel="noopener">VPC</a>と<a href="https://www.terraform.io/docs/providers/google/r/compute_subnetwork.html" target="_blank" rel="noopener">サブネット</a>を構築します。Terraformはコード化する時にはドキュメント必須なので、是非公式のドキュメントも読んでみてください。ネットワークについては、以下のコードにしました。<code>auto_create_subnetworks = false</code>としているのは不必要なサブネット作成を抑えるためです。</p><figure class="highlight sh"><figcaption><span>compute_network.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_network"</span> <span class="string">"sample_network"</span> &#123;</span><br><span class="line">  name = <span class="string">"sample-network"</span></span><br><span class="line">  auto_create_subnetworks = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでVPC部分のコードを適用してみましょう。ここでは以下のコマンドを使ってみましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform fmt <span class="comment"># コードの整形をしてくれる</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> terraform validate <span class="comment"># コードのシンタックスや必要なリソースの確認</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> terraform plan <span class="comment"># コードのドライランを行う</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> terraform apply <span class="comment"># コードを適用してリソースを作成する</span></span></span><br></pre></td></tr></table></figure><p>これらコマンドを是非使ってみてください。上で示した<code>network.tf</code>はコードの形が崩れていますが、<code>fmt</code>コマンドで整形されることがわかるかと思います。<code>apply</code>コマンドを実行すると以下が出力され、<code>yes</code>の入力を求められます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">  #</span><span class="bash"> google_compute_network.sample_network will be created</span></span><br><span class="line">  + resource "google_compute_network" "sample_network" &#123;</span><br><span class="line">      + auto_create_subnetworks         = false</span><br><span class="line">      + delete_default_routes_on_create = false</span><br><span class="line">      + gateway_ipv4                    = (known after apply)</span><br><span class="line">      + id                              = (known after apply)</span><br><span class="line">      + ipv4_range                      = (known after apply)</span><br><span class="line">      + name                            = "sample-network"</span><br><span class="line">      + project                         = (known after apply)</span><br><span class="line">      + routing_mode                    = (known after apply)</span><br><span class="line">      + self_link                       = (known after apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><p>もしかしたらApplyが「APIを有効化していないのでできない」と出る方もいるかと思いますが、その時はGUIで該当のAPIを有効化してください。<a href="https://cloud.google.com/endpoints/docs/frameworks/enable-api" target="_blank" rel="noopener">APIの有効化はこちら</a>を参照してくださいApplyが完了したらGUIで確認してみてください。ここではネットワークだけできていると思います。<br>次にサブネットを作成しましょう。</p><figure class="highlight sh"><figcaption><span>compute_subnetwork.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_subnetwork"</span> <span class="string">"pub_subnetwork"</span> &#123;</span><br><span class="line">  name          = <span class="string">"sample-subnet-pub"</span></span><br><span class="line">  ip_cidr_range = <span class="string">"192.168.1.0/24"</span></span><br><span class="line">  region        = <span class="string">"asia-northeast1"</span></span><br><span class="line">  network       = <span class="string">"sample-network"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_subnetwork"</span> <span class="string">"prv_subnetwork"</span> &#123;</span><br><span class="line">  <span class="comment"># 実際に書いてみましょう</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここでは<code>sample-network</code>に作ることを指定して書いています。オプションとして他にも様々書けるので、必要に応じて追記することができます。また、今回はサブネットを2つ作成しますが、1つは作成ぜひ実際に書いてみてください。答えは<a href="https://github.com/kaedemalu/terraform_101_handon/blob/master/compute_subnetwork.tf" target="_blank" rel="noopener">こちら</a>にあります。コードの準備が終わったらApplyコマンドを叩いてリソースを作成してください。</p><h2 id="ファイアウォールの作成"><a href="#ファイアウォールの作成" class="headerlink" title="ファイアウォールの作成"></a>ファイアウォールの作成</h2><p>次にインスタンスを不正なアクセスから保護するためのファイアウォールを作成します。インスタンスなどの作成よりもこういったルール周りの方がTerraformが役立つ場面でもあります。GCPの入門記事では2つ作成したので、今回も2つ作成できるようにします。コードは以下になります。</p><figure class="highlight sh"><figcaption><span>compute_firewall.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_firewall"</span> <span class="string">"bastion"</span> &#123;</span><br><span class="line">  name    = <span class="string">"bastion"</span></span><br><span class="line">  network = <span class="string">"sample-network"</span></span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">"tcp"</span></span><br><span class="line">    ports    = [<span class="string">"22"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  source_ranges = [<span class="string">"0.0.0.0/0"</span>]</span><br><span class="line">  target_tags = [<span class="string">"bastion"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_firewall"</span> <span class="string">"from_bastion"</span> &#123;</span><br><span class="line">  name    = <span class="string">"from-bastion"</span></span><br><span class="line">  network = <span class="string">"sample-network"</span></span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">"tcp"</span></span><br><span class="line">    ports    = [<span class="string">"22"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  source_tags = [<span class="string">"bastion"</span>]</span><br><span class="line">  target_tags = [<span class="string">"from-bastion"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_firewall"</span> <span class="string">"sample_network_allow_http"</span> &#123;</span><br><span class="line">  name    = <span class="string">"sample-network-allow-http"</span></span><br><span class="line">  network = <span class="string">"sample-network"</span></span><br><span class="line"></span><br><span class="line">  allow &#123;</span><br><span class="line">    protocol = <span class="string">"tcp"</span></span><br><span class="line">    ports    = [<span class="string">"80"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  source_ranges = [<span class="string">"0.0.0.0/0"</span>]</span><br><span class="line">  target_tags = [<span class="string">"http-server"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sshできるようにするファイアウォールルールは上の2つ、下の<code>sample-network-allow-http</code>は、GUIであれば自動生成されますが、Terraformだとできないので、今回はコード化してApplyします。</p><h2 id="インスタンスの作成"><a href="#インスタンスの作成" class="headerlink" title="インスタンスの作成"></a>インスタンスの作成</h2><p>はじめに踏み台インスタンスから作成していきます。踏み台は、外部IPがついている必要があるので、以下の形で書きます。</p><figure class="highlight sh"><figcaption><span>compute_instance.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"bastion"</span> &#123;</span><br><span class="line">  name         = <span class="string">"bastion"</span></span><br><span class="line">  machine_type = <span class="string">"n1-standard-1"</span></span><br><span class="line">  zone         = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  tags = [<span class="string">"bastion"</span>]</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    initialize_params &#123;</span><br><span class="line">      image = <span class="string">"debian-cloud/debian-10"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    subnetwork = <span class="string">"sample-subnet-pub"</span></span><br><span class="line"></span><br><span class="line">    access_config &#123;</span><br><span class="line">      nat_ip = google_compute_address.bastion_external.address</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  service_account &#123;</span><br><span class="line">    scopes = [<span class="string">"cloud-platform"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_address"</span> <span class="string">"bastion_external"</span> &#123;</span><br><span class="line">  name         = <span class="string">"bastion-external"</span></span><br><span class="line">  address_type = <span class="string">"EXTERNAL"</span></span><br><span class="line">  region       = <span class="string">"asia-northeast1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上のコードでは、インスタンス作成を行う<code>google_compute_instance</code>と、外部IPコードで決めて設定している<code>google_compute_address</code>を記載しています。webインスタンスについては実際に書いてみましょう。外部IPは必要ないので、<code>google_compute_instance</code>だけあれば作成することができます。答えの例は<a href="https://github.com/kaedemalu/terraform_101_handon/blob/master/compute_instance.tf" target="_blank" rel="noopener">こちら</a>になります。</p><h3 id="リソースに依存関係をつける"><a href="#リソースに依存関係をつける" class="headerlink" title="リソースに依存関係をつける"></a>リソースに依存関係をつける</h3><p>今回、GCEの作成にあたり、<code>access_config</code>ブロックの中に<code>nat_ip = google_compute_address.bastion_external.address</code>という書き方をしました。この書き方には主に2つ目的があり、</p><ul><li>他で作成したリソース値を利用する書き方<ul><li>今回は該当するリソースのアドレスを引用する書き方になっている</li></ul></li><li>リソースの依存関係をつけてくれる<ul><li>今回は<code>google_compute_address.bastion_external</code>が作成されないとインスタンスが作成されない</li></ul></li></ul><p>そのため、これまで出てきたリソースだと、VPC→サブネットorファイアウォールの作成順序が好ましいので、サブネットを例にすると、</p><figure class="highlight sh"><figcaption><span>compute_subnetwork.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_subnetwork"</span> <span class="string">"pub_subnetwork"</span> &#123;</span><br><span class="line">  name          = <span class="string">"sample-subnet-pub"</span></span><br><span class="line">  ip_cidr_range = <span class="string">"192.168.1.0/24"</span></span><br><span class="line">  region        = <span class="string">"asia-northeast1"</span></span><br><span class="line">  network       = google_compute_network.sample_network.id <span class="comment"># ここを書き換え</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_subnetwork"</span> <span class="string">"prv_subnetwork"</span> &#123;</span><br><span class="line">  <span class="comment"># 実際に書いてみましょう</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>と書くことができます。他にも修正できる部分があるので直してみましょう。<br>webインスタンスについては実際に書いてみましょう。外部IPは必要ないので、<code>google_compute_instance</code>だけあれば作成することができます。答えの例は<a href="https://github.com/kaedemalu/terraform_101_handon/blob/master/compute_instance.tf" target="_blank" rel="noopener">こちら</a>になります。</p><h2 id="ロードバランサの作成"><a href="#ロードバランサの作成" class="headerlink" title="ロードバランサの作成"></a>ロードバランサの作成</h2><p>ユーザーからのリクエストを受けるロードバランサを作成しましょう。GUIでも設定が細かいロードバランサですが、Terraformにしておくとコードで設定が見えるので、あとで見返すのにもおすすめな部分です。</p><figure class="highlight sh"><figcaption><span>http_lb.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_global_address"</span> <span class="string">"web_lb"</span> &#123;</span><br><span class="line">  name = <span class="string">"web-lb"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_health_check"</span> <span class="string">"web_health"</span> &#123;</span><br><span class="line">  name = <span class="string">"web-health"</span></span><br><span class="line">  timeout_sec        = 1</span><br><span class="line">  check_interval_sec = 1</span><br><span class="line">  tcp_health_check &#123;</span><br><span class="line">    port = <span class="string">"80"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_backend_service"</span> <span class="string">"web_backend"</span> &#123;</span><br><span class="line">  name        = <span class="string">"web-backend"</span></span><br><span class="line">  port_name   = <span class="string">"http"</span></span><br><span class="line">  protocol    = <span class="string">"HTTP"</span></span><br><span class="line">  timeout_sec = 3000</span><br><span class="line"></span><br><span class="line">  backend &#123;</span><br><span class="line">    group = google_compute_instance_group.web_instance_group.self_link</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  health_checks = [google_compute_health_check.web_health.self_link]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_url_map"</span> <span class="string">"web_lb"</span> &#123;</span><br><span class="line">  name        = <span class="string">"web-lb"</span></span><br><span class="line">  default_service = google_compute_backend_service.web_backend.self_link</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_target_http_proxy"</span> <span class="string">"http_proxy"</span> &#123;</span><br><span class="line">  name             = <span class="string">"http-proxy"</span></span><br><span class="line">  url_map          = google_compute_url_map.web_lb.self_link</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_global_forwarding_rule"</span> <span class="string">"forwarding_rule"</span> &#123;</span><br><span class="line">  name       = <span class="string">"forwarding-rule"</span></span><br><span class="line">  target     = google_compute_target_http_proxy.http_proxy.self_link</span><br><span class="line">  port_range = <span class="string">"80"</span></span><br><span class="line">  ip_address = google_compute_global_address.web_lb.address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_instance_group"</span> <span class="string">"web_instance_group"</span> &#123;</span><br><span class="line">  name        = <span class="string">"web-instance-group"</span></span><br><span class="line"></span><br><span class="line">  instances = [google_compute_instance.web_instance.self_link]</span><br><span class="line"></span><br><span class="line">  zone = <span class="string">"asia-northeast3-a"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ロードバランサを1つ作るために様々なリソースを作成しなければいけませんが、上のコードではLBを作る部分、最後にはインスタンスグループを作るリソースを書いています。</p><h2 id="Cloud-NAT-Routerの作成"><a href="#Cloud-NAT-Routerの作成" class="headerlink" title="Cloud NAT, Routerの作成"></a>Cloud NAT, Routerの作成</h2><p>WebサーバーのパッケージをアップデートさせるためにはNATから外に出られるようにする必要があります。ここではCloud NATとCloud Routerを作成します。またまた、コードは以下です。</p><figure class="highlight sh"><figcaption><span>compute_router.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_router"</span> <span class="string">"seoul_router"</span> &#123;</span><br><span class="line">  name    = <span class="string">"seoul-router"</span></span><br><span class="line">  region  = <span class="string">"asia-northeast3"</span></span><br><span class="line">  network = google_compute_network.sample_network.id</span><br><span class="line"></span><br><span class="line">  bgp &#123;</span><br><span class="line">    asn = 64514</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>compute_router_nat.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_router_nat"</span> <span class="string">"seoul_nat"</span> &#123;</span><br><span class="line">  name                               = <span class="string">"seoul-nat"</span></span><br><span class="line">  router                             = google_compute_router.seoul_router.name</span><br><span class="line">  region                             = google_compute_router.seoul_router.region</span><br><span class="line">  nat_ip_allocate_option             = <span class="string">"AUTO_ONLY"</span></span><br><span class="line">  source_subnetwork_ip_ranges_to_nat = <span class="string">"ALL_SUBNETWORKS_ALL_IP_RANGES"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここまで設定できたら、<a href="https://future-architect.github.io/articles/20200602/">春の入門祭り 🌸 #02 Google Cloud Platform 101</a>の「6.ミドルウェアの設定」を行って、nginxの画面がブラウザから見ることができれば基本編の完了です！</p><h1 id="応用編"><a href="#応用編" class="headerlink" title="応用編"></a>応用編</h1><p>応用編としてTeraform Cloudの導入を行ってみましょう。Terraform Cloudが導入できると、TerraformのCI/CDができるようになるので、グッと開発スピードが上がります！</p><h2 id="Terraform-Cloudについて"><a href="#Terraform-Cloudについて" class="headerlink" title="Terraform Cloudについて"></a>Terraform Cloudについて</h2><p>Terraform CloudはHashiCorp社が提供するTerraformのCI/CD基盤になります。プランは様々あり、有料版にあげることでPolicy as Code(PaC)を実現できる<a href="https://www.terraform.io/docs/cloud/sentinel/index.html" target="_blank" rel="noopener">Sentinel</a>を導入できたりと、インフラのデプロイ速度をあげる以外にも、Terraformの実行環境の統一や実行ログ、インフラの状態など秩序を守るためにも非常に大きなメリットをもたらします。</p><h2 id="変数の設定"><a href="#変数の設定" class="headerlink" title="変数の設定"></a>変数の設定</h2><p>Terraform Cloudに本格的に移行する前に、変数の切り出しを行いましょう。特に今回は、サービスアカウントキーなどケアが必要な部分を<code>secret.tfvars</code>に切り出します。</p><figure class="highlight sh"><figcaption><span>variable.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">variable <span class="string">"PROJECT_ID"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"PROJECT_NAME"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"GOOGLE_CREDENTIALS"</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>secret.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PROJECT_ID         = <span class="string">"xxxxxxxx"</span> <span class="comment"># プロジェクトIDを入れる</span></span><br><span class="line">PROJECT_NAME       = <span class="string">"xxxxxxxx"</span> <span class="comment"># プロジェクト名を入れる</span></span><br><span class="line">GOOGLE_CREDENTIALS = <span class="string">"credentials.json"</span></span><br></pre></td></tr></table></figure><p>切り出した上を元にさらに<code>provider.tf</code>も書き換えましょう。</p><figure class="highlight sh"><figcaption><span>provider.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">"google"</span> &#123;</span><br><span class="line">  project     = var.PROJECT_ID</span><br><span class="line">  credentials = var.GOOGLE_CREDENTIALS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Terraform-Cloudの設定"><a href="#Terraform-Cloudの設定" class="headerlink" title="Terraform Cloudの設定"></a>Terraform Cloudの設定</h2><p>Terraform Cloudへの登録自体は<a href="">こちら</a>から行うことができるので、手順に沿って登録しましょう。</p><h3 id="Workspaceの作成"><a href="#Workspaceの作成" class="headerlink" title="Workspaceの作成"></a>Workspaceの作成</h3><p>登録が完了したら、Terraform Cloudにリポジトリの登録を行いましょう。サインアップ終わったあとはきっとこんな感じでできたてホヤホヤだと思います。</p><img src="/images/20200624/tf_cloud1.png" style="border:solid 1px #000000"><p>右にある[New workspace]から新しいWorkspaceを作成しましょう。<br>はじめにGitリポジトリを指定します。今回はGithubを使用するのでGithubを選択して次に進みます。<br><img src="/images/20200624/tf_cloud2.png" style="border:solid 1px #000000"></p><p>[Choose a repository]の項目では今回使うリポジトリを選択します。選択が終わると[Configure settings]に進むので、Workspaceの名前を変えられます。ここではとくに問題がないので、そのまま(リポジトリの名前のまま)で進みます。</p><h3 id="変数の設定-1"><a href="#変数の設定-1" class="headerlink" title="変数の設定"></a>変数の設定</h3><p>Workspaceの作成が完了すると、そのまま変数の設定に進むことができます。なので[Configure variables]に進みましょう。設定するのは「Terraform Variables」の方になります。今回は以下のように<code>PROJECT_ID</code>、<code>PROJECT_NAME</code>、<code>GOOGLE_CREDENTIALS</code>の3つを設定しました。<code>GOOGLE_CREDENTIALS</code>については鍵なので、sensitiveにチェックを入れると見えなくなります。</p><img src="/images/20200624/photo_20200624_03.png" style="border:solid 1px #000000"><p>これで一通りの設定ができたので実際にQueueを走らせてみましょう。</p><h2 id="Queueの実行"><a href="#Queueの実行" class="headerlink" title="Queueの実行"></a>Queueの実行</h2><p>画面の右上に[Queue plan]の項目があるので実行してみましょう。入力項目が現れますが、特に何も入れずに実行できます。実行してみると以下の様にPlanの結果が返ってきます。<br><img src="/images/20200624/tf_cloud3.png" style="border:solid 1px #000000"></p><p><code>11 to add</code>になっていますが、これはローカルのStateファイルをみていないために起こります。この後で、Stateの移行を行います。</p><h2 id="Tokenを取得する"><a href="#Tokenを取得する" class="headerlink" title="Tokenを取得する"></a>Tokenを取得する</h2><p>Terraform Cloud上のStateを見れるように前の作業として、ローカルから認証できる必要があります。そのために必要なTokenを取得するために以下の2パターンで取得します.</p><h3 id="コマンドを使う"><a href="#コマンドを使う" class="headerlink" title="コマンドを使う"></a>コマンドを使う</h3><p>コマンドを使ってTokenを取得できます。しかし、バージョンが<strong>v0.12.21</strong>以降でしか使えないので、これより前のバージョンを使用している方はGUIを使ったパターンで取得してください。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform login</span></span><br><span class="line">Terraform will request an API token for app.terraform.io using your browser.</span><br><span class="line"></span><br><span class="line">If login is successful, Terraform will store the token in plain text in</span><br><span class="line">the following file for use by subsequent commands:</span><br><span class="line">    /Users/itota/.terraform.d/credentials.tfrc.json</span><br><span class="line"></span><br><span class="line">Do you want to proceed? (y/n) y # ここでyを入力する</span><br><span class="line">Terraform must now open a web browser to the tokens page for app.terraform.io.</span><br><span class="line"></span><br><span class="line">If a browser does not open this automatically, open the following URL to proceed:</span><br><span class="line">    https://app.terraform.io/app/settings/tokens?source=terraform-login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Generate a token using your browser, and copy-paste it into this prompt.</span><br><span class="line"></span><br><span class="line">Terraform will store the token in plain text in the following file</span><br><span class="line">for use by subsequent commands:</span><br><span class="line">    /Users/itota/.terraform.d/credentials.tfrc.json</span><br><span class="line"></span><br><span class="line">Token for app.terraform.io: # ブラウザで表示されるTokenを入力する</span><br><span class="line"></span><br><span class="line">Retrieved token for user xxxxxxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Success! Terraform has obtained and saved an API token.</span><br><span class="line"></span><br><span class="line">The new API token will be used for any future Terraform command that must make</span><br><span class="line">authenticated requests to app.terraform.io.</span><br></pre></td></tr></table></figure><p>このように出力されるので、2箇所入力が済めばこちらのコマンドは完了となるので次に進みましょう。</p><h3 id="GUIから取得する"><a href="#GUIから取得する" class="headerlink" title="GUIから取得する"></a>GUIから取得する</h3><p>こちらではGUIからTokenwo取得する方法を説明します。以下の画像について順を追って説明します。<br><img src="/images/20200624/photo_20200624_04.png" style="border:solid 1px #000000"></p><ul><li>① [Ortanization Setting]に遷移する</li><li>② [API Token]をクリック</li><li>③ [Create an authentication token]をクリックする<ul><li>Token名を入力するとTokenが払い出される。</li></ul></li></ul><p>あとは以下のファイルを作成すればTokenの取得作業は完了です。</p><figure class="highlight sh"><figcaption><span>~/.terraformrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">credentials <span class="string">"app.terraform.io"</span> &#123;</span><br><span class="line">  token = <span class="string">"xxxxxxxxxxxxx"</span> <span class="comment"># Tokenを入力</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="backendの設定を有効化する"><a href="#backendの設定を有効化する" class="headerlink" title="backendの設定を有効化する"></a>backendの設定を有効化する</h2><p><code>backend.tf</code>を以下に書き換えて、stateを見に行く場所をGCSからTerraform Cloudに変えます。</p><figure class="highlight sh"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">"remote"</span> &#123;</span><br><span class="line">    hostname = <span class="string">"app.terraform.io"</span></span><br><span class="line">    organization = <span class="string">"kaedemalu"</span> <span class="comment"># 現在のOrganizantion Name</span></span><br><span class="line"> </span><br><span class="line">    workspaces &#123;</span><br><span class="line">      name = <span class="string">"terraform_101"</span> <span class="comment"># 使っているWorkspaceの名前</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで再び<code>terraform init</code>コマンドを実行しましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform init</span></span><br><span class="line">Initializing the backend...</span><br><span class="line">Acquiring state lock. This may take a few moments...</span><br><span class="line">Do you want to copy existing state to the new backend?</span><br><span class="line">  Pre-existing state was found while migrating the previous "local" backend to the</span><br><span class="line">  newly configured "remote" backend. No existing state was found in the newly</span><br><span class="line">  configured "remote" backend. Do you want to copy this state to the new "remote"</span><br><span class="line">  backend? Enter "yes" to copy and "no" to start with an empty state.</span><br><span class="line"></span><br><span class="line">  Enter a value: yes # ここでyesと入力する</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Successfully configured the backend "remote"! Terraform will automatically</span><br><span class="line">use this backend unless the backend configuration changes.</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line"></span><br><span class="line">The following providers do not have any version constraints in configuration,</span><br><span class="line">so the latest version was installed.</span><br><span class="line"></span><br><span class="line">To prevent automatic upgrades to new major versions that may contain breaking</span><br><span class="line">changes, it is recommended to add version = "..." constraints to the</span><br><span class="line">corresponding provider blocks in configuration, with the constraint strings</span><br><span class="line">suggested below.</span><br><span class="line"></span><br><span class="line">* provider.google: version = "~&gt; 3.26"</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">You may now begin working with Terraform. Try running "terraform plan" to see</span><br><span class="line">any changes that are required for your infrastructure. All Terraform commands</span><br><span class="line">should now work.</span><br><span class="line"></span><br><span class="line">If you ever set or change modules or backend configuration for Terraform,</span><br><span class="line">rerun this command to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to do so if necessary.</span><br></pre></td></tr></table></figure><p>これでローカルからTerraform Cloudにstateがコピーされたので、Queue Runの情報を確認してみましょう。Planの自動実行結果は以下になります。<br><img src="/images/20200624/tf_cloud4.png"  style="border:solid 1px #000000"></p><p>ローカルで全てApplyが済んでいるので差分がない状態になります！ちなみにこの状態になってからローカルでapplyコマンドを実行すると、</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform apply</span></span><br><span class="line"></span><br><span class="line">Error: Apply not allowed for workspaces with a VCS connection</span><br><span class="line"></span><br><span class="line">A workspace that is connected to a VCS requires the VCS-driven workflow to</span><br><span class="line">ensure that the VCS remains the single source of truth.</span><br></pre></td></tr></table></figure><p>と返されて実行できなくなっています。これでTerraform CloudからのみコードのApplyができるようになっているので、実行環境の統制ができるようになります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はTerraform 101ということでTerraformをつかってリソース構築を行いました。今回は取り扱いませんでしたが、コードの管理を環境ごと変えずに利用できるWorkspaceやTemplateとして使えるModuleなどもあります（参考記事は<a href="https://future-architect.github.io/articles/20190903/">こちら</a>。また、今回扱ったTerraformのバージョンは0.12ですが、<a href="https://future-architect.github.io/articles/20190816/">環境構築編</a>や<a href="https://future-architect.github.io/articles/20190819/">実践編</a>もありますのでそちらもぜひ読んでみてください。<br>Terraformを使うことで俗にいう手順書を無くして、インフラをコードで管理することで冪等性を保つことができます。うっかり手順を飛ばして、どこでミスを起こしたか調べることにもかなりの労力と時間を使うと思うので、是非Terraformを日々の(インフラの)お供に取り入れてみてはいかがでしょうか？</p><p>今回使用しているコードは以下のGithubに上がっているので、ぜひ参照してください。<br><a href="https://github.com/kaedemalu/terraform_101_handon" target="_blank" rel="noopener">https://github.com/kaedemalu/terraform_101_handon</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200624/photo_20200624_01.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;こんにちは。TIG/DXユニットの伊藤です。本記事は&lt;a href=&quot;https://future-architect.g
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Ansible" scheme="https://future-architect.github.io/tags/Ansible/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #17 Elasticsearch入門</title>
    <link href="https://future-architect.github.io/articles/20200623/"/>
    <id>https://future-architect.github.io/articles/20200623/</id>
    <published>2020-06-23T01:14:50.000Z</published>
    <updated>2020-06-29T01:49:16.378Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200623/top.png"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGメディアユニットの町田です。2020年4月にフューチャーに転職してきました。<br>当社を選んだきっかけの一つとしてこのTechブログの存在があったので、このように投稿できることをうれしく思います！</p><p>本日の<a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>🌸 #17は、全文検索エンジンとして高い人気を誇る「Elasticsearch」についての入門記事です。</p><img src="/images/20200623/photo_20200623_01.png" class="img-middle-size"><p>Elasticsearchとは何か、どういうメリットがあるのかということから、ローカル環境へのインストールと簡単な活用事例を見ていきたいと思います。</p><p>※本記事の環境はWindows 10 Pro 64ビットとなります。</p><h2 id="Elasticsearchとは何か"><a href="#Elasticsearchとは何か" class="headerlink" title="Elasticsearchとは何か"></a>Elasticsearchとは何か</h2><p>Elasticsearchは「全文検索システム」を提供するソフトウェアです。</p><p>全文検索とは検索手法の一つで、文字列をキーにして複数の文書データをまたがって検索し、目的のデータを探し出す機能のことを指します。ECサイトやコンテンツマネジメントシステムなどで利用されているいわゆる検索エンジンと呼ばれるものは、裏の仕組みとして全文検索システムが動いているものが多いようです。元々はShay Banon氏（現Elastic社CEO）が妻の料理レシピの情報を検索するためのアプリケーションとして開発されたのがElasticsearchの起源だそうです。</p><p>それが今では世界中で利用される検索エンジンとなっている訳ですから、ソフトウェア開発の可能性は無限大ですね！</p><h2 id="どうやって入手するか"><a href="#どうやって入手するか" class="headerlink" title="どうやって入手するか"></a>どうやって入手するか</h2><p>ElasticsearchはElastic社からオープンソースで公開されており、誰でもインストールして無料で利用することが可能です。</p><p>また、Amazon Web Service(AWS)上においても「Amazon Elasticsearch Service」としてマネージドサービス(※)として提供されています。<br>※インフラ設定やバージョン管理などは不要になりますが、利用データ量などによって料金がかかります。</p><p>本記事ではオープンソースのソフトウェアをローカルPCにインストールしていきます。</p><h2 id="Elasticsearchのどういうところが便利か"><a href="#Elasticsearchのどういうところが便利か" class="headerlink" title="Elasticsearchのどういうところが便利か"></a>Elasticsearchのどういうところが便利か</h2><p>Elasticsearchのメリットとして、以下が挙げられます。</p><ul><li>索引型検索を採用しているため、大量データに対して高速検索が可能</li><li>標準で分散配置型の構成をとり、高速化と高可用性を実現</li><li>JSONフォーマットで非定型データを投入可能</li><li>REST APIによるシンプルなアクセスが可能</li><li>関連ツールを利用して分析・可視化</li></ul><p>当社の実績においても、大量の顧客データ検索し数秒で結果を返す要件のプロダクトにて実際に採用されています。</p><p>前置きが長くなりましたが、実際にインストールをして試していきましょう！</p><h1 id="Elasticsearchのインストール"><a href="#Elasticsearchのインストール" class="headerlink" title="Elasticsearchのインストール"></a>Elasticsearchのインストール</h1><p><a href="https://www.elastic.co/jp/downloads/elasticsearch" target="_blank" rel="noopener">公式ページ</a>からzipファイルをダウンロードします。（執筆時のバージョンは7.7.1です）<br><img src="/images/20200623/photo_20200623_02.jpeg"></p><p>ダウンロードしたzipを解凍すると以下のような構成になっています。<br><img src="/images/20200623/photo_20200623_03.jpeg" class="img-middle-size"></p><p>ここで <code>bin/elasticsearch.bat</code> を実行するとコマンドプロンプトが立ち上がり、Elasticsearchが起動状態になります。</p><p>動作確認として、別のコマンドプロンプトを立ち上げ <code>curl http://localhost:9200/</code> と叩いてみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl http://localhost:9200/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行結果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"XXXXXXXX"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"XXXXXXXXXXXXXXXXXXXXXX"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.7.1"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"zip"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"xxxxxxxxxxxxxxxxxxxxxxx"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2020-05-28T16:30:01.040088Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.5.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようにレスポンスがあれば準備OKです。簡単ですね！！</p><p>停止する場合は、起動時に現れたコマンドプロンプトで <code>Ctrl+c</code> で停止してください。</p><p>ちなみに、ポートはデフォルトで <code>9200</code> となっています。<br>もし変更したい場合は <code>config/elasticsearch.yml</code> の <code>#http.port: 9200</code> のコメントアウトを外して別のポートを指定することも可能です。（再度起動すると反映されます。）</p><h2 id="日本語解析への対応"><a href="#日本語解析への対応" class="headerlink" title="日本語解析への対応"></a>日本語解析への対応</h2><p>標準ではElasticsearchは日本語の形態素解析（後述します）に対応しておりませんが、オープンソースの<strong>kuromoji</strong>というソフトウェアを対応させることで、日本語の解析が可能となります。<br><code>bin/elasticsearch-pulgin.bat</code> から追加インストールすることができます。コマンドプロンプトで以下のコマンドを実行しましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [zip解凍したフォルダ\bin] にて実行</span></span><br><span class="line">&gt; elasticsearch-plugin.bat install analysis-kuromoji</span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行結果</span></span><br><span class="line">-&gt; Installing analysis-kuromoji</span><br><span class="line">-&gt; Downloading analysis-kuromoji from elastic</span><br><span class="line">[=================================================] 100%??</span><br><span class="line">-&gt; Installed analysis-kuromoji</span><br></pre></td></tr></table></figure><p>インストール後はElasticsearchを再起動します。</p><p>また、ご利用の環境によってはコマンドプロンプトの文字コードによって日本語表示が文字化けることがあります。<br><code>chcp 65001</code>と実行すると文字コードがUTF-8になります。</p><h2 id="Elasticsearchの用語について"><a href="#Elasticsearchの用語について" class="headerlink" title="Elasticsearchの用語について"></a>Elasticsearchの用語について</h2><p>ここでElasticsearchで知っておくべき用語と概念を示しておきます。<br>Elasticsearchは様々なデータを格納するにあたり、MySQLなどのRDBMSで言うところのデータベースやテーブルに相当する概念が存在します。<br>RDBに慣れている方も多いかと思いますので、比較する形で示したいと思います。<br>※厳密に言うと異なる概念ですが、イメージしやすいかと思います。</p><table><thead><tr><th align="left">Elasticsearch用語</th><th align="left">説明</th><th align="left">RDBMSで言うところの…</th></tr></thead><tbody><tr><td align="left">インデックス</td><td align="left">ドキュメントを格納する場所</td><td align="left">データベース</td></tr><tr><td align="left">ドキュメントタイプ・マッピング</td><td align="left">ドキュメントの構成やフィールド型などの定義</td><td align="left">テーブル</td></tr><tr><td align="left">ドキュメント</td><td align="left">格納される１つの文章の単位</td><td align="left">レコード</td></tr><tr><td align="left">フィールド</td><td align="left">ドキュメント内のKeyとValueの組み合わせ</td><td align="left">カラム</td></tr></tbody></table><p>これらを踏まえ、実際にElasticsearchを動かしていってみましょう！</p><h1 id="インデックスとドキュメントの登録"><a href="#インデックスとドキュメントの登録" class="headerlink" title="インデックスとドキュメントの登録"></a>インデックスとドキュメントの登録</h1><p>ここからは実際にElasticsearchにドキュメントを登録したり検索したりしてみます。</p><p>Elasticsearchは、REST APIによるHTTPリクエストでシンプルに操作できるというメリットがありますので、<br>curlコマンドを使ってバシバシ叩いてみましょう。</p><p>まずはインデックスとドキュメントを作成してみます。<br>ドキュメントは、JSON形式で登録することとなります。<br>事前準備として、登録するドキュメントの内容を<code>my_document_1.json</code>というファイルに作成しておきます。</p><figure class="highlight json"><figcaption><span>my_document_1.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"user_name"</span>: <span class="string">"Future 太郎"</span>,</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2020-06-23T10:09:01"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"春の入門祭り　Elasticsearch入門"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登録のHTTPリクエストは以下の形式で行います。</p><blockquote><ul><li>メソッド： POST</li><li>URL： <a href="http://localhost:9200/my_index/my_type/?pretty" target="_blank" rel="noopener">http://localhost:9200/my_index/my_type/?pretty</a><ul><li>localhost:9200/<strong>{インデックス名を指定}</strong>/<strong>{ドキュメントタイプ名を指定}</strong>/<br>⇒インデックスとドキュメントタイプが存在しない場合は、自動的に作成される</li><li>?prettyを付与するとJSONが整形された形で返却される</li></ul></li><li>ヘッダ： “Content-Type”:”application/json”</li><li>ボディ： my_document_1.json</li></ul></blockquote><p>それでは、実際にコマンドを叩いてみます。</p><figure class="highlight sh"><figcaption><span>インデックスとドキュメントを作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X POST <span class="string">"http://localhost:9200/my_index/my_type/?pretty"</span> -H <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span> -d @my_document_1.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行結果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"my_index"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"my_type"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"D4DCxnIB33lDYAWdACgJ"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 1,</span><br><span class="line">  <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 2,</span><br><span class="line">    <span class="string">"successful"</span> : 1,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 0,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インデックス、ドキュメントタイプの作成、ドキュメントの登録がこれだけで完了しました！</p><p>登録された内容を確認してみましょう。<br>ドキュメントを指定して参照するには、<code>～/{インデックス名}/{ドキュメントタイプ名}/{ドキュメントid}</code>と指定してリクエストします。<br>ドキュメントidとは、先ほどのレスポンスの <strong>“_id”</strong> です</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X GET <span class="string">"http://localhost:9200/my_index/my_type/D4DCxnIB33lDYAWdACgJ?pretty"</span> -H <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行結果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"my_index"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"my_type"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"D4DCxnIB33lDYAWdACgJ"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 1,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 0,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"user_name"</span> : <span class="string">"Future 太郎"</span>,</span><br><span class="line">    <span class="string">"date"</span> : <span class="string">"2020-06-23T10:09:01"</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"春の入門祭り　Elasticsearch入門"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しっかり登録されていますね！</p><h1 id="ドキュメントの検索"><a href="#ドキュメントの検索" class="headerlink" title="ドキュメントの検索"></a>ドキュメントの検索</h1><p>続いて、Elasticsearchのコア機能となる検索機能を試してみましょう。</p><p>検索する条件もJSONに記載します。messageが<strong>「春祭り」</strong>という条件で検索をかけてみましょう。<br>まずは以下のファイルを作成してください。</p><figure class="highlight json"><figcaption><span>my_query_1.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"春祭り"</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>検索は<code>～/{インデックス名}/{ドキュメントタイプ名}/_search</code>という形式でリクエストします。<br>検索条件として、先ほどの<code>my_query_1.json</code> を指定します。</p><figure class="highlight sh"><figcaption><span>「春祭り」で検索</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X GET <span class="string">"http://localhost:9200/my_index/my_type/_search?pretty"</span> -H <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span> -d @my_query_1.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">3.8015757</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"my_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"my_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"D4DCxnIB33lDYAWdACgJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">3.8015757</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user_name"</span> : <span class="string">"Future 太郎"</span>,</span><br><span class="line">          <span class="attr">"date"</span> : <span class="string">"2020-06-23T10:09:01"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"春の入門祭り　Elasticsearch入門"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>いろいろな要素が返却されていますが、着目したいのは<strong>「春祭り」</strong>という条件で検索したにも関わらず、<strong>「春の入門祭り」</strong>を含むドキュメントが結果として取得できた点です。</p><p>これはElasticsearchが備えるAnalyzerという機能によって、格納している文章を単語単位で分割して保持しているため、このような検索が実現されます。<br>特に日本語を単語単位で分割することを形態素解析と呼びます。<br>※日本語を形態素解析するためには、先ほど追加インストールしたkuromojiが必要です。</p><p>ここで、先ほど登録していたmessageの内容である「春の入門祭り　Elasticsearch入門」という日本語がどのように形態素解析されるのか確かめてみましょう。</p><p>リクエストのため以下のファイルを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;: &quot;kuromoji&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;春の入門祭り　Elasticsearch入門&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そして以下の通りリクエストしてみます。</p><figure class="highlight sh"><figcaption><span>「春の入門祭り　Elasticsearch入門」の解析結果を調べる</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X POST <span class="string">"http://localhost:9200/my_index/_analyze?pretty"</span> -H <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span> -d @my_analyze_1.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"春"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"入門"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"祭り"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">20</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span> : <span class="string">"入門"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span> : <span class="number">20</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span> : <span class="number">22</span>,</span><br><span class="line">      <span class="attr">"type"</span> : <span class="string">"word"</span>,</span><br><span class="line">      <span class="attr">"position"</span> : <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように「春の入門祭り　Elasticsearch入門」という文章は、<strong>「春」</strong> <strong>「入門」</strong> <strong>「祭り」</strong> <strong>「Elasticsearch」</strong> <strong>「入門」</strong>という形で解析され分割されることがわかります。</p><p>形態素解析された単語たちは、自身のドキュメントidと紐づく形の構成で保持されており、ドキュメントへのインデックスとなります。このような構成を特に「転置インデックス」と呼びます。</p><p>検索時には、クエリ文字列に対しても形態素解析を行いその結果（今回は<strong>「春」</strong> <strong>「祭り」</strong>）を条件に検索をかけ、Hitしたドキュメントが返却されるという仕組みです。（索引型検索）</p><p>Elasticsearchではこの索引型検索方式を採用することで、大量データの中からでも高速に対象のドキュメントを探し出すことが可能となっています。</p><p>もう少し検索についてみていきます。<br>先ほどと同じ手順で新たにドキュメントを追加してください。</p><figure class="highlight json"><figcaption><span>my_document_2.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"user_name"</span>: <span class="string">"Future 次郎"</span>,</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2020-06-23T11:09:01"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"夏は辛い物を食べて発汗！"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そして以下の条件で検索をかけてみます。</p><figure class="highlight json"><figcaption><span>my_query_2.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"おいしい食べ物"</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>「おいしい食べ物」で検索</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X GET <span class="string">"http://localhost:9200/my_index/my_type/_search?pretty"</span> -H <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span> -d @my_query_2.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">7</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">3.3295276</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"my_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"my_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"kzUPynIBNYoM10duZYBa"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">3.3295276</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : &#123;</span><br><span class="line">          <span class="attr">"user_name"</span> : <span class="string">"Future 次郎"</span>,</span><br><span class="line">          <span class="attr">"date"</span> : <span class="string">"2020-06-23T11:09:01"</span>,</span><br><span class="line">          <span class="attr">"message"</span> : <span class="string">"夏は辛い物を食べて発汗！"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>検索条件は「食べ物」ですが、「食べる」を含むドキュメントが結果として取得されました。<br>こちらも同様にAnalyzerが<strong>「表記のゆれ」</strong>を検知して、「食べる」や「食べた」を<strong>「食べ」</strong>に変換して検索しています。</p><p>RDBMSでは「～と一致する」や「～を含む」などといったカッチリした条件指定となりますが、Elasticsearchでは文章を解析したりゆれを考慮して結果を返してくれるのです。<br>全文検索エンジン便利！！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>本記事ではドキュメントの登録や検索などのほんの（本当に！）一部しか紹介していませんが、より高度な条件の検索をかけたり、登録ドキュメントの分析を行う様々な種類があります。<br>また、周辺ツールとしてデータをグラフィカルに表示する<strong>「Kibana」</strong>や、ログを自動的にElasticsearchに送り込む<strong>「Logstash」</strong>などがあります。</p><p>本記事にてElasticsearchの基本に触れたのちは、当ブログの過去記事に高度な利用法も紹介されていますので、是非挑戦してみてください！</p><ul><li><a href="https://future-architect.github.io/articles/20160920/">マネージャーがうれしいRedmineデータのグラフ表示方法を公開します！！</a></li><li><a href="https://future-architect.github.io/articles/20170510/">マネージャーがうれしいRedmineデータのダッシュボード表示方法を公開します！！</a></li><li><a href="https://future-architect.github.io/articles/20170119/">マネージャーがうれしいRedmineデータのEVM表示方法を公開します！！</a></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://www.amazon.co.jp/Elasticsearch%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89-impress-top-gear-%E6%83%A3%E9%81%93/dp/4295003913/ref=asc_df_4295003913/?tag=jpgo-22&linkCode=df0&hvadid=295706574430&hvpos=&hvnetw=g&hvrand=18123178779117293225&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1009309&hvtargid=pla-525424503079&psc=1&th=1&psc=1" target="_blank" rel="noopener">Elasticsearch実践ガイド</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200623/top.png&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGメディアユニットの町田です。
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Elastic-Stack" scheme="https://future-architect.github.io/tags/Elastic-Stack/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Elasticsearch" scheme="https://future-architect.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #16 「その仕事、Slackで。」してみた事例を紹介</title>
    <link href="https://future-architect.github.io/articles/20200622/"/>
    <id>https://future-architect.github.io/articles/20200622/</id>
    <published>2020-06-22T04:08:22.000Z</published>
    <updated>2020-06-29T01:49:15.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG メディアユニットの久保です。</p><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り🌸</a> #16　業務効率化・コミュニケーションツールSlack入門です。</p><img src="/images/20200622/1.png"><p>コロナ影響により業界各社がテレワーク中心の業務体制を準備する中、コミュニケーションツールの需要が一気に高まってきました。</p><p>この環境の中、各社がこぞって求めているのは、テレワーク上でもオフラインと同じように密なコミュニケーションを取れる手段です。新型コロナが流行してから、約２週間で大手コミュニケーションツール<a href="https://slack.com/intl/ja-jp/" target="_blank" rel="noopener">Slack</a>の同時接続数が250万人超となったニュースが、記憶に新しいですね。</p><p>そんな中、フューチャーは密なコミュニケーションを取るという目的に留まらず、Slackの拡張機能を使った業務の効率化を図っています。今年から配属される新人向けに日々の業務効率化・タスク管理の一つの手段を紹介できればと思います。</p><p>本記事では、私のチームが普段使用しているSlackの<strong>拡張機能</strong>を説明します。具体的な設定方法などは詳しく書いてある記事がたくさんあるのでググってみてください。</p><h1 id="普段使用しているSlackの拡張機能（ワークフロービルダー編）"><a href="#普段使用しているSlackの拡張機能（ワークフロービルダー編）" class="headerlink" title="普段使用しているSlackの拡張機能（ワークフロービルダー編）"></a>普段使用しているSlackの拡張機能（ワークフロービルダー編）</h1><p>私のチームではSlackの拡張機能であるワークフロービルダー（以降、WF）やAppsを使って、既存業務の効率化を図っています。<br>拡張機能の具体的な定義や作成方法は公式HPを参照してみてください。</p><ul><li>WF<ul><li>Slack内のアクション（メッセージやスタンプ）から後続のイベントを発生させる機能</li><li>公式URL：<a href="https://slack.com/intl/ja-jp/features/workflow-automation" target="_blank" rel="noopener">https://slack.com/intl/ja-jp/features/workflow-automation</a></li></ul></li></ul><h2 id="①スタンプを押すだけでタスクのTODOリスト化"><a href="#①スタンプを押すだけでタスクのTODOリスト化" class="headerlink" title="①スタンプを押すだけでタスクのTODOリスト化"></a>①スタンプを押すだけでタスクのTODOリスト化</h2><p>Slack上で発覚したタスクに対し、スタンプ（絵文字）をつけることでメンバーのTODOに追加しています。<br>具体的な例で説明すると以下のシーン。</p><img src="/images/20200622/2.png"><p>上記の例では、他メンバーからタスクを強制的に追加された！！のような表現になっていますが、普段は自分のタスク管理のために、やりとりで発覚したタスクを自身でスタンプを押してTODO化しています。</p><p>このように、スタンプ→TODOメッセージ化することで、ダイレクトメッセージ（Slackbot）上にTODOが一覧化されるため、タスクの漏れを防止すること・一覧上で視認することができます。今までは日々の会話から発覚したタスクに対して、わざわざ個人のメモ帳に張り付ける等していたタスクのリスト化が、WFを使うとスタンプを押すだけで管理することができます。</p><h2 id="②勤怠連絡のフォーマット化"><a href="#②勤怠連絡のフォーマット化" class="headerlink" title="②勤怠連絡のフォーマット化"></a>②勤怠連絡のフォーマット化</h2><p>テレワークが主軸となる中、各メンバーの勤務状況を共有するためにWFを使って、勤務状況共有の簡易化を図っています。</p><img src="/images/20200622/3.png"><p>予めWFでフォーマットを作成することで、勤怠連絡用のチャンネルからショートカット（青い稲妻マーク）によりWFを呼び出すことができます。このWF一つでは大きなコスト削減にはなりませんが、こういった日々の小さなタスクを定型化・自動化することで、本来やりたい業務に時間を費やすことができます。</p><h2 id="③新規メンバーアサイン時のガイドライン自動共有化"><a href="#③新規メンバーアサイン時のガイドライン自動共有化" class="headerlink" title="③新規メンバーアサイン時のガイドライン自動共有化"></a>③新規メンバーアサイン時のガイドライン自動共有化</h2><p>プロジェクトにメンバーが新規参画した際に行うプロジェクトルールやキャッチアップ資料の共有・ガイドを、WFで自動化しています。具体的には、特定のチャンネルに新しくメンバーを追加することをトリガーに、各種キャッチアップ資料が格納されたパスを自動で通知する仕組みを適用しています。</p><p>私たちのチームでは新規メンバー参画時に以下をWFで共有しています。</p><ul><li>Wiki</li><li>キャッチアップ資料のファイルパス</li><li>注意事項などチャンネルでピン留めされているスレッドのパス</li></ul><p>上記のように、参画時のガイドを自動化することで説明時間の削減を行っています。また、メンバーの新規参画～説明は頻繁に起こることではないため、定型化しておくことで共有しなければいけない情報の共有漏れなども防ぐことができています。</p><h1 id="普段使用しているSlackの拡張機能（Apps編）"><a href="#普段使用しているSlackの拡張機能（Apps編）" class="headerlink" title="普段使用しているSlackの拡張機能（Apps編）"></a>普段使用しているSlackの拡張機能（Apps編）</h1><p>Slack Appsには、様々なAppsが提供されています。</p><p>例えば、「<a href="https://slack.com/apps/A6L22LZNH-aws-chatbot" target="_blank" rel="noopener">AWSチャットボット</a>」を使えばAWS上のリソースをわざわざマネジメントコンソールにアクセスしなくてもSlack上で監視および操作することができます。</p><p>私たちのチームでは、業務形態に合わせてチーム固有のappを作成しています。具体的にはSlack Apps作成用の部品である「<a href="https://slack.com/intl/ja-jp/help/articles/115005265063-Slack-%E3%81%A7%E3%81%AE-Incoming-Webhook-%E3%81%AE%E5%88%A9%E7%94%A8" target="_blank" rel="noopener">Incoming Webhooks</a>」を利用して、外部サービスがイベントを発火する際に、Slackに対して通知連携をすることで、「〇〇が発生したらSlackにもメッセージが投稿される」仕組みを実現しています。</p><ul><li>Apps<ul><li>外部アクションを起点にSlack内部に後続のイベントを発生させる機能</li><li>公式URL：<a href="https://slack.com/intl/ja-jp/apps" target="_blank" rel="noopener">https://slack.com/intl/ja-jp/apps</a></li></ul></li></ul><h2 id="GitLabのCommit-MergeRequestを通知"><a href="#GitLabのCommit-MergeRequestを通知" class="headerlink" title="GitLabのCommit/MergeRequestを通知"></a>GitLabのCommit/MergeRequestを通知</h2><p>GitLabからCommit/MergeRequestの通知をSlackに連携することができます。</p><p>具体的な操作手順は少し古いですが<a href="https://qiita.com/M4e/items/c26d938e73830b0ba6b9" target="_blank" rel="noopener">まとめてくれている記事</a>があるので、参考にしてみてください。<br>要約すると以下の手順で設定していきます。</p><ol><li><a href="https://api.slack.com/" target="_blank" rel="noopener">Slackアプリを作成</a></li><li>Slackアプリの「Incoming Webhooks」を設定し、「WebhooksURL」を発行。</li><li>GitLabのsettings/Integrationsから2で発行した「WebhooksURL」を設定。</li></ol><p>上記の設定を行うことにより、ソースレビューの状況やMasterブランチのcommitをSlackで通知を受けることができます。レビュアーにMergeRequestしたけど気づいてもらえない等のタイムラグをSlack自動通知で認知してもらうことができます。開発経験が乏しいアサイン当初などはソースレビューをお願いする機会が頻繁にあると思うので、この機能があると先輩社員に自動で通知がいくのでありがい機能となるはずです。</p><h1 id="【番外編】GoogleAppsScriptでZabbix→GmailのメッセージをSlackに通知"><a href="#【番外編】GoogleAppsScriptでZabbix→GmailのメッセージをSlackに通知" class="headerlink" title="【番外編】GoogleAppsScriptでZabbix→GmailのメッセージをSlackに通知"></a>【番外編】GoogleAppsScriptでZabbix→GmailのメッセージをSlackに通知</h1><p>Zabbixの通知をGmail経由（GoogleAppsScript）でSlackにも投稿しています。</p><p>GASを挟んでいるため本記事では番外編としていますが、障害周りの通知もSlackへ連携しリアルタイムで認知できる仕組みを作っています。<br><a href="https://qiita.com/Quikky/items/9de56c049304885a4f4f" target="_blank" rel="noopener">こちらの記事</a>が参考になりました。</p><p>本記事を作成する際に改めてSlack Appを調べていいるとZabbixから直接Slackに連携することもできるようなので、次々に新しい方法が出ているなと感じました。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>働く環境や利用するツールが変わることで、業務方法やタスク管理方法が着々と変わっていきます。今まで自身の中で最適解であった方法よりもさらに良い方法が生まれてきている環境です。</p><p>勤続年数が多い先輩社員はそれぞれ自身の業務効率化・タスク管理がある程度確立しているなか、今年からアサインされる新人のみなさんはぜひ積極的に新しい技術・新しいサービスを取り入れて、先輩社員に「そんなサービスあるんだ！？」とあっと驚かしてみてはいかがでしょうか。自動化って便利だしかっこいいですよね。</p><p>その１ステップ目として、Slackの拡張機能は早いものなら5分で作れるものもあるので、手を出してみるにはおすすめの手段（の一つ）です。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG メディアユニットの久保です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-archit
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Slack" scheme="https://future-architect.github.io/tags/Slack/"/>
    
      <category term="ChatOps" scheme="https://future-architect.github.io/tags/ChatOps/"/>
    
  </entry>
  
  <entry>
    <title>webpack入門</title>
    <link href="https://future-architect.github.io/articles/20200619/"/>
    <id>https://future-architect.github.io/articles/20200619/</id>
    <published>2020-06-19T01:19:09.000Z</published>
    <updated>2020-06-29T01:49:13.133Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200619/top.png"><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>15 日目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><strong>想定読者はプログラミング初心者/フロントエンド未経験者です。</strong></p><p>TIG メディアユニットの二瓶賢です。<br>入門祭りということで、今回はフロントエンドの入門記事を書きました。</p><p>JavaScriptでの開発は実行結果が視覚的&amp;ツール周りが充実しているのでプログラミング覚えたての人も楽しみながら進められると思います。一方、開発環境周りは充実しすぎているがゆえ難しいと思ったので記事にしました。</p><p>webpackがどんなものか理解し、実際にwebpackを使えるようになることをゴールとしています。</p><h2 id="webpack-について"><a href="#webpack-について" class="headerlink" title="webpack について"></a>webpack について</h2><p><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a>とはフロントエンドのモジュールバンドラーツールです。  簡単に言うと、部品(モジュール)単位で開発した複数のJSを1つのJSにまとめる(バンドル)ツールです。(実は、JSだけでなくCSS, 画像ファイルについてもバンドルできます)</p><p>webpackを使うと、以下の利点があります。</p><ol><li>ファイルがまとめられる=通信の回数をまとめられるのでHTTP リクエストの回数が減り、パフォーマンス向上に繋がる</li><li>ファイルを部品単位で作れるので、管理がしやすくなる</li></ol><p>1.の具体例を出します。</p><p>例えば、1 ページで複数のJSをモジュール単位で開発していたとします。webpackを使わない場合HTMLは以下のようになります。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/button.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/form.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/toggle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>webpackを使う場合は以下のようになります。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>複数のJSファイルを<code>dist/main.js</code>にバンドルすることができます。そのため、開発者はファイルを部品単位で開発し、まとめ方をwebpackで指定してあげるだけで良くなります。</p><h2 id="webpack-導入手順"><a href="#webpack-導入手順" class="headerlink" title="webpack 導入手順"></a>webpack 導入手順</h2><p>webpackは<a href="https://nodejs.org/ja/" target="_blank" rel="noopener">Node.js</a> (JavaScriptの実行環境) 上で動きます。<br>※ここではNode.js についての詳細な説明は割愛します。</p><p>次に、<a href="https://docs.npmjs.com/about-npm/" target="_blank" rel="noopener">npm</a>を使ってwebpackをインストールします。</p><p>npmについても詳細は割愛します。端的に記載するとnpm(Node Packaging Manager)はNode.jsのパッケージ管理ツールです。JavaScriptのパッケージ(フレームワーク/ライブラリ/ツール)のインストールや、バージョン管理が可能です。</p><p>npmでの開発を初めるためのコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> init -y</span><br></pre></td></tr></table></figure><p>下記のコマンドでwebpackをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> isntall -D webpack webpack-cli</span><br></pre></td></tr></table></figure><p>これでwebpackを使う準備は完了です。</p><h2 id="実際に-webpack-を使ってみよう"><a href="#実際に-webpack-を使ってみよう" class="headerlink" title="実際に webpack を使ってみよう"></a>実際に webpack を使ってみよう</h2><p>実際にwebpackを体験してみましょう。JSファイルをバンドルし、バンドル後のJSファイルをHTML上から読み込みます。</p><p>まず、ディレクトリ <code>dist/</code>, <code>js/</code>を作成しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist/</span><br><span class="line">├── index.html</span><br><span class="line">├── js/</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── node_modules/</span><br></pre></td></tr></table></figure><p>さらに、JSファイルを2つ作成します。</p><p>まず、<code>js/hoge.js</code>を作成します。<code>alert()</code>でメッセージを表示する機能を持つ部品(モジュール)として作成します。</p><figure class="highlight js"><figcaption><span>hoge.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">alertMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"from hoge.js"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いて、<code>js/entry.js</code>を作成します。<br>このファイルはモジュールを使う側のJSファイルです。</p><figure class="highlight js"><figcaption><span>entry.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; alertMessage &#125; <span class="keyword">from</span> <span class="string">"./hoge"</span></span><br><span class="line"></span><br><span class="line">alertMessage()</span><br></pre></td></tr></table></figure><p>さて、この2つのJSファイルをバンドリングするためwebpackを使います。<br><code>./webpack.config.js</code>を作成します。</p><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  entry: <span class="string">'./js/entry.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>これはwebpackの設定ファイルです。</p><p>上記では設定は2つ指定しています。<code>mode</code>では、開発モードでビルドすることを指定しています。<code>mode</code>は<code>development</code>(開発モード),<code>production</code>(製品モード),<code>none</code>(指定なし)の3つあります。<code>entry</code>では、エントリーポイント(一番初めの他モジュールの呼び出し元ファイル)を<code>./js/entry.js</code>に指定しています。</p><p>さて、webpackの設定は終わったので実際にwebpackを実行してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$./node_modules/.bin/webpack</span><br></pre></td></tr></table></figure><p>結果は以下のように出るかと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hash: acbec46c248d0da2e3fb</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 117ms</span><br><span class="line">Built at: 06/17/2020 10:08:18 PM</span><br><span class="line">  Asset      Size  Chunks             Chunk Names</span><br><span class="line">main.js  4.54 KiB    main  [emitted]  main</span><br><span class="line">Entrypoint main = main.js</span><br><span class="line">[./js/entry.js] 53 bytes &#123;main&#125; [built]</span><br><span class="line">[./js/hoge.js] 63 bytes &#123;main&#125; [built]</span><br></pre></td></tr></table></figure><p>さて、ここで<code>dist/</code>の中身を観てみましょう。<br><code>dist/main.js</code>が作成されているはずです。</p><p><code>dist/main.js</code>はビルド済ですが、一旦中身を見てみると</p><figure class="highlight js"><figcaption><span>dist/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=&#123;&#125;;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">if</span>(t[n])<span class="keyword">return</span> t[n].exports;<span class="keyword">var</span> o=t[n]=&#123;<span class="attr">i</span>:n,<span class="attr">l</span>:!<span class="number">1</span>,<span class="attr">exports</span>:&#123;&#125;&#125;;<span class="keyword">return</span> e[n].call(o.exports,o,o.exports,r),o.l=!<span class="number">0</span>,o.exports&#125;r.m=e,r.c=t,r.d=<span class="function"><span class="keyword">function</span>(<span class="params">e,t,n</span>)</span>&#123;r.o(e,t)||<span class="built_in">Object</span>.defineProperty(e,t,&#123;<span class="attr">enumerable</span>:!<span class="number">0</span>,<span class="attr">get</span>:n&#125;)&#125;,r.r=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"undefined"</span>!=<span class="keyword">typeof</span> <span class="built_in">Symbol</span>&amp;&amp;<span class="built_in">Symbol</span>.toStringTag&amp;&amp;<span class="built_in">Object</span>.defineProperty(e,<span class="built_in">Symbol</span>.toStringTag,&#123;<span class="attr">value</span>:<span class="string">"Module"</span>&#125;),<span class="built_in">Object</span>.defineProperty(e,<span class="string">"__esModule"</span>,&#123;<span class="attr">value</span>:!<span class="number">0</span>&#125;)&#125;,r.t=<span class="function"><span class="keyword">function</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">if</span>(<span class="number">1</span>&amp;t&amp;&amp;(e=r(e)),<span class="number">8</span>&amp;t)<span class="keyword">return</span> e;<span class="keyword">if</span>(<span class="number">4</span>&amp;t&amp;&amp;<span class="string">"object"</span>==<span class="keyword">typeof</span> e&amp;&amp;e&amp;&amp;e.__esModule)<span class="keyword">return</span> e;<span class="keyword">var</span> n=<span class="built_in">Object</span>.create(<span class="literal">null</span>);<span class="keyword">if</span>(r.r(n),<span class="built_in">Object</span>.defineProperty(n,<span class="string">"default"</span>,&#123;<span class="attr">enumerable</span>:!<span class="number">0</span>,<span class="attr">value</span>:e&#125;),<span class="number">2</span>&amp;t&amp;&amp;<span class="string">"string"</span>!=<span class="keyword">typeof</span> e)<span class="keyword">for</span>(<span class="keyword">var</span> o <span class="keyword">in</span> e)r.d(n,o,<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;<span class="keyword">return</span> e[t]&#125;.bind(<span class="literal">null</span>,o));<span class="keyword">return</span> n&#125;,r.n=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=e&amp;&amp;e.__esModule?<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.default&#125;:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e&#125;;<span class="keyword">return</span> r.d(t,<span class="string">"a"</span>,t),t&#125;,r.o=<span class="function"><span class="keyword">function</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(e,t)&#125;,r.p=<span class="string">""</span>,r(r.s=<span class="number">0</span>)&#125;([<span class="function"><span class="keyword">function</span>(<span class="params">e,t,r</span>)</span>&#123;<span class="string">"use strict"</span>;r.r(t),alert(<span class="string">"from hoge.js"</span>)&#125;]);</span><br></pre></td></tr></table></figure><p>と、綺麗なコードが生成されているかと思います。<br>これがバンドル後のJSファイルです。<br>もう何が書いてあるのかわかりません。<br>正しく意図したとおり動くのか、実際に実行してみましょう。</p><p><code>./index.html</code>を作成します。</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>実際にこれをブラウザで開いてみましょう。<br>開くと、意図したとおり以下のようなメッセージが出ます。(画像はChromeで開いた場合)<br><img src="/images/20200619/photo_20200619_01.png"></p><p>最後に、webpackのコマンドオプションを一つ紹介します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$./node_modules/.bin/webpack --watch</span><br></pre></td></tr></table></figure><p>これを指定するとJSファイルの変更を監視し、変更を検知すると自動でwebpackが走ります。<br>試しに、監視状態のまま<code>js/hoge.js</code>で表示するメッセージを変更してみましょう。</p><figure class="highlight js"><figcaption><span>hoge.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">alertMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"****from hoge.js****"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>その後、もう一度<code>./index.html</code>をブラウザで開いてみましょう。メッセージが変更されていることが確認できるかと思います。</p><p>これで、逐次webpackを実行する手間もなくなりました。</p><hr><p>今回は<code>webpack.config.js</code>については必要最低限の設定しかしませんでしたが実際はたくさん設定することになります。<br>例えば、利用するプラグインの設定をします。<br>webpackではプラグインは豊富に用意されています。<br>ここでは、一例をご紹介します。</p><ul><li>バンドル時に不要なスペースやコメント等を削除し軽量化するプラグイン：<a href="https://webpack.js.org/plugins/uglifyjs-webpack-plugin/" target="_blank" rel="noopener">UglifyjsWebpackPlugin</a></li><li>HTMLの生成までするプラグイン：<a href="https://webpack.js.org/plugins/html-webpack-plugin/" target="_blank" rel="noopener">HtmlWebpackPlugin</a></li><li><code>--watch</code>オプションで特定のファイルの監視を無視させるプラグイン：<a href="https://webpack.js.org/plugins/watch-ignore-plugin/" target="_blank" rel="noopener">WatchIgnorePlugin</a></li></ul><p>たくさん設定が増え複雑化するため、実際の開発では共通設定/開発環境設定/本番環境設定としてそれぞれ<code>webpack.common.js</code>, <code>webpack.dev.js</code>, <code>webpack.prod.js</code>と分けて設定を記載していきます。<br><a href="https://webpack.js.org/guides/production/#setup" target="_blank" rel="noopener">公式ドキュメントの例</a></p><p>また、<code>./node_modules/.bin/webpack</code>はnpm-scriptsに登録するとよりよいです。<br><code>./package.json</code>にて、scriptsに<code>&quot;コマンド名&quot;:&quot;タスク&quot;</code>を登録すると、以下のように実行できます。<br>例：</p><figure class="highlight"><figcaption><span>./package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "build": "webpack",</span><br><span class="line">    "watch": "webpack --watch"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>npm-script実行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> run build</span><br></pre></td></tr></table></figure><p>上記のコマンドは<code>$./node_modules/.bin/webpack</code>と実行内容は同じですが、こちらの方が簡潔かと思います。<br><code>watch</code>に関しても同様です。<br>npm-scriptsを上手く設定することで、複雑なタスクも簡潔に実行できるようになります(これはwebpackに限りません)。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>webpackの機能をすべて紹介することはできませんでしたが、webpackがどのような目的のツールなのかを知っていただき実際にwebpackを体験していただけたなら幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200619/top.png&quot;&gt;


&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;15 日目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめ
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Node.js" scheme="https://future-architect.github.io/tags/Node-js/"/>
    
      <category term="webpack" scheme="https://future-architect.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #14 暗号通信入門 </title>
    <link href="https://future-architect.github.io/articles/20200618/"/>
    <id>https://future-architect.github.io/articles/20200618/</id>
    <published>2020-06-18T00:33:37.000Z</published>
    <updated>2020-06-29T01:49:26.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG メディアチームの竹中です。</p><p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り🌸</a> #14　暗号通信入門です。</p><p>新型コロナ肺炎の感染拡大に伴い、多くの方がインターネット通販をいつも以上に利用したのでは無いでしょうか？その際、クレジットカード番号など漏洩したら困る個人情報が多く含まれますので、どのような通信が行われているか分からないと気が気ではありませんね。もちろんやり取りには暗号通信が利用されています。</p><p>私自身、「仕組みは知っているけど検証はしたことがなかったな」と思い、HTTP通信とHTTPS通信の通信内容を確認しつつ、暗号通信入門記事としていきます。本記事では、入門記事として簡単な解説と検証内容を記載し、詳細な仕組みなど後記する参考文献などで調べて頂くことを想定しています。</p><p>では、早速見ていきましょう。</p><h1 id="HTTP通信？HTTPS通信？"><a href="#HTTP通信？HTTPS通信？" class="headerlink" title="HTTP通信？HTTPS通信？"></a>HTTP通信？HTTPS通信？</h1><p>インターネット通販などでブラウザを使う際、ブラウザとWebサーバーで主に行われている通信です。<br>通信内容を暗号化せずに通信（＝HTTP通信）すると無関係な人も通信内容を読み取れるため、通信内容を暗号化して、通信先にのみ通信内容を正しく読み取れるように（＝HTTPS通信）しようというものです。</p><img src="/images/20200618/photo_20200618_01.png" style="border:solid 1px #000000"><h1 id="暗号化していないHTTP通信"><a href="#暗号化していないHTTP通信" class="headerlink" title="暗号化していないHTTP通信"></a>暗号化していないHTTP通信</h1><p>HTTP通信ではどのように通信内容が見えるのでしょうか。早速検証してみましょう。</p><h2 id="HTTP通信をするサーバを用意"><a href="#HTTP通信をするサーバを用意" class="headerlink" title="HTTP通信をするサーバを用意"></a>HTTP通信をするサーバを用意</h2><p>Node.jsをインストールして、以下のファイルを用意します。</p><figure class="highlight js"><figcaption><span>server-http.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'fs'</span>).readFileSync(<span class="string">'form.html'</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// サーバー起動</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">         <span class="comment">// 初期表示ではformを返す</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;)</span><br><span class="line">        res.end(html);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">         <span class="comment">// formからの入力値を解釈して返却</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;)</span><br><span class="line">        req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;data += chunk&#125;)</span><br><span class="line">            .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                res.end(<span class="string">`form: <span class="subst">$&#123;data&#125;</span> `</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(port)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server is running : http://localhost:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>from.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">    Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Credit No:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"creditNo"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTTP通信を行うサーバを起動します。<br><code>node .\server-http.js start</code></p><p>ブラウザで<code>http://localhost:8080/</code>を開くと下記のようなフォームが表示されます。<br><img src="/images/20200618/photo_20200618_02.png" class="img-middle-size"></p><h2 id="通信内容を確認"><a href="#通信内容を確認" class="headerlink" title="通信内容を確認"></a>通信内容を確認</h2><p>今回はWiresharkでパケット取得してみます。</p><p>Wiresharkはネットワーク・アナライザ・ソフトウェアで、指定したネットワークインターフェイス上を通過するネットワークパケットをキャプチャすることができます。要するに、ブラウザからWebサーバへ送られるネットワーク通信の内容を監視することができます。</p><p>こちらを使って、ブラウザから送られるHTTP通信・HTTP通信の内容を見ていきます。</p><p>インストールや使い方については『<a href="https://beginners-network.com/wireshark.html" target="_blank" rel="noopener">Wiresharkの使い方 - ネットワーク入門サイト</a>』を参考にしてください。</p><p>Wiresharkでキャプチャ取得を開始し、「http」でフィルターします。ブラウザから<code>http://localhost:8000/</code>のフォームを開き、『送信』（HTTPリクエスト）します。</p><img src="/images/20200618/photo_20200618_03.png" class="img-middle-size"><p>サーバ側では問題なくリクエスト情報を取得できていますね。<br><img src="/images/20200618/photo_20200618_04.png" class="img-middle-size"></p><p>Wiresharkで送信内容見てみると、NameもcreditNoもそのまま送られています。</p><img src="/images/20200618/photo_20200618_05.png" style="border:solid 1px #000000"><p>HTTP通信で情報を送ってしまった場合、 <strong><em>通信内容から容易に情報が読み取れてしまう</em></strong> 、ということですね。</p><h1 id="暗号化したHTTPS通信"><a href="#暗号化したHTTPS通信" class="headerlink" title="暗号化したHTTPS通信"></a>暗号化したHTTPS通信</h1><p>HTTP通信では、「通信内容から容易に情報が読み取れてしまう」ことが分かりました。</p><p>次にHTTPS通信の内容を見て、HTTPS通信では本当に情報が読み取れないのかを確認していきます。</p><p>しかし、暗号通信を行うためには、暗号化するための情報や複合化するための情報が分からないと通信のやり取りができません。そのためHTTPS通信の際には、実際に送信したい内容を送る前に暗号通信準備を行っています。暗号通信準備については、『<a href="https://www.infraexpert.com/study/security28.html" target="_blank" rel="noopener">SSL/TLSネゴシエーション - ネットワークエンジニアとして</a>』を参照ください。</p><h2 id="暗号化のための証明書、秘密鍵を用意"><a href="#暗号化のための証明書、秘密鍵を用意" class="headerlink" title="暗号化のための証明書、秘密鍵を用意"></a>暗号化のための証明書、秘密鍵を用意</h2><p>HTTPS通信を行う際のSSL/TLSネゴシエーションに必須となる、サーバの証明書・秘密鍵を用意します。</p><p>執筆時はWindows、かつ認証Proxy環境の環境で検証を行っています。今回はchocolateyをインストール後、mkcertのインストールして、mkcertでサーバーの証明書・秘密鍵を作成を行います。mkcertはローカルで信頼された証明書を発行するためのソフトウェア、chocolateyはWindows用のパッケージ管理ソフトウェアで、今回はmkcertをインストールするために使用します。</p><p>まずは下記等を参考として、chocolateyのインストールをしてください。</p><ul><li><a href="https://qiita.com/Koutaru/items/41a87ea4004fa685de55" target="_blank" rel="noopener">Windows環境にchocolateyをインストールし、使う</a></li><li><a href="https://qiita.com/geotrader/items/33b5db1832bb42979ba9" target="_blank" rel="noopener">認証プロキシ環境下でのchocolateyインストール</a></li></ul><p>次にmkcertのインストールして、サーバの証明書・秘密鍵を作成を行います。コマンドプロンプトを管理者権限で起動し、下記を実行してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkcertをインストール</span></span><br><span class="line"><span class="variable">$cinst</span> -y mkcert</span><br><span class="line"></span><br><span class="line"><span class="comment"># ローカル環境に認証局を作成</span></span><br><span class="line"><span class="variable">$mkcert</span> -install</span><br><span class="line"></span><br><span class="line"><span class="comment"># localhostの証明書、秘密鍵を作成</span></span><br><span class="line"><span class="comment"># ※カレントディレクトリに「localhost+2.pem」「localhost+2-key.pem」が生成される</span></span><br><span class="line"><span class="variable">$mkcert</span> localhost 127.0.0.1 ::1</span><br></pre></td></tr></table></figure><h2 id="HTTPS通信をするサーバを用意"><a href="#HTTPS通信をするサーバを用意" class="headerlink" title="HTTPS通信をするサーバを用意"></a>HTTPS通信をするサーバを用意</h2><p>以下のファイルを用意します。</p><figure class="highlight js"><figcaption><span>server-http.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">const</span> fs    = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = fs.readFileSync(<span class="string">'form.html'</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8443</span>;</span><br><span class="line"><span class="keyword">const</span> options = &#123; </span><br><span class="line">    key: fs.readFileSync(<span class="string">'localhost+2-key.pem'</span>),</span><br><span class="line">    cert: fs.readFileSync(<span class="string">'localhost+2.pem'</span>)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// サーバー起動</span></span><br><span class="line">https.createServer(options, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">        <span class="comment">// 初期表示ではformを返す</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;)</span><br><span class="line">        res.end(html);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">        <span class="comment">// formからの入力値を解釈して返却</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;)</span><br><span class="line">        req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;data += chunk&#125;)</span><br><span class="line">            .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                res.end(<span class="string">`form: <span class="subst">$&#123;data&#125;</span> `</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(port);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server is running : https://localhost:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>from.html　※HTTPサーバで用意したものと同じです。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">    Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Credit No:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"creditNo"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用意したファイルは『暗号化のための鍵情報などを用意』で作成したファイルと同じ場所に配置します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">folder/</span><br><span class="line">　├ form.html</span><br><span class="line">　├ localhost+2-key.pem</span><br><span class="line">　├ localhost+2.pem</span><br><span class="line">　└ server-https.js</span><br></pre></td></tr></table></figure><p>HTTPS通信を行うサーバを起動します。<br><code>node .\server-https.js start</code></p><p>ブラウザで<code>https://localhost:8443/</code>を開きます。</p><h2 id="WireSharckで通信内容を確認"><a href="#WireSharckで通信内容を確認" class="headerlink" title="WireSharckで通信内容を確認"></a>WireSharckで通信内容を確認</h2><p>Wiresharkでパケット取得してみます。</p><p>キャプチャ取得を開始し、「ipv6.src == ::1」でフィルターします。<br>フォームからHTTPリクエストします。<br><img src="/images/20200618/photo_20200618_06.png" class="img-middle-size"></p><p>サーバ側では問題なくリクエスト情報を取得できていますね。<br><img src="/images/20200618/photo_20200618_07.png" class="img-middle-size"></p><p>しかし、Wiresharkで通信内容見てみると、HTTP通信の時と違ってNameもcreditNoも見つかりません。それどころか、HTTP通信のときにあったGETやPOSTというやり取りすら見つけることができません。</p><img src="/images/20200618/photo_20200618_08.png" style="border:solid 1px #000000"><p>このようにHTTPS通信の内容は、暗号化されているため、サーバが保持している秘密鍵がないと暗号化前の通信内容が分からない状態になっています。</p><h1 id="HTTPS通信の内容を復号化して平文を確認"><a href="#HTTPS通信の内容を復号化して平文を確認" class="headerlink" title="HTTPS通信の内容を復号化して平文を確認"></a>HTTPS通信の内容を復号化して平文を確認</h1><p>暗号化されている？見逃しているだけでHTTPS通信でも平文が送られてるのでは？と考える方もいるかもしれません。</p><p>次に、Wiresharkでキャプチャしている通信内容を復号して平文を確認してみましょう。復号方法は『<a href="https://www7390uo.sakura.ne.jp/wordpress/archives/709" target="_blank" rel="noopener">HTTPSによる暗号化された通信のやり取りをWiresharkで復号して内容を読み取る</a>』を参考にしてください。</p><p>筆者検証時はWireshark設定項目から「Protocols &gt; SSL」がなくなっていたため、「Protocols &gt; TLS」に同様の設定をして検証しています。参考先に記載がありますが「鍵情報が漏洩するとHTTPS通信内容が復号できる」ということですので、鍵情報の取扱にはご注意ください。</p><p>Wiresharkの設定後、再度HTTPS通信を行います。先ほどまでApplication Dataと表記されていた箇所が復号され、平文が確認できます。<br><img src="/images/20200618/photo_20200618_09.png" style="border:solid 1px #000000"></p><p>キャプションを比較してみると、確かに設定を入れる前のWiresharkではApplication Dataと表記されていたところが、復号化されて平文になって確認できていることが分かります。<br><img src="/images/20200618/photo_20200618_10.png" style="border:solid 1px #000000"></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はHTTP通信とHTTPS通信について、検証・確認しました。</p><p>昨今、インターネットの普及に伴い、企業では勿論ですが、プライベートで利用するインターネット通販でも個人情報を入力する機会は多くあるため、一人一人が当たり前にセキュリティ対策を知り、考えなければいけないものになってきています。</p><p>本記事は触れていませんが、HTTPS通信を行う際にその通信先を証明してくれる『信用できる第三者（証明局）』を何をもって信用するか、といった問題など、懸念を上げれば限がないぐらいセキュリティ対策は考えることが多いです。しかし、企業も個人も身を守るために避けては通れないことの一つがセキュリティ対策です。</p><p>HTTP通信に関しては、Chromeで2019年末から2020年第1四半期にわたってHTTPS/HTTP混在ページにおけるHTTPをデフォルトでブロックの対象としていくことが宣言されるなど、各サイトでHTTPSへの対応が必須となってきています。</p><p>フリーで自動化されたオープンな認証局として、『<a href="https://letsencrypt.org/ja/" target="_blank" rel="noopener">Let’s Encrypt</a>』というサービスもあります。ISRGが公共の利益のために運営・提供しているサービスで、2016年4月12日 に正式サービスが開始して以降、毎日多くの証明書を発行しており、HTTPSへの対応もあまりコストかからずできるようになっています。</p><p>本記事は、前記の通り詳しい仕組みの解説記事とはなっておりません。最後に参考文献について記載しますので、皆さんの興味・関心に応じて別途調べてください。</p><p>普段何気なく使っている、身近な暗号通信に興味を持ってもらうきっかけになれば、幸いです！</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://www.amazon.co.jp/%E6%9A%97%E5%8F%B7%E6%8A%80%E8%A1%93%E5%85%A5%E9%96%80-%E7%AC%AC3%E7%89%88-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797382228" target="_blank" rel="noopener">暗号技術入門</a><ul><li>「対称暗号」「公開鍵暗号」「デジタル署名」「PKI」「PGP」「SSL/TLS」など、<br>暗号技術の基礎を、たくさんの図とやさしい文章で解説しています。</li></ul></li><li><a href="https://www.lambdanote.com/products/tls" target="_blank" rel="noopener">プロフェッショナルSSL/TLS</a><ul><li>いまやインターネットにおける暗号化通信に不可欠となったセキュリティプロトコルであるTLS（SSL）の全体像を体系的かつ具体的に語った、‟Bulletproof SSL and TLS”（Ivan Ristić 著）の全訳</li></ul></li><li><a href="https://www.oreilly.co.jp/books/9784873119038/" target="_blank" rel="noopener">Real World HTTP</a><ul><li>HTTPが進化する道筋をたどりながら、ブラウザが内部で行っていること、サーバーとのやりとりの内容などについて、プロトコルの実例や実際の使用例などを交えながら紹介！！</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG メディアチームの竹中です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-archite
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="暗号" scheme="https://future-architect.github.io/tags/%E6%9A%97%E5%8F%B7/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Wireshark" scheme="https://future-architect.github.io/tags/Wireshark/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸 #13 Swift Compositional Layouts入門：複雑なCollectionViewをシンプルに実装する</title>
    <link href="https://future-architect.github.io/articles/20200617/"/>
    <id>https://future-architect.github.io/articles/20200617/</id>
    <published>2020-06-17T01:20:21.000Z</published>
    <updated>2020-06-29T01:49:24.183Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の第13弾です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG メディアユニットの福谷（ふくや）です。</p><p>お仕事では主にサーバーサイド領域で開発していますが、趣味でiOSアプリを開発しており、春の入門祭りの社内アナウンスがあったので書いてみようと思います。</p><p>iOSアプリで記事や写真などを一覧表示させたい場合、必ずと言っていいほどCollectionView（あるいはTableView）が採用されると思います。</p><p>iPhoneが発売された当初のデザインは、縦にコンテンツが並ぶだけのレイアウトでしたが、昨今はコンテンツの一覧性・視認性をより高めるために、縦にも横にもスクロールできるCollectionViewが一般的になってきています。<br><img src="/images/20200617/1.png" class="img-small-size"></p><h1 id="Compositional-Layouts"><a href="#Compositional-Layouts" class="headerlink" title="Compositional Layouts"></a>Compositional Layouts</h1><p>そこでCompositional Layoutsの登場です。</p><p>Compositional LayoutsはWWDC2019に発表された複雑なレイアウトをシンプルに実装するための考え方です。CollectionViewにおいては<code>UICollectionViewCompositionalLayout</code>クラス<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>を利用します。</p><p>Compositional Layoutsの詳しい解説はWWDC2019の動画<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を見るか、それを元に解説した記事<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>もあるのでそちらを参照してください。また公式サンプルコード<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>もかなり参考になるためおすすめです。</p><p>※公式ではiOS13でサポートされていますが、iOS13以前でも利用可能にするためのライブラリ<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>がでています。</p><h1 id="アプリを作る"><a href="#アプリを作る" class="headerlink" title="アプリを作る"></a>アプリを作る</h1><p>以下のようなFuture Tech Blogリーダーを作ってみようと思います。</p><p>ソース全量は<a href="https://github.com/popai306/FutureTechBlogReader" target="_blank" rel="noopener">こちら</a>。<br>※以降の解説はCompositional Layoutsの実装部分に焦点を当てて解説していきます。</p><img src="/images/20200617/photo_20200617_01.gif" class="img-middle-size" style="border:solid 1px #000000"><h3 id="item・group・sectionの構成を決める"><a href="#item・group・sectionの構成を決める" class="headerlink" title="item・group・sectionの構成を決める"></a>item・group・sectionの構成を決める</h3><p>Compositional Layoutは item・group・section、そしてsectionを内包するlayoutにより構成されます。<br><img src="/images/20200617/2.png" class="img-middle-size"></p><p>今回作るアプリのUIを例に、item・group・sectionをどう構成するかについて示したのが下記の画像です。<br><img src="/images/20200617/3.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>それではLayoutを書いていきましょう。</p><h3 id="Compositional-Layoutで実装する"><a href="#Compositional-Layoutで実装する" class="headerlink" title="Compositional Layoutで実装する"></a>Compositional Layoutで実装する</h3><p>まず大枠のSectionから書いていきます。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createLayout</span><span class="params">()</span></span> -&gt; <span class="type">UICollectionViewLayout</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sectionProvider = &#123; (sectionIndex: <span class="type">Int</span>,</span><br><span class="line">        layoutEnvironment: <span class="type">NSCollectionLayoutEnvironment</span>) -&gt; <span class="type">NSCollectionLayoutSection?</span> <span class="keyword">in</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> section = <span class="type">NSCollectionLayoutSection</span>(group: group)</span><br><span class="line">        section.orthogonalScrollingBehavior = sectionKind.scrollingBehavior()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//①</span></span><br><span class="line">        section.interGroupSpacing = <span class="number">10</span></span><br><span class="line">        <span class="comment">//②</span></span><br><span class="line">        section.contentInsets = <span class="type">NSDirectionalEdgeInsets</span>(top: <span class="number">0</span>, leading: <span class="number">15</span>, bottom: <span class="number">0</span>, trailing: <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// section headerの定義</span></span><br><span class="line">        <span class="keyword">let</span> sectionHeaderSize = <span class="type">NSCollectionLayoutSize</span>(widthDimension: .fractionalWidth(<span class="number">1.0</span>),</span><br><span class="line">                                                       heightDimension: .estimated(<span class="number">44</span>))</span><br><span class="line">        <span class="keyword">let</span> sectionHeader = <span class="type">NSCollectionLayoutBoundarySupplementaryItem</span>(layoutSize: sectionHeaderSize, elementKind: <span class="string">"header"</span>, alignment: .top)</span><br><span class="line">        section.boundarySupplementaryItems = [sectionHeader]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> section</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> config = <span class="type">UICollectionViewCompositionalLayoutConfiguration</span>()</span><br><span class="line">    <span class="comment">//③</span></span><br><span class="line">    config.interSectionSpacing = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> layout = <span class="type">UICollectionViewCompositionalLayout</span>(sectionProvider: sectionProvider, configuration: config)</span><br><span class="line">    <span class="keyword">return</span> layout</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sectionheaderSize</code>の<code>widthDimension</code>に引数として渡している<code>fractionalWidth(1.0)</code>は、sectionの横幅と同じ比率でheaderの横幅を定義することを意味します。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p><p>また、<code>heightDimension</code>に引数として渡している<code>estimated(44)</code>は、44で高さを指定するものの最終的なレイアウトはレンダリング時に決定します（＝「弱い定義」と勝手に呼んでいます）。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><br>ソースコード中の余白定義①②③はそれぞれUI上の下記のポイントに対応しています。<img src="/images/20200617/4.png" class="img-middle-size" style="border:solid 1px #000000"><p>続いてitem・groupのレイアウトを定義していきます。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createLayout</span><span class="params">()</span></span> -&gt; <span class="type">UICollectionViewLayout</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sectionProvider = &#123; (sectionIndex: <span class="type">Int</span>,</span><br><span class="line">        layoutEnvironment: <span class="type">NSCollectionLayoutEnvironment</span>) -&gt; <span class="type">NSCollectionLayoutSection?</span> <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// セクションのenum</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> sectionKind = <span class="type">SectionLayoutKind</span>(rawValue: sectionIndex) <span class="keyword">else</span> &#123; <span class="built_in">fatalError</span>(<span class="string">"unknown section kind"</span>) &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// itemの定義</span></span><br><span class="line">        <span class="keyword">let</span> itemSize = <span class="type">NSCollectionLayoutSize</span>(widthDimension: .fractionalWidth(<span class="number">1.0</span>),</span><br><span class="line">                                              heightDimension: .fractionalHeight(<span class="number">1.0</span>))</span><br><span class="line">        <span class="keyword">let</span> item = <span class="type">NSCollectionLayoutItem</span>(layoutSize: itemSize)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// groupの定義    </span></span><br><span class="line">        <span class="keyword">let</span> groupWidth = layoutEnvironment.container.effectiveContentSize.width - <span class="number">15</span> * <span class="number">2</span> - <span class="number">5</span></span><br><span class="line">        <span class="keyword">let</span> groupSize = <span class="type">NSCollectionLayoutSize</span>(widthDimension: .absolute(groupWidth),</span><br><span class="line">                                               heightDimension: .absolute(<span class="number">150</span>))</span><br><span class="line">        <span class="keyword">let</span> group: <span class="type">NSCollectionLayoutGroup</span></span><br><span class="line">        <span class="keyword">if</span> sectionKind == .recommend &#123;</span><br><span class="line">            group = <span class="type">NSCollectionLayoutGroup</span>.horizontal(layoutSize: groupSize, subitem: item, <span class="built_in">count</span>: <span class="number">2</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            group = <span class="type">NSCollectionLayoutGroup</span>.vertical(layoutSize: groupSize, subitem: item, <span class="built_in">count</span>: <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        group.interItemSpacing = <span class="type">NSCollectionLayoutSpacing</span>.fixed(<span class="number">10</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// sectionの定義</span></span><br><span class="line">        <span class="keyword">let</span> section = <span class="type">NSCollectionLayoutSection</span>(group: group)</span><br><span class="line">        section.orthogonalScrollingBehavior = sectionKind.scrollingBehavior()</span><br><span class="line">        section.interGroupSpacing = <span class="number">10</span></span><br><span class="line">        section.contentInsets = <span class="type">NSDirectionalEdgeInsets</span>(top: <span class="number">0</span>, leading: <span class="number">15</span>, bottom: <span class="number">0</span>, trailing: <span class="number">15</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> sectionHeaderSize = <span class="type">NSCollectionLayoutSize</span>(widthDimension: .fractionalWidth(<span class="number">1.0</span>),</span><br><span class="line">                                                       heightDimension: .estimated(<span class="number">44</span>))</span><br><span class="line">        <span class="keyword">let</span> sectionHeader = <span class="type">NSCollectionLayoutBoundarySupplementaryItem</span>(layoutSize: sectionHeaderSize, elementKind: <span class="string">"header"</span>, alignment: .top)</span><br><span class="line">        section.boundarySupplementaryItems = [sectionHeader]</span><br><span class="line">        <span class="keyword">return</span> section</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> config = <span class="type">UICollectionViewCompositionalLayoutConfiguration</span>()</span><br><span class="line">    config.interSectionSpacing = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> layout = <span class="type">UICollectionViewCompositionalLayout</span>(sectionProvider: sectionProvider, configuration: config)</span><br><span class="line">    <span class="keyword">return</span> layout</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SectionLayoutKind"><a href="#SectionLayoutKind" class="headerlink" title="SectionLayoutKind"></a>SectionLayoutKind</h4><p><code>SectionLayoutKind</code>はアプリ中の<code>おすすめ</code>や<code>春の入門祭り</code>などのセクションをenumで定義したもので、<br>下記の通り定義しています。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SectionLayoutKind</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> recommend, springEntry, goTips, serverless</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollingBehavior</span><span class="params">()</span></span> -&gt; <span class="type">UICollectionLayoutSectionOrthogonalScrollingBehavior</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .recommend:</span><br><span class="line">            <span class="keyword">return</span> .continuous</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> .groupPaging</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もし固定的にセクションを管理するならenumで定義しておくのが良いと思います。</p><p>一方でenumで定義するとenum内でセクションごとのレイアウト情報をいろいろ管理したくなりますが、<code>createLayout()</code>内にもレイアウト定義をしているので、見通しを良くするためにも最低限のレイアウト情報のみenum内で定義すべきだと思います。（この場合水平スクロールの挙動）</p><h4 id="groupのレイアウト定義"><a href="#groupのレイアウト定義" class="headerlink" title="groupのレイアウト定義"></a>groupのレイアウト定義</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> group: <span class="type">NSCollectionLayoutGroup</span></span><br><span class="line"><span class="keyword">if</span> sectionKind == .recommend &#123;</span><br><span class="line">    <span class="comment">// ①おすすめセクションのgroup定義</span></span><br><span class="line">    group = <span class="type">NSCollectionLayoutGroup</span>.horizontal(layoutSize: groupSize, subitem: item, <span class="built_in">count</span>: <span class="number">2</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ②おすすめセクション以外ののgroup定義</span></span><br><span class="line">    group = <span class="type">NSCollectionLayoutGroup</span>.vertical(layoutSize: groupSize, subitem: item, <span class="built_in">count</span>: <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// item間の空白の定義</span></span><br><span class="line">group.interItemSpacing = <span class="type">NSCollectionLayoutSpacing</span>.fixed(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>②おすすめセクション以外ののgroup定義</p><p><code>NSCollectionLayoutGroup.vertical(layoutSize: groupSize, subitem: item, count: 2)</code><br><code>vertical</code>で<code>count</code>を”２”にすることによって垂直にitemを２つスタックしています。</p><p>①おすすめセクションのgroup定義</p><p>おすすめの記事は画像を大きくして目立たせたいので水平にitemを２つスタックしています。<br><code>NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitem: item, count: 2)</code></p><h4 id="groupSizeの定義"><a href="#groupSizeの定義" class="headerlink" title="groupSizeの定義"></a>groupSizeの定義</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> groupWidth = layoutEnvironment.container.effectiveContentSize.width - <span class="number">15</span> * <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> groupSize = <span class="type">NSCollectionLayoutSize</span>(widthDimension: .absolute(groupWidth), heightDimension: .absolute(<span class="number">150</span>))</span><br></pre></td></tr></table></figure><p><code>layoutEnvironment.container.effectiveContentSize</code>はcollectionViewの描画領域を意味しています。今回は対応していませんが、例えばスマホの向きによってアプリのレイアウトを変えたい場合はこの値を使って分岐処理を書けば対応できます。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>以上が今回のアプリのレイアウト部分に関する解説になります。コメントを除いて38行で書けました。</p><p>同じレイアウトをUICollectionViewLayoutのカスタムクラスで実現しようとしたらかなりの行数・難易度になるのではないでしょうか。item・group・sectionの理解さえすれば私のような初学者でも簡易かつシンプルに実装できるので、今後のiOSアプリ開発でどんどん採用されていくのではと思います。</p><p>その際の参考になれば幸いです！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/kishikawakatsumi/IBPCollectionViewCompositionalLayout" target="_blank" rel="noopener">https://github.com/kishikawakatsumi/IBPCollectionViewCompositionalLayout</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://developer.apple.com/videos/play/wwdc2019/215/" target="_blank" rel="noopener">https://developer.apple.com/videos/play/wwdc2019/215/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://qiita.com/shiz/items/a6032543a237bf2e1d19#%E8%83%8C%E6%99%AF%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%99%82%E4%BB%A3%E3%81%AE%E5%A4%89%E5%8C%96" target="_blank" rel="noopener">https://qiita.com/shiz/items/a6032543a237bf2e1d19#%E8%83%8C%E6%99%AF%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%99%82%E4%BB%A3%E3%81%AE%E5%A4%89%E5%8C%96</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://developer.apple.com/documentation/uikit/nscollectionlayoutdimension/3199059-fractionalwidth" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/nscollectionlayoutdimension/3199059-fractionalwidth</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;"><a href="https://developer.apple.com/documentation/uikit/nscollectionlayoutdimension/3199057-estimated" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/nscollectionlayoutdimension/3199057-estimated</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;"><a href="https://developer.apple.com/documentation/uikit/uicollectionviewcompositionallayout" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uicollectionviewcompositionallayout</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;"><a href="https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/using_collection_view_compositional_layouts_and_diffable_data_sources" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/using_collection_view_compositional_layouts_and_diffable_data_sources</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;の第13弾です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="アプリ" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
      <category term="Swift" scheme="https://future-architect.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り 🌸#12 レシートで学ぶデータモデリング入門</title>
    <link href="https://future-architect.github.io/articles/20200616/"/>
    <id>https://future-architect.github.io/articles/20200616/</id>
    <published>2020-06-16T01:22:22.000Z</published>
    <updated>2020-06-29T01:49:21.699Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の第12弾です。</p><h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>こんにちは、TIGメディアユニットチームの川島です。</p><p>私は新卒でフューチャーに入社後、基幹系システム刷新PJのDBAからキャリアをスタートしました。その後、小売業の店舗システム刷新PJなど複数のPJで企画フェーズから導入フェーズまで幅広く経験し、現在は、人材サービス企業のクライアントの全社データ活用PJでコンサルティング業務を主として担当しています。</p><p>RDBMSについては論理から物理まで一通り経験していて、データに関わるところは強みがあると思っています。</p><h1 id="記事の背景"><a href="#記事の背景" class="headerlink" title="記事の背景"></a>記事の背景</h1><p>DB設計のデータモデリング入門として、コンビニのレシートを使ったDB設計をやっていきます。</p><p>DB設計はよく物理と論理の両面があると言われますが、今回は論理設計について扱います。</p><p>論理設計の基本はモデリングの技法にあります。モデリングは、設計する人以外必要ないのでは？と思われがちですが、ソフトウェア開発する上でも、または上流フェーズでシステムやサービスの提案をしていく上でも重要なスキルになります。なぜなら、モデリングはその名の通り現実を抽象化して、扱いやすい形式に起こして、他者に伝達する手法だからです。これはITエンジニアやITコンサルタント（ITプロフェッショナル）のコミュニケーションスキルの基本ともいえる部分でもあります。ただし、モデリングというととっつきづらく難しい要素もあるので、特別な道具立てもなく、身近なモノからできる例としてレシートを題材にDB設計することをやっていきたいと思います。具体的に、実務で使える内容ではないですが、ITプロフェッショナルとしての力を鍛える「素振り」と思って、取り組んでいただければ幸いです。</p><p>よりよいテーブルの設計については、今回の入門記事シリーズでも取り扱っています。ぜひそちらも合わせて勉強してみてください。<br><a href="https://future-architect.github.io/articles/20200605/">春の入門祭り 🌸 #05　データベース　テーブル設計入門</a></p><h1 id="記事の対象読者"><a href="#記事の対象読者" class="headerlink" title="記事の対象読者"></a>記事の対象読者</h1><p>対象は、新人エンジニア・ITコンサルタントを想定しています。</p><h1 id="題材"><a href="#題材" class="headerlink" title="題材"></a>題材</h1><p>今回の題材は、某コンビニエンスストアのレシートを使います。</p><p>毎日のように、みなさんが見ているものだと思いますが、このような身近なものにもIT技術が使われており、当然データを格納するDBがあります。DB設計のトレーニングとして身近な帳票（レシートや請求書など、データの印刷されたもの）から、それらを支えるインフラ技術や、プログラムソースコード、DBの設計などを想像することは良い手段です。</p><h2 id="レシート"><a href="#レシート" class="headerlink" title="レシート"></a>レシート</h2><img src="/images/20200616/1.jpg" class="img-middle-size"><h2 id="イベント（出来事）を見つける"><a href="#イベント（出来事）を見つける" class="headerlink" title="イベント（出来事）を見つける"></a>イベント（出来事）を見つける</h2><p>まずは、このレシートが表す主要な「出来事」を見出しましょう。難しく考えず、この紙が表現している行為は何かを考えてみましょう。</p><p>大きく領収書と書かれていますね。</p><p>そうすると、「領収」とか「購入」とかが思い浮かびますが、システムの所有者はコンビニエンスストア側であるので、主語はお店の側とします。すると販売とか売上になりますが、今回は売上にしましょう。</p><img src="/images/20200616/2.png" class="img-small-size"><p>イベント系データは、トランザクションと言われることもあります。企業のビジネスはこのようなトランザクションの連なりと積み重ねで成り立っています。人間の体でいうと、血液のようなものです。</p><h2 id="リソース（資源）を見つける"><a href="#リソース（資源）を見つける" class="headerlink" title="リソース（資源）を見つける"></a>リソース（資源）を見つける</h2><p>次に、売上をあげるにあたって、「誰に」「何を」という部分がないと売上という行為は完結しません。</p><p>6W2Hでもれなくダブりなくデータの種類を書き出してみましょう。（5W1HにWhom、How Muchを加えた6W2Hを使うとよりもれなくダブりなく物事をとらえることができるのでおすすめです）</p><ul><li>Who（誰が）・・販売店、責任者</li><li>When・・販売日時</li><li>What（何を）・・商品</li><li>Whom（誰に）・・会員（顧客）</li><li>Where（どこで）・・レジ</li><li>Why（なぜ）・・とくになし</li><li>How（どのように）・・決済手段</li><li>How Much（いくらで）・・商品価格、消費税、還元ポイント</li></ul><p>全部扱うのは大変なので、 <strong>今回は一部の商品と顧客と価格、消費税について扱います</strong>。他のリソースについてもみなさんもぜひ考えてみてください。</p><p>価格と消費税（率）は商品の一部といえるので、リソースとしてはいったん商品と顧客を書き出します。</p><img src="/images/20200616/3.png" class="img-middle-size"><p>リソース系データは、マスタと言われることもあります。トランザクションが血液なら、マスタは企業のビジネスの骨格をなす部分です。<br>骨格のつくりがおかしいと人間がうまく背が伸びなくなるように、企業のビジネスの成長のボトルネックにもなりかねない部分なのでこの設計は非常に重要です。</p><h2 id="項目を入れる"><a href="#項目を入れる" class="headerlink" title="項目を入れる"></a>項目を入れる</h2><p>データの箱を用意したら、次は項目を入れていきましょう。</p><p>顧客には、コンビニエンスストアからセール情報などを郵送することを想定して、氏名と住所を入れます。<br>商品には、商品名と価格、税率を入れます。売上には、販売数を入れます。商品と顧客も入れるべきですが、のちのち入れていきます。</p><img src="/images/20200616/4.png" class="img-middle-size"><p>税金についてはよくみると、10%対象と8％対象のものがあります。軽減税率制度ですね。</p><p>食料品は8%、それ以外は10%対象になっています。商品マスタ上で、分類があると考えます。消費税は数年後には変わっていくものなので、商品マスタにもっていると変更するのが大変です。なので、税対象カテゴリという新しいテーブルを追加して管理することにしましょう。</p><p>※実用的には、有効期間を設定してある日を過ぎたときから税率が変わるようにすることがあります。ちょうどよい参考文献があるので、末尾に記載します。</p><img src="/images/20200616/5.png"><h2 id="リレーションシップを設定する"><a href="#リレーションシップを設定する" class="headerlink" title="リレーションシップを設定する"></a>リレーションシップを設定する</h2><p>次にテーブル同士の関係性を設定していきます（リレーション）。</p><p>関係性を設定するまえに、各テーブルのデータを一意に表すPK（主キー）を設定します。<br>PKとして空欄にしていた部分に、IDを設定します。</p><p>この主キーに特定の項目を設定し意味をもたせると、その意味が変わったときに他のテーブルとのリレーションが変わってしまいます。そのため、機械的に○○IDもしくは○○コードなどと設定するのが妥当です。具体的には、商品マスタにおいて、商品名はそのデータを一意に表すと自然に考えられます（ナチュラルキー）が、あえて代理のキー（サロゲートキー）を設定して、意味に依存しない形にします。</p><img src="/images/20200616/6.png"><p>そして、各テーブルを関連付ける、FK（外部キー）を設定することでリレーションシップはいったん完成です。<br><img src="/images/20200616/7.png"></p><h2 id="点検する"><a href="#点検する" class="headerlink" title="点検する"></a>点検する</h2><p>作成したモデルが現実をきちんと表現しているか点検をしましょう。出来上がったテーブルとリレーション（ERD)を見て、最初のレシートに立ち戻ってみましょう。</p><p>すると、このERDでは1つの売上で1種類の商品、1人の顧客しか扱えないことがわかります。1売上1顧客は良いとして、1売上で複数の商品があるのは自然なので、修正して売上テーブルを分割することを考えます。<br>売上明細というテーブルを作成します。</p><img src="/images/20200616/8.png"><p>（注）FKが一部間違っていたので修正しました 6/16</p><p>今回は省きますが、加えて以下もやってみると理解が深まるでしょう。</p><ul><li>DDL（CREATE TABLE）を書いてテーブルをRDB（PostgreSQL,MySQL,Oracleなど）上に作成してみる</li><li>テーブルに実データを入れてみる（事前にExcelなどで表を書いてみるのをおすすめします）</li><li>SQLを書いて実行してみる</li></ul><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>データモデルのポイントは以下のとおりです。</p><ul><li>イベントを見つける</li><li>リソースを見つける（6W2Hでもれなくダブりなく）</li><li>項目を入れる</li><li>リレーションシップを設定する</li><li>点検する（モデルが現実を表現しているか）</li></ul><p>今回はITプロフェッショナルとしての「素振りの仕方」をご紹介しました。<br>日頃、目にするデータから設計をする練習をして、本番の仕事のため（試合）に備えましょう。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.amazon.co.jp/dp/4798110663" target="_blank" rel="noopener">楽々ERDレッスン (CodeZine BOOKS) (株)スターロジック 羽生 章洋 著</a><br>レシート（帳票）からERDをつくるというアイデアはここからもらっています。DB設計の基本が書かれている良書です。</p><p><a href="https://sikushima.hatenablog.com/entry/2020/06/09/113306" target="_blank" rel="noopener">SQLで消費税の計算</a><br>マスタへの有効期間の設定・SQLの書き方など、実用的な内容が詳細に書かれています。もう一歩踏み込みたい人は読んでみてください。</p><p><a href="https://www.amazon.co.jp/dp/B07TPYY3K1" target="_blank" rel="noopener">業務システムのための上流工程入門 渡辺幸三 著</a><br>DB設計はお客さんとあるべきシステムのイメージの合意をとりながら進めていくものです。データ指向設計の手法が、ロールプレイング形式で具体的に書かれています。上流工程に興味のある人は読んでみてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;の第12弾です。&lt;/p&gt;
&lt;h1 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="DataModel" scheme="https://future-architect.github.io/tags/DataModel/"/>
    
  </entry>
  
  <entry>
    <title>春の入門祭り🌸 #11 Kaggle入門</title>
    <link href="https://future-architect.github.io/articles/20200615/"/>
    <id>https://future-architect.github.io/articles/20200615/</id>
    <published>2020-06-15T01:48:52.000Z</published>
    <updated>2020-06-23T06:04:21.221Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a>の第11弾です</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIGの伊藤真彦です、<a href="https://future-architect.github.io/articles/20200612/">第10弾</a>に続いての投稿です。</p><p>フューチャーではAI教育・認定のオリジナルプログラム<a href="https://prtimes.jp/main/html/rd/p/000000363.000004374.html" target="_blank" rel="noopener">Future AI Certification</a>が実施されています。私も入社早々に本プログラムでGoogle Colaboratoryを用いてノートブック形式でのドキュメントを作成、実行する形での学習しました。入社以前からAI関連の技術に興味を持っており、AWSの機械学習認定資格に合格するなど勉強していたので、とても嬉しかったです。</p><p>このFuture AI Certificationプログラムで学習した勢いで、この度<a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a>にチャレンジしてみました。</p><h2 id="この記事の内容"><a href="#この記事の内容" class="headerlink" title="この記事の内容"></a>この記事の内容</h2><p>実際にKaggleに挑戦する上で自分が知りたかったこと、やってみたことを書いていきます。</p><h2 id="kaggleとは"><a href="#kaggleとは" class="headerlink" title="kaggleとは"></a>kaggleとは</h2><img src="/images/20200615/photo_20200615_01.png"><blockquote><p>Kaggleは企業や研究者がデータを投稿し、世界中の統計家やデータ分析家がその最適モデルを競い合う、予測モデリング及び分析手法関連プラットフォーム及びその運営会社である。<br>– <a href="https://ja.wikipedia.org/wiki/Kaggle" target="_blank" rel="noopener">wikipedia</a>より</p></blockquote><p>Kaggleは機械学習のモデルを作成・共有し、その機械学習モデルの精度を競い合うプラットフォームです。環境構築不要で機械学習を学習できるだけでなく、賞金付きのコンペティションで上級者が鎬を削り合うような場所でもあります。</p><p>まずは<a href="https://www.kaggle.com/account/login" target="_blank" rel="noopener">アカウント登録</a>が第一歩です。</p><h2 id="タイタニック問題に挑む"><a href="#タイタニック問題に挑む" class="headerlink" title="タイタニック問題に挑む"></a>タイタニック問題に挑む</h2><img src="/images/20200615/2.jpg"><p>アカウントを登録したら次に何をするか？</p><p>いきなり賞金つきコンペティションに突撃する事も可能ですが、初心者向けの学習用コンテンツがあるので、まずそれに参加して流れを掴んでいきます。</p><p>定番の問題として「タイタニック問題」と呼ばれている問題があります。「タイタニック」とは1912年に沈没した豪華客船のタイタニック号のことです。映画にもなったのでご存じですよね、と言いたいところですが映画の初公開は１９９７年、そろそろ映画を見た事がない人が入社しても不思議ではないですね。</p><p>タイタニックと機械学習のどこに接点があるかと言うと、Kaggleではタイタニック号の乗客の年齢、性別、客室番号などの各種データと、生存、死亡のデータがcsvファイルにまとめられています。このcsvから学習して、各種データから乗客の生存・死亡を推論する機械学習モデルを作成する事が初心者向けの課題として用意されています。</p><p>アカウントを登録したら、タイタニック問題に挑戦するのが定番の流れです。</p><h2 id="実際の作業"><a href="#実際の作業" class="headerlink" title="実際の作業"></a>実際の作業</h2><p>コンペティションに参加登録をしたら、実際に機械学習モデルを作成していきます。</p><p>とはいえ機械学習のことはよくわからないし、何をどうしたら課題を達成できるのか…と、初心者の方は思うのではないでしょうか。</p><p>Kaggleでは他の参加者のノートブック形式での成果物が公開されているので、極論公開されているコードを写していくだけで課題の提出が可能です。</p><img src="/images/20200615/3.jpg" style="border:solid 1px #000000"><p>最初は写経のような形で公開されているソースコードを読み解いていくと良いと思います。</p><h2 id="学習のために"><a href="#学習のために" class="headerlink" title="学習のために"></a>学習のために</h2><p>機械学習のモデル作成では、以下の流れでソースコードを記述していきます。(csvデータを読み込んで推論を行う、いわゆるテーブルコンペと呼ばれる形式の話で、例えば画像を取り扱うような問題では違った流れになります)</p><ol><li>csvデータを読み込む</li><li>データの欠損値を補完する、機械学習モデルが読み込める形にデータを変換する。</li><li>整理したデータで機械学習モデルを学習させる。</li><li>作成したモデルでテストデータを推論、提出用のデータを生成、保存する</li></ol><p>公開されているソースコードは、ランキングの上位に食い込むためにさまざまな工夫が行われています。また、データエンジニアリングの内容や根拠を説明するためにデータをグラフとして表現するコードも各々のスタイルで記載されています。いきなりこれら工夫満載の成果物を見ても理解が難しいと思います。</p><p>私は「<a href="https://www.kspub.co.jp/book/detail/5190067.html" target="_blank" rel="noopener">PythonではじめるKaggleスタートブック</a>」という書籍を購入しました。</p><p>この記事の結論はオススメ書籍の紹介になります。この本ではタイタニック問題を回答できるようになることが目的の一つとなっており、実際にタイタニック問題に対して提出可能なソースコードが、最低限の素朴な実装の段階から、精度を上げていくための工夫まで、Python初心者レベルの人でもわかるよう一行ずつ丁寧に説明されています。</p><p>この本のおかげで学習がかなり楽になりました。こういう知識はやはり書籍の形式で体系的に学ぶのが楽ですね。あとKaggleは基本的に英語なので…ただでさえ難しいものを英語で学習するのは辛いものがあります。日本語で学べる教材という意味でも良かったです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ol><li>まずはアカウントを登録しよう</li><li>タイタニック問題にチャレンジ</li><li>公開されているコードから学んでいこう</li><li>効率よく学ぶためには本を買うのがおススメ</li></ol><p>といったお話でした。</p><p>きちんと理解しようとすると一問に費やす時間が数日単位でかかり、結構大変なのですが、Kaggleを通して機械学習の流れが具体的にわかるようになってきました。</p><p>Kaggleは無料でできるので、ぜひ挑戦してみてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200529/&quot;&gt;春の入門祭り&lt;/a&gt;の第11弾です&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
      <category term="Kaggle" scheme="https://future-architect.github.io/tags/Kaggle/"/>
    
  </entry>
  
</feed>
