<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-01-12T06:47:33.041Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>技術ブログの年間連載予定を発表します</title>
    <link href="https://future-architect.github.io/articles/20210112/"/>
    <id>https://future-architect.github.io/articles/20210112/</id>
    <published>2021-01-11T15:00:00.000Z</published>
    <updated>2021-01-12T06:47:33.041Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。技術ブログ運営の<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。</p><p>あけましておめでとうございます。本年もフューチャー技術ブログをよろしくお願いいたします。</p><p>2021年に計画しているブログの連載についてご紹介します。</p><h2 id="連載計画を発表する背景"><a href="#連載計画を発表する背景" class="headerlink" title="連載計画を発表する背景"></a>連載計画を発表する背景</h2><p>2020年は、季節性や話題になりそうなテーマを中心として連載を企画してきました。</p><p>このときの寄稿者の募集についていくつか課題がありました。</p><ul><li>募集が開催の1~3ヶ月ほぼ前で準備期間が短いため、すでにネタがある人しか参加できなくなりがち<ul><li>本当はもっと初心者の方でも参加できるようにしたい</li></ul></li><li>参加者募集のアナウンスが行き届かない<ul><li>Technology Innovation Group（TIG）をはじめとした技術部隊が中心になってしまいがち。もう少し全社を巻き込みたい</li></ul></li></ul><p>これらを解決する第一歩として年間計画をブログにして、社内外へ拡散しやすくしようと考えました。</p><h2 id="2021年の連載計画"><a href="#2021年の連載計画" class="headerlink" title="2021年の連載計画"></a>2021年の連載計画</h2><p><img src="/images/20210112/new-year-resolution-5859760_1280.jpg" alt=""></p><blockquote><p><a href="https://pixabay.com/ja/users/usa-reiseblogger-328188/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5859760" target="_blank" rel="noopener">USA-Reiseblogger</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5859760" target="_blank" rel="noopener">Pixabay</a>からの画像</p></blockquote><br><p>2021/01/12現在、技術ブログ運営にて企画している連載計画は以下です。</p><p>同月に複数実施することもありますが、並列で走らないように調整する予定です。</p><table><thead><tr><th>月</th><th>連載するネタ</th><th>予定数</th><th>昨年(2020年)の連載</th><th>備考</th></tr></thead><tbody><tr><td>1</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>2</td><td>Go 1.16</td><td>5</td><td>無し</td><td>Go1.16リリースをテーマにした連載</td></tr><tr><td></td><td>Rust</td><td>5</td><td>無し</td><td>各人がRust入門してみようという連載</td></tr><tr><td>3</td><td>GCP</td><td>10</td><td><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/</a></td><td>Google Cloud Platformに関する連載</td></tr><tr><td></td><td>ShellScript</td><td>5</td><td>無し</td><td>Shell Script に関するTipsを共有する連載</td></tr><tr><td>4</td><td>春の入門祭り</td><td>10</td><td><a href="https://future-architect.github.io/articles/20200529/">https://future-architect.github.io/articles/20200529/</a></td><td>新年度にふさわしく何か新しい技術要素に取組む連載</td></tr><tr><td>5</td><td>Serverless</td><td>10</td><td><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/</a></td><td>Serverlessアーキテクチャに関する連載</td></tr><tr><td>6</td><td>JavaScript</td><td>5</td><td>無し</td><td>JavaScript/TypeScript関連の連載。Vue.jsやReactに関するネタも含みます</td></tr><tr><td></td><td>データ構造とアルゴリズム</td><td>5</td><td>無し</td><td>データ構造とアルゴリズムに関する連載。もしかすると競技プログラミングにも役立つかも</td></tr><tr><td>7</td><td>Go CDK</td><td>4</td><td><a href="https://future-architect.github.io/articles/20191111/">https://future-architect.github.io/articles/20191111/</a></td><td>GoCDKというマルチプラットフォームに役立つライブラリに関する連載</td></tr><tr><td>8</td><td>Python</td><td>5</td><td>無し</td><td>Pythonをテーマとした連載</td></tr><tr><td></td><td>夏休み自由研究</td><td>10</td><td><a href="https://future-architect.github.io/articles/20200726/">https://future-architect.github.io/articles/20200726/</a></td><td>各人が自由研究をテーマに調査実装した内容をシェアする連載</td></tr><tr><td>9</td><td>CNCF</td><td>5</td><td><a href="https://future-architect.github.io/articles/20200928/">https://future-architect.github.io/articles/20200928/</a></td><td>CloudNativeComputingFoundationのプロダクトをテーマとした連載</td></tr><tr><td>10</td><td>秋の読書週間</td><td>10</td><td><a href="https://future-architect.github.io/articles/20201026/">https://future-architect.github.io/articles/20201026/</a></td><td>エッセーなど読み物よりをテーマとした連載</td></tr><tr><td>11</td><td>（同上）</td><td>-</td><td>-</td><td>※秋のブログ週間は月跨ぎのため10~11月にかけて行います</td></tr><tr><td>12</td><td>Qiitaアドベントカレンダー</td><td>25</td><td><a href="https://qiita.com/advent-calendar/2020/future" target="_blank" rel="noopener">https://qiita.com/advent-calendar/2020/future</a></td><td>※基本的にはQiita上で投稿するため、フューチャー技術ブログはお休みシーズンです</td></tr></tbody></table><p>※連載予定は突然変更、入れ替わることがあります。ご了承ください。<br>その他候補としては</p><ul><li>Zuora</li><li>Auth0</li><li>SORACOM</li><li>オンプレミスインフラ</li><li>PLC</li><li>データストリーム（Kafka、Beamなど）</li><li>やり直しコンピュータサイエンス</li></ul><p>があります。もしかしたら連載されるかもしれないので、お楽しみに。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>昨年の良いところは継続し、改善できるところは改善してより良くしようと運営一同、意気込んでおります。</p><p>読者の方にとって少しでもタメになる知識を共有し、書き手にとって成長に繋がるようなアウトプットの場所として大いに活用していただければと思います。<br>本年もフューチャー技術ブログをよろしくお願いいたします。</p><p>社員の皆さんへ： </p><ul><li>気になる連載があったらお気軽にブログ運営者までDMでお声がけください。会議通知など入れますので</li><li>参加者はどれも枠が残っています（定員を増やすことも可能です）。開催1週間前くらいまでに声をかけてもらえると助かります</li></ul><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>昨年の振り返りはこちらにまとめています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201127/index.html" data-iframely-url="//cdn.iframe.ly/mp0v8g9?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>ブログ運営で気にしていることはこちらにまとめています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200530/index.html" data-iframely-url="//cdn.iframe.ly/NZFPJjo?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。技術ブログ運営の&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;あけましておめでとうございます。本年もフューチャー技術ブログをよろ
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
  </entry>
  
  <entry>
    <title>自分の分身(3Dアバター)と自作ワールドを作ってみた</title>
    <link href="https://future-architect.github.io/articles/20210108/"/>
    <id>https://future-architect.github.io/articles/20210108/</id>
    <published>2021-01-07T15:00:00.000Z</published>
    <updated>2021-01-08T04:27:22.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして！Unity初心者の阿保ですଘ(੭ˊ꒳​ˋ)੭</p><p>このご時世でフューチャーも完全リモートワークとなり、便利になったことや不便になったことがあります。</p><p><strong>【便利になったこと】</strong></p><ul><li>仕事の合間にカンファレンスや勉強会に参加し放題</li><li>出勤に使用してた体力を自分の好きなことをやる体力として使える</li><li>仕事を終えた瞬間から自分の時間として使える</li></ul><p><strong>【不便になったこと】</strong></p><ul><li>家にいるのに気合を入れて顔を作って会議に参加するのがめんどくさい</li><li>顔が見えない会議の場合に感情が読み取れず、相手が怒っているように感じる</li><li>外に出歩けないから何かを体験するということができない</li></ul><p>不便になったことを改善するために3Dアバターや仮想空間技術を使いこなして<br>もっと便利な世の中にすることを企みこの度、VRの勉強をはじめました。<br>まずは顔がいい分身とみんなが穏やかな気持ちになれる仮想世界を作ってみました٩(ˊᗜˋ*)و</p><h1 id="何を作ったか"><a href="#何を作ったか" class="headerlink" title="何を作ったか"></a>何を作ったか</h1><ul><li>自分の分身(３Dアバター)</li><li>分身を動かす仮想世界</li></ul><p>実際に作った自分の分身と仮想世界がこちら↓↓<br><img src="/images/20210108/2020-12-31_18h51_23.png" alt=""></p><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul><li>windows 10</li><li>VRoidStudio-v0.11.2</li><li>Unity Hub 2.4.0 </li><li>Unity 2019.4.9f1</li></ul><h1 id="自分の分身を作成"><a href="#自分の分身を作成" class="headerlink" title="自分の分身を作成"></a>自分の分身を作成</h1><p>まずはVRoidStudioを使って自分のオリジナル3Dアバターを作成します。</p><p>VRoidStudioは無料で提供されている3Dモデル作成アプリです。</p><p>基本となるモデルがあり、</p><ul><li>顔</li><li>髪型</li><li>体型</li><li>洋服</li></ul><p>が編集でき自分のオリジナルのアバターが作成できます。</p><p>VRoidStudioの環境構築や3Dアバターの作成はこちら↓を参考にしました。<br><a href="https://degifeel.com/vroid-studio-how-to/" target="_blank" rel="noopener">https://degifeel.com/vroid-studio-how-to/</a></p><p>作った分身はこちらです↓<br><img src="/images/20210108/2020-12-31_16h33_36.png" alt=""></p><h1 id="仮想世界の作成"><a href="#仮想世界の作成" class="headerlink" title="仮想世界の作成"></a>仮想世界の作成</h1><p>ここからは<a href="https://www.amazon.co.jp/Unity%E3%81%A7%E7%A5%9E%E3%81%AB%E3%81%AA%E3%82%8B%E6%9C%AC%E3%80%82-%E5%BB%A3-%E9%89%84%E5%A4%AB/dp/4274069222" target="_blank" rel="noopener">Unityで神になる本</a>を参考に仮想世界を作っていきます。</p><ul><li>UnityHubから新規3Dプロジェクトを作成</li><li>右上のLayoutドロップダウンから2by3を選択</li><li>まずは大地を作成<ul><li>Game&gt;3D Object &gt; Terrainの順番に選択<br><img src="/images/20210108/image.png" alt=""></li><li>HierarchyPositionタブに表示されている「Terrain」をクリック</li><li>Inspectorタブに表示されている「Position」をX:-500 Y:0 Z:-500に変更し大地が世界の中心にくるようにする<br><img src="/images/20210108/2020-12-29_16h05_09.png" alt=""></li><li>Ctl + 9でAsset Storeを表示</li><li>「Standard Assets」をインポート<ul><li>Allボタンで全てにチェックをつけてImportボタンを押下</li></ul></li><li>HierarchyPositionタブに表示されているTerrainを押下</li><li>Inspectorタブに表示されているTerrainの筆のアイコンを押下</li><li>Edit Terrain Layers…&gt;Create Layerの順に選択<br><img src="/images/20210108/2020-12-29_16h30_01.png" alt=""></li><li>検索窓に先ほどImportしたStandard Assetsの地面素材である「GrassRockyAlbedo」を入力し画像を押下する</li><li>Textureの枠に画像が設定されていることを確認してダブルクリックすると地面が「GrassRockyAlbedo」に染まる</li><li>Inspectorタブに表示されているTerrainの木のアイコンを押下</li><li>「Edit Trees…」&gt;「Add Tree」を選択</li><li>Tree Prefabに「Broadleaf_Desktop」という樹木を選択</li><li>クリックを長押しすることで地面に木を生やすことができる<br><img src="/images/20210108/2020-12-29_23h19_22.png" alt=""></li><li>Inspectorタブに表示されているTerrainの草花のアイコンを押下</li><li>「Edit Details…」&gt;「Add Grass Texture」を選択</li><li>Detail Textureに「Grass」と入力しでてきた好きな草を選択しAddボタンを押下</li><li>木と同じくクリック長押しで草を生やせる</li><li>上記要領で3Dワールドを作りこんでいく<br><img src="/images/20210108/2020-12-29_23h46_07.png" alt=""></li></ul></li></ul><h1 id="3Dワールドに自分の分身を誕生させる"><a href="#3Dワールドに自分の分身を誕生させる" class="headerlink" title="3Dワールドに自分の分身を誕生させる"></a>3Dワールドに自分の分身を誕生させる</h1><ul><li>VRoidStudioで作った分身をUnityで動かせるようにするためのパッケージを導入します。<ul><li>UniVRMを<a href="https://github.com/vrm-c/UniVRM/releases" target="_blank" rel="noopener">github</a>から最新バージョンを選んでUniVRM-X.XX.X_XXXX.unitypackageをDownload<br><img src="/images/20210108/2020-12-31_10h00_28.png" alt=""></li><li>DownloadしたパッケージをUnityのProjectウィンドウにDragu&amp;Dropする<br><img src="/images/20210108/2020-12-31_11h03_42.png" alt=""></li><li>Import Unity Packageのダイアログが開くので下の「ALL」&gt;「Import」の順に押下しPackageをImportする</li></ul></li><li>自分の分身をUnityへImport<ul><li>VRoidStudioで作成した自分のvrmファイルをUnityのProjectウィンドウのAssetに配下にDragu&amp;Drop</li></ul></li><li>分身を操作できるようにセットアップ<ul><li>ここからは分身の操作が見えやすいようにUnity右上のLayoutを「Default」へ変更</li><li>SceneにAsset配下の自分の分身(Prefab Asset)ファイルをDrag&amp;Dropで投下<br><img src="/images/20210108/2020-12-31_12h08_16.png" alt=""></li><li>自分の分身ファイルを選択した際に表示される右側のInspectorタブのAnimatorのControllerに「ThirdPersonAnimatorController」をセットする</li><li>「Capsule Collider」の値を変化させて分身の大きさを調整する<ul><li>CenterをX:0 Y:0.8 Z:0に設定</li><li>Heightを1.81に設定<br><img src="/images/20210108/2020-12-31_15h35_19.png" alt=""></li></ul></li><li>「Third Person Character」の「Ground Check Distance」値を0.3に変化する<ul><li>歩く速さなど動作が変化するので自分の好みの値に調整してください<br><img src="/images/20210108/2020-12-31_14h54_43.png" alt=""></li></ul></li></ul></li></ul><h1 id="分身を動かしてみる"><a href="#分身を動かしてみる" class="headerlink" title="分身を動かしてみる"></a>分身を動かしてみる</h1><ul><li>動かした際に分身をカメラが追ってくれるように設定<ul><li>「Hierarchy」&gt;「Main Camera」を分身フォルダ配下へDrag&amp;Drop<br><img src="/images/20210108/2020-12-31_15h06_30.png" alt=""></li><li>分身フォルダ配下に移動していることを確認</li><li>Main Cameraの「Inspector」のMain Cameraのチェックを外す<br><img src="/images/20210108/2020-12-31_15h09_58.png" alt=""></li><li>Projectの検索窓に「MultipurposeCameraRig」と入力</li><li>表示された「MultipurposeCameraRig」を「Hierarchy」へDrag&amp;Dropする</li><li>「MultipurposeCameraRig」を選択し、右のInspectorに「MultipurposeCameraRig」を表示させる</li><li>「Auto Cam(Script)」のTargetに分身フォルダをDrag&amp;Dropする<br><img src="/images/20210108/2020-12-31_15h40_30.png" alt=""></li><li>上部のPlayボタン(▷)を押下して分身を動かす<ul><li>w:前進 S:後進 A：右移動 D：左移動 Space：ジャンプ</li></ul></li></ul></li></ul><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">自分の分身(3Dアバター)を自作ワールド<br>で動かした動画をYouTubeに上げましたଘ(੭ˊ꒳​ˋ)੭<br>木と草と空しかないですが汗<a href="https://t.co/3ipaXtujef" target="_blank" rel="noopener">https://t.co/3ipaXtujef</a> <a href="https://twitter.com/YouTube?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@YouTube</a>より <a href="https://twitter.com/hashtag/Unity?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#Unity</a> <a href="https://twitter.com/hashtag/unity3d?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#unity3d</a> <a href="https://twitter.com/hashtag/VRoid?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#VRoid</a></p>&mdash; DevAbo (@DevAbo1) <a href="https://twitter.com/DevAbo1/status/1346489578539032576?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">January 5, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>ちょっと空もいじってみました。</p><p>驚きのジャンプ力ですがいい感じに動いてます(๑òωó๑)</p><p>本日はここまでですが、動物や家など配置させて仮想空間を作りこんだり、他の人をこのワールドに召喚し、VoiceChat機能を追加することで家から出ずに顔も作らず、心穏やかにコミュニケーションがとれそうです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして！Unity初心者の阿保ですଘ(੭ˊ꒳​ˋ)੭&lt;/p&gt;
&lt;p&gt;このご時世でフューチャーも完全リモートワークとなり
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Unity" scheme="https://future-architect.github.io/tags/Unity/"/>
    
      <category term="Unity3D" scheme="https://future-architect.github.io/tags/Unity3D/"/>
    
      <category term="VRoid" scheme="https://future-architect.github.io/tags/VRoid/"/>
    
      <category term="VR" scheme="https://future-architect.github.io/tags/VR/"/>
    
  </entry>
  
  <entry>
    <title>Electronの使い方 Web開発の技術でデスクトップアプリを作ろう</title>
    <link href="https://future-architect.github.io/articles/20210107/"/>
    <id>https://future-architect.github.io/articles/20210107/</id>
    <published>2021-01-06T15:00:00.000Z</published>
    <updated>2021-01-07T02:25:53.042Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>最近Electronを用いたアプリケーション開発を行っています。技術ブログで今まで取り扱った事のないテーマであるため、まずは入門記事を書いてみました。</p><h2 id="Electronとは"><a href="#Electronとは" class="headerlink" title="Electronとは"></a>Electronとは</h2><p><a href="https://www.electronjs.org/" target="_blank" rel="noopener">Electron</a>は、GitHubが開発したオープンソースのソフトウェアフレームワークです。</p><p>ChromiumとNode.jsをコアとして採用する事で、Web開発と同じようにHTML,CSS,JavaScriptを用いて開発したものを、デスクトップアプリケーションとしてビルドすることが可能になります。クロスプラットフォームであることも利点の一つであり、同一のソースコードからmacOS、Windows、Linuxへのアプリケーションビルドが可能です。</p><p>つまりWeb開発の技術でデスクトップアプリが作成できるものです。</p><h2 id="Electronを使って開発されているもの。"><a href="#Electronを使って開発されているもの。" class="headerlink" title="Electronを使って開発されているもの。"></a>Electronを使って開発されているもの。</h2><p>Electronを使って開発されているアプリケーションの中でも有名なものは<a href="https://www.electronjs.org/apps" target="_blank" rel="noopener">公式ページ</a>にリストアップされています。</p><p>とりわけ有名なものとして、<code>Facebook Messenger</code>、<code>Slack</code>、<code>Twitch</code>, 更には<code>Visual Studio Code</code>等が存在します。</p><p>エンジニアの皆さんから、そうでない方まで、Electronのお世話になっていない人の方が少ないかもしれません。習得すると<a href="https://github.com/microsoft/vscode" target="_blank" rel="noopener">Visual Studio CodeのGithubリポジトリ</a>にコミットできるかも…ロマンを感じませんか？</p><h2 id="Electronを使って開発する方法"><a href="#Electronを使って開発する方法" class="headerlink" title="Electronを使って開発する方法"></a>Electronを使って開発する方法</h2><p>Electronはnpmパッケージとして提供されています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron</span><br></pre></td></tr></table></figure><p>ReactやVue.js等のフロントエンドライブラリと組み合わせて使うようなユースケースが現在では一般的ですが、それらライブラリに依存しない形での開発も可能です。</p><p><a href="https://github.com/electron/electron-quick-start" target="_blank" rel="noopener">electron-quick-startのリポジトリ</a>が参考になります。</p><p>git cloneから起動までを体験できる一連のコマンドは<a href="https://www.electronjs.org/" target="_blank" rel="noopener">公式ページ</a>にも記載があります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Clone the Quick Start repository</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;electron&#x2F;electron-quick-start</span><br><span class="line"></span><br><span class="line"># Go into the repository</span><br><span class="line">$ cd electron-quick-start</span><br><span class="line"></span><br><span class="line"># Install the dependencies and run</span><br><span class="line">$ npm install &amp;&amp; npm start</span><br></pre></td></tr></table></figure><img src="/images/20210107/image.png"  style="border:solid 1px #000000"><p><code>npm start</code>コマンドでアプリケーションが実行されます、公式にしては少々素朴ですがHello Worldが表示されます。</p><h2 id="proxy環境下でのElectronアプリの開発"><a href="#proxy環境下でのElectronアプリの開発" class="headerlink" title="proxy環境下でのElectronアプリの開発"></a>proxy環境下でのElectronアプリの開発</h2><p>proxy認証が必要なネットワークの場合、環境変数の設定及びnpmでのproxy設定をしないと<code>npm install</code>が失敗します。</p><p><code>npm config</code>は<code>-g</code>オプションでグローバル設定にすることができますが、Electronのライブラリがグローバル設定を見に行かない場合があるため、うまく動かない場合はグローバルで設定した覚えがある方でも<code>-g</code>オプション無しで設定してみてください。</p><p>下記6つの設定を済ませればproxy環境下でも問題なく動きます。id、pass、proxyのドメインは適宜組み替えてください。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> https-proxy http://id:pass@proxy.example.com:port</span><br><span class="line">npm config <span class="built_in">set</span> proxy http://id:pass@proxy.example.com:port</span><br><span class="line">SET(linuxの場合<span class="built_in">export</span>) ELECTRON_GET_USE_PROXY=<span class="literal">true</span> </span><br><span class="line">SET GLOBAL_AGENT_HTTPS_PROXY=http://id:pass@proxy.example.com:port</span><br><span class="line">SET HTTPS_PROXY=http://id:pass@proxy.example.com:port</span><br><span class="line">SET HTTP_PROXY=http://id:pass@proxy.example.com:port</span><br></pre></td></tr></table></figure><h2 id="Vue-jsでElectronアプリを作る"><a href="#Vue-jsでElectronアプリを作る" class="headerlink" title="Vue.jsでElectronアプリを作る"></a>Vue.jsでElectronアプリを作る</h2><p>個人的にはElectronアプリを作成する場合は、Vue.jsとの組み合わせがオススメです。</p><p><a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/" target="_blank" rel="noopener">Vue CLI Plugin Electron Builder</a>の存在が大きいです。このプラグインを導入することで、とても簡単に、Vue.jsで作成したWebアプリケーションをElectronアプリとしてビルドすることができます。</p><p>実際に試してみましょう。</p><p>まずは環境に応じてnodeをインストールし、<code>npm</code>コマンドが叩けるようになっている必要があります。Windowsの場合、<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs公式サイト</a>からインストーラをダウンロードし、インストールしてください。Macの場合、homebrew経由でバージョン管理ツールである<a href="https://github.com/hokaccha/nodebrew" target="_blank" rel="noopener">nodebrew</a>のインストールを行うのが一般的です。</p><p>本記事では<code>npm</code>コマンドが利用できる状態となっていることを前提条件として取り扱います、詳細なインストール方法は割愛します。</p><p><code>npm</code>コマンドが利用できるようになったら、<a href="https://cli.vuejs.org/" target="_blank" rel="noopener">Vue CLI</a>をインストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure><p>インストールが完了したら、Vue CLIを用いてVue.jsのプロジェクトを作成します。</p><p>プロジェクト用のフォルダやgitリポジトリを作成することを推奨します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir vue-cli-electron-sample</span><br><span class="line"><span class="built_in">cd</span> vue-cli-electron-sample</span><br><span class="line">vue create vue-cli-electron-sample</span><br></pre></td></tr></table></figure><p>Vue CLIの案内に従い、バージョンや構成をいくつか選択します。</p><p><img src="/images/20210107/image_2.png" alt=""></p><p>全てDefault設定で問題ありません。</p><p>アプリケーションの構築が正常に完了すると画像のような案内が表示されます。</p><p><img src="/images/20210107/image_3.png" alt=""></p><p>指示に従いひとまず起動してみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue-cli-electron-sample</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="/images/20210107/image_4.png" alt=""></p><img src="/images/20210107/image_5.png"  style="border:solid 1px #000000"><p>サーバーが立ち上がり、ブラウザで<code>localhost:8080</code>にアクセスするとHello Worldが表示されます。</p><p>ここまではVue.jsの説明ですね。このVue.jsアプリケーションをElectron化してみます。</p><p><code>npm run serve</code>コマンドを叩いた場所と同じディレクトリで、<code>vue add</code>コマンドを使ってVue CLIプラグインをインストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add electron-builder</span><br></pre></td></tr></table></figure><p><img src="/images/20210107/image_6.png" alt=""></p><p>Electronのバージョンを選択できます。</p><p>作りたいアプリケーションで利用する、その他のライブラリとの相性問題等が限りは最新バージョンで問題ないと思います。バージョンを選択するとビルドに必要なパッケージのインストールが始まります。ここでproxyに関連する設定を済ませておかないと、クイックスタートを動かす時と同様インストールに失敗します、ご注意ください。</p><p>インストールに成功すると、<code>package.json</code>に変更が加わるほか、<code>background.js</code>が自動生成されます。</p><figure class="highlight js"><figcaption><span>background.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; app, protocol, BrowserWindow &#125; <span class="keyword">from</span> <span class="string">'electron'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createProtocol &#125; <span class="keyword">from</span> <span class="string">'vue-cli-plugin-electron-builder/lib'</span></span><br><span class="line"><span class="keyword">import</span> installExtension, &#123; VUEJS_DEVTOOLS &#125; <span class="keyword">from</span> <span class="string">'electron-devtools-installer'</span></span><br><span class="line"><span class="keyword">const</span> isDevelopment = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Scheme must be registered before the app is ready</span></span><br><span class="line">protocol.registerSchemesAsPrivileged([</span><br><span class="line">  &#123; <span class="attr">scheme</span>: <span class="string">'app'</span>, <span class="attr">privileges</span>: &#123; <span class="attr">secure</span>: <span class="literal">true</span>, <span class="attr">standard</span>: <span class="literal">true</span> &#125; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      <span class="comment">// Use pluginOptions.nodeIntegration, leave this alone</span></span><br><span class="line">      <span class="comment">// See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info</span></span><br><span class="line">      nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.WEBPACK_DEV_SERVER_URL) &#123;</span><br><span class="line">    <span class="comment">// Load the url of the dev server if in development mode</span></span><br><span class="line">    <span class="keyword">await</span> win.loadURL(process.env.WEBPACK_DEV_SERVER_URL)</span><br><span class="line">    <span class="keyword">if</span> (!process.env.IS_TEST) win.webContents.openDevTools()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    createProtocol(<span class="string">'app'</span>)</span><br><span class="line">    <span class="comment">// Load the index.html when not in development</span></span><br><span class="line">    win.loadURL(<span class="string">'app://./index.html'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// On macOS it is common for applications and their menu bar</span></span><br><span class="line">  <span class="comment">// to stay active until the user quits explicitly with Cmd + Q</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// On macOS it's common to re-create a window in the app when the</span></span><br><span class="line">  <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">  <span class="keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="number">0</span>) createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isDevelopment &amp;&amp; !process.env.IS_TEST) &#123;</span><br><span class="line">    <span class="comment">// Install Vue Devtools</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> installExtension(VUEJS_DEVTOOLS)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'Vue Devtools failed to install:'</span>, e.toString())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exit cleanly on request from parent process in development mode.</span></span><br><span class="line"><span class="keyword">if</span> (isDevelopment) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">'win32'</span>) &#123;</span><br><span class="line">    process.on(<span class="string">'message'</span>, (data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (data === <span class="string">'graceful-exit'</span>) &#123;</span><br><span class="line">        app.quit()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    process.on(<span class="string">'SIGTERM'</span>, () =&gt; &#123;</span><br><span class="line">      app.quit()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここがVue CLIプラグインの最大の利点です。</p><p><img src="/images/20210107/image_7.png" alt=""></p><p>package.jsonにelectronに関連するコマンドが追記されます。</p><p><code>npm run serve</code>の代わりに<code>npm run electron:serve</code>コマンドを実行してみます。</p><p><img src="/images/20210107/image_8.png" alt=""></p><p>npm run serveコマンドと似ていますが、Electronアプリケーションが起動されます。</p><p><img src="/images/20210107/image_9.png" alt=""></p><p>表示内容はVue.jsのHello Worldです、これをElectronアプリとして起動することに成功しました。</p><p>ではこの状態のアプリケーションをビルドしてみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run electron:build</span><br></pre></td></tr></table></figure><p><img src="/images/20210107/image_10.png" alt=""></p><p>ビルドコマンドを実行するとアプリケーションのビルドが走ります。基本的にはアプリケーションをビルドしている端末のOS向けのアプリケーションがビルドされますが、WindowsでMac向けのアプリケーションをビルドするようなことも可能です。詳しくは<a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/recipes.html#multi-platform-build" target="_blank" rel="noopener">公式ガイド</a>をご確認ください。</p><p>ビルドに成功すると、dist_electronフォルダ配下に成果物が配置されます。通常のVue.jsアプリケーションのdistフォルダに相当します。</p><img src="/images/20210107/image_11.png"  style="border:solid 1px #000000"><p>dist_electronフォルダ配下は画像のような状態です。</p><img src="/images/20210107/image_12.png"  style="border:solid 1px #000000"><p>vue-cli-electron-sample Setup 0.1.0をダブルクリックするとアプリケーションのインストールが開始されます。ちなみに、アプリケーションのバージョン情報は<code>package.json</code>記載のバージョンに依存します。<br><img src="/images/20210107/image_13.png" class="img-small-size"></p><p>インストールが完了したアプリケーションは一般的なアプリケーション同様に起動することができます。<br><img src="/images/20210107/image_14.png" alt=""></p><p>vue.config.jsに、下記のように、ビルド設定を<code>portable</code>に設定することで、インストール不要な、ダウンロードしたファイルを直接実行、起動できるようなものとしてアプリケーションをビルドする事もできます。</p><p>ちょっとしたアプリケーションを毎回インストール、アンインストールするのは手間なので、個人的にはportable形式のアプリが好きです。ここに記載可能な設定は、<a href="https://www.electron.build/configuration/configuration" target="_blank" rel="noopener">electron-builderの公式ページ</a>に記載されています。</p><figure class="highlight js"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    electronBuilder: &#123;</span><br><span class="line">      builderOptions: &#123;</span><br><span class="line">        win: &#123;</span><br><span class="line">          target: [</span><br><span class="line">            &#123;</span><br><span class="line">              target: <span class="string">'portable'</span>, <span class="comment">// 'zip', 'nsis', 'portable'</span></span><br><span class="line">              arch: [<span class="string">'x64'</span>], <span class="comment">// 'x64', 'ia32'</span></span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20210107/image_15.png" class="img-small-size"><p>デフォルトの状態ではアイコンが無いため少々寂しいですが、デスクトップアイコンもvue.config.jsで指定することが可能です。</p><figure class="highlight js"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    electronBuilder: &#123;</span><br><span class="line">      builderOptions: &#123;</span><br><span class="line">        win: &#123;</span><br><span class="line">          icon: <span class="string">'src/assets/icon.png'</span>,</span><br><span class="line">          target: [</span><br><span class="line">            &#123;</span><br><span class="line">              target: <span class="string">'portable'</span>, <span class="comment">// 'zip', 'nsis', 'portable'</span></span><br><span class="line">              arch: [<span class="string">'x64'</span>], <span class="comment">// 'x64', 'ia32'</span></span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なお最小画像サイズ(256 x 256, macの場合512 x 512px)を下回るサイズの画像を指定した場合エラーが発生してビルドできません、ご注意ください。</p><img src="/images/20210107/image_16.png" class="img-small-size"><p>アイコンを設定することでそれらしくなってきました。</p><p>portable形式でビルドしたものをダブルクリックすると、そのままアプリケーションが起動します。依存しているファイルなどは存在しないため、ビルド成果物の保存場所を移動したり、これだけを他のPCに配布しても問題なく動作します。ただし、何も設定をしないと信頼できないアプリケーションとして扱われてしまいます。</p><p>これを回避するためには<a href="https://www.electronjs.org/docs/tutorial/code-signing" target="_blank" rel="noopener">アプリケーションの署名</a>が必要になります。仕事で開発する場合は避けては通れない部分ですね。</p><p>細かい設定項目はありますが、最小コストとしてはライブラリの導入だけでデスクトップアプリをビルドすることができました。</p><h2 id="ReactでElectronアプリをビルドする"><a href="#ReactでElectronアプリをビルドする" class="headerlink" title="ReactでElectronアプリをビルドする"></a>ReactでElectronアプリをビルドする</h2><p>Vue.jsではライブラリを導入するだけでアプリケーションのビルドが可能でした。</p><p>Reactの場合はツールが自動でやってくれた部分を自力で整える必要があります。逆に言えばReactアプリケーションをElectronアプリとしてビルドできれば、大抵のものはElectronアプリケーションにできるといっても過言ではありません。<br>Vue.js同様Hello Worldから導入してみます。</p><p>React製アプリケーションを手早く構築するために、<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>を導入します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install create-react-app</span><br></pre></td></tr></table></figure><p>インストールに成功したら、新しくアプリケーションを構築します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir react-electron-sample</span><br><span class="line">cd react-electron-sample</span><br><span class="line">create-react-app react-electron-sample</span><br></pre></td></tr></table></figure><p><img src="/images/20210107/image_17.png" alt=""></p><p>アプリケーションの構築に成功すると画像のような案内が表示されます。<br>指示に従ってアプリケーションを起動してみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> react-electron-sample</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p><img src="/images/20210107/image_18.png" alt=""></p><p>無事にHello Worldが起動しました。</p><p><img src="/images/20210107/image_19.png" alt=""><br><code>Edit src/App.js</code>の文言を無視するのは忍びないので、Hello Worldらしいメッセージに修正しました。<br>pタグの文言を修正するだけです。</p><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">        &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Hello React <span class="keyword">with</span> Electron</span><br><span class="line">        &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;a</span></span><br><span class="line"><span class="regexp">          className="App-link"</span></span><br><span class="line"><span class="regexp">          href="https:/</span><span class="regexp">/reactjs.org"</span></span><br><span class="line"><span class="regexp">          target="_blank"</span></span><br><span class="line"><span class="regexp">          rel="noopener noreferrer"</span></span><br><span class="line"><span class="regexp">        &gt;</span></span><br><span class="line"><span class="regexp">          Learn React</span></span><br><span class="line"><span class="regexp">        &lt;/</span>a&gt;</span><br><span class="line">      &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>ここまででReactのHello Worldは完了です。<br>これをElectronアプリケーションに拡張します。</p><p>まずは愚直にelectronパッケージをインストールします。<br><code>npm start</code>コマンドを実行したディレクトリと同じ場所で、下記コマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron electron-builder --save-dev</span><br></pre></td></tr></table></figure><p>Vue.jsの場合ライブラリが自動でやってくれた部分ですが、<code>package.json</code>に実行できるコマンド、およびビルドのために必要な設定項目を追記します。<br>Vue.jsでは<code>vue.config.js</code>にビルドオプションを記載する形を取ることができましたが、Vue CLIプラグインによる拡張が無いため<code>package.json</code>に直接記載する形になります。</p><figure class="highlight json"><figcaption><span>jsonc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"react-electron-sample"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">  <span class="attr">"build"</span>: &#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"files"</span>: [</span><br><span class="line">      <span class="string">"build/**/*"</span>,</span><br><span class="line">      <span class="string">"*.js"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"directories"</span>: &#123;</span><br><span class="line">      <span class="attr">"output"</span>: <span class="string">"dist_electron"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"win"</span>: &#123;</span><br><span class="line">      <span class="attr">"target"</span>: <span class="string">"portable"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"."</span>,</span><br><span class="line">  <span class="comment">// 中略 //</span></span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"electron"</span>: <span class="string">"^11.1.1"</span>,</span><br><span class="line">    <span class="attr">"electron-builder"</span>: <span class="string">"^22.9.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line">    <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span>,</span><br><span class="line">    <span class="attr">"electron:serve"</span>: <span class="string">"electron ."</span>,</span><br><span class="line">    <span class="attr">"electron:build"</span>: <span class="string">"react-scripts build &amp;&amp; electron-builder"</span>,</span><br><span class="line">    <span class="attr">"postinstall"</span>: <span class="string">"electron-builder install-app-deps"</span>,</span><br><span class="line">    <span class="attr">"postuninstall"</span>: <span class="string">"electron-builder install-app-deps"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アプリケーション起動時のエントリポイントの設定に当たる<code>&quot;main&quot;: &quot;main.js&quot;</code>は<code>&quot;main&quot;: &quot;electron/starter.js&quot;</code>のように、ディレクトリを分けて整理するような事例など諸説確認しましたが、今回はクイックスタートの雰囲気に合わせようと思います。</p><p>加えて、Vue CLIプラグインの場合自動生成された<code>background.js</code>が担当してくれた部分を手動で書き換えます。</p><p>Vue CLIが自動生成した<code>background.js</code>は若干Vue.js向けの拡張が為されているため、<a href="https://github.com/electron/electron-quick-start" target="_blank" rel="noopener">electron-quick-start</a>の内容をベースに<code>index.html</code>のパスなどを調整します。</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modules to control application life and create native browser window</span></span><br><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">"electron"</span>);</span><br><span class="line"><span class="keyword">const</span> app = electron.app;</span><br><span class="line"><span class="keyword">const</span> BrowserWindow = electron.BrowserWindow;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      preload: path.join(__dirname, <span class="string">'preload.js'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// and load the index.html of the app.</span></span><br><span class="line">  mainWindow.loadFile(<span class="string">'build/index.html'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  <span class="comment">// mainWindow.webContents.openDevTools()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.whenReady().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  createWindow()</span><br><span class="line">  </span><br><span class="line">  app.on(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// On macOS it's common to re-create a window in the app when the</span></span><br><span class="line">    <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">    <span class="keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="number">0</span>) createWindow()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed, except on macOS. There, it's common</span></span><br><span class="line"><span class="comment">// for applications and their menu bar to stay active until the user quits</span></span><br><span class="line"><span class="comment">// explicitly with Cmd + Q.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) app.quit()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this file you can include the rest of your app's specific main process</span></span><br><span class="line"><span class="comment">// code. You can also put them in separate files and require them here.</span></span><br></pre></td></tr></table></figure><p>上記ファイルは<code>preload.js</code>を読み込んでいるため、こちらも同様にディレクトリ直下に作成します。</p><figure class="highlight js"><figcaption><span>preload.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All of the Node.js APIs are available in the preload process.</span></span><br><span class="line"><span class="comment">// It has the same sandbox as a Chrome extension.</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> replaceText = <span class="function">(<span class="params">selector, text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(selector)</span><br><span class="line">    <span class="keyword">if</span> (element) element.innerText = text</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> type <span class="keyword">of</span> [<span class="string">'chrome'</span>, <span class="string">'node'</span>, <span class="string">'electron'</span>]) &#123;</span><br><span class="line">    replaceText(<span class="string">`<span class="subst">$&#123;type&#125;</span>-version`</span>, process.versions[type])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>package.json</code>の修正、<code>main.js</code>, <code>preload.js</code>の配置が完了したら、いよいよ起動です。</p><p>下記コマンドを実行するとElectronアプリケーションが起動します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run electron:serve</span><br></pre></td></tr></table></figure><p>無事に成功しました。</p><p><img src="/images/20210107/image_20.png" alt=""></p><p>アプリケーションのビルドは下記コマンドです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run electron:build</span><br></pre></td></tr></table></figure><p>dis_electron配下にアプリケーションがビルドされました。<br>package.jsonに何も設定が無いとdistディレクトリに生成されます。</p><img src="/images/20210107/image_21.png" class="img-small-size"><p>作業の抜け漏れ、typoの確認や、理想のディレクトリ構成を検討して迷うコストを鑑みると体感でVue.jsの3倍くらいの時間がかかる感触でした。</p><p>既存のReact製アプリをElectron化したい、Vueより慣れてるフレームワークがある、など事情はあると思いますので、どちらが良いかはチーム構成と趣味次第ですが、エッジケースの挙動や脆弱性の穴埋め等をライブラリ側である程度保証してくれるVue CLIプラグインの利点は大きいかなと感じています。</p><h2 id="Vue-js（ブラウザ）でできてElectronアプリでできないこと"><a href="#Vue-js（ブラウザ）でできてElectronアプリでできないこと" class="headerlink" title="Vue.js（ブラウザ）でできてElectronアプリでできないこと"></a>Vue.js（ブラウザ）でできてElectronアプリでできないこと</h2><p>無いといっても良いかなというレベル感です。</p><p>Webアプリケーションとして一通りの機能を持ったアプリケーションをVue.js x Electronの組み合わせで作りました。最初は技術的実現性を調査しながら実装を進めていく形になりますが、Electronの問題でどうしてもできなかったという機能はありませんでした。少々の調査や努力が必要だった部分はあります。</p><p>当初心配だった部分の一例を紹介します。</p><blockquote><p>httpクライアントライブラリ(axiosなど)を用いた外部APIへのアクセスは可能か</p></blockquote><p>→問題なく可能だった</p><blockquote><p>VueRouterを用いた画面遷移は可能か</p></blockquote><p>→<a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/commonIssues.html#blank-screen-on-builds-but-works-fine-on-serve" target="_blank" rel="noopener">少々設定が必要</a>だが動いた</p><blockquote><p>ファイルのダウンロード、生成は可能か</p></blockquote><p>→問題なく可能だった</p><blockquote><p>パスワード付きProxy認証を通すことは可能か</p></blockquote><p>→ライブラリ側での担保はされないので自前で実装する必要があった</p><blockquote><p>クライアント証明書を利用することは可能か</p></blockquote><p>→可能、クライアント証明書が端末に複数インストールされているような場合は自前で選択処理を実装する必要があった</p><p>初めて触る場合は色々不安になると思いますが、想像以上に大丈夫でした。<br>これらハマりどころやtipsは今あるもの、今後気が付いたもの含め適宜記事にしたいと考えています。</p><h2 id="Electronアプリの開発フロー"><a href="#Electronアプリの開発フロー" class="headerlink" title="Electronアプリの開発フロー"></a>Electronアプリの開発フロー</h2><p>上記の通り、Vue.jsとして動かしているときは問題なかったがビルドすると動かなくなった、というケースは少ないです。（0ではありません）</p><p>そのため、基本は完全にWeb開発の流れで、Vue.jsのホットリロードを効かせた状態でWebアプリとして開発しています。機能が出来上がった段階でElectronアプリケーションとしてビルドし、ビルドが通り、正常に動作するか確認するような形で開発を行うことが可能です。Electronアプリケーションとして起動しつつ、ホットリロードを行う<a href="https://www.npmjs.com/package/electron-reload" target="_blank" rel="noopener">electron-reload</a>のようなパッケージも存在します。万全を期すために、これを導入して常にElectronアプリケーションとして問題ないか検証しながら作業するようなフローにすることも可能かもしれません。導入コストや通常時の動作が重くなる可能性などを考慮し、私のチームでは現在導入していません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ElectronはWebの技術で開発可能な、デスクトップアプリケーションのフレームワークです。</p><p>クロスプラットフォームで、フロントエンドライブラリに依存しない、デスクトップアプリケーションの開発プラットフォームがElectronです。ライブラリの導入以外でWeb開発と開発手法が大きく異なるようなことはありません。</p><p>記事にするために整理したhello world状態のアプリケーション2種類をプライベートのgithubで公開しています。参考になれば、もしくはこれをベースに何かアプリケーションを作って頂ければ嬉しいです。</p><ul><li><a href="https://github.com/maito1201/vue-cli-electron-sample" target="_blank" rel="noopener">vue-cli-electron-sample</a></li><li><a href="https://github.com/maito1201/react-electron-sample" target="_blank" rel="noopener">react-electron-sample</a></li></ul><p>余談ですが、昨年の<a href="https://qiita.com/advent-calendar/2020/kuso-app" target="_blank" rel="noopener">Qiita クソアプリ Advent Calendar 2020</a>でもElectronを使った開発事例がありましたね。</p><p>お仕事で役立つことはもちろんですが、ちょっとした便利ツールでも、クソアプリ Advent Calendar向けの小ネタでも、いつものWeb開発からちょっと趣向を変えて、デスクトップアプリケーションという選択肢を視野に入れていただければ幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;最近Electronを用いたアプリケーション開発を行っています。技術ブログで今まで取り扱った事のないテーマであるため、まずは入門記事を書いてみました。&lt;/p&gt;
&lt;h2 id=&quot;Electronとは&quot;&gt;&lt;a href=&quot;#Electron
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="Electron" scheme="https://future-architect.github.io/tags/Electron/"/>
    
      <category term="クロスプラットフォーム" scheme="https://future-architect.github.io/tags/%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night(第5弾：AWS＆DataPlatform MaaSビジネス編)を開催しました。</title>
    <link href="https://future-architect.github.io/articles/20201228/"/>
    <id>https://future-architect.github.io/articles/20201228/</id>
    <published>2020-12-27T15:00:00.000Z</published>
    <updated>2020-12-28T02:05:34.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIGの山田、町田、多賀です。先日2020/11/25にオンラインにてFuture Tech Nightという社外勉強会を開催しました。今回は第5弾としてAWS＆DataPlatform を活用した、MaaSビジネスの最新事例を紹介しました。</p><ul><li><a href="https://future.connpass.com/event/177093/" target="_blank" rel="noopener">Future Tech Night #1 ~メディア業界変革編～</a></li><li><a href="https://future.connpass.com/event/179387/" target="_blank" rel="noopener">Future Tech Night #2 ～MaaS ビジネス編～</a></li><li><a href="https://future.connpass.com/event/185051/" target="_blank" rel="noopener">Future Tech Night #3 ～船舶IoT Platform編～</a></li><li><a href="https://future.connpass.com/event/188742/" target="_blank" rel="noopener">Future Tech Night #4 〜Go x AWS スマート工場編〜</a></li><li><a href="https://future.connpass.com/event/195568/" target="_blank" rel="noopener">Future Tech Night #5 〜AWS＆DataPlatform MaaSビジネス編〜</a> ← 今回はここ</li></ul><p><img src="/images/20201228/74fb7c65c1ef518a159eb99b5105ef10.png" alt=""></p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>勉強会は以下のような構成で行いました。</p><ul><li>FutureとTechnology Innovation Groupの紹介</li><li>DataPlatform 構築と Tips 紹介</li><li>DataPlatform 蓄積データの外部提供の仕組みの紹介</li></ul><p>多賀からは、DataPlatform の構築方法と設計事例の共有と、 構築にあたって利用したシステム・サービスの Tips の紹介をしました。DataPlatform で必要な要素を分解し、責務を分けた設計事例をお話いたしました。Tips では、バッチ処理・AWS Glue・Airflow についてお話いたしました。<br><img src="/images/20201228/image.png" alt=""></p><p>町田からは、DataPlatformに蓄積されたデータを外部に提供する仕組みを構築するにあたっての検討内容を紹介しました。また、データ提供基盤であるGatewayアプリの全体像をお話しました。</p><p><img src="/images/20201228/2020-12-25_153425.jpg" alt=""></p><h2 id="登壇者からコメント"><a href="#登壇者からコメント" class="headerlink" title="登壇者からコメント"></a>登壇者からコメント</h2><p>町田: 本当はもっと細かい部分で、各要素の詳細や技術的な話をもっとしたかったのですが、諸事情によりかなりモヤっとした中身になってしまい、内容が薄く得るものが少なかったことは残念でした。</p><p>多賀: MaaS サービスを提供するにあたって肝となる、DataPlatform についてお話いたしました。発展途上の中、現状得られた知見をできる限り共有いたしました。少しでも持ち帰ってもらえるものがあったとしたら嬉しいです。</p><h2 id="勉強会でいただいた質問"><a href="#勉強会でいただいた質問" class="headerlink" title="勉強会でいただいた質問"></a>勉強会でいただいた質問</h2><h3 id="Q-リアルタイムデータ連携のKinesisからLambdaって流れありますが、KinesisFirehoseではなく、Lambdaを挟んだのは何故か知りたいです。"><a href="#Q-リアルタイムデータ連携のKinesisからLambdaって流れありますが、KinesisFirehoseではなく、Lambdaを挟んだのは何故か知りたいです。" class="headerlink" title="Q. リアルタイムデータ連携のKinesisからLambdaって流れありますが、KinesisFirehoseではなく、Lambdaを挟んだのは何故か知りたいです。"></a>Q. リアルタイムデータ連携のKinesisからLambdaって流れありますが、KinesisFirehoseではなく、Lambdaを挟んだのは何故か知りたいです。</h3><p>発表時は Firehose の GAがまだだったためと回答いたしましたが、 GA が 2017/08/25 であることから誤りでした。 採用理由ですが、配置先の S3 Bucket と prefix を柔軟に切り替えたかったためが正でした。</p><h3 id="Q-Glueは、CloudWatchなどで定期実行でしょうか？"><a href="#Q-Glueは、CloudWatchなどで定期実行でしょうか？" class="headerlink" title="Q. Glueは、CloudWatchなどで定期実行でしょうか？"></a>Q. Glueは、CloudWatchなどで定期実行でしょうか？</h3><p>いえ、Airflow を利用して定期実行しております。</p><h3 id="Q-Glueの処理結果の正常・異常の監視はどのような方法で、何のステータスを見ていますか？"><a href="#Q-Glueの処理結果の正常・異常の監視はどのような方法で、何のステータスを見ていますか？" class="headerlink" title="Q. Glueの処理結果の正常・異常の監視はどのような方法で、何のステータスを見ていますか？"></a>Q. Glueの処理結果の正常・異常の監視はどのような方法で、何のステータスを見ていますか？</h3><p>Airflow からジョブを起動しており、Airflow ジョブ内で正常・以上のステータスを判定し、エラーを検知する仕組みとしております。</p><h3 id="Q-Airflowについて質問です。StepFunctionsとAirflow比べた時のAirflowの優位性は何でしょうか？"><a href="#Q-Airflowについて質問です。StepFunctionsとAirflow比べた時のAirflowの優位性は何でしょうか？" class="headerlink" title="Q. Airflowについて質問です。StepFunctionsとAirflow比べた時のAirflowの優位性は何でしょうか？"></a>Q. Airflowについて質問です。StepFunctionsとAirflow比べた時のAirflowの優位性は何でしょうか？</h3><p>Python でジョブを実装することができるため、 Python で実現できることがほぼ全て可能になります。 そのため、より柔軟なジョブ設定を行うことができます。</p><h3 id="Q-Redshiftの同時接続で問題は起きたことありますか？"><a href="#Q-Redshiftの同時接続で問題は起きたことありますか？" class="headerlink" title="Q. Redshiftの同時接続で問題は起きたことありますか？"></a>Q. Redshiftの同時接続で問題は起きたことありますか？</h3><p>当環境では、データ量・接続数共に少ない影響で、現状は発生したことはございません。</p><h3 id="Q-LambdaとAPIGateway、どこがどう辛かったんでしょうか。"><a href="#Q-LambdaとAPIGateway、どこがどう辛かったんでしょうか。" class="headerlink" title="Q. LambdaとAPIGateway、どこがどう辛かったんでしょうか。"></a>Q. LambdaとAPIGateway、どこがどう辛かったんでしょうか。</h3><p>ここでは詳細は語れない部分もありますが、Gateway処理を検討していった際に、単純な認証・認可のみのような制御だけではなく、他にもいろいろな制御が必要なことが判り、全て実装していくにはLambdaよりもECSでプロキシのようなアプリとして方が良さそうという判断となりました。</p><h3 id="Q-同時アクセス時の結果整合性はどのように取られてますでしょうか？"><a href="#Q-同時アクセス時の結果整合性はどのように取られてますでしょうか？" class="headerlink" title="Q. 同時アクセス時の結果整合性はどのように取られてますでしょうか？"></a>Q. 同時アクセス時の結果整合性はどのように取られてますでしょうか？</h3><p>ここでは利用量の制限チェックの話として捉えますと、利用量のチェックをする際にDynamoDBの値をチェックしますが、その値は、瞬間的に連続でアクセスした場合は、常に最新のものが取れるとは限りません。<br>ただし、最新の値が取れないことは、ここでは利用ユーザの不利益になることではない（むしろ逆）ため、良しとしています。</p><h3 id="Q-API-Gateway-を多用途に備えようとすると，遅延などの要求を満たすためにはDynamoDBインスタンスの要求スペックが上がっていくと想像しますが，想定以上にコストがかかったなどの苦労話はありますでしょうか"><a href="#Q-API-Gateway-を多用途に備えようとすると，遅延などの要求を満たすためにはDynamoDBインスタンスの要求スペックが上がっていくと想像しますが，想定以上にコストがかかったなどの苦労話はありますでしょうか" class="headerlink" title="Q. API Gateway を多用途に備えようとすると，遅延などの要求を満たすためにはDynamoDBインスタンスの要求スペックが上がっていくと想像しますが，想定以上にコストがかかったなどの苦労話はありますでしょうか"></a>Q. API Gateway を多用途に備えようとすると，遅延などの要求を満たすためにはDynamoDBインスタンスの要求スペックが上がっていくと想像しますが，想定以上にコストがかかったなどの苦労話はありますでしょうか</h3><p>現状では、利用ユーザ・アクセスは少ないため苦労話は今のところは無いです。今後見えてくる課題にはなり得ると思っております。</p><h3 id="Q-サードパーティ製のGUIに優れたETL製品ではなく、Glue-を採用した理由"><a href="#Q-サードパーティ製のGUIに優れたETL製品ではなく、Glue-を採用した理由" class="headerlink" title="Q. サードパーティ製のGUIに優れたETL製品ではなく、Glue を採用した理由"></a>Q. サードパーティ製のGUIに優れたETL製品ではなく、Glue を採用した理由</h3><p>S3 を中心としたデータレイク構築が要件としてあり、 AWS 製品を中心に比較検討を実施した経緯があったためです。他製品も高機能で優れた部分もあるかと思われますが、Glue はフルマネージドで分散処理ができる利便性があり優れたサービスであると考えています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ご参加いただいた方々、ありがとうございました。<br>FutureではFuture Tech Nightの他にも様々なイベントを開催しております。今後も皆様のご参加をお待ちしております。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200925/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200925%2F&key=eed90a27f7b47e9333aee373cceb6203&iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、TIGの山田、町田、多賀です。先日2020/11/25にオンラインにてFuture Tech Nightという社
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>2021年版Pythonの型ヒントの書き方 (for Python 3.9)</title>
    <link href="https://future-architect.github.io/articles/20201223/"/>
    <id>https://future-architect.github.io/articles/20201223/</id>
    <published>2020-12-22T15:00:00.000Z</published>
    <updated>2020-12-23T06:54:28.253Z</updated>
    
    <content type="html"><![CDATA[<p>Pythonに型ヒントが入ってからしばらく経ちます。型ヒントの立ち位置も、なんでもできるアノテーションとして導入されましたが、型ヒント以外の用途はあまり育たず、型ヒントが中心になり、PEPや仕様もそれに合わせて変化したり、より書きやすいように機能が追加されてきました。</p><p>本エントリーでは、Python 3.9時点での最新情報を元に、現在サポート中のPythonバージョン（3.6以上）との互換性の情報も織り交ぜながら、最新の型ヒントの書き方を紹介します。</p><p>本エントリーの執筆には、Pythonの型の有識者の<a href="https://twitter.com/moriyoshit" target="_blank" rel="noopener">@moriyoshi</a>、<a href="https://twitter.com/aodag" target="_blank" rel="noopener">@aodag</a>、<a href="https://twitter.com/tk0miya" target="_blank" rel="noopener">@tk0miya</a> にアドバイスをもらいました。ありがとうございます。</p><h1 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h1><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>Visual Studio Codeの場合は、事前にどのインタプリタを利用するかを設定しておきます。その環境にインストールします。venvを使うにはvenvPathを設定します。</p><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"python.venvPath"</span>: <span class="string">"$&#123;workspaceFolder&#125;/.venv"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mypyを有効にします。デフォルトの動作だと、型付けをしていない関数内部のチェックがされないので、<code>--check-untyped-defs</code>をつけたり、より厳しい<code>--strict</code>をつけたりすると良いでしょう。</p><figure class="highlight plain"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;python.linting.mypyEnabled&quot;: true,</span><br><span class="line">    &quot;python.linting.enabled&quot;: true,</span><br><span class="line">    &quot;python.linting.mypyArgs&quot;: [</span><br><span class="line">        &quot;--ignore-missing-imports&quot;,</span><br><span class="line">        &quot;--follow-imports&#x3D;silent&quot;,</span><br><span class="line">        &quot;--show-column-numbers&quot;,</span><br><span class="line">        &quot;--check-untyped-defs&quot; &#x2F;&#x2F; 追加</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>必要な追加パッケージのインストールが実行されますが、3.9特有の機能はまだPyPIにリリースされている安定板の0.790では対応していません。masterブランチにはいくつかの機能が実装済みなので、0.800リリースまでは最新の開発版をインストールしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/python/mypy.git</span><br><span class="line">$ <span class="built_in">cd</span> mypy</span><br><span class="line">$ git submodule --update init</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><h2 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h2><p>PyCharmはPythonインタプリタ(IntelliJ IDEA Ultimateを使っている場合はSDK設定で追加)の設定をすればmypyのインストールは不要です。</p><p><img src="/images/20201223/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-12-20_10.30.58.png" alt=""></p><h1 id="変数の型の型付け"><a href="#変数の型の型付け" class="headerlink" title="変数の型の型付け"></a>変数の型の型付け</h1><p>変数名の後ろにコロンと型を付与することで型をつけられます。</p><figure class="highlight py"><figcaption><span>変数の型付け</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i_love_python: bool = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代入を後回しにしてもよい</span></span><br><span class="line">i_love_python: bool</span><br><span class="line">i_love_python = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>以前はPythonのコメントの中に記入していましたが、Python 3.5はすでにEOLなので、PyPIで配布されるライブラリ開発者ももう上記の書き方に統一しても問題ないでしょう。</p><figure class="highlight py"><figcaption><span>古い書き方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.5以前の書き方</span></span><br><span class="line">i_love_python = <span class="literal">True</span> <span class="comment"># type: bool</span></span><br></pre></td></tr></table></figure><h1 id="関数やメソッドの型付け"><a href="#関数やメソッドの型付け" class="headerlink" title="関数やメソッドの型付け"></a>関数やメソッドの型付け</h1><p>関数やメソッドは引数リストと返り値の情報を付与できます。返り値がない場合は<code>-&gt; None</code>（あるいは<code>typing.NoReturn</code>）をつけます。</p><figure class="highlight py"><figcaption><span>関数の型付け</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(name: str)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Hello Guido, my name is <span class="subst">&#123;name&#125;</span>'</span></span><br><span class="line"></span><br><span class="line">greeting(<span class="number">10</span>) <span class="comment"># エラー</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返り値がない場合は-&gt; Noneをつける</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_python_version</span><span class="params">()</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    print(sys.version)</span><br></pre></td></tr></table></figure><p>mypyは<code>--check-untyped-defs</code>オプションが付与されていない場合、<code>-&gt; None</code>が付いてない関数は型付けされていないとみなしてエラーチェックしません。返り値がない関数でも忘れずにつけるようにしましょう。PyCharmであれば警告は表示されます。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mypyは返り値宣言されてない関数の中のエラーはチェックしない</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    greeting(<span class="number">10</span>) <span class="comment"># エラーにならない</span></span><br></pre></td></tr></table></figure><h1 id="ユーザー定義クラスの型つけ"><a href="#ユーザー定義クラスの型つけ" class="headerlink" title="ユーザー定義クラスの型つけ"></a>ユーザー定義クラスの型つけ</h1><p>クラスは乱暴にいってしまえば、変数と関数を固めたものであるので、これまで説明してきた要素でほぼ説明できます。</p><figure class="highlight py"><figcaption><span>クラスの型付け</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnidentifiedMysteriousAnimal</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    未確認生物クラス</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    name: str = <span class="string">"unknown"</span> <span class="comment"># デフォルト値</span></span><br><span class="line">    country: str</span><br><span class="line">    year: int</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name: str, country: str, year: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.country = country</span><br><span class="line">        self.year = int </span><br><span class="line"></span><br><span class="line">killerRabbit = UnidentifiedMysteriousAnimal(<span class="string">"殺人ウサギ"</span>, <span class="string">"Great Britain"</span>, <span class="number">1975</span>)</span><br></pre></td></tr></table></figure><p>なお、クラス変数を設定するには、 <code>typing.ClassVar</code>を利用します。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> ClassVar</span><br><span class="line"></span><br><span class="line"><span class="comment"># classの中にこれを追加</span></span><br><span class="line">    joke: ClassVar[bool] = true</span><br></pre></td></tr></table></figure><h1 id="あらゆる型を受け付けるAny"><a href="#あらゆる型を受け付けるAny" class="headerlink" title="あらゆる型を受け付けるAny"></a>あらゆる型を受け付ける<code>Any</code></h1><p>型のある言語にはたいてい「あらゆる型のインスタンスを保持できるany型」があります。Pythonにも<code>typing.Any</code>があります。もちろん、なるべく静的に型を決めていき、<code>Any</code>が登場しないに越したことはないのですが、外部からやってくる情報をハンドリングするときなど、どうしても必要な``ことがあります。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Any</span><br><span class="line"></span><br><span class="line">user_input: Any</span><br></pre></td></tr></table></figure><h1 id="型よりも厳しく、特定の文字列や数値のリテラルのみを許可する"><a href="#型よりも厳しく、特定の文字列や数値のリテラルのみを許可する" class="headerlink" title="型よりも厳しく、特定の文字列や数値のリテラルのみを許可する"></a>型よりも厳しく、特定の文字列や数値のリテラルのみを許可する</h1><p>型ヒントというと、変数に代入できるオブジェクトの型を限定することが想像されますが、「文字列」ではなくて、「特定の文字列」、「数値」ではなく、「特定の数値」など、特定のリテラルのみを保持できる制約を与えることができます。これにより、他の言語のenumのようなことが実現できます。</p><p>これはPython 3.8以降のみ対応していますが、PyPIの<a href="https://pypi.org/project/typing-extensions/" target="_blank" rel="noopener">typing-extensions</a>パッケージを利用すれば以前のバージョンでも利用できます。</p><figure class="highlight py"><figcaption><span>リテラル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.6, 3.7はpip install typing-extensionsが必要</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> typing <span class="keyword">import</span> Literal</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> typing_extensions <span class="keyword">import</span> Literal</span><br><span class="line">    </span><br><span class="line">train_type: Literal[<span class="string">'各駅停車'</span>, <span class="string">'準急'</span>, <span class="string">'急行'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># この文字列は許可されているのでOK</span></span><br><span class="line">train_type = <span class="string">'準急'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># この文字列は許可されていないのでエラー</span></span><br><span class="line">train_type = <span class="string">'超特急'</span></span><br></pre></td></tr></table></figure><h1 id="ジェネリクス"><a href="#ジェネリクス" class="headerlink" title="ジェネリクス"></a>ジェネリクス</h1><p>リストや集合の型付けを行うには、次のように<code>型名[要素の型]</code>、辞書は<code>dict[キーの型, 値の型]</code>など、ブラケットで型変数の設定を行います。mypyは現在リリースされている0.790ではこの書き方はできないので、0.800の開発版が必要です。</p><figure class="highlight py"><figcaption><span>Python3.7以降の書き方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.9以降のみであればこの行は不要</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"></span><br><span class="line">my_favorite_pokemons: list[str] = [<span class="string">"フォッコ"</span>, <span class="string">"ルカリオ"</span>]</span><br></pre></td></tr></table></figure><p>Python 3.8以前はこのような書き方はできず、typingパッケージのものを利用していました。Python 3.9ではこの書き方はdeprecatedになります。Python 3.7とPython 3.8は<code>from __future__ import annotations</code>を先頭に記述すれば使えるようになります。2021年12月がEOLのPython 3.6は<code>__future__</code>を使った回避はできないため、Python 3.6をサポートするのであれば（広く公開するライブラリの場合など）、こちらの書き方が必要です。</p><figure class="highlight py"><figcaption><span>Python3.6もサポートする場合の書き方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line">my_favorite_pokemons: List[str] = [<span class="string">"フォッコ"</span>, <span class="string">"ルカリオ"</span>]</span><br></pre></td></tr></table></figure><p><a href="https://www.python.org/dev/peps/pep-0585/#implementation" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0585/#implementation</a></p><p>新と旧で使うべきジェネリック型定義がどこにあるかは上記のPEPにまとまっています。大雑把にいえば、以前は<code>typing</code>パッケージがそのすべてを担っていましたが、Python 3.9以降は次のように各パッケージに分散されています。</p><ul><li>実際にオブジェクトとして使う型そのものであれば、その型定義をそのまま利用<ul><li>リスト、タプル、辞書などの<code>__builtins__</code>の要素であれば、<code>list</code>、<code>tuple</code>、<code>dict</code>など</li><li><code>collections</code>パッケージの各クラスであれば、<code>collections.deque</code>など</li></ul></li><li>iterable、callableなどのPythonのプロトコル関係は<code>collections.abc</code>以下</li><li>コンテキスト関係は<code>contextlib</code>、正規表現は<code>re</code></li></ul><p>例えば、コールバック用にcallableオブジェクトを関数引数に渡したり、インスタンス変数に保存したいとします。この場合は関数を受け取れる宣言は次のように<code>collections.abc.Callable</code>を使って書きます。型パラメータの最初は引数の型のリスト、後者は返り値です。</p><figure class="highlight py"><figcaption><span>callableな引数の設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Callable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_callback</span><span class="params">(cb: Callable[[str], None])</span> -&gt; <span class="keyword">None</span>:</span></span><br></pre></td></tr></table></figure><p>古い環境は<code>typing.Callable</code>を代わりに使います。</p><figure class="highlight py"><figcaption><span>古い書き方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Callable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_callback</span><span class="params">(cb: Callable[[str], None])</span> -&gt; <span class="keyword">None</span>:</span></span><br></pre></td></tr></table></figure><h2 id="コレクションの種類の使い分け"><a href="#コレクションの種類の使い分け" class="headerlink" title="コレクションの種類の使い分け"></a>コレクションの種類の使い分け</h2><p><code>collections.abc</code>には多数の型があります。今までのコーディングで、これらを細かく区別して利用することは基本的になかったと思いますが、型付けを行うにあたっては、なるべく制約（メソッド）の少ないコレクションを選択する方がポータビリティが上がります。次の図は<code>collections.abc</code>および組み込み型のシーケンスの継承関係（実装上の継承ではなく、メソッドの包含で定義した）の図です。左に行くほど、少ないメソッドを持っており、右側に行くほど、メソッドが多くなります。関数の中で使用しているメソッドを見て、なるべくこの図の左側にある型を選んで使うと良いでしょう。</p><p><img src="/images/20201223/collections.png" alt=""></p><p>例えば、関数の中で引数のシーケンスに対して、<code>for</code>でループを回すだけの使い方をするならば<code>collections.abc.Iterable</code>を、さらに<code>in</code>で存在確認をする必要があれば、<code>Collection</code>を使うと、さまざまなシーケンスのインスタンスを受けて利用できるようになります。ランダムアクセスが必要であれば<code>Sequence</code>を使います。値の変更が必要であれば<code>Mutable</code>がついた型を利用します。</p><p>例えば、引数の型を安易に<code>list</code>を指定してしまうと、<code>set</code>や<code>dict</code>を渡せなくなります。特に慣れているからといって安易に具象型（リスト、タプル、辞書、集合）を設定しない方が良いです。といっても、これらの具象型を使う方が理解はしやすいと思うので、まずはこの具象型を当てはめてみて、使う演算子やメソッドが少なくても済むことをを確認したら、少しずつ左側の型に寄せていくと良いかもしれません。</p><h2 id="タプルと他のシーケンスの違い"><a href="#タプルと他のシーケンスの違い" class="headerlink" title="タプルと他のシーケンスの違い"></a>タプルと他のシーケンスの違い</h2><p>タプルは長さ情報まで固定ですので、要素数分、型を指定します。<code>tuple[int, str, float]</code>など、型を混ぜて指定もできます。一方、リストなどのシーケンスは要素内の全要素が同じ制約になります。1要素だけ設定すればシーケンスの長さによらず、利用できます。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.9の例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要素数があっているのでOK</span></span><br><span class="line">t1: tuple[str, str, str] = (<span class="string">"空飛ぶ"</span>, <span class="string">"モンティ"</span>, <span class="string">"パイソン"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># こちらはあっていないのでNG</span></span><br><span class="line">t2: tuple[str] = (<span class="string">"Monty"</span>, <span class="string">"Python's"</span>, <span class="string">"Flying"</span>, <span class="string">"Circus"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># リストは全要素が同じ型。1つだけ型定義すれば長さは自由</span></span><br><span class="line">l: list[str] = [<span class="string">"Monty"</span>, <span class="string">"Python"</span>, <span class="string">"and"</span>, <span class="string">"the"</span>, <span class="string">"Holy"</span>, <span class="string">"Grail"</span>]</span><br></pre></td></tr></table></figure><p>タプルで同じ型の要素を任意長持つインスタンスに適合する型を書くには、ellipsis演算子（<code>...</code>)を使います。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t: tuple[str, ...] = (<span class="string">"Monty"</span>, <span class="string">"Python's"</span>, <span class="string">"Flying"</span>, <span class="string">"Circus"</span>)</span><br></pre></td></tr></table></figure><h1 id="合併型（Union-Type-オプショナル"><a href="#合併型（Union-Type-オプショナル" class="headerlink" title="合併型（Union Type) / オプショナル"></a>合併型（Union Type) / オプショナル</h1><p>引数の型は常に1種類だけ、とは限りません。条件によって文字列や数字の両方を受け入れる関数を作りたいこともあります。</p><p>Python 3.10では文字列でも数字でもいい、という条件は次のように<code>|</code>を使って書きます。この記法も、mypy 0.790では対応せず、mypyのmasterブランチ版のインストールが必要です。</p><figure class="highlight py"><figcaption><span>合併型</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_year</span><span class="params">(year: int | str)</span> -&gt; int:</span></span><br></pre></td></tr></table></figure><p>Python 3.7から3.9であれば、<code>from __future__ import annotations</code>を記述すればこの記法が使えるようになります。</p><p>Python 3.6もサポートしたい場合は、旧式の<code>typing.Union</code>を利用して書きます。</p><figure class="highlight py"><figcaption><span>古い書き方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Union</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_year</span><span class="params">(year: Union[int, str])</span> -&gt; int:</span></span><br></pre></td></tr></table></figure><p>合併型は同じ型のまま受け入れてくれる関数にそのまま渡す以外は、型を分解しなければ利用できません。<code>isinstance()</code>などで型のチェックを行うと、その条件を見て、ブロック内の型を絞ってくれます。</p><figure class="highlight py"><figcaption><span>ロジック内で型を分離</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_year</span><span class="params">(year: int | str)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(year, int):</span><br><span class="line">        <span class="comment"># ここではyearは数値</span></span><br><span class="line">        <span class="keyword">return</span> year</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># ここではyearは文字列</span></span><br><span class="line">        <span class="keyword">if</span> year.startswith(<span class="string">"昭和"</span>):</span><br><span class="line">            <span class="keyword">return</span> int(year[<span class="number">2</span>:]) + <span class="number">1925</span></span><br><span class="line">        <span class="keyword">elif</span> year.startswith(<span class="string">"平成"</span>):</span><br><span class="line">            <span class="keyword">return</span> int(year[<span class="number">2</span>:]) + <span class="number">1988</span></span><br><span class="line">        <span class="keyword">elif</span> year.startswith(<span class="string">"令和"</span>):</span><br><span class="line">            <span class="keyword">return</span> int(year[<span class="number">2</span>:]) + <span class="number">2018</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'unsupported style'</span>)</span><br><span class="line"></span><br><span class="line">print(normalize_year(<span class="string">'昭和55'</span>))</span><br></pre></td></tr></table></figure><p>合併型の1つの形として他の言語でいうnullable（未初期化がありえる）のような概念を表現するために、<code>typing.Optional</code>が提供されています。これは<code>None</code>との合併型と等価です。</p><figure class="highlight py"><figcaption><span>Optionalの定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line">age: Optional[int]</span><br><span class="line">age = <span class="number">18</span>    <span class="comment"># 数値を入れることもできる</span></span><br><span class="line">age = <span class="literal">None</span>  <span class="comment"># 年齢未回答も選択可能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># こうも書ける</span></span><br><span class="line">age: int | <span class="literal">None</span></span><br></pre></td></tr></table></figure><h1 id="キャスト"><a href="#キャスト" class="headerlink" title="キャスト"></a>キャスト</h1><p>合併型や<code>Any</code>など、型が一意に決まらない変数のうち、状況から、特定の型である確信がある場合、キャストを使って特定の型であると処理系に伝える方法が提供されています。本来なら、ifの条件分岐などを行う方法の方が実際の変数の値を見ての判断になりますが、緊急的な脱出ハッチとして利用可能です。</p><figure class="highlight py"><figcaption><span>キャスト</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> cast</span><br><span class="line"></span><br><span class="line">r = httpx.get(<span class="string">'https://api.example.com'</span>)</span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="comment"># Anyからdict[str, str]に変換</span></span><br><span class="line">    res = cast(dict[str, str], r.json())</span><br></pre></td></tr></table></figure><h1 id="関数のオーバーロード"><a href="#関数のオーバーロード" class="headerlink" title="関数のオーバーロード"></a>関数のオーバーロード</h1><p>複数の関数で、入力の型、および返り値の型が異なる関数を作りたいとします。その時に使うのがオーバーロードです。次の例は、画面表示のときの文字数を計算する関数です。入力の型のバリエーションが増える場合は合併型で対応できますし、返り値も合併型で書くことで、雑に対応は可能ですが、入力値の型によって返り値が決定される（例えば、<code>bool</code>の時は<code>bool</code>しか返らない）ことを表現するためにはオーバーロードを使う必要があります。</p><ul><li><code>@overload</code>を付与したスタブ定義を並べて書く。これはmypyなどの型チェック用の情報提供のためだけのもので、Pythonで実際には実行されるときは上書きされて消えるだけなので、実装はellipse演算子(<code>...</code>)や<code>pass</code>でよい</li><li>最後に<code>@overload</code>がつかない実際の実装を書く。これは入出力はオーバーロードしたすべてを受け入れる必要があるので<code>Any</code>を使うか、型を付けないで実装（mypyオプションに<code>--strict</code>をつけるとこれはエラーになるが）のどちらかで実装</li></ul><p>次の関数は、JSON化にあたっての前処理を行う関数です。例えば、JavaScriptは<code>2**53</code>を超える数値は浮動小数点数になってしまうので、規格上は制約はないが実装的にintは入れられないものが多いので<code>float</code>変換するようにしています。</p><figure class="highlight py"><figcaption><span>関数のオーバーロード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JSONに出力するのに安全な形式に変換</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: str)</span> -&gt; str:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: bytes)</span> -&gt; str:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: bool)</span> -&gt; bool:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: int)</span> -&gt; Union[int, float]:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: float)</span> -&gt; float:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_safe</span><span class="params">(i: Any)</span> -&gt; Any:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(i, (str, bool, float)):</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">elif</span> isinstance(i, int):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">2</span> ** <span class="number">53</span>:</span><br><span class="line">            <span class="keyword">return</span> float(i)</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f'length only support str and int, but <span class="subst">&#123;type(i)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ここ数年、バージョンアップのたびに大きく改善されてきた型ヒント。今回の3.9でも大きな変化がありました。一部、<code>from __future__</code>を使わないと3.10未満では使えない機能もありました。3.10でもさらに進展予定です。</p><p>ここでは紹介していない、細かい機能もいくつかあります。より詳細な情報は<a href="https://docs.python.org/ja/3/library/typing.html" target="_blank" rel="noopener">typingパッケージ</a>や、関連PEPを見ると書かれています。</p><p>また、<a href="https://mypy.readthedocs.io/en/stable/" target="_blank" rel="noopener">mypyのサイト</a>にあるcheatsheetも参考になると思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pythonに型ヒントが入ってからしばらく経ちます。型ヒントの立ち位置も、なんでもできるアノテーションとして導入されましたが、型ヒント以外の用途はあまり育たず、型ヒントが中心になり、PEPや仕様もそれに合わせて変化したり、より書きやすいように機能が追加されてきました。&lt;/p
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Goでio.Readerをラップしてio.ReadSeekerを作る関数を作った &amp; プロパティベーステストで徹底的にテスト</title>
    <link href="https://future-architect.github.io/articles/20201211/"/>
    <id>https://future-architect.github.io/articles/20201211/</id>
    <published>2020-12-10T15:00:00.000Z</published>
    <updated>2020-12-28T02:07:31.467Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201211/readseeker.png" class="img-small-size"><p><a href="https://qiita.com/advent-calendar/2020/go5" target="_blank" rel="noopener">Goアドベントカレンダーその5</a>の穴埋めです。</p><p>Goではインタフェースをうまく利用することで、ライブラリの柔軟性が大幅にあがります。ライブラリでデータの読み込みを<code>os.File</code>ではなくて、<code>io.Reader</code>で行うようにすれば、メモリの情報を直接<code>bytes.Reader</code>や<code>strings.Reader</code>で渡したり、http.Request.BodyでHTTPクライアントからアップロードされた内容を直接読み込ませたり、とかですね。</p><p>で、<code>io.Reader</code>や<code>io.Writer</code>あたりはこの恩恵に授かりやすいのですが、標準ライブラリのioパッケージで定義されているものの、ごくごくたまーに要求されるが、そのインタフェースを実装している構造体が少なくてついつい慌てがちなのが、<code>io.Seeker</code>です。</p><p>会社のチャットで話題になって、回答はしたものの、裏で自動でバッファリングしてシーク可能にするようなラッパー作れそうだな、と思ってつい書き始めました。</p><ul><li><a href="https://gitlab.com/osaki-lab/iowrapper" target="_blank" rel="noopener">https://gitlab.com/osaki-lab/iowrapper</a></li></ul><p><img src="/images/20201211/Screen_Shot_2020-12-10_at_19.21.58.png" alt=""></p><p><code>io.Reader</code>としてラップ元の<code>io.Reader</code>から読み込まれた内容とか、<code>Seek()</code>呼び出しで内容の読み飛ばしが指示されたときに、内部にバッファリングして、自由にシークできるようにします。バッファサイズはデフォルトで1MBにしていますが、オプションで変更できるようにしました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readSeeker := iowrapper.NewSeeker(reader, iowrapper.MaxBufferSize(<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>)</span><br></pre></td></tr></table></figure><h1 id="徹底的にテストしてみる"><a href="#徹底的にテストしてみる" class="headerlink" title="徹底的にテストしてみる"></a>徹底的にテストしてみる</h1><p>この手の入出力が決まって、なおかつ内部の状態を持つものはとても歯ごたえがあってテストのしがいがあります。いろいろな組み合わせがあるので、テストのカバレッジをあげるのは頭を使います。いくつかチャレンジしてみました。</p><h2 id="ペアワイズ法"><a href="#ペアワイズ法" class="headerlink" title="ペアワイズ法"></a>ペアワイズ法</h2><p>何度か使ったことがある、PICTを使って見ます。次のQiitaの記事が詳しいです。</p><ul><li><a href="https://qiita.com/bremen/items/6eceddc534d87fc797cc" target="_blank" rel="noopener">ペアワイズ法によるテストケース抽出ツール「PICT」を使ってテストケースを85%削減する</a></li></ul><p>M1 macでしたが、git cloneしてmake一発でビルド完了。ビルド時間もごくわずかです。入力パラメータとして、カテゴリとその構成要素をカンマ区切りで書きます。これでpictコマンドに渡すとテストすべき組み合わせがリストで出力されます。</p><figure class="highlight plain"><figcaption><span>state.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seek-whence: start, current, end</span><br><span class="line">seek-offset: negative, zero, positive</span><br><span class="line">read-position: negative, zero, in-buffer, out-of-buffer, end, exceed-end</span><br><span class="line">read-size: zero, in-range, end, exceed-end</span><br></pre></td></tr></table></figure><p>このうち、条件で組み合わせが限定されるもの（確定されるもの、あるいは存在しない組み合わせ）を式で追加できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if [seek-whence] &#x3D; &quot;start&quot; AND [seek-offset] &#x3D; &quot;negative&quot;</span><br><span class="line">  THEN ( [read-position] &#x3D; &quot;negative&quot; );</span><br><span class="line">if [seek-whence] &#x3D; &quot;start&quot; AND [seek-offset] &#x3D; &quot;zero&quot;</span><br><span class="line">  THEN ( [read-position] &#x3D; &quot;start&quot; );</span><br><span class="line">if [seek-whence] &#x3D; &quot;end&quot; AND [seek-offset] &#x3D; &quot;zero&quot;</span><br><span class="line">  THEN ( [read-position] &#x3D; &quot;end&quot; );</span><br><span class="line">if [seek-whence] &#x3D; &quot;end&quot; AND [seek-offset] &#x3D; &quot;positive&quot;</span><br><span class="line">  THEN ( [read-position] &#x3D; &quot;exceed-end&quot; );</span><br></pre></td></tr></table></figure><p>結果はこのように出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ pict state.txt</span><br><span class="line">seek-whenceseek-offset<span class="built_in">read</span>-position<span class="built_in">read</span>-size</span><br><span class="line">currentnegativenegativeexceed-end</span><br><span class="line">startpositivenegativeend</span><br><span class="line">currentzeroexceed-end<span class="keyword">in</span>-range</span><br><span class="line">currentzero<span class="keyword">in</span>-bufferexceed-end</span><br><span class="line">endzeroendend</span><br><span class="line">currentpositiveendexceed-end</span><br><span class="line">currentzeronegativezero</span><br></pre></td></tr></table></figure><p>これを元にテストコードを書けばばっちりです！</p><p>・・・とはなかなかうまくはいきませんでした。</p><p>これを元にテーブルテストの項目を手動で書いてみたのですが、「あ、この条件を足そう」と、カテゴリが増えたり、組み合わせの制約を足したら、がらっと結果が変わってしまって、過去に書いたテストがどれに該当するのか、どれが足りないのかを目視で確認するのが結構大変です。以前にも何度かチャレンジしたものの、やはり同様の理由で途中で放棄しました。出発点のテストのボイラープレート作成用の元データとして使い、コードが成長してきて、後からif文が増えたのでカバレッジ向上のために足したいものがあれば手動で足す・・・みたいな運用に結果的になってしまいました。テーブル駆動テストのネタ作りのための使い捨てと割り切って、組み合わせ算出の電卓として使うのが良さそう。</p><p>テストコードを書きながら書いて設計していくようなサイクルを回して成長させていくテスト駆動開発に組み込むには、乱数の種を固定(<code>/r:N</code>オプション)しつつ、テストケースの中にこのカテゴリの値そのものをどこかに入れておいて、生成されたものと比較して足りないものを出力するみたいな静的解析との組み合わせが必要かな、と。あるいは、この入力をダイレクトにテスト実行時に読み込んでテストケースにしてしまう方法も考えられますが、それであれば、正直このツールを使うよりは次のプロパティベーステストの方が開発のサイクルには合わせやすいと思いました。</p><p>まあ、組み合わせとかカバレッジを考えるには良い題材だと思うので、新入社員研修とかで触らせてみるのは良いかもしれません。</p><h1 id="プロパティベーステスト（PBT"><a href="#プロパティベーステスト（PBT" class="headerlink" title="プロパティベーステスト（PBT)"></a>プロパティベーステスト（PBT)</h1><p>上記のPICTを（初期だけ）使って、テーブルテストを手動で書いて、一通りの実装を完成させるところまではできました。しかし、この手のバッファを扱うものは扱いを間違えると即座にバッファオーバーフローでセキュリティホールで・・・となる修羅の世界。せっかくなので、追加で、<a href="https://github.com/leanovate/gopter" target="_blank" rel="noopener">gopter</a>を使ってプロパティベーステストしたり、ファジングのテストもしました。プロパティベーステストについては次のサイトが日本語でよくわかる説明になっています。</p><ul><li><a href="https://docs.google.com/presentation/d/e/2PACX-1vR6RLKjIUv6ACJRK8Zqc63J0W2ycf7S5j2NoQTkIuwpxyI9DDELFTMH_fPIVbUiYrjEiF787N9t4xc2/pub?start=false&loop=false&delayms=3000" target="_blank" rel="noopener">@ymotongpoo氏によるGoCon仙台の解説</a></li><li><a href="https://qiita.com/rerorero/items/568e227da3939dbf9532" target="_blank" rel="noopener">gopterを使ってGoでProperty Based Testingする</a></li></ul><p>細かい定義とかは追っかけていないですが、形式仕様記述と、ユニットテストの1手法であるテーブル駆動テストの中間ぐらいの感触です。テーブル駆動テストだと、入力値を人力でリスト化し、テストコードに投入して期待する結果が出るかをテストします。形式仕様記述はAlloyをちょっと触っただけなので違う側面があるかもしれませんが、論理的に入出力や内部の状態の関係性を記述し、それを解釈して仕様が矛盾しないかを検証します。</p><h2 id="PICTとの違い"><a href="#PICTとの違い" class="headerlink" title="PICTとの違い"></a>PICTとの違い</h2><p>PICTは、テストケースをなるべく削減するために、問題の発生原因となる因子の組み合わせ数を考慮してなるべく少ないテストケースを生成しますし、入力はenumの組み合わせです。Property Base Testも、因子を与えると、入力値の組み合えわせを生成する点は一緒ですが、こちらは「文字列が入力」と型の指定をすると、空文字列から長い文字列までいろんなバリエーションの文字列を生成してテストの入力とします。自動テスト前提なのでデフォルトで100件とかそれなりの分量のテストを生成します。実際の入力の組み合わせは無限大ありますが、PICT同様、無限大の選択肢の中から、100パターン効率よくいろいろなバリエーションのインプットを生成します。ただたくさん組み合わせを作るだけではなく、エラーが発生したときに、失敗した組み合わせを分析（シュリンク）し、「この要素が原因である」と少し分析したうえでエラーを返してくれます。問題が発生したかどうかだけではなく、問題の解析にも役立ちます。</p><p>PBTはPICTのテストケース生成と異なり、「Aならば結果がBにはならない」みたいな論理的な記述はできません。評価は単にtrue/falseで返すだけなので単にありえない組み合わせならさっさとtrueを返して終了、という方法もできますが、いろいろ考慮されて絞られた100通りのパターンのテストケースを、そこからさらに何割か削ってしまうと、本来テストすべきだったケースも検証がスキップされてしまう可能性があります。そういう無駄玉は打たない方が良いでしょう。</p><h2 id="書いてみたテスト"><a href="#書いてみたテスト" class="headerlink" title="書いてみたテスト"></a>書いてみたテスト</h2><p>今回書いたテストはこんな感じです。プロパティを宣言し、それにテストを書いていきます。プロパティには入力値のジェネレータを渡します。ジェネレータでは文字数の上限とか数値の値の範囲とか細かく制御はできますが、今回みたいなケースの場合、「元のio.Readerのコンテンツよりも少ない数値を入力パラメータに利用したい」みたいなニーズが出てきます。しかし、ジェネレータが生成する値を元に別の値を生成する指定はできません。</p><p>今回は、「読み飛ばす文字列」「実際に読む文字列」「読み残す文字列」と3つの文字列を生成し、それを合成してio.Readerの入力を生成したり、Seek()のオフセット値や読み込む量といった数値を算出しています。Property Base Testの場合はこのようなジェネレータを使ったパズルを解いて、効率よく入力を作り出す方法を考えるところが楽しいところですし、結果の質に影響がある部分です。</p><p>プロパティベーステストがユニットテストと異なるのが、入力時が自動生成なので結果の比較をどうするか考える点です。今回の入力を3つに分けて生成しており、正解のデータも自動生成してから組み込んでいるので、厳密に正しいかどうかテストできます。他に先行実装があってその移植であればそれをテストにもできるでしょう。こちらも考慮が必要です。まあホワイトボックステストですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSuccessfullyRead</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">properties := gopter.NewProperties(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">skipBytesGen := gen.AnyString()</span><br><span class="line">readBytesGen := gen.AnyString()</span><br><span class="line">remainedBytesGen := gen.AnyString()</span><br><span class="line"></span><br><span class="line">properties.Property(<span class="string">"Read successfully with SeekStart"</span>, prop.ForAll(<span class="function"><span class="keyword">func</span><span class="params">(skipBytesSrc, readBytesSrc, remainedBytesSrc <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">skipBytes := []<span class="keyword">byte</span>(skipBytesSrc)</span><br><span class="line">readBytes := []<span class="keyword">byte</span>(readBytesSrc)</span><br><span class="line">remainedBytes := []<span class="keyword">byte</span>(remainedBytesSrc)</span><br><span class="line"><span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">buffer.Write(skipBytes)</span><br><span class="line">buffer.Write(readBytes)</span><br><span class="line">buffer.Write(remainedBytes)</span><br><span class="line"></span><br><span class="line">readSeeker := NewSeeker(&amp;buffer)</span><br><span class="line">readSeeker.Seek(<span class="keyword">int64</span>(<span class="built_in">len</span>(skipBytes)), io.SeekStart)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> output bytes.Buffer</span><br><span class="line">n, err := io.CopyN(&amp;output, readSeeker, <span class="keyword">int64</span>(<span class="built_in">len</span>(readBytes)))</span><br><span class="line"><span class="keyword">if</span> n != <span class="keyword">int64</span>(<span class="built_in">len</span>(readBytes)) &#123;</span><br><span class="line">t.Logf(<span class="string">"Read successfully with SeekStart fail: n(%d) != len(readBytes)()%d\n"</span>, n, <span class="built_in">len</span>(readBytes))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> output.String() != readBytesSrc &#123;</span><br><span class="line">t.Logf(<span class="string">"Read successfully with SeekStart fail: %s != %s\n"</span>, output.String(), readBytesSrc)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Logf(<span class="string">"Read successfully with SeekStart fail: err(%v) != nil\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;, skipBytesGen, readBytesGen, remainedBytesGen))</span><br><span class="line">properties.TestingRun(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ファジング"><a href="#ファジング" class="headerlink" title="ファジング"></a>ファジング</h2><p>PBTのライブラリは、ファジングにも便利です。ありとあらゆる入力値の可能性を与えて、パニックが起きないかどうかの検証です。Goでファジングだと、go-fuzzが有名ですが、gopterを使い回す方が、入力値の型に合わせたデータ生成ができるので使いやすいです。</p><p>今回は、オフセット値や読み込むバイト数をソース文字列とは別に生成器を作っています。入力文字列よりもはるかに大きなオフセットを与えたり、読み込みを行おうとしたりします。このテストでは結果の検証はしなくて、完走したらreturn trueとしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFuzzing</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">properties := gopter.NewProperties(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">srcGen := gen.AnyString()</span><br><span class="line">whenceGen := gen.IntRange(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">offsetGen := gen.Int64()</span><br><span class="line">readBytesGen := gen.Int64()</span><br><span class="line"></span><br><span class="line">properties.Property(<span class="string">"Don't panic"</span>, prop.ForAll(<span class="function"><span class="keyword">func</span><span class="params">(srcStr <span class="keyword">string</span>, whence <span class="keyword">int</span>, offset, readBytes <span class="keyword">int64</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">src := strings.NewReader(srcStr)</span><br><span class="line">readSeeker := NewSeeker(src)</span><br><span class="line">readSeeker.Seek(offset, whence)</span><br><span class="line">io.CopyN(ioutil.Discard, readSeeker, readBytes)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;, srcGen, whenceGen, offsetGen, readBytesGen))</span><br><span class="line"></span><br><span class="line">properties.TestingRun(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Goのインタフェースのラッパーを作ってみたのと同時に、いつもよりも少し気合いを入れてテストを書いてみました。本体のコード量の数倍のテストになりました。</p><p>PICTはお手軽に始められる言語非依存のツールです。テスト駆動開発のサイクルの出発時に状態の組み合わせを考えてみるお手伝いとして使う方が良いな、というのが実感です。</p><p>一方プロパティベーステストはプログラミング言語に合わせて作られているライブラリを利用します。徹底的にテストされてしまうので、テスト駆動開発だといつまでも青くならない、真っ赤になり続けることになるため、テスト駆動開発に組み込むのは少し難いですね。一通り実装が完了したら、セルフQAとしてPBTを使ったテストを書いてみる使い方が良いかな、と思いました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201211/readseeker.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2020/go5&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="PICT" scheme="https://future-architect.github.io/tags/PICT/"/>
    
      <category term="PBT" scheme="https://future-architect.github.io/tags/PBT/"/>
    
  </entry>
  
  <entry>
    <title>バイオ情報学研究発表会で発表してきました</title>
    <link href="https://future-architect.github.io/articles/20201208/"/>
    <id>https://future-architect.github.io/articles/20201208/</id>
    <published>2020-12-07T15:00:00.000Z</published>
    <updated>2020-12-28T02:07:33.362Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201208/top.png"><p>SAIGの玉木です。会社では自然言語処理案件や、ワクチン開発案件に取り組んでいます。</p><p>先日、会社で取り組んだワクチン開発に必要な基礎的な研究について、<a href="https://www.ipsj.or.jp/kenkyukai/event/bio64.html" target="_blank" rel="noopener">第64回バイオ情報学研究発表会</a>で発表してきました。バイオ情報学研究発表会は情報科学と生命科学の融合領域を研究・報告する会です。</p><h1 id="大規模タンパク質データベースに基づくBERTを用いたペプチド結合予測"><a href="#大規模タンパク質データベースに基づくBERTを用いたペプチド結合予測" class="headerlink" title="大規模タンパク質データベースに基づくBERTを用いたペプチド結合予測"></a>大規模タンパク質データベースに基づくBERTを用いたペプチド結合予測</h1><p>発表資料はこちらです。</p><script async class="speakerdeck-embed" data-id="3e23f9e6d5744ea8a12bc65dad9528fb" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script><p>自然言語処理でよく用いられているBERT<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>を自然言語でなくアミノ酸配列に応用し、ワクチン開発において重要な</p><ul><li>B細胞エピトープ予測</li><li>MHCⅡに結合するペプチド予測</li></ul><p>の2つのタスクで有効性を検証した論文になります。</p><p>特に大規模なタンパク質データでの事前学習が有効であることがわかりました。すでに二次構造予測や接触予測などでの他のタスクでBERTが有効であることは既存研究により示されています。</p><p>こちらの<a href="https://bair.berkeley.edu/blog/2019/11/04/proteins/" target="_blank" rel="noopener">ブログ</a>が参考になります。わかりやすくまとまっているので、興味のある方はぜひ読んでみてください。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>私はこの案件に取り組み、言語モデリングによる事前学習でタンパク質の構造を学習できることを知ったときはとても驚きました。</p><p>先日DeepMindのAlphaFold2<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>が話題になりましたが、AlphaFold2も大規模なタンパク質データベースで事前学習をしているようです。</p><p>ドメイン的にも機械学習の進歩からも非常にホットな分野なので、今後の発展が非常に楽しみです。自分もこの分野に貢献できるよう頑張っていきたいと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://arxiv.org/abs/1810.04805</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">https://deepmind.com/blog/article/alphafold-a-solution-to-a-50-year-old-grand-challenge-in-biology</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201208/top.png&quot;&gt;

&lt;p&gt;SAIGの玉木です。会社では自然言語処理案件や、ワクチン開発案件に取り組んでいます。&lt;/p&gt;
&lt;p&gt;先日、会社で取り組んだワクチン開発に必要な基礎的な研究について、&lt;a href=&quot;https://
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="NLP" scheme="https://future-architect.github.io/tags/NLP/"/>
    
      <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
      <category term="ワクチン" scheme="https://future-architect.github.io/tags/%E3%83%AF%E3%82%AF%E3%83%81%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>AWSマネージドAirflow(MWAA)についてのFAQ</title>
    <link href="https://future-architect.github.io/articles/20201206/"/>
    <id>https://future-architect.github.io/articles/20201206/</id>
    <published>2020-12-05T15:00:00.000Z</published>
    <updated>2020-12-05T13:14:51.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><a href="https://qiita.com/advent-calendar/2020/future" target="_blank" rel="noopener">フューチャー Advent Calendar 6日目</a> です。TIG DXチーム所属の多賀です。</p><p>AWS マネージド Airflow (MWAA) が 2020/11/24 にリリースされました。 </p><ul><li><a href="https://aws.amazon.com/jp/blogs/aws/introducing-amazon-managed-workflows-for-apache-airflow-mwaa/" target="_blank" rel="noopener">Introducing Amazon Managed Workflows for Apache Airflow (MWAA)</a></li></ul><p>サービスを利用するにあたって知りたかったことを調査し、FAQ ベースで整理しましたので公開します。</p><p><img src="/images/20201206/wordmark_1.png" alt=""><br><a href="https://cwiki.apache.org/confluence/display/AIRFLOW/Airflow+logos" target="_blank" rel="noopener">Airflow logos</a> からの画像</p><h2 id="MWAA-Managed-Workflow-for-Apache-Airflow-とは"><a href="#MWAA-Managed-Workflow-for-Apache-Airflow-とは" class="headerlink" title="MWAA (Managed Workflow for Apache Airflow) とは?"></a>MWAA (Managed Workflow for Apache Airflow) とは?</h2><p><a href="https://airflow.apache.org/" target="_blank" rel="noopener">Airflow</a> のマネージドサービスで、インスタンスやDB管理不要で、Airflowを利用することができます。Airflow 完全互換を謳っており、フォークしたソースではなく、Airflow 本体が利用されています。Auto Scaling に対応しており、 worker 数を設定した最大数まで自動でスケールアップしてくれます。また、ログインのための、ユーザー権限制御に IAM を利用しており、詳細な権限制御が可能です。</p><p><a href="https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html" target="_blank" rel="noopener">MWAA 公式ドキュメント</a></p><h2 id="MWAA-FAQ"><a href="#MWAA-FAQ" class="headerlink" title="MWAA FAQ"></a>MWAA FAQ</h2><ul><li><a href="#airflow-のバージョンは">Airflow のバージョンは?</a></li><li><a href="#executorはどのタイプ">Executorはどのタイプ?</a></li><li><a href="#dagの定義と配置方法は">DAGの定義と配置方法は?</a></li><li><a href="#python-のライブラリの取得方法は">Python のライブラリの取得方法は？</a></li><li><a href="#階層化した-dag-の読み込みは可能か">階層化した dag の読み込みは可能か?</a></li><li><a href="#airflow-ui-へのアクセス方法は">Airflow UI へのアクセス方法は?</a></li><li><a href="#metadata-dbの移行は可能">metadata DBの移行は可能?</a></li><li><a href="#ネットワーク構成は">ネットワーク構成は?</a></li><li><a href="#airflow-cliの実行方法は">Airflow CLIの実行方法は?</a></li><li><a href="#ワンタイムログイントークンの発行方法は">ワンタイムログイントークンの発行方法は?</a></li></ul><h3 id="Airflow-のバージョンは"><a href="#Airflow-のバージョンは" class="headerlink" title="Airflow のバージョンは?"></a>Airflow のバージョンは?</h3><p>現状(2020/12/03)は <code>1.10.12</code> のみが指定できます。<br>パッチバージョンアップグレードは7日以内、マイナーバージョンアップグレードは30日以内に自動で実行されます。<br>アップグレードに失敗した場合は、自動復旧されます。</p><h3 id="Executorはどのタイプ"><a href="#Executorはどのタイプ" class="headerlink" title="Executorはどのタイプ?"></a>Executorはどのタイプ?</h3><p><a href="https://airflow.apache.org/docs/stable/executor/celery.html" target="_blank" rel="noopener">Celery Executor</a> を利用している旨が、<a href="https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html" target="_blank" rel="noopener">公式ドキュメント</a>に記載されています。</p><p>Celery Executor の構成は以下の図の通りです。<br><img src="/images/20201206/graphviz-91fd3ca4f3dc01a69b3f84fbcd6b5c7975945ba4.png" alt=""><br><a href="https://airflow.apache.org/docs/stable/_images/graphviz-91fd3ca4f3dc01a69b3f84fbcd6b5c7975945ba4.png" target="_blank" rel="noopener">Architecture-Celery Executor</a> からの画像</p><p>プロセスの種類は全部で3つで、webserver, scheduler と worker になります。<br>履歴やメタデータ管理のため、DB (metadata DB) があります。scheduler と worker の間に キューが存在しているはずですが、公式には記載されていません。(Elatsic Cache (Redis) の可能性が高いかなと推測してます。)</p><p>各プロセスは Fargate を利用しており、コンテナ起動です。scheduler と worker は VPC 内での実行が保証されています。metadata DB と webserver は サービスアカウントレベルで共有して利用する模様です。</p><h3 id="DAGの定義と配置方法は"><a href="#DAGの定義と配置方法は" class="headerlink" title="DAGの定義と配置方法は?"></a>DAGの定義と配置方法は?</h3><p>DAGファイルは S3 に配置することで、自動で読み込みを実施してくれます。</p><p>配置先は、MWAA 作成時に指定します(更新も可能です)。plugin も同様に S3 に配置します。 配置する際は、plugin のみ zip に固めます。</p><p>※ S3 バケット名は、 <code>airflow-</code> プレフィックスで始まる必要があります。<br><img src="/images/20201206/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-12-03_21.32.58%E3%81%AE%E3%82%B3%E3%83%92%E3%82%9A%E3%83%BC.png" alt=""></p><h3 id="Python-のライブラリの取得方法は？"><a href="#Python-のライブラリの取得方法は？" class="headerlink" title="Python のライブラリの取得方法は？"></a>Python のライブラリの取得方法は？</h3><p><code>requirements.txt</code> を S3 に配置することで、ライブラリを読み込んでくれます。<br>配置先は MWAA に設定します。<br><img src="/images/20201206/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-12-03_21.32.58%E3%81%AE%E3%82%B3%E3%83%92%E3%82%9A%E3%83%BC2.png" alt=""></p><h3 id="階層化した-dag-の読み込みは可能か"><a href="#階層化した-dag-の読み込みは可能か" class="headerlink" title="階層化した dag の読み込みは可能か?"></a>階層化した dag の読み込みは可能か?</h3><p>Airflow 本来の実装方法と変わらずに実現できます。<br>以下コードを ./dags 直下に指定します。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> DagBag</span><br><span class="line"><span class="comment"># ディレクトリを指定</span></span><br><span class="line">dags_dirs = [<span class="string">'~/dags/sample'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> dags_dirs:</span><br><span class="line">    dag_bag = DagBag(os.path.expanduser(dir))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dag_bag:</span><br><span class="line">        <span class="keyword">for</span> dag_id, dag <span class="keyword">in</span> dag_bag.dags.items():</span><br><span class="line">            globals()[dag_id] = dag</span><br></pre></td></tr></table></figure><p>S3 への配置方法は、以下です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── dags</span><br><span class="line">    ├── add_dag_bags.py</span><br><span class="line">    └── sample</span><br><span class="line">        └── test_dag.py</span><br></pre></td></tr></table></figure><h3 id="Airflow-UI-へのアクセス方法は"><a href="#Airflow-UI-へのアクセス方法は" class="headerlink" title="Airflow UI へのアクセス方法は?"></a>Airflow UI へのアクセス方法は?</h3><p>AWS コンソール上に UI へのリンクが表示されます。<br><img src="/images/20201206/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-12-03_22.22.23.png" alt=""></p><p>上記リンクを押下すると、認証を自動で実施後に以下の画面が表示されます。<br><img src="/images/20201206/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-12-03_22.23.47.png" alt=""></p><p>ちなみに IAM での認証が必須のため、直接URLにアクセスするとログインを求められます。<br><img src="/images/20201206/image.png" alt=""></p><h3 id="metadata-DBの移行は可能"><a href="#metadata-DBの移行は可能" class="headerlink" title="metadata DBの移行は可能?"></a>metadata DBの移行は可能?</h3><p>現在(2020/12/03) サポートされていません。過去の実行履歴は metadata DB に保持されているため、現状MWAA へ移行する際は、履歴なしでの移行になります。</p><h3 id="ネットワーク構成は"><a href="#ネットワーク構成は" class="headerlink" title="ネットワーク構成は?"></a>ネットワーク構成は?</h3><p>VPC の設定が必須です。</p><p>構成としては、以下が必要との記載があります。</p><p><a href="https://docs.aws.amazon.com/mwaa/latest/userguide/vpc-create.html" target="_blank" rel="noopener">詳細はこちら</a></p><ul><li>public subnet: 2リージョン</li><li>private subnet: 2リージョン</li><li>inbound/outbound all security group</li><li>Elastic IP: 2つ</li><li>Internet Gateway</li><li>Nat Gateway</li></ul><p>※ 適当に subnet 指定した場合、起動しませんでした..</p><h3 id="Airflow-CLIの実行方法は"><a href="#Airflow-CLIの実行方法は" class="headerlink" title="Airflow CLIの実行方法は?"></a>Airflow CLIの実行方法は?</h3><p>CLI は http ごしに実行することができます。</p><p>① aws cli でトークンを取得</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws mwaa create-cli-token --name <span class="variable">$&#123;airflow name&#125;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CliToken"</span>: <span class="string">"<span class="variable">$&#123;トークン&#125;</span>"</span>,</span><br><span class="line">    <span class="string">"WebServerHostname"</span>: <span class="string">"<span class="variable">$&#123;ホスト名&#125;</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② airflow cli を実行<br>リクエスト Body にコマンドを指定します。標準出力と、標準エラー出力が base64 エンコードされて返ってきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> WEB_SERVER_HOSTNAME=<span class="string">"<span class="variable">$&#123;ホスト名&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> CLI_TOKEN=<span class="string">"<span class="variable">$&#123;トークン&#125;</span>"</span></span><br><span class="line">curl --request POST <span class="string">"https://<span class="variable">$WEB_SERVER_HOSTNAME</span>/aws_mwaa/cli"</span> \</span><br><span class="line">    --header <span class="string">"Authorization: Bearer <span class="variable">$CLI_TOKEN</span>"</span> \</span><br><span class="line">    --header <span class="string">"Content-Type: text/plain"</span> \</span><br><span class="line">    --data-raw <span class="string">"version"</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">"Q2xvdWR3YXRjaCBsb2dnaW5nIGlzIGRpc2FibGVkIGZvciBDbG91ZHdhdGNoUHJvY2Vzc29ySGFuZGxlcgoxLjEwLjEyCg=="</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>デコードすると、コマンド実行結果を表示できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ <span class="built_in">echo</span> <span class="string">'Q2xvdWR3YXRjaCBsb2dnaW5nIGlzIGRpc2FibGVkIGZvciBDbG91ZHdhdGNoUHJvY2Vzc29ySGFuZGxlcgoxLjEwLjEyCg=='</span> | base64 -D</span><br><span class="line">Cloudwatch logging is disabled <span class="keyword">for</span> CloudwatchProcessorHandler</span><br><span class="line">1.10.12</span><br></pre></td></tr></table></figure><h3 id="ワンタイムログイントークンの発行方法は"><a href="#ワンタイムログイントークンの発行方法は" class="headerlink" title="ワンタイムログイントークンの発行方法は?"></a>ワンタイムログイントークンの発行方法は?</h3><p>Airflow UI にAWS コンソールからでなく、トークンのみでログインさせることもできます。<br>まず、ログイン用のトークンを取得します。トークンは60秒間のみ、有効です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ aws mwaa create-web-login-token --name MyAirflowEnvironment --profile midori</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"WebServerHostname"</span>: <span class="string">"<span class="variable">$&#123;ホスト名&#125;</span>"</span>,</span><br><span class="line">    <span class="string">"WebToken"</span>: <span class="string">"<span class="variable">$&#123;トークン&#125;</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取得したトークンを <code>#</code> 以降に指定して、URLアクセスすることでログインできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;$&#123;WebServerHostname&#125;&#x2F;aws_mwaa&#x2F;aws-console-sso?login&#x3D;true#$&#123;WebTokenを指定&#125;</span><br></pre></td></tr></table></figure><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>MWAA を利用するにあたって、気になる点を調べてみました。</p><p>EC2 上への構築では、EC2複数台、RDS、Redis と管理するコンポーネントが多かったので、マネージドで気軽に利用できるようになり、より今後広がりを見せるかなと思います。</p><p>現状、機能的には十分足りており、実利用は問題なさそうです。ただ、metadata DBの移行はできないので機能としてサポートされると嬉しいですね。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>Airflow 利用にあたって知っておいたほうが良いんじゃないかなと思う情報をまとめました。</p><ul><li><a href="https://future-architect.github.io/articles/20200131/">AirflowのTips 11選</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://aws.amazon.com/jp/blogs/aws/introducing-amazon-managed-workflows-for-apache-airflow-mwaa/" target="_blank" rel="noopener">Introducing Amazon Managed Workflows for Apache Airflow (MWAA)</a></li><li><a href="https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html" target="_blank" rel="noopener">MWAA公式ドキュメント</a></li><li><a href="https://dev.classmethod.jp/articles/amazon-managed-workflows-for-apache-airflow-mwaa-ga/" target="_blank" rel="noopener">AWSのマネージドAirflow、Amazon Managed Workflow for Apache Airflow（MWAA）が登場！</a></li><li><a href="https://dev.classmethod.jp/articles/reinvent2020-emb007-data-pipelines-with-amazon-managed-workflows-for-apache-airflow/" target="_blank" rel="noopener">Amazon Managed Workflows for Apache Airflow（MWAA）によるデータパイプラインの構築 #reinvent #emb007</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2020/future&quot; target=&quot;_blank
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Airflow" scheme="https://future-architect.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>GoがApple Siliconにネイティブ対応したのでベンチマークをとってみました</title>
    <link href="https://future-architect.github.io/articles/20201203/"/>
    <id>https://future-architect.github.io/articles/20201203/</id>
    <published>2020-12-02T15:00:00.000Z</published>
    <updated>2020-12-03T05:07:08.763Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://qiita.com/advent-calendar/2020/go5" target="_blank" rel="noopener">Goアドベントカレンダーその5</a>です。</p><p>ARMなMacが出るとWWDCで発表されてから首を長くしてまっていて、発表と同時にMacBook Proを買って、<a href="https://qiita.com/shibukawa/items/797b7cbb7e530842e6f7" target="_blank" rel="noopener">アプリケーションのARMネイティブ対応</a>がされているかいろいろインストールして試してみたりしています。まだ発売されて2週間足らずですが（といっても、みんな開発キットをつかって以前から準備したようですが）、動作しているアプリケーションは多いです。発売後にも、Erlang、Node.jsあたりはmasterブランチにパッチが入りました。Goも、<a href="https://github.com/golang/go/issues/38485" target="_blank" rel="noopener">昨日パッチがマージ</a>されました。</p><p>業務利用が多い言語のうちの一つということで、手元のPCで軽くベンチマークをとってみました。使った機種は3つです。</p><ul><li>2020モデルのM1のMacBook Pro</li><li>2020モデルの10th Gen Core i5のMacBook Air</li><li>Ryzen 9 4900HSのASUSのZephyrus G14</li></ul><p>前2つがTDP 10Wクラスの中、RyzenだけTDP 35Wでだいぶ上のクラスではあります。ベンチマークは<a href="https://github.com/SimonWaldherr/golang-benchmarks" target="_blank" rel="noopener">github.com/SimonWaldherr/golang-benchmarks</a>を利用しています。Goはmasterの<a href="https://github.com/golang/go/commit/0433845ad18a355413033bb3495ba3195f4c69ec" target="_blank" rel="noopener">0433845</a>をとってきて、Intel Mac上から、bootstrap.bashでarm64/darwin、amd64/darwin、amd64/windowsの3セット作って使いました。コア数はそれぞれ8(低速4+高速4)、8(物理4、論理8)、16(物理8、論理16)と構成に違いはあるものの、特にマルチスレッド性能を測るテストはなく、-cpuオプションを設定しても結果は違いがなかったので、デフォルト値で実行しています。</p><p>ベンチマークの数値の結果は<a href="https://docs.google.com/spreadsheets/d/1hzwyeWSNknyV3AhAnOJOifoR1f8UxQP_N9jMJv26Deg/edit?usp=sharing" target="_blank" rel="noopener">こちら</a>です。Goのベンチマークはタスクごとの経過時間で出てくるので、MacBook Airの結果を100として相対値をとってグラフにしたのが以下の図です（項目が多くてラベルが半分非表示になっていますが）。グラフは短いほど高速です。</p><p><img src="/images/20201203/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-12-03_13.06.21.png" alt=""></p><p>たまにハッシュ計算とかでかなり遅いものがありますが、おそらくCPUの命令を駆使して高速化、みたいなのがまだきちんと行われていない領域だと思うので、そこはコミットチャンスかと思います。あと、Boolのパースがなぜか遅い。といっても1.5nsと0.3nsとかなので割合でみるとすごい遅く見えますが、実際には影響は少ないかと。</p><p>大雑把にみると、MacBook AirのCore i5に比べて概ね1.5〜2倍ぐらい高速ですね。Ryzenに対してもかなり高速。この2機種とも、今年の頭のモデルで比較的新しくてそこまで遅くないのですけどね。ただ、Ryzen機が暖かいので（GeForceのGPUのおかげかもしれませんが）、寒い冬にはとても優しいので、個人的にはRyzen優勝にしたいと思います。</p><p>詳細な結果は以下の通り。単位はnsで、数字が小さいほど高速です。</p><table><thead><tr><th></th><th>M1</th><th>M1(rosetta)</th><th>Core i5-1030G7</th><th>Ryzen 9 4900HS</th></tr></thead><tbody><tr><td>BenchmarkBase64decode-8</td><td>75.52</td><td>124</td><td>113.6</td><td>112.8</td></tr><tr><td>BenchmarkBase64regex-8</td><td>13271</td><td>18101</td><td>22755</td><td>24957</td></tr><tr><td>BenchmarkNumberRegEx-8</td><td>8616</td><td>11622</td><td>15494</td><td>17492</td></tr><tr><td>BenchmarkFulltextRegEx-8</td><td>7098</td><td>9619</td><td>12552</td><td>13851</td></tr><tr><td>BenchmarkNumberParse-8</td><td>54.91</td><td>63.28</td><td>69.32</td><td>70.62</td></tr><tr><td>BenchmarkFulltextParse-8</td><td>783.4</td><td>949.1</td><td>1020</td><td>955.1</td></tr><tr><td>BenchmarkConcatString-8</td><td>23788</td><td>40679</td><td>48756</td><td>70460</td></tr><tr><td>BenchmarkConcatBuffer-8</td><td>4.792</td><td>7.568</td><td>8.636</td><td>6.425</td></tr><tr><td>BenchmarkConcatBuilder-8</td><td>2.662</td><td>3.659</td><td>4.594</td><td>2.595</td></tr><tr><td>BenchmarkContains-8</td><td>5.465</td><td>9.55</td><td>10.23</td><td>7.279</td></tr><tr><td>BenchmarkContainsNot-8</td><td>6.993</td><td>10.45</td><td>11.29</td><td>7.489</td></tr><tr><td>BenchmarkContainsBytes-8</td><td>6.198</td><td>10.21</td><td>11.55</td><td>8.718</td></tr><tr><td>BenchmarkContainsBytesNot-8</td><td>7.74</td><td>11.2</td><td>13.31</td><td>8.996</td></tr><tr><td>BenchmarkCompileMatch-8</td><td>80.4</td><td>121.3</td><td>111.1</td><td>111.1</td></tr><tr><td>BenchmarkCompileMatchNot-8</td><td>35.95</td><td>65.89</td><td>55.98</td><td>55.14</td></tr><tr><td>BenchmarkMatch-8</td><td>870.8</td><td>1261</td><td>1969</td><td>1745</td></tr><tr><td>BenchmarkMatchNot-8</td><td>837.3</td><td>1237</td><td>1875</td><td>1697</td></tr><tr><td>BenchmarkForMap-8</td><td>20.56</td><td>22.97</td><td>29.94</td><td>23.39</td></tr><tr><td>BenchmarkRangeMap-8</td><td>55.31</td><td>58.52</td><td>88.86</td><td>69.77</td></tr><tr><td>BenchmarkRangeSlice-8</td><td>3.8</td><td>3.865</td><td>3.758</td><td>2.619</td></tr><tr><td>BenchmarkRangeSliceKey-8</td><td>4.528</td><td>4.545</td><td>5.23</td><td>3.617</td></tr><tr><td>BenchmarkAdler32-8</td><td>764.9</td><td>830.3</td><td>1007</td><td>714.6</td></tr><tr><td>BenchmarkBlake2b256-8</td><td>2612</td><td>4930</td><td>2561</td><td>2105</td></tr><tr><td>BenchmarkBlake2b512-8</td><td>2626</td><td>4958</td><td>2580</td><td>2167</td></tr><tr><td>BenchmarkBlake3256-8</td><td>6339</td><td>エラー</td><td>3460</td><td>2782</td></tr><tr><td>BenchmarkMMH3-8</td><td>413.4</td><td>468.5</td><td>431</td><td>345</td></tr><tr><td>BenchmarkCRC32-8</td><td>1098</td><td>139.2</td><td>140.5</td><td>163.7</td></tr><tr><td>BenchmarkFnv128-8</td><td>4924</td><td>7617</td><td>3448</td><td>6084</td></tr><tr><td>BenchmarkMD5-8</td><td>3566</td><td>4345</td><td>3283</td><td>2635</td></tr><tr><td>BenchmarkSHA1-8</td><td>5789</td><td>4247</td><td>2924</td><td>2041</td></tr><tr><td>BenchmarkSHA256-8</td><td>10865</td><td>7832</td><td>6361</td><td>4346</td></tr><tr><td>BenchmarkSHA512-8</td><td>7801</td><td>3987</td><td>4685</td><td>2939</td></tr><tr><td>BenchmarkSHA3256-8</td><td>4575</td><td>6080</td><td>8312</td><td>9898</td></tr><tr><td>BenchmarkSHA3512-8</td><td>7929</td><td>10540</td><td>14666</td><td>17115</td></tr><tr><td>BenchmarkWhirlpool-8</td><td>35819</td><td>44605</td><td>59697</td><td>41050</td></tr><tr><td>BenchmarkMapStringKeys-8</td><td>82.45</td><td>104.4</td><td>107.5</td><td>132.5</td></tr><tr><td>BenchmarkMapIntKeys-8</td><td>49.72</td><td>73.35</td><td>74.43</td><td>87.11</td></tr><tr><td>BenchmarkJsonMarshal-8</td><td>1422</td><td>1981</td><td>3076</td><td>1907</td></tr><tr><td>BenchmarkJsonUnmarshal-8</td><td>5496</td><td>7963</td><td>10694</td><td>8788</td></tr><tr><td>BenchmarkMathInt8-8</td><td>0.3465</td><td>0.3442</td><td>0.342</td><td>0.2602</td></tr><tr><td>BenchmarkMathInt32-8</td><td>0.3505</td><td>0.3478</td><td>0.3656</td><td>0.29</td></tr><tr><td>BenchmarkMathInt64-8</td><td>0.3558</td><td>0.3552</td><td>0.3588</td><td>0.26</td></tr><tr><td>BenchmarkMathAtomicInt32-8</td><td>7.132</td><td>7.864</td><td>6.562</td><td>4.258</td></tr><tr><td>BenchmarkMathAtomicInt64-8</td><td>7.07</td><td>7.758</td><td>7.079</td><td>4.231</td></tr><tr><td>BenchmarkMathMutexInt-8</td><td>12.45</td><td>15.07</td><td>18.69</td><td>8.776</td></tr><tr><td>BenchmarkMathFloat32-8</td><td>0.3594</td><td>0.3636</td><td>0.377</td><td>0.3438</td></tr><tr><td>BenchmarkMathFloat64-8</td><td>0.3551</td><td>0.348</td><td>0.3946</td><td>0.2866</td></tr><tr><td>BenchmarkParseBool-8</td><td>1.598</td><td>0.3529</td><td>0.3532</td><td>0.3208</td></tr><tr><td>BenchmarkParseInt-8</td><td>12.31</td><td>13.28</td><td>20.09</td><td>14.93</td></tr><tr><td>BenchmarkParseFloat-8</td><td>72.39</td><td>80.48</td><td>137.3</td><td>101.6</td></tr><tr><td>BenchmarkMathRand-8</td><td>12.82</td><td>15.15</td><td>24.15</td><td>18.27</td></tr><tr><td>BenchmarkCryptoRand-8</td><td>109.9</td><td>147.7</td><td>202</td><td>285.2</td></tr><tr><td>BenchmarkCryptoRandString-8</td><td>119.1</td><td>146.1</td><td>202.5</td><td>175.8</td></tr><tr><td>BenchmarkMatchString-8</td><td>5371</td><td>7498</td><td>9923</td><td>10558</td></tr><tr><td>BenchmarkMatchStringCompiled-8</td><td>529.2</td><td>551.9</td><td>670.8</td><td>538.3</td></tr><tr><td>BenchmarkMatchStringGolibs-8</td><td>523.5</td><td>559.2</td><td>659.5</td><td>538.2</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2020/go5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Goアドベントカレンダーその5&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;ARMなMacが出るとWWDCで発表されてから
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDBのページング</title>
    <link href="https://future-architect.github.io/articles/20201130/"/>
    <id>https://future-architect.github.io/articles/20201130/</id>
    <published>2020-11-29T15:00:00.000Z</published>
    <updated>2020-12-05T13:19:12.064Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.34.55.png" alt=""></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG/DXユニットの棚井龍之介です。入社以来、Go × AWS でのバックエンド開発を担当しています。</p><p>AWSのDBといえば「RDS」が代表格ですが、近年のサーバレス普及に伴い「DynamoDB」が第一選択肢として選ばれる機会が増えています。私の所属するプロジェクトでは、API Gateway, Lambda, DynamoDBのAWSサーバレス3兄弟をメイン利用しているため、メンバーによっては「研修はSQL地獄だったけど、配属後はNoSQLオンリーだ！」という人もいます。</p><p>徐々に利用機会が増えているDynamoDBですが、いくつかの「初見殺し」があります。今回はその中での「ページング」について、DynamoDBのデータ格納状況と照らし合わせながら、基本的な仕組みを見ていこうと思います。</p><p>DynamoDBの操作経験がある方を想定しているため、まだ一度も触ったことのない方や基本操作に不安のある方は、<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html" target="_blank" rel="noopener">公式docs</a>や冨山さんの書かれた<a href="https://future-architect.github.io/articles/20200818/">入門記事</a>をご覧ください。</p><h2 id="前提知識"><a href="#前提知識" class="headerlink" title="前提知識"></a>前提知識</h2><ul><li>プライマリーキー<ul><li>パーティションキーのみ</li><li>複合プライマリキー (パーティションキーとソートキー) </li></ul></li><li>DynamoDB API<ul><li>Scan</li><li>Query</li></ul></li></ul><h1 id="DynamoDBの1MB制約"><a href="#DynamoDBの1MB制約" class="headerlink" title="DynamoDBの1MB制約"></a>DynamoDBの1MB制約</h1><p>テーブル操作には大きく分けて「Read(読み込み)」と「Write(書き込み)」の2タイプがあります。</p><p>このうち、ReadのScanとQueryは、一度のDynamoDB API操作では <strong>1MBが取得上限</strong> です。1MB以上のデータを抜き出したい場合は、ページング処理が必要です。ページング処理の対応実装はシンプルであり、1度誰かが書いたコードをコピペで利用できるため、中身を深く理解せずとも使えてしまいます。(Goのサンプルコードは最後に掲載します)</p><p>しかし、詳細を理解しないコピペ実装だと、ちょっと手の込んだ実装などができなくなってしまうため、ページング処理を説明する前にDynamoDBのデータ格納方法を説明します。</p><h1 id="DynamoDBのデータ格納方法"><a href="#DynamoDBのデータ格納方法" class="headerlink" title="DynamoDBのデータ格納方法"></a>DynamoDBのデータ格納方法</h1><p>DynamoDBのテーブルにItemを格納する場合、プライマリーキーによって格納場所が決まります。</p><p>データ格納空間(Key Space)を00~FF、idをHash-Keyとした場合、各Itemは下図のように格納されます。プライマリーキーは重複できないため、新しいデータをid=1でPutItemした場合、データは上書きされます。</p><p>table</p><ul><li>Hash-Table<br>key</li><li>Hash-Key: id</li></ul><p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.36.09.png" alt=""></p><p>複合プライマリーキーの場合でも同様です。Hash-Keyによりいずれかのパーティションへ割り当てて、同一パーティションに含まれるItemはSort-Key順で格納されます。</p><p>table</p><ul><li>Hash-Sort-Table<br>key</li><li>Hash-Key: id</li><li>Sort-Key: order</li></ul><p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.36.19.png" alt=""></p><h1 id="格納場所を特定するKey"><a href="#格納場所を特定するKey" class="headerlink" title="格納場所を特定するKey"></a>格納場所を特定するKey</h1><p>DynamoDBは、全てのItemをプライマリーキーでソートした上で保持しています。</p><p>したがって、Hash-Tableの場合はプライマリーキーの値が分かれば、Hash-Sort-Tableの場合は複合プライマリーキーの値が分かれば、データの格納場所を一意に特定できます。DynamoDBから1MB以上データを取得するために、この一意となるキー情報を利用します。</p><h1 id="1MB以上のデータ取得"><a href="#1MB以上のデータ取得" class="headerlink" title="1MB以上のデータ取得"></a>1MB以上のデータ取得</h1><ul><li>プライマリーキー: Hash-Table</li><li>複合プライマリーキー: Hash-Sort-Table</li></ul><p>で分けて説明します。</p><h2 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash-Table"></a>Hash-Table</h2><p>1MB以上のデータを持つテーブルへScanを実行した場合、テーブルの先頭から1MB分のデータと共に、LastEvaluatedKey(LK)が返されます。LKの値は、1MB分取得したデータの、最後のItemのプライマリーキーです。</p><p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.36.33.png" alt=""></p><p>1MB分データとLKを受け取った後、そのまま終わらせずにScanを再実行するのがポイントです<br>。<br>Scanの引数ExclusiveStartKey(SK)にLKを渡すと、LK地点から1MB分のデータが取得できます。EKはScanの開始位置をテーブルに伝えるため、プライマリーキーを渡すことにより、前回Scanの終了地点からデータ取得再開が可能となります。</p><p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.36.43.png" alt=""></p><p>2回目のScanでも、初回と同様に 1MB分のデータ+LK’ が返されます。再度LK’を渡してScanすることにより、次の1MB分データを取得できます。このループを繰り返して、最終的にLKが返ってこなかった(空のLKが返ってきた)とき、テーブルのScanが完了したことになります。</p><h2 id="Hash-Sort-Table"><a href="#Hash-Sort-Table" class="headerlink" title="Hash-Sort-Table"></a>Hash-Sort-Table</h2><p>複合プライマリーキーの場合も考え方は同じです。</p><p>キーによってデータの格納場所が一意に特定されるため</p><ul><li>Scanで1MB分のデータとLKを取得</li><li>次のScanでLKをEKに代入</li></ul><p>を繰り返すことで、全データを取得可能です。</p><p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.36.58.png" alt=""></p><p>以上で、図によるデータ取得方法の説明は終了です。<br>次は実装コードを見ていきましょう。</p><h1 id="実装コードのサンプル"><a href="#実装コードのサンプル" class="headerlink" title="実装コードのサンプル"></a>実装コードのサンプル</h1><p>GoでDynamoDBから1MB以上を取得するコードのサンプルです。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/dynamodb"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Full Scan Start."</span>)</span><br><span class="line"></span><br><span class="line">    ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ek <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">resp, lk, err := scanWithKey(ctx, ek)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1MB分取得データの処理</span></span><br><span class="line">        <span class="comment">// ex. データETL, csv保存</span></span><br><span class="line"></span><br><span class="line">ek = lk</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ek) == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">// LKが空で返ってきた -&gt; 最後のItemまでScan完了</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">"Full Scan Finish."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scanWithKey</span><span class="params">(ctx context.Context, lk <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue)</span> <span class="params">([]TableModel, <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue, error)</span></span> &#123;</span><br><span class="line">out, err := db.ScanWithContext(ctx, &amp;dynamodb.ScanInput&#123;</span><br><span class="line">ExclusiveStartKey: lk,</span><br><span class="line">TableName:         aws.String(tableName),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"scan %s, %w"</span>, tableName, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resp []TableModel</span><br><span class="line"><span class="keyword">if</span> err := dynamodbattribute.UnmarshalListOfMaps(out.Items, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"dynamodb attribute marshalling map: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resp, out.LastEvaluatedKey, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初回Scanでは空のEKを渡して、2回目以降はLKを代入します。空のLKが返されるまでループを継続することで、Full Scanが完了します。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>DynamoDBから1MB以上のデータを取得する方法について、図を多用して説明しました。</p><p>データがどのように格納されているのか？をイメージできるようになれば</p><ul><li>テーブル設計力の向上</li><li>処理コードのボトルネック特定</li><li>公式ドキュメントのより詳細な理解</li></ul><p>につながると思います。</p><p>DynamoDBは難しいポイントが多いですが、一つずつ解決していきましょう。</p><p>最後まで読んでいただき、ありがとうございました！</p><h2 id="参照記事"><a href="#参照記事" class="headerlink" title="参照記事"></a>参照記事</h2><ul><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Introduction.html" target="_blank" rel="noopener">Amazon DynamoDB とは</a></li><li><a href="https://www.slideshare.net/AmazonWebServicesJapan/20150805-aws-blackbeltdynamodb" target="_blank" rel="noopener">AWS Black Belt Tech シリーズ 2015 - Amazon DynamoDB</a></li><li><a href="https://future-architect.github.io/articles/20200818/">【入門】私を苦しめたDynamoDB</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201130/Screen_Shot_2020-11-30_at_5.34.55.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめ
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
  </entry>
  
  <entry>
    <title>数字で振り返るフューチャー技術ブログ（2020）</title>
    <link href="https://future-architect.github.io/articles/20201127/"/>
    <id>https://future-architect.github.io/articles/20201127/</id>
    <published>2020-11-26T15:00:00.000Z</published>
    <updated>2020-11-27T06:36:29.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>技術ブログ運営の真野です。</p><p>フューチャー技術ブログですが、2020年を数値で振り返りたいと思います。</p><p>理由ですが、<a href="https://future-architect.github.io/articles/20200530/">フューチャー技術ブログの運営で心がけていること</a> で説明したとおり、ガラッと運営方針を変えたり、<a href="https://future-architect.github.io/articles/20200908/">フューチャー技術ブログで行っている連載企画が良いよって話</a> で説明したとおり、多くの企画を行ったのでその結果をまとめておきたいと思ったからです。他に有力な理由は年末に評価プレゼンする必要があり、どうせまとめるならブログ公開しちゃうか、という背景もあります。PVもあります。</p><img src="/images/20201127/browser-3614768_1280.png" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/janjf93-3084263/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3614768" target="_blank" rel="noopener">janjf93</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3614768" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h2 id="集計期間"><a href="#集計期間" class="headerlink" title="集計期間"></a>集計期間</h2><p>フューチャー技術ブログは2016年2月より始まりました。5年弱（4年10ヶ月）の期間の記録です。この間に記事を削除したことは一度も無くありのままです。1年を振り返るといっても、そういえば今まで1度も過去を振り返ったことがないので折角の機会です。過去5年弱全部の数値をまとめていきたいと思います。</p><h2 id="投稿本数"><a href="#投稿本数" class="headerlink" title="投稿本数"></a>投稿本数</h2><p>まずは投稿数です。約5年で <strong>328記事</strong> が投稿されました。</p><p>平準化すると60記事/年（5記事/月）ほどです。しかし投稿年で表示すると下記のようにかなり偏りがあります。</p><p><img src="/images/20201127/image.png" alt=""></p><p>見たまんまですが、2016~2018は年間 <strong>約30記事</strong> くらいだったのが、2019年に<strong>75記事</strong>、2020年には11月時点で<strong>190記事</strong>と急速に増えています。2020年は52週なので、週3,4本をコンスタントに公開していたということです。かなりガンバっているのが数字からも分かります。実際ちょっと大変でした。寄稿してくれたり応援してくれたフューチャー社員みなさんのご厚意が見事に表現されているハートフルな結果だと認識しています。</p><p>正直最初は投稿頻度が高くてスゴイ！ってポジティブに褒めてくれた人も、だんだんとこいついつまでこのペースで続けるんだ？って目で見られていた気がします。ずっと褒め続けてほしかったのが本音です。倒れるときは前かがみがポリシーです。</p><h2 id="記事のカテゴリ"><a href="#記事のカテゴリ" class="headerlink" title="記事のカテゴリ"></a>記事のカテゴリ</h2><p>続いて記事のカテゴリです。カテゴリは運営が状況に合わせて統廃合するので流動的なのですが、大体の感じを掴むのにぴったりだと思っています。</p><p>割合を見ると、Programming、Infrastructure、Culture、DataScienceあたりの上位4枠で8割ほどを占有するという結果でした。想定通り。</p><p><img src="/images/20201127/image_2.png" alt=""></p><p>Programmingは非常に幅広いので、フロントエンド・バックエンドくらいは分けたほうが良かもしれません。意見があればぜひフィードバックください。</p><h2 id="寄稿者"><a href="#寄稿者" class="headerlink" title="寄稿者"></a>寄稿者</h2><p>寄稿者数は5年で<strong>130名</strong>でした。寄稿者は予想通りそれなりの偏りがあります。よく投稿してくれる人は月1程度のペースで寄稿していただけますし、年1の方もいらっしゃいます。</p><p>試しに過去5年のうち、投稿記事数ごとに割合を出してみました。グラフの見方ですが、例えば1記事だけ投稿した人は、328記事中34.1%を占めしているということです。</p><p><img src="/images/20201127/image_3.png" alt=""></p><p>ちなみに5記事以上だと4割程を占めしていて、11名で146記事です。4割ほどの記事は頻繁に投稿してくださる方々によって作られていることが分かりますので、リピーター大事ですね。逆に言えば、もう過半数は1~4記事といったたまに投稿してくれた方々に支えられて言います。記事のバリエーションは多くのニューカマーを呼び込めたことでも実現できているのかなと認識しています。</p><p>次に年単位で寄稿者（述べ人数ではなく関わってくれた人の数）をグラフ化しました。</p><p><img src="/images/20201127/image_4.png" alt=""></p><p>ブログ開始時は<strong>15名</strong>程度でしたが、2019年に<strong>40名</strong>、2020年には<strong>80名</strong>を超えるようになってきていることがわかります。記事数と同様多くの方に関わっていただけたことがわかって感謝です。</p><h2 id="PV遷移"><a href="#PV遷移" class="headerlink" title="PV遷移"></a>PV遷移</h2><p>PVチャートを大公開です。2019年6月ごろより増えてきました。2020年10月は<strong>6.1万ユーザ/月</strong>でした。PVだと<strong>10.7万PV/月</strong>でした。PVは追わない方針！と周囲には伝えていますが、こっそり2020年度中に10万PV/月を達成できたら嬉しいなと思っていたので、ちょっとうれしいです。</p><p><img src="/images/20201127/image_5.png" alt=""></p><p>ちなみに、ちょうど2018, 2019年の10月の数値も載せておきます。</p><ul><li>2018年10月<ul><li>ユーザ数: 0.5万</li><li>PV数：1.0万</li></ul></li><li>2019年10月<ul><li>ユーザ数: 2.8万</li><li>PV数: 4.7万</li></ul></li><li>2020年10月<ul><li>ユーザ数: 6.1万</li><li>PV数: 10.7万</li></ul></li></ul><p>ということで、2018年比較で10倍、2019年比較で2倍以上に成長できました。振り返ってみると2019年の進化が凄まじいですね。</p><p>以下は2019年11月～2020年11月までを、PV/日単位で出力しました。週末は基本的に新記事を公開しないのでかなり上げ下げがあります。ピンポイントでスパイクしているのは、何か記事がバズったんだと思います。</p><p><img src="/images/20201127/image_6.png" alt=""></p><p>なにはともあれ、この1年の変化が多少なりとも感じられて良かったです。</p><h2 id="PVで見る人気の記事"><a href="#PVで見る人気の記事" class="headerlink" title="PVで見る人気の記事"></a>PVで見る人気の記事</h2><p>2020年の1/1～11/25までのPV人気記事を紹介します。集計の都合上、1月に近い月で公開した記事が有利なのですが、社内やSNSで反響があった記事は大体ノミネートされているので参考になると思います。要望があったので隣にはてなブックマーク数も追加しました。調査日は2020/11/26です。</p><table><thead><tr><th>#</th><th>Link</th><th>PV数<br>[万]</th><th>はてぶ数</th></tr></thead><tbody><tr><td>1</td><td><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a></td><td>8.1</td><td>542</td></tr><tr><td>2</td><td><a href="https://future-architect.github.io/">トップページ</a></td><td>2.5</td><td>5</td></tr><tr><td>3</td><td><a href="https://future-architect.github.io/articles/20200501/">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話</a></td><td>2.4</td><td>307</td></tr><tr><td>5</td><td><a href="https://future-architect.github.io/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</a></td><td>1.9</td><td>120</td></tr><tr><td>6</td><td><a href="https://future-architect.github.io/articles/20200429/">Reduxを分かりやすく解説してみた</a></td><td>1.4</td><td>9</td></tr><tr><td>7</td><td><a href="https://future-architect.github.io/articles/20180529/">データベースマイグレーション ～OracleからPostgreSQLへ～</a></td><td>1.3</td><td>34</td></tr><tr><td>8</td><td><a href="https://future-architect.github.io/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a></td><td>1.2</td><td>43</td></tr><tr><td>9</td><td><a href="https://future-architect.github.io/articles/20201013/">2020年秋にVue.jsのアプリケーションを作るなら、押さえておきたい5つのポイント</a></td><td>1.1</td><td>248</td></tr><tr><td>10</td><td><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></td><td>0.8</td><td>388</td></tr><tr><td>11</td><td><a href="https://future-architect.github.io/articles/20200428/">Vue.jsのslotの機能を初心者にわかるように解説してみた</a></td><td>1.1</td><td>6</td></tr><tr><td>12</td><td><a href="https://future-architect.github.io/articles/20200203/">チームで機能設計するためのPlantUML標準化</a></td><td>1.1</td><td>424</td></tr><tr><td>13</td><td><a href="https://future-architect.github.io/articles/20200709/">GoでWebアプリ開発時にあるあるだったレビューコメント</a></td><td>1</td><td>431</td></tr><tr><td>14</td><td><a href="https://future-architect.github.io/articles/20190530/">【合格記】GCP Professional Cloud Architect認定資格を振り返る</a></td><td>0.9</td><td>6</td></tr><tr><td>15</td><td><a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a></td><td>0.9</td><td>94</td></tr><tr><td>16</td><td><a href="https://future-architect.github.io/articles/20200311/">JavaプログラマーのためのGo言語入門</a></td><td>0.9</td><td>341</td></tr><tr><td>17</td><td><a href="https://future-architect.github.io/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></td><td>0.9</td><td>398</td></tr><tr><td>18</td><td><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></td><td>0.9</td><td>79</td></tr><tr><td>19</td><td><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></td><td>0.9</td><td>8</td></tr><tr><td>20</td><td><a href="https://future-architect.github.io/articles/20190625/">Amazon Redshiftの仕様を調べてみた</a></td><td>0.9</td><td>8</td></tr></tbody></table><p>恐ろしきは、1位のOpenAPIの記事ですが、2019年10月に公開された記事でロングセラーです。著者の武田さんスゴイ。どれも珠玉の記事なので見逃している方はぜひチェックしていただければです。</p><p>PVとはてなブックマーク数は要望があって出してみたものの、連動しているようなしていないような、なんとも言えないなと思いました。なんとなくフロントエンドやUI/UXをテーマにすると検索されやすいのかな？と推測はできそうですが調査できていません。</p><h2 id="Facebookいいね数で見る人気の記事"><a href="#Facebookいいね数で見る人気の記事" class="headerlink" title="Facebookいいね数で見る人気の記事"></a>Facebookいいね数で見る人気の記事</h2><p>2020年に公開された記事で、良いね！数が多かったものを選出しました。こちらは上記のPVとはまた違った顔ぶれです。技術以外のネタも評価されるようですね。</p><table><thead><tr><th>#</th><th>Link</th><th>いいね数</th></tr></thead><tbody><tr><td>1</td><td><a href="https://future-architect.github.io/articles/20200613/">フューチャーの新人研修後の配属先にかける新人の思いを歌ってみた</a></td><td>75</td></tr><tr><td>2</td><td><a href="https://future-architect.github.io/articles/20200424/">社内勉強会で発表したGCP資料を公開します</a></td><td>67</td></tr><tr><td>3</td><td><a href="https://future-architect.github.io/articles/20200122/">Auth0 導入編</a></td><td>62</td></tr><tr><td>4</td><td><a href="https://future-architect.github.io/articles/20201105/">イノベーションの捉え方</a></td><td>59</td></tr><tr><td>5</td><td><a href="https://future-architect.github.io/articles/20200115/">打鍵テストをCIで回す：Cypress on GitHub Actions</a></td><td>52</td></tr><tr><td>6</td><td><a href="https://future-architect.github.io/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a></td><td>35</td></tr><tr><td>7</td><td><a href="https://future-architect.github.io/articles/20200205/">GCP連載#1 Stackdriver Loggingへ良い感じのログ出力方法を考える</a></td><td>33</td></tr><tr><td>8</td><td><a href="https://future-architect.github.io/articles/20201027/">Vulsの歴史</a></td><td>27</td></tr><tr><td>9</td><td><a href="https://future-architect.github.io/articles/20200715/">新人研修有志が初心者向けにバーチャルコンテストを実施しました &amp; Tips</a></td><td>22</td></tr><tr><td>10</td><td><a href="https://future-architect.github.io/articles/20200914/">GlyphFeeds連載を始めます！</a></td><td>21</td></tr><tr><td>10</td><td><a href="https://future-architect.github.io/articles/20200530/">フューチャー技術ブログの運営で心がけていること</a></td><td>21</td></tr></tbody></table><p>Facebook良いね数がこんなについていることを知らなかったので、フューチャー技術ブログでFacebookアカウントを作ったほうが良いんですかね？意見ある人はTwitterか何かでコメントいただければです。</p><h2 id="2020年いちばん寄稿してくれた人は？"><a href="#2020年いちばん寄稿してくれた人は？" class="headerlink" title="2020年いちばん寄稿してくれた人は？"></a>2020年いちばん寄稿してくれた人は？</h2><p>2020年1月1日～11/26で投稿数の多い人順でソートしました。ブログ運営はアナウンス系記事もあるのでズルい気がしますが、私がトップ。それを除くと澁川さんでした。<br>先程のPVランキングにも数多く登場するので、質量ともにフューチャー技術ブログを引っ張っていただいていることが分かりました。ありがとうございます！</p><table><thead><tr><th>#</th><th>名前</th><th>記事数</th><th>備考</th></tr></thead><tbody><tr><td>1</td><td>真野隼記</td><td>20</td><td>ブログ運営者1</td></tr><tr><td>2</td><td>澁川喜規</td><td>19</td><td></td></tr><tr><td>3</td><td>伊藤太斉</td><td>11</td><td>ブログ運営者2</td></tr><tr><td>4</td><td>伊藤真彦</td><td>10</td><td></td></tr><tr><td>5</td><td>辻大志郎</td><td>8</td><td></td></tr><tr><td>6</td><td>村田靖拓</td><td>7</td><td></td></tr><tr><td>7</td><td>村瀬善則</td><td>6</td><td></td></tr><tr><td>8</td><td>多賀聡一朗</td><td>6</td><td></td></tr><tr><td>9</td><td>栗田真</td><td>6</td><td></td></tr><tr><td>10</td><td>西田好孝</td><td>4</td><td></td></tr><tr><td>10</td><td>山田勇一</td><td>4</td><td></td></tr></tbody></table><h2 id="ベストブロガーオブザイヤー"><a href="#ベストブロガーオブザイヤー" class="headerlink" title="ベストブロガーオブザイヤー"></a>ベストブロガーオブザイヤー</h2><p>2020年はベストブロガーオブザイヤーを開催し、技術ブログ部門から3名を選出させていただきました。入賞すると粗品をプレゼントされるようです。</p><p>詳細は未来報の記事をお待ち下さい。</p><h2 id="2021年に向けて"><a href="#2021年に向けて" class="headerlink" title="2021年に向けて"></a>2021年に向けて</h2><p>2020年のペースは守れるか断言できませんが、150本以上目指していきたいと思います。</p><p>他にも、<a href="https://future-architect.github.io/articles/20201116/">TechCast</a> も継続したいのと、技術同人誌（FutureTechBook）も公開できたらなと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>フューチャー技術ブログの、投稿数・PV・人気の記事・よく投稿してくれる人を公開しました。</p><p>記事の途中でも書きましたが、運営上全くPVやらユーザ数は追っておらず、引き続き有益な技術情報を発信することをポリシーにしていきたいと思います。結果として何かしらの数値が良くなっていくと良いなと思っています。</p><p>2020年も後少しですが、引き続きよろしくおねがいします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;技術ブログ運営の真野です。&lt;/p&gt;
&lt;p&gt;フューチャー技術ブログですが、2020年を数値で振り返りたいと思います。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
  </entry>
  
  <entry>
    <title>塗り絵の魚がすいすい泳ぐ？ ～子ども向けアトラクションを作ってみた～</title>
    <link href="https://future-architect.github.io/articles/20201126/"/>
    <id>https://future-architect.github.io/articles/20201126/</id>
    <published>2020-11-25T15:00:00.000Z</published>
    <updated>2020-11-26T11:32:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>当社では、年末に社内イベントとして、BPY（Best Project of the Year）と YEP(Year End Party) があり、YEPは社員だけでなくそのご家族も参加されます。</p><ul><li>BPYとYEPについては<a href="https://note.future.co.jp/n/n7b0e5de1b2bc" target="_blank" rel="noopener">未来報のこちらの記事</a>をご覧ください。</li></ul><p>BPYはかなり大掛かりなイベントで、想像を超える完成度で規模も非常に大きいです。2019年以前では会場は<a href="https://anaintercontinental-tokyo.jp/" target="_blank" rel="noopener">ANAインターコンチネンタルホテル東京</a>の大宴会場に溢れんばかりの人で、ご家族合わせて1000名以上参加されていたのではないかと思います。</p><p>2020年もそろそろBPY/YEPの季節となってきており、社内もその準備で慌ただしいです。一方でコロナ禍の影響でBPYはリモートを活用して密を防ぐ対応を、YEPについては開催が見送られてしまいました。代わりと言ってはなんですが、2019年のYEPで子ども向けのアトラクションを社内有志で制作したお話をしたいと思います。</p><h1 id="制作したもの"><a href="#制作したもの" class="headerlink" title="制作したもの"></a>制作したもの</h1><p>名付けて、「フューチャーアクアリウム」🐟🐠🐡🐙🐚です！ 脳の発育に良いとされる塗り絵と、ITを組み合わせたイノベーションです。アトラクションは食事に飽きたお子様がすぐ時間を潰せるようにという考えで大宴会場前のスペースに設置しました。</p><p><img src="/images/20201126/top.jpg" alt=""></p><p>正面から見るとこんな感じです。</p><p><img src="/images/20201126/screen.jpg" alt=""></p><p>アトラクションの流れとしては以下です。</p><ol><li>まず、子供たちに生き物の塗り絵をしてもらいます<ul><li>塗り絵はお魚さんをたくさん用意しました<br><img src="/images/20201126/nurie_template.png" alt=""></li></ul></li><li>書いてもらった絵をカメラで取り込みます<br><img src="/images/20201126/nurie.jpg" alt=""></li><li>その取り込んだ塗り絵の画像をプロジェクタで映し出したスクリーン（アクリル板）上にアニメーション付きで表示します</li><li>スクリーン上の任意の場所をタッチするとその位置を深度センサで検知し、生き物がその部分によってくるように移動させます<br><img src="/images/20201126/touch.jpg" alt=""><ul><li>そのままだと、投入された生き物で溢れかえってしまうので、ある程度増えたら、人間に釣られて消える仕組みも組み込みました。</li></ul></li></ol><p>自分の書いた絵がすぐに画面上に表示され、気持ちよさそうに泳ぐため、お子さまからは大好評でした。もちろん社員のお父さん・お母さんにも好評でした♪</p><h1 id="制作の裏側"><a href="#制作の裏側" class="headerlink" title="制作の裏側"></a>制作の裏側</h1><h2 id="スケジュールと体制"><a href="#スケジュールと体制" class="headerlink" title="スケジュールと体制"></a>スケジュールと体制</h2><p>開発期間は通常業務を行いながらの1ヶ月弱という、結構、タイトなスケジュールでした。そうです。ちょうど2019年の11月中旬（この記事が公開される頃）に、YEPの企画チームから依頼を受け、有志を募り開発をスタートさせたのでした。</p><p>画像などのコンテンツ担当3人、アプリの開発担当3人のチームで開発しました。</p><h2 id="ハードウェア構成"><a href="#ハードウェア構成" class="headerlink" title="ハードウェア構成"></a>ハードウェア構成</h2><p>ハードウェアの構成は、PC(<a href="https://www.intel.co.jp/content/www/jp/ja/products/boards-kits/nuc/kits/nuc8i5bek.html" target="_blank" rel="noopener">IntelのNUC</a>)に4Kプロジェクタ2台、深度センサ(<a href="https://www.intelrealsense.com/depth-camera-d435i/" target="_blank" rel="noopener">IntelのRealSense</a>)1台、USBカメラ1台、ポータブルモニタ1台を接続したものを２セット準備しました。</p><p><img src="/images/20201126/hardware_structure.png" alt=""></p><p>楽屋裏はこんな形でした。</p><p><img src="/images/20201126/back.jpg" alt=""></p><p>正面から見るとこういう感じに見えます。お魚さんがいないと寂しい感じです。</p><p><img src="/images/20201126/monitor.jpg" alt=""></p><p>4Kプロジェクタでスクリーン（アクリル板）に塗り絵の魚たちを表示し、指でタッチすると移動させたいので、イベントを拾うためRealSenseの深度センサを利用しています。</p><p><img src="/images/20201126/sensor.png" alt=""></p><p>USBカメラは塗り絵の撮影用です。</p><h2 id="ソフトウェア構成"><a href="#ソフトウェア構成" class="headerlink" title="ソフトウェア構成"></a>ソフトウェア構成</h2><p>ソフトウェアの開発は<a href="https://processing.org/" target="_blank" rel="noopener">Processing</a>で行いました。Processingが初めてな開発者もいましたが、ProcessingはJavaがベースとなっている言語でその開発者は元ゲーム系のC/C++プログラマーだったので、比較的すぐにキャッチアップし実装することができました。</p><p>まずは、一人の開発者が生き物の移動とアニメーションの基本的な処理を先に実装し、その後、別の開発者が各処理を統合しやすくフレームワーク的な作りを取り入れた後、生き物の画像データの取り込み、背景のアニメーション、深度センサによる位置検出などの処理を３人の開発者で分担・並行して開発を進めました。</p><p>生き物のアニメーションに関しては、某有名狩りゲーの魚の動きを参考に特定方向に対して速度を与えて減衰させる手法を取り、また、進行方向が左右に切り替わる際の反転アニメーションについては、既存のライブラリが存在しなかったため始めから作り込みました。</p><p>生き物の画像データの取り込みに関しては、リアルタイムに取り込むため、内部で特定フォルダにおけるファイル追加イベントを監視し、非同期で画像を読み込みアプリに表示できるようにしています。</p><h2 id="当日の様子"><a href="#当日の様子" class="headerlink" title="当日の様子"></a>当日の様子</h2><p>BPY/YEP当日が、我々にとってのリリース日です。子どもたちの笑顔のためにも失敗は許されません。</p><p>幸いなことに、ほぼ予定通りにアトラクションを開業・運営することができました。覚えている限りのトラブルは、本番の会場では開発時と照明環境が異なり、画像データの取り込みの際に切り抜き処理が少しうまくいかないことでした。それ自体はその場で微調整を行うことで、大きな問題にはなりませんでした。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>塗り絵の魚がすいすい泳ぐ、「フューチャーアクアリウム」🐟🐠🐡🐙🐚の解説でした。</p><p>来年こそはコロナ禍が去って、よりパワーアップしたアトラクションが登場してくることを期待したいと思います。</p><p>社員の方で、こういった装置に興味がある方や、パワーアップさせたい方がいましたら山本まで連絡ください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;当社では、年末に社内イベントとして、BPY（Best Project of the Year）と YEP(Year End 
      
    
    </summary>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
      <category term="RealSense" scheme="https://future-architect.github.io/tags/RealSense/"/>
    
      <category term="Processing" scheme="https://future-architect.github.io/tags/Processing/"/>
    
  </entry>
  
  <entry>
    <title>Qiita Advent Calendar 2020 に参加します</title>
    <link href="https://future-architect.github.io/articles/20201125/"/>
    <id>https://future-architect.github.io/articles/20201125/</id>
    <published>2020-11-24T15:00:00.000Z</published>
    <updated>2020-12-12T02:50:50.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニット所属、技術ブログ編集部の<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。</p><p>師走と呼ばれる12月、忙しくなる季節が今年もやってまいりました。そんな12月にフューチャーは今年もQiita主催のアドベントカレンダーに参加します。</p><p><img src="/images/20201125/advent-calendar-1865325_1280.png" alt=""></p><p><a href="https://pixabay.com/ja/users/pixaline-1569622/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1865325" target="_blank" rel="noopener">Pixaline</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1865325" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h2 id="アドベントカレンダーとは"><a href="#アドベントカレンダーとは" class="headerlink" title="アドベントカレンダーとは"></a>アドベントカレンダーとは</h2><p>アドベントカレンダーとは12/1から12/25のクリスマスまでカウントダウンするものです。日数を数える窓をめくるたびにイラストやチョコレートなどのお菓子が入っているグッズもよく見かけますね。</p><p>IT技術ブログ界隈ではこれにならって25日までの間、リレー方式で記事投稿をおこないます（IT業界ではない人からは怪訝そうな目で見られることも多い気がしますが、個人的には面白い慣習だと思っています）。毎年、数多くのカレンダーが作成され、中には1人で25投稿する方もいるそうです。</p><p>その中でもQiitaアドベントカレンダーは有名です。エンジニアの知見、知識共有サイトの<a href="https://qiita.com/" target="_blank" rel="noopener">Qiita</a>が毎年主催している12月の企画です。カテゴリごとにフォロー数やLGTM数をスコアリングして盛り上げる機能もあり、色々な意味で祭典です。</p><p>フューチャーは2015年から参加しており、2020年の今回で6回目の参加です。</p><h2 id="フューチャーとアドベントカレンダー"><a href="#フューチャーとアドベントカレンダー" class="headerlink" title="フューチャーとアドベントカレンダー"></a>フューチャーとアドベントカレンダー</h2><p>さきほど申したとおり、フューチャー初回のアドベントカレンダーへの参加は<a href="https://qiita.com/advent-calendar/2015/future" target="_blank" rel="noopener">2015年</a>でした。それまではそういったイベントに参加した記録が無いので当時は割と画期的でした。</p><p>参加を決めたのは、同年の8月くらいに<a href="https://qiita.com/organizations/future" target="_blank" rel="noopener">Qiita Organization</a>を有志が勝手に作ったことがあり（事後報告でルールを策定しOKをもらう）、Qiitaに技術Tipsを投稿する人が増えたことがあり25枠埋められるんじゃない？ということで当時の担当者が勢いで作成しました。結果は半分くらいすぐ埋まったものの、控えめな正確な人が多かったのか3,4割が穴あき。焦った当時の担当者が知り合いにチャットDMを送りまくり参加者をかき集めたという逸話があります。それが2019年には2枠があっという間に埋まるまでに成長したので、会社の文化ってすぐ変わるんだなと感じています。</p><p>さて、2015年のアドベントカレンダーの話に戻りますが、当時はリレー形式で繋ぐスタイルがなぜか社内で盛り上がり、<a href="https://future-architect.github.io/articles/20160217/">LT大会でもしようよ</a> とVulsの神戸さんが口走ったのをキッカケに本当にやることにしました。トリガーは神戸さんですが準備は当時の担当者と同じなので大変でした。LT大会は今も続く社内イベントですので、色々な社内文化が起こるキッカケが、Qiitaとそのアドベントカレンダーを系譜としています。連続で参加記録を伸ばすたびに少し趣深いです。</p><h2 id="アドベントカレンダー2020"><a href="#アドベントカレンダー2020" class="headerlink" title="アドベントカレンダー2020"></a>アドベントカレンダー2020</h2><p>今年のアドベントカレンダーはこちらになります。例年通りQiitaに作成しています。</p><p><img src="/images/20201125/image.png" alt=""></p><ul><li><a href="https://qiita.com/advent-calendar/2020/future" target="_blank" rel="noopener">フューチャー Advent Calendar 2020</a></li></ul><p>今回の参加者の一部を紹介します。</p><ul><li>自分が誕生日だから記事を書く</li><li>毎年参加しているベテラン勢</li><li>今年新卒で入社した方</li></ul><p>などなど、濃いメンバーでお送りします。ちなみに、今年のカレンダーはスタートと終わりのメンバーの苗字が同じですが、別人物です。</p><h2 id="発表テーマ"><a href="#発表テーマ" class="headerlink" title="発表テーマ"></a>発表テーマ</h2><p>例年と同じく、IT技術であること以外はフリーテーマです。</p><p>ポリシーとしては基本的にはQiitaそのものに投稿していただくスタイルですが（順位も少し気にしています）、Qiitaの投稿規約に沿わない記事（エッセー過ぎるもの、プログラミングに関係ないもの）は技術ブログ側に投稿することもあります。このあたりの決めは各人にお願いしています。</p><p>その他、個人ブログへのリンクは非推奨で基本的にはNGとアナウンスしています。</p><h2 id="その2は作らないの？"><a href="#その2は作らないの？" class="headerlink" title="その2は作らないの？"></a>その2は作らないの？</h2><p>2019年は2枠作りましたが、今年は1枠です。</p><p>理由は2020年は<a href="https://future-architect.github.io/articles/20200908/">技術ブログ独自の連載企画</a>を月1ペースで行っていたため、社員の多くの方がすでにアウトプットを出している状態。だいぶガス抜きできたため、年にこの時期だけブログを書くという層をだいぶ減らせたからではないかなと思っているからです。</p><p>他にもいくつか理由があります。</p><ul><li>会社のアドベントカレンダーだけではなく他のコミュニティベースのアドベントカレンダーにも投稿して欲しい</li><li>毎日2記事以上を社内でシェアしても、読んでくれる人が減っている体感があるため、1本に絞りたい</li></ul><p>です。</p><h2 id="運営上の工夫"><a href="#運営上の工夫" class="headerlink" title="運営上の工夫"></a>運営上の工夫</h2><p>2020年は去年があっという間に枠が埋まって、気がついたときには2枠目すら申し込めなかったという声があったため、すこし募集方法を変えました。</p><p>今まではアドベントカレンダーが作成できると気がついたタイミングで担当者が勢いで作成し、部署Chatに流すスタイルでしたが、今回からは事前に全社アナウンスをかけて、公開日を固定化。その前段階でOrganizationに参加したい人がいないか事前申し込み期間も用意しました。そのかいあってか、2020年は応募タイミングによる不満の声はなくなったと思います。（勢いは若干減りましたが）。</p><h2 id="社員のみなさまへ"><a href="#社員のみなさまへ" class="headerlink" title="社員のみなさまへ"></a>社員のみなさまへ</h2><p>今年もご参加いただいた方、ありがとうございました。記事の作成をぜひお願いします！でも、Qiitaの規約に沿わないヤンチャは控えてくださいね。</p><p>また、今年参加を見送った方もQiita記事への投稿があればOrganizationに招待しますので、中の人にお声がけください。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>年末のイベントとしてすっかり定着したQiitaのアドベントカレンダーですが、より面白いネタが出てくるかと思いますので、良いと思った記事は是非LGTMしていただければと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXユニット所属、技術ブログ編集部の&lt;a href=&quot;https://twitter.com/kaede
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
      <category term="Qiita" scheme="https://future-architect.github.io/tags/Qiita/"/>
    
      <category term="AdventCalendar" scheme="https://future-architect.github.io/tags/AdventCalendar/"/>
    
      <category term="AdventCalendar2020" scheme="https://future-architect.github.io/tags/AdventCalendar2020/"/>
    
  </entry>
  
  <entry>
    <title>Auth0の出版記念に行ってきました！</title>
    <link href="https://future-architect.github.io/articles/20201124/"/>
    <id>https://future-architect.github.io/articles/20201124/</id>
    <published>2020-11-23T15:00:00.000Z</published>
    <updated>2020-11-24T15:49:20.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出版記念懇親会"><a href="#出版記念懇親会" class="headerlink" title="出版記念懇親会"></a>出版記念懇親会</h1><p>Auth0さんより、クローズドの電子書籍出版記念にご招待いただき、Futureより3名で出席してまいりました。</p><ul><li>マンガでわかる！Auth0誕生の秘密とは<br><a href="https://auth0.co.jp/lp/manga/index.html" target="_blank" rel="noopener">公式ページ</a><br><a href="https://www.amazon.co.jp/dp/B08MZRCLTK" target="_blank" rel="noopener">ダウンロードページ</a></li></ul><h1 id="Auth0について"><a href="#Auth0について" class="headerlink" title="Auth0について"></a>Auth0について</h1><p><a href="https://auth0.com/jp/" target="_blank" rel="noopener">Auth0</a>は、認証・認可のサービスを提供するIDaaSの1つです。 </p><p><a href="https://github.com/auth0" target="_blank" rel="noopener">開発ライブラリ</a>が豊富でカスタマイズ性がとても高く、何よりデベロッパーフレンドリーな部分が開発者としてとても好きな部分です。</p><p>弊社でも複数の案件で採用し、そのご縁でAuth0さんの<a href="https://eventregist.com/e/DcdTqLuiWe2Z" target="_blank" rel="noopener">イベント</a>に登壇させていただいた他、<a href="https://future-architect.github.io/tags/Auth0/">当ブログ</a>でもいくつか記事を掲載していますので、是非ご覧ください。</p><h1 id="出版記念懇親会の流れ"><a href="#出版記念懇親会の流れ" class="headerlink" title="出版記念懇親会の流れ"></a>出版記念懇親会の流れ</h1><h3 id="1-Auth0-SVP-Internationalスティーブン・リー・プルマンさん挨拶"><a href="#1-Auth0-SVP-Internationalスティーブン・リー・プルマンさん挨拶" class="headerlink" title="1. Auth0 SVP Internationalスティーブン・リー・プルマンさん挨拶"></a>1. Auth0 SVP Internationalスティーブン・リー・プルマンさん挨拶</h3><p>Auth0 SVP Internationalのスティーブン・リー・プルマンさんによるスピーチで、日本市場に対しての抱負が語られました。<br>写真掲載はAuth0さんに許可を頂いております。</p><p>快くご提供いただき、ありがとうございました！</p><p><img src="/images/20201124/Steven-Rees-Pullman%E3%81%AE%E3%82%B3%E3%83%92%E3%82%9A%E3%83%BC.jpg" alt=""></p><ul><li>トピック<ul><li>Auth0として、日本語ローカライズにコミットすること</li><li>日本人スタッフを増やし、体制を強化すること</li><li>日本事業が好調で、2021年は大きな成長をめざしていること</li></ul></li></ul><p>利用していても、メニュー・サポートの日本語化はとてもニーズの高い内容だと感じているので、期待して待ちたいと思います。</p><h3 id="2-懇親会"><a href="#2-懇親会" class="headerlink" title="2. 懇親会"></a>2. 懇親会</h3><p>お酒を飲んでしまい、写真をほぼ取りそびれています。</p><p>辛うじて一緒に出席したメンバーが残した料理の写真です。</p><p><img src="/images/20201124/iOS_%E3%81%AE%E7%94%BB%E5%83%8F_(5).jpg" alt=""></p><h1 id="ノベルティ"><a href="#ノベルティ" class="headerlink" title="ノベルティ"></a>ノベルティ</h1><ul><li>書籍版の漫画<br>大本命の書籍です。<br>Auth0の誕生秘話が語られています。</li><li>事例集<br>８つの事例が紹介してあり、最近のAuth0さんの勢いを感じる内容でした。</li><li>Auth0マスク</li><li>Auth0カレー<br><img src="/images/20201124/iOS_%E3%81%AE%E7%94%BB%E5%83%8F_(4).jpg" alt=""></li></ul><h1 id="フォトジェニックスポット"><a href="#フォトジェニックスポット" class="headerlink" title="フォトジェニックスポット"></a>フォトジェニックスポット</h1><p>Auth0のCEO/CTOと写真の撮れるフォトジェニックスポットも用意されていました。<br>せっかくなので、出席メンバー個別に撮影。恐らく、一番はしゃいでた集団だったと思います。</p><p>※撮影時以外はマスクを着用しておりました。</p><p><img src="/images/20201124/iOS_%E3%81%AE%E7%94%BB%E5%83%8F_(2).jpg" alt=""></p><p><img src="/images/20201124/iOS_%E3%81%AE%E7%94%BB%E5%83%8F_(3).jpg" alt=""></p><p>どうも私です！  </p><p><img src="/images/20201124/iOS_%E3%81%AE%E7%94%BB%E5%83%8F_(1).jpg" alt=""></p><h1 id="なにはともあれ"><a href="#なにはともあれ" class="headerlink" title="なにはともあれ"></a>なにはともあれ</h1><p>出版おめでとうございます！</p><p>フューチャー技術ブログの<a href="https://future-architect.github.io/tags/Auth0/">Auth0連載</a>も盛り上げていきます。よろしくおねがいします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;出版記念懇親会&quot;&gt;&lt;a href=&quot;#出版記念懇親会&quot; class=&quot;headerlink&quot; title=&quot;出版記念懇親会&quot;&gt;&lt;/a&gt;出版記念懇親会&lt;/h1&gt;&lt;p&gt;Auth0さんより、クローズドの電子書籍出版記念にご招待いただき、Futureより3名で出席してまい
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
  </entry>
  
  <entry>
    <title>CloudEndure Migration - 実践編</title>
    <link href="https://future-architect.github.io/articles/20201120/"/>
    <id>https://future-architect.github.io/articles/20201120/</id>
    <published>2020-11-19T15:00:00.000Z</published>
    <updated>2020-11-24T15:49:23.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。<br>2020年1月中途入社、TIGの八巻です。</p><p>前回記事「<a href="https://future-architect.github.io/articles/20201021/">CloudEndure Migration - 導入編</a>」の続きです。<br>今回は、実際にCloudEndure Migrationを使った移行を実践したいと思います。</p><p>初期設定や用語等は、前回記事をご確認ください。</p><h1 id="今回の環境構成図"><a href="#今回の環境構成図" class="headerlink" title="今回の環境構成図"></a>今回の環境構成図</h1><p>CloudEndure Migrationを実施する環境は以下の通りです。<br><img src="/images/20201120/CloudEndure-Diagram.png" alt=""></p><p>GCPに用意したGCEのVMインスタンスを、AWSへ移行してみます。<br>移行元のサーバーとして、以下のVMインスタンスを用意しました。</p><table><thead><tr><th>項目</th><th>値</th></tr></thead><tbody><tr><td>名前</td><td>cloudendure-source</td></tr><tr><td>OS</td><td>CentOS Linux release 7.8.2003 (Core)</td></tr><tr><td>マシンタイプ</td><td>e2-micro（vCPU x 2、メモリ 1 GB）</td></tr><tr><td>ゾーン</td><td>asia-northeast1-a</td></tr><tr><td>アプリケーション</td><td>WordPress 5.5.3</td></tr></tbody></table><p>AWSへ移行後、Wordpressにアクセスするまでを実践します。<br><img src="/images/20201120/GCE-Info(Care).jpg" alt=""><br><img src="/images/20201120/GCE-WordPress%E7%94%BB%E9%9D%A2.png" alt=""></p><h1 id="作業の流れ"><a href="#作業の流れ" class="headerlink" title="作業の流れ"></a>作業の流れ</h1><p>以下の流れで作業を実施します。</p><ol><li>要件の確認</li><li>CloudEnduereエージェントのインストール</li><li>データレプリケーション</li><li>ターゲットマシンの設定</li><li>ターゲットマシンの起動<ol><li>テストモード<ol><li>ターゲットマシン起動</li><li>起動後の設定修正</li></ol></li><li>カットオーバー<ol><li>ターゲットマシン起動</li><li>起動後の設定修正(テストモードと同じ内容のため、省略)</li></ol></li></ol></li><li>ターゲットマシンからエージェントのアンインストール</li></ol><h1 id="要件確認"><a href="#要件確認" class="headerlink" title="要件確認"></a>要件確認</h1><p>CloudEndureを利用する要件を満たしているか確認します。</p><h2 id="共通の要件確認"><a href="#共通の要件確認" class="headerlink" title="共通の要件確認"></a>共通の要件確認</h2><p>全OS共通で、以下の要件を満たしている必要があります。</p><table><thead><tr><th>項目</th><th>要件</th><th>備考</th></tr></thead><tbody><tr><td>仮想化タイプ</td><td>準仮想化タイプはサポート対象外</td><td></td></tr><tr><td>EBSのマルチアタッチ</td><td>EBSマルチアタッチ機能を使ったEC2インスタンスは、移行元のサーバーとしてサポート対象外</td><td>AWSからAWSへの移行を行う場合、確認が必要です。</td></tr></tbody></table><h3 id="仮想化タイプ"><a href="#仮想化タイプ" class="headerlink" title="仮想化タイプ"></a>仮想化タイプ</h3><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># lscpu | grep "Virtualization type"</span></span><br><span class="line">Virtualization <span class="built_in">type</span>:   full</span><br></pre></td></tr></table></figure><p>完全仮想化のため、OKです。</p><h3 id="EBSのマルチアタッチ"><a href="#EBSのマルチアタッチ" class="headerlink" title="EBSのマルチアタッチ"></a>EBSのマルチアタッチ</h3><p>今回は、GCEのため対象外。</p><h2 id="LinuxOS固有の要件確認"><a href="#LinuxOS固有の要件確認" class="headerlink" title="LinuxOS固有の要件確認"></a>LinuxOS固有の要件確認</h2><p>LinuxOSは、以下の要件を満たしている必要があります。</p><table><thead><tr><th>項目</th><th>要件</th><th>備考</th></tr></thead><tbody><tr><td>カーネルバージョン</td><td>2.6.18-164以前のカーネルバージョンはサポート対象外</td><td></td></tr><tr><td>Pythonバージョン</td><td>2.4以上、もしくは3.0以上</td><td>エージェントのインストールに必要です。</td></tr><tr><td>ブートローダー</td><td>GRUBのみサポート</td><td></td></tr><tr><td>ファイルシステム</td><td>root もしくは、bootがXFS5タイプのファイルシステムの場合、サポート対象外</td><td>xfsがNGなのか不明のため、今回検証してみようと思います。</td></tr></tbody></table><h3 id="カーネルバージョン確認"><a href="#カーネルバージョン確認" class="headerlink" title="カーネルバージョン確認"></a>カーネルバージョン確認</h3><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1127.19.1.el7.x86_64</span><br></pre></td></tr></table></figure><p>2.6.18-164以降のため、OKです。</p><h3 id="Pythonバージョン"><a href="#Pythonバージョン" class="headerlink" title="Pythonバージョン"></a>Pythonバージョン</h3><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># python --version</span></span><br><span class="line">Python 2.7.5</span><br></pre></td></tr></table></figure><p>2.4以上のため、OKです。</p><h3 id="ブートローダーの確認"><a href="#ブートローダーの確認" class="headerlink" title="ブートローダーの確認"></a>ブートローダーの確認</h3><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># ll /boot/grub2/grub.cfg </span></span><br><span class="line">-rw-r--r--. 1 root root 5323 Oct 13 05:43 /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure><p>ブートローダーはgrubのため、OKです。</p><h3 id="rootとbootのファイルシステム"><a href="#rootとbootのファイルシステム" class="headerlink" title="rootとbootのファイルシステム"></a>rootとbootのファイルシステム</h3><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># df -T</span></span><br><span class="line">Filesystem     Type     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs    498744       0    498744   0% /dev</span><br><span class="line">tmpfs          tmpfs       506876       0    506876   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs       506876    6900    499976   2% /run</span><br><span class="line">tmpfs          tmpfs       506876       0    506876   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda2      xfs       20754432 3063128  17691304  15% /</span><br><span class="line">/dev/sda1      vfat        204580   11440    193140   6% /boot/efi</span><br><span class="line">tmpfs          tmpfs       101376       0    101376   0% /run/user/997</span><br><span class="line">tmpfs          tmpfs       101376       0    101376   0% /run/user/1000</span><br></pre></td></tr></table></figure><p><code>/dev/sda2      xfs       20754432 3063128  17691304  15% /</code><br>Typeにxfsとありますが、NGとなるか検証したいと思います。</p><h2 id="CentOS固有の要件・注意点確認"><a href="#CentOS固有の要件・注意点確認" class="headerlink" title="CentOS固有の要件・注意点確認"></a>CentOS固有の要件・注意点確認</h2><p>最後に、CentOS固有の要件を確認します。<br><img src="/images/20201120/CentOS-Note.png" alt=""></p><p>引用元： <a href="https://docs.cloudendure.com/Content/Getting_Started_with_CloudEndure/Supported_Operating_Systems/Supported_Operating_Systems.htm" target="_blank" rel="noopener">Supported Operating Systems</a></p><p>Note３とNote４、Note７を見ろとあるので、確認します。</p><blockquote><p>Note 3: Nitro instances (for example, the C5 and M5 family types) will work with RHEL 7.0+ and CentOS 7.0+ in AWS in a Linux environment and with Windows Server 2008 R2, Windows Server 2012 R2, Windows Server 2016, and Windows Server 2019 in a Windows environment. Certain newer AWS regions only support Nitro instances and therefore only support the previously mentioned operating systems.</p></blockquote><p>Nitroインスタンスが利用できるOSの種類について記載されています。<br>今回はCentOS7のため、Nitroインスタンスの利用がサポートされています。</p><blockquote><p>Note 4: Kernel versions 2.6.32-71 is not supported in RHEL 6.0 and CentOS 6.0 in AWS.</p></blockquote><p>RHEL6.0/CentOS6.0のカーネルバージョンが「「2.6.32-71」の場合、サポート対象外です。<br>今回はCentOS7のため、無関係です。</p><blockquote><p>Note 7: A pre-requirement for installing the CloudEndure Agent on RHEL8 and CentOS 8 is first running the following:<br>sudo yum install elfutils-libelf-devel</p></blockquote><p>RHEL8.0/CentOS8.0の場合、<code>sudo yum install elfutils-libelf-devel</code>の実行が必要とあります。<br>今回はCentOS7のため、無関係です。</p><p>事前確認は以上です。<br>rootのファイルシステムがxfsなのが気になりますが、移行できるか検証してみたいと思います。</p><h1 id="CloudEndureエージェントインストール"><a href="#CloudEndureエージェントインストール" class="headerlink" title="CloudEndureエージェントインストール"></a>CloudEndureエージェントインストール</h1><p>実際にCloudEndure Migrationを利用した移行を開始します。</p><h2 id="エージェントのインストール手順"><a href="#エージェントのインストール手順" class="headerlink" title="エージェントのインストール手順"></a>エージェントのインストール手順</h2><p>マシンの登録がない初期は、CloudEndureコンソールの「Machines」に記載があります。<br>また、画面上部にある「MACHINE ACTIONS…」の「Add Machines」からも確認が可能です。<br>※インストール用のTokenは、アカウント固有の情報のため伏せています。<br><img src="/images/20201120/AgentInstall%E6%96%B9%E6%B3%95.jpg" alt=""></p><h3 id="エージェントのインストーラーを取得"><a href="#エージェントのインストーラーを取得" class="headerlink" title="エージェントのインストーラーを取得"></a>エージェントのインストーラーを取得</h3><p>以下のコマンドを実行して、CloudEndureエージェントのインストーラーを取得します。<br>※wgetは事前にインストールしておいてください。<br><code>wget -O ./installer_linux.py https://console.cloudendure.com/installer_linux.py</code></p><figure class="highlight bash"><figcaption><span>実行結果例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># wget -O ./installer_linux.py https://console.cloudendure.com/installer_linux.py</span></span><br><span class="line">--2020-11-05 14:20:04--  https://console.cloudendure.com/installer_linux.py</span><br><span class="line">Resolving console.cloudendure.com (console.cloudendure.com)... 52.72.172.158</span><br><span class="line">Connecting to console.cloudendure.com (console.cloudendure.com)|52.72.172.158|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 7659 (7.5K) [application/octet-stream]</span><br><span class="line">Saving to: ‘./installer_linux.py’</span><br><span class="line">100%[=========================================================================&gt;] 7,659       --.-K/s   <span class="keyword">in</span> 0s      </span><br><span class="line">2020-11-05 14:20:05 (1.17 GB/s) - ‘./installer_linux.py’ saved [7659/7659]</span><br></pre></td></tr></table></figure><p>実行時のログにもありますが、「console.cloudendure.com」を名前解決して、<br>IPアドレス「52.72.172.158」に接続しています。<br>これは、CloudEndure Service ManagerのIPアドレスです。</p><p>インストーラーが取得できない場合は、<a href="https://future-architect.github.io/articles/20201021/">導入編</a>にも記載していますが、<br>ネットワーク要件を満たしているか確認してください。</p><h3 id="エージェントのインストーラーを実行"><a href="#エージェントのインストーラーを実行" class="headerlink" title="エージェントのインストーラーを実行"></a>エージェントのインストーラーを実行</h3><p>以下のコマンドを実行して、インストーラーを実行します。<br>※${インストール用Token}は、書き換えてください。<br><code>sudo python ./installer_linux.py -t ${インストール用のToken} --no-prompt</code></p><figure class="highlight bash"><figcaption><span>実行結果例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># sudo python ./installer_linux.py -t XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX --no-prompt</span></span><br><span class="line">The installation of the CloudEndure Agent has started.</span><br><span class="line">Running the Agent Installer <span class="keyword">for</span> a 64 bit system...</span><br><span class="line">Connecting to CloudEndure Console... Finished.</span><br><span class="line">Identifying disks <span class="keyword">for</span> replication.</span><br><span class="line">Disk to replicate identified: /dev/sda of size 20.0 GiB</span><br><span class="line">All disks <span class="keyword">for</span> replication were successfully identified.</span><br><span class="line">Downloading CloudEndure Agent... Finished.</span><br><span class="line">Installing CloudEndure Agent... Finished.</span><br><span class="line">Adding the Source machine to CloudEndure Console... Finished.</span><br><span class="line">Instance ID: XXXXXXXXXXXXXXXXXXX.</span><br><span class="line">Installation finished successfully.</span><br></pre></td></tr></table></figure><p>デフォルトでは、エージェントのインストールが完了すると同時にデータのレプリケーションが開始されます。</p><p>複数台の移行元サーバーに対して、エージェントを同時にインストールする場合、<br>同時にレプリケーションが実行されるとネットワーク環境によっては、占有してしまう要因になります。</p><p>インストール完了直後にレプリケーションを開始させたくない場合は、<br>インストーラー実行時に<code>--no-replication</code>のオプションをつけることで防ぐことができます。</p><p><code>--no-replication</code>を使ってインストールが完了すると、CloudEnduereコンソールの「Machines」にマシンの登録のみ行われます。<br>レプリケーションを開始するには、「Machines」&gt; 「MACHINE ACTIONS」メニューから、「Start/resume Data Replication」をクリックすることで実施可能です。<br><img src="/images/20201120/DataReplicationStart.png" alt=""></p><h1 id="データのレプリケーション"><a href="#データのレプリケーション" class="headerlink" title="データのレプリケーション"></a>データのレプリケーション</h1><p>エージェントのインストール完了後、CloudEndureコンソールの「Machines」に登録され、レプリケーションが開始します。<br><img src="/images/20201120/Insrall%E7%9B%B4%E5%BE%8C.png" alt=""><br>また、AWSコンソールでは、レプリケーションサーバの起動が確認できます。※今回はt3.smallで起動<br><img src="/images/20201120/ReplicationServerStart.png" alt=""></p><p>登録されたマシンをクリックするとレプリケーションの状況が表示されます。<br>進捗状況は、パーセンテージと容量で表示されます。<br><img src="/images/20201120/Replication-8%.png" alt=""></p><p>補足ですが、登録されたマシン毎に、レプリケーションサーバーのスペックを変更することも可能です。<br>変更については「REPLICATION SETTINGS」から可能です。<br>今回は、レプリケーションサーバーのインスタンスタイプを「t3.medium」に変更してみます。<br><img src="/images/20201120/ReplicationSettings-Machines.png" alt=""></p><p>インスタンスタイプを変更して設定を保存すると、<br>指定したインスタンスタイプのレプリケーションサーバが起動されます。<br><img src="/images/20201120/AddReplicationServer.png" alt=""></p><p>変更後のレプリケーションサーバーの起動後、<br>変更前のインスタンスがレプリケーションで使用されていない場合、インスタンスは終了されます。</p><p>レプリケーションが完了すると以下のような画面が表示されます。<br><img src="/images/20201120/Replication-Finish.png" alt=""></p><p>ちなみに、インスタンスタイプがt3.small、EBSのボリュームタイプがStandardのレプリケーションサーバだと、レプリケーション完了まで約20分かかりました。また、インスタンスタイプがt3.medium、EBSのボリュームタイプがStandardのレプリケーションサーバだと、約17分でレプリケーションが完了しました。</p><p>レプリケーションの速さについては、以下のページに記載があります。</p><blockquote><p>The replication speed depends on 4 key factors:</p><p>The uplink speed from that server to the Replication Server and bandwidth available.<br>The overall disk storage.<br>The changes in the disk while it is replicating.<br>I/O speed of the storage itself.</p></blockquote><p>参考ページ：<a href="https://docs.cloudendure.com/#FAQ/Other_Troubleshooting_Topics/Understanding_Replication_Speed.htm?Highlight=Replication" target="_blank" rel="noopener">Understanding Replication Speed</a></p><p>レプリケーションの速さについては、<br>移行元サーバーからレプリケーションサーバーへの通信速度とその間の帯域幅や<br>ストレージのI/O速度等が影響するようです。</p><h1 id="ターゲットマシンの設定"><a href="#ターゲットマシンの設定" class="headerlink" title="ターゲットマシンの設定"></a>ターゲットマシンの設定</h1><p>データのレプリケーションが完了したら、ターゲットマシンの設定を行います。<br>登録されたマシンのページにある「BLUE PRINT」から設定を行います。<br><img src="/images/20201120/Machine-BLUE_PRINT.png" alt=""><br>AWSに移行後のEC2は、ここで設定した内容で起動されます。</p><p>EC2インスタンスを起動する際の設定項目と類似しているため、<br>設定する項目や値については、そこまで悩むことはないと思います。</p><table><thead><tr><th align="left">設定項目</th><th align="left">内容</th><th align="left">備考</th></tr></thead><tbody><tr><td align="left">MachineType</td><td align="left">EC２のインスタンスタイプを選択します。</td><td align="left"></td></tr><tr><td align="left">LaunchType</td><td align="left">オンデマンド、専有ホスト、専有インスタンスなど、起動するテナント属性を選択します。</td><td align="left"></td></tr><tr><td align="left">Subnet</td><td align="left">既存のサブネット、もしくは新しく作成するかを選択します。</td><td align="left"></td></tr><tr><td align="left">SecurityGroups</td><td align="left">セキュリティグループを設定します。新規に作成することも可能です。</td><td align="left">新規作成の場合、ポート80、443、22、および3389が許可されます。本番として起動する場合は、事前に作成したものを設定してください。</td></tr><tr><td align="left">PrivateIP</td><td align="left">プライベートIPアドレスを設定します。デフォルトでは、新規にプライベートIPが作成されます。</td><td align="left">起動するサブネット内の範囲であれば、特定のプライベートIPアドレスを明示的に設定することも可能です。</td></tr><tr><td align="left">Elastic IP</td><td align="left">Elastic IPアドレスを使用するか選択します。</td><td align="left">Create Newを選択することで、新規にElasticIPアドレスを作成することが可能です</td></tr><tr><td align="left">PublicIP(ephemeral)</td><td align="left">パブリックIPを使用するかどうかを選択します。</td><td align="left">サブネット構成に従ってパブリックIPを使用するオプションもあります。これは、ElasticIPの設定がnoneの場合にのみ適用されます。</td></tr><tr><td align="left">PlacementGroup</td><td align="left">プレイスメントグループを設定します。</td><td align="left">この項目はオプションです。</td></tr><tr><td align="left">IAMRole</td><td align="left">IAMRoleを設定します。</td><td align="left"></td></tr><tr><td align="left">Use Existing Instance ID</td><td align="left">既に作成済みのEC2インスタンスを選択します。</td><td align="left">この項目はオプションです。ほとんどのユースケースで使用しない項目です。</td></tr><tr><td align="left">Initial Target Instance State</td><td align="left">ターゲットマシンを起動した状態にするか、停止した状態にするか設定します。</td><td align="left"></td></tr><tr><td align="left">Tags</td><td align="left">ターゲットマシンのタグを設定します。</td><td align="left">この項目はオプションです。</td></tr><tr><td align="left">Disks</td><td align="left">ディスクタイプを選択します。Standard、SSD、またはProvisioned SSDを選択できます。</td><td align="left"></td></tr></tbody></table><p>参考ページ：<a href="https://docs.cloudendure.com/#Configuring_and_Running_Migration/Configuring_the_Target_Machine_Blueprint/Configuring_the_Target_Machine_Blueprint.htm#Configuring_a_Machine' target="_blank" rel="noopener"s_Blueprint_..61%3FTocPath%3DNavigation%7CConfiguring%2520and%2520Running%2520Migration%7CConfiguring%2520the%2520Target%2520Machine%2520Blueprint%7CConfiguring%2520a%2520Machine's%2520Blueprint%7C_____0">Configuring the Target Machine Blueprint</a></p><p>今回は、以下のように設定しました。</p><table><thead><tr><th align="left">設定項目</th><th align="left">設定値</th><th align="left">備考</th></tr></thead><tbody><tr><td align="left">MachineType</td><td align="left">t3.micro</td><td align="left"></td></tr><tr><td align="left">LaunchType</td><td align="left">On demand</td><td align="left"></td></tr><tr><td align="left">Subnet</td><td align="left">事前に作成したパブリックサブネット</td><td align="left"></td></tr><tr><td align="left">SecurityGroups</td><td align="left">Create New</td><td align="left"></td></tr><tr><td align="left">PrivateIP</td><td align="left">Create New</td><td align="left"></td></tr><tr><td align="left">Elastic IP</td><td align="left">None</td><td align="left"></td></tr><tr><td align="left">PublicIP(ephemeral)</td><td align="left">Yes</td><td align="left"></td></tr><tr><td align="left">PlacementGroup</td><td align="left">設定なし</td><td align="left"></td></tr><tr><td align="left">IAMRole</td><td align="left">設定なし</td><td align="left"></td></tr><tr><td align="left">Use Existing Instance ID</td><td align="left">設定なし</td><td align="left"></td></tr><tr><td align="left">Initial Target Instance State</td><td align="left">Started</td><td align="left">起動した状態にします。</td></tr><tr><td align="left">Tags</td><td align="left">Key:Name,Value:TargetMachine</td><td align="left">この項目はオプションです。</td></tr><tr><td align="left">Disks</td><td align="left">SSD</td><td align="left">SSDの場合、gp2です、</td></tr></tbody></table><h1 id="ターゲットマシン起動"><a href="#ターゲットマシン起動" class="headerlink" title="ターゲットマシン起動"></a>ターゲットマシン起動</h1><p>ターゲットマシンの起動は、テストモードとカットオーバーの2種類あります。</p><h2 id="テストモード"><a href="#テストモード" class="headerlink" title="テストモード"></a>テストモード</h2><p>テストモードでは、AWS環境で適切に起動できるかの検証が可能です。<br>少なくとも、本番切り替えの1週間前には、実施することが推奨されています。<br>テストモードで起動後、SSHやRDPでログインし、正しく起動できているか検証します。</p><h3 id="ターゲットマシン起動-1"><a href="#ターゲットマシン起動-1" class="headerlink" title="ターゲットマシン起動"></a>ターゲットマシン起動</h3><p>実際にテストモードでターゲットマシンを起動してみます。</p><p>「LAUNCH TARGET MACHINE」から、「Test Mode」をクリックする。<br><img src="/images/20201120/CloudEndure%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB-Launch(TestMode).png" alt=""><br>「CONTINUE」をクリックすると、ターゲットマシンが起動されます。<br><img src="/images/20201120/LaunchTarget(TestMode)%E7%A2%BA%E8%AA%8D.png" alt=""></p><p>CloudEndureコンソールの「JobProgress」を確認すると、開始していることがわかります。<br><img src="/images/20201120/JobProgress_Start.png" alt=""></p><p>CloudEndureの裏の動きについては、AWSコンソールを観察してみます。</p><p>まず、コンバーターサーバーが起動されます。<br><img src="/images/20201120/ConverterServer%E8%B5%B7%E5%8B%95.png" alt=""></p><p>コンバーターサーバーは、ディスクの変換処理を担っています。<br>変換処理が終わるとすぐに終了されます。<br><img src="/images/20201120/ConverterServer%E7%B5%82%E4%BA%86.png" alt=""></p><p>コンバーターサーバーの終了後、ターゲットマシンが起動されます<br><img src="/images/20201120/TargetMachine(TestMode)%E8%B5%B7%E5%8B%95.png" alt=""></p><p>ターゲットマシンは、起動直後に停止されます。<br>よく見ると、1GBのストレージがアタッチされています。<br><img src="/images/20201120/TargetMachine(TestMode)%E5%81%9C%E6%AD%A21GB.png" alt=""></p><p>停止されると、1GBのストレージがデタッチされ、インスタンスの情報からは見れなくなります。<br><img src="/images/20201120/TargetMachine(TestMode)%E5%81%9C%E6%AD%A2%E3%83%87%E3%82%BF%E3%83%83%E3%83%81.png" alt=""></p><p>最後にレプリケーション済みのボリュームがアタッチされた状態でインスタンスが起動されて完了です。<br><img src="/images/20201120/TargetMachine(TestMode)%E8%B5%B7%E5%8B%95%E6%88%90%E5%8A%9F.png" alt=""></p><p>CloudEndureコンソールの「JobProgress」を確認すると、終了していることがわかります。<br><img src="/images/20201120/JobProgress_Finish.png" alt=""></p><p>テストモードで起動したターゲットマシンに、SSHログインしてみます。<br><img src="/images/20201120/TargetMachine(TestMode)%E6%88%90%E5%8A%9FGIP.png" alt=""></p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i key-pair.pem yamaki@18.179.11.231</span><br><span class="line">〜〜〜〜〜中略〜〜〜〜〜</span><br><span class="line">Last login: Wed Nov  4 11:30:13 2020 from xx-xx-xx-xx.xx.xx.xx.xx.jp</span><br><span class="line">[yamaki@ip-192-168-2-77 ~]$ sudo su -</span><br><span class="line">最終ログイン: 2020/11/04 (水) 11:31:05 JST日時 pts/0</span><br><span class="line">[root@ip-192-168-2-77 ~]<span class="comment"># curl inet-ip.info</span></span><br><span class="line">18.179.11.231</span><br><span class="line">[root@ip-192-168-2-77 ~]<span class="comment"># ifconfig</span></span><br><span class="line">ens5: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 9001</span><br><span class="line">        inet 192.168.2.77  netmask 255.255.255.192  broadcast 192.168.2.127</span><br><span class="line">        inet6 fe80::43f:37ff:feb1:c202  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 06:3f:37:b1:c2:02  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 24939  bytes 7232780 (6.8 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 20605  bytes 3369355 (3.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>SSHログインできました。<br>rootのファイルシステムが「xfs」でも、問題ないようです。</p><h3 id="起動後の設定修正"><a href="#起動後の設定修正" class="headerlink" title="起動後の設定修正"></a>起動後の設定修正</h3><p>SSHでログインできたので、WordPress接続に向けた設定修正を行います。</p><p>ログインした状態を見た感じ、ホスト名が変更されてますが、<br>今回はWordPressにアクセスするまでを目的としている為、修正しません。<br>必要に応じて修正してください。</p><p>続けて、WordPressの設定をEC2のグローバルIPアドレスに更新して、アクセスしてみます。</p><p>まず、WordPressのサイトURLをEC2のグローバルIPアドレスに変更します。</p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@ip-192-168-2-77 ~]<span class="comment"># mysql -u wordpress -p</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 20</span><br><span class="line">Server version: 5.5.65-MariaDB MariaDB Server</span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line">MariaDB [(none)]&gt; use wordpress</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [wordpress]&gt; select * from wp_options <span class="built_in">where</span> option_name = <span class="string">'siteurl'</span>;</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">| option_id | option_name | option_value                   | <span class="built_in">autoload</span> |</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">|         1 | siteurl     | http://35.221.65.176/wordpress | yes      |</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">MariaDB [wordpress]&gt; update wp_options <span class="built_in">set</span> option_value = <span class="string">'http://18.179.11.231/wordpress'</span> <span class="built_in">where</span> option_name = <span class="string">'siteurl'</span>;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line">MariaDB [wordpress]&gt; select * from wp_options <span class="built_in">where</span> option_name = <span class="string">'siteurl'</span>;</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">| option_id | option_name | option_value                   | <span class="built_in">autoload</span> |</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">|         1 | siteurl     | http://18.179.11.231/wordpress | yes      |</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>Apacheを再起動して、WordPressにアクセス/ログインしてみます。<br><img src="/images/20201120/EC2-WordPress%E7%94%BB%E9%9D%A2.png" alt=""></p><p>アクセスできました。</p><p>テストモードで起動後、実際にサーバーに入って設定の修正が可能です。<br>本番切り替え前に、設定変更が必要な箇所の整理等に利用できます。</p><h2 id="カットオーバー"><a href="#カットオーバー" class="headerlink" title="カットオーバー"></a>カットオーバー</h2><p>テストが完了したら、カットオーバーを実施します。<br>カットオーバーすると、テストモードで起動したインスタンスは終了されます。</p><h3 id="ターゲットマシン起動-2"><a href="#ターゲットマシン起動-2" class="headerlink" title="ターゲットマシン起動"></a>ターゲットマシン起動</h3><p>テストモードのインスタンスを起動したまま、<br>カットオーバーを実施してみます。</p><p>カットオーバーの方法も、テストモードと同じです。</p><p>「LAUNCH TARGET MACHINE」から、「Cutover」をクリックする。<br><img src="/images/20201120/Launch_Target(CutOver)start.png" alt=""></p><p>「CONTINUE」をクリックすると、ターゲットマシンが起動されます。<br><img src="/images/20201120/Launch_Target(CutOver)%E7%A2%BA%E8%AA%8D.png" alt=""></p><p>CloudEndureコンソールの「JobProgress」を確認すると、CutOverが開始されていることがわかります。<br><img src="/images/20201120/JobProgress_Start(CutOver).png" alt=""></p><p>AWSのコンソールを確認すると、テストモードで起動したEC2インスタンスが終了後されていることがわかります。<br><img src="/images/20201120/TestMode_Machine%E7%B5%82%E4%BA%86.png" alt=""><br>（後続の動作は、テストモードと同一であるため、省略します。）</p><p>カットオーバーが完了しました。<br><img src="/images/20201120/Launch_Target(CutOver)%E6%88%90%E5%8A%9F.png" alt=""></p><h3 id="起動後の設定修正-1"><a href="#起動後の設定修正-1" class="headerlink" title="起動後の設定修正"></a>起動後の設定修正</h3><p>テストモードと同じく、SSHでログインして、<br>WordPressの設定を変更したあと、アクセスしてみます。<br>(作業内容はテストモードと同一であるため、省略します。)<br><img src="/images/20201120/EC2_WordPress(CutOver).png" alt=""><br>アクセスできました。</p><h1 id="ターゲットマシンからエージェントのアンインストール"><a href="#ターゲットマシンからエージェントのアンインストール" class="headerlink" title="ターゲットマシンからエージェントのアンインストール"></a>ターゲットマシンからエージェントのアンインストール</h1><p>カットオーバー完了後は、CloudEndureエージェントは不要となります。<br>ターゲットマシンからアンインストールを行います。</p><h2 id="エージェントの停止"><a href="#エージェントの停止" class="headerlink" title="エージェントの停止"></a>エージェントの停止</h2><p>以下のコマンドをrootで実行して、エージェントを停止します。<br><code>/var/lib/cloudendure/stopAgent.sh</code></p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ /var/lib/cloudendure/stopAgent.sh</span><br><span class="line">Killing agent: 1569</span><br><span class="line">17818</span><br><span class="line">17819</span><br><span class="line">Killed Agent</span><br><span class="line">Killing tailer: 1566</span><br><span class="line">1668</span><br><span class="line">1670</span><br><span class="line">1672</span><br><span class="line">Killed Tailer</span><br><span class="line">Killing update_onprem_volumes: 1567</span><br><span class="line">1636</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">Killed update_onprem_volumes</span><br><span class="line">Killing run_linux_migration_scripts_periodically: 1568</span><br><span class="line">1635</span><br><span class="line">1637</span><br><span class="line">1640</span><br><span class="line">Killed run_linux_migration_scripts_periodically</span><br><span class="line">Killing tail: 1691</span><br><span class="line">Killed tail</span><br></pre></td></tr></table></figure><h2 id="インストール時の設定削除"><a href="#インストール時の設定削除" class="headerlink" title="インストール時の設定削除"></a>インストール時の設定削除</h2><p>以下のコマンドをrootで実行することで、起動設定などを削除できます。<br><code>/var/lib/cloudendure/install_agent --remove</code></p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ /var/lib/cloudendure/install_agent --remove</span><br><span class="line">--- installing new driver</span><br><span class="line">running: <span class="string">'which update-rc.d'</span></span><br><span class="line"><span class="built_in">which</span>: no update-rc.d <span class="keyword">in</span> (/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin)</span><br><span class="line">retcode: 256</span><br><span class="line">running: <span class="string">'which chkconfig'</span></span><br><span class="line">/sbin/chkconfig</span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'chkconfig --del ce-agent'</span></span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'chkconfig --del ce-convert'</span></span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'which systemctl'</span></span><br><span class="line">/bin/systemctl</span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'systemctl disable ce-agent.service'</span></span><br><span class="line">ce-agent.service is not a native service, redirecting to /sbin/chkconfig.</span><br><span class="line">Executing /sbin/chkconfig ce-agent off</span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'systemctl disable ce-convert.service'</span></span><br><span class="line">ce-convert.service is not a native service, redirecting to /sbin/chkconfig.</span><br><span class="line">Executing /sbin/chkconfig ce-convert off</span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'visudo -c -f /etc/tmpVciTv8'</span></span><br><span class="line">/etc/tmpVciTv8: parsed OK</span><br><span class="line">/etc/sudoers.d/google_sudoers: parsed OK</span><br><span class="line">retcode: 0</span><br></pre></td></tr></table></figure><p>あとは、インストーラーやCloudEndureのログファイルなど、適宜削除してください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>2回に分けて、CloudEndureについて、記述しました。<br>移行元のサーバーを起動したまま、サーバーをまるごと移行できるのが<br>CloudEndure Migrationの強みです。</p><p>CloudEndure自体の利用は無料のため、試してみてはいかがでしょうか。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://docs.cloudendure.com/CloudEndure%20Documentation.htm" target="_blank" rel="noopener">CloudEndureDocumentation</a></li><li><a href="https://dev.classmethod.jp/articles/planning-migration-cloudendure/" target="_blank" rel="noopener">[クラウド移行] CloudEndureを使ったEC2への移行を計画する前に考慮しておきたいポイント</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。&lt;br&gt;2020年1月中途入社、TIGの八巻です。&lt;/p&gt;
&lt;p&gt;前回記事「&lt;a href=&quot;https://f
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="移行ツール" scheme="https://future-architect.github.io/tags/%E7%A7%BB%E8%A1%8C%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
      <category term="CloudEndure" scheme="https://future-architect.github.io/tags/CloudEndure/"/>
    
  </entry>
  
  <entry>
    <title>PythonistaがGo言語に入門してみた</title>
    <link href="https://future-architect.github.io/articles/20201119/"/>
    <id>https://future-architect.github.io/articles/20201119/</id>
    <published>2020-11-18T15:00:00.000Z</published>
    <updated>2020-11-19T01:12:47.560Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201119/language-python.png" alt=""><br>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/" target="_blank" rel="noopener">Renée French</a>.</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。TIG DXユニット所属の村上です。2020年4月にフューチャーに新卒入社しました。</p><p>私の所属しているプロジェクトでは、Go言語を使ってWeb APIを構築しています。私は元々Pythonを主に書いていましたが、Go言語を書くのは初めてでした。そんな私がPythonからGo言語へ入門する際に、苦労した経験や発見を共有したいと思います！</p><h1 id="自分のITスキルセット"><a href="#自分のITスキルセット" class="headerlink" title="自分のITスキルセット"></a>自分のITスキルセット</h1><ul><li>プログラミング言語 : Python, Java, PHP, C, アセンブリ</li><li>データサイエンス : 確率統計, 機械学習（特に深層強化学習）</li><li>ハードウェア : コンピュータアーキテクチャ, 自作PC</li></ul><p>研究室に配属されてからは機械学習に没頭していました。</p><h1 id="PythonとGoの違い"><a href="#PythonとGoの違い" class="headerlink" title="PythonとGoの違い"></a>PythonとGoの違い</h1><p>始めに大まかな違いについて、PythonとGoを対比して見ていこうと思います。</p><table><thead><tr><th align="left">項目</th><th align="left">Python</th><th align="left">Go</th></tr></thead><tbody><tr><td align="left">言語仕様</td><td align="left">オブジェクト指向</td><td align="left">非オブジェクト指向</td></tr><tr><td align="left">型付け</td><td align="left">動的</td><td align="left">静的</td></tr><tr><td align="left">クラス</td><td align="left">有</td><td align="left">無</td></tr><tr><td align="left">ポインタ</td><td align="left">無</td><td align="left">有</td></tr><tr><td align="left">関数定義</td><td align="left">def</td><td align="left">func</td></tr><tr><td align="left">ブロック定義</td><td align="left">インデント</td><td align="left">{}</td></tr></tbody></table><p>私が初めて習得したプログラミング言語はCだったため、上記のGoにあってPythonにない仕様についてはスッと理解できました。Pythonしか書いたことが無かったらかなり苦労したかもしれません。</p><p>また、補足ですがPythonは動的型付け言語でありながらも、Python3以降は型ヒントという機能があります。これによってある程度型を明示することができます。</p><h1 id="PythonからGoに入門してハマったこと"><a href="#PythonからGoに入門してハマったこと" class="headerlink" title="PythonからGoに入門してハマったこと"></a>PythonからGoに入門してハマったこと</h1><p>本記事のメインコンテンツです。今後Go言語に入門する方の参考になれば幸いです。</p><h2 id="1-ファイルのどこにも定義されていない変数が使われている"><a href="#1-ファイルのどこにも定義されていない変数が使われている" class="headerlink" title="1. ファイルのどこにも定義されていない変数が使われている"></a>1. ファイルのどこにも定義されていない変数が使われている</h2><p>所属プロジェクトのGithubリポジトリにあるGoのプログラムを見た時、まず不思議に思ったことは、そのファイルのどこにも宣言されていない変数がシレっと使われているのを発見したことです。実際のものとは異なりますが、次のような状況でした。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypackage</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   a := b + c</span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>変数b, cがファイル内のどこにも定義されていません。なのにエラーにならないのです。</p><p>実はGoでは同じpackage内のファイルで宣言されている変数や構造体などを、そのpackageのファイル全体でそのまま使うことができるのです！上記の例で説明すると、同じ<code>mypackage</code>内の他のファイルの変数や構造体をそのまま使うことができます。</p><p>Pythonは他のファイルで宣言されている変数やクラスを参照するためには、そのファイルのimportが必要になります。この違いは想定外だったので、はじめはびっくりしました。</p><h2 id="2-Goにインスタンスメソッドは存在しない"><a href="#2-Goにインスタンスメソッドは存在しない" class="headerlink" title="2. Goにインスタンスメソッドは存在しない"></a>2. Goにインスタンスメソッドは存在しない</h2><p>当たり前ですが、オブジェクト指向型言語ではないGoにはインスタンスの概念はありません。しかし、次のようなGoコードを見てください。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := v.myfunc(b, c)</span><br></pre></td></tr></table></figure><p>Pythonistaはこのようなコードを見せられると、インスタンスvのインスタンスメソッドmyfuncを呼び出しているようにしか見えません。Goはオブジェクト指向型言語ではないので、vはインスタンスではないのですが、Pythonが抜けきっていない私はvのクラスを特定するために、インスタンス化されている部分を必死に探しました。しかし、vは構造体です。構造体にメソッドや関数の定義など存在しません。</p><p>これはレシーバと呼ばれるもので、vという構造体に対してmyfuncという関数を実行できるものです。さらに、myfuncは1で説明した通り、同じpackage内の任意のファイルに定義することができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Mystruct)</span> <span class="title">myfunc</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   ret := a + b + v.sum</span><br><span class="line">   <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように、vという構造体に対してのみ呼ぶことができる関数として定義され、vとmyfuncの引数を使って様々な処理を行うことができます。</p><h2 id="3-変数を宣言したら勝手に初期化される"><a href="#3-変数を宣言したら勝手に初期化される" class="headerlink" title="3. 変数を宣言したら勝手に初期化される"></a>3. 変数を宣言したら勝手に初期化される</h2><p>Pythonでは変数の<code>宣言</code>だけ行うことはできず、必ず初期値を指定して<code>初期化</code>する必要があります。しかし、Goでは<code>宣言</code>ができます。宣言だけ行うことは他の多くの言語でもできますが、宣言だけして値を代入せずに使っている部分を発見しました。次のようなコードです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !b &#123;</span><br><span class="line">  fmt.Print(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cを習得済みの私は焦りました。なぜならCでは変数を宣言した時点では、不定値が代入された状態になっているからです。なので上記のようなコードを見た瞬間、コードの動作に再現性が無いように見えました。</p><p>しかしGoでは変数を宣言した場合、デフォルトの初期値が勝手に代入される仕様になっています！</p><p>主要な型のデフォルト初期値は以下です。</p><table><thead><tr><th>型</th><th>初期値</th></tr></thead><tbody><tr><td>int</td><td>0</td></tr><tr><td>bool</td><td>false</td></tr><tr><td>float</td><td>0.0</td></tr><tr><td>string</td><td>“”</td></tr><tr><td>ポインタ</td><td>nil</td></tr></tbody></table><p>このため、上記のコードでは0が出力されます。</p><h2 id="4-bool値が微妙に違う"><a href="#4-bool値が微妙に違う" class="headerlink" title="4. bool値が微妙に違う"></a>4. bool値が微妙に違う</h2><p>PythonからGoに入門する際に、最も大きな壁はここと言っても過言ではないかもしれません。</p><p>Pythonにおけるbool値は<code>True</code>, <code>False</code>です。しかし、Goは<code>true</code>, <code>false</code>なんです。Goに入門してしばらく経ちますが、未だに<code>True</code>, <code>False</code>と書いてしまいます…最近では逆にPythonで<code>true</code>, <code>false</code>と書いてしまうことも…</p><p>早く慣れたいです（泣）</p><h2 id="5-配列に対するappendの仕方が微妙に違う"><a href="#5-配列に対するappendの仕方が微妙に違う" class="headerlink" title="5. 配列に対するappendの仕方が微妙に違う"></a>5. 配列に対するappendの仕方が微妙に違う</h2><p>Pythonでは配列（リスト）に対して要素を追加する際に、<code>append</code>というメソッドを使います。使い方は次のような感じです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">a.append(<span class="string">"apple"</span>)</span><br></pre></td></tr></table></figure><p>一方Goでは、可変長配列（スライス）というものがあり、同じように<code>append</code>を使って要素を追加できるのですが、使い方が微妙に違います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">string</span></span><br><span class="line">a = <span class="built_in">append</span>(a, <span class="string">"apple"</span>)</span><br></pre></td></tr></table></figure><p>こちらも使い方がごちゃごちゃにならないように気を付けたいですね。</p><h2 id="6-変数の頭文字が大文字と小文字で意味が変わる"><a href="#6-変数の頭文字が大文字と小文字で意味が変わる" class="headerlink" title="6. 変数の頭文字が大文字と小文字で意味が変わる"></a>6. 変数の頭文字が大文字と小文字で意味が変わる</h2><p>Pythonの場合、変数名や関数名が大文字だろうが小文字だろうが動作に関係ありません。しかし、Goでは変数名や関数名、その他もろもろの頭文字が大文字か小文字かによって、動作が異なります！</p><p><a href="http://golang.jp/go_tutorial#index08" target="_blank" rel="noopener">golang.jp</a>に次のような記述があります。</p><blockquote><p>Go言語の情報の可視性についてのルールは単純です。名前(トップレベルの型名、関数名、メソッド名、定数名、変数名、構造体のフィールドおよびメソッド名)の先頭一文字が大文字になっていれば、パッケージの利用者側から参照可能となります。すなわち大文字にしなければ、それが定義されているパッケージ内からしか参照できません。</p></blockquote><p>つまり、Javaでいうところのprivateやpublicのような概念を、頭文字の大小で制御しています。実はこの仕様、気を付けないと危ない場面があります。例えばjsonをUnmarshalする時です。</p><p>Goでは次のように、構造体に対してjsonの中身を簡単に展開することができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"encoding/json"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PC <span class="keyword">struct</span> &#123;</span><br><span class="line">   Cpu    <span class="keyword">string</span> <span class="string">`json:"cpu"`</span></span><br><span class="line">   Gpu    <span class="keyword">string</span> <span class="string">`json:"gpu"`</span></span><br><span class="line">   Memory <span class="keyword">int</span>    <span class="string">`json:"memory"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   spec := <span class="string">`&#123;"cpu":"6700K", "gpu":"2080Ti", "memory":16&#125;`</span></span><br><span class="line">   p := <span class="built_in">new</span>(PC)</span><br><span class="line">   _ = json.Unmarshal([]<span class="keyword">byte</span>(spec), p)</span><br><span class="line">   fmt.Printf(<span class="string">"%+v"</span>, p)</span><br><span class="line">   <span class="comment">// =&gt; &amp;&#123;Cpu:6700K Gpu:2080Ti Memory:16&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし、次のように構造体のフィールド名の頭文字を小文字にすると、外部パッケージから参照できなくなるため、3で説明した初期値になってしまいます。<br>ここを間違えると意図しない動作になってしまうので、気を付けたいところです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"encoding/json"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PC <span class="keyword">struct</span> &#123;</span><br><span class="line">   cpu    <span class="keyword">string</span> <span class="string">`json:"cpu"`</span></span><br><span class="line">   gpu    <span class="keyword">string</span> <span class="string">`json:"gpu"`</span></span><br><span class="line">   memory <span class="keyword">int</span>    <span class="string">`json:"memory"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   spec := <span class="string">`&#123;"cpu":"6700K", "gpu":"2080Ti", "memory":16&#125;`</span></span><br><span class="line">   p := <span class="built_in">new</span>(PC)</span><br><span class="line">   _ = json.Unmarshal([]<span class="keyword">byte</span>(spec), p)</span><br><span class="line">   fmt.Printf(<span class="string">"%+v"</span>, p)</span><br><span class="line">   <span class="comment">// =&gt; &amp;&#123;cpu: gpu: memory:0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><p><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a> という記事が非常に参考になります。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はPythonをメインで触ってきた私がGoに入門して、躓いたことや苦労した部分をまとめてみました。</p><p>他にも、変数の後ろに型を書いて宣言するなど、Goには割と独特な仕様が多い印象です。</p><p>自分と同じように、これからGoを始める人の参考になれば幸いです！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201119/language-python.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;The Gopher character is based on the Go mascot designed by &lt;a href=&quot;http://ren
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
  </entry>
  
  <entry>
    <title>AWS S3をIP制限付きのファイルダウンロードリンクにする</title>
    <link href="https://future-architect.github.io/articles/20201118/"/>
    <id>https://future-architect.github.io/articles/20201118/</id>
    <published>2020-11-17T15:00:00.000Z</published>
    <updated>2020-11-18T13:44:36.366Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>S3としてお馴染みの、Amazon Simple Storage Serviceは皆さんご存じだと思います。「シンプル」の命名とは裏腹に、静的サイトホスティングをS3で行ったりといった様々な利用形態が存在します。</p><p>また、アセットファイルの配置場所やSSL通信の証明書ストアとして何らかのサービスと組み合わせるような利用形態が多いサービスではないでしょうか。そんなS3を極々シンプルなファイル配布装置として使うノウハウは一周回って無くなっているな、と感じました。</p><p>つまりブラウザで任意のURLにアクセスすると、zipファイル等配布物をダウンロードできるような状態にすることが本記事で説明している内容です。</p><h2 id="S3バケットを作成する"><a href="#S3バケットを作成する" class="headerlink" title="S3バケットを作成する"></a>S3バケットを作成する</h2><p>まずは基本的なおさらいとして、S3バケットの作り方から説明します。</p><p>AWSコンソールにログインし、サービスからS3を選択します。<br><img src="/images/20201118/image.png" alt=""></p><p>バケットを作成をクリックし、任意の名称のS3バケットを作成します。<br>今回はsample-downloadにしました。<br>リージョンは何でもよいですがアジアパシフィック (東京) ap-northeast-1を選択するのが定番ですね。<br><img src="/images/20201118/image_2.png" alt=""></p><p>そのままバケットを作成ボタンをクリックして、デフォルト設定のバケットを作成できます。<br><img src="/images/20201118/image_3.png" alt=""></p><h2 id="S3バケットにファイルをアップロードする"><a href="#S3バケットにファイルをアップロードする" class="headerlink" title="S3バケットにファイルをアップロードする"></a>S3バケットにファイルをアップロードする</h2><p>作成したバケット名をクリックすることでS3の設定、ファイルの管理を行うメニューが表示されます。<br><img src="/images/20201118/image_4.png" alt=""></p><p>アップロードボタンでファイルをアップロードできます。<br>今回は試しにS3のアイコン画像をzipに圧縮したものをアップロードしてみます。<br><img src="/images/20201118/image_5.png" alt=""></p><p><img src="/images/20201118/image_6.png" alt=""></p><p>ファイルを追加、もしくはドラッグアンドドロップでアップロードできます。<br><img src="/images/20201118/image_7.png" alt=""><br>ストレージクラスの選択やサーバーサイド暗号化など選択項目がありますが、動作させる分にはデフォルト値で問題ありません。</p><p>強いて言うならバケットのバージョニングに関する同意にチェックをつけないとアップロードボタンを押してもエラーが表示されることが注意点です。<br><img src="/images/20201118/image_8.png" alt=""></p><p>アップロードボタンをクリックでファイルのアップロードは完了です。<br><img src="/images/20201118/image_9.png" alt=""></p><h2 id="アップロードしたファイルをダウンロード可能にする"><a href="#アップロードしたファイルをダウンロード可能にする" class="headerlink" title="アップロードしたファイルをダウンロード可能にする"></a>アップロードしたファイルをダウンロード可能にする</h2><p><img src="/images/20201118/image_10.png" alt=""><br>バケットの設定トップに戻ると先ほどのzipファイルが確認できます。</p><p><img src="/images/20201118/image_11.png" alt=""></p><p>ファイル名をクリックするとオブジェクトURLが確認できます。<br>しかし、このままではオブジェクトURLにブラウザでアクセスしてもzipファイルをダウンロードすることはできません。<br><img src="/images/20201118/image_12.png" alt=""><br>上記画像のようなエラーが表示されます。</p><p>バケットの設定でパブリックアクセスを許可する必要があります。</p><p><img src="/images/20201118/image_13.png" alt=""></p><p>設定画面のアクセス許可から、パブリックアクセスのブロックを解除します。<br><img src="/images/20201118/image_14.png" alt=""></p><p>編集するをクリックし、「パブリックアクセスを全てブロック」のチェックを解除します。<br><img src="/images/20201118/image_15.png" alt=""></p><p>この状態でアップロードしたzipファイルを確認すると、公開するボタンが押せるようになっています。<br><img src="/images/20201118/image_16.png" alt=""><br>公開ボタンをクリックしてから、オブジェクトURLにブラウザでアクセスすると、ファイルをダウンロードできるようになっています。</p><h2 id="アップロードしたファイルにIP制限をかける"><a href="#アップロードしたファイルにIP制限をかける" class="headerlink" title="アップロードしたファイルにIP制限をかける"></a>アップロードしたファイルにIP制限をかける</h2><p>さてこのままでは世界中のどこからアクセスしてもファイルをダウンロードできてしまいます。業務的にはIP制限である程度クローズドな状態にすることが求められると思います。そのような場合はバケットポリシーでIP制限をかけることが可能です。</p><p><img src="/images/20201118/image_17.png" alt=""></p><p>S3バケットの設定画面の、アクセス制限から、バケットポリシーを編集できます。<br>編集するボタンをクリックし、下記のようなポリシーを設定します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">    <span class="attr">"Id"</span>: <span class="string">"Policy20201101"</span>,</span><br><span class="line">    <span class="attr">"Statement"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Sid"</span>: <span class="string">"sampleS3ip"</span>,</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Deny"</span>,</span><br><span class="line">            <span class="attr">"Principal"</span>: <span class="string">"*"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: <span class="string">"s3:*"</span>,</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"arn:aws:s3:::バケット名/*"</span>,</span><br><span class="line">            <span class="attr">"Condition"</span>: &#123;</span><br><span class="line">                <span class="attr">"NotIpAddress"</span>: &#123;</span><br><span class="line">                    <span class="attr">"aws:SourceIp"</span>: [</span><br><span class="line">                        <span class="string">"許可するIPアドレス"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>バケットポリシーのIDは何でも良いですが、迷ったら<a href="https://awspolicygen.s3.amazonaws.com/policygen.html" target="_blank" rel="noopener">ポリシージェネレーター</a>を利用すると良いでしょう。<br><img src="/images/20201118/image_18.png" alt=""></p><p>このように設定しました。</p><p>ここで大事なことは、<code>&quot;Resource&quot;</code>に記載するS3バケットのarnの末尾に<code>/*</code>を記載、もしくはオブジェクトのパスを明記することです。上記のような書き方をしない場合、配置したzipファイルにはバケットポリシーが反映されず、変わらず許可していないIPアドレスでもダウンロードできる状態になってしまいます。</p><p>唯一のハマりどころと言っても過言ではなく、この記事で一番言いたいことはここです。</p><p><img src="/images/20201118/image_19.png" alt=""></p><p>この状態で自分のIPアドレスを許可するIPに含めないと、オブジェクトURLにブラウザでアクセスしても上記画像のような状態になります。</p><p>なお一度IPアドレス許可に含めてから、検証のため再度許可するIPアドレスから外すと、キャッシュが残るのかしばらくはダウンロードできる場合があります。<br>別ブラウザやGoogle Chromeのシークレットウインドウなどで挙動を確認すると良いでしょう。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>S3バケットでファイルのダウンロードをする為にはパブリックアクセスを許可する</li><li>IP制限はバケットポリシーで行う</li></ul><p>単純な事ではありますが、単純故にこのようなユースケースでの案内が無いなと感じる部分でした、誰かのお役に立てば幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;S3としてお馴染みの、Amazon Simple Storage Serviceは皆さんご存じだと思います。「シンプル」の命名とは裏腹に、静的サイトホスティングをS3で行ったりといった様々な利用形態が存在します。&lt;/p&gt;
&lt;p&gt;また、ア
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="S3" scheme="https://future-architect.github.io/tags/S3/"/>
    
  </entry>
  
  <entry>
    <title>Goのデバッグ環境 on VSCode</title>
    <link href="https://future-architect.github.io/articles/20201117/"/>
    <id>https://future-architect.github.io/articles/20201117/</id>
    <published>2020-11-16T15:00:00.000Z</published>
    <updated>2020-12-12T03:35:36.916Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201117/image.png" alt=""></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXユニットの富山です。</p><p>私の使用するテキストエディタはVim一択でしたが、最近はVSCodeに浮気気味です。（言わずもがな <a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim" target="_blank" rel="noopener">Vimプラグイン</a>は入れています）</p><p>今回はVSCodeでGo言語用のデバッグ環境をテーマします！</p><h1 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h1><p>前提条件:</p><ol><li>VSCodeがインストール済であること</li><li>Goがインストール済であること</li></ol><h2 id="Step-1：プラグインのインストール"><a href="#Step-1：プラグインのインストール" class="headerlink" title="Step 1：プラグインのインストール"></a>Step 1：プラグインのインストール</h2><p>Googleが公開しているVSCode用のGoプラグインである、<a href="https://marketplace.visualstudio.com/items?itemName=golang.Go" target="_blank" rel="noopener">Go for Visual Studio Code</a>をインストールします。（2020年6月に開発管理がMicrosoftからGoogleのGo開発チームへ移管されました）。<br><img src="/images/20201117/image_2.png" alt=""></p><p>インストールが終わったら、Goプラグインに必要な各種ツールをインストールしていきます。</p><ol><li>コマンドパレットを開く（Windows: <code>Ctrl + Shift</code> + <code>p</code> / Mac: <code>Command</code> + <code>Shift</code> + <code>p</code> ）</li><li><code>&gt;Go: Install/Update Tools</code> と入力する。</li><li>表示されるツールから任意のツールにチェックを入れる。<br><img src="/images/20201117/image_3.png" alt=""></li><li><code>OK</code> ボタンを押下</li></ol><p>VSCode上のターミナルに下記表示がされたら成功です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Tools environment: GOPATH=C:\Users\username\go</span><br><span class="line">Installing 16 tools at C:\Users\username\go\bin in module mode.</span><br><span class="line">  gocode</span><br><span class="line">  gopkgs</span><br><span class="line">  go-outline</span><br><span class="line">  go-symbols</span><br><span class="line">  guru</span><br><span class="line">  gorename</span><br><span class="line">  gotests</span><br><span class="line">  gomodifytags</span><br><span class="line">  impl</span><br><span class="line">  fillstruct</span><br><span class="line">  goplay</span><br><span class="line">  godoctor</span><br><span class="line">  dlv</span><br><span class="line">  gocode-gomod</span><br><span class="line">  godef</span><br><span class="line">  golint</span><br><span class="line"></span><br><span class="line">Installing github.com/mdempsky/gocode (C:\Users\username\go\bin\gocode.exe) SUCCEEDED</span><br><span class="line">Installing github.com/uudashr/gopkgs/v2/cmd/gopkgs (C:\Users\username\go\bin\gopkgs.exe) SUCCEEDED</span><br><span class="line">Installing github.com/ramya-rao-a/go-outline (C:\Users\username\go\bin\go-outline.exe) SUCCEEDED</span><br><span class="line">Installing github.com/acroca/go-symbols (C:\Users\username\go\bin\go-symbols.exe) SUCCEEDED</span><br><span class="line">Installing golang.org/x/tools/cmd/guru (C:\Users\username\go\bin\guru.exe) SUCCEEDED</span><br><span class="line">Installing golang.org/x/tools/cmd/gorename (C:\Users\username\go\bin\gorename.exe) SUCCEEDED</span><br><span class="line">Installing github.com/cweill/gotests/... (C:\Users\username\go\bin\gotests.exe) SUCCEEDED</span><br><span class="line">Installing github.com/fatih/gomodifytags (C:\Users\username\go\bin\gomodifytags.exe) SUCCEEDED</span><br><span class="line">Installing github.com/josharian/impl (C:\Users\username\go\bin\impl.exe) SUCCEEDED</span><br><span class="line">Installing github.com/davidrjenni/reftools/cmd/fillstruct (C:\Users\username\go\bin\fillstruct.exe) SUCCEEDED</span><br><span class="line">Installing github.com/haya14busa/goplay/cmd/goplay (C:\Users\username\go\bin\goplay.exe) SUCCEEDED</span><br><span class="line">Installing github.com/godoctor/godoctor (C:\Users\username\go\bin\godoctor.exe) SUCCEEDED</span><br><span class="line">Installing github.com/go-delve/delve/cmd/dlv (C:\Users\username\go\bin\dlv.exe) SUCCEEDED</span><br><span class="line">Installing github.com/stamblerre/gocode (C:\Users\username\go\bin\gocode-gomod.exe) SUCCEEDED</span><br><span class="line">Installing github.com/rogpeppe/godef (C:\Users\username\go\bin\godef.exe) SUCCEEDED</span><br><span class="line">Installing golang.org/x/lint/golint (C:\Users\username\go\bin\golint.exe) SUCCEEDED</span><br><span class="line"></span><br><span class="line">All tools successfully installed. You are ready to Go :).</span><br></pre></td></tr></table></figure><h3 id="Step-2：デバッガツール-delve-のインストール"><a href="#Step-2：デバッガツール-delve-のインストール" class="headerlink" title="Step 2：デバッガツール delve のインストール"></a>Step 2：デバッガツール <code>delve</code> のインストール</h3><p>今回はGoのデバッグツールである、<a href="https://github.com/derekparker/delve" target="_blank" rel="noopener">delve</a> を使用します。</p><blockquote><p>Step1-3.　表示されるツールから任意のツールにチェックを入れる。</p></blockquote><p>にて、 <code>dlv</code> にチェックを入れている場合、VSCode側でインストールを行ってくれるので、このステップは飛ばして大丈夫です。</p><p>インストールを行うために、下記コマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com/derekparker/delve/cmd/dlv</span><br></pre></td></tr></table></figure><p>インストールが完了したら、ターミナル上で <code>dlv</code> コマンドが実行できることを確認してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dlv version</span><br><span class="line">Delve Debugger</span><br><span class="line">Version: 1.5.0</span><br><span class="line">Build: <span class="variable">$Id</span>: ca5318932770ca063fc9885b4764c30bfaf8a199 $</span><br></pre></td></tr></table></figure><h1 id="使ってみた"><a href="#使ってみた" class="headerlink" title="使ってみた"></a>使ってみた</h1><p>それではVSCodeからデバッグを行ってみましょう。</p><p>手始めにVSCodeで簡単なGoプログラムを書いてみます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">msg := <span class="string">"hello world"</span></span><br><span class="line">fmt.Println(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="デバッグのセットアップ"><a href="#デバッグのセットアップ" class="headerlink" title="デバッグのセットアップ"></a>デバッグのセットアップ</h3><h4 id="launch-json-の作成"><a href="#launch-json-の作成" class="headerlink" title="launch.json の作成"></a><code>launch.json</code> の作成</h4><ol><li>VSCodeの <code>RUN</code> コンソール画面に移動</li><li><code>create a launch.json file.</code> を押下</li><li>VSCode中央上部に <code>Select Environment</code> と表示されるので、 <code>Go Dlv (Experimental)</code> を選択<br><img src="/images/20201117/image_4.png" alt=""></li></ol><p>上記 3終了後に <code>.vscode/launch.json</code> ファイルが生成されます。</p><p>デフォルトでは、<code>type</code>フィールドが <code>&quot;type&quot;: &quot;godlvdap&quot;</code> となっているので、<code>&quot;type&quot;: &quot;go&quot;</code> へ書き換えましょう。</p><figure class="highlight json"><figcaption><span>launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Launch"</span>,</span><br><span class="line">            <span class="comment">// "type": "godlvdap",</span></span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"go"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"mode"</span>: <span class="string">"auto"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">            <span class="attr">"env"</span>: &#123;&#125;,</span><br><span class="line">            <span class="attr">"args"</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに、単体テストのデバッグを行う場合は、下記のように設定します。</p><figure class="highlight"><figcaption><span>launch.json(一部抜粋)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"mode": "test",</span><br><span class="line">"args": [</span><br><span class="line">    "-test.v",</span><br><span class="line">    "-test.run",</span><br><span class="line">    <span class="string">"TestYourFunc"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><ol><li><code>args</code> に <code>-test.v</code> とすることで <code>verboseモード</code></li><li>テスト関数単位で実行する場合は <code>-test.run</code> と置き、対象とするテスト関数名を記載します（例だと <code>TestYourFunc</code>）</li></ol><p>今回は紹介しませんが、<code>launch.json</code> には他にも予約語の属性が存在するので、興味をお持ちの方は<a href="https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes" target="_blank" rel="noopener">こちら</a>をご参照ください。</p><h2 id="いざ、デバッグ"><a href="#いざ、デバッグ" class="headerlink" title="いざ、デバッグ"></a>いざ、デバッグ</h2><p>さぁ、実行してみましょう。</p><p>9行目にブレークポイントを設定してみます。（行番号の左側をクリックで設定）</p><p>赤丸が該当行左側に表示されたら、設定完了です。<br><img src="/images/20201117/image_5.png" alt=""></p><p>ブレークポイントの設定が終わったら、 <code>F5</code>キーで実行してみます。</p><p>RUNコンソールの<code>VARIABLES</code>部分にて、ブレークポイントで設定した行の変数の中身が確認できていますね。これは便利です。</p><p><img src="/images/20201117/image_6.png" alt=""><br>また、VSCode画面中央上部に表示されているパネルでContinueをはじめ、Restartなどの操作ができます。</p><h1 id="関連情報"><a href="#関連情報" class="headerlink" title="関連情報"></a>関連情報</h1><p>VSCodeのGo周りでは多賀さんの記事もオススメです。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201117/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20201117%2F&amp;key=eed90a27f7b47e9333aee373cceb6203&amp;iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>市川さんの記事のVSCodeの拡張機能の共有方法すると便利です。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200828/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200828%2F&amp;key=eed90a27f7b47e9333aee373cceb6203&amp;iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>これでデバッグ用にPrint文を埋め込んだままcommitしてしまう自分にオサラバです👋</p><p>デバッグ機能をフル活用して快適な開発ライフを。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201117/image.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
      <category term="デバッグ" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%90%E3%83%83%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Cast をはじめました</title>
    <link href="https://future-architect.github.io/articles/20201116/"/>
    <id>https://future-architect.github.io/articles/20201116/</id>
    <published>2020-11-15T15:00:00.000Z</published>
    <updated>2020-11-18T00:09:25.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。技術ブログ運営の真野です。</p><p>この度、フューチャー技術ブログから派生して、<a href="https://anchor.fm/futuretechcast" target="_blank" rel="noopener">Future Tech Cast</a> という名前でポッドキャストを始めましたのでご報告です。</p><p><img src="/images/20201116/top.png" alt=""></p><p>▼Future Tech Cast<br><a href="https://anchor.fm/futuretechcast" target="_blank" rel="noopener">https://anchor.fm/futuretechcast</a></p><h1 id="ポッドキャストとは"><a href="#ポッドキャストとは" class="headerlink" title="ポッドキャストとは"></a>ポッドキャストとは</h1><blockquote><p>インターネット上で音声や動画のデータファイルを公開する方法の1つであり、オーディオやビデオでのウェブログ（ブログ）として位置付けられている。インターネットラジオ・インターネットテレビの一種である<br><a href="https://ja.wikipedia.org/wiki/ポッドキャスト" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/ポッドキャスト</a></p></blockquote><p>ポッドキャストはWikipediaにも載っている通り、テーマに基づいた対談などをインターネットで公開（ブロードキャスト）するところに由来しているそうです。定義としては動画を配信することもあるかと思いますが、Future Tech Castでは直近は音声のみを公開していこうと考えています。言ってしまえばラジオを録音したものを公開するイメージです。</p><p>なんとなくiPodやiPhoneなどのモバイルデバイスで聞くイメージがありますが、そういった縛りはなくPCでも聞くこともできます。</p><h1 id="なんで始めたのか"><a href="#なんで始めたのか" class="headerlink" title="なんで始めたのか"></a>なんで始めたのか</h1><p>理由の背景に技術ブログの運営が2名に増えて安定稼働してきて次の刺激が欲しかったということもありますが、<strong>様々な要因からリモートワークが推進される時代に、より適合して有益な情報をお届けしたい</strong>がありました。</p><p>フューチャーは以前からリアルイベントを多く開催しており、そこでフューチャー社員と話せて楽しかったといってくれる方も多くいました。現在ではリアルイベントを開催することが難しくなってきており、ウェビナーなどに移行しています。これはこれでピンチをチャンスに変えようという挑戦だと思います。すでにConpass上でも多くのイベントを開催していることがわかります。</p><ul><li><a href="https://future.connpass.com/" target="_blank" rel="noopener">https://future.connpass.com/</a></li></ul><p>一方、技術ブログは元からWebベースの配信だったこともあり特に新しい取り組みは行えていませんでした。上記のようなリモート勉強会の開催もやりたいと思っています。それとは別に技術ブログのストック型であるという良さを活かしつつ、もう一歩進んでポッドキャストという形で少しでも情報発信ができれば良いなと考えています。収録を通してだれかに情報を伝えるということの大切さやテクニックを社員が学べるのも、１億総配信時代の世の中にあって面白いんじゃないでしょうか。テックキャストの影響で私もちょっと良いコンデンサマイクを買ってしまい、けれど顧客から思いもよらず高評価をもらいました。</p><p>また、昨今の情勢でリモートワークが増えてきましたこともあり（実際フューチャーだとほとんどがリモートワークです）、ポッドキャストなどの音声をBGMとして仕事をしている人が増えていると聞きました。そういったニーズを少しでも拾えればなと思っています。</p><h1 id="Future-Tech-Castの名前について"><a href="#Future-Tech-Castの名前について" class="headerlink" title="Future Tech Castの名前について"></a>Future Tech Castの名前について</h1><p>フューチャーのオウンメディアとしては採用チームが運営する<a href="https://note.future.co.jp/" target="_blank" rel="noopener">未来報</a>がありますが、技術ブログ側は特に名前を付けておらず、そのままフューチャー技術ブログと名乗っています。</p><p>ポッドキャストするときのチャネル名も、フューチャーFMやフューチャンネルなど色々案が出ましたが、技術ブログ側がFuture Tech Blogと呼ばれるのと対比しやすいこともあり、Future Tech Castを名前にしました。発案者は伊藤太斉さんです。</p><p>広義ではポッドキャストもブログの一種だと思いますが、内部ではテキストの方を「技術ブログ」、音声配信の方を「テックキャスト」と呼んで使い分けています。</p><h1 id="どういった内容を話すのか"><a href="#どういった内容を話すのか" class="headerlink" title="どういった内容を話すのか"></a>どういった内容を話すのか</h1><p>技術軸での対談をテーマに配信します。フューチャー社内で用いられている技術は様々ですので、レギュラーを固定して話すのは不可能です。そのため、ホスト役（1名）とゲスト役（1,2名）で、ホスト役がゲスト役に対して「最近のIoT領域で変化していることは何ですか？」といった質問を投げかけ、ゲスト側の考えていることを引き出すスタイルで回そうと考えています。ホスト役もゲスト役もある程度固定化はするかと思いますが、適時入れ替えていきます。</p><p>初回は <a href="https://www.onecareer.jp/events/20204" target="_blank" rel="noopener">しゃべくりフューチャー</a> というGoogle Meet（Zoom）でのトーク配信で実績多数な村田さんをパーソナリティに、書籍やOSSやカンファレンス登壇など<a href="https://engineer-lab.findy-code.io/why-i-write" target="_blank" rel="noopener">アウトプットが多彩な澁川さん</a>をゲストとしてお招きして、楽しい技術トークに花を咲かせました。</p><p>その他として、技術ブログの記事のサマリを数分分で要約したポッドキャストをまず聞いて、良さそうであれば本文を読むという人もいる(!!!)と聞きました。こうした様々な要望にも対応していく必要があるなと感じています。全ての技術ブログのポッドキャストを収録するのは大変なので、評判が良かった記事の著者に月何人かにサマリヤ書いた背景についてインタビューするといった形式を考えています。</p><p>ブログからテックキャストに興味を持ってもらったりその逆であったり、相互補完な関係を気づければ良いなと思います。</p><h1 id="第1回目の紹介"><a href="#第1回目の紹介" class="headerlink" title="第1回目の紹介"></a>第1回目の紹介</h1><p>記念すべき第1回目です。ゲスト澁川さん、パーソナリティ村田さんでお届けします。</p><p><a href="https://anchor.fm/futuretechcast/episodes/Real-World-HTTP-eme2hg" target="_blank" rel="noopener">https://anchor.fm/futuretechcast/episodes/Real-World-HTTP-eme2hg</a></p><p>以下のテーマです。大体35分程度ですが、それぞれのテーマに依存はないのでざっと気になるところを見てもらえればです。</p><ol><li>ITコンサルが実装することの意義(4:00)</li><li>SIerとITコンサル(6:55)</li><li>BtoBとBtoCの違い(8:30)</li><li>技術の選び方の違い(10:35)</li><li>社内フレームワークの話(14:45)</li><li>エンプラでの技術選定における堅さについて(16:30)</li><li>プロジェクトの長さ(18:25)</li><li>澁川さんの技術セット(19:45)</li><li>デスクトップGUIがWebに近づくとは？(21:50)</li><li>Go言語(27:45)</li><li>技術の学び方(30:15)</li><li>技術はどこから学べば良いのか(35:55)</li></ol><h1 id="配信時間"><a href="#配信時間" class="headerlink" title="配信時間"></a>配信時間</h1><p>大体の目安を45分程度として作成していきます。ポッドキャストという性質上、おそらく1.N倍速などで聞かれる方も多いと思いますので、昼休みにさらっと聞ける量にしたいと思っています。これは運用していく中で調整していこうと考えています。</p><p>また、技術ブログに投稿された記事の内容サマリが欲しいという要望には、5分程での収録を想定しています。</p><h1 id="公開頻度"><a href="#公開頻度" class="headerlink" title="公開頻度"></a>公開頻度</h1><p>月1,2回を想定しています。あまり数が多いと録音や編集やレビューが大変じゃない？ということからです。<br>面白いネタがあればもっと頻度を上げていくことも考えていますので、SNSなどでフィードバックいただけると助かります。ドンドン社内の有益なネタは公開していければと考えています。</p><h1 id="利用媒体"><a href="#利用媒体" class="headerlink" title="利用媒体"></a>利用媒体</h1><p>現在はPodcast 配信アプリ<a href="https://anchor.fm/dashboard" target="_blank" rel="noopener">Anchor</a> を利用しています。利用してみてWeb上である程度収録内容の編集が行えるなど使い勝手が良かったからです。Podcast settings でページの説明文などを編集すると反映が遅い時があり、そこは少し操作性にクセがあるなと思っています。</p><h1 id="収録について"><a href="#収録について" class="headerlink" title="収録について"></a>収録について</h1><p>昨今の情勢だと対面で収録は難しいので、リモートで収録する必要があります。てっとり早くZoomの録音機能を用いて収録しています。</p><h1 id="機材について"><a href="#機材について" class="headerlink" title="機材について"></a>機材について</h1><p>人それぞれなのでなんともですが、私は<a href="https://www.amazon.co.jp/dp/B07R5P3JBH/" target="_blank" rel="noopener">コンデンサーマイク</a>を購入しました。音楽配信ではないので重厚な機材は不要かと思いますが、マイクだけはPC備え付けではないものを購入する人が多い気がします。</p><h1 id="音声の編集"><a href="#音声の編集" class="headerlink" title="音声の編集"></a>音声の編集</h1><p>録音した生の音声データに対して、</p><ol><li>無駄な間をカット（余分な会話の間などを削除。削ると1割くらい短くなるようです）</li><li>ジングル・パーソナリティ・ゲストの音量バランス調整</li></ol><p>といった、かなり細かな調整を行っています。1は村田さんがZoomで収録後にiMovieで音声のみ抽出&amp;全編聞きながらノイズだったり要らない部分をカットして対応。2に関してはジングルを作ってくれた伊藤さんが、CUBASEという作曲編曲で使うツールを用いて対応していただきました。</p><p>パーソナリティの準備や収録の進め方のコツは、もっと回数を重ねてナレッジが溜まりましたら共有していこうと思います。</p><h1 id="ジングル"><a href="#ジングル" class="headerlink" title="ジングル"></a>ジングル</h1><p>入社半年で技術ブログに8記事を書いたり、<a href="https://future-architect.github.io/articles/20201013/">2020年秋にVue.jsのアプリケーションを作るなら、押さえておきたい5つのポイント</a>でバズらせたりと、質量ともにアウトプットがすごい伊藤雅彦さんにジングル<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>を作ってもらいました。<a href="https://future-architect.github.io/articles/20200613/">この記事</a>といい、みんな多芸ですごい。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>みなさまのお役に立てるような有益な情報をドンドン発信していきたいと思っています。</p><p>ブログ以外でも皆さまに会えることを楽しみにしています。今後は技術ブログ・ポッドキャスト共々、よろしくおねがいします。</p><p>社内の皆様、ポッドキャスト配信者、パーソナリティ、運営してくれる方を募集しています。気軽に真野・伊藤太斉までDMください。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">ジングル（jingle）とは、ラジオ番組などで開始や終了などに挿入される短い音楽などの総称です。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。技術ブログ運営の真野です。&lt;/p&gt;
&lt;p&gt;この度、フューチャー技術ブログから派生して、&lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
      <category term="TechCast" scheme="https://future-architect.github.io/tags/TechCast/"/>
    
  </entry>
  
  <entry>
    <title>LocalStackに向けてTerraformを実行する</title>
    <link href="https://future-architect.github.io/articles/20201113/"/>
    <id>https://future-architect.github.io/articles/20201113/</id>
    <published>2020-11-12T15:00:00.000Z</published>
    <updated>2020-11-16T01:35:24.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャーの棚井龍之介です。TIGグループのDXユニットに所属しています。</p><p>TerraformはLocalstackに対してもapplyできます。便利な方法なのに日本語のサイトが見当たらないので、技術ブログ化しました。</p><h1 id="この記事を読むとできるようになること"><a href="#この記事を読むとできるようになること" class="headerlink" title="この記事を読むとできるようになること"></a>この記事を読むとできるようになること</h1><ul><li>ローカル環境に立ち上げた localstack に向けて、terraform plan/apply/destroy を実行できる</li></ul><h1 id="LocalStackとTerraform"><a href="#LocalStackとTerraform" class="headerlink" title="LocalStackとTerraform"></a>LocalStackとTerraform</h1><p>みなさんは、<a href="https://github.com/localstack/localstack" target="_blank" rel="noopener">Localstack</a> や <a href="https://www.terraform.io/" target="_blank" rel="noopener">Terraform</a> を使っていますか？</p><p>アプリのローカル環境テストとしてLocalstackを、インフラ構築にTerraformを用いる開発スタイルは、今やそう珍しいものではないと思います。</p><p>しかしながら、「ローカル環境のLocalStackに向けて、Terraformを打ち込むことができる」というのは、あまり知られていないようです。Googleで「localstack terraform」で検索しても、この方法を説明する日本語の入門記事は見つかりませんでした。docker-composeで立ち上げたlocalstackに向けて terraform apply を実行する方法が分かったら、開発環境の作り方や、E2Eテストの方法が広がると思いませんか？</p><p>以降の内容では、localstackの立ち上げ → terraform plan/apply実行 までを説明します。</p><h1 id="Localstackに向けて、Terraformを打つ"><a href="#Localstackに向けて、Terraformを打つ" class="headerlink" title="Localstackに向けて、Terraformを打つ"></a>Localstackに向けて、Terraformを打つ</h1><p>以下の流れで説明します。</p><ol start="0"><li>今回のディレクトリ構造</li><li>docker-composeでlocalstack立ち上げ</li><li>terraformファイルを編集</li><li>localstackにterraform plan/apply</li></ol><p>また、作業では <code>docker-compose</code> と <code>terraform</code> と <code>awscli</code> を利用しますが、これらのコマンドは各自で用意済みの前提とします。</p><p>ローカル完結の作業であるため、各コマンドの実行環境が揃っていれば、<strong>AWSアカウントの準備はもちろん不要</strong>です。</p><p>参考までに、私が本ブログの執筆時に利用したバージョンはこちらです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.27.4, build 40524192</span><br><span class="line"></span><br><span class="line">$ terraform --version</span><br><span class="line">Terraform v0.13.5</span><br><span class="line"></span><br><span class="line">$ aws --version</span><br><span class="line">aws-cli/1.18.166 Python/3.7.4 Darwin/19.6.0 botocore/1.19.6</span><br><span class="line"></span><br><span class="line">$ sw_vers -productName</span><br><span class="line">ProductName:Mac OS X</span><br></pre></td></tr></table></figure><h2 id="1-今回のディレクトリ構造"><a href="#1-今回のディレクトリ構造" class="headerlink" title="1. 今回のディレクトリ構造"></a>1. 今回のディレクトリ構造</h2><p>本記事は以下のディレクトリ構成での作業とします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sandbox/</span><br><span class="line">  ├ docker-compose.yml</span><br><span class="line">  ├ main.tf</span><br><span class="line">  ├ resources.tf</span><br><span class="line">  ├ hello.go</span><br><span class="line">  └ lambda.zip</span><br></pre></td></tr></table></figure><p>各ファイルは <code>$ touch &lt;filename&gt;</code> などを利用して生成してください、Lambdaの中身にまでは踏み込まないので、lambda.zip は 以下の hello.go を build &amp; zip化して生成お願いします</p><figure class="highlight go"><figcaption><span>hello.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello, world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build, zipコマンド</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ GOOS=linux GOARCH=amd64 go build -o hello</span><br><span class="line">$ zip lambda.zip hello</span><br></pre></td></tr></table></figure><p>以上で、作業前の準備は完了です。</p><h2 id="2-docker-composeでLocalstack立ち上げ"><a href="#2-docker-composeでLocalstack立ち上げ" class="headerlink" title="2. docker-composeでLocalstack立ち上げ"></a>2. docker-composeでLocalstack立ち上げ</h2><p>docker-compose.ymlを編集して、Localstackの定義を追加します。</p><p>Localstackの定義は、本家サイトの記述を参照しています。<br><a href="https://github.com/localstack/localstack/blob/master/docker-compose.yml" target="_blank" rel="noopener">https://github.com/localstack/localstack/blob/master/docker-compose.yml</a></p><figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">"$&#123;LOCALSTACK_DOCKER_NAME-localstack_main&#125;"</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack:0.12.1</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:4566:4566/tcp</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=$&#123;SERVICES-</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEBUG=$&#123;DEBUG-</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATA_DIR=$&#123;DATA_DIR-</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LAMBDA_EXECUTOR=$&#123;LAMBDA_EXECUTOR-</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KINESIS_ERROR_PROBABILITY=$&#123;KINESIS_ERROR_PROBABILITY-</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DOCKER_HOST=unix:///var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_TMP_FOLDER=$&#123;TMPDIR&#125;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"$&#123;TMPDIR:-/tmp/localstack&#125;:/tmp/localstack"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br></pre></td></tr></table></figure><p>yamlファイルに追記完了したら、localstackを立ち上げます。<br><code>$ docker-compose ps</code> で起動が確認できたら、localstack側の準備は完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose -f docker-compose.yml up -d localstack</span><br><span class="line">Creating localstack_main ... <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ docker-compose ps</span><br><span class="line">     Name               Command          State                                                        Ports                                                     </span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">localstack_main   docker-entrypoint.sh   Up      127.0.0.1:4566-&gt;4566/tcp, 4567/tcp, 4568/tcp, 4569/tcp, 4570/tcp, 4571/tcp, 4572/tcp, 4573/tcp, 4574/tcp,      </span><br><span class="line">                                                 4575/tcp, 4576/tcp, 4577/tcp, 4578/tcp, 4579/tcp, 4580/tcp, 4581/tcp, 4582/tcp, 4583/tcp, 4584/tcp, 4585/tcp,  </span><br><span class="line">                                                 4586/tcp, 4587/tcp, 4588/tcp, 4589/tcp, 4590/tcp, 4591/tcp, 4592/tcp, 4593/tcp, 4594/tcp, 4595/tcp, 4596/tcp,  </span><br><span class="line">                                                 4597/tcp, 8080/tcp</span><br></pre></td></tr></table></figure><h2 id="3-Terraformファイルを編集"><a href="#3-Terraformファイルを編集" class="headerlink" title="3. Terraformファイルを編集"></a>3. Terraformファイルを編集</h2><p>Terraform定義に、Localstackへplan,applyを打ち込むための設定を記入します。</p><figure class="highlight sh"><figcaption><span>terraform main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backend</span></span><br><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">"local"</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># provider</span></span><br><span class="line">provider <span class="string">"aws"</span> &#123;</span><br><span class="line">  region = <span class="string">"us-east-1"</span></span><br><span class="line"></span><br><span class="line">  access_key = <span class="string">"mock_access_key"</span></span><br><span class="line">  secret_key = <span class="string">"mock_secret_key"</span></span><br><span class="line"></span><br><span class="line">  s3_force_path_style         = <span class="literal">true</span></span><br><span class="line">  skip_credentials_validation = <span class="literal">true</span></span><br><span class="line">  skip_metadata_api_check     = <span class="literal">true</span></span><br><span class="line">  skip_requesting_account_id  = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  endpoints &#123;</span><br><span class="line">    iam      = <span class="string">"http://localhost:4566"</span></span><br><span class="line">    kinesis  = <span class="string">"http://localhost:4566"</span></span><br><span class="line">    lambda   = <span class="string">"http://localhost:4566"</span></span><br><span class="line">    s3       = <span class="string">"http://localhost:4566"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>providerは <code>aws</code> ですが、以下4つの引数をtrueに設定することで、terraformの向き先をローカル環境のMockに設定できます。</p><ul><li>s3_force_path_style</li><li>skip_credentials_validation</li><li>skip_metadata_api_check</li><li>skip_requesting_account_id</li></ul><p>また、ローカル完結作業のため、以下の引数は自由な値を入力して問題ありません。</p><ul><li>region（実在するregionに限る）</li><li>access_key</li><li>secret_key</li></ul><h3 id="endpointsについて"><a href="#endpointsについて" class="headerlink" title="endpointsについて"></a>endpointsについて</h3><p>providerがawsの場合、各awsサービスのendpointsをカスタマイズ可能です。endpointsの向き先を調整することにより、ローカル完結のterraform環境が実現可能という訳です。</p><p>localstackは <a href="https://github.com/localstack/localstack#announcements" target="_blank" rel="noopener">2020-09-15リリース</a> から </p><blockquote><p>all services are now exposed via the edge service (port 4566) only</p></blockquote><p>なので、endpointsのURLは全て <code>http://localhost:4566</code> になります。</p><p>各自でカスタマイズする場合は、terraform で apply 予定のリソース全てをendpoints定義に追加してください。利用可能なサービス一覧は、<a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/custom-service-endpoints#available-endpoint-customizations" target="_blank" rel="noopener">こちら</a> に掲載されています。</p><h3 id="本記事でLocalstackに構築するもの"><a href="#本記事でLocalstackに構築するもの" class="headerlink" title="本記事でLocalstackに構築するもの"></a>本記事でLocalstackに構築するもの</h3><p>backendとproviderの定義は完了したので、次は各種リソースを追加しましょう。本記事では、サーバレス構成でよくある「Kinesisでデータを受けて、Lambdaで取得し、S3に永続化」のインフラ環境を、Terraformを使ってLocalstack内に構築します。</p><p><img src="/images/20201113/Screen_Shot_2020-10-29_at_15.12.54.png" alt=""></p><p>上記構成をterraform定義するのに必要なresourceはこちらです</p><ul><li>aws_kinesis_stream</li><li>aws_lambda_event_source_mapping</li><li>aws_lambda_function</li><li>aws_iam_role</li><li>aws_iam_policy</li><li>aws_iam_role_policy_attachment</li><li>aws_s3_bucket</li></ul><p>Terraform自体の説明は本記事の目的ではないので、一気に追加します</p><figure class="highlight sh"><figcaption><span>terraform resources.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_kinesis_stream"</span> <span class="string">"local_stream"</span> &#123;</span><br><span class="line">  name             = <span class="string">"local-stream"</span></span><br><span class="line">  shard_count      = 1</span><br><span class="line">  retention_period = 168</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_lambda_event_source_mapping"</span> <span class="string">"local_mapping"</span> &#123;</span><br><span class="line">  event_source_arn                   = aws_kinesis_stream.local_stream.arn</span><br><span class="line">  function_name                      = aws_lambda_function.local_lambda.arn</span><br><span class="line">  starting_position                  = <span class="string">"LATEST"</span></span><br><span class="line">  maximum_retry_attempts             = 1</span><br><span class="line">  batch_size                         = 100</span><br><span class="line">  maximum_batching_window_in_seconds = 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_lambda_function"</span> <span class="string">"local_lambda"</span> &#123;</span><br><span class="line">  filename      = <span class="string">"lambda.zip"</span></span><br><span class="line">  function_name = <span class="string">"local-lambda"</span></span><br><span class="line">  role          = aws_iam_role.local_role.arn</span><br><span class="line">  handler       = <span class="string">"lambda"</span></span><br><span class="line">  runtime       = <span class="string">"go1.x"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_iam_role"</span> <span class="string">"local_role"</span> &#123;</span><br><span class="line">  name               = <span class="string">"local-role"</span></span><br><span class="line">  assume_role_policy = &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line"><span class="string">"Statement"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"Action"</span>: <span class="string">"sts:AssumeRole"</span>,</span><br><span class="line"><span class="string">"Principal"</span>: &#123;</span><br><span class="line"><span class="string">"Service"</span>: <span class="string">"lambda.amazonaws.com"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line"><span class="string">"Sid"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_iam_policy"</span> <span class="string">"local_policy"</span> &#123;</span><br><span class="line">  name   = <span class="string">"local-iam-policy"</span></span><br><span class="line">  policy = data.aws_iam_policy_document.local_policy_document.json</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">"aws_iam_policy_document"</span> <span class="string">"local_policy_document"</span> &#123;</span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = <span class="string">"Allow"</span></span><br><span class="line">    actions = [</span><br><span class="line">      <span class="string">"s3:GetObject"</span>,</span><br><span class="line">      <span class="string">"s3:ListBucket"</span>,</span><br><span class="line">      <span class="string">"s3:PutBucketNotification"</span>,</span><br><span class="line">      <span class="string">"s3:PutObject"</span>,</span><br><span class="line">      <span class="string">"s3:DeleteObject"</span>,</span><br><span class="line">    ]</span><br><span class="line">    resources = [<span class="string">"*"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = <span class="string">"Allow"</span></span><br><span class="line">    actions = [</span><br><span class="line">      <span class="string">"kinesis:DescribeStream"</span>,</span><br><span class="line">      <span class="string">"kinesis:GetShardIterator"</span>,</span><br><span class="line">      <span class="string">"kinesis:GetRecords"</span></span><br><span class="line">    ]</span><br><span class="line">    resources = [<span class="string">"*"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_iam_role_policy_attachment"</span> <span class="string">"local_poilcy_attachment"</span> &#123;</span><br><span class="line">  role       = aws_iam_role.local_role.name</span><br><span class="line">  policy_arn = aws_iam_policy.local_policy.arn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_s3_bucket"</span> <span class="string">"local_archive"</span> &#123;</span><br><span class="line">  bucket = <span class="string">"local-archive"</span></span><br><span class="line">  versioning &#123;</span><br><span class="line">    enabled = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上により、plan/apply の準備は完了です</p><h2 id="3-Localstackにterraform-plan-apply"><a href="#3-Localstackにterraform-plan-apply" class="headerlink" title="3. Localstackにterraform plan/apply"></a>3. Localstackにterraform plan/apply</h2><h3 id="まずは-terraform-init-から"><a href="#まずは-terraform-init-から" class="headerlink" title="まずは terraform init から"></a>まずは terraform init から</h3><p>新しいディレクトリでterraformを使う場合は、まずは <code>$ terraform init</code> して、backend と provider を設定します</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ terraform init</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Successfully configured the backend <span class="string">"local"</span>! Terraform will automatically</span><br><span class="line">use this backend unless the backend configuration changes.</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">(略)</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line">(略)</span><br></pre></td></tr></table></figure><p>terraform init が完了しました。</p><h2 id="Localstackに向けて、terraform-plan-を実行"><a href="#Localstackに向けて、terraform-plan-を実行" class="headerlink" title="Localstackに向けて、terraform plan を実行"></a>Localstackに向けて、terraform plan を実行</h2><p>Terraformの実行準備が完了したので、<code>$ terraform plan</code> を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan</span><br><span class="line">Refreshing Terraform state <span class="keyword">in</span>-memory prior to plan...</span><br><span class="line">The refreshed state will be used to calculate this plan, but will not be</span><br><span class="line">persisted to <span class="built_in">local</span> or remote state storage.</span><br><span class="line"></span><br><span class="line">data.aws_iam_policy_document.local_policy_document: Refreshing state...</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">An execution plan has been generated and is shown below.</span><br><span class="line">Resource actions are indicated with the following symbols:</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">(略)</span><br><span class="line"></span><br><span class="line">Plan: 7 to add, 0 to change, 0 to destroy.</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Note: You didn<span class="string">'t specify an "-out" parameter to save this plan, so Terraform</span></span><br><span class="line"><span class="string">can'</span>t guarantee that exactly these actions will be performed <span class="keyword">if</span></span><br><span class="line"><span class="string">"terraform apply"</span> is subsequently run.</span><br></pre></td></tr></table></figure><p>planも正しく実行できました。</p><h2 id="Localstackに向けて、terraform-apply-を実行"><a href="#Localstackに向けて、terraform-apply-を実行" class="headerlink" title="Localstackに向けて、terraform apply を実行"></a>Localstackに向けて、terraform apply を実行</h2><p><code>$ terraform apply</code><br>（なるべく短いログでapply状況を載せたかったので、–auto-approve を利用しています）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply --auto-approve</span><br><span class="line">data.aws_iam_policy_document.local_policy_document: Refreshing state...</span><br><span class="line">aws_iam_policy.local_policy: Creating...</span><br><span class="line">aws_kinesis_stream.local_stream: Creating...</span><br><span class="line">aws_iam_role.local_role: Creating...</span><br><span class="line">aws_s3_bucket.local_archive: Creating...</span><br><span class="line">aws_iam_role.local_role: Creation complete after 0s [id=<span class="built_in">local</span>-role]</span><br><span class="line">aws_lambda_function.local_lambda: Creating...</span><br><span class="line">aws_iam_policy.local_policy: Creation complete after 0s [id=arn:aws:iam::000000000000:policy/<span class="built_in">local</span>-iam-policy]</span><br><span class="line">aws_iam_role_policy_attachment.local_poilcy_attachment: Creating...</span><br><span class="line">aws_iam_role_policy_attachment.local_poilcy_attachment: Creation complete after 0s [id=<span class="built_in">local</span>-role-20201029145646394900000001]</span><br><span class="line">aws_s3_bucket.local_archive: Creation complete after 1s [id=<span class="built_in">local</span>-archive]</span><br><span class="line">aws_lambda_function.local_lambda: Creation complete after 6s [id=<span class="built_in">local</span>-lambda]</span><br><span class="line">aws_kinesis_stream.local_stream: Still creating... [10s elapsed]</span><br><span class="line">aws_kinesis_stream.local_stream: Still creating... [20s elapsed]</span><br><span class="line">aws_kinesis_stream.local_stream: Still creating... [30s elapsed]</span><br><span class="line">aws_kinesis_stream.local_stream: Creation complete after 30s [id=arn:aws:kinesis:us-east-1:000000000000:stream/<span class="built_in">local</span>-stream]</span><br><span class="line">aws_lambda_event_source_mapping.local_mapping: Creating...</span><br><span class="line">aws_lambda_event_source_mapping.local_mapping: Creation complete after 0s [id=7029d656-c97d-4256-90bf-a3eb38c50e93]</span><br><span class="line"></span><br><span class="line">Apply complete! Resources: 7 added, 0 changed, 0 destroyed.</span><br><span class="line"></span><br><span class="line">The state of your infrastructure has been saved to the path</span><br><span class="line">below. This state is required to modify and destroy your</span><br><span class="line">infrastructure, so keep it safe. To inspect the complete state</span><br><span class="line">use the `terraform show` <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">State path: terraform.tfstate</span><br></pre></td></tr></table></figure><blockquote><p>Apply complete! Resources: 7 added, 0 changed, 0 destroyed.</p></blockquote><p>apply成功です！</p><p>awscliを用いて、各リソースの追加を確認することもできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S3</span></span><br><span class="line">$ aws --endpoint-url http://localhost:4566 s3 ls</span><br><span class="line">2020-10-29 14:51:17 <span class="built_in">local</span>-archive</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kinesis</span></span><br><span class="line">$ aws --endpoint-url http://localhost:4566 kinesis list-streams</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"StreamNames"</span>: [</span><br><span class="line">        <span class="string">"local-stream"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lambda</span></span><br><span class="line">$ aws --endpoint-url http://localhost:4566 lambda list-functions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"Functions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"FunctionName"</span>: <span class="string">"local-lambda"</span>,</span><br><span class="line">            <span class="string">"FunctionArn"</span>: <span class="string">"arn:aws:lambda:us-east-1:000000000000:function:local-lambda"</span>,</span><br><span class="line">            <span class="string">"Runtime"</span>: <span class="string">"go1.x"</span>,</span><br><span class="line">            <span class="string">"Role"</span>: <span class="string">"arn:aws:iam::000000000000:role/local-role"</span>,</span><br><span class="line">            <span class="string">"Handler"</span>: <span class="string">"lambda"</span>,</span><br><span class="line">            <span class="string">"CodeSize"</span>: 1035298,</span><br><span class="line">            <span class="string">"Description"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Timeout"</span>: 3,</span><br><span class="line">            <span class="string">"MemorySize"</span>: 128,</span><br><span class="line">            <span class="string">"LastModified"</span>: <span class="string">"2020-10-29T14:56:46.405+0000"</span>,</span><br><span class="line">            <span class="string">"CodeSha256"</span>: <span class="string">"0rECD6MUpCBF7jIrzT53RTSjH0D1iTBTUd6t+FfP7is="</span>,</span><br><span class="line">            <span class="string">"Version"</span>: <span class="string">"<span class="variable">$LATEST</span>"</span>,</span><br><span class="line">            <span class="string">"VpcConfig"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"TracingConfig"</span>: &#123;</span><br><span class="line">                <span class="string">"Mode"</span>: <span class="string">"PassThrough"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"RevisionId"</span>: <span class="string">"3fc0da3d-eb5e-471a-9d26-c0a7b3f98d90"</span>,</span><br><span class="line">            <span class="string">"State"</span>: <span class="string">"Active"</span>,</span><br><span class="line">            <span class="string">"LastUpdateStatus"</span>: <span class="string">"Successful"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、ローカルに閉じた環境で、Terraformを好き放題使えますね！</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Localstackに向けてTerraformを実行する方法をご紹介しました。</p><p>この手法は何より <strong>AWSアカウントなしで実行可能</strong> なので、例えば…</p><ul><li>インフラ新規参入者向けのterraformコマンド練習環境として</li><li>社内規約でcredentialが発行できず、インフラタスクを振れないアルバイトさん向けの環境として</li><li>他人と絶対にconflictせず、好き勝手にdestroyできる自分だけの<strong>無料の環境</strong>として</li></ul><p>も利用可能です。</p><p>ここまで読んでいただいた皆様も、色々なリソースをterraformコマンドでLocalstackに構築してみてください！</p><h2 id="参照サイト"><a href="#参照サイト" class="headerlink" title="参照サイト"></a>参照サイト</h2><ul><li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/custom-service-endpoints#available-endpoint-customizations" target="_blank" rel="noopener">Terraform Registory Custom Service Endpoint Configuration</a></li><li><a href="https://www.hashicorp.com/resources/testing-infrastructure-as-code-on-localhost" target="_blank" rel="noopener">Testing Infrastructure as Code on Localhost</a></li><li><a href="https://spin.atomicobject.com/2020/02/03/localstack-terraform-circleci/" target="_blank" rel="noopener">LocalStack + Terraform + CircleCI for Lambda without AWS</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;フューチャーの棚井龍之介です。TIGグループのDXユニットに所属しています。&lt;/p&gt;
&lt;p&gt;TerraformはLocals
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
      <category term="LocalStack" scheme="https://future-architect.github.io/tags/LocalStack/"/>
    
  </entry>
  
</feed>
