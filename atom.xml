<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2022-03-09T01:34:32.539Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AWS Certified SysOps Administrator – Associate 合格体験記</title>
    <link href="https://future-architect.github.io/articles/20220309a/"/>
    <id>https://future-architect.github.io/articles/20220309a/</id>
    <published>2022-03-08T15:00:00.000Z</published>
    <updated>2022-03-09T01:34:32.539Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220309a/AWS-Certified_Sysops-Administrator_Associate_512x512.png" alt="" width="512" height="512"><p>お久しぶりです。2019年新卒入社筋肉エンジニアの渡邉光です。</p><p>前回の<a href="https://future-architect.github.io/articles/20210906a/">AWS Certified Developer - Associate 合格体験記</a>から結構時間がたってしまいましたが、時間的に余裕が出てきたのでAWS Certified SysOps Administrator – Associate (AWS SOA-C02) を受験してきました。無事合格できたので、Associate試験は3冠を達成することができました！</p><ul><li>AWS Certified Cloud Practitioner (AWS CLF)</li><li>AWS Certified Solutions Architect – Associate (AWS SAA)</li><li>AWS Certified Developer - Associate (AWS DVA)</li><li>AWS Certified SysOps Administrator – Associate (AWS SOA-C02) ★NEW!</li></ul><h1 id="AWS-Certified-SysOps-Administrator-–-Associate-AWS-SOA-C02-とは"><a href="#AWS-Certified-SysOps-Administrator-–-Associate-AWS-SOA-C02-とは" class="headerlink" title="AWS Certified SysOps Administrator – Associate (AWS SOA-C02)とは"></a>AWS Certified SysOps Administrator – Associate (AWS SOA-C02)とは</h1><p>AWS認定資格の一つで、AWSでのワークロードのデプロイ、管理、運用に関して問われる試験になっています。去年の7月27日にAWS SOAの試験形式が刷新されました。従来の択一選択問題、複数選択問題に加えて、<strong>試験ラボ（マネジメントコンソール操作）</strong> が追加されました。</p><p>試験ラボは、サンドボックス用のAWSアカウントを操作し表示されたシナリオ通りにマネジメントコンソールから設定を行っていく試験です。</p><p>試験ラボが追加になったことにより、試験時間も180分とかなりの長時間になっています。<br>※試験ガイドは<a href="https://d1.awsstatic.com/ja_JP/training-and-certification/docs-sysops-associate/AWS-Certified-SysOps-Administrator-Associate_Exam-Guide.pdf">こちら</a>で確認できます。</p><p>試験内容としては以下の分野について出題されます。</p><ul><li>モニタリング、ロギング、および修復</li><li>信頼性とビジネス継続性</li><li>デプロイ、プロビジョニング、およびオートメーション</li><li>セキュリティとコンプライアンス</li><li>ネットワークとコンテンツ配信</li><li>コストとパフォーマンスの最適化</li></ul><p>具体的には、organizationsを利用したアカウント管理、cloudwatchでのメトリクス監視、cloudformationでのAWSリソースのデプロイ方法、aws cost exploer、aws budgetsでのコスト管理等、multi azでの高可用性について問われます。</p><h1 id="学習方法"><a href="#学習方法" class="headerlink" title="学習方法"></a>学習方法</h1><h2 id="選択問題対策"><a href="#選択問題対策" class="headerlink" title="選択問題対策"></a>選択問題対策</h2><h3 id="学習サイト-aws-koiwaclub-com"><a href="#学習サイト-aws-koiwaclub-com" class="headerlink" title="学習サイト aws.koiwaclub.com"></a>学習サイト aws.koiwaclub.com</h3><p>安定のkoiwaclubさんのサイトを使用して、選択問題の対策は行いました。koiwaclubさんの合格体験記にも記載があるように、#50~#95を中心に二周問題を解きました。試験当日もkoiwaclubさんで解いた問題と同じような意図の問題が多く出題されたためすらっと回答することができたと思います。</p><h2 id="試験ラボ対策"><a href="#試験ラボ対策" class="headerlink" title="試験ラボ対策"></a>試験ラボ対策</h2><h3 id="AWS-hands-on-for-Beginners"><a href="#AWS-hands-on-for-Beginners" class="headerlink" title="AWS hands-on for Beginners"></a>AWS hands-on for Beginners</h3><p>試験ラボでは与えられたシナリオ通りにマネジメントコンソールからの設定を行っていく必要があるので、AWSが公式で提供している<a href="https://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-hands-on/?trk=aws_blog">AWS hands-on for Beginners</a>を利用して、普段なじみがないサービス等のキャッチアップやマネジメントコンソールの設定方法を学習していきました。AWS SOA-C02では、運用面でのサービスについて問われるため、運用系サービス代表のSystems Managerは以下のハンズオンを行い、サービスの概要とユースケース、設定方法等をキャッチアップしました。</p><p><a href="https://pages.awscloud.com/JAPAN-event-OE-Hands-on-for-Beginners-systems-manager-2022-reg-event.html?trk=aws_introduction_page">AWS Systems Managerを使ったサーバ管理はじめの一歩編</a></p><p>高可用性についても問われるため、<a href="https://pages.awscloud.com/event_JAPAN_Hands-on-for-Beginners-Scalable_LP.html?trk=aws_introduction_page">スケーラブルウェブサイト構築編</a>も行い、一般的な高可用性アーキテクチャについて学習しました。</p><h1 id="受験結果と感想"><a href="#受験結果と感想" class="headerlink" title="受験結果と感想"></a>受験結果と感想</h1><p>合格ライン720点に対して777点と予想より低い点数となってしまいましたが、無事合格することができました。</p><p>普段はterraformを使用してAWS環境構築を行っており、試験ラボのマネジメントコンソールから設定する形式に対応できるか不安だったので、試験範囲のサービスはマネジメントコンソールから設定できるようにAWS hands-on for Beginnersを利用したり、自分でアーキテクチャを考えてマネジメントコンソールから作成してみる等の対策を行いました。実際の試験ラボの結果も「コンピテンシーを満たしている」結果だったので、対策のおかげでハンズオンは余裕でした！</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>無事にAssociate三冠取得することができたので、今後はprofessional試験に挑戦していこうと思います。</p><p>伊藤真彦さんが<a href="/articles/20211112b/">AWS認定資格全冠された</a>のでAPN ALL AWS Certifications Engineersに表彰されます！おめでとうございます！</p><p>私も伊藤さん目指して頑張ります！！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220309a/AWS-Certified_Sysops-Administrator_Associate_512x512.png&quot; alt=&quot;&quot; width=&quot;512&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
    <category term="SysOpsアドミニストレーター" scheme="https://future-architect.github.io/tags/SysOps%E3%82%A2%E3%83%89%E3%83%9F%E3%83%8B%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>Project Haystackに関する備忘録</title>
    <link href="https://future-architect.github.io/articles/20220308a/"/>
    <id>https://future-architect.github.io/articles/20220308a/</id>
    <published>2022-03-07T15:00:00.000Z</published>
    <updated>2022-03-08T00:32:48.860Z</updated>
    
    <content type="html"><![CDATA[<p>最近、IoTに関するデータモデル標準化に用いられる <a href="https://project-haystack.org/">Project Haystack</a> について調べる機会があり、日本語でまとめられている文献が少なくて理解するのに若干苦労したため、備忘録も兼ねて調査した内容を簡単にまとめておきます。</p><p>Haystack の公式ドキュメントを読んだけどいまいち分からなかったという方がいれば参考にしていただけると幸いです。</p><h2 id="Project-Haystack-概要"><a href="#Project-Haystack-概要" class="headerlink" title="Project Haystack 概要"></a>Project Haystack 概要</h2><p>Project Haystack は、ファシリティ・機器などの IoT に関するデータモデルを標準化する取り組みです。<br>ビルシステムとそれに関連するデバイスのモデルを様々なツールで解釈できるようにするため、メタデータ定義の方法論と共通語彙を提供することをミッションとしています。</p><blockquote><p>We standardize semantic data models and web services with the goal of making it easier to unlock value from the vast quantity of data being generated by the smart devices that permeate our homes, buildings, factories, and cities.<br>Applications include automation, control, energy, HVAC, lighting, and other environmental systems.</p></blockquote><p>(Project Haystack 公式ページから抜粋)</p><h2 id="技術概要"><a href="#技術概要" class="headerlink" title="技術概要"></a>技術概要</h2><p>Haystackの技術概要をざっくり箇条書でまとめてみました。<br>エンティティとタグを使ってデータやデータ間の関係性を表現することがキモなようです。</p><ul><li>各機器や建物ごとに、それぞれ適した「エンティティ」（※1）と「タグ」（※2）を用いてデータモデルを標準化する。</li><li>建物は「site」、機器は「equip」、運転データは「point」エンティティを使用する。</li><li>エンティティ同士の関係性（どの機器がどの建物に設置されているかなど）も、タグによって表現する。</li><li>データモデルを標準化する際、site と equip エンティティではタグのみ付与されるが、point エンティティには実際の観測データが格納される。</li></ul><p>※1 エンティティ…実世界の物理オブジェクトを抽象化したもの（例: 建物、ヒーター、センサーなど）。<br>※2 タグ…エンティティに付与する情報。名前と値によって構成されており、タグによって値の型が異なる（例: 文字列型、参照型、真偽値型など）。</p><h2 id="エンティティごとの主なタグ"><a href="#エンティティごとの主なタグ" class="headerlink" title="エンティティごとの主なタグ"></a>エンティティごとの主なタグ</h2><p>エンティティごとのお主なタグを表にまとめました。<br>全てのエンティティは一意な id と dis(表示名) のタグを持っており、エンティティごとに固有のタグも存在するようです。<br>また、カスタムタグとして Haystack が標準で用意していないタグを作成することも可能なようです。</p><img src="/images/20220308a/タグ.png" alt="タグ" width="1200" height="565" loading="lazy"><h2 id="エンティティ間の関係性の表現"><a href="#エンティティ間の関係性の表現" class="headerlink" title="エンティティ間の関係性の表現"></a>エンティティ間の関係性の表現</h2><p>データモデルの例を図に示します。<br>Haystack ではエンティティ内に作成したタグによって、自身のエンティティの特性と他のエンティティとの関係性を示します。<br>例）Sample Electricity Meter は、equip, elec, meter タグにより 自身が equip の派生である elec-meterであることを示し、 site タグの中に Sample Site の id を記載することで、 Sample Site の中に設置されていることを示す。</p><img src="/images/20220308a/要素間の関連.png" alt="要素間の関連" width="1200" height="506" loading="lazy"><h2 id="Point-へのデータの格納"><a href="#Point-へのデータの格納" class="headerlink" title="Point へのデータの格納"></a>Point へのデータの格納</h2><p>エンティティのうち、Pointだけは実際の観測データを格納するなど、仕組みが複雑に感じたため Point へのデータの格納方法について箇条書きでまとめました。</p><ul><li>point には派生として現在状態を表す cur-point と過去状態を表す his-point が存在する。</li><li>cur-point は、スカラー値が入るcurValタグを持つ。</li><li>his-point は、timestamp と curVal のセットをローカルストレージに記録することで履歴を管理することができる。</li><li>equip と point は1対多の関係であり、1つの point が1つの値（温度、速度など）を表す。</li><li>point は他のエンティティと結合し、用途に応じた働きをするための新たなエンティティを形成する。<br>例）point に air, temp タグをつけることで、 point と air-temp が結合し、温度計が計測した温度を表すためのエンティティとなる。</li></ul><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>本記事を読んでくださった方の Haystack への理解向上に少しでも役立っていれば幸いです。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>Project Haystack 公式ドキュメント<br><a href="https://project-haystack.org/">https://project-haystack.org/</a></li><li>Project Haystack オープンソースデータモデル化標準に基づくビルシステムおよび機器のデータモデル化ガイド仕様<br><a href="https://marketing.project-haystack.org/images/documents/Project-Haystack-Guide-Specification-Japanese.pdf">https://marketing.project-haystack.org/images/documents/Project-Haystack-Guide-Specification-Japanese.pdf</a></li><li>Simplifying Data Collection and Analysis through Haystack<br><a href="https://assets.new.siemens.com/siemens/assets/api/uuid:60cc0b1f-c9df-4a44-8116-a834c994c7ff/us-si-pss-bp-sra-projecthaystack-whitepaper-sie-brand-redesign-0.pdf">https://assets.new.siemens.com/siemens/assets/api/uuid:60cc0b1f-c9df-4a44-8116-a834c994c7ff/us-si-pss-bp-sra-projecthaystack-whitepaper-sie-brand-redesign-0.pdf</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近、IoTに関するデータモデル標準化に用いられる &lt;a href=&quot;https://project-haystack.org/&quot;&gt;Project Haystack&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="データモデル" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB/"/>
    
    <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
    <category term="Haystack" scheme="https://future-architect.github.io/tags/Haystack/"/>
    
  </entry>
  
  <entry>
    <title>Pyright を LSP サーバとした自作 LSP クライアント（実装編）</title>
    <link href="https://future-architect.github.io/articles/20220303a/"/>
    <id>https://future-architect.github.io/articles/20220303a/</id>
    <published>2022-03-02T15:00:00.000Z</published>
    <updated>2022-03-02T13:00:18.563Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220303a/PyrightLarge.png" alt="" width="565" height="234"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Future でアルバイトをしている空閑と申します。本記事ではタイトルの通り、Pyright を LSP (Language Server Protocol) サーバとした自作クライアントを実装しますが、その前に経緯について説明します。本節では実装については触れません。</p><p>アルバイトの前は、Future のインターン Engineer Camp で Python のソースコード解析に取り組んでいました。そのときの様子は、<a href="/articles/20211019a/">Engineer Camp2021: Python の AST モジュールを使ってクラス構造を可視化する</a> で触れています。当時は Python の AST モジュールを活用する方針で、それ以外は自前で解析を行っていました。アルバイトでも引き続き解析に取り組んでいますが、次第に型推論などの技術が必要になってきており、全てを自前で実装することは困難な状況です。そこで現在は、既存のツールを拡張する方針を取っています。</p><p>ツールの候補としては、Mypy および Pyright が挙がりましたが、検討の結果（<a href="/articles/20220301a/">Mypy と Pyright の解析比較</a>）Pyright を拡張することにしています。Pyright は Pylance 上での実行を前提としているため、入力補完などで使う、型チェックにとどまらない情報を取得できることが理由の一つです。また、Pyright には LSP での実装が存在するため、これを利用することで、Pyright 本体の実装に手を加える必要がなく、システムを疎結合に保てます。</p><p>問題は、LSP クライアントをエディタ（主に VSCode）以外で実装するサンプルがほとんどないことです。解析ツールはコマンドラインで動作するようにしたいため、エディタ依存の機能は使えません。<a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/">LSP の仕様</a>は公開されているものの、詳細な手順については記載がありません。特に Pyright における初期化の手順は、実際の実装を追う必要があり苦戦しました。次節以降では、初期化の手順を含めた自作 LSP クライアントの実装方法を紹介します。</p><h1 id="自作-LSP-クライアントの作成"><a href="#自作-LSP-クライアントの作成" class="headerlink" title="自作 LSP クライアントの作成"></a>自作 LSP クライアントの作成</h1><h2 id="仕様"><a href="#仕様" class="headerlink" title="仕様"></a>仕様</h2><ul><li>解析対象：Python</li><li>LSP サーバ：Pyright</li><li>LSP クライアント：CLI（Node.js, TypeScript）</li><li>目標<ul><li>サーバ・クライアント間のメッセージ送受信</li><li>メッセージによる簡単な解析結果の取得</li></ul></li></ul><h2 id="最低限実装が必要なメッセージ"><a href="#最低限実装が必要なメッセージ" class="headerlink" title="最低限実装が必要なメッセージ"></a>最低限実装が必要なメッセージ</h2><ol><li><a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize">Initialize Request</a>：サーバの初期化を要求</li><li><a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialized">Initialized Notification</a>：クライアント側の初期化が完了したことを通知</li><li><a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_didChangeWorkspaceFolders">DidChangeWorkspaceFolders Notification</a>：ワークスペースフォルダの変更を通知</li></ol><p>詳しくは <a href="/articles/20220302a/">Pyright を LSP サーバとした自作 LSP クライアント（調査編）</a>を参照してください。</p><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><h2 id="サーバ起動・メッセージ受信"><a href="#サーバ起動・メッセージ受信" class="headerlink" title="サーバ起動・メッセージ受信"></a>サーバ起動・メッセージ受信</h2><p>LSP サーバのパスを指定し、子プロセスで起動します。Pyright のリポジトリをクローンした場合、サーバのパスは <code>pyright/packages/pyright/langserver.index.js</code> です。Pyright は実行時引数で通信方法を指定できます。<code>--node-ipc</code>、<code>--stdio</code>、<code>--socket=&#123;number&#125;</code> から選ぶことができますが、今回は <code>--node-ipc</code> を採用します。</p><p>接続を確立するために <a href="https://www.npmjs.com/package/vscode-jsonrpc"><code>vscode-jsonrpc</code></a> の <code>createMessageConnection</code> を使います。<code>vscode-jsonrpc</code> はメッセージプロトコルのライブラリで、今後もたびたび出てきます。<code>setup(connection)</code> ではメッセージハンドラを定義します。最初なのでとりあえず、<code>notification</code> と <code>error</code> メッセージが来た時に内容を出力することにします。</p><figure class="highlight typescript"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> child_process <span class="keyword">from</span> <span class="string">&#x27;child_process&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rpc <span class="keyword">from</span> <span class="string">&#x27;vscode-jsonrpc/node&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    connection.onUnhandledNotification(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;notification&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.onError(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> modulePath = path.resolve(<span class="string">&#x27;/path/to/langserver.index.js&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> childProcess = child_process.fork(modulePath, [<span class="string">&#x27;--node-ipc&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> connection = rpc.createMessageConnection(</span><br><span class="line">        <span class="keyword">new</span> rpc.IPCMessageReader(childProcess),</span><br><span class="line">        <span class="keyword">new</span> rpc.IPCMessageWriter(childProcess)</span><br><span class="line">    );</span><br><span class="line">    setup(connection);</span><br><span class="line">    connection.listen();</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>以上のコードを実際に実行すると、サーバが起動したことを通知するメッセージを <code>window/logMessage</code> メソッドで受信できます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">jsonrpc</span>: <span class="string">&#x27;2.0&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;window/logMessage&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;<span class="attr">type</span>: <span class="number">3</span>, <span class="attr">message</span>: <span class="string">&#x27;Pyright language server 1.1.182 starting&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Initialize-Request"><a href="#Initialize-Request" class="headerlink" title="Initialize Request"></a>Initialize Request</h2><p>今はまだ起動してメッセージを受信するだけのプログラムなので、今度はメッセージを送信してみます。仕様では最初に Initialize Request を送ることになっているので、これを実装します。サーバにリクエストを送る場合には <code>connection.sendRequest(type, params)</code> を使います。<code>type</code> はメソッドの種類、<code>params</code> はメソッド固有のパラメタになります。これらの型定義は <a href="https://www.npmjs.com/package/vscode-languageserver-protocol"><code>vscode-languageserver-protocol</code></a> にあるので、適当に参照します。</p><p><code>InitializeParams</code> にはいくつかのプロパティがありますが、最低限実装すべきは次の 4 つです。</p><ol><li><code>processId</code>（サーバの親プロセスの ID）</li><li><code>rootUri</code>（解析したいワークスペースのルート URI、適当でよいです）</li><li><code>capabilities</code>（クライアントが実装している機能、無いので空）</li><li><code>workspaceFolders</code>（解析したいワークスペースのフォルダ、とりあえず空）</li></ol><figure class="highlight ts"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> url <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lsp <span class="keyword">from</span> <span class="string">&#x27;vscode-languageserver-protocol&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitializeParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">InitializeParams</span> </span>&#123;</span><br><span class="line">    <span class="attr">processId</span>: <span class="built_in">number</span>;</span><br><span class="line">    rootUri: <span class="built_in">string</span>;</span><br><span class="line">    capabilities: lsp.ClientCapabilities;</span><br><span class="line">    workspaceFolders: lsp.WorkspaceFolder[] | <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processId = process.pid;</span><br><span class="line">        <span class="built_in">this</span>.rootUri = url.pathToFileURL(path.resolve(<span class="string">&#x27;./&#x27;</span>)).toString();</span><br><span class="line">        <span class="built_in">this</span>.capabilities = &#123;&#125;;</span><br><span class="line">        <span class="built_in">this</span>.workspaceFolders = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    connection.listen();</span><br><span class="line">    <span class="keyword">const</span> initializeResult = <span class="keyword">await</span> connection.sendRequest(lsp.InitializeRequest.type, <span class="keyword">new</span> InitializeParams());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;initialize&#x27;</span>, initializeResult);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>Initialize Request が正しく送れていると、Initialize Result が返ってきます。こちらにも <code>capabilities</code> が含まれていますが、これはサーバ側で実装されている機能の一覧になります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">capabilities</span>: &#123;</span><br><span class="line">        <span class="attr">textDocumentSync</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">definitionProvider</span>: &#123;…&#125;,</span><br><span class="line">        <span class="attr">declarationProvider</span>: &#123;…&#125;,</span><br><span class="line">        <span class="attr">referencesProvider</span>: &#123;…&#125;,</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Initialized-Notification"><a href="#Initialized-Notification" class="headerlink" title="Initialized Notification"></a>Initialized Notification</h2><p>次は Initialize Result を受けて、クライアント側の初期化が終わったことを通知するために Initialized Notification を送信します。サーバに通知を送る場合には <code>connection.sendNotification(type, params)</code> を使います。<code>InitializedParams</code> は空のオブジェクトなので実装はしないで <code>&#123;&#125;</code> を直接入力することにします。</p><figure class="highlight typescript"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitializeParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">InitializeParams</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> initializeResult = <span class="keyword">await</span> connection.sendRequest(lsp.InitializeRequest.type, <span class="keyword">new</span> InitializeParams());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;initialize&#x27;</span>, initializeResult);</span><br><span class="line">    connection.sendNotification(lsp.InitializedNotification.type, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>Initialized Notification を送ると、<code>client/registerCapability</code> メソッドのメッセージが送られてきます。これはサーバがクライアントに対して機能追加を要求するメッセージになります。今はまだ、このメソッドに対するハンドラを定義していないので、ハンドラを定義して受信できるようにします。</p><figure class="highlight typescript"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitializeParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">InitializeParams</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    connection.onRequest(lsp.RegistrationRequest.type, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;client/registerCapability&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>すると、以下のような内容のメッセージを受信したことがわかります。次はこのメソッドを実装します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;workspace/didChangeWorkspaceFolders&#x27;</span>,</span><br><span class="line">    <span class="attr">registerOptions</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DidChangeWorkspaceFolders-Notification"><a href="#DidChangeWorkspaceFolders-Notification" class="headerlink" title="DidChangeWorkspaceFolders Notification"></a>DidChangeWorkspaceFolders Notification</h2><p>ワークスペースフォルダを変更するメソッドを実装します。これを実行することで、解析対象のフォルダを変更することができます。<code>InitializeParams</code> 同様に <code>DidChangeWorkspaceFoldersParams</code> を実装します。プロパティは多いですが、単にワークスペースとして認識するフォルダの追加と削除を行っているだけです。また、DidChangeWorkspaceFolders Notification はデフォルトではサーバ側から認識されないため、<code>InitializeParams.capabilities</code> にワークスペース機能があることを記載します。詳細は、<a href="/articles/20220302a/">Pyright を LSP サーバとした自作 LSP クライアント（調査編）</a>で解説しています。</p><figure class="highlight ts"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitializeParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">InitializeParams</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capabilities = &#123; <span class="attr">workspace</span>: &#123; <span class="attr">workspaceFolders</span>: <span class="literal">true</span> &#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkspaceFoldersChangeEvent</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">WorkspaceFoldersChangeEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> added: lsp.WorkspaceFolder[], <span class="keyword">public</span> removed: lsp.WorkspaceFolder[]</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkspaceFolder</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">WorkspaceFolder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> uri: <span class="built_in">string</span>, <span class="keyword">public</span> name: <span class="built_in">string</span></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DidChangeWorkspaceFoldersParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">DidChangeWorkspaceFoldersParams</span> </span>&#123;</span><br><span class="line">    <span class="attr">event</span>: WorkspaceFoldersChangeEvent;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">added: lsp.WorkspaceFolder[], removed: lsp.WorkspaceFolder[]</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.event = <span class="keyword">new</span> WorkspaceFoldersChangeEvent(added, removed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    connection.onRequest(lsp.RegistrationRequest.type, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;client/registerCapability&#x27;</span>, e);</span><br><span class="line">        connection.sendNotification(</span><br><span class="line">            lsp.DidChangeWorkspaceFoldersNotification.type,</span><br><span class="line">            <span class="keyword">new</span> DidChangeWorkspaceFoldersParams(</span><br><span class="line">                [<span class="keyword">new</span> WorkspaceFolder(url.pathToFileURL(path.resolve(<span class="string">&#x27;./&#x27;</span>)).toString(), <span class="string">&#x27;dev&#x27;</span>)],</span><br><span class="line">                []</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>実装が上手くいっていれば、DidChangeWorkspaceFolders Notification を送信したタイミングで、<code>window/logMessage</code> メソッドのメッセージが大量に受信できると思います。主に解析対象のファイルや、仮想環境の情報を通知してくれています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Assuming Python platform Windows</span><br><span class="line">Searching for source files</span><br><span class="line">Auto-excluding \path\to\.venv</span><br><span class="line">Auto-excluding \path\to\myvenv</span><br><span class="line">Found &#123;number&#125; source files</span><br></pre></td></tr></table></figure><h2 id="解析メッセージ"><a href="#解析メッセージ" class="headerlink" title="解析メッセージ"></a>解析メッセージ</h2><p>以上で、解析に必要な初期化メッセージをすべて実装したことになり、ここから先は自由にメッセージを送信できます。今回は最近のエディタでよく見かける、<a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_hover">Hover Request</a> を送信してみます。<a href="https://fastapi.tiangolo.com/ja/">FastAPI</a> を使用した以下のファイルを対象にします。</p><figure class="highlight py"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/hello&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello world!&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>今までと同様に、<code>HoverParams</code> を実装し適切な引数でメッセージを送信します。今回はテストなので、引数は手動で設定します。<code>Position.create(2, 6)</code> は 0-based で行数と文字数を指定しており、3 行目の 7 文字目、<code>FastAPI()</code> にカーソル位置があることを示しています。</p><figure class="highlight typescript"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoverParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">HoverParams</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> textDocument: lsp.TextDocumentIdentifier, <span class="keyword">public</span> position: lsp.Position</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connection.sendRequest(</span><br><span class="line">    lsp.HoverRequest.type,</span><br><span class="line">    <span class="keyword">new</span> HoverParams(</span><br><span class="line">        lsp.TextDocumentIdentifier.create(url.pathToFileURL(path.resolve(<span class="string">&#x27;./main.py&#x27;</span>)).toString()),</span><br><span class="line">        lsp.Position.create(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line">    )</span><br><span class="line">).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>実行すると以下のようなメッセージが受信でき、カーソルを合わせた時のような情報が得られました。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">contents</span>: &#123;</span><br><span class="line">        <span class="attr">kind</span>: <span class="string">&#x27;plaintext&#x27;</span></span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;(class) FastAPI(*, debug: bool = False, routes: List[BaseRoute] | None = None, title: str = &quot;FastAPI&quot;, description: str = &quot;&quot;, version: str = &quot;0.1.0&quot;, openapi_url: str | None = &quot;/openapi.json&quot;, openapi_tags: List[Dict[str, Any]] | None = None, servers: List[Dict[str, str | Any]] | None = None, dependencies: Sequence[Depends] | None = None, default_response_class: Type[Response] = Default(JSONResponse), docs_url: str | None = &quot;/docs&quot;, redoc_url: str | None = &quot;/redoc&quot;, swagger_ui_oauth2_redirect_u…one = None, on_startup: Sequence[() -&gt; Any] | None = None, on_shutdown: Sequence[() -&gt; Any] | None = None, terms_of_service: str | None = None, contact: Dict[str, str | Any] | None = None, license_info: Dict[str, str | Any] | None = None, openapi_prefix: str = &quot;&quot;, root_path: str = &quot;&quot;, root_path_in_servers: bool = True, responses: Dict[int | str, Dict[str, Any]] | None = None, callbacks: List[BaseRoute] | None = None, deprecated: bool | None = None, include_in_schema: bool = True, **extra: Any)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">range</span>: &#123;</span><br><span class="line">        <span class="attr">end</span>: &#123;<span class="attr">line</span>: <span class="number">2</span>, <span class="attr">character</span>: <span class="number">13</span>&#125;</span><br><span class="line">        <span class="attr">start</span>: &#123;<span class="attr">line</span>: <span class="number">2</span>, <span class="attr">character</span>: <span class="number">6</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全体の実装"><a href="#全体の実装" class="headerlink" title="全体の実装"></a>全体の実装</h2><details>  <summary>長いので折り畳み</summary>  <div><figure class="highlight js"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> child_process <span class="keyword">from</span> <span class="string">&#x27;child_process&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> url <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rpc <span class="keyword">from</span> <span class="string">&#x27;vscode-jsonrpc/node&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lsp <span class="keyword">from</span> <span class="string">&#x27;vscode-languageserver-protocol&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitializeParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">InitializeParams</span> </span>&#123;</span><br><span class="line">    <span class="attr">processId</span>: number;</span><br><span class="line">    rootUri: string;</span><br><span class="line">    capabilities: lsp.ClientCapabilities;</span><br><span class="line">    workspaceFolders: lsp.WorkspaceFolder[] | <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processId = process.pid;</span><br><span class="line">        <span class="built_in">this</span>.rootUri = url.pathToFileURL(path.resolve(<span class="string">&#x27;./&#x27;</span>)).toString();</span><br><span class="line">        <span class="built_in">this</span>.capabilities = &#123; <span class="attr">workspace</span>: &#123; <span class="attr">workspaceFolders</span>: <span class="literal">true</span> &#125; &#125;;</span><br><span class="line">        <span class="built_in">this</span>.workspaceFolders = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkspaceFoldersChangeEvent</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">WorkspaceFoldersChangeEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public added: lsp.WorkspaceFolder[], public removed: lsp.WorkspaceFolder[]</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkspaceFolder</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">WorkspaceFolder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public uri: string, public name: string</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DidChangeWorkspaceFoldersParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">DidChangeWorkspaceFoldersParams</span> </span>&#123;</span><br><span class="line">    <span class="attr">event</span>: WorkspaceFoldersChangeEvent;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">added: lsp.WorkspaceFolder[], removed: lsp.WorkspaceFolder[]</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.event = <span class="keyword">new</span> WorkspaceFoldersChangeEvent(added, removed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoverParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">HoverParams</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public textDocument: lsp.TextDocumentIdentifier, public position: lsp.Position</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    connection.onUnhandledNotification(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;notification&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.onError(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.onNotification(lsp.LogMessageNotification.type, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(e.message);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.onRequest(lsp.RegistrationRequest.type, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;client/registerCapability&#x27;</span>, e);</span><br><span class="line">        connection.sendNotification(</span><br><span class="line">            lsp.DidChangeWorkspaceFoldersNotification.type,</span><br><span class="line">            <span class="keyword">new</span> DidChangeWorkspaceFoldersParams(</span><br><span class="line">                [<span class="keyword">new</span> WorkspaceFolder(url.pathToFileURL(path.resolve(<span class="string">&#x27;./&#x27;</span>)).toString(), <span class="string">&#x27;dev&#x27;</span>)],</span><br><span class="line">                []</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        connection</span><br><span class="line">            .sendRequest(</span><br><span class="line">                lsp.HoverRequest.type,</span><br><span class="line">                <span class="keyword">new</span> HoverParams(</span><br><span class="line">                    lsp.TextDocumentIdentifier.create(url.pathToFileURL(path.resolve(<span class="string">&#x27;./main.py&#x27;</span>)).toString()),</span><br><span class="line">                    lsp.Position.create(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">            .then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(e);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> modulePath = path.resolve(<span class="string">&#x27;./packages/cli-pyright/langserver.index.js&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> childProcess = child_process.fork(modulePath, [<span class="string">&#x27;--node-ipc&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> connection = rpc.createMessageConnection(</span><br><span class="line">        <span class="keyword">new</span> rpc.IPCMessageReader(childProcess),</span><br><span class="line">        <span class="keyword">new</span> rpc.IPCMessageWriter(childProcess)</span><br><span class="line">    );</span><br><span class="line">    setup(connection);</span><br><span class="line">    connection.listen();</span><br><span class="line">    <span class="keyword">const</span> initializeResult = <span class="keyword">await</span> connection.sendRequest(lsp.InitializeRequest.type, <span class="keyword">new</span> InitializeParams());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;initialize&#x27;</span>, initializeResult);</span><br><span class="line">    connection.sendNotification(lsp.InitializedNotification.type, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure></div></details><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>今回は、自作の LSP クライアントを実装しました。機能としては不十分ですが、遊ぶ分には楽しめると思います。本来の目的は既存のメッセージを組み合わせての解析なのですが、実際のところかなり面倒です…。LSP が解析目的のプロトコルではないので当然ですが。現在は Pyright 内部をいじることも検討しているので、LSP サーバ側の実装についても今後機会があれば紹介したいと思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://microsoft.github.io/language-server-protocol/">https://microsoft.github.io/language-server-protocol/</a></li><li><a href="https://docs.microsoft.com/en-us/visualstudio/extensibility/language-server-protocol?view=vs-2022">https://docs.microsoft.com/en-us/visualstudio/extensibility/language-server-protocol?view=vs-2022</a></li><li><a href="https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4">https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4</a></li><li><a href="https://qiita.com/Ladicle/items/e666e3fb9fae9d807969">https://qiita.com/Ladicle/items/e666e3fb9fae9d807969</a></li><li><a href="https://zenn.dev/takl/books/0fe11c6e177223">https://zenn.dev/takl/books/0fe11c6e177223</a></li><li><a href="https://github.com/tennashi/lsp_spec_ja">https://github.com/tennashi/lsp_spec_ja</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220303a/PyrightLarge.png&quot; alt=&quot;&quot; width=&quot;565&quot; height=&quot;234&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="Pyright" scheme="https://future-architect.github.io/tags/Pyright/"/>
    
    <category term="LSP" scheme="https://future-architect.github.io/tags/LSP/"/>
    
  </entry>
  
  <entry>
    <title>Pyright を LSP サーバとした自作 LSP クライアント（調査編）</title>
    <link href="https://future-architect.github.io/articles/20220302a/"/>
    <id>https://future-architect.github.io/articles/20220302a/</id>
    <published>2022-03-01T15:00:00.000Z</published>
    <updated>2022-03-03T01:19:44.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Language Server Protocol の理解として、Pyright を LSP サーバとした自作クライアントの作成を行いました（<a href="/articles/20220303a/">Pyright を LSP サーバとした自作 LSP クライアント（実装編）</a>）。その際、Pyright に解析を行わせるための初期化方法がドキュメントには書かれていなかったので、VSCode 拡張用のクライアントをトレースして調査することにしました。</p><h1 id="調査方法"><a href="#調査方法" class="headerlink" title="調査方法"></a>調査方法</h1><p>Pyright のリポジトリには言語サーバ（<a href="https://github.com/microsoft/pyright/tree/main/packages/pyright"><code>packages/pyright</code></a>）だけでなく、VSCode 拡張用のクライアント（<a href="https://github.com/microsoft/pyright/tree/main/packages/vscode-pyright"><code>packages/vscode-pyright</code></a>）が存在します。今回はこの二つをデバッガで実行して調査します。</p><p><a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a></p><h2 id="1-インストール"><a href="#1-インストール" class="headerlink" title="1. インストール"></a>1. インストール</h2><p><a href="https://github.com/microsoft/pyright/blob/main/docs/build-debug.md">https://github.com/microsoft/pyright/blob/main/docs/build-debug.md</a></p><p>ます、上の記事にしたがって Pyright をローカルでビルドします。</p><ol><li>Node.js のインストール</li><li><code>git clone https://github.com/microsoft/pyright.git &amp;&amp; cd pyright</code></li><li><code>npm install</code></li></ol><p>また、拡張機能として Pyright および Pylance を導入している場合には無効にします。</p><h2 id="2-デバッグ実行"><a href="#2-デバッグ実行" class="headerlink" title="2. デバッグ実行"></a>2. デバッグ実行</h2><p>Pyright を VSCode 拡張としてデバッグ実行します。VSCode のサイドバーから「実行とデバッグ」を選択し、プルダウンメニューから “Pyright extension” を選択、実行します。なお、実行時のオプションについてはプルダウンメニュー横の歯車、あるいは <a href="https://github.com/microsoft/pyright/blob/main/.vscode/launch.json"><code>.vscode/launch.json</code></a> から確認できます。</p><img src="/images/20220302a/s.png" alt="VS Codeデバッグ実行" width="1200" height="656" loading="lazy"><p>実行すると、VSCode がもう一つ別のウィンドウで立ち上がります。上部に [拡張機能開発ホスト] と書かれていることを確認します。このウィンドウは現在実行している拡張機能が反映された VSCode になっています。<br><img src="/images/20220302a/ss.png" alt="VSCode がもう一つ別のウィンドウ" width="1200" height="84" loading="lazy"></p><p>ブレークポイントが動作することを確認します。<a href="https://github.com/microsoft/pyright/blob/06e9f626f4388bc9b894daf4239a9e4a8e3ffb11/packages/vscode-pyright/src/extension.ts#L206"><code>packages/vscode-pyright/src/extension.ts:206</code></a> にはクライアントからサーバへ再起動を要求するメッセージ送信が実装されているので、ここにブレークポイントを置いてみます。[拡張機能開発ホスト] のウィンドウでコマンドパレットを開き、”Pyright: Restart Server” を実行すると、プログラムが一時停止しておりブレークポイントが機能していることを確認できます。</p><img src="/images/20220302a/スクリーンショット_(8).png" alt="コマンドパレット" width="924" height="229" loading="lazy"><img src="/images/20220302a/スクリーンショット_(10).png" alt="ブレークポイントが機能している" width="1200" height="499" loading="lazy"><h2 id="3-デバッガのアタッチ"><a href="#3-デバッガのアタッチ" class="headerlink" title="3. デバッガのアタッチ"></a>3. デバッガのアタッチ</h2><p>2 までの手順では、クライアントのみがデバッガで実行されます。しかし、メッセージを受信した後の処理はサーバ側で行われるため、調査のためにはこちらもデバッガで実行したくなります。<a href="https://github.com/microsoft/pyright/blob/06e9f626f4388bc9b894daf4239a9e4a8e3ffb11/packages/vscode-pyright/src/extension.ts#L66"><code>extension.ts:66</code></a> では、サーバがポート 6600 で建てられているので、ここにデバッガをアタッチします。<br><img src="/images/20220302a/スクリーンショット_(12).png" alt="スクリーンショット_(12).png" width="1074" height="367" loading="lazy"></p><p>「実行とデバッグ」のプルダウンメニューに “Pyright attach server” があるのでこれを “Pyright extension” 実行後に実行すればよいです。<a href="https://github.com/microsoft/pyright/blob/main/.vscode/launch.json"><code>.vscode/launch.json</code></a> の <code>&quot;port&quot;: 6600</code> が先ほど確認したポートと一致することに注意します。<br><img src="/images/20220302a/スクリーンショット_(11).png" alt="スクリーンショット_(11).png" width="1200" height="546" loading="lazy"></p><p><a href="https://github.com/microsoft/pyright/blob/06e9f626f4388bc9b894daf4239a9e4a8e3ffb11/packages/pyright-internal/src/commands/restartServer.ts#L18"><code>pyright-internal/src/commands/restartServer.ts</code></a> がサーバ側で再起動コマンドを扱う部分です。ブレークポイントを打って同様にメッセージを送信すると、一時停止することが確認できます。<br><img src="/images/20220302a/スクリーンショット_(13).png" alt="デバッガをアタッチ" width="1200" height="586" loading="lazy"></p><p>アタッチできていない場合には、下の画像のように Unbound breakpoint となり一時停止しません。<br><img src="/images/20220302a/スクリーンショット_(14).png" alt=".vscode/launch.json" width="909" height="224" loading="lazy"></p><h1 id="調査内容"><a href="#調査内容" class="headerlink" title="調査内容"></a>調査内容</h1><h2 id="1-Initialize-Request"><a href="#1-Initialize-Request" class="headerlink" title="1. Initialize Request"></a>1. Initialize Request</h2><p><a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize">初期化関連の仕様</a>を見ると、メソッド <code>initialize</code> は送信する必要がありそうです。そこでまず次の二つを順に送信してみます。</p><blockquote><ol><li><code>initialize</code> メソッド：サーバの初期化を要求</li><li>適当な解析メソッド</li></ol></blockquote><p>すると、<a href="https://github.com/microsoft/pyright/blob/844f7cb98987955dc617cd97b1372325e76a4530/packages/pyright-internal/src/languageServerBase.ts#L415"><code>pyright-internal/src/commands/languageServerBase.ts:417</code></a> で停止してしまいました。<code>workspace.isInitialized</code> が <code>true</code> とならないことが原因です。</p><img src="/images/20220302a/スクリーンショット_(15).png" alt="workspace.isInitialized" width="923" height="131" loading="lazy"><p>したがって、<code>initialize</code> メソッドの後に何か他のメソッドを送信する必要がありそうです。</p><blockquote><ol><li><code>initialize</code> メソッド：サーバの初期化を要求</li><li>???：ワークスペースを初期化</li><li>適当な解析メソッド</li></ol></blockquote><h2 id="2-DidChangeWorkspaceFolders-Notification"><a href="#2-DidChangeWorkspaceFolders-Notification" class="headerlink" title="2. DidChangeWorkspaceFolders Notification"></a>2. DidChangeWorkspaceFolders Notification</h2><p>調べると、<code>workspace.isInitialized</code> はメソッド <a href="https://github.com/microsoft/pyright/blob/844f7cb98987955dc617cd97b1372325e76a4530/packages/pyright-internal/src/languageServerBase.ts#L1265"><code>updateSettingsForWorkspace</code></a> が実行されて <code>true</code> となります。</p><img src="/images/20220302a/スクリーンショット_(16).png" alt="DidChangeWorkspaceFolders Notification" width="967" height="384" loading="lazy"><p>このメソッドは <a href="https://github.com/microsoft/pyright/blob/844f7cb98987955dc617cd97b1372325e76a4530/packages/pyright-internal/src/languageServerBase.ts#L581"><code>onDidChangeWorkspaceFolders</code></a> で管理されているので、<code>workspace/didChangeWorkspaceFolders</code> を送信することで呼ばれます。</p><img src="/images/20220302a/スクリーンショット_(18).png" alt="workspace/didChangeWorkspaceFolders" width="742" height="269" loading="lazy"><p>つまり、手順としては次のようになります。</p><blockquote><ol><li><code>initialize</code> メソッド：サーバの初期化を要求</li><li><code>workspace/didChangeWorkspaceFolders</code> メソッド：ワークスペースフォルダを変更</li><li>適当な解析メソッド</li></ol></blockquote><p>ただし、<code>onDidChangeWorkspaceFolders</code> は特定の条件で有効化されることに注意します。</p><h2 id="3-Initialized-Notification"><a href="#3-Initialized-Notification" class="headerlink" title="3. Initialized Notification"></a>3. Initialized Notification</h2><p><a href="https://github.com/microsoft/pyright/blob/844f7cb98987955dc617cd97b1372325e76a4530/packages/pyright-internal/src/languageServerBase.ts#L579"><code>onDidChangeWorkspaceFolders</code>の前後</a> を確認すると、有効化には以下の二つの条件を満たす必要があります。</p><ol><li><code>initialized</code> メソッドの送信</li><li><code>this.client.hasWorkspaceFoldersCapability = true</code></li></ol><p>1 は明らかに送信するだけです。<a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialized"><code>initialized</code> メソッド</a> は サーバからの InitializeResult に対応するものなので、タイミングは InitializeResult を受け取った後、<code>workspace/didChangeWorkspaceFolders</code> メソッドを送信する前になります。2 はわかりにくいですが、<a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize"><code>initialize</code>メソッド</a> のオプションに <code>capabilities</code> があるのでここで登録します。つまり、初期化方法は全体で次のようになることがわかりました。</p><blockquote><ol><li><code>initialize</code> メソッド：サーバの初期化を要求<br>a. <code>capabilities.workspace.workspaceFolders = true</code>：ワークスペースフォルダ機能を有効化</li><li><code>initialized</code> メソッド：クライアント側の初期化が完了したことを通知</li><li><code>workspace/didChangeWorkspaceFolders</code> メソッド：ワークスペースフォルダの変更を通知</li><li>適当な解析メソッド</li></ol></blockquote><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>以上から、Pyright の初期化は下図のようにして行われることがわかりました。実装は<a href="/articles/20220303a/">Pyright を LSP サーバとした自作 LSP クライアント（実装編）</a>で扱っていますので、合わせて読んでいただければと思います。</p><img src="/images/20220302a/スクリーンショット_(19).PNG" alt="シーケンス図" width="807" height="529" loading="lazy">]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;Language Server Protocol の理解として、Pyright を LSP</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="コアテク" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/"/>
    
    <category term="構文解析" scheme="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/"/>
    
    <category term="Pyright" scheme="https://future-architect.github.io/tags/Pyright/"/>
    
    <category term="LSP" scheme="https://future-architect.github.io/tags/LSP/"/>
    
  </entry>
  
  <entry>
    <title>Mypy と Pyright の解析手法と型情報の比較</title>
    <link href="https://future-architect.github.io/articles/20220301a/"/>
    <id>https://future-architect.github.io/articles/20220301a/</id>
    <published>2022-02-28T15:00:00.000Z</published>
    <updated>2022-03-01T00:57:03.280Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220301a/mypy.png" alt="" width="600" weihgt="376"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Mypy や Pyright は Python の静的解析ツールとして有名ですが、これら二つに解析情報でどのような違いがあるのかわからなかったので、実験することにしました。Pyright は Mypy に比べて後発のプロジェクトですが、性能面で優れているなどとして徐々に注目を集めています。</p><ul><li><a href="https://github.com/python/mypy">https://github.com/python/mypy</a></li><li><a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a></li></ul><p>解析以外での比較はこちらが参考になります。</p><ul><li><a href="https://qiita.com/simonritchie/items/7492d1c1a3c13b2f27aa#%E4%BA%8B%E5%89%8D%E3%81%AEpyright%E3%81%AE%E8%BF%BD%E5%8A%A0">https://qiita.com/simonritchie/items/7492d1c1a3c13b2f27aa#%E4%BA%8B%E5%89%8D%E3%81%AEpyright%E3%81%AE%E8%BF%BD%E5%8A%A0</a></li></ul><h1 id="実験概要"><a href="#実験概要" class="headerlink" title="実験概要"></a>実験概要</h1><p>Mypy、Pyright はともに <code>reveal_type(expr)</code> という機能があります。これを解析対象のコードに挿入すると、実行時点での <code>expr</code> の型情報を表示することができます。Mypy、Pyright の両者で同一コードに解析を行いその結果を比較します。以下、コード中ではコメントで <code>reveal_type</code> の結果を記録し、<code>reveal_type</code> 自体の記述は省略します。</p><h2 id="実験-1-再代入"><a href="#実験-1-再代入" class="headerlink" title="実験 1: 再代入"></a>実験 1: 再代入</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>     <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br><span class="line">a = <span class="string">&#x27;str&#x27;</span>  <span class="comment"># error: Incompatible types in assignment (expression has type &quot;str&quot;, variable has type &quot;int&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>     <span class="comment"># Type of &quot;a&quot; is &quot;Literal[10]&quot;</span></span><br><span class="line">a = <span class="string">&#x27;str&#x27;</span>  <span class="comment"># Type of &quot;a&quot; is &quot;Literal[&#x27;str&#x27;]&quot;</span></span><br></pre></td></tr></table></figure><p><code>a</code> に型の違う値を再代入しています。</p><ul><li>Mypy は 1 行目の代入によって <code>a</code> の型を <code>builtins.int</code> に確定させるため、2 行目の代入は型の違いで失敗します。これは Python 本来の挙動とは異なりますが、暗黙の変換がないため型チェックの観点からは安全です。</li><li>Pyright はリテラルを別の型に変換せず、リテラルのままで表現しています。また、代入によって型が変わっても、特別問題視はしないようです。</li></ul><h2 id="実験-2-オーバーライド"><a href="#実験-2-オーバーライド" class="headerlink" title="実験 2: オーバーライド"></a>実験 2: オーバーライド</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span>     <span class="comment"># Revealed type is &quot;def () -&gt; builtins.int&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">override</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span>  <span class="comment"># Revealed type is &quot;def () -&gt; builtins.int&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">override</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span>  <span class="comment"># error: Return type &quot;str&quot; of &quot;override&quot; incompatible with return type &quot;int&quot; in supertype &quot;Parent&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;override&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span>     <span class="comment"># Type of &quot;Parent().hello&quot; is &quot;() -&gt; int&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">override</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span>  <span class="comment"># Type of &quot;Parent().override&quot; is &quot;() -&gt; int&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">override</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span>  <span class="comment"># Type of &quot;Child().override&quot; is &quot;() -&gt; str&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;override&quot;</span></span><br></pre></td></tr></table></figure><p>戻り値型の異なるメソッドをオーバーライドしています。Java などのオーバーライドはシグネチャの一致が求められますが、Python ではこのようなオーバーライドが可能です。Mypy では、<code>Child.override</code> はエラーになりますが、Pyright ではエラーになりません。</p><h2 id="実験-3-戻り値の型推論"><a href="#実験-3-戻り値の型推論" class="headerlink" title="実験 3: 戻り値の型推論"></a>実験 3: 戻り値の型推論</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a: <span class="built_in">int</span></span>):</span>  <span class="comment"># Revealed type is &quot;def (a: builtins.int) -&gt; Any&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a       <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a: <span class="built_in">int</span></span>):</span>  <span class="comment"># Type of &quot;func&quot; is &quot;(a: int) -&gt; int&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a       <span class="comment"># Type of &quot;a&quot; is &quot;int&quot;</span></span><br></pre></td></tr></table></figure><p>引数の型から推論をすれば <code>func</code> は明らかに <code>(int) -&gt; int</code> となりますが、Mypy は推論を行わないようになっており、戻り値の型が <code>Any</code> になります。</p><h2 id="実験-4-戻り値の型チェック"><a href="#実験-4-戻り値の型チェック" class="headerlink" title="実験 4: 戻り値の型チェック"></a>実験 4: 戻り値の型チェック</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span>  <span class="comment"># Revealed type is &quot;def (a: builtins.int) -&gt; builtins.str&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a              <span class="comment"># error: Incompatible return value type (got &quot;int&quot;, expected &quot;str&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span>  <span class="comment"># Type of &quot;func&quot; is &quot;(a: int) -&gt; str&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a              <span class="comment"># error: Expression of type &quot;int&quot; cannot be assigned to return type &quot;str&quot; &quot;int&quot; is incompatible with &quot;str&quot; (reportGeneralTypeIssues)</span></span><br></pre></td></tr></table></figure><p>実験 3 の関数に戻り値の型をヒントとして与えています。すると先ほどとは違い、両者ともエラーを出すようになりました。Mypy もヒントがある場合には推論して整合性のチェックを行うようです。</p><h2 id="実験-5-タイプナローイング"><a href="#実験-5-タイプナローイング" class="headerlink" title="実験 5: タイプナローイング"></a>実験 5: タイプナローイング</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">flg: <span class="built_in">bool</span>, i: <span class="built_in">int</span>, j: <span class="built_in">str</span></span>):</span>  <span class="comment"># Revealed type is &quot;def (flg: builtins.bool, i: builtins.int, j: builtins.str) -&gt; Any&quot;</span></span><br><span class="line">    <span class="keyword">if</span> flg:</span><br><span class="line">        a = i  <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a = j  <span class="comment"># error: Incompatible types in assignment (expression has type &quot;str&quot;, variable has type &quot;int&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> a   <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">flg: <span class="built_in">bool</span>, i: <span class="built_in">int</span>, j: <span class="built_in">str</span></span>):</span>  <span class="comment"># Type of &quot;func&quot; is &quot;(flg: bool, i: int, j: str) -&gt; (int | str)&quot;</span></span><br><span class="line">    <span class="keyword">if</span> flg:</span><br><span class="line">        a = i  <span class="comment"># Type of &quot;a&quot; is &quot;int&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a = j  <span class="comment"># Type of &quot;a&quot; is &quot;str&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a   <span class="comment"># Type of &quot;a&quot; is &quot;int | str&quot;</span></span><br></pre></td></tr></table></figure><p>if 文の分岐によって <code>a</code> の型が変わる例です。</p><ul><li>Mypy は 5 行目でエラーが出ました。実験 1 と同様に 3 行目で <code>a</code> の型が <code>builtins.int</code> に確定しているためです。</li><li>Pyright はエラーが出ません。分岐ごとに <code>a</code> の型を独立に判断し、戻り値の段階ではこれらの和を取っています。このような技術は Pyright のドキュメント内で <a href="https://github.com/microsoft/pyright/blob/main/docs/type-concepts.md#type-narrowing">Type Narrowing</a> として紹介されています。</li></ul><h2 id="実験-6-タイプナローイング（到達不能な分岐がある場合）"><a href="#実験-6-タイプナローイング（到達不能な分岐がある場合）" class="headerlink" title="実験 6: タイプナローイング（到達不能な分岐がある場合）"></a>実験 6: タイプナローイング（到達不能な分岐がある場合）</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">flg: <span class="built_in">bool</span>, i: <span class="built_in">int</span>, j: <span class="built_in">str</span></span>):</span>  <span class="comment"># Revealed type is &quot;def (flg: builtins.bool, i: builtins.int, j: builtins.str) -&gt; Any&quot;</span></span><br><span class="line">    <span class="keyword">if</span> flg:             <span class="comment"># Revealed type is &quot;builtins.bool&quot;</span></span><br><span class="line">        a = i           <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> flg:       <span class="comment"># Revealed type is &quot;builtins.bool&quot;</span></span><br><span class="line">        a = j           <span class="comment"># error: Incompatible types in assignment (expression has type &quot;str&quot;, variable has type &quot;int&quot;)</span></span><br><span class="line">    <span class="keyword">else</span>:               <span class="comment"># Revealed type is &quot;builtins.bool&quot;</span></span><br><span class="line">        reveal_type(a)  <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> a            <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">flg: <span class="built_in">bool</span>, i: <span class="built_in">int</span>, j: <span class="built_in">str</span></span>):</span>  <span class="comment"># Type of &quot;func&quot; is &quot;(flg: bool, i: int, j: str) -&gt; (int | str)&quot;</span></span><br><span class="line">    <span class="keyword">if</span> flg:             <span class="comment"># Type of &quot;flg&quot; is &quot;Literal[True]&quot;</span></span><br><span class="line">        a = i           <span class="comment"># Type of &quot;a&quot; is &quot;int&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> flg:       <span class="comment"># Type of &quot;flg&quot; is &quot;Literal[False]&quot;</span></span><br><span class="line">        a = j           <span class="comment"># Type of &quot;a&quot; is &quot;str&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:               <span class="comment"># Type of &quot;flg&quot; is &quot;Never&quot;</span></span><br><span class="line">        reveal_type(a)  <span class="comment"># error: &quot;a&quot; is possibly unbound (reportUnboundVariable)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> a            <span class="comment"># Type of &quot;a&quot; is &quot;int | str | Unbound&quot;</span></span><br></pre></td></tr></table></figure><p>実験 5 の if 文に到達しない分岐 (<code>else</code>) を追加します。</p><ul><li>Pyright では 6 行目で <code>flg</code> の型を <code>Never</code> としています。<code>bool</code> は <code>True</code> と <code>False</code> の 2 値しかないため、上 2 つの分岐で消費し、<code>else</code> 内に到達する <code>flg</code> は存在しないことを表しています。こちらも Pyright のドキュメント内で <a href="https://github.com/microsoft/pyright/blob/main/docs/internals.md#type-checking-concepts">Type Checking Concepts</a> として紹介されています。</li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Mypy と Pyright では型情報の用途が違う印象を受けます。Pyright は Python の挙動を極力トレースした上で、入力補完など利便性を高める機能に必要な情報を、型ヒントや型推論を用いて特定しているように見えます。対照的に、Mypy はヒントなしでの型の異なる代入を禁止するなど、Python とは異なる型システムを導入し、その中で厳密なコーディングを求めるような設計になっていそうです。個人的には、両者に優劣があるわけではなく、ユースケースによって使い分けが存在するという言い方がしっくりきています。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://blog.abarabakuhatsu.com/changed_python_type_checking_tool_from_mypy">https://blog.abarabakuhatsu.com/changed_python_type_checking_tool_from_mypy</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220301a/mypy.png&quot; alt=&quot;&quot; width=&quot;600&quot; weihgt=&quot;376&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="コアテク" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/"/>
    
    <category term="構文解析" scheme="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/"/>
    
    <category term="Mypy" scheme="https://future-architect.github.io/tags/Mypy/"/>
    
    <category term="Pyright" scheme="https://future-architect.github.io/tags/Pyright/"/>
    
  </entry>
  
  <entry>
    <title>A5:SQL Mk-2に回帰した話</title>
    <link href="https://future-architect.github.io/articles/20220225a/"/>
    <id>https://future-architect.github.io/articles/20220225a/</id>
    <published>2022-02-24T15:00:00.000Z</published>
    <updated>2022-02-26T02:30:26.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG/DXチームの宮崎将太です。</p><p>みなさま、ER図を作成するとき、どんなツールを使っていますか？</p><p>タイトル通りの出オチですが、数度の輪廻転生を経て私はA5:SQL Mk-2（以下A5M2）を使用しています。ツールをお勧めする記事は多数ありますが、意外と現場のリアルな事情を踏まえた投稿は見当たらなかったので、経験を踏まえてER図作成ツールの比較検討していきたいと思います。</p><h2 id="What’s-A5M2"><a href="#What’s-A5M2" class="headerlink" title="What’s A5M2"></a>What’s A5M2</h2><p>真面目な比較検討は後述しますが、文脈の都合上最低限度の情報としてA5M2が何者か記載しておきます。</p><ul><li>無料のER図作成ツール兼SQLクライアント<br><a href="https://a5m2.mmatsubara.com/">https://a5m2.mmatsubara.com/</a></li><li>古くは2007年から開発が続けられており、ER図作成ツールとしては超古参。<br>内部的には1997年から脈々と開発が続けられています。<br>最近(2022/1/23)も大幅なUpdateが加えられました。<br><a href="https://a5m2.mmatsubara.com/document/history.txt">https://a5m2.mmatsubara.com/document/history.txt</a></li><li>対応OSはWindowsのみ（超重要）<br>これが原因で道に迷う方も多いのではないかと思います。<br>私が輪廻転生を遂げるきっかけもこの事象が原因です。</li></ul><img src="/images/20220225a/image.png" alt="A5M2" width="1000" height="556" loading="lazy"><h2 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h2><p>そもそも何故ER図作成ツールで輪廻転生しているのか簡単にご説明です。<br>ざっくり↓の遍歴です。</p><h3 id="7年前から5年程WindowsでA5M2使用"><a href="#7年前から5年程WindowsでA5M2使用" class="headerlink" title="7年前から5年程WindowsでA5M2使用"></a>7年前から5年程WindowsでA5M2使用</h3><p>当時のプロジェクト標準になっていたこともありA5M2を使用していました。</p><p>この時は会社通じてWindowsメインだった（Mac調達もできたけど標準PCではなかった）ので、どこのプロジェクトに行ってもだいたいA5M2だったかなと思います。</p><p>※プロジェクトサイズが超大規模になると、テーブル管理がエクセルになったり諸々あり。今思うとこの時点でA5M2が浸透していたのは偉大な先人の知恵であり、余計な手間からメンバを守ってくれていたのだなとしみじみ思います。</p><h3 id="2年前にWindows→Macに乗り換え"><a href="#2年前にWindows→Macに乗り換え" class="headerlink" title="2年前にWindows→Macに乗り換え"></a>2年前にWindows→Macに乗り換え</h3><p>2~3年前くらいのタイミングで会社標準PCとしてMacが選択可能になったこともあり、メインマシンをMacに交換しました。</p><p>開発含む普段の操作は圧倒的にMacの方が軽快でしたが、お察しの通りA5M2が使えなくなりました。</p><p>私と同じ理由でMacに交換するメンバーも多く、なんとかMacでDBモデリングをするツールを探そうとし始めます。</p><h3 id="ツールに迷走する"><a href="#ツールに迷走する" class="headerlink" title="ツールに迷走する"></a>ツールに迷走する</h3><p>都合の良い代替製品は見つかりませんでしが、当時PostgreSQLを使用していたこともあり、pgModelerを使用し始めました。</p><p>Mac版もWindows版もあり、かつ自前でビルドしてあげれば無料で使用でき、ぱっと見困りごとはなさそうでしたが↓のような問題が発生します。</p><ul><li><strong>リレーションを貼るとFK制約が勝手に作成され、かつ削除できない</strong><br>細かいですが、こういうちょっとした仕様で余計なコストをくらい続けます。<br>DBのお作法的には全く正しいのですが、既に稼働しているシステムの定義には合わせざるを得ないので、DDLにしてから手動で削除するなど対応が必要になります。<br>DB純正のツールはこういった事情が多いイメージです。</li><li><strong>git上で差分がわからない</strong><br>ファイル拡張子は<code>.dbm</code>ですが、実体はzip形式のバイナリファイルです。<br>git pushしたところで差分がわからず、いちいちローカルに持ってきて確認するコストが発生します。</li><li><strong>根本的に他DBに対応できない</strong><br>個人的にはこれが一番モチベーション的に辛かった記憶があります。<br>なんとかツール仕様に対応したところで、たとえばMySQLを使用する場合はMySQL Workbenchに乗り換えが必要だったり。<br>使用するDBが変わってもツールは統一したくなります。</li></ul><p>上記のような問題を解決するため、プロジェクトが変わるたびに頭を悩ませて新ツールに挑戦するのですがなかなか満足のいくツールはありませんでした。</p><p>有料版にまで手を出し、迷走と言って全く過言ではない状態だったのを覚えています。</p><p>※↓pgModeler操作画面。posgreSQL本家が出しているだけあり、UIはとてもおしゃれ。<br><img src="/images/20220225a/image_2.png" alt="pgModeler操作画面" width="1200" height="651" loading="lazy"></p><h2 id="ER図作成ツールに求められる要件"><a href="#ER図作成ツールに求められる要件" class="headerlink" title="ER図作成ツールに求められる要件"></a>ER図作成ツールに求められる要件</h2><p>さて、前置きが長くなりましたが、本題です。<br>前述のような状態からA5M2に転生するのですが、その時考えた内容をまとめておきます。</p><h3 id="想定する環境"><a href="#想定する環境" class="headerlink" title="想定する環境"></a>想定する環境</h3><p>まず前提として、想定される環境です。<br>FutureのDXチームだと↓のような状況が多く、対応できるツールを模索していました。</p><ul><li>Windonws/Mac混在<ul><li>MacOSはCatalina</li></ul></li><li>中規模以上開発<ul><li>設計/開発者10人以上</li><li>エンティティ数50以上</li></ul></li><li>DBはプロジェクトごとに異なる<ul><li>PostgreSQL/MySQL/SQL Server/（最近あまりないけど）Oracle</li><li>RedShift/BigQuery etc…</li></ul></li></ul><h3 id="求められる要件"><a href="#求められる要件" class="headerlink" title="求められる要件"></a>求められる要件</h3><p>議論の余地はあると思いますが、求められるであろう要件一覧です。</p><p>MUST/WANTは現場によって変わるので、都度フィッティングする必要はあると思います。ほぼ全てMUSTになっていますが、あくまで主観です。</p><div class="scroll"><table><thead><tr><th>機能（仕様）</th><th>MUST/WANT</th><th>説明</th></tr></thead><tbody><tr><td>GUI作図機能</td><td>MUST</td><td>当然ですがER図をGUIで作図する機能です。<br> 世の中にはCUIベースでしか作図できないツールもあるので、求められる機能にカウントしておきます。</td></tr><tr><td>DBオブジェクト管理</td><td>MUST</td><td>最低限のDBオブジェクトの管理機能です。（スキーマ/テーブル/インデックス/シーケンス/ビュー） <br> テーブル項目だけで、シーケンスやインデックスを管理できないと実運用上は立ちいきません。</td></tr><tr><td>型桁管理</td><td>MUST</td><td>これも当然ですが、カラムの型桁設定機能です。 <br> 使用するDBに依存するのではなく、自由記述ができるものが望ましいです。 <br> 必須/PK/FK/その他制約設定もここに含みます。</td></tr><tr><td>論理名/物理名管理（日本語対応含む）</td><td>MUST</td><td>日本語表示を含めた論理名/物理名の管理機能です。<br>  海外製だと日本語表示ができないことがあるので、必要機能としてカウントしておきます。 <br> ER図自体の表示を論理名/物理名で切り替えられるとなお良しです。</td></tr><tr><td>DBドメイン管理</td><td>MUST</td><td>この辺りから当たり前機能ではなくなってくる印象がありますが、DBドメインの管理機能です。<br> カラムの型桁を論理的に意味のある形式に定義します。 <br> ex) <br> 型桁: varchar(255) ドメイン: メールアドレス <br>型桁: int ドメイン: 会員ID  <br><br> プロジェクトサイズが大きくなるとドメイン管理がデータモデルの足腰になるので、個人的には外せない機能です。</td></tr><tr><td>DDL生成機能</td><td>MUST</td><td>テーブル定義からDDLを生成する機能です。<br> 作図だけでDDL生成はできない物も存在するので、忘れずに要件カウントします。</td></tr><tr><td>対応OS</td><td>MUST</td><td>前項で述べましたが超重要要素、windows/mac両対応か否かです。（通常業務用途なので、Linux系は考えません。） <br> 設計/開発マシンをどちらかに限定する発想もあるかとは思いますが、 windows onlyだった時代からのエンジニア的な良い流れを止めたくないのでMUST要件として考えます。</td></tr><tr><td>静的解析/加工可否</td><td>MUST</td><td>ER図ファイルを解析/加工できるか・しやすいか否かです。（≒テキストファイルか否か） <br>同じく個人的に超重要要素で、例えば↓のような対応が可能になります。 <br>　・エディタでER図ファイルを開いて一括置換　<br> 　・CIで禁止文言ないかなどチェックをかける <br>　・同じくCIで他設計書と整合性が取れているかチェックをかける <br>　・自動で論物変換をかける <br> ER図設計作業は細かな設定作業も多く、人力チェックだけではミスも発生してしまいます。<br>プロダクト品質を決める重要要素なのでMUST要件としています。</td></tr><tr><td>標準SQL対応</td><td>MUST</td><td>生成されるDML/DDLが特定のDBに依存した記述になっていないかどうかです。 <br>SQLには標準仕様が存在するので、その仕様に則ることでDBが変わってもツールを変更することなく設計が可能になります。 <br>標準SQLに則っていなくとも、生成されるSQLそのものをカスタマイズできれば要件的にはOKです。</td></tr><tr><td>共同編集可否</td><td>WANT</td><td>スプレッドシートのようにweb上で共同編集できる機能です。 設計立ち上げ期でこういったことができると迅速に立ち上げが可能になります。 個人的には必須ではないと考えますが、昨今のツールはこの手のものも多いので検討要素にはあげておきます。</td></tr><tr><td>価格</td><td>WANT</td><td>最後が価格です。 <br>当然ですが安ければ安いほど良く、無料が望ましい。 <br>ただし、ITプロジェクト全体からすると微々たる費用なので、必要であれば購入しても良いと思います。</td></tr></tbody></table></div><h2 id="ツールごとの比較"><a href="#ツールごとの比較" class="headerlink" title="ツールごとの比較"></a>ツールごとの比較</h2><p>要件をもとにしたツールごとの比較です。</p><div class="scroll"><table><thead><tr><th>要件</th><th>MUST/WANT</th><th>pgModeler</th><th>MySQL Workbench</th><th>Draw.io</th><th>LucidChart</th><th>DBDiagram.io</th><th>A5M2</th></tr></thead><tbody><tr><td>GUI作図機能</td><td>MUST</td><td>○</td><td>○</td><td>○</td><td>○</td><td>×</td><td>○</td></tr><tr><td>DBオブジェクト管理</td><td>MUST</td><td>○</td><td>○</td><td>×</td><td>△</td><td>○</td><td>○</td></tr><tr><td>型桁管理</td><td>MUST</td><td>○</td><td>○</td><td>×</td><td>△</td><td>○</td><td>○</td></tr><tr><td>論理名/物理名管理（日本語対応含む）</td><td>MUST</td><td>○</td><td>○</td><td>○</td><td>○</td><td>×</td><td>○</td></tr><tr><td>DBドメイン管理</td><td>MUST</td><td>○</td><td>○</td><td>×</td><td>×</td><td>×</td><td>○</td></tr><tr><td>DDL生成機能</td><td>MUST</td><td>○</td><td>○</td><td>×</td><td>○</td><td>○</td><td>○</td></tr><tr><td>対応OS</td><td>MUST</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>×</td></tr><tr><td>静的解析/加工可否</td><td>MUST</td><td>△</td><td>△</td><td>×</td><td>×</td><td>×</td><td>○</td></tr><tr><td>標準SQL対応</td><td>MUST</td><td>×</td><td>×</td><td>×</td><td>○</td><td>○</td><td>○</td></tr><tr><td>共同編集可否</td><td>WANT</td><td>×</td><td>×</td><td>○</td><td>○</td><td>○</td><td>×</td></tr><tr><td>価格</td><td>WANT</td><td>○</td><td>○</td><td>○</td><td>△</td><td>△</td><td>○</td></tr></tbody></table></div><h3 id="総評"><a href="#総評" class="headerlink" title="総評"></a>総評</h3><p>それぞれ以下の評価です。<br>満点のツールは存在しないので、短所を何かしらで埋めてあげる対応が必要があります。</p><ul><li><strong>pgModeler</strong><br><a href="https://pgmodeler.io/">https://pgmodeler.io/</a><br>冒頭で記載したPostgreSQLネイティブツールです。<br>DB依存なのと、ファイル形式がバイナリな点が無視できないマイナス要素。<br>自力でzip解凍すればxmlが現れるので、頑張れば解析できなくもありませんが、書き換えは厳しそう。</li><li><strong>MySQL Workbench</strong><br><a href="https://www.mysql.com/jp/products/workbench/">https://www.mysql.com/jp/products/workbench/</a><br>MySQLのネイティブツールです。<br>評価はpgModelerと同様。</li><li><strong>LucidChart</strong><br><a href="https://www.lucidchart.com/pages/ja">https://www.lucidchart.com/pages/ja</a><br>クラウドベースのER図作成ツールで、メインどころのDBには対応しています。（MySQL、PostgreSQL、SQL Server や Oracle）<br>DB管理としては若干機能不足&amp;静的解析は無理そうなので、シビアな現場にはfitしにくそうです。<br>速度優先でガンガン変更を本番に反映していくサービスであれば採用の可能性はあるかと思いますが、<br>どこかのタイミングでしっかりしたツールに乗り換える必要がある印象です。<br>フリー版もありますが、縛りがきびしいので最低でも月額800円程度支払う必要があります。</li><li><strong>DBDiagram.io</strong><br>コードベースでER図を記載できるwebベースツールです。<br>個人で使う分にはありなのですが、GUIでの定義ができない点がチーム展開には厳しいと感じました。<br>また、定義中に日本語を使用することができなく、コメントで対応する必要がありました。<br>無料でも使えますが、バージョン管理など積むと月額9ドル必要です。</li><li><strong>A5M2</strong><br><a href="https://a5m2.mmatsubara.com/">https://a5m2.mmatsubara.com/</a><br>件のwindows向けER図作成ツールです。<br>Macで使えないのと、共同編集不可な点以外は全て要件を満たしています。</li></ul><h2 id="MacでA5M2を使う"><a href="#MacでA5M2を使う" class="headerlink" title="MacでA5M2を使う"></a>MacでA5M2を使う</h2><h3 id="wineで解決"><a href="#wineで解決" class="headerlink" title="wineで解決"></a>wineで解決</h3><p>A5M2の問題はMac版がリリースされていないことですが、wine（Macでexeを使用できるようにするツール）を使用することで解決しました。<br><a href="https://bottoms-programming.com/archives/a5sql-mk-2-after-mac-catalina.html">https://bottoms-programming.com/archives/a5sql-mk-2-after-mac-catalina.html</a></p><p>日本語が文字化けする問題や、そもそも操作感大丈夫なのか？という疑念がMAXで実験的に使ってみたんですが悪くない触り心地でした。</p><p>普通のMacアプリだと保存キーが<code>⌘-S</code>のところ、<code>Ctrl-S</code>になっているなど、WindowsとMacのキーバインド問題はありますが、自前の設定でなんとかなる範疇です。（<code>Ctrl</code>を<code>⌘</code>に置き換える程度で解決）</p><p>(2022.02.26追記) A5:SQL Mk-2開発者の松原さんからコメントいただきました。</p><p><a href="https://a5m2.mmatsubara.com/wp/?p=8950">Arm Mac (M1 Mac) 上で Wine を使ってA5:SQL Mk-2を動作させる方法</a> というエントリーもぜひ確認ください。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Wine を使って Mac 上でA5:SQL Mk-2 を使う記事は自分も書いているのだけれど、いまいち見られていない気がする…？ <a href="https://t.co/kEjCejBgRy">https://t.co/kEjCejBgRy</a> <a href="https://t.co/Bf4qFpxJ6t">https://t.co/Bf4qFpxJ6t</a></p>&mdash; 松原正和 (m.matsubara) (@m_matsubara) <a href="https://twitter.com/m_matsubara/status/1497152258005340160?ref_src=twsrc%5Etfw">February 25, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>なお、この記事が出るより前にwine上で動かすことにトライしたため、コメントを貰うまで記事の存在に気が付きませんでした。すれ違い..。</p><h3 id="A5M2戻ってみて"><a href="#A5M2戻ってみて" class="headerlink" title="A5M2戻ってみて"></a>A5M2戻ってみて</h3><p>以下、いざA5M2に戻ってみてざっと感じたことです。</p><ul><li><strong>リレーション/ドメイン管理の自由度が高い</strong><br>良いのか悪いのかは微妙ですが、変な制約なしに思った通りにリレーションやドメイン管理が可能です。<br>プロダクトのディープな事情についていける点がとても嬉しい。</li><li><strong>ファイル直接操作可能</strong><br>なんと言ってもこの恩恵が大きいです。<br>エディタでgrep置換、スクリプトで論物変換、名称揺れチェック、解析してソースコード生成etc…<br>体感、一回りプロダクトの品質が向上したことを感じます。</li><li><strong>Macで目立ったトラブルもない</strong><br>複数プロジェクトで1年程度wine運用していますが、特段のトラブルもなくER図管理ができています。<br>環境構築も面倒とまではいかないので、プロジェクトメンバへの導入で躓くということもありませんでした。</li></ul><h3 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h3><p>ER図作成ツールの比較した結果全てを満たすツールが見当たらなかったのでMac+wineでA5M2を使用することにしましたが、そもそもMac対応版がリリースされればもっと幸せだったり、webベースツールでもっと良いものが出ればそちらを使用する選択肢が出てくると思います。</p><p>あまり脚光を浴びない割に日進月歩で進化しているので、定期的にウォッチして良いものがあれば別記事を書こうかなと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
    <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
    <category term="ER図" scheme="https://future-architect.github.io/tags/ER%E5%9B%B3/"/>
    
    <category term="DB設計" scheme="https://future-architect.github.io/tags/DB%E8%A8%AD%E8%A8%88/"/>
    
    <category term="A5:SQLMk-2" scheme="https://future-architect.github.io/tags/A5-SQLMk-2/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night #19「新聞業界を変革するクラウドサービス「GlyphFeeds」を支えるAWSサービス」</title>
    <link href="https://future-architect.github.io/articles/20220224a/"/>
    <id>https://future-architect.github.io/articles/20220224a/</id>
    <published>2022-02-23T15:00:00.000Z</published>
    <updated>2022-02-23T23:47:21.942Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220224a/glyphfeeds_top.png" alt="" width="800" height="363"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは！2020年7月入社の原と、2021年4月入社の岡田です。</p><p>2022年1月28日に<a href="https://future.connpass.com/event/236138/">Future Tech Night #19 AWS CodePipelineと新聞向けCMS構築事例</a>を開催しました。<br>こちらの勉強会で「<strong>新聞業界を変革するクラウドサービス「GlyphFeeds」を支えるAWSサービス</strong>」というテーマで発表させていただきました。</p><p><strong>GlyphFeeds</strong>とは、フューチャーが独自開発したメディア業界向けのクラウドサービスです。新聞メディアCMS（基幹システム）をAWSフルクラウド＆Webアーキテクチャで実現しています。<br>フューチャー技術ブログにて<a href="/articles/20200914/">GlyphFeeds連載</a>もしていますので、ぜひご覧ください。</p><h2 id="発表の概要"><a href="#発表の概要" class="headerlink" title="発表の概要"></a>発表の概要</h2><script async class="speakerdeck-embed" data-id="e83ec1aa5554405588af65470638653e" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>はじめに、「GlyphFeeds」のサービス紹介をさせていただきました。<br>そしてGlyphFeedsのAWSサービスについて、大きくわけて2つピックアップして発表しました。</p><p><strong>①「DynamoDB」「OpenSearch」を利用したコンテンツ管理システム</strong><br>新聞社のデータの特性に触れながら、採用したAWSサービスの紹介をしました。<br>DynamoDBでは現在GlyphFeedsで利用しているテーブルの紹介や履歴を保持するテーブルを用いた将来の展望もお話しました。</p><p><strong>② 「CloudFront」と「S3」を組み合わせた動画ストリーミング配信の実現</strong><br>GlyphFeedsに溜まったコンテンツを活用する新規サービスのうち、動画ストリーミング配信の実現について紹介しました。<br>動画ストリーミング配信構成の話のなかでは、動画変換役を担うMediaConvertについても解説しました。</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p><strong>Q1. GlyphFeedsというCMSは他とは何が違って採用されたのでしょうか？</strong></p><p><strong>A1. まずは、クラウドであることだと考えています。</strong><br>従来新聞社はオンプレ環境のクラサバ構成で作られており、専用端末が置いてある場所に行かなければ業務が出来ないというところがネックでした。一方で、GlyphFeedsはクラウド＋Web技術の活用により、例えば自宅からでも編集業務ができるというところがポイントです。<br>また、<strong>検索性の高さも挙げられます。</strong><br>新聞社のデータは色々な種類のデータが混在しており、その中からデータを検索するという作業が多いです。例えば数年に渡るような裁判に対して、事実関係を確認するためにかなり昔の記事を探したいケースがあります。<br>他のCMSでは検索に時間がかかったり検索タイムアウトが発生するということがある一方で、GlyphFeedsではOpenSearchを駆使することでデータ量に依存せず高速な検索が可能です。</p><p><strong>Q2. DynamoDBとOpenSearchへのアクセスをデータストアサーバーに一本化していることの理由は何でしょうか？</strong></p><p><strong>A2.</strong> この2つのサービスでデータの同期を取る必要があったり複数テーブルに書き込みをするため、データ整合担保が必要となります。<br>そのため、フロント側の各機能がそれぞれDynamoDBやOpenSearchのPureAPIを呼び出すよりも、<strong>コンポーネント化したサービスとして一本化する方がスマートなつくりとなるためです。</strong></p><p><strong>Q3. 動画ストリーミング配信構成について</strong><br>S3に動画が置かれたことを契機にLambdaを実行して動くMediaConvertの設定は、AWSマネジメントコンソールで簡単にできますか？また、設定まわりでハマったところはありますか？</p><p><strong>A3. 設定自体はマネジメントコンソールで可能です。</strong><br>（発表ではお伝えできなかったですが）実際には、MediaConvertを呼び出すLambdaの実行のなかで、必要なパラメータを詰めてMediaConvertのCreateJobを実行しています！当初はMediaConvertの動画分割（セグメントの長さ）の設定違いで、ストリーミングになっていないことがありました。</p><p><strong>Q4.Elastic SearchからOpenSearchに名称が変わった際に、何か苦労はありましたか？</strong></p><p><strong>A4. 特にないです。</strong><br>気付いたら変わっていて、何も影響がなかったので良かったです（笑）</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>はじめての勉強会登壇で、ドキドキしながらの発表でした！<br>GlyphFeedsのアーキテクチャ、AWSについてどのように発表に落とし込んで伝えるか悩みましたが、自分自身がよりGlyphFeedsについて学べた勉強会になりました。<br>このイベントをきっかけに、他のAWSサービスについても学び続けていきたいと思います。（岡田）</p><p>私も初めての勉強会への登壇でした！想像していたよりもゆるい雰囲気で、かなりやりやすかったです。<br>新聞社のこともGlyphFeedsのことも知らない社外の方に、短い時間で興味を持ってもらえるよう内容とするところが難しいポイントでした。<br>また、AWSサービスやGlyphFeedsへの自分自身の理解も深まる良い機会となりました。もっと勉強して強くなるので、その時またお手合わせ願います！（原）</p><p>改めて当発表をご視聴いただいた方、そしてここまで当記事を読んでくださった方<br>ありがとうございました。</p><p>次のイベントに関する情報は、フューチャーの<a href="https://future.connpass.com/">connpass</a>で確認できます。ぜひご参加ください！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220224a/glyphfeeds_top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;363&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="CMS" scheme="https://future-architect.github.io/tags/CMS/"/>
    
    <category term="GlyphFeeds" scheme="https://future-architect.github.io/tags/GlyphFeeds/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
  <entry>
    <title>CORSエラーのトラブルシューティング入門</title>
    <link href="https://future-architect.github.io/articles/20220222a/"/>
    <id>https://future-architect.github.io/articles/20220222a/</id>
    <published>2022-02-21T15:00:00.000Z</published>
    <updated>2022-02-22T00:12:26.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。</p><p>TIG DXユニットの宮本達朗です。2020年7月の新卒入社です。</p><p>業務でのフロントエンド開発時に、おなじみCORSエラーでハマってしまったのでそこで学んだ切り分け方法を共有したいと思います。</p><h1 id="CORSエラーのトラブルシュートのために必要なこと"><a href="#CORSエラーのトラブルシュートのために必要なこと" class="headerlink" title="CORSエラーのトラブルシュートのために必要なこと"></a>CORSエラーのトラブルシュートのために必要なこと</h1><ol><li>CORSについて知る<ul><li>CORSが制定された背景を深く知る必要は(トラブルシュートのためには)ないですが、CORSってざっくりどんな仕組みなんだっけ？を知る必要はあります。</li><li>特に<code>プリフライトリクエスト</code>という概念を理解することが重要です。</li><li>(CORS含め、HTTPに関する知識を体系的に学びたい方には<a href="https://www.oreilly.co.jp/books/9784873119038/">こちらの書籍</a>がおすすめです。)</li></ul></li><li>CORSエラーについて知る<ul><li>なぜエラーが出るのか大まかに知っておきましょう。</li></ul></li><li>CORSエラーの場合分け(本記事の主題)<ul><li>手元で発生したCORSエラーを解決するためにどこから手をつければいいかを理解しましょう。</li></ul></li></ol><p>本記事を読むことで上記の理解が深まれば幸いです。</p><h1 id="CORSとは"><a href="#CORSとは" class="headerlink" title="CORSとは"></a>CORSとは</h1><p>オリジン間リソース共有(Cross-Origin Resource Sharing) 略してCORSです。<br>詳細は<a href="https://future-architect.github.io/articles/20200717/#CORS%E3%81%A8%E3%81%AF">こちらの記事</a>にもあります。</p><p>ざっくりいうと、<br><strong>「クライアント側のオリジンとサーバー側のオリジンが異なる場合のリクエストでは、セキュリティを担保するために、ブラウザに以下2つのルールを守らせる仕組み」</strong><br>がCORSです。</p><p>ポイントは<strong>ブラウザに対するルール</strong>である点です。<br>(今日のブラウザはほぼ全てこのルールを遵守するよう作られているようです)</p><ol><li>ブラウザさんは、送りたいリクエスト(メインリクエスト※)の前に「サーバーさん、こういうメインリクエストを今から送ろうとしてるんですが…いいですよね？」という確認用の別リクエスト（プリフライトリクエスト）を、とある条件を満たす場合を除いて、必ずサーバー側に送信しましょう。<ul><li>説明の簡単化のために「とある条件」については<a href="#%E5%8D%98%E7%B4%94%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88">後述</a>しています。</li></ul></li><li>ブラウザさんは、送ったリクエストに対するレスポンスのHTTPヘッダーを都度適切にチェックして、場合によっては「メインリクエスト送信」や「メインリクエストに対するレスポンスをJavaScript側へ引き渡すこと」をブロックしましょう。<ul><li>このブロックこそがCORSエラー！</li></ul></li></ol><p>ちなみに、同じリクエストでもCURLコマンドなら正常に疎通できるのにWebUIからだとCORSエラーになる…と嘆く場面があるかもしれませんが、これはCORSがブラウザ単体に対する仕組みであるためなのです。</p><p>※説明上、「実際に送りたいリクエスト」と「ブラウザ判断でのプリフライトリクエスト」とを区別するために前者を「メインリクエスト」と呼ぶことにします。</p><h1 id="ブラウザがやっていること"><a href="#ブラウザがやっていること" class="headerlink" title="ブラウザがやっていること"></a>ブラウザがやっていること</h1><p>CORSの仕組みに則ったブラウザが裏でやっている(=ユーザーは意識していない)ことは以下です。</p><ul><li>(とある条件を満たす場合を除いて)プリフライトリクエストを送信する</li><li>レスポンスのHTTPヘッダーをチェックする</li></ul><p>プリフライトリクエストとは一体どんなもので、ブラウザはレスポンスのどのようなHTTPヘッダーをチェックしているのか、具体例で説明します。</p><h2 id="シチュエーション"><a href="#シチュエーション" class="headerlink" title="シチュエーション"></a>シチュエーション</h2><p>オリジン<code>https://www.past.example.com</code>のクライアント側から、それとは異なるオリジン<code>https://api.future.example.com</code>のサーバーに対してPUTリクエストを送信しようとしているシチュエーションを考えます。<br><img src="/images/20220222a/image.png" alt="状況説明" width="1200" height="343" loading="lazy"></p><h2 id="プリフライトリクエストとそのレスポンス"><a href="#プリフライトリクエストとそのレスポンス" class="headerlink" title="プリフライトリクエストとそのレスポンス"></a>プリフライトリクエストとそのレスポンス</h2><h3 id="プリフライトリクエスト"><a href="#プリフライトリクエスト" class="headerlink" title="プリフライトリクエスト"></a>プリフライトリクエスト</h3><p>ブラウザはメインリクエストの前に、サーバー側に以下のような内容で自動でプリフライトリクエストを送ります。</p><p>プリフライトリクエストは必ずOPTIONSメソッドで送られます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /api HTTP/1.1</span><br><span class="line">Origin: https://www.past.example.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: xxxx</span><br></pre></td></tr></table></figure><p>上記は、</p><p>オリジン<code>https://www.past.example.com</code>から</p><p>HTTPメソッド<code>PUT</code>でリクエストを送ろうとしているのですがいいですかね？</p><p>ちなみに<code>xxxx</code>というHTTPヘッダーを使うつもりのようです。</p><p>という内容です。</p><img src="/images/20220222a/image_2.png" alt="プリフライト" width="1200" height="436" loading="lazy"><h3 id="プリフライトリクエストに対するレスポンス"><a href="#プリフライトリクエストに対するレスポンス" class="headerlink" title="プリフライトリクエストに対するレスポンス"></a>プリフライトリクエストに対するレスポンス</h3><p>プリフライトリクエストを受信したサーバー側は以下のようなレスポンスを返します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Access-Control-Allow-Origin: https://www.past.example.com</span><br><span class="line">Access-Control-Allow-Method: GET,PUT,OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: xxxx</span><br><span class="line">Access-Control-Max-Age: 10</span><br></pre></td></tr></table></figure><p>上記は、</p><p>オリジン<code>https://www.past.example.com</code>からなら、HTTPメソッド<code>GET</code>, <code>PUT</code>, <code>OPTIONS</code>でのリクエストに限ってはOKです。その時使ってもいいHTTPヘッダーは<code>xxxx</code>です。</p><p>ちなみに、今から<code>10</code>秒間だけならこのレスポンスをキャッシュしていいですよ。<br>(10秒以上経ったら再度プリフライトリクエストを送り直してください)</p><p>という内容です。</p><img src="/images/20220222a/image_3.png" alt="プリフライトリクエストに対するレスポンス" width="1200" height="495" loading="lazy"><h3 id="プリフライトリクエストのレスポンスでチェックされるHTTPヘッダー"><a href="#プリフライトリクエストのレスポンスでチェックされるHTTPヘッダー" class="headerlink" title="プリフライトリクエストのレスポンスでチェックされるHTTPヘッダー"></a>プリフライトリクエストのレスポンスでチェックされるHTTPヘッダー</h3><p>プリフライトリクエストのレスポンスを受け取ったブラウザはHTTPヘッダーをチェックします。</p><p>サーバー側へのアクセス許可を示す以下のHTTPヘッダー</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin</span><br><span class="line">Access-Control-Allow-Method</span><br><span class="line">Access-Control-Allow-Headers</span><br></pre></td></tr></table></figure><p>をチェックして、これから送るメインリクエストがサーバー側から</p><ul><li>アクセスを許可されているオリジンから送られるか？</li><li>許可されているHTTPメソッドか？</li><li>許可されているHTTPヘッダーだけを利用しているか？</li></ul><p>を確認し、もしOKならばメインリクエストの送信を実行します。</p><p>ちなみに<code>Access-Control-Allow-Origin</code>に指定できるのは1つのオリジンまたはワイルドカード(*)のみです。<br>※ただしワイルドカードはセキュリティ上の理由から利用を避けた方が良いようです。</p><h2 id="メインリクエストとそのレスポンス"><a href="#メインリクエストとそのレスポンス" class="headerlink" title="メインリクエストとそのレスポンス"></a>メインリクエストとそのレスポンス</h2><h3 id="メインリクエスト"><a href="#メインリクエスト" class="headerlink" title="メインリクエスト"></a>メインリクエスト</h3><p>プリフライトリクエストのレスポンスに問題がなかった場合、ブラウザはメインリクエストを送ります。<br>（この場合はPUTリクエスト）<br><img src="/images/20220222a/image_4.png" alt="メインリクエスト" width="1200" height="412" loading="lazy"></p><h3 id="メインリクエストに対するレスポンス"><a href="#メインリクエストに対するレスポンス" class="headerlink" title="メインリクエストに対するレスポンス"></a>メインリクエストに対するレスポンス</h3><p>サーバー側は送られたPUTリクエストに対するレスポンスを返します。<br>ただし、レスポンスには</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: https://www.past.example.com</span><br></pre></td></tr></table></figure><p>のようにHTTPヘッダー<code>Access-Control-Allow-Origin</code>が付与されている必要があります。</p><h3 id="メインリクエストのレスポンスでチェックされるHTTPヘッダー"><a href="#メインリクエストのレスポンスでチェックされるHTTPヘッダー" class="headerlink" title="メインリクエストのレスポンスでチェックされるHTTPヘッダー"></a>メインリクエストのレスポンスでチェックされるHTTPヘッダー</h3><p>ここでブラウザが確認するHTTPヘッダーは上記<code>Access-Control-Allow-Origin</code>です。<br>ブラウザは<br>「<code>Access-Control-Allow-Origin</code>に記載のオリジンであればJavaScript側にレスポンス内容を引き渡して良い」<br>と解釈し、クライアント側のオリジンと一致しているかどうかを確認します。</p><p>オリジンが一致していた場合、レスポンスが無事引き渡されます。</p><img src="/images/20220222a/image_5.png" alt="メインリクエストに対するレスポンス" width="1200" height="518" loading="lazy"><h1 id="CORSエラーの発生ポイント"><a href="#CORSエラーの発生ポイント" class="headerlink" title="CORSエラーの発生ポイント"></a>CORSエラーの発生ポイント</h1><p>上記を踏まえると、CORSエラーが発生するポイントは以下2つです。</p><ol><li><strong>プリフライトリクエストに対するレスポンスのHTTPヘッダーをブラウザがチェックした結果、「このあとメインリクエストを送信してはダメ」と判断したとき</strong><ul><li>つまり以下のHTTPヘッダーが適切ではなかった場合<ul><li>Access-Control-Allow-Origin</li><li>Access-Control-Allow-Method</li><li>Access-Control-Allow-Headers</li></ul></li></ul></li><li><strong>メインリクエストに対するレスポンスのHTTPヘッダーをブラウザがチェックした結果、「このレスポンスはJavascript側に引き渡してはダメ」と判断したとき</strong><ul><li>つまり以下のHTTPヘッダーが適切ではなかった場合<ul><li>Access-Control-Allow-Origin</li></ul></li></ul></li></ol><p>ここで、<strong>プリフライトリクエストもメインリクエストも同一のサーバーへのリクエストなのだから、結局はサーバー側で「所望のHTTPヘッダーを返す」設定をミスしているのがCORSエラーの原因なのね</strong>、と思われるかもしれませんが、実はそうとは言い切れないです。</p><p>というのも、CORSの仕組みに則っているブラウザは単純に「レスポンスのHTTPヘッダー」だけを見るため、リクエストがインフラ要因によってサーバーや意図したリソースに届かなかった場合や、認証などで弾かれた場合(=リクエストが失敗した場合)にもHTTPヘッダーはチェックされるからです。</p><p>その結果、サーバーでは適切にレスポンスのHTTPヘッダーを設定しているのに「CORSエラー」となることがあります。</p><p>したがって、<strong>リクエスト種別</strong>(プリフライト or メイン)と<strong>HTTPステータスコード</strong>(200 or NOT)での場合分けが必要になります。</p><h1 id="トラブルシュート"><a href="#トラブルシュート" class="headerlink" title="トラブルシュート"></a>トラブルシュート</h1><p>やっと本題ですが、リクエスト種別とHTTPステータスコードで場合分けした以下4パターンについて、どこから手をつけるべきかを整理していきます。</p><ol><li><strong>プリフライトリクエストの応答が200ではなく、CORSエラーが発生したケース。</strong></li><li><strong>プリフライトリクエストの応答は200でOKだったが、メインリクエストを送る前にCORSエラーが発生したケース。</strong></li><li><strong>メインリクエストの応答が200ではなく、CORSエラーが発生したケース。</strong></li><li><strong>メインリクエストの応答は200でOKだったが、CORSエラーが発生したケース。</strong></li></ol><p>実際の切り分けの際には上から順に疑ってみてください。</p><h2 id="パターン1-プリフライトリクエストの応答が200ではない"><a href="#パターン1-プリフライトリクエストの応答が200ではない" class="headerlink" title="パターン1: プリフライトリクエストの応答が200ではない"></a>パターン1: プリフライトリクエストの応答が200ではない</h2><p>プリフライトリクエストの応答が200ではないため、CORSエラーが発生したケースです。</p><p>基本的には<strong>サーバー側の実装ミス</strong>もしくは<strong>インフラ側の設定ミス</strong>が疑われます。</p><p>サーバー側でAPIのハンドラーを実装したはいいものの、プリフライトリクエストに対する処理を実装・設定し忘れているケースが考えられます。<br>（特に初回疎通の際などにハマりやすい）<br>サーバー側でプリフライトリクエストのハンドリングが実装されているか確認しましょう。</p><p>それでもCORSエラーが解決しない場合、インフラ側の設定ミスを疑っていいと思います。愚直にプリフライトリクエストがどこまで到達したのかを確認しましょう。プリフライトリクエストがOPTIONSメソッドであるための考慮漏れがあるあるかもしれません。</p><p>AWSを例に出すと、WAFで弾かれていたり、APIGateWayでOPTIONSメソッドが定義されておらず403だったり、Authorizerで弾いて403だったり…などが考えられるかと思います。</p><p>WAFで弾かれていた実例は<a href="https://future-architect.github.io/articles/20200717/">こちらの記事</a>にありますのでよければご覧ください。</p><h2 id="パターン2-プリフライトリクエストの応答が200だがCORSエラー"><a href="#パターン2-プリフライトリクエストの応答が200だがCORSエラー" class="headerlink" title="パターン2: プリフライトリクエストの応答が200だがCORSエラー"></a>パターン2: プリフライトリクエストの応答が200だがCORSエラー</h2><p>プリフライトリクエストの応答は200でOKだったが、メインリクエストを送る前にCORSエラーが発生したケースです。</p><p>基本的には<strong>サーバー側の実装ミス</strong>が疑われます。</p><p>プリフライトリクエストに対する応答での</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin</span><br><span class="line">Access-Control-Allow-Method</span><br><span class="line">Access-Control-Allow-Headers</span><br></pre></td></tr></table></figure><p>が適切に実装されているのかを見直しましょう。</p><h2 id="パターン3-メインリクエストの応答が200ではない"><a href="#パターン3-メインリクエストの応答が200ではない" class="headerlink" title="パターン3: メインリクエストの応答が200ではない"></a>パターン3: メインリクエストの応答が200ではない</h2><p>メインリクエストの応答が200ではないため、CORSエラーが発生したケースです。</p><p>こちらも基本的には<strong>インフラ側の設定ミス</strong>が疑われます。</p><p>プリフライトリクエストが200でないケースと同様に、愚直にメインリクエストがどこまで到達したのかを確認しましょう。</p><p>AWSを例に出すと、WAF、APIGateway、Authorizerの他、S3の設定ミスなども考えられるかと思います。</p><h2 id="パターン4-メインリクエストの応答が200だがCORSエラー"><a href="#パターン4-メインリクエストの応答が200だがCORSエラー" class="headerlink" title="パターン4: メインリクエストの応答が200だがCORSエラー"></a>パターン4: メインリクエストの応答が200だがCORSエラー</h2><p>メインリクエストの応答は200でOKだったが、CORSエラーが発生したケースです。</p><p>基本的には<strong>サーバー側の実装ミス</strong>が疑われます。</p><p>メインリクエストに対する応答での</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin</span><br></pre></td></tr></table></figure><p>が適切に実装されているのかを見直しましょう。</p><h1 id="単純リクエスト"><a href="#単純リクエスト" class="headerlink" title="単純リクエスト"></a>単純リクエスト</h1><p>ここまで、プリフライトリクエスト→メインリクエストの順にリクエストが送られるのがさも当たり前かのように話をしてきましたが、実は例外があります。<br>それが「メインリクエストが単純リクエストに該当する」とみなされる場合です。</p><p>メインリクエストが単純リクエストに該当する場合、ブラウザは「プリフライトリクエストは送信せずにいきなりメインリクエストを送ってOK」と判断し、そのように実行されます。</p><p>本記事ではCORSエラーの解決に焦点を当てていますので、単純リクエストについて詳しく知りたい方は<a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CORS#%E5%8D%98%E7%B4%94%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88">こちら</a>をご参考ください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>CORSとは、あるオリジンで動作しているウェブアプリケーションに、異なるオリジンにある選択されたリソースへのアクセス権を与えるようブラウザに指示するための仕組み</li><li>CORSエラーとは、ブラウザ側がレスポンスのHTTPヘッダーをチェックした結果、「指定リソースにアクセスする許可がない」と判定し、後続処理をブロックした場合に出るエラー</li><li>切り分けパターンとしては以下がある<ol><li>プリフライトリクエストの応答が200ではなく、CORSエラーが発生したケース。</li><li>プリフライトリクエストの応答は200でOKだったが、メインのリクエストを送る前にCORSエラーが発生したケース。</li><li>メインリクエストの応答が200ではなく、CORSエラーが発生したケース。</li><li>メインリクエストの応答は200でOKだったが、CORSエラーが発生したケース。</li></ol></li></ul><p>お付き合いいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして。&lt;/p&gt;
&lt;p&gt;TIG</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
    <category term="CORS" scheme="https://future-architect.github.io/tags/CORS/"/>
    
    <category term="トラブルシューティング" scheme="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>Groovyスクリプトで、ファイルの最終更新日時をgit clone/pullの日時ではなく、commit日時にしてみた</title>
    <link href="https://future-architect.github.io/articles/20220221a/"/>
    <id>https://future-architect.github.io/articles/20220221a/</id>
    <published>2022-02-20T15:00:00.000Z</published>
    <updated>2022-02-21T01:06:30.716Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、TIG コアテクノロジーユニットの田中です。</p><p>ファイルの最終更新日時を上書きするスクリプトをGroovyで書く機会があったので紹介します。</p><ul><li>Groovy 4.0.0</li><li>JVM 1.8.0_121</li><li>Perl 5.32.1</li></ul><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>git clone/pullした時に、ローカルにチェックアウトされたファイルの最終更新日時がどうなっているかご存知でしょうか。</p><p>答えは<code>git clone/pullした時刻</code>です。(pullした場合はcommitがあったファイルのみ最終更新日時が変わります)</p><p>この時困るのが、ファイルの最終更新日時を見てファイルの更新有無を判定し、更新があったファイルにのみ処理を実行する、いわゆる<code>差分解析</code>のような事を行いたいケースです。</p><p>git cloneをやり直した場合、全てのファイルの最終更新日時が変わってしまうので、結局差分解析が全てのファイルに対して走ってしまいます。pullした場合はcommitがあったファイルのみ最終更新日時が変わるので、基本的にはcloneはやり直さずpullし続ければ意図通りの差分解析を行う事は可能です。</p><p>しかし例えば、Jenkinsでスポットインスタンスを立ち上げた場合や、GitHub Actions/GitLab CIで実行した場合など、毎回git cloneが必要な場合があります。</p><p>こういった状況でも差分解析を意図通りに行うため、ファイルの最終更新日時をcloneした日時ではなく、<code>commitした日時</code>である必要があります。</p><p>実はこれを実現するためのPerlスクリプトがgit公式から配布されています。今回はJVMで動かしたかったので、同様の処理を行う<code>Groovyスクリプト</code>を作成しました。</p><h1 id="Perlスクリプト"><a href="#Perlスクリプト" class="headerlink" title="Perlスクリプト"></a>Perlスクリプト</h1><p>まずはPerlスクリプトを用いた方法から紹介していきます。</p><p>git公式で配布されているPerlスクリプトは<a href="https://git.wiki.kernel.org/index.php/ExampleScripts#Setting_the_timestamps_of_the_files_to_the_commit_timestamp_of_the_commit_which_last_touched_them">こちら</a>にあります。</p><p>このスクリプトの探索および内容理解のため以下記事を参考にしました。</p><ul><li><a href="https://qiita.com/mAster_rAdio/items/246fcab7984e50d7d66f">ファイルのタイムスタンプをコミット日時に合わせる - Qiita</a></li><li><a href="https://srz-zumix.blogspot.com/2020/06/git.html">[GIT] 「ファイルのタイムスタンプをコミット日時に合わせる」を爆速にした - ブログズミ</a></li></ul><p>Perlスクリプトの全量は以下です。</p><p>処理の方針としては比較的単純です。</p><ol><li>gitの<code>コミットログ</code>から各ファイルのコミット情報を取得</li><li>コミットの新しい順に、対応するローカルファイルの最終更新時間をコミット時間で上書き</li><li>コミットログで同一ファイルが出てきたら、最新のコミット時間を優先</li></ol><p>ローカルのgit定義フォルダルートでスクリプトを実行すると、各ファイルの最終更新時間がコミット時間に変更されます。</p><figure class="highlight bash"><figcaption><span>実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ perl git-set-file-times.pl</span><br></pre></td></tr></table></figure><figure class="highlight perl"><figcaption><span>git-set-file-times.pl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl -w</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitレポジトリのファイル一覧格納用</span></span><br><span class="line"><span class="keyword">my</span> %ls = ();</span><br><span class="line"><span class="comment"># コミット時間格納用</span></span><br><span class="line"><span class="keyword">my</span> $commit_time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($ENV<span class="string">&#123;GIT_DIR&#125;</span>) &#123;</span><br><span class="line">    <span class="comment"># GIT_DIR環境変数を定義しておくとgit定義ディレクトリに遷移</span></span><br><span class="line"><span class="keyword">chdir</span>($ENV<span class="string">&#123;GIT_DIR&#125;</span>) <span class="keyword">or</span> <span class="keyword">die</span> $!;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区切り文字としてASCII NULを指定</span></span><br><span class="line">$/ = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line"><span class="comment"># gitレポジトリのファイル一覧を取得</span></span><br><span class="line"><span class="keyword">open</span> FH, <span class="string">&#x27;git ls-files -z|&#x27;</span> <span class="keyword">or</span> <span class="keyword">die</span> $!;</span><br><span class="line"><span class="keyword">while</span> (&lt;FH&gt;) &#123;</span><br><span class="line">    <span class="comment"># 文字列末尾の改行文字を削除</span></span><br><span class="line"><span class="keyword">chomp</span>;</span><br><span class="line">    <span class="comment"># ファイルパスをマップ($ls)に格納</span></span><br><span class="line">$ls&#123;$_&#125; = $_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">close</span> FH;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区切り文字として改行(\n)を指定</span></span><br><span class="line">$/ = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment"># gitのコミットログを取得</span></span><br><span class="line"><span class="keyword">open</span> FH, <span class="string">&quot;git log -m -r --name-only --no-color --pretty=raw -z @ARGV |&quot;</span> <span class="keyword">or</span> <span class="keyword">die</span> $!;</span><br><span class="line"><span class="keyword">while</span> (&lt;FH&gt;) &#123;</span><br><span class="line"><span class="keyword">chomp</span>;</span><br><span class="line">    <span class="comment"># 「comitter」キーワード行に記載されているcommit日時を抽出</span></span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/^committer .*? (\d+) (?:[\-\+]\d+)$/</span>) &#123;</span><br><span class="line">$commit_time = $1;</span><br><span class="line">    <span class="comment"># 「commit」キーワード直前にcommit対象ファイル一覧が記載されている</span></span><br><span class="line">    <span class="comment"># sedでcommit以降を除去しcommit対象ファイル一覧を抜き出す</span></span><br><span class="line">&#125; <span class="keyword">elsif</span> (<span class="regexp">s/\0\0commit [a-f0-9]&#123;40&#125;( \(from [a-f0-9]&#123;40&#125;\))?$//</span> <span class="keyword">or</span> s/\<span class="number">0</span>$//) &#123;</span><br><span class="line">        <span class="comment"># コミットの新しい順に処理</span></span><br><span class="line">        <span class="comment"># １度更新したファイルはファイル一覧(@ls)から削除する事で最新のコミット時間のみ反映</span></span><br><span class="line"><span class="keyword">my</span> @files = <span class="keyword">delete</span> @ls&#123;<span class="keyword">split</span>(<span class="regexp">/\0/</span>, $_)&#125;;</span><br><span class="line">@files = <span class="keyword">grep</span> &#123; <span class="keyword">defined</span> $_ &#125; @files;</span><br><span class="line"><span class="keyword">next</span> <span class="keyword">unless</span> @files;</span><br><span class="line">        <span class="comment"># ローカルファイルの最終更新時間を変更する</span></span><br><span class="line"><span class="keyword">utime</span> $commit_time, $commit_time, @files;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">last</span> <span class="keyword">unless</span> %ls;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">close</span> FH;</span><br></pre></td></tr></table></figure><p>イメージしやすさのため、各gitコマンドで取得されるデータ例を記載しておきます。</p><ul><li><code>git ls-files -z</code><ul><li><code>-z</code>をつけているため、ファイルはASCII NULで区切られています。</li><li><code>&lt;0x00&gt;</code>の箇所にASCII NULが入っています。</li><li>ターミナルやコマンドプロンプトでgit ls-files -z してもNULは見えないのですが、Groovyで<code>&#39;git ls-files -z&#39;.execute().text</code>の実行結果をファイルに出力後、<a href="https://www.sublimetext.com/3">Windows版Sublime Text</a>で確認しました。<br>エディタやビューアによってはNUL文字表示をサポートしていないものがあるようです。</li></ul></li></ul><img src="/images/20220221a/image.png" alt="NUL文字表示" width="941" height="162" loading="lazy"><ul><li><code>git log -m -r --name-only --no-color --pretty=raw -z</code><ul><li><code>--name-only</code>で更新ファイルの情報を表示します。</li><li><code>-z</code>で1コミットログがASCII NULで区切られます。</li><li>git logのオプション詳細は<a href="https://git-scm.com/docs/git-log">こちら</a>。</li><li><code>&lt;0x00&gt;</code>の箇所にASCII NULが入っています。</li><li>この出力の見方は、<code>git ls-files</code>の出力の見方と同様です。</li></ul></li></ul><img src="/images/20220221a/image_2.png" alt="git log出力" width="1124" height="785" loading="lazy"><h1 id="Groovyスクリプト"><a href="#Groovyスクリプト" class="headerlink" title="Groovyスクリプト"></a>Groovyスクリプト</h1><p>さて本題のGroovyスクリプトです。</p><p>処理の流れは基本的にPerlスクリプトの時と同じです。</p><p>スクリプトの全量は以下です。ローカルのgit定義フォルダルートでスクリプトを実行すると、各ファイルの最終更新時間がコミット時間に変更されます。</p><figure class="highlight bash"><figcaption><span>実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ groovy git-set-file-times.groovy</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><figcaption><span>git-set-file-times.groovy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gitレポジトリのファイル一覧を取得</span></span><br><span class="line">files = <span class="string">&#x27;git ls-files -z&#x27;</span>.execute().text.split(<span class="string">&quot;\0&quot;</span>).collect()</span><br><span class="line"><span class="comment">// gitコミットログを取得</span></span><br><span class="line">logs = <span class="string">&#x27;git log -m -r --name-only --no-color --pretty=raw -z&#x27;</span></span><br><span class="line">       .execute().text.split(<span class="string">&quot;\n&quot;</span>).collect()</span><br><span class="line"><span class="comment">// 更新日時抜き出し用</span></span><br><span class="line">pattern_update_time = <span class="regexp">/^committer .*? (\d+) (?:[\-\+]\d+)$/</span></span><br><span class="line"><span class="comment">// 更新ファイル抜き出し用</span></span><br><span class="line">pattern_update_files = <span class="regexp">/^(.+?)commit [a-f0-9]&#123;40&#125;(?:| \(from [a-f0-9]&#123;40&#125;\))$/</span></span><br><span class="line"><span class="keyword">def</span> update_time</span><br><span class="line"><span class="keyword">for</span> (log <span class="keyword">in</span> logs) &#123;</span><br><span class="line">(log =~ pattern_update_time).each&#123;</span><br><span class="line">update_time = it[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">(log =~ pattern_update_files).each&#123;</span><br><span class="line">update_files = it[<span class="number">1</span>]</span><br><span class="line"><span class="comment">// 複数ファイルの場合はASCII Null(\0)で区切られているので分割</span></span><br><span class="line"><span class="keyword">for</span>(update_file <span class="keyword">in</span> update_files.split(<span class="string">&quot;\0&quot;</span>).collect())&#123;</span><br><span class="line"><span class="comment">// コミットの新しい順に更新時間を書き換えていく</span></span><br><span class="line"><span class="comment">// 一度処理を行ったファイルはファイル一覧から削除する</span></span><br><span class="line"><span class="keyword">if</span>(files.remove(update_file))&#123;</span><br><span class="line">f = <span class="keyword">new</span> File(update_file)</span><br><span class="line"><span class="comment">// ローカルファイルの最終更新日時を変更する</span></span><br><span class="line"><span class="comment">// 1000倍することで13桁に合わせる(000msを追加している)</span></span><br><span class="line">f.setLastModified((update_time <span class="keyword">as</span> <span class="keyword">long</span>) * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下ポイントを絞ってソースの解説をしていきます。<br>基本的にはJavaと同じ感覚で書く事が出来ます。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files = <span class="string">&#x27;git ls-files -z&#x27;</span>.execute().text.split(<span class="string">&quot;\0&quot;</span>).collect()</span><br></pre></td></tr></table></figure><ul><li><code>&#39;command&#39;.execute()</code>でコマンドを実行<ul><li><code>execute(null, new File(base_dir))</code>のように書くことで、指定したディレクトリ配下で実行できる (Jenkins等で実行する場合に有用)</li></ul></li><li><code>text</code>で実行結果の文字列を取得</li><li><code>split(&quot;\0&quot;)</code>で文字列をASCII NULで分割</li><li><code>collect()</code>で分割した文字列をList化</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新日時抜き出し用</span></span><br><span class="line">pattern_update_time = <span class="regexp">/^committer .*? (\d+) ([\-\+]\d+)$/</span></span><br><span class="line">...</span><br><span class="line">(log =~ pattern_update_time).each&#123;</span><br><span class="line">        update_time = it[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><code>文字列 =~ /正規表現/</code>で、正規表現にマッチした文字列を探索出来る</li><li><code>it</code>で正規表現文字列に一致した文字列を取得</li><li><code>it[1]</code>のように指定することでグループ化した文字列を取得</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(files.remove(update_file))&#123;</span><br><span class="line">  f = <span class="keyword">new</span> File(update_file)</span><br><span class="line">  <span class="comment">// ローカルファイルの最終更新日時を変更する</span></span><br><span class="line">  <span class="comment">// 1000倍することで13桁に合わせる(000msを追加している)</span></span><br><span class="line">  f.setLastModified((update_time <span class="keyword">as</span> <span class="keyword">long</span>) * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>files.remove(update_file)</code>で配列filesから<code>update_file</code>要素を削除。削除出来た場合はtrueを返す。</li><li><code>f = new File(update_file)</code>で、<code>update_file</code>で指定したローカルファイルを取得</li><li><code>f.setLastModified((update_time as long) * 1000)</code>で、ファイルの最終更新時間を上書き。コミットログで取得したUnix時間は10桁なので、13桁に合わせるため1000倍している。</li></ul><p>Groovyのキャッチアップは以下のサイトを参考にしました。</p><ul><li><a href="https://koji-k.github.io/groovy-tutorial/index.html">Apache Groovyチュートリアル</a></li><li><a href="https://codezine.jp/article/detail/3757">Groovyってどんな言語？JavaプログラマのためのGroovy入門 - CodeZine</a></li><li><a href="https://qiita.com/saba1024/items/61aeaf36061df35f8bee">[Groovy]正規表現メモ - Qiita</a></li></ul><h1 id="処理時間の比較"><a href="#処理時間の比較" class="headerlink" title="処理時間の比較"></a>処理時間の比較</h1><p>それぞれのスクリプトを、23,898ファイルを持つgitプロジェクトで実行して処理時間を測定しました。対象プロジェクトの開発期間は6年程で、コミットログもそれなりに育っているという状況です。(4334コミット)</p><p>git clone/pullの時間は含んでおらず、純粋なスクリプト実行時間のみを測定しています。Perlスクリプトのほうが速いという結果にはなりましたが、<code>Groovyスクリプトでも2.4万ファイルに対して約5秒</code>と十分な性能である事が確認できました。</p><div class="scroll"><table><thead><tr><th>スクリプト</th><th>処理時間(3回平均)</th></tr></thead><tbody><tr><td>Groovy</td><td>5.0 秒</td></tr><tr><td>Perl</td><td>2.2 秒</td></tr></tbody></table></div><p>処理時間はコマンドプロンプト使用、以下コマンド実行で測定しました。</p><ul><li><a href="https://qiita.com/kazufusa/items/40caaf192e7f719bc1bd">cmdで簡単な処理時間計測 - Qiita</a></li></ul><figure class="highlight bash"><figcaption><span>Perl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -C (Measure-Command &#123;perl git-set-file-times.pl&#125;).TotalSeconds</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>Groovy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -C (Measure-Command &#123;groovy git-set-file-times.groovy&#125;).TotalSeconds</span><br></pre></td></tr></table></figure><h1 id="Groovyスクリプト改良版"><a href="#Groovyスクリプト改良版" class="headerlink" title="Groovyスクリプト改良版"></a>Groovyスクリプト改良版</h1><p>git logのオプションでフォーマットを指定すると、変更に強く、かつスッキリとしたソースになります。</p><p><code>--pretty=&quot;--pretty=format:&quot;update_time:%ct&quot;</code>と<code>--name-only</code>を指定することで、必要最小限の情報、コミット時間と更新ファイルのみを出力させる事が出来ます。<code>--pretty</code>の詳細は<a href="https://git-scm.com/docs/pretty-formats">こちらのwiki</a>を参考にして下さい。</p><figure class="highlight groovy"><figcaption><span>git-set-file-times.groovy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// レポジトリのファイル一覧を取得する</span></span><br><span class="line">files = <span class="string">&#x27;git ls-files -z&#x27;</span>.execute().text.split(<span class="string">&quot;\0&quot;</span>).collect()</span><br><span class="line"><span class="comment">// コミットログを取得する</span></span><br><span class="line">logs = <span class="string">&#x27;git log -m -r --name-only --no-color --pretty=format:&quot;update_time:%ct&quot; -z&#x27;</span></span><br><span class="line">.execute().text.split(<span class="string">&quot;update_time:&quot;</span>).collect()</span><br><span class="line"><span class="comment">// 情報抜き出し用の正規表現</span></span><br><span class="line">pattern = <span class="regexp">/^(?&lt;updateTime&gt;\d+)\n(?&lt;updateFiles&gt;.+)$/</span></span><br><span class="line"><span class="keyword">for</span> (log <span class="keyword">in</span> logs) &#123;</span><br><span class="line"><span class="keyword">def</span> matcher = log =~ pattern</span><br><span class="line"><span class="keyword">if</span>(matcher.matches()) &#123;</span><br><span class="line">update_time = matcher.group(<span class="string">&quot;updateTime&quot;</span>)</span><br><span class="line">update_files = matcher.group(<span class="string">&quot;updateFiles&quot;</span>)</span><br><span class="line"><span class="comment">// 複数ファイルの場合はASCII Null(\0)で区切られているので分割</span></span><br><span class="line"><span class="keyword">for</span>(update_file <span class="keyword">in</span> update_files.split(<span class="string">&quot;\0&quot;</span>).collect())&#123;</span><br><span class="line"><span class="comment">// コミットの新しい順に更新時間を書き換えていく</span></span><br><span class="line"><span class="comment">// 一度処理を行ったファイルはファイル一覧から削除する</span></span><br><span class="line"><span class="keyword">if</span>(files.remove(update_file))&#123;</span><br><span class="line">f = <span class="keyword">new</span> File(update_file);</span><br><span class="line"><span class="comment">// ローカルのファイルの最終更新日時を変更する</span></span><br><span class="line"><span class="comment">// 1000倍することで13桁に合わせる(000msを追加している)</span></span><br><span class="line">f.setLastModified((update_time <span class="keyword">as</span> <span class="keyword">long</span>) * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この場合のgit log出力例は以下のようになります。</p><ul><li><code>git log -m -r --name-only --no-color --pretty=format:&quot;update_time:%ct&quot; -z</code></li></ul><img src="/images/20220221a/image_3.png" alt="git log出力例" width="1200" height="205" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>GroovyスクリプトはJavaと同じ感覚で書けるので、普段Javaを使っている方はほとんどキャッチアップコストをかけずに習得出来ると思います。</p><p>シェルやPerlスクリプトが少し使い難いなと思っている方にはオススメです。</p><p>コアテクノロジーユニットでは、現在チームメンバーを募集しています。</p><p>私たちと一緒にテクノロジーで設計、開発、テストの高品質・高生産性を実現する仕組みづくりをしませんか？</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;こんにちは、TIG コアテクノロジーユニットの田中です。&lt;/p&gt;
&lt;p&gt;ファイルの最終更新日時を上書きするスクリプトをGroovyで書く機会があったので紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Groovy 4.0.0&lt;/li&gt;
&lt;li&gt;JVM</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Git" scheme="https://future-architect.github.io/tags/Git/"/>
    
    <category term="Groovy" scheme="https://future-architect.github.io/tags/Groovy/"/>
    
    <category term="Perl" scheme="https://future-architect.github.io/tags/Perl/"/>
    
  </entry>
  
  <entry>
    <title>認定スクラムマスターの資格を取得しました</title>
    <link href="https://future-architect.github.io/articles/20220218a/"/>
    <id>https://future-architect.github.io/articles/20220218a/</id>
    <published>2022-02-17T15:00:00.000Z</published>
    <updated>2022-02-18T01:35:15.693Z</updated>
    
    <content type="html"><![CDATA[<p>2/3, 2/4に永和システムさんのAgile　Studio主催の認定スクラムマスター研修を受けてきて、認定スクラムマスターの資格を取得しました。</p><img src="/images/20220218a/AgileStudioロゴ.png" alt="AgileStudioロゴ.png" width="1200" height="613" loading="lazy"><p><a href="https://www.agile-studio.jp/scrum-training">https://www.agile-studio.jp/scrum-training</a></p><p>日本で提供されているスクラムマスターの資格にはScrum Alliance版のCSM®(Certified Scrum Master)とScrum Inc版のLSM(Licensed Scrum Master)があります。Agile Studioの認定は後者のScrum Inc版となります。どちらかというと前者の方が長く開催されているので、こちらの認定を取っている人が多いと思います。Scrum Inc版も、Agile Studioさんの方もまだ開始されてから日も浅く、これからどんどん開催されていくと思いますので、どんな研修だったのか、というのを参考のためにブログに書いておこうと思います。</p><p>僕自身は、2003年に出した日本最初の<a href="https://www.amazon.co.jp/dp/4894715899">アジャイルソフトウェア開発スクラム</a>という本の翻訳に参加していたり、Scrumへの関わりは20年近くになりますし、Scrumを採用した案件などもいくつか経験したりしていて、だいたいはわかっているという状態ではありますが、アジャイルで内製開発したい！というお客さんが今後増えていくということも想定して、きちんとした認定資格を持って手札を増やしておきたいな、ということで受講しました。</p><p>そもそも、認定を取ろうと思ったのは、昔からの知人のあまのりょーさんの書き込みを見て興味を持ったのが最初のきっかけでしたし、日本で最初のアジャイルコミュニティであるXP-jp（メーリングリスト）を作った平鍋さんが社長をされていて、アジャイル系のイベントなども開催していた日本のアジャイルの歴史書が作られるとしたら確実に名前が乗るであろう永和システムマネジメントさんの研修ならよかろう、と思ってこちらを選びました。</p><img src="/images/20220218a/スクリーンショット_2022-02-05_18.24.03.png" alt="スクリーンショット_2022-02-05_18.24.03.png" width="1068" height="796" loading="lazy"><h1 id="研修の内容"><a href="#研修の内容" class="headerlink" title="研修の内容"></a>研修の内容</h1><p>研修は2日（4Hx4)で、講義ありワークあり、という感じです。Zoomのオンライン開催に合わせた感じで構成されており、ワークだけでなく、休憩時間もブレークアウトルームに分かれて休憩になるので、気軽にトレーナーに質問できる体制になっていました。オンラインだと大人数の部屋だと会話するのもチャットするのも大変ですからね。</p><p>Scrum Masterの研修なので、基本的には無料で公開されているScrum Guideの内容（概要のみが書かれている）をもっと細かく説明したり、実践するための技法を紹介したり、といった感じでした。僕は最初の本が出た当時のScrumは知っていましたが、そこからのアップデートの話もありました。</p><p>基本的にScrum Incの教材をもとに進んでいくのですが、さすがは永和さんという感じで、オリジナルコンテンツも随所に挟まれており、今までのアジャイルの案件の中でよく課題になった内容が盛り込まれています。資料のページ数的には説明のあった範囲(ワークショップ部分を抜いて)の15%ぐらい？平鍋さんによるScrumが作られるまでの歴史やその後のアップデートの講義もあります。</p><p>また、今時の状況などを踏まえ、完全リモートでScrumを行なったときの情報管理（オンラインホワイトボード）やら、いろいろチャレンジしたこと、現在うまく回っている仕組みなどの紹介もありました。</p><p>あと、解説はなかったのですが、興味のあったScrum@Scaleの話も資料の末尾におまけでついていて、休憩時間中や懇親会でいろいろお話しが聞けたのもよかったです。Scrum IncでScrum@Scaleのセミナーあるようなので気になっています。</p><h1 id="研修後の試験"><a href="#研修後の試験" class="headerlink" title="研修後の試験"></a>研修後の試験</h1><p>4択の30問の試験を受けて一定の成績を越えると合格です。講義資料をざっと眺めて、スクラムガイドをもう一度見直しつつ受けたら合格できました。講義の内容そのままではなく、ちょっと捻ったような内容もあったように思います。</p><p>Scrum Incの試験結果はLinkedInに投稿するボタンがあるのですが、ここに投稿すると、スクラムの産みの親のジェフ・サザーランドがいいねしてくれます。</p><img src="/images/20220218a/スクリーンショット_2022-02-06_11.23.49.png" alt="LinkedInのいいね" width="1200" height="1236" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>そんな感じで、自分で実践したときの悩みも相談しつつ、新しい知識にアップデートしたり、リモートワークでの活用方法など、幅広く学べました。じっくり学習するのは久しぶりでしたが、楽しめました。講師の皆様、一緒に受けた皆さん、どうもありがとうございました。</p><p>今後、同僚の千葉さんが、今度Scrum Alliance版のCertified Scurm Master®を受けるそうなので、お互いに比較してみたいな、という気持ちもあります。まあ研修内容を公開するのは難しそうなので社内勉強会的にやって、当たり障りのない範囲でブログに書くとかですかね？</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;2/3, 2/4に永和システムさんのAgile　Studio主催の認定スクラムマスター研修を受けてきて、認定スクラムマスターの資格を取得しました。&lt;/p&gt;
&lt;img src=&quot;/images/20220218a/AgileStudioロゴ.png&quot;</summary>
        
      
    
    
    
    <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
    <category term="アジャイル" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/"/>
    
    <category term="スクラム" scheme="https://future-architect.github.io/tags/%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0/"/>
    
    <category term="資格" scheme="https://future-architect.github.io/tags/%E8%B3%87%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.18 集中連載 実行ファイルのメタデータに関するアップデート(コミットID追加等)</title>
    <link href="https://future-architect.github.io/articles/20220217a/"/>
    <id>https://future-architect.github.io/articles/20220217a/</id>
    <published>2022-02-16T15:00:00.000Z</published>
    <updated>2022-02-17T01:25:22.242Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220217a/go1.18top.png" alt="" width="600" height="295"><p>TIG DX ユニットの多賀です。 <a href="/articles/20220209a/">Go 1.18連載</a> の最後6本目です。<br>最近業務で久々に Go を触ることになりそうで、少し思い出しながらコードを実装してみたりしてます。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li>Go 1.18 から build 時に含まれるメタデータに VCS, ビルド情報が追加</li><li>メタデータを参照可能な実装が <code>debug/buildinfo</code> パッケージとして公開</li></ul><h2 id="Go-1-18-アップデート概要"><a href="#Go-1-18-アップデート概要" class="headerlink" title="Go 1.18 アップデート概要"></a>Go 1.18 アップデート概要</h2><p>Go 1.18 ではビルドして生成される実行ファイル中のメタデータに関連して、2点アップデートが入っています。</p><p>1点目は、メタデータの追加です。Go のビルドした実行ファイルには、Go 1.17 以前からメタデータとしてコンパイルした Go のバージョンや、依存 module の情報が含まれていました。 Go 1.18 からは、元々の情報に加えて Git の commit id や commit した時刻等の VCS 情報と、build したアーキテクチャやOS等のビルド情報が追加されました。</p><p>2 点目は、実行ファイルのメタデータをパッケージを通して参照できるようになったことです。<br>Go 1.17 以前は、実行ファイルのメタデータを外部から取得するためには、 <code>go version -m $&#123;実行ファイル&#125;</code>  コマンドを実行するしか方法がありませんでした(※1)。 <a href="https://github.com/golang/go/blob/go1.17.6/src/cmd/go/internal/version/version.go">go version</a> コマンドの実装を利用しようにも、 <code>internal</code> パッケージ下に含まれてしまい、外部から利用することはできず、コードをコピーして実装したりする状況が生まれていました。</p><p>そのため、Go 1.18 にて <a href="https://github.com/golang/go/blob/go1.17.6/src/cmd/go/internal/version/version.go">go version</a> の実装を移植した外部利用可能な <a href="https://pkg.go.dev/runtime/debug@go1.18beta2#BuildInfo">debug/buildinfo</a> パッケージが追加されました。</p><p>※1: 正確には <a href="https://github.com/golang/go/blob/go1.17.6/src/runtime/debug/mod.go#L23">runtime/debug.BuildInfo</a> を利用すれば、実装したコード自身のメタデータへアクセスすることはできました。 <code>BuildInfo</code> をコンパイルコード内で取得、Print しておけば実行時に出力できたりします。</p><h2 id="アップデート詳細"><a href="#アップデート詳細" class="headerlink" title="アップデート詳細"></a>アップデート詳細</h2><p>Go 1.18 はまだリリース前なので、ベータバージョン(<code>go1.18beta2</code>)で動作確認してます。<br>正式リリース時に挙動が変更されている可能性がありますので、ご注意ください。</p><h3 id="メタデータ追加"><a href="#メタデータ追加" class="headerlink" title="メタデータ追加"></a>メタデータ追加</h3><p>追加されるメタデータを、各バージョンの出力を参考に比較してみます。<br><code>build</code> 項目以下が、 Go 1.18 で追加予定です。</p><p><strong>Go 1.17.6</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ go version -m 1.17.6</span><br><span class="line">1.17.6: go1.17.6</span><br><span class="line">        path    poc/go-buildinfo</span><br><span class="line">        mod     poc/go-buildinfo        (devel)</span><br></pre></td></tr></table></figure><p><strong>Go 1.18beta2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">❯ go1.18beta2 version -m 1.18beta2</span><br><span class="line">1.18beta2: go1.18beta2</span><br><span class="line">        path    poc/go-buildinfo</span><br><span class="line">        mod     poc/go-buildinfo        (devel)</span><br><span class="line">        build   -compiler=gc</span><br><span class="line">        build   CGO_ENABLED=1</span><br><span class="line">        build   CGO_CFLAGS=</span><br><span class="line">        build   CGO_CPPFLAGS=</span><br><span class="line">        build   CGO_CXXFLAGS=</span><br><span class="line">        build   CGO_LDFLAGS=</span><br><span class="line">        build   GOARCH=amd64</span><br><span class="line">        build   GOOS=darwin</span><br><span class="line">        build   GOAMD64=v1</span><br><span class="line">        build   vcs=git</span><br><span class="line">        build   vcs.revision=ae89406296a8de9e9ccfecf06659c4e9c8c5f0b3</span><br><span class="line">        build   vcs.time=2022-02-09T08:47:00Z</span><br><span class="line">        build   vcs.modified=true</span><br></pre></td></tr></table></figure><p>よく使いそうな項目について補足します。</p><ul><li><code>GOARCH</code>/<code>GOOS</code><ul><li>コンパイル後にbuild した アーキテクチャと OS を見ることができるようになります</li></ul></li><li><code>vcs.revision</code>/<code>vcs.time</code><ul><li>(Gitの場合) build したタイミングの commit id と時刻を保持します</li></ul></li><li><code>vcs.modified</code><ul><li>(Gitの場合) build したタイミングに、commit していない変更が残されている場合に <code>true</code> となり、変更漏れがないか確認できます</li></ul></li></ul><h3 id="debug-buildinfo"><a href="#debug-buildinfo" class="headerlink" title="debug/buildinfo"></a>debug/buildinfo</h3><p>実行ファイルからメタデータを読み取れる、<a href="https://pkg.go.dev/debug/buildinfo@go1.18beta2#BuildInfo">debug/buildinfo</a> パッケージが追加されました。<br>ドキュメントを見ると、API としては以下が定義されています。実行ファイルを <code>io.ReaderAt</code> か ファイルから読み込む実装だけですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BuildInfo</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Read</span><span class="params">(r io.ReaderAt)</span> <span class="params">(*BuildInfo, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(info *BuildInfo, err error)</span></span></span><br></pre></td></tr></table></figure><p>読み込んだ返却値である  <code>BuildInfo</code> 型は、 <a href="https://pkg.go.dev/runtime/debug@go1.18beta2#BuildInfo">runtime/debug.BuildInfo</a> の型エイリアスになっています。 Go 1.18 でメタデータが追加されているため、 <a href="https://pkg.go.dev/runtime/debug@go1.18beta2#BuildInfo">runtime/debug.BuildInfo</a> の定義も以下の通りアップデートされています。</p><p><strong>Go 1.17.6</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BuildInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Path <span class="keyword">string</span>    <span class="comment">// The main package path</span></span><br><span class="line">Main Module    <span class="comment">// The module containing the main package</span></span><br><span class="line">Deps []*Module <span class="comment">// Module dependencies</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Go 1.18beta2</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BuildInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">GoVersion <span class="keyword">string</span>         <span class="comment">// Version of Go that produced this binary.</span></span><br><span class="line">Path      <span class="keyword">string</span>         <span class="comment">// The main package path</span></span><br><span class="line">Main      Module         <span class="comment">// The module containing the main package</span></span><br><span class="line">Deps      []*Module      <span class="comment">// Module dependencies</span></span><br><span class="line">Settings  []BuildSetting <span class="comment">// Other information about the build.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>試しに実行ファイルを読み込んだコードを動かしてみます。  <code>BuildInfo</code> を JSON にして中身も確認してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;debug/buildinfo&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := flag.String(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;execution file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> e == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;-e required&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 実行ファイル読込</span></span><br><span class="line">b, err := buildinfo.ReadFile(*e)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;read file failed: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出力</span></span><br><span class="line">j, err := json.MarshalIndent(*b, <span class="string">&quot;&quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;marshal json failed: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(j))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出力はこちらになりました。 Go 1.18 で追加予定の項目は <code>Settings</code> へ詰め込まれるようです。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;GoVersion&quot;</span>: <span class="string">&quot;go1.18beta2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Path&quot;</span>: <span class="string">&quot;poc/go-buildinfo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Main&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Path&quot;</span>: <span class="string">&quot;poc/go-buildinfo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;(devel)&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Sum&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Replace&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;Deps&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;Settings&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;-compiler&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;gc&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;CGO_ENABLED&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;CGO_CFLAGS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;CGO_CPPFLAGS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;CGO_CXXFLAGS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;CGO_LDFLAGS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;GOARCH&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;amd64&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;GOOS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;darwin&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;GOAMD64&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;v1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;vcs&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;git&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;vcs.revision&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;ae89406296a8de9e9ccfecf06659c4e9c8c5f0b3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;vcs.time&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;2022-02-09T08:47:00Z&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;vcs.modified&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="関連-issue"><a href="#関連-issue" class="headerlink" title="関連 issue"></a>関連 issue</h3><ul><li>build 時に含まれるメタデータを追加したい要望<ul><li><a href="https://github.com/golang/go/issues/35667">cmd/go: add compiler flags, relevant env vars to ‘go version -m’ output · Issue #35667 · golang/go</a></li><li><a href="https://github.com/golang/go/issues/37475">cmd/go: stamp git/vcs current HEAD hash/commit hash/dirty bit in binaries · Issue #37475 · golang/go</a></li></ul></li><li><code>go version -m</code> の実装コード <a href="https://github.com/golang/go/blob/go1.17.6/src/cmd/go/internal/version/version.go">version.go</a> が internal package のため、外部から利用できるようにしたい<ul><li><a href="https://github.com/golang/go/issues/39301">cmd/go: factor version reading into debug/buildinfo · Issue #39301 · golang/go</a></li></ul></li></ul><h3 id="関連-パッチ"><a href="#関連-パッチ" class="headerlink" title="関連 パッチ"></a>関連 パッチ</h3><ul><li>build 時の挙動変更<ul><li><a href="https://go-review.googlesource.com/c/go/+/353930/">cmd/go: stamp VCS revision and uncommitted status into binaries (I4e7d3159) · Gerrit Code Review</a></li></ul></li><li>debug/buildinfo 追加<ul><li><a href="https://go-review.googlesource.com/c/mod/+/348016/">buildinfo: add package for reading build metadata from Go executables (Ia1d97d9b) · Gerrit Code Review</a></li></ul></li></ul><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>Go 1.18 で変更される実行ファイルに含まれるメタデータ関連について、整理してみました。</p><p>Git の commit id が参照できるようになるのも良いですが、 <code>GOOS</code> / <code>GOARCH</code> を見ることができるようになったのも良さそうです。 複数環境向けの build 後に、どの実行ファイルがどの環境向けかわからなくなっても確認するのに使えそうです。 (わからなくなったときは、とりあえず実行してみて確認したりしてました)<code>debug/buildinfo</code> パッケージの登場により、実行されているバイナリをスキャンしてツールへ連携する実装がやりやすくなったのも良さそうですね。</p><p>Go 1.18 連載は以上で終了です。</p><p>一般的に待望されていたジェネリクスや、コードの安全性を高める fuzzing にサポートしたりと盛り沢山なリリースだったかと思います。リリースは 3 月にずれ込みそうとのことですが、それまでのつなぎとして楽しんでいただけていたら幸いです。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://tip.golang.org/doc/go1.18">Go 1.18 Release Notes - The Go Programming Language</a></li><li><a href="https://qiita.com/sg0hsmt/items/6d852c50baa37a0c957e">Go 1.18 で追加される debug/buildinfo - Qiita</a></li><li><a href="https://pkg.go.dev/runtime/debug@go1.18beta2#BuildInfo">debug package - runtime/debug - pkg.go.dev</a></li><li><a href="https://github.com/golang/go">golang/go: The Go programming language</a></li><li><a href="https://knqyf263.hatenablog.com/entry/2021/02/12/162928">Goのバイナリから依存するmodule情報を取り出す方法 - knqyf263’s blog</a></li><li><a href="https://github.com/rsc/goversion">rsc/goversion: Print version used to build Go executables</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220217a/go1.18top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;295&quot;&gt;

&lt;p&gt;TIG DX ユニットの多賀です。 &lt;a href=&quot;/articles/20220209a/&quot;&gt;Go</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go1.18" scheme="https://future-architect.github.io/tags/Go1-18/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.18集中連載 Workspacesモードを試してみた</title>
    <link href="https://future-architect.github.io/articles/20220216a/"/>
    <id>https://future-architect.github.io/articles/20220216a/</id>
    <published>2022-02-15T15:00:00.000Z</published>
    <updated>2022-02-16T03:52:22.785Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220216a/go1.18top.png" alt="" width="600" height="295"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20220209a/">Go 1.18連載</a>の5本目です。</p><p>Go 1.18からGoのマルチモジュール<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>での開発を便利にするWorkspacesモードが導入されます。Workspacesモードの導入背景はマルチモジュールでの開発体験を改善することです。詳しくは<a href="https://go.googlesource.com/proposal/+/master/design/45713-workspace.md">Proposal: Multi-Module Workspaces in cmd/go</a>のBackgroundやScopeに記載があります。</p><p>Workspacesモードがどのように動作するか知るためには、実際に動かしてみるのがよいでしょう。本記事ではWorkspacesモードを試してみた結果を紹介します。GoのバージョンはGo 1.18 beta2を使っています。</p><h2 id="マルチモジュール構成"><a href="#マルチモジュール構成" class="headerlink" title="マルチモジュール構成"></a>マルチモジュール構成</h2><p>早速、例として、Workspacesモードが存在しない場合のマルチモジュール構成を考えてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; tree</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── names</span><br><span class="line">│   ├── company.go</span><br><span class="line">│   └── go.mod</span><br><span class="line">└── tools</span><br><span class="line">    ├── cmd</span><br><span class="line">    │   └── main.go</span><br><span class="line">    └── go.mod</span><br></pre></td></tr></table></figure><ul><li>names モジュール</li></ul><figure class="highlight sh"><figcaption><span>names/go.mod</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module github.com/d-tsuji/sample-go-workspace/names</span><br><span class="line"></span><br><span class="line">go 1.18</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>names/company.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> names</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Name = <span class="string">&quot;Future&quot;</span></span><br></pre></td></tr></table></figure><ul><li>tools モジュール</li></ul><figure class="highlight sh"><figcaption><span>tools/go.mod</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module github.com/d-tsuji/sample-go-workspace/tools</span><br><span class="line"></span><br><span class="line">go 1.18</span><br><span class="line"></span><br><span class="line">require github.com/d-tsuji/sample-go-workspace/names v0.0.0-20220215133818-3d5d200fc3de</span><br><span class="line"></span><br><span class="line">replace github.com/d-tsuji/sample-go-workspace/names =&gt; ../names</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>tools/cmd/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/d-tsuji/sample-go-workspace/names&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(names.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>マルチモジュール構成で開発している場合、ローカルファイルシステムに存在する依存モジュールを参照するために <code>go.mod</code> ファイルで <code>replace</code> ディレクティブを使って参照することがあります。本例では <code>replace</code> ディレクティブが必要な <code>go.mod</code> ファイルは1つですが、複数のモジュールが依存していると複数のモジュールの <code>go.mod</code> をもれなくメンテナンスする必要があります。マルチモジュール構成の開発で <code>replace</code> ディレクティブに苦しめられたのは私だけではないはずです。</p><h2 id="Workspacesモード"><a href="#Workspacesモード" class="headerlink" title="Workspacesモード"></a>Workspacesモード</h2><p>さて本題のWorkspacesモードを紹介します。</p><p><code>go work init</code> コマンドでWorkspacesモードの対象とするモジュールのパスを指定して、<code>go.work</code> ファイルを作成します。<code>go.work</code> ファイルが存在すると、<code>go</code> コマンドはWorkspacesモードになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; go work init names tools</span><br></pre></td></tr></table></figure><p>ディレクトリ構成は以下です。<code>go.work</code> ファイルが存在することと <code>go.mod</code> に <code>replace</code> ディレクティブが存在しないことが最初に紹介したマルチモジュール構成の例との大きな違いです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.work</span><br><span class="line">├── names</span><br><span class="line">│   ├── company.go</span><br><span class="line">│   └── go.mod</span><br><span class="line">└── tools</span><br><span class="line">    ├── cmd</span><br><span class="line">    │   └── main.go</span><br><span class="line">    └── go.mod</span><br></pre></td></tr></table></figure><p><code>go.work</code> ファイルは <code>go.mod</code> ファイルと同様な形式で記述されるファイルです。<code>go.work</code> ファイルに含まれる <code>use</code> ディレクティブは <code>go.mod</code> ファイルを含む相対パスまたは絶対パスが記述されます。また <code>use</code> ディレクティブにはコメントを書くこともできます。</p><figure class="highlight go"><figcaption><span>go.work</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="number">1.18</span></span><br><span class="line"></span><br><span class="line">use (</span><br><span class="line">./names <span class="comment">// github.com/d-tsuji/sample-go-workspace/names</span></span><br><span class="line">./tools</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>go.mod</code> ファイルには <code>replace</code> ディレクティブは不要です。</p><figure class="highlight sh"><figcaption><span>tools/go.mod</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module github.com/d-tsuji/sample-go-workspace/tools</span><br><span class="line"></span><br><span class="line">go 1.18</span><br><span class="line"></span><br><span class="line">require github.com/d-tsuji/sample-go-workspace/names v0.0.0-20220215133818-3d5d200fc3de</span><br></pre></td></tr></table></figure><p><code>replace</code> ディレクティブなしに <code>use</code> で指定したモジュールの依存を解決できます。以下のように動作を確認できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">go</span> run tools\cmd\main.<span class="keyword">go</span></span><br><span class="line">Future</span><br></pre></td></tr></table></figure><p>もちろん以下のように <code>go.work</code> ファイルで指定しなかった場合は依存関係を解決できません。</p><figure class="highlight diff"><figcaption><span>go.work</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go 1.18</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-use (</span></span><br><span class="line"><span class="deletion">-./names</span></span><br><span class="line"><span class="deletion">-./tools</span></span><br><span class="line"><span class="deletion">-)</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go run tools\cmd\main.go</span><br><span class="line">tools\cmd\main.go:5:2: package github.com/d-tsuji/sample-go-workspace/names is not <span class="keyword">in</span> GOROOT (c:\go\src\github.com\d-tsuji\sample-go-workspace\names)</span><br></pre></td></tr></table></figure><p><code>go work</code> コマンドは <code>init</code> の他に、<code>go.work</code> ファイルを修正する <code>edit</code> コマンドや <code>go.work</code> ファイルにディレクトリを追加する <code>use</code> コマンド、<code>sync</code> コマンドなどいくつかのコマンドがあります。<a href="https://go.dev/ref/mod">Go Modules Reference</a> にある <a href="https://go.dev/ref/mod#go-work-init">go work init</a> などに詳しく書いてあります。</p><ul><li><code>gopls</code> でのサポート<br>今後、<code>gopls</code> においてもWorkspacesモードをサポートする<a href="https://go.googlesource.com/proposal/+/master/design/37720-gopls-workspaces.md">Proposal</a>もあります。開発ツール含めて、マルチモジュールの開発体験を改善していく動きがあります。</li><li><code>go.work</code> ファイルはリポジトリにコミットしない慣習<br>Proposalでは <code>go.work</code> ファイルはリポジトリにコミットしないことを推奨しています。<code>go.work</code> ファイルによってリポジトリのビルド構成が変更されてしまうため、とあります。<code>github/gitignore</code> のGoのテンプレートにも <code>go.work</code> ファイルが追加されていました。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li></ul><p>とはいえ、<code>go.work</code> ファイルを共有したいユースケースもありそうなので、このあたりの議論に詳しい方、こっそり教えて下さい。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>Go 1.18で導入されるWorkspacesモードを試してみました。Workspacesモードを学ぶにあたって、Proposalを書いた本人のデモ動画(<a href="https://www.youtube.com/watch?v=wQglU5aB5NQ">Go Workspaces Proposal Demo</a>)なども参考になりました。マルチモジュールの開発体験が向上するWorkspacesモード、リリースが楽しみです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">マルチモジュールとは、あるリポジトリに複数のモジュールが含まれるようなリポジトリを指し、それぞれのモジュールが <code>go.mod</code> ファイルを持ちます。<a href="https://github.com/golang/go/wiki/Modules#faqs--multi-module-repositories">https://github.com/golang/go/wiki/Modules#faqs--multi-module-repositories</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://github.com/github/gitignore/blob/438cb4af67f3a09c008c5c3f5c1ec325511b8970/Go.gitignore">https://github.com/github/gitignore/blob/438cb4af67f3a09c008c5c3f5c1ec325511b8970/Go.gitignore</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220216a/go1.18top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;295&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.18" scheme="https://future-architect.github.io/tags/Go1-18/"/>
    
  </entry>
  
  <entry>
    <title>Go1.18集中連載：新たに追加されたnet/netipとは</title>
    <link href="https://future-architect.github.io/articles/20220215a/"/>
    <id>https://future-architect.github.io/articles/20220215a/</id>
    <published>2022-02-14T15:00:00.000Z</published>
    <updated>2022-02-15T01:25:14.184Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220215a/netip.png" alt="" width="945" height="491" loading="lazy"><blockquote><p>Image is generated By <a href="https://gopherize.me/">gopherize.me</a>. Artwork by <a href="https://twitter.com/ashleymcnamara">Ashley McNamara</a> inspired by <a href="http://reneefrench.blogspot.co.uk/">Renee French</a>. Web app by <a href="https://twitter.com/matryer">Mat Ryer</a></p></blockquote><p>この記事は<a href="/articles/20220209a/">Go1.18連載</a>の4記事目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の宮永です。<br>本記事ではGo1.18で追加されたnet/netipの機能について解説します。</p><h1 id="net-netipとは？"><a href="#net-netipとは？" class="headerlink" title="net/netipとは？"></a>net/netipとは？</h1><p>IPアドレスを対象とした基本的な操作(比較演算子による操作など)を提供するパッケージです。</p><p>netipパッケージに定義されている型は全部で3つ「Addr型(IPアドレスを定義)」「AddrPort型(IPアドレスとポートを定義)」「Prefix型(IPアドレスとビット長を定義)」です。</p><p>net/netipによって新たに導入された「Addr型」は「net.IP型」と比較してより少ないメモリでimmutableでかつ比較演算子を使って簡単に比較することができるようになっていると<a href="https://pkg.go.dev/net/netip">公式のdocs</a>には記載されています。</p><p>net/netipパッケージの導入提案は<a href="https://github.com/bradfitz">Bradさん</a>によってこちらの<a href="https://github.com/golang/go/issues/46518">issue</a>でされています。</p><p>私はnet.IPを使用したことはないのですが、従来のnetパッケージにはnet.IP型が実装されていました。net/netipの導入に伴ってnet.IP型の取り扱いやパッケージの命名方法などはかなり議論されていたようです。</p><p><a href="https://github.com/golang/go/discussions/47323">proposal: net/netaddr: add new IP address type, netaddr package (discussion) · Discussion #47323 · golang/go</a></p><p>議論の争点は</p><ol><li>netパッケージに軽量なアドレスパッケージを追加するか？</li><li>汎用的なIPアドレス操作を担うパッケージを追加するか？</li></ol><p>の2点でした。①を採用する場合は今回追加されるパッケージ名は「net/netip」ではなく「net/netaddr」になっていたようです。</p><p>結論としてはnet/netipとして汎用的なIPアドレス操作を担うパッケージとしてgo1.18に取り入れることが決定したようです。</p><h1 id="net-netipの利用用途は？"><a href="#net-netipの利用用途は？" class="headerlink" title="net/netipの利用用途は？"></a>net/netipの利用用途は？</h1><p>私自身、netパッケージはnet/http程度しか触ったことがないため従来のnet.IP型がどのように利用されていたのか、またどんなところに欠点があったのかを知りません。</p><p>net/netipの追加に大きな貢献をしたBradさんの技術ブログ<a href="https://tailscale.com/blog/netaddr-new-ip-type-for-go/#uint64s">netaddr.IP: a new IP address type for Go · Tailscale</a>にnet/netipの前身である<a href="https://github.com/inetaf/netaddr">inetaf/netaddr</a>を作成した経緯が記載されていましたのでこちらをベースにnet/netipの紹介をします。</p><p>Bradさんの記事では従来のnet.IP型の問題点はnet.IP型が単なるbyteのスライスでしか定義されていないことであると指摘されています。</p><p>この問題は、例えばIPアドレスを比較する際に<code>＝＝</code>などの演算子は使用することができないということを意味しています。</p><p>また、IPアドレスを表現するには不要な24バイトがnet.IPに割り当てられていることを指摘しています。<br>確かに<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.17.7:src/net/ip.go;drc=d3e3d03666bbd8784007bbb78a75864aac786967;l=35">go1.17のnet.IP型</a>を見てみると明確なサイズ制限はされていません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IP address lengths (bytes).</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">IPv4len = <span class="number">4</span></span><br><span class="line">IPv6len = <span class="number">16</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// An IP is a single IP address, a slice of bytes.</span></span><br><span class="line"><span class="comment">// Functions in this package accept either 4-byte (IPv4)</span></span><br><span class="line"><span class="comment">// or 16-byte (IPv6) slices as input.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note that in this documentation, referring to an</span></span><br><span class="line"><span class="comment">// IP address as an IPv4 address or an IPv6 address</span></span><br><span class="line"><span class="comment">// is a semantic property of the address, not just the</span></span><br><span class="line"><span class="comment">// length of the byte slice: a 16-byte slice can still</span></span><br><span class="line"><span class="comment">// be an IPv4 address.</span></span><br><span class="line"><span class="keyword">type</span> IP []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>一方でgo1.18beta2の<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18beta2:src/net/netip/netip.go;drc=49b7c9caec6b96d0b327624efee61bd8a72cf68c;l=38">netip.Addr</a>を確認すると<code>addr</code>に<code>uint128</code>が明確に定義されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Addr <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// addr is the hi and lo bits of an IPv6 address. If z==z4,</span></span><br><span class="line"><span class="comment">// hi and lo contain the IPv4-mapped IPv6 address.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// hi and lo are constructed by interpreting a 16-byte IPv6</span></span><br><span class="line"><span class="comment">// address as a big-endian 128-bit number. The most significant</span></span><br><span class="line"><span class="comment">// bits of that number go into hi, the rest into lo.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For example, 0011:2233:4455:6677:8899:aabb:ccdd:eeff is stored as:</span></span><br><span class="line"><span class="comment">//  addr.hi = 0x0011223344556677</span></span><br><span class="line"><span class="comment">//  addr.lo = 0x8899aabbccddeeff</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// We store IPs like this, rather than as [16]byte, because it</span></span><br><span class="line"><span class="comment">// turns most operations on IPs into arithmetic and bit-twiddling</span></span><br><span class="line"><span class="comment">// operations on 64-bit registers, which is much faster than</span></span><br><span class="line"><span class="comment">// bytewise processing.</span></span><br><span class="line">addr uint128</span><br><span class="line"></span><br><span class="line"><span class="comment">// z is a combination of the address family and the IPv6 zone.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// nil means invalid IP address (for a zero Addr).</span></span><br><span class="line"><span class="comment">// z4 means an IPv4 address.</span></span><br><span class="line"><span class="comment">// z6noz means an IPv6 address without a zone.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Otherwise it&#x27;s the interned zone name string.</span></span><br><span class="line">z *intern.Value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>goには<code>uint128</code>という型は存在しないため、<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18beta2:src/net/netip/uint128.go;drc=refs%2Ftags%2Fgo1.18beta2;l=13">uint64型2つを使用して定義</a>しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uint128 represents a uint128 using two uint64s.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// When the methods below mention a bit number, bit 0 is the most</span></span><br><span class="line"><span class="comment">// significant bit (in hi) and bit 127 is the lowest (lo&amp;1).</span></span><br><span class="line"><span class="keyword">type</span> uint128 <span class="keyword">struct</span> &#123;</span><br><span class="line">hi <span class="keyword">uint64</span></span><br><span class="line">lo <span class="keyword">uint64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uint64</code>とは64ビット、つまり<code>uint128</code>で128ビット(=16バイト)を表現しています。</p><p>また、Addr型にはIPv6のゾーン識別子として<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18beta2:src/net/netip/netip.go;drc=49b7c9caec6b96d0b327624efee61bd8a72cf68c;l=68">zというフィールド</a>を用意しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// z0, z4, and z6noz are sentinel IP.z values.</span></span><br><span class="line"><span class="comment">// See the IP type&#x27;s field docs.</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">z0    = (*intern.Value)(<span class="literal">nil</span>)</span><br><span class="line">z4    = <span class="built_in">new</span>(intern.Value)</span><br><span class="line">z6noz = <span class="built_in">new</span>(intern.Value)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>ゾーンを参照する<code>Zone()</code>メソッドも用意されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Zone returns ip&#x27;s IPv6 scoped addressing zone, if any.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ip Addr)</span> <span class="title">Zone</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> ip.z == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">zone, _ := ip.z.Get().(<span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">return</span> zone</span><br></pre></td></tr></table></figure><p>ゾーンを定義する際には<code>WithZone()</code>メソッドを使用します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WithZone returns an IP that&#x27;s the same as ip but with the provided</span></span><br><span class="line"><span class="comment">// zone. If zone is empty, the zone is removed. If ip is an IPv4</span></span><br><span class="line"><span class="comment">// address, WithZone is a no-op and returns ip unchanged.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ip Addr)</span> <span class="title">WithZone</span><span class="params">(zone <span class="keyword">string</span>)</span> <span class="title">Addr</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !ip.Is6() &#123;</span><br><span class="line"><span class="keyword">return</span> ip</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> zone == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">ip.z = z6noz</span><br><span class="line"><span class="keyword">return</span> ip</span><br><span class="line">&#125;</span><br><span class="line">ip.z = intern.GetByString(zone)</span><br><span class="line"><span class="keyword">return</span> ip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WithZone()</code>メソッドは文字列からAddr型を定義する<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18beta2:src/net/netip/netip.go;drc=49b7c9caec6b96d0b327624efee61bd8a72cf68c;l=202"><code>ParseAddr()</code>メソッド</a>の内部でも利用されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parseIPv6 parses s as an IPv6 address (in form &quot;2001:db8::68&quot;).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseIPv6</span><span class="params">(in <span class="keyword">string</span>)</span> <span class="params">(Addr, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">...省略...</span><br><span class="line"><span class="keyword">return</span> AddrFrom16(ip).WithZone(zone), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="net-netipを使う"><a href="#net-netipを使う" class="headerlink" title="net/netipを使う"></a>net/netipを使う</h1><p>それではnet/netipパッケージを実際に使ってみます。</p><p>まずは文字列からAddr型を生成します。<code>ip0</code>を空文字として不当なAddr型に、<code>ip1</code>をゾーン識別子(%eth0)付きのAddr型として設定します。</p><p>Addr型のメソッドである<code>IsValid()</code>メソッドを使用していそれぞれの入力を評価します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/netip&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ip0, _ := netip.ParseAddr(<span class="string">&quot;&quot;</span>)</span><br><span class="line">ip1, _ := netip.ParseAddr(<span class="string">&quot;fe80::2%eth0&quot;</span>)</span><br><span class="line">fmt.Println(ip0.IsValid())</span><br><span class="line">fmt.Println(ip1.IsValid())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上のソースコードを実行すると</p><figure class="highlight bash"><figcaption><span>出力</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>が出力されます。</p><p>それでは次にIPv6アドレス(ゾーン識別子付き)を定義して比較演算子を使用してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/netip&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ip1, _ := netip.ParseAddr(<span class="string">&quot;fe80::2%eth0&quot;</span>)</span><br><span class="line">ip2, _ := netip.ParseAddr(<span class="string">&quot;fe80::2%eth0&quot;</span>)</span><br><span class="line">    ip3, _ := netip.ParseAddr(<span class="string">&quot;192.0.2.1&quot;</span>)</span><br><span class="line">fmt.Println(ip1 == ip2)</span><br><span class="line">fmt.Println(ip1 != ip2)</span><br><span class="line">    fmt.Println(ip1 == ip3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上のコードを実行すると</p><figure class="highlight bash"><figcaption><span>出力</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>と出力されます。net/netip導入の１つの目標である演算子による比較が可能になっています。</p><p>また、IPv6の表記ではゼロが２度以上続く場合<code>「::」</code>として省略することができます。</p><p>省略せずに展開するメソッドとして<code>StringExpanded()</code>などのメソッドも用意されています。<code>StringExpanded()</code>で返却される値は文字列です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/netip&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ip1, _ := netip.ParseAddr(<span class="string">&quot;fe80::2%eth0&quot;</span>)</span><br><span class="line">expIp1 := ip1.StringExpanded()</span><br><span class="line">fmt.Println(expIp1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, ip1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, expIp1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>出力</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fe80:0000:0000:0000:0000:0000:0000:0002%eth0</span><br><span class="line">netip.Addr</span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>ビット長も<code>BitLen()</code>メソッドを使えば簡単に調べることができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/netip&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ip1, _ := netip.ParseAddr(<span class="string">&quot;fe80::2%eth0&quot;</span>)</span><br><span class="line">ip3, _ := netip.ParseAddr(<span class="string">&quot;192.0.2.1&quot;</span>)</span><br><span class="line">fmt.Println(ip1.BitLen())</span><br><span class="line">fmt.Println(ip3.BitLen())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>出力</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">128</span><br><span class="line">32</span><br></pre></td></tr></table></figure><p>簡単にIPアドレスの操作を行うことができますね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>net/netipによって新たに導入された構造体は「Addr型(IPアドレスを定義)」「AddrPort型(IPアドレスとポートを定義)」「Prefix型(IPアドレスとビット長を定義)」の3つである。</li><li>net/netipではとnet.IPと比較してより少ないメモリでimmutableでかつ比較演算子を使って簡単に比較することができるようになった。</li></ul><p>今回Go1.18の集中連載記事を書くにあたってGoの公式リポジトリのissueやdocsなどを比較しながらまとめました。普段の実装では本家のソースコードをつぶさに確認することはなかったので良い体験ができたと思っています。「Goの実装をより良くするにはGo自体の実装を研究することだ」と誰かが言っていたのを思い出しました。</p><p>これを機に自分の普段の実装も見直してみたいと思います。</p><p>最後までお付き合いいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220215a/netip.png&quot; alt=&quot;&quot; width=&quot;945&quot; height=&quot;491&quot; loading=&quot;lazy&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;Image is generated By &lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.18" scheme="https://future-architect.github.io/tags/Go1-18/"/>
    
    <category term="netip" scheme="https://future-architect.github.io/tags/netip/"/>
    
  </entry>
  
  <entry>
    <title>Go1.18から追加されたFuzzingとは</title>
    <link href="https://future-architect.github.io/articles/20220214a/"/>
    <id>https://future-architect.github.io/articles/20220214a/</id>
    <published>2022-02-13T15:00:00.000Z</published>
    <updated>2022-02-14T01:20:55.148Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は<a href="https://future-architect.github.io/articles/20220209a/">Go1.18連載</a>の3記事目です。</p><p>伊藤真彦です、最近CSIGの<a href="https://vuls.biz/">Vuls</a>チームで働くようになりました。</p><p><code>crypto/elliptic (CVE-2022-23806)、math/big (CVE-2022-23772)、cmd/go (CVE-2022-23773)</code>へのセキュリティFixを含む<a href="https://go.dev/dl/#go1.17.7">Go 1.17.7と1.16.14</a>が先日リリースされました。急にセキュリティエンジニアっぽい事を言うようになるのは恐縮ですが忘れずアップデートしていきましょう。</p><p>脇道に逸れましたがこの記事ではFuzzingについて紹介します。</p><h1 id="Go1-18から追加されたFuzzingとは"><a href="#Go1-18から追加されたFuzzingとは" class="headerlink" title="Go1.18から追加されたFuzzingとは"></a>Go1.18から追加されたFuzzingとは</h1><p>Go1.18からFuzzingという機能が追加されます、Genericsのインパクトが大きいですが、Go1.18ではこういった大きな変更も加わっています。</p><p>機能追加に伴い<a href="https://go.dev/doc/fuzz/">ランディングページ</a>が作成されました、<a href="https://tip.golang.org/doc/go1.18">リリースノート</a>で<code>fuzzing landing page</code>と紹介されています。今後もドキュメントと呼ぶよりランディングページと呼ぶ方が伝わりやすいかもしれません。</p><p>Fuzzingとはテスト手法の一つで、プログラムの機能が想定していない入力を与える事でバグを発見するアプローチの事を指します。想定していない入力とは具体的にはランダムな値を乱数を基に生成する事で生み出した値ですが、ランダムな値であること自体はFuzzingの本質ではありません。テスト入力に人力で用意したデータを追加する事もあります。ともかくテストケースの不足や実装の考慮漏れを炙り出すための工夫ということですね。</p><p>なおFuzzingはGo独自の概念ではありません。</p><h1 id="Fuzzingの使い方"><a href="#Fuzzingの使い方" class="headerlink" title="Fuzzingの使い方"></a>Fuzzingの使い方</h1><p><a href="https://go.dev/doc/fuzz/">ランディングページ</a>に説明がありますが、端的に説明すると下記の通りです。</p><ol><li>Fuzzing機能を利用するテストを記載する</li><li><code>-fuzz</code>オプションをつけてテストを実行する</li></ol><p>それほど難しいものではありません。</p><h1 id="Fuzzingの書き方"><a href="#Fuzzingの書き方" class="headerlink" title="Fuzzingの書き方"></a>Fuzzingの書き方</h1><p>テストの書き方も<a href="https://go.dev/doc/fuzz/">ランディングページ</a>にある画像を見ればすぐに理解できると思います。</p><img src="/images/20220214a/image.png" alt="テストの書き方" width="1090" height="408" loading="lazy"><p><code>func FuzzFoo(f *testing.F)</code>のようにFuzzから始まり、Go1.18から新しく追加された<code>*testing.F</code>を引数に取るテストコードを記載します。</p><p><code>f.Fuzz</code>の中にテストの内容を記載します、テストコードの<code>Fuzzing arguments</code>はランダム生成された値になります。<br>下記の型のデータであれば任意の個数用意する事が可能です。</p><ul><li>string, []byte</li><li>int, int8, int16, int32/rune, int64</li><li>uint, uint8/byte, uint16, uint32, uint64</li><li>float32, float64</li><li>bool</li></ul><p>任意の値の組み合わせを必ず実行したい、という場合は<code>f.Add</code>で入力を指定できます。</p><h1 id="Fuzzingの実行方法"><a href="#Fuzzingの実行方法" class="headerlink" title="Fuzzingの実行方法"></a>Fuzzingの実行方法</h1><p>テストコードが用意出来たら<code>-fuzz</code>オプションをつけてテストを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -fuzz=FuzzTestName</span><br></pre></td></tr></table></figure><p>テスト名を指定しなくても実行する事は可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -fuzz .</span><br></pre></td></tr></table></figure><p><code>-fuzztime</code>のデフォルト値は無期限です、設定しないと<code>Ctrl + C</code>で中断するまで永遠にテストが続きますのでご注意ください。</p><p>また、下記のような内容がリリースノートに記載されています。</p><p>ファジングは大量のメモリを消費する可能性があり、実行中のマシンのパフォーマンスに影響を与える可能性があることに注意してください。現在、ファズキャッシュに書き込まれる可能性のあるファイルの数または合計バイト数に制限はないため、ファズキャッシュは大量のストレージ（場合によっては数GB）を占有する可能性があります。</p><p>実際に簡単なFuzzingテストコードを実行したところ一瞬でCPU使用率が100%になりました。<br><img src="/images/20220214a/image_2.png" alt="CPU利用率が高い様子" width="1157" height="1271" loading="lazy"></p><p>メモリ使用量も2GBほど増えました、実用上差し支える事例が出た場合は今後のアップデートで調整が入る、またはオプション項目が増えるかもしれません。</p><h1 id="Fuzzingはどこで使うと良いのか"><a href="#Fuzzingはどこで使うと良いのか" class="headerlink" title="Fuzzingはどこで使うと良いのか"></a>Fuzzingはどこで使うと良いのか</h1><p>ランダムな値でテストを実行できることはわかったけど実際どのように使うと良いのだろうか、と疑問に思う方もいるかもしれません。</p><p>困ったら標準ライブラリを見ると良い、という事で執筆時点での<a href="https://github.com/golang/go">Goのmasterブランチ</a>を覗いてみました。</p><p>下記のパッケージでFuzzingが採用されていました。</p><p><a href="https://github.com/golang/go/blob/master/src/archive/tar/fuzz_test.go">archive/tar</a><br><a href="https://github.com/golang/go/blob/master/src/archive/zip/fuzz_test.go">archive/zip</a><br><a href="https://github.com/golang/go/blob/master/src/compress/gzip/fuzz_test.go">compress/gzip</a><br><a href="https://github.com/golang/go/blob/master/src/crypto/elliptic/fuzz_test.go">crypto/elliptic</a><br><a href="https://github.com/golang/go/blob/master/src/encoding/json/fuzz_test.go">encoding/json</a><br><a href="https://github.com/golang/go/blob/master/src/image/gif/fuzz_test.go">image/gif</a><br><a href="https://github.com/golang/go/blob/master/src/image/jpeg/fuzz_test.go">image/jpeg</a><br><a href="https://github.com/golang/go/blob/master/src/image/png/fuzz_test.go">image/png</a><br><a href="https://github.com/golang/go/blob/master/src/net/netip/fuzz_test.go">net/netip</a><br><a href="https://github.com/golang/go/blob/30501bbef9fcfc9d53e611aaec4d20bb3cdb8ada/src/runtime/mgcpacer_test.go#L719">runtime/mgcpacer_test</a><br><a href="https://github.com/golang/go/blob/30501bbef9fcfc9d53e611aaec4d20bb3cdb8ada/src/runtime/debug/mod_test.go#L23">runtime/debug_test</a><br><a href="https://github.com/golang/go/blob/30501bbef9fcfc9d53e611aaec4d20bb3cdb8ada/src/testing/match_test.go#L197">testing</a></p><p>主にエンコード、デコード、パースといった機能に相当する部分が多い印象です。</p><p><code>net/netip</code>はそれ自体がGo1.18の新機能ですね、<code>f.Add</code>を有効活用する事例やFuzzingにおける高度な検証の手法としてとても参考になりますね。</p><p>参考までにお世話になる事が多いであろう<code>encoding/json</code>のテストコードを見てみましょう。</p><figure class="highlight go"><figcaption><span>fuzz_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FuzzUnmarshalJSON</span><span class="params">(f *testing.F)</span></span> &#123;</span><br><span class="line">f.Add([]<span class="keyword">byte</span>(<span class="string">`&#123;</span></span><br><span class="line"><span class="string">&quot;object&quot;: &#123;</span></span><br><span class="line"><span class="string">&quot;slice&quot;: [</span></span><br><span class="line"><span class="string">1,</span></span><br><span class="line"><span class="string">2.0,</span></span><br><span class="line"><span class="string">&quot;3&quot;,</span></span><br><span class="line"><span class="string">[4],</span></span><br><span class="line"><span class="string">&#123;5: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&quot;slice&quot;: [[]],</span></span><br><span class="line"><span class="string">&quot;string&quot;: &quot;:)&quot;,</span></span><br><span class="line"><span class="string">&quot;int&quot;: 1e5,</span></span><br><span class="line"><span class="string">&quot;float&quot;: 3e-9&quot;</span></span><br><span class="line"><span class="string">&#125;`</span>))</span><br><span class="line"></span><br><span class="line">f.Fuzz(<span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, b []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, typ := <span class="keyword">range</span> []<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123; <span class="keyword">return</span> <span class="built_in">new</span>(<span class="keyword">interface</span>&#123;&#125;) &#125;,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123; <span class="keyword">return</span> <span class="built_in">new</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;) &#125;,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123; <span class="keyword">return</span> <span class="built_in">new</span>([]<span class="keyword">interface</span>&#123;&#125;) &#125;,</span><br><span class="line">&#125; &#123;</span><br><span class="line">i := typ()</span><br><span class="line"><span class="keyword">if</span> err := Unmarshal(b, i); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">encoded, err := Marshal(i)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;failed to marshal: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := Unmarshal(encoded, i); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;failed to roundtrip: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>そもそもデコード(Unmarshal)できない入力は無視する</li><li>デコードできた場合、それを正常にエンコード(Marshal)できる</li><li>エンコードできた場合、それをまたデコードできる</li></ol><p>という<code>roudtrip</code>な性質をテストしているようです。このような考え方は様々な処理のテストで応用できそうですね。</p><p><code>runtime、testing</code>のように既存のテストファイルにFuzzingのコードを書いても動作しますが、標準パッケージにおいては<code>fuzz_test.go</code>というファイルを用意する形を取っているようです。</p><p>標準パッケージの流儀に必ず従う必要はありませんが是非参考にしてみてください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Go1.18からFuzzingが追加された</li><li>リリースに伴い<a href="https://go.dev/doc/fuzz/">ランディングページ</a>が用意された</li><li>テストコードを追加し<code>-fuzz</code>オプション付きでテストするだけでFuzzingを利用できる</li><li>標準パッケージでは<code>fuzz_test.go</code>に切り分けているものが多い</li></ul><p>どれほど真剣に取り組んでもバグは尽きぬものです、新機能を有効活用して安全に動くアプリケーションを目指していきたいですね。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;この記事は&lt;a href=&quot;https://future-architect.github.io/articles/20220209a/&quot;&gt;Go1.18連載&lt;/a&gt;の3記事目です。&lt;/p&gt;
&lt;p&gt;伊藤真彦です、最近CSIGの&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.18" scheme="https://future-architect.github.io/tags/Go1-18/"/>
    
    <category term="Fuzzing" scheme="https://future-architect.github.io/tags/Fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.18集中連載 net/httpのマイナーチェンジ</title>
    <link href="https://future-architect.github.io/articles/20220210a/"/>
    <id>https://future-architect.github.io/articles/20220210a/</id>
    <published>2022-02-09T15:00:00.000Z</published>
    <updated>2022-02-26T07:45:12.397Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220210a/image.png" alt="" width="1200" height="543" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。<a href="https://future-architect.github.io/articles/20220209a/">Go 1.18連載</a>の2本目です。</p><p><a href="https://tip.golang.org/doc/go1.18">Go Release Notes</a> に記載があったMinor changes to the libraryにあったnet/httpの3点の更新について触れていきます。</p><ol><li>WebAssemblyの改善について</li><li>Cookie.Valid()の追加</li><li>MaxBytesHandlerの追加</li></ol><p>なお、2022年2月6日にGo 1.18 beta2で調べていますのでご注意ください。また、登場するコードは<a href="https://github.com/ma91n/go1.18release-note">ここに</a>コミットしています。</p><h2 id="①WebAssemblyの改善について"><a href="#①WebAssemblyの改善について" class="headerlink" title="①WebAssemblyの改善について"></a>①WebAssemblyの改善について</h2><p>Go 1.18からWebAssemblyでDialContext、DialTLS、DialTLSContext が正しく動くようになりました。</p><p>リリースノートから引用します。</p><blockquote><p>On WebAssembly targets, the Dial, DialContext, DialTLS and DialTLSContext method fields in Transport will now be correctly used, if specified, for making HTTP requests.<br><a href="https://tip.golang.org/doc/go1.18#minor_library_changes">https://tip.golang.org/doc/go1.18#minor_library_changes</a></p></blockquote><p>net/httpはサーバー・クライアントの両方を含んでいますがWebAssemblyというだけあってクライアントの話です。トランスポートのDial、DialContext、DialTLS、およびDialTLSContextメソッドフィールドが指定されている場合、HTTPリクエストが正しく使用されるようになりました。..ということです。そのままですが詳しく説明していきます。</p><h3 id="どういうことか"><a href="#どういうことか" class="headerlink" title="どういうことか"></a>どういうことか</h3><p><a href="https://github.com/golang/go/issues/27495">net/http: Expose the normal transport RoundTripper for WASM/js #27495</a>のIssueで触れられています。</p><p>http.Clientを拡張する手段としてトランスポートがあります。例えば必ずエラーになるような拡張を行うと、HTTP GETが必ず失敗するはずです。</p><figure class="highlight go"><figcaption><span>トランスポートを使った例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := http.Client&#123;Transport: &amp;http.Transport&#123;</span><br><span class="line">DialContext: <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, network, addr <span class="keyword">string</span>)</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;あえてエラーにします&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;&#125;</span><br><span class="line">resp, err := c.Get(<span class="string">&quot;https://api.ipify.org/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err) <span class="comment">// 必ずここでエラーになるはず</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = io.Copy(os.Stdout, resp.Body); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;\nDone.\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実際動かすと、<code>Get &quot;https://api.ipify.org/&quot;: あえてエラーにします</code> が出力されるでしょう。</p><p>このコードをGo 1.17で wasm 版で動かすと動かないよーということでした。</p><p>実際に動かしてみますが、Goのwasm対応は少しお作法が多く、先程のコードもお作法にそって修正する必要があります。</p><p><a href="https://www.kabuku.co.jp/developers/annoying-go-wasm">GoのWASMがライブラリではなくアプリケーションであること</a> の記事を参考にしました。</p><figure class="highlight go"><figcaption><span>wasm対応させるために修正したmain.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;syscall/js&quot;</span> <span class="comment">// wasm利用で必要なパッケージ</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">0</span>)                <span class="comment">// チャネル呼び出しはお作法</span></span><br><span class="line">js.Global().Set(<span class="string">&quot;getIp&quot;</span>, js.FuncOf(GetIp)) <span class="comment">// JS側で呼び出すための関数登録</span></span><br><span class="line">&lt;-c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetIp</span><span class="params">(_ js.Value, _ []js.Value)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// HTTPリクエストを送信する場合は、goroutine化する必要がある</span></span><br><span class="line">c := http.Client&#123;Transport: &amp;http.Transport&#123;</span><br><span class="line">DialContext: <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, network, addr <span class="keyword">string</span>)</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;あえてエラーにします&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">resp, err := c.Get(<span class="string">&quot;https://api.ipify.org/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">appendHTMLBody(fmt.Sprintf(<span class="string">&quot;http get: %s&quot;</span>, err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">b := bytes.NewBuffer(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> _, err = io.Copy(b, resp.Body); err != <span class="literal">nil</span> &#123;</span><br><span class="line">appendHTMLBody(fmt.Sprintf(<span class="string">&quot;read body: %s&quot;</span>, err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">appendHTMLBody(b.String())</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendHTMLBody</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> document = js.Global().Get(<span class="string">&quot;document&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> p = document.Call(<span class="string">&quot;createElement&quot;</span>, <span class="string">&quot;p&quot;</span>)</span><br><span class="line">p.Set(<span class="string">&quot;textContent&quot;</span>, s)</span><br><span class="line">document.Get(<span class="string">&quot;body&quot;</span>).Call(<span class="string">&quot;appendChild&quot;</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コード中にコメントにも書いていますが、wasmでHTTPリクエストを送る場合にブロッキングさせると <a href="https://github.com/golang/go/issues/34478">wasm: fatal error: all goroutines are asleep - deadlock! #34478</a> にあるようにdeadlock! と表示されます。回避するためには別goroutineを利用する必要があるので、ひと手間ラップしています。<code>appendHTMLBody</code> は見たままですが、bodyに <code>&lt;p&gt;</code> タグを追加してIP情報（HTTPレスポンス）かエラーメッセージを表示します。</p><p>これをビルドします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.17.6 windows/amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># ビルド(Go 1.17.6)</span></span><br><span class="line">$ <span class="built_in">set</span> GOOS=js</span><br><span class="line">$ <span class="built_in">set</span> GOARCH=wasm</span><br><span class="line">$ go build -o main1.17.wasm</span><br><span class="line"></span><br><span class="line"><span class="comment"># ビルド(Go 1.18beta2)</span></span><br><span class="line">$ go1.18beta2 build -o main1.18beta2.wasm</span><br></pre></td></tr></table></figure><p>続いて以下のようなHTMLを作成し、さきほどのw main.1.17.wasmと、main.1.18beta2.wasm と同じ階層に配備し何かしらのWebサーバでホストさせます。wasm_exec.jsはGoインストールしたフォルダに準備されているのでコピーして持ってきます。</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;wasm_exec.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> go = <span class="keyword">new</span> Go();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// WebAssembly.instantiateStreaming(fetch(&quot;main1.17.wasm&quot;), go.importObject).then((result) =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">        WebAssembly.instantiateStreaming(fetch(<span class="string">&quot;main1.18beta2.wasm&quot;</span>), go.importObject).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            go.run(result.instance);</span></span><br><span class="line"><span class="javascript">            getIp();</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>net/http wasm調査<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>実行結果を比較すると、当然ながらGo 1.18ではトランスポートが正しく機能している（あえて発生させたエラーが表示される）ことが分かります。</p><h3 id="1-17実行結果"><a href="#1-17実行結果" class="headerlink" title="1.17実行結果"></a>1.17実行結果</h3><p>カスタムラウンドトリッパーが無視され、普通に通信が行われます。</p><img src="/images/20220210a/117実行結果.png" alt="1.17実行結果" width="787" height="275" loading="lazy"><h3 id="1-18実行結果"><a href="#1-18実行結果" class="headerlink" title="1.18実行結果"></a>1.18実行結果</h3><p>カスタムラウンドトリッパーが有効に動き、想定通りエラーメッセージが表示されます。</p><img src="/images/20220210a/118実行結果.png" alt="1.18実行結果" width="787" height="322" loading="lazy"><p>標準パッケージのどういう修正だったかというと概ね以下の修正方針だったそうで、goosがjsだったときはデフォルトのラウンドトリッパーを使わず、jsRoundTripperという構造体を新たに使うようになったようです。</p><p><a href="https://github.com/golang/go/commit/e8050da2dd93f4ff00a590c14f94c31da3c3159b">https://github.com/golang/go/commit/e8050da2dd93f4ff00a590c14f94c31da3c3159b</a></p><h2 id="②Cookie-Valid-の追加"><a href="#②Cookie-Valid-の追加" class="headerlink" title="②Cookie.Valid()の追加"></a>②Cookie.Valid()の追加</h2><p>HTTPリクエストヘッダーからCookieを読み取るロジックでは、Cookieのキーや値のパースに失敗した場合は切り捨てる（標準エラーに出力する）設計だったそうです。切り捨てられたかどうか判定するためにValid()の関数を追加しようよという提案でした。</p><p><a href="https://github.com/golang/go/blob/master/src/net/http/cookie.go#L288-L303">https://github.com/golang/go/blob/master/src/net/http/cookie.go#L288-L303</a></p><p>もとのIssueは<a href="https://github.com/golang/go/issues/46370">net/http: add Cookie.Valid method #46370</a> で、かなり議論が長いです。そもそもValidかどうか知ってもハンドリングできないだろうとか、無効な値を送信することがそもそも～とか、Serialize()関数を追加すべきとか、RFC 6265準拠について誤解が無いようにしようなど、いろいろな意見があり興味深いです。</p><h2 id="③MaxBytesHandlerの追加"><a href="#③MaxBytesHandlerの追加" class="headerlink" title="③MaxBytesHandlerの追加"></a>③MaxBytesHandlerの追加</h2><p><a href="https://github.com/golang/go/issues/39567">net/http: add MaxBytesHandler(h Handler, n int64) Handler #39567</a> で提案されています。</p><p>みなさん、HTTPリクエストボディをjson.Unmarshal() なんかで読み取るコードは覚えきれないほど書いて来たかと思いますが、何かしら悪意のあるクライアントが大容量のペイロードを送信してきたときはメモリ溢れ（オーバーフローなど）が起こる懸念があります。DDOS攻撃の一種かと思うので、セキュリティ的な改善につながるかと思います。</p><p>すでにいくつかのブログで紹介されていました。詳しい..。</p><ul><li><a href="https://mattn.kaoriya.net/software/lang/go/20211224005655.htm">Big Sky :: Go の http パッケージに MaxBytesHandler が入った。</a></li><li><a href="https://zenn.dev/hiroyukim/articles/4b4f5b482c0c2d">go1.18で入ったhttp.MaxBytesHandlerの中身を見てみた</a></li></ul><p>こういったストリームの読み取り時は、io.CopyN() を使ってまるごと読み取らないようにしようよといったお決まりがありましたが、それがさらに標準化されたのは良い流れかなと思います。ぜひ使っていきましょう。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>Go1.16のときは<a href="https://future-architect.github.io/articles/20210209/">go install</a>についてまとめ、Go 1.17連載のときは<a href="https://future-architect.github.io/articles/20210811a/">encoding/csv</a> について調べました。マイナーチェンジ系もIssueなどの議論を追っていくと自分にとってちょうど良いサイズで、学びがありオススメです。</p><p>この記事では、wasmのお作法をあまり理解せずかなりハマりましたが、こういう機会でないと使わないので楽しかったです。</p><p>最後まで読んでいただき、ありがとうございます！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220210a/image.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;543&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.18" scheme="https://future-architect.github.io/tags/Go1-18/"/>
    
    <category term="wasm" scheme="https://future-architect.github.io/tags/wasm/"/>
    
    <category term="リリースノート" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%8E%E3%83%BC%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.18集中連載 ジェネリクス</title>
    <link href="https://future-architect.github.io/articles/20220209a/"/>
    <id>https://future-architect.github.io/articles/20220209a/</id>
    <published>2022-02-08T15:00:00.000Z</published>
    <updated>2022-02-17T01:25:48.532Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220209a/go1.18top.png" alt="" width="600" height="295"><p>Go 1.18のリリースが迫っているため、最近恒例でやっている新機能を何人かで紹介する集中連載を行います。ただ、Go 1.18は機能が大きく、ベータが長くなっており、当初2月予定だったのが、3月リリース見込みとなっています。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Title</th><th>Author</th></tr></thead><tbody><tr><td>2/9 （水）</td><td>ジェネリクス（この記事です）</td><td>澁川喜規</td></tr><tr><td>2/10（木）</td><td><a href="/articles/20220210a/">net/http, wasm</a></td><td>真野隼記さん</td></tr><tr><td>2/14（月）</td><td><a href="/articles/20220214a/">fuzzing</a></td><td>伊藤真彦さん</td></tr><tr><td>2/15（火）</td><td><a href="/articles/20220215a/">net/netip</a></td><td>宮永崇史さん</td></tr><tr><td>2/16（水）</td><td><a href="/articles/20220216a/">Workspaceモード</a></td><td>辻大志郎さん</td></tr><tr><td>2/17（木）</td><td><a href="/articles/20220217a/">debug/buildinfo</a></td><td>多賀聡一朗さん</td></tr></tbody></table></div><h1 id="ジェネリクス"><a href="#ジェネリクス" class="headerlink" title="ジェネリクス"></a>ジェネリクス</h1><p>Go 1.18で入る機能で注目度が高い新機能がジェネリクスです。Goに対する批判的な言葉としてよく使われるものが「ジェネリクスがない」というものでした。Goを長く使っている人は「ジェネリクスなんていらん」と言い続けてきたし、個人的にもいまだになくてもいいと思っているのですが、大きな変更であるし、これから影響もいろいろある領域ですので学ぶ必要はあるでしょう。自分で書かなくても、書かれたコードを読むこともあるでしょうし。</p><p>ジェネリクスのチュートリアルが追加されています。</p><p><a href="https://go.dev/doc/tutorial/generics">https://go.dev/doc/tutorial/generics</a></p><p>mattnさんの動画もあります。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/omvbKgQrdYU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>文法的には基底型を表すチルダ演算子が増えたりいろいろ変更が入っています。</p><p>とはいえ、constraintsパッケージが1.18に入る予定だったのが、一旦準標準パッケージに格下げされたり、まだまだいろいろ変更が入っています。</p><ul><li><a href="https://github.com/golang/go/issues/50792">https://github.com/golang/go/issues/50792</a></li></ul><p>また、今回のアップデートでは言語の変更が大きいので標準ライブラリの変更はなるべく減らそう、という提案も行われています。</p><ul><li><a href="https://github.com/golang/go/issues/48918">https://github.com/golang/go/issues/48918</a></li></ul><p>そのため、ジェネリクスの文法は入るものの、標準ライブラリでそれを活かしたものが入るのは1.19以降ですね。現状、準標準ライブラリで提供されているのは次の3つのパッケージです。</p><ul><li><a href="https://pkg.go.dev/golang.org/x/exp/constraints">golang.org/x/exp/constraints</a><br><code>constraints.Ordered</code> など、型パラメータの制約で使えそうな事前定義済みの型がいろいろ定義されているパッケージ。</li><li><a href="https://pkg.go.dev/golang.org/x/exp/slices">golang.org/x/exp/slices</a><br>コピー、挿入、削除、重複の削除、ソート、バイナリサーチなどを提供する汎用のスライス処理の関数群。</li><li><a href="https://pkg.go.dev/golang.org/x/exp/maps">golang.org/x/exp/maps</a><br>コピー、空にする、値の一覧取得、キーの一覧取得など、汎用のマップ処理の関数群</li></ul><p>また、現状の実装ではいくつか制限もあります。2つは1.19に向けて改善していく旨がリリースノートに書かれています。</p><ul><li>ジェネリックな関数やメソッド内部で型宣言が扱えない</li><li>パラメータ型の引数を組み込み関数のreal()/imag()/complex()といった複素数関数に渡せない</li></ul><p>次の制限は解決するかどうかは明言されていません。</p><ul><li>型パラメータや型パラメータへのポインタを構造体の無名フィールドに埋め込めない。インタフェース型にも型パラメータを埋め込めない</li><li>2つ以上の項を持つ要素ユニオン要素に、メソッドセットを持つインタフェース型を入れられない</li></ul><h2 id="ジェネリクスでできること・できないこと"><a href="#ジェネリクスでできること・できないこと" class="headerlink" title="ジェネリクスでできること・できないこと"></a>ジェネリクスでできること・できないこと</h2><p>いろいろ大きな変更となっていますが、Goのジェネリクスでできるのは主に2つです。</p><ul><li>型チェックを実行時からコンパイル時にフォワードできる（ものがある)</li><li>キャストを減らせる</li></ul><p>挙動としてはC++のテンプレート的に、型パラメータを設定したタイミングで、その型が設定されたバージョンのコードが生成されているようですので、<code>interface&#123;&#125;</code>で毎回キャストしたりしていたのよりも高速に実行されそうです。</p><p>ジェネリクスは以前ではリフレクションで行っていたようなことを一部コンパイル時にできるようにしてくれます。また、以前は汎用型の<code>interface&#123;&#125;</code>で扱っていて、毎回キャストしていたようなケースでキャストしないで書けます。</p><p>とはいえ、その構造体のフィールド一覧を取り出すとか、そういうのはあいかわらずリフレクションが必要です。</p><p>また、Goのジェネリクスは型違いによりロジックを最適化する方法はありません。16ビットの時はSIMDで8個ずつ、32ビットだと4個ずつ計算といったように、型の種別ごとに実行されるプログラムを変えることはできません。</p><p>また、Goの場合はオーバーロードもなく、定数も入れられず、記述力としてはかなりシンプルです。C++では型パラメータがより柔軟でオーバーロードもありますし、型パラメータが可変長だったり、型だけでなく整数なども入れられ、再帰を使って柔軟なデータ構造を実現したりできます。C++のテンプレート機能は、コンパイル時に計算を行ったり、うっかりチューリング完全になってしまったことが知られていますが、Goの場合はC++と違って地獄門が開いたりはしてませんので、安心してください。</p><h2 id="ジェネリクスとの付き合い方・アプリ編"><a href="#ジェネリクスとの付き合い方・アプリ編" class="headerlink" title="ジェネリクスとの付き合い方・アプリ編"></a>ジェネリクスとの付き合い方・アプリ編</h2><p>では実際、ジェネリクスを業務にどのように入れていくか、というところは問題ですが、この手の話はアプリとライブラリで様子が変わってきます。</p><p>まずアプリケーションですが、これは他から利用されるコードではないため、自分の中で完結すればOKです。なのでコンパイラのバージョンが上げられる状況であれば使えるでしょう。ただし、GAEのStandard Environmentだったり、GCPのCloud RunとかCloud Functionsとかでソースコードをクラウドビルドする場合はランタイムのバージョンが環境次第だったりするでしょうし（Cloud Runは自分でローカルビルドしたイメージも使えますが）、そこだけが問題ですね。</p><p>具体的に何に使っていくかですが、ゆるーく型チェックを行うのと、キャストを減らすぐらいの使い道でしょう。</p><p>緩く、というと、例えば整数型を受け取るときに、<code>int</code>を受け取るだけではなく、<code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>も受け取れるようにするとか、今までのGoでは<code>int</code>のみメソッド提供して利用者がキャストするか、個別に関数を用意するか、<code>interface&#123;&#125;</code>で雑に扱うかの３択だったところに、「<code>int</code>っぽいものは全部受け取るよ」という柔軟な選択肢が追加で提供できますね。</p><p>それ以外だと、「ポインタのみ受け取りたい、インスタンスは受け取らない」みたいなケースで、ポインタを強制するみたいなのもできますね。デコード系の処理でよく問題になるやつ。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonDecode</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(data []<span class="keyword">byte</span>, input *T)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> json.Unmarshal(data, input)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> Favorite <span class="keyword">struct</span> &#123;</span><br><span class="line">Food <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f Favorite</span><br><span class="line">JsonDecode([]<span class="keyword">byte</span>(<span class="string">`&#123;&quot;food&quot;:&quot;中本&quot;&#125;`</span>), &amp;f) <span class="comment">// ←ポインタではなくインスタンスを渡すとコンパイルエラー</span></span><br><span class="line">fmt.Println(f.Food)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あとはデータベースのNullBoolとかその手のコード内のイディオムとかはどんどん使って行ってもいいかと思います。</p><p>オレオレカッコいいコンテナクラスとか、壮大なプログラミングモデルを変えうるような機構とかを入れてしまいたくなるかもしれませんが、JavaScriptでプリミティブな構造を大きく変えるようなライブラリが入った結果、そのコードを読み解くのにそのライブラリの知識も追加で必要になって、他の人から手が出ない、みたいなことがあったので（数社の共同開発案件で、突然、コードフリーズの日に今まで使ってなかったimmutable.jsを使ったコードがPRで送られてきてコードレビューで苦戦した）、Go流から大きく外れるようなものは慎重にやった方が良いですね。世間の流行とうっかり距離が離れてしまうと負債化してしまいますし。</p><p>もちろん、RxGoみたいなのとか、関数型のリスト処理を行ライブラリがジェネリクス対応になって多くのコミュニティの支持を得られて広まっていく、というのは当然あると思いますが、エコシステム全体がアップデートされていくには数年単位でかかると思うので、まあのんびりやればいいかと思います。</p><h2 id="ジェネリクスとの付き合い方・ライブラリ編"><a href="#ジェネリクスとの付き合い方・ライブラリ編" class="headerlink" title="ジェネリクスとの付き合い方・ライブラリ編"></a>ジェネリクスとの付き合い方・ライブラリ編</h2><p>ライブラリを実装する人は、ジェネリクスを使ってしまうとGo 1.18以上でしか使えないものになってしまいます。Node.jsもfsパッケージのasync版を追加したときにパッケージを分けていたし、Goでもそうすべき気がします。</p><ul><li>github.com/yourname/mylibrary/v2</li><li>github.com/yourname/mylibrary/v2/generics</li></ul><p>で、半年後に1.19がリリースされ、1.17のサポートが切れたタイミングでバージョンをあげて後方互換性を切りつつ、ジェネリクスの方をデフォルトにする、という感じでしょうか。</p><ul><li>github.com/yourname/mylibrary/v3</li></ul><p>ジェネリクスのチュートリアルには「まずジェネリクスでない実装を作ってからジェネリクス化せよ」とありますが、その前にまるごとコピーする工程を入れるだけなのでまあ、手法としてはこれでいけるかと思います。</p><h2 id="ジェネリクスに向けたイディオムの整備"><a href="#ジェネリクスに向けたイディオムの整備" class="headerlink" title="ジェネリクスに向けたイディオムの整備"></a>ジェネリクスに向けたイディオムの整備</h2><p>Goに限らず、どの言語でも「よくある命名規則やルール」などがあります。Goでは、<code>Append()</code>関数があれば1つ目のものが追加先で返り値に変更済みのものが入るとか、<code>Copy()</code>はコピー先、コピー元の順序の引数になっているとかです。ジェネリクスに関するこのようなイディオムも今後、徐々にコンセンサスが取れてくると思います。</p><p>今の所のサンプルとかで見えてくる命名規則はこんな感じですね。</p><ul><li>型パラメータ名として、型が1つだけならTを使う。</li><li>型パラメータ名として、複数ある場合は1文字変数的な命名で大文字にして使う</li></ul><p>mapsパッケージだとこんな感じですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Equal</span>[<span class="title">M1</span>, <span class="title">M2</span> <span class="title">constraints</span>.<span class="title">Map</span>[<span class="title">K</span>, <span class="title">V</span>], <span class="title">K</span>, <span class="title">V</span> <span class="title">comparable</span>]<span class="params">(m1 M1, m2 M2)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure><p>holdになっているプロポーザルでは、型パラメータを取るファクトリー関数として<code>PoolOf()</code>が提案されています。</p><p><a href="https://github.com/golang/go/issues/47657">https://github.com/golang/go/issues/47657</a></p><p>そういうジェネリクスならではのイディオムが整備されると、ジェネリクスを使ったコードの意図が伝わりやすくなるので、今後その手のイディオムが充実していくといいですね。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220209a/go1.18top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;295&quot;&gt;

&lt;p&gt;Go 1.18のリリースが迫っているため、最近恒例でやっている新機能を何人かで紹介する集中連載を行います。ただ、Go</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="Go1.18" scheme="https://future-architect.github.io/tags/Go1-18/"/>
    
    <category term="ジェネリクス" scheme="https://future-architect.github.io/tags/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>PG BATTLE 2021 参戦記</title>
    <link href="https://future-architect.github.io/articles/20220208a/"/>
    <id>https://future-architect.github.io/articles/20220208a/</id>
    <published>2022-02-07T15:00:00.000Z</published>
    <updated>2022-02-08T03:05:18.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>本記事は、2021/10/23(土)に行われた<a href="https://products.sint.co.jp/pg_battle" title="PG Battle2021">PG Battle 2021</a>の参戦記です。</p><p>フューチャーから3人1組で3チーム参加し、なんと<strong>企業の部6位</strong>に入賞することができました！！</p><img src="/images/20220208a/キャプチャ.PNG" alt="" width="1200" height="642" loading="lazy"><p>本記事を通じて、競技プログラミングに興味のある方が少しでも増えると良いなーと思っています！</p><h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>2021年7月フューチャー新卒入社の栗城です。競プロ歴は2年弱（就活期の終盤に始めました）、</p><p>問題を解くのが大好きで、毎週末AtCoderのコンテストに参加しています。2022年2月からOCV（フューチャーの競技プログラミング部）の部長を務めさせていただいています。</p><h1 id="競技プログラミングとは"><a href="#競技プログラミングとは" class="headerlink" title="競技プログラミングとは"></a>競技プログラミングとは</h1><p>競技プログラミングは与えられた問題を好きなプログラミング言語で解く競技です。略して「競プロ」と言います。日本では<a href="https://atcoder.jp/">AtCoder</a>というコンテストサイトが有名で、毎週末コンテストが開催されています。</p><p>初級レベルでは求められた処理をそのまま実装すれば正解できる問題が多く出題されるので、</p><ul><li><strong>プログラミングに慣れたい</strong></li><li><strong>新しいプログラミング言語を習得したい</strong></li></ul><p>という方には非常におすすめです。</p><p>コンテストとかは興味ないけど気軽にアルゴリズムの練習をしてみたいという方には、<a href="https://algo-method.com/">アルゴ式</a>というサイトがあります。プログラミングを通して簡単な算数・アルゴリズム・統計などを基礎的なレベルから学ぶことができ、新しい言語の習得にも役立ちます。</p><p>一方コンテストにおいては、上位になればなるほど<strong>アルゴリズム力</strong>・<strong>思考力</strong>・<strong>数学力</strong>を極める戦いとなります。</p><p>アルゴリズムを駆使するような仕事でない限り実務からはだんだん離れていきますが、それでも</p><ul><li><strong>問題の本質を見抜く力</strong></li><li><strong>複雑なロジックを最後まで考え抜く思考体力</strong></li><li><strong>思いついた解法を素早く正確にコードに落とし込む実装力</strong></li></ul><p>このあたりは実務にも大いに役立つところだと思っています。</p><p>どんな問題が出るのか気になる方は、今回PG Battleで出題された問題をこの記事の後半で紹介していますので、<br>ぜひ見てみてください！</p><h1 id="PG-Battleとは"><a href="#PG-Battleとは" class="headerlink" title="PG Battleとは"></a>PG Battleとは</h1><p>毎年秋に開催される競プロのチーム戦で、ルールはこんな感じです。</p><ul><li>同じ会社や学校の中で3人チームを組んで参加</li><li>3人で<strong>「ましゅまろ」「せんべい」「かつおぶし」</strong>の各4問セットを別々に解き、チームの合計点を競う</li><li>「ましゅまろ」 &lt; 「せんべい」 &lt; 「かつおぶし」 の順に難しくなる（堅い方が難しい！）</li><li>合計点が同じ場合は、合計解答時間の短いチームが上位</li><li>企業の部・大学生の部・高校生以下の部のそれぞれで順位を競う</li></ul><p>細かい参加方法やルール・注意点などは<a href="https://qiita.com/mirai_taiyaki/items/9dab22821af15858e414">去年の体験記</a>にあるので、気になる方は読んでみてください。</p><p>OCVでは毎年部内でチームを組んで参加するのが恒例となっており、今年は以下の３チームで参加しました。</p><p>例年より<del>適当な</del>個性の強いチーム名でした笑</p><ul><li>犬もこもこ栗いがいが（※筆者のチームです）</li><li>Hello 猫 World!</li><li>あと一人足りない！行けたら行くチーム</li></ul><h1 id="コンテスト当日"><a href="#コンテスト当日" class="headerlink" title="コンテスト当日"></a>コンテスト当日</h1><p>私のチームは</p><p>ましゅまろ担当：<a href="https://atcoder.jp/users/baku1101"><font color="LightSeaGreen"><b>baku1101</b></font></a><br>せんべい担当：<a href="https://atcoder.jp/users/marroncastle917"><font color="Blue"><b>marroncastle917</b></font></a><br>かつおぶし担当：<a href="https://atcoder.jp/users/yamad"><font color="DarkKhaki"><b>yamad</b></font></a></p><p>の同期新人チームでした。<br><font color="LightSeaGreen">水</font><font color="Blue">青</font><font color="DarkKhaki">黄</font><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>とバランスが取れたチームが組めたので、始まる前から上位狙えるかも？とは思っていました。</p><p>私は競プロのコンテストに普段から参加しているので、<a href="https://products.sint.co.jp/q_list_2020">前年の過去問</a>を解く以外に特に対策はしませんでした。PG Battle自体は初めてだったので、本番で使用する<a href="https://products.sint.co.jp/topsic">TOPSIC</a>というサイトから提出の練習などをして本番を迎えました。</p><p>本番では私が担当したせんべいは第3問までは比較的解きやすい問題でしたが第4問が非常に難しく、第4問を考えている間にタイムアップ！問題は<a href="https://products.sint.co.jp/q_list_2021">こちら</a>から見られます。</p><p>最後まで提出ボタンを押さなかったので、オンラインに保存していたコードが提出されたかどうか不安になりましたが、提出履歴を見るときちんと提出されており、一安心。</p><p>反省としては、時間いっぱいまで考え続けるのではなく、第4問にもっと早く見切りをつけて解答終了すべきでした。</p><p>点数が同じチームは3人の解答時間の合計で順位が決まるからです。チームの足を少し引っ張ってしまったので、この点は来年への教訓です。</p><h1 id="結果発表"><a href="#結果発表" class="headerlink" title="結果発表"></a>結果発表</h1><p>終了から数時間後に採点結果が発表され、以下のような結果でした。</p><p>ましゅまろ：100点（4問中4問正解）<br>せんべい：65点（4問中3問正解）<br>かつおぶし：70点（4問中3問正解）</p><p>3人とも取るべき問題をミスなく正解でき、ベストを尽くせたと言っていい結果になりました！</p><p>Twitterなどで感想を見る限り上位が期待できそうなことが分かったので、順位発表を楽しみに1週間過ごしました。</p><p>1週間後に結果発表があり、冒頭にも書いた通り<strong>企業の部194チーム中6位</strong>という成績を収めることができました！景品は上位3チームと10位以降の飛び賞しかないのでもらえませんでしたが、トップ10に入ると順位表に企業名が出るので、会社の名前を残せたことが何より良かったなと思っています。チームメイトに感謝です。</p><h1 id="問題紹介"><a href="#問題紹介" class="headerlink" title="問題紹介"></a>問題紹介</h1><p>私が解いた「せんべい」の第3問「トーナメント表」の問題を紹介します。</p><p>この問題はアルゴリズムの知識は特に必要ないので、競プロ未経験の方もぜひ考えてみてください。</p><img src="/images/20220208a/PGBattle2021_トーナメント表.png" alt="PGBattle2021_トーナメント表" width="1200" height="674" loading="lazy"><p>問題の全文は<a href="https://products.sint.co.jp/hubfs/resource/topsic/pgb2021/2_3.pdf">こちら</a>から見られます。</p><p>読んでもよく分からなかった方のために、改めて説明します。</p><p>例えば、人１～４の４人がいたとして、とある組み合わせでトーナメント形式で対決した結果、</p><ul><li>人１：ベスト４</li><li>人２：ベスト４</li><li>人３：ベスト２</li><li>人４：ベスト１</li></ul><p>だったことだけが分かっているとします。</p><p>このとき、もしトーナメント上の人の並びが問題文中の図のようだったとしたら、各試合の勝敗を図のように決めれば人１～４がそれぞれ「ベスト４、ベスト４、ベスト２、ベスト１」になりますよね。</p><p>このように、<strong>適切に勝敗を定めれば与えられた順位を実現できるようなトーナメント表の人の並び方を出力する</strong>のがこの問題です。この例では「3,1,2,4」と出力すれば正解となります（他の正答もあり得ます）</p><p>競プロでは最適解を求める問題が多いのですが、この問題はそうではなく、条件を満たす解を何でもよいので一つ出力する形式です。このような問題を<strong>「構築問題」</strong>といい、理詰めのプロセスだけでなく<strong>「実験」</strong>や<strong>「ちょっとしたひらめき」</strong>が必要になることが多く、得意不得意がはっきりしやすいのが特徴です。</p><h1 id="解説"><a href="#解説" class="headerlink" title="解説"></a>解説</h1><p>さて、この問題はどう考えれば良いでしょうか。</p><p>まず、どう転んでも各順位を取る人数は決まっているので、人数の分布が違っていたらダメそうです。例えば、ベスト１（優勝者）やベスト２（準優勝者）が２人以上いたり、ベスト４が１人しかいないようなことはあり得ないため、そのような場合は-1を出力します。</p><p>一方、順位ごとの人数が適切な場合は工夫すれば上手くいきそうです。ここで人の並びを定めやすくするために、<strong>トーナメントの勝敗をこちらで決めてしまう</strong>ことにしましょう。今回は、<strong>各対戦において右側の人が必ず勝つ</strong>ことにします。</p><p>つまり、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="6.157ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 2721.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2221.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>の場合には以下のように対戦が進むことを仮定します。<img src="/images/20220208a/トーナメント表.PNG" alt="トーナメント表.PNG" width="620" height="455" loading="lazy"></p><p>図中の数字は人の番号ではなく、<strong>トーナメント上の位置が左から何番目か</strong>を表すことに注意してください。以後、この左から数えた位置を<strong>位置番号</strong>と呼ぶことにします。</p><p>実は、どのように勝敗を決めたとしても各順位の人数は変わらないため、適切な解を必ず構成できます。よって、<strong>勝敗は好きなように決めて良い</strong>のです。</p><p>勝敗さえ決めてしまえばあとは人を適切な位置に配置していくだけなのですが、実装をやりやすくするため、ここでは以下のような性質に注目します。</p><ul><li>各対戦では<strong>位置番号が2で割り切れる回数が多い方が勝利</strong>している</li><li><strong>位置番号が2で何回割り切れるかで最終順位が決まる</strong></li></ul><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="6.157ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 2721.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2221.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>の例だと位置番号が2で割り切れる回数によって</p><ul><li>2回：ベスト１（位置４）</li><li>1回：ベスト２（位置２）</li><li>0回：ベスト４（位置１，３）</li></ul><p>のようになっています。<br>ピンと来ない方は、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="8.295ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 3666.2 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2221.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2721.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3166.2,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>のトーナメント表を実際に書いてみると分かりやすいと思います。</p><p>この性質を一般化すると、</p><ul><li><strong>位置番号が2で割り切れる回数がちょうど</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><strong>回ならベスト</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="4.536ex" height="1.914ex" role="img" focusable="false" viewBox="0 -846 2005 846"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1666,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container></li></ul><p>と表すことができます。さらに、ベスト<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="4.536ex" height="1.914ex" role="img" focusable="false" viewBox="0 -846 2005 846"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1666,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container>になるのは<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>回勝利することと同値なため、</p><ul><li><strong>位置番号が2で割り切れる回数がちょうど</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><strong>回なら</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><strong>回勝利する</strong></li></ul><p>と言い換えればよりシンプルになります。また、この逆も成り立ちます。</p><p>2で割り切れる回数だけ勝利するというのは面白い性質ですね。</p><p>以上より、与えられた順位情報から各人が何回勝利したかを求め、</p><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><strong>勝した人を2でちょうど</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><strong>回割り切れる位置に配置</strong></li></ul><p>するように実装すれば、正解が得られます。</p><p>計算量は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.226ex" height="2.48ex" role="img" focusable="false" viewBox="0 -846 2751.9 1096"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="mo" transform="translate(2362.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>となり、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="9.049ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 3999.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(2999.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>であることから<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container>回程度の計算で収まるので、実行時間制限2秒に余裕をもって間に合います。</p><p>以下は、pythonでこの方針を実装してみたものです。本番で私が提出したコードを可読性を上げるために改良し、コメントをつけてみました。ジャッジで確かめていないので間違いがないとは言い切れませんが、方針は合っているはずです。</p><h2 id="Part１-入力を受け取る"><a href="#Part１-入力を受け取る" class="headerlink" title="Part１　入力を受け取る"></a>Part１　入力を受け取る</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())                    <span class="comment"># トーナメントの深さ</span></span><br><span class="line">A = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="comment"># 各人の順位を並べた配列</span></span><br><span class="line">M = <span class="built_in">pow</span>(<span class="number">2</span>,N)                        <span class="comment"># 参加人数</span></span><br></pre></td></tr></table></figure><p>pow(2,N)は2の<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container>乗です。</p><h2 id="Part２-勝利数ごとに人の番号を記録"><a href="#Part２-勝利数ごとに人の番号を記録" class="headerlink" title="Part２　勝利数ごとに人の番号を記録"></a>Part２　勝利数ごとに人の番号を記録</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rank_to_win = {<span class="built_in">pow</span>(<span class="number">2</span>,i) : N-i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>)} <span class="comment"># 「ベストa」を「勝利数」に変換する辞書（javaでいうmap）</span></span><br><span class="line">people_nums = [[] <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>)]             <span class="comment"># w勝した人の番号を記録する配列</span></span><br><span class="line"><span class="keyword">for</span> i,a <span class="keyword">in</span> <span class="built_in">enumerate</span>(A):        <span class="comment"># 配列Aの要素aを0始まりのインデックスiとともに繰り返す</span></span><br><span class="line">    num = i+<span class="number">1</span>                   <span class="comment"># 人の番号</span></span><br><span class="line">    w = rank_to_win[a]          <span class="comment"># num番の人の勝利数、ベストaを勝利数に変換</span></span><br><span class="line">    people_nums[w].append(num)  <span class="comment"># w勝した人の番号を記録する配列にnum番を追加</span></span><br></pre></td></tr></table></figure><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.62ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 716 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></svg></mjx-container> 勝した人の番号を<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="6.156ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 2721 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(969,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1454,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1957,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2255,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>_<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.577ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3791 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2519,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2797,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(3513,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>に記録します。</p><h2 id="Part３-トーナメント上に実際に人を並べる"><a href="#Part３-トーナメント上に実際に人を並べる" class="headerlink" title="Part３　トーナメント上に実際に人を並べる"></a>Part３　トーナメント上に実際に人を並べる</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 答え（トーナメントに並べる人の番号）の配列</span></span><br><span class="line">ans = [<span class="number">0</span>]*M</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0勝からN勝まで繰り返し</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># w勝した人のトーナメント上の位置番号(1-index)を表す配列</span></span><br><span class="line">    positions = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">pow</span>(<span class="number">2</span>,w), M+<span class="number">1</span>, <span class="built_in">pow</span>(<span class="number">2</span>,w+<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># w勝した人の人数が位置番号の数と合わなければ-1を出力して終了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(people_nums[w]) != <span class="built_in">len</span>(positions):</span><br><span class="line">        <span class="built_in">print</span>(-<span class="number">1</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># トーナメント上の位置（pos）にnum番の人を配置（同じ勝利数の人の中では順不同）</span></span><br><span class="line">    <span class="keyword">for</span> pos, num <span class="keyword">in</span> <span class="built_in">zip</span>(positions, people_nums[w]):</span><br><span class="line">        ans[pos-<span class="number">1</span>] = num</span><br><span class="line"></span><br><span class="line"><span class="comment"># 答えを出力</span></span><br><span class="line"><span class="built_in">print</span>(*ans)</span><br></pre></td></tr></table></figure><p>本質パートです。このパートで答えまで出力しています。<br>python特有の記法である</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">pow</span>(<span class="number">2</span>,w), M+<span class="number">1</span>, <span class="built_in">pow</span>(<span class="number">2</span>,w+<span class="number">1</span>)))</span><br></pre></td></tr></table></figure><p>では、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.464ex" height="1.53ex" role="img" focusable="false" viewBox="0 -676.2 1089.3 676.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></svg></mjx-container>から始めて<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="4.509ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1993 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container>間隔で<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container>までのリストを作っており、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>でちょうど<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.62ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 716 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></svg></mjx-container>回割り切れる数を全列挙しています。<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="22.349ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9878.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2221.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2721.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3110.6,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(4439.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5495.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6495.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6884.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7328.8,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(8322.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9378.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>の場合は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="23.27ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10285.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(988,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1457,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1802,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2163,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2508,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2993,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3593,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(4339.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5395.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(5673.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(6173.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(6618.2,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(7118.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7562.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(8562.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9007.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(10007.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>となります。</p><p>解説は以上です。いかがでしたでしょうか。</p><p>この問題は他にも様々なやり方があるので、余裕があれば考えてみてください。解の構成自体はそこまで難しいものではありませんが、どう実装するかが問われる問題だったかなと思います。</p><p>あと、問題の作りが自然というか実際自分でも考えたくなりそうな問題設定で、個人的にはとても好きな問題でした。</p><p>公式が出している<a href="https://products.sint.co.jp/a_list_2021#07">python, C++, javaによる解答例</a>や、<a href="https://www.youtube.com/watch?v=t5O_wdQ_0a8&list=PLnNY0P_Gy1deocZv3L-P0A_vplKdGL5Tq&index=7">AtCoder社長による解説動画</a>もあるので参考にしてみてください。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>私自身は競プロで入賞するのが初めてだったので、とてもうれしかったです。私のように個人では到底最上位は狙えないような実力でも、同じ企業内で粒を揃えられれば上位を狙えるのがPG Battleの魅力だなと思います。</p><p>それから、去年よりも全体的に面白い問題が多く解きがいがありました。</p><p>意外と競プロの公式チーム戦は数が少ないので、このような機会を毎年提供してくださる主催者の方々にとても感謝ですし、レベルが近いメンバーで比較的簡単にチームが組める社内の競プロerのレベルの高さにも恵まれているなと感じました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>最後までお読みいただきありがとうございました！競技プログラミングに少しでも興味を持っていただけたでしょうか。</p><p>OCV（フューチャーの競プロ部）では灰色からレッドコーダーまで様々なレベルの方が在籍しています。</p><p>まだ部長になったばかりなので本格的な活動はこれからになりますが、気軽に教え合ったり情報交換したりできる環境を作っていく予定です。</p><p>興味のある方はぜひお声がけください！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">色はAtCoderにおける強さを表していて、灰,茶,緑,水,青,黄,橙,赤,自由色の順に強くなります。詳しくは<a href="https://chokudai.hatenablog.com/entry/2019/02/11/155904">こちら</a>を読んでみてください。各色がどれぐらいの実力なのかについてAtCoderの社長が詳しく書いてくださっています。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;本記事は、2021/10/23(土)に行われた&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
    <category term="pgbattle" scheme="https://future-architect.github.io/tags/pgbattle/"/>
    
  </entry>
  
  <entry>
    <title>オンライン勉強会の発表順を決めるサービスを作ってみた</title>
    <link href="https://future-architect.github.io/articles/20220207a/"/>
    <id>https://future-architect.github.io/articles/20220207a/</id>
    <published>2022-02-06T15:00:00.000Z</published>
    <updated>2022-02-07T01:15:56.555Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220207a/スクリーンショット_2022-02-03_0.14.44.png" alt="サービスイメージ" width="1200" height="678" loading="lazy"><p>オンライン勉強会をする上で、ちょっと悩むポイントは発表順を決めることです。meetなどで表示されるユーザー一覧は、人によって表示順序が異なるため「画面上の右上の人から順番に」という技が使えなかったりします。</p><p>で、「名前順」「背の順」「誕生日順」など、いろいろな順番を決めるための方法を考えて順番を決めていました。でも、順番を変えるだけなら乱数で適当に決めちゃえばいいよね、ということで作ってみました。Svelte使ってみたかったし（←これが目的）。</p><ul><li><a href="https://shibukawa.github.io/shuffle-name/">https://shibukawa.github.io/shuffle-name/</a></li></ul><p>テキストエリアに参加者の名前を改行区切りで入れていくだけです。一文字入力ごとにシャッフルして右側に表示されます。最後まで名前を入れるだけでシャッフル済みのリストができるという寸法です。</p><p>Tailwind.cssとDaisyUIのおかげで、新しいフレームワークにチャレンジするときに、見た目部分は既存の知識の流用が効くので良いですね。効率良く学べます。しかもReactと違ってサンプルコードをそのままコピーして貼ると動くのは楽で良いですね（classをclassNameに変える手間がない)。</p><p>ビルド結果がコンパクトで高速という触れ込みなので、ちょくちょく使ってみたいと思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="/articles/20220125a/">がんばらない手ぶらオンライン勉強会</a></li><li><a href="/articles/20211124a/">JSレスBootstrapなdaisyUIの秘密 </a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220207a/スクリーンショット_2022-02-03_0.14.44.png&quot; alt=&quot;サービスイメージ&quot; width=&quot;1200&quot; height=&quot;678&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="Svelte" scheme="https://future-architect.github.io/tags/Svelte/"/>
    
    <category term="daisyUI" scheme="https://future-architect.github.io/tags/daisyUI/"/>
    
    <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>Step Functionsの動的並列処理をローカルで実行する</title>
    <link href="https://future-architect.github.io/articles/20220204a/"/>
    <id>https://future-architect.github.io/articles/20220204a/</id>
    <published>2022-02-03T15:00:00.000Z</published>
    <updated>2022-02-26T07:47:04.822Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220204a/eyecatch_stepfunctions.png" alt="" width="1003" height="498" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の宮永です。</p><p>今回はAWS Step Functionsの動的並列処理をローカルで実行する方法をハンズオン形式でまとめました。ソースコードはこちらに格納していますのでご参考にして下さい。</p><p><a href="https://github.com/orangekame3/stepfunctions-demo">https://github.com/orangekame3/stepfunctions-demo</a></p><blockquote><p>本記事は<a href="/articles/20220202a/">Pipenv+LocalStackで作るLambda開発環境</a>で作成したLambda関数をベースに実装しています。本記事の実装に取り組まれる方はこちらの記事が参考になると思います。</p></blockquote><h1 id="Step-Functionsとは"><a href="#Step-Functionsとは" class="headerlink" title="Step Functionsとは"></a>Step Functionsとは</h1><p>Step FunctionsとはAWSの各種リソースをオーケストレーションするサービスです。</p><p>類似のサービスに<a href="https://airflow.apache.org/">Airflow</a>等があります。AirflowとStep Functionsの比較をした<a href="/articles/20220111a/">多賀さんの記事</a>はとても読み応えたあるのでぜひご覧ください。</p><p>Step Functionsについては技術ブログでもこれまで取り扱っています。</p><ul><li><a href="/articles/20200515/">Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する</a></li><li><a href="https://qiita.com/kazuyuki_yamashita/items/cf36b98c5d2fa83b38bd">CloudWatch EventとLambdaでStepFunctions間のエラ－を伝搬する</a></li></ul><p>今回は<a href="/articles/20200515/">Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する</a>を参考にPythonとLocalStack(Docker)で動的並列処理を実装します。</p><h1 id="モチベーション"><a href="#モチベーション" class="headerlink" title="モチベーション"></a>モチベーション</h1><p>今回想定しているユースケースは「大規模データの集計作業をLambdaで実装する」というものです。</p><p>Lambdaの実行制限時間である15分を超えるであろう処理をStep Functionsを使ってうまく突破したいというのがモチベーションです。先程紹介した<a href="/articles/20200515/">Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する</a>には動的並列処理以外にもStep Functionsを応用したバッチ処理について幅広く言及しているため、一読されると良いかと思います。</p><h1 id="ハンズオンで構築するシステム"><a href="#ハンズオンで構築するシステム" class="headerlink" title="ハンズオンで構築するシステム"></a>ハンズオンで構築するシステム</h1><p>全体のシステム概要を記載した後に機能詳細を紹介します。</p><h2 id="システム構成図"><a href="#システム構成図" class="headerlink" title="システム構成図"></a>システム構成図</h2><p>今回構築するシステム構成図を以下に記載します。</p><p>画像左側はビジュアルワークフロー図と呼ばれるもので今回扱うStep Functionsの定義書から生成されます。画像右側はビジュアルワークフロー図に対応するシステムアーキテクチャ図です。</p><p>S3バケットからJSONを取得し、後続のLambdaでETL処理をします。</p><blockquote><p>余談ですが、Visual Studio Codeには<a href="https://aws.amazon.com/jp/visualstudiocode/">AWS Tool Kit</a>という拡張機能が存在します。</p></blockquote><p>こちらの拡張機能を利用すれば<a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-amazon-states-language.html">ステートメント言語</a>を下図のビジュアルワークフロー図のように可視化することができます。</p><img src="/images/20220204a/image.png" alt="ビジュアルワークフロー" width="1200" height="881" loading="lazy"><h2 id="実装するアプリの機能詳細"><a href="#実装するアプリの機能詳細" class="headerlink" title="実装するアプリの機能詳細"></a>実装するアプリの機能詳細</h2><p><a href="https://qiita.com/orangekame3/private/9abed652b26dd4eb1afd">こちらの記事</a>で実装しているLambda関数と同等の機能をもつシステムを実装します。<br>Scatter→Gatherに注目するとJSON→ExcelのETL処理を行っています。<br>S3バケットには予め以下の構造をもつJSONファイルを配置しておきます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;長野原 ひろし&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">58</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-05-16&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;001&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;般若 竜門&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">75</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-07-19&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;002&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;十河 アンナ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">57</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-09-06&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="ScatterLambda"><a href="#ScatterLambda" class="headerlink" title="ScatterLambda"></a>ScatterLambda</h2><p>ScatterLambdaでは上記のJSONファイルを取り込み、DataFrameに変換します。その後、DataFrameをSegmentLamdaが15分以内に処理できる単位に分割します。</p><p>分割したファイルはpikcleファイルでS3バケットに格納します。</p><h2 id="SegmentLambda"><a href="#SegmentLambda" class="headerlink" title="SegmentLambda"></a>SegmentLambda</h2><p>SegmentLambdaではScatterLambdaで分割されたpickleファイルを取り込みETL処理を行います。<br>今回行うETL処理を以下記載します。</p><ul><li>「ボーナスポイント」カラムの追加</li></ul><p>「ボーナスポイント」は以下の条件で決定します。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>【条件】</p>  <p>会員ランクが「4，5」の会員には「ポイント」×1.25倍のボーナスポイントを、会員ランク「1，2，3」の会員には「ポイント」と同等のボーナスポイントを付与することします。</p></div><p>上記の条件に従ってSegmentLambdaの処理前後のテーブルをまとめると以下のようになります。</p><p><strong>SegmentLambda処理前</strong></p><div class="scroll"><table><thead><tr><th align="left">会員番号</th><th align="left">名前</th><th align="left">会員ランク</th><th align="left">ポイント</th><th align="left">タイムスタンプ</th></tr></thead><tbody><tr><td align="left">000</td><td align="left">長野原 ひろし</td><td align="left">4</td><td align="left">58</td><td align="left">2021-05-16</td></tr><tr><td align="left">001</td><td align="left">般若 竜門</td><td align="left">2</td><td align="left">75</td><td align="left">2021-07-19</td></tr><tr><td align="left">002</td><td align="left">十河 アンナ</td><td align="left">2</td><td align="left">57</td><td align="left">2021-09-06</td></tr></tbody></table></div><p><strong>SegmentLambda処理後</strong></p><div class="scroll"><table><thead><tr><th align="left">会員番号</th><th align="left">名前</th><th align="left">会員ランク</th><th align="left">ポイント</th><th align="left">タイムスタンプ</th><th align="left">ボーナスポイント</th></tr></thead><tbody><tr><td align="left">000</td><td align="left">長野原 ひろし</td><td align="left">4</td><td align="left">58</td><td align="left">2021-05-16</td><td align="left">72.5</td></tr><tr><td align="left">001</td><td align="left">般若 竜門</td><td align="left">2</td><td align="left">75</td><td align="left">2021-07-19</td><td align="left">75</td></tr><tr><td align="left">002</td><td align="left">十河 アンナ</td><td align="left">2</td><td align="left">57</td><td align="left">2021-09-06</td><td align="left">57</td></tr></tbody></table></div><h2 id="GatherLambda"><a href="#GatherLambda" class="headerlink" title="GatherLambda"></a>GatherLambda</h2><p>GatherLambdaではSegmentLambdaでETL処理をされた各pickleファイルを取り込み、ひとつのExcelファイルを作成します。<br>作成したExcelファイルはS3バケットにアップロードして処理を終了します。</p><h1 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h1><p>開発に取り組む前に筆者の開発環境を記載します。記事中Linuxコマンドを使用している箇所があります。Windowsで開発される方はWSLを使用することをおすすめいたします。</p><ul><li>OS Ubuntu 20.04</li><li>Python(pyenv) 3.9</li><li>Pipenv</li><li>Docker</li><li>docker compose v2</li><li>AWS CLI v2</li></ul><h1 id="LocalStackの準備"><a href="#LocalStackの準備" class="headerlink" title="LocalStackの準備"></a>LocalStackの準備</h1><p>実装対象が決まったので早速開発環境の準備に取り掛かります。</p><p>AWS環境をローカルに用意するためにLocalStackを利用します。使用するのは以下２つのimageです。<br>なお、LocalStackの環境準備は<a href="https://dev.classmethod.jp/articles/stepfunctionslocal-localstack/">こちらの記事</a>を参考にさせていただきました。</p><ul><li><a href="https://hub.docker.com/r/localstack/localstack/">localstack</a></li><li><a href="https://hub.docker.com/r/amazon/aws-stepfunctions-local">stepfunctions</a></li></ul><p>それでは上記2つのimageを使用したdocker-compose.ymlを記述します。</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;$&#123;LOCALSTACK_DOCKER_NAME-localstack_main&#125;&quot;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATA_DIR=/tmp/localstack/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=lambda,s3,stepfunctions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LAMBDA_EXECUTOR=docker-reuse</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEFAULT_REGION=us-east-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEBUG=1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4566:4566&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/localstack:/tmp/localstack</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">stepfunctions:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">stepfunctions</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">amazon/aws-stepfunctions-local:latest</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">stepfunctions-credentials.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LAMBDA_ENDPOINT=http://localstack:4566</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">STEPFUNCTIONS_LAMBDA_ENDPOINT=http://host.docker.internal:4566</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8083:8083&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>stepfunctions</code>の<code>env_file</code>で環境変数を渡しています。<code>env_file</code>の中身を以下記載します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AWS_ACCOUNT_ID=test</span><br><span class="line">AWS_DEFAULT_REGION=us-east-1</span><br><span class="line">AWS_ACCESS_KEY_ID=test</span><br><span class="line">AWS_SECRET_ACCESS_KEY=test</span><br></pre></td></tr></table></figure><p>また、<code>DEBUG</code>オプションに<code>1</code>と選択することでLocalStackのログを細かく確認することができます。<br>Step Functionsを実行するときにはログも確認しながらデバッグするとよいと思います。</p><p>これでLocalStackの準備が整いました。<br>以下のコマンドを実行してコンテナが2つ起動していることを確認してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose up --build</span><br></pre></td></tr></table></figure><p>次にAWS CLIの設定を行います。</p><h1 id="AWS-CLIの設定"><a href="#AWS-CLIの設定" class="headerlink" title="AWS CLIの設定"></a>AWS CLIの設定</h1><p>AWS CLIでは認証情報などをプロファイルとして保存することができます。<br>AWS CLIをインストールされた方はご自身が使用しているOSのhomeディレクトリに<code>.aws</code>の隠しファルダがあります。(エクスプローラーなどで確認する場合は隠しフォルダを表示するように設定してください。)<code>.aws</code>フォルダ配下には.<code>config</code>と<br><code>.credentials</code>2つのファイルがありますのでそれぞれ以下のように設定してください。</p><p>参考:<a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-profiles.html">名前付きプロファイル</a></p><p>今回は以下のように<code>local</code>というプロファイルを作成しました。</p><figure class="highlight ini"><figcaption><span>config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[localstack]</span></span><br><span class="line"><span class="attr">region</span> = us-east-<span class="number">1</span></span><br><span class="line"><span class="attr">output</span> = json</span><br></pre></td></tr></table></figure><figure class="highlight ini"><figcaption><span>credentials</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[local]</span></span><br><span class="line"><span class="attr">aws_access_key_id</span> = test</span><br><span class="line"><span class="attr">aws_secret_access_key</span> = test</span><br></pre></td></tr></table></figure><p>次にLambdaの実装を行います。</p><h1 id="Lambdaの実装"><a href="#Lambdaの実装" class="headerlink" title="Lambdaの実装"></a>Lambdaの実装</h1><p>このあと、複数のファイルを作成するため、最終的なディレクトリ構造を先に記載します。<br>適宜参考にしてください。</p><details><summary>最終的なディレクトリ構造</summary><div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">├── README.md</span><br><span class="line">├── demo-gather</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── Pipfile</span><br><span class="line">│   ├── Pipfile.lock</span><br><span class="line">│   ├── bin</span><br><span class="line">│   │   └── lambda.zip</span><br><span class="line">│   ├── deploy-packages</span><br><span class="line">│   ├── gather.py</span><br><span class="line">│   ├── lambda.py</span><br><span class="line">│   ├── requirements.txt</span><br><span class="line">│   ├── result.log</span><br><span class="line">│   ├── setup.cfg</span><br><span class="line">│   └── tests</span><br><span class="line">├── demo-scatter</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── Pipfile</span><br><span class="line">│   ├── Pipfile.lock</span><br><span class="line">│   ├── bin</span><br><span class="line">│   │   └── lambda.zip</span><br><span class="line">│   ├── deploy-packages</span><br><span class="line">│   ├── lambda.py</span><br><span class="line">│   ├── requirements.txt</span><br><span class="line">│   ├── result.log</span><br><span class="line">│   ├── scatter.py</span><br><span class="line">│   ├── setup.cfg</span><br><span class="line">│   └── tmp.py</span><br><span class="line">├── demo-segment</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── Pipfile</span><br><span class="line">│   ├── Pipfile.lock</span><br><span class="line">│   ├── bin</span><br><span class="line">│   │   └── lambda.zip</span><br><span class="line">│   ├── deploy-packages</span><br><span class="line">│   ├── lambda.py</span><br><span class="line">│   ├── requirements.txt</span><br><span class="line">│   ├── result.log</span><br><span class="line">│   ├── segment.py</span><br><span class="line">│   ├── setup.cfg</span><br><span class="line">│   └── tests</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── test_segment.py</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── result</span><br><span class="line">│   └── test.xlsx</span><br><span class="line">├── state-machine</span><br><span class="line">│   └── parallel.json</span><br><span class="line">├── stepfunctions-credentials.env</span><br><span class="line">└── utils</span><br><span class="line">    ├── data</span><br><span class="line">    │   └── sample_data.json</span><br><span class="line">    └── utils.py</span><br><span class="line"></span><br><span class="line">15 directories, 39 files</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></details><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>ローカルマシンにPython3の環境が構築されていることを前提としています。<br>今回Lambdaの実装にはPythonを使用します。Pipenvを使用して各Lambda関数毎にプロジェクトを作成します。<br>Pipenvは以下のコマンドでインストールができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pipenv</span><br></pre></td></tr></table></figure><p>冒頭で記載しましたが、以前<a href="/articles/20220202a/">Pipenv+LocalStackで作るLambda開発環境</a>という記事を書かせていただきました。<br>今回は上記の記事で実装した内容を応用します。</p><p>記事ではLambdaの開発時使用するパッケージとデプロイ時のパッケージを分離することでデプロイ時のzipファイルの容量節約する方法を紹介しています。興味がある方はぜひご覧になってください。</p><p>今回は3つLambdaを作成しますので、以下のような構成でフォルダを作成してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── demo-gather</span><br><span class="line">├── demo-scatter</span><br><span class="line">└── demo-segment</span><br></pre></td></tr></table></figure><p>まずはdemo-scatterから開発環境を準備します。<br>Python環境は3.9を使用します。<br>demo-scatter配下で以下のコマンドを実行してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --python 3.9</span><br></pre></td></tr></table></figure><p>次に使用する外部モジュールをインストールします。<br>demo-scatterで使用するモジュールはpandasだけです。以下のコマンドを実行してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install pandas</span><br></pre></td></tr></table></figure><p>続いて開発環境で使用するパッケージをインストールします。以下のコマンドでpytestとmypyをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install pytest mypy --dev</span><br></pre></td></tr></table></figure><p>これでプロジェクト環境が整いました。他2つのプロジェクトも同様に環境を構築します。<br>それぞれ必要なモジュールを記載します。</p><ul><li>demo-segment<ul><li>pandas</li><li>pytest mypy (–dev)</li></ul></li><li>demo-gather<ul><li>pandas</li><li>xlwt</li><li>xlsxwriter</li><li>pytest mypy (–dev)</li></ul></li></ul><p>それではScatterLambdaからロジックの実装をします。</p><h2 id="ScatterLambda-1"><a href="#ScatterLambda-1" class="headerlink" title="ScatterLambda"></a>ScatterLambda</h2><p>demo-scatter配下に以下2つのファイルを作成します。</p><ul><li>scatter.py</li><li>lambda.py</li></ul><p>機能のほとんどはscatter.pyに記述し、lambda.pyではハンドラを呼び出すのみにします。<br>以下、lambda.pyです。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> scatter <span class="keyword">import</span> ScatterHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getenv(<span class="string">&quot;LOCALSTACK_HOSTNAME&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    s3 = boto3.client(<span class="string">&quot;s3&quot;</span>, <span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    endpoint = <span class="string">f&quot;http://<span class="subst">&#123;os.environ[<span class="string">&#x27;LOCALSTACK_HOSTNAME&#x27;</span>]&#125;</span>:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">    handler = ScatterHandler(</span><br><span class="line">        event,</span><br><span class="line">        context,</span><br><span class="line">        s3,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> handler.main()</span><br></pre></td></tr></table></figure><p>ScatterLambdaでは、ファイルの分割を行います。</p><figure class="highlight python"><figcaption><span>scatter.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScatterHandler</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        event,</span></span></span><br><span class="line"><span class="params"><span class="function">        context,</span></span></span><br><span class="line"><span class="params"><span class="function">        s3,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        self.event = event</span><br><span class="line">        self.context = context</span><br><span class="line">        self.s3 = s3</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">            data_path = self.event[<span class="string">&quot;input_obj&quot;</span>]</span><br><span class="line">            division_number = <span class="number">10</span></span><br><span class="line">            segments: <span class="type">Dict</span> = &#123;&#125;</span><br><span class="line">            segments[<span class="string">&quot;segment_definitions&quot;</span>] = []</span><br><span class="line">            data = self.get_s3_data(bucket, data_path)</span><br><span class="line">            df = self.make_df(data)</span><br><span class="line">            dfs = [</span><br><span class="line">                df.loc[i : i + division_number - <span class="number">1</span>, :]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(df), division_number)</span><br><span class="line">            ]</span><br><span class="line">            segments = self.make_segment_df(segments, bucket, dfs)</span><br><span class="line">            <span class="keyword">return</span> segments</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.exception(e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_s3_data</span>(<span class="params">self, bucket: <span class="built_in">str</span>, key: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">dict</span>]:</span></span><br><span class="line">        resp = self.s3.get_object(Bucket=bucket, Key=key)</span><br><span class="line">        body = resp[<span class="string">&quot;Body&quot;</span>].read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        json_dict: <span class="type">List</span>[<span class="built_in">dict</span>] = json.loads(body)</span><br><span class="line">        <span class="keyword">return</span> json_dict</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_df</span>(<span class="params">self, data: <span class="built_in">list</span></span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        df = pd.DataFrame.from_dict(data)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_segment_df</span>(<span class="params">self, segments: <span class="built_in">dict</span>, bucket: <span class="built_in">str</span>, dfs: <span class="built_in">list</span></span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i, df_i <span class="keyword">in</span> <span class="built_in">enumerate</span>(dfs):</span><br><span class="line">            <span class="keyword">with</span> tempfile.TemporaryFile() <span class="keyword">as</span> fp:</span><br><span class="line">                df_i.to_pickle(fp)</span><br><span class="line">                fp.seek(<span class="number">0</span>)</span><br><span class="line">                fsend = <span class="string">&quot;scatter/job_&quot;</span> + <span class="built_in">str</span>(i).zfill(<span class="number">3</span>) + <span class="string">&quot;.pkl&quot;</span></span><br><span class="line">                self.s3.put_object(</span><br><span class="line">                    Body=fp.read(),</span><br><span class="line">                    Bucket=bucket,</span><br><span class="line">                    Key=fsend,</span><br><span class="line">                )</span><br><span class="line">                segments[<span class="string">&quot;segment_definitions&quot;</span>].append(fsend)</span><br><span class="line">        <span class="keyword">return</span> segments</span><br></pre></td></tr></table></figure><p>test-bucketに格納されたsample.jsonを取得して、pandasでDataFrameに変換します。変換後はpickleファイルで保存することでSegmentLambdaでの読み込み処理を高速化しています。<br>関数の戻り値はS3のオブジェクトキーの一覧です。<code>segment_definitions</code>をキーとした辞書にリストして格納しています。</p><h2 id="SegmentLambda-1"><a href="#SegmentLambda-1" class="headerlink" title="SegmentLambda"></a>SegmentLambda</h2><p>SegmentLambdaでETL処理を行います。ETL処理時の条件を再度記載します。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>【条件】</p>  <p>会員ランクが「4，5」の会員には「ポイント」×1.25倍のボーナスポイントを、会員ランク「1，2，3」の会員には「ポイント」と同等のボーナスポイントを付与することします。</p></div><p>上記の条件を実装した<code>segment.py</code>を以下記載します。</p><figure class="highlight python"><figcaption><span>segment.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentHandler</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, event, context, s3</span>):</span></span><br><span class="line">        self.event = event</span><br><span class="line">        self.context = context</span><br><span class="line">        self.s3 = s3</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">            recieve = self.event</span><br><span class="line">            send = recieve.replace(<span class="string">&quot;scatter&quot;</span>, <span class="string">&quot;gather&quot;</span>)</span><br><span class="line">            df = self.get_s3_data(bucket, recieve)</span><br><span class="line">            df = self.process(df)</span><br><span class="line">            <span class="keyword">return</span> self.send_segment_df(df, bucket, send)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.exception(e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_s3_data</span>(<span class="params">self, bucket, key</span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        resp = self.s3.get_object(Bucket=bucket, Key=key)</span><br><span class="line">        body = resp[<span class="string">&quot;Body&quot;</span>].read()</span><br><span class="line">        df = pickle.loads(body)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">self, row</span>):</span></span><br><span class="line">        <span class="keyword">if</span> row[<span class="string">&quot;会員ランク&quot;</span>] &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> row[<span class="string">&quot;ポイント&quot;</span>] * <span class="number">1.25</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> row[<span class="string">&quot;ポイント&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span>(<span class="params">self, data: pd.DataFrame</span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        data[<span class="string">&quot;ボーナスポイント&quot;</span>] = data.apply(self.calc, axis=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_df</span>(<span class="params">self, data: <span class="built_in">list</span></span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        df = pd.DataFrame.from_dict(data)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_segment_df</span>(<span class="params">self, df: pd.DataFrame, bucket: <span class="built_in">str</span>, send: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">with</span> tempfile.TemporaryFile() <span class="keyword">as</span> fp:</span><br><span class="line">            df.to_pickle(fp)</span><br><span class="line">            fp.seek(<span class="number">0</span>)</span><br><span class="line">            self.s3.put_object(</span><br><span class="line">                Body=fp.read(),</span><br><span class="line">                Bucket=bucket,</span><br><span class="line">                Key=send,</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> send</span><br></pre></td></tr></table></figure><p>ScatterLambdaと同様にsegment.pyで定義したハンドラを呼ぶlambda.pyを以下のように作成します。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> segment <span class="keyword">import</span> SegmentHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getenv(<span class="string">&quot;LOCALSTACK_HOSTNAME&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    s3 = boto3.client(<span class="string">&quot;s3&quot;</span>, <span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    endpoint = <span class="string">f&quot;http://<span class="subst">&#123;os.environ[<span class="string">&#x27;LOCALSTACK_HOSTNAME&#x27;</span>]&#125;</span>:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    handler = SegmentHandler(event, context, s3)</span><br><span class="line">    <span class="keyword">return</span> handler.main()</span><br></pre></td></tr></table></figure><h2 id="GatherLambda-1"><a href="#GatherLambda-1" class="headerlink" title="GatherLambda"></a>GatherLambda</h2><p>最後にSegmentLambdaでETL処理をしたDataFrameを取り込み、一つのExcelファイルにまとめるGatherLambdaを実装します。<br>こちらもScatterLambda、SegmentLamdaと同様にハンドラを記載したgather.pyとハンドラを呼ぶlambda.pyを作成します。</p><p>gather.pyは以下のようになります。</p><figure class="highlight python"><figcaption><span>gather.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GatherHandler</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, event, context, s3</span>):</span></span><br><span class="line">        self.event = event</span><br><span class="line">        self.context = context</span><br><span class="line">        self.s3 = s3</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">            segments = self.event[<span class="string">&quot;segment_results&quot;</span>]</span><br><span class="line">            send = <span class="string">&quot;test.xlsx&quot;</span></span><br><span class="line">            data_frames: <span class="type">List</span>[pd.DataFrame] = []</span><br><span class="line">            <span class="keyword">for</span> pkl <span class="keyword">in</span> segments:</span><br><span class="line">                df = self.get_s3_df(bucket, pkl)</span><br><span class="line">                data_frames.append(df)</span><br><span class="line">            df_gather = pd.concat(data_frames)</span><br><span class="line">            <span class="keyword">return</span> self.send_excel(df_gather, bucket, send)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.exception(e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_s3_df</span>(<span class="params">self, bucket, key</span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        resp = self.s3.get_object(Bucket=bucket, Key=key)</span><br><span class="line">        body = resp[<span class="string">&quot;Body&quot;</span>].read()</span><br><span class="line">        df = pickle.loads(body)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_excel</span>(<span class="params">self, df: pd.DataFrame, bucket: <span class="built_in">str</span>, send: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">with</span> tempfile.TemporaryFile() <span class="keyword">as</span> fp:</span><br><span class="line">            writer = pd.ExcelWriter(fp, engine=<span class="string">&quot;xlsxwriter&quot;</span>)</span><br><span class="line">            df.to_excel(writer, sheet_name=<span class="string">&quot;Sheet1&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line">            writer.save()</span><br><span class="line">            fp.seek(<span class="number">0</span>)</span><br><span class="line">            self.s3.put_object(</span><br><span class="line">                Body=fp.read(),</span><br><span class="line">                Bucket=bucket,</span><br><span class="line">                Key=send,</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> send</span><br></pre></td></tr></table></figure><p>gather.pyで定義したハンドラを呼ぶlambda.pyを以下に記載します。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> gather <span class="keyword">import</span> GatherHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getenv(<span class="string">&quot;LOCALSTACK_HOSTNAME&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    s3 = boto3.client(<span class="string">&quot;s3&quot;</span>, <span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    endpoint = <span class="string">f&quot;http://<span class="subst">&#123;os.environ[<span class="string">&#x27;LOCALSTACK_HOSTNAME&#x27;</span>]&#125;</span>:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    handler = GatherHandler(event, context, s3)</span><br><span class="line">    <span class="keyword">return</span> handler.main()</span><br></pre></td></tr></table></figure><h1 id="LocalStackへのデプロイ"><a href="#LocalStackへのデプロイ" class="headerlink" title="LocalStackへのデプロイ"></a>LocalStackへのデプロイ</h1><p>それでは作成したそれぞれのLambda関数をLocalStackにデプロイします。<br>デプロイの方法は先程紹介した<a href="https://qiita.com/orangekame3/private/9abed652b26dd4eb1afd">こちらの記事</a>にまとめた方法を採用します。各Lambda関数のディレクトリ内に以下のようなMakefileを作成します。<br>以下はdemo-scatter内のMakefileの例です。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean zip  delete create update</span></span><br><span class="line">PROJECT_DIR=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">DEPLOY_PACKAGES_DIR=deploy-packages</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf ./bin/*</span><br><span class="line"></span><br><span class="line"><span class="section">zip:clean</span></span><br><span class="line">pipenv run mypy</span><br><span class="line">pipenv lock -r &gt;requirements.txt</span><br><span class="line">pipenv run pip install -r requirements.txt --target <span class="variable">$(DEPLOY_PACKAGES_DIR)</span></span><br><span class="line">@echo <span class="string">&quot;Project Location: <span class="variable">$(PROJECT_DIR)</span>&quot;</span></span><br><span class="line">@echo <span class="string">&quot;Library Location: <span class="variable">$(DEPLOY_PACKAGES_DIR)</span>&quot;</span></span><br><span class="line">cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -rf __pycache__ &amp;&amp; zip -r <span class="variable">$(PROJECT_DIR)</span>/bin/lambda.zip *</span><br><span class="line">cd <span class="variable">$(PROJECT_DIR)</span> &amp;&amp; zip -g ./bin/lambda.zip lambda.py scatter.py</span><br><span class="line">find ./bin/lambda.zip</span><br><span class="line">cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -r *</span><br><span class="line"></span><br><span class="line"><span class="section">delete:</span></span><br><span class="line">aws --endpoint-url=http://localhost:4566 \</span><br><span class="line">    --region us-east-1 --profile localstack lambda delete-function \</span><br><span class="line">    --function-name=scatter-lambda</span><br><span class="line"></span><br><span class="line"><span class="section">create:</span></span><br><span class="line">aws lambda create-function \</span><br><span class="line">    --function-name=scatter-lambda \</span><br><span class="line">    --runtime=python3.9 \</span><br><span class="line">    --role=DummyRole \</span><br><span class="line">    --handler=lambda.lambda_handler \</span><br><span class="line">    --zip-file fileb://./bin/lambda.zip \</span><br><span class="line">--region us-east-1 \</span><br><span class="line">    --endpoint-url=http://localhost:4566</span><br><span class="line"></span><br><span class="line"><span class="section">update:</span></span><br><span class="line">aws lambda update-function-code \</span><br><span class="line">    --function-name=scatter-lambda \</span><br><span class="line">    --zip-file fileb://./bin/lambda.zip \</span><br><span class="line">--region us-east-1 \</span><br><span class="line">    --endpoint-url=http://localhost:4566</span><br></pre></td></tr></table></figure><p>上記と同等の内容のMakefileをdemo-segmet及びdemo-gatherにも作成してください。(<code>function-name</code>とzipコマンド部のscatter.pyは適宜変更してください)</p><p>すべての関数内にMakefileを作成したらプロジェクトルートにもMakefileを作成します。<br>プロジェクトルートに作成するMakefileは以下のようにします。</p><figure class="highlight sh"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">.PHONY: zip delete create update invoke <span class="built_in">log</span> download stepfunction <span class="built_in">test</span> json</span><br><span class="line">zip:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile zip --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile zip --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile zip --no-print-directory</span><br><span class="line"></span><br><span class="line">delete:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile delete --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile delete --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile delete --no-print-directory</span><br><span class="line"></span><br><span class="line">create:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile create --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile create --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile create --no-print-directory</span><br><span class="line"></span><br><span class="line">update:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile update --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile update --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile update --no-print-directory</span><br><span class="line"></span><br><span class="line">invoke:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile invoke-local --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile invoke-local --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile invoke-local --no-print-directory</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span>:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile <span class="built_in">log</span> --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-segment &amp;&amp; make -f Makefile <span class="built_in">log</span> --no-print-directory</span><br><span class="line"><span class="built_in">cd</span> demo-gather &amp;&amp; make -f Makefile <span class="built_in">log</span> --no-print-directory</span><br><span class="line"></span><br><span class="line">download:</span><br><span class="line">aws s3 --endpoint-url=http://localhost:4566 \</span><br><span class="line">cp s3://test-bucket/ ./result --exclude <span class="string">&quot;*&quot;</span> \</span><br><span class="line">--include <span class="string">&quot;*.xlsx&quot;</span> --recursive</span><br><span class="line"></span><br><span class="line">bucket:</span><br><span class="line">aws s3 mb s3://test-bucket \</span><br><span class="line">--endpoint-url=http://localhost:4566 \</span><br><span class="line">--profile localstack</span><br><span class="line"></span><br><span class="line">stepfunctions:</span><br><span class="line">aws stepfunctions create-state-machine \</span><br><span class="line">--name Aggregate \</span><br><span class="line">--definition file://state-machine/parallel.json \</span><br><span class="line">--role-arn <span class="string">&quot;arn:aws:iam::000000000000:role/DummyRole&quot;</span> \</span><br><span class="line">--endpoint http://localhost:4566</span><br><span class="line"></span><br><span class="line">aws stepfunctions start-execution \</span><br><span class="line">--state-machine arn:aws:states:us-east-1:000000000000:stateMachine:Aggregate \</span><br><span class="line">--endpoint http://localhost:4566</span><br><span class="line"></span><br><span class="line">aws stepfunctions delete-state-machine \</span><br><span class="line">--state-machine-arn <span class="string">&quot;arn:aws:states:us-east-1:000000000000:stateMachine:Aggregate&quot;</span> \</span><br><span class="line">--endpoint=http://localhost:4566</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line"><span class="built_in">cd</span> demo-scatter &amp;&amp; make -f Makefile <span class="built_in">test</span> --no-print-directory</span><br><span class="line"></span><br><span class="line">json:</span><br><span class="line">python utils/utils.py 1000</span><br></pre></td></tr></table></figure><p>プロジェクトルートに配置するMakefileでは各プロジェクトフォルダで定義されたMakefileを利用しています。<br>それでは、プロジェクトルート直下で以下のコマンドを実行してScatterLambda、SegmentLambda、GatherLambdaのすべてをzipファイル化します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make zip</span><br></pre></td></tr></table></figure><p>zip化が完了していれば各ファルダのbinフォルダにlambda.zipが生成されているはずです。</p><h1 id="Step-Functionsの準備"><a href="#Step-Functionsの準備" class="headerlink" title="Step Functionsの準備"></a>Step Functionsの準備</h1><h2 id="Amazonステートメント言語"><a href="#Amazonステートメント言語" class="headerlink" title="Amazonステートメント言語"></a>Amazonステートメント言語</h2><p>Step Functionsでは各種リソースのオーケストレーション（状態管理）JSON形式のファイルで行います。<br>今回採用したスキャッターギャザーメッセージングパターン（分散して集約するようなパターン）は冒頭に紹介した<a href="/articles/20200515/">記事</a>をほぼそのまま転用させていただきました。<br>ScatterLambdaの<code>event</code>に引数を渡すため一部追加しています。<br>以下、今回使用するステートマシンの定義書であるprallel.jsonです。</p><figure class="highlight json"><figcaption><span>parallel.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;StartAt&quot;</span>: <span class="string">&quot;ScatterLambda&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;States&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ScatterLambda&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;Task&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:lambda:us-east-1:000000000000:function:scatter-lambda&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Parameters&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;input_obj&quot;</span>: <span class="string">&quot;test.json&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;Next&quot;</span>: <span class="string">&quot;ProcessAllSegments&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;ProcessAllSegments&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;Map&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;InputPath&quot;</span>: <span class="string">&quot;$.segment_definitions&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;ItemsPath&quot;</span>: <span class="string">&quot;$&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;MaxConcurrency&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;Iterator&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;StartAt&quot;</span>: <span class="string">&quot;SegmentLambda&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;States&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;SegmentLambda&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;Task&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:lambda:us-east-1:000000000000:function:segment-lambda&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;End&quot;</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;ResultPath&quot;</span>: <span class="string">&quot;$.segment_results&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Next&quot;</span>: <span class="string">&quot;GatherLambda&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;GatherLambda&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;Task&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;InputPath&quot;</span>: <span class="string">&quot;$&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:lambda:us-east-1:000000000000:function:gather-lambda&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;End&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定義書の詳細については<a href="/articles/20200515/">元記事</a>を参考にしてください。ここで注目していただきたいのは<code>InputPath</code>と<code>ResultPath</code>です。ここに宣言した<code>segment_definitions</code>と<code>segment_results</code>というパラメータをキーとして、次のLambdaに渡すデータをフィルタリングしています。</p><p>そのため、ScatterLambdaでの返り値はSegmentLambdaに渡したい配列のキーを<code>segment_definitions</code>とし、Gatherでは<code>segment_results</code>をキーに持つ要素を参照します。返り値はJSONにdumpする必要はなく、辞書型で値を渡します。</p><h2 id="テストデータの準備"><a href="#テストデータの準備" class="headerlink" title="テストデータの準備"></a>テストデータの準備</h2><p>各Lambda関数のデプロイが完了し、ステートマシンの定義も完成しました。あとはStep Functionsの生成と実行をするだけです。<br>ステートマシンをLocalStackに作成する前に今回使用するテストデータを生成します。<br>テストデータはtest-bucket/test.jsonに格納します。<br>以下、テストデータを生成するPythonスクリプトです。utilsフォルダ配下に作成してください。</p><figure class="highlight python"><figcaption><span>utils.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> fire <span class="keyword">import</span> Fire</span><br><span class="line"><span class="keyword">from</span> mimesis <span class="keyword">import</span> Person</span><br><span class="line"><span class="keyword">from</span> mimesis.locales <span class="keyword">import</span> Locale</span><br><span class="line"></span><br><span class="line">person = Person(Locale.JA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dummy_data</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">str</span>(num).zfill(<span class="number">3</span>)</span><br><span class="line">    date = datetime.date(<span class="number">2021</span>, randint(<span class="number">1</span>, <span class="number">12</span>), randint(<span class="number">1</span>, <span class="number">28</span>)).strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">    dummy_dict = &#123;</span><br><span class="line">        <span class="string">&quot;会員番号&quot;</span>: <span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&quot;名前&quot;</span>: person.full_name(reverse=<span class="literal">True</span>),</span><br><span class="line">        <span class="string">&quot;会員ランク&quot;</span>: randint(<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="string">&quot;ポイント&quot;</span>: randint(<span class="number">50</span>, <span class="number">100</span>),</span><br><span class="line">        <span class="string">&quot;タイムスタンプ&quot;</span>: date,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_json</span>(<span class="params">s3, sample_data: <span class="built_in">list</span>, bucket: <span class="built_in">str</span>, send: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;utils/data/sample_data.json&quot;</span>, mode=<span class="string">&quot;wt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(sample_data, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line">    s3.put_object(</span><br><span class="line">        Body=json.dumps(sample_data, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>),</span><br><span class="line">        Bucket=bucket,</span><br><span class="line">        Key=send,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> send</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_dummy_data</span>(<span class="params">k</span>) -&gt; <span class="built_in">list</span>:</span></span><br><span class="line">    sample_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        sample_data.append(dummy_data(i))</span><br><span class="line">    <span class="keyword">return</span> sample_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">iterate_num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    endpoint = <span class="string">f&quot;http://localhost:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">    send = <span class="string">&quot;test.json&quot;</span></span><br><span class="line">    sample_data = make_dummy_data(iterate_num)</span><br><span class="line">    send = send_json(s3, sample_data, bucket, send)</span><br><span class="line">    <span class="keyword">return</span> send</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Fire(main)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>テストデータをLocalStack上のS3バケットに格納します。<br>プロジェクトルートに戻って以下コマンドを実行します。必要なコマンドはすでにMakefileに記載してあります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make buket</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make json</span><br></pre></td></tr></table></figure><p>これでLocalStackのS3バケット上にtest.jsonが作成されました。</p><h1 id="Step-Functionsの実行"><a href="#Step-Functionsの実行" class="headerlink" title="Step Functionsの実行"></a>Step Functionsの実行</h1><p>それではStep Functiionsを実行します。<br>プロジェクトルートで以下のコマンドを実行してください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make stepfunctions</span><br></pre></td></tr></table></figure><p>実行するとLocalStackのログで各Lambdaが処理を開始しているのを確認できます。<br>ターミナルの右反面でステートマシンの作成、実行、消去を行っています。<br>ターミナルの左半面はLocalStackで書き出されるログです。<br>よく見るとScatterLambdaで後続のSegmentLambdaに渡した<code>segment_definitions</code>や、<code>segment_results</code>なども出力されていることがわかります。<br>ログを確認したい方はコンテナ起動時に<code>-d</code>オプションを付けずに起動してください。<br>また<code>dockcer-compose.yml</code>の<code>DEBUG</code>オプションを<code>1</code>とすることで画像のようにタスク定義なども確認できます。</p><img src="/images/20220204a/stepfunctions.gif" alt="stepfunctions" width="1200" height="629" loading="lazy"><p>demo-gatherによってアップロードされたエクセルファイルをローカルにダウンロードしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make download</span><br></pre></td></tr></table></figure><p>downloadに成功していればプロジェクトプロジェクトルート直下にresultフォルダが生成されtest.xlsxが生成されていると思います。</p><img src="/images/20220204a/image_2.png" alt="image.png" width="1200" height="676" loading="lazy"><p>想定通りの出力が得られましたね🎉<br>今回はデモなので処理もステップ数も大したことはありません。<br>より大規模な処理が必要となるときStep Functionsでうまく分散することでLambdaで超えられない壁を突破することができるようになります。</p><p>それでは、今回はここまでとしたいと思います。</p><p>今回作成したスクリプトはこちらに格納してます。</p><p><a href="https://github.com/orangekame3/stepfunctions-demo">https://github.com/orangekame3/stepfunctions-demo</a></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>いかがでしたでしょうか、Step Functionsでは性質上、複数のリソースを連動させて処理を行います。デバッグの都度リソースをデプロイをするのはかなりの労力を伴うのでローカル環境で動作確認を行えるのはとても良いですね。</p><p>今回はLambdaの並列実行でしたが、様々な用途に応用が期待できそうです。<br>長くなりましたが、最後まで読んでいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220204a/eyecatch_stepfunctions.png&quot; alt=&quot;&quot; width=&quot;1003&quot; height=&quot;498&quot; loading=&quot;lazy&quot;&gt;



&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="LocalStack" scheme="https://future-architect.github.io/tags/LocalStack/"/>
    
    <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
    <category term="StepFunctions" scheme="https://future-architect.github.io/tags/StepFunctions/"/>
    
    <category term="Pipenv" scheme="https://future-architect.github.io/tags/Pipenv/"/>
    
  </entry>
  
  <entry>
    <title>Goのnet/httpパッケージに出てくるTemporary()がなにか調べた</title>
    <link href="https://future-architect.github.io/articles/20220203a/"/>
    <id>https://future-architect.github.io/articles/20220203a/</id>
    <published>2022-02-02T15:00:00.000Z</published>
    <updated>2022-02-03T01:25:06.155Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220203a/top.png" alt="" width="500" height="208" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。net/httpパッケージには非常にお世話になっています。Goの net/httpの内部にはサーバー/クライアントの両方が含まれていますが、今回はクライアントサイドの話です。</p><p><a href="https://future-architect.github.io/articles/20211026a/">TCPレベルの接続エラーの調査</a>のために標準パッケージやサードパーティのライブラリのコードを読み込んでいくと、Temporary() 関数だけをもった temporary インターフェースが登場します。HTTP周りでtemporaryと聞くと、 307 Temporary Redirect のステータスコードのことかと思いますが、ちょっと違いそうです。どういったものでどういった場合に出てくるのか、調べました。</p><h2 id="Temporary-とは"><a href="#Temporary-とは" class="headerlink" title="Temporary()とは"></a>Temporary()とは</h2><p>Temporary()はnet/http パッケージなどのコードを見ていると出てくる関数です。プライベートなインターフェースがあちこちのパッケージや呼び出し元のライブラリでつくられています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> temporary <span class="keyword">interface</span> &#123;</span><br><span class="line">Temporary() <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例えば次のhttpErrorはtemporaryインターフェースを満たし、常にtrueを返すように実装されています。</p><figure class="highlight go"><figcaption><span>transport.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> httpError <span class="keyword">struct</span> &#123;</span><br><span class="line">err     <span class="keyword">string</span></span><br><span class="line">timeout <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *httpError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span>   &#123; <span class="keyword">return</span> e.err &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *httpError)</span> <span class="title">Timeout</span><span class="params">()</span> <span class="title">bool</span></span>   &#123; <span class="keyword">return</span> e.timeout &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *httpError)</span> <span class="title">Temporary</span><span class="params">()</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;  <span class="comment">//  常に true を返しているが..？</span></span><br></pre></td></tr></table></figure><p>netパッケージのOpErrorもtemporaryインターフェースを満たし、Temporary()関数にはロジックが結構が入っています。</p><figure class="highlight go"><figcaption><span>net.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *OpError)</span> <span class="title">Temporary</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// Treat ECONNRESET and ECONNABORTED as temporary errors when</span></span><br><span class="line"><span class="comment">// they come from calling accept. See issue 6163.</span></span><br><span class="line"><span class="keyword">if</span> e.Op == <span class="string">&quot;accept&quot;</span> &amp;&amp; isConnError(e.Err) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ne, ok := e.Err.(*os.SyscallError); ok &#123;</span><br><span class="line">t, ok := ne.Err.(temporary)</span><br><span class="line"><span class="keyword">return</span> ok &amp;&amp; t.Temporary()</span><br><span class="line">&#125;</span><br><span class="line">t, ok := e.Err.(temporary)</span><br><span class="line"><span class="keyword">return</span> ok &amp;&amp; t.Temporary()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AWS SDK for GoにもorigiErrがtemporaryインターフェース(Temporary() boolの関数)を満たしていて、かつTemporary()の結果がtrueの場合はリトライする、みたいな実装がよくあります。</p><figure class="highlight go"><figcaption><span>retryer.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AWS SDK for Goのretyer.goの例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shouldRetryError</span><span class="params">(origErr error)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> err := origErr.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"><span class="keyword">case</span> temporary:</span><br><span class="line"><span class="keyword">if</span> netErr, ok := err.(*net.OpError); ok &amp;&amp; netErr.Op == <span class="string">&quot;dial&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If the error is temporary, we want to allow continuation of the</span></span><br><span class="line"><span class="comment">// retry process</span></span><br><span class="line"><span class="keyword">return</span> err.Temporary() || isErrConnectionReset(origErr) <span class="comment">// Temporary()がtrueの場合はリトライするのはなぜ？</span></span><br></pre></td></tr></table></figure><p>どういったルールでtrue/falseになって、どのように使われるべきなんでしょうか。</p><h2 id="Temporary-の使い方"><a href="#Temporary-の使い方" class="headerlink" title="Temporary() の使い方"></a>Temporary() の使い方</h2><p>go.devの<a href="https://go.dev/blog/error-handling-and-go">Error handling and Go</a> にドンピシャな説明が書いてありました（本来はエラーハンドリングの説明ですが）。</p><figure class="highlight go"><figcaption><span>net.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Error <span class="keyword">interface</span> &#123;</span><br><span class="line">    error</span><br><span class="line">    Timeout() <span class="keyword">bool</span>   <span class="comment">// Is the error a timeout?</span></span><br><span class="line">    Temporary() <span class="keyword">bool</span> <span class="comment">// Is the error temporary?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このerrorは、Temporary()を呼ぶことで、一時的なネットワークエラーと永続的なネットワークエラーを区別するために用意されたようです。例えばWebクローラーは、一時的なエラーが発生したときにスリープして再試行し、それ以外の場合はあきらめるといった使い方に利用できるとのこと。サンプルコードも付いていました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> nerr, ok := err.(net.Error); ok &amp;&amp; nerr.Temporary() &#123;</span><br><span class="line">    time.Sleep(<span class="number">1e9</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ということで、Temporary() は日本語訳そのままで、一時的なエラー（リトライすると成功するかも）かどうかを区別するために用意されたものでした。例えばURLが無効であるとかクライアントサイドの指定の問題は、何回繰り返しても成功することは無いのでTemporary() はfalseを返すべきだということです。</p><p>例を探すとIPアドレスのパースに失敗したときに呼ばれるnetパッケージのParseErrorはTemporary()を常にfalseを返していました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A ParseError is the error type of literal network address parsers.</span></span><br><span class="line"><span class="keyword">type</span> ParseError <span class="keyword">struct</span> &#123;</span><br><span class="line">Type <span class="keyword">string</span></span><br><span class="line">Text <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ParseError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">&quot;invalid &quot;</span> + e.Type + <span class="string">&quot;: &quot;</span> + e.Text &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ParseError)</span> <span class="title">Timeout</span><span class="params">()</span> <span class="title">bool</span></span>   &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ParseError)</span> <span class="title">Temporary</span><span class="params">()</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;  <span class="comment">// IPアドレスのパース失敗時は同じ値を何度繰り返しても成功することは無いので、毎回false</span></span><br></pre></td></tr></table></figure><p>最初に説明したhttpErrorはクライアント側で指定した時間に対してタイムアウトしたときに利用されていたため、再試行で成功する可能性があるためtrueが返されるのだと思います。OpErrorはシステムコール側の処理でのエラーハンドリング結果に移譲していますが、ECONNRESET(connection reset by peer)やアボートされたときはリトライの余地がありと判定しtrueを返しています。</p><h2 id="もはや非推奨である"><a href="#もはや非推奨である" class="headerlink" title="もはや非推奨である"></a>もはや非推奨である</h2><p>ここまでTemporary()について説明してきましたが、netパッケージのErrorでは（おそらく）Go 1.18からのように書かれます。Deprecated（非推奨）になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An Error represents a network error.</span></span><br><span class="line"><span class="keyword">type</span> Error <span class="keyword">interface</span> &#123;</span><br><span class="line">error</span><br><span class="line">Timeout() <span class="keyword">bool</span> <span class="comment">// Is the error a timeout?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Deprecated: Temporary errors are not well-defined.</span></span><br><span class="line"><span class="comment">// Most &quot;temporary&quot; errors are timeouts, and the few exceptions are surprising.</span></span><br><span class="line"><span class="comment">// Do not use this method.</span></span><br><span class="line">Temporary() <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/issues/32463">net: deprecate Temporary error status #45729</a>に理由が書かれています。 Timeout()はわかりやすいけど、Temporary()は何が一時的で何が永続的なのかの区別が明確じゃなく、本来別の表現で区別されるものもTemporary()として扱われてしまっているのでは無いかということ。Timeout()で区別がつけるものはそちらを使いましょうということかと思います。（これだとECONNRESET, ECONNABORTEDが表現できない気がしますが…）</p><p>ちなみに、<a href="https://github.com/golang/go/issues/32463">os: remove ErrTemporary in Go 1.13 #32463</a> にあるように、 <code>os.ErrTemporary</code> は削除されたようです。</p><h2 id="Temporary-の判定方法"><a href="#Temporary-の判定方法" class="headerlink" title="Temporary()の判定方法"></a>Temporary()の判定方法</h2><p>Temporary()の判定にはType Switchしたり、次のようなerrors.As()を使って判定することが多かったかと思います。</p><figure class="highlight go"><figcaption><span>繰り返されるボイラーコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> temporary <span class="keyword">interface</span> &#123; Temporary() <span class="keyword">bool</span> &#125;</span><br><span class="line"><span class="keyword">var</span> terr temporary</span><br><span class="line"><span class="keyword">if</span> errors.As(err, &amp;terr) &amp;&amp; terr.Temporary() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この辺は標準パッケージ側でヘルパー関数を作ったら？という提案が<a href="https://github.com/golang/go/issues/37250">proposal: errors: add new function Temporary(error) bool</a>出ています。期待ですねと言いたいところですが、Temporary() の立ち位置自体が先程説明したようにちょっと微妙であるため、その結果次第ですがおそらく追加されることは無さそうです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>Temporary()は一時的なエラーであるかどうかを示し、リトライで成功する可能性がある場合にtrueを返す</li><li>例えば、タイムアウトやTCP通信でコネクションリセットなどを返されたときにtrueになる</li><li>とは言え、Temporary()の使い分けのハッキリとした定義が難しく、位置づけがTimeout()と被ることもあり非推奨の方向で進んでいる</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220203a/top.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;208&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Go1.18" scheme="https://future-architect.github.io/tags/Go1-18/"/>
    
    <category term="ソースコードリーディング" scheme="https://future-architect.github.io/tags/%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
</feed>
