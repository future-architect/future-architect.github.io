<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-11-04T05:10:57.339Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人工知能と神経科学</title>
    <link href="https://future-architect.github.io/articles/20201104/"/>
    <id>https://future-architect.github.io/articles/20201104/</id>
    <published>2020-11-03T15:00:00.000Z</published>
    <updated>2020-11-04T05:10:57.339Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201104/brain-2029391_1280.png" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/openclipart-vectors-30363/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2029391" target="_blank" rel="noopener">OpenClipart-Vectors</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2029391" target="_blank" rel="noopener">Pixabay</a>からの画像</p><p>2020年4月新卒入社、フューチャーアーキテクトの戸田です。</p><p>この記事は<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間連載</a>の第5弾です。他の秋のブログ週間連載と毛色が多少異なりますが、楽しんで貰えると幸いです。</p><p>秋の夜長に合う読み物、ということだったので、最近では身近になった「人工知能」とその隣人である「神経科学」について書こうと思います。私事ですが、筆者の学生時代の専門が「神経科学」であり、情報系ではなく生物系出身や色々な人がフューチャーに在籍しているよ、と伝えたく筆を取りました。</p><h2 id="1-神経科学（Neuroscience）とは"><a href="#1-神経科学（Neuroscience）とは" class="headerlink" title="1. 神経科学（Neuroscience）とは"></a>1. 神経科学（Neuroscience）とは</h2><p>名前の通り、生き物の体に張り巡らされる「神経（Neuro）」について研究を行う自然「科学（Sciense）」の一分野です。非常に簡単に言うと、生き物が感じ・考え・動くことを調べる分野のことを指します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">どのようにして私たちはものを見たり，聞いたりするのだろうか。</span><br><span class="line">快く感じることもあれば苦痛に感じることもあるのはなぜだろうか。</span><br><span class="line">どのようにして私たちは体を動かすのだろうか。 </span><br><span class="line">また， どのようにして私たちは推論し，学習し記憶し，そして忘れるのだろうか。</span><br><span class="line">怒りや狂気の本質は何だろうか。 このようなことに興味を抱くのは人間として自然である。 </span><br><span class="line">これらの謎を基礎的な神経科学の見地から解明する研究が始まっている。</span><br><span class="line">そして，これらの研究の成果が本書の主題である。</span><br></pre></td></tr></table></figure><p>（M.F.ベアー. ベアー・コノーズ・パラディーソ 神経科学：脳の探求 カラー版 より <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>）  </p><p>しかし、そんな生き物に関わる研究が、どのようにして情報系の分野である「人工知能」に影響を及ぼしたのか、同時に影響を及ぼされたのかを簡単にですが説明していこうと思います。</p><h2 id="2-「人工知能」と「神経科学」の歴史"><a href="#2-「人工知能」と「神経科学」の歴史" class="headerlink" title="2.「人工知能」と「神経科学」の歴史"></a>2.「人工知能」と「神経科学」の歴史</h2><p>AIという言葉が使われ、その歴史が始まったのは1956年のダートマス会議<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>のことですが、そこからすべての「人工知能（Artificial intelligence; AI）」の歴史についてここに記す事はできないため、「神経科学」とそれに関わりの深い「深層学習」に絞って話をしていきます。</p><h3 id="2-0-「深層学習」が脚光を浴びてから"><a href="#2-0-「深層学習」が脚光を浴びてから" class="headerlink" title="2.0. 「深層学習」が脚光を浴びてから"></a>2.0. 「深層学習」が脚光を浴びてから</h3><p>ご存じの方も多いでしょうが、「深層学習」は2012年のNIPS会議においてヒントンら<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>が画像解析での圧倒的な性能を示して以来、画像認識を始めとして、言語処理、音声認識など様々な分野において活躍を残しています<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。</p><p>その「深層学習」において用いられる、「ニューラルネットワーク（Neural Network; NN）」は、日本語に無理やり直せば「神経回路網」となります。名前の通り、現在活躍する人工知能に関する手法の起源は神経科学にあります<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。</p><p>それでは、「深層学習」と「神経科学」の歴史を辿っていきましょう。</p><h3 id="2-1-「形式ニューロン」と「全か無かの法則」"><a href="#2-1-「形式ニューロン」と「全か無かの法則」" class="headerlink" title="2.1. 「形式ニューロン」と「全か無かの法則」"></a>2.1. 「形式ニューロン」と「全か無かの法則」</h3><p>一番初めのNNモデルは1943年に、ピッツとマッカロック<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>が発表した「形式ニューロン」と呼ばれるものです。これは、神経科学において発見された「全か無かの法則」を数理的に表現したものでした。</p><p>「全か無かの法則」は、神経細胞（Neuron）の活動に関する法則で、神経細胞に一定上の入力がある場合には活動し、一定以下の入力には活動しないという法則です。つまり、「形式ニューロン」も入力値が一定を超えた場合に”1”を、超えなかった場合に”0”を出します(出力する値は定義次第ですが、今回はTrueとFalseを意識して1,0としました)。この「形式ニューロン」でどんな事ができるかというと、例えば、論理演算のANDを表現することが可能です。</p><h3 id="2-2-教師なし学習としての「ヘッブ則」"><a href="#2-2-教師なし学習としての「ヘッブ則」" class="headerlink" title="2.2.教師なし学習としての「ヘッブ則」"></a>2.2.教師なし学習としての「ヘッブ則」</h3><p>1949年にはヘッブが神経細胞間の関係について仮設を唱えました<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>。俗に「ヘッブ則」と呼ばれる法則です。「ヘッブ則」は、神経科学にも大きな影響を与えましたが、人工知能の分野にも大きな影響を与えました。</p><p>ヘッブは、その法則を以下のように表現しています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">「細胞Aの軸索が細胞Bを発火させるのに十分近くにあり、</span><br><span class="line">繰り返しあるいは絶え間なくその発火に参加するとき、</span><br><span class="line">いくつかの成長過程あるいは代謝変化が一方あるいは両方の細胞に起こり、</span><br><span class="line">細胞Bを発火させる細胞の1つとして細胞Aの効率が増加する。」</span><br></pre></td></tr></table></figure><p>（高橋 直矢, 池谷裕二, 松木則夫. ヘブ則. 脳科学辞典 より<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>)</p><p>ここで、<code>発火</code>は神経細胞、すなわちニューロンの活動のことを指し、<code>細胞Aの軸索が細胞Bを発火させるのに十分近くにあり</code>というのは細胞Aと細胞Bとの活動に関連があること、すなわち、ニューロン間に入力の関係があることを指します。</p><p>要約すれば、<code>ニューロンAの活動がニューロンBの活動を引き起こすと、ニューロンAの活動がニューロンBを活動させやすくなる</code>となります。これはつまり、教師となる外部の信号なしに、ニューロン同士の関係を変化させる、教師なし学習に関する最初のアイデア<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>でした。</p><h3 id="2-3-「形式ニューロン」をつなげた「パーセプトロン」"><a href="#2-3-「形式ニューロン」をつなげた「パーセプトロン」" class="headerlink" title="2.3. 「形式ニューロン」をつなげた「パーセプトロン」"></a>2.3. 「形式ニューロン」をつなげた「パーセプトロン」</h3><p>1958年にはローゼンブラッドがNNモデルである「パーセプトロン」を発表しました<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>。節名の通り、「パーセプトロン」は「形式ニューロン」を複数つなげたものであり、一つの「形式ニューロン」で論理演算が可能であるのならば、複数個「形式ニューロン」をつなげればより複雑な入出力の関係を表現できるだろう、というアイデアでした。このときローゼンブラッドがパーセプトロンの学習則として使った方法が、前に説明したヘッブ則でした。</p><p>本筋とは関係ありませんが、この「パーセプトロン」では線形分離が出来ない問題が解けないということで下火になっていきました<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>。</p><p>実はさらに「形式ニューロン」をつなげる、つまり、層を増やせば線形分離が出来ない問題も解くことができることはわかっていましたが、ヘッブ則では層を増やした「パーセプトロン」を学習させることが出来ないことが問題でした。</p><h3 id="2-4-バックプロパゲーションの開発とその後の深層学習"><a href="#2-4-バックプロパゲーションの開発とその後の深層学習" class="headerlink" title="2.4.バックプロパゲーションの開発とその後の深層学習"></a>2.4.バックプロパゲーションの開発とその後の深層学習</h3><p>1986年に、前節で話した多層のパーセプトロンを学習させられない、という問題を解決できる「バックプロパゲーション」をランメルハルトらが発表しました<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>。彼らは、並列分散処理モデルの研究していた神経科学と認知科学者のグループでした<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup>。さらに、その後ランメルハルトとともに「バックプロパゲーション」を発表した、ヒントンが研究を続け、2012年のNIPS会議へとつながっていきます。</p><p>並列分散処理モデルは、コネクショニズムとも呼ばれ、神経細胞群を抽象化された処理の単位（ユニット）とし、それのネットワークを用いて認知メカニズムを理解しようとするアプローチであり、現在のNNモデルと共通点も多くあります<sup id="fnref:13"><a href="#fn:13" rel="footnote">13</a></sup>。</p><p>並列分散処理モデルと神経科学は、人工知能の研究に色々なアイデアを提供しました<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。現在の機械翻訳における、単語や文を分解して（ベクトルとして）表現できるという概念<sup id="fnref:14"><a href="#fn:14" rel="footnote">14</a></sup>や、視覚情報を処理する脳領域に関する実験<sup id="fnref:15"><a href="#fn:15" rel="footnote">15</a></sup>から発想を得た、畳み込みニューラルネットワークに見られる非線形変換・分割正規化・最大プーリング<sup id="fnref:16"><a href="#fn:16" rel="footnote">16</a></sup>などが例として挙げられます。</p><p>また、トレーニングデータに過剰に適合してしまう、過学習を防ぐために行われる正則化であるドロップアウトの開発も、ポワソン分布で活動する神経細胞の存在に動機づけられました<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>,<sup id="fnref:17"><a href="#fn:17" rel="footnote">17</a></sup>。さらに、強化学習も動物心理学における動物実験の研究に触発されています<sup id="fnref:18"><a href="#fn:18" rel="footnote">18</a></sup>。</p><p>一方で、強化学習の手法であるTD学習（Temporal difference learning）から得られた結果と生物の脳から計測された神経の活動はよく似ており、生物の脳がTD学習と類似した方法を用いていることが示唆されています<sup id="fnref:19"><a href="#fn:19" rel="footnote">19</a></sup>,<sup id="fnref:20"><a href="#fn:20" rel="footnote">20</a></sup>。</p><p>深層学習による、神経科学への影響はアルゴリズムに限りません。近年では、神経科学において処理するデータ量が飛躍的に増加しており解析手法として深層学習が用いられることも多いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>「神経科学」とは、脳などの神経について研究を行う分野のことである。</li><li>「人工知能」と関係する「神経科学」という分野がある。</li><li>歴史的に「人工知能」と「神経科学」は影響を与えあってきた。</li></ul><p>過去から現在まで、簡単かつ駆け足ではありますが「人工知能」と「神経科学」の関係を書きました。</p><p>込み入った話を含めれば、さらに色々書くことはありますが、「神経科学」の知識がないと理解が難しいため比較的理解しやすいものを書いてみました。また機会があれば、現在の話やこれからの話についても書けたらいいなと考えています。</p><p>本記事は、ハサビスらの論文<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>とシュミットフーバーの論文<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>を中軸として書いたので気になる方は、原著も読んでみてください。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">加藤宏司, et al. &quot;ベアー コノーズ パラディーソ神経科学: 脳の探求: カラー版.&quot; (2007).</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">McCarthy, John, et al. &quot;A proposal for the dartmouth summer research project on artificial intelligence, august 31, 1955.&quot; AI magazine 27.4 (2006): 12-12.</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">Krizhevsky, Alex, Ilya Sutskever, and Geoffrey E. Hinton. &quot;ImageNet classification with deep convolutional neural networks.&quot; NIPS'12: Proceedings of the 25th International Conference on Neural Information Processing Systems(2012): 1097–1105.</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">Schmidhuber, Jürgen. &quot;Deep learning in neural networks: An overview.&quot; Neural networks 61 (2015): 85-117.</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">Hassabis, Demis, et al. &quot;Neuroscience-inspired artificial intelligence.&quot; Neuron 95.2 (2017): 245-258.</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">McCulloch, Warren S., and Walter Pitts. &quot;A logical calculus of the ideas immanent in nervous activity.&quot; The bulletin of mathematical biophysics 5.4 (1943): 115-133.</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;">Hebb, Donald Olding. &quot;The organization of behavior: a neuropsychological theory.&quot; J. Wiley; Chapman &amp; Hall, 1949.</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;">高橋 直矢, 池谷裕二, 松木則夫. &quot;ヘブ則&quot;. 脳科学辞典(2012), アクセス日 2020/11/04, https://bsd.neuroinf.jp/wiki/%E3%83%98%E3%83%96%E5%89%87</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">Rosenblatt, Frank. &quot;The perceptron: a probabilistic model for information storage and organization in the brain.&quot; Psychological review 65.6 (1958): 386.</span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">10.</span><span style="display: inline-block; vertical-align: top;">Minsky, Marvin L., and Seymour A. Papert. &quot;Perceptrons: expanded edition.&quot; (1988).</span><a href="#fnref:10" rev="footnote"> ↩</a></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">11.</span><span style="display: inline-block; vertical-align: top;">Rumelhart, David E., Geoffrey E. Hinton, and Ronald J. Williams. &quot;Learning representations by back-propagating errors.&quot; nature 323.6088 (1986): 533-536.</span><a href="#fnref:11" rev="footnote"> ↩</a></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">12.</span><span style="display: inline-block; vertical-align: top;">Rumelhart, David E., Geoffrey E. Hinton, and Ronald J. Williams. Learning internal representations by error propagation. No. ICS-8506. California Univ San Diego La Jolla Inst for Cognitive Science, 1985.</span><a href="#fnref:12" rev="footnote"> ↩</a></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">13.</span><span style="display: inline-block; vertical-align: top;">都築誉史. &quot;コネクショニズム.&quot; 認知科学 8.3 (2001): 225-237.</span><a href="#fnref:13" rev="footnote"> ↩</a></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">14.</span><span style="display: inline-block; vertical-align: top;">John, Mark F. St, and James L. McClelland. &quot;Learning and applying contextual constraints in sentence comprehension.&quot; Artificial intelligence 46.1-2 (1990): 217-257.</span><a href="#fnref:14" rev="footnote"> ↩</a></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">15.</span><span style="display: inline-block; vertical-align: top;">Hubel, David H., and Torsten N. Wiesel. &quot;Receptive fields of single neurones in the cat's striate cortex.&quot; The Journal of physiology 148.3 (1959): 574.</span><a href="#fnref:15" rev="footnote"> ↩</a></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">16.</span><span style="display: inline-block; vertical-align: top;">Yamins, Daniel LK, and James J. DiCarlo. &quot;Using goal-driven deep learning models to understand sensory cortex.&quot; Nature neuroscience 19.3 (2016): 356-365.</span><a href="#fnref:16" rev="footnote"> ↩</a></li><li id="fn:17"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">17.</span><span style="display: inline-block; vertical-align: top;">Hinton, Geoffrey E., et al. &quot;Improving neural networks by preventing co-adaptation of feature detectors.&quot; arXiv preprint arXiv:1207.0580 (2012).</span><a href="#fnref:17" rev="footnote"> ↩</a></li><li id="fn:18"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">18.</span><span style="display: inline-block; vertical-align: top;">Sutton, Richard S., and Andrew G. Barto. Reinforcement learning: An introduction. MIT press, 2018.</span><a href="#fnref:18" rev="footnote"> ↩</a></li><li id="fn:19"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">19.</span><span style="display: inline-block; vertical-align: top;">O'Doherty, John P., et al. &quot;Temporal difference models and reward-related learning in the human brain.&quot; Neuron 38.2 (2003): 329-337.</span><a href="#fnref:19" rev="footnote"> ↩</a></li><li id="fn:20"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">20.</span><span style="display: inline-block; vertical-align: top;">Schultz, Wolfram, Peter Dayan, and P. Read Montague. &quot;A neural substrate of prediction and reward.&quot; Science 275.5306 (1997): 1593-1599.</span><a href="#fnref:20" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201104/brain-2029391_1280.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/openclipart-vectors-30
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="人工知能" scheme="https://future-architect.github.io/tags/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD/"/>
    
      <category term="神経科学" scheme="https://future-architect.github.io/tags/%E7%A5%9E%E7%B5%8C%E7%A7%91%E5%AD%A6/"/>
    
      <category term="深層学習" scheme="https://future-architect.github.io/tags/%E6%B7%B1%E5%B1%A4%E5%AD%A6%E7%BF%92/"/>
    
      <category term="強化学習" scheme="https://future-architect.github.io/tags/%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title>フューチャーでjobsバイト、競プロ入社を経験して</title>
    <link href="https://future-architect.github.io/articles/20201102/"/>
    <id>https://future-architect.github.io/articles/20201102/</id>
    <published>2020-11-01T15:00:00.000Z</published>
    <updated>2020-11-02T03:45:57.851Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201102/thumbnail.png" class="img-small-size"><p>SAIGの金子です。</p><p>この記事は<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間</a>連載の第5弾です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><h2 id="想定読者"><a href="#想定読者" class="headerlink" title="想定読者"></a>想定読者</h2><ul><li><a href="https://atcoder.jp/contests/future-contest-2021-qual" target="_blank" rel="noopener">HACK TO THE FUTURE</a>等でフューチャーに興味を持った競プロerの方</li><li>純粋培養競技プログラマが就職するとどうなるのかが気になる方。</li></ul><h2 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h2><p>2020年4月に入社した金子と申します。大学は薬学部出身で、入社までは競技プログラミングやデータ分析コンペを通じてプログラミングを勉強していた純粋培養型？の競技プログラマです。普段競技プログラミングはアルゴ、データ分析の他にマラソンやゲームAIのコンペにも参加しています。</p><h2 id="フューチャー・SAIGについて"><a href="#フューチャー・SAIGについて" class="headerlink" title="フューチャー・SAIGについて"></a>フューチャー・SAIGについて</h2><p>フューチャーはITによる問題解決を行う独立系のITコンサルティングファームです。ITコンサルティングファームは経営戦略に基づくIT戦略の立案から、実際のシステムの企画やITインフラの構築までを行っており、特にフューチャーはベンダーのグループ会社に属さない中立の立場からコンサルティングを行っています。</p><p><a href="https://youtu.be/13QKht4SJcM" target="_blank" rel="noopener">フューチャーについての説明動画</a></p><p>フューチャーではプロジェクト毎にチームを作り業務を行っていますが、SAIGは複数のプロジェクトに渡って横断的にAIに取り組む人材を集めています。入社前に私はここでアルバイトをしていて、現在も<a href="https://jobs.atcoder.jp/offers/11" target="_blank" rel="noopener">AtCoderJobs</a>を通じて応募してくださったたくさんの競技プログラマが社員やアルバイトとして活躍しています。</p><h1 id="この記事の概要"><a href="#この記事の概要" class="headerlink" title="この記事の概要"></a>この記事の概要</h1><p>この記事ではまず私のフューチャーでの体験記を書き、次にフューチャーに興味のある方が気になりそうな項目について項目ごとにまとめていきます。</p><h1 id="アルバイト時代について"><a href="#アルバイト時代について" class="headerlink" title="アルバイト時代について"></a>アルバイト時代について</h1><p>入社前の約半年の間、私は内定者アルバイトを行っていました。</p><p>アルバイトの業務は私の競プロ特性に合わせて即戦力として働けるような業務が用意されていて、私は組み合わせ最適化でスケジューリングを行うエンジンの開発やデータ分析にとりくんでいました。</p><p>また競プロを業務に活かすだけでなく、業務で上長や他のアルバイトの書いた最適化のコードから技術を吸収することで競技プログラミングにおいても強くなることができました。</p><p>総じて、アルバイトは技術を磨いて活かすのにいい舞台だったと感じています。技術のサポート以外にもアルバイトでは月1で上長との1on1面談があり、就活や進路について相談もできるので、フューチャーの技術に興味のある学生は<a href="https://jobs.atcoder.jp/offers/11" target="_blank" rel="noopener">AtCoderJobsのページ</a>等を通じてカジュアルに相談を行ってみるといいと思います。</p><h1 id="入社・研修を経て"><a href="#入社・研修を経て" class="headerlink" title="入社・研修を経て"></a>入社・研修を経て</h1><p>Jobsバイトの時は競プロer向けに用意されたタスクを競プロerの社員やJobsバイトの仲間に囲まれて仕事をしていましたが、入社して競プロer以外との同期と接し、コンサルティング業務に関わる研修を受けるようになりました。</p><p>2020年に入社した100名超の社員の内プログラミング選考合格者は約3割で、その中には競プロ経験者が一定数いました。とはいえ大多数が非競プロerであり、かつフューチャーは(私から見て)体育会系の社員が多くいるので馴染めるかどうかが心配でした。</p><p>もし、競プロerの新人が私一人だったら趣味がよくわからないなんかヤベーやつで終わっていたかもしれません。</p><p>しかし、競プロerが複数同時期に入社したことで新人の間で「競技プログラミングとやらをきっかけに入社した集団がいるらしい」という事が広まっていきました。他の同期の競プロerの社会性は高く、研修内容について新人同士で教えあい、交流会を定期的に開催しているうちに新人内の競プロ認知率は100%になりました。今も入社してから競プロを始めたメンバーを含むチームで定期的にバチャコンを開催しています。</p><p><a href="https://note.future.co.jp/n/nda51c959f75a" target="_blank" rel="noopener">バチャコン</a><a href="https://note.future.co.jp/n/nda51c959f75a" target="_blank" rel="noopener">関連記事</a></p><h1 id="フューチャーの雰囲気について"><a href="#フューチャーの雰囲気について" class="headerlink" title="フューチャーの雰囲気について"></a>フューチャーの雰囲気について</h1><p>フューチャーの雰囲気については、プロジェクトごとに個性も変わって一概には言えないのですが、社全体としてイベント好きな空気を強く感じています。他人の好きなことを知りたい、自身の熱意を注いでいるものを伝えたいという社員が多く、この技術ブログの連載企画や競プロバチャ以外にも社内ではLT大会や勉強会等が頻繁に開催されています。</p><p>また、社内では年に一度<a href="https://note.future.co.jp/n/n7b0e5de1b2bc" target="_blank" rel="noopener">BPY(Best Project of the Year)</a>というイベントがあり、そこで自身の所属するプロジェクト以外が一年間なにをしてきていたかを知ることができます。</p><p>BPYは全社イベントですが、その他は任意イベントのため興味のあるイベントについてつまみ食いできるのが個人的にも好きなポイントです。</p><h1 id="技術以外で競プロが業務の役に立つことについて"><a href="#技術以外で競プロが業務の役に立つことについて" class="headerlink" title="技術以外で競プロが業務の役に立つことについて"></a>技術以外で競プロが業務の役に立つことについて</h1><p>フューチャーに入社してから仕事をするにあたって、気を付けるようになったことがあります。</p><p>AI案件についても初めから成果物の最終形が決まっている訳ではなく、顧客の要望から共に創り上げていくことが多いです。そのため、プロジェクトが始まった時はまず関連する書籍があれば読む、アプリ等があれば使う、店舗があれば実際に行くことを通してドメイン知識をひたすら集め、顧客やユーザーの視点を解像度高く持つことに気を付けるようになりました。</p><p>この作業は入社したての頃は苦手で、調査の仕方が分からず右往左往していました。ただ、この作業はデータ分析コンペでドメイン知識から予測対象のふるまいをモデル化する部分に通じるものがあり、アルゴリズムやテクニック以外で競プロの経験が活きる部分だと気づきました。業務と競プロは異なる部分が大きいのですが、楽しめる部分・活かせる要素は幅広くあると感じています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>フューチャーで働き始めて約1年、社内に競プロが浸透しているおかげもあり楽しく業務に取り組めています。競プロで学んだ手法やスキルは業務に活用できる部分があり、かつ業務で学んだこと・興味を持ったことも競プロに活かせて良い循環を感じています。</p><p>一方でITコンサルティングには幅広いスキルが必要で、まだまだ自身の力不足勉強不足を日々痛感しています。社内には様々なスキルを持つ人がいるため、周囲のスキルを吸収しつつ社会にアルゴリズムで大きなインパクトを与えられるよう精進していけたらと思います。</p><p>ここまで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201102/thumbnail.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;p&gt;SAIGの金子です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a href=&quot;https://future-architect.github.io/art
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="アルバイト" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%AB%E3%83%90%E3%82%A4%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>フューチャーにアルバイトで参画して一年半が経ったので一度振りかえる。</title>
    <link href="https://future-architect.github.io/articles/20201030/"/>
    <id>https://future-architect.github.io/articles/20201030/</id>
    <published>2020-10-29T15:00:00.000Z</published>
    <updated>2020-11-02T03:42:02.338Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201030/pixel-cells-3976295_1280.png" class="img-middle-size "><p><a href="https://pixabay.com/ja/users/manfredsteger-1848497/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3976295" target="_blank" rel="noopener">Manfred Steger</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3976295" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>はじめまして。2019/02/21 から フューチャーでアルバイトとして働いている。小林澪司と申します。現在は大学四年生で普段は法政大学理工学部で情報工学について学んでいます。</p><p>フューチャーではTIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>に参加しています。</p><p>他のアルバイト生から見たフューチャーがどのような会社かについては元アルバイトの棚井さんが書いた記事を是非ご確認ください。</p><ul><li><a href="https://future-architect.github.io/articles/20190712/">アルバイト生から見たフューチャーのTIG DXユニット | フューチャー技術ブログ</a></li></ul><p>今回は<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間</a>連載とのことでAtCoderJobsで入社して以来、フューチャーで一年半を働き、変わったことや学びについて書いていきます。</p><h1 id="フューチャーに入って変わったこと"><a href="#フューチャーに入って変わったこと" class="headerlink" title="フューチャーに入って変わったこと"></a>フューチャーに入って変わったこと</h1><h2 id="スキルセットが大きく増えた。"><a href="#スキルセットが大きく増えた。" class="headerlink" title="スキルセットが大きく増えた。"></a>スキルセットが大きく増えた。</h2><p>アルバイトとして参加するにあたって、参加し始めの時は知らない技術が沢山ありましたがアルバイトを通して様々な技術を学ぶ必要があり、沢山の学ぶきっかけを得ました。</p><p>私がアルバイトで初めて触った技術は以下のもの全てです。</p><ul><li>Go</li><li>Typescript</li><li>Vue.js</li><li>Docker</li><li>Postgres</li><li>Auth0<ul><li>OAuth 2.0</li><li>Open ID Connect</li></ul></li></ul><p>学ぶきっかけがアルバイトを通して沢山得られるため、様々な技術の存在を知ることができ、知的好奇心が満たされ続けます。</p><p>さらに学生のうちにこのような技術を身に付ける事によって、ハッカソンなどのイベントでも賞を頂く事が出来るレベルまで到達しました。</p><h2 id="技術好きの友人が出来た。"><a href="#技術好きの友人が出来た。" class="headerlink" title="技術好きの友人が出来た。"></a>技術好きの友人が出来た。</h2><p>学生アルバイト目線ですが、フューチャーには同年代のアルバイト生が何人かいます。今はコロナの問題で全社リモートワークに移行しているため中々出来ないですが、出社していた時はお昼ご飯を一緒に食べに行ったりして交友を深めていました。 漏れなく皆、技術好きだったり、競技プログラミングをしていたりで共通の趣味が必ずあるのでとても楽しく過ごすことが出来ます。</p><p>また、毎年夏にはフューチャーのインターンシッププログラム<a href="https://future-architect.github.io/articles/20200606/">Summer Camp</a>でインターン生が入ってくるので、インターン生の方々とお話するのも楽しいです。</p><p>私は2019年の夏に行われた「Engineer Camp」で知り合った方と仲良くなり、<a href="http://isucon.net/" target="_blank" rel="noopener">ISUCON10</a>に参加したり、ハッカソンに出て賞を頂いたり、そのハッカソンで作成した成果物を<a href="https://talent.supporterz.jp/geekten/2020/" target="_blank" rel="noopener">技育展</a>で発表したりしました。</p><p>このように交友関係がとても広がったのはフューチャーでアルバイトしていたからで、とても良い環境だと思います。</p><h2 id="過去～現在までで担当したタスクについて"><a href="#過去～現在までで担当したタスクについて" class="headerlink" title="過去～現在までで担当したタスクについて"></a>過去～現在までで担当したタスクについて</h2><ul><li><a href="https://github.com/future-architect/code-diaper" target="_blank" rel="noopener">GitHubの公開リポジトリで特定の文字列、コードを含んだファイルを抽出するツールの作成</a></li><li>Vuejsで出来ているアプリケーションのコンポーネント開発</li><li>全体構成図を見つつ、設計からコーディングまで幅広く担当するタスク</li></ul><h3 id="GitHubの公開リポジトリで特定の文字列、コードを含んだファイルを抽出するツールの作成"><a href="#GitHubの公開リポジトリで特定の文字列、コードを含んだファイルを抽出するツールの作成" class="headerlink" title="GitHubの公開リポジトリで特定の文字列、コードを含んだファイルを抽出するツールの作成"></a>GitHubの公開リポジトリで特定の文字列、コードを含んだファイルを抽出するツールの作成</h3><p>フューチャーで働き始めてまず最初に頂いたタスクが「GitHubの公開リポジトリで特定の文字列、コードを含んだファイルを抽出したい」というLinterツール作成でした。指定言語は当時まだ一度も触っていないGo言語でした。</p><p>おかげでGo言語を学ぶ機会になり書いてみてはレビューをお願いしてを繰り返し段々と良いソースコードになっていきました。当時右も左も分からなかった私に真摯にレビューして頂き本当に感謝しています。</p><p>また、このタスクを通して以下のことが出来る様になりました。</p><ul><li>ハマった際に海外サイト(StackOverflowなど)を参考に問題を解決すること</li><li>ライブラリの挙動が分からない時にソースコードを読みに行くこと</li></ul><p>趣味で何かを作っている際は辞めてしまえば問題は解決されるのですが、アルバイトでお金をもらっている以上全力を尽くして問題解決を行う必要があります。そのような泥沼にはまった時に問題を切り分けて解決する力が大きく付いたと感じるタスクでした。</p><p>また、Dockerfileを作成したり、Google Cloud Functions上で使える様にしたり、結果をSlackで通知出来る様にしたりと今っぽい技術を沢山触らせて頂きました。</p><p><strong>学んだ技術</strong></p><ul><li>Go<ul><li>0からAPIを叩く所、読みやすいコードの書き方まで。</li><li>当時使われていない変数があるとコンパイルコケることに不便さを感じていましたが今思うと便利ですね。</li></ul></li><li>Docker<ul><li>0からDockerfileを作り、Docker上でアプリが動く所まで学びました。</li><li>DockerコンテナのAlpineからHTTPS利用するために証明書が必要なことに気付くのに時間がかかった印象があります。</li></ul></li><li>GCP<ul><li>こちらも0から触り、Google Cloud Functionでアプリケーションが動く所まで触りました。</li></ul></li></ul><h3 id="Vue-jsで出来ているアプリケーションのコンポーネント開発"><a href="#Vue-jsで出来ているアプリケーションのコンポーネント開発" class="headerlink" title="Vue.jsで出来ているアプリケーションのコンポーネント開発"></a>Vue.jsで出来ているアプリケーションのコンポーネント開発</h3><p>その次に頂いたタスクはVue.jsでコンポーネントの開発でした。内容としては比較的単純明快で、作業指示者の方から「この機能を持つコンポーネントを開発してください」といった内容でした。</p><p>当時タスク始めたての自分はフロントエンドのフの字も知らず、Webの仕組みを何も分かっていないためとても苦労しました。例にもれず沢山の質問をしたのですが、一つ一つ教えて頂き、少しは貢献出来る様になったと思います。</p><p><strong>学んだ技術</strong></p><ul><li>Vue.js<ul><li>v-modelの理解にかなり時間がかかりました。</li></ul></li><li>Node.jsとパッケージ管理</li></ul><p>余談ですが、タスクの一つに「v-iconに自作のSVGアイコンを設定できるか調査してまとめてほしい」があり調べていたのですが、公共性もあり、困っている人が多そうだと思ったのでQiitaにまとめた所、良い評価が貰えました。 ↓がその記事です。</p><p><a href="https://qiita.com/reud/items/d47c4de86f591b59df09#tldr" target="_blank" rel="noopener">Vuetifyのv-iconに自作SVGアイコンを(楽に)使いたい！！ - Qiita</a></p><p>公共性があり、他のエンジニアが助かりそうな話を公開すると評価されるのは風通しの良い企業だな感じました。</p><h2 id="今やっていること"><a href="#今やっていること" class="headerlink" title="今やっていること"></a>今やっていること</h2><ul><li>現在は先程紹介した二つとは別に2019年の8月頃から上二つとは別のプロジェクトに参加しています。</li></ul><p>今のプロジェクトでは全体構成図を見つつ、設計からコーディングまで幅広く色々な仕事をさせてもらっています。</p><p><strong>学んだ技術</strong></p><ul><li>Go<ul><li>DBとの接続<ul><li>PostgreSQLを用いた、DBとGoの接続について学びました。</li><li>ORマッパーについて学び、プロジェクトで利用するORマッパーとその他のORマッパーについて調査しました。<ul><li>その際の調査内容を技術ブログに載せているのでぜひご確認ください。<ul><li><a href="https://future-architect.github.io/articles/20190926/">Go言語のDBレイヤーライブラリの評価 | フューチャー技術ブログ</a></li></ul></li></ul></li></ul></li><li>go-swaggerの調査<ul><li>本プロジェクトではバックエンドにgo-swaggerと呼ばれる、WebAPIの定義からソースコードを生成するツールを利用しています。go-swaggerについては過去真野さんが書かれた記事をぜひ確認ください。<ul><li><a href="https://future-architect.github.io/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選 | フューチャー技術ブログ</a></li></ul></li><li>また、実際にswagger.yamlを記述し、プロジェクトで利用するサーバのコードを生成しました。<ul><li>個人的にはソースコードの自動生成、とても便利かつ知的好奇心がくすぐられるのでとても楽しいです。</li><li>初めは作成されたコードのどこを弄れば良いのか分からず戸惑っていたこともありました。</li></ul></li></ul></li></ul></li><li>Vue.js + Typescript<ul><li>プロジェクトではWebページをVue.jsとTypescriptを利用しています。</li><li>技術検証やコンポーネントの修正・追加など一通りやらせてもらっています。</li><li>プロジェクトに入る前からすると明らかに成長し一通り書ける様にはなったと思います。</li></ul></li><li>Auth0<ul><li>Auth0とは認証プラットフォームです Auth0については過去に山田さんが書かれた記事をぜひご確認ください。<ul><li><a href="https://future-architect.github.io/articles/20200122/">Auth0 導入編 | フューチャー技術ブログ</a></li></ul></li><li>認証認可を理解するにあたって、OIDCのフロー、OAuth 2.0のフローについて学びました。</li><li>いざ機能を実装したり、理解するに当たって、次はJWT(JSON Web Token)について学びました。<ul><li>JWTの形式や中身が理解出来るとぐっとAuth0の認証認可が理解しやすくなって楽しいと思います。</li></ul></li><li>他にもAuth0 Rulesと呼ばれる認証認可後に走るスクリプトなど様々な機能について一通り触らせてもらいました。</li></ul></li><li>チーム開発<ul><li>チケットを立ててブランチを切って開発をしてレビューを受けてマージする一連の流れを学びました。<ul><li>ハッカソンに参加する際、これらの流れを理解していると非常にスムーズに事が進むのでとても良い学びです。</li></ul></li><li>これはまだ成長途中ですが、事実と予想をごちゃ混ぜにしてコメントを書かない様意識し始めました。</li></ul></li></ul><p>後はMicroCMSなど様々なサービスにも触らせて頂き、楽しい限りです。</p><p>また、たまに機能の設計や資料作りがタスクとして流れてくるので本当に幅広く関わらせて頂いてます。</p><p>私はサービスの構成図などを見るのが好きなのですが、今のプロジェクトは構成図を見る機会が多いのも好きなポイントです。</p><h2 id="学業や研究に役立つか"><a href="#学業や研究に役立つか" class="headerlink" title="学業や研究に役立つか"></a>学業や研究に役立つか</h2><p>学業や研究でプログラムを書く機会がある時全般で役に立ちました。例えば、大学の授業で開発を行ったりする際にはとても役に立ちます。</p><p>研究については、私の研究内容はブロックチェーンの応用可能性についてなので直接的に役立っている訳ではありませんが、ブロックチェーンの情報を送受信するのにJSON-RPCでブロックチェーンのノードに接続する<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>ので、プログラムを書く機会はそれなりにあり、間接的に役立ってはいます。</p><p>とはいえ分野やタスクによりますが、研究に直接役立たせようとするのはやはり難しいと思うので研究目的でアルバイトを始めるのはあまりオススメ出来ません。</p><h2 id="これからについて"><a href="#これからについて" class="headerlink" title="これからについて"></a>これからについて</h2><p>まずは目の前の研究から進めつつ、フューチャーで力をより蓄えていきたいと思います。<br>今後ともよろしくお願いいたします。</p><h2 id="最後にフューチャーでアルバイトして思ったこと"><a href="#最後にフューチャーでアルバイトして思ったこと" class="headerlink" title="最後にフューチャーでアルバイトして思ったこと"></a>最後にフューチャーでアルバイトして思ったこと</h2><ul><li>社員さんのコードレビューが親切<ul><li>コメントが親切で学びになる。<ul><li>コメントを頂く際、大体問題点とその理由、改善提案を同時にコメントしてくれるため、「なぜ問題なのか」や「どうすれば良いのか」を教えてくださいます。</li></ul></li><li>コメントへの心理的安全性が高い<ul><li>分からないことや自分の考えを出しやすい空気感が出来ていると思います。時折、何かの課題について自分の考えを語ると社員さんは真摯に受け止めてくれ、会話をしてくれます。</li><li>気軽に相談や提案がアルバイトでも出来るのはとても良い環境だと思います。</li></ul></li></ul></li><li>出社するとたまに席が無い<ul><li>誰も専有していないフリースペースをアルバイターが利用するのですが、たまにそこが埋まっています。</li><li>大体社員さんが席を借してくれるのですがかなり申し訳ない気持ちになるので席がもう少し増えると嬉しいです。</li><li>今リモートワークなので席が無い問題からは解放されています。</li></ul></li><li>時給がとても良い<ul><li>現在(2020.10.15時点)はAtCoder Jobsには求人出ていませんが、時給1500円スタートです。</li><li>前職はあまり働いてなかったというのもありますが、前職と比べて年収が4倍以上になり色々な事が出来る様になりました。</li></ul></li><li>五反田のご飯が美味しい<ul><li>今はリモートワークのためしばらく行けてないですが、五反田にある「地獄の担担麺 護摩龍」という店が辛い物好きにはおススメです。是非行ってみてください。</li></ul></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>私はフューチャーでアルバイトをして</p><ul><li>スキルセットが大きく増えた</li><li>技術好きの友人が出来た。</li><li>好きなことでお金が貰える様になった。</li></ul><p>という変化がありました。</p><p>結果として大学生活丸ごと変わったと言っても過言では無いです。</p><p>引き続き精一杯努力してまいります。これからもよろしくお願い致します。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIG: Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。DXユニット: TIGの中にありデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">例えば、<a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">go-ethereum</a>でEthereumのノードを立てると、ノード自体がJSON-RPCサーバとしても機能するので立てたノードを通して外部のアプリケーションからブロックチェーンの情報を持ってきたりすることが出来ます。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201030/pixel-cells-3976295_1280.png&quot; class=&quot;img-middle-size &quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/manfredsteger-1
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="アルバイト" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%AB%E3%83%90%E3%82%A4%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>読書の秋に読みたい、オライリー謎書籍10選</title>
    <link href="https://future-architect.github.io/articles/20201028/"/>
    <id>https://future-architect.github.io/articles/20201028/</id>
    <published>2020-10-27T15:00:00.000Z</published>
    <updated>2020-10-28T01:15:47.464Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>この記事は<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間</a>連載の第2弾です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>読書の秋、読書と言えばオライリー、オライリーと言えばわれらが渋川よしきさん著、<a href="https://www.oreilly.co.jp/books/9784873119038/" target="_blank" rel="noopener">Real World HTTP 第2版</a>の発売から早くも半年が経過しました。</p><p>はい、いきなり宣伝です、皆さんお手に取っていただけましたか。</p><p>インターネットで必要な情報が無料で手に入る時代ですが、体系的、網羅的な知識を学ぶという意味では技術書の存在意義は健在だと感じています。誰もがお世話になっているHTTPプロトコルの技術と歴史について、この秋に改めて触れてみるのも良いかもしれません。</p><p>ちなみに私が初めて読んだオライリーの書籍は<a href="https://www.oreilly.co.jp/books/9784873117911/" target="_blank" rel="noopener">SRE サイトリライアビリティエンジニアリング</a>です。<br>Googleのシステム管理、運用ノウハウが学べる、という大変興味深い書籍です。抽象的、かつ高度な概念の翻訳という意味で理解するのに骨が折れるトピックですが、日々の業務への意識を変える良いきっかけになる１冊でした。</p><p>そんな技術書籍の毛色が強いオライリーですが、<a href="https://www.oreilly.co.jp/books/9784873117287/" target="_blank" rel="noopener">ヘルシープログラマ――プログラミングを楽しく続けるための健康Hack</a>が、リモートワークが広まった2020年に再認知されるなど、思わぬ側面に切り込んだ書籍の存在に驚かされることがあります。<br>そこで、いったい何故この本がオライリーから、そう言いたくなる書籍を調査、ピックアップしてみました。<br>読書の秋のお供にいかがでしょうか。</p><h2 id="1-Cooking-for-Geeks-第2版-――料理の科学と実践レシピ"><a href="#1-Cooking-for-Geeks-第2版-――料理の科学と実践レシピ" class="headerlink" title="1. Cooking for Geeks 第2版　――料理の科学と実践レシピ"></a>1. <a href="https://www.oreilly.co.jp/books/9784873117874/" target="_blank" rel="noopener">Cooking for Geeks 第2版　――料理の科学と実践レシピ</a></h2><p>オライリー伝説の料理本。</p><p>いったいどういう経緯で執筆されたのか、タイトルの通り徹底的にギークな目線で料理を語る１冊です。</p><p><a href="https://www.oreilly.co.jp/books/9784873117874/#toc" target="_blank" rel="noopener">目次</a>の時点で通常の料理本とは一線を画している事が伝わってきます。第2版が出るのも納得、ギークな皆さんなら間違いなくお楽しみいただける名著です。</p><h2 id="2-家庭の低温調理-――完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ99"><a href="#2-家庭の低温調理-――完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ99" class="headerlink" title="2. 家庭の低温調理 ――完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ99"></a>2. <a href="https://www.oreilly.co.jp/books/9784873118628/" target="_blank" rel="noopener">家庭の低温調理 ――完璧な食事のためのモダンなテクニックと肉、魚、野菜、デザートのレシピ99</a></h2><p>オライリーには料理シリーズがあるようです。料理の中でもとりわけ低温調理に焦点を絞った書籍です。</p><p>「世界初の家庭用投げ込み式サーキュレーターを独力で製品化した著者」が執筆と紹介文にも書いてあることからオライリーから出版されるだけの事情を感じます。<br>低温調理といえばフューチャー技術ブログでも<a href="https://future-architect.github.io/articles/20200811/">ダイエット食のブレイクスルー！低温調理器を自作して鶏むね肉を美味しく食べる</a>という記事があります、何故機械から作ってしまうのか。</p><h2 id="3-発酵の技法-――世界の発酵食品と発酵文化の探求"><a href="#3-発酵の技法-――世界の発酵食品と発酵文化の探求" class="headerlink" title="3. 発酵の技法 ――世界の発酵食品と発酵文化の探求"></a>3. <a href="https://www.oreilly.co.jp/books/9784873117638/" target="_blank" rel="noopener">発酵の技法 ――世界の発酵食品と発酵文化の探求</a></h2><p>料理シリーズはさらなる深みへ、発酵というトピックをまとめた本書は技術者ではなく、プロのフードライターであるSandor Katz氏の著作です。</p><p>Sandor Katz氏は自らを”fermentation fetishist”(発酵フェティシスト)と自称し、発酵の技法以外にも<a href="https://en.wikipedia.org/wiki/Wild_Fermentation" target="_blank" rel="noopener">Wild Fermentation</a>を執筆する発酵のオーソリティです、理解が追い付きませんが権威あふれる書籍が堂々爆誕。</p><p>前述の2冊に劣らず強烈なパワーを感じる一冊です。</p><h2 id="4-子どもが体験するべき50の危険なこと"><a href="#4-子どもが体験するべき50の危険なこと" class="headerlink" title="4. 子どもが体験するべき50の危険なこと"></a>4. <a href="https://www.oreilly.co.jp/books/9784873114989/" target="_blank" rel="noopener">子どもが体験するべき50の危険なこと</a></h2><p>技術書、ノウハウ本としての<a href="https://www.oreilly.co.jp/books/9784873115108/" target="_blank" rel="noopener">プロジェクト・マネジャーが知るべき97のこと</a>、<a href="https://www.oreilly.co.jp/books/9784873115702/" target="_blank" rel="noopener">ゲームクリエイターが知るべき97のこと</a>と同じテンションで送り出されつつ、明らかに異彩を放つ1冊。</p><p>子供が「本当の危険を見きわめる力」と「それに対処する力」を身に着けるために精選された50の知見は人生を豊かにしてくれる事でしょう。</p><h2 id="5-ギークマム-――21世紀のママと家族のための実験、工作、冒険アイデア"><a href="#5-ギークマム-――21世紀のママと家族のための実験、工作、冒険アイデア" class="headerlink" title="5. ギークマム ――21世紀のママと家族のための実験、工作、冒険アイデア"></a>5. <a href="https://www.oreilly.co.jp/books/9784873116365/" target="_blank" rel="noopener">ギークマム ――21世紀のママと家族のための実験、工作、冒険アイデア</a></h2><p>子供の本があるならママの本がある。</p><p>タイトルのギークマムとは文字通りギークであり母である人物を意味します。そんなギークマムの我が子への接し方、時には非オタクのママ友とのつきあい方を記した本書は該当するママのバイブルとなる1冊かもしれません。</p><h2 id="6-マイクロシェルター-――自分で作れる快適な小屋、ツリーハウス、トレーラーハウス"><a href="#6-マイクロシェルター-――自分で作れる快適な小屋、ツリーハウス、トレーラーハウス" class="headerlink" title="6. マイクロシェルター ――自分で作れる快適な小屋、ツリーハウス、トレーラーハウス"></a>6. <a href="https://www.oreilly.co.jp/books/9784873118031/" target="_blank" rel="noopener">マイクロシェルター ――自分で作れる快適な小屋、ツリーハウス、トレーラーハウス</a></h2><p>クールなタイトルですが、これはこれで今までと異なる存在感を放っています。</p><p>少ない材料、時には廃材を利用し、隠れ家やツリーハウスを建築するノウハウがまとめられています。OSS貢献で、個人開発で輝くのも素晴らしいですが、時には物理的に同僚とは一味違った人材を目指してみましょう。個人的にはワクワクするトピックです。</p><h2 id="7-生き物としての力を取り戻す50の自然体験-――身近な野あそびから森で生きる方法まで"><a href="#7-生き物としての力を取り戻す50の自然体験-――身近な野あそびから森で生きる方法まで" class="headerlink" title="7. 生き物としての力を取り戻す50の自然体験 ――身近な野あそびから森で生きる方法まで"></a>7. <a href="https://www.oreilly.co.jp/books/9784873118420/" target="_blank" rel="noopener">生き物としての力を取り戻す50の自然体験 ――身近な野あそびから森で生きる方法まで</a></h2><p>マイクロシェルターに続きワイルドライフな本がありました。</p><p>山奥で暮らすワイルドハッカーによる海外初の書籍と思いきや、カシオ計算機株式会社監修のもと33人のスペシャリストが結集した作品です。「自然体験のアイデア集」と称する本書は仕事で疲れた時におススメの1冊かもしれません。</p><h2 id="8-世界チャンピオンの紙飛行機ブック"><a href="#8-世界チャンピオンの紙飛行機ブック" class="headerlink" title="8. 世界チャンピオンの紙飛行機ブック"></a>8. <a href="https://www.oreilly.co.jp/books/9784873118833/" target="_blank" rel="noopener">世界チャンピオンの紙飛行機ブック</a></h2><p>まさか紙飛行機の本があるとは…</p><p>間違いなく紙飛行機です、1枚の紙を折って作るアレの本です。紙飛行機の折り方にとどまらず、世界記録への挑戦ドキュメンタリーも綴られた1冊です。</p><h2 id="9-どろどろこねこねで楽しい！-手作りスライムとこむぎねんどの本"><a href="#9-どろどろこねこねで楽しい！-手作りスライムとこむぎねんどの本" class="headerlink" title="9. どろどろこねこねで楽しい！　手作りスライムとこむぎねんどの本"></a>9. <a href="https://www.oreilly.co.jp/books/9784873118987/" target="_blank" rel="noopener">どろどろこねこねで楽しい！　手作りスライムとこむぎねんどの本</a></h2><img src="/images/20201028/image.png" class="img-small-size"><p>オライリー感がダントツで低い表紙を誇る1冊。101種類にわたるスライム、ねんどの作り方が紹介されています。</p><h2 id="10-退屈をぶっとばせ！-――自分の世界を広げるために本気で遊ぶ"><a href="#10-退屈をぶっとばせ！-――自分の世界を広げるために本気で遊ぶ" class="headerlink" title="10. 退屈をぶっとばせ！ ――自分の世界を広げるために本気で遊ぶ"></a>10. <a href="https://www.oreilly.co.jp/books/9784873118390/" target="_blank" rel="noopener">退屈をぶっとばせ！ ――自分の世界を広げるために本気で遊ぶ</a></h2><p>最後に紹介するのは、10代の少年少女に伝えたい事が詰まった1冊。</p><p>自分自身にとって意味のある人生を作りたい、それは技術を超えた最も重大なテーマではないでしょうか。一体オライリーは何の目的で技術書らしからぬ本を出すのか、その答えが「退屈をぶっとばせ」というタイトルにあるのかもしれません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>オライリーってたまに変わった本を出版しているな、と前々から思っていたのですが、この機会に調査したら見事10冊紹介できる記事になりました。</p><p>プレゼントに、気分転換に是非お買い求めください。</p><p>なおこの記事は企業としての公式な宣伝ではなく私の趣味で書いています。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a href=&quot;https://future-architect.github.io/articles/20201026/&quot;&gt;秋のブログ週間&lt;/a&gt;連載の第2弾です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="秋ブログ週間" scheme="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/"/>
    
      <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Vulsの歴史</title>
    <link href="https://future-architect.github.io/articles/20201027/"/>
    <id>https://future-architect.github.io/articles/20201027/</id>
    <published>2020-10-26T15:00:00.000Z</published>
    <updated>2020-11-04T05:30:08.536Z</updated>
    
    <content type="html"><![CDATA[<p>CSIGの井上です。</p><p>この記事は<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間</a>連載の第1弾です。</p><h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>私の所属するCSIG(CyberSecurityInnovationGroup)は、セキュリティ関連のコンサルティングや実装などを行っています。また、セキュリティスキャナである <strong>Vuls</strong> やその商用版であるFutureVulsを開発/運営しています。<br>今回、「秋の読書週間として、読み物成分の多い記事を」という事なので、BlackHatなどでも取り上げられたVulsについて書こうと思います。</p><p>私自身、Vulsのコミュニティに関わった関係でFutureと縁ができたので、過去の振り返りになりますね。</p><p>※私はVulsの開発を直接している人ではないので、この記事は私の視点での解釈です。<br>※記載上「実装しました」という書き方をしていますが、実装しているのはプロジェクトオーナの神戸さんや、PullRequestをして頂いたコミッターの方です。<br>※本記事は他の「秋の読書週間連載」著者と若干毛色が違うため、口に合わない場合は次の記事をお待ちください…</p><h1 id="Vulsの歴史"><a href="#Vulsの歴史" class="headerlink" title="Vulsの歴史"></a>Vulsの歴史</h1><img src="/images/20201027/vuls-abstract.png"><h2 id="Vulsとは"><a href="#Vulsとは" class="headerlink" title="Vulsとは"></a>Vulsとは</h2><p>2016年04月にFuture社の神戸氏により<a href="https://github.com/future-architect/vuls/" target="_blank" rel="noopener">Github</a>で公開された、脆弱性スキャナです。ドキュメントなどは、<a href="https://vuls.io/" target="_blank" rel="noopener">vuls.io</a>で公開されています。</p><p>Vuls自体、色々な団体から評価されています。</p><ul><li>IPAの「<a href="https://www.ipa.go.jp/topic/isec-technicalwatch-201902.html" target="_blank" rel="noopener">脆弱性対策の効果的な進め方 ツール活用編</a>」で、インストールや使い方の解説がされました。</li><li>一般社団法人 情報処理学会の2019年<a href="https://www.ipsj.or.jp/award/softwarejapan_award.html" target="_blank" rel="noopener">ソフトウェアジャパンアワード</a>を受賞しました。</li><li>NICTから、Vulsと連動する脆弱性管理プラットフォーム「<a href="https://www.nict.go.jp/press/2018/06/11-1.html" target="_blank" rel="noopener">NIRVANA改弐</a>」がリリースされました。</li></ul><p>Vulsがリリースされた事で、脆弱性可視化が楽になった面のありますが、システム管理者の「脆弱性に対する考え方」に影響を与えたと、私は思っています。</p><ul><li>今までは、「ニュースで報道されたから対応する」「JPCERT/CCが注意喚起を出したから対応する」「CVSS BaseScoreが8.0以上だから対応する」という、内容よりも雰囲気で対応している環境が多い気がします。</li><li>Vulsが出てからは、「脆弱性の影響を見て対応を考える(CVSS Vectorを見る)」「Exploit/PoCが公開された為、対応を早める」「脆弱性のあるパッケージが(ネットワークの)ポートをlistenしているから対応が必要」など、受け身ではない脆弱性対応が広まったと思います。アクティブに脆弱性に対応するには、脆弱性の可視化や情報収集の自動化が必要で、Vulsはそれを助けている、と考えます。</li></ul><p>そんなVulsについて、今までどのように進化してきたかを、大雑把にまとめてみました。</p><h2 id="Vulsの歴史-1"><a href="#Vulsの歴史-1" class="headerlink" title="Vulsの歴史"></a>Vulsの歴史</h2><h3 id="2016年04月-2016年09月ごろ"><a href="#2016年04月-2016年09月ごろ" class="headerlink" title="2016年04月 - 2016年09月ごろ"></a>2016年04月 - 2016年09月ごろ</h3><p>Vulsが公開され、初期の口コミでの広まりが起こった時期です。私は2016年06月ごろからVulsに関わり始めたので、最初期の頃は分からないです。</p><p>2016年04月04日に、Vulsは初めてリリースされました。初期のVulsは、Redhat Enterprise linuxは”yum-plugin-security”を、CentOSやその他のOSは”Changelog”をパースして情報源としていました。</p><p>Vulsリリース後、当時の各種勉強会で紹介されることが多く、Vulsを利用する人たちも増えてきました。そして、Vulsのslack<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>が作られ、そこで色々な議論が行われるようになりました。海外の方からも意見が来ることがあり、Slackに参加している日本人有志で返答をしたりしていました。</p><p>人数も増えて勢いも出てきたのでイベントをやろうということになり、<a href="https://vuls-jp.connpass.com/" target="_blank" rel="noopener">Vuls祭り</a>の第1回が2016年09月に開催されました。最終的には90名程度集まり、JPCERT/CC様のお話もありつつ、どのように利用するかというLTが多数ありました。今考えれば19:00開始で21:20終了(実際には22:00を超えた気がします)という、一般の勉強会よりも長い時間実施するという、かなり熱のあるイベントでした。</p><p>振り返ると、初期の拡散力はすごかったと思います。オープンな脆弱性管理/可視化/スキャンツールに対する期待が高く、それにマッチしていたのだと思います。</p><h3 id="2016年10月-2018年08月"><a href="#2016年10月-2018年08月" class="headerlink" title="2016年10月 - 2018年08月"></a>2016年10月 - 2018年08月</h3><p>Vuls祭り#1以降、スキャン方法の更新や各種機能の追加が行われました。成熟期ととらえてよいかもしれません。</p><p>2016年11月にOWASP Dependency Check<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>との連携ができるようになり、OSのパッケージだけではなくアプリケーションのライブラリ検査もできるようになりました。</p><p>2017年08月には、OVALスキャンと、Fast/Deepスキャンが実装されました。OVALスキャンは、今までのchengelogやyum-plugin-securityで脆弱性情報を集めるのではなく、各ディストリビューションごとにまとめられたOVAL<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>と呼ばれる脆弱性情報をまとめたデータを利用するようになりました。これにより、Changelogのパースより正確な脆弱性情報を取得できるようになりました。また、Fast/Deepスキャンの実装(後にFastRootなどのモードが作られます)により、管理者権限が無くともスキャンができるようになりました。</p><p>2017年10月にVuls祭り#3が開催され、この頃から「実運用でVulsをどう使っているか/どう使うのか」という発表がされています。SoftwareDesignで特集が組まれたりしたことで、Vulsというものが認知され、利用が広がってきたことが実感できた時期です。その後スキャン方法の更新などが行われ、2018年08月に、ある程度の人でも安定的に利用できるVuls v0.5.0がリリースされました。それに合わせ、同日、Vuls祭り#4が開催されました。</p><p>またこの時期に、商用版のサービスとして <a href="https://vuls.biz/" target="_blank" rel="noopener">FutureVuls</a>  <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>がリリースされています。GitHubで公開されているVulsはスキャンを中心としたものであり、実運用上では「タスク管理機能」や「一覧表示」などが必要になります。自前で何らかの管理の仕組みが必要になるため、商用版としてタスク管理機能等を含んだサービスを提供し始めました。</p><h3 id="2018年09月-現在"><a href="#2018年09月-現在" class="headerlink" title="2018年09月 - 現在"></a>2018年09月 - 現在</h3><p>脆弱性スキャンの方向性が固まり、徐々にスキャン範囲を広げていく時期だと思います。</p><p>2018年11月に、Exploit/PoC情報があるかを確認できるようになりました。これは、脆弱性トリアージ<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>の際に「Exploitが公開される=簡単に攻撃ができるようになる」ということで、対応優先度を考慮する際に重要な指標になります。所謂Script kiddieと呼ばれる、他人の作成したExploitを用いて興味本位で攻撃を行うクラッカーが利用してしまう為、攻撃に晒されるリスクが高くなる為です。この情報がVulsのスキャン結果に付与されることで、対応優先度の判断がしやすくなりました。</p><p>2019年01月に US-CERT及びJPCERT/CC<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>の警戒情報が、2019年02月にGithub Security Alertsとの連携、2019年04月にはWordPressの脆弱性スキャン、が可能になりました。</p><p>特にGithub Security Alertsについては、今まではOWASP Dependency Checkでしかプログラムのライブラリスキャンはできなかったものが、Github連携をするだけで検出できるようになり、利便性が向上しました。極端な話、プログラムのLockfile(利用しているライブラリ等の依存関係が書かれたファイル)だけをgithubにアップロードすることで、実機のスキャンの必要が無く脆弱性を診断できるようになったのです。</p><p>2019年07月には、脆弱性の残存しているパッケージが利用しているポートやプロセスを表示する機能が実装されました。脆弱性のあるパッケージがどこに影響をしているのか、待ち受けポートやPIDで可視化できるようになりました。例えばlibcの脆弱性が、まわりまわってssh serverで使われている、等が分かるようになります。<br>脆弱性対策の基本として「利用していないパッケージは導入しない」(不要なものを入れない=管理コスト削減)というのがありますが、脆弱性が残存するパッケージを(少なくとも常駐プロセスとして)使っているのかを確認することができるようになりました。</p><p>そして、直近ですが2020年10月に、ポートスキャナ機能を実装しました。これはVulsで検出されたポートに対してスキャンを行うものです。通常のポートスキャナは外形検査を含むため、外部から全ポート(若しくは複数の特定のポート)に対してスキャンを実施します。Vulsのポートスキャンは無差別なスキャンを行わず、利用しているポートに対してスキャンを行います。この機能は、Firewallでポートは閉じられているが、実機上ではオープンとなっている、等を認識する点で利用可能だと思います。</p><p>このように、続々と新機能が追加されています。これからが成熟期なのかもしれません。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>簡単ですが、私の視点からVulsの歴史を見てきました。これからも脆弱性対策はますます重要になっていくため、これらのツールを活用して安全に運用していきたいですね。</p><p>あと、Vuls祭り、やりたいですね。</p><p>尚、商用サービスとして <a href="https://vuls.biz/" target="_blank" rel="noopener">FutureVuls</a> <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>がありますので、脆弱性対策を検討されているようでしたら 井上までご連絡ください。</p><p>それでは、ご安全に。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Vulsのslack。参加は<a href="https://goo.gl/forms/xm5KFo35tu" target="_blank" rel="noopener">こちら</a>から。初心者的な質問は #newbie、日本語は #vuls-jp などのチャンネルに分かれている。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">OWASP Dependency Check。<a href="https://owasp.org/www-project-dependency-check/" target="_blank" rel="noopener">OWASPが提供している</a>プロジェクトの一つ。ローカルで実行することで、JavaやRubyなどのアプリケーションを調べ、古いライブラリの存在等を検出するツール。2020年時点では、github上で開発しているプロジェクトであれば、github security alertsでカバーできる為、利用できる場合はgithub側の物を利用することを推奨。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">OVAL:Open Vulnerability and Assessment Language。SCAP(<a href="/articles/20201027/#fn:7">※脚注7</a>）の構成要素の一つで、コンピュータのセキュリティ設定状況を検査するための仕様。これを用いることで、パッケージに残存する脆弱性を特定することが可能。各ベンダごとに用意されている。このOVAL情報を用いない場合、正確な脆弱性検出は不可能と考えられる。一般にCVEとして公開される脆弱性は公開されているプロジェクトの最新版を基にしている。しかしながら各ベンダのパッケージは最新版を使用しておらず、ある程度前のバージョンのものに対してパッチの適用を繰り返している、所謂「バックポート」を行っている。そのため、CVEで公表されたプログラムバージョンと、実際に影響のあるベンダパッケージのバージョンが異なることがあり、CVEで提供される情報だけでは判断がつかない。詳細に話したいがここでは書ききれない為、機会があれば別途公開したい。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">FutureVuls。Vulsを管理しているFuture社が提供している、商用で使えるVuls。Vulsはサーバの脆弱性を可視化するだけだが、チームで脆弱性を管理する機能はない。そのための機能も含めてVulsをSaaSとして提供しているサービス。更新プログラムの適用タスク管理や、トリアージする際に判断しやすい画面などを提供している。 https://vuls.biz/ を参照。私の顔写真も出ている…。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">トリアージ。所謂「患者の重症度に基づいて、治療の優先度を決定して選別を行う」事。脆弱性対応では、より <strong>リスクの高い脆弱性</strong> を優先して対応する必要があり、対応優先度の判定という意味で利用される。決して「優先順位の低いものは(面倒だから)対応しない」事を決めるために行うものではない。リスク判定は、一般的には CVSS BaseScoreが高い物(8.0以上)、のような決定がされていることが多い。近年は脆弱性の性質を見て判断するという手法が徐々に広まっており、ネットワークから攻撃が可能か/PoCやExploitは存在するか/攻撃難易度は高いか、等のCVSS Vector情報を利用して判断する組織も増えてきている。CVSS BaseScoreは低くとも自社環境ではリスクが高い、Scoreは高くても自社環境ではリスクは少ない 等があるため、Scoreで判断するのはあまり適切ではない。ここに出てきているCVSS BaseScoreやVectorは、SCAPで利用されている。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">JPCERT/CC(Japan Computer Emergency Response Team Coordination Center)。<a href="https://www.jpcert.or.jp/about/" target="_blank" rel="noopener">サイト</a>によると「インターネットを介して発生する侵入やサービス妨害等のコンピュータセキュリティインシデント*1(以下、インシデント) について、日本国内に関するインシデント等の報告の受け付け、対応の支援、発生状況の把握、手口の分析、再発防止のための対策の検討や助言などを、技術的な立場から行なっています。」との事。直接対応する訳ではない部分があるため、コーディネートセンター=CC としており、表記上「/CC」は必要。</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;">SCAP(Security Content Automation Protocol)。米国で2002年に施工されたFISMA(Federal Information Security Management Act;連邦情報セキュリティマネジメント法)に対応するため、セキュリティ対策を自動化するための標準化として制定された。脆弱性対応でよく利用されるCVE, CPE, CVSS, OVALなどで構成されている。これらの定義により、システムが特定のセキュリティポリシーに合致しているかを迅速に確認/修正できるようになっている。実装としてはOpenSCAPが挙げられる。OpenSCAPのプログラムであるoscapコマンドに、特定のセキュリティポリシーを記載したもの(SSG:SCAP Security Guide。各ディストリビューション毎にパッケージで用意されている)を渡してチェックする。チェック内容は、例えばSSHのタイムアウト時間、必要パスワード文字長、などのconfigのチェックが含まれる。デフォルトで用意されているセキュリティポリシーは強力なものが多く(PCI-DSSやFISMA対応などであり、一般のサーバに適用するには強固すぎるきらいがある)、日本国内ではなかなか利用されていないように見える。こちらも詳細はこの記事には書ききれないので、機会があれば別途公開したい。</span><a href="#fnref:7" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSIGの井上です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a href=&quot;https://future-architect.github.io/articles/20201026/&quot;&gt;秋のブログ週間&lt;/a&gt;連載の第1弾です。&lt;/p&gt;
&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初め
      
    
    </summary>
    
    
      <category term="Security" scheme="https://future-architect.github.io/categories/Security/"/>
    
    
      <category term="Vuls" scheme="https://future-architect.github.io/tags/Vuls/"/>
    
      <category term="秋ブログ週間" scheme="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/"/>
    
  </entry>
  
  <entry>
    <title>秋のブログ週間連載をはじめます</title>
    <link href="https://future-architect.github.io/articles/20201026/"/>
    <id>https://future-architect.github.io/articles/20201026/</id>
    <published>2020-10-25T15:00:00.000Z</published>
    <updated>2020-11-04T05:03:22.351Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。技術ブログ運営の<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。</p><p>今回は秋のブログ週間と銘打って連載を開始します。期間は後述しますが、全9回の連載になります。</p><img src="/images/20201026/tree-99852_1280.jpg"><p><a href="https://pixabay.com/ja/users/giani-1202/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=99852" target="_blank" rel="noopener">Giani Pralea</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=99852" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h2 id="秋の読書週間について"><a href="#秋の読書週間について" class="headerlink" title="秋の読書週間について"></a>秋の読書週間について</h2><p>秋の読書週間は公益社団法人 読書推進運動協議会が制定しており、期間は10/27〜11/9の2週間を読書を推進する行事として毎年開催されています。目的としては、読書することへの推進や活字を読む機会の増進などとなります。皆さんも小学生の時にこの読書週間があったことを覚えている方もいるのではないでしょうか？</p><p>この読書週間にインスパイアされてフューチャーでは、秋のブログ連載を開催しております。</p><h2 id="秋のブログ連載"><a href="#秋のブログ連載" class="headerlink" title="秋のブログ連載"></a>秋のブログ連載</h2><p>秋の夜長を楽しめるような、コーヒーや紅茶やお酒を片手にゆっくり読めるような <strong>いつもより読み物成分多め</strong> であることをテーマとしています。普段は○○技術への入門といった形式の記事が多いですが、そういったプログラミングとは少し趣を変えていきます。普段フューチャー技術ブログをあまり読まない人にも記事が届くと良いなと考えています。</p><p>特定の技術要素での縛りと言うより、ややエッセー寄りでまとめていきます。新しい取り組みなのですが、いつも以上に面白い記事を届けられるようにします。お楽しみください！</p><h2 id="公開スケジュール"><a href="#公開スケジュール" class="headerlink" title="公開スケジュール"></a>公開スケジュール</h2><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>10/27</td><td>井上圭</td><td><a href="https://future-architect.github.io/articles/20201027/">Vulsの歴史</a></td></tr><tr><td>10/28</td><td>伊藤真彦</td><td><a href="https://future-architect.github.io/articles/20201028/">読書の秋に読みたい、オライリー謎図書10選</a></td></tr><tr><td>10/29</td><td>可児友邦</td><td>各フェーズにおけるあるある集</td></tr><tr><td>10/30</td><td>小林澪司</td><td><a href="https://future-architect.github.io/articles/20201030/">フューチャーにアルバイトで参画して一年半が経ったので一度振りかえる。</a></td></tr><tr><td>11/2</td><td>金子剛士</td><td><a href="https://future-architect.github.io/articles/20201102/">フューチャーでアルバイト、社員として働いてみて</a></td></tr><tr><td>11/4</td><td>戸田聖人</td><td><a href="https://future-architect.github.io/articles/20201104/">人工知能と神経科学</a></td></tr><tr><td>11/5</td><td>米谷悠</td><td>イノベーションの捉え方</td></tr><tr><td>11/6</td><td>藤野圭一</td><td>OSSコミュニティへのフィードバック</td></tr><tr><td>11/9</td><td>真野隼記</td><td>Goで割り切ったパッケージ、テスト方針にした結果</td></tr></tbody></table><p>※公開スケジュールは変更になったり、入れ替わることがあります。ご了承ください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>いつもはコードが多かったりする技術ブログですが、今回はスマホ片手にも読みやすい記事が揃っています。約2週間ですがどうぞお付き合いください。</p><p>他にも連載企画がざくざくあります。ぜひ、気になるテーマの記事をCHECK! いただけると幸いです。</p><ul><li><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a></li><li><a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a></li><li><a href="/tags/GoCDK/">Go Cloud</a></li><li><a href="/tags/Auth0/">Auth0</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/夏休み自由研究/">夏休み自由研究</a></li><li><a href="/tags/GlyphFeeds/">GlyphFeeds連載</a></li><li><a href="/tags/CNCF/">CNCF連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。技術ブログ運営の&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;今回は秋のブログ週間と銘打って連載を開始します。期間は後述しますが
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="秋ブログ週間" scheme="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/"/>
    
  </entry>
  
  <entry>
    <title>GoとAWS LambdaのためのMakefile</title>
    <link href="https://future-architect.github.io/articles/20201022/"/>
    <id>https://future-architect.github.io/articles/20201022/</id>
    <published>2020-10-21T15:00:00.000Z</published>
    <updated>2020-10-22T00:32:49.702Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201022/GNU-make.webp" class="img-middle-size"><p>筒井です。</p><p>GoとAWS LambdaのためのMakefileを整理しました。<br>Lambda Functionの増加と同時に増えていくターゲットにはオサラバです。</p><h2 id="前提・ディレクトリ構造"><a href="#前提・ディレクトリ構造" class="headerlink" title="前提・ディレクトリ構造"></a>前提・ディレクトリ構造</h2><p>次のようなディレクトリ構造を前提としています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   ├── func1</span><br><span class="line">│   └── func2</span><br><span class="line">├── handler</span><br><span class="line">│   ├── func1</span><br><span class="line">│   │   └── main.go</span><br><span class="line">│   └── func2</span><br><span class="line">├── lib1</span><br><span class="line">│   ├── lib1.go</span><br><span class="line">│   └── lib1_test.go</span><br><span class="line">├── lib2</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── Makefile</span><br><span class="line">└── serverless.yml</span><br></pre></td></tr></table></figure><ul><li>dist : ビルドしたバイナリの出力先。このディレクトリを固めてデプロイします</li><li>handler/funcN : 各Lambda Function用のパッケージ</li><li>lib1, lib2 : Lambda Functionが依存するパッケージ（ライブラリ）</li></ul><p>またデプロイは<a href="https://www.serverless.com/" target="_blank" rel="noopener">Serverless Framework</a>を使用することを想定しています。<br>次のようにServerlessの設定を書けば、良い感じにバイナリのみをデプロイ出来るようにします。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># serverless.yml</span></span><br><span class="line"><span class="attr">package:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./**</span></span><br><span class="line">  <span class="attr">include:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dist/**</span></span><br></pre></td></tr></table></figure><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><p>各Lambda Functionを一気にビルドするためのMakefileです。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Makefile</span></span><br><span class="line">GO := go</span><br><span class="line">GO_BUILD := <span class="variable">$(GO)</span> build</span><br><span class="line">GO_ENV := CGO_ENABLED=0 GOOS=linux</span><br><span class="line">GO_FLAGS := \</span><br><span class="line">-ldflags=<span class="string">"-s -w"</span></span><br><span class="line">SUFFIX := .go</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: all</span></span><br><span class="line"><span class="section">all: handlers</span></span><br><span class="line"></span><br><span class="line">DEPFILES := </span><br><span class="line"></span><br><span class="line">LIBS := \</span><br><span class="line">lib1 \</span><br><span class="line">lib2</span><br><span class="line">DEPFILES += $(LIBS:%=%/*<span class="variable">$(SUFFIX)</span>)</span><br><span class="line"></span><br><span class="line">LAMBDA_HANDLER_DIR := handler</span><br><span class="line">LAMBDA_HANDLERS := \</span><br><span class="line">func1 \</span><br><span class="line">func2</span><br><span class="line">DEPFILES += <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(LAMBDA_HANDLER_DIR)</span>/, $(LAMBDA_HANDLERS:%=%/*<span class="variable">$(SUFFIX)</span>)</span>)</span><br><span class="line">DIST_DIR := dist</span><br><span class="line">TARGETS := $(LAMBDA_HANDLERS:%=<span class="variable">$(DIST_DIR)</span>/%)</span><br><span class="line"></span><br><span class="line"><span class="variable">$(DIST_DIR)</span>/%: <span class="variable">$(LAMBDA_HANDLER_DIR)</span>/% <span class="variable">$(DEPFILES)</span> go.sum</span><br><span class="line"><span class="variable">$(GO_ENV)</span> <span class="variable">$(GO_BUILD)</span> <span class="variable">$(GO_FLAGS)</span> -o <span class="variable">$@</span> ./<span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: handlers</span></span><br><span class="line"><span class="section">handlers: <span class="variable">$(TARGETS)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line"><span class="variable">$(GO)</span> clean</span><br><span class="line">rm -rf <span class="variable">$(DIST_DIR)</span></span><br></pre></td></tr></table></figure><p>これだけだと黒魔術に近いので解説していきます。<br>変数の扱いがわかりにくと思いますので、コメントで展開例を記載しています。</p><p>まずターゲット <code>handlers</code> の依存に、各バイナリを追加します。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TARGETS := dist/func1 dist/func2</span></span><br><span class="line">TARGETS := $(LAMBDA_HANDLERS:%=<span class="variable">$(DIST_DIR)</span>/%)</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: handlers</span></span><br><span class="line"><span class="section">handlers: <span class="variable">$(TARGETS)</span></span></span><br></pre></td></tr></table></figure><p>各バイナリのビルド方法を書きます。<br>自動変数 <code>$&lt;</code> の手前につけた <code>./</code> は、相対パスでパッケージを指定する際は必須です。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dist/func1: handler/func1 handler/func1/main.go ... go.sum</span></span><br><span class="line"><span class="variable">$(DIST_DIR)</span>/%: <span class="variable">$(LAMBDA_HANDLER_DIR)</span>/% <span class="variable">$(DEPFILES)</span> go.sum</span><br><span class="line">    <span class="comment"># CGO_ENABLED=0 GOOS=linux go build -ldflags="-s -w" -o dist/func1 ./handler/func1</span></span><br><span class="line">    <span class="variable">$(GO_ENV)</span> <span class="variable">$(GO_BUILD)</span> <span class="variable">$(GO_FLAGS)</span> -o <span class="variable">$@</span> ./<span class="variable">$&lt;</span></span><br></pre></td></tr></table></figure><p>依存の <code>$(DEPFILES)</code> 以下が無くてもビルドは可能です。<br>しかしここで各ソースファイルを指定しておかないと、Makeがソースの変更を検知できません。</p><p><code>$(DEPFILES)</code> には、各パッケージ配下の <code>.go</code> ファイルを集めています。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DEPFILES := </span><br><span class="line">LIBS := \</span><br><span class="line">lib1 \</span><br><span class="line">lib2</span><br><span class="line"><span class="comment"># DEPFILES += lib1/*.go lib2/*.go</span></span><br><span class="line">DEPFILES += $(LIBS:%=%/*<span class="variable">$(SUFFIX)</span>)</span><br><span class="line"></span><br><span class="line">LAMBDA_HANDLER_DIR := handler</span><br><span class="line">LAMBDA_HANDLERS := \</span><br><span class="line">func1 \</span><br><span class="line">func2</span><br><span class="line"><span class="comment"># DEPFILES += handler/func1/*.go handler/func2/*.go</span></span><br><span class="line">DEPFILES += <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(LAMBDA_HANDLER_DIR)</span>/, $(LAMBDA_HANDLERS:%=%/*<span class="variable">$(SUFFIX)</span>)</span>)</span><br></pre></td></tr></table></figure><p>これで <code>make handlers</code> で一度に全てのバイナリがビルドできるようになりました。</p><p>また <code>make -j</code> で並列実行も出来て便利です。Lambda Functionを追加した際には、<code>LAMBDA_HANDLERS</code> を追記するだけでOKです。</p><p><code>make func1</code>、<code>make func2</code>…と繰り返すのと比べると、「Makefileは直したけどCIの設定ファイルを直してなかった！」なんてことも無く安心ですね。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201022/GNU-make.webp&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;筒井です。&lt;/p&gt;
&lt;p&gt;GoとAWS LambdaのためのMakefileを整理しました。&lt;br&gt;Lambda Functionの増加と
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
      <category term="Makefile" scheme="https://future-architect.github.io/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>CloudEndure Migration - 導入編</title>
    <link href="https://future-architect.github.io/articles/20201021/"/>
    <id>https://future-architect.github.io/articles/20201021/</id>
    <published>2020-10-20T15:00:00.000Z</published>
    <updated>2020-10-21T00:44:08.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。2020年1月中途入社、TIGの八巻です。</p><p>現在、クラウドリフトのプロジェクトにて、オンプレミス環境のサーバーをクラウドへ移行するため、AWSの移行サービスであるCloudEndureについて調査しました。参考文献が少なく苦労したため、こちらに書き残します。</p><p>大きく分けて以下の流れで進めます。</p><ol><li>CloudEndure Migrationの説明とセットアップ（本記事の内容）</li><li>CloudEndure Migrationを利用した移行の実施（次回の記事に記載）</li></ol><h1 id="CloudEndure-Migrationとは"><a href="#CloudEndure-Migrationとは" class="headerlink" title="CloudEndure Migrationとは"></a>CloudEndure Migrationとは</h1><p>CloudEndure Migrationは、2019年6月からAWSで利用が可能になった無料のサービスです。移行元サーバーにエージェントをインストールすることで、物理・仮想マシン問わず移行が可能となります。</p><p>オンプレミス環境からクラウドへの移行はもちろんのこと、クラウド間の移行も可能です。CloudEndure Migrationの特徴は「ライブマイグレーション」です。エージェントがバックグラウンドでデータをクラウドへ複製するため、稼働中のサーバーに影響を与えることなく、サーバー移行が可能です。</p><p>CloudEndure Migrationの仕様と利用開始まで、以下の順番で説明します。</p><ol><li>ざっくりとした移行までの流れ</li><li>CloudEndure Migrationの全体像</li><li>通信要件</li><li>サポートOS</li><li>CloudEndure利用開始までの流れ<ol><li>CloudEndureアカウント登録</li><li>プロジェクト作成</li><li>セットアップ</li></ol></li></ol><h1 id="ざっくりとした移行までの流れ"><a href="#ざっくりとした移行までの流れ" class="headerlink" title="ざっくりとした移行までの流れ"></a>ざっくりとした移行までの流れ</h1><p>移行のイメージをつかむため、ざっくりと説明すると、以下の流れとなります。</p><ol><li>CloudEndureのアカウント登録、各種設定</li><li>移行元のサーバーにCloudEndureエージェントをインストール</li><li>エージェントがレプリケーションサーバーに、データのコピーをバックグラウンドで送信</li><li>レプリケーションサーバーが受け取ったデータをEBSに書き込む</li><li>EBSを基に、ターゲットマシンを起動</li></ol><p>本記事では、「1. CloudEndureのアカウント登録や各種設定」までを記載します。</p><h1 id="CloudEndure-Migrationの全体像"><a href="#CloudEndure-Migrationの全体像" class="headerlink" title="CloudEndure Migrationの全体像"></a>CloudEndure Migrationの全体像</h1><p>全体像を掴むには、以下の図が参考になります。<br><img src="/images/20201021/00_00_NETWORK_DIAGRAM.png" alt=""><br>画像引用元： <a href="https://docs.cloudendure.com/#Preparing_Your_Environments/Network_Diagram/Network_Diagram.htm#Network_Diagram%3FTocPath%3DNavigation%7CPreparing%2520Your%2520Environments%7C_____2" target="_blank" rel="noopener">Network Diagram</a></p><p>主要なアクターは以下の通りです。</p><h3 id="Corporate-Data-Center-Any-Cloud"><a href="#Corporate-Data-Center-Any-Cloud" class="headerlink" title="Corporate Data Center / Any Cloud"></a>Corporate Data Center / Any Cloud</h3><p>移行元のサーバーが存在する環境を指します。</p><h3 id="CloudEndure-Agent"><a href="#CloudEndure-Agent" class="headerlink" title="CloudEndure Agent"></a>CloudEndure Agent</h3><p>移行元サーバーにインストールして利用します。<br>後述するレプリケーションサーバーに対して、移行元サーバーのデータをバックグラウンドで送信する役割を担います。</p><h3 id="AWS-Cloud"><a href="#AWS-Cloud" class="headerlink" title="AWS Cloud"></a>AWS Cloud</h3><p>移行先のAWS環境を指します。</p><h3 id="Staging-Area-Replication-Servers"><a href="#Staging-Area-Replication-Servers" class="headerlink" title="Staging Area Replication Servers"></a>Staging Area Replication Servers</h3><p>移行元のサーバーにインストールしたエージェントから継続的にデータを受け取り、EBSへ受け取ったデータを複製する、軽量のEC2インスタンスを指します。<br>(以降、レプリケーションサーバーと呼ぶ。)</p><h3 id="Staging-Area-VPC-Subnet"><a href="#Staging-Area-VPC-Subnet" class="headerlink" title="Staging Area VPC Subnet"></a>Staging Area VPC Subnet</h3><p>レプリケーションサーバーが起動されるサブネットです。<br>こちらのサブネットは、移行元のサーバーと通信が可能である必要があります。</p><h3 id="Launched-Target-EC2-instance"><a href="#Launched-Target-EC2-instance" class="headerlink" title="Launched Target EC2 instance"></a>Launched Target EC2 instance</h3><p>レプリケーションサーバーから複製されたEBSを基に起動される、EC2インスタンスを指します。<br>このEC2インスタンスが、移行完了時のサーバーです。<br>(以降、ターゲットマシンと呼ぶ。)</p><h3 id="Target-VPC-Subnet"><a href="#Target-VPC-Subnet" class="headerlink" title="Target VPC Subnet"></a>Target VPC Subnet</h3><p>ターゲットマシンが起動されるサブネットです。</p><h3 id="CloudEndure-User-Console-CloudEndure-Service-Manager"><a href="#CloudEndure-User-Console-CloudEndure-Service-Manager" class="headerlink" title="CloudEndure User Console (CloudEndure Service Manager)"></a>CloudEndure User Console (CloudEndure Service Manager)</h3><p>移行元サーバーの登録や管理、レプリケーション(複製)状態の監視、ターゲットマシンの起動などを行う管理コンソールです。</p><p>CloudEndure Migrationの操作は、基本的にこのコンソールを使用します。AWS Management ConsoleのCloudEndure版のようなものです。</p><p>※「CloudEndure Service Manager」とは<br><a href="https://docs.cloudendure.com/CloudEndure%20Documentation.htm" target="_blank" rel="noopener">CloudEndureDocumentation</a>の「Glossary(用語集)」にある説明では、「The CloudEndure server」のみですが、<br>CloudEndureのメインサービスを提供しているサーバーだと推測できます。<br>「CloudEndure User Console」は、このサーバから提供されています。<br><img src="/images/20201021/Glossary-CloudEndureServiceManager.png" alt=""></p><h1 id="ネットワーク要件"><a href="#ネットワーク要件" class="headerlink" title="ネットワーク要件"></a>ネットワーク要件</h1><p>CloudEndure Migrationを利用するための、ネットワーク要件は以下の通りです。</p><ul><li>参考:<a href="https://docs.cloudendure.com/CloudEndure%20Documentation.htm#Preparing_Your_Environments/Network_Requirements/Network_Requirements.htm#Network_Requirements_..90%3FTocPath%3DNavigation%7CPreparing%2520Your%2520Environments%7CNetwork%2520Requirements%2520%7C_____0" target="_blank" rel="noopener">Network Requirements</a></li></ul><h2 id="TCPポート443での通信"><a href="#TCPポート443での通信" class="headerlink" title="TCPポート443での通信"></a>TCPポート443での通信</h2><h4 id="移行元のサーバーとCloudEndure-Service-Manager間の通信"><a href="#移行元のサーバーとCloudEndure-Service-Manager間の通信" class="headerlink" title="移行元のサーバーとCloudEndure Service Manager間の通信"></a>移行元のサーバーとCloudEndure Service Manager間の通信</h4><p>移行元サーバへエージェントをインストールする際に使用するAPIや、エージェントの監視に使用されます。</p><h4 id="レプリケーションサーバーとCloudEndure-Service-Manager間の通信"><a href="#レプリケーションサーバーとCloudEndure-Service-Manager間の通信" class="headerlink" title="レプリケーションサーバーとCloudEndure Service Manager間の通信"></a>レプリケーションサーバーとCloudEndure Service Manager間の通信</h4><p>レプリケーションサーバーのログや、API実行時に使用されます。</p><h4 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h4><p>CloudEndure Service ManagerのIPアドレスは、以下2つが公開されています。<br>移行元環境のファイアウォール等で制御している場合は、通信を許可する必要があります。</p><ul><li>52.72.172.158 (main service of console.cloudendure.com)</li><li>52.53.92.136</li></ul><p>また、CloudEndure Service Managerへの通信は、「console.cloudendure.com」を名前解決して行われます。移行元サーバーと、レプリケーションサーバーが名前解決が可能な環境にあることを確認してください。</p><h2 id="TCPポート1500での通信"><a href="#TCPポート1500での通信" class="headerlink" title="TCPポート1500での通信"></a>TCPポート1500での通信</h2><h4 id="移行元のサーバーとレプリケーションサーバー間の通信"><a href="#移行元のサーバーとレプリケーションサーバー間の通信" class="headerlink" title="移行元のサーバーとレプリケーションサーバー間の通信"></a>移行元のサーバーとレプリケーションサーバー間の通信</h4><p>移行元サーバーのデータ転送に使用されます。</p><h1 id="サポートOS"><a href="#サポートOS" class="headerlink" title="サポートOS"></a>サポートOS</h1><p>OS、バージョンごとに、必要な要件および制約が異なります。</p><p>以下の要件については、OSのバージョンに関係なく要件を満たしておく必要があります。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li>利用可能なWindowsUpdateは、全てインストールしておくこと推奨</li><li>移行後のサーバーが正常に起動するには、移行元のサーバーに少なくとも2GBの空き容量が必要</li><li>GPTパーティションを持つWindowsのディスクはサポートしていない</li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li>エージェントのインストールには、Python2.4以降、または、Python3.0以降が必要</li><li>GRUBブートローダーを使用するマシンのみサポート</li><li>2.6.18-164より前のカーネルバージョンは、AWSおよびCloudEndureではサポートしていない</li><li>XFS5ルートまたはブートファイルシステムを備えたLinuxマシンはサポートしていない</li></ul><p>その他にも、OSやバージョンごとに詳細な注意事項があります。</p><p><strong>以下のページも必ずご確認ください。</strong></p><ul><li>参考: <a href="https://docs.cloudendure.com/Content/Getting_Started_with_CloudEndure/Supported_Operating_Systems/Supported_Operating_Systems.htm" target="_blank" rel="noopener">Supported Operating Systems</a></li></ul><h1 id="CloudEndure利用開始までの流れ"><a href="#CloudEndure利用開始までの流れ" class="headerlink" title="CloudEndure利用開始までの流れ"></a>CloudEndure利用開始までの流れ</h1><p>CloudEndureのアカウント登録から移行開始までのセットアップを行います。</p><h2 id="1-Cloudendureアカウント登録"><a href="#1-Cloudendureアカウント登録" class="headerlink" title="1.Cloudendureアカウント登録"></a>1.Cloudendureアカウント登録</h2><p>CloudEndureの利用にはアカウントの登録が必要です。以下のリンクから登録が可能です。<br><a href="https://console.cloudendure.com/#/register/register" target="_blank" rel="noopener">Create a CloudEndure Migration Account to Get Free Licenses</a></p><p>ライセンスを取得するメールアドレスとパスワードを入力して、「Continue」ボタンをクリックしてください。<br><img src="/images/20201021/01_01_CloudEndureRegister.jpg" alt=""></p><p>以下のようなメールが届くので、「 confirm your account request 」にあるリンクにアクセスして登録は完了です。<br><img src="/images/20201021/01_02_%E4%BB%AE%E7%99%BB%E9%8C%B2%E3%83%A1%E3%83%BC%E3%83%AB.jpg" alt=""></p><p>以下URLにアクセスして、登録したメールアドレスとパスワードを使ってコンソールにログインします。<br><a href="https://console.cloudendure.com/#/signIn" target="_blank" rel="noopener">https://console.cloudendure.com/#/signIn</a><br><img src="/images/20201021/01_04_Login.jpg" alt=""></p><p>以下のような画面に遷移すれば、ログイン完了です。<br><img src="/images/20201021/01_05_Login%E5%AE%8C%E4%BA%86.png" alt=""></p><h2 id="2-プロジェクト作成"><a href="#2-プロジェクト作成" class="headerlink" title="2. プロジェクト作成"></a>2. プロジェクト作成</h2><p>CloudEndurteは、プロジェクトという単位で管理が可能です。登録直後は、「Default Project」のみ存在します。</p><p>この「Default Project」だけで管理することも可能ですが、移行先のAWSアカウントが複数存在する場合や、複数のベンダーで移行を行う場合には、プロジェクトの分割が有効です。なお、1つのCloudEndureアカウントで管理可能なプロジェクトの最大数は100です。</p><p>プロジェクトの作成は、サイドメニュー上部の「＋」マークから作成が可能です。今回は「CloudEndure-Test」というプロジェクトを作成します。<br><img src="/images/20201021/01_06_%E3%83%95%E3%82%9A%E3%83%AD%E3%82%B7%E3%82%99%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90.png" alt=""><br>「CREATE PROJECT」ボタンをクリックして、プロジェクトの作成は完了です。</p><h2 id="3-セットアップ"><a href="#3-セットアップ" class="headerlink" title="3. セットアップ"></a>3. セットアップ</h2><p>プロジェクトの作成後、セットアップを行います。(Default Project利用する場合も同じ)<br>CloudEndureの利用には、以下の項目の設定が必要です。</p><ul><li>AWS CREDENTIALS</li><li>REPLICATION SETTINGS</li></ul><h3 id="AWS-CREDENTIALS"><a href="#AWS-CREDENTIALS" class="headerlink" title="AWS CREDENTIALS"></a>AWS CREDENTIALS</h3><p>CloudEndureが使用する、AWSの資格情報(IAM User)を設定します。</p><p>ここで設定する資格情報は、ターゲットマシン(移行後のEC2)の起動や、CloudEndureがセキュリティグループなどを作成する際に使用されます。</p><p>以下のページに、必要なポリシーの情報が記載されています。</p><ul><li>参考: <a href="https://docs.cloudendure.com/Content/IAMPolicy.json" target="_blank" rel="noopener">https://docs.cloudendure.com/Content/IAMPolicy.json</a></li></ul><p>上記のjsonファイルを参考に、IAM Policy、IAM Userを作成します。<br>※IAM Userのインラインポリシーでは、2048文字の制限があるため、IAM Policyの作成をオススメします。</p><p>上記のポリシーには含まれていませんが、事前に作成しておいたIAM Roleをアタッチして、ターゲットマシンを起動したい場合、「iam:PassRole」の権限が必要となります。必要に応じて、権限を付与してください。</p><p>IAM Userの作成手順は、以下のURLを参照ください。</p><ul><li>参考: <a href="https://docs.cloudendure.com/#Generating_and_Using_Your_Credentials/Working_with_AWS_Credentials/Generating_the_Required_AWS_Credentials/Generating_the_Required_AWS_Credentials.htm?Highlight=PassRole" target="_blank" rel="noopener">Generating the Required AWS Credentials</a></li></ul><p>作成したIAM UserのAccess key IDとSecret access keyを設定して「SAVE」をクリックします。<br><img src="/images/20201021/01_07_Credentials.jpg" alt=""></p><h3 id="REPLICATION-SETTINGS"><a href="#REPLICATION-SETTINGS" class="headerlink" title="REPLICATION SETTINGS"></a>REPLICATION SETTINGS</h3><p>ここでは、移行元環境と移行先環境の選択と、レプリケーションサーバーの設定を行います。</p><h4 id="Migration-Source"><a href="#Migration-Source" class="headerlink" title="Migration Source"></a>Migration Source</h4><p>移行元の環境を選択します。選択できる項目は大きく分けて以下の2種類です。</p><ul><li>Other Infrastructure</li><li>AWSのリージョン</li></ul><p><img src="/images/20201021/MigrationSource.png" alt=""></p><h5 id="Other-Infrastructureを選択した場合"><a href="#Other-Infrastructureを選択した場合" class="headerlink" title="Other Infrastructureを選択した場合"></a>Other Infrastructureを選択した場合</h5><p>AWSやオンプレミス環境、その他クラウド環境にあるサーバー単位の複製が可能です。</p><h5 id="AWSのリージョンを選択した場合"><a href="#AWSのリージョンを選択した場合" class="headerlink" title="AWSのリージョンを選択した場合"></a>AWSのリージョンを選択した場合</h5><p>選択されたAWS環境で定義されたVPCの設定が移行先のAWS環境へ複製されるようです。(本記事の対象外)</p><ul><li>参考: <a href="https://docs.cloudendure.com/#Defining_Your_Replication_Settings/Defining_Replication_Settings_for_AWS/Defining_Replication_Settings_for_AWS.htm#Defining_Your_Source_infrastructure%3FTocPath%3DNavigation%7CDefining%2520Your%2520Replication%2520Settings%7CDefining%2520Replication%2520Settings%2520for%2520AWS%7CDefining%2520Your%2520Source%2520infrastructure%7C_____0" target="_blank" rel="noopener">Defining Your Source infrastructure</a></li></ul><p>移行元がAWSであり、サーバーのみ移行したい場合は、「Other Infrastructure」を選択してください。</p><h4 id="Migration-Target"><a href="#Migration-Target" class="headerlink" title="Migration Target"></a>Migration Target</h4><p>移行先AWSのリージョンを選択します。<br><img src="/images/20201021/MigrationTarget.png" alt=""></p><h4 id="Replication-Servers"><a href="#Replication-Servers" class="headerlink" title="Replication Servers"></a>Replication Servers</h4><p>プロジェクト全体のレプリケーションサーバーの設定を行います。</p><p>※移行元のサーバー毎に設定も可能です。<br>　CloudEndureエージェントをインストールしてからとなる為、次回の記事で記載します。</p><p>設定する内容は、以下の通りです。</p><h5 id="Choose-the-Replication-Server-instance-type"><a href="#Choose-the-Replication-Server-instance-type" class="headerlink" title="Choose the Replication Server instance type"></a>Choose the Replication Server instance type</h5><p>レプリケーションサーバーのインスタンスタイプを設定します。Defaultを選択した場合は「t3.small」で起動されます。<br><img src="/images/20201021/Replication_Server_Type.png" alt=""></p><h5 id="Choose-the-Converter-instance-type"><a href="#Choose-the-Converter-instance-type" class="headerlink" title="Choose the Converter instance type"></a>Choose the Converter instance type</h5><p>コンバーターサーバーのインスタンスタイプを選択します。<br><img src="/images/20201021/Converter_Type.png" alt=""></p><p>コンバーターサーバーとは、ターゲットマシンを起動する際に、ディスクを変換する役割を持つサーバーで、ターゲットマシン起動時に一時的に起動されます。<br>ディスクの変換後、すぐにTerminateされます。</p><h5 id="Choose-if-each-source-machine-should-have-a-dedicated-Replication-Server"><a href="#Choose-if-each-source-machine-should-have-a-dedicated-Replication-Server" class="headerlink" title="Choose if each source machine should have a dedicated Replication Server"></a>Choose if each source machine should have a dedicated Replication Server</h5><p>移行元のサーバーごとに、専用のレプリケーションサーバーを起動する設定です。</p><p>レプリケーションサーバーは、1台で複数台の移行元サーバーからのデータを受け取ることが可能です。※移行元サーバーから送信されるデータ量に合わせてサーバーの台数は増減します。</p><p>チェックボックスをオンにした場合、移行元のサーバー台数ごとにレプリケーションサーバーが起動することになるため、コスト超過など注意が必要です。</p><h5 id="Choose-the-default-disk-type-to-be-used-by-the-Replication-Servers-SSD-disks-are-faster-HDD-disks-cost-less"><a href="#Choose-the-default-disk-type-to-be-used-by-the-Replication-Servers-SSD-disks-are-faster-HDD-disks-cost-less" class="headerlink" title="Choose the default disk type to be used by the Replication Servers (SSD disks are faster; HDD disks cost less"></a>Choose the default disk type to be used by the Replication Servers (SSD disks are faster; HDD disks cost less</h5><p>レプリケーションサーバーのディスクタイプを選設定します。<br>移行元サーバーにマウントされているディスクのサイズによって、ディスクタイプが自動で選択されます。<br><img src="/images/20201021/StagingDiskType.png" alt=""><br>「Use fast SSD data disks」を選択した場合<br>500 GiB 未満のディスクには マグネティックボリューム(standard)が選択され、500 GiB を超えるディスクには 汎用SSDボリューム(gp2)が選択されます。</p><p>「Use slower, lower cost standard disks」を選択した場合<br>500 GiB 未満のディスクには、マグネティックボリューム(standard)が選択され、500 GiB を超えるディスクには スループット最適化ボリューム(st1)が選択されます。</p><h5 id="Choose-the-subnet-where-the-Replication-Servers-will-be-launched"><a href="#Choose-the-subnet-where-the-Replication-Servers-will-be-launched" class="headerlink" title="Choose the subnet where the Replication Servers will be launched"></a>Choose the subnet where the Replication Servers will be launched</h5><p>レプリケーションサーバーの起動先サブネットを設定します。</p><p>通信要件を満たすサブネットを事前に作成しておいてください。<br>※サブネットの作成ができていない場合は、Defaultを選択し、サブネット作成後に変更してください。</p><h5 id="Choose-the-Security-Groups-to-apply-to-the-Replication-Servers"><a href="#Choose-the-Security-Groups-to-apply-to-the-Replication-Servers" class="headerlink" title="Choose the Security Groups to apply to the Replication Servers"></a>Choose the Security Groups to apply to the Replication Servers</h5><p>レプリケーションサーバーに設定するセキュリティグループを設定します。任意のセキュリティグループを選択可能ですが、特に制約がなければ、「Default CloudEndure Security Group」で良いです。</p><h5 id="Choose-how-data-is-sent-from-the-CloudEndure-Agent-to-the-Replication-Servers-※この項目はオプションです。"><a href="#Choose-how-data-is-sent-from-the-CloudEndure-Agent-to-the-Replication-Servers-※この項目はオプションです。" class="headerlink" title="Choose how data is sent from the CloudEndure Agent to the Replication Servers ※この項目はオプションです。"></a>Choose how data is sent from the CloudEndure Agent to the Replication Servers ※この項目はオプションです。</h5><p>CloudEndureエージェントからレプリケーションサーバーへのデータ送信方法を設定します。「Use VPN or DirectConnect (using a private IP)」チェックボックスをオンにした場合、PrivateIPアドレスを使用した通信となります。VPNやDirectConnect経由で通信を行う場合はチェックボックスをオンにしてください。<br><img src="/images/20201021/Use_VPN_or_DirectConnect_(using_a_private_IP).png" alt=""><br>また、PublicIPの無効化の設定が選択可能になります。要件に応じて設定してください。</p><h5 id="Define-whether-to-route-communication-from-the-Replication-Server-via-a-proxy-※この項目はオプションです。"><a href="#Define-whether-to-route-communication-from-the-Replication-Server-via-a-proxy-※この項目はオプションです。" class="headerlink" title="Define whether to route communication from the Replication Server via a proxy ※この項目はオプションです。"></a>Define whether to route communication from the Replication Server via a proxy ※この項目はオプションです。</h5><p>レプリケーションサーバーのプロキシを設定します。この設定はレプリケーションサーバーとCloudEndure Service Manager間の通信に適用されます。</p><h5 id="Enable-volume-encryption-※この項目はオプションです。"><a href="#Enable-volume-encryption-※この項目はオプションです。" class="headerlink" title="Enable volume encryption ※この項目はオプションです。"></a>Enable volume encryption ※この項目はオプションです。</h5><p>レプリケーションサーバーで使用するEBSの暗号化を設定します。</p><h5 id="Staging-Area-Tags-※この項目はオプションです。"><a href="#Staging-Area-Tags-※この項目はオプションです。" class="headerlink" title="Staging Area Tags ※この項目はオプションです。"></a>Staging Area Tags ※この項目はオプションです。</h5><p>CloudEndureによって作成されたリソースに付与するタグを設定します。</p><h5 id="Network-Bandwidth-Throttling-※この項目はオプションです。"><a href="#Network-Bandwidth-Throttling-※この項目はオプションです。" class="headerlink" title="Network Bandwidth Throttling ※この項目はオプションです。"></a>Network Bandwidth Throttling ※この項目はオプションです。</h5><p>移行元のサーバーからレプリケーションサーバーへデータを送信する際に使用する、ネットワークの帯域幅制限を設定します。</p><p>デフォルトでは、「Disabled」のチェックボックスがオンとなっています。チェックボックスを外すことで、TCPポート1500のトラフィックで使用する帯域幅を設定可能となります。<br><img src="/images/20201021/Network_Bandwidth_Throttling.png" alt=""><br>データ転送速度はMbpsで指定可能です。実施する環境に合わせて設定してください。</p><p>今回は、以下の図のように設定しました。<br>※後から変更も可能です。<br><img src="/images/20201021/ReplicationSettings%E5%AE%8C%E4%BA%86.png" alt=""></p><p>「SAVE REPLICATION SETTINGS」のボタンをクリックして、セットアップは完了です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>CloudEndureのセットアップは以上となります。<br>次回、CloudEndure Migrationを利用した移行を試していきます。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://docs.cloudendure.com/CloudEndure%20Documentation.htm" target="_blank" rel="noopener">CloudEndureDocumentation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。2020年1月中途入社、TIGの八巻です。&lt;/p&gt;
&lt;p&gt;現在、クラウドリフトのプロジェクトにて、オンプレミス環
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="移行ツール" scheme="https://future-architect.github.io/tags/%E7%A7%BB%E8%A1%8C%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
      <category term="CloudEndure" scheme="https://future-architect.github.io/tags/CloudEndure/"/>
    
  </entry>
  
  <entry>
    <title>ProxyとDockerと新人社員と時々わたし</title>
    <link href="https://future-architect.github.io/articles/20201020/"/>
    <id>https://future-architect.github.io/articles/20201020/</id>
    <published>2020-10-19T15:00:00.000Z</published>
    <updated>2020-10-26T05:17:34.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXチームの栗田です。</p><p>学生から社会人になると様々な環境の変化が起きてそれに適応していくのが大変なのが世の常ではありますが、現代社会の仕事において切っては切れないPC周りの設定も変わってきます。特に会社ではあらゆる驚異から大切な情報を守るために、家庭用PCとはまた異なるセキュリティが組まれていることが往々にしてあり、ITを生業とする会社であっても設定周りで苦労することがあります。</p><p>そこで、会社に入って設定される用語とその機能関係、そしてそれによって影響を受ける開発環境（特にDocker）について、簡単にまとめます。</p><p>ここでのキーワードは以下のとおりです。</p><ul><li>Proxy/プロキシ</li><li>Docker</li></ul><p>WSLとかVMwareとかは適宜読み替えてください。VPN接続しているようなマシンも、基本的に以下社内PCとします。</p><p>🚨Notification：今回の記事においては理解を促進するため平易な表現としていますが、必ずしもセキュリティの専門家による厳密な記事ではないことをご理解ください。</p><h1 id="社内NWとProxy"><a href="#社内NWとProxy" class="headerlink" title="社内NWとProxy"></a>社内NWとProxy</h1><p>会社の中では多くの人がPCをつかって外部インターネットにアクセスして仕事をしていますが、全員が直接外部に出ていくと社内のNW構造が社外から簡単に把握されやすくなってしまいます。<br>また、会社というのは特定の業務を行う集団ですので、アクセスする通信先にも偏りが出ていくことになりますが、例えば全員がある特定のWebサイトの情報を毎回すべて取得してくるのは時間的にも通信量的にも無駄です。</p><p>そのために利用するのがProxyサーバです。</p><p>Proxyサーバは社内から社外への接続を代理実行するサーバーです。社内のPCが外部インターネットへ接続しようとするとその通信内容をProxyサーバに渡し、Proxyサーバが代わりにその通信を行い、実行結果を社内のPCに返します。Proxyサーバによって社外から社内NWの様子を隠すことができますし、この通信結果をキャッシュしておくことで同じ通信が来たら外部へ通信することなくキャッシュした情報を返すことをします。</p><p>なお、Proxyサーバは製品によっては接続先や通信を制限したり、ウイルススキャンをしたりするなどできます。このProxyサーバが具体的にどこに設置されるかですが、それを説明するためにDMZとFirewallについて説明します。</p><h2 id="DMZ"><a href="#DMZ" class="headerlink" title="DMZ"></a>DMZ</h2><p>Proxyは社内から社外への通信を代理で担うものだと述べましたが、逆にいうと社外からの攻撃を受けやすい場所となります。そのため、万が一Proxyサーバが侵されたとしても社内NWを守るために、DMZ（De Minitalized Zone, 非武装地帯）という、外部との接続を許可する専用NWを設けます。DMZには公開DNSサーバや公開Webサーバが設置されますが、DMZを設置せずに社内外の通信を行うような設定は悪手です。</p><h2 id="Firewall"><a href="#Firewall" class="headerlink" title="Firewall"></a>Firewall</h2><p>ProxyはDMZにおいて運用すると述べましたが、社外/DMZ/社内のNWを分離するのがFirewallです。</p><p>“防火壁”を意味するFirewallですが、コンピュータセキュリティにおいて、予め設定したルールに基づき、通信の通してよいかブロックするかの処理をする機能のことです。組織においてはNWの分岐点にFirewallを配置することで、外部からの攻撃を阻止したり、組織内での不審な通信をブロックすることができます。社外/DMZ/社内の境界にFirewallを置くことで、安全に通信を行うことができるようになります。</p><h3 id="おまけ：専用機器としてのFirewallとOS付属のFirewall"><a href="#おまけ：専用機器としてのFirewallとOS付属のFirewall" class="headerlink" title="おまけ：専用機器としてのFirewallとOS付属のFirewall"></a>おまけ：専用機器としてのFirewallとOS付属のFirewall</h3><p>Firewallとしては社外からの攻撃を守ることはもちろんですが、OSにも”Firewall”という機能が存在します。</p><p>これは”PCの外からの防護壁”の役目を果たすもので、身近なものとしてはWindows Firewallかなと思います。このWindows Firewall、Windowsの通知などでたまに見かけるためFirewallのことをOSの機能とだけ認識されることもありますが、より広い概念になります。</p><p><img src="/images/20201020/firewall_overview.png" alt=""></p><h2 id="Proxyサーバの位置"><a href="#Proxyサーバの位置" class="headerlink" title="Proxyサーバの位置"></a>Proxyサーバの位置</h2><p>Proxy・DMZ・Firewallの位置関係を図示すると、次のようになります。</p><p><img src="/images/20201020/Proxy_DMZ_Firewall.png" alt=""></p><h2 id="社内PCのProxy設定"><a href="#社内PCのProxy設定" class="headerlink" title="社内PCのProxy設定"></a>社内PCのProxy設定</h2><p>社外への通信はすべてProxyサーバが行うことになりますが、そのため社内のPCはProxyサーバの情報を知らないと一切外部へ通信することができなくなります。そのために社内PCに対して行うのが「Proxyサーバの設定」です。単に「Proxy設定」などと呼ぶこともあります。</p><p>社内PCに対して「社外に対して通信するときはこのURL（あるいはIP）へ接続しろ」と教えることによって、我々は社外との通信を実現しています。</p><h1 id="Proxyの設定について"><a href="#Proxyの設定について" class="headerlink" title="Proxyの設定について"></a>Proxyの設定について</h1><p>Proxy設定ですが、これは本来であれば通信するアプリやソフトごとに設定する必要があります。</p><p>そのため、例えば <code>Git</code> や <code>pip</code> などを利用する際には個別にterminal上でProxy設定をして上げる必要があります。しかし、世の中にある多くのソフトは「システムのProxy設定を利用する」ような選択が存在し、OSに対してProxy設定をすると各ソフトが自動でその設定を読み込んでくれます。</p><p>Windows10やmacOSであればProxyサーバの設定をする項目があり、これがOSのProxy設定となります。このあたりの最低限のProxy設定について、通常は社内情報システム部門がPCをキッティングするときに設定するため、ブラウザでインターネット接続するくらいであれば社員は何も設定する必要はありません。開発をするなどする場合は、各自適切にProxyの設定をすることになります。</p><h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p>Proxy設定は扱うプログラムによって違い、アプリのウィンドウの特定の枠に入力したりterminalの環境変数として設定したりします。</p><p>そして環境変数で設定する場合もよく使われるのは <code>http_proxy</code> などですが、アプリによって環境変数名が少しずつ違い、大文字だったり小文字だったり途中で.（ドット）で分割されていたりしますので、使うプログラムによってよく確認する必要があります。</p><h2 id="Proxy設定の落とし穴"><a href="#Proxy設定の落とし穴" class="headerlink" title="Proxy設定の落とし穴"></a>Proxy設定の落とし穴</h2><p>こうして意気揚々と皆さんは社内PCにProxy設定をしましたが、ここに落とし穴があります。</p><p>ProxyはNW接続を伴うソフトウェアに対して有効になるため、例えば社内イントラや自分自身（localhostや127.0.0.1）であっても有効になります。社外への通信ではない場合はむしろProxyを通すべきではないので、除外設定を行います。</p><p>前述した「システムのProxy設定」には一緒に除外設定をできるため、やはり社内情報システム部門がキッティングしてくれており、普通にWebブラウザでアクセスする分には意識する必要がありません。</p><p>しかし、自分でProxy設定するプログラムを使う場合は、やはり自分で除外設定を行います。よく使うのは環境変数 <code>no_proxy</code>を利用するケースですが、こちらも使うプログラムによって大文字だったり小文字だったりしますので、やはり使うプログラムに合わせて適切に設定する必要があります。</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><code>git</code>や<code>pip</code>など外部との通信をするプログラムについては軒並みProxy設定をすれば事足りるのですが、意外と落とし穴なのがDockerです。<br>Dockerは社外と通信する場合と社内（というか自端末）で完結する場合の２つがあります。</p><h2 id="社外と通信するケース：Docker-imageのPull"><a href="#社外と通信するケース：Docker-imageのPull" class="headerlink" title="社外と通信するケース：Docker imageのPull"></a>社外と通信するケース：Docker imageのPull</h2><p>Dockerはイメージをインターネット上からPullしてきますので、Docker自体にProxy設定をする必要があります。<br>これがないと、Dockerイメージを用意できずそもそもDockerをstartできません。</p><p><img src="/images/20201020/Docker_pull.png" alt=""></p><h2 id="社内で通信するケース：自端末内で通信するケース"><a href="#社内で通信するケース：自端末内で通信するケース" class="headerlink" title="社内で通信するケース：自端末内で通信するケース"></a>社内で通信するケース：自端末内で通信するケース</h2><p>DockerイメージをpullしてDockerをstartできたら、外部インターネットや他のマシンとの通信を必要しない限り、原則自端末内で完結します。そのため、Docker内でProxyを設定する必要はないですし、ローカル環境とDocker環境で通信するときなどはむしろ <code>no_proxy</code> 設定をして上げる必要があります。</p><p>たまに新人さんで見かけるのが「とにもかくにもProxy設定だ！」ということでPJで使っている <code>docker-compose.yml</code> 内に独自にProxy設定した挙げ句localstackのリソース間で通信できません、などという悲しい事故がありますが、これも自端末内での通信なので、Proxy設定は必要ありません。</p><p><img src="/images/20201020/local_no_proxy.png" alt=""></p><h2 id="Docker上から社外と通信するケース：Docker上でDocker-pullやpip-install"><a href="#Docker上から社外と通信するケース：Docker上でDocker-pullやpip-install" class="headerlink" title="Docker上から社外と通信するケース：Docker上でDocker pullやpip install"></a>Docker上から社外と通信するケース：Docker上でDocker pullやpip install</h2><p>Docker上であっても社外と通信する場合は、Proxy設定は必要です。</p><h1 id="実際にProxyを設定する"><a href="#実際にProxyを設定する" class="headerlink" title="実際にProxyを設定する"></a>実際にProxyを設定する</h1><p>先にも述べたように、Proxyは使用するプログラムによって適宜設定が必要ですが、使う環境変数は比較的似通っています。ここではGoやPythonあるいはGitなど用途向けにterminal上で設定する場合と、Docker用に設定する場合の二つを説明します。</p><h2 id="ブラウザ（Chrome）の場合"><a href="#ブラウザ（Chrome）の場合" class="headerlink" title="ブラウザ（Chrome）の場合"></a>ブラウザ（Chrome）の場合</h2><p>ブラウザであれば、起動した段階でユーザー名とパスワードが聞かれます。ユーザー名とパスワードを入力すれば、Proxyサーバを経由して社外へ接続できます。</p><p><img src="/images/20201020/proxy_chrome_comment.png" alt=""></p><p>Chromeの場合はOSに設定されたプロキシ情報を自動で参照します。</p><p>Windows10の場合、「Windowsの設定」&gt;「ネットワークとインターネット」&gt;「プロキシ」を表示すると、手動プロキシの設定があります。Chromeはここに書いてあるProxyサーバの設定を使います。<br>ちなみに手動でProxyサーバの設定を変更した場合は、必ず下部の「保存」ボタンを押して変更を反映させてください。</p><p><img src="/images/20201020/proxy_windows10_comment.png" alt=""></p><p>ブラウザによってはOSで設定しているのと別のProxyサーバを使うこともできて、例えばFirefox Browser（少なくとも81.0.1）では、OS以外のProxyサーバを使う設定が行なえます。テストなどの都合によってブラウザでProxyサーバを使いたくない場合は、利用を検討ください。</p><p>大事なことなので繰り返しますが、ここで紹介した「Chromeの場合はOSのProxy設定」「Firefoxの場合はOSのProxy設定以外に別途Proxy設定可能」は、あくまでこれらのソフトに対しての設定です。</p><p>仮にChrome上でProxyサーバのユーザー名とパスワードを入力したとしても、それはChromeに対しての設定のみです。確かに他のソフトでも「OSのProxy設定を使う」ようにデフォルトで設定されていることがありますが、基本的には使用するソフトに応じて都度Proxy設定とユーザー名およびパスワードの入力を行う必要があります。</p><h2 id="コマンドプロンプト-terminal上での基本設定"><a href="#コマンドプロンプト-terminal上での基本設定" class="headerlink" title="コマンドプロンプト/terminal上での基本設定"></a>コマンドプロンプト/terminal上での基本設定</h2><p>開発するにあたってよく使われるのはWindowsであればコマンドプロンプト、WSLやMacであればterminalです。</p><p>なおWindowsの場合Powershellもよく使われますが、設定方法としてはコマンドプロンプトと同じなので読み替えてください。また、上記以外のterminalエミュレータソフトを使う場合、コマンドプロンプトに似たソフトか、terminalに似たソフトを使うかによって、適宜読み替えてください。</p><p>以降、Windowsの例とMac（含むWSL）の例として紹介します。</p><p>コマンドプロンプトあるいはterminal上でProxyを設定する場合、指定の環境変数に格納します。よく使われるのは以下の4種類です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 各環境変数に&lt;ProxyサーバURL&gt;:&lt;port番号&gt;を入れます</span></span><br><span class="line"><span class="comment"># ここではすべて同じ設定をする前提に、http_proxyの値を他の変数に代入する形にしています</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windowsの場合</span></span><br><span class="line"><span class="comment">## Windows/コマンドプロンプトで環境変数を設定する際はsetコマンドを使います</span></span><br><span class="line"><span class="comment">## ただしこれだとコマンドプロンプトを終了すると環境変数が消えてしまう&amp;コマンドプロンプト画面ごとに設定が必要になります</span></span><br><span class="line"><span class="comment">## コマンドプロンプト上で永続的に環境変数を有効にする場合は、 `set`ではなく`setx`コマンドを使います</span></span><br><span class="line"><span class="comment">## 以降ではsetコマンドの例で記載しますが、場合に応じてsetxを使い分けてください</span></span><br><span class="line"><span class="comment">## ちなみに、setxを使う場合、あいだの「=」が不要になります</span></span><br><span class="line"><span class="comment">## 新人さんは最初迷うかもしれませんが、setを使っている限りにおいてはコマンドプロンプトを起動しなおせば何度でも試せます</span></span><br><span class="line"><span class="comment">## 理解できたところでsetxで永続的な設定にしましょう</span></span><br><span class="line"><span class="comment">## </span></span><br><span class="line"><span class="comment">## なお、コマンドプロンプトの場合、一度設定した変数は%で挟むことで再利用できます。</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=http://proxy.example.com:8000</span><br><span class="line"><span class="built_in">set</span> https_proxy=%http_proxy%</span><br><span class="line"><span class="built_in">set</span> HTTP_PROXY=%http_proxy%</span><br><span class="line"><span class="built_in">set</span> HTTPS_PROXY=%http_proxy%</span><br><span class="line"><span class="comment">## setxを使う場合</span></span><br><span class="line"><span class="comment"># setx http_proxy http://proxy.example.com:8000</span></span><br><span class="line"><span class="comment"># setx https_proxy %http_proxy%</span></span><br><span class="line"><span class="comment"># setx HTTP_PROXY %http_proxy%</span></span><br><span class="line"><span class="comment"># setx HTTPS_PROXY %http_proxy%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Macの場合</span></span><br><span class="line"><span class="comment">## Mac/terminalで環境変数を設定する際はexportコマンドを使います</span></span><br><span class="line"><span class="comment">## やはりexportコマンドでの設定もそのterminalを終了すると消えてしまう&amp;terminalごとに設定が必要となります</span></span><br><span class="line"><span class="comment">## すべてのterminalで同じ設定を有効にするには、.bashrcや.bash_profile（ex. bashを使っている場合。zshであれば.zshrcなど）に記載します</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## なお、terminalの場合、一度設定した変数は$を変数の前につけることで再利用できます</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://proxy.example.com:8000</span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="variable">$http_proxy</span></span><br><span class="line"><span class="built_in">export</span> HTTP_PROXY=<span class="variable">$http_proxy</span></span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=<span class="variable">$http_proxy</span></span><br></pre></td></tr></table></figure><h3 id="補足：Windowsでsetxを使う場合について"><a href="#補足：Windowsでsetxを使う場合について" class="headerlink" title="補足：Windowsでsetxを使う場合について"></a>補足：Windowsでsetxを使う場合について</h3><p>Windowsで <code>setx</code> コマンドを使うと環境変数として永続的に有効になると説明しましたが、これはOSの環境変数として記録されるからです。</p><p>Windows10の場合、「コントロールパネル（カテゴリ表示）」&gt;「システムとセキュリティ」&gt;「システム」&gt;「システムの詳細設定」&gt;「詳細設定」タブの「環境変数」とすると、 <code>setx</code> コマンドで設定した環境変数が確認できます。</p><p>上記setxコマンドを使わずとも、ここから手動で設定をしてもOKです。</p><p><img src="/images/20201020/env_comment.png" alt=""></p><p>ここを見るとわかりますが、 <code>http_proxy</code>と<code>https_proxy</code>しかありません。</p><p>実はWindowsの場合、環境変数は大文字と小文字を区別しないという特徴があります。Windowsの環境変数でのみ使うと考えれば上述したコマンドプロンプト上での設定も重複していますが、WSLやMacを使ったときに設定を忘れると結局苦しむので、使い慣れるまでは大文字小文字の両方登録するものと覚えても差し支えないでしょう。</p><h3 id="他のプログラムの例"><a href="#他のプログラムの例" class="headerlink" title="他のプログラムの例"></a>他のプログラムの例</h3><p>他にも様々な指定方法があります。</p><p>ちなみにGitHubのようにHTTPS通信を必要とする場合、SSLの検証が必要となりますが、Proxyサーバなどの設定によってはこれができないことがあります。<br>これを回避するため、SSLの検証を無効化します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 簡単のため、先に定義したhttp_proxyを再利用しています</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitの場合</span></span><br><span class="line"><span class="comment">## Windows/Mac共通</span></span><br><span class="line">git config --global http.proxy <span class="variable">$http_proxy</span></span><br><span class="line">git config --global https.proxy <span class="variable">$http_proxy</span></span><br><span class="line">git config --global http.sslVerify <span class="literal">false</span> <span class="comment"># gitに使われるSSLの検証を無効化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FTPの場合</span></span><br><span class="line"><span class="comment">## Windowsの場合</span></span><br><span class="line"><span class="built_in">set</span> FTP_PROXY=%http_proxy%</span><br><span class="line"><span class="built_in">set</span> ftp_proxy=%http_proxy%</span><br><span class="line"><span class="comment">## Macの場合</span></span><br><span class="line"><span class="built_in">export</span> FTP_PROXY=<span class="variable">$http_proxy</span></span><br><span class="line"><span class="built_in">export</span> ftp_proxy=<span class="variable">$http_proxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nodeの場合</span></span><br><span class="line"><span class="comment">## Windows/Mac共通</span></span><br><span class="line">npm -g config <span class="built_in">set</span> strict-ssl <span class="literal">false</span> <span class="comment"># npmに使われるSSLの検証を無効化</span></span><br><span class="line"><span class="comment">## Windowsの場合</span></span><br><span class="line"><span class="built_in">set</span> NODE_TLS_REJECT_UNAUTHORIZED=0 <span class="comment"># Node.js上で動くアプリ自体の環境変数としてSSLの検証をパスさせる</span></span><br><span class="line"><span class="comment">## Macの場合</span></span><br><span class="line"><span class="built_in">export</span> NODE_TLS_REJECT_UNAUTHORIZED=0</span><br></pre></td></tr></table></figure><p>コマンドごとに個別に設定ファイルを書いたり、<br>実行時に指定することもできます</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gemで実行時にProxyを設定する場合</span></span><br><span class="line">gem install rails -r -p <span class="variable">$http_proxy</span></span><br></pre></td></tr></table></figure><h3 id="Proxyにユーザーパスワードがある場合"><a href="#Proxyにユーザーパスワードがある場合" class="headerlink" title="Proxyにユーザーパスワードがある場合"></a>Proxyにユーザーパスワードがある場合</h3><p>Proxyがユーザーとパスワードによる認証が必要な場合、環境変数の中にユーザーとパスワードを入れます。<br>以降は、こちらの例で説明します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境変数にユーザーとパスワードを入れます</span></span><br><span class="line"><span class="comment">## Windowsの場合</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=http://&lt;ユーザー名&gt;:&lt;パスワード&gt;@proxy.example.com:8000</span><br><span class="line"><span class="built_in">set</span> https_proxy=%http_proxy%</span><br><span class="line"><span class="built_in">set</span> HTTP_PROXY=%http_proxy%</span><br><span class="line"><span class="built_in">set</span> HTTPS_PROXY=%http_proxy%</span><br><span class="line"></span><br><span class="line"><span class="comment">## Macの場合</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://&lt;ユーザー名&gt;:&lt;パスワード&gt;@proxy.example.com:8000</span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="variable">$http_proxy</span></span><br><span class="line"><span class="built_in">export</span> HTTP_PROXY=<span class="variable">$http_proxy</span></span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=<span class="variable">$http_proxy</span></span><br></pre></td></tr></table></figure><h3 id="ユーザー名あるいはパスワードに特殊記号があるとき"><a href="#ユーザー名あるいはパスワードに特殊記号があるとき" class="headerlink" title="ユーザー名あるいはパスワードに特殊記号があるとき"></a>ユーザー名あるいはパスワードに特殊記号があるとき</h3><p>ユーザー名や、特にパスワードに特殊記号が入っている場合、このままでは動きません。このケースでは、パーセントエンコーディング（URLエンコーディング）を行います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例）ユーザー名/パスワードが kurita/p@sswordのとき</span></span><br><span class="line"><span class="comment"># @のURLエンコーディングは%40なので、次のようになります</span></span><br><span class="line"><span class="comment">## Windowsの場合</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=http://kurita:p%40ssword@proxy.example.com:8000</span><br><span class="line"><span class="comment"># 以下略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Macの場合</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://kurita:p%40ssword@proxy.example.com:8000</span><br><span class="line"><span class="comment"># 以下略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %40ではなく@を入れてしまうと、どこまでがパスワードかわかりません</span></span><br><span class="line"><span class="comment"># 悪い例）</span></span><br><span class="line"><span class="comment"># http_proxy=http://kurita:p@ssword@proxy.example.com:8000</span></span><br></pre></td></tr></table></figure><h3 id="ローカル通信でのProxy除外"><a href="#ローカル通信でのProxy除外" class="headerlink" title="ローカル通信でのProxy除外"></a>ローカル通信でのProxy除外</h3><p>自分自身、例えば <code>localhost</code> に対して <code>curl</code> をしたいときなどはproxyを使わないように設定します。<br>そのときは次のように設定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Windowsの場合</span></span><br><span class="line"><span class="built_in">set</span> no_proxy=localhost</span><br><span class="line"><span class="built_in">set</span> NO_PROXY=%no_proxy%</span><br><span class="line"></span><br><span class="line"><span class="comment">## Macの場合</span></span><br><span class="line"><span class="built_in">export</span> no_proxy=localhost</span><br><span class="line"><span class="built_in">export</span> NO_PROXY=<span class="variable">$no_proxy</span></span><br></pre></td></tr></table></figure><p>ちなみにCIDRやワイルドカード記法は使えないようなので、他のマシンを追加したい場合は一つずつ追加してください。大事なことは <code>どのドメインはProxyを経由しなくてはならないかをよく考えること</code> です。</p><h2 id="DockerにおけるProxy設定"><a href="#DockerにおけるProxy設定" class="headerlink" title="DockerにおけるProxy設定"></a>DockerにおけるProxy設定</h2><p>Docker for WindowsやDocker for Macでは、ターミナルにProxy設定があります。コンテナイメージをpullするときに必要になります。</p><p><img src="/images/20201020/image_(6).png" alt=""></p><h3 id="Docker-for-Macにおける注意点"><a href="#Docker-for-Macにおける注意点" class="headerlink" title="Docker for Macにおける注意点"></a>Docker for Macにおける注意点</h3><p>先程 <code>@などの特殊記号がある場合はURLエンコードしてProxyに含める</code> と述べましたが、<a href="https://github.com/docker/for-win/issues/369#issuecomment-392390823" target="_blank" rel="noopener">Docker for MacではURLエンコードが効きません（少なくともv19.03.13時点）</a>。</p><p>Docker for MacをProxy環境下で利用したい場合は、URLエンコードが不要なユーザー名とパスワードを使うか、一時的にProxyの外に出るか、あるいは次に示すようにdocker imageをファイルでやり取りするなどして対応する必要があります。</p><h3 id="Docker-saveとload"><a href="#Docker-saveとload" class="headerlink" title="Docker saveとload"></a>Docker saveとload</h3><p>dockerはイメージをファイルに出力して共有することができます。今回はsave/loadを紹介します。適当なdockerイメージをpullしたのち、それをファイルに出力して、再度取り込んでみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ここはDocker for Mac用の特殊対応を想定してMac環境に対するコマンド例を記載していますが、</span></span><br><span class="line"><span class="comment"># Windows環境でも同じはずなので、適宜読み替えてください</span></span><br><span class="line"><span class="comment"># 今回はlocalstack/localstack:0.11.5をサンプルとして、最初にdocker pullします</span></span><br><span class="line">docker pull localstack/localstack:0.11.5</span><br><span class="line"><span class="comment"># &gt; 0.11.5: Pulling from localstack/localstack</span></span><br><span class="line"><span class="comment"># &gt; bdcbb82ec212: Pull complete </span></span><br><span class="line"><span class="comment"># &gt; Digest: sha256:2740b5509173e0efbd509bdd949217f42c97e1ab1f5b354430fdf659c2b9a152</span></span><br><span class="line"><span class="comment"># &gt; Status: Downloaded newer image for localstack/localstack:0.11.5</span></span><br><span class="line"><span class="comment"># &gt; docker.io/localstack/localstack:0.11.5</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># &gt; REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</span></span><br><span class="line"><span class="comment"># &gt; localstack/localstack   0.11.5              e0eb37bb47b8        5 weeks ago         682MB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># saveを使ってdocker imageをファイル出力します</span></span><br><span class="line"><span class="comment"># イメージをそのままtarファイルにしますが、localstack/localstack:0.11.5の場合、720MBほどあります</span></span><br><span class="line">docker save localstack/localstack:0.11.5 -o localstack.0.11.5.tar</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># &gt; localstack.0.11.5.tar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># このあとにファイルからdocker imageを取り込みますが、そのために一度imageを削除します</span></span><br><span class="line">docker rmi e0eb37bb47b8                                          </span><br><span class="line"><span class="comment"># &gt; Untagged: localstack/localstack:0.11.5</span></span><br><span class="line"><span class="comment"># &gt; Deleted: sha256:e0eb37bb47b8526e2cbd860e643e8b47656d529c0168b8f43fff0eb5f7a577b6</span></span><br><span class="line"><span class="comment"># &gt; Deleted: sha256:18944735543f1604652717378abb7dd986534d7de46017fb87d928db521313cf</span></span><br><span class="line">docker images                                                    </span><br><span class="line"><span class="comment"># &gt; REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># loadを使ってimageを取り込みます</span></span><br><span class="line">docker load -i localstack.0.11.5.tar                             </span><br><span class="line"><span class="comment"># &gt; 18944735543f: Loading layer [==================================================&gt;]  722.3MB/722.3MB</span></span><br><span class="line"><span class="comment"># &gt; Loaded image: localstack/localstack:0.11.5</span></span><br><span class="line"><span class="comment"># &gt; docker images</span></span><br><span class="line"><span class="comment"># &gt; REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</span></span><br><span class="line"><span class="comment"># &gt; localstack/localstack   0.11.5              e0eb37bb47b8        5 weeks ago         682MB</span></span><br></pre></td></tr></table></figure><p>ファイルのサイズこそ大きいですが、確かにdocker imageをファイルを介してやり取りできます。たとえばProxy環境下でdocker pullできない人がいたとしても、開発時に使われる各種イメージは早々変わらないと考えると、このようにイメージをファイル共有するのも一つの手段となりえるかなと考えます。<br>なお、ここではdocker imageを対象とする場合としてsave/loadを使いましたが、containerを対象とする場合はexport/importを使います。export/importに関する説明については割愛しますが、必要に応じてお使いください。</p><h2 id="Dockerコンテナビルドする時"><a href="#Dockerコンテナビルドする時" class="headerlink" title="Dockerコンテナビルドする時"></a>Dockerコンテナビルドする時</h2><p>やはりProxy設定が必要で、このとき下記のようにbuild時のパラメータとして渡します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Windows/Mac共通</span></span><br><span class="line">docekr-compose build \</span><br><span class="line">  --build-arg HTTP_PROXY=http://&lt;user&gt;:&lt;pass&gt;@proxy.example.com:8000 \</span><br><span class="line">  --build-arg HTTPS_PROXY=http://&lt;user&gt;:&lt;pass&gt;@proxy.example.com:8000 \</span><br><span class="line">  --build-arg http_proxy=http://&lt;user&gt;:&lt;pass&gt;@proxy.example.com:8000 \</span><br><span class="line">  --build-arg https_proxy=http://&lt;user&gt;:&lt;pass&gt;@proxy.example.com:8000</span><br></pre></td></tr></table></figure><p>注意として、 <code>docker.yml</code> の <code>ENV</code> や <code>docker-compose.yaml</code> の <code>environment:</code> ブロックに記載することは推奨されません。</p><p>これはビルド時に利用したProxy設定がイメージに焼き込まれてしまい、コンテナ実行時にプロキシ設定が引き継がれてしまうからです。例えば会社固有のProxy設定や、ましてや認証情報が入ったイメージなどは配布してはいけません。</p><h2 id="おまけ：Dockerコンテナ間で通信したい場合"><a href="#おまけ：Dockerコンテナ間で通信したい場合" class="headerlink" title="おまけ：Dockerコンテナ間で通信したい場合"></a>おまけ：Dockerコンテナ間で通信したい場合</h2><p>例えばlocalstackで複数サービスを同時に立ち上げたとします。</p><p>このとき、ホストマシン➛localstackへの通信は <code>localhost:ポート番号</code> で良いのですが、localstack➛localstackでの通信ではこれではいけません。localstack上の <code>localhost:ポート番号</code> は、あくまで <code>localstack上のポート番号</code> であるからです。</p><p>一例ですが、 <code>docker network create examplenw</code> のようにnetworkを作って、 <code>docker run</code>時に同じnetworkに所属させます。そのNWに所属するコンテナは、例えば <code>http://[コンテナ名]:[port番号]</code> で接続できるようになります。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>慣れないと苦労するProxyではありますが、会社の情報を守るために大切なものであることに変わりはありません。用法用量を守ってうまく設定しながら素敵な開発ライフを送っていただければと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG/DXチームの栗田です。&lt;/p&gt;
&lt;p&gt;学生から社会人になると様々な環境の変化が起きてそれに適応していくの
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
      <category term="プロキシ" scheme="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/"/>
    
      <category term="Firewall" scheme="https://future-architect.github.io/tags/Firewall/"/>
    
      <category term="NW" scheme="https://future-architect.github.io/tags/NW/"/>
    
  </entry>
  
  <entry>
    <title>CEATEC 2020 ONLINE に参加します !!</title>
    <link href="https://future-architect.github.io/articles/20201015/"/>
    <id>https://future-architect.github.io/articles/20201015/</id>
    <published>2020-10-14T15:00:00.000Z</published>
    <updated>2020-10-15T01:14:57.474Z</updated>
    
    <content type="html"><![CDATA[<p>皆さんこんにちは、Strategic AI Groupの谷口敦です。<br>フューチャーは2020年10月20日(火)~23日(金)に開催される、<strong>CEATEC 2020 ONLINE</strong>にYDCと共同出展します。</p><p><img src="/images/20201015/c5c8aa92-d8a5-b46b-9776-ca5348d1bc9a.jpeg" alt=""><br><a href="https://www.ceatec.com/ja/" target="_blank" rel="noopener">https://www.ceatec.com/ja/</a></p><h1 id="CEATECとは"><a href="#CEATECとは" class="headerlink" title="CEATECとは"></a>CEATECとは</h1><p>CEATECは、毎年10月に開催されているアジア最大級の規模の国際展示会です。</p><p>【会期】    2020年10月20日(火)~23日(金)  ※ 会期以降もオンデマンドで出展を展開<br>【会場】    <a href="https://www.ceatec.com/ja/" target="_blank" rel="noopener">CEATEC 2020 ONLINE ページ</a></p><p>今年のCEATECは</p><blockquote><p>CEATEC 2020-Toward Society 5.0 with the New Normal （New Normal (ニューノーマル) 社会と共に歩むCEATEC）</p></blockquote><p>をスローガンに掲げ、ニューノーマルとは何かを考えて、共創していくための場として位置づけられています。</p><p>また、新型コロナウイルス感染症拡大リスクを考慮し、<strong>Web上でのオンライン開催</strong>となりました。<br>閲覧は無料ですが、入場登録が必要となります。</p><h1 id="主な展示内容"><a href="#主な展示内容" class="headerlink" title="主な展示内容"></a>主な展示内容</h1><p>フューチャーが提供する<strong>Future AI</strong>はAIとコンサルティングの専門知識を融合した、最先端AI活用コンサルティングサービスです。<br>ニューノーマルへの適応の必要性が高まる中、フューチャーでは深層学習等の先端AI技術を駆使し、業務効率や品質向上、新たな時代に向けたサービスや事業の創出に貢献しています。</p><p>フューチャーは<strong>美容・医療分野</strong>で実際に活用されている事例を紹介します。</p><h3 id="大手化粧品会社-オルビスと共同開発した顔画像によるパーソナル分析"><a href="#大手化粧品会社-オルビスと共同開発した顔画像によるパーソナル分析" class="headerlink" title="大手化粧品会社 オルビスと共同開発した顔画像によるパーソナル分析"></a>大手化粧品会社 オルビスと共同開発した顔画像によるパーソナル分析</h3><p>スマートフォンで顔写真を撮影するだけで、AIがパーソナルカラーの判定や、顔のパーツや比率に基づいたオルビス独自の16分類のフェイスプロポーション分析、似合う眉シミュレーションやお手入れ方法を提案します。(画像はAIアイブローシミュレーター)<br><img src="/images/20201015/image.png" alt=""><br>「AIアイブローシミュレーター」<br><a href="https://prtimes.jp/main/html/rd/p/000000419.000004374.html" target="_blank" rel="noopener">https://prtimes.jp/main/html/rd/p/000000419.000004374.html</a><br>「パーソナルカラー診断・プロポーション診断」<br><a href="https://prtimes.jp/main/html/rd/p/000000332.000004374.html" target="_blank" rel="noopener">https://prtimes.jp/main/html/rd/p/000000332.000004374.html</a></p><h3 id="アイトラッキングによる認知機能測定「MIRUDAKE」"><a href="#アイトラッキングによる認知機能測定「MIRUDAKE」" class="headerlink" title="アイトラッキングによる認知機能測定「MIRUDAKE」"></a>アイトラッキングによる認知機能測定「MIRUDAKE」</h3><p>大阪大学発のヘルスケアベンチャーAi Brain Science社とフューチャーで開発をした「MIRUDAKE」は科学的・医学的なバックボーンを持つ『アイトラッキング式 認知機能評価法』を採り入れた認知機能の評価ツールです。iPad Proに付属のカメラで視点を取得、わずか3分程度の簡単な検査をすることで、認知機能の客観的な評価が可能です。</p><p><img src="/images/20201015/image_2.png" alt=""><br><a href="http://www.ai-brainscience.co.jp/pdf/MIRUDAKE_Ai-BrainScience.pdf" target="_blank" rel="noopener">http://www.ai-brainscience.co.jp/pdf/MIRUDAKE_Ai-BrainScience.pdf</a></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>オンライン開催ですので、なかなかお越しになれない遠方のみなさまにも、業種業態を問わず様々なお客様に提供している<strong>Future AI</strong>をご紹介できればと思います!<br>詳細なご相談にお答えする<strong>専用チャットルーム</strong>も設けておりますので、是非お立ち寄りください！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;皆さんこんにちは、Strategic AI Groupの谷口敦です。&lt;br&gt;フューチャーは2020年10月20日(火)~23日(金)に開催される、&lt;strong&gt;CEATEC 2020 ONLINE&lt;/strong&gt;にYDCと共同出展します。&lt;/p&gt;
&lt;p&gt;&lt;img src
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Conference" scheme="https://future-architect.github.io/tags/Conference/"/>
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>2020年秋にVue.jsのアプリケーションを作るなら、押さえておきたい5つのポイント</title>
    <link href="https://future-architect.github.io/articles/20201013/"/>
    <id>https://future-architect.github.io/articles/20201013/</id>
    <published>2020-10-12T15:00:00.000Z</published>
    <updated>2020-10-14T07:34:31.684Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201013/top.png"><p>TIGの伊藤真彦です。</p><p>ここ最近はVue.jsでのフロントエンド開発を行っています。<br>ほぼ何もない状態からのスタート段階から始めたのですが、その際調査したことが学びになったので共有します。</p><p>※この記事は <strong>2020/10/13</strong> に執筆されました。<strong>調査日は2020/08/17～2020/09/01</strong> のため、バージョンなど当時と状況が異なるものがあります。この1ヶ月の間でも、alphaからbetaに変わったり、betaが取れたりと進化が速いです。</p><p>公式ライブラリのステータスはこちらもご参考ください。<br><a href="https://v3.vuejs.org/guide/migration/introduction.html#supporting-libraries" target="_blank" rel="noopener">https://v3.vuejs.org/guide/migration/introduction.html#supporting-libraries</a></p><h2 id="前提として押さえておきたい2点のポイント"><a href="#前提として押さえておきたい2点のポイント" class="headerlink" title="前提として押さえておきたい2点のポイント"></a>前提として押さえておきたい2点のポイント</h2><h3 id="環境構築はVue-CLI"><a href="#環境構築はVue-CLI" class="headerlink" title="環境構築はVue CLI"></a>環境構築はVue CLI</h3><p>フューチャーでは<a href="https://future-architect.github.io/typescript-guide/">仕事ですぐに使えるTypeScript</a>と題しまして、TypeScriptの概要から詳細な使い方までをドキュメントとしてまとめています。</p><p>基本的な使い方からテクニック、また各種アプリケーションの環境構築までこちらにまとめています。</p><p>上記<a href="https://future-architect.github.io/typescript-guide/">仕事ですぐに使えるTypeScript</a>に記載の通り、<br>Vue.jsのアプリケーションはVue CLIを使って構築する前提でこの記事を書いています。</p><h3 id="linterを導入する"><a href="#linterを導入する" class="headerlink" title="linterを導入する"></a>linterを導入する</h3><p>コード規約はeslintの設定として反映させています。逆に言うと各種規約はeslintの推奨設定に従っています、コード規約に迷う必要が無くなるのもメリットです。</p><p>eslintだけでなく、htmlテンプレート部分も指摘してくれる<a href="https://prettier.io/" target="_blank" rel="noopener">Prettier</a>も導入しています。コミット前に<code>npm run lint --fix</code>コマンドで書いた内容の成型を行う、もしくはVisual Studio Codeの拡張などにPrettierを組み込むことを推奨します。</p><h2 id="Vue-jsを使う上での検討ポイント3点"><a href="#Vue-jsを使う上での検討ポイント3点" class="headerlink" title="Vue.jsを使う上での検討ポイント3点"></a>Vue.jsを使う上での検討ポイント3点</h2><p>さてVue.jsでアプリケーションを作りましょう、となった際に検討するべきポイントがいくつかあります。</p><p>具体的には下記のようなポイントです。</p><ul><li>JavaScript or TypeScript</li><li>Vue2 or Vue3</li><li>コンポーネントのスタイル</li></ul><h2 id="JavaScript-or-TypeScript"><a href="#JavaScript-or-TypeScript" class="headerlink" title="JavaScript or TypeScript"></a>JavaScript or TypeScript</h2><p>TypeScriptを採用するメリットは<a href="https://future-architect.github.io/typescript-guide/preface.html#id3">TypeScriptを選んで開発すべき理由</a>の章に記載があります。JavaScriptへの習熟度が高く、一方TypeScriptの経験が無い、なおかつスケジュールが極端に厳しいなどの条件でない限りTypeScriptで良いかなと考えます。</p><p>現在はVue CLIコマンドを使ってアプリケーションを新規作成する際に、TypeScript前提の設定でアプリケーションを構築する選択が可能です。</p><p>逆に言うと少しでもJavaScriptで構築してしまうと移植作業が発生してしまうので、TypeScriptを使用する決断はなるべく初期に下すほうが良いでしょう。</p><h2 id="Vue2-or-Vue3"><a href="#Vue2-or-Vue3" class="headerlink" title="Vue2 or Vue3"></a>Vue2 or Vue3</h2><p>気持ちとしてはVue3にアップデートして最新構成で臨みたかったのですが、今回は断念しました。</p><p>アップデート自体は試しました。</p><p>Vue CLIを使っている場合、<code>vue add vue-next</code>コマンドでVue3の導入が可能です。徐々にVue3を動かすためのパッチ的プラグインが不要になってくるライブラリが増えてきており、<code>vue-cli-plugin-vue-next</code>のアンインストールを推奨されるようになっていました。<br><img src="/images/20201013/image.png" alt=""></p><p>断念した最大の理由は、メジャーなライブラリのバージョンがalpha版である事です。</p><p><img src="/images/20201013/image_2.png" alt=""></p><p>上記の状況からVue3はまだまだアーリーアダプトすぎる<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>印象です、コントリビュートするチャンスとも考えられますが…Vuetyfyレベルの有名かつ大規模なライブラリのVue3本格対応などが良い分水嶺になるかなと考えております。</p><p><a href="https://vuetifyjs.com/en/introduction/roadmap/" target="_blank" rel="noopener">Vuetifyのロードマップ</a>で目安となる時期が確認できます。</p><h2 id="コンポーネントのスタイル"><a href="#コンポーネントのスタイル" class="headerlink" title="コンポーネントのスタイル"></a>コンポーネントのスタイル</h2><p>この記事のメイントピックはここです、手がかりがない場合かなり迷うところです。</p><p>Vue.jsでの実装方法は、Vue.jsの登場当初のものより洗練された手法があります。裏を返すと同じことをする為の手法が複数あり、手法を探す際に迷う原因となる他、なんらかのサンプルコードを自分が採用したスタイルに翻訳するような手間が発生してしまいます。</p><p>またビギナーがその辺りの作法の違いを把握するのは難しく、古い情報を基にそのまま古い書き方で実装したり、TypeScriptで頑張りたいところをJavaScriptで仕上げてしまうような事件が実際に発生してしまいました。</p><p><img src="/images/20201013/%E7%84%A1%E9%A1%8C.png" alt=""></p><p>今回私のチームでは<a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a>を採用しました。<br><a href="https://class-component.vuejs.org/" target="_blank" rel="noopener">ドキュメント</a>にもある通り、<code>export default</code>の記述部分にクラス名を記載するようなスタイルです。</p><figure class="highlight html"><figcaption><span>sample.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"decrement"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Define the component in class-style</span></span></span><br><span class="line">@Component</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// Class properties will be component data</span></span></span><br><span class="line">  count = 0</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// Methods will be component methods</span></span></span><br><span class="line">  increment() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.count++</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.count--</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同じ事を素のVue.jsで書くとこのようなイメージです。<br>若干記述量が増えます、「,」などの記号の付け忘れに混乱する頻度も増えると思います。</p><figure class="highlight html"><figcaption><span>sample2.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"decrement"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"Counter"</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      count: 0,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++</span></span><br><span class="line">    &#125;,</span><br><span class="line">    decrement() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count--</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>そんな<a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a>ですが<br><a href="https://github.com/vuejs/rfcs/pull/17" target="_blank" rel="noopener">Vue3のRFCとしてはリジェクトされてしまいました</a></p><p>Vue3では<a href="https://github.com/vuejs/composition-api" target="_blank" rel="noopener">composition-api</a>がRFCとして扱われています。<br><a href="https://composition-api.vuejs.org/#summary" target="_blank" rel="noopener">ドキュメント</a>に記載のサンプルコードは以下のようなスタイルです。</p><figure class="highlight html"><figcaption><span>sample3.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span></span><br><span class="line">    Count is: &#123;&#123; state.count &#125;&#125;, double is: &#123;&#123; state.double &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive, computed &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  setup() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line">      count: 0,</span><br><span class="line"><span class="javascript">      double: computed(<span class="function"><span class="params">()</span> =&gt;</span> state.count * <span class="number">2</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使ってみたい気持ちはありますが、情報の充実度等も含め、今すぐ飛びつくにはVue3の導入と同じく早すぎる印象を受け採用を見送りました。</p><p>RFCからはリジェクトされてしまいましたが、<a href="https://github.com/vuejs/vue-class-component/issues/402" target="_blank" rel="noopener">vue-class-componentのVue3サポート</a>は間違いなく行われます。vue-class-componentを採用したが故にVue3へのアップデート時に大幅なリプレイスが必要となる事は恐らくないと思われます。</p><p>つまり結論としては<strong>vue-class-component or composition-api</strong>で好きなほうを使うと良いという話になります。個人的な趣味としては<a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a>の方が学習障壁は低めで分かりやすい印象を受けました。</p><p>この辺りの具体的な書き方も<a href="https://future-architect.github.io/typescript-guide/">仕事ですぐに使えるTypeScript</a>に盛り込んでいければと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>2020秋と題したのはそれだけ移り変わりが激しいという事ですが、少なくとも今は</p><ul><li>環境構築はVue CLI</li><li>linterを導入する</li></ul><p>の2点は当然として、</p><ul><li>TypeScript使おう</li><li>Vue3はまだ早い</li><li>細かい書き方は<a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a></li></ul><p>という構成で臨むことになりました。</p><p>冬～2021年前半戦辺りにはVue3を使ってみたいですね。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">記事の公開タイミングと調査日がズレていますが、2020/10/13時点ではvuesはbetaではないですし、routerもalphaではないです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201013/top.png&quot;&gt;

&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;ここ最近はVue.jsでのフロントエンド開発を行っています。&lt;br&gt;ほぼ何もない状態からのスタート段階から始めたのですが、その際調査したことが学びになったので共
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>GoCon仙台で発表してきました</title>
    <link href="https://future-architect.github.io/articles/20201011/"/>
    <id>https://future-architect.github.io/articles/20201011/</id>
    <published>2020-10-10T15:00:00.000Z</published>
    <updated>2020-10-12T00:19:21.437Z</updated>
    
    <content type="html"><![CDATA[<p>あいにくの天気でしたが、GoCon仙台で発表してきました。当初は2月予定だったのが状況が厳しいということで7月にずらして公開したが、それでも状況は好転しなかったので10月に延期、とスタッフの方々はいろいろ気を揉んで大変だったと思います。</p><p><img src="/images/20201011/IMG_20201010_075727_048.jpg" alt=""><br>初はやぶさ！</p><p><img src="/images/20201011/IMG_20201010_072858.jpg" alt=""><br>子供と見ていたシンカリオンに出てきて気になっていたチキン弁当！</p><p>福島までは行ったことがあったのですが、初の仙台です。この日は幼稚園の運動会が予定されており、子供の出場の合間にリモートで発表という可能性もあったのですが、天気のおかげで現地に行くことができました。また行きたいです。</p><p>GoCon仙台はある意味、新しい時代の礎となる勉強会だな、と感じました。このイベントそのものもそうですが、現在は大規模勉強会がなかなか開催できなくなっています。そんな中開催されたGoCon仙台は、オンラインとオフラインのハイブリッドイベントになりました。世間でオンラインのイベントも増えてきて、今後新型コロナウイルスの影響がない世の中になったとしても、今までのスタイルに戻るのではなく、このGoCon仙台スタイルになっていくと思います。僕の周りも家庭の用事やら、生まれたばかりの子供がいるとかで、参加が難しかった人たちも参加できました。一方で、オフラインでの交流も捨てがたいものがありますし。</p><p>ここ半年ぐらいで、オンライン勉強会はいろいろなツールが出てきて、レベルが上がってきています。ハイブリッド勉強会も、今後はいろいろなアイディアが加わって面白くなっていくんじゃないですかね？例えば、たんなるリモート勉強会とは違って、演台から客席を写して、客席の様子をスピーカーに見せたりしてもいいんじゃないかと思いました。オンライン発表者✖️オフライン受講者、オフライン発表者✖️オンライン受講者の相互なやりとりなど、まだまだ工夫の予知がありそうですし。</p><h1 id="Goでローコードプログラミング"><a href="#Goでローコードプログラミング" class="headerlink" title="Goでローコードプログラミング"></a>Goでローコードプログラミング</h1><p>発表資料はこちら。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQq5mZIeyvOn7jUJo_nLqidjXZfMI027xVMrpdrxJ5MTLBpX1uTINoLvb8dslmqlhmw9unwrRzmJ3LS/embed?start=false&loop=false&delayms=3000" frameborder="0" width="100%" height="569px"　allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>発表は、あまり誰もやったことないことをやろう、ということと、今までGoでみていたのとは全く違う世界を紹介したら良いのではないかということで、Go + Visual Programmingをとりあげようとしました。きっとtenntennさんがオーソドックスなGoの実用的な話をしてくれるんじゃないかと思いましたが、tenntennさんの内容も結構エッジが利いていたので、なかなか攻めたラインナップの発表になってしまいました。</p><p>なお、裏番組の伊藤さんの方が実用的な感じの内容でしたので、そことはバランスが取れていたと思います。現地会場でもオフライン部屋とオンライン視聴部屋は半々ぐらいだったんじゃないかな？</p><p>発表準備はなかなかトラブル続きで、最初に見つけたライブラリがメンテされてなくて動かず、途方にくれていたら、新しい別のライブラリがあるのに気づいて、なんとか今週、動作させるところまでいけました。本当はオブジェクトを作るだけではなくオリジナルノード作成までやりたかったのですが、それはどうもGodotではサポートされていないらしくできませんでしたが。</p><p>先週の<a href="https://future-architect.github.io/articles/20201002/">CNCF連載のBuildpacks</a>も前日までうまく動作せずにぎりぎりまで粘ってなんとかやりたかったゴールにたどり着きましたが、こちらも修羅場続きでした。仕事が多少余裕があったおかげで助かりました。</p><p>駄目だった場合は、<a href="https://developers.google.com/blockly" target="_blank" rel="noopener">Blocky</a>か<a href="https://github.com/retejs/rete" target="_blank" rel="noopener">rete.js</a>あたりで操作する何かを作ることも想定していたのですが、なんとかそこまではやらずに済みました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">うぉーそっちが気になります！</p>&mdash; tenntennʕ ◔ϖ◔ʔ ==Go (@tenntenn) <a href="https://twitter.com/tenntenn/status/1314763190694109187?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 10, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>Ebitenも2.0がそろそろ出るので、そうしたら上から下までGoで作ってみたさはあります。</p><h2 id="Goでビジュアルプログラミングは実用になるのか？"><a href="#Goでビジュアルプログラミングは実用になるのか？" class="headerlink" title="Goでビジュアルプログラミングは実用になるのか？"></a>Goでビジュアルプログラミングは実用になるのか？</h2><p>GodotそのものもHTTPやらWebSocketやらWebRTCには対応していたので、このSlack通信そのものはGodotでやった方が効率は良いとは思いますが、例えば、CRUDでSQLに変換して書き込むだけのシンプルなウェブAPIなんかは、結構この手のシステムいけるんじゃないかと思っていたりします。</p><p>あとはビルドスクリプトとかバッチ処理ですね。Aが終わったらB、Bが終わったらCみたいなタスクは意外と行ける気がします。紹介しなかったのですが、Godotにはオンラインゲームのサーバー用のヘッドレスGodotというものもあり、サーバーとかバッチで扱うのもできたりもします。結構、ぽこぽこノードを作っていけば案外実用になる気がします。ビルド時間もそこそこ短いですし。CSVとかParquetのファイルをDBに突っ込むとか、集計のSQL実行とか、そんなノードがあればさらに用途が広がりそうな気がします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;あいにくの天気でしたが、GoCon仙台で発表してきました。当初は2月予定だったのが状況が厳しいということで7月にずらして公開したが、それでも状況は好転しなかったので10月に延期、とスタッフの方々はいろいろ気を揉んで大変だったと思います。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>「Go on DockerスタイルでのバックエンドAPI構築」というテーマでGo Conference’20 in Autumn SENDAIに登壇しました</title>
    <link href="https://future-architect.github.io/articles/20201010/"/>
    <id>https://future-architect.github.io/articles/20201010/</id>
    <published>2020-10-09T15:00:00.000Z</published>
    <updated>2020-10-12T00:11:50.899Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です</p><p>先日<a href="https://sendai.gocon.jp/" target="_blank" rel="noopener">Go Conference’20 in Autumn SENDAI</a>に登壇させていただきました、リモート登壇の為残念ながら現地には行きませんでした。</p><p><img src="/images/20201010/image.png" alt=""></p><p>発表資料はこちらです。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vR3m62c-Q6szPVIml4qpn-t79ZW-NNw90LuhseLrRgYEBKyCo4JkCNALodajt9kJPEtX4Tk8XP2R5RI/embed?start=false&loop=false&delayms=10000" frameborder="0" width="100%" height="569px" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p><a href="https://www.youtube.com/watch?v=rHontd51R3A" target="_blank" rel="noopener">Youtubeのアーカイブ</a>としても確認いただけます</p><h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p>発表で紹介したコードを詳しく確認できるようにまとめます。</p><h3 id="goqueryについて"><a href="#goqueryについて" class="headerlink" title="goqueryについて"></a>goqueryについて</h3><p><img src="/images/20201010/image_2.png" alt=""></p><p>goqueryはjqueryを意識した命名から想像できる通り、Find等のメソッドチェーンを繋いで直感的にスクレイピングを行う事ができます。</p><p>ページURLを与えて読み取るだけでなく、別途htmlや文字列からスクレイピングを行う事も可能です。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrapeYahoo</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  items := []Item&#123;&#125;</span><br><span class="line">  doc, err := goquery.NewDocument(url)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">""</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  selection := doc.Find(<span class="string">"ul.Products__items"</span>).Find(<span class="string">"li.Product"</span>)</span><br><span class="line">  selection.Each(<span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">    url := s.Find(<span class="string">"div.Product__image"</span>).Find(<span class="string">"a"</span>).AttrOr(<span class="string">"href"</span>, <span class="string">""</span>)</span><br><span class="line">    name := s.Find(<span class="string">"h3.Product__title"</span>).Text()</span><br><span class="line">    price := s.Find(<span class="string">"span.Product__priceValue"</span>).First().Text()</span><br><span class="line">    image := s.Find(<span class="string">"div.Product__image"</span>).Find(<span class="string">"img"</span>).AttrOr(<span class="string">"src"</span>, <span class="string">""</span>)</span><br><span class="line">    item := Item&#123; Url: url, Name: name, Price: price, Image: image &#125;</span><br><span class="line">    items = <span class="built_in">append</span>(items, item)</span><br><span class="line">  &#125;)</span><br><span class="line">  json, _ := json.Marshal(items)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">string</span>(json)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="agoutiについて"><a href="#agoutiについて" class="headerlink" title="agoutiについて"></a>agoutiについて</h3><p><img src="/images/20201010/image_3.png" alt=""></p><p>agoutiはスクレイピングを行うための補助として用いましたが、–headlessオプションを使わなければ普段お使いのウェブブラウザが自動で動く様を実際に目で確認できます。</p><p>ブラウザでのルーチンワークの自動化など夢が広がりますね。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrapeReverb</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  items := []Item&#123;&#125;</span><br><span class="line">  driver := agouti.ChromeDriver(</span><br><span class="line">    agouti.ChromeOptions(<span class="string">"args"</span>, []<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">"--headless"</span>,</span><br><span class="line">        <span class="string">"--window-size=30,120"</span>,</span><br><span class="line">        <span class="string">"--disable-gpu"</span>,                        <span class="comment">// ref: https://developers.google.com/web/updates/2017/04/headless-chrome#cli</span></span><br><span class="line">        <span class="string">"no-sandbox"</span>,                           <span class="comment">// ref: https://github.com/theintern/intern/issues/878</span></span><br><span class="line">        <span class="string">"disable-dev-shm-usage"</span>,                <span class="comment">// ref: https://qiita.com/yoshi10321/items/8b7e6ed2c2c15c3344c6</span></span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  driver.Start()</span><br><span class="line">  <span class="keyword">defer</span> driver.Stop()</span><br><span class="line">  page, _ := driver.NewPage(agouti.Browser(<span class="string">"chrome"</span>))</span><br><span class="line">  page.Navigate(url)</span><br><span class="line">  <span class="comment">// 描画の完了を待機</span></span><br><span class="line">  time.Sleep(<span class="number">7</span> * time.Second)</span><br><span class="line">  content, _ := page.HTML()</span><br><span class="line">  reader := strings.NewReader(content)</span><br><span class="line">  doc, _ := goquery.NewDocumentFromReader(reader)</span><br><span class="line">  selection := doc.Find(<span class="string">"ul.tiles.tiles--four-wide-max"</span>).Find(<span class="string">"li.tiles__tile"</span>)</span><br><span class="line">  selection.Each(<span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">    url := s.Find(<span class="string">"a"</span>).AttrOr(<span class="string">"href"</span>, <span class="string">""</span>)</span><br><span class="line">    name := s.Find(<span class="string">"h4.grid-card__title, h3.csp-square-card__title"</span>).Text()</span><br><span class="line">    price := s.Find(<span class="string">"span.price-display, div.csp-square-card__details__price"</span>).Text()</span><br><span class="line">    image := s.Find(<span class="string">"img"</span>).AttrOr(<span class="string">"src"</span>, <span class="string">""</span>)</span><br><span class="line">    item := Item&#123; Url: url, Name: name, Price: price, Image: image &#125;</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">""</span> &#123;</span><br><span class="line">      items = <span class="built_in">append</span>(items, item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  json, _ := json.Marshal(items)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">string</span>(json)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dockerファイルについて"><a href="#Dockerファイルについて" class="headerlink" title="Dockerファイルについて"></a>Dockerファイルについて</h3><p>一人で作ったのと趣味なので動けばよしの精神があり、スライドでも書いた通り更に攻める余地があると認識しています。<br>マルチステージビルドの活用などのノウハウ共有が好意的な感想を頂けたので一安心です。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.12</span>-alpine as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache git</span></span><br><span class="line"><span class="keyword">ENV</span> GOBIN=/go/bin</span><br><span class="line"><span class="keyword">ENV</span> GO111MODULE=on</span><br><span class="line"><span class="keyword">ENV</span> GOPATH=</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./go.mod ./go.sum ./main.go ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod download</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> env GOOS=linux GOARCH=amd64 GIN_MODE=release go build -o /go-api</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.7</span>.<span class="number">0</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /myapp</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /go-api .</span></span><br><span class="line"><span class="comment"># install choromedriver</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --update \</span></span><br><span class="line"><span class="bash">    wget \</span></span><br><span class="line"><span class="bash">    udev \</span></span><br><span class="line"><span class="bash">    ttf-freefont \</span></span><br><span class="line"><span class="bash">    chromium \</span></span><br><span class="line"><span class="bash">    chromium-chromedriver \</span></span><br></pre></td></tr></table></figure><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>株式会社Fusic清家史郎様、株式会社Gunosy平田智子様にもフューチャー技術ブログの存在について触れて頂けました。</p><p>我らが渋川さん及び社員一同大喜びでした、ありがとうございます。</p><img src="/images/20201010/image_4.png" class="img-middle-size">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;https://sendai.gocon.jp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go Conference’20 in Autumn SENDAI&lt;/a&gt;に登壇させていただきました、
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>TiKVに触れる</title>
    <link href="https://future-architect.github.io/articles/20201005/"/>
    <id>https://future-architect.github.io/articles/20201005/</id>
    <published>2020-10-04T15:00:00.000Z</published>
    <updated>2020-10-05T01:34:08.029Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DXグループの伊藤真彦です。<br><a href="https://future-architect.github.io/articles/20200928/">CNCF連載</a>最終回として、TiKVについて調査してみました。</p><h2 id="TiKVとは"><a href="#TiKVとは" class="headerlink" title="TiKVとは"></a>TiKVとは</h2><img src="/images/20201005/image.png" class="img-small-size"><p>TiKVは分散型、トランザクション型Key-Valueデータベースです。最近Graduatedになったので他の記事と比べると有名どころを触っているかもしれません。</p><p>Tiは金属元素のチタンを意味します、KVはそのままKey-Valueですね。チタンのように強固なKey-Valueストアといったところでしょうか。</p><p>TiKVはGoogle SpannerとApache HBaseの影響を受けて開発されています、特に外部整合性のある分散トランザクションという意味での影響を受けています。</p><h2 id="TiKVの立ち位置"><a href="#TiKVの立ち位置" class="headerlink" title="TiKVの立ち位置"></a>TiKVの立ち位置</h2><p>TiKVはあくまでもKey-Valueストアであり、NewSQLなデータベース層として使われるものではありません。<br>そのような用途はTiDBが相当します。TiDBはTiKVをストレージレイヤーとして用いて、MySQLの互換性等の機能を備えたインターフェース層を搭載した分散DBです。</p><p>しかし、TiKV単体でもトランザクションや楽観的ロックをサポートしており、TiKVで実現可能なユースケースの範囲は広いです。歴史的な背景としては、元々TiDBのコンポーネントとして開発されていたものがTiKVです。別プロダクトとして切り出されるだけあって、競合するNewSQLにカテゴライズされるプロダクトと比較すると、TiDB、TiKV間の疎結合性が極めて高いところが特徴です。</p><p>TiKV自体はアーキテクチャ的にはFoundationDB等と、ユースケース的な観点でRedis等のプロダクトと比較対象にされることがあります。また、etcdがKubernetesの内部Key-Valueストアコンポーネントとして採用されている事を考慮に入れた上で何故TiKVを採用するのか、という側面でも説明ができます。</p><p>etcdは少量のメタデータストレージとして適したプロダクトである一方、TiKV は、ペタバイト規模の展開を視野に入れ他のCNCFプロダクトを補完するような存在として開発されています。</p><h2 id="TiKVのユースケース"><a href="#TiKVのユースケース" class="headerlink" title="TiKVのユースケース"></a>TiKVのユースケース</h2><p>TiKVはビッグデータの分散処理など大掛かりなシステムの他、ユーザーからのアップロードデータを保管するバケットや、キャッシュ、アプリケーションのメタデータの保存といったユースケースで採用されているようです。</p><p>残念ながらフューチャーでの採用事例は執筆時点ではありませんでした、触ってみたいですね。</p><h2 id="TiKVのインストール"><a href="#TiKVのインストール" class="headerlink" title="TiKVのインストール"></a>TiKVのインストール</h2><p>TiKVをkubernetesクラスタとして展開するためには<a href="https://tikv.org/docs/3.0/tasks/try/tikv-operator/" target="_blank" rel="noopener">Getting Started with TiKV Operator</a>が参考になります。</p><p>サーバー、コンテナへの直接のインストールは<a href="https://tikv.org/docs/4.0/tasks/deploy/binary/" target="_blank" rel="noopener">Binary Deployment</a>を参照してください。<br>また<a href="https://tikv.org/docs/4.0/tasks/deploy/docker/" target="_blank" rel="noopener">公式dockerイメージの使用</a>、<a href="https://tikv.org/docs/4.0/tasks/deploy/ansible/" target="_blank" rel="noopener">Ansibleでの構成管理</a>も可能です。</p><p>なおTiKV公式はAnsibleでの構築を強く推奨しています。触ってみた印象としては、Ansible以外の手段はドキュメントの充実度にも大きな差がありました。安定動作や何かあった時の原因追及の難易度を考えると、Ansibleでのインストールを行ったほうが良いでしょう。</p><h2 id="TiKVの使用方法"><a href="#TiKVの使用方法" class="headerlink" title="TiKVの使用方法"></a>TiKVの使用方法</h2><p>TiKVへのアクセスはAPIを通じて行われます。実態として各種言語でのクライアントライブラリを用いて使用することになるでしょう。</p><p><a href="https://github.com/tikv/client-go" target="_blank" rel="noopener">Go</a>や<a href="https://github.com/tikv/client-rust" target="_blank" rel="noopener">Rust</a>のクライアントが提供されているあたりがモダンな印象を強めますが、<a href="https://github.com/tikv/client-java" target="_blank" rel="noopener">Java</a>や<a href="https://github.com/tikv/client-c" target="_blank" rel="noopener">C</a>のクライアントも用意されています。一番コミットが活発なのはRustでしょうか…フロンティア精神を感じます。</p><p>Goのclientで動かしてみましたが、contextからの値の取得等でgrpcとの組み合わせを前提としたような挙動が見受けられ、フルスクラッチな独自アーキテクチャへの導入よりは、マイクロサービスのお作法に従って組み込むようなユースケースに向いている印象を受けました。元々TiDBのコンポーネントとして開発された背景からそのような作りになっていると思われます。</p><h2 id="実際に触ってみた"><a href="#実際に触ってみた" class="headerlink" title="実際に触ってみた"></a>実際に触ってみた</h2><p>今回は<a href="https://tikv.org/docs/4.0/tasks/try/docker-stack/" target="_blank" rel="noopener">ドキュメント</a>を基にdocker stackを構築します。</p><p>以下の環境で検証しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OS: ubuntu18.04</span><br><span class="line">Docker: 19.03.13</span><br></pre></td></tr></table></figure><p>Docker imageはlatestですが執筆時点では下記が最新のイメージでした。</p><p><a href="https://hub.docker.com/layers/pingcap/pd/latest/images/sha256-f2c79ee1a034aab77351ee2efee99d053868a6423684d8a3f37269b7d9a03d13?context=explore" target="_blank" rel="noopener">pingcap/pd: f2c79ee1a034aab77351ee2efee99d053868a6423684d8a3f37269b7d9a03d13</a><br><a href="https://hub.docker.com/layers/pingcap/tikv/latest/images/sha256-40f2484b613e17c2bfc61fd4fe7996a82e96eb7437a930f859761756788ceea5?context=explore" target="_blank" rel="noopener">pingcap/tikv: 40f2484b613e17c2bfc61fd4fe7996a82e96eb7437a930f859761756788ceea5</a></p><p>まずは必要なファイル3種を用意します。</p><figure class="highlight yml"><figcaption><span>stack.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.7"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">x-defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line">    <span class="attr">init:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./entrypoints:/entrypoints</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SLOT:</span> <span class="string">"<span class="template-variable">&#123;&#123;.Task.Slot&#125;&#125;</span>"</span></span><br><span class="line">        <span class="attr">NAME:</span> <span class="string">"<span class="template-variable">&#123;&#123;.Task.Name&#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">        <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">restart_policy:</span></span><br><span class="line">            <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">            <span class="attr">delay:</span> <span class="string">5s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">pd:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">pingcap/pd</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">"<span class="template-variable">&#123;&#123;.Task.Name&#125;&#125;</span>.tikv"</span></span><br><span class="line">        <span class="attr">init:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="attr">tikv:</span></span><br><span class="line">                <span class="attr">aliases:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">pd.tikv</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2379:2379"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2380:2380"</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">/entrypoints/pd.sh</span></span><br><span class="line">    <span class="attr">tikv:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">pingcap/tikv</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">"<span class="template-variable">&#123;&#123;.Task.Name&#125;&#125;</span>.tikv"</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="attr">tikv:</span></span><br><span class="line">                <span class="attr">aliases:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">tikv.tikv</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"20160:20160"</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">/entrypoints/tikv.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">tikv:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"tikv"</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">"overlay"</span></span><br><span class="line">        <span class="attr">attachable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>entrypoints/pd.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$SLOT</span> = 1 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">exec</span> ./pd-server \</span><br><span class="line">        --name <span class="variable">$NAME</span> \</span><br><span class="line">        --client-urls http://0.0.0.0:2379 \</span><br><span class="line">        --peer-urls http://0.0.0.0:2380 \</span><br><span class="line">        --advertise-client-urls http://`cat /etc/hostname`:2379 \</span><br><span class="line">        --advertise-peer-urls http://`cat /etc/hostname`:2380</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exec</span> ./pd-server \</span><br><span class="line">        --name <span class="variable">$NAME</span> \</span><br><span class="line">        --client-urls http://0.0.0.0:2379 \</span><br><span class="line">        --peer-urls http://0.0.0.0:2380 \</span><br><span class="line">        --advertise-client-urls http://`cat /etc/hostname`:2379 \</span><br><span class="line">        --advertise-peer-urls http://`cat /etc/hostname`:2380 \</span><br><span class="line">        --join http://pd.tikv:2379</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>entrypoints/tikv.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> ./tikv-server \</span><br><span class="line">    --addr 0.0.0.0:20160 \</span><br><span class="line">    --status-addr 0.0.0.0:20180 \</span><br><span class="line">    --advertise-addr `cat /etc/hostname`:20160 \</span><br><span class="line">    --pd-endpoints pd.tikv:2379</span><br></pre></td></tr></table></figure><p>ファイルを設置したら構築コマンド、起動コマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy --compose-file stack.yml tikv</span><br><span class="line">docker service scale tikv_pd=1 tikv_tikv=1</span><br></pre></td></tr></table></figure><p>curlで挙動を確認すると、立ち上がっていることが確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:2379/pd/api/v1/stores</span><br></pre></td></tr></table></figure><p><img src="/images/20201005/image_2.png" alt=""></p><p>dockerコマンドで簡単にスケーリングすることが可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale tikv_pd=3 tikv_tikv=3</span><br></pre></td></tr></table></figure><p>上記コマンドを実行するとコンテナがビルドされ、apiで確認できるインスタンスの数(count)が3になりました。</p><p><img src="/images/20201005/image_3.png" alt=""></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>TiKVの選定の参考となる資料、基本的なユースケース、導入方法をまとめてみました。</p><p>強いて欠点を上げると非常に低いレイテンシでの読み書きへの対応ができていない点が公式FAQにも書いてありますが、アーキテクチャがクリーンである点、完成度の高さでGraduatedに昇格するだけの魅力を持っているのかなと感じられました。</p><p>しかしながら公式ドキュメントやその他情報の充実度などの都合で使用難易度は高めな印象でした、この辺りはGuraduatedから日が浅い事を考えると仕方がないかなと感じる所です、個人的には今後ハウツー系記事が増えていくなど盛り上がっていくことを期待しています。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIG DXグループの伊藤真彦です。&lt;br&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200928/&quot;&gt;CNCF連載&lt;/a&gt;最終回として、TiKVについて調査してみました。&lt;/p&gt;
&lt;h2 id=&quot;TiKV
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="CloudNative" scheme="https://future-architect.github.io/tags/CloudNative/"/>
    
  </entry>
  
  <entry>
    <title>Buildpacksのビルダーをスクラッチから作ってみる</title>
    <link href="https://future-architect.github.io/articles/20201002/"/>
    <id>https://future-architect.github.io/articles/20201002/</id>
    <published>2020-10-01T15:00:00.000Z</published>
    <updated>2020-10-02T02:31:43.389Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201002/buildpacks-horizontal-color.png" alt=""></p><p>TIGの渋川です。</p><p><a href="https://future-architect.github.io/articles/20200928/">CNCF連載</a>の第4回は、CNCFのSandboxプロジェクトのBuildpacksについて紹介します。</p><ul><li><a href="https://buildpacks.io" target="_blank" rel="noopener">https://buildpacks.io</a></li></ul><h1 id="Buildpacksとは"><a href="#Buildpacksとは" class="headerlink" title="Buildpacksとは"></a>Buildpacksとは</h1><p>Herokuがオリジナルで作ったビルドツールです。HerokuのオリジナルはHerokuのプラットフォーム用のビルドツールだったと思いますが（使ったことはない）、CNCF版はコンテナイメージを作成します。オリジナル版とはいろいろ違いがあり、区別をつけるためにCloud Native Buildpacks（略してCNB）と呼称されているようです。</p><p>ツールの方針としては、ビルド設定ファイルのようなものを作らなくても（実行情報のみを書いたファイル、project.tomlは書ける）ソースコードを与えるだけで、Dockerfileなどを使わずにDockerimageが作れます。</p><p>使い方は簡単で、作業フォルダで次のコマンドでDockerイメージができてしまうのです。デフォルトで利用するビルダーはあらかじめ設定できるので、そうなるともっと短くコマンドを回せます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pack build [イメージ名] --builder [ビルダーイメージ名]</span><br></pre></td></tr></table></figure><p>BuildpacksはGCPのGoogle App Engine、Cloud Functions、Cloud Runのビルドでも使われているようです。</p><ul><li><a href="https://github.com/GoogleCloudPlatform/buildpacks" target="_blank" rel="noopener">https://github.com/GoogleCloudPlatform/buildpacks</a></li></ul><p>Cloud Functionsなどはランタイムの種類はオプションで設定しますが、本来はそういうことをしなくても、ソースコードを見てマッチするビルド方法を自分で探し出してイメージを作成できるポテンシャルはあります。</p><p>デフォルトで提供されているビルダーを使ってイメージを作るだけでは大した説明にならないので、いっそのこと自分のビルダーを作ってみようと思います。</p><h2 id="Buildpacksの構造"><a href="#Buildpacksの構造" class="headerlink" title="Buildpacksの構造"></a>Buildpacksの構造</h2><p>ユーザーがイメージ作成時に指定するのは「ビルダー」です。ビルダーにはBuildpackがいくつか含まれます。</p><p>Buildpackは、現在のワークフォルダが自分のタスクと関係あるのかを確認し(detect)、関係がある場合のみビルドを実行します。</p><p>その作業の土台になるのが「Stack」です。「Stack」は実行用のDockerイメージと、ビルド用のDockerイメージのペアです。普通に公開されているものではなく、少し手を加える必要があります。Dockerfileで作ってもいいです。GoogleはBazelを使っているようです。</p><p><img src="/images/20201002/Screen_Shot_2020-10-02_at_9.11.57.png" alt=""></p><p>ビルダーを作るにはこれらの構成要素を1つずつ作っていくことになります。</p><h2 id="物理配置"><a href="#物理配置" class="headerlink" title="物理配置"></a>物理配置</h2><p>なお、これは論理的な構成要素であって、実際はどれもDockerイメージです。Buildpackはファイルにしてビルダーイメージに含めることもできますが、それぞれのBuildpackをDockerイメージにしてもいけます（今回の作例は全部ファイル化しています）。最低限、Stackのイメージ2つとビルダーのイメージの3つのDockerイメージとなります。</p><p>ビルダーとStackは1:1ですが、BuildpackはどのStackに対しての適用するか、と設定ファイルに書きますが、複数のStackを指定できるので、ビルダーとBuildpackは1:Nではなく、N:Mとなり、distroless用、debian-slim用、debian用、alpine用などの複数のビルダーで共有できます。</p><p>ビルダーの設定ファイル内でのStackやBuildpackの指定時や、ビルド時のビルダーの指定はローカルのDockerにインストール済みのイメージでも良いですし、Docker HubやGCR、ECRなどのコンテナレジストリでもいけます。チーム内で共有するときはチームで共有するレジストリに入れてあげてもいいし、チームメンバーが各ローカルでビルドしても良いです。Dockerfileを配るか、アップロードしたイメージを使ってもらうか、というのと同じです。今回はすべてローカルでビルドして使っているのでコンテナレジストリにはpushしていません。</p><h2 id="実行イメージの構造"><a href="#実行イメージの構造" class="headerlink" title="実行イメージの構造"></a>実行イメージの構造</h2><p>Buildpacksを使って作った実行イメージですが、</p><ul><li><code>/workspace</code>というフォルダにアプリケーションのファイル一式（packコマンドを実行したときのカレントフォルダの内容）が格納される。</li><li><code>/layers/(Buildpack名)/</code>なフォルダにレイヤーが保存される。各Buildpackは自由にレイヤーを増やすことができる</li></ul><p>複数のBuildpackが検知して実行すると、複数のレイヤーが保存されると思われます。また、1つのBuildpackの中に複数の成果物（実行ファイル==タイプ）を含めることが可能ですが、実行できるコマンドは1つだけです。</p><p>これは、例えばフロントエンドをビルドしたファイルを入れて、PythonとかGoでAPIサーバーを起動して配信する、みたいなことが簡単にできますし、複数のバッチのプログラムが含まれるイメージを1つ作ってデプロイし、ECS Run Taskのオプションで起動するバッチを切り替える、みたいなことが簡単にできそうです。</p><h1 id="まずは空のビルダーを作る"><a href="#まずは空のビルダーを作る" class="headerlink" title="まずは空のビルダーを作る"></a>まずは空のビルダーを作る</h1><p>それではまずは空のビルダーを作ってみましょう。</p><h2 id="準備：Stackを決めてフォルダを作成"><a href="#準備：Stackを決めてフォルダを作成" class="headerlink" title="準備：Stackを決めてフォルダを作成"></a>準備：Stackを決めてフォルダを作成</h2><p>まずは実行とビルドのイメージを決定します。PythonのDebian系のイメージを使ってビルドをしてdistrolessを作成したいとします。</p><ul><li>実行: <code>gcr.io/distroless/python3</code></li><li>ビルド: <code>python:3.7-slim-buster</code></li></ul><p>設定ファイルにこの情報を書き込むのはビルダー作成時の前ですが、これを決めておかないとBuildpackも作成できないので、これを決めるのが最初になるでしょう。もう一つ、stackのIDを決めます。Javaのパッケージ名のような感じで、ユニーク性が担保できればなんでも良いのですが、ここでは次のようにしようと思います。</p><ul><li>ID: <code>io.github.future-architect.samples.debian</code> (なんでも良い)</li></ul><p>作業フォルダも作っておきます。正解は分からないですが、とりあえず次のようになる予定です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ buildpacks</span><br><span class="line">|  + (buildpackごとのフォルダ)</span><br><span class="line">|  |  + bin</span><br><span class="line">|  |  |  + build</span><br><span class="line">|  |  |  + detect</span><br><span class="line">|  |  + buildpack.toml</span><br><span class="line">|  + empty-package.toml</span><br><span class="line">+ images&#x2F;</span><br><span class="line">|  + Dockerfile.build</span><br><span class="line">|  + Dockerfile.run</span><br><span class="line">+ builder.toml</span><br></pre></td></tr></table></figure><h2 id="空のBuildpack"><a href="#空のBuildpack" class="headerlink" title="空のBuildpack"></a>空のBuildpack</h2><p>順番的にはまずはBuildpackです。既存のBuilderに対してオリジナルのBuildpackを適用することもできそうですが(stackを既存のものを指定して、pack build時に–buildpackで個別に読み込み)、理解のためにゼロから作ります。</p><p>buildpackの構成要素は4つ。bin/buildスクリプトと、bin/detectスクリプト、そしてtoml形式の設定ファイル（ファイル名は任意だが、ここではbuildpack.tomlとする）と、パッケージ化のためのtomlファイル（これもファイル名は任意だが、empty-package.tomlとする）。</p><p>detectとbuildはそれぞれ、bashスクリプトで作りました。実行イメージがDebianなんで、Pythonで書いても良いかもしれません。</p><figure class="highlight bash"><figcaption><span>buildpacks/empty/bin/detect</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Detecting Empty Buildpack"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>buildpacks/empty/bin/build</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Building Empty Buildpack"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Done"</span></span><br></pre></td></tr></table></figure><p>設定ファイルは次の通り。</p><figure class="highlight toml"><figcaption><span>buildpacks/empty/buildpack.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Buildpack API version</span></span><br><span class="line"><span class="attr">api</span> = <span class="string">"0.2"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[buildpack]</span></span><br><span class="line"><span class="attr">id</span> = <span class="string">"buildpacks/empty"</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">"0.0.1"</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"Empty Buildpack"</span></span><br><span class="line"><span class="attr">homepage</span> = <span class="string">"https://github.com/future-architect/"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[stacks]]</span></span><br><span class="line"><span class="attr">id</span> = <span class="string">"io.github.future-architect.samples.debian"</span></span><br></pre></td></tr></table></figure><p>パッケージのURLというのは、URLでもフォルダでも良いです。いまはローカルフォルダで作業しているので相対パスを書きます。</p><figure class="highlight toml"><figcaption><span>buildpacks/empty-package.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[buildpack]</span></span><br><span class="line"><span class="attr">uri</span> = <span class="string">"empty/"</span></span><br></pre></td></tr></table></figure><p>buildpackのパッケージ、.cnbファイルを作成します。ここではファイルに書き出していますが、DockerイメージにしてBuilderから利用させることもできるようです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pushd</span> buildpacks</span><br><span class="line">$ pack package-buildpack empty.cnb --config ./empty-package.toml --format file</span><br><span class="line">$ <span class="built_in">popd</span></span><br></pre></td></tr></table></figure><h2 id="イメージの作成"><a href="#イメージの作成" class="headerlink" title="イメージの作成"></a>イメージの作成</h2><p>Buildpackのstackは既存のDockerhubのイメージそのままではダメで、Stackの印をつける必要があります。<a href="https://buildpacks.io/docs/concepts/components/stack/" target="_blank" rel="noopener">ここ</a>に書かれているように、実行用イメージはラベルでstackのIDを、ビルド用のイメージは環境変数でstackのIDとユーザーとグループのIDを指定します。rootユーザーではエラーになるのでユーザーを作る必要があります。</p><figure class="highlight dockerfile"><figcaption><span>images/Dockerfile.run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> gcr.io/distroless/python3-debian10</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> io.buildpacks.stack.id=<span class="string">"io.github.future-architect.samples.debian"</span></span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><figcaption><span>images/Dockerfile.build</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim-buster</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> io.buildpacks.stack.id=<span class="string">"io.github.future-architect.samples.debian"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> addgroup --gid 1000 builder</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd -ms /bin/bash -u 1000 -g 1000 builder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home/builder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> CNB_STACK_ID=<span class="string">"io.github.future-architect.samples.debian"</span></span><br><span class="line"><span class="keyword">ENV</span> CNB_USER_ID=<span class="string">"1000"</span></span><br><span class="line"><span class="keyword">ENV</span> CNB_GROUP_ID=<span class="string">"1000"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pushd</span> images</span><br><span class="line">$ docker build -t distroless:python -f ./Dockerfile.run .</span><br><span class="line">$ docker build -t distroless:python-builder -f ./Dockerfile.build .</span><br><span class="line">$ <span class="built_in">popd</span></span><br></pre></td></tr></table></figure><h2 id="ビルダーの作成"><a href="#ビルダーの作成" class="headerlink" title="ビルダーの作成"></a>ビルダーの作成</h2><p>ようやくここまできました。といっても何もしないビルダーですが。builderはdockerイメージとして作成されて、dockerのイメージリストに格納されます。一度ビルダーを作成すれば、どのフォルダからも自由に利用できます。</p><figure class="highlight toml"><figcaption><span>builder.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Buildpacks to include in builder</span></span><br><span class="line"><span class="section">[[buildpacks]]</span></span><br><span class="line"><span class="attr">uri</span> = <span class="string">"buildpacks/empty.cnb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Order used for detection</span></span><br><span class="line"><span class="section">[[order]]</span></span><br><span class="line">  <span class="section">[[order.group]]</span></span><br><span class="line">  id = "buildpacks/empty"</span><br><span class="line">  version = "0.0.1"</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stack that will be used by the builder</span></span><br><span class="line"><span class="section">[stack]</span></span><br><span class="line"><span class="attr">id</span> = <span class="string">"io.github.future-architect.samples.debian"</span></span><br><span class="line"><span class="attr">run-image</span> = <span class="string">"distroless:python"</span></span><br><span class="line"><span class="attr">build-image</span> = <span class="string">"distroless:python-builder"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pack create-builder python:distroless --config ./builder.toml</span><br><span class="line">Downloading from https://github.com/buildpacks/lifecycle/releases/download/v0.9.1/lifecycle-v0.9.1+linux.x86-64.tgz</span><br><span class="line">5.2 MB/5.2 MB </span><br><span class="line">Successfully created builder image python:distroless</span><br><span class="line">Tip: Run pack build &lt;image-name&gt; --builder python:distroless to use this builder</span><br></pre></td></tr></table></figure><p>設定した名前のイメージができていることを確認します。日付はなぜか40年前。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">python                 distroless          b0ed12f6c423        40 years ago        125MB</span><br></pre></td></tr></table></figure><h2 id="試しに実行してみる"><a href="#試しに実行してみる" class="headerlink" title="試しに実行してみる"></a>試しに実行してみる</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">% pack build empty-sample --builder python:distroless</span><br><span class="line">0.9.1: Pulling from buildpacksio/lifecycle</span><br><span class="line">Digest: sha256:53bf0e18a734e0c4071aa39b950ed8841f82936e53fb2a0df56c6aa07f9c5023</span><br><span class="line">Status: Image is up to date <span class="keyword">for</span> buildpacksio/lifecycle:0.9.1</span><br><span class="line">===&gt; DETECTING</span><br><span class="line">[detector] buildpacks/empty  0.0.1</span><br><span class="line">===&gt; ANALYZING</span><br><span class="line">[analyzer] Previous image with name <span class="string">"index.docker.io/library/empty-sample:latest"</span> not found</span><br><span class="line">===&gt; RESTORING</span><br><span class="line">===&gt; BUILDING</span><br><span class="line">[builder] ---&gt; Building Empty Buildpack</span><br><span class="line">[builder] ---&gt; Done</span><br><span class="line">===&gt; EXPORTING</span><br><span class="line">[exporter] Adding 1/1 app layer(s)</span><br><span class="line">[exporter] Adding layer <span class="string">'launcher'</span></span><br><span class="line">[exporter] Adding layer <span class="string">'config'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.lifecycle.metadata'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.build.metadata'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.project.metadata'</span></span><br><span class="line">[exporter] Warning: default process <span class="built_in">type</span> <span class="string">'web'</span> not present <span class="keyword">in</span> list []</span><br><span class="line">[exporter] *** Images (dfe5b21636ef):</span><br><span class="line">[exporter]       index.docker.io/library/empty-sample:latest</span><br><span class="line">Successfully built image empty-sample</span><br></pre></td></tr></table></figure><p>dockerコマンドでビルド結果をみてみましょう。日付はいつも40年前です。中は空なのでほぼgcr.io/distroless/python3-debian10と同じはずですが、2.4MBほど大きくなっています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">empty-sample           latest              dfe5b21636ef        40 years ago        54.6MB</span><br></pre></td></tr></table></figure><h1 id="実用的なPythonのウェブアプリ用のbuildpackを作成する"><a href="#実用的なPythonのウェブアプリ用のbuildpackを作成する" class="headerlink" title="実用的なPythonのウェブアプリ用のbuildpackを作成する"></a>実用的なPythonのウェブアプリ用のbuildpackを作成する</h1><p>一通り骨格はできたので、次に中身を作っていきます。</p><p>buildpackに最初からついているpaketo-buildpacksですが、かなり細かくビルドのステップをbuildpackに分割しています。これから作るのは習作なので、とりあえず1つのbuildpackで全部やるようにします。</p><p><a href="https://github.com/paketo-buildpacks/go/blob/main/buildpack.toml" target="_blank" rel="noopener">https://github.com/paketo-buildpacks/go/blob/main/buildpack.toml</a></p><p>知っておくべき情報は、detect/buildに渡される引数です。それぞれ、パスです。レイヤーはbuildにしかありません。</p><ul><li>レイヤー: Dockerと似ている。ファイルのセット</li><li>プラットフォーム: 環境変数などのプラットフォーム</li><li>ビルド計画: detectとbuild間の情報伝達手段</li></ul><p>レイヤーが大切で、フォルダを作成してそこに結果を書き込みます。</p><p>レイヤーはフォルダで、buildpackごとに作られます。このPythonのものだとビルド用のbuster-slimなPythonのイメージの中でビルドされますが、それの中の<code>/layers/buildpacks_python</code>というフォルダがbuildスクリプトの最初の引数で渡ってきます。これがそのbuildpackが使うレイヤーの親です。この中にフォルダーを自由に作り、レイヤーとします。</p><p>Dockerは行志向のプログラムになっていて、その行のコンテキスト（ファイル）と、Dockerのコマンドが等しければキャッシュします。Buildpackは自分でキャッシュのチェックのロジックを組む必要があります。詳細は調べきれなかったので今回はキャッシュはしていません。</p><h2 id="Buildpack作成のイテレーション"><a href="#Buildpack作成のイテレーション" class="headerlink" title="Buildpack作成のイテレーション"></a>Buildpack作成のイテレーション</h2><p>最初に空のビルダーを作りましたが、これは実は大切なことです。emptyというbuildpackでなくても、最初から作りたいbuildpackを作ってやっても良いのですが、ベースとなるビルダーが構築済みだと、アプリケーションのビルド時にbuildpackを独自にうわがいて使うことができます。いちいちビルダーをビルドし直さなくてもすばやくアプリケーションコードとビルダーの両方の調整が行えます。やたらとレイヤー化だので、ステップをわけているせいで、何度もビルドを回すのが面倒なツールが世の中増えていますが、この開発を高速に回せる使い勝手はとても良いです。ビルドツールはたいてい面倒なことが多いので・・・</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% pack build webapp --builder python:distroless --buildpack ../buildpack/python</span><br></pre></td></tr></table></figure><h2 id="Python検知コード"><a href="#Python検知コード" class="headerlink" title="Python検知コード"></a>Python検知コード</h2><p>まずは検知コード。いつものrequirements.txtがあればPythonプロジェクトとみなします。検知した結果をビルドレイヤーに渡す場合は最後の引数にファイルを書き出すことによって実現できます。このサンプルはシンプルなまにしておきます。</p><figure class="highlight bash"><figcaption><span>buildpacks/python/bin/detect</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Detecting Python Buildpack"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -f requirements.txt ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Python Buildpack"</span></span><br></pre></td></tr></table></figure><h2 id="Pythonビルドコード"><a href="#Pythonビルドコード" class="headerlink" title="Pythonビルドコード"></a>Pythonビルドコード</h2><p>ビルドの方はやや複雑です。</p><p>今回はvenvで環境を作って、それをレイヤーとしました。</p><figure class="highlight bash"><figcaption><span>buildpacks/python/bin/build</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Building by Python Buildpack"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 入力引数</span></span><br><span class="line">env_dir=<span class="variable">$2</span>/env</span><br><span class="line">layers_dir=<span class="variable">$1</span></span><br><span class="line">plan_path=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$layers_dir</span></span><br><span class="line"></span><br><span class="line">venv_layer=<span class="string">"<span class="variable">$layers_dir</span>/venv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># venvレイヤー作成</span></span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">$layers_dir</span></span><br><span class="line">python -m venv venv</span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br><span class="line"><span class="built_in">popd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># インストールして出力先に指定</span></span><br><span class="line">pip install -r requirements.txt --<span class="built_in">disable</span>-pip-version-check</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"launch = true"</span> &gt; <span class="string">"<span class="variable">$venv_layer</span>.toml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 実行コマンド登録</span></span><br><span class="line">cat &gt;&gt; <span class="string">"<span class="variable">$&#123;layers_dir&#125;</span>/launch.toml"</span> &lt;&lt;EOL</span><br><span class="line">[[processes]]</span><br><span class="line"><span class="built_in">type</span> = <span class="string">"web"</span></span><br><span class="line"><span class="built_in">command</span> = <span class="string">"python"</span></span><br><span class="line">args = [<span class="string">"main.py"</span>, <span class="string">"<span class="variable">$&#123;venv_layer&#125;</span>"</span>]</span><br><span class="line">direct = <span class="literal">true</span></span><br><span class="line">EOL</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---&gt; Done"</span></span><br></pre></td></tr></table></figure><ul><li>まず、venvのレイヤー（自分のレイヤーのフォルダの下に作る）を作り、pip installしています</li><li>フォルダ名.tomlというファイルを作ってlaunch = trueにすると、成果物のフォルダに含まれるようになります。pip installしたファイルをイメージに入れるために作成しています。</li><li>ここでは<code>main.py</code>というファイルがあるものとして、それを実行するようにしています。実行ファイルの場所とレイヤーの場所は別のフォルダなので、引数でレイヤーのvenvのフォルダを教えるようにしました。</li></ul><p>buildpackごとにlaunch.tomlファイルを作ると、実行時のエントリーポイントとなります。typeをwebにするとデフォルトで実行されるコマンドになります。なお、distrolessは<a href="https://future-architect.github.io/articles/20200514/">シェルも何も入っていないストイックなイメージ</a>でしたね。その場合はdirect=trueにするとシェルを経由しなくなるのでdistrolessでもエラーにならなくなります。</p><p>ここではコマンドを決め打ちにしていますが、たとえばカレントフォルダにENTRYPOINTというテキストファイルを置いて、それの中を実行コマンドにする、みたいなことも自由にできます。</p><h2 id="アプリケーションコードの作成"><a href="#アプリケーションコードの作成" class="headerlink" title="アプリケーションコードの作成"></a>アプリケーションコードの作成</h2><p>それでは作ったビルダーを使ってStarletteアプリをビルドしてみます。作業フォルダを作り、まず検知に必要なrequirements.txtを作成します。作業フォルダはビルダーのフォルダとまったく別のフォルダで大丈夫です。</p><figure class="highlight plain"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">click&#x3D;&#x3D;7.1.2</span><br><span class="line">h11&#x3D;&#x3D;0.10.0</span><br><span class="line">starlette&#x3D;&#x3D;0.13.8</span><br><span class="line">uvicorn&#x3D;&#x3D;0.12.1</span><br></pre></td></tr></table></figure><p>次にアプリケーションコードです。</p><p>distrolessは<a href="https://future-architect.github.io/articles/20200514/">ライブラリの読み込み元が厳しく制約されているイメージ</a>でしたね。</p><p>Buildpacksは決まったフォルダにしかファイルを保存できません。レイヤーというフォルダを用意するのはできても、実行イメージのどこに置くかは介入できず、Buildpackが自分のルールで配置します。/rootのsite-packagesにどうしてもおきたい！というのは実現不可能です。</p><p>その後に検証したところ、siteパッケージの<code>site.addsitedir()</code>メソッドでフォルダを登録してあげれば、任意の場所からライブラリが読み込めることがわかりました。また、venvで作ったライブラリのフォルダも、別にvenvの環境に入る（activateする）ことなく、単にこの<code>addsitedir()</code>で利用できることがわかりましたので、これを使います。</p><p>最終的にできたのがこの実行ファイルです。</p><figure class="highlight py"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> site</span><br><span class="line"></span><br><span class="line">sp = os.path.join(sys.argv[<span class="number">1</span>], <span class="string">"lib"</span>, <span class="string">f"python<span class="subst">&#123;sys.version_info.major&#125;</span>.<span class="subst">&#123;sys.version_info.minor&#125;</span>"</span>, <span class="string">"site-packages"</span>)</span><br><span class="line">site.addsitedir(sp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> starlette.applications <span class="keyword">import</span> Starlette</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> PlainTextResponse</span><br><span class="line"><span class="keyword">from</span> starlette.routing <span class="keyword">import</span> Route</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">homepage</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> PlainTextResponse(<span class="string">"Homepage"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> PlainTextResponse(<span class="string">"About"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">routes = [</span><br><span class="line">    Route(<span class="string">"/"</span>, endpoint=homepage),</span><br><span class="line">    Route(<span class="string">"/about"</span>, endpoint=about),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app = Starlette(routes=routes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    uvicorn.run(<span class="string">"main:app"</span>, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8000</span>, log_level=<span class="string">"info"</span>)</span><br></pre></td></tr></table></figure><p>実用的には、uvicornworker.pyというファイル名だったら、これらの<code>site.addsitedir()</code>を呼び出す、みたいな環境差異吸収のところまでBuildpackを作り込んだ方がBuildpackの思想的には良い気がしました。</p><h2 id="アプリケーションをビルドしてみる"><a href="#アプリケーションをビルドしてみる" class="headerlink" title="アプリケーションをビルドしてみる"></a>アプリケーションをビルドしてみる</h2><p>emptyなBuildpackはもういらないので削除してしまっても良いでしょう。あとはこれでpackingして、再度ビルダーを構築します。</p><figure class="highlight toml"><figcaption><span>builder.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Buildpacks to include in builder</span></span><br><span class="line"><span class="section">[[buildpacks]]</span></span><br><span class="line"><span class="attr">uri</span> = <span class="string">"buildpacks/python.cnb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Order used for detection</span></span><br><span class="line"><span class="section">[[order]]</span></span><br><span class="line">  <span class="section">[[order.group]]</span></span><br><span class="line">  id = "buildpacks/python"</span><br><span class="line">  version = "0.0.1"</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stack that will be used by the builder</span></span><br><span class="line"><span class="section">[stack]</span></span><br><span class="line"><span class="attr">id</span> = <span class="string">"io.github.future-architect.samples.debian"</span></span><br><span class="line"><span class="attr">run-image</span> = <span class="string">"distroless:python"</span></span><br><span class="line"><span class="attr">build-image</span> = <span class="string">"distroless:python-builder"</span></span><br></pre></td></tr></table></figure><p>ビルダーの再作成が完了したらイメージを作成してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ pack build webapp --builder python:distroless</span><br><span class="line">0.9.1: Pulling from buildpacksio/lifecycle</span><br><span class="line">Digest: sha256:53bf0e18a734e0c4071aa39b950ed8841f82936e53fb2a0df56c6aa07f9c5023</span><br><span class="line">Status: Image is up to date <span class="keyword">for</span> buildpacksio/lifecycle:0.9.1</span><br><span class="line">===&gt; DETECTING</span><br><span class="line">[detector] buildpacks/python 0.0.1</span><br><span class="line">===&gt; ANALYZING</span><br><span class="line">[analyzer] Restoring metadata <span class="keyword">for</span> <span class="string">"buildpacks/python:venv"</span> from app image</span><br><span class="line">===&gt; RESTORING</span><br><span class="line">===&gt; BUILDING</span><br><span class="line">[builder] creating venv: /layers/buildpacks_python/venv</span><br><span class="line">[builder] /layers/buildpacks_python /workspace</span><br><span class="line">[builder] /workspace</span><br><span class="line">[builder] running pip install</span><br><span class="line">[builder] Collecting click==7.1.2</span><br><span class="line">[builder]   Downloading click-7.1.2-py2.py3-none-any.whl (82 kB)</span><br><span class="line">[builder] Collecting h11==0.10.0</span><br><span class="line">[builder]   Downloading h11-0.10.0-py2.py3-none-any.whl (53 kB)</span><br><span class="line">[builder] Collecting starlette==0.13.8</span><br><span class="line">[builder]   Downloading starlette-0.13.8-py3-none-any.whl (60 kB)</span><br><span class="line">[builder] Collecting uvicorn==0.12.1</span><br><span class="line">[builder]   Downloading uvicorn-0.12.1-py3-none-any.whl (44 kB)</span><br><span class="line">[builder] Collecting typing-extensions; python_version &lt; <span class="string">"3.8"</span></span><br><span class="line">[builder]   Downloading typing_extensions-3.7.4.3-py3-none-any.whl (22 kB)</span><br><span class="line">[builder] Installing collected packages: click, h11, starlette, typing-extensions, uvicorn</span><br><span class="line">[builder] Successfully installed click-7.1.2 h11-0.10.0 starlette-0.13.8 typing-extensions-3.7.4.3 uvicorn-0.12.1</span><br><span class="line">[builder] ---&gt; Python Buildpack Done</span><br><span class="line">===&gt; EXPORTING</span><br><span class="line">[exporter] Adding layer <span class="string">'buildpacks/python:venv'</span></span><br><span class="line">[exporter] Reusing 1/1 app layer(s)</span><br><span class="line">[exporter] Reusing layer <span class="string">'launcher'</span></span><br><span class="line">[exporter] Adding layer <span class="string">'config'</span></span><br><span class="line">[exporter] Reusing layer <span class="string">'process-types'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.lifecycle.metadata'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.build.metadata'</span></span><br><span class="line">[exporter] Adding label <span class="string">'io.buildpacks.project.metadata'</span></span><br><span class="line">[exporter] Setting default process <span class="built_in">type</span> <span class="string">'web'</span></span><br><span class="line">[exporter] *** Images (6cd718011277):</span><br><span class="line">[exporter]       index.docker.io/library/webapp:latest</span><br><span class="line">Successfully built image webapp</span><br></pre></td></tr></table></figure><p>きちんと実行もできました。めでたしめでたし。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it -p <span class="string">"8000:8000"</span> webapp                                     </span><br><span class="line">INFO:     Started server process [1]</span><br><span class="line">INFO:     Waiting <span class="keyword">for</span> application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br><span class="line">INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>デフォルトのdistroless向けのPythonのビルダーないじゃん、からはじまってBuildpackのビルダーを一通り作ってみました。</p><p>ドキュメントだと、既存のbuilderにbuildpackを足す、みたいな説明になっていました。builderはbuildpackの集合体、と見せつつ、buildpackをパッケージ化するにはビルダーが必要で、じゃあ新しい出力先Dockerイメージを指定したい場合、相互参照じゃん、と思いましたが、必要なのはIDだけだったので、ここで書いた通りの順番に取り組めばまったく新しいイメージファイルを使ったイメージが作りやすくなったかな、と思います。</p><p>ちなみに、これを書いた後に気づいたのですが、公式のチュートリアル、Pythonのbuildpackの作成だったんですね。</p><p><a href="https://buildpacks.io/docs/reference/spec/buildpack-api/" target="_blank" rel="noopener">https://buildpacks.io/docs/reference/spec/buildpack-api/</a></p><p>まあ、スタックのイメージの作成とかも含めて、まるっとビルダーを作る説明は公式を読んでも情報がたりず、ソースコードを解析しながら試したりもしました。現時点で世界で一番詳しいガイドになっているんじゃないかと思います。</p><p>今回はシェルスクリプトを使いましたが、公式のbuildpackはGoで書かれたものもあります。後から、せっかくならPythonあたりで書いてもよかったな、と思いました。いろいろ大掛かりで複雑に見えますが、引数で渡されたフォルダの中に成果物を置いて、設定ファイルを書き出すだけなので、ビルド用イメージで使える言語であれば問題なく利用できるはず。</p><p>アドバンスな使い方というと、キャッシュ周り、または公式のbuildpackのように、複数のbuildpackが連携してアーティファクトを作る、みたいな多段構成あたりですね。そのうち書くかもしれません。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201002/buildpacks-horizontal-color.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;TIGの渋川です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/a
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
      <category term="Buildpacks" scheme="https://future-architect.github.io/tags/Buildpacks/"/>
    
  </entry>
  
  <entry>
    <title>Linkerdで始めるサービスメッシュ</title>
    <link href="https://future-architect.github.io/articles/20201001/"/>
    <id>https://future-architect.github.io/articles/20201001/</id>
    <published>2020-09-30T15:00:00.000Z</published>
    <updated>2020-10-01T00:43:09.888Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201001/linkerd.png" alt=""></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの<a href="https://twitter.com/famipapamart" target="_blank" rel="noopener">村田</a>です。<a href="https://future-architect.github.io/articles/20200928/">CNCF連載</a>の第3回はLinkerdについて書いていきます。</p><h1 id="Linkerdとは"><a href="#Linkerdとは" class="headerlink" title="Linkerdとは"></a>Linkerdとは</h1><p>LinkerdはCNCFのIncubating projectsに所属しているサービスメッシュプロダクトです。Twitter社における大規模なマイクロサービス運用の知見をもとに作られたという誕生エピソードが以下のブログで語られています。</p><p><a href="https://linkerd.io/2016/02/18/linkerd-twitter-style-operability-for-microservices/" target="_blank" rel="noopener">Linkerd: Twitter-style Operability for Microservices</a></p><p>超軽量であることが特徴で、Podにinjectされるsidecar proxyはRustで実装されています。また、zero configでアプリのソースコードを全くいじることなく簡単に動作させることが可能です。</p><h1 id="Linkerdを使ってみる"><a href="#Linkerdを使ってみる" class="headerlink" title="Linkerdを使ってみる"></a>Linkerdを使ってみる</h1><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl version --short</span><br><span class="line">Client Version: v1.16.6-beta.0</span><br><span class="line">Server Version: v1.15.12-gke.20</span><br></pre></td></tr></table></figure><p>今回はGKEを使います。</p><blockquote><p>we need to ensure you have access to a Kubernetes cluster running 1.13 or later</p></blockquote><p>Linkerdを使う際にはKubernetesは1.13以上である必要があるとのことですが問題なさそうですね。</p><h2 id="Linkerd-CLIのインストール"><a href="#Linkerd-CLIのインストール" class="headerlink" title="Linkerd CLIのインストール"></a>Linkerd CLIのインストール</h2><p>Mac(macOS Mojave バージョン10.14.6)を利用しているので、 <code>brew</code> でインストールしました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew install linkerd</span><br><span class="line">$ linkerd version</span><br><span class="line">Client version: stable-2.8.1</span><br><span class="line">Server version: unavailable</span><br></pre></td></tr></table></figure><h2 id="クラスタの事前チェック"><a href="#クラスタの事前チェック" class="headerlink" title="クラスタの事前チェック"></a>クラスタの事前チェック</h2><blockquote><p>To ensure that the control plane will install correctly, the Linkerd CLI can check and validate that everything is configured correctly.</p></blockquote><p>Linkerd CLIを利用して事前にインストールの準備が完了しているか確認することができるようです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ linkerd check --pre</span><br><span class="line">kubernetes-api</span><br><span class="line">--------------</span><br><span class="line">√ can initialize the client</span><br><span class="line">√ can query the Kubernetes API</span><br><span class="line"></span><br><span class="line">kubernetes-version</span><br><span class="line">------------------</span><br><span class="line">√ is running the minimum Kubernetes API version</span><br><span class="line">√ is running the minimum kubectl version</span><br><span class="line"></span><br><span class="line">pre-kubernetes-setup</span><br><span class="line">--------------------</span><br><span class="line">√ control plane namespace does not already exist</span><br><span class="line">√ can create non-namespaced resources</span><br><span class="line">√ can create ServiceAccounts</span><br><span class="line">√ can create Services</span><br><span class="line">√ can create Deployments</span><br><span class="line">√ can create CronJobs</span><br><span class="line">√ can create ConfigMaps</span><br><span class="line">√ can create Secrets</span><br><span class="line">√ can <span class="built_in">read</span> Secrets</span><br><span class="line">√ can <span class="built_in">read</span> extension-apiserver-authentication configmap</span><br><span class="line">√ no clock skew detected</span><br><span class="line"></span><br><span class="line">pre-kubernetes-capability</span><br><span class="line">-------------------------</span><br><span class="line">√ has NET_ADMIN capability</span><br><span class="line">√ has NET_RAW capability</span><br><span class="line"></span><br><span class="line">linkerd-version</span><br><span class="line">---------------</span><br><span class="line">√ can determine the latest version</span><br><span class="line">√ cli is up-to-date</span><br><span class="line"></span><br><span class="line">Status check results are √</span><br></pre></td></tr></table></figure><p>結構丁寧にチェックされている印象です。前述した互換性のあるKubernetesバージョン等についてもこのコマンドでチェックできるので、インストール時は常に実施しておくのが良いでしょう。</p><h2 id="LinkerdをKubernetesクラスタへインストール"><a href="#LinkerdをKubernetesクラスタへインストール" class="headerlink" title="LinkerdをKubernetesクラスタへインストール"></a>LinkerdをKubernetesクラスタへインストール</h2><p>Linkerdインストール時に利用されるmanifestは以下のコマンドで作成されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ linkerd install</span><br><span class="line">---</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### Linkerd Namespace</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line">---</span><br><span class="line">kind: Namespace</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: linkerd</span><br><span class="line">  annotations:</span><br><span class="line">    linkerd.io/inject: disabled</span><br><span class="line">  labels:</span><br><span class="line">    linkerd.io/is-control-plane: <span class="string">"true"</span></span><br><span class="line">    config.linkerd.io/admission-webhooks: disabled</span><br><span class="line">    linkerd.io/control-plane-ns: linkerd</span><br><span class="line">...</span><br><span class="line">(中略)</span><br><span class="line">...</span><br><span class="line">      - configMap:</span><br><span class="line">          items:</span><br><span class="line">          - key: grafana.ini</span><br><span class="line">            path: grafana.ini</span><br><span class="line">          - key: datasources.yaml</span><br><span class="line">            path: provisioning/datasources/datasources.yaml</span><br><span class="line">          - key: dashboards.yaml</span><br><span class="line">            path: provisioning/dashboards/dashboards.yaml</span><br><span class="line">          name: linkerd-grafana-config</span><br><span class="line">        name: grafana-config</span><br><span class="line">      - emptyDir:</span><br><span class="line">          medium: Memory</span><br><span class="line">        name: linkerd-identity-end-entity</span><br></pre></td></tr></table></figure><p>筆者の手元では3,160行のmanifestが出力されました。これをapplyしていきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ linkerd install | kubectl apply -f -</span><br></pre></td></tr></table></figure><p>Linkerdのインストール状況をチェックできるコマンドが以下です。インストールコンポーネントが多いので、こういったステータスチェック用のコマンドが用意されているのはありがたい＆安心感があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$ linkerd check                                                                                                                                                      </span><br><span class="line">kubernetes-api                                                                                                                                                                    </span><br><span class="line">--------------                              </span><br><span class="line">√ can initialize the client            </span><br><span class="line">√ can query the Kubernetes API                                                                                                                                                    </span><br><span class="line">                                                                                         </span><br><span class="line">kubernetes-version                                                                       </span><br><span class="line">------------------                                                                       </span><br><span class="line">√ is running the minimum Kubernetes API version                                          </span><br><span class="line">√ is running the minimum kubectl version    </span><br><span class="line">                                                                                         </span><br><span class="line">linkerd-existence                                                                        </span><br><span class="line">-----------------                                                                        </span><br><span class="line">√ <span class="string">'linkerd-config'</span> config map exists                                                     </span><br><span class="line">√ heartbeat ServiceAccount exist                                                         </span><br><span class="line">√ control plane replica sets are ready                                                   </span><br><span class="line">√ no unschedulable pods                                                                  </span><br><span class="line">√ controller pod is running                                                              </span><br><span class="line">√ can initialize the client              </span><br><span class="line">√ can query the control plane API                                                        </span><br><span class="line">                                                                                         </span><br><span class="line">linkerd-config                            </span><br><span class="line">--------------                                                                           </span><br><span class="line">√ control plane Namespace exists                                                         </span><br><span class="line">√ control plane ClusterRoles exist      </span><br><span class="line">√ control plane ClusterRoleBindings exist                                                </span><br><span class="line">√ control plane ServiceAccounts exist                                                    </span><br><span class="line">√ control plane CustomResourceDefinitions exist                                          </span><br><span class="line">√ control plane MutatingWebhookConfigurations exist                                      </span><br><span class="line">√ control plane ValidatingWebhookConfigurations exist                                    </span><br><span class="line">√ control plane PodSecurityPolicies exist      </span><br><span class="line">√ control plane PodSecurityPolicies exist</span><br><span class="line"></span><br><span class="line">linkerd-identity</span><br><span class="line">----------------</span><br><span class="line">√ certificate config is valid</span><br><span class="line">√ trust anchors are using supported crypto algorithm</span><br><span class="line">√ trust anchors are within their validity period</span><br><span class="line">√ trust anchors are valid <span class="keyword">for</span> at least 60 days</span><br><span class="line">√ issuer cert is using supported crypto algorithm</span><br><span class="line">√ issuer cert is within its validity period</span><br><span class="line">√ issuer cert is valid <span class="keyword">for</span> at least 60 days</span><br><span class="line">√ issuer cert is issued by the trust anchor</span><br><span class="line"></span><br><span class="line">linkerd-api</span><br><span class="line">-----------</span><br><span class="line">√ control plane pods are ready</span><br><span class="line">√ control plane self-check</span><br><span class="line">√ [kubernetes] control plane can talk to Kubernetes</span><br><span class="line">√ [prometheus] control plane can talk to Prometheus</span><br><span class="line">√ tap api service is running</span><br><span class="line"></span><br><span class="line">linkerd-version</span><br><span class="line">---------------</span><br><span class="line">√ can determine the latest version</span><br><span class="line">√ cli is up-to-date</span><br><span class="line"></span><br><span class="line">control-plane-version</span><br><span class="line">---------------------</span><br><span class="line">√ control plane is up-to-date</span><br><span class="line">√ control plane and cli versions match</span><br><span class="line"></span><br><span class="line">linkerd-addons</span><br><span class="line">--------------</span><br><span class="line">√ <span class="string">'linkerd-config-addons'</span> config map exists</span><br><span class="line"></span><br><span class="line">linkerd-grafana</span><br><span class="line">---------------</span><br><span class="line">√ grafana add-on service account exists</span><br><span class="line">√ grafana add-on config map exists</span><br><span class="line">√ grafana pod is running</span><br><span class="line"></span><br><span class="line">Status check results are √</span><br></pre></td></tr></table></figure><h2 id="Linkerdダッシュボードの確認"><a href="#Linkerdダッシュボードの確認" class="headerlink" title="Linkerdダッシュボードの確認"></a>Linkerdダッシュボードの確認</h2><p><code>check</code> コマンドが通ったのでダッシュボードを見てみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ linkerd dashboard &amp;</span><br><span class="line">http://localhost:50750</span><br><span class="line">Grafana dashboard available at:</span><br><span class="line">http://localhost:50750/grafana</span><br><span class="line">Opening Linkerd dashboard <span class="keyword">in</span> the default browser</span><br></pre></td></tr></table></figure><p>画面までサクッとたどり着くことができました。 <code>Installs in seconds with zero config</code> と謳っているだけあって非常にスムーズです。</p><p><img src="/images/20201001/image.png" alt=""></p><h2 id="デモアプリを使ってLinkerdを見る"><a href="#デモアプリを使ってLinkerdを見る" class="headerlink" title="デモアプリを使ってLinkerdを見る"></a>デモアプリを使ってLinkerdを見る</h2><p>Linkerdのデモアプリとして <code>emojivoto</code> をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://run.linkerd.io/emojivoto.yml | kubectl apply -f -</span><br></pre></td></tr></table></figure><p>emojivotoのnamespaceにPodがデプロイされていることが確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get po -n emojivoto</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">emoji-58d98d997c-vmfkq     1/1     Running   0          3m14s</span><br><span class="line">vote-bot-54d5ff884-55xpf   1/1     Running   0          3m13s</span><br><span class="line">voting-7d5c4f77d-rzqg4     1/1     Running   0          3m11s</span><br><span class="line">web-7bd5fcb58b-85z9g       1/1     Running   0          3m10s</span><br></pre></td></tr></table></figure><p>実際にアプリにもアクセスしてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n emojivoto port-forward svc/web-svc 8080:80</span><br></pre></td></tr></table></figure><p><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> を開いた結果が下の画面。<br><img src="/images/20201001/image_2.png" alt=""></p><p>気に入った絵文字を選んで投票すると、リーダーボートの順位に反映されるアプリのようです。</p><p><img src="/images/20201001/image_3.png" alt=""></p><p>ちなみにドーナツの絵文字を選ぶと404エラーが返ってくるようにあえて仕込まれているようです。このあたりはさすがサービスメッシュ向けデモアプリといったところでしょうか。</p><p><img src="/images/20201001/image_4.png" alt=""></p><h2 id="Linkerdのinjection"><a href="#Linkerdのinjection" class="headerlink" title="Linkerdのinjection"></a>Linkerdのinjection</h2><p>ちなみにこのタイミングでLinkerdのダッシュボードを見ても、 <code>emojivoto</code> に関してのトラフィック情報は表示されません。Linkerdのinjectionが必要であり、 <code>Meshed</code> というカラムを見るとそれが分かります。</p><p><img src="/images/20201001/image_5.png" alt=""></p><p>以下コマンドでlinkerdのinjectionを行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get -n emojivoto deploy -o yaml \</span><br><span class="line">  | linkerd inject - \</span><br><span class="line">  | kubectl apply -f -</span><br></pre></td></tr></table></figure><p>先程 <code>emojivoto</code> のPod群を参照したときは各Podでは1つのコンテナが稼働していましたが、sidecar injectionによりPodごとに2つのコンテナが稼働していることが確認できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get po -n emojivoto</span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">emoji-64784ff78d-dcmhz      2/2     Running   0          3m10s</span><br><span class="line">vote-bot-779769dcfc-5krf6   2/2     Running   0          3m9s</span><br><span class="line">voting-784769cf6f-4sd77     2/2     Running   0          3m9s</span><br><span class="line">web-86cbd9db6c-b2sr8        2/2     Running   0          3m8s</span><br></pre></td></tr></table></figure><p>Linkerdのダッシュボードも見てみます。 <code>Meshed</code> のカラムが <code>1/1</code> となっていることが確認でき、各種メトリクスの値も連携されています。</p><p><img src="/images/20201001/image_6.png" alt=""></p><p>本当はGrafanaの画面にてPrometheus経由で取得されたメトリクスも参照したかったのですが、 いくつか試してみても見られず。。悔しいのでここは改めてリベンジします。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>サービスメッシュのプロダクトであるということで気になって触ってみましたが、とても簡単に始めることができました。</p><p>サービスメッシュと言えばCNCFのGraduated projectsであるEnvoyをベースとしたIstioの名前をよく聞きますが、Linkerdのほうがより軽量で簡単に導入できる印象を受けました。ただ、機能としてはIstioのほうが充実していそうで、実際に利用する際はしっかりとした比較検証が必要だなと感じました。</p><p>さて、明日はCNCF連載の第4回目です！ぜひお楽しみに。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="https://future-architect.github.io/articles/20200206/">GCP連載#2 Istio on GKEではじめるサービスメッシュ</a></li><li><a href="https://future-architect.github.io/articles/20200814/">ぼくのなつやすみ5 -Knativeを知ろう-</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201001/linkerd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。T
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="ServiceMesh" scheme="https://future-architect.github.io/tags/ServiceMesh/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
      <category term="Linkerd" scheme="https://future-architect.github.io/tags/Linkerd/"/>
    
      <category term="kubernetes" scheme="https://future-architect.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Policy as Code を実現する Open Policy Agent に憧れて。ポリシーコードでAPI仕様をLintする</title>
    <link href="https://future-architect.github.io/articles/20200930/"/>
    <id>https://future-architect.github.io/articles/20200930/</id>
    <published>2020-09-29T15:00:00.000Z</published>
    <updated>2020-10-02T07:42:57.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200930/opa-horizontal-color.png" alt=""></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニット真野です。</p><p><a href="https://future-architect.github.io/articles/20200928/">CNCF連載</a>2回目はOpen Policy Agent がテーマです。前回は伊藤さんによる、<a href="https://future-architect.github.io/articles/20200929/">k3sを知る、動かす、感じる</a>でした。</p><ul><li><a href="https://www.openpolicyagent.org/" target="_blank" rel="noopener">https://www.openpolicyagent.org/</a></li></ul><h1 id="Open-Policy-Agentとは"><a href="#Open-Policy-Agentとは" class="headerlink" title="Open Policy Agentとは"></a>Open Policy Agentとは</h1><p>Open Policy Agent（OPA）は汎用的なポリシーエンジンで、<a href="https://www.openpolicyagent.org/docs/latest/policy-language/" target="_blank" rel="noopener">Rego</a> と呼ばれるポリシー言語で定義されたルールに従って、入力がポリシーに沿っているか否かの判定を移譲させることができます。Regoで宣言的にポリシーを実装し、Policy as Code を実現できます。</p><p><img src="/images/20200930/opa.png" alt=""></p><p>OPAは汎用的というだけあって、Kubernetes上でしか動かせないと言った制約は無いです。Go言語で書かれていることもあって、普通の外部パッケージと同様に関数呼び出しができます。また、公式ドキュメントにも適用ドメインを選ばないと書かかれており、いくつかの活用例も挙げられています。</p><ul><li>どのユーザーがどのリソースにアクセスできるか</li><li>どのサブネットの出力トラフィックが許可されているか</li><li>コンテナが実行できるOS機能</li><li>システムにアクセスできる時間帯</li></ul><p>ポリシーエンジンと聞くと、なんとなくOK/NGだけ返すだけなのねと思いがちですが、OPAのAPIはクエリに対してレスポンスを返すような設計になっていて、JSONのような構造データを入出力することもできます。</p><p>2020/09/27時点で CNCF projectsの <code>Incubating</code>、バージョンは <code>v0.23.2</code>が最新でした。</p><h1 id="Policy-as-Code"><a href="#Policy-as-Code" class="headerlink" title="Policy as Code"></a>Policy as Code</h1><p>Policy as Codeの先駆けは自分が知る限り HashiCorp の <a href="https://www.hashicorp.com/sentinel" target="_blank" rel="noopener">Sentinel</a>だと認識しています。Terraformは Infrastructure as Codeを実現しますが、Sentinelのような Policy as Codeなツールと組み合わせ、インフラ構成全体のアクセスポリシーを設定することで、より安全にインフラ作成を自動化したり、不用意な破壊を防ぐことできるとされています。古いイメージを使わないといったセキュリティの観点や、あまり高すぎるインスタンスを立ち上げすぎないと言ったクラウド破産を防ぐといった使い方もよく聞きますよね。</p><ul><li><a href="https://www.publickey1.jp/blog/17/hashicorpsentinelpolicy_as_codehashiconf17.html" target="_blank" rel="noopener">HashiCorp、インフラ変更全体にまたがるアクセス権を設定する「Sentinel」発表「Policy as Code」を実現するフレームワーク。HashiConf’17 - Publickey</a></li></ul><p>Sentinelは非常に気になっていて、最近<a href="https://docs.hashicorp.com/sentinel/downloads/" target="_blank" rel="noopener">バイナリがダウンロード</a>できるぞ！と、伊藤さんに教えてもらいましたが、利用ライセンスがよく分からないため触れずでした。（ご存知の方は教えて下さい）</p><p>Sentinelと同様にOpen Policy AgentはPolicy as Codeを掲げています。個人的にはチーム開発において大小様々なポリシーが明示的にも暗黙的にも存在するため、これをポリシーコード化することで、良い成果を生み出せるのではと期待しています。</p><p>今回は後で記載している通り、コーディング規約も一種のポリシーとみなして、Open API Spec（Swagger）をLinter的にチェックするツールを題材に、OPAを用いて開発してみたいと思います。</p><h1 id="Rego概要"><a href="#Rego概要" class="headerlink" title="Rego概要"></a>Rego概要</h1><p>RegoはDatalogというクエリ言語にインスパイアされて開発された言語です。Datalogは聞き慣れないですが、Prologの流れを組む言語です。RegoはDatalogを拡張してJSONのような構造化モデルに対応させたようです。</p><p>基本的な文法は<a href="https://www.openpolicyagent.org/docs/latest/policy-language/" target="_blank" rel="noopener">こちら</a>にまとめられています。</p><p><a href="https://play.openpolicyagent.org/" target="_blank" rel="noopener">Rego Playground</a>というサイトがあり、簡単に動作検証できます。何はともあれ色々触ってみるのが良いと思います。</p><p>見たまんまですが、画像の左側がRegoエディタ、右枠のINPUTが入力、DATAがRegoで参照する外部データ、OUTPUTがEvaluateボタンを押した後の実行結果です。<br>ご覧のように入力も出力も構造化データ（JSON）なのがよく分かります。</p><p><img src="/images/20200930/image.png" alt=""></p><p>公式ドキュメントでは以下3つの例が載っていました。</p><ul><li><a href="https://play.openpolicyagent.org/p/ikesWCFIH8" target="_blank" rel="noopener">https://play.openpolicyagent.org/p/ikesWCFIH8</a></li><li><a href="https://play.openpolicyagent.org/p/DqXNKeLm20" target="_blank" rel="noopener">https://play.openpolicyagent.org/p/DqXNKeLm20</a></li><li><a href="https://play.openpolicyagent.org/p/qUkvgJRpIU" target="_blank" rel="noopener">https://play.openpolicyagent.org/p/qUkvgJRpIU</a></li></ul><p>PlaygroudのExamplesをクリックすると、他にも色々な例が載っています。</p><p><img src="/images/20200930/image_2.png" alt=""></p><h1 id="Regoの文法さわり"><a href="#Regoの文法さわり" class="headerlink" title="Regoの文法さわり"></a>Regoの文法さわり</h1><p>Prologをやってれば当たり前かもしれませんが、JavaやGoやJSくらいしか書いたことが無い私から見て、特徴的だなと思った<a href="https://www.openpolicyagent.org/docs/latest/policy-language/" target="_blank" rel="noopener">Regoの文法</a>のつかみを紹介します。かなり異次元だなと思いました。</p><p>まずは 変数 pi に 3.14159を代入したコードです。<code>:=</code> ですでに変数宣言済みかどうかチェックしてくれます。 <code>{&quot;pi&quot;:3.14159}</code> というJSONが実行結果です。まぁそういうものかと納得できます。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line">pi := <span class="number">3.14159</span></span><br><span class="line"></span><br><span class="line"># 実行結果</span><br><span class="line"># &#123;</span><br><span class="line">#    <span class="string">"pi"</span>: <span class="number">3.14159</span></span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>次は式が入りました。 x &gt; y が最初にきて、 x,yの代入がその後になっていて実行時エラーになりそうですが、問題なく判定できます。公式ドキュメントに <code>The order of expressions in a rule does not affect the document’s content.</code> と書かれている通り、書いた順番は影響ないようです。なるほど。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line">s &#123;</span><br><span class="line">    x &gt; y</span><br><span class="line">    y = <span class="number">41</span></span><br><span class="line">    x = <span class="number">42</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 実行結果</span><br><span class="line"># &#123;</span><br><span class="line">#    <span class="string">"s"</span>: true</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>次は <code>sites</code> というネストしたデータを使ってルール<code>r1</code>, <code>r2</code>, <code>r3</code>, <code>r4</code>, <code>r5</code>を作りました。site[_]でループを回すような処理になり、<code>r1</code> は <code>prod</code> が存在するので <code>true</code>です。<code>r2</code> は <code>false</code> となってほしいところですが、出力されません。一度も true と評価されなかったのでドキュメントが生成されないようです。<code>r3</code>のようにルールを作って、<code>r4</code>から利用すると言った事もできます。<code>r4</code> は <code>true</code> ですが <code>r5</code> は一度も <code>true</code> にならなかったので出力されません。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line">sites := [&#123;<span class="string">"name"</span>: <span class="string">"prod"</span>&#125;, &#123;<span class="string">"name"</span>: <span class="string">"smoke1"</span>&#125;, &#123;<span class="string">"name"</span>: <span class="string">"dev"</span>&#125;]</span><br><span class="line"></span><br><span class="line">r1 &#123; sites[<span class="symbol">_</span>].name == <span class="string">"prod"</span> &#125;</span><br><span class="line">r2 &#123; sites[<span class="symbol">_</span>].name == <span class="string">"uat"</span> &#125; # 存在しないキーを指定</span><br><span class="line"></span><br><span class="line">r3[name] &#123; name := sites[<span class="symbol">_</span>].name &#125;</span><br><span class="line">r4 &#123; r2[<span class="string">"prod"</span>] &#125;</span><br><span class="line">r5 &#123; r2[<span class="string">"local"</span>] &#125;  # 存在しないキーを指定</span><br><span class="line"></span><br><span class="line"># 実行結果(sitesは省略）</span><br><span class="line"># &#123;</span><br><span class="line">#     <span class="string">"r1"</span>: true,</span><br><span class="line">#     <span class="string">"r3"</span>: [</span><br><span class="line">#         <span class="string">"prod"</span>,</span><br><span class="line">#         <span class="string">"smoke1"</span>,</span><br><span class="line">#         <span class="string">"dev"</span></span><br><span class="line">#     ],</span><br><span class="line">#     <span class="string">"r4"</span>: true</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>次は予約語のdefaultを利用して、allowの初期値をfalseにします。</p><p>allowの宣言が2箇所にありますが、ブロック同士はOR条件になります。allowのBody内はAND条件になります。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line"># よくあるdefaultの使い方で、初期値をfalseで設定する</span><br><span class="line">default allow = false</span><br><span class="line"></span><br><span class="line"># allowのブロック同士は<span class="symbol">OR</span>条件になる</span><br><span class="line">allow &#123;</span><br><span class="line">input.attributes.request.http.method == <span class="string">"GET"</span> # 同じ<span class="symbol">Body</span>内は<span class="symbol">AND</span>条件になる</span><br><span class="line">input.attributes.request.http.path == <span class="string">"/"</span>     # 同じ<span class="symbol">Body</span>内は<span class="symbol">AND</span>条件になる</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># allowのブロック同士は<span class="symbol">OR</span>条件になる</span><br><span class="line">allow &#123;</span><br><span class="line">input.attributes.request.http.headers.authorization == <span class="string">"Basic charlie"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のルールに、以下の入力1.jsonで評価すると、<code>{&quot;allow&quot;: true}</code> になります。１つ目のallowが <code>true</code> になるためです。</p><figure class="highlight json"><figcaption><span>入力1.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"attributes"</span>: &#123;</span><br><span class="line">        <span class="attr">"request"</span>: &#123;</span><br><span class="line">            <span class="attr">"http"</span>: &#123;</span><br><span class="line">                <span class="attr">"headers"</span>: &#123;</span><br><span class="line">                    <span class="attr">":authority"</span>: <span class="string">"example-app"</span>,</span><br><span class="line">                    <span class="attr">":method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">                    <span class="attr">":path"</span>: <span class="string">"/"</span>,</span><br><span class="line">                    <span class="attr">"accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">                    <span class="attr">"authorization"</span>: <span class="string">"Basic ZXZlOnBhc3N3b3Jk"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">                <span class="attr">"path"</span>: <span class="string">"/"</span>,</span><br><span class="line">                <span class="attr">"protocol"</span>: <span class="string">"HTTP/1.1"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>予約後は他にも <code>some</code>、<code>with</code>、<code>else</code> があります。使いこなせばSQLの自己結合みたいな表現もできるようですが、慣れないうちは道のりがとてつもなく長く感じます。パズルみたいで楽しいと思えた人は才能だなと思います。</p><h1 id="GoからOPAを呼ぶ"><a href="#GoからOPAを呼ぶ" class="headerlink" title="GoからOPAを呼ぶ"></a>GoからOPAを呼ぶ</h1><p>OPAは<code>github.com/open-policy-agent/opa/rego</code>パッケージを利用することで、Goから組み込みライブラリ形式で呼び出せます。</p><ul><li>参考: <a href="https://www.openpolicyagent.org/docs/latest/integration/#integrating-with-the-go-api" target="_blank" rel="noopener">https://www.openpolicyagent.org/docs/latest/integration/#integrating-with-the-go-api</a></li></ul><p>ドキュメントそのままですが、転載します。いわゆるルールは module 変数に代入しています。<code>rego.New</code>で <code>rego.Rego</code> を作成してから、<code>PrepareForEval</code> で <code>PreparedEvalQuery</code> を作成すると、<code>Eval</code> で評価できます。OPAからするとRegoはモジュールと呼ばれているので、ここの表現は慣れかなと思います。</p><p>Regoモジュールの内容は、HTTP Requestが指定のパスか、Adminだったら評価するというものです。リクエストが1つ目の条件を満たしているので、評価結果は <code>x:true</code> を取得できています。（最後のコメント部分）</p><p>全文は<a href="https://github.com/laqiiz/openpolicyagent-example/blob/master/exmaple/example.go" target="_blank" rel="noopener">こちら</a>に載せています。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/open-policy-agent/opa/rego"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">module := <span class="string">`&lt;Regoコード&gt;`</span></span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">query, err := rego.New(</span><br><span class="line">rego.Query(<span class="string">"x = data.example.authz.allow"</span>),</span><br><span class="line">rego.Module(<span class="string">"example.rego"</span>, module),</span><br><span class="line">).PrepareForEval(ctx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line"><span class="string">"path"</span>:   []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"salary"</span>, <span class="string">"bob"</span>&#125;,</span><br><span class="line"><span class="string">"subject"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"user"</span>:   <span class="string">"bob"</span>,</span><br><span class="line"><span class="string">"groups"</span>: []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"sales"</span>, <span class="string">"marketing"</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eval, err := query.Eval(ctx, rego.EvalInput(input))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, result := <span class="keyword">range</span> eval &#123;</span><br><span class="line">fmt.Printf(<span class="string">"eval: %+v\n"</span>, result) <span class="comment">// eval: &#123;Expressions:[true] Bindings:map[x:true]&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この構成を利用すれば、他の領域にも展開できそうです。</p><h1 id="Open-API-Spec（Swagger）にポリシーを適用してみる"><a href="#Open-API-Spec（Swagger）にポリシーを適用してみる" class="headerlink" title="Open API Spec（Swagger）にポリシーを適用してみる"></a>Open API Spec（Swagger）にポリシーを適用してみる</h1><p>Open API Specを用いてチームで開発する際、API定義の設定方法で揺れることは無いでしょうか？　以下のようなブログ記事が出るくらい、フューチャーでは設計の揺れを無くす努力をしています。</p><ul><li><a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a></li></ul><p>一方でこの手の規約は生み出してしまえば、チェックするのはLinterにやらせたいものです。上記の設計規約の一部をOPAで実装してみたいと思います。Open API SpecはYAML or JSONで記載するので入力としてはOPAにフィットすると思います。</p><p>とりあえずルールは上から2つにしぼり、tagsとoperationIdについてのルールを書きます。</p><ul><li>paths/tags<ul><li>1URIで１つのタグのみ定義する</li></ul></li><li>paths/operationId<ul><li>{HTTPメソッド}{機能物理名}を記載する</li><li>キャメルケース</li></ul></li></ul><h2 id="Rego設計"><a href="#Rego設計" class="headerlink" title="Rego設計"></a>Rego設計</h2><p>tagsの数=1を実現するためには<a href="https://www.openpolicyagent.org/docs/latest/policy-reference/#built-in-functions" target="_blank" rel="noopener">ビルトイン関数</a>である <code>count</code> を利用します。</p><figure class="highlight prolog"><figcaption><span>tagsの数チェック</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line">deny_tags_multiple[msg] &#123;</span><br><span class="line">    some path, method</span><br><span class="line">    count(input.paths[path][method].tags) != <span class="number">1</span>               # タグが複数設定</span><br><span class="line">    msg := sprintf(<span class="string">"path(%v) method(%v) tags must keep only one"</span>, [path, method])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deny_tags_none[msg] &#123;</span><br><span class="line">    some path, method</span><br><span class="line">    object.get(input.paths[path][method], <span class="string">"tags"</span>, <span class="string">"none"</span>) == <span class="string">"none"</span> # タグが存在しない場合</span><br><span class="line">    msg := sprintf(<span class="string">"path(%v) method(%v) tags must keep only one"</span>, [path, method])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>operationIdのcamelCaseのチェック方法は、あまり良い手じゃないですが、snake_caseでないことと、最初の1文字が小文字であることだけチェックします（単語の区切りがムズカシイので）。他にも、<code>split</code>、<code>object.get</code> など多数の組み込み関数を利用しています。</p><figure class="highlight prolog"><figcaption><span>operationIdのチェック      </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line"># アンダースコアが含まれないことをチェック                                 </span><br><span class="line">deny_opeId_snake_case[msg] &#123;</span><br><span class="line">    some path, method</span><br><span class="line">    opeId := input.paths[path][method].operationId</span><br><span class="line">    </span><br><span class="line">    count(split(opeId, <span class="string">"_"</span>)) != <span class="number">1</span>                           # snake_caseじゃないこと</span><br><span class="line">    msg := sprintf(<span class="string">"path(%v) method(%v) operationId must be camelCase: %v"</span>, [path, method, opeId])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 最初の<span class="number">1</span>文字が小文字である</span><br><span class="line">deny_opeId_not_camel_case[msg] &#123;</span><br><span class="line">    some path, method</span><br><span class="line">    opeId := input.paths[path][method].operationId</span><br><span class="line">    </span><br><span class="line">    substring(opeId, <span class="number">0</span>, <span class="number">1</span>) != lower(substring(opeId, <span class="number">0</span>, <span class="number">1</span>)) # 最初の<span class="number">1</span>文字が小文字</span><br><span class="line">    msg := sprintf(<span class="string">"path(%v) method(%v) operationId must be camelCase: %v"</span>, [path, method, opeId])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="symbol">HTTP</span>メソッドから始まっていることチェック</span><br><span class="line">deny_opeId_startwith_http_method[msg] &#123;</span><br><span class="line">    some path, method</span><br><span class="line">    opeId := input.paths[path][method].operationId</span><br><span class="line"></span><br><span class="line">    indexof(opeId, method) != <span class="number">0</span>  # <span class="symbol">HTTP</span>メソッドから始まっていない</span><br><span class="line">    msg := sprintf(<span class="string">"path(%v) method(%v) operationId must be startwith http method: %v"</span>, [path, method, opeId])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これらを1つのファイルとしてまとめて、<code>policy.rego</code> に保存しておきます。</p><h2 id="入力とする-Open-API-Spec"><a href="#入力とする-Open-API-Spec" class="headerlink" title="入力とする Open API Spec"></a>入力とする Open API Spec</h2><p>OAIのexamplesを参考に入力となる違反した定義を作成します。</p><p><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v3.0/api-with-examples.yaml" target="_blank" rel="noopener">https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v3.0/api-with-examples.yaml</a></p><figure class="highlight yml"><figcaption><span>swagger.yml(抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="string">"3.0.0"</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Simple</span> <span class="string">API</span> <span class="string">overview</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">tags:</span>                             <span class="comment"># 🔥tagsが複数</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">list_Versions_v2</span>     <span class="comment"># 🔥OperationIdがsnake_case、getから始まっていない</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">List</span> <span class="string">API</span> <span class="string">versions</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">'200':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">|-</span></span><br><span class="line">            <span class="number">200</span> <span class="string">response</span></span><br><span class="line">  <span class="string">/v2:</span></span><br><span class="line">    <span class="attr">get:</span>                                 <span class="comment"># 🔥tagsが未設定</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">GetVersionDetailsv2</span>   <span class="comment"># 🔥大文字始まり</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Show</span> <span class="string">API</span> <span class="string">version</span> <span class="string">details</span></span><br><span class="line">    <span class="attr">put:</span>                                 <span class="comment"># 🔥tagsが未設定</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">saveVersionDetailsv2</span>  <span class="comment"># 🔥putから始まっていない</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Show</span> <span class="string">API</span> <span class="string">version</span> <span class="string">details</span></span><br></pre></td></tr></table></figure><p>これを <code>input.yml</code> に保存しておきます。</p><p>これを先ほどのRegoモジュールを利用したOPA評価をGoから行います。</p><h2 id="Go実装"><a href="#Go実装" class="headerlink" title="Go実装"></a>Go実装</h2><p>先ほど定義したregoとYAMLは外部ファイルから読み込めるようにしておく。今回は雑にハードコードしています。</p><p>ほとんど公式ドキュメントに合ったコードと同じで動かせました。</p><figure class="highlight go"><figcaption><span>linter.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/goccy/go-yaml"</span></span><br><span class="line"><span class="string">"github.com/open-policy-agent/opa/rego"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is POC code</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">module, err := readFile(<span class="string">"policy.rego"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query, err := rego.New(</span><br><span class="line">rego.Query(<span class="string">"x = data"</span>),</span><br><span class="line">rego.Module(<span class="string">"policy.rego"</span>, <span class="keyword">string</span>(module)),</span><br><span class="line">).PrepareForEval(ctx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">yml, err := readFile(<span class="string">"input.yml"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := yaml.Unmarshal(yml, &amp;input); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eval, err := query.Eval(ctx, rego.EvalInput(input))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, result := <span class="keyword">range</span> eval &#123;</span><br><span class="line"><span class="keyword">for</span> _, binding := <span class="keyword">range</span> result.Bindings &#123;</span><br><span class="line">body, err := json.MarshalIndent(binding, <span class="string">""</span>, <span class="string">"  "</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">file, err := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ioutil.ReadAll(file)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全文はこちらにコミットしておきました。参考までに。<br><a href="https://github.com/laqiiz/openpolicyagent-example" target="_blank" rel="noopener">https://github.com/laqiiz/openpolicyagent-example</a></p><h2 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h2><p>さきほどのGoのプログラムを動かすと以下のJSONが出力されます！</p><p>メッセージは各ルールごとに、コメントが出せています。行番号は出力できていませんが、どのパスでどの関数なのかは指定できるようにしています。</p><p>出力結果を見ると、tagsはtagsでまとめて表示するなど、Regoのルールを束ねるなど工夫をすると、もっと扱いやすい結果が作れそうです。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test"</span>: &#123;</span><br><span class="line">    <span class="attr">"deny_opeId_not_camel_case"</span>: [</span><br><span class="line">      <span class="string">"path(/v2) method(get) operationId must be camelCase: GetVersionDetailsv2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"deny_opeId_snake_case"</span>: [</span><br><span class="line">      <span class="string">"path(/) method(get) operationId must be camelCase: list_Versions_v2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"deny_opeId_startwith_http_method"</span>: [</span><br><span class="line">      <span class="string">"path(/v2) method(get) operationId must be startwith http method: GetVersionDetailsv2"</span>,</span><br><span class="line">      <span class="string">"path(/v2) method(put) operationId must be startwith http method: saveVersionDetailsv2"</span>,</span><br><span class="line">      <span class="string">"path(/) method(get) operationId must be startwith http method: list_Versions_v2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"deny_tags_multiple"</span>: [</span><br><span class="line">      <span class="string">"path(/) method(get) tags must keep only one"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"deny_tags_none"</span>: [</span><br><span class="line">      <span class="string">"path(/v2) method(get) tags must keep only one"</span>,</span><br><span class="line">      <span class="string">"path(/v2) method(put) tags must keep only one"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><p>利用したのと同じRegoと入力を、PlaygroundでもPublishしておきました。お手軽に触ってみたい人はどうぞ。</p><p><a href="https://play.openpolicyagent.org/p/1ZhZasqT22" target="_blank" rel="noopener">https://play.openpolicyagent.org/p/1ZhZasqT22</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Open Policy Agent（OPA）は汎用的なポリシーエンジンで、Policy as Codeの実現を手伝ってくれる</li><li>OPAが利用するRego言語の文法は特徴的（だと大半の人は思うと思う）</li><li>OPAはGoから組み込みライブラリとして呼び出せるので、これを活用したLinterを開発可能</li></ul><p>長い記事を最後まで読んでいただき、ありがとうございました！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200930/opa-horizontal-color.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
      <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
      <category term="OpenPolicyAgent" scheme="https://future-architect.github.io/tags/OpenPolicyAgent/"/>
    
  </entry>
  
  <entry>
    <title>k3sを知る、動かす、感じる</title>
    <link href="https://future-architect.github.io/articles/20200929/"/>
    <id>https://future-architect.github.io/articles/20200929/</id>
    <published>2020-09-28T15:00:00.000Z</published>
    <updated>2020-10-01T01:30:28.508Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200929/k3s.png" alt=""></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXチームの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。本記事は<a href="/articles/20200928/">CNCF連載</a>の第1弾になります。</p><p>アプリケーションをコンテナ化することが主流になった昨今、エッジコンピューティングでもコンテナを利用する機会が出てきました。そのため、サーバー上でKubernetesを利用して、コンテナをオーケストレーションをするのと同じようにエッジデバイスでもコンテナを管理する機能が求められるようになってきました。</p><p>ここで、本記事では2020年の8月にCNCF入りを果たしたk3sについて触れていきます。</p><h2 id="k3sとは"><a href="#k3sとは" class="headerlink" title="k3sとは"></a>k3sとは</h2><p>k3sは元々<a href="https://rancher.com/" target="_blank" rel="noopener">Rancher Labs</a>(本社：アメリカ フロリダ州クパチーノ)で開発されていたOSSで2019年の2月に発表されました。発表当初はKubernetesの公式ディストリビューションであること、バイナリが40MB以下であることから話題にもなりました。エンタープライズでKubernetesを利用している企業が、エッジデバイスでもコンテナを利用できるようにし、さらに拡張したKubernetes as a Service(KaaS)基盤の運用・監視などを一元化することが可能になります。そのため、最適な用途としては以下が挙げられています。</p><ul><li>エッジコンピューティング</li><li>CI</li><li>ARM環境</li><li>IoT</li><li>開発環境</li><li>組み込みKubernetes</li></ul><h3 id="k3sの5つの変更"><a href="#k3sの5つの変更" class="headerlink" title="k3sの5つの変更"></a>k3sの5つの変更</h3><p>k3sの名前の由来はKubernetes(k8s)から5つの変更が入っていることに由来します。<br><img src="/images/20200929/k3s_architecture.png" alt=""><br>(引用: <a href="https://k3s.io/" target="_blank" rel="noopener">https://k3s.io/</a>)</p><h4 id="1-データストアの変更"><a href="#1-データストアの変更" class="headerlink" title="1. データストアの変更"></a>1. データストアの変更</h4><p>Kubernetesのマスターにあるデータストアはデフォルトではetcdですが、k3sではSQLiteに置き換えられています。ただ、もちろん固定ではなく、MySQL、PostgreSQL、etcdなどのデータストアも利用可能です。</p><h4 id="2-コンポーネントのシングルバイナリ化"><a href="#2-コンポーネントのシングルバイナリ化" class="headerlink" title="2. コンポーネントのシングルバイナリ化"></a>2. コンポーネントのシングルバイナリ化</h4><p>Kubernetesのコントロールプレーンが動くために必要なコンポーネントが１つのバイナリ、プロセスにまとまっています。その分、煩雑なクラスター操作(証明書の配布など)を自動化できるメリットがあります。</p><h4 id="3-外部との依存を最小化"><a href="#3-外部との依存を最小化" class="headerlink" title="3. 外部との依存を最小化"></a>3. 外部との依存を最小化</h4><p>k3sに必要な以下のパッケージをのぞいて、全て外部との依存を最小限に抑えています。</p><ul><li>containerd</li><li>Flannel</li><li>CoreDNS</li><li>ホストユーティリティ</li></ul><h4 id="4-機能の組み込み"><a href="#4-機能の組み込み" class="headerlink" title="4. 機能の組み込み"></a>4. 機能の組み込み</h4><p>k3sのベースの機能としてHelmコントローラー、Traefikイングレスコントローラーなど、k3s単体で利用できるようになっています。</p><h4 id="5-プラグインの削除"><a href="#5-プラグインの削除" class="headerlink" title="5. プラグインの削除"></a>5. プラグインの削除</h4><p>Kubernetesにはストレージや各クラウドプロバイダーへのプラグインが存在していましたが、k3sではこれらが取り除かれています。</p><p>Kubernetesからの変更点をみてみると、改めて比較的コンピューティングリソースが少ない環境でも利用できるようにしていることがわかります。</p><h2 id="いざ実際に動かしてみる"><a href="#いざ実際に動かしてみる" class="headerlink" title="いざ実際に動かしてみる"></a>いざ実際に動かしてみる</h2><p>前提の知識を得ることも大事ですが、実際に触ってみることも大事ですよね。ということで、大好きなGCPでk3sを動かしてみたいと思います。今回はk3sが動く最低限として、</p><ul><li>RAM:最小512MB</li><li>CPU:最低1CPU</li></ul><p>とされているので、Server側をn1-standard-1（vCPU x 1、メモリ 3.75 GB）、Agent側をf1-micro（vCPU x 1、メモリ 0.6 GB）で動かしてみることにします。またOSはUbuntu18.04としています。</p><h3 id="ファイアウォール"><a href="#ファイアウォール" class="headerlink" title="ファイアウォール"></a>ファイアウォール</h3><p>Serverへ外部からアクセスができるように</p><ul><li>Inbound: 0.0.0.0/0</li><li>tcp:6443</li></ul><p>で開けましょう</p><h3 id="Serverのインストール"><a href="#Serverのインストール" class="headerlink" title="Serverのインストール"></a>Serverのインストール</h3><p>インスタンス名を<code>k3s-server</code>としています。はじめにServer側のインストールを行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=<span class="string">"--disable-agent"</span> K3S_KUBECONFIG_MODE=<span class="string">"644"</span> sh -</span><br></pre></td></tr></table></figure><p>今回、agentは別のサーバーに入れるので<code>INSTALL_K3S_EXEC=&quot;--disable-agent&quot;</code>を追加、またkubeconfigを読めるようにするために<code>K3S_KUBECONFIG_MODE=&quot;644&quot;</code>を追加しています。</p><p>インストールまで済んだらagentに登録するトークンを出力しましょう</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /var/lib/rancher/k3s/server/node-token</span><br></pre></td></tr></table></figure><h3 id="Agentのインストール"><a href="#Agentのインストール" class="headerlink" title="Agentのインストール"></a>Agentのインストール</h3><p>インスタンス名を<code>k3s-agent-x</code>として立てています。Agent側は以下でインストールを行います。事前にcatしたトークン、Serverの外部IPを使うので準備してください</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sfL https://get.k3s.io | K3S_TOKEN=[server_token] K3S_URL=https://[server_external_ip]:6443 sh -</span><br></pre></td></tr></table></figure><p>ここまで来ればnode(Agent)の確認ができると思うので、Server側で確認してみましょう</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ k3s kubectl get nodes</span><br></pre></td></tr></table></figure><p>また、<code>/etc/rancher/k3s/k3s.yaml</code>配下のファイルを手元のPCに持ってくるとローカルからもnodeの確認ができます</p><figure class="highlight yaml"><figcaption><span>/etc/rancher/k3s/k3s.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">secret</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://[server_external_ip]:6443</span> <span class="comment"># ここをServerの外部IPに書き換え</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxxxxxxxxxx</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><h3 id="サンプルを動かす"><a href="#サンプルを動かす" class="headerlink" title="サンプルを動かす"></a>サンプルを動かす</h3><p>k3sクラスターを立てることができたので、簡単なサンプルを利用して、動くかみてみたいと思います。<br>今回使うサンプルは公式の<a href="https://rancher.com/learning-paths/how-to-deploy-your-application-to-kubernetes/" target="_blank" rel="noopener">Kubernetes Deployment: How to Run a Containerized Workload on a Cluster</a>から借りています。<br>はじめに、以下をapplyします。</p><figure class="highlight yaml"><figcaption><span>testdeploy.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysite</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysite</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysite</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysite</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysite</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kellygriffin/hello:v1</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>applyが完了したら、podの起動を確認して、以下のコマンドでcurlしましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it [container_name] curl localhost</span><br></pre></td></tr></table></figure><p>実行すると以下が返ってくるかと思います。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World This is Version 1 of our Application<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>次にスケールさせるためにReplicaを4にしてみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale --replicas=4 deploy/mysite</span><br></pre></td></tr></table></figure><p>スケールしていることを確認しましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">mysite-5bc4c5898d-8s448   1/1     Running   0          11m</span><br><span class="line">mysite-5bc4c5898d-5d68q   1/1     Running   0          2m11s</span><br><span class="line">mysite-5bc4c5898d-2zcpp   1/1     Running   0          3s</span><br><span class="line">mysite-5bc4c5898d-nc6pc   1/1     Running   0          3s</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>実利用がかなり浸透してきているKubernetesですが、k3sはさらに舞台を広げてくれるものだなと改めて思いました。</p><p>動かしている途中で感じたことですが、KubernetesではMasterとNodeでしたが、k3sはServerとAgentという風に呼び方を変えています。ここについては、Serverは本当にコントロールプレーンとしてサーバー上において、Agentはエッジデバイスに置くといった感じで、クラウドのみではなく、環境が異なってもクラスター管理できるのかなと感じました。別パターンとして、組み込みKubernetesであればクラスタ毎埋めることもできたりしそうですね(Agentを合わせる、別にするというオプションが取れるので)。</p><p>ここまで書いてきたk3sですが、試すのもお手軽なので、是非一度試して簡単さを実感してみてください。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://rancher.com/docs/k3s/latest/en/" target="_blank" rel="noopener">英語の公式ドキュメント</a></li><li><a href="https://www.rancher.co.jp/pdfs/K3s-eBook4Styles0507.pdf" target="_blank" rel="noopener">日本語ドキュメント</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200929/k3s.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG/D
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
      <category term="k3s" scheme="https://future-architect.github.io/tags/k3s/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
  </entry>
  
  <entry>
    <title>CNCF連載始めます</title>
    <link href="https://future-architect.github.io/articles/20200928/"/>
    <id>https://future-architect.github.io/articles/20200928/</id>
    <published>2020-09-27T15:00:00.000Z</published>
    <updated>2020-10-05T01:32:35.073Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200928/cncf-color.png" alt=""></p><p>こんにちは。技術ブログ運営の<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。</p><p>今回は、<a href="https://www.cncf.io/" target="_blank" rel="noopener">CloudNative Computing Foundation(CNCF)</a>がホストしているOSSを取り扱った連載を全6回で行います。この記事では連載のイントロとCNCFのプロジェクトについて軽く触れます。</p><h2 id="CNCFとは"><a href="#CNCFとは" class="headerlink" title="CNCFとは"></a>CNCFとは</h2><p>Cloud Native Computing Foundationの略であり、Linux Foundationのプロジェクトの1つでもあります。代表のOSSとしては、今やコンテナオーケストレーションツールのデファクトスタンダードになっているKubernetesがあり、その辺りのOSSが数多くホストされています。指針はコンテナ技術の発展としており、現在もホストするプロジェクトが増えています。</p><h2 id="プロジェクトについて"><a href="#プロジェクトについて" class="headerlink" title="プロジェクトについて"></a>プロジェクトについて</h2><p>CNCFでは大きくプロジェクトを成熟度レベル別に3つ分類しています。</p><ul><li><strong>Graduated</strong><ul><li>「成熟した」プロジェクトとして認められたものについてはGraduatedになります。ここ最近だとTiKVやHarborといったプロジェクトがGraduatedにあがりました。</li></ul></li><li><strong>Incubating</strong><ul><li>Sandboxから利用数などが増加するとIncubatingになります。よく使われているIncubatingプロジェクトではArgo CDやgRPCなどが挙げられます。</li></ul></li><li><strong>Sandbox</strong><ul><li>CNCFのプロジェクトとしては「early stage」として位置付けられています。2020/08のKubeCon EUでは、k3sが新たに入ったことが話題になりました。</li></ul></li></ul><p><img src="/images/20200928/image.png" alt=""><br><a href="https://www.cncf.io/projects/" target="_blank" rel="noopener">https://www.cncf.io/projects/</a></p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>今回は、CNCFでホストしているOSSの中から特にIncubating、Sandboxプロジェクトについて取り扱います。一部Graduatedがありますが、企画段階ではIncubatingでした。</p><p>連載は以下のメンバーで行いますので、気になる記事がありましたらぜひ読んでみてください。</p><table><thead><tr><th>日付</th><th>執筆者</th><th>取り扱うプロジェクト</th></tr></thead><tbody><tr><td>9/28</td><td>伊藤太斉</td><td>このページ</td></tr><tr><td>9/29</td><td>伊藤太斉</td><td><a href="/articles/20200929/">k3sを知る、動かす、感じる</a></td></tr><tr><td>9/30</td><td>真野隼記</td><td><a href="/articles/20200930/">Policy as Code を実現する Open Policy Agent に憧れて。ポリシーコードでAPI仕様をLintする</a></td></tr><tr><td>10/1</td><td>村田靖拓</td><td><a href="/articles/20201001/">Linkerdで始めるサービスメッシュ</a></td></tr><tr><td>10/2</td><td>澁川喜規</td><td><a href="/articles/20201002/">Buildpacksのビルダーをスクラッチから作ってみる</a></td></tr><tr><td>10/5</td><td>伊藤真彦</td><td><a href="/articles/20201005/">TiKVに触れる</a></td></tr></tbody></table><p>※正確な取り扱うプロジェクト、掲載順はそのときにより前後しますが、ご了承ください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回は社内でも取り扱いの少ない部分の連載で、触ってみた系が今回は圧倒的に多いですが、第2弾を行うときはTipsや本番運用した知見などを出せればと思いますので是非ご期待ください！</p><p>他にも<a href="https://future-architect.github.io/articles/20200908/">連載企画</a>がざくざくあります。ぜひ、気になるテーマの記事をCHECK! いただけると幸いです。</p><ul><li><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a></li><li><a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a></li><li><a href="/tags/GoCDK/">Go Cloud</a></li><li><a href="/tags/Auth0/">Auth0</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/夏休み自由研究/">夏休み自由研究</a></li><li><a href="/tags/GlyphFeeds/">GlyphFeeds連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200928/cncf-color.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;こんにちは。技術ブログ運営の&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
  </entry>
  
  <entry>
    <title>LambdaとGoを使ったサーバーレスWebAPI開発実践入門</title>
    <link href="https://future-architect.github.io/articles/20200927/"/>
    <id>https://future-architect.github.io/articles/20200927/</id>
    <published>2020-09-26T15:00:00.000Z</published>
    <updated>2020-09-28T04:23:11.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの辻です。</p><p>業務アプリケーションのビジネスロジックをサーバーレスで実装することも増えてきました。<a href="https://future-architect.github.io/articles/20200722/">AWSサービストリガによるLambda関数起動</a>の記事にもあるようにAPI GatewayとLambda関数を組み合わせてHTTPサーバを提供することも容易にできます。バックエンドのWebAPIをLambda関数で動かすユースケースがよくあるパターンです。Lambda関数とアプリケーションロジックの実装は密結合になりやすいですが、HTTPサーバで動作するように実装して、Lambda関数として組み込むと、従来のHTTPサーバを実装するノウハウを活かしつつ、サーバレスで動作するバックエンドのWebAPIを構築できます。</p><p>本記事ではGoを用いてサーバレスなWebAPIサーバをAWS上に1から構築するチュートリアルです。</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>AWS上に構築するインフラはこんな感じです。シンプル。</p><p><img src="/images/20200927/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%B9Go.png" alt=""></p><p>最初に本チュートリアルで使用しているバージョンを記載します。以下のとおりです。</p><ul><li>各種ソフトウェアバージョン</li></ul><table><thead><tr><th>#</th><th>ソフトウェア/ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td>1</td><td>AWS CLI</td><td>2.0.48</td></tr><tr><td>2</td><td>LocalStack</td><td>0.11.5</td></tr><tr><td>3</td><td>Terraform</td><td>0.13.2</td></tr></tbody></table><ul><li>Goの主要ライブラリのバージョン</li></ul><table><thead><tr><th>#</th><th>ソフトウェア/ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td>1</td><td>go-swagger/go-swagger</td><td>0.25.0</td></tr><tr><td>2</td><td>guregu/dynamo</td><td>1.19.1</td></tr></tbody></table><ul><li>LocalStackの起動</li></ul><p>ローカル開発にはDockerを使ってLocalStackを動かしていきます。LocalStackはバージョン <code>0.11.0</code> からすべてのサービスに <code>4566</code> ポートを使います。<code>0.10.x</code> 以下のバージョンと使用するポートが異なるため、古いバージョンを利用している方は注意してください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -p 4566:4566 -e SERVICES&#x3D;dynamodb -e DEFAULT_REGION&#x3D;ap-northeast-1 localstack&#x2F;localstack:0.11.5</span><br></pre></td></tr></table></figure><ul><li>AWS CLIのインストール、設定</li></ul><p>また、Lambda関数のデプロイなどに <code>aws</code> コマンドを使いますので、<a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2.html" target="_blank" rel="noopener">AWS CLI バージョン 2 のインストール</a>を参考にAWS CLIをインストールしましょう。使っているOSのインストール手順に従ってインストールしてください。</p><p>以下のように出力されれば成功です。(以下はWindowsの例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws --version</span><br><span class="line">aws-cli&#x2F;2.0.48 Python&#x2F;3.7.7 Windows&#x2F;10 exe&#x2F;AMD64</span><br></pre></td></tr></table></figure><p>CLIでAWSのリソースにアクセスできるように設定しておきましょう。デフォルトのプロファイルとして設定しています。必要に応じてプロファイル名を指定することができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws configure</span><br><span class="line">AWS Access Key ID [None]: access-key-ID</span><br><span class="line">AWS Secret Access Key [None]: secret-access-key</span><br><span class="line">Default region name [None]: ap-notrheast-1</span><br><span class="line">Default output format [None]: json</span><br></pre></td></tr></table></figure><p>テスト用にダミー用の <code>local</code> プロファイルも設定しておきましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws configure --profile local</span><br><span class="line">AWS Access Key ID [None]: dummy</span><br><span class="line">AWS Secret Access Key [None]: dummy</span><br><span class="line">Default region name [None]: ap-notrheast-1</span><br><span class="line">Default output format [None]: json</span><br></pre></td></tr></table></figure><h1 id="インフラ構築"><a href="#インフラ構築" class="headerlink" title="インフラ構築"></a>インフラ構築</h1><p>AWS上に構築するインフラはTerraformで使います。一時的な動作確認で使うリソースの場合GUIでポチポチリソースを作成しても問題ないですが、業務でインフラを構築する場合はAWS CloudFormationやTerraformを使うことが一般的です。GUIでポチポチする際に暗黙的に作成されるリソースもしっかり把握していきましょう。</p><p>Terraformに関しては</p><ul><li><a href="https://future-architect.github.io/articles/20190816/">はじめてのTerraform 0.12 ～環境構築～</a></li><li><a href="https://future-architect.github.io/articles/20190816/">はじめてのTerraform 0.12 ～実践編～</a></li></ul><p>の記事もあわせて見てみてください。その他にも技術ブログに<a href="https://future-architect.github.io/tags/Terraform/">Terraform</a>に関する記事がたくさんあります。</p><p>またHashiCorp Learnのドキュメントも参考になります。</p><ul><li><a href="https://learn.hashicorp.com/tutorials/terraform/lambda-api-gateway" target="_blank" rel="noopener">Serverless Applications with AWS Lambda and API Gateway</a></li></ul><p>Terraformは<a href="https://learn.hashicorp.com/tutorials/terraform/install-cli" target="_blank" rel="noopener">Install Terraform</a>を参考に2020年9月にリリースしたv0.13.2をインストールしておきます。v0.12.xでも問題ないです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform -v</span><br><span class="line">Terraform v0.13.2</span><br></pre></td></tr></table></figure><p>今回はローカルPCから <code>terraform</code> コマンドを実行してAWSにリソースを作っていきます。</p><p>最終的なファイル構成は以下のようになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── api_gateway_deployment.tf</span><br><span class="line">├── api_gateway_integration.tf</span><br><span class="line">├── api_gateway_method.tf</span><br><span class="line">├── api_gateway_resource.tf</span><br><span class="line">├── api_gateway_rest_api.tf</span><br><span class="line">├── assume_role</span><br><span class="line">│   └── Lambda.json</span><br><span class="line">├── dummy_function.zip</span><br><span class="line">├── dynamodb_table.tf</span><br><span class="line">├── iam_policy.tf</span><br><span class="line">├── iam_policy_document.tf</span><br><span class="line">├── iam_role.tf</span><br><span class="line">├── iam_role_policy_attachment.tf</span><br><span class="line">├── Lambda_function.tf</span><br><span class="line">├── Lambda_permission.tf</span><br><span class="line">└── provider.tf</span><br></pre></td></tr></table></figure><p>まずはプロバイダの設定をしておきます。</p><ul><li>provider.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">"aws"</span> &#123;</span><br><span class="line">  region = <span class="string">"ap-northeast-1"</span></span><br><span class="line">  <span class="built_in">alias</span> = <span class="string">"ap-northeast-1"</span></span><br><span class="line">  version = <span class="string">"&gt;= 3.7.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>provider.tf</code> を記述したら <code>terraform init</code> をしましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ terraform init</span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Finding hashicorp&#x2F;aws versions matching &quot;&gt;&#x3D; 3.7.0&quot;...</span><br><span class="line">- Installing hashicorp&#x2F;aws v3.7.0...</span><br><span class="line">- Installed hashicorp&#x2F;aws v3.7.0 (signed by HashiCorp)</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">You may now begin working with Terraform. Try running &quot;terraform plan&quot; to see</span><br><span class="line">any changes that are required for your infrastructure. All Terraform commands</span><br><span class="line">should now work.</span><br><span class="line"></span><br><span class="line">If you ever set or change modules or backend configuration for Terraform,</span><br><span class="line">rerun this command to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to do so if necessary.</span><br></pre></td></tr></table></figure><p>続いてAPI GatewayとLambda関数を実装します。まずはLambda関数とAPI Gatewayで必要なIAMを記述します。API GatewayはLambda関数を呼び出す操作、Lambda関数ではCloudWatch Logsにログを書き込む操作、DynamoDBを操作するIAMを定義します。</p><ul><li>iam_policy_document.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">data <span class="string">"aws_iam_policy_document"</span> <span class="string">"example_api_policy"</span> &#123;</span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = <span class="string">"Allow"</span></span><br><span class="line">    principals &#123;</span><br><span class="line">      <span class="built_in">type</span> = <span class="string">"*"</span></span><br><span class="line">      identifiers = [</span><br><span class="line">      <span class="string">"*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    actions = [</span><br><span class="line">      <span class="string">"execute-api:Invoke"</span></span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">"arn:aws:execute-api:ap-northeast-1:*:*/*/*"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">"aws_iam_policy_document"</span> <span class="string">"example_lambda"</span> &#123;</span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = <span class="string">"Allow"</span></span><br><span class="line">    actions = [</span><br><span class="line">      <span class="string">"logs:CreateLogGroup"</span>,</span><br><span class="line">      <span class="string">"logs:CreateLogStream"</span>,</span><br><span class="line">      <span class="string">"logs:PutLogEvents"</span></span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">    <span class="string">"arn:aws:logs:*:*:*"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のポリシードキュメントをIAMポリシーとして定義します。</p><ul><li>iam_policy.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_iam_policy"</span> <span class="string">"example_lambda"</span> &#123;</span><br><span class="line">  name   = <span class="string">"example-lambda"</span></span><br><span class="line">  policy = data.aws_iam_policy_document.example_lambda.json</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IAMロールを定義します。</p><ul><li>iam_role.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_iam_role"</span> <span class="string">"example_lambda"</span> &#123;</span><br><span class="line">  name               = <span class="string">"example-lambda"</span></span><br><span class="line">  assume_role_policy = file(<span class="string">"assume_role/lambda.json"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>信頼ポリシーは以下のようになります。</p><ul><li>assume_role/lambda.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">  <span class="attr">"Statement"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Action"</span>: <span class="string">"sts:AssumeRole"</span>,</span><br><span class="line">      <span class="attr">"Principal"</span>: &#123;</span><br><span class="line">        <span class="attr">"Service"</span>: <span class="string">"lambda.amazonaws.com"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">      <span class="attr">"Sid"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先程記述したIAMロールにIAMポリシーをアタッチします。</p><ul><li>iam_role_policy_attachment.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_iam_role_policy_attachment"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  role       = aws_iam_role.example_lambda.name</span><br><span class="line">  policy_arn = aws_iam_policy.example_lambda.arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IAMの設定は以上で完了です。</p><p>続いてAPI GatewayのRESTのリソースを作っていきましょう。先程作成したIAMポリシードキュメントを使います。</p><ul><li>api_gateway_rest_api.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_rest_api"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  name        = <span class="string">"example-api"</span></span><br><span class="line">  description = <span class="string">"example serverless api"</span></span><br><span class="line">  policy      = data.aws_iam_policy_document.example_api_policy.json</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>api_gateway_resource.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_resource"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  rest_api_id = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  parent_id   = aws_api_gateway_rest_api.example_api.root_resource_id</span><br><span class="line">  path_part   = <span class="string">"&#123;proxy+&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>APIリクエストに対する認可はなしにします。必要な場合は <code>authorization</code> パラメータを用いて設定します。</p><ul><li>api_gateway_method.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_method"</span> <span class="string">"example_api_get"</span> &#123;</span><br><span class="line">  authorization = <span class="string">"NONE"</span></span><br><span class="line">  http_method   = <span class="string">"GET"</span></span><br><span class="line">  resource_id   = aws_api_gateway_resource.example_api.id</span><br><span class="line">  rest_api_id   = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_api_gateway_method"</span> <span class="string">"example_api_post"</span> &#123;</span><br><span class="line">  authorization = <span class="string">"NONE"</span></span><br><span class="line">  http_method   = <span class="string">"POST"</span></span><br><span class="line">  resource_id   = aws_api_gateway_resource.example_api.id</span><br><span class="line">  rest_api_id   = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambdaプロキシ統合のGETリクエストを実装する場合においても <code>integration_http_method</code> パラメータは <code>POST</code> と設定する必要があります。</p><ul><li>api_gateway_integration.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_integration"</span> <span class="string">"example_api_get"</span> &#123;</span><br><span class="line">  rest_api_id             = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  resource_id             = aws_api_gateway_method.example_api_get.resource_id</span><br><span class="line">  http_method             = aws_api_gateway_method.example_api_get.http_method</span><br><span class="line">  <span class="comment"># "GET"ではなく"POST"にする必要がある</span></span><br><span class="line">  integration_http_method = <span class="string">"POST"</span></span><br><span class="line">  <span class="built_in">type</span>                    = <span class="string">"AWS_PROXY"</span></span><br><span class="line">  uri                     = aws_lambda_function.example_api.invoke_arn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_api_gateway_integration"</span> <span class="string">"example_api_post"</span> &#123;</span><br><span class="line">  rest_api_id             = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  resource_id             = aws_api_gateway_method.example_api_post.resource_id</span><br><span class="line">  http_method             = aws_api_gateway_method.example_api_post.http_method</span><br><span class="line">  integration_http_method = <span class="string">"POST"</span></span><br><span class="line">  <span class="built_in">type</span>                    = <span class="string">"AWS_PROXY"</span></span><br><span class="line">  uri                     = aws_lambda_function.example_api.invoke_arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>api_gateway_deployment.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_deployment"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_api_gateway_integration.example_api_get,</span><br><span class="line">    aws_api_gateway_integration.example_api_post,</span><br><span class="line">  ]</span><br><span class="line">  rest_api_id       = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  stage_name        = <span class="string">"test"</span></span><br><span class="line">  stage_description = <span class="string">"test stage"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GETリクエストやPOSTリクエストを呼び出したときに起動するLambda関数のリソースを定義していないため、上記のtfファイルはエラーになります。Lambda関数のリソースを作ります。</p><p>Lambda関数はアプリケーション側からデプロイできるようにTerraform側ではLambda関数の初期構築時のみ使用するダミーのzipファイルを使って構築するのがおすすめです。</p><p>Lambdaの <code>handler</code> パラメータは、ビルドして生成した実行可能なファイル名と同じである必要があります。</p><ul><li>lambda_function.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_lambda_function"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  filename      = <span class="string">"dummy_function.zip"</span></span><br><span class="line">  function_name = <span class="string">"example-api"</span></span><br><span class="line">  role          = aws_iam_role.example_lambda.arn</span><br><span class="line">  handler       = <span class="string">"lambda"</span></span><br><span class="line">  runtime       = <span class="string">"go1.x"</span></span><br><span class="line"></span><br><span class="line">  memory_size = 128</span><br><span class="line">  timeout     = 900</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda関数をAPI Gatewayから呼び出せるように明示的に許可します。</p><ul><li>lambda_permission.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_lambda_permission"</span> <span class="string">"example_apigateway_lambda"</span> &#123;</span><br><span class="line">  action        = <span class="string">"lambda:InvokeFunction"</span></span><br><span class="line">  function_name = aws_lambda_function.example_api.function_name</span><br><span class="line">  principal     = <span class="string">"apigateway.amazonaws.com"</span></span><br><span class="line"></span><br><span class="line">  source_arn = <span class="string">"<span class="variable">$&#123;aws_api_gateway_rest_api.example_api.execution_arn&#125;</span>/*/*/*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dummy_function.zip</code> はビルド可能な適当な <code>main.go</code> を <code>dummy_function</code> に格納してzip化しておきます。ファイルが存在しないとエラーになります。</p><ul><li>dummy_function/main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API GatewayとLambda関数のリソースを作成する準備が整いました。<code>terraform plan</code> <code>terraform apply</code> をしてリソースを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply</span><br><span class="line">...</span><br><span class="line">(省略)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="Goのアプリケーション開発"><a href="#Goのアプリケーション開発" class="headerlink" title="Goのアプリケーション開発"></a>Goのアプリケーション開発</h1><p>WebAPI開発です。今回はサンプルアプリケーションなのでGETとPOSTだけ対応している以下の2つのパスを用意します。</p><table><thead><tr><th>メソッド</th><th>パス</th><th>説明</th></tr></thead><tbody><tr><td>GET</td><td><code>/v1/users</code></td><td>登録されているユーザ一覧を返却します</td></tr><tr><td>POST</td><td><code>/v1/users</code></td><td>ユーザを登録します</td></tr></tbody></table><p>それでは <code>go mod init</code> として開発を始めていきましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go mod init example</span><br></pre></td></tr></table></figure><h2 id="API定義"><a href="#API定義" class="headerlink" title="API定義"></a>API定義</h2><p>GoのWebアプリケーションフレームワークはEchoやGinやchiやgo-swaggerなどいろいろありますが、今回はgo-swaggerを用いることにします。どのWebアプリケーションフレームワークを使うかはGopherの間でも意見が分かれるところなので、使い慣れたWebアプリケーションフレームがあれば、それを使うのもよしです。上記のメソッドとパスをSwaggerで記述していきます。<code>swagger.yaml</code> にすると以下のようになります。ちなみにSwaggerの書き方・規約は<a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a> の記事がオススメです。</p><details><summary>swagger.yaml</summary><div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">"2.0"</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">"1.0.0"</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">"Example app"</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">"A Example app for serverless api"</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">"localhost:18888"</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">"/v1"</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"http"</span></span><br><span class="line"><span class="attr">consumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"application/json"</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"application/json"</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">ユーザAPI</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">ユーザ一覧取得</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">getUsers</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">'200':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Success</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/users'</span></span><br><span class="line">        <span class="attr">'400':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line">        <span class="attr">'500':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">ユーザ登録</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">postUsers</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">in:</span> <span class="string">body</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">postUsers</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/user'</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">登録するユーザ情報</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">'200':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Success</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/user'</span></span><br><span class="line">        <span class="attr">'400':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line">        <span class="attr">'500':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">users:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">users</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">ユーザ一覧</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">'#/definitions/user'</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">User</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">ユーザ</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">user_id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">x-omitempty:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">ユーザID</span></span><br><span class="line">      <span class="attr">name:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">x-omitempty:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">ユーザ名</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">user_id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">name</span></span><br><span class="line">  <span class="attr">Error:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">Error</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">エラー</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">message:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">エラーメッセージ</span></span><br></pre></td></tr></table></figure></div></details><p><code>go-swagger</code> は<a href="https://goswagger.io/install.html" target="_blank" rel="noopener">Installing</a>を参考にインストールします。今回は2020/09/23現在の最新バージョンである <code>0.25.0</code> をインストールします。以下のように出力されていればOKです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ swagger version</span><br><span class="line">version: v0.25.0</span><br><span class="line">commit: f032690aab0634d97e2861a708d8fd9365ba77d2</span><br></pre></td></tr></table></figure><h2 id="データストア"><a href="#データストア" class="headerlink" title="データストア"></a>データストア</h2><p>ユーザの情報を格納するDynamoDBのテーブル名は <code>users</code> としておきます。スキーマは以下です。</p><table><thead><tr><th>論理名</th><th>物理名</th><th align="center">キー</th></tr></thead><tbody><tr><td>ユーザID</td><td>user_id</td><td align="center">ハッシュキー</td></tr><tr><td>ユーザ名</td><td>user_name</td><td align="center">-</td></tr></tbody></table><p>ついでにTerraformを用いてAWS上にリソースを作成しましょう。キャパシティはオンデマンドモードにしておきます。</p><ul><li>dynamodb_table.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_dynamodb_table"</span> <span class="string">"example_users"</span> &#123;</span><br><span class="line">  name         = <span class="string">"example-users"</span></span><br><span class="line">  billing_mode = <span class="string">"PAY_PER_REQUEST"</span></span><br><span class="line"></span><br><span class="line">  hash_key = <span class="string">"user_id"</span></span><br><span class="line"></span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">"user_id"</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">"S"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda関数の環境変数からDynamoDBのテーブル名を取得できるようにLambda関数の環境変数に追加しておきます。環境変数でDynamoDBのテーブル名を設定できるようにしておくと、ローカルでのテストする際にAWS上に構築するテーブル名と別の名前を指定でき、便利です。</p><ul><li>lambda_function.tf</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resource "aws_lambda_function" "example_api" &#123;</span><br><span class="line">  filename      = "dummy_function.zip"</span><br><span class="line">  function_name = "example-api"</span><br><span class="line">  role          = aws_iam_role.example_lambda.arn</span><br><span class="line">  handler       = "lambda"</span><br><span class="line">  runtime       = "go1.x"</span><br><span class="line"></span><br><span class="line">  memory_size = 128</span><br><span class="line">  timeout     = 900</span><br><span class="line"></span><br><span class="line"><span class="addition">+  environment &#123;</span></span><br><span class="line"><span class="addition">+    variables = &#123;</span></span><br><span class="line"><span class="addition">+      DYNAMO_TABLE_USERS: aws_dynamodb_table.example_users.name</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data "aws_iam_policy_document" "example_lambda_policy" &#123;</span><br><span class="line"><span class="addition">+  statement &#123;</span></span><br><span class="line"><span class="addition">+    effect = "Allow"</span></span><br><span class="line"><span class="addition">+    actions = [</span></span><br><span class="line"><span class="addition">+      "dynamodb:*"</span></span><br><span class="line"><span class="addition">+    ]</span></span><br><span class="line"><span class="addition">+    resources = [</span></span><br><span class="line"><span class="addition">+      "*"]</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = "Allow"</span><br><span class="line">    actions = [</span><br><span class="line">      "logs:CreateLogGroup",</span><br><span class="line">      "logs:CreateLogStream",</span><br><span class="line">      "logs:PutLogEvents"</span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">      "arn:aws:logs:*:*:*"]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新しいリソースを定義したら <code>terraform apply</code> しておきます。</p><h2 id="パッケージ構成"><a href="#パッケージ構成" class="headerlink" title="パッケージ構成"></a>パッケージ構成</h2><p>ちょっとしたLambda関数であれば <code>main.go</code> の1ファイルで良い場合もありますが、バックエンドのWebAPIを提供するとなるとそうはいかないでしょう。Goのパッケージ構成は悩みポイントの一つです。プロジェクトの規模や開発メンバのスキルセットなどにもよると思いますが、個人的にはフラットなパッケージ構成を導入することが多い気がします。<a href="https://future-architect.github.io/articles/20200528/">あなたのGoアプリ/ライブラリのパッケージ構成もっとシンプルでよくない？</a>や<a href="https://future-architect.github.io/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a>の記事を参考にしてみてください。今回は以下のようなフラットパッケージとします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Makefile                 <span class="comment"># タスク定義</span></span><br><span class="line">├── README.md</span><br><span class="line">├── cmd/lambda/main.go       <span class="comment"># Lambda関数を起動するmainファイル</span></span><br><span class="line">├── db.go                    <span class="comment"># DynamoDBの接続</span></span><br><span class="line">├── gen                      <span class="comment"># go-swaggerで自動生成するファイル</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── swagger.yaml             <span class="comment"># swagger spec</span></span><br><span class="line">├── testdata                 <span class="comment"># テスト</span></span><br><span class="line">├── user_handler.go          <span class="comment"># ハンドラの実装</span></span><br><span class="line">├── user_handler_db.go       <span class="comment"># 永続化層へのアクセスファイル</span></span><br><span class="line">└── user_handler_test.go     <span class="comment"># ハンドラのテスト</span></span><br></pre></td></tr></table></figure><p>以下のようにディレクトリを作っておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p %GOPATH%\src\github.com\d-tsuji\example</span><br><span class="line">$ <span class="built_in">cd</span> example</span><br><span class="line">$ mkdir cmd\lambda gen testdata</span><br></pre></td></tr></table></figure><h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><p>ビルドなどのタスクはMakefileに記述しておきます。</p><ul><li>Makefile</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.PHONY: deps</span><br><span class="line">deps:</span><br><span class="line">go mod download</span><br><span class="line">go mod tidy</span><br><span class="line"></span><br><span class="line">.PHONY: build</span><br><span class="line">build: deps</span><br><span class="line">GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">"-s -w"</span> -trimpath -o bin/lambda cmd/lambda/main.go</span><br><span class="line"></span><br><span class="line">.PHONY: <span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_USERS=local_users;\</span><br><span class="line">go <span class="built_in">test</span> -race -v -count=1 ./</span><br><span class="line"></span><br><span class="line">.PHONY: generate-server</span><br><span class="line">generate-server:</span><br><span class="line">rm -rf ./gen/models ./gen/restapi/operations</span><br><span class="line">swagger generate server --exclude-main -f ./swagger.yaml -t gen</span><br><span class="line"></span><br><span class="line">.PHONY: zip</span><br><span class="line">zip: build</span><br><span class="line">zip -j bin/lambda.zip bin/lambda</span><br><span class="line"></span><br><span class="line">.PHONY: deploy</span><br><span class="line">deploy: zip</span><br><span class="line">aws lambda update-function-code --region ap-northeast-1 --<span class="keyword">function</span>-name example-api --zip-file fileb://bin/lambda.zip</span><br></pre></td></tr></table></figure><p>先程作成した <code>swagger.yml</code> のAPI定義を元に <code>make generate-server</code> で <code>go-swagger</code> でコードを生成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ make generate-server</span><br><span class="line">swagger generate server --exclude-main -f ./swagger.yaml -t gen</span><br><span class="line">2020/09/15 22:17:26 validating spec C:\Users\dramt\go\src\github.com\d-tsuji\example\swagger.yaml</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">2020/09/15 22:17:27 executed template asset:serverDoc</span><br><span class="line">2020/09/15 22:17:27 Generation completed!</span><br><span class="line"></span><br><span class="line">For this generation to compile you need to have some packages <span class="keyword">in</span> your GOPATH:</span><br><span class="line"></span><br><span class="line">        * github.com/go-openapi/runtime</span><br><span class="line">        * github.com/jessevdk/go-flags</span><br><span class="line"></span><br><span class="line">You can get these now with: go get -u -f gen/...</span><br></pre></td></tr></table></figure><p><code>go-swagger</code> で生成したファイルでビルドに必要なモジュールを <code>go.mod</code> に追加します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/go-openapi/runtime</span><br><span class="line">$ go get github.com/jessevdk/go-flags</span><br></pre></td></tr></table></figure><h2 id="ハンドラ実装"><a href="#ハンドラ実装" class="headerlink" title="ハンドラ実装"></a>ハンドラ実装</h2><p>準備が整ったので、ハンドラの実装をしていきましょう。</p><p>まずは <code>db.go</code> を実装してDynamoDBに接続します。ローカルでの開発の場合は <code>4566</code> ポートで起動しているLocalStackに接続します。DynamoDBのGoのクライアントライブラリは</p><ul><li><a href="https://github.com/aws/aws-sdk-go" target="_blank" rel="noopener"><code>aws/aws-sdk-go</code></a></li><li><a href="https://github.com/guregu/dynamo" target="_blank" rel="noopener"><code>guregu/dynamo</code></a></li><li><a href="https://github.com/google/go-cloud" target="_blank" rel="noopener"><code>google/go-cloud</code></a></li></ul><p>などがあります。個人的なおすすめは <code>guregu/dynamo</code> です。本チュートリアルでは <code>guregu/dynamo</code> を利用することにします。<code>guregu/dynamo</code> の使い方については「<a href="https://future-architect.github.io/articles/20200225/">DynamoDB×Go連載#1 GoでDynamoDBでおなじみのguregu/dynamoを利用する</a>」の記事も見てみてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/guregu/dynamo</span><br></pre></td></tr></table></figure><ul><li>db.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/guregu/dynamo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">gdb    *dynamo.DB</span><br><span class="line">region <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">usersTable <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">region = os.Getenv(<span class="string">"AWS_REGION"</span>)</span><br><span class="line"></span><br><span class="line">usersTable = os.Getenv(<span class="string">"DYNAMO_TABLE_USERS"</span>)</span><br><span class="line"><span class="keyword">if</span> usersTable == <span class="string">""</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"missing env variable: DYNAMO_TABLE_USERS"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gdb = dynamo.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Region: aws.String(region),</span><br><span class="line">&#125;)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いてハンドラの実装します。まずは以下の <code>GET</code> を扱うハンドラから実装していきます。</p><table><thead><tr><th>メソッド</th><th>パス</th><th>説明</th></tr></thead><tbody><tr><td>GET</td><td><code>/v1/users</code></td><td>登録されているユーザ一覧を返却します</td></tr></tbody></table><p>DynamoDBから登録されているすべてのユーザを取得する処理を実装します。</p><p>DynamoDBとマッピングするモデルは以下です。</p><ul><li>dynamo_model.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">UserID   <span class="keyword">string</span> <span class="string">`dynamo:"user_id,hash"`</span></span><br><span class="line">UserName <span class="keyword">string</span> <span class="string">`dynamo:"user_name"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テーブルから全アイテム取得するためにScanを行います。</p><ul><li>user_handler_db.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/guregu/dynamo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scanUsers</span><span class="params">(ctx context.Context)</span> <span class="params">([]User, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> resp []User</span><br><span class="line">table := gdb.Table(usersTable)</span><br><span class="line"><span class="keyword">if</span> err := table.Scan().AllWithContext(ctx, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 0件の場合も正常とします</span></span><br><span class="line"><span class="keyword">if</span> errors.Is(err, dynamo.ErrNotFound) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いて上記を使ったハンドラを実装します。</p><ul><li>user_handler.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/models"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi/operations"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/runtime/middleware"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUsers</span><span class="params">(p operations.GetUsersParams)</span> <span class="title">middleware</span>.<span class="title">Responder</span></span> &#123;</span><br><span class="line">ctx := p.HTTPRequest.Context()</span><br><span class="line">users, err := scanUsers(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> operations.NewGetUsersInternalServerError().WithPayload(&amp;models.Error&#123;</span><br><span class="line">Message: fmt.Sprintf(<span class="string">"scan users error: %v"</span>, err),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resp models.Users</span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> users &#123;</span><br><span class="line">u := u</span><br><span class="line">resp = <span class="built_in">append</span>(resp, &amp;models.User&#123;</span><br><span class="line">UserID: &amp;u.UserID,</span><br><span class="line">Name:   &amp;u.UserName,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> operations.NewGetUsersOK().WithPayload(resp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ハンドラのテストも実装しましょう。テスト時はDynamoDBの接続先をLocalStackに上書きして、テスト用の設定にします。パッケージ構成によっては接続先の値は関数の引数で渡す、などが必要になるでしょう。</p><p>単体テストは実装の詳細をテストしないように、粒度を粗めにしておきます。ハンドラのリクエストに対して想定するJSONのレスポンスが取得できているかどうか確認します。テストファイルは <code>want_get_users_1.json</code> <code>want_get_users_2.json</code> としておきます。</p><ul><li>user_handler_test.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/models"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi/operations"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/runtime"</span></span><br><span class="line"><span class="string">"github.com/guregu/dynamo"</span></span><br><span class="line"><span class="string">"github.com/nsf/jsondiff"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">dbEndpoint := <span class="string">"http://localhost:4566"</span></span><br><span class="line">sess := session.Must(session.NewSessionWithOptions(session.Options&#123;</span><br><span class="line">Profile:           <span class="string">"local"</span>,</span><br><span class="line">SharedConfigState: session.SharedConfigEnable,</span><br><span class="line">Config: aws.Config&#123;</span><br><span class="line">Endpoint:   aws.String(dbEndpoint),</span><br><span class="line">DisableSSL: aws.Bool(<span class="literal">true</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;))</span><br><span class="line">gdb = dynamo.New(sess)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name           <span class="keyword">string</span></span><br><span class="line">input          <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span></span><br><span class="line">wantStatusCode <span class="keyword">int</span></span><br><span class="line">want           <span class="keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"複数件のユーザの取得"</span>,</span><br><span class="line">input: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">err := gdb.CreateTable(usersTable, User&#123;&#125;).Provision(<span class="number">1</span>, <span class="number">1</span>).RunWithContext(context.TODO())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"dynamo create table %s: %v"</span>, usersTable, err)</span><br><span class="line">&#125;</span><br><span class="line">inputUsers := []User&#123;&#123;UserID: <span class="string">"001"</span>, UserName: <span class="string">"gopher"</span>&#125;, &#123;UserID: <span class="string">"002"</span>, UserName: <span class="string">"rubyist"</span>&#125;&#125;</span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> inputUsers &#123;</span><br><span class="line"><span class="keyword">if</span> err := gdb.Table(usersTable).Put(u).RunWithContext(context.TODO()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"dynamo input user %v: %v"</span>, u, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">wantStatusCode: <span class="number">200</span>,</span><br><span class="line">want:           <span class="string">"./testdata/want_get_users_1.json"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"ユーザ0件"</span>,</span><br><span class="line">input: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">err := gdb.CreateTable(usersTable, User&#123;&#125;).Provision(<span class="number">1</span>, <span class="number">1</span>).RunWithContext(context.TODO())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"dynamo create table %s: %v"</span>, usersTable, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">wantStatusCode: <span class="number">200</span>,</span><br><span class="line">want:           <span class="string">"./testdata/want_get_users_2.json"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tt.input(t)</span><br><span class="line">t.Cleanup(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := gdb.Table(usersTable).DeleteTable().RunWithContext(context.TODO()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"dynamo delete table %s: %v"</span>, usersTable, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p := operations.NewGetUsersParams()</span><br><span class="line">p.HTTPRequest = httptest.NewRequest(<span class="string">"GET"</span>, <span class="string">"/v1/users"</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">resp := GetUsers(p)</span><br><span class="line"></span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line">resp.WriteResponse(w, runtime.JSONProducer())</span><br><span class="line"></span><br><span class="line">want, err := ioutil.ReadFile(tt.want)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"want file read: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> w.Result().StatusCode != tt.wantStatusCode &#123;</span><br><span class="line">t.Errorf(<span class="string">"status got %v, but want %v"</span>, w.Result().StatusCode, tt.wantStatusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opt := jsondiff.DefaultConsoleOptions()</span><br><span class="line"><span class="keyword">if</span> d, s := jsondiff.Compare(w.Body.Bytes(), want, &amp;opt); d != jsondiff.FullMatch &#123;</span><br><span class="line">t.Errorf(<span class="string">"unmatch, got=%s, want=%s, diff=%s"</span>, <span class="keyword">string</span>(w.Body.Bytes()), <span class="keyword">string</span>(want), s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>testdata/want_get_users_1.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"user_id"</span>: <span class="string">"001"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"gopher"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"user_id"</span>: <span class="string">"002"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"rubyist"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>testdata/want_get_users_2.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><p>Goのテストを実行するとPASSすることがわかります。ハンドラの実装ができました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ make <span class="built_in">test</span></span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_USERS=local_users;\</span><br><span class="line">        go <span class="built_in">test</span> -race -v -count=1 ./</span><br><span class="line">=== RUN   TestGetUsers</span><br><span class="line">=== RUN   TestGetUsers/複数件のユーザの取得</span><br><span class="line">=== RUN   TestGetUsers/ユーザ0件</span><br><span class="line">--- PASS: TestGetUsers (0.39s)</span><br><span class="line">    --- PASS: TestGetUsers/複数件のユーザの取得 (0.30s)</span><br><span class="line">    --- PASS: TestGetUsers/ユーザ0件 (0.09s)</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/example      0.428s</span><br></pre></td></tr></table></figure><p>POSTのハンドラも同様に実装・テストできますが、本チュートリアルでは省略します。本チュートリアルの内容はGitHubにコミットしてあるので、そちらを参照ください。</p><p><code>go-swagger</code> はハンドラの実装とHTTPリクエストのパスのマッピングを自動生成したファイルの中に記述します。今回の場合は <code>configure_example_app.go</code> です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This file is safe to edit. Once it exists it will not be overwritten</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> restapi</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureAPI</span><span class="params">(api *operations.ExampleAppAPI)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="comment">// configure the api here</span></span><br><span class="line">api.ServeError = errors.ServeError</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set your custom logger if needed. Default one is log.Printf</span></span><br><span class="line"><span class="comment">// Expected interface func(string, ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="comment">// api.Logger = log.Printf</span></span><br><span class="line"></span><br><span class="line">api.JSONConsumer = runtime.JSONConsumer()</span><br><span class="line"></span><br><span class="line">api.JSONProducer = runtime.JSONProducer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==================================================================================</span></span><br><span class="line"><span class="comment">// userハンドラ</span></span><br><span class="line"><span class="comment">// 以下のように実装したハンドラをHTTPサーバに紐付けます。</span></span><br><span class="line">api.GetUsersHandler = operations.GetUsersHandlerFunc(example.GetUsers)</span><br><span class="line">api.PostUsersHandler = operations.PostUsersHandlerFunc(example.PostUsers)</span><br><span class="line"><span class="comment">// ==================================================================================</span></span><br><span class="line"></span><br><span class="line">api.PreServerShutdown = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">api.ServerShutdown = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> setupGlobalMiddleware(api.Serve(setupMiddlewares))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="Lambda関数インテグレーション"><a href="#Lambda関数インテグレーション" class="headerlink" title="Lambda関数インテグレーション"></a>Lambda関数インテグレーション</h2><p>go-swaggerで実装したWebアプリケーションサーバをLambda関数として動かすようにします。GoのLambda関数として有効なシグネチャは以下の通りです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- func ()</span><br><span class="line">- func () error</span><br><span class="line">- func (TIn), error</span><br><span class="line">- func () (TOut, error)</span><br><span class="line">- func (context.Context) error</span><br><span class="line">- func (context.Context, TIn) error</span><br><span class="line">- func (context.Context) (TOut, error)</span><br><span class="line">- func (context.Context, TIn) (TOut, error)</span><br></pre></td></tr></table></figure><p><code>TIn</code> や <code>TOut</code> は <code>encoding/json</code> でエンコード・デコードできる型を指定できます。</p><p>Lambda関数はAPI Gatewayのリクエストをトリガーに起動します。Lambda関数のAPI Gatewayのリクエスト <code>events.APIGatewayProxyResponse</code> をGoのHTTPサーバで扱えるような <code>*http.Request</code> に変換する必要があります。</p><ul><li><a href="https://github.com/awslabs/aws-lambda-go-api-proxy" target="_blank" rel="noopener">awslabs/aws-lambda-go-api-proxy</a></li></ul><p>を用いると簡単に変換することができます。もちろん <code>go-swagger</code> だけでなく主要なGoのWebアプリケーションフレームに対応しています。</p><ul><li>cmd/lambda/main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/awslabs/aws-lambda-go-api-proxy/httpadapter"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi/operations"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/loads"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpAdapter *httpadapter.HandlerAdapter</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handler handles API requests</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(ctx context.Context, req events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> httpAdapter == <span class="literal">nil</span> &#123;</span><br><span class="line">swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">api := operations.NewExampleAppAPI(swaggerSpec)</span><br><span class="line">server := restapi.NewServer(api)</span><br><span class="line">server.ConfigureAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment">// see https://github.com/go-swagger/go-swagger/issues/962#issuecomment-478382896</span></span><br><span class="line">httpAdapter = httpadapter.New(server.GetHandler())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> httpAdapter.ProxyWithContext(ctx, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(Handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ビルド-デプロイ"><a href="#ビルド-デプロイ" class="headerlink" title="ビルド/デプロイ"></a>ビルド/デプロイ</h1><p>準備は整いました！Goのファイルをビルドしzip化してAWS Lambda関数にデプロイしましょう。デプロイのコマンドはMakefileにタスクとして記述していました。</p><ul><li>Makefile</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">deploy: zip</span></span><br><span class="line">aws lambda update-function-code --region ap-northeast-1 --function-name example-api --zip-file fileb://bin/lambda.zip</span><br></pre></td></tr></table></figure><p>それではビルドしてデプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ make deploy</span><br><span class="line">go mod download</span><br><span class="line">go mod tidy</span><br><span class="line">GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=<span class="string">"-s -w"</span> -trimpath -o bin/lambda cmd/lambda/main.go</span><br><span class="line">zip -j bin/lambda.zip bin/lambda</span><br><span class="line">updating: lambda (deflated 67%)</span><br><span class="line">aws lambda update-function-code --region ap-northeast-1 --<span class="keyword">function</span>-name example-api --zip-file fileb://bin/lambda.zip</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"FunctionName"</span>: <span class="string">"example-api"</span>,</span><br><span class="line">    <span class="string">"FunctionArn"</span>: <span class="string">"arn:aws:lambda:ap-northeast-1:123456789012:function:example-api"</span>,</span><br><span class="line">    <span class="string">"Runtime"</span>: <span class="string">"go1.x"</span>,</span><br><span class="line">    <span class="string">"Role"</span>: <span class="string">"arn:aws:iam::123456789012:role/example-lambda"</span>,</span><br><span class="line">    <span class="string">"Handler"</span>: <span class="string">"lambda"</span>,</span><br><span class="line">    <span class="string">"CodeSize"</span>: 5517317,</span><br><span class="line">    <span class="string">"Description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"Timeout"</span>: 900,</span><br><span class="line">    <span class="string">"MemorySize"</span>: 128,</span><br><span class="line">    <span class="string">"LastModified"</span>: <span class="string">"2020-09-22T08:56:19.019+0000"</span>,</span><br><span class="line">    <span class="string">"CodeSha256"</span>: <span class="string">"bV+3mzysyD5226diZpvjfpE+Qz6o5ZHT8y35fAB3I/M="</span>,</span><br><span class="line">    <span class="string">"Version"</span>: <span class="string">"<span class="variable">$LATEST</span>"</span>,</span><br><span class="line">    <span class="string">"Environment"</span>: &#123;</span><br><span class="line">        <span class="string">"Variables"</span>: &#123;</span><br><span class="line">            <span class="string">"DYNAMO_TABLE_USERS"</span>: <span class="string">"example-users"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"TracingConfig"</span>: &#123;</span><br><span class="line">        <span class="string">"Mode"</span>: <span class="string">"PassThrough"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"RevisionId"</span>: <span class="string">"26888c1b-bfa2-4e67-960e-3fd8212e29f2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように出力されていればデプロイは完了です。継続的なデプロイを実施したい場合はdevelopブランチなどにPRがマージされたタイミングで開発環境にLambda関数をデプロイするといった内容をGitHub ActionsやCircleCIの設定に組み込むとよいでしょう。</p><p>さてCLIでDynamoDBにデータをPutして、APIのレスポンスを確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb put-item --table-name example-users --item <span class="string">'&#123;"user_id": &#123;"S": "001"&#125;, "user_name": &#123;"S": "Gopher"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>今回はお手軽にcurlでAPIにリクエストしてレスポンスを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i https://<span class="variable">$&#123;rest-api-id&#125;</span>.execute-api.ap-northeast-1.amazonaws.com/<span class="built_in">test</span>/v1/users</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 36</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Date: Mon, 21 Sep 2020 10:58:25 GMT</span><br><span class="line">x-amzn-RequestId: 89f88ada-ea48-4a60-a8ef-2b58df4309d1</span><br><span class="line">x-amz-apigw-id: TNoUxEJlNjMFdxg=</span><br><span class="line">X-Amzn-Trace-Id: Root=1-5f688751-c31c0c580cbe0f64d179578a;Sampled=0</span><br><span class="line">X-Cache: Miss from cloudfront</span><br><span class="line">Via: 1.1 48bf5adc2925386f020a8608d1c7edbe.cloudfront.net (CloudFront)</span><br><span class="line">X-Amz-Cf-Pop: NRT20-C3</span><br><span class="line">X-Amz-Cf-Id: GfDUO8SfL5POKkIVFVs5L-hJ8KkjwLCLf22xZmNWFiVkIQaHR2H4oA==</span><br><span class="line"></span><br><span class="line">[&#123;<span class="string">"name"</span>:<span class="string">"Gopher"</span>,<span class="string">"user_id"</span>:<span class="string">"001"</span>&#125;]</span><br></pre></td></tr></table></figure><p>API Gatewayから想定通りのレスポンスが返ってきました！本チュートリアルでは <code>/v1/users</code> へのGETリクエストのサンプルだけでしたが、新しいAPI定義が必要な場合 <code>swagger.yaml</code> に追加して本チュートリアルのようにすすめていけば容易に拡張することができます。</p><p>チュートリアルのすべてのサンプルはGitHubの以下のリポジトリにおいてあります。</p><table><thead><tr><th align="center">#</th><th>項目</th><th>リポジトリ</th></tr></thead><tbody><tr><td align="center">1</td><td>GoによるWebAPIの実装</td><td><a href="https://github.com/d-tsuji/serverless-api-go-tutorial" target="_blank" rel="noopener">d-tsuji/serverless-api-go-tutorial</a></td></tr><tr><td align="center">2</td><td>Terraformによるインフラ実装</td><td><a href="https://github.com/d-tsuji/serverless-api-infra-tutorial" target="_blank" rel="noopener">d-tsuji/serverless-api-infra-tutorial</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの辻です。&lt;/p&gt;
&lt;p&gt;業務アプリケーションのビジネスロジックをサーバーレスで実装することも増えてきまし
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="go-swagger" scheme="https://future-architect.github.io/tags/go-swagger/"/>
    
      <category term="サーバレス" scheme="https://future-architect.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%AC%E3%82%B9/"/>
    
  </entry>
  
</feed>
