<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Future Tech Blog - フューチャーアーキテクト</title>
  
  <subtitle>フューチャー開発者ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2019-10-16T01:11:16.386Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Software Design 後記</title>
    <link href="https://future-architect.github.io/articles/20191016/"/>
    <id>https://future-architect.github.io/articles/20191016/</id>
    <published>2019-10-15T23:56:31.000Z</published>
    <updated>2019-10-16T01:11:16.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、Strategic AI Groupの上野です。</p><p>2019年は幸運なことに、技術評論社のSoftware Designという雑誌に3回も機械学習関連の記事を執筆する機会を頂きました。</p><p>Strategic AI GroupのChief AI Officierである貞光とともに以下の3つの記事を書きました。</p><ul><li>1月号：自然言語処理・画像処理における線形代数の応用 ～データ処理アルゴリズムへの活用事例～</li><li>3月号：微分でつなぐ、機械学習とニューラルネットワーク ～データ分析も画像処理も最小二乗法で！～</li><li>9月号：数字認識APIを作って実感 ～充実した機械学習ライブラリがPythonの魅力～</li></ul><p>本記事では3回分の記事を振り返りながら、機械学習を学ぶ際のちょっとしたTipsを紹介したいと思います。</p><p>難易度順に易しい方から9月号、1月号、3月号の順に振り返っていきます。</p><h2 id="9月号：数字認識APIを作って実感-～充実した機械学習ライブラリがPythonの魅力～"><a href="#9月号：数字認識APIを作って実感-～充実した機械学習ライブラリがPythonの魅力～" class="headerlink" title="9月号：数字認識APIを作って実感 ～充実した機械学習ライブラリがPythonの魅力～"></a>9月号：数字認識APIを作って実感 ～充実した機械学習ライブラリがPythonの魅力～</h2><p>9月号では、機械学習がはじめての方向けに数字認識アプリを作ってみることを通して、機械学習への入門を果たすことを目指しました。</p><p>何はともあれ作って実感してみよう、というコンセプトです。</p><p>機械学習ではPythonがよく用いられます。Pythonには機械学習に関するライブラリが豊富にあって、それらを組み合わせることで高度な処理も容易に実現できます。</p><p>一方で、様々なライブラリがありすぎて、初心者のうちは戸惑ってしまいがちです。行列計算のためのNumPy、 深層学習のためのKeras、WebアプリケーションフレームワークのFlask…。どれも色々な機能をもっているのですが、初心者にとってはまずはそれぞれの役割を大雑把に理解するのがよいと思います。</p><p>9月号では以下のような数字認識アプリの作成を通して、それぞれのライブラリの役割を体感することができます。</p><p>まず全体像をつかんだ後に、各ライブラリの高度な使い方を学んでいくと躓きにくいと思います。この考え方は、ライブラリの習得に限らず機械学習のアルゴリズムを学ぶ際にも通じるところがあります。いきなり難しい教科書の先頭から完璧に理解していこうとすると挫折してしまいがちですが、まずは全体像を学んだ後に、各手法の詳細を勉強していくとスッキリ理解できることがあります。</p><img src="/images/20191016/sd9.png" style="border:solid 1px #000000"><p>以上のように、Pythonの豊富なライブラリを使うと高度な処理を実現できるのですが、機械学習の仕組みをキチンと理解して論文を読みこなすためにはどうしても数学を避けては通れません。</p><p>1月号と3月号では、機械学習で使われる数学を理解するために、線形代数と微分を取り上げました。</p><h2 id="1月号：自然言語処理・画像処理における線形代数の応用-～データ処理アルゴリズムへの活用事例～"><a href="#1月号：自然言語処理・画像処理における線形代数の応用-～データ処理アルゴリズムへの活用事例～" class="headerlink" title="1月号：自然言語処理・画像処理における線形代数の応用 ～データ処理アルゴリズムへの活用事例～"></a>1月号：自然言語処理・画像処理における線形代数の応用 ～データ処理アルゴリズムへの活用事例～</h2><p>1月号では機械学習の理解に必要な線形代数をテーマに、自然言語処理と画像処理での応用事例を紹介しました。</p><p>線形代数では行列の積がたくさん登場します。行列の積は形に着目すると計算を追いやすくなります。下図の同じ色の部分はサイズが一致しているということを意識しておくことがポイントです。</p><img src="/images/20191016/matrix.png" style="border:solid 1px #000000"><p>記事のなかでは、まず自然言語処理での応用事例として潜在意味インデキシング(LSI)と潜在意味解析(LDA)、そしてword2vecを紹介しました。次に、画像処理での応用事例として非負値行列因子分解(NMF)とAutoencoderを紹介しました。<br>実は、これらの手法は下の表に示すタテの繋がりもあります。タテとヨコ、両方の繋がりを意識すると、様々な手法が有機的に繋がって、おもしろいです。</p><img src="/images/20191016/sd1_1.png" style="border:solid 1px #000000"><p>では、この表の行と列を増やしてみるとどんな手法が考えられるでしょうか？</p><p>例えば、次の表が考えられます。まず行を増やすことを考えるとグラフを対象とした手法があります。グラフに対する行列因子化の適用としてPageRank、ニューラルネットワークの適用としてnode2vecがあります。次に、列についてはどうでしょうか。自然言語、画像、グラフに対して、畳み込みニューラルネットワーク(CNN)の適用が考えられます。CNNによる画像分類は有名ですが、自然言語に適用して文書分類を行うことやグラフ上で畳み込みを定義することもできます。</p><p>このようにタテとヨコの視点を意識すると新しい気づきがあるかもしれません。</p><img src="/images/20191016/sd1_2.png" style="border:solid 1px #000000"><h2 id="3月号：微分でつなぐ、機械学習とニューラルネットワーク-～データ分析も画像処理も最小二乗法で！～"><a href="#3月号：微分でつなぐ、機械学習とニューラルネットワーク-～データ分析も画像処理も最小二乗法で！～" class="headerlink" title="3月号：微分でつなぐ、機械学習とニューラルネットワーク ～データ分析も画像処理も最小二乗法で！～"></a>3月号：微分でつなぐ、機械学習とニューラルネットワーク ～データ分析も画像処理も最小二乗法で！～</h2><p>3月号では、微分をテーマに、ニューラルネットワークの学習方法である誤差逆伝播法(backpopagation)を解説しました。</p><p>初めてニューラルネットワークの学習を学ぶ際には、下図のようにニューラルネットワークの結合重みをトンカチで調整していくんだよー、というようにイメージで理解しておくのはわかりやすいと思います。</p><p>しかし、初心者を卒業してもう一歩踏み込んだ理解をするためには微分が必要になります。実は、Kerasなどの高水準フレームワークを利用している画像分類などの典型的なタスクにおいては、学習の仕組みをほとんど意識することなく学習を実行できるのですが、精度向上のためにチューニングしたり、あるいは最新の論文を理解するためにはニューラルネットワークの学習の仕組みの理解はとても役に立ちます。</p><img src="/images/20191016/BP.png" style="border:solid 1px #000000"><p>例えば、敵対的生成ネットワーク(GAN)の学習は典型的なニューラルネットワークの学習よりも複雑です。</p><p>GANは鮮明な顔画像などを生成できることで、最近注目されている手法です。GANの学習ではGeneratorとDiscriminatorという2つのニューラルネットワークを、互いにだましあうように学習させていきます。下図にGANの学習手順と疑似コードを示しています。損失関数の計算やパラメータ更新のやり方が、典型的な画像分類の学習と比べて複雑になっています。</p><p>しかし、一つ一つの要素は基本的なものでありニューラルネットワークの学習の仕組みをキチンと理解していれば、自分で実装できるようになります。</p><p>このように、基礎をキチンと学んでおくと、最新の手法の理解にも繋がります。簡単の意味の基礎ではなく多くの手法の土台となる基礎をしっかりと学んでおくとよいと思います。</p><img src="/images/20191016/GAN.png" style="border:solid 1px #000000"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Software Design 1/3/9月号を振り返りながら機械学習を学ぶ際のちょっとしたTipsを紹介してきました。<br>まとめると以下の3点です。</p><ul><li>全体像から詳細へ</li><li>タテとヨコの視点</li><li>基礎徹底</li></ul><p>以上を具体的に実践してみたい方は、ぜひ<a href="https://gihyo.jp/magazine/SD/backnumber" target="_blank" rel="noopener">Software Design</a>を読んでみてください。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20190627/">人工知能学会（JSAI2019） 参加報告</a></li><li><a href="https://future-architect.github.io/articles/20181031/">その問い合わせ、AIが解決します！～Redmineチケットレコメンドシステムのご紹介～</a></li><li><a href="https://future-architect.github.io/articles/20171030/">最新で最強、AlphaGo Zero の解説</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、Strategic AI Groupの上野です。&lt;/p&gt;
&lt;p&gt;2019年は幸運なことに、技術評論社のSoft
      
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>AWS Session Managerでセッションを切断されにくくする方法</title>
    <link href="https://future-architect.github.io/articles/20191009/"/>
    <id>https://future-architect.github.io/articles/20191009/</id>
    <published>2019-10-08T23:56:31.000Z</published>
    <updated>2019-10-09T07:45:45.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチーム<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の村瀬です。</p><p>世の中コンテナ化の流れでEC2インスタンスを直接利用する機会が減ってきていますが、まだまだサーバにSSH接続する機会もあるかと思います。</p><p>今回はSSH相当の処理をよりセキュアに行えるSession Managerについて調査・検証してみました。</p><h1 id="Session-Managerとは"><a href="#Session-Managerとは" class="headerlink" title="Session Managerとは"></a>Session Managerとは</h1><blockquote><p>Session Manager はフルマネージド型 AWS Systems Manager 機能で、インタラクティブなワンクリックブラウザベースのシェル、または AWS CLI を介して Amazon EC2 インスタンスを管理できます。Session Manager は、インバウンドポートを開いたり、踏み台ホストを維持したり、SSH キーを管理したりすることなく、安全で監査可能なインスタンスの管理を提供します。Session Manager は、Amazon EC2 インスタンスへの簡単なワンクリックのクロスプラットフォームアクセスをエンドユーザーに提供しつつ、インスタンスへの制御されたアクセス、厳格なセキュリティプラクティス、インスタンスアクセスの詳細を含む、完全に監査可能なログを必要とする企業ポリシーに準拠することを容易にします。</p></blockquote><p><a href="https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/session-manager.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/session-manager.html</a>　より</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><h3 id="手順1-サービスメニューからSystems-Managerをクリック"><a href="#手順1-サービスメニューからSystems-Managerをクリック" class="headerlink" title="手順1　サービスメニューからSystems Managerをクリック"></a>手順1　サービスメニューからSystems Managerをクリック</h3><img src="/images/20191009/1-a.png" style="border:solid 1px #000000"><h3 id="手順2-セッションマネージャーをクリック"><a href="#手順2-セッションマネージャーをクリック" class="headerlink" title="手順2　セッションマネージャーをクリック"></a>手順2　セッションマネージャーをクリック</h3><img src="/images/20191009/2-a.png" style="border:solid 1px #000000"><h3 id="手順3-セッションの開始をクリック"><a href="#手順3-セッションの開始をクリック" class="headerlink" title="手順3　セッションの開始をクリック"></a>手順3　セッションの開始をクリック</h3><img src="/images/20191009/3.png" style="border:solid 1px #000000"><h3 id="手順4-似たような画面で同名のボタンですがインスタンスを選択してセッションの開始をクリック"><a href="#手順4-似たような画面で同名のボタンですがインスタンスを選択してセッションの開始をクリック" class="headerlink" title="手順4　似たような画面で同名のボタンですがインスタンスを選択してセッションの開始をクリック"></a>手順4　似たような画面で同名のボタンですがインスタンスを選択してセッションの開始をクリック</h3><img src="/images/20191009/5.png" style="border:solid 1px #000000"><p>するとSession Managerのコンソールが表示されます。<br>あとはSSHと同じ要領でコマンドが実行できます。<br><img src="/images/20191009/6.png" style="border:solid 1px #000000"></p><h1 id="メリット"><a href="#メリット" class="headerlink" title="メリット"></a>メリット</h1><p>Session Managerを利用することで以下のメリットがあります。</p><p>・SSHが必要ないのでSSHクライアントがなくても気軽に利用できる。<br>・セキュリティグループのインバウンドのメンテナンスが不要<br>・SSHの鍵やパスフレーズの管理、ローテーションが不要</p><h1 id="困りごと"><a href="#困りごと" class="headerlink" title="困りごと"></a>困りごと</h1><p>そんな便利なSession Managerですが、プロジェクトメンバーから以下のような声が上がりました。</p><p>・セッションがすぐに切れるんだけど<br>・セッション時間が短いので伸ばしてくれない？</p><p>設定項目を見てもセッション時間の設定はありません。<br>どうやら、何らかの理由によりセッションがすぐに切断されてしまうようです。</p><p>プロジェクトメンバーはLinuxOSのEC2インスタンスに対してマネジメントコンソールにて使用している状況です。<br>その他の条件としては以下の通りです。</p><p>・エージェントのバージョン - 2.3.662.0<br>・プラットフォーム　- Amazon Linux</p><h1 id="調査・検証"><a href="#調査・検証" class="headerlink" title="調査・検証"></a>調査・検証</h1><p>まず、原因の仮説を立てます。<br>a.見落としているだけでセッション時間の設定が実はある？</p><p>b.ブラウザのタブで他AWSアカウントを開いている為にセッションが切れてしまっている？</p><p>c.マネジメントコンソールを使用しているから？CLIを使用すると切断されない？</p><p>d.同時に複数の接続をしているから？</p><p>※他にもいろいろありそうですが、検証時間の関係で省略してます。</p><h2 id="a-見落としているだけでセッション時間の設定が実はある？"><a href="#a-見落としているだけでセッション時間の設定が実はある？" class="headerlink" title="a.見落としているだけでセッション時間の設定が実はある？"></a>a.見落としているだけでセッション時間の設定が実はある？</h2><p>マネジメントコンソールの設定を確認しましたが設定項目はありませんでした。</p><h2 id="b-ブラウザのタブで他AWSアカウントを開いている為にセッションが切れてしまっている？"><a href="#b-ブラウザのタブで他AWSアカウントを開いている為にセッションが切れてしまっている？" class="headerlink" title="b.ブラウザのタブで他AWSアカウントを開いている為にセッションが切れてしまっている？"></a>b.ブラウザのタブで他AWSアカウントを開いている為にセッションが切れてしまっている？</h2><p>複数AWSアカウントやユーザを利用しているときに起きるこれ↓を起こしてみます。</p><img src="/images/20191009/7.png" class="img-small-size" style="border:solid 1px #000000"><p>切断されず、影響ありませんでした。</p><h2 id="c-マネジメントコンソールを使用しているから？CLIを使用すると切断されない？"><a href="#c-マネジメントコンソールを使用しているから？CLIを使用すると切断されない？" class="headerlink" title="c.マネジメントコンソールを使用しているから？CLIを使用すると切断されない？"></a>c.マネジメントコンソールを使用しているから？CLIを使用すると切断されない？</h2><img src="/images/20191009/8.png" class="img-small-size" style="border:solid 1px #000000"><p>そんなこともありませんでした。</p><h2 id="d-同時に複数の接続をしているから？"><a href="#d-同時に複数の接続をしているから？" class="headerlink" title="d.同時に複数の接続をしているから？"></a>d.同時に複数の接続をしているから？</h2><p>マネジメントコンソールから複数のセッションを開始してみましたが、先勝ち、後勝ちなどなく同時に複数の接続が利用できます。</p><h1 id="結果＋"><a href="#結果＋" class="headerlink" title="結果＋"></a>結果＋</h1><p>これまでの検証ではセッションが切断されてしまう原因を見つけられませんでしたm(__)m<br>このままではくやしいので、せめてどれぐらいで切断されてしまうのか測定してみました。</p><p>測定方法は以下のコマンドで10秒ごとに現在時刻を表示し、いつまでセッションが生きていたか確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> sleep 10; <span class="keyword">do</span> date; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>10分経過…</p><p>1時間経過…</p><p>3時間経過…</p><p>すぐに切断されることを証明しようといる時に限ってなかなか切れません。</p><p>！？</p><p>もしかしてこの測定をしていると切れないのでは？</p><p>その後、以下の3パターンで数回測定をしてみたところaのみが切断されることなく長時間セッションが接続されていました。<br>　a.フォアグラウンドで定期実行するパターン<br>　b.バックグラウンドで定期実行するパターン<br>　c.コマンドを実行せず放置するパターン</p><p>検証回数は少ないものの、検証した範囲ではフォアグラウンドで定期的にコマンドを実行し続けていればセッションは切断されませんでした。<br>マネジメントコンソールではエラーメッセージが表示されないので気が付きませんでしたがCLIの検証で「Your session timed out due to inactivity」とエラーメッセージが記載されており、ことからも画面に何らかの変更が行われていれば切断されないようです。</p><p>使い勝手はとても良いとは言えませんが、Session Managerにおける作業で時間が空くようであれば無害なコマンドを定期実行することでセッションを保持することができます。(そもそも論として一旦セッションを終了させればよいのかもしれませんが。。。)</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>Session Managerは不意に切断されてしまうことがありますが、セキュアで非常に便利な機能であることには違いありません。<br>長時間利用する場合や、作業の途中で切断されては困る場合には不向きですが、特性を理解した上で利用するのが良いのではないでしょうか？<br>より良い方法をご存じの方がおりましたら教えていただけると幸いです。</p><p>なお、この記事を作成する上で以下のページを参考にさせていただきました。<br><a href="https://qiita.com/serima/items/7260cef8a05d13ec6a47" target="_blank" rel="noopener">https://qiita.com/serima/items/7260cef8a05d13ec6a47</a></p><hr><p>関連記事：</p><ul><li><a href="/articles/20190902/">AWS IAMロールの信頼関係の気になる動作</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20190816/">はじめてのTerraform 0.12 ～環境構築～</a></li><li><a href="/articles/20181205/">5TB/日 のデータをAWS Glueでさばくためにやったこと（性能編）</a></li><li><a href="/articles/20190625/">Amazon Redshiftの仕様を調べてみた</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチーム&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title> 本当に使ってよかったOpenAPI (Swagger) ツール</title>
    <link href="https://future-architect.github.io/articles/20191008/"/>
    <id>https://future-architect.github.io/articles/20191008/</id>
    <published>2019-10-07T23:48:06.000Z</published>
    <updated>2019-10-09T00:13:38.615Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の武田です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>みなさんSwagger使ってますか？</p><p>弊社でもREST APIを構築するに当たってSwaggerを導入する機会が増えています。本記事ではSwaggerを導入するに当たって、合わせて利用して便利だったツールを紹介したいと思います。</p><h2 id="そもそもSwaggerとは？"><a href="#そもそもSwaggerとは？" class="headerlink" title="そもそもSwaggerとは？"></a>そもそもSwaggerとは？</h2><p>Swaggerは、<a href="https://swagger.io/specification/" target="_blank" rel="noopener">OpenAPI仕様</a>（以下OAS）と言われる、REST APIを定義するための標準仕様にもとづいて構築された一連のオープンソースツールです。REST APIの設計、構築、文書化、および使用に役立つ機能を提供します。</p><p>提供されている主なツールは次のようなものがあります。</p><table><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://editor.swagger.io/" target="_blank" rel="noopener">Swagger Editor</a></td><td align="left">OASに則ったAPI仕様を書くためのエディタ</td></tr><tr><td align="left"><a href="https://swagger.io/tools/swagger-ui/" target="_blank" rel="noopener">Swagger UI</a></td><td align="left">OASに則ったAPI仕様からドキュメントを生成するツール</td></tr><tr><td align="left"><a href="https://swagger.io/tools/swagger-codegen/" target="_blank" rel="noopener">Swagger Codegen</a></td><td align="left">OASに則ったAPI仕様からコードを生成するツール</td></tr></tbody></table><h2 id="サードパーティ製のツール"><a href="#サードパーティ製のツール" class="headerlink" title="サードパーティ製のツール"></a>サードパーティ製のツール</h2><p>本家からは上述のツールが提供されていますが、サードバーティ製の様々なツールが世の中には存在します。</p><p>エコシステムが成熟しているのもSwaggerを利用するメリットの一つですね。<br><a href="https://openapi.tools/" target="_blank" rel="noopener">https://openapi.tools/</a></p><p>冒頭のとおり、このサードパーティ製のツールの中で実際に利用して良かったツールを3つご紹介したいと思います。</p><h2 id="Stoplight-Studio"><a href="#Stoplight-Studio" class="headerlink" title="Stoplight Studio"></a>Stoplight Studio</h2><p><a href="https://stoplight.io/studio/" target="_blank" rel="noopener">https://stoplight.io/studio/</a></p><p>1つ目のツールは「Stoplight Studio」というAPI仕様を記載するためのGUIエディタとなります。</p><p>今までSwagger Editorを利用してYAMLを書いていたそこのみなさん、YAML筋力はもう必要ありません。</p><p><code>Design APIs 10x faster</code> の謳い文句どおり、Stoplight Studioを使えばGUIで直感的に、高速にAPI仕様を記述することができます。</p><img src="/images/20191008/photo_20191008_01.png" style="border:solid 1px #000000"><h3 id="主な特徴"><a href="#主な特徴" class="headerlink" title="主な特徴"></a>主な特徴</h3><p>主な特徴としては次のようなものが挙げられます。</p><ul><li>無料</li><li>WEB、バイナリ（Windows、Mac、Linux）として配布</li><li>OpenAPI v2 &amp; v3に対応</li><li>Git連携</li><li>Prismと呼ばれるモックサーバ（後述）を統合</li><li>ドキュメントへの変換に対応</li><li>リアルタイムでLintエラーを表示</li></ul><p>筆者はもうこのエディタなしではSwaggerを書けない体になりました。WEBから簡単に試すことができるので実際に使ってみるのが一番だと思います。<br><a href="https://stoplight.io/p/studio/gh/stoplightio/studio" target="_blank" rel="noopener">https://stoplight.io/p/studio/gh/stoplightio/studio</a></p><h2 id="Prism"><a href="#Prism" class="headerlink" title="Prism"></a>Prism</h2><p><a href="https://stoplight.io/open-source/prism" target="_blank" rel="noopener">https://stoplight.io/open-source/prism</a></p><p>2つ目のツールは「Prism」というStoplight Studioと同じくStoplight社が提供するOSSのモックサーバです。</p><p>コマンドラインからOAS定義を読み込むことで簡単にAPIのモックサーバが起動できます。例えばサーバ（API）側ができていない状態で、クライアント側の開発を進めるケースなどでは非常に有用ですね。</p><h3 id="主な特徴-1"><a href="#主な特徴-1" class="headerlink" title="主な特徴"></a>主な特徴</h3><p>主な特徴としては次のようなものが挙げられます。</p><ul><li>OSS</li><li>OpenAPI v2 &amp; v3に対応</li><li>Nodeモジュール、バイナリ（Windows、Mac、Linux）、Dockerイメージとして配布</li><li>ダイナミックレスポンス対応</li><li>リクエストのバリデーション対応</li><li>CORS対応</li></ul><p><code>apisprout</code>など他のモックサーバも多数存在しますが、ランタイムなしで利用できる点やダイナミックレスポンス、CORS対応等、地味に嬉しい機能があり、お気に入りです。</p><h3 id="使ってみた"><a href="#使ってみた" class="headerlink" title="使ってみた"></a>使ってみた</h3><p>今回はDockerイメージ利用してみます。 サンプルのOAS定義として<a href="https://petstore.swagger.io/v2/swagger.json" target="_blank" rel="noopener">Swagger Petstore</a>を利用します。定義内容は<a href="https://petstore.swagger.io/" target="_blank" rel="noopener">こちら</a>。</p><h4 id="まずはヘルプコマンド"><a href="#まずはヘルプコマンド" class="headerlink" title="まずはヘルプコマンド"></a>まずはヘルプコマンド</h4><p>利用可能なオプションは次のとおりとなります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker run stoplight/prism:3 mock -h</span><br><span class="line">prism mock &lt;spec&gt;</span><br><span class="line"></span><br><span class="line">Start a mock server with the given spec file</span><br><span class="line"></span><br><span class="line">Positionals:</span><br><span class="line">  spec  Path to a spec file. Can be both a file or a fetchable resource on the web.  [string] [required]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --version           Show version number  [boolean]</span><br><span class="line">  --<span class="built_in">help</span>              Show <span class="built_in">help</span>  [boolean]</span><br><span class="line">  --port, -p          Port that Prism will run on.  [number] [required] [default: 4010]</span><br><span class="line">  --host, -h          Host that Prism will listen to.  [string] [required] [default: <span class="string">"127.0.0.1"</span>]</span><br><span class="line">  --dynamic, -d       Dynamically generate examples.  [boolean] [default: <span class="literal">false</span>]</span><br><span class="line">  --cors              Enables CORS headers.  [boolean] [default: <span class="literal">true</span>]</span><br><span class="line">  --multiprocess, -m  Forks the http server from the CLI <span class="keyword">for</span> faster <span class="built_in">log</span> processing.  [boolean] [default: <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><h4 id="サーバ起動"><a href="#サーバ起動" class="headerlink" title="サーバ起動"></a>サーバ起動</h4><p>引数にOAS定義を指定して <code>prism mock</code> コマンドを実行するとモックサーバが立ち上がります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it -p 4010:4010 stoplight/prism:3 mock -h 0.0.0.0 https://petstore.swagger.io/v2/swagger.json</span><br><span class="line">[CLI] …  awaiting  Starting Prism…</span><br><span class="line">[HTTP SERVER] ℹ  info      Server listening at http://0.0.0.0:4010</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/pet</span><br><span class="line">[CLI] ●  note      PUT        http://0.0.0.0:4010/pet</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/pet/findByStatus</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/pet/findByTags</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/pet/&#123;petId&#125;</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/pet/&#123;petId&#125;</span><br><span class="line">[CLI] ●  note      DELETE     http://0.0.0.0:4010/pet/&#123;petId&#125;</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/pet/&#123;petId&#125;/uploadImage</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/store/inventory</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/store/order</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/store/order/&#123;orderId&#125;</span><br><span class="line">[CLI] ●  note      DELETE     http://0.0.0.0:4010/store/order/&#123;orderId&#125;</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/user</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/user/createWithArray</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/user/createWithList</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/user/login</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/user/<span class="built_in">logout</span></span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/user/&#123;username&#125;</span><br><span class="line">[CLI] ●  note      PUT        http://0.0.0.0:4010/user/&#123;username&#125;</span><br><span class="line">[CLI] ●  note      DELETE     http://0.0.0.0:4010/user/&#123;username&#125;</span><br><span class="line">[CLI] ▶  start     Prism is listening on http://0.0.0.0:4010</span><br></pre></td></tr></table></figure><p>ローカルから繋いでみます。 定義した通りのレスポンスが返却されていますね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -D /dev/stderr -X GET -H <span class="string">"Accept:application/json"</span> http://localhost:4010/pet/0001 | json_pp</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">content-length: 138</span><br><span class="line">Date: Fri, 27 Sep 2019 10:25:48 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"status"</span> : <span class="string">"available"</span>,</span><br><span class="line">   <span class="string">"photoUrls"</span> : [</span><br><span class="line">      <span class="string">"string"</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"id"</span> : 0,</span><br><span class="line">   <span class="string">"name"</span> : <span class="string">"doggie"</span>,</span><br><span class="line">   <span class="string">"category"</span> : &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"string"</span>,</span><br><span class="line">      <span class="string">"id"</span> : 0</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"tags"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"id"</span> : 0,</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ダイナミックレスポンス"><a href="#ダイナミックレスポンス" class="headerlink" title="ダイナミックレスポンス"></a>ダイナミックレスポンス</h4><p>モックサーバ起動時に<code>-d</code>オプションを付与すると、OAS定義にもとづいてリクエストのたびにレスポンスが動的に作成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it -p 4010:4010 stoplight/prism:3 mock -h 0.0.0.0 -d https://petstore.swagger.io/v2/swagger.json</span><br></pre></td></tr></table></figure><p>1回目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -D /dev/stderr -X GET -H <span class="string">"Accept:application/json"</span> http://localhost:4010/pet/0001?hoge=dow | json_pp</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">content-length: 338</span><br><span class="line">Date: Fri, 27 Sep 2019 10:38:36 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"tags"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"aliquip tempor"</span>,</span><br><span class="line">         <span class="string">"id"</span> : 63211888</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"in enim dolor"</span>,</span><br><span class="line">         <span class="string">"id"</span> : 79883460</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"eiusmod "</span>,</span><br><span class="line">         <span class="string">"id"</span> : 17183756</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"category"</span> : &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"fugiat"</span>,</span><br><span class="line">      <span class="string">"id"</span> : -44395203</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"id"</span> : -79576346,</span><br><span class="line">   <span class="string">"status"</span> : <span class="string">"available"</span>,</span><br><span class="line">   <span class="string">"name"</span> : <span class="string">"nostrud"</span>,</span><br><span class="line">   <span class="string">"photoUrls"</span> : [</span><br><span class="line">      <span class="string">"amet eiusmod Duis deserunt sunt"</span>,</span><br><span class="line">      <span class="string">"dolor"</span>,</span><br><span class="line">      <span class="string">"Duis non reprehenderit"</span>,</span><br><span class="line">      <span class="string">"laboris mollit officia consectetur"</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2回目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -D /dev/stderr -X GET -H <span class="string">"Accept:application/json"</span> http://localhost:4010/pet/0001?hoge=dow | json_pp</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">content-length: 274</span><br><span class="line">Date: Fri, 27 Sep 2019 10:38:39 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"name"</span> : <span class="string">"ex consequat ea irure"</span>,</span><br><span class="line">   <span class="string">"status"</span> : <span class="string">"available"</span>,</span><br><span class="line">   <span class="string">"tags"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"id"</span> : 39284365,</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"elit Duis nostrud"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"category"</span> : &#123;</span><br><span class="line">      <span class="string">"id"</span> : 39510092,</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"quis veniam ipsum Excepteur"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"id"</span> : 97837350,</span><br><span class="line">   <span class="string">"photoUrls"</span> : [</span><br><span class="line">      <span class="string">"reprehenderit exercitation commodo dolore"</span>,</span><br><span class="line">      <span class="string">"consectetur"</span>,</span><br><span class="line">      <span class="string">"sint"</span>,</span><br><span class="line">      <span class="string">"consequat"</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="バリデーション"><a href="#バリデーション" class="headerlink" title="バリデーション"></a>バリデーション</h4><p>リクエストボディを指定せずに <code>POST: http://0.0.0.0:4010/pet</code>を投げてみるとエラーが返却されます。<br>このようにOAS定義にもとづいてクエリパラメータやリクエストボディのバリデーションを行ってくれます。<br>返却されるエラーの詳細は<a href="https://stoplight.io/p/docs/gh/stoplightio/prism/docs/guides/request-validation.md" target="_blank" rel="noopener">公式のドキュメント</a>を参考にしてみてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -D /dev/stderr -X POST -H <span class="string">"Accept:application/json"</span> http://localhost:4010/pet | json_pp</span><br><span class="line">HTTP/1.1 422 Unprocessable Entity</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">content-type: application/problem+json</span><br><span class="line">content-length: 350</span><br><span class="line">Date: Fri, 27 Sep 2019 10:41:23 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"validation"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"message"</span> : <span class="string">"Body parameter is required"</span>,</span><br><span class="line">         <span class="string">"severity"</span> : <span class="string">"Error"</span>,</span><br><span class="line">         <span class="string">"code"</span> : <span class="string">"required"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"detail"</span> : <span class="string">"Your request body is not valid and no HTTP validation response was found in the spec, so Prism is generating this error for you."</span>,</span><br><span class="line">   <span class="string">"type"</span> : <span class="string">"https://stoplight.io/prism/errors#UNPROCESSABLE_ENTITY"</span>,</span><br><span class="line">   <span class="string">"title"</span> : <span class="string">"Invalid request body payload"</span>,</span><br><span class="line">   <span class="string">"status"</span> : 422</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>Prismはデフォルトで、全てのメソッドと全てのオリジンを許可するため、全てのプリフライトリクエストを<code>204</code>でハンドリングします。</p><p>ローカルで（Webpack Dev Server等を利用して）WEB開発をしているときに、プロキシを設定したりしなくて済むのは、嬉しいですね。</p><h2 id="Dredd"><a href="#Dredd" class="headerlink" title="Dredd"></a>Dredd</h2><p><a href="https://dredd.readthedocs.io" target="_blank" rel="noopener">https://dredd.readthedocs.io</a></p><p>最後に紹介するツールは「Dredd」というOAS定義と実際のAPIサーバの検証を行うコマンドラインベースのテストツールになります。</p><p>要はAPIのレスポンスがOAS定義通りだよね？というのを確認してくれるツールです。もともとはAPI Blueprintに対応していたツールですが、OpenAPIにも対応がなされました。</p><h3 id="主な特徴-2"><a href="#主な特徴-2" class="headerlink" title="主な特徴"></a>主な特徴</h3><p>主な特徴としては次のようなものが挙げられます。</p><ul><li>OpenAPI v2 &amp; v3に対応(ただしv3はExperimental)</li><li>Nodeモジュール、Dockerイメージとして配布</li><li>テスト時の前処理、後処理をさまざまな言語（Go, Node.js, Perl, Python, Ruby, etc…）で定義可能</li></ul><h3 id="使ってみた-1"><a href="#使ってみた-1" class="headerlink" title="使ってみた"></a>使ってみた</h3><p>テスト対象のAPIサーバは<code>localhost:4010</code>で動いている前提とします。</p><p>テスト仕様書となるOAS定義として今回もSwagger Petstoreを利用したいところですが、そのまま利用するには<a href="https://github.com/apiaryio/dredd/issues/893" target="_blank" rel="noopener">色々と問題</a>があるみたいなので、Petstoreを修正した簡易版のOAS定義を作成し利用します。</p><p>IDをキーにペットを取得するAPI、更新するAPIの2APIを定義しています。</p><ul><li><code>GET : /pet/{petId}</code></li><li><code>POST: /pet/${petId}</code></li></ul><figure class="highlight yaml"><figcaption><span>swagger.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">"2.0"</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line"><span class="attr">  title:</span> <span class="string">Swagger</span> <span class="string">Petstore</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">1.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">http</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">"/pet/&#123;petId&#125;"</span><span class="string">:</span></span><br><span class="line"><span class="attr">    get:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">Find</span> <span class="string">a</span> <span class="string">pet</span> <span class="string">by</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">Returns</span> <span class="string">a</span> <span class="string">single</span> <span class="string">pet</span></span><br><span class="line"><span class="attr">      operationId:</span> <span class="string">getPetById</span></span><br><span class="line"><span class="attr">      produces:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">application/json;</span> <span class="string">charset=utf-8</span></span><br><span class="line"><span class="attr">      parameters:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">petId</span></span><br><span class="line"><span class="attr">          in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">          required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">          format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">          x-example:</span> <span class="number">99999</span></span><br><span class="line"><span class="attr">      responses:</span></span><br><span class="line">        <span class="string">"200"</span><span class="string">:</span></span><br><span class="line"><span class="attr">          description:</span> <span class="string">successful</span> <span class="string">operation</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line">            <span class="string">"$ref"</span><span class="string">:</span> <span class="string">"#/definitions/Pet"</span></span><br><span class="line"><span class="attr">    post:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">Update</span> <span class="string">a</span> <span class="string">pet</span> <span class="string">by</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">      operationId:</span> <span class="string">updatePet</span></span><br><span class="line"><span class="attr">      consumes:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">application/json</span></span><br><span class="line"><span class="attr">      produces:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">application/json;</span> <span class="string">charset=utf-8</span></span><br><span class="line"><span class="attr">      parameters:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">petId</span></span><br><span class="line"><span class="attr">          in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">          required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">          format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">          x-example:</span> <span class="number">99999</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">body</span></span><br><span class="line"><span class="attr">          in:</span> <span class="string">body</span></span><br><span class="line"><span class="attr">          required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">            properties:</span></span><br><span class="line"><span class="attr">              name:</span></span><br><span class="line"><span class="attr">                type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">                example:</span> <span class="string">pochi</span></span><br><span class="line"><span class="attr">      responses:</span></span><br><span class="line">        <span class="string">"200"</span><span class="string">:</span></span><br><span class="line"><span class="attr">          description:</span> <span class="string">successful</span> <span class="string">operation</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line">            <span class="string">"$ref"</span><span class="string">:</span> <span class="string">"#/definitions/Pet"</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line"><span class="attr">  Pet:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">    required:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">name</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">photoUrls</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      id:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">        format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">        example:</span> <span class="number">99999</span></span><br><span class="line"><span class="attr">      name:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        example:</span> <span class="string">doggie</span></span><br><span class="line"><span class="attr">      photoUrls:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">        items:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">          example:</span> <span class="attr">http://example.com</span></span><br><span class="line"><span class="attr">      status:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        enum:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">available</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">pending</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">sold</span></span><br><span class="line"><span class="attr">        example:</span> <span class="string">sold</span></span><br></pre></td></tr></table></figure><h3 id="正常系"><a href="#正常系" class="headerlink" title="正常系"></a>正常系</h3><p>OAS定義と実際のAPIサーバのホストを引き数に<code>dredd</code> コマンドを実行すると2本のAPIのリクエストが投げられ、レスポンスが検証されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ dredd swagger.yaml localhost:4010 -h <span class="string">"Accept:application/json"</span></span><br><span class="line">pass: GET (200) /pet/99999 duration: 26ms</span><br><span class="line">pass: POST (200) /pet/99999 duration: 9ms</span><br><span class="line">complete: 2 passing, 0 failing, 0 errors, 0 skipped, 2 total</span><br><span class="line">complete: Tests took 38ms</span><br></pre></td></tr></table></figure><h3 id="異常系"><a href="#異常系" class="headerlink" title="異常系"></a>異常系</h3><p>テスト対象のAPIサーバのロジックを修正し、OAS定義と異なるレスポンスを返却するようにしてみましょう。<br>今回は、GETレスポンスの<code>status</code>が<code>available</code> <code>pending</code> <code>sold</code>のいずれのenum値にも当てはまらない値（<code>hoge</code>）を返します。</p><p><code>fail: body: At &#39;/status&#39; No enum match for: &quot;hoge&quot;</code>とログが出力され、期待通りテストが失敗していますね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">$ dredd swagger.yml localhost:4010 -h <span class="string">"Accept:application/json"</span> </span><br><span class="line">fail: GET (200) /pet/99999 duration: 29ms</span><br><span class="line">pass: POST (200) /pet/99999 duration: 11ms</span><br><span class="line">info: Displaying failed tests...</span><br><span class="line">fail: GET (200) /pet/99999 duration: 29ms</span><br><span class="line">fail: body: At <span class="string">'/status'</span> No enum match <span class="keyword">for</span>: <span class="string">"hoge"</span></span><br><span class="line"></span><br><span class="line">request: </span><br><span class="line">method: GET</span><br><span class="line">uri: /pet/99999</span><br><span class="line">headers: </span><br><span class="line">    Accept: application/json</span><br><span class="line">    User-Agent: Dredd/12.0.3 (Darwin 18.2.0; x64)</span><br><span class="line"></span><br><span class="line">body: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">expected: </span><br><span class="line">headers: </span><br><span class="line">    Content-Type: application/json; charset=utf-8</span><br><span class="line"></span><br><span class="line">body: </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"doggie"</span>,</span><br><span class="line">  <span class="string">"photoUrls"</span>: [</span><br><span class="line">    <span class="string">"http://example.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"id"</span>: 99999,</span><br><span class="line">  <span class="string">"status"</span>: <span class="string">"sold"</span></span><br><span class="line">&#125;</span><br><span class="line">statusCode: 200</span><br><span class="line">bodySchema: &#123;<span class="string">"type"</span>:<span class="string">"object"</span>,<span class="string">"required"</span>:[<span class="string">"name"</span>,<span class="string">"photoUrls"</span>],<span class="string">"properties"</span>:&#123;<span class="string">"id"</span>:&#123;<span class="string">"type"</span>:<span class="string">"integer"</span>,<span class="string">"format"</span>:<span class="string">"int64"</span>,<span class="string">"examples"</span>:[99999]&#125;,<span class="string">"name"</span>:&#123;<span class="string">"type"</span>:<span class="string">"string"</span>,<span class="string">"examples"</span>:[<span class="string">"doggie"</span>]&#125;,<span class="string">"photoUrls"</span>:&#123;<span class="string">"type"</span>:<span class="string">"array"</span>,<span class="string">"items"</span>:&#123;<span class="string">"type"</span>:<span class="string">"string"</span>,<span class="string">"examples"</span>:[<span class="string">"http://example.com"</span>]&#125;&#125;,<span class="string">"status"</span>:&#123;<span class="string">"type"</span>:<span class="string">"string"</span>,<span class="string">"enum"</span>:[<span class="string">"available"</span>,<span class="string">"pending"</span>,<span class="string">"sold"</span>],<span class="string">"examples"</span>:[<span class="string">"sold"</span>]&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">actual: </span><br><span class="line">statusCode: 200</span><br><span class="line">headers: </span><br><span class="line">    access-control-allow-origin: *</span><br><span class="line">    content-type: application/json; charset=utf-8</span><br><span class="line">    content-length: 79</span><br><span class="line">    date: Sat, 28 Sep 2019 05:20:01 GMT</span><br><span class="line">    connection: close</span><br><span class="line"></span><br><span class="line">bodyEncoding: utf-8</span><br><span class="line">body: </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: 99999,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"doggie"</span>,</span><br><span class="line">  <span class="string">"photoUrls"</span>: [</span><br><span class="line">    <span class="string">"http://example.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"status"</span>: <span class="string">"hoge"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">complete: 1 passing, 1 failing, 0 errors, 0 skipped, 2 total</span><br><span class="line">complete: Tests took 44ms</span><br></pre></td></tr></table></figure><p>このように<code>Dredd</code>を利用すれば、実際のAPIサーバがOAS定義に則ったレスポンスを返却しているかを検証することができます。<br>さらに今回は触れませんでしたが、テストの前処理、後処理等でDBのクリーンアップ、テストデータの投入を行うなどすれば、E2EのCIを実現することができます。</p><p>もともとAPI Blueprint用のツールだったこともあり、OpenAPIの扱いで筋力が必要なシーンが少なからずありますが、このあたりの泥臭い話は別途記載できればと思います。</p><h2 id="各種ツールの統合"><a href="#各種ツールの統合" class="headerlink" title="各種ツールの統合"></a>各種ツールの統合</h2><p>標準的な設計・開発プロセスにご紹介したツールを統合すると次のような形になります。</p><img src="/images/20191008/photo_20191008_02.png" style="border:solid 1px #000000"><p>みなさんもクライアントサイドとサーバサイドの結合テストにおいてインターフェースの齟齬による苦労をした経験はあるかと思います。</p><p>OAS定義を一元管理し、<code>prism</code>や<code>Dredd</code>を効果的に利用することでこのようなコストを大幅に削減でき、品質を強化することができます。</p><p>ご参考になれば幸いです。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;の武田です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
      <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>CUEを試して見る</title>
    <link href="https://future-architect.github.io/articles/20191002/"/>
    <id>https://future-architect.github.io/articles/20191002/</id>
    <published>2019-10-01T23:30:09.000Z</published>
    <updated>2019-10-09T00:13:04.302Z</updated>
    
    <content type="html"><![CDATA[<p>前回のエントリー、<a href="https://future-architect.github.io/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a>の続きです。</p><p>設定ファイルをどうするか問題はいろいろ悩ましい問題であります。そんな中、設定ファイル用言語という触れ込みの<a href="https://cuelang.org/" target="_blank" rel="noopener">CUE</a>がリリースされました。</p><p>すでに、NSSOLの方が、Linterとして使うという紹介記事をすでに書かれています。これはユースケースの一部（これでも有用ですが）です。まだ使い込んだわけではなく、チュートリアルとドキュメントを一通り読みつつ軽く試した程度ですが、全体的な紹介をしようと思います。</p><ul><li><a href="https://qiita.com/Urotea/items/28fa6a0822de16da02f6" target="_blank" rel="noopener">yamlやJsonのチェック(Lint)ができるCUEの紹介</a></li></ul><h1 id="CUEによってできるようになること"><a href="#CUEによってできるようになること" class="headerlink" title="CUEによってできるようになること"></a>CUEによってできるようになること</h1><p>主な特徴としては次のような感じです。</p><ul><li>人が書く設定ファイル(JSON/YAML/TOML/iniあたりがライバル)のための言語</li><li>スキーマ定義が書けて、バリデーションが可能</li><li>テンプレート機能で一部が違うデータを大量に生成みたいなのがしやすい</li><li>外部プログラムを起動してその結果を取り出したり、文字列演算や数値演算が可能（実行しているホスト名を取ってくるとか）</li><li>バリデーションのコードを生成できる（Goのみ）</li><li>GoやProtocol BuffersからCUEの定義ファイルを生成できる</li><li>JSON/YAMLに変換できるし、JSON/YAMLから読み込むことも可能</li><li>パーサーや、読み込んだデータを問い合わせるクエリーのAPIがある（Goのみ)</li></ul><p>XMLやJSONはバリデーション側がXMLスキーマ・JSONスキーマとは別の規格でしたが、CUEは最初からスキーマやバリデータが仕様に入っています。NSSOLさんのブログ記事は、cueコマンドを使って、YAMLを読み込んでバリデーションでしたが、メインストリームの利用方法は、.cueという言語の形式で設定ファイルを記述し、スキーマも記述し、バリデーションしつつ、Goのプログラムに読み込んだり、他の形式に出力したり、という感じでしょう。</p><p>ドキュメントを見る感じだと、ツールやファイルの流れはこんな感じでしょう。</p><img src="/images/20191002/1.png"><p>今までできなかったがCUEによってできるようになったこととしてはロジックが内部に書けるようになったことです。JSONやXMLで数式とかちょっとしたロジックを書いたとしても、それを読み込んで評価する処理は別に書く必要がありました。</p><p>例えば、環境変数を展開したい、とかシェル的に処理を実行してその結果を取り込みたいとか、そういうのはJSONやXMLだけではできません。そういうリッチな設定ファイルが欲しい場合は、Groovyとか、PythonとかRubyとかJavaScriptとか、汎用プログラミング言語を設定ファイルとして使う、ということが行われてきました。CUEを使えば、ちょっとリッチな設定ファイルが使えるようになります。まあできなかったかというと、AWKみたいなのはあったわけで、それがモダンになって木構造データに対応して登場した、みたいな感じですかね。</p><h1 id="レベル1-ベターJSONとしてのCUE"><a href="#レベル1-ベターJSONとしてのCUE" class="headerlink" title="レベル1: ベターJSONとしてのCUE"></a>レベル1: ベターJSONとしてのCUE</h1><p>このチュートリアルの基礎を読むのが手っ取り早いです</p><p><a href="https://github.com/cuelang/cue/blob/master/doc/tutorial/basics/json.md" target="_blank" rel="noopener">https://github.com/cuelang/cue/blob/master/doc/tutorial/basics/json.md</a></p><p>最初の方に出てくるのが次のようなサンプルを組み合わせたのが次のコードです。JSONと似ていますが、ハイフンなどの記号がなければキーのダブルクオートが省略できます。JSONでキー名をいちいち括るのはめんどくさいですよね？前回のエントリーではてブとかでコメントや末尾のカンマについて触れている人が多数見られましたが、CUEではコメントも入れられるし、末尾のカンマは書いても書かなくてもいいです（ただし、リストでは省略はできない）。</p><p>即値の記述方法も多彩です。例えば、1Mは1000*1000ですね。数字もセパレータを入れたりできます。文字列も複数行のテキストが入れられます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // コメント</span><br><span class="line">    one: 1</span><br><span class="line">    two: 2</span><br><span class="line">    mega: 1M</span><br><span class="line"></span><br><span class="line">    &quot;two-and-a-half&quot;: 2.5</span><br><span class="line"></span><br><span class="line">    multiline: &quot;&quot;&quot;</span><br><span class="line">    Hello</span><br><span class="line">    World!</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>さらにトップレベルの波かっこは省略可能です。YAMLユーザー大歓喜ですね。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// コメント</span><br><span class="line">one: 1</span><br><span class="line">two: 2</span><br></pre></td></tr></table></figure><p>1つのキーのみを持つオブジェクトは、スペース区切りで並べることで表現できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a b c: 10</span><br></pre></td></tr></table></figure><p>これは次のJSONと等価です。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"a"</span>: &#123;</span><br><span class="line">    <span class="attr">"b"</span>: &#123;</span><br><span class="line">      <span class="attr">"c"</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上が書きやすくなったJSONとしてのCUEの説明です。</p><h1 id="レベル2-CUEと型定義"><a href="#レベル2-CUEと型定義" class="headerlink" title="レベル2: CUEと型定義"></a>レベル2: CUEと型定義</h1><p>CUEはJSONと違って、同じキーの定義が複数あってもエラーになりません。登場するたびに、制約が掛け合わされていくような感じです。これを応用して型定義を行なっていきます。複数の条件をかけあわせていく中で矛盾が出ると「コンフリクトがあった」といった感じでエラーになります。</p><p>次のコードは最初にnumberと定義しています。これで数字のどれか、という定義になります。intで整数なども指定できます。int/floatが区別されているのはJS由来のJSONにはない嬉しい点ですよね。次に同じキーに対して1を入れています。最初の制約と両方が満たされるので、これはOKです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: number</span><br><span class="line">a: 1</span><br></pre></td></tr></table></figure><p>次の定義は2つめに出てくる制約が最初の制約とマッチしないのでエラーになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: string</span><br><span class="line">a: 1</span><br></pre></td></tr></table></figure><p>次の書き方で、値がなかった場合のデフォルト値（ここでは1）を設定することもできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i: int | *1</span><br></pre></td></tr></table></figure><p>コロン二つを使って、オブジェクトの型定義もできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Member :: &#123;</span><br><span class="line">  age: &gt; 10</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">me: Member</span><br><span class="line">me: &#123;</span><br><span class="line">  age: 39</span><br><span class="line">  name: &quot;Shibukawa&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これらの定義はパッケージとしてまとめて定義しておいて、インポートして使うという使い方もできるようです。また、go getっぽい感じで<a href="https://cuelang.org/docs/integrations/go/#extract-cue-from-go" target="_blank" rel="noopener">cue getでGoのパッケージを指定すると、そこから定義を抽出する</a>という方法も紹介されています。本当かよ。</p><p>NSSOLさんのQiita記事でも書かれていましたが、型も値です。ノリとしてはTypeScriptに近い感じですね。逆にいえば、値を使った制約も可能です。次の例はどちらかの文字列のみが入るという制約なります。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文字列は複数の選択肢のみ許容が可能</span></span><br><span class="line">conn: <span class="string">"tcp"</span> | <span class="string">"udp"</span></span><br><span class="line">conn: <span class="string">"tcp"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空文字列は許容しない</span></span><br><span class="line">name: !=<span class="string">""</span></span><br><span class="line">name: <span class="string">"tako"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数値も範囲指定が可能</span></span><br><span class="line">ri: &gt;=<span class="number">3</span> &amp; &lt;<span class="number">8</span> &amp; <span class="keyword">int</span></span><br><span class="line">ri: <span class="number">7</span></span><br></pre></td></tr></table></figure><h1 id="レベル3-宣言的でプログラマブルなCUE"><a href="#レベル3-宣言的でプログラマブルなCUE" class="headerlink" title="レベル3: 宣言的でプログラマブルなCUE"></a>レベル3: 宣言的でプログラマブルなCUE</h1><p>ここからだんだんヤバくなってきます。CUEにはReactの仮想DOM的な、木構造を効率的に作り出すためのプログラマブルな機能がいろいろあります。</p><p>チュートリアルから持ってきた例です。CUE用語の名前は「テンプレート」です。React用語でいうとコンポーネントです。引数が<code>&lt;Name&gt;</code>です。中でもNameという参照が使えるので、これを値として利用するのも可能です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">job &lt;Name&gt;: &#123;</span><br><span class="line">    name:     Name</span><br><span class="line">    replicas: uint | *1</span><br><span class="line">    command:  string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">job list command: &quot;ls&quot;</span><br><span class="line"></span><br><span class="line">job nginx: &#123;</span><br><span class="line">    command:  &quot;nginx&quot;</span><br><span class="line">    replicas: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これは次のように展開されます。ちょっと複雑なので解説すると、スペース区切りでオブジェクトの階層になる表記と、同じキーがあったら合成される（この場合、jobというキーのオブジェクトが二つあって合成されている）、の組み合わせになっています。テンプレートでは引数の設定も可能だし、上書きしたい値を後から書くこともできます。ホットスポットだけを書き換えてたくさん定義を量産することが可能です。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"job"</span>: &#123;</span><br><span class="line">    <span class="attr">"list"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"list"</span>,</span><br><span class="line">      <span class="attr">"replicas"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"ls"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"nginx"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"nginx"</span>,</span><br><span class="line">      <span class="attr">"replicas"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"nginx"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もし金額が100万円超えたら稟議が必要なのでneedCheck: trueを足したい、という条件分岐で要素を追加もできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">price: 10M</span><br><span class="line">if price &gt; 1M &#123;</span><br><span class="line">  needCheck: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python的なリスト内包表記も使えます。remというのは割り算の余りを算出する演算子です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ x*x for x in items if x rem 2 == 0]</span><br><span class="line">items: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span><br></pre></td></tr></table></figure><p>forループで要素を量産することもできます。また、iterpolationという機能は、他の言語でいうところのフォーマット文字列（Python用語）、テンプレート文字列（JavaScript用語)、 式展開（Ruby/PHP用語）です。変数の値を埋め込んだ文字列の生成もできます。下記のサンプルは配列の要素を取り出してそれを小文字に変換したものをキーとしたオブジェクトを3セット作っています。やばいですね。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &quot;strings&quot;</span><br><span class="line"></span><br><span class="line">a: [ &quot;Barcelona&quot;, &quot;Shanghai&quot;, &quot;Munich&quot; ]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    for k, v in a &#123;</span><br><span class="line">        &quot;\( strings.ToLower(v) )&quot;: &#123;</span><br><span class="line">            pos:     k + 1</span><br><span class="line">            name:    v</span><br><span class="line">            nameLen: len(v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="レベル4-最終形のCUE"><a href="#レベル4-最終形のCUE" class="headerlink" title="レベル4: 最終形のCUE"></a>レベル4: 最終形のCUE</h1><p>もうこのあたりは僕も理解できていません。<a href="https://godoc.org/cuelang.org/go/pkg" target="_blank" rel="noopener">CUEから使えるパッケージ</a>を見ると、JSONのテキストのパースやらシリアライズができるようですし、CSVの読み書きも可能っぽいです。ファイルの読み書き、外部プログラムの実行、HTTP、ハッシュの計算・・・・</p><p><a href="https://godoc.org/cuelang.org/go/pkg/tool/http" target="_blank" rel="noopener">http.Serve</a>でサーバーも作れちゃうのかな？もう理解不能です。tool以下のパッケージは少し特殊なやつらっぽいですが・・・</p><h1 id="現時点でのCUEの欠点"><a href="#現時点でのCUEの欠点" class="headerlink" title="現時点でのCUEの欠点"></a>現時点でのCUEの欠点</h1><p>現時点でGo以外のパーサーが用意されていないのは、Go以外のユーザーにとっては大きな欠点でしょう。代替策としては、.cueファイルに対してコマンドラインツールを使って.jsonや.yamlファイルに変換してしまう、という方法はあります。これにより、.cueの機能を使いつつ、プログラムで読み込んで利用する部分の断絶を補うことができ、Go以外の言語でも利用できるようになります。外部ツール依存は増えてしまいますが、CUEがデータをクレンジングしてくれる部分はやってくれるので、読み込む側ではエラーチェックやら何やらを省略できます。</p><p>機能案の中にまだ作業中とされているのが、Goコードの生成です。これはJSON-to-Goなどのようにファイルからそれを扱うGoの構造体を一発生成する機能かと思われます。クエリーのAPI呼び出しでアクセスする機能は提供されていますが、やはり構造体になってしまった方が、コード補完との相性は良く実装時には捗るでしょう。</p><p>個人的に大きいのが、エディタ拡張がまだ存在しない、という点です。コードハイライトやコード補完ですね。これも脳のメモリ使用量を削減してくれるため、大変助かる機能ではあります。また、その場でバリデーションしてもらえると、試行錯誤のループが小さくなるので、アウトプットが出来上がる時間が大幅に短くなります。このため、小さめの設定ファイルであれば、前回紹介したJSONスキーマ中心のフローのほうがまだまだ便利だと思っています。</p><h1 id="CUEのユースケース"><a href="#CUEのユースケース" class="headerlink" title="CUEのユースケース"></a>CUEのユースケース</h1><p>このような欠点はありつつも、CUEは魅力的なツールです。公式ドキュメントでもKubernetesやらOpenAPI(Swaggerの後継と言われているがなかなかエコシステムが揃ってこないやつ)での利用例が紹介されていますが、このように、超巨大なJSONやらYAMLやらを書く人は、サポートツールとしてCUEを使うと良いでしょう。例えば、AWSのよくある巨大なJSONやら、長大なdocker-compose.yamlを書くときに、一部をパラメータ化しておきたいとか、冗長な表現をまとめたい、というときに.cueで書いてYAMLを生成するという、コードジェネレータとして利用すると生産性が上がるでしょう。</p><p>もちろん、既存のYAMLとJSONのバリデーションツールとして使うというNSSOLさんのQiitaで紹介されていた方法も有用ですが、プログラマブルな機能を活用するとデータ生成ツールとして活用できるため、せっかく使うなら入力データはJSONやYAMLよりも、.cueを使う方が良いと思います。</p><p>また、CUEの欠点でGo以外のパーサーがないのでCUEのツールを使って変換してから読み込む、というのを紹介しました。こうなると「JSON5とか他のサードパーティ製のパーサー使うのと変わらないじゃん」と思うかもしれませんが、CUEの方が「設定ファイルを書く人のデバッグのしやすさ」は大きく前進するでしょう。ほとんどのこの手のパーサーはトークンの出現位置などはパース時に消えてしまいますし、プログラム言語で読み込んでからあとからデータ整合性チェックを行って、問題のデータを指摘してもオリジナルのファイル上の行と桁情報って出せないんですよね。JSON変換してからJSONスキーマでチェックしようとすると、オリジナルとは違う行・桁でのエラーになる可能性すらあって、良かれと思って導入したヒューマンリーダブルな便利フォーマットがかえって不便になります。これはPythonやRubyやJavaScriptのプログラミング言語自身を使ったDSL表現の設定ファイルでもほぼ同様です（スタックをたどってオリジナルの位置情報を保存までやればできるはずですが、そういう実装例は見たことがない）。</p><p>CUEの場合は型チェックやらデータの整合性チェックやらをすべてCUE上で定義して行なえます。正規表現も使えますし、enum的な特定の文字列しか許さない、といったことも表現できます。CUE上にチェックロジックのほとんどを持ち込むことができれば、データ作成者側はファイル上のエラー行数を見てデータ修正ができるようになります。そのため、例えCUEを外部コマンド呼び出しをして呼び出してJSON変換したとしても、他のパーサーでは得られないメリットがあると言えます。</p><h1 id="設定ファイルのまとめ"><a href="#設定ファイルのまとめ" class="headerlink" title="設定ファイルのまとめ"></a>設定ファイルのまとめ</h1><p>2回に渡って設定ファイルについて説明しました。僕としての問題設定というか、設定ファイルのフォーマットについての考慮点は次の4点でした。</p><ul><li>パーサーがある</li><li>スキーマがある</li><li>エディタでコードハイライトを行ったり、文法チェックや、スキーマによるチェックやコード補完が利用可能（設定データを書く人の苦労が少ない）</li><li>データ作成、スキーマ作成、読み込み用コード作成など、複数の作業の手間が省けること（読み込み側アプリ実装者の苦労が少ない）</li></ul><p>JSONに関しては色々不満はありつつも、ほぼ満たしていると思っています。CUEは出たばかりですが、エディタサポートさえ入ったら、Goユーザーとしては不満はほとんどないです。今後に期待ですね。今作りたいものが一段落したら自分でも作って見たいところですが。</p><p>今回は、構成管理的な設定ファイルについて考えていたので、Twelve-Factor App的な設定の受け渡しを便利にする方法とかは範囲外としました。.envファイルにまとめるにはどうするか、とか、Dockerビルドする時にプライベートリポジトリにアクセスさせたいけどgithubの秘密鍵どうしようとか、AWSやGCPのSecure Managerとの連携とか、そっちはそっちでいろいろ楽しい世界ではありますし、誰かがまとめてくれるのを期待しています。</p><hr><p>前回の記事：</p><ul><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前回のエントリー、&lt;a href=&quot;https://future-architect.github.io/articles/20191001/&quot;&gt;一周回って、人間が読み書きする設定ファイルはJSONが良いと思った&lt;/a&gt;の続きです。&lt;/p&gt;
&lt;p&gt;設定ファイルをどうするか問
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="CUE" scheme="https://future-architect.github.io/tags/CUE/"/>
    
  </entry>
  
  <entry>
    <title>一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</title>
    <link href="https://future-architect.github.io/articles/20191001/"/>
    <id>https://future-architect.github.io/articles/20191001/</id>
    <published>2019-10-01T00:31:51.000Z</published>
    <updated>2019-10-09T00:13:13.271Z</updated>
    
    <content type="html"><![CDATA[<p>最近GoでCLIツールを作っていますが、JSONが良いとなんとなく思っています。</p><p>続編も公開しました（追記：2019年10月2日）。</p><ul><li><a href="https://future-architect.github.io/articles/20191002/">CUEを試して見る</a></li></ul><h1 id="設定ファイルフォーマット"><a href="#設定ファイルフォーマット" class="headerlink" title="設定ファイルフォーマット"></a>設定ファイルフォーマット</h1><p>近年、設定ファイルを書くプレーンテキストのフォーマットとしては次のようなものが多いかと思われます。</p><ul><li>XML<ul><li>多くのプログラミング言語において標準ライブラリで扱える（ただしNode.jsにはない）</li><li>XMLスキーマ、XSLTなどの周辺ツールも揃っているが、記述が冗長になりがちで、敬遠されがち。</li></ul></li><li>ini<ul><li>QtやPythonの標準ライブラリで扱える</li><li>深い階層や配列を扱うのが苦手</li></ul></li><li>JSON<ul><li>ほとんどのプログラミング言語で標準ライブラリに入っている<ul><li>特にフロントエンドのJavaScriptでは追加のライブラリを利用する必要がなく、速度も早く、gzipすればファイルサイズもかなり小さくなる。T</li></ul></li><li>閉じかっこが必要、コメントがつけられない、末尾のカンマをきちんとルール通りに表記しなければならない<ul><li>そのためコンフリクト時のマージにコツが必要</li><li>JSON5といった別のバリエーションもある</li></ul></li></ul></li><li>YAML<ul><li>インデントで階層を表現できるし、配列、辞書など表現力はJSONに負けない</li><li>Ruby以外は外部ライブラリ必須</li><li>配列のときにインデントの字下げをする？など書き方に好き嫌いがある</li></ul></li><li>TOML<ul><li>書きやすいiniみたいな</li><li>標準ライブラリで扱える言語はない</li></ul></li></ul><p>JavaScript系のものはJSONが多いですし、docker-composeやKubernetesはYAMLですし、Pythonは古来からのフォーマットは.iniが多かったりはしますが、最近登場したPoetryやPipenvはTOMLを採用しています。まあJSだと、package.jsonをのぞいてはJSON対応ではあるけど、JavaScriptでも書ける（<code>module.exports =</code>で書く)とかあったりもします。</p><h1 id="JSONは周辺ツールが充実している"><a href="#JSONは周辺ツールが充実している" class="headerlink" title="JSONは周辺ツールが充実している"></a>JSONは周辺ツールが充実している</h1><p>で、いろいろある中で、最近作っているツールではJSONを使いました。</p><p>汎用フォーマットは実装側からすると便利だけど、ユーザー視点だと自由すぎるので、制約が欲しくなってきます。JSONにはJSONスキーマがあります。</p><p>生のJSONを作って、次のようなツールに入れると、それを満たすJSONスキーマをざざっと作ってくれます。構造化とかはされていないので共通で使える部品をdefinitionsに移動する、のリファクタリングをしていく感じです。</p><ul><li><a href="https://jsonschema.net/" target="_blank" rel="noopener">https://jsonschema.net/</a></li></ul><p>Visual Studio CodeとIntelliJでしか試してませんが最近はエディタ側もかなり便利に進化しています。IntelliJでは、要素のコピペでは、末尾に貼り付けた時はカンマを削除してくれたりといった入力支援があったりします。もちろん、文法チェックもしてくれるため、エディタ上で入力したものをプログラムに持って行ってエラーになって悩まされる、ということは今はもう過去の話でしょう。また、JSONスキーマがあると、JSONファイルをエディタで入力するときにも入力支援で補完してくれたり、スキーマ違反を指摘してくれたりします。</p><p>VSCodeだと、<a href="https://code.visualstudio.com/docs/languages/json#_json-schemas-and-settings" target="_blank" rel="noopener">このあたり</a>を読むと、設定の仕方が書かれており、ファイル名のパターンごとにスキーマを設定できます。</p><figure class="highlight"><figcaption><span>settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"json.schemas": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"fileMatch"</span>: [</span><br><span class="line">            <span class="string">"/.babelrc"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"http://json.schemastore.org/babelrc"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>わざわざ設定しなくても、編集したいJSONファイルの中からスキーマを指定することもできます。この記法はVSCodeでもIntelliJでも有効でした。スキーマは相対パスでローカルのスキーマファイルを指定することもできますし、URLを書くこともできそうです（試した時にはファイルがプライベートリポジトリだったので失敗しましたが）。</p><figure class="highlight json"><figcaption><span>編集しているJSONファイル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$comment"</span>: <span class="string">"これで補完とかチェックが効くようになります"</span>,</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"../schema.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設定ファイルという文脈ではあまり登場はしませんが、大規模なデータになると、jqみたいなツールを使って情報を取り出す、という活用方法もあります。</p><p>Goから扱うのも簡単です。JSON to Goというウェブサイトを僕はよく使いますが、これを使うと、生のJSONから、それを解釈するための構造体を作って来れます。これで、encoding/jsonを使った読み書きがだいぶ簡単になります。これ以外にもいろいろあります。<a href="https://qiita.com/aaharu/items/ed578fc0e3e42dbcc4b4" target="_blank" rel="noopener">JSON Schema や JSON から Go の struct を生成する</a>というエントリーにまとまっています。</p><ul><li><a href="https://mholt.github.io/json-to-go/" target="_blank" rel="noopener">https://mholt.github.io/json-to-go/</a></li></ul><p>JSONスキーマをGo上で利用してバリデーションもできます。</p><ul><li><a href="https://github.com/xeipuuv/gojsonschema" target="_blank" rel="noopener">https://github.com/xeipuuv/gojsonschema</a></li></ul><p>Goの構造体からJSONスキーマを生成することもできます。</p><ul><li><a href="https://github.com/alecthomas/jsonschema" target="_blank" rel="noopener">https://github.com/alecthomas/jsonschema</a></li></ul><p>現在の時点でどのぐらい使われているかはわかりませんが、JSONスキーマから編集画面生成というのもありましたね。</p><ul><li><a href="http://jeremydorn.com/json-editor/" target="_blank" rel="noopener">http://jeremydorn.com/json-editor/</a></li></ul><p>マージ難しい問題も、マージ用のツールがあったりもします。行志向のdiffロジックだとそりゃーJSONとは相性が悪いわけで、木構造をきちんと理解してdiffを出せばマージの難易度は下がります。JSONは末尾のカンマとかのせいでコンフリクトはしやすいですが、ちょっと込み入った変更で辛いのはJSONもYAMLも変わらないですし。</p><ul><li><a href="https://github.com/jonatanpedersen/git-json-merge" target="_blank" rel="noopener">https://github.com/jonatanpedersen/git-json-merge</a></li></ul><p>マージ以外のエコシステムを図示したのが次のフローになります。</p><img src="/images/20191001/1.png"><h2 id="JSONとコメント"><a href="#JSONとコメント" class="headerlink" title="JSONとコメント"></a>JSONとコメント</h2><p>JSONの不満というとコメントがあります。JSON5などを使うという方法もありますが、JSONの派生のフォーマットを使うと、標準のパーサーではダメだったり、JSONのメリットがいくつかスポイルされてしまいます。品質とか機能性が純正に比べると・・・みたいなこともありますし。</p><p>JSONスキーマのところのサンプルで少し紹介していましたが、JSON Schemaでは、<a href="http://json-schema.org/understanding-json-schema/reference/generic.html#comments" target="_blank" rel="noopener">Draft 7にコメント記法が入りました</a>。好き嫌いはあるとは思いますが、とりあえずこれだけあれば十分使えるので、僕はこれを利用しています。あ、エディタで余計な要素としてエラーにならないようにするためには、スキーマ定義で “$comment” も許容するようにスキーマを書かないとダメですよ。</p><figure class="highlight json"><figcaption><span>編集しているJSONファイル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$comment"</span>: <span class="string">"これで補完とかチェックが効くようになります"</span>,</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"../schema.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに、TypeScriptの設定はコメントが書けますが、あれはJSON5ではなくて、JavaScriptパーサーに特殊なモードがあってそいつを利用しています。処理系内部にハードコードされていますが、あれはライブラリ化して出して欲しいですね。</p><h1 id="最近のワークフロー"><a href="#最近のワークフロー" class="headerlink" title="最近のワークフロー"></a>最近のワークフロー</h1><p>さて、上記の絵だと、どこから作成しても、他のものを生成できて、自由に作り始められそうな感じはありますが、やはり作りやすい、作りにくいという順序はあります。よくあるちょっとした自動化でもありがちですが、ワークフローを考える上で考慮すべきことはいくつかあります。</p><ul><li>生成したあとに手直しが必要で、なんどもイテレーションを回すと、手直しの工数とかミスが無視できない</li><li>宣言的な定義と、成果物で使う脳みそが違っていて、かなり頭を使う必要がある</li></ul><p>上記のツールだと、JSONからJSONスキーマ生成あたりでかなり冗長なスキーマが出てくるので、手直しの手間暇がそこそこかかりました(ので、点線にしています)。</p><p>最初はJSONファーストでやっていましたが、最近はGoの構造体ファーストでやっています。ソースコードジェネレートは初回だけです。ソースコードジェネレートを活用しようとすると、その後手を加えたものとのマージをどうするか問題がよく発生します。ジェネレーションギャップパターンみたいなデザインパターンもありますが、数回分の手間暇のためにわざわざそのためにコードに複雑さを導入するのもなぁ、と思いますし、設計意図が一番白黒はっきりするのがソースコード側なので、他のものをここに追従させるのが一番スムーズに感じます。</p><ol><li>設定ファイルのモックを実際にJSONで作って見る</li><li>それをJSON-to-GoでGoの構造体にする</li><li>omitemptyとかいろいろGoの構造体のタグを編集する</li><li>JSONスキーマ生成</li><li>雑に作ったJSONに<code>$schema</code>を指定してスキーマを設定し、JSON側をいじって見て感触を確かめる</li><li>足りないところがあればまたGoの構造体を修正してJSONスキーマを生成</li></ol><p>JSONスキーマを生成して、設定ファイルにスキーマを設定した段階で、依存関係が完成します。</p><ul><li>Goの構造体 -&gt; JSONスキーマ -&gt; JSON</li></ul><p>ですが、最初からこの依存関係を守ろうとして、設定ファイルの完成イメージと遠いところで試行錯誤するのも脳のメモリを大量に使って効率が悪いので、最初だけは次のフローを入れています。</p><ul><li>JSON -&gt; Goの構造体</li></ul><p>JSONスキーマ生成は次のようなコードを使ってやっています。go generateとかで実行してもいいかも。</p><figure class="highlight go"><figcaption><span>/cmd/jsonschema/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line"><span class="string">"github.com/alecthomas/jsonschema"</span></span><br><span class="line"><span class="string">"github.com/shibukawa/自分のパッケージ"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://gist.github.com/abrookins/2732551#file-gistfile1-go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> __<span class="title">FILE__</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">_, filepath, _, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> filepath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> __<span class="title">DIR__</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> filepath.Dir(__FILE__())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gen</span><span class="params">(fileName <span class="keyword">string</span>, target <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">prjPath := filepath.Join(__DIR__(), <span class="string">"../../"</span>, fileName)</span><br><span class="line">fmt.Printf(<span class="string">"writing: %s\n"</span>, prjPath)</span><br><span class="line">prj, err := os.Create(prjPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> prj.Close()</span><br><span class="line">schema := jsonschema.Reflect(target)</span><br><span class="line">e := json.NewEncoder(prj)</span><br><span class="line">e.SetIndent(<span class="string">""</span>, <span class="string">"  "</span>)</span><br><span class="line">e.Encode(schema)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">gen(<span class="string">"config-schema.json"</span>, &amp;自分のパッケージ.Config&#123;&#125;)</span><br><span class="line">gen(<span class="string">"addin-schema.json"</span>, &amp;自分のパッケージ.Addin&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次回は、話題の設定ファイル記述言語、<a href="https://cuelang.org/" target="_blank" rel="noopener">CUE</a>を取り上げます。</p><ul><li><a href="/articles/20191002/">CUEを試して見る</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近GoでCLIツールを作っていますが、JSONが良いとなんとなく思っています。&lt;/p&gt;
&lt;p&gt;続編も公開しました（追記：2019年10月2日）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://future-architect.github.io/articl
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="JSON" scheme="https://future-architect.github.io/tags/JSON/"/>
    
      <category term="jsonschema" scheme="https://future-architect.github.io/tags/jsonschema/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</title>
    <link href="https://future-architect.github.io/articles/20190927/"/>
    <id>https://future-architect.github.io/articles/20190927/</id>
    <published>2019-09-27T00:34:14.000Z</published>
    <updated>2019-10-09T00:13:20.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の<a href="https://twitter.com/famipapamart" target="_blank" rel="noopener">村田</a>と申します！<br>DXユニットとはデジタルトランスフォーメーションに関わる仕事を主に推進していくチームで、直近で私はとあるIoTの案件に携わっています。</p><p>この記事は”素早くサービスの使い所を把握してもらう”ことや”新しいサービスをさくっと試すための手助けをする”ことを目的に書いたGCPサービスに特化した記事です。<br>前回のCloud Run Button編に続き、気軽にクラウドに慣れ親しんでもらうためのコンテンツの第2弾となります。（前回の記事は<a href="https://future-architect.github.io/articles/20190909/">こちら</a>）</p><p>今回はCloud FunctionをVPC Connectorと一緒に利用します。</p><h1 id="Cloud-Functionsとは"><a href="#Cloud-Functionsとは" class="headerlink" title="Cloud Functionsとは"></a>Cloud Functionsとは</h1><p>Cloud FunctionsはGCPが提供するマネージドサービスの一つであり、サーバーレスでアプリケーションを実行できます。ユーザは対応した言語でアプリケーションをデプロイするだけでOK。後はGCPが必要な時に必要な分のサーバリソースを立ち上げ、その上でアプリケーションを実行してくれます。AWSに慣れた人であれば、AWS Lambdaを思い浮かべてもらえると理解しやすいかと思います。</p><p>イベントドリブンで稼働する本サービスですが、様々なイベントに対応していて、特にGCPの他のマネージドサービスとの連携に優れています。例えばシンプルなHTTPリクエスト起点の動作のみならず、Cloud StorageやCloud Pub/Subにて発火するイベント起点での動作にも対応しており、アーキテクチャデザインの幅が広がります。</p><h1 id="Cloud-Functionsを使ってみる"><a href="#Cloud-Functionsを使ってみる" class="headerlink" title="Cloud Functionsを使ってみる"></a>Cloud Functionsを使ってみる</h1><p>では早速Cloud Functionsを使ってみましょう。</p><h2 id="シンプルに使ってみる"><a href="#シンプルに使ってみる" class="headerlink" title="シンプルに使ってみる"></a>シンプルに使ってみる</h2><h3 id="Functionの作成"><a href="#Functionの作成" class="headerlink" title="Functionの作成"></a>Functionの作成</h3><p>まずはコンソールから「CREATE FUNCTION」ボタンを押下します。<br><img src="/images/20190927/photo_20190927_01.png" style="border:solid 1px #000000"></p><p>以下のような画面に遷移します。<code>Name</code>やその他項目群はデフォルトが埋まっているので、そのまま作成してしまうことも可能です。画面は<code>Trigger</code>選択のプルダウンを開いた状態のものですが、先述の通り様々なイベントをトリガーとして利用することが可能です。<br><img src="/images/20190927/photo_20190927_02.png" style="border:solid 1px #000000" class="img-middle-size"></p><p>デフォルトで選択されている<code>Runtime</code>は<code>Node.js</code>ですが、<code>Go</code>などを選択することも可能です。また、各言語では予め<code>HelloWorld</code>が準備されており、例えば<code>Node.js</code>では<code>index.js</code>にて<code>helloWorld</code>関数が最初から定義されています。<br><img src="/images/20190927/photo_20190927_03.png" style="border:solid 1px #000000" class="img-middle-size"></p><p>下部には<code>Advanced options</code>の欄があり、Functionを作成する<code>Region</code>や実行時の権限に関わる<code>Service account</code>の設定が可能です。設定内容に問題がなければ「Create」ボタンを押下します。<br><img src="/images/20190927/photo_20190927_04.png" style="border:solid 1px #000000" class="img-middle-size"></p><p><code>function-1</code>作成中…（アイコンが緑のチェックマークに変わるまで待ちます）<br><img src="/images/20190927/photo_20190927_05.png" style="border:solid 1px #000000" class="img-middle-size"></p><h3 id="作成したFunctionを試す"><a href="#作成したFunctionを試す" class="headerlink" title="作成したFunctionを試す"></a>作成したFunctionを試す</h3><p>Functionが作成されたら、右のコンテキストメニューからテスト実行できます。「Test function」を選択します。<br><img src="/images/20190927/photo_20190927_06.png" style="border:solid 1px #000000" class="img-small-size"></p><p>以下はhelloWorldのソースコードの中身です。RequestのQueryもしくはBodyの中を参照し、<code>message</code>というキーで格納されている値をResponseに詰めて返却します。また、Requestで受け取った値がない場合（正確には<code>False判定される値</code>だった場合）には<code>Hello World!</code>という文字列が返却されます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Responds to any HTTP request.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;!express:Request&#125; req HTTP request context.</span></span><br><span class="line"><span class="comment"> * @param &#123;!express:Response&#125; res HTTP response context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.helloWorld = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> message = req.query.message || req.body.message || <span class="string">'Hello World!'</span>;</span><br><span class="line">  res.status(<span class="number">200</span>).send(message);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Triggering event</code>の中身を空のJSONにして「Test the function」を押下してみます。<br><img src="/images/20190927/photo_20190927_07.png" style="border:solid 1px #000000" class="img-middle-size"><br>すると、<code>Output</code>欄にて<code>Hello World!</code>の文字列が期待通り表示されました。</p><p>次は<code>message</code>に値を詰めてみます。<br><img src="/images/20190927/photo_20190927_08.png" style="border:solid 1px #000000" class="img-middle-size"><br>ちゃんと期待通り<code>Try Cloud Functions</code>の文字列が返却されました。<code>Logs</code>の部分には実行時のログが表示されます。ログから今回のFunction実行に3msを要したことが分かります。</p><p>クエリ文字列からもmessageを渡すことができるのでブラウザを使ってやってみます。<br><img src="/images/20190927/photo_20190927_09.png" style="border:solid 1px #000000" class="img-middle-size"><br>しっかりと<code>TryQuery</code>の文字列が返却されることが確認できました。</p><h2 id="VPC-connectorを組み合わせる"><a href="#VPC-connectorを組み合わせる" class="headerlink" title="VPC connectorを組み合わせる"></a>VPC connectorを組み合わせる</h2><p>さて、ここからはVPC connectorの設定をしていきます。</p><h3 id="概要説明"><a href="#概要説明" class="headerlink" title="概要説明"></a>概要説明</h3><img src="/images/20190927/photo_20190927_10.png" style="border:solid 1px #000000">https://cloud.google.com/vpc/docs/configure-serverless-vpc-access?hl=ja<p>上の図は公式ページにて記載されているServerless VPC Access connectorの説明から引用したものです。インターネット越しの通信がCloud Functionsに届き、Serverless VPC Access connectorを経由してVPC内のリソースへアクセスします。</p><p>これにより通信はセキュアに保たれつつも、様々なことがFunctionにて実現できるようになります。</p><h3 id="APIの有効化"><a href="#APIの有効化" class="headerlink" title="APIの有効化"></a>APIの有効化</h3><p>それでは早速手順の解説に移りますが、まずは<code>Serverless VPC Access API</code>の有効化が必要です。以下のコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud services <span class="built_in">enable</span> vpcaccess.googleapis.com --project &lt;your-project&gt;</span><br></pre></td></tr></table></figure><h3 id="Connectorの作成"><a href="#Connectorの作成" class="headerlink" title="Connectorの作成"></a>Connectorの作成</h3><p>コンソールから<code>Serverless VPC Access</code>のページを開き、「CREATE CONNECTOR」を選択します。<br><img src="/images/20190927/photo_20190927_11.png" style="border:solid 1px #000000"></p><p><code>Name</code> <code>Network</code> <code>IP range</code>などの必須項目を埋めて「CREATE」を押下します。<br><img src="/images/20190927/photo_20190927_12.png" style="border:solid 1px #000000"></p><p>ここで注意していただきたいのは<code>Only one region is currently available</code>という記述です。現在（2019年9月20日）、Serverless VPC connectorは<code>us-central1</code>でしか利用することができません。</p><blockquote><p>Serverless VPC Access コネクタは、それを使用する関数と同じプロジェクトおよび同じリージョンに配置する必要がありますが、異なるリージョンのリソースにトラフィックを送信できます。複数の関数が同じコネクタを使用できます。</p></blockquote><p><a href="https://cloud.google.com/functions/docs/connecting-vpc?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/functions/docs/connecting-vpc?hl=ja</a></p><p>上記は公式ドキュメントの記載ですが、VPC connectorが<code>us-central1</code>でしか利用できないので、紐付け先のFunctionは同じ<code>us-central1</code>に作成する必要があります。</p><p>ただし、<code>us-central1</code>に配置されたconnectorを経由して例えば<code>us-east1</code>など別のリージョンと通信することは可能です。</p><h3 id="サービスアカウントの権限設定"><a href="#サービスアカウントの権限設定" class="headerlink" title="サービスアカウントの権限設定"></a>サービスアカウントの権限設定</h3><p>次はCloud Functionsサービスアカウントに適切な権限設定を行います。</p><p>IAMの画面からCloud Functionsのサービスアカウントを見つけます。このサービスアカウントはCloud Functions APIを有効化することで自動作成されます。<br><img src="/images/20190927/photo_20190927_13.png" style="border:solid 1px #000000" class="img-middle-size"></p><p>このサービスアカウントに新たに2つの役割を追加します。</p><ul><li>プロジェクトの<code>Viewer</code></li><li><code>Compute Network User</code></li></ul><img src="/images/20190927/photo_20190927_14.png" style="border:solid 1px #000000" class="img-middle-size"><p>「SAVE」を押下して完了です。</p><h3 id="FunctionとConnectorを紐付ける"><a href="#FunctionとConnectorを紐付ける" class="headerlink" title="FunctionとConnectorを紐付ける"></a>FunctionとConnectorを紐付ける</h3><p>ここまで準備ができたら、後はFunctionとConnectorを紐付けるだけです。FunctionのAdvanced options内にある<code>VPC connector</code>欄にて先程作成したConnectorを選択します。</p><img src="/images/20190927/photo_20190927_15.png" style="border:solid 1px #000000" class="img-middle-size"><p>出来上がったFunctionの詳細画面にて<code>VPC connector</code>が期待通り設定されていることが確認できました。これにて設定はすべて完了です。<br><img src="/images/20190927/photo_20190927_16.png" style="border:solid 1px #000000" class="img-small-size"></p><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><blockquote><p>サーバーレス VPC アクセスでは、Cloud VPN と VPC ネットワーク ピアリングを使用して接続された VPC ネットワークとの通信がサポートされています。レガシー ネットワークや共有 VPC ネットワークはサポートされていません。</p></blockquote><p><a href="https://cloud.google.com/functions/docs/connecting-vpc?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/functions/docs/connecting-vpc?hl=ja</a></p><p>公式ドキュメントに記載がありますが、このVPC connectorを利用したアクセスでは共有VPCネットワークなど一部のネットワーク構成をサポートしていません。ご注意ください。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>今回はCloud FunctionsとVPC connectorをご紹介しました。いかがだったでしょうか？</p><p>イベントドリブンなサーバーレスアーキテクチャを採用すると、自然と「アプリケーションをステートレスに保とうとする」意識が働きます。これによりシステムの疎結合化が進み、アーキテクチャとしてより交換可能でマイクロなものになっていくと思います。</p><p>今回ご紹介したVPC connectorを利用することで、いままではCloud Functionsを採用することができなかった場面でも選択肢として選べるようになり、アーキテクチャ選定の幅、ひいてはサービスの可能性が広がるかと思います。</p><p>本記事が読んだ皆さんの糧になれば幸いです。<br>今後ともFuture Tech Blogをよろしくお願いします！！</p><hr><p>こちらの記事も参考ください。</p><ul><li><a href="/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG/DXユニット所属の&lt;a href=&quot;https://twitter.com/famipapamart&quot; 
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>Go言語のDBレイヤーライブラリの評価</title>
    <link href="https://future-architect.github.io/articles/20190926/"/>
    <id>https://future-architect.github.io/articles/20190926/</id>
    <published>2019-09-26T01:00:00.000Z</published>
    <updated>2019-10-07T23:59:01.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>小林と申します。アルバイトとして2019年2月からフューチャーで働いている大学生です。</p><p>アルバイトとして入社後は、Goを用いてツール開発、Vue.jsでコンポーネントの開発など沢山のプログラミングの機会を頂いており、日々成長を感じています。現在、GoとDBの連携について学んでおり、沢山の知見を得たため、アウトプットとして、筆を走らせています。</p><p>本記事ではGoのDBレイヤーライブラリである、<a href="https://github.com/jinzhu/gorm" target="_blank" rel="noopener">GORM</a>,<a href="https://github.com/volatiletech/sqlboiler" target="_blank" rel="noopener">SQLBoiler</a>,<a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">xorm</a>の三つについて、それぞれの特徴や違いを押さえられる様まとめてみました。DBレイヤーのライブラリ検討の手がかりとなれば幸いです。</p><h1 id="ORMとは？"><a href="#ORMとは？" class="headerlink" title="ORMとは？"></a>ORMとは？</h1><p><strong>Object-Relational-Mapping</strong> の頭文字を取った略称です。直訳すると <strong>オブジェクト関係マッピング</strong> でしょうか。名前だけでは少し分かりにくいのでもう簡単に表現すると、<strong>オブジェクト(指向のプログラミング言語)と関係(データベース)のデータの対応付けをしてくれるもの</strong> となります。</p><p>ORMライブラリが持つ機能はたくさんありますが、以下のような機能を持つことが多いです。</p><ul><li>DBのRecordとのMapping</li><li>SQL文の組み立て</li></ul><p>それでは、GORM, SQLBoiler, xormについて比較していきます。</p><h1 id="結果サマリ"><a href="#結果サマリ" class="headerlink" title="結果サマリ"></a>結果サマリ</h1><p>AutoMigrationを始めとした各機能の説明は追って説明していきます。</p><table><thead><tr><th>Name</th><th>自動生成の経路</th><th>AutoMigration</th><th>Schemaからのリバース</th><th>Relation機能のライブラリ提供</th></tr></thead><tbody><tr><td>GORM</td><td>Struct -&gt; Schema生成</td><td>○</td><td>-</td><td>○</td></tr><tr><td>SQLBoiler</td><td>Schema -&gt; Struct生成</td><td>-</td><td>○</td><td>-</td></tr><tr><td>XORM</td><td>Schema -&gt; Struct生成</td><td>○</td><td>-</td><td>-</td></tr></tbody></table><h1 id="バージョン情報"><a href="#バージョン情報" class="headerlink" title="バージョン情報"></a>バージョン情報</h1><ul><li>Go <code>v1.12.9</code></li><li>ライブラリ<ul><li>gorm <code>v1.9.10</code></li><li>sqlboiler <code>v3.5.0</code></li><li>xorm <code>v0.7.6</code></li></ul></li><li>PostgreSQL <code>11.5</code><ul><li>検証環境は、<a href="https://hub.docker.com/_/postgres" target="_blank" rel="noopener">Docker公式のpostgresコンテナ</a>を使用し、<code>docker run --rm --name db -p 15432:5432 -d postgres:11.5</code> で起動しています</li></ul></li></ul><h1 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h1><h2 id="GORM"><a href="#GORM" class="headerlink" title="GORM"></a>GORM</h2><ul><li><a href="https://github.com/jinzhu/gorm" target="_blank" rel="noopener">GORM</a></li><li>特徴<ul><li>GoのDBレイヤーライブラリとしては最もGitHubのスター数が多い (14500+)</li><li>オートマイグレーション機能がある。 (※後述)</li></ul></li><li>所感<ul><li>分かりやすく、直感的で非常に使いやすい</li><li>structは自分で書く必要がある(DBからコードに落としてくれる機能はない)</li></ul></li></ul><p>それではコードレベルで紹介していきます。</p><h3 id="テーブル定義"><a href="#テーブル定義" class="headerlink" title="テーブル定義"></a>テーブル定義</h3><p>以下のような usersテーブルで存在するとします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \d</span></span><br><span class="line">         List of relations</span><br><span class="line"> Schema | Name  | Type  |  Owner</span><br><span class="line">--------+-------+-------+----------</span><br><span class="line"> public | users | table | postgres</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># \d users</span></span><br><span class="line">              Table <span class="string">"public.users"</span></span><br><span class="line"> Column | Type | Collation | Nullable | Default</span><br><span class="line">--------+------+-----------+----------+---------</span><br><span class="line"> name   | text |           |          |</span><br></pre></td></tr></table></figure><h3 id="CRUDサンプル"><a href="#CRUDサンプル" class="headerlink" title="CRUDサンプル"></a>CRUDサンプル</h3><p>GORM経由でCRUDを行ってみます。</p><figure class="highlight go"><figcaption><span>CURDサンプルコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">_ <span class="string">"github.com/lib/pq"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// User</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array of User</span></span><br><span class="line"><span class="keyword">type</span> Users []User</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := gorm.Open(<span class="string">"postgres"</span>, <span class="string">"host=localhost port=15432 user=postgres sslmode=disable"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO error handling</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// INSERT</span></span><br><span class="line">db.Create(&amp;User&#123;Name: <span class="string">"hoge"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT 1</span></span><br><span class="line">users := Users&#123;&#125;</span><br><span class="line">db.Find(&amp;users) <span class="comment">// SELECT * FROM users</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT 2</span></span><br><span class="line">user := User&#123;&#125;</span><br><span class="line">db.Take(&amp;user) <span class="comment">// SELECT * FROM users LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UPDATE</span></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">"Name"</span>, <span class="string">"huga"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE</span></span><br><span class="line">db.Delete(&amp;user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="オートマイグレーション機能"><a href="#オートマイグレーション機能" class="headerlink" title="オートマイグレーション機能"></a>オートマイグレーション機能</h3><p>Goの構造体とDBのスキーマを比較して、不足しているものを追加してくれる機能です。DBスキーマを簡単に作成してくれるので非常に有用です。しかし、カラムの削除や変更は出来ません。</p><p>例えば、UserテーブルにNameだけでなく年齢(Age)も足したくなった場合、Userの構造体を更新し、<code>db.Automigrate(&amp;User)</code> とするだけで自動的にカラムが追加されます。ではコードを見ていきましょう。</p><p>まず、Structに属性を追加します。</p><figure class="highlight go"><figcaption><span>usersの更新のためのStruct</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次に、オートマイグレーションのための <code>AutoMigrate</code> を呼び出します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := gorm.Open(<span class="string">"postgres"</span>, <span class="string">"host=localhost port=15432 user=postgres sslmode=disable"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO error handling</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"><span class="comment">// オートマイグレーション</span></span><br><span class="line">db.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次にDBのスキーマを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \d users</span></span><br><span class="line">               Table <span class="string">"public.users"</span></span><br><span class="line"> Column |  Type   | Collation | Nullable | Default</span><br><span class="line">--------+---------+-----------+----------+---------</span><br><span class="line"> name   | text    |           |          |</span><br><span class="line"> age    | <span class="built_in">integer</span> |           |          |</span><br></pre></td></tr></table></figure><p>テーブルにageカラムが追加されていることが分かりました。簡単ですね。</p><h3 id="Relation-Association"><a href="#Relation-Association" class="headerlink" title="Relation(Association)"></a>Relation(Association)</h3><p>GORMは簡単にRelation(Association)を組むことが出来ます。今回はUserがCreditCardを複数枚持つようなHasManyの関係を作ります。</p><p>※Userテーブルなしの状態(コンテナ作り立ての状態)からAutoMigrationします。（<a href="http://gorm.io/ja_JP/docs/has_many.html" target="_blank" rel="noopener">参考</a>)</p><p>構造体を以下のように定義します。</p><figure class="highlight go"><figcaption><span>Relationサンプル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">ID <span class="keyword">uint</span></span><br><span class="line">CreditCards []CreditCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">UserID <span class="keyword">uint</span></span><br><span class="line">Number <span class="keyword">string</span></span><br><span class="line">ID <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そしてオートマイグレーションを実施してDBのスキーマを更新します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := gorm.Open(<span class="string">"postgres"</span>, <span class="string">"host=localhost port=15432 user=postgres sslmode=disable"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO error handling</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line">db.AutoMigrate(&amp;User&#123;&#125;,&amp;CreditCard&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>psqlで結果を確認数と、外部キーは貼られていない気が・・しますね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \d</span></span><br><span class="line">                 List of relations</span><br><span class="line"> Schema |        Name         |   Type   |  Owner</span><br><span class="line">--------+---------------------+----------+----------</span><br><span class="line"> public | credit_cards        | table    | postgres</span><br><span class="line"> public | credit_cards_id_seq | sequence | postgres</span><br><span class="line"> public | users               | table    | postgres</span><br><span class="line"> public | users_id_seq        | sequence | postgres</span><br><span class="line">(4 rows)</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># \d credit_cards</span></span><br><span class="line">                             Table <span class="string">"public.credit_cards"</span></span><br><span class="line"> Column  |  Type   | Collation | Nullable |                 Default</span><br><span class="line">---------+---------+-----------+----------+------------------------------------------</span><br><span class="line"> user_id | <span class="built_in">integer</span> |           |          |</span><br><span class="line"> number  | text    |           |          |</span><br><span class="line"> id      | <span class="built_in">integer</span> |           | not null | nextval(<span class="string">'credit_cards_id_seq'</span>::regclass)</span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"credit_cards_pkey"</span> PRIMARY KEY, btree (id)</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># \d users</span></span><br><span class="line">                            Table <span class="string">"public.users"</span></span><br><span class="line"> Column |  Type   | Collation | Nullable |              Default</span><br><span class="line">--------+---------+-----------+----------+-----------------------------------</span><br><span class="line"> name   | text    |           |          |</span><br><span class="line"> id     | <span class="built_in">integer</span> |           | not null | nextval(<span class="string">'users_id_seq'</span>::regclass)</span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"users_pkey"</span> PRIMARY KEY, btree (id)</span><br></pre></td></tr></table></figure><h4 id="リレーションサンプル"><a href="#リレーションサンプル" class="headerlink" title="リレーションサンプル"></a>リレーションサンプル</h4><p>ユーザのIDからCreditCardの情報を得てみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// INSERT</span></span><br><span class="line">db.Create(&amp;User&#123;Name: <span class="string">"hoge"</span>,</span><br><span class="line">ID:<span class="number">20</span>,</span><br><span class="line">CreditCards: []CreditCard&#123;</span><br><span class="line">&#123;Number:<span class="string">"1x"</span>, ID:<span class="number">1</span>&#125;,</span><br><span class="line">&#123;Number:<span class="string">"2x"</span>, ID:<span class="number">2</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT</span></span><br><span class="line">u := User&#123;ID: <span class="number">20</span>&#125;</span><br><span class="line">cs := []CreditCard&#123;&#125;</span><br><span class="line">db.Model(&amp;u).Related(&amp;cs)</span><br><span class="line"></span><br><span class="line">fmt.Println(cs) <span class="comment">// -&gt; [&#123;20 1x 1&#125; &#123;20 2x 2&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="GORMの所感"><a href="#GORMの所感" class="headerlink" title="GORMの所感"></a>GORMの所感</h2><ul><li>全体的に分かりやすく、直感的で非常に使いやすい</li><li>structは自分で書く必要がある(DBからコードに落としてくれる機能はない)</li><li>記事には載せていませんが、構造体にgorm.Modelを定義することで、ID,CreatedAt,DeletedAtのカラムが追加され、論理削除となる機能もある<ul><li>ORMでこういったレイヤーまでサポートしてくれるのは面白いですね</li></ul></li></ul><h2 id="SQLBoiler"><a href="#SQLBoiler" class="headerlink" title="SQLBoiler"></a>SQLBoiler</h2><ul><li><a href="https://github.com/volatiletech/sqlboiler" target="_blank" rel="noopener">SQLBoiler</a></li><li>特徴<ul><li>高速(らしい) 参考:<a href="https://github.com/volatiletech/sqlboiler#benchmarks" target="_blank" rel="noopener">sqlboilerのベンチマーク</a></li><li>SQLとの接続部分は自前で実装する必要がある</li><li>DBからコードを自動生成するためにtomlファイルを書く必要がある。</li><li>SQL文の自動生成がメイン機能</li></ul></li></ul><h3 id="テーブル定義-1"><a href="#テーブル定義-1" class="headerlink" title="テーブル定義"></a>テーブル定義</h3><p>サンプルで用いるusersテーブルとシーケンスです。</p><p>primary keyがないテーブルにはSQLBoilerは使用できない(<code>Error: unable to initialize tables: primary key missing in tables</code>) のでご注意を。</p><figure class="highlight bash"><figcaption><span>サンプルで利用するDBテーブル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \d </span></span><br><span class="line">              List of relations</span><br><span class="line"> Schema |     Name     |   Type   |  Owner</span><br><span class="line">--------+--------------+----------+----------</span><br><span class="line"> public | users        | table    | postgres</span><br><span class="line"> public | users_id_seq | sequence | postgres</span><br><span class="line">(2 rows)</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># \d users </span></span><br><span class="line">                            Table <span class="string">"public.users"</span> </span><br><span class="line"> Column |  Type   | Collation | Nullable |              Default</span><br><span class="line">--------+---------+-----------+----------+-----------------------------------</span><br><span class="line"> name   | text    |           |          |</span><br><span class="line"> id     | <span class="built_in">integer</span> |           | not null | nextval(<span class="string">'users_id_seq'</span>::regclass)</span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"users_pkey"</span> PRIMARY KEY, btree (id)</span><br></pre></td></tr></table></figure><h3 id="自動生成"><a href="#自動生成" class="headerlink" title="自動生成"></a>自動生成</h3><p>SQLBoilerは、DBスキーマとTOMLファイルから生成されたパッケージをインポートして使うのが基本となります。</p><p>まずは、プロジェクトのルートに<code>sqlboiler.toml</code>を置きます。そのtomlファイルにDBの接続先情報やオプションなどの設定を書いていきます。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pkgname</span>=<span class="string">"db"</span></span><br><span class="line"><span class="attr">output</span>=<span class="string">"app/db"</span></span><br><span class="line"><span class="attr">add-global-variants</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">add-panic-variants</span>=<span class="literal">true</span></span><br><span class="line"><span class="section">[psql]</span></span><br><span class="line">  dbname="postgres"</span><br><span class="line">  host="localhost"</span><br><span class="line">  port=15432</span><br><span class="line">  user="postgres"</span><br><span class="line">  sslmode="disable"</span><br></pre></td></tr></table></figure><ul><li>TOMLファイルに<code>add-global-variants=true</code>を記述すると、グローバルに設定したコネクションを用いたDBの操作メソッドが追加されます。</li><li><code>add-panic-variants=true</code>を記述すると、error発生時にerrorを返す代わりにpanicを起こすDBの操作メソッドが追加されます。</li></ul><p>TOMLを書いたらコード生成に必要なパッケージをインストールしていきます。</p><figure class="highlight bash"><figcaption><span>インストール</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/volatiletech/sqlboiler</span><br><span class="line">go get -u github.com/volatiletech/sqlboiler/drivers/sqlboiler-psql</span><br></pre></td></tr></table></figure><p>インストールしたらいざコード生成を行います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlboiler --wipe psql</span><br></pre></td></tr></table></figure><p><code>--wipe</code>はコード生成前する前にoutputフォルダがあった際、そのフォルダを削除するフラグです。つけておいて損はほぼなさそうです。</p><p>生成後のプロジェクトファイル構造はこのようになります。(main.goは自分で作成したものです)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└─main.go</span><br><span class="line">└─sqlboiler.toml</span><br><span class="line">└─app</span><br><span class="line">  └─db</span><br><span class="line">    └─boil_main_test.go</span><br><span class="line">    └─boil_queries.go</span><br><span class="line">    └─boil_queries_test.go</span><br><span class="line">    └─boil_suites_test.go</span><br><span class="line">    └─boil_table_names.go</span><br><span class="line">    └─boil_types.go</span><br><span class="line">    └─psql_main_test.go</span><br><span class="line">    └─psql_suites_test.go</span><br><span class="line">    └─psql_upsert.go</span><br><span class="line">    └─users.go</span><br><span class="line">    └─users_test.go</span><br></pre></td></tr></table></figure><h3 id="CRUDサンプルコード"><a href="#CRUDサンプルコード" class="headerlink" title="CRUDサンプルコード"></a>CRUDサンプルコード</h3><p>自動生成したコードを用いてCRUDアクセスします。</p><figure class="highlight go"><figcaption><span>CRUDサンプルコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"./app/db"</span></span><br><span class="line">_ <span class="string">"github.com/lib/pq"</span></span><br><span class="line"><span class="string">"github.com/volatiletech/null"</span></span><br><span class="line"><span class="string">"github.com/volatiletech/sqlboiler/boil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">con, err := sql.Open(<span class="string">"postgres"</span>, <span class="string">"host=localhost port=15432 user=postgres sslmode=disable"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO error handling</span></span><br><span class="line">&#125;</span><br><span class="line">boil.SetDB(con)</span><br><span class="line"></span><br><span class="line"><span class="comment">// INSERT</span></span><br><span class="line">user := db.User&#123;Name: null.StringFrom(<span class="string">"hoge"</span>), ID: <span class="number">1</span>&#125;</span><br><span class="line">user.InsertGP(context.Background(), boil.Infer())</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT</span></span><br><span class="line">users := db.Users().AllGP(context.Background())</span><br><span class="line"></span><br><span class="line"><span class="comment">// UPDATE</span></span><br><span class="line">user = db.User&#123;ID:<span class="number">1</span>, Name: null.StringFrom(<span class="string">"huga"</span>)&#125;</span><br><span class="line">user.UpdateGP(context.Background(), boil.Infer())</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE</span></span><br><span class="line">user.DeleteGP(context.Background())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Relation"><a href="#Relation" class="headerlink" title="Relation"></a>Relation</h3><p>コード生成の段階でRelationを貼っておく必要があります。本当は検証のためにGORMのAutoMigrationでサクッと外部キーを貼ろうとしたがAutoMigrationでは貼ってくれないようなので自分でテーブルを作ります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create table users ( id serial primary key, name text );</span></span><br><span class="line"><span class="comment"># create table credit_card ( id serial primary key, number text, user_id int references users(id) );</span></span><br></pre></td></tr></table></figure><p>上記スキーマでテーブルを作りデータを投入します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user := db.User&#123;Name: null.StringFrom(<span class="string">"hoge"</span>), ID: <span class="number">3</span>&#125;</span><br><span class="line">c1 := db.CreditCard&#123;Number: null.StringFrom(<span class="string">"n"</span>), ID: <span class="number">21</span>&#125;</span><br><span class="line">c2 := db.CreditCard&#123;Number: null.StringFrom(<span class="string">"n2"</span>), ID: <span class="number">22</span>&#125;</span><br><span class="line"></span><br><span class="line">user.InsertGP(context.Background(), boil.Infer())</span><br><span class="line">user.SetCreditCardsGP(context.Background(), <span class="literal">true</span>, &amp;c1, &amp;c2)</span><br></pre></td></tr></table></figure><p>postgres側でレコードの確認します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">postgres=# <span class="keyword">select</span> * from credit_card;</span><br><span class="line"> id | number | user_id </span><br><span class="line">----+--------+---------</span><br><span class="line"> <span class="number">21</span> | n      |       <span class="number">3</span></span><br><span class="line"> <span class="number">22</span> | n2     |       <span class="number">3</span></span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">postgres=# <span class="keyword">select</span> * from users;</span><br><span class="line"> id | name </span><br><span class="line">----+------</span><br><span class="line">  <span class="number">3</span> | hoge</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></table></figure><p>適切にレコードが追加されていますね。</p><p>以下はdbからuserのレコードを一件持ってきて、userに結びついているcardを持ってくるコードです。<br>かなり直感的に書けます。コード読んで何しているか分かりやすいです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users := db.Users().OneGP(context.Background())</span><br><span class="line">cards := users.CreditCards().AllGP(context.Background())</span><br></pre></td></tr></table></figure><h3 id="備考：Tips-null-StringFromやnull-IntFromの話"><a href="#備考：Tips-null-StringFromやnull-IntFromの話" class="headerlink" title="備考：Tips null.StringFromやnull.IntFromの話"></a>備考：Tips null.StringFromやnull.IntFromの話</h3><p>db操作する際にstringを入れる事はできず、null.StringFromを利用する必要がありましたが、なぜそうなっているのか、どのような振る舞いをするのか調査しました。</p><p>そこで、定義を見に行きました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringFrom</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">String</span></span></span><br></pre></td></tr></table></figure><p>ぱっと見「？？？」となるのですがよく見ると、<em>string</em> を引数にして <em>String</em> を返しています。</p><p>そして <em>String</em> は以下のように定義されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> String <span class="keyword">struct</span> &#123;</span><br><span class="line">    sql.NullString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sql.NullStringを包んでいますね。sql.NullStringの定義を確認してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NullString <span class="keyword">struct</span> &#123;</span><br><span class="line">    String <span class="keyword">string</span></span><br><span class="line">    Valid  <span class="keyword">bool</span> <span class="comment">// Valid is true if String is not NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Validの値を見て値がNULLかどうかを判別しています。</p><p>なぜこのような実装になっているかというと、golangにはnilがありますが、pointer型にしか使えないからです。</p><p>例えば、stringのゼロ値は””となり、NULLとの区別をつけることが出来ません。</p><p>このようにGoの型定義とSQLの型定義には差異があるためその差を埋めるためにnullパッケージが誕生し、それを介することでNULLの表現を可能にしています。</p><h3 id="SQLBoiler所感"><a href="#SQLBoiler所感" class="headerlink" title="SQLBoiler所感"></a>SQLBoiler所感</h3><ul><li>contextを明示的に用いているため非同期処理が比較的簡単に出来る。</li><li>tomlにすでに接続先情報が書かれているので正直sql.Openで再度接続先を明記するのは二度手間に感じた。</li><li>Relationは個人的にgormよりも直感的に扱えると感じた。</li></ul><h2 id="xorm"><a href="#xorm" class="headerlink" title="xorm"></a>xorm</h2><ul><li><a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">xorm</a></li><li>特徴<ul><li>生のSQL実行をサポートしている。</li><li><a href="https://github.com/go-xorm/cmd" target="_blank" rel="noopener">コマンドラインツール</a>が提供されている<ul><li>DBからコードを生成する機能などを持つ</li></ul></li><li>生成コードにテスト用コードも付属しているのが良い</li></ul></li></ul><h3 id="テーブル定義-2"><a href="#テーブル定義-2" class="headerlink" title="テーブル定義"></a>テーブル定義</h3><p>SQLBoilerと同じスキーマを利用します。折角なのでコマンドラインツールを用いてDBから構造体の生成もやります。</p><p>まずは <code>go get github.com/go-xorm/cmd/xorm</code> でインストールします。</p><p>その後、このコマンドで構造体を作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/go-xorm/cmd/xorm</span><br><span class="line">xorm reverse postgres <span class="string">"dbname=postgres host=localhost port=15432 user=postgres sslmode=disable"</span> templates/goxorm</span><br></pre></td></tr></table></figure><p><code>./models/users.go</code> が出来ていると思います。それを自分のプロジェクトフォルダに持ってくればOK。</p><p>生成されたusers.goの中身はこちらになりました。</p><figure class="highlight go"><figcaption><span>users.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Users <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`xorm:"TEXT"`</span></span><br><span class="line">Id   <span class="keyword">int</span>    <span class="string">`xorm:"not null pk autoincr INTEGER"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>それではこのコードを用いてCRUDしてみます。</p><h2 id="CRUDサンプル-1"><a href="#CRUDサンプル-1" class="headerlink" title="CRUDサンプル"></a>CRUDサンプル</h2><figure class="highlight go"><figcaption><span>xormのCRUDサンプル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">model <span class="string">"./models"</span></span><br><span class="line"><span class="string">"github.com/go-xorm/xorm"</span></span><br><span class="line">_ <span class="string">"github.com/lib/pq"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">engine, err := xorm.NewEngine(<span class="string">"postgres"</span>, <span class="string">"dbname=postgres host=localhost port=15432 user=postgres sslmode=disable"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO error handling</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> engine.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// INSERT</span></span><br><span class="line">user := model.Users&#123;Id: <span class="number">3</span>, Name: <span class="string">"hoge"</span>&#125;</span><br><span class="line">engine.Insert(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT</span></span><br><span class="line"><span class="keyword">var</span> users []model.Users</span><br><span class="line">engine.Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// UPDATE</span></span><br><span class="line">user.Name = <span class="string">"huga"</span></span><br><span class="line">engine.ID(<span class="number">3</span>).Update(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE</span></span><br><span class="line">engine.ID(<span class="number">3</span>).Delete(&amp;user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xorm所感"><a href="#xorm所感" class="headerlink" title="xorm所感"></a>xorm所感</h2><ul><li>xorm.NewEngineでインスタンスを作成してそれを操作していく形で分かりやすい</li><li>リレーションを貼ることが出来ない？(SQLで書く必要がある？。)<a href="https://github.com/go-xorm/xorm/issues/41" target="_blank" rel="noopener">ORM Cascading Proposal · Issue #41 · go-xorm/xorm</a></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>GoのORMである、GORM, SQLBoiler, xormについて比較した</li><li>ORMと名乗っていても、オートマイグレーション機能や、コードの自動生成機能、論理削除など各ライブラリ特有の差別化要素がある</li><li>構造体からSchemaを生成してくれるAutoMigrationはとても魅力的な機能ですが、過信せず生成されたDBスキーマを確認する事が大切</li></ul><p>今回わたしのPJでは社内ナレッジが蓄積されている点でGORMを採用しました。（CRUD操作が直感的で取っ付きやすいので個人的にも良いと思いました）。実際の開発や運用を通して得られたナレッジなどは別途ブログ化したいと思っています。</p><h1 id="作成したコード"><a href="#作成したコード" class="headerlink" title="作成したコード"></a>作成したコード</h1><p><a href="https://github.com/reud/blog-orm" target="_blank" rel="noopener">https://github.com/reud/blog-orm</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://qiita.com/niisan-tokyo/items/156eb35c6eeaf07b9b65#2-%E3%82%B2%E3%83%83%E3%82%BF%E3%83%BC%E3%82%BB%E3%83%83%E3%82%BF%E3%83%BC%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B" target="_blank" rel="noopener">もっとORMを使えるようになりたいので、見直してみた - Qiita</a></li><li><a href="https://www.atmarkit.co.jp/ait/articles/0404/13/news075.html" target="_blank" rel="noopener">O/Rマッピングの役割とメリット：Hibernateで理解するO/Rマッピング（1） - ＠IT</a></li><li><a href="http://gorm.io/docs/migration.html#Auto-Migration" target="_blank" rel="noopener">Migration | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></li><li><a href="http://sakataharumi.hatenablog.jp/entry/2018/06/14/143710" target="_blank" rel="noopener">gormでRelationを組む方法とn+1の回避 - 女子高生になりたい</a></li><li><a href="https://github.com/volatiletech/sqlboiler" target="_blank" rel="noopener">volatiletech/sqlboiler: Generate a Go ORM tailored to your database schema.</a></li><li><a href="https://github.com/jinzhu/gorm" target="_blank" rel="noopener">jinzhu/gorm: The fantastic ORM library for Golang, aims to be developer friendly</a></li><li><a href="https://ken-aio.github.io/post/2019/02/13/golang-sqlboiler/" target="_blank" rel="noopener">GolangのORM SQLBoilerを使ってみる - セットアップ編 - ken-aio’s blog</a></li><li><a href="http://gorm.io/ja_JP/docs/has_many.html" target="_blank" rel="noopener">Has Many | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></li><li><a href="https://qiita.com/uhey22e/items/640a4ae861d123b15b53" target="_blank" rel="noopener">Goの新定番？ORMのSQLBoilerを使ってみる - Qiita</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;headerlink&quot; title=&quot;自己紹介&quot;&gt;&lt;/a&gt;自己紹介&lt;/h1&gt;&lt;p&gt;小林と申します。アルバイトとして2019年2月からフューチャーで働いている大学生です。&lt;/p&gt;
&lt;p&gt;アルバイトとして入社後
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title> Oculus Questで作る入院中の子どもたちに向けたパラスポーツ体験</title>
    <link href="https://future-architect.github.io/articles/20190925/"/>
    <id>https://future-architect.github.io/articles/20190925/</id>
    <published>2019-09-25T01:49:43.000Z</published>
    <updated>2019-10-07T23:58:55.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャーアーキテクト入社3年目の西村です。</p><p>いよいよ2020年に開催される東京オリンピック・パラリンピックまで1年を切りましたね。<br>フューチャーでは2018年から<strong><a href="https://minnano2020.yahoo.co.jp/yahoo/27.html" target="_blank" rel="noopener">スポーツ団体の事業をITで支援するプロジェクト</a></strong>に取り組んでいます。<br><img class="img-middle-size" src="/images/20190925/photo_20190925_01.png"></p><blockquote><p>同社グループではプロスポーツにおけるITコンサルティングで複数の実績があり、強みとしているテクノロジー分野での技術力や経験を生かして、スポーツの魅力をより広く伝え、競技のファンを増やすための活動を行っていく。</p></blockquote><p>一例としてブラインドサッカーの支援などを行っています。</p><img class="img-middle-size" src="/images/20190925/4.png"><blockquote><p>競技をVR（バーチャル・リアリティー）体験できるイベントを行いました。ブラインドサッカーの選手は視覚が無いため、ボールの転がる音や、味方からの指示、相手選手の声を頼りにプレーしています。こうしたブラインドサッカーの世界を一般人でも気軽に理解できるよう、音を頼りにプレーするシミュレーション形式の体験アプリを開発しました」</p></blockquote><p>このプロジェクトの中で私が関わっている取り組みとして、<strong>Oculus Questを使った入院中の子どもたちに向けてパラスポーツのアプリ</strong>を作ってるので、今回ご紹介します。</p><h1 id="入院中の子どもたちに、スポーツの楽しさを伝えたい"><a href="#入院中の子どもたちに、スポーツの楽しさを伝えたい" class="headerlink" title="入院中の子どもたちに、スポーツの楽しさを伝えたい"></a>入院中の子どもたちに、スポーツの楽しさを伝えたい</h1><p>上記の<a href="https://minnano2020.yahoo.co.jp/yahoo/27.html" target="_blank" rel="noopener">記事</a>にある通り、元パラアイスホッケー日本代表の上原大祐さんと一緒に、入院中の子どもたちに向けたパラスポーツ体験プロジェクトを進めています。</p><blockquote><p>何かしらの事情で歩けなくなった子供たちや、入院中の子供たちに、ITを使ってパラスポーツを体験してもらうことができないかと考えています。スポーツの楽しさを感じてもらい、実際にパラスポーツを志してもらうことだったり、それをモチベーションにリハビリを頑張ってもらったり。</p></blockquote><p>スポーツを通して、何かしらの事情で歩けなくなった子どもたちや入院中の子どもたちを応援したい、という思いで上原さんは活動されています。<br>そして、我々もその思いに共感し、今回一緒にプロジェクトを推進することになりました。</p><p>入院している子どもたちの状況は様々で、入院中の多くの時間をベッドの上で過ごしています。<br>スポーツを通して応援しようとしても、実際に全身を使った運動をするのは難しい子どもたちばかりです。</p><p>そのため、ITで<strong>『ベッドの上できるスポーツ』</strong>を提供し、ITを使ってスポーツの楽しさを子どもたちに体験してもらいたいと考えています。</p><h1 id="『ベッドの上でできるスポーツ』をITで"><a href="#『ベッドの上でできるスポーツ』をITで" class="headerlink" title="『ベッドの上でできるスポーツ』をITで"></a>『ベッドの上でできるスポーツ』をITで</h1><p>そのため、ITで<strong>『ベッドの上でできるスポーツ』</strong>を提供し、ITを使ってスポーツの楽しさを子どもたちに体験してもらいたいと考えています。</p><p>具体的に、どんな『ベッドの上でできるスポーツ』をITで提供しようとしているかというと、上原さんが昔選手としてご活躍されていたパラアイスホッケーを体験するVRアプリを作ろうとしています。</p><p>パラアイスホッケー（別名アイススレッジホッケー）は、下半身に障害を持つ人がアイスホッケーを行えるよう改良された障がい者スポーツで、スレッジと呼ばれるソリに乗り、両手にスティックを持って氷の上で競技します。</p><img class="img-small-size" src="/images/20190925/5.png"><p>このアイススレッジホッケーを『ベッドの上でできるスポーツ』にするためにはどうしたら良いか考えました。</p><p>ちょうどデバイス検討中にOculus Questが発売される情報があり、またOculus Questは<br><strong>・スタンドアロンでベッド上でもお手軽に利用可能</strong><br><strong>・両手コントローラーで、スティックを再現するのに最適</strong><br>だったため、Oculus Questをデバイスとして採用しました。</p><h1 id="アイススレッジホッケー体験VR開発プロジェクト始動！"><a href="#アイススレッジホッケー体験VR開発プロジェクト始動！" class="headerlink" title="アイススレッジホッケー体験VR開発プロジェクト始動！"></a>アイススレッジホッケー体験VR開発プロジェクト始動！</h1><p>アイススレッジホッケーについて、まさに選手として活躍されていた上原さんから実体験を聞きたい！ということで、<br>7月にVRアプリの試作品を持って、上原さんとミーティングしました。</p><img class="img-middle-size" src="/images/20190925/photo_20190925_02.jpeg"><p>実際に体験してもらった感想をもらったり</p><img class="img-middle-size" src="/images/20190925/photo_20190925_03.jpeg"><p>改めてITを使ってスポーツの楽しさを伝えたい、というお互いの熱い思いを共有しました！</p><p>まだまだ試作段階ですが、実際に何作ったか、どんなコード書いたかは、次回実装編にてご紹介します！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>スポーツの楽しさを感じてもらい、実際にパラスポーツを志してもらうことだったり、それをモチベーションにリハビリを頑張ってもらったり。<br>ITの力で今まで体験できなかったことがベッドの上でもできるようになると、きっと子どもたちの未来に新たな可能性が広がっていくことに繋がると信じています。</p><p>今後は、プロトタイプを持って特別支援学校や病院を巡り、子どもたちに実際に体験をしてもらい、フィードバックをもらう予定です。</p><p>VRアプリが完成したら、またご紹介させていただきたいと思います。</p><p><strong>・治療のモチベーションが無いので、目標が欲しい</strong><br><strong>・歩いたことが無いので、歩く体験をしてみたい</strong><br><strong>・ベッドから動けなくても、上原さんの行っている活動に参加してみたい</strong><br>といった子どもたちの思いを叶えるべく、VRを有効活用できるアイデアを<strong>大大大募集</strong>しています！</p><p>こんな活動に関心があったら、<a href="https://www.future.co.jp/contact_us/" target="_blank" rel="noopener">HPのお問い合わせ</a> かTwitter（<a href="https://twitter.com/future_techblog" target="_blank" rel="noopener">@future_techblog</a>）に連絡ください。</p><p>最後まで読んでいただき、ありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、フューチャーアーキテクト入社3年目の西村です。&lt;/p&gt;
&lt;p&gt;いよいよ2020年に開催される東京オリンピック・パ
      
    
    </summary>
    
      <category term="VR" scheme="https://future-architect.github.io/categories/VR/"/>
    
    
      <category term="Unity" scheme="https://future-architect.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>サステナブルなエンジニア組織デザイン（後編） ～デザインパターンと10のリファクタリング～</title>
    <link href="https://future-architect.github.io/articles/20190918/"/>
    <id>https://future-architect.github.io/articles/20190918/</id>
    <published>2019-09-17T23:37:42.000Z</published>
    <updated>2019-09-18T05:40:43.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="サステナブルなエンジニア組織デザイン-後編"><a href="#サステナブルなエンジニア組織デザイン-後編" class="headerlink" title="サステナブルなエンジニア組織デザイン 後編"></a>サステナブルなエンジニア組織デザイン 後編</h1><p>前編ではエンジニア組織のよくある設計とジレンマについて紹介しました。</p><ul><li><a href="/articles/20190917/">前編：サステナブルなエンジニア組織デザイン ～よくある設計とジレンマ～</a></li><li>後編：サステナブルなエンジニア組織デザイン ～デザインパターンと10のリファクタリング～</li></ul><p>後編ではサステナブルなエンジニア組織に向けたデザインパターンとリファクタリングのプラクティスについて紹介します。</p><h1 id="対象者"><a href="#対象者" class="headerlink" title="対象者"></a>対象者</h1><p>エンジニアに敬意を払える正しい認識を持ってることを前提として以下のような方々を対象としています。</p><ul><li>スタートアップなどでエンジニア組織をこれから作っていこうとされている方</li><li>エンジニア組織駆動でビジネスをスケールさせていこうと思っている方</li><li>他、エンジニア組織に対して様々な課題認識を持っていられる方<ul><li>エンジニアの獲得がうまくいかずに組織が大きくならない</li><li>エンジニアがどんどん離れていってしまっている</li><li>エンジニアのモチベーションがアップするような仕事環境を与えられていない</li><li>エンジニアが好き勝手やるので収益に結びつかない</li><li>エンジニアのキャリア形成がうまくいっていない</li><li>エンジニアのレジェンド達が新しいチャレンジを許さない</li><li>エンジニアとは名ばかりでベンダーコントロールするだけの組織になっている</li></ul></li></ul><h1 id="エンジニア組織のデザインパターン"><a href="#エンジニア組織のデザインパターン" class="headerlink" title="エンジニア組織のデザインパターン"></a>エンジニア組織のデザインパターン</h1><p>今まで試行したことのある主だったエンジニア組織のデザインパターンを整理してみました。<br><img src="/images/20190918/photo_20190918_01.png"></p><p>組織全体への適用だったり、部分適用だったりと多少の違いはありますが、いずれかのパターンの組み合わせでリファクタリングしています。それぞれのパターンに特徴があり、万能な組織デザインは存在しません。組織デザイン検討にあたってはリファレンスになるデザインパターンとして適宜組み合わせてみたりしてもらえるとよいかと思います。<a href="/articles/20190917/">前編</a>で少し触れたティールは遠目で見ればホラクラシーに分類できるので以降はそう読み替えてもらっても大きくミスリードはしないかと思います。</p><h3 id="アーキテクチャ型組織デザインパターン（A型）"><a href="#アーキテクチャ型組織デザインパターン（A型）" class="headerlink" title="アーキテクチャ型組織デザインパターン（A型）"></a>アーキテクチャ型組織デザインパターン（A型）</h3><p>技術領域カットで組織を構成し技術専門性の強化を重視します。技術領域を細分化すると専門性を強化することができるメリットがあります。また組織機能重複もなく合理的な組織デザインです。ただし、特定の技術領域だけでは成り立たないようなプロジェクトでは分業制が進みやすくなり、プロジェクトのオーナーシップやカルチャー形成が分断されていく課題が頻発します。またフルスタック志向のエンジニアのキャリア形成にはこの分業制が足枷になりやすい構造です。</p><h3 id="プロジェクト型組織デザインパターン（P型）"><a href="#プロジェクト型組織デザインパターン（P型）" class="headerlink" title="プロジェクト型組織デザインパターン（P型）"></a>プロジェクト型組織デザインパターン（P型）</h3><p>事業領域のテーマやプロジェクトカットで組織を構成し機動性を重視します。一気通貫でプロジェクトに携わることによって個人の裁量も増え、個人のオーナーシップが醸成しやすいです。一方で各プロジェクトに組織機能が重複するためノウハウ蓄積が課題になりやすい構造です。目に見える形での成果は出しやすい一方で技術領域の専門性などが犠牲になりやすい構造とも言えます。</p><h3 id="マトリクス型組織デザインパターン（M型）"><a href="#マトリクス型組織デザインパターン（M型）" class="headerlink" title="マトリクス型組織デザインパターン（M型）"></a>マトリクス型組織デザインパターン（M型）</h3><p>技術領域とプロジェクト領域のマトリクスで組織を構成し、A型とP型のいいとこどりを狙った組織デザインパターンです。それぞれの弱点を補完する組織として個々のエンジニアの思考やスキルセットに応じてバランスがとりやすい構造です。プロジェクト型よりも組織機能の重複が減り合理的な組織デザインでもあります。一見すると万能な組織デザインに見えますが、エンジニア個人からみると技術領域とプロジェクト領域の二つのレポートラインが存在するため負担増になり、優先順位が明確でなければ組織のガバナンスに歪みが出やすい構造です。また技術領域を細目に分けてしまうことは余計に負担増が発生してしまうためアンチパターンになります。</p><h3 id="ホラクラシー型組織デザインパターン（H型）"><a href="#ホラクラシー型組織デザインパターン（H型）" class="headerlink" title="ホラクラシー型組織デザインパターン（H型）"></a>ホラクラシー型組織デザインパターン（H型）</h3><p>ヒエラルキーを排除し、エンジニアや小チームが有機的につながりプロジェクトを遂行する組織デザインパターンです。ミッションや価値観が共有されていてゴールイメージが明確であれば、チームワークは活性化され成果を最大化しやすい構造です。エンジニア個人のキャリアにも効果的であり、組織的なノウハウ蓄積に加えノウフー（Know Who）による集合知形成がしやすくなります。ただし、個人に多くの判断を委ねられることが多くなるため属人化が進み、結果的に組織機能の重複が多くなる傾向があります。組織全体にボトルネックやグレーゾーンが生まれやすくなり、関係者が増えれば増えるほど共有すべき価値観は希薄化し、大きなプロジェクトを遂行するには無理が生じやすい構造でもあります。</p><p>まとめると、こんな感じでしょうか。いずれも相対的な評価です。</p><table><thead><tr><th align="left">観点</th><th align="left">内容</th><th align="center">A型</th><th align="center">P型</th><th align="center">M型</th><th align="center">H型</th></tr></thead><tbody><tr><td align="left">オーナーシップ</td><td align="left">仕事に対してオーナーシップが育まれやすいか？</td><td align="center">△</td><td align="center">◯</td><td align="center">△</td><td align="center">△</td></tr><tr><td align="left">オペレーション</td><td align="left">組織のオペレーションに重複がないか？</td><td align="center">◯</td><td align="center">×</td><td align="center">△</td><td align="center">×</td></tr><tr><td align="left">モビリティ</td><td align="left">個人やチームの機動性はあるか？</td><td align="center">×</td><td align="center">◯</td><td align="center">△</td><td align="center">◯</td></tr><tr><td align="left">カルチャー</td><td align="left">生まれたカルチャーが維持されやすいか？</td><td align="center">△</td><td align="center">◯</td><td align="center">◯</td><td align="center">◯</td></tr><tr><td align="left">ノウハウ</td><td align="left">ノウハウが蓄積されやすいか？</td><td align="center">◯</td><td align="center">△</td><td align="center">◯</td><td align="center">？</td></tr><tr><td align="left">プレッシャー</td><td align="left">個人やチームの負担はあるか？</td><td align="center">◯</td><td align="center">△</td><td align="center">△</td><td align="center">×</td></tr><tr><td align="left">パフォーマンス</td><td align="left">個人やチームの成果がでやすいか？</td><td align="center">△</td><td align="center">◯</td><td align="center">△</td><td align="center">？</td></tr><tr><td align="left">モチベーション</td><td align="left">個人のモチベーションが維持されやすいか？</td><td align="center">△</td><td align="center">◯</td><td align="center">△</td><td align="center">◯</td></tr><tr><td align="left">キャリア</td><td align="left">キャリア形成がしやすいか？</td><td align="center">△</td><td align="center">△</td><td align="center">◯</td><td align="center">◯</td></tr></tbody></table><p>ホラクラシー型に「？」があるのはうまく機能させるには前提条件があるからです。ホラクラシー型には行動指針といった価値観の共有が不可欠です。それらが価値基準として各個人まで血の巡りのように隅々までいきわたっていることが前提条件です。</p><p>参考までに2010年頃に当時30名ぐらいだったメンバーに対して共有した一枚を紹介します。</p><img src="/images/20190918/photo_20190918_02.png"><p>当時は20代の頃でプロジェクトが佳境の中、勢いで書いたペーパーなので今みるとちょっと恥ずかしいですが、、、当時のメンバー各人が強烈な「課題認識」をもち、課題に対して「自発的行動」を促し、エンジニア同士が「有機的協調」して、課題の根本解決に向けた「技術（自己）投資」を継続しながら成果に「コミットメント」する。そのサイクルが更に新たな成果を生んでいく、といったことができていた組織でした。過去を美化している感はありますが、当時は言葉の定義もなかったホラクラシー型組織のいくつかの要素を満たしていたのではないかと思っています。</p><h3 id="ホラクラシーとマズロー"><a href="#ホラクラシーとマズロー" class="headerlink" title="ホラクラシーとマズロー"></a>ホラクラシーとマズロー</h3><p>非常に有名な「マズローの5段階欲求」の最上位欲求「自己実現欲求」は知的好奇心が旺盛なエンジニアには特に強い傾向があると思います。この欲求を刺激することはエンジニアのキャリア形成にとっても非常に大事です。ただし、それだけではエンジニアのサステナブルな組織化は難しいというモヤモヤがずっとありました。それに対してマズロー自身が晩年になって更に上位に6段階目の欲求「自己超越欲求」について言及していたことを恥ずかしながらつい最近知りました。</p><img src="/images/20190918/photo_20190918_03.png"><p>ホラクラシー型を目指すことは「自己超越欲求」に応えることだと勝手解釈して個人的に納得してます。エンジニア個人の自己実現という狭い視野からチーム成長を通して自己超越したいという欲求を満たすこと、つまりはチーム＝自分自身という感覚を養っていくということではないかと整理してます。</p><h1 id="10の症状とリファクタリング"><a href="#10の症状とリファクタリング" class="headerlink" title="10の症状とリファクタリング"></a>10の症状とリファクタリング</h1><p>エンジニア組織の様々なジレンマを解消できるような西洋医学的な特効薬は存在しません。組織としての成熟度や課題認識に応じて適切なタイミングで東洋医学的に組織デザインをリファクタリングし続ける継続力が重要です。</p><p>リファクタリングのタイミングを見計らうのに利用したのがチームビルディング理論として有名な「タックマンモデル」です。</p><img src="/images/20190918/photo_20190918_04.png"><p>タックマンが提唱したこの理論はチームが機能的に進化する過程を表しているもので、あまりに普遍的なモデルなのでチームビルディングを志す人なら目にされた方も多いかと思います。</p><p>タックマンモデルの説明は他に任せるとして割愛しますが、ここでお伝えしたいことはエンジニアに異変を感じた時に即リアクションして必要に応じてリファクタリングすることの重要性です。組織が成長するタイミングで起きる歪みはエンジニアの行動変化から始まります。変化に敏感に気がついて早期にリアクションして適切な処方をしないと機能的な組織デザインには進化しません。</p><p>以下、組織のリファクタリングのきっかけとなる10の症状と処方箋を紹介します。</p><img src="/images/20190918/photo_20190918_05.png"><h3 id="一、老害シンドローム"><a href="#一、老害シンドローム" class="headerlink" title="一、老害シンドローム"></a>一、老害シンドローム</h3><p>エンジニアから「俺らの頃は～」という表現がよく聞こえてくるようになったのなら絶好のリファクタリングのタイミングです。特にレジェンド達が過去の成功体験を語り続けているなら気を付けた方がよいでしょう。過去の経験は尊いものですが、成功体験による自信は行き過ぎると過信へと変わります。過信は停滞を生む大きな原因の一つです。成功体験しか言わないレジェンドには別の役割を与えた方がいいでしょう。書籍『<a href="https://www.amazon.co.jp/dp/B00KD2IK4S/" target="_blank" rel="noopener">チーズはどこに消えた？</a>』でも渡しておくといいかもしれません。また、この症状の場合はヒエラルキーが深くなっていることが可能性が高いため、組織デザインをよりフラットにするような処方が効果的です。</p><p>　　→　処方箋：組織デザイン変更（P型、H型など）</p><h3 id="二、安定シンドローム"><a href="#二、安定シンドローム" class="headerlink" title="二、安定シンドローム"></a>二、安定シンドローム</h3><p>エンジニアの「実績を重視して～」という表現がよく聞こえてくるようになったのなら絶好のリファクタリングのタイミングです。実績は非常に大事ではありますが、意思決定に実績しか選択理由がない場合は安定という名の思考停止をしている可能性がありますので気を付けた方がよいでしょう。現状維持の安易な選択は変化を拒んでいる証拠です。技術的負債の正体は現状維持バイアスです。これが続くとエンジニア組織の癌細胞になる可能性があります。まだ小さいうちに対処して取り除いておくことが大事です。</p><p>　　→　処方箋：組織デザイン変更（A型、M型など）</p><h3 id="三、テクハラシンドローム"><a href="#三、テクハラシンドローム" class="headerlink" title="三、テクハラシンドローム"></a>三、テクハラシンドローム</h3><p>技術的な専門性で尖ったエンジニアが専門外の人に対してテクハラ（テクノロジー・ハラスメント）を見かけるようになったら注意喚起が必要です。チーム間に壁が生まれている可能性があります。一度築かれてしまった壁はなかなか崩れないので協調型に変えるなどといった大きなリファクタリングも必要になると覚悟した方がいいでしょう。</p><p>　　→　処方箋：組織デザイン変更（P型、M型など）</p><h3 id="四、燃え尽きシンドローム"><a href="#四、燃え尽きシンドローム" class="headerlink" title="四、燃え尽きシンドローム"></a>四、燃え尽きシンドローム</h3><p>大きなプロジェクトが終わりそうなタイミングはリファクタリングを検討するタイミングにもなります。大きなプロジェクトが終わると達成感を超えて燃え尽きてしまうことがあります。一度燃え尽きてしまうとなかなか回復するのに時間がかかるので早い段階での検知が不可欠です。燃え尽き状態になるネガティブな要因の一つは、偏ったプレッシャーを長い期間与え続け、エンジニアを低温火傷のように思考停止状態にさせてしまった点が挙げられます。回避させるためには日頃から定期的なメンタリングやキャリア相談がしやすい組織デザインへとリファクタリングしましょう。</p><p>　　→　処方箋：組織デザイン変更（M型など）</p><h3 id="五、内向性愚痴シンドローム"><a href="#五、内向性愚痴シンドローム" class="headerlink" title="五、内向性愚痴シンドローム"></a>五、内向性愚痴シンドローム</h3><p>エンジニアから所属チームに対する不平・不満が増えてきたタイミングでは対症療法的に一つ一つ改善させていくことが先決です。大きなリファクタリング（異動・交代、方針転換など）はかえって傷を大きくしやすいため、目の前の不平・不満がコツコツと改善する様子をエンジニア自身に感じてもらうことが重要です。大きなリファクタリングによる荒治療は最終手段に取っておきましょう。</p><p>　　→　処方箋：チーム内改善</p><h3 id="六、外向性愚痴シンドローム"><a href="#六、外向性愚痴シンドローム" class="headerlink" title="六、外向性愚痴シンドローム"></a>六、外向性愚痴シンドローム</h3><p>エンジニアから所属チーム外に対する不平・不満が増えてきたタイミングでは、言う側と言われる側のどちらの問題なのかをきっちり見極めて大きなリファクタリング（異動・交代）を考えましょう。チーム外に対する不平・不満は多くの場合で周囲に一気に広がる進行性の癌になりえます。組織が若いうちは特に進行が早いため配置転換も早ければ早いほどよいでしょう。</p><p>　　→　処方箋：異動・交代</p><h3 id="七、成長痛シンドローム"><a href="#七、成長痛シンドローム" class="headerlink" title="七、成長痛シンドローム"></a>七、成長痛シンドローム</h3><p>組織内の一つのチームに所属するエンジニア数が一定のラインを超えてくると、それまではうまくいっていたことがうまくいかない事態が起きてきます。ほとんどの場合は成長痛なので一度超えてしまえばチームの成長に繋がりますが、私自身の経験上ではチームあたり8名程度までが最適なメンバー数で30名程度になると直接的な指揮系統の限界を迎えます。限界を超えると必然的にヒエラルキーが深くなりやすく、それによるエンジニアに対する弊害が多くなるため、メンバー数が一定ラインを超えたチームはチーム分解を検討するのがよいでしょう。</p><p>　　→　処方箋：チームの分解</p><h3 id="八、血行不良シンドローム"><a href="#八、血行不良シンドローム" class="headerlink" title="八、血行不良シンドローム"></a>八、血行不良シンドローム</h3><p>エンジニアが同じチームに仲間が変わらない状況下で長期間所属している状況は、多くの場合チャレンジが減り現状維持バイアスという名の血行障害になるリスクがあります。この症状になると組織全体にいい影響を与えないことが多いため、日ごろからの心がけて血行を促進する必要があります。チームの所属期間をモニタリングするなどして、チームメンバーの流動性を維持管理していることが重要です。定期的な人材シャッフルなども有効でしょう。</p><p>　　→　処方箋：異動・交代</p><h3 id="九、マンネリシンドローム"><a href="#九、マンネリシンドローム" class="headerlink" title="九、マンネリシンドローム"></a>九、マンネリシンドローム</h3><p>エンジニアに対して「何かやりたいことがないのか？！」、「あなたの分身を育てようよ？！」という投げかけを頻繁に聞くようになったらチームが停滞しはじめている黄色信号です。ミッションや後継育成はリーダーが組織的にやることであって、エンジニアにそれを求めるようになってることはチームに成長の伸びしろがない証拠です。チームの可能性の幅を模索できないようならチーム解散も含む大きなリファクタリングを計画していく好機です。</p><p>　　→　処方箋：チーム解散</p><h3 id="十、うわべだけシンドローム"><a href="#十、うわべだけシンドローム" class="headerlink" title="十、うわべだけシンドローム"></a>十、うわべだけシンドローム</h3><p>エンジニアの真の声が聞こえなくなった、エンジニアからキャリア相談される機会が減った、ソースコードを書く/見る機会が減った、エンジニアの活動の評価を数字貢献だけでみるようになった、・・・などエンジニアとの距離感が遠くなったことに焦りを感じずにうわべだけのマネジメントになっている場合はもはや組織のリーダーシップとしては末期状態に近づきつつあります。リファクタリングの時期を逸している可能性が高いため、その時に考えるべきことは一つしかありません。</p><p>　　→　処方箋：あなた自身が退く</p><h1 id="後編まとめ"><a href="#後編まとめ" class="headerlink" title="後編まとめ"></a>後編まとめ</h1><p>サステナブルなエンジニア組織に向けたデザインパターンとリファクタリングのプラクティスについて紹介しました。</p><h3 id="エンジニア組織デザインのヒント"><a href="#エンジニア組織デザインのヒント" class="headerlink" title="エンジニア組織デザインのヒント"></a>エンジニア組織デザインのヒント</h3><ul><li>組織デザインパターンは万能ではなく各々にメリットとデメリットがある</li><li>組織デザインパターンは適宜組み合わせることで組織のデメリットを補強できる</li><li>エンジニアの行動指針や価値観の共有は組織を強くする</li><li>エンジニア組織が成熟していく時間軸をコントロールしてレベルアップさせる</li><li>エンジニアに対して紳士に向き合った対話を心掛ける</li><li>エンジニアの行動変化や異変を素早く検知・予想する</li><li>検知された異変に対して適切なタイミングで適切な処方をする</li><li>組織デザインのリファクタリングを継続することがサステナブルな組織へと進化させる</li></ul><h3 id="リーダーがやってはいけないことリスト"><a href="#リーダーがやってはいけないことリスト" class="headerlink" title="リーダーがやってはいけないことリスト"></a>リーダーがやってはいけないことリスト</h3><ul><li>実態の伴わない組織デザイン</li><li>エンジニアとの心理的な距離感</li><li>チーム間の壁の許容</li><li>深いヒエラルキーの許容</li><li>変化に対する意思決定の遅延</li><li>問題は時間が解決するという楽観主義</li><li>エンジニアの力を信じない悲観主義</li><li>現状に甘んじて自身を律することをしない甘え</li></ul><h3 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h3><ul><li><a href="/articles/20190917/">前編：サステナブルなエンジニア組織デザイン ～よくある設計とジレンマ～</a></li><li>後編：サステナブルなエンジニア組織デザイン ～デザインパターンと10のリファクタリング～</li></ul><h3 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h3><p>本稿のテーマに直接的に関連はしませんが個人的に組織デザインに影響を受けた書籍を紹介します。</p><p>2002年にダニエル・カーネマンがノーベル経済学賞を受賞して以来、脚光を浴びるようになった学問が行動経済学です。人間がかならずしも合理的には行動しないことに着目し、経済モデルに人間の心理を取り入れることで、トラディショナルな経済学ではうまく説明不能だった経済行動を実証的に捉えようとしたものです。</p><p>経済学の専門家でもないのでさらっと読める書籍の紹介になりますが、エンジニア組織デザインが経営学でいう組織論などとは合致しない点が多くてもやもやしていたのですが、行動経済の別視点で組織を眺めると多少なりとも参考になる点が多く応用できました。エンジニア組織に起きていた行動のいくつかが説明つくこともあるので予測可能な行動は先手を打つべく個人的に重宝しています。</p><p>何かの参考になれば。</p><img src="/images/20190918/photo_20190918_06.jpg" class="img-small-size" style="border:solid 1px #000000"><p>『<a href="https://www.amazon.co.jp/dp/B00K1A75N4/" target="_blank" rel="noopener">予想どおりに不合理</a>』　ダン・アリエリード(著)</p><hr><p>Yosuke Miyahara<br>Vice President/Technology Innovation Group/Future Corporation.<br><a href="https://newspicks.com/user/147180" target="_blank" rel="noopener">https://newspicks.com/user/147180</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;サステナブルなエンジニア組織デザイン-後編&quot;&gt;&lt;a href=&quot;#サステナブルなエンジニア組織デザイン-後編&quot; class=&quot;headerlink&quot; title=&quot;サステナブルなエンジニア組織デザイン 後編&quot;&gt;&lt;/a&gt;サステナブルなエンジニア組織デザイン 後編&lt;/
      
    
    </summary>
    
      <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
      <category term="組織論" scheme="https://future-architect.github.io/tags/%E7%B5%84%E7%B9%94%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>サステナブルなエンジニア組織デザイン（前編） ～よくある設計とジレンマ～</title>
    <link href="https://future-architect.github.io/articles/20190917/"/>
    <id>https://future-architect.github.io/articles/20190917/</id>
    <published>2019-09-17T02:00:42.000Z</published>
    <updated>2019-09-18T02:18:13.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>ここ数年来で人材マーケットにおけるIT人材の需要が高まり人材獲得合戦が過熱しています。経済産業省が2018年に公開したレポート「2025年の崖」では2025年にはIT人材不足が約43万人まで拡大すると指摘しています。やや煽り気味だなーと思えるぐらいにメディアも一斉に取り上げました。「今のうちにIT人材を大量獲得せよ！」とトップダウン指示を受けて、人材の囲い込み合戦に参戦して大変になられている人事担当の方も多いだろうなと想像しています。</p><p>※当社ではIT人材をコンサルタント＋エンジニア≒アーキテクトと呼称しますが、本稿では便宜上エンジニアと表記します。</p><h3 id="エンジニアの住む世界"><a href="#エンジニアの住む世界" class="headerlink" title="エンジニアの住む世界"></a>エンジニアの住む世界</h3><p>迫り来る将来の危機が人材不足というエンジニアの量の問題なのかというとそれは湾曲した認識です。エンジニアはソースコードは短ければ短いほど美しいと思う人種で、クラウドネイティブな作品が増えてきてからはこぞってアーキテクチャデザインの美しさを互いに誇りあい、難解で複雑な問題を抽象化して解こうとする、そんなアートの世界にエンジニアは暮らしています。エンジニアをいつまでも「人月の神話」の世界で飼い慣らそうとする発想のままでは問題の本質をミスリードします。エンジニアは量ではなく質で評価されるべきで、質の高いアウトプット価値を人月で評価することは失礼にあたります。この認識を改めなければ誇り高きエンジニアはまず集められないでしょう。</p><p>いかにエンジニアが成長しやすい環境を継続的に改善していき、成長したエンジニアによる成果をどうビジネスに直結させるかを追求できれば、人材不足に対して量で補おうとする負のスパイラルから脱却できるだろうと思います。</p><h3 id="サステナブルな組織デザイン"><a href="#サステナブルな組織デザイン" class="headerlink" title="サステナブルな組織デザイン"></a>サステナブルな組織デザイン</h3><p>私はここ十年ぐらい大中小の様々なエンジニア組織をリードしてきました。幾度もエンジニア組織の統廃合を繰り返しながら試行錯誤してきましたが、組織を持続的に成長させることの難しさは身をもって知っているつもりです。未だ正解と言えるような組織デザインは見つかっておらず今もなお試行錯誤中なのが正直なところです。</p><p>そんな中で今までの統廃合の歴史を振り返ると、組織は8名→30名→80名→200名超と年々大きくなっていき、その過程の中で進化してきた組織デザインはマーケット変化やあらゆる危機感に都度対応してきた進化論（結果論？）だったように思えてなりません。</p><p>失敗や成功体験の中にエンジニアに特化した組織デザインのヒントがあると信じてサステナブルな組織デザインについて2部構成でまとめてみました。</p><ul><li>前編：サステナブルなエンジニア組織デザイン～よくある設計とジレンマ～</li><li>後編：<a href="/articles/20190918/">サステナブルなエンジニア組織デザイン～デザインパターンと10のリファクタリング～</a></li></ul><p>前編ではエンジニア組織でよく遭遇するジレンマについて紹介します。</p><h1 id="対象者"><a href="#対象者" class="headerlink" title="対象者"></a>対象者</h1><p>エンジニアに敬意を払える正しい認識を持ってることを前提として以下のような方々を対象としています。</p><ul><li>スタートアップなどでエンジニア組織をこれから作っていこうとされている方</li><li>エンジニア組織駆動でビジネスをスケールさせていこうと思っている方</li><li>他、エンジニア組織に対して様々な課題認識を持っていられる方<ul><li>エンジニアの獲得がうまくいかずに組織が大きくならない</li><li>エンジニアがどんどん離れていってしまっている</li><li>エンジニアのモチベーションがアップするような仕事環境を与えられていない</li><li>エンジニアが好き勝手やるので収益に結びつかない</li><li>エンジニアのキャリア形成がうまくいっていない</li><li>エンジニアのレジェンド達が新しいチャレンジを許さない</li><li>エンジニアとは名ばかりでベンダーコントロールするだけの組織になっている</li></ul></li></ul><h1 id="散見されるエンジニア組織の現状"><a href="#散見されるエンジニア組織の現状" class="headerlink" title="散見されるエンジニア組織の現状"></a>散見されるエンジニア組織の現状</h1><p>ビジネスモデルや技術革新スピードが激変する今、業種業態を問わず企業は異次元のスピードで変化対応力が求められています。ITを「誰かに作ってもらうもの（外製）」から「自ら作るもの（内製）」へと経営の舵を切り、IT組織を強化しようとするのは必然の流れです。空前の内製化ブームの是非はおいといてもこのウェーブに乗るっきゃないと思った企業は非常に多いです。</p><p>多くのクライアントからなかなか思い通りにいかないといった種の相談を受ける機会がここ数年来で増えてきました。「エンジニアを集められない」、仮に集められても「エンジニア組織が機能していない」という話が大半です。それをエンジニアの意識の問題やHRマーケティングの問題にすり替えながら、組織名に「イノベーション」、「デジタル」、「DX」、「ラボ」などの流行り言葉を並べてどうにかエンジニアの関心を惹けるよう組織の名称から試行錯誤されている企業も多いなと思います。</p><p>当の私が執行責任をもっている組織名も「Technology Innovation Group」と名付けているので同じ試行錯誤をした輩です。エンジニア組織をどうビルディングしていくかは非常に普遍的な課題だなと思います。</p><h1 id="エンジニア組織のジレンマ"><a href="#エンジニア組織のジレンマ" class="headerlink" title="エンジニア組織のジレンマ"></a>エンジニア組織のジレンマ</h1><p>エンジニア組織をビルディングをするにはエンジニアの持つ価値観の性質をしっかりと理解しなければなりません。そしてエンジニア組織が成熟していく過程ではエンジニアの性質起因で繰り広げられる様々なジレンマが存在します。代表的なジレンマをいくつか紹介します。</p><h3 id="1-オープンな活動-vs-クローズドな活動"><a href="#1-オープンな活動-vs-クローズドな活動" class="headerlink" title="1) オープンな活動 vs クローズドな活動"></a>1) オープンな活動 vs クローズドな活動</h3><p>「技術ノウハウをオープンにして外部のコミュニティとの接点を多くするか、企業の競争戦略上クローズドに内部に留めようとするか」</p><p>このジレンマで踏み止まってる企業は多く、歴史の長い組織であればあるほどその傾向は強いなと感じます。このジレンマにはエンジニアのモチベーションとノウハウ流出リスクとのトレードオフがあります。エンジニアは総じてOSS活動や勉強会などが大好きな性質をもっています。これを利用するとオープンなコミュニティで様々な出会いがあるのでHRマーケティングが大いに期待ができます。一方でノウハウ流出にはエンジニア自身のヒトも含まれます。外部の接点が増える分だけ他企業に目移りしてしまう確率を上げてしまうことは避けられない事実です。</p><p>エンジニアのモチベーションはポジティブなパワーを生むのでカルチャー形成には有効です。流出リスクを理解しつつもオープンな活動に振り切って、エンジニアの集まるカルチャー形成をすることが先決です。エンジニアが好むカルチャーさえあれば、焦らずとも自然とエンジニアは集まってきます。</p><p>人が集まってきたら次はエンジニアを組織化するフェーズに移行した時のジレンマです。</p><h3 id="2-競争型の運営-vs-協調型の運営"><a href="#2-競争型の運営-vs-協調型の運営" class="headerlink" title="2) 競争型の運営 vs 協調型の運営"></a>2) 競争型の運営 vs 協調型の運営</h3><p>「個人やチームに対して技術や成果責任を競わせる形で運営するか、協調性を重視して明確な責任を持たせないで運営するか」</p><p>これにはプロジェクト（当社ではプロジェクト制のため関連する一連の仕事をプロジェクトと以降も表記します）に対するオーナーシップと技術ノウハウの蓄積との間にトレードオフがあります。互いに競争することで担当領域に対するオーナーシップは強固になりますが、逆に領域に固執しすぎてしまうとエンジニア間に壁が生まれ、ノウハウが分断されて技術力は相対的に停滞しがちです。一方で協調性を重視すると技術ノウハウ共有が進み技術力は相乗的に向上しやすくなりますが、緊張関係のない過度な協調は他力に頼りやすくなり、組織が大きくなるにつれてプロジェクトのオーナーシップが欠如する事態も起こりえるでしょう。</p><p>ここでもトレードオフを顧みながら競争と協調のバランスをとって使い分けることが重要です。オーナーシップの欠如が垣間みえるようになると、組織はそれ以上大きくできない黄色信号だと捉えるとよいかと思います。仮に大きくできても機能しない組織になるだけです。エンジニア組織に技術や成果に対して適度な競争原理を導入することは組織成長のスパイスになりえます。</p><p>エンジニア組織が大きくなると、ビジネスとしての成果を求められるようになるのは必然な流れかと思います。次は組織成果の最大化させるフェーズに移行した時のジレンマです。</p><h3 id="3-ヒエラルキー-vs-ホラクラシー"><a href="#3-ヒエラルキー-vs-ホラクラシー" class="headerlink" title="3) ヒエラルキー vs ホラクラシー"></a>3) ヒエラルキー vs ホラクラシー</h3><p>「マネージャーが管理するヒエラルキーか、管理者不在のホラクラシーとするか」</p><p>エンジニアは管理されることが基本的に嫌いという性質をもっています。マネージャーはエンジニアの成果を時間やアウトプット量をメジャーにしがちなのでエンジニアの価値観にギャップが生じます。とはいえ、マネージャーがいると成果にコミットしやすくなるのも事実です。一方で成果に対する極度なコミットメントは失敗を恐れるあまり保守的になりやすく、積極的な技術チャレンジが減少し、結果的に技術的負債を生みやすくなります。一方で管理者不在のホラクラシーに移行するとエンジニアの自立を促すことができ、技術的なチャレンジが活性化され、プロのエンジニアとして大きくブレークスルーする可能性も飛躍的に高くなります。ただし、エンジニアにゴールや価値観が共有できていないと組織は機能せずに、エンジニアの活動が趣味の世界に入りやすく自己満足に陥りやすい傾向もあります。</p><p>ここでもトレードオフを顧みながら使い分けることでビジネスの成果が最大化され、エンジニアやそのチームにプロ意識が芽生えてきます。エンジニアのプロ意識は暫くすると自主経営へと進化し、ヒト・モノ・カネ・ノウハウといった組織のリソースに対する権限委譲を要求してくるでしょう。次は持続可能な自主経営フェーズに移行した時のジレンマです。</p><h3 id="4-権限委譲-vs-アカウンタビリティ"><a href="#4-権限委譲-vs-アカウンタビリティ" class="headerlink" title="4) 権限委譲 vs アカウンタビリティ"></a>4) 権限委譲 vs アカウンタビリティ</h3><p>「個人やチームにあらゆる権限を委譲するか、その代わりにアカウンタビリティをどう果たすか」</p><p>権限委譲によりエンジニアによる自主経営が進み、短期的な収益を気にするようなP/L思考から技術投資などのB/S思考へと意識が変わり、結果的に中長期的な活動が増えることでサステナブルな組織へのグレードアップが期待できます。権限委譲を推し進めることは経営に対するアカウンタビリティを果たすことも同時に要求されることにもなります。エンジニアの投資的な活動のほとんどはテクノロジートレンドなどに即した知的好奇心から始まることが常です。それ自体はイノベーションの原動力にもなりうるので否定すべきものではありません。ただし、知的好奇心だけでは総じてエモーショナルな動機ばかりが周囲の目に映りやすく、透明性が損なわれた活動には組織内外からの応援者が得られずに、その活動範囲は狭くなりがちです。自由（権限委譲）には責任がつきものですので個人レベルまでその意識を徹底、および維持し続ける覚悟が必要になります。</p><h1 id="エンジニア組織の資本は人と技術"><a href="#エンジニア組織の資本は人と技術" class="headerlink" title="エンジニア組織の資本は人と技術"></a>エンジニア組織の資本は人と技術</h1><p>いずれのジレンマもゼロかイチの選択ではなく、その時その瞬間にどこに軸足をおいてバランスをとるかが重要です。組織デザインにはバランス能力が問われています。エンジニア組織の資本は人と技術。組織デザインの落とし穴は至るところにあり、バランス感覚を失うと人は疲弊して技術は陳腐化します。エンジニア組織の資本が擦り減っていく負のサイクルに陥いれば組織は急激に傷んでいきます。</p><img src="/images/20190917/photo_201909017_01.png" style="border:solid 1px #000000"><p>逆に言えば各種ジレンマを突破すれば、エンジニア組織の資本力が強化されサステナブルな組織に向けて組織は大きく飛躍する可能性を秘めています。</p><p>可能性を開花させるには組織デザインが重要な役割を果たします。</p><h3 id="エンジニア組織デザインの救世主？"><a href="#エンジニア組織デザインの救世主？" class="headerlink" title="エンジニア組織デザインの救世主？"></a>エンジニア組織デザインの救世主？</h3><p>2018年に救世主のような組織デザインとしてティール組織がフィーチャーされました。ティールは以下の書籍で非常に有名になり、旧来型組織から一線を画した大変興味深い組織論です。これがエンジニア組織を救う手立てになりうるかが気になるポイントかと思います。</p><img src="/images/20190917/photo_201909017_02.jpeg" class="img-middle-size"><p>『<a href="https://www.amazon.co.jp/dp/B078YJV9ZW/" target="_blank" rel="noopener">ティール組織――マネジメントの常識を覆す次世代型組織の出現</a>』　フレデリック・ラルー(著)</p><p>今では解説サイトが世にたくさんあるので詳しい説明はそちらにお任せして割愛しますが、ティール組織が評価される一方で現在エンジニア組織の課題に直面している方々にとっては少しピンとこなかったという話もよく聞きます。マインドフルネスとかホールネスなどといったスピリチュアルの言葉が多く、頭では共感できていても行動に移すには遠い印象があるのではないかと思います。その印象の深淵にはエンジニア特有のリアリティが欠けているからであると理解しています。エンジニアの中にある根源的な欲求に応えずにティール組織を目指すことには全く意味を成しません。</p><h3 id="エンジニア組織には感情がある"><a href="#エンジニア組織には感情がある" class="headerlink" title="エンジニア組織には感情がある"></a>エンジニア組織には感情がある</h3><p>エンジニアは技術に対して「損得」でなく「善悪」で動きます。つまりエンジニア組織には純粋な感情が存在しています。組織にある感情を読み解いてバランスを取りながらエンジニア組織のジレンマを乗り越えるためにはどうやったとしても時間が必要になります。ティール組織を鵜呑みにして大上段から形から入ってもいいことはないので、目の前にいるエンジニアたちの間で今まさに起きている事象に対して目を向けることの方が先決です。組織の成長に近道はないので今を知った上で適切に組織デザインをリファクタリングしていくことが大切です。</p><p>後編ではエンジニア組織デザインのリファクタリングのプラクティスを紹介します。</p><ul><li>前編：サステナブルなエンジニア組織デザイン～よくある設計とジレンマ～</li><li>後編：<a href="/articles/20190918/">サステナブルなエンジニア組織デザイン～デザインパターンと10のリファクタリング～</a></li></ul><h1 id="前編まとめ"><a href="#前編まとめ" class="headerlink" title="前編まとめ"></a>前編まとめ</h1><p>エンジニア組織の現状とその中にあるジレンマを紹介しました。</p><h3 id="エンジニア組織デザインのヒント"><a href="#エンジニア組織デザインのヒント" class="headerlink" title="エンジニア組織デザインのヒント"></a>エンジニア組織デザインのヒント</h3><ul><li>エンジニアをリスペクトする</li><li>エンジニアが成長しやすい環境を継続的に維持改善する</li><li>オープンな活動を通してカルチャーを作る</li><li>競争型・協調型のバランスでエンジニアの自立化を促す</li><li>深いヒエラルキーを排除したフラットな組織が成果を最大化する</li><li>エンジニアの慢性的な疲弊と技術的負債が最大の敵と認識する</li><li>権限委譲とアカウンタビリティの両立が中長期的な視点を養う</li><li>エンジニア組織に生まれる感情をコントロールしながら組織を運営する</li></ul><h3 id="リーダーがやってはいけないことリスト"><a href="#リーダーがやってはいけないことリスト" class="headerlink" title="リーダーがやってはいけないことリスト"></a>リーダーがやってはいけないことリスト</h3><ul><li>無理な組織合理化の追求</li><li>外部コミュニティとの遮断</li><li>現状維持バイアスの許容</li><li>マイクロマネジメント</li><li>レジェンド価値観の強要</li><li>選択肢なき自由の許容</li><li>360°評価の形骸化</li><li>オーナーシップの義務化</li></ul><h3 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h3><p>本稿のテーマに直接的に関連はしませんが個人的に組織デザインに影響を受けた書籍を紹介します。</p><p>2005年に刊行された「社員をサーフィンに行かせよう」から時を経て2012年出版の書籍でパタゴニアのサステナビリティについての書籍です。体系的に整理されているわけではないですが、組織デザインの様々なヒントを与えてくれます。社員のカルチャー形成、価値観の共有、思い立った時の行動力、ブランディング。</p><p>短期的ではなく長期的な視点でサステナブルなカンパニーを追求しつつ、存在意義そのものがカルチャーになっています。それでいて繊細な部分もしっかりとリファクタリングしているカンパニーだなと思います。「社員がパタゴニアの服を着ることが環境問題に直結する」という感覚があるカンパニーで、エンジニアの書くコードにも同様な正義が求められると素晴らしいのではないかと考えさせられました。</p><p>何かの参考になれば。<br><img src="/images/20190917/photo_201909017_03.jpeg" class="img-middle-size"><br>『<a href="https://www.amazon.co.jp/dp/B00P76TVKW/" target="_blank" rel="noopener">レスポンシブル・カンパニー</a>』　イヴォン・シュイナード(著)</p><hr><p>Yosuke Miyahara<br>Vice President/Technology Innovation Group/Future Corporation.<br><a href="https://newspicks.com/user/147180" target="_blank" rel="noopener">https://newspicks.com/user/147180</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;ここ数年来で人材マーケットにおけるIT人材の需要が高まり人材獲得合戦が過熱しています。経済産業省が2018年に公開したレポー
      
    
    </summary>
    
      <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
      <category term="組織論" scheme="https://future-architect.github.io/tags/%E7%B5%84%E7%B9%94%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud Kubernetes Day セッションレポート</title>
    <link href="https://future-architect.github.io/articles/20190910/"/>
    <id>https://future-architect.github.io/articles/20190910/</id>
    <published>2019-09-10T00:13:03.000Z</published>
    <updated>2019-09-10T01:48:41.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG(Technology Innovation Group)/DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の村田と申します！</p><p>私は現在<a href="https://stackshare.io/future-corporation/futureiot" target="_blank" rel="noopener">Future IoT</a>プロジェクトに携わっており、最近はクラウドインフラ設計構築に従事しています。</p><p>其の中で、Kubernetesは特に重要なプロダクトであると捉えているため、業務の合間を縫ってGoogle Cloud Kubernetes Dayに参加してきました。</p><h1 id="Google-Cloud-Kubernetes-Dayは"><a href="#Google-Cloud-Kubernetes-Dayは" class="headerlink" title="Google Cloud Kubernetes Dayは"></a>Google Cloud Kubernetes Dayは</h1><p>「コンテナを使った最新の開発アプローチを学ぶ」というスローガンで開催されているイベントです。第1回目は2019年3月に、9月3日に今回の第2回目が開催されました。</p><p><a href="https://inthecloud.withgoogle.com/kubernetes-day-1909/register.html" target="_blank" rel="noopener">https://inthecloud.withgoogle.com/kubernetes-day-1909/register.html</a></p><h1 id="セッションレポート"><a href="#セッションレポート" class="headerlink" title="セッションレポート"></a>セッションレポート</h1><p>以下の2セッションに参加しました。それぞれについて簡単に紹介していきます。</p><ol><li>失敗しないアプリケーションモダナイゼーションの考え方</li><li>Anthosで実現するモダンなアプリケーション管理プラットフォーム</li></ol><h2 id="１．失敗しないアプリケーションモダナイゼーションの考え方"><a href="#１．失敗しないアプリケーションモダナイゼーションの考え方" class="headerlink" title="１．失敗しないアプリケーションモダナイゼーションの考え方"></a>１．失敗しないアプリケーションモダナイゼーションの考え方</h2><p>FUJIFILMさんとFreakOutさんの事例をベースに、アプリケーションのモダナイゼーションおよびDevOpsについてのセッションでした。</p><h3 id="モダナイゼーションとは"><a href="#モダナイゼーションとは" class="headerlink" title="モダナイゼーションとは"></a>モダナイゼーションとは</h3><ul><li>100人100通りの答えが返ってくるテーマである</li><li>大事な要素に以下4点がある<ol><li>Twelve factor app</li><li>マイクロサービス</li><li>クラウドネイティブ</li><li>クラウドの利用</li></ol></li></ul><h3 id="パネルディスカッションパート"><a href="#パネルディスカッションパート" class="headerlink" title="パネルディスカッションパート"></a>パネルディスカッションパート</h3><h4 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h4><ul><li>モハマド氏（<a href="https://pg-ja.fujifilm.com/home" target="_blank" rel="noopener">FUJIFILM Prints &amp; Gifts</a>担当の方）</li><li>西口氏（<a href="https://www.fout.co.jp/" target="_blank" rel="noopener">FreakOut</a>の方）</li></ul><h4 id="各々のPJ概要について"><a href="#各々のPJ概要について" class="headerlink" title="各々のPJ概要について"></a>各々のPJ概要について</h4><ul><li>FUJIFILM Prints &amp; Giftsのバックエンドシステムである<a href="https://cloud.google.com/blog/ja/topics/customers/gcp-google-kubernetes-engine-fujifilm" target="_blank" rel="noopener">オーダー管理システム</a>（以下、OMS）のモダナイゼーションについて<ul><li>スケーラビリティに課題があったので、モダナイゼーションによるレガシーシステムのリプレイスへと踏み切った</li><li>その手段が「マイクロサービス化」であった</li></ul></li><li>FreakOutの開発した広告プラットフォームである<a href="https://www.fout.co.jp/freakout/product/rfp/" target="_blank" rel="noopener">Red for Publishers</a>のアーキテクチャ<ul><li>GKEを利用した広告の仕組みを構築している</li></ul></li></ul><h4 id="アーキテクチャ選定の考え方について"><a href="#アーキテクチャ選定の考え方について" class="headerlink" title="アーキテクチャ選定の考え方について"></a>アーキテクチャ選定の考え方について</h4><ul><li>広告はスピードが大事なので、そこを重視してアーキテクチャ選定を行った(西口氏)</li><li>サーバレスは1stチョイスでもよいが、システムが複雑になってきて相互に協調し合う場合にはインフラ側に介入できる方がよいと考えGKEを選択(西口氏)</li></ul><h4 id="チーム編成について"><a href="#チーム編成について" class="headerlink" title="チーム編成について"></a>チーム編成について</h4><ul><li>OMSにおける組織・開発<ul><li>周り、特に経営層の理解を得ることが重要だった</li><li>知識や実績が無かったので、失敗リスクを最小化するために、技術学習のみならず説明行脚やスタートをなるべく小さくするなど様々な手段を講じた</li><li>Googleカスタマーサポートの支援がなければ達成はできなかった</li><li>チームが連帯感を持つことが重要であった</li></ul></li><li>Red for Publishersにおける組織・開発<ul><li>Kubernetesのバージョンアップデートなど大規模なインフラ構成変更はSRE(2名)が中心に行っている</li><li>SREチームでは徐々にTerraformを導入している</li><li>ConfigMap修正やテーブルのスキーマ変更など日々の構成変更はDeveloper(11名)も行う</li></ul></li></ul><h3 id="これからモダナイズしている企業に向けて"><a href="#これからモダナイズしている企業に向けて" class="headerlink" title="これからモダナイズしている企業に向けて"></a>これからモダナイズしている企業に向けて</h3><h4 id="モハマド氏"><a href="#モハマド氏" class="headerlink" title="モハマド氏"></a>モハマド氏</h4><ul><li>マイクロサービス・サービスメッシュ・サーバレスなど技術スタックが揃っているため、クラウドを前提にした設計を進めると良い</li><li>人材の適材適所を意識する</li><li>ノウハウ・経験が無い場合にはスモールスタートが良い</li></ul><h4 id="西口氏"><a href="#西口氏" class="headerlink" title="西口氏"></a>西口氏</h4><ul><li>いまはGKEの事例がたくさんあるので参考にしながら設計すると良い</li><li>GKEはとても良いプロダクトなのでぜひ利用すると良い</li></ul><h3 id="DevOps解説パート"><a href="#DevOps解説パート" class="headerlink" title="DevOps解説パート"></a>DevOps解説パート</h3><h4 id="DevOpsの重要性"><a href="#DevOpsの重要性" class="headerlink" title="DevOpsの重要性"></a>DevOpsの重要性</h4><p>DevOpsの考えを現場に持ち込むことで目標達成率が1.53倍になると言われている</p><h4 id="Kubernetes登場による変化"><a href="#Kubernetes登場による変化" class="headerlink" title="Kubernetes登場による変化"></a>Kubernetes登場による変化</h4><p>アプリの変更・インフラの変更・サービスの監視がそれぞれ連続的な依存関係を持つものではなくなった</p><h4 id="DevOpsで発生する問題点"><a href="#DevOpsで発生する問題点" class="headerlink" title="DevOpsで発生する問題点"></a>DevOpsで発生する問題点</h4><ul><li>開発と運用のインセンティブが一致しない</li><li>開発はAgilityを、運用はReliabilityを優先する</li><li>よくある問題としてあげられるのは「合理的でない安定性(Reliability)の定義」</li><li>顧客は99.999999999%を求めているわけではないので、潜在的な安定性を明確に定義することが大事</li><li>安定性の考え方<ul><li>数値の差分を説明できるかどうか、で考える</li><li>なぜそのレベルになるか、を言葉にすることができるか</li></ul></li><li>安定性の計測方法は「Availability = good time / total time」</li></ul><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><ul><li>ソフトウェアがビジネスの中心となり、DevOpsの重要性が増している</li><li>Kubernetesの登場により、技術的にDevOpsの実現が容易になった</li><li>Opsには安定性(Reliability)が求められ、役割は以前にも増して重要になってくる</li></ul><h3 id="セッションの感想"><a href="#セッションの感想" class="headerlink" title="セッションの感想"></a>セッションの感想</h3><p>第1回でも話を聞いた2つの企業の方の後日談ということで、非常に興味深くて面白かったです！本TechBlogにも<a href="(https://future-architect.github.io/articles/20190729/)">記事</a>があがってますが、SRE本の輪読会が社内で開催され筆者も参加していたので、安定性の話などはとても理解しやすく、良い復習となりました。</p><h2 id="２．Anthosで実現するモダンなアプリケーション管理プラットフォーム"><a href="#２．Anthosで実現するモダンなアプリケーション管理プラットフォーム" class="headerlink" title="２．Anthosで実現するモダンなアプリケーション管理プラットフォーム"></a>２．Anthosで実現するモダンなアプリケーション管理プラットフォーム</h2><p>先日のGoogle Cloud NextでもAnthosの話を聞かせてくださったSAの長谷部さんと、ハイブリッドクラウドスペシャリストの篠原さんによるセッションでした。AnthosおよびGKE On-Premについてデモも含めて詳しく説明してくださりました！！</p><h3 id="「2025年の崖」"><a href="#「2025年の崖」" class="headerlink" title="「2025年の崖」"></a>「2025年の崖」</h3><p>経産省が出したDXレポートにて言及されている単語で、2025年までにDXの種をまいておかないとDXの実現が困難になると言われている。DXの実現が達成できない場合、2025年以降日本全体で年12兆円もの損失になるとも試算されている。</p><p>主な理由には下記のようなものが挙げられる。</p><ul><li>IT人材不足</li><li>データの爆発</li><li>技術的負債の増加<ul><li>似たような仕組みの乱立</li><li>過剰なカスタマイズ(日本では特にシステムを業務に合わせることが多い)</li></ul></li></ul><h3 id="これから作るものはどうする？"><a href="#これから作るものはどうする？" class="headerlink" title="これから作るものはどうする？"></a>これから作るものはどうする？</h3><ul><li>Agility（敏捷性）・ Flexibility（柔軟性）・ Maintainability（保守性）の3つを満たすことが大事</li><li>新しい考え方を取り入れ、モダンなアプリケーション開発へ</li></ul><h4 id="コンテナ基盤におけるデファクトスタンダード-Kubernetes"><a href="#コンテナ基盤におけるデファクトスタンダード-Kubernetes" class="headerlink" title="コンテナ基盤におけるデファクトスタンダード = Kubernetes"></a>コンテナ基盤におけるデファクトスタンダード = Kubernetes</h4><ul><li>今や国内コンテナ導入企業の65.3%が利用するコンテナオーケストレーションツール(IDCの調査による)</li><li>Kubernetesを本格導入する時にぶつかる問題<ol><li>【問題】どこで動かすのか？</li><li>【問題】運用が大変</li><li>【問題】複数環境でのKubernetesはどう扱うのか？</li><li>【問題】足りない機能はどう補うのか？</li></ol></li><li>1〜4の課題を自社のエンジニアリングで突破する、というのももちろんありだが、すべての会社がこの策をとるのは困難である</li><li>Anthos + GCPがKubernetesをProduct Readyへ！<ol><li>【答え】ハイブリッド+マルチクラウド</li><li>【答え】GKE</li><li>【答え】マネージドの管理機能で複数環境の一元管理</li><li>【答え】GCPの各種サービス</li></ol></li></ul><h3 id="Anthos-Deep-Dive"><a href="#Anthos-Deep-Dive" class="headerlink" title="Anthos Deep Dive"></a>Anthos Deep Dive</h3><h4 id="オンプレミス側の構成について"><a href="#オンプレミス側の構成について" class="headerlink" title="オンプレミス側の構成について"></a>オンプレミス側の構成について</h4><ul><li>DC(データセンター)のVMWare上でKubernetesが稼働する</li><li>GCPのコンテナエコシステムとの連携が可能</li><li>GKE On-Prem論理構成<ul><li>AdminのKubernetesが他のKubernetesを管理する構成</li><li>Admin Clusterの下に50のUser clusterをぶら下げることができる</li><li>Admin Clusterに対しては、<code>kubectl</code>コマンド以外にも<code>gkectl</code>というAdmin Cluster配下を管理するコマンドを実行可能</li></ul></li></ul><h4 id="クラスター管理"><a href="#クラスター管理" class="headerlink" title="クラスター管理"></a>クラスター管理</h4><ul><li>管理コンソールで一元管理が可能</li><li>DC側のGKE connect agentからGCPへの通信があるのみで、GCP側からポーリング等で状態をチェックするような通信はない</li><li>GKE On-PremではL7のLBはIstioにて制御しており、L7のIngressはL4のLBを経由する形で実現される</li><li>すでにMarket PlaceにはGKE On-Prem対応のものがいくつか存在しており、GCPコンソールからデプロイを行うとオンプレ側のGKEクラスタへアプリケーションがデプロイされる</li></ul><h4 id="ポリシー管理"><a href="#ポリシー管理" class="headerlink" title="ポリシー管理"></a>ポリシー管理</h4><ul><li>namespaceやresource quotaを各クラスタごとに別々に管理していると大変なので<a href="https://cloud.google.com/anthos-config-management" target="_blank" rel="noopener">ACM(Anthos Config Management)</a>を使う</li><li><a href="https://www.weave.works/technologies/gitops/" target="_blank" rel="noopener">GitOps</a>に準拠しており、予め指定したrepositoryからconfigの差分を検知し取得、自動的にクラスタへ適用してくれる</li></ul><h4 id="サービス管理"><a href="#サービス管理" class="headerlink" title="サービス管理"></a>サービス管理</h4><ul><li><a href="https://cloud.google.com/service-mesh/?hl=ja" target="_blank" rel="noopener">Google Cloud Service Mesh</a> (alpha) <ul><li>端的に言ってしまえばマネージドIstioのこと</li></ul></li><li>アーキテクチャ構成についての説明<ul><li><a href="https://istio.io/docs/concepts/what-is-istio/" target="_blank" rel="noopener">Istio公式</a>のアーキテクチャ図とほぼ同じだが、<code>Managed CA</code>(元のIstioで言うところのCitadel)だったりControl Planeのサービス群がしっかりとマネージドであることが謳われている</li></ul></li></ul><h3 id="セッションの感想-1"><a href="#セッションの感想-1" class="headerlink" title="セッションの感想"></a>セッションの感想</h3><p>まさかGKE On-Premのデモを見られるとは思ってなかったのでとても興奮しました！オンプレ側の通信詳細については筆者のネットワーク知識不足によりついていけない場面もありましたが、今後Anthos、GKE On-Premに関わっていくあたりあたり自身の課題が浮き彫りになったのでとても良い機会となりました。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回は2セッションの参加のみでしたが、非常に有意義に過ごすことができました！特にAnthos、GKE On-Premについては今回はじめて具体的なアーキテクチャやデモを見ることができてとても良かったです。</p><p>Google Cloud Nextで語られていた「ハイブリッドクラウドの実現」に向けて、キープロダクトと定めているKubernetesをオンプレ側で使える準備が着々と整ってきているんだなと感じさせられました。ハイブリッドクラウドのメリットとして「オンプレ側でクラウドサービスの恩恵を最大限に享受する」というのがあると思いますが、今後もKubernetesやその他クラウドネイティブの文脈で登場する様々なプロダクト・サービスについての学びを止めてはいけないなと感じました！</p><p>今回も読んで頂きありがとうございました。良ければシェア・いいねをよろしくお願いします！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">DXユニットとはデジタルトランスフォーメーションに関わる仕事を主に推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG(Technology Innovation Group)/DXユニット&lt;sup id=&quot;fnref:1&quot;
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title> Let&#39;s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</title>
    <link href="https://future-architect.github.io/articles/20190909/"/>
    <id>https://future-architect.github.io/articles/20190909/</id>
    <published>2019-09-09T00:30:42.000Z</published>
    <updated>2019-09-09T00:38:44.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG(Technology Innovation Group)/DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の村田です。</p><p>昨今よく耳にする「クラウド」「サーバレス」といった単語に関連して、各クラウドベンダーからは日々様々なサービスがリリースされていますが、それらを素早くキャッチアップしつつ上手に活用していくというのは少々大変と思う方が多いと思います。</p><p>この記事はそういった方向けに、”素早くサービスの使い所を把握してもらう”ことや”新しいサービスをさっと試す手助けをする”ことを目的にした記事の第一弾です。そのため今までのFutureのTechBlogは業務で得た知見をまとめた記事が多めですが、本記事はもっと気軽にクラウドに慣れ親しんでもらうためのコンテンツを中心に作成していく予定です。</p><h1 id="Cloud-Runとは？"><a href="#Cloud-Runとは？" class="headerlink" title="Cloud Runとは？"></a>Cloud Runとは？</h1><p>Cloud RunはGCPが提供するサービスのひとつで、コンテナベースのサーバレスアプリケーションアーキテクチャを実現してくれます。（注：2019年9月7日時点、Betaです）</p><blockquote><p>Run stateless containers on a fully managed environment or in your own GKE cluster.</p></blockquote><p><a href="https://cloud.google.com/run/" target="_blank" rel="noopener">https://cloud.google.com/run/</a></p><p>上記は公式ページからの引用ですが、Cloud Runは完全なマネージド環境あるいは自前のGKE上にコンテナアプリケーションをデプロイできます。</p><p>既存のAppEngineやCloud Functionのようにコードベースのサーバレスアーキテクチャではなく、コンテナベースのサーバレスアーキテクチャであるという点が、新しく・面白いと感じられますね！これからはコンテナベースもどんどん増えてくるはずですし、コードベースに取り組んでいた方も新たな移行先としてこのCloud Runを検討候補にあげてみてはいかがでしょうか。</p><p>Cloud Runについては先日のGoogle Cloud Nextでもたくさんの話が出ていました。興味ある方はぜひ<a href="https://future-architect.github.io/articles/20190804/">Google Cloud Nextへの参加レポート記事</a>をご覧ください。</p><h1 id="Try-Cloud-Run-with-Cloud-Run-Button"><a href="#Try-Cloud-Run-with-Cloud-Run-Button" class="headerlink" title="Try Cloud Run with Cloud Run Button"></a>Try Cloud Run with Cloud Run Button</h1><p>では本題である「Cloud Run Buttonを使ったコンテナデプロイ」にチャレンジしていきましょう！</p><h2 id="Cloud-Run-Buttonとは？"><a href="#Cloud-Run-Buttonとは？" class="headerlink" title="Cloud Run Buttonとは？"></a>Cloud Run Buttonとは？</h2><blockquote><p>Today, we are introducing the Cloud Run Button, an image and link you can add to the README of your source code repositories to allow others to deploy your application to Google Cloud Platform using Cloud Run.</p></blockquote><p>これは先日8月22日に公開された<a href="https://cloud.google.com/blog/products/serverless/introducing-cloud-run-button-click-to-deploy-your-git-repos-to-google-cloud" target="_blank" rel="noopener">GCPのProduct News</a>からの引用ですが、Cloud Run Buttonというサービスが発表されました。</p><p>私は普段Cloud Runを使っていますが、Google Container Registryにimageをpushして、それをDeployして…って何回もやってるとやはり面倒になってきます。「CI/CDを組む」というのが正攻法だとは思いますが、そこまで手間をかけたくないケースもあると思います。</p><p>Cloud Run Buttonを利用すると、ソースコードリポジトリのREADMEに記載しておくことでボタンひとつでCloud Runへアプリケーションをデプロイすることができます。新しいクラウドサービスをさくっと試したいときの障害のひとつはデプロイ手順を整備することだと思いますが、Cloud Run Buttonは手順をボタン一つに集約できるため、非常に活躍してくれそうです。</p><h2 id="実際にやってみた"><a href="#実際にやってみた" class="headerlink" title="実際にやってみた"></a>実際にやってみた</h2><p><a href="https://github.com/GoogleCloudPlatform/cloud-run-button" target="_blank" rel="noopener">Cloud Run ButtonのGitHubページ</a>にサンプルアプリケーションをデプロイできるCloud Run Buttonが配置されているので早速デプロイを行ってみましょう。</p><img src="/images/20190909/photo_20190909_01.png" style="border:solid 1px #000000"><p>この青いボタンが例のボタンです。</p><p>下記の記述をREADMEに追記してあげるだけでボタンが表示されます。<code>&lt;YOUR_HTTP_GIT_URL&gt;</code>の部分を自分のGitRepository URLに変更するだけです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![Run on Google Cloud](https://storage.googleapis.com/cloudrun/button.svg)](https://console.cloud.google.com/cloudshell/editor?shellonly=true&amp;cloudshell_image=gcr.io/cloudrun/button&amp;cloudshell_git_repo=&lt;YOUR_HTTP_GIT_URL&gt;)</span><br></pre></td></tr></table></figure><p>ちなみに<code>Run on Google Cloud</code>という文字はすでに画像ファイルとして用意されているので、文言等変えたい場合には自分で別途作成して上げる必要があります。</p><p>基本的にはrepositoryのrootディレクトリに存在する<code>Dockerfile</code>を検知して<code>docker build</code>が実行されますが、無い場合には<a href="https://buildpacks.io/" target="_blank" rel="noopener">CNCF Buildpacks</a>が利用されます。</p><p>もしサブディレクトリ内でビルドを実施して欲しい場合には、<code>cloudshell_working_dir=&lt;SUBDIR&gt;</code>のクエリパラメータを追加してあげましょう。</p><p>また、<code>master</code>以外の特定ブランチのアプリケーションをデプロイしたい場合には<code>cloudshell_git_branch=&lt;BRANCH_NAME&gt;</code>を追加してあげると任意のブランチからデプロイすることが可能です。</p><p>他にも<code>app.json</code>を記載することでより詳細なカスタマイズも可能になっているので気になった方は<a href="https://github.com/GoogleCloudPlatform/cloud-run-button#customizing-deployment-parameters" target="_blank" rel="noopener">READMEの”Customizing deployment parameters”パート</a>を参照してみてください！</p><p>さて、ではついにボタンを押してみましょう。</p><img src="/images/20190909/photo_20190909_03.png" style="border:solid 1px #000000"><p>Cloud Shellの起動を確認するダイアログが出てくるので<code>続行</code>を押して次へ…</p><img src="/images/20190909/photo_20190909_04.png" style="border:solid 1px #000000"><p><code>cloudshell_git_repo</code>にて指定されてたrepositoryをcloneして、デプロイ対象のプロジェクトがリストで表示されます。すでにGoogleアカウントにログインしていれば、そのアカウントに紐づくプロジェクトが表示されます。</p><img src="/images/20190909/photo_20190909_05.png" style="border:solid 1px #000000"><p>さてプロジェクト選びが完了すると、次はリージョンの選択です。デフォルトだとカーソルは<code>us-central1</code>に合わさっていますが、ついに東京リージョンでも利用可能になったので、せっかくですし<code>asia-northeast1</code>を選択してみることにしましょう。</p><img src="/images/20190909/photo_20190909_06.png" style="border:solid 1px #000000"><p>コンテナのビルドが始まりました！…ワクワク</p><img src="/images/20190909/photo_20190909_07.png" style="border:solid 1px #000000"><p>ビルドが完了すると自動的にGCRへのイメージのpushも行ってくれます。そしてGCRのイメージをもとにCloud Runのデプロイがスタートします。こういったところを自動でやってくれるのがありがたいですね。</p><img src="/images/20190909/photo_20190909_08.png" style="border:solid 1px #000000"><p>そして待つこと少々…ついにアプリケーションがデプロイされました。早速コンソールからデプロイされたアプリを確認してみましょう。</p><img src="/images/20190909/photo_20190909_09.png" style="border:solid 1px #000000"><p>いました。<code>cloud-run-hello</code>というアプリケーションが無事にデプロイされています！</p><img src="/images/20190909/photo_20190909_10.png" style="border:solid 1px #000000"><p>詳細画面も覗いてみましょう。デプロイされたアプリケーションにアクセスしてみると…</p><img src="/images/20190909/photo_20190909_11.png" style="border:solid 1px #000000"><p>上記のような画面が表示されます。「動いてますよ！」とのことです。ホッとしました。</p><p>というわけでCloud Run Buttonを利用したコンテナデプロイはこれにて完了です。</p><h2 id="やってみての所感"><a href="#やってみての所感" class="headerlink" title="やってみての所感"></a>やってみての所感</h2><p>まず、とても簡単でした！</p><p>ボタンを押すとCloud Shellが立ち上がり、デプロイ先のプロジェクトとリージョンを選択するだけで簡単にデプロイできてしまうのは非常にスムーズでストレスが無いなと感じました。</p><p>ちなみに筆者は、最初試した時clone待ちの時間でEnter連打しすぎてこのプロジェクト選択の場面で一番上のプロジェクトを秒で選択することになってしまいました。正しいデプロイ先を選ぶには落ち着きが大切です（笑）</p><p>軽く前述しましたが、このCloud Run Buttonの良いところは<code>docker build</code> <code>docker push</code> <code>gcloud run deploy</code>などのコマンドをすべて隠蔽化して一気に実行してくれる点にあると思います。「さっと何度もデプロイしたい、でもCI/CD作り込むのはちょっと…」といったシチュエーションにこれ程までに適したソリューションは無いんじゃないかと思うくらいの使い勝手でした。</p><p>そしてもう一点の良さは「READMEに埋め込めること」ではないでしょうか。</p><p>GitHubなどに公開しているアプリケーションを世間のユーザに利用してもらう際には、READMEにデプロイコマンドを記載してユーザ側にその実行を委ねていたかと思います。しかし、Cloud Run Buttonを埋め込んでおくだけで、ユーザ側に求めるのはデプロイ先のプロジェクトとリージョンの選択だけになります。もちろんユーザがGCPプロジェクトを保有していることが前提になりますが、ユーザ側にとっても利用までの敷居がより一層低くなるはずです。</p><p>とても簡単なのでぜひ一度試してみてください。皆さんのコンテナライフがより一層豊かなものになりますように。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>Let’s Try GCPの第一弾、いかがだったでしょうか。定期的な更新を世の中にコミットするためにあえて「#1」という連番をタイトルに含めております。</p><p>読んで頂きありがとうございました！良かったなと思ってくださった方はぜひTwitterやFacebookでのシェアもよろしくお願いします！</p><p>続編もご期待ください！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">DXユニットとはデジタルトランスフォーメーションに関わる仕事を主に推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG(Technology Innovation Group)/DXユニット&lt;sup id=&quot;fnref:1&quot;
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>Terraformのベストなプラクティスってなんだろうか</title>
    <link href="https://future-architect.github.io/articles/20190903/"/>
    <id>https://future-architect.github.io/articles/20190903/</id>
    <published>2019-09-03T06:20:52.000Z</published>
    <updated>2019-09-04T23:49:36.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の木村です。</p><p>入社以降ずっと触ってきたTerraformですが、巷ではWorkspace派だったり、module派だったり、ディレクトリ完全分離派だったり、様々な流派(プラクティス)が乱立しているのを目にします。私自身ベストな構成を模索していく中で辿り着いた結論は、ケースバイケースで全てのデザインパターンに対応できる万能なものは存在しないのかな (当たり障りないですね..)ということです。</p><p>そんなわけで、様々なTerraformの流派を紹介し、各流派がどのようなパターンに向いているのか(はたまた不向きなのか)の個人的見解をまとめてみました。</p><p>※本記事中のサンプルコードはすべて Terraform <code>0.12</code>、 provider <code>google cloud</code> で解説してます</p><h1 id="Terraformとは？"><a href="#Terraformとは？" class="headerlink" title="Terraformとは？"></a>Terraformとは？</h1><p>当社過去記事に解説があります。Terraformの概要や、0.12におけるシンタックス変更点や便利機能が詳細に記載されていますので、ぜひ併せてご覧ください。</p><ul><li><a href="https://future-architect.github.io/articles/20190816/">はじめてのTerraform 0.12 ～環境構築～</a></li><li><a href="https://future-architect.github.io/articles/20190819/">はじめてのTerraform 0.12 ～実践編～</a></li></ul><h1 id="環境をどのように分けるか"><a href="#環境をどのように分けるか" class="headerlink" title="環境をどのように分けるか"></a>環境をどのように分けるか</h1><p>開発環境、検証環境、本番環境といった環境間の構成やパラメータ差異をどのように扱うのがベストなのでしょうか。</p><p>以下の順番で各流派について説明していきます。</p><ol><li>Workspace</li><li>Module</li><li>ディレクトリ分離</li></ol><h2 id="1-Workspace派"><a href="#1-Workspace派" class="headerlink" title="1. Workspace派"></a>1. Workspace派</h2><p>Terraform ver 0.10 から導入された機能で、同一Terraformソースに対して、Workspaceを切り替えることで環境が切替可能となります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace select &#123;workspace名&#125;</span><br></pre></td></tr></table></figure><h3 id="メリット"><a href="#メリット" class="headerlink" title="メリット"></a>メリット</h3><ul><li>workspace名を変数のkey名に設定することで、環境依存の変数のみ切り出せるので可読性が高くなります。</li><li>また、環境間でソースを共用するという性質上、特定環境のみへの設定抜け・漏れが発生しにくいです。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 変数定義側</span></span><br><span class="line">locals &#123;</span><br><span class="line">  instance_web = &#123;</span><br><span class="line">    production = &#123;</span><br><span class="line">      machine_type   = <span class="string">"n1-standard-4"</span></span><br><span class="line">      bootdisk_size  = 500</span><br><span class="line">    &#125;</span><br><span class="line">    staging = &#123;</span><br><span class="line">      machine_type   = <span class="string">"n1-standard-2"</span></span><br><span class="line">      bootdisk_size  = 100</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 変数呼び出し側</span></span><br><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"web"</span> &#123;</span><br><span class="line">  name         = <span class="string">"web-server"</span></span><br><span class="line">  machine_type = local.instance_web[terraform.workspace][machine_type]</span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    <span class="built_in">source</span>     = google_compute_disk.web.self_link</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_disk"</span> <span class="string">"web"</span> &#123;</span><br><span class="line">  name  = <span class="string">"web-server"</span></span><br><span class="line">  size  = local.instance_web[terraform.workspace][bootdisk_size]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="デメリット"><a href="#デメリット" class="headerlink" title="デメリット"></a>デメリット</h3><ul><li>環境間で構成差異が大きい場合は、差分を吸収するためのロジックを組み込む必要があり、かえって可読性が悪くなりメンテが大変になることがあります</li></ul><p>以下の例は、本番環境のみに存在するリソースと検証環境のみに存在するリソースをcountを使って制御しています。見通しが悪いですね。</p><figure class="highlight bash"><figcaption><span>環境間で構成の差異が大きい場合の例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  instance_web = &#123;</span><br><span class="line">    production = &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    staging = &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  instance_ap = &#123;</span><br><span class="line">    production = &#123;</span><br><span class="line">      count          = 1</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    staging = &#123;</span><br><span class="line">      count          = 0</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  instance_proxy = &#123;</span><br><span class="line">    production = &#123;</span><br><span class="line">      count          = 0</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    staging = &#123;</span><br><span class="line">      count          = 1</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"web"</span> &#123;</span><br><span class="line">  name         = <span class="string">"web-server"</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"ap"</span> &#123;</span><br><span class="line">  count        = local.instance_ap[terraform.workspace][count]</span><br><span class="line">//count        = <span class="string">"<span class="variable">$&#123;terraform.workspace == "production" ? 1 : 0&#125;</span>"</span> <span class="comment"># こういう書き方もあるけどいずれにしろ可読性悪い</span></span><br><span class="line">  name         = <span class="string">"ap-server"</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"proxy"</span> &#123;</span><br><span class="line">  count        = local.instance_proxy[terraform.workspace][count]</span><br><span class="line">  name         = <span class="string">"proxy-server"</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="こんなケースにおすすめ"><a href="#こんなケースにおすすめ" class="headerlink" title="こんなケースにおすすめ"></a>こんなケースにおすすめ</h3><ul><li>環境間で構成差異が少ない場合は、Workspaceの利用がおすすめです。</li><li>また、リリースフローとして 本番と同等の環境での事前検証-&gt; リリース判定 -&gt; 本番環境構築 といった流れが義務付けられている場合は、 Workspaceを切り替えるだけなので、本番環境適用時のデグレ発生のリスクは減らせそうで精神衛生上良さそうです。</li></ul><h2 id="2-Module派"><a href="#2-Module派" class="headerlink" title="2. Module派"></a>2. Module派</h2><p>module自体は、複数リソースから構成されるサービス(たとえばLB)や特定リソースをテンプレ化する機能です。 <code>module</code>ディレクトリ内でテンプレ化するリソースを定義し、Moduleを呼び出す側( <code>production</code>, <code>staging</code> 等)で環境差異を制御できます。</p><figure class="highlight plain"><figcaption><span>モジュール利用時のディレクトリ構成例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── module</span><br><span class="line">│   ├── gce</span><br><span class="line">│   │   ├── main.tf</span><br><span class="line">│   │   ├── output.tf</span><br><span class="line">│   │   └── variables.tf</span><br><span class="line">│   └── iam</span><br><span class="line">│   └── ...</span><br><span class="line">├── production</span><br><span class="line">│   ├── main.tf</span><br><span class="line">│   └── variable.tf</span><br><span class="line">└── staging</span><br><span class="line">    ├── main.tf</span><br><span class="line">    └── variable.tf</span><br></pre></td></tr></table></figure><h3 id="メリット-1"><a href="#メリット-1" class="headerlink" title="メリット"></a>メリット</h3><ul><li>複数resourceから構成されるサービス(LB等)をテンプレ化することでmodule利用側のソースは簡潔になります</li></ul><p>以下の例はGCEをmodule化した例です。instance、internal ip、diskといった個別リソースをひとつのmoduleとして定義することで、モジュール呼び出し側は、リソース間の依存関係やパラメータ以外の固定値を意識しなくてよいのは嬉しいですね。</p><figure class="highlight bash"><figcaption><span>module/gce/main.tf(モジュール定義側)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_address"</span> <span class="string">"template"</span> &#123;</span><br><span class="line">  name = <span class="string">"<span class="variable">$&#123;var.name&#125;</span>-internal"</span></span><br><span class="line"></span><br><span class="line">  address_type = <span class="string">"INTERNAL"</span></span><br><span class="line">  address      = <span class="string">"var.internal_ip"</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"template"</span> &#123;</span><br><span class="line">  name         = <span class="string">"<span class="variable">$&#123;var.name&#125;</span>"</span></span><br><span class="line">  machine_type = var.machine_type</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    <span class="built_in">source</span>     = google_compute_disk.template.self_link</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    network_ip    = google_compute_address.template.address</span><br><span class="line">    access_config = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_disk"</span> <span class="string">"template"</span> &#123;</span><br><span class="line">  name  = <span class="string">"<span class="variable">$&#123;var.name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">type</span>  = <span class="string">"pd-ssd"</span></span><br><span class="line">  size  = var.bootdisk_size</span><br><span class="line">  image = centos-cloud/centos-7<span class="string">"</span></span><br><span class="line"><span class="string">  ...  </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>production/main.tf(モジュール呼び出し側)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module <span class="string">"gce_web"</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">"../module/gce"</span></span><br><span class="line">  </span><br><span class="line">  name         = <span class="string">"web"</span></span><br><span class="line">  internal_ip  = <span class="string">"10.xx.xx.xx"</span></span><br><span class="line">  machine_type = <span class="string">"n1-standard-4"</span></span><br><span class="line">  boot_disk    = <span class="string">"500"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、 <a href="https://registry.terraform.io/" target="_blank" rel="noopener">Terraform Module Registry</a>でHashiCorp社公認のmoduleが公開されており、これらを使うことができます。</p><h3 id="デメリット-1"><a href="#デメリット-1" class="headerlink" title="デメリット"></a>デメリット</h3><ul><li>moduleを定義する際に、どこまでmoduleを汎化(変数化)させるかを決めるのが難しいです。moduleへの変更は、 そのmoduleを利用するすべての呼び出し元へ影響を与えます。安易にmoudle内に固定値を設定しておくと、後ほどその値がパラメータ(変数)となった際の手当てが大変です。とはいえ、何でもかんでも汎化すると、moduleを利用する旨味がなくなってしまいます。</li><li>設定方法が複雑で、Terraform初心者には運用が難しいです。初心者含む不特定多数のメンバーがterraformを触る機会がある場合や、運用担当者のスキルレベルを考慮した際に導入が難しい場合があるかもしれません。</li></ul><h3 id="こんなケースにおすすめ-1"><a href="#こんなケースにおすすめ-1" class="headerlink" title="こんなケースにおすすめ"></a>こんなケースにおすすめ</h3><ul><li>moduleは、Terraformにある程度精通したメンバーが運用する前提で利用されることになるかと思います。</li><li>また、リソースの利用にあたり、共通化された規約や思想が前提としてある場合は、moduleを利用することで、固定化された部分を運用側に意識させず、ガバナンスを効かせることができます。</li></ul><h2 id="3-環境毎にディレクトリで分離派"><a href="#3-環境毎にディレクトリで分離派" class="headerlink" title="3. 環境毎にディレクトリで分離派"></a>3. 環境毎にディレクトリで分離派</h2><p>環境毎に完全にディレクトリを分離し、個別にTerraformソースを用意する(Workspaceもmoduleも一切利用しない)流派です。</p><figure class="highlight plain"><figcaption><span>完全分離派のディレクトリ構成例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── production</span><br><span class="line">│   ├── backend.tf</span><br><span class="line">│   ├── compute_address.tf</span><br><span class="line">│   ├── compute_firewall.tf</span><br><span class="line">│   ├── compute_instance.tf</span><br><span class="line">│   ├── project.tf</span><br><span class="line">│   ├── variable.tf</span><br><span class="line">│   └── ...</span><br><span class="line">└── staging</span><br><span class="line">    ├── backend.tf</span><br><span class="line">    ├── compute_address.tf</span><br><span class="line">    ├── compute_firewall.tf</span><br><span class="line">    ├── compute_instance.tf</span><br><span class="line">    ├── project.tf</span><br><span class="line">    ├── variable.tf</span><br><span class="line">    └── ...</span><br></pre></td></tr></table></figure><h3 id="メリット-2"><a href="#メリット-2" class="headerlink" title="メリット"></a>メリット</h3><ul><li>各環境の構成が各ディレクトリ内で完結しているため、最も直感的で理解しやすくTerraformに精通していないメンバーに易しい構成です。</li><li>Terraformソースが環境毎に独立しているため(Workspace派のデメリットで紹介したような)環境間の差異を意識する必要がありません。</li></ul><h3 id="デメリット-2"><a href="#デメリット-2" class="headerlink" title="デメリット"></a>デメリット</h3><ul><li>全ての環境へ同じ変更を加えたい場合、各ディレクトリ配下のtfソースに変更を加える必要があり、2度手間3度手間になるうえに、特定環境への変更に抜け漏れが生じる可能性があります。</li><li>環境間の差異を把握するのが難しく見通しが悪いです。</li></ul><h3 id="こんなケースにおすすめ-2"><a href="#こんなケースにおすすめ-2" class="headerlink" title="こんなケースにおすすめ"></a>こんなケースにおすすめ</h3><ul><li>環境間で構成の差異が大きいケースは、環境間の差異を吸収するロジックを組み込む必要がない本構成が使えます。</li><li>デメリットで上げたような特定環境への変更漏れ等のリスクはありますが、Terraform初心者や運用担当者のスキルレベルによっては最もシンプルな本構成が、運用負荷が低く、運用しやすいかもしれません。</li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は、各機能を独立して利用した場合のシンプルでベーシックな流派を紹介しましたが、moduleとWorkspaceを組み合わせる(環境依存の変数をWorkspaceで切り替える)流派なども存在します。最後のディレクトリ完全分離パターンは、個人的には利用したくないパターンですが、Terraform初心者でも運用可能な点でいうと、一概に否定はできないのかなと思っています。</p><p>本記事が、Terraformを利用する上での参考になれば幸いです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIGとはTechnology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnot
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
  </entry>
  
  <entry>
    <title>AWS IAMロールの信頼関係の気になる動作</title>
    <link href="https://future-architect.github.io/articles/20190902/"/>
    <id>https://future-architect.github.io/articles/20190902/</id>
    <published>2019-09-01T23:17:51.000Z</published>
    <updated>2019-10-09T00:02:38.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。TIG DXチーム<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の村瀬です。2019年6月に中途入社しました。</p><p>最近当社Tech Blogが活発ですがより弾みをつける為、参加いたしました。</p><p>AWSのIAMロール便利ですよね。利用していますか？今回は <strong>IAMロールの信頼関係</strong> で気になる動作を確認したので検証してみました。</p><h1 id="IAMロールとは"><a href="#IAMロールとは" class="headerlink" title="IAMロールとは"></a>IAMロールとは</h1><p>公式ドキュメントより抜粋します。</p><blockquote><p>IAM ロールは、特定のアクセス権限を持ち、アカウントで作成できる IAM アイデンティティです。IAM ロールは、 AWSで許可/禁止する操作を決めるアクセス権限ポリシーが関連付けられている AWS アイデンティティであるという点で、IAM ユーザーと似ています。ただし、ユーザーは 1 人の特定の人に一意に関連付けられますが、ロールはそれを必要とする任意の人が引き受けるようになっています。また、ロールには標準の長期認証情報 (パスワードやアクセスキーなど) も関連付けられません。代わりに、ロールを引き受けると、ロールセッション用の一時的なセキュリティ認証情報が提供されます。</p></blockquote><blockquote><p>ロールを使用して、通常は AWS リソースへのアクセス権のないユーザー、アプリケーション、サービスにそのアクセス権を委任できます。たとえば、AWS アカウントのユーザーに、通常はないリソースに対するアクセス許可を付与したり、ある AWS アカウントのユーザーに、別のアカウントのリソースに対するアクセス許可を付与したりできます。または、モバイルアプリに AWS リソースの使用を許可しても、(キーの更新が困難であり、キーの抽出が可能である) アプリへの AWS キーの埋め込みは禁止する場合があります。AWS の外部 (社内ディレクトリなど) に ID をすでに持っているユーザーに AWS へのアクセスを許可することが必要になる場合があります。または、リソースを監査できるように、アカウントへのアクセス権を第三者に付与することが必要になる場合もあります。</p></blockquote><p><a href="https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_roles.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_roles.html</a></p><h1 id="別のAWSアカウントのIAMユーザからスイッチ可能なIAMロール作成手順"><a href="#別のAWSアカウントのIAMユーザからスイッチ可能なIAMロール作成手順" class="headerlink" title="別のAWSアカウントのIAMユーザからスイッチ可能なIAMロール作成手順"></a>別のAWSアカウントのIAMユーザからスイッチ可能なIAMロール作成手順</h1><p>1.マネジメントコンソールで信頼されたエンティティの種類の選択で別のAWSアカウントを選択しアカウントIDを入力し、次のステップへ<br>2.必要なポリシーをアタッチして<br>3.ロール名を入力してロールの作成<br>4.作成したロールの信頼関係の編集でポリシードキュメントを修正し信頼ポリシーの更新</p><figure class="highlight json"><figcaption><span>信頼関係jsonイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">  <span class="attr">"Statement"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">      <span class="attr">"Principal"</span>: &#123;</span><br><span class="line">        <span class="attr">"AWS"</span>: <span class="string">"arn:aws:iam::123456789012:user/murase"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Action"</span>: <span class="string">"sts:AssumeRole"</span>,</span><br><span class="line">      <span class="attr">"Condition"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これに対して信頼関係の編集で存在しないエンティティを下図のように指定するとエラーとなり、保存できませんでした。裏でエンティティの存在確認が行われているんですね。</p><img src="/images/20190902/err.png" style="border:solid 1px #000000" alt="存在しないIAMユーザを指定してエラーになった図"><h1 id="検証"><a href="#検証" class="headerlink" title="検証"></a>検証</h1><h3 id="検証1"><a href="#検証1" class="headerlink" title="検証1"></a>検証1</h3><p>では、存在するエンティティ(IAMユーザ)を指定してIAMロールを作成し、その後IAMユーザを削除したらどうなるでしょうか？</p><p>手順は省略しますが、結果は以下の通りです。</p><figure class="highlight json"><figcaption><span>IAMユーザ削除後の信頼関係jsonイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">  <span class="attr">"Statement"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">      <span class="attr">"Principal"</span>: &#123;</span><br><span class="line">        <span class="attr">"AWS"</span>: <span class="string">"AIDA3ZFZ4X6FO5HB76XYS"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Action"</span>: <span class="string">"sts:AssumeRole"</span>,</span><br><span class="line">      <span class="attr">"Condition"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>信頼されたエンティティが意図しない文字列「AIDA3ZFZ4X6FO5HB76XYS」に変わりました。</p><h3 id="検証2"><a href="#検証2" class="headerlink" title="検証2"></a>検証2</h3><p>では、先ほど削除したIAMユーザと同名のIAMユーザを再作成するとロールの信頼されたエンティティがどうなるか見てみましょう。</p><p>またまた手順は省略しますが、結果は以下の通りです。</p><figure class="highlight json"><figcaption><span>同名IAMユーザ作成後の信頼関係jsonイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">  <span class="attr">"Statement"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">      <span class="attr">"Principal"</span>: &#123;</span><br><span class="line">        <span class="attr">"AWS"</span>: <span class="string">"AIDA3ZFZ4X6FO5HB76XYS"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Action"</span>: <span class="string">"sts:AssumeRole"</span>,</span><br><span class="line">      <span class="attr">"Condition"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>信頼されたエンティティは相変わらず意図しない文字列のままでした。再作成したIAMユーザと合致しない為、スイッチロールできませんね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>削除したIAMユーザとたまたま同名のIAMユーザを作成して意図しないロールが利用できてしまうのは問題ですし、セキュリティを考慮するとこのような動作をするのは納得できます。</p><p>実際のケースとしてプロジェクトからの離脱などの理由によりIAMユーザを削除することがあるかと思います。削除後に復帰することがなければ良いのですが、復帰することがあり以前のロールが利用できることを望むのであればIAMユーザを削除するのではなくコンソールへのアクセスの無効化やアクセスキーの削除にてIAMユーザをログインできないようにする運用が得策です。</p><p>また、信頼されたエンティティを更新する際にエンティティの存在チェックがなされるので意図しない文字列がある場合にはそれを削除しないと更新ができません。CloudFormationやTerraformでIAMロールが管理されていればそれほど手間なく更新可能かと思いますが、手運用の場合には気を付けましょう。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="https://future-architect.github.io/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="https://future-architect.github.io/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして。TIG DXチーム&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnot
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>GKEのPodから異なるプロジェクトのIPアドレスへ接続できずハマった話</title>
    <link href="https://future-architect.github.io/articles/20190827/"/>
    <id>https://future-architect.github.io/articles/20190827/</id>
    <published>2019-08-27T14:39:01.000Z</published>
    <updated>2019-09-01T23:57:34.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG所属DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の市川燿と申します。</p><p>現在は、プロジェクト内で利用しているGoogle Cloud Platform(以下GCP)の環境構築と、Go言語でバックエンドアプリの開発などをしています。</p><p>今回は、GCPのKubernetesサービスである<a href="https://cloud.google.com/kubernetes-engine/" target="_blank" rel="noopener">Google Kubernetes Engine</a>(以下GKE)を利用している際にハマった事象について共有します。</p><h2 id="本記事について"><a href="#本記事について" class="headerlink" title="本記事について"></a>本記事について</h2><p>(2019/09/02) GKEのクラスタがルートベースである旨を追記<br>(2019/09/02) Export設定について追記</p><h2 id="GKEとは"><a href="#GKEとは" class="headerlink" title="GKEとは"></a>GKEとは</h2><blockquote><p>コンテナ化されたアプリケーションをデプロイするための、本番稼働に対応したマネージド型環境です。<br><a href="https://cloud.google.com/kubernetes-engine/?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/?hl=ja</a></p></blockquote><h2 id="ハマった事象"><a href="#ハマった事象" class="headerlink" title="ハマった事象"></a>ハマった事象</h2><p><strong>GKE内のPodから他のGCPプロジェクトのプライベートIPアドレスに対し接続できない</strong>ことです。<br>もちろんFirewall Ruleの設定上は接続できる状態です。</p><img src="/images/20190828/photo_20190828_01.png"><p>具体的には、CurlによるHTTPやTelnetはもちろん、pingによるICMPも接続ができません。不思議なことにGKEを構成するGCEノードにssh接続し、そこから外部のプライベートIPアドレスを持つリソースに対しては”接続が可能”でした。</p><p>実はパブリックIPが付与されていた、といったオチもありません。全てプライベートIPのみを持っているインスタンスです。</p><h2 id="システム構成前提"><a href="#システム構成前提" class="headerlink" title="システム構成前提"></a>システム構成前提</h2><p>今回の環境は以下の設定を使用しています。</p><ul><li><p>VPC</p><ul><li>専有VPCを利用</li></ul></li><li><p>GKE</p><ul><li>バージョン: v1.12.7-gke.10</li><li><a href="https://cloud.google.com/vpc/docs/legacy" target="_blank" rel="noopener">レガシーネットワーク</a>を利用<ul><li>クラスタのネットワークは<a href="https://cloud.google.com/kubernetes-engine/docs/how-to/routes-based-cluster" target="_blank" rel="noopener">ルートベース</a></li></ul></li></ul></li><li><p>他GCPプロジェクトとの接続</p><ul><li><a href="https://cloud.google.com/vpc/docs/vpc-peering" target="_blank" rel="noopener">VPCネットワークピアリング</a>を設定済み</li></ul></li></ul><p>各サービスは以下のCIDRが設定してある前提で説明します。</p><table><thead><tr><th>サービス</th><th>CIDR</th><th>レンジ</th></tr></thead><tbody><tr><td>接続元プロジェクト</td><td>10.1.0.0/16</td><td>10.1.0.0～10.1.255.254</td></tr><tr><td>接続先プロジェクト</td><td>10.2.0.0/16</td><td>10.2.0.0～10.2.255.254</td></tr><tr><td>接続元のGKE</td><td>172.16.0.0/16</td><td>172.16.0.0～172.16.255.254</td></tr></tbody></table><h2 id="設定・接続状況"><a href="#設定・接続状況" class="headerlink" title="設定・接続状況"></a>設定・接続状況</h2><p>設定や接続確認し情報を整理したところ以下のことが分かっています。</p><img src="/images/20190828/photo_20190828_02.png"><ul><li>GKE内Podから他プロジェクト内GCEへの接続は不可能 <strong>(<em>a</em>)</strong></li><li>GKE内Pod(my-pod)から自プロジェクト内GCE(test-gce-01)への接続は可能 <strong>(<em>b</em>)</strong></li><li>自プロジェクトと接続先のプロジェクトとのVPC Peeringは設定済み</li><li>自プロジェクトのGCE上(test-gce-01)から他プロジェクトGCE(target-gce-01)へ接続は可能 <strong>(<em>c</em>)</strong></li><li>GKE内Podが稼働している物理Node(gke-node-02)から他プロジェクトGCEへの接続も可能</li></ul><p>GKE内Podとプロジェクト内GCE、テスト用GCEと他プロジェクトGCEはそれぞれきちんと繋がるのに、GKE内Podと他プロジェクトGCEは繋がらないので、そんなことありうるのかと当時とても焦りました。</p><h2 id="Pod-gt-他Project-IPへの接続がうまくいかない原因"><a href="#Pod-gt-他Project-IPへの接続がうまくいかない原因" class="headerlink" title="Pod=&gt;他Project IPへの接続がうまくいかない原因"></a>Pod=&gt;他Project IPへの接続がうまくいかない原因</h2><p>GKE用のCIDRが接続先PJのCloud Routerに上手く連携されていないため、戻りのルーティング失敗していると思われます(未確認)。</p><p>「Pod=&gt;同一Project IP」への接続については、GKEクラスタを作成した際に以下のようなルートがGKE物理ノードごとに自動作成されます。<br>そのため、同一PJの同一VPC内のPod通信は問題有りませんでした。</p><table><thead><tr><th>名前</th><th>説明</th><th>送信先 IP 範囲</th><th>優先度</th><th>インスタンス タグ</th><th>ネクストホップ</th><th>ネットワーク</th></tr></thead><tbody><tr><td>my-gke-default-pool-xxx</td><td>k8s-node-route</td><td>172.25.0.0/24</td><td>1000</td><td>なし</td><td>インスタンス my-gke-default-pool-xxx（ゾーン asia-northeast1-a）</td><td>my-network</td></tr></tbody></table><h2 id="試した方法その1-プロキシサーバ経由でアクセス"><a href="#試した方法その1-プロキシサーバ経由でアクセス" class="headerlink" title="試した方法その1: プロキシサーバ経由でアクセス"></a>試した方法その1: プロキシサーバ経由でアクセス</h2><p>解決手段としてまず思いついたのは手軽にnginxなどをプロキシサーバ代わりにして方法です。</p><ul><li>通信経路<br>GKE内Pod =&gt; nginxなどのプロキシサーバ =&gt; 他プロジェクトGCE</li></ul><p>しかし、GKE内Podとしてnginxを作ってしまうとnginxと他プロジェクトGCE間での通信ができず目的が達成できません。</p><p>nginxをGCE上にインストールしてインストールする必要があります。</p><img src="/images/20190828/photo_20190828_03.png"><figure class="highlight nginx"><figcaption><span>nginx.conf(設定サンプル)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> <span class="number">10.2.0.1:80</span>; <span class="comment"># target-gce-01</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この方法で不格好ですが、無事にGKE内Podから他プロジェクトGCEにアクセスすることができました。<br>GCE上にプロキシサーバをインストールしているため、冗長性やオートヒーリングとしてKubernetesの機能が利用できず<br>別の方法で担保する必要があります。</p><h2 id="試した方法その2-IPマスカレードエージェントを利用してアクセス-本題"><a href="#試した方法その2-IPマスカレードエージェントを利用してアクセス-本題" class="headerlink" title="試した方法その2: IPマスカレードエージェントを利用してアクセス (本題)"></a>試した方法その2: IPマスカレードエージェントを利用してアクセス (本題)</h2><p>やっと本題です。</p><p>もう少し調べてみるとkubernetes-incubator配下にIPマスカレードエージェント(ip-masq-agent)というプロダクトがあり今回のケースに使えそうなことが分かりました。</p><p>IPマスカレードエージェントを利用することで、PodのアドレスからPodが稼働している物理Nodeのアドレスへとアドレスの変換を行い、物理Nodeのアドレスとして接続GKE外部のアドレスに接続しに行きます。</p><img src="/images/20190828/photo_20190828_04.png"><p>GKEでもバージョン1.7以上で<a href="https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent#how_ipmasq_works" target="_blank" rel="noopener">一定条件を満たすと</a>デフォルトで有効になっており、追加インストール作業が不要で利用できます。</p><p>IPマスカレードエージェントの使い方はとても簡単で、kubernetesのconfig mapを登録だけで適用されます。</p><p>GKE内部のネットワーク(172.16.0.0/16)と自プロジェクトネットワーク(10.1.0.0/16)のみIPマスカレードエージェントの<strong>対象外</strong>としたい場合には、以下のようにファイルを編集し<strong>config</strong>のファイル名で保存した後、</p><figure class="highlight yaml"><figcaption><span>config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nonMasqueradeCIDRs:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">172.16</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span> <span class="comment"># my-gke-cluster CIDR</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">10.1</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span>   <span class="comment"># my-project CIDR</span></span><br><span class="line"><span class="attr">resyncInterval:</span> <span class="number">60</span><span class="string">s</span></span><br></pre></td></tr></table></figure><p>以下のコマンドを実行することで適用されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create configmap ip-masq-agent --from-file config --namespace kube-system</span><br></pre></td></tr></table></figure><p>※<strong>config</strong>以外の名前でファイルを保存すると上手く適用されないため注意</p><p>私の環境ではkubectlコマンド実行から1分ほどで、設定が適用されアクセスできるようになりました。</p><figure class="highlight bash"><figcaption><span>GKE内Podから他プロジェクトIPへの確認コマンド</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> my-pod -- curl http://10.2.0.1/health</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>この方法であれば、GKE内で完結し、コマンドも1コマンドだけなので、とてもスマートに実現できます。</p><h2 id="2019-09-02-追記-カスタムルートのimport-export"><a href="#2019-09-02-追記-カスタムルートのimport-export" class="headerlink" title="(2019/09/02 追記) カスタムルートのimport/export"></a>(2019/09/02 追記) カスタムルートのimport/export</h2><p><code>--import-custom-routes</code>, <code>--export-custom-route</code>の設定を追加してVPC Peeringの構築をすれば、異なるGCP PJのVPC間でもGKEのルートが上手くExport/Importされるようです。</p><blockquote><p>If you have GKE clusters without VPC native addressing, you might have multiple static routes to direct traffic to VM instances that are hosting your containers. You can export these static routes so that the containers are reachable from peered networks.<br><a href="https://cloud.google.com/vpc/docs/vpc-peering#benefits_of_exchanging_custom_routes" target="_blank" rel="noopener">https://cloud.google.com/vpc/docs/vpc-peering#benefits_of_exchanging_custom_routes</a></p></blockquote><p>今回のように、 172.16.0.0/16のようなGKEのPODに割り当てるCIDRが、接続先のGCP PJで重複していない前提であればこちらの手法のほうが良いかもしれません。</p><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><p>今回は試しませんでしたが、紹介した2の方法以外にも以下の方法も検討していました。<br>ケースによっては検討するのも有りだと思います。</p><ul><li><a href="https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips" target="_blank" rel="noopener">Nativeクラスタ</a>を利用</li><li><a href="https://cloud.google.com/vpc/docs/shared-vpc" target="_blank" rel="noopener">共有VPC</a>を利用</li><li>Publicなネットワーク経由での利用</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>GKE内Podから他プロジェクトのIPへの接続する方法について紹介しました。本記事ではGCPの別PJでしたが、AWSへのVPC Peeringであったり、オンプレミスに対するVPN接続でも同じ事象が発生しうると思います。</p><p>IPマスカレードエージェントを利用することで、プロキシサーバなど余分なサーバを作る必要なくアクセスできます。</p><p>本記事を通して、皆さまのGCP・GKEライフが少しでも快適になれば幸いです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、TIG所属DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footno
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>ソフトとハードの垣根を越えろ - IoTハードウェアの開発をソフト屋視点で解説します</title>
    <link href="https://future-architect.github.io/articles/20190826/"/>
    <id>https://future-architect.github.io/articles/20190826/</id>
    <published>2019-08-25T23:30:52.000Z</published>
    <updated>2019-08-25T23:44:00.179Z</updated>
    
    <content type="html"><![CDATA[<p>はじめまして。筒井と申します。</p><p>簡単に自己紹介をさせていただくと、新卒でフューチャーに入社後に<a href="https://www.future.co.jp/company_profile/future_group/" target="_blank" rel="noopener">フューチャーグループ</a>のTrexEdgeへ出向しました。現在は右手に半田ごて、左手にHHKBでハード・ソフトにこだわらず仕事をしています。</p><p>TrexEdgeでは、「スマートビレッジ」という言葉をキーとして、テクノロジーを用いて地方の価値を最大化することを目指しています。</p><p>具体的には、地方における主産業である「農業」に目を向け、農業経営を支援するアプリ「Agrion」の運営をメインの事業としています。</p><p><a href="https://www.agri-on.com/" target="_blank" rel="noopener">https://www.agri-on.com/</a></p><p>今回は農業の話ではなく、また別の地方特有の課題を技術で解決しようとしている話をさせていただきます。</p><h2 id="獣害問題"><a href="#獣害問題" class="headerlink" title="獣害問題"></a>獣害問題</h2><p>獣害問題と言っても都会の方にはあまり馴染みのない話かもしれません。イノシシやシカを見かけるのはジビエ料理店くらいでしょうか。</p><p>しかし農村部では、多くの農家が獣害に頭を悩ませており、その被害額は年間160億円以上との報告も出ています。<br><a href="http://www.maff.go.jp/j/seisan/tyozyu/higai/h_zyokyo2/h29/181026.html" target="_blank" rel="noopener">http://www.maff.go.jp/j/seisan/tyozyu/higai/h_zyokyo2/h29/181026.html</a></p><p>そのため獣害被害は農家にとってはとても大きな問題なのですが、この対処を行う猟友会員（ハンター）もまた、高齢化というまた別の問題に直面しています。</p><p>今回紹介する京都府の与謝野町という街においても、猟友会の平均年齢は毎年1歳ずつ高くなっている状況です。</p><h2 id="害獣檻センサーについて"><a href="#害獣檻センサーについて" class="headerlink" title="害獣檻センサーについて"></a>害獣檻センサーについて</h2><p>害獣の管理捕獲の方法には銃猟、網猟、わな猟とあるのですが、TrexEdgeではわな猟に用いる箱罠に取り付けるセンサー端末を開発しました。</p><p>与謝野町は海と山に囲まれた風光明媚な土地なのですが、イノシシやシカを捕らえる箱罠は、彼らが人里へ降りてこないよう山中に設置されています。</p><p>これがまた、四駆の軽トラじゃないと入っていけないような、すごいところに設置されています。</p><img src="/images/20190826/photo_20190826_01.jpeg"><p>こんなすごいところに設置している訳ですから獣がかかっているかどうかの見回りもまた一苦労で、この負担を軽減するために、箱罠にセンサーを設置することになりました。<br>（ここはまだ舗装されているのでマシな方だったりします。）</p><h2 id="センサー端末の開発方法"><a href="#センサー端末の開発方法" class="headerlink" title="センサー端末の開発方法"></a>センサー端末の開発方法</h2><p>「ここはテックブログだぞ」という天の声が聞こえてきましたので、前置きはここまでにして、ここからは技術の話をします。</p><p>さて、「ハードウェアを作る」という目的を持ったとき、その実現方法は多種多様です。</p><p>ものすごくざっくりですが、IoTセンサー端末の構成要素は主に以下の四つになります。</p><ol><li>センサー<br>箱罠の作動を検知するセンサー類です。今回は開閉センサー（マグネット式）を使いました。</li><li>バッテリー<br>電源が確保出来る場所ならば不要ですが、今回は山林部への設置なのでバッテリーが必要です。</li><li>基板<br>無線のコントローラーや、制御用のマイコンを載せる基板です。</li><li>筐体<br>上記を収めるケースですね。</li></ol><p>これらの要素をそれぞれ揃えていく必要があるのですが、ここで「自分で作る」と「買ってくる」という選択肢が出てきます。<br>フルスクラッチで作るか、何らかのパッケージ等を導入するかといったところです。</p><p>非常に悩ましい二択ですが、仕様を満たせるかどうか、コストはどうかという観点で決めていきます。</p><h3 id="センサー、バッテリー"><a href="#センサー、バッテリー" class="headerlink" title="センサー、バッテリー"></a>センサー、バッテリー</h3><p>センサーを自分で作ることはなかなか難しい話です。バッテリーは言わずもがなでございます。</p><p>レモン数個に銅板と亜鉛板でリチウムイオン電池並の性能が出ればとってもエコなのですが。</p><p>開閉センサーは、<a href="http://akizukidenshi.com/catalog/g/gP-04209/" target="_blank" rel="noopener">リードスイッチ</a>と永久磁石を買ってきて構成することも可能ではありますが、出来合いの開閉センサーが特別高いものでもなく、またこれらを組み立てる手間のほうが高コストとなるので、買ってきて済ませることにしました。</p><h3 id="筐体"><a href="#筐体" class="headerlink" title="筐体"></a>筐体</h3><p>筐体を「自分で作る」ことにした場合、金型を起こす、3Dプリンタでプリントする、切削加工で作る…などまた様々な選択肢が現れます。</p><p>一方「買ってくる」ことにした場合は、筐体メーカーさんのプリメイドなケースを購入し、目的に合わせて追加工を施すことになります。</p><p>3Dプリンタは、意匠性の高い筐体を1点から気楽に作れることがメリットです。<br>一方で、イニシャルコストが低い代わりに多量生産するとそのコストメリットが薄れます。<br>また安価なFDM方式では寸法精度や強度を出すことが難しいという問題もあります。</p><p>金型は、ほぼ3Dプリンタの逆です。<br>イニシャルコストは非常に高くなりますが、量産時のコストはとても安くなります。</p><p>最後に買ってきて追加工をするパターンですが、出来合いのものを買うためケースの大きさ・見た目に自由は効かなくなりますが、ひとつあたりのコストも安く、お手軽です。</p><p>今回の害獣檻センサーでは、防水性が求められるために3Dプリンタでは製作が難しいこと、また現時点で金型への投資を回収するだけの製造数を予定していないことから、<a href="https://www.takachi-el.co.jp/" target="_blank" rel="noopener">タカチ電機工業</a>さんのケースを購入しました。</p><h3 id="基板"><a href="#基板" class="headerlink" title="基板"></a>基板</h3><p>さて、今回の主題となる基板についてすが、これもまた、買ってくるのか、自分で作るのかが選べます。あ、よく間違えている方がいるので書いておきますが、「基盤」では無く「基板」です。基板がCircuit Boardで、基盤はInfrastructureです。</p><p>基板を買ってくる場合は、Arduinoを始めとするマイコンボードに、<a href="https://www.seeedstudio.com/category/Grove-c-1003.html" target="_blank" rel="noopener">Grove</a>のような各種モジュールを組み合わせて使うことが考えられます。このパターンでは、初期投資を小さく抑えて、素早くプロトタイピング、機能の検証が行えるのが魅力です。</p><p>一方で、Arduinoは万人に使いやすいように作られているために、特定の目的で性能・コストを突き詰めようとした場合には小回りが利かなくなってきます。その最たるところのひとつが消費電力です。Arduinoは常時点灯する電源LEDやUSBシリアル変換ICなどが搭載されているため、消費電力は大きくなってしまっています。</p><p>今回の害獣檻センサーは見回りの負担軽減が目的ですので、バッテリー交換の頻度も極力抑えることが求められます。そのため、低消費電力化はひとつの大きな課題であり、基板を作ることに決めました。基板を自分で作るとなった場合には、プリント基板を製作するか、<a href="https://www.murata.com/ja-jp/campaign/ads/japan/elekids/ele/craft/knack/universal" target="_blank" rel="noopener">ユニバーサル基板に手半田で回路を作成する</a>か、といった選択肢が現れます。</p><p>ユニバーサル基板のメリットは、基板をすぐに作り始められること、初期コストが小さく済むことです。プリント基板を製作するとなった場合には、（自前で製造設備を持っている方は別ですが）外部に基板を発注することになるため、製造のための時間がかかってしまいます。また回路にミスがあって修正をいれる場合にも、修正→再製造とさらに時間・お金がかかってしまいますが、その点ユニバーサル基板では配線の修正も容易です。ソフトウェアの開発に無理やり例えれば、「デバッグ・デプロイが容易なスクリプト言語」と言ったところでしょうか。</p><p>一方ユニバーサル基板のデメリットは、製造に技量が求められること、一点あたりの製造時間が長いこと、複数台の製造時に品質を安定させることが難しいことです。<a href="http://elm-chan.org/docs/wire/wiring.html" target="_blank" rel="noopener">この方</a>のようなユニバーサル基板の達人になれば、ワンオフで基板を作るにはとても良い選択肢なのですが、複数の基板を製造するには割に合わなくなってきます。</p><p>これに対してプリント基板は、「ビルドに時間はかかるが性能の良いコンパイル言語」という感じです。</p><p>基板のアートワーク（後述します）にこそ時間はかかりますが、一度デザインが出来てしまえばエンジニアの手を離れて製造が進んでいきます。最近は中国（主に深セン）のプリント基板製造メーカーさんが台頭しており、基板製造だけならば1,000円未満から始めることが出来るため、お金の面で言えばユニバーサル基板と対等になってきています。</p><p>長々と書いてきましたが、目的に応じた手段をまとめると以下のようになると思います。</p><h4 id="Q-目的はプロジェクトのコンセプト検証やデモで、何より早く検証を進めたい？"><a href="#Q-目的はプロジェクトのコンセプト検証やデモで、何より早く検証を進めたい？" class="headerlink" title="Q. 目的はプロジェクトのコンセプト検証やデモで、何より早く検証を進めたい？"></a>Q. 目的はプロジェクトのコンセプト検証やデモで、何より早く検証を進めたい？</h4><ul><li>Yes<br>Arduinoと各種モジュールを組み合わせたプロトタイプを作る。<br>またはユニバーサル基板で製作する。</li><li>No, コンセプトの検証は済んでいて、更に小型化したい / コストを下げたいなど<br>ユニバーサル基板 or プリント基板の製作</li></ul><h4 id="Q-必要な台数はせいぜい数台で、今後仕様変更が入る可能性が大きい？"><a href="#Q-必要な台数はせいぜい数台で、今後仕様変更が入る可能性が大きい？" class="headerlink" title="Q. 必要な台数はせいぜい数台で、今後仕様変更が入る可能性が大きい？"></a>Q. 必要な台数はせいぜい数台で、今後仕様変更が入る可能性が大きい？</h4><ul><li>Yes<br>ユニバーサル基板で製作する。</li><li>No, 仕様もほぼ固まっていて台数も必要<br>プリント基板で製作する。</li></ul><p>害獣檻センサーの開発では、すでにコンセプト検証は済んでおり、また数十台の製造が必要なことから、プリント基板を製造することに決定しました。</p><h2 id="プリント基板の設計から製造まで"><a href="#プリント基板の設計から製造まで" class="headerlink" title="プリント基板の設計から製造まで"></a>プリント基板の設計から製造まで</h2><p>ここからは、害獣檻センサー製造時の具体的なプリント基板設計・製造の話をしていきます。</p><p>プリント基板を作るには、一般に下記のような手順で進めていきます。</p><ol><li>仕様を定義する</li></ol><ul><li>何はともあれ仕様を決めるところからです。これはソフトウェアもハードウェアも変わりませんね。<br>業務要件を基板の仕様へブレークダウンしていきます。</li></ul><ol start="2"><li>回路を設計する</li></ol><ul><li>仕様を満たすための回路を設計します。<br>システム開発に例えるならば、詳細設計のフェーズにあたるかと思います。</li></ul><ol start="3"><li>部品を選定する</li></ol><ul><li>設計した回路に用いる部品を選定します。<br>同じ目的を満たすためにも、様々なメーカーから複数の電子部品が出ています。<br>システム開発に例えるならば、技術スタックを選定するフェーズにあたるかと思います。</li></ul><ol start="4"><li>アートワークを描く</li></ol><ul><li>3で選定した部品をプリント基板上に配置し、<br>配線を描いて2の回路を作り上げていく作業です。<br>システム開発に例えるならば、コーディングにあたるかと思います。</li></ul><ol start="5"><li>基板を製造する</li></ol><ul><li>4で描いたアートワークを基にプリント基板を製造します。</li></ul><ol start="6"><li>部品を実装する</li></ol><ul><li>5で出来上がったプリント基板に、3で選定した部品を実装していきます。<br>5と6はシステム開発に例えるのが難しいのですが・・・強いて言うならコンパイル・ビルドでしょうか。</li></ul><p>これらについてすべて紹介してしまうと指輪物語並の大作になってしまうため、<br>この投稿では4のアートワークと5の基板製造に絞って詳しく紹介させていただきます。</p><h3 id="アートワークを描く"><a href="#アートワークを描く" class="headerlink" title="アートワークを描く"></a>アートワークを描く</h3><p>基板のアートワークを描くには、専用の基板CADと呼ばれるソフトウェアが必要です。<br>有名どころでは<a href="https://www.autodesk.co.jp/products/eagle/overview" target="_blank" rel="noopener">Eagle</a>、<a href="https://www.innotech.co.jp/products/orcad/products/orcad-capture/overview/" target="_blank" rel="noopener">OrCAD</a>などがあります。</p><p>今回は、オープンソースの<a href="http://www.kicad-pcb.org/" target="_blank" rel="noopener">KiCAD</a>を使用しました。<br>小規模なプリント基板の製作には十分な機能を備えていますし、Windows、macOS、Linuxの全てで動作するのも嬉しいところです。</p><p>アートワークを描き始めるにあたって、なんらかの制約条件が無いと効率的に進めていくのは難しいでしょう。<br>最も一般的な制約は、基板の大きさ・形状かと思います。<br>既に筐体の大きさが定められていて、基板形状もそれに縛られるパターンです。<br>特に制約が無い場合は、はじめに基板の大きさを決めてしまうのがおすすめです。<br>プリント基板の製造コストはほぼ大きさで決まるため、小さいに越したことはありません。</p><img src="/images/20190826/photo_20190826_02.png">これは害獣檻センサーのものではありませんがKiCADでのアートワーク中のキャプチャです。<p>アートワーク作業は、端的に言うと「終わりのないパズル」です。<br>大電流が流れる配線は太く短くなど様々な考慮をしつつ、部品と配線の配置を描いては消し、描いては消し…を繰り返していきます。</p><p>鼻歌交じりに部品を配置し、配線を進めていくと、「基板の中に収まらない～～！！！」ということも多々生じます。<br>お茶を飲んで一息ついてから、部品の配置を改善して配線をやり直します。<br>終わりのないパズルは、非常に泥臭い作業です。</p><p>基板の中に収めるだけでなく、以下のような点を心に留めながらアートワークを描いていく必要があります。</p><ul><li>電源ラインは太く短く</li><li>パスコンはICの近くに配置する</li><li>コネクタ類はケースに収めたときに作業性が良いように配置する</li><li>手半田で実装する場合はコテ先を取り回しやすいように部品を配置する</li><li>電解コンデンサは発熱する部品から離して配置する</li><li>GNDループが出来ないように</li><li>ベタGNDがアンテナ状にならないように</li><li>etc…</li></ul><p>また、一通り配線を終えた後にも、「ここはもう少しスマートに配線出来そうだな…」とか、「この部品配置は性能が悪くなりそうだな…」という点が出てきます。<br>これはソフトウェアで言うところのリファクタリングに近い作業になります。<br>全くやらないのも問題ですが、気を付けないと沼にはまります。<br>（本職の基板屋さんは良い方法論をお持ちかもしれません。教えてほしいです。）</p><h3 id="手戻り"><a href="#手戻り" class="headerlink" title="手戻り"></a>手戻り</h3><ol start="2"><li>回路を設計する</li><li>部品を選定する</li><li>アートワークを描く</li></ol><p>基板づくりの手順を上記のように順序付けて紹介していましたが、私の場合は4から2へ、3から2へと何度か戻っていました。</p><p>アートワークを描く中でどうしても部品が基板に収まらないので一回り小さい部品に変更する、部品選定と見積もりを進めていたら部品コストが思ったよりも高くなったので、部品の削減・共通化のために回路を修正する、<br>といったことを行っていました。<br>他にもマイコンを使った回路の場合、配線をスマートにするために使用するピンを変更することもあります。</p><p>それぞれの手順で担当者が違う場合には大変なことかもしれませんが、私の場合は回路設計から部品調達までを一人で担当していたので、<br>はじめから手戻り覚悟で、ある程度「えいや」で回路を決めたりしていました。</p><p>今回の害獣檻センサーの製造で最も大変だった手戻りは、1608と呼ばれるサイズのMLCC（チップ積層セラミックコンデンサ）が世界的な品薄で手に入らず、<br>すべて1005と呼ばれるサイズのものに変更したことです。<br>そこに関わる配線はすべて引き直しです・・・。<br>※ 1005のMLCCも品薄ではあるのですが、P板.comさんに実装をお願いする場合は無料でP板.comさんの標準在庫品を使ってもらえます。</p><h3 id="基板製造・発注"><a href="#基板製造・発注" class="headerlink" title="基板製造・発注"></a>基板製造・発注</h3><p>アートワークが完成したら、いよいよ発注です。</p><p><a href="https://www.marutsu.co.jp/contents/shop/marutsu/mame/60.html" target="_blank" rel="noopener">感光基板</a>を使えば自前で基板を作ることも可能ですが、<br>設備や薬品が必要で大変なので今回は外注しました。</p><p>先述しましたが、最近は<a href="https://www.elecrow.com/services.html" target="_blank" rel="noopener">Elecrow</a>さんや<a href="https://www.pcbgogo.jp/" target="_blank" rel="noopener">PCBgogo</a>さんなど、中国のプリント基板製造メーカーさんが台頭しています。<br>こういったところに頼めば格安で基板の製造が可能ですが、<br>今回の部品の自動実装まで頼みたかったため、<a href="https://www.p-ban.com/" target="_blank" rel="noopener">P板.com</a>さんを利用しました。</p><p>自動実装を利用する理由は、選定した部品の中に<a href="https://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A8%E3%83%8F%E3%83%BC%E3%83%AC%E3%83%99%E3%83%ABCSP" target="_blank" rel="noopener">とても手半田ができそうに無い部品</a>があり、<br>機械での実装・半田をせざるを得なかったことと、数十台分の半田付けを手作業で行うにはそれなりの時間がかかってしまうためです。<br>（個人差があるかもしれませんが、私は長時間半田付けをしていると目がショボショボになります）</p><p>基板を発注する前には、<em>必ずアートワークのダブルチェックを行いましょう。</em><br>基板のサイズと実際の部品や筐体のサイズが合わない、なんてことになったら大惨事です。</p><p>私は普段は、完成したアートワークを原寸大で紙に印刷し、実際に部品をあてがってみて大きさに問題が無いかなどを確認しています。<br>基板CADにもDRC（Design Rule Check）やERC（Electrical Rule Check）というLinterのような機能がついていますが、これに頼り切らずきちんと自分の目で確認します。</p><h3 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h3><p>さあ、苦労して設計した基板が手元に届いたときの感動はひとしおです。<br>プリント基板とユニバーサル基板の比較を長々と書いたりもしましたが、メーカーさんに頼んで作ってもらったプリント基板は<em>何よりも美しく</em>、「製品」として見栄えするものになります。<br>ケースの蓋を閉めたら、見えなくなってしまいますが…。</p><img src="/images/20190826/photo_20190826_03.jpeg">※ 一部お見せできないシリアルなどにボカシを入れています。<p>この基板が、檻の状態を検知する各種センサーの情報を処理し、LoRaWANという無線通信を経由してクラウドへデータを送信します。<br>試算ではありますが、バッテリー（単1乾電池）は1年ほどは持つ予定のため、猟友会の方の見回りにかかる負担を大きく軽減できるはずです。</p><h2 id="完成した害獣檻センサーの設置とこぼれ話"><a href="#完成した害獣檻センサーの設置とこぼれ話" class="headerlink" title="完成した害獣檻センサーの設置とこぼれ話"></a>完成した害獣檻センサーの設置とこぼれ話</h2><p>以上のような苦労を経て完成した害獣檻センサーは、現在与謝野町でイノシシ・シカの捕獲を検知しています。</p><img src="/images/20190826/20190826-3.png" class="img-middle-size"><p>（設置の様子を京都新聞さんなどに取り上げていただきました。写真右の”業者”が私です。）</p><p>これは設置の後日談になるのですが、イノシシ・シカを捕獲するための罠に、まれにクマがかかることがあります。<br>そのクマに害獣檻センサーを壊されてしまいました。</p><p>害獣檻センサーは、ケース内蔵の人感センサーおよび振動センサーと、ケースからケーブルで引き伸ばした開閉センサーからなっているのですが、このケーブルをクマに引きちぎられてしまいました。</p><p>外に出ているケーブルが痛みやすいであろうことは認識していてコルゲートチューブで保護していたのですが、まさかクマに切られてしまうとは・・・恐ろしいパワーです。</p><p>こうしたこともあり現在は、壊れやすい開閉センサーを使わず、人感センサーと振動センサーのみの値で捕獲の検知が出来ないかどうか、機械学習の利用も含めてバージョンアップの検討を進めています。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>このテックブログを見ている方のほとんどはソフトウェアエンジニアの方と思い、ところどころソフトウェア開発に例えて解説をしてみました。</p><p>その例え話を考える中で自分自身、こと開発手法という点においてはハード・ソフトの垣根を越えて活かせる知見が数多くあるんじゃないか？と思いました。<br>それぞれの分野のエンジニア同士が知見を共有する機会があれば面白いかもしれません。</p><p>プリント基板づくりはまだまだ奥が深い話なのですが、「脱ブレッドボード！まずは簡単に作ってみよう」というだけなら、さほどコストもかかりません。<br>皆さんにも挑戦していただけたら幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;はじめまして。筒井と申します。&lt;/p&gt;
&lt;p&gt;簡単に自己紹介をさせていただくと、新卒でフューチャーに入社後に&lt;a href=&quot;https://www.future.co.jp/company_profile/future_group/&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>システム開発で得たRedis利用ノウハウ</title>
    <link href="https://future-architect.github.io/articles/20190821/"/>
    <id>https://future-architect.github.io/articles/20190821/</id>
    <published>2019-08-20T23:53:57.000Z</published>
    <updated>2019-08-21T00:37:30.523Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。初投稿です。<br>2012年新卒入社の竹内です。入社当時を振り返るとOracle10g,11gを良く利用していおり、データモデリングなどテーブル設計が好きで、2018年4月ぐらいまでRDBとバッチに浸ってました。</p><p>さて、現在プロジェクトでRedisを使っているのですが、いままでRDB人間だっただけにKVSやRedisならではの特徴に四苦八苦してます。</p><p>苦しんだ分、色々な知見を得ることができているので、その内容をご紹介します！</p><h2 id="対象者"><a href="#対象者" class="headerlink" title="対象者"></a>対象者</h2><ul><li>Redisの業務システム導入を検討している方</li><li>RDBとRedisの違いを知りたい方</li><li>現場的なRedisの利用方法を知りたい方</li></ul><h2 id="書いてないこと"><a href="#書いてないこと" class="headerlink" title="書いてないこと"></a>書いてないこと</h2><ul><li>データ型やコマンドなど、HelloWorld的に公式ドキュメントを見て得られる情報</li><li>インストールなど、Redisを利用できるまでの手順</li><li>フェイルオーバーやバックアップをはじめとする運用に関する内容</li><li>データ永続化に関する内容</li></ul><h2 id="書いてること"><a href="#書いてること" class="headerlink" title="書いてること"></a>書いてること</h2><ul><li>設計・実装に関わる以下の内容<ul><li>公式ドキュメントに書いてあるけど、よく読まなきゃ見落としてしまうような落とし穴</li><li>公式ドキュメントに書いてある内容から一歩踏み込んだ挙動（「それってつまりどういうこと？」）</li><li>と、それに対する私の考え（「じゃあどうすればいい？」）</li></ul></li></ul><h2 id="検証用サーバ情報"><a href="#検証用サーバ情報" class="headerlink" title="検証用サーバ情報"></a>検証用サーバ情報</h2><ul><li>redis_version:4.0.10</li><li>redis_mode:standalone</li><li>os:Amazon ElastiCache</li><li>マスタ・スレーブ構成（スレーブ１つ）</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><ol start="0"><li>Redisとは（教科書的なサマリ）</li></ol></li><li><ol><li>シングルスレッド</li></ol></li><li><ol start="2"><li>Transaction の実現方法</li></ol></li><li><ol start="3"><li>Hash型はMultiGetできない</li></ol></li><li><ol start="4"><li>KEYSは怖い</li></ol></li><li><ol start="5"><li>おまけ：データ量試算時の注意</li></ol></li><li><ol start="6"><li>今後試したいこと</li></ol></li><li><ol start="7"><li>所感</li></ol></li><li><ol start="8"><li>ためになるサイト</li></ol></li></ul><h2 id="0-Redisとは（教科書的なサマリ）"><a href="#0-Redisとは（教科書的なサマリ）" class="headerlink" title="0. Redisとは（教科書的なサマリ）"></a>0. Redisとは（教科書的なサマリ）</h2><ul><li>Redis はキーと５種類の値型の対応関係を格納する非リレーショナルデータベース(NoSQL)。</li><li>メモリ上にデータを持つインメモリDBのため、非常に高速。</li></ul><h2 id="1-シングルスレッド"><a href="#1-シングルスレッド" class="headerlink" title="1. シングルスレッド"></a>1. シングルスレッド</h2><p>Redisサーバはシングルスレッド<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>で動作します。（厳密には他にもスレッドあるがクエリ処理をするスレッドは1つ）</p><p>..これだと、「あっそうなんだ」で終わっちゃいますよね。<br>しかしながら、以下の点に注意してください。</p><ul><li><strong>Keysのような重いクエリは本番運用禁止！</strong><ul><li>高速なはずのRedisで簡単に待ちが発生します。詳細・対策は後述</li></ul></li><li><strong>性能検証でCPU使用率余裕♪と思いきや…</strong><ul><li>あなたのRedisサーバは何コアですか？</li><li>4コア？それなら性能計測した <strong>RedisのCPU使用率はその4倍</strong> として考える必要があります。</li></ul></li></ul><p>AWSでは<strong>EngineCPUUtilization</strong>というメトリクスを使えば、上記を加味したCPU使用率が見れます。性能検証等で測定する際は<a href="https://aws.amazon.com/jp/about-aws/whats-new/2018/04/amazon-elastiCache-for-redis-introduces-new-cpu-utilization-metric-for-better-visibility-into-redis-workloads/" target="_blank" rel="noopener">こちらの指標</a>を使いましょう。</p><h2 id="2-トランザクションの実現方法"><a href="#2-トランザクションの実現方法" class="headerlink" title="2. トランザクションの実現方法"></a>2. トランザクションの実現方法</h2><p>トランザクション中は、クエリをQueueに溜めます。</p><ul><li>RDBでいうCommitのタイミングでそのクエリを順に(FIFOで)実行します（<code>EXEC</code>）</li><li>RDBでいうRollbackはQueueを取り消すことで実現しています（<code>DISCARD</code>）</li></ul><p>…これも、「あっそうなんだ」と思いますよね。<br>しかしながら、以下の点に注意してください。</p><ul><li><strong>Commit前のデータはRDBと異なり自分のトランザクション中で取得できない</strong><ul><li>Queueに溜めているだけなので、Redisのデータは一切更新されていないです</li><li><code>INCR</code>というValueを+1してその結果をReturnするコマンドがありますが、トランザクション中に実行するとNULLがReturnされます。トランザクションを使わない場合は更新後の値が取得できます</li></ul></li><li><strong>Commitするまで実行されない＝実行順注意</strong><ul><li>例えば、Javaで実装した1~4の作り替え処理で、データが作成されない事象が発生しました。</li></ul></li></ul><p>1．Transaction開始<br>2．Redisのデータを複数DELETE<br>3．Redisのデータを作成（並列処理） ←並列処理でDELETEが入ったQueue以外のQueueが作成<br>4．Transaction終了</p><p>並列処理で新たなQueueが作られた結果、トランザクション終了のタイミングでDELETE処理を含んでいないQueue、DELETE処理を含んでいるQueueを同時に<code>EXEC</code>。同時に動いた結果、3の登録が先に処理されあとで2のDELETEで消されたデータがいたようです。並列化をやめることで解消しました。</p><p>RDBでは都度データを書き換えに行くため、実行順の入替は起こりません。</p><h2 id="3-Hash型はMultiGetできない"><a href="#3-Hash型はMultiGetできない" class="headerlink" title="3. Hash型はMultiGetできない"></a>3. Hash型はMultiGetできない</h2><p>Hash型はKeyの中に複数のFieldとValueを持てるため、RDB慣れしているとついつい使いたくなります。<br>ここに落とし穴があります。</p><p>Hash型はString型のデータと違い複数レコードを一括取得するメソッドが提供されていません。</p><p>複数レコードを取得して表示しようとすると1件ずつループ処理で取得することになり、NWのオーバーヘッドでとたんに遅いという性能問題になりかねません<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><h3 id="回避策"><a href="#回避策" class="headerlink" title="回避策"></a>回避策</h3><p>自分達もハマり、色々悩んだのでいくつか回避策を紹介します。</p><h4 id="3-1-Hashを捨てる！"><a href="#3-1-Hashを捨てる！" class="headerlink" title="3-1. Hashを捨てる！"></a>3-1. Hashを捨てる！</h4><p>潔くHashを捨てます。以下のようにString型で持つことで複数キーを一括で取得する<code>MGET</code>が使えるようになります。Hashとして考えていたまとまりの概念はRedisにアクセスするEntityや、RedisのデータをGETするAPIが吸収すれば、大きな影響はないと思います。</p><figure class="highlight json"><figcaption><span>Hashイメージ.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>: <span class="string">"sales:111"</span>, </span><br><span class="line">  <span class="attr">"value"</span>: &#123;</span><br><span class="line">     <span class="attr">"name"</span>: <span class="string">"REDBULL"</span>,</span><br><span class="line">     <span class="attr">"amount"</span>: <span class="string">"200"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>Hashを捨てたイメージ.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;  <span class="attr">"key"</span>: <span class="string">"sales:111:name"</span>, <span class="attr">"value"</span>: <span class="string">"REDBULL"</span>&#125;</span><br><span class="line">&#123;  <span class="attr">"key"</span>: <span class="string">"sales:111:amount"</span>, <span class="attr">"value"</span>: <span class="string">"200"</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-HashのMultiGetを実装する！"><a href="#3-2-HashのMultiGetを実装する！" class="headerlink" title="3-2. HashのMultiGetを実装する！"></a>3-2. HashのMultiGetを実装する！</h4><p>標準機能ではないようですが、以下2つの方法でHashの一括取得を実装できます。</p><h5 id="実装方法1-Luaスクリプト"><a href="#実装方法1-Luaスクリプト" class="headerlink" title="実装方法1. Luaスクリプト"></a>実装方法1. Luaスクリプト</h5><p>RDBには、複数クエリ実行やIF文・ループ処理などの一連の手続きを一回のクエリでRDB上で実行できるストアドプロシージャやストアドファンクションというものがあります。Luaスクリプトを使えばRedisでもそれと同様のことができます。</p><p>実際にHash型のKeyを一度に複数渡して処理できるスクリプトを作ってみました。試したところ、検証サーバでは1件7msかかってたHGETALLでしたが、10000件一括取得で400msぐらいでデータ取得できました。注意ですが、Luaスクリプトもクエリ処理用のスレッド（シングルスレッド）で動作するため、重い処理は避けるべきです。</p><p>※Javaから実行する方法は<a href="https://blog.kakakikikeke.com/2015/01/javaluaredis.html" target="_blank" rel="noopener">こちら</a>を参考ください。</p><p>luaスクリプト</p><figure class="highlight lua"><figcaption><span>hmgetall.lua</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- param1: hmgetallで取得したいkeyの数 param2~: 取得したいkey（半角スペース区切りで複数可能）</span></span><br><span class="line"><span class="keyword">local</span> result = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, KEYS[<span class="number">1</span>] <span class="keyword">do</span></span><br><span class="line">  result[i] = &#123;<span class="string">'"key"'</span>, KEYS[i+<span class="number">1</span>] ,redis.call(<span class="string">'HGETALL'</span>, KEYS[i + <span class="number">1</span>])&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>使い方</p><figure class="highlight shell"><figcaption><span>hmgetall.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h $&#123;REDIS_HOST&#125; -p $&#123;PORT&#125; --eval ./hmgetall.lua 2 sales:111 sales:222</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Return　Data</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 1) 1) "\"key\""</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#    2) "sales:111"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#    3)  1) "\"name\""</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#        2) "REDBULL"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#        3) "\"amount\""</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#        4) "200"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2) 1) "\"key\""</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#    2) "sales:222"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#    3)  1) "\"name\""</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#        2) "MILK"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#        3) "\"amount\""</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#        4) "165"</span></span></span><br></pre></td></tr></table></figure><h5 id="実装方法2-syncAndReturnAll"><a href="#実装方法2-syncAndReturnAll" class="headerlink" title="実装方法2. syncAndReturnAll"></a>実装方法2. syncAndReturnAll</h5><p>Redisのライブラリによっては、1件ずつ同期的に処理するのではなく、<strong>「Queueに詰めて一括で実行して、その結果をまとめて取得する」ってことができるようです</strong>（JavaはJedisでできることを確認済）。使用する言語でいいライブラリがあればLuaスクリプトよりもこちらの方がよいと思います。</p><p>Queueに詰めた実行順でレスポンスも返ってくるので、Keyとのマッピングもできます。keyがない場合も空のMapが返るのでマッピング順がずれることはないです。<br><a href="http://tool.oschina.net/uploads/apidocs/jedis-2.1.0/redis/clients/jedis/Pipeline.html#syncAndReturnAll%28%29" target="_blank" rel="noopener">http://tool.oschina.net/uploads/apidocs/jedis-2.1.0/redis/clients/jedis/Pipeline.html#syncAndReturnAll%28%29</a></p><figure class="highlight java"><figcaption><span>hMGetAll.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  Jedis jedis = <span class="keyword">new</span> Jedis (host, port );</span><br><span class="line">  Pipeline pipe = jedis.pipelined();</span><br><span class="line">  pipe.hgetAll(<span class="string">"sales:111"</span>);</span><br><span class="line">  pipe.hgetAll(<span class="string">"sales:222"</span>);</span><br><span class="line">  pipe.hgetAll(<span class="string">"sales:NotExist"</span>);</span><br><span class="line">  List&lt;Object&gt; result=  pipe.syncAndReturnAll();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">結果</span></span><br><span class="line"><span class="comment">result= &#123;ArrayList@14772&#125;  size = 3</span></span><br><span class="line"><span class="comment"> 0 = &#123;HashMap@14777&#125;  size = 2</span></span><br><span class="line"><span class="comment">  ""name"" -&gt; "REDBULL"</span></span><br><span class="line"><span class="comment">  ""amount"" -&gt; "200"</span></span><br><span class="line"><span class="comment"> 1 = &#123;HashMap@14778&#125;  size = 2</span></span><br><span class="line"><span class="comment">  ""name"" -&gt; "MILK"</span></span><br><span class="line"><span class="comment">  ""amount"" -&gt; "165"</span></span><br><span class="line"><span class="comment"> 2 = &#123;HashMap@14779&#125;  size = 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="4-KEYSは怖い"><a href="#4-KEYSは怖い" class="headerlink" title="4. KEYSは怖い"></a>4. KEYSは怖い</h2><p>ここで、Redisに登録されたKey一覧を取得する<code>KEYS</code>というコマンドをご紹介します。</p><p>例えば <code>KEYS &quot;sales:*&quot;</code> と実行すれば正規表現（※）でkey検索できます。</p><p>keysの正規表現は機能に制限があり以下だけです。<br>? ・・・ 任意の1文字<br>* ・・・ 任意の文字列<br>[ ] ・・・ 角カッコ内の文字のどれか1文字</p><p>なんとなく便利そうな気、しますよね。</p><p>しかしながら、以下の点に注意してください。</p><ul><li>この<code>KEYS</code>はRDBのINDEXを用いた前方一致での効率的な検索をしません。O(N)となりめっちゃ遅いです<ul><li>計測時は約9百万の中から10件検索するようなクエリで1秒かかりました</li></ul></li><li>その間のRedisはシングルスレッドでクエリ捌くため、他のリクエストを捌けません。ReadもWriteの両方ともさばけません。</li></ul><p>Jedis（Java用ライブラリ）だとデフォルトtimeoutが2秒なので、2，3人がkeysを2発ぐらい実行するとそれだけでtimeoutエラーが出たりします。公式でもWARNINGって書いてます。<a href="https://redis.io/commands/keys" target="_blank" rel="noopener">https://redis.io/commands/keys</a></p><blockquote><p>While the time complexity for this operation is O(N), the constant times are fairly low. For example, Redis running on an entry level laptop can scan a 1 million key database in 40 milliseconds.<br>Warning: consider KEYS as a command that should only be used in production environments with extreme care. It may ruin performance when it is executed against large databases. This command is intended for debugging and special operations, such as changing your keyspace layout. Don’t use KEYS in your regular application code. If you’re looking for a way to find keys in a subset of your keyspace, consider using SCAN or sets.</p></blockquote><br><h3 id="KEYSの代替方法"><a href="#KEYSの代替方法" class="headerlink" title="KEYSの代替方法"></a>KEYSの代替方法</h3><p>「今の設計には<code>KEYS</code>が必要なんだ！」っていうことありますよね。代替方法、そろえてます。<br><br></p><h4 id="RDBから取得"><a href="#RDBから取得" class="headerlink" title="RDBから取得"></a>RDBから取得</h4><p>一定の条件が揃えば使える方法。例えば販売のトランザクションデータはRDBでその日の商品別のサマリデータはRedisという時です。<br>RDBから販売トランや商品マスタを<code>SELECT DISTINCT</code>すれば…<br><br></p><h4 id="Sets型利用"><a href="#Sets型利用" class="headerlink" title="Sets型利用"></a>Sets型利用</h4><p>Redisのデータ型には、Sets型という同じデータは無視する「重複なしリスト型」が存在します。</p><p>これに保持しているKey情報を登録しておくようにします。</p><p>例えば販売のサマリデータを作成・更新する際に、Sets型にデータ追加のコマンド（<code>SADD</code>）を都度発行します。※Redisの登録は高速（Pipeline処理で計測時は0.01ms程度）なので追加の<code>SADD</code>処理の性能影響は無視できるものと考えてます。</p><figure class="highlight shell"><figcaption><span>redis_sets_command.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Sets型のデータ登録</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># データ登録</span></span></span><br><span class="line">redis-cli -h $&#123;REDIS_HOST&#125; -p $&#123;PORT&#125; SADD sales:keys sales:111</span><br><span class="line">redis-cli -h $&#123;REDIS_HOST&#125; -p $&#123;PORT&#125; SADD sales:keys sales:222</span><br><span class="line">redis-cli -h $&#123;REDIS_HOST&#125; -p $&#123;PORT&#125; SADD sales:keys sales:111</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># データ取得</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 全件取得</span></span></span><br><span class="line">redis-cli -h $&#123;REDIS_HOST&#125; -p $&#123;PORT&#125; SMEMBERS sales:keys    #sales:111 とsales:222が返ってくる</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## カーソル的に一定件数ずつ取得することも可能</span></span></span><br><span class="line">redis-cli -h $&#123;REDIS_HOST&#125; -p $&#123;PORT&#125; SSCAN sales:keys 0 COUNT 1000</span><br></pre></td></tr></table></figure><br><h4 id="抜け道：KEYSは使う。負荷を下げる。"><a href="#抜け道：KEYSは使う。負荷を下げる。" class="headerlink" title="抜け道：KEYSは使う。負荷を下げる。"></a>抜け道：KEYSは使う。負荷を下げる。</h4><p>今更変えられないよ！抜け道ないの！？ということでこれも検討しました。<br>設計・実装変えれないときの最終手段に近い位置づけです。最初から選択すべき内容ではないです。</p><br><h5 id="DBを分ける"><a href="#DBを分ける" class="headerlink" title="DBを分ける"></a>DBを分ける</h5><p><code>KEYS</code>の検索対象はRedisの同一DBの範囲に閉じられています。DBを分けて、<code>KEYS</code>の対象減らすことで負荷を下げることができます。ただし、DBごとにスレッドが分かれるわけではないです。別DBへのクエリも同じシングルスレッドで処理されます。<br><br></p><h5 id="参照用レプリカ使用"><a href="#参照用レプリカ使用" class="headerlink" title="参照用レプリカ使用"></a>参照用レプリカ使用</h5><p>DBではなく別インスタンスを使おう、<code>KEYS</code>専用にレプリカ使おうっていう考えです。</p><p>この方法はDB分けとは違い、インスタンスが分かれるので、<code>KEYS</code>実行中にもマスター側でクエリを処理することが可能です。</p><br><h4 id="視点を変える-本当にKEYSが必要？-処理方式を見直そう"><a href="#視点を変える-本当にKEYSが必要？-処理方式を見直そう" class="headerlink" title="視点を変える:本当にKEYSが必要？ ~ 処理方式を見直そう ~"></a>視点を変える:本当にKEYSが必要？ ~ 処理方式を見直そう ~</h4><p>RDB脳だった自分にはなかなか思いつかなかった設計方式を記載しておきます。</p><h5 id="CASE1-Redisは毎日リセットしたい。対象データを一括で消したい。"><a href="#CASE1-Redisは毎日リセットしたい。対象データを一括で消したい。" class="headerlink" title="CASE1: Redisは毎日リセットしたい。対象データを一括で消したい。"></a>CASE1: Redisは毎日リセットしたい。対象データを一括で消したい。</h5><p>一括で消すには、<code>KEYS</code>で一覧取得が必要。なんてとき。</p><ul><li>見直し検討1:flushdbの利用<ul><li>一括で消したい単位でDBを分けておけば、<code>FLUSHDB</code>の1コマンドで削除できます</li></ul></li><li>見直し検討2:データ有効期間の設定<ul><li><code>EXPIRE</code>でデータに有効期限を設定できます。期限切れになると自動削除されます</li></ul></li></ul><h5 id="CASE2-数値を合計するためにKEYSで対象データがほしい。"><a href="#CASE2-数値を合計するためにKEYSで対象データがほしい。" class="headerlink" title="CASE2: 数値を合計するためにKEYSで対象データがほしい。"></a>CASE2: 数値を合計するためにKEYSで対象データがほしい。</h5><p>「店舗商品別データの売上金額」から、「店舗合計の売上金額」を取得するために、該当店舗のkey一覧取得→それぞれのデータをGETしてサマリしよう。なんてとき。</p><p><strong>見直し検討:最初から店舗合計のデータを作成する</strong><br>一括処理（更新・取得）はRDBの得意領域。細かく持って集計してっていうバッチ処理はRDB的考え方です。<br>Redisは数件を書き込む・読み込むことが高速。販売がある度に、店舗別に商品別のデータと、店舗合計のデータを更新すればいいじゃない。Redisの更新は速いので。数値の更新時は<code>INCR</code>を使えば、事前にロックとか考えずに数値を+-できます。</p><br><h2 id="5-おまけ：データ量試算時の注意"><a href="#5-おまけ：データ量試算時の注意" class="headerlink" title="5. おまけ：データ量試算時の注意"></a>5. おまけ：データ量試算時の注意</h2><p><strong>Hash型でデータを持たせた場合、HashのField名も含めることを忘れずに。</strong><br>RDBのテーブルのレコードのイメージでHash型を使うと、うっかりカラム名の試算を忘れがちなので注意です。<br>Valueが数値だったりすると、主にField名で容量喰いますｗ</p><br><h2 id="6-今後試したいこと"><a href="#6-今後試したいこと" class="headerlink" title="6. 今後試したいこと"></a>6. 今後試したいこと</h2><h3 id="Sets型を使ってRedisだけでKey検索も行う"><a href="#Sets型を使ってRedisだけでKey検索も行う" class="headerlink" title="Sets型を使ってRedisだけでKey検索も行う"></a>Sets型を使ってRedisだけでKey検索も行う</h3><p>業務システムでは「条件によって絞り込んで一覧表示する」ということが多いでしょう。</p><p>属性情報を元に該当するKeyを調べるため、RDBのマスタにアクセスすることになるかと思いますが、このKey検索もRedisだけで実現したいという内容です。</p><p>Sets型和集合(Union)、積集合(Intersection)、差集合(Difference)をサポートしてるので、属性情報に応じたKeyの検索も実装できそうです。例えば、飲み物のSets、今日売れたものSetsがあれば、積集合で「今日売れた飲み物」のキー一覧を取得できます。</p><p>…ここまでやるかって内容ですね。</p><h3 id="Hash型で列指向でデータを持たせる。"><a href="#Hash型で列指向でデータを持たせる。" class="headerlink" title="Hash型で列指向でデータを持たせる。"></a>Hash型で列指向でデータを持たせる。</h3><p>ついつい行指向で考えがち。数値情報を扱いたい場合、列指向で持たせると <code>HGETALL</code> で一度にまとめて取得できるので、列指向で持たせる方がいいかもしれません。<br>※<code>HSCAN</code>っていうカーソル的にデータ取得できるコマンドあるぐらいなのでそっちを想定しているのかも。<br>※同じKey内でフィールドの重複許さないので、列指向的な持ち方だとSets型 + String型の要素を足した扱い方ができますね。Sets型のような集合演算はできませんが。</p><h2 id="7-所感"><a href="#7-所感" class="headerlink" title="7. 所感"></a>7. 所感</h2><p>正直、RDBだとこんなの簡単にできるのにーと思うことが多々あり、最初はRedisを嫌いになりかけました。しかしRedisはKVSの中でもかなりRDBの人達に歩み寄ってくれてると感じます（Sets型やHash型はすごく好感持てます）。色々な可能性が見えてきて、今では気になる存在です。</p><p>この記事を読んでRedisを気にする仲間が増えればめちゃ嬉しいですー。</p><h2 id="8-ためになるサイト"><a href="#8-ためになるサイト" class="headerlink" title="8. ためになるサイト"></a>8. ためになるサイト</h2><ul><li>データイメージがわかりやすいサイト：<a href="http://redisgate.jp/redis/command/commands.php" target="_blank" rel="noopener">http://redisgate.jp/redis/command/commands.php</a></li><li>トランザクション：<a href="https://redis-documentasion-japanese.readthedocs.io/ja/latest/topics/transactions.html" target="_blank" rel="noopener">https://redis-documentasion-japanese.readthedocs.io/ja/latest/topics/transactions.html</a></li><li>spring での設定系（記事古め）：<a href="http://fits.hatenablog.com/entry/2015/08/27/205539" target="_blank" rel="noopener">http://fits.hatenablog.com/entry/2015/08/27/205539</a></li><li>RedisサーバのCPU負荷対策パターン：<a href="https://blog.yuuk.io/entry/redis-cpu-load" target="_blank" rel="noopener">https://blog.yuuk.io/entry/redis-cpu-load</a></li><li>Luaスクリプトは書き方ここに載ってます：<a href="https://redis.io/commands/eval" target="_blank" rel="noopener">https://redis.io/commands/eval</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">厳密には、バックグラウンドプロセス等は別スレッドで動くため、完全なシングルスレッドというわけではないです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">検証サーバで計測したときは、1件取得で7ms程度かかりました。1000件取得するとなると7秒かかりますね...</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。初投稿です。&lt;br&gt;2012年新卒入社の竹内です。入社当時を振り返るとOracle10g,11gを良く利用していおり、データモデリングなどテーブル設計が好きで、2018年4月ぐらいまでRDBとバッチに浸ってました。&lt;/p&gt;
&lt;p&gt;さて、現在プロジェクトでRedi
      
    
    </summary>
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="Redis" scheme="https://future-architect.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>初めてのGCPで環境構築してハマったこと</title>
    <link href="https://future-architect.github.io/articles/20190820/"/>
    <id>https://future-architect.github.io/articles/20190820/</id>
    <published>2019-08-20T00:19:49.000Z</published>
    <updated>2019-08-27T15:15:51.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。TIG DXチーム<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属、ゲームとボルダリング好きなエンジニアの椎名@417yskです。</p><p>お仕事でGCP使って環境を構築することがあったのですが、色々とハマることが多かったので供養を兼ねて共有したいと思います。</p><p>当時の私の経験値としては「AWSの一部サービスは触ったことがある」程度でクラウド環境を下地から構築するのは初めての経験でした。一度触ってみれば常識だよねって内容が多いですが、初心者が小石につまずいてもすぐに立ち上れるようになれば幸いです。</p><h1 id="今回構築した環境の概要"><a href="#今回構築した環境の概要" class="headerlink" title="今回構築した環境の概要"></a>今回構築した環境の概要</h1><ul><li>既存のオンプレ環境との共存を前提とし、使えるアドレス範囲もオンプレのNWから払い出し</li><li>オンプレ環境とインターネットVPNでつなぐプロジェクトは1つ（ホストプロジェクト）</li><li>各環境（production、staging・・）は共有VPCで接続（サービスプロジェクト）</li></ul><img src="/images/20190820/photo_20190820_01.png"><p>なお、構築はTerraform, Ansibleで行いました。</p><h1 id="GCPで環境構築してハマったこと"><a href="#GCPで環境構築してハマったこと" class="headerlink" title="GCPで環境構築してハマったこと"></a>GCPで環境構築してハマったこと</h1><p>本編です。<br>カテゴリ別に記載しています。</p><h2 id="1-GKE関連"><a href="#1-GKE関連" class="headerlink" title="1. GKE関連"></a>1. GKE関連</h2><h3 id="1-1-GKEのコア数を増やせない"><a href="#1-1-GKEのコア数を増やせない" class="headerlink" title="1-1. GKEのコア数を増やせない"></a>1-1. GKEのコア数を増やせない</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>アカウントあたりの割り当て上限に達していた。</p><h4 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h4><p>制限変更を依頼することで解消しました。<br>自分が依頼したときは数分で対応してくれましたが、常に数分で対応されるかは定かではありません。<br>サービスインする前は想定されるスケール具合に合わせて事前に拡張しておきましょう。<br>割り当て増加の手順は他の方が書かれていますのでこちらをご参考に。<br><a href="https://qiita.com/mouse2/items/dd136453798804f99de7" target="_blank" rel="noopener">https://qiita.com/mouse2/items/dd136453798804f99de7</a><br><a href="https://cloud.google.com/compute/quotas?hl=ja&amp;_ga=1.181298212.2042940000.1483498197" target="_blank" rel="noopener">https://cloud.google.com/compute/quotas?hl=ja&amp;_ga=1.181298212.2042940000.1483498197</a></p><h3 id="1-2-プライベートGKEクラスタからインターネットアクセスできない"><a href="#1-2-プライベートGKEクラスタからインターネットアクセスできない" class="headerlink" title="1-2. プライベートGKEクラスタからインターネットアクセスできない"></a>1-2. プライベートGKEクラスタからインターネットアクセスできない</h3><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>プライベートクラスタではノード（pod）に外部IPが付与されないため。</p><h4 id="対応-1"><a href="#対応-1" class="headerlink" title="対応"></a>対応</h4><p>CloudNATを設定しNAT経由でインターネットに出るようにしました。<br>今回はシステム要件で外部IPの付与が不可でしたが、外部IPが付与されていれば問題なくインターネットアクセスできます。</p><h3 id="1-3-GKEへのデプロイ時、kubectlコマンドが接続できない"><a href="#1-3-GKEへのデプロイ時、kubectlコマンドが接続できない" class="headerlink" title="1-3. GKEへのデプロイ時、kubectlコマンドが接続できない"></a>1-3. GKEへのデプロイ時、kubectlコマンドが接続できない</h3><h4 id="原因-2"><a href="#原因-2" class="headerlink" title="原因"></a>原因</h4><p>デプロイサーバが外部IPしか持っていなかったため。<br>GKEクラスタはこの時点でプライベートクラスタであった。</p><h4 id="対応-2"><a href="#対応-2" class="headerlink" title="対応"></a>対応</h4><p>システム要件もありデプロイサーバに内部IPを付与し、外部IPを削除しました。<br>その上でGKEクラスタの承認済みネットワークにデプロイサーバの属するサブネットを追加しました。</p><h3 id="1-4-GKEのLBでフロントのIPが固定できない"><a href="#1-4-GKEのLBでフロントのIPが固定できない" class="headerlink" title="1-4. GKEのLBでフロントのIPが固定できない"></a>1-4. GKEのLBでフロントのIPが固定できない</h3><h4 id="事象"><a href="#事象" class="headerlink" title="事象"></a>事象</h4><p>LB作成時にフロントエンドのIPが自動的に割り振られてしまう。</p><h4 id="対応-3"><a href="#対応-3" class="headerlink" title="対応"></a>対応</h4><p>Ingressを利用して意図したIPを割り当てました。<br>詳細は他の方が書かれていますのでこちらをご参考に。<br><a href="https://qiita.com/tinjyuu/items/fd7a97b0b81963dcc7f2" target="_blank" rel="noopener">https://qiita.com/tinjyuu/items/fd7a97b0b81963dcc7f2</a></p><h3 id="1-5-共有VPC上のGKEクラスタのセカンダリCIDR設計"><a href="#1-5-共有VPC上のGKEクラスタのセカンダリCIDR設計" class="headerlink" title="1-5. 共有VPC上のGKEクラスタのセカンダリCIDR設計"></a>1-5. 共有VPC上のGKEクラスタのセカンダリCIDR設計</h3><h4 id="事象-1"><a href="#事象-1" class="headerlink" title="事象"></a>事象</h4><p>オンプレ環境と接続する1つの共有VPC上にproduction, stagingなど複数プロジェクトを相乗りさせる場合、各プロジェクトで利用するセカンダリCIDRの設計が必要。</p><h4 id="対応-4"><a href="#対応-4" class="headerlink" title="対応"></a>対応</h4><p>GKEで必要なセカンダリCIDRを本腰入れて設計しました。<br>スタンダードなこれと言った解はなく、必要な環境数、オンプレ環境から割り当てられたIP範囲から適宜設計する必要があります。<br>ここだけでも1記事くらいのボリュームになりそうなので詳細はまた別途。</p><h3 id="1-6-GKEクラスタが大量に作成できない"><a href="#1-6-GKEクラスタが大量に作成できない" class="headerlink" title="1-6. GKEクラスタが大量に作成できない"></a>1-6. GKEクラスタが大量に作成できない</h3><h4 id="原因-3"><a href="#原因-3" class="headerlink" title="原因"></a>原因</h4><p>利用可能なセカンダリCIDRの上限に掛かるため。<br>共有VPC上にプライベートGKEクラスタを構築するためには、1クラスタあたりに2つのアドレス範囲（pod/service）を割り当てる必要があるが、1サブネット内にセカンダリCIDRは <del>上限5つまで</del> しか作成できない。</p><p>今回、1プロジェクト=1サブネットを共有するという方針であったため、1プロジェクト当たりに2つしかクラスタを作成できなかった。</p><p>(2019/08/28追記)上限が30までに緩和されたようです。</p><blockquote><p>必要に応じて、サブネットごとに最大 30 個のセカンダリ CIDR ブロックを定義できます。このセカンダリ IP 範囲は、エイリアス IP アドレスにのみ使用できます。この上限を引き上げることはできません。<br><a href="https://cloud.google.com/vpc/docs/quota#per_network" target="_blank" rel="noopener">https://cloud.google.com/vpc/docs/quota#per_network</a></p></blockquote><p><a href="https://twitter.com/urasoko" target="_blank" rel="noopener">@urasoko</a>さん、ご指摘ありがとうございます！</p><p>これで、GKEのクラスタ数を増やしたい時も対応できます。</p><h4 id="対応-5"><a href="#対応-5" class="headerlink" title="対応"></a>対応</h4><p>用途に応じてクラスタを分けるのではなく、ノードプールを分ける方針としました。<br>GKEの設計でクラスタを分けるかノードプールを分けるかはしばしば話に挙がりますが、共有VPC上に構築する場合はノードプールを分けるしかないです。</p><h2 id="2-CloudSQL関連"><a href="#2-CloudSQL関連" class="headerlink" title="2. CloudSQL関連"></a>2. CloudSQL関連</h2><h3 id="2-1-CloudSQLのインスタンスが再作成できない"><a href="#2-1-CloudSQLのインスタンスが再作成できない" class="headerlink" title="2-1. CloudSQLのインスタンスが再作成できない"></a>2-1. CloudSQLのインスタンスが再作成できない</h3><h4 id="原因-4"><a href="#原因-4" class="headerlink" title="原因"></a>原因</h4><p>同じインスタンス名は数日間（1週間ほど）は作成できない仕様であったため。</p><h4 id="対応-6"><a href="#対応-6" class="headerlink" title="対応"></a>対応</h4><p>初期構築時は連番やタイムスタンプなどを入れ確実に構築可能なことの保証が取れてから真名で構築することにしました。<br>インスタンス名にタイムスタンプなどを入れてクライアント側の接続情報を変更していく運用も考えましたが、担当した案件では開発に複数社入っていたりする状況もあり諦めました。</p><h3 id="2-2-CloudSQLのアクセス制限"><a href="#2-2-CloudSQLのアクセス制限" class="headerlink" title="2-2. CloudSQLのアクセス制限"></a>2-2. CloudSQLのアクセス制限</h3><h4 id="事象-2"><a href="#事象-2" class="headerlink" title="事象"></a>事象</h4><p>CloudSQLにアクセス可能なインスタンスを同一プロジェクトのインスタンスに絞りたいが、以下の制約がある。</p><ul><li>Firewall Ruleはサブネット単位（今回の構成のプロジェクト単位）で指定できない</li><li>CloudSQLにFirewall Ruleで利用するネットワークタグを設定できない。</li><li>承認済みネットワークにプライベートIPは設定できない</li></ul><h4 id="対応-7"><a href="#対応-7" class="headerlink" title="対応"></a>対応</h4><p>出来上がったCloudSQLのIPを、gcloudで取得して、それをFirewall Ruleに設定しました。なおFirewall Ruleはインスタンスに対して適応されるため、インスタンスからの下りに対して制御をかけることしかできません。</p><p>デフォルトは下りが全てallowされているので、まずはCloudSQLのIP範囲にdenyをかけて、その上で接続するSQLインスタンスのみallowするという対応をしています。<br>Firewall Ruleの話だけで1記事くらいのボリュームになりそうなので詳細はまた別途書きます。</p><h3 id="2-3-CloudSQL-のパスワードが有効では無かった"><a href="#2-3-CloudSQL-のパスワードが有効では無かった" class="headerlink" title="2-3. CloudSQL のパスワードが有効では無かった"></a>2-3. CloudSQL のパスワードが有効では無かった</h3><h4 id="原因-5"><a href="#原因-5" class="headerlink" title="原因"></a>原因</h4><p>Terraformでデプロイしていたが、その定義が不正だったため。<br>後述のサンプルだとインスタンス名が正しく紐づかない。GCPは関係なくTerraformの記述ミスが原因でした。</p><h4 id="対応-8"><a href="#対応-8" class="headerlink" title="対応"></a>対応</h4><p>依存関係があるリソースは、ハードコードで名称を設定しない。<br>${xxxxx}を使用して実際に設定されている名称を取得する。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// インスタンスの作成</span></span><br><span class="line">resource <span class="string">"google_sql_database_instance"</span> <span class="string">"db-instance-test"</span> &#123;</span><br><span class="line">    name = <span class="string">"test-instance"</span></span><br><span class="line">    <span class="comment">/*省略*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// パスワード設定：NGパターン</span></span><br><span class="line">resource <span class="string">"google_sql_user"</span> <span class="string">"test-postgres-user"</span> &#123;</span><br><span class="line">    name = <span class="string">"postgres"</span></span><br><span class="line">    instance = <span class="string">"test-instance"</span></span><br><span class="line">    password = <span class="string">"postgres"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// パスワード設定：OKパターン</span></span><br><span class="line">resource <span class="string">"google_sql_user"</span> <span class="string">"test-postgres-user"</span> &#123;</span><br><span class="line">    name = <span class="string">"postgres"</span></span><br><span class="line">    instance = <span class="string">"$&#123;google_sql_database_instance.db-instance-test.name&#125;"</span></span><br><span class="line">    password = <span class="string">"postgres"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-CloudSqlProxyを使ってSQLインスタンスにつながらない"><a href="#2-4-CloudSqlProxyを使ってSQLインスタンスにつながらない" class="headerlink" title="2-4. CloudSqlProxyを使ってSQLインスタンスにつながらない"></a>2-4. CloudSqlProxyを使ってSQLインスタンスにつながらない</h3><h4 id="原因-6"><a href="#原因-6" class="headerlink" title="原因"></a>原因</h4><p>Cloud SQL Administration APIが有効化されていないため。<br>CloudSqlProxyを使う際は有効化する必要があります。<br><a href="https://cloud.google.com/sql/docs/postgres/connect-external-app?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/sql/docs/postgres/connect-external-app?hl=ja</a></p><h4 id="対応-9"><a href="#対応-9" class="headerlink" title="対応"></a>対応</h4><p>Cloud SQL Administration APIを有効化します。<br>環境の断面が増えてくると、Administration APIの有効化手順が漏れるので、これもちゃんと<a href="https://www.terraform.io/docs/providers/google/r/google_project_services.html" target="_blank" rel="noopener">Terraformで管理</a>することになりました。<br>（※それまでは手動で有効にしていました☠）</p><h3 id="2-5-CloudSQLの接続CIDRが任意のアドレス範囲で作成されてしまった"><a href="#2-5-CloudSQLの接続CIDRが任意のアドレス範囲で作成されてしまった" class="headerlink" title="2-5. CloudSQLの接続CIDRが任意のアドレス範囲で作成されてしまった"></a>2-5. CloudSQLの接続CIDRが任意のアドレス範囲で作成されてしまった</h3><h4 id="原因-7"><a href="#原因-7" class="headerlink" title="原因"></a>原因</h4><p>IPアドレスの設計前にCloudSQLのインスタンスを立てて検証していたため初期構築時にCIDRの割り当てを明確に行っていなかった。</p><h4 id="対応-10"><a href="#対応-10" class="headerlink" title="対応"></a>対応</h4><p>GCPのSREチーム（米国）へ変更対応を依頼しました（ちょうどクリスマスシーズンだったので大変でした）。2019年1月時点では、このCIDRは一度設定するとGUIやコマンドで変更できないため依頼する必要がありました。<br><del>共有VPCの環境でCloudSQLのアドレス範囲を明示的に定めたい場合は注意しましょう。</del></p><p>(2019/08/28追記) 2019年4月以降は <code>gcloud services vpc-peerings update</code> コマンドで更新できるそうです。<br><a href="https://issuetracker.google.com/issues/118849070" target="_blank" rel="noopener">https://issuetracker.google.com/issues/118849070</a></p><p>これからは、わざわざサポートに連絡を取る必要はありません！間違っても比較的気軽にやり直せるようになったのは嬉しいですね。</p><h3 id="2-6-GCEからCloudSQLへ接続ができない"><a href="#2-6-GCEからCloudSQLへ接続ができない" class="headerlink" title="2-6. GCEからCloudSQLへ接続ができない"></a>2-6. GCEからCloudSQLへ接続ができない</h3><h4 id="原因-8"><a href="#原因-8" class="headerlink" title="原因"></a>原因</h4><p>GCEインスタンスには内部IPのみで外部IPが付与されておらず、SQLインスタンスには外部IPのみで内部IPを付与していなかった（β版のため）。<br>SQL Proxyが上手いことやってくれると淡い期待をしたがダメであった。</p><h4 id="対応-11"><a href="#対応-11" class="headerlink" title="対応"></a>対応</h4><p>他のシステム要件からCloudSQLに内部IPを付与しました</p><h2 id="3-LB関連"><a href="#3-LB関連" class="headerlink" title="3. LB関連"></a>3. LB関連</h2><h3 id="3-1-Internal-特定の通信においてInternal-LBで負荷分散されない"><a href="#3-1-Internal-特定の通信においてInternal-LBで負荷分散されない" class="headerlink" title="3-1. Internal 特定の通信においてInternal LBで負荷分散されない"></a>3-1. Internal 特定の通信においてInternal LBで負荷分散されない</h3><h4 id="原因-9"><a href="#原因-9" class="headerlink" title="原因"></a>原因</h4><p>コネクションを貼って通信していたため。<br>Internal LBでセッションアフィニティをOFFにしてもコネクション貼って通信するものはコネクション貼ったバックエンドに流れる仕様であった。</p><p>※参考<br><a href="https://cloud.google.com/load-balancing/docs/backend-service?hl=ja&amp;_ga=2.47555939.-570213192.1545967516" target="_blank" rel="noopener">https://cloud.google.com/load-balancing/docs/backend-service?hl=ja&amp;_ga=2.47555939.-570213192.1545967516</a><br><a href="https://cloud.google.com/compute/docs/reference/rest/v1/backendServices?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/compute/docs/reference/rest/v1/backendServices?hl=ja</a></p><h4 id="対応-12"><a href="#対応-12" class="headerlink" title="対応"></a>対応</h4><p>クライアント側で定期的にコネクションを貼りなおすようにした。<br>大量のクライアントがいる処理であれば正常時はコネクションを貼る時点で後ろのノードは分散されれるので問題ないですが、ノード障害で別ノードとコネクション貼ってしまうとノード復旧時に再度振り分けられなくなってしまうのを回避するためです。</p><h3 id="3-2-Internal-LBのヘルスチェックが通らない"><a href="#3-2-Internal-LBのヘルスチェックが通らない" class="headerlink" title="3-2. Internal LBのヘルスチェックが通らない"></a>3-2. Internal LBのヘルスチェックが通らない</h3><h4 id="原因-10"><a href="#原因-10" class="headerlink" title="原因"></a>原因</h4><p>Internal LBのヘルスチェックが「130.211.0.0/22」と「35.191.0.0/16」 内のアドレスから送信されるため。<br>これらの接続を許可するようにFirewall Ruleを設定する必要があった。</p><h4 id="対応-13"><a href="#対応-13" class="headerlink" title="対応"></a>対応</h4><p>ヘルスチェックの通信元のIPに対して通信を許可するようにファイアウォールルールを追加しました。</p><h2 id="4-GCPプロジェクト"><a href="#4-GCPプロジェクト" class="headerlink" title="4. GCPプロジェクト"></a>4. GCPプロジェクト</h2><h3 id="4-1-新規に環境構築できない"><a href="#4-1-新規に環境構築できない" class="headerlink" title="4-1. 新規に環境構築できない"></a>4-1. 新規に環境構築できない</h3><h4 id="原因-11"><a href="#原因-11" class="headerlink" title="原因"></a>原因</h4><p>課金プロジェクトの作成数に限りがあったため</p><h4 id="対応-14"><a href="#対応-14" class="headerlink" title="対応"></a>対応</h4><p>サポートに連絡して上限を上げてもらった。<br>コア数の上限同様に事前に確認すべきでした。</p><h3 id="4-2-プロジェクトID-名を指定してリソースにアクセスできない。"><a href="#4-2-プロジェクトID-名を指定してリソースにアクセスできない。" class="headerlink" title="4-2. プロジェクトID/名を指定してリソースにアクセスできない。"></a>4-2. プロジェクトID/名を指定してリソースにアクセスできない。</h3><h4 id="原因-12"><a href="#原因-12" class="headerlink" title="原因"></a>原因</h4><p>プロジェクトID＝プロジェクト名を前提としてリソースにアクセスしていたが、プロジェクトIDとプロジェクト名が異なっていた。</p><h4 id="対応-15"><a href="#対応-15" class="headerlink" title="対応"></a>対応</h4><p>プロジェクトIDとプロジェクト名を同じに変更しました。<br>特に制約が無ければ同じにしておいた方がハマりどころ減ります。</p><h3 id="4-3-突然CloudSQLやGKEにアクセスできなくなった。"><a href="#4-3-突然CloudSQLやGKEにアクセスできなくなった。" class="headerlink" title="4-3. 突然CloudSQLやGKEにアクセスできなくなった。"></a>4-3. 突然CloudSQLやGKEにアクセスできなくなった。</h3><h4 id="原因-13"><a href="#原因-13" class="headerlink" title="原因"></a>原因</h4><p>アカウントが有効なクレジットと紐付いていなかった(!!!)。<br>最初は無料利用枠で動いてしまうため、構築して数日後に発覚した。</p><h4 id="対応-16"><a href="#対応-16" class="headerlink" title="対応"></a>対応</h4><p>アカウントを有効なクレジットと紐付けた。<br>プロジェクト構築時のオペレーションとして手順化した。</p><h2 id="5-踏み台"><a href="#5-踏み台" class="headerlink" title="5. 踏み台"></a>5. 踏み台</h2><h3 id="5-1-踏み台サーバにsshで接続できない"><a href="#5-1-踏み台サーバにsshで接続できない" class="headerlink" title="5-1. 踏み台サーバにsshで接続できない"></a>5-1. 踏み台サーバにsshで接続できない</h3><h4 id="原因-14"><a href="#原因-14" class="headerlink" title="原因"></a>原因</h4><p>IAMの権限不足。<br>「編集者」をベースとしたカスタム権限を作成していたが、GCEのログイン権限が継承されていなかった。</p><h4 id="対応-17"><a href="#対応-17" class="headerlink" title="対応"></a>対応</h4><p>IAMに「編集者」を直接付与する形式に変更。<br>アクセスするメンバーが限られていたため、カスタム権限で細かく制御は不要と判断しました。</p><h3 id="5-2-どの環境の踏み台サーバで作業しているか分からない"><a href="#5-2-どの環境の踏み台サーバで作業しているか分からない" class="headerlink" title="5-2. どの環境の踏み台サーバで作業しているか分からない"></a>5-2. どの環境の踏み台サーバで作業しているか分からない</h3><h4 id="原因-15"><a href="#原因-15" class="headerlink" title="原因"></a>原因</h4><p>踏み台サーバのインスタンス名が全ての環境（productionとかstagingとか）で同一のため。<br>CloudShellだとURL部分にPJ名が出るので判断可能であるがsshのターミナルツールによっては判別できない。</p><h4 id="対応-18"><a href="#対応-18" class="headerlink" title="対応"></a>対応</h4><p>踏み台にはインスタンス名に環境名を付与した。<br>命名規約上他のインスタンスに対して環境名を付けないとしても、実際にログインして作業することが多い踏み台だけは付けてあげた方が優しいです。</p><h2 id="6-その他"><a href="#6-その他" class="headerlink" title="6. その他"></a>6. その他</h2><h3 id="6-1-共有VPC設定ができない"><a href="#6-1-共有VPC設定ができない" class="headerlink" title="6-1. 共有VPC設定ができない"></a>6-1. 共有VPC設定ができない</h3><h4 id="原因-16"><a href="#原因-16" class="headerlink" title="原因"></a>原因</h4><p>共有VPCを設定するためには「共有 VPC 管理者」権限が必要であったが権限がなかった。<br><a href="https://cloud.google.com/vpc/docs/provisioning-shared-vpc#nominating_shared_vpc_admins_for_the_organization" target="_blank" rel="noopener">https://cloud.google.com/vpc/docs/provisioning-shared-vpc#nominating_shared_vpc_admins_for_the_organization</a><br>更には「共有 VPC 管理者」を付与するために「組織管理者」権限が必要であるが、構築メンバーが誰も権限を持っていなかった。</p><h4 id="対応-19"><a href="#対応-19" class="headerlink" title="対応"></a>対応</h4><p>「組織管理者」権限は契約者しか権限持っていなかったため依頼して操作ユーザに対して「組織管理者」権限を付与し、その上で「共有 VPC 管理者」を付与しました。</p><h3 id="6-2-特定アプリケーションのインストールができない"><a href="#6-2-特定アプリケーションのインストールができない" class="headerlink" title="6-2. 特定アプリケーションのインストールができない"></a>6-2. 特定アプリケーションのインストールができない</h3><h4 id="原因-17"><a href="#原因-17" class="headerlink" title="原因"></a>原因</h4><p>外部サイトへアクティベーションが必要であったが外部IPが無く接続できなかったため。</p><h4 id="対応-20"><a href="#対応-20" class="headerlink" title="対応"></a>対応</h4><p>一時的に外部IPを付与してインストールを行った。<br>※前述のCloudNAT導入前だったためこのような対応しています。<br>※CloudNAT導入後であれば問題なく出来たと思われます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ここまでお疲れ様でした。<br>忙しい人向けに、全体通してのまとめです。</p><ul><li>全体的にネットワーク、権限周りがハマりどころ多かった。</li><li>GKEは共有VPC、ネットワークの制約によるハマりどころが多かった。</li><li>逆にこの辺りがすんなりいけば簡単に環境作れる感じがした。</li><li>GCP、ネットワーク知識いらないって聞いてた（自分だけ？）けど結構必要。</li><li>オンプレ環境と密な構成は難易度が跳ね上がる。</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして。TIG DXチーム&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnot
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>はじめてのTerraform 0.12 ～実践編～</title>
    <link href="https://future-architect.github.io/articles/20190819/"/>
    <id>https://future-architect.github.io/articles/20190819/</id>
    <published>2019-08-18T22:32:16.000Z</published>
    <updated>2019-08-19T02:25:21.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちはー<br>TIG DXチーム<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>のゆるふわエンジニアの前原です。</p><p>前回の<a href="https://future-architect.github.io/articles/20190816/">はじめてのTerraform 0.12 ～環境構築～</a>に続き実践編です。実際の構築を通して、最近バージョンアップしたTerraform 0.12の構文がこんな感じで変わったよー的な話を伝えていければと思っています。</p><p>では、Terraformを用いてAWSのリソースを作成していきましょう。</p><h1 id="構築する環境構成図"><a href="#構築する環境構成図" class="headerlink" title="構築する環境構成図"></a>構築する環境構成図</h1><p>下図の環境(VPC, VPC Endpoint, NAT Gatewayなど)をTerraformで構築していきます。</p><img src="/images/20190819/photo_20190819_01.jpeg"><ul><li>VPC</li></ul><p>VPCは、Staging（stg）とProduction（prd）に二つのVPCを構成します。AZ（Availability Zone）は3つのゾーンを利用し、サブネットはパブリックとプライベートに分けて構成します。</p><ul><li>VPC Endpoint</li></ul><p>Endpointとして、S3をセットします。</p><ul><li>NAT Gateway</li></ul><p>パブリックプライベートにNAT Gatewayを構築します。コストを抑えるために1台とします。</p><h1 id="Terraformのディレクトリ構成"><a href="#Terraformのディレクトリ構成" class="headerlink" title="Terraformのディレクトリ構成"></a>Terraformのディレクトリ構成</h1><p>最終的に以下のディレクトリ構成になります。前回の記事でお伝えしたように、1つのディレクトリにtfファイルを配置する設計にします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── backend.tf  // 前回の記事で説明</span><br><span class="line">├── provider.tf // 同上 </span><br><span class="line">├── versions.tf // 同上</span><br><span class="line">|</span><br><span class="line">├── eip.tf</span><br><span class="line">├── igw.tf</span><br><span class="line">├── nat_gateway.tf</span><br><span class="line">├── route.tf</span><br><span class="line">├── route_association.tf</span><br><span class="line">├── route_table.tf</span><br><span class="line">├── subnet.tf</span><br><span class="line">├── variable.tf</span><br><span class="line">├── vpc.tf</span><br><span class="line">└── vpc_endpoint.tf</span><br></pre></td></tr></table></figure><h1 id="VPCの構築"><a href="#VPCの構築" class="headerlink" title="VPCの構築"></a>VPCの構築</h1><p>ここでは前回の記事で作成した<code>backend.tf</code>など以外のtfファイルを作成します。<br>基本的にリソース単位でファイルを分けておりますが、好みでひとまとめにしても問題ありません。</p><h2 id="VPCリソースの定義"><a href="#VPCリソースの定義" class="headerlink" title="VPCリソースの定義"></a>VPCリソースの定義</h2><p>VPCを構築するためのVPCリソースを定義します。<br>このリソースで必須の項目は、<code>cidr_block</code>のみですが、タグを付与したいため記述します。</p><figure class="highlight bash"><figcaption><span>vpc.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_vpc"</span> <span class="string">"vpc"</span> &#123;</span><br><span class="line">  cidr_block = local.vpc_cidr[terraform.workspace]</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = local.project_name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vpc.tf</code>は、ローカル変数を呼び出しているので、以下のように<code>variable.tf</code>に定義する必要があります。<br>また、<code>variable.tf</code>は、変数を定義するため今後も追記していきますので、これが最終的な内容でありませんのでご注意ください。</p><figure class="highlight bash"><figcaption><span>variable.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  project_name = <span class="string">"example"</span></span><br><span class="line"></span><br><span class="line">  vpc_cidr = &#123;</span><br><span class="line">    stg = <span class="string">"10.0.0.0/16"</span></span><br><span class="line">    prd = <span class="string">"10.1.0.0/16"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>準備ができたのでTerraformを実行します。<br>が、実行する前に構文や設定に問題がないかを確認するためのコマンドを実行します。</p><h3 id="terraform-validate"><a href="#terraform-validate" class="headerlink" title="terraform validate"></a>terraform validate</h3><p>構文に問題ないかを<code>validate</code>コマンドで確認します。<br>問題なければ<code>Success</code>と出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform validate</span><br><span class="line">Success! The configuration is valid.</span><br></pre></td></tr></table></figure><h3 id="terraform-fmt"><a href="#terraform-fmt" class="headerlink" title="terraform fmt"></a>terraform fmt</h3><p>次に<code>terraform fmt</code>というインデントなどのスタイルを揃えるコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform fmt</span><br></pre></td></tr></table></figure><h3 id="terraform-plan"><a href="#terraform-plan" class="headerlink" title="terraform plan"></a>terraform plan</h3><p>それでは、設定に問題ないかを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan</span><br><span class="line">Refreshing Terraform state <span class="keyword">in</span>-memory prior to plan...</span><br><span class="line">The refreshed state will be used to calculate this plan, but will not be</span><br><span class="line">persisted to <span class="built_in">local</span> or remote state storage.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">An execution plan has been generated and is shown below.</span><br><span class="line">Resource actions are indicated with the following symbols:</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># aws_vpc.vpc will be created</span></span><br><span class="line">  + resource <span class="string">"aws_vpc"</span> <span class="string">"vpc"</span> &#123;</span><br><span class="line">      + arn                              = (known after apply)</span><br><span class="line">      + assign_generated_ipv6_cidr_block = <span class="literal">false</span></span><br><span class="line">      + cidr_block                       = <span class="string">"10.0.0.0/16"</span></span><br><span class="line">      + default_network_acl_id           = (known after apply)</span><br><span class="line">      + default_route_table_id           = (known after apply)</span><br><span class="line">      + default_security_group_id        = (known after apply)</span><br><span class="line">      + dhcp_options_id                  = (known after apply)</span><br><span class="line">      + enable_classiclink               = (known after apply)</span><br><span class="line">      + enable_classiclink_dns_support   = (known after apply)</span><br><span class="line">      + enable_dns_hostnames             = (known after apply)</span><br><span class="line">      + enable_dns_support               = <span class="literal">true</span></span><br><span class="line">      + id                               = (known after apply)</span><br><span class="line">      + instance_tenancy                 = <span class="string">"default"</span></span><br><span class="line">      + ipv6_association_id              = (known after apply)</span><br><span class="line">      + ipv6_cidr_block                  = (known after apply)</span><br><span class="line">      + main_route_table_id              = (known after apply)</span><br><span class="line">      + owner_id                         = (known after apply)</span><br><span class="line">      + tags                             = &#123;</span><br><span class="line">          + <span class="string">"Env"</span>     = <span class="string">"stg"</span></span><br><span class="line">          + <span class="string">"Name"</span>    = <span class="string">"stg-example"</span></span><br><span class="line">          + <span class="string">"Project"</span> = <span class="string">"example"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Note: You didn<span class="string">'t specify an "-out" parameter to save this plan, so Terraform</span></span><br><span class="line"><span class="string">can'</span>t guarantee that exactly these actions will be performed <span class="keyword">if</span></span><br><span class="line"><span class="string">"terraform apply"</span> is subsequently run.</span><br></pre></td></tr></table></figure><h3 id="terraform-apply"><a href="#terraform-apply" class="headerlink" title="terraform apply"></a>terraform apply</h3><p>最後に<code>apply</code>を実行し、<code>Apply complete!</code>と出力されたら完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply</span><br><span class="line"><span class="comment">### 以下の質問が出力されるので`yes`を入力</span></span><br><span class="line">  Enter a value: yes</span><br><span class="line">aws_vpc.vpc: Creating...</span><br><span class="line">aws_vpc.vpc: Creation complete after 9s [id=vpc-0f1c8121f72d84ee9]</span><br><span class="line"></span><br><span class="line">Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span><br></pre></td></tr></table></figure><h2 id="ちょっとした解説①"><a href="#ちょっとした解説①" class="headerlink" title="ちょっとした解説①"></a>ちょっとした解説①</h2><p>ここでは上記で説明できていない部分について解説します。</p><h3 id="Workspace"><a href="#Workspace" class="headerlink" title="Workspace"></a>Workspace</h3><p><code>vpc.tf</code>で記述されていた<code>${terraform.workspace}</code>についてですが、これはWorkspaceの環境名を割り当てるための変数です。<br>そのため、今回の実行結果を見るとタグに指定した値に<code>stg</code>と入っていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### terraform apply結果の抜粋</span></span><br><span class="line">      + tags                             = &#123;</span><br><span class="line">          + <span class="string">"Env"</span>     = <span class="string">"stg"</span></span><br><span class="line">          + <span class="string">"Name"</span>    = <span class="string">"stg-example"</span></span><br><span class="line">          + <span class="string">"Project"</span> = <span class="string">"example"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>また、<code>cidr_block</code>には、<code>10.0.0.0/24</code>のネットワークアドレスが入っていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ cidr_block                       = <span class="string">"10.0.0.0/16"</span></span><br></pre></td></tr></table></figure><p>これは、Workspaceによって値が変わる部分のため、以下のように二つ定義をしています。<br>そのため、<code>vpc.tf</code>で呼び出すときは、<code>terraform.workspace</code>を利用します。</p><figure class="highlight bash"><figcaption><span>variable.tf（抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  project_name = <span class="string">"example"</span></span><br><span class="line"></span><br><span class="line">  vpc_cidr = &#123;</span><br><span class="line">    stg = <span class="string">"10.0.0.0/16"</span></span><br><span class="line">    prd = <span class="string">"10.1.0.0/16"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Local変数"><a href="#Local変数" class="headerlink" title="Local変数"></a>Local変数</h3><p>タグの<code>project</code>には、<code>example</code>という文字列が入っております。<br>これは、<code>variable.tf</code>で定義したローカル変数が割り当てられています。</p><figure class="highlight bash"><figcaption><span>vpc.tf（抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Project = local.project_name</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>variable.tf（抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  project_name = <span class="string">"example"</span></span><br></pre></td></tr></table></figure><p>ネットで調べているとVariable変数を使うケースをよく見かけることがあるかと思います。<br>しかし、個人的には、変数の組み込みやコマンド時の変数挿入などを防ぐことができるため、<code>Local変数</code>を利用しています。</p><h1 id="SubnetやNAT-Gatewayなどの構築"><a href="#SubnetやNAT-Gatewayなどの構築" class="headerlink" title="SubnetやNAT Gatewayなどの構築"></a>SubnetやNAT Gatewayなどの構築</h1><p>続いて、残りのリソースも作成していきます</p><h2 id="Subnet"><a href="#Subnet" class="headerlink" title="Subnet"></a>Subnet</h2><p>パブリックサブネットとプライベートサブネットを合計で6つ作成します。<br>以下のtfファイルを作成します。</p><figure class="highlight bash"><figcaption><span>subnet.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_subnet"</span> <span class="string">"public_subnet"</span> &#123;</span><br><span class="line">  for_each          = local.subnet_numbers</span><br><span class="line">  vpc_id            = aws_vpc.vpc.id</span><br><span class="line">  availability_zone = each.key</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.vpc.cidr_block, 8, each.value)</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-private"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = local.project_name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_subnet"</span> <span class="string">"private_subnet"</span> &#123;</span><br><span class="line">  for_each          = local.subnet_numbers</span><br><span class="line">  vpc_id            = aws_vpc.vpc.id</span><br><span class="line">  availability_zone = each.key</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.vpc.cidr_block, 8, each.value + 3)</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-private"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = local.project_name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Internet-Gatewayとルートテーブル"><a href="#Internet-Gatewayとルートテーブル" class="headerlink" title="Internet Gatewayとルートテーブル"></a>Internet Gatewayとルートテーブル</h2><p>Internet Gatewayを作成します。</p><figure class="highlight bash"><figcaption><span>igw.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_internet_gateway"</span> <span class="string">"igw"</span> &#123;</span><br><span class="line">  vpc_id = aws_vpc.vpc.id</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = local.project_name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ルートテーブルを作成します。</p><figure class="highlight bash"><figcaption><span>route_table.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_route_table"</span> <span class="string">"public"</span> &#123;</span><br><span class="line">  vpc_id = aws_vpc.vpc.id</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-public"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = local.project_name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_route_table"</span> <span class="string">"private"</span> &#123;</span><br><span class="line">  vpc_id = aws_vpc.vpc.id</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-private"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = local.project_name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>パブリックサブネットとプライベートサブネットをルートテーブルに紐付けます。</p><figure class="highlight bash"><figcaption><span>route_association.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_route_table_association"</span> <span class="string">"public"</span> &#123;</span><br><span class="line">  for_each       = local.subnet_numbers</span><br><span class="line">  subnet_id      = aws_subnet.public_subnet[each.key].id</span><br><span class="line">  route_table_id = aws_route_table.public.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_route_table_association"</span> <span class="string">"private"</span> &#123;</span><br><span class="line">  for_each       = local.subnet_numbers</span><br><span class="line">  subnet_id      = aws_subnet.private_subnet[each.key].id</span><br><span class="line">  route_table_id = aws_route_table.private.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ルーティングを定義します。</p><ul><li>パブリックサブネットから<code>0.0.0.0/0</code>にアクセスする場合は、<code>Internet Gatewat</code>への向き先を指定</li><li>プライベートサブネットから<code>0.0.0.0/0</code>にアクセスする場合は、<code>NAT Gatewat</code>への向き先を指定</li></ul><figure class="highlight bash"><figcaption><span>route.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_route"</span> <span class="string">"public"</span> &#123;</span><br><span class="line">  route_table_id         = aws_route_table.public.id</span><br><span class="line">  gateway_id             = aws_internet_gateway.igw.id</span><br><span class="line">  destination_cidr_block = <span class="string">"0.0.0.0/0"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_route"</span> <span class="string">"private"</span> &#123;</span><br><span class="line">  route_table_id         = aws_route_table.private.id</span><br><span class="line">  gateway_id             = aws_nat_gateway.nat_gateway.id</span><br><span class="line">  destination_cidr_block = <span class="string">"0.0.0.0/0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NAT-Gateway"><a href="#NAT-Gateway" class="headerlink" title="NAT Gateway"></a>NAT Gateway</h3><p>パブリックサブネットに<code>NAT Gateway</code>を１台構築します。<br>NAT Gatewayは、固定グローバルIPをアタッチする必要があるので<code>EIP</code>を作成します。<br>また、各サブネットに対してのルートテーブルも定義します。</p><figure class="highlight bash"><figcaption><span>nat_gateway.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_nat_gateway"</span> <span class="string">"nat_gateway"</span> &#123;</span><br><span class="line">  allocation_id = aws_eip.nat_gateway.id</span><br><span class="line">  subnet_id     = aws_subnet.public_subnet[<span class="string">"ap-southeast-2a"</span>].id</span><br><span class="line">  depends_on    = [aws_internet_gateway.igw]</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = local.project_name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>eip.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_eip"</span> <span class="string">"nat_gateway"</span> &#123;</span><br><span class="line">  vpc        = <span class="literal">true</span></span><br><span class="line">  depends_on = [aws_internet_gateway.igw]</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-nat"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = local.project_name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="S3-Endpoint"><a href="#S3-Endpoint" class="headerlink" title="S3 Endpoint"></a>S3 Endpoint</h2><p>S3 Endpointを作成します。</p><figure class="highlight bash"><figcaption><span>vpc_endpoint.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_vpc_endpoint"</span> <span class="string">"s3"</span> &#123;</span><br><span class="line">  vpc_id       = aws_vpc.vpc.id</span><br><span class="line">  service_name = <span class="string">"com.amazonaws.<span class="variable">$&#123;local.region&#125;</span>.s3"</span></span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>-s3"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = local.project_name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_vpc_endpoint_route_table_association"</span> <span class="string">"private_s3"</span> &#123;</span><br><span class="line">  vpc_endpoint_id = aws_vpc_endpoint.s3.id</span><br><span class="line">  route_table_id  = aws_route_table.private.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>現在利用しているリージョンをデータリソースから取得し、ローカル変数で定義しています。</p><figure class="highlight bash"><figcaption><span>variable（抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data <span class="string">"aws_region"</span> <span class="string">"current"</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">locals &#123;</span><br><span class="line">  region       = data.aws_region.current.name</span><br></pre></td></tr></table></figure><h2 id="ちょっとした解説②"><a href="#ちょっとした解説②" class="headerlink" title="ちょっとした解説②"></a>ちょっとした解説②</h2><h3 id="リソースの参照"><a href="#リソースの参照" class="headerlink" title="リソースの参照"></a>リソースの参照</h3><p>以下は、先ほど作成したvpcの<code>id</code>を取得するための構文です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vpc_id            = aws_vpc.vpc.id</span><br></pre></td></tr></table></figure><h3 id="cidrsubnet"><a href="#cidrsubnet" class="headerlink" title="cidrsubnet"></a>cidrsubnet</h3><p>本記事のサブネットは、以下のレンジで作成しています。</p><ul><li>Public Subnetework<ul><li>10.0.0.0/24</li><li>10.0.1.0/24</li><li>10.0.2.0/24</li></ul></li><li>Private subnetwork<ul><li>10.0.3.0/24</li><li>10.0.4.0/24</li><li>10.0.5.0/24</li></ul></li></ul><p>そこで役に立つのが、<a href="https://www.terraform.io/docs/configuration/functions/cidrsubnet.html" target="_blank" rel="noopener">cidrsubnet Function</a>です。<br><code>cidrsubnet</code>は、以下のように3つの引数を持つ関数で、IPレンジをいい感じに分割してくれます。</p><blockquote><p>cidrsubnet(prefix, newbits, netnum)</p></blockquote><p>今回のケースで、値を割り当てると以下のかたちになります。</p><ul><li>prefix: 10.0.0.0/16</li><li>newbits: 8</li><li>netnum: 0（ここはcountでインクリメントされる）</li></ul><p>具体的にどう変換されるかを<code>terraform console</code>で確認してみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ terraform console</span><br><span class="line">&gt; cidrsubnet(<span class="string">"10.0.0.0/16"</span>, 8, 0)</span><br><span class="line">10.0.0.0/24</span><br><span class="line">&gt; cidrsubnet(<span class="string">"10.0.0.0/16"</span>, 8, 1)</span><br><span class="line">10.0.1.0/24</span><br></pre></td></tr></table></figure><p>このようにサブネットの結果が不安な場合は、<code>terraform console</code>を利用すると捗ります。</p><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h3><p>NAT GatewayとEIPは、Internet Gatewayに依存しています。<br>そこで、<code>depends_on</code>を記述することで明示的に依存関係を記すことで、先にInternet Gatewayを構築し、その後にEIPとNAT Gatewayを構築するという流れを確立できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">depends_on = [aws_internet_gateway.igw]</span><br></pre></td></tr></table></figure><h1 id="Production-環境の構築"><a href="#Production-環境の構築" class="headerlink" title="Production 環境の構築"></a>Production 環境の構築</h1><p>コードの変更は不要です。<br>Workspaceの<code>prd</code>に切り替えて<code>terraform apply</code>するだけです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace selece prd</span><br><span class="line">$ terraform plan</span><br><span class="line">$ terraform apply</span><br></pre></td></tr></table></figure><p>めっちゃ簡単ですね！</p><p>ここまででVPCの構築が完了しました。</p><h1 id="最終的なVariable-tf"><a href="#最終的なVariable-tf" class="headerlink" title="最終的なVariable.tf"></a>最終的なVariable.tf</h1><p>本記事で作成した<code>variable.tf</code>です。</p><figure class="highlight bash"><figcaption><span>variable.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">data <span class="string">"aws_region"</span> <span class="string">"current"</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">locals &#123;</span><br><span class="line">  project_name = <span class="string">"example"</span></span><br><span class="line">  region       = data.aws_region.current.name</span><br><span class="line"></span><br><span class="line">  vpc_cidr = &#123;</span><br><span class="line">    stg = <span class="string">"10.0.0.0/16"</span></span><br><span class="line">    prd = <span class="string">"10.1.0.0/16"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  subnet_numbers = &#123;</span><br><span class="line">    <span class="string">"ap-southeast-2a"</span> = 0</span><br><span class="line">    <span class="string">"ap-southeast-2b"</span> = 1</span><br><span class="line">    <span class="string">"ap-southeast-2c"</span> = 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Terraform-0-12-変更点"><a href="#Terraform-0-12-変更点" class="headerlink" title="Terraform 0.12 変更点"></a>Terraform 0.12 変更点</h1><p>この章では、Terraform 0.12とそれ以前での変更点をまとめていきます。</p><h3 id="面倒だったブロックが不要になったよ"><a href="#面倒だったブロックが不要になったよ" class="headerlink" title="面倒だったブロックが不要になったよ"></a>面倒だったブロックが不要になったよ</h3><p>ブロックやダブルクォーテーション（<code>&quot;${}&quot;</code>）で囲う必要がなくなりました。<br>ただし、変数同士を繋いで表現する場合（NameやEnv）は、囲う必要があります（tagの部分）</p><h3 id="Terraform-0-11系"><a href="#Terraform-0-11系" class="headerlink" title="Terraform 0.11系"></a>Terraform 0.11系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_vpc"</span> <span class="string">"vpc"</span> &#123;</span><br><span class="line">  cidr_block = <span class="string">"<span class="variable">$&#123;local.vpc_cidr[terraform.workspace]&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = <span class="string">"<span class="variable">$&#123;local.project_name&#125;</span>"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Terraform-0-12系"><a href="#Terraform-0-12系" class="headerlink" title="Terraform 0.12系"></a>Terraform 0.12系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_vpc"</span> <span class="string">"vpc"</span> &#123;</span><br><span class="line">  cidr_block = local.vpc_cidr[terraform.workspace]</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name    = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>-<span class="variable">$&#123;local.project_name&#125;</span>"</span></span><br><span class="line">    Env     = <span class="string">"<span class="variable">$&#123;terraform.workspace&#125;</span>"</span></span><br><span class="line">    Project = <span class="string">"<span class="variable">$&#123;local.project_name&#125;</span>"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="無口なValidateが返信してくれるようになった"><a href="#無口なValidateが返信してくれるようになった" class="headerlink" title="無口なValidateが返信してくれるようになった"></a>無口なValidateが返信してくれるようになった</h3><p><code>terraform validate</code>を実行すると<code>Success!</code>って、反応が返ってくるようになりました。</p><h4 id="Terraform-0-11系-1"><a href="#Terraform-0-11系-1" class="headerlink" title="Terraform 0.11系"></a>Terraform 0.11系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform validate</span><br></pre></td></tr></table></figure><h4 id="Terraform-0-12系-1"><a href="#Terraform-0-12系-1" class="headerlink" title="Terraform 0.12系"></a>Terraform 0.12系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform validate</span><br><span class="line">Success! The configuration is valid.</span><br></pre></td></tr></table></figure><h3 id="Planなどの実行結果がわかりやすくなった"><a href="#Planなどの実行結果がわかりやすくなった" class="headerlink" title="Planなどの実行結果がわかりやすくなった"></a>Planなどの実行結果がわかりやすくなった</h3><p>劇的な変化はないですが、見やすくなりました。</p><h4 id="Terraform-0-11系-2"><a href="#Terraform-0-11系-2" class="headerlink" title="Terraform 0.11系"></a>Terraform 0.11系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  + aws_vpc.vpc</span><br><span class="line">      id:                               &lt;computed&gt;</span><br><span class="line">      arn:                              &lt;computed&gt;</span><br><span class="line">      assign_generated_ipv6_cidr_block: <span class="string">"false"</span></span><br><span class="line">      cidr_block:                       <span class="string">"10.0.0.0/24"</span></span><br><span class="line">      default_network_acl_id:           &lt;computed&gt;</span><br><span class="line">      default_route_table_id:           &lt;computed&gt;</span><br><span class="line">      default_security_group_id:        &lt;computed&gt;</span><br><span class="line">      dhcp_options_id:                  &lt;computed&gt;</span><br><span class="line">      enable_classiclink:               &lt;computed&gt;</span><br><span class="line">      enable_classiclink_dns_support:   &lt;computed&gt;</span><br><span class="line">      enable_dns_hostnames:             &lt;computed&gt;</span><br><span class="line">      enable_dns_support:               <span class="string">"true"</span></span><br><span class="line">      instance_tenancy:                 <span class="string">"default"</span></span><br><span class="line">      ipv6_association_id:              &lt;computed&gt;</span><br><span class="line">      ipv6_cidr_block:                  &lt;computed&gt;</span><br><span class="line">      main_route_table_id:              &lt;computed&gt;</span><br><span class="line">      owner_id:                         &lt;computed&gt;</span><br><span class="line">      tags.%:                           <span class="string">"3"</span></span><br><span class="line">      tags.Env:                         <span class="string">"stg"</span></span><br><span class="line">      tags.Name:                        <span class="string">"stg-example"</span></span><br><span class="line">      tags.Project:                     <span class="string">"example"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><h4 id="Terraform-0-12系-2"><a href="#Terraform-0-12系-2" class="headerlink" title="Terraform 0.12系"></a>Terraform 0.12系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># aws_vpc.vpc will be created</span></span><br><span class="line">  + resource <span class="string">"aws_vpc"</span> <span class="string">"vpc"</span> &#123;</span><br><span class="line">      + arn                              = (known after apply)</span><br><span class="line">      + assign_generated_ipv6_cidr_block = <span class="literal">false</span></span><br><span class="line">      + cidr_block                       = <span class="string">"10.0.0.0/24"</span></span><br><span class="line">      + default_network_acl_id           = (known after apply)</span><br><span class="line">      + default_route_table_id           = (known after apply)</span><br><span class="line">      + default_security_group_id        = (known after apply)</span><br><span class="line">      + dhcp_options_id                  = (known after apply)</span><br><span class="line">      + enable_classiclink               = (known after apply)</span><br><span class="line">      + enable_classiclink_dns_support   = (known after apply)</span><br><span class="line">      + enable_dns_hostnames             = (known after apply)</span><br><span class="line">      + enable_dns_support               = <span class="literal">true</span></span><br><span class="line">      + id                               = (known after apply)</span><br><span class="line">      + instance_tenancy                 = <span class="string">"default"</span></span><br><span class="line">      + ipv6_association_id              = (known after apply)</span><br><span class="line">      + ipv6_cidr_block                  = (known after apply)</span><br><span class="line">      + main_route_table_id              = (known after apply)</span><br><span class="line">      + owner_id                         = (known after apply)</span><br><span class="line">      + tags                             = &#123;</span><br><span class="line">          + <span class="string">"Env"</span>     = <span class="string">"stg"</span></span><br><span class="line">          + <span class="string">"Name"</span>    = <span class="string">"stg-example"</span></span><br><span class="line">          + <span class="string">"Project"</span> = <span class="string">"example"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure><h2 id="for-eachの導入"><a href="#for-eachの導入" class="headerlink" title="for_eachの導入"></a>for_eachの導入</h2><p><code>for_each</code>が使えるようになりました！<br>これは個人的には革新的で今まで抱えていた問題を解決する一つの武器となると思っています。</p><h3 id="Terraform-0-11系-3"><a href="#Terraform-0-11系-3" class="headerlink" title="Terraform 0.11系"></a>Terraform 0.11系</h3><p>サブネットを作成するときに以下のように<code>count</code>を利用するケースがありました。</p><figure class="highlight bash"><figcaption><span>sample_subnet.tf（抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data <span class="string">"aws_availability_zones"</span> <span class="string">"available"</span> &#123;</span><br><span class="line">  state = <span class="string">"available"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_subnet"</span> <span class="string">"public_subnet"</span> &#123;</span><br><span class="line">  count             = 3</span><br><span class="line">  vpc_id            = aws_vpc.vpc.id</span><br><span class="line">  availability_zone = <span class="string">"<span class="variable">$&#123;data.aws_availability_zones.available.names[count.index]&#125;</span>"</span></span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.vpc.cidr_block, 8, count.index + 0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一見問題ないように見えるのですが、<code>count</code>を利用しているため、数字をインクリメントしてリストが作成されていきます。<br>その結果、リストの変更などでインデックスがずれてしまう問題が発生する可能性がありました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># aws_subnet.public_subnet[0] will be created</span><br></pre></td></tr></table></figure><h3 id="Terraform-0-12系-3"><a href="#Terraform-0-12系-3" class="headerlink" title="Terraform 0.12系"></a>Terraform 0.12系</h3><p><code>0.12.6</code>から<code>for_each</code>をマップ形式でアクセスできるようになりました。<br>以下のように<code>for_each</code>で定義し、<code>each.key</code>と<code>each.value</code>で各要素にアクセスできます。</p><figure class="highlight bash"><figcaption><span>subnet.tf（抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_subnet"</span> <span class="string">"public_subnet"</span> &#123;</span><br><span class="line">  for_each          = local.subnet_numbers</span><br><span class="line">  vpc_id            = aws_vpc.vpc.id</span><br><span class="line">  availability_zone = each.key</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.vpc.cidr_block, 8, each.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_subnet"</span> <span class="string">"private_subnet"</span> &#123;</span><br><span class="line">  for_each          = local.subnet_numbers</span><br><span class="line">  vpc_id            = aws_vpc.vpc.id</span><br><span class="line">  availability_zone = each.key</span><br><span class="line">  cidr_block        = cidrsubnet(aws_vpc.vpc.cidr_block, 8, each.value + 3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for_each</code>で参照する定義をvariable.tfに追記します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">subnet_numbers = &#123;</span><br><span class="line">  &quot;ap-southeast-2a&quot; = 1</span><br><span class="line">  &quot;ap-southeast-2b&quot; = 2</span><br><span class="line">  &quot;ap-southeast-2c&quot; = 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>NAT Gateway</code>のように一つのサブネットに作成したい場合などに役立ちます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subnet_id     = aws_subnet.public_subnet[&quot;ap-southeast-2a&quot;].id</span><br></pre></td></tr></table></figure><p>ちなみに、<code>0.12.6</code>より古いバージョンで<code>terraform validate</code>を実行するとエラーが発生します。</p><figure class="highlight bash"><figcaption><span>Error（terrform0.12.5実行結果）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Error: Reserved argument name <span class="keyword">in</span> resource block</span><br><span class="line"></span><br><span class="line">  on subnet.tf line 2, <span class="keyword">in</span> resource <span class="string">"aws_subnet"</span> <span class="string">"public_subnet"</span>:</span><br><span class="line">   2:   for_each          = local.subnet_numbers</span><br><span class="line"></span><br><span class="line">The name <span class="string">"for_each"</span> is reserved <span class="keyword">for</span> use <span class="keyword">in</span> a future version of Terraform.</span><br></pre></td></tr></table></figure><h2 id="lookupについて"><a href="#lookupについて" class="headerlink" title="lookupについて"></a>lookupについて</h2><p>今回の構成では、お伝えすることができなかったのですが、Terraform 0.12からlookupの書き方が変わったので変更点を以下に記載します。</p><h3 id="Terraform-0-11系-4"><a href="#Terraform-0-11系-4" class="headerlink" title="Terraform 0.11系"></a>Terraform 0.11系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance_type               = <span class="string">"<span class="variable">$&#123;lookup(local.ec2_config[terraform.workspace], "instance_type")&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="Terraform-0-12系-4"><a href="#Terraform-0-12系-4" class="headerlink" title="Terraform 0.12系"></a>Terraform 0.12系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance_type               = local.ec2_config[terraform.workspace][<span class="string">"instance_type"</span>]</span><br></pre></td></tr></table></figure><h1 id="Terraform-0-11-14からアップグレードする方法"><a href="#Terraform-0-11-14からアップグレードする方法" class="headerlink" title="Terraform 0.11.14からアップグレードする方法"></a>Terraform 0.11.14からアップグレードする方法</h1><p>ここからは、すでにTerraform0.11系を利用している方のために、ざっくりですが0.12にアップグレードする方法を記載します。</p><h2 id="Terraform-アップグレード"><a href="#Terraform-アップグレード" class="headerlink" title="Terraform アップグレード"></a>Terraform アップグレード</h2><p>Terraform 0.11.14でinitを実行します<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform init</span><br></pre></td></tr></table></figure><p>Workspaceを切り替えます（Workspace環境を前提にしています。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace list</span><br><span class="line">$ terraform workspace select stg</span><br></pre></td></tr></table></figure><p><code>terraform plan</code>を実行します。<br>もし、planを実行し、差分が発生した場合はTerraform 0.12に対応した構文に変更する必要があります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan</span><br></pre></td></tr></table></figure><p><code>checklistコマンド</code>を実行し、アップグレード可能な状態かを確認します。<br>問題がなければ<code>Looks good!</code>と出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ terraform_0.11 0.12checklist</span><br><span class="line">Looks good! We did not detect any problems that ought to be</span><br><span class="line">addressed before upgrading to Terraform v0.12.</span><br><span class="line"></span><br><span class="line">This tool is not perfect though, so please check the v0.12 upgrade</span><br><span class="line">guide <span class="keyword">for</span> additional guidance, and <span class="keyword">for</span> next steps:</span><br><span class="line">    https://www.terraform.io/upgrade-guides/0-12.html</span><br></pre></td></tr></table></figure><p>terraformのバージョンを0.12に変更し、initを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform init</span><br></pre></td></tr></table></figure><p><code>upgradeコマンド</code>を実行します。<br>問題がなければ<code>Upgrade complete!</code>と出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform 0.12upgrade</span><br><span class="line">Upgrade complete!</span><br></pre></td></tr></table></figure><p><code>plan</code>を実行し、問題が発生しなければアップグレード完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terrafrom plan</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>いかがでしたか？</p><p>Terraform 0.12になったことで、構文が変わって戸惑う場面もあるかと思いますが、それ以上に恩恵を授かれることを少しでも感じ取ってもらえたのではないでしょうか。また、これを機にTerraformを触ってみたいぞ！って方が増えたら嬉しいです。</p><p>今回は、VPCの話しかできなかったので、次回は更にこの環境を大きくしていき、皆さんのお役に立てる記事を書いていきたいと思います。</p><p>ありがとうございました！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.terraform.io/upgrade-guides/0-12.html" target="_blank" rel="noopener">Upgrading to Terraform v0.12</a><br><a href="https://www.terraform.io/docs/configuration/resources.html#for_each-multiple-resource-instances-defined-by-a-map-or-set-of-strings" target="_blank" rel="noopener">Resouces</a><br><a href="https://www.hashicorp.com/blog/hashicorp-terraform-0-12-preview-for-and-for-each" target="_blank" rel="noopener">Terraform 0.12 Preview</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">Terraformを0.12にアップグレードする場合は、<code>0.11.14</code>まで上げる必要があります。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちはー&lt;br&gt;TIG DXチーム&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;foot
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
  </entry>
  
  <entry>
    <title>はじめてのTerraform 0.12 ～環境構築～</title>
    <link href="https://future-architect.github.io/articles/20190816/"/>
    <id>https://future-architect.github.io/articles/20190816/</id>
    <published>2019-08-16T03:43:21.000Z</published>
    <updated>2019-08-18T22:35:23.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちはー<br>TIG DXチーム<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>のゆるふわエンジニアの前原です。</p><p>最近は、プラットフォームを新規で構築するプロジェクトや、既存の環境を運用改善していくプロジェクトに従事しています。その中で私はクラウドインフラ部分を担当しており、アーキテクチャデザインや、Terraform・Ansible・Packerといった構成管理ツールを利用したAWSやGCP環境の構築をしています。</p><p>本記事では、最近バージョンアップしたTerraform 0.12の構文がこんな感じで変わったよー的な話を伝えていきます。</p><p>大きくは以下の流れで進めます。</p><ol><li>Terraformの事始め (今回の記事です)</li><li>Terraform 0.12でVPCを構築する （<a href="https://future-architect.github.io/articles/20190819/">次回の記事</a>で説明します！）</li></ol><p>これからTerraformを触っていきたいといった方にもわかるように書いていきます。<br>そのため少し長めの内容になってしまいますが、お付き合いください。</p><h1 id="Terraformとは"><a href="#Terraformとは" class="headerlink" title="Terraformとは"></a>Terraformとは</h1><p><a href="https://www.terraform.io/" target="_blank" rel="noopener">Terraform</a>は、<a href="https://www.hashicorp.com/" target="_blank" rel="noopener">HashiCorp</a>によって開発された構成管理ツールで、主にクラウド環境（クラウド以外でも利用可能）を構築するときに利用します。</p><p>Terraformなどのツールを利用しない場合は、ブラウザを通してGUIから構築するケースがあるかと思います。その場合は、作業ミスをなくすために設定手順書やパラメータシートを元に構築するかとおもいますが、規模が大きくなったり関わる人が多くなってくると、人による設定ミスなどが発生することも多いのでは無いでしょうか。ミスを回避するために、各種施策やドキュメントの陳腐化を防ぐ方法に時間を費やすことも多々あるでしょう。</p><p>そういったケースにTerraformのような構成管理ツールを利用することで、インフラの構成をコードに落とし込み、状態を定義することができるようになります。</p><p>これにより誰が実行しても結果が同じになることで、ミスを低減することが可能です。また、コードを見ることで常にインフラの最新状態を把握することができます。また、コード化しているため、Gitなどのバージョン管理システムで管理することもできます。</p><p>…と、ここまでメリットについて書きましたが、いざTerraformを使用するとそれなりに学習コストが必要となります。</p><h1 id="Terraformの事始め"><a href="#Terraformの事始め" class="headerlink" title="Terraformの事始め"></a>Terraformの事始め</h1><p>ここでは、Terraformを実行するための環境をつくります。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>Terraformを体験するために以下の環境で行います。</p><ul><li><code>AWS</code></li><li><code>Terraform: 0.12.6</code> &amp; <code>0.11.14</code></li><li><code>tfenv: 1.0.1</code></li><li><code>MacBook Pro Mojave</code> or <code>Windows10 64bit</code></li></ul><h2 id="Terraformのインストール"><a href="#Terraformのインストール" class="headerlink" title="Terraformのインストール"></a>Terraformのインストール</h2><p>Terraformのインストールを行います。</p><h3 id="MacOSの場合"><a href="#MacOSの場合" class="headerlink" title="MacOSの場合"></a>MacOSの場合</h3><p>Terraformの実行環境を準備します。<br>今回は、バージョンの切り替えを楽にしてくれる<a href="https://github.com/tfutils/tfenv" target="_blank" rel="noopener">tfenv</a>を利用します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Install tfenv</span></span><br><span class="line">$ brew install tfenv</span><br><span class="line">$ tfenv -v</span><br><span class="line">tfenv 1.0.1</span><br></pre></td></tr></table></figure><p>tfenvでterraformをインストールし、使用可能なバージョンを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tfenv install latest</span><br><span class="line">$ tfenv install 0.11.14</span><br><span class="line">$ tfenv list</span><br><span class="line">* 0.12.6 (<span class="built_in">set</span> by /usr/<span class="built_in">local</span>/Cellar/tfenv/1.0.1/version)</span><br><span class="line">  0.11.14</span><br></pre></td></tr></table></figure><p>バージョンの切り替えは、<code>use</code>を利用することで簡単に切り替えることができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tfenv use 0.11.14</span><br><span class="line">[INFO] Switching to v0.11.14</span><br><span class="line">[INFO] Switching completed</span><br></pre></td></tr></table></figure><p>tfenvを使用しない場合は、<a href="https://learn.hashicorp.com/terraform/getting-started/install.html" target="_blank" rel="noopener">こちら</a>のサイトを確認してください。</p><h3 id="Windowsの場合"><a href="#Windowsの場合" class="headerlink" title="Windowsの場合"></a>Windowsの場合</h3><p>Terraformを<a href="https://www.terraform.io/downloads.html" target="_blank" rel="noopener">ダウンロード</a>します。<br>ダウンロードしたファイルを解凍し、<code>C:¥Windows</code>配下に<code>terraform.exe</code>を配置します。<br>コマンドプロントもしくはお使いのターミナルを開き、以下のコマンドを発行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform version</span><br><span class="line">Terraform v0.12.6</span><br></pre></td></tr></table></figure><p>ここでは試しておりませんが、Windowsもtfenv（only git-bash）に対応しているので興味のある方は試して頂ければと思います。  </p><ul><li>GitHub: <a href="https://github.com/tfutils/tfenv" target="_blank" rel="noopener">tfenv</a></li></ul><h2 id="Terraform-を実行するまでにやること"><a href="#Terraform-を実行するまでにやること" class="headerlink" title="Terraform を実行するまでにやること"></a>Terraform を実行するまでにやること</h2><h3 id="環境変数の設定"><a href="#環境変数の設定" class="headerlink" title="環境変数の設定"></a>環境変数の設定</h3><p>AWSのAPIを発行するために必要な設定です。<br>AWSのIAM Userであらかじめユーザを作成し、アクセスキーとシークレットキーを環境変数にセットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOSの場合</span></span><br><span class="line">$ <span class="built_in">export</span> AWS_ACCESS_KEY_ID=xxx</span><br><span class="line">$ <span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windowsの場合</span></span><br><span class="line">$ <span class="built_in">set</span> AWS_ACCESS_KEY_ID=xxx</span><br><span class="line">$ <span class="built_in">set</span> AWS_SECRET_ACCESS_KEY=xxx</span><br></pre></td></tr></table></figure><p>MacOSの場合に限りますが、複数のAWSアカウント扱っている場合は、<a href="https://direnv.net/" target="_blank" rel="noopener">direnv</a>を利用するとディレクトリ単位で環境変数を切り替えることができるため便利です。</p><p>もし、HTTP Proxy配下の環境で実行したい場合は以下のオプションも追加で設定ください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOSの場合</span></span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=https://proxy.example.com:443</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windowsの場合</span></span><br><span class="line"><span class="built_in">set</span> HTTPS_PROXY=https://proxy.example.com:443</span><br></pre></td></tr></table></figure><h3 id="tfstateファイルの管理について"><a href="#tfstateファイルの管理について" class="headerlink" title="tfstateファイルの管理について"></a>tfstateファイルの管理について</h3><p>tfstateファイルは、Terraformで管理しているインフラの状態を管理するためのファイルです。<br>このファイルは非常に大切です。</p><p>通常、tfstateファイルを保存する場所を指定しない場合は、Terraformを実行したディレクトリに保存されます。<br>そのため、複数人でTerraformを実行する環境や、可用性を意識するとローカルでの保存はイケてないです。</p><p>そこで、tfstateファイルを管理するためのS3 バケットを用意します。<br>（<a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-macos.html" target="_blank" rel="noopener">AWS CLI</a>が実行できることを前提とします）<br>また、バケットはバージョニングの設定をします。<br>バージョニングすることでtfstateファイルに予期せぬ更新や、壊してしまった時に戻せるようにするためです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### バケットの作成</span></span><br><span class="line">$ aws s3 mb s3://example-bucket --region ap-southeast-2</span><br><span class="line"><span class="comment">### バージョニングの設定</span></span><br><span class="line">$ aws s3api put-bucket-versioning --bucket example-bucket --versioning-configuration Status=Enabled</span><br><span class="line"><span class="comment">### バージョニングの設定ができていることを確認します</span></span><br><span class="line">$ aws s3api get-bucket-versioning --bucket example-bucket</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"Status"</span>: <span class="string">"Enabled"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="リージョンの選択"><a href="#リージョンの選択" class="headerlink" title="リージョンの選択"></a>リージョンの選択</h3><p>リージョンは適切に選択してください。<br>もし学習用途であればバージニア（us-east-1）を利用することを個人的におすすめします。<br>理由は、単純に安いからです！</p><p>ただ、本記事は諸事情によりシドニーで構築しています（ap-southeast-2）</p><h2 id="Terraformのディレクトリ構成"><a href="#Terraformのディレクトリ構成" class="headerlink" title="Terraformのディレクトリ構成"></a>Terraformのディレクトリ構成</h2><p>以下のようなフラットなディレクトリ構成で、1つのディレクトリにtfファイルを配置する設計にします。</p><p>以下の3つのtfファイルについては、次章以降で説明します。</p><ul><li>backend.tf</li><li>provider.tf</li><li>versions.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── backend.tf</span><br><span class="line">├── provider.tf</span><br><span class="line">├── versions.tf</span><br><span class="line">└── ...(次回の記事で説明します)</span><br></pre></td></tr></table></figure><h2 id="Backendの指定"><a href="#Backendの指定" class="headerlink" title="Backendの指定"></a>Backendの指定</h2><p>tfstateファイルをS3 バケットで管理するため、Backend用のtfファイルを作成します。<br>先ほどAWS CLIで作成したバケットを指定します。</p><figure class="highlight bash"><figcaption><span>backend.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">"s3"</span> &#123;</span><br><span class="line">    bucket = <span class="string">"example-bucket"</span></span><br><span class="line">    key    = <span class="string">"state/service"</span></span><br><span class="line">    region = <span class="string">"ap-southeast-2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Providerの指定"><a href="#Providerの指定" class="headerlink" title="Providerの指定"></a>Providerの指定</h2><p>Terraformは、AWSだけでなく、GCP、Alibaba Cloudなど様々なプロバイダに対応しています。<br>今回は、AWSを利用するための定義をします。<br>また、リージョンを指定します。</p><figure class="highlight bash"><figcaption><span>provider.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">"aws"</span> &#123;</span><br><span class="line">  region = <span class="string">"ap-southeast-2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Versions"><a href="#Versions" class="headerlink" title="Versions"></a>Versions</h3><p>このファイルはなくても問題ないのですが、Terraform 0.12から構文が変わっているため、明示的に記述します。<br>以下により<code>0.12</code>以上のバージョンでないと実行できないようになっています。<br>（Terraformのアップグレードコマンドで0.12にした場合は、自動で作成されます）</p><figure class="highlight bash"><figcaption><span>versions.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_version = <span class="string">"&gt;= 0.12"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Terraform-init"><a href="#Terraform-init" class="headerlink" title="Terraform init"></a>Terraform init</h2><p>準備が整ったので、Terraformを実行します。<br>まず、Terraformのワークスペースの初期化や、プラグインをダウンロードするために<code>terraform init</code>を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform init</span><br></pre></td></tr></table></figure><p>問題がなければ以下のようなメッセージが出力されます。</p><blockquote><p>Terraform has been successfully initialized!</p></blockquote><p>仮に<code>0.11.14</code>で<code>terraform init</code>を実行すると以下の結果になります。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform init</span></span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line">Backend configuration changed!</span><br><span class="line"></span><br><span class="line">Terraform has detected that the configuration specified for the backend</span><br><span class="line">has changed. Terraform will now check for existing state in the backends.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Successfully configured the backend "s3"! Terraform will automatically</span><br><span class="line">use this backend unless the backend configuration changes.</span><br><span class="line"></span><br><span class="line">Error: The currently running version of Terraform doesn't meet the</span><br><span class="line">version requirements explicitly specified by the configuration.</span><br><span class="line">Please use the required version or update the configuration.</span><br><span class="line">Note that version requirements are usually set for a reason, so</span><br><span class="line">we recommend verifying with whoever set the version requirements</span><br><span class="line">prior to making any manual changes.</span><br><span class="line"></span><br><span class="line">  Module: root</span><br><span class="line">  Required version: &gt;= 0.12</span><br><span class="line">  Current version: 0.11.14</span><br></pre></td></tr></table></figure><h2 id="Workspaces-の準備"><a href="#Workspaces-の準備" class="headerlink" title="Workspaces の準備"></a>Workspaces の準備</h2><p>本構成は、<code>stg</code>と<code>prd</code> の二つの環境を構築します。<br>stgはStaging(検証環境)、prdはProduction(本番環境)の略です。</p><p>Terraformでは、複数の環境を構築するにあたって便利な<code>Workkspace</code>があります。<br>Workspaceを使うことで、ディレクトリで環境を分けることなく、コード内で識別することが可能となります。</p><p>それでは、Workspaceコマンドで<code>stg</code>と<code>prd</code>を作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace new stg</span><br><span class="line">Created and switched to workspace <span class="string">"stg"</span>!</span><br><span class="line">$ terraform workspace new prd</span><br><span class="line">Created and switched to workspace <span class="string">"prd"</span>!</span><br></pre></td></tr></table></figure><p>現在のWorkspaceを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace show</span><br><span class="line">prd</span><br></pre></td></tr></table></figure><p>最後に作成した<code>prd</code>が対象になっているため、変更します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform workspace select stg</span><br><span class="line">Switched to workspace <span class="string">"stg"</span>.</span><br><span class="line">$ terraform workspace show</span><br><span class="line">stg</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これで、いよいよTerraformで環境構築できる準備が整いました。<br>次回の記事では実際のAWSリソースのTerraform定義から、VPCを作成する手順を説明していきますのでお楽しみに！</p><ul><li><a href="https://future-architect.github.io/articles/20190819/">はじめてのTerraform 0.12 ～実践編～</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちはー&lt;br&gt;TIG DXチーム&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;foot
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
  </entry>
  
</feed>
